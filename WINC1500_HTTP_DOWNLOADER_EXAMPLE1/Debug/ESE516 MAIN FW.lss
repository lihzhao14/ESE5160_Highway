
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0002a228  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000300  20000000  0003c228  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005a28  20000300  0003c530  00030300  2**4
                  ALLOC
  3 .stack        00002000  20005d28  00041f58  00030300  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00030328  2**0
                  CONTENTS, READONLY
  6 .debug_info   00146ebd  00000000  00000000  00030381  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00011e40  00000000  00000000  0017723e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000178a5  00000000  00000000  0018907e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00003f58  00000000  00000000  001a0923  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00003b50  00000000  00000000  001a487b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00044823  00000000  00000000  001a83cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0006477f  00000000  00000000  001ecbee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000c5759  00000000  00000000  0025136d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000eed8  00000000  00000000  00316ac8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	28 7d 00 20 c9 bf 02 00 c1 c0 02 00 c1 c0 02 00     (}. ............
	...
   1202c:	cd af 01 00 00 00 00 00 00 00 00 00 f1 b0 01 00     ................
   1203c:	39 b1 01 00 c1 c0 02 00 c1 c0 02 00 c1 c0 02 00     9...............
   1204c:	ed 7f 02 00 19 75 02 00 c1 c0 02 00 09 2e 01 00     .....u..........
   1205c:	c1 c0 02 00 4d 2f 01 00 91 86 02 00 a9 86 02 00     ....M/..........
   1206c:	c1 86 02 00 d9 86 02 00 f1 86 02 00 09 87 02 00     ................
   1207c:	11 bf 02 00 25 bf 02 00 39 bf 02 00 b9 8c 01 00     ....%...9.......
   1208c:	cd 8c 01 00 e1 8c 01 00 00 00 00 00 00 00 00 00     ................
   1209c:	91 2c 01 00 c1 c0 02 00 cd 2d 01 00 c1 c0 02 00     .,.......-......
   120ac:	c1 c0 02 00 00 00 00 00                             ........

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	20000300 	.word	0x20000300
   120d4:	00000000 	.word	0x00000000
   120d8:	0003c228 	.word	0x0003c228

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	20000304 	.word	0x20000304
   12108:	0003c228 	.word	0x0003c228
   1210c:	0003c228 	.word	0x0003c228
   12110:	00000000 	.word	0x00000000

00012114 <ssd1306_hard_reset>:
 * \brief Perform a hard reset of the OLED controller
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
   12114:	b580      	push	{r7, lr}
   12116:	af00      	add	r7, sp, #0
	/*uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
	port_pin_set_output_level(SSD1306_RES_PIN, false);
	delay_cycles(delay_10us); // At lest 10us
	port_pin_set_output_level(SSD1306_RES_PIN, true);
	delay_cycles(delay_10us); // At lest 10us*/
}
   12118:	46c0      	nop			; (mov r8, r8)
   1211a:	46bd      	mov	sp, r7
   1211c:	bd80      	pop	{r7, pc}

0001211e <ssd1306_interface_init>:
 *
 * Depending on what interface used for interfacing the OLED controller this
 * function will initialize the necessary hardware.
 */
static void ssd1306_interface_init(void)
{
   1211e:	b580      	push	{r7, lr}
   12120:	af00      	add	r7, sp, #0

}
   12122:	46c0      	nop			; (mov r8, r8)
   12124:	46bd      	mov	sp, r7
   12126:	bd80      	pop	{r7, pc}

00012128 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
   12128:	b580      	push	{r7, lr}
   1212a:	af00      	add	r7, sp, #0


	// Initialize the interface
	ssd1306_interface_init();
   1212c:	4b25      	ldr	r3, [pc, #148]	; (121c4 <ssd1306_init+0x9c>)
   1212e:	4798      	blx	r3

	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
   12130:	4b25      	ldr	r3, [pc, #148]	; (121c8 <ssd1306_init+0xa0>)
   12132:	4798      	blx	r3

	// Set the reset pin to the default state
	//port_pin_set_output_level(SSD1306_RES_PIN, true);
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFF); //0xAE
   12134:	20ae      	movs	r0, #174	; 0xae
   12136:	4b25      	ldr	r3, [pc, #148]	; (121cc <ssd1306_init+0xa4>)
   12138:	4798      	blx	r3
	
	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO); //0XD5
   1213a:	20d5      	movs	r0, #213	; 0xd5
   1213c:	4b23      	ldr	r3, [pc, #140]	; (121cc <ssd1306_init+0xa4>)
   1213e:	4798      	blx	r3
	ssd1306_write_command(0x80);
   12140:	2080      	movs	r0, #128	; 0x80
   12142:	4b22      	ldr	r3, [pc, #136]	; (121cc <ssd1306_init+0xa4>)
   12144:	4798      	blx	r3
	
	
	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO); //0XA8
   12146:	20a8      	movs	r0, #168	; 0xa8
   12148:	4b20      	ldr	r3, [pc, #128]	; (121cc <ssd1306_init+0xa4>)
   1214a:	4798      	blx	r3
	ssd1306_write_command(0x2F); //2F
   1214c:	202f      	movs	r0, #47	; 0x2f
   1214e:	4b1f      	ldr	r3, [pc, #124]	; (121cc <ssd1306_init+0xa4>)
   12150:	4798      	blx	r3
	
	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET); //D3
   12152:	20d3      	movs	r0, #211	; 0xd3
   12154:	4b1d      	ldr	r3, [pc, #116]	; (121cc <ssd1306_init+0xa4>)
   12156:	4798      	blx	r3
	ssd1306_write_command(0x00);
   12158:	2000      	movs	r0, #0
   1215a:	4b1c      	ldr	r3, [pc, #112]	; (121cc <ssd1306_init+0xa4>)
   1215c:	4798      	blx	r3
	
	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));	
   1215e:	2040      	movs	r0, #64	; 0x40
   12160:	4b1a      	ldr	r3, [pc, #104]	; (121cc <ssd1306_init+0xa4>)
   12162:	4798      	blx	r3
	
	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING); //8D
   12164:	208d      	movs	r0, #141	; 0x8d
   12166:	4b19      	ldr	r3, [pc, #100]	; (121cc <ssd1306_init+0xa4>)
   12168:	4798      	blx	r3
	ssd1306_write_command(0x14);
   1216a:	2014      	movs	r0, #20
   1216c:	4b17      	ldr	r3, [pc, #92]	; (121cc <ssd1306_init+0xa4>)
   1216e:	4798      	blx	r3

	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY); //A6
   12170:	20a6      	movs	r0, #166	; 0xa6
   12172:	4b16      	ldr	r3, [pc, #88]	; (121cc <ssd1306_init+0xa4>)
   12174:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON); //0xA4
   12176:	20a4      	movs	r0, #164	; 0xa4
   12178:	4b14      	ldr	r3, [pc, #80]	; (121cc <ssd1306_init+0xa4>)
   1217a:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL0_SEG0| 0x1); //0xA0
   1217c:	20a1      	movs	r0, #161	; 0xa1
   1217e:	4b13      	ldr	r3, [pc, #76]	; (121cc <ssd1306_init+0xa4>)
   12180:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN); //0xC8
   12182:	20c8      	movs	r0, #200	; 0xc8
   12184:	4b11      	ldr	r3, [pc, #68]	; (121cc <ssd1306_init+0xa4>)
   12186:	4798      	blx	r3
	
	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS); //0xDA
   12188:	20da      	movs	r0, #218	; 0xda
   1218a:	4b10      	ldr	r3, [pc, #64]	; (121cc <ssd1306_init+0xa4>)
   1218c:	4798      	blx	r3
	ssd1306_write_command(0x12);
   1218e:	2012      	movs	r0, #18
   12190:	4b0e      	ldr	r3, [pc, #56]	; (121cc <ssd1306_init+0xa4>)
   12192:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0); //0x81
   12194:	2081      	movs	r0, #129	; 0x81
   12196:	4b0d      	ldr	r3, [pc, #52]	; (121cc <ssd1306_init+0xa4>)
   12198:	4798      	blx	r3
	ssd1306_write_command(0x8F);
   1219a:	208f      	movs	r0, #143	; 0x8f
   1219c:	4b0b      	ldr	r3, [pc, #44]	; (121cc <ssd1306_init+0xa4>)
   1219e:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD); //0xD9
   121a0:	20d9      	movs	r0, #217	; 0xd9
   121a2:	4b0a      	ldr	r3, [pc, #40]	; (121cc <ssd1306_init+0xa4>)
   121a4:	4798      	blx	r3
	ssd1306_write_command(0xF1);	
   121a6:	20f1      	movs	r0, #241	; 0xf1
   121a8:	4b08      	ldr	r3, [pc, #32]	; (121cc <ssd1306_init+0xa4>)
   121aa:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL); //DB
   121ac:	20db      	movs	r0, #219	; 0xdb
   121ae:	4b07      	ldr	r3, [pc, #28]	; (121cc <ssd1306_init+0xa4>)
   121b0:	4798      	blx	r3
	ssd1306_write_command(0x40);
   121b2:	2040      	movs	r0, #64	; 0x40
   121b4:	4b05      	ldr	r3, [pc, #20]	; (121cc <ssd1306_init+0xa4>)
   121b6:	4798      	blx	r3

	
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
   121b8:	20af      	movs	r0, #175	; 0xaf
   121ba:	4b04      	ldr	r3, [pc, #16]	; (121cc <ssd1306_init+0xa4>)
   121bc:	4798      	blx	r3

}
   121be:	46c0      	nop			; (mov r8, r8)
   121c0:	46bd      	mov	sp, r7
   121c2:	bd80      	pop	{r7, pc}
   121c4:	0001211f 	.word	0x0001211f
   121c8:	00012115 	.word	0x00012115
   121cc:	000121d1 	.word	0x000121d1

000121d0 <ssd1306_write_command>:
 * \param command the command to write
 */


void ssd1306_write_command(uint8_t command)
{
   121d0:	b580      	push	{r7, lr}
   121d2:	b084      	sub	sp, #16
   121d4:	af00      	add	r7, sp, #0
   121d6:	0002      	movs	r2, r0
   121d8:	1dfb      	adds	r3, r7, #7
   121da:	701a      	strb	r2, [r3, #0]
	//Send 0 command byte
	uint8_t data[2];
	data[0] = I2C_COMMAND_SSD1306;
   121dc:	230c      	movs	r3, #12
   121de:	18fb      	adds	r3, r7, r3
   121e0:	2200      	movs	r2, #0
   121e2:	701a      	strb	r2, [r3, #0]
	data[1] = command;
   121e4:	230c      	movs	r3, #12
   121e6:	18fb      	adds	r3, r7, r3
   121e8:	1dfa      	adds	r2, r7, #7
   121ea:	7812      	ldrb	r2, [r2, #0]
   121ec:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   121ee:	4b0c      	ldr	r3, [pc, #48]	; (12220 <ssd1306_write_command+0x50>)
   121f0:	223c      	movs	r2, #60	; 0x3c
   121f2:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &data[0];
   121f4:	4b0a      	ldr	r3, [pc, #40]	; (12220 <ssd1306_write_command+0x50>)
   121f6:	220c      	movs	r2, #12
   121f8:	18ba      	adds	r2, r7, r2
   121fa:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(data);
   121fc:	4b08      	ldr	r3, [pc, #32]	; (12220 <ssd1306_write_command+0x50>)
   121fe:	2202      	movs	r2, #2
   12200:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   12202:	4b07      	ldr	r3, [pc, #28]	; (12220 <ssd1306_write_command+0x50>)
   12204:	2200      	movs	r2, #0
   12206:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12208:	4b05      	ldr	r3, [pc, #20]	; (12220 <ssd1306_write_command+0x50>)
   1220a:	2200      	movs	r2, #0
   1220c:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   1220e:	4b04      	ldr	r3, [pc, #16]	; (12220 <ssd1306_write_command+0x50>)
   12210:	2164      	movs	r1, #100	; 0x64
   12212:	0018      	movs	r0, r3
   12214:	4b03      	ldr	r3, [pc, #12]	; (12224 <ssd1306_write_command+0x54>)
   12216:	4798      	blx	r3
}
   12218:	46c0      	nop			; (mov r8, r8)
   1221a:	46bd      	mov	sp, r7
   1221c:	b004      	add	sp, #16
   1221e:	bd80      	pop	{r7, pc}
   12220:	20004770 	.word	0x20004770
   12224:	00014b1d 	.word	0x00014b1d

00012228 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
   12228:	b580      	push	{r7, lr}
   1222a:	b084      	sub	sp, #16
   1222c:	af00      	add	r7, sp, #0
   1222e:	0002      	movs	r2, r0
   12230:	1dfb      	adds	r3, r7, #7
   12232:	701a      	strb	r2, [r3, #0]
	uint8_t msg[2];
	msg[0] = I2C_DATA_SSD1306;
   12234:	230c      	movs	r3, #12
   12236:	18fb      	adds	r3, r7, r3
   12238:	2240      	movs	r2, #64	; 0x40
   1223a:	701a      	strb	r2, [r3, #0]
	msg[1] = data;
   1223c:	230c      	movs	r3, #12
   1223e:	18fb      	adds	r3, r7, r3
   12240:	1dfa      	adds	r2, r7, #7
   12242:	7812      	ldrb	r2, [r2, #0]
   12244:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   12246:	4b0c      	ldr	r3, [pc, #48]	; (12278 <ssd1306_write_data+0x50>)
   12248:	223c      	movs	r2, #60	; 0x3c
   1224a:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &msg[0];
   1224c:	4b0a      	ldr	r3, [pc, #40]	; (12278 <ssd1306_write_data+0x50>)
   1224e:	220c      	movs	r2, #12
   12250:	18ba      	adds	r2, r7, r2
   12252:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(msg);
   12254:	4b08      	ldr	r3, [pc, #32]	; (12278 <ssd1306_write_data+0x50>)
   12256:	2202      	movs	r2, #2
   12258:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   1225a:	4b07      	ldr	r3, [pc, #28]	; (12278 <ssd1306_write_data+0x50>)
   1225c:	2200      	movs	r2, #0
   1225e:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12260:	4b05      	ldr	r3, [pc, #20]	; (12278 <ssd1306_write_data+0x50>)
   12262:	2200      	movs	r2, #0
   12264:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   12266:	4b04      	ldr	r3, [pc, #16]	; (12278 <ssd1306_write_data+0x50>)
   12268:	2164      	movs	r1, #100	; 0x64
   1226a:	0018      	movs	r0, r3
   1226c:	4b03      	ldr	r3, [pc, #12]	; (1227c <ssd1306_write_data+0x54>)
   1226e:	4798      	blx	r3
}
   12270:	46c0      	nop			; (mov r8, r8)
   12272:	46bd      	mov	sp, r7
   12274:	b004      	add	sp, #16
   12276:	bd80      	pop	{r7, pc}
   12278:	20004770 	.word	0x20004770
   1227c:	00014b1d 	.word	0x00014b1d

00012280 <gfx_mono_set_framebuffer>:
	uint8_t framebuffer[FRAMEBUFFER_SIZE];
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
   12280:	b580      	push	{r7, lr}
   12282:	b082      	sub	sp, #8
   12284:	af00      	add	r7, sp, #0
   12286:	6078      	str	r0, [r7, #4]
	fbpointer = framebuffer;
   12288:	4b03      	ldr	r3, [pc, #12]	; (12298 <gfx_mono_set_framebuffer+0x18>)
   1228a:	687a      	ldr	r2, [r7, #4]
   1228c:	601a      	str	r2, [r3, #0]
}
   1228e:	46c0      	nop			; (mov r8, r8)
   12290:	46bd      	mov	sp, r7
   12292:	b002      	add	sp, #8
   12294:	bd80      	pop	{r7, pc}
   12296:	46c0      	nop			; (mov r8, r8)
   12298:	2000031c 	.word	0x2000031c

0001229c <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
   1229c:	b590      	push	{r4, r7, lr}
   1229e:	b083      	sub	sp, #12
   122a0:	af00      	add	r7, sp, #0
   122a2:	0004      	movs	r4, r0
   122a4:	0008      	movs	r0, r1
   122a6:	0011      	movs	r1, r2
   122a8:	1dfb      	adds	r3, r7, #7
   122aa:	1c22      	adds	r2, r4, #0
   122ac:	701a      	strb	r2, [r3, #0]
   122ae:	1dbb      	adds	r3, r7, #6
   122b0:	1c02      	adds	r2, r0, #0
   122b2:	701a      	strb	r2, [r3, #0]
   122b4:	1d7b      	adds	r3, r7, #5
   122b6:	1c0a      	adds	r2, r1, #0
   122b8:	701a      	strb	r2, [r3, #0]
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
   122ba:	4b08      	ldr	r3, [pc, #32]	; (122dc <gfx_mono_framebuffer_put_byte+0x40>)
   122bc:	681a      	ldr	r2, [r3, #0]
   122be:	1dfb      	adds	r3, r7, #7
   122c0:	781b      	ldrb	r3, [r3, #0]
   122c2:	019b      	lsls	r3, r3, #6
   122c4:	0019      	movs	r1, r3
   122c6:	1dbb      	adds	r3, r7, #6
   122c8:	781b      	ldrb	r3, [r3, #0]
   122ca:	18cb      	adds	r3, r1, r3
   122cc:	18d3      	adds	r3, r2, r3
   122ce:	1d7a      	adds	r2, r7, #5
   122d0:	7812      	ldrb	r2, [r2, #0]
   122d2:	701a      	strb	r2, [r3, #0]
}
   122d4:	46c0      	nop			; (mov r8, r8)
   122d6:	46bd      	mov	sp, r7
   122d8:	b003      	add	sp, #12
   122da:	bd90      	pop	{r4, r7, pc}
   122dc:	2000031c 	.word	0x2000031c

000122e0 <gfx_mono_framebuffer_get_byte>:
 * \code
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   122e0:	b580      	push	{r7, lr}
   122e2:	b082      	sub	sp, #8
   122e4:	af00      	add	r7, sp, #0
   122e6:	0002      	movs	r2, r0
   122e8:	1dfb      	adds	r3, r7, #7
   122ea:	701a      	strb	r2, [r3, #0]
   122ec:	1dbb      	adds	r3, r7, #6
   122ee:	1c0a      	adds	r2, r1, #0
   122f0:	701a      	strb	r2, [r3, #0]
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
   122f2:	4b07      	ldr	r3, [pc, #28]	; (12310 <gfx_mono_framebuffer_get_byte+0x30>)
   122f4:	681a      	ldr	r2, [r3, #0]
   122f6:	1dfb      	adds	r3, r7, #7
   122f8:	781b      	ldrb	r3, [r3, #0]
   122fa:	019b      	lsls	r3, r3, #6
   122fc:	0019      	movs	r1, r3
   122fe:	1dbb      	adds	r3, r7, #6
   12300:	781b      	ldrb	r3, [r3, #0]
   12302:	18cb      	adds	r3, r1, r3
   12304:	18d3      	adds	r3, r2, r3
   12306:	781b      	ldrb	r3, [r3, #0]
}
   12308:	0018      	movs	r0, r3
   1230a:	46bd      	mov	sp, r7
   1230c:	b002      	add	sp, #8
   1230e:	bd80      	pop	{r7, pc}
   12310:	2000031c 	.word	0x2000031c

00012314 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
   12314:	b5b0      	push	{r4, r5, r7, lr}
   12316:	b084      	sub	sp, #16
   12318:	af00      	add	r7, sp, #0
   1231a:	0005      	movs	r5, r0
   1231c:	000c      	movs	r4, r1
   1231e:	0010      	movs	r0, r2
   12320:	0019      	movs	r1, r3
   12322:	1dfb      	adds	r3, r7, #7
   12324:	1c2a      	adds	r2, r5, #0
   12326:	701a      	strb	r2, [r3, #0]
   12328:	1dbb      	adds	r3, r7, #6
   1232a:	1c22      	adds	r2, r4, #0
   1232c:	701a      	strb	r2, [r3, #0]
   1232e:	1d7b      	adds	r3, r7, #5
   12330:	1c02      	adds	r2, r0, #0
   12332:	701a      	strb	r2, [r3, #0]
   12334:	1d3b      	adds	r3, r7, #4
   12336:	1c0a      	adds	r2, r1, #0
   12338:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
   1233a:	1dfb      	adds	r3, r7, #7
   1233c:	781a      	ldrb	r2, [r3, #0]
   1233e:	1d7b      	adds	r3, r7, #5
   12340:	781b      	ldrb	r3, [r3, #0]
   12342:	18d3      	adds	r3, r2, r3
   12344:	2b40      	cmp	r3, #64	; 0x40
   12346:	dd05      	ble.n	12354 <gfx_mono_generic_draw_horizontal_line+0x40>
		length = GFX_MONO_LCD_WIDTH - x;
   12348:	1d7b      	adds	r3, r7, #5
   1234a:	1dfa      	adds	r2, r7, #7
   1234c:	7812      	ldrb	r2, [r2, #0]
   1234e:	2140      	movs	r1, #64	; 0x40
   12350:	1a8a      	subs	r2, r1, r2
   12352:	701a      	strb	r2, [r3, #0]
	}

	page = y / 8;
   12354:	230f      	movs	r3, #15
   12356:	18fb      	adds	r3, r7, r3
   12358:	1dba      	adds	r2, r7, #6
   1235a:	7812      	ldrb	r2, [r2, #0]
   1235c:	08d2      	lsrs	r2, r2, #3
   1235e:	701a      	strb	r2, [r3, #0]
	pixelmask = (1 << (y - (page * 8)));
   12360:	1dbb      	adds	r3, r7, #6
   12362:	781a      	ldrb	r2, [r3, #0]
   12364:	230f      	movs	r3, #15
   12366:	18fb      	adds	r3, r7, r3
   12368:	781b      	ldrb	r3, [r3, #0]
   1236a:	00db      	lsls	r3, r3, #3
   1236c:	1ad3      	subs	r3, r2, r3
   1236e:	2201      	movs	r2, #1
   12370:	409a      	lsls	r2, r3
   12372:	230e      	movs	r3, #14
   12374:	18fb      	adds	r3, r7, r3
   12376:	701a      	strb	r2, [r3, #0]

	if (length == 0) {
   12378:	1d7b      	adds	r3, r7, #5
   1237a:	781b      	ldrb	r3, [r3, #0]
   1237c:	2b00      	cmp	r3, #0
   1237e:	d100      	bne.n	12382 <gfx_mono_generic_draw_horizontal_line+0x6e>
   12380:	e0a4      	b.n	124cc <gfx_mono_generic_draw_horizontal_line+0x1b8>
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
   12382:	1d3b      	adds	r3, r7, #4
   12384:	781b      	ldrb	r3, [r3, #0]
   12386:	2b01      	cmp	r3, #1
   12388:	d02f      	beq.n	123ea <gfx_mono_generic_draw_horizontal_line+0xd6>
   1238a:	2b02      	cmp	r3, #2
   1238c:	d100      	bne.n	12390 <gfx_mono_generic_draw_horizontal_line+0x7c>
   1238e:	e095      	b.n	124bc <gfx_mono_generic_draw_horizontal_line+0x1a8>
   12390:	2b00      	cmp	r3, #0
   12392:	d061      	beq.n	12458 <gfx_mono_generic_draw_horizontal_line+0x144>
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	default:
		break;
   12394:	e09b      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   12396:	1dfa      	adds	r2, r7, #7
   12398:	1d7b      	adds	r3, r7, #5
   1239a:	7812      	ldrb	r2, [r2, #0]
   1239c:	781b      	ldrb	r3, [r3, #0]
   1239e:	18d3      	adds	r3, r2, r3
   123a0:	b2da      	uxtb	r2, r3
   123a2:	230d      	movs	r3, #13
   123a4:	18fc      	adds	r4, r7, r3
   123a6:	230f      	movs	r3, #15
   123a8:	18fb      	adds	r3, r7, r3
   123aa:	781b      	ldrb	r3, [r3, #0]
   123ac:	0011      	movs	r1, r2
   123ae:	0018      	movs	r0, r3
   123b0:	4b48      	ldr	r3, [pc, #288]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   123b2:	4798      	blx	r3
   123b4:	0003      	movs	r3, r0
   123b6:	7023      	strb	r3, [r4, #0]
			temp |= pixelmask;
   123b8:	230d      	movs	r3, #13
   123ba:	18fb      	adds	r3, r7, r3
   123bc:	220d      	movs	r2, #13
   123be:	18b9      	adds	r1, r7, r2
   123c0:	220e      	movs	r2, #14
   123c2:	18ba      	adds	r2, r7, r2
   123c4:	7809      	ldrb	r1, [r1, #0]
   123c6:	7812      	ldrb	r2, [r2, #0]
   123c8:	430a      	orrs	r2, r1
   123ca:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   123cc:	1dfa      	adds	r2, r7, #7
   123ce:	1d7b      	adds	r3, r7, #5
   123d0:	7812      	ldrb	r2, [r2, #0]
   123d2:	781b      	ldrb	r3, [r3, #0]
   123d4:	18d3      	adds	r3, r2, r3
   123d6:	b2d9      	uxtb	r1, r3
   123d8:	230d      	movs	r3, #13
   123da:	18fb      	adds	r3, r7, r3
   123dc:	781a      	ldrb	r2, [r3, #0]
   123de:	230f      	movs	r3, #15
   123e0:	18fb      	adds	r3, r7, r3
   123e2:	7818      	ldrb	r0, [r3, #0]
   123e4:	2300      	movs	r3, #0
   123e6:	4c3c      	ldr	r4, [pc, #240]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   123e8:	47a0      	blx	r4
		while (length-- > 0) {
   123ea:	1d7b      	adds	r3, r7, #5
   123ec:	781b      	ldrb	r3, [r3, #0]
   123ee:	1d7a      	adds	r2, r7, #5
   123f0:	1e59      	subs	r1, r3, #1
   123f2:	7011      	strb	r1, [r2, #0]
   123f4:	2b00      	cmp	r3, #0
   123f6:	d1ce      	bne.n	12396 <gfx_mono_generic_draw_horizontal_line+0x82>
		break;
   123f8:	e069      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   123fa:	1dfa      	adds	r2, r7, #7
   123fc:	1d7b      	adds	r3, r7, #5
   123fe:	7812      	ldrb	r2, [r2, #0]
   12400:	781b      	ldrb	r3, [r3, #0]
   12402:	18d3      	adds	r3, r2, r3
   12404:	b2da      	uxtb	r2, r3
   12406:	230d      	movs	r3, #13
   12408:	18fc      	adds	r4, r7, r3
   1240a:	230f      	movs	r3, #15
   1240c:	18fb      	adds	r3, r7, r3
   1240e:	781b      	ldrb	r3, [r3, #0]
   12410:	0011      	movs	r1, r2
   12412:	0018      	movs	r0, r3
   12414:	4b2f      	ldr	r3, [pc, #188]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   12416:	4798      	blx	r3
   12418:	0003      	movs	r3, r0
   1241a:	7023      	strb	r3, [r4, #0]
			temp &= ~pixelmask;
   1241c:	230e      	movs	r3, #14
   1241e:	18fb      	adds	r3, r7, r3
   12420:	781b      	ldrb	r3, [r3, #0]
   12422:	b25b      	sxtb	r3, r3
   12424:	43db      	mvns	r3, r3
   12426:	b25b      	sxtb	r3, r3
   12428:	220d      	movs	r2, #13
   1242a:	18ba      	adds	r2, r7, r2
   1242c:	7812      	ldrb	r2, [r2, #0]
   1242e:	b252      	sxtb	r2, r2
   12430:	4013      	ands	r3, r2
   12432:	b25a      	sxtb	r2, r3
   12434:	230d      	movs	r3, #13
   12436:	18fb      	adds	r3, r7, r3
   12438:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   1243a:	1dfa      	adds	r2, r7, #7
   1243c:	1d7b      	adds	r3, r7, #5
   1243e:	7812      	ldrb	r2, [r2, #0]
   12440:	781b      	ldrb	r3, [r3, #0]
   12442:	18d3      	adds	r3, r2, r3
   12444:	b2d9      	uxtb	r1, r3
   12446:	230d      	movs	r3, #13
   12448:	18fb      	adds	r3, r7, r3
   1244a:	781a      	ldrb	r2, [r3, #0]
   1244c:	230f      	movs	r3, #15
   1244e:	18fb      	adds	r3, r7, r3
   12450:	7818      	ldrb	r0, [r3, #0]
   12452:	2300      	movs	r3, #0
   12454:	4c20      	ldr	r4, [pc, #128]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   12456:	47a0      	blx	r4
		while (length-- > 0) {
   12458:	1d7b      	adds	r3, r7, #5
   1245a:	781b      	ldrb	r3, [r3, #0]
   1245c:	1d7a      	adds	r2, r7, #5
   1245e:	1e59      	subs	r1, r3, #1
   12460:	7011      	strb	r1, [r2, #0]
   12462:	2b00      	cmp	r3, #0
   12464:	d1c9      	bne.n	123fa <gfx_mono_generic_draw_horizontal_line+0xe6>
		break;
   12466:	e032      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   12468:	1dfa      	adds	r2, r7, #7
   1246a:	1d7b      	adds	r3, r7, #5
   1246c:	7812      	ldrb	r2, [r2, #0]
   1246e:	781b      	ldrb	r3, [r3, #0]
   12470:	18d3      	adds	r3, r2, r3
   12472:	b2da      	uxtb	r2, r3
   12474:	230d      	movs	r3, #13
   12476:	18fc      	adds	r4, r7, r3
   12478:	230f      	movs	r3, #15
   1247a:	18fb      	adds	r3, r7, r3
   1247c:	781b      	ldrb	r3, [r3, #0]
   1247e:	0011      	movs	r1, r2
   12480:	0018      	movs	r0, r3
   12482:	4b14      	ldr	r3, [pc, #80]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   12484:	4798      	blx	r3
   12486:	0003      	movs	r3, r0
   12488:	7023      	strb	r3, [r4, #0]
			temp ^= pixelmask;
   1248a:	230d      	movs	r3, #13
   1248c:	18fb      	adds	r3, r7, r3
   1248e:	220d      	movs	r2, #13
   12490:	18b9      	adds	r1, r7, r2
   12492:	220e      	movs	r2, #14
   12494:	18ba      	adds	r2, r7, r2
   12496:	7809      	ldrb	r1, [r1, #0]
   12498:	7812      	ldrb	r2, [r2, #0]
   1249a:	404a      	eors	r2, r1
   1249c:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   1249e:	1dfa      	adds	r2, r7, #7
   124a0:	1d7b      	adds	r3, r7, #5
   124a2:	7812      	ldrb	r2, [r2, #0]
   124a4:	781b      	ldrb	r3, [r3, #0]
   124a6:	18d3      	adds	r3, r2, r3
   124a8:	b2d9      	uxtb	r1, r3
   124aa:	230d      	movs	r3, #13
   124ac:	18fb      	adds	r3, r7, r3
   124ae:	781a      	ldrb	r2, [r3, #0]
   124b0:	230f      	movs	r3, #15
   124b2:	18fb      	adds	r3, r7, r3
   124b4:	7818      	ldrb	r0, [r3, #0]
   124b6:	2300      	movs	r3, #0
   124b8:	4c07      	ldr	r4, [pc, #28]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   124ba:	47a0      	blx	r4
		while (length-- > 0) {
   124bc:	1d7b      	adds	r3, r7, #5
   124be:	781b      	ldrb	r3, [r3, #0]
   124c0:	1d7a      	adds	r2, r7, #5
   124c2:	1e59      	subs	r1, r3, #1
   124c4:	7011      	strb	r1, [r2, #0]
   124c6:	2b00      	cmp	r3, #0
   124c8:	d1ce      	bne.n	12468 <gfx_mono_generic_draw_horizontal_line+0x154>
		break;
   124ca:	e000      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
		return;
   124cc:	46c0      	nop			; (mov r8, r8)
	}
}
   124ce:	46bd      	mov	sp, r7
   124d0:	b004      	add	sp, #16
   124d2:	bdb0      	pop	{r4, r5, r7, pc}
   124d4:	00012a8d 	.word	0x00012a8d
   124d8:	000129ed 	.word	0x000129ed

000124dc <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
   124dc:	b5b0      	push	{r4, r5, r7, lr}
   124de:	b082      	sub	sp, #8
   124e0:	af00      	add	r7, sp, #0
   124e2:	0005      	movs	r5, r0
   124e4:	000c      	movs	r4, r1
   124e6:	0010      	movs	r0, r2
   124e8:	0019      	movs	r1, r3
   124ea:	1dfb      	adds	r3, r7, #7
   124ec:	1c2a      	adds	r2, r5, #0
   124ee:	701a      	strb	r2, [r3, #0]
   124f0:	1dbb      	adds	r3, r7, #6
   124f2:	1c22      	adds	r2, r4, #0
   124f4:	701a      	strb	r2, [r3, #0]
   124f6:	1d7b      	adds	r3, r7, #5
   124f8:	1c02      	adds	r2, r0, #0
   124fa:	701a      	strb	r2, [r3, #0]
   124fc:	1d3b      	adds	r3, r7, #4
   124fe:	1c0a      	adds	r2, r1, #0
   12500:	701a      	strb	r2, [r3, #0]
	if (height == 0) {
   12502:	1d3b      	adds	r3, r7, #4
   12504:	781b      	ldrb	r3, [r3, #0]
   12506:	2b00      	cmp	r3, #0
   12508:	d018      	beq.n	1253c <gfx_mono_generic_draw_filled_rect+0x60>
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
   1250a:	e00f      	b.n	1252c <gfx_mono_generic_draw_filled_rect+0x50>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
   1250c:	1dba      	adds	r2, r7, #6
   1250e:	1d3b      	adds	r3, r7, #4
   12510:	7812      	ldrb	r2, [r2, #0]
   12512:	781b      	ldrb	r3, [r3, #0]
   12514:	18d3      	adds	r3, r2, r3
   12516:	b2d9      	uxtb	r1, r3
   12518:	2318      	movs	r3, #24
   1251a:	18fb      	adds	r3, r7, r3
   1251c:	781c      	ldrb	r4, [r3, #0]
   1251e:	1d7b      	adds	r3, r7, #5
   12520:	781a      	ldrb	r2, [r3, #0]
   12522:	1dfb      	adds	r3, r7, #7
   12524:	7818      	ldrb	r0, [r3, #0]
   12526:	0023      	movs	r3, r4
   12528:	4c06      	ldr	r4, [pc, #24]	; (12544 <gfx_mono_generic_draw_filled_rect+0x68>)
   1252a:	47a0      	blx	r4
	while (height-- > 0) {
   1252c:	1d3b      	adds	r3, r7, #4
   1252e:	781b      	ldrb	r3, [r3, #0]
   12530:	1d3a      	adds	r2, r7, #4
   12532:	1e59      	subs	r1, r3, #1
   12534:	7011      	strb	r1, [r2, #0]
   12536:	2b00      	cmp	r3, #0
   12538:	d1e8      	bne.n	1250c <gfx_mono_generic_draw_filled_rect+0x30>
   1253a:	e000      	b.n	1253e <gfx_mono_generic_draw_filled_rect+0x62>
		return;
   1253c:	46c0      	nop			; (mov r8, r8)
	}
}
   1253e:	46bd      	mov	sp, r7
   12540:	b002      	add	sp, #8
   12542:	bdb0      	pop	{r4, r5, r7, pc}
   12544:	00012315 	.word	0x00012315

00012548 <gfx_mono_draw_char_progmem>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
static void gfx_mono_draw_char_progmem(const char ch, const gfx_coord_t x,
		const gfx_coord_t y, const struct font *font)
{
   12548:	b590      	push	{r4, r7, lr}
   1254a:	b087      	sub	sp, #28
   1254c:	af00      	add	r7, sp, #0
   1254e:	0004      	movs	r4, r0
   12550:	0008      	movs	r0, r1
   12552:	0011      	movs	r1, r2
   12554:	603b      	str	r3, [r7, #0]
   12556:	1dfb      	adds	r3, r7, #7
   12558:	1c22      	adds	r2, r4, #0
   1255a:	701a      	strb	r2, [r3, #0]
   1255c:	1dbb      	adds	r3, r7, #6
   1255e:	1c02      	adds	r2, r0, #0
   12560:	701a      	strb	r2, [r3, #0]
   12562:	1d7b      	adds	r3, r7, #5
   12564:	1c0a      	adds	r2, r1, #0
   12566:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	/* Sanity check on parameters, assert if font is NULL. */
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
   12568:	2310      	movs	r3, #16
   1256a:	18fb      	adds	r3, r7, r3
   1256c:	1dba      	adds	r2, r7, #6
   1256e:	7812      	ldrb	r2, [r2, #0]
   12570:	701a      	strb	r2, [r3, #0]
	gfx_coord_t inc_y = y;
   12572:	230f      	movs	r3, #15
   12574:	18fb      	adds	r3, r7, r3
   12576:	1d7a      	adds	r2, r7, #5
   12578:	7812      	ldrb	r2, [r2, #0]
   1257a:	701a      	strb	r2, [r3, #0]

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
   1257c:	683b      	ldr	r3, [r7, #0]
   1257e:	7a1a      	ldrb	r2, [r3, #8]
   12580:	2313      	movs	r3, #19
   12582:	18fb      	adds	r3, r7, r3
   12584:	08d2      	lsrs	r2, r2, #3
   12586:	701a      	strb	r2, [r3, #0]
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
   12588:	683b      	ldr	r3, [r7, #0]
   1258a:	7a1b      	ldrb	r3, [r3, #8]
   1258c:	2207      	movs	r2, #7
   1258e:	4013      	ands	r3, r2
   12590:	b2db      	uxtb	r3, r3
   12592:	2b00      	cmp	r3, #0
   12594:	d006      	beq.n	125a4 <gfx_mono_draw_char_progmem+0x5c>
		char_row_size++;
   12596:	2313      	movs	r3, #19
   12598:	18fb      	adds	r3, r7, r3
   1259a:	781a      	ldrb	r2, [r3, #0]
   1259c:	2313      	movs	r3, #19
   1259e:	18fb      	adds	r3, r7, r3
   125a0:	3201      	adds	r2, #1
   125a2:	701a      	strb	r2, [r3, #0]
	}

	glyph_data_offset = char_row_size * font->height *
   125a4:	2313      	movs	r3, #19
   125a6:	18fb      	adds	r3, r7, r3
   125a8:	781b      	ldrb	r3, [r3, #0]
   125aa:	b29b      	uxth	r3, r3
   125ac:	683a      	ldr	r2, [r7, #0]
   125ae:	7a52      	ldrb	r2, [r2, #9]
   125b0:	b292      	uxth	r2, r2
   125b2:	4353      	muls	r3, r2
   125b4:	b29a      	uxth	r2, r3
			((uint8_t)ch - font->first_char);
   125b6:	1dfb      	adds	r3, r7, #7
   125b8:	781b      	ldrb	r3, [r3, #0]
   125ba:	6839      	ldr	r1, [r7, #0]
   125bc:	7a89      	ldrb	r1, [r1, #10]
   125be:	1a5b      	subs	r3, r3, r1
	glyph_data_offset = char_row_size * font->height *
   125c0:	b299      	uxth	r1, r3
   125c2:	230c      	movs	r3, #12
   125c4:	18fb      	adds	r3, r7, r3
   125c6:	434a      	muls	r2, r1
   125c8:	801a      	strh	r2, [r3, #0]
	glyph_data = font->data.progmem + glyph_data_offset;
   125ca:	683b      	ldr	r3, [r7, #0]
   125cc:	685a      	ldr	r2, [r3, #4]
   125ce:	230c      	movs	r3, #12
   125d0:	18fb      	adds	r3, r7, r3
   125d2:	881b      	ldrh	r3, [r3, #0]
   125d4:	18d3      	adds	r3, r2, r3
   125d6:	617b      	str	r3, [r7, #20]
	rows_left = font->height;
   125d8:	2312      	movs	r3, #18
   125da:	18fb      	adds	r3, r7, r3
   125dc:	683a      	ldr	r2, [r7, #0]
   125de:	7a52      	ldrb	r2, [r2, #9]
   125e0:	701a      	strb	r2, [r3, #0]

	do {
		uint8_t glyph_byte = 0;
   125e2:	230e      	movs	r3, #14
   125e4:	18fb      	adds	r3, r7, r3
   125e6:	2200      	movs	r2, #0
   125e8:	701a      	strb	r2, [r3, #0]
		uint8_t pixelsToDraw = font->width;
   125ea:	230b      	movs	r3, #11
   125ec:	18fb      	adds	r3, r7, r3
   125ee:	683a      	ldr	r2, [r7, #0]
   125f0:	7a12      	ldrb	r2, [r2, #8]
   125f2:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < pixelsToDraw; i++) {
   125f4:	2311      	movs	r3, #17
   125f6:	18fb      	adds	r3, r7, r3
   125f8:	2200      	movs	r2, #0
   125fa:	701a      	strb	r2, [r3, #0]
   125fc:	e034      	b.n	12668 <gfx_mono_draw_char_progmem+0x120>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
   125fe:	2311      	movs	r3, #17
   12600:	18fb      	adds	r3, r7, r3
   12602:	781b      	ldrb	r3, [r3, #0]
   12604:	2207      	movs	r2, #7
   12606:	4013      	ands	r3, r2
   12608:	b2db      	uxtb	r3, r3
   1260a:	2b00      	cmp	r3, #0
   1260c:	d107      	bne.n	1261e <gfx_mono_draw_char_progmem+0xd6>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
   1260e:	230e      	movs	r3, #14
   12610:	18fb      	adds	r3, r7, r3
   12612:	697a      	ldr	r2, [r7, #20]
   12614:	7812      	ldrb	r2, [r2, #0]
   12616:	701a      	strb	r2, [r3, #0]
				glyph_data++;
   12618:	697b      	ldr	r3, [r7, #20]
   1261a:	3301      	adds	r3, #1
   1261c:	617b      	str	r3, [r7, #20]
			}

			if ((glyph_byte & 0x80)) {
   1261e:	230e      	movs	r3, #14
   12620:	18fb      	adds	r3, r7, r3
   12622:	781b      	ldrb	r3, [r3, #0]
   12624:	b25b      	sxtb	r3, r3
   12626:	2b00      	cmp	r3, #0
   12628:	da09      	bge.n	1263e <gfx_mono_draw_char_progmem+0xf6>
				gfx_mono_draw_pixel(inc_x, inc_y,
   1262a:	230f      	movs	r3, #15
   1262c:	18fb      	adds	r3, r7, r3
   1262e:	7819      	ldrb	r1, [r3, #0]
   12630:	2310      	movs	r3, #16
   12632:	18fb      	adds	r3, r7, r3
   12634:	781b      	ldrb	r3, [r3, #0]
   12636:	2201      	movs	r2, #1
   12638:	0018      	movs	r0, r3
   1263a:	4b1d      	ldr	r3, [pc, #116]	; (126b0 <gfx_mono_draw_char_progmem+0x168>)
   1263c:	4798      	blx	r3
						GFX_PIXEL_SET);
			}

			inc_x += 1;
   1263e:	2310      	movs	r3, #16
   12640:	18fb      	adds	r3, r7, r3
   12642:	2210      	movs	r2, #16
   12644:	18ba      	adds	r2, r7, r2
   12646:	7812      	ldrb	r2, [r2, #0]
   12648:	3201      	adds	r2, #1
   1264a:	701a      	strb	r2, [r3, #0]
			glyph_byte <<= 1;
   1264c:	230e      	movs	r3, #14
   1264e:	18fa      	adds	r2, r7, r3
   12650:	230e      	movs	r3, #14
   12652:	18fb      	adds	r3, r7, r3
   12654:	781b      	ldrb	r3, [r3, #0]
   12656:	18db      	adds	r3, r3, r3
   12658:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < pixelsToDraw; i++) {
   1265a:	2311      	movs	r3, #17
   1265c:	18fb      	adds	r3, r7, r3
   1265e:	781a      	ldrb	r2, [r3, #0]
   12660:	2311      	movs	r3, #17
   12662:	18fb      	adds	r3, r7, r3
   12664:	3201      	adds	r2, #1
   12666:	701a      	strb	r2, [r3, #0]
   12668:	2311      	movs	r3, #17
   1266a:	18fa      	adds	r2, r7, r3
   1266c:	230b      	movs	r3, #11
   1266e:	18fb      	adds	r3, r7, r3
   12670:	7812      	ldrb	r2, [r2, #0]
   12672:	781b      	ldrb	r3, [r3, #0]
   12674:	429a      	cmp	r2, r3
   12676:	d3c2      	bcc.n	125fe <gfx_mono_draw_char_progmem+0xb6>
		}

		inc_y += 1;
   12678:	230f      	movs	r3, #15
   1267a:	18fb      	adds	r3, r7, r3
   1267c:	220f      	movs	r2, #15
   1267e:	18ba      	adds	r2, r7, r2
   12680:	7812      	ldrb	r2, [r2, #0]
   12682:	3201      	adds	r2, #1
   12684:	701a      	strb	r2, [r3, #0]
		inc_x = x;
   12686:	2310      	movs	r3, #16
   12688:	18fb      	adds	r3, r7, r3
   1268a:	1dba      	adds	r2, r7, #6
   1268c:	7812      	ldrb	r2, [r2, #0]
   1268e:	701a      	strb	r2, [r3, #0]
		rows_left--;
   12690:	2312      	movs	r3, #18
   12692:	18fb      	adds	r3, r7, r3
   12694:	781a      	ldrb	r2, [r3, #0]
   12696:	2312      	movs	r3, #18
   12698:	18fb      	adds	r3, r7, r3
   1269a:	3a01      	subs	r2, #1
   1269c:	701a      	strb	r2, [r3, #0]
	} while (rows_left > 0);
   1269e:	2312      	movs	r3, #18
   126a0:	18fb      	adds	r3, r7, r3
   126a2:	781b      	ldrb	r3, [r3, #0]
   126a4:	2b00      	cmp	r3, #0
   126a6:	d19c      	bne.n	125e2 <gfx_mono_draw_char_progmem+0x9a>
}
   126a8:	46c0      	nop			; (mov r8, r8)
   126aa:	46bd      	mov	sp, r7
   126ac:	b007      	add	sp, #28
   126ae:	bd90      	pop	{r4, r7, pc}
   126b0:	000128f9 	.word	0x000128f9

000126b4 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
   126b4:	b590      	push	{r4, r7, lr}
   126b6:	b085      	sub	sp, #20
   126b8:	af02      	add	r7, sp, #8
   126ba:	0004      	movs	r4, r0
   126bc:	0008      	movs	r0, r1
   126be:	0011      	movs	r1, r2
   126c0:	603b      	str	r3, [r7, #0]
   126c2:	1dfb      	adds	r3, r7, #7
   126c4:	1c22      	adds	r2, r4, #0
   126c6:	701a      	strb	r2, [r3, #0]
   126c8:	1dbb      	adds	r3, r7, #6
   126ca:	1c02      	adds	r2, r0, #0
   126cc:	701a      	strb	r2, [r3, #0]
   126ce:	1d7b      	adds	r3, r7, #5
   126d0:	1c0a      	adds	r2, r1, #0
   126d2:	701a      	strb	r2, [r3, #0]
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
   126d4:	683b      	ldr	r3, [r7, #0]
   126d6:	7a1a      	ldrb	r2, [r3, #8]
   126d8:	683b      	ldr	r3, [r7, #0]
   126da:	7a5c      	ldrb	r4, [r3, #9]
   126dc:	1d7b      	adds	r3, r7, #5
   126de:	7819      	ldrb	r1, [r3, #0]
   126e0:	1dbb      	adds	r3, r7, #6
   126e2:	7818      	ldrb	r0, [r3, #0]
   126e4:	2300      	movs	r3, #0
   126e6:	9300      	str	r3, [sp, #0]
   126e8:	0023      	movs	r3, r4
   126ea:	4c0b      	ldr	r4, [pc, #44]	; (12718 <gfx_mono_draw_char+0x64>)
   126ec:	47a0      	blx	r4
			GFX_PIXEL_CLR);

	switch (font->type) {
   126ee:	683b      	ldr	r3, [r7, #0]
   126f0:	781b      	ldrb	r3, [r3, #0]
   126f2:	2b00      	cmp	r3, #0
   126f4:	d000      	beq.n	126f8 <gfx_mono_draw_char+0x44>

#endif
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
   126f6:	e00a      	b.n	1270e <gfx_mono_draw_char+0x5a>
		gfx_mono_draw_char_progmem(c, x, y, font);
   126f8:	683c      	ldr	r4, [r7, #0]
   126fa:	1d7b      	adds	r3, r7, #5
   126fc:	781a      	ldrb	r2, [r3, #0]
   126fe:	1dbb      	adds	r3, r7, #6
   12700:	7819      	ldrb	r1, [r3, #0]
   12702:	1dfb      	adds	r3, r7, #7
   12704:	7818      	ldrb	r0, [r3, #0]
   12706:	0023      	movs	r3, r4
   12708:	4c04      	ldr	r4, [pc, #16]	; (1271c <gfx_mono_draw_char+0x68>)
   1270a:	47a0      	blx	r4
		break;
   1270c:	46c0      	nop			; (mov r8, r8)
	}
}
   1270e:	46c0      	nop			; (mov r8, r8)
   12710:	46bd      	mov	sp, r7
   12712:	b003      	add	sp, #12
   12714:	bd90      	pop	{r4, r7, pc}
   12716:	46c0      	nop			; (mov r8, r8)
   12718:	000124dd 	.word	0x000124dd
   1271c:	00012549 	.word	0x00012549

00012720 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
   12720:	b590      	push	{r4, r7, lr}
   12722:	b087      	sub	sp, #28
   12724:	af00      	add	r7, sp, #0
   12726:	60f8      	str	r0, [r7, #12]
   12728:	0008      	movs	r0, r1
   1272a:	0011      	movs	r1, r2
   1272c:	607b      	str	r3, [r7, #4]
   1272e:	230b      	movs	r3, #11
   12730:	18fb      	adds	r3, r7, r3
   12732:	1c02      	adds	r2, r0, #0
   12734:	701a      	strb	r2, [r3, #0]
   12736:	230a      	movs	r3, #10
   12738:	18fb      	adds	r3, r7, r3
   1273a:	1c0a      	adds	r2, r1, #0
   1273c:	701a      	strb	r2, [r3, #0]
	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;
   1273e:	2317      	movs	r3, #23
   12740:	18fb      	adds	r3, r7, r3
   12742:	220b      	movs	r2, #11
   12744:	18ba      	adds	r2, r7, r2
   12746:	7812      	ldrb	r2, [r2, #0]
   12748:	701a      	strb	r2, [r3, #0]
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
   1274a:	68fb      	ldr	r3, [r7, #12]
   1274c:	781b      	ldrb	r3, [r3, #0]
   1274e:	2b0a      	cmp	r3, #10
   12750:	d111      	bne.n	12776 <gfx_mono_draw_string+0x56>
			x = start_of_string_position_x;
   12752:	230b      	movs	r3, #11
   12754:	18fb      	adds	r3, r7, r3
   12756:	2217      	movs	r2, #23
   12758:	18ba      	adds	r2, r7, r2
   1275a:	7812      	ldrb	r2, [r2, #0]
   1275c:	701a      	strb	r2, [r3, #0]
			y += font->height + 1;
   1275e:	687b      	ldr	r3, [r7, #4]
   12760:	7a5a      	ldrb	r2, [r3, #9]
   12762:	230a      	movs	r3, #10
   12764:	18fb      	adds	r3, r7, r3
   12766:	781b      	ldrb	r3, [r3, #0]
   12768:	18d3      	adds	r3, r2, r3
   1276a:	b2da      	uxtb	r2, r3
   1276c:	230a      	movs	r3, #10
   1276e:	18fb      	adds	r3, r7, r3
   12770:	3201      	adds	r2, #1
   12772:	701a      	strb	r2, [r3, #0]
   12774:	e018      	b.n	127a8 <gfx_mono_draw_string+0x88>
		} else if (*str == '\r') {
   12776:	68fb      	ldr	r3, [r7, #12]
   12778:	781b      	ldrb	r3, [r3, #0]
   1277a:	2b0d      	cmp	r3, #13
   1277c:	d014      	beq.n	127a8 <gfx_mono_draw_string+0x88>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
   1277e:	68fb      	ldr	r3, [r7, #12]
   12780:	7818      	ldrb	r0, [r3, #0]
   12782:	687c      	ldr	r4, [r7, #4]
   12784:	230a      	movs	r3, #10
   12786:	18fb      	adds	r3, r7, r3
   12788:	781a      	ldrb	r2, [r3, #0]
   1278a:	230b      	movs	r3, #11
   1278c:	18fb      	adds	r3, r7, r3
   1278e:	7819      	ldrb	r1, [r3, #0]
   12790:	0023      	movs	r3, r4
   12792:	4c0b      	ldr	r4, [pc, #44]	; (127c0 <gfx_mono_draw_string+0xa0>)
   12794:	47a0      	blx	r4
			x += font->width;
   12796:	687b      	ldr	r3, [r7, #4]
   12798:	7a19      	ldrb	r1, [r3, #8]
   1279a:	230b      	movs	r3, #11
   1279c:	18fb      	adds	r3, r7, r3
   1279e:	220b      	movs	r2, #11
   127a0:	18ba      	adds	r2, r7, r2
   127a2:	7812      	ldrb	r2, [r2, #0]
   127a4:	188a      	adds	r2, r1, r2
   127a6:	701a      	strb	r2, [r3, #0]
		}
	} while (*(++str));
   127a8:	68fb      	ldr	r3, [r7, #12]
   127aa:	3301      	adds	r3, #1
   127ac:	60fb      	str	r3, [r7, #12]
   127ae:	68fb      	ldr	r3, [r7, #12]
   127b0:	781b      	ldrb	r3, [r3, #0]
   127b2:	2b00      	cmp	r3, #0
   127b4:	d1c9      	bne.n	1274a <gfx_mono_draw_string+0x2a>
}
   127b6:	46c0      	nop			; (mov r8, r8)
   127b8:	46bd      	mov	sp, r7
   127ba:	b007      	add	sp, #28
   127bc:	bd90      	pop	{r4, r7, pc}
   127be:	46c0      	nop			; (mov r8, r8)
   127c0:	000126b5 	.word	0x000126b5

000127c4 <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
   127c4:	b580      	push	{r7, lr}
   127c6:	b082      	sub	sp, #8
   127c8:	af00      	add	r7, sp, #0
   127ca:	0002      	movs	r2, r0
   127cc:	1dfb      	adds	r3, r7, #7
   127ce:	701a      	strb	r2, [r3, #0]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
   127d0:	1dfb      	adds	r3, r7, #7
   127d2:	1dfa      	adds	r2, r7, #7
   127d4:	7812      	ldrb	r2, [r2, #0]
   127d6:	210f      	movs	r1, #15
   127d8:	400a      	ands	r2, r1
   127da:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
   127dc:	1dfb      	adds	r3, r7, #7
   127de:	781b      	ldrb	r3, [r3, #0]
   127e0:	2250      	movs	r2, #80	; 0x50
   127e2:	4252      	negs	r2, r2
   127e4:	4313      	orrs	r3, r2
   127e6:	b2db      	uxtb	r3, r3
   127e8:	0018      	movs	r0, r3
   127ea:	4b03      	ldr	r3, [pc, #12]	; (127f8 <ssd1306_set_page_address+0x34>)
   127ec:	4798      	blx	r3
}
   127ee:	46c0      	nop			; (mov r8, r8)
   127f0:	46bd      	mov	sp, r7
   127f2:	b002      	add	sp, #8
   127f4:	bd80      	pop	{r7, pc}
   127f6:	46c0      	nop			; (mov r8, r8)
   127f8:	000121d1 	.word	0x000121d1

000127fc <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
   127fc:	b580      	push	{r7, lr}
   127fe:	b082      	sub	sp, #8
   12800:	af00      	add	r7, sp, #0
   12802:	0002      	movs	r2, r0
   12804:	1dfb      	adds	r3, r7, #7
   12806:	701a      	strb	r2, [r3, #0]
	// Make sure the address is 7 bits
	address &= 0x7F;
   12808:	1dfb      	adds	r3, r7, #7
   1280a:	1dfa      	adds	r2, r7, #7
   1280c:	7812      	ldrb	r2, [r2, #0]
   1280e:	217f      	movs	r1, #127	; 0x7f
   12810:	400a      	ands	r2, r1
   12812:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4)+ 0x02); //ESE516 change
   12814:	1dfb      	adds	r3, r7, #7
   12816:	781b      	ldrb	r3, [r3, #0]
   12818:	091b      	lsrs	r3, r3, #4
   1281a:	b2db      	uxtb	r3, r3
   1281c:	2210      	movs	r2, #16
   1281e:	4313      	orrs	r3, r2
   12820:	b2db      	uxtb	r3, r3
   12822:	3302      	adds	r3, #2
   12824:	b2db      	uxtb	r3, r3
   12826:	0018      	movs	r0, r3
   12828:	4b06      	ldr	r3, [pc, #24]	; (12844 <ssd1306_set_column_address+0x48>)
   1282a:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
   1282c:	1dfb      	adds	r3, r7, #7
   1282e:	781b      	ldrb	r3, [r3, #0]
   12830:	220f      	movs	r2, #15
   12832:	4013      	ands	r3, r2
   12834:	b2db      	uxtb	r3, r3
   12836:	0018      	movs	r0, r3
   12838:	4b02      	ldr	r3, [pc, #8]	; (12844 <ssd1306_set_column_address+0x48>)
   1283a:	4798      	blx	r3
}
   1283c:	46c0      	nop			; (mov r8, r8)
   1283e:	46bd      	mov	sp, r7
   12840:	b002      	add	sp, #8
   12842:	bd80      	pop	{r7, pc}
   12844:	000121d1 	.word	0x000121d1

00012848 <ssd1306_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the OLED.
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
   12848:	b580      	push	{r7, lr}
   1284a:	b082      	sub	sp, #8
   1284c:	af00      	add	r7, sp, #0
   1284e:	0002      	movs	r2, r0
   12850:	1dfb      	adds	r3, r7, #7
   12852:	701a      	strb	r2, [r3, #0]
	// Make sure address is 6 bits
	address &= 0x3F;
   12854:	1dfb      	adds	r3, r7, #7
   12856:	1dfa      	adds	r2, r7, #7
   12858:	7812      	ldrb	r2, [r2, #0]
   1285a:	213f      	movs	r1, #63	; 0x3f
   1285c:	400a      	ands	r2, r1
   1285e:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
   12860:	1dfb      	adds	r3, r7, #7
   12862:	781b      	ldrb	r3, [r3, #0]
   12864:	2240      	movs	r2, #64	; 0x40
   12866:	4313      	orrs	r3, r2
   12868:	b2db      	uxtb	r3, r3
   1286a:	0018      	movs	r0, r3
   1286c:	4b02      	ldr	r3, [pc, #8]	; (12878 <ssd1306_set_display_start_line_address+0x30>)
   1286e:	4798      	blx	r3
}
   12870:	46c0      	nop			; (mov r8, r8)
   12872:	46bd      	mov	sp, r7
   12874:	b002      	add	sp, #8
   12876:	bd80      	pop	{r7, pc}
   12878:	000121d1 	.word	0x000121d1

0001287c <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
   1287c:	b590      	push	{r4, r7, lr}
   1287e:	b083      	sub	sp, #12
   12880:	af00      	add	r7, sp, #0
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
   12882:	4b18      	ldr	r3, [pc, #96]	; (128e4 <gfx_mono_ssd1306_init+0x68>)
   12884:	0018      	movs	r0, r3
   12886:	4b18      	ldr	r3, [pc, #96]	; (128e8 <gfx_mono_ssd1306_init+0x6c>)
   12888:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
   1288a:	4b18      	ldr	r3, [pc, #96]	; (128ec <gfx_mono_ssd1306_init+0x70>)
   1288c:	4798      	blx	r3

	/* Set display to output data from line 0 */
	ssd1306_set_display_start_line_address(0);
   1288e:	2000      	movs	r0, #0
   12890:	4b17      	ldr	r3, [pc, #92]	; (128f0 <gfx_mono_ssd1306_init+0x74>)
   12892:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   12894:	1dfb      	adds	r3, r7, #7
   12896:	2200      	movs	r2, #0
   12898:	701a      	strb	r2, [r3, #0]
   1289a:	e01a      	b.n	128d2 <gfx_mono_ssd1306_init+0x56>
		for (column = 0; column < 128; column++) {
   1289c:	1dbb      	adds	r3, r7, #6
   1289e:	2200      	movs	r2, #0
   128a0:	701a      	strb	r2, [r3, #0]
   128a2:	e00c      	b.n	128be <gfx_mono_ssd1306_init+0x42>
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
   128a4:	1dbb      	adds	r3, r7, #6
   128a6:	7819      	ldrb	r1, [r3, #0]
   128a8:	1dfb      	adds	r3, r7, #7
   128aa:	7818      	ldrb	r0, [r3, #0]
   128ac:	2301      	movs	r3, #1
   128ae:	2200      	movs	r2, #0
   128b0:	4c10      	ldr	r4, [pc, #64]	; (128f4 <gfx_mono_ssd1306_init+0x78>)
   128b2:	47a0      	blx	r4
		for (column = 0; column < 128; column++) {
   128b4:	1dbb      	adds	r3, r7, #6
   128b6:	781a      	ldrb	r2, [r3, #0]
   128b8:	1dbb      	adds	r3, r7, #6
   128ba:	3201      	adds	r2, #1
   128bc:	701a      	strb	r2, [r3, #0]
   128be:	1dbb      	adds	r3, r7, #6
   128c0:	781b      	ldrb	r3, [r3, #0]
   128c2:	b25b      	sxtb	r3, r3
   128c4:	2b00      	cmp	r3, #0
   128c6:	daed      	bge.n	128a4 <gfx_mono_ssd1306_init+0x28>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   128c8:	1dfb      	adds	r3, r7, #7
   128ca:	781a      	ldrb	r2, [r3, #0]
   128cc:	1dfb      	adds	r3, r7, #7
   128ce:	3201      	adds	r2, #1
   128d0:	701a      	strb	r2, [r3, #0]
   128d2:	1dfb      	adds	r3, r7, #7
   128d4:	781b      	ldrb	r3, [r3, #0]
   128d6:	2b05      	cmp	r3, #5
   128d8:	d9e0      	bls.n	1289c <gfx_mono_ssd1306_init+0x20>
		}
	}
}
   128da:	46c0      	nop			; (mov r8, r8)
   128dc:	46bd      	mov	sp, r7
   128de:	b003      	add	sp, #12
   128e0:	bd90      	pop	{r4, r7, pc}
   128e2:	46c0      	nop			; (mov r8, r8)
   128e4:	20000320 	.word	0x20000320
   128e8:	00012281 	.word	0x00012281
   128ec:	00012129 	.word	0x00012129
   128f0:	00012849 	.word	0x00012849
   128f4:	000129ed 	.word	0x000129ed

000128f8 <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
   128f8:	b590      	push	{r4, r7, lr}
   128fa:	b085      	sub	sp, #20
   128fc:	af00      	add	r7, sp, #0
   128fe:	0004      	movs	r4, r0
   12900:	0008      	movs	r0, r1
   12902:	0011      	movs	r1, r2
   12904:	1dfb      	adds	r3, r7, #7
   12906:	1c22      	adds	r2, r4, #0
   12908:	701a      	strb	r2, [r3, #0]
   1290a:	1dbb      	adds	r3, r7, #6
   1290c:	1c02      	adds	r2, r0, #0
   1290e:	701a      	strb	r2, [r3, #0]
   12910:	1d7b      	adds	r3, r7, #5
   12912:	1c0a      	adds	r2, r1, #0
   12914:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
   12916:	1dfb      	adds	r3, r7, #7
   12918:	781b      	ldrb	r3, [r3, #0]
   1291a:	2b3f      	cmp	r3, #63	; 0x3f
   1291c:	d85d      	bhi.n	129da <gfx_mono_ssd1306_draw_pixel+0xe2>
   1291e:	1dbb      	adds	r3, r7, #6
   12920:	781b      	ldrb	r3, [r3, #0]
   12922:	2b2f      	cmp	r3, #47	; 0x2f
   12924:	d859      	bhi.n	129da <gfx_mono_ssd1306_draw_pixel+0xe2>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
   12926:	230e      	movs	r3, #14
   12928:	18fb      	adds	r3, r7, r3
   1292a:	1dba      	adds	r2, r7, #6
   1292c:	7812      	ldrb	r2, [r2, #0]
   1292e:	08d2      	lsrs	r2, r2, #3
   12930:	701a      	strb	r2, [r3, #0]
	pixel_mask = (1 << (y - (page * 8)));
   12932:	1dbb      	adds	r3, r7, #6
   12934:	781a      	ldrb	r2, [r3, #0]
   12936:	230e      	movs	r3, #14
   12938:	18fb      	adds	r3, r7, r3
   1293a:	781b      	ldrb	r3, [r3, #0]
   1293c:	00db      	lsls	r3, r3, #3
   1293e:	1ad3      	subs	r3, r2, r3
   12940:	2201      	movs	r2, #1
   12942:	409a      	lsls	r2, r3
   12944:	230d      	movs	r3, #13
   12946:	18fb      	adds	r3, r7, r3
   12948:	701a      	strb	r2, [r3, #0]
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
   1294a:	230f      	movs	r3, #15
   1294c:	18fc      	adds	r4, r7, r3
   1294e:	1dfb      	adds	r3, r7, #7
   12950:	781a      	ldrb	r2, [r3, #0]
   12952:	230e      	movs	r3, #14
   12954:	18fb      	adds	r3, r7, r3
   12956:	781b      	ldrb	r3, [r3, #0]
   12958:	0011      	movs	r1, r2
   1295a:	0018      	movs	r0, r3
   1295c:	4b21      	ldr	r3, [pc, #132]	; (129e4 <gfx_mono_ssd1306_draw_pixel+0xec>)
   1295e:	4798      	blx	r3
   12960:	0003      	movs	r3, r0
   12962:	7023      	strb	r3, [r4, #0]

	switch (color) {
   12964:	1d7b      	adds	r3, r7, #5
   12966:	781b      	ldrb	r3, [r3, #0]
   12968:	2b01      	cmp	r3, #1
   1296a:	d004      	beq.n	12976 <gfx_mono_ssd1306_draw_pixel+0x7e>
   1296c:	2b02      	cmp	r3, #2
   1296e:	d01d      	beq.n	129ac <gfx_mono_ssd1306_draw_pixel+0xb4>
   12970:	2b00      	cmp	r3, #0
   12972:	d00b      	beq.n	1298c <gfx_mono_ssd1306_draw_pixel+0x94>
	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
		break;

	default:
		break;
   12974:	e025      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value |= pixel_mask;
   12976:	230f      	movs	r3, #15
   12978:	18fb      	adds	r3, r7, r3
   1297a:	220f      	movs	r2, #15
   1297c:	18b9      	adds	r1, r7, r2
   1297e:	220d      	movs	r2, #13
   12980:	18ba      	adds	r2, r7, r2
   12982:	7809      	ldrb	r1, [r1, #0]
   12984:	7812      	ldrb	r2, [r2, #0]
   12986:	430a      	orrs	r2, r1
   12988:	701a      	strb	r2, [r3, #0]
		break;
   1298a:	e01a      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value &= ~pixel_mask;
   1298c:	230d      	movs	r3, #13
   1298e:	18fb      	adds	r3, r7, r3
   12990:	781b      	ldrb	r3, [r3, #0]
   12992:	b25b      	sxtb	r3, r3
   12994:	43db      	mvns	r3, r3
   12996:	b25b      	sxtb	r3, r3
   12998:	220f      	movs	r2, #15
   1299a:	18ba      	adds	r2, r7, r2
   1299c:	7812      	ldrb	r2, [r2, #0]
   1299e:	b252      	sxtb	r2, r2
   129a0:	4013      	ands	r3, r2
   129a2:	b25a      	sxtb	r2, r3
   129a4:	230f      	movs	r3, #15
   129a6:	18fb      	adds	r3, r7, r3
   129a8:	701a      	strb	r2, [r3, #0]
		break;
   129aa:	e00a      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value ^= pixel_mask;
   129ac:	230f      	movs	r3, #15
   129ae:	18fb      	adds	r3, r7, r3
   129b0:	220f      	movs	r2, #15
   129b2:	18b9      	adds	r1, r7, r2
   129b4:	220d      	movs	r2, #13
   129b6:	18ba      	adds	r2, r7, r2
   129b8:	7809      	ldrb	r1, [r1, #0]
   129ba:	7812      	ldrb	r2, [r2, #0]
   129bc:	404a      	eors	r2, r1
   129be:	701a      	strb	r2, [r3, #0]
		break;
   129c0:	46c0      	nop			; (mov r8, r8)
	}

	gfx_mono_put_byte(page, x, pixel_value);
   129c2:	230f      	movs	r3, #15
   129c4:	18fb      	adds	r3, r7, r3
   129c6:	781a      	ldrb	r2, [r3, #0]
   129c8:	1dfb      	adds	r3, r7, #7
   129ca:	7819      	ldrb	r1, [r3, #0]
   129cc:	230e      	movs	r3, #14
   129ce:	18fb      	adds	r3, r7, r3
   129d0:	7818      	ldrb	r0, [r3, #0]
   129d2:	2300      	movs	r3, #0
   129d4:	4c04      	ldr	r4, [pc, #16]	; (129e8 <gfx_mono_ssd1306_draw_pixel+0xf0>)
   129d6:	47a0      	blx	r4
   129d8:	e000      	b.n	129dc <gfx_mono_ssd1306_draw_pixel+0xe4>
		return;
   129da:	46c0      	nop			; (mov r8, r8)
}
   129dc:	46bd      	mov	sp, r7
   129de:	b005      	add	sp, #20
   129e0:	bd90      	pop	{r4, r7, pc}
   129e2:	46c0      	nop			; (mov r8, r8)
   129e4:	00012a8d 	.word	0x00012a8d
   129e8:	000129ed 	.word	0x000129ed

000129ec <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
   129ec:	b5b0      	push	{r4, r5, r7, lr}
   129ee:	b082      	sub	sp, #8
   129f0:	af00      	add	r7, sp, #0
   129f2:	0005      	movs	r5, r0
   129f4:	000c      	movs	r4, r1
   129f6:	0010      	movs	r0, r2
   129f8:	0019      	movs	r1, r3
   129fa:	1dfb      	adds	r3, r7, #7
   129fc:	1c2a      	adds	r2, r5, #0
   129fe:	701a      	strb	r2, [r3, #0]
   12a00:	1dbb      	adds	r3, r7, #6
   12a02:	1c22      	adds	r2, r4, #0
   12a04:	701a      	strb	r2, [r3, #0]
   12a06:	1d7b      	adds	r3, r7, #5
   12a08:	1c02      	adds	r2, r0, #0
   12a0a:	701a      	strb	r2, [r3, #0]
   12a0c:	1d3b      	adds	r3, r7, #4
   12a0e:	1c0a      	adds	r2, r1, #0
   12a10:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
   12a12:	1d3b      	adds	r3, r7, #4
   12a14:	781b      	ldrb	r3, [r3, #0]
   12a16:	2201      	movs	r2, #1
   12a18:	4053      	eors	r3, r2
   12a1a:	b2db      	uxtb	r3, r3
   12a1c:	2b00      	cmp	r3, #0
   12a1e:	d00d      	beq.n	12a3c <gfx_mono_ssd1306_put_byte+0x50>
   12a20:	1dbb      	adds	r3, r7, #6
   12a22:	781a      	ldrb	r2, [r3, #0]
   12a24:	1dfb      	adds	r3, r7, #7
   12a26:	781b      	ldrb	r3, [r3, #0]
   12a28:	0011      	movs	r1, r2
   12a2a:	0018      	movs	r0, r3
   12a2c:	4b12      	ldr	r3, [pc, #72]	; (12a78 <gfx_mono_ssd1306_put_byte+0x8c>)
   12a2e:	4798      	blx	r3
   12a30:	0003      	movs	r3, r0
   12a32:	001a      	movs	r2, r3
   12a34:	1d7b      	adds	r3, r7, #5
   12a36:	781b      	ldrb	r3, [r3, #0]
   12a38:	4293      	cmp	r3, r2
   12a3a:	d018      	beq.n	12a6e <gfx_mono_ssd1306_put_byte+0x82>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
   12a3c:	1d7b      	adds	r3, r7, #5
   12a3e:	781a      	ldrb	r2, [r3, #0]
   12a40:	1dbb      	adds	r3, r7, #6
   12a42:	7819      	ldrb	r1, [r3, #0]
   12a44:	1dfb      	adds	r3, r7, #7
   12a46:	781b      	ldrb	r3, [r3, #0]
   12a48:	0018      	movs	r0, r3
   12a4a:	4b0c      	ldr	r3, [pc, #48]	; (12a7c <gfx_mono_ssd1306_put_byte+0x90>)
   12a4c:	4798      	blx	r3
#endif

	ssd1306_set_page_address(page);
   12a4e:	1dfb      	adds	r3, r7, #7
   12a50:	781b      	ldrb	r3, [r3, #0]
   12a52:	0018      	movs	r0, r3
   12a54:	4b0a      	ldr	r3, [pc, #40]	; (12a80 <gfx_mono_ssd1306_put_byte+0x94>)
   12a56:	4798      	blx	r3
	ssd1306_set_column_address(column);
   12a58:	1dbb      	adds	r3, r7, #6
   12a5a:	781b      	ldrb	r3, [r3, #0]
   12a5c:	0018      	movs	r0, r3
   12a5e:	4b09      	ldr	r3, [pc, #36]	; (12a84 <gfx_mono_ssd1306_put_byte+0x98>)
   12a60:	4798      	blx	r3

	ssd1306_write_data(data);
   12a62:	1d7b      	adds	r3, r7, #5
   12a64:	781b      	ldrb	r3, [r3, #0]
   12a66:	0018      	movs	r0, r3
   12a68:	4b07      	ldr	r3, [pc, #28]	; (12a88 <gfx_mono_ssd1306_put_byte+0x9c>)
   12a6a:	4798      	blx	r3
   12a6c:	e000      	b.n	12a70 <gfx_mono_ssd1306_put_byte+0x84>
		return;
   12a6e:	46c0      	nop			; (mov r8, r8)
}
   12a70:	46bd      	mov	sp, r7
   12a72:	b002      	add	sp, #8
   12a74:	bdb0      	pop	{r4, r5, r7, pc}
   12a76:	46c0      	nop			; (mov r8, r8)
   12a78:	000122e1 	.word	0x000122e1
   12a7c:	0001229d 	.word	0x0001229d
   12a80:	000127c5 	.word	0x000127c5
   12a84:	000127fd 	.word	0x000127fd
   12a88:	00012229 	.word	0x00012229

00012a8c <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   12a8c:	b580      	push	{r7, lr}
   12a8e:	b082      	sub	sp, #8
   12a90:	af00      	add	r7, sp, #0
   12a92:	0002      	movs	r2, r0
   12a94:	1dfb      	adds	r3, r7, #7
   12a96:	701a      	strb	r2, [r3, #0]
   12a98:	1dbb      	adds	r3, r7, #6
   12a9a:	1c0a      	adds	r2, r1, #0
   12a9c:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
   12a9e:	1dbb      	adds	r3, r7, #6
   12aa0:	781a      	ldrb	r2, [r3, #0]
   12aa2:	1dfb      	adds	r3, r7, #7
   12aa4:	781b      	ldrb	r3, [r3, #0]
   12aa6:	0011      	movs	r1, r2
   12aa8:	0018      	movs	r0, r3
   12aaa:	4b03      	ldr	r3, [pc, #12]	; (12ab8 <gfx_mono_ssd1306_get_byte+0x2c>)
   12aac:	4798      	blx	r3
   12aae:	0003      	movs	r3, r0
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
   12ab0:	0018      	movs	r0, r3
   12ab2:	46bd      	mov	sp, r7
   12ab4:	b002      	add	sp, #8
   12ab6:	bd80      	pop	{r7, pc}
   12ab8:	000122e1 	.word	0x000122e1

00012abc <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   12abc:	b580      	push	{r7, lr}
   12abe:	b084      	sub	sp, #16
   12ac0:	af00      	add	r7, sp, #0
   12ac2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   12ac4:	687b      	ldr	r3, [r7, #4]
   12ac6:	681b      	ldr	r3, [r3, #0]
   12ac8:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12aca:	68fb      	ldr	r3, [r7, #12]
   12acc:	7e5b      	ldrb	r3, [r3, #25]
   12ace:	b2db      	uxtb	r3, r3
   12ad0:	b25b      	sxtb	r3, r3
   12ad2:	2b00      	cmp	r3, #0
   12ad4:	da01      	bge.n	12ada <adc_is_syncing+0x1e>
		return true;
   12ad6:	2301      	movs	r3, #1
   12ad8:	e000      	b.n	12adc <adc_is_syncing+0x20>
	}

	return false;
   12ada:	2300      	movs	r3, #0
}
   12adc:	0018      	movs	r0, r3
   12ade:	46bd      	mov	sp, r7
   12ae0:	b004      	add	sp, #16
   12ae2:	bd80      	pop	{r7, pc}

00012ae4 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   12ae4:	b580      	push	{r7, lr}
   12ae6:	b084      	sub	sp, #16
   12ae8:	af00      	add	r7, sp, #0
   12aea:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12aec:	687b      	ldr	r3, [r7, #4]
   12aee:	681b      	ldr	r3, [r3, #0]
   12af0:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   12af2:	46c0      	nop			; (mov r8, r8)
   12af4:	687b      	ldr	r3, [r7, #4]
   12af6:	0018      	movs	r0, r3
   12af8:	4b0b      	ldr	r3, [pc, #44]	; (12b28 <adc_start_conversion+0x44>)
   12afa:	4798      	blx	r3
   12afc:	1e03      	subs	r3, r0, #0
   12afe:	d1f9      	bne.n	12af4 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   12b00:	68fb      	ldr	r3, [r7, #12]
   12b02:	7b1b      	ldrb	r3, [r3, #12]
   12b04:	b2db      	uxtb	r3, r3
   12b06:	2202      	movs	r2, #2
   12b08:	4313      	orrs	r3, r2
   12b0a:	b2da      	uxtb	r2, r3
   12b0c:	68fb      	ldr	r3, [r7, #12]
   12b0e:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   12b10:	46c0      	nop			; (mov r8, r8)
   12b12:	687b      	ldr	r3, [r7, #4]
   12b14:	0018      	movs	r0, r3
   12b16:	4b04      	ldr	r3, [pc, #16]	; (12b28 <adc_start_conversion+0x44>)
   12b18:	4798      	blx	r3
   12b1a:	1e03      	subs	r3, r0, #0
   12b1c:	d1f9      	bne.n	12b12 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   12b1e:	46c0      	nop			; (mov r8, r8)
   12b20:	46bd      	mov	sp, r7
   12b22:	b004      	add	sp, #16
   12b24:	bd80      	pop	{r7, pc}
   12b26:	46c0      	nop			; (mov r8, r8)
   12b28:	00012abd 	.word	0x00012abd

00012b2c <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   12b2c:	b580      	push	{r7, lr}
   12b2e:	b084      	sub	sp, #16
   12b30:	af00      	add	r7, sp, #0
   12b32:	6078      	str	r0, [r7, #4]
   12b34:	000a      	movs	r2, r1
   12b36:	1cfb      	adds	r3, r7, #3
   12b38:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12b3a:	687b      	ldr	r3, [r7, #4]
   12b3c:	681b      	ldr	r3, [r3, #0]
   12b3e:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   12b40:	68fb      	ldr	r3, [r7, #12]
   12b42:	1cfa      	adds	r2, r7, #3
   12b44:	7812      	ldrb	r2, [r2, #0]
   12b46:	759a      	strb	r2, [r3, #22]
}
   12b48:	46c0      	nop			; (mov r8, r8)
   12b4a:	46bd      	mov	sp, r7
   12b4c:	b004      	add	sp, #16
   12b4e:	bd80      	pop	{r7, pc}

00012b50 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   12b50:	b580      	push	{r7, lr}
   12b52:	b084      	sub	sp, #16
   12b54:	af00      	add	r7, sp, #0
   12b56:	0002      	movs	r2, r0
   12b58:	1dfb      	adds	r3, r7, #7
   12b5a:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   12b5c:	1dfb      	adds	r3, r7, #7
   12b5e:	781a      	ldrb	r2, [r3, #0]
   12b60:	4b47      	ldr	r3, [pc, #284]	; (12c80 <_adc_interrupt_handler+0x130>)
   12b62:	0092      	lsls	r2, r2, #2
   12b64:	58d3      	ldr	r3, [r2, r3]
   12b66:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   12b68:	68fb      	ldr	r3, [r7, #12]
   12b6a:	681b      	ldr	r3, [r3, #0]
   12b6c:	7e1b      	ldrb	r3, [r3, #24]
   12b6e:	b2da      	uxtb	r2, r3
   12b70:	68fb      	ldr	r3, [r7, #12]
   12b72:	681b      	ldr	r3, [r3, #0]
   12b74:	7ddb      	ldrb	r3, [r3, #23]
   12b76:	b2db      	uxtb	r3, r3
   12b78:	4013      	ands	r3, r2
   12b7a:	b2db      	uxtb	r3, r3
   12b7c:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   12b7e:	68bb      	ldr	r3, [r7, #8]
   12b80:	2201      	movs	r2, #1
   12b82:	4013      	ands	r3, r2
   12b84:	d045      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   12b86:	68fb      	ldr	r3, [r7, #12]
   12b88:	681b      	ldr	r3, [r3, #0]
   12b8a:	2201      	movs	r2, #1
   12b8c:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   12b8e:	46c0      	nop			; (mov r8, r8)
   12b90:	68fb      	ldr	r3, [r7, #12]
   12b92:	0018      	movs	r0, r3
   12b94:	4b3b      	ldr	r3, [pc, #236]	; (12c84 <_adc_interrupt_handler+0x134>)
   12b96:	4798      	blx	r3
   12b98:	1e03      	subs	r3, r0, #0
   12b9a:	d1f9      	bne.n	12b90 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   12b9c:	68fb      	ldr	r3, [r7, #12]
   12b9e:	695b      	ldr	r3, [r3, #20]
   12ba0:	1c99      	adds	r1, r3, #2
   12ba2:	68fa      	ldr	r2, [r7, #12]
   12ba4:	6151      	str	r1, [r2, #20]
   12ba6:	68fa      	ldr	r2, [r7, #12]
   12ba8:	6812      	ldr	r2, [r2, #0]
   12baa:	8b52      	ldrh	r2, [r2, #26]
   12bac:	b292      	uxth	r2, r2
   12bae:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12bb0:	68fb      	ldr	r3, [r7, #12]
   12bb2:	8b1b      	ldrh	r3, [r3, #24]
   12bb4:	b29b      	uxth	r3, r3
   12bb6:	3b01      	subs	r3, #1
   12bb8:	b29b      	uxth	r3, r3
   12bba:	68fa      	ldr	r2, [r7, #12]
   12bbc:	1c19      	adds	r1, r3, #0
   12bbe:	8311      	strh	r1, [r2, #24]
   12bc0:	2b00      	cmp	r3, #0
   12bc2:	d008      	beq.n	12bd6 <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   12bc4:	68fb      	ldr	r3, [r7, #12]
   12bc6:	7f5b      	ldrb	r3, [r3, #29]
   12bc8:	2b00      	cmp	r3, #0
   12bca:	d022      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12bcc:	68fb      	ldr	r3, [r7, #12]
   12bce:	0018      	movs	r0, r3
   12bd0:	4b2d      	ldr	r3, [pc, #180]	; (12c88 <_adc_interrupt_handler+0x138>)
   12bd2:	4798      	blx	r3
   12bd4:	e01d      	b.n	12c12 <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   12bd6:	68fb      	ldr	r3, [r7, #12]
   12bd8:	2101      	movs	r1, #1
   12bda:	0018      	movs	r0, r3
   12bdc:	4b2b      	ldr	r3, [pc, #172]	; (12c8c <_adc_interrupt_handler+0x13c>)
   12bde:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12be0:	68fb      	ldr	r3, [r7, #12]
   12be2:	7f1b      	ldrb	r3, [r3, #28]
   12be4:	b2db      	uxtb	r3, r3
   12be6:	2b05      	cmp	r3, #5
   12be8:	d113      	bne.n	12c12 <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12bea:	68fb      	ldr	r3, [r7, #12]
   12bec:	2200      	movs	r2, #0
   12bee:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12bf0:	68fb      	ldr	r3, [r7, #12]
   12bf2:	7edb      	ldrb	r3, [r3, #27]
   12bf4:	001a      	movs	r2, r3
   12bf6:	2301      	movs	r3, #1
   12bf8:	4013      	ands	r3, r2
   12bfa:	d00a      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12bfc:	68fb      	ldr	r3, [r7, #12]
   12bfe:	7e9b      	ldrb	r3, [r3, #26]
   12c00:	001a      	movs	r2, r3
   12c02:	2301      	movs	r3, #1
   12c04:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   12c06:	d004      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12c08:	68fb      	ldr	r3, [r7, #12]
   12c0a:	689b      	ldr	r3, [r3, #8]
   12c0c:	68fa      	ldr	r2, [r7, #12]
   12c0e:	0010      	movs	r0, r2
   12c10:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   12c12:	68bb      	ldr	r3, [r7, #8]
   12c14:	2204      	movs	r2, #4
   12c16:	4013      	ands	r3, r2
   12c18:	d014      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12c1a:	68fb      	ldr	r3, [r7, #12]
   12c1c:	681b      	ldr	r3, [r3, #0]
   12c1e:	2204      	movs	r2, #4
   12c20:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12c22:	68fb      	ldr	r3, [r7, #12]
   12c24:	7edb      	ldrb	r3, [r3, #27]
   12c26:	001a      	movs	r2, r3
   12c28:	2302      	movs	r3, #2
   12c2a:	4013      	ands	r3, r2
   12c2c:	d00a      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12c2e:	68fb      	ldr	r3, [r7, #12]
   12c30:	7e9b      	ldrb	r3, [r3, #26]
   12c32:	001a      	movs	r2, r3
   12c34:	2302      	movs	r3, #2
   12c36:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12c38:	d004      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   12c3a:	68fb      	ldr	r3, [r7, #12]
   12c3c:	68db      	ldr	r3, [r3, #12]
   12c3e:	68fa      	ldr	r2, [r7, #12]
   12c40:	0010      	movs	r0, r2
   12c42:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   12c44:	68bb      	ldr	r3, [r7, #8]
   12c46:	2202      	movs	r2, #2
   12c48:	4013      	ands	r3, r2
   12c4a:	d014      	beq.n	12c76 <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   12c4c:	68fb      	ldr	r3, [r7, #12]
   12c4e:	681b      	ldr	r3, [r3, #0]
   12c50:	2202      	movs	r2, #2
   12c52:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12c54:	68fb      	ldr	r3, [r7, #12]
   12c56:	7edb      	ldrb	r3, [r3, #27]
   12c58:	001a      	movs	r2, r3
   12c5a:	2304      	movs	r3, #4
   12c5c:	4013      	ands	r3, r2
   12c5e:	d00a      	beq.n	12c76 <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   12c60:	68fb      	ldr	r3, [r7, #12]
   12c62:	7e9b      	ldrb	r3, [r3, #26]
   12c64:	001a      	movs	r2, r3
   12c66:	2304      	movs	r3, #4
   12c68:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12c6a:	d004      	beq.n	12c76 <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   12c6c:	68fb      	ldr	r3, [r7, #12]
   12c6e:	691b      	ldr	r3, [r3, #16]
   12c70:	68fa      	ldr	r2, [r7, #12]
   12c72:	0010      	movs	r0, r2
   12c74:	4798      	blx	r3
		}
	}
}
   12c76:	46c0      	nop			; (mov r8, r8)
   12c78:	46bd      	mov	sp, r7
   12c7a:	b004      	add	sp, #16
   12c7c:	bd80      	pop	{r7, pc}
   12c7e:	46c0      	nop			; (mov r8, r8)
   12c80:	20004784 	.word	0x20004784
   12c84:	00012abd 	.word	0x00012abd
   12c88:	00012ae5 	.word	0x00012ae5
   12c8c:	00012b2d 	.word	0x00012b2d

00012c90 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   12c90:	b580      	push	{r7, lr}
   12c92:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   12c94:	2000      	movs	r0, #0
   12c96:	4b02      	ldr	r3, [pc, #8]	; (12ca0 <ADC_Handler+0x10>)
   12c98:	4798      	blx	r3
}
   12c9a:	46c0      	nop			; (mov r8, r8)
   12c9c:	46bd      	mov	sp, r7
   12c9e:	bd80      	pop	{r7, pc}
   12ca0:	00012b51 	.word	0x00012b51

00012ca4 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   12ca4:	b580      	push	{r7, lr}
   12ca6:	b082      	sub	sp, #8
   12ca8:	af00      	add	r7, sp, #0
   12caa:	0002      	movs	r2, r0
   12cac:	1dfb      	adds	r3, r7, #7
   12cae:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12cb0:	4a07      	ldr	r2, [pc, #28]	; (12cd0 <system_interrupt_disable+0x2c>)
   12cb2:	1dfb      	adds	r3, r7, #7
   12cb4:	781b      	ldrb	r3, [r3, #0]
   12cb6:	0019      	movs	r1, r3
   12cb8:	231f      	movs	r3, #31
   12cba:	400b      	ands	r3, r1
   12cbc:	2101      	movs	r1, #1
   12cbe:	4099      	lsls	r1, r3
   12cc0:	000b      	movs	r3, r1
   12cc2:	0019      	movs	r1, r3
   12cc4:	2380      	movs	r3, #128	; 0x80
   12cc6:	50d1      	str	r1, [r2, r3]
}
   12cc8:	46c0      	nop			; (mov r8, r8)
   12cca:	46bd      	mov	sp, r7
   12ccc:	b002      	add	sp, #8
   12cce:	bd80      	pop	{r7, pc}
   12cd0:	e000e100 	.word	0xe000e100

00012cd4 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   12cd4:	b580      	push	{r7, lr}
   12cd6:	b084      	sub	sp, #16
   12cd8:	af00      	add	r7, sp, #0
   12cda:	0002      	movs	r2, r0
   12cdc:	1dfb      	adds	r3, r7, #7
   12cde:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12ce0:	1dfb      	adds	r3, r7, #7
   12ce2:	781a      	ldrb	r2, [r3, #0]
   12ce4:	4b37      	ldr	r3, [pc, #220]	; (12dc4 <_dac_interrupt_handler+0xf0>)
   12ce6:	0092      	lsls	r2, r2, #2
   12ce8:	58d3      	ldr	r3, [r2, r3]
   12cea:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12cec:	68fb      	ldr	r3, [r7, #12]
   12cee:	681b      	ldr	r3, [r3, #0]
   12cf0:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   12cf2:	68bb      	ldr	r3, [r7, #8]
   12cf4:	799b      	ldrb	r3, [r3, #6]
   12cf6:	b2db      	uxtb	r3, r3
   12cf8:	001a      	movs	r2, r3
   12cfa:	2301      	movs	r3, #1
   12cfc:	4013      	ands	r3, r2
   12cfe:	d00e      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12d00:	68bb      	ldr	r3, [r7, #8]
   12d02:	2201      	movs	r2, #1
   12d04:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   12d06:	68fb      	ldr	r3, [r7, #12]
   12d08:	3314      	adds	r3, #20
   12d0a:	2b00      	cmp	r3, #0
   12d0c:	d007      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12d0e:	68fb      	ldr	r3, [r7, #12]
   12d10:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   12d12:	2b00      	cmp	r3, #0
   12d14:	d003      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   12d16:	68fb      	ldr	r3, [r7, #12]
   12d18:	699b      	ldr	r3, [r3, #24]
   12d1a:	2000      	movs	r0, #0
   12d1c:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12d1e:	68bb      	ldr	r3, [r7, #8]
   12d20:	799b      	ldrb	r3, [r3, #6]
   12d22:	b2db      	uxtb	r3, r3
   12d24:	001a      	movs	r2, r3
   12d26:	2302      	movs	r3, #2
   12d28:	4013      	ands	r3, r2
   12d2a:	d047      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12d2c:	68bb      	ldr	r3, [r7, #8]
   12d2e:	2202      	movs	r2, #2
   12d30:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   12d32:	68fb      	ldr	r3, [r7, #12]
   12d34:	899b      	ldrh	r3, [r3, #12]
   12d36:	b29b      	uxth	r3, r3
   12d38:	2b00      	cmp	r3, #0
   12d3a:	d033      	beq.n	12da4 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   12d3c:	68fb      	ldr	r3, [r7, #12]
   12d3e:	689a      	ldr	r2, [r3, #8]
   12d40:	68fb      	ldr	r3, [r7, #12]
   12d42:	89db      	ldrh	r3, [r3, #14]
   12d44:	b29b      	uxth	r3, r3
   12d46:	1c59      	adds	r1, r3, #1
   12d48:	b288      	uxth	r0, r1
   12d4a:	68f9      	ldr	r1, [r7, #12]
   12d4c:	81c8      	strh	r0, [r1, #14]
   12d4e:	005b      	lsls	r3, r3, #1
   12d50:	18d3      	adds	r3, r2, r3
   12d52:	881b      	ldrh	r3, [r3, #0]
   12d54:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   12d56:	68bb      	ldr	r3, [r7, #8]
   12d58:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   12d5a:	68fb      	ldr	r3, [r7, #12]
   12d5c:	899b      	ldrh	r3, [r3, #12]
   12d5e:	b29b      	uxth	r3, r3
   12d60:	3b01      	subs	r3, #1
   12d62:	b29a      	uxth	r2, r3
   12d64:	68fb      	ldr	r3, [r7, #12]
   12d66:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   12d68:	68fb      	ldr	r3, [r7, #12]
   12d6a:	899b      	ldrh	r3, [r3, #12]
   12d6c:	b29b      	uxth	r3, r3
   12d6e:	2b00      	cmp	r3, #0
   12d70:	d118      	bne.n	12da4 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   12d72:	68fb      	ldr	r3, [r7, #12]
   12d74:	2220      	movs	r2, #32
   12d76:	2100      	movs	r1, #0
   12d78:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   12d7a:	68bb      	ldr	r3, [r7, #8]
   12d7c:	2202      	movs	r2, #2
   12d7e:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12d80:	68bb      	ldr	r3, [r7, #8]
   12d82:	2202      	movs	r2, #2
   12d84:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   12d86:	2019      	movs	r0, #25
   12d88:	4b0f      	ldr	r3, [pc, #60]	; (12dc8 <_dac_interrupt_handler+0xf4>)
   12d8a:	4798      	blx	r3

				if ((module->callback) &&
   12d8c:	68fb      	ldr	r3, [r7, #12]
   12d8e:	3314      	adds	r3, #20
   12d90:	2b00      	cmp	r3, #0
   12d92:	d007      	beq.n	12da4 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   12d94:	68fb      	ldr	r3, [r7, #12]
   12d96:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   12d98:	2b00      	cmp	r3, #0
   12d9a:	d003      	beq.n	12da4 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   12d9c:	68fb      	ldr	r3, [r7, #12]
   12d9e:	69db      	ldr	r3, [r3, #28]
   12da0:	2000      	movs	r0, #0
   12da2:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   12da4:	68fb      	ldr	r3, [r7, #12]
   12da6:	3314      	adds	r3, #20
   12da8:	2b00      	cmp	r3, #0
   12daa:	d007      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   12dac:	68fb      	ldr	r3, [r7, #12]
   12dae:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   12db0:	2b00      	cmp	r3, #0
   12db2:	d003      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   12db4:	68fb      	ldr	r3, [r7, #12]
   12db6:	695b      	ldr	r3, [r3, #20]
   12db8:	2000      	movs	r0, #0
   12dba:	4798      	blx	r3
		}
	}
}
   12dbc:	46c0      	nop			; (mov r8, r8)
   12dbe:	46bd      	mov	sp, r7
   12dc0:	b004      	add	sp, #16
   12dc2:	bd80      	pop	{r7, pc}
   12dc4:	20004788 	.word	0x20004788
   12dc8:	00012ca5 	.word	0x00012ca5

00012dcc <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   12dcc:	b580      	push	{r7, lr}
   12dce:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   12dd0:	2000      	movs	r0, #0
   12dd2:	4b02      	ldr	r3, [pc, #8]	; (12ddc <DAC_Handler+0x10>)
   12dd4:	4798      	blx	r3
}
   12dd6:	46c0      	nop			; (mov r8, r8)
   12dd8:	46bd      	mov	sp, r7
   12dda:	bd80      	pop	{r7, pc}
   12ddc:	00012cd5 	.word	0x00012cd5

00012de0 <system_interrupt_enter_critical_section>:
{
   12de0:	b580      	push	{r7, lr}
   12de2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   12de4:	4b02      	ldr	r3, [pc, #8]	; (12df0 <system_interrupt_enter_critical_section+0x10>)
   12de6:	4798      	blx	r3
}
   12de8:	46c0      	nop			; (mov r8, r8)
   12dea:	46bd      	mov	sp, r7
   12dec:	bd80      	pop	{r7, pc}
   12dee:	46c0      	nop			; (mov r8, r8)
   12df0:	00027179 	.word	0x00027179

00012df4 <system_interrupt_leave_critical_section>:
{
   12df4:	b580      	push	{r7, lr}
   12df6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   12df8:	4b02      	ldr	r3, [pc, #8]	; (12e04 <system_interrupt_leave_critical_section+0x10>)
   12dfa:	4798      	blx	r3
}
   12dfc:	46c0      	nop			; (mov r8, r8)
   12dfe:	46bd      	mov	sp, r7
   12e00:	bd80      	pop	{r7, pc}
   12e02:	46c0      	nop			; (mov r8, r8)
   12e04:	000271cd 	.word	0x000271cd

00012e08 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   12e08:	b580      	push	{r7, lr}
   12e0a:	b086      	sub	sp, #24
   12e0c:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   12e0e:	4b49      	ldr	r3, [pc, #292]	; (12f34 <DMAC_Handler+0x12c>)
   12e10:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   12e12:	4b49      	ldr	r3, [pc, #292]	; (12f38 <DMAC_Handler+0x130>)
   12e14:	8c1b      	ldrh	r3, [r3, #32]
   12e16:	b29b      	uxth	r3, r3
   12e18:	b2da      	uxtb	r2, r3
   12e1a:	2317      	movs	r3, #23
   12e1c:	18fb      	adds	r3, r7, r3
   12e1e:	210f      	movs	r1, #15
   12e20:	400a      	ands	r2, r1
   12e22:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   12e24:	2317      	movs	r3, #23
   12e26:	18fb      	adds	r3, r7, r3
   12e28:	781a      	ldrb	r2, [r3, #0]
   12e2a:	4b44      	ldr	r3, [pc, #272]	; (12f3c <DMAC_Handler+0x134>)
   12e2c:	0092      	lsls	r2, r2, #2
   12e2e:	58d3      	ldr	r3, [r2, r3]
   12e30:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   12e32:	4a41      	ldr	r2, [pc, #260]	; (12f38 <DMAC_Handler+0x130>)
   12e34:	693b      	ldr	r3, [r7, #16]
   12e36:	781b      	ldrb	r3, [r3, #0]
   12e38:	210f      	movs	r1, #15
   12e3a:	400b      	ands	r3, r1
   12e3c:	b2d9      	uxtb	r1, r3
   12e3e:	233f      	movs	r3, #63	; 0x3f
   12e40:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   12e42:	493d      	ldr	r1, [pc, #244]	; (12f38 <DMAC_Handler+0x130>)
   12e44:	230f      	movs	r3, #15
   12e46:	18fb      	adds	r3, r7, r3
   12e48:	224e      	movs	r2, #78	; 0x4e
   12e4a:	5c8a      	ldrb	r2, [r1, r2]
   12e4c:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   12e4e:	693b      	ldr	r3, [r7, #16]
   12e50:	781b      	ldrb	r3, [r3, #0]
   12e52:	4a3b      	ldr	r2, [pc, #236]	; (12f40 <DMAC_Handler+0x138>)
   12e54:	011b      	lsls	r3, r3, #4
   12e56:	18d3      	adds	r3, r2, r3
   12e58:	3302      	adds	r3, #2
   12e5a:	881b      	ldrh	r3, [r3, #0]
   12e5c:	b29b      	uxth	r3, r3
   12e5e:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   12e60:	693b      	ldr	r3, [r7, #16]
   12e62:	781b      	ldrb	r3, [r3, #0]
   12e64:	4a37      	ldr	r2, [pc, #220]	; (12f44 <DMAC_Handler+0x13c>)
   12e66:	011b      	lsls	r3, r3, #4
   12e68:	18d3      	adds	r3, r2, r3
   12e6a:	3302      	adds	r3, #2
   12e6c:	881b      	ldrh	r3, [r3, #0]
   12e6e:	b29b      	uxth	r3, r3
   12e70:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   12e72:	68ba      	ldr	r2, [r7, #8]
   12e74:	687b      	ldr	r3, [r7, #4]
   12e76:	1ad2      	subs	r2, r2, r3
   12e78:	693b      	ldr	r3, [r7, #16]
   12e7a:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   12e7c:	230f      	movs	r3, #15
   12e7e:	18fb      	adds	r3, r7, r3
   12e80:	781b      	ldrb	r3, [r3, #0]
   12e82:	2201      	movs	r2, #1
   12e84:	4013      	ands	r3, r2
   12e86:	d016      	beq.n	12eb6 <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   12e88:	4a2b      	ldr	r2, [pc, #172]	; (12f38 <DMAC_Handler+0x130>)
   12e8a:	234e      	movs	r3, #78	; 0x4e
   12e8c:	2101      	movs	r1, #1
   12e8e:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   12e90:	693b      	ldr	r3, [r7, #16]
   12e92:	2210      	movs	r2, #16
   12e94:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12e96:	693b      	ldr	r3, [r7, #16]
   12e98:	7c1b      	ldrb	r3, [r3, #16]
   12e9a:	001a      	movs	r2, r3
   12e9c:	2301      	movs	r3, #1
   12e9e:	4013      	ands	r3, r2
   12ea0:	d042      	beq.n	12f28 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   12ea2:	693b      	ldr	r3, [r7, #16]
   12ea4:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12ea6:	2b00      	cmp	r3, #0
   12ea8:	d03e      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   12eaa:	693b      	ldr	r3, [r7, #16]
   12eac:	685b      	ldr	r3, [r3, #4]
   12eae:	693a      	ldr	r2, [r7, #16]
   12eb0:	0010      	movs	r0, r2
   12eb2:	4798      	blx	r3
   12eb4:	e038      	b.n	12f28 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   12eb6:	230f      	movs	r3, #15
   12eb8:	18fb      	adds	r3, r7, r3
   12eba:	781b      	ldrb	r3, [r3, #0]
   12ebc:	2202      	movs	r2, #2
   12ebe:	4013      	ands	r3, r2
   12ec0:	d016      	beq.n	12ef0 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   12ec2:	4a1d      	ldr	r2, [pc, #116]	; (12f38 <DMAC_Handler+0x130>)
   12ec4:	234e      	movs	r3, #78	; 0x4e
   12ec6:	2102      	movs	r1, #2
   12ec8:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   12eca:	693b      	ldr	r3, [r7, #16]
   12ecc:	2200      	movs	r2, #0
   12ece:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12ed0:	693b      	ldr	r3, [r7, #16]
   12ed2:	7c1b      	ldrb	r3, [r3, #16]
   12ed4:	001a      	movs	r2, r3
   12ed6:	2302      	movs	r3, #2
   12ed8:	4013      	ands	r3, r2
   12eda:	d025      	beq.n	12f28 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   12edc:	693b      	ldr	r3, [r7, #16]
   12ede:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12ee0:	2b00      	cmp	r3, #0
   12ee2:	d021      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   12ee4:	693b      	ldr	r3, [r7, #16]
   12ee6:	689b      	ldr	r3, [r3, #8]
   12ee8:	693a      	ldr	r2, [r7, #16]
   12eea:	0010      	movs	r0, r2
   12eec:	4798      	blx	r3
   12eee:	e01b      	b.n	12f28 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   12ef0:	230f      	movs	r3, #15
   12ef2:	18fb      	adds	r3, r7, r3
   12ef4:	781b      	ldrb	r3, [r3, #0]
   12ef6:	2204      	movs	r2, #4
   12ef8:	4013      	ands	r3, r2
   12efa:	d015      	beq.n	12f28 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   12efc:	4a0e      	ldr	r2, [pc, #56]	; (12f38 <DMAC_Handler+0x130>)
   12efe:	234e      	movs	r3, #78	; 0x4e
   12f00:	2104      	movs	r1, #4
   12f02:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   12f04:	693b      	ldr	r3, [r7, #16]
   12f06:	2206      	movs	r2, #6
   12f08:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12f0a:	693b      	ldr	r3, [r7, #16]
   12f0c:	7c1b      	ldrb	r3, [r3, #16]
   12f0e:	001a      	movs	r2, r3
   12f10:	2304      	movs	r3, #4
   12f12:	4013      	ands	r3, r2
   12f14:	d008      	beq.n	12f28 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   12f16:	693b      	ldr	r3, [r7, #16]
   12f18:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12f1a:	2b00      	cmp	r3, #0
   12f1c:	d004      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   12f1e:	693b      	ldr	r3, [r7, #16]
   12f20:	68db      	ldr	r3, [r3, #12]
   12f22:	693a      	ldr	r2, [r7, #16]
   12f24:	0010      	movs	r0, r2
   12f26:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   12f28:	4b07      	ldr	r3, [pc, #28]	; (12f48 <DMAC_Handler+0x140>)
   12f2a:	4798      	blx	r3
}
   12f2c:	46c0      	nop			; (mov r8, r8)
   12f2e:	46bd      	mov	sp, r7
   12f30:	b006      	add	sp, #24
   12f32:	bd80      	pop	{r7, pc}
   12f34:	00012de1 	.word	0x00012de1
   12f38:	41004800 	.word	0x41004800
   12f3c:	200004f0 	.word	0x200004f0
   12f40:	20004790 	.word	0x20004790
   12f44:	200004a0 	.word	0x200004a0
   12f48:	00012df5 	.word	0x00012df5

00012f4c <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   12f4c:	b580      	push	{r7, lr}
   12f4e:	b082      	sub	sp, #8
   12f50:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   12f52:	4b15      	ldr	r3, [pc, #84]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f54:	691b      	ldr	r3, [r3, #16]
   12f56:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   12f58:	4b14      	ldr	r3, [pc, #80]	; (12fac <EVSYS_Handler+0x60>)
   12f5a:	699b      	ldr	r3, [r3, #24]
   12f5c:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   12f5e:	4b12      	ldr	r3, [pc, #72]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f60:	689a      	ldr	r2, [r3, #8]
   12f62:	683b      	ldr	r3, [r7, #0]
   12f64:	431a      	orrs	r2, r3
   12f66:	4b10      	ldr	r3, [pc, #64]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f68:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   12f6a:	4b10      	ldr	r3, [pc, #64]	; (12fac <EVSYS_Handler+0x60>)
   12f6c:	4a10      	ldr	r2, [pc, #64]	; (12fb0 <EVSYS_Handler+0x64>)
   12f6e:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   12f70:	e008      	b.n	12f84 <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   12f72:	687b      	ldr	r3, [r7, #4]
   12f74:	685a      	ldr	r2, [r3, #4]
   12f76:	687b      	ldr	r3, [r7, #4]
   12f78:	681b      	ldr	r3, [r3, #0]
   12f7a:	0018      	movs	r0, r3
   12f7c:	4790      	blx	r2
		current_hook = current_hook->next;
   12f7e:	687b      	ldr	r3, [r7, #4]
   12f80:	689b      	ldr	r3, [r3, #8]
   12f82:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   12f84:	687b      	ldr	r3, [r7, #4]
   12f86:	2b00      	cmp	r3, #0
   12f88:	d1f3      	bne.n	12f72 <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   12f8a:	4b07      	ldr	r3, [pc, #28]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f8c:	68db      	ldr	r3, [r3, #12]
   12f8e:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   12f90:	4b05      	ldr	r3, [pc, #20]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f92:	689b      	ldr	r3, [r3, #8]
   12f94:	683a      	ldr	r2, [r7, #0]
   12f96:	43d2      	mvns	r2, r2
   12f98:	401a      	ands	r2, r3
   12f9a:	4b03      	ldr	r3, [pc, #12]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f9c:	609a      	str	r2, [r3, #8]
}
   12f9e:	46c0      	nop			; (mov r8, r8)
   12fa0:	46bd      	mov	sp, r7
   12fa2:	b002      	add	sp, #8
   12fa4:	bd80      	pop	{r7, pc}
   12fa6:	46c0      	nop			; (mov r8, r8)
   12fa8:	2000000c 	.word	0x2000000c
   12fac:	42000400 	.word	0x42000400
   12fb0:	0f0fffff 	.word	0x0f0fffff

00012fb4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   12fb4:	b580      	push	{r7, lr}
   12fb6:	b082      	sub	sp, #8
   12fb8:	af00      	add	r7, sp, #0
   12fba:	0002      	movs	r2, r0
   12fbc:	6039      	str	r1, [r7, #0]
   12fbe:	1dfb      	adds	r3, r7, #7
   12fc0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   12fc2:	1dfb      	adds	r3, r7, #7
   12fc4:	781b      	ldrb	r3, [r3, #0]
   12fc6:	2b01      	cmp	r3, #1
   12fc8:	d00a      	beq.n	12fe0 <system_apb_clock_set_mask+0x2c>
   12fca:	2b02      	cmp	r3, #2
   12fcc:	d00f      	beq.n	12fee <system_apb_clock_set_mask+0x3a>
   12fce:	2b00      	cmp	r3, #0
   12fd0:	d114      	bne.n	12ffc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   12fd2:	4b0e      	ldr	r3, [pc, #56]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fd4:	4a0d      	ldr	r2, [pc, #52]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fd6:	6991      	ldr	r1, [r2, #24]
   12fd8:	683a      	ldr	r2, [r7, #0]
   12fda:	430a      	orrs	r2, r1
   12fdc:	619a      	str	r2, [r3, #24]
			break;
   12fde:	e00f      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12fe0:	4b0a      	ldr	r3, [pc, #40]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fe2:	4a0a      	ldr	r2, [pc, #40]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fe4:	69d1      	ldr	r1, [r2, #28]
   12fe6:	683a      	ldr	r2, [r7, #0]
   12fe8:	430a      	orrs	r2, r1
   12fea:	61da      	str	r2, [r3, #28]
			break;
   12fec:	e008      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12fee:	4b07      	ldr	r3, [pc, #28]	; (1300c <system_apb_clock_set_mask+0x58>)
   12ff0:	4a06      	ldr	r2, [pc, #24]	; (1300c <system_apb_clock_set_mask+0x58>)
   12ff2:	6a11      	ldr	r1, [r2, #32]
   12ff4:	683a      	ldr	r2, [r7, #0]
   12ff6:	430a      	orrs	r2, r1
   12ff8:	621a      	str	r2, [r3, #32]
			break;
   12ffa:	e001      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12ffc:	2317      	movs	r3, #23
   12ffe:	e000      	b.n	13002 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   13000:	2300      	movs	r3, #0
}
   13002:	0018      	movs	r0, r3
   13004:	46bd      	mov	sp, r7
   13006:	b002      	add	sp, #8
   13008:	bd80      	pop	{r7, pc}
   1300a:	46c0      	nop			; (mov r8, r8)
   1300c:	40000400 	.word	0x40000400

00013010 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   13010:	b580      	push	{r7, lr}
   13012:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   13014:	2102      	movs	r1, #2
   13016:	2002      	movs	r0, #2
   13018:	4b07      	ldr	r3, [pc, #28]	; (13038 <_system_events_init+0x28>)
   1301a:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   1301c:	4b07      	ldr	r3, [pc, #28]	; (1303c <_system_events_init+0x2c>)
   1301e:	2201      	movs	r2, #1
   13020:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   13022:	46c0      	nop			; (mov r8, r8)
   13024:	4b05      	ldr	r3, [pc, #20]	; (1303c <_system_events_init+0x2c>)
   13026:	781b      	ldrb	r3, [r3, #0]
   13028:	b2db      	uxtb	r3, r3
   1302a:	001a      	movs	r2, r3
   1302c:	2301      	movs	r3, #1
   1302e:	4013      	ands	r3, r2
   13030:	d1f8      	bne.n	13024 <_system_events_init+0x14>
	}
}
   13032:	46c0      	nop			; (mov r8, r8)
   13034:	46bd      	mov	sp, r7
   13036:	bd80      	pop	{r7, pc}
   13038:	00012fb5 	.word	0x00012fb5
   1303c:	42000400 	.word	0x42000400

00013040 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   13040:	b580      	push	{r7, lr}
   13042:	b084      	sub	sp, #16
   13044:	af00      	add	r7, sp, #0
   13046:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   13048:	687b      	ldr	r3, [r7, #4]
   1304a:	681b      	ldr	r3, [r3, #0]
   1304c:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1304e:	68fb      	ldr	r3, [r7, #12]
   13050:	69db      	ldr	r3, [r3, #28]
   13052:	2207      	movs	r2, #7
   13054:	4013      	ands	r3, r2
   13056:	1e5a      	subs	r2, r3, #1
   13058:	4193      	sbcs	r3, r2
   1305a:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   1305c:	0018      	movs	r0, r3
   1305e:	46bd      	mov	sp, r7
   13060:	b004      	add	sp, #16
   13062:	bd80      	pop	{r7, pc}

00013064 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   13064:	b580      	push	{r7, lr}
   13066:	b082      	sub	sp, #8
   13068:	af00      	add	r7, sp, #0
   1306a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   1306c:	46c0      	nop			; (mov r8, r8)
   1306e:	687b      	ldr	r3, [r7, #4]
   13070:	0018      	movs	r0, r3
   13072:	4b04      	ldr	r3, [pc, #16]	; (13084 <_i2c_master_wait_for_sync+0x20>)
   13074:	4798      	blx	r3
   13076:	1e03      	subs	r3, r0, #0
   13078:	d1f9      	bne.n	1306e <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   1307a:	46c0      	nop			; (mov r8, r8)
   1307c:	46bd      	mov	sp, r7
   1307e:	b002      	add	sp, #8
   13080:	bd80      	pop	{r7, pc}
   13082:	46c0      	nop			; (mov r8, r8)
   13084:	00013041 	.word	0x00013041

00013088 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   13088:	b580      	push	{r7, lr}
   1308a:	b084      	sub	sp, #16
   1308c:	af00      	add	r7, sp, #0
   1308e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13090:	687b      	ldr	r3, [r7, #4]
   13092:	681b      	ldr	r3, [r3, #0]
   13094:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13096:	68fb      	ldr	r3, [r7, #12]
   13098:	681b      	ldr	r3, [r3, #0]
   1309a:	011b      	lsls	r3, r3, #4
   1309c:	0fdb      	lsrs	r3, r3, #31
   1309e:	b2db      	uxtb	r3, r3
   130a0:	001a      	movs	r2, r3
   130a2:	230b      	movs	r3, #11
   130a4:	18fb      	adds	r3, r7, r3
   130a6:	1e51      	subs	r1, r2, #1
   130a8:	418a      	sbcs	r2, r1
   130aa:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   130ac:	2308      	movs	r3, #8
   130ae:	18fb      	adds	r3, r7, r3
   130b0:	687a      	ldr	r2, [r7, #4]
   130b2:	8b52      	ldrh	r2, [r2, #26]
   130b4:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   130b6:	687b      	ldr	r3, [r7, #4]
   130b8:	8b9b      	ldrh	r3, [r3, #28]
   130ba:	b29a      	uxth	r2, r3
   130bc:	2308      	movs	r3, #8
   130be:	18fb      	adds	r3, r7, r3
   130c0:	2108      	movs	r1, #8
   130c2:	1879      	adds	r1, r7, r1
   130c4:	8809      	ldrh	r1, [r1, #0]
   130c6:	1a8a      	subs	r2, r1, r2
   130c8:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   130ca:	687b      	ldr	r3, [r7, #4]
   130cc:	8b9b      	ldrh	r3, [r3, #28]
   130ce:	b29b      	uxth	r3, r3
   130d0:	3b01      	subs	r3, #1
   130d2:	b29a      	uxth	r2, r3
   130d4:	687b      	ldr	r3, [r7, #4]
   130d6:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   130d8:	230b      	movs	r3, #11
   130da:	18fb      	adds	r3, r7, r3
   130dc:	781b      	ldrb	r3, [r3, #0]
   130de:	2b00      	cmp	r3, #0
   130e0:	d010      	beq.n	13104 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   130e2:	687b      	ldr	r3, [r7, #4]
   130e4:	7adb      	ldrb	r3, [r3, #11]
   130e6:	2b00      	cmp	r3, #0
   130e8:	d01c      	beq.n	13124 <_i2c_master_read+0x9c>
   130ea:	687b      	ldr	r3, [r7, #4]
   130ec:	8b9b      	ldrh	r3, [r3, #28]
   130ee:	b29b      	uxth	r3, r3
   130f0:	2b01      	cmp	r3, #1
   130f2:	d117      	bne.n	13124 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   130f4:	68fb      	ldr	r3, [r7, #12]
   130f6:	685b      	ldr	r3, [r3, #4]
   130f8:	2280      	movs	r2, #128	; 0x80
   130fa:	02d2      	lsls	r2, r2, #11
   130fc:	431a      	orrs	r2, r3
   130fe:	68fb      	ldr	r3, [r7, #12]
   13100:	605a      	str	r2, [r3, #4]
   13102:	e00f      	b.n	13124 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   13104:	687b      	ldr	r3, [r7, #4]
   13106:	7adb      	ldrb	r3, [r3, #11]
   13108:	2b00      	cmp	r3, #0
   1310a:	d00b      	beq.n	13124 <_i2c_master_read+0x9c>
   1310c:	687b      	ldr	r3, [r7, #4]
   1310e:	8b9b      	ldrh	r3, [r3, #28]
   13110:	b29b      	uxth	r3, r3
   13112:	2b00      	cmp	r3, #0
   13114:	d106      	bne.n	13124 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13116:	68fb      	ldr	r3, [r7, #12]
   13118:	685b      	ldr	r3, [r3, #4]
   1311a:	2280      	movs	r2, #128	; 0x80
   1311c:	02d2      	lsls	r2, r2, #11
   1311e:	431a      	orrs	r2, r3
   13120:	68fb      	ldr	r3, [r7, #12]
   13122:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   13124:	687b      	ldr	r3, [r7, #4]
   13126:	8b9b      	ldrh	r3, [r3, #28]
   13128:	b29b      	uxth	r3, r3
   1312a:	2b00      	cmp	r3, #0
   1312c:	d10e      	bne.n	1314c <_i2c_master_read+0xc4>
		if (module->send_stop) {
   1312e:	687b      	ldr	r3, [r7, #4]
   13130:	7a9b      	ldrb	r3, [r3, #10]
   13132:	2b00      	cmp	r3, #0
   13134:	d00a      	beq.n	1314c <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   13136:	687b      	ldr	r3, [r7, #4]
   13138:	0018      	movs	r0, r3
   1313a:	4b0e      	ldr	r3, [pc, #56]	; (13174 <_i2c_master_read+0xec>)
   1313c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1313e:	68fb      	ldr	r3, [r7, #12]
   13140:	685b      	ldr	r3, [r3, #4]
   13142:	22c0      	movs	r2, #192	; 0xc0
   13144:	0292      	lsls	r2, r2, #10
   13146:	431a      	orrs	r2, r3
   13148:	68fb      	ldr	r3, [r7, #12]
   1314a:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   1314c:	687b      	ldr	r3, [r7, #4]
   1314e:	0018      	movs	r0, r3
   13150:	4b08      	ldr	r3, [pc, #32]	; (13174 <_i2c_master_read+0xec>)
   13152:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   13154:	687b      	ldr	r3, [r7, #4]
   13156:	6a1a      	ldr	r2, [r3, #32]
   13158:	2308      	movs	r3, #8
   1315a:	18fb      	adds	r3, r7, r3
   1315c:	881b      	ldrh	r3, [r3, #0]
   1315e:	18d3      	adds	r3, r2, r3
   13160:	68fa      	ldr	r2, [r7, #12]
   13162:	2128      	movs	r1, #40	; 0x28
   13164:	5c52      	ldrb	r2, [r2, r1]
   13166:	b2d2      	uxtb	r2, r2
   13168:	701a      	strb	r2, [r3, #0]
}
   1316a:	46c0      	nop			; (mov r8, r8)
   1316c:	46bd      	mov	sp, r7
   1316e:	b004      	add	sp, #16
   13170:	bd80      	pop	{r7, pc}
   13172:	46c0      	nop			; (mov r8, r8)
   13174:	00013065 	.word	0x00013065

00013178 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   13178:	b580      	push	{r7, lr}
   1317a:	b084      	sub	sp, #16
   1317c:	af00      	add	r7, sp, #0
   1317e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13180:	687b      	ldr	r3, [r7, #4]
   13182:	681b      	ldr	r3, [r3, #0]
   13184:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   13186:	68fb      	ldr	r3, [r7, #12]
   13188:	8b5b      	ldrh	r3, [r3, #26]
   1318a:	b29b      	uxth	r3, r3
   1318c:	001a      	movs	r2, r3
   1318e:	2304      	movs	r3, #4
   13190:	4013      	ands	r3, r2
   13192:	d004      	beq.n	1319e <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   13194:	687b      	ldr	r3, [r7, #4]
   13196:	2225      	movs	r2, #37	; 0x25
   13198:	211e      	movs	r1, #30
   1319a:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   1319c:	e024      	b.n	131e8 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   1319e:	230a      	movs	r3, #10
   131a0:	18fb      	adds	r3, r7, r3
   131a2:	687a      	ldr	r2, [r7, #4]
   131a4:	8b52      	ldrh	r2, [r2, #26]
   131a6:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   131a8:	687b      	ldr	r3, [r7, #4]
   131aa:	8b9b      	ldrh	r3, [r3, #28]
   131ac:	b29a      	uxth	r2, r3
   131ae:	230a      	movs	r3, #10
   131b0:	18fb      	adds	r3, r7, r3
   131b2:	210a      	movs	r1, #10
   131b4:	1879      	adds	r1, r7, r1
   131b6:	8809      	ldrh	r1, [r1, #0]
   131b8:	1a8a      	subs	r2, r1, r2
   131ba:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   131bc:	687b      	ldr	r3, [r7, #4]
   131be:	8b9b      	ldrh	r3, [r3, #28]
   131c0:	b29b      	uxth	r3, r3
   131c2:	3b01      	subs	r3, #1
   131c4:	b29a      	uxth	r2, r3
   131c6:	687b      	ldr	r3, [r7, #4]
   131c8:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   131ca:	687b      	ldr	r3, [r7, #4]
   131cc:	0018      	movs	r0, r3
   131ce:	4b08      	ldr	r3, [pc, #32]	; (131f0 <_i2c_master_write+0x78>)
   131d0:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   131d2:	687b      	ldr	r3, [r7, #4]
   131d4:	6a1a      	ldr	r2, [r3, #32]
   131d6:	230a      	movs	r3, #10
   131d8:	18fb      	adds	r3, r7, r3
   131da:	881b      	ldrh	r3, [r3, #0]
   131dc:	18d3      	adds	r3, r2, r3
   131de:	781b      	ldrb	r3, [r3, #0]
   131e0:	b2d9      	uxtb	r1, r3
   131e2:	68fb      	ldr	r3, [r7, #12]
   131e4:	2228      	movs	r2, #40	; 0x28
   131e6:	5499      	strb	r1, [r3, r2]
}
   131e8:	46bd      	mov	sp, r7
   131ea:	b004      	add	sp, #16
   131ec:	bd80      	pop	{r7, pc}
   131ee:	46c0      	nop			; (mov r8, r8)
   131f0:	00013065 	.word	0x00013065

000131f4 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   131f4:	b580      	push	{r7, lr}
   131f6:	b084      	sub	sp, #16
   131f8:	af00      	add	r7, sp, #0
   131fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   131fc:	687b      	ldr	r3, [r7, #4]
   131fe:	681b      	ldr	r3, [r3, #0]
   13200:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   13202:	68fb      	ldr	r3, [r7, #12]
   13204:	7e1b      	ldrb	r3, [r3, #24]
   13206:	b2db      	uxtb	r3, r3
   13208:	001a      	movs	r2, r3
   1320a:	2301      	movs	r3, #1
   1320c:	4013      	ands	r3, r2
   1320e:	d02b      	beq.n	13268 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   13210:	68fb      	ldr	r3, [r7, #12]
   13212:	2201      	movs	r2, #1
   13214:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   13216:	68fb      	ldr	r3, [r7, #12]
   13218:	8b5b      	ldrh	r3, [r3, #26]
   1321a:	b29b      	uxth	r3, r3
   1321c:	001a      	movs	r2, r3
   1321e:	2302      	movs	r3, #2
   13220:	4013      	ands	r3, r2
   13222:	d004      	beq.n	1322e <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   13224:	687b      	ldr	r3, [r7, #4]
   13226:	2225      	movs	r2, #37	; 0x25
   13228:	2141      	movs	r1, #65	; 0x41
   1322a:	5499      	strb	r1, [r3, r2]
   1322c:	e01c      	b.n	13268 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   1322e:	68fb      	ldr	r3, [r7, #12]
   13230:	8b5b      	ldrh	r3, [r3, #26]
   13232:	b29b      	uxth	r3, r3
   13234:	001a      	movs	r2, r3
   13236:	2304      	movs	r3, #4
   13238:	4013      	ands	r3, r2
   1323a:	d015      	beq.n	13268 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   1323c:	687b      	ldr	r3, [r7, #4]
   1323e:	2225      	movs	r2, #37	; 0x25
   13240:	2118      	movs	r1, #24
   13242:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   13244:	687b      	ldr	r3, [r7, #4]
   13246:	2200      	movs	r2, #0
   13248:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   1324a:	687b      	ldr	r3, [r7, #4]
   1324c:	7a9b      	ldrb	r3, [r3, #10]
   1324e:	2b00      	cmp	r3, #0
   13250:	d00a      	beq.n	13268 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   13252:	687b      	ldr	r3, [r7, #4]
   13254:	0018      	movs	r0, r3
   13256:	4b13      	ldr	r3, [pc, #76]	; (132a4 <_i2c_master_async_address_response+0xb0>)
   13258:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1325a:	68fb      	ldr	r3, [r7, #12]
   1325c:	685b      	ldr	r3, [r3, #4]
   1325e:	22c0      	movs	r2, #192	; 0xc0
   13260:	0292      	lsls	r2, r2, #10
   13262:	431a      	orrs	r2, r3
   13264:	68fb      	ldr	r3, [r7, #12]
   13266:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   13268:	687b      	ldr	r3, [r7, #4]
   1326a:	8b9b      	ldrh	r3, [r3, #28]
   1326c:	b29a      	uxth	r2, r3
   1326e:	687b      	ldr	r3, [r7, #4]
   13270:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   13272:	687b      	ldr	r3, [r7, #4]
   13274:	2225      	movs	r2, #37	; 0x25
   13276:	5c9b      	ldrb	r3, [r3, r2]
   13278:	b2db      	uxtb	r3, r3
   1327a:	2b05      	cmp	r3, #5
   1327c:	d10e      	bne.n	1329c <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   1327e:	687b      	ldr	r3, [r7, #4]
   13280:	2224      	movs	r2, #36	; 0x24
   13282:	5c9b      	ldrb	r3, [r3, r2]
   13284:	b2db      	uxtb	r3, r3
   13286:	2b00      	cmp	r3, #0
   13288:	d104      	bne.n	13294 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   1328a:	687b      	ldr	r3, [r7, #4]
   1328c:	0018      	movs	r0, r3
   1328e:	4b06      	ldr	r3, [pc, #24]	; (132a8 <_i2c_master_async_address_response+0xb4>)
   13290:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   13292:	e003      	b.n	1329c <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   13294:	687b      	ldr	r3, [r7, #4]
   13296:	0018      	movs	r0, r3
   13298:	4b04      	ldr	r3, [pc, #16]	; (132ac <_i2c_master_async_address_response+0xb8>)
   1329a:	4798      	blx	r3
}
   1329c:	46c0      	nop			; (mov r8, r8)
   1329e:	46bd      	mov	sp, r7
   132a0:	b004      	add	sp, #16
   132a2:	bd80      	pop	{r7, pc}
   132a4:	00013065 	.word	0x00013065
   132a8:	00013179 	.word	0x00013179
   132ac:	00013089 	.word	0x00013089

000132b0 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   132b0:	b580      	push	{r7, lr}
   132b2:	b084      	sub	sp, #16
   132b4:	af00      	add	r7, sp, #0
   132b6:	60f8      	str	r0, [r7, #12]
   132b8:	60b9      	str	r1, [r7, #8]
   132ba:	1dfb      	adds	r3, r7, #7
   132bc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   132be:	1dfb      	adds	r3, r7, #7
   132c0:	781b      	ldrb	r3, [r3, #0]
   132c2:	68fa      	ldr	r2, [r7, #12]
   132c4:	3302      	adds	r3, #2
   132c6:	009b      	lsls	r3, r3, #2
   132c8:	18d3      	adds	r3, r2, r3
   132ca:	3304      	adds	r3, #4
   132cc:	68ba      	ldr	r2, [r7, #8]
   132ce:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   132d0:	68fb      	ldr	r3, [r7, #12]
   132d2:	7e1b      	ldrb	r3, [r3, #24]
   132d4:	b2db      	uxtb	r3, r3
   132d6:	b25a      	sxtb	r2, r3
   132d8:	1dfb      	adds	r3, r7, #7
   132da:	781b      	ldrb	r3, [r3, #0]
   132dc:	2101      	movs	r1, #1
   132de:	4099      	lsls	r1, r3
   132e0:	000b      	movs	r3, r1
   132e2:	b25b      	sxtb	r3, r3
   132e4:	4313      	orrs	r3, r2
   132e6:	b25b      	sxtb	r3, r3
   132e8:	b2da      	uxtb	r2, r3
   132ea:	68fb      	ldr	r3, [r7, #12]
   132ec:	761a      	strb	r2, [r3, #24]
}
   132ee:	46c0      	nop			; (mov r8, r8)
   132f0:	46bd      	mov	sp, r7
   132f2:	b004      	add	sp, #16
   132f4:	bd80      	pop	{r7, pc}
	...

000132f8 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   132f8:	b590      	push	{r4, r7, lr}
   132fa:	b087      	sub	sp, #28
   132fc:	af00      	add	r7, sp, #0
   132fe:	6078      	str	r0, [r7, #4]
   13300:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13302:	687b      	ldr	r3, [r7, #4]
   13304:	681b      	ldr	r3, [r3, #0]
   13306:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   13308:	683b      	ldr	r3, [r7, #0]
   1330a:	685a      	ldr	r2, [r3, #4]
   1330c:	687b      	ldr	r3, [r7, #4]
   1330e:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   13310:	683b      	ldr	r3, [r7, #0]
   13312:	885a      	ldrh	r2, [r3, #2]
   13314:	687b      	ldr	r3, [r7, #4]
   13316:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   13318:	687b      	ldr	r3, [r7, #4]
   1331a:	2224      	movs	r2, #36	; 0x24
   1331c:	2101      	movs	r1, #1
   1331e:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   13320:	687b      	ldr	r3, [r7, #4]
   13322:	2225      	movs	r2, #37	; 0x25
   13324:	2105      	movs	r1, #5
   13326:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13328:	693b      	ldr	r3, [r7, #16]
   1332a:	681b      	ldr	r3, [r3, #0]
   1332c:	011b      	lsls	r3, r3, #4
   1332e:	0fdb      	lsrs	r3, r3, #31
   13330:	b2db      	uxtb	r3, r3
   13332:	001a      	movs	r2, r3
   13334:	230f      	movs	r3, #15
   13336:	18fb      	adds	r3, r7, r3
   13338:	1e51      	subs	r1, r2, #1
   1333a:	418a      	sbcs	r2, r1
   1333c:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   1333e:	683b      	ldr	r3, [r7, #0]
   13340:	7a5b      	ldrb	r3, [r3, #9]
   13342:	2b00      	cmp	r3, #0
   13344:	d006      	beq.n	13354 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   13346:	683b      	ldr	r3, [r7, #0]
   13348:	7a9a      	ldrb	r2, [r3, #10]
   1334a:	687b      	ldr	r3, [r7, #4]
   1334c:	0011      	movs	r1, r2
   1334e:	0018      	movs	r0, r3
   13350:	4b3b      	ldr	r3, [pc, #236]	; (13440 <_i2c_master_read_packet+0x148>)
   13352:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   13354:	230f      	movs	r3, #15
   13356:	18fb      	adds	r3, r7, r3
   13358:	781b      	ldrb	r3, [r3, #0]
   1335a:	2b00      	cmp	r3, #0
   1335c:	d00b      	beq.n	13376 <_i2c_master_read_packet+0x7e>
   1335e:	683b      	ldr	r3, [r7, #0]
   13360:	885b      	ldrh	r3, [r3, #2]
   13362:	2b01      	cmp	r3, #1
   13364:	d107      	bne.n	13376 <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13366:	693b      	ldr	r3, [r7, #16]
   13368:	685b      	ldr	r3, [r3, #4]
   1336a:	2280      	movs	r2, #128	; 0x80
   1336c:	02d2      	lsls	r2, r2, #11
   1336e:	431a      	orrs	r2, r3
   13370:	693b      	ldr	r3, [r7, #16]
   13372:	605a      	str	r2, [r3, #4]
   13374:	e005      	b.n	13382 <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13376:	693b      	ldr	r3, [r7, #16]
   13378:	685b      	ldr	r3, [r3, #4]
   1337a:	4a32      	ldr	r2, [pc, #200]	; (13444 <_i2c_master_read_packet+0x14c>)
   1337c:	401a      	ands	r2, r3
   1337e:	693b      	ldr	r3, [r7, #16]
   13380:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   13382:	683b      	ldr	r3, [r7, #0]
   13384:	7a1b      	ldrb	r3, [r3, #8]
   13386:	2b00      	cmp	r3, #0
   13388:	d045      	beq.n	13416 <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   1338a:	683b      	ldr	r3, [r7, #0]
   1338c:	881b      	ldrh	r3, [r3, #0]
   1338e:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13390:	683b      	ldr	r3, [r7, #0]
   13392:	7a5b      	ldrb	r3, [r3, #9]
   13394:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   13396:	4313      	orrs	r3, r2
   13398:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1339a:	2380      	movs	r3, #128	; 0x80
   1339c:	021b      	lsls	r3, r3, #8
   1339e:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   133a0:	693b      	ldr	r3, [r7, #16]
   133a2:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   133a4:	2317      	movs	r3, #23
   133a6:	18fc      	adds	r4, r7, r3
   133a8:	687b      	ldr	r3, [r7, #4]
   133aa:	0018      	movs	r0, r3
   133ac:	4b26      	ldr	r3, [pc, #152]	; (13448 <_i2c_master_read_packet+0x150>)
   133ae:	4798      	blx	r3
   133b0:	0003      	movs	r3, r0
   133b2:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   133b4:	693b      	ldr	r3, [r7, #16]
   133b6:	685b      	ldr	r3, [r3, #4]
   133b8:	4a22      	ldr	r2, [pc, #136]	; (13444 <_i2c_master_read_packet+0x14c>)
   133ba:	401a      	ands	r2, r3
   133bc:	693b      	ldr	r3, [r7, #16]
   133be:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   133c0:	2317      	movs	r3, #23
   133c2:	18fb      	adds	r3, r7, r3
   133c4:	781b      	ldrb	r3, [r3, #0]
   133c6:	2b00      	cmp	r3, #0
   133c8:	d107      	bne.n	133da <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   133ca:	2317      	movs	r3, #23
   133cc:	18fc      	adds	r4, r7, r3
   133ce:	687b      	ldr	r3, [r7, #4]
   133d0:	0018      	movs	r0, r3
   133d2:	4b1e      	ldr	r3, [pc, #120]	; (1344c <_i2c_master_read_packet+0x154>)
   133d4:	4798      	blx	r3
   133d6:	0003      	movs	r3, r0
   133d8:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   133da:	2317      	movs	r3, #23
   133dc:	18fb      	adds	r3, r7, r3
   133de:	781b      	ldrb	r3, [r3, #0]
   133e0:	2b00      	cmp	r3, #0
   133e2:	d114      	bne.n	1340e <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   133e4:	693b      	ldr	r3, [r7, #16]
   133e6:	2203      	movs	r2, #3
   133e8:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   133ea:	683b      	ldr	r3, [r7, #0]
   133ec:	881b      	ldrh	r3, [r3, #0]
   133ee:	0a1b      	lsrs	r3, r3, #8
   133f0:	b29b      	uxth	r3, r3
   133f2:	2278      	movs	r2, #120	; 0x78
   133f4:	4313      	orrs	r3, r2
   133f6:	b29b      	uxth	r3, r3
   133f8:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   133fa:	683b      	ldr	r3, [r7, #0]
   133fc:	7a5b      	ldrb	r3, [r3, #9]
   133fe:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13400:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13402:	2201      	movs	r2, #1
   13404:	4313      	orrs	r3, r2
   13406:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13408:	693b      	ldr	r3, [r7, #16]
   1340a:	625a      	str	r2, [r3, #36]	; 0x24
   1340c:	e012      	b.n	13434 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   1340e:	2317      	movs	r3, #23
   13410:	18fb      	adds	r3, r7, r3
   13412:	781b      	ldrb	r3, [r3, #0]
   13414:	e00f      	b.n	13436 <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   13416:	693b      	ldr	r3, [r7, #16]
   13418:	2203      	movs	r2, #3
   1341a:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   1341c:	683b      	ldr	r3, [r7, #0]
   1341e:	881b      	ldrh	r3, [r3, #0]
   13420:	005b      	lsls	r3, r3, #1
   13422:	2201      	movs	r2, #1
   13424:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13426:	683b      	ldr	r3, [r7, #0]
   13428:	7a5b      	ldrb	r3, [r3, #9]
   1342a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   1342c:	4313      	orrs	r3, r2
   1342e:	001a      	movs	r2, r3
   13430:	693b      	ldr	r3, [r7, #16]
   13432:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   13434:	2300      	movs	r3, #0
}
   13436:	0018      	movs	r0, r3
   13438:	46bd      	mov	sp, r7
   1343a:	b007      	add	sp, #28
   1343c:	bd90      	pop	{r4, r7, pc}
   1343e:	46c0      	nop			; (mov r8, r8)
   13440:	00018c65 	.word	0x00018c65
   13444:	fffbffff 	.word	0xfffbffff
   13448:	00018c07 	.word	0x00018c07
   1344c:	00018ba9 	.word	0x00018ba9

00013450 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13450:	b580      	push	{r7, lr}
   13452:	b082      	sub	sp, #8
   13454:	af00      	add	r7, sp, #0
   13456:	6078      	str	r0, [r7, #4]
   13458:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   1345a:	687b      	ldr	r3, [r7, #4]
   1345c:	8b9b      	ldrh	r3, [r3, #28]
   1345e:	b29b      	uxth	r3, r3
   13460:	2b00      	cmp	r3, #0
   13462:	d001      	beq.n	13468 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   13464:	2305      	movs	r3, #5
   13466:	e00c      	b.n	13482 <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   13468:	687b      	ldr	r3, [r7, #4]
   1346a:	2201      	movs	r2, #1
   1346c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   1346e:	687b      	ldr	r3, [r7, #4]
   13470:	2201      	movs	r2, #1
   13472:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   13474:	683a      	ldr	r2, [r7, #0]
   13476:	687b      	ldr	r3, [r7, #4]
   13478:	0011      	movs	r1, r2
   1347a:	0018      	movs	r0, r3
   1347c:	4b03      	ldr	r3, [pc, #12]	; (1348c <i2c_master_read_packet_job+0x3c>)
   1347e:	4798      	blx	r3
   13480:	0003      	movs	r3, r0
}
   13482:	0018      	movs	r0, r3
   13484:	46bd      	mov	sp, r7
   13486:	b002      	add	sp, #8
   13488:	bd80      	pop	{r7, pc}
   1348a:	46c0      	nop			; (mov r8, r8)
   1348c:	000132f9 	.word	0x000132f9

00013490 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13490:	b580      	push	{r7, lr}
   13492:	b084      	sub	sp, #16
   13494:	af00      	add	r7, sp, #0
   13496:	6078      	str	r0, [r7, #4]
   13498:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1349a:	687b      	ldr	r3, [r7, #4]
   1349c:	681b      	ldr	r3, [r3, #0]
   1349e:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   134a0:	683b      	ldr	r3, [r7, #0]
   134a2:	7a5b      	ldrb	r3, [r3, #9]
   134a4:	2b00      	cmp	r3, #0
   134a6:	d006      	beq.n	134b6 <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   134a8:	683b      	ldr	r3, [r7, #0]
   134aa:	7a9a      	ldrb	r2, [r3, #10]
   134ac:	687b      	ldr	r3, [r7, #4]
   134ae:	0011      	movs	r1, r2
   134b0:	0018      	movs	r0, r3
   134b2:	4b1e      	ldr	r3, [pc, #120]	; (1352c <_i2c_master_write_packet+0x9c>)
   134b4:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   134b6:	68fb      	ldr	r3, [r7, #12]
   134b8:	685b      	ldr	r3, [r3, #4]
   134ba:	4a1d      	ldr	r2, [pc, #116]	; (13530 <_i2c_master_write_packet+0xa0>)
   134bc:	401a      	ands	r2, r3
   134be:	68fb      	ldr	r3, [r7, #12]
   134c0:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   134c2:	683b      	ldr	r3, [r7, #0]
   134c4:	685a      	ldr	r2, [r3, #4]
   134c6:	687b      	ldr	r3, [r7, #4]
   134c8:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   134ca:	683b      	ldr	r3, [r7, #0]
   134cc:	885a      	ldrh	r2, [r3, #2]
   134ce:	687b      	ldr	r3, [r7, #4]
   134d0:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   134d2:	687b      	ldr	r3, [r7, #4]
   134d4:	2224      	movs	r2, #36	; 0x24
   134d6:	2100      	movs	r1, #0
   134d8:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   134da:	687b      	ldr	r3, [r7, #4]
   134dc:	2225      	movs	r2, #37	; 0x25
   134de:	2105      	movs	r1, #5
   134e0:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   134e2:	68fb      	ldr	r3, [r7, #12]
   134e4:	2203      	movs	r2, #3
   134e6:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   134e8:	683b      	ldr	r3, [r7, #0]
   134ea:	7a1b      	ldrb	r3, [r3, #8]
   134ec:	2b00      	cmp	r3, #0
   134ee:	d00d      	beq.n	1350c <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   134f0:	683b      	ldr	r3, [r7, #0]
   134f2:	881b      	ldrh	r3, [r3, #0]
   134f4:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   134f6:	683b      	ldr	r3, [r7, #0]
   134f8:	7a5b      	ldrb	r3, [r3, #9]
   134fa:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   134fc:	4313      	orrs	r3, r2
   134fe:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13500:	2380      	movs	r3, #128	; 0x80
   13502:	021b      	lsls	r3, r3, #8
   13504:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13506:	68fb      	ldr	r3, [r7, #12]
   13508:	625a      	str	r2, [r3, #36]	; 0x24
   1350a:	e009      	b.n	13520 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   1350c:	683b      	ldr	r3, [r7, #0]
   1350e:	881b      	ldrh	r3, [r3, #0]
   13510:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13512:	683b      	ldr	r3, [r7, #0]
   13514:	7a5b      	ldrb	r3, [r3, #9]
   13516:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13518:	4313      	orrs	r3, r2
   1351a:	001a      	movs	r2, r3
   1351c:	68fb      	ldr	r3, [r7, #12]
   1351e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   13520:	2300      	movs	r3, #0
}
   13522:	0018      	movs	r0, r3
   13524:	46bd      	mov	sp, r7
   13526:	b004      	add	sp, #16
   13528:	bd80      	pop	{r7, pc}
   1352a:	46c0      	nop			; (mov r8, r8)
   1352c:	00018c65 	.word	0x00018c65
   13530:	fffbffff 	.word	0xfffbffff

00013534 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13534:	b580      	push	{r7, lr}
   13536:	b082      	sub	sp, #8
   13538:	af00      	add	r7, sp, #0
   1353a:	6078      	str	r0, [r7, #4]
   1353c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   1353e:	687b      	ldr	r3, [r7, #4]
   13540:	8b9b      	ldrh	r3, [r3, #28]
   13542:	b29b      	uxth	r3, r3
   13544:	2b00      	cmp	r3, #0
   13546:	d001      	beq.n	1354c <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   13548:	2305      	movs	r3, #5
   1354a:	e00c      	b.n	13566 <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   1354c:	687b      	ldr	r3, [r7, #4]
   1354e:	2201      	movs	r2, #1
   13550:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   13552:	687b      	ldr	r3, [r7, #4]
   13554:	2201      	movs	r2, #1
   13556:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   13558:	683a      	ldr	r2, [r7, #0]
   1355a:	687b      	ldr	r3, [r7, #4]
   1355c:	0011      	movs	r1, r2
   1355e:	0018      	movs	r0, r3
   13560:	4b03      	ldr	r3, [pc, #12]	; (13570 <i2c_master_write_packet_job+0x3c>)
   13562:	4798      	blx	r3
   13564:	0003      	movs	r3, r0
}
   13566:	0018      	movs	r0, r3
   13568:	46bd      	mov	sp, r7
   1356a:	b002      	add	sp, #8
   1356c:	bd80      	pop	{r7, pc}
   1356e:	46c0      	nop			; (mov r8, r8)
   13570:	00013491 	.word	0x00013491

00013574 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   13574:	b580      	push	{r7, lr}
   13576:	b086      	sub	sp, #24
   13578:	af00      	add	r7, sp, #0
   1357a:	0002      	movs	r2, r0
   1357c:	1dfb      	adds	r3, r7, #7
   1357e:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   13580:	1dfb      	adds	r3, r7, #7
   13582:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   13584:	4b93      	ldr	r3, [pc, #588]	; (137d4 <_i2c_master_interrupt_handler+0x260>)
   13586:	0092      	lsls	r2, r2, #2
   13588:	58d3      	ldr	r3, [r2, r3]
   1358a:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1358c:	697b      	ldr	r3, [r7, #20]
   1358e:	681b      	ldr	r3, [r3, #0]
   13590:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13592:	693b      	ldr	r3, [r7, #16]
   13594:	681b      	ldr	r3, [r3, #0]
   13596:	011b      	lsls	r3, r3, #4
   13598:	0fdb      	lsrs	r3, r3, #31
   1359a:	b2db      	uxtb	r3, r3
   1359c:	001a      	movs	r2, r3
   1359e:	230f      	movs	r3, #15
   135a0:	18fb      	adds	r3, r7, r3
   135a2:	1e51      	subs	r1, r2, #1
   135a4:	418a      	sbcs	r2, r1
   135a6:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   135a8:	230e      	movs	r3, #14
   135aa:	18fb      	adds	r3, r7, r3
   135ac:	697a      	ldr	r2, [r7, #20]
   135ae:	7e52      	ldrb	r2, [r2, #25]
   135b0:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   135b2:	697b      	ldr	r3, [r7, #20]
   135b4:	7e1b      	ldrb	r3, [r3, #24]
   135b6:	b2da      	uxtb	r2, r3
   135b8:	230e      	movs	r3, #14
   135ba:	18fb      	adds	r3, r7, r3
   135bc:	210e      	movs	r1, #14
   135be:	1879      	adds	r1, r7, r1
   135c0:	7809      	ldrb	r1, [r1, #0]
   135c2:	400a      	ands	r2, r1
   135c4:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   135c6:	697b      	ldr	r3, [r7, #20]
   135c8:	8b5b      	ldrh	r3, [r3, #26]
   135ca:	b29b      	uxth	r3, r3
   135cc:	2b00      	cmp	r3, #0
   135ce:	d109      	bne.n	135e4 <_i2c_master_interrupt_handler+0x70>
   135d0:	697b      	ldr	r3, [r7, #20]
   135d2:	8b9b      	ldrh	r3, [r3, #28]
   135d4:	b29b      	uxth	r3, r3
   135d6:	2b00      	cmp	r3, #0
   135d8:	d004      	beq.n	135e4 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   135da:	697b      	ldr	r3, [r7, #20]
   135dc:	0018      	movs	r0, r3
   135de:	4b7e      	ldr	r3, [pc, #504]	; (137d8 <_i2c_master_interrupt_handler+0x264>)
   135e0:	4798      	blx	r3
   135e2:	e070      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   135e4:	697b      	ldr	r3, [r7, #20]
   135e6:	8b5b      	ldrh	r3, [r3, #26]
   135e8:	b29b      	uxth	r3, r3
   135ea:	2b00      	cmp	r3, #0
   135ec:	d039      	beq.n	13662 <_i2c_master_interrupt_handler+0xee>
   135ee:	697b      	ldr	r3, [r7, #20]
   135f0:	8b9b      	ldrh	r3, [r3, #28]
   135f2:	b29b      	uxth	r3, r3
   135f4:	2b00      	cmp	r3, #0
   135f6:	d134      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   135f8:	697b      	ldr	r3, [r7, #20]
   135fa:	2225      	movs	r2, #37	; 0x25
   135fc:	5c9b      	ldrb	r3, [r3, r2]
   135fe:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13600:	2b05      	cmp	r3, #5
   13602:	d12e      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   13604:	697b      	ldr	r3, [r7, #20]
   13606:	2224      	movs	r2, #36	; 0x24
   13608:	5c9b      	ldrb	r3, [r3, r2]
   1360a:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   1360c:	2b00      	cmp	r3, #0
   1360e:	d128      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13610:	693b      	ldr	r3, [r7, #16]
   13612:	2203      	movs	r2, #3
   13614:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   13616:	697b      	ldr	r3, [r7, #20]
   13618:	2200      	movs	r2, #0
   1361a:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   1361c:	697b      	ldr	r3, [r7, #20]
   1361e:	2225      	movs	r2, #37	; 0x25
   13620:	2100      	movs	r1, #0
   13622:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   13624:	697b      	ldr	r3, [r7, #20]
   13626:	7a9b      	ldrb	r3, [r3, #10]
   13628:	2b00      	cmp	r3, #0
   1362a:	d00b      	beq.n	13644 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   1362c:	697b      	ldr	r3, [r7, #20]
   1362e:	0018      	movs	r0, r3
   13630:	4b6a      	ldr	r3, [pc, #424]	; (137dc <_i2c_master_interrupt_handler+0x268>)
   13632:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   13634:	693b      	ldr	r3, [r7, #16]
   13636:	685b      	ldr	r3, [r3, #4]
   13638:	22c0      	movs	r2, #192	; 0xc0
   1363a:	0292      	lsls	r2, r2, #10
   1363c:	431a      	orrs	r2, r3
   1363e:	693b      	ldr	r3, [r7, #16]
   13640:	605a      	str	r2, [r3, #4]
   13642:	e002      	b.n	1364a <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   13644:	693b      	ldr	r3, [r7, #16]
   13646:	2201      	movs	r2, #1
   13648:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   1364a:	230e      	movs	r3, #14
   1364c:	18fb      	adds	r3, r7, r3
   1364e:	781b      	ldrb	r3, [r3, #0]
   13650:	2201      	movs	r2, #1
   13652:	4013      	ands	r3, r2
   13654:	d037      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13656:	697b      	ldr	r3, [r7, #20]
   13658:	68db      	ldr	r3, [r3, #12]
   1365a:	697a      	ldr	r2, [r7, #20]
   1365c:	0010      	movs	r0, r2
   1365e:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   13660:	e031      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   13662:	697b      	ldr	r3, [r7, #20]
   13664:	8b5b      	ldrh	r3, [r3, #26]
   13666:	b29b      	uxth	r3, r3
   13668:	2b00      	cmp	r3, #0
   1366a:	d02c      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
   1366c:	697b      	ldr	r3, [r7, #20]
   1366e:	8b9b      	ldrh	r3, [r3, #28]
   13670:	b29b      	uxth	r3, r3
   13672:	2b00      	cmp	r3, #0
   13674:	d027      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13676:	693b      	ldr	r3, [r7, #16]
   13678:	8b5b      	ldrh	r3, [r3, #26]
   1367a:	b29b      	uxth	r3, r3
   1367c:	001a      	movs	r2, r3
   1367e:	2320      	movs	r3, #32
   13680:	4013      	ands	r3, r2
   13682:	d111      	bne.n	136a8 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13684:	230f      	movs	r3, #15
   13686:	18fb      	adds	r3, r7, r3
   13688:	781b      	ldrb	r3, [r3, #0]
   1368a:	2201      	movs	r2, #1
   1368c:	4053      	eors	r3, r2
   1368e:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13690:	2b00      	cmp	r3, #0
   13692:	d104      	bne.n	1369e <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13694:	697b      	ldr	r3, [r7, #20]
   13696:	8b9b      	ldrh	r3, [r3, #28]
   13698:	b29b      	uxth	r3, r3
   1369a:	2b01      	cmp	r3, #1
   1369c:	d004      	beq.n	136a8 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   1369e:	697b      	ldr	r3, [r7, #20]
   136a0:	2225      	movs	r2, #37	; 0x25
   136a2:	2141      	movs	r1, #65	; 0x41
   136a4:	5499      	strb	r1, [r3, r2]
   136a6:	e00e      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   136a8:	697b      	ldr	r3, [r7, #20]
   136aa:	2224      	movs	r2, #36	; 0x24
   136ac:	5c9b      	ldrb	r3, [r3, r2]
   136ae:	b2db      	uxtb	r3, r3
   136b0:	2b00      	cmp	r3, #0
   136b2:	d104      	bne.n	136be <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   136b4:	697b      	ldr	r3, [r7, #20]
   136b6:	0018      	movs	r0, r3
   136b8:	4b49      	ldr	r3, [pc, #292]	; (137e0 <_i2c_master_interrupt_handler+0x26c>)
   136ba:	4798      	blx	r3
   136bc:	e003      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   136be:	697b      	ldr	r3, [r7, #20]
   136c0:	0018      	movs	r0, r3
   136c2:	4b48      	ldr	r3, [pc, #288]	; (137e4 <_i2c_master_interrupt_handler+0x270>)
   136c4:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   136c6:	697b      	ldr	r3, [r7, #20]
   136c8:	8b5b      	ldrh	r3, [r3, #26]
   136ca:	b29b      	uxth	r3, r3
   136cc:	2b00      	cmp	r3, #0
   136ce:	d047      	beq.n	13760 <_i2c_master_interrupt_handler+0x1ec>
   136d0:	697b      	ldr	r3, [r7, #20]
   136d2:	8b9b      	ldrh	r3, [r3, #28]
   136d4:	b29b      	uxth	r3, r3
   136d6:	2b00      	cmp	r3, #0
   136d8:	d142      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   136da:	697b      	ldr	r3, [r7, #20]
   136dc:	2225      	movs	r2, #37	; 0x25
   136de:	5c9b      	ldrb	r3, [r3, r2]
   136e0:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   136e2:	2b05      	cmp	r3, #5
   136e4:	d13c      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   136e6:	697b      	ldr	r3, [r7, #20]
   136e8:	2224      	movs	r2, #36	; 0x24
   136ea:	5c9b      	ldrb	r3, [r3, r2]
   136ec:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   136ee:	2b01      	cmp	r3, #1
   136f0:	d136      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   136f2:	693b      	ldr	r3, [r7, #16]
   136f4:	7e1b      	ldrb	r3, [r3, #24]
   136f6:	b2db      	uxtb	r3, r3
   136f8:	001a      	movs	r2, r3
   136fa:	2302      	movs	r3, #2
   136fc:	4013      	ands	r3, r2
   136fe:	d002      	beq.n	13706 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   13700:	693b      	ldr	r3, [r7, #16]
   13702:	2202      	movs	r2, #2
   13704:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13706:	693b      	ldr	r3, [r7, #16]
   13708:	2203      	movs	r2, #3
   1370a:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   1370c:	697b      	ldr	r3, [r7, #20]
   1370e:	2200      	movs	r2, #0
   13710:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   13712:	697b      	ldr	r3, [r7, #20]
   13714:	2225      	movs	r2, #37	; 0x25
   13716:	2100      	movs	r1, #0
   13718:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   1371a:	230e      	movs	r3, #14
   1371c:	18fb      	adds	r3, r7, r3
   1371e:	781b      	ldrb	r3, [r3, #0]
   13720:	2202      	movs	r2, #2
   13722:	4013      	ands	r3, r2
   13724:	d00b      	beq.n	1373e <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   13726:	697b      	ldr	r3, [r7, #20]
   13728:	2224      	movs	r2, #36	; 0x24
   1372a:	5c9b      	ldrb	r3, [r3, r2]
   1372c:	b2db      	uxtb	r3, r3
   1372e:	2b01      	cmp	r3, #1
   13730:	d105      	bne.n	1373e <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   13732:	697b      	ldr	r3, [r7, #20]
   13734:	691b      	ldr	r3, [r3, #16]
   13736:	697a      	ldr	r2, [r7, #20]
   13738:	0010      	movs	r0, r2
   1373a:	4798      	blx	r3
   1373c:	e010      	b.n	13760 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   1373e:	230e      	movs	r3, #14
   13740:	18fb      	adds	r3, r7, r3
   13742:	781b      	ldrb	r3, [r3, #0]
   13744:	2201      	movs	r2, #1
   13746:	4013      	ands	r3, r2
   13748:	d00a      	beq.n	13760 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   1374a:	697b      	ldr	r3, [r7, #20]
   1374c:	2224      	movs	r2, #36	; 0x24
   1374e:	5c9b      	ldrb	r3, [r3, r2]
   13750:	b2db      	uxtb	r3, r3
   13752:	2b00      	cmp	r3, #0
   13754:	d104      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13756:	697b      	ldr	r3, [r7, #20]
   13758:	68db      	ldr	r3, [r3, #12]
   1375a:	697a      	ldr	r2, [r7, #20]
   1375c:	0010      	movs	r0, r2
   1375e:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   13760:	697b      	ldr	r3, [r7, #20]
   13762:	2225      	movs	r2, #37	; 0x25
   13764:	5c9b      	ldrb	r3, [r3, r2]
   13766:	b2db      	uxtb	r3, r3
   13768:	2b05      	cmp	r3, #5
   1376a:	d02e      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
   1376c:	697b      	ldr	r3, [r7, #20]
   1376e:	2225      	movs	r2, #37	; 0x25
   13770:	5c9b      	ldrb	r3, [r3, r2]
   13772:	b2db      	uxtb	r3, r3
   13774:	2b00      	cmp	r3, #0
   13776:	d028      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   13778:	693b      	ldr	r3, [r7, #16]
   1377a:	2203      	movs	r2, #3
   1377c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   1377e:	697b      	ldr	r3, [r7, #20]
   13780:	2200      	movs	r2, #0
   13782:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   13784:	697b      	ldr	r3, [r7, #20]
   13786:	2200      	movs	r2, #0
   13788:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1378a:	697b      	ldr	r3, [r7, #20]
   1378c:	2225      	movs	r2, #37	; 0x25
   1378e:	5c9b      	ldrb	r3, [r3, r2]
   13790:	b2db      	uxtb	r3, r3
   13792:	2b41      	cmp	r3, #65	; 0x41
   13794:	d00e      	beq.n	137b4 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   13796:	697b      	ldr	r3, [r7, #20]
   13798:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1379a:	2b00      	cmp	r3, #0
   1379c:	d00a      	beq.n	137b4 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   1379e:	697b      	ldr	r3, [r7, #20]
   137a0:	0018      	movs	r0, r3
   137a2:	4b0e      	ldr	r3, [pc, #56]	; (137dc <_i2c_master_interrupt_handler+0x268>)
   137a4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   137a6:	693b      	ldr	r3, [r7, #16]
   137a8:	685b      	ldr	r3, [r3, #4]
   137aa:	22e0      	movs	r2, #224	; 0xe0
   137ac:	02d2      	lsls	r2, r2, #11
   137ae:	431a      	orrs	r2, r3
   137b0:	693b      	ldr	r3, [r7, #16]
   137b2:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   137b4:	230e      	movs	r3, #14
   137b6:	18fb      	adds	r3, r7, r3
   137b8:	781b      	ldrb	r3, [r3, #0]
   137ba:	2204      	movs	r2, #4
   137bc:	4013      	ands	r3, r2
   137be:	d004      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   137c0:	697b      	ldr	r3, [r7, #20]
   137c2:	695b      	ldr	r3, [r3, #20]
   137c4:	697a      	ldr	r2, [r7, #20]
   137c6:	0010      	movs	r0, r2
   137c8:	4798      	blx	r3
		}
	}
}
   137ca:	46c0      	nop			; (mov r8, r8)
   137cc:	46bd      	mov	sp, r7
   137ce:	b006      	add	sp, #24
   137d0:	bd80      	pop	{r7, pc}
   137d2:	46c0      	nop			; (mov r8, r8)
   137d4:	20005c9c 	.word	0x20005c9c
   137d8:	000131f5 	.word	0x000131f5
   137dc:	00013065 	.word	0x00013065
   137e0:	00013179 	.word	0x00013179
   137e4:	00013089 	.word	0x00013089

000137e8 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   137e8:	b580      	push	{r7, lr}
   137ea:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   137ec:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   137f0:	4b02      	ldr	r3, [pc, #8]	; (137fc <NVIC_SystemReset+0x14>)
   137f2:	4a03      	ldr	r2, [pc, #12]	; (13800 <NVIC_SystemReset+0x18>)
   137f4:	60da      	str	r2, [r3, #12]
   137f6:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   137fa:	e7fe      	b.n	137fa <NVIC_SystemReset+0x12>
   137fc:	e000ed00 	.word	0xe000ed00
   13800:	05fa0004 	.word	0x05fa0004

00013804 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   13804:	b580      	push	{r7, lr}
   13806:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   13808:	4b02      	ldr	r3, [pc, #8]	; (13814 <system_reset+0x10>)
   1380a:	4798      	blx	r3
}
   1380c:	46c0      	nop			; (mov r8, r8)
   1380e:	46bd      	mov	sp, r7
   13810:	bd80      	pop	{r7, pc}
   13812:	46c0      	nop			; (mov r8, r8)
   13814:	000137e9 	.word	0x000137e9

00013818 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   13818:	b580      	push	{r7, lr}
   1381a:	b086      	sub	sp, #24
   1381c:	af00      	add	r7, sp, #0
   1381e:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   13820:	4ba6      	ldr	r3, [pc, #664]	; (13abc <vCommandConsoleTask+0x2a4>)
   13822:	0018      	movs	r0, r3
   13824:	4ba6      	ldr	r3, [pc, #664]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   13826:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xImuGetCommand);
   13828:	4ba6      	ldr	r3, [pc, #664]	; (13ac4 <vCommandConsoleTask+0x2ac>)
   1382a:	0018      	movs	r0, r3
   1382c:	4ba4      	ldr	r3, [pc, #656]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   1382e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   13830:	4ba5      	ldr	r3, [pc, #660]	; (13ac8 <vCommandConsoleTask+0x2b0>)
   13832:	0018      	movs	r0, r3
   13834:	4ba2      	ldr	r3, [pc, #648]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   13836:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   13838:	4ba4      	ldr	r3, [pc, #656]	; (13acc <vCommandConsoleTask+0x2b4>)
   1383a:	0018      	movs	r0, r3
   1383c:	4ba0      	ldr	r3, [pc, #640]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   1383e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisTurnLEDCommand);
   13840:	4ba3      	ldr	r3, [pc, #652]	; (13ad0 <vCommandConsoleTask+0x2b8>)
   13842:	0018      	movs	r0, r3
   13844:	4b9e      	ldr	r3, [pc, #632]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   13846:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisProcessButtonCommand);
   13848:	4ba2      	ldr	r3, [pc, #648]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   1384a:	0018      	movs	r0, r3
   1384c:	4b9c      	ldr	r3, [pc, #624]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   1384e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xDistanceSensorGetDistance);
   13850:	4ba1      	ldr	r3, [pc, #644]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   13852:	0018      	movs	r0, r3
   13854:	4b9a      	ldr	r3, [pc, #616]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   13856:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xSendDummyGameData);
   13858:	4ba0      	ldr	r3, [pc, #640]	; (13adc <vCommandConsoleTask+0x2c4>)
   1385a:	0018      	movs	r0, r3
   1385c:	4b98      	ldr	r3, [pc, #608]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   1385e:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xSendTestData);
   13860:	4b9f      	ldr	r3, [pc, #636]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   13862:	0018      	movs	r0, r3
   13864:	4b96      	ldr	r3, [pc, #600]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   13866:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   13868:	4b9e      	ldr	r3, [pc, #632]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   1386a:	0018      	movs	r0, r3
   1386c:	4b94      	ldr	r3, [pc, #592]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   1386e:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xSendWeightData);
   13870:	4b9d      	ldr	r3, [pc, #628]	; (13ae8 <vCommandConsoleTask+0x2d0>)
   13872:	0018      	movs	r0, r3
   13874:	4b92      	ldr	r3, [pc, #584]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   13876:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xServoOpen);
   13878:	4b9c      	ldr	r3, [pc, #624]	; (13aec <vCommandConsoleTask+0x2d4>)
   1387a:	0018      	movs	r0, r3
   1387c:	4b90      	ldr	r3, [pc, #576]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   1387e:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xServoClose);
   13880:	4b9b      	ldr	r3, [pc, #620]	; (13af0 <vCommandConsoleTask+0x2d8>)
   13882:	0018      	movs	r0, r3
   13884:	4b8e      	ldr	r3, [pc, #568]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   13886:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   13888:	2317      	movs	r3, #23
   1388a:	18fb      	adds	r3, r7, r3
   1388c:	2200      	movs	r2, #0
   1388e:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   13890:	4b98      	ldr	r3, [pc, #608]	; (13af4 <vCommandConsoleTask+0x2dc>)
   13892:	0018      	movs	r0, r3
   13894:	4b98      	ldr	r3, [pc, #608]	; (13af8 <vCommandConsoleTask+0x2e0>)
   13896:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   13898:	2203      	movs	r2, #3
   1389a:	2100      	movs	r1, #0
   1389c:	2001      	movs	r0, #1
   1389e:	4b97      	ldr	r3, [pc, #604]	; (13afc <vCommandConsoleTask+0x2e4>)
   138a0:	4798      	blx	r3
   138a2:	0002      	movs	r2, r0
   138a4:	4b96      	ldr	r3, [pc, #600]	; (13b00 <vCommandConsoleTask+0x2e8>)
   138a6:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   138a8:	4b95      	ldr	r3, [pc, #596]	; (13b00 <vCommandConsoleTask+0x2e8>)
   138aa:	681b      	ldr	r3, [r3, #0]
   138ac:	2b00      	cmp	r3, #0
   138ae:	d107      	bne.n	138c0 <vCommandConsoleTask+0xa8>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   138b0:	4b94      	ldr	r3, [pc, #592]	; (13b04 <vCommandConsoleTask+0x2ec>)
   138b2:	0019      	movs	r1, r3
   138b4:	2003      	movs	r0, #3
   138b6:	4b94      	ldr	r3, [pc, #592]	; (13b08 <vCommandConsoleTask+0x2f0>)
   138b8:	4798      	blx	r3
        vTaskSuspend(NULL);
   138ba:	2000      	movs	r0, #0
   138bc:	4b93      	ldr	r3, [pc, #588]	; (13b0c <vCommandConsoleTask+0x2f4>)
   138be:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   138c0:	230c      	movs	r3, #12
   138c2:	18fb      	adds	r3, r7, r3
   138c4:	0018      	movs	r0, r3
   138c6:	4b92      	ldr	r3, [pc, #584]	; (13b10 <vCommandConsoleTask+0x2f8>)
   138c8:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   138ca:	230c      	movs	r3, #12
   138cc:	18fb      	adds	r3, r7, r3
   138ce:	781b      	ldrb	r3, [r3, #0]
   138d0:	2b0a      	cmp	r3, #10
   138d2:	d004      	beq.n	138de <vCommandConsoleTask+0xc6>
   138d4:	230c      	movs	r3, #12
   138d6:	18fb      	adds	r3, r7, r3
   138d8:	781b      	ldrb	r3, [r3, #0]
   138da:	2b0d      	cmp	r3, #13
   138dc:	d137      	bne.n	1394e <vCommandConsoleTask+0x136>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   138de:	4b8d      	ldr	r3, [pc, #564]	; (13b14 <vCommandConsoleTask+0x2fc>)
   138e0:	0018      	movs	r0, r3
   138e2:	4b85      	ldr	r3, [pc, #532]	; (13af8 <vCommandConsoleTask+0x2e0>)
   138e4:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   138e6:	4b8c      	ldr	r3, [pc, #560]	; (13b18 <vCommandConsoleTask+0x300>)
   138e8:	2200      	movs	r2, #0
   138ea:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   138ec:	4b8b      	ldr	r3, [pc, #556]	; (13b1c <vCommandConsoleTask+0x304>)
   138ee:	2200      	movs	r2, #0
   138f0:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   138f2:	498b      	ldr	r1, [pc, #556]	; (13b20 <vCommandConsoleTask+0x308>)
   138f4:	4b8b      	ldr	r3, [pc, #556]	; (13b24 <vCommandConsoleTask+0x30c>)
   138f6:	2231      	movs	r2, #49	; 0x31
   138f8:	0018      	movs	r0, r3
   138fa:	4b8b      	ldr	r3, [pc, #556]	; (13b28 <vCommandConsoleTask+0x310>)
   138fc:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   138fe:	4b89      	ldr	r3, [pc, #548]	; (13b24 <vCommandConsoleTask+0x30c>)
   13900:	2231      	movs	r2, #49	; 0x31
   13902:	2100      	movs	r1, #0
   13904:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   13906:	4989      	ldr	r1, [pc, #548]	; (13b2c <vCommandConsoleTask+0x314>)
   13908:	4b85      	ldr	r3, [pc, #532]	; (13b20 <vCommandConsoleTask+0x308>)
   1390a:	2264      	movs	r2, #100	; 0x64
   1390c:	0018      	movs	r0, r3
   1390e:	4b88      	ldr	r3, [pc, #544]	; (13b30 <vCommandConsoleTask+0x318>)
   13910:	4798      	blx	r3
   13912:	0003      	movs	r3, r0
   13914:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   13916:	4b85      	ldr	r3, [pc, #532]	; (13b2c <vCommandConsoleTask+0x314>)
   13918:	2263      	movs	r2, #99	; 0x63
   1391a:	2100      	movs	r1, #0
   1391c:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   1391e:	4b83      	ldr	r3, [pc, #524]	; (13b2c <vCommandConsoleTask+0x314>)
   13920:	0018      	movs	r0, r3
   13922:	4b75      	ldr	r3, [pc, #468]	; (13af8 <vCommandConsoleTask+0x2e0>)
   13924:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   13926:	693b      	ldr	r3, [r7, #16]
   13928:	2b00      	cmp	r3, #0
   1392a:	d1ec      	bne.n	13906 <vCommandConsoleTask+0xee>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   1392c:	2317      	movs	r3, #23
   1392e:	18fb      	adds	r3, r7, r3
   13930:	2200      	movs	r2, #0
   13932:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   13934:	4b7a      	ldr	r3, [pc, #488]	; (13b20 <vCommandConsoleTask+0x308>)
   13936:	2232      	movs	r2, #50	; 0x32
   13938:	2100      	movs	r1, #0
   1393a:	0018      	movs	r0, r3
   1393c:	4b7d      	ldr	r3, [pc, #500]	; (13b34 <vCommandConsoleTask+0x31c>)
   1393e:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   13940:	4b7a      	ldr	r3, [pc, #488]	; (13b2c <vCommandConsoleTask+0x314>)
   13942:	2264      	movs	r2, #100	; 0x64
   13944:	2100      	movs	r1, #0
   13946:	0018      	movs	r0, r3
   13948:	4b7a      	ldr	r3, [pc, #488]	; (13b34 <vCommandConsoleTask+0x31c>)
   1394a:	4798      	blx	r3
   1394c:	e0b5      	b.n	13aba <vCommandConsoleTask+0x2a2>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   1394e:	4b72      	ldr	r3, [pc, #456]	; (13b18 <vCommandConsoleTask+0x300>)
   13950:	781b      	ldrb	r3, [r3, #0]
   13952:	2b00      	cmp	r3, #0
   13954:	d059      	beq.n	13a0a <vCommandConsoleTask+0x1f2>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   13956:	4b71      	ldr	r3, [pc, #452]	; (13b1c <vCommandConsoleTask+0x304>)
   13958:	781b      	ldrb	r3, [r3, #0]
   1395a:	2b03      	cmp	r3, #3
   1395c:	d80c      	bhi.n	13978 <vCommandConsoleTask+0x160>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   1395e:	4b6f      	ldr	r3, [pc, #444]	; (13b1c <vCommandConsoleTask+0x304>)
   13960:	781b      	ldrb	r3, [r3, #0]
   13962:	1c5a      	adds	r2, r3, #1
   13964:	b2d1      	uxtb	r1, r2
   13966:	4a6d      	ldr	r2, [pc, #436]	; (13b1c <vCommandConsoleTask+0x304>)
   13968:	7011      	strb	r1, [r2, #0]
   1396a:	001a      	movs	r2, r3
   1396c:	230c      	movs	r3, #12
   1396e:	18fb      	adds	r3, r7, r3
   13970:	7819      	ldrb	r1, [r3, #0]
   13972:	4b71      	ldr	r3, [pc, #452]	; (13b38 <vCommandConsoleTask+0x320>)
   13974:	5499      	strb	r1, [r3, r2]
   13976:	e005      	b.n	13984 <vCommandConsoleTask+0x16c>
                } else {
                    isEscapeCode = false;
   13978:	4b67      	ldr	r3, [pc, #412]	; (13b18 <vCommandConsoleTask+0x300>)
   1397a:	2200      	movs	r2, #0
   1397c:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   1397e:	4b67      	ldr	r3, [pc, #412]	; (13b1c <vCommandConsoleTask+0x304>)
   13980:	2200      	movs	r2, #0
   13982:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   13984:	4b65      	ldr	r3, [pc, #404]	; (13b1c <vCommandConsoleTask+0x304>)
   13986:	781b      	ldrb	r3, [r3, #0]
   13988:	2b01      	cmp	r3, #1
   1398a:	d999      	bls.n	138c0 <vCommandConsoleTask+0xa8>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   1398c:	4a6b      	ldr	r2, [pc, #428]	; (13b3c <vCommandConsoleTask+0x324>)
   1398e:	4b6a      	ldr	r3, [pc, #424]	; (13b38 <vCommandConsoleTask+0x320>)
   13990:	0011      	movs	r1, r2
   13992:	0018      	movs	r0, r3
   13994:	4b6a      	ldr	r3, [pc, #424]	; (13b40 <vCommandConsoleTask+0x328>)
   13996:	4798      	blx	r3
   13998:	1e03      	subs	r3, r0, #0
   1399a:	d02f      	beq.n	139fc <vCommandConsoleTask+0x1e4>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   1399c:	4969      	ldr	r1, [pc, #420]	; (13b44 <vCommandConsoleTask+0x32c>)
   1399e:	4b60      	ldr	r3, [pc, #384]	; (13b20 <vCommandConsoleTask+0x308>)
   139a0:	221b      	movs	r2, #27
   139a2:	0018      	movs	r0, r3
   139a4:	4b68      	ldr	r3, [pc, #416]	; (13b48 <vCommandConsoleTask+0x330>)
   139a6:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   139a8:	4b5d      	ldr	r3, [pc, #372]	; (13b20 <vCommandConsoleTask+0x308>)
   139aa:	0018      	movs	r0, r3
   139ac:	4b52      	ldr	r3, [pc, #328]	; (13af8 <vCommandConsoleTask+0x2e0>)
   139ae:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   139b0:	2317      	movs	r3, #23
   139b2:	18fb      	adds	r3, r7, r3
   139b4:	2200      	movs	r2, #0
   139b6:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   139b8:	4b59      	ldr	r3, [pc, #356]	; (13b20 <vCommandConsoleTask+0x308>)
   139ba:	2232      	movs	r2, #50	; 0x32
   139bc:	2100      	movs	r1, #0
   139be:	0018      	movs	r0, r3
   139c0:	4b5c      	ldr	r3, [pc, #368]	; (13b34 <vCommandConsoleTask+0x31c>)
   139c2:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   139c4:	4957      	ldr	r1, [pc, #348]	; (13b24 <vCommandConsoleTask+0x30c>)
   139c6:	4b56      	ldr	r3, [pc, #344]	; (13b20 <vCommandConsoleTask+0x308>)
   139c8:	2231      	movs	r2, #49	; 0x31
   139ca:	0018      	movs	r0, r3
   139cc:	4b56      	ldr	r3, [pc, #344]	; (13b28 <vCommandConsoleTask+0x310>)
   139ce:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   139d0:	4b53      	ldr	r3, [pc, #332]	; (13b20 <vCommandConsoleTask+0x308>)
   139d2:	0018      	movs	r0, r3
   139d4:	4b5d      	ldr	r3, [pc, #372]	; (13b4c <vCommandConsoleTask+0x334>)
   139d6:	4798      	blx	r3
   139d8:	0003      	movs	r3, r0
   139da:	2b30      	cmp	r3, #48	; 0x30
   139dc:	d806      	bhi.n	139ec <vCommandConsoleTask+0x1d4>
   139de:	4b51      	ldr	r3, [pc, #324]	; (13b24 <vCommandConsoleTask+0x30c>)
   139e0:	0018      	movs	r0, r3
   139e2:	4b5a      	ldr	r3, [pc, #360]	; (13b4c <vCommandConsoleTask+0x334>)
   139e4:	4798      	blx	r3
   139e6:	0003      	movs	r3, r0
   139e8:	b2da      	uxtb	r2, r3
   139ea:	e000      	b.n	139ee <vCommandConsoleTask+0x1d6>
   139ec:	2231      	movs	r2, #49	; 0x31
   139ee:	2317      	movs	r3, #23
   139f0:	18fb      	adds	r3, r7, r3
   139f2:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   139f4:	4b4a      	ldr	r3, [pc, #296]	; (13b20 <vCommandConsoleTask+0x308>)
   139f6:	0018      	movs	r0, r3
   139f8:	4b3f      	ldr	r3, [pc, #252]	; (13af8 <vCommandConsoleTask+0x2e0>)
   139fa:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   139fc:	4b46      	ldr	r3, [pc, #280]	; (13b18 <vCommandConsoleTask+0x300>)
   139fe:	2200      	movs	r2, #0
   13a00:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   13a02:	4b46      	ldr	r3, [pc, #280]	; (13b1c <vCommandConsoleTask+0x304>)
   13a04:	2200      	movs	r2, #0
   13a06:	701a      	strb	r2, [r3, #0]
   13a08:	e75a      	b.n	138c0 <vCommandConsoleTask+0xa8>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   13a0a:	230c      	movs	r3, #12
   13a0c:	18fb      	adds	r3, r7, r3
   13a0e:	781b      	ldrb	r3, [r3, #0]
   13a10:	2b0d      	cmp	r3, #13
   13a12:	d100      	bne.n	13a16 <vCommandConsoleTask+0x1fe>
   13a14:	e754      	b.n	138c0 <vCommandConsoleTask+0xa8>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13a16:	230c      	movs	r3, #12
   13a18:	18fb      	adds	r3, r7, r3
   13a1a:	781b      	ldrb	r3, [r3, #0]
   13a1c:	2b08      	cmp	r3, #8
   13a1e:	d004      	beq.n	13a2a <vCommandConsoleTask+0x212>
   13a20:	230c      	movs	r3, #12
   13a22:	18fb      	adds	r3, r7, r3
   13a24:	781b      	ldrb	r3, [r3, #0]
   13a26:	2b7f      	cmp	r3, #127	; 0x7f
   13a28:	d11c      	bne.n	13a64 <vCommandConsoleTask+0x24c>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   13a2a:	2308      	movs	r3, #8
   13a2c:	18fb      	adds	r3, r7, r3
   13a2e:	4a48      	ldr	r2, [pc, #288]	; (13b50 <vCommandConsoleTask+0x338>)
   13a30:	6812      	ldr	r2, [r2, #0]
   13a32:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   13a34:	2308      	movs	r3, #8
   13a36:	18fb      	adds	r3, r7, r3
   13a38:	0018      	movs	r0, r3
   13a3a:	4b2f      	ldr	r3, [pc, #188]	; (13af8 <vCommandConsoleTask+0x2e0>)
   13a3c:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   13a3e:	2317      	movs	r3, #23
   13a40:	18fb      	adds	r3, r7, r3
   13a42:	781b      	ldrb	r3, [r3, #0]
   13a44:	2b00      	cmp	r3, #0
   13a46:	d037      	beq.n	13ab8 <vCommandConsoleTask+0x2a0>
                    cInputIndex--;
   13a48:	2317      	movs	r3, #23
   13a4a:	18fb      	adds	r3, r7, r3
   13a4c:	781a      	ldrb	r2, [r3, #0]
   13a4e:	2317      	movs	r3, #23
   13a50:	18fb      	adds	r3, r7, r3
   13a52:	3a01      	subs	r2, #1
   13a54:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   13a56:	2317      	movs	r3, #23
   13a58:	18fb      	adds	r3, r7, r3
   13a5a:	781b      	ldrb	r3, [r3, #0]
   13a5c:	4a30      	ldr	r2, [pc, #192]	; (13b20 <vCommandConsoleTask+0x308>)
   13a5e:	2100      	movs	r1, #0
   13a60:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13a62:	e029      	b.n	13ab8 <vCommandConsoleTask+0x2a0>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   13a64:	230c      	movs	r3, #12
   13a66:	18fb      	adds	r3, r7, r3
   13a68:	781b      	ldrb	r3, [r3, #0]
   13a6a:	2b1b      	cmp	r3, #27
   13a6c:	d106      	bne.n	13a7c <vCommandConsoleTask+0x264>
                isEscapeCode = true;  // Next characters will be code arguments
   13a6e:	4b2a      	ldr	r3, [pc, #168]	; (13b18 <vCommandConsoleTask+0x300>)
   13a70:	2201      	movs	r2, #1
   13a72:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   13a74:	4b29      	ldr	r3, [pc, #164]	; (13b1c <vCommandConsoleTask+0x304>)
   13a76:	2200      	movs	r2, #0
   13a78:	701a      	strb	r2, [r3, #0]
   13a7a:	e721      	b.n	138c0 <vCommandConsoleTask+0xa8>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   13a7c:	2317      	movs	r3, #23
   13a7e:	18fb      	adds	r3, r7, r3
   13a80:	781b      	ldrb	r3, [r3, #0]
   13a82:	2b31      	cmp	r3, #49	; 0x31
   13a84:	d80e      	bhi.n	13aa4 <vCommandConsoleTask+0x28c>
                    pcInputString[cInputIndex] = cRxedChar[0];
   13a86:	2317      	movs	r3, #23
   13a88:	18fb      	adds	r3, r7, r3
   13a8a:	781b      	ldrb	r3, [r3, #0]
   13a8c:	220c      	movs	r2, #12
   13a8e:	18ba      	adds	r2, r7, r2
   13a90:	7811      	ldrb	r1, [r2, #0]
   13a92:	4a23      	ldr	r2, [pc, #140]	; (13b20 <vCommandConsoleTask+0x308>)
   13a94:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   13a96:	2317      	movs	r3, #23
   13a98:	18fb      	adds	r3, r7, r3
   13a9a:	781a      	ldrb	r2, [r3, #0]
   13a9c:	2317      	movs	r3, #23
   13a9e:	18fb      	adds	r3, r7, r3
   13aa0:	3201      	adds	r2, #1
   13aa2:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   13aa4:	230c      	movs	r3, #12
   13aa6:	18fb      	adds	r3, r7, r3
   13aa8:	2200      	movs	r2, #0
   13aaa:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   13aac:	230c      	movs	r3, #12
   13aae:	18fb      	adds	r3, r7, r3
   13ab0:	0018      	movs	r0, r3
   13ab2:	4b11      	ldr	r3, [pc, #68]	; (13af8 <vCommandConsoleTask+0x2e0>)
   13ab4:	4798      	blx	r3
   13ab6:	e703      	b.n	138c0 <vCommandConsoleTask+0xa8>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13ab8:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   13aba:	e701      	b.n	138c0 <vCommandConsoleTask+0xa8>
   13abc:	00037f04 	.word	0x00037f04
   13ac0:	00018dad 	.word	0x00018dad
   13ac4:	00037ef4 	.word	0x00037ef4
   13ac8:	00037fb4 	.word	0x00037fb4
   13acc:	00037f14 	.word	0x00037f14
   13ad0:	00037f24 	.word	0x00037f24
   13ad4:	00037f34 	.word	0x00037f34
   13ad8:	00037f44 	.word	0x00037f44
   13adc:	00037f54 	.word	0x00037f54
   13ae0:	00037f74 	.word	0x00037f74
   13ae4:	00037f64 	.word	0x00037f64
   13ae8:	00037f84 	.word	0x00037f84
   13aec:	00037f94 	.word	0x00037f94
   13af0:	00037fa4 	.word	0x00037fa4
   13af4:	00037ab0 	.word	0x00037ab0
   13af8:	0001ecd5 	.word	0x0001ecd5
   13afc:	0001b375 	.word	0x0001b375
   13b00:	200047e0 	.word	0x200047e0
   13b04:	00037d3c 	.word	0x00037d3c
   13b08:	0001edc1 	.word	0x0001edc1
   13b0c:	0001d161 	.word	0x0001d161
   13b10:	00013b55 	.word	0x00013b55
   13b14:	00037d5c 	.word	0x00037d5c
   13b18:	20000514 	.word	0x20000514
   13b1c:	20000515 	.word	0x20000515
   13b20:	2000054c 	.word	0x2000054c
   13b24:	20000518 	.word	0x20000518
   13b28:	00036827 	.word	0x00036827
   13b2c:	20000580 	.word	0x20000580
   13b30:	00018e1d 	.word	0x00018e1d
   13b34:	0003643f 	.word	0x0003643f
   13b38:	200005e4 	.word	0x200005e4
   13b3c:	00037d60 	.word	0x00037d60
   13b40:	00036741 	.word	0x00036741
   13b44:	00037d64 	.word	0x00037d64
   13b48:	000366fd 	.word	0x000366fd
   13b4c:	000367f7 	.word	0x000367f7
   13b50:	00037d6c 	.word	0x00037d6c

00013b54 <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   13b54:	b580      	push	{r7, lr}
   13b56:	b084      	sub	sp, #16
   13b58:	af00      	add	r7, sp, #0
   13b5a:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   13b5c:	687b      	ldr	r3, [r7, #4]
   13b5e:	0018      	movs	r0, r3
   13b60:	4b0c      	ldr	r3, [pc, #48]	; (13b94 <FreeRTOS_read+0x40>)
   13b62:	4798      	blx	r3
   13b64:	0003      	movs	r3, r0
   13b66:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   13b68:	e00d      	b.n	13b86 <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   13b6a:	4b0b      	ldr	r3, [pc, #44]	; (13b98 <FreeRTOS_read+0x44>)
   13b6c:	681a      	ldr	r2, [r3, #0]
   13b6e:	2301      	movs	r3, #1
   13b70:	425b      	negs	r3, r3
   13b72:	0019      	movs	r1, r3
   13b74:	0010      	movs	r0, r2
   13b76:	4b09      	ldr	r3, [pc, #36]	; (13b9c <FreeRTOS_read+0x48>)
   13b78:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   13b7a:	687b      	ldr	r3, [r7, #4]
   13b7c:	0018      	movs	r0, r3
   13b7e:	4b05      	ldr	r3, [pc, #20]	; (13b94 <FreeRTOS_read+0x40>)
   13b80:	4798      	blx	r3
   13b82:	0003      	movs	r3, r0
   13b84:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   13b86:	68fb      	ldr	r3, [r7, #12]
   13b88:	3301      	adds	r3, #1
   13b8a:	d0ee      	beq.n	13b6a <FreeRTOS_read+0x16>
    }
}
   13b8c:	46c0      	nop			; (mov r8, r8)
   13b8e:	46bd      	mov	sp, r7
   13b90:	b004      	add	sp, #16
   13b92:	bd80      	pop	{r7, pc}
   13b94:	0001ed71 	.word	0x0001ed71
   13b98:	200047e0 	.word	0x200047e0
   13b9c:	0001c32d 	.word	0x0001c32d

00013ba0 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   13ba0:	b580      	push	{r7, lr}
   13ba2:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   13ba4:	4b0a      	ldr	r3, [pc, #40]	; (13bd0 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13ba6:	2200      	movs	r2, #0
   13ba8:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   13baa:	4b0a      	ldr	r3, [pc, #40]	; (13bd4 <CliCharReadySemaphoreGiveFromISR+0x34>)
   13bac:	681b      	ldr	r3, [r3, #0]
   13bae:	4a08      	ldr	r2, [pc, #32]	; (13bd0 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13bb0:	0011      	movs	r1, r2
   13bb2:	0018      	movs	r0, r3
   13bb4:	4b08      	ldr	r3, [pc, #32]	; (13bd8 <CliCharReadySemaphoreGiveFromISR+0x38>)
   13bb6:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13bb8:	4b05      	ldr	r3, [pc, #20]	; (13bd0 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13bba:	681b      	ldr	r3, [r3, #0]
   13bbc:	2b00      	cmp	r3, #0
   13bbe:	d003      	beq.n	13bc8 <CliCharReadySemaphoreGiveFromISR+0x28>
   13bc0:	4b06      	ldr	r3, [pc, #24]	; (13bdc <CliCharReadySemaphoreGiveFromISR+0x3c>)
   13bc2:	2280      	movs	r2, #128	; 0x80
   13bc4:	0552      	lsls	r2, r2, #21
   13bc6:	601a      	str	r2, [r3, #0]
}
   13bc8:	46c0      	nop			; (mov r8, r8)
   13bca:	46bd      	mov	sp, r7
   13bcc:	bd80      	pop	{r7, pc}
   13bce:	46c0      	nop			; (mov r8, r8)
   13bd0:	200005e8 	.word	0x200005e8
   13bd4:	200047e0 	.word	0x200047e0
   13bd8:	0001bca5 	.word	0x0001bca5
   13bdc:	e000ed04 	.word	0xe000ed04

00013be0 <CLI_GetImuData>:
 * CLI Functions - Define here
 ******************************************************************************/

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13be0:	b5b0      	push	{r4, r5, r7, lr}
   13be2:	b088      	sub	sp, #32
   13be4:	af02      	add	r7, sp, #8
   13be6:	60f8      	str	r0, [r7, #12]
   13be8:	60b9      	str	r1, [r7, #8]
   13bea:	607a      	str	r2, [r7, #4]
    static int16_t data_raw_acceleration[3];
    static float acceleration_mg[3];
    uint8_t reg;
    stmdev_ctx_t *dev_ctx = GetImuStruct();
   13bec:	4b2e      	ldr	r3, [pc, #184]	; (13ca8 <CLI_GetImuData+0xc8>)
   13bee:	4798      	blx	r3
   13bf0:	0003      	movs	r3, r0
   13bf2:	617b      	str	r3, [r7, #20]

    /* Read output only if new xl value is available */
    lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);
   13bf4:	2313      	movs	r3, #19
   13bf6:	18fa      	adds	r2, r7, r3
   13bf8:	697b      	ldr	r3, [r7, #20]
   13bfa:	0011      	movs	r1, r2
   13bfc:	0018      	movs	r0, r3
   13bfe:	4b2b      	ldr	r3, [pc, #172]	; (13cac <CLI_GetImuData+0xcc>)
   13c00:	4798      	blx	r3

    if (reg) {
   13c02:	2313      	movs	r3, #19
   13c04:	18fb      	adds	r3, r7, r3
   13c06:	781b      	ldrb	r3, [r3, #0]
   13c08:	2b00      	cmp	r3, #0
   13c0a:	d041      	beq.n	13c90 <CLI_GetImuData+0xb0>
        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
   13c0c:	4b28      	ldr	r3, [pc, #160]	; (13cb0 <CLI_GetImuData+0xd0>)
   13c0e:	2206      	movs	r2, #6
   13c10:	2100      	movs	r1, #0
   13c12:	0018      	movs	r0, r3
   13c14:	4b27      	ldr	r3, [pc, #156]	; (13cb4 <CLI_GetImuData+0xd4>)
   13c16:	4798      	blx	r3
        lsm6dso_acceleration_raw_get(dev_ctx, data_raw_acceleration);
   13c18:	4a25      	ldr	r2, [pc, #148]	; (13cb0 <CLI_GetImuData+0xd0>)
   13c1a:	697b      	ldr	r3, [r7, #20]
   13c1c:	0011      	movs	r1, r2
   13c1e:	0018      	movs	r0, r3
   13c20:	4b25      	ldr	r3, [pc, #148]	; (13cb8 <CLI_GetImuData+0xd8>)
   13c22:	4798      	blx	r3
        acceleration_mg[0] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
   13c24:	4b22      	ldr	r3, [pc, #136]	; (13cb0 <CLI_GetImuData+0xd0>)
   13c26:	2200      	movs	r2, #0
   13c28:	5e9b      	ldrsh	r3, [r3, r2]
   13c2a:	0018      	movs	r0, r3
   13c2c:	4b23      	ldr	r3, [pc, #140]	; (13cbc <CLI_GetImuData+0xdc>)
   13c2e:	4798      	blx	r3
   13c30:	1c02      	adds	r2, r0, #0
   13c32:	4b23      	ldr	r3, [pc, #140]	; (13cc0 <CLI_GetImuData+0xe0>)
   13c34:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
   13c36:	4b1e      	ldr	r3, [pc, #120]	; (13cb0 <CLI_GetImuData+0xd0>)
   13c38:	2202      	movs	r2, #2
   13c3a:	5e9b      	ldrsh	r3, [r3, r2]
   13c3c:	0018      	movs	r0, r3
   13c3e:	4b1f      	ldr	r3, [pc, #124]	; (13cbc <CLI_GetImuData+0xdc>)
   13c40:	4798      	blx	r3
   13c42:	1c02      	adds	r2, r0, #0
   13c44:	4b1e      	ldr	r3, [pc, #120]	; (13cc0 <CLI_GetImuData+0xe0>)
   13c46:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
   13c48:	4b19      	ldr	r3, [pc, #100]	; (13cb0 <CLI_GetImuData+0xd0>)
   13c4a:	2204      	movs	r2, #4
   13c4c:	5e9b      	ldrsh	r3, [r3, r2]
   13c4e:	0018      	movs	r0, r3
   13c50:	4b1a      	ldr	r3, [pc, #104]	; (13cbc <CLI_GetImuData+0xdc>)
   13c52:	4798      	blx	r3
   13c54:	1c02      	adds	r2, r0, #0
   13c56:	4b1a      	ldr	r3, [pc, #104]	; (13cc0 <CLI_GetImuData+0xe0>)
   13c58:	609a      	str	r2, [r3, #8]

        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
   13c5a:	4b19      	ldr	r3, [pc, #100]	; (13cc0 <CLI_GetImuData+0xe0>)
   13c5c:	681a      	ldr	r2, [r3, #0]
   13c5e:	4b19      	ldr	r3, [pc, #100]	; (13cc4 <CLI_GetImuData+0xe4>)
   13c60:	1c10      	adds	r0, r2, #0
   13c62:	4798      	blx	r3
   13c64:	0005      	movs	r5, r0
   13c66:	4b16      	ldr	r3, [pc, #88]	; (13cc0 <CLI_GetImuData+0xe0>)
   13c68:	685a      	ldr	r2, [r3, #4]
   13c6a:	4b16      	ldr	r3, [pc, #88]	; (13cc4 <CLI_GetImuData+0xe4>)
   13c6c:	1c10      	adds	r0, r2, #0
   13c6e:	4798      	blx	r3
   13c70:	0004      	movs	r4, r0
   13c72:	4b13      	ldr	r3, [pc, #76]	; (13cc0 <CLI_GetImuData+0xe0>)
   13c74:	689a      	ldr	r2, [r3, #8]
   13c76:	4b13      	ldr	r3, [pc, #76]	; (13cc4 <CLI_GetImuData+0xe4>)
   13c78:	1c10      	adds	r0, r2, #0
   13c7a:	4798      	blx	r3
   13c7c:	0003      	movs	r3, r0
   13c7e:	4a12      	ldr	r2, [pc, #72]	; (13cc8 <CLI_GetImuData+0xe8>)
   13c80:	68b9      	ldr	r1, [r7, #8]
   13c82:	68f8      	ldr	r0, [r7, #12]
   13c84:	9301      	str	r3, [sp, #4]
   13c86:	9400      	str	r4, [sp, #0]
   13c88:	002b      	movs	r3, r5
   13c8a:	4c10      	ldr	r4, [pc, #64]	; (13ccc <CLI_GetImuData+0xec>)
   13c8c:	47a0      	blx	r4
   13c8e:	e005      	b.n	13c9c <CLI_GetImuData+0xbc>
    } else {
        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "No data ready! \r\n");
   13c90:	4a0f      	ldr	r2, [pc, #60]	; (13cd0 <CLI_GetImuData+0xf0>)
   13c92:	68b9      	ldr	r1, [r7, #8]
   13c94:	68fb      	ldr	r3, [r7, #12]
   13c96:	0018      	movs	r0, r3
   13c98:	4b0c      	ldr	r3, [pc, #48]	; (13ccc <CLI_GetImuData+0xec>)
   13c9a:	4798      	blx	r3
    }
    return pdFALSE;
   13c9c:	2300      	movs	r3, #0
}
   13c9e:	0018      	movs	r0, r3
   13ca0:	46bd      	mov	sp, r7
   13ca2:	b006      	add	sp, #24
   13ca4:	bdb0      	pop	{r4, r5, r7, pc}
   13ca6:	46c0      	nop			; (mov r8, r8)
   13ca8:	00015a59 	.word	0x00015a59
   13cac:	00015505 	.word	0x00015505
   13cb0:	200005ec 	.word	0x200005ec
   13cb4:	0003643f 	.word	0x0003643f
   13cb8:	00015541 	.word	0x00015541
   13cbc:	00014d95 	.word	0x00014d95
   13cc0:	200005f4 	.word	0x200005f4
   13cc4:	00034941 	.word	0x00034941
   13cc8:	00037d70 	.word	0x00037d70
   13ccc:	00036699 	.word	0x00036699
   13cd0:	00037d94 	.word	0x00037d94

00013cd4 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13cd4:	b590      	push	{r4, r7, lr}
   13cd6:	b087      	sub	sp, #28
   13cd8:	af00      	add	r7, sp, #0
   13cda:	60f8      	str	r0, [r7, #12]
   13cdc:	60b9      	str	r1, [r7, #8]
   13cde:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   13ce0:	2317      	movs	r3, #23
   13ce2:	18fb      	adds	r3, r7, r3
   13ce4:	221b      	movs	r2, #27
   13ce6:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   13ce8:	2317      	movs	r3, #23
   13cea:	18fb      	adds	r3, r7, r3
   13cec:	781b      	ldrb	r3, [r3, #0]
   13cee:	4a08      	ldr	r2, [pc, #32]	; (13d10 <xCliClearTerminalScreen+0x3c>)
   13cf0:	4808      	ldr	r0, [pc, #32]	; (13d14 <xCliClearTerminalScreen+0x40>)
   13cf2:	210f      	movs	r1, #15
   13cf4:	4c08      	ldr	r4, [pc, #32]	; (13d18 <xCliClearTerminalScreen+0x44>)
   13cf6:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   13cf8:	4a06      	ldr	r2, [pc, #24]	; (13d14 <xCliClearTerminalScreen+0x40>)
   13cfa:	68b9      	ldr	r1, [r7, #8]
   13cfc:	68fb      	ldr	r3, [r7, #12]
   13cfe:	0018      	movs	r0, r3
   13d00:	4b05      	ldr	r3, [pc, #20]	; (13d18 <xCliClearTerminalScreen+0x44>)
   13d02:	4798      	blx	r3
    return pdFALSE;
   13d04:	2300      	movs	r3, #0
}
   13d06:	0018      	movs	r0, r3
   13d08:	46bd      	mov	sp, r7
   13d0a:	b007      	add	sp, #28
   13d0c:	bd90      	pop	{r4, r7, pc}
   13d0e:	46c0      	nop			; (mov r8, r8)
   13d10:	00037da8 	.word	0x00037da8
   13d14:	20000504 	.word	0x20000504
   13d18:	00036699 	.word	0x00036699

00013d1c <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13d1c:	b580      	push	{r7, lr}
   13d1e:	b084      	sub	sp, #16
   13d20:	af00      	add	r7, sp, #0
   13d22:	60f8      	str	r0, [r7, #12]
   13d24:	60b9      	str	r1, [r7, #8]
   13d26:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   13d28:	2002      	movs	r0, #2
   13d2a:	4b03      	ldr	r3, [pc, #12]	; (13d38 <CLI_OTAU+0x1c>)
   13d2c:	4798      	blx	r3

    return pdFALSE;
   13d2e:	2300      	movs	r3, #0
}
   13d30:	0018      	movs	r0, r3
   13d32:	46bd      	mov	sp, r7
   13d34:	b004      	add	sp, #16
   13d36:	bd80      	pop	{r7, pc}
   13d38:	00018365 	.word	0x00018365

00013d3c <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13d3c:	b580      	push	{r7, lr}
   13d3e:	b084      	sub	sp, #16
   13d40:	af00      	add	r7, sp, #0
   13d42:	60f8      	str	r0, [r7, #12]
   13d44:	60b9      	str	r1, [r7, #8]
   13d46:	607a      	str	r2, [r7, #4]
    system_reset();
   13d48:	4b03      	ldr	r3, [pc, #12]	; (13d58 <CLI_ResetDevice+0x1c>)
   13d4a:	4798      	blx	r3
    return pdFALSE;
   13d4c:	2300      	movs	r3, #0
}
   13d4e:	0018      	movs	r0, r3
   13d50:	46bd      	mov	sp, r7
   13d52:	b004      	add	sp, #16
   13d54:	bd80      	pop	{r7, pc}
   13d56:	46c0      	nop			; (mov r8, r8)
   13d58:	00013805 	.word	0x00013805

00013d5c <CLI_NeotrellisSetLed>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellisSetLed(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13d5c:	b580      	push	{r7, lr}
   13d5e:	b084      	sub	sp, #16
   13d60:	af00      	add	r7, sp, #0
   13d62:	60f8      	str	r0, [r7, #12]
   13d64:	60b9      	str	r1, [r7, #8]
   13d66:	607a      	str	r2, [r7, #4]
    snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Students to fill out!");
   13d68:	4a05      	ldr	r2, [pc, #20]	; (13d80 <CLI_NeotrellisSetLed+0x24>)
   13d6a:	68b9      	ldr	r1, [r7, #8]
   13d6c:	68fb      	ldr	r3, [r7, #12]
   13d6e:	0018      	movs	r0, r3
   13d70:	4b04      	ldr	r3, [pc, #16]	; (13d84 <CLI_NeotrellisSetLed+0x28>)
   13d72:	4798      	blx	r3
    // Check code SeesawSetLed and SeesawSetLed
    // How do you get parameters? Checl link in comments!
    // Check that the input is sanitized: Key between 0-15, RGB between 0-255. Print if there is an error!
    // return pdFalse to tell the FreeRTOS CLI your call is done and does not need to call again.
    // This function expects 4 arguments inside pcCommandString: key, R, G, B.
    return pdFALSE;
   13d74:	2300      	movs	r3, #0
}
   13d76:	0018      	movs	r0, r3
   13d78:	46bd      	mov	sp, r7
   13d7a:	b004      	add	sp, #16
   13d7c:	bd80      	pop	{r7, pc}
   13d7e:	46c0      	nop			; (mov r8, r8)
   13d80:	00037db0 	.word	0x00037db0
   13d84:	00036699 	.word	0x00036699

00013d88 <CLI_NeotrellProcessButtonBuffer>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellProcessButtonBuffer(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13d88:	b590      	push	{r4, r7, lr}
   13d8a:	b099      	sub	sp, #100	; 0x64
   13d8c:	af00      	add	r7, sp, #0
   13d8e:	60f8      	str	r0, [r7, #12]
   13d90:	60b9      	str	r1, [r7, #8]
   13d92:	607a      	str	r2, [r7, #4]
    // snprintf(pcWriteBuffer,xWriteBufferLen, "count: %d\num_req_eve:%d\t\n",count,num_req_eve);
    // Print to pcWriteBuffer in order.
    // If the string is too long to print, print what you can.
    // The function you write will be useful in the future.
    uint8_t buffer[64];
    uint8_t count = SeesawGetKeypadCount();
   13d94:	235f      	movs	r3, #95	; 0x5f
   13d96:	18fc      	adds	r4, r7, r3
   13d98:	4b36      	ldr	r3, [pc, #216]	; (13e74 <CLI_NeotrellProcessButtonBuffer+0xec>)
   13d9a:	4798      	blx	r3
   13d9c:	0003      	movs	r3, r0
   13d9e:	7023      	strb	r3, [r4, #0]
    if (count >= 1) {
   13da0:	235f      	movs	r3, #95	; 0x5f
   13da2:	18fb      	adds	r3, r7, r3
   13da4:	781b      	ldrb	r3, [r3, #0]
   13da6:	2b00      	cmp	r3, #0
   13da8:	d05d      	beq.n	13e66 <CLI_NeotrellProcessButtonBuffer+0xde>
        int32_t res = SeesawReadKeypad(buffer, 1);
   13daa:	2310      	movs	r3, #16
   13dac:	18fb      	adds	r3, r7, r3
   13dae:	2101      	movs	r1, #1
   13db0:	0018      	movs	r0, r3
   13db2:	4b31      	ldr	r3, [pc, #196]	; (13e78 <CLI_NeotrellProcessButtonBuffer+0xf0>)
   13db4:	4798      	blx	r3
   13db6:	0003      	movs	r3, r0
   13db8:	65bb      	str	r3, [r7, #88]	; 0x58
        if (res == 0) {
   13dba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   13dbc:	2b00      	cmp	r3, #0
   13dbe:	d150      	bne.n	13e62 <CLI_NeotrellProcessButtonBuffer+0xda>
            uint8_t pos, press;
            press = buffer[0] & 0x3;
   13dc0:	2310      	movs	r3, #16
   13dc2:	18fb      	adds	r3, r7, r3
   13dc4:	781a      	ldrb	r2, [r3, #0]
   13dc6:	2357      	movs	r3, #87	; 0x57
   13dc8:	18fb      	adds	r3, r7, r3
   13dca:	2103      	movs	r1, #3
   13dcc:	400a      	ands	r2, r1
   13dce:	701a      	strb	r2, [r3, #0]
            pos = buffer[0] >> 2;
   13dd0:	2310      	movs	r3, #16
   13dd2:	18fb      	adds	r3, r7, r3
   13dd4:	781a      	ldrb	r2, [r3, #0]
   13dd6:	2356      	movs	r3, #86	; 0x56
   13dd8:	18fb      	adds	r3, r7, r3
   13dda:	0892      	lsrs	r2, r2, #2
   13ddc:	701a      	strb	r2, [r3, #0]
            int num = NEO_TRELLIS_SEESAW_KEY(pos);
   13dde:	2356      	movs	r3, #86	; 0x56
   13de0:	18fb      	adds	r3, r7, r3
   13de2:	781b      	ldrb	r3, [r3, #0]
   13de4:	08db      	lsrs	r3, r3, #3
   13de6:	b2db      	uxtb	r3, r3
   13de8:	009a      	lsls	r2, r3, #2
   13dea:	2356      	movs	r3, #86	; 0x56
   13dec:	18fb      	adds	r3, r7, r3
   13dee:	781b      	ldrb	r3, [r3, #0]
   13df0:	2107      	movs	r1, #7
   13df2:	400b      	ands	r3, r1
   13df4:	18d3      	adds	r3, r2, r3
   13df6:	653b      	str	r3, [r7, #80]	; 0x50
            if (press == 0x2) {
   13df8:	2357      	movs	r3, #87	; 0x57
   13dfa:	18fb      	adds	r3, r7, r3
   13dfc:	781b      	ldrb	r3, [r3, #0]
   13dfe:	2b02      	cmp	r3, #2
   13e00:	d115      	bne.n	13e2e <CLI_NeotrellProcessButtonBuffer+0xa6>
                snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Button #%d is released\r\n", NEO_TRELLIS_SEESAW_KEY(num));
   13e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13e04:	2b00      	cmp	r3, #0
   13e06:	da00      	bge.n	13e0a <CLI_NeotrellProcessButtonBuffer+0x82>
   13e08:	3307      	adds	r3, #7
   13e0a:	10db      	asrs	r3, r3, #3
   13e0c:	009a      	lsls	r2, r3, #2
   13e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13e10:	491a      	ldr	r1, [pc, #104]	; (13e7c <CLI_NeotrellProcessButtonBuffer+0xf4>)
   13e12:	400b      	ands	r3, r1
   13e14:	d504      	bpl.n	13e20 <CLI_NeotrellProcessButtonBuffer+0x98>
   13e16:	3b01      	subs	r3, #1
   13e18:	2108      	movs	r1, #8
   13e1a:	4249      	negs	r1, r1
   13e1c:	430b      	orrs	r3, r1
   13e1e:	3301      	adds	r3, #1
   13e20:	18d3      	adds	r3, r2, r3
   13e22:	4a17      	ldr	r2, [pc, #92]	; (13e80 <CLI_NeotrellProcessButtonBuffer+0xf8>)
   13e24:	68b9      	ldr	r1, [r7, #8]
   13e26:	68f8      	ldr	r0, [r7, #12]
   13e28:	4c16      	ldr	r4, [pc, #88]	; (13e84 <CLI_NeotrellProcessButtonBuffer+0xfc>)
   13e2a:	47a0      	blx	r4
   13e2c:	e019      	b.n	13e62 <CLI_NeotrellProcessButtonBuffer+0xda>
            } else if (press == 0x3) {
   13e2e:	2357      	movs	r3, #87	; 0x57
   13e30:	18fb      	adds	r3, r7, r3
   13e32:	781b      	ldrb	r3, [r3, #0]
   13e34:	2b03      	cmp	r3, #3
   13e36:	d114      	bne.n	13e62 <CLI_NeotrellProcessButtonBuffer+0xda>
                snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Button #%d is pressed\r\n", NEO_TRELLIS_SEESAW_KEY(num));
   13e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13e3a:	2b00      	cmp	r3, #0
   13e3c:	da00      	bge.n	13e40 <CLI_NeotrellProcessButtonBuffer+0xb8>
   13e3e:	3307      	adds	r3, #7
   13e40:	10db      	asrs	r3, r3, #3
   13e42:	009a      	lsls	r2, r3, #2
   13e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13e46:	490d      	ldr	r1, [pc, #52]	; (13e7c <CLI_NeotrellProcessButtonBuffer+0xf4>)
   13e48:	400b      	ands	r3, r1
   13e4a:	d504      	bpl.n	13e56 <CLI_NeotrellProcessButtonBuffer+0xce>
   13e4c:	3b01      	subs	r3, #1
   13e4e:	2108      	movs	r1, #8
   13e50:	4249      	negs	r1, r1
   13e52:	430b      	orrs	r3, r1
   13e54:	3301      	adds	r3, #1
   13e56:	18d3      	adds	r3, r2, r3
   13e58:	4a0b      	ldr	r2, [pc, #44]	; (13e88 <CLI_NeotrellProcessButtonBuffer+0x100>)
   13e5a:	68b9      	ldr	r1, [r7, #8]
   13e5c:	68f8      	ldr	r0, [r7, #12]
   13e5e:	4c09      	ldr	r4, [pc, #36]	; (13e84 <CLI_NeotrellProcessButtonBuffer+0xfc>)
   13e60:	47a0      	blx	r4
            }
        }
        return pdTRUE;
   13e62:	2301      	movs	r3, #1
   13e64:	e002      	b.n	13e6c <CLI_NeotrellProcessButtonBuffer+0xe4>
    } else {
        pcWriteBuffer = 0;
   13e66:	2300      	movs	r3, #0
   13e68:	60fb      	str	r3, [r7, #12]
        return pdFALSE;
   13e6a:	2300      	movs	r3, #0
    }
}
   13e6c:	0018      	movs	r0, r3
   13e6e:	46bd      	mov	sp, r7
   13e70:	b019      	add	sp, #100	; 0x64
   13e72:	bd90      	pop	{r4, r7, pc}
   13e74:	000162bd 	.word	0x000162bd
   13e78:	00016325 	.word	0x00016325
   13e7c:	80000007 	.word	0x80000007
   13e80:	00037dc8 	.word	0x00037dc8
   13e84:	00036699 	.word	0x00036699
   13e88:	00037de4 	.word	0x00037de4

00013e8c <CLI_DistanceSensorGetDistance>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_DistanceSensorGetDistance(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13e8c:	b590      	push	{r4, r7, lr}
   13e8e:	b087      	sub	sp, #28
   13e90:	af00      	add	r7, sp, #0
   13e92:	60f8      	str	r0, [r7, #12]
   13e94:	60b9      	str	r1, [r7, #8]
   13e96:	607a      	str	r2, [r7, #4]
    uint16_t distance = 0;
   13e98:	2312      	movs	r3, #18
   13e9a:	18fb      	adds	r3, r7, r3
   13e9c:	2200      	movs	r2, #0
   13e9e:	801a      	strh	r2, [r3, #0]
    int error = DistanceSensorGetDistance(&distance, 100);
   13ea0:	2312      	movs	r3, #18
   13ea2:	18fb      	adds	r3, r7, r3
   13ea4:	2164      	movs	r1, #100	; 0x64
   13ea6:	0018      	movs	r0, r3
   13ea8:	4b19      	ldr	r3, [pc, #100]	; (13f10 <CLI_DistanceSensorGetDistance+0x84>)
   13eaa:	4798      	blx	r3
   13eac:	0003      	movs	r3, r0
   13eae:	617b      	str	r3, [r7, #20]
    if (0 != error) {
   13eb0:	697b      	ldr	r3, [r7, #20]
   13eb2:	2b00      	cmp	r3, #0
   13eb4:	d006      	beq.n	13ec4 <CLI_DistanceSensorGetDistance+0x38>
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Sensor Error %d!\r\n", error);
   13eb6:	697b      	ldr	r3, [r7, #20]
   13eb8:	4a16      	ldr	r2, [pc, #88]	; (13f14 <CLI_DistanceSensorGetDistance+0x88>)
   13eba:	68b9      	ldr	r1, [r7, #8]
   13ebc:	68f8      	ldr	r0, [r7, #12]
   13ebe:	4c16      	ldr	r4, [pc, #88]	; (13f18 <CLI_DistanceSensorGetDistance+0x8c>)
   13ec0:	47a0      	blx	r4
   13ec2:	e007      	b.n	13ed4 <CLI_DistanceSensorGetDistance+0x48>
    } else {
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Distance: %d mm\r\n", distance);
   13ec4:	2312      	movs	r3, #18
   13ec6:	18fb      	adds	r3, r7, r3
   13ec8:	881b      	ldrh	r3, [r3, #0]
   13eca:	4a14      	ldr	r2, [pc, #80]	; (13f1c <CLI_DistanceSensorGetDistance+0x90>)
   13ecc:	68b9      	ldr	r1, [r7, #8]
   13ece:	68f8      	ldr	r0, [r7, #12]
   13ed0:	4c11      	ldr	r4, [pc, #68]	; (13f18 <CLI_DistanceSensorGetDistance+0x8c>)
   13ed2:	47a0      	blx	r4
    }

    error = WifiAddDistanceDataToQueue(&distance);
   13ed4:	2312      	movs	r3, #18
   13ed6:	18fb      	adds	r3, r7, r3
   13ed8:	0018      	movs	r0, r3
   13eda:	4b11      	ldr	r3, [pc, #68]	; (13f20 <CLI_DistanceSensorGetDistance+0x94>)
   13edc:	4798      	blx	r3
   13ede:	0003      	movs	r3, r0
   13ee0:	617b      	str	r3, [r7, #20]
    if (error == pdTRUE) {
   13ee2:	697b      	ldr	r3, [r7, #20]
   13ee4:	2b01      	cmp	r3, #1
   13ee6:	d10e      	bne.n	13f06 <CLI_DistanceSensorGetDistance+0x7a>
        strcat((char *) pcWriteBuffer, "Distance Data MQTT Post\r\n");
   13ee8:	68fb      	ldr	r3, [r7, #12]
   13eea:	0018      	movs	r0, r3
   13eec:	4b0d      	ldr	r3, [pc, #52]	; (13f24 <CLI_DistanceSensorGetDistance+0x98>)
   13eee:	4798      	blx	r3
   13ef0:	0003      	movs	r3, r0
   13ef2:	001a      	movs	r2, r3
   13ef4:	68fb      	ldr	r3, [r7, #12]
   13ef6:	189a      	adds	r2, r3, r2
   13ef8:	4b0b      	ldr	r3, [pc, #44]	; (13f28 <CLI_DistanceSensorGetDistance+0x9c>)
   13efa:	0010      	movs	r0, r2
   13efc:	0019      	movs	r1, r3
   13efe:	231a      	movs	r3, #26
   13f00:	001a      	movs	r2, r3
   13f02:	4b0a      	ldr	r3, [pc, #40]	; (13f2c <CLI_DistanceSensorGetDistance+0xa0>)
   13f04:	4798      	blx	r3
    }
    return pdFALSE;
   13f06:	2300      	movs	r3, #0
}
   13f08:	0018      	movs	r0, r3
   13f0a:	46bd      	mov	sp, r7
   13f0c:	b007      	add	sp, #28
   13f0e:	bd90      	pop	{r4, r7, pc}
   13f10:	000143e9 	.word	0x000143e9
   13f14:	00037dfc 	.word	0x00037dfc
   13f18:	00036699 	.word	0x00036699
   13f1c:	00037e10 	.word	0x00037e10
   13f20:	00018399 	.word	0x00018399
   13f24:	000367f7 	.word	0x000367f7
   13f28:	00037e24 	.word	0x00037e24
   13f2c:	00036409 	.word	0x00036409

00013f30 <CLI_SendDummyGameData>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_SendDummyGameData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13f30:	b580      	push	{r7, lr}
   13f32:	b08a      	sub	sp, #40	; 0x28
   13f34:	af00      	add	r7, sp, #0
   13f36:	60f8      	str	r0, [r7, #12]
   13f38:	60b9      	str	r1, [r7, #8]
   13f3a:	607a      	str	r2, [r7, #4]
    struct GameDataPacket gamevar;

    gamevar.game[0] = 0;
   13f3c:	2310      	movs	r3, #16
   13f3e:	18fb      	adds	r3, r7, r3
   13f40:	2200      	movs	r2, #0
   13f42:	701a      	strb	r2, [r3, #0]
    gamevar.game[1] = 1;
   13f44:	2310      	movs	r3, #16
   13f46:	18fb      	adds	r3, r7, r3
   13f48:	2201      	movs	r2, #1
   13f4a:	705a      	strb	r2, [r3, #1]
    gamevar.game[2] = 2;
   13f4c:	2310      	movs	r3, #16
   13f4e:	18fb      	adds	r3, r7, r3
   13f50:	2202      	movs	r2, #2
   13f52:	709a      	strb	r2, [r3, #2]
    gamevar.game[3] = 3;
   13f54:	2310      	movs	r3, #16
   13f56:	18fb      	adds	r3, r7, r3
   13f58:	2203      	movs	r2, #3
   13f5a:	70da      	strb	r2, [r3, #3]
    gamevar.game[4] = 4;
   13f5c:	2310      	movs	r3, #16
   13f5e:	18fb      	adds	r3, r7, r3
   13f60:	2204      	movs	r2, #4
   13f62:	711a      	strb	r2, [r3, #4]
    gamevar.game[5] = 5;
   13f64:	2310      	movs	r3, #16
   13f66:	18fb      	adds	r3, r7, r3
   13f68:	2205      	movs	r2, #5
   13f6a:	715a      	strb	r2, [r3, #5]
    gamevar.game[6] = 6;
   13f6c:	2310      	movs	r3, #16
   13f6e:	18fb      	adds	r3, r7, r3
   13f70:	2206      	movs	r2, #6
   13f72:	719a      	strb	r2, [r3, #6]
    gamevar.game[7] = 7;
   13f74:	2310      	movs	r3, #16
   13f76:	18fb      	adds	r3, r7, r3
   13f78:	2207      	movs	r2, #7
   13f7a:	71da      	strb	r2, [r3, #7]
    gamevar.game[8] = 8;
   13f7c:	2310      	movs	r3, #16
   13f7e:	18fb      	adds	r3, r7, r3
   13f80:	2208      	movs	r2, #8
   13f82:	721a      	strb	r2, [r3, #8]
    gamevar.game[9] = 9;
   13f84:	2310      	movs	r3, #16
   13f86:	18fb      	adds	r3, r7, r3
   13f88:	2209      	movs	r2, #9
   13f8a:	725a      	strb	r2, [r3, #9]
    gamevar.game[10] = 0xFF;
   13f8c:	2310      	movs	r3, #16
   13f8e:	18fb      	adds	r3, r7, r3
   13f90:	22ff      	movs	r2, #255	; 0xff
   13f92:	729a      	strb	r2, [r3, #10]

    int error = WifiAddGameDataToQueue(&gamevar);
   13f94:	2310      	movs	r3, #16
   13f96:	18fb      	adds	r3, r7, r3
   13f98:	0018      	movs	r0, r3
   13f9a:	4b09      	ldr	r3, [pc, #36]	; (13fc0 <CLI_SendDummyGameData+0x90>)
   13f9c:	4798      	blx	r3
   13f9e:	0003      	movs	r3, r0
   13fa0:	627b      	str	r3, [r7, #36]	; 0x24
    if (error == pdTRUE) {
   13fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13fa4:	2b01      	cmp	r3, #1
   13fa6:	d105      	bne.n	13fb4 <CLI_SendDummyGameData+0x84>
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Dummy Game Data MQTT Post\r\n");
   13fa8:	4a06      	ldr	r2, [pc, #24]	; (13fc4 <CLI_SendDummyGameData+0x94>)
   13faa:	68b9      	ldr	r1, [r7, #8]
   13fac:	68fb      	ldr	r3, [r7, #12]
   13fae:	0018      	movs	r0, r3
   13fb0:	4b05      	ldr	r3, [pc, #20]	; (13fc8 <CLI_SendDummyGameData+0x98>)
   13fb2:	4798      	blx	r3
    }
    return pdFALSE;
   13fb4:	2300      	movs	r3, #0
}
   13fb6:	0018      	movs	r0, r3
   13fb8:	46bd      	mov	sp, r7
   13fba:	b00a      	add	sp, #40	; 0x28
   13fbc:	bd80      	pop	{r7, pc}
   13fbe:	46c0      	nop			; (mov r8, r8)
   13fc0:	000183c5 	.word	0x000183c5
   13fc4:	00037e40 	.word	0x00037e40
   13fc8:	00036699 	.word	0x00036699

00013fcc <CLI_SendTestData>:

BaseType_t CLI_SendTestData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13fcc:	b580      	push	{r7, lr}
   13fce:	b086      	sub	sp, #24
   13fd0:	af00      	add	r7, sp, #0
   13fd2:	60f8      	str	r0, [r7, #12]
   13fd4:	60b9      	str	r1, [r7, #8]
   13fd6:	607a      	str	r2, [r7, #4]
	struct TestPacket testvar;

	testvar.test = 6;
   13fd8:	2310      	movs	r3, #16
   13fda:	18fb      	adds	r3, r7, r3
   13fdc:	2206      	movs	r2, #6
   13fde:	701a      	strb	r2, [r3, #0]

	int error = WifiAddTestDataToQueue(&testvar);
   13fe0:	2310      	movs	r3, #16
   13fe2:	18fb      	adds	r3, r7, r3
   13fe4:	0018      	movs	r0, r3
   13fe6:	4b09      	ldr	r3, [pc, #36]	; (1400c <CLI_SendTestData+0x40>)
   13fe8:	4798      	blx	r3
   13fea:	0003      	movs	r3, r0
   13fec:	617b      	str	r3, [r7, #20]
	if (error == pdTRUE) {
   13fee:	697b      	ldr	r3, [r7, #20]
   13ff0:	2b01      	cmp	r3, #1
   13ff2:	d105      	bne.n	14000 <CLI_SendTestData+0x34>
		snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Test Data MQTT Post\r\n");
   13ff4:	4a06      	ldr	r2, [pc, #24]	; (14010 <CLI_SendTestData+0x44>)
   13ff6:	68b9      	ldr	r1, [r7, #8]
   13ff8:	68fb      	ldr	r3, [r7, #12]
   13ffa:	0018      	movs	r0, r3
   13ffc:	4b05      	ldr	r3, [pc, #20]	; (14014 <CLI_SendTestData+0x48>)
   13ffe:	4798      	blx	r3
	}
	return pdFALSE;
   14000:	2300      	movs	r3, #0
}
   14002:	0018      	movs	r0, r3
   14004:	46bd      	mov	sp, r7
   14006:	b006      	add	sp, #24
   14008:	bd80      	pop	{r7, pc}
   1400a:	46c0      	nop			; (mov r8, r8)
   1400c:	000183f1 	.word	0x000183f1
   14010:	00037e5c 	.word	0x00037e5c
   14014:	00036699 	.word	0x00036699

00014018 <CLI_ServoOpen>:

BaseType_t CLI_ServoOpen(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14018:	b580      	push	{r7, lr}
   1401a:	b084      	sub	sp, #16
   1401c:	af00      	add	r7, sp, #0
   1401e:	60f8      	str	r0, [r7, #12]
   14020:	60b9      	str	r1, [r7, #8]
   14022:	607a      	str	r2, [r7, #4]
	servo_setDuty(2);	
   14024:	2002      	movs	r0, #2
   14026:	4b03      	ldr	r3, [pc, #12]	; (14034 <CLI_ServoOpen+0x1c>)
   14028:	4798      	blx	r3
	return pdFALSE;
   1402a:	2300      	movs	r3, #0
}
   1402c:	0018      	movs	r0, r3
   1402e:	46bd      	mov	sp, r7
   14030:	b004      	add	sp, #16
   14032:	bd80      	pop	{r7, pc}
   14034:	00016751 	.word	0x00016751

00014038 <CLI_ServoClose>:

BaseType_t CLI_ServoClose(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14038:	b580      	push	{r7, lr}
   1403a:	b084      	sub	sp, #16
   1403c:	af00      	add	r7, sp, #0
   1403e:	60f8      	str	r0, [r7, #12]
   14040:	60b9      	str	r1, [r7, #8]
   14042:	607a      	str	r2, [r7, #4]
	servo_setDuty(3);
   14044:	2003      	movs	r0, #3
   14046:	4b03      	ldr	r3, [pc, #12]	; (14054 <CLI_ServoClose+0x1c>)
   14048:	4798      	blx	r3
	return pdFALSE;
   1404a:	2300      	movs	r3, #0
}
   1404c:	0018      	movs	r0, r3
   1404e:	46bd      	mov	sp, r7
   14050:	b004      	add	sp, #16
   14052:	bd80      	pop	{r7, pc}
   14054:	00016751 	.word	0x00016751

00014058 <CLI_SendWeightData>:

BaseType_t CLI_SendWeightData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14058:	b590      	push	{r4, r7, lr}
   1405a:	b0ad      	sub	sp, #180	; 0xb4
   1405c:	af00      	add	r7, sp, #0
   1405e:	60f8      	str	r0, [r7, #12]
   14060:	60b9      	str	r1, [r7, #8]
   14062:	607a      	str	r2, [r7, #4]
	struct NauPacket nauvar;
	I2cInitializeDriver();
   14064:	4b34      	ldr	r3, [pc, #208]	; (14138 <CLI_SendWeightData+0xe0>)
   14066:	4798      	blx	r3
	ADCchip_Init();
   14068:	4b34      	ldr	r3, [pc, #208]	; (1413c <CLI_SendWeightData+0xe4>)
   1406a:	4798      	blx	r3
	ADC_StartConversion();
   1406c:	4b34      	ldr	r3, [pc, #208]	; (14140 <CLI_SendWeightData+0xe8>)
   1406e:	4798      	blx	r3
	
	
	while ((ADC_ReadReg(PU_CTRL_ADDR)&CR_Msk) != CR_DATA_RDY);
   14070:	46c0      	nop			; (mov r8, r8)
   14072:	2000      	movs	r0, #0
   14074:	4b33      	ldr	r3, [pc, #204]	; (14144 <CLI_SendWeightData+0xec>)
   14076:	4798      	blx	r3
   14078:	0003      	movs	r3, r0
   1407a:	001a      	movs	r2, r3
   1407c:	2320      	movs	r3, #32
   1407e:	4013      	ands	r3, r2
   14080:	2b20      	cmp	r3, #32
   14082:	d1f6      	bne.n	14072 <CLI_SendWeightData+0x1a>
	uint32_t ADC_value=ADC_Read_Conversion_Data();
   14084:	4b30      	ldr	r3, [pc, #192]	; (14148 <CLI_SendWeightData+0xf0>)
   14086:	4798      	blx	r3
   14088:	0003      	movs	r3, r0
   1408a:	22ac      	movs	r2, #172	; 0xac
   1408c:	18ba      	adds	r2, r7, r2
   1408e:	6013      	str	r3, [r2, #0]
	int ADC_Array[2];
	
	//int i32ConversionData = (int)(ADC_value << 8);
	///* Shift the number back right to recover its intended magnitude */
	//i32ConversionData = (i32ConversionData >> 8);
	Value_conversion(ADC_value,ADC_Array);
   14090:	23ac      	movs	r3, #172	; 0xac
   14092:	18fb      	adds	r3, r7, r3
   14094:	681b      	ldr	r3, [r3, #0]
   14096:	2294      	movs	r2, #148	; 0x94
   14098:	18ba      	adds	r2, r7, r2
   1409a:	0011      	movs	r1, r2
   1409c:	0018      	movs	r0, r3
   1409e:	4b2b      	ldr	r3, [pc, #172]	; (1414c <CLI_SendWeightData+0xf4>)
   140a0:	4798      	blx	r3
	
	char help[64];
	//snprintf(help, 64, "input vol = VIN1P - VIN1N = %.2f\r\n",((float)i32ConversionData / 16777216) * (float)(3.14));
	snprintf(help, 64, "input vol = VIN1P - VIN1N = %d\r\n",ADC_Array[0]);
   140a2:	2394      	movs	r3, #148	; 0x94
   140a4:	18fb      	adds	r3, r7, r3
   140a6:	681b      	ldr	r3, [r3, #0]
   140a8:	4a29      	ldr	r2, [pc, #164]	; (14150 <CLI_SendWeightData+0xf8>)
   140aa:	2154      	movs	r1, #84	; 0x54
   140ac:	1878      	adds	r0, r7, r1
   140ae:	2140      	movs	r1, #64	; 0x40
   140b0:	4c28      	ldr	r4, [pc, #160]	; (14154 <CLI_SendWeightData+0xfc>)
   140b2:	47a0      	blx	r4
	
	SerialConsoleWriteString(help);
   140b4:	2354      	movs	r3, #84	; 0x54
   140b6:	18fb      	adds	r3, r7, r3
   140b8:	0018      	movs	r0, r3
   140ba:	4b27      	ldr	r3, [pc, #156]	; (14158 <CLI_SendWeightData+0x100>)
   140bc:	4798      	blx	r3
	nauvar.nau_i = ADC_Array[0];
   140be:	2394      	movs	r3, #148	; 0x94
   140c0:	18fb      	adds	r3, r7, r3
   140c2:	681b      	ldr	r3, [r3, #0]
   140c4:	001a      	movs	r2, r3
   140c6:	239c      	movs	r3, #156	; 0x9c
   140c8:	18fb      	adds	r3, r7, r3
   140ca:	601a      	str	r2, [r3, #0]
	nauvar.nau_f = ADC_Array[1];
   140cc:	2394      	movs	r3, #148	; 0x94
   140ce:	18fb      	adds	r3, r7, r3
   140d0:	685b      	ldr	r3, [r3, #4]
   140d2:	001a      	movs	r2, r3
   140d4:	239c      	movs	r3, #156	; 0x9c
   140d6:	18fb      	adds	r3, r7, r3
   140d8:	605a      	str	r2, [r3, #4]
	
	int error = WifiAddNauDataToQueue(&nauvar);
   140da:	239c      	movs	r3, #156	; 0x9c
   140dc:	18fb      	adds	r3, r7, r3
   140de:	0018      	movs	r0, r3
   140e0:	4b1e      	ldr	r3, [pc, #120]	; (1415c <CLI_SendWeightData+0x104>)
   140e2:	4798      	blx	r3
   140e4:	0003      	movs	r3, r0
   140e6:	22a8      	movs	r2, #168	; 0xa8
   140e8:	18ba      	adds	r2, r7, r2
   140ea:	6013      	str	r3, [r2, #0]
	if (error == pdTRUE) {
   140ec:	23a8      	movs	r3, #168	; 0xa8
   140ee:	18fb      	adds	r3, r7, r3
   140f0:	681b      	ldr	r3, [r3, #0]
   140f2:	2b01      	cmp	r3, #1
   140f4:	d105      	bne.n	14102 <CLI_SendWeightData+0xaa>
		snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Nau Data MQTT Post\r\n");
   140f6:	4a1a      	ldr	r2, [pc, #104]	; (14160 <CLI_SendWeightData+0x108>)
   140f8:	68b9      	ldr	r1, [r7, #8]
   140fa:	68fb      	ldr	r3, [r7, #12]
   140fc:	0018      	movs	r0, r3
   140fe:	4b15      	ldr	r3, [pc, #84]	; (14154 <CLI_SendWeightData+0xfc>)
   14100:	4798      	blx	r3
	}
	gfx_mono_init();
   14102:	4b18      	ldr	r3, [pc, #96]	; (14164 <CLI_SendWeightData+0x10c>)
   14104:	4798      	blx	r3
	uint8_t charge = 100;
   14106:	23a7      	movs	r3, #167	; 0xa7
   14108:	18fb      	adds	r3, r7, r3
   1410a:	2264      	movs	r2, #100	; 0x64
   1410c:	701a      	strb	r2, [r3, #0]
	char charge_char[64];
	sprintf(charge_char, "%d", charge);
   1410e:	23a7      	movs	r3, #167	; 0xa7
   14110:	18fb      	adds	r3, r7, r3
   14112:	781a      	ldrb	r2, [r3, #0]
   14114:	4914      	ldr	r1, [pc, #80]	; (14168 <CLI_SendWeightData+0x110>)
   14116:	2314      	movs	r3, #20
   14118:	18fb      	adds	r3, r7, r3
   1411a:	0018      	movs	r0, r3
   1411c:	4b13      	ldr	r3, [pc, #76]	; (1416c <CLI_SendWeightData+0x114>)
   1411e:	4798      	blx	r3
	gfx_mono_draw_string(charge_char, 0, 8, &sysfont);
   14120:	4b13      	ldr	r3, [pc, #76]	; (14170 <CLI_SendWeightData+0x118>)
   14122:	2214      	movs	r2, #20
   14124:	18b8      	adds	r0, r7, r2
   14126:	2208      	movs	r2, #8
   14128:	2100      	movs	r1, #0
   1412a:	4c12      	ldr	r4, [pc, #72]	; (14174 <CLI_SendWeightData+0x11c>)
   1412c:	47a0      	blx	r4
	return pdFALSE;
   1412e:	2300      	movs	r3, #0
}
   14130:	0018      	movs	r0, r3
   14132:	46bd      	mov	sp, r7
   14134:	b02d      	add	sp, #180	; 0xb4
   14136:	bd90      	pop	{r4, r7, pc}
   14138:	000148f1 	.word	0x000148f1
   1413c:	00015d59 	.word	0x00015d59
   14140:	00015df5 	.word	0x00015df5
   14144:	00015c41 	.word	0x00015c41
   14148:	00015eb1 	.word	0x00015eb1
   1414c:	00015ed5 	.word	0x00015ed5
   14150:	00037e74 	.word	0x00037e74
   14154:	00036699 	.word	0x00036699
   14158:	0001ecd5 	.word	0x0001ecd5
   1415c:	0001841d 	.word	0x0001841d
   14160:	00037e98 	.word	0x00037e98
   14164:	0001287d 	.word	0x0001287d
   14168:	00037eb0 	.word	0x00037eb0
   1416c:	000366fd 	.word	0x000366fd
   14170:	20000000 	.word	0x20000000
   14174:	00012721 	.word	0x00012721

00014178 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14178:	b590      	push	{r4, r7, lr}
   1417a:	b08f      	sub	sp, #60	; 0x3c
   1417c:	af00      	add	r7, sp, #0
   1417e:	60f8      	str	r0, [r7, #12]
   14180:	60b9      	str	r1, [r7, #8]
   14182:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
   14184:	2318      	movs	r3, #24
   14186:	18fb      	adds	r3, r7, r3
   14188:	2200      	movs	r2, #0
   1418a:	701a      	strb	r2, [r3, #0]
   1418c:	2318      	movs	r3, #24
   1418e:	18fb      	adds	r3, r7, r3
   14190:	2200      	movs	r2, #0
   14192:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
   14194:	2318      	movs	r3, #24
   14196:	18fb      	adds	r3, r7, r3
   14198:	2200      	movs	r2, #0
   1419a:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
   1419c:	2318      	movs	r3, #24
   1419e:	18fb      	adds	r3, r7, r3
   141a0:	2200      	movs	r2, #0
   141a2:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
   141a4:	231c      	movs	r3, #28
   141a6:	18fb      	adds	r3, r7, r3
   141a8:	2200      	movs	r2, #0
   141aa:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
   141ac:	231c      	movs	r3, #28
   141ae:	18fb      	adds	r3, r7, r3
   141b0:	2214      	movs	r2, #20
   141b2:	18ba      	adds	r2, r7, r2
   141b4:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
   141b6:	231c      	movs	r3, #28
   141b8:	18fb      	adds	r3, r7, r3
   141ba:	2201      	movs	r2, #1
   141bc:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   141be:	231c      	movs	r3, #28
   141c0:	18fb      	adds	r3, r7, r3
   141c2:	2218      	movs	r2, #24
   141c4:	18ba      	adds	r2, r7, r2
   141c6:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
   141c8:	231c      	movs	r3, #28
   141ca:	18fb      	adds	r3, r7, r3
   141cc:	2201      	movs	r2, #1
   141ce:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   141d0:	4b2c      	ldr	r3, [pc, #176]	; (14284 <CLI_i2cScan+0x10c>)
   141d2:	0018      	movs	r0, r3
   141d4:	4b2c      	ldr	r3, [pc, #176]	; (14288 <CLI_i2cScan+0x110>)
   141d6:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   141d8:	2300      	movs	r3, #0
   141da:	637b      	str	r3, [r7, #52]	; 0x34
   141dc:	e046      	b.n	1426c <CLI_i2cScan+0xf4>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   141de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   141e0:	4a2a      	ldr	r2, [pc, #168]	; (1428c <CLI_i2cScan+0x114>)
   141e2:	482b      	ldr	r0, [pc, #172]	; (14290 <CLI_i2cScan+0x118>)
   141e4:	210f      	movs	r1, #15
   141e6:	4c2b      	ldr	r4, [pc, #172]	; (14294 <CLI_i2cScan+0x11c>)
   141e8:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   141ea:	4b29      	ldr	r3, [pc, #164]	; (14290 <CLI_i2cScan+0x118>)
   141ec:	0018      	movs	r0, r3
   141ee:	4b26      	ldr	r3, [pc, #152]	; (14288 <CLI_i2cScan+0x110>)
   141f0:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   141f2:	2300      	movs	r3, #0
   141f4:	633b      	str	r3, [r7, #48]	; 0x30
   141f6:	e02f      	b.n	14258 <CLI_i2cScan+0xe0>
                {

                    i2cOled.address = (i + j) << 1;
   141f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   141fa:	b2da      	uxtb	r2, r3
   141fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   141fe:	b2db      	uxtb	r3, r3
   14200:	18d3      	adds	r3, r2, r3
   14202:	b2db      	uxtb	r3, r3
   14204:	18db      	adds	r3, r3, r3
   14206:	b2da      	uxtb	r2, r3
   14208:	231c      	movs	r3, #28
   1420a:	18fb      	adds	r3, r7, r3
   1420c:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cWriteDataWait(&i2cOled, 100);
   1420e:	231c      	movs	r3, #28
   14210:	18fb      	adds	r3, r7, r3
   14212:	2164      	movs	r1, #100	; 0x64
   14214:	0018      	movs	r0, r3
   14216:	4b20      	ldr	r3, [pc, #128]	; (14298 <CLI_i2cScan+0x120>)
   14218:	4798      	blx	r3
   1421a:	0003      	movs	r3, r0
   1421c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   1421e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14220:	2b00      	cmp	r3, #0
   14222:	d10c      	bne.n	1423e <CLI_i2cScan+0xc6>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i2cOled.address);
   14224:	231c      	movs	r3, #28
   14226:	18fb      	adds	r3, r7, r3
   14228:	781b      	ldrb	r3, [r3, #0]
   1422a:	4a18      	ldr	r2, [pc, #96]	; (1428c <CLI_i2cScan+0x114>)
   1422c:	4818      	ldr	r0, [pc, #96]	; (14290 <CLI_i2cScan+0x118>)
   1422e:	210f      	movs	r1, #15
   14230:	4c18      	ldr	r4, [pc, #96]	; (14294 <CLI_i2cScan+0x11c>)
   14232:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   14234:	4b16      	ldr	r3, [pc, #88]	; (14290 <CLI_i2cScan+0x118>)
   14236:	0018      	movs	r0, r3
   14238:	4b13      	ldr	r3, [pc, #76]	; (14288 <CLI_i2cScan+0x110>)
   1423a:	4798      	blx	r3
   1423c:	e009      	b.n	14252 <CLI_i2cScan+0xda>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X ");
   1423e:	4b14      	ldr	r3, [pc, #80]	; (14290 <CLI_i2cScan+0x118>)
   14240:	4a16      	ldr	r2, [pc, #88]	; (1429c <CLI_i2cScan+0x124>)
   14242:	8811      	ldrh	r1, [r2, #0]
   14244:	8019      	strh	r1, [r3, #0]
   14246:	7892      	ldrb	r2, [r2, #2]
   14248:	709a      	strb	r2, [r3, #2]
						SerialConsoleWriteString(bufCli);
   1424a:	4b11      	ldr	r3, [pc, #68]	; (14290 <CLI_i2cScan+0x118>)
   1424c:	0018      	movs	r0, r3
   1424e:	4b0e      	ldr	r3, [pc, #56]	; (14288 <CLI_i2cScan+0x110>)
   14250:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   14252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14254:	3301      	adds	r3, #1
   14256:	633b      	str	r3, [r7, #48]	; 0x30
   14258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1425a:	2b0f      	cmp	r3, #15
   1425c:	ddcc      	ble.n	141f8 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   1425e:	4b10      	ldr	r3, [pc, #64]	; (142a0 <CLI_i2cScan+0x128>)
   14260:	0018      	movs	r0, r3
   14262:	4b09      	ldr	r3, [pc, #36]	; (14288 <CLI_i2cScan+0x110>)
   14264:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   14266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14268:	3310      	adds	r3, #16
   1426a:	637b      	str	r3, [r7, #52]	; 0x34
   1426c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1426e:	2b7f      	cmp	r3, #127	; 0x7f
   14270:	ddb5      	ble.n	141de <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   14272:	4b0b      	ldr	r3, [pc, #44]	; (142a0 <CLI_i2cScan+0x128>)
   14274:	0018      	movs	r0, r3
   14276:	4b04      	ldr	r3, [pc, #16]	; (14288 <CLI_i2cScan+0x110>)
   14278:	4798      	blx	r3
			return pdFALSE;
   1427a:	2300      	movs	r3, #0

}
   1427c:	0018      	movs	r0, r3
   1427e:	46bd      	mov	sp, r7
   14280:	b00f      	add	sp, #60	; 0x3c
   14282:	bd90      	pop	{r4, r7, pc}
   14284:	00037eb4 	.word	0x00037eb4
   14288:	0001ecd5 	.word	0x0001ecd5
   1428c:	00037ee8 	.word	0x00037ee8
   14290:	20000504 	.word	0x20000504
   14294:	00036699 	.word	0x00036699
   14298:	00014b1d 	.word	0x00014b1d
   1429c:	00037ef0 	.word	0x00037ef0
   142a0:	00037d5c 	.word	0x00037d5c

000142a4 <vControlHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vControlHandlerTask(void *pvParameters)
{
   142a4:	b580      	push	{r7, lr}
   142a6:	b088      	sub	sp, #32
   142a8:	af00      	add	r7, sp, #0
   142aa:	6078      	str	r0, [r7, #4]
    SerialConsoleWriteString((char *)"ESE516 - Control Init Code\r\n");
   142ac:	4b33      	ldr	r3, [pc, #204]	; (1437c <vControlHandlerTask+0xd8>)
   142ae:	0018      	movs	r0, r3
   142b0:	4b33      	ldr	r3, [pc, #204]	; (14380 <vControlHandlerTask+0xdc>)
   142b2:	4798      	blx	r3

    // Initialize Queues
    xQueueGameBufferIn = xQueueCreate(2, sizeof(struct GameDataPacket));
   142b4:	2200      	movs	r2, #0
   142b6:	2114      	movs	r1, #20
   142b8:	2002      	movs	r0, #2
   142ba:	4b32      	ldr	r3, [pc, #200]	; (14384 <vControlHandlerTask+0xe0>)
   142bc:	4798      	blx	r3
   142be:	0002      	movs	r2, r0
   142c0:	4b31      	ldr	r3, [pc, #196]	; (14388 <vControlHandlerTask+0xe4>)
   142c2:	601a      	str	r2, [r3, #0]
    xQueueRgbColorBuffer = xQueueCreate(2, sizeof(struct RgbColorPacket));
   142c4:	2200      	movs	r2, #0
   142c6:	2103      	movs	r1, #3
   142c8:	2002      	movs	r0, #2
   142ca:	4b2e      	ldr	r3, [pc, #184]	; (14384 <vControlHandlerTask+0xe0>)
   142cc:	4798      	blx	r3
   142ce:	0002      	movs	r2, r0
   142d0:	4b2e      	ldr	r3, [pc, #184]	; (1438c <vControlHandlerTask+0xe8>)
   142d2:	601a      	str	r2, [r3, #0]

    if (xQueueGameBufferIn == NULL || xQueueRgbColorBuffer == NULL) {
   142d4:	4b2c      	ldr	r3, [pc, #176]	; (14388 <vControlHandlerTask+0xe4>)
   142d6:	681b      	ldr	r3, [r3, #0]
   142d8:	2b00      	cmp	r3, #0
   142da:	d003      	beq.n	142e4 <vControlHandlerTask+0x40>
   142dc:	4b2b      	ldr	r3, [pc, #172]	; (1438c <vControlHandlerTask+0xe8>)
   142de:	681b      	ldr	r3, [r3, #0]
   142e0:	2b00      	cmp	r3, #0
   142e2:	d103      	bne.n	142ec <vControlHandlerTask+0x48>
        SerialConsoleWriteString((char *)"ERROR Initializing Control Data queues!\r\n");
   142e4:	4b2a      	ldr	r3, [pc, #168]	; (14390 <vControlHandlerTask+0xec>)
   142e6:	0018      	movs	r0, r3
   142e8:	4b25      	ldr	r3, [pc, #148]	; (14380 <vControlHandlerTask+0xdc>)
   142ea:	4798      	blx	r3
    }
    controlState = CONTROL_WAIT_FOR_GAME;  // Initial state
   142ec:	4b29      	ldr	r3, [pc, #164]	; (14394 <vControlHandlerTask+0xf0>)
   142ee:	2200      	movs	r2, #0
   142f0:	701a      	strb	r2, [r3, #0]

    while (1) {
        switch (controlState) {
   142f2:	4b28      	ldr	r3, [pc, #160]	; (14394 <vControlHandlerTask+0xf0>)
   142f4:	781b      	ldrb	r3, [r3, #0]
   142f6:	2b01      	cmp	r3, #1
   142f8:	d01d      	beq.n	14336 <vControlHandlerTask+0x92>
   142fa:	2b02      	cmp	r3, #2
   142fc:	d035      	beq.n	1436a <vControlHandlerTask+0xc6>
   142fe:	2b00      	cmp	r3, #0
   14300:	d12f      	bne.n	14362 <vControlHandlerTask+0xbe>
            case (CONTROL_WAIT_FOR_GAME): {  // Should set the UI to ignore button presses and should wait until there is a message from the server with a new play.
                struct GameDataPacket gamePacketIn;
                if (pdPASS == xQueueReceive(xQueueGameBufferIn, &gamePacketIn, 0)) {
   14302:	4b21      	ldr	r3, [pc, #132]	; (14388 <vControlHandlerTask+0xe4>)
   14304:	681b      	ldr	r3, [r3, #0]
   14306:	220c      	movs	r2, #12
   14308:	18b9      	adds	r1, r7, r2
   1430a:	2200      	movs	r2, #0
   1430c:	0018      	movs	r0, r3
   1430e:	4b22      	ldr	r3, [pc, #136]	; (14398 <vControlHandlerTask+0xf4>)
   14310:	4798      	blx	r3
   14312:	0003      	movs	r3, r0
   14314:	2b01      	cmp	r3, #1
   14316:	d12a      	bne.n	1436e <vControlHandlerTask+0xca>
                    LogMessage(LOG_DEBUG_LVL, "Control Thread: Consumed game packet!\r\n");
   14318:	4b20      	ldr	r3, [pc, #128]	; (1439c <vControlHandlerTask+0xf8>)
   1431a:	0019      	movs	r1, r3
   1431c:	2001      	movs	r0, #1
   1431e:	4b20      	ldr	r3, [pc, #128]	; (143a0 <vControlHandlerTask+0xfc>)
   14320:	4798      	blx	r3
                    UiOrderShowMoves(&gamePacketIn);
   14322:	230c      	movs	r3, #12
   14324:	18fb      	adds	r3, r7, r3
   14326:	0018      	movs	r0, r3
   14328:	4b1e      	ldr	r3, [pc, #120]	; (143a4 <vControlHandlerTask+0x100>)
   1432a:	4798      	blx	r3
                    controlState = CONTROL_PLAYING_MOVE;
   1432c:	4b19      	ldr	r3, [pc, #100]	; (14394 <vControlHandlerTask+0xf0>)
   1432e:	2201      	movs	r2, #1
   14330:	701a      	strb	r2, [r3, #0]
                }

                break;
   14332:	46c0      	nop			; (mov r8, r8)
   14334:	e01b      	b.n	1436e <vControlHandlerTask+0xca>
            }

            case (CONTROL_PLAYING_MOVE): {  // Should wait until the UI thread has showed the move AND comes back with the play from the user. Should go back to CONTROL_WAIT_FOR_GAME
                // after posting the game to MQTT
                if (UiPlayIsDone() == true) {
   14336:	4b1c      	ldr	r3, [pc, #112]	; (143a8 <vControlHandlerTask+0x104>)
   14338:	4798      	blx	r3
   1433a:	1e03      	subs	r3, r0, #0
   1433c:	d019      	beq.n	14372 <vControlHandlerTask+0xce>
                    // Send back local game packet
                    if (pdTRUE != WifiAddGameDataToQueue(UiGetGamePacketOut())) {
   1433e:	4b1b      	ldr	r3, [pc, #108]	; (143ac <vControlHandlerTask+0x108>)
   14340:	4798      	blx	r3
   14342:	0003      	movs	r3, r0
   14344:	0018      	movs	r0, r3
   14346:	4b1a      	ldr	r3, [pc, #104]	; (143b0 <vControlHandlerTask+0x10c>)
   14348:	4798      	blx	r3
   1434a:	0003      	movs	r3, r0
   1434c:	2b01      	cmp	r3, #1
   1434e:	d004      	beq.n	1435a <vControlHandlerTask+0xb6>
                        LogMessage(LOG_DEBUG_LVL, "Control Thread: Could not send game packet!\r\n");
   14350:	4b18      	ldr	r3, [pc, #96]	; (143b4 <vControlHandlerTask+0x110>)
   14352:	0019      	movs	r1, r3
   14354:	2001      	movs	r0, #1
   14356:	4b12      	ldr	r3, [pc, #72]	; (143a0 <vControlHandlerTask+0xfc>)
   14358:	4798      	blx	r3
                    }
                    controlState = CONTROL_WAIT_FOR_GAME;
   1435a:	4b0e      	ldr	r3, [pc, #56]	; (14394 <vControlHandlerTask+0xf0>)
   1435c:	2200      	movs	r2, #0
   1435e:	701a      	strb	r2, [r3, #0]
                }

                break;
   14360:	e007      	b.n	14372 <vControlHandlerTask+0xce>
            case (CONTROL_END_GAME): {
                break;
            }

            default:
                controlState = CONTROL_WAIT_FOR_GAME;
   14362:	4b0c      	ldr	r3, [pc, #48]	; (14394 <vControlHandlerTask+0xf0>)
   14364:	2200      	movs	r2, #0
   14366:	701a      	strb	r2, [r3, #0]
                break;
   14368:	e004      	b.n	14374 <vControlHandlerTask+0xd0>
                break;
   1436a:	46c0      	nop			; (mov r8, r8)
   1436c:	e002      	b.n	14374 <vControlHandlerTask+0xd0>
                break;
   1436e:	46c0      	nop			; (mov r8, r8)
   14370:	e000      	b.n	14374 <vControlHandlerTask+0xd0>
                break;
   14372:	46c0      	nop			; (mov r8, r8)
        }
        vTaskDelay(40);
   14374:	2028      	movs	r0, #40	; 0x28
   14376:	4b10      	ldr	r3, [pc, #64]	; (143b8 <vControlHandlerTask+0x114>)
   14378:	4798      	blx	r3
        switch (controlState) {
   1437a:	e7ba      	b.n	142f2 <vControlHandlerTask+0x4e>
   1437c:	00037fc4 	.word	0x00037fc4
   14380:	0001ecd5 	.word	0x0001ecd5
   14384:	0001b375 	.word	0x0001b375
   14388:	20000600 	.word	0x20000600
   1438c:	20000604 	.word	0x20000604
   14390:	00037fe4 	.word	0x00037fe4
   14394:	200047e4 	.word	0x200047e4
   14398:	0001bed5 	.word	0x0001bed5
   1439c:	00038010 	.word	0x00038010
   143a0:	0001edc1 	.word	0x0001edc1
   143a4:	00016885 	.word	0x00016885
   143a8:	000168c1 	.word	0x000168c1
   143ac:	000168d5 	.word	0x000168d5
   143b0:	000183c5 	.word	0x000183c5
   143b4:	00038038 	.word	0x00038038
   143b8:	0001d081 	.word	0x0001d081

000143bc <ControlAddGameData>:
 * @return		Returns pdTrue if data can be added to queue, 0 if queue is full
 * @note

 */
int ControlAddGameData(struct GameDataPacket *gameIn)
{
   143bc:	b590      	push	{r4, r7, lr}
   143be:	b085      	sub	sp, #20
   143c0:	af00      	add	r7, sp, #0
   143c2:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBufferIn, gameIn, (TickType_t)10);
   143c4:	4b06      	ldr	r3, [pc, #24]	; (143e0 <ControlAddGameData+0x24>)
   143c6:	6818      	ldr	r0, [r3, #0]
   143c8:	6879      	ldr	r1, [r7, #4]
   143ca:	2300      	movs	r3, #0
   143cc:	220a      	movs	r2, #10
   143ce:	4c05      	ldr	r4, [pc, #20]	; (143e4 <ControlAddGameData+0x28>)
   143d0:	47a0      	blx	r4
   143d2:	0003      	movs	r3, r0
   143d4:	60fb      	str	r3, [r7, #12]
    return error;
   143d6:	68fb      	ldr	r3, [r7, #12]
}
   143d8:	0018      	movs	r0, r3
   143da:	46bd      	mov	sp, r7
   143dc:	b005      	add	sp, #20
   143de:	bd90      	pop	{r4, r7, pc}
   143e0:	20000600 	.word	0x20000600
   143e4:	0001b61d 	.word	0x0001b61d

000143e8 <DistanceSensorGetDistance>:
 * @fn			int32_t DistanceSensorGetDistance (uint16_t *distance)
 * @brief		Gets the distance from the distance sensor.
 * @note			Returns 0 if successful. -1 if an error occurred
 */
int32_t DistanceSensorGetDistance(uint16_t *distance, const TickType_t xMaxBlockTime)
{
   143e8:	b580      	push	{r7, lr}
   143ea:	b084      	sub	sp, #16
   143ec:	af00      	add	r7, sp, #0
   143ee:	6078      	str	r0, [r7, #4]
   143f0:	6039      	str	r1, [r7, #0]
    int error = ERROR_NONE;
   143f2:	2300      	movs	r3, #0
   143f4:	60fb      	str	r3, [r7, #12]

    // 1. Get MUTEX. DistanceSensorGetMutex. If we cant get it, goto
    error = DistanceSensorGetMutex(WAIT_I2C_LINE_MS);
   143f6:	2396      	movs	r3, #150	; 0x96
   143f8:	005b      	lsls	r3, r3, #1
   143fa:	0018      	movs	r0, r3
   143fc:	4b25      	ldr	r3, [pc, #148]	; (14494 <DistanceSensorGetDistance+0xac>)
   143fe:	4798      	blx	r3
   14400:	0003      	movs	r3, r0
   14402:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exitf;
   14404:	68fb      	ldr	r3, [r7, #12]
   14406:	2b00      	cmp	r3, #0
   14408:	d139      	bne.n	1447e <DistanceSensorGetDistance+0x96>

    //---2. Initiate sending data. First populate TX with the distance command. Use usart_write_buffer_job to transmit 1 character
    distTx = DISTANCE_US_100_CMD_READ_DISTANCE;
   1440a:	4b23      	ldr	r3, [pc, #140]	; (14498 <DistanceSensorGetDistance+0xb0>)
   1440c:	2255      	movs	r2, #85	; 0x55
   1440e:	701a      	strb	r2, [r3, #0]
    if (STATUS_OK != usart_write_buffer_job(&usart_instance_dist, (uint8_t *)&distTx, 1)) {
   14410:	4921      	ldr	r1, [pc, #132]	; (14498 <DistanceSensorGetDistance+0xb0>)
   14412:	4b22      	ldr	r3, [pc, #136]	; (1449c <DistanceSensorGetDistance+0xb4>)
   14414:	2201      	movs	r2, #1
   14416:	0018      	movs	r0, r3
   14418:	4b21      	ldr	r3, [pc, #132]	; (144a0 <DistanceSensorGetDistance+0xb8>)
   1441a:	4798      	blx	r3
   1441c:	1e03      	subs	r3, r0, #0
   1441e:	d130      	bne.n	14482 <DistanceSensorGetDistance+0x9a>
        goto exitf;
    }

    // 3. )Wait until the TX finished. TX should release the binary semaphore - so wait until semaphore
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   14420:	4b20      	ldr	r3, [pc, #128]	; (144a4 <DistanceSensorGetDistance+0xbc>)
   14422:	681b      	ldr	r3, [r3, #0]
   14424:	683a      	ldr	r2, [r7, #0]
   14426:	0011      	movs	r1, r2
   14428:	0018      	movs	r0, r3
   1442a:	4b1f      	ldr	r3, [pc, #124]	; (144a8 <DistanceSensorGetDistance+0xc0>)
   1442c:	4798      	blx	r3
   1442e:	0003      	movs	r3, r0
   14430:	2b01      	cmp	r3, #1
   14432:	d003      	beq.n	1443c <DistanceSensorGetDistance+0x54>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */

    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14434:	2303      	movs	r3, #3
   14436:	425b      	negs	r3, r3
   14438:	60fb      	str	r3, [r7, #12]
        goto exitf;
   1443a:	e023      	b.n	14484 <DistanceSensorGetDistance+0x9c>
    }

    // 4. Initiate an rx job - usart_read_buffer_job - to read two characters. Read into variable latestRxDistance
    usart_read_buffer_job(&usart_instance_dist, (uint8_t *)&latestRxDistance, 2);  // Kicks off constant reading of characters
   1443c:	491b      	ldr	r1, [pc, #108]	; (144ac <DistanceSensorGetDistance+0xc4>)
   1443e:	4b17      	ldr	r3, [pc, #92]	; (1449c <DistanceSensorGetDistance+0xb4>)
   14440:	2202      	movs	r2, #2
   14442:	0018      	movs	r0, r3
   14444:	4b1a      	ldr	r3, [pc, #104]	; (144b0 <DistanceSensorGetDistance+0xc8>)
   14446:	4798      	blx	r3

    //---7. Wait for notification
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   14448:	4b16      	ldr	r3, [pc, #88]	; (144a4 <DistanceSensorGetDistance+0xbc>)
   1444a:	681b      	ldr	r3, [r3, #0]
   1444c:	683a      	ldr	r2, [r7, #0]
   1444e:	0011      	movs	r1, r2
   14450:	0018      	movs	r0, r3
   14452:	4b15      	ldr	r3, [pc, #84]	; (144a8 <DistanceSensorGetDistance+0xc0>)
   14454:	4798      	blx	r3
   14456:	0003      	movs	r3, r0
   14458:	2b01      	cmp	r3, #1
   1445a:	d10c      	bne.n	14476 <DistanceSensorGetDistance+0x8e>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        *distance = (latestRxDistance[0] << 8) + latestRxDistance[1];
   1445c:	4b13      	ldr	r3, [pc, #76]	; (144ac <DistanceSensorGetDistance+0xc4>)
   1445e:	781b      	ldrb	r3, [r3, #0]
   14460:	b29b      	uxth	r3, r3
   14462:	021b      	lsls	r3, r3, #8
   14464:	b29a      	uxth	r2, r3
   14466:	4b11      	ldr	r3, [pc, #68]	; (144ac <DistanceSensorGetDistance+0xc4>)
   14468:	785b      	ldrb	r3, [r3, #1]
   1446a:	b29b      	uxth	r3, r3
   1446c:	18d3      	adds	r3, r2, r3
   1446e:	b29a      	uxth	r2, r3
   14470:	687b      	ldr	r3, [r7, #4]
   14472:	801a      	strh	r2, [r3, #0]
   14474:	e006      	b.n	14484 <DistanceSensorGetDistance+0x9c>
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14476:	2303      	movs	r3, #3
   14478:	425b      	negs	r3, r3
   1447a:	60fb      	str	r3, [r7, #12]
        goto exitf;
   1447c:	e002      	b.n	14484 <DistanceSensorGetDistance+0x9c>
    if (ERROR_NONE != error) goto exitf;
   1447e:	46c0      	nop			; (mov r8, r8)
   14480:	e000      	b.n	14484 <DistanceSensorGetDistance+0x9c>
        goto exitf;
   14482:	46c0      	nop			; (mov r8, r8)
    }

exitf:
    // Release mutex and return error
    DistanceSensorFreeMutex();
   14484:	4b0b      	ldr	r3, [pc, #44]	; (144b4 <DistanceSensorGetDistance+0xcc>)
   14486:	4798      	blx	r3

    return error;
   14488:	68fb      	ldr	r3, [r7, #12]
}
   1448a:	0018      	movs	r0, r3
   1448c:	46bd      	mov	sp, r7
   1448e:	b004      	add	sp, #16
   14490:	bd80      	pop	{r7, pc}
   14492:	46c0      	nop			; (mov r8, r8)
   14494:	000144f1 	.word	0x000144f1
   14498:	200047ea 	.word	0x200047ea
   1449c:	200047f4 	.word	0x200047f4
   144a0:	00029ead 	.word	0x00029ead
   144a4:	200047ec 	.word	0x200047ec
   144a8:	0001c32d 	.word	0x0001c32d
   144ac:	200047e8 	.word	0x200047e8
   144b0:	00029ef5 	.word	0x00029ef5
   144b4:	000144b9 	.word	0x000144b9

000144b8 <DistanceSensorFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorFreeMutex(void)
{
   144b8:	b590      	push	{r4, r7, lr}
   144ba:	b083      	sub	sp, #12
   144bc:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   144be:	2300      	movs	r3, #0
   144c0:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorDistanceMutexHandle) != pdTRUE) {
   144c2:	4b09      	ldr	r3, [pc, #36]	; (144e8 <DistanceSensorFreeMutex+0x30>)
   144c4:	6818      	ldr	r0, [r3, #0]
   144c6:	2300      	movs	r3, #0
   144c8:	2200      	movs	r2, #0
   144ca:	2100      	movs	r1, #0
   144cc:	4c07      	ldr	r4, [pc, #28]	; (144ec <DistanceSensorFreeMutex+0x34>)
   144ce:	47a0      	blx	r4
   144d0:	0003      	movs	r3, r0
   144d2:	2b01      	cmp	r3, #1
   144d4:	d002      	beq.n	144dc <DistanceSensorFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   144d6:	2314      	movs	r3, #20
   144d8:	425b      	negs	r3, r3
   144da:	607b      	str	r3, [r7, #4]
    }
    return error;
   144dc:	687b      	ldr	r3, [r7, #4]
}
   144de:	0018      	movs	r0, r3
   144e0:	46bd      	mov	sp, r7
   144e2:	b003      	add	sp, #12
   144e4:	bd90      	pop	{r4, r7, pc}
   144e6:	46c0      	nop			; (mov r8, r8)
   144e8:	200047f0 	.word	0x200047f0
   144ec:	0001b61d 	.word	0x0001b61d

000144f0 <DistanceSensorGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorGetMutex(TickType_t waitTime)
{
   144f0:	b580      	push	{r7, lr}
   144f2:	b084      	sub	sp, #16
   144f4:	af00      	add	r7, sp, #0
   144f6:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   144f8:	2300      	movs	r3, #0
   144fa:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorDistanceMutexHandle, waitTime) != pdTRUE) {
   144fc:	4b08      	ldr	r3, [pc, #32]	; (14520 <DistanceSensorGetMutex+0x30>)
   144fe:	681b      	ldr	r3, [r3, #0]
   14500:	687a      	ldr	r2, [r7, #4]
   14502:	0011      	movs	r1, r2
   14504:	0018      	movs	r0, r3
   14506:	4b07      	ldr	r3, [pc, #28]	; (14524 <DistanceSensorGetMutex+0x34>)
   14508:	4798      	blx	r3
   1450a:	0003      	movs	r3, r0
   1450c:	2b01      	cmp	r3, #1
   1450e:	d002      	beq.n	14516 <DistanceSensorGetMutex+0x26>
        error = ERROR_NOT_READY;
   14510:	231d      	movs	r3, #29
   14512:	425b      	negs	r3, r3
   14514:	60fb      	str	r3, [r7, #12]
    }
    return error;
   14516:	68fb      	ldr	r3, [r7, #12]
   14518:	0018      	movs	r0, r3
   1451a:	46bd      	mov	sp, r7
   1451c:	b004      	add	sp, #16
   1451e:	bd80      	pop	{r7, pc}
   14520:	200047f0 	.word	0x200047f0
   14524:	0001c32d 	.word	0x0001c32d

00014528 <system_interrupt_enable>:
{
   14528:	b580      	push	{r7, lr}
   1452a:	b082      	sub	sp, #8
   1452c:	af00      	add	r7, sp, #0
   1452e:	0002      	movs	r2, r0
   14530:	1dfb      	adds	r3, r7, #7
   14532:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   14534:	4b06      	ldr	r3, [pc, #24]	; (14550 <system_interrupt_enable+0x28>)
   14536:	1dfa      	adds	r2, r7, #7
   14538:	7812      	ldrb	r2, [r2, #0]
   1453a:	0011      	movs	r1, r2
   1453c:	221f      	movs	r2, #31
   1453e:	400a      	ands	r2, r1
   14540:	2101      	movs	r1, #1
   14542:	4091      	lsls	r1, r2
   14544:	000a      	movs	r2, r1
   14546:	601a      	str	r2, [r3, #0]
}
   14548:	46c0      	nop			; (mov r8, r8)
   1454a:	46bd      	mov	sp, r7
   1454c:	b002      	add	sp, #8
   1454e:	bd80      	pop	{r7, pc}
   14550:	e000e100 	.word	0xe000e100

00014554 <i2c_master_is_syncing>:
{
   14554:	b580      	push	{r7, lr}
   14556:	b084      	sub	sp, #16
   14558:	af00      	add	r7, sp, #0
   1455a:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   1455c:	687b      	ldr	r3, [r7, #4]
   1455e:	681b      	ldr	r3, [r3, #0]
   14560:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   14562:	68fb      	ldr	r3, [r7, #12]
   14564:	69db      	ldr	r3, [r3, #28]
   14566:	2207      	movs	r2, #7
   14568:	4013      	ands	r3, r2
   1456a:	1e5a      	subs	r2, r3, #1
   1456c:	4193      	sbcs	r3, r2
   1456e:	b2db      	uxtb	r3, r3
}
   14570:	0018      	movs	r0, r3
   14572:	46bd      	mov	sp, r7
   14574:	b004      	add	sp, #16
   14576:	bd80      	pop	{r7, pc}

00014578 <_i2c_master_wait_for_sync>:
{
   14578:	b580      	push	{r7, lr}
   1457a:	b082      	sub	sp, #8
   1457c:	af00      	add	r7, sp, #0
   1457e:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   14580:	46c0      	nop			; (mov r8, r8)
   14582:	687b      	ldr	r3, [r7, #4]
   14584:	0018      	movs	r0, r3
   14586:	4b04      	ldr	r3, [pc, #16]	; (14598 <_i2c_master_wait_for_sync+0x20>)
   14588:	4798      	blx	r3
   1458a:	1e03      	subs	r3, r0, #0
   1458c:	d1f9      	bne.n	14582 <_i2c_master_wait_for_sync+0xa>
}
   1458e:	46c0      	nop			; (mov r8, r8)
   14590:	46bd      	mov	sp, r7
   14592:	b002      	add	sp, #8
   14594:	bd80      	pop	{r7, pc}
   14596:	46c0      	nop			; (mov r8, r8)
   14598:	00014555 	.word	0x00014555

0001459c <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   1459c:	b580      	push	{r7, lr}
   1459e:	b082      	sub	sp, #8
   145a0:	af00      	add	r7, sp, #0
   145a2:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   145a4:	687b      	ldr	r3, [r7, #4]
   145a6:	2264      	movs	r2, #100	; 0x64
   145a8:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   145aa:	687b      	ldr	r3, [r7, #4]
   145ac:	4a1b      	ldr	r2, [pc, #108]	; (1461c <i2c_master_get_config_defaults+0x80>)
   145ae:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   145b0:	687b      	ldr	r3, [r7, #4]
   145b2:	2200      	movs	r2, #0
   145b4:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   145b6:	687b      	ldr	r3, [r7, #4]
   145b8:	2200      	movs	r2, #0
   145ba:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   145bc:	687b      	ldr	r3, [r7, #4]
   145be:	2200      	movs	r2, #0
   145c0:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   145c2:	687b      	ldr	r3, [r7, #4]
   145c4:	2280      	movs	r2, #128	; 0x80
   145c6:	0392      	lsls	r2, r2, #14
   145c8:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   145ca:	687b      	ldr	r3, [r7, #4]
   145cc:	2201      	movs	r2, #1
   145ce:	4252      	negs	r2, r2
   145d0:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   145d2:	687b      	ldr	r3, [r7, #4]
   145d4:	2201      	movs	r2, #1
   145d6:	4252      	negs	r2, r2
   145d8:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   145da:	687b      	ldr	r3, [r7, #4]
   145dc:	2200      	movs	r2, #0
   145de:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   145e0:	687b      	ldr	r3, [r7, #4]
   145e2:	2200      	movs	r2, #0
   145e4:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   145e6:	687b      	ldr	r3, [r7, #4]
   145e8:	2224      	movs	r2, #36	; 0x24
   145ea:	2100      	movs	r1, #0
   145ec:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   145ee:	687b      	ldr	r3, [r7, #4]
   145f0:	2200      	movs	r2, #0
   145f2:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   145f4:	687b      	ldr	r3, [r7, #4]
   145f6:	222c      	movs	r2, #44	; 0x2c
   145f8:	2100      	movs	r1, #0
   145fa:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   145fc:	687b      	ldr	r3, [r7, #4]
   145fe:	222d      	movs	r2, #45	; 0x2d
   14600:	2100      	movs	r1, #0
   14602:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   14604:	687b      	ldr	r3, [r7, #4]
   14606:	222e      	movs	r2, #46	; 0x2e
   14608:	2100      	movs	r1, #0
   1460a:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   1460c:	687b      	ldr	r3, [r7, #4]
   1460e:	22d7      	movs	r2, #215	; 0xd7
   14610:	861a      	strh	r2, [r3, #48]	; 0x30
}
   14612:	46c0      	nop			; (mov r8, r8)
   14614:	46bd      	mov	sp, r7
   14616:	b002      	add	sp, #8
   14618:	bd80      	pop	{r7, pc}
   1461a:	46c0      	nop			; (mov r8, r8)
   1461c:	00000d48 	.word	0x00000d48

00014620 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   14620:	b580      	push	{r7, lr}
   14622:	b084      	sub	sp, #16
   14624:	af00      	add	r7, sp, #0
   14626:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14628:	687b      	ldr	r3, [r7, #4]
   1462a:	681b      	ldr	r3, [r3, #0]
   1462c:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   1462e:	2300      	movs	r3, #0
   14630:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   14632:	687b      	ldr	r3, [r7, #4]
   14634:	0018      	movs	r0, r3
   14636:	4b14      	ldr	r3, [pc, #80]	; (14688 <i2c_master_enable+0x68>)
   14638:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   1463a:	68bb      	ldr	r3, [r7, #8]
   1463c:	681b      	ldr	r3, [r3, #0]
   1463e:	2202      	movs	r2, #2
   14640:	431a      	orrs	r2, r3
   14642:	68bb      	ldr	r3, [r7, #8]
   14644:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   14646:	687b      	ldr	r3, [r7, #4]
   14648:	681b      	ldr	r3, [r3, #0]
   1464a:	0018      	movs	r0, r3
   1464c:	4b0f      	ldr	r3, [pc, #60]	; (1468c <i2c_master_enable+0x6c>)
   1464e:	4798      	blx	r3
   14650:	0003      	movs	r3, r0
   14652:	0018      	movs	r0, r3
   14654:	4b0e      	ldr	r3, [pc, #56]	; (14690 <i2c_master_enable+0x70>)
   14656:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   14658:	e00c      	b.n	14674 <i2c_master_enable+0x54>
		timeout_counter++;
   1465a:	68fb      	ldr	r3, [r7, #12]
   1465c:	3301      	adds	r3, #1
   1465e:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   14660:	687b      	ldr	r3, [r7, #4]
   14662:	88db      	ldrh	r3, [r3, #6]
   14664:	001a      	movs	r2, r3
   14666:	68fb      	ldr	r3, [r7, #12]
   14668:	429a      	cmp	r2, r3
   1466a:	d803      	bhi.n	14674 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   1466c:	68bb      	ldr	r3, [r7, #8]
   1466e:	2210      	movs	r2, #16
   14670:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   14672:	e006      	b.n	14682 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   14674:	68bb      	ldr	r3, [r7, #8]
   14676:	8b5b      	ldrh	r3, [r3, #26]
   14678:	b29b      	uxth	r3, r3
   1467a:	001a      	movs	r2, r3
   1467c:	2310      	movs	r3, #16
   1467e:	4013      	ands	r3, r2
   14680:	d0eb      	beq.n	1465a <i2c_master_enable+0x3a>
		}
	}
}
   14682:	46bd      	mov	sp, r7
   14684:	b004      	add	sp, #16
   14686:	bd80      	pop	{r7, pc}
   14688:	00014579 	.word	0x00014579
   1468c:	0002864d 	.word	0x0002864d
   14690:	00014529 	.word	0x00014529

00014694 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   14694:	b580      	push	{r7, lr}
   14696:	b082      	sub	sp, #8
   14698:	af00      	add	r7, sp, #0
   1469a:	6078      	str	r0, [r7, #4]
   1469c:	000a      	movs	r2, r1
   1469e:	1cfb      	adds	r3, r7, #3
   146a0:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   146a2:	687b      	ldr	r3, [r7, #4]
   146a4:	7e5b      	ldrb	r3, [r3, #25]
   146a6:	b2db      	uxtb	r3, r3
   146a8:	b25a      	sxtb	r2, r3
   146aa:	1cfb      	adds	r3, r7, #3
   146ac:	781b      	ldrb	r3, [r3, #0]
   146ae:	2101      	movs	r1, #1
   146b0:	4099      	lsls	r1, r3
   146b2:	000b      	movs	r3, r1
   146b4:	b25b      	sxtb	r3, r3
   146b6:	4313      	orrs	r3, r2
   146b8:	b25b      	sxtb	r3, r3
   146ba:	b2da      	uxtb	r2, r3
   146bc:	687b      	ldr	r3, [r7, #4]
   146be:	765a      	strb	r2, [r3, #25]
}
   146c0:	46c0      	nop			; (mov r8, r8)
   146c2:	46bd      	mov	sp, r7
   146c4:	b002      	add	sp, #8
   146c6:	bd80      	pop	{r7, pc}

000146c8 <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   146c8:	b590      	push	{r4, r7, lr}
   146ca:	b091      	sub	sp, #68	; 0x44
   146cc:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   146ce:	2300      	movs	r3, #0
   146d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   146d2:	233a      	movs	r3, #58	; 0x3a
   146d4:	18fb      	adds	r3, r7, r3
   146d6:	2200      	movs	r2, #0
   146d8:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   146da:	1d3b      	adds	r3, r7, #4
   146dc:	0018      	movs	r0, r3
   146de:	4b21      	ldr	r3, [pc, #132]	; (14764 <I2cDriverConfigureSensorBus+0x9c>)
   146e0:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   146e2:	1d3b      	adds	r3, r7, #4
   146e4:	4a20      	ldr	r2, [pc, #128]	; (14768 <I2cDriverConfigureSensorBus+0xa0>)
   146e6:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   146e8:	1d3b      	adds	r3, r7, #4
   146ea:	4a20      	ldr	r2, [pc, #128]	; (1476c <I2cDriverConfigureSensorBus+0xa4>)
   146ec:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   146ee:	1d3b      	adds	r3, r7, #4
   146f0:	22fa      	movs	r2, #250	; 0xfa
   146f2:	0092      	lsls	r2, r2, #2
   146f4:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   146f6:	233b      	movs	r3, #59	; 0x3b
   146f8:	18fb      	adds	r3, r7, r3
   146fa:	2203      	movs	r2, #3
   146fc:	701a      	strb	r2, [r3, #0]
   146fe:	e01e      	b.n	1473e <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   14700:	233a      	movs	r3, #58	; 0x3a
   14702:	18fc      	adds	r4, r7, r3
   14704:	1d3a      	adds	r2, r7, #4
   14706:	491a      	ldr	r1, [pc, #104]	; (14770 <I2cDriverConfigureSensorBus+0xa8>)
   14708:	4b1a      	ldr	r3, [pc, #104]	; (14774 <I2cDriverConfigureSensorBus+0xac>)
   1470a:	0018      	movs	r0, r3
   1470c:	4b1a      	ldr	r3, [pc, #104]	; (14778 <I2cDriverConfigureSensorBus+0xb0>)
   1470e:	4798      	blx	r3
   14710:	0003      	movs	r3, r0
   14712:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   14714:	233a      	movs	r3, #58	; 0x3a
   14716:	18fb      	adds	r3, r7, r3
   14718:	781b      	ldrb	r3, [r3, #0]
   1471a:	2b00      	cmp	r3, #0
   1471c:	d104      	bne.n	14728 <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   1471e:	233a      	movs	r3, #58	; 0x3a
   14720:	18fb      	adds	r3, r7, r3
   14722:	781b      	ldrb	r3, [r3, #0]
   14724:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   14726:	e00f      	b.n	14748 <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   14728:	4b12      	ldr	r3, [pc, #72]	; (14774 <I2cDriverConfigureSensorBus+0xac>)
   1472a:	0018      	movs	r0, r3
   1472c:	4b13      	ldr	r3, [pc, #76]	; (1477c <I2cDriverConfigureSensorBus+0xb4>)
   1472e:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   14730:	233b      	movs	r3, #59	; 0x3b
   14732:	18fb      	adds	r3, r7, r3
   14734:	781a      	ldrb	r2, [r3, #0]
   14736:	233b      	movs	r3, #59	; 0x3b
   14738:	18fb      	adds	r3, r7, r3
   1473a:	3a01      	subs	r2, #1
   1473c:	701a      	strb	r2, [r3, #0]
   1473e:	233b      	movs	r3, #59	; 0x3b
   14740:	18fb      	adds	r3, r7, r3
   14742:	781b      	ldrb	r3, [r3, #0]
   14744:	2b00      	cmp	r3, #0
   14746:	d1db      	bne.n	14700 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   14748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1474a:	2b00      	cmp	r3, #0
   1474c:	d104      	bne.n	14758 <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   1474e:	4b09      	ldr	r3, [pc, #36]	; (14774 <I2cDriverConfigureSensorBus+0xac>)
   14750:	0018      	movs	r0, r3
   14752:	4b0b      	ldr	r3, [pc, #44]	; (14780 <I2cDriverConfigureSensorBus+0xb8>)
   14754:	4798      	blx	r3
   14756:	e000      	b.n	1475a <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   14758:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   1475a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   1475c:	0018      	movs	r0, r3
   1475e:	46bd      	mov	sp, r7
   14760:	b011      	add	sp, #68	; 0x44
   14762:	bd90      	pop	{r4, r7, pc}
   14764:	0001459d 	.word	0x0001459d
   14768:	00080002 	.word	0x00080002
   1476c:	00090002 	.word	0x00090002
   14770:	42000800 	.word	0x42000800
   14774:	2000482c 	.word	0x2000482c
   14778:	00018a0d 	.word	0x00018a0d
   1477c:	00018b41 	.word	0x00018b41
   14780:	00014621 	.word	0x00014621

00014784 <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   14784:	b580      	push	{r7, lr}
   14786:	b084      	sub	sp, #16
   14788:	af00      	add	r7, sp, #0
   1478a:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   1478c:	4b0e      	ldr	r3, [pc, #56]	; (147c8 <I2cSensorsTxComplete+0x44>)
   1478e:	2200      	movs	r2, #0
   14790:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   14792:	4b0d      	ldr	r3, [pc, #52]	; (147c8 <I2cSensorsTxComplete+0x44>)
   14794:	2201      	movs	r2, #1
   14796:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14798:	2300      	movs	r3, #0
   1479a:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   1479c:	4b0b      	ldr	r3, [pc, #44]	; (147cc <I2cSensorsTxComplete+0x48>)
   1479e:	681b      	ldr	r3, [r3, #0]
   147a0:	220c      	movs	r2, #12
   147a2:	18ba      	adds	r2, r7, r2
   147a4:	0011      	movs	r1, r2
   147a6:	0018      	movs	r0, r3
   147a8:	4b09      	ldr	r3, [pc, #36]	; (147d0 <I2cSensorsTxComplete+0x4c>)
   147aa:	4798      	blx	r3
    sensorTransmitError = false;
   147ac:	4b09      	ldr	r3, [pc, #36]	; (147d4 <I2cSensorsTxComplete+0x50>)
   147ae:	2200      	movs	r2, #0
   147b0:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   147b2:	68fb      	ldr	r3, [r7, #12]
   147b4:	2b00      	cmp	r3, #0
   147b6:	d003      	beq.n	147c0 <I2cSensorsTxComplete+0x3c>
   147b8:	4b07      	ldr	r3, [pc, #28]	; (147d8 <I2cSensorsTxComplete+0x54>)
   147ba:	2280      	movs	r2, #128	; 0x80
   147bc:	0552      	lsls	r2, r2, #21
   147be:	601a      	str	r2, [r3, #0]
}
   147c0:	46c0      	nop			; (mov r8, r8)
   147c2:	46bd      	mov	sp, r7
   147c4:	b004      	add	sp, #16
   147c6:	bd80      	pop	{r7, pc}
   147c8:	2000060c 	.word	0x2000060c
   147cc:	20004854 	.word	0x20004854
   147d0:	0001bca5 	.word	0x0001bca5
   147d4:	20000608 	.word	0x20000608
   147d8:	e000ed04 	.word	0xe000ed04

000147dc <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   147dc:	b580      	push	{r7, lr}
   147de:	b084      	sub	sp, #16
   147e0:	af00      	add	r7, sp, #0
   147e2:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   147e4:	4b0e      	ldr	r3, [pc, #56]	; (14820 <I2cSensorsRxComplete+0x44>)
   147e6:	2200      	movs	r2, #0
   147e8:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   147ea:	4b0d      	ldr	r3, [pc, #52]	; (14820 <I2cSensorsRxComplete+0x44>)
   147ec:	2201      	movs	r2, #1
   147ee:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   147f0:	2300      	movs	r3, #0
   147f2:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   147f4:	4b0b      	ldr	r3, [pc, #44]	; (14824 <I2cSensorsRxComplete+0x48>)
   147f6:	681b      	ldr	r3, [r3, #0]
   147f8:	220c      	movs	r2, #12
   147fa:	18ba      	adds	r2, r7, r2
   147fc:	0011      	movs	r1, r2
   147fe:	0018      	movs	r0, r3
   14800:	4b09      	ldr	r3, [pc, #36]	; (14828 <I2cSensorsRxComplete+0x4c>)
   14802:	4798      	blx	r3
    sensorTransmitError = false;
   14804:	4b09      	ldr	r3, [pc, #36]	; (1482c <I2cSensorsRxComplete+0x50>)
   14806:	2200      	movs	r2, #0
   14808:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   1480a:	68fb      	ldr	r3, [r7, #12]
   1480c:	2b00      	cmp	r3, #0
   1480e:	d003      	beq.n	14818 <I2cSensorsRxComplete+0x3c>
   14810:	4b07      	ldr	r3, [pc, #28]	; (14830 <I2cSensorsRxComplete+0x54>)
   14812:	2280      	movs	r2, #128	; 0x80
   14814:	0552      	lsls	r2, r2, #21
   14816:	601a      	str	r2, [r3, #0]
}
   14818:	46c0      	nop			; (mov r8, r8)
   1481a:	46bd      	mov	sp, r7
   1481c:	b004      	add	sp, #16
   1481e:	bd80      	pop	{r7, pc}
   14820:	2000060c 	.word	0x2000060c
   14824:	20004854 	.word	0x20004854
   14828:	0001bca5 	.word	0x0001bca5
   1482c:	20000608 	.word	0x20000608
   14830:	e000ed04 	.word	0xe000ed04

00014834 <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   14834:	b580      	push	{r7, lr}
   14836:	b084      	sub	sp, #16
   14838:	af00      	add	r7, sp, #0
   1483a:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   1483c:	4b0e      	ldr	r3, [pc, #56]	; (14878 <I2cSensorsError+0x44>)
   1483e:	2200      	movs	r2, #0
   14840:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   14842:	4b0d      	ldr	r3, [pc, #52]	; (14878 <I2cSensorsError+0x44>)
   14844:	2201      	movs	r2, #1
   14846:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14848:	2300      	movs	r3, #0
   1484a:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   1484c:	4b0b      	ldr	r3, [pc, #44]	; (1487c <I2cSensorsError+0x48>)
   1484e:	681b      	ldr	r3, [r3, #0]
   14850:	220c      	movs	r2, #12
   14852:	18ba      	adds	r2, r7, r2
   14854:	0011      	movs	r1, r2
   14856:	0018      	movs	r0, r3
   14858:	4b09      	ldr	r3, [pc, #36]	; (14880 <I2cSensorsError+0x4c>)
   1485a:	4798      	blx	r3
    sensorTransmitError = true;
   1485c:	4b09      	ldr	r3, [pc, #36]	; (14884 <I2cSensorsError+0x50>)
   1485e:	2201      	movs	r2, #1
   14860:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14862:	68fb      	ldr	r3, [r7, #12]
   14864:	2b00      	cmp	r3, #0
   14866:	d003      	beq.n	14870 <I2cSensorsError+0x3c>
   14868:	4b07      	ldr	r3, [pc, #28]	; (14888 <I2cSensorsError+0x54>)
   1486a:	2280      	movs	r2, #128	; 0x80
   1486c:	0552      	lsls	r2, r2, #21
   1486e:	601a      	str	r2, [r3, #0]
}
   14870:	46c0      	nop			; (mov r8, r8)
   14872:	46bd      	mov	sp, r7
   14874:	b004      	add	sp, #16
   14876:	bd80      	pop	{r7, pc}
   14878:	2000060c 	.word	0x2000060c
   1487c:	20004854 	.word	0x20004854
   14880:	0001bca5 	.word	0x0001bca5
   14884:	20000608 	.word	0x20000608
   14888:	e000ed04 	.word	0xe000ed04

0001488c <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   1488c:	b580      	push	{r7, lr}
   1488e:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   14890:	4911      	ldr	r1, [pc, #68]	; (148d8 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   14892:	4b12      	ldr	r3, [pc, #72]	; (148dc <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14894:	2200      	movs	r2, #0
   14896:	0018      	movs	r0, r3
   14898:	4b11      	ldr	r3, [pc, #68]	; (148e0 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   1489a:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   1489c:	4b0f      	ldr	r3, [pc, #60]	; (148dc <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1489e:	2100      	movs	r1, #0
   148a0:	0018      	movs	r0, r3
   148a2:	4b10      	ldr	r3, [pc, #64]	; (148e4 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   148a4:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   148a6:	4910      	ldr	r1, [pc, #64]	; (148e8 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   148a8:	4b0c      	ldr	r3, [pc, #48]	; (148dc <I2cDriverRegisterSensorBusCallbacks+0x50>)
   148aa:	2201      	movs	r2, #1
   148ac:	0018      	movs	r0, r3
   148ae:	4b0c      	ldr	r3, [pc, #48]	; (148e0 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   148b0:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   148b2:	4b0a      	ldr	r3, [pc, #40]	; (148dc <I2cDriverRegisterSensorBusCallbacks+0x50>)
   148b4:	2101      	movs	r1, #1
   148b6:	0018      	movs	r0, r3
   148b8:	4b0a      	ldr	r3, [pc, #40]	; (148e4 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   148ba:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   148bc:	490b      	ldr	r1, [pc, #44]	; (148ec <I2cDriverRegisterSensorBusCallbacks+0x60>)
   148be:	4b07      	ldr	r3, [pc, #28]	; (148dc <I2cDriverRegisterSensorBusCallbacks+0x50>)
   148c0:	2202      	movs	r2, #2
   148c2:	0018      	movs	r0, r3
   148c4:	4b06      	ldr	r3, [pc, #24]	; (148e0 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   148c6:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   148c8:	4b04      	ldr	r3, [pc, #16]	; (148dc <I2cDriverRegisterSensorBusCallbacks+0x50>)
   148ca:	2102      	movs	r1, #2
   148cc:	0018      	movs	r0, r3
   148ce:	4b05      	ldr	r3, [pc, #20]	; (148e4 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   148d0:	4798      	blx	r3
}
   148d2:	46c0      	nop			; (mov r8, r8)
   148d4:	46bd      	mov	sp, r7
   148d6:	bd80      	pop	{r7, pc}
   148d8:	00014785 	.word	0x00014785
   148dc:	2000482c 	.word	0x2000482c
   148e0:	000132b1 	.word	0x000132b1
   148e4:	00014695 	.word	0x00014695
   148e8:	000147dd 	.word	0x000147dd
   148ec:	00014835 	.word	0x00014835

000148f0 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   148f0:	b580      	push	{r7, lr}
   148f2:	b082      	sub	sp, #8
   148f4:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   148f6:	2300      	movs	r3, #0
   148f8:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   148fa:	4b14      	ldr	r3, [pc, #80]	; (1494c <I2cInitializeDriver+0x5c>)
   148fc:	4798      	blx	r3
   148fe:	0003      	movs	r3, r0
   14900:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   14902:	687b      	ldr	r3, [r7, #4]
   14904:	2b00      	cmp	r3, #0
   14906:	d11a      	bne.n	1493e <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   14908:	4b11      	ldr	r3, [pc, #68]	; (14950 <I2cInitializeDriver+0x60>)
   1490a:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   1490c:	2001      	movs	r0, #1
   1490e:	4b11      	ldr	r3, [pc, #68]	; (14954 <I2cInitializeDriver+0x64>)
   14910:	4798      	blx	r3
   14912:	0002      	movs	r2, r0
   14914:	4b10      	ldr	r3, [pc, #64]	; (14958 <I2cInitializeDriver+0x68>)
   14916:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   14918:	2203      	movs	r2, #3
   1491a:	2100      	movs	r1, #0
   1491c:	2001      	movs	r0, #1
   1491e:	4b0f      	ldr	r3, [pc, #60]	; (1495c <I2cInitializeDriver+0x6c>)
   14920:	4798      	blx	r3
   14922:	0002      	movs	r2, r0
   14924:	4b0e      	ldr	r3, [pc, #56]	; (14960 <I2cInitializeDriver+0x70>)
   14926:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   14928:	4b0b      	ldr	r3, [pc, #44]	; (14958 <I2cInitializeDriver+0x68>)
   1492a:	681b      	ldr	r3, [r3, #0]
   1492c:	2b00      	cmp	r3, #0
   1492e:	d003      	beq.n	14938 <I2cInitializeDriver+0x48>
   14930:	4b0b      	ldr	r3, [pc, #44]	; (14960 <I2cInitializeDriver+0x70>)
   14932:	681b      	ldr	r3, [r3, #0]
   14934:	2b00      	cmp	r3, #0
   14936:	d103      	bne.n	14940 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   14938:	2306      	movs	r3, #6
   1493a:	607b      	str	r3, [r7, #4]
        goto exit;
   1493c:	e000      	b.n	14940 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   1493e:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14940:	687b      	ldr	r3, [r7, #4]
}
   14942:	0018      	movs	r0, r3
   14944:	46bd      	mov	sp, r7
   14946:	b002      	add	sp, #8
   14948:	bd80      	pop	{r7, pc}
   1494a:	46c0      	nop			; (mov r8, r8)
   1494c:	000146c9 	.word	0x000146c9
   14950:	0001488d 	.word	0x0001488d
   14954:	0001b5dd 	.word	0x0001b5dd
   14958:	20004828 	.word	0x20004828
   1495c:	0001b375 	.word	0x0001b375
   14960:	20004854 	.word	0x20004854

00014964 <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   14964:	b590      	push	{r4, r7, lr}
   14966:	b085      	sub	sp, #20
   14968:	af00      	add	r7, sp, #0
   1496a:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   1496c:	2300      	movs	r3, #0
   1496e:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   14970:	687b      	ldr	r3, [r7, #4]
   14972:	2b00      	cmp	r3, #0
   14974:	d003      	beq.n	1497e <I2cWriteData+0x1a>
   14976:	687b      	ldr	r3, [r7, #4]
   14978:	685b      	ldr	r3, [r3, #4]
   1497a:	2b00      	cmp	r3, #0
   1497c:	d103      	bne.n	14986 <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   1497e:	2308      	movs	r3, #8
   14980:	425b      	negs	r3, r3
   14982:	60fb      	str	r3, [r7, #12]
        goto exit;
   14984:	e01f      	b.n	149c6 <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   14986:	687b      	ldr	r3, [r7, #4]
   14988:	781b      	ldrb	r3, [r3, #0]
   1498a:	b29a      	uxth	r2, r3
   1498c:	4b10      	ldr	r3, [pc, #64]	; (149d0 <I2cWriteData+0x6c>)
   1498e:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   14990:	687b      	ldr	r3, [r7, #4]
   14992:	685a      	ldr	r2, [r3, #4]
   14994:	4b0e      	ldr	r3, [pc, #56]	; (149d0 <I2cWriteData+0x6c>)
   14996:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   14998:	687b      	ldr	r3, [r7, #4]
   1499a:	89da      	ldrh	r2, [r3, #14]
   1499c:	4b0c      	ldr	r3, [pc, #48]	; (149d0 <I2cWriteData+0x6c>)
   1499e:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   149a0:	230b      	movs	r3, #11
   149a2:	18fc      	adds	r4, r7, r3
   149a4:	4a0a      	ldr	r2, [pc, #40]	; (149d0 <I2cWriteData+0x6c>)
   149a6:	4b0b      	ldr	r3, [pc, #44]	; (149d4 <I2cWriteData+0x70>)
   149a8:	0011      	movs	r1, r2
   149aa:	0018      	movs	r0, r3
   149ac:	4b0a      	ldr	r3, [pc, #40]	; (149d8 <I2cWriteData+0x74>)
   149ae:	4798      	blx	r3
   149b0:	0003      	movs	r3, r0
   149b2:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   149b4:	230b      	movs	r3, #11
   149b6:	18fb      	adds	r3, r7, r3
   149b8:	781b      	ldrb	r3, [r3, #0]
   149ba:	2b00      	cmp	r3, #0
   149bc:	d003      	beq.n	149c6 <I2cWriteData+0x62>
        error = ERROR_IO;
   149be:	2306      	movs	r3, #6
   149c0:	425b      	negs	r3, r3
   149c2:	60fb      	str	r3, [r7, #12]
        goto exit;
   149c4:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   149c6:	68fb      	ldr	r3, [r7, #12]
}
   149c8:	0018      	movs	r0, r3
   149ca:	46bd      	mov	sp, r7
   149cc:	b005      	add	sp, #20
   149ce:	bd90      	pop	{r4, r7, pc}
   149d0:	20004858 	.word	0x20004858
   149d4:	2000482c 	.word	0x2000482c
   149d8:	00013535 	.word	0x00013535

000149dc <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   149dc:	b590      	push	{r4, r7, lr}
   149de:	b085      	sub	sp, #20
   149e0:	af00      	add	r7, sp, #0
   149e2:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   149e4:	2300      	movs	r3, #0
   149e6:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   149e8:	687b      	ldr	r3, [r7, #4]
   149ea:	2b00      	cmp	r3, #0
   149ec:	d003      	beq.n	149f6 <I2cReadData+0x1a>
   149ee:	687b      	ldr	r3, [r7, #4]
   149f0:	685b      	ldr	r3, [r3, #4]
   149f2:	2b00      	cmp	r3, #0
   149f4:	d103      	bne.n	149fe <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   149f6:	2308      	movs	r3, #8
   149f8:	425b      	negs	r3, r3
   149fa:	60fb      	str	r3, [r7, #12]
        goto exit;
   149fc:	e01f      	b.n	14a3e <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   149fe:	687b      	ldr	r3, [r7, #4]
   14a00:	781b      	ldrb	r3, [r3, #0]
   14a02:	b29a      	uxth	r2, r3
   14a04:	4b10      	ldr	r3, [pc, #64]	; (14a48 <I2cReadData+0x6c>)
   14a06:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   14a08:	687b      	ldr	r3, [r7, #4]
   14a0a:	689a      	ldr	r2, [r3, #8]
   14a0c:	4b0e      	ldr	r3, [pc, #56]	; (14a48 <I2cReadData+0x6c>)
   14a0e:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   14a10:	687b      	ldr	r3, [r7, #4]
   14a12:	899a      	ldrh	r2, [r3, #12]
   14a14:	4b0c      	ldr	r3, [pc, #48]	; (14a48 <I2cReadData+0x6c>)
   14a16:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   14a18:	230b      	movs	r3, #11
   14a1a:	18fc      	adds	r4, r7, r3
   14a1c:	4a0a      	ldr	r2, [pc, #40]	; (14a48 <I2cReadData+0x6c>)
   14a1e:	4b0b      	ldr	r3, [pc, #44]	; (14a4c <I2cReadData+0x70>)
   14a20:	0011      	movs	r1, r2
   14a22:	0018      	movs	r0, r3
   14a24:	4b0a      	ldr	r3, [pc, #40]	; (14a50 <I2cReadData+0x74>)
   14a26:	4798      	blx	r3
   14a28:	0003      	movs	r3, r0
   14a2a:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   14a2c:	230b      	movs	r3, #11
   14a2e:	18fb      	adds	r3, r7, r3
   14a30:	781b      	ldrb	r3, [r3, #0]
   14a32:	2b00      	cmp	r3, #0
   14a34:	d003      	beq.n	14a3e <I2cReadData+0x62>
        error = ERROR_IO;
   14a36:	2306      	movs	r3, #6
   14a38:	425b      	negs	r3, r3
   14a3a:	60fb      	str	r3, [r7, #12]
        goto exit;
   14a3c:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14a3e:	68fb      	ldr	r3, [r7, #12]
}
   14a40:	0018      	movs	r0, r3
   14a42:	46bd      	mov	sp, r7
   14a44:	b005      	add	sp, #20
   14a46:	bd90      	pop	{r4, r7, pc}
   14a48:	20004858 	.word	0x20004858
   14a4c:	2000482c 	.word	0x2000482c
   14a50:	00013451 	.word	0x00013451

00014a54 <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   14a54:	b590      	push	{r4, r7, lr}
   14a56:	b083      	sub	sp, #12
   14a58:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   14a5a:	2300      	movs	r3, #0
   14a5c:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   14a5e:	4b09      	ldr	r3, [pc, #36]	; (14a84 <I2cFreeMutex+0x30>)
   14a60:	6818      	ldr	r0, [r3, #0]
   14a62:	2300      	movs	r3, #0
   14a64:	2200      	movs	r2, #0
   14a66:	2100      	movs	r1, #0
   14a68:	4c07      	ldr	r4, [pc, #28]	; (14a88 <I2cFreeMutex+0x34>)
   14a6a:	47a0      	blx	r4
   14a6c:	0003      	movs	r3, r0
   14a6e:	2b01      	cmp	r3, #1
   14a70:	d002      	beq.n	14a78 <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   14a72:	2314      	movs	r3, #20
   14a74:	425b      	negs	r3, r3
   14a76:	607b      	str	r3, [r7, #4]
    }
    return error;
   14a78:	687b      	ldr	r3, [r7, #4]
}
   14a7a:	0018      	movs	r0, r3
   14a7c:	46bd      	mov	sp, r7
   14a7e:	b003      	add	sp, #12
   14a80:	bd90      	pop	{r4, r7, pc}
   14a82:	46c0      	nop			; (mov r8, r8)
   14a84:	20004828 	.word	0x20004828
   14a88:	0001b61d 	.word	0x0001b61d

00014a8c <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   14a8c:	b580      	push	{r7, lr}
   14a8e:	b084      	sub	sp, #16
   14a90:	af00      	add	r7, sp, #0
   14a92:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14a94:	2300      	movs	r3, #0
   14a96:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   14a98:	4b08      	ldr	r3, [pc, #32]	; (14abc <I2cGetMutex+0x30>)
   14a9a:	681b      	ldr	r3, [r3, #0]
   14a9c:	687a      	ldr	r2, [r7, #4]
   14a9e:	0011      	movs	r1, r2
   14aa0:	0018      	movs	r0, r3
   14aa2:	4b07      	ldr	r3, [pc, #28]	; (14ac0 <I2cGetMutex+0x34>)
   14aa4:	4798      	blx	r3
   14aa6:	0003      	movs	r3, r0
   14aa8:	2b01      	cmp	r3, #1
   14aaa:	d002      	beq.n	14ab2 <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   14aac:	231d      	movs	r3, #29
   14aae:	425b      	negs	r3, r3
   14ab0:	60fb      	str	r3, [r7, #12]
    }
    return error;
   14ab2:	68fb      	ldr	r3, [r7, #12]
}
   14ab4:	0018      	movs	r0, r3
   14ab6:	46bd      	mov	sp, r7
   14ab8:	b004      	add	sp, #16
   14aba:	bd80      	pop	{r7, pc}
   14abc:	20004828 	.word	0x20004828
   14ac0:	0001c32d 	.word	0x0001c32d

00014ac4 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   14ac4:	b580      	push	{r7, lr}
   14ac6:	b084      	sub	sp, #16
   14ac8:	af00      	add	r7, sp, #0
   14aca:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14acc:	2300      	movs	r3, #0
   14ace:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   14ad0:	4b04      	ldr	r3, [pc, #16]	; (14ae4 <I2cGetSemaphoreHandle+0x20>)
   14ad2:	681a      	ldr	r2, [r3, #0]
   14ad4:	687b      	ldr	r3, [r7, #4]
   14ad6:	601a      	str	r2, [r3, #0]
    return error;
   14ad8:	68fb      	ldr	r3, [r7, #12]
}
   14ada:	0018      	movs	r0, r3
   14adc:	46bd      	mov	sp, r7
   14ade:	b004      	add	sp, #16
   14ae0:	bd80      	pop	{r7, pc}
   14ae2:	46c0      	nop			; (mov r8, r8)
   14ae4:	20004854 	.word	0x20004854

00014ae8 <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   14ae8:	b580      	push	{r7, lr}
   14aea:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   14aec:	4b02      	ldr	r3, [pc, #8]	; (14af8 <I2cGetTaskErrorStatus+0x10>)
   14aee:	781b      	ldrb	r3, [r3, #0]
}
   14af0:	0018      	movs	r0, r3
   14af2:	46bd      	mov	sp, r7
   14af4:	bd80      	pop	{r7, pc}
   14af6:	46c0      	nop			; (mov r8, r8)
   14af8:	20000608 	.word	0x20000608

00014afc <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   14afc:	b580      	push	{r7, lr}
   14afe:	b082      	sub	sp, #8
   14b00:	af00      	add	r7, sp, #0
   14b02:	0002      	movs	r2, r0
   14b04:	1dfb      	adds	r3, r7, #7
   14b06:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   14b08:	4b03      	ldr	r3, [pc, #12]	; (14b18 <I2cSetTaskErrorStatus+0x1c>)
   14b0a:	1dfa      	adds	r2, r7, #7
   14b0c:	7812      	ldrb	r2, [r2, #0]
   14b0e:	701a      	strb	r2, [r3, #0]
}
   14b10:	46c0      	nop			; (mov r8, r8)
   14b12:	46bd      	mov	sp, r7
   14b14:	b002      	add	sp, #8
   14b16:	bd80      	pop	{r7, pc}
   14b18:	20000608 	.word	0x20000608

00014b1c <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   14b1c:	b580      	push	{r7, lr}
   14b1e:	b084      	sub	sp, #16
   14b20:	af00      	add	r7, sp, #0
   14b22:	6078      	str	r0, [r7, #4]
   14b24:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   14b26:	2300      	movs	r3, #0
   14b28:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   14b2a:	2300      	movs	r3, #0
   14b2c:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   14b2e:	2396      	movs	r3, #150	; 0x96
   14b30:	005b      	lsls	r3, r3, #1
   14b32:	0018      	movs	r0, r3
   14b34:	4b28      	ldr	r3, [pc, #160]	; (14bd8 <I2cWriteDataWait+0xbc>)
   14b36:	4798      	blx	r3
   14b38:	0003      	movs	r3, r0
   14b3a:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   14b3c:	68fb      	ldr	r3, [r7, #12]
   14b3e:	2b00      	cmp	r3, #0
   14b40:	d138      	bne.n	14bb4 <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   14b42:	2308      	movs	r3, #8
   14b44:	18fb      	adds	r3, r7, r3
   14b46:	0018      	movs	r0, r3
   14b48:	4b24      	ldr	r3, [pc, #144]	; (14bdc <I2cWriteDataWait+0xc0>)
   14b4a:	4798      	blx	r3
   14b4c:	0003      	movs	r3, r0
   14b4e:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   14b50:	68fb      	ldr	r3, [r7, #12]
   14b52:	2b00      	cmp	r3, #0
   14b54:	d130      	bne.n	14bb8 <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   14b56:	687b      	ldr	r3, [r7, #4]
   14b58:	0018      	movs	r0, r3
   14b5a:	4b21      	ldr	r3, [pc, #132]	; (14be0 <I2cWriteDataWait+0xc4>)
   14b5c:	4798      	blx	r3
   14b5e:	0003      	movs	r3, r0
   14b60:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   14b62:	68fb      	ldr	r3, [r7, #12]
   14b64:	2b00      	cmp	r3, #0
   14b66:	d12a      	bne.n	14bbe <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14b68:	68bb      	ldr	r3, [r7, #8]
   14b6a:	683a      	ldr	r2, [r7, #0]
   14b6c:	0011      	movs	r1, r2
   14b6e:	0018      	movs	r0, r3
   14b70:	4b1c      	ldr	r3, [pc, #112]	; (14be4 <I2cWriteDataWait+0xc8>)
   14b72:	4798      	blx	r3
   14b74:	0003      	movs	r3, r0
   14b76:	2b01      	cmp	r3, #1
   14b78:	d111      	bne.n	14b9e <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14b7a:	4b1b      	ldr	r3, [pc, #108]	; (14be8 <I2cWriteDataWait+0xcc>)
   14b7c:	4798      	blx	r3
   14b7e:	1e03      	subs	r3, r0, #0
   14b80:	d011      	beq.n	14ba6 <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   14b82:	2000      	movs	r0, #0
   14b84:	4b19      	ldr	r3, [pc, #100]	; (14bec <I2cWriteDataWait+0xd0>)
   14b86:	4798      	blx	r3
            if (error != ERROR_NONE) {
   14b88:	68fb      	ldr	r3, [r7, #12]
   14b8a:	2b00      	cmp	r3, #0
   14b8c:	d003      	beq.n	14b96 <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   14b8e:	2321      	movs	r3, #33	; 0x21
   14b90:	425b      	negs	r3, r3
   14b92:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   14b94:	e014      	b.n	14bc0 <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   14b96:	2303      	movs	r3, #3
   14b98:	425b      	negs	r3, r3
   14b9a:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   14b9c:	e010      	b.n	14bc0 <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14b9e:	2303      	movs	r3, #3
   14ba0:	425b      	negs	r3, r3
   14ba2:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   14ba4:	e00c      	b.n	14bc0 <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   14ba6:	4b12      	ldr	r3, [pc, #72]	; (14bf0 <I2cWriteDataWait+0xd4>)
   14ba8:	4798      	blx	r3
   14baa:	0002      	movs	r2, r0
   14bac:	68fb      	ldr	r3, [r7, #12]
   14bae:	4313      	orrs	r3, r2
   14bb0:	60fb      	str	r3, [r7, #12]
   14bb2:	e002      	b.n	14bba <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   14bb4:	46c0      	nop			; (mov r8, r8)
   14bb6:	e000      	b.n	14bba <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   14bb8:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   14bba:	68fb      	ldr	r3, [r7, #12]
   14bbc:	e007      	b.n	14bce <I2cWriteDataWait+0xb2>
        goto exitError0;
   14bbe:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   14bc0:	4b0b      	ldr	r3, [pc, #44]	; (14bf0 <I2cWriteDataWait+0xd4>)
   14bc2:	4798      	blx	r3
   14bc4:	0002      	movs	r2, r0
   14bc6:	68fb      	ldr	r3, [r7, #12]
   14bc8:	4313      	orrs	r3, r2
   14bca:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   14bcc:	68fb      	ldr	r3, [r7, #12]
}
   14bce:	0018      	movs	r0, r3
   14bd0:	46bd      	mov	sp, r7
   14bd2:	b004      	add	sp, #16
   14bd4:	bd80      	pop	{r7, pc}
   14bd6:	46c0      	nop			; (mov r8, r8)
   14bd8:	00014a8d 	.word	0x00014a8d
   14bdc:	00014ac5 	.word	0x00014ac5
   14be0:	00014965 	.word	0x00014965
   14be4:	0001c32d 	.word	0x0001c32d
   14be8:	00014ae9 	.word	0x00014ae9
   14bec:	00014afd 	.word	0x00014afd
   14bf0:	00014a55 	.word	0x00014a55

00014bf4 <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   14bf4:	b580      	push	{r7, lr}
   14bf6:	b086      	sub	sp, #24
   14bf8:	af00      	add	r7, sp, #0
   14bfa:	60f8      	str	r0, [r7, #12]
   14bfc:	60b9      	str	r1, [r7, #8]
   14bfe:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   14c00:	2300      	movs	r3, #0
   14c02:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   14c04:	2300      	movs	r3, #0
   14c06:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   14c08:	2396      	movs	r3, #150	; 0x96
   14c0a:	005b      	lsls	r3, r3, #1
   14c0c:	0018      	movs	r0, r3
   14c0e:	4b35      	ldr	r3, [pc, #212]	; (14ce4 <I2cReadDataWait+0xf0>)
   14c10:	4798      	blx	r3
   14c12:	0003      	movs	r3, r0
   14c14:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   14c16:	697b      	ldr	r3, [r7, #20]
   14c18:	2b00      	cmp	r3, #0
   14c1a:	d155      	bne.n	14cc8 <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   14c1c:	2310      	movs	r3, #16
   14c1e:	18fb      	adds	r3, r7, r3
   14c20:	0018      	movs	r0, r3
   14c22:	4b31      	ldr	r3, [pc, #196]	; (14ce8 <I2cReadDataWait+0xf4>)
   14c24:	4798      	blx	r3
   14c26:	0003      	movs	r3, r0
   14c28:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   14c2a:	697b      	ldr	r3, [r7, #20]
   14c2c:	2b00      	cmp	r3, #0
   14c2e:	d14d      	bne.n	14ccc <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   14c30:	68fb      	ldr	r3, [r7, #12]
   14c32:	0018      	movs	r0, r3
   14c34:	4b2d      	ldr	r3, [pc, #180]	; (14cec <I2cReadDataWait+0xf8>)
   14c36:	4798      	blx	r3
   14c38:	0003      	movs	r3, r0
   14c3a:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14c3c:	697b      	ldr	r3, [r7, #20]
   14c3e:	2b00      	cmp	r3, #0
   14c40:	d147      	bne.n	14cd2 <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14c42:	693b      	ldr	r3, [r7, #16]
   14c44:	687a      	ldr	r2, [r7, #4]
   14c46:	0011      	movs	r1, r2
   14c48:	0018      	movs	r0, r3
   14c4a:	4b29      	ldr	r3, [pc, #164]	; (14cf0 <I2cReadDataWait+0xfc>)
   14c4c:	4798      	blx	r3
   14c4e:	0003      	movs	r3, r0
   14c50:	2b01      	cmp	r3, #1
   14c52:	d118      	bne.n	14c86 <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14c54:	4b27      	ldr	r3, [pc, #156]	; (14cf4 <I2cReadDataWait+0x100>)
   14c56:	4798      	blx	r3
   14c58:	1e03      	subs	r3, r0, #0
   14c5a:	d006      	beq.n	14c6a <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
   14c5c:	2000      	movs	r0, #0
   14c5e:	4b26      	ldr	r3, [pc, #152]	; (14cf8 <I2cReadDataWait+0x104>)
   14c60:	4798      	blx	r3
            error = ERROR_ABORTED;
   14c62:	2303      	movs	r3, #3
   14c64:	425b      	negs	r3, r3
   14c66:	617b      	str	r3, [r7, #20]
            goto exitError0;
   14c68:	e034      	b.n	14cd4 <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
   14c6a:	68bb      	ldr	r3, [r7, #8]
   14c6c:	0018      	movs	r0, r3
   14c6e:	4b23      	ldr	r3, [pc, #140]	; (14cfc <I2cReadDataWait+0x108>)
   14c70:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
   14c72:	68fb      	ldr	r3, [r7, #12]
   14c74:	0018      	movs	r0, r3
   14c76:	4b22      	ldr	r3, [pc, #136]	; (14d00 <I2cReadDataWait+0x10c>)
   14c78:	4798      	blx	r3
   14c7a:	0003      	movs	r3, r0
   14c7c:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14c7e:	697b      	ldr	r3, [r7, #20]
   14c80:	2b00      	cmp	r3, #0
   14c82:	d004      	beq.n	14c8e <I2cReadDataWait+0x9a>
        goto exitError0;
   14c84:	e026      	b.n	14cd4 <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
   14c86:	2303      	movs	r3, #3
   14c88:	425b      	negs	r3, r3
   14c8a:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14c8c:	e022      	b.n	14cd4 <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14c8e:	693b      	ldr	r3, [r7, #16]
   14c90:	687a      	ldr	r2, [r7, #4]
   14c92:	0011      	movs	r1, r2
   14c94:	0018      	movs	r0, r3
   14c96:	4b16      	ldr	r3, [pc, #88]	; (14cf0 <I2cReadDataWait+0xfc>)
   14c98:	4798      	blx	r3
   14c9a:	0003      	movs	r3, r0
   14c9c:	2b01      	cmp	r3, #1
   14c9e:	d10a      	bne.n	14cb6 <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14ca0:	4b14      	ldr	r3, [pc, #80]	; (14cf4 <I2cReadDataWait+0x100>)
   14ca2:	4798      	blx	r3
   14ca4:	1e03      	subs	r3, r0, #0
   14ca6:	d00a      	beq.n	14cbe <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
   14ca8:	2000      	movs	r0, #0
   14caa:	4b13      	ldr	r3, [pc, #76]	; (14cf8 <I2cReadDataWait+0x104>)
   14cac:	4798      	blx	r3
            error = ERROR_ABORTED;
   14cae:	2303      	movs	r3, #3
   14cb0:	425b      	negs	r3, r3
   14cb2:	617b      	str	r3, [r7, #20]
            goto exitError0;
   14cb4:	e00e      	b.n	14cd4 <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14cb6:	2303      	movs	r3, #3
   14cb8:	425b      	negs	r3, r3
   14cba:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14cbc:	e00a      	b.n	14cd4 <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   14cbe:	4b11      	ldr	r3, [pc, #68]	; (14d04 <I2cReadDataWait+0x110>)
   14cc0:	4798      	blx	r3
   14cc2:	0003      	movs	r3, r0
   14cc4:	617b      	str	r3, [r7, #20]
   14cc6:	e002      	b.n	14cce <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   14cc8:	46c0      	nop			; (mov r8, r8)
   14cca:	e000      	b.n	14cce <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   14ccc:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   14cce:	697b      	ldr	r3, [r7, #20]
   14cd0:	e003      	b.n	14cda <I2cReadDataWait+0xe6>
        goto exitError0;
   14cd2:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   14cd4:	4b0b      	ldr	r3, [pc, #44]	; (14d04 <I2cReadDataWait+0x110>)
   14cd6:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   14cd8:	697b      	ldr	r3, [r7, #20]
}
   14cda:	0018      	movs	r0, r3
   14cdc:	46bd      	mov	sp, r7
   14cde:	b006      	add	sp, #24
   14ce0:	bd80      	pop	{r7, pc}
   14ce2:	46c0      	nop			; (mov r8, r8)
   14ce4:	00014a8d 	.word	0x00014a8d
   14ce8:	00014ac5 	.word	0x00014ac5
   14cec:	00014965 	.word	0x00014965
   14cf0:	0001c32d 	.word	0x0001c32d
   14cf4:	00014ae9 	.word	0x00014ae9
   14cf8:	00014afd 	.word	0x00014afd
   14cfc:	0001d081 	.word	0x0001d081
   14d00:	000149dd 	.word	0x000149dd
   14d04:	00014a55 	.word	0x00014a55

00014d08 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
   14d08:	b5b0      	push	{r4, r5, r7, lr}
   14d0a:	b086      	sub	sp, #24
   14d0c:	af00      	add	r7, sp, #0
   14d0e:	60f8      	str	r0, [r7, #12]
   14d10:	0008      	movs	r0, r1
   14d12:	607a      	str	r2, [r7, #4]
   14d14:	0019      	movs	r1, r3
   14d16:	230b      	movs	r3, #11
   14d18:	18fb      	adds	r3, r7, r3
   14d1a:	1c02      	adds	r2, r0, #0
   14d1c:	701a      	strb	r2, [r3, #0]
   14d1e:	2308      	movs	r3, #8
   14d20:	18fb      	adds	r3, r7, r3
   14d22:	1c0a      	adds	r2, r1, #0
   14d24:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   14d26:	68fb      	ldr	r3, [r7, #12]
   14d28:	685c      	ldr	r4, [r3, #4]
   14d2a:	68fb      	ldr	r3, [r7, #12]
   14d2c:	6898      	ldr	r0, [r3, #8]
   14d2e:	2308      	movs	r3, #8
   14d30:	18fb      	adds	r3, r7, r3
   14d32:	881d      	ldrh	r5, [r3, #0]
   14d34:	687a      	ldr	r2, [r7, #4]
   14d36:	230b      	movs	r3, #11
   14d38:	18fb      	adds	r3, r7, r3
   14d3a:	7819      	ldrb	r1, [r3, #0]
   14d3c:	002b      	movs	r3, r5
   14d3e:	47a0      	blx	r4
   14d40:	0003      	movs	r3, r0
   14d42:	617b      	str	r3, [r7, #20]

  return ret;
   14d44:	697b      	ldr	r3, [r7, #20]
}
   14d46:	0018      	movs	r0, r3
   14d48:	46bd      	mov	sp, r7
   14d4a:	b006      	add	sp, #24
   14d4c:	bdb0      	pop	{r4, r5, r7, pc}

00014d4e <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
   14d4e:	b5b0      	push	{r4, r5, r7, lr}
   14d50:	b086      	sub	sp, #24
   14d52:	af00      	add	r7, sp, #0
   14d54:	60f8      	str	r0, [r7, #12]
   14d56:	0008      	movs	r0, r1
   14d58:	607a      	str	r2, [r7, #4]
   14d5a:	0019      	movs	r1, r3
   14d5c:	230b      	movs	r3, #11
   14d5e:	18fb      	adds	r3, r7, r3
   14d60:	1c02      	adds	r2, r0, #0
   14d62:	701a      	strb	r2, [r3, #0]
   14d64:	2308      	movs	r3, #8
   14d66:	18fb      	adds	r3, r7, r3
   14d68:	1c0a      	adds	r2, r1, #0
   14d6a:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   14d6c:	68fb      	ldr	r3, [r7, #12]
   14d6e:	681c      	ldr	r4, [r3, #0]
   14d70:	68fb      	ldr	r3, [r7, #12]
   14d72:	6898      	ldr	r0, [r3, #8]
   14d74:	2308      	movs	r3, #8
   14d76:	18fb      	adds	r3, r7, r3
   14d78:	881d      	ldrh	r5, [r3, #0]
   14d7a:	687a      	ldr	r2, [r7, #4]
   14d7c:	230b      	movs	r3, #11
   14d7e:	18fb      	adds	r3, r7, r3
   14d80:	7819      	ldrb	r1, [r3, #0]
   14d82:	002b      	movs	r3, r5
   14d84:	47a0      	blx	r4
   14d86:	0003      	movs	r3, r0
   14d88:	617b      	str	r3, [r7, #20]

  return ret;
   14d8a:	697b      	ldr	r3, [r7, #20]
}
   14d8c:	0018      	movs	r0, r3
   14d8e:	46bd      	mov	sp, r7
   14d90:	b006      	add	sp, #24
   14d92:	bdb0      	pop	{r4, r5, r7, pc}

00014d94 <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
   14d94:	b580      	push	{r7, lr}
   14d96:	b082      	sub	sp, #8
   14d98:	af00      	add	r7, sp, #0
   14d9a:	0002      	movs	r2, r0
   14d9c:	1dbb      	adds	r3, r7, #6
   14d9e:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
   14da0:	1dbb      	adds	r3, r7, #6
   14da2:	2200      	movs	r2, #0
   14da4:	5e9a      	ldrsh	r2, [r3, r2]
   14da6:	4b06      	ldr	r3, [pc, #24]	; (14dc0 <lsm6dso_from_fs2_to_mg+0x2c>)
   14da8:	0010      	movs	r0, r2
   14daa:	4798      	blx	r3
   14dac:	1c02      	adds	r2, r0, #0
   14dae:	4b05      	ldr	r3, [pc, #20]	; (14dc4 <lsm6dso_from_fs2_to_mg+0x30>)
   14db0:	4905      	ldr	r1, [pc, #20]	; (14dc8 <lsm6dso_from_fs2_to_mg+0x34>)
   14db2:	1c10      	adds	r0, r2, #0
   14db4:	4798      	blx	r3
   14db6:	1c03      	adds	r3, r0, #0
}
   14db8:	1c18      	adds	r0, r3, #0
   14dba:	46bd      	mov	sp, r7
   14dbc:	b002      	add	sp, #8
   14dbe:	bd80      	pop	{r7, pc}
   14dc0:	00034981 	.word	0x00034981
   14dc4:	000343c9 	.word	0x000343c9
   14dc8:	3d79db23 	.word	0x3d79db23

00014dcc <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
   14dcc:	b590      	push	{r4, r7, lr}
   14dce:	b085      	sub	sp, #20
   14dd0:	af00      	add	r7, sp, #0
   14dd2:	6078      	str	r0, [r7, #4]
   14dd4:	000a      	movs	r2, r1
   14dd6:	1cfb      	adds	r3, r7, #3
   14dd8:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14dda:	2308      	movs	r3, #8
   14ddc:	18fa      	adds	r2, r7, r3
   14dde:	6878      	ldr	r0, [r7, #4]
   14de0:	2301      	movs	r3, #1
   14de2:	2110      	movs	r1, #16
   14de4:	4c12      	ldr	r4, [pc, #72]	; (14e30 <lsm6dso_xl_full_scale_set+0x64>)
   14de6:	47a0      	blx	r4
   14de8:	0003      	movs	r3, r0
   14dea:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14dec:	68fb      	ldr	r3, [r7, #12]
   14dee:	2b00      	cmp	r3, #0
   14df0:	d119      	bne.n	14e26 <lsm6dso_xl_full_scale_set+0x5a>
  {
    reg.fs_xl = (uint8_t) val;
   14df2:	1cfb      	adds	r3, r7, #3
   14df4:	781b      	ldrb	r3, [r3, #0]
   14df6:	2203      	movs	r2, #3
   14df8:	4013      	ands	r3, r2
   14dfa:	b2da      	uxtb	r2, r3
   14dfc:	2308      	movs	r3, #8
   14dfe:	18fb      	adds	r3, r7, r3
   14e00:	2103      	movs	r1, #3
   14e02:	400a      	ands	r2, r1
   14e04:	0090      	lsls	r0, r2, #2
   14e06:	781a      	ldrb	r2, [r3, #0]
   14e08:	210c      	movs	r1, #12
   14e0a:	438a      	bics	r2, r1
   14e0c:	1c11      	adds	r1, r2, #0
   14e0e:	1c02      	adds	r2, r0, #0
   14e10:	430a      	orrs	r2, r1
   14e12:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14e14:	2308      	movs	r3, #8
   14e16:	18fa      	adds	r2, r7, r3
   14e18:	6878      	ldr	r0, [r7, #4]
   14e1a:	2301      	movs	r3, #1
   14e1c:	2110      	movs	r1, #16
   14e1e:	4c05      	ldr	r4, [pc, #20]	; (14e34 <lsm6dso_xl_full_scale_set+0x68>)
   14e20:	47a0      	blx	r4
   14e22:	0003      	movs	r3, r0
   14e24:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14e26:	68fb      	ldr	r3, [r7, #12]
}
   14e28:	0018      	movs	r0, r3
   14e2a:	46bd      	mov	sp, r7
   14e2c:	b005      	add	sp, #20
   14e2e:	bd90      	pop	{r4, r7, pc}
   14e30:	00014d09 	.word	0x00014d09
   14e34:	00014d4f 	.word	0x00014d4f

00014e38 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
   14e38:	b590      	push	{r4, r7, lr}
   14e3a:	b087      	sub	sp, #28
   14e3c:	af00      	add	r7, sp, #0
   14e3e:	6078      	str	r0, [r7, #4]
   14e40:	000a      	movs	r2, r1
   14e42:	1cfb      	adds	r3, r7, #3
   14e44:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_xl_t odr_xl =  val;
   14e46:	2317      	movs	r3, #23
   14e48:	18fb      	adds	r3, r7, r3
   14e4a:	1cfa      	adds	r2, r7, #3
   14e4c:	7812      	ldrb	r2, [r2, #0]
   14e4e:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   14e50:	230c      	movs	r3, #12
   14e52:	18fa      	adds	r2, r7, r3
   14e54:	687b      	ldr	r3, [r7, #4]
   14e56:	0011      	movs	r1, r2
   14e58:	0018      	movs	r0, r3
   14e5a:	4ba4      	ldr	r3, [pc, #656]	; (150ec <lsm6dso_xl_data_rate_set+0x2b4>)
   14e5c:	4798      	blx	r3
   14e5e:	0003      	movs	r3, r0
   14e60:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   14e62:	693b      	ldr	r3, [r7, #16]
   14e64:	2b00      	cmp	r3, #0
   14e66:	d000      	beq.n	14e6a <lsm6dso_xl_data_rate_set+0x32>
   14e68:	e113      	b.n	15092 <lsm6dso_xl_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14e6a:	230c      	movs	r3, #12
   14e6c:	18fb      	adds	r3, r7, r3
   14e6e:	781b      	ldrb	r3, [r3, #0]
   14e70:	07db      	lsls	r3, r3, #31
   14e72:	0fdb      	lsrs	r3, r3, #31
   14e74:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   14e76:	230c      	movs	r3, #12
   14e78:	18fb      	adds	r3, r7, r3
   14e7a:	781b      	ldrb	r3, [r3, #0]
   14e7c:	079b      	lsls	r3, r3, #30
   14e7e:	0fdb      	lsrs	r3, r3, #31
   14e80:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14e82:	4313      	orrs	r3, r2
   14e84:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   14e86:	230c      	movs	r3, #12
   14e88:	18fb      	adds	r3, r7, r3
   14e8a:	781b      	ldrb	r3, [r3, #0]
   14e8c:	075b      	lsls	r3, r3, #29
   14e8e:	0fdb      	lsrs	r3, r3, #31
   14e90:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   14e92:	4313      	orrs	r3, r2
   14e94:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   14e96:	230c      	movs	r3, #12
   14e98:	18fb      	adds	r3, r7, r3
   14e9a:	781b      	ldrb	r3, [r3, #0]
   14e9c:	071b      	lsls	r3, r3, #28
   14e9e:	0fdb      	lsrs	r3, r3, #31
   14ea0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   14ea2:	4313      	orrs	r3, r2
   14ea4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   14ea6:	230c      	movs	r3, #12
   14ea8:	18fb      	adds	r3, r7, r3
   14eaa:	781b      	ldrb	r3, [r3, #0]
   14eac:	06db      	lsls	r3, r3, #27
   14eae:	0fdb      	lsrs	r3, r3, #31
   14eb0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   14eb2:	4313      	orrs	r3, r2
   14eb4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   14eb6:	230c      	movs	r3, #12
   14eb8:	18fb      	adds	r3, r7, r3
   14eba:	781b      	ldrb	r3, [r3, #0]
   14ebc:	069b      	lsls	r3, r3, #26
   14ebe:	0fdb      	lsrs	r3, r3, #31
   14ec0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   14ec2:	4313      	orrs	r3, r2
   14ec4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   14ec6:	230c      	movs	r3, #12
   14ec8:	18fb      	adds	r3, r7, r3
   14eca:	781b      	ldrb	r3, [r3, #0]
   14ecc:	065b      	lsls	r3, r3, #25
   14ece:	0fdb      	lsrs	r3, r3, #31
   14ed0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   14ed2:	4313      	orrs	r3, r2
   14ed4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   14ed6:	230c      	movs	r3, #12
   14ed8:	18fb      	adds	r3, r7, r3
   14eda:	781b      	ldrb	r3, [r3, #0]
   14edc:	061b      	lsls	r3, r3, #24
   14ede:	0fdb      	lsrs	r3, r3, #31
   14ee0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   14ee2:	4313      	orrs	r3, r2
   14ee4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   14ee6:	230c      	movs	r3, #12
   14ee8:	18fb      	adds	r3, r7, r3
   14eea:	785b      	ldrb	r3, [r3, #1]
   14eec:	07db      	lsls	r3, r3, #31
   14eee:	0fdb      	lsrs	r3, r3, #31
   14ef0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   14ef2:	4313      	orrs	r3, r2
   14ef4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   14ef6:	230c      	movs	r3, #12
   14ef8:	18fb      	adds	r3, r7, r3
   14efa:	785b      	ldrb	r3, [r3, #1]
   14efc:	079b      	lsls	r3, r3, #30
   14efe:	0fdb      	lsrs	r3, r3, #31
   14f00:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   14f02:	4313      	orrs	r3, r2
   14f04:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   14f06:	230c      	movs	r3, #12
   14f08:	18fb      	adds	r3, r7, r3
   14f0a:	785b      	ldrb	r3, [r3, #1]
   14f0c:	075b      	lsls	r3, r3, #29
   14f0e:	0fdb      	lsrs	r3, r3, #31
   14f10:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   14f12:	4313      	orrs	r3, r2
   14f14:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   14f16:	230c      	movs	r3, #12
   14f18:	18fb      	adds	r3, r7, r3
   14f1a:	785b      	ldrb	r3, [r3, #1]
   14f1c:	071b      	lsls	r3, r3, #28
   14f1e:	0fdb      	lsrs	r3, r3, #31
   14f20:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   14f22:	4313      	orrs	r3, r2
   14f24:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   14f26:	230c      	movs	r3, #12
   14f28:	18fb      	adds	r3, r7, r3
   14f2a:	785b      	ldrb	r3, [r3, #1]
   14f2c:	06db      	lsls	r3, r3, #27
   14f2e:	0fdb      	lsrs	r3, r3, #31
   14f30:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   14f32:	4313      	orrs	r3, r2
   14f34:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   14f36:	230c      	movs	r3, #12
   14f38:	18fb      	adds	r3, r7, r3
   14f3a:	785b      	ldrb	r3, [r3, #1]
   14f3c:	069b      	lsls	r3, r3, #26
   14f3e:	0fdb      	lsrs	r3, r3, #31
   14f40:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   14f42:	4313      	orrs	r3, r2
   14f44:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   14f46:	230c      	movs	r3, #12
   14f48:	18fb      	adds	r3, r7, r3
   14f4a:	785b      	ldrb	r3, [r3, #1]
   14f4c:	065b      	lsls	r3, r3, #25
   14f4e:	0fdb      	lsrs	r3, r3, #31
   14f50:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   14f52:	4313      	orrs	r3, r2
   14f54:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   14f56:	230c      	movs	r3, #12
   14f58:	18fb      	adds	r3, r7, r3
   14f5a:	785b      	ldrb	r3, [r3, #1]
   14f5c:	061b      	lsls	r3, r3, #24
   14f5e:	0fdb      	lsrs	r3, r3, #31
   14f60:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   14f62:	4313      	orrs	r3, r2
   14f64:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14f66:	2b01      	cmp	r3, #1
   14f68:	d000      	beq.n	14f6c <lsm6dso_xl_data_rate_set+0x134>
   14f6a:	e092      	b.n	15092 <lsm6dso_xl_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   14f6c:	230b      	movs	r3, #11
   14f6e:	18fa      	adds	r2, r7, r3
   14f70:	687b      	ldr	r3, [r7, #4]
   14f72:	0011      	movs	r1, r2
   14f74:	0018      	movs	r0, r3
   14f76:	4b5e      	ldr	r3, [pc, #376]	; (150f0 <lsm6dso_xl_data_rate_set+0x2b8>)
   14f78:	4798      	blx	r3
   14f7a:	0003      	movs	r3, r0
   14f7c:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   14f7e:	693b      	ldr	r3, [r7, #16]
   14f80:	2b00      	cmp	r3, #0
   14f82:	d000      	beq.n	14f86 <lsm6dso_xl_data_rate_set+0x14e>
   14f84:	e085      	b.n	15092 <lsm6dso_xl_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   14f86:	230b      	movs	r3, #11
   14f88:	18fb      	adds	r3, r7, r3
   14f8a:	781b      	ldrb	r3, [r3, #0]
   14f8c:	2b01      	cmp	r3, #1
   14f8e:	d017      	beq.n	14fc0 <lsm6dso_xl_data_rate_set+0x188>
   14f90:	dc02      	bgt.n	14f98 <lsm6dso_xl_data_rate_set+0x160>
   14f92:	2b00      	cmp	r3, #0
   14f94:	d005      	beq.n	14fa2 <lsm6dso_xl_data_rate_set+0x16a>
   14f96:	e076      	b.n	15086 <lsm6dso_xl_data_rate_set+0x24e>
   14f98:	2b02      	cmp	r3, #2
   14f9a:	d029      	beq.n	14ff0 <lsm6dso_xl_data_rate_set+0x1b8>
   14f9c:	2b03      	cmp	r3, #3
   14f9e:	d048      	beq.n	15032 <lsm6dso_xl_data_rate_set+0x1fa>
   14fa0:	e071      	b.n	15086 <lsm6dso_xl_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
   14fa2:	1cfb      	adds	r3, r7, #3
   14fa4:	781b      	ldrb	r3, [r3, #0]
   14fa6:	2b00      	cmp	r3, #0
   14fa8:	d104      	bne.n	14fb4 <lsm6dso_xl_data_rate_set+0x17c>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
   14faa:	2317      	movs	r3, #23
   14fac:	18fb      	adds	r3, r7, r3
   14fae:	2201      	movs	r2, #1
   14fb0:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   14fb2:	e06e      	b.n	15092 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   14fb4:	2317      	movs	r3, #23
   14fb6:	18fb      	adds	r3, r7, r3
   14fb8:	1cfa      	adds	r2, r7, #3
   14fba:	7812      	ldrb	r2, [r2, #0]
   14fbc:	701a      	strb	r2, [r3, #0]
            break;
   14fbe:	e068      	b.n	15092 <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   14fc0:	1cfb      	adds	r3, r7, #3
   14fc2:	781b      	ldrb	r3, [r3, #0]
   14fc4:	2b00      	cmp	r3, #0
   14fc6:	d104      	bne.n	14fd2 <lsm6dso_xl_data_rate_set+0x19a>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   14fc8:	2317      	movs	r3, #23
   14fca:	18fb      	adds	r3, r7, r3
   14fcc:	2202      	movs	r2, #2
   14fce:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   14fd0:	e05f      	b.n	15092 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   14fd2:	1cfb      	adds	r3, r7, #3
   14fd4:	781b      	ldrb	r3, [r3, #0]
   14fd6:	2b01      	cmp	r3, #1
   14fd8:	d104      	bne.n	14fe4 <lsm6dso_xl_data_rate_set+0x1ac>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   14fda:	2317      	movs	r3, #23
   14fdc:	18fb      	adds	r3, r7, r3
   14fde:	2202      	movs	r2, #2
   14fe0:	701a      	strb	r2, [r3, #0]
            break;
   14fe2:	e056      	b.n	15092 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   14fe4:	2317      	movs	r3, #23
   14fe6:	18fb      	adds	r3, r7, r3
   14fe8:	1cfa      	adds	r2, r7, #3
   14fea:	7812      	ldrb	r2, [r2, #0]
   14fec:	701a      	strb	r2, [r3, #0]
            break;
   14fee:	e050      	b.n	15092 <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   14ff0:	1cfb      	adds	r3, r7, #3
   14ff2:	781b      	ldrb	r3, [r3, #0]
   14ff4:	2b00      	cmp	r3, #0
   14ff6:	d104      	bne.n	15002 <lsm6dso_xl_data_rate_set+0x1ca>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   14ff8:	2317      	movs	r3, #23
   14ffa:	18fb      	adds	r3, r7, r3
   14ffc:	2203      	movs	r2, #3
   14ffe:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   15000:	e047      	b.n	15092 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   15002:	1cfb      	adds	r3, r7, #3
   15004:	781b      	ldrb	r3, [r3, #0]
   15006:	2b01      	cmp	r3, #1
   15008:	d104      	bne.n	15014 <lsm6dso_xl_data_rate_set+0x1dc>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   1500a:	2317      	movs	r3, #23
   1500c:	18fb      	adds	r3, r7, r3
   1500e:	2203      	movs	r2, #3
   15010:	701a      	strb	r2, [r3, #0]
            break;
   15012:	e03e      	b.n	15092 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   15014:	1cfb      	adds	r3, r7, #3
   15016:	781b      	ldrb	r3, [r3, #0]
   15018:	2b02      	cmp	r3, #2
   1501a:	d104      	bne.n	15026 <lsm6dso_xl_data_rate_set+0x1ee>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   1501c:	2317      	movs	r3, #23
   1501e:	18fb      	adds	r3, r7, r3
   15020:	2203      	movs	r2, #3
   15022:	701a      	strb	r2, [r3, #0]
            break;
   15024:	e035      	b.n	15092 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   15026:	2317      	movs	r3, #23
   15028:	18fb      	adds	r3, r7, r3
   1502a:	1cfa      	adds	r2, r7, #3
   1502c:	7812      	ldrb	r2, [r2, #0]
   1502e:	701a      	strb	r2, [r3, #0]
            break;
   15030:	e02f      	b.n	15092 <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   15032:	1cfb      	adds	r3, r7, #3
   15034:	781b      	ldrb	r3, [r3, #0]
   15036:	2b00      	cmp	r3, #0
   15038:	d104      	bne.n	15044 <lsm6dso_xl_data_rate_set+0x20c>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   1503a:	2317      	movs	r3, #23
   1503c:	18fb      	adds	r3, r7, r3
   1503e:	2204      	movs	r2, #4
   15040:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   15042:	e026      	b.n	15092 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   15044:	1cfb      	adds	r3, r7, #3
   15046:	781b      	ldrb	r3, [r3, #0]
   15048:	2b01      	cmp	r3, #1
   1504a:	d104      	bne.n	15056 <lsm6dso_xl_data_rate_set+0x21e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   1504c:	2317      	movs	r3, #23
   1504e:	18fb      	adds	r3, r7, r3
   15050:	2204      	movs	r2, #4
   15052:	701a      	strb	r2, [r3, #0]
            break;
   15054:	e01d      	b.n	15092 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   15056:	1cfb      	adds	r3, r7, #3
   15058:	781b      	ldrb	r3, [r3, #0]
   1505a:	2b02      	cmp	r3, #2
   1505c:	d104      	bne.n	15068 <lsm6dso_xl_data_rate_set+0x230>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   1505e:	2317      	movs	r3, #23
   15060:	18fb      	adds	r3, r7, r3
   15062:	2204      	movs	r2, #4
   15064:	701a      	strb	r2, [r3, #0]
            break;
   15066:	e014      	b.n	15092 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_52Hz)
   15068:	1cfb      	adds	r3, r7, #3
   1506a:	781b      	ldrb	r3, [r3, #0]
   1506c:	2b03      	cmp	r3, #3
   1506e:	d104      	bne.n	1507a <lsm6dso_xl_data_rate_set+0x242>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   15070:	2317      	movs	r3, #23
   15072:	18fb      	adds	r3, r7, r3
   15074:	2204      	movs	r2, #4
   15076:	701a      	strb	r2, [r3, #0]
            break;
   15078:	e00b      	b.n	15092 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   1507a:	2317      	movs	r3, #23
   1507c:	18fb      	adds	r3, r7, r3
   1507e:	1cfa      	adds	r2, r7, #3
   15080:	7812      	ldrb	r2, [r2, #0]
   15082:	701a      	strb	r2, [r3, #0]
            break;
   15084:	e005      	b.n	15092 <lsm6dso_xl_data_rate_set+0x25a>

          default:
            odr_xl = val;
   15086:	2317      	movs	r3, #23
   15088:	18fb      	adds	r3, r7, r3
   1508a:	1cfa      	adds	r2, r7, #3
   1508c:	7812      	ldrb	r2, [r2, #0]
   1508e:	701a      	strb	r2, [r3, #0]
            break;
   15090:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   15092:	693b      	ldr	r3, [r7, #16]
   15094:	2b00      	cmp	r3, #0
   15096:	d108      	bne.n	150aa <lsm6dso_xl_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15098:	2308      	movs	r3, #8
   1509a:	18fa      	adds	r2, r7, r3
   1509c:	6878      	ldr	r0, [r7, #4]
   1509e:	2301      	movs	r3, #1
   150a0:	2110      	movs	r1, #16
   150a2:	4c14      	ldr	r4, [pc, #80]	; (150f4 <lsm6dso_xl_data_rate_set+0x2bc>)
   150a4:	47a0      	blx	r4
   150a6:	0003      	movs	r3, r0
   150a8:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   150aa:	693b      	ldr	r3, [r7, #16]
   150ac:	2b00      	cmp	r3, #0
   150ae:	d118      	bne.n	150e2 <lsm6dso_xl_data_rate_set+0x2aa>
  {
    reg.odr_xl = (uint8_t) odr_xl;
   150b0:	2317      	movs	r3, #23
   150b2:	18fb      	adds	r3, r7, r3
   150b4:	781b      	ldrb	r3, [r3, #0]
   150b6:	220f      	movs	r2, #15
   150b8:	4013      	ands	r3, r2
   150ba:	b2da      	uxtb	r2, r3
   150bc:	2308      	movs	r3, #8
   150be:	18fb      	adds	r3, r7, r3
   150c0:	0110      	lsls	r0, r2, #4
   150c2:	781a      	ldrb	r2, [r3, #0]
   150c4:	210f      	movs	r1, #15
   150c6:	400a      	ands	r2, r1
   150c8:	1c11      	adds	r1, r2, #0
   150ca:	1c02      	adds	r2, r0, #0
   150cc:	430a      	orrs	r2, r1
   150ce:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   150d0:	2308      	movs	r3, #8
   150d2:	18fa      	adds	r2, r7, r3
   150d4:	6878      	ldr	r0, [r7, #4]
   150d6:	2301      	movs	r3, #1
   150d8:	2110      	movs	r1, #16
   150da:	4c07      	ldr	r4, [pc, #28]	; (150f8 <lsm6dso_xl_data_rate_set+0x2c0>)
   150dc:	47a0      	blx	r4
   150de:	0003      	movs	r3, r0
   150e0:	613b      	str	r3, [r7, #16]
  }

  return ret;
   150e2:	693b      	ldr	r3, [r7, #16]
}
   150e4:	0018      	movs	r0, r3
   150e6:	46bd      	mov	sp, r7
   150e8:	b007      	add	sp, #28
   150ea:	bd90      	pop	{r4, r7, pc}
   150ec:	00015915 	.word	0x00015915
   150f0:	00015969 	.word	0x00015969
   150f4:	00014d09 	.word	0x00014d09
   150f8:	00014d4f 	.word	0x00014d4f

000150fc <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
   150fc:	b590      	push	{r4, r7, lr}
   150fe:	b085      	sub	sp, #20
   15100:	af00      	add	r7, sp, #0
   15102:	6078      	str	r0, [r7, #4]
   15104:	000a      	movs	r2, r1
   15106:	1cfb      	adds	r3, r7, #3
   15108:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   1510a:	2308      	movs	r3, #8
   1510c:	18fa      	adds	r2, r7, r3
   1510e:	6878      	ldr	r0, [r7, #4]
   15110:	2301      	movs	r3, #1
   15112:	2111      	movs	r1, #17
   15114:	4c12      	ldr	r4, [pc, #72]	; (15160 <lsm6dso_gy_full_scale_set+0x64>)
   15116:	47a0      	blx	r4
   15118:	0003      	movs	r3, r0
   1511a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   1511c:	68fb      	ldr	r3, [r7, #12]
   1511e:	2b00      	cmp	r3, #0
   15120:	d119      	bne.n	15156 <lsm6dso_gy_full_scale_set+0x5a>
  {
    reg.fs_g = (uint8_t) val;
   15122:	1cfb      	adds	r3, r7, #3
   15124:	781b      	ldrb	r3, [r3, #0]
   15126:	2207      	movs	r2, #7
   15128:	4013      	ands	r3, r2
   1512a:	b2da      	uxtb	r2, r3
   1512c:	2308      	movs	r3, #8
   1512e:	18fb      	adds	r3, r7, r3
   15130:	2107      	movs	r1, #7
   15132:	400a      	ands	r2, r1
   15134:	1890      	adds	r0, r2, r2
   15136:	781a      	ldrb	r2, [r3, #0]
   15138:	210e      	movs	r1, #14
   1513a:	438a      	bics	r2, r1
   1513c:	1c11      	adds	r1, r2, #0
   1513e:	1c02      	adds	r2, r0, #0
   15140:	430a      	orrs	r2, r1
   15142:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   15144:	2308      	movs	r3, #8
   15146:	18fa      	adds	r2, r7, r3
   15148:	6878      	ldr	r0, [r7, #4]
   1514a:	2301      	movs	r3, #1
   1514c:	2111      	movs	r1, #17
   1514e:	4c05      	ldr	r4, [pc, #20]	; (15164 <lsm6dso_gy_full_scale_set+0x68>)
   15150:	47a0      	blx	r4
   15152:	0003      	movs	r3, r0
   15154:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15156:	68fb      	ldr	r3, [r7, #12]
}
   15158:	0018      	movs	r0, r3
   1515a:	46bd      	mov	sp, r7
   1515c:	b005      	add	sp, #20
   1515e:	bd90      	pop	{r4, r7, pc}
   15160:	00014d09 	.word	0x00014d09
   15164:	00014d4f 	.word	0x00014d4f

00015168 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
   15168:	b590      	push	{r4, r7, lr}
   1516a:	b087      	sub	sp, #28
   1516c:	af00      	add	r7, sp, #0
   1516e:	6078      	str	r0, [r7, #4]
   15170:	000a      	movs	r2, r1
   15172:	1cfb      	adds	r3, r7, #3
   15174:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_g_t odr_gy =  val;
   15176:	2317      	movs	r3, #23
   15178:	18fb      	adds	r3, r7, r3
   1517a:	1cfa      	adds	r2, r7, #3
   1517c:	7812      	ldrb	r2, [r2, #0]
   1517e:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   15180:	230c      	movs	r3, #12
   15182:	18fa      	adds	r2, r7, r3
   15184:	687b      	ldr	r3, [r7, #4]
   15186:	0011      	movs	r1, r2
   15188:	0018      	movs	r0, r3
   1518a:	4ba4      	ldr	r3, [pc, #656]	; (1541c <lsm6dso_gy_data_rate_set+0x2b4>)
   1518c:	4798      	blx	r3
   1518e:	0003      	movs	r3, r0
   15190:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   15192:	693b      	ldr	r3, [r7, #16]
   15194:	2b00      	cmp	r3, #0
   15196:	d000      	beq.n	1519a <lsm6dso_gy_data_rate_set+0x32>
   15198:	e113      	b.n	153c2 <lsm6dso_gy_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1519a:	230c      	movs	r3, #12
   1519c:	18fb      	adds	r3, r7, r3
   1519e:	781b      	ldrb	r3, [r3, #0]
   151a0:	07db      	lsls	r3, r3, #31
   151a2:	0fdb      	lsrs	r3, r3, #31
   151a4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   151a6:	230c      	movs	r3, #12
   151a8:	18fb      	adds	r3, r7, r3
   151aa:	781b      	ldrb	r3, [r3, #0]
   151ac:	079b      	lsls	r3, r3, #30
   151ae:	0fdb      	lsrs	r3, r3, #31
   151b0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   151b2:	4313      	orrs	r3, r2
   151b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   151b6:	230c      	movs	r3, #12
   151b8:	18fb      	adds	r3, r7, r3
   151ba:	781b      	ldrb	r3, [r3, #0]
   151bc:	075b      	lsls	r3, r3, #29
   151be:	0fdb      	lsrs	r3, r3, #31
   151c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   151c2:	4313      	orrs	r3, r2
   151c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   151c6:	230c      	movs	r3, #12
   151c8:	18fb      	adds	r3, r7, r3
   151ca:	781b      	ldrb	r3, [r3, #0]
   151cc:	071b      	lsls	r3, r3, #28
   151ce:	0fdb      	lsrs	r3, r3, #31
   151d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   151d2:	4313      	orrs	r3, r2
   151d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   151d6:	230c      	movs	r3, #12
   151d8:	18fb      	adds	r3, r7, r3
   151da:	781b      	ldrb	r3, [r3, #0]
   151dc:	06db      	lsls	r3, r3, #27
   151de:	0fdb      	lsrs	r3, r3, #31
   151e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   151e2:	4313      	orrs	r3, r2
   151e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   151e6:	230c      	movs	r3, #12
   151e8:	18fb      	adds	r3, r7, r3
   151ea:	781b      	ldrb	r3, [r3, #0]
   151ec:	069b      	lsls	r3, r3, #26
   151ee:	0fdb      	lsrs	r3, r3, #31
   151f0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   151f2:	4313      	orrs	r3, r2
   151f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   151f6:	230c      	movs	r3, #12
   151f8:	18fb      	adds	r3, r7, r3
   151fa:	781b      	ldrb	r3, [r3, #0]
   151fc:	065b      	lsls	r3, r3, #25
   151fe:	0fdb      	lsrs	r3, r3, #31
   15200:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   15202:	4313      	orrs	r3, r2
   15204:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   15206:	230c      	movs	r3, #12
   15208:	18fb      	adds	r3, r7, r3
   1520a:	781b      	ldrb	r3, [r3, #0]
   1520c:	061b      	lsls	r3, r3, #24
   1520e:	0fdb      	lsrs	r3, r3, #31
   15210:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   15212:	4313      	orrs	r3, r2
   15214:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   15216:	230c      	movs	r3, #12
   15218:	18fb      	adds	r3, r7, r3
   1521a:	785b      	ldrb	r3, [r3, #1]
   1521c:	07db      	lsls	r3, r3, #31
   1521e:	0fdb      	lsrs	r3, r3, #31
   15220:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   15222:	4313      	orrs	r3, r2
   15224:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   15226:	230c      	movs	r3, #12
   15228:	18fb      	adds	r3, r7, r3
   1522a:	785b      	ldrb	r3, [r3, #1]
   1522c:	079b      	lsls	r3, r3, #30
   1522e:	0fdb      	lsrs	r3, r3, #31
   15230:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   15232:	4313      	orrs	r3, r2
   15234:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   15236:	230c      	movs	r3, #12
   15238:	18fb      	adds	r3, r7, r3
   1523a:	785b      	ldrb	r3, [r3, #1]
   1523c:	075b      	lsls	r3, r3, #29
   1523e:	0fdb      	lsrs	r3, r3, #31
   15240:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   15242:	4313      	orrs	r3, r2
   15244:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   15246:	230c      	movs	r3, #12
   15248:	18fb      	adds	r3, r7, r3
   1524a:	785b      	ldrb	r3, [r3, #1]
   1524c:	071b      	lsls	r3, r3, #28
   1524e:	0fdb      	lsrs	r3, r3, #31
   15250:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   15252:	4313      	orrs	r3, r2
   15254:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   15256:	230c      	movs	r3, #12
   15258:	18fb      	adds	r3, r7, r3
   1525a:	785b      	ldrb	r3, [r3, #1]
   1525c:	06db      	lsls	r3, r3, #27
   1525e:	0fdb      	lsrs	r3, r3, #31
   15260:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   15262:	4313      	orrs	r3, r2
   15264:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   15266:	230c      	movs	r3, #12
   15268:	18fb      	adds	r3, r7, r3
   1526a:	785b      	ldrb	r3, [r3, #1]
   1526c:	069b      	lsls	r3, r3, #26
   1526e:	0fdb      	lsrs	r3, r3, #31
   15270:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   15272:	4313      	orrs	r3, r2
   15274:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   15276:	230c      	movs	r3, #12
   15278:	18fb      	adds	r3, r7, r3
   1527a:	785b      	ldrb	r3, [r3, #1]
   1527c:	065b      	lsls	r3, r3, #25
   1527e:	0fdb      	lsrs	r3, r3, #31
   15280:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   15282:	4313      	orrs	r3, r2
   15284:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   15286:	230c      	movs	r3, #12
   15288:	18fb      	adds	r3, r7, r3
   1528a:	785b      	ldrb	r3, [r3, #1]
   1528c:	061b      	lsls	r3, r3, #24
   1528e:	0fdb      	lsrs	r3, r3, #31
   15290:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   15292:	4313      	orrs	r3, r2
   15294:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15296:	2b01      	cmp	r3, #1
   15298:	d000      	beq.n	1529c <lsm6dso_gy_data_rate_set+0x134>
   1529a:	e092      	b.n	153c2 <lsm6dso_gy_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   1529c:	230b      	movs	r3, #11
   1529e:	18fa      	adds	r2, r7, r3
   152a0:	687b      	ldr	r3, [r7, #4]
   152a2:	0011      	movs	r1, r2
   152a4:	0018      	movs	r0, r3
   152a6:	4b5e      	ldr	r3, [pc, #376]	; (15420 <lsm6dso_gy_data_rate_set+0x2b8>)
   152a8:	4798      	blx	r3
   152aa:	0003      	movs	r3, r0
   152ac:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   152ae:	693b      	ldr	r3, [r7, #16]
   152b0:	2b00      	cmp	r3, #0
   152b2:	d000      	beq.n	152b6 <lsm6dso_gy_data_rate_set+0x14e>
   152b4:	e085      	b.n	153c2 <lsm6dso_gy_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   152b6:	230b      	movs	r3, #11
   152b8:	18fb      	adds	r3, r7, r3
   152ba:	781b      	ldrb	r3, [r3, #0]
   152bc:	2b01      	cmp	r3, #1
   152be:	d017      	beq.n	152f0 <lsm6dso_gy_data_rate_set+0x188>
   152c0:	dc02      	bgt.n	152c8 <lsm6dso_gy_data_rate_set+0x160>
   152c2:	2b00      	cmp	r3, #0
   152c4:	d005      	beq.n	152d2 <lsm6dso_gy_data_rate_set+0x16a>
   152c6:	e076      	b.n	153b6 <lsm6dso_gy_data_rate_set+0x24e>
   152c8:	2b02      	cmp	r3, #2
   152ca:	d029      	beq.n	15320 <lsm6dso_gy_data_rate_set+0x1b8>
   152cc:	2b03      	cmp	r3, #3
   152ce:	d048      	beq.n	15362 <lsm6dso_gy_data_rate_set+0x1fa>
   152d0:	e071      	b.n	153b6 <lsm6dso_gy_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
   152d2:	1cfb      	adds	r3, r7, #3
   152d4:	781b      	ldrb	r3, [r3, #0]
   152d6:	2b00      	cmp	r3, #0
   152d8:	d104      	bne.n	152e4 <lsm6dso_gy_data_rate_set+0x17c>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
   152da:	2317      	movs	r3, #23
   152dc:	18fb      	adds	r3, r7, r3
   152de:	2201      	movs	r2, #1
   152e0:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   152e2:	e06e      	b.n	153c2 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   152e4:	2317      	movs	r3, #23
   152e6:	18fb      	adds	r3, r7, r3
   152e8:	1cfa      	adds	r2, r7, #3
   152ea:	7812      	ldrb	r2, [r2, #0]
   152ec:	701a      	strb	r2, [r3, #0]
            break;
   152ee:	e068      	b.n	153c2 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   152f0:	1cfb      	adds	r3, r7, #3
   152f2:	781b      	ldrb	r3, [r3, #0]
   152f4:	2b00      	cmp	r3, #0
   152f6:	d104      	bne.n	15302 <lsm6dso_gy_data_rate_set+0x19a>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   152f8:	2317      	movs	r3, #23
   152fa:	18fb      	adds	r3, r7, r3
   152fc:	2202      	movs	r2, #2
   152fe:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   15300:	e05f      	b.n	153c2 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   15302:	1cfb      	adds	r3, r7, #3
   15304:	781b      	ldrb	r3, [r3, #0]
   15306:	2b01      	cmp	r3, #1
   15308:	d104      	bne.n	15314 <lsm6dso_gy_data_rate_set+0x1ac>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   1530a:	2317      	movs	r3, #23
   1530c:	18fb      	adds	r3, r7, r3
   1530e:	2202      	movs	r2, #2
   15310:	701a      	strb	r2, [r3, #0]
            break;
   15312:	e056      	b.n	153c2 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   15314:	2317      	movs	r3, #23
   15316:	18fb      	adds	r3, r7, r3
   15318:	1cfa      	adds	r2, r7, #3
   1531a:	7812      	ldrb	r2, [r2, #0]
   1531c:	701a      	strb	r2, [r3, #0]
            break;
   1531e:	e050      	b.n	153c2 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   15320:	1cfb      	adds	r3, r7, #3
   15322:	781b      	ldrb	r3, [r3, #0]
   15324:	2b00      	cmp	r3, #0
   15326:	d104      	bne.n	15332 <lsm6dso_gy_data_rate_set+0x1ca>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   15328:	2317      	movs	r3, #23
   1532a:	18fb      	adds	r3, r7, r3
   1532c:	2203      	movs	r2, #3
   1532e:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   15330:	e047      	b.n	153c2 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   15332:	1cfb      	adds	r3, r7, #3
   15334:	781b      	ldrb	r3, [r3, #0]
   15336:	2b01      	cmp	r3, #1
   15338:	d104      	bne.n	15344 <lsm6dso_gy_data_rate_set+0x1dc>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   1533a:	2317      	movs	r3, #23
   1533c:	18fb      	adds	r3, r7, r3
   1533e:	2203      	movs	r2, #3
   15340:	701a      	strb	r2, [r3, #0]
            break;
   15342:	e03e      	b.n	153c2 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   15344:	1cfb      	adds	r3, r7, #3
   15346:	781b      	ldrb	r3, [r3, #0]
   15348:	2b02      	cmp	r3, #2
   1534a:	d104      	bne.n	15356 <lsm6dso_gy_data_rate_set+0x1ee>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   1534c:	2317      	movs	r3, #23
   1534e:	18fb      	adds	r3, r7, r3
   15350:	2203      	movs	r2, #3
   15352:	701a      	strb	r2, [r3, #0]
            break;
   15354:	e035      	b.n	153c2 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   15356:	2317      	movs	r3, #23
   15358:	18fb      	adds	r3, r7, r3
   1535a:	1cfa      	adds	r2, r7, #3
   1535c:	7812      	ldrb	r2, [r2, #0]
   1535e:	701a      	strb	r2, [r3, #0]
            break;
   15360:	e02f      	b.n	153c2 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   15362:	1cfb      	adds	r3, r7, #3
   15364:	781b      	ldrb	r3, [r3, #0]
   15366:	2b00      	cmp	r3, #0
   15368:	d104      	bne.n	15374 <lsm6dso_gy_data_rate_set+0x20c>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   1536a:	2317      	movs	r3, #23
   1536c:	18fb      	adds	r3, r7, r3
   1536e:	2204      	movs	r2, #4
   15370:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   15372:	e026      	b.n	153c2 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   15374:	1cfb      	adds	r3, r7, #3
   15376:	781b      	ldrb	r3, [r3, #0]
   15378:	2b01      	cmp	r3, #1
   1537a:	d104      	bne.n	15386 <lsm6dso_gy_data_rate_set+0x21e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   1537c:	2317      	movs	r3, #23
   1537e:	18fb      	adds	r3, r7, r3
   15380:	2204      	movs	r2, #4
   15382:	701a      	strb	r2, [r3, #0]
            break;
   15384:	e01d      	b.n	153c2 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   15386:	1cfb      	adds	r3, r7, #3
   15388:	781b      	ldrb	r3, [r3, #0]
   1538a:	2b02      	cmp	r3, #2
   1538c:	d104      	bne.n	15398 <lsm6dso_gy_data_rate_set+0x230>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   1538e:	2317      	movs	r3, #23
   15390:	18fb      	adds	r3, r7, r3
   15392:	2204      	movs	r2, #4
   15394:	701a      	strb	r2, [r3, #0]
            break;
   15396:	e014      	b.n	153c2 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_52Hz)
   15398:	1cfb      	adds	r3, r7, #3
   1539a:	781b      	ldrb	r3, [r3, #0]
   1539c:	2b03      	cmp	r3, #3
   1539e:	d104      	bne.n	153aa <lsm6dso_gy_data_rate_set+0x242>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   153a0:	2317      	movs	r3, #23
   153a2:	18fb      	adds	r3, r7, r3
   153a4:	2204      	movs	r2, #4
   153a6:	701a      	strb	r2, [r3, #0]
            break;
   153a8:	e00b      	b.n	153c2 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   153aa:	2317      	movs	r3, #23
   153ac:	18fb      	adds	r3, r7, r3
   153ae:	1cfa      	adds	r2, r7, #3
   153b0:	7812      	ldrb	r2, [r2, #0]
   153b2:	701a      	strb	r2, [r3, #0]
            break;
   153b4:	e005      	b.n	153c2 <lsm6dso_gy_data_rate_set+0x25a>

          default:
            odr_gy = val;
   153b6:	2317      	movs	r3, #23
   153b8:	18fb      	adds	r3, r7, r3
   153ba:	1cfa      	adds	r2, r7, #3
   153bc:	7812      	ldrb	r2, [r2, #0]
   153be:	701a      	strb	r2, [r3, #0]
            break;
   153c0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   153c2:	693b      	ldr	r3, [r7, #16]
   153c4:	2b00      	cmp	r3, #0
   153c6:	d108      	bne.n	153da <lsm6dso_gy_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   153c8:	2308      	movs	r3, #8
   153ca:	18fa      	adds	r2, r7, r3
   153cc:	6878      	ldr	r0, [r7, #4]
   153ce:	2301      	movs	r3, #1
   153d0:	2111      	movs	r1, #17
   153d2:	4c14      	ldr	r4, [pc, #80]	; (15424 <lsm6dso_gy_data_rate_set+0x2bc>)
   153d4:	47a0      	blx	r4
   153d6:	0003      	movs	r3, r0
   153d8:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   153da:	693b      	ldr	r3, [r7, #16]
   153dc:	2b00      	cmp	r3, #0
   153de:	d118      	bne.n	15412 <lsm6dso_gy_data_rate_set+0x2aa>
  {
    reg.odr_g = (uint8_t) odr_gy;
   153e0:	2317      	movs	r3, #23
   153e2:	18fb      	adds	r3, r7, r3
   153e4:	781b      	ldrb	r3, [r3, #0]
   153e6:	220f      	movs	r2, #15
   153e8:	4013      	ands	r3, r2
   153ea:	b2da      	uxtb	r2, r3
   153ec:	2308      	movs	r3, #8
   153ee:	18fb      	adds	r3, r7, r3
   153f0:	0110      	lsls	r0, r2, #4
   153f2:	781a      	ldrb	r2, [r3, #0]
   153f4:	210f      	movs	r1, #15
   153f6:	400a      	ands	r2, r1
   153f8:	1c11      	adds	r1, r2, #0
   153fa:	1c02      	adds	r2, r0, #0
   153fc:	430a      	orrs	r2, r1
   153fe:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   15400:	2308      	movs	r3, #8
   15402:	18fa      	adds	r2, r7, r3
   15404:	6878      	ldr	r0, [r7, #4]
   15406:	2301      	movs	r3, #1
   15408:	2111      	movs	r1, #17
   1540a:	4c07      	ldr	r4, [pc, #28]	; (15428 <lsm6dso_gy_data_rate_set+0x2c0>)
   1540c:	47a0      	blx	r4
   1540e:	0003      	movs	r3, r0
   15410:	613b      	str	r3, [r7, #16]
  }

  return ret;
   15412:	693b      	ldr	r3, [r7, #16]
}
   15414:	0018      	movs	r0, r3
   15416:	46bd      	mov	sp, r7
   15418:	b007      	add	sp, #28
   1541a:	bd90      	pop	{r4, r7, pc}
   1541c:	00015915 	.word	0x00015915
   15420:	00015969 	.word	0x00015969
   15424:	00014d09 	.word	0x00014d09
   15428:	00014d4f 	.word	0x00014d4f

0001542c <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   1542c:	b590      	push	{r4, r7, lr}
   1542e:	b085      	sub	sp, #20
   15430:	af00      	add	r7, sp, #0
   15432:	6078      	str	r0, [r7, #4]
   15434:	000a      	movs	r2, r1
   15436:	1cfb      	adds	r3, r7, #3
   15438:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   1543a:	2308      	movs	r3, #8
   1543c:	18fa      	adds	r2, r7, r3
   1543e:	6878      	ldr	r0, [r7, #4]
   15440:	2301      	movs	r3, #1
   15442:	2112      	movs	r1, #18
   15444:	4c12      	ldr	r4, [pc, #72]	; (15490 <lsm6dso_block_data_update_set+0x64>)
   15446:	47a0      	blx	r4
   15448:	0003      	movs	r3, r0
   1544a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   1544c:	68fb      	ldr	r3, [r7, #12]
   1544e:	2b00      	cmp	r3, #0
   15450:	d119      	bne.n	15486 <lsm6dso_block_data_update_set+0x5a>
  {
    reg.bdu = val;
   15452:	1cfb      	adds	r3, r7, #3
   15454:	781b      	ldrb	r3, [r3, #0]
   15456:	2201      	movs	r2, #1
   15458:	4013      	ands	r3, r2
   1545a:	b2da      	uxtb	r2, r3
   1545c:	2308      	movs	r3, #8
   1545e:	18fb      	adds	r3, r7, r3
   15460:	2101      	movs	r1, #1
   15462:	400a      	ands	r2, r1
   15464:	0190      	lsls	r0, r2, #6
   15466:	781a      	ldrb	r2, [r3, #0]
   15468:	2140      	movs	r1, #64	; 0x40
   1546a:	438a      	bics	r2, r1
   1546c:	1c11      	adds	r1, r2, #0
   1546e:	1c02      	adds	r2, r0, #0
   15470:	430a      	orrs	r2, r1
   15472:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15474:	2308      	movs	r3, #8
   15476:	18fa      	adds	r2, r7, r3
   15478:	6878      	ldr	r0, [r7, #4]
   1547a:	2301      	movs	r3, #1
   1547c:	2112      	movs	r1, #18
   1547e:	4c05      	ldr	r4, [pc, #20]	; (15494 <lsm6dso_block_data_update_set+0x68>)
   15480:	47a0      	blx	r4
   15482:	0003      	movs	r3, r0
   15484:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15486:	68fb      	ldr	r3, [r7, #12]
}
   15488:	0018      	movs	r0, r3
   1548a:	46bd      	mov	sp, r7
   1548c:	b005      	add	sp, #20
   1548e:	bd90      	pop	{r4, r7, pc}
   15490:	00014d09 	.word	0x00014d09
   15494:	00014d4f 	.word	0x00014d4f

00015498 <lsm6dso_xl_offset_weight_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_offset_weight_set(stmdev_ctx_t *ctx,
                                     lsm6dso_usr_off_w_t val)
{
   15498:	b590      	push	{r4, r7, lr}
   1549a:	b085      	sub	sp, #20
   1549c:	af00      	add	r7, sp, #0
   1549e:	6078      	str	r0, [r7, #4]
   154a0:	000a      	movs	r2, r1
   154a2:	1cfb      	adds	r3, r7, #3
   154a4:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl6_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   154a6:	2308      	movs	r3, #8
   154a8:	18fa      	adds	r2, r7, r3
   154aa:	6878      	ldr	r0, [r7, #4]
   154ac:	2301      	movs	r3, #1
   154ae:	2115      	movs	r1, #21
   154b0:	4c12      	ldr	r4, [pc, #72]	; (154fc <lsm6dso_xl_offset_weight_set+0x64>)
   154b2:	47a0      	blx	r4
   154b4:	0003      	movs	r3, r0
   154b6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   154b8:	68fb      	ldr	r3, [r7, #12]
   154ba:	2b00      	cmp	r3, #0
   154bc:	d119      	bne.n	154f2 <lsm6dso_xl_offset_weight_set+0x5a>
  {
    reg.usr_off_w = (uint8_t)val;
   154be:	1cfb      	adds	r3, r7, #3
   154c0:	781b      	ldrb	r3, [r3, #0]
   154c2:	2201      	movs	r2, #1
   154c4:	4013      	ands	r3, r2
   154c6:	b2da      	uxtb	r2, r3
   154c8:	2308      	movs	r3, #8
   154ca:	18fb      	adds	r3, r7, r3
   154cc:	2101      	movs	r1, #1
   154ce:	400a      	ands	r2, r1
   154d0:	00d0      	lsls	r0, r2, #3
   154d2:	781a      	ldrb	r2, [r3, #0]
   154d4:	2108      	movs	r1, #8
   154d6:	438a      	bics	r2, r1
   154d8:	1c11      	adds	r1, r2, #0
   154da:	1c02      	adds	r2, r0, #0
   154dc:	430a      	orrs	r2, r1
   154de:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   154e0:	2308      	movs	r3, #8
   154e2:	18fa      	adds	r2, r7, r3
   154e4:	6878      	ldr	r0, [r7, #4]
   154e6:	2301      	movs	r3, #1
   154e8:	2115      	movs	r1, #21
   154ea:	4c05      	ldr	r4, [pc, #20]	; (15500 <lsm6dso_xl_offset_weight_set+0x68>)
   154ec:	47a0      	blx	r4
   154ee:	0003      	movs	r3, r0
   154f0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   154f2:	68fb      	ldr	r3, [r7, #12]
}
   154f4:	0018      	movs	r0, r3
   154f6:	46bd      	mov	sp, r7
   154f8:	b005      	add	sp, #20
   154fa:	bd90      	pop	{r4, r7, pc}
   154fc:	00014d09 	.word	0x00014d09
   15500:	00014d4f 	.word	0x00014d4f

00015504 <lsm6dso_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
   15504:	b590      	push	{r4, r7, lr}
   15506:	b085      	sub	sp, #20
   15508:	af00      	add	r7, sp, #0
   1550a:	6078      	str	r0, [r7, #4]
   1550c:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
   1550e:	2308      	movs	r3, #8
   15510:	18fa      	adds	r2, r7, r3
   15512:	6878      	ldr	r0, [r7, #4]
   15514:	2301      	movs	r3, #1
   15516:	211e      	movs	r1, #30
   15518:	4c08      	ldr	r4, [pc, #32]	; (1553c <lsm6dso_xl_flag_data_ready_get+0x38>)
   1551a:	47a0      	blx	r4
   1551c:	0003      	movs	r3, r0
   1551e:	60fb      	str	r3, [r7, #12]
  *val = reg.xlda;
   15520:	2308      	movs	r3, #8
   15522:	18fb      	adds	r3, r7, r3
   15524:	781b      	ldrb	r3, [r3, #0]
   15526:	07db      	lsls	r3, r3, #31
   15528:	0fdb      	lsrs	r3, r3, #31
   1552a:	b2db      	uxtb	r3, r3
   1552c:	001a      	movs	r2, r3
   1552e:	683b      	ldr	r3, [r7, #0]
   15530:	701a      	strb	r2, [r3, #0]

  return ret;
   15532:	68fb      	ldr	r3, [r7, #12]
}
   15534:	0018      	movs	r0, r3
   15536:	46bd      	mov	sp, r7
   15538:	b005      	add	sp, #20
   1553a:	bd90      	pop	{r4, r7, pc}
   1553c:	00014d09 	.word	0x00014d09

00015540 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
   15540:	b590      	push	{r4, r7, lr}
   15542:	b087      	sub	sp, #28
   15544:	af00      	add	r7, sp, #0
   15546:	6078      	str	r0, [r7, #4]
   15548:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
   1554a:	230c      	movs	r3, #12
   1554c:	18fa      	adds	r2, r7, r3
   1554e:	6878      	ldr	r0, [r7, #4]
   15550:	2306      	movs	r3, #6
   15552:	2128      	movs	r1, #40	; 0x28
   15554:	4c26      	ldr	r4, [pc, #152]	; (155f0 <lsm6dso_acceleration_raw_get+0xb0>)
   15556:	47a0      	blx	r4
   15558:	0003      	movs	r3, r0
   1555a:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
   1555c:	230c      	movs	r3, #12
   1555e:	18fb      	adds	r3, r7, r3
   15560:	785b      	ldrb	r3, [r3, #1]
   15562:	b21a      	sxth	r2, r3
   15564:	683b      	ldr	r3, [r7, #0]
   15566:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
   15568:	683b      	ldr	r3, [r7, #0]
   1556a:	2200      	movs	r2, #0
   1556c:	5e9b      	ldrsh	r3, [r3, r2]
   1556e:	b29b      	uxth	r3, r3
   15570:	021b      	lsls	r3, r3, #8
   15572:	b29a      	uxth	r2, r3
   15574:	230c      	movs	r3, #12
   15576:	18fb      	adds	r3, r7, r3
   15578:	781b      	ldrb	r3, [r3, #0]
   1557a:	b29b      	uxth	r3, r3
   1557c:	18d3      	adds	r3, r2, r3
   1557e:	b29b      	uxth	r3, r3
   15580:	b21a      	sxth	r2, r3
   15582:	683b      	ldr	r3, [r7, #0]
   15584:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
   15586:	683b      	ldr	r3, [r7, #0]
   15588:	3302      	adds	r3, #2
   1558a:	220c      	movs	r2, #12
   1558c:	18ba      	adds	r2, r7, r2
   1558e:	78d2      	ldrb	r2, [r2, #3]
   15590:	b212      	sxth	r2, r2
   15592:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
   15594:	683b      	ldr	r3, [r7, #0]
   15596:	3302      	adds	r3, #2
   15598:	683a      	ldr	r2, [r7, #0]
   1559a:	3202      	adds	r2, #2
   1559c:	2100      	movs	r1, #0
   1559e:	5e52      	ldrsh	r2, [r2, r1]
   155a0:	b292      	uxth	r2, r2
   155a2:	0212      	lsls	r2, r2, #8
   155a4:	b291      	uxth	r1, r2
   155a6:	220c      	movs	r2, #12
   155a8:	18ba      	adds	r2, r7, r2
   155aa:	7892      	ldrb	r2, [r2, #2]
   155ac:	b292      	uxth	r2, r2
   155ae:	188a      	adds	r2, r1, r2
   155b0:	b292      	uxth	r2, r2
   155b2:	b212      	sxth	r2, r2
   155b4:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
   155b6:	683b      	ldr	r3, [r7, #0]
   155b8:	3304      	adds	r3, #4
   155ba:	220c      	movs	r2, #12
   155bc:	18ba      	adds	r2, r7, r2
   155be:	7952      	ldrb	r2, [r2, #5]
   155c0:	b212      	sxth	r2, r2
   155c2:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
   155c4:	683b      	ldr	r3, [r7, #0]
   155c6:	3304      	adds	r3, #4
   155c8:	683a      	ldr	r2, [r7, #0]
   155ca:	3204      	adds	r2, #4
   155cc:	2100      	movs	r1, #0
   155ce:	5e52      	ldrsh	r2, [r2, r1]
   155d0:	b292      	uxth	r2, r2
   155d2:	0212      	lsls	r2, r2, #8
   155d4:	b291      	uxth	r1, r2
   155d6:	220c      	movs	r2, #12
   155d8:	18ba      	adds	r2, r7, r2
   155da:	7912      	ldrb	r2, [r2, #4]
   155dc:	b292      	uxth	r2, r2
   155de:	188a      	adds	r2, r1, r2
   155e0:	b292      	uxth	r2, r2
   155e2:	b212      	sxth	r2, r2
   155e4:	801a      	strh	r2, [r3, #0]

  return ret;
   155e6:	697b      	ldr	r3, [r7, #20]
}
   155e8:	0018      	movs	r0, r3
   155ea:	46bd      	mov	sp, r7
   155ec:	b007      	add	sp, #28
   155ee:	bd90      	pop	{r4, r7, pc}
   155f0:	00014d09 	.word	0x00014d09

000155f4 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
   155f4:	b590      	push	{r4, r7, lr}
   155f6:	b085      	sub	sp, #20
   155f8:	af00      	add	r7, sp, #0
   155fa:	6078      	str	r0, [r7, #4]
   155fc:	000a      	movs	r2, r1
   155fe:	1cfb      	adds	r3, r7, #3
   15600:	701a      	strb	r2, [r3, #0]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   15602:	2308      	movs	r3, #8
   15604:	18fa      	adds	r2, r7, r3
   15606:	6878      	ldr	r0, [r7, #4]
   15608:	2301      	movs	r3, #1
   1560a:	2101      	movs	r1, #1
   1560c:	4c11      	ldr	r4, [pc, #68]	; (15654 <lsm6dso_mem_bank_set+0x60>)
   1560e:	47a0      	blx	r4
   15610:	0003      	movs	r3, r0
   15612:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15614:	68fb      	ldr	r3, [r7, #12]
   15616:	2b00      	cmp	r3, #0
   15618:	d117      	bne.n	1564a <lsm6dso_mem_bank_set+0x56>
  {
    reg.reg_access = (uint8_t)val;
   1561a:	1cfb      	adds	r3, r7, #3
   1561c:	781b      	ldrb	r3, [r3, #0]
   1561e:	2203      	movs	r2, #3
   15620:	4013      	ands	r3, r2
   15622:	b2da      	uxtb	r2, r3
   15624:	2308      	movs	r3, #8
   15626:	18fb      	adds	r3, r7, r3
   15628:	0190      	lsls	r0, r2, #6
   1562a:	781a      	ldrb	r2, [r3, #0]
   1562c:	213f      	movs	r1, #63	; 0x3f
   1562e:	400a      	ands	r2, r1
   15630:	1c11      	adds	r1, r2, #0
   15632:	1c02      	adds	r2, r0, #0
   15634:	430a      	orrs	r2, r1
   15636:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   15638:	2308      	movs	r3, #8
   1563a:	18fa      	adds	r2, r7, r3
   1563c:	6878      	ldr	r0, [r7, #4]
   1563e:	2301      	movs	r3, #1
   15640:	2101      	movs	r1, #1
   15642:	4c05      	ldr	r4, [pc, #20]	; (15658 <lsm6dso_mem_bank_set+0x64>)
   15644:	47a0      	blx	r4
   15646:	0003      	movs	r3, r0
   15648:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1564a:	68fb      	ldr	r3, [r7, #12]
}
   1564c:	0018      	movs	r0, r3
   1564e:	46bd      	mov	sp, r7
   15650:	b005      	add	sp, #20
   15652:	bd90      	pop	{r4, r7, pc}
   15654:	00014d09 	.word	0x00014d09
   15658:	00014d4f 	.word	0x00014d4f

0001565c <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   1565c:	b590      	push	{r4, r7, lr}
   1565e:	b085      	sub	sp, #20
   15660:	af00      	add	r7, sp, #0
   15662:	6078      	str	r0, [r7, #4]
   15664:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
   15666:	683a      	ldr	r2, [r7, #0]
   15668:	6878      	ldr	r0, [r7, #4]
   1566a:	2301      	movs	r3, #1
   1566c:	210f      	movs	r1, #15
   1566e:	4c04      	ldr	r4, [pc, #16]	; (15680 <lsm6dso_device_id_get+0x24>)
   15670:	47a0      	blx	r4
   15672:	0003      	movs	r3, r0
   15674:	60fb      	str	r3, [r7, #12]

  return ret;
   15676:	68fb      	ldr	r3, [r7, #12]
}
   15678:	0018      	movs	r0, r3
   1567a:	46bd      	mov	sp, r7
   1567c:	b005      	add	sp, #20
   1567e:	bd90      	pop	{r4, r7, pc}
   15680:	00014d09 	.word	0x00014d09

00015684 <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
   15684:	b590      	push	{r4, r7, lr}
   15686:	b085      	sub	sp, #20
   15688:	af00      	add	r7, sp, #0
   1568a:	6078      	str	r0, [r7, #4]
   1568c:	000a      	movs	r2, r1
   1568e:	1cfb      	adds	r3, r7, #3
   15690:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15692:	2308      	movs	r3, #8
   15694:	18fa      	adds	r2, r7, r3
   15696:	6878      	ldr	r0, [r7, #4]
   15698:	2301      	movs	r3, #1
   1569a:	2112      	movs	r1, #18
   1569c:	4c12      	ldr	r4, [pc, #72]	; (156e8 <lsm6dso_reset_set+0x64>)
   1569e:	47a0      	blx	r4
   156a0:	0003      	movs	r3, r0
   156a2:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   156a4:	68fb      	ldr	r3, [r7, #12]
   156a6:	2b00      	cmp	r3, #0
   156a8:	d119      	bne.n	156de <lsm6dso_reset_set+0x5a>
  {
    reg.sw_reset = val;
   156aa:	1cfb      	adds	r3, r7, #3
   156ac:	781b      	ldrb	r3, [r3, #0]
   156ae:	2201      	movs	r2, #1
   156b0:	4013      	ands	r3, r2
   156b2:	b2da      	uxtb	r2, r3
   156b4:	2308      	movs	r3, #8
   156b6:	18fb      	adds	r3, r7, r3
   156b8:	2101      	movs	r1, #1
   156ba:	400a      	ands	r2, r1
   156bc:	0010      	movs	r0, r2
   156be:	781a      	ldrb	r2, [r3, #0]
   156c0:	2101      	movs	r1, #1
   156c2:	438a      	bics	r2, r1
   156c4:	1c11      	adds	r1, r2, #0
   156c6:	1c02      	adds	r2, r0, #0
   156c8:	430a      	orrs	r2, r1
   156ca:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   156cc:	2308      	movs	r3, #8
   156ce:	18fa      	adds	r2, r7, r3
   156d0:	6878      	ldr	r0, [r7, #4]
   156d2:	2301      	movs	r3, #1
   156d4:	2112      	movs	r1, #18
   156d6:	4c05      	ldr	r4, [pc, #20]	; (156ec <lsm6dso_reset_set+0x68>)
   156d8:	47a0      	blx	r4
   156da:	0003      	movs	r3, r0
   156dc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   156de:	68fb      	ldr	r3, [r7, #12]
}
   156e0:	0018      	movs	r0, r3
   156e2:	46bd      	mov	sp, r7
   156e4:	b005      	add	sp, #20
   156e6:	bd90      	pop	{r4, r7, pc}
   156e8:	00014d09 	.word	0x00014d09
   156ec:	00014d4f 	.word	0x00014d4f

000156f0 <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
   156f0:	b590      	push	{r4, r7, lr}
   156f2:	b085      	sub	sp, #20
   156f4:	af00      	add	r7, sp, #0
   156f6:	6078      	str	r0, [r7, #4]
   156f8:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   156fa:	2308      	movs	r3, #8
   156fc:	18fa      	adds	r2, r7, r3
   156fe:	6878      	ldr	r0, [r7, #4]
   15700:	2301      	movs	r3, #1
   15702:	2112      	movs	r1, #18
   15704:	4c08      	ldr	r4, [pc, #32]	; (15728 <lsm6dso_reset_get+0x38>)
   15706:	47a0      	blx	r4
   15708:	0003      	movs	r3, r0
   1570a:	60fb      	str	r3, [r7, #12]
  *val = reg.sw_reset;
   1570c:	2308      	movs	r3, #8
   1570e:	18fb      	adds	r3, r7, r3
   15710:	781b      	ldrb	r3, [r3, #0]
   15712:	07db      	lsls	r3, r3, #31
   15714:	0fdb      	lsrs	r3, r3, #31
   15716:	b2db      	uxtb	r3, r3
   15718:	001a      	movs	r2, r3
   1571a:	683b      	ldr	r3, [r7, #0]
   1571c:	701a      	strb	r2, [r3, #0]

  return ret;
   1571e:	68fb      	ldr	r3, [r7, #12]
}
   15720:	0018      	movs	r0, r3
   15722:	46bd      	mov	sp, r7
   15724:	b005      	add	sp, #20
   15726:	bd90      	pop	{r4, r7, pc}
   15728:	00014d09 	.word	0x00014d09

0001572c <lsm6dso_xl_filter_lp2_set>:
  * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
   1572c:	b590      	push	{r4, r7, lr}
   1572e:	b085      	sub	sp, #20
   15730:	af00      	add	r7, sp, #0
   15732:	6078      	str	r0, [r7, #4]
   15734:	000a      	movs	r2, r1
   15736:	1cfb      	adds	r3, r7, #3
   15738:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   1573a:	2308      	movs	r3, #8
   1573c:	18fa      	adds	r2, r7, r3
   1573e:	6878      	ldr	r0, [r7, #4]
   15740:	2301      	movs	r3, #1
   15742:	2110      	movs	r1, #16
   15744:	4c12      	ldr	r4, [pc, #72]	; (15790 <lsm6dso_xl_filter_lp2_set+0x64>)
   15746:	47a0      	blx	r4
   15748:	0003      	movs	r3, r0
   1574a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   1574c:	68fb      	ldr	r3, [r7, #12]
   1574e:	2b00      	cmp	r3, #0
   15750:	d119      	bne.n	15786 <lsm6dso_xl_filter_lp2_set+0x5a>
  {
    reg.lpf2_xl_en = val;
   15752:	1cfb      	adds	r3, r7, #3
   15754:	781b      	ldrb	r3, [r3, #0]
   15756:	2201      	movs	r2, #1
   15758:	4013      	ands	r3, r2
   1575a:	b2da      	uxtb	r2, r3
   1575c:	2308      	movs	r3, #8
   1575e:	18fb      	adds	r3, r7, r3
   15760:	2101      	movs	r1, #1
   15762:	400a      	ands	r2, r1
   15764:	1890      	adds	r0, r2, r2
   15766:	781a      	ldrb	r2, [r3, #0]
   15768:	2102      	movs	r1, #2
   1576a:	438a      	bics	r2, r1
   1576c:	1c11      	adds	r1, r2, #0
   1576e:	1c02      	adds	r2, r0, #0
   15770:	430a      	orrs	r2, r1
   15772:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15774:	2308      	movs	r3, #8
   15776:	18fa      	adds	r2, r7, r3
   15778:	6878      	ldr	r0, [r7, #4]
   1577a:	2301      	movs	r3, #1
   1577c:	2110      	movs	r1, #16
   1577e:	4c05      	ldr	r4, [pc, #20]	; (15794 <lsm6dso_xl_filter_lp2_set+0x68>)
   15780:	47a0      	blx	r4
   15782:	0003      	movs	r3, r0
   15784:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15786:	68fb      	ldr	r3, [r7, #12]
}
   15788:	0018      	movs	r0, r3
   1578a:	46bd      	mov	sp, r7
   1578c:	b005      	add	sp, #20
   1578e:	bd90      	pop	{r4, r7, pc}
   15790:	00014d09 	.word	0x00014d09
   15794:	00014d4f 	.word	0x00014d4f

00015798 <lsm6dso_xl_hp_path_on_out_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dso_hp_slope_xl_en_t val)
{
   15798:	b590      	push	{r4, r7, lr}
   1579a:	b085      	sub	sp, #20
   1579c:	af00      	add	r7, sp, #0
   1579e:	6078      	str	r0, [r7, #4]
   157a0:	000a      	movs	r2, r1
   157a2:	1cfb      	adds	r3, r7, #3
   157a4:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl8_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   157a6:	2308      	movs	r3, #8
   157a8:	18fa      	adds	r2, r7, r3
   157aa:	6878      	ldr	r0, [r7, #4]
   157ac:	2301      	movs	r3, #1
   157ae:	2117      	movs	r1, #23
   157b0:	4c25      	ldr	r4, [pc, #148]	; (15848 <lsm6dso_xl_hp_path_on_out_set+0xb0>)
   157b2:	47a0      	blx	r4
   157b4:	0003      	movs	r3, r0
   157b6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   157b8:	68fb      	ldr	r3, [r7, #12]
   157ba:	2b00      	cmp	r3, #0
   157bc:	d13f      	bne.n	1583e <lsm6dso_xl_hp_path_on_out_set+0xa6>
  {
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
   157be:	1cfb      	adds	r3, r7, #3
   157c0:	781b      	ldrb	r3, [r3, #0]
   157c2:	091b      	lsrs	r3, r3, #4
   157c4:	b2db      	uxtb	r3, r3
   157c6:	1c1a      	adds	r2, r3, #0
   157c8:	2301      	movs	r3, #1
   157ca:	4013      	ands	r3, r2
   157cc:	b2da      	uxtb	r2, r3
   157ce:	2308      	movs	r3, #8
   157d0:	18fb      	adds	r3, r7, r3
   157d2:	2101      	movs	r1, #1
   157d4:	400a      	ands	r2, r1
   157d6:	0090      	lsls	r0, r2, #2
   157d8:	781a      	ldrb	r2, [r3, #0]
   157da:	2104      	movs	r1, #4
   157dc:	438a      	bics	r2, r1
   157de:	1c11      	adds	r1, r2, #0
   157e0:	1c02      	adds	r2, r0, #0
   157e2:	430a      	orrs	r2, r1
   157e4:	701a      	strb	r2, [r3, #0]
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
   157e6:	1cfb      	adds	r3, r7, #3
   157e8:	781b      	ldrb	r3, [r3, #0]
   157ea:	095b      	lsrs	r3, r3, #5
   157ec:	b2db      	uxtb	r3, r3
   157ee:	1c1a      	adds	r2, r3, #0
   157f0:	2301      	movs	r3, #1
   157f2:	4013      	ands	r3, r2
   157f4:	b2da      	uxtb	r2, r3
   157f6:	2308      	movs	r3, #8
   157f8:	18fb      	adds	r3, r7, r3
   157fa:	2101      	movs	r1, #1
   157fc:	400a      	ands	r2, r1
   157fe:	0110      	lsls	r0, r2, #4
   15800:	781a      	ldrb	r2, [r3, #0]
   15802:	2110      	movs	r1, #16
   15804:	438a      	bics	r2, r1
   15806:	1c11      	adds	r1, r2, #0
   15808:	1c02      	adds	r2, r0, #0
   1580a:	430a      	orrs	r2, r1
   1580c:	701a      	strb	r2, [r3, #0]
    reg.hpcf_xl = (uint8_t)val & 0x07U;
   1580e:	1cfb      	adds	r3, r7, #3
   15810:	781b      	ldrb	r3, [r3, #0]
   15812:	2207      	movs	r2, #7
   15814:	4013      	ands	r3, r2
   15816:	b2da      	uxtb	r2, r3
   15818:	2308      	movs	r3, #8
   1581a:	18fb      	adds	r3, r7, r3
   1581c:	0150      	lsls	r0, r2, #5
   1581e:	781a      	ldrb	r2, [r3, #0]
   15820:	211f      	movs	r1, #31
   15822:	400a      	ands	r2, r1
   15824:	1c11      	adds	r1, r2, #0
   15826:	1c02      	adds	r2, r0, #0
   15828:	430a      	orrs	r2, r1
   1582a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   1582c:	2308      	movs	r3, #8
   1582e:	18fa      	adds	r2, r7, r3
   15830:	6878      	ldr	r0, [r7, #4]
   15832:	2301      	movs	r3, #1
   15834:	2117      	movs	r1, #23
   15836:	4c05      	ldr	r4, [pc, #20]	; (1584c <lsm6dso_xl_hp_path_on_out_set+0xb4>)
   15838:	47a0      	blx	r4
   1583a:	0003      	movs	r3, r0
   1583c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1583e:	68fb      	ldr	r3, [r7, #12]
}
   15840:	0018      	movs	r0, r3
   15842:	46bd      	mov	sp, r7
   15844:	b005      	add	sp, #20
   15846:	bd90      	pop	{r4, r7, pc}
   15848:	00014d09 	.word	0x00014d09
   1584c:	00014d4f 	.word	0x00014d4f

00015850 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
   15850:	b590      	push	{r4, r7, lr}
   15852:	b087      	sub	sp, #28
   15854:	af00      	add	r7, sp, #0
   15856:	6078      	str	r0, [r7, #4]
   15858:	000a      	movs	r2, r1
   1585a:	1cfb      	adds	r3, r7, #3
   1585c:	701a      	strb	r2, [r3, #0]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   1585e:	230c      	movs	r3, #12
   15860:	18fa      	adds	r2, r7, r3
   15862:	6878      	ldr	r0, [r7, #4]
   15864:	2301      	movs	r3, #1
   15866:	2118      	movs	r1, #24
   15868:	4c28      	ldr	r4, [pc, #160]	; (1590c <lsm6dso_i3c_disable_set+0xbc>)
   1586a:	47a0      	blx	r4
   1586c:	0003      	movs	r3, r0
   1586e:	617b      	str	r3, [r7, #20]

  if (ret == 0)
   15870:	697b      	ldr	r3, [r7, #20]
   15872:	2b00      	cmp	r3, #0
   15874:	d11c      	bne.n	158b0 <lsm6dso_i3c_disable_set+0x60>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
   15876:	1cfb      	adds	r3, r7, #3
   15878:	781b      	ldrb	r3, [r3, #0]
   1587a:	09db      	lsrs	r3, r3, #7
   1587c:	b2db      	uxtb	r3, r3
   1587e:	1c1a      	adds	r2, r3, #0
   15880:	2301      	movs	r3, #1
   15882:	4013      	ands	r3, r2
   15884:	b2da      	uxtb	r2, r3
   15886:	230c      	movs	r3, #12
   15888:	18fb      	adds	r3, r7, r3
   1588a:	2101      	movs	r1, #1
   1588c:	400a      	ands	r2, r1
   1588e:	1890      	adds	r0, r2, r2
   15890:	781a      	ldrb	r2, [r3, #0]
   15892:	2102      	movs	r1, #2
   15894:	438a      	bics	r2, r1
   15896:	1c11      	adds	r1, r2, #0
   15898:	1c02      	adds	r2, r0, #0
   1589a:	430a      	orrs	r2, r1
   1589c:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   1589e:	230c      	movs	r3, #12
   158a0:	18fa      	adds	r2, r7, r3
   158a2:	6878      	ldr	r0, [r7, #4]
   158a4:	2301      	movs	r3, #1
   158a6:	2118      	movs	r1, #24
   158a8:	4c19      	ldr	r4, [pc, #100]	; (15910 <lsm6dso_i3c_disable_set+0xc0>)
   158aa:	47a0      	blx	r4
   158ac:	0003      	movs	r3, r0
   158ae:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
   158b0:	697b      	ldr	r3, [r7, #20]
   158b2:	2b00      	cmp	r3, #0
   158b4:	d108      	bne.n	158c8 <lsm6dso_i3c_disable_set+0x78>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   158b6:	2310      	movs	r3, #16
   158b8:	18fa      	adds	r2, r7, r3
   158ba:	6878      	ldr	r0, [r7, #4]
   158bc:	2301      	movs	r3, #1
   158be:	2162      	movs	r1, #98	; 0x62
   158c0:	4c12      	ldr	r4, [pc, #72]	; (1590c <lsm6dso_i3c_disable_set+0xbc>)
   158c2:	47a0      	blx	r4
   158c4:	0003      	movs	r3, r0
   158c6:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
   158c8:	697b      	ldr	r3, [r7, #20]
   158ca:	2b00      	cmp	r3, #0
   158cc:	d119      	bne.n	15902 <lsm6dso_i3c_disable_set+0xb2>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
   158ce:	1cfb      	adds	r3, r7, #3
   158d0:	781b      	ldrb	r3, [r3, #0]
   158d2:	2203      	movs	r2, #3
   158d4:	4013      	ands	r3, r2
   158d6:	b2da      	uxtb	r2, r3
   158d8:	2310      	movs	r3, #16
   158da:	18fb      	adds	r3, r7, r3
   158dc:	2103      	movs	r1, #3
   158de:	400a      	ands	r2, r1
   158e0:	00d0      	lsls	r0, r2, #3
   158e2:	781a      	ldrb	r2, [r3, #0]
   158e4:	2118      	movs	r1, #24
   158e6:	438a      	bics	r2, r1
   158e8:	1c11      	adds	r1, r2, #0
   158ea:	1c02      	adds	r2, r0, #0
   158ec:	430a      	orrs	r2, r1
   158ee:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   158f0:	2310      	movs	r3, #16
   158f2:	18fa      	adds	r2, r7, r3
   158f4:	6878      	ldr	r0, [r7, #4]
   158f6:	2301      	movs	r3, #1
   158f8:	2162      	movs	r1, #98	; 0x62
   158fa:	4c05      	ldr	r4, [pc, #20]	; (15910 <lsm6dso_i3c_disable_set+0xc0>)
   158fc:	47a0      	blx	r4
   158fe:	0003      	movs	r3, r0
   15900:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
   15902:	697b      	ldr	r3, [r7, #20]
}
   15904:	0018      	movs	r0, r3
   15906:	46bd      	mov	sp, r7
   15908:	b007      	add	sp, #28
   1590a:	bd90      	pop	{r4, r7, pc}
   1590c:	00014d09 	.word	0x00014d09
   15910:	00014d4f 	.word	0x00014d4f

00015914 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
   15914:	b590      	push	{r4, r7, lr}
   15916:	b085      	sub	sp, #20
   15918:	af00      	add	r7, sp, #0
   1591a:	6078      	str	r0, [r7, #4]
   1591c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   1591e:	687b      	ldr	r3, [r7, #4]
   15920:	2102      	movs	r1, #2
   15922:	0018      	movs	r0, r3
   15924:	4b0e      	ldr	r3, [pc, #56]	; (15960 <lsm6dso_fsm_enable_get+0x4c>)
   15926:	4798      	blx	r3
   15928:	0003      	movs	r3, r0
   1592a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   1592c:	68fb      	ldr	r3, [r7, #12]
   1592e:	2b00      	cmp	r3, #0
   15930:	d107      	bne.n	15942 <lsm6dso_fsm_enable_get+0x2e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
   15932:	683a      	ldr	r2, [r7, #0]
   15934:	6878      	ldr	r0, [r7, #4]
   15936:	2302      	movs	r3, #2
   15938:	2146      	movs	r1, #70	; 0x46
   1593a:	4c0a      	ldr	r4, [pc, #40]	; (15964 <lsm6dso_fsm_enable_get+0x50>)
   1593c:	47a0      	blx	r4
   1593e:	0003      	movs	r3, r0
   15940:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
   15942:	68fb      	ldr	r3, [r7, #12]
   15944:	2b00      	cmp	r3, #0
   15946:	d106      	bne.n	15956 <lsm6dso_fsm_enable_get+0x42>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   15948:	687b      	ldr	r3, [r7, #4]
   1594a:	2100      	movs	r1, #0
   1594c:	0018      	movs	r0, r3
   1594e:	4b04      	ldr	r3, [pc, #16]	; (15960 <lsm6dso_fsm_enable_get+0x4c>)
   15950:	4798      	blx	r3
   15952:	0003      	movs	r3, r0
   15954:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15956:	68fb      	ldr	r3, [r7, #12]
}
   15958:	0018      	movs	r0, r3
   1595a:	46bd      	mov	sp, r7
   1595c:	b005      	add	sp, #20
   1595e:	bd90      	pop	{r4, r7, pc}
   15960:	000155f5 	.word	0x000155f5
   15964:	00014d09 	.word	0x00014d09

00015968 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
   15968:	b590      	push	{r4, r7, lr}
   1596a:	b085      	sub	sp, #20
   1596c:	af00      	add	r7, sp, #0
   1596e:	6078      	str	r0, [r7, #4]
   15970:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   15972:	687b      	ldr	r3, [r7, #4]
   15974:	2102      	movs	r1, #2
   15976:	0018      	movs	r0, r3
   15978:	4b21      	ldr	r3, [pc, #132]	; (15a00 <lsm6dso_fsm_data_rate_get+0x98>)
   1597a:	4798      	blx	r3
   1597c:	0003      	movs	r3, r0
   1597e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15980:	68fb      	ldr	r3, [r7, #12]
   15982:	2b00      	cmp	r3, #0
   15984:	d108      	bne.n	15998 <lsm6dso_fsm_data_rate_get+0x30>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
   15986:	2308      	movs	r3, #8
   15988:	18fa      	adds	r2, r7, r3
   1598a:	6878      	ldr	r0, [r7, #4]
   1598c:	2301      	movs	r3, #1
   1598e:	215f      	movs	r1, #95	; 0x5f
   15990:	4c1c      	ldr	r4, [pc, #112]	; (15a04 <lsm6dso_fsm_data_rate_get+0x9c>)
   15992:	47a0      	blx	r4
   15994:	0003      	movs	r3, r0
   15996:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
   15998:	68fb      	ldr	r3, [r7, #12]
   1599a:	2b00      	cmp	r3, #0
   1599c:	d12b      	bne.n	159f6 <lsm6dso_fsm_data_rate_get+0x8e>
  {
    switch (reg.fsm_odr)
   1599e:	2308      	movs	r3, #8
   159a0:	18fb      	adds	r3, r7, r3
   159a2:	781b      	ldrb	r3, [r3, #0]
   159a4:	06db      	lsls	r3, r3, #27
   159a6:	0f9b      	lsrs	r3, r3, #30
   159a8:	b2db      	uxtb	r3, r3
   159aa:	2b01      	cmp	r3, #1
   159ac:	d00c      	beq.n	159c8 <lsm6dso_fsm_data_rate_get+0x60>
   159ae:	dc02      	bgt.n	159b6 <lsm6dso_fsm_data_rate_get+0x4e>
   159b0:	2b00      	cmp	r3, #0
   159b2:	d005      	beq.n	159c0 <lsm6dso_fsm_data_rate_get+0x58>
   159b4:	e014      	b.n	159e0 <lsm6dso_fsm_data_rate_get+0x78>
   159b6:	2b02      	cmp	r3, #2
   159b8:	d00a      	beq.n	159d0 <lsm6dso_fsm_data_rate_get+0x68>
   159ba:	2b03      	cmp	r3, #3
   159bc:	d00c      	beq.n	159d8 <lsm6dso_fsm_data_rate_get+0x70>
   159be:	e00f      	b.n	159e0 <lsm6dso_fsm_data_rate_get+0x78>
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   159c0:	683b      	ldr	r3, [r7, #0]
   159c2:	2200      	movs	r2, #0
   159c4:	701a      	strb	r2, [r3, #0]
        break;
   159c6:	e00f      	b.n	159e8 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
   159c8:	683b      	ldr	r3, [r7, #0]
   159ca:	2201      	movs	r2, #1
   159cc:	701a      	strb	r2, [r3, #0]
        break;
   159ce:	e00b      	b.n	159e8 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
   159d0:	683b      	ldr	r3, [r7, #0]
   159d2:	2202      	movs	r2, #2
   159d4:	701a      	strb	r2, [r3, #0]
        break;
   159d6:	e007      	b.n	159e8 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
   159d8:	683b      	ldr	r3, [r7, #0]
   159da:	2203      	movs	r2, #3
   159dc:	701a      	strb	r2, [r3, #0]
        break;
   159de:	e003      	b.n	159e8 <lsm6dso_fsm_data_rate_get+0x80>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   159e0:	683b      	ldr	r3, [r7, #0]
   159e2:	2200      	movs	r2, #0
   159e4:	701a      	strb	r2, [r3, #0]
        break;
   159e6:	46c0      	nop			; (mov r8, r8)
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   159e8:	687b      	ldr	r3, [r7, #4]
   159ea:	2100      	movs	r1, #0
   159ec:	0018      	movs	r0, r3
   159ee:	4b04      	ldr	r3, [pc, #16]	; (15a00 <lsm6dso_fsm_data_rate_get+0x98>)
   159f0:	4798      	blx	r3
   159f2:	0003      	movs	r3, r0
   159f4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   159f6:	68fb      	ldr	r3, [r7, #12]
}
   159f8:	0018      	movs	r0, r3
   159fa:	46bd      	mov	sp, r7
   159fc:	b005      	add	sp, #20
   159fe:	bd90      	pop	{r4, r7, pc}
   15a00:	000155f5 	.word	0x000155f5
   15a04:	00014d09 	.word	0x00014d09

00015a08 <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   15a08:	b580      	push	{r7, lr}
   15a0a:	b084      	sub	sp, #16
   15a0c:	af00      	add	r7, sp, #0
   15a0e:	60f8      	str	r0, [r7, #12]
   15a10:	0008      	movs	r0, r1
   15a12:	607a      	str	r2, [r7, #4]
   15a14:	0019      	movs	r1, r3
   15a16:	230b      	movs	r3, #11
   15a18:	18fb      	adds	r3, r7, r3
   15a1a:	1c02      	adds	r2, r0, #0
   15a1c:	701a      	strb	r2, [r3, #0]
   15a1e:	2308      	movs	r3, #8
   15a20:	18fb      	adds	r3, r7, r3
   15a22:	1c0a      	adds	r2, r1, #0
   15a24:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
return 0;
   15a26:	2300      	movs	r3, #0

}
   15a28:	0018      	movs	r0, r3
   15a2a:	46bd      	mov	sp, r7
   15a2c:	b004      	add	sp, #16
   15a2e:	bd80      	pop	{r7, pc}

00015a30 <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cReadDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   15a30:	b580      	push	{r7, lr}
   15a32:	b084      	sub	sp, #16
   15a34:	af00      	add	r7, sp, #0
   15a36:	60f8      	str	r0, [r7, #12]
   15a38:	0008      	movs	r0, r1
   15a3a:	607a      	str	r2, [r7, #4]
   15a3c:	0019      	movs	r1, r3
   15a3e:	230b      	movs	r3, #11
   15a40:	18fb      	adds	r3, r7, r3
   15a42:	1c02      	adds	r2, r0, #0
   15a44:	701a      	strb	r2, [r3, #0]
   15a46:	2308      	movs	r3, #8
   15a48:	18fb      	adds	r3, r7, r3
   15a4a:	1c0a      	adds	r2, r1, #0
   15a4c:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
return 0;
   15a4e:	2300      	movs	r3, #0


}
   15a50:	0018      	movs	r0, r3
   15a52:	46bd      	mov	sp, r7
   15a54:	b004      	add	sp, #16
   15a56:	bd80      	pop	{r7, pc}

00015a58 <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
   15a58:	b580      	push	{r7, lr}
   15a5a:	af00      	add	r7, sp, #0
return &dev_ctx;
   15a5c:	4b01      	ldr	r3, [pc, #4]	; (15a64 <GetImuStruct+0xc>)
}
   15a5e:	0018      	movs	r0, r3
   15a60:	46bd      	mov	sp, r7
   15a62:	bd80      	pop	{r7, pc}
   15a64:	20000020 	.word	0x20000020

00015a68 <InitImu>:



int32_t InitImu(void)
{
   15a68:	b580      	push	{r7, lr}
   15a6a:	b082      	sub	sp, #8
   15a6c:	af00      	add	r7, sp, #0
uint8_t rst;
int32_t error = 0;
   15a6e:	2300      	movs	r3, #0
   15a70:	607b      	str	r3, [r7, #4]
/*
   * Restore default configuration
   */
  error = lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
   15a72:	4b23      	ldr	r3, [pc, #140]	; (15b00 <InitImu+0x98>)
   15a74:	2101      	movs	r1, #1
   15a76:	0018      	movs	r0, r3
   15a78:	4b22      	ldr	r3, [pc, #136]	; (15b04 <InitImu+0x9c>)
   15a7a:	4798      	blx	r3
   15a7c:	0003      	movs	r3, r0
   15a7e:	607b      	str	r3, [r7, #4]
  do {
    error |= lsm6dso_reset_get(&dev_ctx, &rst);
   15a80:	1cfa      	adds	r2, r7, #3
   15a82:	4b1f      	ldr	r3, [pc, #124]	; (15b00 <InitImu+0x98>)
   15a84:	0011      	movs	r1, r2
   15a86:	0018      	movs	r0, r3
   15a88:	4b1f      	ldr	r3, [pc, #124]	; (15b08 <InitImu+0xa0>)
   15a8a:	4798      	blx	r3
   15a8c:	0002      	movs	r2, r0
   15a8e:	687b      	ldr	r3, [r7, #4]
   15a90:	4313      	orrs	r3, r2
   15a92:	607b      	str	r3, [r7, #4]
  } while (rst);
   15a94:	1cfb      	adds	r3, r7, #3
   15a96:	781b      	ldrb	r3, [r3, #0]
   15a98:	2b00      	cmp	r3, #0
   15a9a:	d1f1      	bne.n	15a80 <InitImu+0x18>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
   15a9c:	4b18      	ldr	r3, [pc, #96]	; (15b00 <InitImu+0x98>)
   15a9e:	2180      	movs	r1, #128	; 0x80
   15aa0:	0018      	movs	r0, r3
   15aa2:	4b1a      	ldr	r3, [pc, #104]	; (15b0c <InitImu+0xa4>)
   15aa4:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
   15aa6:	4b16      	ldr	r3, [pc, #88]	; (15b00 <InitImu+0x98>)
   15aa8:	2101      	movs	r1, #1
   15aaa:	0018      	movs	r0, r3
   15aac:	4b18      	ldr	r3, [pc, #96]	; (15b10 <InitImu+0xa8>)
   15aae:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
   15ab0:	4b13      	ldr	r3, [pc, #76]	; (15b00 <InitImu+0x98>)
   15ab2:	2100      	movs	r1, #0
   15ab4:	0018      	movs	r0, r3
   15ab6:	4b17      	ldr	r3, [pc, #92]	; (15b14 <InitImu+0xac>)
   15ab8:	4798      	blx	r3
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_12Hz5);
   15aba:	4b11      	ldr	r3, [pc, #68]	; (15b00 <InitImu+0x98>)
   15abc:	2101      	movs	r1, #1
   15abe:	0018      	movs	r0, r3
   15ac0:	4b15      	ldr	r3, [pc, #84]	; (15b18 <InitImu+0xb0>)
   15ac2:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
   15ac4:	4b0e      	ldr	r3, [pc, #56]	; (15b00 <InitImu+0x98>)
   15ac6:	2101      	movs	r1, #1
   15ac8:	0018      	movs	r0, r3
   15aca:	4b14      	ldr	r3, [pc, #80]	; (15b1c <InitImu+0xb4>)
   15acc:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
   15ace:	4b0c      	ldr	r3, [pc, #48]	; (15b00 <InitImu+0x98>)
   15ad0:	2100      	movs	r1, #0
   15ad2:	0018      	movs	r0, r3
   15ad4:	4b12      	ldr	r3, [pc, #72]	; (15b20 <InitImu+0xb8>)
   15ad6:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
   15ad8:	4b09      	ldr	r3, [pc, #36]	; (15b00 <InitImu+0x98>)
   15ada:	2106      	movs	r1, #6
   15adc:	0018      	movs	r0, r3
   15ade:	4b11      	ldr	r3, [pc, #68]	; (15b24 <InitImu+0xbc>)
   15ae0:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
   15ae2:	4b07      	ldr	r3, [pc, #28]	; (15b00 <InitImu+0x98>)
   15ae4:	2104      	movs	r1, #4
   15ae6:	0018      	movs	r0, r3
   15ae8:	4b0f      	ldr	r3, [pc, #60]	; (15b28 <InitImu+0xc0>)
   15aea:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
   15aec:	4b04      	ldr	r3, [pc, #16]	; (15b00 <InitImu+0x98>)
   15aee:	2101      	movs	r1, #1
   15af0:	0018      	movs	r0, r3
   15af2:	4b0e      	ldr	r3, [pc, #56]	; (15b2c <InitImu+0xc4>)
   15af4:	4798      	blx	r3

  return error;
   15af6:	687b      	ldr	r3, [r7, #4]
}
   15af8:	0018      	movs	r0, r3
   15afa:	46bd      	mov	sp, r7
   15afc:	b002      	add	sp, #8
   15afe:	bd80      	pop	{r7, pc}
   15b00:	20000020 	.word	0x20000020
   15b04:	00015685 	.word	0x00015685
   15b08:	000156f1 	.word	0x000156f1
   15b0c:	00015851 	.word	0x00015851
   15b10:	0001542d 	.word	0x0001542d
   15b14:	00015499 	.word	0x00015499
   15b18:	00014e39 	.word	0x00014e39
   15b1c:	00015169 	.word	0x00015169
   15b20:	00014dcd 	.word	0x00014dcd
   15b24:	000150fd 	.word	0x000150fd
   15b28:	00015799 	.word	0x00015799
   15b2c:	0001572d 	.word	0x0001572d

00015b30 <reg_write>:
#include "I2cDriver/I2cDriver.h"
#include "SerialConsole.h"
uint8_t msgOut[64];
I2C_Data adcData; 
static int32_t reg_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   15b30:	b580      	push	{r7, lr}
   15b32:	b096      	sub	sp, #88	; 0x58
   15b34:	af00      	add	r7, sp, #0
   15b36:	60f8      	str	r0, [r7, #12]
   15b38:	0008      	movs	r0, r1
   15b3a:	607a      	str	r2, [r7, #4]
   15b3c:	0019      	movs	r1, r3
   15b3e:	230b      	movs	r3, #11
   15b40:	18fb      	adds	r3, r7, r3
   15b42:	1c02      	adds	r2, r0, #0
   15b44:	701a      	strb	r2, [r3, #0]
   15b46:	2308      	movs	r3, #8
   15b48:	18fb      	adds	r3, r7, r3
   15b4a:	1c0a      	adds	r2, r1, #0
   15b4c:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
	int32_t error = ERROR_NONE;
   15b4e:	2300      	movs	r3, #0
   15b50:	653b      	str	r3, [r7, #80]	; 0x50
	msgOut[0]=reg;
   15b52:	4b19      	ldr	r3, [pc, #100]	; (15bb8 <reg_write+0x88>)
   15b54:	220b      	movs	r2, #11
   15b56:	18ba      	adds	r2, r7, r2
   15b58:	7812      	ldrb	r2, [r2, #0]
   15b5a:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<len;i++)
   15b5c:	2300      	movs	r3, #0
   15b5e:	657b      	str	r3, [r7, #84]	; 0x54
   15b60:	e00a      	b.n	15b78 <reg_write+0x48>
	{
		msgOut[1+i]=bufp[i];
   15b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   15b64:	3301      	adds	r3, #1
   15b66:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   15b68:	6879      	ldr	r1, [r7, #4]
   15b6a:	188a      	adds	r2, r1, r2
   15b6c:	7811      	ldrb	r1, [r2, #0]
   15b6e:	4a12      	ldr	r2, [pc, #72]	; (15bb8 <reg_write+0x88>)
   15b70:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<len;i++)
   15b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   15b74:	3301      	adds	r3, #1
   15b76:	657b      	str	r3, [r7, #84]	; 0x54
   15b78:	2308      	movs	r3, #8
   15b7a:	18fb      	adds	r3, r7, r3
   15b7c:	881a      	ldrh	r2, [r3, #0]
   15b7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   15b80:	429a      	cmp	r2, r3
   15b82:	dcee      	bgt.n	15b62 <reg_write+0x32>
	}
	
	adcData.address=ADC_SLAVE_ADDR;	///<Address of the I2C device
   15b84:	4b0d      	ldr	r3, [pc, #52]	; (15bbc <reg_write+0x8c>)
   15b86:	222a      	movs	r2, #42	; 0x2a
   15b88:	701a      	strb	r2, [r3, #0]
	adcData.msgOut=&msgOut;		///<Pointer to array buffer that we will write from
   15b8a:	4b0c      	ldr	r3, [pc, #48]	; (15bbc <reg_write+0x8c>)
   15b8c:	4a0a      	ldr	r2, [pc, #40]	; (15bb8 <reg_write+0x88>)
   15b8e:	605a      	str	r2, [r3, #4]
	adcData.lenOut=1+len;
   15b90:	2308      	movs	r3, #8
   15b92:	18fb      	adds	r3, r7, r3
   15b94:	881b      	ldrh	r3, [r3, #0]
   15b96:	3301      	adds	r3, #1
   15b98:	b29a      	uxth	r2, r3
   15b9a:	4b08      	ldr	r3, [pc, #32]	; (15bbc <reg_write+0x8c>)
   15b9c:	81da      	strh	r2, [r3, #14]
	error= I2cWriteDataWait(&adcData, 100);
   15b9e:	4b07      	ldr	r3, [pc, #28]	; (15bbc <reg_write+0x8c>)
   15ba0:	2164      	movs	r1, #100	; 0x64
   15ba2:	0018      	movs	r0, r3
   15ba4:	4b06      	ldr	r3, [pc, #24]	; (15bc0 <reg_write+0x90>)
   15ba6:	4798      	blx	r3
   15ba8:	0003      	movs	r3, r0
   15baa:	653b      	str	r3, [r7, #80]	; 0x50
		char help[64];
		//snprintf(help, 64, "error_write = %d\r\n",error);
		//SerialConsoleWriteString(help);
	return error;
   15bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50

}
   15bae:	0018      	movs	r0, r3
   15bb0:	46bd      	mov	sp, r7
   15bb2:	b016      	add	sp, #88	; 0x58
   15bb4:	bd80      	pop	{r7, pc}
   15bb6:	46c0      	nop			; (mov r8, r8)
   15bb8:	20004868 	.word	0x20004868
   15bbc:	200048a8 	.word	0x200048a8
   15bc0:	00014b1d 	.word	0x00014b1d

00015bc4 <reg_read>:

static  int32_t reg_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   15bc4:	b580      	push	{r7, lr}
   15bc6:	b096      	sub	sp, #88	; 0x58
   15bc8:	af00      	add	r7, sp, #0
   15bca:	60f8      	str	r0, [r7, #12]
   15bcc:	0008      	movs	r0, r1
   15bce:	607a      	str	r2, [r7, #4]
   15bd0:	0019      	movs	r1, r3
   15bd2:	230b      	movs	r3, #11
   15bd4:	18fb      	adds	r3, r7, r3
   15bd6:	1c02      	adds	r2, r0, #0
   15bd8:	701a      	strb	r2, [r3, #0]
   15bda:	2308      	movs	r3, #8
   15bdc:	18fb      	adds	r3, r7, r3
   15bde:	1c0a      	adds	r2, r1, #0
   15be0:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
	int32_t error = ERROR_NONE;
   15be2:	2300      	movs	r3, #0
   15be4:	657b      	str	r3, [r7, #84]	; 0x54
	
	adcData.address=ADC_SLAVE_ADDR;	///<Address of the I2C device
   15be6:	4b13      	ldr	r3, [pc, #76]	; (15c34 <reg_read+0x70>)
   15be8:	222a      	movs	r2, #42	; 0x2a
   15bea:	701a      	strb	r2, [r3, #0]

	adcData.lenIn=len;			///<Length of message to read/write;	
   15bec:	4b11      	ldr	r3, [pc, #68]	; (15c34 <reg_read+0x70>)
   15bee:	2208      	movs	r2, #8
   15bf0:	18ba      	adds	r2, r7, r2
   15bf2:	8812      	ldrh	r2, [r2, #0]
   15bf4:	819a      	strh	r2, [r3, #12]
	adcData.msgIn=bufp;
   15bf6:	4b0f      	ldr	r3, [pc, #60]	; (15c34 <reg_read+0x70>)
   15bf8:	687a      	ldr	r2, [r7, #4]
   15bfa:	609a      	str	r2, [r3, #8]
	msgOut[0]=reg;
   15bfc:	4b0e      	ldr	r3, [pc, #56]	; (15c38 <reg_read+0x74>)
   15bfe:	220b      	movs	r2, #11
   15c00:	18ba      	adds	r2, r7, r2
   15c02:	7812      	ldrb	r2, [r2, #0]
   15c04:	701a      	strb	r2, [r3, #0]
	msgOut[1]=0;
   15c06:	4b0c      	ldr	r3, [pc, #48]	; (15c38 <reg_read+0x74>)
   15c08:	2200      	movs	r2, #0
   15c0a:	705a      	strb	r2, [r3, #1]
	adcData.msgOut=&msgOut;	
   15c0c:	4b09      	ldr	r3, [pc, #36]	; (15c34 <reg_read+0x70>)
   15c0e:	4a0a      	ldr	r2, [pc, #40]	; (15c38 <reg_read+0x74>)
   15c10:	605a      	str	r2, [r3, #4]
	adcData.lenOut=1;	///<Pointer to array buffer that we will write from
   15c12:	4b08      	ldr	r3, [pc, #32]	; (15c34 <reg_read+0x70>)
   15c14:	2201      	movs	r2, #1
   15c16:	81da      	strh	r2, [r3, #14]
	error= I2cReadDataWait(&adcData, 5, 100);
   15c18:	4b06      	ldr	r3, [pc, #24]	; (15c34 <reg_read+0x70>)
   15c1a:	2264      	movs	r2, #100	; 0x64
   15c1c:	2105      	movs	r1, #5
   15c1e:	0018      	movs	r0, r3
   15c20:	4b06      	ldr	r3, [pc, #24]	; (15c3c <reg_read+0x78>)
   15c22:	4798      	blx	r3
   15c24:	0003      	movs	r3, r0
   15c26:	657b      	str	r3, [r7, #84]	; 0x54
	char help[64];
	//snprintf(help, 64, "error_read = %d\r\n",error);
	//SerialConsoleWriteString(help);
	
	
	return error;
   15c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
   15c2a:	0018      	movs	r0, r3
   15c2c:	46bd      	mov	sp, r7
   15c2e:	b016      	add	sp, #88	; 0x58
   15c30:	bd80      	pop	{r7, pc}
   15c32:	46c0      	nop			; (mov r8, r8)
   15c34:	200048a8 	.word	0x200048a8
   15c38:	20004868 	.word	0x20004868
   15c3c:	00014bf5 	.word	0x00014bf5

00015c40 <ADC_ReadReg>:
void *handle;
uint8_t ADC_ReadReg(uint8_t u8RegAddr)
{
   15c40:	b590      	push	{r4, r7, lr}
   15c42:	b085      	sub	sp, #20
   15c44:	af00      	add	r7, sp, #0
   15c46:	0002      	movs	r2, r0
   15c48:	1dfb      	adds	r3, r7, #7
   15c4a:	701a      	strb	r2, [r3, #0]
	//rdata = I2C_ReadByteOneReg(I2C1, ADC_SLAVE_ADDR, u8RegAddr);
	int32_t err= I2cReadData(&adcData);
	return ADC_bytes[0];*/
	static uint8_t read_bytes;
	
	int32_t err= reg_read(handle, u8RegAddr, &read_bytes,1);
   15c4c:	4b07      	ldr	r3, [pc, #28]	; (15c6c <ADC_ReadReg+0x2c>)
   15c4e:	6818      	ldr	r0, [r3, #0]
   15c50:	4a07      	ldr	r2, [pc, #28]	; (15c70 <ADC_ReadReg+0x30>)
   15c52:	1dfb      	adds	r3, r7, #7
   15c54:	7819      	ldrb	r1, [r3, #0]
   15c56:	2301      	movs	r3, #1
   15c58:	4c06      	ldr	r4, [pc, #24]	; (15c74 <ADC_ReadReg+0x34>)
   15c5a:	47a0      	blx	r4
   15c5c:	0003      	movs	r3, r0
   15c5e:	60fb      	str	r3, [r7, #12]
	return read_bytes;
   15c60:	4b03      	ldr	r3, [pc, #12]	; (15c70 <ADC_ReadReg+0x30>)
   15c62:	781b      	ldrb	r3, [r3, #0]
	
}
   15c64:	0018      	movs	r0, r3
   15c66:	46bd      	mov	sp, r7
   15c68:	b005      	add	sp, #20
   15c6a:	bd90      	pop	{r4, r7, pc}
   15c6c:	20004864 	.word	0x20004864
   15c70:	20000620 	.word	0x20000620
   15c74:	00015bc5 	.word	0x00015bc5

00015c78 <ADC_WriteReg>:


uint8_t ADC_WriteReg(uint8_t u8RegAddr, uint8_t data)
{
   15c78:	b590      	push	{r4, r7, lr}
   15c7a:	b085      	sub	sp, #20
   15c7c:	af00      	add	r7, sp, #0
   15c7e:	0002      	movs	r2, r0
   15c80:	1dfb      	adds	r3, r7, #7
   15c82:	701a      	strb	r2, [r3, #0]
   15c84:	1dbb      	adds	r3, r7, #6
   15c86:	1c0a      	adds	r2, r1, #0
   15c88:	701a      	strb	r2, [r3, #0]
	adcData.address = u8RegAddr;
	adcData.msgOut=&data;
	adcData.lenOut=sizeof(data);
	int32_t err=I2cWriteData(&adcData);
	return err;*/
	int32_t err=reg_write(handle, u8RegAddr,&data,1);
   15c8a:	4b08      	ldr	r3, [pc, #32]	; (15cac <ADC_WriteReg+0x34>)
   15c8c:	6818      	ldr	r0, [r3, #0]
   15c8e:	1dba      	adds	r2, r7, #6
   15c90:	1dfb      	adds	r3, r7, #7
   15c92:	7819      	ldrb	r1, [r3, #0]
   15c94:	2301      	movs	r3, #1
   15c96:	4c06      	ldr	r4, [pc, #24]	; (15cb0 <ADC_WriteReg+0x38>)
   15c98:	47a0      	blx	r4
   15c9a:	0003      	movs	r3, r0
   15c9c:	60fb      	str	r3, [r7, #12]
	return err;
   15c9e:	68fb      	ldr	r3, [r7, #12]
   15ca0:	b2db      	uxtb	r3, r3
}
   15ca2:	0018      	movs	r0, r3
   15ca4:	46bd      	mov	sp, r7
   15ca6:	b005      	add	sp, #20
   15ca8:	bd90      	pop	{r4, r7, pc}
   15caa:	46c0      	nop			; (mov r8, r8)
   15cac:	20004864 	.word	0x20004864
   15cb0:	00015b31 	.word	0x00015b31

00015cb4 <ADC_Calibration>:

	ADC_WriteReg(CTRL1_ADDR, reg);
}

void ADC_Calibration(void)
{
   15cb4:	b590      	push	{r4, r7, lr}
   15cb6:	b083      	sub	sp, #12
   15cb8:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
   15cba:	1dfb      	adds	r3, r7, #7
   15cbc:	2200      	movs	r2, #0
   15cbe:	701a      	strb	r2, [r3, #0]
	while (1)
	{
		reg = ADC_ReadReg(CTRL2_ADDR);
   15cc0:	1dfc      	adds	r4, r7, #7
   15cc2:	2002      	movs	r0, #2
   15cc4:	4b21      	ldr	r3, [pc, #132]	; (15d4c <ADC_Calibration+0x98>)
   15cc6:	4798      	blx	r3
   15cc8:	0003      	movs	r3, r0
   15cca:	7023      	strb	r3, [r4, #0]
		reg &= ~(CALMOD_Msk | CALS_Msk);
   15ccc:	1dfb      	adds	r3, r7, #7
   15cce:	1dfa      	adds	r2, r7, #7
   15cd0:	7812      	ldrb	r2, [r2, #0]
   15cd2:	2107      	movs	r1, #7
   15cd4:	438a      	bics	r2, r1
   15cd6:	701a      	strb	r2, [r3, #0]

		/* Set Calibration mode */
		reg |= CALMOD_OFFSET_INTERNAL;   /* Calibration mode = Internal Offset Calibration */
   15cd8:	1dfb      	adds	r3, r7, #7
   15cda:	1dfa      	adds	r2, r7, #7
   15cdc:	7812      	ldrb	r2, [r2, #0]
   15cde:	701a      	strb	r2, [r3, #0]
		ADC_WriteReg(CTRL2_ADDR, reg);
   15ce0:	1dfb      	adds	r3, r7, #7
   15ce2:	781b      	ldrb	r3, [r3, #0]
   15ce4:	0019      	movs	r1, r3
   15ce6:	2002      	movs	r0, #2
   15ce8:	4b19      	ldr	r3, [pc, #100]	; (15d50 <ADC_Calibration+0x9c>)
   15cea:	4798      	blx	r3
		/* Start calibration */
		reg |= CALS_ACTION;              /* Start calibration */
   15cec:	1dfb      	adds	r3, r7, #7
   15cee:	1dfa      	adds	r2, r7, #7
   15cf0:	7812      	ldrb	r2, [r2, #0]
   15cf2:	2104      	movs	r1, #4
   15cf4:	430a      	orrs	r2, r1
   15cf6:	701a      	strb	r2, [r3, #0]
		ADC_WriteReg(CTRL2_ADDR, reg);
   15cf8:	1dfb      	adds	r3, r7, #7
   15cfa:	781b      	ldrb	r3, [r3, #0]
   15cfc:	0019      	movs	r1, r3
   15cfe:	2002      	movs	r0, #2
   15d00:	4b13      	ldr	r3, [pc, #76]	; (15d50 <ADC_Calibration+0x9c>)
   15d02:	4798      	blx	r3

		while (1)
		{
			/* Wait for calibration finish */
			delay_ms(50); /* Wait 50ms */
   15d04:	2032      	movs	r0, #50	; 0x32
   15d06:	4b13      	ldr	r3, [pc, #76]	; (15d54 <ADC_Calibration+0xa0>)
   15d08:	4798      	blx	r3
			/* Read calibration result */
			reg = ADC_ReadReg(CTRL2_ADDR);
   15d0a:	1dfc      	adds	r4, r7, #7
   15d0c:	2002      	movs	r0, #2
   15d0e:	4b0f      	ldr	r3, [pc, #60]	; (15d4c <ADC_Calibration+0x98>)
   15d10:	4798      	blx	r3
   15d12:	0003      	movs	r3, r0
   15d14:	7023      	strb	r3, [r4, #0]

			if ((reg & CALS_Msk) == CALS_FINISHED)
   15d16:	1dfb      	adds	r3, r7, #7
   15d18:	781b      	ldrb	r3, [r3, #0]
   15d1a:	2204      	movs	r2, #4
   15d1c:	4013      	ands	r3, r2
   15d1e:	d000      	beq.n	15d22 <ADC_Calibration+0x6e>
			delay_ms(50); /* Wait 50ms */
   15d20:	e7f0      	b.n	15d04 <ADC_Calibration+0x50>
			break;
   15d22:	46c0      	nop			; (mov r8, r8)
		}
		reg &= CAL_ERR_Msk;
   15d24:	1dfb      	adds	r3, r7, #7
   15d26:	1dfa      	adds	r2, r7, #7
   15d28:	7812      	ldrb	r2, [r2, #0]
   15d2a:	2108      	movs	r1, #8
   15d2c:	400a      	ands	r2, r1
   15d2e:	701a      	strb	r2, [r3, #0]
		if ((reg & CAL_ERR_Msk) == 0) /* There is no error */
   15d30:	1dfb      	adds	r3, r7, #7
   15d32:	781b      	ldrb	r3, [r3, #0]
   15d34:	2208      	movs	r2, #8
   15d36:	4013      	ands	r3, r2
   15d38:	d000      	beq.n	15d3c <ADC_Calibration+0x88>
		reg = ADC_ReadReg(CTRL2_ADDR);
   15d3a:	e7c1      	b.n	15cc0 <ADC_Calibration+0xc>
		break;
   15d3c:	46c0      	nop			; (mov r8, r8)
	}
	delay_ms(1);    /* Wait 1 ms */
   15d3e:	2001      	movs	r0, #1
   15d40:	4b04      	ldr	r3, [pc, #16]	; (15d54 <ADC_Calibration+0xa0>)
   15d42:	4798      	blx	r3

}
   15d44:	46c0      	nop			; (mov r8, r8)
   15d46:	46bd      	mov	sp, r7
   15d48:	b003      	add	sp, #12
   15d4a:	bd90      	pop	{r4, r7, pc}
   15d4c:	00015c41 	.word	0x00015c41
   15d50:	00015c79 	.word	0x00015c79
   15d54:	0002108d 	.word	0x0002108d

00015d58 <ADCchip_Init>:

void  ADCchip_Init(void)
{
   15d58:	b580      	push	{r7, lr}
   15d5a:	b082      	sub	sp, #8
   15d5c:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
   15d5e:	1dfb      	adds	r3, r7, #7
   15d60:	2200      	movs	r2, #0
   15d62:	701a      	strb	r2, [r3, #0]

	/* Reset */
	reg =  0x01;                   /* Enter reset mode */
   15d64:	1dfb      	adds	r3, r7, #7
   15d66:	2201      	movs	r2, #1
   15d68:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   15d6a:	1dfb      	adds	r3, r7, #7
   15d6c:	781b      	ldrb	r3, [r3, #0]
   15d6e:	0019      	movs	r1, r3
   15d70:	2000      	movs	r0, #0
   15d72:	4b1d      	ldr	r3, [pc, #116]	; (15de8 <ADCchip_Init+0x90>)
   15d74:	4798      	blx	r3
	delay_ms(1);         /* Wait 1 ms */
   15d76:	2001      	movs	r0, #1
   15d78:	4b1c      	ldr	r3, [pc, #112]	; (15dec <ADCchip_Init+0x94>)
   15d7a:	4798      	blx	r3
	
	reg =  0x02 ;                  /* Enter Noraml mode */
   15d7c:	1dfb      	adds	r3, r7, #7
   15d7e:	2202      	movs	r2, #2
   15d80:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   15d82:	1dfb      	adds	r3, r7, #7
   15d84:	781b      	ldrb	r3, [r3, #0]
   15d86:	0019      	movs	r1, r3
   15d88:	2000      	movs	r0, #0
   15d8a:	4b17      	ldr	r3, [pc, #92]	; (15de8 <ADCchip_Init+0x90>)
   15d8c:	4798      	blx	r3
	delay_ms(50);         /* Wait 1 ms */
   15d8e:	2032      	movs	r0, #50	; 0x32
   15d90:	4b16      	ldr	r3, [pc, #88]	; (15dec <ADCchip_Init+0x94>)
   15d92:	4798      	blx	r3
	reg = (CRP_ACTIVE_LOW |             // DRDY = LOW Active 
	DRDY_SEL_OUTPUT_CONVERSION | // DRDY output = conversion ready 
	VLDO_3V3 |                   // LDO = 3.3V  (no use) 
	GAINS_1);                    // PGA = x1 
*/	
	reg=0x27;
   15d94:	1dfb      	adds	r3, r7, #7
   15d96:	2227      	movs	r2, #39	; 0x27
   15d98:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(CTRL1_ADDR, reg);
   15d9a:	1dfb      	adds	r3, r7, #7
   15d9c:	781b      	ldrb	r3, [r3, #0]
   15d9e:	0019      	movs	r1, r3
   15da0:	2001      	movs	r0, #1
   15da2:	4b11      	ldr	r3, [pc, #68]	; (15de8 <ADCchip_Init+0x90>)
   15da4:	4798      	blx	r3
	delay_ms(1);
   15da6:	2001      	movs	r0, #1
   15da8:	4b10      	ldr	r3, [pc, #64]	; (15dec <ADCchip_Init+0x94>)
   15daa:	4798      	blx	r3
	
	reg=0x86;
   15dac:	1dfb      	adds	r3, r7, #7
   15dae:	2286      	movs	r2, #134	; 0x86
   15db0:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   15db2:	1dfb      	adds	r3, r7, #7
   15db4:	781b      	ldrb	r3, [r3, #0]
   15db6:	0019      	movs	r1, r3
   15db8:	2000      	movs	r0, #0
   15dba:	4b0b      	ldr	r3, [pc, #44]	; (15de8 <ADCchip_Init+0x90>)
   15dbc:	4798      	blx	r3
	delay_ms(1);
   15dbe:	2001      	movs	r0, #1
   15dc0:	4b0a      	ldr	r3, [pc, #40]	; (15dec <ADCchip_Init+0x94>)
   15dc2:	4798      	blx	r3
	
	reg=0x30;
   15dc4:	1dfb      	adds	r3, r7, #7
   15dc6:	2230      	movs	r2, #48	; 0x30
   15dc8:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(OTP_B1_ADDR , reg);
   15dca:	1dfb      	adds	r3, r7, #7
   15dcc:	781b      	ldrb	r3, [r3, #0]
   15dce:	0019      	movs	r1, r3
   15dd0:	2015      	movs	r0, #21
   15dd2:	4b05      	ldr	r3, [pc, #20]	; (15de8 <ADCchip_Init+0x90>)
   15dd4:	4798      	blx	r3
	delay_ms(1);
   15dd6:	2001      	movs	r0, #1
   15dd8:	4b04      	ldr	r3, [pc, #16]	; (15dec <ADCchip_Init+0x94>)
   15dda:	4798      	blx	r3
   

	/* Calibration */
	ADC_Calibration();
   15ddc:	4b04      	ldr	r3, [pc, #16]	; (15df0 <ADCchip_Init+0x98>)
   15dde:	4798      	blx	r3
}
   15de0:	46c0      	nop			; (mov r8, r8)
   15de2:	46bd      	mov	sp, r7
   15de4:	b002      	add	sp, #8
   15de6:	bd80      	pop	{r7, pc}
   15de8:	00015c79 	.word	0x00015c79
   15dec:	0002108d 	.word	0x0002108d
   15df0:	00015cb5 	.word	0x00015cb5

00015df4 <ADC_StartConversion>:

void ADC_StartConversion(void)
{
   15df4:	b590      	push	{r4, r7, lr}
   15df6:	b083      	sub	sp, #12
   15df8:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
   15dfa:	1dfb      	adds	r3, r7, #7
   15dfc:	2200      	movs	r2, #0
   15dfe:	701a      	strb	r2, [r3, #0]
	/* Start conversion */
	reg = ADC_ReadReg(PU_CTRL_ADDR);
   15e00:	1dfc      	adds	r4, r7, #7
   15e02:	2000      	movs	r0, #0
   15e04:	4b09      	ldr	r3, [pc, #36]	; (15e2c <ADC_StartConversion+0x38>)
   15e06:	4798      	blx	r3
   15e08:	0003      	movs	r3, r0
   15e0a:	7023      	strb	r3, [r4, #0]
	reg |= CS_START_CONVERSION; /* CS=1 */
   15e0c:	1dfb      	adds	r3, r7, #7
   15e0e:	1dfa      	adds	r2, r7, #7
   15e10:	7812      	ldrb	r2, [r2, #0]
   15e12:	2110      	movs	r1, #16
   15e14:	430a      	orrs	r2, r1
   15e16:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   15e18:	1dfb      	adds	r3, r7, #7
   15e1a:	781b      	ldrb	r3, [r3, #0]
   15e1c:	0019      	movs	r1, r3
   15e1e:	2000      	movs	r0, #0
   15e20:	4b03      	ldr	r3, [pc, #12]	; (15e30 <ADC_StartConversion+0x3c>)
   15e22:	4798      	blx	r3
}
   15e24:	46c0      	nop			; (mov r8, r8)
   15e26:	46bd      	mov	sp, r7
   15e28:	b003      	add	sp, #12
   15e2a:	bd90      	pop	{r4, r7, pc}
   15e2c:	00015c41 	.word	0x00015c41
   15e30:	00015c79 	.word	0x00015c79

00015e34 <I2C_ReadMultiBytesOneReg>:

int32_t I2C_ReadMultiBytesOneReg(uint8_t u8RegAddr1, uint8_t u8RegAddr2,uint8_t *data,uint32_t len)
{
   15e34:	b580      	push	{r7, lr}
   15e36:	b088      	sub	sp, #32
   15e38:	af00      	add	r7, sp, #0
   15e3a:	60ba      	str	r2, [r7, #8]
   15e3c:	607b      	str	r3, [r7, #4]
   15e3e:	230f      	movs	r3, #15
   15e40:	18fb      	adds	r3, r7, r3
   15e42:	1c02      	adds	r2, r0, #0
   15e44:	701a      	strb	r2, [r3, #0]
   15e46:	230e      	movs	r3, #14
   15e48:	18fb      	adds	r3, r7, r3
   15e4a:	1c0a      	adds	r2, r1, #0
   15e4c:	701a      	strb	r2, [r3, #0]
	int32_t temp1, temp2, temp3, x;
	temp1 = ADC_ReadReg( 0x02);
   15e4e:	2002      	movs	r0, #2
   15e50:	4b14      	ldr	r3, [pc, #80]	; (15ea4 <I2C_ReadMultiBytesOneReg+0x70>)
   15e52:	4798      	blx	r3
   15e54:	0003      	movs	r3, r0
   15e56:	61fb      	str	r3, [r7, #28]
	temp1 |= 0 << 7;
	ADC_WriteReg(0x02, temp1);
   15e58:	69fb      	ldr	r3, [r7, #28]
   15e5a:	b2db      	uxtb	r3, r3
   15e5c:	0019      	movs	r1, r3
   15e5e:	2002      	movs	r0, #2
   15e60:	4b11      	ldr	r3, [pc, #68]	; (15ea8 <I2C_ReadMultiBytesOneReg+0x74>)
   15e62:	4798      	blx	r3
	delay_ms(1);
   15e64:	2001      	movs	r0, #1
   15e66:	4b11      	ldr	r3, [pc, #68]	; (15eac <I2C_ReadMultiBytesOneReg+0x78>)
   15e68:	4798      	blx	r3

	temp1 = ADC_ReadReg(0x12);
   15e6a:	2012      	movs	r0, #18
   15e6c:	4b0d      	ldr	r3, [pc, #52]	; (15ea4 <I2C_ReadMultiBytesOneReg+0x70>)
   15e6e:	4798      	blx	r3
   15e70:	0003      	movs	r3, r0
   15e72:	61fb      	str	r3, [r7, #28]
	temp2 = ADC_ReadReg(0x13);
   15e74:	2013      	movs	r0, #19
   15e76:	4b0b      	ldr	r3, [pc, #44]	; (15ea4 <I2C_ReadMultiBytesOneReg+0x70>)
   15e78:	4798      	blx	r3
   15e7a:	0003      	movs	r3, r0
   15e7c:	61bb      	str	r3, [r7, #24]
	temp3 = ADC_ReadReg( 0x14);
   15e7e:	2014      	movs	r0, #20
   15e80:	4b08      	ldr	r3, [pc, #32]	; (15ea4 <I2C_ReadMultiBytesOneReg+0x70>)
   15e82:	4798      	blx	r3
   15e84:	0003      	movs	r3, r0
   15e86:	617b      	str	r3, [r7, #20]

	x = temp1 << 16 | temp2 << 8 | temp3 << 0;
   15e88:	69fb      	ldr	r3, [r7, #28]
   15e8a:	041a      	lsls	r2, r3, #16
   15e8c:	69bb      	ldr	r3, [r7, #24]
   15e8e:	021b      	lsls	r3, r3, #8
   15e90:	431a      	orrs	r2, r3
   15e92:	697b      	ldr	r3, [r7, #20]
   15e94:	4313      	orrs	r3, r2
   15e96:	613b      	str	r3, [r7, #16]
	return x;
   15e98:	693b      	ldr	r3, [r7, #16]
	adcData.lenOut = sizeof(data);

	int32_t err= I2cReadData(&adcData);*/
	
	//int32_t err= reg_read(handle, u8RegAddr2, data,len);
}
   15e9a:	0018      	movs	r0, r3
   15e9c:	46bd      	mov	sp, r7
   15e9e:	b008      	add	sp, #32
   15ea0:	bd80      	pop	{r7, pc}
   15ea2:	46c0      	nop			; (mov r8, r8)
   15ea4:	00015c41 	.word	0x00015c41
   15ea8:	00015c79 	.word	0x00015c79
   15eac:	0002108d 	.word	0x0002108d

00015eb0 <ADC_Read_Conversion_Data>:

uint32_t ADC_Read_Conversion_Data(void)
{
   15eb0:	b590      	push	{r4, r7, lr}
   15eb2:	b083      	sub	sp, #12
   15eb4:	af00      	add	r7, sp, #0
	uint8_t rdata[3];
	uint32_t result;
	result = I2C_ReadMultiBytesOneReg( ADC_SLAVE_ADDR, ADCO_B2_ADDR, &rdata[0], 3);
   15eb6:	003a      	movs	r2, r7
   15eb8:	2303      	movs	r3, #3
   15eba:	2112      	movs	r1, #18
   15ebc:	202a      	movs	r0, #42	; 0x2a
   15ebe:	4c04      	ldr	r4, [pc, #16]	; (15ed0 <ADC_Read_Conversion_Data+0x20>)
   15ec0:	47a0      	blx	r4
   15ec2:	0003      	movs	r3, r0
   15ec4:	607b      	str	r3, [r7, #4]
	//((rdata[0] << 16) | (rdata[1] << 8) | rdata[2]);
	return result;
   15ec6:	687b      	ldr	r3, [r7, #4]
}
   15ec8:	0018      	movs	r0, r3
   15eca:	46bd      	mov	sp, r7
   15ecc:	b003      	add	sp, #12
   15ece:	bd90      	pop	{r4, r7, pc}
   15ed0:	00015e35 	.word	0x00015e35

00015ed4 <Value_conversion>:

void Value_conversion(int value,int final[2]){
   15ed4:	b5b0      	push	{r4, r5, r7, lr}
   15ed6:	b094      	sub	sp, #80	; 0x50
   15ed8:	af02      	add	r7, sp, #8
   15eda:	6078      	str	r0, [r7, #4]
   15edc:	6039      	str	r1, [r7, #0]
	float gain;
	float offset;
	uint8_t gain_reg[4];
	uint8_t offset_reg[3];
	//int final[2];
	gain_reg[0]=ADC_ReadReg(GCAL1_B3_ADDR);
   15ede:	2006      	movs	r0, #6
   15ee0:	4b9b      	ldr	r3, [pc, #620]	; (16150 <Value_conversion+0x27c>)
   15ee2:	4798      	blx	r3
   15ee4:	0003      	movs	r3, r0
   15ee6:	001a      	movs	r2, r3
   15ee8:	232c      	movs	r3, #44	; 0x2c
   15eea:	18fb      	adds	r3, r7, r3
   15eec:	701a      	strb	r2, [r3, #0]
	gain_reg[1]=ADC_ReadReg(GCAL1_B2_ADDR);
   15eee:	2007      	movs	r0, #7
   15ef0:	4b97      	ldr	r3, [pc, #604]	; (16150 <Value_conversion+0x27c>)
   15ef2:	4798      	blx	r3
   15ef4:	0003      	movs	r3, r0
   15ef6:	001a      	movs	r2, r3
   15ef8:	232c      	movs	r3, #44	; 0x2c
   15efa:	18fb      	adds	r3, r7, r3
   15efc:	705a      	strb	r2, [r3, #1]
	gain_reg[2]=ADC_ReadReg(GCAL1_B1_ADDR);
   15efe:	2008      	movs	r0, #8
   15f00:	4b93      	ldr	r3, [pc, #588]	; (16150 <Value_conversion+0x27c>)
   15f02:	4798      	blx	r3
   15f04:	0003      	movs	r3, r0
   15f06:	001a      	movs	r2, r3
   15f08:	232c      	movs	r3, #44	; 0x2c
   15f0a:	18fb      	adds	r3, r7, r3
   15f0c:	709a      	strb	r2, [r3, #2]
	gain_reg[3]=ADC_ReadReg(GCAL1_B0_ADDR);
   15f0e:	2009      	movs	r0, #9
   15f10:	4b8f      	ldr	r3, [pc, #572]	; (16150 <Value_conversion+0x27c>)
   15f12:	4798      	blx	r3
   15f14:	0003      	movs	r3, r0
   15f16:	001a      	movs	r2, r3
   15f18:	232c      	movs	r3, #44	; 0x2c
   15f1a:	18fb      	adds	r3, r7, r3
   15f1c:	70da      	strb	r2, [r3, #3]
	offset_reg[0]=ADC_ReadReg(OCAL1_B2_ADDR);
   15f1e:	2003      	movs	r0, #3
   15f20:	4b8b      	ldr	r3, [pc, #556]	; (16150 <Value_conversion+0x27c>)
   15f22:	4798      	blx	r3
   15f24:	0003      	movs	r3, r0
   15f26:	001a      	movs	r2, r3
   15f28:	2328      	movs	r3, #40	; 0x28
   15f2a:	18fb      	adds	r3, r7, r3
   15f2c:	701a      	strb	r2, [r3, #0]
	offset_reg[1]=ADC_ReadReg(OCAL1_B1_ADDR);
   15f2e:	2004      	movs	r0, #4
   15f30:	4b87      	ldr	r3, [pc, #540]	; (16150 <Value_conversion+0x27c>)
   15f32:	4798      	blx	r3
   15f34:	0003      	movs	r3, r0
   15f36:	001a      	movs	r2, r3
   15f38:	2328      	movs	r3, #40	; 0x28
   15f3a:	18fb      	adds	r3, r7, r3
   15f3c:	705a      	strb	r2, [r3, #1]
	offset_reg[2]=ADC_ReadReg(OCAL1_B0_ADDR);
   15f3e:	2005      	movs	r0, #5
   15f40:	4b83      	ldr	r3, [pc, #524]	; (16150 <Value_conversion+0x27c>)
   15f42:	4798      	blx	r3
   15f44:	0003      	movs	r3, r0
   15f46:	001a      	movs	r2, r3
   15f48:	2328      	movs	r3, #40	; 0x28
   15f4a:	18fb      	adds	r3, r7, r3
   15f4c:	709a      	strb	r2, [r3, #2]
	
	char help[32];
	for(int j=0;j<4;j++)
   15f4e:	2300      	movs	r3, #0
   15f50:	63fb      	str	r3, [r7, #60]	; 0x3c
   15f52:	e002      	b.n	15f5a <Value_conversion+0x86>
   15f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15f56:	3301      	adds	r3, #1
   15f58:	63fb      	str	r3, [r7, #60]	; 0x3c
   15f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15f5c:	2b03      	cmp	r3, #3
   15f5e:	ddf9      	ble.n	15f54 <Value_conversion+0x80>
		//SerialConsoleWriteString(help);
		//snprintf(help, 32, "offset_reg [%d]= %d\r\n",j%4,offset_reg[j%4]);
		//SerialConsoleWriteString(help);
	}

	for(int i=31;i>=0;i--){
   15f60:	231f      	movs	r3, #31
   15f62:	63bb      	str	r3, [r7, #56]	; 0x38
   15f64:	e02c      	b.n	15fc0 <Value_conversion+0xec>
		gain+=(float)(((gain_reg[3-i/8]>>(i%8))&0x01)*(2<<(i-23)*10000));
   15f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15f68:	2b00      	cmp	r3, #0
   15f6a:	da00      	bge.n	15f6e <Value_conversion+0x9a>
   15f6c:	3307      	adds	r3, #7
   15f6e:	10db      	asrs	r3, r3, #3
   15f70:	425b      	negs	r3, r3
   15f72:	3303      	adds	r3, #3
   15f74:	222c      	movs	r2, #44	; 0x2c
   15f76:	18ba      	adds	r2, r7, r2
   15f78:	5cd3      	ldrb	r3, [r2, r3]
   15f7a:	0019      	movs	r1, r3
   15f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15f7e:	4a75      	ldr	r2, [pc, #468]	; (16154 <Value_conversion+0x280>)
   15f80:	4013      	ands	r3, r2
   15f82:	d504      	bpl.n	15f8e <Value_conversion+0xba>
   15f84:	3b01      	subs	r3, #1
   15f86:	2208      	movs	r2, #8
   15f88:	4252      	negs	r2, r2
   15f8a:	4313      	orrs	r3, r2
   15f8c:	3301      	adds	r3, #1
   15f8e:	4119      	asrs	r1, r3
   15f90:	000b      	movs	r3, r1
   15f92:	2201      	movs	r2, #1
   15f94:	4013      	ands	r3, r2
   15f96:	6bba      	ldr	r2, [r7, #56]	; 0x38
   15f98:	3a17      	subs	r2, #23
   15f9a:	496f      	ldr	r1, [pc, #444]	; (16158 <Value_conversion+0x284>)
   15f9c:	434a      	muls	r2, r1
   15f9e:	2102      	movs	r1, #2
   15fa0:	4091      	lsls	r1, r2
   15fa2:	000a      	movs	r2, r1
   15fa4:	435a      	muls	r2, r3
   15fa6:	4b6d      	ldr	r3, [pc, #436]	; (1615c <Value_conversion+0x288>)
   15fa8:	0010      	movs	r0, r2
   15faa:	4798      	blx	r3
   15fac:	1c02      	adds	r2, r0, #0
   15fae:	4b6c      	ldr	r3, [pc, #432]	; (16160 <Value_conversion+0x28c>)
   15fb0:	1c11      	adds	r1, r2, #0
   15fb2:	6c78      	ldr	r0, [r7, #68]	; 0x44
   15fb4:	4798      	blx	r3
   15fb6:	1c03      	adds	r3, r0, #0
   15fb8:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=31;i>=0;i--){
   15fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15fbc:	3b01      	subs	r3, #1
   15fbe:	63bb      	str	r3, [r7, #56]	; 0x38
   15fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15fc2:	2b00      	cmp	r3, #0
   15fc4:	dacf      	bge.n	15f66 <Value_conversion+0x92>
	}
	for(int i=22;i>=0;i--){
   15fc6:	2316      	movs	r3, #22
   15fc8:	637b      	str	r3, [r7, #52]	; 0x34
   15fca:	e02c      	b.n	16026 <Value_conversion+0x152>
		offset+=(float)(((offset_reg[2-i/8]>>(i%8))&0x01)*(2<<(i-23)*10000));
   15fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15fce:	2b00      	cmp	r3, #0
   15fd0:	da00      	bge.n	15fd4 <Value_conversion+0x100>
   15fd2:	3307      	adds	r3, #7
   15fd4:	10db      	asrs	r3, r3, #3
   15fd6:	425b      	negs	r3, r3
   15fd8:	3302      	adds	r3, #2
   15fda:	2228      	movs	r2, #40	; 0x28
   15fdc:	18ba      	adds	r2, r7, r2
   15fde:	5cd3      	ldrb	r3, [r2, r3]
   15fe0:	0019      	movs	r1, r3
   15fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15fe4:	4a5b      	ldr	r2, [pc, #364]	; (16154 <Value_conversion+0x280>)
   15fe6:	4013      	ands	r3, r2
   15fe8:	d504      	bpl.n	15ff4 <Value_conversion+0x120>
   15fea:	3b01      	subs	r3, #1
   15fec:	2208      	movs	r2, #8
   15fee:	4252      	negs	r2, r2
   15ff0:	4313      	orrs	r3, r2
   15ff2:	3301      	adds	r3, #1
   15ff4:	4119      	asrs	r1, r3
   15ff6:	000b      	movs	r3, r1
   15ff8:	2201      	movs	r2, #1
   15ffa:	4013      	ands	r3, r2
   15ffc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   15ffe:	3a17      	subs	r2, #23
   16000:	4955      	ldr	r1, [pc, #340]	; (16158 <Value_conversion+0x284>)
   16002:	434a      	muls	r2, r1
   16004:	2102      	movs	r1, #2
   16006:	4091      	lsls	r1, r2
   16008:	000a      	movs	r2, r1
   1600a:	435a      	muls	r2, r3
   1600c:	4b53      	ldr	r3, [pc, #332]	; (1615c <Value_conversion+0x288>)
   1600e:	0010      	movs	r0, r2
   16010:	4798      	blx	r3
   16012:	1c02      	adds	r2, r0, #0
   16014:	4b52      	ldr	r3, [pc, #328]	; (16160 <Value_conversion+0x28c>)
   16016:	1c11      	adds	r1, r2, #0
   16018:	6c38      	ldr	r0, [r7, #64]	; 0x40
   1601a:	4798      	blx	r3
   1601c:	1c03      	adds	r3, r0, #0
   1601e:	643b      	str	r3, [r7, #64]	; 0x40
	for(int i=22;i>=0;i--){
   16020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16022:	3b01      	subs	r3, #1
   16024:	637b      	str	r3, [r7, #52]	; 0x34
   16026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16028:	2b00      	cmp	r3, #0
   1602a:	dacf      	bge.n	15fcc <Value_conversion+0xf8>
	}
	offset*=(float)(1-(offset_reg[0]>>7)&0x01);
   1602c:	2328      	movs	r3, #40	; 0x28
   1602e:	18fb      	adds	r3, r7, r3
   16030:	781b      	ldrb	r3, [r3, #0]
   16032:	09db      	lsrs	r3, r3, #7
   16034:	b2db      	uxtb	r3, r3
   16036:	001a      	movs	r2, r3
   16038:	2301      	movs	r3, #1
   1603a:	1a9b      	subs	r3, r3, r2
   1603c:	2201      	movs	r2, #1
   1603e:	401a      	ands	r2, r3
   16040:	4b46      	ldr	r3, [pc, #280]	; (1615c <Value_conversion+0x288>)
   16042:	0010      	movs	r0, r2
   16044:	4798      	blx	r3
   16046:	1c02      	adds	r2, r0, #0
   16048:	4b46      	ldr	r3, [pc, #280]	; (16164 <Value_conversion+0x290>)
   1604a:	1c11      	adds	r1, r2, #0
   1604c:	6c38      	ldr	r0, [r7, #64]	; 0x40
   1604e:	4798      	blx	r3
   16050:	1c03      	adds	r3, r0, #0
   16052:	643b      	str	r3, [r7, #64]	; 0x40
	snprintf(help, 32, " gain= %d\r\n",gain);
   16054:	4b44      	ldr	r3, [pc, #272]	; (16168 <Value_conversion+0x294>)
   16056:	6c78      	ldr	r0, [r7, #68]	; 0x44
   16058:	4798      	blx	r3
   1605a:	0003      	movs	r3, r0
   1605c:	000c      	movs	r4, r1
   1605e:	4a43      	ldr	r2, [pc, #268]	; (1616c <Value_conversion+0x298>)
   16060:	2108      	movs	r1, #8
   16062:	1878      	adds	r0, r7, r1
   16064:	9300      	str	r3, [sp, #0]
   16066:	9401      	str	r4, [sp, #4]
   16068:	2120      	movs	r1, #32
   1606a:	4b41      	ldr	r3, [pc, #260]	; (16170 <Value_conversion+0x29c>)
   1606c:	4798      	blx	r3
	SerialConsoleWriteString(help);
   1606e:	2308      	movs	r3, #8
   16070:	18fb      	adds	r3, r7, r3
   16072:	0018      	movs	r0, r3
   16074:	4b3f      	ldr	r3, [pc, #252]	; (16174 <Value_conversion+0x2a0>)
   16076:	4798      	blx	r3
	snprintf(help, 32, "final offset= %d\r\n",offset);
   16078:	4b3b      	ldr	r3, [pc, #236]	; (16168 <Value_conversion+0x294>)
   1607a:	6c38      	ldr	r0, [r7, #64]	; 0x40
   1607c:	4798      	blx	r3
   1607e:	0003      	movs	r3, r0
   16080:	000c      	movs	r4, r1
   16082:	4a3d      	ldr	r2, [pc, #244]	; (16178 <Value_conversion+0x2a4>)
   16084:	2108      	movs	r1, #8
   16086:	1878      	adds	r0, r7, r1
   16088:	9300      	str	r3, [sp, #0]
   1608a:	9401      	str	r4, [sp, #4]
   1608c:	2120      	movs	r1, #32
   1608e:	4b38      	ldr	r3, [pc, #224]	; (16170 <Value_conversion+0x29c>)
   16090:	4798      	blx	r3
	SerialConsoleWriteString(help);
   16092:	2308      	movs	r3, #8
   16094:	18fb      	adds	r3, r7, r3
   16096:	0018      	movs	r0, r3
   16098:	4b36      	ldr	r3, [pc, #216]	; (16174 <Value_conversion+0x2a0>)
   1609a:	4798      	blx	r3
	
	calibrate_adc=(float)gain/10000*((float)value-(float)offset/10000);
   1609c:	4b37      	ldr	r3, [pc, #220]	; (1617c <Value_conversion+0x2a8>)
   1609e:	4938      	ldr	r1, [pc, #224]	; (16180 <Value_conversion+0x2ac>)
   160a0:	6c78      	ldr	r0, [r7, #68]	; 0x44
   160a2:	4798      	blx	r3
   160a4:	1c03      	adds	r3, r0, #0
   160a6:	1c1c      	adds	r4, r3, #0
   160a8:	4b2c      	ldr	r3, [pc, #176]	; (1615c <Value_conversion+0x288>)
   160aa:	6878      	ldr	r0, [r7, #4]
   160ac:	4798      	blx	r3
   160ae:	1c05      	adds	r5, r0, #0
   160b0:	4b32      	ldr	r3, [pc, #200]	; (1617c <Value_conversion+0x2a8>)
   160b2:	4933      	ldr	r1, [pc, #204]	; (16180 <Value_conversion+0x2ac>)
   160b4:	6c38      	ldr	r0, [r7, #64]	; 0x40
   160b6:	4798      	blx	r3
   160b8:	1c03      	adds	r3, r0, #0
   160ba:	1c1a      	adds	r2, r3, #0
   160bc:	4b31      	ldr	r3, [pc, #196]	; (16184 <Value_conversion+0x2b0>)
   160be:	1c11      	adds	r1, r2, #0
   160c0:	1c28      	adds	r0, r5, #0
   160c2:	4798      	blx	r3
   160c4:	1c03      	adds	r3, r0, #0
   160c6:	1c1a      	adds	r2, r3, #0
   160c8:	4b26      	ldr	r3, [pc, #152]	; (16164 <Value_conversion+0x290>)
   160ca:	1c11      	adds	r1, r2, #0
   160cc:	1c20      	adds	r0, r4, #0
   160ce:	4798      	blx	r3
   160d0:	1c03      	adds	r3, r0, #0
   160d2:	633b      	str	r3, [r7, #48]	; 0x30
	
	final[0]=(int)calibrate_adc;
   160d4:	4b2c      	ldr	r3, [pc, #176]	; (16188 <Value_conversion+0x2b4>)
   160d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
   160d8:	4798      	blx	r3
   160da:	0002      	movs	r2, r0
   160dc:	683b      	ldr	r3, [r7, #0]
   160de:	601a      	str	r2, [r3, #0]
	final[1]=10000*(calibrate_adc-final[0]);
   160e0:	683b      	ldr	r3, [r7, #0]
   160e2:	1d1c      	adds	r4, r3, #4
   160e4:	683b      	ldr	r3, [r7, #0]
   160e6:	681a      	ldr	r2, [r3, #0]
   160e8:	4b1c      	ldr	r3, [pc, #112]	; (1615c <Value_conversion+0x288>)
   160ea:	0010      	movs	r0, r2
   160ec:	4798      	blx	r3
   160ee:	1c02      	adds	r2, r0, #0
   160f0:	4b24      	ldr	r3, [pc, #144]	; (16184 <Value_conversion+0x2b0>)
   160f2:	1c11      	adds	r1, r2, #0
   160f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
   160f6:	4798      	blx	r3
   160f8:	1c03      	adds	r3, r0, #0
   160fa:	1c1a      	adds	r2, r3, #0
   160fc:	4b19      	ldr	r3, [pc, #100]	; (16164 <Value_conversion+0x290>)
   160fe:	4920      	ldr	r1, [pc, #128]	; (16180 <Value_conversion+0x2ac>)
   16100:	1c10      	adds	r0, r2, #0
   16102:	4798      	blx	r3
   16104:	1c03      	adds	r3, r0, #0
   16106:	1c1a      	adds	r2, r3, #0
   16108:	4b1f      	ldr	r3, [pc, #124]	; (16188 <Value_conversion+0x2b4>)
   1610a:	1c10      	adds	r0, r2, #0
   1610c:	4798      	blx	r3
   1610e:	0003      	movs	r3, r0
   16110:	6023      	str	r3, [r4, #0]
	snprintf(help, 32, "final_int= %d\r\n",final[0]);
   16112:	683b      	ldr	r3, [r7, #0]
   16114:	681b      	ldr	r3, [r3, #0]
   16116:	4a1d      	ldr	r2, [pc, #116]	; (1618c <Value_conversion+0x2b8>)
   16118:	2108      	movs	r1, #8
   1611a:	1878      	adds	r0, r7, r1
   1611c:	2120      	movs	r1, #32
   1611e:	4c14      	ldr	r4, [pc, #80]	; (16170 <Value_conversion+0x29c>)
   16120:	47a0      	blx	r4
	SerialConsoleWriteString(help);
   16122:	2308      	movs	r3, #8
   16124:	18fb      	adds	r3, r7, r3
   16126:	0018      	movs	r0, r3
   16128:	4b12      	ldr	r3, [pc, #72]	; (16174 <Value_conversion+0x2a0>)
   1612a:	4798      	blx	r3
	snprintf(help, 32, "final_decimal= %d\r\n",final[1]);
   1612c:	683b      	ldr	r3, [r7, #0]
   1612e:	3304      	adds	r3, #4
   16130:	681b      	ldr	r3, [r3, #0]
   16132:	4a17      	ldr	r2, [pc, #92]	; (16190 <Value_conversion+0x2bc>)
   16134:	2108      	movs	r1, #8
   16136:	1878      	adds	r0, r7, r1
   16138:	2120      	movs	r1, #32
   1613a:	4c0d      	ldr	r4, [pc, #52]	; (16170 <Value_conversion+0x29c>)
   1613c:	47a0      	blx	r4
	SerialConsoleWriteString(help);
   1613e:	2308      	movs	r3, #8
   16140:	18fb      	adds	r3, r7, r3
   16142:	0018      	movs	r0, r3
   16144:	4b0b      	ldr	r3, [pc, #44]	; (16174 <Value_conversion+0x2a0>)
   16146:	4798      	blx	r3
	//return final;
	//final=(float)((float)value / 16777216) * (float)(3.14);
   16148:	46c0      	nop			; (mov r8, r8)
   1614a:	46bd      	mov	sp, r7
   1614c:	b012      	add	sp, #72	; 0x48
   1614e:	bdb0      	pop	{r4, r5, r7, pc}
   16150:	00015c41 	.word	0x00015c41
   16154:	80000007 	.word	0x80000007
   16158:	00002710 	.word	0x00002710
   1615c:	00034981 	.word	0x00034981
   16160:	00033e15 	.word	0x00033e15
   16164:	000343c9 	.word	0x000343c9
   16168:	000362ad 	.word	0x000362ad
   1616c:	00038068 	.word	0x00038068
   16170:	00036699 	.word	0x00036699
   16174:	0001ecd5 	.word	0x0001ecd5
   16178:	00038074 	.word	0x00038074
   1617c:	00034139 	.word	0x00034139
   16180:	461c4000 	.word	0x461c4000
   16184:	00034609 	.word	0x00034609
   16188:	00034941 	.word	0x00034941
   1618c:	00038088 	.word	0x00038088
   16190:	00038098 	.word	0x00038098

00016194 <InitializeSeesaw>:

 * @return		Returns 0 if no errors.
 * @note
 */
int InitializeSeesaw(void)
{
   16194:	b580      	push	{r7, lr}
   16196:	b082      	sub	sp, #8
   16198:	af00      	add	r7, sp, #0
    uint8_t readData[2];
    seesawData.address = NEO_TRELLIS_ADDR;
   1619a:	4b38      	ldr	r3, [pc, #224]	; (1627c <InitializeSeesaw+0xe8>)
   1619c:	222e      	movs	r2, #46	; 0x2e
   1619e:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgBaseGetHWID[0];
   161a0:	4b36      	ldr	r3, [pc, #216]	; (1627c <InitializeSeesaw+0xe8>)
   161a2:	4a37      	ldr	r2, [pc, #220]	; (16280 <InitializeSeesaw+0xec>)
   161a4:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgBaseGetHWID);
   161a6:	4b35      	ldr	r3, [pc, #212]	; (1627c <InitializeSeesaw+0xe8>)
   161a8:	2202      	movs	r2, #2
   161aa:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &readData[0];
   161ac:	4b33      	ldr	r3, [pc, #204]	; (1627c <InitializeSeesaw+0xe8>)
   161ae:	003a      	movs	r2, r7
   161b0:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   161b2:	4b32      	ldr	r3, [pc, #200]	; (1627c <InitializeSeesaw+0xe8>)
   161b4:	2201      	movs	r2, #1
   161b6:	819a      	strh	r2, [r3, #12]

    // Check if device is on the line - it should answer with its HW ID

    int error = I2cReadDataWait(&seesawData, 0, 100);
   161b8:	4b30      	ldr	r3, [pc, #192]	; (1627c <InitializeSeesaw+0xe8>)
   161ba:	2264      	movs	r2, #100	; 0x64
   161bc:	2100      	movs	r1, #0
   161be:	0018      	movs	r0, r3
   161c0:	4b30      	ldr	r3, [pc, #192]	; (16284 <InitializeSeesaw+0xf0>)
   161c2:	4798      	blx	r3
   161c4:	0003      	movs	r3, r0
   161c6:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   161c8:	687b      	ldr	r3, [r7, #4]
   161ca:	2b00      	cmp	r3, #0
   161cc:	d004      	beq.n	161d8 <InitializeSeesaw+0x44>
        SerialConsoleWriteString("Error initializing Seesaw!/r/n");
   161ce:	4b2e      	ldr	r3, [pc, #184]	; (16288 <InitializeSeesaw+0xf4>)
   161d0:	0018      	movs	r0, r3
   161d2:	4b2e      	ldr	r3, [pc, #184]	; (1628c <InitializeSeesaw+0xf8>)
   161d4:	4798      	blx	r3
   161d6:	e00c      	b.n	161f2 <InitializeSeesaw+0x5e>
    } else {
        if (readData[0] != SEESAW_HW_ID_CODE) {
   161d8:	003b      	movs	r3, r7
   161da:	781b      	ldrb	r3, [r3, #0]
   161dc:	2b55      	cmp	r3, #85	; 0x55
   161de:	d004      	beq.n	161ea <InitializeSeesaw+0x56>
            SerialConsoleWriteString("Error/r/n");
   161e0:	4b2b      	ldr	r3, [pc, #172]	; (16290 <InitializeSeesaw+0xfc>)
   161e2:	0018      	movs	r0, r3
   161e4:	4b29      	ldr	r3, [pc, #164]	; (1628c <InitializeSeesaw+0xf8>)
   161e6:	4798      	blx	r3
   161e8:	e003      	b.n	161f2 <InitializeSeesaw+0x5e>
        } else {
            SerialConsoleWriteString("Found Seesaw!/r/n");
   161ea:	4b2a      	ldr	r3, [pc, #168]	; (16294 <InitializeSeesaw+0x100>)
   161ec:	0018      	movs	r0, r3
   161ee:	4b27      	ldr	r3, [pc, #156]	; (1628c <InitializeSeesaw+0xf8>)
   161f0:	4798      	blx	r3
        }
    }

    // Tell the Seesaw which pins to use
    seesawData.msgOut = &msgNeopixelPin[0];
   161f2:	4b22      	ldr	r3, [pc, #136]	; (1627c <InitializeSeesaw+0xe8>)
   161f4:	4a28      	ldr	r2, [pc, #160]	; (16298 <InitializeSeesaw+0x104>)
   161f6:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelPin);
   161f8:	4b20      	ldr	r3, [pc, #128]	; (1627c <InitializeSeesaw+0xe8>)
   161fa:	2203      	movs	r2, #3
   161fc:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   161fe:	4b1f      	ldr	r3, [pc, #124]	; (1627c <InitializeSeesaw+0xe8>)
   16200:	2164      	movs	r1, #100	; 0x64
   16202:	0018      	movs	r0, r3
   16204:	4b25      	ldr	r3, [pc, #148]	; (1629c <InitializeSeesaw+0x108>)
   16206:	4798      	blx	r3
   16208:	0003      	movs	r3, r0
   1620a:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   1620c:	687b      	ldr	r3, [r7, #4]
   1620e:	2b00      	cmp	r3, #0
   16210:	d003      	beq.n	1621a <InitializeSeesaw+0x86>
        SerialConsoleWriteString("Could not write Seesaw pin!/r/n");
   16212:	4b23      	ldr	r3, [pc, #140]	; (162a0 <InitializeSeesaw+0x10c>)
   16214:	0018      	movs	r0, r3
   16216:	4b1d      	ldr	r3, [pc, #116]	; (1628c <InitializeSeesaw+0xf8>)
   16218:	4798      	blx	r3
    }

    // Set seesaw Neopixel speed
    seesawData.msgOut = &msgNeopixelSpeed[0];
   1621a:	4b18      	ldr	r3, [pc, #96]	; (1627c <InitializeSeesaw+0xe8>)
   1621c:	4a21      	ldr	r2, [pc, #132]	; (162a4 <InitializeSeesaw+0x110>)
   1621e:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelSpeed);
   16220:	4b16      	ldr	r3, [pc, #88]	; (1627c <InitializeSeesaw+0xe8>)
   16222:	2203      	movs	r2, #3
   16224:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   16226:	4b15      	ldr	r3, [pc, #84]	; (1627c <InitializeSeesaw+0xe8>)
   16228:	2164      	movs	r1, #100	; 0x64
   1622a:	0018      	movs	r0, r3
   1622c:	4b1b      	ldr	r3, [pc, #108]	; (1629c <InitializeSeesaw+0x108>)
   1622e:	4798      	blx	r3
   16230:	0003      	movs	r3, r0
   16232:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   16234:	687b      	ldr	r3, [r7, #4]
   16236:	2b00      	cmp	r3, #0
   16238:	d003      	beq.n	16242 <InitializeSeesaw+0xae>
        SerialConsoleWriteString("Could not set seesaw Neopixel speed!/r/n");
   1623a:	4b1b      	ldr	r3, [pc, #108]	; (162a8 <InitializeSeesaw+0x114>)
   1623c:	0018      	movs	r0, r3
   1623e:	4b13      	ldr	r3, [pc, #76]	; (1628c <InitializeSeesaw+0xf8>)
   16240:	4798      	blx	r3
    }

    // Set seesaw Neopixel number of devices
    seesawData.msgOut = &msgNeopixelBufLength[0];
   16242:	4b0e      	ldr	r3, [pc, #56]	; (1627c <InitializeSeesaw+0xe8>)
   16244:	4a19      	ldr	r2, [pc, #100]	; (162ac <InitializeSeesaw+0x118>)
   16246:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelBufLength);
   16248:	4b0c      	ldr	r3, [pc, #48]	; (1627c <InitializeSeesaw+0xe8>)
   1624a:	2204      	movs	r2, #4
   1624c:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   1624e:	4b0b      	ldr	r3, [pc, #44]	; (1627c <InitializeSeesaw+0xe8>)
   16250:	2164      	movs	r1, #100	; 0x64
   16252:	0018      	movs	r0, r3
   16254:	4b11      	ldr	r3, [pc, #68]	; (1629c <InitializeSeesaw+0x108>)
   16256:	4798      	blx	r3
   16258:	0003      	movs	r3, r0
   1625a:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   1625c:	687b      	ldr	r3, [r7, #4]
   1625e:	2b00      	cmp	r3, #0
   16260:	d003      	beq.n	1626a <InitializeSeesaw+0xd6>
        SerialConsoleWriteString("Could not set seesaw Neopixel number of devices/r/n");
   16262:	4b13      	ldr	r3, [pc, #76]	; (162b0 <InitializeSeesaw+0x11c>)
   16264:	0018      	movs	r0, r3
   16266:	4b09      	ldr	r3, [pc, #36]	; (1628c <InitializeSeesaw+0xf8>)
   16268:	4798      	blx	r3
    }

    SeesawTurnOnLedTest();
   1626a:	4b12      	ldr	r3, [pc, #72]	; (162b4 <InitializeSeesaw+0x120>)
   1626c:	4798      	blx	r3

    SeesawInitializeKeypad();
   1626e:	4b12      	ldr	r3, [pc, #72]	; (162b8 <InitializeSeesaw+0x124>)
   16270:	4798      	blx	r3
    return error;
   16272:	687b      	ldr	r3, [r7, #4]
}
   16274:	0018      	movs	r0, r3
   16276:	46bd      	mov	sp, r7
   16278:	b002      	add	sp, #8
   1627a:	bd80      	pop	{r7, pc}
   1627c:	200048b8 	.word	0x200048b8
   16280:	000380ac 	.word	0x000380ac
   16284:	00014bf5 	.word	0x00014bf5
   16288:	000380c4 	.word	0x000380c4
   1628c:	0001ecd5 	.word	0x0001ecd5
   16290:	000380e4 	.word	0x000380e4
   16294:	000380f0 	.word	0x000380f0
   16298:	000380b0 	.word	0x000380b0
   1629c:	00014b1d 	.word	0x00014b1d
   162a0:	00038104 	.word	0x00038104
   162a4:	000380b4 	.word	0x000380b4
   162a8:	00038124 	.word	0x00038124
   162ac:	000380b8 	.word	0x000380b8
   162b0:	00038150 	.word	0x00038150
   162b4:	00016669 	.word	0x00016669
   162b8:	00016579 	.word	0x00016579

000162bc <SeesawGetKeypadCount>:

 * @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
 * @note
*/
uint8_t SeesawGetKeypadCount(void)
{
   162bc:	b580      	push	{r7, lr}
   162be:	b082      	sub	sp, #8
   162c0:	af00      	add	r7, sp, #0
    uint8_t count = 0;
   162c2:	1cfb      	adds	r3, r7, #3
   162c4:	2200      	movs	r2, #0
   162c6:	701a      	strb	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   162c8:	4b11      	ldr	r3, [pc, #68]	; (16310 <SeesawGetKeypadCount+0x54>)
   162ca:	222e      	movs	r2, #46	; 0x2e
   162cc:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadGetCount[0];
   162ce:	4b10      	ldr	r3, [pc, #64]	; (16310 <SeesawGetKeypadCount+0x54>)
   162d0:	4a10      	ldr	r2, [pc, #64]	; (16314 <SeesawGetKeypadCount+0x58>)
   162d2:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadGetCount);
   162d4:	4b0e      	ldr	r3, [pc, #56]	; (16310 <SeesawGetKeypadCount+0x54>)
   162d6:	2202      	movs	r2, #2
   162d8:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &count;
   162da:	4b0d      	ldr	r3, [pc, #52]	; (16310 <SeesawGetKeypadCount+0x54>)
   162dc:	1cfa      	adds	r2, r7, #3
   162de:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   162e0:	4b0b      	ldr	r3, [pc, #44]	; (16310 <SeesawGetKeypadCount+0x54>)
   162e2:	2201      	movs	r2, #1
   162e4:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   162e6:	4b0a      	ldr	r3, [pc, #40]	; (16310 <SeesawGetKeypadCount+0x54>)
   162e8:	2264      	movs	r2, #100	; 0x64
   162ea:	2100      	movs	r1, #0
   162ec:	0018      	movs	r0, r3
   162ee:	4b0a      	ldr	r3, [pc, #40]	; (16318 <SeesawGetKeypadCount+0x5c>)
   162f0:	4798      	blx	r3
   162f2:	0003      	movs	r3, r0
   162f4:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   162f6:	687b      	ldr	r3, [r7, #4]
   162f8:	2b00      	cmp	r3, #0
   162fa:	d003      	beq.n	16304 <SeesawGetKeypadCount+0x48>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   162fc:	4b07      	ldr	r3, [pc, #28]	; (1631c <SeesawGetKeypadCount+0x60>)
   162fe:	0018      	movs	r0, r3
   16300:	4b07      	ldr	r3, [pc, #28]	; (16320 <SeesawGetKeypadCount+0x64>)
   16302:	4798      	blx	r3
    }
    return count;
   16304:	1cfb      	adds	r3, r7, #3
   16306:	781b      	ldrb	r3, [r3, #0]
}
   16308:	0018      	movs	r0, r3
   1630a:	46bd      	mov	sp, r7
   1630c:	b002      	add	sp, #8
   1630e:	bd80      	pop	{r7, pc}
   16310:	200048b8 	.word	0x200048b8
   16314:	000380c0 	.word	0x000380c0
   16318:	00014bf5 	.word	0x00014bf5
   1631c:	00038184 	.word	0x00038184
   16320:	0001ecd5 	.word	0x0001ecd5

00016324 <SeesawReadKeypad>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*/
int32_t SeesawReadKeypad(uint8_t *buffer, uint8_t count)
{
   16324:	b580      	push	{r7, lr}
   16326:	b084      	sub	sp, #16
   16328:	af00      	add	r7, sp, #0
   1632a:	6078      	str	r0, [r7, #4]
   1632c:	000a      	movs	r2, r1
   1632e:	1cfb      	adds	r3, r7, #3
   16330:	701a      	strb	r2, [r3, #0]
    if (count == 0) return ERROR_NONE;
   16332:	1cfb      	adds	r3, r7, #3
   16334:	781b      	ldrb	r3, [r3, #0]
   16336:	2b00      	cmp	r3, #0
   16338:	d101      	bne.n	1633e <SeesawReadKeypad+0x1a>
   1633a:	2300      	movs	r3, #0
   1633c:	e026      	b.n	1638c <SeesawReadKeypad+0x68>
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
   1633e:	2308      	movs	r3, #8
   16340:	18fb      	adds	r3, r7, r3
   16342:	4a14      	ldr	r2, [pc, #80]	; (16394 <SeesawReadKeypad+0x70>)
   16344:	8812      	ldrh	r2, [r2, #0]
   16346:	801a      	strh	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   16348:	4b13      	ldr	r3, [pc, #76]	; (16398 <SeesawReadKeypad+0x74>)
   1634a:	222e      	movs	r2, #46	; 0x2e
   1634c:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t*) &cmd[0];
   1634e:	4b12      	ldr	r3, [pc, #72]	; (16398 <SeesawReadKeypad+0x74>)
   16350:	2208      	movs	r2, #8
   16352:	18ba      	adds	r2, r7, r2
   16354:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   16356:	4b10      	ldr	r3, [pc, #64]	; (16398 <SeesawReadKeypad+0x74>)
   16358:	2202      	movs	r2, #2
   1635a:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = buffer;
   1635c:	4b0e      	ldr	r3, [pc, #56]	; (16398 <SeesawReadKeypad+0x74>)
   1635e:	687a      	ldr	r2, [r7, #4]
   16360:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = count;
   16362:	1cfb      	adds	r3, r7, #3
   16364:	781b      	ldrb	r3, [r3, #0]
   16366:	b29a      	uxth	r2, r3
   16368:	4b0b      	ldr	r3, [pc, #44]	; (16398 <SeesawReadKeypad+0x74>)
   1636a:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   1636c:	4b0a      	ldr	r3, [pc, #40]	; (16398 <SeesawReadKeypad+0x74>)
   1636e:	2264      	movs	r2, #100	; 0x64
   16370:	2100      	movs	r1, #0
   16372:	0018      	movs	r0, r3
   16374:	4b09      	ldr	r3, [pc, #36]	; (1639c <SeesawReadKeypad+0x78>)
   16376:	4798      	blx	r3
   16378:	0003      	movs	r3, r0
   1637a:	60fb      	str	r3, [r7, #12]

    if (ERROR_NONE != error) {
   1637c:	68fb      	ldr	r3, [r7, #12]
   1637e:	2b00      	cmp	r3, #0
   16380:	d003      	beq.n	1638a <SeesawReadKeypad+0x66>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   16382:	4b07      	ldr	r3, [pc, #28]	; (163a0 <SeesawReadKeypad+0x7c>)
   16384:	0018      	movs	r0, r3
   16386:	4b07      	ldr	r3, [pc, #28]	; (163a4 <SeesawReadKeypad+0x80>)
   16388:	4798      	blx	r3
    }
    return error;
   1638a:	68fb      	ldr	r3, [r7, #12]
}
   1638c:	0018      	movs	r0, r3
   1638e:	46bd      	mov	sp, r7
   16390:	b004      	add	sp, #16
   16392:	bd80      	pop	{r7, pc}
   16394:	000381a8 	.word	0x000381a8
   16398:	200048b8 	.word	0x200048b8
   1639c:	00014bf5 	.word	0x00014bf5
   163a0:	00038184 	.word	0x00038184
   163a4:	0001ecd5 	.word	0x0001ecd5

000163a8 <SeesawActivateKey>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note
*/
int32_t SeesawActivateKey(uint8_t key, uint8_t edge, bool enable)
{
   163a8:	b590      	push	{r4, r7, lr}
   163aa:	b087      	sub	sp, #28
   163ac:	af00      	add	r7, sp, #0
   163ae:	0004      	movs	r4, r0
   163b0:	0008      	movs	r0, r1
   163b2:	0011      	movs	r1, r2
   163b4:	1dfb      	adds	r3, r7, #7
   163b6:	1c22      	adds	r2, r4, #0
   163b8:	701a      	strb	r2, [r3, #0]
   163ba:	1dbb      	adds	r3, r7, #6
   163bc:	1c02      	adds	r2, r0, #0
   163be:	701a      	strb	r2, [r3, #0]
   163c0:	1d7b      	adds	r3, r7, #5
   163c2:	1c0a      	adds	r2, r1, #0
   163c4:	701a      	strb	r2, [r3, #0]
    union keyState ks;
    ks.bit.STATE = enable;
   163c6:	2310      	movs	r3, #16
   163c8:	18fb      	adds	r3, r7, r3
   163ca:	1d7a      	adds	r2, r7, #5
   163cc:	7812      	ldrb	r2, [r2, #0]
   163ce:	2101      	movs	r1, #1
   163d0:	0010      	movs	r0, r2
   163d2:	4008      	ands	r0, r1
   163d4:	781a      	ldrb	r2, [r3, #0]
   163d6:	2101      	movs	r1, #1
   163d8:	438a      	bics	r2, r1
   163da:	1c11      	adds	r1, r2, #0
   163dc:	1c02      	adds	r2, r0, #0
   163de:	430a      	orrs	r2, r1
   163e0:	701a      	strb	r2, [r3, #0]
    ks.bit.ACTIVE = (1 << edge);
   163e2:	1dbb      	adds	r3, r7, #6
   163e4:	781b      	ldrb	r3, [r3, #0]
   163e6:	2201      	movs	r2, #1
   163e8:	409a      	lsls	r2, r3
   163ea:	0013      	movs	r3, r2
   163ec:	b2db      	uxtb	r3, r3
   163ee:	1c1a      	adds	r2, r3, #0
   163f0:	230f      	movs	r3, #15
   163f2:	4013      	ands	r3, r2
   163f4:	b2da      	uxtb	r2, r3
   163f6:	2310      	movs	r3, #16
   163f8:	18fb      	adds	r3, r7, r3
   163fa:	210f      	movs	r1, #15
   163fc:	400a      	ands	r2, r1
   163fe:	1890      	adds	r0, r2, r2
   16400:	781a      	ldrb	r2, [r3, #0]
   16402:	211e      	movs	r1, #30
   16404:	438a      	bics	r2, r1
   16406:	1c11      	adds	r1, r2, #0
   16408:	1c02      	adds	r2, r0, #0
   1640a:	430a      	orrs	r2, r1
   1640c:	701a      	strb	r2, [r3, #0]
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_EVENT, key, ks.reg};
   1640e:	230c      	movs	r3, #12
   16410:	18fb      	adds	r3, r7, r3
   16412:	2210      	movs	r2, #16
   16414:	701a      	strb	r2, [r3, #0]
   16416:	230c      	movs	r3, #12
   16418:	18fb      	adds	r3, r7, r3
   1641a:	2201      	movs	r2, #1
   1641c:	705a      	strb	r2, [r3, #1]
   1641e:	230c      	movs	r3, #12
   16420:	18fb      	adds	r3, r7, r3
   16422:	1dfa      	adds	r2, r7, #7
   16424:	7812      	ldrb	r2, [r2, #0]
   16426:	709a      	strb	r2, [r3, #2]
   16428:	2310      	movs	r3, #16
   1642a:	18fb      	adds	r3, r7, r3
   1642c:	781a      	ldrb	r2, [r3, #0]
   1642e:	230c      	movs	r3, #12
   16430:	18fb      	adds	r3, r7, r3
   16432:	70da      	strb	r2, [r3, #3]

    seesawData.address = NEO_TRELLIS_ADDR;
   16434:	4b0c      	ldr	r3, [pc, #48]	; (16468 <SeesawActivateKey+0xc0>)
   16436:	222e      	movs	r2, #46	; 0x2e
   16438:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t *) &cmd[0];
   1643a:	4b0b      	ldr	r3, [pc, #44]	; (16468 <SeesawActivateKey+0xc0>)
   1643c:	220c      	movs	r2, #12
   1643e:	18ba      	adds	r2, r7, r2
   16440:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   16442:	4b09      	ldr	r3, [pc, #36]	; (16468 <SeesawActivateKey+0xc0>)
   16444:	2204      	movs	r2, #4
   16446:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
   16448:	4b07      	ldr	r3, [pc, #28]	; (16468 <SeesawActivateKey+0xc0>)
   1644a:	2200      	movs	r2, #0
   1644c:	819a      	strh	r2, [r3, #12]
    int32_t error = I2cWriteDataWait(&seesawData, 100);
   1644e:	4b06      	ldr	r3, [pc, #24]	; (16468 <SeesawActivateKey+0xc0>)
   16450:	2164      	movs	r1, #100	; 0x64
   16452:	0018      	movs	r0, r3
   16454:	4b05      	ldr	r3, [pc, #20]	; (1646c <SeesawActivateKey+0xc4>)
   16456:	4798      	blx	r3
   16458:	0003      	movs	r3, r0
   1645a:	617b      	str	r3, [r7, #20]
    return error;
   1645c:	697b      	ldr	r3, [r7, #20]
}
   1645e:	0018      	movs	r0, r3
   16460:	46bd      	mov	sp, r7
   16462:	b007      	add	sp, #28
   16464:	bd90      	pop	{r4, r7, pc}
   16466:	46c0      	nop			; (mov r8, r8)
   16468:	200048b8 	.word	0x200048b8
   1646c:	00014b1d 	.word	0x00014b1d

00016470 <SeesawSetLed>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
         FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
   16470:	b5b0      	push	{r4, r5, r7, lr}
   16472:	b086      	sub	sp, #24
   16474:	af00      	add	r7, sp, #0
   16476:	0005      	movs	r5, r0
   16478:	000c      	movs	r4, r1
   1647a:	0010      	movs	r0, r2
   1647c:	0019      	movs	r1, r3
   1647e:	1dfb      	adds	r3, r7, #7
   16480:	1c2a      	adds	r2, r5, #0
   16482:	701a      	strb	r2, [r3, #0]
   16484:	1dbb      	adds	r3, r7, #6
   16486:	1c22      	adds	r2, r4, #0
   16488:	701a      	strb	r2, [r3, #0]
   1648a:	1d7b      	adds	r3, r7, #5
   1648c:	1c02      	adds	r2, r0, #0
   1648e:	701a      	strb	r2, [r3, #0]
   16490:	1d3b      	adds	r3, r7, #4
   16492:	1c0a      	adds	r2, r1, #0
   16494:	701a      	strb	r2, [r3, #0]
    uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
   16496:	2308      	movs	r3, #8
   16498:	18fb      	adds	r3, r7, r3
   1649a:	220e      	movs	r2, #14
   1649c:	701a      	strb	r2, [r3, #0]
   1649e:	2308      	movs	r3, #8
   164a0:	18fb      	adds	r3, r7, r3
   164a2:	2204      	movs	r2, #4
   164a4:	705a      	strb	r2, [r3, #1]
   164a6:	2308      	movs	r3, #8
   164a8:	18fb      	adds	r3, r7, r3
   164aa:	2200      	movs	r2, #0
   164ac:	709a      	strb	r2, [r3, #2]
   164ae:	2308      	movs	r3, #8
   164b0:	18fb      	adds	r3, r7, r3
   164b2:	2200      	movs	r2, #0
   164b4:	70da      	strb	r2, [r3, #3]
   164b6:	2308      	movs	r3, #8
   164b8:	18fb      	adds	r3, r7, r3
   164ba:	1d7a      	adds	r2, r7, #5
   164bc:	7812      	ldrb	r2, [r2, #0]
   164be:	711a      	strb	r2, [r3, #4]
   164c0:	2308      	movs	r3, #8
   164c2:	18fb      	adds	r3, r7, r3
   164c4:	1dba      	adds	r2, r7, #6
   164c6:	7812      	ldrb	r2, [r2, #0]
   164c8:	715a      	strb	r2, [r3, #5]
   164ca:	2308      	movs	r3, #8
   164cc:	18fb      	adds	r3, r7, r3
   164ce:	1d3a      	adds	r2, r7, #4
   164d0:	7812      	ldrb	r2, [r2, #0]
   164d2:	719a      	strb	r2, [r3, #6]

    uint16_t offset = 3 * key;  // RGB LED
   164d4:	1dfb      	adds	r3, r7, #7
   164d6:	781b      	ldrb	r3, [r3, #0]
   164d8:	b29b      	uxth	r3, r3
   164da:	2216      	movs	r2, #22
   164dc:	18ba      	adds	r2, r7, r2
   164de:	1c19      	adds	r1, r3, #0
   164e0:	1c0b      	adds	r3, r1, #0
   164e2:	18db      	adds	r3, r3, r3
   164e4:	185b      	adds	r3, r3, r1
   164e6:	8013      	strh	r3, [r2, #0]
    write_buffer1[2] = (offset >> 8);
   164e8:	2316      	movs	r3, #22
   164ea:	18fb      	adds	r3, r7, r3
   164ec:	881b      	ldrh	r3, [r3, #0]
   164ee:	0a1b      	lsrs	r3, r3, #8
   164f0:	b29b      	uxth	r3, r3
   164f2:	b2da      	uxtb	r2, r3
   164f4:	2308      	movs	r3, #8
   164f6:	18fb      	adds	r3, r7, r3
   164f8:	709a      	strb	r2, [r3, #2]
    write_buffer1[3] = (offset);
   164fa:	2316      	movs	r3, #22
   164fc:	18fb      	adds	r3, r7, r3
   164fe:	881b      	ldrh	r3, [r3, #0]
   16500:	b2da      	uxtb	r2, r3
   16502:	2308      	movs	r3, #8
   16504:	18fb      	adds	r3, r7, r3
   16506:	70da      	strb	r2, [r3, #3]

    seesawData.msgOut = (const uint8_t *)&write_buffer1[0];
   16508:	4b09      	ldr	r3, [pc, #36]	; (16530 <SeesawSetLed+0xc0>)
   1650a:	2208      	movs	r2, #8
   1650c:	18ba      	adds	r2, r7, r2
   1650e:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(write_buffer1);
   16510:	4b07      	ldr	r3, [pc, #28]	; (16530 <SeesawSetLed+0xc0>)
   16512:	2207      	movs	r2, #7
   16514:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   16516:	4b06      	ldr	r3, [pc, #24]	; (16530 <SeesawSetLed+0xc0>)
   16518:	2164      	movs	r1, #100	; 0x64
   1651a:	0018      	movs	r0, r3
   1651c:	4b05      	ldr	r3, [pc, #20]	; (16534 <SeesawSetLed+0xc4>)
   1651e:	4798      	blx	r3
   16520:	0003      	movs	r3, r0
   16522:	613b      	str	r3, [r7, #16]
    return error;
   16524:	693b      	ldr	r3, [r7, #16]
}
   16526:	0018      	movs	r0, r3
   16528:	46bd      	mov	sp, r7
   1652a:	b006      	add	sp, #24
   1652c:	bdb0      	pop	{r4, r5, r7, pc}
   1652e:	46c0      	nop			; (mov r8, r8)
   16530:	200048b8 	.word	0x200048b8
   16534:	00014b1d 	.word	0x00014b1d

00016538 <SeesawOrderLedUpdate>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*/
int32_t SeesawOrderLedUpdate(void)
{
   16538:	b580      	push	{r7, lr}
   1653a:	b082      	sub	sp, #8
   1653c:	af00      	add	r7, sp, #0
    uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   1653e:	003b      	movs	r3, r7
   16540:	4a0a      	ldr	r2, [pc, #40]	; (1656c <SeesawOrderLedUpdate+0x34>)
   16542:	8812      	ldrh	r2, [r2, #0]
   16544:	801a      	strh	r2, [r3, #0]

    seesawData.msgOut = (const uint8_t *) &orderBuffer[0];
   16546:	4b0a      	ldr	r3, [pc, #40]	; (16570 <SeesawOrderLedUpdate+0x38>)
   16548:	003a      	movs	r2, r7
   1654a:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(orderBuffer);
   1654c:	4b08      	ldr	r3, [pc, #32]	; (16570 <SeesawOrderLedUpdate+0x38>)
   1654e:	2202      	movs	r2, #2
   16550:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   16552:	4b07      	ldr	r3, [pc, #28]	; (16570 <SeesawOrderLedUpdate+0x38>)
   16554:	2164      	movs	r1, #100	; 0x64
   16556:	0018      	movs	r0, r3
   16558:	4b06      	ldr	r3, [pc, #24]	; (16574 <SeesawOrderLedUpdate+0x3c>)
   1655a:	4798      	blx	r3
   1655c:	0003      	movs	r3, r0
   1655e:	607b      	str	r3, [r7, #4]
    return error;
   16560:	687b      	ldr	r3, [r7, #4]
}
   16562:	0018      	movs	r0, r3
   16564:	46bd      	mov	sp, r7
   16566:	b002      	add	sp, #8
   16568:	bd80      	pop	{r7, pc}
   1656a:	46c0      	nop			; (mov r8, r8)
   1656c:	000381ac 	.word	0x000381ac
   16570:	200048b8 	.word	0x200048b8
   16574:	00014b1d 	.word	0x00014b1d

00016578 <SeesawInitializeKeypad>:
/*****************************************************************************************
 *  @brief     Activates a given key on the keypad
 *  @return     Returns any error code found when executing task.
 ****************************************************************************************/
static void SeesawInitializeKeypad(void)
{
   16578:	b580      	push	{r7, lr}
   1657a:	b082      	sub	sp, #8
   1657c:	af00      	add	r7, sp, #0
    seesawData.address = NEO_TRELLIS_ADDR;
   1657e:	4b33      	ldr	r3, [pc, #204]	; (1664c <SeesawInitializeKeypad+0xd4>)
   16580:	222e      	movs	r2, #46	; 0x2e
   16582:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadEnableInt[0];
   16584:	4b31      	ldr	r3, [pc, #196]	; (1664c <SeesawInitializeKeypad+0xd4>)
   16586:	4a32      	ldr	r2, [pc, #200]	; (16650 <SeesawInitializeKeypad+0xd8>)
   16588:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadEnableInt);
   1658a:	4b30      	ldr	r3, [pc, #192]	; (1664c <SeesawInitializeKeypad+0xd4>)
   1658c:	2203      	movs	r2, #3
   1658e:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
   16590:	4b2e      	ldr	r3, [pc, #184]	; (1664c <SeesawInitializeKeypad+0xd4>)
   16592:	2200      	movs	r2, #0
   16594:	819a      	strh	r2, [r3, #12]

    int32_t error = I2cWriteDataWait(&seesawData, 100);
   16596:	4b2d      	ldr	r3, [pc, #180]	; (1664c <SeesawInitializeKeypad+0xd4>)
   16598:	2164      	movs	r1, #100	; 0x64
   1659a:	0018      	movs	r0, r3
   1659c:	4b2d      	ldr	r3, [pc, #180]	; (16654 <SeesawInitializeKeypad+0xdc>)
   1659e:	4798      	blx	r3
   165a0:	0003      	movs	r3, r0
   165a2:	603b      	str	r3, [r7, #0]
    if (ERROR_NONE != error) {
   165a4:	683b      	ldr	r3, [r7, #0]
   165a6:	2b00      	cmp	r3, #0
   165a8:	d003      	beq.n	165b2 <SeesawInitializeKeypad+0x3a>
        SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   165aa:	4b2b      	ldr	r3, [pc, #172]	; (16658 <SeesawInitializeKeypad+0xe0>)
   165ac:	0018      	movs	r0, r3
   165ae:	4b2b      	ldr	r3, [pc, #172]	; (1665c <SeesawInitializeKeypad+0xe4>)
   165b0:	4798      	blx	r3
    }

    // Initialize all buttons to register an event for both press and release
    for (int i = 0; i < 16; i++) {
   165b2:	2300      	movs	r3, #0
   165b4:	607b      	str	r3, [r7, #4]
   165b6:	e041      	b.n	1663c <SeesawInitializeKeypad+0xc4>
        error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
   165b8:	687b      	ldr	r3, [r7, #4]
   165ba:	2b00      	cmp	r3, #0
   165bc:	da00      	bge.n	165c0 <SeesawInitializeKeypad+0x48>
   165be:	3303      	adds	r3, #3
   165c0:	109b      	asrs	r3, r3, #2
   165c2:	b2db      	uxtb	r3, r3
   165c4:	00db      	lsls	r3, r3, #3
   165c6:	b2da      	uxtb	r2, r3
   165c8:	687b      	ldr	r3, [r7, #4]
   165ca:	4925      	ldr	r1, [pc, #148]	; (16660 <SeesawInitializeKeypad+0xe8>)
   165cc:	400b      	ands	r3, r1
   165ce:	d504      	bpl.n	165da <SeesawInitializeKeypad+0x62>
   165d0:	3b01      	subs	r3, #1
   165d2:	2104      	movs	r1, #4
   165d4:	4249      	negs	r1, r1
   165d6:	430b      	orrs	r3, r1
   165d8:	3301      	adds	r3, #1
   165da:	b2db      	uxtb	r3, r3
   165dc:	18d3      	adds	r3, r2, r3
   165de:	b2db      	uxtb	r3, r3
   165e0:	2201      	movs	r2, #1
   165e2:	2103      	movs	r1, #3
   165e4:	0018      	movs	r0, r3
   165e6:	4b1f      	ldr	r3, [pc, #124]	; (16664 <SeesawInitializeKeypad+0xec>)
   165e8:	4798      	blx	r3
   165ea:	0003      	movs	r3, r0
   165ec:	603b      	str	r3, [r7, #0]
        error |= SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_FALLING, true);
   165ee:	687b      	ldr	r3, [r7, #4]
   165f0:	2b00      	cmp	r3, #0
   165f2:	da00      	bge.n	165f6 <SeesawInitializeKeypad+0x7e>
   165f4:	3303      	adds	r3, #3
   165f6:	109b      	asrs	r3, r3, #2
   165f8:	b2db      	uxtb	r3, r3
   165fa:	00db      	lsls	r3, r3, #3
   165fc:	b2da      	uxtb	r2, r3
   165fe:	687b      	ldr	r3, [r7, #4]
   16600:	4917      	ldr	r1, [pc, #92]	; (16660 <SeesawInitializeKeypad+0xe8>)
   16602:	400b      	ands	r3, r1
   16604:	d504      	bpl.n	16610 <SeesawInitializeKeypad+0x98>
   16606:	3b01      	subs	r3, #1
   16608:	2104      	movs	r1, #4
   1660a:	4249      	negs	r1, r1
   1660c:	430b      	orrs	r3, r1
   1660e:	3301      	adds	r3, #1
   16610:	b2db      	uxtb	r3, r3
   16612:	18d3      	adds	r3, r2, r3
   16614:	b2db      	uxtb	r3, r3
   16616:	2201      	movs	r2, #1
   16618:	2102      	movs	r1, #2
   1661a:	0018      	movs	r0, r3
   1661c:	4b11      	ldr	r3, [pc, #68]	; (16664 <SeesawInitializeKeypad+0xec>)
   1661e:	4798      	blx	r3
   16620:	0002      	movs	r2, r0
   16622:	683b      	ldr	r3, [r7, #0]
   16624:	4313      	orrs	r3, r2
   16626:	603b      	str	r3, [r7, #0]
        if (ERROR_NONE != error) {
   16628:	683b      	ldr	r3, [r7, #0]
   1662a:	2b00      	cmp	r3, #0
   1662c:	d003      	beq.n	16636 <SeesawInitializeKeypad+0xbe>
            SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   1662e:	4b0a      	ldr	r3, [pc, #40]	; (16658 <SeesawInitializeKeypad+0xe0>)
   16630:	0018      	movs	r0, r3
   16632:	4b0a      	ldr	r3, [pc, #40]	; (1665c <SeesawInitializeKeypad+0xe4>)
   16634:	4798      	blx	r3
    for (int i = 0; i < 16; i++) {
   16636:	687b      	ldr	r3, [r7, #4]
   16638:	3301      	adds	r3, #1
   1663a:	607b      	str	r3, [r7, #4]
   1663c:	687b      	ldr	r3, [r7, #4]
   1663e:	2b0f      	cmp	r3, #15
   16640:	ddba      	ble.n	165b8 <SeesawInitializeKeypad+0x40>
        }
    }
}
   16642:	46c0      	nop			; (mov r8, r8)
   16644:	46bd      	mov	sp, r7
   16646:	b002      	add	sp, #8
   16648:	bd80      	pop	{r7, pc}
   1664a:	46c0      	nop			; (mov r8, r8)
   1664c:	200048b8 	.word	0x200048b8
   16650:	000380bc 	.word	0x000380bc
   16654:	00014b1d 	.word	0x00014b1d
   16658:	000381b0 	.word	0x000381b0
   1665c:	0001ecd5 	.word	0x0001ecd5
   16660:	80000003 	.word	0x80000003
   16664:	000163a9 	.word	0x000163a9

00016668 <SeesawTurnOnLedTest>:

static void SeesawTurnOnLedTest(void)
{
   16668:	b5b0      	push	{r4, r5, r7, lr}
   1666a:	af00      	add	r7, sp, #0
    SeesawSetLed(15, 255, 255, 255);
   1666c:	23ff      	movs	r3, #255	; 0xff
   1666e:	22ff      	movs	r2, #255	; 0xff
   16670:	21ff      	movs	r1, #255	; 0xff
   16672:	200f      	movs	r0, #15
   16674:	4c09      	ldr	r4, [pc, #36]	; (1669c <SeesawTurnOnLedTest+0x34>)
   16676:	47a0      	blx	r4
    SeesawOrderLedUpdate();
   16678:	4b09      	ldr	r3, [pc, #36]	; (166a0 <SeesawTurnOnLedTest+0x38>)
   1667a:	4798      	blx	r3
    vTaskDelay(400);
   1667c:	23c8      	movs	r3, #200	; 0xc8
   1667e:	005b      	lsls	r3, r3, #1
   16680:	0018      	movs	r0, r3
   16682:	4b08      	ldr	r3, [pc, #32]	; (166a4 <SeesawTurnOnLedTest+0x3c>)
   16684:	4798      	blx	r3

    SeesawSetLed(15, 0, 0, 0);
   16686:	2300      	movs	r3, #0
   16688:	2200      	movs	r2, #0
   1668a:	2100      	movs	r1, #0
   1668c:	200f      	movs	r0, #15
   1668e:	4c03      	ldr	r4, [pc, #12]	; (1669c <SeesawTurnOnLedTest+0x34>)
   16690:	47a0      	blx	r4
    SeesawOrderLedUpdate();
   16692:	4b03      	ldr	r3, [pc, #12]	; (166a0 <SeesawTurnOnLedTest+0x38>)
   16694:	4798      	blx	r3
   16696:	46c0      	nop			; (mov r8, r8)
   16698:	46bd      	mov	sp, r7
   1669a:	bdb0      	pop	{r4, r5, r7, pc}
   1669c:	00016471 	.word	0x00016471
   166a0:	00016539 	.word	0x00016539
   166a4:	0001d081 	.word	0x0001d081

000166a8 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   166a8:	b580      	push	{r7, lr}
   166aa:	b084      	sub	sp, #16
   166ac:	af00      	add	r7, sp, #0
   166ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   166b0:	687b      	ldr	r3, [r7, #4]
   166b2:	681b      	ldr	r3, [r3, #0]
   166b4:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   166b6:	46c0      	nop			; (mov r8, r8)
   166b8:	68fb      	ldr	r3, [r7, #12]
   166ba:	689b      	ldr	r3, [r3, #8]
   166bc:	2202      	movs	r2, #2
   166be:	4013      	ands	r3, r2
   166c0:	d1fa      	bne.n	166b8 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   166c2:	68fb      	ldr	r3, [r7, #12]
   166c4:	681b      	ldr	r3, [r3, #0]
   166c6:	2202      	movs	r2, #2
   166c8:	431a      	orrs	r2, r3
   166ca:	68fb      	ldr	r3, [r7, #12]
   166cc:	601a      	str	r2, [r3, #0]
}
   166ce:	46c0      	nop			; (mov r8, r8)
   166d0:	46bd      	mov	sp, r7
   166d2:	b004      	add	sp, #16
   166d4:	bd80      	pop	{r7, pc}
	...

000166d8 <configure_tcc>:
 *  Author: 60267
 */ 
#include "servo.h"
struct tcc_module tcc_instance;
void configure_tcc(void)
{
   166d8:	b580      	push	{r7, lr}
   166da:	b0aa      	sub	sp, #168	; 0xa8
   166dc:	af00      	add	r7, sp, #0
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, CONF_PWM_MODULE);
   166de:	4a15      	ldr	r2, [pc, #84]	; (16734 <configure_tcc+0x5c>)
   166e0:	1d3b      	adds	r3, r7, #4
   166e2:	0011      	movs	r1, r2
   166e4:	0018      	movs	r0, r3
   166e6:	4b14      	ldr	r3, [pc, #80]	; (16738 <configure_tcc+0x60>)
   166e8:	4798      	blx	r3
	config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV4;
   166ea:	1d3b      	adds	r3, r7, #4
   166ec:	2202      	movs	r2, #2
   166ee:	72da      	strb	r2, [r3, #11]
	config_tcc.counter.period = 0xBA2E;
   166f0:	1d3b      	adds	r3, r7, #4
   166f2:	4a12      	ldr	r2, [pc, #72]	; (1673c <configure_tcc+0x64>)
   166f4:	605a      	str	r2, [r3, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
   166f6:	1d3b      	adds	r3, r7, #4
   166f8:	2202      	movs	r2, #2
   166fa:	761a      	strb	r2, [r3, #24]
	config_tcc.compare.match[CONF_PWM_CHANNEL] = (0xBA2E / 2);
   166fc:	1d3b      	adds	r3, r7, #4
   166fe:	4a10      	ldr	r2, [pc, #64]	; (16740 <configure_tcc+0x68>)
   16700:	625a      	str	r2, [r3, #36]	; 0x24
	config_tcc.pins.enable_wave_out_pin[CONF_PWM_OUTPUT] = true;
   16702:	1d3b      	adds	r3, r7, #4
   16704:	229a      	movs	r2, #154	; 0x9a
   16706:	2101      	movs	r1, #1
   16708:	5499      	strb	r1, [r3, r2]
	config_tcc.pins.wave_out_pin[CONF_PWM_OUTPUT]        = CONF_PWM_OUT_PIN;
   1670a:	1d3b      	adds	r3, r7, #4
   1670c:	220a      	movs	r2, #10
   1670e:	661a      	str	r2, [r3, #96]	; 0x60
	config_tcc.pins.wave_out_pin_mux[CONF_PWM_OUTPUT]    = CONF_PWM_OUT_MUX;
   16710:	1d3b      	adds	r3, r7, #4
   16712:	2280      	movs	r2, #128	; 0x80
   16714:	2105      	movs	r1, #5
   16716:	5099      	str	r1, [r3, r2]
	tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
   16718:	1d3a      	adds	r2, r7, #4
   1671a:	4906      	ldr	r1, [pc, #24]	; (16734 <configure_tcc+0x5c>)
   1671c:	4b09      	ldr	r3, [pc, #36]	; (16744 <configure_tcc+0x6c>)
   1671e:	0018      	movs	r0, r3
   16720:	4b09      	ldr	r3, [pc, #36]	; (16748 <configure_tcc+0x70>)
   16722:	4798      	blx	r3
	tcc_enable(&tcc_instance);
   16724:	4b07      	ldr	r3, [pc, #28]	; (16744 <configure_tcc+0x6c>)
   16726:	0018      	movs	r0, r3
   16728:	4b08      	ldr	r3, [pc, #32]	; (1674c <configure_tcc+0x74>)
   1672a:	4798      	blx	r3
}
   1672c:	46c0      	nop			; (mov r8, r8)
   1672e:	46bd      	mov	sp, r7
   16730:	b02a      	add	sp, #168	; 0xa8
   16732:	bd80      	pop	{r7, pc}
   16734:	42002000 	.word	0x42002000
   16738:	0002b2cd 	.word	0x0002b2cd
   1673c:	0000ba2e 	.word	0x0000ba2e
   16740:	00005d17 	.word	0x00005d17
   16744:	200048c8 	.word	0x200048c8
   16748:	0002b929 	.word	0x0002b929
   1674c:	000166a9 	.word	0x000166a9

00016750 <servo_setDuty>:


void servo_setDuty(int dutyCycle)
{
   16750:	b580      	push	{r7, lr}
   16752:	b084      	sub	sp, #16
   16754:	af00      	add	r7, sp, #0
   16756:	6078      	str	r0, [r7, #4]
	uint32_t compareValue = 0xBA2E / dutyCycle;
   16758:	4b07      	ldr	r3, [pc, #28]	; (16778 <servo_setDuty+0x28>)
   1675a:	6879      	ldr	r1, [r7, #4]
   1675c:	4807      	ldr	r0, [pc, #28]	; (1677c <servo_setDuty+0x2c>)
   1675e:	4798      	blx	r3
   16760:	0003      	movs	r3, r0
   16762:	60fb      	str	r3, [r7, #12]
	tcc_set_compare_value(&tcc_instance, CONF_PWM_CHANNEL, compareValue);
   16764:	68fa      	ldr	r2, [r7, #12]
   16766:	4b06      	ldr	r3, [pc, #24]	; (16780 <servo_setDuty+0x30>)
   16768:	2102      	movs	r1, #2
   1676a:	0018      	movs	r0, r3
   1676c:	4b05      	ldr	r3, [pc, #20]	; (16784 <servo_setDuty+0x34>)
   1676e:	4798      	blx	r3
   16770:	46c0      	nop			; (mov r8, r8)
   16772:	46bd      	mov	sp, r7
   16774:	b004      	add	sp, #16
   16776:	bd80      	pop	{r7, pc}
   16778:	00033be9 	.word	0x00033be9
   1677c:	0000ba2e 	.word	0x0000ba2e
   16780:	200048c8 	.word	0x200048c8
   16784:	0002bde9 	.word	0x0002bde9

00016788 <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
   16788:	b590      	push	{r4, r7, lr}
   1678a:	b09b      	sub	sp, #108	; 0x6c
   1678c:	af00      	add	r7, sp, #0
   1678e:	6078      	str	r0, [r7, #4]
    // Do initialization code here
	SerialConsoleWriteString("UI Task Started!");
   16790:	4b2a      	ldr	r3, [pc, #168]	; (1683c <vUiHandlerTask+0xb4>)
   16792:	0018      	movs	r0, r3
   16794:	4b2a      	ldr	r3, [pc, #168]	; (16840 <vUiHandlerTask+0xb8>)
   16796:	4798      	blx	r3
    uiState = UI_STATE_IGNORE_PRESSES;  // Initial state
   16798:	4b2a      	ldr	r3, [pc, #168]	; (16844 <vUiHandlerTask+0xbc>)
   1679a:	2201      	movs	r2, #1
   1679c:	701a      	strb	r2, [r3, #0]
	configure_tcc();
   1679e:	4b2a      	ldr	r3, [pc, #168]	; (16848 <vUiHandlerTask+0xc0>)
   167a0:	4798      	blx	r3
	servo_setDuty(2);
   167a2:	2002      	movs	r0, #2
   167a4:	4b29      	ldr	r3, [pc, #164]	; (1684c <vUiHandlerTask+0xc4>)
   167a6:	4798      	blx	r3

	
    // Graphics Test - Students to uncomment to test out the OLED driver if you are using it! 
	
    gfx_mono_init();
   167a8:	4b29      	ldr	r3, [pc, #164]	; (16850 <vUiHandlerTask+0xc8>)
   167aa:	4798      	blx	r3
    gfx_mono_draw_string("ESE516", 0, 8, &sysfont);
   167ac:	4b29      	ldr	r3, [pc, #164]	; (16854 <vUiHandlerTask+0xcc>)
   167ae:	482a      	ldr	r0, [pc, #168]	; (16858 <vUiHandlerTask+0xd0>)
   167b0:	2208      	movs	r2, #8
   167b2:	2100      	movs	r1, #0
   167b4:	4c29      	ldr	r4, [pc, #164]	; (1685c <vUiHandlerTask+0xd4>)
   167b6:	47a0      	blx	r4
    gfx_mono_draw_string("HIGHWAY", 0, 18, &sysfont);
   167b8:	4b26      	ldr	r3, [pc, #152]	; (16854 <vUiHandlerTask+0xcc>)
   167ba:	4829      	ldr	r0, [pc, #164]	; (16860 <vUiHandlerTask+0xd8>)
   167bc:	2212      	movs	r2, #18
   167be:	2100      	movs	r1, #0
   167c0:	4c26      	ldr	r4, [pc, #152]	; (1685c <vUiHandlerTask+0xd4>)
   167c2:	47a0      	blx	r4
	uint8_t count = 0;
   167c4:	2367      	movs	r3, #103	; 0x67
   167c6:	18fb      	adds	r3, r7, r3
   167c8:	2200      	movs	r2, #0
   167ca:	701a      	strb	r2, [r3, #0]
	bool servo_flag = false;
   167cc:	2366      	movs	r3, #102	; 0x66
   167ce:	18fb      	adds	r3, r7, r3
   167d0:	2200      	movs	r2, #0
   167d2:	701a      	strb	r2, [r3, #0]
	I2cInitializeDriver();
   167d4:	4b23      	ldr	r3, [pc, #140]	; (16864 <vUiHandlerTask+0xdc>)
   167d6:	4798      	blx	r3
	ADCchip_Init();
   167d8:	4b23      	ldr	r3, [pc, #140]	; (16868 <vUiHandlerTask+0xe0>)
   167da:	4798      	blx	r3
	

    // Here we start the loop for the UI State Machine
    while (1) {
		ADC_StartConversion();
   167dc:	4b23      	ldr	r3, [pc, #140]	; (1686c <vUiHandlerTask+0xe4>)
   167de:	4798      	blx	r3
		struct NauPacket nauvar;
		
		while ((ADC_ReadReg(PU_CTRL_ADDR)&CR_Msk) != CR_DATA_RDY);
   167e0:	46c0      	nop			; (mov r8, r8)
   167e2:	2000      	movs	r0, #0
   167e4:	4b22      	ldr	r3, [pc, #136]	; (16870 <vUiHandlerTask+0xe8>)
   167e6:	4798      	blx	r3
   167e8:	0003      	movs	r3, r0
   167ea:	001a      	movs	r2, r3
   167ec:	2320      	movs	r3, #32
   167ee:	4013      	ands	r3, r2
   167f0:	2b20      	cmp	r3, #32
   167f2:	d1f6      	bne.n	167e2 <vUiHandlerTask+0x5a>
		uint32_t ADC_value=ADC_Read_Conversion_Data();
   167f4:	4b1f      	ldr	r3, [pc, #124]	; (16874 <vUiHandlerTask+0xec>)
   167f6:	4798      	blx	r3
   167f8:	0003      	movs	r3, r0
   167fa:	663b      	str	r3, [r7, #96]	; 0x60
		int ADC_Array[2];
		Value_conversion(ADC_value,ADC_Array);
   167fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   167fe:	224c      	movs	r2, #76	; 0x4c
   16800:	18ba      	adds	r2, r7, r2
   16802:	0011      	movs	r1, r2
   16804:	0018      	movs	r0, r3
   16806:	4b1c      	ldr	r3, [pc, #112]	; (16878 <vUiHandlerTask+0xf0>)
   16808:	4798      	blx	r3
		char help[64];
		//snprintf(help, 64, "input vol = VIN1P - VIN1N = %d\r\n",ADC_Array[0]);
		nauvar.nau_i = ADC_Array[0];
   1680a:	234c      	movs	r3, #76	; 0x4c
   1680c:	18fb      	adds	r3, r7, r3
   1680e:	681b      	ldr	r3, [r3, #0]
   16810:	001a      	movs	r2, r3
   16812:	2354      	movs	r3, #84	; 0x54
   16814:	18fb      	adds	r3, r7, r3
   16816:	601a      	str	r2, [r3, #0]
		nauvar.nau_f = ADC_Array[1];
   16818:	234c      	movs	r3, #76	; 0x4c
   1681a:	18fb      	adds	r3, r7, r3
   1681c:	685b      	ldr	r3, [r3, #4]
   1681e:	001a      	movs	r2, r3
   16820:	2354      	movs	r3, #84	; 0x54
   16822:	18fb      	adds	r3, r7, r3
   16824:	605a      	str	r2, [r3, #4]
		
		int error = WifiAddNauDataToQueue(&nauvar);
   16826:	2354      	movs	r3, #84	; 0x54
   16828:	18fb      	adds	r3, r7, r3
   1682a:	0018      	movs	r0, r3
   1682c:	4b13      	ldr	r3, [pc, #76]	; (1687c <vUiHandlerTask+0xf4>)
   1682e:	4798      	blx	r3
   16830:	0003      	movs	r3, r0
   16832:	65fb      	str	r3, [r7, #92]	; 0x5c
                //uiState = UI_STATE_HANDLE_BUTTONS;
                //break;
        //}
		
        // After execution, you can put a thread to sleep for some time.
        vTaskDelay(200);
   16834:	20c8      	movs	r0, #200	; 0xc8
   16836:	4b12      	ldr	r3, [pc, #72]	; (16880 <vUiHandlerTask+0xf8>)
   16838:	4798      	blx	r3
    while (1) {
   1683a:	e7cf      	b.n	167dc <vUiHandlerTask+0x54>
   1683c:	000381d4 	.word	0x000381d4
   16840:	0001ecd5 	.word	0x0001ecd5
   16844:	20004940 	.word	0x20004940
   16848:	000166d9 	.word	0x000166d9
   1684c:	00016751 	.word	0x00016751
   16850:	0001287d 	.word	0x0001287d
   16854:	20000000 	.word	0x20000000
   16858:	000381e8 	.word	0x000381e8
   1685c:	00012721 	.word	0x00012721
   16860:	000381f0 	.word	0x000381f0
   16864:	000148f1 	.word	0x000148f1
   16868:	00015d59 	.word	0x00015d59
   1686c:	00015df5 	.word	0x00015df5
   16870:	00015c41 	.word	0x00015c41
   16874:	00015eb1 	.word	0x00015eb1
   16878:	00015ed5 	.word	0x00015ed5
   1687c:	0001841d 	.word	0x0001841d
   16880:	0001d081 	.word	0x0001d081

00016884 <UiOrderShowMoves>:

/******************************************************************************
 * Functions
 ******************************************************************************/
void UiOrderShowMoves(struct GameDataPacket *packetIn)
{
   16884:	b580      	push	{r7, lr}
   16886:	b082      	sub	sp, #8
   16888:	af00      	add	r7, sp, #0
   1688a:	6078      	str	r0, [r7, #4]
    memcpy(&gamePacketIn, packetIn, sizeof(gamePacketIn));
   1688c:	4a08      	ldr	r2, [pc, #32]	; (168b0 <UiOrderShowMoves+0x2c>)
   1688e:	687b      	ldr	r3, [r7, #4]
   16890:	0010      	movs	r0, r2
   16892:	0019      	movs	r1, r3
   16894:	2314      	movs	r3, #20
   16896:	001a      	movs	r2, r3
   16898:	4b06      	ldr	r3, [pc, #24]	; (168b4 <UiOrderShowMoves+0x30>)
   1689a:	4798      	blx	r3
    uiState = UI_STATE_SHOW_MOVES;
   1689c:	4b06      	ldr	r3, [pc, #24]	; (168b8 <UiOrderShowMoves+0x34>)
   1689e:	2202      	movs	r2, #2
   168a0:	701a      	strb	r2, [r3, #0]
    playIsDone = false;  // Set play to false
   168a2:	4b06      	ldr	r3, [pc, #24]	; (168bc <UiOrderShowMoves+0x38>)
   168a4:	2200      	movs	r2, #0
   168a6:	701a      	strb	r2, [r3, #0]
}
   168a8:	46c0      	nop			; (mov r8, r8)
   168aa:	46bd      	mov	sp, r7
   168ac:	b002      	add	sp, #8
   168ae:	bd80      	pop	{r7, pc}
   168b0:	2000491c 	.word	0x2000491c
   168b4:	00036409 	.word	0x00036409
   168b8:	20004940 	.word	0x20004940
   168bc:	20000622 	.word	0x20000622

000168c0 <UiPlayIsDone>:

bool UiPlayIsDone(void)
{
   168c0:	b580      	push	{r7, lr}
   168c2:	af00      	add	r7, sp, #0
    return playIsDone;
   168c4:	4b02      	ldr	r3, [pc, #8]	; (168d0 <UiPlayIsDone+0x10>)
   168c6:	781b      	ldrb	r3, [r3, #0]
}
   168c8:	0018      	movs	r0, r3
   168ca:	46bd      	mov	sp, r7
   168cc:	bd80      	pop	{r7, pc}
   168ce:	46c0      	nop			; (mov r8, r8)
   168d0:	20000622 	.word	0x20000622

000168d4 <UiGetGamePacketOut>:

struct GameDataPacket *UiGetGamePacketOut(void)
{
   168d4:	b580      	push	{r7, lr}
   168d6:	af00      	add	r7, sp, #0
    return &gamePacketOut;
   168d8:	4b01      	ldr	r3, [pc, #4]	; (168e0 <UiGetGamePacketOut+0xc>)
}
   168da:	0018      	movs	r0, r3
   168dc:	46bd      	mov	sp, r7
   168de:	bd80      	pop	{r7, pc}
   168e0:	20004908 	.word	0x20004908

000168e4 <UIChangeColors>:
 * @return
 * @note

*/
void UIChangeColors(uint8_t r, uint8_t g, uint8_t b)
{
   168e4:	b590      	push	{r4, r7, lr}
   168e6:	b083      	sub	sp, #12
   168e8:	af00      	add	r7, sp, #0
   168ea:	0004      	movs	r4, r0
   168ec:	0008      	movs	r0, r1
   168ee:	0011      	movs	r1, r2
   168f0:	1dfb      	adds	r3, r7, #7
   168f2:	1c22      	adds	r2, r4, #0
   168f4:	701a      	strb	r2, [r3, #0]
   168f6:	1dbb      	adds	r3, r7, #6
   168f8:	1c02      	adds	r2, r0, #0
   168fa:	701a      	strb	r2, [r3, #0]
   168fc:	1d7b      	adds	r3, r7, #5
   168fe:	1c0a      	adds	r2, r1, #0
   16900:	701a      	strb	r2, [r3, #0]
    red = r;
   16902:	4b08      	ldr	r3, [pc, #32]	; (16924 <UIChangeColors+0x40>)
   16904:	1dfa      	adds	r2, r7, #7
   16906:	7812      	ldrb	r2, [r2, #0]
   16908:	701a      	strb	r2, [r3, #0]
    green = g;
   1690a:	4b07      	ldr	r3, [pc, #28]	; (16928 <UIChangeColors+0x44>)
   1690c:	1dba      	adds	r2, r7, #6
   1690e:	7812      	ldrb	r2, [r2, #0]
   16910:	701a      	strb	r2, [r3, #0]
    blue = b;
   16912:	4b06      	ldr	r3, [pc, #24]	; (1692c <UIChangeColors+0x48>)
   16914:	1d7a      	adds	r2, r7, #5
   16916:	7812      	ldrb	r2, [r2, #0]
   16918:	701a      	strb	r2, [r3, #0]
}
   1691a:	46c0      	nop			; (mov r8, r8)
   1691c:	46bd      	mov	sp, r7
   1691e:	b003      	add	sp, #12
   16920:	bd90      	pop	{r4, r7, pc}
   16922:	46c0      	nop			; (mov r8, r8)
   16924:	20000621 	.word	0x20000621
   16928:	2000002c 	.word	0x2000002c
   1692c:	2000002d 	.word	0x2000002d

00016930 <NVIC_SystemReset>:
{
   16930:	b580      	push	{r7, lr}
   16932:	af00      	add	r7, sp, #0
   16934:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   16938:	4b02      	ldr	r3, [pc, #8]	; (16944 <NVIC_SystemReset+0x14>)
   1693a:	4a03      	ldr	r2, [pc, #12]	; (16948 <NVIC_SystemReset+0x18>)
   1693c:	60da      	str	r2, [r3, #12]
   1693e:	f3bf 8f4f 	dsb	sy
  while(1);                                                    /* wait until reset */
   16942:	e7fe      	b.n	16942 <NVIC_SystemReset+0x12>
   16944:	e000ed00 	.word	0xe000ed00
   16948:	05fa0004 	.word	0x05fa0004

0001694c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   1694c:	b580      	push	{r7, lr}
   1694e:	b084      	sub	sp, #16
   16950:	af00      	add	r7, sp, #0
   16952:	0002      	movs	r2, r0
   16954:	1dfb      	adds	r3, r7, #7
   16956:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   16958:	230f      	movs	r3, #15
   1695a:	18fb      	adds	r3, r7, r3
   1695c:	1dfa      	adds	r2, r7, #7
   1695e:	7812      	ldrb	r2, [r2, #0]
   16960:	09d2      	lsrs	r2, r2, #7
   16962:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   16964:	230e      	movs	r3, #14
   16966:	18fb      	adds	r3, r7, r3
   16968:	1dfa      	adds	r2, r7, #7
   1696a:	7812      	ldrb	r2, [r2, #0]
   1696c:	0952      	lsrs	r2, r2, #5
   1696e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   16970:	4b0d      	ldr	r3, [pc, #52]	; (169a8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   16972:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   16974:	230f      	movs	r3, #15
   16976:	18fb      	adds	r3, r7, r3
   16978:	781b      	ldrb	r3, [r3, #0]
   1697a:	2b00      	cmp	r3, #0
   1697c:	d10f      	bne.n	1699e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1697e:	230f      	movs	r3, #15
   16980:	18fb      	adds	r3, r7, r3
   16982:	781b      	ldrb	r3, [r3, #0]
   16984:	009b      	lsls	r3, r3, #2
   16986:	2210      	movs	r2, #16
   16988:	4694      	mov	ip, r2
   1698a:	44bc      	add	ip, r7
   1698c:	4463      	add	r3, ip
   1698e:	3b08      	subs	r3, #8
   16990:	681a      	ldr	r2, [r3, #0]
   16992:	230e      	movs	r3, #14
   16994:	18fb      	adds	r3, r7, r3
   16996:	781b      	ldrb	r3, [r3, #0]
   16998:	01db      	lsls	r3, r3, #7
   1699a:	18d3      	adds	r3, r2, r3
   1699c:	e000      	b.n	169a0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   1699e:	2300      	movs	r3, #0
	}
}
   169a0:	0018      	movs	r0, r3
   169a2:	46bd      	mov	sp, r7
   169a4:	b004      	add	sp, #16
   169a6:	bd80      	pop	{r7, pc}
   169a8:	41004400 	.word	0x41004400

000169ac <system_reset>:
{
   169ac:	b580      	push	{r7, lr}
   169ae:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   169b0:	4b02      	ldr	r3, [pc, #8]	; (169bc <system_reset+0x10>)
   169b2:	4798      	blx	r3
}
   169b4:	46c0      	nop			; (mov r8, r8)
   169b6:	46bd      	mov	sp, r7
   169b8:	bd80      	pop	{r7, pc}
   169ba:	46c0      	nop			; (mov r8, r8)
   169bc:	00016931 	.word	0x00016931

000169c0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   169c0:	b580      	push	{r7, lr}
   169c2:	b082      	sub	sp, #8
   169c4:	af00      	add	r7, sp, #0
   169c6:	0002      	movs	r2, r0
   169c8:	1dfb      	adds	r3, r7, #7
   169ca:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   169cc:	1dfb      	adds	r3, r7, #7
   169ce:	781b      	ldrb	r3, [r3, #0]
   169d0:	0018      	movs	r0, r3
   169d2:	4b03      	ldr	r3, [pc, #12]	; (169e0 <port_get_group_from_gpio_pin+0x20>)
   169d4:	4798      	blx	r3
   169d6:	0003      	movs	r3, r0
}
   169d8:	0018      	movs	r0, r3
   169da:	46bd      	mov	sp, r7
   169dc:	b002      	add	sp, #8
   169de:	bd80      	pop	{r7, pc}
   169e0:	0001694d 	.word	0x0001694d

000169e4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   169e4:	b580      	push	{r7, lr}
   169e6:	b084      	sub	sp, #16
   169e8:	af00      	add	r7, sp, #0
   169ea:	0002      	movs	r2, r0
   169ec:	1dfb      	adds	r3, r7, #7
   169ee:	701a      	strb	r2, [r3, #0]
   169f0:	1dbb      	adds	r3, r7, #6
   169f2:	1c0a      	adds	r2, r1, #0
   169f4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   169f6:	1dfb      	adds	r3, r7, #7
   169f8:	781b      	ldrb	r3, [r3, #0]
   169fa:	0018      	movs	r0, r3
   169fc:	4b0d      	ldr	r3, [pc, #52]	; (16a34 <port_pin_set_output_level+0x50>)
   169fe:	4798      	blx	r3
   16a00:	0003      	movs	r3, r0
   16a02:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   16a04:	1dfb      	adds	r3, r7, #7
   16a06:	781b      	ldrb	r3, [r3, #0]
   16a08:	221f      	movs	r2, #31
   16a0a:	4013      	ands	r3, r2
   16a0c:	2201      	movs	r2, #1
   16a0e:	409a      	lsls	r2, r3
   16a10:	0013      	movs	r3, r2
   16a12:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   16a14:	1dbb      	adds	r3, r7, #6
   16a16:	781b      	ldrb	r3, [r3, #0]
   16a18:	2b00      	cmp	r3, #0
   16a1a:	d003      	beq.n	16a24 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   16a1c:	68fb      	ldr	r3, [r7, #12]
   16a1e:	68ba      	ldr	r2, [r7, #8]
   16a20:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   16a22:	e002      	b.n	16a2a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   16a24:	68fb      	ldr	r3, [r7, #12]
   16a26:	68ba      	ldr	r2, [r7, #8]
   16a28:	615a      	str	r2, [r3, #20]
}
   16a2a:	46c0      	nop			; (mov r8, r8)
   16a2c:	46bd      	mov	sp, r7
   16a2e:	b004      	add	sp, #16
   16a30:	bd80      	pop	{r7, pc}
   16a32:	46c0      	nop			; (mov r8, r8)
   16a34:	000169c1 	.word	0x000169c1

00016a38 <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   16a38:	b580      	push	{r7, lr}
   16a3a:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   16a3c:	4b02      	ldr	r3, [pc, #8]	; (16a48 <init_state+0x10>)
   16a3e:	2200      	movs	r2, #0
   16a40:	701a      	strb	r2, [r3, #0]
}
   16a42:	46c0      	nop			; (mov r8, r8)
   16a44:	46bd      	mov	sp, r7
   16a46:	bd80      	pop	{r7, pc}
   16a48:	2000063d 	.word	0x2000063d

00016a4c <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   16a4c:	b580      	push	{r7, lr}
   16a4e:	b082      	sub	sp, #8
   16a50:	af00      	add	r7, sp, #0
   16a52:	0002      	movs	r2, r0
   16a54:	1dfb      	adds	r3, r7, #7
   16a56:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   16a58:	1dfb      	adds	r3, r7, #7
   16a5a:	781b      	ldrb	r3, [r3, #0]
   16a5c:	b25b      	sxtb	r3, r3
   16a5e:	43db      	mvns	r3, r3
   16a60:	b25b      	sxtb	r3, r3
   16a62:	4a06      	ldr	r2, [pc, #24]	; (16a7c <clear_state+0x30>)
   16a64:	7812      	ldrb	r2, [r2, #0]
   16a66:	b252      	sxtb	r2, r2
   16a68:	4013      	ands	r3, r2
   16a6a:	b25b      	sxtb	r3, r3
   16a6c:	b2da      	uxtb	r2, r3
   16a6e:	4b03      	ldr	r3, [pc, #12]	; (16a7c <clear_state+0x30>)
   16a70:	701a      	strb	r2, [r3, #0]
}
   16a72:	46c0      	nop			; (mov r8, r8)
   16a74:	46bd      	mov	sp, r7
   16a76:	b002      	add	sp, #8
   16a78:	bd80      	pop	{r7, pc}
   16a7a:	46c0      	nop			; (mov r8, r8)
   16a7c:	2000063d 	.word	0x2000063d

00016a80 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   16a80:	b580      	push	{r7, lr}
   16a82:	b082      	sub	sp, #8
   16a84:	af00      	add	r7, sp, #0
   16a86:	0002      	movs	r2, r0
   16a88:	1dfb      	adds	r3, r7, #7
   16a8a:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   16a8c:	4b05      	ldr	r3, [pc, #20]	; (16aa4 <add_state+0x24>)
   16a8e:	781a      	ldrb	r2, [r3, #0]
   16a90:	1dfb      	adds	r3, r7, #7
   16a92:	781b      	ldrb	r3, [r3, #0]
   16a94:	4313      	orrs	r3, r2
   16a96:	b2da      	uxtb	r2, r3
   16a98:	4b02      	ldr	r3, [pc, #8]	; (16aa4 <add_state+0x24>)
   16a9a:	701a      	strb	r2, [r3, #0]
}
   16a9c:	46c0      	nop			; (mov r8, r8)
   16a9e:	46bd      	mov	sp, r7
   16aa0:	b002      	add	sp, #8
   16aa2:	bd80      	pop	{r7, pc}
   16aa4:	2000063d 	.word	0x2000063d

00016aa8 <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   16aa8:	b580      	push	{r7, lr}
   16aaa:	b082      	sub	sp, #8
   16aac:	af00      	add	r7, sp, #0
   16aae:	0002      	movs	r2, r0
   16ab0:	1dfb      	adds	r3, r7, #7
   16ab2:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   16ab4:	4b06      	ldr	r3, [pc, #24]	; (16ad0 <is_state_set+0x28>)
   16ab6:	781b      	ldrb	r3, [r3, #0]
   16ab8:	1dfa      	adds	r2, r7, #7
   16aba:	7812      	ldrb	r2, [r2, #0]
   16abc:	4013      	ands	r3, r2
   16abe:	b2db      	uxtb	r3, r3
   16ac0:	1e5a      	subs	r2, r3, #1
   16ac2:	4193      	sbcs	r3, r2
   16ac4:	b2db      	uxtb	r3, r3
}
   16ac6:	0018      	movs	r0, r3
   16ac8:	46bd      	mov	sp, r7
   16aca:	b002      	add	sp, #8
   16acc:	bd80      	pop	{r7, pc}
   16ace:	46c0      	nop			; (mov r8, r8)
   16ad0:	2000063d 	.word	0x2000063d

00016ad4 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   16ad4:	b590      	push	{r4, r7, lr}
   16ad6:	b085      	sub	sp, #20
   16ad8:	af00      	add	r7, sp, #0
   16ada:	6078      	str	r0, [r7, #4]
   16adc:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   16ade:	687b      	ldr	r3, [r7, #4]
   16ae0:	2b00      	cmp	r3, #0
   16ae2:	d002      	beq.n	16aea <is_exist_file+0x16>
   16ae4:	683b      	ldr	r3, [r7, #0]
   16ae6:	2b00      	cmp	r3, #0
   16ae8:	d101      	bne.n	16aee <is_exist_file+0x1a>
        return false;
   16aea:	2300      	movs	r3, #0
   16aec:	e013      	b.n	16b16 <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   16aee:	230f      	movs	r3, #15
   16af0:	18fc      	adds	r4, r7, r3
   16af2:	6839      	ldr	r1, [r7, #0]
   16af4:	4b0a      	ldr	r3, [pc, #40]	; (16b20 <is_exist_file+0x4c>)
   16af6:	2200      	movs	r2, #0
   16af8:	0018      	movs	r0, r3
   16afa:	4b0a      	ldr	r3, [pc, #40]	; (16b24 <is_exist_file+0x50>)
   16afc:	4798      	blx	r3
   16afe:	0003      	movs	r3, r0
   16b00:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   16b02:	4b07      	ldr	r3, [pc, #28]	; (16b20 <is_exist_file+0x4c>)
   16b04:	0018      	movs	r0, r3
   16b06:	4b08      	ldr	r3, [pc, #32]	; (16b28 <is_exist_file+0x54>)
   16b08:	4798      	blx	r3
    return (ret == FR_OK);
   16b0a:	230f      	movs	r3, #15
   16b0c:	18fb      	adds	r3, r7, r3
   16b0e:	781b      	ldrb	r3, [r3, #0]
   16b10:	425a      	negs	r2, r3
   16b12:	4153      	adcs	r3, r2
   16b14:	b2db      	uxtb	r3, r3
}
   16b16:	0018      	movs	r0, r3
   16b18:	46bd      	mov	sp, r7
   16b1a:	b005      	add	sp, #20
   16b1c:	bd90      	pop	{r4, r7, pc}
   16b1e:	46c0      	nop			; (mov r8, r8)
   16b20:	20000870 	.word	0x20000870
   16b24:	0002e9fd 	.word	0x0002e9fd
   16b28:	0002f3fd 	.word	0x0002f3fd

00016b2c <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   16b2c:	b580      	push	{r7, lr}
   16b2e:	b09e      	sub	sp, #120	; 0x78
   16b30:	af00      	add	r7, sp, #0
   16b32:	60f8      	str	r0, [r7, #12]
   16b34:	60b9      	str	r1, [r7, #8]
   16b36:	1dfb      	adds	r3, r7, #7
   16b38:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   16b3a:	2376      	movs	r3, #118	; 0x76
   16b3c:	18fb      	adds	r3, r7, r3
   16b3e:	2201      	movs	r2, #1
   16b40:	801a      	strh	r2, [r3, #0]
   16b42:	2374      	movs	r3, #116	; 0x74
   16b44:	18fb      	adds	r3, r7, r3
   16b46:	2200      	movs	r2, #0
   16b48:	801a      	strh	r2, [r3, #0]
   16b4a:	236e      	movs	r3, #110	; 0x6e
   16b4c:	18fb      	adds	r3, r7, r3
   16b4e:	2200      	movs	r2, #0
   16b50:	801a      	strh	r2, [r3, #0]
   16b52:	2372      	movs	r3, #114	; 0x72
   16b54:	18fb      	adds	r3, r7, r3
   16b56:	2200      	movs	r2, #0
   16b58:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   16b5a:	2324      	movs	r3, #36	; 0x24
   16b5c:	18fb      	adds	r3, r7, r3
   16b5e:	0018      	movs	r0, r3
   16b60:	2341      	movs	r3, #65	; 0x41
   16b62:	001a      	movs	r2, r3
   16b64:	2100      	movs	r1, #0
   16b66:	4b92      	ldr	r3, [pc, #584]	; (16db0 <rename_to_unique+0x284>)
   16b68:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   16b6a:	2318      	movs	r3, #24
   16b6c:	18fb      	adds	r3, r7, r3
   16b6e:	0018      	movs	r0, r3
   16b70:	2309      	movs	r3, #9
   16b72:	001a      	movs	r2, r3
   16b74:	2100      	movs	r1, #0
   16b76:	4b8e      	ldr	r3, [pc, #568]	; (16db0 <rename_to_unique+0x284>)
   16b78:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   16b7a:	2314      	movs	r3, #20
   16b7c:	18fb      	adds	r3, r7, r3
   16b7e:	2200      	movs	r2, #0
   16b80:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   16b82:	2300      	movs	r3, #0
   16b84:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   16b86:	2371      	movs	r3, #113	; 0x71
   16b88:	18fb      	adds	r3, r7, r3
   16b8a:	2200      	movs	r2, #0
   16b8c:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   16b8e:	68bb      	ldr	r3, [r7, #8]
   16b90:	2b00      	cmp	r3, #0
   16b92:	d101      	bne.n	16b98 <rename_to_unique+0x6c>
        return false;
   16b94:	2300      	movs	r3, #0
   16b96:	e106      	b.n	16da6 <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   16b98:	68ba      	ldr	r2, [r7, #8]
   16b9a:	68fb      	ldr	r3, [r7, #12]
   16b9c:	0011      	movs	r1, r2
   16b9e:	0018      	movs	r0, r3
   16ba0:	4b84      	ldr	r3, [pc, #528]	; (16db4 <rename_to_unique+0x288>)
   16ba2:	4798      	blx	r3
   16ba4:	0003      	movs	r3, r0
   16ba6:	001a      	movs	r2, r3
   16ba8:	2301      	movs	r3, #1
   16baa:	4053      	eors	r3, r2
   16bac:	b2db      	uxtb	r3, r3
   16bae:	2b00      	cmp	r3, #0
   16bb0:	d001      	beq.n	16bb6 <rename_to_unique+0x8a>
        return true;
   16bb2:	2301      	movs	r3, #1
   16bb4:	e0f7      	b.n	16da6 <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   16bb6:	68bb      	ldr	r3, [r7, #8]
   16bb8:	0018      	movs	r0, r3
   16bba:	4b7f      	ldr	r3, [pc, #508]	; (16db8 <rename_to_unique+0x28c>)
   16bbc:	4798      	blx	r3
   16bbe:	0003      	movs	r3, r0
   16bc0:	2b40      	cmp	r3, #64	; 0x40
   16bc2:	d901      	bls.n	16bc8 <rename_to_unique+0x9c>
        return false;
   16bc4:	2300      	movs	r3, #0
   16bc6:	e0ee      	b.n	16da6 <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   16bc8:	68bb      	ldr	r3, [r7, #8]
   16bca:	212e      	movs	r1, #46	; 0x2e
   16bcc:	0018      	movs	r0, r3
   16bce:	4b7b      	ldr	r3, [pc, #492]	; (16dbc <rename_to_unique+0x290>)
   16bd0:	4798      	blx	r3
   16bd2:	0003      	movs	r3, r0
   16bd4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   16bd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   16bd8:	2b00      	cmp	r3, #0
   16bda:	d052      	beq.n	16c82 <rename_to_unique+0x156>
        ext_len = strlen(p);
   16bdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   16bde:	0018      	movs	r0, r3
   16be0:	4b75      	ldr	r3, [pc, #468]	; (16db8 <rename_to_unique+0x28c>)
   16be2:	4798      	blx	r3
   16be4:	0002      	movs	r2, r0
   16be6:	236e      	movs	r3, #110	; 0x6e
   16be8:	18fb      	adds	r3, r7, r3
   16bea:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   16bec:	236e      	movs	r3, #110	; 0x6e
   16bee:	18fb      	adds	r3, r7, r3
   16bf0:	881b      	ldrh	r3, [r3, #0]
   16bf2:	2b07      	cmp	r3, #7
   16bf4:	d837      	bhi.n	16c66 <rename_to_unique+0x13a>
            valid_ext = true;
   16bf6:	2371      	movs	r3, #113	; 0x71
   16bf8:	18fb      	adds	r3, r7, r3
   16bfa:	2201      	movs	r2, #1
   16bfc:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   16bfe:	6eba      	ldr	r2, [r7, #104]	; 0x68
   16c00:	2318      	movs	r3, #24
   16c02:	18fb      	adds	r3, r7, r3
   16c04:	0011      	movs	r1, r2
   16c06:	0018      	movs	r0, r3
   16c08:	4b6d      	ldr	r3, [pc, #436]	; (16dc0 <rename_to_unique+0x294>)
   16c0a:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   16c0c:	68bb      	ldr	r3, [r7, #8]
   16c0e:	0018      	movs	r0, r3
   16c10:	4b69      	ldr	r3, [pc, #420]	; (16db8 <rename_to_unique+0x28c>)
   16c12:	4798      	blx	r3
   16c14:	0002      	movs	r2, r0
   16c16:	236e      	movs	r3, #110	; 0x6e
   16c18:	18fb      	adds	r3, r7, r3
   16c1a:	881b      	ldrh	r3, [r3, #0]
   16c1c:	1ad3      	subs	r3, r2, r3
   16c1e:	2b3c      	cmp	r3, #60	; 0x3c
   16c20:	d911      	bls.n	16c46 <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   16c22:	2374      	movs	r3, #116	; 0x74
   16c24:	18fb      	adds	r3, r7, r3
   16c26:	226e      	movs	r2, #110	; 0x6e
   16c28:	18ba      	adds	r2, r7, r2
   16c2a:	8812      	ldrh	r2, [r2, #0]
   16c2c:	213c      	movs	r1, #60	; 0x3c
   16c2e:	1a8a      	subs	r2, r1, r2
   16c30:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   16c32:	2374      	movs	r3, #116	; 0x74
   16c34:	18fb      	adds	r3, r7, r3
   16c36:	881a      	ldrh	r2, [r3, #0]
   16c38:	68b9      	ldr	r1, [r7, #8]
   16c3a:	2324      	movs	r3, #36	; 0x24
   16c3c:	18fb      	adds	r3, r7, r3
   16c3e:	0018      	movs	r0, r3
   16c40:	4b60      	ldr	r3, [pc, #384]	; (16dc4 <rename_to_unique+0x298>)
   16c42:	4798      	blx	r3
   16c44:	e02a      	b.n	16c9c <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   16c46:	6eba      	ldr	r2, [r7, #104]	; 0x68
   16c48:	68bb      	ldr	r3, [r7, #8]
   16c4a:	1ad2      	subs	r2, r2, r3
   16c4c:	2374      	movs	r3, #116	; 0x74
   16c4e:	18fb      	adds	r3, r7, r3
   16c50:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   16c52:	2374      	movs	r3, #116	; 0x74
   16c54:	18fb      	adds	r3, r7, r3
   16c56:	881a      	ldrh	r2, [r3, #0]
   16c58:	68b9      	ldr	r1, [r7, #8]
   16c5a:	2324      	movs	r3, #36	; 0x24
   16c5c:	18fb      	adds	r3, r7, r3
   16c5e:	0018      	movs	r0, r3
   16c60:	4b58      	ldr	r3, [pc, #352]	; (16dc4 <rename_to_unique+0x298>)
   16c62:	4798      	blx	r3
   16c64:	e01a      	b.n	16c9c <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   16c66:	2374      	movs	r3, #116	; 0x74
   16c68:	18fb      	adds	r3, r7, r3
   16c6a:	223c      	movs	r2, #60	; 0x3c
   16c6c:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   16c6e:	2374      	movs	r3, #116	; 0x74
   16c70:	18fb      	adds	r3, r7, r3
   16c72:	881a      	ldrh	r2, [r3, #0]
   16c74:	68b9      	ldr	r1, [r7, #8]
   16c76:	2324      	movs	r3, #36	; 0x24
   16c78:	18fb      	adds	r3, r7, r3
   16c7a:	0018      	movs	r0, r3
   16c7c:	4b51      	ldr	r3, [pc, #324]	; (16dc4 <rename_to_unique+0x298>)
   16c7e:	4798      	blx	r3
   16c80:	e00c      	b.n	16c9c <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   16c82:	2374      	movs	r3, #116	; 0x74
   16c84:	18fb      	adds	r3, r7, r3
   16c86:	223c      	movs	r2, #60	; 0x3c
   16c88:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   16c8a:	2374      	movs	r3, #116	; 0x74
   16c8c:	18fb      	adds	r3, r7, r3
   16c8e:	881a      	ldrh	r2, [r3, #0]
   16c90:	68b9      	ldr	r1, [r7, #8]
   16c92:	2324      	movs	r3, #36	; 0x24
   16c94:	18fb      	adds	r3, r7, r3
   16c96:	0018      	movs	r0, r3
   16c98:	4b4a      	ldr	r3, [pc, #296]	; (16dc4 <rename_to_unique+0x298>)
   16c9a:	4798      	blx	r3
    }

    name[name_len++] = '-';
   16c9c:	2374      	movs	r3, #116	; 0x74
   16c9e:	18fb      	adds	r3, r7, r3
   16ca0:	881b      	ldrh	r3, [r3, #0]
   16ca2:	2274      	movs	r2, #116	; 0x74
   16ca4:	18ba      	adds	r2, r7, r2
   16ca6:	1c59      	adds	r1, r3, #1
   16ca8:	8011      	strh	r1, [r2, #0]
   16caa:	001a      	movs	r2, r3
   16cac:	2324      	movs	r3, #36	; 0x24
   16cae:	18fb      	adds	r3, r7, r3
   16cb0:	212d      	movs	r1, #45	; 0x2d
   16cb2:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   16cb4:	2376      	movs	r3, #118	; 0x76
   16cb6:	18fb      	adds	r3, r7, r3
   16cb8:	2200      	movs	r2, #0
   16cba:	801a      	strh	r2, [r3, #0]
   16cbc:	2372      	movs	r3, #114	; 0x72
   16cbe:	18fb      	adds	r3, r7, r3
   16cc0:	2201      	movs	r2, #1
   16cc2:	801a      	strh	r2, [r3, #0]
   16cc4:	e010      	b.n	16ce8 <rename_to_unique+0x1bc>
        count *= 10;
   16cc6:	2372      	movs	r3, #114	; 0x72
   16cc8:	18fa      	adds	r2, r7, r3
   16cca:	2372      	movs	r3, #114	; 0x72
   16ccc:	18fb      	adds	r3, r7, r3
   16cce:	881b      	ldrh	r3, [r3, #0]
   16cd0:	1c19      	adds	r1, r3, #0
   16cd2:	0089      	lsls	r1, r1, #2
   16cd4:	18cb      	adds	r3, r1, r3
   16cd6:	18db      	adds	r3, r3, r3
   16cd8:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   16cda:	2376      	movs	r3, #118	; 0x76
   16cdc:	18fb      	adds	r3, r7, r3
   16cde:	881a      	ldrh	r2, [r3, #0]
   16ce0:	2376      	movs	r3, #118	; 0x76
   16ce2:	18fb      	adds	r3, r7, r3
   16ce4:	3201      	adds	r2, #1
   16ce6:	801a      	strh	r2, [r3, #0]
   16ce8:	2376      	movs	r3, #118	; 0x76
   16cea:	18fb      	adds	r3, r7, r3
   16cec:	881b      	ldrh	r3, [r3, #0]
   16cee:	2b02      	cmp	r3, #2
   16cf0:	d9e9      	bls.n	16cc6 <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   16cf2:	2376      	movs	r3, #118	; 0x76
   16cf4:	18fb      	adds	r3, r7, r3
   16cf6:	2201      	movs	r2, #1
   16cf8:	801a      	strh	r2, [r3, #0]
   16cfa:	e04b      	b.n	16d94 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   16cfc:	2376      	movs	r3, #118	; 0x76
   16cfe:	18fb      	adds	r3, r7, r3
   16d00:	881a      	ldrh	r2, [r3, #0]
   16d02:	4931      	ldr	r1, [pc, #196]	; (16dc8 <rename_to_unique+0x29c>)
   16d04:	2314      	movs	r3, #20
   16d06:	18fb      	adds	r3, r7, r3
   16d08:	0018      	movs	r0, r3
   16d0a:	4b30      	ldr	r3, [pc, #192]	; (16dcc <rename_to_unique+0x2a0>)
   16d0c:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   16d0e:	2374      	movs	r3, #116	; 0x74
   16d10:	18fb      	adds	r3, r7, r3
   16d12:	881b      	ldrh	r3, [r3, #0]
   16d14:	2224      	movs	r2, #36	; 0x24
   16d16:	18ba      	adds	r2, r7, r2
   16d18:	18d3      	adds	r3, r2, r3
   16d1a:	2214      	movs	r2, #20
   16d1c:	18b9      	adds	r1, r7, r2
   16d1e:	2203      	movs	r2, #3
   16d20:	0018      	movs	r0, r3
   16d22:	4b28      	ldr	r3, [pc, #160]	; (16dc4 <rename_to_unique+0x298>)
   16d24:	4798      	blx	r3
        if (valid_ext) {
   16d26:	2371      	movs	r3, #113	; 0x71
   16d28:	18fb      	adds	r3, r7, r3
   16d2a:	781b      	ldrb	r3, [r3, #0]
   16d2c:	2b00      	cmp	r3, #0
   16d2e:	d00c      	beq.n	16d4a <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   16d30:	2374      	movs	r3, #116	; 0x74
   16d32:	18fb      	adds	r3, r7, r3
   16d34:	881b      	ldrh	r3, [r3, #0]
   16d36:	3303      	adds	r3, #3
   16d38:	2224      	movs	r2, #36	; 0x24
   16d3a:	18ba      	adds	r2, r7, r2
   16d3c:	18d3      	adds	r3, r2, r3
   16d3e:	2218      	movs	r2, #24
   16d40:	18ba      	adds	r2, r7, r2
   16d42:	0011      	movs	r1, r2
   16d44:	0018      	movs	r0, r3
   16d46:	4b1e      	ldr	r3, [pc, #120]	; (16dc0 <rename_to_unique+0x294>)
   16d48:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   16d4a:	2324      	movs	r3, #36	; 0x24
   16d4c:	18fa      	adds	r2, r7, r3
   16d4e:	68fb      	ldr	r3, [r7, #12]
   16d50:	0011      	movs	r1, r2
   16d52:	0018      	movs	r0, r3
   16d54:	4b17      	ldr	r3, [pc, #92]	; (16db4 <rename_to_unique+0x288>)
   16d56:	4798      	blx	r3
   16d58:	0003      	movs	r3, r0
   16d5a:	001a      	movs	r2, r3
   16d5c:	2301      	movs	r3, #1
   16d5e:	4053      	eors	r3, r2
   16d60:	b2db      	uxtb	r3, r3
   16d62:	2b00      	cmp	r3, #0
   16d64:	d00f      	beq.n	16d86 <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   16d66:	1dfb      	adds	r3, r7, #7
   16d68:	781a      	ldrb	r2, [r3, #0]
   16d6a:	68bb      	ldr	r3, [r7, #8]
   16d6c:	2100      	movs	r1, #0
   16d6e:	0018      	movs	r0, r3
   16d70:	4b0f      	ldr	r3, [pc, #60]	; (16db0 <rename_to_unique+0x284>)
   16d72:	4798      	blx	r3
            strcpy(file_path_name, name);
   16d74:	2324      	movs	r3, #36	; 0x24
   16d76:	18fa      	adds	r2, r7, r3
   16d78:	68bb      	ldr	r3, [r7, #8]
   16d7a:	0011      	movs	r1, r2
   16d7c:	0018      	movs	r0, r3
   16d7e:	4b10      	ldr	r3, [pc, #64]	; (16dc0 <rename_to_unique+0x294>)
   16d80:	4798      	blx	r3
            return true;
   16d82:	2301      	movs	r3, #1
   16d84:	e00f      	b.n	16da6 <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   16d86:	2376      	movs	r3, #118	; 0x76
   16d88:	18fb      	adds	r3, r7, r3
   16d8a:	881a      	ldrh	r2, [r3, #0]
   16d8c:	2376      	movs	r3, #118	; 0x76
   16d8e:	18fb      	adds	r3, r7, r3
   16d90:	3201      	adds	r2, #1
   16d92:	801a      	strh	r2, [r3, #0]
   16d94:	2376      	movs	r3, #118	; 0x76
   16d96:	18fa      	adds	r2, r7, r3
   16d98:	2372      	movs	r3, #114	; 0x72
   16d9a:	18fb      	adds	r3, r7, r3
   16d9c:	8812      	ldrh	r2, [r2, #0]
   16d9e:	881b      	ldrh	r3, [r3, #0]
   16da0:	429a      	cmp	r2, r3
   16da2:	d3ab      	bcc.n	16cfc <rename_to_unique+0x1d0>
        }
    }
    return false;
   16da4:	2300      	movs	r3, #0
}
   16da6:	0018      	movs	r0, r3
   16da8:	46bd      	mov	sp, r7
   16daa:	b01e      	add	sp, #120	; 0x78
   16dac:	bd80      	pop	{r7, pc}
   16dae:	46c0      	nop			; (mov r8, r8)
   16db0:	0003643f 	.word	0x0003643f
   16db4:	00016ad5 	.word	0x00016ad5
   16db8:	000367f7 	.word	0x000367f7
   16dbc:	00036851 	.word	0x00036851
   16dc0:	000367ab 	.word	0x000367ab
   16dc4:	00036827 	.word	0x00036827
   16dc8:	0003820c 	.word	0x0003820c
   16dcc:	000366fd 	.word	0x000366fd

00016dd0 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   16dd0:	b590      	push	{r4, r7, lr}
   16dd2:	b083      	sub	sp, #12
   16dd4:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   16dd6:	2001      	movs	r0, #1
   16dd8:	4b22      	ldr	r3, [pc, #136]	; (16e64 <start_download+0x94>)
   16dda:	4798      	blx	r3
   16ddc:	0003      	movs	r3, r0
   16dde:	001a      	movs	r2, r3
   16de0:	2301      	movs	r3, #1
   16de2:	4053      	eors	r3, r2
   16de4:	b2db      	uxtb	r3, r3
   16de6:	2b00      	cmp	r3, #0
   16de8:	d005      	beq.n	16df6 <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   16dea:	4b1f      	ldr	r3, [pc, #124]	; (16e68 <start_download+0x98>)
   16dec:	0019      	movs	r1, r3
   16dee:	2001      	movs	r0, #1
   16df0:	4b1e      	ldr	r3, [pc, #120]	; (16e6c <start_download+0x9c>)
   16df2:	4798      	blx	r3
        return;
   16df4:	e032      	b.n	16e5c <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   16df6:	2002      	movs	r0, #2
   16df8:	4b1a      	ldr	r3, [pc, #104]	; (16e64 <start_download+0x94>)
   16dfa:	4798      	blx	r3
   16dfc:	0003      	movs	r3, r0
   16dfe:	001a      	movs	r2, r3
   16e00:	2301      	movs	r3, #1
   16e02:	4053      	eors	r3, r2
   16e04:	b2db      	uxtb	r3, r3
   16e06:	2b00      	cmp	r3, #0
   16e08:	d005      	beq.n	16e16 <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   16e0a:	4b19      	ldr	r3, [pc, #100]	; (16e70 <start_download+0xa0>)
   16e0c:	0019      	movs	r1, r3
   16e0e:	2001      	movs	r0, #1
   16e10:	4b16      	ldr	r3, [pc, #88]	; (16e6c <start_download+0x9c>)
   16e12:	4798      	blx	r3
        return;
   16e14:	e022      	b.n	16e5c <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   16e16:	2004      	movs	r0, #4
   16e18:	4b12      	ldr	r3, [pc, #72]	; (16e64 <start_download+0x94>)
   16e1a:	4798      	blx	r3
   16e1c:	1e03      	subs	r3, r0, #0
   16e1e:	d005      	beq.n	16e2c <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   16e20:	4b14      	ldr	r3, [pc, #80]	; (16e74 <start_download+0xa4>)
   16e22:	0019      	movs	r1, r3
   16e24:	2001      	movs	r0, #1
   16e26:	4b11      	ldr	r3, [pc, #68]	; (16e6c <start_download+0x9c>)
   16e28:	4798      	blx	r3
        return;
   16e2a:	e017      	b.n	16e5c <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   16e2c:	2008      	movs	r0, #8
   16e2e:	4b0d      	ldr	r3, [pc, #52]	; (16e64 <start_download+0x94>)
   16e30:	4798      	blx	r3
   16e32:	1e03      	subs	r3, r0, #0
   16e34:	d005      	beq.n	16e42 <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   16e36:	4b10      	ldr	r3, [pc, #64]	; (16e78 <start_download+0xa8>)
   16e38:	0019      	movs	r1, r3
   16e3a:	2001      	movs	r0, #1
   16e3c:	4b0b      	ldr	r3, [pc, #44]	; (16e6c <start_download+0x9c>)
   16e3e:	4798      	blx	r3
        return;
   16e40:	e00c      	b.n	16e5c <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   16e42:	4b0e      	ldr	r3, [pc, #56]	; (16e7c <start_download+0xac>)
   16e44:	0019      	movs	r1, r3
   16e46:	2001      	movs	r0, #1
   16e48:	4b08      	ldr	r3, [pc, #32]	; (16e6c <start_download+0x9c>)
   16e4a:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   16e4c:	490c      	ldr	r1, [pc, #48]	; (16e80 <start_download+0xb0>)
   16e4e:	480d      	ldr	r0, [pc, #52]	; (16e84 <start_download+0xb4>)
   16e50:	2300      	movs	r3, #0
   16e52:	9300      	str	r3, [sp, #0]
   16e54:	2300      	movs	r3, #0
   16e56:	2201      	movs	r2, #1
   16e58:	4c0b      	ldr	r4, [pc, #44]	; (16e88 <start_download+0xb8>)
   16e5a:	47a0      	blx	r4
}
   16e5c:	46bd      	mov	sp, r7
   16e5e:	b001      	add	sp, #4
   16e60:	bd90      	pop	{r4, r7, pc}
   16e62:	46c0      	nop			; (mov r8, r8)
   16e64:	00016aa9 	.word	0x00016aa9
   16e68:	00038214 	.word	0x00038214
   16e6c:	0001edc1 	.word	0x0001edc1
   16e70:	00038240 	.word	0x00038240
   16e74:	0003826c 	.word	0x0003826c
   16e78:	00038298 	.word	0x00038298
   16e7c:	000382c4 	.word	0x000382c4
   16e80:	000382f0 	.word	0x000382f0
   16e84:	2000499c 	.word	0x2000499c
   16e88:	00032051 	.word	0x00032051

00016e8c <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   16e8c:	b5b0      	push	{r4, r5, r7, lr}
   16e8e:	b086      	sub	sp, #24
   16e90:	af00      	add	r7, sp, #0
   16e92:	6078      	str	r0, [r7, #4]
   16e94:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   16e96:	687b      	ldr	r3, [r7, #4]
   16e98:	2b00      	cmp	r3, #0
   16e9a:	d002      	beq.n	16ea2 <store_file_packet+0x16>
   16e9c:	683b      	ldr	r3, [r7, #0]
   16e9e:	2b00      	cmp	r3, #0
   16ea0:	d105      	bne.n	16eae <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   16ea2:	4b58      	ldr	r3, [pc, #352]	; (17004 <store_file_packet+0x178>)
   16ea4:	0019      	movs	r1, r3
   16ea6:	2001      	movs	r0, #1
   16ea8:	4b57      	ldr	r3, [pc, #348]	; (17008 <store_file_packet+0x17c>)
   16eaa:	4798      	blx	r3
        return;
   16eac:	e0a6      	b.n	16ffc <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   16eae:	2008      	movs	r0, #8
   16eb0:	4b56      	ldr	r3, [pc, #344]	; (1700c <store_file_packet+0x180>)
   16eb2:	4798      	blx	r3
   16eb4:	0003      	movs	r3, r0
   16eb6:	001a      	movs	r2, r3
   16eb8:	2301      	movs	r3, #1
   16eba:	4053      	eors	r3, r2
   16ebc:	b2db      	uxtb	r3, r3
   16ebe:	2b00      	cmp	r3, #0
   16ec0:	d055      	beq.n	16f6e <store_file_packet+0xe2>
        char *cp = NULL;
   16ec2:	2300      	movs	r3, #0
   16ec4:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   16ec6:	4b52      	ldr	r3, [pc, #328]	; (17010 <store_file_packet+0x184>)
   16ec8:	2230      	movs	r2, #48	; 0x30
   16eca:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   16ecc:	4b50      	ldr	r3, [pc, #320]	; (17010 <store_file_packet+0x184>)
   16ece:	223a      	movs	r2, #58	; 0x3a
   16ed0:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   16ed2:	4b50      	ldr	r3, [pc, #320]	; (17014 <store_file_packet+0x188>)
   16ed4:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   16ed6:	e002      	b.n	16ede <store_file_packet+0x52>
            cp--;
   16ed8:	697b      	ldr	r3, [r7, #20]
   16eda:	3b01      	subs	r3, #1
   16edc:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   16ede:	697b      	ldr	r3, [r7, #20]
   16ee0:	781b      	ldrb	r3, [r3, #0]
   16ee2:	2b2f      	cmp	r3, #47	; 0x2f
   16ee4:	d1f8      	bne.n	16ed8 <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   16ee6:	697b      	ldr	r3, [r7, #20]
   16ee8:	0018      	movs	r0, r3
   16eea:	4b4b      	ldr	r3, [pc, #300]	; (17018 <store_file_packet+0x18c>)
   16eec:	4798      	blx	r3
   16eee:	0003      	movs	r3, r0
   16ef0:	2b01      	cmp	r3, #1
   16ef2:	d924      	bls.n	16f3e <store_file_packet+0xb2>
            cp++;
   16ef4:	697b      	ldr	r3, [r7, #20]
   16ef6:	3301      	adds	r3, #1
   16ef8:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   16efa:	697a      	ldr	r2, [r7, #20]
   16efc:	4b47      	ldr	r3, [pc, #284]	; (1701c <store_file_packet+0x190>)
   16efe:	0011      	movs	r1, r2
   16f00:	0018      	movs	r0, r3
   16f02:	4b47      	ldr	r3, [pc, #284]	; (17020 <store_file_packet+0x194>)
   16f04:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   16f06:	4942      	ldr	r1, [pc, #264]	; (17010 <store_file_packet+0x184>)
   16f08:	4b46      	ldr	r3, [pc, #280]	; (17024 <store_file_packet+0x198>)
   16f0a:	2240      	movs	r2, #64	; 0x40
   16f0c:	0018      	movs	r0, r3
   16f0e:	4b46      	ldr	r3, [pc, #280]	; (17028 <store_file_packet+0x19c>)
   16f10:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   16f12:	4a3f      	ldr	r2, [pc, #252]	; (17010 <store_file_packet+0x184>)
   16f14:	4b45      	ldr	r3, [pc, #276]	; (1702c <store_file_packet+0x1a0>)
   16f16:	0019      	movs	r1, r3
   16f18:	2001      	movs	r0, #1
   16f1a:	4b3b      	ldr	r3, [pc, #236]	; (17008 <store_file_packet+0x17c>)
   16f1c:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   16f1e:	2313      	movs	r3, #19
   16f20:	18fc      	adds	r4, r7, r3
   16f22:	493b      	ldr	r1, [pc, #236]	; (17010 <store_file_packet+0x184>)
   16f24:	4b3f      	ldr	r3, [pc, #252]	; (17024 <store_file_packet+0x198>)
   16f26:	220a      	movs	r2, #10
   16f28:	0018      	movs	r0, r3
   16f2a:	4b41      	ldr	r3, [pc, #260]	; (17030 <store_file_packet+0x1a4>)
   16f2c:	4798      	blx	r3
   16f2e:	0003      	movs	r3, r0
   16f30:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   16f32:	2313      	movs	r3, #19
   16f34:	18fb      	adds	r3, r7, r3
   16f36:	781b      	ldrb	r3, [r3, #0]
   16f38:	2b00      	cmp	r3, #0
   16f3a:	d012      	beq.n	16f62 <store_file_packet+0xd6>
   16f3c:	e008      	b.n	16f50 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   16f3e:	4b3d      	ldr	r3, [pc, #244]	; (17034 <store_file_packet+0x1a8>)
   16f40:	0019      	movs	r1, r3
   16f42:	2001      	movs	r0, #1
   16f44:	4b30      	ldr	r3, [pc, #192]	; (17008 <store_file_packet+0x17c>)
   16f46:	4798      	blx	r3
            add_state(CANCELED);
   16f48:	2020      	movs	r0, #32
   16f4a:	4b3b      	ldr	r3, [pc, #236]	; (17038 <store_file_packet+0x1ac>)
   16f4c:	4798      	blx	r3
            return;
   16f4e:	e055      	b.n	16ffc <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   16f50:	2313      	movs	r3, #19
   16f52:	18fb      	adds	r3, r7, r3
   16f54:	781a      	ldrb	r2, [r3, #0]
   16f56:	4b39      	ldr	r3, [pc, #228]	; (1703c <store_file_packet+0x1b0>)
   16f58:	0019      	movs	r1, r3
   16f5a:	2001      	movs	r0, #1
   16f5c:	4b2a      	ldr	r3, [pc, #168]	; (17008 <store_file_packet+0x17c>)
   16f5e:	4798      	blx	r3
            return;
   16f60:	e04c      	b.n	16ffc <store_file_packet+0x170>
        }

        received_file_size = 0;
   16f62:	4b37      	ldr	r3, [pc, #220]	; (17040 <store_file_packet+0x1b4>)
   16f64:	2200      	movs	r2, #0
   16f66:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   16f68:	2008      	movs	r0, #8
   16f6a:	4b33      	ldr	r3, [pc, #204]	; (17038 <store_file_packet+0x1ac>)
   16f6c:	4798      	blx	r3
    }

    if (data != NULL) {
   16f6e:	687b      	ldr	r3, [r7, #4]
   16f70:	2b00      	cmp	r3, #0
   16f72:	d043      	beq.n	16ffc <store_file_packet+0x170>
        UINT wsize = 0;
   16f74:	2300      	movs	r3, #0
   16f76:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   16f78:	2313      	movs	r3, #19
   16f7a:	18fc      	adds	r4, r7, r3
   16f7c:	230c      	movs	r3, #12
   16f7e:	18fb      	adds	r3, r7, r3
   16f80:	683a      	ldr	r2, [r7, #0]
   16f82:	6879      	ldr	r1, [r7, #4]
   16f84:	4827      	ldr	r0, [pc, #156]	; (17024 <store_file_packet+0x198>)
   16f86:	4d2f      	ldr	r5, [pc, #188]	; (17044 <store_file_packet+0x1b8>)
   16f88:	47a8      	blx	r5
   16f8a:	0003      	movs	r3, r0
   16f8c:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   16f8e:	2313      	movs	r3, #19
   16f90:	18fb      	adds	r3, r7, r3
   16f92:	781b      	ldrb	r3, [r3, #0]
   16f94:	2b00      	cmp	r3, #0
   16f96:	d00c      	beq.n	16fb2 <store_file_packet+0x126>
            f_close(&file_object);
   16f98:	4b22      	ldr	r3, [pc, #136]	; (17024 <store_file_packet+0x198>)
   16f9a:	0018      	movs	r0, r3
   16f9c:	4b2a      	ldr	r3, [pc, #168]	; (17048 <store_file_packet+0x1bc>)
   16f9e:	4798      	blx	r3
            add_state(CANCELED);
   16fa0:	2020      	movs	r0, #32
   16fa2:	4b25      	ldr	r3, [pc, #148]	; (17038 <store_file_packet+0x1ac>)
   16fa4:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   16fa6:	4b29      	ldr	r3, [pc, #164]	; (1704c <store_file_packet+0x1c0>)
   16fa8:	0019      	movs	r1, r3
   16faa:	2001      	movs	r0, #1
   16fac:	4b16      	ldr	r3, [pc, #88]	; (17008 <store_file_packet+0x17c>)
   16fae:	4798      	blx	r3
            return;
   16fb0:	e024      	b.n	16ffc <store_file_packet+0x170>
        }

        received_file_size += wsize;
   16fb2:	4b23      	ldr	r3, [pc, #140]	; (17040 <store_file_packet+0x1b4>)
   16fb4:	681a      	ldr	r2, [r3, #0]
   16fb6:	68fb      	ldr	r3, [r7, #12]
   16fb8:	18d2      	adds	r2, r2, r3
   16fba:	4b21      	ldr	r3, [pc, #132]	; (17040 <store_file_packet+0x1b4>)
   16fbc:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   16fbe:	4b20      	ldr	r3, [pc, #128]	; (17040 <store_file_packet+0x1b4>)
   16fc0:	681a      	ldr	r2, [r3, #0]
   16fc2:	4b23      	ldr	r3, [pc, #140]	; (17050 <store_file_packet+0x1c4>)
   16fc4:	681b      	ldr	r3, [r3, #0]
   16fc6:	4923      	ldr	r1, [pc, #140]	; (17054 <store_file_packet+0x1c8>)
   16fc8:	2001      	movs	r0, #1
   16fca:	4c0f      	ldr	r4, [pc, #60]	; (17008 <store_file_packet+0x17c>)
   16fcc:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   16fce:	4b1c      	ldr	r3, [pc, #112]	; (17040 <store_file_packet+0x1b4>)
   16fd0:	681a      	ldr	r2, [r3, #0]
   16fd2:	4b1f      	ldr	r3, [pc, #124]	; (17050 <store_file_packet+0x1c4>)
   16fd4:	681b      	ldr	r3, [r3, #0]
   16fd6:	429a      	cmp	r2, r3
   16fd8:	d310      	bcc.n	16ffc <store_file_packet+0x170>
            f_close(&file_object);
   16fda:	4b12      	ldr	r3, [pc, #72]	; (17024 <store_file_packet+0x198>)
   16fdc:	0018      	movs	r0, r3
   16fde:	4b1a      	ldr	r3, [pc, #104]	; (17048 <store_file_packet+0x1bc>)
   16fe0:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   16fe2:	4b1d      	ldr	r3, [pc, #116]	; (17058 <store_file_packet+0x1cc>)
   16fe4:	0019      	movs	r1, r3
   16fe6:	2001      	movs	r0, #1
   16fe8:	4b07      	ldr	r3, [pc, #28]	; (17008 <store_file_packet+0x17c>)
   16fea:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   16fec:	2100      	movs	r1, #0
   16fee:	2017      	movs	r0, #23
   16ff0:	4b1a      	ldr	r3, [pc, #104]	; (1705c <store_file_packet+0x1d0>)
   16ff2:	4798      	blx	r3
            add_state(COMPLETED);
   16ff4:	2010      	movs	r0, #16
   16ff6:	4b10      	ldr	r3, [pc, #64]	; (17038 <store_file_packet+0x1ac>)
   16ff8:	4798      	blx	r3
            return;
   16ffa:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   16ffc:	46bd      	mov	sp, r7
   16ffe:	b006      	add	sp, #24
   17000:	bdb0      	pop	{r4, r5, r7, pc}
   17002:	46c0      	nop			; (mov r8, r8)
   17004:	00038310 	.word	0x00038310
   17008:	0001edc1 	.word	0x0001edc1
   1700c:	00016aa9 	.word	0x00016aa9
   17010:	200000b4 	.word	0x200000b4
   17014:	0003830f 	.word	0x0003830f
   17018:	000367f7 	.word	0x000367f7
   1701c:	200000b6 	.word	0x200000b6
   17020:	000367ab 	.word	0x000367ab
   17024:	20000870 	.word	0x20000870
   17028:	00016b2d 	.word	0x00016b2d
   1702c:	00038374 	.word	0x00038374
   17030:	0002e9fd 	.word	0x0002e9fd
   17034:	00038334 	.word	0x00038334
   17038:	00016a81 	.word	0x00016a81
   1703c:	0003839c 	.word	0x0003839c
   17040:	20000898 	.word	0x20000898
   17044:	0002ef2d 	.word	0x0002ef2d
   17048:	0002f3fd 	.word	0x0002f3fd
   1704c:	000383d0 	.word	0x000383d0
   17050:	20000894 	.word	0x20000894
   17054:	0003840c 	.word	0x0003840c
   17058:	00038440 	.word	0x00038440
   1705c:	000169e5 	.word	0x000169e5

00017060 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   17060:	b590      	push	{r4, r7, lr}
   17062:	b085      	sub	sp, #20
   17064:	af00      	add	r7, sp, #0
   17066:	60f8      	str	r0, [r7, #12]
   17068:	60b9      	str	r1, [r7, #8]
   1706a:	607a      	str	r2, [r7, #4]
    switch (type) {
   1706c:	68bb      	ldr	r3, [r7, #8]
   1706e:	2b04      	cmp	r3, #4
   17070:	d900      	bls.n	17074 <http_client_callback+0x14>
   17072:	e077      	b.n	17164 <http_client_callback+0x104>
   17074:	68bb      	ldr	r3, [r7, #8]
   17076:	009a      	lsls	r2, r3, #2
   17078:	4b3c      	ldr	r3, [pc, #240]	; (1716c <http_client_callback+0x10c>)
   1707a:	18d3      	adds	r3, r2, r3
   1707c:	681b      	ldr	r3, [r3, #0]
   1707e:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   17080:	4b3b      	ldr	r3, [pc, #236]	; (17170 <http_client_callback+0x110>)
   17082:	0019      	movs	r1, r3
   17084:	2001      	movs	r0, #1
   17086:	4b3b      	ldr	r3, [pc, #236]	; (17174 <http_client_callback+0x114>)
   17088:	4798      	blx	r3
            break;
   1708a:	e06b      	b.n	17164 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   1708c:	4b3a      	ldr	r3, [pc, #232]	; (17178 <http_client_callback+0x118>)
   1708e:	0019      	movs	r1, r3
   17090:	2001      	movs	r0, #1
   17092:	4b38      	ldr	r3, [pc, #224]	; (17174 <http_client_callback+0x114>)
   17094:	4798      	blx	r3
            add_state(GET_REQUESTED);
   17096:	2004      	movs	r0, #4
   17098:	4b38      	ldr	r3, [pc, #224]	; (1717c <http_client_callback+0x11c>)
   1709a:	4798      	blx	r3
            break;
   1709c:	e062      	b.n	17164 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   1709e:	687b      	ldr	r3, [r7, #4]
   170a0:	881b      	ldrh	r3, [r3, #0]
   170a2:	001a      	movs	r2, r3
   170a4:	687b      	ldr	r3, [r7, #4]
   170a6:	685b      	ldr	r3, [r3, #4]
   170a8:	4935      	ldr	r1, [pc, #212]	; (17180 <http_client_callback+0x120>)
   170aa:	2001      	movs	r0, #1
   170ac:	4c31      	ldr	r4, [pc, #196]	; (17174 <http_client_callback+0x114>)
   170ae:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   170b0:	687b      	ldr	r3, [r7, #4]
   170b2:	881b      	ldrh	r3, [r3, #0]
   170b4:	2bc8      	cmp	r3, #200	; 0xc8
   170b6:	d10d      	bne.n	170d4 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   170b8:	687b      	ldr	r3, [r7, #4]
   170ba:	685a      	ldr	r2, [r3, #4]
   170bc:	4b31      	ldr	r3, [pc, #196]	; (17184 <http_client_callback+0x124>)
   170be:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   170c0:	4b31      	ldr	r3, [pc, #196]	; (17188 <http_client_callback+0x128>)
   170c2:	2200      	movs	r2, #0
   170c4:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   170c6:	687b      	ldr	r3, [r7, #4]
   170c8:	685a      	ldr	r2, [r3, #4]
   170ca:	2380      	movs	r3, #128	; 0x80
   170cc:	009b      	lsls	r3, r3, #2
   170ce:	429a      	cmp	r2, r3
   170d0:	d843      	bhi.n	1715a <http_client_callback+0xfa>
   170d2:	e003      	b.n	170dc <http_client_callback+0x7c>
                add_state(CANCELED);
   170d4:	2020      	movs	r0, #32
   170d6:	4b29      	ldr	r3, [pc, #164]	; (1717c <http_client_callback+0x11c>)
   170d8:	4798      	blx	r3
                return;
   170da:	e043      	b.n	17164 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   170dc:	687b      	ldr	r3, [r7, #4]
   170de:	689a      	ldr	r2, [r3, #8]
   170e0:	687b      	ldr	r3, [r7, #4]
   170e2:	685b      	ldr	r3, [r3, #4]
   170e4:	0019      	movs	r1, r3
   170e6:	0010      	movs	r0, r2
   170e8:	4b28      	ldr	r3, [pc, #160]	; (1718c <http_client_callback+0x12c>)
   170ea:	4798      	blx	r3
                add_state(COMPLETED);
   170ec:	2010      	movs	r0, #16
   170ee:	4b23      	ldr	r3, [pc, #140]	; (1717c <http_client_callback+0x11c>)
   170f0:	4798      	blx	r3
            }
            break;
   170f2:	e032      	b.n	1715a <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   170f4:	687b      	ldr	r3, [r7, #4]
   170f6:	685a      	ldr	r2, [r3, #4]
   170f8:	687b      	ldr	r3, [r7, #4]
   170fa:	681b      	ldr	r3, [r3, #0]
   170fc:	0019      	movs	r1, r3
   170fe:	0010      	movs	r0, r2
   17100:	4b22      	ldr	r3, [pc, #136]	; (1718c <http_client_callback+0x12c>)
   17102:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   17104:	687b      	ldr	r3, [r7, #4]
   17106:	7a1b      	ldrb	r3, [r3, #8]
   17108:	2b00      	cmp	r3, #0
   1710a:	d028      	beq.n	1715e <http_client_callback+0xfe>
                add_state(COMPLETED);
   1710c:	2010      	movs	r0, #16
   1710e:	4b1b      	ldr	r3, [pc, #108]	; (1717c <http_client_callback+0x11c>)
   17110:	4798      	blx	r3
            }

            break;
   17112:	e024      	b.n	1715e <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   17114:	687b      	ldr	r3, [r7, #4]
   17116:	681a      	ldr	r2, [r3, #0]
   17118:	4b1d      	ldr	r3, [pc, #116]	; (17190 <http_client_callback+0x130>)
   1711a:	0019      	movs	r1, r3
   1711c:	2001      	movs	r0, #1
   1711e:	4b15      	ldr	r3, [pc, #84]	; (17174 <http_client_callback+0x114>)
   17120:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   17122:	687b      	ldr	r3, [r7, #4]
   17124:	681b      	ldr	r3, [r3, #0]
   17126:	330b      	adds	r3, #11
   17128:	d11b      	bne.n	17162 <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   1712a:	2008      	movs	r0, #8
   1712c:	4b19      	ldr	r3, [pc, #100]	; (17194 <http_client_callback+0x134>)
   1712e:	4798      	blx	r3
   17130:	1e03      	subs	r3, r0, #0
   17132:	d006      	beq.n	17142 <http_client_callback+0xe2>
                    f_close(&file_object);
   17134:	4b18      	ldr	r3, [pc, #96]	; (17198 <http_client_callback+0x138>)
   17136:	0018      	movs	r0, r3
   17138:	4b18      	ldr	r3, [pc, #96]	; (1719c <http_client_callback+0x13c>)
   1713a:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   1713c:	2008      	movs	r0, #8
   1713e:	4b18      	ldr	r3, [pc, #96]	; (171a0 <http_client_callback+0x140>)
   17140:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   17142:	2004      	movs	r0, #4
   17144:	4b13      	ldr	r3, [pc, #76]	; (17194 <http_client_callback+0x134>)
   17146:	4798      	blx	r3
   17148:	1e03      	subs	r3, r0, #0
   1714a:	d002      	beq.n	17152 <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   1714c:	2004      	movs	r0, #4
   1714e:	4b14      	ldr	r3, [pc, #80]	; (171a0 <http_client_callback+0x140>)
   17150:	4798      	blx	r3
                }

                start_download();
   17152:	4b14      	ldr	r3, [pc, #80]	; (171a4 <http_client_callback+0x144>)
   17154:	4798      	blx	r3
            }

            break;
   17156:	46c0      	nop			; (mov r8, r8)
   17158:	e003      	b.n	17162 <http_client_callback+0x102>
            break;
   1715a:	46c0      	nop			; (mov r8, r8)
   1715c:	e002      	b.n	17164 <http_client_callback+0x104>
            break;
   1715e:	46c0      	nop			; (mov r8, r8)
   17160:	e000      	b.n	17164 <http_client_callback+0x104>
            break;
   17162:	46c0      	nop			; (mov r8, r8)
    }
}
   17164:	46bd      	mov	sp, r7
   17166:	b005      	add	sp, #20
   17168:	bd90      	pop	{r4, r7, pc}
   1716a:	46c0      	nop			; (mov r8, r8)
   1716c:	00038ba4 	.word	0x00038ba4
   17170:	00038474 	.word	0x00038474
   17174:	0001edc1 	.word	0x0001edc1
   17178:	000384ac 	.word	0x000384ac
   1717c:	00016a81 	.word	0x00016a81
   17180:	000384d8 	.word	0x000384d8
   17184:	20000894 	.word	0x20000894
   17188:	20000898 	.word	0x20000898
   1718c:	00016e8d 	.word	0x00016e8d
   17190:	00038514 	.word	0x00038514
   17194:	00016aa9 	.word	0x00016aa9
   17198:	20000870 	.word	0x20000870
   1719c:	0002f3fd 	.word	0x0002f3fd
   171a0:	00016a4d 	.word	0x00016a4d
   171a4:	00016dd1 	.word	0x00016dd1

000171a8 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   171a8:	b580      	push	{r7, lr}
   171aa:	b082      	sub	sp, #8
   171ac:	af00      	add	r7, sp, #0
   171ae:	603a      	str	r2, [r7, #0]
   171b0:	1dfb      	adds	r3, r7, #7
   171b2:	1c02      	adds	r2, r0, #0
   171b4:	701a      	strb	r2, [r3, #0]
   171b6:	1dbb      	adds	r3, r7, #6
   171b8:	1c0a      	adds	r2, r1, #0
   171ba:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   171bc:	683a      	ldr	r2, [r7, #0]
   171be:	1dbb      	adds	r3, r7, #6
   171c0:	7819      	ldrb	r1, [r3, #0]
   171c2:	1dfb      	adds	r3, r7, #7
   171c4:	781b      	ldrb	r3, [r3, #0]
   171c6:	b25b      	sxtb	r3, r3
   171c8:	0018      	movs	r0, r3
   171ca:	4b03      	ldr	r3, [pc, #12]	; (171d8 <socket_cb+0x30>)
   171cc:	4798      	blx	r3
}
   171ce:	46c0      	nop			; (mov r8, r8)
   171d0:	46bd      	mov	sp, r7
   171d2:	b002      	add	sp, #8
   171d4:	bd80      	pop	{r7, pc}
   171d6:	46c0      	nop			; (mov r8, r8)
   171d8:	00031d61 	.word	0x00031d61

000171dc <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   171dc:	b5b0      	push	{r4, r5, r7, lr}
   171de:	b086      	sub	sp, #24
   171e0:	af04      	add	r7, sp, #16
   171e2:	6078      	str	r0, [r7, #4]
   171e4:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   171e6:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   171e8:	22ff      	movs	r2, #255	; 0xff
   171ea:	4013      	ands	r3, r2
   171ec:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   171ee:	683b      	ldr	r3, [r7, #0]
   171f0:	0a1b      	lsrs	r3, r3, #8
   171f2:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   171f4:	23ff      	movs	r3, #255	; 0xff
   171f6:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   171f8:	683a      	ldr	r2, [r7, #0]
   171fa:	0c12      	lsrs	r2, r2, #16
   171fc:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   171fe:	22ff      	movs	r2, #255	; 0xff
   17200:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   17202:	6839      	ldr	r1, [r7, #0]
   17204:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   17206:	000d      	movs	r5, r1
   17208:	6878      	ldr	r0, [r7, #4]
   1720a:	4909      	ldr	r1, [pc, #36]	; (17230 <resolve_cb+0x54>)
   1720c:	9502      	str	r5, [sp, #8]
   1720e:	9201      	str	r2, [sp, #4]
   17210:	9300      	str	r3, [sp, #0]
   17212:	0023      	movs	r3, r4
   17214:	0002      	movs	r2, r0
   17216:	2001      	movs	r0, #1
   17218:	4c06      	ldr	r4, [pc, #24]	; (17234 <resolve_cb+0x58>)
   1721a:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   1721c:	683a      	ldr	r2, [r7, #0]
   1721e:	687b      	ldr	r3, [r7, #4]
   17220:	0011      	movs	r1, r2
   17222:	0018      	movs	r0, r3
   17224:	4b04      	ldr	r3, [pc, #16]	; (17238 <resolve_cb+0x5c>)
   17226:	4798      	blx	r3
}
   17228:	46c0      	nop			; (mov r8, r8)
   1722a:	46bd      	mov	sp, r7
   1722c:	b002      	add	sp, #8
   1722e:	bdb0      	pop	{r4, r5, r7, pc}
   17230:	00038544 	.word	0x00038544
   17234:	0001edc1 	.word	0x0001edc1
   17238:	00031ec5 	.word	0x00031ec5

0001723c <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   1723c:	b590      	push	{r4, r7, lr}
   1723e:	b087      	sub	sp, #28
   17240:	af02      	add	r7, sp, #8
   17242:	0002      	movs	r2, r0
   17244:	6039      	str	r1, [r7, #0]
   17246:	1dfb      	adds	r3, r7, #7
   17248:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   1724a:	1dfb      	adds	r3, r7, #7
   1724c:	781b      	ldrb	r3, [r3, #0]
   1724e:	2b2c      	cmp	r3, #44	; 0x2c
   17250:	d002      	beq.n	17258 <wifi_cb+0x1c>
   17252:	2b32      	cmp	r3, #50	; 0x32
   17254:	d03d      	beq.n	172d2 <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   17256:	e06f      	b.n	17338 <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   17258:	683b      	ldr	r3, [r7, #0]
   1725a:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   1725c:	68fb      	ldr	r3, [r7, #12]
   1725e:	781b      	ldrb	r3, [r3, #0]
   17260:	2b01      	cmp	r3, #1
   17262:	d107      	bne.n	17274 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   17264:	4b36      	ldr	r3, [pc, #216]	; (17340 <wifi_cb+0x104>)
   17266:	0019      	movs	r1, r3
   17268:	2001      	movs	r0, #1
   1726a:	4b36      	ldr	r3, [pc, #216]	; (17344 <wifi_cb+0x108>)
   1726c:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   1726e:	4b36      	ldr	r3, [pc, #216]	; (17348 <wifi_cb+0x10c>)
   17270:	4798      	blx	r3
            break;
   17272:	e05e      	b.n	17332 <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   17274:	68fb      	ldr	r3, [r7, #12]
   17276:	781b      	ldrb	r3, [r3, #0]
   17278:	2b00      	cmp	r3, #0
   1727a:	d15a      	bne.n	17332 <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   1727c:	4b33      	ldr	r3, [pc, #204]	; (1734c <wifi_cb+0x110>)
   1727e:	0019      	movs	r1, r3
   17280:	2001      	movs	r0, #1
   17282:	4b30      	ldr	r3, [pc, #192]	; (17344 <wifi_cb+0x108>)
   17284:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   17286:	2002      	movs	r0, #2
   17288:	4b31      	ldr	r3, [pc, #196]	; (17350 <wifi_cb+0x114>)
   1728a:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   1728c:	2008      	movs	r0, #8
   1728e:	4b31      	ldr	r3, [pc, #196]	; (17354 <wifi_cb+0x118>)
   17290:	4798      	blx	r3
   17292:	1e03      	subs	r3, r0, #0
   17294:	d006      	beq.n	172a4 <wifi_cb+0x68>
                    f_close(&file_object);
   17296:	4b30      	ldr	r3, [pc, #192]	; (17358 <wifi_cb+0x11c>)
   17298:	0018      	movs	r0, r3
   1729a:	4b30      	ldr	r3, [pc, #192]	; (1735c <wifi_cb+0x120>)
   1729c:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   1729e:	2008      	movs	r0, #8
   172a0:	4b2b      	ldr	r3, [pc, #172]	; (17350 <wifi_cb+0x114>)
   172a2:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   172a4:	2004      	movs	r0, #4
   172a6:	4b2b      	ldr	r3, [pc, #172]	; (17354 <wifi_cb+0x118>)
   172a8:	4798      	blx	r3
   172aa:	1e03      	subs	r3, r0, #0
   172ac:	d002      	beq.n	172b4 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   172ae:	2004      	movs	r0, #4
   172b0:	4b27      	ldr	r3, [pc, #156]	; (17350 <wifi_cb+0x114>)
   172b2:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   172b4:	4b2a      	ldr	r3, [pc, #168]	; (17360 <wifi_cb+0x124>)
   172b6:	2101      	movs	r1, #1
   172b8:	0018      	movs	r0, r3
   172ba:	4b2a      	ldr	r3, [pc, #168]	; (17364 <wifi_cb+0x128>)
   172bc:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   172be:	4a2a      	ldr	r2, [pc, #168]	; (17368 <wifi_cb+0x12c>)
   172c0:	482a      	ldr	r0, [pc, #168]	; (1736c <wifi_cb+0x130>)
   172c2:	23ff      	movs	r3, #255	; 0xff
   172c4:	9300      	str	r3, [sp, #0]
   172c6:	0013      	movs	r3, r2
   172c8:	2202      	movs	r2, #2
   172ca:	2102      	movs	r1, #2
   172cc:	4c28      	ldr	r4, [pc, #160]	; (17370 <wifi_cb+0x134>)
   172ce:	47a0      	blx	r4
            break;
   172d0:	e02f      	b.n	17332 <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   172d2:	683b      	ldr	r3, [r7, #0]
   172d4:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   172d6:	68bb      	ldr	r3, [r7, #8]
   172d8:	781b      	ldrb	r3, [r3, #0]
   172da:	0018      	movs	r0, r3
   172dc:	68bb      	ldr	r3, [r7, #8]
   172de:	3301      	adds	r3, #1
   172e0:	781b      	ldrb	r3, [r3, #0]
   172e2:	001c      	movs	r4, r3
   172e4:	68bb      	ldr	r3, [r7, #8]
   172e6:	3302      	adds	r3, #2
   172e8:	781b      	ldrb	r3, [r3, #0]
   172ea:	001a      	movs	r2, r3
   172ec:	68bb      	ldr	r3, [r7, #8]
   172ee:	3303      	adds	r3, #3
   172f0:	781b      	ldrb	r3, [r3, #0]
   172f2:	4920      	ldr	r1, [pc, #128]	; (17374 <wifi_cb+0x138>)
   172f4:	9301      	str	r3, [sp, #4]
   172f6:	9200      	str	r2, [sp, #0]
   172f8:	0023      	movs	r3, r4
   172fa:	0002      	movs	r2, r0
   172fc:	2001      	movs	r0, #1
   172fe:	4c11      	ldr	r4, [pc, #68]	; (17344 <wifi_cb+0x108>)
   17300:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   17302:	2002      	movs	r0, #2
   17304:	4b1c      	ldr	r3, [pc, #112]	; (17378 <wifi_cb+0x13c>)
   17306:	4798      	blx	r3
            if (do_download_flag == 1) {
   17308:	4b1c      	ldr	r3, [pc, #112]	; (1737c <wifi_cb+0x140>)
   1730a:	781b      	ldrb	r3, [r3, #0]
   1730c:	2b01      	cmp	r3, #1
   1730e:	d102      	bne.n	17316 <wifi_cb+0xda>
                start_download();
   17310:	4b1b      	ldr	r3, [pc, #108]	; (17380 <wifi_cb+0x144>)
   17312:	4798      	blx	r3
        } break;
   17314:	e00f      	b.n	17336 <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   17316:	4a1b      	ldr	r2, [pc, #108]	; (17384 <wifi_cb+0x148>)
   17318:	4b11      	ldr	r3, [pc, #68]	; (17360 <wifi_cb+0x124>)
   1731a:	0011      	movs	r1, r2
   1731c:	0018      	movs	r0, r3
   1731e:	4b1a      	ldr	r3, [pc, #104]	; (17388 <wifi_cb+0x14c>)
   17320:	4798      	blx	r3
   17322:	1e03      	subs	r3, r0, #0
   17324:	d007      	beq.n	17336 <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   17326:	4b19      	ldr	r3, [pc, #100]	; (1738c <wifi_cb+0x150>)
   17328:	0019      	movs	r1, r3
   1732a:	2001      	movs	r0, #1
   1732c:	4b05      	ldr	r3, [pc, #20]	; (17344 <wifi_cb+0x108>)
   1732e:	4798      	blx	r3
        } break;
   17330:	e001      	b.n	17336 <wifi_cb+0xfa>
            break;
   17332:	46c0      	nop			; (mov r8, r8)
   17334:	e000      	b.n	17338 <wifi_cb+0xfc>
        } break;
   17336:	46c0      	nop			; (mov r8, r8)
    }
}
   17338:	46c0      	nop			; (mov r8, r8)
   1733a:	46bd      	mov	sp, r7
   1733c:	b005      	add	sp, #20
   1733e:	bd90      	pop	{r4, r7, pc}
   17340:	00038574 	.word	0x00038574
   17344:	0001edc1 	.word	0x0001edc1
   17348:	00023405 	.word	0x00023405
   1734c:	00038594 	.word	0x00038594
   17350:	00016a4d 	.word	0x00016a4d
   17354:	00016aa9 	.word	0x00016aa9
   17358:	20000870 	.word	0x20000870
   1735c:	0002f3fd 	.word	0x0002f3fd
   17360:	2000089c 	.word	0x2000089c
   17364:	00030a0d 	.word	0x00030a0d
   17368:	000385b8 	.word	0x000385b8
   1736c:	000385c4 	.word	0x000385c4
   17370:	00022f31 	.word	0x00022f31
   17374:	000385c8 	.word	0x000385c8
   17378:	00016a81 	.word	0x00016a81
   1737c:	2000063c 	.word	0x2000063c
   17380:	00016dd1 	.word	0x00016dd1
   17384:	000381f8 	.word	0x000381f8
   17388:	000308d9 	.word	0x000308d9
   1738c:	000385f0 	.word	0x000385f0

00017390 <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   17390:	b590      	push	{r4, r7, lr}
   17392:	b083      	sub	sp, #12
   17394:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
   17396:	4b29      	ldr	r3, [pc, #164]	; (1743c <init_storage+0xac>)
   17398:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   1739a:	4b29      	ldr	r3, [pc, #164]	; (17440 <init_storage+0xb0>)
   1739c:	0019      	movs	r1, r3
   1739e:	2001      	movs	r0, #1
   173a0:	4b28      	ldr	r3, [pc, #160]	; (17444 <init_storage+0xb4>)
   173a2:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
   173a4:	1dfc      	adds	r4, r7, #7
   173a6:	2000      	movs	r0, #0
   173a8:	4b27      	ldr	r3, [pc, #156]	; (17448 <init_storage+0xb8>)
   173aa:	4798      	blx	r3
   173ac:	0003      	movs	r3, r0
   173ae:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
   173b0:	1dfb      	adds	r3, r7, #7
   173b2:	781b      	ldrb	r3, [r3, #0]
   173b4:	2b01      	cmp	r3, #1
   173b6:	d110      	bne.n	173da <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   173b8:	4b24      	ldr	r3, [pc, #144]	; (1744c <init_storage+0xbc>)
   173ba:	0019      	movs	r1, r3
   173bc:	2001      	movs	r0, #1
   173be:	4b21      	ldr	r3, [pc, #132]	; (17444 <init_storage+0xb4>)
   173c0:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   173c2:	4b23      	ldr	r3, [pc, #140]	; (17450 <init_storage+0xc0>)
   173c4:	0019      	movs	r1, r3
   173c6:	2001      	movs	r0, #1
   173c8:	4b1e      	ldr	r3, [pc, #120]	; (17444 <init_storage+0xb4>)
   173ca:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   173cc:	46c0      	nop			; (mov r8, r8)
   173ce:	2000      	movs	r0, #0
   173d0:	4b20      	ldr	r3, [pc, #128]	; (17454 <init_storage+0xc4>)
   173d2:	4798      	blx	r3
   173d4:	0003      	movs	r3, r0
   173d6:	2b02      	cmp	r3, #2
   173d8:	d1f9      	bne.n	173ce <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
   173da:	1dfb      	adds	r3, r7, #7
   173dc:	781b      	ldrb	r3, [r3, #0]
   173de:	2b00      	cmp	r3, #0
   173e0:	d1e0      	bne.n	173a4 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   173e2:	4b1d      	ldr	r3, [pc, #116]	; (17458 <init_storage+0xc8>)
   173e4:	0019      	movs	r1, r3
   173e6:	2001      	movs	r0, #1
   173e8:	4b16      	ldr	r3, [pc, #88]	; (17444 <init_storage+0xb4>)
   173ea:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
   173ec:	238c      	movs	r3, #140	; 0x8c
   173ee:	009a      	lsls	r2, r3, #2
   173f0:	4b1a      	ldr	r3, [pc, #104]	; (1745c <init_storage+0xcc>)
   173f2:	2100      	movs	r1, #0
   173f4:	0018      	movs	r0, r3
   173f6:	4b1a      	ldr	r3, [pc, #104]	; (17460 <init_storage+0xd0>)
   173f8:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   173fa:	1dbc      	adds	r4, r7, #6
   173fc:	4b17      	ldr	r3, [pc, #92]	; (1745c <init_storage+0xcc>)
   173fe:	0019      	movs	r1, r3
   17400:	2000      	movs	r0, #0
   17402:	4b18      	ldr	r3, [pc, #96]	; (17464 <init_storage+0xd4>)
   17404:	4798      	blx	r3
   17406:	0003      	movs	r3, r0
   17408:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
   1740a:	1dbb      	adds	r3, r7, #6
   1740c:	781b      	ldrb	r3, [r3, #0]
   1740e:	2b0b      	cmp	r3, #11
   17410:	d107      	bne.n	17422 <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   17412:	1dbb      	adds	r3, r7, #6
   17414:	781a      	ldrb	r2, [r3, #0]
   17416:	4b14      	ldr	r3, [pc, #80]	; (17468 <init_storage+0xd8>)
   17418:	0019      	movs	r1, r3
   1741a:	2001      	movs	r0, #1
   1741c:	4b09      	ldr	r3, [pc, #36]	; (17444 <init_storage+0xb4>)
   1741e:	4798      	blx	r3
            return;
   17420:	e008      	b.n	17434 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   17422:	4b12      	ldr	r3, [pc, #72]	; (1746c <init_storage+0xdc>)
   17424:	0019      	movs	r1, r3
   17426:	2001      	movs	r0, #1
   17428:	4b06      	ldr	r3, [pc, #24]	; (17444 <init_storage+0xb4>)
   1742a:	4798      	blx	r3
        add_state(STORAGE_READY);
   1742c:	2001      	movs	r0, #1
   1742e:	4b10      	ldr	r3, [pc, #64]	; (17470 <init_storage+0xe0>)
   17430:	4798      	blx	r3
        return;
   17432:	46c0      	nop			; (mov r8, r8)
    }
}
   17434:	46bd      	mov	sp, r7
   17436:	b003      	add	sp, #12
   17438:	bd90      	pop	{r4, r7, pc}
   1743a:	46c0      	nop			; (mov r8, r8)
   1743c:	0001fbd9 	.word	0x0001fbd9
   17440:	00038614 	.word	0x00038614
   17444:	0001edc1 	.word	0x0001edc1
   17448:	000200b5 	.word	0x000200b5
   1744c:	0003864c 	.word	0x0003864c
   17450:	00038674 	.word	0x00038674
   17454:	0001fc29 	.word	0x0001fc29
   17458:	000386a8 	.word	0x000386a8
   1745c:	20000640 	.word	0x20000640
   17460:	0003643f 	.word	0x0003643f
   17464:	0002e9a5 	.word	0x0002e9a5
   17468:	000386cc 	.word	0x000386cc
   1746c:	000386fc 	.word	0x000386fc
   17470:	00016a81 	.word	0x00016a81

00017474 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   17474:	b580      	push	{r7, lr}
   17476:	b082      	sub	sp, #8
   17478:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   1747a:	1d3b      	adds	r3, r7, #4
   1747c:	0018      	movs	r0, r3
   1747e:	4b08      	ldr	r3, [pc, #32]	; (174a0 <configure_timer+0x2c>)
   17480:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   17482:	1d3a      	adds	r2, r7, #4
   17484:	4b07      	ldr	r3, [pc, #28]	; (174a4 <configure_timer+0x30>)
   17486:	0011      	movs	r1, r2
   17488:	0018      	movs	r0, r3
   1748a:	4b07      	ldr	r3, [pc, #28]	; (174a8 <configure_timer+0x34>)
   1748c:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   1748e:	4b05      	ldr	r3, [pc, #20]	; (174a4 <configure_timer+0x30>)
   17490:	0018      	movs	r0, r3
   17492:	4b06      	ldr	r3, [pc, #24]	; (174ac <configure_timer+0x38>)
   17494:	4798      	blx	r3
}
   17496:	46c0      	nop			; (mov r8, r8)
   17498:	46bd      	mov	sp, r7
   1749a:	b002      	add	sp, #8
   1749c:	bd80      	pop	{r7, pc}
   1749e:	46c0      	nop			; (mov r8, r8)
   174a0:	000334f5 	.word	0x000334f5
   174a4:	20004944 	.word	0x20004944
   174a8:	00033519 	.word	0x00033519
   174ac:	00033605 	.word	0x00033605

000174b0 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   174b0:	b580      	push	{r7, lr}
   174b2:	b088      	sub	sp, #32
   174b4:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   174b6:	003b      	movs	r3, r7
   174b8:	0018      	movs	r0, r3
   174ba:	4b12      	ldr	r3, [pc, #72]	; (17504 <configure_http_client+0x54>)
   174bc:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   174be:	003b      	movs	r3, r7
   174c0:	2280      	movs	r2, #128	; 0x80
   174c2:	0092      	lsls	r2, r2, #2
   174c4:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   174c6:	003b      	movs	r3, r7
   174c8:	4a0f      	ldr	r2, [pc, #60]	; (17508 <configure_http_client+0x58>)
   174ca:	605a      	str	r2, [r3, #4]
    //httpc_conf.port = 443;
    //httpc_conf.tls = 1;

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   174cc:	003a      	movs	r2, r7
   174ce:	4b0f      	ldr	r3, [pc, #60]	; (1750c <configure_http_client+0x5c>)
   174d0:	0011      	movs	r1, r2
   174d2:	0018      	movs	r0, r3
   174d4:	4b0e      	ldr	r3, [pc, #56]	; (17510 <configure_http_client+0x60>)
   174d6:	4798      	blx	r3
   174d8:	0003      	movs	r3, r0
   174da:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   174dc:	69fb      	ldr	r3, [r7, #28]
   174de:	2b00      	cmp	r3, #0
   174e0:	da06      	bge.n	174f0 <configure_http_client+0x40>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   174e2:	69fa      	ldr	r2, [r7, #28]
   174e4:	4b0b      	ldr	r3, [pc, #44]	; (17514 <configure_http_client+0x64>)
   174e6:	0019      	movs	r1, r3
   174e8:	2001      	movs	r0, #1
   174ea:	4b0b      	ldr	r3, [pc, #44]	; (17518 <configure_http_client+0x68>)
   174ec:	4798      	blx	r3
        while (1) {
   174ee:	e7fe      	b.n	174ee <configure_http_client+0x3e>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   174f0:	4a0a      	ldr	r2, [pc, #40]	; (1751c <configure_http_client+0x6c>)
   174f2:	4b06      	ldr	r3, [pc, #24]	; (1750c <configure_http_client+0x5c>)
   174f4:	0011      	movs	r1, r2
   174f6:	0018      	movs	r0, r3
   174f8:	4b09      	ldr	r3, [pc, #36]	; (17520 <configure_http_client+0x70>)
   174fa:	4798      	blx	r3
}
   174fc:	46c0      	nop			; (mov r8, r8)
   174fe:	46bd      	mov	sp, r7
   17500:	b008      	add	sp, #32
   17502:	bd80      	pop	{r7, pc}
   17504:	00031b89 	.word	0x00031b89
   17508:	20004944 	.word	0x20004944
   1750c:	2000499c 	.word	0x2000499c
   17510:	00031bd5 	.word	0x00031bd5
   17514:	00038720 	.word	0x00038720
   17518:	0001edc1 	.word	0x0001edc1
   1751c:	00017061 	.word	0x00017061
   17520:	00031cc1 	.word	0x00031cc1

00017524 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   17524:	b580      	push	{r7, lr}
   17526:	b082      	sub	sp, #8
   17528:	af00      	add	r7, sp, #0
   1752a:	603a      	str	r2, [r7, #0]
   1752c:	1dfb      	adds	r3, r7, #7
   1752e:	1c02      	adds	r2, r0, #0
   17530:	701a      	strb	r2, [r3, #0]
   17532:	1dbb      	adds	r3, r7, #6
   17534:	1c0a      	adds	r2, r1, #0
   17536:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   17538:	683a      	ldr	r2, [r7, #0]
   1753a:	1dbb      	adds	r3, r7, #6
   1753c:	7819      	ldrb	r1, [r3, #0]
   1753e:	1dfb      	adds	r3, r7, #7
   17540:	781b      	ldrb	r3, [r3, #0]
   17542:	b25b      	sxtb	r3, r3
   17544:	0018      	movs	r0, r3
   17546:	4b03      	ldr	r3, [pc, #12]	; (17554 <socket_event_handler+0x30>)
   17548:	4798      	blx	r3
}
   1754a:	46c0      	nop			; (mov r8, r8)
   1754c:	46bd      	mov	sp, r7
   1754e:	b002      	add	sp, #8
   17550:	bd80      	pop	{r7, pc}
   17552:	46c0      	nop			; (mov r8, r8)
   17554:	00030881 	.word	0x00030881

00017558 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   17558:	b580      	push	{r7, lr}
   1755a:	b082      	sub	sp, #8
   1755c:	af00      	add	r7, sp, #0
   1755e:	6078      	str	r0, [r7, #4]
   17560:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   17562:	683a      	ldr	r2, [r7, #0]
   17564:	687b      	ldr	r3, [r7, #4]
   17566:	0011      	movs	r1, r2
   17568:	0018      	movs	r0, r3
   1756a:	4b03      	ldr	r3, [pc, #12]	; (17578 <socket_resolve_handler+0x20>)
   1756c:	4798      	blx	r3
}
   1756e:	46c0      	nop			; (mov r8, r8)
   17570:	46bd      	mov	sp, r7
   17572:	b002      	add	sp, #8
   17574:	bd80      	pop	{r7, pc}
   17576:	46c0      	nop			; (mov r8, r8)
   17578:	000308b5 	.word	0x000308b5

0001757c <SubscribeHandlerLedTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerLedTopic(MessageData *msgData)
{
   1757c:	b590      	push	{r4, r7, lr}
   1757e:	b089      	sub	sp, #36	; 0x24
   17580:	af02      	add	r7, sp, #8
   17582:	6078      	str	r0, [r7, #4]
    uint8_t rgb[3] = {0, 0, 0};
   17584:	2310      	movs	r3, #16
   17586:	18fb      	adds	r3, r7, r3
   17588:	2200      	movs	r2, #0
   1758a:	701a      	strb	r2, [r3, #0]
   1758c:	2310      	movs	r3, #16
   1758e:	18fb      	adds	r3, r7, r3
   17590:	2200      	movs	r2, #0
   17592:	705a      	strb	r2, [r3, #1]
   17594:	2310      	movs	r3, #16
   17596:	18fb      	adds	r3, r7, r3
   17598:	2200      	movs	r2, #0
   1759a:	709a      	strb	r2, [r3, #2]
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   1759c:	687b      	ldr	r3, [r7, #4]
   1759e:	685b      	ldr	r3, [r3, #4]
   175a0:	685a      	ldr	r2, [r3, #4]
   175a2:	687b      	ldr	r3, [r7, #4]
   175a4:	685b      	ldr	r3, [r3, #4]
   175a6:	689b      	ldr	r3, [r3, #8]
   175a8:	492a      	ldr	r1, [pc, #168]	; (17654 <SubscribeHandlerLedTopic+0xd8>)
   175aa:	2001      	movs	r0, #1
   175ac:	4c2a      	ldr	r4, [pc, #168]	; (17658 <SubscribeHandlerLedTopic+0xdc>)
   175ae:	47a0      	blx	r4
    // Will receive something of the style "rgb(222, 224, 189)"
    if (strncmp(msgData->message->payload, "rgb(", 4) == 0) {
   175b0:	687b      	ldr	r3, [r7, #4]
   175b2:	681b      	ldr	r3, [r3, #0]
   175b4:	689b      	ldr	r3, [r3, #8]
   175b6:	4929      	ldr	r1, [pc, #164]	; (1765c <SubscribeHandlerLedTopic+0xe0>)
   175b8:	2204      	movs	r2, #4
   175ba:	0018      	movs	r0, r3
   175bc:	4b28      	ldr	r3, [pc, #160]	; (17660 <SubscribeHandlerLedTopic+0xe4>)
   175be:	4798      	blx	r3
   175c0:	1e03      	subs	r3, r0, #0
   175c2:	d143      	bne.n	1764c <SubscribeHandlerLedTopic+0xd0>
        char *p = (char *)&msgData->message->payload[4];
   175c4:	687b      	ldr	r3, [r7, #4]
   175c6:	681b      	ldr	r3, [r3, #0]
   175c8:	689b      	ldr	r3, [r3, #8]
   175ca:	3304      	adds	r3, #4
   175cc:	60fb      	str	r3, [r7, #12]
        int nb = 0;
   175ce:	2300      	movs	r3, #0
   175d0:	617b      	str	r3, [r7, #20]
        while (nb <= 2 && *p) {
   175d2:	e015      	b.n	17600 <SubscribeHandlerLedTopic+0x84>
            rgb[nb++] = strtol(p, &p, 10);
   175d4:	697c      	ldr	r4, [r7, #20]
   175d6:	1c63      	adds	r3, r4, #1
   175d8:	617b      	str	r3, [r7, #20]
   175da:	68fb      	ldr	r3, [r7, #12]
   175dc:	220c      	movs	r2, #12
   175de:	18b9      	adds	r1, r7, r2
   175e0:	220a      	movs	r2, #10
   175e2:	0018      	movs	r0, r3
   175e4:	4b1f      	ldr	r3, [pc, #124]	; (17664 <SubscribeHandlerLedTopic+0xe8>)
   175e6:	4798      	blx	r3
   175e8:	0003      	movs	r3, r0
   175ea:	b2da      	uxtb	r2, r3
   175ec:	2310      	movs	r3, #16
   175ee:	18fb      	adds	r3, r7, r3
   175f0:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   175f2:	68fb      	ldr	r3, [r7, #12]
   175f4:	781b      	ldrb	r3, [r3, #0]
   175f6:	2b2c      	cmp	r3, #44	; 0x2c
   175f8:	d10a      	bne.n	17610 <SubscribeHandlerLedTopic+0x94>
            p++; /* skip, */
   175fa:	68fb      	ldr	r3, [r7, #12]
   175fc:	3301      	adds	r3, #1
   175fe:	60fb      	str	r3, [r7, #12]
        while (nb <= 2 && *p) {
   17600:	697b      	ldr	r3, [r7, #20]
   17602:	2b02      	cmp	r3, #2
   17604:	dc05      	bgt.n	17612 <SubscribeHandlerLedTopic+0x96>
   17606:	68fb      	ldr	r3, [r7, #12]
   17608:	781b      	ldrb	r3, [r3, #0]
   1760a:	2b00      	cmp	r3, #0
   1760c:	d1e2      	bne.n	175d4 <SubscribeHandlerLedTopic+0x58>
   1760e:	e000      	b.n	17612 <SubscribeHandlerLedTopic+0x96>
            if (*p != ',') break;
   17610:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
   17612:	2310      	movs	r3, #16
   17614:	18fb      	adds	r3, r7, r3
   17616:	781b      	ldrb	r3, [r3, #0]
   17618:	001a      	movs	r2, r3
   1761a:	2310      	movs	r3, #16
   1761c:	18fb      	adds	r3, r7, r3
   1761e:	785b      	ldrb	r3, [r3, #1]
   17620:	0018      	movs	r0, r3
   17622:	2310      	movs	r3, #16
   17624:	18fb      	adds	r3, r7, r3
   17626:	789b      	ldrb	r3, [r3, #2]
   17628:	490f      	ldr	r1, [pc, #60]	; (17668 <SubscribeHandlerLedTopic+0xec>)
   1762a:	9300      	str	r3, [sp, #0]
   1762c:	0003      	movs	r3, r0
   1762e:	2001      	movs	r0, #1
   17630:	4c09      	ldr	r4, [pc, #36]	; (17658 <SubscribeHandlerLedTopic+0xdc>)
   17632:	47a0      	blx	r4
        UIChangeColors(rgb[0], rgb[1], rgb[2]);
   17634:	2310      	movs	r3, #16
   17636:	18fb      	adds	r3, r7, r3
   17638:	7818      	ldrb	r0, [r3, #0]
   1763a:	2310      	movs	r3, #16
   1763c:	18fb      	adds	r3, r7, r3
   1763e:	7859      	ldrb	r1, [r3, #1]
   17640:	2310      	movs	r3, #16
   17642:	18fb      	adds	r3, r7, r3
   17644:	789b      	ldrb	r3, [r3, #2]
   17646:	001a      	movs	r2, r3
   17648:	4b08      	ldr	r3, [pc, #32]	; (1766c <SubscribeHandlerLedTopic+0xf0>)
   1764a:	4798      	blx	r3
    }
}
   1764c:	46c0      	nop			; (mov r8, r8)
   1764e:	46bd      	mov	sp, r7
   17650:	b007      	add	sp, #28
   17652:	bd90      	pop	{r4, r7, pc}
   17654:	00038768 	.word	0x00038768
   17658:	0001edc1 	.word	0x0001edc1
   1765c:	00038770 	.word	0x00038770
   17660:	00036805 	.word	0x00036805
   17664:	000369b1 	.word	0x000369b1
   17668:	00038778 	.word	0x00038778
   1766c:	000168e5 	.word	0x000168e5

00017670 <SubscribeHandlerGameTopic>:

void SubscribeHandlerGameTopic(MessageData *msgData)
{
   17670:	b590      	push	{r4, r7, lr}
   17672:	b08b      	sub	sp, #44	; 0x2c
   17674:	af00      	add	r7, sp, #0
   17676:	6078      	str	r0, [r7, #4]
    struct GameDataPacket game;
    memset(game.game, 0xff, sizeof(game.game));
   17678:	230c      	movs	r3, #12
   1767a:	18fb      	adds	r3, r7, r3
   1767c:	2214      	movs	r2, #20
   1767e:	21ff      	movs	r1, #255	; 0xff
   17680:	0018      	movs	r0, r3
   17682:	4b48      	ldr	r3, [pc, #288]	; (177a4 <SubscribeHandlerGameTopic+0x134>)
   17684:	4798      	blx	r3

    // Parse input. The start string must be '{"game":['
    if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0) {
   17686:	687b      	ldr	r3, [r7, #4]
   17688:	681b      	ldr	r3, [r3, #0]
   1768a:	689b      	ldr	r3, [r3, #8]
   1768c:	4946      	ldr	r1, [pc, #280]	; (177a8 <SubscribeHandlerGameTopic+0x138>)
   1768e:	2209      	movs	r2, #9
   17690:	0018      	movs	r0, r3
   17692:	4b46      	ldr	r3, [pc, #280]	; (177ac <SubscribeHandlerGameTopic+0x13c>)
   17694:	4798      	blx	r3
   17696:	1e03      	subs	r3, r0, #0
   17698:	d166      	bne.n	17768 <SubscribeHandlerGameTopic+0xf8>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received!\r\n");
   1769a:	4b45      	ldr	r3, [pc, #276]	; (177b0 <SubscribeHandlerGameTopic+0x140>)
   1769c:	0019      	movs	r1, r3
   1769e:	2001      	movs	r0, #1
   176a0:	4b44      	ldr	r3, [pc, #272]	; (177b4 <SubscribeHandlerGameTopic+0x144>)
   176a2:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   176a4:	687b      	ldr	r3, [r7, #4]
   176a6:	685b      	ldr	r3, [r3, #4]
   176a8:	685a      	ldr	r2, [r3, #4]
   176aa:	687b      	ldr	r3, [r7, #4]
   176ac:	685b      	ldr	r3, [r3, #4]
   176ae:	689b      	ldr	r3, [r3, #8]
   176b0:	4941      	ldr	r1, [pc, #260]	; (177b8 <SubscribeHandlerGameTopic+0x148>)
   176b2:	2001      	movs	r0, #1
   176b4:	4c3f      	ldr	r4, [pc, #252]	; (177b4 <SubscribeHandlerGameTopic+0x144>)
   176b6:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   176b8:	687b      	ldr	r3, [r7, #4]
   176ba:	681b      	ldr	r3, [r3, #0]
   176bc:	68da      	ldr	r2, [r3, #12]
   176be:	687b      	ldr	r3, [r7, #4]
   176c0:	681b      	ldr	r3, [r3, #0]
   176c2:	689b      	ldr	r3, [r3, #8]
   176c4:	493d      	ldr	r1, [pc, #244]	; (177bc <SubscribeHandlerGameTopic+0x14c>)
   176c6:	2001      	movs	r0, #1
   176c8:	4c3a      	ldr	r4, [pc, #232]	; (177b4 <SubscribeHandlerGameTopic+0x144>)
   176ca:	47a0      	blx	r4

        int nb = 0;
   176cc:	2300      	movs	r3, #0
   176ce:	627b      	str	r3, [r7, #36]	; 0x24
        char *p = &msgData->message->payload[9];
   176d0:	687b      	ldr	r3, [r7, #4]
   176d2:	681b      	ldr	r3, [r3, #0]
   176d4:	689b      	ldr	r3, [r3, #8]
   176d6:	3309      	adds	r3, #9
   176d8:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   176da:	e015      	b.n	17708 <SubscribeHandlerGameTopic+0x98>
            game.game[nb++] = strtol(p, &p, 10);
   176dc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   176de:	1c63      	adds	r3, r4, #1
   176e0:	627b      	str	r3, [r7, #36]	; 0x24
   176e2:	68bb      	ldr	r3, [r7, #8]
   176e4:	2208      	movs	r2, #8
   176e6:	18b9      	adds	r1, r7, r2
   176e8:	220a      	movs	r2, #10
   176ea:	0018      	movs	r0, r3
   176ec:	4b34      	ldr	r3, [pc, #208]	; (177c0 <SubscribeHandlerGameTopic+0x150>)
   176ee:	4798      	blx	r3
   176f0:	0003      	movs	r3, r0
   176f2:	b2da      	uxtb	r2, r3
   176f4:	230c      	movs	r3, #12
   176f6:	18fb      	adds	r3, r7, r3
   176f8:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   176fa:	68bb      	ldr	r3, [r7, #8]
   176fc:	781b      	ldrb	r3, [r3, #0]
   176fe:	2b2c      	cmp	r3, #44	; 0x2c
   17700:	d10a      	bne.n	17718 <SubscribeHandlerGameTopic+0xa8>
            p++; /* skip, */
   17702:	68bb      	ldr	r3, [r7, #8]
   17704:	3301      	adds	r3, #1
   17706:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   17708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1770a:	2b13      	cmp	r3, #19
   1770c:	dc05      	bgt.n	1771a <SubscribeHandlerGameTopic+0xaa>
   1770e:	68bb      	ldr	r3, [r7, #8]
   17710:	781b      	ldrb	r3, [r3, #0]
   17712:	2b00      	cmp	r3, #0
   17714:	d1e2      	bne.n	176dc <SubscribeHandlerGameTopic+0x6c>
   17716:	e000      	b.n	1771a <SubscribeHandlerGameTopic+0xaa>
            if (*p != ',') break;
   17718:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nParsed Command: ");
   1771a:	4b2a      	ldr	r3, [pc, #168]	; (177c4 <SubscribeHandlerGameTopic+0x154>)
   1771c:	0019      	movs	r1, r3
   1771e:	2001      	movs	r0, #1
   17720:	4b24      	ldr	r3, [pc, #144]	; (177b4 <SubscribeHandlerGameTopic+0x144>)
   17722:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   17724:	2300      	movs	r3, #0
   17726:	623b      	str	r3, [r7, #32]
   17728:	e00d      	b.n	17746 <SubscribeHandlerGameTopic+0xd6>
            LogMessage(LOG_DEBUG_LVL, "%d,", game.game[i]);
   1772a:	230c      	movs	r3, #12
   1772c:	18fa      	adds	r2, r7, r3
   1772e:	6a3b      	ldr	r3, [r7, #32]
   17730:	18d3      	adds	r3, r2, r3
   17732:	781b      	ldrb	r3, [r3, #0]
   17734:	001a      	movs	r2, r3
   17736:	4b24      	ldr	r3, [pc, #144]	; (177c8 <SubscribeHandlerGameTopic+0x158>)
   17738:	0019      	movs	r1, r3
   1773a:	2001      	movs	r0, #1
   1773c:	4b1d      	ldr	r3, [pc, #116]	; (177b4 <SubscribeHandlerGameTopic+0x144>)
   1773e:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   17740:	6a3b      	ldr	r3, [r7, #32]
   17742:	3301      	adds	r3, #1
   17744:	623b      	str	r3, [r7, #32]
   17746:	6a3b      	ldr	r3, [r7, #32]
   17748:	2b13      	cmp	r3, #19
   1774a:	ddee      	ble.n	1772a <SubscribeHandlerGameTopic+0xba>
        }

        if (pdTRUE == ControlAddGameData(&game)) {
   1774c:	230c      	movs	r3, #12
   1774e:	18fb      	adds	r3, r7, r3
   17750:	0018      	movs	r0, r3
   17752:	4b1e      	ldr	r3, [pc, #120]	; (177cc <SubscribeHandlerGameTopic+0x15c>)
   17754:	4798      	blx	r3
   17756:	0003      	movs	r3, r0
   17758:	2b01      	cmp	r3, #1
   1775a:	d11e      	bne.n	1779a <SubscribeHandlerGameTopic+0x12a>
            LogMessage(LOG_DEBUG_LVL, "\r\nSent play to control!\r\n");
   1775c:	4b1c      	ldr	r3, [pc, #112]	; (177d0 <SubscribeHandlerGameTopic+0x160>)
   1775e:	0019      	movs	r1, r3
   17760:	2001      	movs	r0, #1
   17762:	4b14      	ldr	r3, [pc, #80]	; (177b4 <SubscribeHandlerGameTopic+0x144>)
   17764:	4798      	blx	r3
    } else {
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    }
}
   17766:	e018      	b.n	1779a <SubscribeHandlerGameTopic+0x12a>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
   17768:	4b1a      	ldr	r3, [pc, #104]	; (177d4 <SubscribeHandlerGameTopic+0x164>)
   1776a:	0019      	movs	r1, r3
   1776c:	2001      	movs	r0, #1
   1776e:	4b11      	ldr	r3, [pc, #68]	; (177b4 <SubscribeHandlerGameTopic+0x144>)
   17770:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   17772:	687b      	ldr	r3, [r7, #4]
   17774:	685b      	ldr	r3, [r3, #4]
   17776:	685a      	ldr	r2, [r3, #4]
   17778:	687b      	ldr	r3, [r7, #4]
   1777a:	685b      	ldr	r3, [r3, #4]
   1777c:	689b      	ldr	r3, [r3, #8]
   1777e:	490e      	ldr	r1, [pc, #56]	; (177b8 <SubscribeHandlerGameTopic+0x148>)
   17780:	2001      	movs	r0, #1
   17782:	4c0c      	ldr	r4, [pc, #48]	; (177b4 <SubscribeHandlerGameTopic+0x144>)
   17784:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   17786:	687b      	ldr	r3, [r7, #4]
   17788:	681b      	ldr	r3, [r3, #0]
   1778a:	68da      	ldr	r2, [r3, #12]
   1778c:	687b      	ldr	r3, [r7, #4]
   1778e:	681b      	ldr	r3, [r3, #0]
   17790:	689b      	ldr	r3, [r3, #8]
   17792:	490a      	ldr	r1, [pc, #40]	; (177bc <SubscribeHandlerGameTopic+0x14c>)
   17794:	2001      	movs	r0, #1
   17796:	4c07      	ldr	r4, [pc, #28]	; (177b4 <SubscribeHandlerGameTopic+0x144>)
   17798:	47a0      	blx	r4
}
   1779a:	46c0      	nop			; (mov r8, r8)
   1779c:	46bd      	mov	sp, r7
   1779e:	b00b      	add	sp, #44	; 0x2c
   177a0:	bd90      	pop	{r4, r7, pc}
   177a2:	46c0      	nop			; (mov r8, r8)
   177a4:	0003643f 	.word	0x0003643f
   177a8:	0003878c 	.word	0x0003878c
   177ac:	00036805 	.word	0x00036805
   177b0:	00038798 	.word	0x00038798
   177b4:	0001edc1 	.word	0x0001edc1
   177b8:	00038768 	.word	0x00038768
   177bc:	000387b4 	.word	0x000387b4
   177c0:	000369b1 	.word	0x000369b1
   177c4:	000387bc 	.word	0x000387bc
   177c8:	000387d0 	.word	0x000387d0
   177cc:	000143bd 	.word	0x000143bd
   177d0:	000387d4 	.word	0x000387d4
   177d4:	000387f0 	.word	0x000387f0

000177d8 <SubscribeHandler>:
{
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
}

void SubscribeHandler(MessageData *msgData)
{
   177d8:	b590      	push	{r4, r7, lr}
   177da:	b083      	sub	sp, #12
   177dc:	af00      	add	r7, sp, #0
   177de:	6078      	str	r0, [r7, #4]
    /* You received publish message which you had subscribed. */
    /* Print Topic and message */
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   177e0:	687b      	ldr	r3, [r7, #4]
   177e2:	685b      	ldr	r3, [r3, #4]
   177e4:	685a      	ldr	r2, [r3, #4]
   177e6:	687b      	ldr	r3, [r7, #4]
   177e8:	685b      	ldr	r3, [r3, #4]
   177ea:	689b      	ldr	r3, [r3, #8]
   177ec:	4921      	ldr	r1, [pc, #132]	; (17874 <SubscribeHandler+0x9c>)
   177ee:	2001      	movs	r0, #1
   177f0:	4c21      	ldr	r4, [pc, #132]	; (17878 <SubscribeHandler+0xa0>)
   177f2:	47a0      	blx	r4
    LogMessage(LOG_DEBUG_LVL, " >> ");
   177f4:	4b21      	ldr	r3, [pc, #132]	; (1787c <SubscribeHandler+0xa4>)
   177f6:	0019      	movs	r1, r3
   177f8:	2001      	movs	r0, #1
   177fa:	4b1f      	ldr	r3, [pc, #124]	; (17878 <SubscribeHandler+0xa0>)
   177fc:	4798      	blx	r3
    LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   177fe:	687b      	ldr	r3, [r7, #4]
   17800:	681b      	ldr	r3, [r3, #0]
   17802:	68da      	ldr	r2, [r3, #12]
   17804:	687b      	ldr	r3, [r7, #4]
   17806:	681b      	ldr	r3, [r3, #0]
   17808:	689b      	ldr	r3, [r3, #8]
   1780a:	491d      	ldr	r1, [pc, #116]	; (17880 <SubscribeHandler+0xa8>)
   1780c:	2001      	movs	r0, #1
   1780e:	4c1a      	ldr	r4, [pc, #104]	; (17878 <SubscribeHandler+0xa0>)
   17810:	47a0      	blx	r4

    // Handle LedData message
    if (strncmp((char *)msgData->topicName->lenstring.data, LED_TOPIC, msgData->message->payloadlen) == 0) {
   17812:	687b      	ldr	r3, [r7, #4]
   17814:	685b      	ldr	r3, [r3, #4]
   17816:	6898      	ldr	r0, [r3, #8]
   17818:	687b      	ldr	r3, [r7, #4]
   1781a:	681b      	ldr	r3, [r3, #0]
   1781c:	68da      	ldr	r2, [r3, #12]
   1781e:	4b19      	ldr	r3, [pc, #100]	; (17884 <SubscribeHandler+0xac>)
   17820:	0019      	movs	r1, r3
   17822:	4b19      	ldr	r3, [pc, #100]	; (17888 <SubscribeHandler+0xb0>)
   17824:	4798      	blx	r3
   17826:	1e03      	subs	r3, r0, #0
   17828:	d120      	bne.n	1786c <SubscribeHandler+0x94>
        if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_OFF, msgData->message->payloadlen) == 0) {
   1782a:	687b      	ldr	r3, [r7, #4]
   1782c:	681b      	ldr	r3, [r3, #0]
   1782e:	6898      	ldr	r0, [r3, #8]
   17830:	687b      	ldr	r3, [r7, #4]
   17832:	681b      	ldr	r3, [r3, #0]
   17834:	68da      	ldr	r2, [r3, #12]
   17836:	4b15      	ldr	r3, [pc, #84]	; (1788c <SubscribeHandler+0xb4>)
   17838:	0019      	movs	r1, r3
   1783a:	4b13      	ldr	r3, [pc, #76]	; (17888 <SubscribeHandler+0xb0>)
   1783c:	4798      	blx	r3
   1783e:	1e03      	subs	r3, r0, #0
   17840:	d104      	bne.n	1784c <SubscribeHandler+0x74>
            port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   17842:	2101      	movs	r1, #1
   17844:	2017      	movs	r0, #23
   17846:	4b12      	ldr	r3, [pc, #72]	; (17890 <SubscribeHandler+0xb8>)
   17848:	4798      	blx	r3
        } else if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0) {
            port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
        }
    }
}
   1784a:	e00f      	b.n	1786c <SubscribeHandler+0x94>
        } else if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0) {
   1784c:	687b      	ldr	r3, [r7, #4]
   1784e:	681b      	ldr	r3, [r3, #0]
   17850:	6898      	ldr	r0, [r3, #8]
   17852:	687b      	ldr	r3, [r7, #4]
   17854:	681b      	ldr	r3, [r3, #0]
   17856:	68da      	ldr	r2, [r3, #12]
   17858:	4b0e      	ldr	r3, [pc, #56]	; (17894 <SubscribeHandler+0xbc>)
   1785a:	0019      	movs	r1, r3
   1785c:	4b0a      	ldr	r3, [pc, #40]	; (17888 <SubscribeHandler+0xb0>)
   1785e:	4798      	blx	r3
   17860:	1e03      	subs	r3, r0, #0
   17862:	d103      	bne.n	1786c <SubscribeHandler+0x94>
            port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
   17864:	2100      	movs	r1, #0
   17866:	2017      	movs	r0, #23
   17868:	4b09      	ldr	r3, [pc, #36]	; (17890 <SubscribeHandler+0xb8>)
   1786a:	4798      	blx	r3
}
   1786c:	46c0      	nop			; (mov r8, r8)
   1786e:	46bd      	mov	sp, r7
   17870:	b003      	add	sp, #12
   17872:	bd90      	pop	{r4, r7, pc}
   17874:	00038768 	.word	0x00038768
   17878:	0001edc1 	.word	0x0001edc1
   1787c:	00038820 	.word	0x00038820
   17880:	000387b4 	.word	0x000387b4
   17884:	00038828 	.word	0x00038828
   17888:	00036805 	.word	0x00036805
   1788c:	0003883c 	.word	0x0003883c
   17890:	000169e5 	.word	0x000169e5
   17894:	00038844 	.word	0x00038844

00017898 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   17898:	b590      	push	{r4, r7, lr}
   1789a:	b08b      	sub	sp, #44	; 0x2c
   1789c:	af06      	add	r7, sp, #24
   1789e:	60f8      	str	r0, [r7, #12]
   178a0:	60b9      	str	r1, [r7, #8]
   178a2:	607a      	str	r2, [r7, #4]
    switch (type) {
   178a4:	68bb      	ldr	r3, [r7, #8]
   178a6:	2b01      	cmp	r3, #1
   178a8:	d03b      	beq.n	17922 <mqtt_callback+0x8a>
   178aa:	2b05      	cmp	r3, #5
   178ac:	d05e      	beq.n	1796c <mqtt_callback+0xd4>
   178ae:	2b00      	cmp	r3, #0
   178b0:	d000      	beq.n	178b4 <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   178b2:	e061      	b.n	17978 <mqtt_callback+0xe0>
            if (data->sock_connected.result >= 0) {
   178b4:	687b      	ldr	r3, [r7, #4]
   178b6:	681b      	ldr	r3, [r3, #0]
   178b8:	2b00      	cmp	r3, #0
   178ba:	db25      	blt.n	17908 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   178bc:	4b30      	ldr	r3, [pc, #192]	; (17980 <mqtt_callback+0xe8>)
   178be:	0019      	movs	r1, r3
   178c0:	2001      	movs	r0, #1
   178c2:	4b30      	ldr	r3, [pc, #192]	; (17984 <mqtt_callback+0xec>)
   178c4:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   178c6:	4930      	ldr	r1, [pc, #192]	; (17988 <mqtt_callback+0xf0>)
   178c8:	4a30      	ldr	r2, [pc, #192]	; (1798c <mqtt_callback+0xf4>)
   178ca:	68f8      	ldr	r0, [r7, #12]
   178cc:	2300      	movs	r3, #0
   178ce:	9305      	str	r3, [sp, #20]
   178d0:	2300      	movs	r3, #0
   178d2:	9304      	str	r3, [sp, #16]
   178d4:	2300      	movs	r3, #0
   178d6:	9303      	str	r3, [sp, #12]
   178d8:	2300      	movs	r3, #0
   178da:	9302      	str	r3, [sp, #8]
   178dc:	2300      	movs	r3, #0
   178de:	9301      	str	r3, [sp, #4]
   178e0:	4b2a      	ldr	r3, [pc, #168]	; (1798c <mqtt_callback+0xf4>)
   178e2:	9300      	str	r3, [sp, #0]
   178e4:	000b      	movs	r3, r1
   178e6:	2101      	movs	r1, #1
   178e8:	4c29      	ldr	r4, [pc, #164]	; (17990 <mqtt_callback+0xf8>)
   178ea:	47a0      	blx	r4
   178ec:	1e03      	subs	r3, r0, #0
   178ee:	d005      	beq.n	178fc <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   178f0:	4b28      	ldr	r3, [pc, #160]	; (17994 <mqtt_callback+0xfc>)
   178f2:	0019      	movs	r1, r3
   178f4:	2001      	movs	r0, #1
   178f6:	4b23      	ldr	r3, [pc, #140]	; (17984 <mqtt_callback+0xec>)
   178f8:	4798      	blx	r3
        } break;
   178fa:	e03d      	b.n	17978 <mqtt_callback+0xe0>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
   178fc:	4b26      	ldr	r3, [pc, #152]	; (17998 <mqtt_callback+0x100>)
   178fe:	0019      	movs	r1, r3
   17900:	2001      	movs	r0, #1
   17902:	4b20      	ldr	r3, [pc, #128]	; (17984 <mqtt_callback+0xec>)
   17904:	4798      	blx	r3
        } break;
   17906:	e037      	b.n	17978 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   17908:	4a24      	ldr	r2, [pc, #144]	; (1799c <mqtt_callback+0x104>)
   1790a:	4b25      	ldr	r3, [pc, #148]	; (179a0 <mqtt_callback+0x108>)
   1790c:	0019      	movs	r1, r3
   1790e:	2001      	movs	r0, #1
   17910:	4b1c      	ldr	r3, [pc, #112]	; (17984 <mqtt_callback+0xec>)
   17912:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   17914:	4a21      	ldr	r2, [pc, #132]	; (1799c <mqtt_callback+0x104>)
   17916:	68fb      	ldr	r3, [r7, #12]
   17918:	0011      	movs	r1, r2
   1791a:	0018      	movs	r0, r3
   1791c:	4b21      	ldr	r3, [pc, #132]	; (179a4 <mqtt_callback+0x10c>)
   1791e:	4798      	blx	r3
        } break;
   17920:	e02a      	b.n	17978 <mqtt_callback+0xe0>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   17922:	687b      	ldr	r3, [r7, #4]
   17924:	781b      	ldrb	r3, [r3, #0]
   17926:	2b00      	cmp	r3, #0
   17928:	d117      	bne.n	1795a <mqtt_callback+0xc2>
                mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
   1792a:	4b1f      	ldr	r3, [pc, #124]	; (179a8 <mqtt_callback+0x110>)
   1792c:	491f      	ldr	r1, [pc, #124]	; (179ac <mqtt_callback+0x114>)
   1792e:	68f8      	ldr	r0, [r7, #12]
   17930:	2202      	movs	r2, #2
   17932:	4c1f      	ldr	r4, [pc, #124]	; (179b0 <mqtt_callback+0x118>)
   17934:	47a0      	blx	r4
                mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
   17936:	4b1f      	ldr	r3, [pc, #124]	; (179b4 <mqtt_callback+0x11c>)
   17938:	491f      	ldr	r1, [pc, #124]	; (179b8 <mqtt_callback+0x120>)
   1793a:	68f8      	ldr	r0, [r7, #12]
   1793c:	2202      	movs	r2, #2
   1793e:	4c1c      	ldr	r4, [pc, #112]	; (179b0 <mqtt_callback+0x118>)
   17940:	47a0      	blx	r4
				mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandler);
   17942:	4b1e      	ldr	r3, [pc, #120]	; (179bc <mqtt_callback+0x124>)
   17944:	491c      	ldr	r1, [pc, #112]	; (179b8 <mqtt_callback+0x120>)
   17946:	68f8      	ldr	r0, [r7, #12]
   17948:	2202      	movs	r2, #2
   1794a:	4c19      	ldr	r4, [pc, #100]	; (179b0 <mqtt_callback+0x118>)
   1794c:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   1794e:	4b1c      	ldr	r3, [pc, #112]	; (179c0 <mqtt_callback+0x128>)
   17950:	0019      	movs	r1, r3
   17952:	2001      	movs	r0, #1
   17954:	4b0b      	ldr	r3, [pc, #44]	; (17984 <mqtt_callback+0xec>)
   17956:	4798      	blx	r3
            break;
   17958:	e00e      	b.n	17978 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   1795a:	687b      	ldr	r3, [r7, #4]
   1795c:	781b      	ldrb	r3, [r3, #0]
   1795e:	001a      	movs	r2, r3
   17960:	4b18      	ldr	r3, [pc, #96]	; (179c4 <mqtt_callback+0x12c>)
   17962:	0019      	movs	r1, r3
   17964:	2001      	movs	r0, #1
   17966:	4b07      	ldr	r3, [pc, #28]	; (17984 <mqtt_callback+0xec>)
   17968:	4798      	blx	r3
            break;
   1796a:	e005      	b.n	17978 <mqtt_callback+0xe0>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   1796c:	4b16      	ldr	r3, [pc, #88]	; (179c8 <mqtt_callback+0x130>)
   1796e:	0019      	movs	r1, r3
   17970:	2001      	movs	r0, #1
   17972:	4b04      	ldr	r3, [pc, #16]	; (17984 <mqtt_callback+0xec>)
   17974:	4798      	blx	r3
            break;
   17976:	46c0      	nop			; (mov r8, r8)
}
   17978:	46c0      	nop			; (mov r8, r8)
   1797a:	46bd      	mov	sp, r7
   1797c:	b005      	add	sp, #20
   1797e:	bd90      	pop	{r4, r7, pc}
   17980:	0003884c 	.word	0x0003884c
   17984:	0001edc1 	.word	0x0001edc1
   17988:	00038868 	.word	0x00038868
   1798c:	00038878 	.word	0x00038878
   17990:	00030921 	.word	0x00030921
   17994:	00038884 	.word	0x00038884
   17998:	000388ac 	.word	0x000388ac
   1799c:	000381f8 	.word	0x000381f8
   179a0:	000388c8 	.word	0x000388c8
   179a4:	000308d9 	.word	0x000308d9
   179a8:	00017671 	.word	0x00017671
   179ac:	00038900 	.word	0x00038900
   179b0:	00030ac1 	.word	0x00030ac1
   179b4:	0001757d 	.word	0x0001757d
   179b8:	00038828 	.word	0x00038828
   179bc:	000177d9 	.word	0x000177d9
   179c0:	00038914 	.word	0x00038914
   179c4:	00038928 	.word	0x00038928
   179c8:	0003895c 	.word	0x0003895c

000179cc <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   179cc:	b580      	push	{r7, lr}
   179ce:	b088      	sub	sp, #32
   179d0:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   179d2:	1d3b      	adds	r3, r7, #4
   179d4:	0018      	movs	r0, r3
   179d6:	4b1f      	ldr	r3, [pc, #124]	; (17a54 <configure_mqtt+0x88>)
   179d8:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   179da:	1d3b      	adds	r3, r7, #4
   179dc:	4a1e      	ldr	r2, [pc, #120]	; (17a58 <configure_mqtt+0x8c>)
   179de:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   179e0:	1d3b      	adds	r3, r7, #4
   179e2:	2280      	movs	r2, #128	; 0x80
   179e4:	0092      	lsls	r2, r2, #2
   179e6:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   179e8:	1d3b      	adds	r3, r7, #4
   179ea:	4a1c      	ldr	r2, [pc, #112]	; (17a5c <configure_mqtt+0x90>)
   179ec:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   179ee:	1d3b      	adds	r3, r7, #4
   179f0:	2280      	movs	r2, #128	; 0x80
   179f2:	0092      	lsls	r2, r2, #2
   179f4:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   179f6:	1d3b      	adds	r3, r7, #4
   179f8:	4a19      	ldr	r2, [pc, #100]	; (17a60 <configure_mqtt+0x94>)
   179fa:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   179fc:	1d3b      	adds	r3, r7, #4
   179fe:	4a19      	ldr	r2, [pc, #100]	; (17a64 <configure_mqtt+0x98>)
   17a00:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   17a02:	1d3a      	adds	r2, r7, #4
   17a04:	4b18      	ldr	r3, [pc, #96]	; (17a68 <configure_mqtt+0x9c>)
   17a06:	0011      	movs	r1, r2
   17a08:	0018      	movs	r0, r3
   17a0a:	4b18      	ldr	r3, [pc, #96]	; (17a6c <configure_mqtt+0xa0>)
   17a0c:	4798      	blx	r3
   17a0e:	0003      	movs	r3, r0
   17a10:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   17a12:	69fb      	ldr	r3, [r7, #28]
   17a14:	2b00      	cmp	r3, #0
   17a16:	da06      	bge.n	17a26 <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   17a18:	69fa      	ldr	r2, [r7, #28]
   17a1a:	4b15      	ldr	r3, [pc, #84]	; (17a70 <configure_mqtt+0xa4>)
   17a1c:	0019      	movs	r1, r3
   17a1e:	2001      	movs	r0, #1
   17a20:	4b14      	ldr	r3, [pc, #80]	; (17a74 <configure_mqtt+0xa8>)
   17a22:	4798      	blx	r3
        while (1) {
   17a24:	e7fe      	b.n	17a24 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   17a26:	4a14      	ldr	r2, [pc, #80]	; (17a78 <configure_mqtt+0xac>)
   17a28:	4b0f      	ldr	r3, [pc, #60]	; (17a68 <configure_mqtt+0x9c>)
   17a2a:	0011      	movs	r1, r2
   17a2c:	0018      	movs	r0, r3
   17a2e:	4b13      	ldr	r3, [pc, #76]	; (17a7c <configure_mqtt+0xb0>)
   17a30:	4798      	blx	r3
   17a32:	0003      	movs	r3, r0
   17a34:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   17a36:	69fb      	ldr	r3, [r7, #28]
   17a38:	2b00      	cmp	r3, #0
   17a3a:	da06      	bge.n	17a4a <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   17a3c:	69fa      	ldr	r2, [r7, #28]
   17a3e:	4b10      	ldr	r3, [pc, #64]	; (17a80 <configure_mqtt+0xb4>)
   17a40:	0019      	movs	r1, r3
   17a42:	2001      	movs	r0, #1
   17a44:	4b0b      	ldr	r3, [pc, #44]	; (17a74 <configure_mqtt+0xa8>)
   17a46:	4798      	blx	r3
        while (1) {
   17a48:	e7fe      	b.n	17a48 <configure_mqtt+0x7c>
        }
    }
}
   17a4a:	46c0      	nop			; (mov r8, r8)
   17a4c:	46bd      	mov	sp, r7
   17a4e:	b008      	add	sp, #32
   17a50:	bd80      	pop	{r7, pc}
   17a52:	46c0      	nop			; (mov r8, r8)
   17a54:	00030819 	.word	0x00030819
   17a58:	200008d4 	.word	0x200008d4
   17a5c:	20000ad4 	.word	0x20000ad4
   17a60:	0000075b 	.word	0x0000075b
   17a64:	00001770 	.word	0x00001770
   17a68:	2000089c 	.word	0x2000089c
   17a6c:	00030769 	.word	0x00030769
   17a70:	00038970 	.word	0x00038970
   17a74:	0001edc1 	.word	0x0001edc1
   17a78:	00017899 	.word	0x00017899
   17a7c:	00030859 	.word	0x00030859
   17a80:	000389a4 	.word	0x000389a4

00017a84 <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   17a84:	b580      	push	{r7, lr}
   17a86:	b084      	sub	sp, #16
   17a88:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   17a8a:	1d3b      	adds	r3, r7, #4
   17a8c:	0018      	movs	r0, r3
   17a8e:	4b0b      	ldr	r3, [pc, #44]	; (17abc <configure_extint_channel+0x38>)
   17a90:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   17a92:	1d3b      	adds	r3, r7, #4
   17a94:	2237      	movs	r2, #55	; 0x37
   17a96:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   17a98:	1d3b      	adds	r3, r7, #4
   17a9a:	2200      	movs	r2, #0
   17a9c:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   17a9e:	1d3b      	adds	r3, r7, #4
   17aa0:	2201      	movs	r2, #1
   17aa2:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   17aa4:	1d3b      	adds	r3, r7, #4
   17aa6:	2202      	movs	r2, #2
   17aa8:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   17aaa:	1d3b      	adds	r3, r7, #4
   17aac:	0019      	movs	r1, r3
   17aae:	2007      	movs	r0, #7
   17ab0:	4b03      	ldr	r3, [pc, #12]	; (17ac0 <configure_extint_channel+0x3c>)
   17ab2:	4798      	blx	r3
}
   17ab4:	46c0      	nop			; (mov r8, r8)
   17ab6:	46bd      	mov	sp, r7
   17ab8:	b004      	add	sp, #16
   17aba:	bd80      	pop	{r7, pc}
   17abc:	00027825 	.word	0x00027825
   17ac0:	00027859 	.word	0x00027859

00017ac4 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   17ac4:	b580      	push	{r7, lr}
   17ac6:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   17ac8:	4b06      	ldr	r3, [pc, #24]	; (17ae4 <configure_extint_callbacks+0x20>)
   17aca:	2200      	movs	r2, #0
   17acc:	2107      	movs	r1, #7
   17ace:	0018      	movs	r0, r3
   17ad0:	4b05      	ldr	r3, [pc, #20]	; (17ae8 <configure_extint_callbacks+0x24>)
   17ad2:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   17ad4:	2100      	movs	r1, #0
   17ad6:	2007      	movs	r0, #7
   17ad8:	4b04      	ldr	r3, [pc, #16]	; (17aec <configure_extint_callbacks+0x28>)
   17ada:	4798      	blx	r3
}
   17adc:	46c0      	nop			; (mov r8, r8)
   17ade:	46bd      	mov	sp, r7
   17ae0:	bd80      	pop	{r7, pc}
   17ae2:	46c0      	nop			; (mov r8, r8)
   17ae4:	00017af1 	.word	0x00017af1
   17ae8:	00027425 	.word	0x00027425
   17aec:	00027489 	.word	0x00027489

00017af0 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   17af0:	b5b0      	push	{r4, r5, r7, lr}
   17af2:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
   17af4:	4b0c      	ldr	r3, [pc, #48]	; (17b28 <extint_detection_callback+0x38>)
   17af6:	681b      	ldr	r3, [r3, #0]
   17af8:	1c5a      	adds	r2, r3, #1
   17afa:	4b0b      	ldr	r3, [pc, #44]	; (17b28 <extint_detection_callback+0x38>)
   17afc:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
   17afe:	4b0a      	ldr	r3, [pc, #40]	; (17b28 <extint_detection_callback+0x38>)
   17b00:	681b      	ldr	r3, [r3, #0]
   17b02:	2b28      	cmp	r3, #40	; 0x28
   17b04:	d902      	bls.n	17b0c <extint_detection_callback+0x1c>
   17b06:	4b08      	ldr	r3, [pc, #32]	; (17b28 <extint_detection_callback+0x38>)
   17b08:	2201      	movs	r2, #1
   17b0a:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
   17b0c:	4b06      	ldr	r3, [pc, #24]	; (17b28 <extint_detection_callback+0x38>)
   17b0e:	681b      	ldr	r3, [r3, #0]
   17b10:	4a06      	ldr	r2, [pc, #24]	; (17b2c <extint_detection_callback+0x3c>)
   17b12:	4807      	ldr	r0, [pc, #28]	; (17b30 <extint_detection_callback+0x40>)
   17b14:	213f      	movs	r1, #63	; 0x3f
   17b16:	4c07      	ldr	r4, [pc, #28]	; (17b34 <extint_detection_callback+0x44>)
   17b18:	47a0      	blx	r4
    isPressed = true;
   17b1a:	4b07      	ldr	r3, [pc, #28]	; (17b38 <extint_detection_callback+0x48>)
   17b1c:	2201      	movs	r2, #1
   17b1e:	701a      	strb	r2, [r3, #0]
    //Published in the Wifi thread main loop
}
   17b20:	46c0      	nop			; (mov r8, r8)
   17b22:	46bd      	mov	sp, r7
   17b24:	bdb0      	pop	{r4, r5, r7, pc}
   17b26:	46c0      	nop			; (mov r8, r8)
   17b28:	200000b0 	.word	0x200000b0
   17b2c:	000389d8 	.word	0x000389d8
   17b30:	20000070 	.word	0x20000070
   17b34:	00036699 	.word	0x00036699
   17b38:	20000cd4 	.word	0x20000cd4

00017b3c <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   17b3c:	b580      	push	{r7, lr}
   17b3e:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   17b40:	4a15      	ldr	r2, [pc, #84]	; (17b98 <HTTP_DownloadFileInit+0x5c>)
   17b42:	4b16      	ldr	r3, [pc, #88]	; (17b9c <HTTP_DownloadFileInit+0x60>)
   17b44:	0011      	movs	r1, r2
   17b46:	0018      	movs	r0, r3
   17b48:	4b15      	ldr	r3, [pc, #84]	; (17ba0 <HTTP_DownloadFileInit+0x64>)
   17b4a:	4798      	blx	r3
   17b4c:	1e03      	subs	r3, r0, #0
   17b4e:	d008      	beq.n	17b62 <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   17b50:	4b14      	ldr	r3, [pc, #80]	; (17ba4 <HTTP_DownloadFileInit+0x68>)
   17b52:	0019      	movs	r1, r3
   17b54:	2001      	movs	r0, #1
   17b56:	4b14      	ldr	r3, [pc, #80]	; (17ba8 <HTTP_DownloadFileInit+0x6c>)
   17b58:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   17b5a:	e002      	b.n	17b62 <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   17b5c:	2000      	movs	r0, #0
   17b5e:	4b13      	ldr	r3, [pc, #76]	; (17bac <HTTP_DownloadFileInit+0x70>)
   17b60:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   17b62:	4b0e      	ldr	r3, [pc, #56]	; (17b9c <HTTP_DownloadFileInit+0x60>)
   17b64:	2234      	movs	r2, #52	; 0x34
   17b66:	5c9b      	ldrb	r3, [r3, r2]
   17b68:	2b00      	cmp	r3, #0
   17b6a:	d1f7      	bne.n	17b5c <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   17b6c:	4b10      	ldr	r3, [pc, #64]	; (17bb0 <HTTP_DownloadFileInit+0x74>)
   17b6e:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   17b70:	4b10      	ldr	r3, [pc, #64]	; (17bb4 <HTTP_DownloadFileInit+0x78>)
   17b72:	2201      	movs	r2, #1
   17b74:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   17b76:	4a10      	ldr	r2, [pc, #64]	; (17bb8 <HTTP_DownloadFileInit+0x7c>)
   17b78:	4b10      	ldr	r3, [pc, #64]	; (17bbc <HTTP_DownloadFileInit+0x80>)
   17b7a:	0011      	movs	r1, r2
   17b7c:	0018      	movs	r0, r3
   17b7e:	4b10      	ldr	r3, [pc, #64]	; (17bc0 <HTTP_DownloadFileInit+0x84>)
   17b80:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   17b82:	4b10      	ldr	r3, [pc, #64]	; (17bc4 <HTTP_DownloadFileInit+0x88>)
   17b84:	4798      	blx	r3

    start_download();
   17b86:	4b10      	ldr	r3, [pc, #64]	; (17bc8 <HTTP_DownloadFileInit+0x8c>)
   17b88:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   17b8a:	4b10      	ldr	r3, [pc, #64]	; (17bcc <HTTP_DownloadFileInit+0x90>)
   17b8c:	2203      	movs	r2, #3
   17b8e:	701a      	strb	r2, [r3, #0]
}
   17b90:	46c0      	nop			; (mov r8, r8)
   17b92:	46bd      	mov	sp, r7
   17b94:	bd80      	pop	{r7, pc}
   17b96:	46c0      	nop			; (mov r8, r8)
   17b98:	000381f8 	.word	0x000381f8
   17b9c:	2000089c 	.word	0x2000089c
   17ba0:	00030a0d 	.word	0x00030a0d
   17ba4:	000385f0 	.word	0x000385f0
   17ba8:	0001edc1 	.word	0x0001edc1
   17bac:	00022f15 	.word	0x00022f15
   17bb0:	000264d1 	.word	0x000264d1
   17bb4:	2000063c 	.word	0x2000063c
   17bb8:	000171dd 	.word	0x000171dd
   17bbc:	000171a9 	.word	0x000171a9
   17bc0:	00026519 	.word	0x00026519
   17bc4:	00026481 	.word	0x00026481
   17bc8:	00016dd1 	.word	0x00016dd1
   17bcc:	20000623 	.word	0x20000623

00017bd0 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   17bd0:	b590      	push	{r4, r7, lr}
   17bd2:	b085      	sub	sp, #20
   17bd4:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   17bd6:	e009      	b.n	17bec <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   17bd8:	2000      	movs	r0, #0
   17bda:	4b30      	ldr	r3, [pc, #192]	; (17c9c <HTTP_DownloadFileTransaction+0xcc>)
   17bdc:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   17bde:	4b30      	ldr	r3, [pc, #192]	; (17ca0 <HTTP_DownloadFileTransaction+0xd0>)
   17be0:	0018      	movs	r0, r3
   17be2:	4b30      	ldr	r3, [pc, #192]	; (17ca4 <HTTP_DownloadFileTransaction+0xd4>)
   17be4:	4798      	blx	r3
        vTaskDelay(5);
   17be6:	2005      	movs	r0, #5
   17be8:	4b2f      	ldr	r3, [pc, #188]	; (17ca8 <HTTP_DownloadFileTransaction+0xd8>)
   17bea:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   17bec:	2010      	movs	r0, #16
   17bee:	4b2f      	ldr	r3, [pc, #188]	; (17cac <HTTP_DownloadFileTransaction+0xdc>)
   17bf0:	4798      	blx	r3
   17bf2:	0003      	movs	r3, r0
   17bf4:	001a      	movs	r2, r3
   17bf6:	2301      	movs	r3, #1
   17bf8:	4053      	eors	r3, r2
   17bfa:	b2db      	uxtb	r3, r3
   17bfc:	2b00      	cmp	r3, #0
   17bfe:	d009      	beq.n	17c14 <HTTP_DownloadFileTransaction+0x44>
   17c00:	2020      	movs	r0, #32
   17c02:	4b2a      	ldr	r3, [pc, #168]	; (17cac <HTTP_DownloadFileTransaction+0xdc>)
   17c04:	4798      	blx	r3
   17c06:	0003      	movs	r3, r0
   17c08:	001a      	movs	r2, r3
   17c0a:	2301      	movs	r3, #1
   17c0c:	4053      	eors	r3, r2
   17c0e:	b2db      	uxtb	r3, r3
   17c10:	2b00      	cmp	r3, #0
   17c12:	d1e1      	bne.n	17bd8 <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   17c14:	4b26      	ldr	r3, [pc, #152]	; (17cb0 <HTTP_DownloadFileTransaction+0xe0>)
   17c16:	4798      	blx	r3
    vTaskDelay(1000);
   17c18:	23fa      	movs	r3, #250	; 0xfa
   17c1a:	009b      	lsls	r3, r3, #2
   17c1c:	0018      	movs	r0, r3
   17c1e:	4b22      	ldr	r3, [pc, #136]	; (17ca8 <HTTP_DownloadFileTransaction+0xd8>)
   17c20:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   17c22:	4b24      	ldr	r3, [pc, #144]	; (17cb4 <HTTP_DownloadFileTransaction+0xe4>)
   17c24:	2200      	movs	r2, #0
   17c26:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
   17c28:	003b      	movs	r3, r7
   17c2a:	4a23      	ldr	r2, [pc, #140]	; (17cb8 <HTTP_DownloadFileTransaction+0xe8>)
   17c2c:	ca13      	ldmia	r2!, {r0, r1, r4}
   17c2e:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   17c30:	003b      	movs	r3, r7
   17c32:	2230      	movs	r2, #48	; 0x30
   17c34:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   17c36:	230f      	movs	r3, #15
   17c38:	18fc      	adds	r4, r7, r3
   17c3a:	0039      	movs	r1, r7
   17c3c:	4b1f      	ldr	r3, [pc, #124]	; (17cbc <HTTP_DownloadFileTransaction+0xec>)
   17c3e:	220a      	movs	r2, #10
   17c40:	0018      	movs	r0, r3
   17c42:	4b1f      	ldr	r3, [pc, #124]	; (17cc0 <HTTP_DownloadFileTransaction+0xf0>)
   17c44:	4798      	blx	r3
   17c46:	0003      	movs	r3, r0
   17c48:	7023      	strb	r3, [r4, #0]
    res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   17c4a:	230f      	movs	r3, #15
   17c4c:	18fc      	adds	r4, r7, r3
   17c4e:	0039      	movs	r1, r7
   17c50:	4b1a      	ldr	r3, [pc, #104]	; (17cbc <HTTP_DownloadFileTransaction+0xec>)
   17c52:	220a      	movs	r2, #10
   17c54:	0018      	movs	r0, r3
   17c56:	4b1a      	ldr	r3, [pc, #104]	; (17cc0 <HTTP_DownloadFileTransaction+0xf0>)
   17c58:	4798      	blx	r3
   17c5a:	0003      	movs	r3, r0
   17c5c:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
   17c5e:	230f      	movs	r3, #15
   17c60:	18fb      	adds	r3, r7, r3
   17c62:	781b      	ldrb	r3, [r3, #0]
   17c64:	2b00      	cmp	r3, #0
   17c66:	d008      	beq.n	17c7a <HTTP_DownloadFileTransaction+0xaa>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   17c68:	230f      	movs	r3, #15
   17c6a:	18fb      	adds	r3, r7, r3
   17c6c:	781a      	ldrb	r2, [r3, #0]
   17c6e:	4b15      	ldr	r3, [pc, #84]	; (17cc4 <HTTP_DownloadFileTransaction+0xf4>)
   17c70:	0019      	movs	r1, r3
   17c72:	2000      	movs	r0, #0
   17c74:	4b14      	ldr	r3, [pc, #80]	; (17cc8 <HTTP_DownloadFileTransaction+0xf8>)
   17c76:	4798      	blx	r3
   17c78:	e003      	b.n	17c82 <HTTP_DownloadFileTransaction+0xb2>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
   17c7a:	4b14      	ldr	r3, [pc, #80]	; (17ccc <HTTP_DownloadFileTransaction+0xfc>)
   17c7c:	0018      	movs	r0, r3
   17c7e:	4b14      	ldr	r3, [pc, #80]	; (17cd0 <HTTP_DownloadFileTransaction+0x100>)
   17c80:	4798      	blx	r3
    }
    delay_ms(100);
   17c82:	2064      	movs	r0, #100	; 0x64
   17c84:	4b13      	ldr	r3, [pc, #76]	; (17cd4 <HTTP_DownloadFileTransaction+0x104>)
   17c86:	4798      	blx	r3
    system_reset();
   17c88:	4b13      	ldr	r3, [pc, #76]	; (17cd8 <HTTP_DownloadFileTransaction+0x108>)
   17c8a:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
   17c8c:	4b13      	ldr	r3, [pc, #76]	; (17cdc <HTTP_DownloadFileTransaction+0x10c>)
   17c8e:	2200      	movs	r2, #0
   17c90:	701a      	strb	r2, [r3, #0]
}
   17c92:	46c0      	nop			; (mov r8, r8)
   17c94:	46bd      	mov	sp, r7
   17c96:	b005      	add	sp, #20
   17c98:	bd90      	pop	{r4, r7, pc}
   17c9a:	46c0      	nop			; (mov r8, r8)
   17c9c:	00022f15 	.word	0x00022f15
   17ca0:	20004944 	.word	0x20004944
   17ca4:	00033735 	.word	0x00033735
   17ca8:	0001d081 	.word	0x0001d081
   17cac:	00016aa9 	.word	0x00016aa9
   17cb0:	000264d1 	.word	0x000264d1
   17cb4:	2000063c 	.word	0x2000063c
   17cb8:	00038a10 	.word	0x00038a10
   17cbc:	20000870 	.word	0x20000870
   17cc0:	0002e9fd 	.word	0x0002e9fd
   17cc4:	000389ec 	.word	0x000389ec
   17cc8:	0001edc1 	.word	0x0001edc1
   17ccc:	000389fc 	.word	0x000389fc
   17cd0:	0001ecd5 	.word	0x0001ecd5
   17cd4:	0002108d 	.word	0x0002108d
   17cd8:	000169ad 	.word	0x000169ad
   17cdc:	20000623 	.word	0x20000623

00017ce0 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   17ce0:	b580      	push	{r7, lr}
   17ce2:	af00      	add	r7, sp, #0
    socketDeinit();
   17ce4:	4b18      	ldr	r3, [pc, #96]	; (17d48 <MQTT_InitRoutine+0x68>)
   17ce6:	4798      	blx	r3
    configure_mqtt();
   17ce8:	4b18      	ldr	r3, [pc, #96]	; (17d4c <MQTT_InitRoutine+0x6c>)
   17cea:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   17cec:	4a18      	ldr	r2, [pc, #96]	; (17d50 <MQTT_InitRoutine+0x70>)
   17cee:	4b19      	ldr	r3, [pc, #100]	; (17d54 <MQTT_InitRoutine+0x74>)
   17cf0:	0011      	movs	r1, r2
   17cf2:	0018      	movs	r0, r3
   17cf4:	4b18      	ldr	r3, [pc, #96]	; (17d58 <MQTT_InitRoutine+0x78>)
   17cf6:	4798      	blx	r3
    socketInit();
   17cf8:	4b18      	ldr	r3, [pc, #96]	; (17d5c <MQTT_InitRoutine+0x7c>)
   17cfa:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   17cfc:	4b18      	ldr	r3, [pc, #96]	; (17d60 <MQTT_InitRoutine+0x80>)
   17cfe:	2234      	movs	r2, #52	; 0x34
   17d00:	5c9b      	ldrb	r3, [r3, r2]
   17d02:	2201      	movs	r2, #1
   17d04:	4053      	eors	r3, r2
   17d06:	b2db      	uxtb	r3, r3
   17d08:	2b00      	cmp	r3, #0
   17d0a:	d00c      	beq.n	17d26 <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   17d0c:	4a15      	ldr	r2, [pc, #84]	; (17d64 <MQTT_InitRoutine+0x84>)
   17d0e:	4b14      	ldr	r3, [pc, #80]	; (17d60 <MQTT_InitRoutine+0x80>)
   17d10:	0011      	movs	r1, r2
   17d12:	0018      	movs	r0, r3
   17d14:	4b14      	ldr	r3, [pc, #80]	; (17d68 <MQTT_InitRoutine+0x88>)
   17d16:	4798      	blx	r3
   17d18:	1e03      	subs	r3, r0, #0
   17d1a:	d004      	beq.n	17d26 <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   17d1c:	4b13      	ldr	r3, [pc, #76]	; (17d6c <MQTT_InitRoutine+0x8c>)
   17d1e:	0019      	movs	r1, r3
   17d20:	2001      	movs	r0, #1
   17d22:	4b13      	ldr	r3, [pc, #76]	; (17d70 <MQTT_InitRoutine+0x90>)
   17d24:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   17d26:	4b0e      	ldr	r3, [pc, #56]	; (17d60 <MQTT_InitRoutine+0x80>)
   17d28:	2234      	movs	r2, #52	; 0x34
   17d2a:	5c9b      	ldrb	r3, [r3, r2]
   17d2c:	2b00      	cmp	r3, #0
   17d2e:	d004      	beq.n	17d3a <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
   17d30:	4b10      	ldr	r3, [pc, #64]	; (17d74 <MQTT_InitRoutine+0x94>)
   17d32:	0019      	movs	r1, r3
   17d34:	2001      	movs	r0, #1
   17d36:	4b0e      	ldr	r3, [pc, #56]	; (17d70 <MQTT_InitRoutine+0x90>)
   17d38:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   17d3a:	4b0f      	ldr	r3, [pc, #60]	; (17d78 <MQTT_InitRoutine+0x98>)
   17d3c:	2201      	movs	r2, #1
   17d3e:	701a      	strb	r2, [r3, #0]
}
   17d40:	46c0      	nop			; (mov r8, r8)
   17d42:	46bd      	mov	sp, r7
   17d44:	bd80      	pop	{r7, pc}
   17d46:	46c0      	nop			; (mov r8, r8)
   17d48:	000264d1 	.word	0x000264d1
   17d4c:	000179cd 	.word	0x000179cd
   17d50:	00017559 	.word	0x00017559
   17d54:	00017525 	.word	0x00017525
   17d58:	00026519 	.word	0x00026519
   17d5c:	00026481 	.word	0x00026481
   17d60:	2000089c 	.word	0x2000089c
   17d64:	000381f8 	.word	0x000381f8
   17d68:	000308d9 	.word	0x000308d9
   17d6c:	000385f0 	.word	0x000385f0
   17d70:	0001edc1 	.word	0x0001edc1
   17d74:	00038a1c 	.word	0x00038a1c
   17d78:	20000623 	.word	0x20000623

00017d7c <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   17d7c:	b580      	push	{r7, lr}
   17d7e:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   17d80:	2000      	movs	r0, #0
   17d82:	4b0d      	ldr	r3, [pc, #52]	; (17db8 <MQTT_HandleTransactions+0x3c>)
   17d84:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   17d86:	4b0d      	ldr	r3, [pc, #52]	; (17dbc <MQTT_HandleTransactions+0x40>)
   17d88:	0018      	movs	r0, r3
   17d8a:	4b0d      	ldr	r3, [pc, #52]	; (17dc0 <MQTT_HandleTransactions+0x44>)
   17d8c:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
   17d8e:	4b0d      	ldr	r3, [pc, #52]	; (17dc4 <MQTT_HandleTransactions+0x48>)
   17d90:	4798      	blx	r3
    MQTT_HandleImuMessages();
   17d92:	4b0d      	ldr	r3, [pc, #52]	; (17dc8 <MQTT_HandleTransactions+0x4c>)
   17d94:	4798      	blx	r3
	MQTT_HandleTestMessages();
   17d96:	4b0d      	ldr	r3, [pc, #52]	; (17dcc <MQTT_HandleTransactions+0x50>)
   17d98:	4798      	blx	r3
	MQTT_HandleNauMessages();
   17d9a:	4b0d      	ldr	r3, [pc, #52]	; (17dd0 <MQTT_HandleTransactions+0x54>)
   17d9c:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   17d9e:	4b0d      	ldr	r3, [pc, #52]	; (17dd4 <MQTT_HandleTransactions+0x58>)
   17da0:	2234      	movs	r2, #52	; 0x34
   17da2:	5c9b      	ldrb	r3, [r3, r2]
   17da4:	2b00      	cmp	r3, #0
   17da6:	d004      	beq.n	17db2 <MQTT_HandleTransactions+0x36>
   17da8:	4b0a      	ldr	r3, [pc, #40]	; (17dd4 <MQTT_HandleTransactions+0x58>)
   17daa:	2164      	movs	r1, #100	; 0x64
   17dac:	0018      	movs	r0, r3
   17dae:	4b0a      	ldr	r3, [pc, #40]	; (17dd8 <MQTT_HandleTransactions+0x5c>)
   17db0:	4798      	blx	r3
}
   17db2:	46c0      	nop			; (mov r8, r8)
   17db4:	46bd      	mov	sp, r7
   17db6:	bd80      	pop	{r7, pc}
   17db8:	00022f15 	.word	0x00022f15
   17dbc:	20004944 	.word	0x20004944
   17dc0:	00033735 	.word	0x00033735
   17dc4:	00017f59 	.word	0x00017f59
   17dc8:	00017ddd 	.word	0x00017ddd
   17dcc:	00017e69 	.word	0x00017e69
   17dd0:	00017edd 	.word	0x00017edd
   17dd4:	2000089c 	.word	0x2000089c
   17dd8:	00030b09 	.word	0x00030b09

00017ddc <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
   17ddc:	b590      	push	{r4, r7, lr}
   17dde:	b085      	sub	sp, #20
   17de0:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
   17de2:	4b18      	ldr	r3, [pc, #96]	; (17e44 <MQTT_HandleImuMessages+0x68>)
   17de4:	681b      	ldr	r3, [r3, #0]
   17de6:	0039      	movs	r1, r7
   17de8:	2200      	movs	r2, #0
   17dea:	0018      	movs	r0, r3
   17dec:	4b16      	ldr	r3, [pc, #88]	; (17e48 <MQTT_HandleImuMessages+0x6c>)
   17dee:	4798      	blx	r3
   17df0:	0003      	movs	r3, r0
   17df2:	2b01      	cmp	r3, #1
   17df4:	d121      	bne.n	17e3a <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
   17df6:	003b      	movs	r3, r7
   17df8:	2200      	movs	r2, #0
   17dfa:	5e9b      	ldrsh	r3, [r3, r2]
   17dfc:	001c      	movs	r4, r3
   17dfe:	003b      	movs	r3, r7
   17e00:	2202      	movs	r2, #2
   17e02:	5e9b      	ldrsh	r3, [r3, r2]
   17e04:	0019      	movs	r1, r3
   17e06:	003b      	movs	r3, r7
   17e08:	2204      	movs	r2, #4
   17e0a:	5e9b      	ldrsh	r3, [r3, r2]
   17e0c:	4a0f      	ldr	r2, [pc, #60]	; (17e4c <MQTT_HandleImuMessages+0x70>)
   17e0e:	4810      	ldr	r0, [pc, #64]	; (17e50 <MQTT_HandleImuMessages+0x74>)
   17e10:	9301      	str	r3, [sp, #4]
   17e12:	9100      	str	r1, [sp, #0]
   17e14:	0023      	movs	r3, r4
   17e16:	213f      	movs	r1, #63	; 0x3f
   17e18:	4c0e      	ldr	r4, [pc, #56]	; (17e54 <MQTT_HandleImuMessages+0x78>)
   17e1a:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   17e1c:	4b0c      	ldr	r3, [pc, #48]	; (17e50 <MQTT_HandleImuMessages+0x74>)
   17e1e:	0018      	movs	r0, r3
   17e20:	4b0d      	ldr	r3, [pc, #52]	; (17e58 <MQTT_HandleImuMessages+0x7c>)
   17e22:	4798      	blx	r3
   17e24:	0004      	movs	r4, r0
   17e26:	4a0a      	ldr	r2, [pc, #40]	; (17e50 <MQTT_HandleImuMessages+0x74>)
   17e28:	490c      	ldr	r1, [pc, #48]	; (17e5c <MQTT_HandleImuMessages+0x80>)
   17e2a:	480d      	ldr	r0, [pc, #52]	; (17e60 <MQTT_HandleImuMessages+0x84>)
   17e2c:	2300      	movs	r3, #0
   17e2e:	9301      	str	r3, [sp, #4]
   17e30:	2301      	movs	r3, #1
   17e32:	9300      	str	r3, [sp, #0]
   17e34:	0023      	movs	r3, r4
   17e36:	4c0b      	ldr	r4, [pc, #44]	; (17e64 <MQTT_HandleImuMessages+0x88>)
   17e38:	47a0      	blx	r4
    }
}
   17e3a:	46c0      	nop			; (mov r8, r8)
   17e3c:	46bd      	mov	sp, r7
   17e3e:	b003      	add	sp, #12
   17e40:	bd90      	pop	{r4, r7, pc}
   17e42:	46c0      	nop			; (mov r8, r8)
   17e44:	2000062c 	.word	0x2000062c
   17e48:	0001bed5 	.word	0x0001bed5
   17e4c:	00038a38 	.word	0x00038a38
   17e50:	20000030 	.word	0x20000030
   17e54:	00036699 	.word	0x00036699
   17e58:	000367f7 	.word	0x000367f7
   17e5c:	00038a5c 	.word	0x00038a5c
   17e60:	2000089c 	.word	0x2000089c
   17e64:	00030a55 	.word	0x00030a55

00017e68 <MQTT_HandleTestMessages>:

static void MQTT_HandleTestMessages(void)
{
   17e68:	b590      	push	{r4, r7, lr}
   17e6a:	b085      	sub	sp, #20
   17e6c:	af02      	add	r7, sp, #8
	struct TestPacket TestDataVar;
	if (pdPASS == xQueueReceive(xQueueTestBuffer, &TestDataVar, 0)) {
   17e6e:	4b12      	ldr	r3, [pc, #72]	; (17eb8 <MQTT_HandleTestMessages+0x50>)
   17e70:	681b      	ldr	r3, [r3, #0]
   17e72:	1d39      	adds	r1, r7, #4
   17e74:	2200      	movs	r2, #0
   17e76:	0018      	movs	r0, r3
   17e78:	4b10      	ldr	r3, [pc, #64]	; (17ebc <MQTT_HandleTestMessages+0x54>)
   17e7a:	4798      	blx	r3
   17e7c:	0003      	movs	r3, r0
   17e7e:	2b01      	cmp	r3, #1
   17e80:	d115      	bne.n	17eae <MQTT_HandleTestMessages+0x46>
		snprintf(mqtt_msg, 63, "{\"test\":%d }", TestDataVar.test);
   17e82:	1d3b      	adds	r3, r7, #4
   17e84:	781b      	ldrb	r3, [r3, #0]
   17e86:	4a0e      	ldr	r2, [pc, #56]	; (17ec0 <MQTT_HandleTestMessages+0x58>)
   17e88:	480e      	ldr	r0, [pc, #56]	; (17ec4 <MQTT_HandleTestMessages+0x5c>)
   17e8a:	213f      	movs	r1, #63	; 0x3f
   17e8c:	4c0e      	ldr	r4, [pc, #56]	; (17ec8 <MQTT_HandleTestMessages+0x60>)
   17e8e:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, TEST_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   17e90:	4b0c      	ldr	r3, [pc, #48]	; (17ec4 <MQTT_HandleTestMessages+0x5c>)
   17e92:	0018      	movs	r0, r3
   17e94:	4b0d      	ldr	r3, [pc, #52]	; (17ecc <MQTT_HandleTestMessages+0x64>)
   17e96:	4798      	blx	r3
   17e98:	0004      	movs	r4, r0
   17e9a:	4a0a      	ldr	r2, [pc, #40]	; (17ec4 <MQTT_HandleTestMessages+0x5c>)
   17e9c:	490c      	ldr	r1, [pc, #48]	; (17ed0 <MQTT_HandleTestMessages+0x68>)
   17e9e:	480d      	ldr	r0, [pc, #52]	; (17ed4 <MQTT_HandleTestMessages+0x6c>)
   17ea0:	2300      	movs	r3, #0
   17ea2:	9301      	str	r3, [sp, #4]
   17ea4:	2301      	movs	r3, #1
   17ea6:	9300      	str	r3, [sp, #0]
   17ea8:	0023      	movs	r3, r4
   17eaa:	4c0b      	ldr	r4, [pc, #44]	; (17ed8 <MQTT_HandleTestMessages+0x70>)
   17eac:	47a0      	blx	r4
	}
}
   17eae:	46c0      	nop			; (mov r8, r8)
   17eb0:	46bd      	mov	sp, r7
   17eb2:	b003      	add	sp, #12
   17eb4:	bd90      	pop	{r4, r7, pc}
   17eb6:	46c0      	nop			; (mov r8, r8)
   17eb8:	20000634 	.word	0x20000634
   17ebc:	0001bed5 	.word	0x0001bed5
   17ec0:	00038a70 	.word	0x00038a70
   17ec4:	20000030 	.word	0x20000030
   17ec8:	00036699 	.word	0x00036699
   17ecc:	000367f7 	.word	0x000367f7
   17ed0:	00038a80 	.word	0x00038a80
   17ed4:	2000089c 	.word	0x2000089c
   17ed8:	00030a55 	.word	0x00030a55

00017edc <MQTT_HandleNauMessages>:

static void MQTT_HandleNauMessages(void)
{
   17edc:	b590      	push	{r4, r7, lr}
   17ede:	b085      	sub	sp, #20
   17ee0:	af02      	add	r7, sp, #8
	struct NauPacket NauDataVar;
	if (pdPASS == xQueueReceive(xQueueNauBuffer, &NauDataVar, 0)) {
   17ee2:	4b14      	ldr	r3, [pc, #80]	; (17f34 <MQTT_HandleNauMessages+0x58>)
   17ee4:	681b      	ldr	r3, [r3, #0]
   17ee6:	0039      	movs	r1, r7
   17ee8:	2200      	movs	r2, #0
   17eea:	0018      	movs	r0, r3
   17eec:	4b12      	ldr	r3, [pc, #72]	; (17f38 <MQTT_HandleNauMessages+0x5c>)
   17eee:	4798      	blx	r3
   17ef0:	0003      	movs	r3, r0
   17ef2:	2b01      	cmp	r3, #1
   17ef4:	d119      	bne.n	17f2a <MQTT_HandleNauMessages+0x4e>
		snprintf(mqtt_msg, 63, "{\"nau_i\":%d,  \"nau_f\": %d}", NauDataVar.nau_i, NauDataVar.nau_f);
   17ef6:	003b      	movs	r3, r7
   17ef8:	6819      	ldr	r1, [r3, #0]
   17efa:	003b      	movs	r3, r7
   17efc:	685b      	ldr	r3, [r3, #4]
   17efe:	4a0f      	ldr	r2, [pc, #60]	; (17f3c <MQTT_HandleNauMessages+0x60>)
   17f00:	480f      	ldr	r0, [pc, #60]	; (17f40 <MQTT_HandleNauMessages+0x64>)
   17f02:	9300      	str	r3, [sp, #0]
   17f04:	000b      	movs	r3, r1
   17f06:	213f      	movs	r1, #63	; 0x3f
   17f08:	4c0e      	ldr	r4, [pc, #56]	; (17f44 <MQTT_HandleNauMessages+0x68>)
   17f0a:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, NAU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   17f0c:	4b0c      	ldr	r3, [pc, #48]	; (17f40 <MQTT_HandleNauMessages+0x64>)
   17f0e:	0018      	movs	r0, r3
   17f10:	4b0d      	ldr	r3, [pc, #52]	; (17f48 <MQTT_HandleNauMessages+0x6c>)
   17f12:	4798      	blx	r3
   17f14:	0004      	movs	r4, r0
   17f16:	4a0a      	ldr	r2, [pc, #40]	; (17f40 <MQTT_HandleNauMessages+0x64>)
   17f18:	490c      	ldr	r1, [pc, #48]	; (17f4c <MQTT_HandleNauMessages+0x70>)
   17f1a:	480d      	ldr	r0, [pc, #52]	; (17f50 <MQTT_HandleNauMessages+0x74>)
   17f1c:	2300      	movs	r3, #0
   17f1e:	9301      	str	r3, [sp, #4]
   17f20:	2301      	movs	r3, #1
   17f22:	9300      	str	r3, [sp, #0]
   17f24:	0023      	movs	r3, r4
   17f26:	4c0b      	ldr	r4, [pc, #44]	; (17f54 <MQTT_HandleNauMessages+0x78>)
   17f28:	47a0      	blx	r4
	}
}
   17f2a:	46c0      	nop			; (mov r8, r8)
   17f2c:	46bd      	mov	sp, r7
   17f2e:	b003      	add	sp, #12
   17f30:	bd90      	pop	{r4, r7, pc}
   17f32:	46c0      	nop			; (mov r8, r8)
   17f34:	20000638 	.word	0x20000638
   17f38:	0001bed5 	.word	0x0001bed5
   17f3c:	00038a94 	.word	0x00038a94
   17f40:	20000030 	.word	0x20000030
   17f44:	00036699 	.word	0x00036699
   17f48:	000367f7 	.word	0x000367f7
   17f4c:	00038ab0 	.word	0x00038ab0
   17f50:	2000089c 	.word	0x2000089c
   17f54:	00030a55 	.word	0x00030a55

00017f58 <MQTT_HandleGameMessages>:

static void MQTT_HandleGameMessages(void)
{
   17f58:	b590      	push	{r4, r7, lr}
   17f5a:	b08b      	sub	sp, #44	; 0x2c
   17f5c:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
   17f5e:	4b39      	ldr	r3, [pc, #228]	; (18044 <MQTT_HandleGameMessages+0xec>)
   17f60:	681b      	ldr	r3, [r3, #0]
   17f62:	2208      	movs	r2, #8
   17f64:	18b9      	adds	r1, r7, r2
   17f66:	2200      	movs	r2, #0
   17f68:	0018      	movs	r0, r3
   17f6a:	4b37      	ldr	r3, [pc, #220]	; (18048 <MQTT_HandleGameMessages+0xf0>)
   17f6c:	4798      	blx	r3
   17f6e:	0003      	movs	r3, r0
   17f70:	2b01      	cmp	r3, #1
   17f72:	d163      	bne.n	1803c <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
   17f74:	4b35      	ldr	r3, [pc, #212]	; (1804c <MQTT_HandleGameMessages+0xf4>)
   17f76:	4a36      	ldr	r2, [pc, #216]	; (18050 <MQTT_HandleGameMessages+0xf8>)
   17f78:	ca03      	ldmia	r2!, {r0, r1}
   17f7a:	c303      	stmia	r3!, {r0, r1}
   17f7c:	8812      	ldrh	r2, [r2, #0]
   17f7e:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   17f80:	2300      	movs	r3, #0
   17f82:	61fb      	str	r3, [r7, #28]
   17f84:	e02d      	b.n	17fe2 <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
   17f86:	2308      	movs	r3, #8
   17f88:	18fa      	adds	r2, r7, r3
   17f8a:	69fb      	ldr	r3, [r7, #28]
   17f8c:	18d3      	adds	r3, r2, r3
   17f8e:	781b      	ldrb	r3, [r3, #0]
   17f90:	2bff      	cmp	r3, #255	; 0xff
   17f92:	d02a      	beq.n	17fea <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   17f94:	2308      	movs	r3, #8
   17f96:	18fa      	adds	r2, r7, r3
   17f98:	69fb      	ldr	r3, [r7, #28]
   17f9a:	18d3      	adds	r3, r2, r3
   17f9c:	781b      	ldrb	r3, [r3, #0]
   17f9e:	4a2d      	ldr	r2, [pc, #180]	; (18054 <MQTT_HandleGameMessages+0xfc>)
   17fa0:	0038      	movs	r0, r7
   17fa2:	2103      	movs	r1, #3
   17fa4:	4c2c      	ldr	r4, [pc, #176]	; (18058 <MQTT_HandleGameMessages+0x100>)
   17fa6:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
   17fa8:	003a      	movs	r2, r7
   17faa:	4b28      	ldr	r3, [pc, #160]	; (1804c <MQTT_HandleGameMessages+0xf4>)
   17fac:	0011      	movs	r1, r2
   17fae:	0018      	movs	r0, r3
   17fb0:	4b2a      	ldr	r3, [pc, #168]	; (1805c <MQTT_HandleGameMessages+0x104>)
   17fb2:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
   17fb4:	69fb      	ldr	r3, [r7, #28]
   17fb6:	3301      	adds	r3, #1
   17fb8:	2208      	movs	r2, #8
   17fba:	18ba      	adds	r2, r7, r2
   17fbc:	5cd3      	ldrb	r3, [r2, r3]
   17fbe:	2bff      	cmp	r3, #255	; 0xff
   17fc0:	d00c      	beq.n	17fdc <MQTT_HandleGameMessages+0x84>
   17fc2:	69fb      	ldr	r3, [r7, #28]
   17fc4:	3301      	adds	r3, #1
   17fc6:	2b13      	cmp	r3, #19
   17fc8:	dc08      	bgt.n	17fdc <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
   17fca:	003b      	movs	r3, r7
   17fcc:	222c      	movs	r2, #44	; 0x2c
   17fce:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
   17fd0:	003a      	movs	r2, r7
   17fd2:	4b1e      	ldr	r3, [pc, #120]	; (1804c <MQTT_HandleGameMessages+0xf4>)
   17fd4:	0011      	movs	r1, r2
   17fd6:	0018      	movs	r0, r3
   17fd8:	4b20      	ldr	r3, [pc, #128]	; (1805c <MQTT_HandleGameMessages+0x104>)
   17fda:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   17fdc:	69fb      	ldr	r3, [r7, #28]
   17fde:	3301      	adds	r3, #1
   17fe0:	61fb      	str	r3, [r7, #28]
   17fe2:	69fb      	ldr	r3, [r7, #28]
   17fe4:	2b13      	cmp	r3, #19
   17fe6:	ddce      	ble.n	17f86 <MQTT_HandleGameMessages+0x2e>
   17fe8:	e000      	b.n	17fec <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
   17fea:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
   17fec:	4b17      	ldr	r3, [pc, #92]	; (1804c <MQTT_HandleGameMessages+0xf4>)
   17fee:	0018      	movs	r0, r3
   17ff0:	4b1b      	ldr	r3, [pc, #108]	; (18060 <MQTT_HandleGameMessages+0x108>)
   17ff2:	4798      	blx	r3
   17ff4:	0003      	movs	r3, r0
   17ff6:	001a      	movs	r2, r3
   17ff8:	4b14      	ldr	r3, [pc, #80]	; (1804c <MQTT_HandleGameMessages+0xf4>)
   17ffa:	18d2      	adds	r2, r2, r3
   17ffc:	4b19      	ldr	r3, [pc, #100]	; (18064 <MQTT_HandleGameMessages+0x10c>)
   17ffe:	0010      	movs	r0, r2
   18000:	0019      	movs	r1, r3
   18002:	2303      	movs	r3, #3
   18004:	001a      	movs	r2, r3
   18006:	4b18      	ldr	r3, [pc, #96]	; (18068 <MQTT_HandleGameMessages+0x110>)
   18008:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
   1800a:	4b10      	ldr	r3, [pc, #64]	; (1804c <MQTT_HandleGameMessages+0xf4>)
   1800c:	0019      	movs	r1, r3
   1800e:	2001      	movs	r0, #1
   18010:	4b16      	ldr	r3, [pc, #88]	; (1806c <MQTT_HandleGameMessages+0x114>)
   18012:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
   18014:	4b16      	ldr	r3, [pc, #88]	; (18070 <MQTT_HandleGameMessages+0x118>)
   18016:	0019      	movs	r1, r3
   18018:	2001      	movs	r0, #1
   1801a:	4b14      	ldr	r3, [pc, #80]	; (1806c <MQTT_HandleGameMessages+0x114>)
   1801c:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   1801e:	4b0b      	ldr	r3, [pc, #44]	; (1804c <MQTT_HandleGameMessages+0xf4>)
   18020:	0018      	movs	r0, r3
   18022:	4b0f      	ldr	r3, [pc, #60]	; (18060 <MQTT_HandleGameMessages+0x108>)
   18024:	4798      	blx	r3
   18026:	0004      	movs	r4, r0
   18028:	4a08      	ldr	r2, [pc, #32]	; (1804c <MQTT_HandleGameMessages+0xf4>)
   1802a:	4912      	ldr	r1, [pc, #72]	; (18074 <MQTT_HandleGameMessages+0x11c>)
   1802c:	4812      	ldr	r0, [pc, #72]	; (18078 <MQTT_HandleGameMessages+0x120>)
   1802e:	2300      	movs	r3, #0
   18030:	9301      	str	r3, [sp, #4]
   18032:	2301      	movs	r3, #1
   18034:	9300      	str	r3, [sp, #0]
   18036:	0023      	movs	r3, r4
   18038:	4c10      	ldr	r4, [pc, #64]	; (1807c <MQTT_HandleGameMessages+0x124>)
   1803a:	47a0      	blx	r4
    }
}
   1803c:	46c0      	nop			; (mov r8, r8)
   1803e:	46bd      	mov	sp, r7
   18040:	b009      	add	sp, #36	; 0x24
   18042:	bd90      	pop	{r4, r7, pc}
   18044:	20000628 	.word	0x20000628
   18048:	0001bed5 	.word	0x0001bed5
   1804c:	20000030 	.word	0x20000030
   18050:	0003878c 	.word	0x0003878c
   18054:	00038ac4 	.word	0x00038ac4
   18058:	00036699 	.word	0x00036699
   1805c:	0003677d 	.word	0x0003677d
   18060:	000367f7 	.word	0x000367f7
   18064:	00038ac8 	.word	0x00038ac8
   18068:	00036409 	.word	0x00036409
   1806c:	0001edc1 	.word	0x0001edc1
   18070:	00038acc 	.word	0x00038acc
   18074:	00038ad0 	.word	0x00038ad0
   18078:	2000089c 	.word	0x2000089c
   1807c:	00030a55 	.word	0x00030a55

00018080 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   18080:	b590      	push	{r4, r7, lr}
   18082:	b08d      	sub	sp, #52	; 0x34
   18084:	af02      	add	r7, sp, #8
   18086:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   18088:	2064      	movs	r0, #100	; 0x64
   1808a:	4b85      	ldr	r3, [pc, #532]	; (182a0 <vWifiTask+0x220>)
   1808c:	4798      	blx	r3
    init_state();
   1808e:	4b85      	ldr	r3, [pc, #532]	; (182a4 <vWifiTask+0x224>)
   18090:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   18092:	2200      	movs	r2, #0
   18094:	2104      	movs	r1, #4
   18096:	2005      	movs	r0, #5
   18098:	4b83      	ldr	r3, [pc, #524]	; (182a8 <vWifiTask+0x228>)
   1809a:	4798      	blx	r3
   1809c:	0002      	movs	r2, r0
   1809e:	4b83      	ldr	r3, [pc, #524]	; (182ac <vWifiTask+0x22c>)
   180a0:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
   180a2:	2200      	movs	r2, #0
   180a4:	2106      	movs	r1, #6
   180a6:	2005      	movs	r0, #5
   180a8:	4b7f      	ldr	r3, [pc, #508]	; (182a8 <vWifiTask+0x228>)
   180aa:	4798      	blx	r3
   180ac:	0002      	movs	r2, r0
   180ae:	4b80      	ldr	r3, [pc, #512]	; (182b0 <vWifiTask+0x230>)
   180b0:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
   180b2:	2200      	movs	r2, #0
   180b4:	2114      	movs	r1, #20
   180b6:	2002      	movs	r0, #2
   180b8:	4b7b      	ldr	r3, [pc, #492]	; (182a8 <vWifiTask+0x228>)
   180ba:	4798      	blx	r3
   180bc:	0002      	movs	r2, r0
   180be:	4b7d      	ldr	r3, [pc, #500]	; (182b4 <vWifiTask+0x234>)
   180c0:	601a      	str	r2, [r3, #0]
	xQueueTestBuffer = xQueueCreate(5, sizeof(struct TestPacket));
   180c2:	2200      	movs	r2, #0
   180c4:	2101      	movs	r1, #1
   180c6:	2005      	movs	r0, #5
   180c8:	4b77      	ldr	r3, [pc, #476]	; (182a8 <vWifiTask+0x228>)
   180ca:	4798      	blx	r3
   180cc:	0002      	movs	r2, r0
   180ce:	4b7a      	ldr	r3, [pc, #488]	; (182b8 <vWifiTask+0x238>)
   180d0:	601a      	str	r2, [r3, #0]
	xQueueNauBuffer = xQueueCreate(5, sizeof(struct NauPacket));
   180d2:	2200      	movs	r2, #0
   180d4:	2108      	movs	r1, #8
   180d6:	2005      	movs	r0, #5
   180d8:	4b73      	ldr	r3, [pc, #460]	; (182a8 <vWifiTask+0x228>)
   180da:	4798      	blx	r3
   180dc:	0002      	movs	r2, r0
   180de:	4b77      	ldr	r3, [pc, #476]	; (182bc <vWifiTask+0x23c>)
   180e0:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
   180e2:	2200      	movs	r2, #0
   180e4:	2102      	movs	r1, #2
   180e6:	2005      	movs	r0, #5
   180e8:	4b6f      	ldr	r3, [pc, #444]	; (182a8 <vWifiTask+0x228>)
   180ea:	4798      	blx	r3
   180ec:	0002      	movs	r2, r0
   180ee:	4b74      	ldr	r3, [pc, #464]	; (182c0 <vWifiTask+0x240>)
   180f0:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL || xQueueTestBuffer == NULL || xQueueNauBuffer) {
   180f2:	4b6e      	ldr	r3, [pc, #440]	; (182ac <vWifiTask+0x22c>)
   180f4:	681b      	ldr	r3, [r3, #0]
   180f6:	2b00      	cmp	r3, #0
   180f8:	d013      	beq.n	18122 <vWifiTask+0xa2>
   180fa:	4b6d      	ldr	r3, [pc, #436]	; (182b0 <vWifiTask+0x230>)
   180fc:	681b      	ldr	r3, [r3, #0]
   180fe:	2b00      	cmp	r3, #0
   18100:	d00f      	beq.n	18122 <vWifiTask+0xa2>
   18102:	4b6c      	ldr	r3, [pc, #432]	; (182b4 <vWifiTask+0x234>)
   18104:	681b      	ldr	r3, [r3, #0]
   18106:	2b00      	cmp	r3, #0
   18108:	d00b      	beq.n	18122 <vWifiTask+0xa2>
   1810a:	4b6d      	ldr	r3, [pc, #436]	; (182c0 <vWifiTask+0x240>)
   1810c:	681b      	ldr	r3, [r3, #0]
   1810e:	2b00      	cmp	r3, #0
   18110:	d007      	beq.n	18122 <vWifiTask+0xa2>
   18112:	4b69      	ldr	r3, [pc, #420]	; (182b8 <vWifiTask+0x238>)
   18114:	681b      	ldr	r3, [r3, #0]
   18116:	2b00      	cmp	r3, #0
   18118:	d003      	beq.n	18122 <vWifiTask+0xa2>
   1811a:	4b68      	ldr	r3, [pc, #416]	; (182bc <vWifiTask+0x23c>)
   1811c:	681b      	ldr	r3, [r3, #0]
   1811e:	2b00      	cmp	r3, #0
   18120:	d003      	beq.n	1812a <vWifiTask+0xaa>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   18122:	4b68      	ldr	r3, [pc, #416]	; (182c4 <vWifiTask+0x244>)
   18124:	0018      	movs	r0, r3
   18126:	4b68      	ldr	r3, [pc, #416]	; (182c8 <vWifiTask+0x248>)
   18128:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   1812a:	4b68      	ldr	r3, [pc, #416]	; (182cc <vWifiTask+0x24c>)
   1812c:	0018      	movs	r0, r3
   1812e:	4b66      	ldr	r3, [pc, #408]	; (182c8 <vWifiTask+0x248>)
   18130:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   18132:	4b67      	ldr	r3, [pc, #412]	; (182d0 <vWifiTask+0x250>)
   18134:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   18136:	4b67      	ldr	r3, [pc, #412]	; (182d4 <vWifiTask+0x254>)
   18138:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   1813a:	4b67      	ldr	r3, [pc, #412]	; (182d8 <vWifiTask+0x258>)
   1813c:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
   1813e:	4b67      	ldr	r3, [pc, #412]	; (182dc <vWifiTask+0x25c>)
   18140:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   18142:	4b67      	ldr	r3, [pc, #412]	; (182e0 <vWifiTask+0x260>)
   18144:	4798      	blx	r3
    configure_extint_callbacks();
   18146:	4b67      	ldr	r3, [pc, #412]	; (182e4 <vWifiTask+0x264>)
   18148:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   1814a:	230c      	movs	r3, #12
   1814c:	18fb      	adds	r3, r7, r3
   1814e:	2218      	movs	r2, #24
   18150:	2100      	movs	r1, #0
   18152:	0018      	movs	r0, r3
   18154:	4b64      	ldr	r3, [pc, #400]	; (182e8 <vWifiTask+0x268>)
   18156:	4798      	blx	r3

    nm_bsp_init();
   18158:	4b64      	ldr	r3, [pc, #400]	; (182ec <vWifiTask+0x26c>)
   1815a:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   1815c:	230c      	movs	r3, #12
   1815e:	18fb      	adds	r3, r7, r3
   18160:	4a63      	ldr	r2, [pc, #396]	; (182f0 <vWifiTask+0x270>)
   18162:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   18164:	2327      	movs	r3, #39	; 0x27
   18166:	18fc      	adds	r4, r7, r3
   18168:	230c      	movs	r3, #12
   1816a:	18fb      	adds	r3, r7, r3
   1816c:	0018      	movs	r0, r3
   1816e:	4b61      	ldr	r3, [pc, #388]	; (182f4 <vWifiTask+0x274>)
   18170:	4798      	blx	r3
   18172:	0003      	movs	r3, r0
   18174:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   18176:	2327      	movs	r3, #39	; 0x27
   18178:	18fb      	adds	r3, r7, r3
   1817a:	781b      	ldrb	r3, [r3, #0]
   1817c:	b25b      	sxtb	r3, r3
   1817e:	2b00      	cmp	r3, #0
   18180:	d009      	beq.n	18196 <vWifiTask+0x116>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   18182:	2327      	movs	r3, #39	; 0x27
   18184:	18fb      	adds	r3, r7, r3
   18186:	2200      	movs	r2, #0
   18188:	569a      	ldrsb	r2, [r3, r2]
   1818a:	4b5b      	ldr	r3, [pc, #364]	; (182f8 <vWifiTask+0x278>)
   1818c:	0019      	movs	r1, r3
   1818e:	2001      	movs	r0, #1
   18190:	4b5a      	ldr	r3, [pc, #360]	; (182fc <vWifiTask+0x27c>)
   18192:	4798      	blx	r3
        while (1) {
   18194:	e7fe      	b.n	18194 <vWifiTask+0x114>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   18196:	4a5a      	ldr	r2, [pc, #360]	; (18300 <vWifiTask+0x280>)
   18198:	4b5a      	ldr	r3, [pc, #360]	; (18304 <vWifiTask+0x284>)
   1819a:	0019      	movs	r1, r3
   1819c:	2001      	movs	r0, #1
   1819e:	4b57      	ldr	r3, [pc, #348]	; (182fc <vWifiTask+0x27c>)
   181a0:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   181a2:	4b59      	ldr	r3, [pc, #356]	; (18308 <vWifiTask+0x288>)
   181a4:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   181a6:	4a59      	ldr	r2, [pc, #356]	; (1830c <vWifiTask+0x28c>)
   181a8:	4b59      	ldr	r3, [pc, #356]	; (18310 <vWifiTask+0x290>)
   181aa:	0011      	movs	r1, r2
   181ac:	0018      	movs	r0, r3
   181ae:	4b59      	ldr	r3, [pc, #356]	; (18314 <vWifiTask+0x294>)
   181b0:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   181b2:	4a59      	ldr	r2, [pc, #356]	; (18318 <vWifiTask+0x298>)
   181b4:	4852      	ldr	r0, [pc, #328]	; (18300 <vWifiTask+0x280>)
   181b6:	23ff      	movs	r3, #255	; 0xff
   181b8:	9300      	str	r3, [sp, #0]
   181ba:	0013      	movs	r3, r2
   181bc:	2202      	movs	r2, #2
   181be:	2102      	movs	r1, #2
   181c0:	4c56      	ldr	r4, [pc, #344]	; (1831c <vWifiTask+0x29c>)
   181c2:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   181c4:	e006      	b.n	181d4 <vWifiTask+0x154>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   181c6:	2000      	movs	r0, #0
   181c8:	4b55      	ldr	r3, [pc, #340]	; (18320 <vWifiTask+0x2a0>)
   181ca:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   181cc:	4b55      	ldr	r3, [pc, #340]	; (18324 <vWifiTask+0x2a4>)
   181ce:	0018      	movs	r0, r3
   181d0:	4b55      	ldr	r3, [pc, #340]	; (18328 <vWifiTask+0x2a8>)
   181d2:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   181d4:	2002      	movs	r0, #2
   181d6:	4b55      	ldr	r3, [pc, #340]	; (1832c <vWifiTask+0x2ac>)
   181d8:	4798      	blx	r3
   181da:	0003      	movs	r3, r0
   181dc:	001a      	movs	r2, r3
   181de:	2301      	movs	r3, #1
   181e0:	4053      	eors	r3, r2
   181e2:	b2db      	uxtb	r3, r3
   181e4:	2b00      	cmp	r3, #0
   181e6:	d1ee      	bne.n	181c6 <vWifiTask+0x146>
    }

    vTaskDelay(1000);
   181e8:	23fa      	movs	r3, #250	; 0xfa
   181ea:	009b      	lsls	r3, r3, #2
   181ec:	0018      	movs	r0, r3
   181ee:	4b2c      	ldr	r3, [pc, #176]	; (182a0 <vWifiTask+0x220>)
   181f0:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   181f2:	4b4f      	ldr	r3, [pc, #316]	; (18330 <vWifiTask+0x2b0>)
   181f4:	2201      	movs	r2, #1
   181f6:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
   181f8:	4b4d      	ldr	r3, [pc, #308]	; (18330 <vWifiTask+0x2b0>)
   181fa:	781b      	ldrb	r3, [r3, #0]
   181fc:	b25b      	sxtb	r3, r3
   181fe:	2b01      	cmp	r3, #1
   18200:	d00b      	beq.n	1821a <vWifiTask+0x19a>
   18202:	dc02      	bgt.n	1820a <vWifiTask+0x18a>
   18204:	2b00      	cmp	r3, #0
   18206:	d005      	beq.n	18214 <vWifiTask+0x194>
   18208:	e010      	b.n	1822c <vWifiTask+0x1ac>
   1820a:	2b02      	cmp	r3, #2
   1820c:	d008      	beq.n	18220 <vWifiTask+0x1a0>
   1820e:	2b03      	cmp	r3, #3
   18210:	d009      	beq.n	18226 <vWifiTask+0x1a6>
   18212:	e00b      	b.n	1822c <vWifiTask+0x1ac>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   18214:	4b47      	ldr	r3, [pc, #284]	; (18334 <vWifiTask+0x2b4>)
   18216:	4798      	blx	r3

                break;
   18218:	e00c      	b.n	18234 <vWifiTask+0x1b4>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   1821a:	4b47      	ldr	r3, [pc, #284]	; (18338 <vWifiTask+0x2b8>)
   1821c:	4798      	blx	r3
                break;
   1821e:	e009      	b.n	18234 <vWifiTask+0x1b4>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   18220:	4b46      	ldr	r3, [pc, #280]	; (1833c <vWifiTask+0x2bc>)
   18222:	4798      	blx	r3
                break;
   18224:	e006      	b.n	18234 <vWifiTask+0x1b4>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   18226:	4b46      	ldr	r3, [pc, #280]	; (18340 <vWifiTask+0x2c0>)
   18228:	4798      	blx	r3
                break;
   1822a:	e003      	b.n	18234 <vWifiTask+0x1b4>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   1822c:	4b40      	ldr	r3, [pc, #256]	; (18330 <vWifiTask+0x2b0>)
   1822e:	2200      	movs	r2, #0
   18230:	701a      	strb	r2, [r3, #0]
                break;
   18232:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   18234:	230b      	movs	r3, #11
   18236:	18fb      	adds	r3, r7, r3
   18238:	2200      	movs	r2, #0
   1823a:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   1823c:	4b1b      	ldr	r3, [pc, #108]	; (182ac <vWifiTask+0x22c>)
   1823e:	681b      	ldr	r3, [r3, #0]
   18240:	220b      	movs	r2, #11
   18242:	18b9      	adds	r1, r7, r2
   18244:	2200      	movs	r2, #0
   18246:	0018      	movs	r0, r3
   18248:	4b3e      	ldr	r3, [pc, #248]	; (18344 <vWifiTask+0x2c4>)
   1824a:	4798      	blx	r3
   1824c:	0003      	movs	r3, r0
   1824e:	2b01      	cmp	r3, #1
   18250:	d105      	bne.n	1825e <vWifiTask+0x1de>
            wifiStateMachine = DataToReceive;  // Update new state
   18252:	230b      	movs	r3, #11
   18254:	18fb      	adds	r3, r7, r3
   18256:	781b      	ldrb	r3, [r3, #0]
   18258:	b25a      	sxtb	r2, r3
   1825a:	4b35      	ldr	r3, [pc, #212]	; (18330 <vWifiTask+0x2b0>)
   1825c:	701a      	strb	r2, [r3, #0]
        }

        //Check if we need to publis something. In this example, we publish the "temperature" when the button was pressed.
        if(isPressed)
   1825e:	4b3a      	ldr	r3, [pc, #232]	; (18348 <vWifiTask+0x2c8>)
   18260:	781b      	ldrb	r3, [r3, #0]
   18262:	b2db      	uxtb	r3, r3
   18264:	2b00      	cmp	r3, #0
   18266:	d017      	beq.n	18298 <vWifiTask+0x218>
        {
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
   18268:	4b38      	ldr	r3, [pc, #224]	; (1834c <vWifiTask+0x2cc>)
   1826a:	0018      	movs	r0, r3
   1826c:	4b38      	ldr	r3, [pc, #224]	; (18350 <vWifiTask+0x2d0>)
   1826e:	4798      	blx	r3
   18270:	0004      	movs	r4, r0
   18272:	4a36      	ldr	r2, [pc, #216]	; (1834c <vWifiTask+0x2cc>)
   18274:	4937      	ldr	r1, [pc, #220]	; (18354 <vWifiTask+0x2d4>)
   18276:	4838      	ldr	r0, [pc, #224]	; (18358 <vWifiTask+0x2d8>)
   18278:	2300      	movs	r3, #0
   1827a:	9301      	str	r3, [sp, #4]
   1827c:	2301      	movs	r3, #1
   1827e:	9300      	str	r3, [sp, #0]
   18280:	0023      	movs	r3, r4
   18282:	4c36      	ldr	r4, [pc, #216]	; (1835c <vWifiTask+0x2dc>)
   18284:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
   18286:	4a31      	ldr	r2, [pc, #196]	; (1834c <vWifiTask+0x2cc>)
   18288:	4b35      	ldr	r3, [pc, #212]	; (18360 <vWifiTask+0x2e0>)
   1828a:	0019      	movs	r1, r3
   1828c:	2001      	movs	r0, #1
   1828e:	4b1b      	ldr	r3, [pc, #108]	; (182fc <vWifiTask+0x27c>)
   18290:	4798      	blx	r3
            isPressed = false;
   18292:	4b2d      	ldr	r3, [pc, #180]	; (18348 <vWifiTask+0x2c8>)
   18294:	2200      	movs	r2, #0
   18296:	701a      	strb	r2, [r3, #0]

        }

        vTaskDelay(100);
   18298:	2064      	movs	r0, #100	; 0x64
   1829a:	4b01      	ldr	r3, [pc, #4]	; (182a0 <vWifiTask+0x220>)
   1829c:	4798      	blx	r3
    while (1) {
   1829e:	e7ab      	b.n	181f8 <vWifiTask+0x178>
   182a0:	0001d081 	.word	0x0001d081
   182a4:	00016a39 	.word	0x00016a39
   182a8:	0001b375 	.word	0x0001b375
   182ac:	20000624 	.word	0x20000624
   182b0:	2000062c 	.word	0x2000062c
   182b4:	20000628 	.word	0x20000628
   182b8:	20000634 	.word	0x20000634
   182bc:	20000638 	.word	0x20000638
   182c0:	20000630 	.word	0x20000630
   182c4:	00038ae4 	.word	0x00038ae4
   182c8:	0001ecd5 	.word	0x0001ecd5
   182cc:	00038b0c 	.word	0x00038b0c
   182d0:	00017475 	.word	0x00017475
   182d4:	000174b1 	.word	0x000174b1
   182d8:	000179cd 	.word	0x000179cd
   182dc:	00017391 	.word	0x00017391
   182e0:	00017a85 	.word	0x00017a85
   182e4:	00017ac5 	.word	0x00017ac5
   182e8:	0003643f 	.word	0x0003643f
   182ec:	00021249 	.word	0x00021249
   182f0:	0001723d 	.word	0x0001723d
   182f4:	00022d21 	.word	0x00022d21
   182f8:	00038b28 	.word	0x00038b28
   182fc:	0001edc1 	.word	0x0001edc1
   18300:	000385c4 	.word	0x000385c4
   18304:	00038b54 	.word	0x00038b54
   18308:	00026481 	.word	0x00026481
   1830c:	00017559 	.word	0x00017559
   18310:	00017525 	.word	0x00017525
   18314:	00026519 	.word	0x00026519
   18318:	000385b8 	.word	0x000385b8
   1831c:	00022f31 	.word	0x00022f31
   18320:	00022f15 	.word	0x00022f15
   18324:	20004944 	.word	0x20004944
   18328:	00033735 	.word	0x00033735
   1832c:	00016aa9 	.word	0x00016aa9
   18330:	20000623 	.word	0x20000623
   18334:	00017ce1 	.word	0x00017ce1
   18338:	00017d7d 	.word	0x00017d7d
   1833c:	00017b3d 	.word	0x00017b3d
   18340:	00017bd1 	.word	0x00017bd1
   18344:	0001bed5 	.word	0x0001bed5
   18348:	20000cd4 	.word	0x20000cd4
   1834c:	20000070 	.word	0x20000070
   18350:	000367f7 	.word	0x000367f7
   18354:	00038b78 	.word	0x00038b78
   18358:	2000089c 	.word	0x2000089c
   1835c:	00030a55 	.word	0x00030a55
   18360:	00038b94 	.word	0x00038b94

00018364 <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   18364:	b590      	push	{r4, r7, lr}
   18366:	b083      	sub	sp, #12
   18368:	af00      	add	r7, sp, #0
   1836a:	0002      	movs	r2, r0
   1836c:	1dfb      	adds	r3, r7, #7
   1836e:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   18370:	1dfb      	adds	r3, r7, #7
   18372:	781b      	ldrb	r3, [r3, #0]
   18374:	2b03      	cmp	r3, #3
   18376:	d806      	bhi.n	18386 <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   18378:	4b05      	ldr	r3, [pc, #20]	; (18390 <WifiHandlerSetState+0x2c>)
   1837a:	6818      	ldr	r0, [r3, #0]
   1837c:	1df9      	adds	r1, r7, #7
   1837e:	2300      	movs	r3, #0
   18380:	220a      	movs	r2, #10
   18382:	4c04      	ldr	r4, [pc, #16]	; (18394 <WifiHandlerSetState+0x30>)
   18384:	47a0      	blx	r4
    }
}
   18386:	46c0      	nop			; (mov r8, r8)
   18388:	46bd      	mov	sp, r7
   1838a:	b003      	add	sp, #12
   1838c:	bd90      	pop	{r4, r7, pc}
   1838e:	46c0      	nop			; (mov r8, r8)
   18390:	20000624 	.word	0x20000624
   18394:	0001b61d 	.word	0x0001b61d

00018398 <WifiAddDistanceDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddDistanceDataToQueue(uint16_t *distance)
{
   18398:	b590      	push	{r4, r7, lr}
   1839a:	b085      	sub	sp, #20
   1839c:	af00      	add	r7, sp, #0
   1839e:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueDistanceBuffer, distance, (TickType_t)10);
   183a0:	4b06      	ldr	r3, [pc, #24]	; (183bc <WifiAddDistanceDataToQueue+0x24>)
   183a2:	6818      	ldr	r0, [r3, #0]
   183a4:	6879      	ldr	r1, [r7, #4]
   183a6:	2300      	movs	r3, #0
   183a8:	220a      	movs	r2, #10
   183aa:	4c05      	ldr	r4, [pc, #20]	; (183c0 <WifiAddDistanceDataToQueue+0x28>)
   183ac:	47a0      	blx	r4
   183ae:	0003      	movs	r3, r0
   183b0:	60fb      	str	r3, [r7, #12]
    return error;
   183b2:	68fb      	ldr	r3, [r7, #12]
}
   183b4:	0018      	movs	r0, r3
   183b6:	46bd      	mov	sp, r7
   183b8:	b005      	add	sp, #20
   183ba:	bd90      	pop	{r4, r7, pc}
   183bc:	20000630 	.word	0x20000630
   183c0:	0001b61d 	.word	0x0001b61d

000183c4 <WifiAddGameDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddGameDataToQueue(struct GameDataPacket *game)
{
   183c4:	b590      	push	{r4, r7, lr}
   183c6:	b085      	sub	sp, #20
   183c8:	af00      	add	r7, sp, #0
   183ca:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBuffer, game, (TickType_t)10);
   183cc:	4b06      	ldr	r3, [pc, #24]	; (183e8 <WifiAddGameDataToQueue+0x24>)
   183ce:	6818      	ldr	r0, [r3, #0]
   183d0:	6879      	ldr	r1, [r7, #4]
   183d2:	2300      	movs	r3, #0
   183d4:	220a      	movs	r2, #10
   183d6:	4c05      	ldr	r4, [pc, #20]	; (183ec <WifiAddGameDataToQueue+0x28>)
   183d8:	47a0      	blx	r4
   183da:	0003      	movs	r3, r0
   183dc:	60fb      	str	r3, [r7, #12]
    return error;
   183de:	68fb      	ldr	r3, [r7, #12]
}
   183e0:	0018      	movs	r0, r3
   183e2:	46bd      	mov	sp, r7
   183e4:	b005      	add	sp, #20
   183e6:	bd90      	pop	{r4, r7, pc}
   183e8:	20000628 	.word	0x20000628
   183ec:	0001b61d 	.word	0x0001b61d

000183f0 <WifiAddTestDataToQueue>:

int WifiAddTestDataToQueue(struct TestPacket *test)
{
   183f0:	b590      	push	{r4, r7, lr}
   183f2:	b085      	sub	sp, #20
   183f4:	af00      	add	r7, sp, #0
   183f6:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueTestBuffer, test, (TickType_t)10);
   183f8:	4b06      	ldr	r3, [pc, #24]	; (18414 <WifiAddTestDataToQueue+0x24>)
   183fa:	6818      	ldr	r0, [r3, #0]
   183fc:	6879      	ldr	r1, [r7, #4]
   183fe:	2300      	movs	r3, #0
   18400:	220a      	movs	r2, #10
   18402:	4c05      	ldr	r4, [pc, #20]	; (18418 <WifiAddTestDataToQueue+0x28>)
   18404:	47a0      	blx	r4
   18406:	0003      	movs	r3, r0
   18408:	60fb      	str	r3, [r7, #12]
	return error;
   1840a:	68fb      	ldr	r3, [r7, #12]
}
   1840c:	0018      	movs	r0, r3
   1840e:	46bd      	mov	sp, r7
   18410:	b005      	add	sp, #20
   18412:	bd90      	pop	{r4, r7, pc}
   18414:	20000634 	.word	0x20000634
   18418:	0001b61d 	.word	0x0001b61d

0001841c <WifiAddNauDataToQueue>:

int WifiAddNauDataToQueue(struct NauPacket *nau)
{
   1841c:	b590      	push	{r4, r7, lr}
   1841e:	b085      	sub	sp, #20
   18420:	af00      	add	r7, sp, #0
   18422:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueNauBuffer, nau, (TickType_t)10);
   18424:	4b06      	ldr	r3, [pc, #24]	; (18440 <WifiAddNauDataToQueue+0x24>)
   18426:	6818      	ldr	r0, [r3, #0]
   18428:	6879      	ldr	r1, [r7, #4]
   1842a:	2300      	movs	r3, #0
   1842c:	220a      	movs	r2, #10
   1842e:	4c05      	ldr	r4, [pc, #20]	; (18444 <WifiAddNauDataToQueue+0x28>)
   18430:	47a0      	blx	r4
   18432:	0003      	movs	r3, r0
   18434:	60fb      	str	r3, [r7, #12]
	return error;
   18436:	68fb      	ldr	r3, [r7, #12]
   18438:	0018      	movs	r0, r3
   1843a:	46bd      	mov	sp, r7
   1843c:	b005      	add	sp, #20
   1843e:	bd90      	pop	{r4, r7, pc}
   18440:	20000638 	.word	0x20000638
   18444:	0001b61d 	.word	0x0001b61d

00018448 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   18448:	b580      	push	{r7, lr}
   1844a:	b082      	sub	sp, #8
   1844c:	af00      	add	r7, sp, #0
   1844e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   18450:	687b      	ldr	r3, [r7, #4]
   18452:	2200      	movs	r2, #0
   18454:	701a      	strb	r2, [r3, #0]
}
   18456:	46c0      	nop			; (mov r8, r8)
   18458:	46bd      	mov	sp, r7
   1845a:	b002      	add	sp, #8
   1845c:	bd80      	pop	{r7, pc}
	...

00018460 <system_apb_clock_set_mask>:
{
   18460:	b580      	push	{r7, lr}
   18462:	b082      	sub	sp, #8
   18464:	af00      	add	r7, sp, #0
   18466:	0002      	movs	r2, r0
   18468:	6039      	str	r1, [r7, #0]
   1846a:	1dfb      	adds	r3, r7, #7
   1846c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1846e:	1dfb      	adds	r3, r7, #7
   18470:	781b      	ldrb	r3, [r3, #0]
   18472:	2b01      	cmp	r3, #1
   18474:	d00a      	beq.n	1848c <system_apb_clock_set_mask+0x2c>
   18476:	2b02      	cmp	r3, #2
   18478:	d00f      	beq.n	1849a <system_apb_clock_set_mask+0x3a>
   1847a:	2b00      	cmp	r3, #0
   1847c:	d114      	bne.n	184a8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1847e:	4b0e      	ldr	r3, [pc, #56]	; (184b8 <system_apb_clock_set_mask+0x58>)
   18480:	4a0d      	ldr	r2, [pc, #52]	; (184b8 <system_apb_clock_set_mask+0x58>)
   18482:	6991      	ldr	r1, [r2, #24]
   18484:	683a      	ldr	r2, [r7, #0]
   18486:	430a      	orrs	r2, r1
   18488:	619a      	str	r2, [r3, #24]
			break;
   1848a:	e00f      	b.n	184ac <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1848c:	4b0a      	ldr	r3, [pc, #40]	; (184b8 <system_apb_clock_set_mask+0x58>)
   1848e:	4a0a      	ldr	r2, [pc, #40]	; (184b8 <system_apb_clock_set_mask+0x58>)
   18490:	69d1      	ldr	r1, [r2, #28]
   18492:	683a      	ldr	r2, [r7, #0]
   18494:	430a      	orrs	r2, r1
   18496:	61da      	str	r2, [r3, #28]
			break;
   18498:	e008      	b.n	184ac <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1849a:	4b07      	ldr	r3, [pc, #28]	; (184b8 <system_apb_clock_set_mask+0x58>)
   1849c:	4a06      	ldr	r2, [pc, #24]	; (184b8 <system_apb_clock_set_mask+0x58>)
   1849e:	6a11      	ldr	r1, [r2, #32]
   184a0:	683a      	ldr	r2, [r7, #0]
   184a2:	430a      	orrs	r2, r1
   184a4:	621a      	str	r2, [r3, #32]
			break;
   184a6:	e001      	b.n	184ac <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   184a8:	2317      	movs	r3, #23
   184aa:	e000      	b.n	184ae <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   184ac:	2300      	movs	r3, #0
}
   184ae:	0018      	movs	r0, r3
   184b0:	46bd      	mov	sp, r7
   184b2:	b002      	add	sp, #8
   184b4:	bd80      	pop	{r7, pc}
   184b6:	46c0      	nop			; (mov r8, r8)
   184b8:	40000400 	.word	0x40000400

000184bc <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   184bc:	b580      	push	{r7, lr}
   184be:	b082      	sub	sp, #8
   184c0:	af00      	add	r7, sp, #0
   184c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   184c4:	687b      	ldr	r3, [r7, #4]
   184c6:	2280      	movs	r2, #128	; 0x80
   184c8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   184ca:	687b      	ldr	r3, [r7, #4]
   184cc:	2200      	movs	r2, #0
   184ce:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   184d0:	687b      	ldr	r3, [r7, #4]
   184d2:	2201      	movs	r2, #1
   184d4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   184d6:	687b      	ldr	r3, [r7, #4]
   184d8:	2200      	movs	r2, #0
   184da:	70da      	strb	r2, [r3, #3]
}
   184dc:	46c0      	nop			; (mov r8, r8)
   184de:	46bd      	mov	sp, r7
   184e0:	b002      	add	sp, #8
   184e2:	bd80      	pop	{r7, pc}

000184e4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   184e4:	b580      	push	{r7, lr}
   184e6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   184e8:	4b05      	ldr	r3, [pc, #20]	; (18500 <system_is_debugger_present+0x1c>)
   184ea:	789b      	ldrb	r3, [r3, #2]
   184ec:	b2db      	uxtb	r3, r3
   184ee:	001a      	movs	r2, r3
   184f0:	2302      	movs	r3, #2
   184f2:	4013      	ands	r3, r2
   184f4:	1e5a      	subs	r2, r3, #1
   184f6:	4193      	sbcs	r3, r2
   184f8:	b2db      	uxtb	r3, r3
}
   184fa:	0018      	movs	r0, r3
   184fc:	46bd      	mov	sp, r7
   184fe:	bd80      	pop	{r7, pc}
   18500:	41002000 	.word	0x41002000

00018504 <system_interrupt_enter_critical_section>:
{
   18504:	b580      	push	{r7, lr}
   18506:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   18508:	4b02      	ldr	r3, [pc, #8]	; (18514 <system_interrupt_enter_critical_section+0x10>)
   1850a:	4798      	blx	r3
}
   1850c:	46c0      	nop			; (mov r8, r8)
   1850e:	46bd      	mov	sp, r7
   18510:	bd80      	pop	{r7, pc}
   18512:	46c0      	nop			; (mov r8, r8)
   18514:	00027179 	.word	0x00027179

00018518 <system_interrupt_leave_critical_section>:
{
   18518:	b580      	push	{r7, lr}
   1851a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   1851c:	4b02      	ldr	r3, [pc, #8]	; (18528 <system_interrupt_leave_critical_section+0x10>)
   1851e:	4798      	blx	r3
}
   18520:	46c0      	nop			; (mov r8, r8)
   18522:	46bd      	mov	sp, r7
   18524:	bd80      	pop	{r7, pc}
   18526:	46c0      	nop			; (mov r8, r8)
   18528:	000271cd 	.word	0x000271cd

0001852c <system_interrupt_disable>:
{
   1852c:	b580      	push	{r7, lr}
   1852e:	b082      	sub	sp, #8
   18530:	af00      	add	r7, sp, #0
   18532:	0002      	movs	r2, r0
   18534:	1dfb      	adds	r3, r7, #7
   18536:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   18538:	4a07      	ldr	r2, [pc, #28]	; (18558 <system_interrupt_disable+0x2c>)
   1853a:	1dfb      	adds	r3, r7, #7
   1853c:	781b      	ldrb	r3, [r3, #0]
   1853e:	0019      	movs	r1, r3
   18540:	231f      	movs	r3, #31
   18542:	400b      	ands	r3, r1
   18544:	2101      	movs	r1, #1
   18546:	4099      	lsls	r1, r3
   18548:	000b      	movs	r3, r1
   1854a:	0019      	movs	r1, r3
   1854c:	2380      	movs	r3, #128	; 0x80
   1854e:	50d1      	str	r1, [r2, r3]
}
   18550:	46c0      	nop			; (mov r8, r8)
   18552:	46bd      	mov	sp, r7
   18554:	b002      	add	sp, #8
   18556:	bd80      	pop	{r7, pc}
   18558:	e000e100 	.word	0xe000e100

0001855c <i2c_master_is_syncing>:
{
   1855c:	b580      	push	{r7, lr}
   1855e:	b084      	sub	sp, #16
   18560:	af00      	add	r7, sp, #0
   18562:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   18564:	687b      	ldr	r3, [r7, #4]
   18566:	681b      	ldr	r3, [r3, #0]
   18568:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1856a:	68fb      	ldr	r3, [r7, #12]
   1856c:	69db      	ldr	r3, [r3, #28]
   1856e:	2207      	movs	r2, #7
   18570:	4013      	ands	r3, r2
   18572:	1e5a      	subs	r2, r3, #1
   18574:	4193      	sbcs	r3, r2
   18576:	b2db      	uxtb	r3, r3
}
   18578:	0018      	movs	r0, r3
   1857a:	46bd      	mov	sp, r7
   1857c:	b004      	add	sp, #16
   1857e:	bd80      	pop	{r7, pc}

00018580 <_i2c_master_wait_for_sync>:
{
   18580:	b580      	push	{r7, lr}
   18582:	b082      	sub	sp, #8
   18584:	af00      	add	r7, sp, #0
   18586:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   18588:	46c0      	nop			; (mov r8, r8)
   1858a:	687b      	ldr	r3, [r7, #4]
   1858c:	0018      	movs	r0, r3
   1858e:	4b04      	ldr	r3, [pc, #16]	; (185a0 <_i2c_master_wait_for_sync+0x20>)
   18590:	4798      	blx	r3
   18592:	1e03      	subs	r3, r0, #0
   18594:	d1f9      	bne.n	1858a <_i2c_master_wait_for_sync+0xa>
}
   18596:	46c0      	nop			; (mov r8, r8)
   18598:	46bd      	mov	sp, r7
   1859a:	b002      	add	sp, #8
   1859c:	bd80      	pop	{r7, pc}
   1859e:	46c0      	nop			; (mov r8, r8)
   185a0:	0001855d 	.word	0x0001855d

000185a4 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   185a4:	b580      	push	{r7, lr}
   185a6:	b084      	sub	sp, #16
   185a8:	af00      	add	r7, sp, #0
   185aa:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   185ac:	687b      	ldr	r3, [r7, #4]
   185ae:	681b      	ldr	r3, [r3, #0]
   185b0:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   185b2:	687b      	ldr	r3, [r7, #4]
   185b4:	681b      	ldr	r3, [r3, #0]
   185b6:	0018      	movs	r0, r3
   185b8:	4b0d      	ldr	r3, [pc, #52]	; (185f0 <i2c_master_disable+0x4c>)
   185ba:	4798      	blx	r3
   185bc:	0003      	movs	r3, r0
   185be:	0018      	movs	r0, r3
   185c0:	4b0c      	ldr	r3, [pc, #48]	; (185f4 <i2c_master_disable+0x50>)
   185c2:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   185c4:	687b      	ldr	r3, [r7, #4]
   185c6:	0018      	movs	r0, r3
   185c8:	4b0b      	ldr	r3, [pc, #44]	; (185f8 <i2c_master_disable+0x54>)
   185ca:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   185cc:	68fb      	ldr	r3, [r7, #12]
   185ce:	2283      	movs	r2, #131	; 0x83
   185d0:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   185d2:	68fb      	ldr	r3, [r7, #12]
   185d4:	2283      	movs	r2, #131	; 0x83
   185d6:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   185d8:	68fb      	ldr	r3, [r7, #12]
   185da:	681b      	ldr	r3, [r3, #0]
   185dc:	2202      	movs	r2, #2
   185de:	4393      	bics	r3, r2
   185e0:	001a      	movs	r2, r3
   185e2:	68fb      	ldr	r3, [r7, #12]
   185e4:	601a      	str	r2, [r3, #0]

}
   185e6:	46c0      	nop			; (mov r8, r8)
   185e8:	46bd      	mov	sp, r7
   185ea:	b004      	add	sp, #16
   185ec:	bd80      	pop	{r7, pc}
   185ee:	46c0      	nop			; (mov r8, r8)
   185f0:	0002864d 	.word	0x0002864d
   185f4:	0001852d 	.word	0x0001852d
   185f8:	00018581 	.word	0x00018581

000185fc <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   185fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   185fe:	b097      	sub	sp, #92	; 0x5c
   18600:	af00      	add	r7, sp, #0
   18602:	6178      	str	r0, [r7, #20]
   18604:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   18606:	2300      	movs	r3, #0
   18608:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   1860a:	2300      	movs	r3, #0
   1860c:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   1860e:	2300      	movs	r3, #0
   18610:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   18612:	233b      	movs	r3, #59	; 0x3b
   18614:	2210      	movs	r2, #16
   18616:	4694      	mov	ip, r2
   18618:	44bc      	add	ip, r7
   1861a:	4463      	add	r3, ip
   1861c:	2200      	movs	r2, #0
   1861e:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18620:	697b      	ldr	r3, [r7, #20]
   18622:	681b      	ldr	r3, [r3, #0]
   18624:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   18626:	697b      	ldr	r3, [r7, #20]
   18628:	681b      	ldr	r3, [r3, #0]
   1862a:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   1862c:	2323      	movs	r3, #35	; 0x23
   1862e:	2210      	movs	r2, #16
   18630:	18ba      	adds	r2, r7, r2
   18632:	18d4      	adds	r4, r2, r3
   18634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18636:	0018      	movs	r0, r3
   18638:	4bc0      	ldr	r3, [pc, #768]	; (1893c <_i2c_master_set_config+0x340>)
   1863a:	4798      	blx	r3
   1863c:	0003      	movs	r3, r0
   1863e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   18640:	230c      	movs	r3, #12
   18642:	2210      	movs	r2, #16
   18644:	4694      	mov	ip, r2
   18646:	44bc      	add	ip, r7
   18648:	4463      	add	r3, ip
   1864a:	0018      	movs	r0, r3
   1864c:	4bbc      	ldr	r3, [pc, #752]	; (18940 <_i2c_master_set_config+0x344>)
   1864e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   18650:	693b      	ldr	r3, [r7, #16]
   18652:	69db      	ldr	r3, [r3, #28]
   18654:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   18656:	693b      	ldr	r3, [r7, #16]
   18658:	6a1b      	ldr	r3, [r3, #32]
   1865a:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   1865c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1865e:	2b00      	cmp	r3, #0
   18660:	d106      	bne.n	18670 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   18662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18664:	2100      	movs	r1, #0
   18666:	0018      	movs	r0, r3
   18668:	4bb6      	ldr	r3, [pc, #728]	; (18944 <_i2c_master_set_config+0x348>)
   1866a:	4798      	blx	r3
   1866c:	0003      	movs	r3, r0
   1866e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   18670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18672:	b2da      	uxtb	r2, r3
   18674:	230c      	movs	r3, #12
   18676:	2110      	movs	r1, #16
   18678:	468c      	mov	ip, r1
   1867a:	44bc      	add	ip, r7
   1867c:	4463      	add	r3, ip
   1867e:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   18680:	230c      	movs	r3, #12
   18682:	2210      	movs	r2, #16
   18684:	4694      	mov	ip, r2
   18686:	44bc      	add	ip, r7
   18688:	4463      	add	r3, ip
   1868a:	2202      	movs	r2, #2
   1868c:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   1868e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18690:	0c1b      	lsrs	r3, r3, #16
   18692:	b2db      	uxtb	r3, r3
   18694:	220c      	movs	r2, #12
   18696:	2110      	movs	r1, #16
   18698:	468c      	mov	ip, r1
   1869a:	44bc      	add	ip, r7
   1869c:	4462      	add	r2, ip
   1869e:	0011      	movs	r1, r2
   186a0:	0018      	movs	r0, r3
   186a2:	4ba9      	ldr	r3, [pc, #676]	; (18948 <_i2c_master_set_config+0x34c>)
   186a4:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   186a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   186a8:	2b00      	cmp	r3, #0
   186aa:	d106      	bne.n	186ba <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   186ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   186ae:	2101      	movs	r1, #1
   186b0:	0018      	movs	r0, r3
   186b2:	4ba4      	ldr	r3, [pc, #656]	; (18944 <_i2c_master_set_config+0x348>)
   186b4:	4798      	blx	r3
   186b6:	0003      	movs	r3, r0
   186b8:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   186ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   186bc:	b2da      	uxtb	r2, r3
   186be:	230c      	movs	r3, #12
   186c0:	2110      	movs	r1, #16
   186c2:	468c      	mov	ip, r1
   186c4:	44bc      	add	ip, r7
   186c6:	4463      	add	r3, ip
   186c8:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   186ca:	230c      	movs	r3, #12
   186cc:	2210      	movs	r2, #16
   186ce:	4694      	mov	ip, r2
   186d0:	44bc      	add	ip, r7
   186d2:	4463      	add	r3, ip
   186d4:	2202      	movs	r2, #2
   186d6:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   186d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   186da:	0c1b      	lsrs	r3, r3, #16
   186dc:	b2db      	uxtb	r3, r3
   186de:	220c      	movs	r2, #12
   186e0:	2110      	movs	r1, #16
   186e2:	468c      	mov	ip, r1
   186e4:	44bc      	add	ip, r7
   186e6:	4462      	add	r2, ip
   186e8:	0011      	movs	r1, r2
   186ea:	0018      	movs	r0, r3
   186ec:	4b96      	ldr	r3, [pc, #600]	; (18948 <_i2c_master_set_config+0x34c>)
   186ee:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   186f0:	693b      	ldr	r3, [r7, #16]
   186f2:	8a9a      	ldrh	r2, [r3, #20]
   186f4:	697b      	ldr	r3, [r7, #20]
   186f6:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   186f8:	693b      	ldr	r3, [r7, #16]
   186fa:	8ada      	ldrh	r2, [r3, #22]
   186fc:	697b      	ldr	r3, [r7, #20]
   186fe:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   18700:	693b      	ldr	r3, [r7, #16]
   18702:	7e1b      	ldrb	r3, [r3, #24]
   18704:	2b00      	cmp	r3, #0
   18706:	d103      	bne.n	18710 <_i2c_master_set_config+0x114>
   18708:	4b90      	ldr	r3, [pc, #576]	; (1894c <_i2c_master_set_config+0x350>)
   1870a:	4798      	blx	r3
   1870c:	1e03      	subs	r3, r0, #0
   1870e:	d002      	beq.n	18716 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   18710:	2380      	movs	r3, #128	; 0x80
   18712:	657b      	str	r3, [r7, #84]	; 0x54
   18714:	e001      	b.n	1871a <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   18716:	2300      	movs	r3, #0
   18718:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   1871a:	693b      	ldr	r3, [r7, #16]
   1871c:	691b      	ldr	r3, [r3, #16]
   1871e:	2b00      	cmp	r3, #0
   18720:	d004      	beq.n	1872c <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   18722:	693b      	ldr	r3, [r7, #16]
   18724:	691b      	ldr	r3, [r3, #16]
   18726:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   18728:	4313      	orrs	r3, r2
   1872a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   1872c:	693b      	ldr	r3, [r7, #16]
   1872e:	689b      	ldr	r3, [r3, #8]
   18730:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   18732:	4313      	orrs	r3, r2
   18734:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   18736:	693b      	ldr	r3, [r7, #16]
   18738:	2224      	movs	r2, #36	; 0x24
   1873a:	5c9b      	ldrb	r3, [r3, r2]
   1873c:	2b00      	cmp	r3, #0
   1873e:	d004      	beq.n	1874a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   18740:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   18742:	2280      	movs	r2, #128	; 0x80
   18744:	05d2      	lsls	r2, r2, #23
   18746:	4313      	orrs	r3, r2
   18748:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   1874a:	693b      	ldr	r3, [r7, #16]
   1874c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1874e:	2b00      	cmp	r3, #0
   18750:	d004      	beq.n	1875c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   18752:	693b      	ldr	r3, [r7, #16]
   18754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18756:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   18758:	4313      	orrs	r3, r2
   1875a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   1875c:	693b      	ldr	r3, [r7, #16]
   1875e:	222c      	movs	r2, #44	; 0x2c
   18760:	5c9b      	ldrb	r3, [r3, r2]
   18762:	2b00      	cmp	r3, #0
   18764:	d105      	bne.n	18772 <_i2c_master_set_config+0x176>
   18766:	693b      	ldr	r3, [r7, #16]
   18768:	689a      	ldr	r2, [r3, #8]
   1876a:	2380      	movs	r3, #128	; 0x80
   1876c:	049b      	lsls	r3, r3, #18
   1876e:	429a      	cmp	r2, r3
   18770:	d104      	bne.n	1877c <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   18772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   18774:	2280      	movs	r2, #128	; 0x80
   18776:	0512      	lsls	r2, r2, #20
   18778:	4313      	orrs	r3, r2
   1877a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   1877c:	693b      	ldr	r3, [r7, #16]
   1877e:	222d      	movs	r2, #45	; 0x2d
   18780:	5c9b      	ldrb	r3, [r3, r2]
   18782:	2b00      	cmp	r3, #0
   18784:	d004      	beq.n	18790 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   18786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   18788:	2280      	movs	r2, #128	; 0x80
   1878a:	0412      	lsls	r2, r2, #16
   1878c:	4313      	orrs	r3, r2
   1878e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   18790:	693b      	ldr	r3, [r7, #16]
   18792:	222e      	movs	r2, #46	; 0x2e
   18794:	5c9b      	ldrb	r3, [r3, r2]
   18796:	2b00      	cmp	r3, #0
   18798:	d004      	beq.n	187a4 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   1879a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1879c:	2280      	movs	r2, #128	; 0x80
   1879e:	03d2      	lsls	r2, r2, #15
   187a0:	4313      	orrs	r3, r2
   187a2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   187a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   187a6:	681a      	ldr	r2, [r3, #0]
   187a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   187aa:	431a      	orrs	r2, r3
   187ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   187ae:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   187b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   187b2:	2280      	movs	r2, #128	; 0x80
   187b4:	0052      	lsls	r2, r2, #1
   187b6:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   187b8:	2323      	movs	r3, #35	; 0x23
   187ba:	2210      	movs	r2, #16
   187bc:	4694      	mov	ip, r2
   187be:	44bc      	add	ip, r7
   187c0:	4463      	add	r3, ip
   187c2:	781b      	ldrb	r3, [r3, #0]
   187c4:	3314      	adds	r3, #20
   187c6:	b2db      	uxtb	r3, r3
   187c8:	0018      	movs	r0, r3
   187ca:	4b61      	ldr	r3, [pc, #388]	; (18950 <_i2c_master_set_config+0x354>)
   187cc:	4798      	blx	r3
   187ce:	0003      	movs	r3, r0
   187d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   187d2:	693b      	ldr	r3, [r7, #16]
   187d4:	681b      	ldr	r3, [r3, #0]
   187d6:	22fa      	movs	r2, #250	; 0xfa
   187d8:	0092      	lsls	r2, r2, #2
   187da:	4353      	muls	r3, r2
   187dc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   187de:	693b      	ldr	r3, [r7, #16]
   187e0:	685b      	ldr	r3, [r3, #4]
   187e2:	22fa      	movs	r2, #250	; 0xfa
   187e4:	0092      	lsls	r2, r2, #2
   187e6:	4353      	muls	r3, r2
   187e8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   187ea:	693b      	ldr	r3, [r7, #16]
   187ec:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   187ee:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   187f0:	4b58      	ldr	r3, [pc, #352]	; (18954 <_i2c_master_set_config+0x358>)
   187f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   187f4:	4798      	blx	r3
   187f6:	0005      	movs	r5, r0
   187f8:	000e      	movs	r6, r1
   187fa:	4b56      	ldr	r3, [pc, #344]	; (18954 <_i2c_master_set_config+0x358>)
   187fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   187fe:	4798      	blx	r3
   18800:	60b8      	str	r0, [r7, #8]
   18802:	60f9      	str	r1, [r7, #12]
   18804:	4b53      	ldr	r3, [pc, #332]	; (18954 <_i2c_master_set_config+0x358>)
   18806:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   18808:	4798      	blx	r3
   1880a:	4c53      	ldr	r4, [pc, #332]	; (18958 <_i2c_master_set_config+0x35c>)
   1880c:	4a53      	ldr	r2, [pc, #332]	; (1895c <_i2c_master_set_config+0x360>)
   1880e:	4b54      	ldr	r3, [pc, #336]	; (18960 <_i2c_master_set_config+0x364>)
   18810:	47a0      	blx	r4
   18812:	0003      	movs	r3, r0
   18814:	000c      	movs	r4, r1
   18816:	603b      	str	r3, [r7, #0]
   18818:	607c      	str	r4, [r7, #4]
   1881a:	4b4e      	ldr	r3, [pc, #312]	; (18954 <_i2c_master_set_config+0x358>)
   1881c:	6a38      	ldr	r0, [r7, #32]
   1881e:	4798      	blx	r3
   18820:	0002      	movs	r2, r0
   18822:	000b      	movs	r3, r1
   18824:	4c4c      	ldr	r4, [pc, #304]	; (18958 <_i2c_master_set_config+0x35c>)
   18826:	6838      	ldr	r0, [r7, #0]
   18828:	6879      	ldr	r1, [r7, #4]
   1882a:	47a0      	blx	r4
   1882c:	0003      	movs	r3, r0
   1882e:	000c      	movs	r4, r1
   18830:	0018      	movs	r0, r3
   18832:	0021      	movs	r1, r4
   18834:	4c4b      	ldr	r4, [pc, #300]	; (18964 <_i2c_master_set_config+0x368>)
   18836:	2200      	movs	r2, #0
   18838:	4b4b      	ldr	r3, [pc, #300]	; (18968 <_i2c_master_set_config+0x36c>)
   1883a:	47a0      	blx	r4
   1883c:	0003      	movs	r3, r0
   1883e:	000c      	movs	r4, r1
   18840:	001a      	movs	r2, r3
   18842:	0023      	movs	r3, r4
   18844:	4c44      	ldr	r4, [pc, #272]	; (18958 <_i2c_master_set_config+0x35c>)
   18846:	68b8      	ldr	r0, [r7, #8]
   18848:	68f9      	ldr	r1, [r7, #12]
   1884a:	47a0      	blx	r4
   1884c:	0003      	movs	r3, r0
   1884e:	000c      	movs	r4, r1
   18850:	001a      	movs	r2, r3
   18852:	0023      	movs	r3, r4
   18854:	4c45      	ldr	r4, [pc, #276]	; (1896c <_i2c_master_set_config+0x370>)
   18856:	0028      	movs	r0, r5
   18858:	0031      	movs	r1, r6
   1885a:	47a0      	blx	r4
   1885c:	0003      	movs	r3, r0
   1885e:	000c      	movs	r4, r1
   18860:	001d      	movs	r5, r3
   18862:	0026      	movs	r6, r4
   18864:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18866:	005a      	lsls	r2, r3, #1
   18868:	4b3a      	ldr	r3, [pc, #232]	; (18954 <_i2c_master_set_config+0x358>)
   1886a:	0010      	movs	r0, r2
   1886c:	4798      	blx	r3
   1886e:	0002      	movs	r2, r0
   18870:	000b      	movs	r3, r1
   18872:	4c3c      	ldr	r4, [pc, #240]	; (18964 <_i2c_master_set_config+0x368>)
   18874:	0028      	movs	r0, r5
   18876:	0031      	movs	r1, r6
   18878:	47a0      	blx	r4
   1887a:	0003      	movs	r3, r0
   1887c:	000c      	movs	r4, r1
   1887e:	0018      	movs	r0, r3
   18880:	0021      	movs	r1, r4
   18882:	4c3a      	ldr	r4, [pc, #232]	; (1896c <_i2c_master_set_config+0x370>)
   18884:	2200      	movs	r2, #0
   18886:	4b3a      	ldr	r3, [pc, #232]	; (18970 <_i2c_master_set_config+0x374>)
   18888:	47a0      	blx	r4
   1888a:	0003      	movs	r3, r0
   1888c:	000c      	movs	r4, r1
   1888e:	001d      	movs	r5, r3
   18890:	0026      	movs	r6, r4
   18892:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18894:	005a      	lsls	r2, r3, #1
   18896:	4b2f      	ldr	r3, [pc, #188]	; (18954 <_i2c_master_set_config+0x358>)
   18898:	0010      	movs	r0, r2
   1889a:	4798      	blx	r3
   1889c:	0002      	movs	r2, r0
   1889e:	000b      	movs	r3, r1
   188a0:	4c34      	ldr	r4, [pc, #208]	; (18974 <_i2c_master_set_config+0x378>)
   188a2:	0028      	movs	r0, r5
   188a4:	0031      	movs	r1, r6
   188a6:	47a0      	blx	r4
   188a8:	0003      	movs	r3, r0
   188aa:	000c      	movs	r4, r1
   188ac:	0019      	movs	r1, r3
   188ae:	0022      	movs	r2, r4
   188b0:	4b31      	ldr	r3, [pc, #196]	; (18978 <_i2c_master_set_config+0x37c>)
   188b2:	0008      	movs	r0, r1
   188b4:	0011      	movs	r1, r2
   188b6:	4798      	blx	r3
   188b8:	0003      	movs	r3, r0
   188ba:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   188bc:	693b      	ldr	r3, [r7, #16]
   188be:	689a      	ldr	r2, [r3, #8]
   188c0:	2380      	movs	r3, #128	; 0x80
   188c2:	049b      	lsls	r3, r3, #18
   188c4:	429a      	cmp	r2, r3
   188c6:	d16a      	bne.n	1899e <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   188c8:	4b22      	ldr	r3, [pc, #136]	; (18954 <_i2c_master_set_config+0x358>)
   188ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   188cc:	4798      	blx	r3
   188ce:	4c25      	ldr	r4, [pc, #148]	; (18964 <_i2c_master_set_config+0x368>)
   188d0:	0002      	movs	r2, r0
   188d2:	000b      	movs	r3, r1
   188d4:	47a0      	blx	r4
   188d6:	0003      	movs	r3, r0
   188d8:	000c      	movs	r4, r1
   188da:	001d      	movs	r5, r3
   188dc:	0026      	movs	r6, r4
   188de:	4b1d      	ldr	r3, [pc, #116]	; (18954 <_i2c_master_set_config+0x358>)
   188e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
   188e2:	4798      	blx	r3
   188e4:	4c1c      	ldr	r4, [pc, #112]	; (18958 <_i2c_master_set_config+0x35c>)
   188e6:	2200      	movs	r2, #0
   188e8:	4b24      	ldr	r3, [pc, #144]	; (1897c <_i2c_master_set_config+0x380>)
   188ea:	47a0      	blx	r4
   188ec:	0003      	movs	r3, r0
   188ee:	000c      	movs	r4, r1
   188f0:	001a      	movs	r2, r3
   188f2:	0023      	movs	r3, r4
   188f4:	4c1f      	ldr	r4, [pc, #124]	; (18974 <_i2c_master_set_config+0x378>)
   188f6:	0028      	movs	r0, r5
   188f8:	0031      	movs	r1, r6
   188fa:	47a0      	blx	r4
   188fc:	0003      	movs	r3, r0
   188fe:	000c      	movs	r4, r1
   18900:	0018      	movs	r0, r3
   18902:	0021      	movs	r1, r4
   18904:	4c19      	ldr	r4, [pc, #100]	; (1896c <_i2c_master_set_config+0x370>)
   18906:	2200      	movs	r2, #0
   18908:	4b19      	ldr	r3, [pc, #100]	; (18970 <_i2c_master_set_config+0x374>)
   1890a:	47a0      	blx	r4
   1890c:	0003      	movs	r3, r0
   1890e:	000c      	movs	r4, r1
   18910:	0019      	movs	r1, r3
   18912:	0022      	movs	r2, r4
   18914:	4b18      	ldr	r3, [pc, #96]	; (18978 <_i2c_master_set_config+0x37c>)
   18916:	0008      	movs	r0, r1
   18918:	0011      	movs	r1, r2
   1891a:	4798      	blx	r3
   1891c:	0003      	movs	r3, r0
   1891e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   18920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   18922:	2b00      	cmp	r3, #0
   18924:	d02e      	beq.n	18984 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   18926:	4b16      	ldr	r3, [pc, #88]	; (18980 <_i2c_master_set_config+0x384>)
   18928:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1892a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1892c:	4798      	blx	r3
   1892e:	0003      	movs	r3, r0
   18930:	1e9a      	subs	r2, r3, #2
   18932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   18934:	1ad3      	subs	r3, r2, r3
   18936:	653b      	str	r3, [r7, #80]	; 0x50
   18938:	e031      	b.n	1899e <_i2c_master_set_config+0x3a2>
   1893a:	46c0      	nop			; (mov r8, r8)
   1893c:	0002857d 	.word	0x0002857d
   18940:	000184bd 	.word	0x000184bd
   18944:	000283c1 	.word	0x000283c1
   18948:	0002b16d 	.word	0x0002b16d
   1894c:	000184e5 	.word	0x000184e5
   18950:	0002af31 	.word	0x0002af31
   18954:	0003623d 	.word	0x0003623d
   18958:	000356a9 	.word	0x000356a9
   1895c:	e826d695 	.word	0xe826d695
   18960:	3e112e0b 	.word	0x3e112e0b
   18964:	00034a21 	.word	0x00034a21
   18968:	40240000 	.word	0x40240000
   1896c:	00035ba9 	.word	0x00035ba9
   18970:	3ff00000 	.word	0x3ff00000
   18974:	00035041 	.word	0x00035041
   18978:	000361d5 	.word	0x000361d5
   1897c:	40080000 	.word	0x40080000
   18980:	00033ad5 	.word	0x00033ad5
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   18984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18986:	005a      	lsls	r2, r3, #1
   18988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1898a:	18d3      	adds	r3, r2, r3
   1898c:	1e5a      	subs	r2, r3, #1
   1898e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18990:	0059      	lsls	r1, r3, #1
   18992:	4b1d      	ldr	r3, [pc, #116]	; (18a08 <_i2c_master_set_config+0x40c>)
   18994:	0010      	movs	r0, r2
   18996:	4798      	blx	r3
   18998:	0003      	movs	r3, r0
   1899a:	3b01      	subs	r3, #1
   1899c:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   1899e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   189a0:	2bff      	cmp	r3, #255	; 0xff
   189a2:	dc08      	bgt.n	189b6 <_i2c_master_set_config+0x3ba>
   189a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   189a6:	2b00      	cmp	r3, #0
   189a8:	db05      	blt.n	189b6 <_i2c_master_set_config+0x3ba>
   189aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   189ac:	2bff      	cmp	r3, #255	; 0xff
   189ae:	dc02      	bgt.n	189b6 <_i2c_master_set_config+0x3ba>
   189b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   189b2:	2b00      	cmp	r3, #0
   189b4:	da06      	bge.n	189c4 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   189b6:	233b      	movs	r3, #59	; 0x3b
   189b8:	2210      	movs	r2, #16
   189ba:	4694      	mov	ip, r2
   189bc:	44bc      	add	ip, r7
   189be:	4463      	add	r3, ip
   189c0:	2240      	movs	r2, #64	; 0x40
   189c2:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   189c4:	233b      	movs	r3, #59	; 0x3b
   189c6:	2210      	movs	r2, #16
   189c8:	4694      	mov	ip, r2
   189ca:	44bc      	add	ip, r7
   189cc:	4463      	add	r3, ip
   189ce:	781b      	ldrb	r3, [r3, #0]
   189d0:	2b40      	cmp	r3, #64	; 0x40
   189d2:	d00e      	beq.n	189f2 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   189d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   189d6:	22ff      	movs	r2, #255	; 0xff
   189d8:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   189da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   189dc:	041b      	lsls	r3, r3, #16
   189de:	0019      	movs	r1, r3
   189e0:	23ff      	movs	r3, #255	; 0xff
   189e2:	041b      	lsls	r3, r3, #16
   189e4:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   189e6:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   189e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   189ea:	0612      	lsls	r2, r2, #24
   189ec:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   189ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   189f0:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   189f2:	233b      	movs	r3, #59	; 0x3b
   189f4:	2210      	movs	r2, #16
   189f6:	4694      	mov	ip, r2
   189f8:	44bc      	add	ip, r7
   189fa:	4463      	add	r3, ip
   189fc:	781b      	ldrb	r3, [r3, #0]
}
   189fe:	0018      	movs	r0, r3
   18a00:	46bd      	mov	sp, r7
   18a02:	b017      	add	sp, #92	; 0x5c
   18a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18a06:	46c0      	nop			; (mov r8, r8)
   18a08:	00033ad5 	.word	0x00033ad5

00018a0c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   18a0c:	b590      	push	{r4, r7, lr}
   18a0e:	b08b      	sub	sp, #44	; 0x2c
   18a10:	af00      	add	r7, sp, #0
   18a12:	60f8      	str	r0, [r7, #12]
   18a14:	60b9      	str	r1, [r7, #8]
   18a16:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   18a18:	68fb      	ldr	r3, [r7, #12]
   18a1a:	68ba      	ldr	r2, [r7, #8]
   18a1c:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18a1e:	68fb      	ldr	r3, [r7, #12]
   18a20:	681b      	ldr	r3, [r3, #0]
   18a22:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   18a24:	68fb      	ldr	r3, [r7, #12]
   18a26:	681b      	ldr	r3, [r3, #0]
   18a28:	0018      	movs	r0, r3
   18a2a:	4b3b      	ldr	r3, [pc, #236]	; (18b18 <i2c_master_init+0x10c>)
   18a2c:	4798      	blx	r3
   18a2e:	0003      	movs	r3, r0
   18a30:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   18a32:	6a3b      	ldr	r3, [r7, #32]
   18a34:	3302      	adds	r3, #2
   18a36:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   18a38:	6a3b      	ldr	r3, [r7, #32]
   18a3a:	3314      	adds	r3, #20
   18a3c:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   18a3e:	2201      	movs	r2, #1
   18a40:	69fb      	ldr	r3, [r7, #28]
   18a42:	409a      	lsls	r2, r3
   18a44:	0013      	movs	r3, r2
   18a46:	0019      	movs	r1, r3
   18a48:	2002      	movs	r0, #2
   18a4a:	4b34      	ldr	r3, [pc, #208]	; (18b1c <i2c_master_init+0x110>)
   18a4c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   18a4e:	2314      	movs	r3, #20
   18a50:	18fb      	adds	r3, r7, r3
   18a52:	0018      	movs	r0, r3
   18a54:	4b32      	ldr	r3, [pc, #200]	; (18b20 <i2c_master_init+0x114>)
   18a56:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   18a58:	687b      	ldr	r3, [r7, #4]
   18a5a:	7b1a      	ldrb	r2, [r3, #12]
   18a5c:	2314      	movs	r3, #20
   18a5e:	18fb      	adds	r3, r7, r3
   18a60:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   18a62:	69bb      	ldr	r3, [r7, #24]
   18a64:	b2db      	uxtb	r3, r3
   18a66:	2214      	movs	r2, #20
   18a68:	18ba      	adds	r2, r7, r2
   18a6a:	0011      	movs	r1, r2
   18a6c:	0018      	movs	r0, r3
   18a6e:	4b2d      	ldr	r3, [pc, #180]	; (18b24 <i2c_master_init+0x118>)
   18a70:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   18a72:	69bb      	ldr	r3, [r7, #24]
   18a74:	b2db      	uxtb	r3, r3
   18a76:	0018      	movs	r0, r3
   18a78:	4b2b      	ldr	r3, [pc, #172]	; (18b28 <i2c_master_init+0x11c>)
   18a7a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   18a7c:	687b      	ldr	r3, [r7, #4]
   18a7e:	7b1b      	ldrb	r3, [r3, #12]
   18a80:	2100      	movs	r1, #0
   18a82:	0018      	movs	r0, r3
   18a84:	4b29      	ldr	r3, [pc, #164]	; (18b2c <i2c_master_init+0x120>)
   18a86:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   18a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18a8a:	681b      	ldr	r3, [r3, #0]
   18a8c:	2202      	movs	r2, #2
   18a8e:	4013      	ands	r3, r2
   18a90:	d001      	beq.n	18a96 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   18a92:	231c      	movs	r3, #28
   18a94:	e03b      	b.n	18b0e <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   18a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18a98:	681b      	ldr	r3, [r3, #0]
   18a9a:	2201      	movs	r2, #1
   18a9c:	4013      	ands	r3, r2
   18a9e:	d001      	beq.n	18aa4 <i2c_master_init+0x98>
		return STATUS_BUSY;
   18aa0:	2305      	movs	r3, #5
   18aa2:	e034      	b.n	18b0e <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   18aa4:	68fb      	ldr	r3, [r7, #12]
   18aa6:	681b      	ldr	r3, [r3, #0]
   18aa8:	2217      	movs	r2, #23
   18aaa:	18bc      	adds	r4, r7, r2
   18aac:	0018      	movs	r0, r3
   18aae:	4b1a      	ldr	r3, [pc, #104]	; (18b18 <i2c_master_init+0x10c>)
   18ab0:	4798      	blx	r3
   18ab2:	0003      	movs	r3, r0
   18ab4:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   18ab6:	4a1e      	ldr	r2, [pc, #120]	; (18b30 <i2c_master_init+0x124>)
   18ab8:	2317      	movs	r3, #23
   18aba:	18fb      	adds	r3, r7, r3
   18abc:	781b      	ldrb	r3, [r3, #0]
   18abe:	0011      	movs	r1, r2
   18ac0:	0018      	movs	r0, r3
   18ac2:	4b1c      	ldr	r3, [pc, #112]	; (18b34 <i2c_master_init+0x128>)
   18ac4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   18ac6:	2317      	movs	r3, #23
   18ac8:	18fb      	adds	r3, r7, r3
   18aca:	781a      	ldrb	r2, [r3, #0]
   18acc:	4b1a      	ldr	r3, [pc, #104]	; (18b38 <i2c_master_init+0x12c>)
   18ace:	0092      	lsls	r2, r2, #2
   18ad0:	68f9      	ldr	r1, [r7, #12]
   18ad2:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   18ad4:	68fb      	ldr	r3, [r7, #12]
   18ad6:	2200      	movs	r2, #0
   18ad8:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   18ada:	68fb      	ldr	r3, [r7, #12]
   18adc:	2200      	movs	r2, #0
   18ade:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   18ae0:	68fb      	ldr	r3, [r7, #12]
   18ae2:	2200      	movs	r2, #0
   18ae4:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   18ae6:	68fb      	ldr	r3, [r7, #12]
   18ae8:	2200      	movs	r2, #0
   18aea:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   18aec:	68fb      	ldr	r3, [r7, #12]
   18aee:	2225      	movs	r2, #37	; 0x25
   18af0:	2100      	movs	r1, #0
   18af2:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   18af4:	68fb      	ldr	r3, [r7, #12]
   18af6:	2200      	movs	r2, #0
   18af8:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   18afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18afc:	2214      	movs	r2, #20
   18afe:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   18b00:	687a      	ldr	r2, [r7, #4]
   18b02:	68fb      	ldr	r3, [r7, #12]
   18b04:	0011      	movs	r1, r2
   18b06:	0018      	movs	r0, r3
   18b08:	4b0c      	ldr	r3, [pc, #48]	; (18b3c <i2c_master_init+0x130>)
   18b0a:	4798      	blx	r3
   18b0c:	0003      	movs	r3, r0
}
   18b0e:	0018      	movs	r0, r3
   18b10:	46bd      	mov	sp, r7
   18b12:	b00b      	add	sp, #44	; 0x2c
   18b14:	bd90      	pop	{r4, r7, pc}
   18b16:	46c0      	nop			; (mov r8, r8)
   18b18:	0002857d 	.word	0x0002857d
   18b1c:	00018461 	.word	0x00018461
   18b20:	00018449 	.word	0x00018449
   18b24:	0002ae0d 	.word	0x0002ae0d
   18b28:	0002ae51 	.word	0x0002ae51
   18b2c:	00028335 	.word	0x00028335
   18b30:	00013575 	.word	0x00013575
   18b34:	000285e1 	.word	0x000285e1
   18b38:	20005c9c 	.word	0x20005c9c
   18b3c:	000185fd 	.word	0x000185fd

00018b40 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   18b40:	b580      	push	{r7, lr}
   18b42:	b084      	sub	sp, #16
   18b44:	af00      	add	r7, sp, #0
   18b46:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18b48:	687b      	ldr	r3, [r7, #4]
   18b4a:	681b      	ldr	r3, [r3, #0]
   18b4c:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   18b4e:	687b      	ldr	r3, [r7, #4]
   18b50:	0018      	movs	r0, r3
   18b52:	4b0f      	ldr	r3, [pc, #60]	; (18b90 <i2c_master_reset+0x50>)
   18b54:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   18b56:	687b      	ldr	r3, [r7, #4]
   18b58:	0018      	movs	r0, r3
   18b5a:	4b0e      	ldr	r3, [pc, #56]	; (18b94 <i2c_master_reset+0x54>)
   18b5c:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   18b5e:	4b0e      	ldr	r3, [pc, #56]	; (18b98 <i2c_master_reset+0x58>)
   18b60:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   18b62:	687b      	ldr	r3, [r7, #4]
   18b64:	681b      	ldr	r3, [r3, #0]
   18b66:	0018      	movs	r0, r3
   18b68:	4b0c      	ldr	r3, [pc, #48]	; (18b9c <i2c_master_reset+0x5c>)
   18b6a:	4798      	blx	r3
   18b6c:	0003      	movs	r3, r0
   18b6e:	0018      	movs	r0, r3
   18b70:	4b0b      	ldr	r3, [pc, #44]	; (18ba0 <i2c_master_reset+0x60>)
   18b72:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   18b74:	4b0b      	ldr	r3, [pc, #44]	; (18ba4 <i2c_master_reset+0x64>)
   18b76:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   18b78:	687b      	ldr	r3, [r7, #4]
   18b7a:	0018      	movs	r0, r3
   18b7c:	4b04      	ldr	r3, [pc, #16]	; (18b90 <i2c_master_reset+0x50>)
   18b7e:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   18b80:	68fb      	ldr	r3, [r7, #12]
   18b82:	2201      	movs	r2, #1
   18b84:	601a      	str	r2, [r3, #0]
}
   18b86:	46c0      	nop			; (mov r8, r8)
   18b88:	46bd      	mov	sp, r7
   18b8a:	b004      	add	sp, #16
   18b8c:	bd80      	pop	{r7, pc}
   18b8e:	46c0      	nop			; (mov r8, r8)
   18b90:	00018581 	.word	0x00018581
   18b94:	000185a5 	.word	0x000185a5
   18b98:	00018505 	.word	0x00018505
   18b9c:	0002864d 	.word	0x0002864d
   18ba0:	0002af89 	.word	0x0002af89
   18ba4:	00018519 	.word	0x00018519

00018ba8 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   18ba8:	b580      	push	{r7, lr}
   18baa:	b084      	sub	sp, #16
   18bac:	af00      	add	r7, sp, #0
   18bae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18bb0:	687b      	ldr	r3, [r7, #4]
   18bb2:	681b      	ldr	r3, [r3, #0]
   18bb4:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   18bb6:	68fb      	ldr	r3, [r7, #12]
   18bb8:	7e1b      	ldrb	r3, [r3, #24]
   18bba:	b2db      	uxtb	r3, r3
   18bbc:	001a      	movs	r2, r3
   18bbe:	2302      	movs	r3, #2
   18bc0:	4013      	ands	r3, r2
   18bc2:	d00b      	beq.n	18bdc <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   18bc4:	68fb      	ldr	r3, [r7, #12]
   18bc6:	2202      	movs	r2, #2
   18bc8:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   18bca:	68fb      	ldr	r3, [r7, #12]
   18bcc:	8b5b      	ldrh	r3, [r3, #26]
   18bce:	b29b      	uxth	r3, r3
   18bd0:	001a      	movs	r2, r3
   18bd2:	2302      	movs	r3, #2
   18bd4:	4013      	ands	r3, r2
   18bd6:	d011      	beq.n	18bfc <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   18bd8:	2341      	movs	r3, #65	; 0x41
   18bda:	e010      	b.n	18bfe <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   18bdc:	68fb      	ldr	r3, [r7, #12]
   18bde:	8b5b      	ldrh	r3, [r3, #26]
   18be0:	b29b      	uxth	r3, r3
   18be2:	001a      	movs	r2, r3
   18be4:	2304      	movs	r3, #4
   18be6:	4013      	ands	r3, r2
   18be8:	d008      	beq.n	18bfc <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   18bea:	68fb      	ldr	r3, [r7, #12]
   18bec:	685b      	ldr	r3, [r3, #4]
   18bee:	22c0      	movs	r2, #192	; 0xc0
   18bf0:	0292      	lsls	r2, r2, #10
   18bf2:	431a      	orrs	r2, r3
   18bf4:	68fb      	ldr	r3, [r7, #12]
   18bf6:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   18bf8:	2318      	movs	r3, #24
   18bfa:	e000      	b.n	18bfe <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   18bfc:	2300      	movs	r3, #0
}
   18bfe:	0018      	movs	r0, r3
   18c00:	46bd      	mov	sp, r7
   18c02:	b004      	add	sp, #16
   18c04:	bd80      	pop	{r7, pc}

00018c06 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   18c06:	b580      	push	{r7, lr}
   18c08:	b084      	sub	sp, #16
   18c0a:	af00      	add	r7, sp, #0
   18c0c:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18c0e:	687b      	ldr	r3, [r7, #4]
   18c10:	681b      	ldr	r3, [r3, #0]
   18c12:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   18c14:	230e      	movs	r3, #14
   18c16:	18fb      	adds	r3, r7, r3
   18c18:	2200      	movs	r2, #0
   18c1a:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   18c1c:	e00f      	b.n	18c3e <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   18c1e:	230e      	movs	r3, #14
   18c20:	18fb      	adds	r3, r7, r3
   18c22:	220e      	movs	r2, #14
   18c24:	18ba      	adds	r2, r7, r2
   18c26:	8812      	ldrh	r2, [r2, #0]
   18c28:	3201      	adds	r2, #1
   18c2a:	801a      	strh	r2, [r3, #0]
   18c2c:	687b      	ldr	r3, [r7, #4]
   18c2e:	891b      	ldrh	r3, [r3, #8]
   18c30:	220e      	movs	r2, #14
   18c32:	18ba      	adds	r2, r7, r2
   18c34:	8812      	ldrh	r2, [r2, #0]
   18c36:	429a      	cmp	r2, r3
   18c38:	d301      	bcc.n	18c3e <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   18c3a:	2312      	movs	r3, #18
   18c3c:	e00e      	b.n	18c5c <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   18c3e:	68bb      	ldr	r3, [r7, #8]
   18c40:	7e1b      	ldrb	r3, [r3, #24]
   18c42:	b2db      	uxtb	r3, r3
   18c44:	001a      	movs	r2, r3
   18c46:	2301      	movs	r3, #1
   18c48:	4013      	ands	r3, r2
   18c4a:	d106      	bne.n	18c5a <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   18c4c:	68bb      	ldr	r3, [r7, #8]
   18c4e:	7e1b      	ldrb	r3, [r3, #24]
   18c50:	b2db      	uxtb	r3, r3
   18c52:	001a      	movs	r2, r3
   18c54:	2302      	movs	r3, #2
   18c56:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   18c58:	d0e1      	beq.n	18c1e <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   18c5a:	2300      	movs	r3, #0
}
   18c5c:	0018      	movs	r0, r3
   18c5e:	46bd      	mov	sp, r7
   18c60:	b004      	add	sp, #16
   18c62:	bd80      	pop	{r7, pc}

00018c64 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   18c64:	b590      	push	{r4, r7, lr}
   18c66:	b085      	sub	sp, #20
   18c68:	af00      	add	r7, sp, #0
   18c6a:	6078      	str	r0, [r7, #4]
   18c6c:	000a      	movs	r2, r1
   18c6e:	1cfb      	adds	r3, r7, #3
   18c70:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18c72:	687b      	ldr	r3, [r7, #4]
   18c74:	681b      	ldr	r3, [r3, #0]
   18c76:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   18c78:	68fb      	ldr	r3, [r7, #12]
   18c7a:	685b      	ldr	r3, [r3, #4]
   18c7c:	2280      	movs	r2, #128	; 0x80
   18c7e:	02d2      	lsls	r2, r2, #11
   18c80:	431a      	orrs	r2, r3
   18c82:	68fb      	ldr	r3, [r7, #12]
   18c84:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   18c86:	1cfb      	adds	r3, r7, #3
   18c88:	781a      	ldrb	r2, [r3, #0]
   18c8a:	68fb      	ldr	r3, [r7, #12]
   18c8c:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   18c8e:	230b      	movs	r3, #11
   18c90:	18fc      	adds	r4, r7, r3
   18c92:	687b      	ldr	r3, [r7, #4]
   18c94:	0018      	movs	r0, r3
   18c96:	4b07      	ldr	r3, [pc, #28]	; (18cb4 <_i2c_master_send_hs_master_code+0x50>)
   18c98:	4798      	blx	r3
   18c9a:	0003      	movs	r3, r0
   18c9c:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   18c9e:	68fb      	ldr	r3, [r7, #12]
   18ca0:	2201      	movs	r2, #1
   18ca2:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   18ca4:	230b      	movs	r3, #11
   18ca6:	18fb      	adds	r3, r7, r3
   18ca8:	781b      	ldrb	r3, [r3, #0]
}
   18caa:	0018      	movs	r0, r3
   18cac:	46bd      	mov	sp, r7
   18cae:	b005      	add	sp, #20
   18cb0:	bd90      	pop	{r4, r7, pc}
   18cb2:	46c0      	nop			; (mov r8, r8)
   18cb4:	00018c07 	.word	0x00018c07

00018cb8 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   18cb8:	b580      	push	{r7, lr}
   18cba:	af00      	add	r7, sp, #0
   18cbc:	2000      	movs	r0, #0
   18cbe:	4b02      	ldr	r3, [pc, #8]	; (18cc8 <TC3_Handler+0x10>)
   18cc0:	4798      	blx	r3
   18cc2:	46c0      	nop			; (mov r8, r8)
   18cc4:	46bd      	mov	sp, r7
   18cc6:	bd80      	pop	{r7, pc}
   18cc8:	00018cf5 	.word	0x00018cf5

00018ccc <TC4_Handler>:
   18ccc:	b580      	push	{r7, lr}
   18cce:	af00      	add	r7, sp, #0
   18cd0:	2001      	movs	r0, #1
   18cd2:	4b02      	ldr	r3, [pc, #8]	; (18cdc <TC4_Handler+0x10>)
   18cd4:	4798      	blx	r3
   18cd6:	46c0      	nop			; (mov r8, r8)
   18cd8:	46bd      	mov	sp, r7
   18cda:	bd80      	pop	{r7, pc}
   18cdc:	00018cf5 	.word	0x00018cf5

00018ce0 <TC5_Handler>:
   18ce0:	b580      	push	{r7, lr}
   18ce2:	af00      	add	r7, sp, #0
   18ce4:	2002      	movs	r0, #2
   18ce6:	4b02      	ldr	r3, [pc, #8]	; (18cf0 <TC5_Handler+0x10>)
   18ce8:	4798      	blx	r3
   18cea:	46c0      	nop			; (mov r8, r8)
   18cec:	46bd      	mov	sp, r7
   18cee:	bd80      	pop	{r7, pc}
   18cf0:	00018cf5 	.word	0x00018cf5

00018cf4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   18cf4:	b580      	push	{r7, lr}
   18cf6:	b084      	sub	sp, #16
   18cf8:	af00      	add	r7, sp, #0
   18cfa:	0002      	movs	r2, r0
   18cfc:	1dfb      	adds	r3, r7, #7
   18cfe:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   18d00:	1dfb      	adds	r3, r7, #7
   18d02:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   18d04:	4b28      	ldr	r3, [pc, #160]	; (18da8 <_tc_interrupt_handler+0xb4>)
   18d06:	0092      	lsls	r2, r2, #2
   18d08:	58d3      	ldr	r3, [r2, r3]
   18d0a:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   18d0c:	68fb      	ldr	r3, [r7, #12]
   18d0e:	681b      	ldr	r3, [r3, #0]
   18d10:	7b9b      	ldrb	r3, [r3, #14]
   18d12:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   18d14:	68fa      	ldr	r2, [r7, #12]
   18d16:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   18d18:	4013      	ands	r3, r2
   18d1a:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   18d1c:	68fb      	ldr	r3, [r7, #12]
   18d1e:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   18d20:	230b      	movs	r3, #11
   18d22:	18fb      	adds	r3, r7, r3
   18d24:	400a      	ands	r2, r1
   18d26:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   18d28:	230b      	movs	r3, #11
   18d2a:	18fb      	adds	r3, r7, r3
   18d2c:	781b      	ldrb	r3, [r3, #0]
   18d2e:	2201      	movs	r2, #1
   18d30:	4013      	ands	r3, r2
   18d32:	d008      	beq.n	18d46 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   18d34:	68fb      	ldr	r3, [r7, #12]
   18d36:	689b      	ldr	r3, [r3, #8]
   18d38:	68fa      	ldr	r2, [r7, #12]
   18d3a:	0010      	movs	r0, r2
   18d3c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   18d3e:	68fb      	ldr	r3, [r7, #12]
   18d40:	681b      	ldr	r3, [r3, #0]
   18d42:	2201      	movs	r2, #1
   18d44:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   18d46:	230b      	movs	r3, #11
   18d48:	18fb      	adds	r3, r7, r3
   18d4a:	781b      	ldrb	r3, [r3, #0]
   18d4c:	2202      	movs	r2, #2
   18d4e:	4013      	ands	r3, r2
   18d50:	d008      	beq.n	18d64 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   18d52:	68fb      	ldr	r3, [r7, #12]
   18d54:	68db      	ldr	r3, [r3, #12]
   18d56:	68fa      	ldr	r2, [r7, #12]
   18d58:	0010      	movs	r0, r2
   18d5a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   18d5c:	68fb      	ldr	r3, [r7, #12]
   18d5e:	681b      	ldr	r3, [r3, #0]
   18d60:	2202      	movs	r2, #2
   18d62:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   18d64:	230b      	movs	r3, #11
   18d66:	18fb      	adds	r3, r7, r3
   18d68:	781b      	ldrb	r3, [r3, #0]
   18d6a:	2210      	movs	r2, #16
   18d6c:	4013      	ands	r3, r2
   18d6e:	d008      	beq.n	18d82 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   18d70:	68fb      	ldr	r3, [r7, #12]
   18d72:	691b      	ldr	r3, [r3, #16]
   18d74:	68fa      	ldr	r2, [r7, #12]
   18d76:	0010      	movs	r0, r2
   18d78:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   18d7a:	68fb      	ldr	r3, [r7, #12]
   18d7c:	681b      	ldr	r3, [r3, #0]
   18d7e:	2210      	movs	r2, #16
   18d80:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   18d82:	230b      	movs	r3, #11
   18d84:	18fb      	adds	r3, r7, r3
   18d86:	781b      	ldrb	r3, [r3, #0]
   18d88:	2220      	movs	r2, #32
   18d8a:	4013      	ands	r3, r2
   18d8c:	d008      	beq.n	18da0 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   18d8e:	68fb      	ldr	r3, [r7, #12]
   18d90:	695b      	ldr	r3, [r3, #20]
   18d92:	68fa      	ldr	r2, [r7, #12]
   18d94:	0010      	movs	r0, r2
   18d96:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   18d98:	68fb      	ldr	r3, [r7, #12]
   18d9a:	681b      	ldr	r3, [r3, #0]
   18d9c:	2220      	movs	r2, #32
   18d9e:	739a      	strb	r2, [r3, #14]
	}
}
   18da0:	46c0      	nop			; (mov r8, r8)
   18da2:	46bd      	mov	sp, r7
   18da4:	b004      	add	sp, #16
   18da6:	bd80      	pop	{r7, pc}
   18da8:	20004a84 	.word	0x20004a84

00018dac <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   18dac:	b580      	push	{r7, lr}
   18dae:	b084      	sub	sp, #16
   18db0:	af00      	add	r7, sp, #0
   18db2:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   18db4:	2300      	movs	r3, #0
   18db6:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   18db8:	687b      	ldr	r3, [r7, #4]
   18dba:	2b00      	cmp	r3, #0
   18dbc:	d101      	bne.n	18dc2 <FreeRTOS_CLIRegisterCommand+0x16>
   18dbe:	b672      	cpsid	i
   18dc0:	e7fe      	b.n	18dc0 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   18dc2:	2008      	movs	r0, #8
   18dc4:	4b11      	ldr	r3, [pc, #68]	; (18e0c <FreeRTOS_CLIRegisterCommand+0x60>)
   18dc6:	4798      	blx	r3
   18dc8:	0003      	movs	r3, r0
   18dca:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   18dcc:	68bb      	ldr	r3, [r7, #8]
   18dce:	2b00      	cmp	r3, #0
   18dd0:	d101      	bne.n	18dd6 <FreeRTOS_CLIRegisterCommand+0x2a>
   18dd2:	b672      	cpsid	i
   18dd4:	e7fe      	b.n	18dd4 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   18dd6:	68bb      	ldr	r3, [r7, #8]
   18dd8:	2b00      	cmp	r3, #0
   18dda:	d012      	beq.n	18e02 <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   18ddc:	4b0c      	ldr	r3, [pc, #48]	; (18e10 <FreeRTOS_CLIRegisterCommand+0x64>)
   18dde:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   18de0:	68bb      	ldr	r3, [r7, #8]
   18de2:	687a      	ldr	r2, [r7, #4]
   18de4:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   18de6:	68bb      	ldr	r3, [r7, #8]
   18de8:	2200      	movs	r2, #0
   18dea:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   18dec:	4b09      	ldr	r3, [pc, #36]	; (18e14 <FreeRTOS_CLIRegisterCommand+0x68>)
   18dee:	681b      	ldr	r3, [r3, #0]
   18df0:	68ba      	ldr	r2, [r7, #8]
   18df2:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   18df4:	4b07      	ldr	r3, [pc, #28]	; (18e14 <FreeRTOS_CLIRegisterCommand+0x68>)
   18df6:	68ba      	ldr	r2, [r7, #8]
   18df8:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   18dfa:	4b07      	ldr	r3, [pc, #28]	; (18e18 <FreeRTOS_CLIRegisterCommand+0x6c>)
   18dfc:	4798      	blx	r3

		xReturn = pdPASS;
   18dfe:	2301      	movs	r3, #1
   18e00:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   18e02:	68fb      	ldr	r3, [r7, #12]
}
   18e04:	0018      	movs	r0, r3
   18e06:	46bd      	mov	sp, r7
   18e08:	b004      	add	sp, #16
   18e0a:	bd80      	pop	{r7, pc}
   18e0c:	0001b1c1 	.word	0x0001b1c1
   18e10:	0001b089 	.word	0x0001b089
   18e14:	20000100 	.word	0x20000100
   18e18:	0001b0ad 	.word	0x0001b0ad

00018e1c <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   18e1c:	b580      	push	{r7, lr}
   18e1e:	b088      	sub	sp, #32
   18e20:	af00      	add	r7, sp, #0
   18e22:	60f8      	str	r0, [r7, #12]
   18e24:	60b9      	str	r1, [r7, #8]
   18e26:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   18e28:	2301      	movs	r3, #1
   18e2a:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   18e2c:	4b3d      	ldr	r3, [pc, #244]	; (18f24 <FreeRTOS_CLIProcessCommand+0x108>)
   18e2e:	681b      	ldr	r3, [r3, #0]
   18e30:	2b00      	cmp	r3, #0
   18e32:	d144      	bne.n	18ebe <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   18e34:	4b3b      	ldr	r3, [pc, #236]	; (18f24 <FreeRTOS_CLIProcessCommand+0x108>)
   18e36:	4a3c      	ldr	r2, [pc, #240]	; (18f28 <FreeRTOS_CLIProcessCommand+0x10c>)
   18e38:	601a      	str	r2, [r3, #0]
   18e3a:	e03a      	b.n	18eb2 <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   18e3c:	4b39      	ldr	r3, [pc, #228]	; (18f24 <FreeRTOS_CLIProcessCommand+0x108>)
   18e3e:	681b      	ldr	r3, [r3, #0]
   18e40:	681b      	ldr	r3, [r3, #0]
   18e42:	681b      	ldr	r3, [r3, #0]
   18e44:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   18e46:	69bb      	ldr	r3, [r7, #24]
   18e48:	0018      	movs	r0, r3
   18e4a:	4b38      	ldr	r3, [pc, #224]	; (18f2c <FreeRTOS_CLIProcessCommand+0x110>)
   18e4c:	4798      	blx	r3
   18e4e:	0003      	movs	r3, r0
   18e50:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   18e52:	68fa      	ldr	r2, [r7, #12]
   18e54:	697b      	ldr	r3, [r7, #20]
   18e56:	18d3      	adds	r3, r2, r3
   18e58:	781b      	ldrb	r3, [r3, #0]
   18e5a:	2b20      	cmp	r3, #32
   18e5c:	d005      	beq.n	18e6a <FreeRTOS_CLIProcessCommand+0x4e>
   18e5e:	68fa      	ldr	r2, [r7, #12]
   18e60:	697b      	ldr	r3, [r7, #20]
   18e62:	18d3      	adds	r3, r2, r3
   18e64:	781b      	ldrb	r3, [r3, #0]
   18e66:	2b00      	cmp	r3, #0
   18e68:	d11e      	bne.n	18ea8 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   18e6a:	697a      	ldr	r2, [r7, #20]
   18e6c:	69b9      	ldr	r1, [r7, #24]
   18e6e:	68fb      	ldr	r3, [r7, #12]
   18e70:	0018      	movs	r0, r3
   18e72:	4b2f      	ldr	r3, [pc, #188]	; (18f30 <FreeRTOS_CLIProcessCommand+0x114>)
   18e74:	4798      	blx	r3
   18e76:	1e03      	subs	r3, r0, #0
   18e78:	d116      	bne.n	18ea8 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   18e7a:	4b2a      	ldr	r3, [pc, #168]	; (18f24 <FreeRTOS_CLIProcessCommand+0x108>)
   18e7c:	681b      	ldr	r3, [r3, #0]
   18e7e:	681b      	ldr	r3, [r3, #0]
   18e80:	7b1b      	ldrb	r3, [r3, #12]
   18e82:	b25b      	sxtb	r3, r3
   18e84:	2b00      	cmp	r3, #0
   18e86:	db19      	blt.n	18ebc <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   18e88:	68fb      	ldr	r3, [r7, #12]
   18e8a:	0018      	movs	r0, r3
   18e8c:	4b29      	ldr	r3, [pc, #164]	; (18f34 <FreeRTOS_CLIProcessCommand+0x118>)
   18e8e:	4798      	blx	r3
   18e90:	0003      	movs	r3, r0
   18e92:	001a      	movs	r2, r3
   18e94:	4b23      	ldr	r3, [pc, #140]	; (18f24 <FreeRTOS_CLIProcessCommand+0x108>)
   18e96:	681b      	ldr	r3, [r3, #0]
   18e98:	681b      	ldr	r3, [r3, #0]
   18e9a:	7b1b      	ldrb	r3, [r3, #12]
   18e9c:	b25b      	sxtb	r3, r3
   18e9e:	429a      	cmp	r2, r3
   18ea0:	d00c      	beq.n	18ebc <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   18ea2:	2300      	movs	r3, #0
   18ea4:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   18ea6:	e009      	b.n	18ebc <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   18ea8:	4b1e      	ldr	r3, [pc, #120]	; (18f24 <FreeRTOS_CLIProcessCommand+0x108>)
   18eaa:	681b      	ldr	r3, [r3, #0]
   18eac:	685a      	ldr	r2, [r3, #4]
   18eae:	4b1d      	ldr	r3, [pc, #116]	; (18f24 <FreeRTOS_CLIProcessCommand+0x108>)
   18eb0:	601a      	str	r2, [r3, #0]
   18eb2:	4b1c      	ldr	r3, [pc, #112]	; (18f24 <FreeRTOS_CLIProcessCommand+0x108>)
   18eb4:	681b      	ldr	r3, [r3, #0]
   18eb6:	2b00      	cmp	r3, #0
   18eb8:	d1c0      	bne.n	18e3c <FreeRTOS_CLIProcessCommand+0x20>
   18eba:	e000      	b.n	18ebe <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   18ebc:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   18ebe:	4b19      	ldr	r3, [pc, #100]	; (18f24 <FreeRTOS_CLIProcessCommand+0x108>)
   18ec0:	681b      	ldr	r3, [r3, #0]
   18ec2:	2b00      	cmp	r3, #0
   18ec4:	d00c      	beq.n	18ee0 <FreeRTOS_CLIProcessCommand+0xc4>
   18ec6:	69fb      	ldr	r3, [r7, #28]
   18ec8:	2b00      	cmp	r3, #0
   18eca:	d109      	bne.n	18ee0 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   18ecc:	687a      	ldr	r2, [r7, #4]
   18ece:	491a      	ldr	r1, [pc, #104]	; (18f38 <FreeRTOS_CLIProcessCommand+0x11c>)
   18ed0:	68bb      	ldr	r3, [r7, #8]
   18ed2:	0018      	movs	r0, r3
   18ed4:	4b19      	ldr	r3, [pc, #100]	; (18f3c <FreeRTOS_CLIProcessCommand+0x120>)
   18ed6:	4798      	blx	r3
		pxCommand = NULL;
   18ed8:	4b12      	ldr	r3, [pc, #72]	; (18f24 <FreeRTOS_CLIProcessCommand+0x108>)
   18eda:	2200      	movs	r2, #0
   18edc:	601a      	str	r2, [r3, #0]
   18ede:	e01c      	b.n	18f1a <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   18ee0:	4b10      	ldr	r3, [pc, #64]	; (18f24 <FreeRTOS_CLIProcessCommand+0x108>)
   18ee2:	681b      	ldr	r3, [r3, #0]
   18ee4:	2b00      	cmp	r3, #0
   18ee6:	d010      	beq.n	18f0a <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   18ee8:	4b0e      	ldr	r3, [pc, #56]	; (18f24 <FreeRTOS_CLIProcessCommand+0x108>)
   18eea:	681b      	ldr	r3, [r3, #0]
   18eec:	681b      	ldr	r3, [r3, #0]
   18eee:	689b      	ldr	r3, [r3, #8]
   18ef0:	68fa      	ldr	r2, [r7, #12]
   18ef2:	6879      	ldr	r1, [r7, #4]
   18ef4:	68b8      	ldr	r0, [r7, #8]
   18ef6:	4798      	blx	r3
   18ef8:	0003      	movs	r3, r0
   18efa:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   18efc:	69fb      	ldr	r3, [r7, #28]
   18efe:	2b00      	cmp	r3, #0
   18f00:	d10b      	bne.n	18f1a <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   18f02:	4b08      	ldr	r3, [pc, #32]	; (18f24 <FreeRTOS_CLIProcessCommand+0x108>)
   18f04:	2200      	movs	r2, #0
   18f06:	601a      	str	r2, [r3, #0]
   18f08:	e007      	b.n	18f1a <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   18f0a:	687a      	ldr	r2, [r7, #4]
   18f0c:	490c      	ldr	r1, [pc, #48]	; (18f40 <FreeRTOS_CLIProcessCommand+0x124>)
   18f0e:	68bb      	ldr	r3, [r7, #8]
   18f10:	0018      	movs	r0, r3
   18f12:	4b0a      	ldr	r3, [pc, #40]	; (18f3c <FreeRTOS_CLIProcessCommand+0x120>)
   18f14:	4798      	blx	r3
		xReturn = pdFALSE;
   18f16:	2300      	movs	r3, #0
   18f18:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   18f1a:	69fb      	ldr	r3, [r7, #28]
}
   18f1c:	0018      	movs	r0, r3
   18f1e:	46bd      	mov	sp, r7
   18f20:	b008      	add	sp, #32
   18f22:	bd80      	pop	{r7, pc}
   18f24:	20000cd8 	.word	0x20000cd8
   18f28:	200000f8 	.word	0x200000f8
   18f2c:	000367f7 	.word	0x000367f7
   18f30:	00036805 	.word	0x00036805
   18f34:	00018fa5 	.word	0x00018fa5
   18f38:	00038bf0 	.word	0x00038bf0
   18f3c:	00036827 	.word	0x00036827
   18f40:	00038c48 	.word	0x00038c48

00018f44 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   18f44:	b580      	push	{r7, lr}
   18f46:	b086      	sub	sp, #24
   18f48:	af00      	add	r7, sp, #0
   18f4a:	60f8      	str	r0, [r7, #12]
   18f4c:	60b9      	str	r1, [r7, #8]
   18f4e:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   18f50:	4b11      	ldr	r3, [pc, #68]	; (18f98 <prvHelpCommand+0x54>)
   18f52:	681b      	ldr	r3, [r3, #0]
   18f54:	2b00      	cmp	r3, #0
   18f56:	d102      	bne.n	18f5e <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   18f58:	4b0f      	ldr	r3, [pc, #60]	; (18f98 <prvHelpCommand+0x54>)
   18f5a:	4a10      	ldr	r2, [pc, #64]	; (18f9c <prvHelpCommand+0x58>)
   18f5c:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   18f5e:	4b0e      	ldr	r3, [pc, #56]	; (18f98 <prvHelpCommand+0x54>)
   18f60:	681b      	ldr	r3, [r3, #0]
   18f62:	681b      	ldr	r3, [r3, #0]
   18f64:	6859      	ldr	r1, [r3, #4]
   18f66:	68ba      	ldr	r2, [r7, #8]
   18f68:	68fb      	ldr	r3, [r7, #12]
   18f6a:	0018      	movs	r0, r3
   18f6c:	4b0c      	ldr	r3, [pc, #48]	; (18fa0 <prvHelpCommand+0x5c>)
   18f6e:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   18f70:	4b09      	ldr	r3, [pc, #36]	; (18f98 <prvHelpCommand+0x54>)
   18f72:	681b      	ldr	r3, [r3, #0]
   18f74:	685a      	ldr	r2, [r3, #4]
   18f76:	4b08      	ldr	r3, [pc, #32]	; (18f98 <prvHelpCommand+0x54>)
   18f78:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   18f7a:	4b07      	ldr	r3, [pc, #28]	; (18f98 <prvHelpCommand+0x54>)
   18f7c:	681b      	ldr	r3, [r3, #0]
   18f7e:	2b00      	cmp	r3, #0
   18f80:	d102      	bne.n	18f88 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   18f82:	2300      	movs	r3, #0
   18f84:	617b      	str	r3, [r7, #20]
   18f86:	e001      	b.n	18f8c <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   18f88:	2301      	movs	r3, #1
   18f8a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   18f8c:	697b      	ldr	r3, [r7, #20]
}
   18f8e:	0018      	movs	r0, r3
   18f90:	46bd      	mov	sp, r7
   18f92:	b006      	add	sp, #24
   18f94:	bd80      	pop	{r7, pc}
   18f96:	46c0      	nop			; (mov r8, r8)
   18f98:	20000cdc 	.word	0x20000cdc
   18f9c:	200000f8 	.word	0x200000f8
   18fa0:	00036827 	.word	0x00036827

00018fa4 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   18fa4:	b580      	push	{r7, lr}
   18fa6:	b084      	sub	sp, #16
   18fa8:	af00      	add	r7, sp, #0
   18faa:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   18fac:	230f      	movs	r3, #15
   18fae:	18fb      	adds	r3, r7, r3
   18fb0:	2200      	movs	r2, #0
   18fb2:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   18fb4:	2300      	movs	r3, #0
   18fb6:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   18fb8:	e018      	b.n	18fec <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   18fba:	687b      	ldr	r3, [r7, #4]
   18fbc:	781b      	ldrb	r3, [r3, #0]
   18fbe:	2b20      	cmp	r3, #32
   18fc0:	d10f      	bne.n	18fe2 <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   18fc2:	68bb      	ldr	r3, [r7, #8]
   18fc4:	2b01      	cmp	r3, #1
   18fc6:	d00e      	beq.n	18fe6 <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   18fc8:	230f      	movs	r3, #15
   18fca:	18fb      	adds	r3, r7, r3
   18fcc:	781b      	ldrb	r3, [r3, #0]
   18fce:	b25b      	sxtb	r3, r3
   18fd0:	b2db      	uxtb	r3, r3
   18fd2:	3301      	adds	r3, #1
   18fd4:	b2da      	uxtb	r2, r3
   18fd6:	230f      	movs	r3, #15
   18fd8:	18fb      	adds	r3, r7, r3
   18fda:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   18fdc:	2301      	movs	r3, #1
   18fde:	60bb      	str	r3, [r7, #8]
   18fe0:	e001      	b.n	18fe6 <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   18fe2:	2300      	movs	r3, #0
   18fe4:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   18fe6:	687b      	ldr	r3, [r7, #4]
   18fe8:	3301      	adds	r3, #1
   18fea:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   18fec:	687b      	ldr	r3, [r7, #4]
   18fee:	781b      	ldrb	r3, [r3, #0]
   18ff0:	2b00      	cmp	r3, #0
   18ff2:	d1e2      	bne.n	18fba <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   18ff4:	68bb      	ldr	r3, [r7, #8]
   18ff6:	2b01      	cmp	r3, #1
   18ff8:	d109      	bne.n	1900e <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   18ffa:	230f      	movs	r3, #15
   18ffc:	18fb      	adds	r3, r7, r3
   18ffe:	781b      	ldrb	r3, [r3, #0]
   19000:	b25b      	sxtb	r3, r3
   19002:	b2db      	uxtb	r3, r3
   19004:	3b01      	subs	r3, #1
   19006:	b2da      	uxtb	r2, r3
   19008:	230f      	movs	r3, #15
   1900a:	18fb      	adds	r3, r7, r3
   1900c:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   1900e:	230f      	movs	r3, #15
   19010:	18fb      	adds	r3, r7, r3
   19012:	781b      	ldrb	r3, [r3, #0]
   19014:	b25b      	sxtb	r3, r3
}
   19016:	0018      	movs	r0, r3
   19018:	46bd      	mov	sp, r7
   1901a:	b004      	add	sp, #16
   1901c:	bd80      	pop	{r7, pc}
	...

00019020 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   19020:	b580      	push	{r7, lr}
   19022:	b082      	sub	sp, #8
   19024:	af00      	add	r7, sp, #0
   19026:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   19028:	687b      	ldr	r3, [r7, #4]
   1902a:	0018      	movs	r0, r3
   1902c:	4b03      	ldr	r3, [pc, #12]	; (1903c <prvTraceGetQueueNumber+0x1c>)
   1902e:	4798      	blx	r3
   19030:	0003      	movs	r3, r0
}
   19032:	0018      	movs	r0, r3
   19034:	46bd      	mov	sp, r7
   19036:	b002      	add	sp, #8
   19038:	bd80      	pop	{r7, pc}
   1903a:	46c0      	nop			; (mov r8, r8)
   1903c:	0001c7e5 	.word	0x0001c7e5

00019040 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   19040:	b580      	push	{r7, lr}
   19042:	b082      	sub	sp, #8
   19044:	af00      	add	r7, sp, #0
   19046:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   19048:	687b      	ldr	r3, [r7, #4]
   1904a:	0018      	movs	r0, r3
   1904c:	4b03      	ldr	r3, [pc, #12]	; (1905c <prvTraceGetQueueType+0x1c>)
   1904e:	4798      	blx	r3
   19050:	0003      	movs	r3, r0
}
   19052:	0018      	movs	r0, r3
   19054:	46bd      	mov	sp, r7
   19056:	b002      	add	sp, #8
   19058:	bd80      	pop	{r7, pc}
   1905a:	46c0      	nop			; (mov r8, r8)
   1905c:	0001c811 	.word	0x0001c811

00019060 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   19060:	b580      	push	{r7, lr}
   19062:	b082      	sub	sp, #8
   19064:	af00      	add	r7, sp, #0
   19066:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   19068:	687b      	ldr	r3, [r7, #4]
   1906a:	0018      	movs	r0, r3
   1906c:	4b03      	ldr	r3, [pc, #12]	; (1907c <prvTraceGetTaskNumberLow16+0x1c>)
   1906e:	4798      	blx	r3
   19070:	0003      	movs	r3, r0
   19072:	b29b      	uxth	r3, r3
}
   19074:	0018      	movs	r0, r3
   19076:	46bd      	mov	sp, r7
   19078:	b002      	add	sp, #8
   1907a:	bd80      	pop	{r7, pc}
   1907c:	0001db41 	.word	0x0001db41

00019080 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   19080:	b580      	push	{r7, lr}
   19082:	b082      	sub	sp, #8
   19084:	af00      	add	r7, sp, #0
   19086:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   19088:	687b      	ldr	r3, [r7, #4]
   1908a:	0018      	movs	r0, r3
   1908c:	4b04      	ldr	r3, [pc, #16]	; (190a0 <prvTraceGetTaskNumberHigh16+0x20>)
   1908e:	4798      	blx	r3
   19090:	0003      	movs	r3, r0
   19092:	0c1b      	lsrs	r3, r3, #16
   19094:	b29b      	uxth	r3, r3
}
   19096:	0018      	movs	r0, r3
   19098:	46bd      	mov	sp, r7
   1909a:	b002      	add	sp, #8
   1909c:	bd80      	pop	{r7, pc}
   1909e:	46c0      	nop			; (mov r8, r8)
   190a0:	0001db41 	.word	0x0001db41

000190a4 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   190a4:	b580      	push	{r7, lr}
   190a6:	b082      	sub	sp, #8
   190a8:	af00      	add	r7, sp, #0
   190aa:	6078      	str	r0, [r7, #4]
   190ac:	000a      	movs	r2, r1
   190ae:	1cbb      	adds	r3, r7, #2
   190b0:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   190b2:	687b      	ldr	r3, [r7, #4]
   190b4:	0018      	movs	r0, r3
   190b6:	4b08      	ldr	r3, [pc, #32]	; (190d8 <prvTraceSetTaskNumberLow16+0x34>)
   190b8:	4798      	blx	r3
   190ba:	0003      	movs	r3, r0
   190bc:	0c1b      	lsrs	r3, r3, #16
   190be:	041a      	lsls	r2, r3, #16
   190c0:	1cbb      	adds	r3, r7, #2
   190c2:	881b      	ldrh	r3, [r3, #0]
   190c4:	431a      	orrs	r2, r3
   190c6:	687b      	ldr	r3, [r7, #4]
   190c8:	0011      	movs	r1, r2
   190ca:	0018      	movs	r0, r3
   190cc:	4b03      	ldr	r3, [pc, #12]	; (190dc <prvTraceSetTaskNumberLow16+0x38>)
   190ce:	4798      	blx	r3
}
   190d0:	46c0      	nop			; (mov r8, r8)
   190d2:	46bd      	mov	sp, r7
   190d4:	b002      	add	sp, #8
   190d6:	bd80      	pop	{r7, pc}
   190d8:	0001db41 	.word	0x0001db41
   190dc:	0001db69 	.word	0x0001db69

000190e0 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   190e0:	b580      	push	{r7, lr}
   190e2:	b082      	sub	sp, #8
   190e4:	af00      	add	r7, sp, #0
   190e6:	6078      	str	r0, [r7, #4]
   190e8:	000a      	movs	r2, r1
   190ea:	1cbb      	adds	r3, r7, #2
   190ec:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   190ee:	687b      	ldr	r3, [r7, #4]
   190f0:	0018      	movs	r0, r3
   190f2:	4b09      	ldr	r3, [pc, #36]	; (19118 <prvTraceSetTaskNumberHigh16+0x38>)
   190f4:	4798      	blx	r3
   190f6:	0003      	movs	r3, r0
   190f8:	041b      	lsls	r3, r3, #16
   190fa:	0c1a      	lsrs	r2, r3, #16
   190fc:	1cbb      	adds	r3, r7, #2
   190fe:	881b      	ldrh	r3, [r3, #0]
   19100:	041b      	lsls	r3, r3, #16
   19102:	431a      	orrs	r2, r3
   19104:	687b      	ldr	r3, [r7, #4]
   19106:	0011      	movs	r1, r2
   19108:	0018      	movs	r0, r3
   1910a:	4b04      	ldr	r3, [pc, #16]	; (1911c <prvTraceSetTaskNumberHigh16+0x3c>)
   1910c:	4798      	blx	r3
}
   1910e:	46c0      	nop			; (mov r8, r8)
   19110:	46bd      	mov	sp, r7
   19112:	b002      	add	sp, #8
   19114:	bd80      	pop	{r7, pc}
   19116:	46c0      	nop			; (mov r8, r8)
   19118:	0001db41 	.word	0x0001db41
   1911c:	0001db69 	.word	0x0001db69

00019120 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   19120:	b580      	push	{r7, lr}
   19122:	b082      	sub	sp, #8
   19124:	af00      	add	r7, sp, #0
   19126:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   19128:	687b      	ldr	r3, [r7, #4]
   1912a:	0018      	movs	r0, r3
   1912c:	4b03      	ldr	r3, [pc, #12]	; (1913c <prvTraceGetQueueNumberLow16+0x1c>)
   1912e:	4798      	blx	r3
   19130:	0003      	movs	r3, r0
   19132:	b29b      	uxth	r3, r3
}
   19134:	0018      	movs	r0, r3
   19136:	46bd      	mov	sp, r7
   19138:	b002      	add	sp, #8
   1913a:	bd80      	pop	{r7, pc}
   1913c:	00019021 	.word	0x00019021

00019140 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   19140:	b580      	push	{r7, lr}
   19142:	b082      	sub	sp, #8
   19144:	af00      	add	r7, sp, #0
   19146:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   19148:	687b      	ldr	r3, [r7, #4]
   1914a:	0018      	movs	r0, r3
   1914c:	4b04      	ldr	r3, [pc, #16]	; (19160 <prvTraceGetQueueNumberHigh16+0x20>)
   1914e:	4798      	blx	r3
   19150:	0003      	movs	r3, r0
   19152:	0c1b      	lsrs	r3, r3, #16
   19154:	b29b      	uxth	r3, r3
}
   19156:	0018      	movs	r0, r3
   19158:	46bd      	mov	sp, r7
   1915a:	b002      	add	sp, #8
   1915c:	bd80      	pop	{r7, pc}
   1915e:	46c0      	nop			; (mov r8, r8)
   19160:	00019021 	.word	0x00019021

00019164 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   19164:	b580      	push	{r7, lr}
   19166:	b082      	sub	sp, #8
   19168:	af00      	add	r7, sp, #0
   1916a:	6078      	str	r0, [r7, #4]
   1916c:	000a      	movs	r2, r1
   1916e:	1cbb      	adds	r3, r7, #2
   19170:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   19172:	687b      	ldr	r3, [r7, #4]
   19174:	0018      	movs	r0, r3
   19176:	4b08      	ldr	r3, [pc, #32]	; (19198 <prvTraceSetQueueNumberLow16+0x34>)
   19178:	4798      	blx	r3
   1917a:	0003      	movs	r3, r0
   1917c:	0c1b      	lsrs	r3, r3, #16
   1917e:	041a      	lsls	r2, r3, #16
   19180:	1cbb      	adds	r3, r7, #2
   19182:	881b      	ldrh	r3, [r3, #0]
   19184:	431a      	orrs	r2, r3
   19186:	687b      	ldr	r3, [r7, #4]
   19188:	0011      	movs	r1, r2
   1918a:	0018      	movs	r0, r3
   1918c:	4b03      	ldr	r3, [pc, #12]	; (1919c <prvTraceSetQueueNumberLow16+0x38>)
   1918e:	4798      	blx	r3
}
   19190:	46c0      	nop			; (mov r8, r8)
   19192:	46bd      	mov	sp, r7
   19194:	b002      	add	sp, #8
   19196:	bd80      	pop	{r7, pc}
   19198:	00019021 	.word	0x00019021
   1919c:	0001c7f9 	.word	0x0001c7f9

000191a0 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   191a0:	b580      	push	{r7, lr}
   191a2:	b082      	sub	sp, #8
   191a4:	af00      	add	r7, sp, #0
   191a6:	6078      	str	r0, [r7, #4]
   191a8:	000a      	movs	r2, r1
   191aa:	1cbb      	adds	r3, r7, #2
   191ac:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   191ae:	687b      	ldr	r3, [r7, #4]
   191b0:	0018      	movs	r0, r3
   191b2:	4b09      	ldr	r3, [pc, #36]	; (191d8 <prvTraceSetQueueNumberHigh16+0x38>)
   191b4:	4798      	blx	r3
   191b6:	0003      	movs	r3, r0
   191b8:	041b      	lsls	r3, r3, #16
   191ba:	0c1a      	lsrs	r2, r3, #16
   191bc:	1cbb      	adds	r3, r7, #2
   191be:	881b      	ldrh	r3, [r3, #0]
   191c0:	041b      	lsls	r3, r3, #16
   191c2:	431a      	orrs	r2, r3
   191c4:	687b      	ldr	r3, [r7, #4]
   191c6:	0011      	movs	r1, r2
   191c8:	0018      	movs	r0, r3
   191ca:	4b04      	ldr	r3, [pc, #16]	; (191dc <prvTraceSetQueueNumberHigh16+0x3c>)
   191cc:	4798      	blx	r3
}
   191ce:	46c0      	nop			; (mov r8, r8)
   191d0:	46bd      	mov	sp, r7
   191d2:	b002      	add	sp, #8
   191d4:	bd80      	pop	{r7, pc}
   191d6:	46c0      	nop			; (mov r8, r8)
   191d8:	00019021 	.word	0x00019021
   191dc:	0001c7f9 	.word	0x0001c7f9

000191e0 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   191e0:	b580      	push	{r7, lr}
   191e2:	b084      	sub	sp, #16
   191e4:	af00      	add	r7, sp, #0
   191e6:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   191e8:	2300      	movs	r3, #0
   191ea:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   191ec:	2300      	movs	r3, #0
   191ee:	60bb      	str	r3, [r7, #8]
   191f0:	e018      	b.n	19224 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   191f2:	4b14      	ldr	r3, [pc, #80]	; (19244 <prvAddTaskToStackMonitor+0x64>)
   191f4:	68ba      	ldr	r2, [r7, #8]
   191f6:	00d2      	lsls	r2, r2, #3
   191f8:	58d3      	ldr	r3, [r2, r3]
   191fa:	2b00      	cmp	r3, #0
   191fc:	d10f      	bne.n	1921e <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   191fe:	4b11      	ldr	r3, [pc, #68]	; (19244 <prvAddTaskToStackMonitor+0x64>)
   19200:	68ba      	ldr	r2, [r7, #8]
   19202:	00d2      	lsls	r2, r2, #3
   19204:	6879      	ldr	r1, [r7, #4]
   19206:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   19208:	4a0e      	ldr	r2, [pc, #56]	; (19244 <prvAddTaskToStackMonitor+0x64>)
   1920a:	68bb      	ldr	r3, [r7, #8]
   1920c:	00db      	lsls	r3, r3, #3
   1920e:	18d3      	adds	r3, r2, r3
   19210:	3304      	adds	r3, #4
   19212:	2201      	movs	r2, #1
   19214:	4252      	negs	r2, r2
   19216:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   19218:	2301      	movs	r3, #1
   1921a:	60fb      	str	r3, [r7, #12]
			break;
   1921c:	e005      	b.n	1922a <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   1921e:	68bb      	ldr	r3, [r7, #8]
   19220:	3301      	adds	r3, #1
   19222:	60bb      	str	r3, [r7, #8]
   19224:	68bb      	ldr	r3, [r7, #8]
   19226:	2b09      	cmp	r3, #9
   19228:	dde3      	ble.n	191f2 <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   1922a:	68fb      	ldr	r3, [r7, #12]
   1922c:	2b00      	cmp	r3, #0
   1922e:	d104      	bne.n	1923a <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   19230:	4b05      	ldr	r3, [pc, #20]	; (19248 <prvAddTaskToStackMonitor+0x68>)
   19232:	681b      	ldr	r3, [r3, #0]
   19234:	1c5a      	adds	r2, r3, #1
   19236:	4b04      	ldr	r3, [pc, #16]	; (19248 <prvAddTaskToStackMonitor+0x68>)
   19238:	601a      	str	r2, [r3, #0]
	}
}
   1923a:	46c0      	nop			; (mov r8, r8)
   1923c:	46bd      	mov	sp, r7
   1923e:	b004      	add	sp, #16
   19240:	bd80      	pop	{r7, pc}
   19242:	46c0      	nop			; (mov r8, r8)
   19244:	20000ce4 	.word	0x20000ce4
   19248:	20000d34 	.word	0x20000d34

0001924c <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   1924c:	b590      	push	{r4, r7, lr}
   1924e:	b085      	sub	sp, #20
   19250:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   19252:	2300      	movs	r3, #0
   19254:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   19256:	4b2b      	ldr	r3, [pc, #172]	; (19304 <prvReportStackUsage+0xb8>)
   19258:	681b      	ldr	r3, [r3, #0]
   1925a:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   1925c:	4b29      	ldr	r3, [pc, #164]	; (19304 <prvReportStackUsage+0xb8>)
   1925e:	681a      	ldr	r2, [r3, #0]
   19260:	4b29      	ldr	r3, [pc, #164]	; (19308 <prvReportStackUsage+0xbc>)
   19262:	00d2      	lsls	r2, r2, #3
   19264:	58d3      	ldr	r3, [r2, r3]
   19266:	2b00      	cmp	r3, #0
   19268:	d035      	beq.n	192d6 <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   1926a:	4b26      	ldr	r3, [pc, #152]	; (19304 <prvReportStackUsage+0xb8>)
   1926c:	681a      	ldr	r2, [r3, #0]
   1926e:	4b26      	ldr	r3, [pc, #152]	; (19308 <prvReportStackUsage+0xbc>)
   19270:	00d2      	lsls	r2, r2, #3
   19272:	58d3      	ldr	r3, [r2, r3]
   19274:	0018      	movs	r0, r3
   19276:	4b25      	ldr	r3, [pc, #148]	; (1930c <prvReportStackUsage+0xc0>)
   19278:	4798      	blx	r3
   1927a:	0003      	movs	r3, r0
   1927c:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   1927e:	4b21      	ldr	r3, [pc, #132]	; (19304 <prvReportStackUsage+0xb8>)
   19280:	681b      	ldr	r3, [r3, #0]
   19282:	4a21      	ldr	r2, [pc, #132]	; (19308 <prvReportStackUsage+0xbc>)
   19284:	00db      	lsls	r3, r3, #3
   19286:	18d3      	adds	r3, r2, r3
   19288:	3304      	adds	r3, #4
   1928a:	681a      	ldr	r2, [r3, #0]
   1928c:	687b      	ldr	r3, [r7, #4]
   1928e:	429a      	cmp	r2, r3
   19290:	d907      	bls.n	192a2 <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   19292:	4b1c      	ldr	r3, [pc, #112]	; (19304 <prvReportStackUsage+0xb8>)
   19294:	681b      	ldr	r3, [r3, #0]
   19296:	4a1c      	ldr	r2, [pc, #112]	; (19308 <prvReportStackUsage+0xbc>)
   19298:	00db      	lsls	r3, r3, #3
   1929a:	18d3      	adds	r3, r2, r3
   1929c:	3304      	adds	r3, #4
   1929e:	687a      	ldr	r2, [r7, #4]
   192a0:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   192a2:	4b18      	ldr	r3, [pc, #96]	; (19304 <prvReportStackUsage+0xb8>)
   192a4:	681a      	ldr	r2, [r3, #0]
   192a6:	4b18      	ldr	r3, [pc, #96]	; (19308 <prvReportStackUsage+0xbc>)
   192a8:	00d2      	lsls	r2, r2, #3
   192aa:	58d3      	ldr	r3, [r2, r3]
   192ac:	0018      	movs	r0, r3
   192ae:	4b18      	ldr	r3, [pc, #96]	; (19310 <prvReportStackUsage+0xc4>)
   192b0:	4798      	blx	r3
   192b2:	0003      	movs	r3, r0
   192b4:	b2db      	uxtb	r3, r3
   192b6:	0019      	movs	r1, r3
   192b8:	4b12      	ldr	r3, [pc, #72]	; (19304 <prvReportStackUsage+0xb8>)
   192ba:	681b      	ldr	r3, [r3, #0]
   192bc:	4a12      	ldr	r2, [pc, #72]	; (19308 <prvReportStackUsage+0xbc>)
   192be:	00db      	lsls	r3, r3, #3
   192c0:	18d3      	adds	r3, r2, r3
   192c2:	3304      	adds	r3, #4
   192c4:	681b      	ldr	r3, [r3, #0]
   192c6:	000a      	movs	r2, r1
   192c8:	2103      	movs	r1, #3
   192ca:	20ea      	movs	r0, #234	; 0xea
   192cc:	4c11      	ldr	r4, [pc, #68]	; (19314 <prvReportStackUsage+0xc8>)
   192ce:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   192d0:	68fb      	ldr	r3, [r7, #12]
   192d2:	3301      	adds	r3, #1
   192d4:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   192d6:	4b0b      	ldr	r3, [pc, #44]	; (19304 <prvReportStackUsage+0xb8>)
   192d8:	681b      	ldr	r3, [r3, #0]
   192da:	1c5a      	adds	r2, r3, #1
   192dc:	4b0e      	ldr	r3, [pc, #56]	; (19318 <prvReportStackUsage+0xcc>)
   192de:	210a      	movs	r1, #10
   192e0:	0010      	movs	r0, r2
   192e2:	4798      	blx	r3
   192e4:	000b      	movs	r3, r1
   192e6:	001a      	movs	r2, r3
   192e8:	4b06      	ldr	r3, [pc, #24]	; (19304 <prvReportStackUsage+0xb8>)
   192ea:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   192ec:	68fb      	ldr	r3, [r7, #12]
   192ee:	2b00      	cmp	r3, #0
   192f0:	dc04      	bgt.n	192fc <prvReportStackUsage+0xb0>
   192f2:	4b04      	ldr	r3, [pc, #16]	; (19304 <prvReportStackUsage+0xb8>)
   192f4:	681a      	ldr	r2, [r3, #0]
   192f6:	68bb      	ldr	r3, [r7, #8]
   192f8:	429a      	cmp	r2, r3
   192fa:	d1af      	bne.n	1925c <prvReportStackUsage+0x10>
}
   192fc:	46c0      	nop			; (mov r8, r8)
   192fe:	46bd      	mov	sp, r7
   19300:	b005      	add	sp, #20
   19302:	bd90      	pop	{r4, r7, pc}
   19304:	20000d38 	.word	0x20000d38
   19308:	20000ce4 	.word	0x20000ce4
   1930c:	0001dce1 	.word	0x0001dce1
   19310:	00019061 	.word	0x00019061
   19314:	00019ba9 	.word	0x00019ba9
   19318:	00033db5 	.word	0x00033db5

0001931c <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   1931c:	b580      	push	{r7, lr}
   1931e:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   19320:	4b02      	ldr	r3, [pc, #8]	; (1932c <prvTraceGetCurrentTaskHandle+0x10>)
   19322:	4798      	blx	r3
   19324:	0003      	movs	r3, r0
}
   19326:	0018      	movs	r0, r3
   19328:	46bd      	mov	sp, r7
   1932a:	bd80      	pop	{r7, pc}
   1932c:	0001dd8d 	.word	0x0001dd8d

00019330 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   19330:	b590      	push	{r4, r7, lr}
   19332:	b085      	sub	sp, #20
   19334:	af02      	add	r7, sp, #8
   19336:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   19338:	4b14      	ldr	r3, [pc, #80]	; (1938c <vTraceEnable+0x5c>)
   1933a:	4798      	blx	r3

	if (startOption == TRC_START)
   1933c:	687b      	ldr	r3, [r7, #4]
   1933e:	2b01      	cmp	r3, #1
   19340:	d102      	bne.n	19348 <vTraceEnable+0x18>
	{
		vTraceStart();
   19342:	4b13      	ldr	r3, [pc, #76]	; (19390 <vTraceEnable+0x60>)
   19344:	4798      	blx	r3
   19346:	e00e      	b.n	19366 <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   19348:	687b      	ldr	r3, [r7, #4]
   1934a:	2b02      	cmp	r3, #2
   1934c:	d104      	bne.n	19358 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   1934e:	4b11      	ldr	r3, [pc, #68]	; (19394 <vTraceEnable+0x64>)
   19350:	0018      	movs	r0, r3
   19352:	4b11      	ldr	r3, [pc, #68]	; (19398 <vTraceEnable+0x68>)
   19354:	4798      	blx	r3
   19356:	e006      	b.n	19366 <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   19358:	687b      	ldr	r3, [r7, #4]
   1935a:	2b00      	cmp	r3, #0
   1935c:	d003      	beq.n	19366 <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   1935e:	4b0f      	ldr	r3, [pc, #60]	; (1939c <vTraceEnable+0x6c>)
   19360:	0018      	movs	r0, r3
   19362:	4b0d      	ldr	r3, [pc, #52]	; (19398 <vTraceEnable+0x68>)
   19364:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   19366:	4b0e      	ldr	r3, [pc, #56]	; (193a0 <vTraceEnable+0x70>)
   19368:	681b      	ldr	r3, [r3, #0]
   1936a:	2b00      	cmp	r3, #0
   1936c:	d10a      	bne.n	19384 <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   1936e:	2396      	movs	r3, #150	; 0x96
   19370:	005a      	lsls	r2, r3, #1
   19372:	490c      	ldr	r1, [pc, #48]	; (193a4 <vTraceEnable+0x74>)
   19374:	480c      	ldr	r0, [pc, #48]	; (193a8 <vTraceEnable+0x78>)
   19376:	4b0a      	ldr	r3, [pc, #40]	; (193a0 <vTraceEnable+0x70>)
   19378:	9301      	str	r3, [sp, #4]
   1937a:	2304      	movs	r3, #4
   1937c:	9300      	str	r3, [sp, #0]
   1937e:	2300      	movs	r3, #0
   19380:	4c0a      	ldr	r4, [pc, #40]	; (193ac <vTraceEnable+0x7c>)
   19382:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   19384:	46c0      	nop			; (mov r8, r8)
   19386:	46bd      	mov	sp, r7
   19388:	b003      	add	sp, #12
   1938a:	bd90      	pop	{r4, r7, pc}
   1938c:	0001a275 	.word	0x0001a275
   19390:	000197cd 	.word	0x000197cd
   19394:	00038ca8 	.word	0x00038ca8
   19398:	0001a91d 	.word	0x0001a91d
   1939c:	00038ce8 	.word	0x00038ce8
   193a0:	20000ce0 	.word	0x20000ce0
   193a4:	00038d1c 	.word	0x00038d1c
   193a8:	000193b1 	.word	0x000193b1
   193ac:	0001cce5 	.word	0x0001cce5

000193b0 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   193b0:	b580      	push	{r7, lr}
   193b2:	b082      	sub	sp, #8
   193b4:	af00      	add	r7, sp, #0
   193b6:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   193b8:	4b04      	ldr	r3, [pc, #16]	; (193cc <TzCtrl+0x1c>)
   193ba:	4798      	blx	r3
   193bc:	1e03      	subs	r3, r0, #0
   193be:	d001      	beq.n	193c4 <TzCtrl+0x14>
		{
			prvReportStackUsage();
   193c0:	4b03      	ldr	r3, [pc, #12]	; (193d0 <TzCtrl+0x20>)
   193c2:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   193c4:	2004      	movs	r0, #4
   193c6:	4b03      	ldr	r3, [pc, #12]	; (193d4 <TzCtrl+0x24>)
   193c8:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   193ca:	e7f5      	b.n	193b8 <TzCtrl+0x8>
   193cc:	00019811 	.word	0x00019811
   193d0:	0001924d 	.word	0x0001924d
   193d4:	0001d081 	.word	0x0001d081

000193d8 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   193d8:	b580      	push	{r7, lr}
   193da:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   193dc:	4b60      	ldr	r3, [pc, #384]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   193de:	681b      	ldr	r3, [r3, #0]
   193e0:	2209      	movs	r2, #9
   193e2:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   193e4:	4b5e      	ldr	r3, [pc, #376]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   193e6:	681b      	ldr	r3, [r3, #0]
   193e8:	2264      	movs	r2, #100	; 0x64
   193ea:	210a      	movs	r1, #10
   193ec:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   193ee:	4b5c      	ldr	r3, [pc, #368]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   193f0:	681b      	ldr	r3, [r3, #0]
   193f2:	2265      	movs	r2, #101	; 0x65
   193f4:	210a      	movs	r1, #10
   193f6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   193f8:	4b59      	ldr	r3, [pc, #356]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   193fa:	681b      	ldr	r3, [r3, #0]
   193fc:	2266      	movs	r2, #102	; 0x66
   193fe:	210a      	movs	r1, #10
   19400:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   19402:	4b57      	ldr	r3, [pc, #348]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   19404:	681b      	ldr	r3, [r3, #0]
   19406:	2267      	movs	r2, #103	; 0x67
   19408:	210f      	movs	r1, #15
   1940a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   1940c:	4b54      	ldr	r3, [pc, #336]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   1940e:	681b      	ldr	r3, [r3, #0]
   19410:	2268      	movs	r2, #104	; 0x68
   19412:	2105      	movs	r1, #5
   19414:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   19416:	4b52      	ldr	r3, [pc, #328]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   19418:	681b      	ldr	r3, [r3, #0]
   1941a:	2269      	movs	r2, #105	; 0x69
   1941c:	2105      	movs	r1, #5
   1941e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   19420:	4b4f      	ldr	r3, [pc, #316]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   19422:	681b      	ldr	r3, [r3, #0]
   19424:	226a      	movs	r2, #106	; 0x6a
   19426:	2105      	movs	r1, #5
   19428:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   1942a:	4b4d      	ldr	r3, [pc, #308]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   1942c:	681b      	ldr	r3, [r3, #0]
   1942e:	226b      	movs	r2, #107	; 0x6b
   19430:	2105      	movs	r1, #5
   19432:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   19434:	4b4a      	ldr	r3, [pc, #296]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   19436:	681b      	ldr	r3, [r3, #0]
   19438:	226c      	movs	r2, #108	; 0x6c
   1943a:	2105      	movs	r1, #5
   1943c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   1943e:	4b48      	ldr	r3, [pc, #288]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   19440:	681b      	ldr	r3, [r3, #0]
   19442:	2270      	movs	r2, #112	; 0x70
   19444:	210f      	movs	r1, #15
   19446:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   19448:	4b45      	ldr	r3, [pc, #276]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   1944a:	681b      	ldr	r3, [r3, #0]
   1944c:	2271      	movs	r2, #113	; 0x71
   1944e:	210f      	movs	r1, #15
   19450:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   19452:	4b43      	ldr	r3, [pc, #268]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   19454:	681b      	ldr	r3, [r3, #0]
   19456:	2272      	movs	r2, #114	; 0x72
   19458:	210f      	movs	r1, #15
   1945a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   1945c:	4b40      	ldr	r3, [pc, #256]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   1945e:	681b      	ldr	r3, [r3, #0]
   19460:	2273      	movs	r2, #115	; 0x73
   19462:	210f      	movs	r1, #15
   19464:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   19466:	4b3e      	ldr	r3, [pc, #248]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   19468:	681b      	ldr	r3, [r3, #0]
   1946a:	2274      	movs	r2, #116	; 0x74
   1946c:	210f      	movs	r1, #15
   1946e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   19470:	4b3b      	ldr	r3, [pc, #236]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   19472:	681b      	ldr	r3, [r3, #0]
   19474:	2275      	movs	r2, #117	; 0x75
   19476:	210f      	movs	r1, #15
   19478:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   1947a:	4b39      	ldr	r3, [pc, #228]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   1947c:	681b      	ldr	r3, [r3, #0]
   1947e:	2276      	movs	r2, #118	; 0x76
   19480:	210f      	movs	r1, #15
   19482:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   19484:	4b36      	ldr	r3, [pc, #216]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   19486:	681b      	ldr	r3, [r3, #0]
   19488:	2277      	movs	r2, #119	; 0x77
   1948a:	210f      	movs	r1, #15
   1948c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   1948e:	4b34      	ldr	r3, [pc, #208]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   19490:	681b      	ldr	r3, [r3, #0]
   19492:	2278      	movs	r2, #120	; 0x78
   19494:	210f      	movs	r1, #15
   19496:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   19498:	4b31      	ldr	r3, [pc, #196]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   1949a:	681b      	ldr	r3, [r3, #0]
   1949c:	227c      	movs	r2, #124	; 0x7c
   1949e:	2110      	movs	r1, #16
   194a0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   194a2:	4b2f      	ldr	r3, [pc, #188]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   194a4:	681b      	ldr	r3, [r3, #0]
   194a6:	227d      	movs	r2, #125	; 0x7d
   194a8:	2110      	movs	r1, #16
   194aa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   194ac:	4b2c      	ldr	r3, [pc, #176]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   194ae:	681b      	ldr	r3, [r3, #0]
   194b0:	227e      	movs	r2, #126	; 0x7e
   194b2:	2110      	movs	r1, #16
   194b4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   194b6:	4b2a      	ldr	r3, [pc, #168]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   194b8:	681b      	ldr	r3, [r3, #0]
   194ba:	227f      	movs	r2, #127	; 0x7f
   194bc:	2113      	movs	r1, #19
   194be:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   194c0:	4b27      	ldr	r3, [pc, #156]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   194c2:	681b      	ldr	r3, [r3, #0]
   194c4:	2280      	movs	r2, #128	; 0x80
   194c6:	2111      	movs	r1, #17
   194c8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   194ca:	4b25      	ldr	r3, [pc, #148]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   194cc:	681b      	ldr	r3, [r3, #0]
   194ce:	2281      	movs	r2, #129	; 0x81
   194d0:	2110      	movs	r1, #16
   194d2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   194d4:	4b22      	ldr	r3, [pc, #136]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   194d6:	681b      	ldr	r3, [r3, #0]
   194d8:	2282      	movs	r2, #130	; 0x82
   194da:	2113      	movs	r1, #19
   194dc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   194de:	4b20      	ldr	r3, [pc, #128]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   194e0:	681b      	ldr	r3, [r3, #0]
   194e2:	2283      	movs	r2, #131	; 0x83
   194e4:	2113      	movs	r1, #19
   194e6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   194e8:	4b1d      	ldr	r3, [pc, #116]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   194ea:	681b      	ldr	r3, [r3, #0]
   194ec:	2284      	movs	r2, #132	; 0x84
   194ee:	2113      	movs	r1, #19
   194f0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   194f2:	4b1b      	ldr	r3, [pc, #108]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   194f4:	681b      	ldr	r3, [r3, #0]
   194f6:	2288      	movs	r2, #136	; 0x88
   194f8:	2100      	movs	r1, #0
   194fa:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   194fc:	4b18      	ldr	r3, [pc, #96]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   194fe:	681b      	ldr	r3, [r3, #0]
   19500:	228a      	movs	r2, #138	; 0x8a
   19502:	21a0      	movs	r1, #160	; 0xa0
   19504:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   19506:	4b16      	ldr	r3, [pc, #88]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   19508:	681b      	ldr	r3, [r3, #0]
   1950a:	228c      	movs	r2, #140	; 0x8c
   1950c:	21a0      	movs	r1, #160	; 0xa0
   1950e:	0049      	lsls	r1, r1, #1
   19510:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   19512:	4b13      	ldr	r3, [pc, #76]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   19514:	681b      	ldr	r3, [r3, #0]
   19516:	228e      	movs	r2, #142	; 0x8e
   19518:	21f0      	movs	r1, #240	; 0xf0
   1951a:	0049      	lsls	r1, r1, #1
   1951c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   1951e:	4b10      	ldr	r3, [pc, #64]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   19520:	681b      	ldr	r3, [r3, #0]
   19522:	2290      	movs	r2, #144	; 0x90
   19524:	490f      	ldr	r1, [pc, #60]	; (19564 <vTraceInitObjectPropertyTable+0x18c>)
   19526:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   19528:	4b0d      	ldr	r3, [pc, #52]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   1952a:	681b      	ldr	r3, [r3, #0]
   1952c:	2292      	movs	r2, #146	; 0x92
   1952e:	490e      	ldr	r1, [pc, #56]	; (19568 <vTraceInitObjectPropertyTable+0x190>)
   19530:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   19532:	4b0b      	ldr	r3, [pc, #44]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   19534:	681b      	ldr	r3, [r3, #0]
   19536:	2294      	movs	r2, #148	; 0x94
   19538:	490c      	ldr	r1, [pc, #48]	; (1956c <vTraceInitObjectPropertyTable+0x194>)
   1953a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   1953c:	4b08      	ldr	r3, [pc, #32]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   1953e:	681b      	ldr	r3, [r3, #0]
   19540:	2296      	movs	r2, #150	; 0x96
   19542:	490b      	ldr	r1, [pc, #44]	; (19570 <vTraceInitObjectPropertyTable+0x198>)
   19544:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   19546:	4b06      	ldr	r3, [pc, #24]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   19548:	681b      	ldr	r3, [r3, #0]
   1954a:	2298      	movs	r2, #152	; 0x98
   1954c:	218c      	movs	r1, #140	; 0x8c
   1954e:	00c9      	lsls	r1, r1, #3
   19550:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   19552:	4b03      	ldr	r3, [pc, #12]	; (19560 <vTraceInitObjectPropertyTable+0x188>)
   19554:	681b      	ldr	r3, [r3, #0]
   19556:	4a07      	ldr	r2, [pc, #28]	; (19574 <vTraceInitObjectPropertyTable+0x19c>)
   19558:	661a      	str	r2, [r3, #96]	; 0x60
}
   1955a:	46c0      	nop			; (mov r8, r8)
   1955c:	46bd      	mov	sp, r7
   1955e:	bd80      	pop	{r7, pc}
   19560:	20000df8 	.word	0x20000df8
   19564:	000002fd 	.word	0x000002fd
   19568:	00000352 	.word	0x00000352
   1956c:	000003a2 	.word	0x000003a2
   19570:	00000401 	.word	0x00000401
   19574:	000004bf 	.word	0x000004bf

00019578 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   19578:	b580      	push	{r7, lr}
   1957a:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   1957c:	4b2e      	ldr	r3, [pc, #184]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   1957e:	2200      	movs	r2, #0
   19580:	825a      	strh	r2, [r3, #18]
   19582:	4b2d      	ldr	r3, [pc, #180]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   19584:	8a5a      	ldrh	r2, [r3, #18]
   19586:	4b2c      	ldr	r3, [pc, #176]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   19588:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   1958a:	4b2b      	ldr	r3, [pc, #172]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   1958c:	220a      	movs	r2, #10
   1958e:	829a      	strh	r2, [r3, #20]
   19590:	4b29      	ldr	r3, [pc, #164]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   19592:	8a9a      	ldrh	r2, [r3, #20]
   19594:	4b28      	ldr	r3, [pc, #160]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   19596:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   19598:	4b27      	ldr	r3, [pc, #156]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   1959a:	2214      	movs	r2, #20
   1959c:	82da      	strh	r2, [r3, #22]
   1959e:	4b26      	ldr	r3, [pc, #152]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   195a0:	8ada      	ldrh	r2, [r3, #22]
   195a2:	4b25      	ldr	r3, [pc, #148]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   195a4:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   195a6:	4b24      	ldr	r3, [pc, #144]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   195a8:	221e      	movs	r2, #30
   195aa:	831a      	strh	r2, [r3, #24]
   195ac:	4b22      	ldr	r3, [pc, #136]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   195ae:	8b1a      	ldrh	r2, [r3, #24]
   195b0:	4b21      	ldr	r3, [pc, #132]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   195b2:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   195b4:	4b20      	ldr	r3, [pc, #128]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   195b6:	222d      	movs	r2, #45	; 0x2d
   195b8:	835a      	strh	r2, [r3, #26]
   195ba:	4b1f      	ldr	r3, [pc, #124]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   195bc:	8b5a      	ldrh	r2, [r3, #26]
   195be:	4b1e      	ldr	r3, [pc, #120]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   195c0:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   195c2:	4b1d      	ldr	r3, [pc, #116]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   195c4:	2232      	movs	r2, #50	; 0x32
   195c6:	839a      	strh	r2, [r3, #28]
   195c8:	4b1b      	ldr	r3, [pc, #108]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   195ca:	8b9a      	ldrh	r2, [r3, #28]
   195cc:	4b1a      	ldr	r3, [pc, #104]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   195ce:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   195d0:	4b19      	ldr	r3, [pc, #100]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   195d2:	2237      	movs	r2, #55	; 0x37
   195d4:	83da      	strh	r2, [r3, #30]
   195d6:	4b18      	ldr	r3, [pc, #96]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   195d8:	8bda      	ldrh	r2, [r3, #30]
   195da:	4b17      	ldr	r3, [pc, #92]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   195dc:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   195de:	4b16      	ldr	r3, [pc, #88]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   195e0:	223c      	movs	r2, #60	; 0x3c
   195e2:	841a      	strh	r2, [r3, #32]
   195e4:	4b14      	ldr	r3, [pc, #80]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   195e6:	8c1a      	ldrh	r2, [r3, #32]
   195e8:	4b13      	ldr	r3, [pc, #76]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   195ea:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   195ec:	4b12      	ldr	r3, [pc, #72]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   195ee:	2241      	movs	r2, #65	; 0x41
   195f0:	845a      	strh	r2, [r3, #34]	; 0x22
   195f2:	4b11      	ldr	r3, [pc, #68]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   195f4:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   195f6:	4b10      	ldr	r3, [pc, #64]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   195f8:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   195fa:	4b0f      	ldr	r3, [pc, #60]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   195fc:	2209      	movs	r2, #9
   195fe:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   19600:	4b0d      	ldr	r3, [pc, #52]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   19602:	2213      	movs	r2, #19
   19604:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   19606:	4b0c      	ldr	r3, [pc, #48]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   19608:	221d      	movs	r2, #29
   1960a:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   1960c:	4b0a      	ldr	r3, [pc, #40]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   1960e:	222c      	movs	r2, #44	; 0x2c
   19610:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   19612:	4b09      	ldr	r3, [pc, #36]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   19614:	2231      	movs	r2, #49	; 0x31
   19616:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   19618:	4b07      	ldr	r3, [pc, #28]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   1961a:	2236      	movs	r2, #54	; 0x36
   1961c:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   1961e:	4b06      	ldr	r3, [pc, #24]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   19620:	223b      	movs	r2, #59	; 0x3b
   19622:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   19624:	4b04      	ldr	r3, [pc, #16]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   19626:	2240      	movs	r2, #64	; 0x40
   19628:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   1962a:	4b03      	ldr	r3, [pc, #12]	; (19638 <vTraceInitObjectHandleStack+0xc0>)
   1962c:	2245      	movs	r2, #69	; 0x45
   1962e:	869a      	strh	r2, [r3, #52]	; 0x34
}
   19630:	46c0      	nop			; (mov r8, r8)
   19632:	46bd      	mov	sp, r7
   19634:	bd80      	pop	{r7, pc}
   19636:	46c0      	nop			; (mov r8, r8)
   19638:	20000d68 	.word	0x20000d68

0001963c <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   1963c:	b580      	push	{r7, lr}
   1963e:	b082      	sub	sp, #8
   19640:	af00      	add	r7, sp, #0
   19642:	0002      	movs	r2, r0
   19644:	1dfb      	adds	r3, r7, #7
   19646:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   19648:	1dfb      	adds	r3, r7, #7
   1964a:	781b      	ldrb	r3, [r3, #0]
   1964c:	2b08      	cmp	r3, #8
   1964e:	d816      	bhi.n	1967e <pszTraceGetErrorNotEnoughHandles+0x42>
   19650:	009a      	lsls	r2, r3, #2
   19652:	4b0d      	ldr	r3, [pc, #52]	; (19688 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   19654:	18d3      	adds	r3, r2, r3
   19656:	681b      	ldr	r3, [r3, #0]
   19658:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   1965a:	4b0c      	ldr	r3, [pc, #48]	; (1968c <pszTraceGetErrorNotEnoughHandles+0x50>)
   1965c:	e010      	b.n	19680 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   1965e:	4b0c      	ldr	r3, [pc, #48]	; (19690 <pszTraceGetErrorNotEnoughHandles+0x54>)
   19660:	e00e      	b.n	19680 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   19662:	4b0c      	ldr	r3, [pc, #48]	; (19694 <pszTraceGetErrorNotEnoughHandles+0x58>)
   19664:	e00c      	b.n	19680 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   19666:	4b0c      	ldr	r3, [pc, #48]	; (19698 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   19668:	e00a      	b.n	19680 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   1966a:	4b0c      	ldr	r3, [pc, #48]	; (1969c <pszTraceGetErrorNotEnoughHandles+0x60>)
   1966c:	e008      	b.n	19680 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   1966e:	4b0c      	ldr	r3, [pc, #48]	; (196a0 <pszTraceGetErrorNotEnoughHandles+0x64>)
   19670:	e006      	b.n	19680 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   19672:	4b0c      	ldr	r3, [pc, #48]	; (196a4 <pszTraceGetErrorNotEnoughHandles+0x68>)
   19674:	e004      	b.n	19680 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   19676:	4b0c      	ldr	r3, [pc, #48]	; (196a8 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   19678:	e002      	b.n	19680 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   1967a:	4b0c      	ldr	r3, [pc, #48]	; (196ac <pszTraceGetErrorNotEnoughHandles+0x70>)
   1967c:	e000      	b.n	19680 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   1967e:	4b0c      	ldr	r3, [pc, #48]	; (196b0 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   19680:	0018      	movs	r0, r3
   19682:	46bd      	mov	sp, r7
   19684:	b002      	add	sp, #8
   19686:	bd80      	pop	{r7, pc}
   19688:	00039024 	.word	0x00039024
   1968c:	00038d24 	.word	0x00038d24
   19690:	00038d6c 	.word	0x00038d6c
   19694:	00038db4 	.word	0x00038db4
   19698:	00038e08 	.word	0x00038e08
   1969c:	00038e54 	.word	0x00038e54
   196a0:	00038ea0 	.word	0x00038ea0
   196a4:	00038eec 	.word	0x00038eec
   196a8:	00038f40 	.word	0x00038f40
   196ac:	00038f98 	.word	0x00038f98
   196b0:	00038ff4 	.word	0x00038ff4

000196b4 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   196b4:	b590      	push	{r4, r7, lr}
   196b6:	b087      	sub	sp, #28
   196b8:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   196ba:	2317      	movs	r3, #23
   196bc:	18fb      	adds	r3, r7, r3
   196be:	2200      	movs	r2, #0
   196c0:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   196c2:	4b36      	ldr	r3, [pc, #216]	; (1979c <uiTraceStart+0xe8>)
   196c4:	681b      	ldr	r3, [r3, #0]
   196c6:	2b00      	cmp	r3, #0
   196c8:	d10b      	bne.n	196e2 <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   196ca:	4b34      	ldr	r3, [pc, #208]	; (1979c <uiTraceStart+0xe8>)
   196cc:	681b      	ldr	r3, [r3, #0]
   196ce:	2b00      	cmp	r3, #0
   196d0:	d105      	bne.n	196de <uiTraceStart+0x2a>
   196d2:	4b33      	ldr	r3, [pc, #204]	; (197a0 <uiTraceStart+0xec>)
   196d4:	0018      	movs	r0, r3
   196d6:	4b33      	ldr	r3, [pc, #204]	; (197a4 <uiTraceStart+0xf0>)
   196d8:	4798      	blx	r3
   196da:	2300      	movs	r3, #0
   196dc:	e059      	b.n	19792 <uiTraceStart+0xde>
		return 0;
   196de:	2300      	movs	r3, #0
   196e0:	e057      	b.n	19792 <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   196e2:	4b2e      	ldr	r3, [pc, #184]	; (1979c <uiTraceStart+0xe8>)
   196e4:	681b      	ldr	r3, [r3, #0]
   196e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   196e8:	2b01      	cmp	r3, #1
   196ea:	d101      	bne.n	196f0 <uiTraceStart+0x3c>
		return 1; /* Already running */
   196ec:	2301      	movs	r3, #1
   196ee:	e050      	b.n	19792 <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   196f0:	4b2d      	ldr	r3, [pc, #180]	; (197a8 <uiTraceStart+0xf4>)
   196f2:	681b      	ldr	r3, [r3, #0]
   196f4:	2b00      	cmp	r3, #0
   196f6:	d149      	bne.n	1978c <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   196f8:	f3ef 8310 	mrs	r3, PRIMASK
   196fc:	60bb      	str	r3, [r7, #8]
  return(result);
   196fe:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   19700:	613b      	str	r3, [r7, #16]
   19702:	2301      	movs	r3, #1
   19704:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19706:	68fb      	ldr	r3, [r7, #12]
   19708:	f383 8810 	msr	PRIMASK, r3
   1970c:	4b27      	ldr	r3, [pc, #156]	; (197ac <uiTraceStart+0xf8>)
   1970e:	681b      	ldr	r3, [r3, #0]
   19710:	1c5a      	adds	r2, r3, #1
   19712:	4b26      	ldr	r3, [pc, #152]	; (197ac <uiTraceStart+0xf8>)
   19714:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   19716:	4b21      	ldr	r3, [pc, #132]	; (1979c <uiTraceStart+0xe8>)
   19718:	681b      	ldr	r3, [r3, #0]
   1971a:	2201      	movs	r2, #1
   1971c:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   1971e:	4b24      	ldr	r3, [pc, #144]	; (197b0 <uiTraceStart+0xfc>)
   19720:	4798      	blx	r3
   19722:	0003      	movs	r3, r0
   19724:	0018      	movs	r0, r3
   19726:	4b23      	ldr	r3, [pc, #140]	; (197b4 <uiTraceStart+0x100>)
   19728:	4798      	blx	r3
   1972a:	0003      	movs	r3, r0
   1972c:	001a      	movs	r2, r3
   1972e:	2317      	movs	r3, #23
   19730:	18fb      	adds	r3, r7, r3
   19732:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   19734:	2317      	movs	r3, #23
   19736:	18fb      	adds	r3, r7, r3
   19738:	781b      	ldrb	r3, [r3, #0]
   1973a:	2b00      	cmp	r3, #0
   1973c:	d116      	bne.n	1976c <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   1973e:	2317      	movs	r3, #23
   19740:	18fc      	adds	r4, r7, r3
   19742:	2003      	movs	r0, #3
   19744:	4b1c      	ldr	r3, [pc, #112]	; (197b8 <uiTraceStart+0x104>)
   19746:	4798      	blx	r3
   19748:	0003      	movs	r3, r0
   1974a:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   1974c:	4a1b      	ldr	r2, [pc, #108]	; (197bc <uiTraceStart+0x108>)
   1974e:	2317      	movs	r3, #23
   19750:	18fb      	adds	r3, r7, r3
   19752:	781b      	ldrb	r3, [r3, #0]
   19754:	0019      	movs	r1, r3
   19756:	2003      	movs	r0, #3
   19758:	4b19      	ldr	r3, [pc, #100]	; (197c0 <uiTraceStart+0x10c>)
   1975a:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   1975c:	2317      	movs	r3, #23
   1975e:	18fb      	adds	r3, r7, r3
   19760:	781b      	ldrb	r3, [r3, #0]
   19762:	2200      	movs	r2, #0
   19764:	0019      	movs	r1, r3
   19766:	2003      	movs	r0, #3
   19768:	4b16      	ldr	r3, [pc, #88]	; (197c4 <uiTraceStart+0x110>)
   1976a:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   1976c:	2317      	movs	r3, #23
   1976e:	18fb      	adds	r3, r7, r3
   19770:	781b      	ldrb	r3, [r3, #0]
   19772:	0018      	movs	r0, r3
   19774:	4b14      	ldr	r3, [pc, #80]	; (197c8 <uiTraceStart+0x114>)
   19776:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   19778:	4b0c      	ldr	r3, [pc, #48]	; (197ac <uiTraceStart+0xf8>)
   1977a:	681b      	ldr	r3, [r3, #0]
   1977c:	1e5a      	subs	r2, r3, #1
   1977e:	4b0b      	ldr	r3, [pc, #44]	; (197ac <uiTraceStart+0xf8>)
   19780:	601a      	str	r2, [r3, #0]
   19782:	693b      	ldr	r3, [r7, #16]
   19784:	607b      	str	r3, [r7, #4]
   19786:	687b      	ldr	r3, [r7, #4]
   19788:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   1978c:	4b03      	ldr	r3, [pc, #12]	; (1979c <uiTraceStart+0xe8>)
   1978e:	681b      	ldr	r3, [r3, #0]
   19790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   19792:	0018      	movs	r0, r3
   19794:	46bd      	mov	sp, r7
   19796:	b007      	add	sp, #28
   19798:	bd90      	pop	{r4, r7, pc}
   1979a:	46c0      	nop			; (mov r8, r8)
   1979c:	20000df8 	.word	0x20000df8
   197a0:	00039048 	.word	0x00039048
   197a4:	0001a91d 	.word	0x0001a91d
   197a8:	20000d58 	.word	0x20000d58
   197ac:	20000d50 	.word	0x20000d50
   197b0:	0001931d 	.word	0x0001931d
   197b4:	00019061 	.word	0x00019061
   197b8:	0001a601 	.word	0x0001a601
   197bc:	0003908c 	.word	0x0003908c
   197c0:	0001a831 	.word	0x0001a831
   197c4:	00019f95 	.word	0x00019f95
   197c8:	00019e7d 	.word	0x00019e7d

000197cc <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   197cc:	b580      	push	{r7, lr}
   197ce:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   197d0:	4b02      	ldr	r3, [pc, #8]	; (197dc <vTraceStart+0x10>)
   197d2:	4798      	blx	r3
}
   197d4:	46c0      	nop			; (mov r8, r8)
   197d6:	46bd      	mov	sp, r7
   197d8:	bd80      	pop	{r7, pc}
   197da:	46c0      	nop			; (mov r8, r8)
   197dc:	000196b5 	.word	0x000196b5

000197e0 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   197e0:	b580      	push	{r7, lr}
   197e2:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   197e4:	4b08      	ldr	r3, [pc, #32]	; (19808 <vTraceStop+0x28>)
   197e6:	681b      	ldr	r3, [r3, #0]
   197e8:	2b00      	cmp	r3, #0
   197ea:	d003      	beq.n	197f4 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   197ec:	4b06      	ldr	r3, [pc, #24]	; (19808 <vTraceStop+0x28>)
   197ee:	681b      	ldr	r3, [r3, #0]
   197f0:	2200      	movs	r2, #0
   197f2:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   197f4:	4b05      	ldr	r3, [pc, #20]	; (1980c <vTraceStop+0x2c>)
   197f6:	681b      	ldr	r3, [r3, #0]
   197f8:	2b00      	cmp	r3, #0
   197fa:	d002      	beq.n	19802 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   197fc:	4b03      	ldr	r3, [pc, #12]	; (1980c <vTraceStop+0x2c>)
   197fe:	681b      	ldr	r3, [r3, #0]
   19800:	4798      	blx	r3
	}
}
   19802:	46c0      	nop			; (mov r8, r8)
   19804:	46bd      	mov	sp, r7
   19806:	bd80      	pop	{r7, pc}
   19808:	20000df8 	.word	0x20000df8
   1980c:	20000d60 	.word	0x20000d60

00019810 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   19810:	b580      	push	{r7, lr}
   19812:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   19814:	4b05      	ldr	r3, [pc, #20]	; (1982c <xTraceIsRecordingEnabled+0x1c>)
   19816:	681b      	ldr	r3, [r3, #0]
   19818:	2b00      	cmp	r3, #0
   1981a:	d003      	beq.n	19824 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   1981c:	4b03      	ldr	r3, [pc, #12]	; (1982c <xTraceIsRecordingEnabled+0x1c>)
   1981e:	681b      	ldr	r3, [r3, #0]
   19820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19822:	e000      	b.n	19826 <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   19824:	2300      	movs	r3, #0
	}
}
   19826:	0018      	movs	r0, r3
   19828:	46bd      	mov	sp, r7
   1982a:	bd80      	pop	{r7, pc}
   1982c:	20000df8 	.word	0x20000df8

00019830 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   19830:	b590      	push	{r4, r7, lr}
   19832:	b089      	sub	sp, #36	; 0x24
   19834:	af00      	add	r7, sp, #0
   19836:	0002      	movs	r2, r0
   19838:	1dfb      	adds	r3, r7, #7
   1983a:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   1983c:	1dfb      	adds	r3, r7, #7
   1983e:	781b      	ldrb	r3, [r3, #0]
   19840:	2b00      	cmp	r3, #0
   19842:	d057      	beq.n	198f4 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   19844:	4b2e      	ldr	r3, [pc, #184]	; (19900 <prvTraceStoreTaskReady+0xd0>)
   19846:	681b      	ldr	r3, [r3, #0]
   19848:	2b00      	cmp	r3, #0
   1984a:	d055      	beq.n	198f8 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   1984c:	1dfb      	adds	r3, r7, #7
   1984e:	781b      	ldrb	r3, [r3, #0]
   19850:	2b0f      	cmp	r3, #15
   19852:	d904      	bls.n	1985e <prvTraceStoreTaskReady+0x2e>
   19854:	4b2b      	ldr	r3, [pc, #172]	; (19904 <prvTraceStoreTaskReady+0xd4>)
   19856:	0018      	movs	r0, r3
   19858:	4b2b      	ldr	r3, [pc, #172]	; (19908 <prvTraceStoreTaskReady+0xd8>)
   1985a:	4798      	blx	r3
   1985c:	e04d      	b.n	198fa <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   1985e:	4b2b      	ldr	r3, [pc, #172]	; (1990c <prvTraceStoreTaskReady+0xdc>)
   19860:	681b      	ldr	r3, [r3, #0]
   19862:	2b00      	cmp	r3, #0
   19864:	d004      	beq.n	19870 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   19866:	4b2a      	ldr	r3, [pc, #168]	; (19910 <prvTraceStoreTaskReady+0xe0>)
   19868:	0018      	movs	r0, r3
   1986a:	4b27      	ldr	r3, [pc, #156]	; (19908 <prvTraceStoreTaskReady+0xd8>)
   1986c:	4798      	blx	r3
		return;
   1986e:	e044      	b.n	198fa <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19870:	f3ef 8310 	mrs	r3, PRIMASK
   19874:	60fb      	str	r3, [r7, #12]
  return(result);
   19876:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   19878:	61fb      	str	r3, [r7, #28]
   1987a:	2301      	movs	r3, #1
   1987c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1987e:	693b      	ldr	r3, [r7, #16]
   19880:	f383 8810 	msr	PRIMASK, r3
   19884:	4b21      	ldr	r3, [pc, #132]	; (1990c <prvTraceStoreTaskReady+0xdc>)
   19886:	681b      	ldr	r3, [r3, #0]
   19888:	1c5a      	adds	r2, r3, #1
   1988a:	4b20      	ldr	r3, [pc, #128]	; (1990c <prvTraceStoreTaskReady+0xdc>)
   1988c:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   1988e:	4b21      	ldr	r3, [pc, #132]	; (19914 <prvTraceStoreTaskReady+0xe4>)
   19890:	681b      	ldr	r3, [r3, #0]
   19892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19894:	2b00      	cmp	r3, #0
   19896:	d022      	beq.n	198de <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   19898:	231a      	movs	r3, #26
   1989a:	18fc      	adds	r4, r7, r3
   1989c:	4b1e      	ldr	r3, [pc, #120]	; (19918 <prvTraceStoreTaskReady+0xe8>)
   1989e:	0018      	movs	r0, r3
   198a0:	4b1e      	ldr	r3, [pc, #120]	; (1991c <prvTraceStoreTaskReady+0xec>)
   198a2:	4798      	blx	r3
   198a4:	0003      	movs	r3, r0
   198a6:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   198a8:	2319      	movs	r3, #25
   198aa:	18fb      	adds	r3, r7, r3
   198ac:	1dfa      	adds	r2, r7, #7
   198ae:	7812      	ldrb	r2, [r2, #0]
   198b0:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   198b2:	4b1b      	ldr	r3, [pc, #108]	; (19920 <prvTraceStoreTaskReady+0xf0>)
   198b4:	4798      	blx	r3
   198b6:	0003      	movs	r3, r0
   198b8:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   198ba:	697b      	ldr	r3, [r7, #20]
   198bc:	2b00      	cmp	r3, #0
   198be:	d00e      	beq.n	198de <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   198c0:	697b      	ldr	r3, [r7, #20]
   198c2:	2202      	movs	r2, #2
   198c4:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   198c6:	697b      	ldr	r3, [r7, #20]
   198c8:	221a      	movs	r2, #26
   198ca:	18ba      	adds	r2, r7, r2
   198cc:	8812      	ldrh	r2, [r2, #0]
   198ce:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   198d0:	697b      	ldr	r3, [r7, #20]
   198d2:	2219      	movs	r2, #25
   198d4:	18ba      	adds	r2, r7, r2
   198d6:	7812      	ldrb	r2, [r2, #0]
   198d8:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   198da:	4b12      	ldr	r3, [pc, #72]	; (19924 <prvTraceStoreTaskReady+0xf4>)
   198dc:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   198de:	4b0b      	ldr	r3, [pc, #44]	; (1990c <prvTraceStoreTaskReady+0xdc>)
   198e0:	681b      	ldr	r3, [r3, #0]
   198e2:	1e5a      	subs	r2, r3, #1
   198e4:	4b09      	ldr	r3, [pc, #36]	; (1990c <prvTraceStoreTaskReady+0xdc>)
   198e6:	601a      	str	r2, [r3, #0]
   198e8:	69fb      	ldr	r3, [r7, #28]
   198ea:	60bb      	str	r3, [r7, #8]
   198ec:	68bb      	ldr	r3, [r7, #8]
   198ee:	f383 8810 	msr	PRIMASK, r3
   198f2:	e002      	b.n	198fa <prvTraceStoreTaskReady+0xca>
		return;
   198f4:	46c0      	nop			; (mov r8, r8)
   198f6:	e000      	b.n	198fa <prvTraceStoreTaskReady+0xca>
		return;
   198f8:	46c0      	nop			; (mov r8, r8)
}
   198fa:	46bd      	mov	sp, r7
   198fc:	b009      	add	sp, #36	; 0x24
   198fe:	bd90      	pop	{r4, r7, pc}
   19900:	2000010c 	.word	0x2000010c
   19904:	000393f4 	.word	0x000393f4
   19908:	0001a91d 	.word	0x0001a91d
   1990c:	20000d50 	.word	0x20000d50
   19910:	00039434 	.word	0x00039434
   19914:	20000df8 	.word	0x20000df8
   19918:	0000ffff 	.word	0x0000ffff
   1991c:	0001ab31 	.word	0x0001ab31
   19920:	0001a4d5 	.word	0x0001a4d5
   19924:	0001aad9 	.word	0x0001aad9

00019928 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   19928:	b580      	push	{r7, lr}
   1992a:	b08e      	sub	sp, #56	; 0x38
   1992c:	af00      	add	r7, sp, #0
   1992e:	60f8      	str	r0, [r7, #12]
   19930:	60b9      	str	r1, [r7, #8]
   19932:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   19934:	4b48      	ldr	r3, [pc, #288]	; (19a58 <vTraceStoreMemMangEvent+0x130>)
   19936:	681b      	ldr	r3, [r3, #0]
   19938:	2b00      	cmp	r3, #0
   1993a:	d100      	bne.n	1993e <vTraceStoreMemMangEvent+0x16>
   1993c:	e088      	b.n	19a50 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   1993e:	687b      	ldr	r3, [r7, #4]
   19940:	2b00      	cmp	r3, #0
   19942:	da03      	bge.n	1994c <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   19944:	687b      	ldr	r3, [r7, #4]
   19946:	425b      	negs	r3, r3
   19948:	637b      	str	r3, [r7, #52]	; 0x34
   1994a:	e001      	b.n	19950 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   1994c:	687b      	ldr	r3, [r7, #4]
   1994e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19950:	f3ef 8310 	mrs	r3, PRIMASK
   19954:	61bb      	str	r3, [r7, #24]
  return(result);
   19956:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   19958:	633b      	str	r3, [r7, #48]	; 0x30
   1995a:	2301      	movs	r3, #1
   1995c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1995e:	69fb      	ldr	r3, [r7, #28]
   19960:	f383 8810 	msr	PRIMASK, r3
   19964:	4b3d      	ldr	r3, [pc, #244]	; (19a5c <vTraceStoreMemMangEvent+0x134>)
   19966:	681b      	ldr	r3, [r3, #0]
   19968:	1c5a      	adds	r2, r3, #1
   1996a:	4b3c      	ldr	r3, [pc, #240]	; (19a5c <vTraceStoreMemMangEvent+0x134>)
   1996c:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   1996e:	68bb      	ldr	r3, [r7, #8]
   19970:	2b00      	cmp	r3, #0
   19972:	d005      	beq.n	19980 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   19974:	4b3a      	ldr	r3, [pc, #232]	; (19a60 <vTraceStoreMemMangEvent+0x138>)
   19976:	681a      	ldr	r2, [r3, #0]
   19978:	687b      	ldr	r3, [r7, #4]
   1997a:	18d2      	adds	r2, r2, r3
   1997c:	4b38      	ldr	r3, [pc, #224]	; (19a60 <vTraceStoreMemMangEvent+0x138>)
   1997e:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   19980:	4b35      	ldr	r3, [pc, #212]	; (19a58 <vTraceStoreMemMangEvent+0x130>)
   19982:	681b      	ldr	r3, [r3, #0]
   19984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19986:	2b00      	cmp	r3, #0
   19988:	d057      	beq.n	19a3a <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   1998a:	20ff      	movs	r0, #255	; 0xff
   1998c:	4b35      	ldr	r3, [pc, #212]	; (19a64 <vTraceStoreMemMangEvent+0x13c>)
   1998e:	4798      	blx	r3
   19990:	0003      	movs	r3, r0
   19992:	001a      	movs	r2, r3
   19994:	232f      	movs	r3, #47	; 0x2f
   19996:	18fb      	adds	r3, r7, r3
   19998:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   1999a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1999c:	4a32      	ldr	r2, [pc, #200]	; (19a68 <vTraceStoreMemMangEvent+0x140>)
   1999e:	0019      	movs	r1, r3
   199a0:	0010      	movs	r0, r2
   199a2:	4b32      	ldr	r3, [pc, #200]	; (19a6c <vTraceStoreMemMangEvent+0x144>)
   199a4:	4798      	blx	r3
   199a6:	0002      	movs	r2, r0
   199a8:	232c      	movs	r3, #44	; 0x2c
   199aa:	18fb      	adds	r3, r7, r3
   199ac:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   199ae:	4b30      	ldr	r3, [pc, #192]	; (19a70 <vTraceStoreMemMangEvent+0x148>)
   199b0:	4798      	blx	r3
   199b2:	0003      	movs	r3, r0
   199b4:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   199b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   199b8:	2b00      	cmp	r3, #0
   199ba:	d03e      	beq.n	19a3a <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   199bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   199be:	222f      	movs	r2, #47	; 0x2f
   199c0:	18ba      	adds	r2, r7, r2
   199c2:	7812      	ldrb	r2, [r2, #0]
   199c4:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   199c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   199c8:	2200      	movs	r2, #0
   199ca:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   199cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   199ce:	222c      	movs	r2, #44	; 0x2c
   199d0:	18ba      	adds	r2, r7, r2
   199d2:	8812      	ldrh	r2, [r2, #0]
   199d4:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   199d6:	4b27      	ldr	r3, [pc, #156]	; (19a74 <vTraceStoreMemMangEvent+0x14c>)
   199d8:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   199da:	68bb      	ldr	r3, [r7, #8]
   199dc:	4a22      	ldr	r2, [pc, #136]	; (19a68 <vTraceStoreMemMangEvent+0x140>)
   199de:	0019      	movs	r1, r3
   199e0:	0010      	movs	r0, r2
   199e2:	4b22      	ldr	r3, [pc, #136]	; (19a6c <vTraceStoreMemMangEvent+0x144>)
   199e4:	4798      	blx	r3
   199e6:	0002      	movs	r2, r0
   199e8:	2326      	movs	r3, #38	; 0x26
   199ea:	18fb      	adds	r3, r7, r3
   199ec:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   199ee:	2325      	movs	r3, #37	; 0x25
   199f0:	18fb      	adds	r3, r7, r3
   199f2:	2200      	movs	r2, #0
   199f4:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   199f6:	4b1e      	ldr	r3, [pc, #120]	; (19a70 <vTraceStoreMemMangEvent+0x148>)
   199f8:	4798      	blx	r3
   199fa:	0003      	movs	r3, r0
   199fc:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   199fe:	6a3b      	ldr	r3, [r7, #32]
   19a00:	2b00      	cmp	r3, #0
   19a02:	d01a      	beq.n	19a3a <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   19a04:	6a3b      	ldr	r3, [r7, #32]
   19a06:	2226      	movs	r2, #38	; 0x26
   19a08:	18ba      	adds	r2, r7, r2
   19a0a:	8812      	ldrh	r2, [r2, #0]
   19a0c:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   19a0e:	6a3b      	ldr	r3, [r7, #32]
   19a10:	2225      	movs	r2, #37	; 0x25
   19a12:	18ba      	adds	r2, r7, r2
   19a14:	7812      	ldrb	r2, [r2, #0]
   19a16:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   19a18:	68fb      	ldr	r3, [r7, #12]
   19a1a:	b2db      	uxtb	r3, r3
   19a1c:	3301      	adds	r3, #1
   19a1e:	b2da      	uxtb	r2, r3
   19a20:	6a3b      	ldr	r3, [r7, #32]
   19a22:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   19a24:	68fb      	ldr	r3, [r7, #12]
   19a26:	b2da      	uxtb	r2, r3
   19a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19a2a:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   19a2c:	4b11      	ldr	r3, [pc, #68]	; (19a74 <vTraceStoreMemMangEvent+0x14c>)
   19a2e:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   19a30:	4b09      	ldr	r3, [pc, #36]	; (19a58 <vTraceStoreMemMangEvent+0x130>)
   19a32:	681b      	ldr	r3, [r3, #0]
   19a34:	4a0a      	ldr	r2, [pc, #40]	; (19a60 <vTraceStoreMemMangEvent+0x138>)
   19a36:	6812      	ldr	r2, [r2, #0]
   19a38:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   19a3a:	4b08      	ldr	r3, [pc, #32]	; (19a5c <vTraceStoreMemMangEvent+0x134>)
   19a3c:	681b      	ldr	r3, [r3, #0]
   19a3e:	1e5a      	subs	r2, r3, #1
   19a40:	4b06      	ldr	r3, [pc, #24]	; (19a5c <vTraceStoreMemMangEvent+0x134>)
   19a42:	601a      	str	r2, [r3, #0]
   19a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19a46:	617b      	str	r3, [r7, #20]
   19a48:	697b      	ldr	r3, [r7, #20]
   19a4a:	f383 8810 	msr	PRIMASK, r3
   19a4e:	e000      	b.n	19a52 <vTraceStoreMemMangEvent+0x12a>
		return;
   19a50:	46c0      	nop			; (mov r8, r8)
}
   19a52:	46bd      	mov	sp, r7
   19a54:	b00e      	add	sp, #56	; 0x38
   19a56:	bd80      	pop	{r7, pc}
   19a58:	20000df8 	.word	0x20000df8
   19a5c:	20000d50 	.word	0x20000d50
   19a60:	20000d64 	.word	0x20000d64
   19a64:	0001ab31 	.word	0x0001ab31
   19a68:	0000ffff 	.word	0x0000ffff
   19a6c:	00019cf5 	.word	0x00019cf5
   19a70:	0001a4d5 	.word	0x0001a4d5
   19a74:	0001aad9 	.word	0x0001aad9

00019a78 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   19a78:	b590      	push	{r4, r7, lr}
   19a7a:	b08b      	sub	sp, #44	; 0x2c
   19a7c:	af00      	add	r7, sp, #0
   19a7e:	60f8      	str	r0, [r7, #12]
   19a80:	607a      	str	r2, [r7, #4]
   19a82:	230b      	movs	r3, #11
   19a84:	18fb      	adds	r3, r7, r3
   19a86:	1c0a      	adds	r2, r1, #0
   19a88:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   19a8a:	68fb      	ldr	r3, [r7, #12]
   19a8c:	2bfe      	cmp	r3, #254	; 0xfe
   19a8e:	d904      	bls.n	19a9a <prvTraceStoreKernelCall+0x22>
   19a90:	4b39      	ldr	r3, [pc, #228]	; (19b78 <prvTraceStoreKernelCall+0x100>)
   19a92:	0018      	movs	r0, r3
   19a94:	4b39      	ldr	r3, [pc, #228]	; (19b7c <prvTraceStoreKernelCall+0x104>)
   19a96:	4798      	blx	r3
   19a98:	e06b      	b.n	19b72 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   19a9a:	230b      	movs	r3, #11
   19a9c:	18fb      	adds	r3, r7, r3
   19a9e:	781b      	ldrb	r3, [r3, #0]
   19aa0:	2b08      	cmp	r3, #8
   19aa2:	d904      	bls.n	19aae <prvTraceStoreKernelCall+0x36>
   19aa4:	4b36      	ldr	r3, [pc, #216]	; (19b80 <prvTraceStoreKernelCall+0x108>)
   19aa6:	0018      	movs	r0, r3
   19aa8:	4b34      	ldr	r3, [pc, #208]	; (19b7c <prvTraceStoreKernelCall+0x104>)
   19aaa:	4798      	blx	r3
   19aac:	e061      	b.n	19b72 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   19aae:	4b35      	ldr	r3, [pc, #212]	; (19b84 <prvTraceStoreKernelCall+0x10c>)
   19ab0:	681a      	ldr	r2, [r3, #0]
   19ab2:	230b      	movs	r3, #11
   19ab4:	18fb      	adds	r3, r7, r3
   19ab6:	781b      	ldrb	r3, [r3, #0]
   19ab8:	2164      	movs	r1, #100	; 0x64
   19aba:	18d3      	adds	r3, r2, r3
   19abc:	185b      	adds	r3, r3, r1
   19abe:	781b      	ldrb	r3, [r3, #0]
   19ac0:	001a      	movs	r2, r3
   19ac2:	687b      	ldr	r3, [r7, #4]
   19ac4:	429a      	cmp	r2, r3
   19ac6:	d204      	bcs.n	19ad2 <prvTraceStoreKernelCall+0x5a>
   19ac8:	4b2f      	ldr	r3, [pc, #188]	; (19b88 <prvTraceStoreKernelCall+0x110>)
   19aca:	0018      	movs	r0, r3
   19acc:	4b2b      	ldr	r3, [pc, #172]	; (19b7c <prvTraceStoreKernelCall+0x104>)
   19ace:	4798      	blx	r3
   19ad0:	e04f      	b.n	19b72 <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   19ad2:	4b2e      	ldr	r3, [pc, #184]	; (19b8c <prvTraceStoreKernelCall+0x114>)
   19ad4:	681b      	ldr	r3, [r3, #0]
   19ad6:	2b00      	cmp	r3, #0
   19ad8:	d004      	beq.n	19ae4 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   19ada:	4b2d      	ldr	r3, [pc, #180]	; (19b90 <prvTraceStoreKernelCall+0x118>)
   19adc:	0018      	movs	r0, r3
   19ade:	4b27      	ldr	r3, [pc, #156]	; (19b7c <prvTraceStoreKernelCall+0x104>)
   19ae0:	4798      	blx	r3
		return;
   19ae2:	e046      	b.n	19b72 <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   19ae4:	4b2b      	ldr	r3, [pc, #172]	; (19b94 <prvTraceStoreKernelCall+0x11c>)
   19ae6:	781b      	ldrb	r3, [r3, #0]
   19ae8:	2b00      	cmp	r3, #0
   19aea:	d041      	beq.n	19b70 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19aec:	f3ef 8310 	mrs	r3, PRIMASK
   19af0:	617b      	str	r3, [r7, #20]
  return(result);
   19af2:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   19af4:	627b      	str	r3, [r7, #36]	; 0x24
   19af6:	2301      	movs	r3, #1
   19af8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19afa:	69bb      	ldr	r3, [r7, #24]
   19afc:	f383 8810 	msr	PRIMASK, r3
   19b00:	4b22      	ldr	r3, [pc, #136]	; (19b8c <prvTraceStoreKernelCall+0x114>)
   19b02:	681b      	ldr	r3, [r3, #0]
   19b04:	1c5a      	adds	r2, r3, #1
   19b06:	4b21      	ldr	r3, [pc, #132]	; (19b8c <prvTraceStoreKernelCall+0x114>)
   19b08:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   19b0a:	4b1e      	ldr	r3, [pc, #120]	; (19b84 <prvTraceStoreKernelCall+0x10c>)
   19b0c:	681b      	ldr	r3, [r3, #0]
   19b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19b10:	2b00      	cmp	r3, #0
   19b12:	d022      	beq.n	19b5a <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   19b14:	2322      	movs	r3, #34	; 0x22
   19b16:	18fc      	adds	r4, r7, r3
   19b18:	4b1f      	ldr	r3, [pc, #124]	; (19b98 <prvTraceStoreKernelCall+0x120>)
   19b1a:	0018      	movs	r0, r3
   19b1c:	4b1f      	ldr	r3, [pc, #124]	; (19b9c <prvTraceStoreKernelCall+0x124>)
   19b1e:	4798      	blx	r3
   19b20:	0003      	movs	r3, r0
   19b22:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   19b24:	2321      	movs	r3, #33	; 0x21
   19b26:	18fb      	adds	r3, r7, r3
   19b28:	687a      	ldr	r2, [r7, #4]
   19b2a:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   19b2c:	4b1c      	ldr	r3, [pc, #112]	; (19ba0 <prvTraceStoreKernelCall+0x128>)
   19b2e:	4798      	blx	r3
   19b30:	0003      	movs	r3, r0
   19b32:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   19b34:	69fb      	ldr	r3, [r7, #28]
   19b36:	2b00      	cmp	r3, #0
   19b38:	d00f      	beq.n	19b5a <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   19b3a:	69fb      	ldr	r3, [r7, #28]
   19b3c:	2222      	movs	r2, #34	; 0x22
   19b3e:	18ba      	adds	r2, r7, r2
   19b40:	8812      	ldrh	r2, [r2, #0]
   19b42:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   19b44:	68fb      	ldr	r3, [r7, #12]
   19b46:	b2da      	uxtb	r2, r3
   19b48:	69fb      	ldr	r3, [r7, #28]
   19b4a:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   19b4c:	69fb      	ldr	r3, [r7, #28]
   19b4e:	2221      	movs	r2, #33	; 0x21
   19b50:	18ba      	adds	r2, r7, r2
   19b52:	7812      	ldrb	r2, [r2, #0]
   19b54:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   19b56:	4b13      	ldr	r3, [pc, #76]	; (19ba4 <prvTraceStoreKernelCall+0x12c>)
   19b58:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   19b5a:	4b0c      	ldr	r3, [pc, #48]	; (19b8c <prvTraceStoreKernelCall+0x114>)
   19b5c:	681b      	ldr	r3, [r3, #0]
   19b5e:	1e5a      	subs	r2, r3, #1
   19b60:	4b0a      	ldr	r3, [pc, #40]	; (19b8c <prvTraceStoreKernelCall+0x114>)
   19b62:	601a      	str	r2, [r3, #0]
   19b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19b66:	613b      	str	r3, [r7, #16]
   19b68:	693b      	ldr	r3, [r7, #16]
   19b6a:	f383 8810 	msr	PRIMASK, r3
   19b6e:	e000      	b.n	19b72 <prvTraceStoreKernelCall+0xfa>
		return;
   19b70:	46c0      	nop			; (mov r8, r8)
}
   19b72:	46bd      	mov	sp, r7
   19b74:	b00b      	add	sp, #44	; 0x2c
   19b76:	bd90      	pop	{r4, r7, pc}
   19b78:	000394a4 	.word	0x000394a4
   19b7c:	0001a91d 	.word	0x0001a91d
   19b80:	000394dc 	.word	0x000394dc
   19b84:	20000df8 	.word	0x20000df8
   19b88:	00039524 	.word	0x00039524
   19b8c:	20000d50 	.word	0x20000d50
   19b90:	0003956c 	.word	0x0003956c
   19b94:	20000d5c 	.word	0x20000d5c
   19b98:	0000ffff 	.word	0x0000ffff
   19b9c:	0001ab31 	.word	0x0001ab31
   19ba0:	0001a4d5 	.word	0x0001a4d5
   19ba4:	0001aad9 	.word	0x0001aad9

00019ba8 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   19ba8:	b580      	push	{r7, lr}
   19baa:	b08a      	sub	sp, #40	; 0x28
   19bac:	af00      	add	r7, sp, #0
   19bae:	60f8      	str	r0, [r7, #12]
   19bb0:	607a      	str	r2, [r7, #4]
   19bb2:	603b      	str	r3, [r7, #0]
   19bb4:	230b      	movs	r3, #11
   19bb6:	18fb      	adds	r3, r7, r3
   19bb8:	1c0a      	adds	r2, r1, #0
   19bba:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   19bbc:	68fb      	ldr	r3, [r7, #12]
   19bbe:	2bfe      	cmp	r3, #254	; 0xfe
   19bc0:	d904      	bls.n	19bcc <prvTraceStoreKernelCallWithParam+0x24>
   19bc2:	4b40      	ldr	r3, [pc, #256]	; (19cc4 <prvTraceStoreKernelCallWithParam+0x11c>)
   19bc4:	0018      	movs	r0, r3
   19bc6:	4b40      	ldr	r3, [pc, #256]	; (19cc8 <prvTraceStoreKernelCallWithParam+0x120>)
   19bc8:	4798      	blx	r3
   19bca:	e077      	b.n	19cbc <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   19bcc:	230b      	movs	r3, #11
   19bce:	18fb      	adds	r3, r7, r3
   19bd0:	781b      	ldrb	r3, [r3, #0]
   19bd2:	2b08      	cmp	r3, #8
   19bd4:	d904      	bls.n	19be0 <prvTraceStoreKernelCallWithParam+0x38>
   19bd6:	4b3d      	ldr	r3, [pc, #244]	; (19ccc <prvTraceStoreKernelCallWithParam+0x124>)
   19bd8:	0018      	movs	r0, r3
   19bda:	4b3b      	ldr	r3, [pc, #236]	; (19cc8 <prvTraceStoreKernelCallWithParam+0x120>)
   19bdc:	4798      	blx	r3
   19bde:	e06d      	b.n	19cbc <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   19be0:	4b3b      	ldr	r3, [pc, #236]	; (19cd0 <prvTraceStoreKernelCallWithParam+0x128>)
   19be2:	681a      	ldr	r2, [r3, #0]
   19be4:	230b      	movs	r3, #11
   19be6:	18fb      	adds	r3, r7, r3
   19be8:	781b      	ldrb	r3, [r3, #0]
   19bea:	2164      	movs	r1, #100	; 0x64
   19bec:	18d3      	adds	r3, r2, r3
   19bee:	185b      	adds	r3, r3, r1
   19bf0:	781b      	ldrb	r3, [r3, #0]
   19bf2:	001a      	movs	r2, r3
   19bf4:	687b      	ldr	r3, [r7, #4]
   19bf6:	429a      	cmp	r2, r3
   19bf8:	d204      	bcs.n	19c04 <prvTraceStoreKernelCallWithParam+0x5c>
   19bfa:	4b36      	ldr	r3, [pc, #216]	; (19cd4 <prvTraceStoreKernelCallWithParam+0x12c>)
   19bfc:	0018      	movs	r0, r3
   19bfe:	4b32      	ldr	r3, [pc, #200]	; (19cc8 <prvTraceStoreKernelCallWithParam+0x120>)
   19c00:	4798      	blx	r3
   19c02:	e05b      	b.n	19cbc <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   19c04:	4b34      	ldr	r3, [pc, #208]	; (19cd8 <prvTraceStoreKernelCallWithParam+0x130>)
   19c06:	681b      	ldr	r3, [r3, #0]
   19c08:	2b00      	cmp	r3, #0
   19c0a:	d004      	beq.n	19c16 <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   19c0c:	4b33      	ldr	r3, [pc, #204]	; (19cdc <prvTraceStoreKernelCallWithParam+0x134>)
   19c0e:	0018      	movs	r0, r3
   19c10:	4b2d      	ldr	r3, [pc, #180]	; (19cc8 <prvTraceStoreKernelCallWithParam+0x120>)
   19c12:	4798      	blx	r3
		return;
   19c14:	e052      	b.n	19cbc <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19c16:	f3ef 8310 	mrs	r3, PRIMASK
   19c1a:	617b      	str	r3, [r7, #20]
  return(result);
   19c1c:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   19c1e:	627b      	str	r3, [r7, #36]	; 0x24
   19c20:	2301      	movs	r3, #1
   19c22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19c24:	69bb      	ldr	r3, [r7, #24]
   19c26:	f383 8810 	msr	PRIMASK, r3
   19c2a:	4b2b      	ldr	r3, [pc, #172]	; (19cd8 <prvTraceStoreKernelCallWithParam+0x130>)
   19c2c:	681b      	ldr	r3, [r3, #0]
   19c2e:	1c5a      	adds	r2, r3, #1
   19c30:	4b29      	ldr	r3, [pc, #164]	; (19cd8 <prvTraceStoreKernelCallWithParam+0x130>)
   19c32:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   19c34:	4b26      	ldr	r3, [pc, #152]	; (19cd0 <prvTraceStoreKernelCallWithParam+0x128>)
   19c36:	681b      	ldr	r3, [r3, #0]
   19c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19c3a:	2b00      	cmp	r3, #0
   19c3c:	d034      	beq.n	19ca8 <prvTraceStoreKernelCallWithParam+0x100>
   19c3e:	4b28      	ldr	r3, [pc, #160]	; (19ce0 <prvTraceStoreKernelCallWithParam+0x138>)
   19c40:	781b      	ldrb	r3, [r3, #0]
   19c42:	2b00      	cmp	r3, #0
   19c44:	d030      	beq.n	19ca8 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   19c46:	20ff      	movs	r0, #255	; 0xff
   19c48:	4b26      	ldr	r3, [pc, #152]	; (19ce4 <prvTraceStoreKernelCallWithParam+0x13c>)
   19c4a:	4798      	blx	r3
   19c4c:	0003      	movs	r3, r0
   19c4e:	001a      	movs	r2, r3
   19c50:	2323      	movs	r3, #35	; 0x23
   19c52:	18fb      	adds	r3, r7, r3
   19c54:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   19c56:	683b      	ldr	r3, [r7, #0]
   19c58:	0019      	movs	r1, r3
   19c5a:	20ff      	movs	r0, #255	; 0xff
   19c5c:	4b22      	ldr	r3, [pc, #136]	; (19ce8 <prvTraceStoreKernelCallWithParam+0x140>)
   19c5e:	4798      	blx	r3
   19c60:	0002      	movs	r2, r0
   19c62:	2322      	movs	r3, #34	; 0x22
   19c64:	18fb      	adds	r3, r7, r3
   19c66:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   19c68:	2321      	movs	r3, #33	; 0x21
   19c6a:	18fb      	adds	r3, r7, r3
   19c6c:	687a      	ldr	r2, [r7, #4]
   19c6e:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   19c70:	4b1e      	ldr	r3, [pc, #120]	; (19cec <prvTraceStoreKernelCallWithParam+0x144>)
   19c72:	4798      	blx	r3
   19c74:	0003      	movs	r3, r0
   19c76:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   19c78:	69fb      	ldr	r3, [r7, #28]
   19c7a:	2b00      	cmp	r3, #0
   19c7c:	d014      	beq.n	19ca8 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   19c7e:	69fb      	ldr	r3, [r7, #28]
   19c80:	2223      	movs	r2, #35	; 0x23
   19c82:	18ba      	adds	r2, r7, r2
   19c84:	7812      	ldrb	r2, [r2, #0]
   19c86:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   19c88:	68fb      	ldr	r3, [r7, #12]
   19c8a:	b2da      	uxtb	r2, r3
   19c8c:	69fb      	ldr	r3, [r7, #28]
   19c8e:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   19c90:	69fb      	ldr	r3, [r7, #28]
   19c92:	2221      	movs	r2, #33	; 0x21
   19c94:	18ba      	adds	r2, r7, r2
   19c96:	7812      	ldrb	r2, [r2, #0]
   19c98:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   19c9a:	69fb      	ldr	r3, [r7, #28]
   19c9c:	2222      	movs	r2, #34	; 0x22
   19c9e:	18ba      	adds	r2, r7, r2
   19ca0:	7812      	ldrb	r2, [r2, #0]
   19ca2:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   19ca4:	4b12      	ldr	r3, [pc, #72]	; (19cf0 <prvTraceStoreKernelCallWithParam+0x148>)
   19ca6:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   19ca8:	4b0b      	ldr	r3, [pc, #44]	; (19cd8 <prvTraceStoreKernelCallWithParam+0x130>)
   19caa:	681b      	ldr	r3, [r3, #0]
   19cac:	1e5a      	subs	r2, r3, #1
   19cae:	4b0a      	ldr	r3, [pc, #40]	; (19cd8 <prvTraceStoreKernelCallWithParam+0x130>)
   19cb0:	601a      	str	r2, [r3, #0]
   19cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19cb4:	613b      	str	r3, [r7, #16]
   19cb6:	693b      	ldr	r3, [r7, #16]
   19cb8:	f383 8810 	msr	PRIMASK, r3
}
   19cbc:	46bd      	mov	sp, r7
   19cbe:	b00a      	add	sp, #40	; 0x28
   19cc0:	bd80      	pop	{r7, pc}
   19cc2:	46c0      	nop			; (mov r8, r8)
   19cc4:	000395a4 	.word	0x000395a4
   19cc8:	0001a91d 	.word	0x0001a91d
   19ccc:	000395e4 	.word	0x000395e4
   19cd0:	20000df8 	.word	0x20000df8
   19cd4:	00039634 	.word	0x00039634
   19cd8:	20000d50 	.word	0x20000d50
   19cdc:	00039684 	.word	0x00039684
   19ce0:	20000d5c 	.word	0x20000d5c
   19ce4:	0001ab31 	.word	0x0001ab31
   19ce8:	00019cf5 	.word	0x00019cf5
   19cec:	0001a4d5 	.word	0x0001a4d5
   19cf0:	0001aad9 	.word	0x0001aad9

00019cf4 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   19cf4:	b580      	push	{r7, lr}
   19cf6:	b084      	sub	sp, #16
   19cf8:	af00      	add	r7, sp, #0
   19cfa:	6078      	str	r0, [r7, #4]
   19cfc:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   19cfe:	687b      	ldr	r3, [r7, #4]
   19d00:	2bff      	cmp	r3, #255	; 0xff
   19d02:	d009      	beq.n	19d18 <prvTraceGetParam+0x24>
   19d04:	687b      	ldr	r3, [r7, #4]
   19d06:	4a19      	ldr	r2, [pc, #100]	; (19d6c <prvTraceGetParam+0x78>)
   19d08:	4293      	cmp	r3, r2
   19d0a:	d005      	beq.n	19d18 <prvTraceGetParam+0x24>
   19d0c:	4b18      	ldr	r3, [pc, #96]	; (19d70 <prvTraceGetParam+0x7c>)
   19d0e:	0018      	movs	r0, r3
   19d10:	4b18      	ldr	r3, [pc, #96]	; (19d74 <prvTraceGetParam+0x80>)
   19d12:	4798      	blx	r3
   19d14:	683b      	ldr	r3, [r7, #0]
   19d16:	e024      	b.n	19d62 <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   19d18:	683a      	ldr	r2, [r7, #0]
   19d1a:	687b      	ldr	r3, [r7, #4]
   19d1c:	429a      	cmp	r2, r3
   19d1e:	d801      	bhi.n	19d24 <prvTraceGetParam+0x30>
	{
		return param;
   19d20:	683b      	ldr	r3, [r7, #0]
   19d22:	e01e      	b.n	19d62 <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   19d24:	4b14      	ldr	r3, [pc, #80]	; (19d78 <prvTraceGetParam+0x84>)
   19d26:	4798      	blx	r3
   19d28:	0003      	movs	r3, r0
   19d2a:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   19d2c:	68fb      	ldr	r3, [r7, #12]
   19d2e:	2b00      	cmp	r3, #0
   19d30:	d014      	beq.n	19d5c <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   19d32:	68fb      	ldr	r3, [r7, #12]
   19d34:	2201      	movs	r2, #1
   19d36:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   19d38:	687b      	ldr	r3, [r7, #4]
   19d3a:	43db      	mvns	r3, r3
   19d3c:	683a      	ldr	r2, [r7, #0]
   19d3e:	4013      	ands	r3, r2
   19d40:	0a1b      	lsrs	r3, r3, #8
   19d42:	b2da      	uxtb	r2, r3
   19d44:	68fb      	ldr	r3, [r7, #12]
   19d46:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   19d48:	687b      	ldr	r3, [r7, #4]
   19d4a:	43db      	mvns	r3, r3
   19d4c:	683a      	ldr	r2, [r7, #0]
   19d4e:	4013      	ands	r3, r2
   19d50:	0c1b      	lsrs	r3, r3, #16
   19d52:	b29a      	uxth	r2, r3
   19d54:	68fb      	ldr	r3, [r7, #12]
   19d56:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   19d58:	4b08      	ldr	r3, [pc, #32]	; (19d7c <prvTraceGetParam+0x88>)
   19d5a:	4798      	blx	r3
		}

		return param & param_max;
   19d5c:	683b      	ldr	r3, [r7, #0]
   19d5e:	687a      	ldr	r2, [r7, #4]
   19d60:	4013      	ands	r3, r2
	}
}
   19d62:	0018      	movs	r0, r3
   19d64:	46bd      	mov	sp, r7
   19d66:	b004      	add	sp, #16
   19d68:	bd80      	pop	{r7, pc}
   19d6a:	46c0      	nop			; (mov r8, r8)
   19d6c:	0000ffff 	.word	0x0000ffff
   19d70:	000396bc 	.word	0x000396bc
   19d74:	0001a91d 	.word	0x0001a91d
   19d78:	0001a4d5 	.word	0x0001a4d5
   19d7c:	0001aad9 	.word	0x0001aad9

00019d80 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   19d80:	b580      	push	{r7, lr}
   19d82:	b08a      	sub	sp, #40	; 0x28
   19d84:	af00      	add	r7, sp, #0
   19d86:	6078      	str	r0, [r7, #4]
   19d88:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   19d8a:	2326      	movs	r3, #38	; 0x26
   19d8c:	18fb      	adds	r3, r7, r3
   19d8e:	2200      	movs	r2, #0
   19d90:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   19d92:	687b      	ldr	r3, [r7, #4]
   19d94:	2bfe      	cmp	r3, #254	; 0xfe
   19d96:	d904      	bls.n	19da2 <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   19d98:	4b2d      	ldr	r3, [pc, #180]	; (19e50 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   19d9a:	0018      	movs	r0, r3
   19d9c:	4b2d      	ldr	r3, [pc, #180]	; (19e54 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   19d9e:	4798      	blx	r3
   19da0:	e053      	b.n	19e4a <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   19da2:	4b2d      	ldr	r3, [pc, #180]	; (19e58 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19da4:	681b      	ldr	r3, [r3, #0]
   19da6:	2b00      	cmp	r3, #0
   19da8:	d004      	beq.n	19db4 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   19daa:	4b2c      	ldr	r3, [pc, #176]	; (19e5c <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   19dac:	0018      	movs	r0, r3
   19dae:	4b29      	ldr	r3, [pc, #164]	; (19e54 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   19db0:	4798      	blx	r3
		return;
   19db2:	e04a      	b.n	19e4a <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19db4:	f3ef 8310 	mrs	r3, PRIMASK
   19db8:	613b      	str	r3, [r7, #16]
  return(result);
   19dba:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   19dbc:	623b      	str	r3, [r7, #32]
   19dbe:	2301      	movs	r3, #1
   19dc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19dc2:	697b      	ldr	r3, [r7, #20]
   19dc4:	f383 8810 	msr	PRIMASK, r3
   19dc8:	4b23      	ldr	r3, [pc, #140]	; (19e58 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19dca:	681b      	ldr	r3, [r3, #0]
   19dcc:	1c5a      	adds	r2, r3, #1
   19dce:	4b22      	ldr	r3, [pc, #136]	; (19e58 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19dd0:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   19dd2:	4b23      	ldr	r3, [pc, #140]	; (19e60 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   19dd4:	681b      	ldr	r3, [r3, #0]
   19dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19dd8:	2b00      	cmp	r3, #0
   19dda:	d02c      	beq.n	19e36 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   19ddc:	4b21      	ldr	r3, [pc, #132]	; (19e64 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   19dde:	781b      	ldrb	r3, [r3, #0]
   19de0:	2b00      	cmp	r3, #0
   19de2:	d028      	beq.n	19e36 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   19de4:	20ff      	movs	r0, #255	; 0xff
   19de6:	4b20      	ldr	r3, [pc, #128]	; (19e68 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   19de8:	4798      	blx	r3
   19dea:	0003      	movs	r3, r0
   19dec:	001a      	movs	r2, r3
   19dee:	231f      	movs	r3, #31
   19df0:	18fb      	adds	r3, r7, r3
   19df2:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   19df4:	683b      	ldr	r3, [r7, #0]
   19df6:	4a1d      	ldr	r2, [pc, #116]	; (19e6c <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   19df8:	0019      	movs	r1, r3
   19dfa:	0010      	movs	r0, r2
   19dfc:	4b1c      	ldr	r3, [pc, #112]	; (19e70 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   19dfe:	4798      	blx	r3
   19e00:	0002      	movs	r2, r0
   19e02:	2326      	movs	r3, #38	; 0x26
   19e04:	18fb      	adds	r3, r7, r3
   19e06:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   19e08:	4b1a      	ldr	r3, [pc, #104]	; (19e74 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   19e0a:	4798      	blx	r3
   19e0c:	0003      	movs	r3, r0
   19e0e:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   19e10:	69bb      	ldr	r3, [r7, #24]
   19e12:	2b00      	cmp	r3, #0
   19e14:	d00f      	beq.n	19e36 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   19e16:	69bb      	ldr	r3, [r7, #24]
   19e18:	221f      	movs	r2, #31
   19e1a:	18ba      	adds	r2, r7, r2
   19e1c:	7812      	ldrb	r2, [r2, #0]
   19e1e:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   19e20:	687b      	ldr	r3, [r7, #4]
   19e22:	b2da      	uxtb	r2, r3
   19e24:	69bb      	ldr	r3, [r7, #24]
   19e26:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   19e28:	69bb      	ldr	r3, [r7, #24]
   19e2a:	2226      	movs	r2, #38	; 0x26
   19e2c:	18ba      	adds	r2, r7, r2
   19e2e:	8812      	ldrh	r2, [r2, #0]
   19e30:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   19e32:	4b11      	ldr	r3, [pc, #68]	; (19e78 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   19e34:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   19e36:	4b08      	ldr	r3, [pc, #32]	; (19e58 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19e38:	681b      	ldr	r3, [r3, #0]
   19e3a:	1e5a      	subs	r2, r3, #1
   19e3c:	4b06      	ldr	r3, [pc, #24]	; (19e58 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19e3e:	601a      	str	r2, [r3, #0]
   19e40:	6a3b      	ldr	r3, [r7, #32]
   19e42:	60fb      	str	r3, [r7, #12]
   19e44:	68fb      	ldr	r3, [r7, #12]
   19e46:	f383 8810 	msr	PRIMASK, r3
}
   19e4a:	46bd      	mov	sp, r7
   19e4c:	b00a      	add	sp, #40	; 0x28
   19e4e:	bd80      	pop	{r7, pc}
   19e50:	000396f8 	.word	0x000396f8
   19e54:	0001a91d 	.word	0x0001a91d
   19e58:	20000d50 	.word	0x20000d50
   19e5c:	00039750 	.word	0x00039750
   19e60:	20000df8 	.word	0x20000df8
   19e64:	20000d5c 	.word	0x20000d5c
   19e68:	0001ab31 	.word	0x0001ab31
   19e6c:	0000ffff 	.word	0x0000ffff
   19e70:	00019cf5 	.word	0x00019cf5
   19e74:	0001a4d5 	.word	0x0001a4d5
   19e78:	0001aad9 	.word	0x0001aad9

00019e7c <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   19e7c:	b590      	push	{r4, r7, lr}
   19e7e:	b089      	sub	sp, #36	; 0x24
   19e80:	af00      	add	r7, sp, #0
   19e82:	0002      	movs	r2, r0
   19e84:	1dfb      	adds	r3, r7, #7
   19e86:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   19e88:	1dfb      	adds	r3, r7, #7
   19e8a:	781b      	ldrb	r3, [r3, #0]
   19e8c:	2b0f      	cmp	r3, #15
   19e8e:	d904      	bls.n	19e9a <prvTraceStoreTaskswitch+0x1e>
   19e90:	4b34      	ldr	r3, [pc, #208]	; (19f64 <prvTraceStoreTaskswitch+0xe8>)
   19e92:	0018      	movs	r0, r3
   19e94:	4b34      	ldr	r3, [pc, #208]	; (19f68 <prvTraceStoreTaskswitch+0xec>)
   19e96:	4798      	blx	r3
   19e98:	e061      	b.n	19f5e <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19e9a:	f3ef 8310 	mrs	r3, PRIMASK
   19e9e:	60fb      	str	r3, [r7, #12]
  return(result);
   19ea0:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   19ea2:	61fb      	str	r3, [r7, #28]
   19ea4:	2301      	movs	r3, #1
   19ea6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19ea8:	693b      	ldr	r3, [r7, #16]
   19eaa:	f383 8810 	msr	PRIMASK, r3
   19eae:	4b2f      	ldr	r3, [pc, #188]	; (19f6c <prvTraceStoreTaskswitch+0xf0>)
   19eb0:	681b      	ldr	r3, [r3, #0]
   19eb2:	1c5a      	adds	r2, r3, #1
   19eb4:	4b2d      	ldr	r3, [pc, #180]	; (19f6c <prvTraceStoreTaskswitch+0xf0>)
   19eb6:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   19eb8:	4b2d      	ldr	r3, [pc, #180]	; (19f70 <prvTraceStoreTaskswitch+0xf4>)
   19eba:	781b      	ldrb	r3, [r3, #0]
   19ebc:	1dfa      	adds	r2, r7, #7
   19ebe:	7812      	ldrb	r2, [r2, #0]
   19ec0:	429a      	cmp	r2, r3
   19ec2:	d042      	beq.n	19f4a <prvTraceStoreTaskswitch+0xce>
   19ec4:	4b2b      	ldr	r3, [pc, #172]	; (19f74 <prvTraceStoreTaskswitch+0xf8>)
   19ec6:	681b      	ldr	r3, [r3, #0]
   19ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19eca:	2b00      	cmp	r3, #0
   19ecc:	d03d      	beq.n	19f4a <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   19ece:	4b2a      	ldr	r3, [pc, #168]	; (19f78 <prvTraceStoreTaskswitch+0xfc>)
   19ed0:	2200      	movs	r2, #0
   19ed2:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   19ed4:	231a      	movs	r3, #26
   19ed6:	18fc      	adds	r4, r7, r3
   19ed8:	4b28      	ldr	r3, [pc, #160]	; (19f7c <prvTraceStoreTaskswitch+0x100>)
   19eda:	0018      	movs	r0, r3
   19edc:	4b28      	ldr	r3, [pc, #160]	; (19f80 <prvTraceStoreTaskswitch+0x104>)
   19ede:	4798      	blx	r3
   19ee0:	0003      	movs	r3, r0
   19ee2:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   19ee4:	4b22      	ldr	r3, [pc, #136]	; (19f70 <prvTraceStoreTaskswitch+0xf4>)
   19ee6:	1dfa      	adds	r2, r7, #7
   19ee8:	7812      	ldrb	r2, [r2, #0]
   19eea:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   19eec:	2319      	movs	r3, #25
   19eee:	18fb      	adds	r3, r7, r3
   19ef0:	4a1f      	ldr	r2, [pc, #124]	; (19f70 <prvTraceStoreTaskswitch+0xf4>)
   19ef2:	7812      	ldrb	r2, [r2, #0]
   19ef4:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   19ef6:	4b23      	ldr	r3, [pc, #140]	; (19f84 <prvTraceStoreTaskswitch+0x108>)
   19ef8:	4798      	blx	r3
   19efa:	0003      	movs	r3, r0
   19efc:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   19efe:	697b      	ldr	r3, [r7, #20]
   19f00:	2b00      	cmp	r3, #0
   19f02:	d022      	beq.n	19f4a <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   19f04:	4b1a      	ldr	r3, [pc, #104]	; (19f70 <prvTraceStoreTaskswitch+0xf4>)
   19f06:	781b      	ldrb	r3, [r3, #0]
   19f08:	0019      	movs	r1, r3
   19f0a:	2003      	movs	r0, #3
   19f0c:	4b1e      	ldr	r3, [pc, #120]	; (19f88 <prvTraceStoreTaskswitch+0x10c>)
   19f0e:	4798      	blx	r3
   19f10:	0003      	movs	r3, r0
   19f12:	2b01      	cmp	r3, #1
   19f14:	d103      	bne.n	19f1e <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   19f16:	697b      	ldr	r3, [r7, #20]
   19f18:	2207      	movs	r2, #7
   19f1a:	701a      	strb	r2, [r3, #0]
   19f1c:	e002      	b.n	19f24 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   19f1e:	697b      	ldr	r3, [r7, #20]
   19f20:	2206      	movs	r2, #6
   19f22:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   19f24:	697b      	ldr	r3, [r7, #20]
   19f26:	221a      	movs	r2, #26
   19f28:	18ba      	adds	r2, r7, r2
   19f2a:	8812      	ldrh	r2, [r2, #0]
   19f2c:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   19f2e:	697b      	ldr	r3, [r7, #20]
   19f30:	2219      	movs	r2, #25
   19f32:	18ba      	adds	r2, r7, r2
   19f34:	7812      	ldrb	r2, [r2, #0]
   19f36:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   19f38:	4b0d      	ldr	r3, [pc, #52]	; (19f70 <prvTraceStoreTaskswitch+0xf4>)
   19f3a:	781b      	ldrb	r3, [r3, #0]
   19f3c:	2201      	movs	r2, #1
   19f3e:	0019      	movs	r1, r3
   19f40:	2003      	movs	r0, #3
   19f42:	4b12      	ldr	r3, [pc, #72]	; (19f8c <prvTraceStoreTaskswitch+0x110>)
   19f44:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   19f46:	4b12      	ldr	r3, [pc, #72]	; (19f90 <prvTraceStoreTaskswitch+0x114>)
   19f48:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   19f4a:	4b08      	ldr	r3, [pc, #32]	; (19f6c <prvTraceStoreTaskswitch+0xf0>)
   19f4c:	681b      	ldr	r3, [r3, #0]
   19f4e:	1e5a      	subs	r2, r3, #1
   19f50:	4b06      	ldr	r3, [pc, #24]	; (19f6c <prvTraceStoreTaskswitch+0xf0>)
   19f52:	601a      	str	r2, [r3, #0]
   19f54:	69fb      	ldr	r3, [r7, #28]
   19f56:	60bb      	str	r3, [r7, #8]
   19f58:	68bb      	ldr	r3, [r7, #8]
   19f5a:	f383 8810 	msr	PRIMASK, r3
}
   19f5e:	46bd      	mov	sp, r7
   19f60:	b009      	add	sp, #36	; 0x24
   19f62:	bd90      	pop	{r4, r7, pc}
   19f64:	00039788 	.word	0x00039788
   19f68:	0001a91d 	.word	0x0001a91d
   19f6c:	20000d50 	.word	0x20000d50
   19f70:	20000d5c 	.word	0x20000d5c
   19f74:	20000df8 	.word	0x20000df8
   19f78:	20000d3c 	.word	0x20000d3c
   19f7c:	0000ffff 	.word	0x0000ffff
   19f80:	0001ab31 	.word	0x0001ab31
   19f84:	0001a4d5 	.word	0x0001a4d5
   19f88:	0001a179 	.word	0x0001a179
   19f8c:	0001a0d5 	.word	0x0001a0d5
   19f90:	0001aad9 	.word	0x0001aad9

00019f94 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   19f94:	b590      	push	{r4, r7, lr}
   19f96:	b083      	sub	sp, #12
   19f98:	af00      	add	r7, sp, #0
   19f9a:	0004      	movs	r4, r0
   19f9c:	0008      	movs	r0, r1
   19f9e:	0011      	movs	r1, r2
   19fa0:	1dfb      	adds	r3, r7, #7
   19fa2:	1c22      	adds	r2, r4, #0
   19fa4:	701a      	strb	r2, [r3, #0]
   19fa6:	1dbb      	adds	r3, r7, #6
   19fa8:	1c02      	adds	r2, r0, #0
   19faa:	701a      	strb	r2, [r3, #0]
   19fac:	1d7b      	adds	r3, r7, #5
   19fae:	1c0a      	adds	r2, r1, #0
   19fb0:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19fb2:	1dfb      	adds	r3, r7, #7
   19fb4:	781b      	ldrb	r3, [r3, #0]
   19fb6:	2b08      	cmp	r3, #8
   19fb8:	d904      	bls.n	19fc4 <prvTraceSetPriorityProperty+0x30>
   19fba:	4b1a      	ldr	r3, [pc, #104]	; (1a024 <prvTraceSetPriorityProperty+0x90>)
   19fbc:	0018      	movs	r0, r3
   19fbe:	4b1a      	ldr	r3, [pc, #104]	; (1a028 <prvTraceSetPriorityProperty+0x94>)
   19fc0:	4798      	blx	r3
   19fc2:	e02c      	b.n	1a01e <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19fc4:	4b19      	ldr	r3, [pc, #100]	; (1a02c <prvTraceSetPriorityProperty+0x98>)
   19fc6:	681a      	ldr	r2, [r3, #0]
   19fc8:	1dfb      	adds	r3, r7, #7
   19fca:	781b      	ldrb	r3, [r3, #0]
   19fcc:	2164      	movs	r1, #100	; 0x64
   19fce:	18d3      	adds	r3, r2, r3
   19fd0:	185b      	adds	r3, r3, r1
   19fd2:	781b      	ldrb	r3, [r3, #0]
   19fd4:	1dba      	adds	r2, r7, #6
   19fd6:	7812      	ldrb	r2, [r2, #0]
   19fd8:	429a      	cmp	r2, r3
   19fda:	d904      	bls.n	19fe6 <prvTraceSetPriorityProperty+0x52>
   19fdc:	4b14      	ldr	r3, [pc, #80]	; (1a030 <prvTraceSetPriorityProperty+0x9c>)
   19fde:	0018      	movs	r0, r3
   19fe0:	4b11      	ldr	r3, [pc, #68]	; (1a028 <prvTraceSetPriorityProperty+0x94>)
   19fe2:	4798      	blx	r3
   19fe4:	e01b      	b.n	1a01e <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   19fe6:	4b11      	ldr	r3, [pc, #68]	; (1a02c <prvTraceSetPriorityProperty+0x98>)
   19fe8:	681c      	ldr	r4, [r3, #0]
   19fea:	1dfb      	adds	r3, r7, #7
   19fec:	781a      	ldrb	r2, [r3, #0]
   19fee:	1dbb      	adds	r3, r7, #6
   19ff0:	781b      	ldrb	r3, [r3, #0]
   19ff2:	0011      	movs	r1, r2
   19ff4:	0018      	movs	r0, r3
   19ff6:	4b0f      	ldr	r3, [pc, #60]	; (1a034 <prvTraceSetPriorityProperty+0xa0>)
   19ff8:	4798      	blx	r3
   19ffa:	0003      	movs	r3, r0
   19ffc:	0018      	movs	r0, r3
   19ffe:	4b0b      	ldr	r3, [pc, #44]	; (1a02c <prvTraceSetPriorityProperty+0x98>)
   1a000:	681a      	ldr	r2, [r3, #0]
   1a002:	1dfb      	adds	r3, r7, #7
   1a004:	781b      	ldrb	r3, [r3, #0]
   1a006:	2170      	movs	r1, #112	; 0x70
   1a008:	18d3      	adds	r3, r2, r3
   1a00a:	185b      	adds	r3, r3, r1
   1a00c:	781b      	ldrb	r3, [r3, #0]
   1a00e:	18c3      	adds	r3, r0, r3
   1a010:	3301      	adds	r3, #1
   1a012:	229c      	movs	r2, #156	; 0x9c
   1a014:	18e3      	adds	r3, r4, r3
   1a016:	189b      	adds	r3, r3, r2
   1a018:	1d7a      	adds	r2, r7, #5
   1a01a:	7812      	ldrb	r2, [r2, #0]
   1a01c:	701a      	strb	r2, [r3, #0]
}
   1a01e:	46bd      	mov	sp, r7
   1a020:	b003      	add	sp, #12
   1a022:	bd90      	pop	{r4, r7, pc}
   1a024:	0003991c 	.word	0x0003991c
   1a028:	0001a91d 	.word	0x0001a91d
   1a02c:	20000df8 	.word	0x20000df8
   1a030:	00039968 	.word	0x00039968
   1a034:	0001a529 	.word	0x0001a529

0001a038 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   1a038:	b590      	push	{r4, r7, lr}
   1a03a:	b083      	sub	sp, #12
   1a03c:	af00      	add	r7, sp, #0
   1a03e:	0002      	movs	r2, r0
   1a040:	1dfb      	adds	r3, r7, #7
   1a042:	701a      	strb	r2, [r3, #0]
   1a044:	1dbb      	adds	r3, r7, #6
   1a046:	1c0a      	adds	r2, r1, #0
   1a048:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1a04a:	1dfb      	adds	r3, r7, #7
   1a04c:	781b      	ldrb	r3, [r3, #0]
   1a04e:	2b08      	cmp	r3, #8
   1a050:	d905      	bls.n	1a05e <prvTraceGetPriorityProperty+0x26>
   1a052:	4b1b      	ldr	r3, [pc, #108]	; (1a0c0 <prvTraceGetPriorityProperty+0x88>)
   1a054:	0018      	movs	r0, r3
   1a056:	4b1b      	ldr	r3, [pc, #108]	; (1a0c4 <prvTraceGetPriorityProperty+0x8c>)
   1a058:	4798      	blx	r3
   1a05a:	2300      	movs	r3, #0
   1a05c:	e02b      	b.n	1a0b6 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1a05e:	4b1a      	ldr	r3, [pc, #104]	; (1a0c8 <prvTraceGetPriorityProperty+0x90>)
   1a060:	681a      	ldr	r2, [r3, #0]
   1a062:	1dfb      	adds	r3, r7, #7
   1a064:	781b      	ldrb	r3, [r3, #0]
   1a066:	2164      	movs	r1, #100	; 0x64
   1a068:	18d3      	adds	r3, r2, r3
   1a06a:	185b      	adds	r3, r3, r1
   1a06c:	781b      	ldrb	r3, [r3, #0]
   1a06e:	1dba      	adds	r2, r7, #6
   1a070:	7812      	ldrb	r2, [r2, #0]
   1a072:	429a      	cmp	r2, r3
   1a074:	d905      	bls.n	1a082 <prvTraceGetPriorityProperty+0x4a>
   1a076:	4b15      	ldr	r3, [pc, #84]	; (1a0cc <prvTraceGetPriorityProperty+0x94>)
   1a078:	0018      	movs	r0, r3
   1a07a:	4b12      	ldr	r3, [pc, #72]	; (1a0c4 <prvTraceGetPriorityProperty+0x8c>)
   1a07c:	4798      	blx	r3
   1a07e:	2300      	movs	r3, #0
   1a080:	e019      	b.n	1a0b6 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   1a082:	4b11      	ldr	r3, [pc, #68]	; (1a0c8 <prvTraceGetPriorityProperty+0x90>)
   1a084:	681c      	ldr	r4, [r3, #0]
   1a086:	1dfb      	adds	r3, r7, #7
   1a088:	781a      	ldrb	r2, [r3, #0]
   1a08a:	1dbb      	adds	r3, r7, #6
   1a08c:	781b      	ldrb	r3, [r3, #0]
   1a08e:	0011      	movs	r1, r2
   1a090:	0018      	movs	r0, r3
   1a092:	4b0f      	ldr	r3, [pc, #60]	; (1a0d0 <prvTraceGetPriorityProperty+0x98>)
   1a094:	4798      	blx	r3
   1a096:	0003      	movs	r3, r0
   1a098:	0018      	movs	r0, r3
   1a09a:	4b0b      	ldr	r3, [pc, #44]	; (1a0c8 <prvTraceGetPriorityProperty+0x90>)
   1a09c:	681a      	ldr	r2, [r3, #0]
   1a09e:	1dfb      	adds	r3, r7, #7
   1a0a0:	781b      	ldrb	r3, [r3, #0]
   1a0a2:	2170      	movs	r1, #112	; 0x70
   1a0a4:	18d3      	adds	r3, r2, r3
   1a0a6:	185b      	adds	r3, r3, r1
   1a0a8:	781b      	ldrb	r3, [r3, #0]
   1a0aa:	18c3      	adds	r3, r0, r3
   1a0ac:	3301      	adds	r3, #1
   1a0ae:	229c      	movs	r2, #156	; 0x9c
   1a0b0:	18e3      	adds	r3, r4, r3
   1a0b2:	189b      	adds	r3, r3, r2
   1a0b4:	781b      	ldrb	r3, [r3, #0]
}
   1a0b6:	0018      	movs	r0, r3
   1a0b8:	46bd      	mov	sp, r7
   1a0ba:	b003      	add	sp, #12
   1a0bc:	bd90      	pop	{r4, r7, pc}
   1a0be:	46c0      	nop			; (mov r8, r8)
   1a0c0:	000399a8 	.word	0x000399a8
   1a0c4:	0001a91d 	.word	0x0001a91d
   1a0c8:	20000df8 	.word	0x20000df8
   1a0cc:	000399f4 	.word	0x000399f4
   1a0d0:	0001a529 	.word	0x0001a529

0001a0d4 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   1a0d4:	b590      	push	{r4, r7, lr}
   1a0d6:	b083      	sub	sp, #12
   1a0d8:	af00      	add	r7, sp, #0
   1a0da:	0004      	movs	r4, r0
   1a0dc:	0008      	movs	r0, r1
   1a0de:	0011      	movs	r1, r2
   1a0e0:	1dfb      	adds	r3, r7, #7
   1a0e2:	1c22      	adds	r2, r4, #0
   1a0e4:	701a      	strb	r2, [r3, #0]
   1a0e6:	1dbb      	adds	r3, r7, #6
   1a0e8:	1c02      	adds	r2, r0, #0
   1a0ea:	701a      	strb	r2, [r3, #0]
   1a0ec:	1d7b      	adds	r3, r7, #5
   1a0ee:	1c0a      	adds	r2, r1, #0
   1a0f0:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1a0f2:	1dfb      	adds	r3, r7, #7
   1a0f4:	781b      	ldrb	r3, [r3, #0]
   1a0f6:	2b08      	cmp	r3, #8
   1a0f8:	d904      	bls.n	1a104 <prvTraceSetObjectState+0x30>
   1a0fa:	4b1a      	ldr	r3, [pc, #104]	; (1a164 <prvTraceSetObjectState+0x90>)
   1a0fc:	0018      	movs	r0, r3
   1a0fe:	4b1a      	ldr	r3, [pc, #104]	; (1a168 <prvTraceSetObjectState+0x94>)
   1a100:	4798      	blx	r3
   1a102:	e02b      	b.n	1a15c <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1a104:	4b19      	ldr	r3, [pc, #100]	; (1a16c <prvTraceSetObjectState+0x98>)
   1a106:	681a      	ldr	r2, [r3, #0]
   1a108:	1dfb      	adds	r3, r7, #7
   1a10a:	781b      	ldrb	r3, [r3, #0]
   1a10c:	2164      	movs	r1, #100	; 0x64
   1a10e:	18d3      	adds	r3, r2, r3
   1a110:	185b      	adds	r3, r3, r1
   1a112:	781b      	ldrb	r3, [r3, #0]
   1a114:	1dba      	adds	r2, r7, #6
   1a116:	7812      	ldrb	r2, [r2, #0]
   1a118:	429a      	cmp	r2, r3
   1a11a:	d904      	bls.n	1a126 <prvTraceSetObjectState+0x52>
   1a11c:	4b14      	ldr	r3, [pc, #80]	; (1a170 <prvTraceSetObjectState+0x9c>)
   1a11e:	0018      	movs	r0, r3
   1a120:	4b11      	ldr	r3, [pc, #68]	; (1a168 <prvTraceSetObjectState+0x94>)
   1a122:	4798      	blx	r3
   1a124:	e01a      	b.n	1a15c <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   1a126:	4b11      	ldr	r3, [pc, #68]	; (1a16c <prvTraceSetObjectState+0x98>)
   1a128:	681c      	ldr	r4, [r3, #0]
   1a12a:	1dfb      	adds	r3, r7, #7
   1a12c:	781a      	ldrb	r2, [r3, #0]
   1a12e:	1dbb      	adds	r3, r7, #6
   1a130:	781b      	ldrb	r3, [r3, #0]
   1a132:	0011      	movs	r1, r2
   1a134:	0018      	movs	r0, r3
   1a136:	4b0f      	ldr	r3, [pc, #60]	; (1a174 <prvTraceSetObjectState+0xa0>)
   1a138:	4798      	blx	r3
   1a13a:	0003      	movs	r3, r0
   1a13c:	0018      	movs	r0, r3
   1a13e:	4b0b      	ldr	r3, [pc, #44]	; (1a16c <prvTraceSetObjectState+0x98>)
   1a140:	681a      	ldr	r2, [r3, #0]
   1a142:	1dfb      	adds	r3, r7, #7
   1a144:	781b      	ldrb	r3, [r3, #0]
   1a146:	2170      	movs	r1, #112	; 0x70
   1a148:	18d3      	adds	r3, r2, r3
   1a14a:	185b      	adds	r3, r3, r1
   1a14c:	781b      	ldrb	r3, [r3, #0]
   1a14e:	18c3      	adds	r3, r0, r3
   1a150:	229c      	movs	r2, #156	; 0x9c
   1a152:	18e3      	adds	r3, r4, r3
   1a154:	189b      	adds	r3, r3, r2
   1a156:	1d7a      	adds	r2, r7, #5
   1a158:	7812      	ldrb	r2, [r2, #0]
   1a15a:	701a      	strb	r2, [r3, #0]
}
   1a15c:	46bd      	mov	sp, r7
   1a15e:	b003      	add	sp, #12
   1a160:	bd90      	pop	{r4, r7, pc}
   1a162:	46c0      	nop			; (mov r8, r8)
   1a164:	00039a34 	.word	0x00039a34
   1a168:	0001a91d 	.word	0x0001a91d
   1a16c:	20000df8 	.word	0x20000df8
   1a170:	00039a78 	.word	0x00039a78
   1a174:	0001a529 	.word	0x0001a529

0001a178 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   1a178:	b590      	push	{r4, r7, lr}
   1a17a:	b083      	sub	sp, #12
   1a17c:	af00      	add	r7, sp, #0
   1a17e:	0002      	movs	r2, r0
   1a180:	1dfb      	adds	r3, r7, #7
   1a182:	701a      	strb	r2, [r3, #0]
   1a184:	1dbb      	adds	r3, r7, #6
   1a186:	1c0a      	adds	r2, r1, #0
   1a188:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1a18a:	1dfb      	adds	r3, r7, #7
   1a18c:	781b      	ldrb	r3, [r3, #0]
   1a18e:	2b08      	cmp	r3, #8
   1a190:	d905      	bls.n	1a19e <prvTraceGetObjectState+0x26>
   1a192:	4b1a      	ldr	r3, [pc, #104]	; (1a1fc <prvTraceGetObjectState+0x84>)
   1a194:	0018      	movs	r0, r3
   1a196:	4b1a      	ldr	r3, [pc, #104]	; (1a200 <prvTraceGetObjectState+0x88>)
   1a198:	4798      	blx	r3
   1a19a:	2300      	movs	r3, #0
   1a19c:	e02a      	b.n	1a1f4 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1a19e:	4b19      	ldr	r3, [pc, #100]	; (1a204 <prvTraceGetObjectState+0x8c>)
   1a1a0:	681a      	ldr	r2, [r3, #0]
   1a1a2:	1dfb      	adds	r3, r7, #7
   1a1a4:	781b      	ldrb	r3, [r3, #0]
   1a1a6:	2164      	movs	r1, #100	; 0x64
   1a1a8:	18d3      	adds	r3, r2, r3
   1a1aa:	185b      	adds	r3, r3, r1
   1a1ac:	781b      	ldrb	r3, [r3, #0]
   1a1ae:	1dba      	adds	r2, r7, #6
   1a1b0:	7812      	ldrb	r2, [r2, #0]
   1a1b2:	429a      	cmp	r2, r3
   1a1b4:	d905      	bls.n	1a1c2 <prvTraceGetObjectState+0x4a>
   1a1b6:	4b14      	ldr	r3, [pc, #80]	; (1a208 <prvTraceGetObjectState+0x90>)
   1a1b8:	0018      	movs	r0, r3
   1a1ba:	4b11      	ldr	r3, [pc, #68]	; (1a200 <prvTraceGetObjectState+0x88>)
   1a1bc:	4798      	blx	r3
   1a1be:	2300      	movs	r3, #0
   1a1c0:	e018      	b.n	1a1f4 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   1a1c2:	4b10      	ldr	r3, [pc, #64]	; (1a204 <prvTraceGetObjectState+0x8c>)
   1a1c4:	681c      	ldr	r4, [r3, #0]
   1a1c6:	1dfb      	adds	r3, r7, #7
   1a1c8:	781a      	ldrb	r2, [r3, #0]
   1a1ca:	1dbb      	adds	r3, r7, #6
   1a1cc:	781b      	ldrb	r3, [r3, #0]
   1a1ce:	0011      	movs	r1, r2
   1a1d0:	0018      	movs	r0, r3
   1a1d2:	4b0e      	ldr	r3, [pc, #56]	; (1a20c <prvTraceGetObjectState+0x94>)
   1a1d4:	4798      	blx	r3
   1a1d6:	0003      	movs	r3, r0
   1a1d8:	0018      	movs	r0, r3
   1a1da:	4b0a      	ldr	r3, [pc, #40]	; (1a204 <prvTraceGetObjectState+0x8c>)
   1a1dc:	681a      	ldr	r2, [r3, #0]
   1a1de:	1dfb      	adds	r3, r7, #7
   1a1e0:	781b      	ldrb	r3, [r3, #0]
   1a1e2:	2170      	movs	r1, #112	; 0x70
   1a1e4:	18d3      	adds	r3, r2, r3
   1a1e6:	185b      	adds	r3, r3, r1
   1a1e8:	781b      	ldrb	r3, [r3, #0]
   1a1ea:	18c3      	adds	r3, r0, r3
   1a1ec:	229c      	movs	r2, #156	; 0x9c
   1a1ee:	18e3      	adds	r3, r4, r3
   1a1f0:	189b      	adds	r3, r3, r2
   1a1f2:	781b      	ldrb	r3, [r3, #0]
}
   1a1f4:	0018      	movs	r0, r3
   1a1f6:	46bd      	mov	sp, r7
   1a1f8:	b003      	add	sp, #12
   1a1fa:	bd90      	pop	{r4, r7, pc}
   1a1fc:	00039ab4 	.word	0x00039ab4
   1a200:	0001a91d 	.word	0x0001a91d
   1a204:	20000df8 	.word	0x20000df8
   1a208:	00039af8 	.word	0x00039af8
   1a20c:	0001a529 	.word	0x0001a529

0001a210 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   1a210:	b590      	push	{r4, r7, lr}
   1a212:	b083      	sub	sp, #12
   1a214:	af00      	add	r7, sp, #0
   1a216:	0002      	movs	r2, r0
   1a218:	1dfb      	adds	r3, r7, #7
   1a21a:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   1a21c:	4b11      	ldr	r3, [pc, #68]	; (1a264 <prvTraceSetTaskInstanceFinished+0x54>)
   1a21e:	681b      	ldr	r3, [r3, #0]
   1a220:	2267      	movs	r2, #103	; 0x67
   1a222:	5c9b      	ldrb	r3, [r3, r2]
   1a224:	1dfa      	adds	r2, r7, #7
   1a226:	7812      	ldrb	r2, [r2, #0]
   1a228:	429a      	cmp	r2, r3
   1a22a:	d904      	bls.n	1a236 <prvTraceSetTaskInstanceFinished+0x26>
   1a22c:	4b0e      	ldr	r3, [pc, #56]	; (1a268 <prvTraceSetTaskInstanceFinished+0x58>)
   1a22e:	0018      	movs	r0, r3
   1a230:	4b0e      	ldr	r3, [pc, #56]	; (1a26c <prvTraceSetTaskInstanceFinished+0x5c>)
   1a232:	4798      	blx	r3
   1a234:	e013      	b.n	1a25e <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   1a236:	4b0b      	ldr	r3, [pc, #44]	; (1a264 <prvTraceSetTaskInstanceFinished+0x54>)
   1a238:	681c      	ldr	r4, [r3, #0]
   1a23a:	1dfb      	adds	r3, r7, #7
   1a23c:	781b      	ldrb	r3, [r3, #0]
   1a23e:	2103      	movs	r1, #3
   1a240:	0018      	movs	r0, r3
   1a242:	4b0b      	ldr	r3, [pc, #44]	; (1a270 <prvTraceSetTaskInstanceFinished+0x60>)
   1a244:	4798      	blx	r3
   1a246:	0003      	movs	r3, r0
   1a248:	0019      	movs	r1, r3
   1a24a:	4b06      	ldr	r3, [pc, #24]	; (1a264 <prvTraceSetTaskInstanceFinished+0x54>)
   1a24c:	681b      	ldr	r3, [r3, #0]
   1a24e:	2273      	movs	r2, #115	; 0x73
   1a250:	5c9b      	ldrb	r3, [r3, r2]
   1a252:	18cb      	adds	r3, r1, r3
   1a254:	229c      	movs	r2, #156	; 0x9c
   1a256:	18e3      	adds	r3, r4, r3
   1a258:	189b      	adds	r3, r3, r2
   1a25a:	2200      	movs	r2, #0
   1a25c:	701a      	strb	r2, [r3, #0]
#endif
}
   1a25e:	46bd      	mov	sp, r7
   1a260:	b003      	add	sp, #12
   1a262:	bd90      	pop	{r4, r7, pc}
   1a264:	20000df8 	.word	0x20000df8
   1a268:	00039b34 	.word	0x00039b34
   1a26c:	0001a91d 	.word	0x0001a91d
   1a270:	0001a529 	.word	0x0001a529

0001a274 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   1a274:	b580      	push	{r7, lr}
   1a276:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   1a278:	4b75      	ldr	r3, [pc, #468]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a27a:	681b      	ldr	r3, [r3, #0]
   1a27c:	2b00      	cmp	r3, #0
   1a27e:	d103      	bne.n	1a288 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   1a280:	4b73      	ldr	r3, [pc, #460]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a282:	4a74      	ldr	r2, [pc, #464]	; (1a454 <prvTraceInitTraceData+0x1e0>)
   1a284:	601a      	str	r2, [r3, #0]
   1a286:	e006      	b.n	1a296 <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   1a288:	4b71      	ldr	r3, [pc, #452]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a28a:	681b      	ldr	r3, [r3, #0]
   1a28c:	781b      	ldrb	r3, [r3, #0]
   1a28e:	b2db      	uxtb	r3, r3
   1a290:	2b01      	cmp	r3, #1
   1a292:	d100      	bne.n	1a296 <prvTraceInitTraceData+0x22>
   1a294:	e0d8      	b.n	1a448 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   1a296:	4b70      	ldr	r3, [pc, #448]	; (1a458 <prvTraceInitTraceData+0x1e4>)
   1a298:	681a      	ldr	r2, [r3, #0]
   1a29a:	4b70      	ldr	r3, [pc, #448]	; (1a45c <prvTraceInitTraceData+0x1e8>)
   1a29c:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   1a29e:	4b6c      	ldr	r3, [pc, #432]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a2a0:	6818      	ldr	r0, [r3, #0]
   1a2a2:	23bd      	movs	r3, #189	; 0xbd
   1a2a4:	011b      	lsls	r3, r3, #4
   1a2a6:	001a      	movs	r2, r3
   1a2a8:	2100      	movs	r1, #0
   1a2aa:	4b6d      	ldr	r3, [pc, #436]	; (1a460 <prvTraceInitTraceData+0x1ec>)
   1a2ac:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   1a2ae:	4b68      	ldr	r3, [pc, #416]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a2b0:	681b      	ldr	r3, [r3, #0]
   1a2b2:	4a6c      	ldr	r2, [pc, #432]	; (1a464 <prvTraceInitTraceData+0x1f0>)
   1a2b4:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   1a2b6:	4b66      	ldr	r3, [pc, #408]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a2b8:	681b      	ldr	r3, [r3, #0]
   1a2ba:	2205      	movs	r2, #5
   1a2bc:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   1a2be:	4b64      	ldr	r3, [pc, #400]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a2c0:	681b      	ldr	r3, [r3, #0]
   1a2c2:	2200      	movs	r2, #0
   1a2c4:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   1a2c6:	4b62      	ldr	r3, [pc, #392]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a2c8:	681b      	ldr	r3, [r3, #0]
   1a2ca:	22bd      	movs	r2, #189	; 0xbd
   1a2cc:	0112      	lsls	r2, r2, #4
   1a2ce:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   1a2d0:	4b5f      	ldr	r3, [pc, #380]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a2d2:	681b      	ldr	r3, [r3, #0]
   1a2d4:	2296      	movs	r2, #150	; 0x96
   1a2d6:	0052      	lsls	r2, r2, #1
   1a2d8:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   1a2da:	4b5d      	ldr	r3, [pc, #372]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a2dc:	681b      	ldr	r3, [r3, #0]
   1a2de:	4a62      	ldr	r2, [pc, #392]	; (1a468 <prvTraceInitTraceData+0x1f4>)
   1a2e0:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   1a2e2:	4b5b      	ldr	r3, [pc, #364]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a2e4:	681b      	ldr	r3, [r3, #0]
   1a2e6:	2200      	movs	r2, #0
   1a2e8:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   1a2ea:	4b59      	ldr	r3, [pc, #356]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a2ec:	681b      	ldr	r3, [r3, #0]
   1a2ee:	2200      	movs	r2, #0
   1a2f0:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   1a2f2:	4b5e      	ldr	r3, [pc, #376]	; (1a46c <prvTraceInitTraceData+0x1f8>)
   1a2f4:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   1a2f6:	4b56      	ldr	r3, [pc, #344]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a2f8:	681b      	ldr	r3, [r3, #0]
   1a2fa:	4a5d      	ldr	r2, [pc, #372]	; (1a470 <prvTraceInitTraceData+0x1fc>)
   1a2fc:	495d      	ldr	r1, [pc, #372]	; (1a474 <prvTraceInitTraceData+0x200>)
   1a2fe:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   1a300:	4b53      	ldr	r3, [pc, #332]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a302:	681a      	ldr	r2, [r3, #0]
   1a304:	23ac      	movs	r3, #172	; 0xac
   1a306:	00db      	lsls	r3, r3, #3
   1a308:	21c8      	movs	r1, #200	; 0xc8
   1a30a:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   1a30c:	4b50      	ldr	r3, [pc, #320]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a30e:	681b      	ldr	r3, [r3, #0]
   1a310:	4a59      	ldr	r2, [pc, #356]	; (1a478 <prvTraceInitTraceData+0x204>)
   1a312:	2101      	movs	r1, #1
   1a314:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   1a316:	4b4e      	ldr	r3, [pc, #312]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a318:	681a      	ldr	r2, [r3, #0]
   1a31a:	23d7      	movs	r3, #215	; 0xd7
   1a31c:	00db      	lsls	r3, r3, #3
   1a31e:	4957      	ldr	r1, [pc, #348]	; (1a47c <prvTraceInitTraceData+0x208>)
   1a320:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   1a322:	4b4b      	ldr	r3, [pc, #300]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a324:	681b      	ldr	r3, [r3, #0]
   1a326:	4a56      	ldr	r2, [pc, #344]	; (1a480 <prvTraceInitTraceData+0x20c>)
   1a328:	4694      	mov	ip, r2
   1a32a:	4463      	add	r3, ip
   1a32c:	4955      	ldr	r1, [pc, #340]	; (1a484 <prvTraceInitTraceData+0x210>)
   1a32e:	2250      	movs	r2, #80	; 0x50
   1a330:	0018      	movs	r0, r3
   1a332:	4b55      	ldr	r3, [pc, #340]	; (1a488 <prvTraceInitTraceData+0x214>)
   1a334:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   1a336:	4b46      	ldr	r3, [pc, #280]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a338:	681b      	ldr	r3, [r3, #0]
   1a33a:	4a54      	ldr	r2, [pc, #336]	; (1a48c <prvTraceInitTraceData+0x218>)
   1a33c:	4954      	ldr	r1, [pc, #336]	; (1a490 <prvTraceInitTraceData+0x21c>)
   1a33e:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   1a340:	4b43      	ldr	r3, [pc, #268]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a342:	681b      	ldr	r3, [r3, #0]
   1a344:	4a53      	ldr	r2, [pc, #332]	; (1a494 <prvTraceInitTraceData+0x220>)
   1a346:	210a      	movs	r1, #10
   1a348:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   1a34a:	4b41      	ldr	r3, [pc, #260]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a34c:	681b      	ldr	r3, [r3, #0]
   1a34e:	4a52      	ldr	r2, [pc, #328]	; (1a498 <prvTraceInitTraceData+0x224>)
   1a350:	210b      	movs	r1, #11
   1a352:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   1a354:	4b3e      	ldr	r3, [pc, #248]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a356:	681b      	ldr	r3, [r3, #0]
   1a358:	4a50      	ldr	r2, [pc, #320]	; (1a49c <prvTraceInitTraceData+0x228>)
   1a35a:	210c      	movs	r1, #12
   1a35c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   1a35e:	4b3c      	ldr	r3, [pc, #240]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a360:	681b      	ldr	r3, [r3, #0]
   1a362:	4a4f      	ldr	r2, [pc, #316]	; (1a4a0 <prvTraceInitTraceData+0x22c>)
   1a364:	210d      	movs	r1, #13
   1a366:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   1a368:	4b39      	ldr	r3, [pc, #228]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a36a:	681b      	ldr	r3, [r3, #0]
   1a36c:	4a4d      	ldr	r2, [pc, #308]	; (1a4a4 <prvTraceInitTraceData+0x230>)
   1a36e:	2171      	movs	r1, #113	; 0x71
   1a370:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   1a372:	4b37      	ldr	r3, [pc, #220]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a374:	681b      	ldr	r3, [r3, #0]
   1a376:	4a4c      	ldr	r2, [pc, #304]	; (1a4a8 <prvTraceInitTraceData+0x234>)
   1a378:	2172      	movs	r1, #114	; 0x72
   1a37a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   1a37c:	4b34      	ldr	r3, [pc, #208]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a37e:	681b      	ldr	r3, [r3, #0]
   1a380:	4a4a      	ldr	r2, [pc, #296]	; (1a4ac <prvTraceInitTraceData+0x238>)
   1a382:	2173      	movs	r1, #115	; 0x73
   1a384:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   1a386:	4b32      	ldr	r3, [pc, #200]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a388:	681b      	ldr	r3, [r3, #0]
   1a38a:	4a49      	ldr	r2, [pc, #292]	; (1a4b0 <prvTraceInitTraceData+0x23c>)
   1a38c:	2174      	movs	r1, #116	; 0x74
   1a38e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   1a390:	4b2f      	ldr	r3, [pc, #188]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a392:	681b      	ldr	r3, [r3, #0]
   1a394:	4a47      	ldr	r2, [pc, #284]	; (1a4b4 <prvTraceInitTraceData+0x240>)
   1a396:	21f1      	movs	r1, #241	; 0xf1
   1a398:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   1a39a:	4b2d      	ldr	r3, [pc, #180]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a39c:	681b      	ldr	r3, [r3, #0]
   1a39e:	4a46      	ldr	r2, [pc, #280]	; (1a4b8 <prvTraceInitTraceData+0x244>)
   1a3a0:	21f2      	movs	r1, #242	; 0xf2
   1a3a2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   1a3a4:	4b2a      	ldr	r3, [pc, #168]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a3a6:	681b      	ldr	r3, [r3, #0]
   1a3a8:	4a44      	ldr	r2, [pc, #272]	; (1a4bc <prvTraceInitTraceData+0x248>)
   1a3aa:	21f3      	movs	r1, #243	; 0xf3
   1a3ac:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   1a3ae:	4b28      	ldr	r3, [pc, #160]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a3b0:	681b      	ldr	r3, [r3, #0]
   1a3b2:	4a43      	ldr	r2, [pc, #268]	; (1a4c0 <prvTraceInitTraceData+0x24c>)
   1a3b4:	21f4      	movs	r1, #244	; 0xf4
   1a3b6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   1a3b8:	4b42      	ldr	r3, [pc, #264]	; (1a4c4 <prvTraceInitTraceData+0x250>)
   1a3ba:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   1a3bc:	4b24      	ldr	r3, [pc, #144]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a3be:	681b      	ldr	r3, [r3, #0]
   1a3c0:	22f4      	movs	r2, #244	; 0xf4
   1a3c2:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   1a3c4:	4b22      	ldr	r3, [pc, #136]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a3c6:	681b      	ldr	r3, [r3, #0]
   1a3c8:	22f3      	movs	r2, #243	; 0xf3
   1a3ca:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   1a3cc:	4b20      	ldr	r3, [pc, #128]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a3ce:	681b      	ldr	r3, [r3, #0]
   1a3d0:	22f2      	movs	r2, #242	; 0xf2
   1a3d2:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   1a3d4:	4b1e      	ldr	r3, [pc, #120]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a3d6:	681b      	ldr	r3, [r3, #0]
   1a3d8:	22f1      	movs	r2, #241	; 0xf1
   1a3da:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   1a3dc:	4b1c      	ldr	r3, [pc, #112]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a3de:	681b      	ldr	r3, [r3, #0]
   1a3e0:	2274      	movs	r2, #116	; 0x74
   1a3e2:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   1a3e4:	4b1a      	ldr	r3, [pc, #104]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a3e6:	681b      	ldr	r3, [r3, #0]
   1a3e8:	2273      	movs	r2, #115	; 0x73
   1a3ea:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   1a3ec:	4b18      	ldr	r3, [pc, #96]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a3ee:	681b      	ldr	r3, [r3, #0]
   1a3f0:	2272      	movs	r2, #114	; 0x72
   1a3f2:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   1a3f4:	4b16      	ldr	r3, [pc, #88]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a3f6:	681b      	ldr	r3, [r3, #0]
   1a3f8:	2271      	movs	r2, #113	; 0x71
   1a3fa:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   1a3fc:	4b14      	ldr	r3, [pc, #80]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a3fe:	681b      	ldr	r3, [r3, #0]
   1a400:	2204      	movs	r2, #4
   1a402:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   1a404:	4b12      	ldr	r3, [pc, #72]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a406:	681b      	ldr	r3, [r3, #0]
   1a408:	2203      	movs	r2, #3
   1a40a:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   1a40c:	4b10      	ldr	r3, [pc, #64]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a40e:	681b      	ldr	r3, [r3, #0]
   1a410:	2202      	movs	r2, #2
   1a412:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   1a414:	4b0e      	ldr	r3, [pc, #56]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a416:	681b      	ldr	r3, [r3, #0]
   1a418:	2201      	movs	r2, #1
   1a41a:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   1a41c:	4b2a      	ldr	r3, [pc, #168]	; (1a4c8 <prvTraceInitTraceData+0x254>)
   1a41e:	681b      	ldr	r3, [r3, #0]
   1a420:	2b00      	cmp	r3, #0
   1a422:	d012      	beq.n	1a44a <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1a424:	4b0a      	ldr	r3, [pc, #40]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a426:	681b      	ldr	r3, [r3, #0]
   1a428:	4a15      	ldr	r2, [pc, #84]	; (1a480 <prvTraceInitTraceData+0x20c>)
   1a42a:	1898      	adds	r0, r3, r2
   1a42c:	4b26      	ldr	r3, [pc, #152]	; (1a4c8 <prvTraceInitTraceData+0x254>)
   1a42e:	681b      	ldr	r3, [r3, #0]
   1a430:	2250      	movs	r2, #80	; 0x50
   1a432:	0019      	movs	r1, r3
   1a434:	4b14      	ldr	r3, [pc, #80]	; (1a488 <prvTraceInitTraceData+0x214>)
   1a436:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   1a438:	4b05      	ldr	r3, [pc, #20]	; (1a450 <prvTraceInitTraceData+0x1dc>)
   1a43a:	681b      	ldr	r3, [r3, #0]
   1a43c:	4a23      	ldr	r2, [pc, #140]	; (1a4cc <prvTraceInitTraceData+0x258>)
   1a43e:	2101      	movs	r1, #1
   1a440:	5099      	str	r1, [r3, r2]
		vTraceStop();
   1a442:	4b23      	ldr	r3, [pc, #140]	; (1a4d0 <prvTraceInitTraceData+0x25c>)
   1a444:	4798      	blx	r3
   1a446:	e000      	b.n	1a44a <prvTraceInitTraceData+0x1d6>
			return;
   1a448:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   1a44a:	46bd      	mov	sp, r7
   1a44c:	bd80      	pop	{r7, pc}
   1a44e:	46c0      	nop			; (mov r8, r8)
   1a450:	20000df8 	.word	0x20000df8
   1a454:	20004a90 	.word	0x20004a90
   1a458:	e000e018 	.word	0xe000e018
   1a45c:	20005660 	.word	0x20005660
   1a460:	0003643f 	.word	0x0003643f
   1a464:	00001aa1 	.word	0x00001aa1
   1a468:	f0f0f0f0 	.word	0xf0f0f0f0
   1a46c:	000193d9 	.word	0x000193d9
   1a470:	0000055c 	.word	0x0000055c
   1a474:	f1f1f1f1 	.word	0xf1f1f1f1
   1a478:	00000564 	.word	0x00000564
   1a47c:	f2f2f2f2 	.word	0xf2f2f2f2
   1a480:	000006bc 	.word	0x000006bc
   1a484:	00039b7c 	.word	0x00039b7c
   1a488:	0001a7e9 	.word	0x0001a7e9
   1a48c:	0000070c 	.word	0x0000070c
   1a490:	f3f3f3f3 	.word	0xf3f3f3f3
   1a494:	00000bc4 	.word	0x00000bc4
   1a498:	00000bc5 	.word	0x00000bc5
   1a49c:	00000bc6 	.word	0x00000bc6
   1a4a0:	00000bc7 	.word	0x00000bc7
   1a4a4:	00000bc8 	.word	0x00000bc8
   1a4a8:	00000bc9 	.word	0x00000bc9
   1a4ac:	00000bca 	.word	0x00000bca
   1a4b0:	00000bcb 	.word	0x00000bcb
   1a4b4:	00000bcc 	.word	0x00000bcc
   1a4b8:	00000bcd 	.word	0x00000bcd
   1a4bc:	00000bce 	.word	0x00000bce
   1a4c0:	00000bcf 	.word	0x00000bcf
   1a4c4:	00019579 	.word	0x00019579
   1a4c8:	20000d58 	.word	0x20000d58
   1a4cc:	000006b4 	.word	0x000006b4
   1a4d0:	000197e1 	.word	0x000197e1

0001a4d4 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   1a4d4:	b580      	push	{r7, lr}
   1a4d6:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   1a4d8:	4b10      	ldr	r3, [pc, #64]	; (1a51c <prvTraceNextFreeEventBufferSlot+0x48>)
   1a4da:	681b      	ldr	r3, [r3, #0]
   1a4dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a4de:	2b00      	cmp	r3, #0
   1a4e0:	d101      	bne.n	1a4e6 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   1a4e2:	2300      	movs	r3, #0
   1a4e4:	e017      	b.n	1a516 <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1a4e6:	4b0d      	ldr	r3, [pc, #52]	; (1a51c <prvTraceNextFreeEventBufferSlot+0x48>)
   1a4e8:	681b      	ldr	r3, [r3, #0]
   1a4ea:	69da      	ldr	r2, [r3, #28]
   1a4ec:	232c      	movs	r3, #44	; 0x2c
   1a4ee:	33ff      	adds	r3, #255	; 0xff
   1a4f0:	429a      	cmp	r2, r3
   1a4f2:	d905      	bls.n	1a500 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   1a4f4:	4b0a      	ldr	r3, [pc, #40]	; (1a520 <prvTraceNextFreeEventBufferSlot+0x4c>)
   1a4f6:	0018      	movs	r0, r3
   1a4f8:	4b0a      	ldr	r3, [pc, #40]	; (1a524 <prvTraceNextFreeEventBufferSlot+0x50>)
   1a4fa:	4798      	blx	r3
		return NULL;
   1a4fc:	2300      	movs	r3, #0
   1a4fe:	e00a      	b.n	1a516 <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   1a500:	4b06      	ldr	r3, [pc, #24]	; (1a51c <prvTraceNextFreeEventBufferSlot+0x48>)
   1a502:	681a      	ldr	r2, [r3, #0]
   1a504:	4b05      	ldr	r3, [pc, #20]	; (1a51c <prvTraceNextFreeEventBufferSlot+0x48>)
   1a506:	681b      	ldr	r3, [r3, #0]
   1a508:	69db      	ldr	r3, [r3, #28]
   1a50a:	009b      	lsls	r3, r3, #2
   1a50c:	21e2      	movs	r1, #226	; 0xe2
   1a50e:	00c9      	lsls	r1, r1, #3
   1a510:	468c      	mov	ip, r1
   1a512:	4463      	add	r3, ip
   1a514:	18d3      	adds	r3, r2, r3
}
   1a516:	0018      	movs	r0, r3
   1a518:	46bd      	mov	sp, r7
   1a51a:	bd80      	pop	{r7, pc}
   1a51c:	20000df8 	.word	0x20000df8
   1a520:	00039b90 	.word	0x00039b90
   1a524:	0001a91d 	.word	0x0001a91d

0001a528 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   1a528:	b580      	push	{r7, lr}
   1a52a:	b082      	sub	sp, #8
   1a52c:	af00      	add	r7, sp, #0
   1a52e:	0002      	movs	r2, r0
   1a530:	1dfb      	adds	r3, r7, #7
   1a532:	701a      	strb	r2, [r3, #0]
   1a534:	1dbb      	adds	r3, r7, #6
   1a536:	1c0a      	adds	r2, r1, #0
   1a538:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1a53a:	1dbb      	adds	r3, r7, #6
   1a53c:	781b      	ldrb	r3, [r3, #0]
   1a53e:	2b08      	cmp	r3, #8
   1a540:	d905      	bls.n	1a54e <uiIndexOfObject+0x26>
   1a542:	4b2a      	ldr	r3, [pc, #168]	; (1a5ec <uiIndexOfObject+0xc4>)
   1a544:	0018      	movs	r0, r3
   1a546:	4b2a      	ldr	r3, [pc, #168]	; (1a5f0 <uiIndexOfObject+0xc8>)
   1a548:	4798      	blx	r3
   1a54a:	2300      	movs	r3, #0
   1a54c:	e049      	b.n	1a5e2 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   1a54e:	1dfb      	adds	r3, r7, #7
   1a550:	781b      	ldrb	r3, [r3, #0]
   1a552:	2b00      	cmp	r3, #0
   1a554:	d00b      	beq.n	1a56e <uiIndexOfObject+0x46>
   1a556:	4b27      	ldr	r3, [pc, #156]	; (1a5f4 <uiIndexOfObject+0xcc>)
   1a558:	681a      	ldr	r2, [r3, #0]
   1a55a:	1dbb      	adds	r3, r7, #6
   1a55c:	781b      	ldrb	r3, [r3, #0]
   1a55e:	2164      	movs	r1, #100	; 0x64
   1a560:	18d3      	adds	r3, r2, r3
   1a562:	185b      	adds	r3, r3, r1
   1a564:	781b      	ldrb	r3, [r3, #0]
   1a566:	1dfa      	adds	r2, r7, #7
   1a568:	7812      	ldrb	r2, [r2, #0]
   1a56a:	429a      	cmp	r2, r3
   1a56c:	d905      	bls.n	1a57a <uiIndexOfObject+0x52>
   1a56e:	4b22      	ldr	r3, [pc, #136]	; (1a5f8 <uiIndexOfObject+0xd0>)
   1a570:	0018      	movs	r0, r3
   1a572:	4b1f      	ldr	r3, [pc, #124]	; (1a5f0 <uiIndexOfObject+0xc8>)
   1a574:	4798      	blx	r3
   1a576:	2300      	movs	r3, #0
   1a578:	e033      	b.n	1a5e2 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1a57a:	1dbb      	adds	r3, r7, #6
   1a57c:	781b      	ldrb	r3, [r3, #0]
   1a57e:	2b08      	cmp	r3, #8
   1a580:	d82a      	bhi.n	1a5d8 <uiIndexOfObject+0xb0>
   1a582:	1dfb      	adds	r3, r7, #7
   1a584:	781b      	ldrb	r3, [r3, #0]
   1a586:	2b00      	cmp	r3, #0
   1a588:	d026      	beq.n	1a5d8 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   1a58a:	4b1a      	ldr	r3, [pc, #104]	; (1a5f4 <uiIndexOfObject+0xcc>)
   1a58c:	681a      	ldr	r2, [r3, #0]
   1a58e:	1dbb      	adds	r3, r7, #6
   1a590:	781b      	ldrb	r3, [r3, #0]
   1a592:	2164      	movs	r1, #100	; 0x64
   1a594:	18d3      	adds	r3, r2, r3
   1a596:	185b      	adds	r3, r3, r1
   1a598:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1a59a:	1dfa      	adds	r2, r7, #7
   1a59c:	7812      	ldrb	r2, [r2, #0]
   1a59e:	429a      	cmp	r2, r3
   1a5a0:	d81a      	bhi.n	1a5d8 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1a5a2:	4b14      	ldr	r3, [pc, #80]	; (1a5f4 <uiIndexOfObject+0xcc>)
   1a5a4:	681a      	ldr	r2, [r3, #0]
   1a5a6:	1dbb      	adds	r3, r7, #6
   1a5a8:	781b      	ldrb	r3, [r3, #0]
   1a5aa:	3340      	adds	r3, #64	; 0x40
   1a5ac:	005b      	lsls	r3, r3, #1
   1a5ae:	18d3      	adds	r3, r2, r3
   1a5b0:	3308      	adds	r3, #8
   1a5b2:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1a5b4:	4b0f      	ldr	r3, [pc, #60]	; (1a5f4 <uiIndexOfObject+0xcc>)
   1a5b6:	6819      	ldr	r1, [r3, #0]
   1a5b8:	1dbb      	adds	r3, r7, #6
   1a5ba:	781b      	ldrb	r3, [r3, #0]
   1a5bc:	207c      	movs	r0, #124	; 0x7c
   1a5be:	18cb      	adds	r3, r1, r3
   1a5c0:	181b      	adds	r3, r3, r0
   1a5c2:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1a5c4:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1a5c6:	1df9      	adds	r1, r7, #7
   1a5c8:	7809      	ldrb	r1, [r1, #0]
   1a5ca:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1a5cc:	b289      	uxth	r1, r1
   1a5ce:	434b      	muls	r3, r1
   1a5d0:	b29b      	uxth	r3, r3
   1a5d2:	18d3      	adds	r3, r2, r3
   1a5d4:	b29b      	uxth	r3, r3
   1a5d6:	e004      	b.n	1a5e2 <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   1a5d8:	4b08      	ldr	r3, [pc, #32]	; (1a5fc <uiIndexOfObject+0xd4>)
   1a5da:	0018      	movs	r0, r3
   1a5dc:	4b04      	ldr	r3, [pc, #16]	; (1a5f0 <uiIndexOfObject+0xc8>)
   1a5de:	4798      	blx	r3
	return 0;
   1a5e0:	2300      	movs	r3, #0
}
   1a5e2:	0018      	movs	r0, r3
   1a5e4:	46bd      	mov	sp, r7
   1a5e6:	b002      	add	sp, #8
   1a5e8:	bd80      	pop	{r7, pc}
   1a5ea:	46c0      	nop			; (mov r8, r8)
   1a5ec:	00039bb8 	.word	0x00039bb8
   1a5f0:	0001a91d 	.word	0x0001a91d
   1a5f4:	20000df8 	.word	0x20000df8
   1a5f8:	00039bf8 	.word	0x00039bf8
   1a5fc:	00039c38 	.word	0x00039c38

0001a600 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   1a600:	b580      	push	{r7, lr}
   1a602:	b088      	sub	sp, #32
   1a604:	af00      	add	r7, sp, #0
   1a606:	0002      	movs	r2, r0
   1a608:	1dfb      	adds	r3, r7, #7
   1a60a:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   1a60c:	4b5a      	ldr	r3, [pc, #360]	; (1a778 <prvTraceGetObjectHandle+0x178>)
   1a60e:	681b      	ldr	r3, [r3, #0]
   1a610:	2b00      	cmp	r3, #0
   1a612:	d105      	bne.n	1a620 <prvTraceGetObjectHandle+0x20>
   1a614:	4b59      	ldr	r3, [pc, #356]	; (1a77c <prvTraceGetObjectHandle+0x17c>)
   1a616:	0018      	movs	r0, r3
   1a618:	4b59      	ldr	r3, [pc, #356]	; (1a780 <prvTraceGetObjectHandle+0x180>)
   1a61a:	4798      	blx	r3
   1a61c:	2300      	movs	r3, #0
   1a61e:	e0a7      	b.n	1a770 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1a620:	1dfb      	adds	r3, r7, #7
   1a622:	781b      	ldrb	r3, [r3, #0]
   1a624:	2b08      	cmp	r3, #8
   1a626:	d905      	bls.n	1a634 <prvTraceGetObjectHandle+0x34>
   1a628:	4b56      	ldr	r3, [pc, #344]	; (1a784 <prvTraceGetObjectHandle+0x184>)
   1a62a:	0018      	movs	r0, r3
   1a62c:	4b54      	ldr	r3, [pc, #336]	; (1a780 <prvTraceGetObjectHandle+0x180>)
   1a62e:	4798      	blx	r3
   1a630:	2300      	movs	r3, #0
   1a632:	e09d      	b.n	1a770 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1a634:	f3ef 8310 	mrs	r3, PRIMASK
   1a638:	60fb      	str	r3, [r7, #12]
  return(result);
   1a63a:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   1a63c:	61bb      	str	r3, [r7, #24]
   1a63e:	2301      	movs	r3, #1
   1a640:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1a642:	693b      	ldr	r3, [r7, #16]
   1a644:	f383 8810 	msr	PRIMASK, r3
   1a648:	4b4f      	ldr	r3, [pc, #316]	; (1a788 <prvTraceGetObjectHandle+0x188>)
   1a64a:	681b      	ldr	r3, [r3, #0]
   1a64c:	1c5a      	adds	r2, r3, #1
   1a64e:	4b4e      	ldr	r3, [pc, #312]	; (1a788 <prvTraceGetObjectHandle+0x188>)
   1a650:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   1a652:	1dfb      	adds	r3, r7, #7
   1a654:	781a      	ldrb	r2, [r3, #0]
   1a656:	4b4d      	ldr	r3, [pc, #308]	; (1a78c <prvTraceGetObjectHandle+0x18c>)
   1a658:	0052      	lsls	r2, r2, #1
   1a65a:	5ad3      	ldrh	r3, [r2, r3]
   1a65c:	001a      	movs	r2, r3
   1a65e:	4b4c      	ldr	r3, [pc, #304]	; (1a790 <prvTraceGetObjectHandle+0x190>)
   1a660:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   1a662:	4b4b      	ldr	r3, [pc, #300]	; (1a790 <prvTraceGetObjectHandle+0x190>)
   1a664:	681b      	ldr	r3, [r3, #0]
   1a666:	4a49      	ldr	r2, [pc, #292]	; (1a78c <prvTraceGetObjectHandle+0x18c>)
   1a668:	2148      	movs	r1, #72	; 0x48
   1a66a:	18d3      	adds	r3, r2, r3
   1a66c:	185b      	adds	r3, r3, r1
   1a66e:	781b      	ldrb	r3, [r3, #0]
   1a670:	2b00      	cmp	r3, #0
   1a672:	d117      	bne.n	1a6a4 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   1a674:	4b46      	ldr	r3, [pc, #280]	; (1a790 <prvTraceGetObjectHandle+0x190>)
   1a676:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1a678:	4b45      	ldr	r3, [pc, #276]	; (1a790 <prvTraceGetObjectHandle+0x190>)
   1a67a:	681b      	ldr	r3, [r3, #0]
   1a67c:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   1a67e:	1dfb      	adds	r3, r7, #7
   1a680:	781b      	ldrb	r3, [r3, #0]
   1a682:	4842      	ldr	r0, [pc, #264]	; (1a78c <prvTraceGetObjectHandle+0x18c>)
   1a684:	3308      	adds	r3, #8
   1a686:	005b      	lsls	r3, r3, #1
   1a688:	18c3      	adds	r3, r0, r3
   1a68a:	3302      	adds	r3, #2
   1a68c:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1a68e:	b2db      	uxtb	r3, r3
   1a690:	1acb      	subs	r3, r1, r3
   1a692:	b2db      	uxtb	r3, r3
   1a694:	3301      	adds	r3, #1
   1a696:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   1a698:	4b3c      	ldr	r3, [pc, #240]	; (1a78c <prvTraceGetObjectHandle+0x18c>)
   1a69a:	2148      	movs	r1, #72	; 0x48
   1a69c:	189b      	adds	r3, r3, r2
   1a69e:	185b      	adds	r3, r3, r1
   1a6a0:	1c02      	adds	r2, r0, #0
   1a6a2:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   1a6a4:	4b3a      	ldr	r3, [pc, #232]	; (1a790 <prvTraceGetObjectHandle+0x190>)
   1a6a6:	681a      	ldr	r2, [r3, #0]
   1a6a8:	231f      	movs	r3, #31
   1a6aa:	18fb      	adds	r3, r7, r3
   1a6ac:	4937      	ldr	r1, [pc, #220]	; (1a78c <prvTraceGetObjectHandle+0x18c>)
   1a6ae:	2048      	movs	r0, #72	; 0x48
   1a6b0:	188a      	adds	r2, r1, r2
   1a6b2:	1812      	adds	r2, r2, r0
   1a6b4:	7812      	ldrb	r2, [r2, #0]
   1a6b6:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1a6b8:	1dfb      	adds	r3, r7, #7
   1a6ba:	781a      	ldrb	r2, [r3, #0]
   1a6bc:	4b33      	ldr	r3, [pc, #204]	; (1a78c <prvTraceGetObjectHandle+0x18c>)
   1a6be:	0052      	lsls	r2, r2, #1
   1a6c0:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   1a6c2:	1dfb      	adds	r3, r7, #7
   1a6c4:	781b      	ldrb	r3, [r3, #0]
   1a6c6:	4931      	ldr	r1, [pc, #196]	; (1a78c <prvTraceGetObjectHandle+0x18c>)
   1a6c8:	3310      	adds	r3, #16
   1a6ca:	005b      	lsls	r3, r3, #1
   1a6cc:	18cb      	adds	r3, r1, r3
   1a6ce:	3304      	adds	r3, #4
   1a6d0:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1a6d2:	429a      	cmp	r2, r3
   1a6d4:	d90d      	bls.n	1a6f2 <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1a6d6:	1dfb      	adds	r3, r7, #7
   1a6d8:	781b      	ldrb	r3, [r3, #0]
   1a6da:	0018      	movs	r0, r3
   1a6dc:	4b2d      	ldr	r3, [pc, #180]	; (1a794 <prvTraceGetObjectHandle+0x194>)
   1a6de:	4798      	blx	r3
   1a6e0:	0003      	movs	r3, r0
   1a6e2:	0018      	movs	r0, r3
   1a6e4:	4b26      	ldr	r3, [pc, #152]	; (1a780 <prvTraceGetObjectHandle+0x180>)
   1a6e6:	4798      	blx	r3
		handle = 0;
   1a6e8:	231f      	movs	r3, #31
   1a6ea:	18fb      	adds	r3, r7, r3
   1a6ec:	2200      	movs	r2, #0
   1a6ee:	701a      	strb	r2, [r3, #0]
   1a6f0:	e031      	b.n	1a756 <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   1a6f2:	1dfb      	adds	r3, r7, #7
   1a6f4:	781b      	ldrb	r3, [r3, #0]
   1a6f6:	4a25      	ldr	r2, [pc, #148]	; (1a78c <prvTraceGetObjectHandle+0x18c>)
   1a6f8:	0059      	lsls	r1, r3, #1
   1a6fa:	5a8a      	ldrh	r2, [r1, r2]
   1a6fc:	3201      	adds	r2, #1
   1a6fe:	b291      	uxth	r1, r2
   1a700:	4a22      	ldr	r2, [pc, #136]	; (1a78c <prvTraceGetObjectHandle+0x18c>)
   1a702:	005b      	lsls	r3, r3, #1
   1a704:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1a706:	1dfb      	adds	r3, r7, #7
   1a708:	781a      	ldrb	r2, [r3, #0]
   1a70a:	4b20      	ldr	r3, [pc, #128]	; (1a78c <prvTraceGetObjectHandle+0x18c>)
   1a70c:	0052      	lsls	r2, r2, #1
   1a70e:	5ad3      	ldrh	r3, [r2, r3]
   1a710:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   1a712:	1dfb      	adds	r3, r7, #7
   1a714:	781b      	ldrb	r3, [r3, #0]
   1a716:	4a1d      	ldr	r2, [pc, #116]	; (1a78c <prvTraceGetObjectHandle+0x18c>)
   1a718:	3308      	adds	r3, #8
   1a71a:	005b      	lsls	r3, r3, #1
   1a71c:	18d3      	adds	r3, r2, r3
   1a71e:	3302      	adds	r3, #2
   1a720:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1a722:	1acb      	subs	r3, r1, r3
   1a724:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   1a726:	1dfb      	adds	r3, r7, #7
   1a728:	781b      	ldrb	r3, [r3, #0]
   1a72a:	4a18      	ldr	r2, [pc, #96]	; (1a78c <prvTraceGetObjectHandle+0x18c>)
   1a72c:	3318      	adds	r3, #24
   1a72e:	005b      	lsls	r3, r3, #1
   1a730:	18d3      	adds	r3, r2, r3
   1a732:	3306      	adds	r3, #6
   1a734:	881b      	ldrh	r3, [r3, #0]
   1a736:	001a      	movs	r2, r3
		if (hndCount >
   1a738:	697b      	ldr	r3, [r7, #20]
   1a73a:	429a      	cmp	r2, r3
   1a73c:	da0b      	bge.n	1a756 <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1a73e:	1dfb      	adds	r3, r7, #7
   1a740:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   1a742:	697a      	ldr	r2, [r7, #20]
   1a744:	b2d2      	uxtb	r2, r2
   1a746:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1a748:	4a10      	ldr	r2, [pc, #64]	; (1a78c <prvTraceGetObjectHandle+0x18c>)
   1a74a:	3318      	adds	r3, #24
   1a74c:	005b      	lsls	r3, r3, #1
   1a74e:	18d3      	adds	r3, r2, r3
   1a750:	3306      	adds	r3, #6
   1a752:	1c0a      	adds	r2, r1, #0
   1a754:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   1a756:	4b0c      	ldr	r3, [pc, #48]	; (1a788 <prvTraceGetObjectHandle+0x188>)
   1a758:	681b      	ldr	r3, [r3, #0]
   1a75a:	1e5a      	subs	r2, r3, #1
   1a75c:	4b0a      	ldr	r3, [pc, #40]	; (1a788 <prvTraceGetObjectHandle+0x188>)
   1a75e:	601a      	str	r2, [r3, #0]
   1a760:	69bb      	ldr	r3, [r7, #24]
   1a762:	60bb      	str	r3, [r7, #8]
   1a764:	68bb      	ldr	r3, [r7, #8]
   1a766:	f383 8810 	msr	PRIMASK, r3

	return handle;
   1a76a:	231f      	movs	r3, #31
   1a76c:	18fb      	adds	r3, r7, r3
   1a76e:	781b      	ldrb	r3, [r3, #0]
}
   1a770:	0018      	movs	r0, r3
   1a772:	46bd      	mov	sp, r7
   1a774:	b008      	add	sp, #32
   1a776:	bd80      	pop	{r7, pc}
   1a778:	20000df8 	.word	0x20000df8
   1a77c:	00039098 	.word	0x00039098
   1a780:	0001a91d 	.word	0x0001a91d
   1a784:	00039c78 	.word	0x00039c78
   1a788:	20000d50 	.word	0x20000d50
   1a78c:	20000d68 	.word	0x20000d68
   1a790:	20000dfc 	.word	0x20000dfc
   1a794:	0001963d 	.word	0x0001963d

0001a798 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   1a798:	b590      	push	{r4, r7, lr}
   1a79a:	b085      	sub	sp, #20
   1a79c:	af00      	add	r7, sp, #0
   1a79e:	0002      	movs	r2, r0
   1a7a0:	1dfb      	adds	r3, r7, #7
   1a7a2:	701a      	strb	r2, [r3, #0]
   1a7a4:	1dbb      	adds	r3, r7, #6
   1a7a6:	1c0a      	adds	r2, r1, #0
   1a7a8:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   1a7aa:	230e      	movs	r3, #14
   1a7ac:	18fc      	adds	r4, r7, r3
   1a7ae:	1dfb      	adds	r3, r7, #7
   1a7b0:	781a      	ldrb	r2, [r3, #0]
   1a7b2:	1dbb      	adds	r3, r7, #6
   1a7b4:	781b      	ldrb	r3, [r3, #0]
   1a7b6:	0011      	movs	r1, r2
   1a7b8:	0018      	movs	r0, r3
   1a7ba:	4b09      	ldr	r3, [pc, #36]	; (1a7e0 <prvMarkObjectAsUsed+0x48>)
   1a7bc:	4798      	blx	r3
   1a7be:	0003      	movs	r3, r0
   1a7c0:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   1a7c2:	4b08      	ldr	r3, [pc, #32]	; (1a7e4 <prvMarkObjectAsUsed+0x4c>)
   1a7c4:	681a      	ldr	r2, [r3, #0]
   1a7c6:	230e      	movs	r3, #14
   1a7c8:	18fb      	adds	r3, r7, r3
   1a7ca:	881b      	ldrh	r3, [r3, #0]
   1a7cc:	219c      	movs	r1, #156	; 0x9c
   1a7ce:	18d3      	adds	r3, r2, r3
   1a7d0:	185b      	adds	r3, r3, r1
   1a7d2:	2201      	movs	r2, #1
   1a7d4:	701a      	strb	r2, [r3, #0]
}
   1a7d6:	46c0      	nop			; (mov r8, r8)
   1a7d8:	46bd      	mov	sp, r7
   1a7da:	b005      	add	sp, #20
   1a7dc:	bd90      	pop	{r4, r7, pc}
   1a7de:	46c0      	nop			; (mov r8, r8)
   1a7e0:	0001a529 	.word	0x0001a529
   1a7e4:	20000df8 	.word	0x20000df8

0001a7e8 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   1a7e8:	b580      	push	{r7, lr}
   1a7ea:	b086      	sub	sp, #24
   1a7ec:	af00      	add	r7, sp, #0
   1a7ee:	60f8      	str	r0, [r7, #12]
   1a7f0:	60b9      	str	r1, [r7, #8]
   1a7f2:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   1a7f4:	2300      	movs	r3, #0
   1a7f6:	617b      	str	r3, [r7, #20]
   1a7f8:	e010      	b.n	1a81c <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   1a7fa:	68fa      	ldr	r2, [r7, #12]
   1a7fc:	697b      	ldr	r3, [r7, #20]
   1a7fe:	18d3      	adds	r3, r2, r3
   1a800:	68b9      	ldr	r1, [r7, #8]
   1a802:	697a      	ldr	r2, [r7, #20]
   1a804:	188a      	adds	r2, r1, r2
   1a806:	7812      	ldrb	r2, [r2, #0]
   1a808:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   1a80a:	68ba      	ldr	r2, [r7, #8]
   1a80c:	697b      	ldr	r3, [r7, #20]
   1a80e:	18d3      	adds	r3, r2, r3
   1a810:	781b      	ldrb	r3, [r3, #0]
   1a812:	2b00      	cmp	r3, #0
   1a814:	d007      	beq.n	1a826 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   1a816:	697b      	ldr	r3, [r7, #20]
   1a818:	3301      	adds	r3, #1
   1a81a:	617b      	str	r3, [r7, #20]
   1a81c:	697a      	ldr	r2, [r7, #20]
   1a81e:	687b      	ldr	r3, [r7, #4]
   1a820:	429a      	cmp	r2, r3
   1a822:	d3ea      	bcc.n	1a7fa <prvStrncpy+0x12>
			break;
	}
}
   1a824:	e000      	b.n	1a828 <prvStrncpy+0x40>
			break;
   1a826:	46c0      	nop			; (mov r8, r8)
}
   1a828:	46c0      	nop			; (mov r8, r8)
   1a82a:	46bd      	mov	sp, r7
   1a82c:	b006      	add	sp, #24
   1a82e:	bd80      	pop	{r7, pc}

0001a830 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   1a830:	b580      	push	{r7, lr}
   1a832:	b082      	sub	sp, #8
   1a834:	af00      	add	r7, sp, #0
   1a836:	603a      	str	r2, [r7, #0]
   1a838:	1dfb      	adds	r3, r7, #7
   1a83a:	1c02      	adds	r2, r0, #0
   1a83c:	701a      	strb	r2, [r3, #0]
   1a83e:	1dbb      	adds	r3, r7, #6
   1a840:	1c0a      	adds	r2, r1, #0
   1a842:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   1a844:	683b      	ldr	r3, [r7, #0]
   1a846:	2b00      	cmp	r3, #0
   1a848:	d104      	bne.n	1a854 <prvTraceSetObjectName+0x24>
   1a84a:	4b2a      	ldr	r3, [pc, #168]	; (1a8f4 <prvTraceSetObjectName+0xc4>)
   1a84c:	0018      	movs	r0, r3
   1a84e:	4b2a      	ldr	r3, [pc, #168]	; (1a8f8 <prvTraceSetObjectName+0xc8>)
   1a850:	4798      	blx	r3
   1a852:	e04b      	b.n	1a8ec <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   1a854:	1dfb      	adds	r3, r7, #7
   1a856:	781b      	ldrb	r3, [r3, #0]
   1a858:	2b08      	cmp	r3, #8
   1a85a:	d904      	bls.n	1a866 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   1a85c:	4b27      	ldr	r3, [pc, #156]	; (1a8fc <prvTraceSetObjectName+0xcc>)
   1a85e:	0018      	movs	r0, r3
   1a860:	4b25      	ldr	r3, [pc, #148]	; (1a8f8 <prvTraceSetObjectName+0xc8>)
   1a862:	4798      	blx	r3
		return;
   1a864:	e042      	b.n	1a8ec <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   1a866:	1dbb      	adds	r3, r7, #6
   1a868:	781b      	ldrb	r3, [r3, #0]
   1a86a:	2b00      	cmp	r3, #0
   1a86c:	d104      	bne.n	1a878 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   1a86e:	4b24      	ldr	r3, [pc, #144]	; (1a900 <prvTraceSetObjectName+0xd0>)
   1a870:	0018      	movs	r0, r3
   1a872:	4b21      	ldr	r3, [pc, #132]	; (1a8f8 <prvTraceSetObjectName+0xc8>)
   1a874:	4798      	blx	r3
		return;
   1a876:	e039      	b.n	1a8ec <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   1a878:	4b22      	ldr	r3, [pc, #136]	; (1a904 <prvTraceSetObjectName+0xd4>)
   1a87a:	681a      	ldr	r2, [r3, #0]
   1a87c:	1dfb      	adds	r3, r7, #7
   1a87e:	781b      	ldrb	r3, [r3, #0]
   1a880:	2164      	movs	r1, #100	; 0x64
   1a882:	18d3      	adds	r3, r2, r3
   1a884:	185b      	adds	r3, r3, r1
   1a886:	781b      	ldrb	r3, [r3, #0]
   1a888:	1dba      	adds	r2, r7, #6
   1a88a:	7812      	ldrb	r2, [r2, #0]
   1a88c:	429a      	cmp	r2, r3
   1a88e:	d909      	bls.n	1a8a4 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1a890:	1dfb      	adds	r3, r7, #7
   1a892:	781b      	ldrb	r3, [r3, #0]
   1a894:	0018      	movs	r0, r3
   1a896:	4b1c      	ldr	r3, [pc, #112]	; (1a908 <prvTraceSetObjectName+0xd8>)
   1a898:	4798      	blx	r3
   1a89a:	0003      	movs	r3, r0
   1a89c:	0018      	movs	r0, r3
   1a89e:	4b16      	ldr	r3, [pc, #88]	; (1a8f8 <prvTraceSetObjectName+0xc8>)
   1a8a0:	4798      	blx	r3
   1a8a2:	e023      	b.n	1a8ec <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   1a8a4:	1dfb      	adds	r3, r7, #7
   1a8a6:	781a      	ldrb	r2, [r3, #0]
   1a8a8:	1dbb      	adds	r3, r7, #6
   1a8aa:	781b      	ldrb	r3, [r3, #0]
   1a8ac:	0011      	movs	r1, r2
   1a8ae:	0018      	movs	r0, r3
   1a8b0:	4b16      	ldr	r3, [pc, #88]	; (1a90c <prvTraceSetObjectName+0xdc>)
   1a8b2:	4798      	blx	r3
   1a8b4:	0003      	movs	r3, r0
   1a8b6:	001a      	movs	r2, r3
   1a8b8:	4b15      	ldr	r3, [pc, #84]	; (1a910 <prvTraceSetObjectName+0xe0>)
   1a8ba:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   1a8bc:	4b15      	ldr	r3, [pc, #84]	; (1a914 <prvTraceSetObjectName+0xe4>)
   1a8be:	681b      	ldr	r3, [r3, #0]
   1a8c0:	2b00      	cmp	r3, #0
   1a8c2:	d113      	bne.n	1a8ec <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1a8c4:	4b0f      	ldr	r3, [pc, #60]	; (1a904 <prvTraceSetObjectName+0xd4>)
   1a8c6:	681a      	ldr	r2, [r3, #0]
   1a8c8:	4b11      	ldr	r3, [pc, #68]	; (1a910 <prvTraceSetObjectName+0xe0>)
   1a8ca:	881b      	ldrh	r3, [r3, #0]
   1a8cc:	3398      	adds	r3, #152	; 0x98
   1a8ce:	18d3      	adds	r3, r2, r3
   1a8d0:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   1a8d2:	4b0c      	ldr	r3, [pc, #48]	; (1a904 <prvTraceSetObjectName+0xd4>)
   1a8d4:	681a      	ldr	r2, [r3, #0]
   1a8d6:	1dfb      	adds	r3, r7, #7
   1a8d8:	781b      	ldrb	r3, [r3, #0]
   1a8da:	2170      	movs	r1, #112	; 0x70
   1a8dc:	18d3      	adds	r3, r2, r3
   1a8de:	185b      	adds	r3, r3, r1
   1a8e0:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1a8e2:	001a      	movs	r2, r3
   1a8e4:	683b      	ldr	r3, [r7, #0]
   1a8e6:	0019      	movs	r1, r3
   1a8e8:	4b0b      	ldr	r3, [pc, #44]	; (1a918 <prvTraceSetObjectName+0xe8>)
   1a8ea:	4798      	blx	r3
		}
	}
}
   1a8ec:	46bd      	mov	sp, r7
   1a8ee:	b002      	add	sp, #8
   1a8f0:	bd80      	pop	{r7, pc}
   1a8f2:	46c0      	nop			; (mov r8, r8)
   1a8f4:	00039d7c 	.word	0x00039d7c
   1a8f8:	0001a91d 	.word	0x0001a91d
   1a8fc:	00039db0 	.word	0x00039db0
   1a900:	00039de0 	.word	0x00039de0
   1a904:	20000df8 	.word	0x20000df8
   1a908:	0001963d 	.word	0x0001963d
   1a90c:	0001a529 	.word	0x0001a529
   1a910:	20000e00 	.word	0x20000e00
   1a914:	20000d58 	.word	0x20000d58
   1a918:	0001a7e9 	.word	0x0001a7e9

0001a91c <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   1a91c:	b580      	push	{r7, lr}
   1a91e:	b082      	sub	sp, #8
   1a920:	af00      	add	r7, sp, #0
   1a922:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   1a924:	4b11      	ldr	r3, [pc, #68]	; (1a96c <prvTraceError+0x50>)
   1a926:	681b      	ldr	r3, [r3, #0]
   1a928:	2b00      	cmp	r3, #0
   1a92a:	d001      	beq.n	1a930 <prvTraceError+0x14>
	{
		vTraceStop();
   1a92c:	4b10      	ldr	r3, [pc, #64]	; (1a970 <prvTraceError+0x54>)
   1a92e:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   1a930:	4b10      	ldr	r3, [pc, #64]	; (1a974 <prvTraceError+0x58>)
   1a932:	681b      	ldr	r3, [r3, #0]
   1a934:	2b00      	cmp	r3, #0
   1a936:	d115      	bne.n	1a964 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   1a938:	4b0e      	ldr	r3, [pc, #56]	; (1a974 <prvTraceError+0x58>)
   1a93a:	687a      	ldr	r2, [r7, #4]
   1a93c:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   1a93e:	4b0b      	ldr	r3, [pc, #44]	; (1a96c <prvTraceError+0x50>)
   1a940:	681b      	ldr	r3, [r3, #0]
   1a942:	2b00      	cmp	r3, #0
   1a944:	d00e      	beq.n	1a964 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1a946:	4b09      	ldr	r3, [pc, #36]	; (1a96c <prvTraceError+0x50>)
   1a948:	681b      	ldr	r3, [r3, #0]
   1a94a:	4a0b      	ldr	r2, [pc, #44]	; (1a978 <prvTraceError+0x5c>)
   1a94c:	1898      	adds	r0, r3, r2
   1a94e:	4b09      	ldr	r3, [pc, #36]	; (1a974 <prvTraceError+0x58>)
   1a950:	681b      	ldr	r3, [r3, #0]
   1a952:	2250      	movs	r2, #80	; 0x50
   1a954:	0019      	movs	r1, r3
   1a956:	4b09      	ldr	r3, [pc, #36]	; (1a97c <prvTraceError+0x60>)
   1a958:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   1a95a:	4b04      	ldr	r3, [pc, #16]	; (1a96c <prvTraceError+0x50>)
   1a95c:	681b      	ldr	r3, [r3, #0]
   1a95e:	4a08      	ldr	r2, [pc, #32]	; (1a980 <prvTraceError+0x64>)
   1a960:	2101      	movs	r1, #1
   1a962:	5099      	str	r1, [r3, r2]
		}
	}
}
   1a964:	46c0      	nop			; (mov r8, r8)
   1a966:	46bd      	mov	sp, r7
   1a968:	b002      	add	sp, #8
   1a96a:	bd80      	pop	{r7, pc}
   1a96c:	20000df8 	.word	0x20000df8
   1a970:	000197e1 	.word	0x000197e1
   1a974:	20000d58 	.word	0x20000d58
   1a978:	000006bc 	.word	0x000006bc
   1a97c:	0001a7e9 	.word	0x0001a7e9
   1a980:	000006b4 	.word	0x000006b4

0001a984 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   1a984:	b580      	push	{r7, lr}
   1a986:	b086      	sub	sp, #24
   1a988:	af00      	add	r7, sp, #0
   1a98a:	0002      	movs	r2, r0
   1a98c:	1dfb      	adds	r3, r7, #7
   1a98e:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   1a990:	2300      	movs	r3, #0
   1a992:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   1a994:	2300      	movs	r3, #0
   1a996:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   1a998:	1dfb      	adds	r3, r7, #7
   1a99a:	781b      	ldrb	r3, [r3, #0]
   1a99c:	2b00      	cmp	r3, #0
   1a99e:	d000      	beq.n	1a9a2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   1a9a0:	e089      	b.n	1aab6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   1a9a2:	4b49      	ldr	r3, [pc, #292]	; (1aac8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   1a9a4:	0018      	movs	r0, r3
   1a9a6:	4b49      	ldr	r3, [pc, #292]	; (1aacc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   1a9a8:	4798      	blx	r3
   1a9aa:	e08a      	b.n	1aac2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   1a9ac:	4b48      	ldr	r3, [pc, #288]	; (1aad0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a9ae:	681b      	ldr	r3, [r3, #0]
   1a9b0:	69da      	ldr	r2, [r3, #28]
   1a9b2:	697b      	ldr	r3, [r7, #20]
   1a9b4:	18d3      	adds	r3, r2, r3
   1a9b6:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1a9b8:	4b45      	ldr	r3, [pc, #276]	; (1aad0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a9ba:	6819      	ldr	r1, [r3, #0]
   1a9bc:	693b      	ldr	r3, [r7, #16]
   1a9be:	009a      	lsls	r2, r3, #2
   1a9c0:	23e2      	movs	r3, #226	; 0xe2
   1a9c2:	00db      	lsls	r3, r3, #3
   1a9c4:	188a      	adds	r2, r1, r2
   1a9c6:	18d3      	adds	r3, r2, r3
   1a9c8:	781b      	ldrb	r3, [r3, #0]
   1a9ca:	2b98      	cmp	r3, #152	; 0x98
   1a9cc:	d934      	bls.n	1aa38 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   1a9ce:	4b40      	ldr	r3, [pc, #256]	; (1aad0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a9d0:	6819      	ldr	r1, [r3, #0]
   1a9d2:	693b      	ldr	r3, [r7, #16]
   1a9d4:	009a      	lsls	r2, r3, #2
   1a9d6:	23e2      	movs	r3, #226	; 0xe2
   1a9d8:	00db      	lsls	r3, r3, #3
   1a9da:	188a      	adds	r2, r1, r2
   1a9dc:	18d3      	adds	r3, r2, r3
   1a9de:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1a9e0:	2ba7      	cmp	r3, #167	; 0xa7
   1a9e2:	d829      	bhi.n	1aa38 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   1a9e4:	4b3a      	ldr	r3, [pc, #232]	; (1aad0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a9e6:	6819      	ldr	r1, [r3, #0]
   1a9e8:	693b      	ldr	r3, [r7, #16]
   1a9ea:	009a      	lsls	r2, r3, #2
   1a9ec:	23e2      	movs	r3, #226	; 0xe2
   1a9ee:	00db      	lsls	r3, r3, #3
   1a9f0:	188a      	adds	r2, r1, r2
   1a9f2:	18d3      	adds	r3, r2, r3
   1a9f4:	781a      	ldrb	r2, [r3, #0]
   1a9f6:	230f      	movs	r3, #15
   1a9f8:	18fb      	adds	r3, r7, r3
   1a9fa:	3268      	adds	r2, #104	; 0x68
   1a9fc:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   1a9fe:	230f      	movs	r3, #15
   1aa00:	18fb      	adds	r3, r7, r3
   1aa02:	781a      	ldrb	r2, [r3, #0]
   1aa04:	693b      	ldr	r3, [r7, #16]
   1aa06:	18d2      	adds	r2, r2, r3
   1aa08:	4b31      	ldr	r3, [pc, #196]	; (1aad0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1aa0a:	681b      	ldr	r3, [r3, #0]
   1aa0c:	699b      	ldr	r3, [r3, #24]
   1aa0e:	429a      	cmp	r2, r3
   1aa10:	d24d      	bcs.n	1aaae <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   1aa12:	4b2f      	ldr	r3, [pc, #188]	; (1aad0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1aa14:	681a      	ldr	r2, [r3, #0]
   1aa16:	693b      	ldr	r3, [r7, #16]
   1aa18:	009b      	lsls	r3, r3, #2
   1aa1a:	21e2      	movs	r1, #226	; 0xe2
   1aa1c:	00c9      	lsls	r1, r1, #3
   1aa1e:	468c      	mov	ip, r1
   1aa20:	4463      	add	r3, ip
   1aa22:	18d0      	adds	r0, r2, r3
   1aa24:	230f      	movs	r3, #15
   1aa26:	18fb      	adds	r3, r7, r3
   1aa28:	781b      	ldrb	r3, [r3, #0]
   1aa2a:	3301      	adds	r3, #1
   1aa2c:	009b      	lsls	r3, r3, #2
   1aa2e:	001a      	movs	r2, r3
   1aa30:	2100      	movs	r1, #0
   1aa32:	4b28      	ldr	r3, [pc, #160]	; (1aad4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1aa34:	4798      	blx	r3
		{
   1aa36:	e03a      	b.n	1aaae <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   1aa38:	4b25      	ldr	r3, [pc, #148]	; (1aad0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1aa3a:	6819      	ldr	r1, [r3, #0]
   1aa3c:	693b      	ldr	r3, [r7, #16]
   1aa3e:	009a      	lsls	r2, r3, #2
   1aa40:	23e2      	movs	r3, #226	; 0xe2
   1aa42:	00db      	lsls	r3, r3, #3
   1aa44:	188a      	adds	r2, r1, r2
   1aa46:	18d3      	adds	r3, r2, r3
   1aa48:	781b      	ldrb	r3, [r3, #0]
   1aa4a:	2b01      	cmp	r3, #1
   1aa4c:	d130      	bne.n	1aab0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   1aa4e:	693b      	ldr	r3, [r7, #16]
   1aa50:	1c5a      	adds	r2, r3, #1
   1aa52:	4b1f      	ldr	r3, [pc, #124]	; (1aad0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1aa54:	681b      	ldr	r3, [r3, #0]
   1aa56:	699b      	ldr	r3, [r3, #24]
   1aa58:	429a      	cmp	r2, r3
   1aa5a:	d20e      	bcs.n	1aa7a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   1aa5c:	4b1c      	ldr	r3, [pc, #112]	; (1aad0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1aa5e:	681a      	ldr	r2, [r3, #0]
   1aa60:	693b      	ldr	r3, [r7, #16]
   1aa62:	009b      	lsls	r3, r3, #2
   1aa64:	21e2      	movs	r1, #226	; 0xe2
   1aa66:	00c9      	lsls	r1, r1, #3
   1aa68:	468c      	mov	ip, r1
   1aa6a:	4463      	add	r3, ip
   1aa6c:	18d3      	adds	r3, r2, r3
   1aa6e:	2208      	movs	r2, #8
   1aa70:	2100      	movs	r1, #0
   1aa72:	0018      	movs	r0, r3
   1aa74:	4b17      	ldr	r3, [pc, #92]	; (1aad4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1aa76:	4798      	blx	r3
   1aa78:	e01a      	b.n	1aab0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   1aa7a:	4b15      	ldr	r3, [pc, #84]	; (1aad0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1aa7c:	681b      	ldr	r3, [r3, #0]
   1aa7e:	22e2      	movs	r2, #226	; 0xe2
   1aa80:	00d2      	lsls	r2, r2, #3
   1aa82:	4694      	mov	ip, r2
   1aa84:	4463      	add	r3, ip
   1aa86:	2204      	movs	r2, #4
   1aa88:	2100      	movs	r1, #0
   1aa8a:	0018      	movs	r0, r3
   1aa8c:	4b11      	ldr	r3, [pc, #68]	; (1aad4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1aa8e:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   1aa90:	4b0f      	ldr	r3, [pc, #60]	; (1aad0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1aa92:	681a      	ldr	r2, [r3, #0]
   1aa94:	693b      	ldr	r3, [r7, #16]
   1aa96:	009b      	lsls	r3, r3, #2
   1aa98:	21e2      	movs	r1, #226	; 0xe2
   1aa9a:	00c9      	lsls	r1, r1, #3
   1aa9c:	468c      	mov	ip, r1
   1aa9e:	4463      	add	r3, ip
   1aaa0:	18d3      	adds	r3, r2, r3
   1aaa2:	2204      	movs	r2, #4
   1aaa4:	2100      	movs	r1, #0
   1aaa6:	0018      	movs	r0, r3
   1aaa8:	4b0a      	ldr	r3, [pc, #40]	; (1aad4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1aaaa:	4798      	blx	r3
   1aaac:	e000      	b.n	1aab0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   1aaae:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   1aab0:	697b      	ldr	r3, [r7, #20]
   1aab2:	3301      	adds	r3, #1
   1aab4:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   1aab6:	1dfb      	adds	r3, r7, #7
   1aab8:	781a      	ldrb	r2, [r3, #0]
   1aaba:	697b      	ldr	r3, [r7, #20]
   1aabc:	429a      	cmp	r2, r3
   1aabe:	d900      	bls.n	1aac2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   1aac0:	e774      	b.n	1a9ac <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   1aac2:	46bd      	mov	sp, r7
   1aac4:	b006      	add	sp, #24
   1aac6:	bd80      	pop	{r7, pc}
   1aac8:	00039e40 	.word	0x00039e40
   1aacc:	0001a91d 	.word	0x0001a91d
   1aad0:	20000df8 	.word	0x20000df8
   1aad4:	0003643f 	.word	0x0003643f

0001aad8 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   1aad8:	b580      	push	{r7, lr}
   1aada:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   1aadc:	4b12      	ldr	r3, [pc, #72]	; (1ab28 <prvTraceUpdateCounters+0x50>)
   1aade:	681b      	ldr	r3, [r3, #0]
   1aae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1aae2:	2b00      	cmp	r3, #0
   1aae4:	d01c      	beq.n	1ab20 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   1aae6:	4b10      	ldr	r3, [pc, #64]	; (1ab28 <prvTraceUpdateCounters+0x50>)
   1aae8:	681b      	ldr	r3, [r3, #0]
   1aaea:	695a      	ldr	r2, [r3, #20]
   1aaec:	3201      	adds	r2, #1
   1aaee:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   1aaf0:	4b0d      	ldr	r3, [pc, #52]	; (1ab28 <prvTraceUpdateCounters+0x50>)
   1aaf2:	681b      	ldr	r3, [r3, #0]
   1aaf4:	69da      	ldr	r2, [r3, #28]
   1aaf6:	3201      	adds	r2, #1
   1aaf8:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1aafa:	4b0b      	ldr	r3, [pc, #44]	; (1ab28 <prvTraceUpdateCounters+0x50>)
   1aafc:	681b      	ldr	r3, [r3, #0]
   1aafe:	69da      	ldr	r2, [r3, #28]
   1ab00:	232c      	movs	r3, #44	; 0x2c
   1ab02:	33ff      	adds	r3, #255	; 0xff
   1ab04:	429a      	cmp	r2, r3
   1ab06:	d907      	bls.n	1ab18 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   1ab08:	4b07      	ldr	r3, [pc, #28]	; (1ab28 <prvTraceUpdateCounters+0x50>)
   1ab0a:	681b      	ldr	r3, [r3, #0]
   1ab0c:	2201      	movs	r2, #1
   1ab0e:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   1ab10:	4b05      	ldr	r3, [pc, #20]	; (1ab28 <prvTraceUpdateCounters+0x50>)
   1ab12:	681b      	ldr	r3, [r3, #0]
   1ab14:	2200      	movs	r2, #0
   1ab16:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   1ab18:	2001      	movs	r0, #1
   1ab1a:	4b04      	ldr	r3, [pc, #16]	; (1ab2c <prvTraceUpdateCounters+0x54>)
   1ab1c:	4798      	blx	r3
   1ab1e:	e000      	b.n	1ab22 <prvTraceUpdateCounters+0x4a>
		return;
   1ab20:	46c0      	nop			; (mov r8, r8)
#endif
}
   1ab22:	46bd      	mov	sp, r7
   1ab24:	bd80      	pop	{r7, pc}
   1ab26:	46c0      	nop			; (mov r8, r8)
   1ab28:	20000df8 	.word	0x20000df8
   1ab2c:	0001a985 	.word	0x0001a985

0001ab30 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   1ab30:	b5b0      	push	{r4, r5, r7, lr}
   1ab32:	b086      	sub	sp, #24
   1ab34:	af00      	add	r7, sp, #0
   1ab36:	0002      	movs	r2, r0
   1ab38:	1dbb      	adds	r3, r7, #6
   1ab3a:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   1ab3c:	2300      	movs	r3, #0
   1ab3e:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   1ab40:	2300      	movs	r3, #0
   1ab42:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   1ab44:	2300      	movs	r3, #0
   1ab46:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   1ab48:	1dbb      	adds	r3, r7, #6
   1ab4a:	881b      	ldrh	r3, [r3, #0]
   1ab4c:	2bff      	cmp	r3, #255	; 0xff
   1ab4e:	d00a      	beq.n	1ab66 <prvTraceGetDTS+0x36>
   1ab50:	1dbb      	adds	r3, r7, #6
   1ab52:	881b      	ldrh	r3, [r3, #0]
   1ab54:	4a60      	ldr	r2, [pc, #384]	; (1acd8 <prvTraceGetDTS+0x1a8>)
   1ab56:	4293      	cmp	r3, r2
   1ab58:	d005      	beq.n	1ab66 <prvTraceGetDTS+0x36>
   1ab5a:	4b60      	ldr	r3, [pc, #384]	; (1acdc <prvTraceGetDTS+0x1ac>)
   1ab5c:	0018      	movs	r0, r3
   1ab5e:	4b60      	ldr	r3, [pc, #384]	; (1ace0 <prvTraceGetDTS+0x1b0>)
   1ab60:	4798      	blx	r3
   1ab62:	2300      	movs	r3, #0
   1ab64:	e0b3      	b.n	1acce <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   1ab66:	4b5f      	ldr	r3, [pc, #380]	; (1ace4 <prvTraceGetDTS+0x1b4>)
   1ab68:	681b      	ldr	r3, [r3, #0]
   1ab6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ab6c:	2b00      	cmp	r3, #0
   1ab6e:	d118      	bne.n	1aba2 <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   1ab70:	4b5d      	ldr	r3, [pc, #372]	; (1ace8 <prvTraceGetDTS+0x1b8>)
   1ab72:	681b      	ldr	r3, [r3, #0]
   1ab74:	2b00      	cmp	r3, #0
   1ab76:	d006      	beq.n	1ab86 <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   1ab78:	4b5a      	ldr	r3, [pc, #360]	; (1ace4 <prvTraceGetDTS+0x1b4>)
   1ab7a:	681b      	ldr	r3, [r3, #0]
   1ab7c:	4a5a      	ldr	r2, [pc, #360]	; (1ace8 <prvTraceGetDTS+0x1b8>)
   1ab7e:	6812      	ldr	r2, [r2, #0]
   1ab80:	0892      	lsrs	r2, r2, #2
   1ab82:	625a      	str	r2, [r3, #36]	; 0x24
   1ab84:	e00d      	b.n	1aba2 <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   1ab86:	4b59      	ldr	r3, [pc, #356]	; (1acec <prvTraceGetDTS+0x1bc>)
   1ab88:	681a      	ldr	r2, [r3, #0]
   1ab8a:	4b59      	ldr	r3, [pc, #356]	; (1acf0 <prvTraceGetDTS+0x1c0>)
   1ab8c:	681b      	ldr	r3, [r3, #0]
   1ab8e:	429a      	cmp	r2, r3
   1ab90:	d007      	beq.n	1aba2 <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   1ab92:	4b54      	ldr	r3, [pc, #336]	; (1ace4 <prvTraceGetDTS+0x1b4>)
   1ab94:	681c      	ldr	r4, [r3, #0]
   1ab96:	2000      	movs	r0, #0
   1ab98:	4b56      	ldr	r3, [pc, #344]	; (1acf4 <prvTraceGetDTS+0x1c4>)
   1ab9a:	4798      	blx	r3
   1ab9c:	0003      	movs	r3, r0
   1ab9e:	089b      	lsrs	r3, r3, #2
   1aba0:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   1aba2:	230c      	movs	r3, #12
   1aba4:	18fb      	adds	r3, r7, r3
   1aba6:	0018      	movs	r0, r3
   1aba8:	4b53      	ldr	r3, [pc, #332]	; (1acf8 <prvTraceGetDTS+0x1c8>)
   1abaa:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   1abac:	68fa      	ldr	r2, [r7, #12]
   1abae:	4b53      	ldr	r3, [pc, #332]	; (1acfc <prvTraceGetDTS+0x1cc>)
   1abb0:	681b      	ldr	r3, [r3, #0]
   1abb2:	1ad3      	subs	r3, r2, r3
   1abb4:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   1abb6:	68fa      	ldr	r2, [r7, #12]
   1abb8:	4b50      	ldr	r3, [pc, #320]	; (1acfc <prvTraceGetDTS+0x1cc>)
   1abba:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   1abbc:	4b49      	ldr	r3, [pc, #292]	; (1ace4 <prvTraceGetDTS+0x1b4>)
   1abbe:	681b      	ldr	r3, [r3, #0]
   1abc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1abc2:	2b00      	cmp	r3, #0
   1abc4:	d044      	beq.n	1ac50 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   1abc6:	4b47      	ldr	r3, [pc, #284]	; (1ace4 <prvTraceGetDTS+0x1b4>)
   1abc8:	681b      	ldr	r3, [r3, #0]
   1abca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1abcc:	693b      	ldr	r3, [r7, #16]
   1abce:	429a      	cmp	r2, r3
   1abd0:	d21e      	bcs.n	1ac10 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   1abd2:	4b44      	ldr	r3, [pc, #272]	; (1ace4 <prvTraceGetDTS+0x1b4>)
   1abd4:	681c      	ldr	r4, [r3, #0]
   1abd6:	4b43      	ldr	r3, [pc, #268]	; (1ace4 <prvTraceGetDTS+0x1b4>)
   1abd8:	681b      	ldr	r3, [r3, #0]
   1abda:	6add      	ldr	r5, [r3, #44]	; 0x2c
   1abdc:	4b41      	ldr	r3, [pc, #260]	; (1ace4 <prvTraceGetDTS+0x1b4>)
   1abde:	681b      	ldr	r3, [r3, #0]
   1abe0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1abe2:	4b47      	ldr	r3, [pc, #284]	; (1ad00 <prvTraceGetDTS+0x1d0>)
   1abe4:	0011      	movs	r1, r2
   1abe6:	6938      	ldr	r0, [r7, #16]
   1abe8:	4798      	blx	r3
   1abea:	0003      	movs	r3, r0
   1abec:	18eb      	adds	r3, r5, r3
   1abee:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   1abf0:	4b3c      	ldr	r3, [pc, #240]	; (1ace4 <prvTraceGetDTS+0x1b4>)
   1abf2:	681c      	ldr	r4, [r3, #0]
   1abf4:	4b3b      	ldr	r3, [pc, #236]	; (1ace4 <prvTraceGetDTS+0x1b4>)
   1abf6:	681b      	ldr	r3, [r3, #0]
   1abf8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   1abfa:	4b3a      	ldr	r3, [pc, #232]	; (1ace4 <prvTraceGetDTS+0x1b4>)
   1abfc:	681b      	ldr	r3, [r3, #0]
   1abfe:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1ac00:	693a      	ldr	r2, [r7, #16]
   1ac02:	4b40      	ldr	r3, [pc, #256]	; (1ad04 <prvTraceGetDTS+0x1d4>)
   1ac04:	0010      	movs	r0, r2
   1ac06:	4798      	blx	r3
   1ac08:	000b      	movs	r3, r1
   1ac0a:	18eb      	adds	r3, r5, r3
   1ac0c:	62a3      	str	r3, [r4, #40]	; 0x28
   1ac0e:	e007      	b.n	1ac20 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   1ac10:	4b34      	ldr	r3, [pc, #208]	; (1ace4 <prvTraceGetDTS+0x1b4>)
   1ac12:	681b      	ldr	r3, [r3, #0]
   1ac14:	4a33      	ldr	r2, [pc, #204]	; (1ace4 <prvTraceGetDTS+0x1b4>)
   1ac16:	6812      	ldr	r2, [r2, #0]
   1ac18:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1ac1a:	693a      	ldr	r2, [r7, #16]
   1ac1c:	188a      	adds	r2, r1, r2
   1ac1e:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   1ac20:	4b30      	ldr	r3, [pc, #192]	; (1ace4 <prvTraceGetDTS+0x1b4>)
   1ac22:	681b      	ldr	r3, [r3, #0]
   1ac24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1ac26:	4b2f      	ldr	r3, [pc, #188]	; (1ace4 <prvTraceGetDTS+0x1b4>)
   1ac28:	681b      	ldr	r3, [r3, #0]
   1ac2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ac2c:	429a      	cmp	r2, r3
   1ac2e:	d313      	bcc.n	1ac58 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   1ac30:	4b2c      	ldr	r3, [pc, #176]	; (1ace4 <prvTraceGetDTS+0x1b4>)
   1ac32:	681b      	ldr	r3, [r3, #0]
   1ac34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ac36:	3201      	adds	r2, #1
   1ac38:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   1ac3a:	4b2a      	ldr	r3, [pc, #168]	; (1ace4 <prvTraceGetDTS+0x1b4>)
   1ac3c:	681b      	ldr	r3, [r3, #0]
   1ac3e:	4a29      	ldr	r2, [pc, #164]	; (1ace4 <prvTraceGetDTS+0x1b4>)
   1ac40:	6812      	ldr	r2, [r2, #0]
   1ac42:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1ac44:	4a27      	ldr	r2, [pc, #156]	; (1ace4 <prvTraceGetDTS+0x1b4>)
   1ac46:	6812      	ldr	r2, [r2, #0]
   1ac48:	6a52      	ldr	r2, [r2, #36]	; 0x24
   1ac4a:	1a8a      	subs	r2, r1, r2
   1ac4c:	629a      	str	r2, [r3, #40]	; 0x28
   1ac4e:	e003      	b.n	1ac58 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   1ac50:	4b24      	ldr	r3, [pc, #144]	; (1ace4 <prvTraceGetDTS+0x1b4>)
   1ac52:	681b      	ldr	r3, [r3, #0]
   1ac54:	68fa      	ldr	r2, [r7, #12]
   1ac56:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   1ac58:	1dbb      	adds	r3, r7, #6
   1ac5a:	881a      	ldrh	r2, [r3, #0]
   1ac5c:	693b      	ldr	r3, [r7, #16]
   1ac5e:	429a      	cmp	r2, r3
   1ac60:	d22f      	bcs.n	1acc2 <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   1ac62:	4b29      	ldr	r3, [pc, #164]	; (1ad08 <prvTraceGetDTS+0x1d8>)
   1ac64:	4798      	blx	r3
   1ac66:	0003      	movs	r3, r0
   1ac68:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   1ac6a:	697b      	ldr	r3, [r7, #20]
   1ac6c:	2b00      	cmp	r3, #0
   1ac6e:	d028      	beq.n	1acc2 <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   1ac70:	1dbb      	adds	r3, r7, #6
   1ac72:	881b      	ldrh	r3, [r3, #0]
   1ac74:	4a18      	ldr	r2, [pc, #96]	; (1acd8 <prvTraceGetDTS+0x1a8>)
   1ac76:	4293      	cmp	r3, r2
   1ac78:	d10b      	bne.n	1ac92 <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   1ac7a:	697b      	ldr	r3, [r7, #20]
   1ac7c:	22a9      	movs	r2, #169	; 0xa9
   1ac7e:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   1ac80:	693b      	ldr	r3, [r7, #16]
   1ac82:	0c1b      	lsrs	r3, r3, #16
   1ac84:	b29a      	uxth	r2, r3
   1ac86:	697b      	ldr	r3, [r7, #20]
   1ac88:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   1ac8a:	697b      	ldr	r3, [r7, #20]
   1ac8c:	2200      	movs	r2, #0
   1ac8e:	705a      	strb	r2, [r3, #1]
   1ac90:	e015      	b.n	1acbe <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   1ac92:	1dbb      	adds	r3, r7, #6
   1ac94:	881b      	ldrh	r3, [r3, #0]
   1ac96:	2bff      	cmp	r3, #255	; 0xff
   1ac98:	d10d      	bne.n	1acb6 <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   1ac9a:	697b      	ldr	r3, [r7, #20]
   1ac9c:	22a8      	movs	r2, #168	; 0xa8
   1ac9e:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   1aca0:	693b      	ldr	r3, [r7, #16]
   1aca2:	0a1b      	lsrs	r3, r3, #8
   1aca4:	b29a      	uxth	r2, r3
   1aca6:	697b      	ldr	r3, [r7, #20]
   1aca8:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   1acaa:	693b      	ldr	r3, [r7, #16]
   1acac:	0e1b      	lsrs	r3, r3, #24
   1acae:	b2da      	uxtb	r2, r3
   1acb0:	697b      	ldr	r3, [r7, #20]
   1acb2:	705a      	strb	r2, [r3, #1]
   1acb4:	e003      	b.n	1acbe <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   1acb6:	4b15      	ldr	r3, [pc, #84]	; (1ad0c <prvTraceGetDTS+0x1dc>)
   1acb8:	0018      	movs	r0, r3
   1acba:	4b09      	ldr	r3, [pc, #36]	; (1ace0 <prvTraceGetDTS+0x1b0>)
   1acbc:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   1acbe:	4b14      	ldr	r3, [pc, #80]	; (1ad10 <prvTraceGetDTS+0x1e0>)
   1acc0:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   1acc2:	693b      	ldr	r3, [r7, #16]
   1acc4:	b29b      	uxth	r3, r3
   1acc6:	1dba      	adds	r2, r7, #6
   1acc8:	8812      	ldrh	r2, [r2, #0]
   1acca:	4013      	ands	r3, r2
   1accc:	b29b      	uxth	r3, r3
}
   1acce:	0018      	movs	r0, r3
   1acd0:	46bd      	mov	sp, r7
   1acd2:	b006      	add	sp, #24
   1acd4:	bdb0      	pop	{r4, r5, r7, pc}
   1acd6:	46c0      	nop			; (mov r8, r8)
   1acd8:	0000ffff 	.word	0x0000ffff
   1acdc:	00039e98 	.word	0x00039e98
   1ace0:	0001a91d 	.word	0x0001a91d
   1ace4:	20000df8 	.word	0x20000df8
   1ace8:	20000d54 	.word	0x20000d54
   1acec:	e000e018 	.word	0xe000e018
   1acf0:	20005660 	.word	0x20005660
   1acf4:	0002ad35 	.word	0x0002ad35
   1acf8:	0001ad15 	.word	0x0001ad15
   1acfc:	20000e04 	.word	0x20000e04
   1ad00:	00033ad5 	.word	0x00033ad5
   1ad04:	00033be1 	.word	0x00033be1
   1ad08:	0001a4d5 	.word	0x0001a4d5
   1ad0c:	00039ed8 	.word	0x00039ed8
   1ad10:	0001aad9 	.word	0x0001aad9

0001ad14 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   1ad14:	b580      	push	{r7, lr}
   1ad16:	b084      	sub	sp, #16
   1ad18:	af00      	add	r7, sp, #0
   1ad1a:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   1ad1c:	2300      	movs	r3, #0
   1ad1e:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   1ad20:	2300      	movs	r3, #0
   1ad22:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   1ad24:	4b2d      	ldr	r3, [pc, #180]	; (1addc <prvTracePortGetTimeStamp+0xc8>)
   1ad26:	681b      	ldr	r3, [r3, #0]
   1ad28:	2b01      	cmp	r3, #1
   1ad2a:	d107      	bne.n	1ad3c <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   1ad2c:	687b      	ldr	r3, [r7, #4]
   1ad2e:	2b00      	cmp	r3, #0
   1ad30:	d04f      	beq.n	1add2 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   1ad32:	4b2b      	ldr	r3, [pc, #172]	; (1ade0 <prvTracePortGetTimeStamp+0xcc>)
   1ad34:	681a      	ldr	r2, [r3, #0]
   1ad36:	687b      	ldr	r3, [r7, #4]
   1ad38:	601a      	str	r2, [r3, #0]
		return;
   1ad3a:	e04a      	b.n	1add2 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   1ad3c:	4b29      	ldr	r3, [pc, #164]	; (1ade4 <prvTracePortGetTimeStamp+0xd0>)
   1ad3e:	681a      	ldr	r2, [r3, #0]
   1ad40:	4b29      	ldr	r3, [pc, #164]	; (1ade8 <prvTracePortGetTimeStamp+0xd4>)
   1ad42:	681b      	ldr	r3, [r3, #0]
   1ad44:	1ad3      	subs	r3, r2, r3
   1ad46:	3301      	adds	r3, #1
   1ad48:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   1ad4a:	4b28      	ldr	r3, [pc, #160]	; (1adec <prvTracePortGetTimeStamp+0xd8>)
   1ad4c:	681a      	ldr	r2, [r3, #0]
   1ad4e:	4b28      	ldr	r3, [pc, #160]	; (1adf0 <prvTracePortGetTimeStamp+0xdc>)
   1ad50:	681b      	ldr	r3, [r3, #0]
   1ad52:	1ad3      	subs	r3, r2, r3
   1ad54:	3b01      	subs	r3, #1
   1ad56:	2b00      	cmp	r3, #0
   1ad58:	db03      	blt.n	1ad62 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   1ad5a:	4b24      	ldr	r3, [pc, #144]	; (1adec <prvTracePortGetTimeStamp+0xd8>)
   1ad5c:	681b      	ldr	r3, [r3, #0]
   1ad5e:	60fb      	str	r3, [r7, #12]
   1ad60:	e002      	b.n	1ad68 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   1ad62:	4b23      	ldr	r3, [pc, #140]	; (1adf0 <prvTracePortGetTimeStamp+0xdc>)
   1ad64:	681b      	ldr	r3, [r3, #0]
   1ad66:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   1ad68:	4b20      	ldr	r3, [pc, #128]	; (1adec <prvTracePortGetTimeStamp+0xd8>)
   1ad6a:	681b      	ldr	r3, [r3, #0]
   1ad6c:	68fa      	ldr	r2, [r7, #12]
   1ad6e:	429a      	cmp	r2, r3
   1ad70:	d107      	bne.n	1ad82 <prvTracePortGetTimeStamp+0x6e>
   1ad72:	4b20      	ldr	r3, [pc, #128]	; (1adf4 <prvTracePortGetTimeStamp+0xe0>)
   1ad74:	681b      	ldr	r3, [r3, #0]
   1ad76:	68ba      	ldr	r2, [r7, #8]
   1ad78:	429a      	cmp	r2, r3
   1ad7a:	d202      	bcs.n	1ad82 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   1ad7c:	68fb      	ldr	r3, [r7, #12]
   1ad7e:	3301      	adds	r3, #1
   1ad80:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   1ad82:	687b      	ldr	r3, [r7, #4]
   1ad84:	2b00      	cmp	r3, #0
   1ad86:	d016      	beq.n	1adb6 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   1ad88:	4b16      	ldr	r3, [pc, #88]	; (1ade4 <prvTracePortGetTimeStamp+0xd0>)
   1ad8a:	681b      	ldr	r3, [r3, #0]
   1ad8c:	3301      	adds	r3, #1
   1ad8e:	089b      	lsrs	r3, r3, #2
   1ad90:	68fa      	ldr	r2, [r7, #12]
   1ad92:	435a      	muls	r2, r3
   1ad94:	4b12      	ldr	r3, [pc, #72]	; (1ade0 <prvTracePortGetTimeStamp+0xcc>)
   1ad96:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   1ad98:	4b12      	ldr	r3, [pc, #72]	; (1ade4 <prvTracePortGetTimeStamp+0xd0>)
   1ad9a:	681b      	ldr	r3, [r3, #0]
   1ad9c:	3301      	adds	r3, #1
   1ad9e:	2203      	movs	r2, #3
   1ada0:	4013      	ands	r3, r2
   1ada2:	68fa      	ldr	r2, [r7, #12]
   1ada4:	435a      	muls	r2, r3
   1ada6:	68bb      	ldr	r3, [r7, #8]
   1ada8:	18d3      	adds	r3, r2, r3
   1adaa:	089a      	lsrs	r2, r3, #2
   1adac:	4b0c      	ldr	r3, [pc, #48]	; (1ade0 <prvTracePortGetTimeStamp+0xcc>)
   1adae:	681b      	ldr	r3, [r3, #0]
   1adb0:	18d2      	adds	r2, r2, r3
   1adb2:	4b0b      	ldr	r3, [pc, #44]	; (1ade0 <prvTracePortGetTimeStamp+0xcc>)
   1adb4:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   1adb6:	4b0d      	ldr	r3, [pc, #52]	; (1adec <prvTracePortGetTimeStamp+0xd8>)
   1adb8:	68fa      	ldr	r2, [r7, #12]
   1adba:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   1adbc:	687b      	ldr	r3, [r7, #4]
   1adbe:	2b00      	cmp	r3, #0
   1adc0:	d003      	beq.n	1adca <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   1adc2:	4b07      	ldr	r3, [pc, #28]	; (1ade0 <prvTracePortGetTimeStamp+0xcc>)
   1adc4:	681a      	ldr	r2, [r3, #0]
   1adc6:	687b      	ldr	r3, [r7, #4]
   1adc8:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   1adca:	4b0a      	ldr	r3, [pc, #40]	; (1adf4 <prvTracePortGetTimeStamp+0xe0>)
   1adcc:	68ba      	ldr	r2, [r7, #8]
   1adce:	601a      	str	r2, [r3, #0]
   1add0:	e000      	b.n	1add4 <prvTracePortGetTimeStamp+0xc0>
		return;
   1add2:	46c0      	nop			; (mov r8, r8)
}
   1add4:	46bd      	mov	sp, r7
   1add6:	b004      	add	sp, #16
   1add8:	bd80      	pop	{r7, pc}
   1adda:	46c0      	nop			; (mov r8, r8)
   1addc:	20000d44 	.word	0x20000d44
   1ade0:	20000d48 	.word	0x20000d48
   1ade4:	e000e014 	.word	0xe000e014
   1ade8:	e000e018 	.word	0xe000e018
   1adec:	20000e08 	.word	0x20000e08
   1adf0:	20000d40 	.word	0x20000d40
   1adf4:	20000e0c 	.word	0x20000e0c

0001adf8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1adf8:	b580      	push	{r7, lr}
   1adfa:	b082      	sub	sp, #8
   1adfc:	af00      	add	r7, sp, #0
   1adfe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ae00:	687b      	ldr	r3, [r7, #4]
   1ae02:	3308      	adds	r3, #8
   1ae04:	001a      	movs	r2, r3
   1ae06:	687b      	ldr	r3, [r7, #4]
   1ae08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1ae0a:	687b      	ldr	r3, [r7, #4]
   1ae0c:	2201      	movs	r2, #1
   1ae0e:	4252      	negs	r2, r2
   1ae10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ae12:	687b      	ldr	r3, [r7, #4]
   1ae14:	3308      	adds	r3, #8
   1ae16:	001a      	movs	r2, r3
   1ae18:	687b      	ldr	r3, [r7, #4]
   1ae1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ae1c:	687b      	ldr	r3, [r7, #4]
   1ae1e:	3308      	adds	r3, #8
   1ae20:	001a      	movs	r2, r3
   1ae22:	687b      	ldr	r3, [r7, #4]
   1ae24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1ae26:	687b      	ldr	r3, [r7, #4]
   1ae28:	2200      	movs	r2, #0
   1ae2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1ae2c:	46c0      	nop			; (mov r8, r8)
   1ae2e:	46bd      	mov	sp, r7
   1ae30:	b002      	add	sp, #8
   1ae32:	bd80      	pop	{r7, pc}

0001ae34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1ae34:	b580      	push	{r7, lr}
   1ae36:	b082      	sub	sp, #8
   1ae38:	af00      	add	r7, sp, #0
   1ae3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1ae3c:	687b      	ldr	r3, [r7, #4]
   1ae3e:	2200      	movs	r2, #0
   1ae40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1ae42:	46c0      	nop			; (mov r8, r8)
   1ae44:	46bd      	mov	sp, r7
   1ae46:	b002      	add	sp, #8
   1ae48:	bd80      	pop	{r7, pc}

0001ae4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1ae4a:	b580      	push	{r7, lr}
   1ae4c:	b084      	sub	sp, #16
   1ae4e:	af00      	add	r7, sp, #0
   1ae50:	6078      	str	r0, [r7, #4]
   1ae52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1ae54:	687b      	ldr	r3, [r7, #4]
   1ae56:	685b      	ldr	r3, [r3, #4]
   1ae58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1ae5a:	683b      	ldr	r3, [r7, #0]
   1ae5c:	68fa      	ldr	r2, [r7, #12]
   1ae5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1ae60:	68fb      	ldr	r3, [r7, #12]
   1ae62:	689a      	ldr	r2, [r3, #8]
   1ae64:	683b      	ldr	r3, [r7, #0]
   1ae66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1ae68:	68fb      	ldr	r3, [r7, #12]
   1ae6a:	689b      	ldr	r3, [r3, #8]
   1ae6c:	683a      	ldr	r2, [r7, #0]
   1ae6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1ae70:	68fb      	ldr	r3, [r7, #12]
   1ae72:	683a      	ldr	r2, [r7, #0]
   1ae74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1ae76:	683b      	ldr	r3, [r7, #0]
   1ae78:	687a      	ldr	r2, [r7, #4]
   1ae7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1ae7c:	687b      	ldr	r3, [r7, #4]
   1ae7e:	681b      	ldr	r3, [r3, #0]
   1ae80:	1c5a      	adds	r2, r3, #1
   1ae82:	687b      	ldr	r3, [r7, #4]
   1ae84:	601a      	str	r2, [r3, #0]
}
   1ae86:	46c0      	nop			; (mov r8, r8)
   1ae88:	46bd      	mov	sp, r7
   1ae8a:	b004      	add	sp, #16
   1ae8c:	bd80      	pop	{r7, pc}

0001ae8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1ae8e:	b580      	push	{r7, lr}
   1ae90:	b084      	sub	sp, #16
   1ae92:	af00      	add	r7, sp, #0
   1ae94:	6078      	str	r0, [r7, #4]
   1ae96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1ae98:	683b      	ldr	r3, [r7, #0]
   1ae9a:	681b      	ldr	r3, [r3, #0]
   1ae9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1ae9e:	68bb      	ldr	r3, [r7, #8]
   1aea0:	3301      	adds	r3, #1
   1aea2:	d103      	bne.n	1aeac <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1aea4:	687b      	ldr	r3, [r7, #4]
   1aea6:	691b      	ldr	r3, [r3, #16]
   1aea8:	60fb      	str	r3, [r7, #12]
   1aeaa:	e00c      	b.n	1aec6 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1aeac:	687b      	ldr	r3, [r7, #4]
   1aeae:	3308      	adds	r3, #8
   1aeb0:	60fb      	str	r3, [r7, #12]
   1aeb2:	e002      	b.n	1aeba <vListInsert+0x2c>
   1aeb4:	68fb      	ldr	r3, [r7, #12]
   1aeb6:	685b      	ldr	r3, [r3, #4]
   1aeb8:	60fb      	str	r3, [r7, #12]
   1aeba:	68fb      	ldr	r3, [r7, #12]
   1aebc:	685b      	ldr	r3, [r3, #4]
   1aebe:	681a      	ldr	r2, [r3, #0]
   1aec0:	68bb      	ldr	r3, [r7, #8]
   1aec2:	429a      	cmp	r2, r3
   1aec4:	d9f6      	bls.n	1aeb4 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1aec6:	68fb      	ldr	r3, [r7, #12]
   1aec8:	685a      	ldr	r2, [r3, #4]
   1aeca:	683b      	ldr	r3, [r7, #0]
   1aecc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1aece:	683b      	ldr	r3, [r7, #0]
   1aed0:	685b      	ldr	r3, [r3, #4]
   1aed2:	683a      	ldr	r2, [r7, #0]
   1aed4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1aed6:	683b      	ldr	r3, [r7, #0]
   1aed8:	68fa      	ldr	r2, [r7, #12]
   1aeda:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1aedc:	68fb      	ldr	r3, [r7, #12]
   1aede:	683a      	ldr	r2, [r7, #0]
   1aee0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1aee2:	683b      	ldr	r3, [r7, #0]
   1aee4:	687a      	ldr	r2, [r7, #4]
   1aee6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1aee8:	687b      	ldr	r3, [r7, #4]
   1aeea:	681b      	ldr	r3, [r3, #0]
   1aeec:	1c5a      	adds	r2, r3, #1
   1aeee:	687b      	ldr	r3, [r7, #4]
   1aef0:	601a      	str	r2, [r3, #0]
}
   1aef2:	46c0      	nop			; (mov r8, r8)
   1aef4:	46bd      	mov	sp, r7
   1aef6:	b004      	add	sp, #16
   1aef8:	bd80      	pop	{r7, pc}

0001aefa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1aefa:	b580      	push	{r7, lr}
   1aefc:	b084      	sub	sp, #16
   1aefe:	af00      	add	r7, sp, #0
   1af00:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1af02:	687b      	ldr	r3, [r7, #4]
   1af04:	691b      	ldr	r3, [r3, #16]
   1af06:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1af08:	687b      	ldr	r3, [r7, #4]
   1af0a:	685b      	ldr	r3, [r3, #4]
   1af0c:	687a      	ldr	r2, [r7, #4]
   1af0e:	6892      	ldr	r2, [r2, #8]
   1af10:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1af12:	687b      	ldr	r3, [r7, #4]
   1af14:	689b      	ldr	r3, [r3, #8]
   1af16:	687a      	ldr	r2, [r7, #4]
   1af18:	6852      	ldr	r2, [r2, #4]
   1af1a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1af1c:	68fb      	ldr	r3, [r7, #12]
   1af1e:	685a      	ldr	r2, [r3, #4]
   1af20:	687b      	ldr	r3, [r7, #4]
   1af22:	429a      	cmp	r2, r3
   1af24:	d103      	bne.n	1af2e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1af26:	687b      	ldr	r3, [r7, #4]
   1af28:	689a      	ldr	r2, [r3, #8]
   1af2a:	68fb      	ldr	r3, [r7, #12]
   1af2c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1af2e:	687b      	ldr	r3, [r7, #4]
   1af30:	2200      	movs	r2, #0
   1af32:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1af34:	68fb      	ldr	r3, [r7, #12]
   1af36:	681b      	ldr	r3, [r3, #0]
   1af38:	1e5a      	subs	r2, r3, #1
   1af3a:	68fb      	ldr	r3, [r7, #12]
   1af3c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1af3e:	68fb      	ldr	r3, [r7, #12]
   1af40:	681b      	ldr	r3, [r3, #0]
}
   1af42:	0018      	movs	r0, r3
   1af44:	46bd      	mov	sp, r7
   1af46:	b004      	add	sp, #16
   1af48:	bd80      	pop	{r7, pc}
	...

0001af4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1af4c:	b580      	push	{r7, lr}
   1af4e:	b084      	sub	sp, #16
   1af50:	af00      	add	r7, sp, #0
   1af52:	60f8      	str	r0, [r7, #12]
   1af54:	60b9      	str	r1, [r7, #8]
   1af56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   1af58:	68fb      	ldr	r3, [r7, #12]
   1af5a:	3b04      	subs	r3, #4
   1af5c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1af5e:	68fb      	ldr	r3, [r7, #12]
   1af60:	2280      	movs	r2, #128	; 0x80
   1af62:	0452      	lsls	r2, r2, #17
   1af64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1af66:	68fb      	ldr	r3, [r7, #12]
   1af68:	3b04      	subs	r3, #4
   1af6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1af6c:	68ba      	ldr	r2, [r7, #8]
   1af6e:	68fb      	ldr	r3, [r7, #12]
   1af70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1af72:	68fb      	ldr	r3, [r7, #12]
   1af74:	3b04      	subs	r3, #4
   1af76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1af78:	4a08      	ldr	r2, [pc, #32]	; (1af9c <pxPortInitialiseStack+0x50>)
   1af7a:	68fb      	ldr	r3, [r7, #12]
   1af7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1af7e:	68fb      	ldr	r3, [r7, #12]
   1af80:	3b14      	subs	r3, #20
   1af82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1af84:	687a      	ldr	r2, [r7, #4]
   1af86:	68fb      	ldr	r3, [r7, #12]
   1af88:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1af8a:	68fb      	ldr	r3, [r7, #12]
   1af8c:	3b20      	subs	r3, #32
   1af8e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1af90:	68fb      	ldr	r3, [r7, #12]
}
   1af92:	0018      	movs	r0, r3
   1af94:	46bd      	mov	sp, r7
   1af96:	b004      	add	sp, #16
   1af98:	bd80      	pop	{r7, pc}
   1af9a:	46c0      	nop			; (mov r8, r8)
   1af9c:	0001afa1 	.word	0x0001afa1

0001afa0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1afa0:	b580      	push	{r7, lr}
   1afa2:	b082      	sub	sp, #8
   1afa4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   1afa6:	2300      	movs	r3, #0
   1afa8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1afaa:	4b07      	ldr	r3, [pc, #28]	; (1afc8 <prvTaskExitError+0x28>)
   1afac:	681b      	ldr	r3, [r3, #0]
   1afae:	3301      	adds	r3, #1
   1afb0:	d001      	beq.n	1afb6 <prvTaskExitError+0x16>
   1afb2:	b672      	cpsid	i
   1afb4:	e7fe      	b.n	1afb4 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   1afb6:	b672      	cpsid	i
	while( ulDummy == 0 )
   1afb8:	46c0      	nop			; (mov r8, r8)
   1afba:	687b      	ldr	r3, [r7, #4]
   1afbc:	2b00      	cmp	r3, #0
   1afbe:	d0fc      	beq.n	1afba <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1afc0:	46c0      	nop			; (mov r8, r8)
   1afc2:	46bd      	mov	sp, r7
   1afc4:	b002      	add	sp, #8
   1afc6:	bd80      	pop	{r7, pc}
   1afc8:	20000114 	.word	0x20000114

0001afcc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1afcc:	b580      	push	{r7, lr}
   1afce:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1afd0:	46c0      	nop			; (mov r8, r8)
   1afd2:	46bd      	mov	sp, r7
   1afd4:	bd80      	pop	{r7, pc}
	...

0001afe0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   1afe0:	4a0b      	ldr	r2, [pc, #44]	; (1b010 <pxCurrentTCBConst2>)
   1afe2:	6813      	ldr	r3, [r2, #0]
   1afe4:	6818      	ldr	r0, [r3, #0]
   1afe6:	3020      	adds	r0, #32
   1afe8:	f380 8809 	msr	PSP, r0
   1afec:	2002      	movs	r0, #2
   1afee:	f380 8814 	msr	CONTROL, r0
   1aff2:	f3bf 8f6f 	isb	sy
   1aff6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1aff8:	46ae      	mov	lr, r5
   1affa:	bc08      	pop	{r3}
   1affc:	bc04      	pop	{r2}
   1affe:	b662      	cpsie	i
   1b000:	4718      	bx	r3
   1b002:	46c0      	nop			; (mov r8, r8)
   1b004:	46c0      	nop			; (mov r8, r8)
   1b006:	46c0      	nop			; (mov r8, r8)
   1b008:	46c0      	nop			; (mov r8, r8)
   1b00a:	46c0      	nop			; (mov r8, r8)
   1b00c:	46c0      	nop			; (mov r8, r8)
   1b00e:	46c0      	nop			; (mov r8, r8)

0001b010 <pxCurrentTCBConst2>:
   1b010:	200040e0 	.word	0x200040e0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   1b014:	46c0      	nop			; (mov r8, r8)
   1b016:	46c0      	nop			; (mov r8, r8)

0001b018 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1b018:	b580      	push	{r7, lr}
   1b01a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1b01c:	4b0e      	ldr	r3, [pc, #56]	; (1b058 <xPortStartScheduler+0x40>)
   1b01e:	4a0e      	ldr	r2, [pc, #56]	; (1b058 <xPortStartScheduler+0x40>)
   1b020:	6812      	ldr	r2, [r2, #0]
   1b022:	21ff      	movs	r1, #255	; 0xff
   1b024:	0409      	lsls	r1, r1, #16
   1b026:	430a      	orrs	r2, r1
   1b028:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1b02a:	4b0b      	ldr	r3, [pc, #44]	; (1b058 <xPortStartScheduler+0x40>)
   1b02c:	4a0a      	ldr	r2, [pc, #40]	; (1b058 <xPortStartScheduler+0x40>)
   1b02e:	6812      	ldr	r2, [r2, #0]
   1b030:	21ff      	movs	r1, #255	; 0xff
   1b032:	0609      	lsls	r1, r1, #24
   1b034:	430a      	orrs	r2, r1
   1b036:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1b038:	4b08      	ldr	r3, [pc, #32]	; (1b05c <xPortStartScheduler+0x44>)
   1b03a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1b03c:	4b08      	ldr	r3, [pc, #32]	; (1b060 <xPortStartScheduler+0x48>)
   1b03e:	2200      	movs	r2, #0
   1b040:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   1b042:	4b08      	ldr	r3, [pc, #32]	; (1b064 <xPortStartScheduler+0x4c>)
   1b044:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1b046:	4b08      	ldr	r3, [pc, #32]	; (1b068 <xPortStartScheduler+0x50>)
   1b048:	4798      	blx	r3
	prvTaskExitError();
   1b04a:	4b08      	ldr	r3, [pc, #32]	; (1b06c <xPortStartScheduler+0x54>)
   1b04c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1b04e:	2300      	movs	r3, #0
}
   1b050:	0018      	movs	r0, r3
   1b052:	46bd      	mov	sp, r7
   1b054:	bd80      	pop	{r7, pc}
   1b056:	46c0      	nop			; (mov r8, r8)
   1b058:	e000ed20 	.word	0xe000ed20
   1b05c:	0001b179 	.word	0x0001b179
   1b060:	20000114 	.word	0x20000114
   1b064:	0001afe1 	.word	0x0001afe1
   1b068:	0001d6d5 	.word	0x0001d6d5
   1b06c:	0001afa1 	.word	0x0001afa1

0001b070 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   1b070:	b580      	push	{r7, lr}
   1b072:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   1b074:	4b03      	ldr	r3, [pc, #12]	; (1b084 <vPortYield+0x14>)
   1b076:	2280      	movs	r2, #128	; 0x80
   1b078:	0552      	lsls	r2, r2, #21
   1b07a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   1b07c:	46c0      	nop			; (mov r8, r8)
   1b07e:	46bd      	mov	sp, r7
   1b080:	bd80      	pop	{r7, pc}
   1b082:	46c0      	nop			; (mov r8, r8)
   1b084:	e000ed04 	.word	0xe000ed04

0001b088 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1b088:	b580      	push	{r7, lr}
   1b08a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1b08c:	b672      	cpsid	i
    uxCriticalNesting++;
   1b08e:	4b06      	ldr	r3, [pc, #24]	; (1b0a8 <vPortEnterCritical+0x20>)
   1b090:	681b      	ldr	r3, [r3, #0]
   1b092:	1c5a      	adds	r2, r3, #1
   1b094:	4b04      	ldr	r3, [pc, #16]	; (1b0a8 <vPortEnterCritical+0x20>)
   1b096:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   1b098:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1b09c:	f3bf 8f6f 	isb	sy
}
   1b0a0:	46c0      	nop			; (mov r8, r8)
   1b0a2:	46bd      	mov	sp, r7
   1b0a4:	bd80      	pop	{r7, pc}
   1b0a6:	46c0      	nop			; (mov r8, r8)
   1b0a8:	20000114 	.word	0x20000114

0001b0ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1b0ac:	b580      	push	{r7, lr}
   1b0ae:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1b0b0:	4b09      	ldr	r3, [pc, #36]	; (1b0d8 <vPortExitCritical+0x2c>)
   1b0b2:	681b      	ldr	r3, [r3, #0]
   1b0b4:	2b00      	cmp	r3, #0
   1b0b6:	d101      	bne.n	1b0bc <vPortExitCritical+0x10>
   1b0b8:	b672      	cpsid	i
   1b0ba:	e7fe      	b.n	1b0ba <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1b0bc:	4b06      	ldr	r3, [pc, #24]	; (1b0d8 <vPortExitCritical+0x2c>)
   1b0be:	681b      	ldr	r3, [r3, #0]
   1b0c0:	1e5a      	subs	r2, r3, #1
   1b0c2:	4b05      	ldr	r3, [pc, #20]	; (1b0d8 <vPortExitCritical+0x2c>)
   1b0c4:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   1b0c6:	4b04      	ldr	r3, [pc, #16]	; (1b0d8 <vPortExitCritical+0x2c>)
   1b0c8:	681b      	ldr	r3, [r3, #0]
   1b0ca:	2b00      	cmp	r3, #0
   1b0cc:	d100      	bne.n	1b0d0 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1b0ce:	b662      	cpsie	i
    }
}
   1b0d0:	46c0      	nop			; (mov r8, r8)
   1b0d2:	46bd      	mov	sp, r7
   1b0d4:	bd80      	pop	{r7, pc}
   1b0d6:	46c0      	nop			; (mov r8, r8)
   1b0d8:	20000114 	.word	0x20000114

0001b0dc <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1b0dc:	f3ef 8010 	mrs	r0, PRIMASK
   1b0e0:	b672      	cpsid	i
   1b0e2:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   1b0e4:	46c0      	nop			; (mov r8, r8)
   1b0e6:	0018      	movs	r0, r3

0001b0e8 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   1b0e8:	f380 8810 	msr	PRIMASK, r0
   1b0ec:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1b0ee:	46c0      	nop			; (mov r8, r8)

0001b0f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1b0f0:	f3ef 8009 	mrs	r0, PSP
   1b0f4:	4b0e      	ldr	r3, [pc, #56]	; (1b130 <pxCurrentTCBConst>)
   1b0f6:	681a      	ldr	r2, [r3, #0]
   1b0f8:	3820      	subs	r0, #32
   1b0fa:	6010      	str	r0, [r2, #0]
   1b0fc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1b0fe:	4644      	mov	r4, r8
   1b100:	464d      	mov	r5, r9
   1b102:	4656      	mov	r6, sl
   1b104:	465f      	mov	r7, fp
   1b106:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1b108:	b508      	push	{r3, lr}
   1b10a:	b672      	cpsid	i
   1b10c:	f002 fae2 	bl	1d6d4 <vTaskSwitchContext>
   1b110:	b662      	cpsie	i
   1b112:	bc0c      	pop	{r2, r3}
   1b114:	6811      	ldr	r1, [r2, #0]
   1b116:	6808      	ldr	r0, [r1, #0]
   1b118:	3010      	adds	r0, #16
   1b11a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1b11c:	46a0      	mov	r8, r4
   1b11e:	46a9      	mov	r9, r5
   1b120:	46b2      	mov	sl, r6
   1b122:	46bb      	mov	fp, r7
   1b124:	f380 8809 	msr	PSP, r0
   1b128:	3820      	subs	r0, #32
   1b12a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1b12c:	4718      	bx	r3
   1b12e:	46c0      	nop			; (mov r8, r8)

0001b130 <pxCurrentTCBConst>:
   1b130:	200040e0 	.word	0x200040e0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   1b134:	46c0      	nop			; (mov r8, r8)
   1b136:	46c0      	nop			; (mov r8, r8)

0001b138 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1b138:	b580      	push	{r7, lr}
   1b13a:	b082      	sub	sp, #8
   1b13c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1b13e:	4b0a      	ldr	r3, [pc, #40]	; (1b168 <SysTick_Handler+0x30>)
   1b140:	4798      	blx	r3
   1b142:	0003      	movs	r3, r0
   1b144:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1b146:	4b09      	ldr	r3, [pc, #36]	; (1b16c <SysTick_Handler+0x34>)
   1b148:	4798      	blx	r3
   1b14a:	1e03      	subs	r3, r0, #0
   1b14c:	d003      	beq.n	1b156 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1b14e:	4b08      	ldr	r3, [pc, #32]	; (1b170 <SysTick_Handler+0x38>)
   1b150:	2280      	movs	r2, #128	; 0x80
   1b152:	0552      	lsls	r2, r2, #21
   1b154:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1b156:	687b      	ldr	r3, [r7, #4]
   1b158:	0018      	movs	r0, r3
   1b15a:	4b06      	ldr	r3, [pc, #24]	; (1b174 <SysTick_Handler+0x3c>)
   1b15c:	4798      	blx	r3
}
   1b15e:	46c0      	nop			; (mov r8, r8)
   1b160:	46bd      	mov	sp, r7
   1b162:	b002      	add	sp, #8
   1b164:	bd80      	pop	{r7, pc}
   1b166:	46c0      	nop			; (mov r8, r8)
   1b168:	0001b0dd 	.word	0x0001b0dd
   1b16c:	0001d4e5 	.word	0x0001d4e5
   1b170:	e000ed04 	.word	0xe000ed04
   1b174:	0001b0e9 	.word	0x0001b0e9

0001b178 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   1b178:	b5b0      	push	{r4, r5, r7, lr}
   1b17a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1b17c:	4b0b      	ldr	r3, [pc, #44]	; (1b1ac <prvSetupTimerInterrupt+0x34>)
   1b17e:	2200      	movs	r2, #0
   1b180:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1b182:	4b0b      	ldr	r3, [pc, #44]	; (1b1b0 <prvSetupTimerInterrupt+0x38>)
   1b184:	2200      	movs	r2, #0
   1b186:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1b188:	4c0a      	ldr	r4, [pc, #40]	; (1b1b4 <prvSetupTimerInterrupt+0x3c>)
   1b18a:	2000      	movs	r0, #0
   1b18c:	4b0a      	ldr	r3, [pc, #40]	; (1b1b8 <prvSetupTimerInterrupt+0x40>)
   1b18e:	4798      	blx	r3
   1b190:	4b0a      	ldr	r3, [pc, #40]	; (1b1bc <prvSetupTimerInterrupt+0x44>)
   1b192:	22fa      	movs	r2, #250	; 0xfa
   1b194:	0091      	lsls	r1, r2, #2
   1b196:	4798      	blx	r3
   1b198:	0003      	movs	r3, r0
   1b19a:	3b01      	subs	r3, #1
   1b19c:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1b19e:	4b03      	ldr	r3, [pc, #12]	; (1b1ac <prvSetupTimerInterrupt+0x34>)
   1b1a0:	2207      	movs	r2, #7
   1b1a2:	601a      	str	r2, [r3, #0]
}
   1b1a4:	46c0      	nop			; (mov r8, r8)
   1b1a6:	46bd      	mov	sp, r7
   1b1a8:	bdb0      	pop	{r4, r5, r7, pc}
   1b1aa:	46c0      	nop			; (mov r8, r8)
   1b1ac:	e000e010 	.word	0xe000e010
   1b1b0:	e000e018 	.word	0xe000e018
   1b1b4:	e000e014 	.word	0xe000e014
   1b1b8:	0002ad35 	.word	0x0002ad35
   1b1bc:	00033ad5 	.word	0x00033ad5

0001b1c0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1b1c0:	b580      	push	{r7, lr}
   1b1c2:	b084      	sub	sp, #16
   1b1c4:	af00      	add	r7, sp, #0
   1b1c6:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   1b1c8:	2300      	movs	r3, #0
   1b1ca:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   1b1cc:	687b      	ldr	r3, [r7, #4]
   1b1ce:	2207      	movs	r2, #7
   1b1d0:	4013      	ands	r3, r2
   1b1d2:	d004      	beq.n	1b1de <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1b1d4:	687b      	ldr	r3, [r7, #4]
   1b1d6:	2207      	movs	r2, #7
   1b1d8:	4393      	bics	r3, r2
   1b1da:	3308      	adds	r3, #8
   1b1dc:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   1b1de:	4b21      	ldr	r3, [pc, #132]	; (1b264 <pvPortMalloc+0xa4>)
   1b1e0:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   1b1e2:	4b21      	ldr	r3, [pc, #132]	; (1b268 <pvPortMalloc+0xa8>)
   1b1e4:	681b      	ldr	r3, [r3, #0]
   1b1e6:	2b00      	cmp	r3, #0
   1b1e8:	d105      	bne.n	1b1f6 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1b1ea:	4b20      	ldr	r3, [pc, #128]	; (1b26c <pvPortMalloc+0xac>)
   1b1ec:	2207      	movs	r2, #7
   1b1ee:	4393      	bics	r3, r2
   1b1f0:	001a      	movs	r2, r3
   1b1f2:	4b1d      	ldr	r3, [pc, #116]	; (1b268 <pvPortMalloc+0xa8>)
   1b1f4:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1b1f6:	4b1e      	ldr	r3, [pc, #120]	; (1b270 <pvPortMalloc+0xb0>)
   1b1f8:	681a      	ldr	r2, [r3, #0]
   1b1fa:	687b      	ldr	r3, [r7, #4]
   1b1fc:	18d3      	adds	r3, r2, r3
   1b1fe:	4a1d      	ldr	r2, [pc, #116]	; (1b274 <pvPortMalloc+0xb4>)
   1b200:	4293      	cmp	r3, r2
   1b202:	d813      	bhi.n	1b22c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   1b204:	4b1a      	ldr	r3, [pc, #104]	; (1b270 <pvPortMalloc+0xb0>)
   1b206:	681a      	ldr	r2, [r3, #0]
   1b208:	687b      	ldr	r3, [r7, #4]
   1b20a:	18d2      	adds	r2, r2, r3
   1b20c:	4b18      	ldr	r3, [pc, #96]	; (1b270 <pvPortMalloc+0xb0>)
   1b20e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1b210:	429a      	cmp	r2, r3
   1b212:	d90b      	bls.n	1b22c <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   1b214:	4b14      	ldr	r3, [pc, #80]	; (1b268 <pvPortMalloc+0xa8>)
   1b216:	681a      	ldr	r2, [r3, #0]
   1b218:	4b15      	ldr	r3, [pc, #84]	; (1b270 <pvPortMalloc+0xb0>)
   1b21a:	681b      	ldr	r3, [r3, #0]
   1b21c:	18d3      	adds	r3, r2, r3
   1b21e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   1b220:	4b13      	ldr	r3, [pc, #76]	; (1b270 <pvPortMalloc+0xb0>)
   1b222:	681a      	ldr	r2, [r3, #0]
   1b224:	687b      	ldr	r3, [r7, #4]
   1b226:	18d2      	adds	r2, r2, r3
   1b228:	4b11      	ldr	r3, [pc, #68]	; (1b270 <pvPortMalloc+0xb0>)
   1b22a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   1b22c:	68fb      	ldr	r3, [r7, #12]
   1b22e:	2b00      	cmp	r3, #0
   1b230:	d006      	beq.n	1b240 <pvPortMalloc+0x80>
   1b232:	68fb      	ldr	r3, [r7, #12]
   1b234:	687a      	ldr	r2, [r7, #4]
   1b236:	0019      	movs	r1, r3
   1b238:	2094      	movs	r0, #148	; 0x94
   1b23a:	4b0f      	ldr	r3, [pc, #60]	; (1b278 <pvPortMalloc+0xb8>)
   1b23c:	4798      	blx	r3
   1b23e:	e005      	b.n	1b24c <pvPortMalloc+0x8c>
   1b240:	68fb      	ldr	r3, [r7, #12]
   1b242:	687a      	ldr	r2, [r7, #4]
   1b244:	0019      	movs	r1, r3
   1b246:	20e8      	movs	r0, #232	; 0xe8
   1b248:	4b0b      	ldr	r3, [pc, #44]	; (1b278 <pvPortMalloc+0xb8>)
   1b24a:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   1b24c:	4b0b      	ldr	r3, [pc, #44]	; (1b27c <pvPortMalloc+0xbc>)
   1b24e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   1b250:	68fb      	ldr	r3, [r7, #12]
   1b252:	2b00      	cmp	r3, #0
   1b254:	d101      	bne.n	1b25a <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   1b256:	4b0a      	ldr	r3, [pc, #40]	; (1b280 <pvPortMalloc+0xc0>)
   1b258:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   1b25a:	68fb      	ldr	r3, [r7, #12]
}
   1b25c:	0018      	movs	r0, r3
   1b25e:	46bd      	mov	sp, r7
   1b260:	b004      	add	sp, #16
   1b262:	bd80      	pop	{r7, pc}
   1b264:	0001d341 	.word	0x0001d341
   1b268:	200040dc 	.word	0x200040dc
   1b26c:	20000e18 	.word	0x20000e18
   1b270:	200040d8 	.word	0x200040d8
   1b274:	000032bf 	.word	0x000032bf
   1b278:	00019929 	.word	0x00019929
   1b27c:	0001d359 	.word	0x0001d359
   1b280:	00033aa5 	.word	0x00033aa5

0001b284 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1b284:	b580      	push	{r7, lr}
   1b286:	b082      	sub	sp, #8
   1b288:	af00      	add	r7, sp, #0
   1b28a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   1b28c:	687b      	ldr	r3, [r7, #4]
   1b28e:	2b00      	cmp	r3, #0
   1b290:	d001      	beq.n	1b296 <vPortFree+0x12>
   1b292:	b672      	cpsid	i
   1b294:	e7fe      	b.n	1b294 <vPortFree+0x10>
}
   1b296:	46c0      	nop			; (mov r8, r8)
   1b298:	46bd      	mov	sp, r7
   1b29a:	b002      	add	sp, #8
   1b29c:	bd80      	pop	{r7, pc}
	...

0001b2a0 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   1b2a0:	b580      	push	{r7, lr}
   1b2a2:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   1b2a4:	4b03      	ldr	r3, [pc, #12]	; (1b2b4 <xPortGetFreeHeapSize+0x14>)
   1b2a6:	681b      	ldr	r3, [r3, #0]
   1b2a8:	22cb      	movs	r2, #203	; 0xcb
   1b2aa:	0192      	lsls	r2, r2, #6
   1b2ac:	1ad3      	subs	r3, r2, r3
}
   1b2ae:	0018      	movs	r0, r3
   1b2b0:	46bd      	mov	sp, r7
   1b2b2:	bd80      	pop	{r7, pc}
   1b2b4:	200040d8 	.word	0x200040d8

0001b2b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1b2b8:	b580      	push	{r7, lr}
   1b2ba:	b084      	sub	sp, #16
   1b2bc:	af00      	add	r7, sp, #0
   1b2be:	6078      	str	r0, [r7, #4]
   1b2c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b2c2:	687b      	ldr	r3, [r7, #4]
   1b2c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1b2c6:	68fb      	ldr	r3, [r7, #12]
   1b2c8:	2b00      	cmp	r3, #0
   1b2ca:	d101      	bne.n	1b2d0 <xQueueGenericReset+0x18>
   1b2cc:	b672      	cpsid	i
   1b2ce:	e7fe      	b.n	1b2ce <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1b2d0:	4b23      	ldr	r3, [pc, #140]	; (1b360 <xQueueGenericReset+0xa8>)
   1b2d2:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1b2d4:	68fb      	ldr	r3, [r7, #12]
   1b2d6:	681a      	ldr	r2, [r3, #0]
   1b2d8:	68fb      	ldr	r3, [r7, #12]
   1b2da:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1b2dc:	68fb      	ldr	r3, [r7, #12]
   1b2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b2e0:	434b      	muls	r3, r1
   1b2e2:	18d2      	adds	r2, r2, r3
   1b2e4:	68fb      	ldr	r3, [r7, #12]
   1b2e6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1b2e8:	68fb      	ldr	r3, [r7, #12]
   1b2ea:	2200      	movs	r2, #0
   1b2ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1b2ee:	68fb      	ldr	r3, [r7, #12]
   1b2f0:	681a      	ldr	r2, [r3, #0]
   1b2f2:	68fb      	ldr	r3, [r7, #12]
   1b2f4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1b2f6:	68fb      	ldr	r3, [r7, #12]
   1b2f8:	681a      	ldr	r2, [r3, #0]
   1b2fa:	68fb      	ldr	r3, [r7, #12]
   1b2fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b2fe:	1e59      	subs	r1, r3, #1
   1b300:	68fb      	ldr	r3, [r7, #12]
   1b302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b304:	434b      	muls	r3, r1
   1b306:	18d2      	adds	r2, r2, r3
   1b308:	68fb      	ldr	r3, [r7, #12]
   1b30a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1b30c:	68fb      	ldr	r3, [r7, #12]
   1b30e:	2244      	movs	r2, #68	; 0x44
   1b310:	21ff      	movs	r1, #255	; 0xff
   1b312:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1b314:	68fb      	ldr	r3, [r7, #12]
   1b316:	2245      	movs	r2, #69	; 0x45
   1b318:	21ff      	movs	r1, #255	; 0xff
   1b31a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1b31c:	683b      	ldr	r3, [r7, #0]
   1b31e:	2b00      	cmp	r3, #0
   1b320:	d10d      	bne.n	1b33e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1b322:	68fb      	ldr	r3, [r7, #12]
   1b324:	691b      	ldr	r3, [r3, #16]
   1b326:	2b00      	cmp	r3, #0
   1b328:	d013      	beq.n	1b352 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1b32a:	68fb      	ldr	r3, [r7, #12]
   1b32c:	3310      	adds	r3, #16
   1b32e:	0018      	movs	r0, r3
   1b330:	4b0c      	ldr	r3, [pc, #48]	; (1b364 <xQueueGenericReset+0xac>)
   1b332:	4798      	blx	r3
   1b334:	1e03      	subs	r3, r0, #0
   1b336:	d00c      	beq.n	1b352 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1b338:	4b0b      	ldr	r3, [pc, #44]	; (1b368 <xQueueGenericReset+0xb0>)
   1b33a:	4798      	blx	r3
   1b33c:	e009      	b.n	1b352 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1b33e:	68fb      	ldr	r3, [r7, #12]
   1b340:	3310      	adds	r3, #16
   1b342:	0018      	movs	r0, r3
   1b344:	4b09      	ldr	r3, [pc, #36]	; (1b36c <xQueueGenericReset+0xb4>)
   1b346:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1b348:	68fb      	ldr	r3, [r7, #12]
   1b34a:	3324      	adds	r3, #36	; 0x24
   1b34c:	0018      	movs	r0, r3
   1b34e:	4b07      	ldr	r3, [pc, #28]	; (1b36c <xQueueGenericReset+0xb4>)
   1b350:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1b352:	4b07      	ldr	r3, [pc, #28]	; (1b370 <xQueueGenericReset+0xb8>)
   1b354:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1b356:	2301      	movs	r3, #1
}
   1b358:	0018      	movs	r0, r3
   1b35a:	46bd      	mov	sp, r7
   1b35c:	b004      	add	sp, #16
   1b35e:	bd80      	pop	{r7, pc}
   1b360:	0001b089 	.word	0x0001b089
   1b364:	0001d919 	.word	0x0001d919
   1b368:	0001b071 	.word	0x0001b071
   1b36c:	0001adf9 	.word	0x0001adf9
   1b370:	0001b0ad 	.word	0x0001b0ad

0001b374 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1b374:	b590      	push	{r4, r7, lr}
   1b376:	b08b      	sub	sp, #44	; 0x2c
   1b378:	af02      	add	r7, sp, #8
   1b37a:	60f8      	str	r0, [r7, #12]
   1b37c:	60b9      	str	r1, [r7, #8]
   1b37e:	1dfb      	adds	r3, r7, #7
   1b380:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1b382:	68fb      	ldr	r3, [r7, #12]
   1b384:	2b00      	cmp	r3, #0
   1b386:	d101      	bne.n	1b38c <xQueueGenericCreate+0x18>
   1b388:	b672      	cpsid	i
   1b38a:	e7fe      	b.n	1b38a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1b38c:	68bb      	ldr	r3, [r7, #8]
   1b38e:	2b00      	cmp	r3, #0
   1b390:	d102      	bne.n	1b398 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1b392:	2300      	movs	r3, #0
   1b394:	61fb      	str	r3, [r7, #28]
   1b396:	e003      	b.n	1b3a0 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b398:	68fb      	ldr	r3, [r7, #12]
   1b39a:	68ba      	ldr	r2, [r7, #8]
   1b39c:	4353      	muls	r3, r2
   1b39e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1b3a0:	69fb      	ldr	r3, [r7, #28]
   1b3a2:	3354      	adds	r3, #84	; 0x54
   1b3a4:	0018      	movs	r0, r3
   1b3a6:	4b19      	ldr	r3, [pc, #100]	; (1b40c <xQueueGenericCreate+0x98>)
   1b3a8:	4798      	blx	r3
   1b3aa:	0003      	movs	r3, r0
   1b3ac:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1b3ae:	69bb      	ldr	r3, [r7, #24]
   1b3b0:	2b00      	cmp	r3, #0
   1b3b2:	d00d      	beq.n	1b3d0 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1b3b4:	69bb      	ldr	r3, [r7, #24]
   1b3b6:	3354      	adds	r3, #84	; 0x54
   1b3b8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1b3ba:	1dfb      	adds	r3, r7, #7
   1b3bc:	781c      	ldrb	r4, [r3, #0]
   1b3be:	697a      	ldr	r2, [r7, #20]
   1b3c0:	68b9      	ldr	r1, [r7, #8]
   1b3c2:	68f8      	ldr	r0, [r7, #12]
   1b3c4:	69bb      	ldr	r3, [r7, #24]
   1b3c6:	9300      	str	r3, [sp, #0]
   1b3c8:	0023      	movs	r3, r4
   1b3ca:	4c11      	ldr	r4, [pc, #68]	; (1b410 <xQueueGenericCreate+0x9c>)
   1b3cc:	47a0      	blx	r4
   1b3ce:	e017      	b.n	1b400 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   1b3d0:	4b10      	ldr	r3, [pc, #64]	; (1b414 <xQueueGenericCreate+0xa0>)
   1b3d2:	4798      	blx	r3
   1b3d4:	0003      	movs	r3, r0
   1b3d6:	0018      	movs	r0, r3
   1b3d8:	4b0f      	ldr	r3, [pc, #60]	; (1b418 <xQueueGenericCreate+0xa4>)
   1b3da:	4798      	blx	r3
   1b3dc:	0003      	movs	r3, r0
   1b3de:	001a      	movs	r2, r3
   1b3e0:	4b0e      	ldr	r3, [pc, #56]	; (1b41c <xQueueGenericCreate+0xa8>)
   1b3e2:	881b      	ldrh	r3, [r3, #0]
   1b3e4:	4013      	ands	r3, r2
   1b3e6:	b29b      	uxth	r3, r3
   1b3e8:	2b00      	cmp	r3, #0
   1b3ea:	d009      	beq.n	1b400 <xQueueGenericCreate+0x8c>
   1b3ec:	1dfb      	adds	r3, r7, #7
   1b3ee:	781b      	ldrb	r3, [r3, #0]
   1b3f0:	4a0b      	ldr	r2, [pc, #44]	; (1b420 <xQueueGenericCreate+0xac>)
   1b3f2:	5cd3      	ldrb	r3, [r2, r3]
   1b3f4:	3340      	adds	r3, #64	; 0x40
   1b3f6:	b2db      	uxtb	r3, r3
   1b3f8:	2100      	movs	r1, #0
   1b3fa:	0018      	movs	r0, r3
   1b3fc:	4b09      	ldr	r3, [pc, #36]	; (1b424 <xQueueGenericCreate+0xb0>)
   1b3fe:	4798      	blx	r3
		}

		return pxNewQueue;
   1b400:	69bb      	ldr	r3, [r7, #24]
	}
   1b402:	0018      	movs	r0, r3
   1b404:	46bd      	mov	sp, r7
   1b406:	b009      	add	sp, #36	; 0x24
   1b408:	bd90      	pop	{r4, r7, pc}
   1b40a:	46c0      	nop			; (mov r8, r8)
   1b40c:	0001b1c1 	.word	0x0001b1c1
   1b410:	0001b429 	.word	0x0001b429
   1b414:	0001931d 	.word	0x0001931d
   1b418:	00019081 	.word	0x00019081
   1b41c:	20000110 	.word	0x20000110
   1b420:	20000104 	.word	0x20000104
   1b424:	00019d81 	.word	0x00019d81

0001b428 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1b428:	b5b0      	push	{r4, r5, r7, lr}
   1b42a:	b084      	sub	sp, #16
   1b42c:	af00      	add	r7, sp, #0
   1b42e:	60f8      	str	r0, [r7, #12]
   1b430:	60b9      	str	r1, [r7, #8]
   1b432:	607a      	str	r2, [r7, #4]
   1b434:	001a      	movs	r2, r3
   1b436:	1cfb      	adds	r3, r7, #3
   1b438:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1b43a:	68bb      	ldr	r3, [r7, #8]
   1b43c:	2b00      	cmp	r3, #0
   1b43e:	d103      	bne.n	1b448 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1b440:	6a3b      	ldr	r3, [r7, #32]
   1b442:	6a3a      	ldr	r2, [r7, #32]
   1b444:	601a      	str	r2, [r3, #0]
   1b446:	e002      	b.n	1b44e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1b448:	6a3b      	ldr	r3, [r7, #32]
   1b44a:	687a      	ldr	r2, [r7, #4]
   1b44c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1b44e:	6a3b      	ldr	r3, [r7, #32]
   1b450:	68fa      	ldr	r2, [r7, #12]
   1b452:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1b454:	6a3b      	ldr	r3, [r7, #32]
   1b456:	68ba      	ldr	r2, [r7, #8]
   1b458:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1b45a:	6a3b      	ldr	r3, [r7, #32]
   1b45c:	2101      	movs	r1, #1
   1b45e:	0018      	movs	r0, r3
   1b460:	4b41      	ldr	r3, [pc, #260]	; (1b568 <prvInitialiseNewQueue+0x140>)
   1b462:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   1b464:	6a3b      	ldr	r3, [r7, #32]
   1b466:	1cfa      	adds	r2, r7, #3
   1b468:	2150      	movs	r1, #80	; 0x50
   1b46a:	7812      	ldrb	r2, [r2, #0]
   1b46c:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1b46e:	6a3b      	ldr	r3, [r7, #32]
   1b470:	2200      	movs	r2, #0
   1b472:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   1b474:	6a3b      	ldr	r3, [r7, #32]
   1b476:	0018      	movs	r0, r3
   1b478:	4b3c      	ldr	r3, [pc, #240]	; (1b56c <prvInitialiseNewQueue+0x144>)
   1b47a:	4798      	blx	r3
   1b47c:	0003      	movs	r3, r0
   1b47e:	001a      	movs	r2, r3
   1b480:	4b3b      	ldr	r3, [pc, #236]	; (1b570 <prvInitialiseNewQueue+0x148>)
   1b482:	5c9b      	ldrb	r3, [r3, r2]
   1b484:	0018      	movs	r0, r3
   1b486:	4b3b      	ldr	r3, [pc, #236]	; (1b574 <prvInitialiseNewQueue+0x14c>)
   1b488:	4798      	blx	r3
   1b48a:	0003      	movs	r3, r0
   1b48c:	b29a      	uxth	r2, r3
   1b48e:	6a3b      	ldr	r3, [r7, #32]
   1b490:	0011      	movs	r1, r2
   1b492:	0018      	movs	r0, r3
   1b494:	4b38      	ldr	r3, [pc, #224]	; (1b578 <prvInitialiseNewQueue+0x150>)
   1b496:	4798      	blx	r3
   1b498:	4b38      	ldr	r3, [pc, #224]	; (1b57c <prvInitialiseNewQueue+0x154>)
   1b49a:	881a      	ldrh	r2, [r3, #0]
   1b49c:	6a3b      	ldr	r3, [r7, #32]
   1b49e:	0011      	movs	r1, r2
   1b4a0:	0018      	movs	r0, r3
   1b4a2:	4b37      	ldr	r3, [pc, #220]	; (1b580 <prvInitialiseNewQueue+0x158>)
   1b4a4:	4798      	blx	r3
   1b4a6:	6a3b      	ldr	r3, [r7, #32]
   1b4a8:	0018      	movs	r0, r3
   1b4aa:	4b30      	ldr	r3, [pc, #192]	; (1b56c <prvInitialiseNewQueue+0x144>)
   1b4ac:	4798      	blx	r3
   1b4ae:	0003      	movs	r3, r0
   1b4b0:	001a      	movs	r2, r3
   1b4b2:	4b2f      	ldr	r3, [pc, #188]	; (1b570 <prvInitialiseNewQueue+0x148>)
   1b4b4:	5c9c      	ldrb	r4, [r3, r2]
   1b4b6:	6a3b      	ldr	r3, [r7, #32]
   1b4b8:	0018      	movs	r0, r3
   1b4ba:	4b32      	ldr	r3, [pc, #200]	; (1b584 <prvInitialiseNewQueue+0x15c>)
   1b4bc:	4798      	blx	r3
   1b4be:	0003      	movs	r3, r0
   1b4c0:	b2db      	uxtb	r3, r3
   1b4c2:	0019      	movs	r1, r3
   1b4c4:	0020      	movs	r0, r4
   1b4c6:	4b30      	ldr	r3, [pc, #192]	; (1b588 <prvInitialiseNewQueue+0x160>)
   1b4c8:	4798      	blx	r3
   1b4ca:	4b30      	ldr	r3, [pc, #192]	; (1b58c <prvInitialiseNewQueue+0x164>)
   1b4cc:	4798      	blx	r3
   1b4ce:	0003      	movs	r3, r0
   1b4d0:	0018      	movs	r0, r3
   1b4d2:	4b2f      	ldr	r3, [pc, #188]	; (1b590 <prvInitialiseNewQueue+0x168>)
   1b4d4:	4798      	blx	r3
   1b4d6:	0003      	movs	r3, r0
   1b4d8:	001a      	movs	r2, r3
   1b4da:	4b2e      	ldr	r3, [pc, #184]	; (1b594 <prvInitialiseNewQueue+0x16c>)
   1b4dc:	881b      	ldrh	r3, [r3, #0]
   1b4de:	4013      	ands	r3, r2
   1b4e0:	b29b      	uxth	r3, r3
   1b4e2:	2b00      	cmp	r3, #0
   1b4e4:	d029      	beq.n	1b53a <prvInitialiseNewQueue+0x112>
   1b4e6:	6a3b      	ldr	r3, [r7, #32]
   1b4e8:	0018      	movs	r0, r3
   1b4ea:	4b2b      	ldr	r3, [pc, #172]	; (1b598 <prvInitialiseNewQueue+0x170>)
   1b4ec:	4798      	blx	r3
   1b4ee:	0003      	movs	r3, r0
   1b4f0:	001a      	movs	r2, r3
   1b4f2:	4b28      	ldr	r3, [pc, #160]	; (1b594 <prvInitialiseNewQueue+0x16c>)
   1b4f4:	881b      	ldrh	r3, [r3, #0]
   1b4f6:	4013      	ands	r3, r2
   1b4f8:	b29b      	uxth	r3, r3
   1b4fa:	2b00      	cmp	r3, #0
   1b4fc:	d01d      	beq.n	1b53a <prvInitialiseNewQueue+0x112>
   1b4fe:	6a3b      	ldr	r3, [r7, #32]
   1b500:	0018      	movs	r0, r3
   1b502:	4b1a      	ldr	r3, [pc, #104]	; (1b56c <prvInitialiseNewQueue+0x144>)
   1b504:	4798      	blx	r3
   1b506:	0003      	movs	r3, r0
   1b508:	001a      	movs	r2, r3
   1b50a:	4b19      	ldr	r3, [pc, #100]	; (1b570 <prvInitialiseNewQueue+0x148>)
   1b50c:	5c9b      	ldrb	r3, [r3, r2]
   1b50e:	3318      	adds	r3, #24
   1b510:	b2db      	uxtb	r3, r3
   1b512:	001d      	movs	r5, r3
   1b514:	6a3b      	ldr	r3, [r7, #32]
   1b516:	0018      	movs	r0, r3
   1b518:	4b14      	ldr	r3, [pc, #80]	; (1b56c <prvInitialiseNewQueue+0x144>)
   1b51a:	4798      	blx	r3
   1b51c:	0003      	movs	r3, r0
   1b51e:	001a      	movs	r2, r3
   1b520:	4b13      	ldr	r3, [pc, #76]	; (1b570 <prvInitialiseNewQueue+0x148>)
   1b522:	5c9c      	ldrb	r4, [r3, r2]
   1b524:	6a3b      	ldr	r3, [r7, #32]
   1b526:	0018      	movs	r0, r3
   1b528:	4b16      	ldr	r3, [pc, #88]	; (1b584 <prvInitialiseNewQueue+0x15c>)
   1b52a:	4798      	blx	r3
   1b52c:	0003      	movs	r3, r0
   1b52e:	b2db      	uxtb	r3, r3
   1b530:	001a      	movs	r2, r3
   1b532:	0021      	movs	r1, r4
   1b534:	0028      	movs	r0, r5
   1b536:	4b19      	ldr	r3, [pc, #100]	; (1b59c <prvInitialiseNewQueue+0x174>)
   1b538:	4798      	blx	r3
   1b53a:	6a3b      	ldr	r3, [r7, #32]
   1b53c:	0018      	movs	r0, r3
   1b53e:	4b0b      	ldr	r3, [pc, #44]	; (1b56c <prvInitialiseNewQueue+0x144>)
   1b540:	4798      	blx	r3
   1b542:	0003      	movs	r3, r0
   1b544:	001a      	movs	r2, r3
   1b546:	4b0a      	ldr	r3, [pc, #40]	; (1b570 <prvInitialiseNewQueue+0x148>)
   1b548:	5c9c      	ldrb	r4, [r3, r2]
   1b54a:	6a3b      	ldr	r3, [r7, #32]
   1b54c:	0018      	movs	r0, r3
   1b54e:	4b0d      	ldr	r3, [pc, #52]	; (1b584 <prvInitialiseNewQueue+0x15c>)
   1b550:	4798      	blx	r3
   1b552:	0003      	movs	r3, r0
   1b554:	b2db      	uxtb	r3, r3
   1b556:	2200      	movs	r2, #0
   1b558:	0019      	movs	r1, r3
   1b55a:	0020      	movs	r0, r4
   1b55c:	4b10      	ldr	r3, [pc, #64]	; (1b5a0 <prvInitialiseNewQueue+0x178>)
   1b55e:	4798      	blx	r3
}
   1b560:	46c0      	nop			; (mov r8, r8)
   1b562:	46bd      	mov	sp, r7
   1b564:	b004      	add	sp, #16
   1b566:	bdb0      	pop	{r4, r5, r7, pc}
   1b568:	0001b2b9 	.word	0x0001b2b9
   1b56c:	00019041 	.word	0x00019041
   1b570:	20000104 	.word	0x20000104
   1b574:	0001a601 	.word	0x0001a601
   1b578:	00019165 	.word	0x00019165
   1b57c:	20000112 	.word	0x20000112
   1b580:	000191a1 	.word	0x000191a1
   1b584:	00019121 	.word	0x00019121
   1b588:	0001a799 	.word	0x0001a799
   1b58c:	0001931d 	.word	0x0001931d
   1b590:	00019081 	.word	0x00019081
   1b594:	20000110 	.word	0x20000110
   1b598:	00019141 	.word	0x00019141
   1b59c:	00019a79 	.word	0x00019a79
   1b5a0:	0001a0d5 	.word	0x0001a0d5

0001b5a4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   1b5a4:	b590      	push	{r4, r7, lr}
   1b5a6:	b083      	sub	sp, #12
   1b5a8:	af00      	add	r7, sp, #0
   1b5aa:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   1b5ac:	687b      	ldr	r3, [r7, #4]
   1b5ae:	2b00      	cmp	r3, #0
   1b5b0:	d00e      	beq.n	1b5d0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   1b5b2:	687b      	ldr	r3, [r7, #4]
   1b5b4:	2200      	movs	r2, #0
   1b5b6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   1b5b8:	687b      	ldr	r3, [r7, #4]
   1b5ba:	2200      	movs	r2, #0
   1b5bc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1b5be:	687b      	ldr	r3, [r7, #4]
   1b5c0:	2200      	movs	r2, #0
   1b5c2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   1b5c4:	6878      	ldr	r0, [r7, #4]
   1b5c6:	2300      	movs	r3, #0
   1b5c8:	2200      	movs	r2, #0
   1b5ca:	2100      	movs	r1, #0
   1b5cc:	4c02      	ldr	r4, [pc, #8]	; (1b5d8 <prvInitialiseMutex+0x34>)
   1b5ce:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   1b5d0:	46c0      	nop			; (mov r8, r8)
   1b5d2:	46bd      	mov	sp, r7
   1b5d4:	b003      	add	sp, #12
   1b5d6:	bd90      	pop	{r4, r7, pc}
   1b5d8:	0001b61d 	.word	0x0001b61d

0001b5dc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   1b5dc:	b580      	push	{r7, lr}
   1b5de:	b086      	sub	sp, #24
   1b5e0:	af00      	add	r7, sp, #0
   1b5e2:	0002      	movs	r2, r0
   1b5e4:	1dfb      	adds	r3, r7, #7
   1b5e6:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   1b5e8:	2301      	movs	r3, #1
   1b5ea:	617b      	str	r3, [r7, #20]
   1b5ec:	2300      	movs	r3, #0
   1b5ee:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   1b5f0:	1dfb      	adds	r3, r7, #7
   1b5f2:	781a      	ldrb	r2, [r3, #0]
   1b5f4:	6939      	ldr	r1, [r7, #16]
   1b5f6:	697b      	ldr	r3, [r7, #20]
   1b5f8:	0018      	movs	r0, r3
   1b5fa:	4b06      	ldr	r3, [pc, #24]	; (1b614 <xQueueCreateMutex+0x38>)
   1b5fc:	4798      	blx	r3
   1b5fe:	0003      	movs	r3, r0
   1b600:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   1b602:	68fb      	ldr	r3, [r7, #12]
   1b604:	0018      	movs	r0, r3
   1b606:	4b04      	ldr	r3, [pc, #16]	; (1b618 <xQueueCreateMutex+0x3c>)
   1b608:	4798      	blx	r3

		return pxNewQueue;
   1b60a:	68fb      	ldr	r3, [r7, #12]
	}
   1b60c:	0018      	movs	r0, r3
   1b60e:	46bd      	mov	sp, r7
   1b610:	b006      	add	sp, #24
   1b612:	bd80      	pop	{r7, pc}
   1b614:	0001b375 	.word	0x0001b375
   1b618:	0001b5a5 	.word	0x0001b5a5

0001b61c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1b61c:	b5b0      	push	{r4, r5, r7, lr}
   1b61e:	b08a      	sub	sp, #40	; 0x28
   1b620:	af00      	add	r7, sp, #0
   1b622:	60f8      	str	r0, [r7, #12]
   1b624:	60b9      	str	r1, [r7, #8]
   1b626:	607a      	str	r2, [r7, #4]
   1b628:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1b62a:	2300      	movs	r3, #0
   1b62c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b62e:	68fb      	ldr	r3, [r7, #12]
   1b630:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1b632:	6a3b      	ldr	r3, [r7, #32]
   1b634:	2b00      	cmp	r3, #0
   1b636:	d101      	bne.n	1b63c <xQueueGenericSend+0x20>
   1b638:	b672      	cpsid	i
   1b63a:	e7fe      	b.n	1b63a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1b63c:	68bb      	ldr	r3, [r7, #8]
   1b63e:	2b00      	cmp	r3, #0
   1b640:	d103      	bne.n	1b64a <xQueueGenericSend+0x2e>
   1b642:	6a3b      	ldr	r3, [r7, #32]
   1b644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b646:	2b00      	cmp	r3, #0
   1b648:	d101      	bne.n	1b64e <xQueueGenericSend+0x32>
   1b64a:	2301      	movs	r3, #1
   1b64c:	e000      	b.n	1b650 <xQueueGenericSend+0x34>
   1b64e:	2300      	movs	r3, #0
   1b650:	2b00      	cmp	r3, #0
   1b652:	d101      	bne.n	1b658 <xQueueGenericSend+0x3c>
   1b654:	b672      	cpsid	i
   1b656:	e7fe      	b.n	1b656 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1b658:	683b      	ldr	r3, [r7, #0]
   1b65a:	2b02      	cmp	r3, #2
   1b65c:	d103      	bne.n	1b666 <xQueueGenericSend+0x4a>
   1b65e:	6a3b      	ldr	r3, [r7, #32]
   1b660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b662:	2b01      	cmp	r3, #1
   1b664:	d101      	bne.n	1b66a <xQueueGenericSend+0x4e>
   1b666:	2301      	movs	r3, #1
   1b668:	e000      	b.n	1b66c <xQueueGenericSend+0x50>
   1b66a:	2300      	movs	r3, #0
   1b66c:	2b00      	cmp	r3, #0
   1b66e:	d101      	bne.n	1b674 <xQueueGenericSend+0x58>
   1b670:	b672      	cpsid	i
   1b672:	e7fe      	b.n	1b672 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1b674:	4bbc      	ldr	r3, [pc, #752]	; (1b968 <xQueueGenericSend+0x34c>)
   1b676:	4798      	blx	r3
   1b678:	1e03      	subs	r3, r0, #0
   1b67a:	d102      	bne.n	1b682 <xQueueGenericSend+0x66>
   1b67c:	687b      	ldr	r3, [r7, #4]
   1b67e:	2b00      	cmp	r3, #0
   1b680:	d101      	bne.n	1b686 <xQueueGenericSend+0x6a>
   1b682:	2301      	movs	r3, #1
   1b684:	e000      	b.n	1b688 <xQueueGenericSend+0x6c>
   1b686:	2300      	movs	r3, #0
   1b688:	2b00      	cmp	r3, #0
   1b68a:	d101      	bne.n	1b690 <xQueueGenericSend+0x74>
   1b68c:	b672      	cpsid	i
   1b68e:	e7fe      	b.n	1b68e <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1b690:	4bb6      	ldr	r3, [pc, #728]	; (1b96c <xQueueGenericSend+0x350>)
   1b692:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1b694:	6a3b      	ldr	r3, [r7, #32]
   1b696:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b698:	6a3b      	ldr	r3, [r7, #32]
   1b69a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b69c:	429a      	cmp	r2, r3
   1b69e:	d303      	bcc.n	1b6a8 <xQueueGenericSend+0x8c>
   1b6a0:	683b      	ldr	r3, [r7, #0]
   1b6a2:	2b02      	cmp	r3, #2
   1b6a4:	d000      	beq.n	1b6a8 <xQueueGenericSend+0x8c>
   1b6a6:	e08e      	b.n	1b7c6 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   1b6a8:	4bb1      	ldr	r3, [pc, #708]	; (1b970 <xQueueGenericSend+0x354>)
   1b6aa:	4798      	blx	r3
   1b6ac:	0003      	movs	r3, r0
   1b6ae:	0018      	movs	r0, r3
   1b6b0:	4bb0      	ldr	r3, [pc, #704]	; (1b974 <xQueueGenericSend+0x358>)
   1b6b2:	4798      	blx	r3
   1b6b4:	0003      	movs	r3, r0
   1b6b6:	001a      	movs	r2, r3
   1b6b8:	4baf      	ldr	r3, [pc, #700]	; (1b978 <xQueueGenericSend+0x35c>)
   1b6ba:	881b      	ldrh	r3, [r3, #0]
   1b6bc:	4013      	ands	r3, r2
   1b6be:	b29b      	uxth	r3, r3
   1b6c0:	2b00      	cmp	r3, #0
   1b6c2:	d02e      	beq.n	1b722 <xQueueGenericSend+0x106>
   1b6c4:	6a3b      	ldr	r3, [r7, #32]
   1b6c6:	0018      	movs	r0, r3
   1b6c8:	4bac      	ldr	r3, [pc, #688]	; (1b97c <xQueueGenericSend+0x360>)
   1b6ca:	4798      	blx	r3
   1b6cc:	0003      	movs	r3, r0
   1b6ce:	001a      	movs	r2, r3
   1b6d0:	4ba9      	ldr	r3, [pc, #676]	; (1b978 <xQueueGenericSend+0x35c>)
   1b6d2:	881b      	ldrh	r3, [r3, #0]
   1b6d4:	4013      	ands	r3, r2
   1b6d6:	b29b      	uxth	r3, r3
   1b6d8:	2b00      	cmp	r3, #0
   1b6da:	d022      	beq.n	1b722 <xQueueGenericSend+0x106>
   1b6dc:	683b      	ldr	r3, [r7, #0]
   1b6de:	2b00      	cmp	r3, #0
   1b6e0:	d10b      	bne.n	1b6fa <xQueueGenericSend+0xde>
   1b6e2:	6a3b      	ldr	r3, [r7, #32]
   1b6e4:	0018      	movs	r0, r3
   1b6e6:	4ba6      	ldr	r3, [pc, #664]	; (1b980 <xQueueGenericSend+0x364>)
   1b6e8:	4798      	blx	r3
   1b6ea:	0003      	movs	r3, r0
   1b6ec:	001a      	movs	r2, r3
   1b6ee:	4ba5      	ldr	r3, [pc, #660]	; (1b984 <xQueueGenericSend+0x368>)
   1b6f0:	5c9b      	ldrb	r3, [r3, r2]
   1b6f2:	3320      	adds	r3, #32
   1b6f4:	b2db      	uxtb	r3, r3
   1b6f6:	001d      	movs	r5, r3
   1b6f8:	e000      	b.n	1b6fc <xQueueGenericSend+0xe0>
   1b6fa:	2525      	movs	r5, #37	; 0x25
   1b6fc:	6a3b      	ldr	r3, [r7, #32]
   1b6fe:	0018      	movs	r0, r3
   1b700:	4b9f      	ldr	r3, [pc, #636]	; (1b980 <xQueueGenericSend+0x364>)
   1b702:	4798      	blx	r3
   1b704:	0003      	movs	r3, r0
   1b706:	001a      	movs	r2, r3
   1b708:	4b9e      	ldr	r3, [pc, #632]	; (1b984 <xQueueGenericSend+0x368>)
   1b70a:	5c9c      	ldrb	r4, [r3, r2]
   1b70c:	6a3b      	ldr	r3, [r7, #32]
   1b70e:	0018      	movs	r0, r3
   1b710:	4b9d      	ldr	r3, [pc, #628]	; (1b988 <xQueueGenericSend+0x36c>)
   1b712:	4798      	blx	r3
   1b714:	0003      	movs	r3, r0
   1b716:	b2db      	uxtb	r3, r3
   1b718:	001a      	movs	r2, r3
   1b71a:	0021      	movs	r1, r4
   1b71c:	0028      	movs	r0, r5
   1b71e:	4b9b      	ldr	r3, [pc, #620]	; (1b98c <xQueueGenericSend+0x370>)
   1b720:	4798      	blx	r3
   1b722:	6a3b      	ldr	r3, [r7, #32]
   1b724:	0018      	movs	r0, r3
   1b726:	4b96      	ldr	r3, [pc, #600]	; (1b980 <xQueueGenericSend+0x364>)
   1b728:	4798      	blx	r3
   1b72a:	0003      	movs	r3, r0
   1b72c:	001a      	movs	r2, r3
   1b72e:	4b95      	ldr	r3, [pc, #596]	; (1b984 <xQueueGenericSend+0x368>)
   1b730:	5c9c      	ldrb	r4, [r3, r2]
   1b732:	6a3b      	ldr	r3, [r7, #32]
   1b734:	0018      	movs	r0, r3
   1b736:	4b94      	ldr	r3, [pc, #592]	; (1b988 <xQueueGenericSend+0x36c>)
   1b738:	4798      	blx	r3
   1b73a:	0003      	movs	r3, r0
   1b73c:	b2dd      	uxtb	r5, r3
   1b73e:	6a3b      	ldr	r3, [r7, #32]
   1b740:	0018      	movs	r0, r3
   1b742:	4b8f      	ldr	r3, [pc, #572]	; (1b980 <xQueueGenericSend+0x364>)
   1b744:	4798      	blx	r3
   1b746:	0003      	movs	r3, r0
   1b748:	001a      	movs	r2, r3
   1b74a:	4b8e      	ldr	r3, [pc, #568]	; (1b984 <xQueueGenericSend+0x368>)
   1b74c:	5c9b      	ldrb	r3, [r3, r2]
   1b74e:	2b02      	cmp	r3, #2
   1b750:	d005      	beq.n	1b75e <xQueueGenericSend+0x142>
   1b752:	6a3b      	ldr	r3, [r7, #32]
   1b754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b756:	b2db      	uxtb	r3, r3
   1b758:	3301      	adds	r3, #1
   1b75a:	b2db      	uxtb	r3, r3
   1b75c:	e000      	b.n	1b760 <xQueueGenericSend+0x144>
   1b75e:	2300      	movs	r3, #0
   1b760:	001a      	movs	r2, r3
   1b762:	0029      	movs	r1, r5
   1b764:	0020      	movs	r0, r4
   1b766:	4b8a      	ldr	r3, [pc, #552]	; (1b990 <xQueueGenericSend+0x374>)
   1b768:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1b76a:	683a      	ldr	r2, [r7, #0]
   1b76c:	68b9      	ldr	r1, [r7, #8]
   1b76e:	6a3b      	ldr	r3, [r7, #32]
   1b770:	0018      	movs	r0, r3
   1b772:	4b88      	ldr	r3, [pc, #544]	; (1b994 <xQueueGenericSend+0x378>)
   1b774:	4798      	blx	r3
   1b776:	0003      	movs	r3, r0
   1b778:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1b77a:	6a3b      	ldr	r3, [r7, #32]
   1b77c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b77e:	2b00      	cmp	r3, #0
   1b780:	d00a      	beq.n	1b798 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1b782:	683a      	ldr	r2, [r7, #0]
   1b784:	6a3b      	ldr	r3, [r7, #32]
   1b786:	0011      	movs	r1, r2
   1b788:	0018      	movs	r0, r3
   1b78a:	4b83      	ldr	r3, [pc, #524]	; (1b998 <xQueueGenericSend+0x37c>)
   1b78c:	4798      	blx	r3
   1b78e:	1e03      	subs	r3, r0, #0
   1b790:	d015      	beq.n	1b7be <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1b792:	4b82      	ldr	r3, [pc, #520]	; (1b99c <xQueueGenericSend+0x380>)
   1b794:	4798      	blx	r3
   1b796:	e012      	b.n	1b7be <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b798:	6a3b      	ldr	r3, [r7, #32]
   1b79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b79c:	2b00      	cmp	r3, #0
   1b79e:	d009      	beq.n	1b7b4 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b7a0:	6a3b      	ldr	r3, [r7, #32]
   1b7a2:	3324      	adds	r3, #36	; 0x24
   1b7a4:	0018      	movs	r0, r3
   1b7a6:	4b7e      	ldr	r3, [pc, #504]	; (1b9a0 <xQueueGenericSend+0x384>)
   1b7a8:	4798      	blx	r3
   1b7aa:	1e03      	subs	r3, r0, #0
   1b7ac:	d007      	beq.n	1b7be <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1b7ae:	4b7b      	ldr	r3, [pc, #492]	; (1b99c <xQueueGenericSend+0x380>)
   1b7b0:	4798      	blx	r3
   1b7b2:	e004      	b.n	1b7be <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1b7b4:	69fb      	ldr	r3, [r7, #28]
   1b7b6:	2b00      	cmp	r3, #0
   1b7b8:	d001      	beq.n	1b7be <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1b7ba:	4b78      	ldr	r3, [pc, #480]	; (1b99c <xQueueGenericSend+0x380>)
   1b7bc:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1b7be:	4b79      	ldr	r3, [pc, #484]	; (1b9a4 <xQueueGenericSend+0x388>)
   1b7c0:	4798      	blx	r3
				return pdPASS;
   1b7c2:	2301      	movs	r3, #1
   1b7c4:	e142      	b.n	1ba4c <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1b7c6:	687b      	ldr	r3, [r7, #4]
   1b7c8:	2b00      	cmp	r3, #0
   1b7ca:	d140      	bne.n	1b84e <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1b7cc:	4b75      	ldr	r3, [pc, #468]	; (1b9a4 <xQueueGenericSend+0x388>)
   1b7ce:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   1b7d0:	4b67      	ldr	r3, [pc, #412]	; (1b970 <xQueueGenericSend+0x354>)
   1b7d2:	4798      	blx	r3
   1b7d4:	0003      	movs	r3, r0
   1b7d6:	0018      	movs	r0, r3
   1b7d8:	4b66      	ldr	r3, [pc, #408]	; (1b974 <xQueueGenericSend+0x358>)
   1b7da:	4798      	blx	r3
   1b7dc:	0003      	movs	r3, r0
   1b7de:	001a      	movs	r2, r3
   1b7e0:	4b65      	ldr	r3, [pc, #404]	; (1b978 <xQueueGenericSend+0x35c>)
   1b7e2:	881b      	ldrh	r3, [r3, #0]
   1b7e4:	4013      	ands	r3, r2
   1b7e6:	b29b      	uxth	r3, r3
   1b7e8:	2b00      	cmp	r3, #0
   1b7ea:	d02e      	beq.n	1b84a <xQueueGenericSend+0x22e>
   1b7ec:	6a3b      	ldr	r3, [r7, #32]
   1b7ee:	0018      	movs	r0, r3
   1b7f0:	4b62      	ldr	r3, [pc, #392]	; (1b97c <xQueueGenericSend+0x360>)
   1b7f2:	4798      	blx	r3
   1b7f4:	0003      	movs	r3, r0
   1b7f6:	001a      	movs	r2, r3
   1b7f8:	4b5f      	ldr	r3, [pc, #380]	; (1b978 <xQueueGenericSend+0x35c>)
   1b7fa:	881b      	ldrh	r3, [r3, #0]
   1b7fc:	4013      	ands	r3, r2
   1b7fe:	b29b      	uxth	r3, r3
   1b800:	2b00      	cmp	r3, #0
   1b802:	d022      	beq.n	1b84a <xQueueGenericSend+0x22e>
   1b804:	683b      	ldr	r3, [r7, #0]
   1b806:	2b00      	cmp	r3, #0
   1b808:	d10b      	bne.n	1b822 <xQueueGenericSend+0x206>
   1b80a:	6a3b      	ldr	r3, [r7, #32]
   1b80c:	0018      	movs	r0, r3
   1b80e:	4b5c      	ldr	r3, [pc, #368]	; (1b980 <xQueueGenericSend+0x364>)
   1b810:	4798      	blx	r3
   1b812:	0003      	movs	r3, r0
   1b814:	001a      	movs	r2, r3
   1b816:	4b5b      	ldr	r3, [pc, #364]	; (1b984 <xQueueGenericSend+0x368>)
   1b818:	5c9b      	ldrb	r3, [r3, r2]
   1b81a:	3348      	adds	r3, #72	; 0x48
   1b81c:	b2db      	uxtb	r3, r3
   1b81e:	001d      	movs	r5, r3
   1b820:	e000      	b.n	1b824 <xQueueGenericSend+0x208>
   1b822:	254d      	movs	r5, #77	; 0x4d
   1b824:	6a3b      	ldr	r3, [r7, #32]
   1b826:	0018      	movs	r0, r3
   1b828:	4b55      	ldr	r3, [pc, #340]	; (1b980 <xQueueGenericSend+0x364>)
   1b82a:	4798      	blx	r3
   1b82c:	0003      	movs	r3, r0
   1b82e:	001a      	movs	r2, r3
   1b830:	4b54      	ldr	r3, [pc, #336]	; (1b984 <xQueueGenericSend+0x368>)
   1b832:	5c9c      	ldrb	r4, [r3, r2]
   1b834:	6a3b      	ldr	r3, [r7, #32]
   1b836:	0018      	movs	r0, r3
   1b838:	4b53      	ldr	r3, [pc, #332]	; (1b988 <xQueueGenericSend+0x36c>)
   1b83a:	4798      	blx	r3
   1b83c:	0003      	movs	r3, r0
   1b83e:	b2db      	uxtb	r3, r3
   1b840:	001a      	movs	r2, r3
   1b842:	0021      	movs	r1, r4
   1b844:	0028      	movs	r0, r5
   1b846:	4b51      	ldr	r3, [pc, #324]	; (1b98c <xQueueGenericSend+0x370>)
   1b848:	4798      	blx	r3
					return errQUEUE_FULL;
   1b84a:	2300      	movs	r3, #0
   1b84c:	e0fe      	b.n	1ba4c <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1b84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b850:	2b00      	cmp	r3, #0
   1b852:	d106      	bne.n	1b862 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1b854:	2314      	movs	r3, #20
   1b856:	18fb      	adds	r3, r7, r3
   1b858:	0018      	movs	r0, r3
   1b85a:	4b53      	ldr	r3, [pc, #332]	; (1b9a8 <xQueueGenericSend+0x38c>)
   1b85c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1b85e:	2301      	movs	r3, #1
   1b860:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1b862:	4b50      	ldr	r3, [pc, #320]	; (1b9a4 <xQueueGenericSend+0x388>)
   1b864:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1b866:	4b51      	ldr	r3, [pc, #324]	; (1b9ac <xQueueGenericSend+0x390>)
   1b868:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1b86a:	4b40      	ldr	r3, [pc, #256]	; (1b96c <xQueueGenericSend+0x350>)
   1b86c:	4798      	blx	r3
   1b86e:	6a3b      	ldr	r3, [r7, #32]
   1b870:	2244      	movs	r2, #68	; 0x44
   1b872:	5c9b      	ldrb	r3, [r3, r2]
   1b874:	b25b      	sxtb	r3, r3
   1b876:	3301      	adds	r3, #1
   1b878:	d103      	bne.n	1b882 <xQueueGenericSend+0x266>
   1b87a:	6a3b      	ldr	r3, [r7, #32]
   1b87c:	2244      	movs	r2, #68	; 0x44
   1b87e:	2100      	movs	r1, #0
   1b880:	5499      	strb	r1, [r3, r2]
   1b882:	6a3b      	ldr	r3, [r7, #32]
   1b884:	2245      	movs	r2, #69	; 0x45
   1b886:	5c9b      	ldrb	r3, [r3, r2]
   1b888:	b25b      	sxtb	r3, r3
   1b88a:	3301      	adds	r3, #1
   1b88c:	d103      	bne.n	1b896 <xQueueGenericSend+0x27a>
   1b88e:	6a3b      	ldr	r3, [r7, #32]
   1b890:	2245      	movs	r2, #69	; 0x45
   1b892:	2100      	movs	r1, #0
   1b894:	5499      	strb	r1, [r3, r2]
   1b896:	4b43      	ldr	r3, [pc, #268]	; (1b9a4 <xQueueGenericSend+0x388>)
   1b898:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1b89a:	1d3a      	adds	r2, r7, #4
   1b89c:	2314      	movs	r3, #20
   1b89e:	18fb      	adds	r3, r7, r3
   1b8a0:	0011      	movs	r1, r2
   1b8a2:	0018      	movs	r0, r3
   1b8a4:	4b42      	ldr	r3, [pc, #264]	; (1b9b0 <xQueueGenericSend+0x394>)
   1b8a6:	4798      	blx	r3
   1b8a8:	1e03      	subs	r3, r0, #0
   1b8aa:	d000      	beq.n	1b8ae <xQueueGenericSend+0x292>
   1b8ac:	e08a      	b.n	1b9c4 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1b8ae:	6a3b      	ldr	r3, [r7, #32]
   1b8b0:	0018      	movs	r0, r3
   1b8b2:	4b40      	ldr	r3, [pc, #256]	; (1b9b4 <xQueueGenericSend+0x398>)
   1b8b4:	4798      	blx	r3
   1b8b6:	1e03      	subs	r3, r0, #0
   1b8b8:	d04f      	beq.n	1b95a <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1b8ba:	4b2d      	ldr	r3, [pc, #180]	; (1b970 <xQueueGenericSend+0x354>)
   1b8bc:	4798      	blx	r3
   1b8be:	0003      	movs	r3, r0
   1b8c0:	0018      	movs	r0, r3
   1b8c2:	4b2c      	ldr	r3, [pc, #176]	; (1b974 <xQueueGenericSend+0x358>)
   1b8c4:	4798      	blx	r3
   1b8c6:	0003      	movs	r3, r0
   1b8c8:	001a      	movs	r2, r3
   1b8ca:	4b2b      	ldr	r3, [pc, #172]	; (1b978 <xQueueGenericSend+0x35c>)
   1b8cc:	881b      	ldrh	r3, [r3, #0]
   1b8ce:	4013      	ands	r3, r2
   1b8d0:	b29b      	uxth	r3, r3
   1b8d2:	2b00      	cmp	r3, #0
   1b8d4:	d02e      	beq.n	1b934 <xQueueGenericSend+0x318>
   1b8d6:	6a3b      	ldr	r3, [r7, #32]
   1b8d8:	0018      	movs	r0, r3
   1b8da:	4b28      	ldr	r3, [pc, #160]	; (1b97c <xQueueGenericSend+0x360>)
   1b8dc:	4798      	blx	r3
   1b8de:	0003      	movs	r3, r0
   1b8e0:	001a      	movs	r2, r3
   1b8e2:	4b25      	ldr	r3, [pc, #148]	; (1b978 <xQueueGenericSend+0x35c>)
   1b8e4:	881b      	ldrh	r3, [r3, #0]
   1b8e6:	4013      	ands	r3, r2
   1b8e8:	b29b      	uxth	r3, r3
   1b8ea:	2b00      	cmp	r3, #0
   1b8ec:	d022      	beq.n	1b934 <xQueueGenericSend+0x318>
   1b8ee:	683b      	ldr	r3, [r7, #0]
   1b8f0:	2b00      	cmp	r3, #0
   1b8f2:	d10b      	bne.n	1b90c <xQueueGenericSend+0x2f0>
   1b8f4:	6a3b      	ldr	r3, [r7, #32]
   1b8f6:	0018      	movs	r0, r3
   1b8f8:	4b21      	ldr	r3, [pc, #132]	; (1b980 <xQueueGenericSend+0x364>)
   1b8fa:	4798      	blx	r3
   1b8fc:	0003      	movs	r3, r0
   1b8fe:	001a      	movs	r2, r3
   1b900:	4b20      	ldr	r3, [pc, #128]	; (1b984 <xQueueGenericSend+0x368>)
   1b902:	5c9b      	ldrb	r3, [r3, r2]
   1b904:	3370      	adds	r3, #112	; 0x70
   1b906:	b2db      	uxtb	r3, r3
   1b908:	001d      	movs	r5, r3
   1b90a:	e000      	b.n	1b90e <xQueueGenericSend+0x2f2>
   1b90c:	2575      	movs	r5, #117	; 0x75
   1b90e:	6a3b      	ldr	r3, [r7, #32]
   1b910:	0018      	movs	r0, r3
   1b912:	4b1b      	ldr	r3, [pc, #108]	; (1b980 <xQueueGenericSend+0x364>)
   1b914:	4798      	blx	r3
   1b916:	0003      	movs	r3, r0
   1b918:	001a      	movs	r2, r3
   1b91a:	4b1a      	ldr	r3, [pc, #104]	; (1b984 <xQueueGenericSend+0x368>)
   1b91c:	5c9c      	ldrb	r4, [r3, r2]
   1b91e:	6a3b      	ldr	r3, [r7, #32]
   1b920:	0018      	movs	r0, r3
   1b922:	4b19      	ldr	r3, [pc, #100]	; (1b988 <xQueueGenericSend+0x36c>)
   1b924:	4798      	blx	r3
   1b926:	0003      	movs	r3, r0
   1b928:	b2db      	uxtb	r3, r3
   1b92a:	001a      	movs	r2, r3
   1b92c:	0021      	movs	r1, r4
   1b92e:	0028      	movs	r0, r5
   1b930:	4b16      	ldr	r3, [pc, #88]	; (1b98c <xQueueGenericSend+0x370>)
   1b932:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1b934:	6a3b      	ldr	r3, [r7, #32]
   1b936:	3310      	adds	r3, #16
   1b938:	687a      	ldr	r2, [r7, #4]
   1b93a:	0011      	movs	r1, r2
   1b93c:	0018      	movs	r0, r3
   1b93e:	4b1e      	ldr	r3, [pc, #120]	; (1b9b8 <xQueueGenericSend+0x39c>)
   1b940:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1b942:	6a3b      	ldr	r3, [r7, #32]
   1b944:	0018      	movs	r0, r3
   1b946:	4b1d      	ldr	r3, [pc, #116]	; (1b9bc <xQueueGenericSend+0x3a0>)
   1b948:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1b94a:	4b1d      	ldr	r3, [pc, #116]	; (1b9c0 <xQueueGenericSend+0x3a4>)
   1b94c:	4798      	blx	r3
   1b94e:	1e03      	subs	r3, r0, #0
   1b950:	d000      	beq.n	1b954 <xQueueGenericSend+0x338>
   1b952:	e69d      	b.n	1b690 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1b954:	4b11      	ldr	r3, [pc, #68]	; (1b99c <xQueueGenericSend+0x380>)
   1b956:	4798      	blx	r3
   1b958:	e69a      	b.n	1b690 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1b95a:	6a3b      	ldr	r3, [r7, #32]
   1b95c:	0018      	movs	r0, r3
   1b95e:	4b17      	ldr	r3, [pc, #92]	; (1b9bc <xQueueGenericSend+0x3a0>)
   1b960:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1b962:	4b17      	ldr	r3, [pc, #92]	; (1b9c0 <xQueueGenericSend+0x3a4>)
   1b964:	4798      	blx	r3
   1b966:	e693      	b.n	1b690 <xQueueGenericSend+0x74>
   1b968:	0001dda9 	.word	0x0001dda9
   1b96c:	0001b089 	.word	0x0001b089
   1b970:	0001931d 	.word	0x0001931d
   1b974:	00019081 	.word	0x00019081
   1b978:	20000110 	.word	0x20000110
   1b97c:	00019141 	.word	0x00019141
   1b980:	00019041 	.word	0x00019041
   1b984:	20000104 	.word	0x20000104
   1b988:	00019121 	.word	0x00019121
   1b98c:	00019a79 	.word	0x00019a79
   1b990:	0001a0d5 	.word	0x0001a0d5
   1b994:	0001c855 	.word	0x0001c855
   1b998:	0001cb59 	.word	0x0001cb59
   1b99c:	0001b071 	.word	0x0001b071
   1b9a0:	0001d919 	.word	0x0001d919
   1b9a4:	0001b0ad 	.word	0x0001b0ad
   1b9a8:	0001da59 	.word	0x0001da59
   1b9ac:	0001d341 	.word	0x0001d341
   1b9b0:	0001da81 	.word	0x0001da81
   1b9b4:	0001caa9 	.word	0x0001caa9
   1b9b8:	0001d7f5 	.word	0x0001d7f5
   1b9bc:	0001c985 	.word	0x0001c985
   1b9c0:	0001d359 	.word	0x0001d359
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1b9c4:	6a3b      	ldr	r3, [r7, #32]
   1b9c6:	0018      	movs	r0, r3
   1b9c8:	4b22      	ldr	r3, [pc, #136]	; (1ba54 <xQueueGenericSend+0x438>)
   1b9ca:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1b9cc:	4b22      	ldr	r3, [pc, #136]	; (1ba58 <xQueueGenericSend+0x43c>)
   1b9ce:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   1b9d0:	4b22      	ldr	r3, [pc, #136]	; (1ba5c <xQueueGenericSend+0x440>)
   1b9d2:	4798      	blx	r3
   1b9d4:	0003      	movs	r3, r0
   1b9d6:	0018      	movs	r0, r3
   1b9d8:	4b21      	ldr	r3, [pc, #132]	; (1ba60 <xQueueGenericSend+0x444>)
   1b9da:	4798      	blx	r3
   1b9dc:	0003      	movs	r3, r0
   1b9de:	001a      	movs	r2, r3
   1b9e0:	4b20      	ldr	r3, [pc, #128]	; (1ba64 <xQueueGenericSend+0x448>)
   1b9e2:	881b      	ldrh	r3, [r3, #0]
   1b9e4:	4013      	ands	r3, r2
   1b9e6:	b29b      	uxth	r3, r3
   1b9e8:	2b00      	cmp	r3, #0
   1b9ea:	d02e      	beq.n	1ba4a <xQueueGenericSend+0x42e>
   1b9ec:	6a3b      	ldr	r3, [r7, #32]
   1b9ee:	0018      	movs	r0, r3
   1b9f0:	4b1d      	ldr	r3, [pc, #116]	; (1ba68 <xQueueGenericSend+0x44c>)
   1b9f2:	4798      	blx	r3
   1b9f4:	0003      	movs	r3, r0
   1b9f6:	001a      	movs	r2, r3
   1b9f8:	4b1a      	ldr	r3, [pc, #104]	; (1ba64 <xQueueGenericSend+0x448>)
   1b9fa:	881b      	ldrh	r3, [r3, #0]
   1b9fc:	4013      	ands	r3, r2
   1b9fe:	b29b      	uxth	r3, r3
   1ba00:	2b00      	cmp	r3, #0
   1ba02:	d022      	beq.n	1ba4a <xQueueGenericSend+0x42e>
   1ba04:	683b      	ldr	r3, [r7, #0]
   1ba06:	2b00      	cmp	r3, #0
   1ba08:	d10b      	bne.n	1ba22 <xQueueGenericSend+0x406>
   1ba0a:	6a3b      	ldr	r3, [r7, #32]
   1ba0c:	0018      	movs	r0, r3
   1ba0e:	4b17      	ldr	r3, [pc, #92]	; (1ba6c <xQueueGenericSend+0x450>)
   1ba10:	4798      	blx	r3
   1ba12:	0003      	movs	r3, r0
   1ba14:	001a      	movs	r2, r3
   1ba16:	4b16      	ldr	r3, [pc, #88]	; (1ba70 <xQueueGenericSend+0x454>)
   1ba18:	5c9b      	ldrb	r3, [r3, r2]
   1ba1a:	3348      	adds	r3, #72	; 0x48
   1ba1c:	b2db      	uxtb	r3, r3
   1ba1e:	001d      	movs	r5, r3
   1ba20:	e000      	b.n	1ba24 <xQueueGenericSend+0x408>
   1ba22:	254d      	movs	r5, #77	; 0x4d
   1ba24:	6a3b      	ldr	r3, [r7, #32]
   1ba26:	0018      	movs	r0, r3
   1ba28:	4b10      	ldr	r3, [pc, #64]	; (1ba6c <xQueueGenericSend+0x450>)
   1ba2a:	4798      	blx	r3
   1ba2c:	0003      	movs	r3, r0
   1ba2e:	001a      	movs	r2, r3
   1ba30:	4b0f      	ldr	r3, [pc, #60]	; (1ba70 <xQueueGenericSend+0x454>)
   1ba32:	5c9c      	ldrb	r4, [r3, r2]
   1ba34:	6a3b      	ldr	r3, [r7, #32]
   1ba36:	0018      	movs	r0, r3
   1ba38:	4b0e      	ldr	r3, [pc, #56]	; (1ba74 <xQueueGenericSend+0x458>)
   1ba3a:	4798      	blx	r3
   1ba3c:	0003      	movs	r3, r0
   1ba3e:	b2db      	uxtb	r3, r3
   1ba40:	001a      	movs	r2, r3
   1ba42:	0021      	movs	r1, r4
   1ba44:	0028      	movs	r0, r5
   1ba46:	4b0c      	ldr	r3, [pc, #48]	; (1ba78 <xQueueGenericSend+0x45c>)
   1ba48:	4798      	blx	r3
			return errQUEUE_FULL;
   1ba4a:	2300      	movs	r3, #0
		}
	}
}
   1ba4c:	0018      	movs	r0, r3
   1ba4e:	46bd      	mov	sp, r7
   1ba50:	b00a      	add	sp, #40	; 0x28
   1ba52:	bdb0      	pop	{r4, r5, r7, pc}
   1ba54:	0001c985 	.word	0x0001c985
   1ba58:	0001d359 	.word	0x0001d359
   1ba5c:	0001931d 	.word	0x0001931d
   1ba60:	00019081 	.word	0x00019081
   1ba64:	20000110 	.word	0x20000110
   1ba68:	00019141 	.word	0x00019141
   1ba6c:	00019041 	.word	0x00019041
   1ba70:	20000104 	.word	0x20000104
   1ba74:	00019121 	.word	0x00019121
   1ba78:	00019a79 	.word	0x00019a79

0001ba7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1ba7c:	b5b0      	push	{r4, r5, r7, lr}
   1ba7e:	b088      	sub	sp, #32
   1ba80:	af00      	add	r7, sp, #0
   1ba82:	60f8      	str	r0, [r7, #12]
   1ba84:	60b9      	str	r1, [r7, #8]
   1ba86:	607a      	str	r2, [r7, #4]
   1ba88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1ba8a:	68fb      	ldr	r3, [r7, #12]
   1ba8c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1ba8e:	69bb      	ldr	r3, [r7, #24]
   1ba90:	2b00      	cmp	r3, #0
   1ba92:	d101      	bne.n	1ba98 <xQueueGenericSendFromISR+0x1c>
   1ba94:	b672      	cpsid	i
   1ba96:	e7fe      	b.n	1ba96 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1ba98:	68bb      	ldr	r3, [r7, #8]
   1ba9a:	2b00      	cmp	r3, #0
   1ba9c:	d103      	bne.n	1baa6 <xQueueGenericSendFromISR+0x2a>
   1ba9e:	69bb      	ldr	r3, [r7, #24]
   1baa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1baa2:	2b00      	cmp	r3, #0
   1baa4:	d101      	bne.n	1baaa <xQueueGenericSendFromISR+0x2e>
   1baa6:	2301      	movs	r3, #1
   1baa8:	e000      	b.n	1baac <xQueueGenericSendFromISR+0x30>
   1baaa:	2300      	movs	r3, #0
   1baac:	2b00      	cmp	r3, #0
   1baae:	d101      	bne.n	1bab4 <xQueueGenericSendFromISR+0x38>
   1bab0:	b672      	cpsid	i
   1bab2:	e7fe      	b.n	1bab2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1bab4:	683b      	ldr	r3, [r7, #0]
   1bab6:	2b02      	cmp	r3, #2
   1bab8:	d103      	bne.n	1bac2 <xQueueGenericSendFromISR+0x46>
   1baba:	69bb      	ldr	r3, [r7, #24]
   1babc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1babe:	2b01      	cmp	r3, #1
   1bac0:	d101      	bne.n	1bac6 <xQueueGenericSendFromISR+0x4a>
   1bac2:	2301      	movs	r3, #1
   1bac4:	e000      	b.n	1bac8 <xQueueGenericSendFromISR+0x4c>
   1bac6:	2300      	movs	r3, #0
   1bac8:	2b00      	cmp	r3, #0
   1baca:	d101      	bne.n	1bad0 <xQueueGenericSendFromISR+0x54>
   1bacc:	b672      	cpsid	i
   1bace:	e7fe      	b.n	1bace <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1bad0:	4b68      	ldr	r3, [pc, #416]	; (1bc74 <xQueueGenericSendFromISR+0x1f8>)
   1bad2:	4798      	blx	r3
   1bad4:	0003      	movs	r3, r0
   1bad6:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1bad8:	69bb      	ldr	r3, [r7, #24]
   1bada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1badc:	69bb      	ldr	r3, [r7, #24]
   1bade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1bae0:	429a      	cmp	r2, r3
   1bae2:	d303      	bcc.n	1baec <xQueueGenericSendFromISR+0x70>
   1bae4:	683b      	ldr	r3, [r7, #0]
   1bae6:	2b02      	cmp	r3, #2
   1bae8:	d000      	beq.n	1baec <xQueueGenericSendFromISR+0x70>
   1baea:	e088      	b.n	1bbfe <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1baec:	2313      	movs	r3, #19
   1baee:	18fb      	adds	r3, r7, r3
   1baf0:	69ba      	ldr	r2, [r7, #24]
   1baf2:	2145      	movs	r1, #69	; 0x45
   1baf4:	5c52      	ldrb	r2, [r2, r1]
   1baf6:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1baf8:	69bb      	ldr	r3, [r7, #24]
   1bafa:	0018      	movs	r0, r3
   1bafc:	4b5e      	ldr	r3, [pc, #376]	; (1bc78 <xQueueGenericSendFromISR+0x1fc>)
   1bafe:	4798      	blx	r3
   1bb00:	0003      	movs	r3, r0
   1bb02:	001a      	movs	r2, r3
   1bb04:	4b5d      	ldr	r3, [pc, #372]	; (1bc7c <xQueueGenericSendFromISR+0x200>)
   1bb06:	881b      	ldrh	r3, [r3, #0]
   1bb08:	4013      	ands	r3, r2
   1bb0a:	b29b      	uxth	r3, r3
   1bb0c:	2b00      	cmp	r3, #0
   1bb0e:	d022      	beq.n	1bb56 <xQueueGenericSendFromISR+0xda>
   1bb10:	683b      	ldr	r3, [r7, #0]
   1bb12:	2b00      	cmp	r3, #0
   1bb14:	d10b      	bne.n	1bb2e <xQueueGenericSendFromISR+0xb2>
   1bb16:	69bb      	ldr	r3, [r7, #24]
   1bb18:	0018      	movs	r0, r3
   1bb1a:	4b59      	ldr	r3, [pc, #356]	; (1bc80 <xQueueGenericSendFromISR+0x204>)
   1bb1c:	4798      	blx	r3
   1bb1e:	0003      	movs	r3, r0
   1bb20:	001a      	movs	r2, r3
   1bb22:	4b58      	ldr	r3, [pc, #352]	; (1bc84 <xQueueGenericSendFromISR+0x208>)
   1bb24:	5c9b      	ldrb	r3, [r3, r2]
   1bb26:	3330      	adds	r3, #48	; 0x30
   1bb28:	b2db      	uxtb	r3, r3
   1bb2a:	001d      	movs	r5, r3
   1bb2c:	e000      	b.n	1bb30 <xQueueGenericSendFromISR+0xb4>
   1bb2e:	2535      	movs	r5, #53	; 0x35
   1bb30:	69bb      	ldr	r3, [r7, #24]
   1bb32:	0018      	movs	r0, r3
   1bb34:	4b52      	ldr	r3, [pc, #328]	; (1bc80 <xQueueGenericSendFromISR+0x204>)
   1bb36:	4798      	blx	r3
   1bb38:	0003      	movs	r3, r0
   1bb3a:	001a      	movs	r2, r3
   1bb3c:	4b51      	ldr	r3, [pc, #324]	; (1bc84 <xQueueGenericSendFromISR+0x208>)
   1bb3e:	5c9c      	ldrb	r4, [r3, r2]
   1bb40:	69bb      	ldr	r3, [r7, #24]
   1bb42:	0018      	movs	r0, r3
   1bb44:	4b50      	ldr	r3, [pc, #320]	; (1bc88 <xQueueGenericSendFromISR+0x20c>)
   1bb46:	4798      	blx	r3
   1bb48:	0003      	movs	r3, r0
   1bb4a:	b2db      	uxtb	r3, r3
   1bb4c:	001a      	movs	r2, r3
   1bb4e:	0021      	movs	r1, r4
   1bb50:	0028      	movs	r0, r5
   1bb52:	4b4e      	ldr	r3, [pc, #312]	; (1bc8c <xQueueGenericSendFromISR+0x210>)
   1bb54:	4798      	blx	r3
   1bb56:	69bb      	ldr	r3, [r7, #24]
   1bb58:	0018      	movs	r0, r3
   1bb5a:	4b49      	ldr	r3, [pc, #292]	; (1bc80 <xQueueGenericSendFromISR+0x204>)
   1bb5c:	4798      	blx	r3
   1bb5e:	0003      	movs	r3, r0
   1bb60:	001a      	movs	r2, r3
   1bb62:	4b48      	ldr	r3, [pc, #288]	; (1bc84 <xQueueGenericSendFromISR+0x208>)
   1bb64:	5c9c      	ldrb	r4, [r3, r2]
   1bb66:	69bb      	ldr	r3, [r7, #24]
   1bb68:	0018      	movs	r0, r3
   1bb6a:	4b47      	ldr	r3, [pc, #284]	; (1bc88 <xQueueGenericSendFromISR+0x20c>)
   1bb6c:	4798      	blx	r3
   1bb6e:	0003      	movs	r3, r0
   1bb70:	b2d9      	uxtb	r1, r3
   1bb72:	69bb      	ldr	r3, [r7, #24]
   1bb74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bb76:	b2db      	uxtb	r3, r3
   1bb78:	3301      	adds	r3, #1
   1bb7a:	b2db      	uxtb	r3, r3
   1bb7c:	001a      	movs	r2, r3
   1bb7e:	0020      	movs	r0, r4
   1bb80:	4b43      	ldr	r3, [pc, #268]	; (1bc90 <xQueueGenericSendFromISR+0x214>)
   1bb82:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1bb84:	683a      	ldr	r2, [r7, #0]
   1bb86:	68b9      	ldr	r1, [r7, #8]
   1bb88:	69bb      	ldr	r3, [r7, #24]
   1bb8a:	0018      	movs	r0, r3
   1bb8c:	4b41      	ldr	r3, [pc, #260]	; (1bc94 <xQueueGenericSendFromISR+0x218>)
   1bb8e:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1bb90:	2313      	movs	r3, #19
   1bb92:	18fb      	adds	r3, r7, r3
   1bb94:	781b      	ldrb	r3, [r3, #0]
   1bb96:	b25b      	sxtb	r3, r3
   1bb98:	3301      	adds	r3, #1
   1bb9a:	d124      	bne.n	1bbe6 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1bb9c:	69bb      	ldr	r3, [r7, #24]
   1bb9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1bba0:	2b00      	cmp	r3, #0
   1bba2:	d00e      	beq.n	1bbc2 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1bba4:	683a      	ldr	r2, [r7, #0]
   1bba6:	69bb      	ldr	r3, [r7, #24]
   1bba8:	0011      	movs	r1, r2
   1bbaa:	0018      	movs	r0, r3
   1bbac:	4b3a      	ldr	r3, [pc, #232]	; (1bc98 <xQueueGenericSendFromISR+0x21c>)
   1bbae:	4798      	blx	r3
   1bbb0:	1e03      	subs	r3, r0, #0
   1bbb2:	d021      	beq.n	1bbf8 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1bbb4:	687b      	ldr	r3, [r7, #4]
   1bbb6:	2b00      	cmp	r3, #0
   1bbb8:	d01e      	beq.n	1bbf8 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1bbba:	687b      	ldr	r3, [r7, #4]
   1bbbc:	2201      	movs	r2, #1
   1bbbe:	601a      	str	r2, [r3, #0]
   1bbc0:	e01a      	b.n	1bbf8 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1bbc2:	69bb      	ldr	r3, [r7, #24]
   1bbc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bbc6:	2b00      	cmp	r3, #0
   1bbc8:	d016      	beq.n	1bbf8 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1bbca:	69bb      	ldr	r3, [r7, #24]
   1bbcc:	3324      	adds	r3, #36	; 0x24
   1bbce:	0018      	movs	r0, r3
   1bbd0:	4b32      	ldr	r3, [pc, #200]	; (1bc9c <xQueueGenericSendFromISR+0x220>)
   1bbd2:	4798      	blx	r3
   1bbd4:	1e03      	subs	r3, r0, #0
   1bbd6:	d00f      	beq.n	1bbf8 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1bbd8:	687b      	ldr	r3, [r7, #4]
   1bbda:	2b00      	cmp	r3, #0
   1bbdc:	d00c      	beq.n	1bbf8 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1bbde:	687b      	ldr	r3, [r7, #4]
   1bbe0:	2201      	movs	r2, #1
   1bbe2:	601a      	str	r2, [r3, #0]
   1bbe4:	e008      	b.n	1bbf8 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1bbe6:	2313      	movs	r3, #19
   1bbe8:	18fb      	adds	r3, r7, r3
   1bbea:	781b      	ldrb	r3, [r3, #0]
   1bbec:	3301      	adds	r3, #1
   1bbee:	b2db      	uxtb	r3, r3
   1bbf0:	b259      	sxtb	r1, r3
   1bbf2:	69bb      	ldr	r3, [r7, #24]
   1bbf4:	2245      	movs	r2, #69	; 0x45
   1bbf6:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1bbf8:	2301      	movs	r3, #1
   1bbfa:	61fb      	str	r3, [r7, #28]
		{
   1bbfc:	e030      	b.n	1bc60 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1bbfe:	69bb      	ldr	r3, [r7, #24]
   1bc00:	0018      	movs	r0, r3
   1bc02:	4b1d      	ldr	r3, [pc, #116]	; (1bc78 <xQueueGenericSendFromISR+0x1fc>)
   1bc04:	4798      	blx	r3
   1bc06:	0003      	movs	r3, r0
   1bc08:	001a      	movs	r2, r3
   1bc0a:	4b1c      	ldr	r3, [pc, #112]	; (1bc7c <xQueueGenericSendFromISR+0x200>)
   1bc0c:	881b      	ldrh	r3, [r3, #0]
   1bc0e:	4013      	ands	r3, r2
   1bc10:	b29b      	uxth	r3, r3
   1bc12:	2b00      	cmp	r3, #0
   1bc14:	d022      	beq.n	1bc5c <xQueueGenericSendFromISR+0x1e0>
   1bc16:	683b      	ldr	r3, [r7, #0]
   1bc18:	2b00      	cmp	r3, #0
   1bc1a:	d10b      	bne.n	1bc34 <xQueueGenericSendFromISR+0x1b8>
   1bc1c:	69bb      	ldr	r3, [r7, #24]
   1bc1e:	0018      	movs	r0, r3
   1bc20:	4b17      	ldr	r3, [pc, #92]	; (1bc80 <xQueueGenericSendFromISR+0x204>)
   1bc22:	4798      	blx	r3
   1bc24:	0003      	movs	r3, r0
   1bc26:	001a      	movs	r2, r3
   1bc28:	4b16      	ldr	r3, [pc, #88]	; (1bc84 <xQueueGenericSendFromISR+0x208>)
   1bc2a:	5c9b      	ldrb	r3, [r3, r2]
   1bc2c:	3358      	adds	r3, #88	; 0x58
   1bc2e:	b2db      	uxtb	r3, r3
   1bc30:	001d      	movs	r5, r3
   1bc32:	e000      	b.n	1bc36 <xQueueGenericSendFromISR+0x1ba>
   1bc34:	255d      	movs	r5, #93	; 0x5d
   1bc36:	69bb      	ldr	r3, [r7, #24]
   1bc38:	0018      	movs	r0, r3
   1bc3a:	4b11      	ldr	r3, [pc, #68]	; (1bc80 <xQueueGenericSendFromISR+0x204>)
   1bc3c:	4798      	blx	r3
   1bc3e:	0003      	movs	r3, r0
   1bc40:	001a      	movs	r2, r3
   1bc42:	4b10      	ldr	r3, [pc, #64]	; (1bc84 <xQueueGenericSendFromISR+0x208>)
   1bc44:	5c9c      	ldrb	r4, [r3, r2]
   1bc46:	69bb      	ldr	r3, [r7, #24]
   1bc48:	0018      	movs	r0, r3
   1bc4a:	4b0f      	ldr	r3, [pc, #60]	; (1bc88 <xQueueGenericSendFromISR+0x20c>)
   1bc4c:	4798      	blx	r3
   1bc4e:	0003      	movs	r3, r0
   1bc50:	b2db      	uxtb	r3, r3
   1bc52:	001a      	movs	r2, r3
   1bc54:	0021      	movs	r1, r4
   1bc56:	0028      	movs	r0, r5
   1bc58:	4b0c      	ldr	r3, [pc, #48]	; (1bc8c <xQueueGenericSendFromISR+0x210>)
   1bc5a:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1bc5c:	2300      	movs	r3, #0
   1bc5e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1bc60:	697b      	ldr	r3, [r7, #20]
   1bc62:	0018      	movs	r0, r3
   1bc64:	4b0e      	ldr	r3, [pc, #56]	; (1bca0 <xQueueGenericSendFromISR+0x224>)
   1bc66:	4798      	blx	r3

	return xReturn;
   1bc68:	69fb      	ldr	r3, [r7, #28]
}
   1bc6a:	0018      	movs	r0, r3
   1bc6c:	46bd      	mov	sp, r7
   1bc6e:	b008      	add	sp, #32
   1bc70:	bdb0      	pop	{r4, r5, r7, pc}
   1bc72:	46c0      	nop			; (mov r8, r8)
   1bc74:	0001b0dd 	.word	0x0001b0dd
   1bc78:	00019141 	.word	0x00019141
   1bc7c:	20000110 	.word	0x20000110
   1bc80:	00019041 	.word	0x00019041
   1bc84:	20000104 	.word	0x20000104
   1bc88:	00019121 	.word	0x00019121
   1bc8c:	00019a79 	.word	0x00019a79
   1bc90:	0001a0d5 	.word	0x0001a0d5
   1bc94:	0001c855 	.word	0x0001c855
   1bc98:	0001cb59 	.word	0x0001cb59
   1bc9c:	0001d919 	.word	0x0001d919
   1bca0:	0001b0e9 	.word	0x0001b0e9

0001bca4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   1bca4:	b580      	push	{r7, lr}
   1bca6:	b082      	sub	sp, #8
   1bca8:	af00      	add	r7, sp, #0
   1bcaa:	6078      	str	r0, [r7, #4]
   1bcac:	6039      	str	r1, [r7, #0]
   1bcae:	6839      	ldr	r1, [r7, #0]
   1bcb0:	687b      	ldr	r3, [r7, #4]
   1bcb2:	2200      	movs	r2, #0
   1bcb4:	0018      	movs	r0, r3
   1bcb6:	4b03      	ldr	r3, [pc, #12]	; (1bcc4 <xQueueGiveFromISR+0x20>)
   1bcb8:	4798      	blx	r3
   1bcba:	0003      	movs	r3, r0
   1bcbc:	0018      	movs	r0, r3
   1bcbe:	46bd      	mov	sp, r7
   1bcc0:	b002      	add	sp, #8
   1bcc2:	bd80      	pop	{r7, pc}
   1bcc4:	0001bcc9 	.word	0x0001bcc9

0001bcc8 <MyWrapper>:
{
   1bcc8:	b5b0      	push	{r4, r5, r7, lr}
   1bcca:	b08a      	sub	sp, #40	; 0x28
   1bccc:	af00      	add	r7, sp, #0
   1bcce:	60f8      	str	r0, [r7, #12]
   1bcd0:	60b9      	str	r1, [r7, #8]
   1bcd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1bcd4:	68fb      	ldr	r3, [r7, #12]
   1bcd6:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1bcd8:	6a3b      	ldr	r3, [r7, #32]
   1bcda:	2b00      	cmp	r3, #0
   1bcdc:	d101      	bne.n	1bce2 <MyWrapper+0x1a>
   1bcde:	b672      	cpsid	i
   1bce0:	e7fe      	b.n	1bce0 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1bce2:	6a3b      	ldr	r3, [r7, #32]
   1bce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bce6:	2b00      	cmp	r3, #0
   1bce8:	d001      	beq.n	1bcee <MyWrapper+0x26>
   1bcea:	b672      	cpsid	i
   1bcec:	e7fe      	b.n	1bcec <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   1bcee:	6a3b      	ldr	r3, [r7, #32]
   1bcf0:	681b      	ldr	r3, [r3, #0]
   1bcf2:	2b00      	cmp	r3, #0
   1bcf4:	d103      	bne.n	1bcfe <MyWrapper+0x36>
   1bcf6:	6a3b      	ldr	r3, [r7, #32]
   1bcf8:	685b      	ldr	r3, [r3, #4]
   1bcfa:	2b00      	cmp	r3, #0
   1bcfc:	d101      	bne.n	1bd02 <MyWrapper+0x3a>
   1bcfe:	2301      	movs	r3, #1
   1bd00:	e000      	b.n	1bd04 <MyWrapper+0x3c>
   1bd02:	2300      	movs	r3, #0
   1bd04:	2b00      	cmp	r3, #0
   1bd06:	d101      	bne.n	1bd0c <MyWrapper+0x44>
   1bd08:	b672      	cpsid	i
   1bd0a:	e7fe      	b.n	1bd0a <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1bd0c:	4b66      	ldr	r3, [pc, #408]	; (1bea8 <MyWrapper+0x1e0>)
   1bd0e:	4798      	blx	r3
   1bd10:	0003      	movs	r3, r0
   1bd12:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1bd14:	6a3b      	ldr	r3, [r7, #32]
   1bd16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bd18:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1bd1a:	6a3b      	ldr	r3, [r7, #32]
   1bd1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1bd1e:	69bb      	ldr	r3, [r7, #24]
   1bd20:	429a      	cmp	r2, r3
   1bd22:	d800      	bhi.n	1bd26 <MyWrapper+0x5e>
   1bd24:	e085      	b.n	1be32 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1bd26:	2317      	movs	r3, #23
   1bd28:	18fb      	adds	r3, r7, r3
   1bd2a:	6a3a      	ldr	r2, [r7, #32]
   1bd2c:	2145      	movs	r1, #69	; 0x45
   1bd2e:	5c52      	ldrb	r2, [r2, r1]
   1bd30:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1bd32:	6a3b      	ldr	r3, [r7, #32]
   1bd34:	0018      	movs	r0, r3
   1bd36:	4b5d      	ldr	r3, [pc, #372]	; (1beac <MyWrapper+0x1e4>)
   1bd38:	4798      	blx	r3
   1bd3a:	0003      	movs	r3, r0
   1bd3c:	001a      	movs	r2, r3
   1bd3e:	4b5c      	ldr	r3, [pc, #368]	; (1beb0 <MyWrapper+0x1e8>)
   1bd40:	881b      	ldrh	r3, [r3, #0]
   1bd42:	4013      	ands	r3, r2
   1bd44:	b29b      	uxth	r3, r3
   1bd46:	2b00      	cmp	r3, #0
   1bd48:	d022      	beq.n	1bd90 <MyWrapper+0xc8>
   1bd4a:	687b      	ldr	r3, [r7, #4]
   1bd4c:	2b00      	cmp	r3, #0
   1bd4e:	d10b      	bne.n	1bd68 <MyWrapper+0xa0>
   1bd50:	6a3b      	ldr	r3, [r7, #32]
   1bd52:	0018      	movs	r0, r3
   1bd54:	4b57      	ldr	r3, [pc, #348]	; (1beb4 <MyWrapper+0x1ec>)
   1bd56:	4798      	blx	r3
   1bd58:	0003      	movs	r3, r0
   1bd5a:	001a      	movs	r2, r3
   1bd5c:	4b56      	ldr	r3, [pc, #344]	; (1beb8 <MyWrapper+0x1f0>)
   1bd5e:	5c9b      	ldrb	r3, [r3, r2]
   1bd60:	3330      	adds	r3, #48	; 0x30
   1bd62:	b2db      	uxtb	r3, r3
   1bd64:	001d      	movs	r5, r3
   1bd66:	e000      	b.n	1bd6a <MyWrapper+0xa2>
   1bd68:	2535      	movs	r5, #53	; 0x35
   1bd6a:	6a3b      	ldr	r3, [r7, #32]
   1bd6c:	0018      	movs	r0, r3
   1bd6e:	4b51      	ldr	r3, [pc, #324]	; (1beb4 <MyWrapper+0x1ec>)
   1bd70:	4798      	blx	r3
   1bd72:	0003      	movs	r3, r0
   1bd74:	001a      	movs	r2, r3
   1bd76:	4b50      	ldr	r3, [pc, #320]	; (1beb8 <MyWrapper+0x1f0>)
   1bd78:	5c9c      	ldrb	r4, [r3, r2]
   1bd7a:	6a3b      	ldr	r3, [r7, #32]
   1bd7c:	0018      	movs	r0, r3
   1bd7e:	4b4f      	ldr	r3, [pc, #316]	; (1bebc <MyWrapper+0x1f4>)
   1bd80:	4798      	blx	r3
   1bd82:	0003      	movs	r3, r0
   1bd84:	b2db      	uxtb	r3, r3
   1bd86:	001a      	movs	r2, r3
   1bd88:	0021      	movs	r1, r4
   1bd8a:	0028      	movs	r0, r5
   1bd8c:	4b4c      	ldr	r3, [pc, #304]	; (1bec0 <MyWrapper+0x1f8>)
   1bd8e:	4798      	blx	r3
   1bd90:	6a3b      	ldr	r3, [r7, #32]
   1bd92:	0018      	movs	r0, r3
   1bd94:	4b47      	ldr	r3, [pc, #284]	; (1beb4 <MyWrapper+0x1ec>)
   1bd96:	4798      	blx	r3
   1bd98:	0003      	movs	r3, r0
   1bd9a:	001a      	movs	r2, r3
   1bd9c:	4b46      	ldr	r3, [pc, #280]	; (1beb8 <MyWrapper+0x1f0>)
   1bd9e:	5c9c      	ldrb	r4, [r3, r2]
   1bda0:	6a3b      	ldr	r3, [r7, #32]
   1bda2:	0018      	movs	r0, r3
   1bda4:	4b45      	ldr	r3, [pc, #276]	; (1bebc <MyWrapper+0x1f4>)
   1bda6:	4798      	blx	r3
   1bda8:	0003      	movs	r3, r0
   1bdaa:	b2d9      	uxtb	r1, r3
   1bdac:	6a3b      	ldr	r3, [r7, #32]
   1bdae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bdb0:	b2db      	uxtb	r3, r3
   1bdb2:	3301      	adds	r3, #1
   1bdb4:	b2db      	uxtb	r3, r3
   1bdb6:	001a      	movs	r2, r3
   1bdb8:	0020      	movs	r0, r4
   1bdba:	4b42      	ldr	r3, [pc, #264]	; (1bec4 <MyWrapper+0x1fc>)
   1bdbc:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1bdbe:	69bb      	ldr	r3, [r7, #24]
   1bdc0:	1c5a      	adds	r2, r3, #1
   1bdc2:	6a3b      	ldr	r3, [r7, #32]
   1bdc4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1bdc6:	2317      	movs	r3, #23
   1bdc8:	18fb      	adds	r3, r7, r3
   1bdca:	781b      	ldrb	r3, [r3, #0]
   1bdcc:	b25b      	sxtb	r3, r3
   1bdce:	3301      	adds	r3, #1
   1bdd0:	d123      	bne.n	1be1a <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1bdd2:	6a3b      	ldr	r3, [r7, #32]
   1bdd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1bdd6:	2b00      	cmp	r3, #0
   1bdd8:	d00d      	beq.n	1bdf6 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1bdda:	6a3b      	ldr	r3, [r7, #32]
   1bddc:	2100      	movs	r1, #0
   1bdde:	0018      	movs	r0, r3
   1bde0:	4b39      	ldr	r3, [pc, #228]	; (1bec8 <MyWrapper+0x200>)
   1bde2:	4798      	blx	r3
   1bde4:	1e03      	subs	r3, r0, #0
   1bde6:	d021      	beq.n	1be2c <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1bde8:	68bb      	ldr	r3, [r7, #8]
   1bdea:	2b00      	cmp	r3, #0
   1bdec:	d01e      	beq.n	1be2c <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1bdee:	68bb      	ldr	r3, [r7, #8]
   1bdf0:	2201      	movs	r2, #1
   1bdf2:	601a      	str	r2, [r3, #0]
   1bdf4:	e01a      	b.n	1be2c <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1bdf6:	6a3b      	ldr	r3, [r7, #32]
   1bdf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bdfa:	2b00      	cmp	r3, #0
   1bdfc:	d016      	beq.n	1be2c <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1bdfe:	6a3b      	ldr	r3, [r7, #32]
   1be00:	3324      	adds	r3, #36	; 0x24
   1be02:	0018      	movs	r0, r3
   1be04:	4b31      	ldr	r3, [pc, #196]	; (1becc <MyWrapper+0x204>)
   1be06:	4798      	blx	r3
   1be08:	1e03      	subs	r3, r0, #0
   1be0a:	d00f      	beq.n	1be2c <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1be0c:	68bb      	ldr	r3, [r7, #8]
   1be0e:	2b00      	cmp	r3, #0
   1be10:	d00c      	beq.n	1be2c <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1be12:	68bb      	ldr	r3, [r7, #8]
   1be14:	2201      	movs	r2, #1
   1be16:	601a      	str	r2, [r3, #0]
   1be18:	e008      	b.n	1be2c <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1be1a:	2317      	movs	r3, #23
   1be1c:	18fb      	adds	r3, r7, r3
   1be1e:	781b      	ldrb	r3, [r3, #0]
   1be20:	3301      	adds	r3, #1
   1be22:	b2db      	uxtb	r3, r3
   1be24:	b259      	sxtb	r1, r3
   1be26:	6a3b      	ldr	r3, [r7, #32]
   1be28:	2245      	movs	r2, #69	; 0x45
   1be2a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1be2c:	2301      	movs	r3, #1
   1be2e:	627b      	str	r3, [r7, #36]	; 0x24
   1be30:	e030      	b.n	1be94 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1be32:	6a3b      	ldr	r3, [r7, #32]
   1be34:	0018      	movs	r0, r3
   1be36:	4b1d      	ldr	r3, [pc, #116]	; (1beac <MyWrapper+0x1e4>)
   1be38:	4798      	blx	r3
   1be3a:	0003      	movs	r3, r0
   1be3c:	001a      	movs	r2, r3
   1be3e:	4b1c      	ldr	r3, [pc, #112]	; (1beb0 <MyWrapper+0x1e8>)
   1be40:	881b      	ldrh	r3, [r3, #0]
   1be42:	4013      	ands	r3, r2
   1be44:	b29b      	uxth	r3, r3
   1be46:	2b00      	cmp	r3, #0
   1be48:	d022      	beq.n	1be90 <MyWrapper+0x1c8>
   1be4a:	687b      	ldr	r3, [r7, #4]
   1be4c:	2b00      	cmp	r3, #0
   1be4e:	d10b      	bne.n	1be68 <MyWrapper+0x1a0>
   1be50:	6a3b      	ldr	r3, [r7, #32]
   1be52:	0018      	movs	r0, r3
   1be54:	4b17      	ldr	r3, [pc, #92]	; (1beb4 <MyWrapper+0x1ec>)
   1be56:	4798      	blx	r3
   1be58:	0003      	movs	r3, r0
   1be5a:	001a      	movs	r2, r3
   1be5c:	4b16      	ldr	r3, [pc, #88]	; (1beb8 <MyWrapper+0x1f0>)
   1be5e:	5c9b      	ldrb	r3, [r3, r2]
   1be60:	3358      	adds	r3, #88	; 0x58
   1be62:	b2db      	uxtb	r3, r3
   1be64:	001d      	movs	r5, r3
   1be66:	e000      	b.n	1be6a <MyWrapper+0x1a2>
   1be68:	255d      	movs	r5, #93	; 0x5d
   1be6a:	6a3b      	ldr	r3, [r7, #32]
   1be6c:	0018      	movs	r0, r3
   1be6e:	4b11      	ldr	r3, [pc, #68]	; (1beb4 <MyWrapper+0x1ec>)
   1be70:	4798      	blx	r3
   1be72:	0003      	movs	r3, r0
   1be74:	001a      	movs	r2, r3
   1be76:	4b10      	ldr	r3, [pc, #64]	; (1beb8 <MyWrapper+0x1f0>)
   1be78:	5c9c      	ldrb	r4, [r3, r2]
   1be7a:	6a3b      	ldr	r3, [r7, #32]
   1be7c:	0018      	movs	r0, r3
   1be7e:	4b0f      	ldr	r3, [pc, #60]	; (1bebc <MyWrapper+0x1f4>)
   1be80:	4798      	blx	r3
   1be82:	0003      	movs	r3, r0
   1be84:	b2db      	uxtb	r3, r3
   1be86:	001a      	movs	r2, r3
   1be88:	0021      	movs	r1, r4
   1be8a:	0028      	movs	r0, r5
   1be8c:	4b0c      	ldr	r3, [pc, #48]	; (1bec0 <MyWrapper+0x1f8>)
   1be8e:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1be90:	2300      	movs	r3, #0
   1be92:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1be94:	69fb      	ldr	r3, [r7, #28]
   1be96:	0018      	movs	r0, r3
   1be98:	4b0d      	ldr	r3, [pc, #52]	; (1bed0 <MyWrapper+0x208>)
   1be9a:	4798      	blx	r3

	return xReturn;
   1be9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1be9e:	0018      	movs	r0, r3
   1bea0:	46bd      	mov	sp, r7
   1bea2:	b00a      	add	sp, #40	; 0x28
   1bea4:	bdb0      	pop	{r4, r5, r7, pc}
   1bea6:	46c0      	nop			; (mov r8, r8)
   1bea8:	0001b0dd 	.word	0x0001b0dd
   1beac:	00019141 	.word	0x00019141
   1beb0:	20000110 	.word	0x20000110
   1beb4:	00019041 	.word	0x00019041
   1beb8:	20000104 	.word	0x20000104
   1bebc:	00019121 	.word	0x00019121
   1bec0:	00019a79 	.word	0x00019a79
   1bec4:	0001a0d5 	.word	0x0001a0d5
   1bec8:	0001cb59 	.word	0x0001cb59
   1becc:	0001d919 	.word	0x0001d919
   1bed0:	0001b0e9 	.word	0x0001b0e9

0001bed4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1bed4:	b5b0      	push	{r4, r5, r7, lr}
   1bed6:	b08a      	sub	sp, #40	; 0x28
   1bed8:	af00      	add	r7, sp, #0
   1beda:	60f8      	str	r0, [r7, #12]
   1bedc:	60b9      	str	r1, [r7, #8]
   1bede:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1bee0:	2300      	movs	r3, #0
   1bee2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1bee4:	68fb      	ldr	r3, [r7, #12]
   1bee6:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1bee8:	6a3b      	ldr	r3, [r7, #32]
   1beea:	2b00      	cmp	r3, #0
   1beec:	d101      	bne.n	1bef2 <xQueueReceive+0x1e>
   1beee:	b672      	cpsid	i
   1bef0:	e7fe      	b.n	1bef0 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1bef2:	68bb      	ldr	r3, [r7, #8]
   1bef4:	2b00      	cmp	r3, #0
   1bef6:	d103      	bne.n	1bf00 <xQueueReceive+0x2c>
   1bef8:	6a3b      	ldr	r3, [r7, #32]
   1befa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1befc:	2b00      	cmp	r3, #0
   1befe:	d101      	bne.n	1bf04 <xQueueReceive+0x30>
   1bf00:	2301      	movs	r3, #1
   1bf02:	e000      	b.n	1bf06 <xQueueReceive+0x32>
   1bf04:	2300      	movs	r3, #0
   1bf06:	2b00      	cmp	r3, #0
   1bf08:	d101      	bne.n	1bf0e <xQueueReceive+0x3a>
   1bf0a:	b672      	cpsid	i
   1bf0c:	e7fe      	b.n	1bf0c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1bf0e:	4bbf      	ldr	r3, [pc, #764]	; (1c20c <xQueueReceive+0x338>)
   1bf10:	4798      	blx	r3
   1bf12:	1e03      	subs	r3, r0, #0
   1bf14:	d102      	bne.n	1bf1c <xQueueReceive+0x48>
   1bf16:	687b      	ldr	r3, [r7, #4]
   1bf18:	2b00      	cmp	r3, #0
   1bf1a:	d101      	bne.n	1bf20 <xQueueReceive+0x4c>
   1bf1c:	2301      	movs	r3, #1
   1bf1e:	e000      	b.n	1bf22 <xQueueReceive+0x4e>
   1bf20:	2300      	movs	r3, #0
   1bf22:	2b00      	cmp	r3, #0
   1bf24:	d101      	bne.n	1bf2a <xQueueReceive+0x56>
   1bf26:	b672      	cpsid	i
   1bf28:	e7fe      	b.n	1bf28 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1bf2a:	4bb9      	ldr	r3, [pc, #740]	; (1c210 <xQueueReceive+0x33c>)
   1bf2c:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1bf2e:	6a3b      	ldr	r3, [r7, #32]
   1bf30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bf32:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1bf34:	69fb      	ldr	r3, [r7, #28]
   1bf36:	2b00      	cmp	r3, #0
   1bf38:	d100      	bne.n	1bf3c <xQueueReceive+0x68>
   1bf3a:	e07d      	b.n	1c038 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1bf3c:	68ba      	ldr	r2, [r7, #8]
   1bf3e:	6a3b      	ldr	r3, [r7, #32]
   1bf40:	0011      	movs	r1, r2
   1bf42:	0018      	movs	r0, r3
   1bf44:	4bb3      	ldr	r3, [pc, #716]	; (1c214 <xQueueReceive+0x340>)
   1bf46:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1bf48:	4bb3      	ldr	r3, [pc, #716]	; (1c218 <xQueueReceive+0x344>)
   1bf4a:	4798      	blx	r3
   1bf4c:	0003      	movs	r3, r0
   1bf4e:	0018      	movs	r0, r3
   1bf50:	4bb2      	ldr	r3, [pc, #712]	; (1c21c <xQueueReceive+0x348>)
   1bf52:	4798      	blx	r3
   1bf54:	0003      	movs	r3, r0
   1bf56:	001a      	movs	r2, r3
   1bf58:	4bb1      	ldr	r3, [pc, #708]	; (1c220 <xQueueReceive+0x34c>)
   1bf5a:	881b      	ldrh	r3, [r3, #0]
   1bf5c:	4013      	ands	r3, r2
   1bf5e:	b29b      	uxth	r3, r3
   1bf60:	2b00      	cmp	r3, #0
   1bf62:	d029      	beq.n	1bfb8 <xQueueReceive+0xe4>
   1bf64:	6a3b      	ldr	r3, [r7, #32]
   1bf66:	0018      	movs	r0, r3
   1bf68:	4bae      	ldr	r3, [pc, #696]	; (1c224 <xQueueReceive+0x350>)
   1bf6a:	4798      	blx	r3
   1bf6c:	0003      	movs	r3, r0
   1bf6e:	001a      	movs	r2, r3
   1bf70:	4bab      	ldr	r3, [pc, #684]	; (1c220 <xQueueReceive+0x34c>)
   1bf72:	881b      	ldrh	r3, [r3, #0]
   1bf74:	4013      	ands	r3, r2
   1bf76:	b29b      	uxth	r3, r3
   1bf78:	2b00      	cmp	r3, #0
   1bf7a:	d01d      	beq.n	1bfb8 <xQueueReceive+0xe4>
   1bf7c:	6a3b      	ldr	r3, [r7, #32]
   1bf7e:	0018      	movs	r0, r3
   1bf80:	4ba9      	ldr	r3, [pc, #676]	; (1c228 <xQueueReceive+0x354>)
   1bf82:	4798      	blx	r3
   1bf84:	0003      	movs	r3, r0
   1bf86:	001a      	movs	r2, r3
   1bf88:	4ba8      	ldr	r3, [pc, #672]	; (1c22c <xQueueReceive+0x358>)
   1bf8a:	5c9b      	ldrb	r3, [r3, r2]
   1bf8c:	3328      	adds	r3, #40	; 0x28
   1bf8e:	b2db      	uxtb	r3, r3
   1bf90:	001d      	movs	r5, r3
   1bf92:	6a3b      	ldr	r3, [r7, #32]
   1bf94:	0018      	movs	r0, r3
   1bf96:	4ba4      	ldr	r3, [pc, #656]	; (1c228 <xQueueReceive+0x354>)
   1bf98:	4798      	blx	r3
   1bf9a:	0003      	movs	r3, r0
   1bf9c:	001a      	movs	r2, r3
   1bf9e:	4ba3      	ldr	r3, [pc, #652]	; (1c22c <xQueueReceive+0x358>)
   1bfa0:	5c9c      	ldrb	r4, [r3, r2]
   1bfa2:	6a3b      	ldr	r3, [r7, #32]
   1bfa4:	0018      	movs	r0, r3
   1bfa6:	4ba2      	ldr	r3, [pc, #648]	; (1c230 <xQueueReceive+0x35c>)
   1bfa8:	4798      	blx	r3
   1bfaa:	0003      	movs	r3, r0
   1bfac:	b2db      	uxtb	r3, r3
   1bfae:	001a      	movs	r2, r3
   1bfb0:	0021      	movs	r1, r4
   1bfb2:	0028      	movs	r0, r5
   1bfb4:	4b9f      	ldr	r3, [pc, #636]	; (1c234 <xQueueReceive+0x360>)
   1bfb6:	4798      	blx	r3
   1bfb8:	6a3b      	ldr	r3, [r7, #32]
   1bfba:	0018      	movs	r0, r3
   1bfbc:	4b9a      	ldr	r3, [pc, #616]	; (1c228 <xQueueReceive+0x354>)
   1bfbe:	4798      	blx	r3
   1bfc0:	0003      	movs	r3, r0
   1bfc2:	001a      	movs	r2, r3
   1bfc4:	4b99      	ldr	r3, [pc, #612]	; (1c22c <xQueueReceive+0x358>)
   1bfc6:	5c9c      	ldrb	r4, [r3, r2]
   1bfc8:	6a3b      	ldr	r3, [r7, #32]
   1bfca:	0018      	movs	r0, r3
   1bfcc:	4b98      	ldr	r3, [pc, #608]	; (1c230 <xQueueReceive+0x35c>)
   1bfce:	4798      	blx	r3
   1bfd0:	0003      	movs	r3, r0
   1bfd2:	b2dd      	uxtb	r5, r3
   1bfd4:	6a3b      	ldr	r3, [r7, #32]
   1bfd6:	0018      	movs	r0, r3
   1bfd8:	4b93      	ldr	r3, [pc, #588]	; (1c228 <xQueueReceive+0x354>)
   1bfda:	4798      	blx	r3
   1bfdc:	0003      	movs	r3, r0
   1bfde:	001a      	movs	r2, r3
   1bfe0:	4b92      	ldr	r3, [pc, #584]	; (1c22c <xQueueReceive+0x358>)
   1bfe2:	5c9b      	ldrb	r3, [r3, r2]
   1bfe4:	2b02      	cmp	r3, #2
   1bfe6:	d108      	bne.n	1bffa <xQueueReceive+0x126>
   1bfe8:	4b8b      	ldr	r3, [pc, #556]	; (1c218 <xQueueReceive+0x344>)
   1bfea:	4798      	blx	r3
   1bfec:	0003      	movs	r3, r0
   1bfee:	0018      	movs	r0, r3
   1bff0:	4b91      	ldr	r3, [pc, #580]	; (1c238 <xQueueReceive+0x364>)
   1bff2:	4798      	blx	r3
   1bff4:	0003      	movs	r3, r0
   1bff6:	b2db      	uxtb	r3, r3
   1bff8:	e004      	b.n	1c004 <xQueueReceive+0x130>
   1bffa:	6a3b      	ldr	r3, [r7, #32]
   1bffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bffe:	b2db      	uxtb	r3, r3
   1c000:	3b01      	subs	r3, #1
   1c002:	b2db      	uxtb	r3, r3
   1c004:	001a      	movs	r2, r3
   1c006:	0029      	movs	r1, r5
   1c008:	0020      	movs	r0, r4
   1c00a:	4b8c      	ldr	r3, [pc, #560]	; (1c23c <xQueueReceive+0x368>)
   1c00c:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1c00e:	69fb      	ldr	r3, [r7, #28]
   1c010:	1e5a      	subs	r2, r3, #1
   1c012:	6a3b      	ldr	r3, [r7, #32]
   1c014:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1c016:	6a3b      	ldr	r3, [r7, #32]
   1c018:	691b      	ldr	r3, [r3, #16]
   1c01a:	2b00      	cmp	r3, #0
   1c01c:	d008      	beq.n	1c030 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1c01e:	6a3b      	ldr	r3, [r7, #32]
   1c020:	3310      	adds	r3, #16
   1c022:	0018      	movs	r0, r3
   1c024:	4b86      	ldr	r3, [pc, #536]	; (1c240 <xQueueReceive+0x36c>)
   1c026:	4798      	blx	r3
   1c028:	1e03      	subs	r3, r0, #0
   1c02a:	d001      	beq.n	1c030 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1c02c:	4b85      	ldr	r3, [pc, #532]	; (1c244 <xQueueReceive+0x370>)
   1c02e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1c030:	4b85      	ldr	r3, [pc, #532]	; (1c248 <xQueueReceive+0x374>)
   1c032:	4798      	blx	r3
				return pdPASS;
   1c034:	2301      	movs	r3, #1
   1c036:	e15f      	b.n	1c2f8 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1c038:	687b      	ldr	r3, [r7, #4]
   1c03a:	2b00      	cmp	r3, #0
   1c03c:	d13b      	bne.n	1c0b6 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1c03e:	4b82      	ldr	r3, [pc, #520]	; (1c248 <xQueueReceive+0x374>)
   1c040:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1c042:	4b75      	ldr	r3, [pc, #468]	; (1c218 <xQueueReceive+0x344>)
   1c044:	4798      	blx	r3
   1c046:	0003      	movs	r3, r0
   1c048:	0018      	movs	r0, r3
   1c04a:	4b74      	ldr	r3, [pc, #464]	; (1c21c <xQueueReceive+0x348>)
   1c04c:	4798      	blx	r3
   1c04e:	0003      	movs	r3, r0
   1c050:	001a      	movs	r2, r3
   1c052:	4b73      	ldr	r3, [pc, #460]	; (1c220 <xQueueReceive+0x34c>)
   1c054:	881b      	ldrh	r3, [r3, #0]
   1c056:	4013      	ands	r3, r2
   1c058:	b29b      	uxth	r3, r3
   1c05a:	2b00      	cmp	r3, #0
   1c05c:	d029      	beq.n	1c0b2 <xQueueReceive+0x1de>
   1c05e:	6a3b      	ldr	r3, [r7, #32]
   1c060:	0018      	movs	r0, r3
   1c062:	4b70      	ldr	r3, [pc, #448]	; (1c224 <xQueueReceive+0x350>)
   1c064:	4798      	blx	r3
   1c066:	0003      	movs	r3, r0
   1c068:	001a      	movs	r2, r3
   1c06a:	4b6d      	ldr	r3, [pc, #436]	; (1c220 <xQueueReceive+0x34c>)
   1c06c:	881b      	ldrh	r3, [r3, #0]
   1c06e:	4013      	ands	r3, r2
   1c070:	b29b      	uxth	r3, r3
   1c072:	2b00      	cmp	r3, #0
   1c074:	d01d      	beq.n	1c0b2 <xQueueReceive+0x1de>
   1c076:	6a3b      	ldr	r3, [r7, #32]
   1c078:	0018      	movs	r0, r3
   1c07a:	4b6b      	ldr	r3, [pc, #428]	; (1c228 <xQueueReceive+0x354>)
   1c07c:	4798      	blx	r3
   1c07e:	0003      	movs	r3, r0
   1c080:	001a      	movs	r2, r3
   1c082:	4b6a      	ldr	r3, [pc, #424]	; (1c22c <xQueueReceive+0x358>)
   1c084:	5c9b      	ldrb	r3, [r3, r2]
   1c086:	3350      	adds	r3, #80	; 0x50
   1c088:	b2db      	uxtb	r3, r3
   1c08a:	001d      	movs	r5, r3
   1c08c:	6a3b      	ldr	r3, [r7, #32]
   1c08e:	0018      	movs	r0, r3
   1c090:	4b65      	ldr	r3, [pc, #404]	; (1c228 <xQueueReceive+0x354>)
   1c092:	4798      	blx	r3
   1c094:	0003      	movs	r3, r0
   1c096:	001a      	movs	r2, r3
   1c098:	4b64      	ldr	r3, [pc, #400]	; (1c22c <xQueueReceive+0x358>)
   1c09a:	5c9c      	ldrb	r4, [r3, r2]
   1c09c:	6a3b      	ldr	r3, [r7, #32]
   1c09e:	0018      	movs	r0, r3
   1c0a0:	4b63      	ldr	r3, [pc, #396]	; (1c230 <xQueueReceive+0x35c>)
   1c0a2:	4798      	blx	r3
   1c0a4:	0003      	movs	r3, r0
   1c0a6:	b2db      	uxtb	r3, r3
   1c0a8:	001a      	movs	r2, r3
   1c0aa:	0021      	movs	r1, r4
   1c0ac:	0028      	movs	r0, r5
   1c0ae:	4b61      	ldr	r3, [pc, #388]	; (1c234 <xQueueReceive+0x360>)
   1c0b0:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1c0b2:	2300      	movs	r3, #0
   1c0b4:	e120      	b.n	1c2f8 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1c0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c0b8:	2b00      	cmp	r3, #0
   1c0ba:	d106      	bne.n	1c0ca <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1c0bc:	2314      	movs	r3, #20
   1c0be:	18fb      	adds	r3, r7, r3
   1c0c0:	0018      	movs	r0, r3
   1c0c2:	4b62      	ldr	r3, [pc, #392]	; (1c24c <xQueueReceive+0x378>)
   1c0c4:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1c0c6:	2301      	movs	r3, #1
   1c0c8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1c0ca:	4b5f      	ldr	r3, [pc, #380]	; (1c248 <xQueueReceive+0x374>)
   1c0cc:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1c0ce:	4b60      	ldr	r3, [pc, #384]	; (1c250 <xQueueReceive+0x37c>)
   1c0d0:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1c0d2:	4b4f      	ldr	r3, [pc, #316]	; (1c210 <xQueueReceive+0x33c>)
   1c0d4:	4798      	blx	r3
   1c0d6:	6a3b      	ldr	r3, [r7, #32]
   1c0d8:	2244      	movs	r2, #68	; 0x44
   1c0da:	5c9b      	ldrb	r3, [r3, r2]
   1c0dc:	b25b      	sxtb	r3, r3
   1c0de:	3301      	adds	r3, #1
   1c0e0:	d103      	bne.n	1c0ea <xQueueReceive+0x216>
   1c0e2:	6a3b      	ldr	r3, [r7, #32]
   1c0e4:	2244      	movs	r2, #68	; 0x44
   1c0e6:	2100      	movs	r1, #0
   1c0e8:	5499      	strb	r1, [r3, r2]
   1c0ea:	6a3b      	ldr	r3, [r7, #32]
   1c0ec:	2245      	movs	r2, #69	; 0x45
   1c0ee:	5c9b      	ldrb	r3, [r3, r2]
   1c0f0:	b25b      	sxtb	r3, r3
   1c0f2:	3301      	adds	r3, #1
   1c0f4:	d103      	bne.n	1c0fe <xQueueReceive+0x22a>
   1c0f6:	6a3b      	ldr	r3, [r7, #32]
   1c0f8:	2245      	movs	r2, #69	; 0x45
   1c0fa:	2100      	movs	r1, #0
   1c0fc:	5499      	strb	r1, [r3, r2]
   1c0fe:	4b52      	ldr	r3, [pc, #328]	; (1c248 <xQueueReceive+0x374>)
   1c100:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1c102:	1d3a      	adds	r2, r7, #4
   1c104:	2314      	movs	r3, #20
   1c106:	18fb      	adds	r3, r7, r3
   1c108:	0011      	movs	r1, r2
   1c10a:	0018      	movs	r0, r3
   1c10c:	4b51      	ldr	r3, [pc, #324]	; (1c254 <xQueueReceive+0x380>)
   1c10e:	4798      	blx	r3
   1c110:	1e03      	subs	r3, r0, #0
   1c112:	d000      	beq.n	1c116 <xQueueReceive+0x242>
   1c114:	e0aa      	b.n	1c26c <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1c116:	6a3b      	ldr	r3, [r7, #32]
   1c118:	0018      	movs	r0, r3
   1c11a:	4b4f      	ldr	r3, [pc, #316]	; (1c258 <xQueueReceive+0x384>)
   1c11c:	4798      	blx	r3
   1c11e:	1e03      	subs	r3, r0, #0
   1c120:	d06d      	beq.n	1c1fe <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1c122:	4b3d      	ldr	r3, [pc, #244]	; (1c218 <xQueueReceive+0x344>)
   1c124:	4798      	blx	r3
   1c126:	0003      	movs	r3, r0
   1c128:	0018      	movs	r0, r3
   1c12a:	4b3c      	ldr	r3, [pc, #240]	; (1c21c <xQueueReceive+0x348>)
   1c12c:	4798      	blx	r3
   1c12e:	0003      	movs	r3, r0
   1c130:	001a      	movs	r2, r3
   1c132:	4b3b      	ldr	r3, [pc, #236]	; (1c220 <xQueueReceive+0x34c>)
   1c134:	881b      	ldrh	r3, [r3, #0]
   1c136:	4013      	ands	r3, r2
   1c138:	b29b      	uxth	r3, r3
   1c13a:	2b00      	cmp	r3, #0
   1c13c:	d029      	beq.n	1c192 <xQueueReceive+0x2be>
   1c13e:	6a3b      	ldr	r3, [r7, #32]
   1c140:	0018      	movs	r0, r3
   1c142:	4b38      	ldr	r3, [pc, #224]	; (1c224 <xQueueReceive+0x350>)
   1c144:	4798      	blx	r3
   1c146:	0003      	movs	r3, r0
   1c148:	001a      	movs	r2, r3
   1c14a:	4b35      	ldr	r3, [pc, #212]	; (1c220 <xQueueReceive+0x34c>)
   1c14c:	881b      	ldrh	r3, [r3, #0]
   1c14e:	4013      	ands	r3, r2
   1c150:	b29b      	uxth	r3, r3
   1c152:	2b00      	cmp	r3, #0
   1c154:	d01d      	beq.n	1c192 <xQueueReceive+0x2be>
   1c156:	6a3b      	ldr	r3, [r7, #32]
   1c158:	0018      	movs	r0, r3
   1c15a:	4b33      	ldr	r3, [pc, #204]	; (1c228 <xQueueReceive+0x354>)
   1c15c:	4798      	blx	r3
   1c15e:	0003      	movs	r3, r0
   1c160:	001a      	movs	r2, r3
   1c162:	4b32      	ldr	r3, [pc, #200]	; (1c22c <xQueueReceive+0x358>)
   1c164:	5c9b      	ldrb	r3, [r3, r2]
   1c166:	3368      	adds	r3, #104	; 0x68
   1c168:	b2db      	uxtb	r3, r3
   1c16a:	001d      	movs	r5, r3
   1c16c:	6a3b      	ldr	r3, [r7, #32]
   1c16e:	0018      	movs	r0, r3
   1c170:	4b2d      	ldr	r3, [pc, #180]	; (1c228 <xQueueReceive+0x354>)
   1c172:	4798      	blx	r3
   1c174:	0003      	movs	r3, r0
   1c176:	001a      	movs	r2, r3
   1c178:	4b2c      	ldr	r3, [pc, #176]	; (1c22c <xQueueReceive+0x358>)
   1c17a:	5c9c      	ldrb	r4, [r3, r2]
   1c17c:	6a3b      	ldr	r3, [r7, #32]
   1c17e:	0018      	movs	r0, r3
   1c180:	4b2b      	ldr	r3, [pc, #172]	; (1c230 <xQueueReceive+0x35c>)
   1c182:	4798      	blx	r3
   1c184:	0003      	movs	r3, r0
   1c186:	b2db      	uxtb	r3, r3
   1c188:	001a      	movs	r2, r3
   1c18a:	0021      	movs	r1, r4
   1c18c:	0028      	movs	r0, r5
   1c18e:	4b29      	ldr	r3, [pc, #164]	; (1c234 <xQueueReceive+0x360>)
   1c190:	4798      	blx	r3
   1c192:	6a3b      	ldr	r3, [r7, #32]
   1c194:	0018      	movs	r0, r3
   1c196:	4b24      	ldr	r3, [pc, #144]	; (1c228 <xQueueReceive+0x354>)
   1c198:	4798      	blx	r3
   1c19a:	0003      	movs	r3, r0
   1c19c:	001a      	movs	r2, r3
   1c19e:	4b23      	ldr	r3, [pc, #140]	; (1c22c <xQueueReceive+0x358>)
   1c1a0:	5c9b      	ldrb	r3, [r3, r2]
   1c1a2:	2b02      	cmp	r3, #2
   1c1a4:	d018      	beq.n	1c1d8 <xQueueReceive+0x304>
   1c1a6:	4b1c      	ldr	r3, [pc, #112]	; (1c218 <xQueueReceive+0x344>)
   1c1a8:	4798      	blx	r3
   1c1aa:	0003      	movs	r3, r0
   1c1ac:	0018      	movs	r0, r3
   1c1ae:	4b1b      	ldr	r3, [pc, #108]	; (1c21c <xQueueReceive+0x348>)
   1c1b0:	4798      	blx	r3
   1c1b2:	0003      	movs	r3, r0
   1c1b4:	001a      	movs	r2, r3
   1c1b6:	4b1a      	ldr	r3, [pc, #104]	; (1c220 <xQueueReceive+0x34c>)
   1c1b8:	881b      	ldrh	r3, [r3, #0]
   1c1ba:	4013      	ands	r3, r2
   1c1bc:	b29b      	uxth	r3, r3
   1c1be:	2b00      	cmp	r3, #0
   1c1c0:	d00a      	beq.n	1c1d8 <xQueueReceive+0x304>
   1c1c2:	4b15      	ldr	r3, [pc, #84]	; (1c218 <xQueueReceive+0x344>)
   1c1c4:	4798      	blx	r3
   1c1c6:	0003      	movs	r3, r0
   1c1c8:	0018      	movs	r0, r3
   1c1ca:	4b1b      	ldr	r3, [pc, #108]	; (1c238 <xQueueReceive+0x364>)
   1c1cc:	4798      	blx	r3
   1c1ce:	0003      	movs	r3, r0
   1c1d0:	b2db      	uxtb	r3, r3
   1c1d2:	0018      	movs	r0, r3
   1c1d4:	4b21      	ldr	r3, [pc, #132]	; (1c25c <xQueueReceive+0x388>)
   1c1d6:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1c1d8:	6a3b      	ldr	r3, [r7, #32]
   1c1da:	3324      	adds	r3, #36	; 0x24
   1c1dc:	687a      	ldr	r2, [r7, #4]
   1c1de:	0011      	movs	r1, r2
   1c1e0:	0018      	movs	r0, r3
   1c1e2:	4b1f      	ldr	r3, [pc, #124]	; (1c260 <xQueueReceive+0x38c>)
   1c1e4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1c1e6:	6a3b      	ldr	r3, [r7, #32]
   1c1e8:	0018      	movs	r0, r3
   1c1ea:	4b1e      	ldr	r3, [pc, #120]	; (1c264 <xQueueReceive+0x390>)
   1c1ec:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1c1ee:	4b1e      	ldr	r3, [pc, #120]	; (1c268 <xQueueReceive+0x394>)
   1c1f0:	4798      	blx	r3
   1c1f2:	1e03      	subs	r3, r0, #0
   1c1f4:	d000      	beq.n	1c1f8 <xQueueReceive+0x324>
   1c1f6:	e698      	b.n	1bf2a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1c1f8:	4b12      	ldr	r3, [pc, #72]	; (1c244 <xQueueReceive+0x370>)
   1c1fa:	4798      	blx	r3
   1c1fc:	e695      	b.n	1bf2a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1c1fe:	6a3b      	ldr	r3, [r7, #32]
   1c200:	0018      	movs	r0, r3
   1c202:	4b18      	ldr	r3, [pc, #96]	; (1c264 <xQueueReceive+0x390>)
   1c204:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1c206:	4b18      	ldr	r3, [pc, #96]	; (1c268 <xQueueReceive+0x394>)
   1c208:	4798      	blx	r3
   1c20a:	e68e      	b.n	1bf2a <xQueueReceive+0x56>
   1c20c:	0001dda9 	.word	0x0001dda9
   1c210:	0001b089 	.word	0x0001b089
   1c214:	0001c935 	.word	0x0001c935
   1c218:	0001931d 	.word	0x0001931d
   1c21c:	00019081 	.word	0x00019081
   1c220:	20000110 	.word	0x20000110
   1c224:	00019141 	.word	0x00019141
   1c228:	00019041 	.word	0x00019041
   1c22c:	20000104 	.word	0x20000104
   1c230:	00019121 	.word	0x00019121
   1c234:	00019a79 	.word	0x00019a79
   1c238:	00019061 	.word	0x00019061
   1c23c:	0001a0d5 	.word	0x0001a0d5
   1c240:	0001d919 	.word	0x0001d919
   1c244:	0001b071 	.word	0x0001b071
   1c248:	0001b0ad 	.word	0x0001b0ad
   1c24c:	0001da59 	.word	0x0001da59
   1c250:	0001d341 	.word	0x0001d341
   1c254:	0001da81 	.word	0x0001da81
   1c258:	0001ca75 	.word	0x0001ca75
   1c25c:	0001a211 	.word	0x0001a211
   1c260:	0001d7f5 	.word	0x0001d7f5
   1c264:	0001c985 	.word	0x0001c985
   1c268:	0001d359 	.word	0x0001d359
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1c26c:	6a3b      	ldr	r3, [r7, #32]
   1c26e:	0018      	movs	r0, r3
   1c270:	4b23      	ldr	r3, [pc, #140]	; (1c300 <xQueueReceive+0x42c>)
   1c272:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1c274:	4b23      	ldr	r3, [pc, #140]	; (1c304 <xQueueReceive+0x430>)
   1c276:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1c278:	6a3b      	ldr	r3, [r7, #32]
   1c27a:	0018      	movs	r0, r3
   1c27c:	4b22      	ldr	r3, [pc, #136]	; (1c308 <xQueueReceive+0x434>)
   1c27e:	4798      	blx	r3
   1c280:	1e03      	subs	r3, r0, #0
   1c282:	d100      	bne.n	1c286 <xQueueReceive+0x3b2>
   1c284:	e651      	b.n	1bf2a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1c286:	4b21      	ldr	r3, [pc, #132]	; (1c30c <xQueueReceive+0x438>)
   1c288:	4798      	blx	r3
   1c28a:	0003      	movs	r3, r0
   1c28c:	0018      	movs	r0, r3
   1c28e:	4b20      	ldr	r3, [pc, #128]	; (1c310 <xQueueReceive+0x43c>)
   1c290:	4798      	blx	r3
   1c292:	0003      	movs	r3, r0
   1c294:	001a      	movs	r2, r3
   1c296:	4b1f      	ldr	r3, [pc, #124]	; (1c314 <xQueueReceive+0x440>)
   1c298:	881b      	ldrh	r3, [r3, #0]
   1c29a:	4013      	ands	r3, r2
   1c29c:	b29b      	uxth	r3, r3
   1c29e:	2b00      	cmp	r3, #0
   1c2a0:	d029      	beq.n	1c2f6 <xQueueReceive+0x422>
   1c2a2:	6a3b      	ldr	r3, [r7, #32]
   1c2a4:	0018      	movs	r0, r3
   1c2a6:	4b1c      	ldr	r3, [pc, #112]	; (1c318 <xQueueReceive+0x444>)
   1c2a8:	4798      	blx	r3
   1c2aa:	0003      	movs	r3, r0
   1c2ac:	001a      	movs	r2, r3
   1c2ae:	4b19      	ldr	r3, [pc, #100]	; (1c314 <xQueueReceive+0x440>)
   1c2b0:	881b      	ldrh	r3, [r3, #0]
   1c2b2:	4013      	ands	r3, r2
   1c2b4:	b29b      	uxth	r3, r3
   1c2b6:	2b00      	cmp	r3, #0
   1c2b8:	d01d      	beq.n	1c2f6 <xQueueReceive+0x422>
   1c2ba:	6a3b      	ldr	r3, [r7, #32]
   1c2bc:	0018      	movs	r0, r3
   1c2be:	4b17      	ldr	r3, [pc, #92]	; (1c31c <xQueueReceive+0x448>)
   1c2c0:	4798      	blx	r3
   1c2c2:	0003      	movs	r3, r0
   1c2c4:	001a      	movs	r2, r3
   1c2c6:	4b16      	ldr	r3, [pc, #88]	; (1c320 <xQueueReceive+0x44c>)
   1c2c8:	5c9b      	ldrb	r3, [r3, r2]
   1c2ca:	3350      	adds	r3, #80	; 0x50
   1c2cc:	b2db      	uxtb	r3, r3
   1c2ce:	001d      	movs	r5, r3
   1c2d0:	6a3b      	ldr	r3, [r7, #32]
   1c2d2:	0018      	movs	r0, r3
   1c2d4:	4b11      	ldr	r3, [pc, #68]	; (1c31c <xQueueReceive+0x448>)
   1c2d6:	4798      	blx	r3
   1c2d8:	0003      	movs	r3, r0
   1c2da:	001a      	movs	r2, r3
   1c2dc:	4b10      	ldr	r3, [pc, #64]	; (1c320 <xQueueReceive+0x44c>)
   1c2de:	5c9c      	ldrb	r4, [r3, r2]
   1c2e0:	6a3b      	ldr	r3, [r7, #32]
   1c2e2:	0018      	movs	r0, r3
   1c2e4:	4b0f      	ldr	r3, [pc, #60]	; (1c324 <xQueueReceive+0x450>)
   1c2e6:	4798      	blx	r3
   1c2e8:	0003      	movs	r3, r0
   1c2ea:	b2db      	uxtb	r3, r3
   1c2ec:	001a      	movs	r2, r3
   1c2ee:	0021      	movs	r1, r4
   1c2f0:	0028      	movs	r0, r5
   1c2f2:	4b0d      	ldr	r3, [pc, #52]	; (1c328 <xQueueReceive+0x454>)
   1c2f4:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1c2f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1c2f8:	0018      	movs	r0, r3
   1c2fa:	46bd      	mov	sp, r7
   1c2fc:	b00a      	add	sp, #40	; 0x28
   1c2fe:	bdb0      	pop	{r4, r5, r7, pc}
   1c300:	0001c985 	.word	0x0001c985
   1c304:	0001d359 	.word	0x0001d359
   1c308:	0001ca75 	.word	0x0001ca75
   1c30c:	0001931d 	.word	0x0001931d
   1c310:	00019081 	.word	0x00019081
   1c314:	20000110 	.word	0x20000110
   1c318:	00019141 	.word	0x00019141
   1c31c:	00019041 	.word	0x00019041
   1c320:	20000104 	.word	0x20000104
   1c324:	00019121 	.word	0x00019121
   1c328:	00019a79 	.word	0x00019a79

0001c32c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1c32c:	b5b0      	push	{r4, r5, r7, lr}
   1c32e:	b08a      	sub	sp, #40	; 0x28
   1c330:	af00      	add	r7, sp, #0
   1c332:	6078      	str	r0, [r7, #4]
   1c334:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1c336:	2300      	movs	r3, #0
   1c338:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1c33a:	687b      	ldr	r3, [r7, #4]
   1c33c:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1c33e:	2300      	movs	r3, #0
   1c340:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1c342:	69fb      	ldr	r3, [r7, #28]
   1c344:	2b00      	cmp	r3, #0
   1c346:	d101      	bne.n	1c34c <xQueueSemaphoreTake+0x20>
   1c348:	b672      	cpsid	i
   1c34a:	e7fe      	b.n	1c34a <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1c34c:	69fb      	ldr	r3, [r7, #28]
   1c34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c350:	2b00      	cmp	r3, #0
   1c352:	d001      	beq.n	1c358 <xQueueSemaphoreTake+0x2c>
   1c354:	b672      	cpsid	i
   1c356:	e7fe      	b.n	1c356 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1c358:	4bcb      	ldr	r3, [pc, #812]	; (1c688 <xQueueSemaphoreTake+0x35c>)
   1c35a:	4798      	blx	r3
   1c35c:	1e03      	subs	r3, r0, #0
   1c35e:	d102      	bne.n	1c366 <xQueueSemaphoreTake+0x3a>
   1c360:	683b      	ldr	r3, [r7, #0]
   1c362:	2b00      	cmp	r3, #0
   1c364:	d101      	bne.n	1c36a <xQueueSemaphoreTake+0x3e>
   1c366:	2301      	movs	r3, #1
   1c368:	e000      	b.n	1c36c <xQueueSemaphoreTake+0x40>
   1c36a:	2300      	movs	r3, #0
   1c36c:	2b00      	cmp	r3, #0
   1c36e:	d101      	bne.n	1c374 <xQueueSemaphoreTake+0x48>
   1c370:	b672      	cpsid	i
   1c372:	e7fe      	b.n	1c372 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1c374:	4bc5      	ldr	r3, [pc, #788]	; (1c68c <xQueueSemaphoreTake+0x360>)
   1c376:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1c378:	69fb      	ldr	r3, [r7, #28]
   1c37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c37c:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1c37e:	69bb      	ldr	r3, [r7, #24]
   1c380:	2b00      	cmp	r3, #0
   1c382:	d100      	bne.n	1c386 <xQueueSemaphoreTake+0x5a>
   1c384:	e080      	b.n	1c488 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1c386:	4bc2      	ldr	r3, [pc, #776]	; (1c690 <xQueueSemaphoreTake+0x364>)
   1c388:	4798      	blx	r3
   1c38a:	0003      	movs	r3, r0
   1c38c:	0018      	movs	r0, r3
   1c38e:	4bc1      	ldr	r3, [pc, #772]	; (1c694 <xQueueSemaphoreTake+0x368>)
   1c390:	4798      	blx	r3
   1c392:	0003      	movs	r3, r0
   1c394:	001a      	movs	r2, r3
   1c396:	4bc0      	ldr	r3, [pc, #768]	; (1c698 <xQueueSemaphoreTake+0x36c>)
   1c398:	881b      	ldrh	r3, [r3, #0]
   1c39a:	4013      	ands	r3, r2
   1c39c:	b29b      	uxth	r3, r3
   1c39e:	2b00      	cmp	r3, #0
   1c3a0:	d029      	beq.n	1c3f6 <xQueueSemaphoreTake+0xca>
   1c3a2:	69fb      	ldr	r3, [r7, #28]
   1c3a4:	0018      	movs	r0, r3
   1c3a6:	4bbd      	ldr	r3, [pc, #756]	; (1c69c <xQueueSemaphoreTake+0x370>)
   1c3a8:	4798      	blx	r3
   1c3aa:	0003      	movs	r3, r0
   1c3ac:	001a      	movs	r2, r3
   1c3ae:	4bba      	ldr	r3, [pc, #744]	; (1c698 <xQueueSemaphoreTake+0x36c>)
   1c3b0:	881b      	ldrh	r3, [r3, #0]
   1c3b2:	4013      	ands	r3, r2
   1c3b4:	b29b      	uxth	r3, r3
   1c3b6:	2b00      	cmp	r3, #0
   1c3b8:	d01d      	beq.n	1c3f6 <xQueueSemaphoreTake+0xca>
   1c3ba:	69fb      	ldr	r3, [r7, #28]
   1c3bc:	0018      	movs	r0, r3
   1c3be:	4bb8      	ldr	r3, [pc, #736]	; (1c6a0 <xQueueSemaphoreTake+0x374>)
   1c3c0:	4798      	blx	r3
   1c3c2:	0003      	movs	r3, r0
   1c3c4:	001a      	movs	r2, r3
   1c3c6:	4bb7      	ldr	r3, [pc, #732]	; (1c6a4 <xQueueSemaphoreTake+0x378>)
   1c3c8:	5c9b      	ldrb	r3, [r3, r2]
   1c3ca:	3328      	adds	r3, #40	; 0x28
   1c3cc:	b2db      	uxtb	r3, r3
   1c3ce:	001d      	movs	r5, r3
   1c3d0:	69fb      	ldr	r3, [r7, #28]
   1c3d2:	0018      	movs	r0, r3
   1c3d4:	4bb2      	ldr	r3, [pc, #712]	; (1c6a0 <xQueueSemaphoreTake+0x374>)
   1c3d6:	4798      	blx	r3
   1c3d8:	0003      	movs	r3, r0
   1c3da:	001a      	movs	r2, r3
   1c3dc:	4bb1      	ldr	r3, [pc, #708]	; (1c6a4 <xQueueSemaphoreTake+0x378>)
   1c3de:	5c9c      	ldrb	r4, [r3, r2]
   1c3e0:	69fb      	ldr	r3, [r7, #28]
   1c3e2:	0018      	movs	r0, r3
   1c3e4:	4bb0      	ldr	r3, [pc, #704]	; (1c6a8 <xQueueSemaphoreTake+0x37c>)
   1c3e6:	4798      	blx	r3
   1c3e8:	0003      	movs	r3, r0
   1c3ea:	b2db      	uxtb	r3, r3
   1c3ec:	001a      	movs	r2, r3
   1c3ee:	0021      	movs	r1, r4
   1c3f0:	0028      	movs	r0, r5
   1c3f2:	4bae      	ldr	r3, [pc, #696]	; (1c6ac <xQueueSemaphoreTake+0x380>)
   1c3f4:	4798      	blx	r3
   1c3f6:	69fb      	ldr	r3, [r7, #28]
   1c3f8:	0018      	movs	r0, r3
   1c3fa:	4ba9      	ldr	r3, [pc, #676]	; (1c6a0 <xQueueSemaphoreTake+0x374>)
   1c3fc:	4798      	blx	r3
   1c3fe:	0003      	movs	r3, r0
   1c400:	001a      	movs	r2, r3
   1c402:	4ba8      	ldr	r3, [pc, #672]	; (1c6a4 <xQueueSemaphoreTake+0x378>)
   1c404:	5c9c      	ldrb	r4, [r3, r2]
   1c406:	69fb      	ldr	r3, [r7, #28]
   1c408:	0018      	movs	r0, r3
   1c40a:	4ba7      	ldr	r3, [pc, #668]	; (1c6a8 <xQueueSemaphoreTake+0x37c>)
   1c40c:	4798      	blx	r3
   1c40e:	0003      	movs	r3, r0
   1c410:	b2dd      	uxtb	r5, r3
   1c412:	69fb      	ldr	r3, [r7, #28]
   1c414:	0018      	movs	r0, r3
   1c416:	4ba2      	ldr	r3, [pc, #648]	; (1c6a0 <xQueueSemaphoreTake+0x374>)
   1c418:	4798      	blx	r3
   1c41a:	0003      	movs	r3, r0
   1c41c:	001a      	movs	r2, r3
   1c41e:	4ba1      	ldr	r3, [pc, #644]	; (1c6a4 <xQueueSemaphoreTake+0x378>)
   1c420:	5c9b      	ldrb	r3, [r3, r2]
   1c422:	2b02      	cmp	r3, #2
   1c424:	d108      	bne.n	1c438 <xQueueSemaphoreTake+0x10c>
   1c426:	4b9a      	ldr	r3, [pc, #616]	; (1c690 <xQueueSemaphoreTake+0x364>)
   1c428:	4798      	blx	r3
   1c42a:	0003      	movs	r3, r0
   1c42c:	0018      	movs	r0, r3
   1c42e:	4ba0      	ldr	r3, [pc, #640]	; (1c6b0 <xQueueSemaphoreTake+0x384>)
   1c430:	4798      	blx	r3
   1c432:	0003      	movs	r3, r0
   1c434:	b2db      	uxtb	r3, r3
   1c436:	e004      	b.n	1c442 <xQueueSemaphoreTake+0x116>
   1c438:	69fb      	ldr	r3, [r7, #28]
   1c43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c43c:	b2db      	uxtb	r3, r3
   1c43e:	3b01      	subs	r3, #1
   1c440:	b2db      	uxtb	r3, r3
   1c442:	001a      	movs	r2, r3
   1c444:	0029      	movs	r1, r5
   1c446:	0020      	movs	r0, r4
   1c448:	4b9a      	ldr	r3, [pc, #616]	; (1c6b4 <xQueueSemaphoreTake+0x388>)
   1c44a:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1c44c:	69bb      	ldr	r3, [r7, #24]
   1c44e:	1e5a      	subs	r2, r3, #1
   1c450:	69fb      	ldr	r3, [r7, #28]
   1c452:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1c454:	69fb      	ldr	r3, [r7, #28]
   1c456:	681b      	ldr	r3, [r3, #0]
   1c458:	2b00      	cmp	r3, #0
   1c45a:	d104      	bne.n	1c466 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1c45c:	4b96      	ldr	r3, [pc, #600]	; (1c6b8 <xQueueSemaphoreTake+0x38c>)
   1c45e:	4798      	blx	r3
   1c460:	0002      	movs	r2, r0
   1c462:	69fb      	ldr	r3, [r7, #28]
   1c464:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1c466:	69fb      	ldr	r3, [r7, #28]
   1c468:	691b      	ldr	r3, [r3, #16]
   1c46a:	2b00      	cmp	r3, #0
   1c46c:	d008      	beq.n	1c480 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1c46e:	69fb      	ldr	r3, [r7, #28]
   1c470:	3310      	adds	r3, #16
   1c472:	0018      	movs	r0, r3
   1c474:	4b91      	ldr	r3, [pc, #580]	; (1c6bc <xQueueSemaphoreTake+0x390>)
   1c476:	4798      	blx	r3
   1c478:	1e03      	subs	r3, r0, #0
   1c47a:	d001      	beq.n	1c480 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1c47c:	4b90      	ldr	r3, [pc, #576]	; (1c6c0 <xQueueSemaphoreTake+0x394>)
   1c47e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1c480:	4b90      	ldr	r3, [pc, #576]	; (1c6c4 <xQueueSemaphoreTake+0x398>)
   1c482:	4798      	blx	r3
				return pdPASS;
   1c484:	2301      	movs	r3, #1
   1c486:	e18b      	b.n	1c7a0 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1c488:	683b      	ldr	r3, [r7, #0]
   1c48a:	2b00      	cmp	r3, #0
   1c48c:	d140      	bne.n	1c510 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1c48e:	6a3b      	ldr	r3, [r7, #32]
   1c490:	2b00      	cmp	r3, #0
   1c492:	d001      	beq.n	1c498 <xQueueSemaphoreTake+0x16c>
   1c494:	b672      	cpsid	i
   1c496:	e7fe      	b.n	1c496 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1c498:	4b8a      	ldr	r3, [pc, #552]	; (1c6c4 <xQueueSemaphoreTake+0x398>)
   1c49a:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1c49c:	4b7c      	ldr	r3, [pc, #496]	; (1c690 <xQueueSemaphoreTake+0x364>)
   1c49e:	4798      	blx	r3
   1c4a0:	0003      	movs	r3, r0
   1c4a2:	0018      	movs	r0, r3
   1c4a4:	4b7b      	ldr	r3, [pc, #492]	; (1c694 <xQueueSemaphoreTake+0x368>)
   1c4a6:	4798      	blx	r3
   1c4a8:	0003      	movs	r3, r0
   1c4aa:	001a      	movs	r2, r3
   1c4ac:	4b7a      	ldr	r3, [pc, #488]	; (1c698 <xQueueSemaphoreTake+0x36c>)
   1c4ae:	881b      	ldrh	r3, [r3, #0]
   1c4b0:	4013      	ands	r3, r2
   1c4b2:	b29b      	uxth	r3, r3
   1c4b4:	2b00      	cmp	r3, #0
   1c4b6:	d029      	beq.n	1c50c <xQueueSemaphoreTake+0x1e0>
   1c4b8:	69fb      	ldr	r3, [r7, #28]
   1c4ba:	0018      	movs	r0, r3
   1c4bc:	4b77      	ldr	r3, [pc, #476]	; (1c69c <xQueueSemaphoreTake+0x370>)
   1c4be:	4798      	blx	r3
   1c4c0:	0003      	movs	r3, r0
   1c4c2:	001a      	movs	r2, r3
   1c4c4:	4b74      	ldr	r3, [pc, #464]	; (1c698 <xQueueSemaphoreTake+0x36c>)
   1c4c6:	881b      	ldrh	r3, [r3, #0]
   1c4c8:	4013      	ands	r3, r2
   1c4ca:	b29b      	uxth	r3, r3
   1c4cc:	2b00      	cmp	r3, #0
   1c4ce:	d01d      	beq.n	1c50c <xQueueSemaphoreTake+0x1e0>
   1c4d0:	69fb      	ldr	r3, [r7, #28]
   1c4d2:	0018      	movs	r0, r3
   1c4d4:	4b72      	ldr	r3, [pc, #456]	; (1c6a0 <xQueueSemaphoreTake+0x374>)
   1c4d6:	4798      	blx	r3
   1c4d8:	0003      	movs	r3, r0
   1c4da:	001a      	movs	r2, r3
   1c4dc:	4b71      	ldr	r3, [pc, #452]	; (1c6a4 <xQueueSemaphoreTake+0x378>)
   1c4de:	5c9b      	ldrb	r3, [r3, r2]
   1c4e0:	3350      	adds	r3, #80	; 0x50
   1c4e2:	b2db      	uxtb	r3, r3
   1c4e4:	001d      	movs	r5, r3
   1c4e6:	69fb      	ldr	r3, [r7, #28]
   1c4e8:	0018      	movs	r0, r3
   1c4ea:	4b6d      	ldr	r3, [pc, #436]	; (1c6a0 <xQueueSemaphoreTake+0x374>)
   1c4ec:	4798      	blx	r3
   1c4ee:	0003      	movs	r3, r0
   1c4f0:	001a      	movs	r2, r3
   1c4f2:	4b6c      	ldr	r3, [pc, #432]	; (1c6a4 <xQueueSemaphoreTake+0x378>)
   1c4f4:	5c9c      	ldrb	r4, [r3, r2]
   1c4f6:	69fb      	ldr	r3, [r7, #28]
   1c4f8:	0018      	movs	r0, r3
   1c4fa:	4b6b      	ldr	r3, [pc, #428]	; (1c6a8 <xQueueSemaphoreTake+0x37c>)
   1c4fc:	4798      	blx	r3
   1c4fe:	0003      	movs	r3, r0
   1c500:	b2db      	uxtb	r3, r3
   1c502:	001a      	movs	r2, r3
   1c504:	0021      	movs	r1, r4
   1c506:	0028      	movs	r0, r5
   1c508:	4b68      	ldr	r3, [pc, #416]	; (1c6ac <xQueueSemaphoreTake+0x380>)
   1c50a:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1c50c:	2300      	movs	r3, #0
   1c50e:	e147      	b.n	1c7a0 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1c510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c512:	2b00      	cmp	r3, #0
   1c514:	d106      	bne.n	1c524 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1c516:	230c      	movs	r3, #12
   1c518:	18fb      	adds	r3, r7, r3
   1c51a:	0018      	movs	r0, r3
   1c51c:	4b6a      	ldr	r3, [pc, #424]	; (1c6c8 <xQueueSemaphoreTake+0x39c>)
   1c51e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1c520:	2301      	movs	r3, #1
   1c522:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1c524:	4b67      	ldr	r3, [pc, #412]	; (1c6c4 <xQueueSemaphoreTake+0x398>)
   1c526:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1c528:	4b68      	ldr	r3, [pc, #416]	; (1c6cc <xQueueSemaphoreTake+0x3a0>)
   1c52a:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1c52c:	4b57      	ldr	r3, [pc, #348]	; (1c68c <xQueueSemaphoreTake+0x360>)
   1c52e:	4798      	blx	r3
   1c530:	69fb      	ldr	r3, [r7, #28]
   1c532:	2244      	movs	r2, #68	; 0x44
   1c534:	5c9b      	ldrb	r3, [r3, r2]
   1c536:	b25b      	sxtb	r3, r3
   1c538:	3301      	adds	r3, #1
   1c53a:	d103      	bne.n	1c544 <xQueueSemaphoreTake+0x218>
   1c53c:	69fb      	ldr	r3, [r7, #28]
   1c53e:	2244      	movs	r2, #68	; 0x44
   1c540:	2100      	movs	r1, #0
   1c542:	5499      	strb	r1, [r3, r2]
   1c544:	69fb      	ldr	r3, [r7, #28]
   1c546:	2245      	movs	r2, #69	; 0x45
   1c548:	5c9b      	ldrb	r3, [r3, r2]
   1c54a:	b25b      	sxtb	r3, r3
   1c54c:	3301      	adds	r3, #1
   1c54e:	d103      	bne.n	1c558 <xQueueSemaphoreTake+0x22c>
   1c550:	69fb      	ldr	r3, [r7, #28]
   1c552:	2245      	movs	r2, #69	; 0x45
   1c554:	2100      	movs	r1, #0
   1c556:	5499      	strb	r1, [r3, r2]
   1c558:	4b5a      	ldr	r3, [pc, #360]	; (1c6c4 <xQueueSemaphoreTake+0x398>)
   1c55a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1c55c:	003a      	movs	r2, r7
   1c55e:	230c      	movs	r3, #12
   1c560:	18fb      	adds	r3, r7, r3
   1c562:	0011      	movs	r1, r2
   1c564:	0018      	movs	r0, r3
   1c566:	4b5a      	ldr	r3, [pc, #360]	; (1c6d0 <xQueueSemaphoreTake+0x3a4>)
   1c568:	4798      	blx	r3
   1c56a:	1e03      	subs	r3, r0, #0
   1c56c:	d000      	beq.n	1c570 <xQueueSemaphoreTake+0x244>
   1c56e:	e0bd      	b.n	1c6ec <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1c570:	69fb      	ldr	r3, [r7, #28]
   1c572:	0018      	movs	r0, r3
   1c574:	4b57      	ldr	r3, [pc, #348]	; (1c6d4 <xQueueSemaphoreTake+0x3a8>)
   1c576:	4798      	blx	r3
   1c578:	1e03      	subs	r3, r0, #0
   1c57a:	d100      	bne.n	1c57e <xQueueSemaphoreTake+0x252>
   1c57c:	e07c      	b.n	1c678 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1c57e:	4b44      	ldr	r3, [pc, #272]	; (1c690 <xQueueSemaphoreTake+0x364>)
   1c580:	4798      	blx	r3
   1c582:	0003      	movs	r3, r0
   1c584:	0018      	movs	r0, r3
   1c586:	4b43      	ldr	r3, [pc, #268]	; (1c694 <xQueueSemaphoreTake+0x368>)
   1c588:	4798      	blx	r3
   1c58a:	0003      	movs	r3, r0
   1c58c:	001a      	movs	r2, r3
   1c58e:	4b42      	ldr	r3, [pc, #264]	; (1c698 <xQueueSemaphoreTake+0x36c>)
   1c590:	881b      	ldrh	r3, [r3, #0]
   1c592:	4013      	ands	r3, r2
   1c594:	b29b      	uxth	r3, r3
   1c596:	2b00      	cmp	r3, #0
   1c598:	d029      	beq.n	1c5ee <xQueueSemaphoreTake+0x2c2>
   1c59a:	69fb      	ldr	r3, [r7, #28]
   1c59c:	0018      	movs	r0, r3
   1c59e:	4b3f      	ldr	r3, [pc, #252]	; (1c69c <xQueueSemaphoreTake+0x370>)
   1c5a0:	4798      	blx	r3
   1c5a2:	0003      	movs	r3, r0
   1c5a4:	001a      	movs	r2, r3
   1c5a6:	4b3c      	ldr	r3, [pc, #240]	; (1c698 <xQueueSemaphoreTake+0x36c>)
   1c5a8:	881b      	ldrh	r3, [r3, #0]
   1c5aa:	4013      	ands	r3, r2
   1c5ac:	b29b      	uxth	r3, r3
   1c5ae:	2b00      	cmp	r3, #0
   1c5b0:	d01d      	beq.n	1c5ee <xQueueSemaphoreTake+0x2c2>
   1c5b2:	69fb      	ldr	r3, [r7, #28]
   1c5b4:	0018      	movs	r0, r3
   1c5b6:	4b3a      	ldr	r3, [pc, #232]	; (1c6a0 <xQueueSemaphoreTake+0x374>)
   1c5b8:	4798      	blx	r3
   1c5ba:	0003      	movs	r3, r0
   1c5bc:	001a      	movs	r2, r3
   1c5be:	4b39      	ldr	r3, [pc, #228]	; (1c6a4 <xQueueSemaphoreTake+0x378>)
   1c5c0:	5c9b      	ldrb	r3, [r3, r2]
   1c5c2:	3368      	adds	r3, #104	; 0x68
   1c5c4:	b2db      	uxtb	r3, r3
   1c5c6:	001d      	movs	r5, r3
   1c5c8:	69fb      	ldr	r3, [r7, #28]
   1c5ca:	0018      	movs	r0, r3
   1c5cc:	4b34      	ldr	r3, [pc, #208]	; (1c6a0 <xQueueSemaphoreTake+0x374>)
   1c5ce:	4798      	blx	r3
   1c5d0:	0003      	movs	r3, r0
   1c5d2:	001a      	movs	r2, r3
   1c5d4:	4b33      	ldr	r3, [pc, #204]	; (1c6a4 <xQueueSemaphoreTake+0x378>)
   1c5d6:	5c9c      	ldrb	r4, [r3, r2]
   1c5d8:	69fb      	ldr	r3, [r7, #28]
   1c5da:	0018      	movs	r0, r3
   1c5dc:	4b32      	ldr	r3, [pc, #200]	; (1c6a8 <xQueueSemaphoreTake+0x37c>)
   1c5de:	4798      	blx	r3
   1c5e0:	0003      	movs	r3, r0
   1c5e2:	b2db      	uxtb	r3, r3
   1c5e4:	001a      	movs	r2, r3
   1c5e6:	0021      	movs	r1, r4
   1c5e8:	0028      	movs	r0, r5
   1c5ea:	4b30      	ldr	r3, [pc, #192]	; (1c6ac <xQueueSemaphoreTake+0x380>)
   1c5ec:	4798      	blx	r3
   1c5ee:	69fb      	ldr	r3, [r7, #28]
   1c5f0:	0018      	movs	r0, r3
   1c5f2:	4b2b      	ldr	r3, [pc, #172]	; (1c6a0 <xQueueSemaphoreTake+0x374>)
   1c5f4:	4798      	blx	r3
   1c5f6:	0003      	movs	r3, r0
   1c5f8:	001a      	movs	r2, r3
   1c5fa:	4b2a      	ldr	r3, [pc, #168]	; (1c6a4 <xQueueSemaphoreTake+0x378>)
   1c5fc:	5c9b      	ldrb	r3, [r3, r2]
   1c5fe:	2b02      	cmp	r3, #2
   1c600:	d018      	beq.n	1c634 <xQueueSemaphoreTake+0x308>
   1c602:	4b23      	ldr	r3, [pc, #140]	; (1c690 <xQueueSemaphoreTake+0x364>)
   1c604:	4798      	blx	r3
   1c606:	0003      	movs	r3, r0
   1c608:	0018      	movs	r0, r3
   1c60a:	4b22      	ldr	r3, [pc, #136]	; (1c694 <xQueueSemaphoreTake+0x368>)
   1c60c:	4798      	blx	r3
   1c60e:	0003      	movs	r3, r0
   1c610:	001a      	movs	r2, r3
   1c612:	4b21      	ldr	r3, [pc, #132]	; (1c698 <xQueueSemaphoreTake+0x36c>)
   1c614:	881b      	ldrh	r3, [r3, #0]
   1c616:	4013      	ands	r3, r2
   1c618:	b29b      	uxth	r3, r3
   1c61a:	2b00      	cmp	r3, #0
   1c61c:	d00a      	beq.n	1c634 <xQueueSemaphoreTake+0x308>
   1c61e:	4b1c      	ldr	r3, [pc, #112]	; (1c690 <xQueueSemaphoreTake+0x364>)
   1c620:	4798      	blx	r3
   1c622:	0003      	movs	r3, r0
   1c624:	0018      	movs	r0, r3
   1c626:	4b22      	ldr	r3, [pc, #136]	; (1c6b0 <xQueueSemaphoreTake+0x384>)
   1c628:	4798      	blx	r3
   1c62a:	0003      	movs	r3, r0
   1c62c:	b2db      	uxtb	r3, r3
   1c62e:	0018      	movs	r0, r3
   1c630:	4b29      	ldr	r3, [pc, #164]	; (1c6d8 <xQueueSemaphoreTake+0x3ac>)
   1c632:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1c634:	69fb      	ldr	r3, [r7, #28]
   1c636:	681b      	ldr	r3, [r3, #0]
   1c638:	2b00      	cmp	r3, #0
   1c63a:	d10a      	bne.n	1c652 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1c63c:	4b13      	ldr	r3, [pc, #76]	; (1c68c <xQueueSemaphoreTake+0x360>)
   1c63e:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1c640:	69fb      	ldr	r3, [r7, #28]
   1c642:	685b      	ldr	r3, [r3, #4]
   1c644:	0018      	movs	r0, r3
   1c646:	4b25      	ldr	r3, [pc, #148]	; (1c6dc <xQueueSemaphoreTake+0x3b0>)
   1c648:	4798      	blx	r3
   1c64a:	0003      	movs	r3, r0
   1c64c:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1c64e:	4b1d      	ldr	r3, [pc, #116]	; (1c6c4 <xQueueSemaphoreTake+0x398>)
   1c650:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1c652:	69fb      	ldr	r3, [r7, #28]
   1c654:	3324      	adds	r3, #36	; 0x24
   1c656:	683a      	ldr	r2, [r7, #0]
   1c658:	0011      	movs	r1, r2
   1c65a:	0018      	movs	r0, r3
   1c65c:	4b20      	ldr	r3, [pc, #128]	; (1c6e0 <xQueueSemaphoreTake+0x3b4>)
   1c65e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1c660:	69fb      	ldr	r3, [r7, #28]
   1c662:	0018      	movs	r0, r3
   1c664:	4b1f      	ldr	r3, [pc, #124]	; (1c6e4 <xQueueSemaphoreTake+0x3b8>)
   1c666:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1c668:	4b1f      	ldr	r3, [pc, #124]	; (1c6e8 <xQueueSemaphoreTake+0x3bc>)
   1c66a:	4798      	blx	r3
   1c66c:	1e03      	subs	r3, r0, #0
   1c66e:	d000      	beq.n	1c672 <xQueueSemaphoreTake+0x346>
   1c670:	e680      	b.n	1c374 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1c672:	4b13      	ldr	r3, [pc, #76]	; (1c6c0 <xQueueSemaphoreTake+0x394>)
   1c674:	4798      	blx	r3
   1c676:	e67d      	b.n	1c374 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1c678:	69fb      	ldr	r3, [r7, #28]
   1c67a:	0018      	movs	r0, r3
   1c67c:	4b19      	ldr	r3, [pc, #100]	; (1c6e4 <xQueueSemaphoreTake+0x3b8>)
   1c67e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1c680:	4b19      	ldr	r3, [pc, #100]	; (1c6e8 <xQueueSemaphoreTake+0x3bc>)
   1c682:	4798      	blx	r3
   1c684:	e676      	b.n	1c374 <xQueueSemaphoreTake+0x48>
   1c686:	46c0      	nop			; (mov r8, r8)
   1c688:	0001dda9 	.word	0x0001dda9
   1c68c:	0001b089 	.word	0x0001b089
   1c690:	0001931d 	.word	0x0001931d
   1c694:	00019081 	.word	0x00019081
   1c698:	20000110 	.word	0x20000110
   1c69c:	00019141 	.word	0x00019141
   1c6a0:	00019041 	.word	0x00019041
   1c6a4:	20000104 	.word	0x20000104
   1c6a8:	00019121 	.word	0x00019121
   1c6ac:	00019a79 	.word	0x00019a79
   1c6b0:	00019061 	.word	0x00019061
   1c6b4:	0001a0d5 	.word	0x0001a0d5
   1c6b8:	0001e275 	.word	0x0001e275
   1c6bc:	0001d919 	.word	0x0001d919
   1c6c0:	0001b071 	.word	0x0001b071
   1c6c4:	0001b0ad 	.word	0x0001b0ad
   1c6c8:	0001da59 	.word	0x0001da59
   1c6cc:	0001d341 	.word	0x0001d341
   1c6d0:	0001da81 	.word	0x0001da81
   1c6d4:	0001ca75 	.word	0x0001ca75
   1c6d8:	0001a211 	.word	0x0001a211
   1c6dc:	0001dde1 	.word	0x0001dde1
   1c6e0:	0001d7f5 	.word	0x0001d7f5
   1c6e4:	0001c985 	.word	0x0001c985
   1c6e8:	0001d359 	.word	0x0001d359
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1c6ec:	69fb      	ldr	r3, [r7, #28]
   1c6ee:	0018      	movs	r0, r3
   1c6f0:	4b2d      	ldr	r3, [pc, #180]	; (1c7a8 <xQueueSemaphoreTake+0x47c>)
   1c6f2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1c6f4:	4b2d      	ldr	r3, [pc, #180]	; (1c7ac <xQueueSemaphoreTake+0x480>)
   1c6f6:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1c6f8:	69fb      	ldr	r3, [r7, #28]
   1c6fa:	0018      	movs	r0, r3
   1c6fc:	4b2c      	ldr	r3, [pc, #176]	; (1c7b0 <xQueueSemaphoreTake+0x484>)
   1c6fe:	4798      	blx	r3
   1c700:	1e03      	subs	r3, r0, #0
   1c702:	d100      	bne.n	1c706 <xQueueSemaphoreTake+0x3da>
   1c704:	e636      	b.n	1c374 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1c706:	6a3b      	ldr	r3, [r7, #32]
   1c708:	2b00      	cmp	r3, #0
   1c70a:	d010      	beq.n	1c72e <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1c70c:	4b29      	ldr	r3, [pc, #164]	; (1c7b4 <xQueueSemaphoreTake+0x488>)
   1c70e:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1c710:	69fb      	ldr	r3, [r7, #28]
   1c712:	0018      	movs	r0, r3
   1c714:	4b28      	ldr	r3, [pc, #160]	; (1c7b8 <xQueueSemaphoreTake+0x48c>)
   1c716:	4798      	blx	r3
   1c718:	0003      	movs	r3, r0
   1c71a:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1c71c:	69fb      	ldr	r3, [r7, #28]
   1c71e:	685b      	ldr	r3, [r3, #4]
   1c720:	697a      	ldr	r2, [r7, #20]
   1c722:	0011      	movs	r1, r2
   1c724:	0018      	movs	r0, r3
   1c726:	4b25      	ldr	r3, [pc, #148]	; (1c7bc <xQueueSemaphoreTake+0x490>)
   1c728:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1c72a:	4b25      	ldr	r3, [pc, #148]	; (1c7c0 <xQueueSemaphoreTake+0x494>)
   1c72c:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1c72e:	4b25      	ldr	r3, [pc, #148]	; (1c7c4 <xQueueSemaphoreTake+0x498>)
   1c730:	4798      	blx	r3
   1c732:	0003      	movs	r3, r0
   1c734:	0018      	movs	r0, r3
   1c736:	4b24      	ldr	r3, [pc, #144]	; (1c7c8 <xQueueSemaphoreTake+0x49c>)
   1c738:	4798      	blx	r3
   1c73a:	0003      	movs	r3, r0
   1c73c:	001a      	movs	r2, r3
   1c73e:	4b23      	ldr	r3, [pc, #140]	; (1c7cc <xQueueSemaphoreTake+0x4a0>)
   1c740:	881b      	ldrh	r3, [r3, #0]
   1c742:	4013      	ands	r3, r2
   1c744:	b29b      	uxth	r3, r3
   1c746:	2b00      	cmp	r3, #0
   1c748:	d029      	beq.n	1c79e <xQueueSemaphoreTake+0x472>
   1c74a:	69fb      	ldr	r3, [r7, #28]
   1c74c:	0018      	movs	r0, r3
   1c74e:	4b20      	ldr	r3, [pc, #128]	; (1c7d0 <xQueueSemaphoreTake+0x4a4>)
   1c750:	4798      	blx	r3
   1c752:	0003      	movs	r3, r0
   1c754:	001a      	movs	r2, r3
   1c756:	4b1d      	ldr	r3, [pc, #116]	; (1c7cc <xQueueSemaphoreTake+0x4a0>)
   1c758:	881b      	ldrh	r3, [r3, #0]
   1c75a:	4013      	ands	r3, r2
   1c75c:	b29b      	uxth	r3, r3
   1c75e:	2b00      	cmp	r3, #0
   1c760:	d01d      	beq.n	1c79e <xQueueSemaphoreTake+0x472>
   1c762:	69fb      	ldr	r3, [r7, #28]
   1c764:	0018      	movs	r0, r3
   1c766:	4b1b      	ldr	r3, [pc, #108]	; (1c7d4 <xQueueSemaphoreTake+0x4a8>)
   1c768:	4798      	blx	r3
   1c76a:	0003      	movs	r3, r0
   1c76c:	001a      	movs	r2, r3
   1c76e:	4b1a      	ldr	r3, [pc, #104]	; (1c7d8 <xQueueSemaphoreTake+0x4ac>)
   1c770:	5c9b      	ldrb	r3, [r3, r2]
   1c772:	3350      	adds	r3, #80	; 0x50
   1c774:	b2db      	uxtb	r3, r3
   1c776:	001d      	movs	r5, r3
   1c778:	69fb      	ldr	r3, [r7, #28]
   1c77a:	0018      	movs	r0, r3
   1c77c:	4b15      	ldr	r3, [pc, #84]	; (1c7d4 <xQueueSemaphoreTake+0x4a8>)
   1c77e:	4798      	blx	r3
   1c780:	0003      	movs	r3, r0
   1c782:	001a      	movs	r2, r3
   1c784:	4b14      	ldr	r3, [pc, #80]	; (1c7d8 <xQueueSemaphoreTake+0x4ac>)
   1c786:	5c9c      	ldrb	r4, [r3, r2]
   1c788:	69fb      	ldr	r3, [r7, #28]
   1c78a:	0018      	movs	r0, r3
   1c78c:	4b13      	ldr	r3, [pc, #76]	; (1c7dc <xQueueSemaphoreTake+0x4b0>)
   1c78e:	4798      	blx	r3
   1c790:	0003      	movs	r3, r0
   1c792:	b2db      	uxtb	r3, r3
   1c794:	001a      	movs	r2, r3
   1c796:	0021      	movs	r1, r4
   1c798:	0028      	movs	r0, r5
   1c79a:	4b11      	ldr	r3, [pc, #68]	; (1c7e0 <xQueueSemaphoreTake+0x4b4>)
   1c79c:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1c79e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1c7a0:	0018      	movs	r0, r3
   1c7a2:	46bd      	mov	sp, r7
   1c7a4:	b00a      	add	sp, #40	; 0x28
   1c7a6:	bdb0      	pop	{r4, r5, r7, pc}
   1c7a8:	0001c985 	.word	0x0001c985
   1c7ac:	0001d359 	.word	0x0001d359
   1c7b0:	0001ca75 	.word	0x0001ca75
   1c7b4:	0001b089 	.word	0x0001b089
   1c7b8:	0001c827 	.word	0x0001c827
   1c7bc:	0001e0d9 	.word	0x0001e0d9
   1c7c0:	0001b0ad 	.word	0x0001b0ad
   1c7c4:	0001931d 	.word	0x0001931d
   1c7c8:	00019081 	.word	0x00019081
   1c7cc:	20000110 	.word	0x20000110
   1c7d0:	00019141 	.word	0x00019141
   1c7d4:	00019041 	.word	0x00019041
   1c7d8:	20000104 	.word	0x20000104
   1c7dc:	00019121 	.word	0x00019121
   1c7e0:	00019a79 	.word	0x00019a79

0001c7e4 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1c7e4:	b580      	push	{r7, lr}
   1c7e6:	b082      	sub	sp, #8
   1c7e8:	af00      	add	r7, sp, #0
   1c7ea:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1c7ec:	687b      	ldr	r3, [r7, #4]
   1c7ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1c7f0:	0018      	movs	r0, r3
   1c7f2:	46bd      	mov	sp, r7
   1c7f4:	b002      	add	sp, #8
   1c7f6:	bd80      	pop	{r7, pc}

0001c7f8 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1c7f8:	b580      	push	{r7, lr}
   1c7fa:	b082      	sub	sp, #8
   1c7fc:	af00      	add	r7, sp, #0
   1c7fe:	6078      	str	r0, [r7, #4]
   1c800:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1c802:	687b      	ldr	r3, [r7, #4]
   1c804:	683a      	ldr	r2, [r7, #0]
   1c806:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1c808:	46c0      	nop			; (mov r8, r8)
   1c80a:	46bd      	mov	sp, r7
   1c80c:	b002      	add	sp, #8
   1c80e:	bd80      	pop	{r7, pc}

0001c810 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1c810:	b580      	push	{r7, lr}
   1c812:	b082      	sub	sp, #8
   1c814:	af00      	add	r7, sp, #0
   1c816:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1c818:	687b      	ldr	r3, [r7, #4]
   1c81a:	2250      	movs	r2, #80	; 0x50
   1c81c:	5c9b      	ldrb	r3, [r3, r2]
	}
   1c81e:	0018      	movs	r0, r3
   1c820:	46bd      	mov	sp, r7
   1c822:	b002      	add	sp, #8
   1c824:	bd80      	pop	{r7, pc}

0001c826 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1c826:	b580      	push	{r7, lr}
   1c828:	b084      	sub	sp, #16
   1c82a:	af00      	add	r7, sp, #0
   1c82c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1c82e:	687b      	ldr	r3, [r7, #4]
   1c830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c832:	2b00      	cmp	r3, #0
   1c834:	d006      	beq.n	1c844 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1c836:	687b      	ldr	r3, [r7, #4]
   1c838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c83a:	681b      	ldr	r3, [r3, #0]
   1c83c:	2205      	movs	r2, #5
   1c83e:	1ad3      	subs	r3, r2, r3
   1c840:	60fb      	str	r3, [r7, #12]
   1c842:	e001      	b.n	1c848 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1c844:	2300      	movs	r3, #0
   1c846:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1c848:	68fb      	ldr	r3, [r7, #12]
	}
   1c84a:	0018      	movs	r0, r3
   1c84c:	46bd      	mov	sp, r7
   1c84e:	b004      	add	sp, #16
   1c850:	bd80      	pop	{r7, pc}
	...

0001c854 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1c854:	b580      	push	{r7, lr}
   1c856:	b086      	sub	sp, #24
   1c858:	af00      	add	r7, sp, #0
   1c85a:	60f8      	str	r0, [r7, #12]
   1c85c:	60b9      	str	r1, [r7, #8]
   1c85e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1c860:	2300      	movs	r3, #0
   1c862:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1c864:	68fb      	ldr	r3, [r7, #12]
   1c866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c868:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1c86a:	68fb      	ldr	r3, [r7, #12]
   1c86c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c86e:	2b00      	cmp	r3, #0
   1c870:	d10e      	bne.n	1c890 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1c872:	68fb      	ldr	r3, [r7, #12]
   1c874:	681b      	ldr	r3, [r3, #0]
   1c876:	2b00      	cmp	r3, #0
   1c878:	d14e      	bne.n	1c918 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1c87a:	68fb      	ldr	r3, [r7, #12]
   1c87c:	685b      	ldr	r3, [r3, #4]
   1c87e:	0018      	movs	r0, r3
   1c880:	4b2a      	ldr	r3, [pc, #168]	; (1c92c <prvCopyDataToQueue+0xd8>)
   1c882:	4798      	blx	r3
   1c884:	0003      	movs	r3, r0
   1c886:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1c888:	68fb      	ldr	r3, [r7, #12]
   1c88a:	2200      	movs	r2, #0
   1c88c:	605a      	str	r2, [r3, #4]
   1c88e:	e043      	b.n	1c918 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1c890:	687b      	ldr	r3, [r7, #4]
   1c892:	2b00      	cmp	r3, #0
   1c894:	d119      	bne.n	1c8ca <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1c896:	68fb      	ldr	r3, [r7, #12]
   1c898:	6898      	ldr	r0, [r3, #8]
   1c89a:	68fb      	ldr	r3, [r7, #12]
   1c89c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c89e:	68bb      	ldr	r3, [r7, #8]
   1c8a0:	0019      	movs	r1, r3
   1c8a2:	4b23      	ldr	r3, [pc, #140]	; (1c930 <prvCopyDataToQueue+0xdc>)
   1c8a4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1c8a6:	68fb      	ldr	r3, [r7, #12]
   1c8a8:	689a      	ldr	r2, [r3, #8]
   1c8aa:	68fb      	ldr	r3, [r7, #12]
   1c8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c8ae:	18d2      	adds	r2, r2, r3
   1c8b0:	68fb      	ldr	r3, [r7, #12]
   1c8b2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1c8b4:	68fb      	ldr	r3, [r7, #12]
   1c8b6:	689a      	ldr	r2, [r3, #8]
   1c8b8:	68fb      	ldr	r3, [r7, #12]
   1c8ba:	685b      	ldr	r3, [r3, #4]
   1c8bc:	429a      	cmp	r2, r3
   1c8be:	d32b      	bcc.n	1c918 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1c8c0:	68fb      	ldr	r3, [r7, #12]
   1c8c2:	681a      	ldr	r2, [r3, #0]
   1c8c4:	68fb      	ldr	r3, [r7, #12]
   1c8c6:	609a      	str	r2, [r3, #8]
   1c8c8:	e026      	b.n	1c918 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c8ca:	68fb      	ldr	r3, [r7, #12]
   1c8cc:	68d8      	ldr	r0, [r3, #12]
   1c8ce:	68fb      	ldr	r3, [r7, #12]
   1c8d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c8d2:	68bb      	ldr	r3, [r7, #8]
   1c8d4:	0019      	movs	r1, r3
   1c8d6:	4b16      	ldr	r3, [pc, #88]	; (1c930 <prvCopyDataToQueue+0xdc>)
   1c8d8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1c8da:	68fb      	ldr	r3, [r7, #12]
   1c8dc:	68da      	ldr	r2, [r3, #12]
   1c8de:	68fb      	ldr	r3, [r7, #12]
   1c8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c8e2:	425b      	negs	r3, r3
   1c8e4:	18d2      	adds	r2, r2, r3
   1c8e6:	68fb      	ldr	r3, [r7, #12]
   1c8e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1c8ea:	68fb      	ldr	r3, [r7, #12]
   1c8ec:	68da      	ldr	r2, [r3, #12]
   1c8ee:	68fb      	ldr	r3, [r7, #12]
   1c8f0:	681b      	ldr	r3, [r3, #0]
   1c8f2:	429a      	cmp	r2, r3
   1c8f4:	d207      	bcs.n	1c906 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1c8f6:	68fb      	ldr	r3, [r7, #12]
   1c8f8:	685a      	ldr	r2, [r3, #4]
   1c8fa:	68fb      	ldr	r3, [r7, #12]
   1c8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c8fe:	425b      	negs	r3, r3
   1c900:	18d2      	adds	r2, r2, r3
   1c902:	68fb      	ldr	r3, [r7, #12]
   1c904:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1c906:	687b      	ldr	r3, [r7, #4]
   1c908:	2b02      	cmp	r3, #2
   1c90a:	d105      	bne.n	1c918 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1c90c:	693b      	ldr	r3, [r7, #16]
   1c90e:	2b00      	cmp	r3, #0
   1c910:	d002      	beq.n	1c918 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1c912:	693b      	ldr	r3, [r7, #16]
   1c914:	3b01      	subs	r3, #1
   1c916:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1c918:	693b      	ldr	r3, [r7, #16]
   1c91a:	1c5a      	adds	r2, r3, #1
   1c91c:	68fb      	ldr	r3, [r7, #12]
   1c91e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1c920:	697b      	ldr	r3, [r7, #20]
}
   1c922:	0018      	movs	r0, r3
   1c924:	46bd      	mov	sp, r7
   1c926:	b006      	add	sp, #24
   1c928:	bd80      	pop	{r7, pc}
   1c92a:	46c0      	nop			; (mov r8, r8)
   1c92c:	0001df71 	.word	0x0001df71
   1c930:	00036409 	.word	0x00036409

0001c934 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1c934:	b580      	push	{r7, lr}
   1c936:	b082      	sub	sp, #8
   1c938:	af00      	add	r7, sp, #0
   1c93a:	6078      	str	r0, [r7, #4]
   1c93c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1c93e:	687b      	ldr	r3, [r7, #4]
   1c940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c942:	2b00      	cmp	r3, #0
   1c944:	d018      	beq.n	1c978 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1c946:	687b      	ldr	r3, [r7, #4]
   1c948:	68da      	ldr	r2, [r3, #12]
   1c94a:	687b      	ldr	r3, [r7, #4]
   1c94c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c94e:	18d2      	adds	r2, r2, r3
   1c950:	687b      	ldr	r3, [r7, #4]
   1c952:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1c954:	687b      	ldr	r3, [r7, #4]
   1c956:	68da      	ldr	r2, [r3, #12]
   1c958:	687b      	ldr	r3, [r7, #4]
   1c95a:	685b      	ldr	r3, [r3, #4]
   1c95c:	429a      	cmp	r2, r3
   1c95e:	d303      	bcc.n	1c968 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1c960:	687b      	ldr	r3, [r7, #4]
   1c962:	681a      	ldr	r2, [r3, #0]
   1c964:	687b      	ldr	r3, [r7, #4]
   1c966:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1c968:	687b      	ldr	r3, [r7, #4]
   1c96a:	68d9      	ldr	r1, [r3, #12]
   1c96c:	687b      	ldr	r3, [r7, #4]
   1c96e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c970:	683b      	ldr	r3, [r7, #0]
   1c972:	0018      	movs	r0, r3
   1c974:	4b02      	ldr	r3, [pc, #8]	; (1c980 <prvCopyDataFromQueue+0x4c>)
   1c976:	4798      	blx	r3
	}
}
   1c978:	46c0      	nop			; (mov r8, r8)
   1c97a:	46bd      	mov	sp, r7
   1c97c:	b002      	add	sp, #8
   1c97e:	bd80      	pop	{r7, pc}
   1c980:	00036409 	.word	0x00036409

0001c984 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1c984:	b580      	push	{r7, lr}
   1c986:	b084      	sub	sp, #16
   1c988:	af00      	add	r7, sp, #0
   1c98a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1c98c:	4b34      	ldr	r3, [pc, #208]	; (1ca60 <prvUnlockQueue+0xdc>)
   1c98e:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1c990:	230f      	movs	r3, #15
   1c992:	18fb      	adds	r3, r7, r3
   1c994:	687a      	ldr	r2, [r7, #4]
   1c996:	2145      	movs	r1, #69	; 0x45
   1c998:	5c52      	ldrb	r2, [r2, r1]
   1c99a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1c99c:	e022      	b.n	1c9e4 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1c99e:	687b      	ldr	r3, [r7, #4]
   1c9a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c9a2:	2b00      	cmp	r3, #0
   1c9a4:	d009      	beq.n	1c9ba <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1c9a6:	687b      	ldr	r3, [r7, #4]
   1c9a8:	2100      	movs	r1, #0
   1c9aa:	0018      	movs	r0, r3
   1c9ac:	4b2d      	ldr	r3, [pc, #180]	; (1ca64 <prvUnlockQueue+0xe0>)
   1c9ae:	4798      	blx	r3
   1c9b0:	1e03      	subs	r3, r0, #0
   1c9b2:	d00f      	beq.n	1c9d4 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1c9b4:	4b2c      	ldr	r3, [pc, #176]	; (1ca68 <prvUnlockQueue+0xe4>)
   1c9b6:	4798      	blx	r3
   1c9b8:	e00c      	b.n	1c9d4 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1c9ba:	687b      	ldr	r3, [r7, #4]
   1c9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c9be:	2b00      	cmp	r3, #0
   1c9c0:	d017      	beq.n	1c9f2 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1c9c2:	687b      	ldr	r3, [r7, #4]
   1c9c4:	3324      	adds	r3, #36	; 0x24
   1c9c6:	0018      	movs	r0, r3
   1c9c8:	4b28      	ldr	r3, [pc, #160]	; (1ca6c <prvUnlockQueue+0xe8>)
   1c9ca:	4798      	blx	r3
   1c9cc:	1e03      	subs	r3, r0, #0
   1c9ce:	d001      	beq.n	1c9d4 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1c9d0:	4b25      	ldr	r3, [pc, #148]	; (1ca68 <prvUnlockQueue+0xe4>)
   1c9d2:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1c9d4:	230f      	movs	r3, #15
   1c9d6:	18fb      	adds	r3, r7, r3
   1c9d8:	781b      	ldrb	r3, [r3, #0]
   1c9da:	3b01      	subs	r3, #1
   1c9dc:	b2da      	uxtb	r2, r3
   1c9de:	230f      	movs	r3, #15
   1c9e0:	18fb      	adds	r3, r7, r3
   1c9e2:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1c9e4:	230f      	movs	r3, #15
   1c9e6:	18fb      	adds	r3, r7, r3
   1c9e8:	781b      	ldrb	r3, [r3, #0]
   1c9ea:	b25b      	sxtb	r3, r3
   1c9ec:	2b00      	cmp	r3, #0
   1c9ee:	dcd6      	bgt.n	1c99e <prvUnlockQueue+0x1a>
   1c9f0:	e000      	b.n	1c9f4 <prvUnlockQueue+0x70>
						break;
   1c9f2:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1c9f4:	687b      	ldr	r3, [r7, #4]
   1c9f6:	2245      	movs	r2, #69	; 0x45
   1c9f8:	21ff      	movs	r1, #255	; 0xff
   1c9fa:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1c9fc:	4b1c      	ldr	r3, [pc, #112]	; (1ca70 <prvUnlockQueue+0xec>)
   1c9fe:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1ca00:	4b17      	ldr	r3, [pc, #92]	; (1ca60 <prvUnlockQueue+0xdc>)
   1ca02:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1ca04:	230e      	movs	r3, #14
   1ca06:	18fb      	adds	r3, r7, r3
   1ca08:	687a      	ldr	r2, [r7, #4]
   1ca0a:	2144      	movs	r1, #68	; 0x44
   1ca0c:	5c52      	ldrb	r2, [r2, r1]
   1ca0e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1ca10:	e014      	b.n	1ca3c <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1ca12:	687b      	ldr	r3, [r7, #4]
   1ca14:	691b      	ldr	r3, [r3, #16]
   1ca16:	2b00      	cmp	r3, #0
   1ca18:	d017      	beq.n	1ca4a <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1ca1a:	687b      	ldr	r3, [r7, #4]
   1ca1c:	3310      	adds	r3, #16
   1ca1e:	0018      	movs	r0, r3
   1ca20:	4b12      	ldr	r3, [pc, #72]	; (1ca6c <prvUnlockQueue+0xe8>)
   1ca22:	4798      	blx	r3
   1ca24:	1e03      	subs	r3, r0, #0
   1ca26:	d001      	beq.n	1ca2c <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1ca28:	4b0f      	ldr	r3, [pc, #60]	; (1ca68 <prvUnlockQueue+0xe4>)
   1ca2a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1ca2c:	230e      	movs	r3, #14
   1ca2e:	18fb      	adds	r3, r7, r3
   1ca30:	781b      	ldrb	r3, [r3, #0]
   1ca32:	3b01      	subs	r3, #1
   1ca34:	b2da      	uxtb	r2, r3
   1ca36:	230e      	movs	r3, #14
   1ca38:	18fb      	adds	r3, r7, r3
   1ca3a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1ca3c:	230e      	movs	r3, #14
   1ca3e:	18fb      	adds	r3, r7, r3
   1ca40:	781b      	ldrb	r3, [r3, #0]
   1ca42:	b25b      	sxtb	r3, r3
   1ca44:	2b00      	cmp	r3, #0
   1ca46:	dce4      	bgt.n	1ca12 <prvUnlockQueue+0x8e>
   1ca48:	e000      	b.n	1ca4c <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1ca4a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1ca4c:	687b      	ldr	r3, [r7, #4]
   1ca4e:	2244      	movs	r2, #68	; 0x44
   1ca50:	21ff      	movs	r1, #255	; 0xff
   1ca52:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1ca54:	4b06      	ldr	r3, [pc, #24]	; (1ca70 <prvUnlockQueue+0xec>)
   1ca56:	4798      	blx	r3
}
   1ca58:	46c0      	nop			; (mov r8, r8)
   1ca5a:	46bd      	mov	sp, r7
   1ca5c:	b004      	add	sp, #16
   1ca5e:	bd80      	pop	{r7, pc}
   1ca60:	0001b089 	.word	0x0001b089
   1ca64:	0001cb59 	.word	0x0001cb59
   1ca68:	0001db2d 	.word	0x0001db2d
   1ca6c:	0001d919 	.word	0x0001d919
   1ca70:	0001b0ad 	.word	0x0001b0ad

0001ca74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1ca74:	b580      	push	{r7, lr}
   1ca76:	b084      	sub	sp, #16
   1ca78:	af00      	add	r7, sp, #0
   1ca7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1ca7c:	4b08      	ldr	r3, [pc, #32]	; (1caa0 <prvIsQueueEmpty+0x2c>)
   1ca7e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1ca80:	687b      	ldr	r3, [r7, #4]
   1ca82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ca84:	2b00      	cmp	r3, #0
   1ca86:	d102      	bne.n	1ca8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1ca88:	2301      	movs	r3, #1
   1ca8a:	60fb      	str	r3, [r7, #12]
   1ca8c:	e001      	b.n	1ca92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1ca8e:	2300      	movs	r3, #0
   1ca90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1ca92:	4b04      	ldr	r3, [pc, #16]	; (1caa4 <prvIsQueueEmpty+0x30>)
   1ca94:	4798      	blx	r3

	return xReturn;
   1ca96:	68fb      	ldr	r3, [r7, #12]
}
   1ca98:	0018      	movs	r0, r3
   1ca9a:	46bd      	mov	sp, r7
   1ca9c:	b004      	add	sp, #16
   1ca9e:	bd80      	pop	{r7, pc}
   1caa0:	0001b089 	.word	0x0001b089
   1caa4:	0001b0ad 	.word	0x0001b0ad

0001caa8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1caa8:	b580      	push	{r7, lr}
   1caaa:	b084      	sub	sp, #16
   1caac:	af00      	add	r7, sp, #0
   1caae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1cab0:	4b09      	ldr	r3, [pc, #36]	; (1cad8 <prvIsQueueFull+0x30>)
   1cab2:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1cab4:	687b      	ldr	r3, [r7, #4]
   1cab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1cab8:	687b      	ldr	r3, [r7, #4]
   1caba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1cabc:	429a      	cmp	r2, r3
   1cabe:	d102      	bne.n	1cac6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1cac0:	2301      	movs	r3, #1
   1cac2:	60fb      	str	r3, [r7, #12]
   1cac4:	e001      	b.n	1caca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1cac6:	2300      	movs	r3, #0
   1cac8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1caca:	4b04      	ldr	r3, [pc, #16]	; (1cadc <prvIsQueueFull+0x34>)
   1cacc:	4798      	blx	r3

	return xReturn;
   1cace:	68fb      	ldr	r3, [r7, #12]
}
   1cad0:	0018      	movs	r0, r3
   1cad2:	46bd      	mov	sp, r7
   1cad4:	b004      	add	sp, #16
   1cad6:	bd80      	pop	{r7, pc}
   1cad8:	0001b089 	.word	0x0001b089
   1cadc:	0001b0ad 	.word	0x0001b0ad

0001cae0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1cae0:	b580      	push	{r7, lr}
   1cae2:	b086      	sub	sp, #24
   1cae4:	af00      	add	r7, sp, #0
   1cae6:	60f8      	str	r0, [r7, #12]
   1cae8:	60b9      	str	r1, [r7, #8]
   1caea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1caec:	68fb      	ldr	r3, [r7, #12]
   1caee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1caf0:	4b15      	ldr	r3, [pc, #84]	; (1cb48 <vQueueWaitForMessageRestricted+0x68>)
   1caf2:	4798      	blx	r3
   1caf4:	697b      	ldr	r3, [r7, #20]
   1caf6:	2244      	movs	r2, #68	; 0x44
   1caf8:	5c9b      	ldrb	r3, [r3, r2]
   1cafa:	b25b      	sxtb	r3, r3
   1cafc:	3301      	adds	r3, #1
   1cafe:	d103      	bne.n	1cb08 <vQueueWaitForMessageRestricted+0x28>
   1cb00:	697b      	ldr	r3, [r7, #20]
   1cb02:	2244      	movs	r2, #68	; 0x44
   1cb04:	2100      	movs	r1, #0
   1cb06:	5499      	strb	r1, [r3, r2]
   1cb08:	697b      	ldr	r3, [r7, #20]
   1cb0a:	2245      	movs	r2, #69	; 0x45
   1cb0c:	5c9b      	ldrb	r3, [r3, r2]
   1cb0e:	b25b      	sxtb	r3, r3
   1cb10:	3301      	adds	r3, #1
   1cb12:	d103      	bne.n	1cb1c <vQueueWaitForMessageRestricted+0x3c>
   1cb14:	697b      	ldr	r3, [r7, #20]
   1cb16:	2245      	movs	r2, #69	; 0x45
   1cb18:	2100      	movs	r1, #0
   1cb1a:	5499      	strb	r1, [r3, r2]
   1cb1c:	4b0b      	ldr	r3, [pc, #44]	; (1cb4c <vQueueWaitForMessageRestricted+0x6c>)
   1cb1e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1cb20:	697b      	ldr	r3, [r7, #20]
   1cb22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1cb24:	2b00      	cmp	r3, #0
   1cb26:	d106      	bne.n	1cb36 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1cb28:	697b      	ldr	r3, [r7, #20]
   1cb2a:	3324      	adds	r3, #36	; 0x24
   1cb2c:	687a      	ldr	r2, [r7, #4]
   1cb2e:	68b9      	ldr	r1, [r7, #8]
   1cb30:	0018      	movs	r0, r3
   1cb32:	4b07      	ldr	r3, [pc, #28]	; (1cb50 <vQueueWaitForMessageRestricted+0x70>)
   1cb34:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1cb36:	697b      	ldr	r3, [r7, #20]
   1cb38:	0018      	movs	r0, r3
   1cb3a:	4b06      	ldr	r3, [pc, #24]	; (1cb54 <vQueueWaitForMessageRestricted+0x74>)
   1cb3c:	4798      	blx	r3
	}
   1cb3e:	46c0      	nop			; (mov r8, r8)
   1cb40:	46bd      	mov	sp, r7
   1cb42:	b006      	add	sp, #24
   1cb44:	bd80      	pop	{r7, pc}
   1cb46:	46c0      	nop			; (mov r8, r8)
   1cb48:	0001b089 	.word	0x0001b089
   1cb4c:	0001b0ad 	.word	0x0001b0ad
   1cb50:	0001d839 	.word	0x0001d839
   1cb54:	0001c985 	.word	0x0001c985

0001cb58 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1cb58:	b5b0      	push	{r4, r5, r7, lr}
   1cb5a:	b086      	sub	sp, #24
   1cb5c:	af00      	add	r7, sp, #0
   1cb5e:	6078      	str	r0, [r7, #4]
   1cb60:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1cb62:	687b      	ldr	r3, [r7, #4]
   1cb64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1cb66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1cb68:	2300      	movs	r3, #0
   1cb6a:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1cb6c:	693b      	ldr	r3, [r7, #16]
   1cb6e:	2b00      	cmp	r3, #0
   1cb70:	d101      	bne.n	1cb76 <prvNotifyQueueSetContainer+0x1e>
   1cb72:	b672      	cpsid	i
   1cb74:	e7fe      	b.n	1cb74 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1cb76:	693b      	ldr	r3, [r7, #16]
   1cb78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1cb7a:	693b      	ldr	r3, [r7, #16]
   1cb7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1cb7e:	429a      	cmp	r2, r3
   1cb80:	d301      	bcc.n	1cb86 <prvNotifyQueueSetContainer+0x2e>
   1cb82:	b672      	cpsid	i
   1cb84:	e7fe      	b.n	1cb84 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1cb86:	693b      	ldr	r3, [r7, #16]
   1cb88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1cb8a:	693b      	ldr	r3, [r7, #16]
   1cb8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1cb8e:	429a      	cmp	r2, r3
   1cb90:	d300      	bcc.n	1cb94 <prvNotifyQueueSetContainer+0x3c>
   1cb92:	e08b      	b.n	1ccac <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1cb94:	230f      	movs	r3, #15
   1cb96:	18fb      	adds	r3, r7, r3
   1cb98:	693a      	ldr	r2, [r7, #16]
   1cb9a:	2145      	movs	r1, #69	; 0x45
   1cb9c:	5c52      	ldrb	r2, [r2, r1]
   1cb9e:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1cba0:	4b45      	ldr	r3, [pc, #276]	; (1ccb8 <prvNotifyQueueSetContainer+0x160>)
   1cba2:	4798      	blx	r3
   1cba4:	0003      	movs	r3, r0
   1cba6:	0018      	movs	r0, r3
   1cba8:	4b44      	ldr	r3, [pc, #272]	; (1ccbc <prvNotifyQueueSetContainer+0x164>)
   1cbaa:	4798      	blx	r3
   1cbac:	0003      	movs	r3, r0
   1cbae:	001a      	movs	r2, r3
   1cbb0:	4b43      	ldr	r3, [pc, #268]	; (1ccc0 <prvNotifyQueueSetContainer+0x168>)
   1cbb2:	881b      	ldrh	r3, [r3, #0]
   1cbb4:	4013      	ands	r3, r2
   1cbb6:	b29b      	uxth	r3, r3
   1cbb8:	2b00      	cmp	r3, #0
   1cbba:	d02e      	beq.n	1cc1a <prvNotifyQueueSetContainer+0xc2>
   1cbbc:	693b      	ldr	r3, [r7, #16]
   1cbbe:	0018      	movs	r0, r3
   1cbc0:	4b40      	ldr	r3, [pc, #256]	; (1ccc4 <prvNotifyQueueSetContainer+0x16c>)
   1cbc2:	4798      	blx	r3
   1cbc4:	0003      	movs	r3, r0
   1cbc6:	001a      	movs	r2, r3
   1cbc8:	4b3d      	ldr	r3, [pc, #244]	; (1ccc0 <prvNotifyQueueSetContainer+0x168>)
   1cbca:	881b      	ldrh	r3, [r3, #0]
   1cbcc:	4013      	ands	r3, r2
   1cbce:	b29b      	uxth	r3, r3
   1cbd0:	2b00      	cmp	r3, #0
   1cbd2:	d022      	beq.n	1cc1a <prvNotifyQueueSetContainer+0xc2>
   1cbd4:	683b      	ldr	r3, [r7, #0]
   1cbd6:	2b00      	cmp	r3, #0
   1cbd8:	d10b      	bne.n	1cbf2 <prvNotifyQueueSetContainer+0x9a>
   1cbda:	693b      	ldr	r3, [r7, #16]
   1cbdc:	0018      	movs	r0, r3
   1cbde:	4b3a      	ldr	r3, [pc, #232]	; (1ccc8 <prvNotifyQueueSetContainer+0x170>)
   1cbe0:	4798      	blx	r3
   1cbe2:	0003      	movs	r3, r0
   1cbe4:	001a      	movs	r2, r3
   1cbe6:	4b39      	ldr	r3, [pc, #228]	; (1cccc <prvNotifyQueueSetContainer+0x174>)
   1cbe8:	5c9b      	ldrb	r3, [r3, r2]
   1cbea:	3320      	adds	r3, #32
   1cbec:	b2db      	uxtb	r3, r3
   1cbee:	001d      	movs	r5, r3
   1cbf0:	e000      	b.n	1cbf4 <prvNotifyQueueSetContainer+0x9c>
   1cbf2:	2525      	movs	r5, #37	; 0x25
   1cbf4:	693b      	ldr	r3, [r7, #16]
   1cbf6:	0018      	movs	r0, r3
   1cbf8:	4b33      	ldr	r3, [pc, #204]	; (1ccc8 <prvNotifyQueueSetContainer+0x170>)
   1cbfa:	4798      	blx	r3
   1cbfc:	0003      	movs	r3, r0
   1cbfe:	001a      	movs	r2, r3
   1cc00:	4b32      	ldr	r3, [pc, #200]	; (1cccc <prvNotifyQueueSetContainer+0x174>)
   1cc02:	5c9c      	ldrb	r4, [r3, r2]
   1cc04:	693b      	ldr	r3, [r7, #16]
   1cc06:	0018      	movs	r0, r3
   1cc08:	4b31      	ldr	r3, [pc, #196]	; (1ccd0 <prvNotifyQueueSetContainer+0x178>)
   1cc0a:	4798      	blx	r3
   1cc0c:	0003      	movs	r3, r0
   1cc0e:	b2db      	uxtb	r3, r3
   1cc10:	001a      	movs	r2, r3
   1cc12:	0021      	movs	r1, r4
   1cc14:	0028      	movs	r0, r5
   1cc16:	4b2f      	ldr	r3, [pc, #188]	; (1ccd4 <prvNotifyQueueSetContainer+0x17c>)
   1cc18:	4798      	blx	r3
   1cc1a:	693b      	ldr	r3, [r7, #16]
   1cc1c:	0018      	movs	r0, r3
   1cc1e:	4b2a      	ldr	r3, [pc, #168]	; (1ccc8 <prvNotifyQueueSetContainer+0x170>)
   1cc20:	4798      	blx	r3
   1cc22:	0003      	movs	r3, r0
   1cc24:	001a      	movs	r2, r3
   1cc26:	4b29      	ldr	r3, [pc, #164]	; (1cccc <prvNotifyQueueSetContainer+0x174>)
   1cc28:	5c9c      	ldrb	r4, [r3, r2]
   1cc2a:	693b      	ldr	r3, [r7, #16]
   1cc2c:	0018      	movs	r0, r3
   1cc2e:	4b28      	ldr	r3, [pc, #160]	; (1ccd0 <prvNotifyQueueSetContainer+0x178>)
   1cc30:	4798      	blx	r3
   1cc32:	0003      	movs	r3, r0
   1cc34:	b2dd      	uxtb	r5, r3
   1cc36:	693b      	ldr	r3, [r7, #16]
   1cc38:	0018      	movs	r0, r3
   1cc3a:	4b23      	ldr	r3, [pc, #140]	; (1ccc8 <prvNotifyQueueSetContainer+0x170>)
   1cc3c:	4798      	blx	r3
   1cc3e:	0003      	movs	r3, r0
   1cc40:	001a      	movs	r2, r3
   1cc42:	4b22      	ldr	r3, [pc, #136]	; (1cccc <prvNotifyQueueSetContainer+0x174>)
   1cc44:	5c9b      	ldrb	r3, [r3, r2]
   1cc46:	2b02      	cmp	r3, #2
   1cc48:	d005      	beq.n	1cc56 <prvNotifyQueueSetContainer+0xfe>
   1cc4a:	693b      	ldr	r3, [r7, #16]
   1cc4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1cc4e:	b2db      	uxtb	r3, r3
   1cc50:	3301      	adds	r3, #1
   1cc52:	b2db      	uxtb	r3, r3
   1cc54:	e000      	b.n	1cc58 <prvNotifyQueueSetContainer+0x100>
   1cc56:	2300      	movs	r3, #0
   1cc58:	001a      	movs	r2, r3
   1cc5a:	0029      	movs	r1, r5
   1cc5c:	0020      	movs	r0, r4
   1cc5e:	4b1e      	ldr	r3, [pc, #120]	; (1ccd8 <prvNotifyQueueSetContainer+0x180>)
   1cc60:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1cc62:	683a      	ldr	r2, [r7, #0]
   1cc64:	1d39      	adds	r1, r7, #4
   1cc66:	693b      	ldr	r3, [r7, #16]
   1cc68:	0018      	movs	r0, r3
   1cc6a:	4b1c      	ldr	r3, [pc, #112]	; (1ccdc <prvNotifyQueueSetContainer+0x184>)
   1cc6c:	4798      	blx	r3
   1cc6e:	0003      	movs	r3, r0
   1cc70:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1cc72:	230f      	movs	r3, #15
   1cc74:	18fb      	adds	r3, r7, r3
   1cc76:	781b      	ldrb	r3, [r3, #0]
   1cc78:	b25b      	sxtb	r3, r3
   1cc7a:	3301      	adds	r3, #1
   1cc7c:	d10d      	bne.n	1cc9a <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1cc7e:	693b      	ldr	r3, [r7, #16]
   1cc80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1cc82:	2b00      	cmp	r3, #0
   1cc84:	d012      	beq.n	1ccac <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1cc86:	693b      	ldr	r3, [r7, #16]
   1cc88:	3324      	adds	r3, #36	; 0x24
   1cc8a:	0018      	movs	r0, r3
   1cc8c:	4b14      	ldr	r3, [pc, #80]	; (1cce0 <prvNotifyQueueSetContainer+0x188>)
   1cc8e:	4798      	blx	r3
   1cc90:	1e03      	subs	r3, r0, #0
   1cc92:	d00b      	beq.n	1ccac <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1cc94:	2301      	movs	r3, #1
   1cc96:	617b      	str	r3, [r7, #20]
   1cc98:	e008      	b.n	1ccac <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1cc9a:	230f      	movs	r3, #15
   1cc9c:	18fb      	adds	r3, r7, r3
   1cc9e:	781b      	ldrb	r3, [r3, #0]
   1cca0:	3301      	adds	r3, #1
   1cca2:	b2db      	uxtb	r3, r3
   1cca4:	b259      	sxtb	r1, r3
   1cca6:	693b      	ldr	r3, [r7, #16]
   1cca8:	2245      	movs	r2, #69	; 0x45
   1ccaa:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1ccac:	697b      	ldr	r3, [r7, #20]
	}
   1ccae:	0018      	movs	r0, r3
   1ccb0:	46bd      	mov	sp, r7
   1ccb2:	b006      	add	sp, #24
   1ccb4:	bdb0      	pop	{r4, r5, r7, pc}
   1ccb6:	46c0      	nop			; (mov r8, r8)
   1ccb8:	0001931d 	.word	0x0001931d
   1ccbc:	00019081 	.word	0x00019081
   1ccc0:	20000110 	.word	0x20000110
   1ccc4:	00019141 	.word	0x00019141
   1ccc8:	00019041 	.word	0x00019041
   1cccc:	20000104 	.word	0x20000104
   1ccd0:	00019121 	.word	0x00019121
   1ccd4:	00019a79 	.word	0x00019a79
   1ccd8:	0001a0d5 	.word	0x0001a0d5
   1ccdc:	0001c855 	.word	0x0001c855
   1cce0:	0001d919 	.word	0x0001d919

0001cce4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1cce4:	b590      	push	{r4, r7, lr}
   1cce6:	b08d      	sub	sp, #52	; 0x34
   1cce8:	af04      	add	r7, sp, #16
   1ccea:	60f8      	str	r0, [r7, #12]
   1ccec:	60b9      	str	r1, [r7, #8]
   1ccee:	603b      	str	r3, [r7, #0]
   1ccf0:	1dbb      	adds	r3, r7, #6
   1ccf2:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ccf4:	1dbb      	adds	r3, r7, #6
   1ccf6:	881b      	ldrh	r3, [r3, #0]
   1ccf8:	009b      	lsls	r3, r3, #2
   1ccfa:	0018      	movs	r0, r3
   1ccfc:	4b1d      	ldr	r3, [pc, #116]	; (1cd74 <xTaskCreate+0x90>)
   1ccfe:	4798      	blx	r3
   1cd00:	0003      	movs	r3, r0
   1cd02:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1cd04:	697b      	ldr	r3, [r7, #20]
   1cd06:	2b00      	cmp	r3, #0
   1cd08:	d010      	beq.n	1cd2c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1cd0a:	2054      	movs	r0, #84	; 0x54
   1cd0c:	4b19      	ldr	r3, [pc, #100]	; (1cd74 <xTaskCreate+0x90>)
   1cd0e:	4798      	blx	r3
   1cd10:	0003      	movs	r3, r0
   1cd12:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1cd14:	69fb      	ldr	r3, [r7, #28]
   1cd16:	2b00      	cmp	r3, #0
   1cd18:	d003      	beq.n	1cd22 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1cd1a:	69fb      	ldr	r3, [r7, #28]
   1cd1c:	697a      	ldr	r2, [r7, #20]
   1cd1e:	631a      	str	r2, [r3, #48]	; 0x30
   1cd20:	e006      	b.n	1cd30 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1cd22:	697b      	ldr	r3, [r7, #20]
   1cd24:	0018      	movs	r0, r3
   1cd26:	4b14      	ldr	r3, [pc, #80]	; (1cd78 <xTaskCreate+0x94>)
   1cd28:	4798      	blx	r3
   1cd2a:	e001      	b.n	1cd30 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1cd2c:	2300      	movs	r3, #0
   1cd2e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1cd30:	69fb      	ldr	r3, [r7, #28]
   1cd32:	2b00      	cmp	r3, #0
   1cd34:	d016      	beq.n	1cd64 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1cd36:	1dbb      	adds	r3, r7, #6
   1cd38:	881a      	ldrh	r2, [r3, #0]
   1cd3a:	683c      	ldr	r4, [r7, #0]
   1cd3c:	68b9      	ldr	r1, [r7, #8]
   1cd3e:	68f8      	ldr	r0, [r7, #12]
   1cd40:	2300      	movs	r3, #0
   1cd42:	9303      	str	r3, [sp, #12]
   1cd44:	69fb      	ldr	r3, [r7, #28]
   1cd46:	9302      	str	r3, [sp, #8]
   1cd48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1cd4a:	9301      	str	r3, [sp, #4]
   1cd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1cd4e:	9300      	str	r3, [sp, #0]
   1cd50:	0023      	movs	r3, r4
   1cd52:	4c0a      	ldr	r4, [pc, #40]	; (1cd7c <xTaskCreate+0x98>)
   1cd54:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1cd56:	69fb      	ldr	r3, [r7, #28]
   1cd58:	0018      	movs	r0, r3
   1cd5a:	4b09      	ldr	r3, [pc, #36]	; (1cd80 <xTaskCreate+0x9c>)
   1cd5c:	4798      	blx	r3
			xReturn = pdPASS;
   1cd5e:	2301      	movs	r3, #1
   1cd60:	61bb      	str	r3, [r7, #24]
   1cd62:	e002      	b.n	1cd6a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1cd64:	2301      	movs	r3, #1
   1cd66:	425b      	negs	r3, r3
   1cd68:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1cd6a:	69bb      	ldr	r3, [r7, #24]
	}
   1cd6c:	0018      	movs	r0, r3
   1cd6e:	46bd      	mov	sp, r7
   1cd70:	b009      	add	sp, #36	; 0x24
   1cd72:	bd90      	pop	{r4, r7, pc}
   1cd74:	0001b1c1 	.word	0x0001b1c1
   1cd78:	0001b285 	.word	0x0001b285
   1cd7c:	0001cd85 	.word	0x0001cd85
   1cd80:	0001ce95 	.word	0x0001ce95

0001cd84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1cd84:	b580      	push	{r7, lr}
   1cd86:	b086      	sub	sp, #24
   1cd88:	af00      	add	r7, sp, #0
   1cd8a:	60f8      	str	r0, [r7, #12]
   1cd8c:	60b9      	str	r1, [r7, #8]
   1cd8e:	607a      	str	r2, [r7, #4]
   1cd90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1cd92:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cd94:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1cd96:	687b      	ldr	r3, [r7, #4]
   1cd98:	009b      	lsls	r3, r3, #2
   1cd9a:	001a      	movs	r2, r3
   1cd9c:	21a5      	movs	r1, #165	; 0xa5
   1cd9e:	4b39      	ldr	r3, [pc, #228]	; (1ce84 <prvInitialiseNewTask+0x100>)
   1cda0:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1cda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cda4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1cda6:	687b      	ldr	r3, [r7, #4]
   1cda8:	4937      	ldr	r1, [pc, #220]	; (1ce88 <prvInitialiseNewTask+0x104>)
   1cdaa:	468c      	mov	ip, r1
   1cdac:	4463      	add	r3, ip
   1cdae:	009b      	lsls	r3, r3, #2
   1cdb0:	18d3      	adds	r3, r2, r3
   1cdb2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1cdb4:	693b      	ldr	r3, [r7, #16]
   1cdb6:	2207      	movs	r2, #7
   1cdb8:	4393      	bics	r3, r2
   1cdba:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1cdbc:	693b      	ldr	r3, [r7, #16]
   1cdbe:	2207      	movs	r2, #7
   1cdc0:	4013      	ands	r3, r2
   1cdc2:	d001      	beq.n	1cdc8 <prvInitialiseNewTask+0x44>
   1cdc4:	b672      	cpsid	i
   1cdc6:	e7fe      	b.n	1cdc6 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1cdc8:	2300      	movs	r3, #0
   1cdca:	617b      	str	r3, [r7, #20]
   1cdcc:	e013      	b.n	1cdf6 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1cdce:	68ba      	ldr	r2, [r7, #8]
   1cdd0:	697b      	ldr	r3, [r7, #20]
   1cdd2:	18d3      	adds	r3, r2, r3
   1cdd4:	7818      	ldrb	r0, [r3, #0]
   1cdd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1cdd8:	2134      	movs	r1, #52	; 0x34
   1cdda:	697b      	ldr	r3, [r7, #20]
   1cddc:	18d3      	adds	r3, r2, r3
   1cdde:	185b      	adds	r3, r3, r1
   1cde0:	1c02      	adds	r2, r0, #0
   1cde2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1cde4:	68ba      	ldr	r2, [r7, #8]
   1cde6:	697b      	ldr	r3, [r7, #20]
   1cde8:	18d3      	adds	r3, r2, r3
   1cdea:	781b      	ldrb	r3, [r3, #0]
   1cdec:	2b00      	cmp	r3, #0
   1cdee:	d006      	beq.n	1cdfe <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1cdf0:	697b      	ldr	r3, [r7, #20]
   1cdf2:	3301      	adds	r3, #1
   1cdf4:	617b      	str	r3, [r7, #20]
   1cdf6:	697b      	ldr	r3, [r7, #20]
   1cdf8:	2b07      	cmp	r3, #7
   1cdfa:	d9e8      	bls.n	1cdce <prvInitialiseNewTask+0x4a>
   1cdfc:	e000      	b.n	1ce00 <prvInitialiseNewTask+0x7c>
		{
			break;
   1cdfe:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1ce00:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ce02:	223b      	movs	r2, #59	; 0x3b
   1ce04:	2100      	movs	r1, #0
   1ce06:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1ce08:	6a3b      	ldr	r3, [r7, #32]
   1ce0a:	2b04      	cmp	r3, #4
   1ce0c:	d901      	bls.n	1ce12 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1ce0e:	2304      	movs	r3, #4
   1ce10:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1ce12:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ce14:	6a3a      	ldr	r2, [r7, #32]
   1ce16:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1ce18:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ce1a:	6a3a      	ldr	r2, [r7, #32]
   1ce1c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1ce1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ce20:	2200      	movs	r2, #0
   1ce22:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1ce24:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ce26:	3304      	adds	r3, #4
   1ce28:	0018      	movs	r0, r3
   1ce2a:	4b18      	ldr	r3, [pc, #96]	; (1ce8c <prvInitialiseNewTask+0x108>)
   1ce2c:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1ce2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ce30:	3318      	adds	r3, #24
   1ce32:	0018      	movs	r0, r3
   1ce34:	4b15      	ldr	r3, [pc, #84]	; (1ce8c <prvInitialiseNewTask+0x108>)
   1ce36:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1ce38:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ce3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ce3c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ce3e:	6a3b      	ldr	r3, [r7, #32]
   1ce40:	2205      	movs	r2, #5
   1ce42:	1ad2      	subs	r2, r2, r3
   1ce44:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ce46:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1ce48:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ce4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ce4c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1ce4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ce50:	2200      	movs	r2, #0
   1ce52:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1ce54:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ce56:	2250      	movs	r2, #80	; 0x50
   1ce58:	2100      	movs	r1, #0
   1ce5a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1ce5c:	683a      	ldr	r2, [r7, #0]
   1ce5e:	68f9      	ldr	r1, [r7, #12]
   1ce60:	693b      	ldr	r3, [r7, #16]
   1ce62:	0018      	movs	r0, r3
   1ce64:	4b0a      	ldr	r3, [pc, #40]	; (1ce90 <prvInitialiseNewTask+0x10c>)
   1ce66:	4798      	blx	r3
   1ce68:	0002      	movs	r2, r0
   1ce6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ce6c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1ce6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ce70:	2b00      	cmp	r3, #0
   1ce72:	d002      	beq.n	1ce7a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1ce74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ce76:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ce78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1ce7a:	46c0      	nop			; (mov r8, r8)
   1ce7c:	46bd      	mov	sp, r7
   1ce7e:	b006      	add	sp, #24
   1ce80:	bd80      	pop	{r7, pc}
   1ce82:	46c0      	nop			; (mov r8, r8)
   1ce84:	0003643f 	.word	0x0003643f
   1ce88:	3fffffff 	.word	0x3fffffff
   1ce8c:	0001ae35 	.word	0x0001ae35
   1ce90:	0001af4d 	.word	0x0001af4d

0001ce94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1ce94:	b580      	push	{r7, lr}
   1ce96:	b082      	sub	sp, #8
   1ce98:	af00      	add	r7, sp, #0
   1ce9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1ce9c:	4b60      	ldr	r3, [pc, #384]	; (1d020 <prvAddNewTaskToReadyList+0x18c>)
   1ce9e:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1cea0:	4b60      	ldr	r3, [pc, #384]	; (1d024 <prvAddNewTaskToReadyList+0x190>)
   1cea2:	681b      	ldr	r3, [r3, #0]
   1cea4:	1c5a      	adds	r2, r3, #1
   1cea6:	4b5f      	ldr	r3, [pc, #380]	; (1d024 <prvAddNewTaskToReadyList+0x190>)
   1cea8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1ceaa:	4b5f      	ldr	r3, [pc, #380]	; (1d028 <prvAddNewTaskToReadyList+0x194>)
   1ceac:	681b      	ldr	r3, [r3, #0]
   1ceae:	2b00      	cmp	r3, #0
   1ceb0:	d109      	bne.n	1cec6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1ceb2:	4b5d      	ldr	r3, [pc, #372]	; (1d028 <prvAddNewTaskToReadyList+0x194>)
   1ceb4:	687a      	ldr	r2, [r7, #4]
   1ceb6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1ceb8:	4b5a      	ldr	r3, [pc, #360]	; (1d024 <prvAddNewTaskToReadyList+0x190>)
   1ceba:	681b      	ldr	r3, [r3, #0]
   1cebc:	2b01      	cmp	r3, #1
   1cebe:	d110      	bne.n	1cee2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1cec0:	4b5a      	ldr	r3, [pc, #360]	; (1d02c <prvAddNewTaskToReadyList+0x198>)
   1cec2:	4798      	blx	r3
   1cec4:	e00d      	b.n	1cee2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1cec6:	4b5a      	ldr	r3, [pc, #360]	; (1d030 <prvAddNewTaskToReadyList+0x19c>)
   1cec8:	681b      	ldr	r3, [r3, #0]
   1ceca:	2b00      	cmp	r3, #0
   1cecc:	d109      	bne.n	1cee2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1cece:	4b56      	ldr	r3, [pc, #344]	; (1d028 <prvAddNewTaskToReadyList+0x194>)
   1ced0:	681b      	ldr	r3, [r3, #0]
   1ced2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ced4:	687b      	ldr	r3, [r7, #4]
   1ced6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ced8:	429a      	cmp	r2, r3
   1ceda:	d802      	bhi.n	1cee2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1cedc:	4b52      	ldr	r3, [pc, #328]	; (1d028 <prvAddNewTaskToReadyList+0x194>)
   1cede:	687a      	ldr	r2, [r7, #4]
   1cee0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1cee2:	4b54      	ldr	r3, [pc, #336]	; (1d034 <prvAddNewTaskToReadyList+0x1a0>)
   1cee4:	681b      	ldr	r3, [r3, #0]
   1cee6:	1c5a      	adds	r2, r3, #1
   1cee8:	4b52      	ldr	r3, [pc, #328]	; (1d034 <prvAddNewTaskToReadyList+0x1a0>)
   1ceea:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1ceec:	4b51      	ldr	r3, [pc, #324]	; (1d034 <prvAddNewTaskToReadyList+0x1a0>)
   1ceee:	681a      	ldr	r2, [r3, #0]
   1cef0:	687b      	ldr	r3, [r7, #4]
   1cef2:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1cef4:	687b      	ldr	r3, [r7, #4]
   1cef6:	2b00      	cmp	r3, #0
   1cef8:	d052      	beq.n	1cfa0 <prvAddNewTaskToReadyList+0x10c>
   1cefa:	2003      	movs	r0, #3
   1cefc:	4b4e      	ldr	r3, [pc, #312]	; (1d038 <prvAddNewTaskToReadyList+0x1a4>)
   1cefe:	4798      	blx	r3
   1cf00:	0003      	movs	r3, r0
   1cf02:	b29a      	uxth	r2, r3
   1cf04:	687b      	ldr	r3, [r7, #4]
   1cf06:	0011      	movs	r1, r2
   1cf08:	0018      	movs	r0, r3
   1cf0a:	4b4c      	ldr	r3, [pc, #304]	; (1d03c <prvAddNewTaskToReadyList+0x1a8>)
   1cf0c:	4798      	blx	r3
   1cf0e:	4b4c      	ldr	r3, [pc, #304]	; (1d040 <prvAddNewTaskToReadyList+0x1ac>)
   1cf10:	881a      	ldrh	r2, [r3, #0]
   1cf12:	687b      	ldr	r3, [r7, #4]
   1cf14:	0011      	movs	r1, r2
   1cf16:	0018      	movs	r0, r3
   1cf18:	4b4a      	ldr	r3, [pc, #296]	; (1d044 <prvAddNewTaskToReadyList+0x1b0>)
   1cf1a:	4798      	blx	r3
   1cf1c:	687b      	ldr	r3, [r7, #4]
   1cf1e:	0018      	movs	r0, r3
   1cf20:	4b49      	ldr	r3, [pc, #292]	; (1d048 <prvAddNewTaskToReadyList+0x1b4>)
   1cf22:	4798      	blx	r3
   1cf24:	0003      	movs	r3, r0
   1cf26:	b2d9      	uxtb	r1, r3
   1cf28:	687b      	ldr	r3, [r7, #4]
   1cf2a:	3334      	adds	r3, #52	; 0x34
   1cf2c:	001a      	movs	r2, r3
   1cf2e:	2003      	movs	r0, #3
   1cf30:	4b46      	ldr	r3, [pc, #280]	; (1d04c <prvAddNewTaskToReadyList+0x1b8>)
   1cf32:	4798      	blx	r3
   1cf34:	687b      	ldr	r3, [r7, #4]
   1cf36:	0018      	movs	r0, r3
   1cf38:	4b43      	ldr	r3, [pc, #268]	; (1d048 <prvAddNewTaskToReadyList+0x1b4>)
   1cf3a:	4798      	blx	r3
   1cf3c:	0003      	movs	r3, r0
   1cf3e:	b2d9      	uxtb	r1, r3
   1cf40:	687b      	ldr	r3, [r7, #4]
   1cf42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cf44:	b2db      	uxtb	r3, r3
   1cf46:	001a      	movs	r2, r3
   1cf48:	2003      	movs	r0, #3
   1cf4a:	4b41      	ldr	r3, [pc, #260]	; (1d050 <prvAddNewTaskToReadyList+0x1bc>)
   1cf4c:	4798      	blx	r3
   1cf4e:	4b41      	ldr	r3, [pc, #260]	; (1d054 <prvAddNewTaskToReadyList+0x1c0>)
   1cf50:	4798      	blx	r3
   1cf52:	0003      	movs	r3, r0
   1cf54:	0018      	movs	r0, r3
   1cf56:	4b40      	ldr	r3, [pc, #256]	; (1d058 <prvAddNewTaskToReadyList+0x1c4>)
   1cf58:	4798      	blx	r3
   1cf5a:	0003      	movs	r3, r0
   1cf5c:	001a      	movs	r2, r3
   1cf5e:	4b3f      	ldr	r3, [pc, #252]	; (1d05c <prvAddNewTaskToReadyList+0x1c8>)
   1cf60:	881b      	ldrh	r3, [r3, #0]
   1cf62:	4013      	ands	r3, r2
   1cf64:	b29b      	uxth	r3, r3
   1cf66:	2b00      	cmp	r3, #0
   1cf68:	d016      	beq.n	1cf98 <prvAddNewTaskToReadyList+0x104>
   1cf6a:	687b      	ldr	r3, [r7, #4]
   1cf6c:	0018      	movs	r0, r3
   1cf6e:	4b3a      	ldr	r3, [pc, #232]	; (1d058 <prvAddNewTaskToReadyList+0x1c4>)
   1cf70:	4798      	blx	r3
   1cf72:	0003      	movs	r3, r0
   1cf74:	001a      	movs	r2, r3
   1cf76:	4b39      	ldr	r3, [pc, #228]	; (1d05c <prvAddNewTaskToReadyList+0x1c8>)
   1cf78:	881b      	ldrh	r3, [r3, #0]
   1cf7a:	4013      	ands	r3, r2
   1cf7c:	b29b      	uxth	r3, r3
   1cf7e:	2b00      	cmp	r3, #0
   1cf80:	d00a      	beq.n	1cf98 <prvAddNewTaskToReadyList+0x104>
   1cf82:	687b      	ldr	r3, [r7, #4]
   1cf84:	0018      	movs	r0, r3
   1cf86:	4b30      	ldr	r3, [pc, #192]	; (1d048 <prvAddNewTaskToReadyList+0x1b4>)
   1cf88:	4798      	blx	r3
   1cf8a:	0003      	movs	r3, r0
   1cf8c:	b2db      	uxtb	r3, r3
   1cf8e:	001a      	movs	r2, r3
   1cf90:	2103      	movs	r1, #3
   1cf92:	201b      	movs	r0, #27
   1cf94:	4b32      	ldr	r3, [pc, #200]	; (1d060 <prvAddNewTaskToReadyList+0x1cc>)
   1cf96:	4798      	blx	r3
   1cf98:	687b      	ldr	r3, [r7, #4]
   1cf9a:	0018      	movs	r0, r3
   1cf9c:	4b31      	ldr	r3, [pc, #196]	; (1d064 <prvAddNewTaskToReadyList+0x1d0>)
   1cf9e:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1cfa0:	687b      	ldr	r3, [r7, #4]
   1cfa2:	0018      	movs	r0, r3
   1cfa4:	4b2c      	ldr	r3, [pc, #176]	; (1d058 <prvAddNewTaskToReadyList+0x1c4>)
   1cfa6:	4798      	blx	r3
   1cfa8:	0003      	movs	r3, r0
   1cfaa:	001a      	movs	r2, r3
   1cfac:	4b2b      	ldr	r3, [pc, #172]	; (1d05c <prvAddNewTaskToReadyList+0x1c8>)
   1cfae:	881b      	ldrh	r3, [r3, #0]
   1cfb0:	4013      	ands	r3, r2
   1cfb2:	b29b      	uxth	r3, r3
   1cfb4:	2b00      	cmp	r3, #0
   1cfb6:	d008      	beq.n	1cfca <prvAddNewTaskToReadyList+0x136>
   1cfb8:	687b      	ldr	r3, [r7, #4]
   1cfba:	0018      	movs	r0, r3
   1cfbc:	4b22      	ldr	r3, [pc, #136]	; (1d048 <prvAddNewTaskToReadyList+0x1b4>)
   1cfbe:	4798      	blx	r3
   1cfc0:	0003      	movs	r3, r0
   1cfc2:	b2db      	uxtb	r3, r3
   1cfc4:	0018      	movs	r0, r3
   1cfc6:	4b28      	ldr	r3, [pc, #160]	; (1d068 <prvAddNewTaskToReadyList+0x1d4>)
   1cfc8:	4798      	blx	r3
   1cfca:	687b      	ldr	r3, [r7, #4]
   1cfcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cfce:	4b27      	ldr	r3, [pc, #156]	; (1d06c <prvAddNewTaskToReadyList+0x1d8>)
   1cfd0:	681b      	ldr	r3, [r3, #0]
   1cfd2:	429a      	cmp	r2, r3
   1cfd4:	d903      	bls.n	1cfde <prvAddNewTaskToReadyList+0x14a>
   1cfd6:	687b      	ldr	r3, [r7, #4]
   1cfd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cfda:	4b24      	ldr	r3, [pc, #144]	; (1d06c <prvAddNewTaskToReadyList+0x1d8>)
   1cfdc:	601a      	str	r2, [r3, #0]
   1cfde:	687b      	ldr	r3, [r7, #4]
   1cfe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cfe2:	0013      	movs	r3, r2
   1cfe4:	009b      	lsls	r3, r3, #2
   1cfe6:	189b      	adds	r3, r3, r2
   1cfe8:	009b      	lsls	r3, r3, #2
   1cfea:	4a21      	ldr	r2, [pc, #132]	; (1d070 <prvAddNewTaskToReadyList+0x1dc>)
   1cfec:	189a      	adds	r2, r3, r2
   1cfee:	687b      	ldr	r3, [r7, #4]
   1cff0:	3304      	adds	r3, #4
   1cff2:	0019      	movs	r1, r3
   1cff4:	0010      	movs	r0, r2
   1cff6:	4b1f      	ldr	r3, [pc, #124]	; (1d074 <prvAddNewTaskToReadyList+0x1e0>)
   1cff8:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1cffa:	4b1f      	ldr	r3, [pc, #124]	; (1d078 <prvAddNewTaskToReadyList+0x1e4>)
   1cffc:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1cffe:	4b0c      	ldr	r3, [pc, #48]	; (1d030 <prvAddNewTaskToReadyList+0x19c>)
   1d000:	681b      	ldr	r3, [r3, #0]
   1d002:	2b00      	cmp	r3, #0
   1d004:	d008      	beq.n	1d018 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1d006:	4b08      	ldr	r3, [pc, #32]	; (1d028 <prvAddNewTaskToReadyList+0x194>)
   1d008:	681b      	ldr	r3, [r3, #0]
   1d00a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d00c:	687b      	ldr	r3, [r7, #4]
   1d00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d010:	429a      	cmp	r2, r3
   1d012:	d201      	bcs.n	1d018 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1d014:	4b19      	ldr	r3, [pc, #100]	; (1d07c <prvAddNewTaskToReadyList+0x1e8>)
   1d016:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1d018:	46c0      	nop			; (mov r8, r8)
   1d01a:	46bd      	mov	sp, r7
   1d01c:	b002      	add	sp, #8
   1d01e:	bd80      	pop	{r7, pc}
   1d020:	0001b089 	.word	0x0001b089
   1d024:	200041b8 	.word	0x200041b8
   1d028:	200040e0 	.word	0x200040e0
   1d02c:	0001dbb5 	.word	0x0001dbb5
   1d030:	200041c4 	.word	0x200041c4
   1d034:	200041d4 	.word	0x200041d4
   1d038:	0001a601 	.word	0x0001a601
   1d03c:	000190a5 	.word	0x000190a5
   1d040:	20000112 	.word	0x20000112
   1d044:	000190e1 	.word	0x000190e1
   1d048:	00019061 	.word	0x00019061
   1d04c:	0001a831 	.word	0x0001a831
   1d050:	00019f95 	.word	0x00019f95
   1d054:	0001931d 	.word	0x0001931d
   1d058:	00019081 	.word	0x00019081
   1d05c:	20000110 	.word	0x20000110
   1d060:	00019a79 	.word	0x00019a79
   1d064:	000191e1 	.word	0x000191e1
   1d068:	00019831 	.word	0x00019831
   1d06c:	200041c0 	.word	0x200041c0
   1d070:	200040e4 	.word	0x200040e4
   1d074:	0001ae4b 	.word	0x0001ae4b
   1d078:	0001b0ad 	.word	0x0001b0ad
   1d07c:	0001b071 	.word	0x0001b071

0001d080 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1d080:	b580      	push	{r7, lr}
   1d082:	b084      	sub	sp, #16
   1d084:	af00      	add	r7, sp, #0
   1d086:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1d088:	2300      	movs	r3, #0
   1d08a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1d08c:	687b      	ldr	r3, [r7, #4]
   1d08e:	2b00      	cmp	r3, #0
   1d090:	d045      	beq.n	1d11e <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1d092:	4b27      	ldr	r3, [pc, #156]	; (1d130 <vTaskDelay+0xb0>)
   1d094:	681b      	ldr	r3, [r3, #0]
   1d096:	2b00      	cmp	r3, #0
   1d098:	d001      	beq.n	1d09e <vTaskDelay+0x1e>
   1d09a:	b672      	cpsid	i
   1d09c:	e7fe      	b.n	1d09c <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1d09e:	4b25      	ldr	r3, [pc, #148]	; (1d134 <vTaskDelay+0xb4>)
   1d0a0:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1d0a2:	4b25      	ldr	r3, [pc, #148]	; (1d138 <vTaskDelay+0xb8>)
   1d0a4:	681b      	ldr	r3, [r3, #0]
   1d0a6:	0018      	movs	r0, r3
   1d0a8:	4b24      	ldr	r3, [pc, #144]	; (1d13c <vTaskDelay+0xbc>)
   1d0aa:	4798      	blx	r3
   1d0ac:	0003      	movs	r3, r0
   1d0ae:	001a      	movs	r2, r3
   1d0b0:	4b23      	ldr	r3, [pc, #140]	; (1d140 <vTaskDelay+0xc0>)
   1d0b2:	881b      	ldrh	r3, [r3, #0]
   1d0b4:	4013      	ands	r3, r2
   1d0b6:	b29b      	uxth	r3, r3
   1d0b8:	2b00      	cmp	r3, #0
   1d0ba:	d00e      	beq.n	1d0da <vTaskDelay+0x5a>
   1d0bc:	687b      	ldr	r3, [r7, #4]
   1d0be:	0019      	movs	r1, r3
   1d0c0:	2089      	movs	r0, #137	; 0x89
   1d0c2:	4b20      	ldr	r3, [pc, #128]	; (1d144 <vTaskDelay+0xc4>)
   1d0c4:	4798      	blx	r3
   1d0c6:	4b1c      	ldr	r3, [pc, #112]	; (1d138 <vTaskDelay+0xb8>)
   1d0c8:	681b      	ldr	r3, [r3, #0]
   1d0ca:	0018      	movs	r0, r3
   1d0cc:	4b1e      	ldr	r3, [pc, #120]	; (1d148 <vTaskDelay+0xc8>)
   1d0ce:	4798      	blx	r3
   1d0d0:	0003      	movs	r3, r0
   1d0d2:	b2db      	uxtb	r3, r3
   1d0d4:	0018      	movs	r0, r3
   1d0d6:	4b1d      	ldr	r3, [pc, #116]	; (1d14c <vTaskDelay+0xcc>)
   1d0d8:	4798      	blx	r3
   1d0da:	4b1d      	ldr	r3, [pc, #116]	; (1d150 <vTaskDelay+0xd0>)
   1d0dc:	4798      	blx	r3
   1d0de:	0003      	movs	r3, r0
   1d0e0:	0018      	movs	r0, r3
   1d0e2:	4b16      	ldr	r3, [pc, #88]	; (1d13c <vTaskDelay+0xbc>)
   1d0e4:	4798      	blx	r3
   1d0e6:	0003      	movs	r3, r0
   1d0e8:	001a      	movs	r2, r3
   1d0ea:	4b15      	ldr	r3, [pc, #84]	; (1d140 <vTaskDelay+0xc0>)
   1d0ec:	881b      	ldrh	r3, [r3, #0]
   1d0ee:	4013      	ands	r3, r2
   1d0f0:	b29b      	uxth	r3, r3
   1d0f2:	2b00      	cmp	r3, #0
   1d0f4:	d00a      	beq.n	1d10c <vTaskDelay+0x8c>
   1d0f6:	4b16      	ldr	r3, [pc, #88]	; (1d150 <vTaskDelay+0xd0>)
   1d0f8:	4798      	blx	r3
   1d0fa:	0003      	movs	r3, r0
   1d0fc:	0018      	movs	r0, r3
   1d0fe:	4b12      	ldr	r3, [pc, #72]	; (1d148 <vTaskDelay+0xc8>)
   1d100:	4798      	blx	r3
   1d102:	0003      	movs	r3, r0
   1d104:	b2db      	uxtb	r3, r3
   1d106:	0018      	movs	r0, r3
   1d108:	4b10      	ldr	r3, [pc, #64]	; (1d14c <vTaskDelay+0xcc>)
   1d10a:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1d10c:	687b      	ldr	r3, [r7, #4]
   1d10e:	2100      	movs	r1, #0
   1d110:	0018      	movs	r0, r3
   1d112:	4b10      	ldr	r3, [pc, #64]	; (1d154 <vTaskDelay+0xd4>)
   1d114:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1d116:	4b10      	ldr	r3, [pc, #64]	; (1d158 <vTaskDelay+0xd8>)
   1d118:	4798      	blx	r3
   1d11a:	0003      	movs	r3, r0
   1d11c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1d11e:	68fb      	ldr	r3, [r7, #12]
   1d120:	2b00      	cmp	r3, #0
   1d122:	d101      	bne.n	1d128 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1d124:	4b0d      	ldr	r3, [pc, #52]	; (1d15c <vTaskDelay+0xdc>)
   1d126:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1d128:	46c0      	nop			; (mov r8, r8)
   1d12a:	46bd      	mov	sp, r7
   1d12c:	b004      	add	sp, #16
   1d12e:	bd80      	pop	{r7, pc}
   1d130:	200041e0 	.word	0x200041e0
   1d134:	0001d341 	.word	0x0001d341
   1d138:	200040e0 	.word	0x200040e0
   1d13c:	00019081 	.word	0x00019081
   1d140:	20000110 	.word	0x20000110
   1d144:	00019d81 	.word	0x00019d81
   1d148:	00019061 	.word	0x00019061
   1d14c:	0001a211 	.word	0x0001a211
   1d150:	0001931d 	.word	0x0001931d
   1d154:	0001e299 	.word	0x0001e299
   1d158:	0001d359 	.word	0x0001d359
   1d15c:	0001b071 	.word	0x0001b071

0001d160 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1d160:	b580      	push	{r7, lr}
   1d162:	b084      	sub	sp, #16
   1d164:	af00      	add	r7, sp, #0
   1d166:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1d168:	4b42      	ldr	r3, [pc, #264]	; (1d274 <vTaskSuspend+0x114>)
   1d16a:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1d16c:	687b      	ldr	r3, [r7, #4]
   1d16e:	2b00      	cmp	r3, #0
   1d170:	d102      	bne.n	1d178 <vTaskSuspend+0x18>
   1d172:	4b41      	ldr	r3, [pc, #260]	; (1d278 <vTaskSuspend+0x118>)
   1d174:	681b      	ldr	r3, [r3, #0]
   1d176:	e000      	b.n	1d17a <vTaskSuspend+0x1a>
   1d178:	687b      	ldr	r3, [r7, #4]
   1d17a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1d17c:	4b3f      	ldr	r3, [pc, #252]	; (1d27c <vTaskSuspend+0x11c>)
   1d17e:	4798      	blx	r3
   1d180:	0003      	movs	r3, r0
   1d182:	0018      	movs	r0, r3
   1d184:	4b3e      	ldr	r3, [pc, #248]	; (1d280 <vTaskSuspend+0x120>)
   1d186:	4798      	blx	r3
   1d188:	0003      	movs	r3, r0
   1d18a:	001a      	movs	r2, r3
   1d18c:	4b3d      	ldr	r3, [pc, #244]	; (1d284 <vTaskSuspend+0x124>)
   1d18e:	881b      	ldrh	r3, [r3, #0]
   1d190:	4013      	ands	r3, r2
   1d192:	b29b      	uxth	r3, r3
   1d194:	2b00      	cmp	r3, #0
   1d196:	d016      	beq.n	1d1c6 <vTaskSuspend+0x66>
   1d198:	68fb      	ldr	r3, [r7, #12]
   1d19a:	0018      	movs	r0, r3
   1d19c:	4b38      	ldr	r3, [pc, #224]	; (1d280 <vTaskSuspend+0x120>)
   1d19e:	4798      	blx	r3
   1d1a0:	0003      	movs	r3, r0
   1d1a2:	001a      	movs	r2, r3
   1d1a4:	4b37      	ldr	r3, [pc, #220]	; (1d284 <vTaskSuspend+0x124>)
   1d1a6:	881b      	ldrh	r3, [r3, #0]
   1d1a8:	4013      	ands	r3, r2
   1d1aa:	b29b      	uxth	r3, r3
   1d1ac:	2b00      	cmp	r3, #0
   1d1ae:	d00a      	beq.n	1d1c6 <vTaskSuspend+0x66>
   1d1b0:	68fb      	ldr	r3, [r7, #12]
   1d1b2:	0018      	movs	r0, r3
   1d1b4:	4b34      	ldr	r3, [pc, #208]	; (1d288 <vTaskSuspend+0x128>)
   1d1b6:	4798      	blx	r3
   1d1b8:	0003      	movs	r3, r0
   1d1ba:	b2db      	uxtb	r3, r3
   1d1bc:	001a      	movs	r2, r3
   1d1be:	2103      	movs	r1, #3
   1d1c0:	208a      	movs	r0, #138	; 0x8a
   1d1c2:	4b32      	ldr	r3, [pc, #200]	; (1d28c <vTaskSuspend+0x12c>)
   1d1c4:	4798      	blx	r3
   1d1c6:	68fb      	ldr	r3, [r7, #12]
   1d1c8:	0018      	movs	r0, r3
   1d1ca:	4b2f      	ldr	r3, [pc, #188]	; (1d288 <vTaskSuspend+0x128>)
   1d1cc:	4798      	blx	r3
   1d1ce:	0003      	movs	r3, r0
   1d1d0:	b2db      	uxtb	r3, r3
   1d1d2:	0018      	movs	r0, r3
   1d1d4:	4b2e      	ldr	r3, [pc, #184]	; (1d290 <vTaskSuspend+0x130>)
   1d1d6:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d1d8:	68fb      	ldr	r3, [r7, #12]
   1d1da:	3304      	adds	r3, #4
   1d1dc:	0018      	movs	r0, r3
   1d1de:	4b2d      	ldr	r3, [pc, #180]	; (1d294 <vTaskSuspend+0x134>)
   1d1e0:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1d1e2:	68fb      	ldr	r3, [r7, #12]
   1d1e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d1e6:	2b00      	cmp	r3, #0
   1d1e8:	d004      	beq.n	1d1f4 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1d1ea:	68fb      	ldr	r3, [r7, #12]
   1d1ec:	3318      	adds	r3, #24
   1d1ee:	0018      	movs	r0, r3
   1d1f0:	4b28      	ldr	r3, [pc, #160]	; (1d294 <vTaskSuspend+0x134>)
   1d1f2:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1d1f4:	68fb      	ldr	r3, [r7, #12]
   1d1f6:	1d1a      	adds	r2, r3, #4
   1d1f8:	4b27      	ldr	r3, [pc, #156]	; (1d298 <vTaskSuspend+0x138>)
   1d1fa:	0011      	movs	r1, r2
   1d1fc:	0018      	movs	r0, r3
   1d1fe:	4b27      	ldr	r3, [pc, #156]	; (1d29c <vTaskSuspend+0x13c>)
   1d200:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1d202:	68fb      	ldr	r3, [r7, #12]
   1d204:	2250      	movs	r2, #80	; 0x50
   1d206:	5c9b      	ldrb	r3, [r3, r2]
   1d208:	b2db      	uxtb	r3, r3
   1d20a:	2b01      	cmp	r3, #1
   1d20c:	d103      	bne.n	1d216 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1d20e:	68fb      	ldr	r3, [r7, #12]
   1d210:	2250      	movs	r2, #80	; 0x50
   1d212:	2100      	movs	r1, #0
   1d214:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1d216:	4b22      	ldr	r3, [pc, #136]	; (1d2a0 <vTaskSuspend+0x140>)
   1d218:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1d21a:	4b22      	ldr	r3, [pc, #136]	; (1d2a4 <vTaskSuspend+0x144>)
   1d21c:	681b      	ldr	r3, [r3, #0]
   1d21e:	2b00      	cmp	r3, #0
   1d220:	d005      	beq.n	1d22e <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1d222:	4b14      	ldr	r3, [pc, #80]	; (1d274 <vTaskSuspend+0x114>)
   1d224:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1d226:	4b20      	ldr	r3, [pc, #128]	; (1d2a8 <vTaskSuspend+0x148>)
   1d228:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1d22a:	4b1d      	ldr	r3, [pc, #116]	; (1d2a0 <vTaskSuspend+0x140>)
   1d22c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1d22e:	4b12      	ldr	r3, [pc, #72]	; (1d278 <vTaskSuspend+0x118>)
   1d230:	681b      	ldr	r3, [r3, #0]
   1d232:	68fa      	ldr	r2, [r7, #12]
   1d234:	429a      	cmp	r2, r3
   1d236:	d118      	bne.n	1d26a <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1d238:	4b1a      	ldr	r3, [pc, #104]	; (1d2a4 <vTaskSuspend+0x144>)
   1d23a:	681b      	ldr	r3, [r3, #0]
   1d23c:	2b00      	cmp	r3, #0
   1d23e:	d008      	beq.n	1d252 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1d240:	4b1a      	ldr	r3, [pc, #104]	; (1d2ac <vTaskSuspend+0x14c>)
   1d242:	681b      	ldr	r3, [r3, #0]
   1d244:	2b00      	cmp	r3, #0
   1d246:	d001      	beq.n	1d24c <vTaskSuspend+0xec>
   1d248:	b672      	cpsid	i
   1d24a:	e7fe      	b.n	1d24a <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1d24c:	4b18      	ldr	r3, [pc, #96]	; (1d2b0 <vTaskSuspend+0x150>)
   1d24e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1d250:	e00b      	b.n	1d26a <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1d252:	4b11      	ldr	r3, [pc, #68]	; (1d298 <vTaskSuspend+0x138>)
   1d254:	681a      	ldr	r2, [r3, #0]
   1d256:	4b17      	ldr	r3, [pc, #92]	; (1d2b4 <vTaskSuspend+0x154>)
   1d258:	681b      	ldr	r3, [r3, #0]
   1d25a:	429a      	cmp	r2, r3
   1d25c:	d103      	bne.n	1d266 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1d25e:	4b06      	ldr	r3, [pc, #24]	; (1d278 <vTaskSuspend+0x118>)
   1d260:	2200      	movs	r2, #0
   1d262:	601a      	str	r2, [r3, #0]
	}
   1d264:	e001      	b.n	1d26a <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1d266:	4b14      	ldr	r3, [pc, #80]	; (1d2b8 <vTaskSuspend+0x158>)
   1d268:	4798      	blx	r3
	}
   1d26a:	46c0      	nop			; (mov r8, r8)
   1d26c:	46bd      	mov	sp, r7
   1d26e:	b004      	add	sp, #16
   1d270:	bd80      	pop	{r7, pc}
   1d272:	46c0      	nop			; (mov r8, r8)
   1d274:	0001b089 	.word	0x0001b089
   1d278:	200040e0 	.word	0x200040e0
   1d27c:	0001931d 	.word	0x0001931d
   1d280:	00019081 	.word	0x00019081
   1d284:	20000110 	.word	0x20000110
   1d288:	00019061 	.word	0x00019061
   1d28c:	00019a79 	.word	0x00019a79
   1d290:	0001a211 	.word	0x0001a211
   1d294:	0001aefb 	.word	0x0001aefb
   1d298:	200041a4 	.word	0x200041a4
   1d29c:	0001ae4b 	.word	0x0001ae4b
   1d2a0:	0001b0ad 	.word	0x0001b0ad
   1d2a4:	200041c4 	.word	0x200041c4
   1d2a8:	0001dd45 	.word	0x0001dd45
   1d2ac:	200041e0 	.word	0x200041e0
   1d2b0:	0001b071 	.word	0x0001b071
   1d2b4:	200041b8 	.word	0x200041b8
   1d2b8:	0001d6d5 	.word	0x0001d6d5

0001d2bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1d2bc:	b590      	push	{r4, r7, lr}
   1d2be:	b085      	sub	sp, #20
   1d2c0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1d2c2:	4916      	ldr	r1, [pc, #88]	; (1d31c <vTaskStartScheduler+0x60>)
   1d2c4:	4816      	ldr	r0, [pc, #88]	; (1d320 <vTaskStartScheduler+0x64>)
   1d2c6:	4b17      	ldr	r3, [pc, #92]	; (1d324 <vTaskStartScheduler+0x68>)
   1d2c8:	9301      	str	r3, [sp, #4]
   1d2ca:	2300      	movs	r3, #0
   1d2cc:	9300      	str	r3, [sp, #0]
   1d2ce:	2300      	movs	r3, #0
   1d2d0:	2296      	movs	r2, #150	; 0x96
   1d2d2:	4c15      	ldr	r4, [pc, #84]	; (1d328 <vTaskStartScheduler+0x6c>)
   1d2d4:	47a0      	blx	r4
   1d2d6:	0003      	movs	r3, r0
   1d2d8:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1d2da:	687b      	ldr	r3, [r7, #4]
   1d2dc:	2b01      	cmp	r3, #1
   1d2de:	d103      	bne.n	1d2e8 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1d2e0:	4b12      	ldr	r3, [pc, #72]	; (1d32c <vTaskStartScheduler+0x70>)
   1d2e2:	4798      	blx	r3
   1d2e4:	0003      	movs	r3, r0
   1d2e6:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1d2e8:	687b      	ldr	r3, [r7, #4]
   1d2ea:	2b01      	cmp	r3, #1
   1d2ec:	d10d      	bne.n	1d30a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1d2ee:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1d2f0:	4b0f      	ldr	r3, [pc, #60]	; (1d330 <vTaskStartScheduler+0x74>)
   1d2f2:	2201      	movs	r2, #1
   1d2f4:	4252      	negs	r2, r2
   1d2f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1d2f8:	4b0e      	ldr	r3, [pc, #56]	; (1d334 <vTaskStartScheduler+0x78>)
   1d2fa:	2201      	movs	r2, #1
   1d2fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1d2fe:	4b0e      	ldr	r3, [pc, #56]	; (1d338 <vTaskStartScheduler+0x7c>)
   1d300:	2200      	movs	r2, #0
   1d302:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1d304:	4b0d      	ldr	r3, [pc, #52]	; (1d33c <vTaskStartScheduler+0x80>)
   1d306:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1d308:	e004      	b.n	1d314 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1d30a:	687b      	ldr	r3, [r7, #4]
   1d30c:	3301      	adds	r3, #1
   1d30e:	d101      	bne.n	1d314 <vTaskStartScheduler+0x58>
   1d310:	b672      	cpsid	i
   1d312:	e7fe      	b.n	1d312 <vTaskStartScheduler+0x56>
}
   1d314:	46c0      	nop			; (mov r8, r8)
   1d316:	46bd      	mov	sp, r7
   1d318:	b003      	add	sp, #12
   1d31a:	bd90      	pop	{r4, r7, pc}
   1d31c:	0003a0c4 	.word	0x0003a0c4
   1d320:	0001db8d 	.word	0x0001db8d
   1d324:	200041dc 	.word	0x200041dc
   1d328:	0001cce5 	.word	0x0001cce5
   1d32c:	0001e34d 	.word	0x0001e34d
   1d330:	200041d8 	.word	0x200041d8
   1d334:	200041c4 	.word	0x200041c4
   1d338:	200041bc 	.word	0x200041bc
   1d33c:	0001b019 	.word	0x0001b019

0001d340 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1d340:	b580      	push	{r7, lr}
   1d342:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1d344:	4b03      	ldr	r3, [pc, #12]	; (1d354 <vTaskSuspendAll+0x14>)
   1d346:	681b      	ldr	r3, [r3, #0]
   1d348:	1c5a      	adds	r2, r3, #1
   1d34a:	4b02      	ldr	r3, [pc, #8]	; (1d354 <vTaskSuspendAll+0x14>)
   1d34c:	601a      	str	r2, [r3, #0]
}
   1d34e:	46c0      	nop			; (mov r8, r8)
   1d350:	46bd      	mov	sp, r7
   1d352:	bd80      	pop	{r7, pc}
   1d354:	200041e0 	.word	0x200041e0

0001d358 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1d358:	b580      	push	{r7, lr}
   1d35a:	b084      	sub	sp, #16
   1d35c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1d35e:	2300      	movs	r3, #0
   1d360:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1d362:	2300      	movs	r3, #0
   1d364:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1d366:	4b45      	ldr	r3, [pc, #276]	; (1d47c <xTaskResumeAll+0x124>)
   1d368:	681b      	ldr	r3, [r3, #0]
   1d36a:	2b00      	cmp	r3, #0
   1d36c:	d101      	bne.n	1d372 <xTaskResumeAll+0x1a>
   1d36e:	b672      	cpsid	i
   1d370:	e7fe      	b.n	1d370 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1d372:	4b43      	ldr	r3, [pc, #268]	; (1d480 <xTaskResumeAll+0x128>)
   1d374:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1d376:	4b41      	ldr	r3, [pc, #260]	; (1d47c <xTaskResumeAll+0x124>)
   1d378:	681b      	ldr	r3, [r3, #0]
   1d37a:	1e5a      	subs	r2, r3, #1
   1d37c:	4b3f      	ldr	r3, [pc, #252]	; (1d47c <xTaskResumeAll+0x124>)
   1d37e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d380:	4b3e      	ldr	r3, [pc, #248]	; (1d47c <xTaskResumeAll+0x124>)
   1d382:	681b      	ldr	r3, [r3, #0]
   1d384:	2b00      	cmp	r3, #0
   1d386:	d000      	beq.n	1d38a <xTaskResumeAll+0x32>
   1d388:	e071      	b.n	1d46e <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1d38a:	4b3e      	ldr	r3, [pc, #248]	; (1d484 <xTaskResumeAll+0x12c>)
   1d38c:	681b      	ldr	r3, [r3, #0]
   1d38e:	2b00      	cmp	r3, #0
   1d390:	d100      	bne.n	1d394 <xTaskResumeAll+0x3c>
   1d392:	e06c      	b.n	1d46e <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1d394:	e044      	b.n	1d420 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1d396:	4b3c      	ldr	r3, [pc, #240]	; (1d488 <xTaskResumeAll+0x130>)
   1d398:	68db      	ldr	r3, [r3, #12]
   1d39a:	68db      	ldr	r3, [r3, #12]
   1d39c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1d39e:	68fb      	ldr	r3, [r7, #12]
   1d3a0:	3318      	adds	r3, #24
   1d3a2:	0018      	movs	r0, r3
   1d3a4:	4b39      	ldr	r3, [pc, #228]	; (1d48c <xTaskResumeAll+0x134>)
   1d3a6:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1d3a8:	68fb      	ldr	r3, [r7, #12]
   1d3aa:	3304      	adds	r3, #4
   1d3ac:	0018      	movs	r0, r3
   1d3ae:	4b37      	ldr	r3, [pc, #220]	; (1d48c <xTaskResumeAll+0x134>)
   1d3b0:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1d3b2:	68fb      	ldr	r3, [r7, #12]
   1d3b4:	0018      	movs	r0, r3
   1d3b6:	4b36      	ldr	r3, [pc, #216]	; (1d490 <xTaskResumeAll+0x138>)
   1d3b8:	4798      	blx	r3
   1d3ba:	0003      	movs	r3, r0
   1d3bc:	001a      	movs	r2, r3
   1d3be:	4b35      	ldr	r3, [pc, #212]	; (1d494 <xTaskResumeAll+0x13c>)
   1d3c0:	881b      	ldrh	r3, [r3, #0]
   1d3c2:	4013      	ands	r3, r2
   1d3c4:	b29b      	uxth	r3, r3
   1d3c6:	2b00      	cmp	r3, #0
   1d3c8:	d008      	beq.n	1d3dc <xTaskResumeAll+0x84>
   1d3ca:	68fb      	ldr	r3, [r7, #12]
   1d3cc:	0018      	movs	r0, r3
   1d3ce:	4b32      	ldr	r3, [pc, #200]	; (1d498 <xTaskResumeAll+0x140>)
   1d3d0:	4798      	blx	r3
   1d3d2:	0003      	movs	r3, r0
   1d3d4:	b2db      	uxtb	r3, r3
   1d3d6:	0018      	movs	r0, r3
   1d3d8:	4b30      	ldr	r3, [pc, #192]	; (1d49c <xTaskResumeAll+0x144>)
   1d3da:	4798      	blx	r3
   1d3dc:	68fb      	ldr	r3, [r7, #12]
   1d3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d3e0:	4b2f      	ldr	r3, [pc, #188]	; (1d4a0 <xTaskResumeAll+0x148>)
   1d3e2:	681b      	ldr	r3, [r3, #0]
   1d3e4:	429a      	cmp	r2, r3
   1d3e6:	d903      	bls.n	1d3f0 <xTaskResumeAll+0x98>
   1d3e8:	68fb      	ldr	r3, [r7, #12]
   1d3ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d3ec:	4b2c      	ldr	r3, [pc, #176]	; (1d4a0 <xTaskResumeAll+0x148>)
   1d3ee:	601a      	str	r2, [r3, #0]
   1d3f0:	68fb      	ldr	r3, [r7, #12]
   1d3f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d3f4:	0013      	movs	r3, r2
   1d3f6:	009b      	lsls	r3, r3, #2
   1d3f8:	189b      	adds	r3, r3, r2
   1d3fa:	009b      	lsls	r3, r3, #2
   1d3fc:	4a29      	ldr	r2, [pc, #164]	; (1d4a4 <xTaskResumeAll+0x14c>)
   1d3fe:	189a      	adds	r2, r3, r2
   1d400:	68fb      	ldr	r3, [r7, #12]
   1d402:	3304      	adds	r3, #4
   1d404:	0019      	movs	r1, r3
   1d406:	0010      	movs	r0, r2
   1d408:	4b27      	ldr	r3, [pc, #156]	; (1d4a8 <xTaskResumeAll+0x150>)
   1d40a:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1d40c:	68fb      	ldr	r3, [r7, #12]
   1d40e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d410:	4b26      	ldr	r3, [pc, #152]	; (1d4ac <xTaskResumeAll+0x154>)
   1d412:	681b      	ldr	r3, [r3, #0]
   1d414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d416:	429a      	cmp	r2, r3
   1d418:	d302      	bcc.n	1d420 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1d41a:	4b25      	ldr	r3, [pc, #148]	; (1d4b0 <xTaskResumeAll+0x158>)
   1d41c:	2201      	movs	r2, #1
   1d41e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1d420:	4b19      	ldr	r3, [pc, #100]	; (1d488 <xTaskResumeAll+0x130>)
   1d422:	681b      	ldr	r3, [r3, #0]
   1d424:	2b00      	cmp	r3, #0
   1d426:	d1b6      	bne.n	1d396 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1d428:	68fb      	ldr	r3, [r7, #12]
   1d42a:	2b00      	cmp	r3, #0
   1d42c:	d001      	beq.n	1d432 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1d42e:	4b21      	ldr	r3, [pc, #132]	; (1d4b4 <xTaskResumeAll+0x15c>)
   1d430:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1d432:	4b21      	ldr	r3, [pc, #132]	; (1d4b8 <xTaskResumeAll+0x160>)
   1d434:	681b      	ldr	r3, [r3, #0]
   1d436:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1d438:	687b      	ldr	r3, [r7, #4]
   1d43a:	2b00      	cmp	r3, #0
   1d43c:	d00f      	beq.n	1d45e <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1d43e:	4b1f      	ldr	r3, [pc, #124]	; (1d4bc <xTaskResumeAll+0x164>)
   1d440:	4798      	blx	r3
   1d442:	1e03      	subs	r3, r0, #0
   1d444:	d002      	beq.n	1d44c <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1d446:	4b1a      	ldr	r3, [pc, #104]	; (1d4b0 <xTaskResumeAll+0x158>)
   1d448:	2201      	movs	r2, #1
   1d44a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1d44c:	687b      	ldr	r3, [r7, #4]
   1d44e:	3b01      	subs	r3, #1
   1d450:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1d452:	687b      	ldr	r3, [r7, #4]
   1d454:	2b00      	cmp	r3, #0
   1d456:	d1f2      	bne.n	1d43e <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1d458:	4b17      	ldr	r3, [pc, #92]	; (1d4b8 <xTaskResumeAll+0x160>)
   1d45a:	2200      	movs	r2, #0
   1d45c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1d45e:	4b14      	ldr	r3, [pc, #80]	; (1d4b0 <xTaskResumeAll+0x158>)
   1d460:	681b      	ldr	r3, [r3, #0]
   1d462:	2b00      	cmp	r3, #0
   1d464:	d003      	beq.n	1d46e <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1d466:	2301      	movs	r3, #1
   1d468:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1d46a:	4b15      	ldr	r3, [pc, #84]	; (1d4c0 <xTaskResumeAll+0x168>)
   1d46c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1d46e:	4b15      	ldr	r3, [pc, #84]	; (1d4c4 <xTaskResumeAll+0x16c>)
   1d470:	4798      	blx	r3

	return xAlreadyYielded;
   1d472:	68bb      	ldr	r3, [r7, #8]
}
   1d474:	0018      	movs	r0, r3
   1d476:	46bd      	mov	sp, r7
   1d478:	b004      	add	sp, #16
   1d47a:	bd80      	pop	{r7, pc}
   1d47c:	200041e0 	.word	0x200041e0
   1d480:	0001b089 	.word	0x0001b089
   1d484:	200041b8 	.word	0x200041b8
   1d488:	20004178 	.word	0x20004178
   1d48c:	0001aefb 	.word	0x0001aefb
   1d490:	00019081 	.word	0x00019081
   1d494:	20000110 	.word	0x20000110
   1d498:	00019061 	.word	0x00019061
   1d49c:	00019831 	.word	0x00019831
   1d4a0:	200041c0 	.word	0x200041c0
   1d4a4:	200040e4 	.word	0x200040e4
   1d4a8:	0001ae4b 	.word	0x0001ae4b
   1d4ac:	200040e0 	.word	0x200040e0
   1d4b0:	200041cc 	.word	0x200041cc
   1d4b4:	0001dd45 	.word	0x0001dd45
   1d4b8:	200041c8 	.word	0x200041c8
   1d4bc:	0001d4e5 	.word	0x0001d4e5
   1d4c0:	0001b071 	.word	0x0001b071
   1d4c4:	0001b0ad 	.word	0x0001b0ad

0001d4c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1d4c8:	b580      	push	{r7, lr}
   1d4ca:	b082      	sub	sp, #8
   1d4cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1d4ce:	4b04      	ldr	r3, [pc, #16]	; (1d4e0 <xTaskGetTickCount+0x18>)
   1d4d0:	681b      	ldr	r3, [r3, #0]
   1d4d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1d4d4:	687b      	ldr	r3, [r7, #4]
}
   1d4d6:	0018      	movs	r0, r3
   1d4d8:	46bd      	mov	sp, r7
   1d4da:	b002      	add	sp, #8
   1d4dc:	bd80      	pop	{r7, pc}
   1d4de:	46c0      	nop			; (mov r8, r8)
   1d4e0:	200041bc 	.word	0x200041bc

0001d4e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1d4e4:	b580      	push	{r7, lr}
   1d4e6:	b086      	sub	sp, #24
   1d4e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1d4ea:	2300      	movs	r3, #0
   1d4ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1d4ee:	4b64      	ldr	r3, [pc, #400]	; (1d680 <xTaskIncrementTick+0x19c>)
   1d4f0:	681b      	ldr	r3, [r3, #0]
   1d4f2:	2b01      	cmp	r3, #1
   1d4f4:	d003      	beq.n	1d4fe <xTaskIncrementTick+0x1a>
   1d4f6:	4b63      	ldr	r3, [pc, #396]	; (1d684 <xTaskIncrementTick+0x1a0>)
   1d4f8:	681b      	ldr	r3, [r3, #0]
   1d4fa:	2b00      	cmp	r3, #0
   1d4fc:	d107      	bne.n	1d50e <xTaskIncrementTick+0x2a>
   1d4fe:	4b62      	ldr	r3, [pc, #392]	; (1d688 <xTaskIncrementTick+0x1a4>)
   1d500:	681b      	ldr	r3, [r3, #0]
   1d502:	1c5a      	adds	r2, r3, #1
   1d504:	4b60      	ldr	r3, [pc, #384]	; (1d688 <xTaskIncrementTick+0x1a4>)
   1d506:	601a      	str	r2, [r3, #0]
   1d508:	2000      	movs	r0, #0
   1d50a:	4b60      	ldr	r3, [pc, #384]	; (1d68c <xTaskIncrementTick+0x1a8>)
   1d50c:	4798      	blx	r3
   1d50e:	4b5c      	ldr	r3, [pc, #368]	; (1d680 <xTaskIncrementTick+0x19c>)
   1d510:	681b      	ldr	r3, [r3, #0]
   1d512:	2b00      	cmp	r3, #0
   1d514:	d106      	bne.n	1d524 <xTaskIncrementTick+0x40>
   1d516:	4b5e      	ldr	r3, [pc, #376]	; (1d690 <xTaskIncrementTick+0x1ac>)
   1d518:	681b      	ldr	r3, [r3, #0]
   1d51a:	3301      	adds	r3, #1
   1d51c:	0019      	movs	r1, r3
   1d51e:	2003      	movs	r0, #3
   1d520:	4b5c      	ldr	r3, [pc, #368]	; (1d694 <xTaskIncrementTick+0x1b0>)
   1d522:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d524:	4b56      	ldr	r3, [pc, #344]	; (1d680 <xTaskIncrementTick+0x19c>)
   1d526:	681b      	ldr	r3, [r3, #0]
   1d528:	2b00      	cmp	r3, #0
   1d52a:	d000      	beq.n	1d52e <xTaskIncrementTick+0x4a>
   1d52c:	e098      	b.n	1d660 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1d52e:	4b58      	ldr	r3, [pc, #352]	; (1d690 <xTaskIncrementTick+0x1ac>)
   1d530:	681b      	ldr	r3, [r3, #0]
   1d532:	3301      	adds	r3, #1
   1d534:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1d536:	4b56      	ldr	r3, [pc, #344]	; (1d690 <xTaskIncrementTick+0x1ac>)
   1d538:	693a      	ldr	r2, [r7, #16]
   1d53a:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1d53c:	693b      	ldr	r3, [r7, #16]
   1d53e:	2b00      	cmp	r3, #0
   1d540:	d117      	bne.n	1d572 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1d542:	4b55      	ldr	r3, [pc, #340]	; (1d698 <xTaskIncrementTick+0x1b4>)
   1d544:	681b      	ldr	r3, [r3, #0]
   1d546:	681b      	ldr	r3, [r3, #0]
   1d548:	2b00      	cmp	r3, #0
   1d54a:	d001      	beq.n	1d550 <xTaskIncrementTick+0x6c>
   1d54c:	b672      	cpsid	i
   1d54e:	e7fe      	b.n	1d54e <xTaskIncrementTick+0x6a>
   1d550:	4b51      	ldr	r3, [pc, #324]	; (1d698 <xTaskIncrementTick+0x1b4>)
   1d552:	681b      	ldr	r3, [r3, #0]
   1d554:	60fb      	str	r3, [r7, #12]
   1d556:	4b51      	ldr	r3, [pc, #324]	; (1d69c <xTaskIncrementTick+0x1b8>)
   1d558:	681a      	ldr	r2, [r3, #0]
   1d55a:	4b4f      	ldr	r3, [pc, #316]	; (1d698 <xTaskIncrementTick+0x1b4>)
   1d55c:	601a      	str	r2, [r3, #0]
   1d55e:	4b4f      	ldr	r3, [pc, #316]	; (1d69c <xTaskIncrementTick+0x1b8>)
   1d560:	68fa      	ldr	r2, [r7, #12]
   1d562:	601a      	str	r2, [r3, #0]
   1d564:	4b4e      	ldr	r3, [pc, #312]	; (1d6a0 <xTaskIncrementTick+0x1bc>)
   1d566:	681b      	ldr	r3, [r3, #0]
   1d568:	1c5a      	adds	r2, r3, #1
   1d56a:	4b4d      	ldr	r3, [pc, #308]	; (1d6a0 <xTaskIncrementTick+0x1bc>)
   1d56c:	601a      	str	r2, [r3, #0]
   1d56e:	4b4d      	ldr	r3, [pc, #308]	; (1d6a4 <xTaskIncrementTick+0x1c0>)
   1d570:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1d572:	4b4d      	ldr	r3, [pc, #308]	; (1d6a8 <xTaskIncrementTick+0x1c4>)
   1d574:	681b      	ldr	r3, [r3, #0]
   1d576:	693a      	ldr	r2, [r7, #16]
   1d578:	429a      	cmp	r2, r3
   1d57a:	d363      	bcc.n	1d644 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1d57c:	4b46      	ldr	r3, [pc, #280]	; (1d698 <xTaskIncrementTick+0x1b4>)
   1d57e:	681b      	ldr	r3, [r3, #0]
   1d580:	681b      	ldr	r3, [r3, #0]
   1d582:	2b00      	cmp	r3, #0
   1d584:	d101      	bne.n	1d58a <xTaskIncrementTick+0xa6>
   1d586:	2301      	movs	r3, #1
   1d588:	e000      	b.n	1d58c <xTaskIncrementTick+0xa8>
   1d58a:	2300      	movs	r3, #0
   1d58c:	2b00      	cmp	r3, #0
   1d58e:	d004      	beq.n	1d59a <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d590:	4b45      	ldr	r3, [pc, #276]	; (1d6a8 <xTaskIncrementTick+0x1c4>)
   1d592:	2201      	movs	r2, #1
   1d594:	4252      	negs	r2, r2
   1d596:	601a      	str	r2, [r3, #0]
					break;
   1d598:	e054      	b.n	1d644 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1d59a:	4b3f      	ldr	r3, [pc, #252]	; (1d698 <xTaskIncrementTick+0x1b4>)
   1d59c:	681b      	ldr	r3, [r3, #0]
   1d59e:	68db      	ldr	r3, [r3, #12]
   1d5a0:	68db      	ldr	r3, [r3, #12]
   1d5a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1d5a4:	68bb      	ldr	r3, [r7, #8]
   1d5a6:	685b      	ldr	r3, [r3, #4]
   1d5a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1d5aa:	693a      	ldr	r2, [r7, #16]
   1d5ac:	687b      	ldr	r3, [r7, #4]
   1d5ae:	429a      	cmp	r2, r3
   1d5b0:	d203      	bcs.n	1d5ba <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1d5b2:	4b3d      	ldr	r3, [pc, #244]	; (1d6a8 <xTaskIncrementTick+0x1c4>)
   1d5b4:	687a      	ldr	r2, [r7, #4]
   1d5b6:	601a      	str	r2, [r3, #0]
						break;
   1d5b8:	e044      	b.n	1d644 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1d5ba:	68bb      	ldr	r3, [r7, #8]
   1d5bc:	3304      	adds	r3, #4
   1d5be:	0018      	movs	r0, r3
   1d5c0:	4b3a      	ldr	r3, [pc, #232]	; (1d6ac <xTaskIncrementTick+0x1c8>)
   1d5c2:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1d5c4:	68bb      	ldr	r3, [r7, #8]
   1d5c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d5c8:	2b00      	cmp	r3, #0
   1d5ca:	d004      	beq.n	1d5d6 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1d5cc:	68bb      	ldr	r3, [r7, #8]
   1d5ce:	3318      	adds	r3, #24
   1d5d0:	0018      	movs	r0, r3
   1d5d2:	4b36      	ldr	r3, [pc, #216]	; (1d6ac <xTaskIncrementTick+0x1c8>)
   1d5d4:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1d5d6:	68bb      	ldr	r3, [r7, #8]
   1d5d8:	0018      	movs	r0, r3
   1d5da:	4b35      	ldr	r3, [pc, #212]	; (1d6b0 <xTaskIncrementTick+0x1cc>)
   1d5dc:	4798      	blx	r3
   1d5de:	0003      	movs	r3, r0
   1d5e0:	001a      	movs	r2, r3
   1d5e2:	4b34      	ldr	r3, [pc, #208]	; (1d6b4 <xTaskIncrementTick+0x1d0>)
   1d5e4:	881b      	ldrh	r3, [r3, #0]
   1d5e6:	4013      	ands	r3, r2
   1d5e8:	b29b      	uxth	r3, r3
   1d5ea:	2b00      	cmp	r3, #0
   1d5ec:	d008      	beq.n	1d600 <xTaskIncrementTick+0x11c>
   1d5ee:	68bb      	ldr	r3, [r7, #8]
   1d5f0:	0018      	movs	r0, r3
   1d5f2:	4b31      	ldr	r3, [pc, #196]	; (1d6b8 <xTaskIncrementTick+0x1d4>)
   1d5f4:	4798      	blx	r3
   1d5f6:	0003      	movs	r3, r0
   1d5f8:	b2db      	uxtb	r3, r3
   1d5fa:	0018      	movs	r0, r3
   1d5fc:	4b2f      	ldr	r3, [pc, #188]	; (1d6bc <xTaskIncrementTick+0x1d8>)
   1d5fe:	4798      	blx	r3
   1d600:	68bb      	ldr	r3, [r7, #8]
   1d602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d604:	4b2e      	ldr	r3, [pc, #184]	; (1d6c0 <xTaskIncrementTick+0x1dc>)
   1d606:	681b      	ldr	r3, [r3, #0]
   1d608:	429a      	cmp	r2, r3
   1d60a:	d903      	bls.n	1d614 <xTaskIncrementTick+0x130>
   1d60c:	68bb      	ldr	r3, [r7, #8]
   1d60e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d610:	4b2b      	ldr	r3, [pc, #172]	; (1d6c0 <xTaskIncrementTick+0x1dc>)
   1d612:	601a      	str	r2, [r3, #0]
   1d614:	68bb      	ldr	r3, [r7, #8]
   1d616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d618:	0013      	movs	r3, r2
   1d61a:	009b      	lsls	r3, r3, #2
   1d61c:	189b      	adds	r3, r3, r2
   1d61e:	009b      	lsls	r3, r3, #2
   1d620:	4a28      	ldr	r2, [pc, #160]	; (1d6c4 <xTaskIncrementTick+0x1e0>)
   1d622:	189a      	adds	r2, r3, r2
   1d624:	68bb      	ldr	r3, [r7, #8]
   1d626:	3304      	adds	r3, #4
   1d628:	0019      	movs	r1, r3
   1d62a:	0010      	movs	r0, r2
   1d62c:	4b26      	ldr	r3, [pc, #152]	; (1d6c8 <xTaskIncrementTick+0x1e4>)
   1d62e:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1d630:	68bb      	ldr	r3, [r7, #8]
   1d632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d634:	4b25      	ldr	r3, [pc, #148]	; (1d6cc <xTaskIncrementTick+0x1e8>)
   1d636:	681b      	ldr	r3, [r3, #0]
   1d638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d63a:	429a      	cmp	r2, r3
   1d63c:	d39e      	bcc.n	1d57c <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1d63e:	2301      	movs	r3, #1
   1d640:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1d642:	e79b      	b.n	1d57c <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1d644:	4b21      	ldr	r3, [pc, #132]	; (1d6cc <xTaskIncrementTick+0x1e8>)
   1d646:	681b      	ldr	r3, [r3, #0]
   1d648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d64a:	491e      	ldr	r1, [pc, #120]	; (1d6c4 <xTaskIncrementTick+0x1e0>)
   1d64c:	0013      	movs	r3, r2
   1d64e:	009b      	lsls	r3, r3, #2
   1d650:	189b      	adds	r3, r3, r2
   1d652:	009b      	lsls	r3, r3, #2
   1d654:	585b      	ldr	r3, [r3, r1]
   1d656:	2b01      	cmp	r3, #1
   1d658:	d907      	bls.n	1d66a <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1d65a:	2301      	movs	r3, #1
   1d65c:	617b      	str	r3, [r7, #20]
   1d65e:	e004      	b.n	1d66a <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1d660:	4b08      	ldr	r3, [pc, #32]	; (1d684 <xTaskIncrementTick+0x1a0>)
   1d662:	681b      	ldr	r3, [r3, #0]
   1d664:	1c5a      	adds	r2, r3, #1
   1d666:	4b07      	ldr	r3, [pc, #28]	; (1d684 <xTaskIncrementTick+0x1a0>)
   1d668:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1d66a:	4b19      	ldr	r3, [pc, #100]	; (1d6d0 <xTaskIncrementTick+0x1ec>)
   1d66c:	681b      	ldr	r3, [r3, #0]
   1d66e:	2b00      	cmp	r3, #0
   1d670:	d001      	beq.n	1d676 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1d672:	2301      	movs	r3, #1
   1d674:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1d676:	697b      	ldr	r3, [r7, #20]
}
   1d678:	0018      	movs	r0, r3
   1d67a:	46bd      	mov	sp, r7
   1d67c:	b006      	add	sp, #24
   1d67e:	bd80      	pop	{r7, pc}
   1d680:	200041e0 	.word	0x200041e0
   1d684:	200041c8 	.word	0x200041c8
   1d688:	20000d40 	.word	0x20000d40
   1d68c:	0001ad15 	.word	0x0001ad15
   1d690:	200041bc 	.word	0x200041bc
   1d694:	00019d81 	.word	0x00019d81
   1d698:	20004170 	.word	0x20004170
   1d69c:	20004174 	.word	0x20004174
   1d6a0:	200041d0 	.word	0x200041d0
   1d6a4:	0001dd45 	.word	0x0001dd45
   1d6a8:	200041d8 	.word	0x200041d8
   1d6ac:	0001aefb 	.word	0x0001aefb
   1d6b0:	00019081 	.word	0x00019081
   1d6b4:	20000110 	.word	0x20000110
   1d6b8:	00019061 	.word	0x00019061
   1d6bc:	00019831 	.word	0x00019831
   1d6c0:	200041c0 	.word	0x200041c0
   1d6c4:	200040e4 	.word	0x200040e4
   1d6c8:	0001ae4b 	.word	0x0001ae4b
   1d6cc:	200040e0 	.word	0x200040e0
   1d6d0:	200041cc 	.word	0x200041cc

0001d6d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1d6d4:	b580      	push	{r7, lr}
   1d6d6:	b082      	sub	sp, #8
   1d6d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1d6da:	4b3a      	ldr	r3, [pc, #232]	; (1d7c4 <vTaskSwitchContext+0xf0>)
   1d6dc:	681b      	ldr	r3, [r3, #0]
   1d6de:	2b00      	cmp	r3, #0
   1d6e0:	d003      	beq.n	1d6ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1d6e2:	4b39      	ldr	r3, [pc, #228]	; (1d7c8 <vTaskSwitchContext+0xf4>)
   1d6e4:	2201      	movs	r2, #1
   1d6e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1d6e8:	e067      	b.n	1d7ba <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1d6ea:	4b37      	ldr	r3, [pc, #220]	; (1d7c8 <vTaskSwitchContext+0xf4>)
   1d6ec:	2200      	movs	r2, #0
   1d6ee:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1d6f0:	4b36      	ldr	r3, [pc, #216]	; (1d7cc <vTaskSwitchContext+0xf8>)
   1d6f2:	681b      	ldr	r3, [r3, #0]
   1d6f4:	681a      	ldr	r2, [r3, #0]
   1d6f6:	4b35      	ldr	r3, [pc, #212]	; (1d7cc <vTaskSwitchContext+0xf8>)
   1d6f8:	681b      	ldr	r3, [r3, #0]
   1d6fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1d6fc:	429a      	cmp	r2, r3
   1d6fe:	d808      	bhi.n	1d712 <vTaskSwitchContext+0x3e>
   1d700:	4b32      	ldr	r3, [pc, #200]	; (1d7cc <vTaskSwitchContext+0xf8>)
   1d702:	681a      	ldr	r2, [r3, #0]
   1d704:	4b31      	ldr	r3, [pc, #196]	; (1d7cc <vTaskSwitchContext+0xf8>)
   1d706:	681b      	ldr	r3, [r3, #0]
   1d708:	3334      	adds	r3, #52	; 0x34
   1d70a:	0019      	movs	r1, r3
   1d70c:	0010      	movs	r0, r2
   1d70e:	4b30      	ldr	r3, [pc, #192]	; (1d7d0 <vTaskSwitchContext+0xfc>)
   1d710:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1d712:	4b30      	ldr	r3, [pc, #192]	; (1d7d4 <vTaskSwitchContext+0x100>)
   1d714:	681b      	ldr	r3, [r3, #0]
   1d716:	607b      	str	r3, [r7, #4]
   1d718:	e007      	b.n	1d72a <vTaskSwitchContext+0x56>
   1d71a:	687b      	ldr	r3, [r7, #4]
   1d71c:	2b00      	cmp	r3, #0
   1d71e:	d101      	bne.n	1d724 <vTaskSwitchContext+0x50>
   1d720:	b672      	cpsid	i
   1d722:	e7fe      	b.n	1d722 <vTaskSwitchContext+0x4e>
   1d724:	687b      	ldr	r3, [r7, #4]
   1d726:	3b01      	subs	r3, #1
   1d728:	607b      	str	r3, [r7, #4]
   1d72a:	492b      	ldr	r1, [pc, #172]	; (1d7d8 <vTaskSwitchContext+0x104>)
   1d72c:	687a      	ldr	r2, [r7, #4]
   1d72e:	0013      	movs	r3, r2
   1d730:	009b      	lsls	r3, r3, #2
   1d732:	189b      	adds	r3, r3, r2
   1d734:	009b      	lsls	r3, r3, #2
   1d736:	585b      	ldr	r3, [r3, r1]
   1d738:	2b00      	cmp	r3, #0
   1d73a:	d0ee      	beq.n	1d71a <vTaskSwitchContext+0x46>
   1d73c:	687a      	ldr	r2, [r7, #4]
   1d73e:	0013      	movs	r3, r2
   1d740:	009b      	lsls	r3, r3, #2
   1d742:	189b      	adds	r3, r3, r2
   1d744:	009b      	lsls	r3, r3, #2
   1d746:	4a24      	ldr	r2, [pc, #144]	; (1d7d8 <vTaskSwitchContext+0x104>)
   1d748:	189b      	adds	r3, r3, r2
   1d74a:	603b      	str	r3, [r7, #0]
   1d74c:	683b      	ldr	r3, [r7, #0]
   1d74e:	685b      	ldr	r3, [r3, #4]
   1d750:	685a      	ldr	r2, [r3, #4]
   1d752:	683b      	ldr	r3, [r7, #0]
   1d754:	605a      	str	r2, [r3, #4]
   1d756:	683b      	ldr	r3, [r7, #0]
   1d758:	685a      	ldr	r2, [r3, #4]
   1d75a:	683b      	ldr	r3, [r7, #0]
   1d75c:	3308      	adds	r3, #8
   1d75e:	429a      	cmp	r2, r3
   1d760:	d104      	bne.n	1d76c <vTaskSwitchContext+0x98>
   1d762:	683b      	ldr	r3, [r7, #0]
   1d764:	685b      	ldr	r3, [r3, #4]
   1d766:	685a      	ldr	r2, [r3, #4]
   1d768:	683b      	ldr	r3, [r7, #0]
   1d76a:	605a      	str	r2, [r3, #4]
   1d76c:	683b      	ldr	r3, [r7, #0]
   1d76e:	685b      	ldr	r3, [r3, #4]
   1d770:	68da      	ldr	r2, [r3, #12]
   1d772:	4b16      	ldr	r3, [pc, #88]	; (1d7cc <vTaskSwitchContext+0xf8>)
   1d774:	601a      	str	r2, [r3, #0]
   1d776:	4b17      	ldr	r3, [pc, #92]	; (1d7d4 <vTaskSwitchContext+0x100>)
   1d778:	687a      	ldr	r2, [r7, #4]
   1d77a:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1d77c:	4b17      	ldr	r3, [pc, #92]	; (1d7dc <vTaskSwitchContext+0x108>)
   1d77e:	2201      	movs	r2, #1
   1d780:	601a      	str	r2, [r3, #0]
   1d782:	4b17      	ldr	r3, [pc, #92]	; (1d7e0 <vTaskSwitchContext+0x10c>)
   1d784:	4798      	blx	r3
   1d786:	0003      	movs	r3, r0
   1d788:	0018      	movs	r0, r3
   1d78a:	4b16      	ldr	r3, [pc, #88]	; (1d7e4 <vTaskSwitchContext+0x110>)
   1d78c:	4798      	blx	r3
   1d78e:	0003      	movs	r3, r0
   1d790:	001a      	movs	r2, r3
   1d792:	4b15      	ldr	r3, [pc, #84]	; (1d7e8 <vTaskSwitchContext+0x114>)
   1d794:	881b      	ldrh	r3, [r3, #0]
   1d796:	4013      	ands	r3, r2
   1d798:	b29b      	uxth	r3, r3
   1d79a:	2b00      	cmp	r3, #0
   1d79c:	d00a      	beq.n	1d7b4 <vTaskSwitchContext+0xe0>
   1d79e:	4b10      	ldr	r3, [pc, #64]	; (1d7e0 <vTaskSwitchContext+0x10c>)
   1d7a0:	4798      	blx	r3
   1d7a2:	0003      	movs	r3, r0
   1d7a4:	0018      	movs	r0, r3
   1d7a6:	4b11      	ldr	r3, [pc, #68]	; (1d7ec <vTaskSwitchContext+0x118>)
   1d7a8:	4798      	blx	r3
   1d7aa:	0003      	movs	r3, r0
   1d7ac:	b2db      	uxtb	r3, r3
   1d7ae:	0018      	movs	r0, r3
   1d7b0:	4b0f      	ldr	r3, [pc, #60]	; (1d7f0 <vTaskSwitchContext+0x11c>)
   1d7b2:	4798      	blx	r3
   1d7b4:	4b09      	ldr	r3, [pc, #36]	; (1d7dc <vTaskSwitchContext+0x108>)
   1d7b6:	2202      	movs	r2, #2
   1d7b8:	601a      	str	r2, [r3, #0]
}
   1d7ba:	46c0      	nop			; (mov r8, r8)
   1d7bc:	46bd      	mov	sp, r7
   1d7be:	b002      	add	sp, #8
   1d7c0:	bd80      	pop	{r7, pc}
   1d7c2:	46c0      	nop			; (mov r8, r8)
   1d7c4:	200041e0 	.word	0x200041e0
   1d7c8:	200041cc 	.word	0x200041cc
   1d7cc:	200040e0 	.word	0x200040e0
   1d7d0:	00033abd 	.word	0x00033abd
   1d7d4:	200041c0 	.word	0x200041c0
   1d7d8:	200040e4 	.word	0x200040e4
   1d7dc:	20000d4c 	.word	0x20000d4c
   1d7e0:	0001931d 	.word	0x0001931d
   1d7e4:	00019081 	.word	0x00019081
   1d7e8:	20000110 	.word	0x20000110
   1d7ec:	00019061 	.word	0x00019061
   1d7f0:	00019e7d 	.word	0x00019e7d

0001d7f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1d7f4:	b580      	push	{r7, lr}
   1d7f6:	b082      	sub	sp, #8
   1d7f8:	af00      	add	r7, sp, #0
   1d7fa:	6078      	str	r0, [r7, #4]
   1d7fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1d7fe:	687b      	ldr	r3, [r7, #4]
   1d800:	2b00      	cmp	r3, #0
   1d802:	d101      	bne.n	1d808 <vTaskPlaceOnEventList+0x14>
   1d804:	b672      	cpsid	i
   1d806:	e7fe      	b.n	1d806 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1d808:	4b08      	ldr	r3, [pc, #32]	; (1d82c <vTaskPlaceOnEventList+0x38>)
   1d80a:	681b      	ldr	r3, [r3, #0]
   1d80c:	3318      	adds	r3, #24
   1d80e:	001a      	movs	r2, r3
   1d810:	687b      	ldr	r3, [r7, #4]
   1d812:	0011      	movs	r1, r2
   1d814:	0018      	movs	r0, r3
   1d816:	4b06      	ldr	r3, [pc, #24]	; (1d830 <vTaskPlaceOnEventList+0x3c>)
   1d818:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1d81a:	683b      	ldr	r3, [r7, #0]
   1d81c:	2101      	movs	r1, #1
   1d81e:	0018      	movs	r0, r3
   1d820:	4b04      	ldr	r3, [pc, #16]	; (1d834 <vTaskPlaceOnEventList+0x40>)
   1d822:	4798      	blx	r3
}
   1d824:	46c0      	nop			; (mov r8, r8)
   1d826:	46bd      	mov	sp, r7
   1d828:	b002      	add	sp, #8
   1d82a:	bd80      	pop	{r7, pc}
   1d82c:	200040e0 	.word	0x200040e0
   1d830:	0001ae8f 	.word	0x0001ae8f
   1d834:	0001e299 	.word	0x0001e299

0001d838 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1d838:	b580      	push	{r7, lr}
   1d83a:	b084      	sub	sp, #16
   1d83c:	af00      	add	r7, sp, #0
   1d83e:	60f8      	str	r0, [r7, #12]
   1d840:	60b9      	str	r1, [r7, #8]
   1d842:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1d844:	68fb      	ldr	r3, [r7, #12]
   1d846:	2b00      	cmp	r3, #0
   1d848:	d101      	bne.n	1d84e <vTaskPlaceOnEventListRestricted+0x16>
   1d84a:	b672      	cpsid	i
   1d84c:	e7fe      	b.n	1d84c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1d84e:	4b28      	ldr	r3, [pc, #160]	; (1d8f0 <vTaskPlaceOnEventListRestricted+0xb8>)
   1d850:	681b      	ldr	r3, [r3, #0]
   1d852:	3318      	adds	r3, #24
   1d854:	001a      	movs	r2, r3
   1d856:	68fb      	ldr	r3, [r7, #12]
   1d858:	0011      	movs	r1, r2
   1d85a:	0018      	movs	r0, r3
   1d85c:	4b25      	ldr	r3, [pc, #148]	; (1d8f4 <vTaskPlaceOnEventListRestricted+0xbc>)
   1d85e:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1d860:	687b      	ldr	r3, [r7, #4]
   1d862:	2b00      	cmp	r3, #0
   1d864:	d002      	beq.n	1d86c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1d866:	2301      	movs	r3, #1
   1d868:	425b      	negs	r3, r3
   1d86a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1d86c:	4b20      	ldr	r3, [pc, #128]	; (1d8f0 <vTaskPlaceOnEventListRestricted+0xb8>)
   1d86e:	681b      	ldr	r3, [r3, #0]
   1d870:	0018      	movs	r0, r3
   1d872:	4b21      	ldr	r3, [pc, #132]	; (1d8f8 <vTaskPlaceOnEventListRestricted+0xc0>)
   1d874:	4798      	blx	r3
   1d876:	0003      	movs	r3, r0
   1d878:	001a      	movs	r2, r3
   1d87a:	4b20      	ldr	r3, [pc, #128]	; (1d8fc <vTaskPlaceOnEventListRestricted+0xc4>)
   1d87c:	881b      	ldrh	r3, [r3, #0]
   1d87e:	4013      	ands	r3, r2
   1d880:	b29b      	uxth	r3, r3
   1d882:	2b00      	cmp	r3, #0
   1d884:	d011      	beq.n	1d8aa <vTaskPlaceOnEventListRestricted+0x72>
   1d886:	4b1e      	ldr	r3, [pc, #120]	; (1d900 <vTaskPlaceOnEventListRestricted+0xc8>)
   1d888:	681a      	ldr	r2, [r3, #0]
   1d88a:	68bb      	ldr	r3, [r7, #8]
   1d88c:	18d3      	adds	r3, r2, r3
   1d88e:	0019      	movs	r1, r3
   1d890:	2088      	movs	r0, #136	; 0x88
   1d892:	4b1c      	ldr	r3, [pc, #112]	; (1d904 <vTaskPlaceOnEventListRestricted+0xcc>)
   1d894:	4798      	blx	r3
   1d896:	4b16      	ldr	r3, [pc, #88]	; (1d8f0 <vTaskPlaceOnEventListRestricted+0xb8>)
   1d898:	681b      	ldr	r3, [r3, #0]
   1d89a:	0018      	movs	r0, r3
   1d89c:	4b1a      	ldr	r3, [pc, #104]	; (1d908 <vTaskPlaceOnEventListRestricted+0xd0>)
   1d89e:	4798      	blx	r3
   1d8a0:	0003      	movs	r3, r0
   1d8a2:	b2db      	uxtb	r3, r3
   1d8a4:	0018      	movs	r0, r3
   1d8a6:	4b19      	ldr	r3, [pc, #100]	; (1d90c <vTaskPlaceOnEventListRestricted+0xd4>)
   1d8a8:	4798      	blx	r3
   1d8aa:	4b19      	ldr	r3, [pc, #100]	; (1d910 <vTaskPlaceOnEventListRestricted+0xd8>)
   1d8ac:	4798      	blx	r3
   1d8ae:	0003      	movs	r3, r0
   1d8b0:	0018      	movs	r0, r3
   1d8b2:	4b11      	ldr	r3, [pc, #68]	; (1d8f8 <vTaskPlaceOnEventListRestricted+0xc0>)
   1d8b4:	4798      	blx	r3
   1d8b6:	0003      	movs	r3, r0
   1d8b8:	001a      	movs	r2, r3
   1d8ba:	4b10      	ldr	r3, [pc, #64]	; (1d8fc <vTaskPlaceOnEventListRestricted+0xc4>)
   1d8bc:	881b      	ldrh	r3, [r3, #0]
   1d8be:	4013      	ands	r3, r2
   1d8c0:	b29b      	uxth	r3, r3
   1d8c2:	2b00      	cmp	r3, #0
   1d8c4:	d00a      	beq.n	1d8dc <vTaskPlaceOnEventListRestricted+0xa4>
   1d8c6:	4b12      	ldr	r3, [pc, #72]	; (1d910 <vTaskPlaceOnEventListRestricted+0xd8>)
   1d8c8:	4798      	blx	r3
   1d8ca:	0003      	movs	r3, r0
   1d8cc:	0018      	movs	r0, r3
   1d8ce:	4b0e      	ldr	r3, [pc, #56]	; (1d908 <vTaskPlaceOnEventListRestricted+0xd0>)
   1d8d0:	4798      	blx	r3
   1d8d2:	0003      	movs	r3, r0
   1d8d4:	b2db      	uxtb	r3, r3
   1d8d6:	0018      	movs	r0, r3
   1d8d8:	4b0c      	ldr	r3, [pc, #48]	; (1d90c <vTaskPlaceOnEventListRestricted+0xd4>)
   1d8da:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1d8dc:	687a      	ldr	r2, [r7, #4]
   1d8de:	68bb      	ldr	r3, [r7, #8]
   1d8e0:	0011      	movs	r1, r2
   1d8e2:	0018      	movs	r0, r3
   1d8e4:	4b0b      	ldr	r3, [pc, #44]	; (1d914 <vTaskPlaceOnEventListRestricted+0xdc>)
   1d8e6:	4798      	blx	r3
	}
   1d8e8:	46c0      	nop			; (mov r8, r8)
   1d8ea:	46bd      	mov	sp, r7
   1d8ec:	b004      	add	sp, #16
   1d8ee:	bd80      	pop	{r7, pc}
   1d8f0:	200040e0 	.word	0x200040e0
   1d8f4:	0001ae4b 	.word	0x0001ae4b
   1d8f8:	00019081 	.word	0x00019081
   1d8fc:	20000110 	.word	0x20000110
   1d900:	200041bc 	.word	0x200041bc
   1d904:	00019d81 	.word	0x00019d81
   1d908:	00019061 	.word	0x00019061
   1d90c:	0001a211 	.word	0x0001a211
   1d910:	0001931d 	.word	0x0001931d
   1d914:	0001e299 	.word	0x0001e299

0001d918 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1d918:	b580      	push	{r7, lr}
   1d91a:	b084      	sub	sp, #16
   1d91c:	af00      	add	r7, sp, #0
   1d91e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1d920:	687b      	ldr	r3, [r7, #4]
   1d922:	68db      	ldr	r3, [r3, #12]
   1d924:	68db      	ldr	r3, [r3, #12]
   1d926:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1d928:	68bb      	ldr	r3, [r7, #8]
   1d92a:	2b00      	cmp	r3, #0
   1d92c:	d101      	bne.n	1d932 <xTaskRemoveFromEventList+0x1a>
   1d92e:	b672      	cpsid	i
   1d930:	e7fe      	b.n	1d930 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1d932:	68bb      	ldr	r3, [r7, #8]
   1d934:	3318      	adds	r3, #24
   1d936:	0018      	movs	r0, r3
   1d938:	4b2a      	ldr	r3, [pc, #168]	; (1d9e4 <xTaskRemoveFromEventList+0xcc>)
   1d93a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d93c:	4b2a      	ldr	r3, [pc, #168]	; (1d9e8 <xTaskRemoveFromEventList+0xd0>)
   1d93e:	681b      	ldr	r3, [r3, #0]
   1d940:	2b00      	cmp	r3, #0
   1d942:	d132      	bne.n	1d9aa <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1d944:	68bb      	ldr	r3, [r7, #8]
   1d946:	3304      	adds	r3, #4
   1d948:	0018      	movs	r0, r3
   1d94a:	4b26      	ldr	r3, [pc, #152]	; (1d9e4 <xTaskRemoveFromEventList+0xcc>)
   1d94c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1d94e:	68bb      	ldr	r3, [r7, #8]
   1d950:	0018      	movs	r0, r3
   1d952:	4b26      	ldr	r3, [pc, #152]	; (1d9ec <xTaskRemoveFromEventList+0xd4>)
   1d954:	4798      	blx	r3
   1d956:	0003      	movs	r3, r0
   1d958:	001a      	movs	r2, r3
   1d95a:	4b25      	ldr	r3, [pc, #148]	; (1d9f0 <xTaskRemoveFromEventList+0xd8>)
   1d95c:	881b      	ldrh	r3, [r3, #0]
   1d95e:	4013      	ands	r3, r2
   1d960:	b29b      	uxth	r3, r3
   1d962:	2b00      	cmp	r3, #0
   1d964:	d008      	beq.n	1d978 <xTaskRemoveFromEventList+0x60>
   1d966:	68bb      	ldr	r3, [r7, #8]
   1d968:	0018      	movs	r0, r3
   1d96a:	4b22      	ldr	r3, [pc, #136]	; (1d9f4 <xTaskRemoveFromEventList+0xdc>)
   1d96c:	4798      	blx	r3
   1d96e:	0003      	movs	r3, r0
   1d970:	b2db      	uxtb	r3, r3
   1d972:	0018      	movs	r0, r3
   1d974:	4b20      	ldr	r3, [pc, #128]	; (1d9f8 <xTaskRemoveFromEventList+0xe0>)
   1d976:	4798      	blx	r3
   1d978:	68bb      	ldr	r3, [r7, #8]
   1d97a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d97c:	4b1f      	ldr	r3, [pc, #124]	; (1d9fc <xTaskRemoveFromEventList+0xe4>)
   1d97e:	681b      	ldr	r3, [r3, #0]
   1d980:	429a      	cmp	r2, r3
   1d982:	d903      	bls.n	1d98c <xTaskRemoveFromEventList+0x74>
   1d984:	68bb      	ldr	r3, [r7, #8]
   1d986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d988:	4b1c      	ldr	r3, [pc, #112]	; (1d9fc <xTaskRemoveFromEventList+0xe4>)
   1d98a:	601a      	str	r2, [r3, #0]
   1d98c:	68bb      	ldr	r3, [r7, #8]
   1d98e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d990:	0013      	movs	r3, r2
   1d992:	009b      	lsls	r3, r3, #2
   1d994:	189b      	adds	r3, r3, r2
   1d996:	009b      	lsls	r3, r3, #2
   1d998:	4a19      	ldr	r2, [pc, #100]	; (1da00 <xTaskRemoveFromEventList+0xe8>)
   1d99a:	189a      	adds	r2, r3, r2
   1d99c:	68bb      	ldr	r3, [r7, #8]
   1d99e:	3304      	adds	r3, #4
   1d9a0:	0019      	movs	r1, r3
   1d9a2:	0010      	movs	r0, r2
   1d9a4:	4b17      	ldr	r3, [pc, #92]	; (1da04 <xTaskRemoveFromEventList+0xec>)
   1d9a6:	4798      	blx	r3
   1d9a8:	e007      	b.n	1d9ba <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1d9aa:	68bb      	ldr	r3, [r7, #8]
   1d9ac:	3318      	adds	r3, #24
   1d9ae:	001a      	movs	r2, r3
   1d9b0:	4b15      	ldr	r3, [pc, #84]	; (1da08 <xTaskRemoveFromEventList+0xf0>)
   1d9b2:	0011      	movs	r1, r2
   1d9b4:	0018      	movs	r0, r3
   1d9b6:	4b13      	ldr	r3, [pc, #76]	; (1da04 <xTaskRemoveFromEventList+0xec>)
   1d9b8:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1d9ba:	68bb      	ldr	r3, [r7, #8]
   1d9bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d9be:	4b13      	ldr	r3, [pc, #76]	; (1da0c <xTaskRemoveFromEventList+0xf4>)
   1d9c0:	681b      	ldr	r3, [r3, #0]
   1d9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d9c4:	429a      	cmp	r2, r3
   1d9c6:	d905      	bls.n	1d9d4 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1d9c8:	2301      	movs	r3, #1
   1d9ca:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1d9cc:	4b10      	ldr	r3, [pc, #64]	; (1da10 <xTaskRemoveFromEventList+0xf8>)
   1d9ce:	2201      	movs	r2, #1
   1d9d0:	601a      	str	r2, [r3, #0]
   1d9d2:	e001      	b.n	1d9d8 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1d9d4:	2300      	movs	r3, #0
   1d9d6:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1d9d8:	68fb      	ldr	r3, [r7, #12]
}
   1d9da:	0018      	movs	r0, r3
   1d9dc:	46bd      	mov	sp, r7
   1d9de:	b004      	add	sp, #16
   1d9e0:	bd80      	pop	{r7, pc}
   1d9e2:	46c0      	nop			; (mov r8, r8)
   1d9e4:	0001aefb 	.word	0x0001aefb
   1d9e8:	200041e0 	.word	0x200041e0
   1d9ec:	00019081 	.word	0x00019081
   1d9f0:	20000110 	.word	0x20000110
   1d9f4:	00019061 	.word	0x00019061
   1d9f8:	00019831 	.word	0x00019831
   1d9fc:	200041c0 	.word	0x200041c0
   1da00:	200040e4 	.word	0x200040e4
   1da04:	0001ae4b 	.word	0x0001ae4b
   1da08:	20004178 	.word	0x20004178
   1da0c:	200040e0 	.word	0x200040e0
   1da10:	200041cc 	.word	0x200041cc

0001da14 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1da14:	b580      	push	{r7, lr}
   1da16:	b082      	sub	sp, #8
   1da18:	af00      	add	r7, sp, #0
   1da1a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1da1c:	687b      	ldr	r3, [r7, #4]
   1da1e:	2b00      	cmp	r3, #0
   1da20:	d101      	bne.n	1da26 <vTaskSetTimeOutState+0x12>
   1da22:	b672      	cpsid	i
   1da24:	e7fe      	b.n	1da24 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1da26:	4b08      	ldr	r3, [pc, #32]	; (1da48 <vTaskSetTimeOutState+0x34>)
   1da28:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1da2a:	4b08      	ldr	r3, [pc, #32]	; (1da4c <vTaskSetTimeOutState+0x38>)
   1da2c:	681a      	ldr	r2, [r3, #0]
   1da2e:	687b      	ldr	r3, [r7, #4]
   1da30:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1da32:	4b07      	ldr	r3, [pc, #28]	; (1da50 <vTaskSetTimeOutState+0x3c>)
   1da34:	681a      	ldr	r2, [r3, #0]
   1da36:	687b      	ldr	r3, [r7, #4]
   1da38:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1da3a:	4b06      	ldr	r3, [pc, #24]	; (1da54 <vTaskSetTimeOutState+0x40>)
   1da3c:	4798      	blx	r3
}
   1da3e:	46c0      	nop			; (mov r8, r8)
   1da40:	46bd      	mov	sp, r7
   1da42:	b002      	add	sp, #8
   1da44:	bd80      	pop	{r7, pc}
   1da46:	46c0      	nop			; (mov r8, r8)
   1da48:	0001b089 	.word	0x0001b089
   1da4c:	200041d0 	.word	0x200041d0
   1da50:	200041bc 	.word	0x200041bc
   1da54:	0001b0ad 	.word	0x0001b0ad

0001da58 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1da58:	b580      	push	{r7, lr}
   1da5a:	b082      	sub	sp, #8
   1da5c:	af00      	add	r7, sp, #0
   1da5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1da60:	4b05      	ldr	r3, [pc, #20]	; (1da78 <vTaskInternalSetTimeOutState+0x20>)
   1da62:	681a      	ldr	r2, [r3, #0]
   1da64:	687b      	ldr	r3, [r7, #4]
   1da66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1da68:	4b04      	ldr	r3, [pc, #16]	; (1da7c <vTaskInternalSetTimeOutState+0x24>)
   1da6a:	681a      	ldr	r2, [r3, #0]
   1da6c:	687b      	ldr	r3, [r7, #4]
   1da6e:	605a      	str	r2, [r3, #4]
}
   1da70:	46c0      	nop			; (mov r8, r8)
   1da72:	46bd      	mov	sp, r7
   1da74:	b002      	add	sp, #8
   1da76:	bd80      	pop	{r7, pc}
   1da78:	200041d0 	.word	0x200041d0
   1da7c:	200041bc 	.word	0x200041bc

0001da80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1da80:	b580      	push	{r7, lr}
   1da82:	b086      	sub	sp, #24
   1da84:	af00      	add	r7, sp, #0
   1da86:	6078      	str	r0, [r7, #4]
   1da88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1da8a:	687b      	ldr	r3, [r7, #4]
   1da8c:	2b00      	cmp	r3, #0
   1da8e:	d101      	bne.n	1da94 <xTaskCheckForTimeOut+0x14>
   1da90:	b672      	cpsid	i
   1da92:	e7fe      	b.n	1da92 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1da94:	683b      	ldr	r3, [r7, #0]
   1da96:	2b00      	cmp	r3, #0
   1da98:	d101      	bne.n	1da9e <xTaskCheckForTimeOut+0x1e>
   1da9a:	b672      	cpsid	i
   1da9c:	e7fe      	b.n	1da9c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1da9e:	4b1e      	ldr	r3, [pc, #120]	; (1db18 <xTaskCheckForTimeOut+0x98>)
   1daa0:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1daa2:	4b1e      	ldr	r3, [pc, #120]	; (1db1c <xTaskCheckForTimeOut+0x9c>)
   1daa4:	681b      	ldr	r3, [r3, #0]
   1daa6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1daa8:	687b      	ldr	r3, [r7, #4]
   1daaa:	685b      	ldr	r3, [r3, #4]
   1daac:	693a      	ldr	r2, [r7, #16]
   1daae:	1ad3      	subs	r3, r2, r3
   1dab0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1dab2:	683b      	ldr	r3, [r7, #0]
   1dab4:	681b      	ldr	r3, [r3, #0]
   1dab6:	3301      	adds	r3, #1
   1dab8:	d102      	bne.n	1dac0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1daba:	2300      	movs	r3, #0
   1dabc:	617b      	str	r3, [r7, #20]
   1dabe:	e024      	b.n	1db0a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1dac0:	687b      	ldr	r3, [r7, #4]
   1dac2:	681a      	ldr	r2, [r3, #0]
   1dac4:	4b16      	ldr	r3, [pc, #88]	; (1db20 <xTaskCheckForTimeOut+0xa0>)
   1dac6:	681b      	ldr	r3, [r3, #0]
   1dac8:	429a      	cmp	r2, r3
   1daca:	d007      	beq.n	1dadc <xTaskCheckForTimeOut+0x5c>
   1dacc:	687b      	ldr	r3, [r7, #4]
   1dace:	685a      	ldr	r2, [r3, #4]
   1dad0:	693b      	ldr	r3, [r7, #16]
   1dad2:	429a      	cmp	r2, r3
   1dad4:	d802      	bhi.n	1dadc <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1dad6:	2301      	movs	r3, #1
   1dad8:	617b      	str	r3, [r7, #20]
   1dada:	e016      	b.n	1db0a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1dadc:	683b      	ldr	r3, [r7, #0]
   1dade:	681a      	ldr	r2, [r3, #0]
   1dae0:	68fb      	ldr	r3, [r7, #12]
   1dae2:	429a      	cmp	r2, r3
   1dae4:	d90c      	bls.n	1db00 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1dae6:	683b      	ldr	r3, [r7, #0]
   1dae8:	681a      	ldr	r2, [r3, #0]
   1daea:	68fb      	ldr	r3, [r7, #12]
   1daec:	1ad2      	subs	r2, r2, r3
   1daee:	683b      	ldr	r3, [r7, #0]
   1daf0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1daf2:	687b      	ldr	r3, [r7, #4]
   1daf4:	0018      	movs	r0, r3
   1daf6:	4b0b      	ldr	r3, [pc, #44]	; (1db24 <xTaskCheckForTimeOut+0xa4>)
   1daf8:	4798      	blx	r3
			xReturn = pdFALSE;
   1dafa:	2300      	movs	r3, #0
   1dafc:	617b      	str	r3, [r7, #20]
   1dafe:	e004      	b.n	1db0a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1db00:	683b      	ldr	r3, [r7, #0]
   1db02:	2200      	movs	r2, #0
   1db04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1db06:	2301      	movs	r3, #1
   1db08:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1db0a:	4b07      	ldr	r3, [pc, #28]	; (1db28 <xTaskCheckForTimeOut+0xa8>)
   1db0c:	4798      	blx	r3

	return xReturn;
   1db0e:	697b      	ldr	r3, [r7, #20]
}
   1db10:	0018      	movs	r0, r3
   1db12:	46bd      	mov	sp, r7
   1db14:	b006      	add	sp, #24
   1db16:	bd80      	pop	{r7, pc}
   1db18:	0001b089 	.word	0x0001b089
   1db1c:	200041bc 	.word	0x200041bc
   1db20:	200041d0 	.word	0x200041d0
   1db24:	0001da59 	.word	0x0001da59
   1db28:	0001b0ad 	.word	0x0001b0ad

0001db2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1db2c:	b580      	push	{r7, lr}
   1db2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1db30:	4b02      	ldr	r3, [pc, #8]	; (1db3c <vTaskMissedYield+0x10>)
   1db32:	2201      	movs	r2, #1
   1db34:	601a      	str	r2, [r3, #0]
}
   1db36:	46c0      	nop			; (mov r8, r8)
   1db38:	46bd      	mov	sp, r7
   1db3a:	bd80      	pop	{r7, pc}
   1db3c:	200041cc 	.word	0x200041cc

0001db40 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1db40:	b580      	push	{r7, lr}
   1db42:	b084      	sub	sp, #16
   1db44:	af00      	add	r7, sp, #0
   1db46:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1db48:	687b      	ldr	r3, [r7, #4]
   1db4a:	2b00      	cmp	r3, #0
   1db4c:	d005      	beq.n	1db5a <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1db4e:	687b      	ldr	r3, [r7, #4]
   1db50:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1db52:	68bb      	ldr	r3, [r7, #8]
   1db54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1db56:	60fb      	str	r3, [r7, #12]
   1db58:	e001      	b.n	1db5e <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1db5a:	2300      	movs	r3, #0
   1db5c:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1db5e:	68fb      	ldr	r3, [r7, #12]
	}
   1db60:	0018      	movs	r0, r3
   1db62:	46bd      	mov	sp, r7
   1db64:	b004      	add	sp, #16
   1db66:	bd80      	pop	{r7, pc}

0001db68 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1db68:	b580      	push	{r7, lr}
   1db6a:	b084      	sub	sp, #16
   1db6c:	af00      	add	r7, sp, #0
   1db6e:	6078      	str	r0, [r7, #4]
   1db70:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1db72:	687b      	ldr	r3, [r7, #4]
   1db74:	2b00      	cmp	r3, #0
   1db76:	d004      	beq.n	1db82 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1db78:	687b      	ldr	r3, [r7, #4]
   1db7a:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1db7c:	68fb      	ldr	r3, [r7, #12]
   1db7e:	683a      	ldr	r2, [r7, #0]
   1db80:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1db82:	46c0      	nop			; (mov r8, r8)
   1db84:	46bd      	mov	sp, r7
   1db86:	b004      	add	sp, #16
   1db88:	bd80      	pop	{r7, pc}
	...

0001db8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1db8c:	b580      	push	{r7, lr}
   1db8e:	b082      	sub	sp, #8
   1db90:	af00      	add	r7, sp, #0
   1db92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1db94:	4b04      	ldr	r3, [pc, #16]	; (1dba8 <prvIdleTask+0x1c>)
   1db96:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1db98:	4b04      	ldr	r3, [pc, #16]	; (1dbac <prvIdleTask+0x20>)
   1db9a:	681b      	ldr	r3, [r3, #0]
   1db9c:	2b01      	cmp	r3, #1
   1db9e:	d9f9      	bls.n	1db94 <prvIdleTask+0x8>
			{
				taskYIELD();
   1dba0:	4b03      	ldr	r3, [pc, #12]	; (1dbb0 <prvIdleTask+0x24>)
   1dba2:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1dba4:	e7f6      	b.n	1db94 <prvIdleTask+0x8>
   1dba6:	46c0      	nop			; (mov r8, r8)
   1dba8:	0001dc41 	.word	0x0001dc41
   1dbac:	200040e4 	.word	0x200040e4
   1dbb0:	0001b071 	.word	0x0001b071

0001dbb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1dbb4:	b580      	push	{r7, lr}
   1dbb6:	b082      	sub	sp, #8
   1dbb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1dbba:	2300      	movs	r3, #0
   1dbbc:	607b      	str	r3, [r7, #4]
   1dbbe:	e00c      	b.n	1dbda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1dbc0:	687a      	ldr	r2, [r7, #4]
   1dbc2:	0013      	movs	r3, r2
   1dbc4:	009b      	lsls	r3, r3, #2
   1dbc6:	189b      	adds	r3, r3, r2
   1dbc8:	009b      	lsls	r3, r3, #2
   1dbca:	4a14      	ldr	r2, [pc, #80]	; (1dc1c <prvInitialiseTaskLists+0x68>)
   1dbcc:	189b      	adds	r3, r3, r2
   1dbce:	0018      	movs	r0, r3
   1dbd0:	4b13      	ldr	r3, [pc, #76]	; (1dc20 <prvInitialiseTaskLists+0x6c>)
   1dbd2:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1dbd4:	687b      	ldr	r3, [r7, #4]
   1dbd6:	3301      	adds	r3, #1
   1dbd8:	607b      	str	r3, [r7, #4]
   1dbda:	687b      	ldr	r3, [r7, #4]
   1dbdc:	2b04      	cmp	r3, #4
   1dbde:	d9ef      	bls.n	1dbc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1dbe0:	4b10      	ldr	r3, [pc, #64]	; (1dc24 <prvInitialiseTaskLists+0x70>)
   1dbe2:	0018      	movs	r0, r3
   1dbe4:	4b0e      	ldr	r3, [pc, #56]	; (1dc20 <prvInitialiseTaskLists+0x6c>)
   1dbe6:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1dbe8:	4b0f      	ldr	r3, [pc, #60]	; (1dc28 <prvInitialiseTaskLists+0x74>)
   1dbea:	0018      	movs	r0, r3
   1dbec:	4b0c      	ldr	r3, [pc, #48]	; (1dc20 <prvInitialiseTaskLists+0x6c>)
   1dbee:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1dbf0:	4b0e      	ldr	r3, [pc, #56]	; (1dc2c <prvInitialiseTaskLists+0x78>)
   1dbf2:	0018      	movs	r0, r3
   1dbf4:	4b0a      	ldr	r3, [pc, #40]	; (1dc20 <prvInitialiseTaskLists+0x6c>)
   1dbf6:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1dbf8:	4b0d      	ldr	r3, [pc, #52]	; (1dc30 <prvInitialiseTaskLists+0x7c>)
   1dbfa:	0018      	movs	r0, r3
   1dbfc:	4b08      	ldr	r3, [pc, #32]	; (1dc20 <prvInitialiseTaskLists+0x6c>)
   1dbfe:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1dc00:	4b0c      	ldr	r3, [pc, #48]	; (1dc34 <prvInitialiseTaskLists+0x80>)
   1dc02:	0018      	movs	r0, r3
   1dc04:	4b06      	ldr	r3, [pc, #24]	; (1dc20 <prvInitialiseTaskLists+0x6c>)
   1dc06:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1dc08:	4b0b      	ldr	r3, [pc, #44]	; (1dc38 <prvInitialiseTaskLists+0x84>)
   1dc0a:	4a06      	ldr	r2, [pc, #24]	; (1dc24 <prvInitialiseTaskLists+0x70>)
   1dc0c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1dc0e:	4b0b      	ldr	r3, [pc, #44]	; (1dc3c <prvInitialiseTaskLists+0x88>)
   1dc10:	4a05      	ldr	r2, [pc, #20]	; (1dc28 <prvInitialiseTaskLists+0x74>)
   1dc12:	601a      	str	r2, [r3, #0]
}
   1dc14:	46c0      	nop			; (mov r8, r8)
   1dc16:	46bd      	mov	sp, r7
   1dc18:	b002      	add	sp, #8
   1dc1a:	bd80      	pop	{r7, pc}
   1dc1c:	200040e4 	.word	0x200040e4
   1dc20:	0001adf9 	.word	0x0001adf9
   1dc24:	20004148 	.word	0x20004148
   1dc28:	2000415c 	.word	0x2000415c
   1dc2c:	20004178 	.word	0x20004178
   1dc30:	2000418c 	.word	0x2000418c
   1dc34:	200041a4 	.word	0x200041a4
   1dc38:	20004170 	.word	0x20004170
   1dc3c:	20004174 	.word	0x20004174

0001dc40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1dc40:	b580      	push	{r7, lr}
   1dc42:	b082      	sub	sp, #8
   1dc44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1dc46:	e01a      	b.n	1dc7e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1dc48:	4b11      	ldr	r3, [pc, #68]	; (1dc90 <prvCheckTasksWaitingTermination+0x50>)
   1dc4a:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1dc4c:	4b11      	ldr	r3, [pc, #68]	; (1dc94 <prvCheckTasksWaitingTermination+0x54>)
   1dc4e:	68db      	ldr	r3, [r3, #12]
   1dc50:	68db      	ldr	r3, [r3, #12]
   1dc52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1dc54:	687b      	ldr	r3, [r7, #4]
   1dc56:	3304      	adds	r3, #4
   1dc58:	0018      	movs	r0, r3
   1dc5a:	4b0f      	ldr	r3, [pc, #60]	; (1dc98 <prvCheckTasksWaitingTermination+0x58>)
   1dc5c:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1dc5e:	4b0f      	ldr	r3, [pc, #60]	; (1dc9c <prvCheckTasksWaitingTermination+0x5c>)
   1dc60:	681b      	ldr	r3, [r3, #0]
   1dc62:	1e5a      	subs	r2, r3, #1
   1dc64:	4b0d      	ldr	r3, [pc, #52]	; (1dc9c <prvCheckTasksWaitingTermination+0x5c>)
   1dc66:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1dc68:	4b0d      	ldr	r3, [pc, #52]	; (1dca0 <prvCheckTasksWaitingTermination+0x60>)
   1dc6a:	681b      	ldr	r3, [r3, #0]
   1dc6c:	1e5a      	subs	r2, r3, #1
   1dc6e:	4b0c      	ldr	r3, [pc, #48]	; (1dca0 <prvCheckTasksWaitingTermination+0x60>)
   1dc70:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1dc72:	4b0c      	ldr	r3, [pc, #48]	; (1dca4 <prvCheckTasksWaitingTermination+0x64>)
   1dc74:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1dc76:	687b      	ldr	r3, [r7, #4]
   1dc78:	0018      	movs	r0, r3
   1dc7a:	4b0b      	ldr	r3, [pc, #44]	; (1dca8 <prvCheckTasksWaitingTermination+0x68>)
   1dc7c:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1dc7e:	4b08      	ldr	r3, [pc, #32]	; (1dca0 <prvCheckTasksWaitingTermination+0x60>)
   1dc80:	681b      	ldr	r3, [r3, #0]
   1dc82:	2b00      	cmp	r3, #0
   1dc84:	d1e0      	bne.n	1dc48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1dc86:	46c0      	nop			; (mov r8, r8)
   1dc88:	46bd      	mov	sp, r7
   1dc8a:	b002      	add	sp, #8
   1dc8c:	bd80      	pop	{r7, pc}
   1dc8e:	46c0      	nop			; (mov r8, r8)
   1dc90:	0001b089 	.word	0x0001b089
   1dc94:	2000418c 	.word	0x2000418c
   1dc98:	0001aefb 	.word	0x0001aefb
   1dc9c:	200041b8 	.word	0x200041b8
   1dca0:	200041a0 	.word	0x200041a0
   1dca4:	0001b0ad 	.word	0x0001b0ad
   1dca8:	0001dd1d 	.word	0x0001dd1d

0001dcac <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1dcac:	b580      	push	{r7, lr}
   1dcae:	b084      	sub	sp, #16
   1dcb0:	af00      	add	r7, sp, #0
   1dcb2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1dcb4:	2300      	movs	r3, #0
   1dcb6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1dcb8:	e005      	b.n	1dcc6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1dcba:	687b      	ldr	r3, [r7, #4]
   1dcbc:	3301      	adds	r3, #1
   1dcbe:	607b      	str	r3, [r7, #4]
			ulCount++;
   1dcc0:	68fb      	ldr	r3, [r7, #12]
   1dcc2:	3301      	adds	r3, #1
   1dcc4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1dcc6:	687b      	ldr	r3, [r7, #4]
   1dcc8:	781b      	ldrb	r3, [r3, #0]
   1dcca:	2ba5      	cmp	r3, #165	; 0xa5
   1dccc:	d0f5      	beq.n	1dcba <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1dcce:	68fb      	ldr	r3, [r7, #12]
   1dcd0:	089b      	lsrs	r3, r3, #2
   1dcd2:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1dcd4:	68fb      	ldr	r3, [r7, #12]
   1dcd6:	b29b      	uxth	r3, r3
	}
   1dcd8:	0018      	movs	r0, r3
   1dcda:	46bd      	mov	sp, r7
   1dcdc:	b004      	add	sp, #16
   1dcde:	bd80      	pop	{r7, pc}

0001dce0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1dce0:	b580      	push	{r7, lr}
   1dce2:	b086      	sub	sp, #24
   1dce4:	af00      	add	r7, sp, #0
   1dce6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1dce8:	687b      	ldr	r3, [r7, #4]
   1dcea:	2b00      	cmp	r3, #0
   1dcec:	d102      	bne.n	1dcf4 <uxTaskGetStackHighWaterMark+0x14>
   1dcee:	4b09      	ldr	r3, [pc, #36]	; (1dd14 <uxTaskGetStackHighWaterMark+0x34>)
   1dcf0:	681b      	ldr	r3, [r3, #0]
   1dcf2:	e000      	b.n	1dcf6 <uxTaskGetStackHighWaterMark+0x16>
   1dcf4:	687b      	ldr	r3, [r7, #4]
   1dcf6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1dcf8:	697b      	ldr	r3, [r7, #20]
   1dcfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1dcfc:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1dcfe:	693b      	ldr	r3, [r7, #16]
   1dd00:	0018      	movs	r0, r3
   1dd02:	4b05      	ldr	r3, [pc, #20]	; (1dd18 <uxTaskGetStackHighWaterMark+0x38>)
   1dd04:	4798      	blx	r3
   1dd06:	0003      	movs	r3, r0
   1dd08:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1dd0a:	68fb      	ldr	r3, [r7, #12]
	}
   1dd0c:	0018      	movs	r0, r3
   1dd0e:	46bd      	mov	sp, r7
   1dd10:	b006      	add	sp, #24
   1dd12:	bd80      	pop	{r7, pc}
   1dd14:	200040e0 	.word	0x200040e0
   1dd18:	0001dcad 	.word	0x0001dcad

0001dd1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1dd1c:	b580      	push	{r7, lr}
   1dd1e:	b082      	sub	sp, #8
   1dd20:	af00      	add	r7, sp, #0
   1dd22:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1dd24:	687b      	ldr	r3, [r7, #4]
   1dd26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1dd28:	0018      	movs	r0, r3
   1dd2a:	4b05      	ldr	r3, [pc, #20]	; (1dd40 <prvDeleteTCB+0x24>)
   1dd2c:	4798      	blx	r3
			vPortFree( pxTCB );
   1dd2e:	687b      	ldr	r3, [r7, #4]
   1dd30:	0018      	movs	r0, r3
   1dd32:	4b03      	ldr	r3, [pc, #12]	; (1dd40 <prvDeleteTCB+0x24>)
   1dd34:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1dd36:	46c0      	nop			; (mov r8, r8)
   1dd38:	46bd      	mov	sp, r7
   1dd3a:	b002      	add	sp, #8
   1dd3c:	bd80      	pop	{r7, pc}
   1dd3e:	46c0      	nop			; (mov r8, r8)
   1dd40:	0001b285 	.word	0x0001b285

0001dd44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1dd44:	b580      	push	{r7, lr}
   1dd46:	b082      	sub	sp, #8
   1dd48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1dd4a:	4b0e      	ldr	r3, [pc, #56]	; (1dd84 <prvResetNextTaskUnblockTime+0x40>)
   1dd4c:	681b      	ldr	r3, [r3, #0]
   1dd4e:	681b      	ldr	r3, [r3, #0]
   1dd50:	2b00      	cmp	r3, #0
   1dd52:	d101      	bne.n	1dd58 <prvResetNextTaskUnblockTime+0x14>
   1dd54:	2301      	movs	r3, #1
   1dd56:	e000      	b.n	1dd5a <prvResetNextTaskUnblockTime+0x16>
   1dd58:	2300      	movs	r3, #0
   1dd5a:	2b00      	cmp	r3, #0
   1dd5c:	d004      	beq.n	1dd68 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1dd5e:	4b0a      	ldr	r3, [pc, #40]	; (1dd88 <prvResetNextTaskUnblockTime+0x44>)
   1dd60:	2201      	movs	r2, #1
   1dd62:	4252      	negs	r2, r2
   1dd64:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1dd66:	e008      	b.n	1dd7a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1dd68:	4b06      	ldr	r3, [pc, #24]	; (1dd84 <prvResetNextTaskUnblockTime+0x40>)
   1dd6a:	681b      	ldr	r3, [r3, #0]
   1dd6c:	68db      	ldr	r3, [r3, #12]
   1dd6e:	68db      	ldr	r3, [r3, #12]
   1dd70:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1dd72:	687b      	ldr	r3, [r7, #4]
   1dd74:	685a      	ldr	r2, [r3, #4]
   1dd76:	4b04      	ldr	r3, [pc, #16]	; (1dd88 <prvResetNextTaskUnblockTime+0x44>)
   1dd78:	601a      	str	r2, [r3, #0]
}
   1dd7a:	46c0      	nop			; (mov r8, r8)
   1dd7c:	46bd      	mov	sp, r7
   1dd7e:	b002      	add	sp, #8
   1dd80:	bd80      	pop	{r7, pc}
   1dd82:	46c0      	nop			; (mov r8, r8)
   1dd84:	20004170 	.word	0x20004170
   1dd88:	200041d8 	.word	0x200041d8

0001dd8c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1dd8c:	b580      	push	{r7, lr}
   1dd8e:	b082      	sub	sp, #8
   1dd90:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1dd92:	4b04      	ldr	r3, [pc, #16]	; (1dda4 <xTaskGetCurrentTaskHandle+0x18>)
   1dd94:	681b      	ldr	r3, [r3, #0]
   1dd96:	607b      	str	r3, [r7, #4]

		return xReturn;
   1dd98:	687b      	ldr	r3, [r7, #4]
	}
   1dd9a:	0018      	movs	r0, r3
   1dd9c:	46bd      	mov	sp, r7
   1dd9e:	b002      	add	sp, #8
   1dda0:	bd80      	pop	{r7, pc}
   1dda2:	46c0      	nop			; (mov r8, r8)
   1dda4:	200040e0 	.word	0x200040e0

0001dda8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1dda8:	b580      	push	{r7, lr}
   1ddaa:	b082      	sub	sp, #8
   1ddac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1ddae:	4b0a      	ldr	r3, [pc, #40]	; (1ddd8 <xTaskGetSchedulerState+0x30>)
   1ddb0:	681b      	ldr	r3, [r3, #0]
   1ddb2:	2b00      	cmp	r3, #0
   1ddb4:	d102      	bne.n	1ddbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1ddb6:	2301      	movs	r3, #1
   1ddb8:	607b      	str	r3, [r7, #4]
   1ddba:	e008      	b.n	1ddce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1ddbc:	4b07      	ldr	r3, [pc, #28]	; (1dddc <xTaskGetSchedulerState+0x34>)
   1ddbe:	681b      	ldr	r3, [r3, #0]
   1ddc0:	2b00      	cmp	r3, #0
   1ddc2:	d102      	bne.n	1ddca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1ddc4:	2302      	movs	r3, #2
   1ddc6:	607b      	str	r3, [r7, #4]
   1ddc8:	e001      	b.n	1ddce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1ddca:	2300      	movs	r3, #0
   1ddcc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1ddce:	687b      	ldr	r3, [r7, #4]
	}
   1ddd0:	0018      	movs	r0, r3
   1ddd2:	46bd      	mov	sp, r7
   1ddd4:	b002      	add	sp, #8
   1ddd6:	bd80      	pop	{r7, pc}
   1ddd8:	200041c4 	.word	0x200041c4
   1dddc:	200041e0 	.word	0x200041e0

0001dde0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1dde0:	b590      	push	{r4, r7, lr}
   1dde2:	b085      	sub	sp, #20
   1dde4:	af00      	add	r7, sp, #0
   1dde6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1dde8:	687b      	ldr	r3, [r7, #4]
   1ddea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1ddec:	2300      	movs	r3, #0
   1ddee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1ddf0:	687b      	ldr	r3, [r7, #4]
   1ddf2:	2b00      	cmp	r3, #0
   1ddf4:	d100      	bne.n	1ddf8 <xTaskPriorityInherit+0x18>
   1ddf6:	e09d      	b.n	1df34 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1ddf8:	68bb      	ldr	r3, [r7, #8]
   1ddfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ddfc:	4b50      	ldr	r3, [pc, #320]	; (1df40 <xTaskPriorityInherit+0x160>)
   1ddfe:	681b      	ldr	r3, [r3, #0]
   1de00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1de02:	429a      	cmp	r2, r3
   1de04:	d300      	bcc.n	1de08 <xTaskPriorityInherit+0x28>
   1de06:	e08c      	b.n	1df22 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1de08:	68bb      	ldr	r3, [r7, #8]
   1de0a:	699b      	ldr	r3, [r3, #24]
   1de0c:	2b00      	cmp	r3, #0
   1de0e:	db06      	blt.n	1de1e <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1de10:	4b4b      	ldr	r3, [pc, #300]	; (1df40 <xTaskPriorityInherit+0x160>)
   1de12:	681b      	ldr	r3, [r3, #0]
   1de14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1de16:	2205      	movs	r2, #5
   1de18:	1ad2      	subs	r2, r2, r3
   1de1a:	68bb      	ldr	r3, [r7, #8]
   1de1c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1de1e:	68bb      	ldr	r3, [r7, #8]
   1de20:	6959      	ldr	r1, [r3, #20]
   1de22:	68bb      	ldr	r3, [r7, #8]
   1de24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1de26:	0013      	movs	r3, r2
   1de28:	009b      	lsls	r3, r3, #2
   1de2a:	189b      	adds	r3, r3, r2
   1de2c:	009b      	lsls	r3, r3, #2
   1de2e:	4a45      	ldr	r2, [pc, #276]	; (1df44 <xTaskPriorityInherit+0x164>)
   1de30:	189b      	adds	r3, r3, r2
   1de32:	4299      	cmp	r1, r3
   1de34:	d101      	bne.n	1de3a <xTaskPriorityInherit+0x5a>
   1de36:	2301      	movs	r3, #1
   1de38:	e000      	b.n	1de3c <xTaskPriorityInherit+0x5c>
   1de3a:	2300      	movs	r3, #0
   1de3c:	2b00      	cmp	r3, #0
   1de3e:	d037      	beq.n	1deb0 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1de40:	68bb      	ldr	r3, [r7, #8]
   1de42:	3304      	adds	r3, #4
   1de44:	0018      	movs	r0, r3
   1de46:	4b40      	ldr	r3, [pc, #256]	; (1df48 <xTaskPriorityInherit+0x168>)
   1de48:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1de4a:	4b3d      	ldr	r3, [pc, #244]	; (1df40 <xTaskPriorityInherit+0x160>)
   1de4c:	681b      	ldr	r3, [r3, #0]
   1de4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1de50:	68bb      	ldr	r3, [r7, #8]
   1de52:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1de54:	68bb      	ldr	r3, [r7, #8]
   1de56:	0018      	movs	r0, r3
   1de58:	4b3c      	ldr	r3, [pc, #240]	; (1df4c <xTaskPriorityInherit+0x16c>)
   1de5a:	4798      	blx	r3
   1de5c:	0003      	movs	r3, r0
   1de5e:	001a      	movs	r2, r3
   1de60:	4b3b      	ldr	r3, [pc, #236]	; (1df50 <xTaskPriorityInherit+0x170>)
   1de62:	881b      	ldrh	r3, [r3, #0]
   1de64:	4013      	ands	r3, r2
   1de66:	b29b      	uxth	r3, r3
   1de68:	2b00      	cmp	r3, #0
   1de6a:	d008      	beq.n	1de7e <xTaskPriorityInherit+0x9e>
   1de6c:	68bb      	ldr	r3, [r7, #8]
   1de6e:	0018      	movs	r0, r3
   1de70:	4b38      	ldr	r3, [pc, #224]	; (1df54 <xTaskPriorityInherit+0x174>)
   1de72:	4798      	blx	r3
   1de74:	0003      	movs	r3, r0
   1de76:	b2db      	uxtb	r3, r3
   1de78:	0018      	movs	r0, r3
   1de7a:	4b37      	ldr	r3, [pc, #220]	; (1df58 <xTaskPriorityInherit+0x178>)
   1de7c:	4798      	blx	r3
   1de7e:	68bb      	ldr	r3, [r7, #8]
   1de80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1de82:	4b36      	ldr	r3, [pc, #216]	; (1df5c <xTaskPriorityInherit+0x17c>)
   1de84:	681b      	ldr	r3, [r3, #0]
   1de86:	429a      	cmp	r2, r3
   1de88:	d903      	bls.n	1de92 <xTaskPriorityInherit+0xb2>
   1de8a:	68bb      	ldr	r3, [r7, #8]
   1de8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1de8e:	4b33      	ldr	r3, [pc, #204]	; (1df5c <xTaskPriorityInherit+0x17c>)
   1de90:	601a      	str	r2, [r3, #0]
   1de92:	68bb      	ldr	r3, [r7, #8]
   1de94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1de96:	0013      	movs	r3, r2
   1de98:	009b      	lsls	r3, r3, #2
   1de9a:	189b      	adds	r3, r3, r2
   1de9c:	009b      	lsls	r3, r3, #2
   1de9e:	4a29      	ldr	r2, [pc, #164]	; (1df44 <xTaskPriorityInherit+0x164>)
   1dea0:	189a      	adds	r2, r3, r2
   1dea2:	68bb      	ldr	r3, [r7, #8]
   1dea4:	3304      	adds	r3, #4
   1dea6:	0019      	movs	r1, r3
   1dea8:	0010      	movs	r0, r2
   1deaa:	4b2d      	ldr	r3, [pc, #180]	; (1df60 <xTaskPriorityInherit+0x180>)
   1deac:	4798      	blx	r3
   1deae:	e004      	b.n	1deba <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1deb0:	4b23      	ldr	r3, [pc, #140]	; (1df40 <xTaskPriorityInherit+0x160>)
   1deb2:	681b      	ldr	r3, [r3, #0]
   1deb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1deb6:	68bb      	ldr	r3, [r7, #8]
   1deb8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1deba:	68bb      	ldr	r3, [r7, #8]
   1debc:	0018      	movs	r0, r3
   1debe:	4b23      	ldr	r3, [pc, #140]	; (1df4c <xTaskPriorityInherit+0x16c>)
   1dec0:	4798      	blx	r3
   1dec2:	0003      	movs	r3, r0
   1dec4:	001a      	movs	r2, r3
   1dec6:	4b22      	ldr	r3, [pc, #136]	; (1df50 <xTaskPriorityInherit+0x170>)
   1dec8:	881b      	ldrh	r3, [r3, #0]
   1deca:	4013      	ands	r3, r2
   1decc:	b29b      	uxth	r3, r3
   1dece:	2b00      	cmp	r3, #0
   1ded0:	d024      	beq.n	1df1c <xTaskPriorityInherit+0x13c>
   1ded2:	68bb      	ldr	r3, [r7, #8]
   1ded4:	0018      	movs	r0, r3
   1ded6:	4b1f      	ldr	r3, [pc, #124]	; (1df54 <xTaskPriorityInherit+0x174>)
   1ded8:	4798      	blx	r3
   1deda:	0003      	movs	r3, r0
   1dedc:	b2db      	uxtb	r3, r3
   1dede:	001c      	movs	r4, r3
   1dee0:	68bb      	ldr	r3, [r7, #8]
   1dee2:	0018      	movs	r0, r3
   1dee4:	4b1b      	ldr	r3, [pc, #108]	; (1df54 <xTaskPriorityInherit+0x174>)
   1dee6:	4798      	blx	r3
   1dee8:	0003      	movs	r3, r0
   1deea:	b2db      	uxtb	r3, r3
   1deec:	0019      	movs	r1, r3
   1deee:	2003      	movs	r0, #3
   1def0:	4b1c      	ldr	r3, [pc, #112]	; (1df64 <xTaskPriorityInherit+0x184>)
   1def2:	4798      	blx	r3
   1def4:	0003      	movs	r3, r0
   1def6:	0022      	movs	r2, r4
   1def8:	2103      	movs	r1, #3
   1defa:	208e      	movs	r0, #142	; 0x8e
   1defc:	4c1a      	ldr	r4, [pc, #104]	; (1df68 <xTaskPriorityInherit+0x188>)
   1defe:	47a0      	blx	r4
   1df00:	68bb      	ldr	r3, [r7, #8]
   1df02:	0018      	movs	r0, r3
   1df04:	4b13      	ldr	r3, [pc, #76]	; (1df54 <xTaskPriorityInherit+0x174>)
   1df06:	4798      	blx	r3
   1df08:	0003      	movs	r3, r0
   1df0a:	b2d9      	uxtb	r1, r3
   1df0c:	4b0c      	ldr	r3, [pc, #48]	; (1df40 <xTaskPriorityInherit+0x160>)
   1df0e:	681b      	ldr	r3, [r3, #0]
   1df10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1df12:	b2db      	uxtb	r3, r3
   1df14:	001a      	movs	r2, r3
   1df16:	2003      	movs	r0, #3
   1df18:	4b14      	ldr	r3, [pc, #80]	; (1df6c <xTaskPriorityInherit+0x18c>)
   1df1a:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1df1c:	2301      	movs	r3, #1
   1df1e:	60fb      	str	r3, [r7, #12]
   1df20:	e008      	b.n	1df34 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1df22:	68bb      	ldr	r3, [r7, #8]
   1df24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1df26:	4b06      	ldr	r3, [pc, #24]	; (1df40 <xTaskPriorityInherit+0x160>)
   1df28:	681b      	ldr	r3, [r3, #0]
   1df2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1df2c:	429a      	cmp	r2, r3
   1df2e:	d201      	bcs.n	1df34 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1df30:	2301      	movs	r3, #1
   1df32:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1df34:	68fb      	ldr	r3, [r7, #12]
	}
   1df36:	0018      	movs	r0, r3
   1df38:	46bd      	mov	sp, r7
   1df3a:	b005      	add	sp, #20
   1df3c:	bd90      	pop	{r4, r7, pc}
   1df3e:	46c0      	nop			; (mov r8, r8)
   1df40:	200040e0 	.word	0x200040e0
   1df44:	200040e4 	.word	0x200040e4
   1df48:	0001aefb 	.word	0x0001aefb
   1df4c:	00019081 	.word	0x00019081
   1df50:	20000110 	.word	0x20000110
   1df54:	00019061 	.word	0x00019061
   1df58:	00019831 	.word	0x00019831
   1df5c:	200041c0 	.word	0x200041c0
   1df60:	0001ae4b 	.word	0x0001ae4b
   1df64:	0001a039 	.word	0x0001a039
   1df68:	00019ba9 	.word	0x00019ba9
   1df6c:	00019f95 	.word	0x00019f95

0001df70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1df70:	b590      	push	{r4, r7, lr}
   1df72:	b085      	sub	sp, #20
   1df74:	af00      	add	r7, sp, #0
   1df76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1df78:	687b      	ldr	r3, [r7, #4]
   1df7a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1df7c:	2300      	movs	r3, #0
   1df7e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1df80:	687b      	ldr	r3, [r7, #4]
   1df82:	2b00      	cmp	r3, #0
   1df84:	d100      	bne.n	1df88 <xTaskPriorityDisinherit+0x18>
   1df86:	e089      	b.n	1e09c <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1df88:	4b47      	ldr	r3, [pc, #284]	; (1e0a8 <xTaskPriorityDisinherit+0x138>)
   1df8a:	681b      	ldr	r3, [r3, #0]
   1df8c:	68ba      	ldr	r2, [r7, #8]
   1df8e:	429a      	cmp	r2, r3
   1df90:	d001      	beq.n	1df96 <xTaskPriorityDisinherit+0x26>
   1df92:	b672      	cpsid	i
   1df94:	e7fe      	b.n	1df94 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1df96:	68bb      	ldr	r3, [r7, #8]
   1df98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1df9a:	2b00      	cmp	r3, #0
   1df9c:	d101      	bne.n	1dfa2 <xTaskPriorityDisinherit+0x32>
   1df9e:	b672      	cpsid	i
   1dfa0:	e7fe      	b.n	1dfa0 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1dfa2:	68bb      	ldr	r3, [r7, #8]
   1dfa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1dfa6:	1e5a      	subs	r2, r3, #1
   1dfa8:	68bb      	ldr	r3, [r7, #8]
   1dfaa:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1dfac:	68bb      	ldr	r3, [r7, #8]
   1dfae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dfb0:	68bb      	ldr	r3, [r7, #8]
   1dfb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1dfb4:	429a      	cmp	r2, r3
   1dfb6:	d071      	beq.n	1e09c <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1dfb8:	68bb      	ldr	r3, [r7, #8]
   1dfba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1dfbc:	2b00      	cmp	r3, #0
   1dfbe:	d16d      	bne.n	1e09c <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1dfc0:	68bb      	ldr	r3, [r7, #8]
   1dfc2:	3304      	adds	r3, #4
   1dfc4:	0018      	movs	r0, r3
   1dfc6:	4b39      	ldr	r3, [pc, #228]	; (1e0ac <xTaskPriorityDisinherit+0x13c>)
   1dfc8:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1dfca:	68bb      	ldr	r3, [r7, #8]
   1dfcc:	0018      	movs	r0, r3
   1dfce:	4b38      	ldr	r3, [pc, #224]	; (1e0b0 <xTaskPriorityDisinherit+0x140>)
   1dfd0:	4798      	blx	r3
   1dfd2:	0003      	movs	r3, r0
   1dfd4:	001a      	movs	r2, r3
   1dfd6:	4b37      	ldr	r3, [pc, #220]	; (1e0b4 <xTaskPriorityDisinherit+0x144>)
   1dfd8:	881b      	ldrh	r3, [r3, #0]
   1dfda:	4013      	ands	r3, r2
   1dfdc:	b29b      	uxth	r3, r3
   1dfde:	2b00      	cmp	r3, #0
   1dfe0:	d023      	beq.n	1e02a <xTaskPriorityDisinherit+0xba>
   1dfe2:	68bb      	ldr	r3, [r7, #8]
   1dfe4:	0018      	movs	r0, r3
   1dfe6:	4b34      	ldr	r3, [pc, #208]	; (1e0b8 <xTaskPriorityDisinherit+0x148>)
   1dfe8:	4798      	blx	r3
   1dfea:	0003      	movs	r3, r0
   1dfec:	b2db      	uxtb	r3, r3
   1dfee:	001c      	movs	r4, r3
   1dff0:	68bb      	ldr	r3, [r7, #8]
   1dff2:	0018      	movs	r0, r3
   1dff4:	4b30      	ldr	r3, [pc, #192]	; (1e0b8 <xTaskPriorityDisinherit+0x148>)
   1dff6:	4798      	blx	r3
   1dff8:	0003      	movs	r3, r0
   1dffa:	b2db      	uxtb	r3, r3
   1dffc:	0019      	movs	r1, r3
   1dffe:	2003      	movs	r0, #3
   1e000:	4b2e      	ldr	r3, [pc, #184]	; (1e0bc <xTaskPriorityDisinherit+0x14c>)
   1e002:	4798      	blx	r3
   1e004:	0003      	movs	r3, r0
   1e006:	0022      	movs	r2, r4
   1e008:	2103      	movs	r1, #3
   1e00a:	208f      	movs	r0, #143	; 0x8f
   1e00c:	4c2c      	ldr	r4, [pc, #176]	; (1e0c0 <xTaskPriorityDisinherit+0x150>)
   1e00e:	47a0      	blx	r4
   1e010:	68bb      	ldr	r3, [r7, #8]
   1e012:	0018      	movs	r0, r3
   1e014:	4b28      	ldr	r3, [pc, #160]	; (1e0b8 <xTaskPriorityDisinherit+0x148>)
   1e016:	4798      	blx	r3
   1e018:	0003      	movs	r3, r0
   1e01a:	b2d9      	uxtb	r1, r3
   1e01c:	68bb      	ldr	r3, [r7, #8]
   1e01e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e020:	b2db      	uxtb	r3, r3
   1e022:	001a      	movs	r2, r3
   1e024:	2003      	movs	r0, #3
   1e026:	4b27      	ldr	r3, [pc, #156]	; (1e0c4 <xTaskPriorityDisinherit+0x154>)
   1e028:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1e02a:	68bb      	ldr	r3, [r7, #8]
   1e02c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1e02e:	68bb      	ldr	r3, [r7, #8]
   1e030:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e032:	68bb      	ldr	r3, [r7, #8]
   1e034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e036:	2205      	movs	r2, #5
   1e038:	1ad2      	subs	r2, r2, r3
   1e03a:	68bb      	ldr	r3, [r7, #8]
   1e03c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1e03e:	68bb      	ldr	r3, [r7, #8]
   1e040:	0018      	movs	r0, r3
   1e042:	4b1b      	ldr	r3, [pc, #108]	; (1e0b0 <xTaskPriorityDisinherit+0x140>)
   1e044:	4798      	blx	r3
   1e046:	0003      	movs	r3, r0
   1e048:	001a      	movs	r2, r3
   1e04a:	4b1a      	ldr	r3, [pc, #104]	; (1e0b4 <xTaskPriorityDisinherit+0x144>)
   1e04c:	881b      	ldrh	r3, [r3, #0]
   1e04e:	4013      	ands	r3, r2
   1e050:	b29b      	uxth	r3, r3
   1e052:	2b00      	cmp	r3, #0
   1e054:	d008      	beq.n	1e068 <xTaskPriorityDisinherit+0xf8>
   1e056:	68bb      	ldr	r3, [r7, #8]
   1e058:	0018      	movs	r0, r3
   1e05a:	4b17      	ldr	r3, [pc, #92]	; (1e0b8 <xTaskPriorityDisinherit+0x148>)
   1e05c:	4798      	blx	r3
   1e05e:	0003      	movs	r3, r0
   1e060:	b2db      	uxtb	r3, r3
   1e062:	0018      	movs	r0, r3
   1e064:	4b18      	ldr	r3, [pc, #96]	; (1e0c8 <xTaskPriorityDisinherit+0x158>)
   1e066:	4798      	blx	r3
   1e068:	68bb      	ldr	r3, [r7, #8]
   1e06a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e06c:	4b17      	ldr	r3, [pc, #92]	; (1e0cc <xTaskPriorityDisinherit+0x15c>)
   1e06e:	681b      	ldr	r3, [r3, #0]
   1e070:	429a      	cmp	r2, r3
   1e072:	d903      	bls.n	1e07c <xTaskPriorityDisinherit+0x10c>
   1e074:	68bb      	ldr	r3, [r7, #8]
   1e076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e078:	4b14      	ldr	r3, [pc, #80]	; (1e0cc <xTaskPriorityDisinherit+0x15c>)
   1e07a:	601a      	str	r2, [r3, #0]
   1e07c:	68bb      	ldr	r3, [r7, #8]
   1e07e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e080:	0013      	movs	r3, r2
   1e082:	009b      	lsls	r3, r3, #2
   1e084:	189b      	adds	r3, r3, r2
   1e086:	009b      	lsls	r3, r3, #2
   1e088:	4a11      	ldr	r2, [pc, #68]	; (1e0d0 <xTaskPriorityDisinherit+0x160>)
   1e08a:	189a      	adds	r2, r3, r2
   1e08c:	68bb      	ldr	r3, [r7, #8]
   1e08e:	3304      	adds	r3, #4
   1e090:	0019      	movs	r1, r3
   1e092:	0010      	movs	r0, r2
   1e094:	4b0f      	ldr	r3, [pc, #60]	; (1e0d4 <xTaskPriorityDisinherit+0x164>)
   1e096:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1e098:	2301      	movs	r3, #1
   1e09a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1e09c:	68fb      	ldr	r3, [r7, #12]
	}
   1e09e:	0018      	movs	r0, r3
   1e0a0:	46bd      	mov	sp, r7
   1e0a2:	b005      	add	sp, #20
   1e0a4:	bd90      	pop	{r4, r7, pc}
   1e0a6:	46c0      	nop			; (mov r8, r8)
   1e0a8:	200040e0 	.word	0x200040e0
   1e0ac:	0001aefb 	.word	0x0001aefb
   1e0b0:	00019081 	.word	0x00019081
   1e0b4:	20000110 	.word	0x20000110
   1e0b8:	00019061 	.word	0x00019061
   1e0bc:	0001a039 	.word	0x0001a039
   1e0c0:	00019ba9 	.word	0x00019ba9
   1e0c4:	00019f95 	.word	0x00019f95
   1e0c8:	00019831 	.word	0x00019831
   1e0cc:	200041c0 	.word	0x200041c0
   1e0d0:	200040e4 	.word	0x200040e4
   1e0d4:	0001ae4b 	.word	0x0001ae4b

0001e0d8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1e0d8:	b590      	push	{r4, r7, lr}
   1e0da:	b087      	sub	sp, #28
   1e0dc:	af00      	add	r7, sp, #0
   1e0de:	6078      	str	r0, [r7, #4]
   1e0e0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1e0e2:	687b      	ldr	r3, [r7, #4]
   1e0e4:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1e0e6:	2301      	movs	r3, #1
   1e0e8:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1e0ea:	687b      	ldr	r3, [r7, #4]
   1e0ec:	2b00      	cmp	r3, #0
   1e0ee:	d100      	bne.n	1e0f2 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1e0f0:	e0a4      	b.n	1e23c <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1e0f2:	693b      	ldr	r3, [r7, #16]
   1e0f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1e0f6:	2b00      	cmp	r3, #0
   1e0f8:	d101      	bne.n	1e0fe <vTaskPriorityDisinheritAfterTimeout+0x26>
   1e0fa:	b672      	cpsid	i
   1e0fc:	e7fe      	b.n	1e0fc <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1e0fe:	693b      	ldr	r3, [r7, #16]
   1e100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1e102:	683b      	ldr	r3, [r7, #0]
   1e104:	429a      	cmp	r2, r3
   1e106:	d202      	bcs.n	1e10e <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1e108:	683b      	ldr	r3, [r7, #0]
   1e10a:	617b      	str	r3, [r7, #20]
   1e10c:	e002      	b.n	1e114 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1e10e:	693b      	ldr	r3, [r7, #16]
   1e110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e112:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1e114:	693b      	ldr	r3, [r7, #16]
   1e116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e118:	697b      	ldr	r3, [r7, #20]
   1e11a:	429a      	cmp	r2, r3
   1e11c:	d100      	bne.n	1e120 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1e11e:	e08d      	b.n	1e23c <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1e120:	693b      	ldr	r3, [r7, #16]
   1e122:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1e124:	68fb      	ldr	r3, [r7, #12]
   1e126:	429a      	cmp	r2, r3
   1e128:	d000      	beq.n	1e12c <vTaskPriorityDisinheritAfterTimeout+0x54>
   1e12a:	e087      	b.n	1e23c <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1e12c:	4b45      	ldr	r3, [pc, #276]	; (1e244 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1e12e:	681b      	ldr	r3, [r3, #0]
   1e130:	693a      	ldr	r2, [r7, #16]
   1e132:	429a      	cmp	r2, r3
   1e134:	d101      	bne.n	1e13a <vTaskPriorityDisinheritAfterTimeout+0x62>
   1e136:	b672      	cpsid	i
   1e138:	e7fe      	b.n	1e138 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1e13a:	693b      	ldr	r3, [r7, #16]
   1e13c:	0018      	movs	r0, r3
   1e13e:	4b42      	ldr	r3, [pc, #264]	; (1e248 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1e140:	4798      	blx	r3
   1e142:	0003      	movs	r3, r0
   1e144:	001a      	movs	r2, r3
   1e146:	4b41      	ldr	r3, [pc, #260]	; (1e24c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1e148:	881b      	ldrh	r3, [r3, #0]
   1e14a:	4013      	ands	r3, r2
   1e14c:	b29b      	uxth	r3, r3
   1e14e:	2b00      	cmp	r3, #0
   1e150:	d023      	beq.n	1e19a <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1e152:	693b      	ldr	r3, [r7, #16]
   1e154:	0018      	movs	r0, r3
   1e156:	4b3e      	ldr	r3, [pc, #248]	; (1e250 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1e158:	4798      	blx	r3
   1e15a:	0003      	movs	r3, r0
   1e15c:	b2db      	uxtb	r3, r3
   1e15e:	001c      	movs	r4, r3
   1e160:	693b      	ldr	r3, [r7, #16]
   1e162:	0018      	movs	r0, r3
   1e164:	4b3a      	ldr	r3, [pc, #232]	; (1e250 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1e166:	4798      	blx	r3
   1e168:	0003      	movs	r3, r0
   1e16a:	b2db      	uxtb	r3, r3
   1e16c:	0019      	movs	r1, r3
   1e16e:	2003      	movs	r0, #3
   1e170:	4b38      	ldr	r3, [pc, #224]	; (1e254 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1e172:	4798      	blx	r3
   1e174:	0003      	movs	r3, r0
   1e176:	0022      	movs	r2, r4
   1e178:	2103      	movs	r1, #3
   1e17a:	208f      	movs	r0, #143	; 0x8f
   1e17c:	4c36      	ldr	r4, [pc, #216]	; (1e258 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1e17e:	47a0      	blx	r4
   1e180:	693b      	ldr	r3, [r7, #16]
   1e182:	0018      	movs	r0, r3
   1e184:	4b32      	ldr	r3, [pc, #200]	; (1e250 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1e186:	4798      	blx	r3
   1e188:	0003      	movs	r3, r0
   1e18a:	b2d9      	uxtb	r1, r3
   1e18c:	693b      	ldr	r3, [r7, #16]
   1e18e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e190:	b2db      	uxtb	r3, r3
   1e192:	001a      	movs	r2, r3
   1e194:	2003      	movs	r0, #3
   1e196:	4b31      	ldr	r3, [pc, #196]	; (1e25c <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1e198:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1e19a:	693b      	ldr	r3, [r7, #16]
   1e19c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e19e:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1e1a0:	693b      	ldr	r3, [r7, #16]
   1e1a2:	697a      	ldr	r2, [r7, #20]
   1e1a4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1e1a6:	693b      	ldr	r3, [r7, #16]
   1e1a8:	699b      	ldr	r3, [r3, #24]
   1e1aa:	2b00      	cmp	r3, #0
   1e1ac:	db04      	blt.n	1e1b8 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e1ae:	697b      	ldr	r3, [r7, #20]
   1e1b0:	2205      	movs	r2, #5
   1e1b2:	1ad2      	subs	r2, r2, r3
   1e1b4:	693b      	ldr	r3, [r7, #16]
   1e1b6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1e1b8:	693b      	ldr	r3, [r7, #16]
   1e1ba:	6959      	ldr	r1, [r3, #20]
   1e1bc:	68ba      	ldr	r2, [r7, #8]
   1e1be:	0013      	movs	r3, r2
   1e1c0:	009b      	lsls	r3, r3, #2
   1e1c2:	189b      	adds	r3, r3, r2
   1e1c4:	009b      	lsls	r3, r3, #2
   1e1c6:	4a26      	ldr	r2, [pc, #152]	; (1e260 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1e1c8:	189b      	adds	r3, r3, r2
   1e1ca:	4299      	cmp	r1, r3
   1e1cc:	d101      	bne.n	1e1d2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1e1ce:	2301      	movs	r3, #1
   1e1d0:	e000      	b.n	1e1d4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1e1d2:	2300      	movs	r3, #0
   1e1d4:	2b00      	cmp	r3, #0
   1e1d6:	d031      	beq.n	1e23c <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1e1d8:	693b      	ldr	r3, [r7, #16]
   1e1da:	3304      	adds	r3, #4
   1e1dc:	0018      	movs	r0, r3
   1e1de:	4b21      	ldr	r3, [pc, #132]	; (1e264 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1e1e0:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1e1e2:	693b      	ldr	r3, [r7, #16]
   1e1e4:	0018      	movs	r0, r3
   1e1e6:	4b18      	ldr	r3, [pc, #96]	; (1e248 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1e1e8:	4798      	blx	r3
   1e1ea:	0003      	movs	r3, r0
   1e1ec:	001a      	movs	r2, r3
   1e1ee:	4b17      	ldr	r3, [pc, #92]	; (1e24c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1e1f0:	881b      	ldrh	r3, [r3, #0]
   1e1f2:	4013      	ands	r3, r2
   1e1f4:	b29b      	uxth	r3, r3
   1e1f6:	2b00      	cmp	r3, #0
   1e1f8:	d008      	beq.n	1e20c <vTaskPriorityDisinheritAfterTimeout+0x134>
   1e1fa:	693b      	ldr	r3, [r7, #16]
   1e1fc:	0018      	movs	r0, r3
   1e1fe:	4b14      	ldr	r3, [pc, #80]	; (1e250 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1e200:	4798      	blx	r3
   1e202:	0003      	movs	r3, r0
   1e204:	b2db      	uxtb	r3, r3
   1e206:	0018      	movs	r0, r3
   1e208:	4b17      	ldr	r3, [pc, #92]	; (1e268 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1e20a:	4798      	blx	r3
   1e20c:	693b      	ldr	r3, [r7, #16]
   1e20e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e210:	4b16      	ldr	r3, [pc, #88]	; (1e26c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1e212:	681b      	ldr	r3, [r3, #0]
   1e214:	429a      	cmp	r2, r3
   1e216:	d903      	bls.n	1e220 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1e218:	693b      	ldr	r3, [r7, #16]
   1e21a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e21c:	4b13      	ldr	r3, [pc, #76]	; (1e26c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1e21e:	601a      	str	r2, [r3, #0]
   1e220:	693b      	ldr	r3, [r7, #16]
   1e222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e224:	0013      	movs	r3, r2
   1e226:	009b      	lsls	r3, r3, #2
   1e228:	189b      	adds	r3, r3, r2
   1e22a:	009b      	lsls	r3, r3, #2
   1e22c:	4a0c      	ldr	r2, [pc, #48]	; (1e260 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1e22e:	189a      	adds	r2, r3, r2
   1e230:	693b      	ldr	r3, [r7, #16]
   1e232:	3304      	adds	r3, #4
   1e234:	0019      	movs	r1, r3
   1e236:	0010      	movs	r0, r2
   1e238:	4b0d      	ldr	r3, [pc, #52]	; (1e270 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1e23a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1e23c:	46c0      	nop			; (mov r8, r8)
   1e23e:	46bd      	mov	sp, r7
   1e240:	b007      	add	sp, #28
   1e242:	bd90      	pop	{r4, r7, pc}
   1e244:	200040e0 	.word	0x200040e0
   1e248:	00019081 	.word	0x00019081
   1e24c:	20000110 	.word	0x20000110
   1e250:	00019061 	.word	0x00019061
   1e254:	0001a039 	.word	0x0001a039
   1e258:	00019ba9 	.word	0x00019ba9
   1e25c:	00019f95 	.word	0x00019f95
   1e260:	200040e4 	.word	0x200040e4
   1e264:	0001aefb 	.word	0x0001aefb
   1e268:	00019831 	.word	0x00019831
   1e26c:	200041c0 	.word	0x200041c0
   1e270:	0001ae4b 	.word	0x0001ae4b

0001e274 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1e274:	b580      	push	{r7, lr}
   1e276:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1e278:	4b06      	ldr	r3, [pc, #24]	; (1e294 <pvTaskIncrementMutexHeldCount+0x20>)
   1e27a:	681b      	ldr	r3, [r3, #0]
   1e27c:	2b00      	cmp	r3, #0
   1e27e:	d004      	beq.n	1e28a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1e280:	4b04      	ldr	r3, [pc, #16]	; (1e294 <pvTaskIncrementMutexHeldCount+0x20>)
   1e282:	681b      	ldr	r3, [r3, #0]
   1e284:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1e286:	3201      	adds	r2, #1
   1e288:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1e28a:	4b02      	ldr	r3, [pc, #8]	; (1e294 <pvTaskIncrementMutexHeldCount+0x20>)
   1e28c:	681b      	ldr	r3, [r3, #0]
	}
   1e28e:	0018      	movs	r0, r3
   1e290:	46bd      	mov	sp, r7
   1e292:	bd80      	pop	{r7, pc}
   1e294:	200040e0 	.word	0x200040e0

0001e298 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1e298:	b580      	push	{r7, lr}
   1e29a:	b084      	sub	sp, #16
   1e29c:	af00      	add	r7, sp, #0
   1e29e:	6078      	str	r0, [r7, #4]
   1e2a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1e2a2:	4b21      	ldr	r3, [pc, #132]	; (1e328 <prvAddCurrentTaskToDelayedList+0x90>)
   1e2a4:	681b      	ldr	r3, [r3, #0]
   1e2a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1e2a8:	4b20      	ldr	r3, [pc, #128]	; (1e32c <prvAddCurrentTaskToDelayedList+0x94>)
   1e2aa:	681b      	ldr	r3, [r3, #0]
   1e2ac:	3304      	adds	r3, #4
   1e2ae:	0018      	movs	r0, r3
   1e2b0:	4b1f      	ldr	r3, [pc, #124]	; (1e330 <prvAddCurrentTaskToDelayedList+0x98>)
   1e2b2:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1e2b4:	687b      	ldr	r3, [r7, #4]
   1e2b6:	3301      	adds	r3, #1
   1e2b8:	d10b      	bne.n	1e2d2 <prvAddCurrentTaskToDelayedList+0x3a>
   1e2ba:	683b      	ldr	r3, [r7, #0]
   1e2bc:	2b00      	cmp	r3, #0
   1e2be:	d008      	beq.n	1e2d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1e2c0:	4b1a      	ldr	r3, [pc, #104]	; (1e32c <prvAddCurrentTaskToDelayedList+0x94>)
   1e2c2:	681b      	ldr	r3, [r3, #0]
   1e2c4:	1d1a      	adds	r2, r3, #4
   1e2c6:	4b1b      	ldr	r3, [pc, #108]	; (1e334 <prvAddCurrentTaskToDelayedList+0x9c>)
   1e2c8:	0011      	movs	r1, r2
   1e2ca:	0018      	movs	r0, r3
   1e2cc:	4b1a      	ldr	r3, [pc, #104]	; (1e338 <prvAddCurrentTaskToDelayedList+0xa0>)
   1e2ce:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1e2d0:	e026      	b.n	1e320 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1e2d2:	68fa      	ldr	r2, [r7, #12]
   1e2d4:	687b      	ldr	r3, [r7, #4]
   1e2d6:	18d3      	adds	r3, r2, r3
   1e2d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1e2da:	4b14      	ldr	r3, [pc, #80]	; (1e32c <prvAddCurrentTaskToDelayedList+0x94>)
   1e2dc:	681b      	ldr	r3, [r3, #0]
   1e2de:	68ba      	ldr	r2, [r7, #8]
   1e2e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1e2e2:	68ba      	ldr	r2, [r7, #8]
   1e2e4:	68fb      	ldr	r3, [r7, #12]
   1e2e6:	429a      	cmp	r2, r3
   1e2e8:	d209      	bcs.n	1e2fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1e2ea:	4b14      	ldr	r3, [pc, #80]	; (1e33c <prvAddCurrentTaskToDelayedList+0xa4>)
   1e2ec:	681a      	ldr	r2, [r3, #0]
   1e2ee:	4b0f      	ldr	r3, [pc, #60]	; (1e32c <prvAddCurrentTaskToDelayedList+0x94>)
   1e2f0:	681b      	ldr	r3, [r3, #0]
   1e2f2:	3304      	adds	r3, #4
   1e2f4:	0019      	movs	r1, r3
   1e2f6:	0010      	movs	r0, r2
   1e2f8:	4b11      	ldr	r3, [pc, #68]	; (1e340 <prvAddCurrentTaskToDelayedList+0xa8>)
   1e2fa:	4798      	blx	r3
}
   1e2fc:	e010      	b.n	1e320 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1e2fe:	4b11      	ldr	r3, [pc, #68]	; (1e344 <prvAddCurrentTaskToDelayedList+0xac>)
   1e300:	681a      	ldr	r2, [r3, #0]
   1e302:	4b0a      	ldr	r3, [pc, #40]	; (1e32c <prvAddCurrentTaskToDelayedList+0x94>)
   1e304:	681b      	ldr	r3, [r3, #0]
   1e306:	3304      	adds	r3, #4
   1e308:	0019      	movs	r1, r3
   1e30a:	0010      	movs	r0, r2
   1e30c:	4b0c      	ldr	r3, [pc, #48]	; (1e340 <prvAddCurrentTaskToDelayedList+0xa8>)
   1e30e:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1e310:	4b0d      	ldr	r3, [pc, #52]	; (1e348 <prvAddCurrentTaskToDelayedList+0xb0>)
   1e312:	681b      	ldr	r3, [r3, #0]
   1e314:	68ba      	ldr	r2, [r7, #8]
   1e316:	429a      	cmp	r2, r3
   1e318:	d202      	bcs.n	1e320 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1e31a:	4b0b      	ldr	r3, [pc, #44]	; (1e348 <prvAddCurrentTaskToDelayedList+0xb0>)
   1e31c:	68ba      	ldr	r2, [r7, #8]
   1e31e:	601a      	str	r2, [r3, #0]
}
   1e320:	46c0      	nop			; (mov r8, r8)
   1e322:	46bd      	mov	sp, r7
   1e324:	b004      	add	sp, #16
   1e326:	bd80      	pop	{r7, pc}
   1e328:	200041bc 	.word	0x200041bc
   1e32c:	200040e0 	.word	0x200040e0
   1e330:	0001aefb 	.word	0x0001aefb
   1e334:	200041a4 	.word	0x200041a4
   1e338:	0001ae4b 	.word	0x0001ae4b
   1e33c:	20004174 	.word	0x20004174
   1e340:	0001ae8f 	.word	0x0001ae8f
   1e344:	20004170 	.word	0x20004170
   1e348:	200041d8 	.word	0x200041d8

0001e34c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1e34c:	b590      	push	{r4, r7, lr}
   1e34e:	b085      	sub	sp, #20
   1e350:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1e352:	2300      	movs	r3, #0
   1e354:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1e356:	4b0e      	ldr	r3, [pc, #56]	; (1e390 <xTimerCreateTimerTask+0x44>)
   1e358:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1e35a:	4b0e      	ldr	r3, [pc, #56]	; (1e394 <xTimerCreateTimerTask+0x48>)
   1e35c:	681b      	ldr	r3, [r3, #0]
   1e35e:	2b00      	cmp	r3, #0
   1e360:	d00b      	beq.n	1e37a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1e362:	490d      	ldr	r1, [pc, #52]	; (1e398 <xTimerCreateTimerTask+0x4c>)
   1e364:	480d      	ldr	r0, [pc, #52]	; (1e39c <xTimerCreateTimerTask+0x50>)
   1e366:	4b0e      	ldr	r3, [pc, #56]	; (1e3a0 <xTimerCreateTimerTask+0x54>)
   1e368:	9301      	str	r3, [sp, #4]
   1e36a:	2302      	movs	r3, #2
   1e36c:	9300      	str	r3, [sp, #0]
   1e36e:	2300      	movs	r3, #0
   1e370:	2280      	movs	r2, #128	; 0x80
   1e372:	4c0c      	ldr	r4, [pc, #48]	; (1e3a4 <xTimerCreateTimerTask+0x58>)
   1e374:	47a0      	blx	r4
   1e376:	0003      	movs	r3, r0
   1e378:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1e37a:	687b      	ldr	r3, [r7, #4]
   1e37c:	2b00      	cmp	r3, #0
   1e37e:	d101      	bne.n	1e384 <xTimerCreateTimerTask+0x38>
   1e380:	b672      	cpsid	i
   1e382:	e7fe      	b.n	1e382 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1e384:	687b      	ldr	r3, [r7, #4]
}
   1e386:	0018      	movs	r0, r3
   1e388:	46bd      	mov	sp, r7
   1e38a:	b003      	add	sp, #12
   1e38c:	bd90      	pop	{r4, r7, pc}
   1e38e:	46c0      	nop			; (mov r8, r8)
   1e390:	0001e895 	.word	0x0001e895
   1e394:	20004214 	.word	0x20004214
   1e398:	0003a0cc 	.word	0x0003a0cc
   1e39c:	0001e4cd 	.word	0x0001e4cd
   1e3a0:	20004218 	.word	0x20004218
   1e3a4:	0001cce5 	.word	0x0001cce5

0001e3a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1e3a8:	b590      	push	{r4, r7, lr}
   1e3aa:	b089      	sub	sp, #36	; 0x24
   1e3ac:	af00      	add	r7, sp, #0
   1e3ae:	60f8      	str	r0, [r7, #12]
   1e3b0:	60b9      	str	r1, [r7, #8]
   1e3b2:	607a      	str	r2, [r7, #4]
   1e3b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1e3b6:	2300      	movs	r3, #0
   1e3b8:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1e3ba:	68fb      	ldr	r3, [r7, #12]
   1e3bc:	2b00      	cmp	r3, #0
   1e3be:	d101      	bne.n	1e3c4 <xTimerGenericCommand+0x1c>
   1e3c0:	b672      	cpsid	i
   1e3c2:	e7fe      	b.n	1e3c2 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1e3c4:	4b1e      	ldr	r3, [pc, #120]	; (1e440 <xTimerGenericCommand+0x98>)
   1e3c6:	681b      	ldr	r3, [r3, #0]
   1e3c8:	2b00      	cmp	r3, #0
   1e3ca:	d033      	beq.n	1e434 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1e3cc:	2310      	movs	r3, #16
   1e3ce:	18fb      	adds	r3, r7, r3
   1e3d0:	68ba      	ldr	r2, [r7, #8]
   1e3d2:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1e3d4:	2310      	movs	r3, #16
   1e3d6:	18fb      	adds	r3, r7, r3
   1e3d8:	687a      	ldr	r2, [r7, #4]
   1e3da:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1e3dc:	2310      	movs	r3, #16
   1e3de:	18fb      	adds	r3, r7, r3
   1e3e0:	68fa      	ldr	r2, [r7, #12]
   1e3e2:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1e3e4:	68bb      	ldr	r3, [r7, #8]
   1e3e6:	2b05      	cmp	r3, #5
   1e3e8:	dc1a      	bgt.n	1e420 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1e3ea:	4b16      	ldr	r3, [pc, #88]	; (1e444 <xTimerGenericCommand+0x9c>)
   1e3ec:	4798      	blx	r3
   1e3ee:	0003      	movs	r3, r0
   1e3f0:	2b02      	cmp	r3, #2
   1e3f2:	d10a      	bne.n	1e40a <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1e3f4:	4b12      	ldr	r3, [pc, #72]	; (1e440 <xTimerGenericCommand+0x98>)
   1e3f6:	6818      	ldr	r0, [r3, #0]
   1e3f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1e3fa:	2310      	movs	r3, #16
   1e3fc:	18f9      	adds	r1, r7, r3
   1e3fe:	2300      	movs	r3, #0
   1e400:	4c11      	ldr	r4, [pc, #68]	; (1e448 <xTimerGenericCommand+0xa0>)
   1e402:	47a0      	blx	r4
   1e404:	0003      	movs	r3, r0
   1e406:	61fb      	str	r3, [r7, #28]
   1e408:	e014      	b.n	1e434 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1e40a:	4b0d      	ldr	r3, [pc, #52]	; (1e440 <xTimerGenericCommand+0x98>)
   1e40c:	6818      	ldr	r0, [r3, #0]
   1e40e:	2310      	movs	r3, #16
   1e410:	18f9      	adds	r1, r7, r3
   1e412:	2300      	movs	r3, #0
   1e414:	2200      	movs	r2, #0
   1e416:	4c0c      	ldr	r4, [pc, #48]	; (1e448 <xTimerGenericCommand+0xa0>)
   1e418:	47a0      	blx	r4
   1e41a:	0003      	movs	r3, r0
   1e41c:	61fb      	str	r3, [r7, #28]
   1e41e:	e009      	b.n	1e434 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1e420:	4b07      	ldr	r3, [pc, #28]	; (1e440 <xTimerGenericCommand+0x98>)
   1e422:	6818      	ldr	r0, [r3, #0]
   1e424:	683a      	ldr	r2, [r7, #0]
   1e426:	2310      	movs	r3, #16
   1e428:	18f9      	adds	r1, r7, r3
   1e42a:	2300      	movs	r3, #0
   1e42c:	4c07      	ldr	r4, [pc, #28]	; (1e44c <xTimerGenericCommand+0xa4>)
   1e42e:	47a0      	blx	r4
   1e430:	0003      	movs	r3, r0
   1e432:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1e434:	69fb      	ldr	r3, [r7, #28]
}
   1e436:	0018      	movs	r0, r3
   1e438:	46bd      	mov	sp, r7
   1e43a:	b009      	add	sp, #36	; 0x24
   1e43c:	bd90      	pop	{r4, r7, pc}
   1e43e:	46c0      	nop			; (mov r8, r8)
   1e440:	20004214 	.word	0x20004214
   1e444:	0001dda9 	.word	0x0001dda9
   1e448:	0001b61d 	.word	0x0001b61d
   1e44c:	0001ba7d 	.word	0x0001ba7d

0001e450 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1e450:	b590      	push	{r4, r7, lr}
   1e452:	b087      	sub	sp, #28
   1e454:	af02      	add	r7, sp, #8
   1e456:	6078      	str	r0, [r7, #4]
   1e458:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e45a:	4b18      	ldr	r3, [pc, #96]	; (1e4bc <prvProcessExpiredTimer+0x6c>)
   1e45c:	681b      	ldr	r3, [r3, #0]
   1e45e:	68db      	ldr	r3, [r3, #12]
   1e460:	68db      	ldr	r3, [r3, #12]
   1e462:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1e464:	68fb      	ldr	r3, [r7, #12]
   1e466:	3304      	adds	r3, #4
   1e468:	0018      	movs	r0, r3
   1e46a:	4b15      	ldr	r3, [pc, #84]	; (1e4c0 <prvProcessExpiredTimer+0x70>)
   1e46c:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1e46e:	68fb      	ldr	r3, [r7, #12]
   1e470:	69db      	ldr	r3, [r3, #28]
   1e472:	2b01      	cmp	r3, #1
   1e474:	d119      	bne.n	1e4aa <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1e476:	68fb      	ldr	r3, [r7, #12]
   1e478:	699a      	ldr	r2, [r3, #24]
   1e47a:	687b      	ldr	r3, [r7, #4]
   1e47c:	18d1      	adds	r1, r2, r3
   1e47e:	687b      	ldr	r3, [r7, #4]
   1e480:	683a      	ldr	r2, [r7, #0]
   1e482:	68f8      	ldr	r0, [r7, #12]
   1e484:	4c0f      	ldr	r4, [pc, #60]	; (1e4c4 <prvProcessExpiredTimer+0x74>)
   1e486:	47a0      	blx	r4
   1e488:	1e03      	subs	r3, r0, #0
   1e48a:	d00e      	beq.n	1e4aa <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1e48c:	687a      	ldr	r2, [r7, #4]
   1e48e:	68f8      	ldr	r0, [r7, #12]
   1e490:	2300      	movs	r3, #0
   1e492:	9300      	str	r3, [sp, #0]
   1e494:	2300      	movs	r3, #0
   1e496:	2100      	movs	r1, #0
   1e498:	4c0b      	ldr	r4, [pc, #44]	; (1e4c8 <prvProcessExpiredTimer+0x78>)
   1e49a:	47a0      	blx	r4
   1e49c:	0003      	movs	r3, r0
   1e49e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1e4a0:	68bb      	ldr	r3, [r7, #8]
   1e4a2:	2b00      	cmp	r3, #0
   1e4a4:	d101      	bne.n	1e4aa <prvProcessExpiredTimer+0x5a>
   1e4a6:	b672      	cpsid	i
   1e4a8:	e7fe      	b.n	1e4a8 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1e4aa:	68fb      	ldr	r3, [r7, #12]
   1e4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e4ae:	68fa      	ldr	r2, [r7, #12]
   1e4b0:	0010      	movs	r0, r2
   1e4b2:	4798      	blx	r3
}
   1e4b4:	46c0      	nop			; (mov r8, r8)
   1e4b6:	46bd      	mov	sp, r7
   1e4b8:	b005      	add	sp, #20
   1e4ba:	bd90      	pop	{r4, r7, pc}
   1e4bc:	2000420c 	.word	0x2000420c
   1e4c0:	0001aefb 	.word	0x0001aefb
   1e4c4:	0001e635 	.word	0x0001e635
   1e4c8:	0001e3a9 	.word	0x0001e3a9

0001e4cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1e4cc:	b580      	push	{r7, lr}
   1e4ce:	b084      	sub	sp, #16
   1e4d0:	af00      	add	r7, sp, #0
   1e4d2:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1e4d4:	4b08      	ldr	r3, [pc, #32]	; (1e4f8 <prvTimerTask+0x2c>)
   1e4d6:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1e4d8:	2308      	movs	r3, #8
   1e4da:	18fb      	adds	r3, r7, r3
   1e4dc:	0018      	movs	r0, r3
   1e4de:	4b07      	ldr	r3, [pc, #28]	; (1e4fc <prvTimerTask+0x30>)
   1e4e0:	4798      	blx	r3
   1e4e2:	0003      	movs	r3, r0
   1e4e4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1e4e6:	68ba      	ldr	r2, [r7, #8]
   1e4e8:	68fb      	ldr	r3, [r7, #12]
   1e4ea:	0011      	movs	r1, r2
   1e4ec:	0018      	movs	r0, r3
   1e4ee:	4b04      	ldr	r3, [pc, #16]	; (1e500 <prvTimerTask+0x34>)
   1e4f0:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1e4f2:	4b04      	ldr	r3, [pc, #16]	; (1e504 <prvTimerTask+0x38>)
   1e4f4:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1e4f6:	e7ef      	b.n	1e4d8 <prvTimerTask+0xc>
   1e4f8:	0003382d 	.word	0x0003382d
   1e4fc:	0001e5ad 	.word	0x0001e5ad
   1e500:	0001e509 	.word	0x0001e509
   1e504:	0001e6bd 	.word	0x0001e6bd

0001e508 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1e508:	b580      	push	{r7, lr}
   1e50a:	b084      	sub	sp, #16
   1e50c:	af00      	add	r7, sp, #0
   1e50e:	6078      	str	r0, [r7, #4]
   1e510:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1e512:	4b1e      	ldr	r3, [pc, #120]	; (1e58c <prvProcessTimerOrBlockTask+0x84>)
   1e514:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1e516:	2308      	movs	r3, #8
   1e518:	18fb      	adds	r3, r7, r3
   1e51a:	0018      	movs	r0, r3
   1e51c:	4b1c      	ldr	r3, [pc, #112]	; (1e590 <prvProcessTimerOrBlockTask+0x88>)
   1e51e:	4798      	blx	r3
   1e520:	0003      	movs	r3, r0
   1e522:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1e524:	68bb      	ldr	r3, [r7, #8]
   1e526:	2b00      	cmp	r3, #0
   1e528:	d129      	bne.n	1e57e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1e52a:	683b      	ldr	r3, [r7, #0]
   1e52c:	2b00      	cmp	r3, #0
   1e52e:	d10c      	bne.n	1e54a <prvProcessTimerOrBlockTask+0x42>
   1e530:	687a      	ldr	r2, [r7, #4]
   1e532:	68fb      	ldr	r3, [r7, #12]
   1e534:	429a      	cmp	r2, r3
   1e536:	d808      	bhi.n	1e54a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1e538:	4b16      	ldr	r3, [pc, #88]	; (1e594 <prvProcessTimerOrBlockTask+0x8c>)
   1e53a:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1e53c:	68fa      	ldr	r2, [r7, #12]
   1e53e:	687b      	ldr	r3, [r7, #4]
   1e540:	0011      	movs	r1, r2
   1e542:	0018      	movs	r0, r3
   1e544:	4b14      	ldr	r3, [pc, #80]	; (1e598 <prvProcessTimerOrBlockTask+0x90>)
   1e546:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1e548:	e01b      	b.n	1e582 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1e54a:	683b      	ldr	r3, [r7, #0]
   1e54c:	2b00      	cmp	r3, #0
   1e54e:	d006      	beq.n	1e55e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1e550:	4b12      	ldr	r3, [pc, #72]	; (1e59c <prvProcessTimerOrBlockTask+0x94>)
   1e552:	681b      	ldr	r3, [r3, #0]
   1e554:	681b      	ldr	r3, [r3, #0]
   1e556:	425a      	negs	r2, r3
   1e558:	4153      	adcs	r3, r2
   1e55a:	b2db      	uxtb	r3, r3
   1e55c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1e55e:	4b10      	ldr	r3, [pc, #64]	; (1e5a0 <prvProcessTimerOrBlockTask+0x98>)
   1e560:	6818      	ldr	r0, [r3, #0]
   1e562:	687a      	ldr	r2, [r7, #4]
   1e564:	68fb      	ldr	r3, [r7, #12]
   1e566:	1ad3      	subs	r3, r2, r3
   1e568:	683a      	ldr	r2, [r7, #0]
   1e56a:	0019      	movs	r1, r3
   1e56c:	4b0d      	ldr	r3, [pc, #52]	; (1e5a4 <prvProcessTimerOrBlockTask+0x9c>)
   1e56e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1e570:	4b08      	ldr	r3, [pc, #32]	; (1e594 <prvProcessTimerOrBlockTask+0x8c>)
   1e572:	4798      	blx	r3
   1e574:	1e03      	subs	r3, r0, #0
   1e576:	d104      	bne.n	1e582 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1e578:	4b0b      	ldr	r3, [pc, #44]	; (1e5a8 <prvProcessTimerOrBlockTask+0xa0>)
   1e57a:	4798      	blx	r3
}
   1e57c:	e001      	b.n	1e582 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1e57e:	4b05      	ldr	r3, [pc, #20]	; (1e594 <prvProcessTimerOrBlockTask+0x8c>)
   1e580:	4798      	blx	r3
}
   1e582:	46c0      	nop			; (mov r8, r8)
   1e584:	46bd      	mov	sp, r7
   1e586:	b004      	add	sp, #16
   1e588:	bd80      	pop	{r7, pc}
   1e58a:	46c0      	nop			; (mov r8, r8)
   1e58c:	0001d341 	.word	0x0001d341
   1e590:	0001e5ed 	.word	0x0001e5ed
   1e594:	0001d359 	.word	0x0001d359
   1e598:	0001e451 	.word	0x0001e451
   1e59c:	20004210 	.word	0x20004210
   1e5a0:	20004214 	.word	0x20004214
   1e5a4:	0001cae1 	.word	0x0001cae1
   1e5a8:	0001b071 	.word	0x0001b071

0001e5ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1e5ac:	b580      	push	{r7, lr}
   1e5ae:	b084      	sub	sp, #16
   1e5b0:	af00      	add	r7, sp, #0
   1e5b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1e5b4:	4b0c      	ldr	r3, [pc, #48]	; (1e5e8 <prvGetNextExpireTime+0x3c>)
   1e5b6:	681b      	ldr	r3, [r3, #0]
   1e5b8:	681b      	ldr	r3, [r3, #0]
   1e5ba:	425a      	negs	r2, r3
   1e5bc:	4153      	adcs	r3, r2
   1e5be:	b2db      	uxtb	r3, r3
   1e5c0:	001a      	movs	r2, r3
   1e5c2:	687b      	ldr	r3, [r7, #4]
   1e5c4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1e5c6:	687b      	ldr	r3, [r7, #4]
   1e5c8:	681b      	ldr	r3, [r3, #0]
   1e5ca:	2b00      	cmp	r3, #0
   1e5cc:	d105      	bne.n	1e5da <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e5ce:	4b06      	ldr	r3, [pc, #24]	; (1e5e8 <prvGetNextExpireTime+0x3c>)
   1e5d0:	681b      	ldr	r3, [r3, #0]
   1e5d2:	68db      	ldr	r3, [r3, #12]
   1e5d4:	681b      	ldr	r3, [r3, #0]
   1e5d6:	60fb      	str	r3, [r7, #12]
   1e5d8:	e001      	b.n	1e5de <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1e5da:	2300      	movs	r3, #0
   1e5dc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1e5de:	68fb      	ldr	r3, [r7, #12]
}
   1e5e0:	0018      	movs	r0, r3
   1e5e2:	46bd      	mov	sp, r7
   1e5e4:	b004      	add	sp, #16
   1e5e6:	bd80      	pop	{r7, pc}
   1e5e8:	2000420c 	.word	0x2000420c

0001e5ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1e5ec:	b580      	push	{r7, lr}
   1e5ee:	b084      	sub	sp, #16
   1e5f0:	af00      	add	r7, sp, #0
   1e5f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1e5f4:	4b0c      	ldr	r3, [pc, #48]	; (1e628 <prvSampleTimeNow+0x3c>)
   1e5f6:	4798      	blx	r3
   1e5f8:	0003      	movs	r3, r0
   1e5fa:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1e5fc:	4b0b      	ldr	r3, [pc, #44]	; (1e62c <prvSampleTimeNow+0x40>)
   1e5fe:	681b      	ldr	r3, [r3, #0]
   1e600:	68fa      	ldr	r2, [r7, #12]
   1e602:	429a      	cmp	r2, r3
   1e604:	d205      	bcs.n	1e612 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1e606:	4b0a      	ldr	r3, [pc, #40]	; (1e630 <prvSampleTimeNow+0x44>)
   1e608:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1e60a:	687b      	ldr	r3, [r7, #4]
   1e60c:	2201      	movs	r2, #1
   1e60e:	601a      	str	r2, [r3, #0]
   1e610:	e002      	b.n	1e618 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1e612:	687b      	ldr	r3, [r7, #4]
   1e614:	2200      	movs	r2, #0
   1e616:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1e618:	4b04      	ldr	r3, [pc, #16]	; (1e62c <prvSampleTimeNow+0x40>)
   1e61a:	68fa      	ldr	r2, [r7, #12]
   1e61c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1e61e:	68fb      	ldr	r3, [r7, #12]
}
   1e620:	0018      	movs	r0, r3
   1e622:	46bd      	mov	sp, r7
   1e624:	b004      	add	sp, #16
   1e626:	bd80      	pop	{r7, pc}
   1e628:	0001d4c9 	.word	0x0001d4c9
   1e62c:	2000421c 	.word	0x2000421c
   1e630:	0001e7d5 	.word	0x0001e7d5

0001e634 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1e634:	b580      	push	{r7, lr}
   1e636:	b086      	sub	sp, #24
   1e638:	af00      	add	r7, sp, #0
   1e63a:	60f8      	str	r0, [r7, #12]
   1e63c:	60b9      	str	r1, [r7, #8]
   1e63e:	607a      	str	r2, [r7, #4]
   1e640:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1e642:	2300      	movs	r3, #0
   1e644:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1e646:	68fb      	ldr	r3, [r7, #12]
   1e648:	68ba      	ldr	r2, [r7, #8]
   1e64a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1e64c:	68fb      	ldr	r3, [r7, #12]
   1e64e:	68fa      	ldr	r2, [r7, #12]
   1e650:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1e652:	68ba      	ldr	r2, [r7, #8]
   1e654:	687b      	ldr	r3, [r7, #4]
   1e656:	429a      	cmp	r2, r3
   1e658:	d812      	bhi.n	1e680 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e65a:	687a      	ldr	r2, [r7, #4]
   1e65c:	683b      	ldr	r3, [r7, #0]
   1e65e:	1ad2      	subs	r2, r2, r3
   1e660:	68fb      	ldr	r3, [r7, #12]
   1e662:	699b      	ldr	r3, [r3, #24]
   1e664:	429a      	cmp	r2, r3
   1e666:	d302      	bcc.n	1e66e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1e668:	2301      	movs	r3, #1
   1e66a:	617b      	str	r3, [r7, #20]
   1e66c:	e01b      	b.n	1e6a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1e66e:	4b10      	ldr	r3, [pc, #64]	; (1e6b0 <prvInsertTimerInActiveList+0x7c>)
   1e670:	681a      	ldr	r2, [r3, #0]
   1e672:	68fb      	ldr	r3, [r7, #12]
   1e674:	3304      	adds	r3, #4
   1e676:	0019      	movs	r1, r3
   1e678:	0010      	movs	r0, r2
   1e67a:	4b0e      	ldr	r3, [pc, #56]	; (1e6b4 <prvInsertTimerInActiveList+0x80>)
   1e67c:	4798      	blx	r3
   1e67e:	e012      	b.n	1e6a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1e680:	687a      	ldr	r2, [r7, #4]
   1e682:	683b      	ldr	r3, [r7, #0]
   1e684:	429a      	cmp	r2, r3
   1e686:	d206      	bcs.n	1e696 <prvInsertTimerInActiveList+0x62>
   1e688:	68ba      	ldr	r2, [r7, #8]
   1e68a:	683b      	ldr	r3, [r7, #0]
   1e68c:	429a      	cmp	r2, r3
   1e68e:	d302      	bcc.n	1e696 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1e690:	2301      	movs	r3, #1
   1e692:	617b      	str	r3, [r7, #20]
   1e694:	e007      	b.n	1e6a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1e696:	4b08      	ldr	r3, [pc, #32]	; (1e6b8 <prvInsertTimerInActiveList+0x84>)
   1e698:	681a      	ldr	r2, [r3, #0]
   1e69a:	68fb      	ldr	r3, [r7, #12]
   1e69c:	3304      	adds	r3, #4
   1e69e:	0019      	movs	r1, r3
   1e6a0:	0010      	movs	r0, r2
   1e6a2:	4b04      	ldr	r3, [pc, #16]	; (1e6b4 <prvInsertTimerInActiveList+0x80>)
   1e6a4:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1e6a6:	697b      	ldr	r3, [r7, #20]
}
   1e6a8:	0018      	movs	r0, r3
   1e6aa:	46bd      	mov	sp, r7
   1e6ac:	b006      	add	sp, #24
   1e6ae:	bd80      	pop	{r7, pc}
   1e6b0:	20004210 	.word	0x20004210
   1e6b4:	0001ae8f 	.word	0x0001ae8f
   1e6b8:	2000420c 	.word	0x2000420c

0001e6bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1e6bc:	b590      	push	{r4, r7, lr}
   1e6be:	b08b      	sub	sp, #44	; 0x2c
   1e6c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1e6c2:	e068      	b.n	1e796 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1e6c4:	2308      	movs	r3, #8
   1e6c6:	18fb      	adds	r3, r7, r3
   1e6c8:	681b      	ldr	r3, [r3, #0]
   1e6ca:	2b00      	cmp	r3, #0
   1e6cc:	db63      	blt.n	1e796 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1e6ce:	2308      	movs	r3, #8
   1e6d0:	18fb      	adds	r3, r7, r3
   1e6d2:	689b      	ldr	r3, [r3, #8]
   1e6d4:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1e6d6:	69fb      	ldr	r3, [r7, #28]
   1e6d8:	695b      	ldr	r3, [r3, #20]
   1e6da:	2b00      	cmp	r3, #0
   1e6dc:	d004      	beq.n	1e6e8 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1e6de:	69fb      	ldr	r3, [r7, #28]
   1e6e0:	3304      	adds	r3, #4
   1e6e2:	0018      	movs	r0, r3
   1e6e4:	4b33      	ldr	r3, [pc, #204]	; (1e7b4 <prvProcessReceivedCommands+0xf8>)
   1e6e6:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1e6e8:	1d3b      	adds	r3, r7, #4
   1e6ea:	0018      	movs	r0, r3
   1e6ec:	4b32      	ldr	r3, [pc, #200]	; (1e7b8 <prvProcessReceivedCommands+0xfc>)
   1e6ee:	4798      	blx	r3
   1e6f0:	0003      	movs	r3, r0
   1e6f2:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1e6f4:	2308      	movs	r3, #8
   1e6f6:	18fb      	adds	r3, r7, r3
   1e6f8:	681b      	ldr	r3, [r3, #0]
   1e6fa:	2b09      	cmp	r3, #9
   1e6fc:	d84a      	bhi.n	1e794 <prvProcessReceivedCommands+0xd8>
   1e6fe:	009a      	lsls	r2, r3, #2
   1e700:	4b2e      	ldr	r3, [pc, #184]	; (1e7bc <prvProcessReceivedCommands+0x100>)
   1e702:	18d3      	adds	r3, r2, r3
   1e704:	681b      	ldr	r3, [r3, #0]
   1e706:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1e708:	2308      	movs	r3, #8
   1e70a:	18fb      	adds	r3, r7, r3
   1e70c:	685a      	ldr	r2, [r3, #4]
   1e70e:	69fb      	ldr	r3, [r7, #28]
   1e710:	699b      	ldr	r3, [r3, #24]
   1e712:	18d1      	adds	r1, r2, r3
   1e714:	2308      	movs	r3, #8
   1e716:	18fb      	adds	r3, r7, r3
   1e718:	685b      	ldr	r3, [r3, #4]
   1e71a:	69ba      	ldr	r2, [r7, #24]
   1e71c:	69f8      	ldr	r0, [r7, #28]
   1e71e:	4c28      	ldr	r4, [pc, #160]	; (1e7c0 <prvProcessReceivedCommands+0x104>)
   1e720:	47a0      	blx	r4
   1e722:	1e03      	subs	r3, r0, #0
   1e724:	d037      	beq.n	1e796 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1e726:	69fb      	ldr	r3, [r7, #28]
   1e728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e72a:	69fa      	ldr	r2, [r7, #28]
   1e72c:	0010      	movs	r0, r2
   1e72e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1e730:	69fb      	ldr	r3, [r7, #28]
   1e732:	69db      	ldr	r3, [r3, #28]
   1e734:	2b01      	cmp	r3, #1
   1e736:	d12e      	bne.n	1e796 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1e738:	2308      	movs	r3, #8
   1e73a:	18fb      	adds	r3, r7, r3
   1e73c:	685a      	ldr	r2, [r3, #4]
   1e73e:	69fb      	ldr	r3, [r7, #28]
   1e740:	699b      	ldr	r3, [r3, #24]
   1e742:	18d2      	adds	r2, r2, r3
   1e744:	69f8      	ldr	r0, [r7, #28]
   1e746:	2300      	movs	r3, #0
   1e748:	9300      	str	r3, [sp, #0]
   1e74a:	2300      	movs	r3, #0
   1e74c:	2100      	movs	r1, #0
   1e74e:	4c1d      	ldr	r4, [pc, #116]	; (1e7c4 <prvProcessReceivedCommands+0x108>)
   1e750:	47a0      	blx	r4
   1e752:	0003      	movs	r3, r0
   1e754:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1e756:	697b      	ldr	r3, [r7, #20]
   1e758:	2b00      	cmp	r3, #0
   1e75a:	d11c      	bne.n	1e796 <prvProcessReceivedCommands+0xda>
   1e75c:	b672      	cpsid	i
   1e75e:	e7fe      	b.n	1e75e <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1e760:	2308      	movs	r3, #8
   1e762:	18fb      	adds	r3, r7, r3
   1e764:	685a      	ldr	r2, [r3, #4]
   1e766:	69fb      	ldr	r3, [r7, #28]
   1e768:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1e76a:	69fb      	ldr	r3, [r7, #28]
   1e76c:	699b      	ldr	r3, [r3, #24]
   1e76e:	2b00      	cmp	r3, #0
   1e770:	d101      	bne.n	1e776 <prvProcessReceivedCommands+0xba>
   1e772:	b672      	cpsid	i
   1e774:	e7fe      	b.n	1e774 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1e776:	69fb      	ldr	r3, [r7, #28]
   1e778:	699a      	ldr	r2, [r3, #24]
   1e77a:	69bb      	ldr	r3, [r7, #24]
   1e77c:	18d1      	adds	r1, r2, r3
   1e77e:	69bb      	ldr	r3, [r7, #24]
   1e780:	69ba      	ldr	r2, [r7, #24]
   1e782:	69f8      	ldr	r0, [r7, #28]
   1e784:	4c0e      	ldr	r4, [pc, #56]	; (1e7c0 <prvProcessReceivedCommands+0x104>)
   1e786:	47a0      	blx	r4
					break;
   1e788:	e005      	b.n	1e796 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1e78a:	69fb      	ldr	r3, [r7, #28]
   1e78c:	0018      	movs	r0, r3
   1e78e:	4b0e      	ldr	r3, [pc, #56]	; (1e7c8 <prvProcessReceivedCommands+0x10c>)
   1e790:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1e792:	e000      	b.n	1e796 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1e794:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1e796:	4b0d      	ldr	r3, [pc, #52]	; (1e7cc <prvProcessReceivedCommands+0x110>)
   1e798:	681b      	ldr	r3, [r3, #0]
   1e79a:	2208      	movs	r2, #8
   1e79c:	18b9      	adds	r1, r7, r2
   1e79e:	2200      	movs	r2, #0
   1e7a0:	0018      	movs	r0, r3
   1e7a2:	4b0b      	ldr	r3, [pc, #44]	; (1e7d0 <prvProcessReceivedCommands+0x114>)
   1e7a4:	4798      	blx	r3
   1e7a6:	1e03      	subs	r3, r0, #0
   1e7a8:	d18c      	bne.n	1e6c4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1e7aa:	46c0      	nop			; (mov r8, r8)
   1e7ac:	46bd      	mov	sp, r7
   1e7ae:	b009      	add	sp, #36	; 0x24
   1e7b0:	bd90      	pop	{r4, r7, pc}
   1e7b2:	46c0      	nop			; (mov r8, r8)
   1e7b4:	0001aefb 	.word	0x0001aefb
   1e7b8:	0001e5ed 	.word	0x0001e5ed
   1e7bc:	0003a0d4 	.word	0x0003a0d4
   1e7c0:	0001e635 	.word	0x0001e635
   1e7c4:	0001e3a9 	.word	0x0001e3a9
   1e7c8:	0001b285 	.word	0x0001b285
   1e7cc:	20004214 	.word	0x20004214
   1e7d0:	0001bed5 	.word	0x0001bed5

0001e7d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1e7d4:	b590      	push	{r4, r7, lr}
   1e7d6:	b089      	sub	sp, #36	; 0x24
   1e7d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1e7da:	e03e      	b.n	1e85a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e7dc:	4b28      	ldr	r3, [pc, #160]	; (1e880 <prvSwitchTimerLists+0xac>)
   1e7de:	681b      	ldr	r3, [r3, #0]
   1e7e0:	68db      	ldr	r3, [r3, #12]
   1e7e2:	681b      	ldr	r3, [r3, #0]
   1e7e4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e7e6:	4b26      	ldr	r3, [pc, #152]	; (1e880 <prvSwitchTimerLists+0xac>)
   1e7e8:	681b      	ldr	r3, [r3, #0]
   1e7ea:	68db      	ldr	r3, [r3, #12]
   1e7ec:	68db      	ldr	r3, [r3, #12]
   1e7ee:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1e7f0:	693b      	ldr	r3, [r7, #16]
   1e7f2:	3304      	adds	r3, #4
   1e7f4:	0018      	movs	r0, r3
   1e7f6:	4b23      	ldr	r3, [pc, #140]	; (1e884 <prvSwitchTimerLists+0xb0>)
   1e7f8:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1e7fa:	693b      	ldr	r3, [r7, #16]
   1e7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e7fe:	693a      	ldr	r2, [r7, #16]
   1e800:	0010      	movs	r0, r2
   1e802:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1e804:	693b      	ldr	r3, [r7, #16]
   1e806:	69db      	ldr	r3, [r3, #28]
   1e808:	2b01      	cmp	r3, #1
   1e80a:	d126      	bne.n	1e85a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1e80c:	693b      	ldr	r3, [r7, #16]
   1e80e:	699a      	ldr	r2, [r3, #24]
   1e810:	697b      	ldr	r3, [r7, #20]
   1e812:	18d3      	adds	r3, r2, r3
   1e814:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1e816:	68fa      	ldr	r2, [r7, #12]
   1e818:	697b      	ldr	r3, [r7, #20]
   1e81a:	429a      	cmp	r2, r3
   1e81c:	d90e      	bls.n	1e83c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1e81e:	693b      	ldr	r3, [r7, #16]
   1e820:	68fa      	ldr	r2, [r7, #12]
   1e822:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1e824:	693b      	ldr	r3, [r7, #16]
   1e826:	693a      	ldr	r2, [r7, #16]
   1e828:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1e82a:	4b15      	ldr	r3, [pc, #84]	; (1e880 <prvSwitchTimerLists+0xac>)
   1e82c:	681a      	ldr	r2, [r3, #0]
   1e82e:	693b      	ldr	r3, [r7, #16]
   1e830:	3304      	adds	r3, #4
   1e832:	0019      	movs	r1, r3
   1e834:	0010      	movs	r0, r2
   1e836:	4b14      	ldr	r3, [pc, #80]	; (1e888 <prvSwitchTimerLists+0xb4>)
   1e838:	4798      	blx	r3
   1e83a:	e00e      	b.n	1e85a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1e83c:	697a      	ldr	r2, [r7, #20]
   1e83e:	6938      	ldr	r0, [r7, #16]
   1e840:	2300      	movs	r3, #0
   1e842:	9300      	str	r3, [sp, #0]
   1e844:	2300      	movs	r3, #0
   1e846:	2100      	movs	r1, #0
   1e848:	4c10      	ldr	r4, [pc, #64]	; (1e88c <prvSwitchTimerLists+0xb8>)
   1e84a:	47a0      	blx	r4
   1e84c:	0003      	movs	r3, r0
   1e84e:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1e850:	68bb      	ldr	r3, [r7, #8]
   1e852:	2b00      	cmp	r3, #0
   1e854:	d101      	bne.n	1e85a <prvSwitchTimerLists+0x86>
   1e856:	b672      	cpsid	i
   1e858:	e7fe      	b.n	1e858 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1e85a:	4b09      	ldr	r3, [pc, #36]	; (1e880 <prvSwitchTimerLists+0xac>)
   1e85c:	681b      	ldr	r3, [r3, #0]
   1e85e:	681b      	ldr	r3, [r3, #0]
   1e860:	2b00      	cmp	r3, #0
   1e862:	d1bb      	bne.n	1e7dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1e864:	4b06      	ldr	r3, [pc, #24]	; (1e880 <prvSwitchTimerLists+0xac>)
   1e866:	681b      	ldr	r3, [r3, #0]
   1e868:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1e86a:	4b09      	ldr	r3, [pc, #36]	; (1e890 <prvSwitchTimerLists+0xbc>)
   1e86c:	681a      	ldr	r2, [r3, #0]
   1e86e:	4b04      	ldr	r3, [pc, #16]	; (1e880 <prvSwitchTimerLists+0xac>)
   1e870:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1e872:	4b07      	ldr	r3, [pc, #28]	; (1e890 <prvSwitchTimerLists+0xbc>)
   1e874:	687a      	ldr	r2, [r7, #4]
   1e876:	601a      	str	r2, [r3, #0]
}
   1e878:	46c0      	nop			; (mov r8, r8)
   1e87a:	46bd      	mov	sp, r7
   1e87c:	b007      	add	sp, #28
   1e87e:	bd90      	pop	{r4, r7, pc}
   1e880:	2000420c 	.word	0x2000420c
   1e884:	0001aefb 	.word	0x0001aefb
   1e888:	0001ae8f 	.word	0x0001ae8f
   1e88c:	0001e3a9 	.word	0x0001e3a9
   1e890:	20004210 	.word	0x20004210

0001e894 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1e894:	b580      	push	{r7, lr}
   1e896:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1e898:	4b10      	ldr	r3, [pc, #64]	; (1e8dc <prvCheckForValidListAndQueue+0x48>)
   1e89a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1e89c:	4b10      	ldr	r3, [pc, #64]	; (1e8e0 <prvCheckForValidListAndQueue+0x4c>)
   1e89e:	681b      	ldr	r3, [r3, #0]
   1e8a0:	2b00      	cmp	r3, #0
   1e8a2:	d115      	bne.n	1e8d0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1e8a4:	4b0f      	ldr	r3, [pc, #60]	; (1e8e4 <prvCheckForValidListAndQueue+0x50>)
   1e8a6:	0018      	movs	r0, r3
   1e8a8:	4b0f      	ldr	r3, [pc, #60]	; (1e8e8 <prvCheckForValidListAndQueue+0x54>)
   1e8aa:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1e8ac:	4b0f      	ldr	r3, [pc, #60]	; (1e8ec <prvCheckForValidListAndQueue+0x58>)
   1e8ae:	0018      	movs	r0, r3
   1e8b0:	4b0d      	ldr	r3, [pc, #52]	; (1e8e8 <prvCheckForValidListAndQueue+0x54>)
   1e8b2:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1e8b4:	4b0e      	ldr	r3, [pc, #56]	; (1e8f0 <prvCheckForValidListAndQueue+0x5c>)
   1e8b6:	4a0b      	ldr	r2, [pc, #44]	; (1e8e4 <prvCheckForValidListAndQueue+0x50>)
   1e8b8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1e8ba:	4b0e      	ldr	r3, [pc, #56]	; (1e8f4 <prvCheckForValidListAndQueue+0x60>)
   1e8bc:	4a0b      	ldr	r2, [pc, #44]	; (1e8ec <prvCheckForValidListAndQueue+0x58>)
   1e8be:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1e8c0:	2200      	movs	r2, #0
   1e8c2:	210c      	movs	r1, #12
   1e8c4:	2005      	movs	r0, #5
   1e8c6:	4b0c      	ldr	r3, [pc, #48]	; (1e8f8 <prvCheckForValidListAndQueue+0x64>)
   1e8c8:	4798      	blx	r3
   1e8ca:	0002      	movs	r2, r0
   1e8cc:	4b04      	ldr	r3, [pc, #16]	; (1e8e0 <prvCheckForValidListAndQueue+0x4c>)
   1e8ce:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1e8d0:	4b0a      	ldr	r3, [pc, #40]	; (1e8fc <prvCheckForValidListAndQueue+0x68>)
   1e8d2:	4798      	blx	r3
}
   1e8d4:	46c0      	nop			; (mov r8, r8)
   1e8d6:	46bd      	mov	sp, r7
   1e8d8:	bd80      	pop	{r7, pc}
   1e8da:	46c0      	nop			; (mov r8, r8)
   1e8dc:	0001b089 	.word	0x0001b089
   1e8e0:	20004214 	.word	0x20004214
   1e8e4:	200041e4 	.word	0x200041e4
   1e8e8:	0001adf9 	.word	0x0001adf9
   1e8ec:	200041f8 	.word	0x200041f8
   1e8f0:	2000420c 	.word	0x2000420c
   1e8f4:	20004210 	.word	0x20004210
   1e8f8:	0001b375 	.word	0x0001b375
   1e8fc:	0001b0ad 	.word	0x0001b0ad

0001e900 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1e900:	b580      	push	{r7, lr}
   1e902:	b082      	sub	sp, #8
   1e904:	af00      	add	r7, sp, #0
   1e906:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1e908:	687b      	ldr	r3, [r7, #4]
   1e90a:	7c1b      	ldrb	r3, [r3, #16]
   1e90c:	2b00      	cmp	r3, #0
   1e90e:	d00b      	beq.n	1e928 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1e910:	687b      	ldr	r3, [r7, #4]
   1e912:	689b      	ldr	r3, [r3, #8]
   1e914:	1c5a      	adds	r2, r3, #1
   1e916:	687b      	ldr	r3, [r7, #4]
   1e918:	68d9      	ldr	r1, [r3, #12]
   1e91a:	4b10      	ldr	r3, [pc, #64]	; (1e95c <advance_pointer+0x5c>)
   1e91c:	0010      	movs	r0, r2
   1e91e:	4798      	blx	r3
   1e920:	000b      	movs	r3, r1
   1e922:	001a      	movs	r2, r3
   1e924:	687b      	ldr	r3, [r7, #4]
   1e926:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1e928:	687b      	ldr	r3, [r7, #4]
   1e92a:	685b      	ldr	r3, [r3, #4]
   1e92c:	1c5a      	adds	r2, r3, #1
   1e92e:	687b      	ldr	r3, [r7, #4]
   1e930:	68d9      	ldr	r1, [r3, #12]
   1e932:	4b0a      	ldr	r3, [pc, #40]	; (1e95c <advance_pointer+0x5c>)
   1e934:	0010      	movs	r0, r2
   1e936:	4798      	blx	r3
   1e938:	000b      	movs	r3, r1
   1e93a:	001a      	movs	r2, r3
   1e93c:	687b      	ldr	r3, [r7, #4]
   1e93e:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1e940:	687b      	ldr	r3, [r7, #4]
   1e942:	685a      	ldr	r2, [r3, #4]
   1e944:	687b      	ldr	r3, [r7, #4]
   1e946:	689b      	ldr	r3, [r3, #8]
   1e948:	1ad3      	subs	r3, r2, r3
   1e94a:	425a      	negs	r2, r3
   1e94c:	4153      	adcs	r3, r2
   1e94e:	b2da      	uxtb	r2, r3
   1e950:	687b      	ldr	r3, [r7, #4]
   1e952:	741a      	strb	r2, [r3, #16]
 }
   1e954:	46c0      	nop			; (mov r8, r8)
   1e956:	46bd      	mov	sp, r7
   1e958:	b002      	add	sp, #8
   1e95a:	bd80      	pop	{r7, pc}
   1e95c:	00033be1 	.word	0x00033be1

0001e960 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1e960:	b580      	push	{r7, lr}
   1e962:	b082      	sub	sp, #8
   1e964:	af00      	add	r7, sp, #0
   1e966:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1e968:	687b      	ldr	r3, [r7, #4]
   1e96a:	2200      	movs	r2, #0
   1e96c:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1e96e:	687b      	ldr	r3, [r7, #4]
   1e970:	689b      	ldr	r3, [r3, #8]
   1e972:	1c5a      	adds	r2, r3, #1
   1e974:	687b      	ldr	r3, [r7, #4]
   1e976:	68d9      	ldr	r1, [r3, #12]
   1e978:	4b05      	ldr	r3, [pc, #20]	; (1e990 <retreat_pointer+0x30>)
   1e97a:	0010      	movs	r0, r2
   1e97c:	4798      	blx	r3
   1e97e:	000b      	movs	r3, r1
   1e980:	001a      	movs	r2, r3
   1e982:	687b      	ldr	r3, [r7, #4]
   1e984:	609a      	str	r2, [r3, #8]
 }
   1e986:	46c0      	nop			; (mov r8, r8)
   1e988:	46bd      	mov	sp, r7
   1e98a:	b002      	add	sp, #8
   1e98c:	bd80      	pop	{r7, pc}
   1e98e:	46c0      	nop			; (mov r8, r8)
   1e990:	00033be1 	.word	0x00033be1

0001e994 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1e994:	b580      	push	{r7, lr}
   1e996:	b084      	sub	sp, #16
   1e998:	af00      	add	r7, sp, #0
   1e99a:	6078      	str	r0, [r7, #4]
   1e99c:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1e99e:	2014      	movs	r0, #20
   1e9a0:	4b09      	ldr	r3, [pc, #36]	; (1e9c8 <circular_buf_init+0x34>)
   1e9a2:	4798      	blx	r3
   1e9a4:	0003      	movs	r3, r0
   1e9a6:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1e9a8:	68fb      	ldr	r3, [r7, #12]
   1e9aa:	687a      	ldr	r2, [r7, #4]
   1e9ac:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1e9ae:	68fb      	ldr	r3, [r7, #12]
   1e9b0:	683a      	ldr	r2, [r7, #0]
   1e9b2:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1e9b4:	68fb      	ldr	r3, [r7, #12]
   1e9b6:	0018      	movs	r0, r3
   1e9b8:	4b04      	ldr	r3, [pc, #16]	; (1e9cc <circular_buf_init+0x38>)
   1e9ba:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1e9bc:	68fb      	ldr	r3, [r7, #12]
 }
   1e9be:	0018      	movs	r0, r3
   1e9c0:	46bd      	mov	sp, r7
   1e9c2:	b004      	add	sp, #16
   1e9c4:	bd80      	pop	{r7, pc}
   1e9c6:	46c0      	nop			; (mov r8, r8)
   1e9c8:	000363e1 	.word	0x000363e1
   1e9cc:	0001e9d1 	.word	0x0001e9d1

0001e9d0 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1e9d0:	b580      	push	{r7, lr}
   1e9d2:	b082      	sub	sp, #8
   1e9d4:	af00      	add	r7, sp, #0
   1e9d6:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1e9d8:	687b      	ldr	r3, [r7, #4]
   1e9da:	2200      	movs	r2, #0
   1e9dc:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1e9de:	687b      	ldr	r3, [r7, #4]
   1e9e0:	2200      	movs	r2, #0
   1e9e2:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1e9e4:	687b      	ldr	r3, [r7, #4]
   1e9e6:	2200      	movs	r2, #0
   1e9e8:	741a      	strb	r2, [r3, #16]
 }
   1e9ea:	46c0      	nop			; (mov r8, r8)
   1e9ec:	46bd      	mov	sp, r7
   1e9ee:	b002      	add	sp, #8
   1e9f0:	bd80      	pop	{r7, pc}
	...

0001e9f4 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1e9f4:	b580      	push	{r7, lr}
   1e9f6:	b082      	sub	sp, #8
   1e9f8:	af00      	add	r7, sp, #0
   1e9fa:	6078      	str	r0, [r7, #4]
   1e9fc:	000a      	movs	r2, r1
   1e9fe:	1cfb      	adds	r3, r7, #3
   1ea00:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1ea02:	687b      	ldr	r3, [r7, #4]
   1ea04:	681a      	ldr	r2, [r3, #0]
   1ea06:	687b      	ldr	r3, [r7, #4]
   1ea08:	685b      	ldr	r3, [r3, #4]
   1ea0a:	18d3      	adds	r3, r2, r3
   1ea0c:	1cfa      	adds	r2, r7, #3
   1ea0e:	7812      	ldrb	r2, [r2, #0]
   1ea10:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1ea12:	687b      	ldr	r3, [r7, #4]
   1ea14:	0018      	movs	r0, r3
   1ea16:	4b03      	ldr	r3, [pc, #12]	; (1ea24 <circular_buf_put+0x30>)
   1ea18:	4798      	blx	r3
 }
   1ea1a:	46c0      	nop			; (mov r8, r8)
   1ea1c:	46bd      	mov	sp, r7
   1ea1e:	b002      	add	sp, #8
   1ea20:	bd80      	pop	{r7, pc}
   1ea22:	46c0      	nop			; (mov r8, r8)
   1ea24:	0001e901 	.word	0x0001e901

0001ea28 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1ea28:	b580      	push	{r7, lr}
   1ea2a:	b084      	sub	sp, #16
   1ea2c:	af00      	add	r7, sp, #0
   1ea2e:	6078      	str	r0, [r7, #4]
   1ea30:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1ea32:	2301      	movs	r3, #1
   1ea34:	425b      	negs	r3, r3
   1ea36:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1ea38:	687b      	ldr	r3, [r7, #4]
   1ea3a:	0018      	movs	r0, r3
   1ea3c:	4b0d      	ldr	r3, [pc, #52]	; (1ea74 <circular_buf_get+0x4c>)
   1ea3e:	4798      	blx	r3
   1ea40:	0003      	movs	r3, r0
   1ea42:	001a      	movs	r2, r3
   1ea44:	2301      	movs	r3, #1
   1ea46:	4053      	eors	r3, r2
   1ea48:	b2db      	uxtb	r3, r3
   1ea4a:	2b00      	cmp	r3, #0
   1ea4c:	d00d      	beq.n	1ea6a <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1ea4e:	687b      	ldr	r3, [r7, #4]
   1ea50:	681a      	ldr	r2, [r3, #0]
   1ea52:	687b      	ldr	r3, [r7, #4]
   1ea54:	689b      	ldr	r3, [r3, #8]
   1ea56:	18d3      	adds	r3, r2, r3
   1ea58:	781a      	ldrb	r2, [r3, #0]
   1ea5a:	683b      	ldr	r3, [r7, #0]
   1ea5c:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1ea5e:	687b      	ldr	r3, [r7, #4]
   1ea60:	0018      	movs	r0, r3
   1ea62:	4b05      	ldr	r3, [pc, #20]	; (1ea78 <circular_buf_get+0x50>)
   1ea64:	4798      	blx	r3

		 r = 0;
   1ea66:	2300      	movs	r3, #0
   1ea68:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1ea6a:	68fb      	ldr	r3, [r7, #12]
 }
   1ea6c:	0018      	movs	r0, r3
   1ea6e:	46bd      	mov	sp, r7
   1ea70:	b004      	add	sp, #16
   1ea72:	bd80      	pop	{r7, pc}
   1ea74:	0001ea7d 	.word	0x0001ea7d
   1ea78:	0001e961 	.word	0x0001e961

0001ea7c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1ea7c:	b580      	push	{r7, lr}
   1ea7e:	b082      	sub	sp, #8
   1ea80:	af00      	add	r7, sp, #0
   1ea82:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1ea84:	687b      	ldr	r3, [r7, #4]
   1ea86:	7c1b      	ldrb	r3, [r3, #16]
   1ea88:	2201      	movs	r2, #1
   1ea8a:	4053      	eors	r3, r2
   1ea8c:	b2db      	uxtb	r3, r3
   1ea8e:	2b00      	cmp	r3, #0
   1ea90:	d007      	beq.n	1eaa2 <circular_buf_empty+0x26>
   1ea92:	687b      	ldr	r3, [r7, #4]
   1ea94:	685a      	ldr	r2, [r3, #4]
   1ea96:	687b      	ldr	r3, [r7, #4]
   1ea98:	689b      	ldr	r3, [r3, #8]
   1ea9a:	429a      	cmp	r2, r3
   1ea9c:	d101      	bne.n	1eaa2 <circular_buf_empty+0x26>
   1ea9e:	2301      	movs	r3, #1
   1eaa0:	e000      	b.n	1eaa4 <circular_buf_empty+0x28>
   1eaa2:	2300      	movs	r3, #0
   1eaa4:	1c1a      	adds	r2, r3, #0
   1eaa6:	2301      	movs	r3, #1
   1eaa8:	4013      	ands	r3, r2
   1eaaa:	b2db      	uxtb	r3, r3
 }
   1eaac:	0018      	movs	r0, r3
   1eaae:	46bd      	mov	sp, r7
   1eab0:	b002      	add	sp, #8
   1eab2:	bd80      	pop	{r7, pc}

0001eab4 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
   1eab4:	b580      	push	{r7, lr}
   1eab6:	b082      	sub	sp, #8
   1eab8:	af00      	add	r7, sp, #0
   1eaba:	0002      	movs	r2, r0
   1eabc:	1dfb      	adds	r3, r7, #7
   1eabe:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1eac0:	4b06      	ldr	r3, [pc, #24]	; (1eadc <system_interrupt_enable+0x28>)
   1eac2:	1dfa      	adds	r2, r7, #7
   1eac4:	7812      	ldrb	r2, [r2, #0]
   1eac6:	0011      	movs	r1, r2
   1eac8:	221f      	movs	r2, #31
   1eaca:	400a      	ands	r2, r1
   1eacc:	2101      	movs	r1, #1
   1eace:	4091      	lsls	r1, r2
   1ead0:	000a      	movs	r2, r1
   1ead2:	601a      	str	r2, [r3, #0]
}
   1ead4:	46c0      	nop			; (mov r8, r8)
   1ead6:	46bd      	mov	sp, r7
   1ead8:	b002      	add	sp, #8
   1eada:	bd80      	pop	{r7, pc}
   1eadc:	e000e100 	.word	0xe000e100

0001eae0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1eae0:	b580      	push	{r7, lr}
   1eae2:	b084      	sub	sp, #16
   1eae4:	af00      	add	r7, sp, #0
   1eae6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1eae8:	687b      	ldr	r3, [r7, #4]
   1eaea:	681b      	ldr	r3, [r3, #0]
   1eaec:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1eaee:	68fb      	ldr	r3, [r7, #12]
   1eaf0:	69db      	ldr	r3, [r3, #28]
   1eaf2:	1e5a      	subs	r2, r3, #1
   1eaf4:	4193      	sbcs	r3, r2
   1eaf6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   1eaf8:	0018      	movs	r0, r3
   1eafa:	46bd      	mov	sp, r7
   1eafc:	b004      	add	sp, #16
   1eafe:	bd80      	pop	{r7, pc}

0001eb00 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   1eb00:	b580      	push	{r7, lr}
   1eb02:	b082      	sub	sp, #8
   1eb04:	af00      	add	r7, sp, #0
   1eb06:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1eb08:	46c0      	nop			; (mov r8, r8)
   1eb0a:	687b      	ldr	r3, [r7, #4]
   1eb0c:	0018      	movs	r0, r3
   1eb0e:	4b04      	ldr	r3, [pc, #16]	; (1eb20 <_usart_wait_for_sync+0x20>)
   1eb10:	4798      	blx	r3
   1eb12:	1e03      	subs	r3, r0, #0
   1eb14:	d1f9      	bne.n	1eb0a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1eb16:	46c0      	nop			; (mov r8, r8)
   1eb18:	46bd      	mov	sp, r7
   1eb1a:	b002      	add	sp, #8
   1eb1c:	bd80      	pop	{r7, pc}
   1eb1e:	46c0      	nop			; (mov r8, r8)
   1eb20:	0001eae1 	.word	0x0001eae1

0001eb24 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   1eb24:	b580      	push	{r7, lr}
   1eb26:	b082      	sub	sp, #8
   1eb28:	af00      	add	r7, sp, #0
   1eb2a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1eb2c:	687b      	ldr	r3, [r7, #4]
   1eb2e:	2280      	movs	r2, #128	; 0x80
   1eb30:	05d2      	lsls	r2, r2, #23
   1eb32:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1eb34:	687b      	ldr	r3, [r7, #4]
   1eb36:	2200      	movs	r2, #0
   1eb38:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1eb3a:	687b      	ldr	r3, [r7, #4]
   1eb3c:	22ff      	movs	r2, #255	; 0xff
   1eb3e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1eb40:	687b      	ldr	r3, [r7, #4]
   1eb42:	2200      	movs	r2, #0
   1eb44:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1eb46:	687b      	ldr	r3, [r7, #4]
   1eb48:	2200      	movs	r2, #0
   1eb4a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1eb4c:	687b      	ldr	r3, [r7, #4]
   1eb4e:	2296      	movs	r2, #150	; 0x96
   1eb50:	0192      	lsls	r2, r2, #6
   1eb52:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1eb54:	687b      	ldr	r3, [r7, #4]
   1eb56:	2224      	movs	r2, #36	; 0x24
   1eb58:	2101      	movs	r1, #1
   1eb5a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1eb5c:	687b      	ldr	r3, [r7, #4]
   1eb5e:	2225      	movs	r2, #37	; 0x25
   1eb60:	2101      	movs	r1, #1
   1eb62:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1eb64:	687b      	ldr	r3, [r7, #4]
   1eb66:	2226      	movs	r2, #38	; 0x26
   1eb68:	2100      	movs	r1, #0
   1eb6a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1eb6c:	687b      	ldr	r3, [r7, #4]
   1eb6e:	2227      	movs	r2, #39	; 0x27
   1eb70:	2100      	movs	r1, #0
   1eb72:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1eb74:	687b      	ldr	r3, [r7, #4]
   1eb76:	2200      	movs	r2, #0
   1eb78:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1eb7a:	687b      	ldr	r3, [r7, #4]
   1eb7c:	2288      	movs	r2, #136	; 0x88
   1eb7e:	0352      	lsls	r2, r2, #13
   1eb80:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1eb82:	687b      	ldr	r3, [r7, #4]
   1eb84:	222c      	movs	r2, #44	; 0x2c
   1eb86:	2100      	movs	r1, #0
   1eb88:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1eb8a:	687b      	ldr	r3, [r7, #4]
   1eb8c:	222d      	movs	r2, #45	; 0x2d
   1eb8e:	2100      	movs	r1, #0
   1eb90:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1eb92:	687b      	ldr	r3, [r7, #4]
   1eb94:	2200      	movs	r2, #0
   1eb96:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1eb98:	687b      	ldr	r3, [r7, #4]
   1eb9a:	2200      	movs	r2, #0
   1eb9c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1eb9e:	687b      	ldr	r3, [r7, #4]
   1eba0:	2200      	movs	r2, #0
   1eba2:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1eba4:	687b      	ldr	r3, [r7, #4]
   1eba6:	2200      	movs	r2, #0
   1eba8:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1ebaa:	687b      	ldr	r3, [r7, #4]
   1ebac:	2200      	movs	r2, #0
   1ebae:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1ebb0:	687b      	ldr	r3, [r7, #4]
   1ebb2:	2200      	movs	r2, #0
   1ebb4:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1ebb6:	687b      	ldr	r3, [r7, #4]
   1ebb8:	2200      	movs	r2, #0
   1ebba:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1ebbc:	687b      	ldr	r3, [r7, #4]
   1ebbe:	2200      	movs	r2, #0
   1ebc0:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   1ebc2:	687b      	ldr	r3, [r7, #4]
   1ebc4:	2200      	movs	r2, #0
   1ebc6:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   1ebc8:	687b      	ldr	r3, [r7, #4]
   1ebca:	2200      	movs	r2, #0
   1ebcc:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1ebce:	687b      	ldr	r3, [r7, #4]
   1ebd0:	2213      	movs	r2, #19
   1ebd2:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   1ebd4:	687b      	ldr	r3, [r7, #4]
   1ebd6:	2200      	movs	r2, #0
   1ebd8:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1ebda:	46c0      	nop			; (mov r8, r8)
   1ebdc:	46bd      	mov	sp, r7
   1ebde:	b002      	add	sp, #8
   1ebe0:	bd80      	pop	{r7, pc}
	...

0001ebe4 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   1ebe4:	b580      	push	{r7, lr}
   1ebe6:	b084      	sub	sp, #16
   1ebe8:	af00      	add	r7, sp, #0
   1ebea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1ebec:	687b      	ldr	r3, [r7, #4]
   1ebee:	681b      	ldr	r3, [r3, #0]
   1ebf0:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1ebf2:	687b      	ldr	r3, [r7, #4]
   1ebf4:	681b      	ldr	r3, [r3, #0]
   1ebf6:	0018      	movs	r0, r3
   1ebf8:	4b09      	ldr	r3, [pc, #36]	; (1ec20 <usart_enable+0x3c>)
   1ebfa:	4798      	blx	r3
   1ebfc:	0003      	movs	r3, r0
   1ebfe:	0018      	movs	r0, r3
   1ec00:	4b08      	ldr	r3, [pc, #32]	; (1ec24 <usart_enable+0x40>)
   1ec02:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1ec04:	687b      	ldr	r3, [r7, #4]
   1ec06:	0018      	movs	r0, r3
   1ec08:	4b07      	ldr	r3, [pc, #28]	; (1ec28 <usart_enable+0x44>)
   1ec0a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1ec0c:	68fb      	ldr	r3, [r7, #12]
   1ec0e:	681b      	ldr	r3, [r3, #0]
   1ec10:	2202      	movs	r2, #2
   1ec12:	431a      	orrs	r2, r3
   1ec14:	68fb      	ldr	r3, [r7, #12]
   1ec16:	601a      	str	r2, [r3, #0]
}
   1ec18:	46c0      	nop			; (mov r8, r8)
   1ec1a:	46bd      	mov	sp, r7
   1ec1c:	b004      	add	sp, #16
   1ec1e:	bd80      	pop	{r7, pc}
   1ec20:	0002864d 	.word	0x0002864d
   1ec24:	0001eab5 	.word	0x0001eab5
   1ec28:	0001eb01 	.word	0x0001eb01

0001ec2c <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1ec2c:	b580      	push	{r7, lr}
   1ec2e:	b082      	sub	sp, #8
   1ec30:	af00      	add	r7, sp, #0
   1ec32:	6078      	str	r0, [r7, #4]
   1ec34:	000a      	movs	r2, r1
   1ec36:	1cfb      	adds	r3, r7, #3
   1ec38:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1ec3a:	687b      	ldr	r3, [r7, #4]
   1ec3c:	2231      	movs	r2, #49	; 0x31
   1ec3e:	5c9b      	ldrb	r3, [r3, r2]
   1ec40:	b25a      	sxtb	r2, r3
   1ec42:	1cfb      	adds	r3, r7, #3
   1ec44:	781b      	ldrb	r3, [r3, #0]
   1ec46:	2101      	movs	r1, #1
   1ec48:	4099      	lsls	r1, r3
   1ec4a:	000b      	movs	r3, r1
   1ec4c:	b25b      	sxtb	r3, r3
   1ec4e:	4313      	orrs	r3, r2
   1ec50:	b25b      	sxtb	r3, r3
   1ec52:	b2d9      	uxtb	r1, r3
   1ec54:	687b      	ldr	r3, [r7, #4]
   1ec56:	2231      	movs	r2, #49	; 0x31
   1ec58:	5499      	strb	r1, [r3, r2]

}
   1ec5a:	46c0      	nop			; (mov r8, r8)
   1ec5c:	46bd      	mov	sp, r7
   1ec5e:	b002      	add	sp, #8
   1ec60:	bd80      	pop	{r7, pc}
	...

0001ec64 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   1ec64:	b580      	push	{r7, lr}
   1ec66:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1ec68:	2380      	movs	r3, #128	; 0x80
   1ec6a:	009a      	lsls	r2, r3, #2
   1ec6c:	4b0f      	ldr	r3, [pc, #60]	; (1ecac <InitializeSerialConsole+0x48>)
   1ec6e:	0011      	movs	r1, r2
   1ec70:	0018      	movs	r0, r3
   1ec72:	4b0f      	ldr	r3, [pc, #60]	; (1ecb0 <InitializeSerialConsole+0x4c>)
   1ec74:	4798      	blx	r3
   1ec76:	0002      	movs	r2, r0
   1ec78:	4b0e      	ldr	r3, [pc, #56]	; (1ecb4 <InitializeSerialConsole+0x50>)
   1ec7a:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1ec7c:	2380      	movs	r3, #128	; 0x80
   1ec7e:	009a      	lsls	r2, r3, #2
   1ec80:	4b0d      	ldr	r3, [pc, #52]	; (1ecb8 <InitializeSerialConsole+0x54>)
   1ec82:	0011      	movs	r1, r2
   1ec84:	0018      	movs	r0, r3
   1ec86:	4b0a      	ldr	r3, [pc, #40]	; (1ecb0 <InitializeSerialConsole+0x4c>)
   1ec88:	4798      	blx	r3
   1ec8a:	0002      	movs	r2, r0
   1ec8c:	4b0b      	ldr	r3, [pc, #44]	; (1ecbc <InitializeSerialConsole+0x58>)
   1ec8e:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1ec90:	4b0b      	ldr	r3, [pc, #44]	; (1ecc0 <InitializeSerialConsole+0x5c>)
   1ec92:	4798      	blx	r3
    configure_usart_callbacks();
   1ec94:	4b0b      	ldr	r3, [pc, #44]	; (1ecc4 <InitializeSerialConsole+0x60>)
   1ec96:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1ec98:	490b      	ldr	r1, [pc, #44]	; (1ecc8 <InitializeSerialConsole+0x64>)
   1ec9a:	4b0c      	ldr	r3, [pc, #48]	; (1eccc <InitializeSerialConsole+0x68>)
   1ec9c:	2201      	movs	r2, #1
   1ec9e:	0018      	movs	r0, r3
   1eca0:	4b0b      	ldr	r3, [pc, #44]	; (1ecd0 <InitializeSerialConsole+0x6c>)
   1eca2:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1eca4:	46c0      	nop			; (mov r8, r8)
   1eca6:	46bd      	mov	sp, r7
   1eca8:	bd80      	pop	{r7, pc}
   1ecaa:	46c0      	nop			; (mov r8, r8)
   1ecac:	20005920 	.word	0x20005920
   1ecb0:	0001e995 	.word	0x0001e995
   1ecb4:	20005718 	.word	0x20005718
   1ecb8:	20005720 	.word	0x20005720
   1ecbc:	20005b24 	.word	0x20005b24
   1ecc0:	0001ee39 	.word	0x0001ee39
   1ecc4:	0001eeb1 	.word	0x0001eeb1
   1ecc8:	2000571c 	.word	0x2000571c
   1eccc:	200056e4 	.word	0x200056e4
   1ecd0:	00029ef5 	.word	0x00029ef5

0001ecd4 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   1ecd4:	b580      	push	{r7, lr}
   1ecd6:	b084      	sub	sp, #16
   1ecd8:	af00      	add	r7, sp, #0
   1ecda:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1ecdc:	4b1a      	ldr	r3, [pc, #104]	; (1ed48 <SerialConsoleWriteString+0x74>)
   1ecde:	4798      	blx	r3
    if (string != NULL) {
   1ece0:	687b      	ldr	r3, [r7, #4]
   1ece2:	2b00      	cmp	r3, #0
   1ece4:	d02a      	beq.n	1ed3c <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1ece6:	2300      	movs	r3, #0
   1ece8:	60fb      	str	r3, [r7, #12]
   1ecea:	e00b      	b.n	1ed04 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1ecec:	4b17      	ldr	r3, [pc, #92]	; (1ed4c <SerialConsoleWriteString+0x78>)
   1ecee:	6818      	ldr	r0, [r3, #0]
   1ecf0:	687a      	ldr	r2, [r7, #4]
   1ecf2:	68fb      	ldr	r3, [r7, #12]
   1ecf4:	18d3      	adds	r3, r2, r3
   1ecf6:	781b      	ldrb	r3, [r3, #0]
   1ecf8:	0019      	movs	r1, r3
   1ecfa:	4b15      	ldr	r3, [pc, #84]	; (1ed50 <SerialConsoleWriteString+0x7c>)
   1ecfc:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1ecfe:	68fb      	ldr	r3, [r7, #12]
   1ed00:	3301      	adds	r3, #1
   1ed02:	60fb      	str	r3, [r7, #12]
   1ed04:	687b      	ldr	r3, [r7, #4]
   1ed06:	0018      	movs	r0, r3
   1ed08:	4b12      	ldr	r3, [pc, #72]	; (1ed54 <SerialConsoleWriteString+0x80>)
   1ed0a:	4798      	blx	r3
   1ed0c:	0002      	movs	r2, r0
   1ed0e:	68fb      	ldr	r3, [r7, #12]
   1ed10:	429a      	cmp	r2, r3
   1ed12:	d8eb      	bhi.n	1ecec <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1ed14:	4b10      	ldr	r3, [pc, #64]	; (1ed58 <SerialConsoleWriteString+0x84>)
   1ed16:	2101      	movs	r1, #1
   1ed18:	0018      	movs	r0, r3
   1ed1a:	4b10      	ldr	r3, [pc, #64]	; (1ed5c <SerialConsoleWriteString+0x88>)
   1ed1c:	4798      	blx	r3
   1ed1e:	1e03      	subs	r3, r0, #0
   1ed20:	d10c      	bne.n	1ed3c <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   1ed22:	4b0a      	ldr	r3, [pc, #40]	; (1ed4c <SerialConsoleWriteString+0x78>)
   1ed24:	681b      	ldr	r3, [r3, #0]
   1ed26:	4a0e      	ldr	r2, [pc, #56]	; (1ed60 <SerialConsoleWriteString+0x8c>)
   1ed28:	0011      	movs	r1, r2
   1ed2a:	0018      	movs	r0, r3
   1ed2c:	4b0d      	ldr	r3, [pc, #52]	; (1ed64 <SerialConsoleWriteString+0x90>)
   1ed2e:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1ed30:	490b      	ldr	r1, [pc, #44]	; (1ed60 <SerialConsoleWriteString+0x8c>)
   1ed32:	4b09      	ldr	r3, [pc, #36]	; (1ed58 <SerialConsoleWriteString+0x84>)
   1ed34:	2201      	movs	r2, #1
   1ed36:	0018      	movs	r0, r3
   1ed38:	4b0b      	ldr	r3, [pc, #44]	; (1ed68 <SerialConsoleWriteString+0x94>)
   1ed3a:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1ed3c:	4b0b      	ldr	r3, [pc, #44]	; (1ed6c <SerialConsoleWriteString+0x98>)
   1ed3e:	4798      	blx	r3
}
   1ed40:	46c0      	nop			; (mov r8, r8)
   1ed42:	46bd      	mov	sp, r7
   1ed44:	b004      	add	sp, #16
   1ed46:	bd80      	pop	{r7, pc}
   1ed48:	0001d341 	.word	0x0001d341
   1ed4c:	20005b24 	.word	0x20005b24
   1ed50:	0001e9f5 	.word	0x0001e9f5
   1ed54:	000367f7 	.word	0x000367f7
   1ed58:	200056e4 	.word	0x200056e4
   1ed5c:	00029f3d 	.word	0x00029f3d
   1ed60:	20005b20 	.word	0x20005b20
   1ed64:	0001ea29 	.word	0x0001ea29
   1ed68:	00029ead 	.word	0x00029ead
   1ed6c:	0001d359 	.word	0x0001d359

0001ed70 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1ed70:	b580      	push	{r7, lr}
   1ed72:	b084      	sub	sp, #16
   1ed74:	af00      	add	r7, sp, #0
   1ed76:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1ed78:	4b08      	ldr	r3, [pc, #32]	; (1ed9c <SerialConsoleReadCharacter+0x2c>)
   1ed7a:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   1ed7c:	4b08      	ldr	r3, [pc, #32]	; (1eda0 <SerialConsoleReadCharacter+0x30>)
   1ed7e:	681b      	ldr	r3, [r3, #0]
   1ed80:	687a      	ldr	r2, [r7, #4]
   1ed82:	0011      	movs	r1, r2
   1ed84:	0018      	movs	r0, r3
   1ed86:	4b07      	ldr	r3, [pc, #28]	; (1eda4 <SerialConsoleReadCharacter+0x34>)
   1ed88:	4798      	blx	r3
   1ed8a:	0003      	movs	r3, r0
   1ed8c:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1ed8e:	4b06      	ldr	r3, [pc, #24]	; (1eda8 <SerialConsoleReadCharacter+0x38>)
   1ed90:	4798      	blx	r3
    return a;
   1ed92:	68fb      	ldr	r3, [r7, #12]
}
   1ed94:	0018      	movs	r0, r3
   1ed96:	46bd      	mov	sp, r7
   1ed98:	b004      	add	sp, #16
   1ed9a:	bd80      	pop	{r7, pc}
   1ed9c:	0001d341 	.word	0x0001d341
   1eda0:	20005718 	.word	0x20005718
   1eda4:	0001ea29 	.word	0x0001ea29
   1eda8:	0001d359 	.word	0x0001d359

0001edac <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   1edac:	b580      	push	{r7, lr}
   1edae:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   1edb0:	4b02      	ldr	r3, [pc, #8]	; (1edbc <getLogLevel+0x10>)
   1edb2:	781b      	ldrb	r3, [r3, #0]
}
   1edb4:	0018      	movs	r0, r3
   1edb6:	46bd      	mov	sp, r7
   1edb8:	bd80      	pop	{r7, pc}
   1edba:	46c0      	nop			; (mov r8, r8)
   1edbc:	20004220 	.word	0x20004220

0001edc0 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1edc0:	b40e      	push	{r1, r2, r3}
   1edc2:	b590      	push	{r4, r7, lr}
   1edc4:	b084      	sub	sp, #16
   1edc6:	af00      	add	r7, sp, #0
   1edc8:	0002      	movs	r2, r0
   1edca:	1dfb      	adds	r3, r7, #7
   1edcc:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   1edce:	4b0e      	ldr	r3, [pc, #56]	; (1ee08 <LogMessage+0x48>)
   1edd0:	4798      	blx	r3
   1edd2:	0003      	movs	r3, r0
   1edd4:	001a      	movs	r2, r3
   1edd6:	1dfb      	adds	r3, r7, #7
   1edd8:	781b      	ldrb	r3, [r3, #0]
   1edda:	4293      	cmp	r3, r2
   1eddc:	d30c      	bcc.n	1edf8 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   1edde:	2320      	movs	r3, #32
   1ede0:	18fb      	adds	r3, r7, r3
   1ede2:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   1ede4:	68fb      	ldr	r3, [r7, #12]
   1ede6:	69fa      	ldr	r2, [r7, #28]
   1ede8:	4808      	ldr	r0, [pc, #32]	; (1ee0c <LogMessage+0x4c>)
   1edea:	217f      	movs	r1, #127	; 0x7f
   1edec:	4c08      	ldr	r4, [pc, #32]	; (1ee10 <LogMessage+0x50>)
   1edee:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   1edf0:	4b06      	ldr	r3, [pc, #24]	; (1ee0c <LogMessage+0x4c>)
   1edf2:	0018      	movs	r0, r3
   1edf4:	4b07      	ldr	r3, [pc, #28]	; (1ee14 <LogMessage+0x54>)
   1edf6:	4798      	blx	r3
        va_end(ap);
    }
};
   1edf8:	46c0      	nop			; (mov r8, r8)
   1edfa:	46bd      	mov	sp, r7
   1edfc:	b004      	add	sp, #16
   1edfe:	bc90      	pop	{r4, r7}
   1ee00:	bc08      	pop	{r3}
   1ee02:	b003      	add	sp, #12
   1ee04:	4718      	bx	r3
   1ee06:	46c0      	nop			; (mov r8, r8)
   1ee08:	0001edad 	.word	0x0001edad
   1ee0c:	20005664 	.word	0x20005664
   1ee10:	00036a31 	.word	0x00036a31
   1ee14:	0001ecd5 	.word	0x0001ecd5

0001ee18 <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   1ee18:	b40f      	push	{r0, r1, r2, r3}
   1ee1a:	b580      	push	{r7, lr}
   1ee1c:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   1ee1e:	68bb      	ldr	r3, [r7, #8]
   1ee20:	0019      	movs	r1, r3
   1ee22:	2001      	movs	r0, #1
   1ee24:	4b03      	ldr	r3, [pc, #12]	; (1ee34 <LogMessageDebug+0x1c>)
   1ee26:	4798      	blx	r3
};
   1ee28:	46c0      	nop			; (mov r8, r8)
   1ee2a:	46bd      	mov	sp, r7
   1ee2c:	bc80      	pop	{r7}
   1ee2e:	bc08      	pop	{r3}
   1ee30:	b004      	add	sp, #16
   1ee32:	4718      	bx	r3
   1ee34:	0001edc1 	.word	0x0001edc1

0001ee38 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   1ee38:	b580      	push	{r7, lr}
   1ee3a:	b090      	sub	sp, #64	; 0x40
   1ee3c:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1ee3e:	003b      	movs	r3, r7
   1ee40:	0018      	movs	r0, r3
   1ee42:	4b14      	ldr	r3, [pc, #80]	; (1ee94 <configure_usart+0x5c>)
   1ee44:	4798      	blx	r3

    config_usart.baudrate = 115200;
   1ee46:	003b      	movs	r3, r7
   1ee48:	22e1      	movs	r2, #225	; 0xe1
   1ee4a:	0252      	lsls	r2, r2, #9
   1ee4c:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1ee4e:	003b      	movs	r3, r7
   1ee50:	22c4      	movs	r2, #196	; 0xc4
   1ee52:	0392      	lsls	r2, r2, #14
   1ee54:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1ee56:	003b      	movs	r3, r7
   1ee58:	2201      	movs	r2, #1
   1ee5a:	4252      	negs	r2, r2
   1ee5c:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1ee5e:	003b      	movs	r3, r7
   1ee60:	2201      	movs	r2, #1
   1ee62:	4252      	negs	r2, r2
   1ee64:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1ee66:	003b      	movs	r3, r7
   1ee68:	4a0b      	ldr	r2, [pc, #44]	; (1ee98 <configure_usart+0x60>)
   1ee6a:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1ee6c:	003b      	movs	r3, r7
   1ee6e:	4a0b      	ldr	r2, [pc, #44]	; (1ee9c <configure_usart+0x64>)
   1ee70:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   1ee72:	46c0      	nop			; (mov r8, r8)
   1ee74:	003a      	movs	r2, r7
   1ee76:	490a      	ldr	r1, [pc, #40]	; (1eea0 <configure_usart+0x68>)
   1ee78:	4b0a      	ldr	r3, [pc, #40]	; (1eea4 <configure_usart+0x6c>)
   1ee7a:	0018      	movs	r0, r3
   1ee7c:	4b0a      	ldr	r3, [pc, #40]	; (1eea8 <configure_usart+0x70>)
   1ee7e:	4798      	blx	r3
   1ee80:	1e03      	subs	r3, r0, #0
   1ee82:	d1f7      	bne.n	1ee74 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   1ee84:	4b07      	ldr	r3, [pc, #28]	; (1eea4 <configure_usart+0x6c>)
   1ee86:	0018      	movs	r0, r3
   1ee88:	4b08      	ldr	r3, [pc, #32]	; (1eeac <configure_usart+0x74>)
   1ee8a:	4798      	blx	r3
}
   1ee8c:	46c0      	nop			; (mov r8, r8)
   1ee8e:	46bd      	mov	sp, r7
   1ee90:	b010      	add	sp, #64	; 0x40
   1ee92:	bd80      	pop	{r7, pc}
   1ee94:	0001eb25 	.word	0x0001eb25
   1ee98:	002a0003 	.word	0x002a0003
   1ee9c:	002b0003 	.word	0x002b0003
   1eea0:	42001800 	.word	0x42001800
   1eea4:	200056e4 	.word	0x200056e4
   1eea8:	00029ab1 	.word	0x00029ab1
   1eeac:	0001ebe5 	.word	0x0001ebe5

0001eeb0 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   1eeb0:	b580      	push	{r7, lr}
   1eeb2:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1eeb4:	490c      	ldr	r1, [pc, #48]	; (1eee8 <configure_usart_callbacks+0x38>)
   1eeb6:	4b0d      	ldr	r3, [pc, #52]	; (1eeec <configure_usart_callbacks+0x3c>)
   1eeb8:	2200      	movs	r2, #0
   1eeba:	0018      	movs	r0, r3
   1eebc:	4b0c      	ldr	r3, [pc, #48]	; (1eef0 <configure_usart_callbacks+0x40>)
   1eebe:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1eec0:	490c      	ldr	r1, [pc, #48]	; (1eef4 <configure_usart_callbacks+0x44>)
   1eec2:	4b0a      	ldr	r3, [pc, #40]	; (1eeec <configure_usart_callbacks+0x3c>)
   1eec4:	2201      	movs	r2, #1
   1eec6:	0018      	movs	r0, r3
   1eec8:	4b09      	ldr	r3, [pc, #36]	; (1eef0 <configure_usart_callbacks+0x40>)
   1eeca:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1eecc:	4b07      	ldr	r3, [pc, #28]	; (1eeec <configure_usart_callbacks+0x3c>)
   1eece:	2100      	movs	r1, #0
   1eed0:	0018      	movs	r0, r3
   1eed2:	4b09      	ldr	r3, [pc, #36]	; (1eef8 <configure_usart_callbacks+0x48>)
   1eed4:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1eed6:	4b05      	ldr	r3, [pc, #20]	; (1eeec <configure_usart_callbacks+0x3c>)
   1eed8:	2101      	movs	r1, #1
   1eeda:	0018      	movs	r0, r3
   1eedc:	4b06      	ldr	r3, [pc, #24]	; (1eef8 <configure_usart_callbacks+0x48>)
   1eede:	4798      	blx	r3
}
   1eee0:	46c0      	nop			; (mov r8, r8)
   1eee2:	46bd      	mov	sp, r7
   1eee4:	bd80      	pop	{r7, pc}
   1eee6:	46c0      	nop			; (mov r8, r8)
   1eee8:	0001ef45 	.word	0x0001ef45
   1eeec:	200056e4 	.word	0x200056e4
   1eef0:	00029e65 	.word	0x00029e65
   1eef4:	0001eefd 	.word	0x0001eefd
   1eef8:	0001ec2d 	.word	0x0001ec2d

0001eefc <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   1eefc:	b580      	push	{r7, lr}
   1eefe:	b082      	sub	sp, #8
   1ef00:	af00      	add	r7, sp, #0
   1ef02:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   1ef04:	4b09      	ldr	r3, [pc, #36]	; (1ef2c <usart_read_callback+0x30>)
   1ef06:	681a      	ldr	r2, [r3, #0]
   1ef08:	4b09      	ldr	r3, [pc, #36]	; (1ef30 <usart_read_callback+0x34>)
   1ef0a:	781b      	ldrb	r3, [r3, #0]
   1ef0c:	0019      	movs	r1, r3
   1ef0e:	0010      	movs	r0, r2
   1ef10:	4b08      	ldr	r3, [pc, #32]	; (1ef34 <usart_read_callback+0x38>)
   1ef12:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   1ef14:	4906      	ldr	r1, [pc, #24]	; (1ef30 <usart_read_callback+0x34>)
   1ef16:	4b08      	ldr	r3, [pc, #32]	; (1ef38 <usart_read_callback+0x3c>)
   1ef18:	2201      	movs	r2, #1
   1ef1a:	0018      	movs	r0, r3
   1ef1c:	4b07      	ldr	r3, [pc, #28]	; (1ef3c <usart_read_callback+0x40>)
   1ef1e:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   1ef20:	4b07      	ldr	r3, [pc, #28]	; (1ef40 <usart_read_callback+0x44>)
   1ef22:	4798      	blx	r3
}
   1ef24:	46c0      	nop			; (mov r8, r8)
   1ef26:	46bd      	mov	sp, r7
   1ef28:	b002      	add	sp, #8
   1ef2a:	bd80      	pop	{r7, pc}
   1ef2c:	20005718 	.word	0x20005718
   1ef30:	2000571c 	.word	0x2000571c
   1ef34:	0001e9f5 	.word	0x0001e9f5
   1ef38:	200056e4 	.word	0x200056e4
   1ef3c:	00029ef5 	.word	0x00029ef5
   1ef40:	00013ba1 	.word	0x00013ba1

0001ef44 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   1ef44:	b580      	push	{r7, lr}
   1ef46:	b082      	sub	sp, #8
   1ef48:	af00      	add	r7, sp, #0
   1ef4a:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   1ef4c:	4b09      	ldr	r3, [pc, #36]	; (1ef74 <usart_write_callback+0x30>)
   1ef4e:	681b      	ldr	r3, [r3, #0]
   1ef50:	4a09      	ldr	r2, [pc, #36]	; (1ef78 <usart_write_callback+0x34>)
   1ef52:	0011      	movs	r1, r2
   1ef54:	0018      	movs	r0, r3
   1ef56:	4b09      	ldr	r3, [pc, #36]	; (1ef7c <usart_write_callback+0x38>)
   1ef58:	4798      	blx	r3
   1ef5a:	0003      	movs	r3, r0
   1ef5c:	3301      	adds	r3, #1
   1ef5e:	d005      	beq.n	1ef6c <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1ef60:	4905      	ldr	r1, [pc, #20]	; (1ef78 <usart_write_callback+0x34>)
   1ef62:	4b07      	ldr	r3, [pc, #28]	; (1ef80 <usart_write_callback+0x3c>)
   1ef64:	2201      	movs	r2, #1
   1ef66:	0018      	movs	r0, r3
   1ef68:	4b06      	ldr	r3, [pc, #24]	; (1ef84 <usart_write_callback+0x40>)
   1ef6a:	4798      	blx	r3
    }
}
   1ef6c:	46c0      	nop			; (mov r8, r8)
   1ef6e:	46bd      	mov	sp, r7
   1ef70:	b002      	add	sp, #8
   1ef72:	bd80      	pop	{r7, pc}
   1ef74:	20005b24 	.word	0x20005b24
   1ef78:	20005b20 	.word	0x20005b20
   1ef7c:	0001ea29 	.word	0x0001ea29
   1ef80:	200056e4 	.word	0x200056e4
   1ef84:	00029ead 	.word	0x00029ead

0001ef88 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1ef88:	b590      	push	{r4, r7, lr}
   1ef8a:	b087      	sub	sp, #28
   1ef8c:	af00      	add	r7, sp, #0
   1ef8e:	60f8      	str	r0, [r7, #12]
   1ef90:	000c      	movs	r4, r1
   1ef92:	0010      	movs	r0, r2
   1ef94:	0019      	movs	r1, r3
   1ef96:	230a      	movs	r3, #10
   1ef98:	18fb      	adds	r3, r7, r3
   1ef9a:	1c22      	adds	r2, r4, #0
   1ef9c:	801a      	strh	r2, [r3, #0]
   1ef9e:	2308      	movs	r3, #8
   1efa0:	18fb      	adds	r3, r7, r3
   1efa2:	1c02      	adds	r2, r0, #0
   1efa4:	801a      	strh	r2, [r3, #0]
   1efa6:	1dfb      	adds	r3, r7, #7
   1efa8:	1c0a      	adds	r2, r1, #0
   1efaa:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1efac:	230a      	movs	r3, #10
   1efae:	18fb      	adds	r3, r7, r3
   1efb0:	881a      	ldrh	r2, [r3, #0]
   1efb2:	2308      	movs	r3, #8
   1efb4:	18fb      	adds	r3, r7, r3
   1efb6:	881b      	ldrh	r3, [r3, #0]
   1efb8:	1ad3      	subs	r3, r2, r3
   1efba:	3307      	adds	r3, #7
   1efbc:	2b00      	cmp	r3, #0
   1efbe:	da00      	bge.n	1efc2 <SDMMC_UNSTUFF_BITS+0x3a>
   1efc0:	3307      	adds	r3, #7
   1efc2:	10db      	asrs	r3, r3, #3
   1efc4:	3b01      	subs	r3, #1
   1efc6:	68fa      	ldr	r2, [r7, #12]
   1efc8:	18d3      	adds	r3, r2, r3
   1efca:	781b      	ldrb	r3, [r3, #0]
   1efcc:	0019      	movs	r1, r3
   1efce:	2308      	movs	r3, #8
   1efd0:	18fb      	adds	r3, r7, r3
   1efd2:	881b      	ldrh	r3, [r3, #0]
   1efd4:	2207      	movs	r2, #7
   1efd6:	4013      	ands	r3, r2
   1efd8:	4119      	asrs	r1, r3
   1efda:	000b      	movs	r3, r1
   1efdc:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1efde:	2308      	movs	r3, #8
   1efe0:	18fb      	adds	r3, r7, r3
   1efe2:	881b      	ldrh	r3, [r3, #0]
   1efe4:	2207      	movs	r2, #7
   1efe6:	401a      	ands	r2, r3
   1efe8:	1dfb      	adds	r3, r7, #7
   1efea:	781b      	ldrb	r3, [r3, #0]
   1efec:	18d3      	adds	r3, r2, r3
   1efee:	2b08      	cmp	r3, #8
   1eff0:	dd1c      	ble.n	1f02c <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1eff2:	230a      	movs	r3, #10
   1eff4:	18fb      	adds	r3, r7, r3
   1eff6:	881a      	ldrh	r2, [r3, #0]
   1eff8:	2308      	movs	r3, #8
   1effa:	18fb      	adds	r3, r7, r3
   1effc:	881b      	ldrh	r3, [r3, #0]
   1effe:	1ad3      	subs	r3, r2, r3
   1f000:	3307      	adds	r3, #7
   1f002:	2b00      	cmp	r3, #0
   1f004:	da00      	bge.n	1f008 <SDMMC_UNSTUFF_BITS+0x80>
   1f006:	3307      	adds	r3, #7
   1f008:	10db      	asrs	r3, r3, #3
   1f00a:	3b02      	subs	r3, #2
   1f00c:	68fa      	ldr	r2, [r7, #12]
   1f00e:	18d3      	adds	r3, r2, r3
   1f010:	781b      	ldrb	r3, [r3, #0]
   1f012:	0019      	movs	r1, r3
   1f014:	2308      	movs	r3, #8
   1f016:	18fb      	adds	r3, r7, r3
   1f018:	881b      	ldrh	r3, [r3, #0]
   1f01a:	2207      	movs	r2, #7
   1f01c:	4013      	ands	r3, r2
   1f01e:	2208      	movs	r2, #8
   1f020:	1ad3      	subs	r3, r2, r3
   1f022:	4099      	lsls	r1, r3
   1f024:	000b      	movs	r3, r1
   1f026:	697a      	ldr	r2, [r7, #20]
   1f028:	4313      	orrs	r3, r2
   1f02a:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1f02c:	2308      	movs	r3, #8
   1f02e:	18fb      	adds	r3, r7, r3
   1f030:	881b      	ldrh	r3, [r3, #0]
   1f032:	2207      	movs	r2, #7
   1f034:	401a      	ands	r2, r3
   1f036:	1dfb      	adds	r3, r7, #7
   1f038:	781b      	ldrb	r3, [r3, #0]
   1f03a:	18d3      	adds	r3, r2, r3
   1f03c:	2b10      	cmp	r3, #16
   1f03e:	dd1c      	ble.n	1f07a <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1f040:	230a      	movs	r3, #10
   1f042:	18fb      	adds	r3, r7, r3
   1f044:	881a      	ldrh	r2, [r3, #0]
   1f046:	2308      	movs	r3, #8
   1f048:	18fb      	adds	r3, r7, r3
   1f04a:	881b      	ldrh	r3, [r3, #0]
   1f04c:	1ad3      	subs	r3, r2, r3
   1f04e:	3307      	adds	r3, #7
   1f050:	2b00      	cmp	r3, #0
   1f052:	da00      	bge.n	1f056 <SDMMC_UNSTUFF_BITS+0xce>
   1f054:	3307      	adds	r3, #7
   1f056:	10db      	asrs	r3, r3, #3
   1f058:	3b03      	subs	r3, #3
   1f05a:	68fa      	ldr	r2, [r7, #12]
   1f05c:	18d3      	adds	r3, r2, r3
   1f05e:	781b      	ldrb	r3, [r3, #0]
   1f060:	0019      	movs	r1, r3
   1f062:	2308      	movs	r3, #8
   1f064:	18fb      	adds	r3, r7, r3
   1f066:	881b      	ldrh	r3, [r3, #0]
   1f068:	2207      	movs	r2, #7
   1f06a:	4013      	ands	r3, r2
   1f06c:	2210      	movs	r2, #16
   1f06e:	1ad3      	subs	r3, r2, r3
   1f070:	4099      	lsls	r1, r3
   1f072:	000b      	movs	r3, r1
   1f074:	697a      	ldr	r2, [r7, #20]
   1f076:	4313      	orrs	r3, r2
   1f078:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1f07a:	2308      	movs	r3, #8
   1f07c:	18fb      	adds	r3, r7, r3
   1f07e:	881b      	ldrh	r3, [r3, #0]
   1f080:	2207      	movs	r2, #7
   1f082:	401a      	ands	r2, r3
   1f084:	1dfb      	adds	r3, r7, #7
   1f086:	781b      	ldrb	r3, [r3, #0]
   1f088:	18d3      	adds	r3, r2, r3
   1f08a:	2b10      	cmp	r3, #16
   1f08c:	dd1c      	ble.n	1f0c8 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1f08e:	230a      	movs	r3, #10
   1f090:	18fb      	adds	r3, r7, r3
   1f092:	881a      	ldrh	r2, [r3, #0]
   1f094:	2308      	movs	r3, #8
   1f096:	18fb      	adds	r3, r7, r3
   1f098:	881b      	ldrh	r3, [r3, #0]
   1f09a:	1ad3      	subs	r3, r2, r3
   1f09c:	3307      	adds	r3, #7
   1f09e:	2b00      	cmp	r3, #0
   1f0a0:	da00      	bge.n	1f0a4 <SDMMC_UNSTUFF_BITS+0x11c>
   1f0a2:	3307      	adds	r3, #7
   1f0a4:	10db      	asrs	r3, r3, #3
   1f0a6:	3b03      	subs	r3, #3
   1f0a8:	68fa      	ldr	r2, [r7, #12]
   1f0aa:	18d3      	adds	r3, r2, r3
   1f0ac:	781b      	ldrb	r3, [r3, #0]
   1f0ae:	0019      	movs	r1, r3
   1f0b0:	2308      	movs	r3, #8
   1f0b2:	18fb      	adds	r3, r7, r3
   1f0b4:	881b      	ldrh	r3, [r3, #0]
   1f0b6:	2207      	movs	r2, #7
   1f0b8:	4013      	ands	r3, r2
   1f0ba:	2210      	movs	r2, #16
   1f0bc:	1ad3      	subs	r3, r2, r3
   1f0be:	4099      	lsls	r1, r3
   1f0c0:	000b      	movs	r3, r1
   1f0c2:	697a      	ldr	r2, [r7, #20]
   1f0c4:	4313      	orrs	r3, r2
   1f0c6:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1f0c8:	1dfb      	adds	r3, r7, #7
   1f0ca:	781b      	ldrb	r3, [r3, #0]
   1f0cc:	2201      	movs	r2, #1
   1f0ce:	409a      	lsls	r2, r3
   1f0d0:	0013      	movs	r3, r2
   1f0d2:	1e5a      	subs	r2, r3, #1
   1f0d4:	697b      	ldr	r3, [r7, #20]
   1f0d6:	4013      	ands	r3, r2
   1f0d8:	617b      	str	r3, [r7, #20]
	return value;
   1f0da:	697b      	ldr	r3, [r7, #20]
}
   1f0dc:	0018      	movs	r0, r3
   1f0de:	46bd      	mov	sp, r7
   1f0e0:	b007      	add	sp, #28
   1f0e2:	bd90      	pop	{r4, r7, pc}

0001f0e4 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1f0e4:	b580      	push	{r7, lr}
   1f0e6:	b082      	sub	sp, #8
   1f0e8:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1f0ea:	4b23      	ldr	r3, [pc, #140]	; (1f178 <mmc_spi_op_cond+0x94>)
   1f0ec:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1f0ee:	4b23      	ldr	r3, [pc, #140]	; (1f17c <mmc_spi_op_cond+0x98>)
   1f0f0:	2100      	movs	r1, #0
   1f0f2:	0018      	movs	r0, r3
   1f0f4:	4b22      	ldr	r3, [pc, #136]	; (1f180 <mmc_spi_op_cond+0x9c>)
   1f0f6:	4798      	blx	r3
   1f0f8:	0003      	movs	r3, r0
   1f0fa:	001a      	movs	r2, r3
   1f0fc:	2301      	movs	r3, #1
   1f0fe:	4053      	eors	r3, r2
   1f100:	b2db      	uxtb	r3, r3
   1f102:	2b00      	cmp	r3, #0
   1f104:	d001      	beq.n	1f10a <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1f106:	2300      	movs	r3, #0
   1f108:	e031      	b.n	1f16e <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1f10a:	4b1e      	ldr	r3, [pc, #120]	; (1f184 <mmc_spi_op_cond+0xa0>)
   1f10c:	4798      	blx	r3
   1f10e:	0003      	movs	r3, r0
   1f110:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1f112:	683b      	ldr	r3, [r7, #0]
   1f114:	2201      	movs	r2, #1
   1f116:	4013      	ands	r3, r2
   1f118:	d006      	beq.n	1f128 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1f11a:	687b      	ldr	r3, [r7, #4]
   1f11c:	1e5a      	subs	r2, r3, #1
   1f11e:	607a      	str	r2, [r7, #4]
   1f120:	2b00      	cmp	r3, #0
   1f122:	d1e4      	bne.n	1f0ee <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1f124:	2300      	movs	r3, #0
   1f126:	e022      	b.n	1f16e <mmc_spi_op_cond+0x8a>
			break;
   1f128:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1f12a:	4b17      	ldr	r3, [pc, #92]	; (1f188 <mmc_spi_op_cond+0xa4>)
   1f12c:	2100      	movs	r1, #0
   1f12e:	0018      	movs	r0, r3
   1f130:	4b13      	ldr	r3, [pc, #76]	; (1f180 <mmc_spi_op_cond+0x9c>)
   1f132:	4798      	blx	r3
   1f134:	0003      	movs	r3, r0
   1f136:	001a      	movs	r2, r3
   1f138:	2301      	movs	r3, #1
   1f13a:	4053      	eors	r3, r2
   1f13c:	b2db      	uxtb	r3, r3
   1f13e:	2b00      	cmp	r3, #0
   1f140:	d001      	beq.n	1f146 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1f142:	2300      	movs	r3, #0
   1f144:	e013      	b.n	1f16e <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1f146:	4b0f      	ldr	r3, [pc, #60]	; (1f184 <mmc_spi_op_cond+0xa0>)
   1f148:	4798      	blx	r3
   1f14a:	0002      	movs	r2, r0
   1f14c:	23c0      	movs	r3, #192	; 0xc0
   1f14e:	05db      	lsls	r3, r3, #23
   1f150:	401a      	ands	r2, r3
   1f152:	2380      	movs	r3, #128	; 0x80
   1f154:	05db      	lsls	r3, r3, #23
   1f156:	429a      	cmp	r2, r3
   1f158:	d108      	bne.n	1f16c <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1f15a:	4b0c      	ldr	r3, [pc, #48]	; (1f18c <mmc_spi_op_cond+0xa8>)
   1f15c:	681a      	ldr	r2, [r3, #0]
   1f15e:	4b0b      	ldr	r3, [pc, #44]	; (1f18c <mmc_spi_op_cond+0xa8>)
   1f160:	681b      	ldr	r3, [r3, #0]
   1f162:	7adb      	ldrb	r3, [r3, #11]
   1f164:	2108      	movs	r1, #8
   1f166:	430b      	orrs	r3, r1
   1f168:	b2db      	uxtb	r3, r3
   1f16a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1f16c:	2301      	movs	r3, #1
}
   1f16e:	0018      	movs	r0, r3
   1f170:	46bd      	mov	sp, r7
   1f172:	b002      	add	sp, #8
   1f174:	bd80      	pop	{r7, pc}
   1f176:	46c0      	nop			; (mov r8, r8)
   1f178:	00001bee 	.word	0x00001bee
   1f17c:	00001101 	.word	0x00001101
   1f180:	00020b61 	.word	0x00020b61
   1f184:	00020da1 	.word	0x00020da1
   1f188:	0000053a 	.word	0x0000053a
   1f18c:	20004248 	.word	0x20004248

0001f190 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1f190:	b580      	push	{r7, lr}
   1f192:	b086      	sub	sp, #24
   1f194:	af00      	add	r7, sp, #0
   1f196:	0002      	movs	r2, r0
   1f198:	1dfb      	adds	r3, r7, #7
   1f19a:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1f19c:	4b2e      	ldr	r3, [pc, #184]	; (1f258 <sd_spi_op_cond+0xc8>)
   1f19e:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1f1a0:	4b2e      	ldr	r3, [pc, #184]	; (1f25c <sd_spi_op_cond+0xcc>)
   1f1a2:	2100      	movs	r1, #0
   1f1a4:	0018      	movs	r0, r3
   1f1a6:	4b2e      	ldr	r3, [pc, #184]	; (1f260 <sd_spi_op_cond+0xd0>)
   1f1a8:	4798      	blx	r3
   1f1aa:	0003      	movs	r3, r0
   1f1ac:	001a      	movs	r2, r3
   1f1ae:	2301      	movs	r3, #1
   1f1b0:	4053      	eors	r3, r2
   1f1b2:	b2db      	uxtb	r3, r3
   1f1b4:	2b00      	cmp	r3, #0
   1f1b6:	d001      	beq.n	1f1bc <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1f1b8:	2300      	movs	r3, #0
   1f1ba:	e048      	b.n	1f24e <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1f1bc:	2300      	movs	r3, #0
   1f1be:	617b      	str	r3, [r7, #20]
		if (v2) {
   1f1c0:	1dfb      	adds	r3, r7, #7
   1f1c2:	781b      	ldrb	r3, [r3, #0]
   1f1c4:	2b00      	cmp	r3, #0
   1f1c6:	d004      	beq.n	1f1d2 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1f1c8:	697b      	ldr	r3, [r7, #20]
   1f1ca:	2280      	movs	r2, #128	; 0x80
   1f1cc:	05d2      	lsls	r2, r2, #23
   1f1ce:	4313      	orrs	r3, r2
   1f1d0:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1f1d2:	697b      	ldr	r3, [r7, #20]
   1f1d4:	4a23      	ldr	r2, [pc, #140]	; (1f264 <sd_spi_op_cond+0xd4>)
   1f1d6:	0019      	movs	r1, r3
   1f1d8:	0010      	movs	r0, r2
   1f1da:	4b21      	ldr	r3, [pc, #132]	; (1f260 <sd_spi_op_cond+0xd0>)
   1f1dc:	4798      	blx	r3
   1f1de:	0003      	movs	r3, r0
   1f1e0:	001a      	movs	r2, r3
   1f1e2:	2301      	movs	r3, #1
   1f1e4:	4053      	eors	r3, r2
   1f1e6:	b2db      	uxtb	r3, r3
   1f1e8:	2b00      	cmp	r3, #0
   1f1ea:	d001      	beq.n	1f1f0 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1f1ec:	2300      	movs	r3, #0
   1f1ee:	e02e      	b.n	1f24e <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1f1f0:	4b1d      	ldr	r3, [pc, #116]	; (1f268 <sd_spi_op_cond+0xd8>)
   1f1f2:	4798      	blx	r3
   1f1f4:	0003      	movs	r3, r0
   1f1f6:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1f1f8:	68fb      	ldr	r3, [r7, #12]
   1f1fa:	2201      	movs	r2, #1
   1f1fc:	4013      	ands	r3, r2
   1f1fe:	d006      	beq.n	1f20e <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1f200:	693b      	ldr	r3, [r7, #16]
   1f202:	1e5a      	subs	r2, r3, #1
   1f204:	613a      	str	r2, [r7, #16]
   1f206:	2b00      	cmp	r3, #0
   1f208:	d1ca      	bne.n	1f1a0 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1f20a:	2300      	movs	r3, #0
   1f20c:	e01f      	b.n	1f24e <sd_spi_op_cond+0xbe>
			break;
   1f20e:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1f210:	4b16      	ldr	r3, [pc, #88]	; (1f26c <sd_spi_op_cond+0xdc>)
   1f212:	2100      	movs	r1, #0
   1f214:	0018      	movs	r0, r3
   1f216:	4b12      	ldr	r3, [pc, #72]	; (1f260 <sd_spi_op_cond+0xd0>)
   1f218:	4798      	blx	r3
   1f21a:	0003      	movs	r3, r0
   1f21c:	001a      	movs	r2, r3
   1f21e:	2301      	movs	r3, #1
   1f220:	4053      	eors	r3, r2
   1f222:	b2db      	uxtb	r3, r3
   1f224:	2b00      	cmp	r3, #0
   1f226:	d001      	beq.n	1f22c <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1f228:	2300      	movs	r3, #0
   1f22a:	e010      	b.n	1f24e <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1f22c:	4b0e      	ldr	r3, [pc, #56]	; (1f268 <sd_spi_op_cond+0xd8>)
   1f22e:	4798      	blx	r3
   1f230:	0002      	movs	r2, r0
   1f232:	2380      	movs	r3, #128	; 0x80
   1f234:	05db      	lsls	r3, r3, #23
   1f236:	4013      	ands	r3, r2
   1f238:	d008      	beq.n	1f24c <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1f23a:	4b0d      	ldr	r3, [pc, #52]	; (1f270 <sd_spi_op_cond+0xe0>)
   1f23c:	681a      	ldr	r2, [r3, #0]
   1f23e:	4b0c      	ldr	r3, [pc, #48]	; (1f270 <sd_spi_op_cond+0xe0>)
   1f240:	681b      	ldr	r3, [r3, #0]
   1f242:	7adb      	ldrb	r3, [r3, #11]
   1f244:	2108      	movs	r1, #8
   1f246:	430b      	orrs	r3, r1
   1f248:	b2db      	uxtb	r3, r3
   1f24a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1f24c:	2301      	movs	r3, #1
}
   1f24e:	0018      	movs	r0, r3
   1f250:	46bd      	mov	sp, r7
   1f252:	b006      	add	sp, #24
   1f254:	bd80      	pop	{r7, pc}
   1f256:	46c0      	nop			; (mov r8, r8)
   1f258:	00001bee 	.word	0x00001bee
   1f25c:	00001137 	.word	0x00001137
   1f260:	00020b61 	.word	0x00020b61
   1f264:	00001129 	.word	0x00001129
   1f268:	00020da1 	.word	0x00020da1
   1f26c:	0000053a 	.word	0x0000053a
   1f270:	20004248 	.word	0x20004248

0001f274 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1f274:	b580      	push	{r7, lr}
   1f276:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1f278:	2301      	movs	r3, #1
}
   1f27a:	0018      	movs	r0, r3
   1f27c:	46bd      	mov	sp, r7
   1f27e:	bd80      	pop	{r7, pc}

0001f280 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1f280:	b580      	push	{r7, lr}
   1f282:	b084      	sub	sp, #16
   1f284:	af00      	add	r7, sp, #0
   1f286:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1f288:	687b      	ldr	r3, [r7, #4]
   1f28a:	2200      	movs	r2, #0
   1f28c:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1f28e:	23d5      	movs	r3, #213	; 0xd5
   1f290:	005b      	lsls	r3, r3, #1
   1f292:	4a14      	ldr	r2, [pc, #80]	; (1f2e4 <sd_cmd8+0x64>)
   1f294:	0019      	movs	r1, r3
   1f296:	0010      	movs	r0, r2
   1f298:	4b13      	ldr	r3, [pc, #76]	; (1f2e8 <sd_cmd8+0x68>)
   1f29a:	4798      	blx	r3
   1f29c:	0003      	movs	r3, r0
   1f29e:	001a      	movs	r2, r3
   1f2a0:	2301      	movs	r3, #1
   1f2a2:	4053      	eors	r3, r2
   1f2a4:	b2db      	uxtb	r3, r3
   1f2a6:	2b00      	cmp	r3, #0
   1f2a8:	d001      	beq.n	1f2ae <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1f2aa:	2301      	movs	r3, #1
   1f2ac:	e015      	b.n	1f2da <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1f2ae:	4b0f      	ldr	r3, [pc, #60]	; (1f2ec <sd_cmd8+0x6c>)
   1f2b0:	4798      	blx	r3
   1f2b2:	0003      	movs	r3, r0
   1f2b4:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1f2b6:	68fb      	ldr	r3, [r7, #12]
   1f2b8:	3301      	adds	r3, #1
   1f2ba:	d101      	bne.n	1f2c0 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1f2bc:	2301      	movs	r3, #1
   1f2be:	e00c      	b.n	1f2da <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1f2c0:	68fb      	ldr	r3, [r7, #12]
   1f2c2:	051b      	lsls	r3, r3, #20
   1f2c4:	0d1a      	lsrs	r2, r3, #20
   1f2c6:	23d5      	movs	r3, #213	; 0xd5
   1f2c8:	005b      	lsls	r3, r3, #1
   1f2ca:	429a      	cmp	r2, r3
   1f2cc:	d001      	beq.n	1f2d2 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1f2ce:	2300      	movs	r3, #0
   1f2d0:	e003      	b.n	1f2da <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1f2d2:	687b      	ldr	r3, [r7, #4]
   1f2d4:	2201      	movs	r2, #1
   1f2d6:	701a      	strb	r2, [r3, #0]
	return true;
   1f2d8:	2301      	movs	r3, #1
}
   1f2da:	0018      	movs	r0, r3
   1f2dc:	46bd      	mov	sp, r7
   1f2de:	b004      	add	sp, #16
   1f2e0:	bd80      	pop	{r7, pc}
   1f2e2:	46c0      	nop			; (mov r8, r8)
   1f2e4:	00005508 	.word	0x00005508
   1f2e8:	00020b61 	.word	0x00020b61
   1f2ec:	00020da1 	.word	0x00020da1

0001f2f0 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1f2f0:	b590      	push	{r4, r7, lr}
   1f2f2:	b089      	sub	sp, #36	; 0x24
   1f2f4:	af02      	add	r7, sp, #8
   1f2f6:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1f2f8:	2380      	movs	r3, #128	; 0x80
   1f2fa:	009a      	lsls	r2, r3, #2
   1f2fc:	4841      	ldr	r0, [pc, #260]	; (1f404 <mmc_cmd8+0x114>)
   1f2fe:	2300      	movs	r3, #0
   1f300:	9300      	str	r3, [sp, #0]
   1f302:	2301      	movs	r3, #1
   1f304:	2100      	movs	r1, #0
   1f306:	4c40      	ldr	r4, [pc, #256]	; (1f408 <mmc_cmd8+0x118>)
   1f308:	47a0      	blx	r4
   1f30a:	0003      	movs	r3, r0
   1f30c:	001a      	movs	r2, r3
   1f30e:	2301      	movs	r3, #1
   1f310:	4053      	eors	r3, r2
   1f312:	b2db      	uxtb	r3, r3
   1f314:	2b00      	cmp	r3, #0
   1f316:	d001      	beq.n	1f31c <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1f318:	2300      	movs	r3, #0
   1f31a:	e06e      	b.n	1f3fa <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1f31c:	2316      	movs	r3, #22
   1f31e:	18fb      	adds	r3, r7, r3
   1f320:	2200      	movs	r2, #0
   1f322:	801a      	strh	r2, [r3, #0]
   1f324:	e014      	b.n	1f350 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1f326:	2310      	movs	r3, #16
   1f328:	18fb      	adds	r3, r7, r3
   1f32a:	0018      	movs	r0, r3
   1f32c:	4b37      	ldr	r3, [pc, #220]	; (1f40c <mmc_cmd8+0x11c>)
   1f32e:	4798      	blx	r3
   1f330:	0003      	movs	r3, r0
   1f332:	001a      	movs	r2, r3
   1f334:	2301      	movs	r3, #1
   1f336:	4053      	eors	r3, r2
   1f338:	b2db      	uxtb	r3, r3
   1f33a:	2b00      	cmp	r3, #0
   1f33c:	d001      	beq.n	1f342 <mmc_cmd8+0x52>
			return false;
   1f33e:	2300      	movs	r3, #0
   1f340:	e05b      	b.n	1f3fa <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1f342:	2316      	movs	r3, #22
   1f344:	18fb      	adds	r3, r7, r3
   1f346:	881a      	ldrh	r2, [r3, #0]
   1f348:	2316      	movs	r3, #22
   1f34a:	18fb      	adds	r3, r7, r3
   1f34c:	3201      	adds	r2, #1
   1f34e:	801a      	strh	r2, [r3, #0]
   1f350:	2316      	movs	r3, #22
   1f352:	18fb      	adds	r3, r7, r3
   1f354:	881b      	ldrh	r3, [r3, #0]
   1f356:	2b31      	cmp	r3, #49	; 0x31
   1f358:	d9e5      	bls.n	1f326 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1f35a:	693b      	ldr	r3, [r7, #16]
   1f35c:	b2db      	uxtb	r3, r3
   1f35e:	2202      	movs	r2, #2
   1f360:	4013      	ands	r3, r2
   1f362:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1f364:	687b      	ldr	r3, [r7, #4]
   1f366:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1f368:	4b29      	ldr	r3, [pc, #164]	; (1f410 <mmc_cmd8+0x120>)
   1f36a:	681b      	ldr	r3, [r3, #0]
   1f36c:	330e      	adds	r3, #14
   1f36e:	0018      	movs	r0, r3
   1f370:	230c      	movs	r3, #12
   1f372:	223e      	movs	r2, #62	; 0x3e
   1f374:	2180      	movs	r1, #128	; 0x80
   1f376:	4c27      	ldr	r4, [pc, #156]	; (1f414 <mmc_cmd8+0x124>)
   1f378:	47a0      	blx	r4
   1f37a:	0002      	movs	r2, r0
   1f37c:	4b26      	ldr	r3, [pc, #152]	; (1f418 <mmc_cmd8+0x128>)
   1f37e:	429a      	cmp	r2, r3
   1f380:	d135      	bne.n	1f3ee <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1f382:	e014      	b.n	1f3ae <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1f384:	230c      	movs	r3, #12
   1f386:	18fb      	adds	r3, r7, r3
   1f388:	0018      	movs	r0, r3
   1f38a:	4b20      	ldr	r3, [pc, #128]	; (1f40c <mmc_cmd8+0x11c>)
   1f38c:	4798      	blx	r3
   1f38e:	0003      	movs	r3, r0
   1f390:	001a      	movs	r2, r3
   1f392:	2301      	movs	r3, #1
   1f394:	4053      	eors	r3, r2
   1f396:	b2db      	uxtb	r3, r3
   1f398:	2b00      	cmp	r3, #0
   1f39a:	d001      	beq.n	1f3a0 <mmc_cmd8+0xb0>
				return false;
   1f39c:	2300      	movs	r3, #0
   1f39e:	e02c      	b.n	1f3fa <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1f3a0:	2316      	movs	r3, #22
   1f3a2:	18fb      	adds	r3, r7, r3
   1f3a4:	881a      	ldrh	r2, [r3, #0]
   1f3a6:	2316      	movs	r3, #22
   1f3a8:	18fb      	adds	r3, r7, r3
   1f3aa:	3201      	adds	r2, #1
   1f3ac:	801a      	strh	r2, [r3, #0]
   1f3ae:	2316      	movs	r3, #22
   1f3b0:	18fb      	adds	r3, r7, r3
   1f3b2:	881b      	ldrh	r3, [r3, #0]
   1f3b4:	2b35      	cmp	r3, #53	; 0x35
   1f3b6:	d9e5      	bls.n	1f384 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1f3b8:	4b15      	ldr	r3, [pc, #84]	; (1f410 <mmc_cmd8+0x120>)
   1f3ba:	681b      	ldr	r3, [r3, #0]
   1f3bc:	68fa      	ldr	r2, [r7, #12]
   1f3be:	0852      	lsrs	r2, r2, #1
   1f3c0:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1f3c2:	e014      	b.n	1f3ee <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1f3c4:	230c      	movs	r3, #12
   1f3c6:	18fb      	adds	r3, r7, r3
   1f3c8:	0018      	movs	r0, r3
   1f3ca:	4b10      	ldr	r3, [pc, #64]	; (1f40c <mmc_cmd8+0x11c>)
   1f3cc:	4798      	blx	r3
   1f3ce:	0003      	movs	r3, r0
   1f3d0:	001a      	movs	r2, r3
   1f3d2:	2301      	movs	r3, #1
   1f3d4:	4053      	eors	r3, r2
   1f3d6:	b2db      	uxtb	r3, r3
   1f3d8:	2b00      	cmp	r3, #0
   1f3da:	d001      	beq.n	1f3e0 <mmc_cmd8+0xf0>
			return false;
   1f3dc:	2300      	movs	r3, #0
   1f3de:	e00c      	b.n	1f3fa <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1f3e0:	2316      	movs	r3, #22
   1f3e2:	18fb      	adds	r3, r7, r3
   1f3e4:	881a      	ldrh	r2, [r3, #0]
   1f3e6:	2316      	movs	r3, #22
   1f3e8:	18fb      	adds	r3, r7, r3
   1f3ea:	3201      	adds	r2, #1
   1f3ec:	801a      	strh	r2, [r3, #0]
   1f3ee:	2316      	movs	r3, #22
   1f3f0:	18fb      	adds	r3, r7, r3
   1f3f2:	881b      	ldrh	r3, [r3, #0]
   1f3f4:	2b7f      	cmp	r3, #127	; 0x7f
   1f3f6:	d9e5      	bls.n	1f3c4 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1f3f8:	2301      	movs	r3, #1
}
   1f3fa:	0018      	movs	r0, r3
   1f3fc:	46bd      	mov	sp, r7
   1f3fe:	b007      	add	sp, #28
   1f400:	bd90      	pop	{r4, r7, pc}
   1f402:	46c0      	nop			; (mov r8, r8)
   1f404:	00081108 	.word	0x00081108
   1f408:	00020b89 	.word	0x00020b89
   1f40c:	00020db5 	.word	0x00020db5
   1f410:	20004248 	.word	0x20004248
   1f414:	0001ef89 	.word	0x0001ef89
   1f418:	00000fff 	.word	0x00000fff

0001f41c <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1f41c:	b590      	push	{r4, r7, lr}
   1f41e:	b083      	sub	sp, #12
   1f420:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1f422:	4b15      	ldr	r3, [pc, #84]	; (1f478 <sd_mmc_cmd9_spi+0x5c>)
   1f424:	681b      	ldr	r3, [r3, #0]
   1f426:	891b      	ldrh	r3, [r3, #8]
   1f428:	0419      	lsls	r1, r3, #16
   1f42a:	4814      	ldr	r0, [pc, #80]	; (1f47c <sd_mmc_cmd9_spi+0x60>)
   1f42c:	2301      	movs	r3, #1
   1f42e:	9300      	str	r3, [sp, #0]
   1f430:	2301      	movs	r3, #1
   1f432:	2210      	movs	r2, #16
   1f434:	4c12      	ldr	r4, [pc, #72]	; (1f480 <sd_mmc_cmd9_spi+0x64>)
   1f436:	47a0      	blx	r4
   1f438:	0003      	movs	r3, r0
   1f43a:	001a      	movs	r2, r3
   1f43c:	2301      	movs	r3, #1
   1f43e:	4053      	eors	r3, r2
   1f440:	b2db      	uxtb	r3, r3
   1f442:	2b00      	cmp	r3, #0
   1f444:	d001      	beq.n	1f44a <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1f446:	2300      	movs	r3, #0
   1f448:	e012      	b.n	1f470 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1f44a:	4b0b      	ldr	r3, [pc, #44]	; (1f478 <sd_mmc_cmd9_spi+0x5c>)
   1f44c:	681b      	ldr	r3, [r3, #0]
   1f44e:	330e      	adds	r3, #14
   1f450:	2101      	movs	r1, #1
   1f452:	0018      	movs	r0, r3
   1f454:	4b0b      	ldr	r3, [pc, #44]	; (1f484 <sd_mmc_cmd9_spi+0x68>)
   1f456:	4798      	blx	r3
   1f458:	0003      	movs	r3, r0
   1f45a:	001a      	movs	r2, r3
   1f45c:	2301      	movs	r3, #1
   1f45e:	4053      	eors	r3, r2
   1f460:	b2db      	uxtb	r3, r3
   1f462:	2b00      	cmp	r3, #0
   1f464:	d001      	beq.n	1f46a <sd_mmc_cmd9_spi+0x4e>
		return false;
   1f466:	2300      	movs	r3, #0
   1f468:	e002      	b.n	1f470 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1f46a:	4b07      	ldr	r3, [pc, #28]	; (1f488 <sd_mmc_cmd9_spi+0x6c>)
   1f46c:	4798      	blx	r3
   1f46e:	0003      	movs	r3, r0
}
   1f470:	0018      	movs	r0, r3
   1f472:	46bd      	mov	sp, r7
   1f474:	b001      	add	sp, #4
   1f476:	bd90      	pop	{r4, r7, pc}
   1f478:	20004248 	.word	0x20004248
   1f47c:	00081109 	.word	0x00081109
   1f480:	00020b89 	.word	0x00020b89
   1f484:	00020e59 	.word	0x00020e59
   1f488:	00020efd 	.word	0x00020efd

0001f48c <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1f48c:	b5b0      	push	{r4, r5, r7, lr}
   1f48e:	b084      	sub	sp, #16
   1f490:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1f492:	4b45      	ldr	r3, [pc, #276]	; (1f5a8 <mmc_decode_csd+0x11c>)
   1f494:	681b      	ldr	r3, [r3, #0]
   1f496:	330e      	adds	r3, #14
   1f498:	0018      	movs	r0, r3
   1f49a:	2304      	movs	r3, #4
   1f49c:	227a      	movs	r2, #122	; 0x7a
   1f49e:	2180      	movs	r1, #128	; 0x80
   1f4a0:	4c42      	ldr	r4, [pc, #264]	; (1f5ac <mmc_decode_csd+0x120>)
   1f4a2:	47a0      	blx	r4
   1f4a4:	0003      	movs	r3, r0
   1f4a6:	2b02      	cmp	r3, #2
   1f4a8:	d011      	beq.n	1f4ce <mmc_decode_csd+0x42>
   1f4aa:	d802      	bhi.n	1f4b2 <mmc_decode_csd+0x26>
   1f4ac:	2b01      	cmp	r3, #1
   1f4ae:	d009      	beq.n	1f4c4 <mmc_decode_csd+0x38>
   1f4b0:	e003      	b.n	1f4ba <mmc_decode_csd+0x2e>
   1f4b2:	2b03      	cmp	r3, #3
   1f4b4:	d010      	beq.n	1f4d8 <mmc_decode_csd+0x4c>
   1f4b6:	2b04      	cmp	r3, #4
   1f4b8:	d013      	beq.n	1f4e2 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1f4ba:	4b3b      	ldr	r3, [pc, #236]	; (1f5a8 <mmc_decode_csd+0x11c>)
   1f4bc:	681b      	ldr	r3, [r3, #0]
   1f4be:	2212      	movs	r2, #18
   1f4c0:	731a      	strb	r2, [r3, #12]
		break;
   1f4c2:	e013      	b.n	1f4ec <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1f4c4:	4b38      	ldr	r3, [pc, #224]	; (1f5a8 <mmc_decode_csd+0x11c>)
   1f4c6:	681b      	ldr	r3, [r3, #0]
   1f4c8:	2214      	movs	r2, #20
   1f4ca:	731a      	strb	r2, [r3, #12]
		break;
   1f4cc:	e00e      	b.n	1f4ec <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1f4ce:	4b36      	ldr	r3, [pc, #216]	; (1f5a8 <mmc_decode_csd+0x11c>)
   1f4d0:	681b      	ldr	r3, [r3, #0]
   1f4d2:	2222      	movs	r2, #34	; 0x22
   1f4d4:	731a      	strb	r2, [r3, #12]
		break;
   1f4d6:	e009      	b.n	1f4ec <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1f4d8:	4b33      	ldr	r3, [pc, #204]	; (1f5a8 <mmc_decode_csd+0x11c>)
   1f4da:	681b      	ldr	r3, [r3, #0]
   1f4dc:	2230      	movs	r2, #48	; 0x30
   1f4de:	731a      	strb	r2, [r3, #12]
		break;
   1f4e0:	e004      	b.n	1f4ec <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1f4e2:	4b31      	ldr	r3, [pc, #196]	; (1f5a8 <mmc_decode_csd+0x11c>)
   1f4e4:	681b      	ldr	r3, [r3, #0]
   1f4e6:	2240      	movs	r2, #64	; 0x40
   1f4e8:	731a      	strb	r2, [r3, #12]
		break;
   1f4ea:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1f4ec:	4b2e      	ldr	r3, [pc, #184]	; (1f5a8 <mmc_decode_csd+0x11c>)
   1f4ee:	681b      	ldr	r3, [r3, #0]
   1f4f0:	330e      	adds	r3, #14
   1f4f2:	0018      	movs	r0, r3
   1f4f4:	2308      	movs	r3, #8
   1f4f6:	2260      	movs	r2, #96	; 0x60
   1f4f8:	2180      	movs	r1, #128	; 0x80
   1f4fa:	4c2c      	ldr	r4, [pc, #176]	; (1f5ac <mmc_decode_csd+0x120>)
   1f4fc:	47a0      	blx	r4
   1f4fe:	0003      	movs	r3, r0
   1f500:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1f502:	68fb      	ldr	r3, [r7, #12]
   1f504:	2207      	movs	r2, #7
   1f506:	401a      	ands	r2, r3
   1f508:	4b29      	ldr	r3, [pc, #164]	; (1f5b0 <mmc_decode_csd+0x124>)
   1f50a:	0092      	lsls	r2, r2, #2
   1f50c:	58d3      	ldr	r3, [r2, r3]
   1f50e:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1f510:	68fb      	ldr	r3, [r7, #12]
   1f512:	08db      	lsrs	r3, r3, #3
   1f514:	220f      	movs	r2, #15
   1f516:	401a      	ands	r2, r3
   1f518:	4b26      	ldr	r3, [pc, #152]	; (1f5b4 <mmc_decode_csd+0x128>)
   1f51a:	0092      	lsls	r2, r2, #2
   1f51c:	58d3      	ldr	r3, [r2, r3]
   1f51e:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1f520:	4b21      	ldr	r3, [pc, #132]	; (1f5a8 <mmc_decode_csd+0x11c>)
   1f522:	681b      	ldr	r3, [r3, #0]
   1f524:	68ba      	ldr	r2, [r7, #8]
   1f526:	6879      	ldr	r1, [r7, #4]
   1f528:	434a      	muls	r2, r1
   1f52a:	21fa      	movs	r1, #250	; 0xfa
   1f52c:	0089      	lsls	r1, r1, #2
   1f52e:	434a      	muls	r2, r1
   1f530:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1f532:	4b1d      	ldr	r3, [pc, #116]	; (1f5a8 <mmc_decode_csd+0x11c>)
   1f534:	681b      	ldr	r3, [r3, #0]
   1f536:	330e      	adds	r3, #14
   1f538:	0018      	movs	r0, r3
   1f53a:	230c      	movs	r3, #12
   1f53c:	223e      	movs	r2, #62	; 0x3e
   1f53e:	2180      	movs	r1, #128	; 0x80
   1f540:	4c1a      	ldr	r4, [pc, #104]	; (1f5ac <mmc_decode_csd+0x120>)
   1f542:	47a0      	blx	r4
   1f544:	0002      	movs	r2, r0
   1f546:	4b1c      	ldr	r3, [pc, #112]	; (1f5b8 <mmc_decode_csd+0x12c>)
   1f548:	429a      	cmp	r2, r3
   1f54a:	d028      	beq.n	1f59e <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1f54c:	4b16      	ldr	r3, [pc, #88]	; (1f5a8 <mmc_decode_csd+0x11c>)
   1f54e:	681b      	ldr	r3, [r3, #0]
   1f550:	330e      	adds	r3, #14
   1f552:	0018      	movs	r0, r3
   1f554:	230c      	movs	r3, #12
   1f556:	223e      	movs	r2, #62	; 0x3e
   1f558:	2180      	movs	r1, #128	; 0x80
   1f55a:	4c14      	ldr	r4, [pc, #80]	; (1f5ac <mmc_decode_csd+0x120>)
   1f55c:	47a0      	blx	r4
   1f55e:	0003      	movs	r3, r0
   1f560:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1f562:	4b11      	ldr	r3, [pc, #68]	; (1f5a8 <mmc_decode_csd+0x11c>)
   1f564:	681b      	ldr	r3, [r3, #0]
   1f566:	330e      	adds	r3, #14
   1f568:	0018      	movs	r0, r3
   1f56a:	2303      	movs	r3, #3
   1f56c:	222f      	movs	r2, #47	; 0x2f
   1f56e:	2180      	movs	r1, #128	; 0x80
   1f570:	4d0e      	ldr	r5, [pc, #56]	; (1f5ac <mmc_decode_csd+0x120>)
   1f572:	47a8      	blx	r5
   1f574:	0003      	movs	r3, r0
   1f576:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1f578:	409c      	lsls	r4, r3
   1f57a:	0023      	movs	r3, r4
   1f57c:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1f57e:	4b0a      	ldr	r3, [pc, #40]	; (1f5a8 <mmc_decode_csd+0x11c>)
   1f580:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1f582:	4b09      	ldr	r3, [pc, #36]	; (1f5a8 <mmc_decode_csd+0x11c>)
   1f584:	681b      	ldr	r3, [r3, #0]
   1f586:	330e      	adds	r3, #14
   1f588:	0018      	movs	r0, r3
   1f58a:	2304      	movs	r3, #4
   1f58c:	2250      	movs	r2, #80	; 0x50
   1f58e:	2180      	movs	r1, #128	; 0x80
   1f590:	4d06      	ldr	r5, [pc, #24]	; (1f5ac <mmc_decode_csd+0x120>)
   1f592:	47a8      	blx	r5
   1f594:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1f596:	683b      	ldr	r3, [r7, #0]
   1f598:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1f59a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1f59c:	6063      	str	r3, [r4, #4]
	}
}
   1f59e:	46c0      	nop			; (mov r8, r8)
   1f5a0:	46bd      	mov	sp, r7
   1f5a2:	b004      	add	sp, #16
   1f5a4:	bdb0      	pop	{r4, r5, r7, pc}
   1f5a6:	46c0      	nop			; (mov r8, r8)
   1f5a8:	20004248 	.word	0x20004248
   1f5ac:	0001ef89 	.word	0x0001ef89
   1f5b0:	0003a0fc 	.word	0x0003a0fc
   1f5b4:	0003a158 	.word	0x0003a158
   1f5b8:	00000fff 	.word	0x00000fff

0001f5bc <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1f5bc:	b5b0      	push	{r4, r5, r7, lr}
   1f5be:	b084      	sub	sp, #16
   1f5c0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1f5c2:	4b35      	ldr	r3, [pc, #212]	; (1f698 <sd_decode_csd+0xdc>)
   1f5c4:	681b      	ldr	r3, [r3, #0]
   1f5c6:	330e      	adds	r3, #14
   1f5c8:	0018      	movs	r0, r3
   1f5ca:	2308      	movs	r3, #8
   1f5cc:	2260      	movs	r2, #96	; 0x60
   1f5ce:	2180      	movs	r1, #128	; 0x80
   1f5d0:	4c32      	ldr	r4, [pc, #200]	; (1f69c <sd_decode_csd+0xe0>)
   1f5d2:	47a0      	blx	r4
   1f5d4:	0003      	movs	r3, r0
   1f5d6:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1f5d8:	68fb      	ldr	r3, [r7, #12]
   1f5da:	2207      	movs	r2, #7
   1f5dc:	401a      	ands	r2, r3
   1f5de:	4b30      	ldr	r3, [pc, #192]	; (1f6a0 <sd_decode_csd+0xe4>)
   1f5e0:	0092      	lsls	r2, r2, #2
   1f5e2:	58d3      	ldr	r3, [r2, r3]
   1f5e4:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1f5e6:	68fb      	ldr	r3, [r7, #12]
   1f5e8:	08db      	lsrs	r3, r3, #3
   1f5ea:	220f      	movs	r2, #15
   1f5ec:	401a      	ands	r2, r3
   1f5ee:	4b2d      	ldr	r3, [pc, #180]	; (1f6a4 <sd_decode_csd+0xe8>)
   1f5f0:	0092      	lsls	r2, r2, #2
   1f5f2:	58d3      	ldr	r3, [r2, r3]
   1f5f4:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1f5f6:	4b28      	ldr	r3, [pc, #160]	; (1f698 <sd_decode_csd+0xdc>)
   1f5f8:	681b      	ldr	r3, [r3, #0]
   1f5fa:	68ba      	ldr	r2, [r7, #8]
   1f5fc:	6879      	ldr	r1, [r7, #4]
   1f5fe:	434a      	muls	r2, r1
   1f600:	21fa      	movs	r1, #250	; 0xfa
   1f602:	0089      	lsls	r1, r1, #2
   1f604:	434a      	muls	r2, r1
   1f606:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1f608:	4b23      	ldr	r3, [pc, #140]	; (1f698 <sd_decode_csd+0xdc>)
   1f60a:	681b      	ldr	r3, [r3, #0]
   1f60c:	330e      	adds	r3, #14
   1f60e:	0018      	movs	r0, r3
   1f610:	2302      	movs	r3, #2
   1f612:	227e      	movs	r2, #126	; 0x7e
   1f614:	2180      	movs	r1, #128	; 0x80
   1f616:	4c21      	ldr	r4, [pc, #132]	; (1f69c <sd_decode_csd+0xe0>)
   1f618:	47a0      	blx	r4
   1f61a:	1e03      	subs	r3, r0, #0
   1f61c:	d00f      	beq.n	1f63e <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1f61e:	4b1e      	ldr	r3, [pc, #120]	; (1f698 <sd_decode_csd+0xdc>)
   1f620:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1f622:	4b1d      	ldr	r3, [pc, #116]	; (1f698 <sd_decode_csd+0xdc>)
   1f624:	681b      	ldr	r3, [r3, #0]
   1f626:	330e      	adds	r3, #14
   1f628:	0018      	movs	r0, r3
   1f62a:	2316      	movs	r3, #22
   1f62c:	2230      	movs	r2, #48	; 0x30
   1f62e:	2180      	movs	r1, #128	; 0x80
   1f630:	4d1a      	ldr	r5, [pc, #104]	; (1f69c <sd_decode_csd+0xe0>)
   1f632:	47a8      	blx	r5
   1f634:	0003      	movs	r3, r0
				* 512;
   1f636:	3301      	adds	r3, #1
   1f638:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1f63a:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1f63c:	e028      	b.n	1f690 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1f63e:	4b16      	ldr	r3, [pc, #88]	; (1f698 <sd_decode_csd+0xdc>)
   1f640:	681b      	ldr	r3, [r3, #0]
   1f642:	330e      	adds	r3, #14
   1f644:	0018      	movs	r0, r3
   1f646:	230c      	movs	r3, #12
   1f648:	223e      	movs	r2, #62	; 0x3e
   1f64a:	2180      	movs	r1, #128	; 0x80
   1f64c:	4c13      	ldr	r4, [pc, #76]	; (1f69c <sd_decode_csd+0xe0>)
   1f64e:	47a0      	blx	r4
   1f650:	0003      	movs	r3, r0
   1f652:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1f654:	4b10      	ldr	r3, [pc, #64]	; (1f698 <sd_decode_csd+0xdc>)
   1f656:	681b      	ldr	r3, [r3, #0]
   1f658:	330e      	adds	r3, #14
   1f65a:	0018      	movs	r0, r3
   1f65c:	2303      	movs	r3, #3
   1f65e:	222f      	movs	r2, #47	; 0x2f
   1f660:	2180      	movs	r1, #128	; 0x80
   1f662:	4d0e      	ldr	r5, [pc, #56]	; (1f69c <sd_decode_csd+0xe0>)
   1f664:	47a8      	blx	r5
   1f666:	0003      	movs	r3, r0
   1f668:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1f66a:	409c      	lsls	r4, r3
   1f66c:	0023      	movs	r3, r4
   1f66e:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1f670:	4b09      	ldr	r3, [pc, #36]	; (1f698 <sd_decode_csd+0xdc>)
   1f672:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1f674:	4b08      	ldr	r3, [pc, #32]	; (1f698 <sd_decode_csd+0xdc>)
   1f676:	681b      	ldr	r3, [r3, #0]
   1f678:	330e      	adds	r3, #14
   1f67a:	0018      	movs	r0, r3
   1f67c:	2304      	movs	r3, #4
   1f67e:	2250      	movs	r2, #80	; 0x50
   1f680:	2180      	movs	r1, #128	; 0x80
   1f682:	4d06      	ldr	r5, [pc, #24]	; (1f69c <sd_decode_csd+0xe0>)
   1f684:	47a8      	blx	r5
   1f686:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1f688:	683b      	ldr	r3, [r7, #0]
   1f68a:	4093      	lsls	r3, r2
				/ 1024;
   1f68c:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1f68e:	6063      	str	r3, [r4, #4]
}
   1f690:	46c0      	nop			; (mov r8, r8)
   1f692:	46bd      	mov	sp, r7
   1f694:	b004      	add	sp, #16
   1f696:	bdb0      	pop	{r4, r5, r7, pc}
   1f698:	20004248 	.word	0x20004248
   1f69c:	0001ef89 	.word	0x0001ef89
   1f6a0:	0003a0fc 	.word	0x0003a0fc
   1f6a4:	0003a118 	.word	0x0003a118

0001f6a8 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1f6a8:	b580      	push	{r7, lr}
   1f6aa:	b082      	sub	sp, #8
   1f6ac:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1f6ae:	4b11      	ldr	r3, [pc, #68]	; (1f6f4 <sd_mmc_cmd13+0x4c>)
   1f6b0:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1f6b2:	4b11      	ldr	r3, [pc, #68]	; (1f6f8 <sd_mmc_cmd13+0x50>)
   1f6b4:	2100      	movs	r1, #0
   1f6b6:	0018      	movs	r0, r3
   1f6b8:	4b10      	ldr	r3, [pc, #64]	; (1f6fc <sd_mmc_cmd13+0x54>)
   1f6ba:	4798      	blx	r3
   1f6bc:	0003      	movs	r3, r0
   1f6be:	001a      	movs	r2, r3
   1f6c0:	2301      	movs	r3, #1
   1f6c2:	4053      	eors	r3, r2
   1f6c4:	b2db      	uxtb	r3, r3
   1f6c6:	2b00      	cmp	r3, #0
   1f6c8:	d001      	beq.n	1f6ce <sd_mmc_cmd13+0x26>
				return false;
   1f6ca:	2300      	movs	r3, #0
   1f6cc:	e00e      	b.n	1f6ec <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1f6ce:	4b0c      	ldr	r3, [pc, #48]	; (1f700 <sd_mmc_cmd13+0x58>)
   1f6d0:	4798      	blx	r3
   1f6d2:	0002      	movs	r2, r0
   1f6d4:	23ff      	movs	r3, #255	; 0xff
   1f6d6:	4013      	ands	r3, r2
   1f6d8:	d006      	beq.n	1f6e8 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1f6da:	687b      	ldr	r3, [r7, #4]
   1f6dc:	1e5a      	subs	r2, r3, #1
   1f6de:	607a      	str	r2, [r7, #4]
   1f6e0:	2b00      	cmp	r3, #0
   1f6e2:	d1e6      	bne.n	1f6b2 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1f6e4:	2300      	movs	r3, #0
   1f6e6:	e001      	b.n	1f6ec <sd_mmc_cmd13+0x44>
				break;
   1f6e8:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1f6ea:	2301      	movs	r3, #1
}
   1f6ec:	0018      	movs	r0, r3
   1f6ee:	46bd      	mov	sp, r7
   1f6f0:	b002      	add	sp, #8
   1f6f2:	bd80      	pop	{r7, pc}
   1f6f4:	00030d40 	.word	0x00030d40
   1f6f8:	00001b0d 	.word	0x00001b0d
   1f6fc:	00020b61 	.word	0x00020b61
   1f700:	00020da1 	.word	0x00020da1

0001f704 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1f704:	b590      	push	{r4, r7, lr}
   1f706:	b085      	sub	sp, #20
   1f708:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1f70a:	4b38      	ldr	r3, [pc, #224]	; (1f7ec <sd_acmd51+0xe8>)
   1f70c:	681b      	ldr	r3, [r3, #0]
   1f70e:	891b      	ldrh	r3, [r3, #8]
   1f710:	041b      	lsls	r3, r3, #16
   1f712:	4a37      	ldr	r2, [pc, #220]	; (1f7f0 <sd_acmd51+0xec>)
   1f714:	0019      	movs	r1, r3
   1f716:	0010      	movs	r0, r2
   1f718:	4b36      	ldr	r3, [pc, #216]	; (1f7f4 <sd_acmd51+0xf0>)
   1f71a:	4798      	blx	r3
   1f71c:	0003      	movs	r3, r0
   1f71e:	001a      	movs	r2, r3
   1f720:	2301      	movs	r3, #1
   1f722:	4053      	eors	r3, r2
   1f724:	b2db      	uxtb	r3, r3
   1f726:	2b00      	cmp	r3, #0
   1f728:	d001      	beq.n	1f72e <sd_acmd51+0x2a>
		return false;
   1f72a:	2300      	movs	r3, #0
   1f72c:	e059      	b.n	1f7e2 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1f72e:	4832      	ldr	r0, [pc, #200]	; (1f7f8 <sd_acmd51+0xf4>)
   1f730:	2301      	movs	r3, #1
   1f732:	9300      	str	r3, [sp, #0]
   1f734:	2301      	movs	r3, #1
   1f736:	2208      	movs	r2, #8
   1f738:	2100      	movs	r1, #0
   1f73a:	4c30      	ldr	r4, [pc, #192]	; (1f7fc <sd_acmd51+0xf8>)
   1f73c:	47a0      	blx	r4
   1f73e:	0003      	movs	r3, r0
   1f740:	001a      	movs	r2, r3
   1f742:	2301      	movs	r3, #1
   1f744:	4053      	eors	r3, r2
   1f746:	b2db      	uxtb	r3, r3
   1f748:	2b00      	cmp	r3, #0
   1f74a:	d001      	beq.n	1f750 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1f74c:	2300      	movs	r3, #0
   1f74e:	e048      	b.n	1f7e2 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1f750:	003b      	movs	r3, r7
   1f752:	2101      	movs	r1, #1
   1f754:	0018      	movs	r0, r3
   1f756:	4b2a      	ldr	r3, [pc, #168]	; (1f800 <sd_acmd51+0xfc>)
   1f758:	4798      	blx	r3
   1f75a:	0003      	movs	r3, r0
   1f75c:	001a      	movs	r2, r3
   1f75e:	2301      	movs	r3, #1
   1f760:	4053      	eors	r3, r2
   1f762:	b2db      	uxtb	r3, r3
   1f764:	2b00      	cmp	r3, #0
   1f766:	d001      	beq.n	1f76c <sd_acmd51+0x68>
		return false;
   1f768:	2300      	movs	r3, #0
   1f76a:	e03a      	b.n	1f7e2 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1f76c:	4b25      	ldr	r3, [pc, #148]	; (1f804 <sd_acmd51+0x100>)
   1f76e:	4798      	blx	r3
   1f770:	0003      	movs	r3, r0
   1f772:	001a      	movs	r2, r3
   1f774:	2301      	movs	r3, #1
   1f776:	4053      	eors	r3, r2
   1f778:	b2db      	uxtb	r3, r3
   1f77a:	2b00      	cmp	r3, #0
   1f77c:	d001      	beq.n	1f782 <sd_acmd51+0x7e>
		return false;
   1f77e:	2300      	movs	r3, #0
   1f780:	e02f      	b.n	1f7e2 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1f782:	0038      	movs	r0, r7
   1f784:	2304      	movs	r3, #4
   1f786:	2238      	movs	r2, #56	; 0x38
   1f788:	2140      	movs	r1, #64	; 0x40
   1f78a:	4c1f      	ldr	r4, [pc, #124]	; (1f808 <sd_acmd51+0x104>)
   1f78c:	47a0      	blx	r4
   1f78e:	0003      	movs	r3, r0
   1f790:	2b01      	cmp	r3, #1
   1f792:	d008      	beq.n	1f7a6 <sd_acmd51+0xa2>
   1f794:	d302      	bcc.n	1f79c <sd_acmd51+0x98>
   1f796:	2b02      	cmp	r3, #2
   1f798:	d00a      	beq.n	1f7b0 <sd_acmd51+0xac>
   1f79a:	e01c      	b.n	1f7d6 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1f79c:	4b13      	ldr	r3, [pc, #76]	; (1f7ec <sd_acmd51+0xe8>)
   1f79e:	681b      	ldr	r3, [r3, #0]
   1f7a0:	2210      	movs	r2, #16
   1f7a2:	731a      	strb	r2, [r3, #12]
		break;
   1f7a4:	e01c      	b.n	1f7e0 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1f7a6:	4b11      	ldr	r3, [pc, #68]	; (1f7ec <sd_acmd51+0xe8>)
   1f7a8:	681b      	ldr	r3, [r3, #0]
   1f7aa:	221a      	movs	r2, #26
   1f7ac:	731a      	strb	r2, [r3, #12]
		break;
   1f7ae:	e017      	b.n	1f7e0 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1f7b0:	0038      	movs	r0, r7
   1f7b2:	2301      	movs	r3, #1
   1f7b4:	222f      	movs	r2, #47	; 0x2f
   1f7b6:	2140      	movs	r1, #64	; 0x40
   1f7b8:	4c13      	ldr	r4, [pc, #76]	; (1f808 <sd_acmd51+0x104>)
   1f7ba:	47a0      	blx	r4
   1f7bc:	0003      	movs	r3, r0
   1f7be:	2b01      	cmp	r3, #1
   1f7c0:	d104      	bne.n	1f7cc <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1f7c2:	4b0a      	ldr	r3, [pc, #40]	; (1f7ec <sd_acmd51+0xe8>)
   1f7c4:	681b      	ldr	r3, [r3, #0]
   1f7c6:	2230      	movs	r2, #48	; 0x30
   1f7c8:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1f7ca:	e009      	b.n	1f7e0 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1f7cc:	4b07      	ldr	r3, [pc, #28]	; (1f7ec <sd_acmd51+0xe8>)
   1f7ce:	681b      	ldr	r3, [r3, #0]
   1f7d0:	2220      	movs	r2, #32
   1f7d2:	731a      	strb	r2, [r3, #12]
		break;
   1f7d4:	e004      	b.n	1f7e0 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1f7d6:	4b05      	ldr	r3, [pc, #20]	; (1f7ec <sd_acmd51+0xe8>)
   1f7d8:	681b      	ldr	r3, [r3, #0]
   1f7da:	2210      	movs	r2, #16
   1f7dc:	731a      	strb	r2, [r3, #12]
		break;
   1f7de:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1f7e0:	2301      	movs	r3, #1
}
   1f7e2:	0018      	movs	r0, r3
   1f7e4:	46bd      	mov	sp, r7
   1f7e6:	b003      	add	sp, #12
   1f7e8:	bd90      	pop	{r4, r7, pc}
   1f7ea:	46c0      	nop			; (mov r8, r8)
   1f7ec:	20004248 	.word	0x20004248
   1f7f0:	00001137 	.word	0x00001137
   1f7f4:	00020b61 	.word	0x00020b61
   1f7f8:	00081133 	.word	0x00081133
   1f7fc:	00020b89 	.word	0x00020b89
   1f800:	00020e59 	.word	0x00020e59
   1f804:	00020efd 	.word	0x00020efd
   1f808:	0001ef89 	.word	0x0001ef89

0001f80c <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1f80c:	b580      	push	{r7, lr}
   1f80e:	b082      	sub	sp, #8
   1f810:	af00      	add	r7, sp, #0
   1f812:	0002      	movs	r2, r0
   1f814:	1dfb      	adds	r3, r7, #7
   1f816:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1f818:	1dfb      	adds	r3, r7, #7
   1f81a:	781b      	ldrb	r3, [r3, #0]
   1f81c:	2b00      	cmp	r3, #0
   1f81e:	d001      	beq.n	1f824 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1f820:	2304      	movs	r3, #4
   1f822:	e047      	b.n	1f8b4 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1f824:	1dfb      	adds	r3, r7, #7
   1f826:	781b      	ldrb	r3, [r3, #0]
   1f828:	4a24      	ldr	r2, [pc, #144]	; (1f8bc <sd_mmc_select_slot+0xb0>)
   1f82a:	015b      	lsls	r3, r3, #5
   1f82c:	18d3      	adds	r3, r2, r3
   1f82e:	330a      	adds	r3, #10
   1f830:	781b      	ldrb	r3, [r3, #0]
   1f832:	2b04      	cmp	r3, #4
   1f834:	d008      	beq.n	1f848 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1f836:	1dfb      	adds	r3, r7, #7
   1f838:	781b      	ldrb	r3, [r3, #0]
   1f83a:	4a20      	ldr	r2, [pc, #128]	; (1f8bc <sd_mmc_select_slot+0xb0>)
   1f83c:	015b      	lsls	r3, r3, #5
   1f83e:	18d3      	adds	r3, r2, r3
   1f840:	330a      	adds	r3, #10
   1f842:	781b      	ldrb	r3, [r3, #0]
   1f844:	2b03      	cmp	r3, #3
   1f846:	d11d      	bne.n	1f884 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1f848:	1dfb      	adds	r3, r7, #7
   1f84a:	781b      	ldrb	r3, [r3, #0]
   1f84c:	4a1b      	ldr	r2, [pc, #108]	; (1f8bc <sd_mmc_select_slot+0xb0>)
   1f84e:	015b      	lsls	r3, r3, #5
   1f850:	18d3      	adds	r3, r2, r3
   1f852:	330a      	adds	r3, #10
   1f854:	2202      	movs	r2, #2
   1f856:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1f858:	1dfb      	adds	r3, r7, #7
   1f85a:	781a      	ldrb	r2, [r3, #0]
   1f85c:	4b17      	ldr	r3, [pc, #92]	; (1f8bc <sd_mmc_select_slot+0xb0>)
   1f85e:	0152      	lsls	r2, r2, #5
   1f860:	4917      	ldr	r1, [pc, #92]	; (1f8c0 <sd_mmc_select_slot+0xb4>)
   1f862:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1f864:	1dfb      	adds	r3, r7, #7
   1f866:	781b      	ldrb	r3, [r3, #0]
   1f868:	4a14      	ldr	r2, [pc, #80]	; (1f8bc <sd_mmc_select_slot+0xb0>)
   1f86a:	015b      	lsls	r3, r3, #5
   1f86c:	18d3      	adds	r3, r2, r3
   1f86e:	330d      	adds	r3, #13
   1f870:	2201      	movs	r2, #1
   1f872:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1f874:	1dfb      	adds	r3, r7, #7
   1f876:	781b      	ldrb	r3, [r3, #0]
   1f878:	4a10      	ldr	r2, [pc, #64]	; (1f8bc <sd_mmc_select_slot+0xb0>)
   1f87a:	015b      	lsls	r3, r3, #5
   1f87c:	18d3      	adds	r3, r2, r3
   1f87e:	331e      	adds	r3, #30
   1f880:	2200      	movs	r2, #0
   1f882:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1f884:	4b0f      	ldr	r3, [pc, #60]	; (1f8c4 <sd_mmc_select_slot+0xb8>)
   1f886:	1dfa      	adds	r2, r7, #7
   1f888:	7812      	ldrb	r2, [r2, #0]
   1f88a:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1f88c:	1dfb      	adds	r3, r7, #7
   1f88e:	781b      	ldrb	r3, [r3, #0]
   1f890:	015a      	lsls	r2, r3, #5
   1f892:	4b0a      	ldr	r3, [pc, #40]	; (1f8bc <sd_mmc_select_slot+0xb0>)
   1f894:	18d2      	adds	r2, r2, r3
   1f896:	4b0c      	ldr	r3, [pc, #48]	; (1f8c8 <sd_mmc_select_slot+0xbc>)
   1f898:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1f89a:	4b0c      	ldr	r3, [pc, #48]	; (1f8cc <sd_mmc_select_slot+0xc0>)
   1f89c:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1f89e:	1dfb      	adds	r3, r7, #7
   1f8a0:	781b      	ldrb	r3, [r3, #0]
   1f8a2:	4a06      	ldr	r2, [pc, #24]	; (1f8bc <sd_mmc_select_slot+0xb0>)
   1f8a4:	015b      	lsls	r3, r3, #5
   1f8a6:	18d3      	adds	r3, r2, r3
   1f8a8:	330a      	adds	r3, #10
   1f8aa:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1f8ac:	3b02      	subs	r3, #2
   1f8ae:	425a      	negs	r2, r3
   1f8b0:	4153      	adcs	r3, r2
   1f8b2:	b2db      	uxtb	r3, r3
}
   1f8b4:	0018      	movs	r0, r3
   1f8b6:	46bd      	mov	sp, r7
   1f8b8:	b002      	add	sp, #8
   1f8ba:	bd80      	pop	{r7, pc}
   1f8bc:	20004224 	.word	0x20004224
   1f8c0:	00061a80 	.word	0x00061a80
   1f8c4:	20004244 	.word	0x20004244
   1f8c8:	20004248 	.word	0x20004248
   1f8cc:	0001f8d1 	.word	0x0001f8d1

0001f8d0 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1f8d0:	b5b0      	push	{r4, r5, r7, lr}
   1f8d2:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1f8d4:	4b09      	ldr	r3, [pc, #36]	; (1f8fc <sd_mmc_configure_slot+0x2c>)
   1f8d6:	7818      	ldrb	r0, [r3, #0]
   1f8d8:	4b09      	ldr	r3, [pc, #36]	; (1f900 <sd_mmc_configure_slot+0x30>)
   1f8da:	681b      	ldr	r3, [r3, #0]
   1f8dc:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1f8de:	4b08      	ldr	r3, [pc, #32]	; (1f900 <sd_mmc_configure_slot+0x30>)
   1f8e0:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1f8e2:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1f8e4:	4b06      	ldr	r3, [pc, #24]	; (1f900 <sd_mmc_configure_slot+0x30>)
   1f8e6:	681b      	ldr	r3, [r3, #0]
   1f8e8:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1f8ea:	1e5c      	subs	r4, r3, #1
   1f8ec:	41a3      	sbcs	r3, r4
   1f8ee:	b2db      	uxtb	r3, r3
   1f8f0:	4c04      	ldr	r4, [pc, #16]	; (1f904 <sd_mmc_configure_slot+0x34>)
   1f8f2:	47a0      	blx	r4
}
   1f8f4:	46c0      	nop			; (mov r8, r8)
   1f8f6:	46bd      	mov	sp, r7
   1f8f8:	bdb0      	pop	{r4, r5, r7, pc}
   1f8fa:	46c0      	nop			; (mov r8, r8)
   1f8fc:	20004244 	.word	0x20004244
   1f900:	20004248 	.word	0x20004248
   1f904:	00020a49 	.word	0x00020a49

0001f908 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1f908:	b580      	push	{r7, lr}
   1f90a:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1f90c:	4b05      	ldr	r3, [pc, #20]	; (1f924 <sd_mmc_deselect_slot+0x1c>)
   1f90e:	781b      	ldrb	r3, [r3, #0]
   1f910:	2b00      	cmp	r3, #0
   1f912:	d104      	bne.n	1f91e <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1f914:	4b03      	ldr	r3, [pc, #12]	; (1f924 <sd_mmc_deselect_slot+0x1c>)
   1f916:	781b      	ldrb	r3, [r3, #0]
   1f918:	0018      	movs	r0, r3
   1f91a:	4b03      	ldr	r3, [pc, #12]	; (1f928 <sd_mmc_deselect_slot+0x20>)
   1f91c:	4798      	blx	r3
	}
}
   1f91e:	46c0      	nop			; (mov r8, r8)
   1f920:	46bd      	mov	sp, r7
   1f922:	bd80      	pop	{r7, pc}
   1f924:	20004244 	.word	0x20004244
   1f928:	00020ad1 	.word	0x00020ad1

0001f92c <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1f92c:	b580      	push	{r7, lr}
   1f92e:	b082      	sub	sp, #8
   1f930:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1f932:	1dfb      	adds	r3, r7, #7
   1f934:	2200      	movs	r2, #0
   1f936:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1f938:	4b59      	ldr	r3, [pc, #356]	; (1faa0 <sd_mmc_spi_card_init+0x174>)
   1f93a:	681b      	ldr	r3, [r3, #0]
   1f93c:	2201      	movs	r2, #1
   1f93e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1f940:	4b57      	ldr	r3, [pc, #348]	; (1faa0 <sd_mmc_spi_card_init+0x174>)
   1f942:	681b      	ldr	r3, [r3, #0]
   1f944:	2200      	movs	r2, #0
   1f946:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1f948:	4b55      	ldr	r3, [pc, #340]	; (1faa0 <sd_mmc_spi_card_init+0x174>)
   1f94a:	681b      	ldr	r3, [r3, #0]
   1f94c:	2200      	movs	r2, #0
   1f94e:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1f950:	4b54      	ldr	r3, [pc, #336]	; (1faa4 <sd_mmc_spi_card_init+0x178>)
   1f952:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1f954:	2388      	movs	r3, #136	; 0x88
   1f956:	015b      	lsls	r3, r3, #5
   1f958:	2100      	movs	r1, #0
   1f95a:	0018      	movs	r0, r3
   1f95c:	4b52      	ldr	r3, [pc, #328]	; (1faa8 <sd_mmc_spi_card_init+0x17c>)
   1f95e:	4798      	blx	r3
   1f960:	0003      	movs	r3, r0
   1f962:	001a      	movs	r2, r3
   1f964:	2301      	movs	r3, #1
   1f966:	4053      	eors	r3, r2
   1f968:	b2db      	uxtb	r3, r3
   1f96a:	2b00      	cmp	r3, #0
   1f96c:	d001      	beq.n	1f972 <sd_mmc_spi_card_init+0x46>
		return false;
   1f96e:	2300      	movs	r3, #0
   1f970:	e092      	b.n	1fa98 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1f972:	1dfb      	adds	r3, r7, #7
   1f974:	0018      	movs	r0, r3
   1f976:	4b4d      	ldr	r3, [pc, #308]	; (1faac <sd_mmc_spi_card_init+0x180>)
   1f978:	4798      	blx	r3
   1f97a:	0003      	movs	r3, r0
   1f97c:	001a      	movs	r2, r3
   1f97e:	2301      	movs	r3, #1
   1f980:	4053      	eors	r3, r2
   1f982:	b2db      	uxtb	r3, r3
   1f984:	2b00      	cmp	r3, #0
   1f986:	d001      	beq.n	1f98c <sd_mmc_spi_card_init+0x60>
		return false;
   1f988:	2300      	movs	r3, #0
   1f98a:	e085      	b.n	1fa98 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1f98c:	4b48      	ldr	r3, [pc, #288]	; (1fab0 <sd_mmc_spi_card_init+0x184>)
   1f98e:	4798      	blx	r3
   1f990:	0003      	movs	r3, r0
   1f992:	001a      	movs	r2, r3
   1f994:	2301      	movs	r3, #1
   1f996:	4053      	eors	r3, r2
   1f998:	b2db      	uxtb	r3, r3
   1f99a:	2b00      	cmp	r3, #0
   1f99c:	d001      	beq.n	1f9a2 <sd_mmc_spi_card_init+0x76>
		return false;
   1f99e:	2300      	movs	r3, #0
   1f9a0:	e07a      	b.n	1fa98 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f9a2:	4b3f      	ldr	r3, [pc, #252]	; (1faa0 <sd_mmc_spi_card_init+0x174>)
   1f9a4:	681b      	ldr	r3, [r3, #0]
   1f9a6:	7adb      	ldrb	r3, [r3, #11]
   1f9a8:	001a      	movs	r2, r3
   1f9aa:	2301      	movs	r3, #1
   1f9ac:	4013      	ands	r3, r2
   1f9ae:	d021      	beq.n	1f9f4 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1f9b0:	1dfb      	adds	r3, r7, #7
   1f9b2:	781b      	ldrb	r3, [r3, #0]
   1f9b4:	0018      	movs	r0, r3
   1f9b6:	4b3f      	ldr	r3, [pc, #252]	; (1fab4 <sd_mmc_spi_card_init+0x188>)
   1f9b8:	4798      	blx	r3
   1f9ba:	0003      	movs	r3, r0
   1f9bc:	001a      	movs	r2, r3
   1f9be:	2301      	movs	r3, #1
   1f9c0:	4053      	eors	r3, r2
   1f9c2:	b2db      	uxtb	r3, r3
   1f9c4:	2b00      	cmp	r3, #0
   1f9c6:	d007      	beq.n	1f9d8 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1f9c8:	4b35      	ldr	r3, [pc, #212]	; (1faa0 <sd_mmc_spi_card_init+0x174>)
   1f9ca:	681b      	ldr	r3, [r3, #0]
   1f9cc:	2202      	movs	r2, #2
   1f9ce:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1f9d0:	4b39      	ldr	r3, [pc, #228]	; (1fab8 <sd_mmc_spi_card_init+0x18c>)
   1f9d2:	4798      	blx	r3
   1f9d4:	0003      	movs	r3, r0
   1f9d6:	e05f      	b.n	1fa98 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1f9d8:	4b38      	ldr	r3, [pc, #224]	; (1fabc <sd_mmc_spi_card_init+0x190>)
   1f9da:	2100      	movs	r1, #0
   1f9dc:	0018      	movs	r0, r3
   1f9de:	4b32      	ldr	r3, [pc, #200]	; (1faa8 <sd_mmc_spi_card_init+0x17c>)
   1f9e0:	4798      	blx	r3
   1f9e2:	0003      	movs	r3, r0
   1f9e4:	001a      	movs	r2, r3
   1f9e6:	2301      	movs	r3, #1
   1f9e8:	4053      	eors	r3, r2
   1f9ea:	b2db      	uxtb	r3, r3
   1f9ec:	2b00      	cmp	r3, #0
   1f9ee:	d001      	beq.n	1f9f4 <sd_mmc_spi_card_init+0xc8>
			return false;
   1f9f0:	2300      	movs	r3, #0
   1f9f2:	e051      	b.n	1fa98 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f9f4:	4b2a      	ldr	r3, [pc, #168]	; (1faa0 <sd_mmc_spi_card_init+0x174>)
   1f9f6:	681b      	ldr	r3, [r3, #0]
   1f9f8:	7adb      	ldrb	r3, [r3, #11]
   1f9fa:	001a      	movs	r2, r3
   1f9fc:	2301      	movs	r3, #1
   1f9fe:	4013      	ands	r3, r2
   1fa00:	d017      	beq.n	1fa32 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1fa02:	4b2f      	ldr	r3, [pc, #188]	; (1fac0 <sd_mmc_spi_card_init+0x194>)
   1fa04:	4798      	blx	r3
   1fa06:	0003      	movs	r3, r0
   1fa08:	001a      	movs	r2, r3
   1fa0a:	2301      	movs	r3, #1
   1fa0c:	4053      	eors	r3, r2
   1fa0e:	b2db      	uxtb	r3, r3
   1fa10:	2b00      	cmp	r3, #0
   1fa12:	d001      	beq.n	1fa18 <sd_mmc_spi_card_init+0xec>
			return false;
   1fa14:	2300      	movs	r3, #0
   1fa16:	e03f      	b.n	1fa98 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1fa18:	4b2a      	ldr	r3, [pc, #168]	; (1fac4 <sd_mmc_spi_card_init+0x198>)
   1fa1a:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1fa1c:	4b2a      	ldr	r3, [pc, #168]	; (1fac8 <sd_mmc_spi_card_init+0x19c>)
   1fa1e:	4798      	blx	r3
   1fa20:	0003      	movs	r3, r0
   1fa22:	001a      	movs	r2, r3
   1fa24:	2301      	movs	r3, #1
   1fa26:	4053      	eors	r3, r2
   1fa28:	b2db      	uxtb	r3, r3
   1fa2a:	2b00      	cmp	r3, #0
   1fa2c:	d001      	beq.n	1fa32 <sd_mmc_spi_card_init+0x106>
			return false;
   1fa2e:	2300      	movs	r3, #0
   1fa30:	e032      	b.n	1fa98 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1fa32:	4b1b      	ldr	r3, [pc, #108]	; (1faa0 <sd_mmc_spi_card_init+0x174>)
   1fa34:	681b      	ldr	r3, [r3, #0]
   1fa36:	7adb      	ldrb	r3, [r3, #11]
   1fa38:	001a      	movs	r2, r3
   1fa3a:	2301      	movs	r3, #1
   1fa3c:	4013      	ands	r3, r2
   1fa3e:	d016      	beq.n	1fa6e <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1fa40:	4b17      	ldr	r3, [pc, #92]	; (1faa0 <sd_mmc_spi_card_init+0x174>)
   1fa42:	681b      	ldr	r3, [r3, #0]
   1fa44:	7adb      	ldrb	r3, [r3, #11]
   1fa46:	001a      	movs	r2, r3
   1fa48:	2308      	movs	r3, #8
   1fa4a:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1fa4c:	d10f      	bne.n	1fa6e <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1fa4e:	2380      	movs	r3, #128	; 0x80
   1fa50:	009b      	lsls	r3, r3, #2
   1fa52:	4a1e      	ldr	r2, [pc, #120]	; (1facc <sd_mmc_spi_card_init+0x1a0>)
   1fa54:	0019      	movs	r1, r3
   1fa56:	0010      	movs	r0, r2
   1fa58:	4b13      	ldr	r3, [pc, #76]	; (1faa8 <sd_mmc_spi_card_init+0x17c>)
   1fa5a:	4798      	blx	r3
   1fa5c:	0003      	movs	r3, r0
   1fa5e:	001a      	movs	r2, r3
   1fa60:	2301      	movs	r3, #1
   1fa62:	4053      	eors	r3, r2
   1fa64:	b2db      	uxtb	r3, r3
   1fa66:	2b00      	cmp	r3, #0
   1fa68:	d001      	beq.n	1fa6e <sd_mmc_spi_card_init+0x142>
			return false;
   1fa6a:	2300      	movs	r3, #0
   1fa6c:	e014      	b.n	1fa98 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1fa6e:	4b0c      	ldr	r3, [pc, #48]	; (1faa0 <sd_mmc_spi_card_init+0x174>)
   1fa70:	681b      	ldr	r3, [r3, #0]
   1fa72:	7adb      	ldrb	r3, [r3, #11]
   1fa74:	001a      	movs	r2, r3
   1fa76:	2301      	movs	r3, #1
   1fa78:	4013      	ands	r3, r2
   1fa7a:	d00a      	beq.n	1fa92 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1fa7c:	4b14      	ldr	r3, [pc, #80]	; (1fad0 <sd_mmc_spi_card_init+0x1a4>)
   1fa7e:	4798      	blx	r3
   1fa80:	0003      	movs	r3, r0
   1fa82:	001a      	movs	r2, r3
   1fa84:	2301      	movs	r3, #1
   1fa86:	4053      	eors	r3, r2
   1fa88:	b2db      	uxtb	r3, r3
   1fa8a:	2b00      	cmp	r3, #0
   1fa8c:	d001      	beq.n	1fa92 <sd_mmc_spi_card_init+0x166>
			return false;
   1fa8e:	2300      	movs	r3, #0
   1fa90:	e002      	b.n	1fa98 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1fa92:	4b10      	ldr	r3, [pc, #64]	; (1fad4 <sd_mmc_spi_card_init+0x1a8>)
   1fa94:	4798      	blx	r3
	return true;
   1fa96:	2301      	movs	r3, #1
}
   1fa98:	0018      	movs	r0, r3
   1fa9a:	46bd      	mov	sp, r7
   1fa9c:	b002      	add	sp, #8
   1fa9e:	bd80      	pop	{r7, pc}
   1faa0:	20004248 	.word	0x20004248
   1faa4:	00020b15 	.word	0x00020b15
   1faa8:	00020b61 	.word	0x00020b61
   1faac:	0001f281 	.word	0x0001f281
   1fab0:	0001f275 	.word	0x0001f275
   1fab4:	0001f191 	.word	0x0001f191
   1fab8:	0001fad9 	.word	0x0001fad9
   1fabc:	0000113b 	.word	0x0000113b
   1fac0:	0001f41d 	.word	0x0001f41d
   1fac4:	0001f5bd 	.word	0x0001f5bd
   1fac8:	0001f705 	.word	0x0001f705
   1facc:	00001110 	.word	0x00001110
   1fad0:	0001f6a9 	.word	0x0001f6a9
   1fad4:	0001f8d1 	.word	0x0001f8d1

0001fad8 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1fad8:	b580      	push	{r7, lr}
   1fada:	b082      	sub	sp, #8
   1fadc:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1fade:	2388      	movs	r3, #136	; 0x88
   1fae0:	015b      	lsls	r3, r3, #5
   1fae2:	2100      	movs	r1, #0
   1fae4:	0018      	movs	r0, r3
   1fae6:	4b32      	ldr	r3, [pc, #200]	; (1fbb0 <sd_mmc_spi_install_mmc+0xd8>)
   1fae8:	4798      	blx	r3
   1faea:	0003      	movs	r3, r0
   1faec:	001a      	movs	r2, r3
   1faee:	2301      	movs	r3, #1
   1faf0:	4053      	eors	r3, r2
   1faf2:	b2db      	uxtb	r3, r3
   1faf4:	2b00      	cmp	r3, #0
   1faf6:	d001      	beq.n	1fafc <sd_mmc_spi_install_mmc+0x24>
		return false;
   1faf8:	2300      	movs	r3, #0
   1fafa:	e055      	b.n	1fba8 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1fafc:	4b2d      	ldr	r3, [pc, #180]	; (1fbb4 <sd_mmc_spi_install_mmc+0xdc>)
   1fafe:	4798      	blx	r3
   1fb00:	0003      	movs	r3, r0
   1fb02:	001a      	movs	r2, r3
   1fb04:	2301      	movs	r3, #1
   1fb06:	4053      	eors	r3, r2
   1fb08:	b2db      	uxtb	r3, r3
   1fb0a:	2b00      	cmp	r3, #0
   1fb0c:	d001      	beq.n	1fb12 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1fb0e:	2300      	movs	r3, #0
   1fb10:	e04a      	b.n	1fba8 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1fb12:	4b29      	ldr	r3, [pc, #164]	; (1fbb8 <sd_mmc_spi_install_mmc+0xe0>)
   1fb14:	2100      	movs	r1, #0
   1fb16:	0018      	movs	r0, r3
   1fb18:	4b25      	ldr	r3, [pc, #148]	; (1fbb0 <sd_mmc_spi_install_mmc+0xd8>)
   1fb1a:	4798      	blx	r3
   1fb1c:	0003      	movs	r3, r0
   1fb1e:	001a      	movs	r2, r3
   1fb20:	2301      	movs	r3, #1
   1fb22:	4053      	eors	r3, r2
   1fb24:	b2db      	uxtb	r3, r3
   1fb26:	2b00      	cmp	r3, #0
   1fb28:	d001      	beq.n	1fb2e <sd_mmc_spi_install_mmc+0x56>
		return false;
   1fb2a:	2300      	movs	r3, #0
   1fb2c:	e03c      	b.n	1fba8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1fb2e:	4b23      	ldr	r3, [pc, #140]	; (1fbbc <sd_mmc_spi_install_mmc+0xe4>)
   1fb30:	4798      	blx	r3
   1fb32:	0003      	movs	r3, r0
   1fb34:	001a      	movs	r2, r3
   1fb36:	2301      	movs	r3, #1
   1fb38:	4053      	eors	r3, r2
   1fb3a:	b2db      	uxtb	r3, r3
   1fb3c:	2b00      	cmp	r3, #0
   1fb3e:	d001      	beq.n	1fb44 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1fb40:	2300      	movs	r3, #0
   1fb42:	e031      	b.n	1fba8 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1fb44:	4b1e      	ldr	r3, [pc, #120]	; (1fbc0 <sd_mmc_spi_install_mmc+0xe8>)
   1fb46:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1fb48:	4b1e      	ldr	r3, [pc, #120]	; (1fbc4 <sd_mmc_spi_install_mmc+0xec>)
   1fb4a:	681b      	ldr	r3, [r3, #0]
   1fb4c:	7b1b      	ldrb	r3, [r3, #12]
   1fb4e:	2b3f      	cmp	r3, #63	; 0x3f
   1fb50:	d90c      	bls.n	1fb6c <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1fb52:	1dfb      	adds	r3, r7, #7
   1fb54:	0018      	movs	r0, r3
   1fb56:	4b1c      	ldr	r3, [pc, #112]	; (1fbc8 <sd_mmc_spi_install_mmc+0xf0>)
   1fb58:	4798      	blx	r3
   1fb5a:	0003      	movs	r3, r0
   1fb5c:	001a      	movs	r2, r3
   1fb5e:	2301      	movs	r3, #1
   1fb60:	4053      	eors	r3, r2
   1fb62:	b2db      	uxtb	r3, r3
   1fb64:	2b00      	cmp	r3, #0
   1fb66:	d001      	beq.n	1fb6c <sd_mmc_spi_install_mmc+0x94>
			return false;
   1fb68:	2300      	movs	r3, #0
   1fb6a:	e01d      	b.n	1fba8 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1fb6c:	2380      	movs	r3, #128	; 0x80
   1fb6e:	009b      	lsls	r3, r3, #2
   1fb70:	4a16      	ldr	r2, [pc, #88]	; (1fbcc <sd_mmc_spi_install_mmc+0xf4>)
   1fb72:	0019      	movs	r1, r3
   1fb74:	0010      	movs	r0, r2
   1fb76:	4b0e      	ldr	r3, [pc, #56]	; (1fbb0 <sd_mmc_spi_install_mmc+0xd8>)
   1fb78:	4798      	blx	r3
   1fb7a:	0003      	movs	r3, r0
   1fb7c:	001a      	movs	r2, r3
   1fb7e:	2301      	movs	r3, #1
   1fb80:	4053      	eors	r3, r2
   1fb82:	b2db      	uxtb	r3, r3
   1fb84:	2b00      	cmp	r3, #0
   1fb86:	d001      	beq.n	1fb8c <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1fb88:	2300      	movs	r3, #0
   1fb8a:	e00d      	b.n	1fba8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1fb8c:	4b10      	ldr	r3, [pc, #64]	; (1fbd0 <sd_mmc_spi_install_mmc+0xf8>)
   1fb8e:	4798      	blx	r3
   1fb90:	0003      	movs	r3, r0
   1fb92:	001a      	movs	r2, r3
   1fb94:	2301      	movs	r3, #1
   1fb96:	4053      	eors	r3, r2
   1fb98:	b2db      	uxtb	r3, r3
   1fb9a:	2b00      	cmp	r3, #0
   1fb9c:	d001      	beq.n	1fba2 <sd_mmc_spi_install_mmc+0xca>
		return false;
   1fb9e:	2300      	movs	r3, #0
   1fba0:	e002      	b.n	1fba8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1fba2:	4b0c      	ldr	r3, [pc, #48]	; (1fbd4 <sd_mmc_spi_install_mmc+0xfc>)
   1fba4:	4798      	blx	r3
	return true;
   1fba6:	2301      	movs	r3, #1
}
   1fba8:	0018      	movs	r0, r3
   1fbaa:	46bd      	mov	sp, r7
   1fbac:	b002      	add	sp, #8
   1fbae:	bd80      	pop	{r7, pc}
   1fbb0:	00020b61 	.word	0x00020b61
   1fbb4:	0001f0e5 	.word	0x0001f0e5
   1fbb8:	0000113b 	.word	0x0000113b
   1fbbc:	0001f41d 	.word	0x0001f41d
   1fbc0:	0001f48d 	.word	0x0001f48d
   1fbc4:	20004248 	.word	0x20004248
   1fbc8:	0001f2f1 	.word	0x0001f2f1
   1fbcc:	00001110 	.word	0x00001110
   1fbd0:	0001f6a9 	.word	0x0001f6a9
   1fbd4:	0001f8d1 	.word	0x0001f8d1

0001fbd8 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   1fbd8:	b580      	push	{r7, lr}
   1fbda:	b082      	sub	sp, #8
   1fbdc:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1fbde:	1dfb      	adds	r3, r7, #7
   1fbe0:	2200      	movs	r2, #0
   1fbe2:	701a      	strb	r2, [r3, #0]
   1fbe4:	e00c      	b.n	1fc00 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   1fbe6:	1dfb      	adds	r3, r7, #7
   1fbe8:	781b      	ldrb	r3, [r3, #0]
   1fbea:	4a0c      	ldr	r2, [pc, #48]	; (1fc1c <sd_mmc_init+0x44>)
   1fbec:	015b      	lsls	r3, r3, #5
   1fbee:	18d3      	adds	r3, r2, r3
   1fbf0:	330a      	adds	r3, #10
   1fbf2:	2204      	movs	r2, #4
   1fbf4:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1fbf6:	1dfb      	adds	r3, r7, #7
   1fbf8:	781a      	ldrb	r2, [r3, #0]
   1fbfa:	1dfb      	adds	r3, r7, #7
   1fbfc:	3201      	adds	r2, #1
   1fbfe:	701a      	strb	r2, [r3, #0]
   1fc00:	1dfb      	adds	r3, r7, #7
   1fc02:	781b      	ldrb	r3, [r3, #0]
   1fc04:	2b00      	cmp	r3, #0
   1fc06:	d0ee      	beq.n	1fbe6 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   1fc08:	4b05      	ldr	r3, [pc, #20]	; (1fc20 <sd_mmc_init+0x48>)
   1fc0a:	22ff      	movs	r2, #255	; 0xff
   1fc0c:	701a      	strb	r2, [r3, #0]
	driver_init();
   1fc0e:	4b05      	ldr	r3, [pc, #20]	; (1fc24 <sd_mmc_init+0x4c>)
   1fc10:	4798      	blx	r3
}
   1fc12:	46c0      	nop			; (mov r8, r8)
   1fc14:	46bd      	mov	sp, r7
   1fc16:	b002      	add	sp, #8
   1fc18:	bd80      	pop	{r7, pc}
   1fc1a:	46c0      	nop			; (mov r8, r8)
   1fc1c:	20004224 	.word	0x20004224
   1fc20:	20004244 	.word	0x20004244
   1fc24:	00020981 	.word	0x00020981

0001fc28 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1fc28:	b590      	push	{r4, r7, lr}
   1fc2a:	b085      	sub	sp, #20
   1fc2c:	af00      	add	r7, sp, #0
   1fc2e:	0002      	movs	r2, r0
   1fc30:	1dfb      	adds	r3, r7, #7
   1fc32:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1fc34:	230f      	movs	r3, #15
   1fc36:	18fc      	adds	r4, r7, r3
   1fc38:	1dfb      	adds	r3, r7, #7
   1fc3a:	781b      	ldrb	r3, [r3, #0]
   1fc3c:	0018      	movs	r0, r3
   1fc3e:	4b13      	ldr	r3, [pc, #76]	; (1fc8c <sd_mmc_check+0x64>)
   1fc40:	4798      	blx	r3
   1fc42:	0003      	movs	r3, r0
   1fc44:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1fc46:	230f      	movs	r3, #15
   1fc48:	18fb      	adds	r3, r7, r3
   1fc4a:	781b      	ldrb	r3, [r3, #0]
   1fc4c:	2b01      	cmp	r3, #1
   1fc4e:	d005      	beq.n	1fc5c <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1fc50:	4b0f      	ldr	r3, [pc, #60]	; (1fc90 <sd_mmc_check+0x68>)
   1fc52:	4798      	blx	r3
		return sd_mmc_err;
   1fc54:	230f      	movs	r3, #15
   1fc56:	18fb      	adds	r3, r7, r3
   1fc58:	781b      	ldrb	r3, [r3, #0]
   1fc5a:	e012      	b.n	1fc82 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1fc5c:	4b0d      	ldr	r3, [pc, #52]	; (1fc94 <sd_mmc_check+0x6c>)
   1fc5e:	4798      	blx	r3
   1fc60:	1e03      	subs	r3, r0, #0
   1fc62:	d007      	beq.n	1fc74 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1fc64:	4b0c      	ldr	r3, [pc, #48]	; (1fc98 <sd_mmc_check+0x70>)
   1fc66:	681b      	ldr	r3, [r3, #0]
   1fc68:	2200      	movs	r2, #0
   1fc6a:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1fc6c:	4b08      	ldr	r3, [pc, #32]	; (1fc90 <sd_mmc_check+0x68>)
   1fc6e:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1fc70:	2301      	movs	r3, #1
   1fc72:	e006      	b.n	1fc82 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1fc74:	4b08      	ldr	r3, [pc, #32]	; (1fc98 <sd_mmc_check+0x70>)
   1fc76:	681b      	ldr	r3, [r3, #0]
   1fc78:	2203      	movs	r2, #3
   1fc7a:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1fc7c:	4b04      	ldr	r3, [pc, #16]	; (1fc90 <sd_mmc_check+0x68>)
   1fc7e:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1fc80:	2303      	movs	r3, #3
}
   1fc82:	0018      	movs	r0, r3
   1fc84:	46bd      	mov	sp, r7
   1fc86:	b005      	add	sp, #20
   1fc88:	bd90      	pop	{r4, r7, pc}
   1fc8a:	46c0      	nop			; (mov r8, r8)
   1fc8c:	0001f80d 	.word	0x0001f80d
   1fc90:	0001f909 	.word	0x0001f909
   1fc94:	0001f92d 	.word	0x0001f92d
   1fc98:	20004248 	.word	0x20004248

0001fc9c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1fc9c:	b580      	push	{r7, lr}
   1fc9e:	b082      	sub	sp, #8
   1fca0:	af00      	add	r7, sp, #0
   1fca2:	0002      	movs	r2, r0
   1fca4:	1dfb      	adds	r3, r7, #7
   1fca6:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1fca8:	1dfb      	adds	r3, r7, #7
   1fcaa:	781b      	ldrb	r3, [r3, #0]
   1fcac:	0018      	movs	r0, r3
   1fcae:	4b07      	ldr	r3, [pc, #28]	; (1fccc <sd_mmc_get_type+0x30>)
   1fcb0:	4798      	blx	r3
   1fcb2:	1e03      	subs	r3, r0, #0
   1fcb4:	d001      	beq.n	1fcba <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1fcb6:	2300      	movs	r3, #0
   1fcb8:	e004      	b.n	1fcc4 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1fcba:	4b05      	ldr	r3, [pc, #20]	; (1fcd0 <sd_mmc_get_type+0x34>)
   1fcbc:	4798      	blx	r3
	return sd_mmc_card->type;
   1fcbe:	4b05      	ldr	r3, [pc, #20]	; (1fcd4 <sd_mmc_get_type+0x38>)
   1fcc0:	681b      	ldr	r3, [r3, #0]
   1fcc2:	7adb      	ldrb	r3, [r3, #11]
}
   1fcc4:	0018      	movs	r0, r3
   1fcc6:	46bd      	mov	sp, r7
   1fcc8:	b002      	add	sp, #8
   1fcca:	bd80      	pop	{r7, pc}
   1fccc:	0001f80d 	.word	0x0001f80d
   1fcd0:	0001f909 	.word	0x0001f909
   1fcd4:	20004248 	.word	0x20004248

0001fcd8 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1fcd8:	b580      	push	{r7, lr}
   1fcda:	b082      	sub	sp, #8
   1fcdc:	af00      	add	r7, sp, #0
   1fcde:	0002      	movs	r2, r0
   1fce0:	1dfb      	adds	r3, r7, #7
   1fce2:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1fce4:	1dfb      	adds	r3, r7, #7
   1fce6:	781b      	ldrb	r3, [r3, #0]
   1fce8:	0018      	movs	r0, r3
   1fcea:	4b07      	ldr	r3, [pc, #28]	; (1fd08 <sd_mmc_get_capacity+0x30>)
   1fcec:	4798      	blx	r3
   1fcee:	1e03      	subs	r3, r0, #0
   1fcf0:	d001      	beq.n	1fcf6 <sd_mmc_get_capacity+0x1e>
		return 0;
   1fcf2:	2300      	movs	r3, #0
   1fcf4:	e004      	b.n	1fd00 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1fcf6:	4b05      	ldr	r3, [pc, #20]	; (1fd0c <sd_mmc_get_capacity+0x34>)
   1fcf8:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1fcfa:	4b05      	ldr	r3, [pc, #20]	; (1fd10 <sd_mmc_get_capacity+0x38>)
   1fcfc:	681b      	ldr	r3, [r3, #0]
   1fcfe:	685b      	ldr	r3, [r3, #4]
}
   1fd00:	0018      	movs	r0, r3
   1fd02:	46bd      	mov	sp, r7
   1fd04:	b002      	add	sp, #8
   1fd06:	bd80      	pop	{r7, pc}
   1fd08:	0001f80d 	.word	0x0001f80d
   1fd0c:	0001f909 	.word	0x0001f909
   1fd10:	20004248 	.word	0x20004248

0001fd14 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1fd14:	b580      	push	{r7, lr}
   1fd16:	b082      	sub	sp, #8
   1fd18:	af00      	add	r7, sp, #0
   1fd1a:	0002      	movs	r2, r0
   1fd1c:	1dfb      	adds	r3, r7, #7
   1fd1e:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1fd20:	2300      	movs	r3, #0
}
   1fd22:	0018      	movs	r0, r3
   1fd24:	46bd      	mov	sp, r7
   1fd26:	b002      	add	sp, #8
   1fd28:	bd80      	pop	{r7, pc}
	...

0001fd2c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1fd2c:	b590      	push	{r4, r7, lr}
   1fd2e:	b089      	sub	sp, #36	; 0x24
   1fd30:	af02      	add	r7, sp, #8
   1fd32:	6039      	str	r1, [r7, #0]
   1fd34:	0011      	movs	r1, r2
   1fd36:	1dfb      	adds	r3, r7, #7
   1fd38:	1c02      	adds	r2, r0, #0
   1fd3a:	701a      	strb	r2, [r3, #0]
   1fd3c:	1d3b      	adds	r3, r7, #4
   1fd3e:	1c0a      	adds	r2, r1, #0
   1fd40:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1fd42:	230f      	movs	r3, #15
   1fd44:	18fc      	adds	r4, r7, r3
   1fd46:	1dfb      	adds	r3, r7, #7
   1fd48:	781b      	ldrb	r3, [r3, #0]
   1fd4a:	0018      	movs	r0, r3
   1fd4c:	4b29      	ldr	r3, [pc, #164]	; (1fdf4 <sd_mmc_init_read_blocks+0xc8>)
   1fd4e:	4798      	blx	r3
   1fd50:	0003      	movs	r3, r0
   1fd52:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1fd54:	230f      	movs	r3, #15
   1fd56:	18fb      	adds	r3, r7, r3
   1fd58:	781b      	ldrb	r3, [r3, #0]
   1fd5a:	2b00      	cmp	r3, #0
   1fd5c:	d003      	beq.n	1fd66 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1fd5e:	230f      	movs	r3, #15
   1fd60:	18fb      	adds	r3, r7, r3
   1fd62:	781b      	ldrb	r3, [r3, #0]
   1fd64:	e041      	b.n	1fdea <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1fd66:	4b24      	ldr	r3, [pc, #144]	; (1fdf8 <sd_mmc_init_read_blocks+0xcc>)
   1fd68:	4798      	blx	r3
   1fd6a:	0003      	movs	r3, r0
   1fd6c:	001a      	movs	r2, r3
   1fd6e:	2301      	movs	r3, #1
   1fd70:	4053      	eors	r3, r2
   1fd72:	b2db      	uxtb	r3, r3
   1fd74:	2b00      	cmp	r3, #0
   1fd76:	d003      	beq.n	1fd80 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1fd78:	4b20      	ldr	r3, [pc, #128]	; (1fdfc <sd_mmc_init_read_blocks+0xd0>)
   1fd7a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1fd7c:	2305      	movs	r3, #5
   1fd7e:	e034      	b.n	1fdea <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1fd80:	1d3b      	adds	r3, r7, #4
   1fd82:	881b      	ldrh	r3, [r3, #0]
   1fd84:	2b01      	cmp	r3, #1
   1fd86:	d902      	bls.n	1fd8e <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1fd88:	4b1d      	ldr	r3, [pc, #116]	; (1fe00 <sd_mmc_init_read_blocks+0xd4>)
   1fd8a:	617b      	str	r3, [r7, #20]
   1fd8c:	e001      	b.n	1fd92 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1fd8e:	4b1d      	ldr	r3, [pc, #116]	; (1fe04 <sd_mmc_init_read_blocks+0xd8>)
   1fd90:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1fd92:	4b1d      	ldr	r3, [pc, #116]	; (1fe08 <sd_mmc_init_read_blocks+0xdc>)
   1fd94:	681b      	ldr	r3, [r3, #0]
   1fd96:	7adb      	ldrb	r3, [r3, #11]
   1fd98:	001a      	movs	r2, r3
   1fd9a:	2308      	movs	r3, #8
   1fd9c:	4013      	ands	r3, r2
   1fd9e:	d002      	beq.n	1fda6 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1fda0:	683b      	ldr	r3, [r7, #0]
   1fda2:	613b      	str	r3, [r7, #16]
   1fda4:	e002      	b.n	1fdac <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1fda6:	683b      	ldr	r3, [r7, #0]
   1fda8:	025b      	lsls	r3, r3, #9
   1fdaa:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1fdac:	1d3b      	adds	r3, r7, #4
   1fdae:	881c      	ldrh	r4, [r3, #0]
   1fdb0:	2380      	movs	r3, #128	; 0x80
   1fdb2:	009a      	lsls	r2, r3, #2
   1fdb4:	6939      	ldr	r1, [r7, #16]
   1fdb6:	6978      	ldr	r0, [r7, #20]
   1fdb8:	2301      	movs	r3, #1
   1fdba:	9300      	str	r3, [sp, #0]
   1fdbc:	0023      	movs	r3, r4
   1fdbe:	4c13      	ldr	r4, [pc, #76]	; (1fe0c <sd_mmc_init_read_blocks+0xe0>)
   1fdc0:	47a0      	blx	r4
   1fdc2:	0003      	movs	r3, r0
   1fdc4:	001a      	movs	r2, r3
   1fdc6:	2301      	movs	r3, #1
   1fdc8:	4053      	eors	r3, r2
   1fdca:	b2db      	uxtb	r3, r3
   1fdcc:	2b00      	cmp	r3, #0
   1fdce:	d003      	beq.n	1fdd8 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1fdd0:	4b0a      	ldr	r3, [pc, #40]	; (1fdfc <sd_mmc_init_read_blocks+0xd0>)
   1fdd2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1fdd4:	2305      	movs	r3, #5
   1fdd6:	e008      	b.n	1fdea <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1fdd8:	4b0d      	ldr	r3, [pc, #52]	; (1fe10 <sd_mmc_init_read_blocks+0xe4>)
   1fdda:	1d3a      	adds	r2, r7, #4
   1fddc:	8812      	ldrh	r2, [r2, #0]
   1fdde:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1fde0:	4b0c      	ldr	r3, [pc, #48]	; (1fe14 <sd_mmc_init_read_blocks+0xe8>)
   1fde2:	1d3a      	adds	r2, r7, #4
   1fde4:	8812      	ldrh	r2, [r2, #0]
   1fde6:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1fde8:	2300      	movs	r3, #0
}
   1fdea:	0018      	movs	r0, r3
   1fdec:	46bd      	mov	sp, r7
   1fdee:	b007      	add	sp, #28
   1fdf0:	bd90      	pop	{r4, r7, pc}
   1fdf2:	46c0      	nop			; (mov r8, r8)
   1fdf4:	0001f80d 	.word	0x0001f80d
   1fdf8:	0001f6a9 	.word	0x0001f6a9
   1fdfc:	0001f909 	.word	0x0001f909
   1fe00:	00101112 	.word	0x00101112
   1fe04:	00081111 	.word	0x00081111
   1fe08:	20004248 	.word	0x20004248
   1fe0c:	00020b89 	.word	0x00020b89
   1fe10:	2000424e 	.word	0x2000424e
   1fe14:	2000424c 	.word	0x2000424c

0001fe18 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1fe18:	b580      	push	{r7, lr}
   1fe1a:	b082      	sub	sp, #8
   1fe1c:	af00      	add	r7, sp, #0
   1fe1e:	6078      	str	r0, [r7, #4]
   1fe20:	000a      	movs	r2, r1
   1fe22:	1cbb      	adds	r3, r7, #2
   1fe24:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1fe26:	1cbb      	adds	r3, r7, #2
   1fe28:	881a      	ldrh	r2, [r3, #0]
   1fe2a:	687b      	ldr	r3, [r7, #4]
   1fe2c:	0011      	movs	r1, r2
   1fe2e:	0018      	movs	r0, r3
   1fe30:	4b0d      	ldr	r3, [pc, #52]	; (1fe68 <sd_mmc_start_read_blocks+0x50>)
   1fe32:	4798      	blx	r3
   1fe34:	0003      	movs	r3, r0
   1fe36:	001a      	movs	r2, r3
   1fe38:	2301      	movs	r3, #1
   1fe3a:	4053      	eors	r3, r2
   1fe3c:	b2db      	uxtb	r3, r3
   1fe3e:	2b00      	cmp	r3, #0
   1fe40:	d004      	beq.n	1fe4c <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1fe42:	4b0a      	ldr	r3, [pc, #40]	; (1fe6c <sd_mmc_start_read_blocks+0x54>)
   1fe44:	2200      	movs	r2, #0
   1fe46:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1fe48:	2305      	movs	r3, #5
   1fe4a:	e008      	b.n	1fe5e <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1fe4c:	4b07      	ldr	r3, [pc, #28]	; (1fe6c <sd_mmc_start_read_blocks+0x54>)
   1fe4e:	881a      	ldrh	r2, [r3, #0]
   1fe50:	1cbb      	adds	r3, r7, #2
   1fe52:	881b      	ldrh	r3, [r3, #0]
   1fe54:	1ad3      	subs	r3, r2, r3
   1fe56:	b29a      	uxth	r2, r3
   1fe58:	4b04      	ldr	r3, [pc, #16]	; (1fe6c <sd_mmc_start_read_blocks+0x54>)
   1fe5a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1fe5c:	2300      	movs	r3, #0
}
   1fe5e:	0018      	movs	r0, r3
   1fe60:	46bd      	mov	sp, r7
   1fe62:	b002      	add	sp, #8
   1fe64:	bd80      	pop	{r7, pc}
   1fe66:	46c0      	nop			; (mov r8, r8)
   1fe68:	00020e59 	.word	0x00020e59
   1fe6c:	2000424e 	.word	0x2000424e

0001fe70 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1fe70:	b580      	push	{r7, lr}
   1fe72:	b082      	sub	sp, #8
   1fe74:	af00      	add	r7, sp, #0
   1fe76:	0002      	movs	r2, r0
   1fe78:	1dfb      	adds	r3, r7, #7
   1fe7a:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1fe7c:	4b1c      	ldr	r3, [pc, #112]	; (1fef0 <sd_mmc_wait_end_of_read_blocks+0x80>)
   1fe7e:	4798      	blx	r3
   1fe80:	0003      	movs	r3, r0
   1fe82:	001a      	movs	r2, r3
   1fe84:	2301      	movs	r3, #1
   1fe86:	4053      	eors	r3, r2
   1fe88:	b2db      	uxtb	r3, r3
   1fe8a:	2b00      	cmp	r3, #0
   1fe8c:	d001      	beq.n	1fe92 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1fe8e:	2305      	movs	r3, #5
   1fe90:	e029      	b.n	1fee6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1fe92:	1dfb      	adds	r3, r7, #7
   1fe94:	781b      	ldrb	r3, [r3, #0]
   1fe96:	2b00      	cmp	r3, #0
   1fe98:	d003      	beq.n	1fea2 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1fe9a:	4b16      	ldr	r3, [pc, #88]	; (1fef4 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1fe9c:	2200      	movs	r2, #0
   1fe9e:	801a      	strh	r2, [r3, #0]
   1fea0:	e005      	b.n	1feae <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1fea2:	4b14      	ldr	r3, [pc, #80]	; (1fef4 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1fea4:	881b      	ldrh	r3, [r3, #0]
   1fea6:	2b00      	cmp	r3, #0
   1fea8:	d001      	beq.n	1feae <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1feaa:	2300      	movs	r3, #0
   1feac:	e01b      	b.n	1fee6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1feae:	4b12      	ldr	r3, [pc, #72]	; (1fef8 <sd_mmc_wait_end_of_read_blocks+0x88>)
   1feb0:	881b      	ldrh	r3, [r3, #0]
   1feb2:	2b01      	cmp	r3, #1
   1feb4:	d103      	bne.n	1febe <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1feb6:	4b11      	ldr	r3, [pc, #68]	; (1fefc <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1feb8:	4798      	blx	r3
		return SD_MMC_OK;
   1feba:	2300      	movs	r3, #0
   1febc:	e013      	b.n	1fee6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1febe:	4b10      	ldr	r3, [pc, #64]	; (1ff00 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1fec0:	2100      	movs	r1, #0
   1fec2:	0018      	movs	r0, r3
   1fec4:	4b0f      	ldr	r3, [pc, #60]	; (1ff04 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1fec6:	4798      	blx	r3
   1fec8:	0003      	movs	r3, r0
   1feca:	001a      	movs	r2, r3
   1fecc:	2301      	movs	r3, #1
   1fece:	4053      	eors	r3, r2
   1fed0:	b2db      	uxtb	r3, r3
   1fed2:	2b00      	cmp	r3, #0
   1fed4:	d004      	beq.n	1fee0 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1fed6:	4b0a      	ldr	r3, [pc, #40]	; (1ff00 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1fed8:	2100      	movs	r1, #0
   1feda:	0018      	movs	r0, r3
   1fedc:	4b09      	ldr	r3, [pc, #36]	; (1ff04 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1fede:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1fee0:	4b06      	ldr	r3, [pc, #24]	; (1fefc <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1fee2:	4798      	blx	r3
	return SD_MMC_OK;
   1fee4:	2300      	movs	r3, #0
}
   1fee6:	0018      	movs	r0, r3
   1fee8:	46bd      	mov	sp, r7
   1feea:	b002      	add	sp, #8
   1feec:	bd80      	pop	{r7, pc}
   1feee:	46c0      	nop			; (mov r8, r8)
   1fef0:	00020efd 	.word	0x00020efd
   1fef4:	2000424e 	.word	0x2000424e
   1fef8:	2000424c 	.word	0x2000424c
   1fefc:	0001f909 	.word	0x0001f909
   1ff00:	0000310c 	.word	0x0000310c
   1ff04:	00020b61 	.word	0x00020b61

0001ff08 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1ff08:	b590      	push	{r4, r7, lr}
   1ff0a:	b089      	sub	sp, #36	; 0x24
   1ff0c:	af02      	add	r7, sp, #8
   1ff0e:	6039      	str	r1, [r7, #0]
   1ff10:	0011      	movs	r1, r2
   1ff12:	1dfb      	adds	r3, r7, #7
   1ff14:	1c02      	adds	r2, r0, #0
   1ff16:	701a      	strb	r2, [r3, #0]
   1ff18:	1d3b      	adds	r3, r7, #4
   1ff1a:	1c0a      	adds	r2, r1, #0
   1ff1c:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1ff1e:	230f      	movs	r3, #15
   1ff20:	18fc      	adds	r4, r7, r3
   1ff22:	1dfb      	adds	r3, r7, #7
   1ff24:	781b      	ldrb	r3, [r3, #0]
   1ff26:	0018      	movs	r0, r3
   1ff28:	4b28      	ldr	r3, [pc, #160]	; (1ffcc <sd_mmc_init_write_blocks+0xc4>)
   1ff2a:	4798      	blx	r3
   1ff2c:	0003      	movs	r3, r0
   1ff2e:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1ff30:	230f      	movs	r3, #15
   1ff32:	18fb      	adds	r3, r7, r3
   1ff34:	781b      	ldrb	r3, [r3, #0]
   1ff36:	2b00      	cmp	r3, #0
   1ff38:	d003      	beq.n	1ff42 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1ff3a:	230f      	movs	r3, #15
   1ff3c:	18fb      	adds	r3, r7, r3
   1ff3e:	781b      	ldrb	r3, [r3, #0]
   1ff40:	e03f      	b.n	1ffc2 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1ff42:	1dfb      	adds	r3, r7, #7
   1ff44:	781b      	ldrb	r3, [r3, #0]
   1ff46:	0018      	movs	r0, r3
   1ff48:	4b21      	ldr	r3, [pc, #132]	; (1ffd0 <sd_mmc_init_write_blocks+0xc8>)
   1ff4a:	4798      	blx	r3
   1ff4c:	1e03      	subs	r3, r0, #0
   1ff4e:	d003      	beq.n	1ff58 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1ff50:	4b20      	ldr	r3, [pc, #128]	; (1ffd4 <sd_mmc_init_write_blocks+0xcc>)
   1ff52:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1ff54:	2307      	movs	r3, #7
   1ff56:	e034      	b.n	1ffc2 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1ff58:	1d3b      	adds	r3, r7, #4
   1ff5a:	881b      	ldrh	r3, [r3, #0]
   1ff5c:	2b01      	cmp	r3, #1
   1ff5e:	d902      	bls.n	1ff66 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1ff60:	4b1d      	ldr	r3, [pc, #116]	; (1ffd8 <sd_mmc_init_write_blocks+0xd0>)
   1ff62:	617b      	str	r3, [r7, #20]
   1ff64:	e001      	b.n	1ff6a <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1ff66:	4b1d      	ldr	r3, [pc, #116]	; (1ffdc <sd_mmc_init_write_blocks+0xd4>)
   1ff68:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1ff6a:	4b1d      	ldr	r3, [pc, #116]	; (1ffe0 <sd_mmc_init_write_blocks+0xd8>)
   1ff6c:	681b      	ldr	r3, [r3, #0]
   1ff6e:	7adb      	ldrb	r3, [r3, #11]
   1ff70:	001a      	movs	r2, r3
   1ff72:	2308      	movs	r3, #8
   1ff74:	4013      	ands	r3, r2
   1ff76:	d002      	beq.n	1ff7e <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1ff78:	683b      	ldr	r3, [r7, #0]
   1ff7a:	613b      	str	r3, [r7, #16]
   1ff7c:	e002      	b.n	1ff84 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1ff7e:	683b      	ldr	r3, [r7, #0]
   1ff80:	025b      	lsls	r3, r3, #9
   1ff82:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1ff84:	1d3b      	adds	r3, r7, #4
   1ff86:	881c      	ldrh	r4, [r3, #0]
   1ff88:	2380      	movs	r3, #128	; 0x80
   1ff8a:	009a      	lsls	r2, r3, #2
   1ff8c:	6939      	ldr	r1, [r7, #16]
   1ff8e:	6978      	ldr	r0, [r7, #20]
   1ff90:	2301      	movs	r3, #1
   1ff92:	9300      	str	r3, [sp, #0]
   1ff94:	0023      	movs	r3, r4
   1ff96:	4c13      	ldr	r4, [pc, #76]	; (1ffe4 <sd_mmc_init_write_blocks+0xdc>)
   1ff98:	47a0      	blx	r4
   1ff9a:	0003      	movs	r3, r0
   1ff9c:	001a      	movs	r2, r3
   1ff9e:	2301      	movs	r3, #1
   1ffa0:	4053      	eors	r3, r2
   1ffa2:	b2db      	uxtb	r3, r3
   1ffa4:	2b00      	cmp	r3, #0
   1ffa6:	d003      	beq.n	1ffb0 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1ffa8:	4b0a      	ldr	r3, [pc, #40]	; (1ffd4 <sd_mmc_init_write_blocks+0xcc>)
   1ffaa:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1ffac:	2305      	movs	r3, #5
   1ffae:	e008      	b.n	1ffc2 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1ffb0:	4b0d      	ldr	r3, [pc, #52]	; (1ffe8 <sd_mmc_init_write_blocks+0xe0>)
   1ffb2:	1d3a      	adds	r2, r7, #4
   1ffb4:	8812      	ldrh	r2, [r2, #0]
   1ffb6:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1ffb8:	4b0c      	ldr	r3, [pc, #48]	; (1ffec <sd_mmc_init_write_blocks+0xe4>)
   1ffba:	1d3a      	adds	r2, r7, #4
   1ffbc:	8812      	ldrh	r2, [r2, #0]
   1ffbe:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1ffc0:	2300      	movs	r3, #0
}
   1ffc2:	0018      	movs	r0, r3
   1ffc4:	46bd      	mov	sp, r7
   1ffc6:	b007      	add	sp, #28
   1ffc8:	bd90      	pop	{r4, r7, pc}
   1ffca:	46c0      	nop			; (mov r8, r8)
   1ffcc:	0001f80d 	.word	0x0001f80d
   1ffd0:	0001fd15 	.word	0x0001fd15
   1ffd4:	0001f909 	.word	0x0001f909
   1ffd8:	00109119 	.word	0x00109119
   1ffdc:	00089118 	.word	0x00089118
   1ffe0:	20004248 	.word	0x20004248
   1ffe4:	00020b89 	.word	0x00020b89
   1ffe8:	2000424e 	.word	0x2000424e
   1ffec:	2000424c 	.word	0x2000424c

0001fff0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1fff0:	b580      	push	{r7, lr}
   1fff2:	b082      	sub	sp, #8
   1fff4:	af00      	add	r7, sp, #0
   1fff6:	6078      	str	r0, [r7, #4]
   1fff8:	000a      	movs	r2, r1
   1fffa:	1cbb      	adds	r3, r7, #2
   1fffc:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1fffe:	1cbb      	adds	r3, r7, #2
   20000:	881a      	ldrh	r2, [r3, #0]
   20002:	687b      	ldr	r3, [r7, #4]
   20004:	0011      	movs	r1, r2
   20006:	0018      	movs	r0, r3
   20008:	4b0d      	ldr	r3, [pc, #52]	; (20040 <sd_mmc_start_write_blocks+0x50>)
   2000a:	4798      	blx	r3
   2000c:	0003      	movs	r3, r0
   2000e:	001a      	movs	r2, r3
   20010:	2301      	movs	r3, #1
   20012:	4053      	eors	r3, r2
   20014:	b2db      	uxtb	r3, r3
   20016:	2b00      	cmp	r3, #0
   20018:	d004      	beq.n	20024 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   2001a:	4b0a      	ldr	r3, [pc, #40]	; (20044 <sd_mmc_start_write_blocks+0x54>)
   2001c:	2200      	movs	r2, #0
   2001e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   20020:	2305      	movs	r3, #5
   20022:	e008      	b.n	20036 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   20024:	4b07      	ldr	r3, [pc, #28]	; (20044 <sd_mmc_start_write_blocks+0x54>)
   20026:	881a      	ldrh	r2, [r3, #0]
   20028:	1cbb      	adds	r3, r7, #2
   2002a:	881b      	ldrh	r3, [r3, #0]
   2002c:	1ad3      	subs	r3, r2, r3
   2002e:	b29a      	uxth	r2, r3
   20030:	4b04      	ldr	r3, [pc, #16]	; (20044 <sd_mmc_start_write_blocks+0x54>)
   20032:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   20034:	2300      	movs	r3, #0
}
   20036:	0018      	movs	r0, r3
   20038:	46bd      	mov	sp, r7
   2003a:	b002      	add	sp, #8
   2003c:	bd80      	pop	{r7, pc}
   2003e:	46c0      	nop			; (mov r8, r8)
   20040:	00020f09 	.word	0x00020f09
   20044:	2000424e 	.word	0x2000424e

00020048 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   20048:	b580      	push	{r7, lr}
   2004a:	b082      	sub	sp, #8
   2004c:	af00      	add	r7, sp, #0
   2004e:	0002      	movs	r2, r0
   20050:	1dfb      	adds	r3, r7, #7
   20052:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   20054:	4b13      	ldr	r3, [pc, #76]	; (200a4 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   20056:	4798      	blx	r3
   20058:	0003      	movs	r3, r0
   2005a:	001a      	movs	r2, r3
   2005c:	2301      	movs	r3, #1
   2005e:	4053      	eors	r3, r2
   20060:	b2db      	uxtb	r3, r3
   20062:	2b00      	cmp	r3, #0
   20064:	d001      	beq.n	2006a <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   20066:	2305      	movs	r3, #5
   20068:	e018      	b.n	2009c <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   2006a:	1dfb      	adds	r3, r7, #7
   2006c:	781b      	ldrb	r3, [r3, #0]
   2006e:	2b00      	cmp	r3, #0
   20070:	d003      	beq.n	2007a <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   20072:	4b0d      	ldr	r3, [pc, #52]	; (200a8 <sd_mmc_wait_end_of_write_blocks+0x60>)
   20074:	2200      	movs	r2, #0
   20076:	801a      	strh	r2, [r3, #0]
   20078:	e005      	b.n	20086 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   2007a:	4b0b      	ldr	r3, [pc, #44]	; (200a8 <sd_mmc_wait_end_of_write_blocks+0x60>)
   2007c:	881b      	ldrh	r3, [r3, #0]
   2007e:	2b00      	cmp	r3, #0
   20080:	d001      	beq.n	20086 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   20082:	2300      	movs	r3, #0
   20084:	e00a      	b.n	2009c <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   20086:	4b09      	ldr	r3, [pc, #36]	; (200ac <sd_mmc_wait_end_of_write_blocks+0x64>)
   20088:	881b      	ldrh	r3, [r3, #0]
   2008a:	2b01      	cmp	r3, #1
   2008c:	d103      	bne.n	20096 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   2008e:	4b08      	ldr	r3, [pc, #32]	; (200b0 <sd_mmc_wait_end_of_write_blocks+0x68>)
   20090:	4798      	blx	r3
		return SD_MMC_OK;
   20092:	2300      	movs	r3, #0
   20094:	e002      	b.n	2009c <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   20096:	4b06      	ldr	r3, [pc, #24]	; (200b0 <sd_mmc_wait_end_of_write_blocks+0x68>)
   20098:	4798      	blx	r3
	return SD_MMC_OK;
   2009a:	2300      	movs	r3, #0
}
   2009c:	0018      	movs	r0, r3
   2009e:	46bd      	mov	sp, r7
   200a0:	b002      	add	sp, #8
   200a2:	bd80      	pop	{r7, pc}
   200a4:	00020fc9 	.word	0x00020fc9
   200a8:	2000424e 	.word	0x2000424e
   200ac:	2000424c 	.word	0x2000424c
   200b0:	0001f909 	.word	0x0001f909

000200b4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   200b4:	b580      	push	{r7, lr}
   200b6:	b082      	sub	sp, #8
   200b8:	af00      	add	r7, sp, #0
   200ba:	0002      	movs	r2, r0
   200bc:	1dfb      	adds	r3, r7, #7
   200be:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   200c0:	1dfb      	adds	r3, r7, #7
   200c2:	781b      	ldrb	r3, [r3, #0]
   200c4:	0018      	movs	r0, r3
   200c6:	4b16      	ldr	r3, [pc, #88]	; (20120 <sd_mmc_test_unit_ready+0x6c>)
   200c8:	4798      	blx	r3
   200ca:	0003      	movs	r3, r0
   200cc:	2b01      	cmp	r3, #1
   200ce:	d019      	beq.n	20104 <sd_mmc_test_unit_ready+0x50>
   200d0:	2b02      	cmp	r3, #2
   200d2:	d019      	beq.n	20108 <sd_mmc_test_unit_ready+0x54>
   200d4:	2b00      	cmp	r3, #0
   200d6:	d11e      	bne.n	20116 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   200d8:	1dfb      	adds	r3, r7, #7
   200da:	781b      	ldrb	r3, [r3, #0]
   200dc:	4a11      	ldr	r2, [pc, #68]	; (20124 <sd_mmc_test_unit_ready+0x70>)
   200de:	5cd3      	ldrb	r3, [r2, r3]
   200e0:	2b00      	cmp	r3, #0
   200e2:	d001      	beq.n	200e8 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   200e4:	2302      	movs	r3, #2
   200e6:	e017      	b.n	20118 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   200e8:	1dfb      	adds	r3, r7, #7
   200ea:	781b      	ldrb	r3, [r3, #0]
   200ec:	0018      	movs	r0, r3
   200ee:	4b0e      	ldr	r3, [pc, #56]	; (20128 <sd_mmc_test_unit_ready+0x74>)
   200f0:	4798      	blx	r3
   200f2:	0003      	movs	r3, r0
   200f4:	001a      	movs	r2, r3
   200f6:	2303      	movs	r3, #3
   200f8:	4013      	ands	r3, r2
   200fa:	d001      	beq.n	20100 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   200fc:	2300      	movs	r3, #0
   200fe:	e00b      	b.n	20118 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   20100:	2302      	movs	r3, #2
   20102:	e009      	b.n	20118 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   20104:	2303      	movs	r3, #3
   20106:	e007      	b.n	20118 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   20108:	1dfb      	adds	r3, r7, #7
   2010a:	781b      	ldrb	r3, [r3, #0]
   2010c:	4a05      	ldr	r2, [pc, #20]	; (20124 <sd_mmc_test_unit_ready+0x70>)
   2010e:	2100      	movs	r1, #0
   20110:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   20112:	2302      	movs	r3, #2
   20114:	e000      	b.n	20118 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   20116:	2301      	movs	r3, #1
	}
}
   20118:	0018      	movs	r0, r3
   2011a:	46bd      	mov	sp, r7
   2011c:	b002      	add	sp, #8
   2011e:	bd80      	pop	{r7, pc}
   20120:	0001fc29 	.word	0x0001fc29
   20124:	20004250 	.word	0x20004250
   20128:	0001fc9d 	.word	0x0001fc9d

0002012c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   2012c:	b580      	push	{r7, lr}
   2012e:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   20130:	2000      	movs	r0, #0
   20132:	4b03      	ldr	r3, [pc, #12]	; (20140 <sd_mmc_test_unit_ready_0+0x14>)
   20134:	4798      	blx	r3
   20136:	0003      	movs	r3, r0
}
   20138:	0018      	movs	r0, r3
   2013a:	46bd      	mov	sp, r7
   2013c:	bd80      	pop	{r7, pc}
   2013e:	46c0      	nop			; (mov r8, r8)
   20140:	000200b5 	.word	0x000200b5

00020144 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   20144:	b580      	push	{r7, lr}
   20146:	b082      	sub	sp, #8
   20148:	af00      	add	r7, sp, #0
   2014a:	0002      	movs	r2, r0
   2014c:	6039      	str	r1, [r7, #0]
   2014e:	1dfb      	adds	r3, r7, #7
   20150:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   20152:	1dfb      	adds	r3, r7, #7
   20154:	781b      	ldrb	r3, [r3, #0]
   20156:	0018      	movs	r0, r3
   20158:	4b08      	ldr	r3, [pc, #32]	; (2017c <sd_mmc_read_capacity+0x38>)
   2015a:	4798      	blx	r3
   2015c:	0003      	movs	r3, r0
   2015e:	005b      	lsls	r3, r3, #1
   20160:	1e5a      	subs	r2, r3, #1
   20162:	683b      	ldr	r3, [r7, #0]
   20164:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   20166:	1dfb      	adds	r3, r7, #7
   20168:	781b      	ldrb	r3, [r3, #0]
   2016a:	0018      	movs	r0, r3
   2016c:	4b04      	ldr	r3, [pc, #16]	; (20180 <sd_mmc_read_capacity+0x3c>)
   2016e:	4798      	blx	r3
   20170:	0003      	movs	r3, r0
}
   20172:	0018      	movs	r0, r3
   20174:	46bd      	mov	sp, r7
   20176:	b002      	add	sp, #8
   20178:	bd80      	pop	{r7, pc}
   2017a:	46c0      	nop			; (mov r8, r8)
   2017c:	0001fcd9 	.word	0x0001fcd9
   20180:	000200b5 	.word	0x000200b5

00020184 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   20184:	b580      	push	{r7, lr}
   20186:	b082      	sub	sp, #8
   20188:	af00      	add	r7, sp, #0
   2018a:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   2018c:	687b      	ldr	r3, [r7, #4]
   2018e:	0019      	movs	r1, r3
   20190:	2000      	movs	r0, #0
   20192:	4b03      	ldr	r3, [pc, #12]	; (201a0 <sd_mmc_read_capacity_0+0x1c>)
   20194:	4798      	blx	r3
   20196:	0003      	movs	r3, r0
}
   20198:	0018      	movs	r0, r3
   2019a:	46bd      	mov	sp, r7
   2019c:	b002      	add	sp, #8
   2019e:	bd80      	pop	{r7, pc}
   201a0:	00020145 	.word	0x00020145

000201a4 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   201a4:	b580      	push	{r7, lr}
   201a6:	b082      	sub	sp, #8
   201a8:	af00      	add	r7, sp, #0
   201aa:	0002      	movs	r2, r0
   201ac:	1dfb      	adds	r3, r7, #7
   201ae:	701a      	strb	r2, [r3, #0]
   201b0:	1dbb      	adds	r3, r7, #6
   201b2:	1c0a      	adds	r2, r1, #0
   201b4:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   201b6:	1dfb      	adds	r3, r7, #7
   201b8:	781b      	ldrb	r3, [r3, #0]
   201ba:	4a04      	ldr	r2, [pc, #16]	; (201cc <sd_mmc_unload+0x28>)
   201bc:	1db9      	adds	r1, r7, #6
   201be:	7809      	ldrb	r1, [r1, #0]
   201c0:	54d1      	strb	r1, [r2, r3]
	return true;
   201c2:	2301      	movs	r3, #1
}
   201c4:	0018      	movs	r0, r3
   201c6:	46bd      	mov	sp, r7
   201c8:	b002      	add	sp, #8
   201ca:	bd80      	pop	{r7, pc}
   201cc:	20004250 	.word	0x20004250

000201d0 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   201d0:	b580      	push	{r7, lr}
   201d2:	b082      	sub	sp, #8
   201d4:	af00      	add	r7, sp, #0
   201d6:	0002      	movs	r2, r0
   201d8:	1dfb      	adds	r3, r7, #7
   201da:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   201dc:	1dfb      	adds	r3, r7, #7
   201de:	781b      	ldrb	r3, [r3, #0]
   201e0:	0019      	movs	r1, r3
   201e2:	2000      	movs	r0, #0
   201e4:	4b03      	ldr	r3, [pc, #12]	; (201f4 <sd_mmc_unload_0+0x24>)
   201e6:	4798      	blx	r3
   201e8:	0003      	movs	r3, r0
}
   201ea:	0018      	movs	r0, r3
   201ec:	46bd      	mov	sp, r7
   201ee:	b002      	add	sp, #8
   201f0:	bd80      	pop	{r7, pc}
   201f2:	46c0      	nop			; (mov r8, r8)
   201f4:	000201a5 	.word	0x000201a5

000201f8 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   201f8:	b580      	push	{r7, lr}
   201fa:	b082      	sub	sp, #8
   201fc:	af00      	add	r7, sp, #0
   201fe:	0002      	movs	r2, r0
   20200:	1dfb      	adds	r3, r7, #7
   20202:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   20204:	1dfb      	adds	r3, r7, #7
   20206:	781b      	ldrb	r3, [r3, #0]
   20208:	0018      	movs	r0, r3
   2020a:	4b03      	ldr	r3, [pc, #12]	; (20218 <sd_mmc_wr_protect+0x20>)
   2020c:	4798      	blx	r3
   2020e:	0003      	movs	r3, r0
}
   20210:	0018      	movs	r0, r3
   20212:	46bd      	mov	sp, r7
   20214:	b002      	add	sp, #8
   20216:	bd80      	pop	{r7, pc}
   20218:	0001fd15 	.word	0x0001fd15

0002021c <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   2021c:	b580      	push	{r7, lr}
   2021e:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   20220:	2000      	movs	r0, #0
   20222:	4b03      	ldr	r3, [pc, #12]	; (20230 <sd_mmc_wr_protect_0+0x14>)
   20224:	4798      	blx	r3
   20226:	0003      	movs	r3, r0
}
   20228:	0018      	movs	r0, r3
   2022a:	46bd      	mov	sp, r7
   2022c:	bd80      	pop	{r7, pc}
   2022e:	46c0      	nop			; (mov r8, r8)
   20230:	000201f9 	.word	0x000201f9

00020234 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   20234:	b580      	push	{r7, lr}
   20236:	b082      	sub	sp, #8
   20238:	af00      	add	r7, sp, #0
   2023a:	0002      	movs	r2, r0
   2023c:	1dfb      	adds	r3, r7, #7
   2023e:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   20240:	2301      	movs	r3, #1
}
   20242:	0018      	movs	r0, r3
   20244:	46bd      	mov	sp, r7
   20246:	b002      	add	sp, #8
   20248:	bd80      	pop	{r7, pc}
	...

0002024c <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   2024c:	b580      	push	{r7, lr}
   2024e:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   20250:	2000      	movs	r0, #0
   20252:	4b03      	ldr	r3, [pc, #12]	; (20260 <sd_mmc_removal_0+0x14>)
   20254:	4798      	blx	r3
   20256:	0003      	movs	r3, r0
}
   20258:	0018      	movs	r0, r3
   2025a:	46bd      	mov	sp, r7
   2025c:	bd80      	pop	{r7, pc}
   2025e:	46c0      	nop			; (mov r8, r8)
   20260:	00020235 	.word	0x00020235

00020264 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   20264:	b580      	push	{r7, lr}
   20266:	b084      	sub	sp, #16
   20268:	af00      	add	r7, sp, #0
   2026a:	60b9      	str	r1, [r7, #8]
   2026c:	607a      	str	r2, [r7, #4]
   2026e:	230f      	movs	r3, #15
   20270:	18fb      	adds	r3, r7, r3
   20272:	1c02      	adds	r2, r0, #0
   20274:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   20276:	68b9      	ldr	r1, [r7, #8]
   20278:	230f      	movs	r3, #15
   2027a:	18fb      	adds	r3, r7, r3
   2027c:	781b      	ldrb	r3, [r3, #0]
   2027e:	2201      	movs	r2, #1
   20280:	0018      	movs	r0, r3
   20282:	4b10      	ldr	r3, [pc, #64]	; (202c4 <sd_mmc_mem_2_ram+0x60>)
   20284:	4798      	blx	r3
   20286:	1e03      	subs	r3, r0, #0
   20288:	d005      	beq.n	20296 <sd_mmc_mem_2_ram+0x32>
   2028a:	2b02      	cmp	r3, #2
   2028c:	d101      	bne.n	20292 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   2028e:	2302      	movs	r3, #2
   20290:	e013      	b.n	202ba <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   20292:	2301      	movs	r3, #1
   20294:	e011      	b.n	202ba <sd_mmc_mem_2_ram+0x56>
		break;
   20296:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   20298:	687b      	ldr	r3, [r7, #4]
   2029a:	2101      	movs	r1, #1
   2029c:	0018      	movs	r0, r3
   2029e:	4b0a      	ldr	r3, [pc, #40]	; (202c8 <sd_mmc_mem_2_ram+0x64>)
   202a0:	4798      	blx	r3
   202a2:	1e03      	subs	r3, r0, #0
   202a4:	d001      	beq.n	202aa <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   202a6:	2301      	movs	r3, #1
   202a8:	e007      	b.n	202ba <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   202aa:	2000      	movs	r0, #0
   202ac:	4b07      	ldr	r3, [pc, #28]	; (202cc <sd_mmc_mem_2_ram+0x68>)
   202ae:	4798      	blx	r3
   202b0:	1e03      	subs	r3, r0, #0
   202b2:	d001      	beq.n	202b8 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   202b4:	2301      	movs	r3, #1
   202b6:	e000      	b.n	202ba <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   202b8:	2300      	movs	r3, #0
}
   202ba:	0018      	movs	r0, r3
   202bc:	46bd      	mov	sp, r7
   202be:	b004      	add	sp, #16
   202c0:	bd80      	pop	{r7, pc}
   202c2:	46c0      	nop			; (mov r8, r8)
   202c4:	0001fd2d 	.word	0x0001fd2d
   202c8:	0001fe19 	.word	0x0001fe19
   202cc:	0001fe71 	.word	0x0001fe71

000202d0 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   202d0:	b580      	push	{r7, lr}
   202d2:	b082      	sub	sp, #8
   202d4:	af00      	add	r7, sp, #0
   202d6:	6078      	str	r0, [r7, #4]
   202d8:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   202da:	683a      	ldr	r2, [r7, #0]
   202dc:	687b      	ldr	r3, [r7, #4]
   202de:	0019      	movs	r1, r3
   202e0:	2000      	movs	r0, #0
   202e2:	4b03      	ldr	r3, [pc, #12]	; (202f0 <sd_mmc_mem_2_ram_0+0x20>)
   202e4:	4798      	blx	r3
   202e6:	0003      	movs	r3, r0
}
   202e8:	0018      	movs	r0, r3
   202ea:	46bd      	mov	sp, r7
   202ec:	b002      	add	sp, #8
   202ee:	bd80      	pop	{r7, pc}
   202f0:	00020265 	.word	0x00020265

000202f4 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   202f4:	b580      	push	{r7, lr}
   202f6:	b084      	sub	sp, #16
   202f8:	af00      	add	r7, sp, #0
   202fa:	60b9      	str	r1, [r7, #8]
   202fc:	607a      	str	r2, [r7, #4]
   202fe:	230f      	movs	r3, #15
   20300:	18fb      	adds	r3, r7, r3
   20302:	1c02      	adds	r2, r0, #0
   20304:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   20306:	68b9      	ldr	r1, [r7, #8]
   20308:	230f      	movs	r3, #15
   2030a:	18fb      	adds	r3, r7, r3
   2030c:	781b      	ldrb	r3, [r3, #0]
   2030e:	2201      	movs	r2, #1
   20310:	0018      	movs	r0, r3
   20312:	4b10      	ldr	r3, [pc, #64]	; (20354 <sd_mmc_ram_2_mem+0x60>)
   20314:	4798      	blx	r3
   20316:	1e03      	subs	r3, r0, #0
   20318:	d005      	beq.n	20326 <sd_mmc_ram_2_mem+0x32>
   2031a:	2b02      	cmp	r3, #2
   2031c:	d101      	bne.n	20322 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   2031e:	2302      	movs	r3, #2
   20320:	e013      	b.n	2034a <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   20322:	2301      	movs	r3, #1
   20324:	e011      	b.n	2034a <sd_mmc_ram_2_mem+0x56>
		break;
   20326:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   20328:	687b      	ldr	r3, [r7, #4]
   2032a:	2101      	movs	r1, #1
   2032c:	0018      	movs	r0, r3
   2032e:	4b0a      	ldr	r3, [pc, #40]	; (20358 <sd_mmc_ram_2_mem+0x64>)
   20330:	4798      	blx	r3
   20332:	1e03      	subs	r3, r0, #0
   20334:	d001      	beq.n	2033a <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   20336:	2301      	movs	r3, #1
   20338:	e007      	b.n	2034a <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   2033a:	2000      	movs	r0, #0
   2033c:	4b07      	ldr	r3, [pc, #28]	; (2035c <sd_mmc_ram_2_mem+0x68>)
   2033e:	4798      	blx	r3
   20340:	1e03      	subs	r3, r0, #0
   20342:	d001      	beq.n	20348 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   20344:	2301      	movs	r3, #1
   20346:	e000      	b.n	2034a <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   20348:	2300      	movs	r3, #0
}
   2034a:	0018      	movs	r0, r3
   2034c:	46bd      	mov	sp, r7
   2034e:	b004      	add	sp, #16
   20350:	bd80      	pop	{r7, pc}
   20352:	46c0      	nop			; (mov r8, r8)
   20354:	0001ff09 	.word	0x0001ff09
   20358:	0001fff1 	.word	0x0001fff1
   2035c:	00020049 	.word	0x00020049

00020360 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   20360:	b580      	push	{r7, lr}
   20362:	b082      	sub	sp, #8
   20364:	af00      	add	r7, sp, #0
   20366:	6078      	str	r0, [r7, #4]
   20368:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   2036a:	683a      	ldr	r2, [r7, #0]
   2036c:	687b      	ldr	r3, [r7, #4]
   2036e:	0019      	movs	r1, r3
   20370:	2000      	movs	r0, #0
   20372:	4b03      	ldr	r3, [pc, #12]	; (20380 <sd_mmc_ram_2_mem_0+0x20>)
   20374:	4798      	blx	r3
   20376:	0003      	movs	r3, r0
}
   20378:	0018      	movs	r0, r3
   2037a:	46bd      	mov	sp, r7
   2037c:	b002      	add	sp, #8
   2037e:	bd80      	pop	{r7, pc}
   20380:	000202f5 	.word	0x000202f5

00020384 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   20384:	b580      	push	{r7, lr}
   20386:	b084      	sub	sp, #16
   20388:	af00      	add	r7, sp, #0
   2038a:	0002      	movs	r2, r0
   2038c:	1dfb      	adds	r3, r7, #7
   2038e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   20390:	230f      	movs	r3, #15
   20392:	18fb      	adds	r3, r7, r3
   20394:	1dfa      	adds	r2, r7, #7
   20396:	7812      	ldrb	r2, [r2, #0]
   20398:	09d2      	lsrs	r2, r2, #7
   2039a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2039c:	230e      	movs	r3, #14
   2039e:	18fb      	adds	r3, r7, r3
   203a0:	1dfa      	adds	r2, r7, #7
   203a2:	7812      	ldrb	r2, [r2, #0]
   203a4:	0952      	lsrs	r2, r2, #5
   203a6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   203a8:	4b0d      	ldr	r3, [pc, #52]	; (203e0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   203aa:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   203ac:	230f      	movs	r3, #15
   203ae:	18fb      	adds	r3, r7, r3
   203b0:	781b      	ldrb	r3, [r3, #0]
   203b2:	2b00      	cmp	r3, #0
   203b4:	d10f      	bne.n	203d6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   203b6:	230f      	movs	r3, #15
   203b8:	18fb      	adds	r3, r7, r3
   203ba:	781b      	ldrb	r3, [r3, #0]
   203bc:	009b      	lsls	r3, r3, #2
   203be:	2210      	movs	r2, #16
   203c0:	4694      	mov	ip, r2
   203c2:	44bc      	add	ip, r7
   203c4:	4463      	add	r3, ip
   203c6:	3b08      	subs	r3, #8
   203c8:	681a      	ldr	r2, [r3, #0]
   203ca:	230e      	movs	r3, #14
   203cc:	18fb      	adds	r3, r7, r3
   203ce:	781b      	ldrb	r3, [r3, #0]
   203d0:	01db      	lsls	r3, r3, #7
   203d2:	18d3      	adds	r3, r2, r3
   203d4:	e000      	b.n	203d8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   203d6:	2300      	movs	r3, #0
	}
}
   203d8:	0018      	movs	r0, r3
   203da:	46bd      	mov	sp, r7
   203dc:	b004      	add	sp, #16
   203de:	bd80      	pop	{r7, pc}
   203e0:	41004400 	.word	0x41004400

000203e4 <system_interrupt_enable>:
{
   203e4:	b580      	push	{r7, lr}
   203e6:	b082      	sub	sp, #8
   203e8:	af00      	add	r7, sp, #0
   203ea:	0002      	movs	r2, r0
   203ec:	1dfb      	adds	r3, r7, #7
   203ee:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   203f0:	4b06      	ldr	r3, [pc, #24]	; (2040c <system_interrupt_enable+0x28>)
   203f2:	1dfa      	adds	r2, r7, #7
   203f4:	7812      	ldrb	r2, [r2, #0]
   203f6:	0011      	movs	r1, r2
   203f8:	221f      	movs	r2, #31
   203fa:	400a      	ands	r2, r1
   203fc:	2101      	movs	r1, #1
   203fe:	4091      	lsls	r1, r2
   20400:	000a      	movs	r2, r1
   20402:	601a      	str	r2, [r3, #0]
}
   20404:	46c0      	nop			; (mov r8, r8)
   20406:	46bd      	mov	sp, r7
   20408:	b002      	add	sp, #8
   2040a:	bd80      	pop	{r7, pc}
   2040c:	e000e100 	.word	0xe000e100

00020410 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   20410:	b580      	push	{r7, lr}
   20412:	b082      	sub	sp, #8
   20414:	af00      	add	r7, sp, #0
   20416:	0002      	movs	r2, r0
   20418:	1dfb      	adds	r3, r7, #7
   2041a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2041c:	1dfb      	adds	r3, r7, #7
   2041e:	781b      	ldrb	r3, [r3, #0]
   20420:	0018      	movs	r0, r3
   20422:	4b03      	ldr	r3, [pc, #12]	; (20430 <port_get_group_from_gpio_pin+0x20>)
   20424:	4798      	blx	r3
   20426:	0003      	movs	r3, r0
}
   20428:	0018      	movs	r0, r3
   2042a:	46bd      	mov	sp, r7
   2042c:	b002      	add	sp, #8
   2042e:	bd80      	pop	{r7, pc}
   20430:	00020385 	.word	0x00020385

00020434 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   20434:	b580      	push	{r7, lr}
   20436:	b082      	sub	sp, #8
   20438:	af00      	add	r7, sp, #0
   2043a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   2043c:	687b      	ldr	r3, [r7, #4]
   2043e:	2200      	movs	r2, #0
   20440:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   20442:	687b      	ldr	r3, [r7, #4]
   20444:	2201      	movs	r2, #1
   20446:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   20448:	687b      	ldr	r3, [r7, #4]
   2044a:	2200      	movs	r2, #0
   2044c:	709a      	strb	r2, [r3, #2]
}
   2044e:	46c0      	nop			; (mov r8, r8)
   20450:	46bd      	mov	sp, r7
   20452:	b002      	add	sp, #8
   20454:	bd80      	pop	{r7, pc}
	...

00020458 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   20458:	b580      	push	{r7, lr}
   2045a:	b084      	sub	sp, #16
   2045c:	af00      	add	r7, sp, #0
   2045e:	0002      	movs	r2, r0
   20460:	1dfb      	adds	r3, r7, #7
   20462:	701a      	strb	r2, [r3, #0]
   20464:	1dbb      	adds	r3, r7, #6
   20466:	1c0a      	adds	r2, r1, #0
   20468:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2046a:	1dfb      	adds	r3, r7, #7
   2046c:	781b      	ldrb	r3, [r3, #0]
   2046e:	0018      	movs	r0, r3
   20470:	4b0d      	ldr	r3, [pc, #52]	; (204a8 <port_pin_set_output_level+0x50>)
   20472:	4798      	blx	r3
   20474:	0003      	movs	r3, r0
   20476:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   20478:	1dfb      	adds	r3, r7, #7
   2047a:	781b      	ldrb	r3, [r3, #0]
   2047c:	221f      	movs	r2, #31
   2047e:	4013      	ands	r3, r2
   20480:	2201      	movs	r2, #1
   20482:	409a      	lsls	r2, r3
   20484:	0013      	movs	r3, r2
   20486:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   20488:	1dbb      	adds	r3, r7, #6
   2048a:	781b      	ldrb	r3, [r3, #0]
   2048c:	2b00      	cmp	r3, #0
   2048e:	d003      	beq.n	20498 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   20490:	68fb      	ldr	r3, [r7, #12]
   20492:	68ba      	ldr	r2, [r7, #8]
   20494:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   20496:	e002      	b.n	2049e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   20498:	68fb      	ldr	r3, [r7, #12]
   2049a:	68ba      	ldr	r2, [r7, #8]
   2049c:	615a      	str	r2, [r3, #20]
}
   2049e:	46c0      	nop			; (mov r8, r8)
   204a0:	46bd      	mov	sp, r7
   204a2:	b004      	add	sp, #16
   204a4:	bd80      	pop	{r7, pc}
   204a6:	46c0      	nop			; (mov r8, r8)
   204a8:	00020411 	.word	0x00020411

000204ac <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   204ac:	b580      	push	{r7, lr}
   204ae:	b084      	sub	sp, #16
   204b0:	af00      	add	r7, sp, #0
   204b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   204b4:	687b      	ldr	r3, [r7, #4]
   204b6:	681b      	ldr	r3, [r3, #0]
   204b8:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   204ba:	68fb      	ldr	r3, [r7, #12]
   204bc:	69db      	ldr	r3, [r3, #28]
   204be:	1e5a      	subs	r2, r3, #1
   204c0:	4193      	sbcs	r3, r2
   204c2:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   204c4:	0018      	movs	r0, r3
   204c6:	46bd      	mov	sp, r7
   204c8:	b004      	add	sp, #16
   204ca:	bd80      	pop	{r7, pc}

000204cc <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   204cc:	b580      	push	{r7, lr}
   204ce:	b082      	sub	sp, #8
   204d0:	af00      	add	r7, sp, #0
   204d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   204d4:	687b      	ldr	r3, [r7, #4]
   204d6:	2201      	movs	r2, #1
   204d8:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   204da:	687b      	ldr	r3, [r7, #4]
   204dc:	2200      	movs	r2, #0
   204de:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   204e0:	687b      	ldr	r3, [r7, #4]
   204e2:	2200      	movs	r2, #0
   204e4:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   204e6:	687b      	ldr	r3, [r7, #4]
   204e8:	22c0      	movs	r2, #192	; 0xc0
   204ea:	0392      	lsls	r2, r2, #14
   204ec:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   204ee:	687b      	ldr	r3, [r7, #4]
   204f0:	2200      	movs	r2, #0
   204f2:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   204f4:	687b      	ldr	r3, [r7, #4]
   204f6:	2200      	movs	r2, #0
   204f8:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   204fa:	687b      	ldr	r3, [r7, #4]
   204fc:	2201      	movs	r2, #1
   204fe:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   20500:	687b      	ldr	r3, [r7, #4]
   20502:	2201      	movs	r2, #1
   20504:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   20506:	687b      	ldr	r3, [r7, #4]
   20508:	2200      	movs	r2, #0
   2050a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   2050c:	687b      	ldr	r3, [r7, #4]
   2050e:	2224      	movs	r2, #36	; 0x24
   20510:	2100      	movs	r1, #0
   20512:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   20514:	687b      	ldr	r3, [r7, #4]
   20516:	3318      	adds	r3, #24
   20518:	220c      	movs	r2, #12
   2051a:	2100      	movs	r1, #0
   2051c:	0018      	movs	r0, r3
   2051e:	4b0a      	ldr	r3, [pc, #40]	; (20548 <spi_get_config_defaults+0x7c>)
   20520:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   20522:	687b      	ldr	r3, [r7, #4]
   20524:	4a09      	ldr	r2, [pc, #36]	; (2054c <spi_get_config_defaults+0x80>)
   20526:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   20528:	687b      	ldr	r3, [r7, #4]
   2052a:	2200      	movs	r2, #0
   2052c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   2052e:	687b      	ldr	r3, [r7, #4]
   20530:	2200      	movs	r2, #0
   20532:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   20534:	687b      	ldr	r3, [r7, #4]
   20536:	2200      	movs	r2, #0
   20538:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   2053a:	687b      	ldr	r3, [r7, #4]
   2053c:	2200      	movs	r2, #0
   2053e:	635a      	str	r2, [r3, #52]	; 0x34

};
   20540:	46c0      	nop			; (mov r8, r8)
   20542:	46bd      	mov	sp, r7
   20544:	b002      	add	sp, #8
   20546:	bd80      	pop	{r7, pc}
   20548:	0003643f 	.word	0x0003643f
   2054c:	000186a0 	.word	0x000186a0

00020550 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   20550:	b580      	push	{r7, lr}
   20552:	b082      	sub	sp, #8
   20554:	af00      	add	r7, sp, #0
   20556:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   20558:	687b      	ldr	r3, [r7, #4]
   2055a:	220a      	movs	r2, #10
   2055c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   2055e:	687b      	ldr	r3, [r7, #4]
   20560:	2200      	movs	r2, #0
   20562:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   20564:	687b      	ldr	r3, [r7, #4]
   20566:	2200      	movs	r2, #0
   20568:	709a      	strb	r2, [r3, #2]
}
   2056a:	46c0      	nop			; (mov r8, r8)
   2056c:	46bd      	mov	sp, r7
   2056e:	b002      	add	sp, #8
   20570:	bd80      	pop	{r7, pc}
	...

00020574 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   20574:	b580      	push	{r7, lr}
   20576:	b084      	sub	sp, #16
   20578:	af00      	add	r7, sp, #0
   2057a:	6078      	str	r0, [r7, #4]
   2057c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   2057e:	683b      	ldr	r3, [r7, #0]
   20580:	781a      	ldrb	r2, [r3, #0]
   20582:	687b      	ldr	r3, [r7, #4]
   20584:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   20586:	683b      	ldr	r3, [r7, #0]
   20588:	785a      	ldrb	r2, [r3, #1]
   2058a:	687b      	ldr	r3, [r7, #4]
   2058c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   2058e:	683b      	ldr	r3, [r7, #0]
   20590:	789a      	ldrb	r2, [r3, #2]
   20592:	687b      	ldr	r3, [r7, #4]
   20594:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   20596:	230c      	movs	r3, #12
   20598:	18fb      	adds	r3, r7, r3
   2059a:	0018      	movs	r0, r3
   2059c:	4b0b      	ldr	r3, [pc, #44]	; (205cc <spi_attach_slave+0x58>)
   2059e:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   205a0:	230c      	movs	r3, #12
   205a2:	18fb      	adds	r3, r7, r3
   205a4:	2201      	movs	r2, #1
   205a6:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   205a8:	687b      	ldr	r3, [r7, #4]
   205aa:	781b      	ldrb	r3, [r3, #0]
   205ac:	220c      	movs	r2, #12
   205ae:	18ba      	adds	r2, r7, r2
   205b0:	0011      	movs	r1, r2
   205b2:	0018      	movs	r0, r3
   205b4:	4b06      	ldr	r3, [pc, #24]	; (205d0 <spi_attach_slave+0x5c>)
   205b6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   205b8:	687b      	ldr	r3, [r7, #4]
   205ba:	781b      	ldrb	r3, [r3, #0]
   205bc:	2101      	movs	r1, #1
   205be:	0018      	movs	r0, r3
   205c0:	4b04      	ldr	r3, [pc, #16]	; (205d4 <spi_attach_slave+0x60>)
   205c2:	4798      	blx	r3
}
   205c4:	46c0      	nop			; (mov r8, r8)
   205c6:	46bd      	mov	sp, r7
   205c8:	b004      	add	sp, #16
   205ca:	bd80      	pop	{r7, pc}
   205cc:	00020435 	.word	0x00020435
   205d0:	0002797d 	.word	0x0002797d
   205d4:	00020459 	.word	0x00020459

000205d8 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   205d8:	b580      	push	{r7, lr}
   205da:	b084      	sub	sp, #16
   205dc:	af00      	add	r7, sp, #0
   205de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   205e0:	687b      	ldr	r3, [r7, #4]
   205e2:	681b      	ldr	r3, [r3, #0]
   205e4:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   205e6:	687b      	ldr	r3, [r7, #4]
   205e8:	681b      	ldr	r3, [r3, #0]
   205ea:	0018      	movs	r0, r3
   205ec:	4b0b      	ldr	r3, [pc, #44]	; (2061c <spi_enable+0x44>)
   205ee:	4798      	blx	r3
   205f0:	0003      	movs	r3, r0
   205f2:	0018      	movs	r0, r3
   205f4:	4b0a      	ldr	r3, [pc, #40]	; (20620 <spi_enable+0x48>)
   205f6:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   205f8:	46c0      	nop			; (mov r8, r8)
   205fa:	687b      	ldr	r3, [r7, #4]
   205fc:	0018      	movs	r0, r3
   205fe:	4b09      	ldr	r3, [pc, #36]	; (20624 <spi_enable+0x4c>)
   20600:	4798      	blx	r3
   20602:	1e03      	subs	r3, r0, #0
   20604:	d1f9      	bne.n	205fa <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   20606:	68fb      	ldr	r3, [r7, #12]
   20608:	681b      	ldr	r3, [r3, #0]
   2060a:	2202      	movs	r2, #2
   2060c:	431a      	orrs	r2, r3
   2060e:	68fb      	ldr	r3, [r7, #12]
   20610:	601a      	str	r2, [r3, #0]
}
   20612:	46c0      	nop			; (mov r8, r8)
   20614:	46bd      	mov	sp, r7
   20616:	b004      	add	sp, #16
   20618:	bd80      	pop	{r7, pc}
   2061a:	46c0      	nop			; (mov r8, r8)
   2061c:	0002864d 	.word	0x0002864d
   20620:	000203e5 	.word	0x000203e5
   20624:	000204ad 	.word	0x000204ad

00020628 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   20628:	b580      	push	{r7, lr}
   2062a:	b084      	sub	sp, #16
   2062c:	af00      	add	r7, sp, #0
   2062e:	6078      	str	r0, [r7, #4]
   20630:	000a      	movs	r2, r1
   20632:	1cfb      	adds	r3, r7, #3
   20634:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   20636:	230f      	movs	r3, #15
   20638:	18fb      	adds	r3, r7, r3
   2063a:	2200      	movs	r2, #0
   2063c:	701a      	strb	r2, [r3, #0]
	while (size--) {
   2063e:	e038      	b.n	206b2 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   20640:	687b      	ldr	r3, [r7, #4]
   20642:	1c5a      	adds	r2, r3, #1
   20644:	607a      	str	r2, [r7, #4]
   20646:	220e      	movs	r2, #14
   20648:	18ba      	adds	r2, r7, r2
   2064a:	781b      	ldrb	r3, [r3, #0]
   2064c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   2064e:	230d      	movs	r3, #13
   20650:	18fb      	adds	r3, r7, r3
   20652:	2200      	movs	r2, #0
   20654:	701a      	strb	r2, [r3, #0]
   20656:	e027      	b.n	206a8 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   20658:	230f      	movs	r3, #15
   2065a:	18fa      	adds	r2, r7, r3
   2065c:	230f      	movs	r3, #15
   2065e:	18fb      	adds	r3, r7, r3
   20660:	781b      	ldrb	r3, [r3, #0]
   20662:	18db      	adds	r3, r3, r3
   20664:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   20666:	230e      	movs	r3, #14
   20668:	18fa      	adds	r2, r7, r3
   2066a:	230f      	movs	r3, #15
   2066c:	18fb      	adds	r3, r7, r3
   2066e:	7812      	ldrb	r2, [r2, #0]
   20670:	781b      	ldrb	r3, [r3, #0]
   20672:	4053      	eors	r3, r2
   20674:	b2db      	uxtb	r3, r3
   20676:	b25b      	sxtb	r3, r3
   20678:	2b00      	cmp	r3, #0
   2067a:	da07      	bge.n	2068c <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   2067c:	230f      	movs	r3, #15
   2067e:	18fb      	adds	r3, r7, r3
   20680:	220f      	movs	r2, #15
   20682:	18ba      	adds	r2, r7, r2
   20684:	7812      	ldrb	r2, [r2, #0]
   20686:	2109      	movs	r1, #9
   20688:	404a      	eors	r2, r1
   2068a:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   2068c:	230e      	movs	r3, #14
   2068e:	18fa      	adds	r2, r7, r3
   20690:	230e      	movs	r3, #14
   20692:	18fb      	adds	r3, r7, r3
   20694:	781b      	ldrb	r3, [r3, #0]
   20696:	18db      	adds	r3, r3, r3
   20698:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   2069a:	230d      	movs	r3, #13
   2069c:	18fb      	adds	r3, r7, r3
   2069e:	781a      	ldrb	r2, [r3, #0]
   206a0:	230d      	movs	r3, #13
   206a2:	18fb      	adds	r3, r7, r3
   206a4:	3201      	adds	r2, #1
   206a6:	701a      	strb	r2, [r3, #0]
   206a8:	230d      	movs	r3, #13
   206aa:	18fb      	adds	r3, r7, r3
   206ac:	781b      	ldrb	r3, [r3, #0]
   206ae:	2b07      	cmp	r3, #7
   206b0:	d9d2      	bls.n	20658 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   206b2:	1cfb      	adds	r3, r7, #3
   206b4:	781b      	ldrb	r3, [r3, #0]
   206b6:	1cfa      	adds	r2, r7, #3
   206b8:	1e59      	subs	r1, r3, #1
   206ba:	7011      	strb	r1, [r2, #0]
   206bc:	2b00      	cmp	r3, #0
   206be:	d1bf      	bne.n	20640 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   206c0:	230f      	movs	r3, #15
   206c2:	18fb      	adds	r3, r7, r3
   206c4:	781b      	ldrb	r3, [r3, #0]
   206c6:	005b      	lsls	r3, r3, #1
   206c8:	b25b      	sxtb	r3, r3
   206ca:	2201      	movs	r2, #1
   206cc:	4313      	orrs	r3, r2
   206ce:	b25a      	sxtb	r2, r3
   206d0:	230f      	movs	r3, #15
   206d2:	18fb      	adds	r3, r7, r3
   206d4:	701a      	strb	r2, [r3, #0]
	return crc;
   206d6:	230f      	movs	r3, #15
   206d8:	18fb      	adds	r3, r7, r3
   206da:	781b      	ldrb	r3, [r3, #0]
}
   206dc:	0018      	movs	r0, r3
   206de:	46bd      	mov	sp, r7
   206e0:	b004      	add	sp, #16
   206e2:	bd80      	pop	{r7, pc}

000206e4 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   206e4:	b590      	push	{r4, r7, lr}
   206e6:	b083      	sub	sp, #12
   206e8:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   206ea:	1c7b      	adds	r3, r7, #1
   206ec:	22ff      	movs	r2, #255	; 0xff
   206ee:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   206f0:	1cbb      	adds	r3, r7, #2
   206f2:	22ff      	movs	r2, #255	; 0xff
   206f4:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   206f6:	1cbb      	adds	r3, r7, #2
   206f8:	881b      	ldrh	r3, [r3, #0]
   206fa:	1c79      	adds	r1, r7, #1
   206fc:	4811      	ldr	r0, [pc, #68]	; (20744 <sd_mmc_spi_wait_busy+0x60>)
   206fe:	2201      	movs	r2, #1
   20700:	4c11      	ldr	r4, [pc, #68]	; (20748 <sd_mmc_spi_wait_busy+0x64>)
   20702:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   20704:	4b11      	ldr	r3, [pc, #68]	; (2074c <sd_mmc_spi_wait_busy+0x68>)
   20706:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   20708:	1cbb      	adds	r3, r7, #2
   2070a:	881b      	ldrh	r3, [r3, #0]
   2070c:	1c79      	adds	r1, r7, #1
   2070e:	480d      	ldr	r0, [pc, #52]	; (20744 <sd_mmc_spi_wait_busy+0x60>)
   20710:	2201      	movs	r2, #1
   20712:	4c0d      	ldr	r4, [pc, #52]	; (20748 <sd_mmc_spi_wait_busy+0x64>)
   20714:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   20716:	1cbb      	adds	r3, r7, #2
   20718:	881b      	ldrh	r3, [r3, #0]
   2071a:	1c79      	adds	r1, r7, #1
   2071c:	4809      	ldr	r0, [pc, #36]	; (20744 <sd_mmc_spi_wait_busy+0x60>)
   2071e:	2201      	movs	r2, #1
   20720:	4c09      	ldr	r4, [pc, #36]	; (20748 <sd_mmc_spi_wait_busy+0x64>)
   20722:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   20724:	687b      	ldr	r3, [r7, #4]
   20726:	1e5a      	subs	r2, r3, #1
   20728:	607a      	str	r2, [r7, #4]
   2072a:	2b00      	cmp	r3, #0
   2072c:	d101      	bne.n	20732 <sd_mmc_spi_wait_busy+0x4e>
			return false;
   2072e:	2300      	movs	r3, #0
   20730:	e004      	b.n	2073c <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   20732:	1c7b      	adds	r3, r7, #1
   20734:	781b      	ldrb	r3, [r3, #0]
   20736:	2bff      	cmp	r3, #255	; 0xff
   20738:	d1ed      	bne.n	20716 <sd_mmc_spi_wait_busy+0x32>
	return true;
   2073a:	2301      	movs	r3, #1
}
   2073c:	0018      	movs	r0, r3
   2073e:	46bd      	mov	sp, r7
   20740:	b003      	add	sp, #12
   20742:	bd90      	pop	{r4, r7, pc}
   20744:	20004254 	.word	0x20004254
   20748:	00028f8d 	.word	0x00028f8d
   2074c:	00030d40 	.word	0x00030d40

00020750 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   20750:	b590      	push	{r4, r7, lr}
   20752:	b083      	sub	sp, #12
   20754:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   20756:	1cbb      	adds	r3, r7, #2
   20758:	22ff      	movs	r2, #255	; 0xff
   2075a:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   2075c:	1c7b      	adds	r3, r7, #1
   2075e:	2200      	movs	r2, #0
   20760:	701a      	strb	r2, [r3, #0]
	i = 500000;
   20762:	4b18      	ldr	r3, [pc, #96]	; (207c4 <sd_mmc_spi_start_read_block+0x74>)
   20764:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   20766:	687b      	ldr	r3, [r7, #4]
   20768:	1e5a      	subs	r2, r3, #1
   2076a:	607a      	str	r2, [r7, #4]
   2076c:	2b00      	cmp	r3, #0
   2076e:	d104      	bne.n	2077a <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   20770:	4b15      	ldr	r3, [pc, #84]	; (207c8 <sd_mmc_spi_start_read_block+0x78>)
   20772:	2204      	movs	r2, #4
   20774:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   20776:	2300      	movs	r3, #0
   20778:	e020      	b.n	207bc <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   2077a:	1cbb      	adds	r3, r7, #2
   2077c:	881b      	ldrh	r3, [r3, #0]
   2077e:	1c79      	adds	r1, r7, #1
   20780:	4812      	ldr	r0, [pc, #72]	; (207cc <sd_mmc_spi_start_read_block+0x7c>)
   20782:	2201      	movs	r2, #1
   20784:	4c12      	ldr	r4, [pc, #72]	; (207d0 <sd_mmc_spi_start_read_block+0x80>)
   20786:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   20788:	1c7b      	adds	r3, r7, #1
   2078a:	781b      	ldrb	r3, [r3, #0]
   2078c:	001a      	movs	r2, r3
   2078e:	23f0      	movs	r3, #240	; 0xf0
   20790:	4013      	ands	r3, r2
   20792:	d10e      	bne.n	207b2 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   20794:	1c7b      	adds	r3, r7, #1
   20796:	781b      	ldrb	r3, [r3, #0]
   20798:	001a      	movs	r2, r3
   2079a:	2307      	movs	r3, #7
   2079c:	4013      	ands	r3, r2
   2079e:	d003      	beq.n	207a8 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   207a0:	4b09      	ldr	r3, [pc, #36]	; (207c8 <sd_mmc_spi_start_read_block+0x78>)
   207a2:	2207      	movs	r2, #7
   207a4:	701a      	strb	r2, [r3, #0]
   207a6:	e002      	b.n	207ae <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   207a8:	4b07      	ldr	r3, [pc, #28]	; (207c8 <sd_mmc_spi_start_read_block+0x78>)
   207aa:	220b      	movs	r2, #11
   207ac:	701a      	strb	r2, [r3, #0]
			}
			return false;
   207ae:	2300      	movs	r3, #0
   207b0:	e004      	b.n	207bc <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   207b2:	1c7b      	adds	r3, r7, #1
   207b4:	781b      	ldrb	r3, [r3, #0]
   207b6:	2bfe      	cmp	r3, #254	; 0xfe
   207b8:	d1d5      	bne.n	20766 <sd_mmc_spi_start_read_block+0x16>

	return true;
   207ba:	2301      	movs	r3, #1
}
   207bc:	0018      	movs	r0, r3
   207be:	46bd      	mov	sp, r7
   207c0:	b003      	add	sp, #12
   207c2:	bd90      	pop	{r4, r7, pc}
   207c4:	0007a120 	.word	0x0007a120
   207c8:	20004297 	.word	0x20004297
   207cc:	20004254 	.word	0x20004254
   207d0:	00028f8d 	.word	0x00028f8d

000207d4 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   207d4:	b590      	push	{r4, r7, lr}
   207d6:	b083      	sub	sp, #12
   207d8:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   207da:	1dbb      	adds	r3, r7, #6
   207dc:	22ff      	movs	r2, #255	; 0xff
   207de:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   207e0:	1dbb      	adds	r3, r7, #6
   207e2:	881b      	ldrh	r3, [r3, #0]
   207e4:	1d39      	adds	r1, r7, #4
   207e6:	4804      	ldr	r0, [pc, #16]	; (207f8 <sd_mmc_spi_stop_read_block+0x24>)
   207e8:	2202      	movs	r2, #2
   207ea:	4c04      	ldr	r4, [pc, #16]	; (207fc <sd_mmc_spi_stop_read_block+0x28>)
   207ec:	47a0      	blx	r4
			dummy);
}
   207ee:	46c0      	nop			; (mov r8, r8)
   207f0:	46bd      	mov	sp, r7
   207f2:	b003      	add	sp, #12
   207f4:	bd90      	pop	{r4, r7, pc}
   207f6:	46c0      	nop			; (mov r8, r8)
   207f8:	20004254 	.word	0x20004254
   207fc:	00028f8d 	.word	0x00028f8d

00020800 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   20800:	b580      	push	{r7, lr}
   20802:	b082      	sub	sp, #8
   20804:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   20806:	1dfb      	adds	r3, r7, #7
   20808:	22ff      	movs	r2, #255	; 0xff
   2080a:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   2080c:	1df9      	adds	r1, r7, #7
   2080e:	4b0d      	ldr	r3, [pc, #52]	; (20844 <sd_mmc_spi_start_write_block+0x44>)
   20810:	2201      	movs	r2, #1
   20812:	0018      	movs	r0, r3
   20814:	4b0c      	ldr	r3, [pc, #48]	; (20848 <sd_mmc_spi_start_write_block+0x48>)
   20816:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   20818:	4b0c      	ldr	r3, [pc, #48]	; (2084c <sd_mmc_spi_start_write_block+0x4c>)
   2081a:	881b      	ldrh	r3, [r3, #0]
   2081c:	2b01      	cmp	r3, #1
   2081e:	d103      	bne.n	20828 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   20820:	1dbb      	adds	r3, r7, #6
   20822:	22fe      	movs	r2, #254	; 0xfe
   20824:	701a      	strb	r2, [r3, #0]
   20826:	e002      	b.n	2082e <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   20828:	1dbb      	adds	r3, r7, #6
   2082a:	22fc      	movs	r2, #252	; 0xfc
   2082c:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   2082e:	1db9      	adds	r1, r7, #6
   20830:	4b04      	ldr	r3, [pc, #16]	; (20844 <sd_mmc_spi_start_write_block+0x44>)
   20832:	2201      	movs	r2, #1
   20834:	0018      	movs	r0, r3
   20836:	4b04      	ldr	r3, [pc, #16]	; (20848 <sd_mmc_spi_start_write_block+0x48>)
   20838:	4798      	blx	r3
}
   2083a:	46c0      	nop			; (mov r8, r8)
   2083c:	46bd      	mov	sp, r7
   2083e:	b002      	add	sp, #8
   20840:	bd80      	pop	{r7, pc}
   20842:	46c0      	nop			; (mov r8, r8)
   20844:	20004254 	.word	0x20004254
   20848:	000291b1 	.word	0x000291b1
   2084c:	200042a2 	.word	0x200042a2

00020850 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   20850:	b590      	push	{r4, r7, lr}
   20852:	b083      	sub	sp, #12
   20854:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   20856:	1dbb      	adds	r3, r7, #6
   20858:	22ff      	movs	r2, #255	; 0xff
   2085a:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   2085c:	1cbb      	adds	r3, r7, #2
   2085e:	2201      	movs	r2, #1
   20860:	4252      	negs	r2, r2
   20862:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   20864:	1cb9      	adds	r1, r7, #2
   20866:	4b1b      	ldr	r3, [pc, #108]	; (208d4 <sd_mmc_spi_stop_write_block+0x84>)
   20868:	2202      	movs	r2, #2
   2086a:	0018      	movs	r0, r3
   2086c:	4b1a      	ldr	r3, [pc, #104]	; (208d8 <sd_mmc_spi_stop_write_block+0x88>)
   2086e:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   20870:	1dbb      	adds	r3, r7, #6
   20872:	881b      	ldrh	r3, [r3, #0]
   20874:	1d79      	adds	r1, r7, #5
   20876:	4817      	ldr	r0, [pc, #92]	; (208d4 <sd_mmc_spi_stop_write_block+0x84>)
   20878:	2201      	movs	r2, #1
   2087a:	4c18      	ldr	r4, [pc, #96]	; (208dc <sd_mmc_spi_stop_write_block+0x8c>)
   2087c:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   2087e:	1d7b      	adds	r3, r7, #5
   20880:	781b      	ldrb	r3, [r3, #0]
   20882:	001a      	movs	r2, r3
   20884:	2310      	movs	r3, #16
   20886:	4013      	ands	r3, r2
   20888:	d105      	bne.n	20896 <sd_mmc_spi_stop_write_block+0x46>
   2088a:	1d7b      	adds	r3, r7, #5
   2088c:	781b      	ldrb	r3, [r3, #0]
   2088e:	001a      	movs	r2, r3
   20890:	2301      	movs	r3, #1
   20892:	4013      	ands	r3, r2
   20894:	d104      	bne.n	208a0 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   20896:	4b12      	ldr	r3, [pc, #72]	; (208e0 <sd_mmc_spi_stop_write_block+0x90>)
   20898:	2201      	movs	r2, #1
   2089a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   2089c:	2300      	movs	r3, #0
   2089e:	e014      	b.n	208ca <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   208a0:	1d7b      	adds	r3, r7, #5
   208a2:	781b      	ldrb	r3, [r3, #0]
   208a4:	001a      	movs	r2, r3
   208a6:	231e      	movs	r3, #30
   208a8:	4013      	ands	r3, r2
   208aa:	2b04      	cmp	r3, #4
   208ac:	d00b      	beq.n	208c6 <sd_mmc_spi_stop_write_block+0x76>
   208ae:	2b0a      	cmp	r3, #10
   208b0:	d104      	bne.n	208bc <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   208b2:	4b0b      	ldr	r3, [pc, #44]	; (208e0 <sd_mmc_spi_stop_write_block+0x90>)
   208b4:	2208      	movs	r2, #8
   208b6:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   208b8:	2300      	movs	r3, #0
   208ba:	e006      	b.n	208ca <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   208bc:	4b08      	ldr	r3, [pc, #32]	; (208e0 <sd_mmc_spi_stop_write_block+0x90>)
   208be:	220a      	movs	r2, #10
   208c0:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   208c2:	2300      	movs	r3, #0
   208c4:	e001      	b.n	208ca <sd_mmc_spi_stop_write_block+0x7a>
		break;
   208c6:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   208c8:	2301      	movs	r3, #1
}
   208ca:	0018      	movs	r0, r3
   208cc:	46bd      	mov	sp, r7
   208ce:	b003      	add	sp, #12
   208d0:	bd90      	pop	{r4, r7, pc}
   208d2:	46c0      	nop			; (mov r8, r8)
   208d4:	20004254 	.word	0x20004254
   208d8:	000291b1 	.word	0x000291b1
   208dc:	00028f8d 	.word	0x00028f8d
   208e0:	20004297 	.word	0x20004297

000208e4 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   208e4:	b590      	push	{r4, r7, lr}
   208e6:	b083      	sub	sp, #12
   208e8:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   208ea:	4b1d      	ldr	r3, [pc, #116]	; (20960 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   208ec:	881b      	ldrh	r3, [r3, #0]
   208ee:	2b01      	cmp	r3, #1
   208f0:	d101      	bne.n	208f6 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   208f2:	2301      	movs	r3, #1
   208f4:	e030      	b.n	20958 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   208f6:	4b1a      	ldr	r3, [pc, #104]	; (20960 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   208f8:	881b      	ldrh	r3, [r3, #0]
   208fa:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   208fc:	4b19      	ldr	r3, [pc, #100]	; (20964 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   208fe:	681a      	ldr	r2, [r3, #0]
   20900:	4b19      	ldr	r3, [pc, #100]	; (20968 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   20902:	881b      	ldrh	r3, [r3, #0]
   20904:	0019      	movs	r1, r3
   20906:	4b19      	ldr	r3, [pc, #100]	; (2096c <sd_mmc_spi_stop_multiwrite_block+0x88>)
   20908:	0010      	movs	r0, r2
   2090a:	4798      	blx	r3
   2090c:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   2090e:	429c      	cmp	r4, r3
   20910:	d901      	bls.n	20916 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   20912:	2301      	movs	r3, #1
   20914:	e020      	b.n	20958 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   20916:	1dfb      	adds	r3, r7, #7
   20918:	22ff      	movs	r2, #255	; 0xff
   2091a:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   2091c:	1df9      	adds	r1, r7, #7
   2091e:	4b14      	ldr	r3, [pc, #80]	; (20970 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   20920:	2201      	movs	r2, #1
   20922:	0018      	movs	r0, r3
   20924:	4b13      	ldr	r3, [pc, #76]	; (20974 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   20926:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   20928:	1dfb      	adds	r3, r7, #7
   2092a:	22fd      	movs	r2, #253	; 0xfd
   2092c:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   2092e:	1df9      	adds	r1, r7, #7
   20930:	4b0f      	ldr	r3, [pc, #60]	; (20970 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   20932:	2201      	movs	r2, #1
   20934:	0018      	movs	r0, r3
   20936:	4b0f      	ldr	r3, [pc, #60]	; (20974 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   20938:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   2093a:	4b0f      	ldr	r3, [pc, #60]	; (20978 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   2093c:	4798      	blx	r3
   2093e:	0003      	movs	r3, r0
   20940:	001a      	movs	r2, r3
   20942:	2301      	movs	r3, #1
   20944:	4053      	eors	r3, r2
   20946:	b2db      	uxtb	r3, r3
   20948:	2b00      	cmp	r3, #0
   2094a:	d004      	beq.n	20956 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   2094c:	4b0b      	ldr	r3, [pc, #44]	; (2097c <sd_mmc_spi_stop_multiwrite_block+0x98>)
   2094e:	2205      	movs	r2, #5
   20950:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   20952:	2300      	movs	r3, #0
   20954:	e000      	b.n	20958 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   20956:	2301      	movs	r3, #1
}
   20958:	0018      	movs	r0, r3
   2095a:	46bd      	mov	sp, r7
   2095c:	b003      	add	sp, #12
   2095e:	bd90      	pop	{r4, r7, pc}
   20960:	200042a2 	.word	0x200042a2
   20964:	2000429c 	.word	0x2000429c
   20968:	200042a0 	.word	0x200042a0
   2096c:	00033ad5 	.word	0x00033ad5
   20970:	20004254 	.word	0x20004254
   20974:	000291b1 	.word	0x000291b1
   20978:	000206e5 	.word	0x000206e5
   2097c:	20004297 	.word	0x20004297

00020980 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   20980:	b580      	push	{r7, lr}
   20982:	b090      	sub	sp, #64	; 0x40
   20984:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20986:	4b1f      	ldr	r3, [pc, #124]	; (20a04 <sd_mmc_spi_init+0x84>)
   20988:	2200      	movs	r2, #0
   2098a:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   2098c:	233c      	movs	r3, #60	; 0x3c
   2098e:	18fb      	adds	r3, r7, r3
   20990:	0018      	movs	r0, r3
   20992:	4b1d      	ldr	r3, [pc, #116]	; (20a08 <sd_mmc_spi_init+0x88>)
   20994:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   20996:	1d3b      	adds	r3, r7, #4
   20998:	0018      	movs	r0, r3
   2099a:	4b1c      	ldr	r3, [pc, #112]	; (20a0c <sd_mmc_spi_init+0x8c>)
   2099c:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   2099e:	1d3b      	adds	r3, r7, #4
   209a0:	2280      	movs	r2, #128	; 0x80
   209a2:	0252      	lsls	r2, r2, #9
   209a4:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   209a6:	1d3b      	adds	r3, r7, #4
   209a8:	4a19      	ldr	r2, [pc, #100]	; (20a10 <sd_mmc_spi_init+0x90>)
   209aa:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   209ac:	1d3b      	adds	r3, r7, #4
   209ae:	4a19      	ldr	r2, [pc, #100]	; (20a14 <sd_mmc_spi_init+0x94>)
   209b0:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   209b2:	1d3b      	adds	r3, r7, #4
   209b4:	4a18      	ldr	r2, [pc, #96]	; (20a18 <sd_mmc_spi_init+0x98>)
   209b6:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   209b8:	1d3b      	adds	r3, r7, #4
   209ba:	4a18      	ldr	r2, [pc, #96]	; (20a1c <sd_mmc_spi_init+0x9c>)
   209bc:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   209be:	1d3b      	adds	r3, r7, #4
   209c0:	2224      	movs	r2, #36	; 0x24
   209c2:	2100      	movs	r1, #0
   209c4:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   209c6:	1d3b      	adds	r3, r7, #4
   209c8:	4a15      	ldr	r2, [pc, #84]	; (20a20 <sd_mmc_spi_init+0xa0>)
   209ca:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   209cc:	1d3a      	adds	r2, r7, #4
   209ce:	4915      	ldr	r1, [pc, #84]	; (20a24 <sd_mmc_spi_init+0xa4>)
   209d0:	4b15      	ldr	r3, [pc, #84]	; (20a28 <sd_mmc_spi_init+0xa8>)
   209d2:	0018      	movs	r0, r3
   209d4:	4b15      	ldr	r3, [pc, #84]	; (20a2c <sd_mmc_spi_init+0xac>)
   209d6:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   209d8:	4b13      	ldr	r3, [pc, #76]	; (20a28 <sd_mmc_spi_init+0xa8>)
   209da:	0018      	movs	r0, r3
   209dc:	4b14      	ldr	r3, [pc, #80]	; (20a30 <sd_mmc_spi_init+0xb0>)
   209de:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   209e0:	4b14      	ldr	r3, [pc, #80]	; (20a34 <sd_mmc_spi_init+0xb4>)
   209e2:	0018      	movs	r0, r3
   209e4:	4b14      	ldr	r3, [pc, #80]	; (20a38 <sd_mmc_spi_init+0xb8>)
   209e6:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   209e8:	4b14      	ldr	r3, [pc, #80]	; (20a3c <sd_mmc_spi_init+0xbc>)
   209ea:	781a      	ldrb	r2, [r3, #0]
   209ec:	4b11      	ldr	r3, [pc, #68]	; (20a34 <sd_mmc_spi_init+0xb4>)
   209ee:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   209f0:	4a10      	ldr	r2, [pc, #64]	; (20a34 <sd_mmc_spi_init+0xb4>)
   209f2:	4b13      	ldr	r3, [pc, #76]	; (20a40 <sd_mmc_spi_init+0xc0>)
   209f4:	0011      	movs	r1, r2
   209f6:	0018      	movs	r0, r3
   209f8:	4b12      	ldr	r3, [pc, #72]	; (20a44 <sd_mmc_spi_init+0xc4>)
   209fa:	4798      	blx	r3
}
   209fc:	46c0      	nop			; (mov r8, r8)
   209fe:	46bd      	mov	sp, r7
   20a00:	b010      	add	sp, #64	; 0x40
   20a02:	bd80      	pop	{r7, pc}
   20a04:	20004297 	.word	0x20004297
   20a08:	00020435 	.word	0x00020435
   20a0c:	000204cd 	.word	0x000204cd
   20a10:	00100002 	.word	0x00100002
   20a14:	00110002 	.word	0x00110002
   20a18:	00120002 	.word	0x00120002
   20a1c:	00130002 	.word	0x00130002
   20a20:	00061a80 	.word	0x00061a80
   20a24:	42000c00 	.word	0x42000c00
   20a28:	20004254 	.word	0x20004254
   20a2c:	00028dfd 	.word	0x00028dfd
   20a30:	000205d9 	.word	0x000205d9
   20a34:	20004294 	.word	0x20004294
   20a38:	00020551 	.word	0x00020551
   20a3c:	20000118 	.word	0x20000118
   20a40:	20004290 	.word	0x20004290
   20a44:	00020575 	.word	0x00020575

00020a48 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   20a48:	b590      	push	{r4, r7, lr}
   20a4a:	b083      	sub	sp, #12
   20a4c:	af00      	add	r7, sp, #0
   20a4e:	0004      	movs	r4, r0
   20a50:	6039      	str	r1, [r7, #0]
   20a52:	0010      	movs	r0, r2
   20a54:	0019      	movs	r1, r3
   20a56:	1dfb      	adds	r3, r7, #7
   20a58:	1c22      	adds	r2, r4, #0
   20a5a:	701a      	strb	r2, [r3, #0]
   20a5c:	1dbb      	adds	r3, r7, #6
   20a5e:	1c02      	adds	r2, r0, #0
   20a60:	701a      	strb	r2, [r3, #0]
   20a62:	1d7b      	adds	r3, r7, #5
   20a64:	1c0a      	adds	r2, r1, #0
   20a66:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20a68:	4b13      	ldr	r3, [pc, #76]	; (20ab8 <sd_mmc_spi_select_device+0x70>)
   20a6a:	2200      	movs	r2, #0
   20a6c:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   20a6e:	683b      	ldr	r3, [r7, #0]
   20a70:	4a12      	ldr	r2, [pc, #72]	; (20abc <sd_mmc_spi_select_device+0x74>)
   20a72:	4293      	cmp	r3, r2
   20a74:	d907      	bls.n	20a86 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   20a76:	4b11      	ldr	r3, [pc, #68]	; (20abc <sd_mmc_spi_select_device+0x74>)
   20a78:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   20a7a:	e004      	b.n	20a86 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   20a7c:	683b      	ldr	r3, [r7, #0]
   20a7e:	08db      	lsrs	r3, r3, #3
   20a80:	683a      	ldr	r2, [r7, #0]
   20a82:	1ad3      	subs	r3, r2, r3
   20a84:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   20a86:	683a      	ldr	r2, [r7, #0]
   20a88:	4b0d      	ldr	r3, [pc, #52]	; (20ac0 <sd_mmc_spi_select_device+0x78>)
   20a8a:	0011      	movs	r1, r2
   20a8c:	0018      	movs	r0, r3
   20a8e:	4b0d      	ldr	r3, [pc, #52]	; (20ac4 <sd_mmc_spi_select_device+0x7c>)
   20a90:	4798      	blx	r3
   20a92:	0003      	movs	r3, r0
   20a94:	2b17      	cmp	r3, #23
   20a96:	d0f1      	beq.n	20a7c <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   20a98:	1dfb      	adds	r3, r7, #7
   20a9a:	781a      	ldrb	r2, [r3, #0]
   20a9c:	0013      	movs	r3, r2
   20a9e:	005b      	lsls	r3, r3, #1
   20aa0:	189b      	adds	r3, r3, r2
   20aa2:	4a09      	ldr	r2, [pc, #36]	; (20ac8 <sd_mmc_spi_select_device+0x80>)
   20aa4:	1899      	adds	r1, r3, r2
   20aa6:	4b06      	ldr	r3, [pc, #24]	; (20ac0 <sd_mmc_spi_select_device+0x78>)
   20aa8:	2201      	movs	r2, #1
   20aaa:	0018      	movs	r0, r3
   20aac:	4b07      	ldr	r3, [pc, #28]	; (20acc <sd_mmc_spi_select_device+0x84>)
   20aae:	4798      	blx	r3
}
   20ab0:	46c0      	nop			; (mov r8, r8)
   20ab2:	46bd      	mov	sp, r7
   20ab4:	b003      	add	sp, #12
   20ab6:	bd90      	pop	{r4, r7, pc}
   20ab8:	20004297 	.word	0x20004297
   20abc:	00989680 	.word	0x00989680
   20ac0:	20004254 	.word	0x20004254
   20ac4:	00028b25 	.word	0x00028b25
   20ac8:	20004290 	.word	0x20004290
   20acc:	000290c1 	.word	0x000290c1

00020ad0 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   20ad0:	b580      	push	{r7, lr}
   20ad2:	b082      	sub	sp, #8
   20ad4:	af00      	add	r7, sp, #0
   20ad6:	0002      	movs	r2, r0
   20ad8:	1dfb      	adds	r3, r7, #7
   20ada:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20adc:	4b09      	ldr	r3, [pc, #36]	; (20b04 <sd_mmc_spi_deselect_device+0x34>)
   20ade:	2200      	movs	r2, #0
   20ae0:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   20ae2:	1dfb      	adds	r3, r7, #7
   20ae4:	781a      	ldrb	r2, [r3, #0]
   20ae6:	0013      	movs	r3, r2
   20ae8:	005b      	lsls	r3, r3, #1
   20aea:	189b      	adds	r3, r3, r2
   20aec:	4a06      	ldr	r2, [pc, #24]	; (20b08 <sd_mmc_spi_deselect_device+0x38>)
   20aee:	1899      	adds	r1, r3, r2
   20af0:	4b06      	ldr	r3, [pc, #24]	; (20b0c <sd_mmc_spi_deselect_device+0x3c>)
   20af2:	2200      	movs	r2, #0
   20af4:	0018      	movs	r0, r3
   20af6:	4b06      	ldr	r3, [pc, #24]	; (20b10 <sd_mmc_spi_deselect_device+0x40>)
   20af8:	4798      	blx	r3
}
   20afa:	46c0      	nop			; (mov r8, r8)
   20afc:	46bd      	mov	sp, r7
   20afe:	b002      	add	sp, #8
   20b00:	bd80      	pop	{r7, pc}
   20b02:	46c0      	nop			; (mov r8, r8)
   20b04:	20004297 	.word	0x20004297
   20b08:	20004290 	.word	0x20004290
   20b0c:	20004254 	.word	0x20004254
   20b10:	000290c1 	.word	0x000290c1

00020b14 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   20b14:	b580      	push	{r7, lr}
   20b16:	b082      	sub	sp, #8
   20b18:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   20b1a:	1dbb      	adds	r3, r7, #6
   20b1c:	22ff      	movs	r2, #255	; 0xff
   20b1e:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20b20:	4b0c      	ldr	r3, [pc, #48]	; (20b54 <sd_mmc_spi_send_clock+0x40>)
   20b22:	2200      	movs	r2, #0
   20b24:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   20b26:	1dfb      	adds	r3, r7, #7
   20b28:	2200      	movs	r2, #0
   20b2a:	701a      	strb	r2, [r3, #0]
   20b2c:	e00a      	b.n	20b44 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   20b2e:	1db9      	adds	r1, r7, #6
   20b30:	4b09      	ldr	r3, [pc, #36]	; (20b58 <sd_mmc_spi_send_clock+0x44>)
   20b32:	2201      	movs	r2, #1
   20b34:	0018      	movs	r0, r3
   20b36:	4b09      	ldr	r3, [pc, #36]	; (20b5c <sd_mmc_spi_send_clock+0x48>)
   20b38:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   20b3a:	1dfb      	adds	r3, r7, #7
   20b3c:	781a      	ldrb	r2, [r3, #0]
   20b3e:	1dfb      	adds	r3, r7, #7
   20b40:	3201      	adds	r2, #1
   20b42:	701a      	strb	r2, [r3, #0]
   20b44:	1dfb      	adds	r3, r7, #7
   20b46:	781b      	ldrb	r3, [r3, #0]
   20b48:	2b09      	cmp	r3, #9
   20b4a:	d9f0      	bls.n	20b2e <sd_mmc_spi_send_clock+0x1a>
	}
}
   20b4c:	46c0      	nop			; (mov r8, r8)
   20b4e:	46bd      	mov	sp, r7
   20b50:	b002      	add	sp, #8
   20b52:	bd80      	pop	{r7, pc}
   20b54:	20004297 	.word	0x20004297
   20b58:	20004254 	.word	0x20004254
   20b5c:	000291b1 	.word	0x000291b1

00020b60 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   20b60:	b590      	push	{r4, r7, lr}
   20b62:	b085      	sub	sp, #20
   20b64:	af02      	add	r7, sp, #8
   20b66:	6078      	str	r0, [r7, #4]
   20b68:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   20b6a:	6839      	ldr	r1, [r7, #0]
   20b6c:	6878      	ldr	r0, [r7, #4]
   20b6e:	2300      	movs	r3, #0
   20b70:	9300      	str	r3, [sp, #0]
   20b72:	2300      	movs	r3, #0
   20b74:	2200      	movs	r2, #0
   20b76:	4c03      	ldr	r4, [pc, #12]	; (20b84 <sd_mmc_spi_send_cmd+0x24>)
   20b78:	47a0      	blx	r4
   20b7a:	0003      	movs	r3, r0
}
   20b7c:	0018      	movs	r0, r3
   20b7e:	46bd      	mov	sp, r7
   20b80:	b003      	add	sp, #12
   20b82:	bd90      	pop	{r4, r7, pc}
   20b84:	00020b89 	.word	0x00020b89

00020b88 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   20b88:	b590      	push	{r4, r7, lr}
   20b8a:	b089      	sub	sp, #36	; 0x24
   20b8c:	af00      	add	r7, sp, #0
   20b8e:	60f8      	str	r0, [r7, #12]
   20b90:	60b9      	str	r1, [r7, #8]
   20b92:	0019      	movs	r1, r3
   20b94:	1dbb      	adds	r3, r7, #6
   20b96:	801a      	strh	r2, [r3, #0]
   20b98:	1d3b      	adds	r3, r7, #4
   20b9a:	1c0a      	adds	r2, r1, #0
   20b9c:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   20b9e:	231b      	movs	r3, #27
   20ba0:	18fb      	adds	r3, r7, r3
   20ba2:	22ff      	movs	r2, #255	; 0xff
   20ba4:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   20ba6:	231c      	movs	r3, #28
   20ba8:	18fb      	adds	r3, r7, r3
   20baa:	22ff      	movs	r2, #255	; 0xff
   20bac:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20bae:	4b72      	ldr	r3, [pc, #456]	; (20d78 <sd_mmc_spi_adtc_start+0x1f0>)
   20bb0:	2200      	movs	r2, #0
   20bb2:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   20bb4:	68fb      	ldr	r3, [r7, #12]
   20bb6:	b2db      	uxtb	r3, r3
   20bb8:	223f      	movs	r2, #63	; 0x3f
   20bba:	4013      	ands	r3, r2
   20bbc:	b2db      	uxtb	r3, r3
   20bbe:	2240      	movs	r2, #64	; 0x40
   20bc0:	4313      	orrs	r3, r2
   20bc2:	b2da      	uxtb	r2, r3
   20bc4:	2314      	movs	r3, #20
   20bc6:	18fb      	adds	r3, r7, r3
   20bc8:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   20bca:	68bb      	ldr	r3, [r7, #8]
   20bcc:	0e1b      	lsrs	r3, r3, #24
   20bce:	b2da      	uxtb	r2, r3
   20bd0:	2314      	movs	r3, #20
   20bd2:	18fb      	adds	r3, r7, r3
   20bd4:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   20bd6:	68bb      	ldr	r3, [r7, #8]
   20bd8:	0c1b      	lsrs	r3, r3, #16
   20bda:	b2da      	uxtb	r2, r3
   20bdc:	2314      	movs	r3, #20
   20bde:	18fb      	adds	r3, r7, r3
   20be0:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   20be2:	68bb      	ldr	r3, [r7, #8]
   20be4:	0a1b      	lsrs	r3, r3, #8
   20be6:	b2da      	uxtb	r2, r3
   20be8:	2314      	movs	r3, #20
   20bea:	18fb      	adds	r3, r7, r3
   20bec:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   20bee:	68bb      	ldr	r3, [r7, #8]
   20bf0:	b2da      	uxtb	r2, r3
   20bf2:	2314      	movs	r3, #20
   20bf4:	18fb      	adds	r3, r7, r3
   20bf6:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   20bf8:	2314      	movs	r3, #20
   20bfa:	18fb      	adds	r3, r7, r3
   20bfc:	2105      	movs	r1, #5
   20bfe:	0018      	movs	r0, r3
   20c00:	4b5e      	ldr	r3, [pc, #376]	; (20d7c <sd_mmc_spi_adtc_start+0x1f4>)
   20c02:	4798      	blx	r3
   20c04:	0003      	movs	r3, r0
   20c06:	001a      	movs	r2, r3
   20c08:	2314      	movs	r3, #20
   20c0a:	18fb      	adds	r3, r7, r3
   20c0c:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   20c0e:	231b      	movs	r3, #27
   20c10:	18f9      	adds	r1, r7, r3
   20c12:	4b5b      	ldr	r3, [pc, #364]	; (20d80 <sd_mmc_spi_adtc_start+0x1f8>)
   20c14:	2201      	movs	r2, #1
   20c16:	0018      	movs	r0, r3
   20c18:	4b5a      	ldr	r3, [pc, #360]	; (20d84 <sd_mmc_spi_adtc_start+0x1fc>)
   20c1a:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   20c1c:	2314      	movs	r3, #20
   20c1e:	18f9      	adds	r1, r7, r3
   20c20:	4b57      	ldr	r3, [pc, #348]	; (20d80 <sd_mmc_spi_adtc_start+0x1f8>)
   20c22:	2206      	movs	r2, #6
   20c24:	0018      	movs	r0, r3
   20c26:	4b57      	ldr	r3, [pc, #348]	; (20d84 <sd_mmc_spi_adtc_start+0x1fc>)
   20c28:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   20c2a:	2313      	movs	r3, #19
   20c2c:	18fb      	adds	r3, r7, r3
   20c2e:	22ff      	movs	r2, #255	; 0xff
   20c30:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   20c32:	231c      	movs	r3, #28
   20c34:	18fb      	adds	r3, r7, r3
   20c36:	881b      	ldrh	r3, [r3, #0]
   20c38:	2213      	movs	r2, #19
   20c3a:	18b9      	adds	r1, r7, r2
   20c3c:	4850      	ldr	r0, [pc, #320]	; (20d80 <sd_mmc_spi_adtc_start+0x1f8>)
   20c3e:	2201      	movs	r2, #1
   20c40:	4c51      	ldr	r4, [pc, #324]	; (20d88 <sd_mmc_spi_adtc_start+0x200>)
   20c42:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   20c44:	231f      	movs	r3, #31
   20c46:	18fb      	adds	r3, r7, r3
   20c48:	2207      	movs	r2, #7
   20c4a:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   20c4c:	231c      	movs	r3, #28
   20c4e:	18fb      	adds	r3, r7, r3
   20c50:	881b      	ldrh	r3, [r3, #0]
   20c52:	2213      	movs	r2, #19
   20c54:	18b9      	adds	r1, r7, r2
   20c56:	484a      	ldr	r0, [pc, #296]	; (20d80 <sd_mmc_spi_adtc_start+0x1f8>)
   20c58:	2201      	movs	r2, #1
   20c5a:	4c4b      	ldr	r4, [pc, #300]	; (20d88 <sd_mmc_spi_adtc_start+0x200>)
   20c5c:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   20c5e:	2313      	movs	r3, #19
   20c60:	18fb      	adds	r3, r7, r3
   20c62:	781b      	ldrb	r3, [r3, #0]
   20c64:	b25b      	sxtb	r3, r3
   20c66:	2b00      	cmp	r3, #0
   20c68:	da10      	bge.n	20c8c <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   20c6a:	231f      	movs	r3, #31
   20c6c:	18fb      	adds	r3, r7, r3
   20c6e:	221f      	movs	r2, #31
   20c70:	18ba      	adds	r2, r7, r2
   20c72:	7812      	ldrb	r2, [r2, #0]
   20c74:	3a01      	subs	r2, #1
   20c76:	701a      	strb	r2, [r3, #0]
   20c78:	231f      	movs	r3, #31
   20c7a:	18fb      	adds	r3, r7, r3
   20c7c:	781b      	ldrb	r3, [r3, #0]
   20c7e:	2b00      	cmp	r3, #0
   20c80:	d1e4      	bne.n	20c4c <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   20c82:	4b3d      	ldr	r3, [pc, #244]	; (20d78 <sd_mmc_spi_adtc_start+0x1f0>)
   20c84:	2202      	movs	r2, #2
   20c86:	701a      	strb	r2, [r3, #0]
			return false;
   20c88:	2300      	movs	r3, #0
   20c8a:	e070      	b.n	20d6e <sd_mmc_spi_adtc_start+0x1e6>
			break;
   20c8c:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   20c8e:	2313      	movs	r3, #19
   20c90:	18fb      	adds	r3, r7, r3
   20c92:	781b      	ldrb	r3, [r3, #0]
   20c94:	001a      	movs	r2, r3
   20c96:	4b3d      	ldr	r3, [pc, #244]	; (20d8c <sd_mmc_spi_adtc_start+0x204>)
   20c98:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   20c9a:	2313      	movs	r3, #19
   20c9c:	18fb      	adds	r3, r7, r3
   20c9e:	781b      	ldrb	r3, [r3, #0]
   20ca0:	001a      	movs	r2, r3
   20ca2:	2308      	movs	r3, #8
   20ca4:	4013      	ands	r3, r2
   20ca6:	d004      	beq.n	20cb2 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   20ca8:	4b33      	ldr	r3, [pc, #204]	; (20d78 <sd_mmc_spi_adtc_start+0x1f0>)
   20caa:	2206      	movs	r2, #6
   20cac:	701a      	strb	r2, [r3, #0]
		return false;
   20cae:	2300      	movs	r3, #0
   20cb0:	e05d      	b.n	20d6e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   20cb2:	2313      	movs	r3, #19
   20cb4:	18fb      	adds	r3, r7, r3
   20cb6:	781b      	ldrb	r3, [r3, #0]
   20cb8:	001a      	movs	r2, r3
   20cba:	2304      	movs	r3, #4
   20cbc:	4013      	ands	r3, r2
   20cbe:	d004      	beq.n	20cca <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   20cc0:	4b2d      	ldr	r3, [pc, #180]	; (20d78 <sd_mmc_spi_adtc_start+0x1f0>)
   20cc2:	2209      	movs	r2, #9
   20cc4:	701a      	strb	r2, [r3, #0]
		return false;
   20cc6:	2300      	movs	r3, #0
   20cc8:	e051      	b.n	20d6e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   20cca:	2313      	movs	r3, #19
   20ccc:	18fb      	adds	r3, r7, r3
   20cce:	781b      	ldrb	r3, [r3, #0]
   20cd0:	001a      	movs	r2, r3
   20cd2:	2301      	movs	r3, #1
   20cd4:	439a      	bics	r2, r3
   20cd6:	1e13      	subs	r3, r2, #0
   20cd8:	d004      	beq.n	20ce4 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   20cda:	4b27      	ldr	r3, [pc, #156]	; (20d78 <sd_mmc_spi_adtc_start+0x1f0>)
   20cdc:	2201      	movs	r2, #1
   20cde:	701a      	strb	r2, [r3, #0]
		return false;
   20ce0:	2300      	movs	r3, #0
   20ce2:	e044      	b.n	20d6e <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   20ce4:	68fa      	ldr	r2, [r7, #12]
   20ce6:	2380      	movs	r3, #128	; 0x80
   20ce8:	019b      	lsls	r3, r3, #6
   20cea:	4013      	ands	r3, r2
   20cec:	d00d      	beq.n	20d0a <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   20cee:	4b28      	ldr	r3, [pc, #160]	; (20d90 <sd_mmc_spi_adtc_start+0x208>)
   20cf0:	4798      	blx	r3
   20cf2:	0003      	movs	r3, r0
   20cf4:	001a      	movs	r2, r3
   20cf6:	2301      	movs	r3, #1
   20cf8:	4053      	eors	r3, r2
   20cfa:	b2db      	uxtb	r3, r3
   20cfc:	2b00      	cmp	r3, #0
   20cfe:	d004      	beq.n	20d0a <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   20d00:	4b1d      	ldr	r3, [pc, #116]	; (20d78 <sd_mmc_spi_adtc_start+0x1f0>)
   20d02:	2203      	movs	r2, #3
   20d04:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   20d06:	2300      	movs	r3, #0
   20d08:	e031      	b.n	20d6e <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   20d0a:	68fa      	ldr	r2, [r7, #12]
   20d0c:	2380      	movs	r3, #128	; 0x80
   20d0e:	009b      	lsls	r3, r3, #2
   20d10:	4013      	ands	r3, r2
   20d12:	d00e      	beq.n	20d32 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   20d14:	4b1d      	ldr	r3, [pc, #116]	; (20d8c <sd_mmc_spi_adtc_start+0x204>)
   20d16:	2200      	movs	r2, #0
   20d18:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   20d1a:	231c      	movs	r3, #28
   20d1c:	18fb      	adds	r3, r7, r3
   20d1e:	881b      	ldrh	r3, [r3, #0]
   20d20:	491a      	ldr	r1, [pc, #104]	; (20d8c <sd_mmc_spi_adtc_start+0x204>)
   20d22:	4817      	ldr	r0, [pc, #92]	; (20d80 <sd_mmc_spi_adtc_start+0x1f8>)
   20d24:	2201      	movs	r2, #1
   20d26:	4c18      	ldr	r4, [pc, #96]	; (20d88 <sd_mmc_spi_adtc_start+0x200>)
   20d28:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   20d2a:	4b18      	ldr	r3, [pc, #96]	; (20d8c <sd_mmc_spi_adtc_start+0x204>)
   20d2c:	681a      	ldr	r2, [r3, #0]
   20d2e:	4b17      	ldr	r3, [pc, #92]	; (20d8c <sd_mmc_spi_adtc_start+0x204>)
   20d30:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   20d32:	68fa      	ldr	r2, [r7, #12]
   20d34:	2380      	movs	r3, #128	; 0x80
   20d36:	00db      	lsls	r3, r3, #3
   20d38:	4013      	ands	r3, r2
   20d3a:	d00c      	beq.n	20d56 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   20d3c:	231c      	movs	r3, #28
   20d3e:	18fb      	adds	r3, r7, r3
   20d40:	881b      	ldrh	r3, [r3, #0]
   20d42:	4912      	ldr	r1, [pc, #72]	; (20d8c <sd_mmc_spi_adtc_start+0x204>)
   20d44:	480e      	ldr	r0, [pc, #56]	; (20d80 <sd_mmc_spi_adtc_start+0x1f8>)
   20d46:	2204      	movs	r2, #4
   20d48:	4c0f      	ldr	r4, [pc, #60]	; (20d88 <sd_mmc_spi_adtc_start+0x200>)
   20d4a:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   20d4c:	4b0f      	ldr	r3, [pc, #60]	; (20d8c <sd_mmc_spi_adtc_start+0x204>)
   20d4e:	681b      	ldr	r3, [r3, #0]
   20d50:	ba1a      	rev	r2, r3
   20d52:	4b0e      	ldr	r3, [pc, #56]	; (20d8c <sd_mmc_spi_adtc_start+0x204>)
   20d54:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   20d56:	4b0f      	ldr	r3, [pc, #60]	; (20d94 <sd_mmc_spi_adtc_start+0x20c>)
   20d58:	1dba      	adds	r2, r7, #6
   20d5a:	8812      	ldrh	r2, [r2, #0]
   20d5c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   20d5e:	4b0e      	ldr	r3, [pc, #56]	; (20d98 <sd_mmc_spi_adtc_start+0x210>)
   20d60:	1d3a      	adds	r2, r7, #4
   20d62:	8812      	ldrh	r2, [r2, #0]
   20d64:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   20d66:	4b0d      	ldr	r3, [pc, #52]	; (20d9c <sd_mmc_spi_adtc_start+0x214>)
   20d68:	2200      	movs	r2, #0
   20d6a:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   20d6c:	2301      	movs	r3, #1
}
   20d6e:	0018      	movs	r0, r3
   20d70:	46bd      	mov	sp, r7
   20d72:	b009      	add	sp, #36	; 0x24
   20d74:	bd90      	pop	{r4, r7, pc}
   20d76:	46c0      	nop			; (mov r8, r8)
   20d78:	20004297 	.word	0x20004297
   20d7c:	00020629 	.word	0x00020629
   20d80:	20004254 	.word	0x20004254
   20d84:	000291b1 	.word	0x000291b1
   20d88:	00028f8d 	.word	0x00028f8d
   20d8c:	20004298 	.word	0x20004298
   20d90:	000206e5 	.word	0x000206e5
   20d94:	200042a0 	.word	0x200042a0
   20d98:	200042a2 	.word	0x200042a2
   20d9c:	2000429c 	.word	0x2000429c

00020da0 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   20da0:	b580      	push	{r7, lr}
   20da2:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   20da4:	4b02      	ldr	r3, [pc, #8]	; (20db0 <sd_mmc_spi_get_response+0x10>)
   20da6:	681b      	ldr	r3, [r3, #0]
}
   20da8:	0018      	movs	r0, r3
   20daa:	46bd      	mov	sp, r7
   20dac:	bd80      	pop	{r7, pc}
   20dae:	46c0      	nop			; (mov r8, r8)
   20db0:	20004298 	.word	0x20004298

00020db4 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   20db4:	b590      	push	{r4, r7, lr}
   20db6:	b085      	sub	sp, #20
   20db8:	af00      	add	r7, sp, #0
   20dba:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   20dbc:	230e      	movs	r3, #14
   20dbe:	18fb      	adds	r3, r7, r3
   20dc0:	22ff      	movs	r2, #255	; 0xff
   20dc2:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20dc4:	4b1c      	ldr	r3, [pc, #112]	; (20e38 <sd_mmc_spi_read_word+0x84>)
   20dc6:	2200      	movs	r2, #0
   20dc8:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   20dca:	4b1c      	ldr	r3, [pc, #112]	; (20e3c <sd_mmc_spi_read_word+0x88>)
   20dcc:	681a      	ldr	r2, [r3, #0]
   20dce:	4b1c      	ldr	r3, [pc, #112]	; (20e40 <sd_mmc_spi_read_word+0x8c>)
   20dd0:	881b      	ldrh	r3, [r3, #0]
   20dd2:	0019      	movs	r1, r3
   20dd4:	4b1b      	ldr	r3, [pc, #108]	; (20e44 <sd_mmc_spi_read_word+0x90>)
   20dd6:	0010      	movs	r0, r2
   20dd8:	4798      	blx	r3
   20dda:	1e0b      	subs	r3, r1, #0
   20ddc:	d10a      	bne.n	20df4 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   20dde:	4b1a      	ldr	r3, [pc, #104]	; (20e48 <sd_mmc_spi_read_word+0x94>)
   20de0:	4798      	blx	r3
   20de2:	0003      	movs	r3, r0
   20de4:	001a      	movs	r2, r3
   20de6:	2301      	movs	r3, #1
   20de8:	4053      	eors	r3, r2
   20dea:	b2db      	uxtb	r3, r3
   20dec:	2b00      	cmp	r3, #0
   20dee:	d001      	beq.n	20df4 <sd_mmc_spi_read_word+0x40>
			return false;
   20df0:	2300      	movs	r3, #0
   20df2:	e01d      	b.n	20e30 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   20df4:	230e      	movs	r3, #14
   20df6:	18fb      	adds	r3, r7, r3
   20df8:	881b      	ldrh	r3, [r3, #0]
   20dfa:	1d39      	adds	r1, r7, #4
   20dfc:	4813      	ldr	r0, [pc, #76]	; (20e4c <sd_mmc_spi_read_word+0x98>)
   20dfe:	2204      	movs	r2, #4
   20e00:	4c13      	ldr	r4, [pc, #76]	; (20e50 <sd_mmc_spi_read_word+0x9c>)
   20e02:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   20e04:	687b      	ldr	r3, [r7, #4]
   20e06:	687a      	ldr	r2, [r7, #4]
   20e08:	6812      	ldr	r2, [r2, #0]
   20e0a:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   20e0c:	4b0b      	ldr	r3, [pc, #44]	; (20e3c <sd_mmc_spi_read_word+0x88>)
   20e0e:	681b      	ldr	r3, [r3, #0]
   20e10:	1d1a      	adds	r2, r3, #4
   20e12:	4b0a      	ldr	r3, [pc, #40]	; (20e3c <sd_mmc_spi_read_word+0x88>)
   20e14:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   20e16:	4b09      	ldr	r3, [pc, #36]	; (20e3c <sd_mmc_spi_read_word+0x88>)
   20e18:	681a      	ldr	r2, [r3, #0]
   20e1a:	4b09      	ldr	r3, [pc, #36]	; (20e40 <sd_mmc_spi_read_word+0x8c>)
   20e1c:	881b      	ldrh	r3, [r3, #0]
   20e1e:	0019      	movs	r1, r3
   20e20:	4b08      	ldr	r3, [pc, #32]	; (20e44 <sd_mmc_spi_read_word+0x90>)
   20e22:	0010      	movs	r0, r2
   20e24:	4798      	blx	r3
   20e26:	1e0b      	subs	r3, r1, #0
   20e28:	d101      	bne.n	20e2e <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   20e2a:	4b0a      	ldr	r3, [pc, #40]	; (20e54 <sd_mmc_spi_read_word+0xa0>)
   20e2c:	4798      	blx	r3
	}
	return true;
   20e2e:	2301      	movs	r3, #1
}
   20e30:	0018      	movs	r0, r3
   20e32:	46bd      	mov	sp, r7
   20e34:	b005      	add	sp, #20
   20e36:	bd90      	pop	{r4, r7, pc}
   20e38:	20004297 	.word	0x20004297
   20e3c:	2000429c 	.word	0x2000429c
   20e40:	200042a0 	.word	0x200042a0
   20e44:	00033be1 	.word	0x00033be1
   20e48:	00020751 	.word	0x00020751
   20e4c:	20004254 	.word	0x20004254
   20e50:	00028f8d 	.word	0x00028f8d
   20e54:	000207d5 	.word	0x000207d5

00020e58 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   20e58:	b590      	push	{r4, r7, lr}
   20e5a:	b085      	sub	sp, #20
   20e5c:	af00      	add	r7, sp, #0
   20e5e:	6078      	str	r0, [r7, #4]
   20e60:	000a      	movs	r2, r1
   20e62:	1cbb      	adds	r3, r7, #2
   20e64:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   20e66:	230a      	movs	r3, #10
   20e68:	18fb      	adds	r3, r7, r3
   20e6a:	22ff      	movs	r2, #255	; 0xff
   20e6c:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20e6e:	4b1c      	ldr	r3, [pc, #112]	; (20ee0 <sd_mmc_spi_start_read_blocks+0x88>)
   20e70:	2200      	movs	r2, #0
   20e72:	701a      	strb	r2, [r3, #0]
	pos = 0;
   20e74:	2300      	movs	r3, #0
   20e76:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   20e78:	e025      	b.n	20ec6 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   20e7a:	4b1a      	ldr	r3, [pc, #104]	; (20ee4 <sd_mmc_spi_start_read_blocks+0x8c>)
   20e7c:	4798      	blx	r3
   20e7e:	0003      	movs	r3, r0
   20e80:	001a      	movs	r2, r3
   20e82:	2301      	movs	r3, #1
   20e84:	4053      	eors	r3, r2
   20e86:	b2db      	uxtb	r3, r3
   20e88:	2b00      	cmp	r3, #0
   20e8a:	d001      	beq.n	20e90 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   20e8c:	2300      	movs	r3, #0
   20e8e:	e022      	b.n	20ed6 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   20e90:	687a      	ldr	r2, [r7, #4]
   20e92:	68fb      	ldr	r3, [r7, #12]
   20e94:	18d1      	adds	r1, r2, r3
   20e96:	4b14      	ldr	r3, [pc, #80]	; (20ee8 <sd_mmc_spi_start_read_blocks+0x90>)
   20e98:	881a      	ldrh	r2, [r3, #0]
   20e9a:	230a      	movs	r3, #10
   20e9c:	18fb      	adds	r3, r7, r3
   20e9e:	881b      	ldrh	r3, [r3, #0]
   20ea0:	4812      	ldr	r0, [pc, #72]	; (20eec <sd_mmc_spi_start_read_blocks+0x94>)
   20ea2:	4c13      	ldr	r4, [pc, #76]	; (20ef0 <sd_mmc_spi_start_read_blocks+0x98>)
   20ea4:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   20ea6:	4b10      	ldr	r3, [pc, #64]	; (20ee8 <sd_mmc_spi_start_read_blocks+0x90>)
   20ea8:	881b      	ldrh	r3, [r3, #0]
   20eaa:	001a      	movs	r2, r3
   20eac:	68fb      	ldr	r3, [r7, #12]
   20eae:	189b      	adds	r3, r3, r2
   20eb0:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   20eb2:	4b0d      	ldr	r3, [pc, #52]	; (20ee8 <sd_mmc_spi_start_read_blocks+0x90>)
   20eb4:	881b      	ldrh	r3, [r3, #0]
   20eb6:	001a      	movs	r2, r3
   20eb8:	4b0e      	ldr	r3, [pc, #56]	; (20ef4 <sd_mmc_spi_start_read_blocks+0x9c>)
   20eba:	681b      	ldr	r3, [r3, #0]
   20ebc:	18d2      	adds	r2, r2, r3
   20ebe:	4b0d      	ldr	r3, [pc, #52]	; (20ef4 <sd_mmc_spi_start_read_blocks+0x9c>)
   20ec0:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   20ec2:	4b0d      	ldr	r3, [pc, #52]	; (20ef8 <sd_mmc_spi_start_read_blocks+0xa0>)
   20ec4:	4798      	blx	r3
	while (nb_block--) {
   20ec6:	1cbb      	adds	r3, r7, #2
   20ec8:	881b      	ldrh	r3, [r3, #0]
   20eca:	1cba      	adds	r2, r7, #2
   20ecc:	1e59      	subs	r1, r3, #1
   20ece:	8011      	strh	r1, [r2, #0]
   20ed0:	2b00      	cmp	r3, #0
   20ed2:	d1d2      	bne.n	20e7a <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   20ed4:	2301      	movs	r3, #1
}
   20ed6:	0018      	movs	r0, r3
   20ed8:	46bd      	mov	sp, r7
   20eda:	b005      	add	sp, #20
   20edc:	bd90      	pop	{r4, r7, pc}
   20ede:	46c0      	nop			; (mov r8, r8)
   20ee0:	20004297 	.word	0x20004297
   20ee4:	00020751 	.word	0x00020751
   20ee8:	200042a0 	.word	0x200042a0
   20eec:	20004254 	.word	0x20004254
   20ef0:	00028f8d 	.word	0x00028f8d
   20ef4:	2000429c 	.word	0x2000429c
   20ef8:	000207d5 	.word	0x000207d5

00020efc <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   20efc:	b580      	push	{r7, lr}
   20efe:	af00      	add	r7, sp, #0
	return true;
   20f00:	2301      	movs	r3, #1
}
   20f02:	0018      	movs	r0, r3
   20f04:	46bd      	mov	sp, r7
   20f06:	bd80      	pop	{r7, pc}

00020f08 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   20f08:	b580      	push	{r7, lr}
   20f0a:	b084      	sub	sp, #16
   20f0c:	af00      	add	r7, sp, #0
   20f0e:	6078      	str	r0, [r7, #4]
   20f10:	000a      	movs	r2, r1
   20f12:	1cbb      	adds	r3, r7, #2
   20f14:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20f16:	4b24      	ldr	r3, [pc, #144]	; (20fa8 <sd_mmc_spi_start_write_blocks+0xa0>)
   20f18:	2200      	movs	r2, #0
   20f1a:	701a      	strb	r2, [r3, #0]
	pos = 0;
   20f1c:	2300      	movs	r3, #0
   20f1e:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   20f20:	e035      	b.n	20f8e <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   20f22:	4b22      	ldr	r3, [pc, #136]	; (20fac <sd_mmc_spi_start_write_blocks+0xa4>)
   20f24:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   20f26:	687a      	ldr	r2, [r7, #4]
   20f28:	68fb      	ldr	r3, [r7, #12]
   20f2a:	18d1      	adds	r1, r2, r3
   20f2c:	4b20      	ldr	r3, [pc, #128]	; (20fb0 <sd_mmc_spi_start_write_blocks+0xa8>)
   20f2e:	881a      	ldrh	r2, [r3, #0]
   20f30:	4b20      	ldr	r3, [pc, #128]	; (20fb4 <sd_mmc_spi_start_write_blocks+0xac>)
   20f32:	0018      	movs	r0, r3
   20f34:	4b20      	ldr	r3, [pc, #128]	; (20fb8 <sd_mmc_spi_start_write_blocks+0xb0>)
   20f36:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   20f38:	4b1d      	ldr	r3, [pc, #116]	; (20fb0 <sd_mmc_spi_start_write_blocks+0xa8>)
   20f3a:	881b      	ldrh	r3, [r3, #0]
   20f3c:	001a      	movs	r2, r3
   20f3e:	68fb      	ldr	r3, [r7, #12]
   20f40:	189b      	adds	r3, r3, r2
   20f42:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   20f44:	4b1a      	ldr	r3, [pc, #104]	; (20fb0 <sd_mmc_spi_start_write_blocks+0xa8>)
   20f46:	881b      	ldrh	r3, [r3, #0]
   20f48:	001a      	movs	r2, r3
   20f4a:	4b1c      	ldr	r3, [pc, #112]	; (20fbc <sd_mmc_spi_start_write_blocks+0xb4>)
   20f4c:	681b      	ldr	r3, [r3, #0]
   20f4e:	18d2      	adds	r2, r2, r3
   20f50:	4b1a      	ldr	r3, [pc, #104]	; (20fbc <sd_mmc_spi_start_write_blocks+0xb4>)
   20f52:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   20f54:	4b1a      	ldr	r3, [pc, #104]	; (20fc0 <sd_mmc_spi_start_write_blocks+0xb8>)
   20f56:	4798      	blx	r3
   20f58:	0003      	movs	r3, r0
   20f5a:	001a      	movs	r2, r3
   20f5c:	2301      	movs	r3, #1
   20f5e:	4053      	eors	r3, r2
   20f60:	b2db      	uxtb	r3, r3
   20f62:	2b00      	cmp	r3, #0
   20f64:	d001      	beq.n	20f6a <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   20f66:	2300      	movs	r3, #0
   20f68:	e019      	b.n	20f9e <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   20f6a:	1cbb      	adds	r3, r7, #2
   20f6c:	881b      	ldrh	r3, [r3, #0]
   20f6e:	2b00      	cmp	r3, #0
   20f70:	d00d      	beq.n	20f8e <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   20f72:	4b14      	ldr	r3, [pc, #80]	; (20fc4 <sd_mmc_spi_start_write_blocks+0xbc>)
   20f74:	4798      	blx	r3
   20f76:	0003      	movs	r3, r0
   20f78:	001a      	movs	r2, r3
   20f7a:	2301      	movs	r3, #1
   20f7c:	4053      	eors	r3, r2
   20f7e:	b2db      	uxtb	r3, r3
   20f80:	2b00      	cmp	r3, #0
   20f82:	d004      	beq.n	20f8e <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   20f84:	4b08      	ldr	r3, [pc, #32]	; (20fa8 <sd_mmc_spi_start_write_blocks+0xa0>)
   20f86:	2205      	movs	r2, #5
   20f88:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   20f8a:	2300      	movs	r3, #0
   20f8c:	e007      	b.n	20f9e <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   20f8e:	1cbb      	adds	r3, r7, #2
   20f90:	881b      	ldrh	r3, [r3, #0]
   20f92:	1cba      	adds	r2, r7, #2
   20f94:	1e59      	subs	r1, r3, #1
   20f96:	8011      	strh	r1, [r2, #0]
   20f98:	2b00      	cmp	r3, #0
   20f9a:	d1c2      	bne.n	20f22 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   20f9c:	2301      	movs	r3, #1
}
   20f9e:	0018      	movs	r0, r3
   20fa0:	46bd      	mov	sp, r7
   20fa2:	b004      	add	sp, #16
   20fa4:	bd80      	pop	{r7, pc}
   20fa6:	46c0      	nop			; (mov r8, r8)
   20fa8:	20004297 	.word	0x20004297
   20fac:	00020801 	.word	0x00020801
   20fb0:	200042a0 	.word	0x200042a0
   20fb4:	20004254 	.word	0x20004254
   20fb8:	000291b1 	.word	0x000291b1
   20fbc:	2000429c 	.word	0x2000429c
   20fc0:	00020851 	.word	0x00020851
   20fc4:	000206e5 	.word	0x000206e5

00020fc8 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   20fc8:	b580      	push	{r7, lr}
   20fca:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   20fcc:	4b09      	ldr	r3, [pc, #36]	; (20ff4 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   20fce:	4798      	blx	r3
   20fd0:	0003      	movs	r3, r0
   20fd2:	001a      	movs	r2, r3
   20fd4:	2301      	movs	r3, #1
   20fd6:	4053      	eors	r3, r2
   20fd8:	b2db      	uxtb	r3, r3
   20fda:	2b00      	cmp	r3, #0
   20fdc:	d004      	beq.n	20fe8 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   20fde:	4b06      	ldr	r3, [pc, #24]	; (20ff8 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   20fe0:	2205      	movs	r2, #5
   20fe2:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   20fe4:	2300      	movs	r3, #0
   20fe6:	e002      	b.n	20fee <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   20fe8:	4b04      	ldr	r3, [pc, #16]	; (20ffc <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   20fea:	4798      	blx	r3
   20fec:	0003      	movs	r3, r0
}
   20fee:	0018      	movs	r0, r3
   20ff0:	46bd      	mov	sp, r7
   20ff2:	bd80      	pop	{r7, pc}
   20ff4:	000206e5 	.word	0x000206e5
   20ff8:	20004297 	.word	0x20004297
   20ffc:	000208e5 	.word	0x000208e5

00021000 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
   21000:	b580      	push	{r7, lr}
   21002:	b082      	sub	sp, #8
   21004:	af00      	add	r7, sp, #0
   21006:	6078      	str	r0, [r7, #4]
	if (n > 0) {
   21008:	687b      	ldr	r3, [r7, #4]
   2100a:	2b00      	cmp	r3, #0
   2100c:	d00c      	beq.n	21028 <delay_cycles+0x28>
		SysTick->LOAD = n;
   2100e:	4b08      	ldr	r3, [pc, #32]	; (21030 <delay_cycles+0x30>)
   21010:	687a      	ldr	r2, [r7, #4]
   21012:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
   21014:	4b06      	ldr	r3, [pc, #24]	; (21030 <delay_cycles+0x30>)
   21016:	2200      	movs	r2, #0
   21018:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   2101a:	46c0      	nop			; (mov r8, r8)
   2101c:	4b04      	ldr	r3, [pc, #16]	; (21030 <delay_cycles+0x30>)
   2101e:	681a      	ldr	r2, [r3, #0]
   21020:	2380      	movs	r3, #128	; 0x80
   21022:	025b      	lsls	r3, r3, #9
   21024:	4013      	ands	r3, r2
   21026:	d0f9      	beq.n	2101c <delay_cycles+0x1c>
		};
	}
}
   21028:	46c0      	nop			; (mov r8, r8)
   2102a:	46bd      	mov	sp, r7
   2102c:	b002      	add	sp, #8
   2102e:	bd80      	pop	{r7, pc}
   21030:	e000e010 	.word	0xe000e010

00021034 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   21034:	b580      	push	{r7, lr}
   21036:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   21038:	2000      	movs	r0, #0
   2103a:	4b0f      	ldr	r3, [pc, #60]	; (21078 <delay_init+0x44>)
   2103c:	4798      	blx	r3
   2103e:	0002      	movs	r2, r0
   21040:	4b0e      	ldr	r3, [pc, #56]	; (2107c <delay_init+0x48>)
   21042:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   21044:	4b0d      	ldr	r3, [pc, #52]	; (2107c <delay_init+0x48>)
   21046:	6818      	ldr	r0, [r3, #0]
   21048:	4b0d      	ldr	r3, [pc, #52]	; (21080 <delay_init+0x4c>)
   2104a:	22fa      	movs	r2, #250	; 0xfa
   2104c:	0091      	lsls	r1, r2, #2
   2104e:	4798      	blx	r3
   21050:	0003      	movs	r3, r0
   21052:	001a      	movs	r2, r3
   21054:	4b09      	ldr	r3, [pc, #36]	; (2107c <delay_init+0x48>)
   21056:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   21058:	4b08      	ldr	r3, [pc, #32]	; (2107c <delay_init+0x48>)
   2105a:	6818      	ldr	r0, [r3, #0]
   2105c:	4b08      	ldr	r3, [pc, #32]	; (21080 <delay_init+0x4c>)
   2105e:	22fa      	movs	r2, #250	; 0xfa
   21060:	0091      	lsls	r1, r2, #2
   21062:	4798      	blx	r3
   21064:	0003      	movs	r3, r0
   21066:	001a      	movs	r2, r3
   21068:	4b06      	ldr	r3, [pc, #24]	; (21084 <delay_init+0x50>)
   2106a:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   2106c:	4b06      	ldr	r3, [pc, #24]	; (21088 <delay_init+0x54>)
   2106e:	2205      	movs	r2, #5
   21070:	601a      	str	r2, [r3, #0]
}
   21072:	46c0      	nop			; (mov r8, r8)
   21074:	46bd      	mov	sp, r7
   21076:	bd80      	pop	{r7, pc}
   21078:	0002ad35 	.word	0x0002ad35
   2107c:	2000011c 	.word	0x2000011c
   21080:	00033ad5 	.word	0x00033ad5
   21084:	20000120 	.word	0x20000120
   21088:	e000e010 	.word	0xe000e010

0002108c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   2108c:	b580      	push	{r7, lr}
   2108e:	b082      	sub	sp, #8
   21090:	af00      	add	r7, sp, #0
   21092:	6078      	str	r0, [r7, #4]
	while (n--) {
   21094:	e004      	b.n	210a0 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   21096:	4b07      	ldr	r3, [pc, #28]	; (210b4 <delay_cycles_ms+0x28>)
   21098:	681b      	ldr	r3, [r3, #0]
   2109a:	0018      	movs	r0, r3
   2109c:	4b06      	ldr	r3, [pc, #24]	; (210b8 <delay_cycles_ms+0x2c>)
   2109e:	4798      	blx	r3
	while (n--) {
   210a0:	687b      	ldr	r3, [r7, #4]
   210a2:	1e5a      	subs	r2, r3, #1
   210a4:	607a      	str	r2, [r7, #4]
   210a6:	2b00      	cmp	r3, #0
   210a8:	d1f5      	bne.n	21096 <delay_cycles_ms+0xa>
	}
}
   210aa:	46c0      	nop			; (mov r8, r8)
   210ac:	46bd      	mov	sp, r7
   210ae:	b002      	add	sp, #8
   210b0:	bd80      	pop	{r7, pc}
   210b2:	46c0      	nop			; (mov r8, r8)
   210b4:	2000011c 	.word	0x2000011c
   210b8:	00021001 	.word	0x00021001

000210bc <system_pinmux_get_group_from_gpio_pin>:
{
   210bc:	b580      	push	{r7, lr}
   210be:	b084      	sub	sp, #16
   210c0:	af00      	add	r7, sp, #0
   210c2:	0002      	movs	r2, r0
   210c4:	1dfb      	adds	r3, r7, #7
   210c6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   210c8:	230f      	movs	r3, #15
   210ca:	18fb      	adds	r3, r7, r3
   210cc:	1dfa      	adds	r2, r7, #7
   210ce:	7812      	ldrb	r2, [r2, #0]
   210d0:	09d2      	lsrs	r2, r2, #7
   210d2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   210d4:	230e      	movs	r3, #14
   210d6:	18fb      	adds	r3, r7, r3
   210d8:	1dfa      	adds	r2, r7, #7
   210da:	7812      	ldrb	r2, [r2, #0]
   210dc:	0952      	lsrs	r2, r2, #5
   210de:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   210e0:	4b0d      	ldr	r3, [pc, #52]	; (21118 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   210e2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   210e4:	230f      	movs	r3, #15
   210e6:	18fb      	adds	r3, r7, r3
   210e8:	781b      	ldrb	r3, [r3, #0]
   210ea:	2b00      	cmp	r3, #0
   210ec:	d10f      	bne.n	2110e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   210ee:	230f      	movs	r3, #15
   210f0:	18fb      	adds	r3, r7, r3
   210f2:	781b      	ldrb	r3, [r3, #0]
   210f4:	009b      	lsls	r3, r3, #2
   210f6:	2210      	movs	r2, #16
   210f8:	4694      	mov	ip, r2
   210fa:	44bc      	add	ip, r7
   210fc:	4463      	add	r3, ip
   210fe:	3b08      	subs	r3, #8
   21100:	681a      	ldr	r2, [r3, #0]
   21102:	230e      	movs	r3, #14
   21104:	18fb      	adds	r3, r7, r3
   21106:	781b      	ldrb	r3, [r3, #0]
   21108:	01db      	lsls	r3, r3, #7
   2110a:	18d3      	adds	r3, r2, r3
   2110c:	e000      	b.n	21110 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2110e:	2300      	movs	r3, #0
}
   21110:	0018      	movs	r0, r3
   21112:	46bd      	mov	sp, r7
   21114:	b004      	add	sp, #16
   21116:	bd80      	pop	{r7, pc}
   21118:	41004400 	.word	0x41004400

0002111c <system_interrupt_enable_global>:
{
   2111c:	b580      	push	{r7, lr}
   2111e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   21120:	4b04      	ldr	r3, [pc, #16]	; (21134 <system_interrupt_enable_global+0x18>)
   21122:	2201      	movs	r2, #1
   21124:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   21126:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   2112a:	b662      	cpsie	i
}
   2112c:	46c0      	nop			; (mov r8, r8)
   2112e:	46bd      	mov	sp, r7
   21130:	bd80      	pop	{r7, pc}
   21132:	46c0      	nop			; (mov r8, r8)
   21134:	20000126 	.word	0x20000126

00021138 <port_get_group_from_gpio_pin>:
{
   21138:	b580      	push	{r7, lr}
   2113a:	b082      	sub	sp, #8
   2113c:	af00      	add	r7, sp, #0
   2113e:	0002      	movs	r2, r0
   21140:	1dfb      	adds	r3, r7, #7
   21142:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   21144:	1dfb      	adds	r3, r7, #7
   21146:	781b      	ldrb	r3, [r3, #0]
   21148:	0018      	movs	r0, r3
   2114a:	4b03      	ldr	r3, [pc, #12]	; (21158 <port_get_group_from_gpio_pin+0x20>)
   2114c:	4798      	blx	r3
   2114e:	0003      	movs	r3, r0
}
   21150:	0018      	movs	r0, r3
   21152:	46bd      	mov	sp, r7
   21154:	b002      	add	sp, #8
   21156:	bd80      	pop	{r7, pc}
   21158:	000210bd 	.word	0x000210bd

0002115c <port_get_config_defaults>:
{
   2115c:	b580      	push	{r7, lr}
   2115e:	b082      	sub	sp, #8
   21160:	af00      	add	r7, sp, #0
   21162:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   21164:	687b      	ldr	r3, [r7, #4]
   21166:	2200      	movs	r2, #0
   21168:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   2116a:	687b      	ldr	r3, [r7, #4]
   2116c:	2201      	movs	r2, #1
   2116e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   21170:	687b      	ldr	r3, [r7, #4]
   21172:	2200      	movs	r2, #0
   21174:	709a      	strb	r2, [r3, #2]
}
   21176:	46c0      	nop			; (mov r8, r8)
   21178:	46bd      	mov	sp, r7
   2117a:	b002      	add	sp, #8
   2117c:	bd80      	pop	{r7, pc}
	...

00021180 <port_pin_set_output_level>:
{
   21180:	b580      	push	{r7, lr}
   21182:	b084      	sub	sp, #16
   21184:	af00      	add	r7, sp, #0
   21186:	0002      	movs	r2, r0
   21188:	1dfb      	adds	r3, r7, #7
   2118a:	701a      	strb	r2, [r3, #0]
   2118c:	1dbb      	adds	r3, r7, #6
   2118e:	1c0a      	adds	r2, r1, #0
   21190:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   21192:	1dfb      	adds	r3, r7, #7
   21194:	781b      	ldrb	r3, [r3, #0]
   21196:	0018      	movs	r0, r3
   21198:	4b0d      	ldr	r3, [pc, #52]	; (211d0 <port_pin_set_output_level+0x50>)
   2119a:	4798      	blx	r3
   2119c:	0003      	movs	r3, r0
   2119e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   211a0:	1dfb      	adds	r3, r7, #7
   211a2:	781b      	ldrb	r3, [r3, #0]
   211a4:	221f      	movs	r2, #31
   211a6:	4013      	ands	r3, r2
   211a8:	2201      	movs	r2, #1
   211aa:	409a      	lsls	r2, r3
   211ac:	0013      	movs	r3, r2
   211ae:	60bb      	str	r3, [r7, #8]
	if (level) {
   211b0:	1dbb      	adds	r3, r7, #6
   211b2:	781b      	ldrb	r3, [r3, #0]
   211b4:	2b00      	cmp	r3, #0
   211b6:	d003      	beq.n	211c0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   211b8:	68fb      	ldr	r3, [r7, #12]
   211ba:	68ba      	ldr	r2, [r7, #8]
   211bc:	619a      	str	r2, [r3, #24]
}
   211be:	e002      	b.n	211c6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   211c0:	68fb      	ldr	r3, [r7, #12]
   211c2:	68ba      	ldr	r2, [r7, #8]
   211c4:	615a      	str	r2, [r3, #20]
}
   211c6:	46c0      	nop			; (mov r8, r8)
   211c8:	46bd      	mov	sp, r7
   211ca:	b004      	add	sp, #16
   211cc:	bd80      	pop	{r7, pc}
   211ce:	46c0      	nop			; (mov r8, r8)
   211d0:	00021139 	.word	0x00021139

000211d4 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   211d4:	b580      	push	{r7, lr}
   211d6:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   211d8:	4b04      	ldr	r3, [pc, #16]	; (211ec <chip_isr+0x18>)
   211da:	681b      	ldr	r3, [r3, #0]
   211dc:	2b00      	cmp	r3, #0
   211de:	d002      	beq.n	211e6 <chip_isr+0x12>
		gpfIsr();
   211e0:	4b02      	ldr	r3, [pc, #8]	; (211ec <chip_isr+0x18>)
   211e2:	681b      	ldr	r3, [r3, #0]
   211e4:	4798      	blx	r3
	}
}
   211e6:	46c0      	nop			; (mov r8, r8)
   211e8:	46bd      	mov	sp, r7
   211ea:	bd80      	pop	{r7, pc}
   211ec:	200042a4 	.word	0x200042a4

000211f0 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   211f0:	b580      	push	{r7, lr}
   211f2:	b082      	sub	sp, #8
   211f4:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   211f6:	1d3b      	adds	r3, r7, #4
   211f8:	0018      	movs	r0, r3
   211fa:	4b10      	ldr	r3, [pc, #64]	; (2123c <init_chip_pins+0x4c>)
   211fc:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   211fe:	1d3b      	adds	r3, r7, #4
   21200:	2201      	movs	r2, #1
   21202:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   21204:	1d3b      	adds	r3, r7, #4
   21206:	0019      	movs	r1, r3
   21208:	201b      	movs	r0, #27
   2120a:	4b0d      	ldr	r3, [pc, #52]	; (21240 <init_chip_pins+0x50>)
   2120c:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   2120e:	1d3b      	adds	r3, r7, #4
   21210:	0019      	movs	r1, r3
   21212:	201c      	movs	r0, #28
   21214:	4b0a      	ldr	r3, [pc, #40]	; (21240 <init_chip_pins+0x50>)
   21216:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   21218:	1d3b      	adds	r3, r7, #4
   2121a:	0019      	movs	r1, r3
   2121c:	2028      	movs	r0, #40	; 0x28
   2121e:	4b08      	ldr	r3, [pc, #32]	; (21240 <init_chip_pins+0x50>)
   21220:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   21222:	2100      	movs	r1, #0
   21224:	201c      	movs	r0, #28
   21226:	4b07      	ldr	r3, [pc, #28]	; (21244 <init_chip_pins+0x54>)
   21228:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   2122a:	2100      	movs	r1, #0
   2122c:	201b      	movs	r0, #27
   2122e:	4b05      	ldr	r3, [pc, #20]	; (21244 <init_chip_pins+0x54>)
   21230:	4798      	blx	r3
}
   21232:	46c0      	nop			; (mov r8, r8)
   21234:	46bd      	mov	sp, r7
   21236:	b002      	add	sp, #8
   21238:	bd80      	pop	{r7, pc}
   2123a:	46c0      	nop			; (mov r8, r8)
   2123c:	0002115d 	.word	0x0002115d
   21240:	0002797d 	.word	0x0002797d
   21244:	00021181 	.word	0x00021181

00021248 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   21248:	b580      	push	{r7, lr}
   2124a:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   2124c:	4b0b      	ldr	r3, [pc, #44]	; (2127c <nm_bsp_init+0x34>)
   2124e:	2200      	movs	r2, #0
   21250:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   21252:	4b0b      	ldr	r3, [pc, #44]	; (21280 <nm_bsp_init+0x38>)
   21254:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   21256:	4b0b      	ldr	r3, [pc, #44]	; (21284 <nm_bsp_init+0x3c>)
   21258:	681b      	ldr	r3, [r3, #0]
   2125a:	2201      	movs	r2, #1
   2125c:	4013      	ands	r3, r2
   2125e:	d004      	beq.n	2126a <nm_bsp_init+0x22>
   21260:	4b08      	ldr	r3, [pc, #32]	; (21284 <nm_bsp_init+0x3c>)
   21262:	681b      	ldr	r3, [r3, #0]
   21264:	2202      	movs	r2, #2
   21266:	4013      	ands	r3, r2
   21268:	d101      	bne.n	2126e <nm_bsp_init+0x26>
	    delay_init();
   2126a:	4b07      	ldr	r3, [pc, #28]	; (21288 <nm_bsp_init+0x40>)
   2126c:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   2126e:	4b07      	ldr	r3, [pc, #28]	; (2128c <nm_bsp_init+0x44>)
   21270:	4798      	blx	r3

	return M2M_SUCCESS;
   21272:	2300      	movs	r3, #0
}
   21274:	0018      	movs	r0, r3
   21276:	46bd      	mov	sp, r7
   21278:	bd80      	pop	{r7, pc}
   2127a:	46c0      	nop			; (mov r8, r8)
   2127c:	200042a4 	.word	0x200042a4
   21280:	000211f1 	.word	0x000211f1
   21284:	e000e010 	.word	0xe000e010
   21288:	00021035 	.word	0x00021035
   2128c:	0002111d 	.word	0x0002111d

00021290 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   21290:	b580      	push	{r7, lr}
   21292:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   21294:	2100      	movs	r1, #0
   21296:	201c      	movs	r0, #28
   21298:	4b0b      	ldr	r3, [pc, #44]	; (212c8 <nm_bsp_reset+0x38>)
   2129a:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   2129c:	2100      	movs	r1, #0
   2129e:	201b      	movs	r0, #27
   212a0:	4b09      	ldr	r3, [pc, #36]	; (212c8 <nm_bsp_reset+0x38>)
   212a2:	4798      	blx	r3
	nm_bsp_sleep(1);
   212a4:	2001      	movs	r0, #1
   212a6:	4b09      	ldr	r3, [pc, #36]	; (212cc <nm_bsp_reset+0x3c>)
   212a8:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   212aa:	2101      	movs	r1, #1
   212ac:	201c      	movs	r0, #28
   212ae:	4b06      	ldr	r3, [pc, #24]	; (212c8 <nm_bsp_reset+0x38>)
   212b0:	4798      	blx	r3
	nm_bsp_sleep(10);
   212b2:	200a      	movs	r0, #10
   212b4:	4b05      	ldr	r3, [pc, #20]	; (212cc <nm_bsp_reset+0x3c>)
   212b6:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   212b8:	2101      	movs	r1, #1
   212ba:	201b      	movs	r0, #27
   212bc:	4b02      	ldr	r3, [pc, #8]	; (212c8 <nm_bsp_reset+0x38>)
   212be:	4798      	blx	r3
}
   212c0:	46c0      	nop			; (mov r8, r8)
   212c2:	46bd      	mov	sp, r7
   212c4:	bd80      	pop	{r7, pc}
   212c6:	46c0      	nop			; (mov r8, r8)
   212c8:	00021181 	.word	0x00021181
   212cc:	000212d1 	.word	0x000212d1

000212d0 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   212d0:	b580      	push	{r7, lr}
   212d2:	b082      	sub	sp, #8
   212d4:	af00      	add	r7, sp, #0
   212d6:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   212d8:	687b      	ldr	r3, [r7, #4]
   212da:	0018      	movs	r0, r3
   212dc:	4b02      	ldr	r3, [pc, #8]	; (212e8 <nm_bsp_sleep+0x18>)
   212de:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   212e0:	46c0      	nop			; (mov r8, r8)
   212e2:	46bd      	mov	sp, r7
   212e4:	b002      	add	sp, #8
   212e6:	bd80      	pop	{r7, pc}
   212e8:	0001d081 	.word	0x0001d081

000212ec <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   212ec:	b580      	push	{r7, lr}
   212ee:	b086      	sub	sp, #24
   212f0:	af00      	add	r7, sp, #0
   212f2:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   212f4:	4b15      	ldr	r3, [pc, #84]	; (2134c <nm_bsp_register_isr+0x60>)
   212f6:	687a      	ldr	r2, [r7, #4]
   212f8:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   212fa:	230c      	movs	r3, #12
   212fc:	18fb      	adds	r3, r7, r3
   212fe:	0018      	movs	r0, r3
   21300:	4b13      	ldr	r3, [pc, #76]	; (21350 <nm_bsp_register_isr+0x64>)
   21302:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   21304:	230c      	movs	r3, #12
   21306:	18fb      	adds	r3, r7, r3
   21308:	2229      	movs	r2, #41	; 0x29
   2130a:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   2130c:	230c      	movs	r3, #12
   2130e:	18fb      	adds	r3, r7, r3
   21310:	2200      	movs	r2, #0
   21312:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   21314:	230c      	movs	r3, #12
   21316:	18fb      	adds	r3, r7, r3
   21318:	2201      	movs	r2, #1
   2131a:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   2131c:	230c      	movs	r3, #12
   2131e:	18fb      	adds	r3, r7, r3
   21320:	2202      	movs	r2, #2
   21322:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   21324:	230c      	movs	r3, #12
   21326:	18fb      	adds	r3, r7, r3
   21328:	0019      	movs	r1, r3
   2132a:	2009      	movs	r0, #9
   2132c:	4b09      	ldr	r3, [pc, #36]	; (21354 <nm_bsp_register_isr+0x68>)
   2132e:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   21330:	4b09      	ldr	r3, [pc, #36]	; (21358 <nm_bsp_register_isr+0x6c>)
   21332:	2200      	movs	r2, #0
   21334:	2109      	movs	r1, #9
   21336:	0018      	movs	r0, r3
   21338:	4b08      	ldr	r3, [pc, #32]	; (2135c <nm_bsp_register_isr+0x70>)
   2133a:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   2133c:	2100      	movs	r1, #0
   2133e:	2009      	movs	r0, #9
   21340:	4b07      	ldr	r3, [pc, #28]	; (21360 <nm_bsp_register_isr+0x74>)
   21342:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   21344:	46c0      	nop			; (mov r8, r8)
   21346:	46bd      	mov	sp, r7
   21348:	b006      	add	sp, #24
   2134a:	bd80      	pop	{r7, pc}
   2134c:	200042a4 	.word	0x200042a4
   21350:	00027825 	.word	0x00027825
   21354:	00027859 	.word	0x00027859
   21358:	000211d5 	.word	0x000211d5
   2135c:	00027425 	.word	0x00027425
   21360:	00027489 	.word	0x00027489

00021364 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   21364:	b580      	push	{r7, lr}
   21366:	b082      	sub	sp, #8
   21368:	af00      	add	r7, sp, #0
   2136a:	0002      	movs	r2, r0
   2136c:	1dfb      	adds	r3, r7, #7
   2136e:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   21370:	1dfb      	adds	r3, r7, #7
   21372:	781b      	ldrb	r3, [r3, #0]
   21374:	2b00      	cmp	r3, #0
   21376:	d004      	beq.n	21382 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   21378:	2100      	movs	r1, #0
   2137a:	2009      	movs	r0, #9
   2137c:	4b05      	ldr	r3, [pc, #20]	; (21394 <nm_bsp_interrupt_ctrl+0x30>)
   2137e:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   21380:	e003      	b.n	2138a <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   21382:	2100      	movs	r1, #0
   21384:	2009      	movs	r0, #9
   21386:	4b04      	ldr	r3, [pc, #16]	; (21398 <nm_bsp_interrupt_ctrl+0x34>)
   21388:	4798      	blx	r3
}
   2138a:	46c0      	nop			; (mov r8, r8)
   2138c:	46bd      	mov	sp, r7
   2138e:	b002      	add	sp, #8
   21390:	bd80      	pop	{r7, pc}
   21392:	46c0      	nop			; (mov r8, r8)
   21394:	00027489 	.word	0x00027489
   21398:	000274d1 	.word	0x000274d1

0002139c <system_pinmux_get_group_from_gpio_pin>:
{
   2139c:	b580      	push	{r7, lr}
   2139e:	b084      	sub	sp, #16
   213a0:	af00      	add	r7, sp, #0
   213a2:	0002      	movs	r2, r0
   213a4:	1dfb      	adds	r3, r7, #7
   213a6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   213a8:	230f      	movs	r3, #15
   213aa:	18fb      	adds	r3, r7, r3
   213ac:	1dfa      	adds	r2, r7, #7
   213ae:	7812      	ldrb	r2, [r2, #0]
   213b0:	09d2      	lsrs	r2, r2, #7
   213b2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   213b4:	230e      	movs	r3, #14
   213b6:	18fb      	adds	r3, r7, r3
   213b8:	1dfa      	adds	r2, r7, #7
   213ba:	7812      	ldrb	r2, [r2, #0]
   213bc:	0952      	lsrs	r2, r2, #5
   213be:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   213c0:	4b0d      	ldr	r3, [pc, #52]	; (213f8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   213c2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   213c4:	230f      	movs	r3, #15
   213c6:	18fb      	adds	r3, r7, r3
   213c8:	781b      	ldrb	r3, [r3, #0]
   213ca:	2b00      	cmp	r3, #0
   213cc:	d10f      	bne.n	213ee <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   213ce:	230f      	movs	r3, #15
   213d0:	18fb      	adds	r3, r7, r3
   213d2:	781b      	ldrb	r3, [r3, #0]
   213d4:	009b      	lsls	r3, r3, #2
   213d6:	2210      	movs	r2, #16
   213d8:	4694      	mov	ip, r2
   213da:	44bc      	add	ip, r7
   213dc:	4463      	add	r3, ip
   213de:	3b08      	subs	r3, #8
   213e0:	681a      	ldr	r2, [r3, #0]
   213e2:	230e      	movs	r3, #14
   213e4:	18fb      	adds	r3, r7, r3
   213e6:	781b      	ldrb	r3, [r3, #0]
   213e8:	01db      	lsls	r3, r3, #7
   213ea:	18d3      	adds	r3, r2, r3
   213ec:	e000      	b.n	213f0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   213ee:	2300      	movs	r3, #0
}
   213f0:	0018      	movs	r0, r3
   213f2:	46bd      	mov	sp, r7
   213f4:	b004      	add	sp, #16
   213f6:	bd80      	pop	{r7, pc}
   213f8:	41004400 	.word	0x41004400

000213fc <system_interrupt_enable>:
{
   213fc:	b580      	push	{r7, lr}
   213fe:	b082      	sub	sp, #8
   21400:	af00      	add	r7, sp, #0
   21402:	0002      	movs	r2, r0
   21404:	1dfb      	adds	r3, r7, #7
   21406:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   21408:	4b06      	ldr	r3, [pc, #24]	; (21424 <system_interrupt_enable+0x28>)
   2140a:	1dfa      	adds	r2, r7, #7
   2140c:	7812      	ldrb	r2, [r2, #0]
   2140e:	0011      	movs	r1, r2
   21410:	221f      	movs	r2, #31
   21412:	400a      	ands	r2, r1
   21414:	2101      	movs	r1, #1
   21416:	4091      	lsls	r1, r2
   21418:	000a      	movs	r2, r1
   2141a:	601a      	str	r2, [r3, #0]
}
   2141c:	46c0      	nop			; (mov r8, r8)
   2141e:	46bd      	mov	sp, r7
   21420:	b002      	add	sp, #8
   21422:	bd80      	pop	{r7, pc}
   21424:	e000e100 	.word	0xe000e100

00021428 <system_interrupt_disable>:
{
   21428:	b580      	push	{r7, lr}
   2142a:	b082      	sub	sp, #8
   2142c:	af00      	add	r7, sp, #0
   2142e:	0002      	movs	r2, r0
   21430:	1dfb      	adds	r3, r7, #7
   21432:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   21434:	4a07      	ldr	r2, [pc, #28]	; (21454 <system_interrupt_disable+0x2c>)
   21436:	1dfb      	adds	r3, r7, #7
   21438:	781b      	ldrb	r3, [r3, #0]
   2143a:	0019      	movs	r1, r3
   2143c:	231f      	movs	r3, #31
   2143e:	400b      	ands	r3, r1
   21440:	2101      	movs	r1, #1
   21442:	4099      	lsls	r1, r3
   21444:	000b      	movs	r3, r1
   21446:	0019      	movs	r1, r3
   21448:	2380      	movs	r3, #128	; 0x80
   2144a:	50d1      	str	r1, [r2, r3]
}
   2144c:	46c0      	nop			; (mov r8, r8)
   2144e:	46bd      	mov	sp, r7
   21450:	b002      	add	sp, #8
   21452:	bd80      	pop	{r7, pc}
   21454:	e000e100 	.word	0xe000e100

00021458 <port_get_group_from_gpio_pin>:
{
   21458:	b580      	push	{r7, lr}
   2145a:	b082      	sub	sp, #8
   2145c:	af00      	add	r7, sp, #0
   2145e:	0002      	movs	r2, r0
   21460:	1dfb      	adds	r3, r7, #7
   21462:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   21464:	1dfb      	adds	r3, r7, #7
   21466:	781b      	ldrb	r3, [r3, #0]
   21468:	0018      	movs	r0, r3
   2146a:	4b03      	ldr	r3, [pc, #12]	; (21478 <port_get_group_from_gpio_pin+0x20>)
   2146c:	4798      	blx	r3
   2146e:	0003      	movs	r3, r0
}
   21470:	0018      	movs	r0, r3
   21472:	46bd      	mov	sp, r7
   21474:	b002      	add	sp, #8
   21476:	bd80      	pop	{r7, pc}
   21478:	0002139d 	.word	0x0002139d

0002147c <port_get_config_defaults>:
{
   2147c:	b580      	push	{r7, lr}
   2147e:	b082      	sub	sp, #8
   21480:	af00      	add	r7, sp, #0
   21482:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   21484:	687b      	ldr	r3, [r7, #4]
   21486:	2200      	movs	r2, #0
   21488:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   2148a:	687b      	ldr	r3, [r7, #4]
   2148c:	2201      	movs	r2, #1
   2148e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   21490:	687b      	ldr	r3, [r7, #4]
   21492:	2200      	movs	r2, #0
   21494:	709a      	strb	r2, [r3, #2]
}
   21496:	46c0      	nop			; (mov r8, r8)
   21498:	46bd      	mov	sp, r7
   2149a:	b002      	add	sp, #8
   2149c:	bd80      	pop	{r7, pc}
	...

000214a0 <port_pin_set_output_level>:
{
   214a0:	b580      	push	{r7, lr}
   214a2:	b084      	sub	sp, #16
   214a4:	af00      	add	r7, sp, #0
   214a6:	0002      	movs	r2, r0
   214a8:	1dfb      	adds	r3, r7, #7
   214aa:	701a      	strb	r2, [r3, #0]
   214ac:	1dbb      	adds	r3, r7, #6
   214ae:	1c0a      	adds	r2, r1, #0
   214b0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   214b2:	1dfb      	adds	r3, r7, #7
   214b4:	781b      	ldrb	r3, [r3, #0]
   214b6:	0018      	movs	r0, r3
   214b8:	4b0d      	ldr	r3, [pc, #52]	; (214f0 <port_pin_set_output_level+0x50>)
   214ba:	4798      	blx	r3
   214bc:	0003      	movs	r3, r0
   214be:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   214c0:	1dfb      	adds	r3, r7, #7
   214c2:	781b      	ldrb	r3, [r3, #0]
   214c4:	221f      	movs	r2, #31
   214c6:	4013      	ands	r3, r2
   214c8:	2201      	movs	r2, #1
   214ca:	409a      	lsls	r2, r3
   214cc:	0013      	movs	r3, r2
   214ce:	60bb      	str	r3, [r7, #8]
	if (level) {
   214d0:	1dbb      	adds	r3, r7, #6
   214d2:	781b      	ldrb	r3, [r3, #0]
   214d4:	2b00      	cmp	r3, #0
   214d6:	d003      	beq.n	214e0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   214d8:	68fb      	ldr	r3, [r7, #12]
   214da:	68ba      	ldr	r2, [r7, #8]
   214dc:	619a      	str	r2, [r3, #24]
}
   214de:	e002      	b.n	214e6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   214e0:	68fb      	ldr	r3, [r7, #12]
   214e2:	68ba      	ldr	r2, [r7, #8]
   214e4:	615a      	str	r2, [r3, #20]
}
   214e6:	46c0      	nop			; (mov r8, r8)
   214e8:	46bd      	mov	sp, r7
   214ea:	b004      	add	sp, #16
   214ec:	bd80      	pop	{r7, pc}
   214ee:	46c0      	nop			; (mov r8, r8)
   214f0:	00021459 	.word	0x00021459

000214f4 <spi_is_syncing>:
{
   214f4:	b580      	push	{r7, lr}
   214f6:	b084      	sub	sp, #16
   214f8:	af00      	add	r7, sp, #0
   214fa:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   214fc:	687b      	ldr	r3, [r7, #4]
   214fe:	681b      	ldr	r3, [r3, #0]
   21500:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   21502:	68fb      	ldr	r3, [r7, #12]
   21504:	69db      	ldr	r3, [r3, #28]
   21506:	1e5a      	subs	r2, r3, #1
   21508:	4193      	sbcs	r3, r2
   2150a:	b2db      	uxtb	r3, r3
}
   2150c:	0018      	movs	r0, r3
   2150e:	46bd      	mov	sp, r7
   21510:	b004      	add	sp, #16
   21512:	bd80      	pop	{r7, pc}

00021514 <spi_get_config_defaults>:
{
   21514:	b580      	push	{r7, lr}
   21516:	b082      	sub	sp, #8
   21518:	af00      	add	r7, sp, #0
   2151a:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   2151c:	687b      	ldr	r3, [r7, #4]
   2151e:	2201      	movs	r2, #1
   21520:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   21522:	687b      	ldr	r3, [r7, #4]
   21524:	2200      	movs	r2, #0
   21526:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   21528:	687b      	ldr	r3, [r7, #4]
   2152a:	2200      	movs	r2, #0
   2152c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   2152e:	687b      	ldr	r3, [r7, #4]
   21530:	22c0      	movs	r2, #192	; 0xc0
   21532:	0392      	lsls	r2, r2, #14
   21534:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   21536:	687b      	ldr	r3, [r7, #4]
   21538:	2200      	movs	r2, #0
   2153a:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   2153c:	687b      	ldr	r3, [r7, #4]
   2153e:	2200      	movs	r2, #0
   21540:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   21542:	687b      	ldr	r3, [r7, #4]
   21544:	2201      	movs	r2, #1
   21546:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   21548:	687b      	ldr	r3, [r7, #4]
   2154a:	2201      	movs	r2, #1
   2154c:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   2154e:	687b      	ldr	r3, [r7, #4]
   21550:	2200      	movs	r2, #0
   21552:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   21554:	687b      	ldr	r3, [r7, #4]
   21556:	2224      	movs	r2, #36	; 0x24
   21558:	2100      	movs	r1, #0
   2155a:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   2155c:	687b      	ldr	r3, [r7, #4]
   2155e:	3318      	adds	r3, #24
   21560:	220c      	movs	r2, #12
   21562:	2100      	movs	r1, #0
   21564:	0018      	movs	r0, r3
   21566:	4b0a      	ldr	r3, [pc, #40]	; (21590 <spi_get_config_defaults+0x7c>)
   21568:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   2156a:	687b      	ldr	r3, [r7, #4]
   2156c:	4a09      	ldr	r2, [pc, #36]	; (21594 <spi_get_config_defaults+0x80>)
   2156e:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   21570:	687b      	ldr	r3, [r7, #4]
   21572:	2200      	movs	r2, #0
   21574:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   21576:	687b      	ldr	r3, [r7, #4]
   21578:	2200      	movs	r2, #0
   2157a:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   2157c:	687b      	ldr	r3, [r7, #4]
   2157e:	2200      	movs	r2, #0
   21580:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   21582:	687b      	ldr	r3, [r7, #4]
   21584:	2200      	movs	r2, #0
   21586:	635a      	str	r2, [r3, #52]	; 0x34
};
   21588:	46c0      	nop			; (mov r8, r8)
   2158a:	46bd      	mov	sp, r7
   2158c:	b002      	add	sp, #8
   2158e:	bd80      	pop	{r7, pc}
   21590:	0003643f 	.word	0x0003643f
   21594:	000186a0 	.word	0x000186a0

00021598 <spi_slave_inst_get_config_defaults>:
{
   21598:	b580      	push	{r7, lr}
   2159a:	b082      	sub	sp, #8
   2159c:	af00      	add	r7, sp, #0
   2159e:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   215a0:	687b      	ldr	r3, [r7, #4]
   215a2:	220a      	movs	r2, #10
   215a4:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   215a6:	687b      	ldr	r3, [r7, #4]
   215a8:	2200      	movs	r2, #0
   215aa:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   215ac:	687b      	ldr	r3, [r7, #4]
   215ae:	2200      	movs	r2, #0
   215b0:	709a      	strb	r2, [r3, #2]
}
   215b2:	46c0      	nop			; (mov r8, r8)
   215b4:	46bd      	mov	sp, r7
   215b6:	b002      	add	sp, #8
   215b8:	bd80      	pop	{r7, pc}
	...

000215bc <spi_attach_slave>:
{
   215bc:	b580      	push	{r7, lr}
   215be:	b084      	sub	sp, #16
   215c0:	af00      	add	r7, sp, #0
   215c2:	6078      	str	r0, [r7, #4]
   215c4:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   215c6:	683b      	ldr	r3, [r7, #0]
   215c8:	781a      	ldrb	r2, [r3, #0]
   215ca:	687b      	ldr	r3, [r7, #4]
   215cc:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   215ce:	683b      	ldr	r3, [r7, #0]
   215d0:	785a      	ldrb	r2, [r3, #1]
   215d2:	687b      	ldr	r3, [r7, #4]
   215d4:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   215d6:	683b      	ldr	r3, [r7, #0]
   215d8:	789a      	ldrb	r2, [r3, #2]
   215da:	687b      	ldr	r3, [r7, #4]
   215dc:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   215de:	230c      	movs	r3, #12
   215e0:	18fb      	adds	r3, r7, r3
   215e2:	0018      	movs	r0, r3
   215e4:	4b0b      	ldr	r3, [pc, #44]	; (21614 <spi_attach_slave+0x58>)
   215e6:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   215e8:	230c      	movs	r3, #12
   215ea:	18fb      	adds	r3, r7, r3
   215ec:	2201      	movs	r2, #1
   215ee:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   215f0:	687b      	ldr	r3, [r7, #4]
   215f2:	781b      	ldrb	r3, [r3, #0]
   215f4:	220c      	movs	r2, #12
   215f6:	18ba      	adds	r2, r7, r2
   215f8:	0011      	movs	r1, r2
   215fa:	0018      	movs	r0, r3
   215fc:	4b06      	ldr	r3, [pc, #24]	; (21618 <spi_attach_slave+0x5c>)
   215fe:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   21600:	687b      	ldr	r3, [r7, #4]
   21602:	781b      	ldrb	r3, [r3, #0]
   21604:	2101      	movs	r1, #1
   21606:	0018      	movs	r0, r3
   21608:	4b04      	ldr	r3, [pc, #16]	; (2161c <spi_attach_slave+0x60>)
   2160a:	4798      	blx	r3
}
   2160c:	46c0      	nop			; (mov r8, r8)
   2160e:	46bd      	mov	sp, r7
   21610:	b004      	add	sp, #16
   21612:	bd80      	pop	{r7, pc}
   21614:	0002147d 	.word	0x0002147d
   21618:	0002797d 	.word	0x0002797d
   2161c:	000214a1 	.word	0x000214a1

00021620 <spi_enable>:
{
   21620:	b580      	push	{r7, lr}
   21622:	b084      	sub	sp, #16
   21624:	af00      	add	r7, sp, #0
   21626:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   21628:	687b      	ldr	r3, [r7, #4]
   2162a:	681b      	ldr	r3, [r3, #0]
   2162c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   2162e:	687b      	ldr	r3, [r7, #4]
   21630:	681b      	ldr	r3, [r3, #0]
   21632:	0018      	movs	r0, r3
   21634:	4b0b      	ldr	r3, [pc, #44]	; (21664 <spi_enable+0x44>)
   21636:	4798      	blx	r3
   21638:	0003      	movs	r3, r0
   2163a:	0018      	movs	r0, r3
   2163c:	4b0a      	ldr	r3, [pc, #40]	; (21668 <spi_enable+0x48>)
   2163e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   21640:	46c0      	nop			; (mov r8, r8)
   21642:	687b      	ldr	r3, [r7, #4]
   21644:	0018      	movs	r0, r3
   21646:	4b09      	ldr	r3, [pc, #36]	; (2166c <spi_enable+0x4c>)
   21648:	4798      	blx	r3
   2164a:	1e03      	subs	r3, r0, #0
   2164c:	d1f9      	bne.n	21642 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   2164e:	68fb      	ldr	r3, [r7, #12]
   21650:	681b      	ldr	r3, [r3, #0]
   21652:	2202      	movs	r2, #2
   21654:	431a      	orrs	r2, r3
   21656:	68fb      	ldr	r3, [r7, #12]
   21658:	601a      	str	r2, [r3, #0]
}
   2165a:	46c0      	nop			; (mov r8, r8)
   2165c:	46bd      	mov	sp, r7
   2165e:	b004      	add	sp, #16
   21660:	bd80      	pop	{r7, pc}
   21662:	46c0      	nop			; (mov r8, r8)
   21664:	0002864d 	.word	0x0002864d
   21668:	000213fd 	.word	0x000213fd
   2166c:	000214f5 	.word	0x000214f5

00021670 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   21670:	b580      	push	{r7, lr}
   21672:	b084      	sub	sp, #16
   21674:	af00      	add	r7, sp, #0
   21676:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21678:	687b      	ldr	r3, [r7, #4]
   2167a:	681b      	ldr	r3, [r3, #0]
   2167c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   2167e:	687b      	ldr	r3, [r7, #4]
   21680:	681b      	ldr	r3, [r3, #0]
   21682:	0018      	movs	r0, r3
   21684:	4b0e      	ldr	r3, [pc, #56]	; (216c0 <spi_disable+0x50>)
   21686:	4798      	blx	r3
   21688:	0003      	movs	r3, r0
   2168a:	0018      	movs	r0, r3
   2168c:	4b0d      	ldr	r3, [pc, #52]	; (216c4 <spi_disable+0x54>)
   2168e:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   21690:	46c0      	nop			; (mov r8, r8)
   21692:	687b      	ldr	r3, [r7, #4]
   21694:	0018      	movs	r0, r3
   21696:	4b0c      	ldr	r3, [pc, #48]	; (216c8 <spi_disable+0x58>)
   21698:	4798      	blx	r3
   2169a:	1e03      	subs	r3, r0, #0
   2169c:	d1f9      	bne.n	21692 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   2169e:	68fb      	ldr	r3, [r7, #12]
   216a0:	228f      	movs	r2, #143	; 0x8f
   216a2:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   216a4:	68fb      	ldr	r3, [r7, #12]
   216a6:	228f      	movs	r2, #143	; 0x8f
   216a8:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   216aa:	68fb      	ldr	r3, [r7, #12]
   216ac:	681b      	ldr	r3, [r3, #0]
   216ae:	2202      	movs	r2, #2
   216b0:	4393      	bics	r3, r2
   216b2:	001a      	movs	r2, r3
   216b4:	68fb      	ldr	r3, [r7, #12]
   216b6:	601a      	str	r2, [r3, #0]
}
   216b8:	46c0      	nop			; (mov r8, r8)
   216ba:	46bd      	mov	sp, r7
   216bc:	b004      	add	sp, #16
   216be:	bd80      	pop	{r7, pc}
   216c0:	0002864d 	.word	0x0002864d
   216c4:	00021429 	.word	0x00021429
   216c8:	000214f5 	.word	0x000214f5

000216cc <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   216cc:	b580      	push	{r7, lr}
   216ce:	b084      	sub	sp, #16
   216d0:	af00      	add	r7, sp, #0
   216d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   216d4:	687b      	ldr	r3, [r7, #4]
   216d6:	681b      	ldr	r3, [r3, #0]
   216d8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   216da:	68fb      	ldr	r3, [r7, #12]
   216dc:	7e1b      	ldrb	r3, [r3, #24]
   216de:	b2db      	uxtb	r3, r3
   216e0:	001a      	movs	r2, r3
   216e2:	2302      	movs	r3, #2
   216e4:	4013      	ands	r3, r2
   216e6:	1e5a      	subs	r2, r3, #1
   216e8:	4193      	sbcs	r3, r2
   216ea:	b2db      	uxtb	r3, r3
}
   216ec:	0018      	movs	r0, r3
   216ee:	46bd      	mov	sp, r7
   216f0:	b004      	add	sp, #16
   216f2:	bd80      	pop	{r7, pc}

000216f4 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   216f4:	b580      	push	{r7, lr}
   216f6:	b084      	sub	sp, #16
   216f8:	af00      	add	r7, sp, #0
   216fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   216fc:	687b      	ldr	r3, [r7, #4]
   216fe:	681b      	ldr	r3, [r3, #0]
   21700:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   21702:	68fb      	ldr	r3, [r7, #12]
   21704:	7e1b      	ldrb	r3, [r3, #24]
   21706:	b2db      	uxtb	r3, r3
   21708:	001a      	movs	r2, r3
   2170a:	2301      	movs	r3, #1
   2170c:	4013      	ands	r3, r2
   2170e:	1e5a      	subs	r2, r3, #1
   21710:	4193      	sbcs	r3, r2
   21712:	b2db      	uxtb	r3, r3
}
   21714:	0018      	movs	r0, r3
   21716:	46bd      	mov	sp, r7
   21718:	b004      	add	sp, #16
   2171a:	bd80      	pop	{r7, pc}

0002171c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   2171c:	b580      	push	{r7, lr}
   2171e:	b084      	sub	sp, #16
   21720:	af00      	add	r7, sp, #0
   21722:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21724:	687b      	ldr	r3, [r7, #4]
   21726:	681b      	ldr	r3, [r3, #0]
   21728:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   2172a:	68fb      	ldr	r3, [r7, #12]
   2172c:	7e1b      	ldrb	r3, [r3, #24]
   2172e:	b2db      	uxtb	r3, r3
   21730:	001a      	movs	r2, r3
   21732:	2304      	movs	r3, #4
   21734:	4013      	ands	r3, r2
   21736:	1e5a      	subs	r2, r3, #1
   21738:	4193      	sbcs	r3, r2
   2173a:	b2db      	uxtb	r3, r3
}
   2173c:	0018      	movs	r0, r3
   2173e:	46bd      	mov	sp, r7
   21740:	b004      	add	sp, #16
   21742:	bd80      	pop	{r7, pc}

00021744 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   21744:	b580      	push	{r7, lr}
   21746:	b084      	sub	sp, #16
   21748:	af00      	add	r7, sp, #0
   2174a:	6078      	str	r0, [r7, #4]
   2174c:	000a      	movs	r2, r1
   2174e:	1cbb      	adds	r3, r7, #2
   21750:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21752:	687b      	ldr	r3, [r7, #4]
   21754:	681b      	ldr	r3, [r3, #0]
   21756:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   21758:	687b      	ldr	r3, [r7, #4]
   2175a:	0018      	movs	r0, r3
   2175c:	4b0a      	ldr	r3, [pc, #40]	; (21788 <spi_write+0x44>)
   2175e:	4798      	blx	r3
   21760:	0003      	movs	r3, r0
   21762:	001a      	movs	r2, r3
   21764:	2301      	movs	r3, #1
   21766:	4053      	eors	r3, r2
   21768:	b2db      	uxtb	r3, r3
   2176a:	2b00      	cmp	r3, #0
   2176c:	d001      	beq.n	21772 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   2176e:	2305      	movs	r3, #5
   21770:	e006      	b.n	21780 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   21772:	1cbb      	adds	r3, r7, #2
   21774:	881b      	ldrh	r3, [r3, #0]
   21776:	05db      	lsls	r3, r3, #23
   21778:	0dda      	lsrs	r2, r3, #23
   2177a:	68fb      	ldr	r3, [r7, #12]
   2177c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   2177e:	2300      	movs	r3, #0
}
   21780:	0018      	movs	r0, r3
   21782:	46bd      	mov	sp, r7
   21784:	b004      	add	sp, #16
   21786:	bd80      	pop	{r7, pc}
   21788:	000216f5 	.word	0x000216f5

0002178c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   2178c:	b580      	push	{r7, lr}
   2178e:	b084      	sub	sp, #16
   21790:	af00      	add	r7, sp, #0
   21792:	6078      	str	r0, [r7, #4]
   21794:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21796:	687b      	ldr	r3, [r7, #4]
   21798:	681b      	ldr	r3, [r3, #0]
   2179a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   2179c:	687b      	ldr	r3, [r7, #4]
   2179e:	0018      	movs	r0, r3
   217a0:	4b1b      	ldr	r3, [pc, #108]	; (21810 <spi_read+0x84>)
   217a2:	4798      	blx	r3
   217a4:	0003      	movs	r3, r0
   217a6:	001a      	movs	r2, r3
   217a8:	2301      	movs	r3, #1
   217aa:	4053      	eors	r3, r2
   217ac:	b2db      	uxtb	r3, r3
   217ae:	2b00      	cmp	r3, #0
   217b0:	d001      	beq.n	217b6 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   217b2:	2310      	movs	r3, #16
   217b4:	e027      	b.n	21806 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   217b6:	230f      	movs	r3, #15
   217b8:	18fb      	adds	r3, r7, r3
   217ba:	2200      	movs	r2, #0
   217bc:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   217be:	68bb      	ldr	r3, [r7, #8]
   217c0:	8b5b      	ldrh	r3, [r3, #26]
   217c2:	b29b      	uxth	r3, r3
   217c4:	001a      	movs	r2, r3
   217c6:	2304      	movs	r3, #4
   217c8:	4013      	ands	r3, r2
   217ca:	d006      	beq.n	217da <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   217cc:	230f      	movs	r3, #15
   217ce:	18fb      	adds	r3, r7, r3
   217d0:	221e      	movs	r2, #30
   217d2:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   217d4:	68bb      	ldr	r3, [r7, #8]
   217d6:	2204      	movs	r2, #4
   217d8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   217da:	687b      	ldr	r3, [r7, #4]
   217dc:	799b      	ldrb	r3, [r3, #6]
   217de:	2b01      	cmp	r3, #1
   217e0:	d108      	bne.n	217f4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   217e2:	68bb      	ldr	r3, [r7, #8]
   217e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   217e6:	b29b      	uxth	r3, r3
   217e8:	05db      	lsls	r3, r3, #23
   217ea:	0ddb      	lsrs	r3, r3, #23
   217ec:	b29a      	uxth	r2, r3
   217ee:	683b      	ldr	r3, [r7, #0]
   217f0:	801a      	strh	r2, [r3, #0]
   217f2:	e005      	b.n	21800 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   217f4:	68bb      	ldr	r3, [r7, #8]
   217f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   217f8:	b2db      	uxtb	r3, r3
   217fa:	b29a      	uxth	r2, r3
   217fc:	683b      	ldr	r3, [r7, #0]
   217fe:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   21800:	230f      	movs	r3, #15
   21802:	18fb      	adds	r3, r7, r3
   21804:	781b      	ldrb	r3, [r3, #0]
}
   21806:	0018      	movs	r0, r3
   21808:	46bd      	mov	sp, r7
   2180a:	b004      	add	sp, #16
   2180c:	bd80      	pop	{r7, pc}
   2180e:	46c0      	nop			; (mov r8, r8)
   21810:	0002171d 	.word	0x0002171d

00021814 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   21814:	b580      	push	{r7, lr}
   21816:	b086      	sub	sp, #24
   21818:	af00      	add	r7, sp, #0
   2181a:	60f8      	str	r0, [r7, #12]
   2181c:	60b9      	str	r1, [r7, #8]
   2181e:	1dbb      	adds	r3, r7, #6
   21820:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   21822:	2313      	movs	r3, #19
   21824:	18fb      	adds	r3, r7, r3
   21826:	22ff      	movs	r2, #255	; 0xff
   21828:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   2182a:	2317      	movs	r3, #23
   2182c:	18fb      	adds	r3, r7, r3
   2182e:	2200      	movs	r2, #0
   21830:	701a      	strb	r2, [r3, #0]
   21832:	2316      	movs	r3, #22
   21834:	18fb      	adds	r3, r7, r3
   21836:	2200      	movs	r2, #0
   21838:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   2183a:	2314      	movs	r3, #20
   2183c:	18fb      	adds	r3, r7, r3
   2183e:	2200      	movs	r2, #0
   21840:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   21842:	2310      	movs	r3, #16
   21844:	18fb      	adds	r3, r7, r3
   21846:	2200      	movs	r2, #0
   21848:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   2184a:	68bb      	ldr	r3, [r7, #8]
   2184c:	2b00      	cmp	r3, #0
   2184e:	d102      	bne.n	21856 <spi_rw+0x42>
   21850:	68fb      	ldr	r3, [r7, #12]
   21852:	2b00      	cmp	r3, #0
   21854:	d003      	beq.n	2185e <spi_rw+0x4a>
   21856:	1dbb      	adds	r3, r7, #6
   21858:	881b      	ldrh	r3, [r3, #0]
   2185a:	2b00      	cmp	r3, #0
   2185c:	d102      	bne.n	21864 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   2185e:	230f      	movs	r3, #15
   21860:	425b      	negs	r3, r3
   21862:	e07e      	b.n	21962 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   21864:	68fb      	ldr	r3, [r7, #12]
   21866:	2b00      	cmp	r3, #0
   21868:	d106      	bne.n	21878 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   2186a:	2313      	movs	r3, #19
   2186c:	18fb      	adds	r3, r7, r3
   2186e:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   21870:	2317      	movs	r3, #23
   21872:	18fb      	adds	r3, r7, r3
   21874:	2201      	movs	r2, #1
   21876:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   21878:	68bb      	ldr	r3, [r7, #8]
   2187a:	2b00      	cmp	r3, #0
   2187c:	d106      	bne.n	2188c <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   2187e:	2313      	movs	r3, #19
   21880:	18fb      	adds	r3, r7, r3
   21882:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   21884:	2316      	movs	r3, #22
   21886:	18fb      	adds	r3, r7, r3
   21888:	2201      	movs	r2, #1
   2188a:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   2188c:	4937      	ldr	r1, [pc, #220]	; (2196c <spi_rw+0x158>)
   2188e:	4b38      	ldr	r3, [pc, #224]	; (21970 <spi_rw+0x15c>)
   21890:	2201      	movs	r2, #1
   21892:	0018      	movs	r0, r3
   21894:	4b37      	ldr	r3, [pc, #220]	; (21974 <spi_rw+0x160>)
   21896:	4798      	blx	r3

	while (u16Sz) {
   21898:	e04c      	b.n	21934 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   2189a:	68fb      	ldr	r3, [r7, #12]
   2189c:	781a      	ldrb	r2, [r3, #0]
   2189e:	2314      	movs	r3, #20
   218a0:	18fb      	adds	r3, r7, r3
   218a2:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   218a4:	46c0      	nop			; (mov r8, r8)
   218a6:	4b32      	ldr	r3, [pc, #200]	; (21970 <spi_rw+0x15c>)
   218a8:	0018      	movs	r0, r3
   218aa:	4b33      	ldr	r3, [pc, #204]	; (21978 <spi_rw+0x164>)
   218ac:	4798      	blx	r3
   218ae:	0003      	movs	r3, r0
   218b0:	001a      	movs	r2, r3
   218b2:	2301      	movs	r3, #1
   218b4:	4053      	eors	r3, r2
   218b6:	b2db      	uxtb	r3, r3
   218b8:	2b00      	cmp	r3, #0
   218ba:	d1f4      	bne.n	218a6 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   218bc:	46c0      	nop			; (mov r8, r8)
   218be:	2314      	movs	r3, #20
   218c0:	18fb      	adds	r3, r7, r3
   218c2:	881a      	ldrh	r2, [r3, #0]
   218c4:	4b2a      	ldr	r3, [pc, #168]	; (21970 <spi_rw+0x15c>)
   218c6:	0011      	movs	r1, r2
   218c8:	0018      	movs	r0, r3
   218ca:	4b2c      	ldr	r3, [pc, #176]	; (2197c <spi_rw+0x168>)
   218cc:	4798      	blx	r3
   218ce:	1e03      	subs	r3, r0, #0
   218d0:	d1f5      	bne.n	218be <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   218d2:	46c0      	nop			; (mov r8, r8)
   218d4:	4b26      	ldr	r3, [pc, #152]	; (21970 <spi_rw+0x15c>)
   218d6:	0018      	movs	r0, r3
   218d8:	4b29      	ldr	r3, [pc, #164]	; (21980 <spi_rw+0x16c>)
   218da:	4798      	blx	r3
   218dc:	0003      	movs	r3, r0
   218de:	001a      	movs	r2, r3
   218e0:	2301      	movs	r3, #1
   218e2:	4053      	eors	r3, r2
   218e4:	b2db      	uxtb	r3, r3
   218e6:	2b00      	cmp	r3, #0
   218e8:	d1f4      	bne.n	218d4 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   218ea:	46c0      	nop			; (mov r8, r8)
   218ec:	2310      	movs	r3, #16
   218ee:	18fa      	adds	r2, r7, r3
   218f0:	4b1f      	ldr	r3, [pc, #124]	; (21970 <spi_rw+0x15c>)
   218f2:	0011      	movs	r1, r2
   218f4:	0018      	movs	r0, r3
   218f6:	4b23      	ldr	r3, [pc, #140]	; (21984 <spi_rw+0x170>)
   218f8:	4798      	blx	r3
   218fa:	1e03      	subs	r3, r0, #0
   218fc:	d1f6      	bne.n	218ec <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   218fe:	2310      	movs	r3, #16
   21900:	18fb      	adds	r3, r7, r3
   21902:	881b      	ldrh	r3, [r3, #0]
   21904:	b2da      	uxtb	r2, r3
   21906:	68bb      	ldr	r3, [r7, #8]
   21908:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   2190a:	1dbb      	adds	r3, r7, #6
   2190c:	881a      	ldrh	r2, [r3, #0]
   2190e:	1dbb      	adds	r3, r7, #6
   21910:	3a01      	subs	r2, #1
   21912:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   21914:	2316      	movs	r3, #22
   21916:	18fb      	adds	r3, r7, r3
   21918:	781b      	ldrb	r3, [r3, #0]
   2191a:	2b00      	cmp	r3, #0
   2191c:	d102      	bne.n	21924 <spi_rw+0x110>
			pu8Miso++;
   2191e:	68bb      	ldr	r3, [r7, #8]
   21920:	3301      	adds	r3, #1
   21922:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   21924:	2317      	movs	r3, #23
   21926:	18fb      	adds	r3, r7, r3
   21928:	781b      	ldrb	r3, [r3, #0]
   2192a:	2b00      	cmp	r3, #0
   2192c:	d102      	bne.n	21934 <spi_rw+0x120>
			pu8Mosi++;
   2192e:	68fb      	ldr	r3, [r7, #12]
   21930:	3301      	adds	r3, #1
   21932:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   21934:	1dbb      	adds	r3, r7, #6
   21936:	881b      	ldrh	r3, [r3, #0]
   21938:	2b00      	cmp	r3, #0
   2193a:	d1ae      	bne.n	2189a <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   2193c:	46c0      	nop			; (mov r8, r8)
   2193e:	4b0c      	ldr	r3, [pc, #48]	; (21970 <spi_rw+0x15c>)
   21940:	0018      	movs	r0, r3
   21942:	4b11      	ldr	r3, [pc, #68]	; (21988 <spi_rw+0x174>)
   21944:	4798      	blx	r3
   21946:	0003      	movs	r3, r0
   21948:	001a      	movs	r2, r3
   2194a:	2301      	movs	r3, #1
   2194c:	4053      	eors	r3, r2
   2194e:	b2db      	uxtb	r3, r3
   21950:	2b00      	cmp	r3, #0
   21952:	d1f4      	bne.n	2193e <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   21954:	4905      	ldr	r1, [pc, #20]	; (2196c <spi_rw+0x158>)
   21956:	4b06      	ldr	r3, [pc, #24]	; (21970 <spi_rw+0x15c>)
   21958:	2200      	movs	r2, #0
   2195a:	0018      	movs	r0, r3
   2195c:	4b05      	ldr	r3, [pc, #20]	; (21974 <spi_rw+0x160>)
   2195e:	4798      	blx	r3

	return M2M_SUCCESS;
   21960:	2300      	movs	r3, #0
}
   21962:	0018      	movs	r0, r3
   21964:	46bd      	mov	sp, r7
   21966:	b006      	add	sp, #24
   21968:	bd80      	pop	{r7, pc}
   2196a:	46c0      	nop			; (mov r8, r8)
   2196c:	20005b28 	.word	0x20005b28
   21970:	20005b2c 	.word	0x20005b2c
   21974:	000290c1 	.word	0x000290c1
   21978:	000216f5 	.word	0x000216f5
   2197c:	00021745 	.word	0x00021745
   21980:	0002171d 	.word	0x0002171d
   21984:	0002178d 	.word	0x0002178d
   21988:	000216cd 	.word	0x000216cd

0002198c <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   2198c:	b580      	push	{r7, lr}
   2198e:	b092      	sub	sp, #72	; 0x48
   21990:	af00      	add	r7, sp, #0
   21992:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   21994:	2347      	movs	r3, #71	; 0x47
   21996:	18fb      	adds	r3, r7, r3
   21998:	2200      	movs	r2, #0
   2199a:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   2199c:	2308      	movs	r3, #8
   2199e:	18fb      	adds	r3, r7, r3
   219a0:	0018      	movs	r0, r3
   219a2:	4b26      	ldr	r3, [pc, #152]	; (21a3c <nm_bus_init+0xb0>)
   219a4:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   219a6:	2308      	movs	r3, #8
   219a8:	18fb      	adds	r3, r7, r3
   219aa:	220e      	movs	r2, #14
   219ac:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   219ae:	2308      	movs	r3, #8
   219b0:	18fa      	adds	r2, r7, r3
   219b2:	4b23      	ldr	r3, [pc, #140]	; (21a40 <nm_bus_init+0xb4>)
   219b4:	0011      	movs	r1, r2
   219b6:	0018      	movs	r0, r3
   219b8:	4b22      	ldr	r3, [pc, #136]	; (21a44 <nm_bus_init+0xb8>)
   219ba:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   219bc:	230c      	movs	r3, #12
   219be:	18fb      	adds	r3, r7, r3
   219c0:	0018      	movs	r0, r3
   219c2:	4b21      	ldr	r3, [pc, #132]	; (21a48 <nm_bus_init+0xbc>)
   219c4:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   219c6:	230c      	movs	r3, #12
   219c8:	18fb      	adds	r3, r7, r3
   219ca:	22c0      	movs	r2, #192	; 0xc0
   219cc:	0392      	lsls	r2, r2, #14
   219ce:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   219d0:	230c      	movs	r3, #12
   219d2:	18fb      	adds	r3, r7, r3
   219d4:	4a1d      	ldr	r2, [pc, #116]	; (21a4c <nm_bus_init+0xc0>)
   219d6:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   219d8:	230c      	movs	r3, #12
   219da:	18fb      	adds	r3, r7, r3
   219dc:	4a1c      	ldr	r2, [pc, #112]	; (21a50 <nm_bus_init+0xc4>)
   219de:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   219e0:	230c      	movs	r3, #12
   219e2:	18fb      	adds	r3, r7, r3
   219e4:	2201      	movs	r2, #1
   219e6:	4252      	negs	r2, r2
   219e8:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   219ea:	230c      	movs	r3, #12
   219ec:	18fb      	adds	r3, r7, r3
   219ee:	4a19      	ldr	r2, [pc, #100]	; (21a54 <nm_bus_init+0xc8>)
   219f0:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   219f2:	230c      	movs	r3, #12
   219f4:	18fb      	adds	r3, r7, r3
   219f6:	2200      	movs	r2, #0
   219f8:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   219fa:	230c      	movs	r3, #12
   219fc:	18fb      	adds	r3, r7, r3
   219fe:	4a16      	ldr	r2, [pc, #88]	; (21a58 <nm_bus_init+0xcc>)
   21a00:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   21a02:	230c      	movs	r3, #12
   21a04:	18fa      	adds	r2, r7, r3
   21a06:	4915      	ldr	r1, [pc, #84]	; (21a5c <nm_bus_init+0xd0>)
   21a08:	4b15      	ldr	r3, [pc, #84]	; (21a60 <nm_bus_init+0xd4>)
   21a0a:	0018      	movs	r0, r3
   21a0c:	4b15      	ldr	r3, [pc, #84]	; (21a64 <nm_bus_init+0xd8>)
   21a0e:	4798      	blx	r3
   21a10:	1e03      	subs	r3, r0, #0
   21a12:	d002      	beq.n	21a1a <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   21a14:	2306      	movs	r3, #6
   21a16:	425b      	negs	r3, r3
   21a18:	e00c      	b.n	21a34 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   21a1a:	4b11      	ldr	r3, [pc, #68]	; (21a60 <nm_bus_init+0xd4>)
   21a1c:	0018      	movs	r0, r3
   21a1e:	4b12      	ldr	r3, [pc, #72]	; (21a68 <nm_bus_init+0xdc>)
   21a20:	4798      	blx	r3

	nm_bsp_reset();
   21a22:	4b12      	ldr	r3, [pc, #72]	; (21a6c <nm_bus_init+0xe0>)
   21a24:	4798      	blx	r3
	nm_bsp_sleep(1);
   21a26:	2001      	movs	r0, #1
   21a28:	4b11      	ldr	r3, [pc, #68]	; (21a70 <nm_bus_init+0xe4>)
   21a2a:	4798      	blx	r3
#endif
	return result;
   21a2c:	2347      	movs	r3, #71	; 0x47
   21a2e:	18fb      	adds	r3, r7, r3
   21a30:	781b      	ldrb	r3, [r3, #0]
   21a32:	b25b      	sxtb	r3, r3
}
   21a34:	0018      	movs	r0, r3
   21a36:	46bd      	mov	sp, r7
   21a38:	b012      	add	sp, #72	; 0x48
   21a3a:	bd80      	pop	{r7, pc}
   21a3c:	00021599 	.word	0x00021599
   21a40:	20005b28 	.word	0x20005b28
   21a44:	000215bd 	.word	0x000215bd
   21a48:	00021515 	.word	0x00021515
   21a4c:	000c0002 	.word	0x000c0002
   21a50:	000d0002 	.word	0x000d0002
   21a54:	000f0002 	.word	0x000f0002
   21a58:	00124f80 	.word	0x00124f80
   21a5c:	42001000 	.word	0x42001000
   21a60:	20005b2c 	.word	0x20005b2c
   21a64:	00028dfd 	.word	0x00028dfd
   21a68:	00021621 	.word	0x00021621
   21a6c:	00021291 	.word	0x00021291
   21a70:	000212d1 	.word	0x000212d1

00021a74 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   21a74:	b590      	push	{r4, r7, lr}
   21a76:	b085      	sub	sp, #20
   21a78:	af00      	add	r7, sp, #0
   21a7a:	0002      	movs	r2, r0
   21a7c:	6039      	str	r1, [r7, #0]
   21a7e:	1dfb      	adds	r3, r7, #7
   21a80:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   21a82:	230f      	movs	r3, #15
   21a84:	18fb      	adds	r3, r7, r3
   21a86:	2200      	movs	r2, #0
   21a88:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   21a8a:	1dfb      	adds	r3, r7, #7
   21a8c:	781b      	ldrb	r3, [r3, #0]
   21a8e:	2b03      	cmp	r3, #3
   21a90:	d10f      	bne.n	21ab2 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   21a92:	683b      	ldr	r3, [r7, #0]
   21a94:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   21a96:	68bb      	ldr	r3, [r7, #8]
   21a98:	6818      	ldr	r0, [r3, #0]
   21a9a:	68bb      	ldr	r3, [r7, #8]
   21a9c:	6859      	ldr	r1, [r3, #4]
   21a9e:	68bb      	ldr	r3, [r7, #8]
   21aa0:	891b      	ldrh	r3, [r3, #8]
   21aa2:	220f      	movs	r2, #15
   21aa4:	18bc      	adds	r4, r7, r2
   21aa6:	001a      	movs	r2, r3
   21aa8:	4b10      	ldr	r3, [pc, #64]	; (21aec <nm_bus_ioctl+0x78>)
   21aaa:	4798      	blx	r3
   21aac:	0003      	movs	r3, r0
   21aae:	7023      	strb	r3, [r4, #0]
		}
		break;
   21ab0:	e013      	b.n	21ada <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   21ab2:	230f      	movs	r3, #15
   21ab4:	18fb      	adds	r3, r7, r3
   21ab6:	22ff      	movs	r2, #255	; 0xff
   21ab8:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   21aba:	2383      	movs	r3, #131	; 0x83
   21abc:	005a      	lsls	r2, r3, #1
   21abe:	490c      	ldr	r1, [pc, #48]	; (21af0 <nm_bus_ioctl+0x7c>)
   21ac0:	4b0c      	ldr	r3, [pc, #48]	; (21af4 <nm_bus_ioctl+0x80>)
   21ac2:	0018      	movs	r0, r3
   21ac4:	4b0c      	ldr	r3, [pc, #48]	; (21af8 <nm_bus_ioctl+0x84>)
   21ac6:	4798      	blx	r3
   21ac8:	4b0c      	ldr	r3, [pc, #48]	; (21afc <nm_bus_ioctl+0x88>)
   21aca:	0018      	movs	r0, r3
   21acc:	4b0a      	ldr	r3, [pc, #40]	; (21af8 <nm_bus_ioctl+0x84>)
   21ace:	4798      	blx	r3
   21ad0:	4b0b      	ldr	r3, [pc, #44]	; (21b00 <nm_bus_ioctl+0x8c>)
   21ad2:	0018      	movs	r0, r3
   21ad4:	4b08      	ldr	r3, [pc, #32]	; (21af8 <nm_bus_ioctl+0x84>)
   21ad6:	4798      	blx	r3
			break;
   21ad8:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   21ada:	230f      	movs	r3, #15
   21adc:	18fb      	adds	r3, r7, r3
   21ade:	781b      	ldrb	r3, [r3, #0]
   21ae0:	b25b      	sxtb	r3, r3
}
   21ae2:	0018      	movs	r0, r3
   21ae4:	46bd      	mov	sp, r7
   21ae6:	b005      	add	sp, #20
   21ae8:	bd90      	pop	{r4, r7, pc}
   21aea:	46c0      	nop			; (mov r8, r8)
   21aec:	00021815 	.word	0x00021815
   21af0:	0003a1c4 	.word	0x0003a1c4
   21af4:	0003a198 	.word	0x0003a198
   21af8:	0001ee19 	.word	0x0001ee19
   21afc:	0003a1ac 	.word	0x0003a1ac
   21b00:	0003a1c0 	.word	0x0003a1c0

00021b04 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   21b04:	b580      	push	{r7, lr}
   21b06:	b082      	sub	sp, #8
   21b08:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   21b0a:	1dfb      	adds	r3, r7, #7
   21b0c:	2200      	movs	r2, #0
   21b0e:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   21b10:	1d3b      	adds	r3, r7, #4
   21b12:	0018      	movs	r0, r3
   21b14:	4b13      	ldr	r3, [pc, #76]	; (21b64 <nm_bus_deinit+0x60>)
   21b16:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   21b18:	1d3b      	adds	r3, r7, #4
   21b1a:	2200      	movs	r2, #0
   21b1c:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   21b1e:	1d3b      	adds	r3, r7, #4
   21b20:	2200      	movs	r2, #0
   21b22:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   21b24:	4b10      	ldr	r3, [pc, #64]	; (21b68 <nm_bus_deinit+0x64>)
   21b26:	0018      	movs	r0, r3
   21b28:	4b10      	ldr	r3, [pc, #64]	; (21b6c <nm_bus_deinit+0x68>)
   21b2a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   21b2c:	1d3b      	adds	r3, r7, #4
   21b2e:	0019      	movs	r1, r3
   21b30:	200c      	movs	r0, #12
   21b32:	4b0f      	ldr	r3, [pc, #60]	; (21b70 <nm_bus_deinit+0x6c>)
   21b34:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   21b36:	1d3b      	adds	r3, r7, #4
   21b38:	0019      	movs	r1, r3
   21b3a:	200f      	movs	r0, #15
   21b3c:	4b0c      	ldr	r3, [pc, #48]	; (21b70 <nm_bus_deinit+0x6c>)
   21b3e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   21b40:	1d3b      	adds	r3, r7, #4
   21b42:	0019      	movs	r1, r3
   21b44:	200d      	movs	r0, #13
   21b46:	4b0a      	ldr	r3, [pc, #40]	; (21b70 <nm_bus_deinit+0x6c>)
   21b48:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   21b4a:	1d3b      	adds	r3, r7, #4
   21b4c:	0019      	movs	r1, r3
   21b4e:	200e      	movs	r0, #14
   21b50:	4b07      	ldr	r3, [pc, #28]	; (21b70 <nm_bus_deinit+0x6c>)
   21b52:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   21b54:	1dfb      	adds	r3, r7, #7
   21b56:	781b      	ldrb	r3, [r3, #0]
   21b58:	b25b      	sxtb	r3, r3
}
   21b5a:	0018      	movs	r0, r3
   21b5c:	46bd      	mov	sp, r7
   21b5e:	b002      	add	sp, #8
   21b60:	bd80      	pop	{r7, pc}
   21b62:	46c0      	nop			; (mov r8, r8)
   21b64:	0002147d 	.word	0x0002147d
   21b68:	20005b2c 	.word	0x20005b2c
   21b6c:	00021671 	.word	0x00021671
   21b70:	0002797d 	.word	0x0002797d

00021b74 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   21b74:	b580      	push	{r7, lr}
   21b76:	b084      	sub	sp, #16
   21b78:	af00      	add	r7, sp, #0
   21b7a:	60f8      	str	r0, [r7, #12]
   21b7c:	60b9      	str	r1, [r7, #8]
   21b7e:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   21b80:	687b      	ldr	r3, [r7, #4]
   21b82:	2b00      	cmp	r3, #0
   21b84:	d010      	beq.n	21ba8 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   21b86:	68bb      	ldr	r3, [r7, #8]
   21b88:	781a      	ldrb	r2, [r3, #0]
   21b8a:	68fb      	ldr	r3, [r7, #12]
   21b8c:	701a      	strb	r2, [r3, #0]
		pDst++;
   21b8e:	68fb      	ldr	r3, [r7, #12]
   21b90:	3301      	adds	r3, #1
   21b92:	60fb      	str	r3, [r7, #12]
		pSrc++;
   21b94:	68bb      	ldr	r3, [r7, #8]
   21b96:	3301      	adds	r3, #1
   21b98:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   21b9a:	687b      	ldr	r3, [r7, #4]
   21b9c:	3b01      	subs	r3, #1
   21b9e:	607b      	str	r3, [r7, #4]
   21ba0:	687b      	ldr	r3, [r7, #4]
   21ba2:	2b00      	cmp	r3, #0
   21ba4:	d1ef      	bne.n	21b86 <m2m_memcpy+0x12>
   21ba6:	e000      	b.n	21baa <m2m_memcpy+0x36>
	if(sz == 0) return;
   21ba8:	46c0      	nop			; (mov r8, r8)
}
   21baa:	46bd      	mov	sp, r7
   21bac:	b004      	add	sp, #16
   21bae:	bd80      	pop	{r7, pc}

00021bb0 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   21bb0:	b580      	push	{r7, lr}
   21bb2:	b084      	sub	sp, #16
   21bb4:	af00      	add	r7, sp, #0
   21bb6:	60f8      	str	r0, [r7, #12]
   21bb8:	607a      	str	r2, [r7, #4]
   21bba:	230b      	movs	r3, #11
   21bbc:	18fb      	adds	r3, r7, r3
   21bbe:	1c0a      	adds	r2, r1, #0
   21bc0:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   21bc2:	687b      	ldr	r3, [r7, #4]
   21bc4:	2b00      	cmp	r3, #0
   21bc6:	d00e      	beq.n	21be6 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   21bc8:	68fb      	ldr	r3, [r7, #12]
   21bca:	220b      	movs	r2, #11
   21bcc:	18ba      	adds	r2, r7, r2
   21bce:	7812      	ldrb	r2, [r2, #0]
   21bd0:	701a      	strb	r2, [r3, #0]
		pBuf++;
   21bd2:	68fb      	ldr	r3, [r7, #12]
   21bd4:	3301      	adds	r3, #1
   21bd6:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   21bd8:	687b      	ldr	r3, [r7, #4]
   21bda:	3b01      	subs	r3, #1
   21bdc:	607b      	str	r3, [r7, #4]
   21bde:	687b      	ldr	r3, [r7, #4]
   21be0:	2b00      	cmp	r3, #0
   21be2:	d1f1      	bne.n	21bc8 <m2m_memset+0x18>
   21be4:	e000      	b.n	21be8 <m2m_memset+0x38>
	if(sz == 0) return;
   21be6:	46c0      	nop			; (mov r8, r8)
}
   21be8:	46bd      	mov	sp, r7
   21bea:	b004      	add	sp, #16
   21bec:	bd80      	pop	{r7, pc}

00021bee <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   21bee:	b580      	push	{r7, lr}
   21bf0:	b084      	sub	sp, #16
   21bf2:	af00      	add	r7, sp, #0
   21bf4:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   21bf6:	230e      	movs	r3, #14
   21bf8:	18fb      	adds	r3, r7, r3
   21bfa:	2200      	movs	r2, #0
   21bfc:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   21bfe:	e009      	b.n	21c14 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   21c00:	230e      	movs	r3, #14
   21c02:	18fb      	adds	r3, r7, r3
   21c04:	881a      	ldrh	r2, [r3, #0]
   21c06:	230e      	movs	r3, #14
   21c08:	18fb      	adds	r3, r7, r3
   21c0a:	3201      	adds	r2, #1
   21c0c:	801a      	strh	r2, [r3, #0]
		pcStr++;
   21c0e:	687b      	ldr	r3, [r7, #4]
   21c10:	3301      	adds	r3, #1
   21c12:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   21c14:	687b      	ldr	r3, [r7, #4]
   21c16:	781b      	ldrb	r3, [r3, #0]
   21c18:	2b00      	cmp	r3, #0
   21c1a:	d1f1      	bne.n	21c00 <m2m_strlen+0x12>
	}
	return u16StrLen;
   21c1c:	230e      	movs	r3, #14
   21c1e:	18fb      	adds	r3, r7, r3
   21c20:	881b      	ldrh	r3, [r3, #0]
}
   21c22:	0018      	movs	r0, r3
   21c24:	46bd      	mov	sp, r7
   21c26:	b004      	add	sp, #16
   21c28:	bd80      	pop	{r7, pc}
	...

00021c2c <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   21c2c:	b580      	push	{r7, lr}
   21c2e:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   21c30:	4b04      	ldr	r3, [pc, #16]	; (21c44 <isr+0x18>)
   21c32:	78db      	ldrb	r3, [r3, #3]
   21c34:	b2db      	uxtb	r3, r3
   21c36:	3301      	adds	r3, #1
   21c38:	b2da      	uxtb	r2, r3
   21c3a:	4b02      	ldr	r3, [pc, #8]	; (21c44 <isr+0x18>)
   21c3c:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   21c3e:	46c0      	nop			; (mov r8, r8)
   21c40:	46bd      	mov	sp, r7
   21c42:	bd80      	pop	{r7, pc}
   21c44:	20005b68 	.word	0x20005b68

00021c48 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   21c48:	b590      	push	{r4, r7, lr}
   21c4a:	b083      	sub	sp, #12
   21c4c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   21c4e:	1dfb      	adds	r3, r7, #7
   21c50:	2200      	movs	r2, #0
   21c52:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   21c54:	4b14      	ldr	r3, [pc, #80]	; (21ca8 <hif_set_rx_done+0x60>)
   21c56:	2200      	movs	r2, #0
   21c58:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   21c5a:	2001      	movs	r0, #1
   21c5c:	4b13      	ldr	r3, [pc, #76]	; (21cac <hif_set_rx_done+0x64>)
   21c5e:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   21c60:	1dfc      	adds	r4, r7, #7
   21c62:	003b      	movs	r3, r7
   21c64:	4a12      	ldr	r2, [pc, #72]	; (21cb0 <hif_set_rx_done+0x68>)
   21c66:	0019      	movs	r1, r3
   21c68:	0010      	movs	r0, r2
   21c6a:	4b12      	ldr	r3, [pc, #72]	; (21cb4 <hif_set_rx_done+0x6c>)
   21c6c:	4798      	blx	r3
   21c6e:	0003      	movs	r3, r0
   21c70:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   21c72:	1dfb      	adds	r3, r7, #7
   21c74:	781b      	ldrb	r3, [r3, #0]
   21c76:	b25b      	sxtb	r3, r3
   21c78:	2b00      	cmp	r3, #0
   21c7a:	d10d      	bne.n	21c98 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   21c7c:	683b      	ldr	r3, [r7, #0]
   21c7e:	2202      	movs	r2, #2
   21c80:	4313      	orrs	r3, r2
   21c82:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   21c84:	683b      	ldr	r3, [r7, #0]
   21c86:	1dfc      	adds	r4, r7, #7
   21c88:	4a09      	ldr	r2, [pc, #36]	; (21cb0 <hif_set_rx_done+0x68>)
   21c8a:	0019      	movs	r1, r3
   21c8c:	0010      	movs	r0, r2
   21c8e:	4b0a      	ldr	r3, [pc, #40]	; (21cb8 <hif_set_rx_done+0x70>)
   21c90:	4798      	blx	r3
   21c92:	0003      	movs	r3, r0
   21c94:	7023      	strb	r3, [r4, #0]
   21c96:	e000      	b.n	21c9a <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   21c98:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   21c9a:	1dfb      	adds	r3, r7, #7
   21c9c:	781b      	ldrb	r3, [r3, #0]
   21c9e:	b25b      	sxtb	r3, r3

}
   21ca0:	0018      	movs	r0, r3
   21ca2:	46bd      	mov	sp, r7
   21ca4:	b003      	add	sp, #12
   21ca6:	bd90      	pop	{r4, r7, pc}
   21ca8:	20005b68 	.word	0x20005b68
   21cac:	00021365 	.word	0x00021365
   21cb0:	00001070 	.word	0x00001070
   21cb4:	00023c41 	.word	0x00023c41
   21cb8:	00023c65 	.word	0x00023c65

00021cbc <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   21cbc:	b580      	push	{r7, lr}
   21cbe:	b082      	sub	sp, #8
   21cc0:	af00      	add	r7, sp, #0
   21cc2:	603a      	str	r2, [r7, #0]
   21cc4:	1dfb      	adds	r3, r7, #7
   21cc6:	1c02      	adds	r2, r0, #0
   21cc8:	701a      	strb	r2, [r3, #0]
   21cca:	1d3b      	adds	r3, r7, #4
   21ccc:	1c0a      	adds	r2, r1, #0
   21cce:	801a      	strh	r2, [r3, #0]


}
   21cd0:	46c0      	nop			; (mov r8, r8)
   21cd2:	46bd      	mov	sp, r7
   21cd4:	b002      	add	sp, #8
   21cd6:	bd80      	pop	{r7, pc}

00021cd8 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   21cd8:	b590      	push	{r4, r7, lr}
   21cda:	b083      	sub	sp, #12
   21cdc:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   21cde:	1dfb      	adds	r3, r7, #7
   21ce0:	2200      	movs	r2, #0
   21ce2:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   21ce4:	4b16      	ldr	r3, [pc, #88]	; (21d40 <hif_chip_wake+0x68>)
   21ce6:	789b      	ldrb	r3, [r3, #2]
   21ce8:	b2db      	uxtb	r3, r3
   21cea:	2b00      	cmp	r3, #0
   21cec:	d003      	beq.n	21cf6 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   21cee:	1dfb      	adds	r3, r7, #7
   21cf0:	781b      	ldrb	r3, [r3, #0]
   21cf2:	b25b      	sxtb	r3, r3
   21cf4:	e01f      	b.n	21d36 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   21cf6:	4b12      	ldr	r3, [pc, #72]	; (21d40 <hif_chip_wake+0x68>)
   21cf8:	785b      	ldrb	r3, [r3, #1]
   21cfa:	b2db      	uxtb	r3, r3
   21cfc:	2b00      	cmp	r3, #0
   21cfe:	d10e      	bne.n	21d1e <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   21d00:	4b0f      	ldr	r3, [pc, #60]	; (21d40 <hif_chip_wake+0x68>)
   21d02:	781b      	ldrb	r3, [r3, #0]
   21d04:	b2db      	uxtb	r3, r3
   21d06:	2b00      	cmp	r3, #0
   21d08:	d009      	beq.n	21d1e <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   21d0a:	1dfc      	adds	r4, r7, #7
   21d0c:	4b0d      	ldr	r3, [pc, #52]	; (21d44 <hif_chip_wake+0x6c>)
   21d0e:	4798      	blx	r3
   21d10:	0003      	movs	r3, r0
   21d12:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   21d14:	1dfb      	adds	r3, r7, #7
   21d16:	781b      	ldrb	r3, [r3, #0]
   21d18:	b25b      	sxtb	r3, r3
   21d1a:	2b00      	cmp	r3, #0
   21d1c:	d107      	bne.n	21d2e <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   21d1e:	4b08      	ldr	r3, [pc, #32]	; (21d40 <hif_chip_wake+0x68>)
   21d20:	785b      	ldrb	r3, [r3, #1]
   21d22:	b2db      	uxtb	r3, r3
   21d24:	3301      	adds	r3, #1
   21d26:	b2da      	uxtb	r2, r3
   21d28:	4b05      	ldr	r3, [pc, #20]	; (21d40 <hif_chip_wake+0x68>)
   21d2a:	705a      	strb	r2, [r3, #1]
   21d2c:	e000      	b.n	21d30 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   21d2e:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   21d30:	1dfb      	adds	r3, r7, #7
   21d32:	781b      	ldrb	r3, [r3, #0]
   21d34:	b25b      	sxtb	r3, r3
}
   21d36:	0018      	movs	r0, r3
   21d38:	46bd      	mov	sp, r7
   21d3a:	b003      	add	sp, #12
   21d3c:	bd90      	pop	{r4, r7, pc}
   21d3e:	46c0      	nop			; (mov r8, r8)
   21d40:	20005b68 	.word	0x20005b68
   21d44:	00023711 	.word	0x00023711

00021d48 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   21d48:	b580      	push	{r7, lr}
   21d4a:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   21d4c:	4b07      	ldr	r3, [pc, #28]	; (21d6c <hif_chip_sleep_sc+0x24>)
   21d4e:	785b      	ldrb	r3, [r3, #1]
   21d50:	b2db      	uxtb	r3, r3
   21d52:	2b00      	cmp	r3, #0
   21d54:	d006      	beq.n	21d64 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   21d56:	4b05      	ldr	r3, [pc, #20]	; (21d6c <hif_chip_sleep_sc+0x24>)
   21d58:	785b      	ldrb	r3, [r3, #1]
   21d5a:	b2db      	uxtb	r3, r3
   21d5c:	3b01      	subs	r3, #1
   21d5e:	b2da      	uxtb	r2, r3
   21d60:	4b02      	ldr	r3, [pc, #8]	; (21d6c <hif_chip_sleep_sc+0x24>)
   21d62:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   21d64:	2300      	movs	r3, #0
}
   21d66:	0018      	movs	r0, r3
   21d68:	46bd      	mov	sp, r7
   21d6a:	bd80      	pop	{r7, pc}
   21d6c:	20005b68 	.word	0x20005b68

00021d70 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   21d70:	b590      	push	{r4, r7, lr}
   21d72:	b083      	sub	sp, #12
   21d74:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   21d76:	1dfb      	adds	r3, r7, #7
   21d78:	2200      	movs	r2, #0
   21d7a:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   21d7c:	4b10      	ldr	r3, [pc, #64]	; (21dc0 <hif_chip_sleep+0x50>)
   21d7e:	785b      	ldrb	r3, [r3, #1]
   21d80:	b2db      	uxtb	r3, r3
   21d82:	2b00      	cmp	r3, #0
   21d84:	d006      	beq.n	21d94 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   21d86:	4b0e      	ldr	r3, [pc, #56]	; (21dc0 <hif_chip_sleep+0x50>)
   21d88:	785b      	ldrb	r3, [r3, #1]
   21d8a:	b2db      	uxtb	r3, r3
   21d8c:	3b01      	subs	r3, #1
   21d8e:	b2da      	uxtb	r2, r3
   21d90:	4b0b      	ldr	r3, [pc, #44]	; (21dc0 <hif_chip_sleep+0x50>)
   21d92:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   21d94:	4b0a      	ldr	r3, [pc, #40]	; (21dc0 <hif_chip_sleep+0x50>)
   21d96:	785b      	ldrb	r3, [r3, #1]
   21d98:	b2db      	uxtb	r3, r3
   21d9a:	2b00      	cmp	r3, #0
   21d9c:	d109      	bne.n	21db2 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   21d9e:	4b08      	ldr	r3, [pc, #32]	; (21dc0 <hif_chip_sleep+0x50>)
   21da0:	781b      	ldrb	r3, [r3, #0]
   21da2:	b2db      	uxtb	r3, r3
   21da4:	2b00      	cmp	r3, #0
   21da6:	d004      	beq.n	21db2 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   21da8:	1dfc      	adds	r4, r7, #7
   21daa:	4b06      	ldr	r3, [pc, #24]	; (21dc4 <hif_chip_sleep+0x54>)
   21dac:	4798      	blx	r3
   21dae:	0003      	movs	r3, r0
   21db0:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   21db2:	1dfb      	adds	r3, r7, #7
   21db4:	781b      	ldrb	r3, [r3, #0]
   21db6:	b25b      	sxtb	r3, r3
}
   21db8:	0018      	movs	r0, r3
   21dba:	46bd      	mov	sp, r7
   21dbc:	b003      	add	sp, #12
   21dbe:	bd90      	pop	{r4, r7, pc}
   21dc0:	20005b68 	.word	0x20005b68
   21dc4:	00023639 	.word	0x00023639

00021dc8 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   21dc8:	b580      	push	{r7, lr}
   21dca:	b082      	sub	sp, #8
   21dcc:	af00      	add	r7, sp, #0
   21dce:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   21dd0:	4b09      	ldr	r3, [pc, #36]	; (21df8 <hif_init+0x30>)
   21dd2:	222c      	movs	r2, #44	; 0x2c
   21dd4:	2100      	movs	r1, #0
   21dd6:	0018      	movs	r0, r3
   21dd8:	4b08      	ldr	r3, [pc, #32]	; (21dfc <hif_init+0x34>)
   21dda:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   21ddc:	4b08      	ldr	r3, [pc, #32]	; (21e00 <hif_init+0x38>)
   21dde:	0018      	movs	r0, r3
   21de0:	4b08      	ldr	r3, [pc, #32]	; (21e04 <hif_init+0x3c>)
   21de2:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   21de4:	4b08      	ldr	r3, [pc, #32]	; (21e08 <hif_init+0x40>)
   21de6:	0019      	movs	r1, r3
   21de8:	2003      	movs	r0, #3
   21dea:	4b08      	ldr	r3, [pc, #32]	; (21e0c <hif_init+0x44>)
   21dec:	4798      	blx	r3
	return M2M_SUCCESS;
   21dee:	2300      	movs	r3, #0
}
   21df0:	0018      	movs	r0, r3
   21df2:	46bd      	mov	sp, r7
   21df4:	b002      	add	sp, #8
   21df6:	bd80      	pop	{r7, pc}
   21df8:	20005b68 	.word	0x20005b68
   21dfc:	00021bb1 	.word	0x00021bb1
   21e00:	00021c2d 	.word	0x00021c2d
   21e04:	000212ed 	.word	0x000212ed
   21e08:	00021cbd 	.word	0x00021cbd
   21e0c:	000228ad 	.word	0x000228ad

00021e10 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   21e10:	b590      	push	{r4, r7, lr}
   21e12:	b089      	sub	sp, #36	; 0x24
   21e14:	af00      	add	r7, sp, #0
   21e16:	0004      	movs	r4, r0
   21e18:	0008      	movs	r0, r1
   21e1a:	603a      	str	r2, [r7, #0]
   21e1c:	0019      	movs	r1, r3
   21e1e:	1dfb      	adds	r3, r7, #7
   21e20:	1c22      	adds	r2, r4, #0
   21e22:	701a      	strb	r2, [r3, #0]
   21e24:	1dbb      	adds	r3, r7, #6
   21e26:	1c02      	adds	r2, r0, #0
   21e28:	701a      	strb	r2, [r3, #0]
   21e2a:	1d3b      	adds	r3, r7, #4
   21e2c:	1c0a      	adds	r2, r1, #0
   21e2e:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   21e30:	231f      	movs	r3, #31
   21e32:	18fb      	adds	r3, r7, r3
   21e34:	22ff      	movs	r2, #255	; 0xff
   21e36:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   21e38:	1dbb      	adds	r3, r7, #6
   21e3a:	781b      	ldrb	r3, [r3, #0]
   21e3c:	227f      	movs	r2, #127	; 0x7f
   21e3e:	4013      	ands	r3, r2
   21e40:	b2da      	uxtb	r2, r3
   21e42:	2318      	movs	r3, #24
   21e44:	18fb      	adds	r3, r7, r3
   21e46:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   21e48:	2318      	movs	r3, #24
   21e4a:	18fb      	adds	r3, r7, r3
   21e4c:	1dfa      	adds	r2, r7, #7
   21e4e:	7812      	ldrb	r2, [r2, #0]
   21e50:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   21e52:	2318      	movs	r3, #24
   21e54:	18fb      	adds	r3, r7, r3
   21e56:	2208      	movs	r2, #8
   21e58:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   21e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21e5c:	2b00      	cmp	r3, #0
   21e5e:	d011      	beq.n	21e84 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   21e60:	2318      	movs	r3, #24
   21e62:	18fb      	adds	r3, r7, r3
   21e64:	885b      	ldrh	r3, [r3, #2]
   21e66:	b29a      	uxth	r2, r3
   21e68:	2338      	movs	r3, #56	; 0x38
   21e6a:	18f9      	adds	r1, r7, r3
   21e6c:	2334      	movs	r3, #52	; 0x34
   21e6e:	18fb      	adds	r3, r7, r3
   21e70:	8809      	ldrh	r1, [r1, #0]
   21e72:	881b      	ldrh	r3, [r3, #0]
   21e74:	18cb      	adds	r3, r1, r3
   21e76:	b29b      	uxth	r3, r3
   21e78:	18d3      	adds	r3, r2, r3
   21e7a:	b29a      	uxth	r2, r3
   21e7c:	2318      	movs	r3, #24
   21e7e:	18fb      	adds	r3, r7, r3
   21e80:	805a      	strh	r2, [r3, #2]
   21e82:	e00a      	b.n	21e9a <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   21e84:	2318      	movs	r3, #24
   21e86:	18fb      	adds	r3, r7, r3
   21e88:	885b      	ldrh	r3, [r3, #2]
   21e8a:	b29a      	uxth	r2, r3
   21e8c:	1d3b      	adds	r3, r7, #4
   21e8e:	881b      	ldrh	r3, [r3, #0]
   21e90:	18d3      	adds	r3, r2, r3
   21e92:	b29a      	uxth	r2, r3
   21e94:	2318      	movs	r3, #24
   21e96:	18fb      	adds	r3, r7, r3
   21e98:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   21e9a:	231f      	movs	r3, #31
   21e9c:	18fc      	adds	r4, r7, r3
   21e9e:	4bb2      	ldr	r3, [pc, #712]	; (22168 <hif_send+0x358>)
   21ea0:	4798      	blx	r3
   21ea2:	0003      	movs	r3, r0
   21ea4:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   21ea6:	231f      	movs	r3, #31
   21ea8:	18fb      	adds	r3, r7, r3
   21eaa:	781b      	ldrb	r3, [r3, #0]
   21eac:	b25b      	sxtb	r3, r3
   21eae:	2b00      	cmp	r3, #0
   21eb0:	d000      	beq.n	21eb4 <hif_send+0xa4>
   21eb2:	e129      	b.n	22108 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   21eb4:	2300      	movs	r3, #0
   21eb6:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   21eb8:	230e      	movs	r3, #14
   21eba:	18fb      	adds	r3, r7, r3
   21ebc:	2200      	movs	r2, #0
   21ebe:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   21ec0:	2300      	movs	r3, #0
   21ec2:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   21ec4:	1dfb      	adds	r3, r7, #7
   21ec6:	781a      	ldrb	r2, [r3, #0]
   21ec8:	697b      	ldr	r3, [r7, #20]
   21eca:	4313      	orrs	r3, r2
   21ecc:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   21ece:	1dbb      	adds	r3, r7, #6
   21ed0:	781b      	ldrb	r3, [r3, #0]
   21ed2:	021a      	lsls	r2, r3, #8
   21ed4:	697b      	ldr	r3, [r7, #20]
   21ed6:	4313      	orrs	r3, r2
   21ed8:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   21eda:	2318      	movs	r3, #24
   21edc:	18fb      	adds	r3, r7, r3
   21ede:	885b      	ldrh	r3, [r3, #2]
   21ee0:	b29b      	uxth	r3, r3
   21ee2:	041a      	lsls	r2, r3, #16
   21ee4:	697b      	ldr	r3, [r7, #20]
   21ee6:	4313      	orrs	r3, r2
   21ee8:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   21eea:	697b      	ldr	r3, [r7, #20]
   21eec:	221f      	movs	r2, #31
   21eee:	18bc      	adds	r4, r7, r2
   21ef0:	4a9e      	ldr	r2, [pc, #632]	; (2216c <hif_send+0x35c>)
   21ef2:	0019      	movs	r1, r3
   21ef4:	0010      	movs	r0, r2
   21ef6:	4b9e      	ldr	r3, [pc, #632]	; (22170 <hif_send+0x360>)
   21ef8:	4798      	blx	r3
   21efa:	0003      	movs	r3, r0
   21efc:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   21efe:	231f      	movs	r3, #31
   21f00:	18fb      	adds	r3, r7, r3
   21f02:	781b      	ldrb	r3, [r3, #0]
   21f04:	b25b      	sxtb	r3, r3
   21f06:	2b00      	cmp	r3, #0
   21f08:	d000      	beq.n	21f0c <hif_send+0xfc>
   21f0a:	e119      	b.n	22140 <hif_send+0x330>

		reg = 0UL;
   21f0c:	2300      	movs	r3, #0
   21f0e:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   21f10:	697b      	ldr	r3, [r7, #20]
   21f12:	2202      	movs	r2, #2
   21f14:	4313      	orrs	r3, r2
   21f16:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   21f18:	697b      	ldr	r3, [r7, #20]
   21f1a:	221f      	movs	r2, #31
   21f1c:	18bc      	adds	r4, r7, r2
   21f1e:	4a95      	ldr	r2, [pc, #596]	; (22174 <hif_send+0x364>)
   21f20:	0019      	movs	r1, r3
   21f22:	0010      	movs	r0, r2
   21f24:	4b92      	ldr	r3, [pc, #584]	; (22170 <hif_send+0x360>)
   21f26:	4798      	blx	r3
   21f28:	0003      	movs	r3, r0
   21f2a:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   21f2c:	231f      	movs	r3, #31
   21f2e:	18fb      	adds	r3, r7, r3
   21f30:	781b      	ldrb	r3, [r3, #0]
   21f32:	b25b      	sxtb	r3, r3
   21f34:	2b00      	cmp	r3, #0
   21f36:	d000      	beq.n	21f3a <hif_send+0x12a>
   21f38:	e104      	b.n	22144 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   21f3a:	2300      	movs	r3, #0
   21f3c:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   21f3e:	230e      	movs	r3, #14
   21f40:	18fb      	adds	r3, r7, r3
   21f42:	2200      	movs	r2, #0
   21f44:	801a      	strh	r2, [r3, #0]
   21f46:	e050      	b.n	21fea <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   21f48:	231f      	movs	r3, #31
   21f4a:	18fc      	adds	r4, r7, r3
   21f4c:	2314      	movs	r3, #20
   21f4e:	18fb      	adds	r3, r7, r3
   21f50:	4a88      	ldr	r2, [pc, #544]	; (22174 <hif_send+0x364>)
   21f52:	0019      	movs	r1, r3
   21f54:	0010      	movs	r0, r2
   21f56:	4b88      	ldr	r3, [pc, #544]	; (22178 <hif_send+0x368>)
   21f58:	4798      	blx	r3
   21f5a:	0003      	movs	r3, r0
   21f5c:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   21f5e:	231f      	movs	r3, #31
   21f60:	18fb      	adds	r3, r7, r3
   21f62:	781b      	ldrb	r3, [r3, #0]
   21f64:	b25b      	sxtb	r3, r3
   21f66:	2b00      	cmp	r3, #0
   21f68:	d147      	bne.n	21ffa <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   21f6a:	230e      	movs	r3, #14
   21f6c:	18fb      	adds	r3, r7, r3
   21f6e:	881b      	ldrh	r3, [r3, #0]
   21f70:	b29a      	uxth	r2, r3
   21f72:	23f4      	movs	r3, #244	; 0xf4
   21f74:	33ff      	adds	r3, #255	; 0xff
   21f76:	429a      	cmp	r2, r3
   21f78:	d916      	bls.n	21fa8 <hif_send+0x198>
				if(cnt < 501) {
   21f7a:	230e      	movs	r3, #14
   21f7c:	18fb      	adds	r3, r7, r3
   21f7e:	881b      	ldrh	r3, [r3, #0]
   21f80:	b29a      	uxth	r2, r3
   21f82:	23fa      	movs	r3, #250	; 0xfa
   21f84:	005b      	lsls	r3, r3, #1
   21f86:	429a      	cmp	r2, r3
   21f88:	d80b      	bhi.n	21fa2 <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   21f8a:	4b7c      	ldr	r3, [pc, #496]	; (2217c <hif_send+0x36c>)
   21f8c:	0018      	movs	r0, r3
   21f8e:	4b7c      	ldr	r3, [pc, #496]	; (22180 <hif_send+0x370>)
   21f90:	4798      	blx	r3
   21f92:	4b7c      	ldr	r3, [pc, #496]	; (22184 <hif_send+0x374>)
   21f94:	0018      	movs	r0, r3
   21f96:	4b7a      	ldr	r3, [pc, #488]	; (22180 <hif_send+0x370>)
   21f98:	4798      	blx	r3
   21f9a:	4b7b      	ldr	r3, [pc, #492]	; (22188 <hif_send+0x378>)
   21f9c:	0018      	movs	r0, r3
   21f9e:	4b78      	ldr	r3, [pc, #480]	; (22180 <hif_send+0x370>)
   21fa0:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   21fa2:	2001      	movs	r0, #1
   21fa4:	4b79      	ldr	r3, [pc, #484]	; (2218c <hif_send+0x37c>)
   21fa6:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   21fa8:	697b      	ldr	r3, [r7, #20]
   21faa:	2202      	movs	r2, #2
   21fac:	4013      	ands	r3, r2
   21fae:	d113      	bne.n	21fd8 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   21fb0:	231f      	movs	r3, #31
   21fb2:	18fc      	adds	r4, r7, r3
   21fb4:	2310      	movs	r3, #16
   21fb6:	18fb      	adds	r3, r7, r3
   21fb8:	4a75      	ldr	r2, [pc, #468]	; (22190 <hif_send+0x380>)
   21fba:	0019      	movs	r1, r3
   21fbc:	0010      	movs	r0, r2
   21fbe:	4b6e      	ldr	r3, [pc, #440]	; (22178 <hif_send+0x368>)
   21fc0:	4798      	blx	r3
   21fc2:	0003      	movs	r3, r0
   21fc4:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   21fc6:	231f      	movs	r3, #31
   21fc8:	18fb      	adds	r3, r7, r3
   21fca:	781b      	ldrb	r3, [r3, #0]
   21fcc:	b25b      	sxtb	r3, r3
   21fce:	2b00      	cmp	r3, #0
   21fd0:	d015      	beq.n	21ffe <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   21fd2:	2300      	movs	r3, #0
   21fd4:	613b      	str	r3, [r7, #16]
					goto ERR1;
   21fd6:	e0bc      	b.n	22152 <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   21fd8:	230e      	movs	r3, #14
   21fda:	18fb      	adds	r3, r7, r3
   21fdc:	881b      	ldrh	r3, [r3, #0]
   21fde:	b29b      	uxth	r3, r3
   21fe0:	3301      	adds	r3, #1
   21fe2:	b29a      	uxth	r2, r3
   21fe4:	230e      	movs	r3, #14
   21fe6:	18fb      	adds	r3, r7, r3
   21fe8:	801a      	strh	r2, [r3, #0]
   21fea:	230e      	movs	r3, #14
   21fec:	18fb      	adds	r3, r7, r3
   21fee:	881b      	ldrh	r3, [r3, #0]
   21ff0:	b29b      	uxth	r3, r3
   21ff2:	4a68      	ldr	r2, [pc, #416]	; (22194 <hif_send+0x384>)
   21ff4:	4293      	cmp	r3, r2
   21ff6:	d9a7      	bls.n	21f48 <hif_send+0x138>
   21ff8:	e002      	b.n	22000 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   21ffa:	46c0      	nop			; (mov r8, r8)
   21ffc:	e000      	b.n	22000 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   21ffe:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   22000:	693b      	ldr	r3, [r7, #16]
   22002:	2b00      	cmp	r3, #0
   22004:	d100      	bne.n	22008 <hif_send+0x1f8>
   22006:	e074      	b.n	220f2 <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   22008:	693b      	ldr	r3, [r7, #16]
   2200a:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   2200c:	2318      	movs	r3, #24
   2200e:	18fb      	adds	r3, r7, r3
   22010:	885b      	ldrh	r3, [r3, #2]
   22012:	b29a      	uxth	r2, r3
   22014:	2318      	movs	r3, #24
   22016:	18fb      	adds	r3, r7, r3
   22018:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   2201a:	68bb      	ldr	r3, [r7, #8]
   2201c:	221f      	movs	r2, #31
   2201e:	18bc      	adds	r4, r7, r2
   22020:	2218      	movs	r2, #24
   22022:	18b9      	adds	r1, r7, r2
   22024:	2208      	movs	r2, #8
   22026:	0018      	movs	r0, r3
   22028:	4b5b      	ldr	r3, [pc, #364]	; (22198 <hif_send+0x388>)
   2202a:	4798      	blx	r3
   2202c:	0003      	movs	r3, r0
   2202e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   22030:	231f      	movs	r3, #31
   22032:	18fb      	adds	r3, r7, r3
   22034:	781b      	ldrb	r3, [r3, #0]
   22036:	b25b      	sxtb	r3, r3
   22038:	2b00      	cmp	r3, #0
   2203a:	d000      	beq.n	2203e <hif_send+0x22e>
   2203c:	e084      	b.n	22148 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   2203e:	68bb      	ldr	r3, [r7, #8]
   22040:	3308      	adds	r3, #8
   22042:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   22044:	683b      	ldr	r3, [r7, #0]
   22046:	2b00      	cmp	r3, #0
   22048:	d016      	beq.n	22078 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   2204a:	68b8      	ldr	r0, [r7, #8]
   2204c:	1d3b      	adds	r3, r7, #4
   2204e:	881a      	ldrh	r2, [r3, #0]
   22050:	231f      	movs	r3, #31
   22052:	18fc      	adds	r4, r7, r3
   22054:	683b      	ldr	r3, [r7, #0]
   22056:	0019      	movs	r1, r3
   22058:	4b4f      	ldr	r3, [pc, #316]	; (22198 <hif_send+0x388>)
   2205a:	4798      	blx	r3
   2205c:	0003      	movs	r3, r0
   2205e:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   22060:	231f      	movs	r3, #31
   22062:	18fb      	adds	r3, r7, r3
   22064:	781b      	ldrb	r3, [r3, #0]
   22066:	b25b      	sxtb	r3, r3
   22068:	2b00      	cmp	r3, #0
   2206a:	d000      	beq.n	2206e <hif_send+0x25e>
   2206c:	e06e      	b.n	2214c <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   2206e:	1d3b      	adds	r3, r7, #4
   22070:	881a      	ldrh	r2, [r3, #0]
   22072:	68bb      	ldr	r3, [r7, #8]
   22074:	18d3      	adds	r3, r2, r3
   22076:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   22078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2207a:	2b00      	cmp	r3, #0
   2207c:	d021      	beq.n	220c2 <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   2207e:	2338      	movs	r3, #56	; 0x38
   22080:	18fb      	adds	r3, r7, r3
   22082:	881a      	ldrh	r2, [r3, #0]
   22084:	1d3b      	adds	r3, r7, #4
   22086:	881b      	ldrh	r3, [r3, #0]
   22088:	1ad3      	subs	r3, r2, r3
   2208a:	001a      	movs	r2, r3
   2208c:	68bb      	ldr	r3, [r7, #8]
   2208e:	18d3      	adds	r3, r2, r3
   22090:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   22092:	68b8      	ldr	r0, [r7, #8]
   22094:	2334      	movs	r3, #52	; 0x34
   22096:	18fb      	adds	r3, r7, r3
   22098:	881a      	ldrh	r2, [r3, #0]
   2209a:	231f      	movs	r3, #31
   2209c:	18fc      	adds	r4, r7, r3
   2209e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   220a0:	0019      	movs	r1, r3
   220a2:	4b3d      	ldr	r3, [pc, #244]	; (22198 <hif_send+0x388>)
   220a4:	4798      	blx	r3
   220a6:	0003      	movs	r3, r0
   220a8:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   220aa:	231f      	movs	r3, #31
   220ac:	18fb      	adds	r3, r7, r3
   220ae:	781b      	ldrb	r3, [r3, #0]
   220b0:	b25b      	sxtb	r3, r3
   220b2:	2b00      	cmp	r3, #0
   220b4:	d14c      	bne.n	22150 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   220b6:	2334      	movs	r3, #52	; 0x34
   220b8:	18fb      	adds	r3, r7, r3
   220ba:	881a      	ldrh	r2, [r3, #0]
   220bc:	68bb      	ldr	r3, [r7, #8]
   220be:	18d3      	adds	r3, r2, r3
   220c0:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   220c2:	693b      	ldr	r3, [r7, #16]
   220c4:	009b      	lsls	r3, r3, #2
   220c6:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   220c8:	697b      	ldr	r3, [r7, #20]
   220ca:	2202      	movs	r2, #2
   220cc:	4313      	orrs	r3, r2
   220ce:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   220d0:	697b      	ldr	r3, [r7, #20]
   220d2:	221f      	movs	r2, #31
   220d4:	18bc      	adds	r4, r7, r2
   220d6:	4a31      	ldr	r2, [pc, #196]	; (2219c <hif_send+0x38c>)
   220d8:	0019      	movs	r1, r3
   220da:	0010      	movs	r0, r2
   220dc:	4b24      	ldr	r3, [pc, #144]	; (22170 <hif_send+0x360>)
   220de:	4798      	blx	r3
   220e0:	0003      	movs	r3, r0
   220e2:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   220e4:	231f      	movs	r3, #31
   220e6:	18fb      	adds	r3, r7, r3
   220e8:	781b      	ldrb	r3, [r3, #0]
   220ea:	b25b      	sxtb	r3, r3
   220ec:	2b00      	cmp	r3, #0
   220ee:	d01c      	beq.n	2212a <hif_send+0x31a>
   220f0:	e02f      	b.n	22152 <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   220f2:	231f      	movs	r3, #31
   220f4:	18fc      	adds	r4, r7, r3
   220f6:	4b2a      	ldr	r3, [pc, #168]	; (221a0 <hif_send+0x390>)
   220f8:	4798      	blx	r3
   220fa:	0003      	movs	r3, r0
   220fc:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   220fe:	231f      	movs	r3, #31
   22100:	18fb      	adds	r3, r7, r3
   22102:	22fd      	movs	r2, #253	; 0xfd
   22104:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   22106:	e026      	b.n	22156 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   22108:	2398      	movs	r3, #152	; 0x98
   2210a:	33ff      	adds	r3, #255	; 0xff
   2210c:	001a      	movs	r2, r3
   2210e:	4925      	ldr	r1, [pc, #148]	; (221a4 <hif_send+0x394>)
   22110:	4b25      	ldr	r3, [pc, #148]	; (221a8 <hif_send+0x398>)
   22112:	0018      	movs	r0, r3
   22114:	4b1a      	ldr	r3, [pc, #104]	; (22180 <hif_send+0x370>)
   22116:	4798      	blx	r3
   22118:	4b24      	ldr	r3, [pc, #144]	; (221ac <hif_send+0x39c>)
   2211a:	0018      	movs	r0, r3
   2211c:	4b18      	ldr	r3, [pc, #96]	; (22180 <hif_send+0x370>)
   2211e:	4798      	blx	r3
   22120:	4b19      	ldr	r3, [pc, #100]	; (22188 <hif_send+0x378>)
   22122:	0018      	movs	r0, r3
   22124:	4b16      	ldr	r3, [pc, #88]	; (22180 <hif_send+0x370>)
   22126:	4798      	blx	r3
		goto ERR2;
   22128:	e015      	b.n	22156 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   2212a:	231f      	movs	r3, #31
   2212c:	18fc      	adds	r4, r7, r3
   2212e:	4b1c      	ldr	r3, [pc, #112]	; (221a0 <hif_send+0x390>)
   22130:	4798      	blx	r3
   22132:	0003      	movs	r3, r0
   22134:	7023      	strb	r3, [r4, #0]
	return ret;
   22136:	231f      	movs	r3, #31
   22138:	18fb      	adds	r3, r7, r3
   2213a:	781b      	ldrb	r3, [r3, #0]
   2213c:	b25b      	sxtb	r3, r3
   2213e:	e00e      	b.n	2215e <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   22140:	46c0      	nop			; (mov r8, r8)
   22142:	e006      	b.n	22152 <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   22144:	46c0      	nop			; (mov r8, r8)
   22146:	e004      	b.n	22152 <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   22148:	46c0      	nop			; (mov r8, r8)
   2214a:	e002      	b.n	22152 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   2214c:	46c0      	nop			; (mov r8, r8)
   2214e:	e000      	b.n	22152 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   22150:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   22152:	4b17      	ldr	r3, [pc, #92]	; (221b0 <hif_send+0x3a0>)
   22154:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   22156:	231f      	movs	r3, #31
   22158:	18fb      	adds	r3, r7, r3
   2215a:	781b      	ldrb	r3, [r3, #0]
   2215c:	b25b      	sxtb	r3, r3
}
   2215e:	0018      	movs	r0, r3
   22160:	46bd      	mov	sp, r7
   22162:	b009      	add	sp, #36	; 0x24
   22164:	bd90      	pop	{r4, r7, pc}
   22166:	46c0      	nop			; (mov r8, r8)
   22168:	00021cd9 	.word	0x00021cd9
   2216c:	0000108c 	.word	0x0000108c
   22170:	00023c65 	.word	0x00023c65
   22174:	00001078 	.word	0x00001078
   22178:	00023c41 	.word	0x00023c41
   2217c:	0003a1d4 	.word	0x0003a1d4
   22180:	0001ee19 	.word	0x0001ee19
   22184:	0003a1e0 	.word	0x0003a1e0
   22188:	0003a1f4 	.word	0x0003a1f4
   2218c:	000212d1 	.word	0x000212d1
   22190:	00150400 	.word	0x00150400
   22194:	000003e7 	.word	0x000003e7
   22198:	00023dad 	.word	0x00023dad
   2219c:	0000106c 	.word	0x0000106c
   221a0:	00021d71 	.word	0x00021d71
   221a4:	0003a4fc 	.word	0x0003a4fc
   221a8:	0003a1f8 	.word	0x0003a1f8
   221ac:	0003a20c 	.word	0x0003a20c
   221b0:	00021d49 	.word	0x00021d49

000221b4 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   221b4:	b590      	push	{r4, r7, lr}
   221b6:	b087      	sub	sp, #28
   221b8:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   221ba:	230f      	movs	r3, #15
   221bc:	18fb      	adds	r3, r7, r3
   221be:	2200      	movs	r2, #0
   221c0:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   221c2:	230f      	movs	r3, #15
   221c4:	18fc      	adds	r4, r7, r3
   221c6:	2308      	movs	r3, #8
   221c8:	18fb      	adds	r3, r7, r3
   221ca:	4adc      	ldr	r2, [pc, #880]	; (2253c <hif_isr+0x388>)
   221cc:	0019      	movs	r1, r3
   221ce:	0010      	movs	r0, r2
   221d0:	4bdb      	ldr	r3, [pc, #876]	; (22540 <hif_isr+0x38c>)
   221d2:	4798      	blx	r3
   221d4:	0003      	movs	r3, r0
   221d6:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   221d8:	230f      	movs	r3, #15
   221da:	18fb      	adds	r3, r7, r3
   221dc:	781b      	ldrb	r3, [r3, #0]
   221de:	b25b      	sxtb	r3, r3
   221e0:	2b00      	cmp	r3, #0
   221e2:	d000      	beq.n	221e6 <hif_isr+0x32>
   221e4:	e21e      	b.n	22624 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   221e6:	68bb      	ldr	r3, [r7, #8]
   221e8:	2201      	movs	r2, #1
   221ea:	4013      	ands	r3, r2
   221ec:	d100      	bne.n	221f0 <hif_isr+0x3c>
   221ee:	e204      	b.n	225fa <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   221f0:	2000      	movs	r0, #0
   221f2:	4bd4      	ldr	r3, [pc, #848]	; (22544 <hif_isr+0x390>)
   221f4:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   221f6:	68bb      	ldr	r3, [r7, #8]
   221f8:	2201      	movs	r2, #1
   221fa:	4393      	bics	r3, r2
   221fc:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   221fe:	68bb      	ldr	r3, [r7, #8]
   22200:	220f      	movs	r2, #15
   22202:	18bc      	adds	r4, r7, r2
   22204:	4acd      	ldr	r2, [pc, #820]	; (2253c <hif_isr+0x388>)
   22206:	0019      	movs	r1, r3
   22208:	0010      	movs	r0, r2
   2220a:	4bcf      	ldr	r3, [pc, #828]	; (22548 <hif_isr+0x394>)
   2220c:	4798      	blx	r3
   2220e:	0003      	movs	r3, r0
   22210:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   22212:	230f      	movs	r3, #15
   22214:	18fb      	adds	r3, r7, r3
   22216:	781b      	ldrb	r3, [r3, #0]
   22218:	b25b      	sxtb	r3, r3
   2221a:	2b00      	cmp	r3, #0
   2221c:	d000      	beq.n	22220 <hif_isr+0x6c>
   2221e:	e210      	b.n	22642 <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   22220:	4bca      	ldr	r3, [pc, #808]	; (2254c <hif_isr+0x398>)
   22222:	2201      	movs	r2, #1
   22224:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   22226:	68bb      	ldr	r3, [r7, #8]
   22228:	089b      	lsrs	r3, r3, #2
   2222a:	b29a      	uxth	r2, r3
   2222c:	230c      	movs	r3, #12
   2222e:	18fb      	adds	r3, r7, r3
   22230:	0512      	lsls	r2, r2, #20
   22232:	0d12      	lsrs	r2, r2, #20
   22234:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   22236:	230c      	movs	r3, #12
   22238:	18fb      	adds	r3, r7, r3
   2223a:	881b      	ldrh	r3, [r3, #0]
   2223c:	2b00      	cmp	r3, #0
   2223e:	d100      	bne.n	22242 <hif_isr+0x8e>
   22240:	e1c8      	b.n	225d4 <hif_isr+0x420>
				uint32 address = 0;
   22242:	2300      	movs	r3, #0
   22244:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   22246:	230f      	movs	r3, #15
   22248:	18fc      	adds	r4, r7, r3
   2224a:	003b      	movs	r3, r7
   2224c:	4ac0      	ldr	r2, [pc, #768]	; (22550 <hif_isr+0x39c>)
   2224e:	0019      	movs	r1, r3
   22250:	0010      	movs	r0, r2
   22252:	4bbb      	ldr	r3, [pc, #748]	; (22540 <hif_isr+0x38c>)
   22254:	4798      	blx	r3
   22256:	0003      	movs	r3, r0
   22258:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   2225a:	230f      	movs	r3, #15
   2225c:	18fb      	adds	r3, r7, r3
   2225e:	781b      	ldrb	r3, [r3, #0]
   22260:	b25b      	sxtb	r3, r3
   22262:	2b00      	cmp	r3, #0
   22264:	d012      	beq.n	2228c <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   22266:	23e4      	movs	r3, #228	; 0xe4
   22268:	005a      	lsls	r2, r3, #1
   2226a:	49ba      	ldr	r1, [pc, #744]	; (22554 <hif_isr+0x3a0>)
   2226c:	4bba      	ldr	r3, [pc, #744]	; (22558 <hif_isr+0x3a4>)
   2226e:	0018      	movs	r0, r3
   22270:	4bba      	ldr	r3, [pc, #744]	; (2255c <hif_isr+0x3a8>)
   22272:	4798      	blx	r3
   22274:	4bba      	ldr	r3, [pc, #744]	; (22560 <hif_isr+0x3ac>)
   22276:	0018      	movs	r0, r3
   22278:	4bb8      	ldr	r3, [pc, #736]	; (2255c <hif_isr+0x3a8>)
   2227a:	4798      	blx	r3
   2227c:	4bb9      	ldr	r3, [pc, #740]	; (22564 <hif_isr+0x3b0>)
   2227e:	0018      	movs	r0, r3
   22280:	4bb6      	ldr	r3, [pc, #728]	; (2255c <hif_isr+0x3a8>)
   22282:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   22284:	2001      	movs	r0, #1
   22286:	4baf      	ldr	r3, [pc, #700]	; (22544 <hif_isr+0x390>)
   22288:	4798      	blx	r3
					goto ERR1;
   2228a:	e1db      	b.n	22644 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   2228c:	683a      	ldr	r2, [r7, #0]
   2228e:	4baf      	ldr	r3, [pc, #700]	; (2254c <hif_isr+0x398>)
   22290:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   22292:	230c      	movs	r3, #12
   22294:	18fb      	adds	r3, r7, r3
   22296:	881a      	ldrh	r2, [r3, #0]
   22298:	4bac      	ldr	r3, [pc, #688]	; (2254c <hif_isr+0x398>)
   2229a:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   2229c:	683b      	ldr	r3, [r7, #0]
   2229e:	220f      	movs	r2, #15
   222a0:	18bc      	adds	r4, r7, r2
   222a2:	1d39      	adds	r1, r7, #4
   222a4:	2204      	movs	r2, #4
   222a6:	0018      	movs	r0, r3
   222a8:	4baf      	ldr	r3, [pc, #700]	; (22568 <hif_isr+0x3b4>)
   222aa:	4798      	blx	r3
   222ac:	0003      	movs	r3, r0
   222ae:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   222b0:	1d3b      	adds	r3, r7, #4
   222b2:	885b      	ldrh	r3, [r3, #2]
   222b4:	b29a      	uxth	r2, r3
   222b6:	1d3b      	adds	r3, r7, #4
   222b8:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   222ba:	230f      	movs	r3, #15
   222bc:	18fb      	adds	r3, r7, r3
   222be:	781b      	ldrb	r3, [r3, #0]
   222c0:	b25b      	sxtb	r3, r3
   222c2:	2b00      	cmp	r3, #0
   222c4:	d012      	beq.n	222ec <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   222c6:	23e9      	movs	r3, #233	; 0xe9
   222c8:	005a      	lsls	r2, r3, #1
   222ca:	49a2      	ldr	r1, [pc, #648]	; (22554 <hif_isr+0x3a0>)
   222cc:	4ba2      	ldr	r3, [pc, #648]	; (22558 <hif_isr+0x3a4>)
   222ce:	0018      	movs	r0, r3
   222d0:	4ba2      	ldr	r3, [pc, #648]	; (2255c <hif_isr+0x3a8>)
   222d2:	4798      	blx	r3
   222d4:	4ba5      	ldr	r3, [pc, #660]	; (2256c <hif_isr+0x3b8>)
   222d6:	0018      	movs	r0, r3
   222d8:	4ba0      	ldr	r3, [pc, #640]	; (2255c <hif_isr+0x3a8>)
   222da:	4798      	blx	r3
   222dc:	4ba1      	ldr	r3, [pc, #644]	; (22564 <hif_isr+0x3b0>)
   222de:	0018      	movs	r0, r3
   222e0:	4b9e      	ldr	r3, [pc, #632]	; (2255c <hif_isr+0x3a8>)
   222e2:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   222e4:	2001      	movs	r0, #1
   222e6:	4b97      	ldr	r3, [pc, #604]	; (22544 <hif_isr+0x390>)
   222e8:	4798      	blx	r3
					goto ERR1;
   222ea:	e1ab      	b.n	22644 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   222ec:	1d3b      	adds	r3, r7, #4
   222ee:	885b      	ldrh	r3, [r3, #2]
   222f0:	b29b      	uxth	r3, r3
   222f2:	220c      	movs	r2, #12
   222f4:	18ba      	adds	r2, r7, r2
   222f6:	8812      	ldrh	r2, [r2, #0]
   222f8:	429a      	cmp	r2, r3
   222fa:	d02f      	beq.n	2235c <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   222fc:	230c      	movs	r3, #12
   222fe:	18fb      	adds	r3, r7, r3
   22300:	881b      	ldrh	r3, [r3, #0]
   22302:	1d3a      	adds	r2, r7, #4
   22304:	8852      	ldrh	r2, [r2, #2]
   22306:	b292      	uxth	r2, r2
   22308:	1a9b      	subs	r3, r3, r2
   2230a:	2b04      	cmp	r3, #4
   2230c:	dd26      	ble.n	2235c <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   2230e:	23dc      	movs	r3, #220	; 0xdc
   22310:	33ff      	adds	r3, #255	; 0xff
   22312:	001a      	movs	r2, r3
   22314:	498f      	ldr	r1, [pc, #572]	; (22554 <hif_isr+0x3a0>)
   22316:	4b90      	ldr	r3, [pc, #576]	; (22558 <hif_isr+0x3a4>)
   22318:	0018      	movs	r0, r3
   2231a:	4b90      	ldr	r3, [pc, #576]	; (2255c <hif_isr+0x3a8>)
   2231c:	4798      	blx	r3
   2231e:	230c      	movs	r3, #12
   22320:	18fb      	adds	r3, r7, r3
   22322:	8819      	ldrh	r1, [r3, #0]
   22324:	1d3b      	adds	r3, r7, #4
   22326:	885b      	ldrh	r3, [r3, #2]
   22328:	b29b      	uxth	r3, r3
   2232a:	001a      	movs	r2, r3
   2232c:	1d3b      	adds	r3, r7, #4
   2232e:	781b      	ldrb	r3, [r3, #0]
   22330:	b2db      	uxtb	r3, r3
   22332:	001c      	movs	r4, r3
   22334:	1d3b      	adds	r3, r7, #4
   22336:	785b      	ldrb	r3, [r3, #1]
   22338:	b2db      	uxtb	r3, r3
   2233a:	488d      	ldr	r0, [pc, #564]	; (22570 <hif_isr+0x3bc>)
   2233c:	9300      	str	r3, [sp, #0]
   2233e:	0023      	movs	r3, r4
   22340:	4c86      	ldr	r4, [pc, #536]	; (2255c <hif_isr+0x3a8>)
   22342:	47a0      	blx	r4
   22344:	4b87      	ldr	r3, [pc, #540]	; (22564 <hif_isr+0x3b0>)
   22346:	0018      	movs	r0, r3
   22348:	4b84      	ldr	r3, [pc, #528]	; (2255c <hif_isr+0x3a8>)
   2234a:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   2234c:	2001      	movs	r0, #1
   2234e:	4b7d      	ldr	r3, [pc, #500]	; (22544 <hif_isr+0x390>)
   22350:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   22352:	230f      	movs	r3, #15
   22354:	18fb      	adds	r3, r7, r3
   22356:	22fa      	movs	r2, #250	; 0xfa
   22358:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   2235a:	e173      	b.n	22644 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   2235c:	1d3b      	adds	r3, r7, #4
   2235e:	781b      	ldrb	r3, [r3, #0]
   22360:	b2db      	uxtb	r3, r3
   22362:	2b01      	cmp	r3, #1
   22364:	d122      	bne.n	223ac <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   22366:	4b79      	ldr	r3, [pc, #484]	; (2254c <hif_isr+0x398>)
   22368:	691b      	ldr	r3, [r3, #16]
   2236a:	2b00      	cmp	r3, #0
   2236c:	d00d      	beq.n	2238a <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2236e:	4b77      	ldr	r3, [pc, #476]	; (2254c <hif_isr+0x398>)
   22370:	691b      	ldr	r3, [r3, #16]
   22372:	1d3a      	adds	r2, r7, #4
   22374:	7852      	ldrb	r2, [r2, #1]
   22376:	b2d0      	uxtb	r0, r2
   22378:	1d3a      	adds	r2, r7, #4
   2237a:	8852      	ldrh	r2, [r2, #2]
   2237c:	b292      	uxth	r2, r2
   2237e:	3a08      	subs	r2, #8
   22380:	b291      	uxth	r1, r2
   22382:	683a      	ldr	r2, [r7, #0]
   22384:	3208      	adds	r2, #8
   22386:	4798      	blx	r3
   22388:	e102      	b.n	22590 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   2238a:	23e8      	movs	r3, #232	; 0xe8
   2238c:	33ff      	adds	r3, #255	; 0xff
   2238e:	001a      	movs	r2, r3
   22390:	4970      	ldr	r1, [pc, #448]	; (22554 <hif_isr+0x3a0>)
   22392:	4b71      	ldr	r3, [pc, #452]	; (22558 <hif_isr+0x3a4>)
   22394:	0018      	movs	r0, r3
   22396:	4b71      	ldr	r3, [pc, #452]	; (2255c <hif_isr+0x3a8>)
   22398:	4798      	blx	r3
   2239a:	4b76      	ldr	r3, [pc, #472]	; (22574 <hif_isr+0x3c0>)
   2239c:	0018      	movs	r0, r3
   2239e:	4b6f      	ldr	r3, [pc, #444]	; (2255c <hif_isr+0x3a8>)
   223a0:	4798      	blx	r3
   223a2:	4b70      	ldr	r3, [pc, #448]	; (22564 <hif_isr+0x3b0>)
   223a4:	0018      	movs	r0, r3
   223a6:	4b6d      	ldr	r3, [pc, #436]	; (2255c <hif_isr+0x3a8>)
   223a8:	4798      	blx	r3
   223aa:	e0f1      	b.n	22590 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   223ac:	1d3b      	adds	r3, r7, #4
   223ae:	781b      	ldrb	r3, [r3, #0]
   223b0:	b2db      	uxtb	r3, r3
   223b2:	2b02      	cmp	r3, #2
   223b4:	d122      	bne.n	223fc <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   223b6:	4b65      	ldr	r3, [pc, #404]	; (2254c <hif_isr+0x398>)
   223b8:	695b      	ldr	r3, [r3, #20]
   223ba:	2b00      	cmp	r3, #0
   223bc:	d00d      	beq.n	223da <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   223be:	4b63      	ldr	r3, [pc, #396]	; (2254c <hif_isr+0x398>)
   223c0:	695b      	ldr	r3, [r3, #20]
   223c2:	1d3a      	adds	r2, r7, #4
   223c4:	7852      	ldrb	r2, [r2, #1]
   223c6:	b2d0      	uxtb	r0, r2
   223c8:	1d3a      	adds	r2, r7, #4
   223ca:	8852      	ldrh	r2, [r2, #2]
   223cc:	b292      	uxth	r2, r2
   223ce:	3a08      	subs	r2, #8
   223d0:	b291      	uxth	r1, r2
   223d2:	683a      	ldr	r2, [r7, #0]
   223d4:	3208      	adds	r2, #8
   223d6:	4798      	blx	r3
   223d8:	e0da      	b.n	22590 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   223da:	23f0      	movs	r3, #240	; 0xf0
   223dc:	33ff      	adds	r3, #255	; 0xff
   223de:	001a      	movs	r2, r3
   223e0:	495c      	ldr	r1, [pc, #368]	; (22554 <hif_isr+0x3a0>)
   223e2:	4b5d      	ldr	r3, [pc, #372]	; (22558 <hif_isr+0x3a4>)
   223e4:	0018      	movs	r0, r3
   223e6:	4b5d      	ldr	r3, [pc, #372]	; (2255c <hif_isr+0x3a8>)
   223e8:	4798      	blx	r3
   223ea:	4b63      	ldr	r3, [pc, #396]	; (22578 <hif_isr+0x3c4>)
   223ec:	0018      	movs	r0, r3
   223ee:	4b5b      	ldr	r3, [pc, #364]	; (2255c <hif_isr+0x3a8>)
   223f0:	4798      	blx	r3
   223f2:	4b5c      	ldr	r3, [pc, #368]	; (22564 <hif_isr+0x3b0>)
   223f4:	0018      	movs	r0, r3
   223f6:	4b59      	ldr	r3, [pc, #356]	; (2255c <hif_isr+0x3a8>)
   223f8:	4798      	blx	r3
   223fa:	e0c9      	b.n	22590 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   223fc:	1d3b      	adds	r3, r7, #4
   223fe:	781b      	ldrb	r3, [r3, #0]
   22400:	b2db      	uxtb	r3, r3
   22402:	2b04      	cmp	r3, #4
   22404:	d122      	bne.n	2244c <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   22406:	4b51      	ldr	r3, [pc, #324]	; (2254c <hif_isr+0x398>)
   22408:	699b      	ldr	r3, [r3, #24]
   2240a:	2b00      	cmp	r3, #0
   2240c:	d00d      	beq.n	2242a <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2240e:	4b4f      	ldr	r3, [pc, #316]	; (2254c <hif_isr+0x398>)
   22410:	699b      	ldr	r3, [r3, #24]
   22412:	1d3a      	adds	r2, r7, #4
   22414:	7852      	ldrb	r2, [r2, #1]
   22416:	b2d0      	uxtb	r0, r2
   22418:	1d3a      	adds	r2, r7, #4
   2241a:	8852      	ldrh	r2, [r2, #2]
   2241c:	b292      	uxth	r2, r2
   2241e:	3a08      	subs	r2, #8
   22420:	b291      	uxth	r1, r2
   22422:	683a      	ldr	r2, [r7, #0]
   22424:	3208      	adds	r2, #8
   22426:	4798      	blx	r3
   22428:	e0b2      	b.n	22590 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   2242a:	23f8      	movs	r3, #248	; 0xf8
   2242c:	33ff      	adds	r3, #255	; 0xff
   2242e:	001a      	movs	r2, r3
   22430:	4948      	ldr	r1, [pc, #288]	; (22554 <hif_isr+0x3a0>)
   22432:	4b49      	ldr	r3, [pc, #292]	; (22558 <hif_isr+0x3a4>)
   22434:	0018      	movs	r0, r3
   22436:	4b49      	ldr	r3, [pc, #292]	; (2255c <hif_isr+0x3a8>)
   22438:	4798      	blx	r3
   2243a:	4b50      	ldr	r3, [pc, #320]	; (2257c <hif_isr+0x3c8>)
   2243c:	0018      	movs	r0, r3
   2243e:	4b47      	ldr	r3, [pc, #284]	; (2255c <hif_isr+0x3a8>)
   22440:	4798      	blx	r3
   22442:	4b48      	ldr	r3, [pc, #288]	; (22564 <hif_isr+0x3b0>)
   22444:	0018      	movs	r0, r3
   22446:	4b45      	ldr	r3, [pc, #276]	; (2255c <hif_isr+0x3a8>)
   22448:	4798      	blx	r3
   2244a:	e0a1      	b.n	22590 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   2244c:	1d3b      	adds	r3, r7, #4
   2244e:	781b      	ldrb	r3, [r3, #0]
   22450:	b2db      	uxtb	r3, r3
   22452:	2b06      	cmp	r3, #6
   22454:	d121      	bne.n	2249a <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   22456:	4b3d      	ldr	r3, [pc, #244]	; (2254c <hif_isr+0x398>)
   22458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2245a:	2b00      	cmp	r3, #0
   2245c:	d00d      	beq.n	2247a <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2245e:	4b3b      	ldr	r3, [pc, #236]	; (2254c <hif_isr+0x398>)
   22460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22462:	1d3a      	adds	r2, r7, #4
   22464:	7852      	ldrb	r2, [r2, #1]
   22466:	b2d0      	uxtb	r0, r2
   22468:	1d3a      	adds	r2, r7, #4
   2246a:	8852      	ldrh	r2, [r2, #2]
   2246c:	b292      	uxth	r2, r2
   2246e:	3a08      	subs	r2, #8
   22470:	b291      	uxth	r1, r2
   22472:	683a      	ldr	r2, [r7, #0]
   22474:	3208      	adds	r2, #8
   22476:	4798      	blx	r3
   22478:	e08a      	b.n	22590 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   2247a:	2380      	movs	r3, #128	; 0x80
   2247c:	009a      	lsls	r2, r3, #2
   2247e:	4935      	ldr	r1, [pc, #212]	; (22554 <hif_isr+0x3a0>)
   22480:	4b35      	ldr	r3, [pc, #212]	; (22558 <hif_isr+0x3a4>)
   22482:	0018      	movs	r0, r3
   22484:	4b35      	ldr	r3, [pc, #212]	; (2255c <hif_isr+0x3a8>)
   22486:	4798      	blx	r3
   22488:	4b3d      	ldr	r3, [pc, #244]	; (22580 <hif_isr+0x3cc>)
   2248a:	0018      	movs	r0, r3
   2248c:	4b33      	ldr	r3, [pc, #204]	; (2255c <hif_isr+0x3a8>)
   2248e:	4798      	blx	r3
   22490:	4b34      	ldr	r3, [pc, #208]	; (22564 <hif_isr+0x3b0>)
   22492:	0018      	movs	r0, r3
   22494:	4b31      	ldr	r3, [pc, #196]	; (2255c <hif_isr+0x3a8>)
   22496:	4798      	blx	r3
   22498:	e07a      	b.n	22590 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   2249a:	1d3b      	adds	r3, r7, #4
   2249c:	781b      	ldrb	r3, [r3, #0]
   2249e:	b2db      	uxtb	r3, r3
   224a0:	2b07      	cmp	r3, #7
   224a2:	d120      	bne.n	224e6 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   224a4:	4b29      	ldr	r3, [pc, #164]	; (2254c <hif_isr+0x398>)
   224a6:	69db      	ldr	r3, [r3, #28]
   224a8:	2b00      	cmp	r3, #0
   224aa:	d00d      	beq.n	224c8 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   224ac:	4b27      	ldr	r3, [pc, #156]	; (2254c <hif_isr+0x398>)
   224ae:	69db      	ldr	r3, [r3, #28]
   224b0:	1d3a      	adds	r2, r7, #4
   224b2:	7852      	ldrb	r2, [r2, #1]
   224b4:	b2d0      	uxtb	r0, r2
   224b6:	1d3a      	adds	r2, r7, #4
   224b8:	8852      	ldrh	r2, [r2, #2]
   224ba:	b292      	uxth	r2, r2
   224bc:	3a08      	subs	r2, #8
   224be:	b291      	uxth	r1, r2
   224c0:	683a      	ldr	r2, [r7, #0]
   224c2:	3208      	adds	r2, #8
   224c4:	4798      	blx	r3
   224c6:	e063      	b.n	22590 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   224c8:	4a2e      	ldr	r2, [pc, #184]	; (22584 <hif_isr+0x3d0>)
   224ca:	4922      	ldr	r1, [pc, #136]	; (22554 <hif_isr+0x3a0>)
   224cc:	4b22      	ldr	r3, [pc, #136]	; (22558 <hif_isr+0x3a4>)
   224ce:	0018      	movs	r0, r3
   224d0:	4b22      	ldr	r3, [pc, #136]	; (2255c <hif_isr+0x3a8>)
   224d2:	4798      	blx	r3
   224d4:	4b2c      	ldr	r3, [pc, #176]	; (22588 <hif_isr+0x3d4>)
   224d6:	0018      	movs	r0, r3
   224d8:	4b20      	ldr	r3, [pc, #128]	; (2255c <hif_isr+0x3a8>)
   224da:	4798      	blx	r3
   224dc:	4b21      	ldr	r3, [pc, #132]	; (22564 <hif_isr+0x3b0>)
   224de:	0018      	movs	r0, r3
   224e0:	4b1e      	ldr	r3, [pc, #120]	; (2255c <hif_isr+0x3a8>)
   224e2:	4798      	blx	r3
   224e4:	e054      	b.n	22590 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   224e6:	1d3b      	adds	r3, r7, #4
   224e8:	781b      	ldrb	r3, [r3, #0]
   224ea:	b2db      	uxtb	r3, r3
   224ec:	2b05      	cmp	r3, #5
   224ee:	d111      	bne.n	22514 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   224f0:	4b16      	ldr	r3, [pc, #88]	; (2254c <hif_isr+0x398>)
   224f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   224f4:	2b00      	cmp	r3, #0
   224f6:	d04b      	beq.n	22590 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   224f8:	4b14      	ldr	r3, [pc, #80]	; (2254c <hif_isr+0x398>)
   224fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   224fc:	1d3a      	adds	r2, r7, #4
   224fe:	7852      	ldrb	r2, [r2, #1]
   22500:	b2d0      	uxtb	r0, r2
   22502:	1d3a      	adds	r2, r7, #4
   22504:	8852      	ldrh	r2, [r2, #2]
   22506:	b292      	uxth	r2, r2
   22508:	3a08      	subs	r2, #8
   2250a:	b291      	uxth	r1, r2
   2250c:	683a      	ldr	r2, [r7, #0]
   2250e:	3208      	adds	r2, #8
   22510:	4798      	blx	r3
   22512:	e03d      	b.n	22590 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   22514:	2384      	movs	r3, #132	; 0x84
   22516:	009a      	lsls	r2, r3, #2
   22518:	490e      	ldr	r1, [pc, #56]	; (22554 <hif_isr+0x3a0>)
   2251a:	4b0f      	ldr	r3, [pc, #60]	; (22558 <hif_isr+0x3a4>)
   2251c:	0018      	movs	r0, r3
   2251e:	4b0f      	ldr	r3, [pc, #60]	; (2255c <hif_isr+0x3a8>)
   22520:	4798      	blx	r3
   22522:	4b1a      	ldr	r3, [pc, #104]	; (2258c <hif_isr+0x3d8>)
   22524:	0018      	movs	r0, r3
   22526:	4b0d      	ldr	r3, [pc, #52]	; (2255c <hif_isr+0x3a8>)
   22528:	4798      	blx	r3
   2252a:	4b0e      	ldr	r3, [pc, #56]	; (22564 <hif_isr+0x3b0>)
   2252c:	0018      	movs	r0, r3
   2252e:	4b0b      	ldr	r3, [pc, #44]	; (2255c <hif_isr+0x3a8>)
   22530:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   22532:	230f      	movs	r3, #15
   22534:	18fb      	adds	r3, r7, r3
   22536:	22fa      	movs	r2, #250	; 0xfa
   22538:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   2253a:	e083      	b.n	22644 <hif_isr+0x490>
   2253c:	00001070 	.word	0x00001070
   22540:	00023c41 	.word	0x00023c41
   22544:	00021365 	.word	0x00021365
   22548:	00023c65 	.word	0x00023c65
   2254c:	20005b68 	.word	0x20005b68
   22550:	00001084 	.word	0x00001084
   22554:	0003a508 	.word	0x0003a508
   22558:	0003a1f8 	.word	0x0003a1f8
   2255c:	0001ee19 	.word	0x0001ee19
   22560:	0003a22c 	.word	0x0003a22c
   22564:	0003a1f4 	.word	0x0003a1f4
   22568:	00023cb5 	.word	0x00023cb5
   2256c:	0003a254 	.word	0x0003a254
   22570:	0003a26c 	.word	0x0003a26c
   22574:	0003a2ac 	.word	0x0003a2ac
   22578:	0003a2d0 	.word	0x0003a2d0
   2257c:	0003a2f4 	.word	0x0003a2f4
   22580:	0003a314 	.word	0x0003a314
   22584:	00000207 	.word	0x00000207
   22588:	0003a338 	.word	0x0003a338
   2258c:	0003a35c 	.word	0x0003a35c
				}
				if(gstrHifCxt.u8HifRXDone)
   22590:	4b30      	ldr	r3, [pc, #192]	; (22654 <hif_isr+0x4a0>)
   22592:	789b      	ldrb	r3, [r3, #2]
   22594:	b2db      	uxtb	r3, r3
   22596:	2b00      	cmp	r3, #0
   22598:	d054      	beq.n	22644 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   2259a:	4a2f      	ldr	r2, [pc, #188]	; (22658 <hif_isr+0x4a4>)
   2259c:	492f      	ldr	r1, [pc, #188]	; (2265c <hif_isr+0x4a8>)
   2259e:	4b30      	ldr	r3, [pc, #192]	; (22660 <hif_isr+0x4ac>)
   225a0:	0018      	movs	r0, r3
   225a2:	4b30      	ldr	r3, [pc, #192]	; (22664 <hif_isr+0x4b0>)
   225a4:	4798      	blx	r3
   225a6:	1d3b      	adds	r3, r7, #4
   225a8:	781b      	ldrb	r3, [r3, #0]
   225aa:	b2db      	uxtb	r3, r3
   225ac:	0019      	movs	r1, r3
   225ae:	1d3b      	adds	r3, r7, #4
   225b0:	785b      	ldrb	r3, [r3, #1]
   225b2:	b2db      	uxtb	r3, r3
   225b4:	001a      	movs	r2, r3
   225b6:	4b2c      	ldr	r3, [pc, #176]	; (22668 <hif_isr+0x4b4>)
   225b8:	0018      	movs	r0, r3
   225ba:	4b2a      	ldr	r3, [pc, #168]	; (22664 <hif_isr+0x4b0>)
   225bc:	4798      	blx	r3
   225be:	4b2b      	ldr	r3, [pc, #172]	; (2266c <hif_isr+0x4b8>)
   225c0:	0018      	movs	r0, r3
   225c2:	4b28      	ldr	r3, [pc, #160]	; (22664 <hif_isr+0x4b0>)
   225c4:	4798      	blx	r3
					ret = hif_set_rx_done();
   225c6:	230f      	movs	r3, #15
   225c8:	18fc      	adds	r4, r7, r3
   225ca:	4b29      	ldr	r3, [pc, #164]	; (22670 <hif_isr+0x4bc>)
   225cc:	4798      	blx	r3
   225ce:	0003      	movs	r3, r0
   225d0:	7023      	strb	r3, [r4, #0]
   225d2:	e037      	b.n	22644 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   225d4:	4a27      	ldr	r2, [pc, #156]	; (22674 <hif_isr+0x4c0>)
   225d6:	4921      	ldr	r1, [pc, #132]	; (2265c <hif_isr+0x4a8>)
   225d8:	4b21      	ldr	r3, [pc, #132]	; (22660 <hif_isr+0x4ac>)
   225da:	0018      	movs	r0, r3
   225dc:	4b21      	ldr	r3, [pc, #132]	; (22664 <hif_isr+0x4b0>)
   225de:	4798      	blx	r3
   225e0:	4b25      	ldr	r3, [pc, #148]	; (22678 <hif_isr+0x4c4>)
   225e2:	0018      	movs	r0, r3
   225e4:	4b1f      	ldr	r3, [pc, #124]	; (22664 <hif_isr+0x4b0>)
   225e6:	4798      	blx	r3
   225e8:	4b20      	ldr	r3, [pc, #128]	; (2266c <hif_isr+0x4b8>)
   225ea:	0018      	movs	r0, r3
   225ec:	4b1d      	ldr	r3, [pc, #116]	; (22664 <hif_isr+0x4b0>)
   225ee:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   225f0:	230f      	movs	r3, #15
   225f2:	18fb      	adds	r3, r7, r3
   225f4:	22fe      	movs	r2, #254	; 0xfe
   225f6:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   225f8:	e024      	b.n	22644 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   225fa:	4a20      	ldr	r2, [pc, #128]	; (2267c <hif_isr+0x4c8>)
   225fc:	4917      	ldr	r1, [pc, #92]	; (2265c <hif_isr+0x4a8>)
   225fe:	4b18      	ldr	r3, [pc, #96]	; (22660 <hif_isr+0x4ac>)
   22600:	0018      	movs	r0, r3
   22602:	4b18      	ldr	r3, [pc, #96]	; (22664 <hif_isr+0x4b0>)
   22604:	4798      	blx	r3
   22606:	68ba      	ldr	r2, [r7, #8]
   22608:	4b1d      	ldr	r3, [pc, #116]	; (22680 <hif_isr+0x4cc>)
   2260a:	0011      	movs	r1, r2
   2260c:	0018      	movs	r0, r3
   2260e:	4b15      	ldr	r3, [pc, #84]	; (22664 <hif_isr+0x4b0>)
   22610:	4798      	blx	r3
   22612:	4b16      	ldr	r3, [pc, #88]	; (2266c <hif_isr+0x4b8>)
   22614:	0018      	movs	r0, r3
   22616:	4b13      	ldr	r3, [pc, #76]	; (22664 <hif_isr+0x4b0>)
   22618:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2261a:	230f      	movs	r3, #15
   2261c:	18fb      	adds	r3, r7, r3
   2261e:	22f4      	movs	r2, #244	; 0xf4
   22620:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22622:	e00f      	b.n	22644 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   22624:	4a17      	ldr	r2, [pc, #92]	; (22684 <hif_isr+0x4d0>)
   22626:	490d      	ldr	r1, [pc, #52]	; (2265c <hif_isr+0x4a8>)
   22628:	4b0d      	ldr	r3, [pc, #52]	; (22660 <hif_isr+0x4ac>)
   2262a:	0018      	movs	r0, r3
   2262c:	4b0d      	ldr	r3, [pc, #52]	; (22664 <hif_isr+0x4b0>)
   2262e:	4798      	blx	r3
   22630:	4b15      	ldr	r3, [pc, #84]	; (22688 <hif_isr+0x4d4>)
   22632:	0018      	movs	r0, r3
   22634:	4b0b      	ldr	r3, [pc, #44]	; (22664 <hif_isr+0x4b0>)
   22636:	4798      	blx	r3
   22638:	4b0c      	ldr	r3, [pc, #48]	; (2266c <hif_isr+0x4b8>)
   2263a:	0018      	movs	r0, r3
   2263c:	4b09      	ldr	r3, [pc, #36]	; (22664 <hif_isr+0x4b0>)
   2263e:	4798      	blx	r3
		goto ERR1;
   22640:	e000      	b.n	22644 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   22642:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   22644:	230f      	movs	r3, #15
   22646:	18fb      	adds	r3, r7, r3
   22648:	781b      	ldrb	r3, [r3, #0]
   2264a:	b25b      	sxtb	r3, r3
}
   2264c:	0018      	movs	r0, r3
   2264e:	46bd      	mov	sp, r7
   22650:	b005      	add	sp, #20
   22652:	bd90      	pop	{r4, r7, pc}
   22654:	20005b68 	.word	0x20005b68
   22658:	00000216 	.word	0x00000216
   2265c:	0003a508 	.word	0x0003a508
   22660:	0003a1f8 	.word	0x0003a1f8
   22664:	0001ee19 	.word	0x0001ee19
   22668:	0003a374 	.word	0x0003a374
   2266c:	0003a1f4 	.word	0x0003a1f4
   22670:	00021c49 	.word	0x00021c49
   22674:	0000021d 	.word	0x0000021d
   22678:	0003a3a0 	.word	0x0003a3a0
   2267c:	00000225 	.word	0x00000225
   22680:	0003a3b4 	.word	0x0003a3b4
   22684:	0000022e 	.word	0x0000022e
   22688:	0003a3d0 	.word	0x0003a3d0

0002268c <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   2268c:	b590      	push	{r4, r7, lr}
   2268e:	b083      	sub	sp, #12
   22690:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   22692:	1dfb      	adds	r3, r7, #7
   22694:	2200      	movs	r2, #0
   22696:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   22698:	4b1c      	ldr	r3, [pc, #112]	; (2270c <hif_handle_isr+0x80>)
   2269a:	2200      	movs	r2, #0
   2269c:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   2269e:	e024      	b.n	226ea <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   226a0:	4b1a      	ldr	r3, [pc, #104]	; (2270c <hif_handle_isr+0x80>)
   226a2:	78db      	ldrb	r3, [r3, #3]
   226a4:	b2db      	uxtb	r3, r3
   226a6:	3b01      	subs	r3, #1
   226a8:	b2da      	uxtb	r2, r3
   226aa:	4b18      	ldr	r3, [pc, #96]	; (2270c <hif_handle_isr+0x80>)
   226ac:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   226ae:	1dfc      	adds	r4, r7, #7
   226b0:	4b17      	ldr	r3, [pc, #92]	; (22710 <hif_handle_isr+0x84>)
   226b2:	4798      	blx	r3
   226b4:	0003      	movs	r3, r0
   226b6:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   226b8:	1dfb      	adds	r3, r7, #7
   226ba:	781b      	ldrb	r3, [r3, #0]
   226bc:	b25b      	sxtb	r3, r3
   226be:	2b00      	cmp	r3, #0
   226c0:	d100      	bne.n	226c4 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   226c2:	e012      	b.n	226ea <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   226c4:	4a13      	ldr	r2, [pc, #76]	; (22714 <hif_handle_isr+0x88>)
   226c6:	4914      	ldr	r1, [pc, #80]	; (22718 <hif_handle_isr+0x8c>)
   226c8:	4b14      	ldr	r3, [pc, #80]	; (2271c <hif_handle_isr+0x90>)
   226ca:	0018      	movs	r0, r3
   226cc:	4b14      	ldr	r3, [pc, #80]	; (22720 <hif_handle_isr+0x94>)
   226ce:	4798      	blx	r3
   226d0:	1dfb      	adds	r3, r7, #7
   226d2:	2200      	movs	r2, #0
   226d4:	569a      	ldrsb	r2, [r3, r2]
   226d6:	4b13      	ldr	r3, [pc, #76]	; (22724 <hif_handle_isr+0x98>)
   226d8:	0011      	movs	r1, r2
   226da:	0018      	movs	r0, r3
   226dc:	4b10      	ldr	r3, [pc, #64]	; (22720 <hif_handle_isr+0x94>)
   226de:	4798      	blx	r3
   226e0:	4b11      	ldr	r3, [pc, #68]	; (22728 <hif_handle_isr+0x9c>)
   226e2:	0018      	movs	r0, r3
   226e4:	4b0e      	ldr	r3, [pc, #56]	; (22720 <hif_handle_isr+0x94>)
   226e6:	4798      	blx	r3
			ret = hif_isr();
   226e8:	e7e1      	b.n	226ae <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   226ea:	4b08      	ldr	r3, [pc, #32]	; (2270c <hif_handle_isr+0x80>)
   226ec:	78db      	ldrb	r3, [r3, #3]
   226ee:	b2db      	uxtb	r3, r3
   226f0:	2b00      	cmp	r3, #0
   226f2:	d004      	beq.n	226fe <hif_handle_isr+0x72>
   226f4:	4b05      	ldr	r3, [pc, #20]	; (2270c <hif_handle_isr+0x80>)
   226f6:	791b      	ldrb	r3, [r3, #4]
   226f8:	b2db      	uxtb	r3, r3
   226fa:	2b00      	cmp	r3, #0
   226fc:	d0d0      	beq.n	226a0 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   226fe:	1dfb      	adds	r3, r7, #7
   22700:	781b      	ldrb	r3, [r3, #0]
   22702:	b25b      	sxtb	r3, r3
}
   22704:	0018      	movs	r0, r3
   22706:	46bd      	mov	sp, r7
   22708:	b003      	add	sp, #12
   2270a:	bd90      	pop	{r4, r7, pc}
   2270c:	20005b68 	.word	0x20005b68
   22710:	000221b5 	.word	0x000221b5
   22714:	00000257 	.word	0x00000257
   22718:	0003a510 	.word	0x0003a510
   2271c:	0003a1f8 	.word	0x0003a1f8
   22720:	0001ee19 	.word	0x0001ee19
   22724:	0003a3f4 	.word	0x0003a3f4
   22728:	0003a1f4 	.word	0x0003a1f4

0002272c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   2272c:	b590      	push	{r4, r7, lr}
   2272e:	b087      	sub	sp, #28
   22730:	af00      	add	r7, sp, #0
   22732:	60f8      	str	r0, [r7, #12]
   22734:	60b9      	str	r1, [r7, #8]
   22736:	0019      	movs	r1, r3
   22738:	1dbb      	adds	r3, r7, #6
   2273a:	801a      	strh	r2, [r3, #0]
   2273c:	1d7b      	adds	r3, r7, #5
   2273e:	1c0a      	adds	r2, r1, #0
   22740:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   22742:	2317      	movs	r3, #23
   22744:	18fb      	adds	r3, r7, r3
   22746:	2200      	movs	r2, #0
   22748:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   2274a:	68fb      	ldr	r3, [r7, #12]
   2274c:	2b00      	cmp	r3, #0
   2274e:	d006      	beq.n	2275e <hif_receive+0x32>
   22750:	68bb      	ldr	r3, [r7, #8]
   22752:	2b00      	cmp	r3, #0
   22754:	d003      	beq.n	2275e <hif_receive+0x32>
   22756:	1dbb      	adds	r3, r7, #6
   22758:	881b      	ldrh	r3, [r3, #0]
   2275a:	2b00      	cmp	r3, #0
   2275c:	d11e      	bne.n	2279c <hif_receive+0x70>
	{
		if(isDone)
   2275e:	1d7b      	adds	r3, r7, #5
   22760:	781b      	ldrb	r3, [r3, #0]
   22762:	2b00      	cmp	r3, #0
   22764:	d006      	beq.n	22774 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   22766:	2317      	movs	r3, #23
   22768:	18fc      	adds	r4, r7, r3
   2276a:	4b45      	ldr	r3, [pc, #276]	; (22880 <hif_receive+0x154>)
   2276c:	4798      	blx	r3
   2276e:	0003      	movs	r3, r0
   22770:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   22772:	e07c      	b.n	2286e <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   22774:	2317      	movs	r3, #23
   22776:	18fb      	adds	r3, r7, r3
   22778:	22f4      	movs	r2, #244	; 0xf4
   2277a:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   2277c:	239e      	movs	r3, #158	; 0x9e
   2277e:	009a      	lsls	r2, r3, #2
   22780:	4940      	ldr	r1, [pc, #256]	; (22884 <hif_receive+0x158>)
   22782:	4b41      	ldr	r3, [pc, #260]	; (22888 <hif_receive+0x15c>)
   22784:	0018      	movs	r0, r3
   22786:	4b41      	ldr	r3, [pc, #260]	; (2288c <hif_receive+0x160>)
   22788:	4798      	blx	r3
   2278a:	4b41      	ldr	r3, [pc, #260]	; (22890 <hif_receive+0x164>)
   2278c:	0018      	movs	r0, r3
   2278e:	4b3f      	ldr	r3, [pc, #252]	; (2288c <hif_receive+0x160>)
   22790:	4798      	blx	r3
   22792:	4b40      	ldr	r3, [pc, #256]	; (22894 <hif_receive+0x168>)
   22794:	0018      	movs	r0, r3
   22796:	4b3d      	ldr	r3, [pc, #244]	; (2288c <hif_receive+0x160>)
   22798:	4798      	blx	r3
		goto ERR1;
   2279a:	e068      	b.n	2286e <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   2279c:	1dbb      	adds	r3, r7, #6
   2279e:	881a      	ldrh	r2, [r3, #0]
   227a0:	4b3d      	ldr	r3, [pc, #244]	; (22898 <hif_receive+0x16c>)
   227a2:	68db      	ldr	r3, [r3, #12]
   227a4:	429a      	cmp	r2, r3
   227a6:	d917      	bls.n	227d8 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   227a8:	2317      	movs	r3, #23
   227aa:	18fb      	adds	r3, r7, r3
   227ac:	22f4      	movs	r2, #244	; 0xf4
   227ae:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   227b0:	23a0      	movs	r3, #160	; 0xa0
   227b2:	009a      	lsls	r2, r3, #2
   227b4:	4933      	ldr	r1, [pc, #204]	; (22884 <hif_receive+0x158>)
   227b6:	4b34      	ldr	r3, [pc, #208]	; (22888 <hif_receive+0x15c>)
   227b8:	0018      	movs	r0, r3
   227ba:	4b34      	ldr	r3, [pc, #208]	; (2288c <hif_receive+0x160>)
   227bc:	4798      	blx	r3
   227be:	1dbb      	adds	r3, r7, #6
   227c0:	8819      	ldrh	r1, [r3, #0]
   227c2:	4b35      	ldr	r3, [pc, #212]	; (22898 <hif_receive+0x16c>)
   227c4:	68da      	ldr	r2, [r3, #12]
   227c6:	4b35      	ldr	r3, [pc, #212]	; (2289c <hif_receive+0x170>)
   227c8:	0018      	movs	r0, r3
   227ca:	4b30      	ldr	r3, [pc, #192]	; (2288c <hif_receive+0x160>)
   227cc:	4798      	blx	r3
   227ce:	4b31      	ldr	r3, [pc, #196]	; (22894 <hif_receive+0x168>)
   227d0:	0018      	movs	r0, r3
   227d2:	4b2e      	ldr	r3, [pc, #184]	; (2288c <hif_receive+0x160>)
   227d4:	4798      	blx	r3
		goto ERR1;
   227d6:	e04a      	b.n	2286e <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   227d8:	4b2f      	ldr	r3, [pc, #188]	; (22898 <hif_receive+0x16c>)
   227da:	689a      	ldr	r2, [r3, #8]
   227dc:	68fb      	ldr	r3, [r7, #12]
   227de:	429a      	cmp	r2, r3
   227e0:	d80a      	bhi.n	227f8 <hif_receive+0xcc>
   227e2:	1dbb      	adds	r3, r7, #6
   227e4:	881a      	ldrh	r2, [r3, #0]
   227e6:	68fb      	ldr	r3, [r7, #12]
   227e8:	18d2      	adds	r2, r2, r3
   227ea:	4b2b      	ldr	r3, [pc, #172]	; (22898 <hif_receive+0x16c>)
   227ec:	6899      	ldr	r1, [r3, #8]
   227ee:	4b2a      	ldr	r3, [pc, #168]	; (22898 <hif_receive+0x16c>)
   227f0:	68db      	ldr	r3, [r3, #12]
   227f2:	18cb      	adds	r3, r1, r3
   227f4:	429a      	cmp	r2, r3
   227f6:	d912      	bls.n	2281e <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   227f8:	2317      	movs	r3, #23
   227fa:	18fb      	adds	r3, r7, r3
   227fc:	22f4      	movs	r2, #244	; 0xf4
   227fe:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   22800:	4a27      	ldr	r2, [pc, #156]	; (228a0 <hif_receive+0x174>)
   22802:	4920      	ldr	r1, [pc, #128]	; (22884 <hif_receive+0x158>)
   22804:	4b20      	ldr	r3, [pc, #128]	; (22888 <hif_receive+0x15c>)
   22806:	0018      	movs	r0, r3
   22808:	4b20      	ldr	r3, [pc, #128]	; (2288c <hif_receive+0x160>)
   2280a:	4798      	blx	r3
   2280c:	4b25      	ldr	r3, [pc, #148]	; (228a4 <hif_receive+0x178>)
   2280e:	0018      	movs	r0, r3
   22810:	4b1e      	ldr	r3, [pc, #120]	; (2288c <hif_receive+0x160>)
   22812:	4798      	blx	r3
   22814:	4b1f      	ldr	r3, [pc, #124]	; (22894 <hif_receive+0x168>)
   22816:	0018      	movs	r0, r3
   22818:	4b1c      	ldr	r3, [pc, #112]	; (2288c <hif_receive+0x160>)
   2281a:	4798      	blx	r3
		goto ERR1;
   2281c:	e027      	b.n	2286e <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   2281e:	1dbb      	adds	r3, r7, #6
   22820:	881a      	ldrh	r2, [r3, #0]
   22822:	2317      	movs	r3, #23
   22824:	18fc      	adds	r4, r7, r3
   22826:	68b9      	ldr	r1, [r7, #8]
   22828:	68fb      	ldr	r3, [r7, #12]
   2282a:	0018      	movs	r0, r3
   2282c:	4b1e      	ldr	r3, [pc, #120]	; (228a8 <hif_receive+0x17c>)
   2282e:	4798      	blx	r3
   22830:	0003      	movs	r3, r0
   22832:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   22834:	2317      	movs	r3, #23
   22836:	18fb      	adds	r3, r7, r3
   22838:	781b      	ldrb	r3, [r3, #0]
   2283a:	b25b      	sxtb	r3, r3
   2283c:	2b00      	cmp	r3, #0
   2283e:	d115      	bne.n	2286c <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   22840:	4b15      	ldr	r3, [pc, #84]	; (22898 <hif_receive+0x16c>)
   22842:	689a      	ldr	r2, [r3, #8]
   22844:	4b14      	ldr	r3, [pc, #80]	; (22898 <hif_receive+0x16c>)
   22846:	68db      	ldr	r3, [r3, #12]
   22848:	18d2      	adds	r2, r2, r3
   2284a:	1dbb      	adds	r3, r7, #6
   2284c:	8819      	ldrh	r1, [r3, #0]
   2284e:	68fb      	ldr	r3, [r7, #12]
   22850:	18cb      	adds	r3, r1, r3
   22852:	429a      	cmp	r2, r3
   22854:	d003      	beq.n	2285e <hif_receive+0x132>
   22856:	1d7b      	adds	r3, r7, #5
   22858:	781b      	ldrb	r3, [r3, #0]
   2285a:	2b00      	cmp	r3, #0
   2285c:	d007      	beq.n	2286e <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   2285e:	2317      	movs	r3, #23
   22860:	18fc      	adds	r4, r7, r3
   22862:	4b07      	ldr	r3, [pc, #28]	; (22880 <hif_receive+0x154>)
   22864:	4798      	blx	r3
   22866:	0003      	movs	r3, r0
   22868:	7023      	strb	r3, [r4, #0]
   2286a:	e000      	b.n	2286e <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   2286c:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   2286e:	2317      	movs	r3, #23
   22870:	18fb      	adds	r3, r7, r3
   22872:	781b      	ldrb	r3, [r3, #0]
   22874:	b25b      	sxtb	r3, r3
}
   22876:	0018      	movs	r0, r3
   22878:	46bd      	mov	sp, r7
   2287a:	b007      	add	sp, #28
   2287c:	bd90      	pop	{r4, r7, pc}
   2287e:	46c0      	nop			; (mov r8, r8)
   22880:	00021c49 	.word	0x00021c49
   22884:	0003a520 	.word	0x0003a520
   22888:	0003a1f8 	.word	0x0003a1f8
   2288c:	0001ee19 	.word	0x0001ee19
   22890:	0003a424 	.word	0x0003a424
   22894:	0003a1f4 	.word	0x0003a1f4
   22898:	20005b68 	.word	0x20005b68
   2289c:	0003a444 	.word	0x0003a444
   228a0:	00000286 	.word	0x00000286
   228a4:	0003a48c 	.word	0x0003a48c
   228a8:	00023cb5 	.word	0x00023cb5

000228ac <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   228ac:	b580      	push	{r7, lr}
   228ae:	b084      	sub	sp, #16
   228b0:	af00      	add	r7, sp, #0
   228b2:	0002      	movs	r2, r0
   228b4:	6039      	str	r1, [r7, #0]
   228b6:	1dfb      	adds	r3, r7, #7
   228b8:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   228ba:	230f      	movs	r3, #15
   228bc:	18fb      	adds	r3, r7, r3
   228be:	2200      	movs	r2, #0
   228c0:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   228c2:	1dfb      	adds	r3, r7, #7
   228c4:	781b      	ldrb	r3, [r3, #0]
   228c6:	2b07      	cmp	r3, #7
   228c8:	d820      	bhi.n	2290c <hif_register_cb+0x60>
   228ca:	009a      	lsls	r2, r3, #2
   228cc:	4b1e      	ldr	r3, [pc, #120]	; (22948 <hif_register_cb+0x9c>)
   228ce:	18d3      	adds	r3, r2, r3
   228d0:	681b      	ldr	r3, [r3, #0]
   228d2:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   228d4:	4b1d      	ldr	r3, [pc, #116]	; (2294c <hif_register_cb+0xa0>)
   228d6:	683a      	ldr	r2, [r7, #0]
   228d8:	615a      	str	r2, [r3, #20]
			break;
   228da:	e02d      	b.n	22938 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   228dc:	4b1b      	ldr	r3, [pc, #108]	; (2294c <hif_register_cb+0xa0>)
   228de:	683a      	ldr	r2, [r7, #0]
   228e0:	611a      	str	r2, [r3, #16]
			break;
   228e2:	e029      	b.n	22938 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   228e4:	4b19      	ldr	r3, [pc, #100]	; (2294c <hif_register_cb+0xa0>)
   228e6:	683a      	ldr	r2, [r7, #0]
   228e8:	619a      	str	r2, [r3, #24]
			break;
   228ea:	e025      	b.n	22938 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   228ec:	4b17      	ldr	r3, [pc, #92]	; (2294c <hif_register_cb+0xa0>)
   228ee:	683a      	ldr	r2, [r7, #0]
   228f0:	621a      	str	r2, [r3, #32]
			break;
   228f2:	e021      	b.n	22938 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   228f4:	4b15      	ldr	r3, [pc, #84]	; (2294c <hif_register_cb+0xa0>)
   228f6:	683a      	ldr	r2, [r7, #0]
   228f8:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   228fa:	e01d      	b.n	22938 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   228fc:	4b13      	ldr	r3, [pc, #76]	; (2294c <hif_register_cb+0xa0>)
   228fe:	683a      	ldr	r2, [r7, #0]
   22900:	61da      	str	r2, [r3, #28]
			break;
   22902:	e019      	b.n	22938 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   22904:	4b11      	ldr	r3, [pc, #68]	; (2294c <hif_register_cb+0xa0>)
   22906:	683a      	ldr	r2, [r7, #0]
   22908:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   2290a:	e015      	b.n	22938 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   2290c:	4a10      	ldr	r2, [pc, #64]	; (22950 <hif_register_cb+0xa4>)
   2290e:	4911      	ldr	r1, [pc, #68]	; (22954 <hif_register_cb+0xa8>)
   22910:	4b11      	ldr	r3, [pc, #68]	; (22958 <hif_register_cb+0xac>)
   22912:	0018      	movs	r0, r3
   22914:	4b11      	ldr	r3, [pc, #68]	; (2295c <hif_register_cb+0xb0>)
   22916:	4798      	blx	r3
   22918:	1dfb      	adds	r3, r7, #7
   2291a:	781a      	ldrb	r2, [r3, #0]
   2291c:	4b10      	ldr	r3, [pc, #64]	; (22960 <hif_register_cb+0xb4>)
   2291e:	0011      	movs	r1, r2
   22920:	0018      	movs	r0, r3
   22922:	4b0e      	ldr	r3, [pc, #56]	; (2295c <hif_register_cb+0xb0>)
   22924:	4798      	blx	r3
   22926:	4b0f      	ldr	r3, [pc, #60]	; (22964 <hif_register_cb+0xb8>)
   22928:	0018      	movs	r0, r3
   2292a:	4b0c      	ldr	r3, [pc, #48]	; (2295c <hif_register_cb+0xb0>)
   2292c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2292e:	230f      	movs	r3, #15
   22930:	18fb      	adds	r3, r7, r3
   22932:	22f4      	movs	r2, #244	; 0xf4
   22934:	701a      	strb	r2, [r3, #0]
			break;
   22936:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   22938:	230f      	movs	r3, #15
   2293a:	18fb      	adds	r3, r7, r3
   2293c:	781b      	ldrb	r3, [r3, #0]
   2293e:	b25b      	sxtb	r3, r3
}
   22940:	0018      	movs	r0, r3
   22942:	46bd      	mov	sp, r7
   22944:	b004      	add	sp, #16
   22946:	bd80      	pop	{r7, pc}
   22948:	0003a4dc 	.word	0x0003a4dc
   2294c:	20005b68 	.word	0x20005b68
   22950:	000002be 	.word	0x000002be
   22954:	0003a52c 	.word	0x0003a52c
   22958:	0003a1f8 	.word	0x0003a1f8
   2295c:	0001ee19 	.word	0x0001ee19
   22960:	0003a4d0 	.word	0x0003a4d0
   22964:	0003a1f4 	.word	0x0003a1f4

00022968 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   22968:	b590      	push	{r4, r7, lr}
   2296a:	b0af      	sub	sp, #188	; 0xbc
   2296c:	af02      	add	r7, sp, #8
   2296e:	603a      	str	r2, [r7, #0]
   22970:	1dfb      	adds	r3, r7, #7
   22972:	1c02      	adds	r2, r0, #0
   22974:	701a      	strb	r2, [r3, #0]
   22976:	1d3b      	adds	r3, r7, #4
   22978:	1c0a      	adds	r2, r1, #0
   2297a:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   2297c:	1dfb      	adds	r3, r7, #7
   2297e:	781b      	ldrb	r3, [r3, #0]
   22980:	2b2c      	cmp	r3, #44	; 0x2c
   22982:	d116      	bne.n	229b2 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   22984:	23a4      	movs	r3, #164	; 0xa4
   22986:	18f9      	adds	r1, r7, r3
   22988:	6838      	ldr	r0, [r7, #0]
   2298a:	2300      	movs	r3, #0
   2298c:	2204      	movs	r2, #4
   2298e:	4cca      	ldr	r4, [pc, #808]	; (22cb8 <m2m_wifi_cb+0x350>)
   22990:	47a0      	blx	r4
   22992:	1e03      	subs	r3, r0, #0
   22994:	d000      	beq.n	22998 <m2m_wifi_cb+0x30>
   22996:	e1b4      	b.n	22d02 <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   22998:	4bc8      	ldr	r3, [pc, #800]	; (22cbc <m2m_wifi_cb+0x354>)
   2299a:	681b      	ldr	r3, [r3, #0]
   2299c:	2b00      	cmp	r3, #0
   2299e:	d100      	bne.n	229a2 <m2m_wifi_cb+0x3a>
   229a0:	e1af      	b.n	22d02 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   229a2:	4bc6      	ldr	r3, [pc, #792]	; (22cbc <m2m_wifi_cb+0x354>)
   229a4:	681b      	ldr	r3, [r3, #0]
   229a6:	22a4      	movs	r2, #164	; 0xa4
   229a8:	18ba      	adds	r2, r7, r2
   229aa:	0011      	movs	r1, r2
   229ac:	202c      	movs	r0, #44	; 0x2c
   229ae:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   229b0:	e1a7      	b.n	22d02 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   229b2:	1dfb      	adds	r3, r7, #7
   229b4:	781b      	ldrb	r3, [r3, #0]
   229b6:	2b1b      	cmp	r3, #27
   229b8:	d116      	bne.n	229e8 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   229ba:	239c      	movs	r3, #156	; 0x9c
   229bc:	18f9      	adds	r1, r7, r3
   229be:	6838      	ldr	r0, [r7, #0]
   229c0:	2300      	movs	r3, #0
   229c2:	2208      	movs	r2, #8
   229c4:	4cbc      	ldr	r4, [pc, #752]	; (22cb8 <m2m_wifi_cb+0x350>)
   229c6:	47a0      	blx	r4
   229c8:	1e03      	subs	r3, r0, #0
   229ca:	d000      	beq.n	229ce <m2m_wifi_cb+0x66>
   229cc:	e199      	b.n	22d02 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   229ce:	4bbb      	ldr	r3, [pc, #748]	; (22cbc <m2m_wifi_cb+0x354>)
   229d0:	681b      	ldr	r3, [r3, #0]
   229d2:	2b00      	cmp	r3, #0
   229d4:	d100      	bne.n	229d8 <m2m_wifi_cb+0x70>
   229d6:	e194      	b.n	22d02 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   229d8:	4bb8      	ldr	r3, [pc, #736]	; (22cbc <m2m_wifi_cb+0x354>)
   229da:	681b      	ldr	r3, [r3, #0]
   229dc:	229c      	movs	r2, #156	; 0x9c
   229de:	18ba      	adds	r2, r7, r2
   229e0:	0011      	movs	r1, r2
   229e2:	201b      	movs	r0, #27
   229e4:	4798      	blx	r3
}
   229e6:	e18c      	b.n	22d02 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   229e8:	1dfb      	adds	r3, r7, #7
   229ea:	781b      	ldrb	r3, [r3, #0]
   229ec:	2b06      	cmp	r3, #6
   229ee:	d116      	bne.n	22a1e <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   229f0:	230c      	movs	r3, #12
   229f2:	18f9      	adds	r1, r7, r3
   229f4:	6838      	ldr	r0, [r7, #0]
   229f6:	2301      	movs	r3, #1
   229f8:	2230      	movs	r2, #48	; 0x30
   229fa:	4caf      	ldr	r4, [pc, #700]	; (22cb8 <m2m_wifi_cb+0x350>)
   229fc:	47a0      	blx	r4
   229fe:	1e03      	subs	r3, r0, #0
   22a00:	d000      	beq.n	22a04 <m2m_wifi_cb+0x9c>
   22a02:	e17e      	b.n	22d02 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   22a04:	4bad      	ldr	r3, [pc, #692]	; (22cbc <m2m_wifi_cb+0x354>)
   22a06:	681b      	ldr	r3, [r3, #0]
   22a08:	2b00      	cmp	r3, #0
   22a0a:	d100      	bne.n	22a0e <m2m_wifi_cb+0xa6>
   22a0c:	e179      	b.n	22d02 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   22a0e:	4bab      	ldr	r3, [pc, #684]	; (22cbc <m2m_wifi_cb+0x354>)
   22a10:	681b      	ldr	r3, [r3, #0]
   22a12:	220c      	movs	r2, #12
   22a14:	18ba      	adds	r2, r7, r2
   22a16:	0011      	movs	r1, r2
   22a18:	2006      	movs	r0, #6
   22a1a:	4798      	blx	r3
}
   22a1c:	e171      	b.n	22d02 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   22a1e:	1dfb      	adds	r3, r7, #7
   22a20:	781b      	ldrb	r3, [r3, #0]
   22a22:	2b0e      	cmp	r3, #14
   22a24:	d100      	bne.n	22a28 <m2m_wifi_cb+0xc0>
   22a26:	e16c      	b.n	22d02 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   22a28:	1dfb      	adds	r3, r7, #7
   22a2a:	781b      	ldrb	r3, [r3, #0]
   22a2c:	2b32      	cmp	r3, #50	; 0x32
   22a2e:	d116      	bne.n	22a5e <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   22a30:	2384      	movs	r3, #132	; 0x84
   22a32:	18f9      	adds	r1, r7, r3
   22a34:	6838      	ldr	r0, [r7, #0]
   22a36:	2300      	movs	r3, #0
   22a38:	2218      	movs	r2, #24
   22a3a:	4c9f      	ldr	r4, [pc, #636]	; (22cb8 <m2m_wifi_cb+0x350>)
   22a3c:	47a0      	blx	r4
   22a3e:	1e03      	subs	r3, r0, #0
   22a40:	d000      	beq.n	22a44 <m2m_wifi_cb+0xdc>
   22a42:	e15e      	b.n	22d02 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22a44:	4b9d      	ldr	r3, [pc, #628]	; (22cbc <m2m_wifi_cb+0x354>)
   22a46:	681b      	ldr	r3, [r3, #0]
   22a48:	2b00      	cmp	r3, #0
   22a4a:	d100      	bne.n	22a4e <m2m_wifi_cb+0xe6>
   22a4c:	e159      	b.n	22d02 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   22a4e:	4b9b      	ldr	r3, [pc, #620]	; (22cbc <m2m_wifi_cb+0x354>)
   22a50:	681b      	ldr	r3, [r3, #0]
   22a52:	2284      	movs	r2, #132	; 0x84
   22a54:	18ba      	adds	r2, r7, r2
   22a56:	0011      	movs	r1, r2
   22a58:	2032      	movs	r0, #50	; 0x32
   22a5a:	4798      	blx	r3
}
   22a5c:	e151      	b.n	22d02 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   22a5e:	1dfb      	adds	r3, r7, #7
   22a60:	781b      	ldrb	r3, [r3, #0]
   22a62:	2b2f      	cmp	r3, #47	; 0x2f
   22a64:	d11d      	bne.n	22aa2 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   22a66:	230c      	movs	r3, #12
   22a68:	18fb      	adds	r3, r7, r3
   22a6a:	2264      	movs	r2, #100	; 0x64
   22a6c:	2100      	movs	r1, #0
   22a6e:	0018      	movs	r0, r3
   22a70:	4b93      	ldr	r3, [pc, #588]	; (22cc0 <m2m_wifi_cb+0x358>)
   22a72:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   22a74:	230c      	movs	r3, #12
   22a76:	18f9      	adds	r1, r7, r3
   22a78:	6838      	ldr	r0, [r7, #0]
   22a7a:	2300      	movs	r3, #0
   22a7c:	2264      	movs	r2, #100	; 0x64
   22a7e:	4c8e      	ldr	r4, [pc, #568]	; (22cb8 <m2m_wifi_cb+0x350>)
   22a80:	47a0      	blx	r4
   22a82:	1e03      	subs	r3, r0, #0
   22a84:	d000      	beq.n	22a88 <m2m_wifi_cb+0x120>
   22a86:	e13c      	b.n	22d02 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22a88:	4b8c      	ldr	r3, [pc, #560]	; (22cbc <m2m_wifi_cb+0x354>)
   22a8a:	681b      	ldr	r3, [r3, #0]
   22a8c:	2b00      	cmp	r3, #0
   22a8e:	d100      	bne.n	22a92 <m2m_wifi_cb+0x12a>
   22a90:	e137      	b.n	22d02 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   22a92:	4b8a      	ldr	r3, [pc, #552]	; (22cbc <m2m_wifi_cb+0x354>)
   22a94:	681b      	ldr	r3, [r3, #0]
   22a96:	220c      	movs	r2, #12
   22a98:	18ba      	adds	r2, r7, r2
   22a9a:	0011      	movs	r1, r2
   22a9c:	202f      	movs	r0, #47	; 0x2f
   22a9e:	4798      	blx	r3
}
   22aa0:	e12f      	b.n	22d02 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   22aa2:	1dfb      	adds	r3, r7, #7
   22aa4:	781b      	ldrb	r3, [r3, #0]
   22aa6:	2b34      	cmp	r3, #52	; 0x34
   22aa8:	d137      	bne.n	22b1a <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   22aaa:	2380      	movs	r3, #128	; 0x80
   22aac:	18f9      	adds	r1, r7, r3
   22aae:	6838      	ldr	r0, [r7, #0]
   22ab0:	2300      	movs	r3, #0
   22ab2:	2204      	movs	r2, #4
   22ab4:	4c80      	ldr	r4, [pc, #512]	; (22cb8 <m2m_wifi_cb+0x350>)
   22ab6:	47a0      	blx	r4
   22ab8:	1e03      	subs	r3, r0, #0
   22aba:	d000      	beq.n	22abe <m2m_wifi_cb+0x156>
   22abc:	e121      	b.n	22d02 <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   22abe:	4b81      	ldr	r3, [pc, #516]	; (22cc4 <m2m_wifi_cb+0x35c>)
   22ac0:	0018      	movs	r0, r3
   22ac2:	4b81      	ldr	r3, [pc, #516]	; (22cc8 <m2m_wifi_cb+0x360>)
   22ac4:	4798      	blx	r3
   22ac6:	2380      	movs	r3, #128	; 0x80
   22ac8:	18fb      	adds	r3, r7, r3
   22aca:	681b      	ldr	r3, [r3, #0]
   22acc:	0e1b      	lsrs	r3, r3, #24
   22ace:	b2db      	uxtb	r3, r3
   22ad0:	0019      	movs	r1, r3
   22ad2:	2380      	movs	r3, #128	; 0x80
   22ad4:	18fb      	adds	r3, r7, r3
   22ad6:	681b      	ldr	r3, [r3, #0]
   22ad8:	0c1b      	lsrs	r3, r3, #16
   22ada:	b2db      	uxtb	r3, r3
   22adc:	001a      	movs	r2, r3
   22ade:	2380      	movs	r3, #128	; 0x80
   22ae0:	18fb      	adds	r3, r7, r3
   22ae2:	681b      	ldr	r3, [r3, #0]
   22ae4:	0a1b      	lsrs	r3, r3, #8
   22ae6:	b2db      	uxtb	r3, r3
   22ae8:	001c      	movs	r4, r3
   22aea:	2380      	movs	r3, #128	; 0x80
   22aec:	18fb      	adds	r3, r7, r3
   22aee:	681b      	ldr	r3, [r3, #0]
   22af0:	b2db      	uxtb	r3, r3
   22af2:	4876      	ldr	r0, [pc, #472]	; (22ccc <m2m_wifi_cb+0x364>)
   22af4:	9300      	str	r3, [sp, #0]
   22af6:	0023      	movs	r3, r4
   22af8:	4c73      	ldr	r4, [pc, #460]	; (22cc8 <m2m_wifi_cb+0x360>)
   22afa:	47a0      	blx	r4
   22afc:	4b74      	ldr	r3, [pc, #464]	; (22cd0 <m2m_wifi_cb+0x368>)
   22afe:	0018      	movs	r0, r3
   22b00:	4b71      	ldr	r3, [pc, #452]	; (22cc8 <m2m_wifi_cb+0x360>)
   22b02:	4798      	blx	r3
			if (gpfAppWifiCb)
   22b04:	4b6d      	ldr	r3, [pc, #436]	; (22cbc <m2m_wifi_cb+0x354>)
   22b06:	681b      	ldr	r3, [r3, #0]
   22b08:	2b00      	cmp	r3, #0
   22b0a:	d100      	bne.n	22b0e <m2m_wifi_cb+0x1a6>
   22b0c:	e0f9      	b.n	22d02 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   22b0e:	4b6b      	ldr	r3, [pc, #428]	; (22cbc <m2m_wifi_cb+0x354>)
   22b10:	681b      	ldr	r3, [r3, #0]
   22b12:	2100      	movs	r1, #0
   22b14:	2034      	movs	r0, #52	; 0x34
   22b16:	4798      	blx	r3
}
   22b18:	e0f3      	b.n	22d02 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   22b1a:	1dfb      	adds	r3, r7, #7
   22b1c:	781b      	ldrb	r3, [r3, #0]
   22b1e:	2b11      	cmp	r3, #17
   22b20:	d11e      	bne.n	22b60 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   22b22:	4b6c      	ldr	r3, [pc, #432]	; (22cd4 <m2m_wifi_cb+0x36c>)
   22b24:	2200      	movs	r2, #0
   22b26:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   22b28:	237c      	movs	r3, #124	; 0x7c
   22b2a:	18f9      	adds	r1, r7, r3
   22b2c:	6838      	ldr	r0, [r7, #0]
   22b2e:	2300      	movs	r3, #0
   22b30:	2204      	movs	r2, #4
   22b32:	4c61      	ldr	r4, [pc, #388]	; (22cb8 <m2m_wifi_cb+0x350>)
   22b34:	47a0      	blx	r4
   22b36:	1e03      	subs	r3, r0, #0
   22b38:	d000      	beq.n	22b3c <m2m_wifi_cb+0x1d4>
   22b3a:	e0e2      	b.n	22d02 <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   22b3c:	237c      	movs	r3, #124	; 0x7c
   22b3e:	18fb      	adds	r3, r7, r3
   22b40:	781a      	ldrb	r2, [r3, #0]
   22b42:	4b65      	ldr	r3, [pc, #404]	; (22cd8 <m2m_wifi_cb+0x370>)
   22b44:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   22b46:	4b5d      	ldr	r3, [pc, #372]	; (22cbc <m2m_wifi_cb+0x354>)
   22b48:	681b      	ldr	r3, [r3, #0]
   22b4a:	2b00      	cmp	r3, #0
   22b4c:	d100      	bne.n	22b50 <m2m_wifi_cb+0x1e8>
   22b4e:	e0d8      	b.n	22d02 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   22b50:	4b5a      	ldr	r3, [pc, #360]	; (22cbc <m2m_wifi_cb+0x354>)
   22b52:	681b      	ldr	r3, [r3, #0]
   22b54:	227c      	movs	r2, #124	; 0x7c
   22b56:	18ba      	adds	r2, r7, r2
   22b58:	0011      	movs	r1, r2
   22b5a:	2011      	movs	r0, #17
   22b5c:	4798      	blx	r3
}
   22b5e:	e0d0      	b.n	22d02 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   22b60:	1dfb      	adds	r3, r7, #7
   22b62:	781b      	ldrb	r3, [r3, #0]
   22b64:	2b13      	cmp	r3, #19
   22b66:	d116      	bne.n	22b96 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   22b68:	230c      	movs	r3, #12
   22b6a:	18f9      	adds	r1, r7, r3
   22b6c:	6838      	ldr	r0, [r7, #0]
   22b6e:	2300      	movs	r3, #0
   22b70:	222c      	movs	r2, #44	; 0x2c
   22b72:	4c51      	ldr	r4, [pc, #324]	; (22cb8 <m2m_wifi_cb+0x350>)
   22b74:	47a0      	blx	r4
   22b76:	1e03      	subs	r3, r0, #0
   22b78:	d000      	beq.n	22b7c <m2m_wifi_cb+0x214>
   22b7a:	e0c2      	b.n	22d02 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22b7c:	4b4f      	ldr	r3, [pc, #316]	; (22cbc <m2m_wifi_cb+0x354>)
   22b7e:	681b      	ldr	r3, [r3, #0]
   22b80:	2b00      	cmp	r3, #0
   22b82:	d100      	bne.n	22b86 <m2m_wifi_cb+0x21e>
   22b84:	e0bd      	b.n	22d02 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   22b86:	4b4d      	ldr	r3, [pc, #308]	; (22cbc <m2m_wifi_cb+0x354>)
   22b88:	681b      	ldr	r3, [r3, #0]
   22b8a:	220c      	movs	r2, #12
   22b8c:	18ba      	adds	r2, r7, r2
   22b8e:	0011      	movs	r1, r2
   22b90:	2013      	movs	r0, #19
   22b92:	4798      	blx	r3
}
   22b94:	e0b5      	b.n	22d02 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   22b96:	1dfb      	adds	r3, r7, #7
   22b98:	781b      	ldrb	r3, [r3, #0]
   22b9a:	2b04      	cmp	r3, #4
   22b9c:	d116      	bne.n	22bcc <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   22b9e:	23a8      	movs	r3, #168	; 0xa8
   22ba0:	18f9      	adds	r1, r7, r3
   22ba2:	6838      	ldr	r0, [r7, #0]
   22ba4:	2300      	movs	r3, #0
   22ba6:	2204      	movs	r2, #4
   22ba8:	4c43      	ldr	r4, [pc, #268]	; (22cb8 <m2m_wifi_cb+0x350>)
   22baa:	47a0      	blx	r4
   22bac:	1e03      	subs	r3, r0, #0
   22bae:	d000      	beq.n	22bb2 <m2m_wifi_cb+0x24a>
   22bb0:	e0a7      	b.n	22d02 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22bb2:	4b42      	ldr	r3, [pc, #264]	; (22cbc <m2m_wifi_cb+0x354>)
   22bb4:	681b      	ldr	r3, [r3, #0]
   22bb6:	2b00      	cmp	r3, #0
   22bb8:	d100      	bne.n	22bbc <m2m_wifi_cb+0x254>
   22bba:	e0a2      	b.n	22d02 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   22bbc:	4b3f      	ldr	r3, [pc, #252]	; (22cbc <m2m_wifi_cb+0x354>)
   22bbe:	681b      	ldr	r3, [r3, #0]
   22bc0:	22a8      	movs	r2, #168	; 0xa8
   22bc2:	18ba      	adds	r2, r7, r2
   22bc4:	0011      	movs	r1, r2
   22bc6:	2004      	movs	r0, #4
   22bc8:	4798      	blx	r3
}
   22bca:	e09a      	b.n	22d02 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   22bcc:	1dfb      	adds	r3, r7, #7
   22bce:	781b      	ldrb	r3, [r3, #0]
   22bd0:	2b65      	cmp	r3, #101	; 0x65
   22bd2:	d116      	bne.n	22c02 <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   22bd4:	23a8      	movs	r3, #168	; 0xa8
   22bd6:	18f9      	adds	r1, r7, r3
   22bd8:	6838      	ldr	r0, [r7, #0]
   22bda:	2300      	movs	r3, #0
   22bdc:	2204      	movs	r2, #4
   22bde:	4c36      	ldr	r4, [pc, #216]	; (22cb8 <m2m_wifi_cb+0x350>)
   22be0:	47a0      	blx	r4
   22be2:	1e03      	subs	r3, r0, #0
   22be4:	d000      	beq.n	22be8 <m2m_wifi_cb+0x280>
   22be6:	e08c      	b.n	22d02 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22be8:	4b34      	ldr	r3, [pc, #208]	; (22cbc <m2m_wifi_cb+0x354>)
   22bea:	681b      	ldr	r3, [r3, #0]
   22bec:	2b00      	cmp	r3, #0
   22bee:	d100      	bne.n	22bf2 <m2m_wifi_cb+0x28a>
   22bf0:	e087      	b.n	22d02 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   22bf2:	4b32      	ldr	r3, [pc, #200]	; (22cbc <m2m_wifi_cb+0x354>)
   22bf4:	681b      	ldr	r3, [r3, #0]
   22bf6:	22a8      	movs	r2, #168	; 0xa8
   22bf8:	18ba      	adds	r2, r7, r2
   22bfa:	0011      	movs	r1, r2
   22bfc:	2065      	movs	r0, #101	; 0x65
   22bfe:	4798      	blx	r3
}
   22c00:	e07f      	b.n	22d02 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   22c02:	1dfb      	adds	r3, r7, #7
   22c04:	781b      	ldrb	r3, [r3, #0]
   22c06:	2b09      	cmp	r3, #9
   22c08:	d116      	bne.n	22c38 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   22c0a:	230c      	movs	r3, #12
   22c0c:	18f9      	adds	r1, r7, r3
   22c0e:	6838      	ldr	r0, [r7, #0]
   22c10:	2301      	movs	r3, #1
   22c12:	2264      	movs	r2, #100	; 0x64
   22c14:	4c28      	ldr	r4, [pc, #160]	; (22cb8 <m2m_wifi_cb+0x350>)
   22c16:	47a0      	blx	r4
   22c18:	1e03      	subs	r3, r0, #0
   22c1a:	d000      	beq.n	22c1e <m2m_wifi_cb+0x2b6>
   22c1c:	e071      	b.n	22d02 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   22c1e:	4b27      	ldr	r3, [pc, #156]	; (22cbc <m2m_wifi_cb+0x354>)
   22c20:	681b      	ldr	r3, [r3, #0]
   22c22:	2b00      	cmp	r3, #0
   22c24:	d100      	bne.n	22c28 <m2m_wifi_cb+0x2c0>
   22c26:	e06c      	b.n	22d02 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   22c28:	4b24      	ldr	r3, [pc, #144]	; (22cbc <m2m_wifi_cb+0x354>)
   22c2a:	681b      	ldr	r3, [r3, #0]
   22c2c:	220c      	movs	r2, #12
   22c2e:	18ba      	adds	r2, r7, r2
   22c30:	0011      	movs	r1, r2
   22c32:	2009      	movs	r0, #9
   22c34:	4798      	blx	r3
}
   22c36:	e064      	b.n	22d02 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   22c38:	1dfb      	adds	r3, r7, #7
   22c3a:	781b      	ldrb	r3, [r3, #0]
   22c3c:	2b2a      	cmp	r3, #42	; 0x2a
   22c3e:	d114      	bne.n	22c6a <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   22c40:	2378      	movs	r3, #120	; 0x78
   22c42:	18f9      	adds	r1, r7, r3
   22c44:	6838      	ldr	r0, [r7, #0]
   22c46:	2301      	movs	r3, #1
   22c48:	2204      	movs	r2, #4
   22c4a:	4c1b      	ldr	r4, [pc, #108]	; (22cb8 <m2m_wifi_cb+0x350>)
   22c4c:	47a0      	blx	r4
   22c4e:	1e03      	subs	r3, r0, #0
   22c50:	d157      	bne.n	22d02 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   22c52:	4b1a      	ldr	r3, [pc, #104]	; (22cbc <m2m_wifi_cb+0x354>)
   22c54:	681b      	ldr	r3, [r3, #0]
   22c56:	2b00      	cmp	r3, #0
   22c58:	d053      	beq.n	22d02 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   22c5a:	4b18      	ldr	r3, [pc, #96]	; (22cbc <m2m_wifi_cb+0x354>)
   22c5c:	681b      	ldr	r3, [r3, #0]
   22c5e:	2278      	movs	r2, #120	; 0x78
   22c60:	18ba      	adds	r2, r7, r2
   22c62:	0011      	movs	r1, r2
   22c64:	202a      	movs	r0, #42	; 0x2a
   22c66:	4798      	blx	r3
}
   22c68:	e04b      	b.n	22d02 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   22c6a:	1dfb      	adds	r3, r7, #7
   22c6c:	781b      	ldrb	r3, [r3, #0]
   22c6e:	2b20      	cmp	r3, #32
   22c70:	d134      	bne.n	22cdc <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   22c72:	2370      	movs	r3, #112	; 0x70
   22c74:	18f9      	adds	r1, r7, r3
   22c76:	6838      	ldr	r0, [r7, #0]
   22c78:	2300      	movs	r3, #0
   22c7a:	2208      	movs	r2, #8
   22c7c:	4c0e      	ldr	r4, [pc, #56]	; (22cb8 <m2m_wifi_cb+0x350>)
   22c7e:	47a0      	blx	r4
   22c80:	1e03      	subs	r3, r0, #0
   22c82:	d13e      	bne.n	22d02 <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   22c84:	683b      	ldr	r3, [r7, #0]
   22c86:	3308      	adds	r3, #8
   22c88:	0018      	movs	r0, r3
   22c8a:	2370      	movs	r3, #112	; 0x70
   22c8c:	18fb      	adds	r3, r7, r3
   22c8e:	6819      	ldr	r1, [r3, #0]
   22c90:	2370      	movs	r3, #112	; 0x70
   22c92:	18fb      	adds	r3, r7, r3
   22c94:	889a      	ldrh	r2, [r3, #4]
   22c96:	2301      	movs	r3, #1
   22c98:	4c07      	ldr	r4, [pc, #28]	; (22cb8 <m2m_wifi_cb+0x350>)
   22c9a:	47a0      	blx	r4
   22c9c:	1e03      	subs	r3, r0, #0
   22c9e:	d130      	bne.n	22d02 <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   22ca0:	4b06      	ldr	r3, [pc, #24]	; (22cbc <m2m_wifi_cb+0x354>)
   22ca2:	681b      	ldr	r3, [r3, #0]
   22ca4:	2b00      	cmp	r3, #0
   22ca6:	d02c      	beq.n	22d02 <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   22ca8:	4b04      	ldr	r3, [pc, #16]	; (22cbc <m2m_wifi_cb+0x354>)
   22caa:	681b      	ldr	r3, [r3, #0]
   22cac:	2270      	movs	r2, #112	; 0x70
   22cae:	18ba      	adds	r2, r7, r2
   22cb0:	0011      	movs	r1, r2
   22cb2:	2020      	movs	r0, #32
   22cb4:	4798      	blx	r3
}
   22cb6:	e024      	b.n	22d02 <m2m_wifi_cb+0x39a>
   22cb8:	0002272d 	.word	0x0002272d
   22cbc:	200042ac 	.word	0x200042ac
   22cc0:	00021bb1 	.word	0x00021bb1
   22cc4:	0003a53c 	.word	0x0003a53c
   22cc8:	0001ee19 	.word	0x0001ee19
   22ccc:	0003a548 	.word	0x0003a548
   22cd0:	0003a568 	.word	0x0003a568
   22cd4:	200042a9 	.word	0x200042a9
   22cd8:	200042a8 	.word	0x200042a8
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   22cdc:	2324      	movs	r3, #36	; 0x24
   22cde:	33ff      	adds	r3, #255	; 0xff
   22ce0:	001a      	movs	r2, r3
   22ce2:	490a      	ldr	r1, [pc, #40]	; (22d0c <m2m_wifi_cb+0x3a4>)
   22ce4:	4b0a      	ldr	r3, [pc, #40]	; (22d10 <m2m_wifi_cb+0x3a8>)
   22ce6:	0018      	movs	r0, r3
   22ce8:	4b0a      	ldr	r3, [pc, #40]	; (22d14 <m2m_wifi_cb+0x3ac>)
   22cea:	4798      	blx	r3
   22cec:	1dfb      	adds	r3, r7, #7
   22cee:	781a      	ldrb	r2, [r3, #0]
   22cf0:	4b09      	ldr	r3, [pc, #36]	; (22d18 <m2m_wifi_cb+0x3b0>)
   22cf2:	0011      	movs	r1, r2
   22cf4:	0018      	movs	r0, r3
   22cf6:	4b07      	ldr	r3, [pc, #28]	; (22d14 <m2m_wifi_cb+0x3ac>)
   22cf8:	4798      	blx	r3
   22cfa:	4b08      	ldr	r3, [pc, #32]	; (22d1c <m2m_wifi_cb+0x3b4>)
   22cfc:	0018      	movs	r0, r3
   22cfe:	4b05      	ldr	r3, [pc, #20]	; (22d14 <m2m_wifi_cb+0x3ac>)
   22d00:	4798      	blx	r3
}
   22d02:	46c0      	nop			; (mov r8, r8)
   22d04:	46bd      	mov	sp, r7
   22d06:	b02d      	add	sp, #180	; 0xb4
   22d08:	bd90      	pop	{r4, r7, pc}
   22d0a:	46c0      	nop			; (mov r8, r8)
   22d0c:	0003a908 	.word	0x0003a908
   22d10:	0003a56c 	.word	0x0003a56c
   22d14:	0001ee19 	.word	0x0001ee19
   22d18:	0003a580 	.word	0x0003a580
   22d1c:	0003a568 	.word	0x0003a568

00022d20 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   22d20:	b590      	push	{r4, r7, lr}
   22d22:	b091      	sub	sp, #68	; 0x44
   22d24:	af02      	add	r7, sp, #8
   22d26:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   22d28:	2337      	movs	r3, #55	; 0x37
   22d2a:	18fb      	adds	r3, r7, r3
   22d2c:	2200      	movs	r2, #0
   22d2e:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   22d30:	230b      	movs	r3, #11
   22d32:	18fb      	adds	r3, r7, r3
   22d34:	2201      	movs	r2, #1
   22d36:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   22d38:	687b      	ldr	r3, [r7, #4]
   22d3a:	2b00      	cmp	r3, #0
   22d3c:	d104      	bne.n	22d48 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   22d3e:	2337      	movs	r3, #55	; 0x37
   22d40:	18fb      	adds	r3, r7, r3
   22d42:	22f4      	movs	r2, #244	; 0xf4
   22d44:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   22d46:	e0b3      	b.n	22eb0 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   22d48:	687b      	ldr	r3, [r7, #4]
   22d4a:	681a      	ldr	r2, [r3, #0]
   22d4c:	4b5c      	ldr	r3, [pc, #368]	; (22ec0 <m2m_wifi_init+0x1a0>)
   22d4e:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   22d50:	4b5c      	ldr	r3, [pc, #368]	; (22ec4 <m2m_wifi_init+0x1a4>)
   22d52:	2200      	movs	r2, #0
   22d54:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   22d56:	2337      	movs	r3, #55	; 0x37
   22d58:	18fc      	adds	r4, r7, r3
   22d5a:	230b      	movs	r3, #11
   22d5c:	18fb      	adds	r3, r7, r3
   22d5e:	0018      	movs	r0, r3
   22d60:	4b59      	ldr	r3, [pc, #356]	; (22ec8 <m2m_wifi_init+0x1a8>)
   22d62:	4798      	blx	r3
   22d64:	0003      	movs	r3, r0
   22d66:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   22d68:	2337      	movs	r3, #55	; 0x37
   22d6a:	18fb      	adds	r3, r7, r3
   22d6c:	781b      	ldrb	r3, [r3, #0]
   22d6e:	b25b      	sxtb	r3, r3
   22d70:	2b00      	cmp	r3, #0
   22d72:	d000      	beq.n	22d76 <m2m_wifi_init+0x56>
   22d74:	e099      	b.n	22eaa <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   22d76:	2337      	movs	r3, #55	; 0x37
   22d78:	18fc      	adds	r4, r7, r3
   22d7a:	2000      	movs	r0, #0
   22d7c:	4b53      	ldr	r3, [pc, #332]	; (22ecc <m2m_wifi_init+0x1ac>)
   22d7e:	4798      	blx	r3
   22d80:	0003      	movs	r3, r0
   22d82:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   22d84:	2337      	movs	r3, #55	; 0x37
   22d86:	18fb      	adds	r3, r7, r3
   22d88:	781b      	ldrb	r3, [r3, #0]
   22d8a:	b25b      	sxtb	r3, r3
   22d8c:	2b00      	cmp	r3, #0
   22d8e:	d000      	beq.n	22d92 <m2m_wifi_init+0x72>
   22d90:	e086      	b.n	22ea0 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   22d92:	4b4f      	ldr	r3, [pc, #316]	; (22ed0 <m2m_wifi_init+0x1b0>)
   22d94:	0019      	movs	r1, r3
   22d96:	2001      	movs	r0, #1
   22d98:	4b4e      	ldr	r3, [pc, #312]	; (22ed4 <m2m_wifi_init+0x1b4>)
   22d9a:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   22d9c:	2337      	movs	r3, #55	; 0x37
   22d9e:	18fc      	adds	r4, r7, r3
   22da0:	230c      	movs	r3, #12
   22da2:	18fb      	adds	r3, r7, r3
   22da4:	0018      	movs	r0, r3
   22da6:	4b4c      	ldr	r3, [pc, #304]	; (22ed8 <m2m_wifi_init+0x1b8>)
   22da8:	4798      	blx	r3
   22daa:	0003      	movs	r3, r0
   22dac:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   22dae:	4b4b      	ldr	r3, [pc, #300]	; (22edc <m2m_wifi_init+0x1bc>)
   22db0:	0018      	movs	r0, r3
   22db2:	4b4b      	ldr	r3, [pc, #300]	; (22ee0 <m2m_wifi_init+0x1c0>)
   22db4:	4798      	blx	r3
   22db6:	230c      	movs	r3, #12
   22db8:	18fb      	adds	r3, r7, r3
   22dba:	791b      	ldrb	r3, [r3, #4]
   22dbc:	0019      	movs	r1, r3
   22dbe:	230c      	movs	r3, #12
   22dc0:	18fb      	adds	r3, r7, r3
   22dc2:	795b      	ldrb	r3, [r3, #5]
   22dc4:	001a      	movs	r2, r3
   22dc6:	230c      	movs	r3, #12
   22dc8:	18fb      	adds	r3, r7, r3
   22dca:	799b      	ldrb	r3, [r3, #6]
   22dcc:	001c      	movs	r4, r3
   22dce:	230c      	movs	r3, #12
   22dd0:	18fb      	adds	r3, r7, r3
   22dd2:	8c1b      	ldrh	r3, [r3, #32]
   22dd4:	4843      	ldr	r0, [pc, #268]	; (22ee4 <m2m_wifi_init+0x1c4>)
   22dd6:	9300      	str	r3, [sp, #0]
   22dd8:	0023      	movs	r3, r4
   22dda:	4c41      	ldr	r4, [pc, #260]	; (22ee0 <m2m_wifi_init+0x1c0>)
   22ddc:	47a0      	blx	r4
   22dde:	4b42      	ldr	r3, [pc, #264]	; (22ee8 <m2m_wifi_init+0x1c8>)
   22de0:	0018      	movs	r0, r3
   22de2:	4b3f      	ldr	r3, [pc, #252]	; (22ee0 <m2m_wifi_init+0x1c0>)
   22de4:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   22de6:	4b3d      	ldr	r3, [pc, #244]	; (22edc <m2m_wifi_init+0x1bc>)
   22de8:	0018      	movs	r0, r3
   22dea:	4b3d      	ldr	r3, [pc, #244]	; (22ee0 <m2m_wifi_init+0x1c0>)
   22dec:	4798      	blx	r3
   22dee:	230c      	movs	r3, #12
   22df0:	18fb      	adds	r3, r7, r3
   22df2:	3316      	adds	r3, #22
   22df4:	001a      	movs	r2, r3
   22df6:	230c      	movs	r3, #12
   22df8:	18fb      	adds	r3, r7, r3
   22dfa:	330a      	adds	r3, #10
   22dfc:	0019      	movs	r1, r3
   22dfe:	4b3b      	ldr	r3, [pc, #236]	; (22eec <m2m_wifi_init+0x1cc>)
   22e00:	0018      	movs	r0, r3
   22e02:	4b37      	ldr	r3, [pc, #220]	; (22ee0 <m2m_wifi_init+0x1c0>)
   22e04:	4798      	blx	r3
   22e06:	4b38      	ldr	r3, [pc, #224]	; (22ee8 <m2m_wifi_init+0x1c8>)
   22e08:	0018      	movs	r0, r3
   22e0a:	4b35      	ldr	r3, [pc, #212]	; (22ee0 <m2m_wifi_init+0x1c0>)
   22e0c:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   22e0e:	4b33      	ldr	r3, [pc, #204]	; (22edc <m2m_wifi_init+0x1bc>)
   22e10:	0018      	movs	r0, r3
   22e12:	4b33      	ldr	r3, [pc, #204]	; (22ee0 <m2m_wifi_init+0x1c0>)
   22e14:	4798      	blx	r3
   22e16:	230c      	movs	r3, #12
   22e18:	18fb      	adds	r3, r7, r3
   22e1a:	79db      	ldrb	r3, [r3, #7]
   22e1c:	0019      	movs	r1, r3
   22e1e:	230c      	movs	r3, #12
   22e20:	18fb      	adds	r3, r7, r3
   22e22:	7a1b      	ldrb	r3, [r3, #8]
   22e24:	001a      	movs	r2, r3
   22e26:	230c      	movs	r3, #12
   22e28:	18fb      	adds	r3, r7, r3
   22e2a:	7a5b      	ldrb	r3, [r3, #9]
   22e2c:	4830      	ldr	r0, [pc, #192]	; (22ef0 <m2m_wifi_init+0x1d0>)
   22e2e:	4c2c      	ldr	r4, [pc, #176]	; (22ee0 <m2m_wifi_init+0x1c0>)
   22e30:	47a0      	blx	r4
   22e32:	4b2d      	ldr	r3, [pc, #180]	; (22ee8 <m2m_wifi_init+0x1c8>)
   22e34:	0018      	movs	r0, r3
   22e36:	4b2a      	ldr	r3, [pc, #168]	; (22ee0 <m2m_wifi_init+0x1c0>)
   22e38:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   22e3a:	4b28      	ldr	r3, [pc, #160]	; (22edc <m2m_wifi_init+0x1bc>)
   22e3c:	0018      	movs	r0, r3
   22e3e:	4b28      	ldr	r3, [pc, #160]	; (22ee0 <m2m_wifi_init+0x1c0>)
   22e40:	4798      	blx	r3
   22e42:	482c      	ldr	r0, [pc, #176]	; (22ef4 <m2m_wifi_init+0x1d4>)
   22e44:	2304      	movs	r3, #4
   22e46:	2205      	movs	r2, #5
   22e48:	2113      	movs	r1, #19
   22e4a:	4c25      	ldr	r4, [pc, #148]	; (22ee0 <m2m_wifi_init+0x1c0>)
   22e4c:	47a0      	blx	r4
   22e4e:	4b26      	ldr	r3, [pc, #152]	; (22ee8 <m2m_wifi_init+0x1c8>)
   22e50:	0018      	movs	r0, r3
   22e52:	4b23      	ldr	r3, [pc, #140]	; (22ee0 <m2m_wifi_init+0x1c0>)
   22e54:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   22e56:	4b21      	ldr	r3, [pc, #132]	; (22edc <m2m_wifi_init+0x1bc>)
   22e58:	0018      	movs	r0, r3
   22e5a:	4b21      	ldr	r3, [pc, #132]	; (22ee0 <m2m_wifi_init+0x1c0>)
   22e5c:	4798      	blx	r3
   22e5e:	4a26      	ldr	r2, [pc, #152]	; (22ef8 <m2m_wifi_init+0x1d8>)
   22e60:	4926      	ldr	r1, [pc, #152]	; (22efc <m2m_wifi_init+0x1dc>)
   22e62:	4b27      	ldr	r3, [pc, #156]	; (22f00 <m2m_wifi_init+0x1e0>)
   22e64:	0018      	movs	r0, r3
   22e66:	4b1e      	ldr	r3, [pc, #120]	; (22ee0 <m2m_wifi_init+0x1c0>)
   22e68:	4798      	blx	r3
   22e6a:	4b1f      	ldr	r3, [pc, #124]	; (22ee8 <m2m_wifi_init+0x1c8>)
   22e6c:	0018      	movs	r0, r3
   22e6e:	4b1c      	ldr	r3, [pc, #112]	; (22ee0 <m2m_wifi_init+0x1c0>)
   22e70:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   22e72:	2337      	movs	r3, #55	; 0x37
   22e74:	18fb      	adds	r3, r7, r3
   22e76:	781b      	ldrb	r3, [r3, #0]
   22e78:	b25b      	sxtb	r3, r3
   22e7a:	330d      	adds	r3, #13
   22e7c:	d117      	bne.n	22eae <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   22e7e:	23e8      	movs	r3, #232	; 0xe8
   22e80:	33ff      	adds	r3, #255	; 0xff
   22e82:	001a      	movs	r2, r3
   22e84:	491f      	ldr	r1, [pc, #124]	; (22f04 <m2m_wifi_init+0x1e4>)
   22e86:	4b20      	ldr	r3, [pc, #128]	; (22f08 <m2m_wifi_init+0x1e8>)
   22e88:	0018      	movs	r0, r3
   22e8a:	4b15      	ldr	r3, [pc, #84]	; (22ee0 <m2m_wifi_init+0x1c0>)
   22e8c:	4798      	blx	r3
   22e8e:	4b1f      	ldr	r3, [pc, #124]	; (22f0c <m2m_wifi_init+0x1ec>)
   22e90:	0018      	movs	r0, r3
   22e92:	4b13      	ldr	r3, [pc, #76]	; (22ee0 <m2m_wifi_init+0x1c0>)
   22e94:	4798      	blx	r3
   22e96:	4b14      	ldr	r3, [pc, #80]	; (22ee8 <m2m_wifi_init+0x1c8>)
   22e98:	0018      	movs	r0, r3
   22e9a:	4b11      	ldr	r3, [pc, #68]	; (22ee0 <m2m_wifi_init+0x1c0>)
   22e9c:	4798      	blx	r3
	}

	goto _EXIT0;
   22e9e:	e006      	b.n	22eae <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   22ea0:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   22ea2:	2000      	movs	r0, #0
   22ea4:	4b1a      	ldr	r3, [pc, #104]	; (22f10 <m2m_wifi_init+0x1f0>)
   22ea6:	4798      	blx	r3
   22ea8:	e002      	b.n	22eb0 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   22eaa:	46c0      	nop			; (mov r8, r8)
   22eac:	e000      	b.n	22eb0 <m2m_wifi_init+0x190>
	goto _EXIT0;
   22eae:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   22eb0:	2337      	movs	r3, #55	; 0x37
   22eb2:	18fb      	adds	r3, r7, r3
   22eb4:	781b      	ldrb	r3, [r3, #0]
   22eb6:	b25b      	sxtb	r3, r3
}
   22eb8:	0018      	movs	r0, r3
   22eba:	46bd      	mov	sp, r7
   22ebc:	b00f      	add	sp, #60	; 0x3c
   22ebe:	bd90      	pop	{r4, r7, pc}
   22ec0:	200042ac 	.word	0x200042ac
   22ec4:	200042a9 	.word	0x200042a9
   22ec8:	00024045 	.word	0x00024045
   22ecc:	00021dc9 	.word	0x00021dc9
   22ed0:	00022969 	.word	0x00022969
   22ed4:	000228ad 	.word	0x000228ad
   22ed8:	00023e79 	.word	0x00023e79
   22edc:	0003a53c 	.word	0x0003a53c
   22ee0:	0001ee19 	.word	0x0001ee19
   22ee4:	0003a6e0 	.word	0x0003a6e0
   22ee8:	0003a568 	.word	0x0003a568
   22eec:	0003a708 	.word	0x0003a708
   22ef0:	0003a724 	.word	0x0003a724
   22ef4:	0003a748 	.word	0x0003a748
   22ef8:	0003a760 	.word	0x0003a760
   22efc:	0003a76c 	.word	0x0003a76c
   22f00:	0003a778 	.word	0x0003a778
   22f04:	0003a914 	.word	0x0003a914
   22f08:	0003a56c 	.word	0x0003a56c
   22f0c:	0003a790 	.word	0x0003a790
   22f10:	000241d5 	.word	0x000241d5

00022f14 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   22f14:	b580      	push	{r7, lr}
   22f16:	b082      	sub	sp, #8
   22f18:	af00      	add	r7, sp, #0
   22f1a:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   22f1c:	4b03      	ldr	r3, [pc, #12]	; (22f2c <m2m_wifi_handle_events+0x18>)
   22f1e:	4798      	blx	r3
   22f20:	0003      	movs	r3, r0
}
   22f22:	0018      	movs	r0, r3
   22f24:	46bd      	mov	sp, r7
   22f26:	b002      	add	sp, #8
   22f28:	bd80      	pop	{r7, pc}
   22f2a:	46c0      	nop			; (mov r8, r8)
   22f2c:	0002268d 	.word	0x0002268d

00022f30 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   22f30:	b590      	push	{r4, r7, lr}
   22f32:	b087      	sub	sp, #28
   22f34:	af02      	add	r7, sp, #8
   22f36:	60f8      	str	r0, [r7, #12]
   22f38:	0008      	movs	r0, r1
   22f3a:	0011      	movs	r1, r2
   22f3c:	607b      	str	r3, [r7, #4]
   22f3e:	230b      	movs	r3, #11
   22f40:	18fb      	adds	r3, r7, r3
   22f42:	1c02      	adds	r2, r0, #0
   22f44:	701a      	strb	r2, [r3, #0]
   22f46:	230a      	movs	r3, #10
   22f48:	18fb      	adds	r3, r7, r3
   22f4a:	1c0a      	adds	r2, r1, #0
   22f4c:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   22f4e:	687c      	ldr	r4, [r7, #4]
   22f50:	230a      	movs	r3, #10
   22f52:	18fb      	adds	r3, r7, r3
   22f54:	781a      	ldrb	r2, [r3, #0]
   22f56:	230b      	movs	r3, #11
   22f58:	18fb      	adds	r3, r7, r3
   22f5a:	7819      	ldrb	r1, [r3, #0]
   22f5c:	68f8      	ldr	r0, [r7, #12]
   22f5e:	2300      	movs	r3, #0
   22f60:	9301      	str	r3, [sp, #4]
   22f62:	2320      	movs	r3, #32
   22f64:	18fb      	adds	r3, r7, r3
   22f66:	881b      	ldrh	r3, [r3, #0]
   22f68:	9300      	str	r3, [sp, #0]
   22f6a:	0023      	movs	r3, r4
   22f6c:	4c03      	ldr	r4, [pc, #12]	; (22f7c <m2m_wifi_connect+0x4c>)
   22f6e:	47a0      	blx	r4
   22f70:	0003      	movs	r3, r0
}
   22f72:	0018      	movs	r0, r3
   22f74:	46bd      	mov	sp, r7
   22f76:	b005      	add	sp, #20
   22f78:	bd90      	pop	{r4, r7, pc}
   22f7a:	46c0      	nop			; (mov r8, r8)
   22f7c:	00022f81 	.word	0x00022f81

00022f80 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   22f80:	b5b0      	push	{r4, r5, r7, lr}
   22f82:	b0aa      	sub	sp, #168	; 0xa8
   22f84:	af04      	add	r7, sp, #16
   22f86:	60f8      	str	r0, [r7, #12]
   22f88:	0008      	movs	r0, r1
   22f8a:	0011      	movs	r1, r2
   22f8c:	607b      	str	r3, [r7, #4]
   22f8e:	230b      	movs	r3, #11
   22f90:	18fb      	adds	r3, r7, r3
   22f92:	1c02      	adds	r2, r0, #0
   22f94:	701a      	strb	r2, [r3, #0]
   22f96:	230a      	movs	r3, #10
   22f98:	18fb      	adds	r3, r7, r3
   22f9a:	1c0a      	adds	r2, r1, #0
   22f9c:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   22f9e:	2397      	movs	r3, #151	; 0x97
   22fa0:	18fb      	adds	r3, r7, r3
   22fa2:	2200      	movs	r2, #0
   22fa4:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   22fa6:	230a      	movs	r3, #10
   22fa8:	18fb      	adds	r3, r7, r3
   22faa:	781b      	ldrb	r3, [r3, #0]
   22fac:	2b01      	cmp	r3, #1
   22fae:	d100      	bne.n	22fb2 <m2m_wifi_connect_sc+0x32>
   22fb0:	e085      	b.n	230be <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   22fb2:	687b      	ldr	r3, [r7, #4]
   22fb4:	2b00      	cmp	r3, #0
   22fb6:	d112      	bne.n	22fde <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   22fb8:	4ad8      	ldr	r2, [pc, #864]	; (2331c <m2m_wifi_connect_sc+0x39c>)
   22fba:	49d9      	ldr	r1, [pc, #868]	; (23320 <m2m_wifi_connect_sc+0x3a0>)
   22fbc:	4bd9      	ldr	r3, [pc, #868]	; (23324 <m2m_wifi_connect_sc+0x3a4>)
   22fbe:	0018      	movs	r0, r3
   22fc0:	4bd9      	ldr	r3, [pc, #868]	; (23328 <m2m_wifi_connect_sc+0x3a8>)
   22fc2:	4798      	blx	r3
   22fc4:	4bd9      	ldr	r3, [pc, #868]	; (2332c <m2m_wifi_connect_sc+0x3ac>)
   22fc6:	0018      	movs	r0, r3
   22fc8:	4bd7      	ldr	r3, [pc, #860]	; (23328 <m2m_wifi_connect_sc+0x3a8>)
   22fca:	4798      	blx	r3
   22fcc:	4bd8      	ldr	r3, [pc, #864]	; (23330 <m2m_wifi_connect_sc+0x3b0>)
   22fce:	0018      	movs	r0, r3
   22fd0:	4bd5      	ldr	r3, [pc, #852]	; (23328 <m2m_wifi_connect_sc+0x3a8>)
   22fd2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22fd4:	2397      	movs	r3, #151	; 0x97
   22fd6:	18fb      	adds	r3, r7, r3
   22fd8:	22f4      	movs	r2, #244	; 0xf4
   22fda:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22fdc:	e1f9      	b.n	233d2 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   22fde:	230a      	movs	r3, #10
   22fe0:	18fb      	adds	r3, r7, r3
   22fe2:	781b      	ldrb	r3, [r3, #0]
   22fe4:	2b02      	cmp	r3, #2
   22fe6:	d16a      	bne.n	230be <m2m_wifi_connect_sc+0x13e>
   22fe8:	687b      	ldr	r3, [r7, #4]
   22fea:	0018      	movs	r0, r3
   22fec:	4bd1      	ldr	r3, [pc, #836]	; (23334 <m2m_wifi_connect_sc+0x3b4>)
   22fee:	4798      	blx	r3
   22ff0:	0003      	movs	r3, r0
   22ff2:	2b40      	cmp	r3, #64	; 0x40
   22ff4:	d163      	bne.n	230be <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   22ff6:	2396      	movs	r3, #150	; 0x96
   22ff8:	18fb      	adds	r3, r7, r3
   22ffa:	2200      	movs	r2, #0
   22ffc:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   22ffe:	687b      	ldr	r3, [r7, #4]
   23000:	2290      	movs	r2, #144	; 0x90
   23002:	18ba      	adds	r2, r7, r2
   23004:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   23006:	e055      	b.n	230b4 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   23008:	2396      	movs	r3, #150	; 0x96
   2300a:	18fb      	adds	r3, r7, r3
   2300c:	781b      	ldrb	r3, [r3, #0]
   2300e:	2290      	movs	r2, #144	; 0x90
   23010:	18ba      	adds	r2, r7, r2
   23012:	6812      	ldr	r2, [r2, #0]
   23014:	18d3      	adds	r3, r2, r3
   23016:	781b      	ldrb	r3, [r3, #0]
   23018:	2b2f      	cmp	r3, #47	; 0x2f
   2301a:	d931      	bls.n	23080 <m2m_wifi_connect_sc+0x100>
   2301c:	2396      	movs	r3, #150	; 0x96
   2301e:	18fb      	adds	r3, r7, r3
   23020:	781b      	ldrb	r3, [r3, #0]
   23022:	2290      	movs	r2, #144	; 0x90
   23024:	18ba      	adds	r2, r7, r2
   23026:	6812      	ldr	r2, [r2, #0]
   23028:	18d3      	adds	r3, r2, r3
   2302a:	781b      	ldrb	r3, [r3, #0]
   2302c:	2b39      	cmp	r3, #57	; 0x39
   2302e:	d909      	bls.n	23044 <m2m_wifi_connect_sc+0xc4>
   23030:	2396      	movs	r3, #150	; 0x96
   23032:	18fb      	adds	r3, r7, r3
   23034:	781b      	ldrb	r3, [r3, #0]
   23036:	2290      	movs	r2, #144	; 0x90
   23038:	18ba      	adds	r2, r7, r2
   2303a:	6812      	ldr	r2, [r2, #0]
   2303c:	18d3      	adds	r3, r2, r3
   2303e:	781b      	ldrb	r3, [r3, #0]
   23040:	2b40      	cmp	r3, #64	; 0x40
   23042:	d91d      	bls.n	23080 <m2m_wifi_connect_sc+0x100>
   23044:	2396      	movs	r3, #150	; 0x96
   23046:	18fb      	adds	r3, r7, r3
   23048:	781b      	ldrb	r3, [r3, #0]
   2304a:	2290      	movs	r2, #144	; 0x90
   2304c:	18ba      	adds	r2, r7, r2
   2304e:	6812      	ldr	r2, [r2, #0]
   23050:	18d3      	adds	r3, r2, r3
   23052:	781b      	ldrb	r3, [r3, #0]
   23054:	2b46      	cmp	r3, #70	; 0x46
   23056:	d909      	bls.n	2306c <m2m_wifi_connect_sc+0xec>
   23058:	2396      	movs	r3, #150	; 0x96
   2305a:	18fb      	adds	r3, r7, r3
   2305c:	781b      	ldrb	r3, [r3, #0]
   2305e:	2290      	movs	r2, #144	; 0x90
   23060:	18ba      	adds	r2, r7, r2
   23062:	6812      	ldr	r2, [r2, #0]
   23064:	18d3      	adds	r3, r2, r3
   23066:	781b      	ldrb	r3, [r3, #0]
   23068:	2b60      	cmp	r3, #96	; 0x60
   2306a:	d909      	bls.n	23080 <m2m_wifi_connect_sc+0x100>
   2306c:	2396      	movs	r3, #150	; 0x96
   2306e:	18fb      	adds	r3, r7, r3
   23070:	781b      	ldrb	r3, [r3, #0]
   23072:	2290      	movs	r2, #144	; 0x90
   23074:	18ba      	adds	r2, r7, r2
   23076:	6812      	ldr	r2, [r2, #0]
   23078:	18d3      	adds	r3, r2, r3
   2307a:	781b      	ldrb	r3, [r3, #0]
   2307c:	2b66      	cmp	r3, #102	; 0x66
   2307e:	d912      	bls.n	230a6 <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   23080:	4aad      	ldr	r2, [pc, #692]	; (23338 <m2m_wifi_connect_sc+0x3b8>)
   23082:	49a7      	ldr	r1, [pc, #668]	; (23320 <m2m_wifi_connect_sc+0x3a0>)
   23084:	4ba7      	ldr	r3, [pc, #668]	; (23324 <m2m_wifi_connect_sc+0x3a4>)
   23086:	0018      	movs	r0, r3
   23088:	4ba7      	ldr	r3, [pc, #668]	; (23328 <m2m_wifi_connect_sc+0x3a8>)
   2308a:	4798      	blx	r3
   2308c:	4bab      	ldr	r3, [pc, #684]	; (2333c <m2m_wifi_connect_sc+0x3bc>)
   2308e:	0018      	movs	r0, r3
   23090:	4ba5      	ldr	r3, [pc, #660]	; (23328 <m2m_wifi_connect_sc+0x3a8>)
   23092:	4798      	blx	r3
   23094:	4ba6      	ldr	r3, [pc, #664]	; (23330 <m2m_wifi_connect_sc+0x3b0>)
   23096:	0018      	movs	r0, r3
   23098:	4ba3      	ldr	r3, [pc, #652]	; (23328 <m2m_wifi_connect_sc+0x3a8>)
   2309a:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   2309c:	2397      	movs	r3, #151	; 0x97
   2309e:	18fb      	adds	r3, r7, r3
   230a0:	22f4      	movs	r2, #244	; 0xf4
   230a2:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   230a4:	e195      	b.n	233d2 <m2m_wifi_connect_sc+0x452>
				}
				i++;
   230a6:	2396      	movs	r3, #150	; 0x96
   230a8:	18fb      	adds	r3, r7, r3
   230aa:	781a      	ldrb	r2, [r3, #0]
   230ac:	2396      	movs	r3, #150	; 0x96
   230ae:	18fb      	adds	r3, r7, r3
   230b0:	3201      	adds	r2, #1
   230b2:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   230b4:	2396      	movs	r3, #150	; 0x96
   230b6:	18fb      	adds	r3, r7, r3
   230b8:	781b      	ldrb	r3, [r3, #0]
   230ba:	2b3f      	cmp	r3, #63	; 0x3f
   230bc:	d9a4      	bls.n	23008 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   230be:	230b      	movs	r3, #11
   230c0:	18fb      	adds	r3, r7, r3
   230c2:	781b      	ldrb	r3, [r3, #0]
   230c4:	2b00      	cmp	r3, #0
   230c6:	d004      	beq.n	230d2 <m2m_wifi_connect_sc+0x152>
   230c8:	230b      	movs	r3, #11
   230ca:	18fb      	adds	r3, r7, r3
   230cc:	781b      	ldrb	r3, [r3, #0]
   230ce:	2b20      	cmp	r3, #32
   230d0:	d913      	bls.n	230fa <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   230d2:	238c      	movs	r3, #140	; 0x8c
   230d4:	009a      	lsls	r2, r3, #2
   230d6:	4992      	ldr	r1, [pc, #584]	; (23320 <m2m_wifi_connect_sc+0x3a0>)
   230d8:	4b92      	ldr	r3, [pc, #584]	; (23324 <m2m_wifi_connect_sc+0x3a4>)
   230da:	0018      	movs	r0, r3
   230dc:	4b92      	ldr	r3, [pc, #584]	; (23328 <m2m_wifi_connect_sc+0x3a8>)
   230de:	4798      	blx	r3
   230e0:	4b97      	ldr	r3, [pc, #604]	; (23340 <m2m_wifi_connect_sc+0x3c0>)
   230e2:	0018      	movs	r0, r3
   230e4:	4b90      	ldr	r3, [pc, #576]	; (23328 <m2m_wifi_connect_sc+0x3a8>)
   230e6:	4798      	blx	r3
   230e8:	4b91      	ldr	r3, [pc, #580]	; (23330 <m2m_wifi_connect_sc+0x3b0>)
   230ea:	0018      	movs	r0, r3
   230ec:	4b8e      	ldr	r3, [pc, #568]	; (23328 <m2m_wifi_connect_sc+0x3a8>)
   230ee:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   230f0:	2397      	movs	r3, #151	; 0x97
   230f2:	18fb      	adds	r3, r7, r3
   230f4:	22f4      	movs	r2, #244	; 0xf4
   230f6:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   230f8:	e16b      	b.n	233d2 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   230fa:	23a8      	movs	r3, #168	; 0xa8
   230fc:	18fb      	adds	r3, r7, r3
   230fe:	881b      	ldrh	r3, [r3, #0]
   23100:	2b00      	cmp	r3, #0
   23102:	d004      	beq.n	2310e <m2m_wifi_connect_sc+0x18e>
   23104:	23a8      	movs	r3, #168	; 0xa8
   23106:	18fb      	adds	r3, r7, r3
   23108:	881b      	ldrh	r3, [r3, #0]
   2310a:	2b0e      	cmp	r3, #14
   2310c:	d917      	bls.n	2313e <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   2310e:	23a8      	movs	r3, #168	; 0xa8
   23110:	18fb      	adds	r3, r7, r3
   23112:	881b      	ldrh	r3, [r3, #0]
   23114:	2bff      	cmp	r3, #255	; 0xff
   23116:	d012      	beq.n	2313e <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   23118:	4a8a      	ldr	r2, [pc, #552]	; (23344 <m2m_wifi_connect_sc+0x3c4>)
   2311a:	4981      	ldr	r1, [pc, #516]	; (23320 <m2m_wifi_connect_sc+0x3a0>)
   2311c:	4b81      	ldr	r3, [pc, #516]	; (23324 <m2m_wifi_connect_sc+0x3a4>)
   2311e:	0018      	movs	r0, r3
   23120:	4b81      	ldr	r3, [pc, #516]	; (23328 <m2m_wifi_connect_sc+0x3a8>)
   23122:	4798      	blx	r3
   23124:	4b88      	ldr	r3, [pc, #544]	; (23348 <m2m_wifi_connect_sc+0x3c8>)
   23126:	0018      	movs	r0, r3
   23128:	4b7f      	ldr	r3, [pc, #508]	; (23328 <m2m_wifi_connect_sc+0x3a8>)
   2312a:	4798      	blx	r3
   2312c:	4b80      	ldr	r3, [pc, #512]	; (23330 <m2m_wifi_connect_sc+0x3b0>)
   2312e:	0018      	movs	r0, r3
   23130:	4b7d      	ldr	r3, [pc, #500]	; (23328 <m2m_wifi_connect_sc+0x3a8>)
   23132:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   23134:	2397      	movs	r3, #151	; 0x97
   23136:	18fb      	adds	r3, r7, r3
   23138:	22f4      	movs	r2, #244	; 0xf4
   2313a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   2313c:	e149      	b.n	233d2 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   2313e:	230b      	movs	r3, #11
   23140:	18fb      	adds	r3, r7, r3
   23142:	781a      	ldrb	r2, [r3, #0]
   23144:	68f9      	ldr	r1, [r7, #12]
   23146:	2314      	movs	r3, #20
   23148:	18fb      	adds	r3, r7, r3
   2314a:	3346      	adds	r3, #70	; 0x46
   2314c:	0018      	movs	r0, r3
   2314e:	4b7f      	ldr	r3, [pc, #508]	; (2334c <m2m_wifi_connect_sc+0x3cc>)
   23150:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   23152:	230b      	movs	r3, #11
   23154:	18fb      	adds	r3, r7, r3
   23156:	781b      	ldrb	r3, [r3, #0]
   23158:	2214      	movs	r2, #20
   2315a:	18ba      	adds	r2, r7, r2
   2315c:	2146      	movs	r1, #70	; 0x46
   2315e:	18d3      	adds	r3, r2, r3
   23160:	185b      	adds	r3, r3, r1
   23162:	2200      	movs	r2, #0
   23164:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   23166:	2314      	movs	r3, #20
   23168:	18fb      	adds	r3, r7, r3
   2316a:	22a8      	movs	r2, #168	; 0xa8
   2316c:	18ba      	adds	r2, r7, r2
   2316e:	2144      	movs	r1, #68	; 0x44
   23170:	8812      	ldrh	r2, [r2, #0]
   23172:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   23174:	23ac      	movs	r3, #172	; 0xac
   23176:	18fb      	adds	r3, r7, r3
   23178:	781b      	ldrb	r3, [r3, #0]
   2317a:	1e5a      	subs	r2, r3, #1
   2317c:	4193      	sbcs	r3, r2
   2317e:	b2db      	uxtb	r3, r3
   23180:	0019      	movs	r1, r3
   23182:	2314      	movs	r3, #20
   23184:	18fb      	adds	r3, r7, r3
   23186:	2267      	movs	r2, #103	; 0x67
   23188:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   2318a:	2314      	movs	r3, #20
   2318c:	18fb      	adds	r3, r7, r3
   2318e:	228c      	movs	r2, #140	; 0x8c
   23190:	18ba      	adds	r2, r7, r2
   23192:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   23194:	238c      	movs	r3, #140	; 0x8c
   23196:	18fb      	adds	r3, r7, r3
   23198:	681b      	ldr	r3, [r3, #0]
   2319a:	220a      	movs	r2, #10
   2319c:	18ba      	adds	r2, r7, r2
   2319e:	2141      	movs	r1, #65	; 0x41
   231a0:	7812      	ldrb	r2, [r2, #0]
   231a2:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   231a4:	230a      	movs	r3, #10
   231a6:	18fb      	adds	r3, r7, r3
   231a8:	781b      	ldrb	r3, [r3, #0]
   231aa:	2b03      	cmp	r3, #3
   231ac:	d000      	beq.n	231b0 <m2m_wifi_connect_sc+0x230>
   231ae:	e07d      	b.n	232ac <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   231b0:	687b      	ldr	r3, [r7, #4]
   231b2:	2288      	movs	r2, #136	; 0x88
   231b4:	18ba      	adds	r2, r7, r2
   231b6:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   231b8:	238c      	movs	r3, #140	; 0x8c
   231ba:	18fb      	adds	r3, r7, r3
   231bc:	681b      	ldr	r3, [r3, #0]
   231be:	2284      	movs	r2, #132	; 0x84
   231c0:	18ba      	adds	r2, r7, r2
   231c2:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   231c4:	2388      	movs	r3, #136	; 0x88
   231c6:	18fb      	adds	r3, r7, r3
   231c8:	681b      	ldr	r3, [r3, #0]
   231ca:	781b      	ldrb	r3, [r3, #0]
   231cc:	3b01      	subs	r3, #1
   231ce:	b2da      	uxtb	r2, r3
   231d0:	2384      	movs	r3, #132	; 0x84
   231d2:	18fb      	adds	r3, r7, r3
   231d4:	681b      	ldr	r3, [r3, #0]
   231d6:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   231d8:	2384      	movs	r3, #132	; 0x84
   231da:	18fb      	adds	r3, r7, r3
   231dc:	681b      	ldr	r3, [r3, #0]
   231de:	781b      	ldrb	r3, [r3, #0]
   231e0:	2b03      	cmp	r3, #3
   231e2:	d919      	bls.n	23218 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   231e4:	2394      	movs	r3, #148	; 0x94
   231e6:	009a      	lsls	r2, r3, #2
   231e8:	494d      	ldr	r1, [pc, #308]	; (23320 <m2m_wifi_connect_sc+0x3a0>)
   231ea:	4b4e      	ldr	r3, [pc, #312]	; (23324 <m2m_wifi_connect_sc+0x3a4>)
   231ec:	0018      	movs	r0, r3
   231ee:	4b4e      	ldr	r3, [pc, #312]	; (23328 <m2m_wifi_connect_sc+0x3a8>)
   231f0:	4798      	blx	r3
   231f2:	2384      	movs	r3, #132	; 0x84
   231f4:	18fb      	adds	r3, r7, r3
   231f6:	681b      	ldr	r3, [r3, #0]
   231f8:	781b      	ldrb	r3, [r3, #0]
   231fa:	001a      	movs	r2, r3
   231fc:	4b54      	ldr	r3, [pc, #336]	; (23350 <m2m_wifi_connect_sc+0x3d0>)
   231fe:	0011      	movs	r1, r2
   23200:	0018      	movs	r0, r3
   23202:	4b49      	ldr	r3, [pc, #292]	; (23328 <m2m_wifi_connect_sc+0x3a8>)
   23204:	4798      	blx	r3
   23206:	4b4a      	ldr	r3, [pc, #296]	; (23330 <m2m_wifi_connect_sc+0x3b0>)
   23208:	0018      	movs	r0, r3
   2320a:	4b47      	ldr	r3, [pc, #284]	; (23328 <m2m_wifi_connect_sc+0x3a8>)
   2320c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2320e:	2397      	movs	r3, #151	; 0x97
   23210:	18fb      	adds	r3, r7, r3
   23212:	22f4      	movs	r2, #244	; 0xf4
   23214:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   23216:	e0dc      	b.n	233d2 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   23218:	2388      	movs	r3, #136	; 0x88
   2321a:	18fb      	adds	r3, r7, r3
   2321c:	681b      	ldr	r3, [r3, #0]
   2321e:	785b      	ldrb	r3, [r3, #1]
   23220:	3b01      	subs	r3, #1
   23222:	b2da      	uxtb	r2, r3
   23224:	2384      	movs	r3, #132	; 0x84
   23226:	18fb      	adds	r3, r7, r3
   23228:	681b      	ldr	r3, [r3, #0]
   2322a:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   2322c:	2384      	movs	r3, #132	; 0x84
   2322e:	18fb      	adds	r3, r7, r3
   23230:	681b      	ldr	r3, [r3, #0]
   23232:	785b      	ldrb	r3, [r3, #1]
   23234:	2b0a      	cmp	r3, #10
   23236:	d01e      	beq.n	23276 <m2m_wifi_connect_sc+0x2f6>
   23238:	2384      	movs	r3, #132	; 0x84
   2323a:	18fb      	adds	r3, r7, r3
   2323c:	681b      	ldr	r3, [r3, #0]
   2323e:	785b      	ldrb	r3, [r3, #1]
   23240:	2b1a      	cmp	r3, #26
   23242:	d018      	beq.n	23276 <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   23244:	4a43      	ldr	r2, [pc, #268]	; (23354 <m2m_wifi_connect_sc+0x3d4>)
   23246:	4936      	ldr	r1, [pc, #216]	; (23320 <m2m_wifi_connect_sc+0x3a0>)
   23248:	4b36      	ldr	r3, [pc, #216]	; (23324 <m2m_wifi_connect_sc+0x3a4>)
   2324a:	0018      	movs	r0, r3
   2324c:	4b36      	ldr	r3, [pc, #216]	; (23328 <m2m_wifi_connect_sc+0x3a8>)
   2324e:	4798      	blx	r3
   23250:	2384      	movs	r3, #132	; 0x84
   23252:	18fb      	adds	r3, r7, r3
   23254:	681b      	ldr	r3, [r3, #0]
   23256:	785b      	ldrb	r3, [r3, #1]
   23258:	001a      	movs	r2, r3
   2325a:	4b3f      	ldr	r3, [pc, #252]	; (23358 <m2m_wifi_connect_sc+0x3d8>)
   2325c:	0011      	movs	r1, r2
   2325e:	0018      	movs	r0, r3
   23260:	4b31      	ldr	r3, [pc, #196]	; (23328 <m2m_wifi_connect_sc+0x3a8>)
   23262:	4798      	blx	r3
   23264:	4b32      	ldr	r3, [pc, #200]	; (23330 <m2m_wifi_connect_sc+0x3b0>)
   23266:	0018      	movs	r0, r3
   23268:	4b2f      	ldr	r3, [pc, #188]	; (23328 <m2m_wifi_connect_sc+0x3a8>)
   2326a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2326c:	2397      	movs	r3, #151	; 0x97
   2326e:	18fb      	adds	r3, r7, r3
   23270:	22f4      	movs	r2, #244	; 0xf4
   23272:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   23274:	e0ad      	b.n	233d2 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   23276:	2384      	movs	r3, #132	; 0x84
   23278:	18fb      	adds	r3, r7, r3
   2327a:	681b      	ldr	r3, [r3, #0]
   2327c:	1c98      	adds	r0, r3, #2
   2327e:	2388      	movs	r3, #136	; 0x88
   23280:	18fb      	adds	r3, r7, r3
   23282:	681b      	ldr	r3, [r3, #0]
   23284:	1c99      	adds	r1, r3, #2
   23286:	2388      	movs	r3, #136	; 0x88
   23288:	18fb      	adds	r3, r7, r3
   2328a:	681b      	ldr	r3, [r3, #0]
   2328c:	785b      	ldrb	r3, [r3, #1]
   2328e:	001a      	movs	r2, r3
   23290:	4b2e      	ldr	r3, [pc, #184]	; (2334c <m2m_wifi_connect_sc+0x3cc>)
   23292:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   23294:	2388      	movs	r3, #136	; 0x88
   23296:	18fb      	adds	r3, r7, r3
   23298:	681b      	ldr	r3, [r3, #0]
   2329a:	785b      	ldrb	r3, [r3, #1]
   2329c:	001a      	movs	r2, r3
   2329e:	2384      	movs	r3, #132	; 0x84
   232a0:	18fb      	adds	r3, r7, r3
   232a2:	681b      	ldr	r3, [r3, #0]
   232a4:	189b      	adds	r3, r3, r2
   232a6:	2200      	movs	r2, #0
   232a8:	709a      	strb	r2, [r3, #2]
   232aa:	e081      	b.n	233b0 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   232ac:	230a      	movs	r3, #10
   232ae:	18fb      	adds	r3, r7, r3
   232b0:	781b      	ldrb	r3, [r3, #0]
   232b2:	2b02      	cmp	r3, #2
   232b4:	d156      	bne.n	23364 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   232b6:	2382      	movs	r3, #130	; 0x82
   232b8:	18fc      	adds	r4, r7, r3
   232ba:	687b      	ldr	r3, [r7, #4]
   232bc:	0018      	movs	r0, r3
   232be:	4b1d      	ldr	r3, [pc, #116]	; (23334 <m2m_wifi_connect_sc+0x3b4>)
   232c0:	4798      	blx	r3
   232c2:	0003      	movs	r3, r0
   232c4:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   232c6:	2382      	movs	r3, #130	; 0x82
   232c8:	18fb      	adds	r3, r7, r3
   232ca:	881b      	ldrh	r3, [r3, #0]
   232cc:	2b00      	cmp	r3, #0
   232ce:	d004      	beq.n	232da <m2m_wifi_connect_sc+0x35a>
   232d0:	2382      	movs	r3, #130	; 0x82
   232d2:	18fb      	adds	r3, r7, r3
   232d4:	881b      	ldrh	r3, [r3, #0]
   232d6:	2b40      	cmp	r3, #64	; 0x40
   232d8:	d912      	bls.n	23300 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   232da:	4a20      	ldr	r2, [pc, #128]	; (2335c <m2m_wifi_connect_sc+0x3dc>)
   232dc:	4910      	ldr	r1, [pc, #64]	; (23320 <m2m_wifi_connect_sc+0x3a0>)
   232de:	4b11      	ldr	r3, [pc, #68]	; (23324 <m2m_wifi_connect_sc+0x3a4>)
   232e0:	0018      	movs	r0, r3
   232e2:	4b11      	ldr	r3, [pc, #68]	; (23328 <m2m_wifi_connect_sc+0x3a8>)
   232e4:	4798      	blx	r3
   232e6:	4b1e      	ldr	r3, [pc, #120]	; (23360 <m2m_wifi_connect_sc+0x3e0>)
   232e8:	0018      	movs	r0, r3
   232ea:	4b0f      	ldr	r3, [pc, #60]	; (23328 <m2m_wifi_connect_sc+0x3a8>)
   232ec:	4798      	blx	r3
   232ee:	4b10      	ldr	r3, [pc, #64]	; (23330 <m2m_wifi_connect_sc+0x3b0>)
   232f0:	0018      	movs	r0, r3
   232f2:	4b0d      	ldr	r3, [pc, #52]	; (23328 <m2m_wifi_connect_sc+0x3a8>)
   232f4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   232f6:	2397      	movs	r3, #151	; 0x97
   232f8:	18fb      	adds	r3, r7, r3
   232fa:	22f4      	movs	r2, #244	; 0xf4
   232fc:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   232fe:	e068      	b.n	233d2 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   23300:	238c      	movs	r3, #140	; 0x8c
   23302:	18fb      	adds	r3, r7, r3
   23304:	6818      	ldr	r0, [r3, #0]
   23306:	2382      	movs	r3, #130	; 0x82
   23308:	18fb      	adds	r3, r7, r3
   2330a:	881b      	ldrh	r3, [r3, #0]
   2330c:	3301      	adds	r3, #1
   2330e:	001a      	movs	r2, r3
   23310:	687b      	ldr	r3, [r7, #4]
   23312:	0019      	movs	r1, r3
   23314:	4b0d      	ldr	r3, [pc, #52]	; (2334c <m2m_wifi_connect_sc+0x3cc>)
   23316:	4798      	blx	r3
   23318:	e04a      	b.n	233b0 <m2m_wifi_connect_sc+0x430>
   2331a:	46c0      	nop			; (mov r8, r8)
   2331c:	0000021a 	.word	0x0000021a
   23320:	0003a924 	.word	0x0003a924
   23324:	0003a56c 	.word	0x0003a56c
   23328:	0001ee19 	.word	0x0001ee19
   2332c:	0003a7ac 	.word	0x0003a7ac
   23330:	0003a568 	.word	0x0003a568
   23334:	00021bef 	.word	0x00021bef
   23338:	00000226 	.word	0x00000226
   2333c:	0003a7c0 	.word	0x0003a7c0
   23340:	0003a7d0 	.word	0x0003a7d0
   23344:	00000239 	.word	0x00000239
   23348:	0003a7e4 	.word	0x0003a7e4
   2334c:	00021b75 	.word	0x00021b75
   23350:	0003a7f0 	.word	0x0003a7f0
   23354:	00000257 	.word	0x00000257
   23358:	0003a80c 	.word	0x0003a80c
   2335c:	00000266 	.word	0x00000266
   23360:	0003a828 	.word	0x0003a828
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   23364:	230a      	movs	r3, #10
   23366:	18fb      	adds	r3, r7, r3
   23368:	781b      	ldrb	r3, [r3, #0]
   2336a:	2b04      	cmp	r3, #4
   2336c:	d108      	bne.n	23380 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   2336e:	238c      	movs	r3, #140	; 0x8c
   23370:	18fb      	adds	r3, r7, r3
   23372:	681b      	ldr	r3, [r3, #0]
   23374:	6879      	ldr	r1, [r7, #4]
   23376:	223e      	movs	r2, #62	; 0x3e
   23378:	0018      	movs	r0, r3
   2337a:	4b1a      	ldr	r3, [pc, #104]	; (233e4 <m2m_wifi_connect_sc+0x464>)
   2337c:	4798      	blx	r3
   2337e:	e017      	b.n	233b0 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   23380:	230a      	movs	r3, #10
   23382:	18fb      	adds	r3, r7, r3
   23384:	781b      	ldrb	r3, [r3, #0]
   23386:	2b01      	cmp	r3, #1
   23388:	d012      	beq.n	233b0 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   2338a:	4a17      	ldr	r2, [pc, #92]	; (233e8 <m2m_wifi_connect_sc+0x468>)
   2338c:	4917      	ldr	r1, [pc, #92]	; (233ec <m2m_wifi_connect_sc+0x46c>)
   2338e:	4b18      	ldr	r3, [pc, #96]	; (233f0 <m2m_wifi_connect_sc+0x470>)
   23390:	0018      	movs	r0, r3
   23392:	4b18      	ldr	r3, [pc, #96]	; (233f4 <m2m_wifi_connect_sc+0x474>)
   23394:	4798      	blx	r3
   23396:	4b18      	ldr	r3, [pc, #96]	; (233f8 <m2m_wifi_connect_sc+0x478>)
   23398:	0018      	movs	r0, r3
   2339a:	4b16      	ldr	r3, [pc, #88]	; (233f4 <m2m_wifi_connect_sc+0x474>)
   2339c:	4798      	blx	r3
   2339e:	4b17      	ldr	r3, [pc, #92]	; (233fc <m2m_wifi_connect_sc+0x47c>)
   233a0:	0018      	movs	r0, r3
   233a2:	4b14      	ldr	r3, [pc, #80]	; (233f4 <m2m_wifi_connect_sc+0x474>)
   233a4:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   233a6:	2397      	movs	r3, #151	; 0x97
   233a8:	18fb      	adds	r3, r7, r3
   233aa:	22f4      	movs	r2, #244	; 0xf4
   233ac:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   233ae:	e010      	b.n	233d2 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   233b0:	2397      	movs	r3, #151	; 0x97
   233b2:	18fc      	adds	r4, r7, r3
   233b4:	2314      	movs	r3, #20
   233b6:	18fa      	adds	r2, r7, r3
   233b8:	2300      	movs	r3, #0
   233ba:	9302      	str	r3, [sp, #8]
   233bc:	2300      	movs	r3, #0
   233be:	9301      	str	r3, [sp, #4]
   233c0:	2300      	movs	r3, #0
   233c2:	9300      	str	r3, [sp, #0]
   233c4:	236c      	movs	r3, #108	; 0x6c
   233c6:	2128      	movs	r1, #40	; 0x28
   233c8:	2001      	movs	r0, #1
   233ca:	4d0d      	ldr	r5, [pc, #52]	; (23400 <m2m_wifi_connect_sc+0x480>)
   233cc:	47a8      	blx	r5
   233ce:	0003      	movs	r3, r0
   233d0:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   233d2:	2397      	movs	r3, #151	; 0x97
   233d4:	18fb      	adds	r3, r7, r3
   233d6:	781b      	ldrb	r3, [r3, #0]
   233d8:	b25b      	sxtb	r3, r3
}
   233da:	0018      	movs	r0, r3
   233dc:	46bd      	mov	sp, r7
   233de:	b026      	add	sp, #152	; 0x98
   233e0:	bdb0      	pop	{r4, r5, r7, pc}
   233e2:	46c0      	nop			; (mov r8, r8)
   233e4:	00021b75 	.word	0x00021b75
   233e8:	00000276 	.word	0x00000276
   233ec:	0003a924 	.word	0x0003a924
   233f0:	0003a56c 	.word	0x0003a56c
   233f4:	0001ee19 	.word	0x0001ee19
   233f8:	0003a844 	.word	0x0003a844
   233fc:	0003a568 	.word	0x0003a568
   23400:	00021e11 	.word	0x00021e11

00023404 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   23404:	b580      	push	{r7, lr}
   23406:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   23408:	2300      	movs	r3, #0
}
   2340a:	0018      	movs	r0, r3
   2340c:	46bd      	mov	sp, r7
   2340e:	bd80      	pop	{r7, pc}

00023410 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   23410:	b590      	push	{r4, r7, lr}
   23412:	b087      	sub	sp, #28
   23414:	af00      	add	r7, sp, #0
   23416:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   23418:	2317      	movs	r3, #23
   2341a:	18fb      	adds	r3, r7, r3
   2341c:	2200      	movs	r2, #0
   2341e:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   23420:	687b      	ldr	r3, [r7, #4]
   23422:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   23424:	693b      	ldr	r3, [r7, #16]
   23426:	2280      	movs	r2, #128	; 0x80
   23428:	0052      	lsls	r2, r2, #1
   2342a:	4313      	orrs	r3, r2
   2342c:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   2342e:	693a      	ldr	r2, [r7, #16]
   23430:	23a5      	movs	r3, #165	; 0xa5
   23432:	015b      	lsls	r3, r3, #5
   23434:	0011      	movs	r1, r2
   23436:	0018      	movs	r0, r3
   23438:	4b12      	ldr	r3, [pc, #72]	; (23484 <chip_apply_conf+0x74>)
   2343a:	4798      	blx	r3
		if(val32 != 0) {		
   2343c:	693b      	ldr	r3, [r7, #16]
   2343e:	2b00      	cmp	r3, #0
   23440:	d018      	beq.n	23474 <chip_apply_conf+0x64>
			uint32 reg = 0;
   23442:	2300      	movs	r3, #0
   23444:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   23446:	2317      	movs	r3, #23
   23448:	18fc      	adds	r4, r7, r3
   2344a:	230c      	movs	r3, #12
   2344c:	18fa      	adds	r2, r7, r3
   2344e:	23a5      	movs	r3, #165	; 0xa5
   23450:	015b      	lsls	r3, r3, #5
   23452:	0011      	movs	r1, r2
   23454:	0018      	movs	r0, r3
   23456:	4b0c      	ldr	r3, [pc, #48]	; (23488 <chip_apply_conf+0x78>)
   23458:	4798      	blx	r3
   2345a:	0003      	movs	r3, r0
   2345c:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   2345e:	2317      	movs	r3, #23
   23460:	18fb      	adds	r3, r7, r3
   23462:	781b      	ldrb	r3, [r3, #0]
   23464:	b25b      	sxtb	r3, r3
   23466:	2b00      	cmp	r3, #0
   23468:	d1e1      	bne.n	2342e <chip_apply_conf+0x1e>
				if(reg == val32)
   2346a:	68fa      	ldr	r2, [r7, #12]
   2346c:	693b      	ldr	r3, [r7, #16]
   2346e:	429a      	cmp	r2, r3
   23470:	d002      	beq.n	23478 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   23472:	e7dc      	b.n	2342e <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   23474:	46c0      	nop			; (mov r8, r8)
   23476:	e000      	b.n	2347a <chip_apply_conf+0x6a>
					break;
   23478:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   2347a:	2300      	movs	r3, #0
}
   2347c:	0018      	movs	r0, r3
   2347e:	46bd      	mov	sp, r7
   23480:	b007      	add	sp, #28
   23482:	bd90      	pop	{r4, r7, pc}
   23484:	00023c65 	.word	0x00023c65
   23488:	00023c41 	.word	0x00023c41

0002348c <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   2348c:	b590      	push	{r4, r7, lr}
   2348e:	b083      	sub	sp, #12
   23490:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   23492:	2300      	movs	r3, #0
   23494:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   23496:	1dfb      	adds	r3, r7, #7
   23498:	2200      	movs	r2, #0
   2349a:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   2349c:	1dfc      	adds	r4, r7, #7
   2349e:	003b      	movs	r3, r7
   234a0:	4a24      	ldr	r2, [pc, #144]	; (23534 <enable_interrupts+0xa8>)
   234a2:	0019      	movs	r1, r3
   234a4:	0010      	movs	r0, r2
   234a6:	4b24      	ldr	r3, [pc, #144]	; (23538 <enable_interrupts+0xac>)
   234a8:	4798      	blx	r3
   234aa:	0003      	movs	r3, r0
   234ac:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   234ae:	1dfb      	adds	r3, r7, #7
   234b0:	781b      	ldrb	r3, [r3, #0]
   234b2:	b25b      	sxtb	r3, r3
   234b4:	2b00      	cmp	r3, #0
   234b6:	d131      	bne.n	2351c <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   234b8:	683b      	ldr	r3, [r7, #0]
   234ba:	2280      	movs	r2, #128	; 0x80
   234bc:	0052      	lsls	r2, r2, #1
   234be:	4313      	orrs	r3, r2
   234c0:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   234c2:	683b      	ldr	r3, [r7, #0]
   234c4:	1dfc      	adds	r4, r7, #7
   234c6:	4a1b      	ldr	r2, [pc, #108]	; (23534 <enable_interrupts+0xa8>)
   234c8:	0019      	movs	r1, r3
   234ca:	0010      	movs	r0, r2
   234cc:	4b1b      	ldr	r3, [pc, #108]	; (2353c <enable_interrupts+0xb0>)
   234ce:	4798      	blx	r3
   234d0:	0003      	movs	r3, r0
   234d2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   234d4:	1dfb      	adds	r3, r7, #7
   234d6:	781b      	ldrb	r3, [r3, #0]
   234d8:	b25b      	sxtb	r3, r3
   234da:	2b00      	cmp	r3, #0
   234dc:	d120      	bne.n	23520 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   234de:	1dfc      	adds	r4, r7, #7
   234e0:	003a      	movs	r2, r7
   234e2:	23d0      	movs	r3, #208	; 0xd0
   234e4:	015b      	lsls	r3, r3, #5
   234e6:	0011      	movs	r1, r2
   234e8:	0018      	movs	r0, r3
   234ea:	4b13      	ldr	r3, [pc, #76]	; (23538 <enable_interrupts+0xac>)
   234ec:	4798      	blx	r3
   234ee:	0003      	movs	r3, r0
   234f0:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   234f2:	1dfb      	adds	r3, r7, #7
   234f4:	781b      	ldrb	r3, [r3, #0]
   234f6:	b25b      	sxtb	r3, r3
   234f8:	2b00      	cmp	r3, #0
   234fa:	d113      	bne.n	23524 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   234fc:	683b      	ldr	r3, [r7, #0]
   234fe:	2280      	movs	r2, #128	; 0x80
   23500:	0252      	lsls	r2, r2, #9
   23502:	4313      	orrs	r3, r2
   23504:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   23506:	683a      	ldr	r2, [r7, #0]
   23508:	1dfc      	adds	r4, r7, #7
   2350a:	23d0      	movs	r3, #208	; 0xd0
   2350c:	015b      	lsls	r3, r3, #5
   2350e:	0011      	movs	r1, r2
   23510:	0018      	movs	r0, r3
   23512:	4b0a      	ldr	r3, [pc, #40]	; (2353c <enable_interrupts+0xb0>)
   23514:	4798      	blx	r3
   23516:	0003      	movs	r3, r0
   23518:	7023      	strb	r3, [r4, #0]
   2351a:	e004      	b.n	23526 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   2351c:	46c0      	nop			; (mov r8, r8)
   2351e:	e002      	b.n	23526 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   23520:	46c0      	nop			; (mov r8, r8)
   23522:	e000      	b.n	23526 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   23524:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   23526:	1dfb      	adds	r3, r7, #7
   23528:	781b      	ldrb	r3, [r3, #0]
   2352a:	b25b      	sxtb	r3, r3
}
   2352c:	0018      	movs	r0, r3
   2352e:	46bd      	mov	sp, r7
   23530:	b003      	add	sp, #12
   23532:	bd90      	pop	{r4, r7, pc}
   23534:	00001408 	.word	0x00001408
   23538:	00023c41 	.word	0x00023c41
   2353c:	00023c65 	.word	0x00023c65

00023540 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   23540:	b580      	push	{r7, lr}
   23542:	b082      	sub	sp, #8
   23544:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   23546:	4b32      	ldr	r3, [pc, #200]	; (23610 <nmi_get_chipid+0xd0>)
   23548:	681b      	ldr	r3, [r3, #0]
   2354a:	2b00      	cmp	r3, #0
   2354c:	d159      	bne.n	23602 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   2354e:	4a30      	ldr	r2, [pc, #192]	; (23610 <nmi_get_chipid+0xd0>)
   23550:	2380      	movs	r3, #128	; 0x80
   23552:	015b      	lsls	r3, r3, #5
   23554:	0011      	movs	r1, r2
   23556:	0018      	movs	r0, r3
   23558:	4b2e      	ldr	r3, [pc, #184]	; (23614 <nmi_get_chipid+0xd4>)
   2355a:	4798      	blx	r3
   2355c:	1e03      	subs	r3, r0, #0
   2355e:	d004      	beq.n	2356a <nmi_get_chipid+0x2a>
			chipid = 0;
   23560:	4b2b      	ldr	r3, [pc, #172]	; (23610 <nmi_get_chipid+0xd0>)
   23562:	2200      	movs	r2, #0
   23564:	601a      	str	r2, [r3, #0]
			return 0;
   23566:	2300      	movs	r3, #0
   23568:	e04d      	b.n	23606 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   2356a:	1d3b      	adds	r3, r7, #4
   2356c:	4a2a      	ldr	r2, [pc, #168]	; (23618 <nmi_get_chipid+0xd8>)
   2356e:	0019      	movs	r1, r3
   23570:	0010      	movs	r0, r2
   23572:	4b28      	ldr	r3, [pc, #160]	; (23614 <nmi_get_chipid+0xd4>)
   23574:	4798      	blx	r3
   23576:	1e03      	subs	r3, r0, #0
   23578:	d004      	beq.n	23584 <nmi_get_chipid+0x44>
			chipid = 0;
   2357a:	4b25      	ldr	r3, [pc, #148]	; (23610 <nmi_get_chipid+0xd0>)
   2357c:	2200      	movs	r2, #0
   2357e:	601a      	str	r2, [r3, #0]
			return 0;
   23580:	2300      	movs	r3, #0
   23582:	e040      	b.n	23606 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   23584:	4b22      	ldr	r3, [pc, #136]	; (23610 <nmi_get_chipid+0xd0>)
   23586:	681b      	ldr	r3, [r3, #0]
   23588:	4a24      	ldr	r2, [pc, #144]	; (2361c <nmi_get_chipid+0xdc>)
   2358a:	4293      	cmp	r3, r2
   2358c:	d106      	bne.n	2359c <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   2358e:	687b      	ldr	r3, [r7, #4]
   23590:	2b01      	cmp	r3, #1
   23592:	d029      	beq.n	235e8 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   23594:	4b1e      	ldr	r3, [pc, #120]	; (23610 <nmi_get_chipid+0xd0>)
   23596:	4a22      	ldr	r2, [pc, #136]	; (23620 <nmi_get_chipid+0xe0>)
   23598:	601a      	str	r2, [r3, #0]
   2359a:	e025      	b.n	235e8 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   2359c:	4b1c      	ldr	r3, [pc, #112]	; (23610 <nmi_get_chipid+0xd0>)
   2359e:	681b      	ldr	r3, [r3, #0]
   235a0:	4a20      	ldr	r2, [pc, #128]	; (23624 <nmi_get_chipid+0xe4>)
   235a2:	4293      	cmp	r3, r2
   235a4:	d10d      	bne.n	235c2 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   235a6:	687b      	ldr	r3, [r7, #4]
   235a8:	2b03      	cmp	r3, #3
   235aa:	d01d      	beq.n	235e8 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   235ac:	687b      	ldr	r3, [r7, #4]
   235ae:	2b04      	cmp	r3, #4
   235b0:	d103      	bne.n	235ba <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   235b2:	4b17      	ldr	r3, [pc, #92]	; (23610 <nmi_get_chipid+0xd0>)
   235b4:	4a1c      	ldr	r2, [pc, #112]	; (23628 <nmi_get_chipid+0xe8>)
   235b6:	601a      	str	r2, [r3, #0]
   235b8:	e016      	b.n	235e8 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   235ba:	4b15      	ldr	r3, [pc, #84]	; (23610 <nmi_get_chipid+0xd0>)
   235bc:	4a1b      	ldr	r2, [pc, #108]	; (2362c <nmi_get_chipid+0xec>)
   235be:	601a      	str	r2, [r3, #0]
   235c0:	e012      	b.n	235e8 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   235c2:	4b13      	ldr	r3, [pc, #76]	; (23610 <nmi_get_chipid+0xd0>)
   235c4:	681b      	ldr	r3, [r3, #0]
   235c6:	4a1a      	ldr	r2, [pc, #104]	; (23630 <nmi_get_chipid+0xf0>)
   235c8:	4293      	cmp	r3, r2
   235ca:	d10d      	bne.n	235e8 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   235cc:	4a10      	ldr	r2, [pc, #64]	; (23610 <nmi_get_chipid+0xd0>)
   235ce:	23ec      	movs	r3, #236	; 0xec
   235d0:	039b      	lsls	r3, r3, #14
   235d2:	0011      	movs	r1, r2
   235d4:	0018      	movs	r0, r3
   235d6:	4b0f      	ldr	r3, [pc, #60]	; (23614 <nmi_get_chipid+0xd4>)
   235d8:	4798      	blx	r3
   235da:	1e03      	subs	r3, r0, #0
   235dc:	d004      	beq.n	235e8 <nmi_get_chipid+0xa8>
			chipid = 0;
   235de:	4b0c      	ldr	r3, [pc, #48]	; (23610 <nmi_get_chipid+0xd0>)
   235e0:	2200      	movs	r2, #0
   235e2:	601a      	str	r2, [r3, #0]
			return 0;
   235e4:	2300      	movs	r3, #0
   235e6:	e00e      	b.n	23606 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   235e8:	4b09      	ldr	r3, [pc, #36]	; (23610 <nmi_get_chipid+0xd0>)
   235ea:	681b      	ldr	r3, [r3, #0]
   235ec:	4a11      	ldr	r2, [pc, #68]	; (23634 <nmi_get_chipid+0xf4>)
   235ee:	401a      	ands	r2, r3
   235f0:	4b07      	ldr	r3, [pc, #28]	; (23610 <nmi_get_chipid+0xd0>)
   235f2:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   235f4:	4b06      	ldr	r3, [pc, #24]	; (23610 <nmi_get_chipid+0xd0>)
   235f6:	681b      	ldr	r3, [r3, #0]
   235f8:	22a0      	movs	r2, #160	; 0xa0
   235fa:	02d2      	lsls	r2, r2, #11
   235fc:	431a      	orrs	r2, r3
   235fe:	4b04      	ldr	r3, [pc, #16]	; (23610 <nmi_get_chipid+0xd0>)
   23600:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   23602:	4b03      	ldr	r3, [pc, #12]	; (23610 <nmi_get_chipid+0xd0>)
   23604:	681b      	ldr	r3, [r3, #0]
}
   23606:	0018      	movs	r0, r3
   23608:	46bd      	mov	sp, r7
   2360a:	b002      	add	sp, #8
   2360c:	bd80      	pop	{r7, pc}
   2360e:	46c0      	nop			; (mov r8, r8)
   23610:	200042b0 	.word	0x200042b0
   23614:	00023c41 	.word	0x00023c41
   23618:	000013f4 	.word	0x000013f4
   2361c:	001002a0 	.word	0x001002a0
   23620:	001002a1 	.word	0x001002a1
   23624:	001002b0 	.word	0x001002b0
   23628:	001002b1 	.word	0x001002b1
   2362c:	001002b2 	.word	0x001002b2
   23630:	001000f0 	.word	0x001000f0
   23634:	fff0ffff 	.word	0xfff0ffff

00023638 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   23638:	b590      	push	{r4, r7, lr}
   2363a:	b083      	sub	sp, #12
   2363c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   2363e:	1dfb      	adds	r3, r7, #7
   23640:	2200      	movs	r2, #0
   23642:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   23644:	1dfc      	adds	r4, r7, #7
   23646:	003b      	movs	r3, r7
   23648:	0019      	movs	r1, r3
   2364a:	2010      	movs	r0, #16
   2364c:	4b2e      	ldr	r3, [pc, #184]	; (23708 <chip_sleep+0xd0>)
   2364e:	4798      	blx	r3
   23650:	0003      	movs	r3, r0
   23652:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   23654:	1dfb      	adds	r3, r7, #7
   23656:	781b      	ldrb	r3, [r3, #0]
   23658:	b25b      	sxtb	r3, r3
   2365a:	2b00      	cmp	r3, #0
   2365c:	d145      	bne.n	236ea <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   2365e:	683b      	ldr	r3, [r7, #0]
   23660:	2201      	movs	r2, #1
   23662:	4013      	ands	r3, r2
   23664:	d000      	beq.n	23668 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   23666:	e7ed      	b.n	23644 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   23668:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   2366a:	1dfc      	adds	r4, r7, #7
   2366c:	003b      	movs	r3, r7
   2366e:	0019      	movs	r1, r3
   23670:	2001      	movs	r0, #1
   23672:	4b25      	ldr	r3, [pc, #148]	; (23708 <chip_sleep+0xd0>)
   23674:	4798      	blx	r3
   23676:	0003      	movs	r3, r0
   23678:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2367a:	1dfb      	adds	r3, r7, #7
   2367c:	781b      	ldrb	r3, [r3, #0]
   2367e:	b25b      	sxtb	r3, r3
   23680:	2b00      	cmp	r3, #0
   23682:	d134      	bne.n	236ee <chip_sleep+0xb6>
	if(reg & NBIT1)
   23684:	683b      	ldr	r3, [r7, #0]
   23686:	2202      	movs	r2, #2
   23688:	4013      	ands	r3, r2
   2368a:	d010      	beq.n	236ae <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   2368c:	683b      	ldr	r3, [r7, #0]
   2368e:	2202      	movs	r2, #2
   23690:	4393      	bics	r3, r2
   23692:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   23694:	683b      	ldr	r3, [r7, #0]
   23696:	1dfc      	adds	r4, r7, #7
   23698:	0019      	movs	r1, r3
   2369a:	2001      	movs	r0, #1
   2369c:	4b1b      	ldr	r3, [pc, #108]	; (2370c <chip_sleep+0xd4>)
   2369e:	4798      	blx	r3
   236a0:	0003      	movs	r3, r0
   236a2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   236a4:	1dfb      	adds	r3, r7, #7
   236a6:	781b      	ldrb	r3, [r3, #0]
   236a8:	b25b      	sxtb	r3, r3
   236aa:	2b00      	cmp	r3, #0
   236ac:	d121      	bne.n	236f2 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   236ae:	1dfc      	adds	r4, r7, #7
   236b0:	003b      	movs	r3, r7
   236b2:	0019      	movs	r1, r3
   236b4:	200b      	movs	r0, #11
   236b6:	4b14      	ldr	r3, [pc, #80]	; (23708 <chip_sleep+0xd0>)
   236b8:	4798      	blx	r3
   236ba:	0003      	movs	r3, r0
   236bc:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   236be:	1dfb      	adds	r3, r7, #7
   236c0:	781b      	ldrb	r3, [r3, #0]
   236c2:	b25b      	sxtb	r3, r3
   236c4:	2b00      	cmp	r3, #0
   236c6:	d116      	bne.n	236f6 <chip_sleep+0xbe>
	if(reg & NBIT0)
   236c8:	683b      	ldr	r3, [r7, #0]
   236ca:	2201      	movs	r2, #1
   236cc:	4013      	ands	r3, r2
   236ce:	d013      	beq.n	236f8 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   236d0:	683b      	ldr	r3, [r7, #0]
   236d2:	2201      	movs	r2, #1
   236d4:	4393      	bics	r3, r2
   236d6:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   236d8:	683b      	ldr	r3, [r7, #0]
   236da:	1dfc      	adds	r4, r7, #7
   236dc:	0019      	movs	r1, r3
   236de:	200b      	movs	r0, #11
   236e0:	4b0a      	ldr	r3, [pc, #40]	; (2370c <chip_sleep+0xd4>)
   236e2:	4798      	blx	r3
   236e4:	0003      	movs	r3, r0
   236e6:	7023      	strb	r3, [r4, #0]
   236e8:	e006      	b.n	236f8 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   236ea:	46c0      	nop			; (mov r8, r8)
   236ec:	e004      	b.n	236f8 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   236ee:	46c0      	nop			; (mov r8, r8)
   236f0:	e002      	b.n	236f8 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   236f2:	46c0      	nop			; (mov r8, r8)
   236f4:	e000      	b.n	236f8 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   236f6:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   236f8:	1dfb      	adds	r3, r7, #7
   236fa:	781b      	ldrb	r3, [r3, #0]
   236fc:	b25b      	sxtb	r3, r3
}
   236fe:	0018      	movs	r0, r3
   23700:	46bd      	mov	sp, r7
   23702:	b003      	add	sp, #12
   23704:	bd90      	pop	{r4, r7, pc}
   23706:	46c0      	nop			; (mov r8, r8)
   23708:	00023c41 	.word	0x00023c41
   2370c:	00023c65 	.word	0x00023c65

00023710 <chip_wake>:
sint8 chip_wake(void)
{
   23710:	b590      	push	{r4, r7, lr}
   23712:	b085      	sub	sp, #20
   23714:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   23716:	230f      	movs	r3, #15
   23718:	18fb      	adds	r3, r7, r3
   2371a:	2200      	movs	r2, #0
   2371c:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   2371e:	2300      	movs	r3, #0
   23720:	607b      	str	r3, [r7, #4]
   23722:	2300      	movs	r3, #0
   23724:	603b      	str	r3, [r7, #0]
   23726:	2300      	movs	r3, #0
   23728:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   2372a:	230f      	movs	r3, #15
   2372c:	18fc      	adds	r4, r7, r3
   2372e:	1d3b      	adds	r3, r7, #4
   23730:	0019      	movs	r1, r3
   23732:	200b      	movs	r0, #11
   23734:	4b4e      	ldr	r3, [pc, #312]	; (23870 <chip_wake+0x160>)
   23736:	4798      	blx	r3
   23738:	0003      	movs	r3, r0
   2373a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   2373c:	230f      	movs	r3, #15
   2373e:	18fb      	adds	r3, r7, r3
   23740:	781b      	ldrb	r3, [r3, #0]
   23742:	b25b      	sxtb	r3, r3
   23744:	2b00      	cmp	r3, #0
   23746:	d000      	beq.n	2374a <chip_wake+0x3a>
   23748:	e082      	b.n	23850 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   2374a:	687b      	ldr	r3, [r7, #4]
   2374c:	2201      	movs	r2, #1
   2374e:	4013      	ands	r3, r2
   23750:	d111      	bne.n	23776 <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   23752:	687b      	ldr	r3, [r7, #4]
   23754:	2201      	movs	r2, #1
   23756:	4313      	orrs	r3, r2
   23758:	220f      	movs	r2, #15
   2375a:	18bc      	adds	r4, r7, r2
   2375c:	0019      	movs	r1, r3
   2375e:	200b      	movs	r0, #11
   23760:	4b44      	ldr	r3, [pc, #272]	; (23874 <chip_wake+0x164>)
   23762:	4798      	blx	r3
   23764:	0003      	movs	r3, r0
   23766:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   23768:	230f      	movs	r3, #15
   2376a:	18fb      	adds	r3, r7, r3
   2376c:	781b      	ldrb	r3, [r3, #0]
   2376e:	b25b      	sxtb	r3, r3
   23770:	2b00      	cmp	r3, #0
   23772:	d000      	beq.n	23776 <chip_wake+0x66>
   23774:	e06e      	b.n	23854 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   23776:	230f      	movs	r3, #15
   23778:	18fc      	adds	r4, r7, r3
   2377a:	1d3b      	adds	r3, r7, #4
   2377c:	0019      	movs	r1, r3
   2377e:	2001      	movs	r0, #1
   23780:	4b3b      	ldr	r3, [pc, #236]	; (23870 <chip_wake+0x160>)
   23782:	4798      	blx	r3
   23784:	0003      	movs	r3, r0
   23786:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   23788:	230f      	movs	r3, #15
   2378a:	18fb      	adds	r3, r7, r3
   2378c:	781b      	ldrb	r3, [r3, #0]
   2378e:	b25b      	sxtb	r3, r3
   23790:	2b00      	cmp	r3, #0
   23792:	d161      	bne.n	23858 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   23794:	687b      	ldr	r3, [r7, #4]
   23796:	2202      	movs	r2, #2
   23798:	4013      	ands	r3, r2
   2379a:	d110      	bne.n	237be <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   2379c:	687b      	ldr	r3, [r7, #4]
   2379e:	2202      	movs	r2, #2
   237a0:	4313      	orrs	r3, r2
   237a2:	220f      	movs	r2, #15
   237a4:	18bc      	adds	r4, r7, r2
   237a6:	0019      	movs	r1, r3
   237a8:	2001      	movs	r0, #1
   237aa:	4b32      	ldr	r3, [pc, #200]	; (23874 <chip_wake+0x164>)
   237ac:	4798      	blx	r3
   237ae:	0003      	movs	r3, r0
   237b0:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   237b2:	230f      	movs	r3, #15
   237b4:	18fb      	adds	r3, r7, r3
   237b6:	781b      	ldrb	r3, [r3, #0]
   237b8:	b25b      	sxtb	r3, r3
   237ba:	2b00      	cmp	r3, #0
   237bc:	d14e      	bne.n	2385c <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   237be:	230f      	movs	r3, #15
   237c0:	18fc      	adds	r4, r7, r3
   237c2:	003b      	movs	r3, r7
   237c4:	0019      	movs	r1, r3
   237c6:	200f      	movs	r0, #15
   237c8:	4b29      	ldr	r3, [pc, #164]	; (23870 <chip_wake+0x160>)
   237ca:	4798      	blx	r3
   237cc:	0003      	movs	r3, r0
   237ce:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   237d0:	230f      	movs	r3, #15
   237d2:	18fb      	adds	r3, r7, r3
   237d4:	781b      	ldrb	r3, [r3, #0]
   237d6:	b25b      	sxtb	r3, r3
   237d8:	2b00      	cmp	r3, #0
   237da:	d014      	beq.n	23806 <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   237dc:	23a8      	movs	r3, #168	; 0xa8
   237de:	005a      	lsls	r2, r3, #1
   237e0:	4925      	ldr	r1, [pc, #148]	; (23878 <chip_wake+0x168>)
   237e2:	4b26      	ldr	r3, [pc, #152]	; (2387c <chip_wake+0x16c>)
   237e4:	0018      	movs	r0, r3
   237e6:	4b26      	ldr	r3, [pc, #152]	; (23880 <chip_wake+0x170>)
   237e8:	4798      	blx	r3
   237ea:	230f      	movs	r3, #15
   237ec:	18fb      	adds	r3, r7, r3
   237ee:	2100      	movs	r1, #0
   237f0:	5659      	ldrsb	r1, [r3, r1]
   237f2:	683a      	ldr	r2, [r7, #0]
   237f4:	4b23      	ldr	r3, [pc, #140]	; (23884 <chip_wake+0x174>)
   237f6:	0018      	movs	r0, r3
   237f8:	4b21      	ldr	r3, [pc, #132]	; (23880 <chip_wake+0x170>)
   237fa:	4798      	blx	r3
   237fc:	4b22      	ldr	r3, [pc, #136]	; (23888 <chip_wake+0x178>)
   237fe:	0018      	movs	r0, r3
   23800:	4b1f      	ldr	r3, [pc, #124]	; (23880 <chip_wake+0x170>)
   23802:	4798      	blx	r3
			goto _WAKE_EXIT;
   23804:	e02b      	b.n	2385e <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   23806:	683b      	ldr	r3, [r7, #0]
   23808:	2204      	movs	r2, #4
   2380a:	4013      	ands	r3, r2
   2380c:	d11c      	bne.n	23848 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   2380e:	2002      	movs	r0, #2
   23810:	4b1e      	ldr	r3, [pc, #120]	; (2388c <chip_wake+0x17c>)
   23812:	4798      	blx	r3
		trials++;
   23814:	68bb      	ldr	r3, [r7, #8]
   23816:	3301      	adds	r3, #1
   23818:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   2381a:	68bb      	ldr	r3, [r7, #8]
   2381c:	2b04      	cmp	r3, #4
   2381e:	d9ce      	bls.n	237be <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   23820:	23ad      	movs	r3, #173	; 0xad
   23822:	005a      	lsls	r2, r3, #1
   23824:	4914      	ldr	r1, [pc, #80]	; (23878 <chip_wake+0x168>)
   23826:	4b15      	ldr	r3, [pc, #84]	; (2387c <chip_wake+0x16c>)
   23828:	0018      	movs	r0, r3
   2382a:	4b15      	ldr	r3, [pc, #84]	; (23880 <chip_wake+0x170>)
   2382c:	4798      	blx	r3
   2382e:	4b18      	ldr	r3, [pc, #96]	; (23890 <chip_wake+0x180>)
   23830:	0018      	movs	r0, r3
   23832:	4b13      	ldr	r3, [pc, #76]	; (23880 <chip_wake+0x170>)
   23834:	4798      	blx	r3
   23836:	4b14      	ldr	r3, [pc, #80]	; (23888 <chip_wake+0x178>)
   23838:	0018      	movs	r0, r3
   2383a:	4b11      	ldr	r3, [pc, #68]	; (23880 <chip_wake+0x170>)
   2383c:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   2383e:	230f      	movs	r3, #15
   23840:	18fb      	adds	r3, r7, r3
   23842:	22fc      	movs	r2, #252	; 0xfc
   23844:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   23846:	e00a      	b.n	2385e <chip_wake+0x14e>
			break;
   23848:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   2384a:	4b12      	ldr	r3, [pc, #72]	; (23894 <chip_wake+0x184>)
   2384c:	4798      	blx	r3
   2384e:	e006      	b.n	2385e <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   23850:	46c0      	nop			; (mov r8, r8)
   23852:	e004      	b.n	2385e <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   23854:	46c0      	nop			; (mov r8, r8)
   23856:	e002      	b.n	2385e <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   23858:	46c0      	nop			; (mov r8, r8)
   2385a:	e000      	b.n	2385e <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   2385c:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   2385e:	230f      	movs	r3, #15
   23860:	18fb      	adds	r3, r7, r3
   23862:	781b      	ldrb	r3, [r3, #0]
   23864:	b25b      	sxtb	r3, r3
}
   23866:	0018      	movs	r0, r3
   23868:	46bd      	mov	sp, r7
   2386a:	b005      	add	sp, #20
   2386c:	bd90      	pop	{r4, r7, pc}
   2386e:	46c0      	nop			; (mov r8, r8)
   23870:	00023c41 	.word	0x00023c41
   23874:	00023c65 	.word	0x00023c65
   23878:	0003a9c4 	.word	0x0003a9c4
   2387c:	0003a938 	.word	0x0003a938
   23880:	0001ee19 	.word	0x0001ee19
   23884:	0003a94c 	.word	0x0003a94c
   23888:	0003a964 	.word	0x0003a964
   2388c:	000212d1 	.word	0x000212d1
   23890:	0003a968 	.word	0x0003a968
   23894:	00023c01 	.word	0x00023c01

00023898 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   23898:	b580      	push	{r7, lr}
   2389a:	b088      	sub	sp, #32
   2389c:	af00      	add	r7, sp, #0
   2389e:	0002      	movs	r2, r0
   238a0:	1dfb      	adds	r3, r7, #7
   238a2:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   238a4:	2313      	movs	r3, #19
   238a6:	18fb      	adds	r3, r7, r3
   238a8:	2200      	movs	r2, #0
   238aa:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   238ac:	2300      	movs	r3, #0
   238ae:	61fb      	str	r3, [r7, #28]
   238b0:	2300      	movs	r3, #0
   238b2:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   238b4:	2300      	movs	r3, #0
   238b6:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   238b8:	4b4a      	ldr	r3, [pc, #296]	; (239e4 <wait_for_bootrom+0x14c>)
   238ba:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   238bc:	2300      	movs	r3, #0
   238be:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   238c0:	4b49      	ldr	r3, [pc, #292]	; (239e8 <wait_for_bootrom+0x150>)
   238c2:	0018      	movs	r0, r3
   238c4:	4b49      	ldr	r3, [pc, #292]	; (239ec <wait_for_bootrom+0x154>)
   238c6:	4798      	blx	r3
   238c8:	0003      	movs	r3, r0
   238ca:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   238cc:	69fb      	ldr	r3, [r7, #28]
   238ce:	2b00      	cmp	r3, #0
   238d0:	db03      	blt.n	238da <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   238d2:	2001      	movs	r0, #1
   238d4:	4b46      	ldr	r3, [pc, #280]	; (239f0 <wait_for_bootrom+0x158>)
   238d6:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   238d8:	e7f2      	b.n	238c0 <wait_for_bootrom+0x28>
			break;
   238da:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   238dc:	4b45      	ldr	r3, [pc, #276]	; (239f4 <wait_for_bootrom+0x15c>)
   238de:	0018      	movs	r0, r3
   238e0:	4b42      	ldr	r3, [pc, #264]	; (239ec <wait_for_bootrom+0x154>)
   238e2:	4798      	blx	r3
   238e4:	0003      	movs	r3, r0
   238e6:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   238e8:	69fb      	ldr	r3, [r7, #28]
   238ea:	2201      	movs	r2, #1
   238ec:	4013      	ands	r3, r2
   238ee:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   238f0:	69fb      	ldr	r3, [r7, #28]
   238f2:	2b00      	cmp	r3, #0
   238f4:	d112      	bne.n	2391c <wait_for_bootrom+0x84>
	{
		reg = 0;
   238f6:	2300      	movs	r3, #0
   238f8:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   238fa:	e00b      	b.n	23914 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   238fc:	2001      	movs	r0, #1
   238fe:	4b3c      	ldr	r3, [pc, #240]	; (239f0 <wait_for_bootrom+0x158>)
   23900:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   23902:	4b3d      	ldr	r3, [pc, #244]	; (239f8 <wait_for_bootrom+0x160>)
   23904:	0018      	movs	r0, r3
   23906:	4b39      	ldr	r3, [pc, #228]	; (239ec <wait_for_bootrom+0x154>)
   23908:	4798      	blx	r3
   2390a:	0003      	movs	r3, r0
   2390c:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   2390e:	69bb      	ldr	r3, [r7, #24]
   23910:	3301      	adds	r3, #1
   23912:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   23914:	69fb      	ldr	r3, [r7, #28]
   23916:	4a39      	ldr	r2, [pc, #228]	; (239fc <wait_for_bootrom+0x164>)
   23918:	4293      	cmp	r3, r2
   2391a:	d1ef      	bne.n	238fc <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   2391c:	1dfb      	adds	r3, r7, #7
   2391e:	781b      	ldrb	r3, [r3, #0]
   23920:	2b02      	cmp	r3, #2
   23922:	d10d      	bne.n	23940 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   23924:	4a36      	ldr	r2, [pc, #216]	; (23a00 <wait_for_bootrom+0x168>)
   23926:	4b37      	ldr	r3, [pc, #220]	; (23a04 <wait_for_bootrom+0x16c>)
   23928:	0011      	movs	r1, r2
   2392a:	0018      	movs	r0, r3
   2392c:	4b36      	ldr	r3, [pc, #216]	; (23a08 <wait_for_bootrom+0x170>)
   2392e:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   23930:	2380      	movs	r3, #128	; 0x80
   23932:	035b      	lsls	r3, r3, #13
   23934:	4a35      	ldr	r2, [pc, #212]	; (23a0c <wait_for_bootrom+0x174>)
   23936:	0019      	movs	r1, r3
   23938:	0010      	movs	r0, r2
   2393a:	4b33      	ldr	r3, [pc, #204]	; (23a08 <wait_for_bootrom+0x170>)
   2393c:	4798      	blx	r3
   2393e:	e022      	b.n	23986 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   23940:	1dfb      	adds	r3, r7, #7
   23942:	781b      	ldrb	r3, [r3, #0]
   23944:	2b03      	cmp	r3, #3
   23946:	d10b      	bne.n	23960 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   23948:	4a2d      	ldr	r2, [pc, #180]	; (23a00 <wait_for_bootrom+0x168>)
   2394a:	4b2e      	ldr	r3, [pc, #184]	; (23a04 <wait_for_bootrom+0x16c>)
   2394c:	0011      	movs	r1, r2
   2394e:	0018      	movs	r0, r3
   23950:	4b2d      	ldr	r3, [pc, #180]	; (23a08 <wait_for_bootrom+0x170>)
   23952:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   23954:	4b2d      	ldr	r3, [pc, #180]	; (23a0c <wait_for_bootrom+0x174>)
   23956:	2100      	movs	r1, #0
   23958:	0018      	movs	r0, r3
   2395a:	4b2b      	ldr	r3, [pc, #172]	; (23a08 <wait_for_bootrom+0x170>)
   2395c:	4798      	blx	r3
   2395e:	e012      	b.n	23986 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   23960:	1dfb      	adds	r3, r7, #7
   23962:	781b      	ldrb	r3, [r3, #0]
   23964:	2b04      	cmp	r3, #4
   23966:	d108      	bne.n	2397a <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   23968:	2380      	movs	r3, #128	; 0x80
   2396a:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   2396c:	68fb      	ldr	r3, [r7, #12]
   2396e:	4a27      	ldr	r2, [pc, #156]	; (23a0c <wait_for_bootrom+0x174>)
   23970:	0019      	movs	r1, r3
   23972:	0010      	movs	r0, r2
   23974:	4b24      	ldr	r3, [pc, #144]	; (23a08 <wait_for_bootrom+0x170>)
   23976:	4798      	blx	r3
   23978:	e005      	b.n	23986 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   2397a:	68fb      	ldr	r3, [r7, #12]
   2397c:	4a23      	ldr	r2, [pc, #140]	; (23a0c <wait_for_bootrom+0x174>)
   2397e:	0019      	movs	r1, r3
   23980:	0010      	movs	r0, r2
   23982:	4b21      	ldr	r3, [pc, #132]	; (23a08 <wait_for_bootrom+0x170>)
   23984:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   23986:	4b22      	ldr	r3, [pc, #136]	; (23a10 <wait_for_bootrom+0x178>)
   23988:	4798      	blx	r3
   2398a:	0003      	movs	r3, r0
   2398c:	051b      	lsls	r3, r3, #20
   2398e:	0d1b      	lsrs	r3, r3, #20
   23990:	4a20      	ldr	r2, [pc, #128]	; (23a14 <wait_for_bootrom+0x17c>)
   23992:	4293      	cmp	r3, r2
   23994:	d906      	bls.n	239a4 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   23996:	697b      	ldr	r3, [r7, #20]
   23998:	2202      	movs	r2, #2
   2399a:	4313      	orrs	r3, r2
   2399c:	0018      	movs	r0, r3
   2399e:	4b1e      	ldr	r3, [pc, #120]	; (23a18 <wait_for_bootrom+0x180>)
   239a0:	4798      	blx	r3
   239a2:	e003      	b.n	239ac <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   239a4:	697b      	ldr	r3, [r7, #20]
   239a6:	0018      	movs	r0, r3
   239a8:	4b1b      	ldr	r3, [pc, #108]	; (23a18 <wait_for_bootrom+0x180>)
   239aa:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   239ac:	4b1b      	ldr	r3, [pc, #108]	; (23a1c <wait_for_bootrom+0x184>)
   239ae:	0018      	movs	r0, r3
   239b0:	4b1b      	ldr	r3, [pc, #108]	; (23a20 <wait_for_bootrom+0x188>)
   239b2:	4798      	blx	r3
   239b4:	68fa      	ldr	r2, [r7, #12]
   239b6:	4b1b      	ldr	r3, [pc, #108]	; (23a24 <wait_for_bootrom+0x18c>)
   239b8:	0011      	movs	r1, r2
   239ba:	0018      	movs	r0, r3
   239bc:	4b18      	ldr	r3, [pc, #96]	; (23a20 <wait_for_bootrom+0x188>)
   239be:	4798      	blx	r3
   239c0:	4b19      	ldr	r3, [pc, #100]	; (23a28 <wait_for_bootrom+0x190>)
   239c2:	0018      	movs	r0, r3
   239c4:	4b16      	ldr	r3, [pc, #88]	; (23a20 <wait_for_bootrom+0x188>)
   239c6:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   239c8:	4a18      	ldr	r2, [pc, #96]	; (23a2c <wait_for_bootrom+0x194>)
   239ca:	4b0b      	ldr	r3, [pc, #44]	; (239f8 <wait_for_bootrom+0x160>)
   239cc:	0011      	movs	r1, r2
   239ce:	0018      	movs	r0, r3
   239d0:	4b0d      	ldr	r3, [pc, #52]	; (23a08 <wait_for_bootrom+0x170>)
   239d2:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   239d4:	2313      	movs	r3, #19
   239d6:	18fb      	adds	r3, r7, r3
   239d8:	781b      	ldrb	r3, [r3, #0]
   239da:	b25b      	sxtb	r3, r3
}
   239dc:	0018      	movs	r0, r3
   239de:	46bd      	mov	sp, r7
   239e0:	b008      	add	sp, #32
   239e2:	bd80      	pop	{r7, pc}
   239e4:	13301354 	.word	0x13301354
   239e8:	00001014 	.word	0x00001014
   239ec:	00023c21 	.word	0x00023c21
   239f0:	000212d1 	.word	0x000212d1
   239f4:	000207bc 	.word	0x000207bc
   239f8:	000c000c 	.word	0x000c000c
   239fc:	10add09e 	.word	0x10add09e
   23a00:	3c1cd57d 	.word	0x3c1cd57d
   23a04:	000207ac 	.word	0x000207ac
   23a08:	00023c65 	.word	0x00023c65
   23a0c:	0000108c 	.word	0x0000108c
   23a10:	00023541 	.word	0x00023541
   23a14:	0000039f 	.word	0x0000039f
   23a18:	00023411 	.word	0x00023411
   23a1c:	0003a984 	.word	0x0003a984
   23a20:	0001ee19 	.word	0x0001ee19
   23a24:	0003a990 	.word	0x0003a990
   23a28:	0003a964 	.word	0x0003a964
   23a2c:	ef522f61 	.word	0xef522f61

00023a30 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   23a30:	b580      	push	{r7, lr}
   23a32:	b088      	sub	sp, #32
   23a34:	af00      	add	r7, sp, #0
   23a36:	0002      	movs	r2, r0
   23a38:	1dfb      	adds	r3, r7, #7
   23a3a:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   23a3c:	231f      	movs	r3, #31
   23a3e:	18fb      	adds	r3, r7, r3
   23a40:	2200      	movs	r2, #0
   23a42:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   23a44:	2300      	movs	r3, #0
   23a46:	61bb      	str	r3, [r7, #24]
   23a48:	2300      	movs	r3, #0
   23a4a:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   23a4c:	2301      	movs	r3, #1
   23a4e:	425b      	negs	r3, r3
   23a50:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   23a52:	4b1d      	ldr	r3, [pc, #116]	; (23ac8 <wait_for_firmware_start+0x98>)
   23a54:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   23a56:	4b1d      	ldr	r3, [pc, #116]	; (23acc <wait_for_firmware_start+0x9c>)
   23a58:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   23a5a:	1dfb      	adds	r3, r7, #7
   23a5c:	781b      	ldrb	r3, [r3, #0]
   23a5e:	2b02      	cmp	r3, #2
   23a60:	d003      	beq.n	23a6a <wait_for_firmware_start+0x3a>
   23a62:	1dfb      	adds	r3, r7, #7
   23a64:	781b      	ldrb	r3, [r3, #0]
   23a66:	2b03      	cmp	r3, #3
   23a68:	d119      	bne.n	23a9e <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   23a6a:	4b19      	ldr	r3, [pc, #100]	; (23ad0 <wait_for_firmware_start+0xa0>)
   23a6c:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   23a6e:	4b19      	ldr	r3, [pc, #100]	; (23ad4 <wait_for_firmware_start+0xa4>)
   23a70:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   23a72:	e014      	b.n	23a9e <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   23a74:	2002      	movs	r0, #2
   23a76:	4b18      	ldr	r3, [pc, #96]	; (23ad8 <wait_for_firmware_start+0xa8>)
   23a78:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   23a7a:	68fb      	ldr	r3, [r7, #12]
   23a7c:	0018      	movs	r0, r3
   23a7e:	4b17      	ldr	r3, [pc, #92]	; (23adc <wait_for_firmware_start+0xac>)
   23a80:	4798      	blx	r3
   23a82:	0003      	movs	r3, r0
   23a84:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   23a86:	697b      	ldr	r3, [r7, #20]
   23a88:	3301      	adds	r3, #1
   23a8a:	617b      	str	r3, [r7, #20]
   23a8c:	697a      	ldr	r2, [r7, #20]
   23a8e:	693b      	ldr	r3, [r7, #16]
   23a90:	429a      	cmp	r2, r3
   23a92:	d304      	bcc.n	23a9e <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   23a94:	231f      	movs	r3, #31
   23a96:	18fb      	adds	r3, r7, r3
   23a98:	22fb      	movs	r2, #251	; 0xfb
   23a9a:	701a      	strb	r2, [r3, #0]
			goto ERR;
   23a9c:	e00c      	b.n	23ab8 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   23a9e:	68ba      	ldr	r2, [r7, #8]
   23aa0:	69bb      	ldr	r3, [r7, #24]
   23aa2:	429a      	cmp	r2, r3
   23aa4:	d1e6      	bne.n	23a74 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   23aa6:	68bb      	ldr	r3, [r7, #8]
   23aa8:	4a08      	ldr	r2, [pc, #32]	; (23acc <wait_for_firmware_start+0x9c>)
   23aaa:	4293      	cmp	r3, r2
   23aac:	d104      	bne.n	23ab8 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   23aae:	4b06      	ldr	r3, [pc, #24]	; (23ac8 <wait_for_firmware_start+0x98>)
   23ab0:	2100      	movs	r1, #0
   23ab2:	0018      	movs	r0, r3
   23ab4:	4b0a      	ldr	r3, [pc, #40]	; (23ae0 <wait_for_firmware_start+0xb0>)
   23ab6:	4798      	blx	r3
	}
ERR:
	return ret;
   23ab8:	231f      	movs	r3, #31
   23aba:	18fb      	adds	r3, r7, r3
   23abc:	781b      	ldrb	r3, [r3, #0]
   23abe:	b25b      	sxtb	r3, r3
}
   23ac0:	0018      	movs	r0, r3
   23ac2:	46bd      	mov	sp, r7
   23ac4:	b008      	add	sp, #32
   23ac6:	bd80      	pop	{r7, pc}
   23ac8:	0000108c 	.word	0x0000108c
   23acc:	02532636 	.word	0x02532636
   23ad0:	000207ac 	.word	0x000207ac
   23ad4:	d75dc1c3 	.word	0xd75dc1c3
   23ad8:	000212d1 	.word	0x000212d1
   23adc:	00023c21 	.word	0x00023c21
   23ae0:	00023c65 	.word	0x00023c65

00023ae4 <chip_deinit>:

sint8 chip_deinit(void)
{
   23ae4:	b590      	push	{r4, r7, lr}
   23ae6:	b083      	sub	sp, #12
   23ae8:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   23aea:	2300      	movs	r3, #0
   23aec:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   23aee:	1dfc      	adds	r4, r7, #7
   23af0:	003a      	movs	r2, r7
   23af2:	23a0      	movs	r3, #160	; 0xa0
   23af4:	015b      	lsls	r3, r3, #5
   23af6:	0011      	movs	r1, r2
   23af8:	0018      	movs	r0, r3
   23afa:	4b20      	ldr	r3, [pc, #128]	; (23b7c <chip_deinit+0x98>)
   23afc:	4798      	blx	r3
   23afe:	0003      	movs	r3, r0
   23b00:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   23b02:	1dfb      	adds	r3, r7, #7
   23b04:	781b      	ldrb	r3, [r3, #0]
   23b06:	b25b      	sxtb	r3, r3
   23b08:	2b00      	cmp	r3, #0
   23b0a:	d00e      	beq.n	23b2a <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   23b0c:	4a1c      	ldr	r2, [pc, #112]	; (23b80 <chip_deinit+0x9c>)
   23b0e:	491d      	ldr	r1, [pc, #116]	; (23b84 <chip_deinit+0xa0>)
   23b10:	4b1d      	ldr	r3, [pc, #116]	; (23b88 <chip_deinit+0xa4>)
   23b12:	0018      	movs	r0, r3
   23b14:	4b1d      	ldr	r3, [pc, #116]	; (23b8c <chip_deinit+0xa8>)
   23b16:	4798      	blx	r3
   23b18:	4b1d      	ldr	r3, [pc, #116]	; (23b90 <chip_deinit+0xac>)
   23b1a:	0018      	movs	r0, r3
   23b1c:	4b1b      	ldr	r3, [pc, #108]	; (23b8c <chip_deinit+0xa8>)
   23b1e:	4798      	blx	r3
   23b20:	4b1c      	ldr	r3, [pc, #112]	; (23b94 <chip_deinit+0xb0>)
   23b22:	0018      	movs	r0, r3
   23b24:	4b19      	ldr	r3, [pc, #100]	; (23b8c <chip_deinit+0xa8>)
   23b26:	4798      	blx	r3
		goto ERR1;
   23b28:	e021      	b.n	23b6e <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   23b2a:	683b      	ldr	r3, [r7, #0]
   23b2c:	4a1a      	ldr	r2, [pc, #104]	; (23b98 <chip_deinit+0xb4>)
   23b2e:	4013      	ands	r3, r2
   23b30:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   23b32:	683a      	ldr	r2, [r7, #0]
   23b34:	1dfc      	adds	r4, r7, #7
   23b36:	23a0      	movs	r3, #160	; 0xa0
   23b38:	015b      	lsls	r3, r3, #5
   23b3a:	0011      	movs	r1, r2
   23b3c:	0018      	movs	r0, r3
   23b3e:	4b17      	ldr	r3, [pc, #92]	; (23b9c <chip_deinit+0xb8>)
   23b40:	4798      	blx	r3
   23b42:	0003      	movs	r3, r0
   23b44:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   23b46:	1dfb      	adds	r3, r7, #7
   23b48:	781b      	ldrb	r3, [r3, #0]
   23b4a:	b25b      	sxtb	r3, r3
   23b4c:	2b00      	cmp	r3, #0
   23b4e:	d00e      	beq.n	23b6e <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   23b50:	4a13      	ldr	r2, [pc, #76]	; (23ba0 <chip_deinit+0xbc>)
   23b52:	490c      	ldr	r1, [pc, #48]	; (23b84 <chip_deinit+0xa0>)
   23b54:	4b0c      	ldr	r3, [pc, #48]	; (23b88 <chip_deinit+0xa4>)
   23b56:	0018      	movs	r0, r3
   23b58:	4b0c      	ldr	r3, [pc, #48]	; (23b8c <chip_deinit+0xa8>)
   23b5a:	4798      	blx	r3
   23b5c:	4b0c      	ldr	r3, [pc, #48]	; (23b90 <chip_deinit+0xac>)
   23b5e:	0018      	movs	r0, r3
   23b60:	4b0a      	ldr	r3, [pc, #40]	; (23b8c <chip_deinit+0xa8>)
   23b62:	4798      	blx	r3
   23b64:	4b0b      	ldr	r3, [pc, #44]	; (23b94 <chip_deinit+0xb0>)
   23b66:	0018      	movs	r0, r3
   23b68:	4b08      	ldr	r3, [pc, #32]	; (23b8c <chip_deinit+0xa8>)
   23b6a:	4798      	blx	r3
		goto ERR1;
   23b6c:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   23b6e:	1dfb      	adds	r3, r7, #7
   23b70:	781b      	ldrb	r3, [r3, #0]
   23b72:	b25b      	sxtb	r3, r3
}
   23b74:	0018      	movs	r0, r3
   23b76:	46bd      	mov	sp, r7
   23b78:	b003      	add	sp, #12
   23b7a:	bd90      	pop	{r4, r7, pc}
   23b7c:	00023c41 	.word	0x00023c41
   23b80:	00000201 	.word	0x00000201
   23b84:	0003a9d0 	.word	0x0003a9d0
   23b88:	0003a938 	.word	0x0003a938
   23b8c:	0001ee19 	.word	0x0001ee19
   23b90:	0003a9a8 	.word	0x0003a9a8
   23b94:	0003a964 	.word	0x0003a964
   23b98:	fffffbff 	.word	0xfffffbff
   23b9c:	00023c65 	.word	0x00023c65
   23ba0:	00000207 	.word	0x00000207

00023ba4 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   23ba4:	b590      	push	{r4, r7, lr}
   23ba6:	b085      	sub	sp, #20
   23ba8:	af00      	add	r7, sp, #0
   23baa:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   23bac:	230f      	movs	r3, #15
   23bae:	18fb      	adds	r3, r7, r3
   23bb0:	2200      	movs	r2, #0
   23bb2:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   23bb4:	230f      	movs	r3, #15
   23bb6:	18fc      	adds	r4, r7, r3
   23bb8:	687b      	ldr	r3, [r7, #4]
   23bba:	0018      	movs	r0, r3
   23bbc:	4b05      	ldr	r3, [pc, #20]	; (23bd4 <nm_bus_iface_init+0x30>)
   23bbe:	4798      	blx	r3
   23bc0:	0003      	movs	r3, r0
   23bc2:	7023      	strb	r3, [r4, #0]
	return ret;
   23bc4:	230f      	movs	r3, #15
   23bc6:	18fb      	adds	r3, r7, r3
   23bc8:	781b      	ldrb	r3, [r3, #0]
   23bca:	b25b      	sxtb	r3, r3
}
   23bcc:	0018      	movs	r0, r3
   23bce:	46bd      	mov	sp, r7
   23bd0:	b005      	add	sp, #20
   23bd2:	bd90      	pop	{r4, r7, pc}
   23bd4:	0002198d 	.word	0x0002198d

00023bd8 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   23bd8:	b590      	push	{r4, r7, lr}
   23bda:	b083      	sub	sp, #12
   23bdc:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   23bde:	1dfb      	adds	r3, r7, #7
   23be0:	2200      	movs	r2, #0
   23be2:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   23be4:	1dfc      	adds	r4, r7, #7
   23be6:	4b05      	ldr	r3, [pc, #20]	; (23bfc <nm_bus_iface_deinit+0x24>)
   23be8:	4798      	blx	r3
   23bea:	0003      	movs	r3, r0
   23bec:	7023      	strb	r3, [r4, #0]

	return ret;
   23bee:	1dfb      	adds	r3, r7, #7
   23bf0:	781b      	ldrb	r3, [r3, #0]
   23bf2:	b25b      	sxtb	r3, r3
}
   23bf4:	0018      	movs	r0, r3
   23bf6:	46bd      	mov	sp, r7
   23bf8:	b003      	add	sp, #12
   23bfa:	bd90      	pop	{r4, r7, pc}
   23bfc:	00021b05 	.word	0x00021b05

00023c00 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   23c00:	b580      	push	{r7, lr}
   23c02:	b082      	sub	sp, #8
   23c04:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   23c06:	1dfb      	adds	r3, r7, #7
   23c08:	2200      	movs	r2, #0
   23c0a:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   23c0c:	4b03      	ldr	r3, [pc, #12]	; (23c1c <nm_bus_reset+0x1c>)
   23c0e:	4798      	blx	r3
   23c10:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   23c12:	0018      	movs	r0, r3
   23c14:	46bd      	mov	sp, r7
   23c16:	b002      	add	sp, #8
   23c18:	bd80      	pop	{r7, pc}
   23c1a:	46c0      	nop			; (mov r8, r8)
   23c1c:	00025a2d 	.word	0x00025a2d

00023c20 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   23c20:	b580      	push	{r7, lr}
   23c22:	b082      	sub	sp, #8
   23c24:	af00      	add	r7, sp, #0
   23c26:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   23c28:	687b      	ldr	r3, [r7, #4]
   23c2a:	0018      	movs	r0, r3
   23c2c:	4b03      	ldr	r3, [pc, #12]	; (23c3c <nm_read_reg+0x1c>)
   23c2e:	4798      	blx	r3
   23c30:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   23c32:	0018      	movs	r0, r3
   23c34:	46bd      	mov	sp, r7
   23c36:	b002      	add	sp, #8
   23c38:	bd80      	pop	{r7, pc}
   23c3a:	46c0      	nop			; (mov r8, r8)
   23c3c:	00025bc1 	.word	0x00025bc1

00023c40 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   23c40:	b580      	push	{r7, lr}
   23c42:	b082      	sub	sp, #8
   23c44:	af00      	add	r7, sp, #0
   23c46:	6078      	str	r0, [r7, #4]
   23c48:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   23c4a:	683a      	ldr	r2, [r7, #0]
   23c4c:	687b      	ldr	r3, [r7, #4]
   23c4e:	0011      	movs	r1, r2
   23c50:	0018      	movs	r0, r3
   23c52:	4b03      	ldr	r3, [pc, #12]	; (23c60 <nm_read_reg_with_ret+0x20>)
   23c54:	4798      	blx	r3
   23c56:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   23c58:	0018      	movs	r0, r3
   23c5a:	46bd      	mov	sp, r7
   23c5c:	b002      	add	sp, #8
   23c5e:	bd80      	pop	{r7, pc}
   23c60:	00025be5 	.word	0x00025be5

00023c64 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   23c64:	b580      	push	{r7, lr}
   23c66:	b082      	sub	sp, #8
   23c68:	af00      	add	r7, sp, #0
   23c6a:	6078      	str	r0, [r7, #4]
   23c6c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   23c6e:	683a      	ldr	r2, [r7, #0]
   23c70:	687b      	ldr	r3, [r7, #4]
   23c72:	0011      	movs	r1, r2
   23c74:	0018      	movs	r0, r3
   23c76:	4b03      	ldr	r3, [pc, #12]	; (23c84 <nm_write_reg+0x20>)
   23c78:	4798      	blx	r3
   23c7a:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   23c7c:	0018      	movs	r0, r3
   23c7e:	46bd      	mov	sp, r7
   23c80:	b002      	add	sp, #8
   23c82:	bd80      	pop	{r7, pc}
   23c84:	00025c35 	.word	0x00025c35

00023c88 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   23c88:	b580      	push	{r7, lr}
   23c8a:	b084      	sub	sp, #16
   23c8c:	af00      	add	r7, sp, #0
   23c8e:	60f8      	str	r0, [r7, #12]
   23c90:	60b9      	str	r1, [r7, #8]
   23c92:	1dbb      	adds	r3, r7, #6
   23c94:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   23c96:	1dbb      	adds	r3, r7, #6
   23c98:	881a      	ldrh	r2, [r3, #0]
   23c9a:	68b9      	ldr	r1, [r7, #8]
   23c9c:	68fb      	ldr	r3, [r7, #12]
   23c9e:	0018      	movs	r0, r3
   23ca0:	4b03      	ldr	r3, [pc, #12]	; (23cb0 <p_nm_read_block+0x28>)
   23ca2:	4798      	blx	r3
   23ca4:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   23ca6:	0018      	movs	r0, r3
   23ca8:	46bd      	mov	sp, r7
   23caa:	b004      	add	sp, #16
   23cac:	bd80      	pop	{r7, pc}
   23cae:	46c0      	nop			; (mov r8, r8)
   23cb0:	00025c85 	.word	0x00025c85

00023cb4 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   23cb4:	b580      	push	{r7, lr}
   23cb6:	b086      	sub	sp, #24
   23cb8:	af00      	add	r7, sp, #0
   23cba:	60f8      	str	r0, [r7, #12]
   23cbc:	60b9      	str	r1, [r7, #8]
   23cbe:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   23cc0:	4b2d      	ldr	r3, [pc, #180]	; (23d78 <nm_read_block+0xc4>)
   23cc2:	881a      	ldrh	r2, [r3, #0]
   23cc4:	2310      	movs	r3, #16
   23cc6:	18fb      	adds	r3, r7, r3
   23cc8:	3a08      	subs	r2, #8
   23cca:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   23ccc:	2300      	movs	r3, #0
   23cce:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   23cd0:	2313      	movs	r3, #19
   23cd2:	18fb      	adds	r3, r7, r3
   23cd4:	2200      	movs	r2, #0
   23cd6:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   23cd8:	2310      	movs	r3, #16
   23cda:	18fb      	adds	r3, r7, r3
   23cdc:	881a      	ldrh	r2, [r3, #0]
   23cde:	687b      	ldr	r3, [r7, #4]
   23ce0:	429a      	cmp	r2, r3
   23ce2:	d313      	bcc.n	23d0c <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   23ce4:	68ba      	ldr	r2, [r7, #8]
   23ce6:	697b      	ldr	r3, [r7, #20]
   23ce8:	18d1      	adds	r1, r2, r3
   23cea:	687b      	ldr	r3, [r7, #4]
   23cec:	b29a      	uxth	r2, r3
   23cee:	68fb      	ldr	r3, [r7, #12]
   23cf0:	0018      	movs	r0, r3
   23cf2:	4b22      	ldr	r3, [pc, #136]	; (23d7c <nm_read_block+0xc8>)
   23cf4:	4798      	blx	r3
   23cf6:	0003      	movs	r3, r0
   23cf8:	b2da      	uxtb	r2, r3
   23cfa:	2313      	movs	r3, #19
   23cfc:	18fb      	adds	r3, r7, r3
   23cfe:	781b      	ldrb	r3, [r3, #0]
   23d00:	18d3      	adds	r3, r2, r3
   23d02:	b2da      	uxtb	r2, r3
   23d04:	2313      	movs	r3, #19
   23d06:	18fb      	adds	r3, r7, r3
   23d08:	701a      	strb	r2, [r3, #0]
			break;
   23d0a:	e02d      	b.n	23d68 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   23d0c:	68ba      	ldr	r2, [r7, #8]
   23d0e:	697b      	ldr	r3, [r7, #20]
   23d10:	18d1      	adds	r1, r2, r3
   23d12:	2310      	movs	r3, #16
   23d14:	18fb      	adds	r3, r7, r3
   23d16:	881a      	ldrh	r2, [r3, #0]
   23d18:	68fb      	ldr	r3, [r7, #12]
   23d1a:	0018      	movs	r0, r3
   23d1c:	4b17      	ldr	r3, [pc, #92]	; (23d7c <nm_read_block+0xc8>)
   23d1e:	4798      	blx	r3
   23d20:	0003      	movs	r3, r0
   23d22:	b2da      	uxtb	r2, r3
   23d24:	2313      	movs	r3, #19
   23d26:	18fb      	adds	r3, r7, r3
   23d28:	781b      	ldrb	r3, [r3, #0]
   23d2a:	18d3      	adds	r3, r2, r3
   23d2c:	b2da      	uxtb	r2, r3
   23d2e:	2313      	movs	r3, #19
   23d30:	18fb      	adds	r3, r7, r3
   23d32:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   23d34:	2313      	movs	r3, #19
   23d36:	18fb      	adds	r3, r7, r3
   23d38:	781b      	ldrb	r3, [r3, #0]
   23d3a:	b25b      	sxtb	r3, r3
   23d3c:	2b00      	cmp	r3, #0
   23d3e:	d112      	bne.n	23d66 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   23d40:	2310      	movs	r3, #16
   23d42:	18fb      	adds	r3, r7, r3
   23d44:	881b      	ldrh	r3, [r3, #0]
   23d46:	687a      	ldr	r2, [r7, #4]
   23d48:	1ad3      	subs	r3, r2, r3
   23d4a:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   23d4c:	2310      	movs	r3, #16
   23d4e:	18fb      	adds	r3, r7, r3
   23d50:	881b      	ldrh	r3, [r3, #0]
   23d52:	697a      	ldr	r2, [r7, #20]
   23d54:	18d3      	adds	r3, r2, r3
   23d56:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   23d58:	2310      	movs	r3, #16
   23d5a:	18fb      	adds	r3, r7, r3
   23d5c:	881b      	ldrh	r3, [r3, #0]
   23d5e:	68fa      	ldr	r2, [r7, #12]
   23d60:	18d3      	adds	r3, r2, r3
   23d62:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   23d64:	e7b8      	b.n	23cd8 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   23d66:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   23d68:	2313      	movs	r3, #19
   23d6a:	18fb      	adds	r3, r7, r3
   23d6c:	781b      	ldrb	r3, [r3, #0]
   23d6e:	b25b      	sxtb	r3, r3
}
   23d70:	0018      	movs	r0, r3
   23d72:	46bd      	mov	sp, r7
   23d74:	b006      	add	sp, #24
   23d76:	bd80      	pop	{r7, pc}
   23d78:	20000124 	.word	0x20000124
   23d7c:	00023c89 	.word	0x00023c89

00023d80 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   23d80:	b580      	push	{r7, lr}
   23d82:	b084      	sub	sp, #16
   23d84:	af00      	add	r7, sp, #0
   23d86:	60f8      	str	r0, [r7, #12]
   23d88:	60b9      	str	r1, [r7, #8]
   23d8a:	1dbb      	adds	r3, r7, #6
   23d8c:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   23d8e:	1dbb      	adds	r3, r7, #6
   23d90:	881a      	ldrh	r2, [r3, #0]
   23d92:	68b9      	ldr	r1, [r7, #8]
   23d94:	68fb      	ldr	r3, [r7, #12]
   23d96:	0018      	movs	r0, r3
   23d98:	4b03      	ldr	r3, [pc, #12]	; (23da8 <p_nm_write_block+0x28>)
   23d9a:	4798      	blx	r3
   23d9c:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   23d9e:	0018      	movs	r0, r3
   23da0:	46bd      	mov	sp, r7
   23da2:	b004      	add	sp, #16
   23da4:	bd80      	pop	{r7, pc}
   23da6:	46c0      	nop			; (mov r8, r8)
   23da8:	00025cdd 	.word	0x00025cdd

00023dac <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   23dac:	b580      	push	{r7, lr}
   23dae:	b086      	sub	sp, #24
   23db0:	af00      	add	r7, sp, #0
   23db2:	60f8      	str	r0, [r7, #12]
   23db4:	60b9      	str	r1, [r7, #8]
   23db6:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   23db8:	4b2d      	ldr	r3, [pc, #180]	; (23e70 <nm_write_block+0xc4>)
   23dba:	881a      	ldrh	r2, [r3, #0]
   23dbc:	2310      	movs	r3, #16
   23dbe:	18fb      	adds	r3, r7, r3
   23dc0:	3a08      	subs	r2, #8
   23dc2:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   23dc4:	2300      	movs	r3, #0
   23dc6:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   23dc8:	2313      	movs	r3, #19
   23dca:	18fb      	adds	r3, r7, r3
   23dcc:	2200      	movs	r2, #0
   23dce:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   23dd0:	2310      	movs	r3, #16
   23dd2:	18fb      	adds	r3, r7, r3
   23dd4:	881a      	ldrh	r2, [r3, #0]
   23dd6:	687b      	ldr	r3, [r7, #4]
   23dd8:	429a      	cmp	r2, r3
   23dda:	d313      	bcc.n	23e04 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   23ddc:	68ba      	ldr	r2, [r7, #8]
   23dde:	697b      	ldr	r3, [r7, #20]
   23de0:	18d1      	adds	r1, r2, r3
   23de2:	687b      	ldr	r3, [r7, #4]
   23de4:	b29a      	uxth	r2, r3
   23de6:	68fb      	ldr	r3, [r7, #12]
   23de8:	0018      	movs	r0, r3
   23dea:	4b22      	ldr	r3, [pc, #136]	; (23e74 <nm_write_block+0xc8>)
   23dec:	4798      	blx	r3
   23dee:	0003      	movs	r3, r0
   23df0:	b2da      	uxtb	r2, r3
   23df2:	2313      	movs	r3, #19
   23df4:	18fb      	adds	r3, r7, r3
   23df6:	781b      	ldrb	r3, [r3, #0]
   23df8:	18d3      	adds	r3, r2, r3
   23dfa:	b2da      	uxtb	r2, r3
   23dfc:	2313      	movs	r3, #19
   23dfe:	18fb      	adds	r3, r7, r3
   23e00:	701a      	strb	r2, [r3, #0]
			break;
   23e02:	e02d      	b.n	23e60 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   23e04:	68ba      	ldr	r2, [r7, #8]
   23e06:	697b      	ldr	r3, [r7, #20]
   23e08:	18d1      	adds	r1, r2, r3
   23e0a:	2310      	movs	r3, #16
   23e0c:	18fb      	adds	r3, r7, r3
   23e0e:	881a      	ldrh	r2, [r3, #0]
   23e10:	68fb      	ldr	r3, [r7, #12]
   23e12:	0018      	movs	r0, r3
   23e14:	4b17      	ldr	r3, [pc, #92]	; (23e74 <nm_write_block+0xc8>)
   23e16:	4798      	blx	r3
   23e18:	0003      	movs	r3, r0
   23e1a:	b2da      	uxtb	r2, r3
   23e1c:	2313      	movs	r3, #19
   23e1e:	18fb      	adds	r3, r7, r3
   23e20:	781b      	ldrb	r3, [r3, #0]
   23e22:	18d3      	adds	r3, r2, r3
   23e24:	b2da      	uxtb	r2, r3
   23e26:	2313      	movs	r3, #19
   23e28:	18fb      	adds	r3, r7, r3
   23e2a:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   23e2c:	2313      	movs	r3, #19
   23e2e:	18fb      	adds	r3, r7, r3
   23e30:	781b      	ldrb	r3, [r3, #0]
   23e32:	b25b      	sxtb	r3, r3
   23e34:	2b00      	cmp	r3, #0
   23e36:	d112      	bne.n	23e5e <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   23e38:	2310      	movs	r3, #16
   23e3a:	18fb      	adds	r3, r7, r3
   23e3c:	881b      	ldrh	r3, [r3, #0]
   23e3e:	687a      	ldr	r2, [r7, #4]
   23e40:	1ad3      	subs	r3, r2, r3
   23e42:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   23e44:	2310      	movs	r3, #16
   23e46:	18fb      	adds	r3, r7, r3
   23e48:	881b      	ldrh	r3, [r3, #0]
   23e4a:	697a      	ldr	r2, [r7, #20]
   23e4c:	18d3      	adds	r3, r2, r3
   23e4e:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   23e50:	2310      	movs	r3, #16
   23e52:	18fb      	adds	r3, r7, r3
   23e54:	881b      	ldrh	r3, [r3, #0]
   23e56:	68fa      	ldr	r2, [r7, #12]
   23e58:	18d3      	adds	r3, r2, r3
   23e5a:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   23e5c:	e7b8      	b.n	23dd0 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   23e5e:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   23e60:	2313      	movs	r3, #19
   23e62:	18fb      	adds	r3, r7, r3
   23e64:	781b      	ldrb	r3, [r3, #0]
   23e66:	b25b      	sxtb	r3, r3
}
   23e68:	0018      	movs	r0, r3
   23e6a:	46bd      	mov	sp, r7
   23e6c:	b006      	add	sp, #24
   23e6e:	bd80      	pop	{r7, pc}
   23e70:	20000124 	.word	0x20000124
   23e74:	00023d81 	.word	0x00023d81

00023e78 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   23e78:	b590      	push	{r4, r7, lr}
   23e7a:	b089      	sub	sp, #36	; 0x24
   23e7c:	af00      	add	r7, sp, #0
   23e7e:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   23e80:	2300      	movs	r3, #0
   23e82:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   23e84:	231f      	movs	r3, #31
   23e86:	18fb      	adds	r3, r7, r3
   23e88:	2200      	movs	r2, #0
   23e8a:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   23e8c:	230c      	movs	r3, #12
   23e8e:	18fb      	adds	r3, r7, r3
   23e90:	0018      	movs	r0, r3
   23e92:	2308      	movs	r3, #8
   23e94:	001a      	movs	r2, r3
   23e96:	2100      	movs	r1, #0
   23e98:	4b64      	ldr	r3, [pc, #400]	; (2402c <nm_get_firmware_full_info+0x1b4>)
   23e9a:	4798      	blx	r3
	if (pstrRev != NULL)
   23e9c:	687b      	ldr	r3, [r7, #4]
   23e9e:	2b00      	cmp	r3, #0
   23ea0:	d100      	bne.n	23ea4 <nm_get_firmware_full_info+0x2c>
   23ea2:	e0ba      	b.n	2401a <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   23ea4:	687b      	ldr	r3, [r7, #4]
   23ea6:	2228      	movs	r2, #40	; 0x28
   23ea8:	2100      	movs	r1, #0
   23eaa:	0018      	movs	r0, r3
   23eac:	4b60      	ldr	r3, [pc, #384]	; (24030 <nm_get_firmware_full_info+0x1b8>)
   23eae:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   23eb0:	231f      	movs	r3, #31
   23eb2:	18fc      	adds	r4, r7, r3
   23eb4:	2314      	movs	r3, #20
   23eb6:	18fb      	adds	r3, r7, r3
   23eb8:	4a5e      	ldr	r2, [pc, #376]	; (24034 <nm_get_firmware_full_info+0x1bc>)
   23eba:	0019      	movs	r1, r3
   23ebc:	0010      	movs	r0, r2
   23ebe:	4b5e      	ldr	r3, [pc, #376]	; (24038 <nm_get_firmware_full_info+0x1c0>)
   23ec0:	4798      	blx	r3
   23ec2:	0003      	movs	r3, r0
   23ec4:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   23ec6:	231f      	movs	r3, #31
   23ec8:	18fb      	adds	r3, r7, r3
   23eca:	781b      	ldrb	r3, [r3, #0]
   23ecc:	b25b      	sxtb	r3, r3
   23ece:	2b00      	cmp	r3, #0
   23ed0:	d000      	beq.n	23ed4 <nm_get_firmware_full_info+0x5c>
   23ed2:	e0a2      	b.n	2401a <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   23ed4:	697b      	ldr	r3, [r7, #20]
   23ed6:	2b00      	cmp	r3, #0
   23ed8:	d100      	bne.n	23edc <nm_get_firmware_full_info+0x64>
   23eda:	e09a      	b.n	24012 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   23edc:	697b      	ldr	r3, [r7, #20]
   23ede:	22c0      	movs	r2, #192	; 0xc0
   23ee0:	0292      	lsls	r2, r2, #10
   23ee2:	4313      	orrs	r3, r2
   23ee4:	221f      	movs	r2, #31
   23ee6:	18bc      	adds	r4, r7, r2
   23ee8:	220c      	movs	r2, #12
   23eea:	18b9      	adds	r1, r7, r2
   23eec:	2208      	movs	r2, #8
   23eee:	0018      	movs	r0, r3
   23ef0:	4b52      	ldr	r3, [pc, #328]	; (2403c <nm_get_firmware_full_info+0x1c4>)
   23ef2:	4798      	blx	r3
   23ef4:	0003      	movs	r3, r0
   23ef6:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   23ef8:	231f      	movs	r3, #31
   23efa:	18fb      	adds	r3, r7, r3
   23efc:	781b      	ldrb	r3, [r3, #0]
   23efe:	b25b      	sxtb	r3, r3
   23f00:	2b00      	cmp	r3, #0
   23f02:	d000      	beq.n	23f06 <nm_get_firmware_full_info+0x8e>
   23f04:	e089      	b.n	2401a <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   23f06:	230c      	movs	r3, #12
   23f08:	18fb      	adds	r3, r7, r3
   23f0a:	685b      	ldr	r3, [r3, #4]
   23f0c:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   23f0e:	697b      	ldr	r3, [r7, #20]
   23f10:	041b      	lsls	r3, r3, #16
   23f12:	0c1b      	lsrs	r3, r3, #16
   23f14:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   23f16:	697b      	ldr	r3, [r7, #20]
   23f18:	2b00      	cmp	r3, #0
   23f1a:	d100      	bne.n	23f1e <nm_get_firmware_full_info+0xa6>
   23f1c:	e074      	b.n	24008 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   23f1e:	697b      	ldr	r3, [r7, #20]
   23f20:	22c0      	movs	r2, #192	; 0xc0
   23f22:	0292      	lsls	r2, r2, #10
   23f24:	4313      	orrs	r3, r2
   23f26:	221f      	movs	r2, #31
   23f28:	18bc      	adds	r4, r7, r2
   23f2a:	6879      	ldr	r1, [r7, #4]
   23f2c:	2228      	movs	r2, #40	; 0x28
   23f2e:	0018      	movs	r0, r3
   23f30:	4b42      	ldr	r3, [pc, #264]	; (2403c <nm_get_firmware_full_info+0x1c4>)
   23f32:	4798      	blx	r3
   23f34:	0003      	movs	r3, r0
   23f36:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   23f38:	231f      	movs	r3, #31
   23f3a:	18fb      	adds	r3, r7, r3
   23f3c:	781b      	ldrb	r3, [r3, #0]
   23f3e:	b25b      	sxtb	r3, r3
   23f40:	2b00      	cmp	r3, #0
   23f42:	d16a      	bne.n	2401a <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   23f44:	687b      	ldr	r3, [r7, #4]
   23f46:	791b      	ldrb	r3, [r3, #4]
   23f48:	021b      	lsls	r3, r3, #8
   23f4a:	b21a      	sxth	r2, r3
   23f4c:	687b      	ldr	r3, [r7, #4]
   23f4e:	795b      	ldrb	r3, [r3, #5]
   23f50:	011b      	lsls	r3, r3, #4
   23f52:	b21b      	sxth	r3, r3
   23f54:	21ff      	movs	r1, #255	; 0xff
   23f56:	400b      	ands	r3, r1
   23f58:	b21b      	sxth	r3, r3
   23f5a:	4313      	orrs	r3, r2
   23f5c:	b21a      	sxth	r2, r3
   23f5e:	687b      	ldr	r3, [r7, #4]
   23f60:	799b      	ldrb	r3, [r3, #6]
   23f62:	b21b      	sxth	r3, r3
   23f64:	210f      	movs	r1, #15
   23f66:	400b      	ands	r3, r1
   23f68:	b21b      	sxth	r3, r3
   23f6a:	4313      	orrs	r3, r2
   23f6c:	b21a      	sxth	r2, r3
   23f6e:	231c      	movs	r3, #28
   23f70:	18fb      	adds	r3, r7, r3
   23f72:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   23f74:	231a      	movs	r3, #26
   23f76:	18fb      	adds	r3, r7, r3
   23f78:	4a31      	ldr	r2, [pc, #196]	; (24040 <nm_get_firmware_full_info+0x1c8>)
   23f7a:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   23f7c:	687b      	ldr	r3, [r7, #4]
   23f7e:	79db      	ldrb	r3, [r3, #7]
   23f80:	021b      	lsls	r3, r3, #8
   23f82:	b21a      	sxth	r2, r3
   23f84:	687b      	ldr	r3, [r7, #4]
   23f86:	7a1b      	ldrb	r3, [r3, #8]
   23f88:	011b      	lsls	r3, r3, #4
   23f8a:	b21b      	sxth	r3, r3
   23f8c:	21ff      	movs	r1, #255	; 0xff
   23f8e:	400b      	ands	r3, r1
   23f90:	b21b      	sxth	r3, r3
   23f92:	4313      	orrs	r3, r2
   23f94:	b21a      	sxth	r2, r3
   23f96:	687b      	ldr	r3, [r7, #4]
   23f98:	7a5b      	ldrb	r3, [r3, #9]
   23f9a:	b21b      	sxth	r3, r3
   23f9c:	210f      	movs	r1, #15
   23f9e:	400b      	ands	r3, r1
   23fa0:	b21b      	sxth	r3, r3
   23fa2:	4313      	orrs	r3, r2
   23fa4:	b21a      	sxth	r2, r3
   23fa6:	2318      	movs	r3, #24
   23fa8:	18fb      	adds	r3, r7, r3
   23faa:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   23fac:	231c      	movs	r3, #28
   23fae:	18fb      	adds	r3, r7, r3
   23fb0:	881b      	ldrh	r3, [r3, #0]
   23fb2:	2b00      	cmp	r3, #0
   23fb4:	d009      	beq.n	23fca <nm_get_firmware_full_info+0x152>
   23fb6:	2318      	movs	r3, #24
   23fb8:	18fb      	adds	r3, r7, r3
   23fba:	881b      	ldrh	r3, [r3, #0]
   23fbc:	2b00      	cmp	r3, #0
   23fbe:	d004      	beq.n	23fca <nm_get_firmware_full_info+0x152>
   23fc0:	2318      	movs	r3, #24
   23fc2:	18fb      	adds	r3, r7, r3
   23fc4:	881b      	ldrh	r3, [r3, #0]
   23fc6:	2b00      	cmp	r3, #0
   23fc8:	d104      	bne.n	23fd4 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   23fca:	231f      	movs	r3, #31
   23fcc:	18fb      	adds	r3, r7, r3
   23fce:	22f4      	movs	r2, #244	; 0xf4
   23fd0:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   23fd2:	e022      	b.n	2401a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   23fd4:	231a      	movs	r3, #26
   23fd6:	18fa      	adds	r2, r7, r3
   23fd8:	2318      	movs	r3, #24
   23fda:	18fb      	adds	r3, r7, r3
   23fdc:	8812      	ldrh	r2, [r2, #0]
   23fde:	881b      	ldrh	r3, [r3, #0]
   23fe0:	429a      	cmp	r2, r3
   23fe2:	d204      	bcs.n	23fee <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   23fe4:	231f      	movs	r3, #31
   23fe6:	18fb      	adds	r3, r7, r3
   23fe8:	22f3      	movs	r2, #243	; 0xf3
   23fea:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   23fec:	e015      	b.n	2401a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   23fee:	231a      	movs	r3, #26
   23ff0:	18fa      	adds	r2, r7, r3
   23ff2:	231c      	movs	r3, #28
   23ff4:	18fb      	adds	r3, r7, r3
   23ff6:	8812      	ldrh	r2, [r2, #0]
   23ff8:	881b      	ldrh	r3, [r3, #0]
   23ffa:	429a      	cmp	r2, r3
   23ffc:	d90d      	bls.n	2401a <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   23ffe:	231f      	movs	r3, #31
   24000:	18fb      	adds	r3, r7, r3
   24002:	22f3      	movs	r2, #243	; 0xf3
   24004:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   24006:	e008      	b.n	2401a <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   24008:	231f      	movs	r3, #31
   2400a:	18fb      	adds	r3, r7, r3
   2400c:	22f4      	movs	r2, #244	; 0xf4
   2400e:	701a      	strb	r2, [r3, #0]
   24010:	e003      	b.n	2401a <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   24012:	231f      	movs	r3, #31
   24014:	18fb      	adds	r3, r7, r3
   24016:	22f4      	movs	r2, #244	; 0xf4
   24018:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   2401a:	231f      	movs	r3, #31
   2401c:	18fb      	adds	r3, r7, r3
   2401e:	781b      	ldrb	r3, [r3, #0]
   24020:	b25b      	sxtb	r3, r3
}
   24022:	0018      	movs	r0, r3
   24024:	46bd      	mov	sp, r7
   24026:	b009      	add	sp, #36	; 0x24
   24028:	bd90      	pop	{r4, r7, pc}
   2402a:	46c0      	nop			; (mov r8, r8)
   2402c:	0003643f 	.word	0x0003643f
   24030:	00021bb1 	.word	0x00021bb1
   24034:	000c0008 	.word	0x000c0008
   24038:	00023c41 	.word	0x00023c41
   2403c:	00023cb5 	.word	0x00023cb5
   24040:	00001354 	.word	0x00001354

00024044 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   24044:	b590      	push	{r4, r7, lr}
   24046:	b085      	sub	sp, #20
   24048:	af00      	add	r7, sp, #0
   2404a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   2404c:	230f      	movs	r3, #15
   2404e:	18fb      	adds	r3, r7, r3
   24050:	2200      	movs	r2, #0
   24052:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   24054:	687b      	ldr	r3, [r7, #4]
   24056:	2b00      	cmp	r3, #0
   24058:	d013      	beq.n	24082 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   2405a:	230e      	movs	r3, #14
   2405c:	18fb      	adds	r3, r7, r3
   2405e:	687a      	ldr	r2, [r7, #4]
   24060:	7812      	ldrb	r2, [r2, #0]
   24062:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   24064:	230e      	movs	r3, #14
   24066:	18fb      	adds	r3, r7, r3
   24068:	781b      	ldrb	r3, [r3, #0]
   2406a:	2b00      	cmp	r3, #0
   2406c:	d004      	beq.n	24078 <nm_drv_init+0x34>
   2406e:	230e      	movs	r3, #14
   24070:	18fb      	adds	r3, r7, r3
   24072:	781b      	ldrb	r3, [r3, #0]
   24074:	2b04      	cmp	r3, #4
   24076:	d908      	bls.n	2408a <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   24078:	230e      	movs	r3, #14
   2407a:	18fb      	adds	r3, r7, r3
   2407c:	2201      	movs	r2, #1
   2407e:	701a      	strb	r2, [r3, #0]
   24080:	e003      	b.n	2408a <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   24082:	230e      	movs	r3, #14
   24084:	18fb      	adds	r3, r7, r3
   24086:	2201      	movs	r2, #1
   24088:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   2408a:	230f      	movs	r3, #15
   2408c:	18fc      	adds	r4, r7, r3
   2408e:	2000      	movs	r0, #0
   24090:	4b41      	ldr	r3, [pc, #260]	; (24198 <nm_drv_init+0x154>)
   24092:	4798      	blx	r3
   24094:	0003      	movs	r3, r0
   24096:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   24098:	230f      	movs	r3, #15
   2409a:	18fb      	adds	r3, r7, r3
   2409c:	781b      	ldrb	r3, [r3, #0]
   2409e:	b25b      	sxtb	r3, r3
   240a0:	2b00      	cmp	r3, #0
   240a2:	d00f      	beq.n	240c4 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   240a4:	2390      	movs	r3, #144	; 0x90
   240a6:	005a      	lsls	r2, r3, #1
   240a8:	493c      	ldr	r1, [pc, #240]	; (2419c <nm_drv_init+0x158>)
   240aa:	4b3d      	ldr	r3, [pc, #244]	; (241a0 <nm_drv_init+0x15c>)
   240ac:	0018      	movs	r0, r3
   240ae:	4b3d      	ldr	r3, [pc, #244]	; (241a4 <nm_drv_init+0x160>)
   240b0:	4798      	blx	r3
   240b2:	4b3d      	ldr	r3, [pc, #244]	; (241a8 <nm_drv_init+0x164>)
   240b4:	0018      	movs	r0, r3
   240b6:	4b3b      	ldr	r3, [pc, #236]	; (241a4 <nm_drv_init+0x160>)
   240b8:	4798      	blx	r3
   240ba:	4b3c      	ldr	r3, [pc, #240]	; (241ac <nm_drv_init+0x168>)
   240bc:	0018      	movs	r0, r3
   240be:	4b39      	ldr	r3, [pc, #228]	; (241a4 <nm_drv_init+0x160>)
   240c0:	4798      	blx	r3
		goto ERR1;
   240c2:	e061      	b.n	24188 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   240c4:	4b3a      	ldr	r3, [pc, #232]	; (241b0 <nm_drv_init+0x16c>)
   240c6:	0018      	movs	r0, r3
   240c8:	4b36      	ldr	r3, [pc, #216]	; (241a4 <nm_drv_init+0x160>)
   240ca:	4798      	blx	r3
   240cc:	4b39      	ldr	r3, [pc, #228]	; (241b4 <nm_drv_init+0x170>)
   240ce:	4798      	blx	r3
   240d0:	0002      	movs	r2, r0
   240d2:	4b39      	ldr	r3, [pc, #228]	; (241b8 <nm_drv_init+0x174>)
   240d4:	0011      	movs	r1, r2
   240d6:	0018      	movs	r0, r3
   240d8:	4b32      	ldr	r3, [pc, #200]	; (241a4 <nm_drv_init+0x160>)
   240da:	4798      	blx	r3
   240dc:	4b33      	ldr	r3, [pc, #204]	; (241ac <nm_drv_init+0x168>)
   240de:	0018      	movs	r0, r3
   240e0:	4b30      	ldr	r3, [pc, #192]	; (241a4 <nm_drv_init+0x160>)
   240e2:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   240e4:	4b35      	ldr	r3, [pc, #212]	; (241bc <nm_drv_init+0x178>)
   240e6:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   240e8:	230f      	movs	r3, #15
   240ea:	18fc      	adds	r4, r7, r3
   240ec:	230e      	movs	r3, #14
   240ee:	18fb      	adds	r3, r7, r3
   240f0:	781b      	ldrb	r3, [r3, #0]
   240f2:	0018      	movs	r0, r3
   240f4:	4b32      	ldr	r3, [pc, #200]	; (241c0 <nm_drv_init+0x17c>)
   240f6:	4798      	blx	r3
   240f8:	0003      	movs	r3, r0
   240fa:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   240fc:	230f      	movs	r3, #15
   240fe:	18fb      	adds	r3, r7, r3
   24100:	781b      	ldrb	r3, [r3, #0]
   24102:	b25b      	sxtb	r3, r3
   24104:	2b00      	cmp	r3, #0
   24106:	d13a      	bne.n	2417e <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   24108:	230f      	movs	r3, #15
   2410a:	18fc      	adds	r4, r7, r3
   2410c:	230e      	movs	r3, #14
   2410e:	18fb      	adds	r3, r7, r3
   24110:	781b      	ldrb	r3, [r3, #0]
   24112:	0018      	movs	r0, r3
   24114:	4b2b      	ldr	r3, [pc, #172]	; (241c4 <nm_drv_init+0x180>)
   24116:	4798      	blx	r3
   24118:	0003      	movs	r3, r0
   2411a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   2411c:	230f      	movs	r3, #15
   2411e:	18fb      	adds	r3, r7, r3
   24120:	781b      	ldrb	r3, [r3, #0]
   24122:	b25b      	sxtb	r3, r3
   24124:	2b00      	cmp	r3, #0
   24126:	d12c      	bne.n	24182 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   24128:	230e      	movs	r3, #14
   2412a:	18fb      	adds	r3, r7, r3
   2412c:	781b      	ldrb	r3, [r3, #0]
   2412e:	2b02      	cmp	r3, #2
   24130:	d02a      	beq.n	24188 <nm_drv_init+0x144>
   24132:	230e      	movs	r3, #14
   24134:	18fb      	adds	r3, r7, r3
   24136:	781b      	ldrb	r3, [r3, #0]
   24138:	2b03      	cmp	r3, #3
   2413a:	d025      	beq.n	24188 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   2413c:	230f      	movs	r3, #15
   2413e:	18fc      	adds	r4, r7, r3
   24140:	4b21      	ldr	r3, [pc, #132]	; (241c8 <nm_drv_init+0x184>)
   24142:	4798      	blx	r3
   24144:	0003      	movs	r3, r0
   24146:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   24148:	230f      	movs	r3, #15
   2414a:	18fb      	adds	r3, r7, r3
   2414c:	781b      	ldrb	r3, [r3, #0]
   2414e:	b25b      	sxtb	r3, r3
   24150:	2b00      	cmp	r3, #0
   24152:	d00f      	beq.n	24174 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   24154:	23a7      	movs	r3, #167	; 0xa7
   24156:	005a      	lsls	r2, r3, #1
   24158:	4910      	ldr	r1, [pc, #64]	; (2419c <nm_drv_init+0x158>)
   2415a:	4b11      	ldr	r3, [pc, #68]	; (241a0 <nm_drv_init+0x15c>)
   2415c:	0018      	movs	r0, r3
   2415e:	4b11      	ldr	r3, [pc, #68]	; (241a4 <nm_drv_init+0x160>)
   24160:	4798      	blx	r3
   24162:	4b1a      	ldr	r3, [pc, #104]	; (241cc <nm_drv_init+0x188>)
   24164:	0018      	movs	r0, r3
   24166:	4b0f      	ldr	r3, [pc, #60]	; (241a4 <nm_drv_init+0x160>)
   24168:	4798      	blx	r3
   2416a:	4b10      	ldr	r3, [pc, #64]	; (241ac <nm_drv_init+0x168>)
   2416c:	0018      	movs	r0, r3
   2416e:	4b0d      	ldr	r3, [pc, #52]	; (241a4 <nm_drv_init+0x160>)
   24170:	4798      	blx	r3
		goto ERR2;
   24172:	e007      	b.n	24184 <nm_drv_init+0x140>
	}
	return ret;
   24174:	230f      	movs	r3, #15
   24176:	18fb      	adds	r3, r7, r3
   24178:	781b      	ldrb	r3, [r3, #0]
   2417a:	b25b      	sxtb	r3, r3
   2417c:	e008      	b.n	24190 <nm_drv_init+0x14c>
		goto ERR2;
   2417e:	46c0      	nop			; (mov r8, r8)
   24180:	e000      	b.n	24184 <nm_drv_init+0x140>
		goto ERR2;
   24182:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   24184:	4b12      	ldr	r3, [pc, #72]	; (241d0 <nm_drv_init+0x18c>)
   24186:	4798      	blx	r3
ERR1:
	return ret;
   24188:	230f      	movs	r3, #15
   2418a:	18fb      	adds	r3, r7, r3
   2418c:	781b      	ldrb	r3, [r3, #0]
   2418e:	b25b      	sxtb	r3, r3
}
   24190:	0018      	movs	r0, r3
   24192:	46bd      	mov	sp, r7
   24194:	b005      	add	sp, #20
   24196:	bd90      	pop	{r4, r7, pc}
   24198:	00023ba5 	.word	0x00023ba5
   2419c:	0003aaac 	.word	0x0003aaac
   241a0:	0003a9dc 	.word	0x0003a9dc
   241a4:	0001ee19 	.word	0x0001ee19
   241a8:	0003a9f0 	.word	0x0003a9f0
   241ac:	0003aa0c 	.word	0x0003aa0c
   241b0:	0003aa10 	.word	0x0003aa10
   241b4:	00023541 	.word	0x00023541
   241b8:	0003aa1c 	.word	0x0003aa1c
   241bc:	00025a5d 	.word	0x00025a5d
   241c0:	00023899 	.word	0x00023899
   241c4:	00023a31 	.word	0x00023a31
   241c8:	0002348d 	.word	0x0002348d
   241cc:	0003aa2c 	.word	0x0003aa2c
   241d0:	00023bd9 	.word	0x00023bd9

000241d4 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   241d4:	b590      	push	{r4, r7, lr}
   241d6:	b085      	sub	sp, #20
   241d8:	af00      	add	r7, sp, #0
   241da:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   241dc:	230f      	movs	r3, #15
   241de:	18fc      	adds	r4, r7, r3
   241e0:	4b2e      	ldr	r3, [pc, #184]	; (2429c <nm_drv_deinit+0xc8>)
   241e2:	4798      	blx	r3
   241e4:	0003      	movs	r3, r0
   241e6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   241e8:	230f      	movs	r3, #15
   241ea:	18fb      	adds	r3, r7, r3
   241ec:	781b      	ldrb	r3, [r3, #0]
   241ee:	b25b      	sxtb	r3, r3
   241f0:	2b00      	cmp	r3, #0
   241f2:	d010      	beq.n	24216 <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   241f4:	2366      	movs	r3, #102	; 0x66
   241f6:	33ff      	adds	r3, #255	; 0xff
   241f8:	001a      	movs	r2, r3
   241fa:	4929      	ldr	r1, [pc, #164]	; (242a0 <nm_drv_deinit+0xcc>)
   241fc:	4b29      	ldr	r3, [pc, #164]	; (242a4 <nm_drv_deinit+0xd0>)
   241fe:	0018      	movs	r0, r3
   24200:	4b29      	ldr	r3, [pc, #164]	; (242a8 <nm_drv_deinit+0xd4>)
   24202:	4798      	blx	r3
   24204:	4b29      	ldr	r3, [pc, #164]	; (242ac <nm_drv_deinit+0xd8>)
   24206:	0018      	movs	r0, r3
   24208:	4b27      	ldr	r3, [pc, #156]	; (242a8 <nm_drv_deinit+0xd4>)
   2420a:	4798      	blx	r3
   2420c:	4b28      	ldr	r3, [pc, #160]	; (242b0 <nm_drv_deinit+0xdc>)
   2420e:	0018      	movs	r0, r3
   24210:	4b25      	ldr	r3, [pc, #148]	; (242a8 <nm_drv_deinit+0xd4>)
   24212:	4798      	blx	r3
		goto ERR1;
   24214:	e03a      	b.n	2428c <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   24216:	230f      	movs	r3, #15
   24218:	18fc      	adds	r4, r7, r3
   2421a:	2000      	movs	r0, #0
   2421c:	4b25      	ldr	r3, [pc, #148]	; (242b4 <nm_drv_deinit+0xe0>)
   2421e:	4798      	blx	r3
   24220:	0003      	movs	r3, r0
   24222:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   24224:	230f      	movs	r3, #15
   24226:	18fb      	adds	r3, r7, r3
   24228:	781b      	ldrb	r3, [r3, #0]
   2422a:	b25b      	sxtb	r3, r3
   2422c:	2b00      	cmp	r3, #0
   2422e:	d00f      	beq.n	24250 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   24230:	23b6      	movs	r3, #182	; 0xb6
   24232:	005a      	lsls	r2, r3, #1
   24234:	491a      	ldr	r1, [pc, #104]	; (242a0 <nm_drv_deinit+0xcc>)
   24236:	4b1b      	ldr	r3, [pc, #108]	; (242a4 <nm_drv_deinit+0xd0>)
   24238:	0018      	movs	r0, r3
   2423a:	4b1b      	ldr	r3, [pc, #108]	; (242a8 <nm_drv_deinit+0xd4>)
   2423c:	4798      	blx	r3
   2423e:	4b1e      	ldr	r3, [pc, #120]	; (242b8 <nm_drv_deinit+0xe4>)
   24240:	0018      	movs	r0, r3
   24242:	4b19      	ldr	r3, [pc, #100]	; (242a8 <nm_drv_deinit+0xd4>)
   24244:	4798      	blx	r3
   24246:	4b1a      	ldr	r3, [pc, #104]	; (242b0 <nm_drv_deinit+0xdc>)
   24248:	0018      	movs	r0, r3
   2424a:	4b17      	ldr	r3, [pc, #92]	; (242a8 <nm_drv_deinit+0xd4>)
   2424c:	4798      	blx	r3
		goto ERR1;
   2424e:	e01d      	b.n	2428c <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   24250:	230f      	movs	r3, #15
   24252:	18fc      	adds	r4, r7, r3
   24254:	4b19      	ldr	r3, [pc, #100]	; (242bc <nm_drv_deinit+0xe8>)
   24256:	4798      	blx	r3
   24258:	0003      	movs	r3, r0
   2425a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   2425c:	230f      	movs	r3, #15
   2425e:	18fb      	adds	r3, r7, r3
   24260:	781b      	ldrb	r3, [r3, #0]
   24262:	b25b      	sxtb	r3, r3
   24264:	2b00      	cmp	r3, #0
   24266:	d00f      	beq.n	24288 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   24268:	23b9      	movs	r3, #185	; 0xb9
   2426a:	005a      	lsls	r2, r3, #1
   2426c:	490c      	ldr	r1, [pc, #48]	; (242a0 <nm_drv_deinit+0xcc>)
   2426e:	4b0d      	ldr	r3, [pc, #52]	; (242a4 <nm_drv_deinit+0xd0>)
   24270:	0018      	movs	r0, r3
   24272:	4b0d      	ldr	r3, [pc, #52]	; (242a8 <nm_drv_deinit+0xd4>)
   24274:	4798      	blx	r3
   24276:	4b12      	ldr	r3, [pc, #72]	; (242c0 <nm_drv_deinit+0xec>)
   24278:	0018      	movs	r0, r3
   2427a:	4b0b      	ldr	r3, [pc, #44]	; (242a8 <nm_drv_deinit+0xd4>)
   2427c:	4798      	blx	r3
   2427e:	4b0c      	ldr	r3, [pc, #48]	; (242b0 <nm_drv_deinit+0xdc>)
   24280:	0018      	movs	r0, r3
   24282:	4b09      	ldr	r3, [pc, #36]	; (242a8 <nm_drv_deinit+0xd4>)
   24284:	4798      	blx	r3
		goto ERR1;
   24286:	e001      	b.n	2428c <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   24288:	4b0e      	ldr	r3, [pc, #56]	; (242c4 <nm_drv_deinit+0xf0>)
   2428a:	4798      	blx	r3
#endif

ERR1:
	return ret;
   2428c:	230f      	movs	r3, #15
   2428e:	18fb      	adds	r3, r7, r3
   24290:	781b      	ldrb	r3, [r3, #0]
   24292:	b25b      	sxtb	r3, r3
}
   24294:	0018      	movs	r0, r3
   24296:	46bd      	mov	sp, r7
   24298:	b005      	add	sp, #20
   2429a:	bd90      	pop	{r4, r7, pc}
   2429c:	00023ae5 	.word	0x00023ae5
   242a0:	0003aab8 	.word	0x0003aab8
   242a4:	0003a9dc 	.word	0x0003a9dc
   242a8:	0001ee19 	.word	0x0001ee19
   242ac:	0003aa4c 	.word	0x0003aa4c
   242b0:	0003aa0c 	.word	0x0003aa0c
   242b4:	00026f05 	.word	0x00026f05
   242b8:	0003aa6c 	.word	0x0003aa6c
   242bc:	00023bd9 	.word	0x00023bd9
   242c0:	0003aa90 	.word	0x0003aa90
   242c4:	00025ba9 	.word	0x00025ba9

000242c8 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   242c8:	b580      	push	{r7, lr}
   242ca:	b086      	sub	sp, #24
   242cc:	af00      	add	r7, sp, #0
   242ce:	6078      	str	r0, [r7, #4]
   242d0:	000a      	movs	r2, r1
   242d2:	1cbb      	adds	r3, r7, #2
   242d4:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   242d6:	230c      	movs	r3, #12
   242d8:	18fb      	adds	r3, r7, r3
   242da:	2200      	movs	r2, #0
   242dc:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   242de:	230c      	movs	r3, #12
   242e0:	18fb      	adds	r3, r7, r3
   242e2:	687a      	ldr	r2, [r7, #4]
   242e4:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   242e6:	230c      	movs	r3, #12
   242e8:	18fb      	adds	r3, r7, r3
   242ea:	1cba      	adds	r2, r7, #2
   242ec:	8812      	ldrh	r2, [r2, #0]
   242ee:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   242f0:	230c      	movs	r3, #12
   242f2:	18fb      	adds	r3, r7, r3
   242f4:	0019      	movs	r1, r3
   242f6:	2003      	movs	r0, #3
   242f8:	4b03      	ldr	r3, [pc, #12]	; (24308 <nmi_spi_read+0x40>)
   242fa:	4798      	blx	r3
   242fc:	0003      	movs	r3, r0
}
   242fe:	0018      	movs	r0, r3
   24300:	46bd      	mov	sp, r7
   24302:	b006      	add	sp, #24
   24304:	bd80      	pop	{r7, pc}
   24306:	46c0      	nop			; (mov r8, r8)
   24308:	00021a75 	.word	0x00021a75

0002430c <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   2430c:	b580      	push	{r7, lr}
   2430e:	b086      	sub	sp, #24
   24310:	af00      	add	r7, sp, #0
   24312:	6078      	str	r0, [r7, #4]
   24314:	000a      	movs	r2, r1
   24316:	1cbb      	adds	r3, r7, #2
   24318:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   2431a:	230c      	movs	r3, #12
   2431c:	18fb      	adds	r3, r7, r3
   2431e:	687a      	ldr	r2, [r7, #4]
   24320:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   24322:	230c      	movs	r3, #12
   24324:	18fb      	adds	r3, r7, r3
   24326:	2200      	movs	r2, #0
   24328:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   2432a:	230c      	movs	r3, #12
   2432c:	18fb      	adds	r3, r7, r3
   2432e:	1cba      	adds	r2, r7, #2
   24330:	8812      	ldrh	r2, [r2, #0]
   24332:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   24334:	230c      	movs	r3, #12
   24336:	18fb      	adds	r3, r7, r3
   24338:	0019      	movs	r1, r3
   2433a:	2003      	movs	r0, #3
   2433c:	4b03      	ldr	r3, [pc, #12]	; (2434c <nmi_spi_write+0x40>)
   2433e:	4798      	blx	r3
   24340:	0003      	movs	r3, r0
}
   24342:	0018      	movs	r0, r3
   24344:	46bd      	mov	sp, r7
   24346:	b006      	add	sp, #24
   24348:	bd80      	pop	{r7, pc}
   2434a:	46c0      	nop			; (mov r8, r8)
   2434c:	00021a75 	.word	0x00021a75

00024350 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   24350:	b580      	push	{r7, lr}
   24352:	b088      	sub	sp, #32
   24354:	af00      	add	r7, sp, #0
   24356:	60f8      	str	r0, [r7, #12]
   24358:	60b9      	str	r1, [r7, #8]
   2435a:	1dbb      	adds	r3, r7, #6
   2435c:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   2435e:	2314      	movs	r3, #20
   24360:	18fb      	adds	r3, r7, r3
   24362:	68fa      	ldr	r2, [r7, #12]
   24364:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   24366:	2314      	movs	r3, #20
   24368:	18fb      	adds	r3, r7, r3
   2436a:	68ba      	ldr	r2, [r7, #8]
   2436c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   2436e:	2314      	movs	r3, #20
   24370:	18fb      	adds	r3, r7, r3
   24372:	1dba      	adds	r2, r7, #6
   24374:	8812      	ldrh	r2, [r2, #0]
   24376:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   24378:	2314      	movs	r3, #20
   2437a:	18fb      	adds	r3, r7, r3
   2437c:	0019      	movs	r1, r3
   2437e:	2003      	movs	r0, #3
   24380:	4b03      	ldr	r3, [pc, #12]	; (24390 <nmi_spi_rw+0x40>)
   24382:	4798      	blx	r3
   24384:	0003      	movs	r3, r0
}
   24386:	0018      	movs	r0, r3
   24388:	46bd      	mov	sp, r7
   2438a:	b008      	add	sp, #32
   2438c:	bd80      	pop	{r7, pc}
   2438e:	46c0      	nop			; (mov r8, r8)
   24390:	00021a75 	.word	0x00021a75

00024394 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   24394:	b580      	push	{r7, lr}
   24396:	b082      	sub	sp, #8
   24398:	af00      	add	r7, sp, #0
   2439a:	0002      	movs	r2, r0
   2439c:	1dfb      	adds	r3, r7, #7
   2439e:	701a      	strb	r2, [r3, #0]
   243a0:	1dbb      	adds	r3, r7, #6
   243a2:	1c0a      	adds	r2, r1, #0
   243a4:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   243a6:	1dfb      	adds	r3, r7, #7
   243a8:	781b      	ldrb	r3, [r3, #0]
   243aa:	005a      	lsls	r2, r3, #1
   243ac:	1dbb      	adds	r3, r7, #6
   243ae:	781b      	ldrb	r3, [r3, #0]
   243b0:	4053      	eors	r3, r2
   243b2:	4a03      	ldr	r2, [pc, #12]	; (243c0 <crc7_byte+0x2c>)
   243b4:	5cd3      	ldrb	r3, [r2, r3]
}
   243b6:	0018      	movs	r0, r3
   243b8:	46bd      	mov	sp, r7
   243ba:	b002      	add	sp, #8
   243bc:	bd80      	pop	{r7, pc}
   243be:	46c0      	nop			; (mov r8, r8)
   243c0:	0003aac8 	.word	0x0003aac8

000243c4 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   243c4:	b590      	push	{r4, r7, lr}
   243c6:	b085      	sub	sp, #20
   243c8:	af00      	add	r7, sp, #0
   243ca:	60b9      	str	r1, [r7, #8]
   243cc:	607a      	str	r2, [r7, #4]
   243ce:	230f      	movs	r3, #15
   243d0:	18fb      	adds	r3, r7, r3
   243d2:	1c02      	adds	r2, r0, #0
   243d4:	701a      	strb	r2, [r3, #0]
	while (len--)
   243d6:	e00e      	b.n	243f6 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   243d8:	68bb      	ldr	r3, [r7, #8]
   243da:	1c5a      	adds	r2, r3, #1
   243dc:	60ba      	str	r2, [r7, #8]
   243de:	781a      	ldrb	r2, [r3, #0]
   243e0:	230f      	movs	r3, #15
   243e2:	18fc      	adds	r4, r7, r3
   243e4:	230f      	movs	r3, #15
   243e6:	18fb      	adds	r3, r7, r3
   243e8:	781b      	ldrb	r3, [r3, #0]
   243ea:	0011      	movs	r1, r2
   243ec:	0018      	movs	r0, r3
   243ee:	4b08      	ldr	r3, [pc, #32]	; (24410 <crc7+0x4c>)
   243f0:	4798      	blx	r3
   243f2:	0003      	movs	r3, r0
   243f4:	7023      	strb	r3, [r4, #0]
	while (len--)
   243f6:	687b      	ldr	r3, [r7, #4]
   243f8:	1e5a      	subs	r2, r3, #1
   243fa:	607a      	str	r2, [r7, #4]
   243fc:	2b00      	cmp	r3, #0
   243fe:	d1eb      	bne.n	243d8 <crc7+0x14>
	return crc;
   24400:	230f      	movs	r3, #15
   24402:	18fb      	adds	r3, r7, r3
   24404:	781b      	ldrb	r3, [r3, #0]
}
   24406:	0018      	movs	r0, r3
   24408:	46bd      	mov	sp, r7
   2440a:	b005      	add	sp, #20
   2440c:	bd90      	pop	{r4, r7, pc}
   2440e:	46c0      	nop			; (mov r8, r8)
   24410:	00024395 	.word	0x00024395

00024414 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   24414:	b590      	push	{r4, r7, lr}
   24416:	b089      	sub	sp, #36	; 0x24
   24418:	af00      	add	r7, sp, #0
   2441a:	60b9      	str	r1, [r7, #8]
   2441c:	607a      	str	r2, [r7, #4]
   2441e:	603b      	str	r3, [r7, #0]
   24420:	230f      	movs	r3, #15
   24422:	18fb      	adds	r3, r7, r3
   24424:	1c02      	adds	r2, r0, #0
   24426:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   24428:	231f      	movs	r3, #31
   2442a:	18fb      	adds	r3, r7, r3
   2442c:	2205      	movs	r2, #5
   2442e:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   24430:	231e      	movs	r3, #30
   24432:	18fb      	adds	r3, r7, r3
   24434:	2201      	movs	r2, #1
   24436:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   24438:	2314      	movs	r3, #20
   2443a:	18fb      	adds	r3, r7, r3
   2443c:	220f      	movs	r2, #15
   2443e:	18ba      	adds	r2, r7, r2
   24440:	7812      	ldrb	r2, [r2, #0]
   24442:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   24444:	230f      	movs	r3, #15
   24446:	18fb      	adds	r3, r7, r3
   24448:	781b      	ldrb	r3, [r3, #0]
   2444a:	3bc1      	subs	r3, #193	; 0xc1
   2444c:	2b0e      	cmp	r3, #14
   2444e:	d900      	bls.n	24452 <spi_cmd+0x3e>
   24450:	e11b      	b.n	2468a <spi_cmd+0x276>
   24452:	009a      	lsls	r2, r3, #2
   24454:	4bb6      	ldr	r3, [pc, #728]	; (24730 <spi_cmd+0x31c>)
   24456:	18d3      	adds	r3, r2, r3
   24458:	681b      	ldr	r3, [r3, #0]
   2445a:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   2445c:	68bb      	ldr	r3, [r7, #8]
   2445e:	0c1b      	lsrs	r3, r3, #16
   24460:	b2da      	uxtb	r2, r3
   24462:	2314      	movs	r3, #20
   24464:	18fb      	adds	r3, r7, r3
   24466:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   24468:	68bb      	ldr	r3, [r7, #8]
   2446a:	0a1b      	lsrs	r3, r3, #8
   2446c:	b2da      	uxtb	r2, r3
   2446e:	2314      	movs	r3, #20
   24470:	18fb      	adds	r3, r7, r3
   24472:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   24474:	68bb      	ldr	r3, [r7, #8]
   24476:	b2da      	uxtb	r2, r3
   24478:	2314      	movs	r3, #20
   2447a:	18fb      	adds	r3, r7, r3
   2447c:	70da      	strb	r2, [r3, #3]
		len = 5;
   2447e:	231f      	movs	r3, #31
   24480:	18fb      	adds	r3, r7, r3
   24482:	2205      	movs	r2, #5
   24484:	701a      	strb	r2, [r3, #0]
		break;
   24486:	e105      	b.n	24694 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   24488:	68bb      	ldr	r3, [r7, #8]
   2448a:	0a1b      	lsrs	r3, r3, #8
   2448c:	b2da      	uxtb	r2, r3
   2448e:	2314      	movs	r3, #20
   24490:	18fb      	adds	r3, r7, r3
   24492:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   24494:	2330      	movs	r3, #48	; 0x30
   24496:	18fb      	adds	r3, r7, r3
   24498:	781b      	ldrb	r3, [r3, #0]
   2449a:	2b00      	cmp	r3, #0
   2449c:	d009      	beq.n	244b2 <spi_cmd+0x9e>
   2449e:	2314      	movs	r3, #20
   244a0:	18fb      	adds	r3, r7, r3
   244a2:	785b      	ldrb	r3, [r3, #1]
   244a4:	2280      	movs	r2, #128	; 0x80
   244a6:	4252      	negs	r2, r2
   244a8:	4313      	orrs	r3, r2
   244aa:	b2da      	uxtb	r2, r3
   244ac:	2314      	movs	r3, #20
   244ae:	18fb      	adds	r3, r7, r3
   244b0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   244b2:	68bb      	ldr	r3, [r7, #8]
   244b4:	b2da      	uxtb	r2, r3
   244b6:	2314      	movs	r3, #20
   244b8:	18fb      	adds	r3, r7, r3
   244ba:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   244bc:	2314      	movs	r3, #20
   244be:	18fb      	adds	r3, r7, r3
   244c0:	2200      	movs	r2, #0
   244c2:	70da      	strb	r2, [r3, #3]
		len = 5;
   244c4:	231f      	movs	r3, #31
   244c6:	18fb      	adds	r3, r7, r3
   244c8:	2205      	movs	r2, #5
   244ca:	701a      	strb	r2, [r3, #0]
		break;
   244cc:	e0e2      	b.n	24694 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   244ce:	2314      	movs	r3, #20
   244d0:	18fb      	adds	r3, r7, r3
   244d2:	2200      	movs	r2, #0
   244d4:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   244d6:	2314      	movs	r3, #20
   244d8:	18fb      	adds	r3, r7, r3
   244da:	2200      	movs	r2, #0
   244dc:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   244de:	2314      	movs	r3, #20
   244e0:	18fb      	adds	r3, r7, r3
   244e2:	2200      	movs	r2, #0
   244e4:	70da      	strb	r2, [r3, #3]
		len = 5;
   244e6:	231f      	movs	r3, #31
   244e8:	18fb      	adds	r3, r7, r3
   244ea:	2205      	movs	r2, #5
   244ec:	701a      	strb	r2, [r3, #0]
		break;
   244ee:	e0d1      	b.n	24694 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   244f0:	2314      	movs	r3, #20
   244f2:	18fb      	adds	r3, r7, r3
   244f4:	2200      	movs	r2, #0
   244f6:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   244f8:	2314      	movs	r3, #20
   244fa:	18fb      	adds	r3, r7, r3
   244fc:	2200      	movs	r2, #0
   244fe:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   24500:	2314      	movs	r3, #20
   24502:	18fb      	adds	r3, r7, r3
   24504:	2200      	movs	r2, #0
   24506:	70da      	strb	r2, [r3, #3]
		len = 5;
   24508:	231f      	movs	r3, #31
   2450a:	18fb      	adds	r3, r7, r3
   2450c:	2205      	movs	r2, #5
   2450e:	701a      	strb	r2, [r3, #0]
		break;
   24510:	e0c0      	b.n	24694 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   24512:	2314      	movs	r3, #20
   24514:	18fb      	adds	r3, r7, r3
   24516:	22ff      	movs	r2, #255	; 0xff
   24518:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   2451a:	2314      	movs	r3, #20
   2451c:	18fb      	adds	r3, r7, r3
   2451e:	22ff      	movs	r2, #255	; 0xff
   24520:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   24522:	2314      	movs	r3, #20
   24524:	18fb      	adds	r3, r7, r3
   24526:	22ff      	movs	r2, #255	; 0xff
   24528:	70da      	strb	r2, [r3, #3]
		len = 5;
   2452a:	231f      	movs	r3, #31
   2452c:	18fb      	adds	r3, r7, r3
   2452e:	2205      	movs	r2, #5
   24530:	701a      	strb	r2, [r3, #0]
		break;
   24532:	e0af      	b.n	24694 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   24534:	68bb      	ldr	r3, [r7, #8]
   24536:	0c1b      	lsrs	r3, r3, #16
   24538:	b2da      	uxtb	r2, r3
   2453a:	2314      	movs	r3, #20
   2453c:	18fb      	adds	r3, r7, r3
   2453e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   24540:	68bb      	ldr	r3, [r7, #8]
   24542:	0a1b      	lsrs	r3, r3, #8
   24544:	b2da      	uxtb	r2, r3
   24546:	2314      	movs	r3, #20
   24548:	18fb      	adds	r3, r7, r3
   2454a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   2454c:	68bb      	ldr	r3, [r7, #8]
   2454e:	b2da      	uxtb	r2, r3
   24550:	2314      	movs	r3, #20
   24552:	18fb      	adds	r3, r7, r3
   24554:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   24556:	683b      	ldr	r3, [r7, #0]
   24558:	0a1b      	lsrs	r3, r3, #8
   2455a:	b2da      	uxtb	r2, r3
   2455c:	2314      	movs	r3, #20
   2455e:	18fb      	adds	r3, r7, r3
   24560:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   24562:	683b      	ldr	r3, [r7, #0]
   24564:	b2da      	uxtb	r2, r3
   24566:	2314      	movs	r3, #20
   24568:	18fb      	adds	r3, r7, r3
   2456a:	715a      	strb	r2, [r3, #5]
		len = 7;
   2456c:	231f      	movs	r3, #31
   2456e:	18fb      	adds	r3, r7, r3
   24570:	2207      	movs	r2, #7
   24572:	701a      	strb	r2, [r3, #0]
		break;
   24574:	e08e      	b.n	24694 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   24576:	68bb      	ldr	r3, [r7, #8]
   24578:	0c1b      	lsrs	r3, r3, #16
   2457a:	b2da      	uxtb	r2, r3
   2457c:	2314      	movs	r3, #20
   2457e:	18fb      	adds	r3, r7, r3
   24580:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   24582:	68bb      	ldr	r3, [r7, #8]
   24584:	0a1b      	lsrs	r3, r3, #8
   24586:	b2da      	uxtb	r2, r3
   24588:	2314      	movs	r3, #20
   2458a:	18fb      	adds	r3, r7, r3
   2458c:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   2458e:	68bb      	ldr	r3, [r7, #8]
   24590:	b2da      	uxtb	r2, r3
   24592:	2314      	movs	r3, #20
   24594:	18fb      	adds	r3, r7, r3
   24596:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   24598:	683b      	ldr	r3, [r7, #0]
   2459a:	0c1b      	lsrs	r3, r3, #16
   2459c:	b2da      	uxtb	r2, r3
   2459e:	2314      	movs	r3, #20
   245a0:	18fb      	adds	r3, r7, r3
   245a2:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   245a4:	683b      	ldr	r3, [r7, #0]
   245a6:	0a1b      	lsrs	r3, r3, #8
   245a8:	b2da      	uxtb	r2, r3
   245aa:	2314      	movs	r3, #20
   245ac:	18fb      	adds	r3, r7, r3
   245ae:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   245b0:	683b      	ldr	r3, [r7, #0]
   245b2:	b2da      	uxtb	r2, r3
   245b4:	2314      	movs	r3, #20
   245b6:	18fb      	adds	r3, r7, r3
   245b8:	719a      	strb	r2, [r3, #6]
		len = 8;
   245ba:	231f      	movs	r3, #31
   245bc:	18fb      	adds	r3, r7, r3
   245be:	2208      	movs	r2, #8
   245c0:	701a      	strb	r2, [r3, #0]
		break;
   245c2:	e067      	b.n	24694 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   245c4:	68bb      	ldr	r3, [r7, #8]
   245c6:	0a1b      	lsrs	r3, r3, #8
   245c8:	b2da      	uxtb	r2, r3
   245ca:	2314      	movs	r3, #20
   245cc:	18fb      	adds	r3, r7, r3
   245ce:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   245d0:	2330      	movs	r3, #48	; 0x30
   245d2:	18fb      	adds	r3, r7, r3
   245d4:	781b      	ldrb	r3, [r3, #0]
   245d6:	2b00      	cmp	r3, #0
   245d8:	d009      	beq.n	245ee <spi_cmd+0x1da>
   245da:	2314      	movs	r3, #20
   245dc:	18fb      	adds	r3, r7, r3
   245de:	785b      	ldrb	r3, [r3, #1]
   245e0:	2280      	movs	r2, #128	; 0x80
   245e2:	4252      	negs	r2, r2
   245e4:	4313      	orrs	r3, r2
   245e6:	b2da      	uxtb	r2, r3
   245e8:	2314      	movs	r3, #20
   245ea:	18fb      	adds	r3, r7, r3
   245ec:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   245ee:	68bb      	ldr	r3, [r7, #8]
   245f0:	b2da      	uxtb	r2, r3
   245f2:	2314      	movs	r3, #20
   245f4:	18fb      	adds	r3, r7, r3
   245f6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   245f8:	687b      	ldr	r3, [r7, #4]
   245fa:	0e1b      	lsrs	r3, r3, #24
   245fc:	b2da      	uxtb	r2, r3
   245fe:	2314      	movs	r3, #20
   24600:	18fb      	adds	r3, r7, r3
   24602:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   24604:	687b      	ldr	r3, [r7, #4]
   24606:	0c1b      	lsrs	r3, r3, #16
   24608:	b2da      	uxtb	r2, r3
   2460a:	2314      	movs	r3, #20
   2460c:	18fb      	adds	r3, r7, r3
   2460e:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   24610:	687b      	ldr	r3, [r7, #4]
   24612:	0a1b      	lsrs	r3, r3, #8
   24614:	b2da      	uxtb	r2, r3
   24616:	2314      	movs	r3, #20
   24618:	18fb      	adds	r3, r7, r3
   2461a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   2461c:	687b      	ldr	r3, [r7, #4]
   2461e:	b2da      	uxtb	r2, r3
   24620:	2314      	movs	r3, #20
   24622:	18fb      	adds	r3, r7, r3
   24624:	719a      	strb	r2, [r3, #6]
		len = 8;
   24626:	231f      	movs	r3, #31
   24628:	18fb      	adds	r3, r7, r3
   2462a:	2208      	movs	r2, #8
   2462c:	701a      	strb	r2, [r3, #0]
		break;
   2462e:	e031      	b.n	24694 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   24630:	68bb      	ldr	r3, [r7, #8]
   24632:	0c1b      	lsrs	r3, r3, #16
   24634:	b2da      	uxtb	r2, r3
   24636:	2314      	movs	r3, #20
   24638:	18fb      	adds	r3, r7, r3
   2463a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   2463c:	68bb      	ldr	r3, [r7, #8]
   2463e:	0a1b      	lsrs	r3, r3, #8
   24640:	b2da      	uxtb	r2, r3
   24642:	2314      	movs	r3, #20
   24644:	18fb      	adds	r3, r7, r3
   24646:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   24648:	68bb      	ldr	r3, [r7, #8]
   2464a:	b2da      	uxtb	r2, r3
   2464c:	2314      	movs	r3, #20
   2464e:	18fb      	adds	r3, r7, r3
   24650:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   24652:	687b      	ldr	r3, [r7, #4]
   24654:	0e1b      	lsrs	r3, r3, #24
   24656:	b2da      	uxtb	r2, r3
   24658:	2314      	movs	r3, #20
   2465a:	18fb      	adds	r3, r7, r3
   2465c:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   2465e:	687b      	ldr	r3, [r7, #4]
   24660:	0c1b      	lsrs	r3, r3, #16
   24662:	b2da      	uxtb	r2, r3
   24664:	2314      	movs	r3, #20
   24666:	18fb      	adds	r3, r7, r3
   24668:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   2466a:	687b      	ldr	r3, [r7, #4]
   2466c:	0a1b      	lsrs	r3, r3, #8
   2466e:	b2da      	uxtb	r2, r3
   24670:	2314      	movs	r3, #20
   24672:	18fb      	adds	r3, r7, r3
   24674:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   24676:	687b      	ldr	r3, [r7, #4]
   24678:	b2da      	uxtb	r2, r3
   2467a:	2314      	movs	r3, #20
   2467c:	18fb      	adds	r3, r7, r3
   2467e:	71da      	strb	r2, [r3, #7]
		len = 9;
   24680:	231f      	movs	r3, #31
   24682:	18fb      	adds	r3, r7, r3
   24684:	2209      	movs	r2, #9
   24686:	701a      	strb	r2, [r3, #0]
		break;
   24688:	e004      	b.n	24694 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   2468a:	231e      	movs	r3, #30
   2468c:	18fb      	adds	r3, r7, r3
   2468e:	2200      	movs	r2, #0
   24690:	701a      	strb	r2, [r3, #0]
		break;
   24692:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   24694:	231e      	movs	r3, #30
   24696:	18fb      	adds	r3, r7, r3
   24698:	781b      	ldrb	r3, [r3, #0]
   2469a:	b25b      	sxtb	r3, r3
   2469c:	2b00      	cmp	r3, #0
   2469e:	d03f      	beq.n	24720 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   246a0:	4b24      	ldr	r3, [pc, #144]	; (24734 <spi_cmd+0x320>)
   246a2:	781b      	ldrb	r3, [r3, #0]
   246a4:	2b00      	cmp	r3, #0
   246a6:	d115      	bne.n	246d4 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   246a8:	231f      	movs	r3, #31
   246aa:	18fb      	adds	r3, r7, r3
   246ac:	781b      	ldrb	r3, [r3, #0]
   246ae:	1e5c      	subs	r4, r3, #1
   246b0:	231f      	movs	r3, #31
   246b2:	18fb      	adds	r3, r7, r3
   246b4:	781b      	ldrb	r3, [r3, #0]
   246b6:	3b01      	subs	r3, #1
   246b8:	001a      	movs	r2, r3
   246ba:	2314      	movs	r3, #20
   246bc:	18fb      	adds	r3, r7, r3
   246be:	0019      	movs	r1, r3
   246c0:	207f      	movs	r0, #127	; 0x7f
   246c2:	4b1d      	ldr	r3, [pc, #116]	; (24738 <spi_cmd+0x324>)
   246c4:	4798      	blx	r3
   246c6:	0003      	movs	r3, r0
   246c8:	18db      	adds	r3, r3, r3
   246ca:	b2da      	uxtb	r2, r3
   246cc:	2314      	movs	r3, #20
   246ce:	18fb      	adds	r3, r7, r3
   246d0:	551a      	strb	r2, [r3, r4]
   246d2:	e006      	b.n	246e2 <spi_cmd+0x2ce>
		else
			len-=1;
   246d4:	231f      	movs	r3, #31
   246d6:	18fb      	adds	r3, r7, r3
   246d8:	221f      	movs	r2, #31
   246da:	18ba      	adds	r2, r7, r2
   246dc:	7812      	ldrb	r2, [r2, #0]
   246de:	3a01      	subs	r2, #1
   246e0:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   246e2:	231f      	movs	r3, #31
   246e4:	18fb      	adds	r3, r7, r3
   246e6:	781b      	ldrb	r3, [r3, #0]
   246e8:	b29a      	uxth	r2, r3
   246ea:	2314      	movs	r3, #20
   246ec:	18fb      	adds	r3, r7, r3
   246ee:	0011      	movs	r1, r2
   246f0:	0018      	movs	r0, r3
   246f2:	4b12      	ldr	r3, [pc, #72]	; (2473c <spi_cmd+0x328>)
   246f4:	4798      	blx	r3
   246f6:	1e03      	subs	r3, r0, #0
   246f8:	d012      	beq.n	24720 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   246fa:	2390      	movs	r3, #144	; 0x90
   246fc:	005a      	lsls	r2, r3, #1
   246fe:	4910      	ldr	r1, [pc, #64]	; (24740 <spi_cmd+0x32c>)
   24700:	4b10      	ldr	r3, [pc, #64]	; (24744 <spi_cmd+0x330>)
   24702:	0018      	movs	r0, r3
   24704:	4b10      	ldr	r3, [pc, #64]	; (24748 <spi_cmd+0x334>)
   24706:	4798      	blx	r3
   24708:	4b10      	ldr	r3, [pc, #64]	; (2474c <spi_cmd+0x338>)
   2470a:	0018      	movs	r0, r3
   2470c:	4b0e      	ldr	r3, [pc, #56]	; (24748 <spi_cmd+0x334>)
   2470e:	4798      	blx	r3
   24710:	4b0f      	ldr	r3, [pc, #60]	; (24750 <spi_cmd+0x33c>)
   24712:	0018      	movs	r0, r3
   24714:	4b0c      	ldr	r3, [pc, #48]	; (24748 <spi_cmd+0x334>)
   24716:	4798      	blx	r3
			result = N_FAIL;
   24718:	231e      	movs	r3, #30
   2471a:	18fb      	adds	r3, r7, r3
   2471c:	2200      	movs	r2, #0
   2471e:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   24720:	231e      	movs	r3, #30
   24722:	18fb      	adds	r3, r7, r3
   24724:	781b      	ldrb	r3, [r3, #0]
   24726:	b25b      	sxtb	r3, r3
}
   24728:	0018      	movs	r0, r3
   2472a:	46bd      	mov	sp, r7
   2472c:	b009      	add	sp, #36	; 0x24
   2472e:	bd90      	pop	{r4, r7, pc}
   24730:	0003b140 	.word	0x0003b140
   24734:	200042b4 	.word	0x200042b4
   24738:	000243c5 	.word	0x000243c5
   2473c:	0002430d 	.word	0x0002430d
   24740:	0003b1b8 	.word	0x0003b1b8
   24744:	0003abc8 	.word	0x0003abc8
   24748:	0001ee19 	.word	0x0001ee19
   2474c:	0003abdc 	.word	0x0003abdc
   24750:	0003ac08 	.word	0x0003ac08

00024754 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   24754:	b590      	push	{r4, r7, lr}
   24756:	b085      	sub	sp, #20
   24758:	af00      	add	r7, sp, #0
   2475a:	0002      	movs	r2, r0
   2475c:	1dfb      	adds	r3, r7, #7
   2475e:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   24760:	230e      	movs	r3, #14
   24762:	18fb      	adds	r3, r7, r3
   24764:	2201      	movs	r2, #1
   24766:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   24768:	4b32      	ldr	r3, [pc, #200]	; (24834 <spi_data_rsp+0xe0>)
   2476a:	781b      	ldrb	r3, [r3, #0]
   2476c:	2b00      	cmp	r3, #0
   2476e:	d104      	bne.n	2477a <spi_data_rsp+0x26>
		len = 2;
   24770:	230f      	movs	r3, #15
   24772:	18fb      	adds	r3, r7, r3
   24774:	2202      	movs	r2, #2
   24776:	701a      	strb	r2, [r3, #0]
   24778:	e003      	b.n	24782 <spi_data_rsp+0x2e>
	else
		len = 3;
   2477a:	230f      	movs	r3, #15
   2477c:	18fb      	adds	r3, r7, r3
   2477e:	2203      	movs	r2, #3
   24780:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   24782:	230f      	movs	r3, #15
   24784:	18fb      	adds	r3, r7, r3
   24786:	781b      	ldrb	r3, [r3, #0]
   24788:	b29a      	uxth	r2, r3
   2478a:	2308      	movs	r3, #8
   2478c:	18fb      	adds	r3, r7, r3
   2478e:	0011      	movs	r1, r2
   24790:	0018      	movs	r0, r3
   24792:	4b29      	ldr	r3, [pc, #164]	; (24838 <spi_data_rsp+0xe4>)
   24794:	4798      	blx	r3
   24796:	1e03      	subs	r3, r0, #0
   24798:	d013      	beq.n	247c2 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   2479a:	239a      	movs	r3, #154	; 0x9a
   2479c:	005a      	lsls	r2, r3, #1
   2479e:	4927      	ldr	r1, [pc, #156]	; (2483c <spi_data_rsp+0xe8>)
   247a0:	4b27      	ldr	r3, [pc, #156]	; (24840 <spi_data_rsp+0xec>)
   247a2:	0018      	movs	r0, r3
   247a4:	4b27      	ldr	r3, [pc, #156]	; (24844 <spi_data_rsp+0xf0>)
   247a6:	4798      	blx	r3
   247a8:	4b27      	ldr	r3, [pc, #156]	; (24848 <spi_data_rsp+0xf4>)
   247aa:	0018      	movs	r0, r3
   247ac:	4b25      	ldr	r3, [pc, #148]	; (24844 <spi_data_rsp+0xf0>)
   247ae:	4798      	blx	r3
   247b0:	4b26      	ldr	r3, [pc, #152]	; (2484c <spi_data_rsp+0xf8>)
   247b2:	0018      	movs	r0, r3
   247b4:	4b23      	ldr	r3, [pc, #140]	; (24844 <spi_data_rsp+0xf0>)
   247b6:	4798      	blx	r3
		result = N_FAIL;
   247b8:	230e      	movs	r3, #14
   247ba:	18fb      	adds	r3, r7, r3
   247bc:	2200      	movs	r2, #0
   247be:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   247c0:	e030      	b.n	24824 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   247c2:	230f      	movs	r3, #15
   247c4:	18fb      	adds	r3, r7, r3
   247c6:	781b      	ldrb	r3, [r3, #0]
   247c8:	3b01      	subs	r3, #1
   247ca:	2208      	movs	r2, #8
   247cc:	18ba      	adds	r2, r7, r2
   247ce:	5cd3      	ldrb	r3, [r2, r3]
   247d0:	2b00      	cmp	r3, #0
   247d2:	d108      	bne.n	247e6 <spi_data_rsp+0x92>
   247d4:	230f      	movs	r3, #15
   247d6:	18fb      	adds	r3, r7, r3
   247d8:	781b      	ldrb	r3, [r3, #0]
   247da:	3b02      	subs	r3, #2
   247dc:	2208      	movs	r2, #8
   247de:	18ba      	adds	r2, r7, r2
   247e0:	5cd3      	ldrb	r3, [r2, r3]
   247e2:	2bc3      	cmp	r3, #195	; 0xc3
   247e4:	d01e      	beq.n	24824 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   247e6:	233c      	movs	r3, #60	; 0x3c
   247e8:	33ff      	adds	r3, #255	; 0xff
   247ea:	001a      	movs	r2, r3
   247ec:	4913      	ldr	r1, [pc, #76]	; (2483c <spi_data_rsp+0xe8>)
   247ee:	4b14      	ldr	r3, [pc, #80]	; (24840 <spi_data_rsp+0xec>)
   247f0:	0018      	movs	r0, r3
   247f2:	4b14      	ldr	r3, [pc, #80]	; (24844 <spi_data_rsp+0xf0>)
   247f4:	4798      	blx	r3
   247f6:	2308      	movs	r3, #8
   247f8:	18fb      	adds	r3, r7, r3
   247fa:	781b      	ldrb	r3, [r3, #0]
   247fc:	0019      	movs	r1, r3
   247fe:	2308      	movs	r3, #8
   24800:	18fb      	adds	r3, r7, r3
   24802:	785b      	ldrb	r3, [r3, #1]
   24804:	001a      	movs	r2, r3
   24806:	2308      	movs	r3, #8
   24808:	18fb      	adds	r3, r7, r3
   2480a:	789b      	ldrb	r3, [r3, #2]
   2480c:	4810      	ldr	r0, [pc, #64]	; (24850 <spi_data_rsp+0xfc>)
   2480e:	4c0d      	ldr	r4, [pc, #52]	; (24844 <spi_data_rsp+0xf0>)
   24810:	47a0      	blx	r4
   24812:	4b0e      	ldr	r3, [pc, #56]	; (2484c <spi_data_rsp+0xf8>)
   24814:	0018      	movs	r0, r3
   24816:	4b0b      	ldr	r3, [pc, #44]	; (24844 <spi_data_rsp+0xf0>)
   24818:	4798      	blx	r3
		result = N_FAIL;
   2481a:	230e      	movs	r3, #14
   2481c:	18fb      	adds	r3, r7, r3
   2481e:	2200      	movs	r2, #0
   24820:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   24822:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   24824:	230e      	movs	r3, #14
   24826:	18fb      	adds	r3, r7, r3
   24828:	781b      	ldrb	r3, [r3, #0]
   2482a:	b25b      	sxtb	r3, r3
}
   2482c:	0018      	movs	r0, r3
   2482e:	46bd      	mov	sp, r7
   24830:	b005      	add	sp, #20
   24832:	bd90      	pop	{r4, r7, pc}
   24834:	200042b4 	.word	0x200042b4
   24838:	000242c9 	.word	0x000242c9
   2483c:	0003b1c0 	.word	0x0003b1c0
   24840:	0003abc8 	.word	0x0003abc8
   24844:	0001ee19 	.word	0x0001ee19
   24848:	0003ac0c 	.word	0x0003ac0c
   2484c:	0003ac08 	.word	0x0003ac08
   24850:	0003ac2c 	.word	0x0003ac2c

00024854 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   24854:	b580      	push	{r7, lr}
   24856:	b084      	sub	sp, #16
   24858:	af00      	add	r7, sp, #0
   2485a:	0002      	movs	r2, r0
   2485c:	1dfb      	adds	r3, r7, #7
   2485e:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   24860:	230f      	movs	r3, #15
   24862:	18fb      	adds	r3, r7, r3
   24864:	2201      	movs	r2, #1
   24866:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   24868:	1dfb      	adds	r3, r7, #7
   2486a:	781b      	ldrb	r3, [r3, #0]
   2486c:	2bcf      	cmp	r3, #207	; 0xcf
   2486e:	d007      	beq.n	24880 <spi_cmd_rsp+0x2c>
   24870:	1dfb      	adds	r3, r7, #7
   24872:	781b      	ldrb	r3, [r3, #0]
   24874:	2bc5      	cmp	r3, #197	; 0xc5
   24876:	d003      	beq.n	24880 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   24878:	1dfb      	adds	r3, r7, #7
   2487a:	781b      	ldrb	r3, [r3, #0]
   2487c:	2bc6      	cmp	r3, #198	; 0xc6
   2487e:	d10c      	bne.n	2489a <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   24880:	230d      	movs	r3, #13
   24882:	18fb      	adds	r3, r7, r3
   24884:	2101      	movs	r1, #1
   24886:	0018      	movs	r0, r3
   24888:	4b3b      	ldr	r3, [pc, #236]	; (24978 <spi_cmd_rsp+0x124>)
   2488a:	4798      	blx	r3
   2488c:	1e03      	subs	r3, r0, #0
   2488e:	d004      	beq.n	2489a <spi_cmd_rsp+0x46>
			result = N_FAIL;
   24890:	230f      	movs	r3, #15
   24892:	18fb      	adds	r3, r7, r3
   24894:	2200      	movs	r2, #0
   24896:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   24898:	e065      	b.n	24966 <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   2489a:	230e      	movs	r3, #14
   2489c:	18fb      	adds	r3, r7, r3
   2489e:	220a      	movs	r2, #10
   248a0:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   248a2:	230d      	movs	r3, #13
   248a4:	18fb      	adds	r3, r7, r3
   248a6:	2101      	movs	r1, #1
   248a8:	0018      	movs	r0, r3
   248aa:	4b33      	ldr	r3, [pc, #204]	; (24978 <spi_cmd_rsp+0x124>)
   248ac:	4798      	blx	r3
   248ae:	1e03      	subs	r3, r0, #0
   248b0:	d014      	beq.n	248dc <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   248b2:	235c      	movs	r3, #92	; 0x5c
   248b4:	33ff      	adds	r3, #255	; 0xff
   248b6:	001a      	movs	r2, r3
   248b8:	4930      	ldr	r1, [pc, #192]	; (2497c <spi_cmd_rsp+0x128>)
   248ba:	4b31      	ldr	r3, [pc, #196]	; (24980 <spi_cmd_rsp+0x12c>)
   248bc:	0018      	movs	r0, r3
   248be:	4b31      	ldr	r3, [pc, #196]	; (24984 <spi_cmd_rsp+0x130>)
   248c0:	4798      	blx	r3
   248c2:	4b31      	ldr	r3, [pc, #196]	; (24988 <spi_cmd_rsp+0x134>)
   248c4:	0018      	movs	r0, r3
   248c6:	4b2f      	ldr	r3, [pc, #188]	; (24984 <spi_cmd_rsp+0x130>)
   248c8:	4798      	blx	r3
   248ca:	4b30      	ldr	r3, [pc, #192]	; (2498c <spi_cmd_rsp+0x138>)
   248cc:	0018      	movs	r0, r3
   248ce:	4b2d      	ldr	r3, [pc, #180]	; (24984 <spi_cmd_rsp+0x130>)
   248d0:	4798      	blx	r3
			result = N_FAIL;
   248d2:	230f      	movs	r3, #15
   248d4:	18fb      	adds	r3, r7, r3
   248d6:	2200      	movs	r2, #0
   248d8:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   248da:	e044      	b.n	24966 <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   248dc:	230d      	movs	r3, #13
   248de:	18fb      	adds	r3, r7, r3
   248e0:	781b      	ldrb	r3, [r3, #0]
   248e2:	1dfa      	adds	r2, r7, #7
   248e4:	7812      	ldrb	r2, [r2, #0]
   248e6:	429a      	cmp	r2, r3
   248e8:	d00b      	beq.n	24902 <spi_cmd_rsp+0xae>
   248ea:	230e      	movs	r3, #14
   248ec:	18fb      	adds	r3, r7, r3
   248ee:	781b      	ldrb	r3, [r3, #0]
   248f0:	b25b      	sxtb	r3, r3
   248f2:	b2da      	uxtb	r2, r3
   248f4:	3a01      	subs	r2, #1
   248f6:	b2d1      	uxtb	r1, r2
   248f8:	220e      	movs	r2, #14
   248fa:	18ba      	adds	r2, r7, r2
   248fc:	7011      	strb	r1, [r2, #0]
   248fe:	2b00      	cmp	r3, #0
   24900:	dccf      	bgt.n	248a2 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   24902:	230e      	movs	r3, #14
   24904:	18fb      	adds	r3, r7, r3
   24906:	220a      	movs	r2, #10
   24908:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   2490a:	230d      	movs	r3, #13
   2490c:	18fb      	adds	r3, r7, r3
   2490e:	2101      	movs	r1, #1
   24910:	0018      	movs	r0, r3
   24912:	4b19      	ldr	r3, [pc, #100]	; (24978 <spi_cmd_rsp+0x124>)
   24914:	4798      	blx	r3
   24916:	1e03      	subs	r3, r0, #0
   24918:	d014      	beq.n	24944 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   2491a:	236a      	movs	r3, #106	; 0x6a
   2491c:	33ff      	adds	r3, #255	; 0xff
   2491e:	001a      	movs	r2, r3
   24920:	4916      	ldr	r1, [pc, #88]	; (2497c <spi_cmd_rsp+0x128>)
   24922:	4b17      	ldr	r3, [pc, #92]	; (24980 <spi_cmd_rsp+0x12c>)
   24924:	0018      	movs	r0, r3
   24926:	4b17      	ldr	r3, [pc, #92]	; (24984 <spi_cmd_rsp+0x130>)
   24928:	4798      	blx	r3
   2492a:	4b17      	ldr	r3, [pc, #92]	; (24988 <spi_cmd_rsp+0x134>)
   2492c:	0018      	movs	r0, r3
   2492e:	4b15      	ldr	r3, [pc, #84]	; (24984 <spi_cmd_rsp+0x130>)
   24930:	4798      	blx	r3
   24932:	4b16      	ldr	r3, [pc, #88]	; (2498c <spi_cmd_rsp+0x138>)
   24934:	0018      	movs	r0, r3
   24936:	4b13      	ldr	r3, [pc, #76]	; (24984 <spi_cmd_rsp+0x130>)
   24938:	4798      	blx	r3
			result = N_FAIL;
   2493a:	230f      	movs	r3, #15
   2493c:	18fb      	adds	r3, r7, r3
   2493e:	2200      	movs	r2, #0
   24940:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   24942:	e010      	b.n	24966 <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   24944:	230d      	movs	r3, #13
   24946:	18fb      	adds	r3, r7, r3
   24948:	781b      	ldrb	r3, [r3, #0]
   2494a:	2b00      	cmp	r3, #0
   2494c:	d00b      	beq.n	24966 <spi_cmd_rsp+0x112>
   2494e:	230e      	movs	r3, #14
   24950:	18fb      	adds	r3, r7, r3
   24952:	781b      	ldrb	r3, [r3, #0]
   24954:	b25b      	sxtb	r3, r3
   24956:	b2da      	uxtb	r2, r3
   24958:	3a01      	subs	r2, #1
   2495a:	b2d1      	uxtb	r1, r2
   2495c:	220e      	movs	r2, #14
   2495e:	18ba      	adds	r2, r7, r2
   24960:	7011      	strb	r1, [r2, #0]
   24962:	2b00      	cmp	r3, #0
   24964:	dcd1      	bgt.n	2490a <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   24966:	230f      	movs	r3, #15
   24968:	18fb      	adds	r3, r7, r3
   2496a:	781b      	ldrb	r3, [r3, #0]
   2496c:	b25b      	sxtb	r3, r3
}
   2496e:	0018      	movs	r0, r3
   24970:	46bd      	mov	sp, r7
   24972:	b004      	add	sp, #16
   24974:	bd80      	pop	{r7, pc}
   24976:	46c0      	nop			; (mov r8, r8)
   24978:	000242c9 	.word	0x000242c9
   2497c:	0003b1d0 	.word	0x0003b1d0
   24980:	0003abc8 	.word	0x0003abc8
   24984:	0001ee19 	.word	0x0001ee19
   24988:	0003ac5c 	.word	0x0003ac5c
   2498c:	0003ac08 	.word	0x0003ac08

00024990 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   24990:	b590      	push	{r4, r7, lr}
   24992:	b09f      	sub	sp, #124	; 0x7c
   24994:	af00      	add	r7, sp, #0
   24996:	60b9      	str	r1, [r7, #8]
   24998:	607a      	str	r2, [r7, #4]
   2499a:	603b      	str	r3, [r7, #0]
   2499c:	230f      	movs	r3, #15
   2499e:	18fb      	adds	r3, r7, r3
   249a0:	1c02      	adds	r2, r0, #0
   249a2:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   249a4:	2300      	movs	r3, #0
   249a6:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   249a8:	2301      	movs	r3, #1
   249aa:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   249ac:	2338      	movs	r3, #56	; 0x38
   249ae:	18fb      	adds	r3, r7, r3
   249b0:	220f      	movs	r2, #15
   249b2:	18ba      	adds	r2, r7, r2
   249b4:	7812      	ldrb	r2, [r2, #0]
   249b6:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   249b8:	230f      	movs	r3, #15
   249ba:	18fb      	adds	r3, r7, r3
   249bc:	781b      	ldrb	r3, [r3, #0]
   249be:	3bc1      	subs	r3, #193	; 0xc1
   249c0:	2b0e      	cmp	r3, #14
   249c2:	d900      	bls.n	249c6 <spi_cmd_complete+0x36>
   249c4:	e103      	b.n	24bce <spi_cmd_complete+0x23e>
   249c6:	009a      	lsls	r2, r3, #2
   249c8:	4bd1      	ldr	r3, [pc, #836]	; (24d10 <spi_cmd_complete+0x380>)
   249ca:	18d3      	adds	r3, r2, r3
   249cc:	681b      	ldr	r3, [r3, #0]
   249ce:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   249d0:	68bb      	ldr	r3, [r7, #8]
   249d2:	0c1b      	lsrs	r3, r3, #16
   249d4:	b2da      	uxtb	r2, r3
   249d6:	2338      	movs	r3, #56	; 0x38
   249d8:	18fb      	adds	r3, r7, r3
   249da:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   249dc:	68bb      	ldr	r3, [r7, #8]
   249de:	0a1b      	lsrs	r3, r3, #8
   249e0:	b2da      	uxtb	r2, r3
   249e2:	2338      	movs	r3, #56	; 0x38
   249e4:	18fb      	adds	r3, r7, r3
   249e6:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   249e8:	68bb      	ldr	r3, [r7, #8]
   249ea:	b2da      	uxtb	r2, r3
   249ec:	2338      	movs	r3, #56	; 0x38
   249ee:	18fb      	adds	r3, r7, r3
   249f0:	70da      	strb	r2, [r3, #3]
		len = 5;
   249f2:	2305      	movs	r3, #5
   249f4:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   249f6:	e0ed      	b.n	24bd4 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   249f8:	68bb      	ldr	r3, [r7, #8]
   249fa:	0a1b      	lsrs	r3, r3, #8
   249fc:	b2da      	uxtb	r2, r3
   249fe:	2338      	movs	r3, #56	; 0x38
   24a00:	18fb      	adds	r3, r7, r3
   24a02:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   24a04:	2388      	movs	r3, #136	; 0x88
   24a06:	18fb      	adds	r3, r7, r3
   24a08:	781b      	ldrb	r3, [r3, #0]
   24a0a:	2b01      	cmp	r3, #1
   24a0c:	d109      	bne.n	24a22 <spi_cmd_complete+0x92>
   24a0e:	2338      	movs	r3, #56	; 0x38
   24a10:	18fb      	adds	r3, r7, r3
   24a12:	785b      	ldrb	r3, [r3, #1]
   24a14:	2280      	movs	r2, #128	; 0x80
   24a16:	4252      	negs	r2, r2
   24a18:	4313      	orrs	r3, r2
   24a1a:	b2da      	uxtb	r2, r3
   24a1c:	2338      	movs	r3, #56	; 0x38
   24a1e:	18fb      	adds	r3, r7, r3
   24a20:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   24a22:	68bb      	ldr	r3, [r7, #8]
   24a24:	b2da      	uxtb	r2, r3
   24a26:	2338      	movs	r3, #56	; 0x38
   24a28:	18fb      	adds	r3, r7, r3
   24a2a:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   24a2c:	2338      	movs	r3, #56	; 0x38
   24a2e:	18fb      	adds	r3, r7, r3
   24a30:	2200      	movs	r2, #0
   24a32:	70da      	strb	r2, [r3, #3]
		len = 5;
   24a34:	2305      	movs	r3, #5
   24a36:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24a38:	e0cc      	b.n	24bd4 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   24a3a:	2338      	movs	r3, #56	; 0x38
   24a3c:	18fb      	adds	r3, r7, r3
   24a3e:	2200      	movs	r2, #0
   24a40:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   24a42:	2338      	movs	r3, #56	; 0x38
   24a44:	18fb      	adds	r3, r7, r3
   24a46:	2200      	movs	r2, #0
   24a48:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   24a4a:	2338      	movs	r3, #56	; 0x38
   24a4c:	18fb      	adds	r3, r7, r3
   24a4e:	2200      	movs	r2, #0
   24a50:	70da      	strb	r2, [r3, #3]
		len = 5;
   24a52:	2305      	movs	r3, #5
   24a54:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24a56:	e0bd      	b.n	24bd4 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   24a58:	2338      	movs	r3, #56	; 0x38
   24a5a:	18fb      	adds	r3, r7, r3
   24a5c:	2200      	movs	r2, #0
   24a5e:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   24a60:	2338      	movs	r3, #56	; 0x38
   24a62:	18fb      	adds	r3, r7, r3
   24a64:	2200      	movs	r2, #0
   24a66:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   24a68:	2338      	movs	r3, #56	; 0x38
   24a6a:	18fb      	adds	r3, r7, r3
   24a6c:	2200      	movs	r2, #0
   24a6e:	70da      	strb	r2, [r3, #3]
		len = 5;
   24a70:	2305      	movs	r3, #5
   24a72:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24a74:	e0ae      	b.n	24bd4 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   24a76:	2338      	movs	r3, #56	; 0x38
   24a78:	18fb      	adds	r3, r7, r3
   24a7a:	22ff      	movs	r2, #255	; 0xff
   24a7c:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   24a7e:	2338      	movs	r3, #56	; 0x38
   24a80:	18fb      	adds	r3, r7, r3
   24a82:	22ff      	movs	r2, #255	; 0xff
   24a84:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   24a86:	2338      	movs	r3, #56	; 0x38
   24a88:	18fb      	adds	r3, r7, r3
   24a8a:	22ff      	movs	r2, #255	; 0xff
   24a8c:	70da      	strb	r2, [r3, #3]
		len = 5;
   24a8e:	2305      	movs	r3, #5
   24a90:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24a92:	e09f      	b.n	24bd4 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   24a94:	68bb      	ldr	r3, [r7, #8]
   24a96:	0c1b      	lsrs	r3, r3, #16
   24a98:	b2da      	uxtb	r2, r3
   24a9a:	2338      	movs	r3, #56	; 0x38
   24a9c:	18fb      	adds	r3, r7, r3
   24a9e:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   24aa0:	68bb      	ldr	r3, [r7, #8]
   24aa2:	0a1b      	lsrs	r3, r3, #8
   24aa4:	b2da      	uxtb	r2, r3
   24aa6:	2338      	movs	r3, #56	; 0x38
   24aa8:	18fb      	adds	r3, r7, r3
   24aaa:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   24aac:	68bb      	ldr	r3, [r7, #8]
   24aae:	b2da      	uxtb	r2, r3
   24ab0:	2338      	movs	r3, #56	; 0x38
   24ab2:	18fb      	adds	r3, r7, r3
   24ab4:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   24ab6:	683b      	ldr	r3, [r7, #0]
   24ab8:	0a1b      	lsrs	r3, r3, #8
   24aba:	b2da      	uxtb	r2, r3
   24abc:	2338      	movs	r3, #56	; 0x38
   24abe:	18fb      	adds	r3, r7, r3
   24ac0:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   24ac2:	683b      	ldr	r3, [r7, #0]
   24ac4:	b2da      	uxtb	r2, r3
   24ac6:	2338      	movs	r3, #56	; 0x38
   24ac8:	18fb      	adds	r3, r7, r3
   24aca:	715a      	strb	r2, [r3, #5]
		len = 7;
   24acc:	2307      	movs	r3, #7
   24ace:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24ad0:	e080      	b.n	24bd4 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   24ad2:	68bb      	ldr	r3, [r7, #8]
   24ad4:	0c1b      	lsrs	r3, r3, #16
   24ad6:	b2da      	uxtb	r2, r3
   24ad8:	2338      	movs	r3, #56	; 0x38
   24ada:	18fb      	adds	r3, r7, r3
   24adc:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   24ade:	68bb      	ldr	r3, [r7, #8]
   24ae0:	0a1b      	lsrs	r3, r3, #8
   24ae2:	b2da      	uxtb	r2, r3
   24ae4:	2338      	movs	r3, #56	; 0x38
   24ae6:	18fb      	adds	r3, r7, r3
   24ae8:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   24aea:	68bb      	ldr	r3, [r7, #8]
   24aec:	b2da      	uxtb	r2, r3
   24aee:	2338      	movs	r3, #56	; 0x38
   24af0:	18fb      	adds	r3, r7, r3
   24af2:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   24af4:	683b      	ldr	r3, [r7, #0]
   24af6:	0c1b      	lsrs	r3, r3, #16
   24af8:	b2da      	uxtb	r2, r3
   24afa:	2338      	movs	r3, #56	; 0x38
   24afc:	18fb      	adds	r3, r7, r3
   24afe:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   24b00:	683b      	ldr	r3, [r7, #0]
   24b02:	0a1b      	lsrs	r3, r3, #8
   24b04:	b2da      	uxtb	r2, r3
   24b06:	2338      	movs	r3, #56	; 0x38
   24b08:	18fb      	adds	r3, r7, r3
   24b0a:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   24b0c:	683b      	ldr	r3, [r7, #0]
   24b0e:	b2da      	uxtb	r2, r3
   24b10:	2338      	movs	r3, #56	; 0x38
   24b12:	18fb      	adds	r3, r7, r3
   24b14:	719a      	strb	r2, [r3, #6]
		len = 8;
   24b16:	2308      	movs	r3, #8
   24b18:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24b1a:	e05b      	b.n	24bd4 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   24b1c:	68bb      	ldr	r3, [r7, #8]
   24b1e:	0a1b      	lsrs	r3, r3, #8
   24b20:	b2da      	uxtb	r2, r3
   24b22:	2338      	movs	r3, #56	; 0x38
   24b24:	18fb      	adds	r3, r7, r3
   24b26:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   24b28:	2388      	movs	r3, #136	; 0x88
   24b2a:	18fb      	adds	r3, r7, r3
   24b2c:	781b      	ldrb	r3, [r3, #0]
   24b2e:	2b01      	cmp	r3, #1
   24b30:	d109      	bne.n	24b46 <spi_cmd_complete+0x1b6>
   24b32:	2338      	movs	r3, #56	; 0x38
   24b34:	18fb      	adds	r3, r7, r3
   24b36:	785b      	ldrb	r3, [r3, #1]
   24b38:	2280      	movs	r2, #128	; 0x80
   24b3a:	4252      	negs	r2, r2
   24b3c:	4313      	orrs	r3, r2
   24b3e:	b2da      	uxtb	r2, r3
   24b40:	2338      	movs	r3, #56	; 0x38
   24b42:	18fb      	adds	r3, r7, r3
   24b44:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   24b46:	68bb      	ldr	r3, [r7, #8]
   24b48:	b2da      	uxtb	r2, r3
   24b4a:	2338      	movs	r3, #56	; 0x38
   24b4c:	18fb      	adds	r3, r7, r3
   24b4e:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   24b50:	687b      	ldr	r3, [r7, #4]
   24b52:	78da      	ldrb	r2, [r3, #3]
   24b54:	2338      	movs	r3, #56	; 0x38
   24b56:	18fb      	adds	r3, r7, r3
   24b58:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   24b5a:	687b      	ldr	r3, [r7, #4]
   24b5c:	789a      	ldrb	r2, [r3, #2]
   24b5e:	2338      	movs	r3, #56	; 0x38
   24b60:	18fb      	adds	r3, r7, r3
   24b62:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   24b64:	687b      	ldr	r3, [r7, #4]
   24b66:	785a      	ldrb	r2, [r3, #1]
   24b68:	2338      	movs	r3, #56	; 0x38
   24b6a:	18fb      	adds	r3, r7, r3
   24b6c:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   24b6e:	687b      	ldr	r3, [r7, #4]
   24b70:	781a      	ldrb	r2, [r3, #0]
   24b72:	2338      	movs	r3, #56	; 0x38
   24b74:	18fb      	adds	r3, r7, r3
   24b76:	719a      	strb	r2, [r3, #6]
		len = 8;
   24b78:	2308      	movs	r3, #8
   24b7a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24b7c:	e02a      	b.n	24bd4 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   24b7e:	68bb      	ldr	r3, [r7, #8]
   24b80:	0c1b      	lsrs	r3, r3, #16
   24b82:	b2da      	uxtb	r2, r3
   24b84:	2338      	movs	r3, #56	; 0x38
   24b86:	18fb      	adds	r3, r7, r3
   24b88:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   24b8a:	68bb      	ldr	r3, [r7, #8]
   24b8c:	0a1b      	lsrs	r3, r3, #8
   24b8e:	b2da      	uxtb	r2, r3
   24b90:	2338      	movs	r3, #56	; 0x38
   24b92:	18fb      	adds	r3, r7, r3
   24b94:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   24b96:	68bb      	ldr	r3, [r7, #8]
   24b98:	b2da      	uxtb	r2, r3
   24b9a:	2338      	movs	r3, #56	; 0x38
   24b9c:	18fb      	adds	r3, r7, r3
   24b9e:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   24ba0:	687b      	ldr	r3, [r7, #4]
   24ba2:	78da      	ldrb	r2, [r3, #3]
   24ba4:	2338      	movs	r3, #56	; 0x38
   24ba6:	18fb      	adds	r3, r7, r3
   24ba8:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   24baa:	687b      	ldr	r3, [r7, #4]
   24bac:	789a      	ldrb	r2, [r3, #2]
   24bae:	2338      	movs	r3, #56	; 0x38
   24bb0:	18fb      	adds	r3, r7, r3
   24bb2:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   24bb4:	687b      	ldr	r3, [r7, #4]
   24bb6:	785a      	ldrb	r2, [r3, #1]
   24bb8:	2338      	movs	r3, #56	; 0x38
   24bba:	18fb      	adds	r3, r7, r3
   24bbc:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   24bbe:	687b      	ldr	r3, [r7, #4]
   24bc0:	781a      	ldrb	r2, [r3, #0]
   24bc2:	2338      	movs	r3, #56	; 0x38
   24bc4:	18fb      	adds	r3, r7, r3
   24bc6:	71da      	strb	r2, [r3, #7]
		len = 9;
   24bc8:	2309      	movs	r3, #9
   24bca:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24bcc:	e002      	b.n	24bd4 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   24bce:	2300      	movs	r3, #0
   24bd0:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   24bd2:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   24bd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24bd6:	2b01      	cmp	r3, #1
   24bd8:	d001      	beq.n	24bde <spi_cmd_complete+0x24e>
		return result;
   24bda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24bdc:	e33a      	b.n	25254 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   24bde:	4b4d      	ldr	r3, [pc, #308]	; (24d14 <spi_cmd_complete+0x384>)
   24be0:	781b      	ldrb	r3, [r3, #0]
   24be2:	2b00      	cmp	r3, #0
   24be4:	d111      	bne.n	24c0a <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   24be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24be8:	1e5c      	subs	r4, r3, #1
   24bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24bec:	3b01      	subs	r3, #1
   24bee:	001a      	movs	r2, r3
   24bf0:	2338      	movs	r3, #56	; 0x38
   24bf2:	18fb      	adds	r3, r7, r3
   24bf4:	0019      	movs	r1, r3
   24bf6:	207f      	movs	r0, #127	; 0x7f
   24bf8:	4b47      	ldr	r3, [pc, #284]	; (24d18 <spi_cmd_complete+0x388>)
   24bfa:	4798      	blx	r3
   24bfc:	0003      	movs	r3, r0
   24bfe:	18db      	adds	r3, r3, r3
   24c00:	b2da      	uxtb	r2, r3
   24c02:	2338      	movs	r3, #56	; 0x38
   24c04:	18fb      	adds	r3, r7, r3
   24c06:	551a      	strb	r2, [r3, r4]
   24c08:	e002      	b.n	24c10 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   24c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24c0c:	3b01      	subs	r3, #1
   24c0e:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   24c10:	230f      	movs	r3, #15
   24c12:	18fb      	adds	r3, r7, r3
   24c14:	781b      	ldrb	r3, [r3, #0]
   24c16:	2bcf      	cmp	r3, #207	; 0xcf
   24c18:	d009      	beq.n	24c2e <spi_cmd_complete+0x29e>
   24c1a:	230f      	movs	r3, #15
   24c1c:	18fb      	adds	r3, r7, r3
   24c1e:	781b      	ldrb	r3, [r3, #0]
   24c20:	2bc5      	cmp	r3, #197	; 0xc5
   24c22:	d004      	beq.n	24c2e <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   24c24:	230f      	movs	r3, #15
   24c26:	18fb      	adds	r3, r7, r3
   24c28:	781b      	ldrb	r3, [r3, #0]
   24c2a:	2bc6      	cmp	r3, #198	; 0xc6
   24c2c:	d103      	bne.n	24c36 <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   24c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24c30:	3306      	adds	r3, #6
   24c32:	673b      	str	r3, [r7, #112]	; 0x70
   24c34:	e018      	b.n	24c68 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   24c36:	230f      	movs	r3, #15
   24c38:	18fb      	adds	r3, r7, r3
   24c3a:	781b      	ldrb	r3, [r3, #0]
   24c3c:	2bc4      	cmp	r3, #196	; 0xc4
   24c3e:	d004      	beq.n	24c4a <spi_cmd_complete+0x2ba>
   24c40:	230f      	movs	r3, #15
   24c42:	18fb      	adds	r3, r7, r3
   24c44:	781b      	ldrb	r3, [r3, #0]
   24c46:	2bca      	cmp	r3, #202	; 0xca
   24c48:	d10b      	bne.n	24c62 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   24c4a:	4b32      	ldr	r3, [pc, #200]	; (24d14 <spi_cmd_complete+0x384>)
   24c4c:	781b      	ldrb	r3, [r3, #0]
   24c4e:	2b00      	cmp	r3, #0
   24c50:	d103      	bne.n	24c5a <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   24c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24c54:	330c      	adds	r3, #12
   24c56:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   24c58:	e006      	b.n	24c68 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   24c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24c5c:	330a      	adds	r3, #10
   24c5e:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   24c60:	e002      	b.n	24c68 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   24c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24c64:	3305      	adds	r3, #5
   24c66:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   24c68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24c6a:	2b20      	cmp	r3, #32
   24c6c:	d914      	bls.n	24c98 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   24c6e:	23f7      	movs	r3, #247	; 0xf7
   24c70:	005a      	lsls	r2, r3, #1
   24c72:	492a      	ldr	r1, [pc, #168]	; (24d1c <spi_cmd_complete+0x38c>)
   24c74:	4b2a      	ldr	r3, [pc, #168]	; (24d20 <spi_cmd_complete+0x390>)
   24c76:	0018      	movs	r0, r3
   24c78:	4b2a      	ldr	r3, [pc, #168]	; (24d24 <spi_cmd_complete+0x394>)
   24c7a:	4798      	blx	r3
   24c7c:	6f39      	ldr	r1, [r7, #112]	; 0x70
   24c7e:	4b2a      	ldr	r3, [pc, #168]	; (24d28 <spi_cmd_complete+0x398>)
   24c80:	2220      	movs	r2, #32
   24c82:	0018      	movs	r0, r3
   24c84:	4b27      	ldr	r3, [pc, #156]	; (24d24 <spi_cmd_complete+0x394>)
   24c86:	4798      	blx	r3
   24c88:	4b28      	ldr	r3, [pc, #160]	; (24d2c <spi_cmd_complete+0x39c>)
   24c8a:	0018      	movs	r0, r3
   24c8c:	4b25      	ldr	r3, [pc, #148]	; (24d24 <spi_cmd_complete+0x394>)
   24c8e:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   24c90:	2300      	movs	r3, #0
   24c92:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   24c94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24c96:	e2dd      	b.n	25254 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   24c98:	2377      	movs	r3, #119	; 0x77
   24c9a:	18fb      	adds	r3, r7, r3
   24c9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   24c9e:	701a      	strb	r2, [r3, #0]
   24ca0:	e00d      	b.n	24cbe <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   24ca2:	2377      	movs	r3, #119	; 0x77
   24ca4:	18fb      	adds	r3, r7, r3
   24ca6:	781b      	ldrb	r3, [r3, #0]
   24ca8:	2238      	movs	r2, #56	; 0x38
   24caa:	18ba      	adds	r2, r7, r2
   24cac:	2100      	movs	r1, #0
   24cae:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   24cb0:	2377      	movs	r3, #119	; 0x77
   24cb2:	18fb      	adds	r3, r7, r3
   24cb4:	781a      	ldrb	r2, [r3, #0]
   24cb6:	2377      	movs	r3, #119	; 0x77
   24cb8:	18fb      	adds	r3, r7, r3
   24cba:	3201      	adds	r2, #1
   24cbc:	701a      	strb	r2, [r3, #0]
   24cbe:	2377      	movs	r3, #119	; 0x77
   24cc0:	18fb      	adds	r3, r7, r3
   24cc2:	781a      	ldrb	r2, [r3, #0]
   24cc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24cc6:	429a      	cmp	r2, r3
   24cc8:	d3eb      	bcc.n	24ca2 <spi_cmd_complete+0x312>
	}
	rix = len;
   24cca:	2376      	movs	r3, #118	; 0x76
   24ccc:	18fb      	adds	r3, r7, r3
   24cce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   24cd0:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   24cd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24cd4:	b29a      	uxth	r2, r3
   24cd6:	2318      	movs	r3, #24
   24cd8:	18f9      	adds	r1, r7, r3
   24cda:	2338      	movs	r3, #56	; 0x38
   24cdc:	18fb      	adds	r3, r7, r3
   24cde:	0018      	movs	r0, r3
   24ce0:	4b13      	ldr	r3, [pc, #76]	; (24d30 <spi_cmd_complete+0x3a0>)
   24ce2:	4798      	blx	r3
   24ce4:	1e03      	subs	r3, r0, #0
   24ce6:	d027      	beq.n	24d38 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   24ce8:	23fa      	movs	r3, #250	; 0xfa
   24cea:	33ff      	adds	r3, #255	; 0xff
   24cec:	001a      	movs	r2, r3
   24cee:	490b      	ldr	r1, [pc, #44]	; (24d1c <spi_cmd_complete+0x38c>)
   24cf0:	4b0b      	ldr	r3, [pc, #44]	; (24d20 <spi_cmd_complete+0x390>)
   24cf2:	0018      	movs	r0, r3
   24cf4:	4b0b      	ldr	r3, [pc, #44]	; (24d24 <spi_cmd_complete+0x394>)
   24cf6:	4798      	blx	r3
   24cf8:	4b0e      	ldr	r3, [pc, #56]	; (24d34 <spi_cmd_complete+0x3a4>)
   24cfa:	0018      	movs	r0, r3
   24cfc:	4b09      	ldr	r3, [pc, #36]	; (24d24 <spi_cmd_complete+0x394>)
   24cfe:	4798      	blx	r3
   24d00:	4b0a      	ldr	r3, [pc, #40]	; (24d2c <spi_cmd_complete+0x39c>)
   24d02:	0018      	movs	r0, r3
   24d04:	4b07      	ldr	r3, [pc, #28]	; (24d24 <spi_cmd_complete+0x394>)
   24d06:	4798      	blx	r3
		result = N_FAIL;
   24d08:	2300      	movs	r3, #0
   24d0a:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   24d0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24d0e:	e2a1      	b.n	25254 <spi_cmd_complete+0x8c4>
   24d10:	0003b17c 	.word	0x0003b17c
   24d14:	200042b4 	.word	0x200042b4
   24d18:	000243c5 	.word	0x000243c5
   24d1c:	0003b1dc 	.word	0x0003b1dc
   24d20:	0003abc8 	.word	0x0003abc8
   24d24:	0001ee19 	.word	0x0001ee19
   24d28:	0003ac90 	.word	0x0003ac90
   24d2c:	0003ac08 	.word	0x0003ac08
   24d30:	00024351 	.word	0x00024351
   24d34:	0003abdc 	.word	0x0003abdc
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   24d38:	230f      	movs	r3, #15
   24d3a:	18fb      	adds	r3, r7, r3
   24d3c:	781b      	ldrb	r3, [r3, #0]
   24d3e:	2bcf      	cmp	r3, #207	; 0xcf
   24d40:	d009      	beq.n	24d56 <spi_cmd_complete+0x3c6>
   24d42:	230f      	movs	r3, #15
   24d44:	18fb      	adds	r3, r7, r3
   24d46:	781b      	ldrb	r3, [r3, #0]
   24d48:	2bc5      	cmp	r3, #197	; 0xc5
   24d4a:	d004      	beq.n	24d56 <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   24d4c:	230f      	movs	r3, #15
   24d4e:	18fb      	adds	r3, r7, r3
   24d50:	781b      	ldrb	r3, [r3, #0]
   24d52:	2bc6      	cmp	r3, #198	; 0xc6
   24d54:	d106      	bne.n	24d64 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   24d56:	2376      	movs	r3, #118	; 0x76
   24d58:	18fb      	adds	r3, r7, r3
   24d5a:	781a      	ldrb	r2, [r3, #0]
   24d5c:	2376      	movs	r3, #118	; 0x76
   24d5e:	18fb      	adds	r3, r7, r3
   24d60:	3201      	adds	r2, #1
   24d62:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   24d64:	2376      	movs	r3, #118	; 0x76
   24d66:	18fb      	adds	r3, r7, r3
   24d68:	781b      	ldrb	r3, [r3, #0]
   24d6a:	2276      	movs	r2, #118	; 0x76
   24d6c:	18ba      	adds	r2, r7, r2
   24d6e:	1c59      	adds	r1, r3, #1
   24d70:	7011      	strb	r1, [r2, #0]
   24d72:	001a      	movs	r2, r3
   24d74:	2318      	movs	r3, #24
   24d76:	18fb      	adds	r3, r7, r3
   24d78:	5c9a      	ldrb	r2, [r3, r2]
   24d7a:	2317      	movs	r3, #23
   24d7c:	18fb      	adds	r3, r7, r3
   24d7e:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   24d80:	2317      	movs	r3, #23
   24d82:	18fb      	adds	r3, r7, r3
   24d84:	781b      	ldrb	r3, [r3, #0]
   24d86:	220f      	movs	r2, #15
   24d88:	18ba      	adds	r2, r7, r2
   24d8a:	7812      	ldrb	r2, [r2, #0]
   24d8c:	429a      	cmp	r2, r3
   24d8e:	d018      	beq.n	24dc2 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   24d90:	4add      	ldr	r2, [pc, #884]	; (25108 <spi_cmd_complete+0x778>)
   24d92:	49de      	ldr	r1, [pc, #888]	; (2510c <spi_cmd_complete+0x77c>)
   24d94:	4bde      	ldr	r3, [pc, #888]	; (25110 <spi_cmd_complete+0x780>)
   24d96:	0018      	movs	r0, r3
   24d98:	4bde      	ldr	r3, [pc, #888]	; (25114 <spi_cmd_complete+0x784>)
   24d9a:	4798      	blx	r3
   24d9c:	230f      	movs	r3, #15
   24d9e:	18fb      	adds	r3, r7, r3
   24da0:	7819      	ldrb	r1, [r3, #0]
   24da2:	2317      	movs	r3, #23
   24da4:	18fb      	adds	r3, r7, r3
   24da6:	781b      	ldrb	r3, [r3, #0]
   24da8:	001a      	movs	r2, r3
   24daa:	4bdb      	ldr	r3, [pc, #876]	; (25118 <spi_cmd_complete+0x788>)
   24dac:	0018      	movs	r0, r3
   24dae:	4bd9      	ldr	r3, [pc, #868]	; (25114 <spi_cmd_complete+0x784>)
   24db0:	4798      	blx	r3
   24db2:	4bda      	ldr	r3, [pc, #872]	; (2511c <spi_cmd_complete+0x78c>)
   24db4:	0018      	movs	r0, r3
   24db6:	4bd7      	ldr	r3, [pc, #860]	; (25114 <spi_cmd_complete+0x784>)
   24db8:	4798      	blx	r3
		result = N_FAIL;
   24dba:	2300      	movs	r3, #0
   24dbc:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   24dbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24dc0:	e248      	b.n	25254 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   24dc2:	2376      	movs	r3, #118	; 0x76
   24dc4:	18fb      	adds	r3, r7, r3
   24dc6:	781b      	ldrb	r3, [r3, #0]
   24dc8:	2276      	movs	r2, #118	; 0x76
   24dca:	18ba      	adds	r2, r7, r2
   24dcc:	1c59      	adds	r1, r3, #1
   24dce:	7011      	strb	r1, [r2, #0]
   24dd0:	001a      	movs	r2, r3
   24dd2:	2318      	movs	r3, #24
   24dd4:	18fb      	adds	r3, r7, r3
   24dd6:	5c9a      	ldrb	r2, [r3, r2]
   24dd8:	2317      	movs	r3, #23
   24dda:	18fb      	adds	r3, r7, r3
   24ddc:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   24dde:	2317      	movs	r3, #23
   24de0:	18fb      	adds	r3, r7, r3
   24de2:	781b      	ldrb	r3, [r3, #0]
   24de4:	2b00      	cmp	r3, #0
   24de6:	d016      	beq.n	24e16 <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   24de8:	4acd      	ldr	r2, [pc, #820]	; (25120 <spi_cmd_complete+0x790>)
   24dea:	49c8      	ldr	r1, [pc, #800]	; (2510c <spi_cmd_complete+0x77c>)
   24dec:	4bc8      	ldr	r3, [pc, #800]	; (25110 <spi_cmd_complete+0x780>)
   24dee:	0018      	movs	r0, r3
   24df0:	4bc8      	ldr	r3, [pc, #800]	; (25114 <spi_cmd_complete+0x784>)
   24df2:	4798      	blx	r3
   24df4:	2317      	movs	r3, #23
   24df6:	18fb      	adds	r3, r7, r3
   24df8:	781b      	ldrb	r3, [r3, #0]
   24dfa:	001a      	movs	r2, r3
   24dfc:	4bc9      	ldr	r3, [pc, #804]	; (25124 <spi_cmd_complete+0x794>)
   24dfe:	0011      	movs	r1, r2
   24e00:	0018      	movs	r0, r3
   24e02:	4bc4      	ldr	r3, [pc, #784]	; (25114 <spi_cmd_complete+0x784>)
   24e04:	4798      	blx	r3
   24e06:	4bc5      	ldr	r3, [pc, #788]	; (2511c <spi_cmd_complete+0x78c>)
   24e08:	0018      	movs	r0, r3
   24e0a:	4bc2      	ldr	r3, [pc, #776]	; (25114 <spi_cmd_complete+0x784>)
   24e0c:	4798      	blx	r3
		result = N_FAIL;
   24e0e:	2300      	movs	r3, #0
   24e10:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   24e12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24e14:	e21e      	b.n	25254 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   24e16:	230f      	movs	r3, #15
   24e18:	18fb      	adds	r3, r7, r3
   24e1a:	781b      	ldrb	r3, [r3, #0]
   24e1c:	2bc4      	cmp	r3, #196	; 0xc4
   24e1e:	d00f      	beq.n	24e40 <spi_cmd_complete+0x4b0>
   24e20:	230f      	movs	r3, #15
   24e22:	18fb      	adds	r3, r7, r3
   24e24:	781b      	ldrb	r3, [r3, #0]
   24e26:	2bca      	cmp	r3, #202	; 0xca
   24e28:	d00a      	beq.n	24e40 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   24e2a:	230f      	movs	r3, #15
   24e2c:	18fb      	adds	r3, r7, r3
   24e2e:	781b      	ldrb	r3, [r3, #0]
   24e30:	2bc2      	cmp	r3, #194	; 0xc2
   24e32:	d005      	beq.n	24e40 <spi_cmd_complete+0x4b0>
   24e34:	230f      	movs	r3, #15
   24e36:	18fb      	adds	r3, r7, r3
   24e38:	781b      	ldrb	r3, [r3, #0]
   24e3a:	2bc8      	cmp	r3, #200	; 0xc8
   24e3c:	d000      	beq.n	24e40 <spi_cmd_complete+0x4b0>
   24e3e:	e208      	b.n	25252 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   24e40:	230a      	movs	r3, #10
   24e42:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   24e44:	2376      	movs	r3, #118	; 0x76
   24e46:	18fb      	adds	r3, r7, r3
   24e48:	781a      	ldrb	r2, [r3, #0]
   24e4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24e4c:	429a      	cmp	r2, r3
   24e4e:	d218      	bcs.n	24e82 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   24e50:	2376      	movs	r3, #118	; 0x76
   24e52:	18fb      	adds	r3, r7, r3
   24e54:	781b      	ldrb	r3, [r3, #0]
   24e56:	2276      	movs	r2, #118	; 0x76
   24e58:	18ba      	adds	r2, r7, r2
   24e5a:	1c59      	adds	r1, r3, #1
   24e5c:	7011      	strb	r1, [r2, #0]
   24e5e:	001a      	movs	r2, r3
   24e60:	2318      	movs	r3, #24
   24e62:	18fb      	adds	r3, r7, r3
   24e64:	5c9a      	ldrb	r2, [r3, r2]
   24e66:	2317      	movs	r3, #23
   24e68:	18fb      	adds	r3, r7, r3
   24e6a:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   24e6c:	2317      	movs	r3, #23
   24e6e:	18fb      	adds	r3, r7, r3
   24e70:	781b      	ldrb	r3, [r3, #0]
   24e72:	091b      	lsrs	r3, r3, #4
   24e74:	b2db      	uxtb	r3, r3
   24e76:	001a      	movs	r2, r3
   24e78:	230f      	movs	r3, #15
   24e7a:	4013      	ands	r3, r2
   24e7c:	2b0f      	cmp	r3, #15
   24e7e:	d103      	bne.n	24e88 <spi_cmd_complete+0x4f8>
					break;
   24e80:	e007      	b.n	24e92 <spi_cmd_complete+0x502>
					retry = 0;
   24e82:	2300      	movs	r3, #0
   24e84:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   24e86:	e004      	b.n	24e92 <spi_cmd_complete+0x502>
			} while (retry--);
   24e88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24e8a:	1e5a      	subs	r2, r3, #1
   24e8c:	667a      	str	r2, [r7, #100]	; 0x64
   24e8e:	2b00      	cmp	r3, #0
   24e90:	d1d8      	bne.n	24e44 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   24e92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24e94:	2b00      	cmp	r3, #0
   24e96:	dc18      	bgt.n	24eca <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   24e98:	2395      	movs	r3, #149	; 0x95
   24e9a:	009a      	lsls	r2, r3, #2
   24e9c:	499b      	ldr	r1, [pc, #620]	; (2510c <spi_cmd_complete+0x77c>)
   24e9e:	4b9c      	ldr	r3, [pc, #624]	; (25110 <spi_cmd_complete+0x780>)
   24ea0:	0018      	movs	r0, r3
   24ea2:	4b9c      	ldr	r3, [pc, #624]	; (25114 <spi_cmd_complete+0x784>)
   24ea4:	4798      	blx	r3
   24ea6:	2317      	movs	r3, #23
   24ea8:	18fb      	adds	r3, r7, r3
   24eaa:	781b      	ldrb	r3, [r3, #0]
   24eac:	001a      	movs	r2, r3
   24eae:	4b9e      	ldr	r3, [pc, #632]	; (25128 <spi_cmd_complete+0x798>)
   24eb0:	0011      	movs	r1, r2
   24eb2:	0018      	movs	r0, r3
   24eb4:	4b97      	ldr	r3, [pc, #604]	; (25114 <spi_cmd_complete+0x784>)
   24eb6:	4798      	blx	r3
   24eb8:	4b98      	ldr	r3, [pc, #608]	; (2511c <spi_cmd_complete+0x78c>)
   24eba:	0018      	movs	r0, r3
   24ebc:	4b95      	ldr	r3, [pc, #596]	; (25114 <spi_cmd_complete+0x784>)
   24ebe:	4798      	blx	r3
				result = N_RESET;
   24ec0:	2301      	movs	r3, #1
   24ec2:	425b      	negs	r3, r3
   24ec4:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   24ec6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24ec8:	e1c4      	b.n	25254 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   24eca:	230f      	movs	r3, #15
   24ecc:	18fb      	adds	r3, r7, r3
   24ece:	781b      	ldrb	r3, [r3, #0]
   24ed0:	2bc4      	cmp	r3, #196	; 0xc4
   24ed2:	d005      	beq.n	24ee0 <spi_cmd_complete+0x550>
   24ed4:	230f      	movs	r3, #15
   24ed6:	18fb      	adds	r3, r7, r3
   24ed8:	781b      	ldrb	r3, [r3, #0]
   24eda:	2bca      	cmp	r3, #202	; 0xca
   24edc:	d000      	beq.n	24ee0 <spi_cmd_complete+0x550>
   24ede:	e08e      	b.n	24ffe <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   24ee0:	2376      	movs	r3, #118	; 0x76
   24ee2:	18fb      	adds	r3, r7, r3
   24ee4:	781b      	ldrb	r3, [r3, #0]
   24ee6:	3303      	adds	r3, #3
   24ee8:	001a      	movs	r2, r3
   24eea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24eec:	429a      	cmp	r2, r3
   24eee:	d23c      	bcs.n	24f6a <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   24ef0:	2376      	movs	r3, #118	; 0x76
   24ef2:	18fb      	adds	r3, r7, r3
   24ef4:	781b      	ldrb	r3, [r3, #0]
   24ef6:	2276      	movs	r2, #118	; 0x76
   24ef8:	18ba      	adds	r2, r7, r2
   24efa:	1c59      	adds	r1, r3, #1
   24efc:	7011      	strb	r1, [r2, #0]
   24efe:	001a      	movs	r2, r3
   24f00:	2318      	movs	r3, #24
   24f02:	18fb      	adds	r3, r7, r3
   24f04:	5c9a      	ldrb	r2, [r3, r2]
   24f06:	687b      	ldr	r3, [r7, #4]
   24f08:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   24f0a:	687b      	ldr	r3, [r7, #4]
   24f0c:	1c5a      	adds	r2, r3, #1
   24f0e:	2376      	movs	r3, #118	; 0x76
   24f10:	18fb      	adds	r3, r7, r3
   24f12:	781b      	ldrb	r3, [r3, #0]
   24f14:	2176      	movs	r1, #118	; 0x76
   24f16:	1879      	adds	r1, r7, r1
   24f18:	1c58      	adds	r0, r3, #1
   24f1a:	7008      	strb	r0, [r1, #0]
   24f1c:	0019      	movs	r1, r3
   24f1e:	2318      	movs	r3, #24
   24f20:	18fb      	adds	r3, r7, r3
   24f22:	5c5b      	ldrb	r3, [r3, r1]
   24f24:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   24f26:	687b      	ldr	r3, [r7, #4]
   24f28:	1c9a      	adds	r2, r3, #2
   24f2a:	2376      	movs	r3, #118	; 0x76
   24f2c:	18fb      	adds	r3, r7, r3
   24f2e:	781b      	ldrb	r3, [r3, #0]
   24f30:	2176      	movs	r1, #118	; 0x76
   24f32:	1879      	adds	r1, r7, r1
   24f34:	1c58      	adds	r0, r3, #1
   24f36:	7008      	strb	r0, [r1, #0]
   24f38:	0019      	movs	r1, r3
   24f3a:	2318      	movs	r3, #24
   24f3c:	18fb      	adds	r3, r7, r3
   24f3e:	5c5b      	ldrb	r3, [r3, r1]
   24f40:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   24f42:	687b      	ldr	r3, [r7, #4]
   24f44:	1cda      	adds	r2, r3, #3
   24f46:	2376      	movs	r3, #118	; 0x76
   24f48:	18fb      	adds	r3, r7, r3
   24f4a:	781b      	ldrb	r3, [r3, #0]
   24f4c:	2176      	movs	r1, #118	; 0x76
   24f4e:	1879      	adds	r1, r7, r1
   24f50:	1c58      	adds	r0, r3, #1
   24f52:	7008      	strb	r0, [r1, #0]
   24f54:	0019      	movs	r1, r3
   24f56:	2318      	movs	r3, #24
   24f58:	18fb      	adds	r3, r7, r3
   24f5a:	5c5b      	ldrb	r3, [r3, r1]
   24f5c:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   24f5e:	4b73      	ldr	r3, [pc, #460]	; (2512c <spi_cmd_complete+0x79c>)
   24f60:	781b      	ldrb	r3, [r3, #0]
   24f62:	2b00      	cmp	r3, #0
   24f64:	d000      	beq.n	24f68 <spi_cmd_complete+0x5d8>
   24f66:	e174      	b.n	25252 <spi_cmd_complete+0x8c2>
   24f68:	e011      	b.n	24f8e <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   24f6a:	4a71      	ldr	r2, [pc, #452]	; (25130 <spi_cmd_complete+0x7a0>)
   24f6c:	4967      	ldr	r1, [pc, #412]	; (2510c <spi_cmd_complete+0x77c>)
   24f6e:	4b68      	ldr	r3, [pc, #416]	; (25110 <spi_cmd_complete+0x780>)
   24f70:	0018      	movs	r0, r3
   24f72:	4b68      	ldr	r3, [pc, #416]	; (25114 <spi_cmd_complete+0x784>)
   24f74:	4798      	blx	r3
   24f76:	4b6f      	ldr	r3, [pc, #444]	; (25134 <spi_cmd_complete+0x7a4>)
   24f78:	0018      	movs	r0, r3
   24f7a:	4b66      	ldr	r3, [pc, #408]	; (25114 <spi_cmd_complete+0x784>)
   24f7c:	4798      	blx	r3
   24f7e:	4b67      	ldr	r3, [pc, #412]	; (2511c <spi_cmd_complete+0x78c>)
   24f80:	0018      	movs	r0, r3
   24f82:	4b64      	ldr	r3, [pc, #400]	; (25114 <spi_cmd_complete+0x784>)
   24f84:	4798      	blx	r3
					result = N_FAIL;
   24f86:	2300      	movs	r3, #0
   24f88:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   24f8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24f8c:	e162      	b.n	25254 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   24f8e:	2376      	movs	r3, #118	; 0x76
   24f90:	18fb      	adds	r3, r7, r3
   24f92:	781b      	ldrb	r3, [r3, #0]
   24f94:	3301      	adds	r3, #1
   24f96:	001a      	movs	r2, r3
   24f98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24f9a:	429a      	cmp	r2, r3
   24f9c:	d21c      	bcs.n	24fd8 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   24f9e:	2376      	movs	r3, #118	; 0x76
   24fa0:	18fb      	adds	r3, r7, r3
   24fa2:	781b      	ldrb	r3, [r3, #0]
   24fa4:	2276      	movs	r2, #118	; 0x76
   24fa6:	18ba      	adds	r2, r7, r2
   24fa8:	1c59      	adds	r1, r3, #1
   24faa:	7011      	strb	r1, [r2, #0]
   24fac:	001a      	movs	r2, r3
   24fae:	2318      	movs	r3, #24
   24fb0:	18fb      	adds	r3, r7, r3
   24fb2:	5c9a      	ldrb	r2, [r3, r2]
   24fb4:	2314      	movs	r3, #20
   24fb6:	18fb      	adds	r3, r7, r3
   24fb8:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   24fba:	2376      	movs	r3, #118	; 0x76
   24fbc:	18fb      	adds	r3, r7, r3
   24fbe:	781b      	ldrb	r3, [r3, #0]
   24fc0:	2276      	movs	r2, #118	; 0x76
   24fc2:	18ba      	adds	r2, r7, r2
   24fc4:	1c59      	adds	r1, r3, #1
   24fc6:	7011      	strb	r1, [r2, #0]
   24fc8:	001a      	movs	r2, r3
   24fca:	2318      	movs	r3, #24
   24fcc:	18fb      	adds	r3, r7, r3
   24fce:	5c9a      	ldrb	r2, [r3, r2]
   24fd0:	2314      	movs	r3, #20
   24fd2:	18fb      	adds	r3, r7, r3
   24fd4:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   24fd6:	e13c      	b.n	25252 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   24fd8:	239c      	movs	r3, #156	; 0x9c
   24fda:	009a      	lsls	r2, r3, #2
   24fdc:	494b      	ldr	r1, [pc, #300]	; (2510c <spi_cmd_complete+0x77c>)
   24fde:	4b4c      	ldr	r3, [pc, #304]	; (25110 <spi_cmd_complete+0x780>)
   24fe0:	0018      	movs	r0, r3
   24fe2:	4b4c      	ldr	r3, [pc, #304]	; (25114 <spi_cmd_complete+0x784>)
   24fe4:	4798      	blx	r3
   24fe6:	4b54      	ldr	r3, [pc, #336]	; (25138 <spi_cmd_complete+0x7a8>)
   24fe8:	0018      	movs	r0, r3
   24fea:	4b4a      	ldr	r3, [pc, #296]	; (25114 <spi_cmd_complete+0x784>)
   24fec:	4798      	blx	r3
   24fee:	4b4b      	ldr	r3, [pc, #300]	; (2511c <spi_cmd_complete+0x78c>)
   24ff0:	0018      	movs	r0, r3
   24ff2:	4b48      	ldr	r3, [pc, #288]	; (25114 <spi_cmd_complete+0x784>)
   24ff4:	4798      	blx	r3
						result = N_FAIL;
   24ff6:	2300      	movs	r3, #0
   24ff8:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   24ffa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24ffc:	e12a      	b.n	25254 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   24ffe:	230f      	movs	r3, #15
   25000:	18fb      	adds	r3, r7, r3
   25002:	781b      	ldrb	r3, [r3, #0]
   25004:	2bc2      	cmp	r3, #194	; 0xc2
   25006:	d005      	beq.n	25014 <spi_cmd_complete+0x684>
   25008:	230f      	movs	r3, #15
   2500a:	18fb      	adds	r3, r7, r3
   2500c:	781b      	ldrb	r3, [r3, #0]
   2500e:	2bc8      	cmp	r3, #200	; 0xc8
   25010:	d000      	beq.n	25014 <spi_cmd_complete+0x684>
   25012:	e11e      	b.n	25252 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   25014:	2300      	movs	r3, #0
   25016:	663b      	str	r3, [r7, #96]	; 0x60
   25018:	e011      	b.n	2503e <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   2501a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2501c:	1c5a      	adds	r2, r3, #1
   2501e:	663a      	str	r2, [r7, #96]	; 0x60
   25020:	001a      	movs	r2, r3
   25022:	687b      	ldr	r3, [r7, #4]
   25024:	189a      	adds	r2, r3, r2
   25026:	2376      	movs	r3, #118	; 0x76
   25028:	18fb      	adds	r3, r7, r3
   2502a:	781b      	ldrb	r3, [r3, #0]
   2502c:	2176      	movs	r1, #118	; 0x76
   2502e:	1879      	adds	r1, r7, r1
   25030:	1c58      	adds	r0, r3, #1
   25032:	7008      	strb	r0, [r1, #0]
   25034:	0019      	movs	r1, r3
   25036:	2318      	movs	r3, #24
   25038:	18fb      	adds	r3, r7, r3
   2503a:	5c5b      	ldrb	r3, [r3, r1]
   2503c:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   2503e:	2376      	movs	r3, #118	; 0x76
   25040:	18fb      	adds	r3, r7, r3
   25042:	781a      	ldrb	r2, [r3, #0]
   25044:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   25046:	429a      	cmp	r2, r3
   25048:	d203      	bcs.n	25052 <spi_cmd_complete+0x6c2>
   2504a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   2504c:	683b      	ldr	r3, [r7, #0]
   2504e:	429a      	cmp	r2, r3
   25050:	d3e3      	bcc.n	2501a <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   25052:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   25054:	683a      	ldr	r2, [r7, #0]
   25056:	1ad3      	subs	r3, r2, r3
   25058:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   2505a:	683b      	ldr	r3, [r7, #0]
   2505c:	2b00      	cmp	r3, #0
   2505e:	d100      	bne.n	25062 <spi_cmd_complete+0x6d2>
   25060:	e0f1      	b.n	25246 <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   25062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   25064:	2280      	movs	r2, #128	; 0x80
   25066:	0192      	lsls	r2, r2, #6
   25068:	1ad3      	subs	r3, r2, r3
   2506a:	001a      	movs	r2, r3
   2506c:	683b      	ldr	r3, [r7, #0]
   2506e:	429a      	cmp	r2, r3
   25070:	d302      	bcc.n	25078 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   25072:	683b      	ldr	r3, [r7, #0]
   25074:	65fb      	str	r3, [r7, #92]	; 0x5c
   25076:	e004      	b.n	25082 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   25078:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2507a:	2280      	movs	r2, #128	; 0x80
   2507c:	0192      	lsls	r2, r2, #6
   2507e:	1ad3      	subs	r3, r2, r3
   25080:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   25082:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   25084:	687a      	ldr	r2, [r7, #4]
   25086:	18d3      	adds	r3, r2, r3
   25088:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   2508a:	b292      	uxth	r2, r2
   2508c:	0011      	movs	r1, r2
   2508e:	0018      	movs	r0, r3
   25090:	4b2a      	ldr	r3, [pc, #168]	; (2513c <spi_cmd_complete+0x7ac>)
   25092:	4798      	blx	r3
   25094:	1e03      	subs	r3, r0, #0
   25096:	d010      	beq.n	250ba <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   25098:	4a29      	ldr	r2, [pc, #164]	; (25140 <spi_cmd_complete+0x7b0>)
   2509a:	491c      	ldr	r1, [pc, #112]	; (2510c <spi_cmd_complete+0x77c>)
   2509c:	4b1c      	ldr	r3, [pc, #112]	; (25110 <spi_cmd_complete+0x780>)
   2509e:	0018      	movs	r0, r3
   250a0:	4b1c      	ldr	r3, [pc, #112]	; (25114 <spi_cmd_complete+0x784>)
   250a2:	4798      	blx	r3
   250a4:	4b27      	ldr	r3, [pc, #156]	; (25144 <spi_cmd_complete+0x7b4>)
   250a6:	0018      	movs	r0, r3
   250a8:	4b1a      	ldr	r3, [pc, #104]	; (25114 <spi_cmd_complete+0x784>)
   250aa:	4798      	blx	r3
   250ac:	4b1b      	ldr	r3, [pc, #108]	; (2511c <spi_cmd_complete+0x78c>)
   250ae:	0018      	movs	r0, r3
   250b0:	4b18      	ldr	r3, [pc, #96]	; (25114 <spi_cmd_complete+0x784>)
   250b2:	4798      	blx	r3
						result = N_FAIL;
   250b4:	2300      	movs	r3, #0
   250b6:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   250b8:	e0cb      	b.n	25252 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   250ba:	4b1c      	ldr	r3, [pc, #112]	; (2512c <spi_cmd_complete+0x79c>)
   250bc:	781b      	ldrb	r3, [r3, #0]
   250be:	2b00      	cmp	r3, #0
   250c0:	d119      	bne.n	250f6 <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   250c2:	2314      	movs	r3, #20
   250c4:	18fb      	adds	r3, r7, r3
   250c6:	2102      	movs	r1, #2
   250c8:	0018      	movs	r0, r3
   250ca:	4b1c      	ldr	r3, [pc, #112]	; (2513c <spi_cmd_complete+0x7ac>)
   250cc:	4798      	blx	r3
   250ce:	1e03      	subs	r3, r0, #0
   250d0:	d011      	beq.n	250f6 <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   250d2:	23a6      	movs	r3, #166	; 0xa6
   250d4:	009a      	lsls	r2, r3, #2
   250d6:	490d      	ldr	r1, [pc, #52]	; (2510c <spi_cmd_complete+0x77c>)
   250d8:	4b0d      	ldr	r3, [pc, #52]	; (25110 <spi_cmd_complete+0x780>)
   250da:	0018      	movs	r0, r3
   250dc:	4b0d      	ldr	r3, [pc, #52]	; (25114 <spi_cmd_complete+0x784>)
   250de:	4798      	blx	r3
   250e0:	4b19      	ldr	r3, [pc, #100]	; (25148 <spi_cmd_complete+0x7b8>)
   250e2:	0018      	movs	r0, r3
   250e4:	4b0b      	ldr	r3, [pc, #44]	; (25114 <spi_cmd_complete+0x784>)
   250e6:	4798      	blx	r3
   250e8:	4b0c      	ldr	r3, [pc, #48]	; (2511c <spi_cmd_complete+0x78c>)
   250ea:	0018      	movs	r0, r3
   250ec:	4b09      	ldr	r3, [pc, #36]	; (25114 <spi_cmd_complete+0x784>)
   250ee:	4798      	blx	r3
							result = N_FAIL;
   250f0:	2300      	movs	r3, #0
   250f2:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   250f4:	e0ad      	b.n	25252 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   250f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   250f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   250fa:	18d3      	adds	r3, r2, r3
   250fc:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   250fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   25100:	683a      	ldr	r2, [r7, #0]
   25102:	1ad3      	subs	r3, r2, r3
   25104:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   25106:	e09e      	b.n	25246 <spi_cmd_complete+0x8b6>
   25108:	0000022f 	.word	0x0000022f
   2510c:	0003b1dc 	.word	0x0003b1dc
   25110:	0003abc8 	.word	0x0003abc8
   25114:	0001ee19 	.word	0x0001ee19
   25118:	0003acc0 	.word	0x0003acc0
   2511c:	0003ac08 	.word	0x0003ac08
   25120:	00000239 	.word	0x00000239
   25124:	0003acfc 	.word	0x0003acfc
   25128:	0003ad30 	.word	0x0003ad30
   2512c:	200042b4 	.word	0x200042b4
   25130:	00000263 	.word	0x00000263
   25134:	0003ad60 	.word	0x0003ad60
   25138:	0003ad90 	.word	0x0003ad90
   2513c:	000242c9 	.word	0x000242c9
   25140:	0000028e 	.word	0x0000028e
   25144:	0003adc0 	.word	0x0003adc0
   25148:	0003adf4 	.word	0x0003adf4
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   2514c:	683a      	ldr	r2, [r7, #0]
   2514e:	2380      	movs	r3, #128	; 0x80
   25150:	019b      	lsls	r3, r3, #6
   25152:	429a      	cmp	r2, r3
   25154:	d802      	bhi.n	2515c <spi_cmd_complete+0x7cc>
						nbytes = sz;
   25156:	683b      	ldr	r3, [r7, #0]
   25158:	65bb      	str	r3, [r7, #88]	; 0x58
   2515a:	e002      	b.n	25162 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   2515c:	2380      	movs	r3, #128	; 0x80
   2515e:	019b      	lsls	r3, r3, #6
   25160:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   25162:	230a      	movs	r3, #10
   25164:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   25166:	2317      	movs	r3, #23
   25168:	18fb      	adds	r3, r7, r3
   2516a:	2101      	movs	r1, #1
   2516c:	0018      	movs	r0, r3
   2516e:	4b3b      	ldr	r3, [pc, #236]	; (2525c <spi_cmd_complete+0x8cc>)
   25170:	4798      	blx	r3
   25172:	1e03      	subs	r3, r0, #0
   25174:	d011      	beq.n	2519a <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   25176:	23ae      	movs	r3, #174	; 0xae
   25178:	009a      	lsls	r2, r3, #2
   2517a:	4939      	ldr	r1, [pc, #228]	; (25260 <spi_cmd_complete+0x8d0>)
   2517c:	4b39      	ldr	r3, [pc, #228]	; (25264 <spi_cmd_complete+0x8d4>)
   2517e:	0018      	movs	r0, r3
   25180:	4b39      	ldr	r3, [pc, #228]	; (25268 <spi_cmd_complete+0x8d8>)
   25182:	4798      	blx	r3
   25184:	4b39      	ldr	r3, [pc, #228]	; (2526c <spi_cmd_complete+0x8dc>)
   25186:	0018      	movs	r0, r3
   25188:	4b37      	ldr	r3, [pc, #220]	; (25268 <spi_cmd_complete+0x8d8>)
   2518a:	4798      	blx	r3
   2518c:	4b38      	ldr	r3, [pc, #224]	; (25270 <spi_cmd_complete+0x8e0>)
   2518e:	0018      	movs	r0, r3
   25190:	4b35      	ldr	r3, [pc, #212]	; (25268 <spi_cmd_complete+0x8d8>)
   25192:	4798      	blx	r3
							result = N_FAIL;
   25194:	2300      	movs	r3, #0
   25196:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   25198:	e010      	b.n	251bc <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   2519a:	2317      	movs	r3, #23
   2519c:	18fb      	adds	r3, r7, r3
   2519e:	781b      	ldrb	r3, [r3, #0]
   251a0:	091b      	lsrs	r3, r3, #4
   251a2:	b2db      	uxtb	r3, r3
   251a4:	001a      	movs	r2, r3
   251a6:	230f      	movs	r3, #15
   251a8:	4013      	ands	r3, r2
   251aa:	2b0f      	cmp	r3, #15
   251ac:	d005      	beq.n	251ba <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   251ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   251b0:	1e5a      	subs	r2, r3, #1
   251b2:	667a      	str	r2, [r7, #100]	; 0x64
   251b4:	2b00      	cmp	r3, #0
   251b6:	d1d6      	bne.n	25166 <spi_cmd_complete+0x7d6>
   251b8:	e000      	b.n	251bc <spi_cmd_complete+0x82c>
							break;
   251ba:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   251bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   251be:	2b00      	cmp	r3, #0
   251c0:	d046      	beq.n	25250 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   251c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   251c4:	687a      	ldr	r2, [r7, #4]
   251c6:	18d3      	adds	r3, r2, r3
   251c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
   251ca:	b292      	uxth	r2, r2
   251cc:	0011      	movs	r1, r2
   251ce:	0018      	movs	r0, r3
   251d0:	4b22      	ldr	r3, [pc, #136]	; (2525c <spi_cmd_complete+0x8cc>)
   251d2:	4798      	blx	r3
   251d4:	1e03      	subs	r3, r0, #0
   251d6:	d011      	beq.n	251fc <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   251d8:	23b2      	movs	r3, #178	; 0xb2
   251da:	009a      	lsls	r2, r3, #2
   251dc:	4920      	ldr	r1, [pc, #128]	; (25260 <spi_cmd_complete+0x8d0>)
   251de:	4b21      	ldr	r3, [pc, #132]	; (25264 <spi_cmd_complete+0x8d4>)
   251e0:	0018      	movs	r0, r3
   251e2:	4b21      	ldr	r3, [pc, #132]	; (25268 <spi_cmd_complete+0x8d8>)
   251e4:	4798      	blx	r3
   251e6:	4b23      	ldr	r3, [pc, #140]	; (25274 <spi_cmd_complete+0x8e4>)
   251e8:	0018      	movs	r0, r3
   251ea:	4b1f      	ldr	r3, [pc, #124]	; (25268 <spi_cmd_complete+0x8d8>)
   251ec:	4798      	blx	r3
   251ee:	4b20      	ldr	r3, [pc, #128]	; (25270 <spi_cmd_complete+0x8e0>)
   251f0:	0018      	movs	r0, r3
   251f2:	4b1d      	ldr	r3, [pc, #116]	; (25268 <spi_cmd_complete+0x8d8>)
   251f4:	4798      	blx	r3
						result = N_FAIL;
   251f6:	2300      	movs	r3, #0
   251f8:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   251fa:	e02a      	b.n	25252 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   251fc:	4b1e      	ldr	r3, [pc, #120]	; (25278 <spi_cmd_complete+0x8e8>)
   251fe:	781b      	ldrb	r3, [r3, #0]
   25200:	2b00      	cmp	r3, #0
   25202:	d118      	bne.n	25236 <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   25204:	2314      	movs	r3, #20
   25206:	18fb      	adds	r3, r7, r3
   25208:	2102      	movs	r1, #2
   2520a:	0018      	movs	r0, r3
   2520c:	4b13      	ldr	r3, [pc, #76]	; (2525c <spi_cmd_complete+0x8cc>)
   2520e:	4798      	blx	r3
   25210:	1e03      	subs	r3, r0, #0
   25212:	d010      	beq.n	25236 <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   25214:	4a19      	ldr	r2, [pc, #100]	; (2527c <spi_cmd_complete+0x8ec>)
   25216:	4912      	ldr	r1, [pc, #72]	; (25260 <spi_cmd_complete+0x8d0>)
   25218:	4b12      	ldr	r3, [pc, #72]	; (25264 <spi_cmd_complete+0x8d4>)
   2521a:	0018      	movs	r0, r3
   2521c:	4b12      	ldr	r3, [pc, #72]	; (25268 <spi_cmd_complete+0x8d8>)
   2521e:	4798      	blx	r3
   25220:	4b17      	ldr	r3, [pc, #92]	; (25280 <spi_cmd_complete+0x8f0>)
   25222:	0018      	movs	r0, r3
   25224:	4b10      	ldr	r3, [pc, #64]	; (25268 <spi_cmd_complete+0x8d8>)
   25226:	4798      	blx	r3
   25228:	4b11      	ldr	r3, [pc, #68]	; (25270 <spi_cmd_complete+0x8e0>)
   2522a:	0018      	movs	r0, r3
   2522c:	4b0e      	ldr	r3, [pc, #56]	; (25268 <spi_cmd_complete+0x8d8>)
   2522e:	4798      	blx	r3
							result = N_FAIL;
   25230:	2300      	movs	r3, #0
   25232:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   25234:	e00d      	b.n	25252 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   25236:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   25238:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2523a:	18d3      	adds	r3, r2, r3
   2523c:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   2523e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   25240:	683a      	ldr	r2, [r7, #0]
   25242:	1ad3      	subs	r3, r2, r3
   25244:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   25246:	683b      	ldr	r3, [r7, #0]
   25248:	2b00      	cmp	r3, #0
   2524a:	d000      	beq.n	2524e <spi_cmd_complete+0x8be>
   2524c:	e77e      	b.n	2514c <spi_cmd_complete+0x7bc>
   2524e:	e000      	b.n	25252 <spi_cmd_complete+0x8c2>
						break;
   25250:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   25252:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   25254:	0018      	movs	r0, r3
   25256:	46bd      	mov	sp, r7
   25258:	b01f      	add	sp, #124	; 0x7c
   2525a:	bd90      	pop	{r4, r7, pc}
   2525c:	000242c9 	.word	0x000242c9
   25260:	0003b1dc 	.word	0x0003b1dc
   25264:	0003abc8 	.word	0x0003abc8
   25268:	0001ee19 	.word	0x0001ee19
   2526c:	0003ae2c 	.word	0x0003ae2c
   25270:	0003ac08 	.word	0x0003ac08
   25274:	0003adc0 	.word	0x0003adc0
   25278:	200042b4 	.word	0x200042b4
   2527c:	000002d2 	.word	0x000002d2
   25280:	0003adf4 	.word	0x0003adf4

00025284 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   25284:	b580      	push	{r7, lr}
   25286:	b086      	sub	sp, #24
   25288:	af00      	add	r7, sp, #0
   2528a:	6078      	str	r0, [r7, #4]
   2528c:	000a      	movs	r2, r1
   2528e:	1cbb      	adds	r3, r7, #2
   25290:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   25292:	2313      	movs	r3, #19
   25294:	18fb      	adds	r3, r7, r3
   25296:	2201      	movs	r2, #1
   25298:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   2529a:	230c      	movs	r3, #12
   2529c:	18fb      	adds	r3, r7, r3
   2529e:	2200      	movs	r2, #0
   252a0:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   252a2:	2316      	movs	r3, #22
   252a4:	18fb      	adds	r3, r7, r3
   252a6:	2200      	movs	r2, #0
   252a8:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   252aa:	1cbb      	adds	r3, r7, #2
   252ac:	881a      	ldrh	r2, [r3, #0]
   252ae:	2380      	movs	r3, #128	; 0x80
   252b0:	019b      	lsls	r3, r3, #6
   252b2:	429a      	cmp	r2, r3
   252b4:	d805      	bhi.n	252c2 <spi_data_write+0x3e>
			nbytes = sz;
   252b6:	2314      	movs	r3, #20
   252b8:	18fb      	adds	r3, r7, r3
   252ba:	1cba      	adds	r2, r7, #2
   252bc:	8812      	ldrh	r2, [r2, #0]
   252be:	801a      	strh	r2, [r3, #0]
   252c0:	e004      	b.n	252cc <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   252c2:	2314      	movs	r3, #20
   252c4:	18fb      	adds	r3, r7, r3
   252c6:	2280      	movs	r2, #128	; 0x80
   252c8:	0192      	lsls	r2, r2, #6
   252ca:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   252cc:	2311      	movs	r3, #17
   252ce:	18fb      	adds	r3, r7, r3
   252d0:	22f0      	movs	r2, #240	; 0xf0
   252d2:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   252d4:	2316      	movs	r3, #22
   252d6:	18fb      	adds	r3, r7, r3
   252d8:	2200      	movs	r2, #0
   252da:	5e9b      	ldrsh	r3, [r3, r2]
   252dc:	2b00      	cmp	r3, #0
   252de:	d10f      	bne.n	25300 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   252e0:	1cbb      	adds	r3, r7, #2
   252e2:	881a      	ldrh	r2, [r3, #0]
   252e4:	2380      	movs	r3, #128	; 0x80
   252e6:	019b      	lsls	r3, r3, #6
   252e8:	429a      	cmp	r2, r3
   252ea:	d804      	bhi.n	252f6 <spi_data_write+0x72>
				order = 0x3;
   252ec:	2312      	movs	r3, #18
   252ee:	18fb      	adds	r3, r7, r3
   252f0:	2203      	movs	r2, #3
   252f2:	701a      	strb	r2, [r3, #0]
   252f4:	e013      	b.n	2531e <spi_data_write+0x9a>
			else
				order = 0x1;
   252f6:	2312      	movs	r3, #18
   252f8:	18fb      	adds	r3, r7, r3
   252fa:	2201      	movs	r2, #1
   252fc:	701a      	strb	r2, [r3, #0]
   252fe:	e00e      	b.n	2531e <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   25300:	1cbb      	adds	r3, r7, #2
   25302:	881a      	ldrh	r2, [r3, #0]
   25304:	2380      	movs	r3, #128	; 0x80
   25306:	019b      	lsls	r3, r3, #6
   25308:	429a      	cmp	r2, r3
   2530a:	d804      	bhi.n	25316 <spi_data_write+0x92>
				order = 0x3;
   2530c:	2312      	movs	r3, #18
   2530e:	18fb      	adds	r3, r7, r3
   25310:	2203      	movs	r2, #3
   25312:	701a      	strb	r2, [r3, #0]
   25314:	e003      	b.n	2531e <spi_data_write+0x9a>
			else
				order = 0x2;
   25316:	2312      	movs	r3, #18
   25318:	18fb      	adds	r3, r7, r3
   2531a:	2202      	movs	r2, #2
   2531c:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   2531e:	2311      	movs	r3, #17
   25320:	18fb      	adds	r3, r7, r3
   25322:	781a      	ldrb	r2, [r3, #0]
   25324:	2312      	movs	r3, #18
   25326:	18fb      	adds	r3, r7, r3
   25328:	781b      	ldrb	r3, [r3, #0]
   2532a:	4313      	orrs	r3, r2
   2532c:	b2da      	uxtb	r2, r3
   2532e:	2311      	movs	r3, #17
   25330:	18fb      	adds	r3, r7, r3
   25332:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   25334:	2311      	movs	r3, #17
   25336:	18fb      	adds	r3, r7, r3
   25338:	2101      	movs	r1, #1
   2533a:	0018      	movs	r0, r3
   2533c:	4b3c      	ldr	r3, [pc, #240]	; (25430 <spi_data_write+0x1ac>)
   2533e:	4798      	blx	r3
   25340:	1e03      	subs	r3, r0, #0
   25342:	d012      	beq.n	2536a <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   25344:	4a3b      	ldr	r2, [pc, #236]	; (25434 <spi_data_write+0x1b0>)
   25346:	493c      	ldr	r1, [pc, #240]	; (25438 <spi_data_write+0x1b4>)
   25348:	4b3c      	ldr	r3, [pc, #240]	; (2543c <spi_data_write+0x1b8>)
   2534a:	0018      	movs	r0, r3
   2534c:	4b3c      	ldr	r3, [pc, #240]	; (25440 <spi_data_write+0x1bc>)
   2534e:	4798      	blx	r3
   25350:	4b3c      	ldr	r3, [pc, #240]	; (25444 <spi_data_write+0x1c0>)
   25352:	0018      	movs	r0, r3
   25354:	4b3a      	ldr	r3, [pc, #232]	; (25440 <spi_data_write+0x1bc>)
   25356:	4798      	blx	r3
   25358:	4b3b      	ldr	r3, [pc, #236]	; (25448 <spi_data_write+0x1c4>)
   2535a:	0018      	movs	r0, r3
   2535c:	4b38      	ldr	r3, [pc, #224]	; (25440 <spi_data_write+0x1bc>)
   2535e:	4798      	blx	r3
			result = N_FAIL;
   25360:	2313      	movs	r3, #19
   25362:	18fb      	adds	r3, r7, r3
   25364:	2200      	movs	r2, #0
   25366:	701a      	strb	r2, [r3, #0]
			break;
   25368:	e059      	b.n	2541e <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   2536a:	2316      	movs	r3, #22
   2536c:	18fb      	adds	r3, r7, r3
   2536e:	2200      	movs	r2, #0
   25370:	5e9b      	ldrsh	r3, [r3, r2]
   25372:	687a      	ldr	r2, [r7, #4]
   25374:	18d2      	adds	r2, r2, r3
   25376:	2314      	movs	r3, #20
   25378:	18fb      	adds	r3, r7, r3
   2537a:	881b      	ldrh	r3, [r3, #0]
   2537c:	0019      	movs	r1, r3
   2537e:	0010      	movs	r0, r2
   25380:	4b2b      	ldr	r3, [pc, #172]	; (25430 <spi_data_write+0x1ac>)
   25382:	4798      	blx	r3
   25384:	1e03      	subs	r3, r0, #0
   25386:	d012      	beq.n	253ae <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   25388:	4a30      	ldr	r2, [pc, #192]	; (2544c <spi_data_write+0x1c8>)
   2538a:	492b      	ldr	r1, [pc, #172]	; (25438 <spi_data_write+0x1b4>)
   2538c:	4b2b      	ldr	r3, [pc, #172]	; (2543c <spi_data_write+0x1b8>)
   2538e:	0018      	movs	r0, r3
   25390:	4b2b      	ldr	r3, [pc, #172]	; (25440 <spi_data_write+0x1bc>)
   25392:	4798      	blx	r3
   25394:	4b2e      	ldr	r3, [pc, #184]	; (25450 <spi_data_write+0x1cc>)
   25396:	0018      	movs	r0, r3
   25398:	4b29      	ldr	r3, [pc, #164]	; (25440 <spi_data_write+0x1bc>)
   2539a:	4798      	blx	r3
   2539c:	4b2a      	ldr	r3, [pc, #168]	; (25448 <spi_data_write+0x1c4>)
   2539e:	0018      	movs	r0, r3
   253a0:	4b27      	ldr	r3, [pc, #156]	; (25440 <spi_data_write+0x1bc>)
   253a2:	4798      	blx	r3
			result = N_FAIL;
   253a4:	2313      	movs	r3, #19
   253a6:	18fb      	adds	r3, r7, r3
   253a8:	2200      	movs	r2, #0
   253aa:	701a      	strb	r2, [r3, #0]
			break;
   253ac:	e037      	b.n	2541e <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   253ae:	4b29      	ldr	r3, [pc, #164]	; (25454 <spi_data_write+0x1d0>)
   253b0:	781b      	ldrb	r3, [r3, #0]
   253b2:	2b00      	cmp	r3, #0
   253b4:	d11b      	bne.n	253ee <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   253b6:	230c      	movs	r3, #12
   253b8:	18fb      	adds	r3, r7, r3
   253ba:	2102      	movs	r1, #2
   253bc:	0018      	movs	r0, r3
   253be:	4b1c      	ldr	r3, [pc, #112]	; (25430 <spi_data_write+0x1ac>)
   253c0:	4798      	blx	r3
   253c2:	1e03      	subs	r3, r0, #0
   253c4:	d013      	beq.n	253ee <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   253c6:	23d7      	movs	r3, #215	; 0xd7
   253c8:	009a      	lsls	r2, r3, #2
   253ca:	491b      	ldr	r1, [pc, #108]	; (25438 <spi_data_write+0x1b4>)
   253cc:	4b1b      	ldr	r3, [pc, #108]	; (2543c <spi_data_write+0x1b8>)
   253ce:	0018      	movs	r0, r3
   253d0:	4b1b      	ldr	r3, [pc, #108]	; (25440 <spi_data_write+0x1bc>)
   253d2:	4798      	blx	r3
   253d4:	4b20      	ldr	r3, [pc, #128]	; (25458 <spi_data_write+0x1d4>)
   253d6:	0018      	movs	r0, r3
   253d8:	4b19      	ldr	r3, [pc, #100]	; (25440 <spi_data_write+0x1bc>)
   253da:	4798      	blx	r3
   253dc:	4b1a      	ldr	r3, [pc, #104]	; (25448 <spi_data_write+0x1c4>)
   253de:	0018      	movs	r0, r3
   253e0:	4b17      	ldr	r3, [pc, #92]	; (25440 <spi_data_write+0x1bc>)
   253e2:	4798      	blx	r3
				result = N_FAIL;
   253e4:	2313      	movs	r3, #19
   253e6:	18fb      	adds	r3, r7, r3
   253e8:	2200      	movs	r2, #0
   253ea:	701a      	strb	r2, [r3, #0]
				break;
   253ec:	e017      	b.n	2541e <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   253ee:	2316      	movs	r3, #22
   253f0:	18fb      	adds	r3, r7, r3
   253f2:	881a      	ldrh	r2, [r3, #0]
   253f4:	2314      	movs	r3, #20
   253f6:	18fb      	adds	r3, r7, r3
   253f8:	881b      	ldrh	r3, [r3, #0]
   253fa:	18d3      	adds	r3, r2, r3
   253fc:	b29a      	uxth	r2, r3
   253fe:	2316      	movs	r3, #22
   25400:	18fb      	adds	r3, r7, r3
   25402:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   25404:	1cbb      	adds	r3, r7, #2
   25406:	1cb9      	adds	r1, r7, #2
   25408:	2214      	movs	r2, #20
   2540a:	18ba      	adds	r2, r7, r2
   2540c:	8809      	ldrh	r1, [r1, #0]
   2540e:	8812      	ldrh	r2, [r2, #0]
   25410:	1a8a      	subs	r2, r1, r2
   25412:	801a      	strh	r2, [r3, #0]
	} while (sz);
   25414:	1cbb      	adds	r3, r7, #2
   25416:	881b      	ldrh	r3, [r3, #0]
   25418:	2b00      	cmp	r3, #0
   2541a:	d000      	beq.n	2541e <spi_data_write+0x19a>
   2541c:	e745      	b.n	252aa <spi_data_write+0x26>


	return result;
   2541e:	2313      	movs	r3, #19
   25420:	18fb      	adds	r3, r7, r3
   25422:	781b      	ldrb	r3, [r3, #0]
   25424:	b25b      	sxtb	r3, r3
}
   25426:	0018      	movs	r0, r3
   25428:	46bd      	mov	sp, r7
   2542a:	b006      	add	sp, #24
   2542c:	bd80      	pop	{r7, pc}
   2542e:	46c0      	nop			; (mov r8, r8)
   25430:	0002430d 	.word	0x0002430d
   25434:	00000349 	.word	0x00000349
   25438:	0003b1f0 	.word	0x0003b1f0
   2543c:	0003abc8 	.word	0x0003abc8
   25440:	0001ee19 	.word	0x0001ee19
   25444:	0003ae90 	.word	0x0003ae90
   25448:	0003ac08 	.word	0x0003ac08
   2544c:	00000352 	.word	0x00000352
   25450:	0003aec8 	.word	0x0003aec8
   25454:	200042b4 	.word	0x200042b4
   25458:	0003aefc 	.word	0x0003aefc

0002545c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   2545c:	b590      	push	{r4, r7, lr}
   2545e:	b087      	sub	sp, #28
   25460:	af02      	add	r7, sp, #8
   25462:	6078      	str	r0, [r7, #4]
   25464:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   25466:	230f      	movs	r3, #15
   25468:	18fb      	adds	r3, r7, r3
   2546a:	220a      	movs	r2, #10
   2546c:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   2546e:	230c      	movs	r3, #12
   25470:	18fb      	adds	r3, r7, r3
   25472:	2201      	movs	r2, #1
   25474:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   25476:	230e      	movs	r3, #14
   25478:	18fb      	adds	r3, r7, r3
   2547a:	22c9      	movs	r2, #201	; 0xc9
   2547c:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   2547e:	230d      	movs	r3, #13
   25480:	18fb      	adds	r3, r7, r3
   25482:	2200      	movs	r2, #0
   25484:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   25486:	687b      	ldr	r3, [r7, #4]
   25488:	2b30      	cmp	r3, #48	; 0x30
   2548a:	d808      	bhi.n	2549e <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   2548c:	230e      	movs	r3, #14
   2548e:	18fb      	adds	r3, r7, r3
   25490:	22c3      	movs	r2, #195	; 0xc3
   25492:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   25494:	230d      	movs	r3, #13
   25496:	18fb      	adds	r3, r7, r3
   25498:	2201      	movs	r2, #1
   2549a:	701a      	strb	r2, [r3, #0]
   2549c:	e007      	b.n	254ae <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   2549e:	230e      	movs	r3, #14
   254a0:	18fb      	adds	r3, r7, r3
   254a2:	22c9      	movs	r2, #201	; 0xc9
   254a4:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   254a6:	230d      	movs	r3, #13
   254a8:	18fb      	adds	r3, r7, r3
   254aa:	2200      	movs	r2, #0
   254ac:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   254ae:	003a      	movs	r2, r7
   254b0:	6879      	ldr	r1, [r7, #4]
   254b2:	230e      	movs	r3, #14
   254b4:	18fb      	adds	r3, r7, r3
   254b6:	7818      	ldrb	r0, [r3, #0]
   254b8:	230d      	movs	r3, #13
   254ba:	18fb      	adds	r3, r7, r3
   254bc:	781b      	ldrb	r3, [r3, #0]
   254be:	9300      	str	r3, [sp, #0]
   254c0:	2304      	movs	r3, #4
   254c2:	4c2e      	ldr	r4, [pc, #184]	; (2557c <spi_write_reg+0x120>)
   254c4:	47a0      	blx	r4
   254c6:	0002      	movs	r2, r0
   254c8:	230c      	movs	r3, #12
   254ca:	18fb      	adds	r3, r7, r3
   254cc:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   254ce:	230c      	movs	r3, #12
   254d0:	18fb      	adds	r3, r7, r3
   254d2:	781b      	ldrb	r3, [r3, #0]
   254d4:	b25b      	sxtb	r3, r3
   254d6:	2b01      	cmp	r3, #1
   254d8:	d010      	beq.n	254fc <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   254da:	4a29      	ldr	r2, [pc, #164]	; (25580 <spi_write_reg+0x124>)
   254dc:	4929      	ldr	r1, [pc, #164]	; (25584 <spi_write_reg+0x128>)
   254de:	4b2a      	ldr	r3, [pc, #168]	; (25588 <spi_write_reg+0x12c>)
   254e0:	0018      	movs	r0, r3
   254e2:	4b2a      	ldr	r3, [pc, #168]	; (2558c <spi_write_reg+0x130>)
   254e4:	4798      	blx	r3
   254e6:	687a      	ldr	r2, [r7, #4]
   254e8:	4b29      	ldr	r3, [pc, #164]	; (25590 <spi_write_reg+0x134>)
   254ea:	0011      	movs	r1, r2
   254ec:	0018      	movs	r0, r3
   254ee:	4b27      	ldr	r3, [pc, #156]	; (2558c <spi_write_reg+0x130>)
   254f0:	4798      	blx	r3
   254f2:	4b28      	ldr	r3, [pc, #160]	; (25594 <spi_write_reg+0x138>)
   254f4:	0018      	movs	r0, r3
   254f6:	4b25      	ldr	r3, [pc, #148]	; (2558c <spi_write_reg+0x130>)
   254f8:	4798      	blx	r3
		goto _FAIL_;
   254fa:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   254fc:	230c      	movs	r3, #12
   254fe:	18fb      	adds	r3, r7, r3
   25500:	781b      	ldrb	r3, [r3, #0]
   25502:	b25b      	sxtb	r3, r3
   25504:	2b01      	cmp	r3, #1
   25506:	d030      	beq.n	2556a <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   25508:	2001      	movs	r0, #1
   2550a:	4b23      	ldr	r3, [pc, #140]	; (25598 <spi_write_reg+0x13c>)
   2550c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   2550e:	2300      	movs	r3, #0
   25510:	9300      	str	r3, [sp, #0]
   25512:	2300      	movs	r3, #0
   25514:	2200      	movs	r2, #0
   25516:	2100      	movs	r1, #0
   25518:	20cf      	movs	r0, #207	; 0xcf
   2551a:	4c20      	ldr	r4, [pc, #128]	; (2559c <spi_write_reg+0x140>)
   2551c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   2551e:	20cf      	movs	r0, #207	; 0xcf
   25520:	4b1f      	ldr	r3, [pc, #124]	; (255a0 <spi_write_reg+0x144>)
   25522:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   25524:	23ea      	movs	r3, #234	; 0xea
   25526:	009a      	lsls	r2, r3, #2
   25528:	4916      	ldr	r1, [pc, #88]	; (25584 <spi_write_reg+0x128>)
   2552a:	4b17      	ldr	r3, [pc, #92]	; (25588 <spi_write_reg+0x12c>)
   2552c:	0018      	movs	r0, r3
   2552e:	4b17      	ldr	r3, [pc, #92]	; (2558c <spi_write_reg+0x130>)
   25530:	4798      	blx	r3
   25532:	230f      	movs	r3, #15
   25534:	18fb      	adds	r3, r7, r3
   25536:	7819      	ldrb	r1, [r3, #0]
   25538:	683b      	ldr	r3, [r7, #0]
   2553a:	687a      	ldr	r2, [r7, #4]
   2553c:	4819      	ldr	r0, [pc, #100]	; (255a4 <spi_write_reg+0x148>)
   2553e:	4c13      	ldr	r4, [pc, #76]	; (2558c <spi_write_reg+0x130>)
   25540:	47a0      	blx	r4
   25542:	4b14      	ldr	r3, [pc, #80]	; (25594 <spi_write_reg+0x138>)
   25544:	0018      	movs	r0, r3
   25546:	4b11      	ldr	r3, [pc, #68]	; (2558c <spi_write_reg+0x130>)
   25548:	4798      	blx	r3
		nm_bsp_sleep(1);
   2554a:	2001      	movs	r0, #1
   2554c:	4b12      	ldr	r3, [pc, #72]	; (25598 <spi_write_reg+0x13c>)
   2554e:	4798      	blx	r3
		retry--;
   25550:	230f      	movs	r3, #15
   25552:	18fb      	adds	r3, r7, r3
   25554:	781a      	ldrb	r2, [r3, #0]
   25556:	230f      	movs	r3, #15
   25558:	18fb      	adds	r3, r7, r3
   2555a:	3a01      	subs	r2, #1
   2555c:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   2555e:	230f      	movs	r3, #15
   25560:	18fb      	adds	r3, r7, r3
   25562:	781b      	ldrb	r3, [r3, #0]
   25564:	2b00      	cmp	r3, #0
   25566:	d000      	beq.n	2556a <spi_write_reg+0x10e>
   25568:	e78d      	b.n	25486 <spi_write_reg+0x2a>
	}

	return result;
   2556a:	230c      	movs	r3, #12
   2556c:	18fb      	adds	r3, r7, r3
   2556e:	781b      	ldrb	r3, [r3, #0]
   25570:	b25b      	sxtb	r3, r3
}
   25572:	0018      	movs	r0, r3
   25574:	46bd      	mov	sp, r7
   25576:	b005      	add	sp, #20
   25578:	bd90      	pop	{r4, r7, pc}
   2557a:	46c0      	nop			; (mov r8, r8)
   2557c:	00024991 	.word	0x00024991
   25580:	0000039d 	.word	0x0000039d
   25584:	0003b200 	.word	0x0003b200
   25588:	0003abc8 	.word	0x0003abc8
   2558c:	0001ee19 	.word	0x0001ee19
   25590:	0003af34 	.word	0x0003af34
   25594:	0003ac08 	.word	0x0003ac08
   25598:	000212d1 	.word	0x000212d1
   2559c:	00024415 	.word	0x00024415
   255a0:	00024855 	.word	0x00024855
   255a4:	0003af60 	.word	0x0003af60

000255a8 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   255a8:	b590      	push	{r4, r7, lr}
   255aa:	b089      	sub	sp, #36	; 0x24
   255ac:	af02      	add	r7, sp, #8
   255ae:	60f8      	str	r0, [r7, #12]
   255b0:	60b9      	str	r1, [r7, #8]
   255b2:	1dbb      	adds	r3, r7, #6
   255b4:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   255b6:	2316      	movs	r3, #22
   255b8:	18fb      	adds	r3, r7, r3
   255ba:	220a      	movs	r2, #10
   255bc:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   255be:	2315      	movs	r3, #21
   255c0:	18fb      	adds	r3, r7, r3
   255c2:	22c7      	movs	r2, #199	; 0xc7
   255c4:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   255c6:	1dbb      	adds	r3, r7, #6
   255c8:	881a      	ldrh	r2, [r3, #0]
   255ca:	68f9      	ldr	r1, [r7, #12]
   255cc:	2315      	movs	r3, #21
   255ce:	18fb      	adds	r3, r7, r3
   255d0:	7818      	ldrb	r0, [r3, #0]
   255d2:	2300      	movs	r3, #0
   255d4:	9300      	str	r3, [sp, #0]
   255d6:	0013      	movs	r3, r2
   255d8:	2200      	movs	r2, #0
   255da:	4c4d      	ldr	r4, [pc, #308]	; (25710 <nm_spi_write+0x168>)
   255dc:	47a0      	blx	r4
   255de:	0002      	movs	r2, r0
   255e0:	2317      	movs	r3, #23
   255e2:	18fb      	adds	r3, r7, r3
   255e4:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   255e6:	2317      	movs	r3, #23
   255e8:	18fb      	adds	r3, r7, r3
   255ea:	781b      	ldrb	r3, [r3, #0]
   255ec:	b25b      	sxtb	r3, r3
   255ee:	2b01      	cmp	r3, #1
   255f0:	d010      	beq.n	25614 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   255f2:	4a48      	ldr	r2, [pc, #288]	; (25714 <nm_spi_write+0x16c>)
   255f4:	4948      	ldr	r1, [pc, #288]	; (25718 <nm_spi_write+0x170>)
   255f6:	4b49      	ldr	r3, [pc, #292]	; (2571c <nm_spi_write+0x174>)
   255f8:	0018      	movs	r0, r3
   255fa:	4b49      	ldr	r3, [pc, #292]	; (25720 <nm_spi_write+0x178>)
   255fc:	4798      	blx	r3
   255fe:	68fa      	ldr	r2, [r7, #12]
   25600:	4b48      	ldr	r3, [pc, #288]	; (25724 <nm_spi_write+0x17c>)
   25602:	0011      	movs	r1, r2
   25604:	0018      	movs	r0, r3
   25606:	4b46      	ldr	r3, [pc, #280]	; (25720 <nm_spi_write+0x178>)
   25608:	4798      	blx	r3
   2560a:	4b47      	ldr	r3, [pc, #284]	; (25728 <nm_spi_write+0x180>)
   2560c:	0018      	movs	r0, r3
   2560e:	4b44      	ldr	r3, [pc, #272]	; (25720 <nm_spi_write+0x178>)
   25610:	4798      	blx	r3
		goto _FAIL_;
   25612:	e03e      	b.n	25692 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   25614:	2317      	movs	r3, #23
   25616:	18fc      	adds	r4, r7, r3
   25618:	1dbb      	adds	r3, r7, #6
   2561a:	881a      	ldrh	r2, [r3, #0]
   2561c:	68bb      	ldr	r3, [r7, #8]
   2561e:	0011      	movs	r1, r2
   25620:	0018      	movs	r0, r3
   25622:	4b42      	ldr	r3, [pc, #264]	; (2572c <nm_spi_write+0x184>)
   25624:	4798      	blx	r3
   25626:	0003      	movs	r3, r0
   25628:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   2562a:	2317      	movs	r3, #23
   2562c:	18fb      	adds	r3, r7, r3
   2562e:	781b      	ldrb	r3, [r3, #0]
   25630:	b25b      	sxtb	r3, r3
   25632:	2b01      	cmp	r3, #1
   25634:	d00e      	beq.n	25654 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   25636:	4a3e      	ldr	r2, [pc, #248]	; (25730 <nm_spi_write+0x188>)
   25638:	4937      	ldr	r1, [pc, #220]	; (25718 <nm_spi_write+0x170>)
   2563a:	4b38      	ldr	r3, [pc, #224]	; (2571c <nm_spi_write+0x174>)
   2563c:	0018      	movs	r0, r3
   2563e:	4b38      	ldr	r3, [pc, #224]	; (25720 <nm_spi_write+0x178>)
   25640:	4798      	blx	r3
   25642:	4b3c      	ldr	r3, [pc, #240]	; (25734 <nm_spi_write+0x18c>)
   25644:	0018      	movs	r0, r3
   25646:	4b36      	ldr	r3, [pc, #216]	; (25720 <nm_spi_write+0x178>)
   25648:	4798      	blx	r3
   2564a:	4b37      	ldr	r3, [pc, #220]	; (25728 <nm_spi_write+0x180>)
   2564c:	0018      	movs	r0, r3
   2564e:	4b34      	ldr	r3, [pc, #208]	; (25720 <nm_spi_write+0x178>)
   25650:	4798      	blx	r3
		goto _FAIL_;
   25652:	e01e      	b.n	25692 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   25654:	2317      	movs	r3, #23
   25656:	18fc      	adds	r4, r7, r3
   25658:	2315      	movs	r3, #21
   2565a:	18fb      	adds	r3, r7, r3
   2565c:	781b      	ldrb	r3, [r3, #0]
   2565e:	0018      	movs	r0, r3
   25660:	4b35      	ldr	r3, [pc, #212]	; (25738 <nm_spi_write+0x190>)
   25662:	4798      	blx	r3
   25664:	0003      	movs	r3, r0
   25666:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   25668:	2317      	movs	r3, #23
   2566a:	18fb      	adds	r3, r7, r3
   2566c:	781b      	ldrb	r3, [r3, #0]
   2566e:	b25b      	sxtb	r3, r3
   25670:	2b01      	cmp	r3, #1
   25672:	d00e      	beq.n	25692 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   25674:	4a31      	ldr	r2, [pc, #196]	; (2573c <nm_spi_write+0x194>)
   25676:	4928      	ldr	r1, [pc, #160]	; (25718 <nm_spi_write+0x170>)
   25678:	4b28      	ldr	r3, [pc, #160]	; (2571c <nm_spi_write+0x174>)
   2567a:	0018      	movs	r0, r3
   2567c:	4b28      	ldr	r3, [pc, #160]	; (25720 <nm_spi_write+0x178>)
   2567e:	4798      	blx	r3
   25680:	4b2c      	ldr	r3, [pc, #176]	; (25734 <nm_spi_write+0x18c>)
   25682:	0018      	movs	r0, r3
   25684:	4b26      	ldr	r3, [pc, #152]	; (25720 <nm_spi_write+0x178>)
   25686:	4798      	blx	r3
   25688:	4b27      	ldr	r3, [pc, #156]	; (25728 <nm_spi_write+0x180>)
   2568a:	0018      	movs	r0, r3
   2568c:	4b24      	ldr	r3, [pc, #144]	; (25720 <nm_spi_write+0x178>)
   2568e:	4798      	blx	r3
		goto _FAIL_;
   25690:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   25692:	2317      	movs	r3, #23
   25694:	18fb      	adds	r3, r7, r3
   25696:	781b      	ldrb	r3, [r3, #0]
   25698:	b25b      	sxtb	r3, r3
   2569a:	2b01      	cmp	r3, #1
   2569c:	d030      	beq.n	25700 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   2569e:	2001      	movs	r0, #1
   256a0:	4b27      	ldr	r3, [pc, #156]	; (25740 <nm_spi_write+0x198>)
   256a2:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   256a4:	2300      	movs	r3, #0
   256a6:	9300      	str	r3, [sp, #0]
   256a8:	2300      	movs	r3, #0
   256aa:	2200      	movs	r2, #0
   256ac:	2100      	movs	r1, #0
   256ae:	20cf      	movs	r0, #207	; 0xcf
   256b0:	4c24      	ldr	r4, [pc, #144]	; (25744 <nm_spi_write+0x19c>)
   256b2:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   256b4:	20cf      	movs	r0, #207	; 0xcf
   256b6:	4b24      	ldr	r3, [pc, #144]	; (25748 <nm_spi_write+0x1a0>)
   256b8:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   256ba:	4a24      	ldr	r2, [pc, #144]	; (2574c <nm_spi_write+0x1a4>)
   256bc:	4916      	ldr	r1, [pc, #88]	; (25718 <nm_spi_write+0x170>)
   256be:	4b17      	ldr	r3, [pc, #92]	; (2571c <nm_spi_write+0x174>)
   256c0:	0018      	movs	r0, r3
   256c2:	4b17      	ldr	r3, [pc, #92]	; (25720 <nm_spi_write+0x178>)
   256c4:	4798      	blx	r3
   256c6:	2316      	movs	r3, #22
   256c8:	18fb      	adds	r3, r7, r3
   256ca:	7819      	ldrb	r1, [r3, #0]
   256cc:	1dbb      	adds	r3, r7, #6
   256ce:	881b      	ldrh	r3, [r3, #0]
   256d0:	68fa      	ldr	r2, [r7, #12]
   256d2:	481f      	ldr	r0, [pc, #124]	; (25750 <nm_spi_write+0x1a8>)
   256d4:	4c12      	ldr	r4, [pc, #72]	; (25720 <nm_spi_write+0x178>)
   256d6:	47a0      	blx	r4
   256d8:	4b13      	ldr	r3, [pc, #76]	; (25728 <nm_spi_write+0x180>)
   256da:	0018      	movs	r0, r3
   256dc:	4b10      	ldr	r3, [pc, #64]	; (25720 <nm_spi_write+0x178>)
   256de:	4798      	blx	r3
		nm_bsp_sleep(1);
   256e0:	2001      	movs	r0, #1
   256e2:	4b17      	ldr	r3, [pc, #92]	; (25740 <nm_spi_write+0x198>)
   256e4:	4798      	blx	r3
		retry--;
   256e6:	2316      	movs	r3, #22
   256e8:	18fb      	adds	r3, r7, r3
   256ea:	781a      	ldrb	r2, [r3, #0]
   256ec:	2316      	movs	r3, #22
   256ee:	18fb      	adds	r3, r7, r3
   256f0:	3a01      	subs	r2, #1
   256f2:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   256f4:	2316      	movs	r3, #22
   256f6:	18fb      	adds	r3, r7, r3
   256f8:	781b      	ldrb	r3, [r3, #0]
   256fa:	2b00      	cmp	r3, #0
   256fc:	d000      	beq.n	25700 <nm_spi_write+0x158>
   256fe:	e762      	b.n	255c6 <nm_spi_write+0x1e>
	}


	return result;
   25700:	2317      	movs	r3, #23
   25702:	18fb      	adds	r3, r7, r3
   25704:	781b      	ldrb	r3, [r3, #0]
   25706:	b25b      	sxtb	r3, r3
}
   25708:	0018      	movs	r0, r3
   2570a:	46bd      	mov	sp, r7
   2570c:	b007      	add	sp, #28
   2570e:	bd90      	pop	{r4, r7, pc}
   25710:	00024991 	.word	0x00024991
   25714:	000003cf 	.word	0x000003cf
   25718:	0003b210 	.word	0x0003b210
   2571c:	0003abc8 	.word	0x0003abc8
   25720:	0001ee19 	.word	0x0001ee19
   25724:	0003af7c 	.word	0x0003af7c
   25728:	0003ac08 	.word	0x0003ac08
   2572c:	00025285 	.word	0x00025285
   25730:	000003d9 	.word	0x000003d9
   25734:	0003afac 	.word	0x0003afac
   25738:	00024755 	.word	0x00024755
   2573c:	000003e1 	.word	0x000003e1
   25740:	000212d1 	.word	0x000212d1
   25744:	00024415 	.word	0x00024415
   25748:	00024855 	.word	0x00024855
   2574c:	000003eb 	.word	0x000003eb
   25750:	0003afd4 	.word	0x0003afd4

00025754 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   25754:	b590      	push	{r4, r7, lr}
   25756:	b087      	sub	sp, #28
   25758:	af02      	add	r7, sp, #8
   2575a:	6078      	str	r0, [r7, #4]
   2575c:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   2575e:	230f      	movs	r3, #15
   25760:	18fb      	adds	r3, r7, r3
   25762:	220a      	movs	r2, #10
   25764:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   25766:	230c      	movs	r3, #12
   25768:	18fb      	adds	r3, r7, r3
   2576a:	2201      	movs	r2, #1
   2576c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   2576e:	230e      	movs	r3, #14
   25770:	18fb      	adds	r3, r7, r3
   25772:	22ca      	movs	r2, #202	; 0xca
   25774:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   25776:	230d      	movs	r3, #13
   25778:	18fb      	adds	r3, r7, r3
   2577a:	2200      	movs	r2, #0
   2577c:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   2577e:	687b      	ldr	r3, [r7, #4]
   25780:	2bff      	cmp	r3, #255	; 0xff
   25782:	d808      	bhi.n	25796 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   25784:	230e      	movs	r3, #14
   25786:	18fb      	adds	r3, r7, r3
   25788:	22c4      	movs	r2, #196	; 0xc4
   2578a:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   2578c:	230d      	movs	r3, #13
   2578e:	18fb      	adds	r3, r7, r3
   25790:	2201      	movs	r2, #1
   25792:	701a      	strb	r2, [r3, #0]
   25794:	e007      	b.n	257a6 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   25796:	230e      	movs	r3, #14
   25798:	18fb      	adds	r3, r7, r3
   2579a:	22ca      	movs	r2, #202	; 0xca
   2579c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   2579e:	230d      	movs	r3, #13
   257a0:	18fb      	adds	r3, r7, r3
   257a2:	2200      	movs	r2, #0
   257a4:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   257a6:	2308      	movs	r3, #8
   257a8:	18fa      	adds	r2, r7, r3
   257aa:	6879      	ldr	r1, [r7, #4]
   257ac:	230e      	movs	r3, #14
   257ae:	18fb      	adds	r3, r7, r3
   257b0:	7818      	ldrb	r0, [r3, #0]
   257b2:	230d      	movs	r3, #13
   257b4:	18fb      	adds	r3, r7, r3
   257b6:	781b      	ldrb	r3, [r3, #0]
   257b8:	9300      	str	r3, [sp, #0]
   257ba:	2304      	movs	r3, #4
   257bc:	4c37      	ldr	r4, [pc, #220]	; (2589c <spi_read_reg+0x148>)
   257be:	47a0      	blx	r4
   257c0:	0002      	movs	r2, r0
   257c2:	230c      	movs	r3, #12
   257c4:	18fb      	adds	r3, r7, r3
   257c6:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   257c8:	230c      	movs	r3, #12
   257ca:	18fb      	adds	r3, r7, r3
   257cc:	781b      	ldrb	r3, [r3, #0]
   257ce:	b25b      	sxtb	r3, r3
   257d0:	2b01      	cmp	r3, #1
   257d2:	d010      	beq.n	257f6 <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   257d4:	4a32      	ldr	r2, [pc, #200]	; (258a0 <spi_read_reg+0x14c>)
   257d6:	4933      	ldr	r1, [pc, #204]	; (258a4 <spi_read_reg+0x150>)
   257d8:	4b33      	ldr	r3, [pc, #204]	; (258a8 <spi_read_reg+0x154>)
   257da:	0018      	movs	r0, r3
   257dc:	4b33      	ldr	r3, [pc, #204]	; (258ac <spi_read_reg+0x158>)
   257de:	4798      	blx	r3
   257e0:	687a      	ldr	r2, [r7, #4]
   257e2:	4b33      	ldr	r3, [pc, #204]	; (258b0 <spi_read_reg+0x15c>)
   257e4:	0011      	movs	r1, r2
   257e6:	0018      	movs	r0, r3
   257e8:	4b30      	ldr	r3, [pc, #192]	; (258ac <spi_read_reg+0x158>)
   257ea:	4798      	blx	r3
   257ec:	4b31      	ldr	r3, [pc, #196]	; (258b4 <spi_read_reg+0x160>)
   257ee:	0018      	movs	r0, r3
   257f0:	4b2e      	ldr	r3, [pc, #184]	; (258ac <spi_read_reg+0x158>)
   257f2:	4798      	blx	r3
		goto _FAIL_;
   257f4:	e014      	b.n	25820 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   257f6:	2308      	movs	r3, #8
   257f8:	18fb      	adds	r3, r7, r3
   257fa:	781b      	ldrb	r3, [r3, #0]
   257fc:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   257fe:	2308      	movs	r3, #8
   25800:	18fb      	adds	r3, r7, r3
   25802:	785b      	ldrb	r3, [r3, #1]
   25804:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   25806:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   25808:	2308      	movs	r3, #8
   2580a:	18fb      	adds	r3, r7, r3
   2580c:	789b      	ldrb	r3, [r3, #2]
   2580e:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   25810:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   25812:	2308      	movs	r3, #8
   25814:	18fb      	adds	r3, r7, r3
   25816:	78db      	ldrb	r3, [r3, #3]
   25818:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   2581a:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   2581c:	683b      	ldr	r3, [r7, #0]
   2581e:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   25820:	230c      	movs	r3, #12
   25822:	18fb      	adds	r3, r7, r3
   25824:	781b      	ldrb	r3, [r3, #0]
   25826:	b25b      	sxtb	r3, r3
   25828:	2b01      	cmp	r3, #1
   2582a:	d02f      	beq.n	2588c <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   2582c:	2001      	movs	r0, #1
   2582e:	4b22      	ldr	r3, [pc, #136]	; (258b8 <spi_read_reg+0x164>)
   25830:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   25832:	2300      	movs	r3, #0
   25834:	9300      	str	r3, [sp, #0]
   25836:	2300      	movs	r3, #0
   25838:	2200      	movs	r2, #0
   2583a:	2100      	movs	r1, #0
   2583c:	20cf      	movs	r0, #207	; 0xcf
   2583e:	4c1f      	ldr	r4, [pc, #124]	; (258bc <spi_read_reg+0x168>)
   25840:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   25842:	20cf      	movs	r0, #207	; 0xcf
   25844:	4b1e      	ldr	r3, [pc, #120]	; (258c0 <spi_read_reg+0x16c>)
   25846:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   25848:	4a1e      	ldr	r2, [pc, #120]	; (258c4 <spi_read_reg+0x170>)
   2584a:	4916      	ldr	r1, [pc, #88]	; (258a4 <spi_read_reg+0x150>)
   2584c:	4b16      	ldr	r3, [pc, #88]	; (258a8 <spi_read_reg+0x154>)
   2584e:	0018      	movs	r0, r3
   25850:	4b16      	ldr	r3, [pc, #88]	; (258ac <spi_read_reg+0x158>)
   25852:	4798      	blx	r3
   25854:	230f      	movs	r3, #15
   25856:	18fb      	adds	r3, r7, r3
   25858:	7819      	ldrb	r1, [r3, #0]
   2585a:	687a      	ldr	r2, [r7, #4]
   2585c:	4b1a      	ldr	r3, [pc, #104]	; (258c8 <spi_read_reg+0x174>)
   2585e:	0018      	movs	r0, r3
   25860:	4b12      	ldr	r3, [pc, #72]	; (258ac <spi_read_reg+0x158>)
   25862:	4798      	blx	r3
   25864:	4b13      	ldr	r3, [pc, #76]	; (258b4 <spi_read_reg+0x160>)
   25866:	0018      	movs	r0, r3
   25868:	4b10      	ldr	r3, [pc, #64]	; (258ac <spi_read_reg+0x158>)
   2586a:	4798      	blx	r3
		nm_bsp_sleep(1);
   2586c:	2001      	movs	r0, #1
   2586e:	4b12      	ldr	r3, [pc, #72]	; (258b8 <spi_read_reg+0x164>)
   25870:	4798      	blx	r3
		retry--;
   25872:	230f      	movs	r3, #15
   25874:	18fb      	adds	r3, r7, r3
   25876:	781a      	ldrb	r2, [r3, #0]
   25878:	230f      	movs	r3, #15
   2587a:	18fb      	adds	r3, r7, r3
   2587c:	3a01      	subs	r2, #1
   2587e:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   25880:	230f      	movs	r3, #15
   25882:	18fb      	adds	r3, r7, r3
   25884:	781b      	ldrb	r3, [r3, #0]
   25886:	2b00      	cmp	r3, #0
   25888:	d000      	beq.n	2588c <spi_read_reg+0x138>
   2588a:	e778      	b.n	2577e <spi_read_reg+0x2a>
	}
		
	return result;
   2588c:	230c      	movs	r3, #12
   2588e:	18fb      	adds	r3, r7, r3
   25890:	781b      	ldrb	r3, [r3, #0]
   25892:	b25b      	sxtb	r3, r3
}
   25894:	0018      	movs	r0, r3
   25896:	46bd      	mov	sp, r7
   25898:	b005      	add	sp, #20
   2589a:	bd90      	pop	{r4, r7, pc}
   2589c:	00024991 	.word	0x00024991
   258a0:	00000423 	.word	0x00000423
   258a4:	0003b220 	.word	0x0003b220
   258a8:	0003abc8 	.word	0x0003abc8
   258ac:	0001ee19 	.word	0x0001ee19
   258b0:	0003aff0 	.word	0x0003aff0
   258b4:	0003ac08 	.word	0x0003ac08
   258b8:	000212d1 	.word	0x000212d1
   258bc:	00024415 	.word	0x00024415
   258c0:	00024855 	.word	0x00024855
   258c4:	00000435 	.word	0x00000435
   258c8:	0003b01c 	.word	0x0003b01c

000258cc <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   258cc:	b590      	push	{r4, r7, lr}
   258ce:	b089      	sub	sp, #36	; 0x24
   258d0:	af02      	add	r7, sp, #8
   258d2:	60f8      	str	r0, [r7, #12]
   258d4:	60b9      	str	r1, [r7, #8]
   258d6:	1dbb      	adds	r3, r7, #6
   258d8:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   258da:	2316      	movs	r3, #22
   258dc:	18fb      	adds	r3, r7, r3
   258de:	22c8      	movs	r2, #200	; 0xc8
   258e0:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   258e2:	2317      	movs	r3, #23
   258e4:	18fb      	adds	r3, r7, r3
   258e6:	220a      	movs	r2, #10
   258e8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   258ea:	1dbb      	adds	r3, r7, #6
   258ec:	881c      	ldrh	r4, [r3, #0]
   258ee:	68ba      	ldr	r2, [r7, #8]
   258f0:	68f9      	ldr	r1, [r7, #12]
   258f2:	2316      	movs	r3, #22
   258f4:	18fb      	adds	r3, r7, r3
   258f6:	7818      	ldrb	r0, [r3, #0]
   258f8:	2300      	movs	r3, #0
   258fa:	9300      	str	r3, [sp, #0]
   258fc:	0023      	movs	r3, r4
   258fe:	4c2e      	ldr	r4, [pc, #184]	; (259b8 <nm_spi_read+0xec>)
   25900:	47a0      	blx	r4
   25902:	0002      	movs	r2, r0
   25904:	2315      	movs	r3, #21
   25906:	18fb      	adds	r3, r7, r3
   25908:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2590a:	2315      	movs	r3, #21
   2590c:	18fb      	adds	r3, r7, r3
   2590e:	781b      	ldrb	r3, [r3, #0]
   25910:	b25b      	sxtb	r3, r3
   25912:	2b01      	cmp	r3, #1
   25914:	d010      	beq.n	25938 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   25916:	4a29      	ldr	r2, [pc, #164]	; (259bc <nm_spi_read+0xf0>)
   25918:	4929      	ldr	r1, [pc, #164]	; (259c0 <nm_spi_read+0xf4>)
   2591a:	4b2a      	ldr	r3, [pc, #168]	; (259c4 <nm_spi_read+0xf8>)
   2591c:	0018      	movs	r0, r3
   2591e:	4b2a      	ldr	r3, [pc, #168]	; (259c8 <nm_spi_read+0xfc>)
   25920:	4798      	blx	r3
   25922:	68fa      	ldr	r2, [r7, #12]
   25924:	4b29      	ldr	r3, [pc, #164]	; (259cc <nm_spi_read+0x100>)
   25926:	0011      	movs	r1, r2
   25928:	0018      	movs	r0, r3
   2592a:	4b27      	ldr	r3, [pc, #156]	; (259c8 <nm_spi_read+0xfc>)
   2592c:	4798      	blx	r3
   2592e:	4b28      	ldr	r3, [pc, #160]	; (259d0 <nm_spi_read+0x104>)
   25930:	0018      	movs	r0, r3
   25932:	4b25      	ldr	r3, [pc, #148]	; (259c8 <nm_spi_read+0xfc>)
   25934:	4798      	blx	r3
		goto _FAIL_;
   25936:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   25938:	2315      	movs	r3, #21
   2593a:	18fb      	adds	r3, r7, r3
   2593c:	781b      	ldrb	r3, [r3, #0]
   2593e:	b25b      	sxtb	r3, r3
   25940:	2b01      	cmp	r3, #1
   25942:	d030      	beq.n	259a6 <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   25944:	2001      	movs	r0, #1
   25946:	4b23      	ldr	r3, [pc, #140]	; (259d4 <nm_spi_read+0x108>)
   25948:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   2594a:	2300      	movs	r3, #0
   2594c:	9300      	str	r3, [sp, #0]
   2594e:	2300      	movs	r3, #0
   25950:	2200      	movs	r2, #0
   25952:	2100      	movs	r1, #0
   25954:	20cf      	movs	r0, #207	; 0xcf
   25956:	4c20      	ldr	r4, [pc, #128]	; (259d8 <nm_spi_read+0x10c>)
   25958:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   2595a:	20cf      	movs	r0, #207	; 0xcf
   2595c:	4b1f      	ldr	r3, [pc, #124]	; (259dc <nm_spi_read+0x110>)
   2595e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   25960:	4a1f      	ldr	r2, [pc, #124]	; (259e0 <nm_spi_read+0x114>)
   25962:	4917      	ldr	r1, [pc, #92]	; (259c0 <nm_spi_read+0xf4>)
   25964:	4b17      	ldr	r3, [pc, #92]	; (259c4 <nm_spi_read+0xf8>)
   25966:	0018      	movs	r0, r3
   25968:	4b17      	ldr	r3, [pc, #92]	; (259c8 <nm_spi_read+0xfc>)
   2596a:	4798      	blx	r3
   2596c:	2317      	movs	r3, #23
   2596e:	18fb      	adds	r3, r7, r3
   25970:	7819      	ldrb	r1, [r3, #0]
   25972:	1dbb      	adds	r3, r7, #6
   25974:	881b      	ldrh	r3, [r3, #0]
   25976:	68fa      	ldr	r2, [r7, #12]
   25978:	481a      	ldr	r0, [pc, #104]	; (259e4 <nm_spi_read+0x118>)
   2597a:	4c13      	ldr	r4, [pc, #76]	; (259c8 <nm_spi_read+0xfc>)
   2597c:	47a0      	blx	r4
   2597e:	4b14      	ldr	r3, [pc, #80]	; (259d0 <nm_spi_read+0x104>)
   25980:	0018      	movs	r0, r3
   25982:	4b11      	ldr	r3, [pc, #68]	; (259c8 <nm_spi_read+0xfc>)
   25984:	4798      	blx	r3
		nm_bsp_sleep(1);
   25986:	2001      	movs	r0, #1
   25988:	4b12      	ldr	r3, [pc, #72]	; (259d4 <nm_spi_read+0x108>)
   2598a:	4798      	blx	r3
		retry--;
   2598c:	2317      	movs	r3, #23
   2598e:	18fb      	adds	r3, r7, r3
   25990:	781a      	ldrb	r2, [r3, #0]
   25992:	2317      	movs	r3, #23
   25994:	18fb      	adds	r3, r7, r3
   25996:	3a01      	subs	r2, #1
   25998:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   2599a:	2317      	movs	r3, #23
   2599c:	18fb      	adds	r3, r7, r3
   2599e:	781b      	ldrb	r3, [r3, #0]
   259a0:	2b00      	cmp	r3, #0
   259a2:	d000      	beq.n	259a6 <nm_spi_read+0xda>
   259a4:	e7a1      	b.n	258ea <nm_spi_read+0x1e>
	}

	return result;
   259a6:	2315      	movs	r3, #21
   259a8:	18fb      	adds	r3, r7, r3
   259aa:	781b      	ldrb	r3, [r3, #0]
   259ac:	b25b      	sxtb	r3, r3
}
   259ae:	0018      	movs	r0, r3
   259b0:	46bd      	mov	sp, r7
   259b2:	b007      	add	sp, #28
   259b4:	bd90      	pop	{r4, r7, pc}
   259b6:	46c0      	nop			; (mov r8, r8)
   259b8:	00024991 	.word	0x00024991
   259bc:	00000472 	.word	0x00000472
   259c0:	0003b230 	.word	0x0003b230
   259c4:	0003abc8 	.word	0x0003abc8
   259c8:	0001ee19 	.word	0x0001ee19
   259cc:	0003b034 	.word	0x0003b034
   259d0:	0003ac08 	.word	0x0003ac08
   259d4:	000212d1 	.word	0x000212d1
   259d8:	00024415 	.word	0x00024415
   259dc:	00024855 	.word	0x00024855
   259e0:	0000047d 	.word	0x0000047d
   259e4:	0003afd4 	.word	0x0003afd4

000259e8 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   259e8:	b580      	push	{r7, lr}
   259ea:	b082      	sub	sp, #8
   259ec:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   259ee:	4b0c      	ldr	r3, [pc, #48]	; (25a20 <spi_init_pkt_sz+0x38>)
   259f0:	0018      	movs	r0, r3
   259f2:	4b0c      	ldr	r3, [pc, #48]	; (25a24 <spi_init_pkt_sz+0x3c>)
   259f4:	4798      	blx	r3
   259f6:	0003      	movs	r3, r0
   259f8:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   259fa:	687b      	ldr	r3, [r7, #4]
   259fc:	2270      	movs	r2, #112	; 0x70
   259fe:	4393      	bics	r3, r2
   25a00:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   25a02:	687b      	ldr	r3, [r7, #4]
   25a04:	2250      	movs	r2, #80	; 0x50
   25a06:	4313      	orrs	r3, r2
   25a08:	607b      	str	r3, [r7, #4]
   25a0a:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   25a0c:	687b      	ldr	r3, [r7, #4]
   25a0e:	4a04      	ldr	r2, [pc, #16]	; (25a20 <spi_init_pkt_sz+0x38>)
   25a10:	0019      	movs	r1, r3
   25a12:	0010      	movs	r0, r2
   25a14:	4b04      	ldr	r3, [pc, #16]	; (25a28 <spi_init_pkt_sz+0x40>)
   25a16:	4798      	blx	r3
}
   25a18:	46c0      	nop			; (mov r8, r8)
   25a1a:	46bd      	mov	sp, r7
   25a1c:	b002      	add	sp, #8
   25a1e:	bd80      	pop	{r7, pc}
   25a20:	0000e824 	.word	0x0000e824
   25a24:	00025bc1 	.word	0x00025bc1
   25a28:	00025c35 	.word	0x00025c35

00025a2c <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   25a2c:	b590      	push	{r4, r7, lr}
   25a2e:	b083      	sub	sp, #12
   25a30:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   25a32:	2300      	movs	r3, #0
   25a34:	9300      	str	r3, [sp, #0]
   25a36:	2300      	movs	r3, #0
   25a38:	2200      	movs	r2, #0
   25a3a:	2100      	movs	r1, #0
   25a3c:	20cf      	movs	r0, #207	; 0xcf
   25a3e:	4c05      	ldr	r4, [pc, #20]	; (25a54 <nm_spi_reset+0x28>)
   25a40:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   25a42:	20cf      	movs	r0, #207	; 0xcf
   25a44:	4b04      	ldr	r3, [pc, #16]	; (25a58 <nm_spi_reset+0x2c>)
   25a46:	4798      	blx	r3
	return M2M_SUCCESS;
   25a48:	2300      	movs	r3, #0
}
   25a4a:	0018      	movs	r0, r3
   25a4c:	46bd      	mov	sp, r7
   25a4e:	b001      	add	sp, #4
   25a50:	bd90      	pop	{r4, r7, pc}
   25a52:	46c0      	nop			; (mov r8, r8)
   25a54:	00024415 	.word	0x00024415
   25a58:	00024855 	.word	0x00024855

00025a5c <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   25a5c:	b580      	push	{r7, lr}
   25a5e:	b082      	sub	sp, #8
   25a60:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   25a62:	2300      	movs	r3, #0
   25a64:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   25a66:	4b40      	ldr	r3, [pc, #256]	; (25b68 <nm_spi_init+0x10c>)
   25a68:	2200      	movs	r2, #0
   25a6a:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   25a6c:	003b      	movs	r3, r7
   25a6e:	4a3f      	ldr	r2, [pc, #252]	; (25b6c <nm_spi_init+0x110>)
   25a70:	0019      	movs	r1, r3
   25a72:	0010      	movs	r0, r2
   25a74:	4b3e      	ldr	r3, [pc, #248]	; (25b70 <nm_spi_init+0x114>)
   25a76:	4798      	blx	r3
   25a78:	1e03      	subs	r3, r0, #0
   25a7a:	d129      	bne.n	25ad0 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   25a7c:	4b3a      	ldr	r3, [pc, #232]	; (25b68 <nm_spi_init+0x10c>)
   25a7e:	2201      	movs	r2, #1
   25a80:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   25a82:	2398      	movs	r3, #152	; 0x98
   25a84:	00da      	lsls	r2, r3, #3
   25a86:	493b      	ldr	r1, [pc, #236]	; (25b74 <nm_spi_init+0x118>)
   25a88:	4b3b      	ldr	r3, [pc, #236]	; (25b78 <nm_spi_init+0x11c>)
   25a8a:	0018      	movs	r0, r3
   25a8c:	4b3b      	ldr	r3, [pc, #236]	; (25b7c <nm_spi_init+0x120>)
   25a8e:	4798      	blx	r3
   25a90:	4b3b      	ldr	r3, [pc, #236]	; (25b80 <nm_spi_init+0x124>)
   25a92:	0018      	movs	r0, r3
   25a94:	4b39      	ldr	r3, [pc, #228]	; (25b7c <nm_spi_init+0x120>)
   25a96:	4798      	blx	r3
   25a98:	4b3a      	ldr	r3, [pc, #232]	; (25b84 <nm_spi_init+0x128>)
   25a9a:	0018      	movs	r0, r3
   25a9c:	4b37      	ldr	r3, [pc, #220]	; (25b7c <nm_spi_init+0x120>)
   25a9e:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   25aa0:	003b      	movs	r3, r7
   25aa2:	4a32      	ldr	r2, [pc, #200]	; (25b6c <nm_spi_init+0x110>)
   25aa4:	0019      	movs	r1, r3
   25aa6:	0010      	movs	r0, r2
   25aa8:	4b31      	ldr	r3, [pc, #196]	; (25b70 <nm_spi_init+0x114>)
   25aaa:	4798      	blx	r3
   25aac:	1e03      	subs	r3, r0, #0
   25aae:	d10f      	bne.n	25ad0 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   25ab0:	4a35      	ldr	r2, [pc, #212]	; (25b88 <nm_spi_init+0x12c>)
   25ab2:	4930      	ldr	r1, [pc, #192]	; (25b74 <nm_spi_init+0x118>)
   25ab4:	4b30      	ldr	r3, [pc, #192]	; (25b78 <nm_spi_init+0x11c>)
   25ab6:	0018      	movs	r0, r3
   25ab8:	4b30      	ldr	r3, [pc, #192]	; (25b7c <nm_spi_init+0x120>)
   25aba:	4798      	blx	r3
   25abc:	4b33      	ldr	r3, [pc, #204]	; (25b8c <nm_spi_init+0x130>)
   25abe:	0018      	movs	r0, r3
   25ac0:	4b2e      	ldr	r3, [pc, #184]	; (25b7c <nm_spi_init+0x120>)
   25ac2:	4798      	blx	r3
   25ac4:	4b2f      	ldr	r3, [pc, #188]	; (25b84 <nm_spi_init+0x128>)
   25ac6:	0018      	movs	r0, r3
   25ac8:	4b2c      	ldr	r3, [pc, #176]	; (25b7c <nm_spi_init+0x120>)
   25aca:	4798      	blx	r3
			return 0;
   25acc:	2300      	movs	r3, #0
   25ace:	e047      	b.n	25b60 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   25ad0:	4b25      	ldr	r3, [pc, #148]	; (25b68 <nm_spi_init+0x10c>)
   25ad2:	781b      	ldrb	r3, [r3, #0]
   25ad4:	2b00      	cmp	r3, #0
   25ad6:	d126      	bne.n	25b26 <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   25ad8:	683b      	ldr	r3, [r7, #0]
   25ada:	220c      	movs	r2, #12
   25adc:	4393      	bics	r3, r2
   25ade:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   25ae0:	683b      	ldr	r3, [r7, #0]
   25ae2:	2270      	movs	r2, #112	; 0x70
   25ae4:	4393      	bics	r3, r2
   25ae6:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   25ae8:	683b      	ldr	r3, [r7, #0]
   25aea:	2250      	movs	r2, #80	; 0x50
   25aec:	4313      	orrs	r3, r2
   25aee:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   25af0:	683b      	ldr	r3, [r7, #0]
   25af2:	4a1e      	ldr	r2, [pc, #120]	; (25b6c <nm_spi_init+0x110>)
   25af4:	0019      	movs	r1, r3
   25af6:	0010      	movs	r0, r2
   25af8:	4b25      	ldr	r3, [pc, #148]	; (25b90 <nm_spi_init+0x134>)
   25afa:	4798      	blx	r3
   25afc:	1e03      	subs	r3, r0, #0
   25afe:	d10f      	bne.n	25b20 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   25b00:	4a24      	ldr	r2, [pc, #144]	; (25b94 <nm_spi_init+0x138>)
   25b02:	491c      	ldr	r1, [pc, #112]	; (25b74 <nm_spi_init+0x118>)
   25b04:	4b1c      	ldr	r3, [pc, #112]	; (25b78 <nm_spi_init+0x11c>)
   25b06:	0018      	movs	r0, r3
   25b08:	4b1c      	ldr	r3, [pc, #112]	; (25b7c <nm_spi_init+0x120>)
   25b0a:	4798      	blx	r3
   25b0c:	4b22      	ldr	r3, [pc, #136]	; (25b98 <nm_spi_init+0x13c>)
   25b0e:	0018      	movs	r0, r3
   25b10:	4b1a      	ldr	r3, [pc, #104]	; (25b7c <nm_spi_init+0x120>)
   25b12:	4798      	blx	r3
   25b14:	4b1b      	ldr	r3, [pc, #108]	; (25b84 <nm_spi_init+0x128>)
   25b16:	0018      	movs	r0, r3
   25b18:	4b18      	ldr	r3, [pc, #96]	; (25b7c <nm_spi_init+0x120>)
   25b1a:	4798      	blx	r3
			return 0;
   25b1c:	2300      	movs	r3, #0
   25b1e:	e01f      	b.n	25b60 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   25b20:	4b11      	ldr	r3, [pc, #68]	; (25b68 <nm_spi_init+0x10c>)
   25b22:	2201      	movs	r2, #1
   25b24:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   25b26:	1d3a      	adds	r2, r7, #4
   25b28:	2380      	movs	r3, #128	; 0x80
   25b2a:	015b      	lsls	r3, r3, #5
   25b2c:	0011      	movs	r1, r2
   25b2e:	0018      	movs	r0, r3
   25b30:	4b0f      	ldr	r3, [pc, #60]	; (25b70 <nm_spi_init+0x114>)
   25b32:	4798      	blx	r3
   25b34:	1e03      	subs	r3, r0, #0
   25b36:	d110      	bne.n	25b5a <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   25b38:	4a18      	ldr	r2, [pc, #96]	; (25b9c <nm_spi_init+0x140>)
   25b3a:	490e      	ldr	r1, [pc, #56]	; (25b74 <nm_spi_init+0x118>)
   25b3c:	4b0e      	ldr	r3, [pc, #56]	; (25b78 <nm_spi_init+0x11c>)
   25b3e:	0018      	movs	r0, r3
   25b40:	4b0e      	ldr	r3, [pc, #56]	; (25b7c <nm_spi_init+0x120>)
   25b42:	4798      	blx	r3
   25b44:	4b16      	ldr	r3, [pc, #88]	; (25ba0 <nm_spi_init+0x144>)
   25b46:	0018      	movs	r0, r3
   25b48:	4b0c      	ldr	r3, [pc, #48]	; (25b7c <nm_spi_init+0x120>)
   25b4a:	4798      	blx	r3
   25b4c:	4b0d      	ldr	r3, [pc, #52]	; (25b84 <nm_spi_init+0x128>)
   25b4e:	0018      	movs	r0, r3
   25b50:	4b0a      	ldr	r3, [pc, #40]	; (25b7c <nm_spi_init+0x120>)
   25b52:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   25b54:	2306      	movs	r3, #6
   25b56:	425b      	negs	r3, r3
   25b58:	e002      	b.n	25b60 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   25b5a:	4b12      	ldr	r3, [pc, #72]	; (25ba4 <nm_spi_init+0x148>)
   25b5c:	4798      	blx	r3


	return M2M_SUCCESS;
   25b5e:	2300      	movs	r3, #0
}
   25b60:	0018      	movs	r0, r3
   25b62:	46bd      	mov	sp, r7
   25b64:	b002      	add	sp, #8
   25b66:	bd80      	pop	{r7, pc}
   25b68:	200042b4 	.word	0x200042b4
   25b6c:	0000e824 	.word	0x0000e824
   25b70:	00025755 	.word	0x00025755
   25b74:	0003b23c 	.word	0x0003b23c
   25b78:	0003abc8 	.word	0x0003abc8
   25b7c:	0001ee19 	.word	0x0001ee19
   25b80:	0003b064 	.word	0x0003b064
   25b84:	0003ac08 	.word	0x0003ac08
   25b88:	000004c3 	.word	0x000004c3
   25b8c:	0003b0b4 	.word	0x0003b0b4
   25b90:	0002545d 	.word	0x0002545d
   25b94:	000004cd 	.word	0x000004cd
   25b98:	0003b0e4 	.word	0x0003b0e4
   25b9c:	000004d7 	.word	0x000004d7
   25ba0:	0003b118 	.word	0x0003b118
   25ba4:	000259e9 	.word	0x000259e9

00025ba8 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   25ba8:	b580      	push	{r7, lr}
   25baa:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   25bac:	4b03      	ldr	r3, [pc, #12]	; (25bbc <nm_spi_deinit+0x14>)
   25bae:	2200      	movs	r2, #0
   25bb0:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   25bb2:	2300      	movs	r3, #0
}
   25bb4:	0018      	movs	r0, r3
   25bb6:	46bd      	mov	sp, r7
   25bb8:	bd80      	pop	{r7, pc}
   25bba:	46c0      	nop			; (mov r8, r8)
   25bbc:	200042b4 	.word	0x200042b4

00025bc0 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   25bc0:	b580      	push	{r7, lr}
   25bc2:	b084      	sub	sp, #16
   25bc4:	af00      	add	r7, sp, #0
   25bc6:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   25bc8:	230c      	movs	r3, #12
   25bca:	18fa      	adds	r2, r7, r3
   25bcc:	687b      	ldr	r3, [r7, #4]
   25bce:	0011      	movs	r1, r2
   25bd0:	0018      	movs	r0, r3
   25bd2:	4b03      	ldr	r3, [pc, #12]	; (25be0 <nm_spi_read_reg+0x20>)
   25bd4:	4798      	blx	r3

	return u32Val;
   25bd6:	68fb      	ldr	r3, [r7, #12]
}
   25bd8:	0018      	movs	r0, r3
   25bda:	46bd      	mov	sp, r7
   25bdc:	b004      	add	sp, #16
   25bde:	bd80      	pop	{r7, pc}
   25be0:	00025755 	.word	0x00025755

00025be4 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   25be4:	b590      	push	{r4, r7, lr}
   25be6:	b085      	sub	sp, #20
   25be8:	af00      	add	r7, sp, #0
   25bea:	6078      	str	r0, [r7, #4]
   25bec:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   25bee:	230f      	movs	r3, #15
   25bf0:	18fc      	adds	r4, r7, r3
   25bf2:	683a      	ldr	r2, [r7, #0]
   25bf4:	687b      	ldr	r3, [r7, #4]
   25bf6:	0011      	movs	r1, r2
   25bf8:	0018      	movs	r0, r3
   25bfa:	4b0d      	ldr	r3, [pc, #52]	; (25c30 <nm_spi_read_reg_with_ret+0x4c>)
   25bfc:	4798      	blx	r3
   25bfe:	0003      	movs	r3, r0
   25c00:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25c02:	230f      	movs	r3, #15
   25c04:	18fb      	adds	r3, r7, r3
   25c06:	781b      	ldrb	r3, [r3, #0]
   25c08:	b25b      	sxtb	r3, r3
   25c0a:	2b01      	cmp	r3, #1
   25c0c:	d104      	bne.n	25c18 <nm_spi_read_reg_with_ret+0x34>
   25c0e:	230f      	movs	r3, #15
   25c10:	18fb      	adds	r3, r7, r3
   25c12:	2200      	movs	r2, #0
   25c14:	701a      	strb	r2, [r3, #0]
   25c16:	e003      	b.n	25c20 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   25c18:	230f      	movs	r3, #15
   25c1a:	18fb      	adds	r3, r7, r3
   25c1c:	22fa      	movs	r2, #250	; 0xfa
   25c1e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25c20:	230f      	movs	r3, #15
   25c22:	18fb      	adds	r3, r7, r3
   25c24:	781b      	ldrb	r3, [r3, #0]
   25c26:	b25b      	sxtb	r3, r3
}
   25c28:	0018      	movs	r0, r3
   25c2a:	46bd      	mov	sp, r7
   25c2c:	b005      	add	sp, #20
   25c2e:	bd90      	pop	{r4, r7, pc}
   25c30:	00025755 	.word	0x00025755

00025c34 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   25c34:	b590      	push	{r4, r7, lr}
   25c36:	b085      	sub	sp, #20
   25c38:	af00      	add	r7, sp, #0
   25c3a:	6078      	str	r0, [r7, #4]
   25c3c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   25c3e:	230f      	movs	r3, #15
   25c40:	18fc      	adds	r4, r7, r3
   25c42:	683a      	ldr	r2, [r7, #0]
   25c44:	687b      	ldr	r3, [r7, #4]
   25c46:	0011      	movs	r1, r2
   25c48:	0018      	movs	r0, r3
   25c4a:	4b0d      	ldr	r3, [pc, #52]	; (25c80 <nm_spi_write_reg+0x4c>)
   25c4c:	4798      	blx	r3
   25c4e:	0003      	movs	r3, r0
   25c50:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25c52:	230f      	movs	r3, #15
   25c54:	18fb      	adds	r3, r7, r3
   25c56:	781b      	ldrb	r3, [r3, #0]
   25c58:	b25b      	sxtb	r3, r3
   25c5a:	2b01      	cmp	r3, #1
   25c5c:	d104      	bne.n	25c68 <nm_spi_write_reg+0x34>
   25c5e:	230f      	movs	r3, #15
   25c60:	18fb      	adds	r3, r7, r3
   25c62:	2200      	movs	r2, #0
   25c64:	701a      	strb	r2, [r3, #0]
   25c66:	e003      	b.n	25c70 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   25c68:	230f      	movs	r3, #15
   25c6a:	18fb      	adds	r3, r7, r3
   25c6c:	22fa      	movs	r2, #250	; 0xfa
   25c6e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25c70:	230f      	movs	r3, #15
   25c72:	18fb      	adds	r3, r7, r3
   25c74:	781b      	ldrb	r3, [r3, #0]
   25c76:	b25b      	sxtb	r3, r3
}
   25c78:	0018      	movs	r0, r3
   25c7a:	46bd      	mov	sp, r7
   25c7c:	b005      	add	sp, #20
   25c7e:	bd90      	pop	{r4, r7, pc}
   25c80:	0002545d 	.word	0x0002545d

00025c84 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   25c84:	b590      	push	{r4, r7, lr}
   25c86:	b087      	sub	sp, #28
   25c88:	af00      	add	r7, sp, #0
   25c8a:	60f8      	str	r0, [r7, #12]
   25c8c:	60b9      	str	r1, [r7, #8]
   25c8e:	1dbb      	adds	r3, r7, #6
   25c90:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   25c92:	2317      	movs	r3, #23
   25c94:	18fc      	adds	r4, r7, r3
   25c96:	1dbb      	adds	r3, r7, #6
   25c98:	881a      	ldrh	r2, [r3, #0]
   25c9a:	68b9      	ldr	r1, [r7, #8]
   25c9c:	68fb      	ldr	r3, [r7, #12]
   25c9e:	0018      	movs	r0, r3
   25ca0:	4b0d      	ldr	r3, [pc, #52]	; (25cd8 <nm_spi_read_block+0x54>)
   25ca2:	4798      	blx	r3
   25ca4:	0003      	movs	r3, r0
   25ca6:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25ca8:	2317      	movs	r3, #23
   25caa:	18fb      	adds	r3, r7, r3
   25cac:	781b      	ldrb	r3, [r3, #0]
   25cae:	b25b      	sxtb	r3, r3
   25cb0:	2b01      	cmp	r3, #1
   25cb2:	d104      	bne.n	25cbe <nm_spi_read_block+0x3a>
   25cb4:	2317      	movs	r3, #23
   25cb6:	18fb      	adds	r3, r7, r3
   25cb8:	2200      	movs	r2, #0
   25cba:	701a      	strb	r2, [r3, #0]
   25cbc:	e003      	b.n	25cc6 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   25cbe:	2317      	movs	r3, #23
   25cc0:	18fb      	adds	r3, r7, r3
   25cc2:	22fa      	movs	r2, #250	; 0xfa
   25cc4:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25cc6:	2317      	movs	r3, #23
   25cc8:	18fb      	adds	r3, r7, r3
   25cca:	781b      	ldrb	r3, [r3, #0]
   25ccc:	b25b      	sxtb	r3, r3
}
   25cce:	0018      	movs	r0, r3
   25cd0:	46bd      	mov	sp, r7
   25cd2:	b007      	add	sp, #28
   25cd4:	bd90      	pop	{r4, r7, pc}
   25cd6:	46c0      	nop			; (mov r8, r8)
   25cd8:	000258cd 	.word	0x000258cd

00025cdc <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   25cdc:	b590      	push	{r4, r7, lr}
   25cde:	b087      	sub	sp, #28
   25ce0:	af00      	add	r7, sp, #0
   25ce2:	60f8      	str	r0, [r7, #12]
   25ce4:	60b9      	str	r1, [r7, #8]
   25ce6:	1dbb      	adds	r3, r7, #6
   25ce8:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   25cea:	2317      	movs	r3, #23
   25cec:	18fc      	adds	r4, r7, r3
   25cee:	1dbb      	adds	r3, r7, #6
   25cf0:	881a      	ldrh	r2, [r3, #0]
   25cf2:	68b9      	ldr	r1, [r7, #8]
   25cf4:	68fb      	ldr	r3, [r7, #12]
   25cf6:	0018      	movs	r0, r3
   25cf8:	4b0d      	ldr	r3, [pc, #52]	; (25d30 <nm_spi_write_block+0x54>)
   25cfa:	4798      	blx	r3
   25cfc:	0003      	movs	r3, r0
   25cfe:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25d00:	2317      	movs	r3, #23
   25d02:	18fb      	adds	r3, r7, r3
   25d04:	781b      	ldrb	r3, [r3, #0]
   25d06:	b25b      	sxtb	r3, r3
   25d08:	2b01      	cmp	r3, #1
   25d0a:	d104      	bne.n	25d16 <nm_spi_write_block+0x3a>
   25d0c:	2317      	movs	r3, #23
   25d0e:	18fb      	adds	r3, r7, r3
   25d10:	2200      	movs	r2, #0
   25d12:	701a      	strb	r2, [r3, #0]
   25d14:	e003      	b.n	25d1e <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   25d16:	2317      	movs	r3, #23
   25d18:	18fb      	adds	r3, r7, r3
   25d1a:	22fa      	movs	r2, #250	; 0xfa
   25d1c:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25d1e:	2317      	movs	r3, #23
   25d20:	18fb      	adds	r3, r7, r3
   25d22:	781b      	ldrb	r3, [r3, #0]
   25d24:	b25b      	sxtb	r3, r3
}
   25d26:	0018      	movs	r0, r3
   25d28:	46bd      	mov	sp, r7
   25d2a:	b007      	add	sp, #28
   25d2c:	bd90      	pop	{r4, r7, pc}
   25d2e:	46c0      	nop			; (mov r8, r8)
   25d30:	000255a9 	.word	0x000255a9

00025d34 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   25d34:	b590      	push	{r4, r7, lr}
   25d36:	b089      	sub	sp, #36	; 0x24
   25d38:	af00      	add	r7, sp, #0
   25d3a:	60b9      	str	r1, [r7, #8]
   25d3c:	0011      	movs	r1, r2
   25d3e:	607b      	str	r3, [r7, #4]
   25d40:	230f      	movs	r3, #15
   25d42:	18fb      	adds	r3, r7, r3
   25d44:	1c02      	adds	r2, r0, #0
   25d46:	701a      	strb	r2, [r3, #0]
   25d48:	230e      	movs	r3, #14
   25d4a:	18fb      	adds	r3, r7, r3
   25d4c:	1c0a      	adds	r2, r1, #0
   25d4e:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   25d50:	2330      	movs	r3, #48	; 0x30
   25d52:	18fb      	adds	r3, r7, r3
   25d54:	881b      	ldrh	r3, [r3, #0]
   25d56:	2b00      	cmp	r3, #0
   25d58:	d100      	bne.n	25d5c <Socket_ReadSocketData+0x28>
   25d5a:	e0d7      	b.n	25f0c <Socket_ReadSocketData+0x1d8>
   25d5c:	230f      	movs	r3, #15
   25d5e:	18fb      	adds	r3, r7, r3
   25d60:	2200      	movs	r2, #0
   25d62:	569a      	ldrsb	r2, [r3, r2]
   25d64:	4b6b      	ldr	r3, [pc, #428]	; (25f14 <Socket_ReadSocketData+0x1e0>)
   25d66:	0112      	lsls	r2, r2, #4
   25d68:	58d3      	ldr	r3, [r2, r3]
   25d6a:	2b00      	cmp	r3, #0
   25d6c:	d100      	bne.n	25d70 <Socket_ReadSocketData+0x3c>
   25d6e:	e0cd      	b.n	25f0c <Socket_ReadSocketData+0x1d8>
   25d70:	230f      	movs	r3, #15
   25d72:	18fb      	adds	r3, r7, r3
   25d74:	781b      	ldrb	r3, [r3, #0]
   25d76:	b25b      	sxtb	r3, r3
   25d78:	4a66      	ldr	r2, [pc, #408]	; (25f14 <Socket_ReadSocketData+0x1e0>)
   25d7a:	011b      	lsls	r3, r3, #4
   25d7c:	18d3      	adds	r3, r2, r3
   25d7e:	3304      	adds	r3, #4
   25d80:	881b      	ldrh	r3, [r3, #0]
   25d82:	b29b      	uxth	r3, r3
   25d84:	2b00      	cmp	r3, #0
   25d86:	d100      	bne.n	25d8a <Socket_ReadSocketData+0x56>
   25d88:	e0c0      	b.n	25f0c <Socket_ReadSocketData+0x1d8>
   25d8a:	230f      	movs	r3, #15
   25d8c:	18fb      	adds	r3, r7, r3
   25d8e:	781b      	ldrb	r3, [r3, #0]
   25d90:	b25b      	sxtb	r3, r3
   25d92:	4a60      	ldr	r2, [pc, #384]	; (25f14 <Socket_ReadSocketData+0x1e0>)
   25d94:	011b      	lsls	r3, r3, #4
   25d96:	18d3      	adds	r3, r2, r3
   25d98:	330a      	adds	r3, #10
   25d9a:	781b      	ldrb	r3, [r3, #0]
   25d9c:	b2db      	uxtb	r3, r3
   25d9e:	2b01      	cmp	r3, #1
   25da0:	d000      	beq.n	25da4 <Socket_ReadSocketData+0x70>
   25da2:	e0b3      	b.n	25f0c <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   25da4:	687b      	ldr	r3, [r7, #4]
   25da6:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   25da8:	68bb      	ldr	r3, [r7, #8]
   25daa:	2230      	movs	r2, #48	; 0x30
   25dac:	18ba      	adds	r2, r7, r2
   25dae:	8812      	ldrh	r2, [r2, #0]
   25db0:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   25db2:	2319      	movs	r3, #25
   25db4:	18fb      	adds	r3, r7, r3
   25db6:	2201      	movs	r2, #1
   25db8:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   25dba:	231a      	movs	r3, #26
   25dbc:	18fb      	adds	r3, r7, r3
   25dbe:	2230      	movs	r2, #48	; 0x30
   25dc0:	18ba      	adds	r2, r7, r2
   25dc2:	8812      	ldrh	r2, [r2, #0]
   25dc4:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   25dc6:	230f      	movs	r3, #15
   25dc8:	18fb      	adds	r3, r7, r3
   25dca:	781b      	ldrb	r3, [r3, #0]
   25dcc:	b25b      	sxtb	r3, r3
   25dce:	4a51      	ldr	r2, [pc, #324]	; (25f14 <Socket_ReadSocketData+0x1e0>)
   25dd0:	011b      	lsls	r3, r3, #4
   25dd2:	18d3      	adds	r3, r2, r3
   25dd4:	3304      	adds	r3, #4
   25dd6:	881b      	ldrh	r3, [r3, #0]
   25dd8:	b29b      	uxth	r3, r3
   25dda:	221a      	movs	r2, #26
   25ddc:	18ba      	adds	r2, r7, r2
   25dde:	8812      	ldrh	r2, [r2, #0]
   25de0:	1ad3      	subs	r3, r2, r3
   25de2:	b29a      	uxth	r2, r3
   25de4:	2316      	movs	r3, #22
   25de6:	18fb      	adds	r3, r7, r3
   25de8:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   25dea:	2316      	movs	r3, #22
   25dec:	18fb      	adds	r3, r7, r3
   25dee:	2200      	movs	r2, #0
   25df0:	5e9b      	ldrsh	r3, [r3, r2]
   25df2:	2b00      	cmp	r3, #0
   25df4:	dd0f      	ble.n	25e16 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   25df6:	2319      	movs	r3, #25
   25df8:	18fb      	adds	r3, r7, r3
   25dfa:	2200      	movs	r2, #0
   25dfc:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   25dfe:	230f      	movs	r3, #15
   25e00:	18fb      	adds	r3, r7, r3
   25e02:	2200      	movs	r2, #0
   25e04:	569a      	ldrsb	r2, [r3, r2]
   25e06:	231a      	movs	r3, #26
   25e08:	18fb      	adds	r3, r7, r3
   25e0a:	4942      	ldr	r1, [pc, #264]	; (25f14 <Socket_ReadSocketData+0x1e0>)
   25e0c:	0112      	lsls	r2, r2, #4
   25e0e:	188a      	adds	r2, r1, r2
   25e10:	3204      	adds	r2, #4
   25e12:	8812      	ldrh	r2, [r2, #0]
   25e14:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   25e16:	230f      	movs	r3, #15
   25e18:	18fb      	adds	r3, r7, r3
   25e1a:	2200      	movs	r2, #0
   25e1c:	569a      	ldrsb	r2, [r3, r2]
   25e1e:	4b3d      	ldr	r3, [pc, #244]	; (25f14 <Socket_ReadSocketData+0x1e0>)
   25e20:	0112      	lsls	r2, r2, #4
   25e22:	58d1      	ldr	r1, [r2, r3]
   25e24:	2319      	movs	r3, #25
   25e26:	18fb      	adds	r3, r7, r3
   25e28:	781c      	ldrb	r4, [r3, #0]
   25e2a:	231a      	movs	r3, #26
   25e2c:	18fb      	adds	r3, r7, r3
   25e2e:	881a      	ldrh	r2, [r3, #0]
   25e30:	69f8      	ldr	r0, [r7, #28]
   25e32:	0023      	movs	r3, r4
   25e34:	4c38      	ldr	r4, [pc, #224]	; (25f18 <Socket_ReadSocketData+0x1e4>)
   25e36:	47a0      	blx	r4
   25e38:	1e03      	subs	r3, r0, #0
   25e3a:	d14f      	bne.n	25edc <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   25e3c:	230f      	movs	r3, #15
   25e3e:	18fb      	adds	r3, r7, r3
   25e40:	2200      	movs	r2, #0
   25e42:	569a      	ldrsb	r2, [r3, r2]
   25e44:	4b33      	ldr	r3, [pc, #204]	; (25f14 <Socket_ReadSocketData+0x1e0>)
   25e46:	0112      	lsls	r2, r2, #4
   25e48:	58d2      	ldr	r2, [r2, r3]
   25e4a:	68bb      	ldr	r3, [r7, #8]
   25e4c:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   25e4e:	231a      	movs	r3, #26
   25e50:	18fb      	adds	r3, r7, r3
   25e52:	2200      	movs	r2, #0
   25e54:	5e9a      	ldrsh	r2, [r3, r2]
   25e56:	68bb      	ldr	r3, [r7, #8]
   25e58:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   25e5a:	68bb      	ldr	r3, [r7, #8]
   25e5c:	88da      	ldrh	r2, [r3, #6]
   25e5e:	231a      	movs	r3, #26
   25e60:	18fb      	adds	r3, r7, r3
   25e62:	881b      	ldrh	r3, [r3, #0]
   25e64:	1ad3      	subs	r3, r2, r3
   25e66:	b29a      	uxth	r2, r3
   25e68:	68bb      	ldr	r3, [r7, #8]
   25e6a:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   25e6c:	4b2b      	ldr	r3, [pc, #172]	; (25f1c <Socket_ReadSocketData+0x1e8>)
   25e6e:	681b      	ldr	r3, [r3, #0]
   25e70:	2b00      	cmp	r3, #0
   25e72:	d00b      	beq.n	25e8c <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   25e74:	4b29      	ldr	r3, [pc, #164]	; (25f1c <Socket_ReadSocketData+0x1e8>)
   25e76:	681b      	ldr	r3, [r3, #0]
   25e78:	68bc      	ldr	r4, [r7, #8]
   25e7a:	220e      	movs	r2, #14
   25e7c:	18ba      	adds	r2, r7, r2
   25e7e:	7811      	ldrb	r1, [r2, #0]
   25e80:	220f      	movs	r2, #15
   25e82:	18ba      	adds	r2, r7, r2
   25e84:	2000      	movs	r0, #0
   25e86:	5610      	ldrsb	r0, [r2, r0]
   25e88:	0022      	movs	r2, r4
   25e8a:	4798      	blx	r3

				u16ReadCount -= u16Read;
   25e8c:	2330      	movs	r3, #48	; 0x30
   25e8e:	18f9      	adds	r1, r7, r3
   25e90:	2330      	movs	r3, #48	; 0x30
   25e92:	18fa      	adds	r2, r7, r3
   25e94:	231a      	movs	r3, #26
   25e96:	18fb      	adds	r3, r7, r3
   25e98:	8812      	ldrh	r2, [r2, #0]
   25e9a:	881b      	ldrh	r3, [r3, #0]
   25e9c:	1ad3      	subs	r3, r2, r3
   25e9e:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   25ea0:	231a      	movs	r3, #26
   25ea2:	18fb      	adds	r3, r7, r3
   25ea4:	881b      	ldrh	r3, [r3, #0]
   25ea6:	69fa      	ldr	r2, [r7, #28]
   25ea8:	18d3      	adds	r3, r2, r3
   25eaa:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   25eac:	230f      	movs	r3, #15
   25eae:	18fb      	adds	r3, r7, r3
   25eb0:	781b      	ldrb	r3, [r3, #0]
   25eb2:	b25b      	sxtb	r3, r3
   25eb4:	4a17      	ldr	r2, [pc, #92]	; (25f14 <Socket_ReadSocketData+0x1e0>)
   25eb6:	011b      	lsls	r3, r3, #4
   25eb8:	18d3      	adds	r3, r2, r3
   25eba:	330a      	adds	r3, #10
   25ebc:	781b      	ldrb	r3, [r3, #0]
   25ebe:	b2db      	uxtb	r3, r3
   25ec0:	2b00      	cmp	r3, #0
   25ec2:	d11c      	bne.n	25efe <Socket_ReadSocketData+0x1ca>
   25ec4:	2330      	movs	r3, #48	; 0x30
   25ec6:	18fb      	adds	r3, r7, r3
   25ec8:	881b      	ldrh	r3, [r3, #0]
   25eca:	2b00      	cmp	r3, #0
   25ecc:	d017      	beq.n	25efe <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   25ece:	2301      	movs	r3, #1
   25ed0:	2200      	movs	r2, #0
   25ed2:	2100      	movs	r1, #0
   25ed4:	2000      	movs	r0, #0
   25ed6:	4c10      	ldr	r4, [pc, #64]	; (25f18 <Socket_ReadSocketData+0x1e4>)
   25ed8:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   25eda:	e017      	b.n	25f0c <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   25edc:	4b10      	ldr	r3, [pc, #64]	; (25f20 <Socket_ReadSocketData+0x1ec>)
   25ede:	0018      	movs	r0, r3
   25ee0:	4b10      	ldr	r3, [pc, #64]	; (25f24 <Socket_ReadSocketData+0x1f0>)
   25ee2:	4798      	blx	r3
   25ee4:	2330      	movs	r3, #48	; 0x30
   25ee6:	18fb      	adds	r3, r7, r3
   25ee8:	881a      	ldrh	r2, [r3, #0]
   25eea:	4b0f      	ldr	r3, [pc, #60]	; (25f28 <Socket_ReadSocketData+0x1f4>)
   25eec:	0011      	movs	r1, r2
   25eee:	0018      	movs	r0, r3
   25ef0:	4b0c      	ldr	r3, [pc, #48]	; (25f24 <Socket_ReadSocketData+0x1f0>)
   25ef2:	4798      	blx	r3
   25ef4:	4b0d      	ldr	r3, [pc, #52]	; (25f2c <Socket_ReadSocketData+0x1f8>)
   25ef6:	0018      	movs	r0, r3
   25ef8:	4b0a      	ldr	r3, [pc, #40]	; (25f24 <Socket_ReadSocketData+0x1f0>)
   25efa:	4798      	blx	r3
				break;
   25efc:	e006      	b.n	25f0c <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   25efe:	2330      	movs	r3, #48	; 0x30
   25f00:	18fb      	adds	r3, r7, r3
   25f02:	881b      	ldrh	r3, [r3, #0]
   25f04:	2b00      	cmp	r3, #0
   25f06:	d000      	beq.n	25f0a <Socket_ReadSocketData+0x1d6>
   25f08:	e753      	b.n	25db2 <Socket_ReadSocketData+0x7e>
	}
}
   25f0a:	e7ff      	b.n	25f0c <Socket_ReadSocketData+0x1d8>
   25f0c:	46c0      	nop			; (mov r8, r8)
   25f0e:	46bd      	mov	sp, r7
   25f10:	b009      	add	sp, #36	; 0x24
   25f12:	bd90      	pop	{r4, r7, pc}
   25f14:	20005b98 	.word	0x20005b98
   25f18:	0002272d 	.word	0x0002272d
   25f1c:	20005c48 	.word	0x20005c48
   25f20:	0003b248 	.word	0x0003b248
   25f24:	0001ee19 	.word	0x0001ee19
   25f28:	0003b254 	.word	0x0003b254
   25f2c:	0003b268 	.word	0x0003b268

00025f30 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   25f30:	b590      	push	{r4, r7, lr}
   25f32:	b0bb      	sub	sp, #236	; 0xec
   25f34:	af02      	add	r7, sp, #8
   25f36:	603a      	str	r2, [r7, #0]
   25f38:	1dfb      	adds	r3, r7, #7
   25f3a:	1c02      	adds	r2, r0, #0
   25f3c:	701a      	strb	r2, [r3, #0]
   25f3e:	1d3b      	adds	r3, r7, #4
   25f40:	1c0a      	adds	r2, r1, #0
   25f42:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   25f44:	1dfb      	adds	r3, r7, #7
   25f46:	781b      	ldrb	r3, [r3, #0]
   25f48:	2b41      	cmp	r3, #65	; 0x41
   25f4a:	d003      	beq.n	25f54 <m2m_ip_cb+0x24>
   25f4c:	1dfb      	adds	r3, r7, #7
   25f4e:	781b      	ldrb	r3, [r3, #0]
   25f50:	2b54      	cmp	r3, #84	; 0x54
   25f52:	d120      	bne.n	25f96 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   25f54:	23cc      	movs	r3, #204	; 0xcc
   25f56:	18f9      	adds	r1, r7, r3
   25f58:	6838      	ldr	r0, [r7, #0]
   25f5a:	2300      	movs	r3, #0
   25f5c:	2204      	movs	r2, #4
   25f5e:	4c98      	ldr	r4, [pc, #608]	; (261c0 <m2m_ip_cb+0x290>)
   25f60:	47a0      	blx	r4
   25f62:	1e03      	subs	r3, r0, #0
   25f64:	d000      	beq.n	25f68 <m2m_ip_cb+0x38>
   25f66:	e275      	b.n	26454 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   25f68:	23cc      	movs	r3, #204	; 0xcc
   25f6a:	18fb      	adds	r3, r7, r3
   25f6c:	2201      	movs	r2, #1
   25f6e:	569a      	ldrsb	r2, [r3, r2]
   25f70:	23c8      	movs	r3, #200	; 0xc8
   25f72:	18fb      	adds	r3, r7, r3
   25f74:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   25f76:	4b93      	ldr	r3, [pc, #588]	; (261c4 <m2m_ip_cb+0x294>)
   25f78:	681b      	ldr	r3, [r3, #0]
   25f7a:	2b00      	cmp	r3, #0
   25f7c:	d100      	bne.n	25f80 <m2m_ip_cb+0x50>
   25f7e:	e269      	b.n	26454 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   25f80:	4b90      	ldr	r3, [pc, #576]	; (261c4 <m2m_ip_cb+0x294>)
   25f82:	681b      	ldr	r3, [r3, #0]
   25f84:	22cc      	movs	r2, #204	; 0xcc
   25f86:	18ba      	adds	r2, r7, r2
   25f88:	2000      	movs	r0, #0
   25f8a:	5610      	ldrsb	r0, [r2, r0]
   25f8c:	22c8      	movs	r2, #200	; 0xc8
   25f8e:	18ba      	adds	r2, r7, r2
   25f90:	2101      	movs	r1, #1
   25f92:	4798      	blx	r3
	{
   25f94:	e25e      	b.n	26454 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   25f96:	1dfb      	adds	r3, r7, #7
   25f98:	781b      	ldrb	r3, [r3, #0]
   25f9a:	2b42      	cmp	r3, #66	; 0x42
   25f9c:	d120      	bne.n	25fe0 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   25f9e:	23c4      	movs	r3, #196	; 0xc4
   25fa0:	18f9      	adds	r1, r7, r3
   25fa2:	6838      	ldr	r0, [r7, #0]
   25fa4:	2300      	movs	r3, #0
   25fa6:	2204      	movs	r2, #4
   25fa8:	4c85      	ldr	r4, [pc, #532]	; (261c0 <m2m_ip_cb+0x290>)
   25faa:	47a0      	blx	r4
   25fac:	1e03      	subs	r3, r0, #0
   25fae:	d000      	beq.n	25fb2 <m2m_ip_cb+0x82>
   25fb0:	e257      	b.n	26462 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   25fb2:	23c4      	movs	r3, #196	; 0xc4
   25fb4:	18fb      	adds	r3, r7, r3
   25fb6:	2201      	movs	r2, #1
   25fb8:	569a      	ldrsb	r2, [r3, r2]
   25fba:	23c0      	movs	r3, #192	; 0xc0
   25fbc:	18fb      	adds	r3, r7, r3
   25fbe:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   25fc0:	4b80      	ldr	r3, [pc, #512]	; (261c4 <m2m_ip_cb+0x294>)
   25fc2:	681b      	ldr	r3, [r3, #0]
   25fc4:	2b00      	cmp	r3, #0
   25fc6:	d100      	bne.n	25fca <m2m_ip_cb+0x9a>
   25fc8:	e24b      	b.n	26462 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   25fca:	4b7e      	ldr	r3, [pc, #504]	; (261c4 <m2m_ip_cb+0x294>)
   25fcc:	681b      	ldr	r3, [r3, #0]
   25fce:	22c4      	movs	r2, #196	; 0xc4
   25fd0:	18ba      	adds	r2, r7, r2
   25fd2:	2000      	movs	r0, #0
   25fd4:	5610      	ldrsb	r0, [r2, r0]
   25fd6:	22c0      	movs	r2, #192	; 0xc0
   25fd8:	18ba      	adds	r2, r7, r2
   25fda:	2102      	movs	r1, #2
   25fdc:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   25fde:	e240      	b.n	26462 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   25fe0:	1dfb      	adds	r3, r7, #7
   25fe2:	781b      	ldrb	r3, [r3, #0]
   25fe4:	2b43      	cmp	r3, #67	; 0x43
   25fe6:	d000      	beq.n	25fea <m2m_ip_cb+0xba>
   25fe8:	e086      	b.n	260f8 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   25fea:	23b4      	movs	r3, #180	; 0xb4
   25fec:	18f9      	adds	r1, r7, r3
   25fee:	6838      	ldr	r0, [r7, #0]
   25ff0:	2300      	movs	r3, #0
   25ff2:	220c      	movs	r2, #12
   25ff4:	4c72      	ldr	r4, [pc, #456]	; (261c0 <m2m_ip_cb+0x290>)
   25ff6:	47a0      	blx	r4
   25ff8:	1e03      	subs	r3, r0, #0
   25ffa:	d000      	beq.n	25ffe <m2m_ip_cb+0xce>
   25ffc:	e231      	b.n	26462 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   25ffe:	23b4      	movs	r3, #180	; 0xb4
   26000:	18fb      	adds	r3, r7, r3
   26002:	7a5b      	ldrb	r3, [r3, #9]
   26004:	b25b      	sxtb	r3, r3
   26006:	2b00      	cmp	r3, #0
   26008:	db4f      	blt.n	260aa <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   2600a:	23b4      	movs	r3, #180	; 0xb4
   2600c:	18fb      	adds	r3, r7, r3
   2600e:	7a5b      	ldrb	r3, [r3, #9]
   26010:	b25b      	sxtb	r3, r3
   26012:	0018      	movs	r0, r3
   26014:	23b4      	movs	r3, #180	; 0xb4
   26016:	18fb      	adds	r3, r7, r3
   26018:	7a1b      	ldrb	r3, [r3, #8]
   2601a:	b25b      	sxtb	r3, r3
   2601c:	4a6a      	ldr	r2, [pc, #424]	; (261c8 <m2m_ip_cb+0x298>)
   2601e:	011b      	lsls	r3, r3, #4
   26020:	18d3      	adds	r3, r2, r3
   26022:	330b      	adds	r3, #11
   26024:	781b      	ldrb	r3, [r3, #0]
   26026:	b2d9      	uxtb	r1, r3
   26028:	4a67      	ldr	r2, [pc, #412]	; (261c8 <m2m_ip_cb+0x298>)
   2602a:	0103      	lsls	r3, r0, #4
   2602c:	18d3      	adds	r3, r2, r3
   2602e:	330b      	adds	r3, #11
   26030:	1c0a      	adds	r2, r1, #0
   26032:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   26034:	23b4      	movs	r3, #180	; 0xb4
   26036:	18fb      	adds	r3, r7, r3
   26038:	7a5b      	ldrb	r3, [r3, #9]
   2603a:	b25b      	sxtb	r3, r3
   2603c:	4a62      	ldr	r2, [pc, #392]	; (261c8 <m2m_ip_cb+0x298>)
   2603e:	011b      	lsls	r3, r3, #4
   26040:	18d3      	adds	r3, r2, r3
   26042:	330a      	adds	r3, #10
   26044:	2201      	movs	r2, #1
   26046:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   26048:	23b4      	movs	r3, #180	; 0xb4
   2604a:	18fb      	adds	r3, r7, r3
   2604c:	7a5b      	ldrb	r3, [r3, #9]
   2604e:	b25b      	sxtb	r3, r3
   26050:	0018      	movs	r0, r3
   26052:	23b4      	movs	r3, #180	; 0xb4
   26054:	18fb      	adds	r3, r7, r3
   26056:	895b      	ldrh	r3, [r3, #10]
   26058:	3b08      	subs	r3, #8
   2605a:	b299      	uxth	r1, r3
   2605c:	4a5a      	ldr	r2, [pc, #360]	; (261c8 <m2m_ip_cb+0x298>)
   2605e:	0103      	lsls	r3, r0, #4
   26060:	18d3      	adds	r3, r2, r3
   26062:	3308      	adds	r3, #8
   26064:	1c0a      	adds	r2, r1, #0
   26066:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   26068:	4b58      	ldr	r3, [pc, #352]	; (261cc <m2m_ip_cb+0x29c>)
   2606a:	881b      	ldrh	r3, [r3, #0]
   2606c:	b29b      	uxth	r3, r3
   2606e:	3301      	adds	r3, #1
   26070:	b29a      	uxth	r2, r3
   26072:	4b56      	ldr	r3, [pc, #344]	; (261cc <m2m_ip_cb+0x29c>)
   26074:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   26076:	4b55      	ldr	r3, [pc, #340]	; (261cc <m2m_ip_cb+0x29c>)
   26078:	881b      	ldrh	r3, [r3, #0]
   2607a:	b29b      	uxth	r3, r3
   2607c:	2b00      	cmp	r3, #0
   2607e:	d106      	bne.n	2608e <m2m_ip_cb+0x15e>
					++gu16SessionID;
   26080:	4b52      	ldr	r3, [pc, #328]	; (261cc <m2m_ip_cb+0x29c>)
   26082:	881b      	ldrh	r3, [r3, #0]
   26084:	b29b      	uxth	r3, r3
   26086:	3301      	adds	r3, #1
   26088:	b29a      	uxth	r2, r3
   2608a:	4b50      	ldr	r3, [pc, #320]	; (261cc <m2m_ip_cb+0x29c>)
   2608c:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   2608e:	23b4      	movs	r3, #180	; 0xb4
   26090:	18fb      	adds	r3, r7, r3
   26092:	7a5b      	ldrb	r3, [r3, #9]
   26094:	b25b      	sxtb	r3, r3
   26096:	0018      	movs	r0, r3
   26098:	4b4c      	ldr	r3, [pc, #304]	; (261cc <m2m_ip_cb+0x29c>)
   2609a:	881b      	ldrh	r3, [r3, #0]
   2609c:	b299      	uxth	r1, r3
   2609e:	4a4a      	ldr	r2, [pc, #296]	; (261c8 <m2m_ip_cb+0x298>)
   260a0:	0103      	lsls	r3, r0, #4
   260a2:	18d3      	adds	r3, r2, r3
   260a4:	3306      	adds	r3, #6
   260a6:	1c0a      	adds	r2, r1, #0
   260a8:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   260aa:	23b4      	movs	r3, #180	; 0xb4
   260ac:	18fb      	adds	r3, r7, r3
   260ae:	2209      	movs	r2, #9
   260b0:	569a      	ldrsb	r2, [r3, r2]
   260b2:	23a0      	movs	r3, #160	; 0xa0
   260b4:	18fb      	adds	r3, r7, r3
   260b6:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   260b8:	23a0      	movs	r3, #160	; 0xa0
   260ba:	18fb      	adds	r3, r7, r3
   260bc:	2202      	movs	r2, #2
   260be:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   260c0:	23b4      	movs	r3, #180	; 0xb4
   260c2:	18fb      	adds	r3, r7, r3
   260c4:	885a      	ldrh	r2, [r3, #2]
   260c6:	23a0      	movs	r3, #160	; 0xa0
   260c8:	18fb      	adds	r3, r7, r3
   260ca:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   260cc:	23b4      	movs	r3, #180	; 0xb4
   260ce:	18fb      	adds	r3, r7, r3
   260d0:	685a      	ldr	r2, [r3, #4]
   260d2:	23a0      	movs	r3, #160	; 0xa0
   260d4:	18fb      	adds	r3, r7, r3
   260d6:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   260d8:	4b3a      	ldr	r3, [pc, #232]	; (261c4 <m2m_ip_cb+0x294>)
   260da:	681b      	ldr	r3, [r3, #0]
   260dc:	2b00      	cmp	r3, #0
   260de:	d100      	bne.n	260e2 <m2m_ip_cb+0x1b2>
   260e0:	e1bf      	b.n	26462 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   260e2:	4b38      	ldr	r3, [pc, #224]	; (261c4 <m2m_ip_cb+0x294>)
   260e4:	681b      	ldr	r3, [r3, #0]
   260e6:	22b4      	movs	r2, #180	; 0xb4
   260e8:	18ba      	adds	r2, r7, r2
   260ea:	2008      	movs	r0, #8
   260ec:	5610      	ldrsb	r0, [r2, r0]
   260ee:	22a0      	movs	r2, #160	; 0xa0
   260f0:	18ba      	adds	r2, r7, r2
   260f2:	2104      	movs	r1, #4
   260f4:	4798      	blx	r3
}
   260f6:	e1b4      	b.n	26462 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   260f8:	1dfb      	adds	r3, r7, #7
   260fa:	781b      	ldrb	r3, [r3, #0]
   260fc:	2b44      	cmp	r3, #68	; 0x44
   260fe:	d003      	beq.n	26108 <m2m_ip_cb+0x1d8>
   26100:	1dfb      	adds	r3, r7, #7
   26102:	781b      	ldrb	r3, [r3, #0]
   26104:	2b4b      	cmp	r3, #75	; 0x4b
   26106:	d13d      	bne.n	26184 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   26108:	239c      	movs	r3, #156	; 0x9c
   2610a:	18f9      	adds	r1, r7, r3
   2610c:	6838      	ldr	r0, [r7, #0]
   2610e:	2300      	movs	r3, #0
   26110:	2204      	movs	r2, #4
   26112:	4c2b      	ldr	r4, [pc, #172]	; (261c0 <m2m_ip_cb+0x290>)
   26114:	47a0      	blx	r4
   26116:	1e03      	subs	r3, r0, #0
   26118:	d000      	beq.n	2611c <m2m_ip_cb+0x1ec>
   2611a:	e19d      	b.n	26458 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   2611c:	239c      	movs	r3, #156	; 0x9c
   2611e:	18fb      	adds	r3, r7, r3
   26120:	2200      	movs	r2, #0
   26122:	569a      	ldrsb	r2, [r3, r2]
   26124:	2398      	movs	r3, #152	; 0x98
   26126:	18fb      	adds	r3, r7, r3
   26128:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   2612a:	239c      	movs	r3, #156	; 0x9c
   2612c:	18fb      	adds	r3, r7, r3
   2612e:	2201      	movs	r2, #1
   26130:	569a      	ldrsb	r2, [r3, r2]
   26132:	2398      	movs	r3, #152	; 0x98
   26134:	18fb      	adds	r3, r7, r3
   26136:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   26138:	239c      	movs	r3, #156	; 0x9c
   2613a:	18fb      	adds	r3, r7, r3
   2613c:	785b      	ldrb	r3, [r3, #1]
   2613e:	b25b      	sxtb	r3, r3
   26140:	2b00      	cmp	r3, #0
   26142:	d10f      	bne.n	26164 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   26144:	239c      	movs	r3, #156	; 0x9c
   26146:	18fb      	adds	r3, r7, r3
   26148:	781b      	ldrb	r3, [r3, #0]
   2614a:	b25b      	sxtb	r3, r3
   2614c:	0018      	movs	r0, r3
   2614e:	239c      	movs	r3, #156	; 0x9c
   26150:	18fb      	adds	r3, r7, r3
   26152:	885b      	ldrh	r3, [r3, #2]
   26154:	3b08      	subs	r3, #8
   26156:	b299      	uxth	r1, r3
   26158:	4a1b      	ldr	r2, [pc, #108]	; (261c8 <m2m_ip_cb+0x298>)
   2615a:	0103      	lsls	r3, r0, #4
   2615c:	18d3      	adds	r3, r2, r3
   2615e:	3308      	adds	r3, #8
   26160:	1c0a      	adds	r2, r1, #0
   26162:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   26164:	4b17      	ldr	r3, [pc, #92]	; (261c4 <m2m_ip_cb+0x294>)
   26166:	681b      	ldr	r3, [r3, #0]
   26168:	2b00      	cmp	r3, #0
   2616a:	d100      	bne.n	2616e <m2m_ip_cb+0x23e>
   2616c:	e174      	b.n	26458 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   2616e:	4b15      	ldr	r3, [pc, #84]	; (261c4 <m2m_ip_cb+0x294>)
   26170:	681b      	ldr	r3, [r3, #0]
   26172:	229c      	movs	r2, #156	; 0x9c
   26174:	18ba      	adds	r2, r7, r2
   26176:	2000      	movs	r0, #0
   26178:	5610      	ldrsb	r0, [r2, r0]
   2617a:	2298      	movs	r2, #152	; 0x98
   2617c:	18ba      	adds	r2, r7, r2
   2617e:	2105      	movs	r1, #5
   26180:	4798      	blx	r3
	{
   26182:	e169      	b.n	26458 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   26184:	1dfb      	adds	r3, r7, #7
   26186:	781b      	ldrb	r3, [r3, #0]
   26188:	2b4a      	cmp	r3, #74	; 0x4a
   2618a:	d123      	bne.n	261d4 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   2618c:	230c      	movs	r3, #12
   2618e:	18f9      	adds	r1, r7, r3
   26190:	6838      	ldr	r0, [r7, #0]
   26192:	2300      	movs	r3, #0
   26194:	2244      	movs	r2, #68	; 0x44
   26196:	4c0a      	ldr	r4, [pc, #40]	; (261c0 <m2m_ip_cb+0x290>)
   26198:	47a0      	blx	r4
   2619a:	1e03      	subs	r3, r0, #0
   2619c:	d000      	beq.n	261a0 <m2m_ip_cb+0x270>
   2619e:	e160      	b.n	26462 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   261a0:	4b0b      	ldr	r3, [pc, #44]	; (261d0 <m2m_ip_cb+0x2a0>)
   261a2:	681b      	ldr	r3, [r3, #0]
   261a4:	2b00      	cmp	r3, #0
   261a6:	d100      	bne.n	261aa <m2m_ip_cb+0x27a>
   261a8:	e15b      	b.n	26462 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   261aa:	4b09      	ldr	r3, [pc, #36]	; (261d0 <m2m_ip_cb+0x2a0>)
   261ac:	681a      	ldr	r2, [r3, #0]
   261ae:	230c      	movs	r3, #12
   261b0:	18fb      	adds	r3, r7, r3
   261b2:	6c19      	ldr	r1, [r3, #64]	; 0x40
   261b4:	230c      	movs	r3, #12
   261b6:	18fb      	adds	r3, r7, r3
   261b8:	0018      	movs	r0, r3
   261ba:	4790      	blx	r2
}
   261bc:	e151      	b.n	26462 <m2m_ip_cb+0x532>
   261be:	46c0      	nop			; (mov r8, r8)
   261c0:	0002272d 	.word	0x0002272d
   261c4:	20005c48 	.word	0x20005c48
   261c8:	20005b98 	.word	0x20005b98
   261cc:	200042b6 	.word	0x200042b6
   261d0:	20005c50 	.word	0x20005c50
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   261d4:	1dfb      	adds	r3, r7, #7
   261d6:	781b      	ldrb	r3, [r3, #0]
   261d8:	2b46      	cmp	r3, #70	; 0x46
   261da:	d008      	beq.n	261ee <m2m_ip_cb+0x2be>
   261dc:	1dfb      	adds	r3, r7, #7
   261de:	781b      	ldrb	r3, [r3, #0]
   261e0:	2b48      	cmp	r3, #72	; 0x48
   261e2:	d004      	beq.n	261ee <m2m_ip_cb+0x2be>
   261e4:	1dfb      	adds	r3, r7, #7
   261e6:	781b      	ldrb	r3, [r3, #0]
   261e8:	2b4d      	cmp	r3, #77	; 0x4d
   261ea:	d000      	beq.n	261ee <m2m_ip_cb+0x2be>
   261ec:	e0b4      	b.n	26358 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   261ee:	23df      	movs	r3, #223	; 0xdf
   261f0:	18fb      	adds	r3, r7, r3
   261f2:	2206      	movs	r2, #6
   261f4:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   261f6:	1dfb      	adds	r3, r7, #7
   261f8:	781b      	ldrb	r3, [r3, #0]
   261fa:	2b48      	cmp	r3, #72	; 0x48
   261fc:	d103      	bne.n	26206 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   261fe:	23df      	movs	r3, #223	; 0xdf
   26200:	18fb      	adds	r3, r7, r3
   26202:	2209      	movs	r2, #9
   26204:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   26206:	23d8      	movs	r3, #216	; 0xd8
   26208:	18fb      	adds	r3, r7, r3
   2620a:	2210      	movs	r2, #16
   2620c:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   2620e:	23d8      	movs	r3, #216	; 0xd8
   26210:	18fb      	adds	r3, r7, r3
   26212:	881a      	ldrh	r2, [r3, #0]
   26214:	2388      	movs	r3, #136	; 0x88
   26216:	18f9      	adds	r1, r7, r3
   26218:	6838      	ldr	r0, [r7, #0]
   2621a:	2300      	movs	r3, #0
   2621c:	4c93      	ldr	r4, [pc, #588]	; (2646c <m2m_ip_cb+0x53c>)
   2621e:	47a0      	blx	r4
   26220:	1e03      	subs	r3, r0, #0
   26222:	d000      	beq.n	26226 <m2m_ip_cb+0x2f6>
   26224:	e11a      	b.n	2645c <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   26226:	23d6      	movs	r3, #214	; 0xd6
   26228:	18fb      	adds	r3, r7, r3
   2622a:	2200      	movs	r2, #0
   2622c:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   2622e:	23d5      	movs	r3, #213	; 0xd5
   26230:	18fb      	adds	r3, r7, r3
   26232:	2288      	movs	r2, #136	; 0x88
   26234:	18ba      	adds	r2, r7, r2
   26236:	7b12      	ldrb	r2, [r2, #12]
   26238:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   2623a:	23d6      	movs	r3, #214	; 0xd6
   2623c:	18fb      	adds	r3, r7, r3
   2623e:	2288      	movs	r2, #136	; 0x88
   26240:	18ba      	adds	r2, r7, r2
   26242:	89d2      	ldrh	r2, [r2, #14]
   26244:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   26246:	23d5      	movs	r3, #213	; 0xd5
   26248:	18fb      	adds	r3, r7, r3
   2624a:	781b      	ldrb	r3, [r3, #0]
   2624c:	b25b      	sxtb	r3, r3
   2624e:	4a88      	ldr	r2, [pc, #544]	; (26470 <m2m_ip_cb+0x540>)
   26250:	011b      	lsls	r3, r3, #4
   26252:	18d3      	adds	r3, r2, r3
   26254:	330c      	adds	r3, #12
   26256:	2200      	movs	r2, #0
   26258:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   2625a:	23d2      	movs	r3, #210	; 0xd2
   2625c:	18fb      	adds	r3, r7, r3
   2625e:	2288      	movs	r2, #136	; 0x88
   26260:	18ba      	adds	r2, r7, r2
   26262:	8912      	ldrh	r2, [r2, #8]
   26264:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   26266:	23d0      	movs	r3, #208	; 0xd0
   26268:	18fb      	adds	r3, r7, r3
   2626a:	2288      	movs	r2, #136	; 0x88
   2626c:	18ba      	adds	r2, r7, r2
   2626e:	8952      	ldrh	r2, [r2, #10]
   26270:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   26272:	2388      	movs	r3, #136	; 0x88
   26274:	18fb      	adds	r3, r7, r3
   26276:	885a      	ldrh	r2, [r3, #2]
   26278:	2370      	movs	r3, #112	; 0x70
   2627a:	18fb      	adds	r3, r7, r3
   2627c:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   2627e:	2388      	movs	r3, #136	; 0x88
   26280:	18fb      	adds	r3, r7, r3
   26282:	685a      	ldr	r2, [r3, #4]
   26284:	2370      	movs	r3, #112	; 0x70
   26286:	18fb      	adds	r3, r7, r3
   26288:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   2628a:	23d5      	movs	r3, #213	; 0xd5
   2628c:	18fb      	adds	r3, r7, r3
   2628e:	781b      	ldrb	r3, [r3, #0]
   26290:	b25b      	sxtb	r3, r3
   26292:	4a77      	ldr	r2, [pc, #476]	; (26470 <m2m_ip_cb+0x540>)
   26294:	011b      	lsls	r3, r3, #4
   26296:	18d3      	adds	r3, r2, r3
   26298:	3306      	adds	r3, #6
   2629a:	881b      	ldrh	r3, [r3, #0]
   2629c:	b29b      	uxth	r3, r3
   2629e:	22d6      	movs	r2, #214	; 0xd6
   262a0:	18ba      	adds	r2, r7, r2
   262a2:	8812      	ldrh	r2, [r2, #0]
   262a4:	429a      	cmp	r2, r3
   262a6:	d148      	bne.n	2633a <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   262a8:	23d2      	movs	r3, #210	; 0xd2
   262aa:	18fb      	adds	r3, r7, r3
   262ac:	2200      	movs	r2, #0
   262ae:	5e9b      	ldrsh	r3, [r3, r2]
   262b0:	2b00      	cmp	r3, #0
   262b2:	dd25      	ble.n	26300 <m2m_ip_cb+0x3d0>
   262b4:	23d2      	movs	r3, #210	; 0xd2
   262b6:	18fb      	adds	r3, r7, r3
   262b8:	2200      	movs	r2, #0
   262ba:	5e9a      	ldrsh	r2, [r3, r2]
   262bc:	1d3b      	adds	r3, r7, #4
   262be:	881b      	ldrh	r3, [r3, #0]
   262c0:	429a      	cmp	r2, r3
   262c2:	da1d      	bge.n	26300 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   262c4:	23d0      	movs	r3, #208	; 0xd0
   262c6:	18fb      	adds	r3, r7, r3
   262c8:	881b      	ldrh	r3, [r3, #0]
   262ca:	683a      	ldr	r2, [r7, #0]
   262cc:	18d3      	adds	r3, r2, r3
   262ce:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   262d0:	23d8      	movs	r3, #216	; 0xd8
   262d2:	18fb      	adds	r3, r7, r3
   262d4:	22d2      	movs	r2, #210	; 0xd2
   262d6:	18ba      	adds	r2, r7, r2
   262d8:	8812      	ldrh	r2, [r2, #0]
   262da:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   262dc:	683c      	ldr	r4, [r7, #0]
   262de:	23df      	movs	r3, #223	; 0xdf
   262e0:	18fb      	adds	r3, r7, r3
   262e2:	781a      	ldrb	r2, [r3, #0]
   262e4:	2370      	movs	r3, #112	; 0x70
   262e6:	18f9      	adds	r1, r7, r3
   262e8:	23d5      	movs	r3, #213	; 0xd5
   262ea:	18fb      	adds	r3, r7, r3
   262ec:	2000      	movs	r0, #0
   262ee:	5618      	ldrsb	r0, [r3, r0]
   262f0:	23d8      	movs	r3, #216	; 0xd8
   262f2:	18fb      	adds	r3, r7, r3
   262f4:	881b      	ldrh	r3, [r3, #0]
   262f6:	9300      	str	r3, [sp, #0]
   262f8:	0023      	movs	r3, r4
   262fa:	4c5e      	ldr	r4, [pc, #376]	; (26474 <m2m_ip_cb+0x544>)
   262fc:	47a0      	blx	r4
	{
   262fe:	e0ad      	b.n	2645c <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   26300:	2370      	movs	r3, #112	; 0x70
   26302:	18fb      	adds	r3, r7, r3
   26304:	22d2      	movs	r2, #210	; 0xd2
   26306:	18ba      	adds	r2, r7, r2
   26308:	8812      	ldrh	r2, [r2, #0]
   2630a:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   2630c:	2370      	movs	r3, #112	; 0x70
   2630e:	18fb      	adds	r3, r7, r3
   26310:	2200      	movs	r2, #0
   26312:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   26314:	4b58      	ldr	r3, [pc, #352]	; (26478 <m2m_ip_cb+0x548>)
   26316:	681b      	ldr	r3, [r3, #0]
   26318:	2b00      	cmp	r3, #0
   2631a:	d100      	bne.n	2631e <m2m_ip_cb+0x3ee>
   2631c:	e09e      	b.n	2645c <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   2631e:	4b56      	ldr	r3, [pc, #344]	; (26478 <m2m_ip_cb+0x548>)
   26320:	681b      	ldr	r3, [r3, #0]
   26322:	2270      	movs	r2, #112	; 0x70
   26324:	18bc      	adds	r4, r7, r2
   26326:	22df      	movs	r2, #223	; 0xdf
   26328:	18ba      	adds	r2, r7, r2
   2632a:	7811      	ldrb	r1, [r2, #0]
   2632c:	22d5      	movs	r2, #213	; 0xd5
   2632e:	18ba      	adds	r2, r7, r2
   26330:	2000      	movs	r0, #0
   26332:	5610      	ldrsb	r0, [r2, r0]
   26334:	0022      	movs	r2, r4
   26336:	4798      	blx	r3
	{
   26338:	e090      	b.n	2645c <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   2633a:	23d8      	movs	r3, #216	; 0xd8
   2633c:	18fa      	adds	r2, r7, r3
   2633e:	1d3b      	adds	r3, r7, #4
   26340:	8812      	ldrh	r2, [r2, #0]
   26342:	881b      	ldrh	r3, [r3, #0]
   26344:	429a      	cmp	r2, r3
   26346:	d300      	bcc.n	2634a <m2m_ip_cb+0x41a>
   26348:	e088      	b.n	2645c <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   2634a:	2301      	movs	r3, #1
   2634c:	2200      	movs	r2, #0
   2634e:	2100      	movs	r1, #0
   26350:	2000      	movs	r0, #0
   26352:	4c46      	ldr	r4, [pc, #280]	; (2646c <m2m_ip_cb+0x53c>)
   26354:	47a0      	blx	r4
	{
   26356:	e081      	b.n	2645c <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   26358:	1dfb      	adds	r3, r7, #7
   2635a:	781b      	ldrb	r3, [r3, #0]
   2635c:	2b45      	cmp	r3, #69	; 0x45
   2635e:	d007      	beq.n	26370 <m2m_ip_cb+0x440>
   26360:	1dfb      	adds	r3, r7, #7
   26362:	781b      	ldrb	r3, [r3, #0]
   26364:	2b47      	cmp	r3, #71	; 0x47
   26366:	d003      	beq.n	26370 <m2m_ip_cb+0x440>
   26368:	1dfb      	adds	r3, r7, #7
   2636a:	781b      	ldrb	r3, [r3, #0]
   2636c:	2b4c      	cmp	r3, #76	; 0x4c
   2636e:	d14c      	bne.n	2640a <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   26370:	23de      	movs	r3, #222	; 0xde
   26372:	18fb      	adds	r3, r7, r3
   26374:	2207      	movs	r2, #7
   26376:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   26378:	1dfb      	adds	r3, r7, #7
   2637a:	781b      	ldrb	r3, [r3, #0]
   2637c:	2b47      	cmp	r3, #71	; 0x47
   2637e:	d103      	bne.n	26388 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   26380:	23de      	movs	r3, #222	; 0xde
   26382:	18fb      	adds	r3, r7, r3
   26384:	2208      	movs	r2, #8
   26386:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   26388:	2364      	movs	r3, #100	; 0x64
   2638a:	18f9      	adds	r1, r7, r3
   2638c:	6838      	ldr	r0, [r7, #0]
   2638e:	2300      	movs	r3, #0
   26390:	2208      	movs	r2, #8
   26392:	4c36      	ldr	r4, [pc, #216]	; (2646c <m2m_ip_cb+0x53c>)
   26394:	47a0      	blx	r4
   26396:	1e03      	subs	r3, r0, #0
   26398:	d162      	bne.n	26460 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   2639a:	23dc      	movs	r3, #220	; 0xdc
   2639c:	18fb      	adds	r3, r7, r3
   2639e:	2200      	movs	r2, #0
   263a0:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   263a2:	23db      	movs	r3, #219	; 0xdb
   263a4:	18fb      	adds	r3, r7, r3
   263a6:	2264      	movs	r2, #100	; 0x64
   263a8:	18ba      	adds	r2, r7, r2
   263aa:	7812      	ldrb	r2, [r2, #0]
   263ac:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   263ae:	23dc      	movs	r3, #220	; 0xdc
   263b0:	18fb      	adds	r3, r7, r3
   263b2:	2264      	movs	r2, #100	; 0x64
   263b4:	18ba      	adds	r2, r7, r2
   263b6:	8892      	ldrh	r2, [r2, #4]
   263b8:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   263ba:	2364      	movs	r3, #100	; 0x64
   263bc:	18fb      	adds	r3, r7, r3
   263be:	2202      	movs	r2, #2
   263c0:	5e9a      	ldrsh	r2, [r3, r2]
   263c2:	236e      	movs	r3, #110	; 0x6e
   263c4:	18fb      	adds	r3, r7, r3
   263c6:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   263c8:	23db      	movs	r3, #219	; 0xdb
   263ca:	18fb      	adds	r3, r7, r3
   263cc:	781b      	ldrb	r3, [r3, #0]
   263ce:	b25b      	sxtb	r3, r3
   263d0:	4a27      	ldr	r2, [pc, #156]	; (26470 <m2m_ip_cb+0x540>)
   263d2:	011b      	lsls	r3, r3, #4
   263d4:	18d3      	adds	r3, r2, r3
   263d6:	3306      	adds	r3, #6
   263d8:	881b      	ldrh	r3, [r3, #0]
   263da:	b29b      	uxth	r3, r3
   263dc:	22dc      	movs	r2, #220	; 0xdc
   263de:	18ba      	adds	r2, r7, r2
   263e0:	8812      	ldrh	r2, [r2, #0]
   263e2:	429a      	cmp	r2, r3
   263e4:	d13c      	bne.n	26460 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   263e6:	4b24      	ldr	r3, [pc, #144]	; (26478 <m2m_ip_cb+0x548>)
   263e8:	681b      	ldr	r3, [r3, #0]
   263ea:	2b00      	cmp	r3, #0
   263ec:	d038      	beq.n	26460 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   263ee:	4b22      	ldr	r3, [pc, #136]	; (26478 <m2m_ip_cb+0x548>)
   263f0:	681b      	ldr	r3, [r3, #0]
   263f2:	226e      	movs	r2, #110	; 0x6e
   263f4:	18bc      	adds	r4, r7, r2
   263f6:	22de      	movs	r2, #222	; 0xde
   263f8:	18ba      	adds	r2, r7, r2
   263fa:	7811      	ldrb	r1, [r2, #0]
   263fc:	22db      	movs	r2, #219	; 0xdb
   263fe:	18ba      	adds	r2, r7, r2
   26400:	2000      	movs	r0, #0
   26402:	5610      	ldrsb	r0, [r2, r0]
   26404:	0022      	movs	r2, r4
   26406:	4798      	blx	r3
	{
   26408:	e02a      	b.n	26460 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   2640a:	1dfb      	adds	r3, r7, #7
   2640c:	781b      	ldrb	r3, [r3, #0]
   2640e:	2b52      	cmp	r3, #82	; 0x52
   26410:	d127      	bne.n	26462 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   26412:	2350      	movs	r3, #80	; 0x50
   26414:	18f9      	adds	r1, r7, r3
   26416:	6838      	ldr	r0, [r7, #0]
   26418:	2301      	movs	r3, #1
   2641a:	2214      	movs	r2, #20
   2641c:	4c13      	ldr	r4, [pc, #76]	; (2646c <m2m_ip_cb+0x53c>)
   2641e:	47a0      	blx	r4
   26420:	1e03      	subs	r3, r0, #0
   26422:	d11e      	bne.n	26462 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   26424:	2350      	movs	r3, #80	; 0x50
   26426:	18fb      	adds	r3, r7, r3
   26428:	685b      	ldr	r3, [r3, #4]
   2642a:	001a      	movs	r2, r3
   2642c:	4b13      	ldr	r3, [pc, #76]	; (2647c <m2m_ip_cb+0x54c>)
   2642e:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   26430:	4b12      	ldr	r3, [pc, #72]	; (2647c <m2m_ip_cb+0x54c>)
   26432:	681b      	ldr	r3, [r3, #0]
   26434:	2b00      	cmp	r3, #0
   26436:	d014      	beq.n	26462 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   26438:	4b10      	ldr	r3, [pc, #64]	; (2647c <m2m_ip_cb+0x54c>)
   2643a:	681c      	ldr	r4, [r3, #0]
   2643c:	2350      	movs	r3, #80	; 0x50
   2643e:	18fb      	adds	r3, r7, r3
   26440:	6818      	ldr	r0, [r3, #0]
   26442:	2350      	movs	r3, #80	; 0x50
   26444:	18fb      	adds	r3, r7, r3
   26446:	6899      	ldr	r1, [r3, #8]
   26448:	2350      	movs	r3, #80	; 0x50
   2644a:	18fb      	adds	r3, r7, r3
   2644c:	7c1b      	ldrb	r3, [r3, #16]
   2644e:	001a      	movs	r2, r3
   26450:	47a0      	blx	r4
}
   26452:	e006      	b.n	26462 <m2m_ip_cb+0x532>
	{
   26454:	46c0      	nop			; (mov r8, r8)
   26456:	e004      	b.n	26462 <m2m_ip_cb+0x532>
	{
   26458:	46c0      	nop			; (mov r8, r8)
   2645a:	e002      	b.n	26462 <m2m_ip_cb+0x532>
	{
   2645c:	46c0      	nop			; (mov r8, r8)
   2645e:	e000      	b.n	26462 <m2m_ip_cb+0x532>
	{
   26460:	46c0      	nop			; (mov r8, r8)
}
   26462:	46c0      	nop			; (mov r8, r8)
   26464:	46bd      	mov	sp, r7
   26466:	b039      	add	sp, #228	; 0xe4
   26468:	bd90      	pop	{r4, r7, pc}
   2646a:	46c0      	nop			; (mov r8, r8)
   2646c:	0002272d 	.word	0x0002272d
   26470:	20005b98 	.word	0x20005b98
   26474:	00025d35 	.word	0x00025d35
   26478:	20005c48 	.word	0x20005c48
   2647c:	20005c4c 	.word	0x20005c4c

00026480 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   26480:	b580      	push	{r7, lr}
   26482:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   26484:	4b0c      	ldr	r3, [pc, #48]	; (264b8 <socketInit+0x38>)
   26486:	781b      	ldrb	r3, [r3, #0]
   26488:	b2db      	uxtb	r3, r3
   2648a:	2b00      	cmp	r3, #0
   2648c:	d110      	bne.n	264b0 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   2648e:	4b0b      	ldr	r3, [pc, #44]	; (264bc <socketInit+0x3c>)
   26490:	22b0      	movs	r2, #176	; 0xb0
   26492:	2100      	movs	r1, #0
   26494:	0018      	movs	r0, r3
   26496:	4b0a      	ldr	r3, [pc, #40]	; (264c0 <socketInit+0x40>)
   26498:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   2649a:	4b0a      	ldr	r3, [pc, #40]	; (264c4 <socketInit+0x44>)
   2649c:	0019      	movs	r1, r3
   2649e:	2002      	movs	r0, #2
   264a0:	4b09      	ldr	r3, [pc, #36]	; (264c8 <socketInit+0x48>)
   264a2:	4798      	blx	r3
		gbSocketInit	= 1;
   264a4:	4b04      	ldr	r3, [pc, #16]	; (264b8 <socketInit+0x38>)
   264a6:	2201      	movs	r2, #1
   264a8:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   264aa:	4b08      	ldr	r3, [pc, #32]	; (264cc <socketInit+0x4c>)
   264ac:	2200      	movs	r2, #0
   264ae:	801a      	strh	r2, [r3, #0]
	}
}
   264b0:	46c0      	nop			; (mov r8, r8)
   264b2:	46bd      	mov	sp, r7
   264b4:	bd80      	pop	{r7, pc}
   264b6:	46c0      	nop			; (mov r8, r8)
   264b8:	200042b8 	.word	0x200042b8
   264bc:	20005b98 	.word	0x20005b98
   264c0:	00021bb1 	.word	0x00021bb1
   264c4:	00025f31 	.word	0x00025f31
   264c8:	000228ad 	.word	0x000228ad
   264cc:	200042b6 	.word	0x200042b6

000264d0 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   264d0:	b580      	push	{r7, lr}
   264d2:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   264d4:	4b0a      	ldr	r3, [pc, #40]	; (26500 <socketDeinit+0x30>)
   264d6:	22b0      	movs	r2, #176	; 0xb0
   264d8:	2100      	movs	r1, #0
   264da:	0018      	movs	r0, r3
   264dc:	4b09      	ldr	r3, [pc, #36]	; (26504 <socketDeinit+0x34>)
   264de:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   264e0:	2100      	movs	r1, #0
   264e2:	2002      	movs	r0, #2
   264e4:	4b08      	ldr	r3, [pc, #32]	; (26508 <socketDeinit+0x38>)
   264e6:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   264e8:	4b08      	ldr	r3, [pc, #32]	; (2650c <socketDeinit+0x3c>)
   264ea:	2200      	movs	r2, #0
   264ec:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   264ee:	4b08      	ldr	r3, [pc, #32]	; (26510 <socketDeinit+0x40>)
   264f0:	2200      	movs	r2, #0
   264f2:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   264f4:	4b07      	ldr	r3, [pc, #28]	; (26514 <socketDeinit+0x44>)
   264f6:	2200      	movs	r2, #0
   264f8:	701a      	strb	r2, [r3, #0]
}
   264fa:	46c0      	nop			; (mov r8, r8)
   264fc:	46bd      	mov	sp, r7
   264fe:	bd80      	pop	{r7, pc}
   26500:	20005b98 	.word	0x20005b98
   26504:	00021bb1 	.word	0x00021bb1
   26508:	000228ad 	.word	0x000228ad
   2650c:	20005c48 	.word	0x20005c48
   26510:	20005c50 	.word	0x20005c50
   26514:	200042b8 	.word	0x200042b8

00026518 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   26518:	b580      	push	{r7, lr}
   2651a:	b082      	sub	sp, #8
   2651c:	af00      	add	r7, sp, #0
   2651e:	6078      	str	r0, [r7, #4]
   26520:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   26522:	4b05      	ldr	r3, [pc, #20]	; (26538 <registerSocketCallback+0x20>)
   26524:	687a      	ldr	r2, [r7, #4]
   26526:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   26528:	4b04      	ldr	r3, [pc, #16]	; (2653c <registerSocketCallback+0x24>)
   2652a:	683a      	ldr	r2, [r7, #0]
   2652c:	601a      	str	r2, [r3, #0]
}
   2652e:	46c0      	nop			; (mov r8, r8)
   26530:	46bd      	mov	sp, r7
   26532:	b002      	add	sp, #8
   26534:	bd80      	pop	{r7, pc}
   26536:	46c0      	nop			; (mov r8, r8)
   26538:	20005c48 	.word	0x20005c48
   2653c:	20005c50 	.word	0x20005c50

00026540 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   26540:	b590      	push	{r4, r7, lr}
   26542:	b08d      	sub	sp, #52	; 0x34
   26544:	af04      	add	r7, sp, #16
   26546:	0004      	movs	r4, r0
   26548:	0008      	movs	r0, r1
   2654a:	0011      	movs	r1, r2
   2654c:	1dbb      	adds	r3, r7, #6
   2654e:	1c22      	adds	r2, r4, #0
   26550:	801a      	strh	r2, [r3, #0]
   26552:	1d7b      	adds	r3, r7, #5
   26554:	1c02      	adds	r2, r0, #0
   26556:	701a      	strb	r2, [r3, #0]
   26558:	1d3b      	adds	r3, r7, #4
   2655a:	1c0a      	adds	r2, r1, #0
   2655c:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   2655e:	231f      	movs	r3, #31
   26560:	18fb      	adds	r3, r7, r3
   26562:	22ff      	movs	r2, #255	; 0xff
   26564:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   26566:	1dbb      	adds	r3, r7, #6
   26568:	881b      	ldrh	r3, [r3, #0]
   2656a:	2b02      	cmp	r3, #2
   2656c:	d000      	beq.n	26570 <socket+0x30>
   2656e:	e0ce      	b.n	2670e <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   26570:	1d7b      	adds	r3, r7, #5
   26572:	781b      	ldrb	r3, [r3, #0]
   26574:	2b01      	cmp	r3, #1
   26576:	d135      	bne.n	265e4 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   26578:	231e      	movs	r3, #30
   2657a:	18fb      	adds	r3, r7, r3
   2657c:	2200      	movs	r2, #0
   2657e:	701a      	strb	r2, [r3, #0]
   26580:	e02a      	b.n	265d8 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   26582:	2317      	movs	r3, #23
   26584:	18fb      	adds	r3, r7, r3
   26586:	4a66      	ldr	r2, [pc, #408]	; (26720 <socket+0x1e0>)
   26588:	7812      	ldrb	r2, [r2, #0]
   2658a:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   2658c:	4b64      	ldr	r3, [pc, #400]	; (26720 <socket+0x1e0>)
   2658e:	781b      	ldrb	r3, [r3, #0]
   26590:	b2db      	uxtb	r3, r3
   26592:	011a      	lsls	r2, r3, #4
   26594:	4b63      	ldr	r3, [pc, #396]	; (26724 <socket+0x1e4>)
   26596:	18d3      	adds	r3, r2, r3
   26598:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   2659a:	4b61      	ldr	r3, [pc, #388]	; (26720 <socket+0x1e0>)
   2659c:	781b      	ldrb	r3, [r3, #0]
   2659e:	b2db      	uxtb	r3, r3
   265a0:	1c5a      	adds	r2, r3, #1
   265a2:	4b61      	ldr	r3, [pc, #388]	; (26728 <socket+0x1e8>)
   265a4:	2107      	movs	r1, #7
   265a6:	0010      	movs	r0, r2
   265a8:	4798      	blx	r3
   265aa:	000b      	movs	r3, r1
   265ac:	b2da      	uxtb	r2, r3
   265ae:	4b5c      	ldr	r3, [pc, #368]	; (26720 <socket+0x1e0>)
   265b0:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   265b2:	69bb      	ldr	r3, [r7, #24]
   265b4:	7a9b      	ldrb	r3, [r3, #10]
   265b6:	b2db      	uxtb	r3, r3
   265b8:	2b00      	cmp	r3, #0
   265ba:	d106      	bne.n	265ca <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   265bc:	231f      	movs	r3, #31
   265be:	18fb      	adds	r3, r7, r3
   265c0:	2217      	movs	r2, #23
   265c2:	18ba      	adds	r2, r7, r2
   265c4:	7812      	ldrb	r2, [r2, #0]
   265c6:	701a      	strb	r2, [r3, #0]
					break;
   265c8:	e04c      	b.n	26664 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   265ca:	231e      	movs	r3, #30
   265cc:	18fb      	adds	r3, r7, r3
   265ce:	781a      	ldrb	r2, [r3, #0]
   265d0:	231e      	movs	r3, #30
   265d2:	18fb      	adds	r3, r7, r3
   265d4:	3201      	adds	r2, #1
   265d6:	701a      	strb	r2, [r3, #0]
   265d8:	231e      	movs	r3, #30
   265da:	18fb      	adds	r3, r7, r3
   265dc:	781b      	ldrb	r3, [r3, #0]
   265de:	2b06      	cmp	r3, #6
   265e0:	d9cf      	bls.n	26582 <socket+0x42>
   265e2:	e03f      	b.n	26664 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   265e4:	1d7b      	adds	r3, r7, #5
   265e6:	781b      	ldrb	r3, [r3, #0]
   265e8:	2b02      	cmp	r3, #2
   265ea:	d13b      	bne.n	26664 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   265ec:	4b4f      	ldr	r3, [pc, #316]	; (2672c <socket+0x1ec>)
   265ee:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   265f0:	231e      	movs	r3, #30
   265f2:	18fb      	adds	r3, r7, r3
   265f4:	2200      	movs	r2, #0
   265f6:	701a      	strb	r2, [r3, #0]
   265f8:	e02f      	b.n	2665a <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   265fa:	2317      	movs	r3, #23
   265fc:	18fb      	adds	r3, r7, r3
   265fe:	4a4c      	ldr	r2, [pc, #304]	; (26730 <socket+0x1f0>)
   26600:	7812      	ldrb	r2, [r2, #0]
   26602:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   26604:	4b4a      	ldr	r3, [pc, #296]	; (26730 <socket+0x1f0>)
   26606:	781b      	ldrb	r3, [r3, #0]
   26608:	b2db      	uxtb	r3, r3
   2660a:	011b      	lsls	r3, r3, #4
   2660c:	693a      	ldr	r2, [r7, #16]
   2660e:	18d3      	adds	r3, r2, r3
   26610:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   26612:	4b47      	ldr	r3, [pc, #284]	; (26730 <socket+0x1f0>)
   26614:	781b      	ldrb	r3, [r3, #0]
   26616:	b2db      	uxtb	r3, r3
   26618:	3301      	adds	r3, #1
   2661a:	4a46      	ldr	r2, [pc, #280]	; (26734 <socket+0x1f4>)
   2661c:	4013      	ands	r3, r2
   2661e:	d504      	bpl.n	2662a <socket+0xea>
   26620:	3b01      	subs	r3, #1
   26622:	2204      	movs	r2, #4
   26624:	4252      	negs	r2, r2
   26626:	4313      	orrs	r3, r2
   26628:	3301      	adds	r3, #1
   2662a:	b2da      	uxtb	r2, r3
   2662c:	4b40      	ldr	r3, [pc, #256]	; (26730 <socket+0x1f0>)
   2662e:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   26630:	69bb      	ldr	r3, [r7, #24]
   26632:	7a9b      	ldrb	r3, [r3, #10]
   26634:	b2db      	uxtb	r3, r3
   26636:	2b00      	cmp	r3, #0
   26638:	d108      	bne.n	2664c <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   2663a:	2317      	movs	r3, #23
   2663c:	18fb      	adds	r3, r7, r3
   2663e:	781b      	ldrb	r3, [r3, #0]
   26640:	3307      	adds	r3, #7
   26642:	b2da      	uxtb	r2, r3
   26644:	231f      	movs	r3, #31
   26646:	18fb      	adds	r3, r7, r3
   26648:	701a      	strb	r2, [r3, #0]
					break;
   2664a:	e00b      	b.n	26664 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   2664c:	231e      	movs	r3, #30
   2664e:	18fb      	adds	r3, r7, r3
   26650:	781a      	ldrb	r2, [r3, #0]
   26652:	231e      	movs	r3, #30
   26654:	18fb      	adds	r3, r7, r3
   26656:	3201      	adds	r2, #1
   26658:	701a      	strb	r2, [r3, #0]
   2665a:	231e      	movs	r3, #30
   2665c:	18fb      	adds	r3, r7, r3
   2665e:	781b      	ldrb	r3, [r3, #0]
   26660:	2b03      	cmp	r3, #3
   26662:	d9ca      	bls.n	265fa <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   26664:	231f      	movs	r3, #31
   26666:	18fb      	adds	r3, r7, r3
   26668:	781b      	ldrb	r3, [r3, #0]
   2666a:	2b7f      	cmp	r3, #127	; 0x7f
   2666c:	d84f      	bhi.n	2670e <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   2666e:	69bb      	ldr	r3, [r7, #24]
   26670:	2210      	movs	r2, #16
   26672:	2100      	movs	r1, #0
   26674:	0018      	movs	r0, r3
   26676:	4b30      	ldr	r3, [pc, #192]	; (26738 <socket+0x1f8>)
   26678:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   2667a:	69bb      	ldr	r3, [r7, #24]
   2667c:	2201      	movs	r2, #1
   2667e:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   26680:	4b2e      	ldr	r3, [pc, #184]	; (2673c <socket+0x1fc>)
   26682:	881b      	ldrh	r3, [r3, #0]
   26684:	b29b      	uxth	r3, r3
   26686:	3301      	adds	r3, #1
   26688:	b29a      	uxth	r2, r3
   2668a:	4b2c      	ldr	r3, [pc, #176]	; (2673c <socket+0x1fc>)
   2668c:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   2668e:	4b2b      	ldr	r3, [pc, #172]	; (2673c <socket+0x1fc>)
   26690:	881b      	ldrh	r3, [r3, #0]
   26692:	b29b      	uxth	r3, r3
   26694:	2b00      	cmp	r3, #0
   26696:	d106      	bne.n	266a6 <socket+0x166>
				++gu16SessionID;
   26698:	4b28      	ldr	r3, [pc, #160]	; (2673c <socket+0x1fc>)
   2669a:	881b      	ldrh	r3, [r3, #0]
   2669c:	b29b      	uxth	r3, r3
   2669e:	3301      	adds	r3, #1
   266a0:	b29a      	uxth	r2, r3
   266a2:	4b26      	ldr	r3, [pc, #152]	; (2673c <socket+0x1fc>)
   266a4:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   266a6:	4b25      	ldr	r3, [pc, #148]	; (2673c <socket+0x1fc>)
   266a8:	881b      	ldrh	r3, [r3, #0]
   266aa:	b29a      	uxth	r2, r3
   266ac:	69bb      	ldr	r3, [r7, #24]
   266ae:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   266b0:	4b23      	ldr	r3, [pc, #140]	; (26740 <socket+0x200>)
   266b2:	0018      	movs	r0, r3
   266b4:	4b23      	ldr	r3, [pc, #140]	; (26744 <socket+0x204>)
   266b6:	4798      	blx	r3
   266b8:	231f      	movs	r3, #31
   266ba:	18fb      	adds	r3, r7, r3
   266bc:	2100      	movs	r1, #0
   266be:	5659      	ldrsb	r1, [r3, r1]
   266c0:	4b1e      	ldr	r3, [pc, #120]	; (2673c <socket+0x1fc>)
   266c2:	881b      	ldrh	r3, [r3, #0]
   266c4:	b29b      	uxth	r3, r3
   266c6:	001a      	movs	r2, r3
   266c8:	4b1f      	ldr	r3, [pc, #124]	; (26748 <socket+0x208>)
   266ca:	0018      	movs	r0, r3
   266cc:	4b1d      	ldr	r3, [pc, #116]	; (26744 <socket+0x204>)
   266ce:	4798      	blx	r3
   266d0:	4b1e      	ldr	r3, [pc, #120]	; (2674c <socket+0x20c>)
   266d2:	0018      	movs	r0, r3
   266d4:	4b1b      	ldr	r3, [pc, #108]	; (26744 <socket+0x204>)
   266d6:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   266d8:	1d3b      	adds	r3, r7, #4
   266da:	781b      	ldrb	r3, [r3, #0]
   266dc:	2201      	movs	r2, #1
   266de:	4013      	ands	r3, r2
   266e0:	d015      	beq.n	2670e <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   266e2:	230c      	movs	r3, #12
   266e4:	18fb      	adds	r3, r7, r3
   266e6:	221f      	movs	r2, #31
   266e8:	18ba      	adds	r2, r7, r2
   266ea:	7812      	ldrb	r2, [r2, #0]
   266ec:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   266ee:	69bb      	ldr	r3, [r7, #24]
   266f0:	2221      	movs	r2, #33	; 0x21
   266f2:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   266f4:	230c      	movs	r3, #12
   266f6:	18fa      	adds	r2, r7, r3
   266f8:	2300      	movs	r3, #0
   266fa:	9302      	str	r3, [sp, #8]
   266fc:	2300      	movs	r3, #0
   266fe:	9301      	str	r3, [sp, #4]
   26700:	2300      	movs	r3, #0
   26702:	9300      	str	r3, [sp, #0]
   26704:	2304      	movs	r3, #4
   26706:	2150      	movs	r1, #80	; 0x50
   26708:	2002      	movs	r0, #2
   2670a:	4c11      	ldr	r4, [pc, #68]	; (26750 <socket+0x210>)
   2670c:	47a0      	blx	r4
			}
		}
	}
	return sock;
   2670e:	231f      	movs	r3, #31
   26710:	18fb      	adds	r3, r7, r3
   26712:	781b      	ldrb	r3, [r3, #0]
   26714:	b25b      	sxtb	r3, r3
}
   26716:	0018      	movs	r0, r3
   26718:	46bd      	mov	sp, r7
   2671a:	b009      	add	sp, #36	; 0x24
   2671c:	bd90      	pop	{r4, r7, pc}
   2671e:	46c0      	nop			; (mov r8, r8)
   26720:	200042b9 	.word	0x200042b9
   26724:	20005b98 	.word	0x20005b98
   26728:	00033db5 	.word	0x00033db5
   2672c:	20005c08 	.word	0x20005c08
   26730:	200042ba 	.word	0x200042ba
   26734:	80000003 	.word	0x80000003
   26738:	00021bb1 	.word	0x00021bb1
   2673c:	200042b6 	.word	0x200042b6
   26740:	0003b248 	.word	0x0003b248
   26744:	0001ee19 	.word	0x0001ee19
   26748:	0003b26c 	.word	0x0003b26c
   2674c:	0003b268 	.word	0x0003b268
   26750:	00021e11 	.word	0x00021e11

00026754 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   26754:	b5b0      	push	{r4, r5, r7, lr}
   26756:	b08a      	sub	sp, #40	; 0x28
   26758:	af04      	add	r7, sp, #16
   2675a:	6039      	str	r1, [r7, #0]
   2675c:	0011      	movs	r1, r2
   2675e:	1dfb      	adds	r3, r7, #7
   26760:	1c02      	adds	r2, r0, #0
   26762:	701a      	strb	r2, [r3, #0]
   26764:	1dbb      	adds	r3, r7, #6
   26766:	1c0a      	adds	r2, r1, #0
   26768:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   2676a:	2317      	movs	r3, #23
   2676c:	18fb      	adds	r3, r7, r3
   2676e:	22fa      	movs	r2, #250	; 0xfa
   26770:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   26772:	1dfb      	adds	r3, r7, #7
   26774:	781b      	ldrb	r3, [r3, #0]
   26776:	2b7f      	cmp	r3, #127	; 0x7f
   26778:	d867      	bhi.n	2684a <connect+0xf6>
   2677a:	683b      	ldr	r3, [r7, #0]
   2677c:	2b00      	cmp	r3, #0
   2677e:	d064      	beq.n	2684a <connect+0xf6>
   26780:	1dfb      	adds	r3, r7, #7
   26782:	781b      	ldrb	r3, [r3, #0]
   26784:	b25b      	sxtb	r3, r3
   26786:	4a35      	ldr	r2, [pc, #212]	; (2685c <connect+0x108>)
   26788:	011b      	lsls	r3, r3, #4
   2678a:	18d3      	adds	r3, r2, r3
   2678c:	330a      	adds	r3, #10
   2678e:	781b      	ldrb	r3, [r3, #0]
   26790:	b2db      	uxtb	r3, r3
   26792:	2b01      	cmp	r3, #1
   26794:	d159      	bne.n	2684a <connect+0xf6>
   26796:	1dbb      	adds	r3, r7, #6
   26798:	781b      	ldrb	r3, [r3, #0]
   2679a:	2b00      	cmp	r3, #0
   2679c:	d055      	beq.n	2684a <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   2679e:	2316      	movs	r3, #22
   267a0:	18fb      	adds	r3, r7, r3
   267a2:	2244      	movs	r2, #68	; 0x44
   267a4:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   267a6:	1dfb      	adds	r3, r7, #7
   267a8:	781b      	ldrb	r3, [r3, #0]
   267aa:	b25b      	sxtb	r3, r3
   267ac:	4a2b      	ldr	r2, [pc, #172]	; (2685c <connect+0x108>)
   267ae:	011b      	lsls	r3, r3, #4
   267b0:	18d3      	adds	r3, r2, r3
   267b2:	330b      	adds	r3, #11
   267b4:	781b      	ldrb	r3, [r3, #0]
   267b6:	b2db      	uxtb	r3, r3
   267b8:	001a      	movs	r2, r3
   267ba:	2301      	movs	r3, #1
   267bc:	4013      	ands	r3, r2
   267be:	d00f      	beq.n	267e0 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   267c0:	2316      	movs	r3, #22
   267c2:	18fb      	adds	r3, r7, r3
   267c4:	224b      	movs	r2, #75	; 0x4b
   267c6:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   267c8:	1dfb      	adds	r3, r7, #7
   267ca:	781b      	ldrb	r3, [r3, #0]
   267cc:	b25b      	sxtb	r3, r3
   267ce:	4a23      	ldr	r2, [pc, #140]	; (2685c <connect+0x108>)
   267d0:	011b      	lsls	r3, r3, #4
   267d2:	18d3      	adds	r3, r2, r3
   267d4:	330b      	adds	r3, #11
   267d6:	781b      	ldrb	r3, [r3, #0]
   267d8:	b2da      	uxtb	r2, r3
   267da:	2308      	movs	r3, #8
   267dc:	18fb      	adds	r3, r7, r3
   267de:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   267e0:	2308      	movs	r3, #8
   267e2:	18fb      	adds	r3, r7, r3
   267e4:	1dfa      	adds	r2, r7, #7
   267e6:	7812      	ldrb	r2, [r2, #0]
   267e8:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   267ea:	6839      	ldr	r1, [r7, #0]
   267ec:	2308      	movs	r3, #8
   267ee:	18fb      	adds	r3, r7, r3
   267f0:	2208      	movs	r2, #8
   267f2:	0018      	movs	r0, r3
   267f4:	4b1a      	ldr	r3, [pc, #104]	; (26860 <connect+0x10c>)
   267f6:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   267f8:	1dfb      	adds	r3, r7, #7
   267fa:	781b      	ldrb	r3, [r3, #0]
   267fc:	b25b      	sxtb	r3, r3
   267fe:	4a17      	ldr	r2, [pc, #92]	; (2685c <connect+0x108>)
   26800:	011b      	lsls	r3, r3, #4
   26802:	18d3      	adds	r3, r2, r3
   26804:	3306      	adds	r3, #6
   26806:	881b      	ldrh	r3, [r3, #0]
   26808:	b29a      	uxth	r2, r3
   2680a:	2308      	movs	r3, #8
   2680c:	18fb      	adds	r3, r7, r3
   2680e:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   26810:	2317      	movs	r3, #23
   26812:	18fc      	adds	r4, r7, r3
   26814:	2308      	movs	r3, #8
   26816:	18fa      	adds	r2, r7, r3
   26818:	2316      	movs	r3, #22
   2681a:	18fb      	adds	r3, r7, r3
   2681c:	7819      	ldrb	r1, [r3, #0]
   2681e:	2300      	movs	r3, #0
   26820:	9302      	str	r3, [sp, #8]
   26822:	2300      	movs	r3, #0
   26824:	9301      	str	r3, [sp, #4]
   26826:	2300      	movs	r3, #0
   26828:	9300      	str	r3, [sp, #0]
   2682a:	230c      	movs	r3, #12
   2682c:	2002      	movs	r0, #2
   2682e:	4d0d      	ldr	r5, [pc, #52]	; (26864 <connect+0x110>)
   26830:	47a8      	blx	r5
   26832:	0003      	movs	r3, r0
   26834:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   26836:	2317      	movs	r3, #23
   26838:	18fb      	adds	r3, r7, r3
   2683a:	781b      	ldrb	r3, [r3, #0]
   2683c:	b25b      	sxtb	r3, r3
   2683e:	2b00      	cmp	r3, #0
   26840:	d003      	beq.n	2684a <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   26842:	2317      	movs	r3, #23
   26844:	18fb      	adds	r3, r7, r3
   26846:	22f7      	movs	r2, #247	; 0xf7
   26848:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   2684a:	2317      	movs	r3, #23
   2684c:	18fb      	adds	r3, r7, r3
   2684e:	781b      	ldrb	r3, [r3, #0]
   26850:	b25b      	sxtb	r3, r3
}
   26852:	0018      	movs	r0, r3
   26854:	46bd      	mov	sp, r7
   26856:	b006      	add	sp, #24
   26858:	bdb0      	pop	{r4, r5, r7, pc}
   2685a:	46c0      	nop			; (mov r8, r8)
   2685c:	20005b98 	.word	0x20005b98
   26860:	00021b75 	.word	0x00021b75
   26864:	00021e11 	.word	0x00021e11

00026868 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   26868:	b590      	push	{r4, r7, lr}
   2686a:	b08f      	sub	sp, #60	; 0x3c
   2686c:	af04      	add	r7, sp, #16
   2686e:	0004      	movs	r4, r0
   26870:	60b9      	str	r1, [r7, #8]
   26872:	0010      	movs	r0, r2
   26874:	0019      	movs	r1, r3
   26876:	230f      	movs	r3, #15
   26878:	18fb      	adds	r3, r7, r3
   2687a:	1c22      	adds	r2, r4, #0
   2687c:	701a      	strb	r2, [r3, #0]
   2687e:	230c      	movs	r3, #12
   26880:	18fb      	adds	r3, r7, r3
   26882:	1c02      	adds	r2, r0, #0
   26884:	801a      	strh	r2, [r3, #0]
   26886:	1dbb      	adds	r3, r7, #6
   26888:	1c0a      	adds	r2, r1, #0
   2688a:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   2688c:	2326      	movs	r3, #38	; 0x26
   2688e:	18fb      	adds	r3, r7, r3
   26890:	2206      	movs	r2, #6
   26892:	4252      	negs	r2, r2
   26894:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   26896:	230f      	movs	r3, #15
   26898:	18fb      	adds	r3, r7, r3
   2689a:	781b      	ldrb	r3, [r3, #0]
   2689c:	2b7f      	cmp	r3, #127	; 0x7f
   2689e:	d900      	bls.n	268a2 <send+0x3a>
   268a0:	e087      	b.n	269b2 <send+0x14a>
   268a2:	68bb      	ldr	r3, [r7, #8]
   268a4:	2b00      	cmp	r3, #0
   268a6:	d100      	bne.n	268aa <send+0x42>
   268a8:	e083      	b.n	269b2 <send+0x14a>
   268aa:	230c      	movs	r3, #12
   268ac:	18fb      	adds	r3, r7, r3
   268ae:	881a      	ldrh	r2, [r3, #0]
   268b0:	23af      	movs	r3, #175	; 0xaf
   268b2:	00db      	lsls	r3, r3, #3
   268b4:	429a      	cmp	r2, r3
   268b6:	d900      	bls.n	268ba <send+0x52>
   268b8:	e07b      	b.n	269b2 <send+0x14a>
   268ba:	230f      	movs	r3, #15
   268bc:	18fb      	adds	r3, r7, r3
   268be:	781b      	ldrb	r3, [r3, #0]
   268c0:	b25b      	sxtb	r3, r3
   268c2:	4a40      	ldr	r2, [pc, #256]	; (269c4 <send+0x15c>)
   268c4:	011b      	lsls	r3, r3, #4
   268c6:	18d3      	adds	r3, r2, r3
   268c8:	330a      	adds	r3, #10
   268ca:	781b      	ldrb	r3, [r3, #0]
   268cc:	b2db      	uxtb	r3, r3
   268ce:	2b01      	cmp	r3, #1
   268d0:	d16f      	bne.n	269b2 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   268d2:	2323      	movs	r3, #35	; 0x23
   268d4:	18fb      	adds	r3, r7, r3
   268d6:	2245      	movs	r2, #69	; 0x45
   268d8:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   268da:	2324      	movs	r3, #36	; 0x24
   268dc:	18fb      	adds	r3, r7, r3
   268de:	2250      	movs	r2, #80	; 0x50
   268e0:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   268e2:	2310      	movs	r3, #16
   268e4:	18fb      	adds	r3, r7, r3
   268e6:	220f      	movs	r2, #15
   268e8:	18ba      	adds	r2, r7, r2
   268ea:	7812      	ldrb	r2, [r2, #0]
   268ec:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   268ee:	2310      	movs	r3, #16
   268f0:	18fb      	adds	r3, r7, r3
   268f2:	220c      	movs	r2, #12
   268f4:	18ba      	adds	r2, r7, r2
   268f6:	8812      	ldrh	r2, [r2, #0]
   268f8:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   268fa:	230f      	movs	r3, #15
   268fc:	18fb      	adds	r3, r7, r3
   268fe:	781b      	ldrb	r3, [r3, #0]
   26900:	b25b      	sxtb	r3, r3
   26902:	4a30      	ldr	r2, [pc, #192]	; (269c4 <send+0x15c>)
   26904:	011b      	lsls	r3, r3, #4
   26906:	18d3      	adds	r3, r2, r3
   26908:	3306      	adds	r3, #6
   2690a:	881b      	ldrh	r3, [r3, #0]
   2690c:	b29a      	uxth	r2, r3
   2690e:	2310      	movs	r3, #16
   26910:	18fb      	adds	r3, r7, r3
   26912:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   26914:	230f      	movs	r3, #15
   26916:	18fb      	adds	r3, r7, r3
   26918:	781b      	ldrb	r3, [r3, #0]
   2691a:	b25b      	sxtb	r3, r3
   2691c:	2b06      	cmp	r3, #6
   2691e:	dd03      	ble.n	26928 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   26920:	2324      	movs	r3, #36	; 0x24
   26922:	18fb      	adds	r3, r7, r3
   26924:	2244      	movs	r2, #68	; 0x44
   26926:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   26928:	230f      	movs	r3, #15
   2692a:	18fb      	adds	r3, r7, r3
   2692c:	781b      	ldrb	r3, [r3, #0]
   2692e:	b25b      	sxtb	r3, r3
   26930:	4a24      	ldr	r2, [pc, #144]	; (269c4 <send+0x15c>)
   26932:	011b      	lsls	r3, r3, #4
   26934:	18d3      	adds	r3, r2, r3
   26936:	330b      	adds	r3, #11
   26938:	781b      	ldrb	r3, [r3, #0]
   2693a:	b2db      	uxtb	r3, r3
   2693c:	001a      	movs	r2, r3
   2693e:	2301      	movs	r3, #1
   26940:	4013      	ands	r3, r2
   26942:	d00f      	beq.n	26964 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   26944:	2323      	movs	r3, #35	; 0x23
   26946:	18fb      	adds	r3, r7, r3
   26948:	224c      	movs	r2, #76	; 0x4c
   2694a:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   2694c:	230f      	movs	r3, #15
   2694e:	18fb      	adds	r3, r7, r3
   26950:	2200      	movs	r2, #0
   26952:	569a      	ldrsb	r2, [r3, r2]
   26954:	2324      	movs	r3, #36	; 0x24
   26956:	18fb      	adds	r3, r7, r3
   26958:	491a      	ldr	r1, [pc, #104]	; (269c4 <send+0x15c>)
   2695a:	0112      	lsls	r2, r2, #4
   2695c:	188a      	adds	r2, r1, r2
   2695e:	3208      	adds	r2, #8
   26960:	8812      	ldrh	r2, [r2, #0]
   26962:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   26964:	2323      	movs	r3, #35	; 0x23
   26966:	18fb      	adds	r3, r7, r3
   26968:	781b      	ldrb	r3, [r3, #0]
   2696a:	2280      	movs	r2, #128	; 0x80
   2696c:	4252      	negs	r2, r2
   2696e:	4313      	orrs	r3, r2
   26970:	b2d9      	uxtb	r1, r3
   26972:	2310      	movs	r3, #16
   26974:	18fa      	adds	r2, r7, r3
   26976:	2324      	movs	r3, #36	; 0x24
   26978:	18fb      	adds	r3, r7, r3
   2697a:	881b      	ldrh	r3, [r3, #0]
   2697c:	9302      	str	r3, [sp, #8]
   2697e:	230c      	movs	r3, #12
   26980:	18fb      	adds	r3, r7, r3
   26982:	881b      	ldrh	r3, [r3, #0]
   26984:	9301      	str	r3, [sp, #4]
   26986:	68bb      	ldr	r3, [r7, #8]
   26988:	9300      	str	r3, [sp, #0]
   2698a:	2310      	movs	r3, #16
   2698c:	2002      	movs	r0, #2
   2698e:	4c0e      	ldr	r4, [pc, #56]	; (269c8 <send+0x160>)
   26990:	47a0      	blx	r4
   26992:	0003      	movs	r3, r0
   26994:	001a      	movs	r2, r3
   26996:	2326      	movs	r3, #38	; 0x26
   26998:	18fb      	adds	r3, r7, r3
   2699a:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   2699c:	2326      	movs	r3, #38	; 0x26
   2699e:	18fb      	adds	r3, r7, r3
   269a0:	2200      	movs	r2, #0
   269a2:	5e9b      	ldrsh	r3, [r3, r2]
   269a4:	2b00      	cmp	r3, #0
   269a6:	d004      	beq.n	269b2 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   269a8:	2326      	movs	r3, #38	; 0x26
   269aa:	18fb      	adds	r3, r7, r3
   269ac:	220e      	movs	r2, #14
   269ae:	4252      	negs	r2, r2
   269b0:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   269b2:	2326      	movs	r3, #38	; 0x26
   269b4:	18fb      	adds	r3, r7, r3
   269b6:	2200      	movs	r2, #0
   269b8:	5e9b      	ldrsh	r3, [r3, r2]
}
   269ba:	0018      	movs	r0, r3
   269bc:	46bd      	mov	sp, r7
   269be:	b00b      	add	sp, #44	; 0x2c
   269c0:	bd90      	pop	{r4, r7, pc}
   269c2:	46c0      	nop			; (mov r8, r8)
   269c4:	20005b98 	.word	0x20005b98
   269c8:	00021e11 	.word	0x00021e11

000269cc <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   269cc:	b590      	push	{r4, r7, lr}
   269ce:	b08d      	sub	sp, #52	; 0x34
   269d0:	af04      	add	r7, sp, #16
   269d2:	60b9      	str	r1, [r7, #8]
   269d4:	0011      	movs	r1, r2
   269d6:	607b      	str	r3, [r7, #4]
   269d8:	230f      	movs	r3, #15
   269da:	18fb      	adds	r3, r7, r3
   269dc:	1c02      	adds	r2, r0, #0
   269de:	701a      	strb	r2, [r3, #0]
   269e0:	230c      	movs	r3, #12
   269e2:	18fb      	adds	r3, r7, r3
   269e4:	1c0a      	adds	r2, r1, #0
   269e6:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   269e8:	231e      	movs	r3, #30
   269ea:	18fb      	adds	r3, r7, r3
   269ec:	2206      	movs	r2, #6
   269ee:	4252      	negs	r2, r2
   269f0:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   269f2:	230f      	movs	r3, #15
   269f4:	18fb      	adds	r3, r7, r3
   269f6:	781b      	ldrb	r3, [r3, #0]
   269f8:	2b7f      	cmp	r3, #127	; 0x7f
   269fa:	d900      	bls.n	269fe <recv+0x32>
   269fc:	e099      	b.n	26b32 <recv+0x166>
   269fe:	68bb      	ldr	r3, [r7, #8]
   26a00:	2b00      	cmp	r3, #0
   26a02:	d100      	bne.n	26a06 <recv+0x3a>
   26a04:	e095      	b.n	26b32 <recv+0x166>
   26a06:	230c      	movs	r3, #12
   26a08:	18fb      	adds	r3, r7, r3
   26a0a:	881b      	ldrh	r3, [r3, #0]
   26a0c:	2b00      	cmp	r3, #0
   26a0e:	d100      	bne.n	26a12 <recv+0x46>
   26a10:	e08f      	b.n	26b32 <recv+0x166>
   26a12:	230f      	movs	r3, #15
   26a14:	18fb      	adds	r3, r7, r3
   26a16:	781b      	ldrb	r3, [r3, #0]
   26a18:	b25b      	sxtb	r3, r3
   26a1a:	4a4a      	ldr	r2, [pc, #296]	; (26b44 <recv+0x178>)
   26a1c:	011b      	lsls	r3, r3, #4
   26a1e:	18d3      	adds	r3, r2, r3
   26a20:	330a      	adds	r3, #10
   26a22:	781b      	ldrb	r3, [r3, #0]
   26a24:	b2db      	uxtb	r3, r3
   26a26:	2b01      	cmp	r3, #1
   26a28:	d000      	beq.n	26a2c <recv+0x60>
   26a2a:	e082      	b.n	26b32 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   26a2c:	231e      	movs	r3, #30
   26a2e:	18fb      	adds	r3, r7, r3
   26a30:	2200      	movs	r2, #0
   26a32:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   26a34:	230f      	movs	r3, #15
   26a36:	18fb      	adds	r3, r7, r3
   26a38:	2200      	movs	r2, #0
   26a3a:	569a      	ldrsb	r2, [r3, r2]
   26a3c:	4b41      	ldr	r3, [pc, #260]	; (26b44 <recv+0x178>)
   26a3e:	0112      	lsls	r2, r2, #4
   26a40:	68b9      	ldr	r1, [r7, #8]
   26a42:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   26a44:	230f      	movs	r3, #15
   26a46:	18fb      	adds	r3, r7, r3
   26a48:	781b      	ldrb	r3, [r3, #0]
   26a4a:	b25b      	sxtb	r3, r3
   26a4c:	4a3d      	ldr	r2, [pc, #244]	; (26b44 <recv+0x178>)
   26a4e:	011b      	lsls	r3, r3, #4
   26a50:	18d3      	adds	r3, r2, r3
   26a52:	3304      	adds	r3, #4
   26a54:	220c      	movs	r2, #12
   26a56:	18ba      	adds	r2, r7, r2
   26a58:	8812      	ldrh	r2, [r2, #0]
   26a5a:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   26a5c:	230f      	movs	r3, #15
   26a5e:	18fb      	adds	r3, r7, r3
   26a60:	781b      	ldrb	r3, [r3, #0]
   26a62:	b25b      	sxtb	r3, r3
   26a64:	4a37      	ldr	r2, [pc, #220]	; (26b44 <recv+0x178>)
   26a66:	011b      	lsls	r3, r3, #4
   26a68:	18d3      	adds	r3, r2, r3
   26a6a:	330c      	adds	r3, #12
   26a6c:	781b      	ldrb	r3, [r3, #0]
   26a6e:	b2db      	uxtb	r3, r3
   26a70:	2b00      	cmp	r3, #0
   26a72:	d15e      	bne.n	26b32 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   26a74:	231d      	movs	r3, #29
   26a76:	18fb      	adds	r3, r7, r3
   26a78:	2246      	movs	r2, #70	; 0x46
   26a7a:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   26a7c:	230f      	movs	r3, #15
   26a7e:	18fb      	adds	r3, r7, r3
   26a80:	781b      	ldrb	r3, [r3, #0]
   26a82:	b25b      	sxtb	r3, r3
   26a84:	4a2f      	ldr	r2, [pc, #188]	; (26b44 <recv+0x178>)
   26a86:	011b      	lsls	r3, r3, #4
   26a88:	18d3      	adds	r3, r2, r3
   26a8a:	330c      	adds	r3, #12
   26a8c:	2201      	movs	r2, #1
   26a8e:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   26a90:	230f      	movs	r3, #15
   26a92:	18fb      	adds	r3, r7, r3
   26a94:	781b      	ldrb	r3, [r3, #0]
   26a96:	b25b      	sxtb	r3, r3
   26a98:	4a2a      	ldr	r2, [pc, #168]	; (26b44 <recv+0x178>)
   26a9a:	011b      	lsls	r3, r3, #4
   26a9c:	18d3      	adds	r3, r2, r3
   26a9e:	330b      	adds	r3, #11
   26aa0:	781b      	ldrb	r3, [r3, #0]
   26aa2:	b2db      	uxtb	r3, r3
   26aa4:	001a      	movs	r2, r3
   26aa6:	2301      	movs	r3, #1
   26aa8:	4013      	ands	r3, r2
   26aaa:	d003      	beq.n	26ab4 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   26aac:	231d      	movs	r3, #29
   26aae:	18fb      	adds	r3, r7, r3
   26ab0:	224d      	movs	r2, #77	; 0x4d
   26ab2:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   26ab4:	687b      	ldr	r3, [r7, #4]
   26ab6:	2b00      	cmp	r3, #0
   26ab8:	d105      	bne.n	26ac6 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   26aba:	2314      	movs	r3, #20
   26abc:	18fb      	adds	r3, r7, r3
   26abe:	2201      	movs	r2, #1
   26ac0:	4252      	negs	r2, r2
   26ac2:	601a      	str	r2, [r3, #0]
   26ac4:	e003      	b.n	26ace <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   26ac6:	2314      	movs	r3, #20
   26ac8:	18fb      	adds	r3, r7, r3
   26aca:	687a      	ldr	r2, [r7, #4]
   26acc:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   26ace:	2314      	movs	r3, #20
   26ad0:	18fb      	adds	r3, r7, r3
   26ad2:	220f      	movs	r2, #15
   26ad4:	18ba      	adds	r2, r7, r2
   26ad6:	7812      	ldrb	r2, [r2, #0]
   26ad8:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   26ada:	230f      	movs	r3, #15
   26adc:	18fb      	adds	r3, r7, r3
   26ade:	781b      	ldrb	r3, [r3, #0]
   26ae0:	b25b      	sxtb	r3, r3
   26ae2:	4a18      	ldr	r2, [pc, #96]	; (26b44 <recv+0x178>)
   26ae4:	011b      	lsls	r3, r3, #4
   26ae6:	18d3      	adds	r3, r2, r3
   26ae8:	3306      	adds	r3, #6
   26aea:	881b      	ldrh	r3, [r3, #0]
   26aec:	b29a      	uxth	r2, r3
   26aee:	2314      	movs	r3, #20
   26af0:	18fb      	adds	r3, r7, r3
   26af2:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   26af4:	2314      	movs	r3, #20
   26af6:	18fa      	adds	r2, r7, r3
   26af8:	231d      	movs	r3, #29
   26afa:	18fb      	adds	r3, r7, r3
   26afc:	7819      	ldrb	r1, [r3, #0]
   26afe:	2300      	movs	r3, #0
   26b00:	9302      	str	r3, [sp, #8]
   26b02:	2300      	movs	r3, #0
   26b04:	9301      	str	r3, [sp, #4]
   26b06:	2300      	movs	r3, #0
   26b08:	9300      	str	r3, [sp, #0]
   26b0a:	2308      	movs	r3, #8
   26b0c:	2002      	movs	r0, #2
   26b0e:	4c0e      	ldr	r4, [pc, #56]	; (26b48 <recv+0x17c>)
   26b10:	47a0      	blx	r4
   26b12:	0003      	movs	r3, r0
   26b14:	001a      	movs	r2, r3
   26b16:	231e      	movs	r3, #30
   26b18:	18fb      	adds	r3, r7, r3
   26b1a:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   26b1c:	231e      	movs	r3, #30
   26b1e:	18fb      	adds	r3, r7, r3
   26b20:	2200      	movs	r2, #0
   26b22:	5e9b      	ldrsh	r3, [r3, r2]
   26b24:	2b00      	cmp	r3, #0
   26b26:	d004      	beq.n	26b32 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   26b28:	231e      	movs	r3, #30
   26b2a:	18fb      	adds	r3, r7, r3
   26b2c:	220e      	movs	r2, #14
   26b2e:	4252      	negs	r2, r2
   26b30:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   26b32:	231e      	movs	r3, #30
   26b34:	18fb      	adds	r3, r7, r3
   26b36:	2200      	movs	r2, #0
   26b38:	5e9b      	ldrsh	r3, [r3, r2]
}
   26b3a:	0018      	movs	r0, r3
   26b3c:	46bd      	mov	sp, r7
   26b3e:	b009      	add	sp, #36	; 0x24
   26b40:	bd90      	pop	{r4, r7, pc}
   26b42:	46c0      	nop			; (mov r8, r8)
   26b44:	20005b98 	.word	0x20005b98
   26b48:	00021e11 	.word	0x00021e11

00026b4c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   26b4c:	b5b0      	push	{r4, r5, r7, lr}
   26b4e:	b088      	sub	sp, #32
   26b50:	af04      	add	r7, sp, #16
   26b52:	0002      	movs	r2, r0
   26b54:	1dfb      	adds	r3, r7, #7
   26b56:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   26b58:	230f      	movs	r3, #15
   26b5a:	18fb      	adds	r3, r7, r3
   26b5c:	22fa      	movs	r2, #250	; 0xfa
   26b5e:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   26b60:	4b43      	ldr	r3, [pc, #268]	; (26c70 <close+0x124>)
   26b62:	0018      	movs	r0, r3
   26b64:	4b43      	ldr	r3, [pc, #268]	; (26c74 <close+0x128>)
   26b66:	4798      	blx	r3
   26b68:	1dfb      	adds	r3, r7, #7
   26b6a:	2200      	movs	r2, #0
   26b6c:	569a      	ldrsb	r2, [r3, r2]
   26b6e:	4b42      	ldr	r3, [pc, #264]	; (26c78 <close+0x12c>)
   26b70:	0011      	movs	r1, r2
   26b72:	0018      	movs	r0, r3
   26b74:	4b3f      	ldr	r3, [pc, #252]	; (26c74 <close+0x128>)
   26b76:	4798      	blx	r3
   26b78:	4b40      	ldr	r3, [pc, #256]	; (26c7c <close+0x130>)
   26b7a:	0018      	movs	r0, r3
   26b7c:	4b3d      	ldr	r3, [pc, #244]	; (26c74 <close+0x128>)
   26b7e:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   26b80:	1dfb      	adds	r3, r7, #7
   26b82:	781b      	ldrb	r3, [r3, #0]
   26b84:	2b7f      	cmp	r3, #127	; 0x7f
   26b86:	d86a      	bhi.n	26c5e <close+0x112>
   26b88:	1dfb      	adds	r3, r7, #7
   26b8a:	781b      	ldrb	r3, [r3, #0]
   26b8c:	b25b      	sxtb	r3, r3
   26b8e:	4a3c      	ldr	r2, [pc, #240]	; (26c80 <close+0x134>)
   26b90:	011b      	lsls	r3, r3, #4
   26b92:	18d3      	adds	r3, r2, r3
   26b94:	330a      	adds	r3, #10
   26b96:	781b      	ldrb	r3, [r3, #0]
   26b98:	b2db      	uxtb	r3, r3
   26b9a:	2b01      	cmp	r3, #1
   26b9c:	d15f      	bne.n	26c5e <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   26b9e:	230e      	movs	r3, #14
   26ba0:	18fb      	adds	r3, r7, r3
   26ba2:	2249      	movs	r2, #73	; 0x49
   26ba4:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   26ba6:	2308      	movs	r3, #8
   26ba8:	18fb      	adds	r3, r7, r3
   26baa:	1dfa      	adds	r2, r7, #7
   26bac:	7812      	ldrb	r2, [r2, #0]
   26bae:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   26bb0:	1dfb      	adds	r3, r7, #7
   26bb2:	781b      	ldrb	r3, [r3, #0]
   26bb4:	b25b      	sxtb	r3, r3
   26bb6:	4a32      	ldr	r2, [pc, #200]	; (26c80 <close+0x134>)
   26bb8:	011b      	lsls	r3, r3, #4
   26bba:	18d3      	adds	r3, r2, r3
   26bbc:	3306      	adds	r3, #6
   26bbe:	881b      	ldrh	r3, [r3, #0]
   26bc0:	b29a      	uxth	r2, r3
   26bc2:	2308      	movs	r3, #8
   26bc4:	18fb      	adds	r3, r7, r3
   26bc6:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   26bc8:	1dfb      	adds	r3, r7, #7
   26bca:	781b      	ldrb	r3, [r3, #0]
   26bcc:	b25b      	sxtb	r3, r3
   26bce:	4a2c      	ldr	r2, [pc, #176]	; (26c80 <close+0x134>)
   26bd0:	011b      	lsls	r3, r3, #4
   26bd2:	18d3      	adds	r3, r2, r3
   26bd4:	330a      	adds	r3, #10
   26bd6:	2200      	movs	r2, #0
   26bd8:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   26bda:	1dfb      	adds	r3, r7, #7
   26bdc:	781b      	ldrb	r3, [r3, #0]
   26bde:	b25b      	sxtb	r3, r3
   26be0:	4a27      	ldr	r2, [pc, #156]	; (26c80 <close+0x134>)
   26be2:	011b      	lsls	r3, r3, #4
   26be4:	18d3      	adds	r3, r2, r3
   26be6:	3306      	adds	r3, #6
   26be8:	2200      	movs	r2, #0
   26bea:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   26bec:	1dfb      	adds	r3, r7, #7
   26bee:	781b      	ldrb	r3, [r3, #0]
   26bf0:	b25b      	sxtb	r3, r3
   26bf2:	4a23      	ldr	r2, [pc, #140]	; (26c80 <close+0x134>)
   26bf4:	011b      	lsls	r3, r3, #4
   26bf6:	18d3      	adds	r3, r2, r3
   26bf8:	330b      	adds	r3, #11
   26bfa:	781b      	ldrb	r3, [r3, #0]
   26bfc:	b2db      	uxtb	r3, r3
   26bfe:	001a      	movs	r2, r3
   26c00:	2301      	movs	r3, #1
   26c02:	4013      	ands	r3, r2
   26c04:	d003      	beq.n	26c0e <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   26c06:	230e      	movs	r3, #14
   26c08:	18fb      	adds	r3, r7, r3
   26c0a:	224e      	movs	r2, #78	; 0x4e
   26c0c:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   26c0e:	230f      	movs	r3, #15
   26c10:	18fc      	adds	r4, r7, r3
   26c12:	2308      	movs	r3, #8
   26c14:	18fa      	adds	r2, r7, r3
   26c16:	230e      	movs	r3, #14
   26c18:	18fb      	adds	r3, r7, r3
   26c1a:	7819      	ldrb	r1, [r3, #0]
   26c1c:	2300      	movs	r3, #0
   26c1e:	9302      	str	r3, [sp, #8]
   26c20:	2300      	movs	r3, #0
   26c22:	9301      	str	r3, [sp, #4]
   26c24:	2300      	movs	r3, #0
   26c26:	9300      	str	r3, [sp, #0]
   26c28:	2304      	movs	r3, #4
   26c2a:	2002      	movs	r0, #2
   26c2c:	4d15      	ldr	r5, [pc, #84]	; (26c84 <close+0x138>)
   26c2e:	47a8      	blx	r5
   26c30:	0003      	movs	r3, r0
   26c32:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   26c34:	230f      	movs	r3, #15
   26c36:	18fb      	adds	r3, r7, r3
   26c38:	781b      	ldrb	r3, [r3, #0]
   26c3a:	b25b      	sxtb	r3, r3
   26c3c:	2b00      	cmp	r3, #0
   26c3e:	d003      	beq.n	26c48 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   26c40:	230f      	movs	r3, #15
   26c42:	18fb      	adds	r3, r7, r3
   26c44:	22f7      	movs	r2, #247	; 0xf7
   26c46:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   26c48:	1dfb      	adds	r3, r7, #7
   26c4a:	781b      	ldrb	r3, [r3, #0]
   26c4c:	b25b      	sxtb	r3, r3
   26c4e:	011a      	lsls	r2, r3, #4
   26c50:	4b0b      	ldr	r3, [pc, #44]	; (26c80 <close+0x134>)
   26c52:	18d3      	adds	r3, r2, r3
   26c54:	2210      	movs	r2, #16
   26c56:	2100      	movs	r1, #0
   26c58:	0018      	movs	r0, r3
   26c5a:	4b0b      	ldr	r3, [pc, #44]	; (26c88 <close+0x13c>)
   26c5c:	4798      	blx	r3
	}
	return s8Ret;
   26c5e:	230f      	movs	r3, #15
   26c60:	18fb      	adds	r3, r7, r3
   26c62:	781b      	ldrb	r3, [r3, #0]
   26c64:	b25b      	sxtb	r3, r3
}
   26c66:	0018      	movs	r0, r3
   26c68:	46bd      	mov	sp, r7
   26c6a:	b004      	add	sp, #16
   26c6c:	bdb0      	pop	{r4, r5, r7, pc}
   26c6e:	46c0      	nop			; (mov r8, r8)
   26c70:	0003b248 	.word	0x0003b248
   26c74:	0001ee19 	.word	0x0001ee19
   26c78:	0003b288 	.word	0x0003b288
   26c7c:	0003b268 	.word	0x0003b268
   26c80:	20005b98 	.word	0x20005b98
   26c84:	00021e11 	.word	0x00021e11
   26c88:	00021bb1 	.word	0x00021bb1

00026c8c <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   26c8c:	b580      	push	{r7, lr}
   26c8e:	b086      	sub	sp, #24
   26c90:	af00      	add	r7, sp, #0
   26c92:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   26c94:	2300      	movs	r3, #0
   26c96:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   26c98:	2317      	movs	r3, #23
   26c9a:	18fb      	adds	r3, r7, r3
   26c9c:	2200      	movs	r2, #0
   26c9e:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   26ca0:	2316      	movs	r3, #22
   26ca2:	18fb      	adds	r3, r7, r3
   26ca4:	2200      	movs	r2, #0
   26ca6:	701a      	strb	r2, [r3, #0]
   26ca8:	e060      	b.n	26d6c <nmi_inet_addr+0xe0>
	{
		j = 0;
   26caa:	2315      	movs	r3, #21
   26cac:	18fb      	adds	r3, r7, r3
   26cae:	2200      	movs	r2, #0
   26cb0:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   26cb2:	2314      	movs	r3, #20
   26cb4:	18fb      	adds	r3, r7, r3
   26cb6:	687a      	ldr	r2, [r7, #4]
   26cb8:	7812      	ldrb	r2, [r2, #0]
   26cba:	701a      	strb	r2, [r3, #0]
			++j;
   26cbc:	2315      	movs	r3, #21
   26cbe:	18fb      	adds	r3, r7, r3
   26cc0:	2215      	movs	r2, #21
   26cc2:	18ba      	adds	r2, r7, r2
   26cc4:	7812      	ldrb	r2, [r2, #0]
   26cc6:	3201      	adds	r2, #1
   26cc8:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   26cca:	2315      	movs	r3, #21
   26ccc:	18fb      	adds	r3, r7, r3
   26cce:	781b      	ldrb	r3, [r3, #0]
   26cd0:	2b04      	cmp	r3, #4
   26cd2:	d901      	bls.n	26cd8 <nmi_inet_addr+0x4c>
			{
				return 0;
   26cd4:	2300      	movs	r3, #0
   26cd6:	e057      	b.n	26d88 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   26cd8:	2314      	movs	r3, #20
   26cda:	18fb      	adds	r3, r7, r3
   26cdc:	781b      	ldrb	r3, [r3, #0]
   26cde:	2b2e      	cmp	r3, #46	; 0x2e
   26ce0:	d004      	beq.n	26cec <nmi_inet_addr+0x60>
   26ce2:	2314      	movs	r3, #20
   26ce4:	18fb      	adds	r3, r7, r3
   26ce6:	781b      	ldrb	r3, [r3, #0]
   26ce8:	2b00      	cmp	r3, #0
   26cea:	d10d      	bne.n	26d08 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   26cec:	2316      	movs	r3, #22
   26cee:	18fb      	adds	r3, r7, r3
   26cf0:	781b      	ldrb	r3, [r3, #0]
   26cf2:	220c      	movs	r2, #12
   26cf4:	18ba      	adds	r2, r7, r2
   26cf6:	2117      	movs	r1, #23
   26cf8:	1879      	adds	r1, r7, r1
   26cfa:	7809      	ldrb	r1, [r1, #0]
   26cfc:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   26cfe:	2317      	movs	r3, #23
   26d00:	18fb      	adds	r3, r7, r3
   26d02:	2200      	movs	r2, #0
   26d04:	701a      	strb	r2, [r3, #0]
   26d06:	e01d      	b.n	26d44 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   26d08:	2314      	movs	r3, #20
   26d0a:	18fb      	adds	r3, r7, r3
   26d0c:	781b      	ldrb	r3, [r3, #0]
   26d0e:	2b2f      	cmp	r3, #47	; 0x2f
   26d10:	d916      	bls.n	26d40 <nmi_inet_addr+0xb4>
   26d12:	2314      	movs	r3, #20
   26d14:	18fb      	adds	r3, r7, r3
   26d16:	781b      	ldrb	r3, [r3, #0]
   26d18:	2b39      	cmp	r3, #57	; 0x39
   26d1a:	d811      	bhi.n	26d40 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   26d1c:	2317      	movs	r3, #23
   26d1e:	18fb      	adds	r3, r7, r3
   26d20:	781b      	ldrb	r3, [r3, #0]
   26d22:	1c1a      	adds	r2, r3, #0
   26d24:	0092      	lsls	r2, r2, #2
   26d26:	18d3      	adds	r3, r2, r3
   26d28:	18db      	adds	r3, r3, r3
   26d2a:	b2da      	uxtb	r2, r3
   26d2c:	2314      	movs	r3, #20
   26d2e:	18fb      	adds	r3, r7, r3
   26d30:	781b      	ldrb	r3, [r3, #0]
   26d32:	18d3      	adds	r3, r2, r3
   26d34:	b2da      	uxtb	r2, r3
   26d36:	2317      	movs	r3, #23
   26d38:	18fb      	adds	r3, r7, r3
   26d3a:	3a30      	subs	r2, #48	; 0x30
   26d3c:	701a      	strb	r2, [r3, #0]
   26d3e:	e001      	b.n	26d44 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   26d40:	2300      	movs	r3, #0
   26d42:	e021      	b.n	26d88 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   26d44:	687b      	ldr	r3, [r7, #4]
   26d46:	3301      	adds	r3, #1
   26d48:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   26d4a:	2314      	movs	r3, #20
   26d4c:	18fb      	adds	r3, r7, r3
   26d4e:	781b      	ldrb	r3, [r3, #0]
   26d50:	2b2e      	cmp	r3, #46	; 0x2e
   26d52:	d004      	beq.n	26d5e <nmi_inet_addr+0xd2>
   26d54:	2314      	movs	r3, #20
   26d56:	18fb      	adds	r3, r7, r3
   26d58:	781b      	ldrb	r3, [r3, #0]
   26d5a:	2b00      	cmp	r3, #0
   26d5c:	d1a9      	bne.n	26cb2 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   26d5e:	2316      	movs	r3, #22
   26d60:	18fb      	adds	r3, r7, r3
   26d62:	2216      	movs	r2, #22
   26d64:	18ba      	adds	r2, r7, r2
   26d66:	7812      	ldrb	r2, [r2, #0]
   26d68:	3201      	adds	r2, #1
   26d6a:	701a      	strb	r2, [r3, #0]
   26d6c:	2316      	movs	r3, #22
   26d6e:	18fb      	adds	r3, r7, r3
   26d70:	781b      	ldrb	r3, [r3, #0]
   26d72:	2b03      	cmp	r3, #3
   26d74:	d999      	bls.n	26caa <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   26d76:	230c      	movs	r3, #12
   26d78:	18f9      	adds	r1, r7, r3
   26d7a:	2310      	movs	r3, #16
   26d7c:	18fb      	adds	r3, r7, r3
   26d7e:	2204      	movs	r2, #4
   26d80:	0018      	movs	r0, r3
   26d82:	4b03      	ldr	r3, [pc, #12]	; (26d90 <nmi_inet_addr+0x104>)
   26d84:	4798      	blx	r3
	return u32IP;
   26d86:	693b      	ldr	r3, [r7, #16]
}
   26d88:	0018      	movs	r0, r3
   26d8a:	46bd      	mov	sp, r7
   26d8c:	b006      	add	sp, #24
   26d8e:	bd80      	pop	{r7, pc}
   26d90:	00021b75 	.word	0x00021b75

00026d94 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   26d94:	b5b0      	push	{r4, r5, r7, lr}
   26d96:	b088      	sub	sp, #32
   26d98:	af04      	add	r7, sp, #16
   26d9a:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   26d9c:	230f      	movs	r3, #15
   26d9e:	18fb      	adds	r3, r7, r3
   26da0:	22fa      	movs	r2, #250	; 0xfa
   26da2:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   26da4:	687b      	ldr	r3, [r7, #4]
   26da6:	0018      	movs	r0, r3
   26da8:	4b14      	ldr	r3, [pc, #80]	; (26dfc <gethostbyname+0x68>)
   26daa:	4798      	blx	r3
   26dac:	0003      	movs	r3, r0
   26dae:	001a      	movs	r2, r3
   26db0:	230e      	movs	r3, #14
   26db2:	18fb      	adds	r3, r7, r3
   26db4:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   26db6:	230e      	movs	r3, #14
   26db8:	18fb      	adds	r3, r7, r3
   26dba:	781b      	ldrb	r3, [r3, #0]
   26dbc:	2b40      	cmp	r3, #64	; 0x40
   26dbe:	d815      	bhi.n	26dec <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   26dc0:	230e      	movs	r3, #14
   26dc2:	18fb      	adds	r3, r7, r3
   26dc4:	781b      	ldrb	r3, [r3, #0]
   26dc6:	b29b      	uxth	r3, r3
   26dc8:	3301      	adds	r3, #1
   26dca:	b299      	uxth	r1, r3
   26dcc:	230f      	movs	r3, #15
   26dce:	18fc      	adds	r4, r7, r3
   26dd0:	687a      	ldr	r2, [r7, #4]
   26dd2:	2300      	movs	r3, #0
   26dd4:	9302      	str	r3, [sp, #8]
   26dd6:	2300      	movs	r3, #0
   26dd8:	9301      	str	r3, [sp, #4]
   26dda:	2300      	movs	r3, #0
   26ddc:	9300      	str	r3, [sp, #0]
   26dde:	000b      	movs	r3, r1
   26de0:	214a      	movs	r1, #74	; 0x4a
   26de2:	2002      	movs	r0, #2
   26de4:	4d06      	ldr	r5, [pc, #24]	; (26e00 <gethostbyname+0x6c>)
   26de6:	47a8      	blx	r5
   26de8:	0003      	movs	r3, r0
   26dea:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   26dec:	230f      	movs	r3, #15
   26dee:	18fb      	adds	r3, r7, r3
   26df0:	781b      	ldrb	r3, [r3, #0]
   26df2:	b25b      	sxtb	r3, r3
}
   26df4:	0018      	movs	r0, r3
   26df6:	46bd      	mov	sp, r7
   26df8:	b004      	add	sp, #16
   26dfa:	bdb0      	pop	{r4, r5, r7, pc}
   26dfc:	00021bef 	.word	0x00021bef
   26e00:	00021e11 	.word	0x00021e11

00026e04 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   26e04:	b580      	push	{r7, lr}
   26e06:	b082      	sub	sp, #8
   26e08:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   26e0a:	003b      	movs	r3, r7
   26e0c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   26e0e:	687b      	ldr	r3, [r7, #4]
   26e10:	22b9      	movs	r2, #185	; 0xb9
   26e12:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   26e14:	4b13      	ldr	r3, [pc, #76]	; (26e64 <spi_flash_enter_low_power_mode+0x60>)
   26e16:	2100      	movs	r1, #0
   26e18:	0018      	movs	r0, r3
   26e1a:	4b13      	ldr	r3, [pc, #76]	; (26e68 <spi_flash_enter_low_power_mode+0x64>)
   26e1c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   26e1e:	687b      	ldr	r3, [r7, #4]
   26e20:	781b      	ldrb	r3, [r3, #0]
   26e22:	001a      	movs	r2, r3
   26e24:	4b11      	ldr	r3, [pc, #68]	; (26e6c <spi_flash_enter_low_power_mode+0x68>)
   26e26:	0011      	movs	r1, r2
   26e28:	0018      	movs	r0, r3
   26e2a:	4b0f      	ldr	r3, [pc, #60]	; (26e68 <spi_flash_enter_low_power_mode+0x64>)
   26e2c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   26e2e:	4b10      	ldr	r3, [pc, #64]	; (26e70 <spi_flash_enter_low_power_mode+0x6c>)
   26e30:	2101      	movs	r1, #1
   26e32:	0018      	movs	r0, r3
   26e34:	4b0c      	ldr	r3, [pc, #48]	; (26e68 <spi_flash_enter_low_power_mode+0x64>)
   26e36:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   26e38:	4b0e      	ldr	r3, [pc, #56]	; (26e74 <spi_flash_enter_low_power_mode+0x70>)
   26e3a:	2100      	movs	r1, #0
   26e3c:	0018      	movs	r0, r3
   26e3e:	4b0a      	ldr	r3, [pc, #40]	; (26e68 <spi_flash_enter_low_power_mode+0x64>)
   26e40:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   26e42:	4b0d      	ldr	r3, [pc, #52]	; (26e78 <spi_flash_enter_low_power_mode+0x74>)
   26e44:	2181      	movs	r1, #129	; 0x81
   26e46:	0018      	movs	r0, r3
   26e48:	4b07      	ldr	r3, [pc, #28]	; (26e68 <spi_flash_enter_low_power_mode+0x64>)
   26e4a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   26e4c:	46c0      	nop			; (mov r8, r8)
   26e4e:	4b0b      	ldr	r3, [pc, #44]	; (26e7c <spi_flash_enter_low_power_mode+0x78>)
   26e50:	0018      	movs	r0, r3
   26e52:	4b0b      	ldr	r3, [pc, #44]	; (26e80 <spi_flash_enter_low_power_mode+0x7c>)
   26e54:	4798      	blx	r3
   26e56:	0003      	movs	r3, r0
   26e58:	2b01      	cmp	r3, #1
   26e5a:	d1f8      	bne.n	26e4e <spi_flash_enter_low_power_mode+0x4a>
}
   26e5c:	46c0      	nop			; (mov r8, r8)
   26e5e:	46bd      	mov	sp, r7
   26e60:	b002      	add	sp, #8
   26e62:	bd80      	pop	{r7, pc}
   26e64:	00010208 	.word	0x00010208
   26e68:	00023c65 	.word	0x00023c65
   26e6c:	0001020c 	.word	0x0001020c
   26e70:	00010214 	.word	0x00010214
   26e74:	0001021c 	.word	0x0001021c
   26e78:	00010204 	.word	0x00010204
   26e7c:	00010218 	.word	0x00010218
   26e80:	00023c21 	.word	0x00023c21

00026e84 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   26e84:	b580      	push	{r7, lr}
   26e86:	b082      	sub	sp, #8
   26e88:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   26e8a:	003b      	movs	r3, r7
   26e8c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   26e8e:	687b      	ldr	r3, [r7, #4]
   26e90:	22ab      	movs	r2, #171	; 0xab
   26e92:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   26e94:	4b13      	ldr	r3, [pc, #76]	; (26ee4 <spi_flash_leave_low_power_mode+0x60>)
   26e96:	2100      	movs	r1, #0
   26e98:	0018      	movs	r0, r3
   26e9a:	4b13      	ldr	r3, [pc, #76]	; (26ee8 <spi_flash_leave_low_power_mode+0x64>)
   26e9c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   26e9e:	687b      	ldr	r3, [r7, #4]
   26ea0:	781b      	ldrb	r3, [r3, #0]
   26ea2:	001a      	movs	r2, r3
   26ea4:	4b11      	ldr	r3, [pc, #68]	; (26eec <spi_flash_leave_low_power_mode+0x68>)
   26ea6:	0011      	movs	r1, r2
   26ea8:	0018      	movs	r0, r3
   26eaa:	4b0f      	ldr	r3, [pc, #60]	; (26ee8 <spi_flash_leave_low_power_mode+0x64>)
   26eac:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   26eae:	4b10      	ldr	r3, [pc, #64]	; (26ef0 <spi_flash_leave_low_power_mode+0x6c>)
   26eb0:	2101      	movs	r1, #1
   26eb2:	0018      	movs	r0, r3
   26eb4:	4b0c      	ldr	r3, [pc, #48]	; (26ee8 <spi_flash_leave_low_power_mode+0x64>)
   26eb6:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   26eb8:	4b0e      	ldr	r3, [pc, #56]	; (26ef4 <spi_flash_leave_low_power_mode+0x70>)
   26eba:	2100      	movs	r1, #0
   26ebc:	0018      	movs	r0, r3
   26ebe:	4b0a      	ldr	r3, [pc, #40]	; (26ee8 <spi_flash_leave_low_power_mode+0x64>)
   26ec0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   26ec2:	4b0d      	ldr	r3, [pc, #52]	; (26ef8 <spi_flash_leave_low_power_mode+0x74>)
   26ec4:	2181      	movs	r1, #129	; 0x81
   26ec6:	0018      	movs	r0, r3
   26ec8:	4b07      	ldr	r3, [pc, #28]	; (26ee8 <spi_flash_leave_low_power_mode+0x64>)
   26eca:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   26ecc:	46c0      	nop			; (mov r8, r8)
   26ece:	4b0b      	ldr	r3, [pc, #44]	; (26efc <spi_flash_leave_low_power_mode+0x78>)
   26ed0:	0018      	movs	r0, r3
   26ed2:	4b0b      	ldr	r3, [pc, #44]	; (26f00 <spi_flash_leave_low_power_mode+0x7c>)
   26ed4:	4798      	blx	r3
   26ed6:	0003      	movs	r3, r0
   26ed8:	2b01      	cmp	r3, #1
   26eda:	d1f8      	bne.n	26ece <spi_flash_leave_low_power_mode+0x4a>
}
   26edc:	46c0      	nop			; (mov r8, r8)
   26ede:	46bd      	mov	sp, r7
   26ee0:	b002      	add	sp, #8
   26ee2:	bd80      	pop	{r7, pc}
   26ee4:	00010208 	.word	0x00010208
   26ee8:	00023c65 	.word	0x00023c65
   26eec:	0001020c 	.word	0x0001020c
   26ef0:	00010214 	.word	0x00010214
   26ef4:	0001021c 	.word	0x0001021c
   26ef8:	00010204 	.word	0x00010204
   26efc:	00010218 	.word	0x00010218
   26f00:	00023c21 	.word	0x00023c21

00026f04 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   26f04:	b590      	push	{r4, r7, lr}
   26f06:	b085      	sub	sp, #20
   26f08:	af00      	add	r7, sp, #0
   26f0a:	0002      	movs	r2, r0
   26f0c:	1dfb      	adds	r3, r7, #7
   26f0e:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   26f10:	230f      	movs	r3, #15
   26f12:	18fb      	adds	r3, r7, r3
   26f14:	2200      	movs	r2, #0
   26f16:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   26f18:	4b24      	ldr	r3, [pc, #144]	; (26fac <spi_flash_enable+0xa8>)
   26f1a:	4798      	blx	r3
   26f1c:	0003      	movs	r3, r0
   26f1e:	051b      	lsls	r3, r3, #20
   26f20:	0d1b      	lsrs	r3, r3, #20
   26f22:	4a23      	ldr	r2, [pc, #140]	; (26fb0 <spi_flash_enable+0xac>)
   26f24:	4293      	cmp	r3, r2
   26f26:	d938      	bls.n	26f9a <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   26f28:	230f      	movs	r3, #15
   26f2a:	18fc      	adds	r4, r7, r3
   26f2c:	2308      	movs	r3, #8
   26f2e:	18fb      	adds	r3, r7, r3
   26f30:	4a20      	ldr	r2, [pc, #128]	; (26fb4 <spi_flash_enable+0xb0>)
   26f32:	0019      	movs	r1, r3
   26f34:	0010      	movs	r0, r2
   26f36:	4b20      	ldr	r3, [pc, #128]	; (26fb8 <spi_flash_enable+0xb4>)
   26f38:	4798      	blx	r3
   26f3a:	0003      	movs	r3, r0
   26f3c:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   26f3e:	230f      	movs	r3, #15
   26f40:	18fb      	adds	r3, r7, r3
   26f42:	781b      	ldrb	r3, [r3, #0]
   26f44:	b25b      	sxtb	r3, r3
   26f46:	2b00      	cmp	r3, #0
   26f48:	d126      	bne.n	26f98 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   26f4a:	68bb      	ldr	r3, [r7, #8]
   26f4c:	4a1b      	ldr	r2, [pc, #108]	; (26fbc <spi_flash_enable+0xb8>)
   26f4e:	4013      	ands	r3, r2
   26f50:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   26f52:	68bb      	ldr	r3, [r7, #8]
   26f54:	4a1a      	ldr	r2, [pc, #104]	; (26fc0 <spi_flash_enable+0xbc>)
   26f56:	4313      	orrs	r3, r2
   26f58:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   26f5a:	68bb      	ldr	r3, [r7, #8]
   26f5c:	4a15      	ldr	r2, [pc, #84]	; (26fb4 <spi_flash_enable+0xb0>)
   26f5e:	0019      	movs	r1, r3
   26f60:	0010      	movs	r0, r2
   26f62:	4b18      	ldr	r3, [pc, #96]	; (26fc4 <spi_flash_enable+0xc0>)
   26f64:	4798      	blx	r3
		if(enable) {
   26f66:	1dfb      	adds	r3, r7, #7
   26f68:	781b      	ldrb	r3, [r3, #0]
   26f6a:	2b00      	cmp	r3, #0
   26f6c:	d002      	beq.n	26f74 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   26f6e:	4b16      	ldr	r3, [pc, #88]	; (26fc8 <spi_flash_enable+0xc4>)
   26f70:	4798      	blx	r3
   26f72:	e001      	b.n	26f78 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   26f74:	4b15      	ldr	r3, [pc, #84]	; (26fcc <spi_flash_enable+0xc8>)
   26f76:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   26f78:	68bb      	ldr	r3, [r7, #8]
   26f7a:	4a10      	ldr	r2, [pc, #64]	; (26fbc <spi_flash_enable+0xb8>)
   26f7c:	4013      	ands	r3, r2
   26f7e:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   26f80:	68bb      	ldr	r3, [r7, #8]
   26f82:	2280      	movs	r2, #128	; 0x80
   26f84:	0252      	lsls	r2, r2, #9
   26f86:	4313      	orrs	r3, r2
   26f88:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   26f8a:	68bb      	ldr	r3, [r7, #8]
   26f8c:	4a09      	ldr	r2, [pc, #36]	; (26fb4 <spi_flash_enable+0xb0>)
   26f8e:	0019      	movs	r1, r3
   26f90:	0010      	movs	r0, r2
   26f92:	4b0c      	ldr	r3, [pc, #48]	; (26fc4 <spi_flash_enable+0xc0>)
   26f94:	4798      	blx	r3
   26f96:	e000      	b.n	26f9a <spi_flash_enable+0x96>
			goto ERR1;
   26f98:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   26f9a:	230f      	movs	r3, #15
   26f9c:	18fb      	adds	r3, r7, r3
   26f9e:	781b      	ldrb	r3, [r3, #0]
   26fa0:	b25b      	sxtb	r3, r3
}
   26fa2:	0018      	movs	r0, r3
   26fa4:	46bd      	mov	sp, r7
   26fa6:	b005      	add	sp, #20
   26fa8:	bd90      	pop	{r4, r7, pc}
   26faa:	46c0      	nop			; (mov r8, r8)
   26fac:	00023541 	.word	0x00023541
   26fb0:	0000039f 	.word	0x0000039f
   26fb4:	00001410 	.word	0x00001410
   26fb8:	00023c41 	.word	0x00023c41
   26fbc:	f8888fff 	.word	0xf8888fff
   26fc0:	01111000 	.word	0x01111000
   26fc4:	00023c65 	.word	0x00023c65
   26fc8:	00026e85 	.word	0x00026e85
   26fcc:	00026e05 	.word	0x00026e05

00026fd0 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   26fd0:	b580      	push	{r7, lr}
   26fd2:	b084      	sub	sp, #16
   26fd4:	af00      	add	r7, sp, #0
   26fd6:	0002      	movs	r2, r0
   26fd8:	1dfb      	adds	r3, r7, #7
   26fda:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   26fdc:	1dfb      	adds	r3, r7, #7
   26fde:	781b      	ldrb	r3, [r3, #0]
   26fe0:	2b00      	cmp	r3, #0
   26fe2:	d108      	bne.n	26ff6 <mem_test_unit_ready+0x26>
   26fe4:	1dfb      	adds	r3, r7, #7
   26fe6:	781a      	ldrb	r2, [r3, #0]
   26fe8:	4b08      	ldr	r3, [pc, #32]	; (2700c <mem_test_unit_ready+0x3c>)
   26fea:	0152      	lsls	r2, r2, #5
   26fec:	58d3      	ldr	r3, [r2, r3]
   26fee:	4798      	blx	r3
   26ff0:	0003      	movs	r3, r0
   26ff2:	001a      	movs	r2, r3
   26ff4:	e000      	b.n	26ff8 <mem_test_unit_ready+0x28>
   26ff6:	2201      	movs	r2, #1
  status =
   26ff8:	230f      	movs	r3, #15
   26ffa:	18fb      	adds	r3, r7, r3
   26ffc:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   26ffe:	230f      	movs	r3, #15
   27000:	18fb      	adds	r3, r7, r3
   27002:	781b      	ldrb	r3, [r3, #0]
}
   27004:	0018      	movs	r0, r3
   27006:	46bd      	mov	sp, r7
   27008:	b004      	add	sp, #16
   2700a:	bd80      	pop	{r7, pc}
   2700c:	0003b314 	.word	0x0003b314

00027010 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   27010:	b580      	push	{r7, lr}
   27012:	b084      	sub	sp, #16
   27014:	af00      	add	r7, sp, #0
   27016:	0002      	movs	r2, r0
   27018:	6039      	str	r1, [r7, #0]
   2701a:	1dfb      	adds	r3, r7, #7
   2701c:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   2701e:	1dfb      	adds	r3, r7, #7
   27020:	781b      	ldrb	r3, [r3, #0]
   27022:	2b00      	cmp	r3, #0
   27024:	d10c      	bne.n	27040 <mem_read_capacity+0x30>
   27026:	1dfb      	adds	r3, r7, #7
   27028:	781b      	ldrb	r3, [r3, #0]
   2702a:	4a0b      	ldr	r2, [pc, #44]	; (27058 <mem_read_capacity+0x48>)
   2702c:	015b      	lsls	r3, r3, #5
   2702e:	18d3      	adds	r3, r2, r3
   27030:	3304      	adds	r3, #4
   27032:	681b      	ldr	r3, [r3, #0]
   27034:	683a      	ldr	r2, [r7, #0]
   27036:	0010      	movs	r0, r2
   27038:	4798      	blx	r3
   2703a:	0003      	movs	r3, r0
   2703c:	001a      	movs	r2, r3
   2703e:	e000      	b.n	27042 <mem_read_capacity+0x32>
   27040:	2201      	movs	r2, #1
  status =
   27042:	230f      	movs	r3, #15
   27044:	18fb      	adds	r3, r7, r3
   27046:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   27048:	230f      	movs	r3, #15
   2704a:	18fb      	adds	r3, r7, r3
   2704c:	781b      	ldrb	r3, [r3, #0]
}
   2704e:	0018      	movs	r0, r3
   27050:	46bd      	mov	sp, r7
   27052:	b004      	add	sp, #16
   27054:	bd80      	pop	{r7, pc}
   27056:	46c0      	nop			; (mov r8, r8)
   27058:	0003b314 	.word	0x0003b314

0002705c <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   2705c:	b580      	push	{r7, lr}
   2705e:	b084      	sub	sp, #16
   27060:	af00      	add	r7, sp, #0
   27062:	0002      	movs	r2, r0
   27064:	1dfb      	adds	r3, r7, #7
   27066:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   27068:	1dfb      	adds	r3, r7, #7
   2706a:	781b      	ldrb	r3, [r3, #0]
   2706c:	425a      	negs	r2, r3
   2706e:	4153      	adcs	r3, r2
   27070:	b2da      	uxtb	r2, r3
  sector_size =
   27072:	230f      	movs	r3, #15
   27074:	18fb      	adds	r3, r7, r3
   27076:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   27078:	230f      	movs	r3, #15
   2707a:	18fb      	adds	r3, r7, r3
   2707c:	781b      	ldrb	r3, [r3, #0]
}
   2707e:	0018      	movs	r0, r3
   27080:	46bd      	mov	sp, r7
   27082:	b004      	add	sp, #16
   27084:	bd80      	pop	{r7, pc}
	...

00027088 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   27088:	b580      	push	{r7, lr}
   2708a:	b084      	sub	sp, #16
   2708c:	af00      	add	r7, sp, #0
   2708e:	0002      	movs	r2, r0
   27090:	1dfb      	adds	r3, r7, #7
   27092:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   27094:	1dfb      	adds	r3, r7, #7
   27096:	781b      	ldrb	r3, [r3, #0]
   27098:	2b00      	cmp	r3, #0
   2709a:	d109      	bne.n	270b0 <mem_wr_protect+0x28>
   2709c:	1dfb      	adds	r3, r7, #7
   2709e:	781b      	ldrb	r3, [r3, #0]
   270a0:	4a0a      	ldr	r2, [pc, #40]	; (270cc <mem_wr_protect+0x44>)
   270a2:	015b      	lsls	r3, r3, #5
   270a4:	18d3      	adds	r3, r2, r3
   270a6:	330c      	adds	r3, #12
   270a8:	681b      	ldr	r3, [r3, #0]
   270aa:	4798      	blx	r3
   270ac:	1e03      	subs	r3, r0, #0
   270ae:	d001      	beq.n	270b4 <mem_wr_protect+0x2c>
   270b0:	2201      	movs	r2, #1
   270b2:	e000      	b.n	270b6 <mem_wr_protect+0x2e>
   270b4:	2200      	movs	r2, #0
  wr_protect =
   270b6:	230f      	movs	r3, #15
   270b8:	18fb      	adds	r3, r7, r3
   270ba:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   270bc:	230f      	movs	r3, #15
   270be:	18fb      	adds	r3, r7, r3
   270c0:	781b      	ldrb	r3, [r3, #0]
}
   270c2:	0018      	movs	r0, r3
   270c4:	46bd      	mov	sp, r7
   270c6:	b004      	add	sp, #16
   270c8:	bd80      	pop	{r7, pc}
   270ca:	46c0      	nop			; (mov r8, r8)
   270cc:	0003b314 	.word	0x0003b314

000270d0 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   270d0:	b580      	push	{r7, lr}
   270d2:	b086      	sub	sp, #24
   270d4:	af00      	add	r7, sp, #0
   270d6:	60b9      	str	r1, [r7, #8]
   270d8:	607a      	str	r2, [r7, #4]
   270da:	230f      	movs	r3, #15
   270dc:	18fb      	adds	r3, r7, r3
   270de:	1c02      	adds	r2, r0, #0
   270e0:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   270e2:	230f      	movs	r3, #15
   270e4:	18fb      	adds	r3, r7, r3
   270e6:	781b      	ldrb	r3, [r3, #0]
   270e8:	2b00      	cmp	r3, #0
   270ea:	d10e      	bne.n	2710a <memory_2_ram+0x3a>
   270ec:	230f      	movs	r3, #15
   270ee:	18fb      	adds	r3, r7, r3
   270f0:	781b      	ldrb	r3, [r3, #0]
   270f2:	4a0b      	ldr	r2, [pc, #44]	; (27120 <memory_2_ram+0x50>)
   270f4:	015b      	lsls	r3, r3, #5
   270f6:	18d3      	adds	r3, r2, r3
   270f8:	3314      	adds	r3, #20
   270fa:	681b      	ldr	r3, [r3, #0]
   270fc:	6879      	ldr	r1, [r7, #4]
   270fe:	68ba      	ldr	r2, [r7, #8]
   27100:	0010      	movs	r0, r2
   27102:	4798      	blx	r3
   27104:	0003      	movs	r3, r0
   27106:	001a      	movs	r2, r3
   27108:	e000      	b.n	2710c <memory_2_ram+0x3c>
   2710a:	2201      	movs	r2, #1
  status =
   2710c:	2317      	movs	r3, #23
   2710e:	18fb      	adds	r3, r7, r3
   27110:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   27112:	2317      	movs	r3, #23
   27114:	18fb      	adds	r3, r7, r3
   27116:	781b      	ldrb	r3, [r3, #0]
}
   27118:	0018      	movs	r0, r3
   2711a:	46bd      	mov	sp, r7
   2711c:	b006      	add	sp, #24
   2711e:	bd80      	pop	{r7, pc}
   27120:	0003b314 	.word	0x0003b314

00027124 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   27124:	b580      	push	{r7, lr}
   27126:	b086      	sub	sp, #24
   27128:	af00      	add	r7, sp, #0
   2712a:	60b9      	str	r1, [r7, #8]
   2712c:	607a      	str	r2, [r7, #4]
   2712e:	230f      	movs	r3, #15
   27130:	18fb      	adds	r3, r7, r3
   27132:	1c02      	adds	r2, r0, #0
   27134:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   27136:	230f      	movs	r3, #15
   27138:	18fb      	adds	r3, r7, r3
   2713a:	781b      	ldrb	r3, [r3, #0]
   2713c:	2b00      	cmp	r3, #0
   2713e:	d10e      	bne.n	2715e <ram_2_memory+0x3a>
   27140:	230f      	movs	r3, #15
   27142:	18fb      	adds	r3, r7, r3
   27144:	781b      	ldrb	r3, [r3, #0]
   27146:	4a0b      	ldr	r2, [pc, #44]	; (27174 <ram_2_memory+0x50>)
   27148:	015b      	lsls	r3, r3, #5
   2714a:	18d3      	adds	r3, r2, r3
   2714c:	3318      	adds	r3, #24
   2714e:	681b      	ldr	r3, [r3, #0]
   27150:	6879      	ldr	r1, [r7, #4]
   27152:	68ba      	ldr	r2, [r7, #8]
   27154:	0010      	movs	r0, r2
   27156:	4798      	blx	r3
   27158:	0003      	movs	r3, r0
   2715a:	001a      	movs	r2, r3
   2715c:	e000      	b.n	27160 <ram_2_memory+0x3c>
   2715e:	2201      	movs	r2, #1
  status =
   27160:	2317      	movs	r3, #23
   27162:	18fb      	adds	r3, r7, r3
   27164:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   27166:	2317      	movs	r3, #23
   27168:	18fb      	adds	r3, r7, r3
   2716a:	781b      	ldrb	r3, [r3, #0]
}
   2716c:	0018      	movs	r0, r3
   2716e:	46bd      	mov	sp, r7
   27170:	b006      	add	sp, #24
   27172:	bd80      	pop	{r7, pc}
   27174:	0003b314 	.word	0x0003b314

00027178 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   27178:	b580      	push	{r7, lr}
   2717a:	b082      	sub	sp, #8
   2717c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   2717e:	4b10      	ldr	r3, [pc, #64]	; (271c0 <cpu_irq_enter_critical+0x48>)
   27180:	681b      	ldr	r3, [r3, #0]
   27182:	2b00      	cmp	r3, #0
   27184:	d112      	bne.n	271ac <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   27186:	f3ef 8310 	mrs	r3, PRIMASK
   2718a:	607b      	str	r3, [r7, #4]
  return(result);
   2718c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   2718e:	2b00      	cmp	r3, #0
   27190:	d109      	bne.n	271a6 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   27192:	b672      	cpsid	i
   27194:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   27198:	4b0a      	ldr	r3, [pc, #40]	; (271c4 <cpu_irq_enter_critical+0x4c>)
   2719a:	2200      	movs	r2, #0
   2719c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   2719e:	4b0a      	ldr	r3, [pc, #40]	; (271c8 <cpu_irq_enter_critical+0x50>)
   271a0:	2201      	movs	r2, #1
   271a2:	701a      	strb	r2, [r3, #0]
   271a4:	e002      	b.n	271ac <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   271a6:	4b08      	ldr	r3, [pc, #32]	; (271c8 <cpu_irq_enter_critical+0x50>)
   271a8:	2200      	movs	r2, #0
   271aa:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   271ac:	4b04      	ldr	r3, [pc, #16]	; (271c0 <cpu_irq_enter_critical+0x48>)
   271ae:	681b      	ldr	r3, [r3, #0]
   271b0:	1c5a      	adds	r2, r3, #1
   271b2:	4b03      	ldr	r3, [pc, #12]	; (271c0 <cpu_irq_enter_critical+0x48>)
   271b4:	601a      	str	r2, [r3, #0]
}
   271b6:	46c0      	nop			; (mov r8, r8)
   271b8:	46bd      	mov	sp, r7
   271ba:	b002      	add	sp, #8
   271bc:	bd80      	pop	{r7, pc}
   271be:	46c0      	nop			; (mov r8, r8)
   271c0:	200042bc 	.word	0x200042bc
   271c4:	20000126 	.word	0x20000126
   271c8:	200042c0 	.word	0x200042c0

000271cc <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   271cc:	b580      	push	{r7, lr}
   271ce:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   271d0:	4b0b      	ldr	r3, [pc, #44]	; (27200 <cpu_irq_leave_critical+0x34>)
   271d2:	681b      	ldr	r3, [r3, #0]
   271d4:	1e5a      	subs	r2, r3, #1
   271d6:	4b0a      	ldr	r3, [pc, #40]	; (27200 <cpu_irq_leave_critical+0x34>)
   271d8:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   271da:	4b09      	ldr	r3, [pc, #36]	; (27200 <cpu_irq_leave_critical+0x34>)
   271dc:	681b      	ldr	r3, [r3, #0]
   271de:	2b00      	cmp	r3, #0
   271e0:	d10a      	bne.n	271f8 <cpu_irq_leave_critical+0x2c>
   271e2:	4b08      	ldr	r3, [pc, #32]	; (27204 <cpu_irq_leave_critical+0x38>)
   271e4:	781b      	ldrb	r3, [r3, #0]
   271e6:	b2db      	uxtb	r3, r3
   271e8:	2b00      	cmp	r3, #0
   271ea:	d005      	beq.n	271f8 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   271ec:	4b06      	ldr	r3, [pc, #24]	; (27208 <cpu_irq_leave_critical+0x3c>)
   271ee:	2201      	movs	r2, #1
   271f0:	701a      	strb	r2, [r3, #0]
   271f2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   271f6:	b662      	cpsie	i
	}
}
   271f8:	46c0      	nop			; (mov r8, r8)
   271fa:	46bd      	mov	sp, r7
   271fc:	bd80      	pop	{r7, pc}
   271fe:	46c0      	nop			; (mov r8, r8)
   27200:	200042bc 	.word	0x200042bc
   27204:	200042c0 	.word	0x200042c0
   27208:	20000126 	.word	0x20000126

0002720c <system_pinmux_get_group_from_gpio_pin>:
{
   2720c:	b580      	push	{r7, lr}
   2720e:	b084      	sub	sp, #16
   27210:	af00      	add	r7, sp, #0
   27212:	0002      	movs	r2, r0
   27214:	1dfb      	adds	r3, r7, #7
   27216:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   27218:	230f      	movs	r3, #15
   2721a:	18fb      	adds	r3, r7, r3
   2721c:	1dfa      	adds	r2, r7, #7
   2721e:	7812      	ldrb	r2, [r2, #0]
   27220:	09d2      	lsrs	r2, r2, #7
   27222:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   27224:	230e      	movs	r3, #14
   27226:	18fb      	adds	r3, r7, r3
   27228:	1dfa      	adds	r2, r7, #7
   2722a:	7812      	ldrb	r2, [r2, #0]
   2722c:	0952      	lsrs	r2, r2, #5
   2722e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   27230:	4b0d      	ldr	r3, [pc, #52]	; (27268 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   27232:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   27234:	230f      	movs	r3, #15
   27236:	18fb      	adds	r3, r7, r3
   27238:	781b      	ldrb	r3, [r3, #0]
   2723a:	2b00      	cmp	r3, #0
   2723c:	d10f      	bne.n	2725e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2723e:	230f      	movs	r3, #15
   27240:	18fb      	adds	r3, r7, r3
   27242:	781b      	ldrb	r3, [r3, #0]
   27244:	009b      	lsls	r3, r3, #2
   27246:	2210      	movs	r2, #16
   27248:	4694      	mov	ip, r2
   2724a:	44bc      	add	ip, r7
   2724c:	4463      	add	r3, ip
   2724e:	3b08      	subs	r3, #8
   27250:	681a      	ldr	r2, [r3, #0]
   27252:	230e      	movs	r3, #14
   27254:	18fb      	adds	r3, r7, r3
   27256:	781b      	ldrb	r3, [r3, #0]
   27258:	01db      	lsls	r3, r3, #7
   2725a:	18d3      	adds	r3, r2, r3
   2725c:	e000      	b.n	27260 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2725e:	2300      	movs	r3, #0
}
   27260:	0018      	movs	r0, r3
   27262:	46bd      	mov	sp, r7
   27264:	b004      	add	sp, #16
   27266:	bd80      	pop	{r7, pc}
   27268:	41004400 	.word	0x41004400

0002726c <port_get_group_from_gpio_pin>:
{
   2726c:	b580      	push	{r7, lr}
   2726e:	b082      	sub	sp, #8
   27270:	af00      	add	r7, sp, #0
   27272:	0002      	movs	r2, r0
   27274:	1dfb      	adds	r3, r7, #7
   27276:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   27278:	1dfb      	adds	r3, r7, #7
   2727a:	781b      	ldrb	r3, [r3, #0]
   2727c:	0018      	movs	r0, r3
   2727e:	4b03      	ldr	r3, [pc, #12]	; (2728c <port_get_group_from_gpio_pin+0x20>)
   27280:	4798      	blx	r3
   27282:	0003      	movs	r3, r0
}
   27284:	0018      	movs	r0, r3
   27286:	46bd      	mov	sp, r7
   27288:	b002      	add	sp, #8
   2728a:	bd80      	pop	{r7, pc}
   2728c:	0002720d 	.word	0x0002720d

00027290 <port_get_config_defaults>:
{
   27290:	b580      	push	{r7, lr}
   27292:	b082      	sub	sp, #8
   27294:	af00      	add	r7, sp, #0
   27296:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   27298:	687b      	ldr	r3, [r7, #4]
   2729a:	2200      	movs	r2, #0
   2729c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   2729e:	687b      	ldr	r3, [r7, #4]
   272a0:	2201      	movs	r2, #1
   272a2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   272a4:	687b      	ldr	r3, [r7, #4]
   272a6:	2200      	movs	r2, #0
   272a8:	709a      	strb	r2, [r3, #2]
}
   272aa:	46c0      	nop			; (mov r8, r8)
   272ac:	46bd      	mov	sp, r7
   272ae:	b002      	add	sp, #8
   272b0:	bd80      	pop	{r7, pc}
	...

000272b4 <port_pin_set_output_level>:
{
   272b4:	b580      	push	{r7, lr}
   272b6:	b084      	sub	sp, #16
   272b8:	af00      	add	r7, sp, #0
   272ba:	0002      	movs	r2, r0
   272bc:	1dfb      	adds	r3, r7, #7
   272be:	701a      	strb	r2, [r3, #0]
   272c0:	1dbb      	adds	r3, r7, #6
   272c2:	1c0a      	adds	r2, r1, #0
   272c4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   272c6:	1dfb      	adds	r3, r7, #7
   272c8:	781b      	ldrb	r3, [r3, #0]
   272ca:	0018      	movs	r0, r3
   272cc:	4b0d      	ldr	r3, [pc, #52]	; (27304 <port_pin_set_output_level+0x50>)
   272ce:	4798      	blx	r3
   272d0:	0003      	movs	r3, r0
   272d2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   272d4:	1dfb      	adds	r3, r7, #7
   272d6:	781b      	ldrb	r3, [r3, #0]
   272d8:	221f      	movs	r2, #31
   272da:	4013      	ands	r3, r2
   272dc:	2201      	movs	r2, #1
   272de:	409a      	lsls	r2, r3
   272e0:	0013      	movs	r3, r2
   272e2:	60bb      	str	r3, [r7, #8]
	if (level) {
   272e4:	1dbb      	adds	r3, r7, #6
   272e6:	781b      	ldrb	r3, [r3, #0]
   272e8:	2b00      	cmp	r3, #0
   272ea:	d003      	beq.n	272f4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   272ec:	68fb      	ldr	r3, [r7, #12]
   272ee:	68ba      	ldr	r2, [r7, #8]
   272f0:	619a      	str	r2, [r3, #24]
}
   272f2:	e002      	b.n	272fa <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   272f4:	68fb      	ldr	r3, [r7, #12]
   272f6:	68ba      	ldr	r2, [r7, #8]
   272f8:	615a      	str	r2, [r3, #20]
}
   272fa:	46c0      	nop			; (mov r8, r8)
   272fc:	46bd      	mov	sp, r7
   272fe:	b004      	add	sp, #16
   27300:	bd80      	pop	{r7, pc}
   27302:	46c0      	nop			; (mov r8, r8)
   27304:	0002726d 	.word	0x0002726d

00027308 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   27308:	b580      	push	{r7, lr}
   2730a:	b082      	sub	sp, #8
   2730c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   2730e:	1d3b      	adds	r3, r7, #4
   27310:	0018      	movs	r0, r3
   27312:	4b0e      	ldr	r3, [pc, #56]	; (2734c <system_board_init+0x44>)
   27314:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   27316:	1d3b      	adds	r3, r7, #4
   27318:	2201      	movs	r2, #1
   2731a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   2731c:	1d3b      	adds	r3, r7, #4
   2731e:	0019      	movs	r1, r3
   27320:	2017      	movs	r0, #23
   27322:	4b0b      	ldr	r3, [pc, #44]	; (27350 <system_board_init+0x48>)
   27324:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   27326:	2101      	movs	r1, #1
   27328:	2017      	movs	r0, #23
   2732a:	4b0a      	ldr	r3, [pc, #40]	; (27354 <system_board_init+0x4c>)
   2732c:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   2732e:	1d3b      	adds	r3, r7, #4
   27330:	2200      	movs	r2, #0
   27332:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   27334:	1d3b      	adds	r3, r7, #4
   27336:	2201      	movs	r2, #1
   27338:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   2733a:	1d3b      	adds	r3, r7, #4
   2733c:	0019      	movs	r1, r3
   2733e:	2037      	movs	r0, #55	; 0x37
   27340:	4b03      	ldr	r3, [pc, #12]	; (27350 <system_board_init+0x48>)
   27342:	4798      	blx	r3
}
   27344:	46c0      	nop			; (mov r8, r8)
   27346:	46bd      	mov	sp, r7
   27348:	b002      	add	sp, #8
   2734a:	bd80      	pop	{r7, pc}
   2734c:	00027291 	.word	0x00027291
   27350:	0002797d 	.word	0x0002797d
   27354:	000272b5 	.word	0x000272b5

00027358 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   27358:	b580      	push	{r7, lr}
   2735a:	b084      	sub	sp, #16
   2735c:	af00      	add	r7, sp, #0
   2735e:	0002      	movs	r2, r0
   27360:	1dfb      	adds	r3, r7, #7
   27362:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   27364:	230f      	movs	r3, #15
   27366:	18fb      	adds	r3, r7, r3
   27368:	1dfa      	adds	r2, r7, #7
   2736a:	7812      	ldrb	r2, [r2, #0]
   2736c:	0952      	lsrs	r2, r2, #5
   2736e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   27370:	230f      	movs	r3, #15
   27372:	18fb      	adds	r3, r7, r3
   27374:	781b      	ldrb	r3, [r3, #0]
   27376:	2b00      	cmp	r3, #0
   27378:	d10c      	bne.n	27394 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2737a:	4b09      	ldr	r3, [pc, #36]	; (273a0 <_extint_get_eic_from_channel+0x48>)
   2737c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   2737e:	230f      	movs	r3, #15
   27380:	18fb      	adds	r3, r7, r3
   27382:	781b      	ldrb	r3, [r3, #0]
   27384:	009b      	lsls	r3, r3, #2
   27386:	2210      	movs	r2, #16
   27388:	4694      	mov	ip, r2
   2738a:	44bc      	add	ip, r7
   2738c:	4463      	add	r3, ip
   2738e:	3b08      	subs	r3, #8
   27390:	681b      	ldr	r3, [r3, #0]
   27392:	e000      	b.n	27396 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   27394:	2300      	movs	r3, #0
	}
}
   27396:	0018      	movs	r0, r3
   27398:	46bd      	mov	sp, r7
   2739a:	b004      	add	sp, #16
   2739c:	bd80      	pop	{r7, pc}
   2739e:	46c0      	nop			; (mov r8, r8)
   273a0:	40001800 	.word	0x40001800

000273a4 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   273a4:	b580      	push	{r7, lr}
   273a6:	b084      	sub	sp, #16
   273a8:	af00      	add	r7, sp, #0
   273aa:	0002      	movs	r2, r0
   273ac:	1dfb      	adds	r3, r7, #7
   273ae:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   273b0:	1dfb      	adds	r3, r7, #7
   273b2:	781b      	ldrb	r3, [r3, #0]
   273b4:	0018      	movs	r0, r3
   273b6:	4b0b      	ldr	r3, [pc, #44]	; (273e4 <extint_chan_is_detected+0x40>)
   273b8:	4798      	blx	r3
   273ba:	0003      	movs	r3, r0
   273bc:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   273be:	1dfb      	adds	r3, r7, #7
   273c0:	781b      	ldrb	r3, [r3, #0]
   273c2:	221f      	movs	r2, #31
   273c4:	4013      	ands	r3, r2
   273c6:	2201      	movs	r2, #1
   273c8:	409a      	lsls	r2, r3
   273ca:	0013      	movs	r3, r2
   273cc:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   273ce:	68fb      	ldr	r3, [r7, #12]
   273d0:	691b      	ldr	r3, [r3, #16]
   273d2:	68ba      	ldr	r2, [r7, #8]
   273d4:	4013      	ands	r3, r2
   273d6:	1e5a      	subs	r2, r3, #1
   273d8:	4193      	sbcs	r3, r2
   273da:	b2db      	uxtb	r3, r3
}
   273dc:	0018      	movs	r0, r3
   273de:	46bd      	mov	sp, r7
   273e0:	b004      	add	sp, #16
   273e2:	bd80      	pop	{r7, pc}
   273e4:	00027359 	.word	0x00027359

000273e8 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   273e8:	b580      	push	{r7, lr}
   273ea:	b084      	sub	sp, #16
   273ec:	af00      	add	r7, sp, #0
   273ee:	0002      	movs	r2, r0
   273f0:	1dfb      	adds	r3, r7, #7
   273f2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   273f4:	1dfb      	adds	r3, r7, #7
   273f6:	781b      	ldrb	r3, [r3, #0]
   273f8:	0018      	movs	r0, r3
   273fa:	4b09      	ldr	r3, [pc, #36]	; (27420 <extint_chan_clear_detected+0x38>)
   273fc:	4798      	blx	r3
   273fe:	0003      	movs	r3, r0
   27400:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   27402:	1dfb      	adds	r3, r7, #7
   27404:	781b      	ldrb	r3, [r3, #0]
   27406:	221f      	movs	r2, #31
   27408:	4013      	ands	r3, r2
   2740a:	2201      	movs	r2, #1
   2740c:	409a      	lsls	r2, r3
   2740e:	0013      	movs	r3, r2
   27410:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   27412:	68fb      	ldr	r3, [r7, #12]
   27414:	68ba      	ldr	r2, [r7, #8]
   27416:	611a      	str	r2, [r3, #16]
}
   27418:	46c0      	nop			; (mov r8, r8)
   2741a:	46bd      	mov	sp, r7
   2741c:	b004      	add	sp, #16
   2741e:	bd80      	pop	{r7, pc}
   27420:	00027359 	.word	0x00027359

00027424 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   27424:	b580      	push	{r7, lr}
   27426:	b082      	sub	sp, #8
   27428:	af00      	add	r7, sp, #0
   2742a:	6078      	str	r0, [r7, #4]
   2742c:	0008      	movs	r0, r1
   2742e:	0011      	movs	r1, r2
   27430:	1cfb      	adds	r3, r7, #3
   27432:	1c02      	adds	r2, r0, #0
   27434:	701a      	strb	r2, [r3, #0]
   27436:	1cbb      	adds	r3, r7, #2
   27438:	1c0a      	adds	r2, r1, #0
   2743a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   2743c:	1cbb      	adds	r3, r7, #2
   2743e:	781b      	ldrb	r3, [r3, #0]
   27440:	2b00      	cmp	r3, #0
   27442:	d001      	beq.n	27448 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   27444:	2317      	movs	r3, #23
   27446:	e019      	b.n	2747c <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   27448:	1cfb      	adds	r3, r7, #3
   2744a:	781a      	ldrb	r2, [r3, #0]
   2744c:	4b0d      	ldr	r3, [pc, #52]	; (27484 <extint_register_callback+0x60>)
   2744e:	0092      	lsls	r2, r2, #2
   27450:	58d3      	ldr	r3, [r2, r3]
   27452:	2b00      	cmp	r3, #0
   27454:	d107      	bne.n	27466 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   27456:	1cfb      	adds	r3, r7, #3
   27458:	781a      	ldrb	r2, [r3, #0]
   2745a:	4b0a      	ldr	r3, [pc, #40]	; (27484 <extint_register_callback+0x60>)
   2745c:	0092      	lsls	r2, r2, #2
   2745e:	6879      	ldr	r1, [r7, #4]
   27460:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   27462:	2300      	movs	r3, #0
   27464:	e00a      	b.n	2747c <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   27466:	1cfb      	adds	r3, r7, #3
   27468:	781a      	ldrb	r2, [r3, #0]
   2746a:	4b06      	ldr	r3, [pc, #24]	; (27484 <extint_register_callback+0x60>)
   2746c:	0092      	lsls	r2, r2, #2
   2746e:	58d2      	ldr	r2, [r2, r3]
   27470:	687b      	ldr	r3, [r7, #4]
   27472:	429a      	cmp	r2, r3
   27474:	d101      	bne.n	2747a <extint_register_callback+0x56>
		return STATUS_OK;
   27476:	2300      	movs	r3, #0
   27478:	e000      	b.n	2747c <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   2747a:	231d      	movs	r3, #29
}
   2747c:	0018      	movs	r0, r3
   2747e:	46bd      	mov	sp, r7
   27480:	b002      	add	sp, #8
   27482:	bd80      	pop	{r7, pc}
   27484:	20005c58 	.word	0x20005c58

00027488 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   27488:	b580      	push	{r7, lr}
   2748a:	b084      	sub	sp, #16
   2748c:	af00      	add	r7, sp, #0
   2748e:	0002      	movs	r2, r0
   27490:	1dfb      	adds	r3, r7, #7
   27492:	701a      	strb	r2, [r3, #0]
   27494:	1dbb      	adds	r3, r7, #6
   27496:	1c0a      	adds	r2, r1, #0
   27498:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   2749a:	1dbb      	adds	r3, r7, #6
   2749c:	781b      	ldrb	r3, [r3, #0]
   2749e:	2b00      	cmp	r3, #0
   274a0:	d10e      	bne.n	274c0 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   274a2:	1dfb      	adds	r3, r7, #7
   274a4:	781b      	ldrb	r3, [r3, #0]
   274a6:	0018      	movs	r0, r3
   274a8:	4b08      	ldr	r3, [pc, #32]	; (274cc <extint_chan_enable_callback+0x44>)
   274aa:	4798      	blx	r3
   274ac:	0003      	movs	r3, r0
   274ae:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   274b0:	1dfb      	adds	r3, r7, #7
   274b2:	781b      	ldrb	r3, [r3, #0]
   274b4:	2201      	movs	r2, #1
   274b6:	409a      	lsls	r2, r3
   274b8:	68fb      	ldr	r3, [r7, #12]
   274ba:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   274bc:	2300      	movs	r3, #0
   274be:	e000      	b.n	274c2 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   274c0:	2317      	movs	r3, #23
}
   274c2:	0018      	movs	r0, r3
   274c4:	46bd      	mov	sp, r7
   274c6:	b004      	add	sp, #16
   274c8:	bd80      	pop	{r7, pc}
   274ca:	46c0      	nop			; (mov r8, r8)
   274cc:	00027359 	.word	0x00027359

000274d0 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   274d0:	b580      	push	{r7, lr}
   274d2:	b084      	sub	sp, #16
   274d4:	af00      	add	r7, sp, #0
   274d6:	0002      	movs	r2, r0
   274d8:	1dfb      	adds	r3, r7, #7
   274da:	701a      	strb	r2, [r3, #0]
   274dc:	1dbb      	adds	r3, r7, #6
   274de:	1c0a      	adds	r2, r1, #0
   274e0:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   274e2:	1dbb      	adds	r3, r7, #6
   274e4:	781b      	ldrb	r3, [r3, #0]
   274e6:	2b00      	cmp	r3, #0
   274e8:	d10e      	bne.n	27508 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   274ea:	1dfb      	adds	r3, r7, #7
   274ec:	781b      	ldrb	r3, [r3, #0]
   274ee:	0018      	movs	r0, r3
   274f0:	4b08      	ldr	r3, [pc, #32]	; (27514 <extint_chan_disable_callback+0x44>)
   274f2:	4798      	blx	r3
   274f4:	0003      	movs	r3, r0
   274f6:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   274f8:	1dfb      	adds	r3, r7, #7
   274fa:	781b      	ldrb	r3, [r3, #0]
   274fc:	2201      	movs	r2, #1
   274fe:	409a      	lsls	r2, r3
   27500:	68fb      	ldr	r3, [r7, #12]
   27502:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   27504:	2300      	movs	r3, #0
   27506:	e000      	b.n	2750a <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   27508:	2317      	movs	r3, #23
}
   2750a:	0018      	movs	r0, r3
   2750c:	46bd      	mov	sp, r7
   2750e:	b004      	add	sp, #16
   27510:	bd80      	pop	{r7, pc}
   27512:	46c0      	nop			; (mov r8, r8)
   27514:	00027359 	.word	0x00027359

00027518 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   27518:	b580      	push	{r7, lr}
   2751a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   2751c:	4b15      	ldr	r3, [pc, #84]	; (27574 <EIC_Handler+0x5c>)
   2751e:	2200      	movs	r2, #0
   27520:	701a      	strb	r2, [r3, #0]
   27522:	e020      	b.n	27566 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   27524:	4b13      	ldr	r3, [pc, #76]	; (27574 <EIC_Handler+0x5c>)
   27526:	781b      	ldrb	r3, [r3, #0]
   27528:	0018      	movs	r0, r3
   2752a:	4b13      	ldr	r3, [pc, #76]	; (27578 <EIC_Handler+0x60>)
   2752c:	4798      	blx	r3
   2752e:	1e03      	subs	r3, r0, #0
   27530:	d013      	beq.n	2755a <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   27532:	4b10      	ldr	r3, [pc, #64]	; (27574 <EIC_Handler+0x5c>)
   27534:	781b      	ldrb	r3, [r3, #0]
   27536:	0018      	movs	r0, r3
   27538:	4b10      	ldr	r3, [pc, #64]	; (2757c <EIC_Handler+0x64>)
   2753a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   2753c:	4b0d      	ldr	r3, [pc, #52]	; (27574 <EIC_Handler+0x5c>)
   2753e:	781b      	ldrb	r3, [r3, #0]
   27540:	001a      	movs	r2, r3
   27542:	4b0f      	ldr	r3, [pc, #60]	; (27580 <EIC_Handler+0x68>)
   27544:	0092      	lsls	r2, r2, #2
   27546:	58d3      	ldr	r3, [r2, r3]
   27548:	2b00      	cmp	r3, #0
   2754a:	d006      	beq.n	2755a <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   2754c:	4b09      	ldr	r3, [pc, #36]	; (27574 <EIC_Handler+0x5c>)
   2754e:	781b      	ldrb	r3, [r3, #0]
   27550:	001a      	movs	r2, r3
   27552:	4b0b      	ldr	r3, [pc, #44]	; (27580 <EIC_Handler+0x68>)
   27554:	0092      	lsls	r2, r2, #2
   27556:	58d3      	ldr	r3, [r2, r3]
   27558:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   2755a:	4b06      	ldr	r3, [pc, #24]	; (27574 <EIC_Handler+0x5c>)
   2755c:	781b      	ldrb	r3, [r3, #0]
   2755e:	3301      	adds	r3, #1
   27560:	b2da      	uxtb	r2, r3
   27562:	4b04      	ldr	r3, [pc, #16]	; (27574 <EIC_Handler+0x5c>)
   27564:	701a      	strb	r2, [r3, #0]
   27566:	4b03      	ldr	r3, [pc, #12]	; (27574 <EIC_Handler+0x5c>)
   27568:	781b      	ldrb	r3, [r3, #0]
   2756a:	2b0f      	cmp	r3, #15
   2756c:	d9da      	bls.n	27524 <EIC_Handler+0xc>
			}
		}
	}
}
   2756e:	46c0      	nop			; (mov r8, r8)
   27570:	46bd      	mov	sp, r7
   27572:	bd80      	pop	{r7, pc}
   27574:	20005c54 	.word	0x20005c54
   27578:	000273a5 	.word	0x000273a5
   2757c:	000273e9 	.word	0x000273e9
   27580:	20005c58 	.word	0x20005c58

00027584 <system_gclk_chan_get_config_defaults>:
{
   27584:	b580      	push	{r7, lr}
   27586:	b082      	sub	sp, #8
   27588:	af00      	add	r7, sp, #0
   2758a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2758c:	687b      	ldr	r3, [r7, #4]
   2758e:	2200      	movs	r2, #0
   27590:	701a      	strb	r2, [r3, #0]
}
   27592:	46c0      	nop			; (mov r8, r8)
   27594:	46bd      	mov	sp, r7
   27596:	b002      	add	sp, #8
   27598:	bd80      	pop	{r7, pc}
	...

0002759c <system_apb_clock_set_mask>:
{
   2759c:	b580      	push	{r7, lr}
   2759e:	b082      	sub	sp, #8
   275a0:	af00      	add	r7, sp, #0
   275a2:	0002      	movs	r2, r0
   275a4:	6039      	str	r1, [r7, #0]
   275a6:	1dfb      	adds	r3, r7, #7
   275a8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   275aa:	1dfb      	adds	r3, r7, #7
   275ac:	781b      	ldrb	r3, [r3, #0]
   275ae:	2b01      	cmp	r3, #1
   275b0:	d00a      	beq.n	275c8 <system_apb_clock_set_mask+0x2c>
   275b2:	2b02      	cmp	r3, #2
   275b4:	d00f      	beq.n	275d6 <system_apb_clock_set_mask+0x3a>
   275b6:	2b00      	cmp	r3, #0
   275b8:	d114      	bne.n	275e4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   275ba:	4b0e      	ldr	r3, [pc, #56]	; (275f4 <system_apb_clock_set_mask+0x58>)
   275bc:	4a0d      	ldr	r2, [pc, #52]	; (275f4 <system_apb_clock_set_mask+0x58>)
   275be:	6991      	ldr	r1, [r2, #24]
   275c0:	683a      	ldr	r2, [r7, #0]
   275c2:	430a      	orrs	r2, r1
   275c4:	619a      	str	r2, [r3, #24]
			break;
   275c6:	e00f      	b.n	275e8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   275c8:	4b0a      	ldr	r3, [pc, #40]	; (275f4 <system_apb_clock_set_mask+0x58>)
   275ca:	4a0a      	ldr	r2, [pc, #40]	; (275f4 <system_apb_clock_set_mask+0x58>)
   275cc:	69d1      	ldr	r1, [r2, #28]
   275ce:	683a      	ldr	r2, [r7, #0]
   275d0:	430a      	orrs	r2, r1
   275d2:	61da      	str	r2, [r3, #28]
			break;
   275d4:	e008      	b.n	275e8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   275d6:	4b07      	ldr	r3, [pc, #28]	; (275f4 <system_apb_clock_set_mask+0x58>)
   275d8:	4a06      	ldr	r2, [pc, #24]	; (275f4 <system_apb_clock_set_mask+0x58>)
   275da:	6a11      	ldr	r1, [r2, #32]
   275dc:	683a      	ldr	r2, [r7, #0]
   275de:	430a      	orrs	r2, r1
   275e0:	621a      	str	r2, [r3, #32]
			break;
   275e2:	e001      	b.n	275e8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   275e4:	2317      	movs	r3, #23
   275e6:	e000      	b.n	275ea <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   275e8:	2300      	movs	r3, #0
}
   275ea:	0018      	movs	r0, r3
   275ec:	46bd      	mov	sp, r7
   275ee:	b002      	add	sp, #8
   275f0:	bd80      	pop	{r7, pc}
   275f2:	46c0      	nop			; (mov r8, r8)
   275f4:	40000400 	.word	0x40000400

000275f8 <system_pinmux_get_config_defaults>:
{
   275f8:	b580      	push	{r7, lr}
   275fa:	b082      	sub	sp, #8
   275fc:	af00      	add	r7, sp, #0
   275fe:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   27600:	687b      	ldr	r3, [r7, #4]
   27602:	2280      	movs	r2, #128	; 0x80
   27604:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27606:	687b      	ldr	r3, [r7, #4]
   27608:	2200      	movs	r2, #0
   2760a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2760c:	687b      	ldr	r3, [r7, #4]
   2760e:	2201      	movs	r2, #1
   27610:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   27612:	687b      	ldr	r3, [r7, #4]
   27614:	2200      	movs	r2, #0
   27616:	70da      	strb	r2, [r3, #3]
}
   27618:	46c0      	nop			; (mov r8, r8)
   2761a:	46bd      	mov	sp, r7
   2761c:	b002      	add	sp, #8
   2761e:	bd80      	pop	{r7, pc}

00027620 <system_interrupt_enable>:
{
   27620:	b580      	push	{r7, lr}
   27622:	b082      	sub	sp, #8
   27624:	af00      	add	r7, sp, #0
   27626:	0002      	movs	r2, r0
   27628:	1dfb      	adds	r3, r7, #7
   2762a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2762c:	4b06      	ldr	r3, [pc, #24]	; (27648 <system_interrupt_enable+0x28>)
   2762e:	1dfa      	adds	r2, r7, #7
   27630:	7812      	ldrb	r2, [r2, #0]
   27632:	0011      	movs	r1, r2
   27634:	221f      	movs	r2, #31
   27636:	400a      	ands	r2, r1
   27638:	2101      	movs	r1, #1
   2763a:	4091      	lsls	r1, r2
   2763c:	000a      	movs	r2, r1
   2763e:	601a      	str	r2, [r3, #0]
}
   27640:	46c0      	nop			; (mov r8, r8)
   27642:	46bd      	mov	sp, r7
   27644:	b002      	add	sp, #8
   27646:	bd80      	pop	{r7, pc}
   27648:	e000e100 	.word	0xe000e100

0002764c <_extint_get_eic_from_channel>:
{
   2764c:	b580      	push	{r7, lr}
   2764e:	b084      	sub	sp, #16
   27650:	af00      	add	r7, sp, #0
   27652:	0002      	movs	r2, r0
   27654:	1dfb      	adds	r3, r7, #7
   27656:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   27658:	230f      	movs	r3, #15
   2765a:	18fb      	adds	r3, r7, r3
   2765c:	1dfa      	adds	r2, r7, #7
   2765e:	7812      	ldrb	r2, [r2, #0]
   27660:	0952      	lsrs	r2, r2, #5
   27662:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   27664:	230f      	movs	r3, #15
   27666:	18fb      	adds	r3, r7, r3
   27668:	781b      	ldrb	r3, [r3, #0]
   2766a:	2b00      	cmp	r3, #0
   2766c:	d10c      	bne.n	27688 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2766e:	4b09      	ldr	r3, [pc, #36]	; (27694 <_extint_get_eic_from_channel+0x48>)
   27670:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   27672:	230f      	movs	r3, #15
   27674:	18fb      	adds	r3, r7, r3
   27676:	781b      	ldrb	r3, [r3, #0]
   27678:	009b      	lsls	r3, r3, #2
   2767a:	2210      	movs	r2, #16
   2767c:	4694      	mov	ip, r2
   2767e:	44bc      	add	ip, r7
   27680:	4463      	add	r3, ip
   27682:	3b08      	subs	r3, #8
   27684:	681b      	ldr	r3, [r3, #0]
   27686:	e000      	b.n	2768a <_extint_get_eic_from_channel+0x3e>
		return NULL;
   27688:	2300      	movs	r3, #0
}
   2768a:	0018      	movs	r0, r3
   2768c:	46bd      	mov	sp, r7
   2768e:	b004      	add	sp, #16
   27690:	bd80      	pop	{r7, pc}
   27692:	46c0      	nop			; (mov r8, r8)
   27694:	40001800 	.word	0x40001800

00027698 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   27698:	b580      	push	{r7, lr}
   2769a:	b082      	sub	sp, #8
   2769c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2769e:	4b0f      	ldr	r3, [pc, #60]	; (276dc <extint_is_syncing+0x44>)
   276a0:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   276a2:	2300      	movs	r3, #0
   276a4:	607b      	str	r3, [r7, #4]
   276a6:	e011      	b.n	276cc <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   276a8:	687b      	ldr	r3, [r7, #4]
   276aa:	009b      	lsls	r3, r3, #2
   276ac:	2208      	movs	r2, #8
   276ae:	4694      	mov	ip, r2
   276b0:	44bc      	add	ip, r7
   276b2:	4463      	add	r3, ip
   276b4:	3b08      	subs	r3, #8
   276b6:	681b      	ldr	r3, [r3, #0]
   276b8:	785b      	ldrb	r3, [r3, #1]
   276ba:	b2db      	uxtb	r3, r3
   276bc:	b25b      	sxtb	r3, r3
   276be:	2b00      	cmp	r3, #0
   276c0:	da01      	bge.n	276c6 <extint_is_syncing+0x2e>
			return true;
   276c2:	2301      	movs	r3, #1
   276c4:	e006      	b.n	276d4 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   276c6:	687b      	ldr	r3, [r7, #4]
   276c8:	3301      	adds	r3, #1
   276ca:	607b      	str	r3, [r7, #4]
   276cc:	687b      	ldr	r3, [r7, #4]
   276ce:	2b00      	cmp	r3, #0
   276d0:	d0ea      	beq.n	276a8 <extint_is_syncing+0x10>
		}
	}
	return false;
   276d2:	2300      	movs	r3, #0
}
   276d4:	0018      	movs	r0, r3
   276d6:	46bd      	mov	sp, r7
   276d8:	b002      	add	sp, #8
   276da:	bd80      	pop	{r7, pc}
   276dc:	40001800 	.word	0x40001800

000276e0 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   276e0:	b580      	push	{r7, lr}
   276e2:	b084      	sub	sp, #16
   276e4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   276e6:	4b2d      	ldr	r3, [pc, #180]	; (2779c <_system_extint_init+0xbc>)
   276e8:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   276ea:	2140      	movs	r1, #64	; 0x40
   276ec:	2000      	movs	r0, #0
   276ee:	4b2c      	ldr	r3, [pc, #176]	; (277a0 <_system_extint_init+0xc0>)
   276f0:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   276f2:	003b      	movs	r3, r7
   276f4:	0018      	movs	r0, r3
   276f6:	4b2b      	ldr	r3, [pc, #172]	; (277a4 <_system_extint_init+0xc4>)
   276f8:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   276fa:	003b      	movs	r3, r7
   276fc:	2200      	movs	r2, #0
   276fe:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   27700:	003b      	movs	r3, r7
   27702:	0019      	movs	r1, r3
   27704:	2005      	movs	r0, #5
   27706:	4b28      	ldr	r3, [pc, #160]	; (277a8 <_system_extint_init+0xc8>)
   27708:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   2770a:	2005      	movs	r0, #5
   2770c:	4b27      	ldr	r3, [pc, #156]	; (277ac <_system_extint_init+0xcc>)
   2770e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   27710:	2300      	movs	r3, #0
   27712:	60fb      	str	r3, [r7, #12]
   27714:	e018      	b.n	27748 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   27716:	68fb      	ldr	r3, [r7, #12]
   27718:	009b      	lsls	r3, r3, #2
   2771a:	2210      	movs	r2, #16
   2771c:	4694      	mov	ip, r2
   2771e:	44bc      	add	ip, r7
   27720:	4463      	add	r3, ip
   27722:	3b0c      	subs	r3, #12
   27724:	681a      	ldr	r2, [r3, #0]
   27726:	68fb      	ldr	r3, [r7, #12]
   27728:	009b      	lsls	r3, r3, #2
   2772a:	2110      	movs	r1, #16
   2772c:	468c      	mov	ip, r1
   2772e:	44bc      	add	ip, r7
   27730:	4463      	add	r3, ip
   27732:	3b0c      	subs	r3, #12
   27734:	681b      	ldr	r3, [r3, #0]
   27736:	781b      	ldrb	r3, [r3, #0]
   27738:	b2db      	uxtb	r3, r3
   2773a:	2101      	movs	r1, #1
   2773c:	430b      	orrs	r3, r1
   2773e:	b2db      	uxtb	r3, r3
   27740:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   27742:	68fb      	ldr	r3, [r7, #12]
   27744:	3301      	adds	r3, #1
   27746:	60fb      	str	r3, [r7, #12]
   27748:	68fb      	ldr	r3, [r7, #12]
   2774a:	2b00      	cmp	r3, #0
   2774c:	d0e3      	beq.n	27716 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   2774e:	46c0      	nop			; (mov r8, r8)
   27750:	4b17      	ldr	r3, [pc, #92]	; (277b0 <_system_extint_init+0xd0>)
   27752:	4798      	blx	r3
   27754:	1e03      	subs	r3, r0, #0
   27756:	d1fb      	bne.n	27750 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   27758:	230b      	movs	r3, #11
   2775a:	18fb      	adds	r3, r7, r3
   2775c:	2200      	movs	r2, #0
   2775e:	701a      	strb	r2, [r3, #0]
   27760:	e00d      	b.n	2777e <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   27762:	230b      	movs	r3, #11
   27764:	18fb      	adds	r3, r7, r3
   27766:	781a      	ldrb	r2, [r3, #0]
   27768:	4b12      	ldr	r3, [pc, #72]	; (277b4 <_system_extint_init+0xd4>)
   2776a:	0092      	lsls	r2, r2, #2
   2776c:	2100      	movs	r1, #0
   2776e:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   27770:	230b      	movs	r3, #11
   27772:	18fb      	adds	r3, r7, r3
   27774:	781a      	ldrb	r2, [r3, #0]
   27776:	230b      	movs	r3, #11
   27778:	18fb      	adds	r3, r7, r3
   2777a:	3201      	adds	r2, #1
   2777c:	701a      	strb	r2, [r3, #0]
   2777e:	230b      	movs	r3, #11
   27780:	18fb      	adds	r3, r7, r3
   27782:	781b      	ldrb	r3, [r3, #0]
   27784:	2b0f      	cmp	r3, #15
   27786:	d9ec      	bls.n	27762 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   27788:	2004      	movs	r0, #4
   2778a:	4b0b      	ldr	r3, [pc, #44]	; (277b8 <_system_extint_init+0xd8>)
   2778c:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   2778e:	4b0b      	ldr	r3, [pc, #44]	; (277bc <_system_extint_init+0xdc>)
   27790:	4798      	blx	r3
}
   27792:	46c0      	nop			; (mov r8, r8)
   27794:	46bd      	mov	sp, r7
   27796:	b004      	add	sp, #16
   27798:	bd80      	pop	{r7, pc}
   2779a:	46c0      	nop			; (mov r8, r8)
   2779c:	40001800 	.word	0x40001800
   277a0:	0002759d 	.word	0x0002759d
   277a4:	00027585 	.word	0x00027585
   277a8:	0002ae0d 	.word	0x0002ae0d
   277ac:	0002ae51 	.word	0x0002ae51
   277b0:	00027699 	.word	0x00027699
   277b4:	20005c58 	.word	0x20005c58
   277b8:	00027621 	.word	0x00027621
   277bc:	000277c1 	.word	0x000277c1

000277c0 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   277c0:	b580      	push	{r7, lr}
   277c2:	b082      	sub	sp, #8
   277c4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   277c6:	4b15      	ldr	r3, [pc, #84]	; (2781c <_extint_enable+0x5c>)
   277c8:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   277ca:	2300      	movs	r3, #0
   277cc:	607b      	str	r3, [r7, #4]
   277ce:	e018      	b.n	27802 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   277d0:	687b      	ldr	r3, [r7, #4]
   277d2:	009b      	lsls	r3, r3, #2
   277d4:	2208      	movs	r2, #8
   277d6:	4694      	mov	ip, r2
   277d8:	44bc      	add	ip, r7
   277da:	4463      	add	r3, ip
   277dc:	3b08      	subs	r3, #8
   277de:	681a      	ldr	r2, [r3, #0]
   277e0:	687b      	ldr	r3, [r7, #4]
   277e2:	009b      	lsls	r3, r3, #2
   277e4:	2108      	movs	r1, #8
   277e6:	468c      	mov	ip, r1
   277e8:	44bc      	add	ip, r7
   277ea:	4463      	add	r3, ip
   277ec:	3b08      	subs	r3, #8
   277ee:	681b      	ldr	r3, [r3, #0]
   277f0:	781b      	ldrb	r3, [r3, #0]
   277f2:	b2db      	uxtb	r3, r3
   277f4:	2102      	movs	r1, #2
   277f6:	430b      	orrs	r3, r1
   277f8:	b2db      	uxtb	r3, r3
   277fa:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   277fc:	687b      	ldr	r3, [r7, #4]
   277fe:	3301      	adds	r3, #1
   27800:	607b      	str	r3, [r7, #4]
   27802:	687b      	ldr	r3, [r7, #4]
   27804:	2b00      	cmp	r3, #0
   27806:	d0e3      	beq.n	277d0 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   27808:	46c0      	nop			; (mov r8, r8)
   2780a:	4b05      	ldr	r3, [pc, #20]	; (27820 <_extint_enable+0x60>)
   2780c:	4798      	blx	r3
   2780e:	1e03      	subs	r3, r0, #0
   27810:	d1fb      	bne.n	2780a <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   27812:	46c0      	nop			; (mov r8, r8)
   27814:	46bd      	mov	sp, r7
   27816:	b002      	add	sp, #8
   27818:	bd80      	pop	{r7, pc}
   2781a:	46c0      	nop			; (mov r8, r8)
   2781c:	40001800 	.word	0x40001800
   27820:	00027699 	.word	0x00027699

00027824 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   27824:	b580      	push	{r7, lr}
   27826:	b082      	sub	sp, #8
   27828:	af00      	add	r7, sp, #0
   2782a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   2782c:	687b      	ldr	r3, [r7, #4]
   2782e:	2200      	movs	r2, #0
   27830:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   27832:	687b      	ldr	r3, [r7, #4]
   27834:	2200      	movs	r2, #0
   27836:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   27838:	687b      	ldr	r3, [r7, #4]
   2783a:	2201      	movs	r2, #1
   2783c:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   2783e:	687b      	ldr	r3, [r7, #4]
   27840:	2201      	movs	r2, #1
   27842:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   27844:	687b      	ldr	r3, [r7, #4]
   27846:	2200      	movs	r2, #0
   27848:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   2784a:	687b      	ldr	r3, [r7, #4]
   2784c:	2202      	movs	r2, #2
   2784e:	72da      	strb	r2, [r3, #11]
}
   27850:	46c0      	nop			; (mov r8, r8)
   27852:	46bd      	mov	sp, r7
   27854:	b002      	add	sp, #8
   27856:	bd80      	pop	{r7, pc}

00027858 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   27858:	b580      	push	{r7, lr}
   2785a:	b086      	sub	sp, #24
   2785c:	af00      	add	r7, sp, #0
   2785e:	0002      	movs	r2, r0
   27860:	6039      	str	r1, [r7, #0]
   27862:	1dfb      	adds	r3, r7, #7
   27864:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   27866:	2308      	movs	r3, #8
   27868:	18fb      	adds	r3, r7, r3
   2786a:	0018      	movs	r0, r3
   2786c:	4b36      	ldr	r3, [pc, #216]	; (27948 <extint_chan_set_config+0xf0>)
   2786e:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   27870:	683b      	ldr	r3, [r7, #0]
   27872:	685b      	ldr	r3, [r3, #4]
   27874:	b2da      	uxtb	r2, r3
   27876:	2308      	movs	r3, #8
   27878:	18fb      	adds	r3, r7, r3
   2787a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2787c:	2308      	movs	r3, #8
   2787e:	18fb      	adds	r3, r7, r3
   27880:	2200      	movs	r2, #0
   27882:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   27884:	683b      	ldr	r3, [r7, #0]
   27886:	7a1a      	ldrb	r2, [r3, #8]
   27888:	2308      	movs	r3, #8
   2788a:	18fb      	adds	r3, r7, r3
   2788c:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   2788e:	683b      	ldr	r3, [r7, #0]
   27890:	681b      	ldr	r3, [r3, #0]
   27892:	b2db      	uxtb	r3, r3
   27894:	2208      	movs	r2, #8
   27896:	18ba      	adds	r2, r7, r2
   27898:	0011      	movs	r1, r2
   2789a:	0018      	movs	r0, r3
   2789c:	4b2b      	ldr	r3, [pc, #172]	; (2794c <extint_chan_set_config+0xf4>)
   2789e:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   278a0:	1dfb      	adds	r3, r7, #7
   278a2:	781b      	ldrb	r3, [r3, #0]
   278a4:	0018      	movs	r0, r3
   278a6:	4b2a      	ldr	r3, [pc, #168]	; (27950 <extint_chan_set_config+0xf8>)
   278a8:	4798      	blx	r3
   278aa:	0003      	movs	r3, r0
   278ac:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   278ae:	1dfb      	adds	r3, r7, #7
   278b0:	781b      	ldrb	r3, [r3, #0]
   278b2:	2207      	movs	r2, #7
   278b4:	4013      	ands	r3, r2
   278b6:	009b      	lsls	r3, r3, #2
   278b8:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   278ba:	683b      	ldr	r3, [r7, #0]
   278bc:	7adb      	ldrb	r3, [r3, #11]
   278be:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   278c0:	683b      	ldr	r3, [r7, #0]
   278c2:	7a9b      	ldrb	r3, [r3, #10]
   278c4:	2b00      	cmp	r3, #0
   278c6:	d003      	beq.n	278d0 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   278c8:	697b      	ldr	r3, [r7, #20]
   278ca:	2208      	movs	r2, #8
   278cc:	4313      	orrs	r3, r2
   278ce:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   278d0:	1dfb      	adds	r3, r7, #7
   278d2:	781b      	ldrb	r3, [r3, #0]
   278d4:	08db      	lsrs	r3, r3, #3
   278d6:	b2db      	uxtb	r3, r3
   278d8:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   278da:	1dfb      	adds	r3, r7, #7
   278dc:	781b      	ldrb	r3, [r3, #0]
   278de:	08db      	lsrs	r3, r3, #3
   278e0:	b2db      	uxtb	r3, r3
   278e2:	001a      	movs	r2, r3
   278e4:	693b      	ldr	r3, [r7, #16]
   278e6:	3206      	adds	r2, #6
   278e8:	0092      	lsls	r2, r2, #2
   278ea:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   278ec:	210f      	movs	r1, #15
   278ee:	68fa      	ldr	r2, [r7, #12]
   278f0:	4091      	lsls	r1, r2
   278f2:	000a      	movs	r2, r1
   278f4:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   278f6:	401a      	ands	r2, r3
			(new_config << config_pos);
   278f8:	6979      	ldr	r1, [r7, #20]
   278fa:	68fb      	ldr	r3, [r7, #12]
   278fc:	4099      	lsls	r1, r3
   278fe:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   27900:	431a      	orrs	r2, r3
   27902:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   27904:	693b      	ldr	r3, [r7, #16]
   27906:	1d82      	adds	r2, r0, #6
   27908:	0092      	lsls	r2, r2, #2
   2790a:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   2790c:	683b      	ldr	r3, [r7, #0]
   2790e:	7a5b      	ldrb	r3, [r3, #9]
   27910:	2b00      	cmp	r3, #0
   27912:	d00a      	beq.n	2792a <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   27914:	693b      	ldr	r3, [r7, #16]
   27916:	695a      	ldr	r2, [r3, #20]
   27918:	1dfb      	adds	r3, r7, #7
   2791a:	781b      	ldrb	r3, [r3, #0]
   2791c:	2101      	movs	r1, #1
   2791e:	4099      	lsls	r1, r3
   27920:	000b      	movs	r3, r1
   27922:	431a      	orrs	r2, r3
   27924:	693b      	ldr	r3, [r7, #16]
   27926:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   27928:	e00a      	b.n	27940 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   2792a:	693b      	ldr	r3, [r7, #16]
   2792c:	695b      	ldr	r3, [r3, #20]
   2792e:	1dfa      	adds	r2, r7, #7
   27930:	7812      	ldrb	r2, [r2, #0]
   27932:	2101      	movs	r1, #1
   27934:	4091      	lsls	r1, r2
   27936:	000a      	movs	r2, r1
   27938:	43d2      	mvns	r2, r2
   2793a:	401a      	ands	r2, r3
   2793c:	693b      	ldr	r3, [r7, #16]
   2793e:	615a      	str	r2, [r3, #20]
}
   27940:	46c0      	nop			; (mov r8, r8)
   27942:	46bd      	mov	sp, r7
   27944:	b006      	add	sp, #24
   27946:	bd80      	pop	{r7, pc}
   27948:	000275f9 	.word	0x000275f9
   2794c:	0002b16d 	.word	0x0002b16d
   27950:	0002764d 	.word	0x0002764d

00027954 <system_pinmux_get_config_defaults>:
{
   27954:	b580      	push	{r7, lr}
   27956:	b082      	sub	sp, #8
   27958:	af00      	add	r7, sp, #0
   2795a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2795c:	687b      	ldr	r3, [r7, #4]
   2795e:	2280      	movs	r2, #128	; 0x80
   27960:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27962:	687b      	ldr	r3, [r7, #4]
   27964:	2200      	movs	r2, #0
   27966:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   27968:	687b      	ldr	r3, [r7, #4]
   2796a:	2201      	movs	r2, #1
   2796c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2796e:	687b      	ldr	r3, [r7, #4]
   27970:	2200      	movs	r2, #0
   27972:	70da      	strb	r2, [r3, #3]
}
   27974:	46c0      	nop			; (mov r8, r8)
   27976:	46bd      	mov	sp, r7
   27978:	b002      	add	sp, #8
   2797a:	bd80      	pop	{r7, pc}

0002797c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   2797c:	b580      	push	{r7, lr}
   2797e:	b084      	sub	sp, #16
   27980:	af00      	add	r7, sp, #0
   27982:	0002      	movs	r2, r0
   27984:	6039      	str	r1, [r7, #0]
   27986:	1dfb      	adds	r3, r7, #7
   27988:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   2798a:	230c      	movs	r3, #12
   2798c:	18fb      	adds	r3, r7, r3
   2798e:	0018      	movs	r0, r3
   27990:	4b10      	ldr	r3, [pc, #64]	; (279d4 <port_pin_set_config+0x58>)
   27992:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   27994:	230c      	movs	r3, #12
   27996:	18fb      	adds	r3, r7, r3
   27998:	2280      	movs	r2, #128	; 0x80
   2799a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   2799c:	683b      	ldr	r3, [r7, #0]
   2799e:	781a      	ldrb	r2, [r3, #0]
   279a0:	230c      	movs	r3, #12
   279a2:	18fb      	adds	r3, r7, r3
   279a4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   279a6:	683b      	ldr	r3, [r7, #0]
   279a8:	785a      	ldrb	r2, [r3, #1]
   279aa:	230c      	movs	r3, #12
   279ac:	18fb      	adds	r3, r7, r3
   279ae:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   279b0:	683b      	ldr	r3, [r7, #0]
   279b2:	789a      	ldrb	r2, [r3, #2]
   279b4:	230c      	movs	r3, #12
   279b6:	18fb      	adds	r3, r7, r3
   279b8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   279ba:	230c      	movs	r3, #12
   279bc:	18fa      	adds	r2, r7, r3
   279be:	1dfb      	adds	r3, r7, #7
   279c0:	781b      	ldrb	r3, [r3, #0]
   279c2:	0011      	movs	r1, r2
   279c4:	0018      	movs	r0, r3
   279c6:	4b04      	ldr	r3, [pc, #16]	; (279d8 <port_pin_set_config+0x5c>)
   279c8:	4798      	blx	r3
}
   279ca:	46c0      	nop			; (mov r8, r8)
   279cc:	46bd      	mov	sp, r7
   279ce:	b004      	add	sp, #16
   279d0:	bd80      	pop	{r7, pc}
   279d2:	46c0      	nop			; (mov r8, r8)
   279d4:	00027955 	.word	0x00027955
   279d8:	0002b16d 	.word	0x0002b16d

000279dc <system_gclk_chan_get_config_defaults>:
{
   279dc:	b580      	push	{r7, lr}
   279de:	b082      	sub	sp, #8
   279e0:	af00      	add	r7, sp, #0
   279e2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   279e4:	687b      	ldr	r3, [r7, #4]
   279e6:	2200      	movs	r2, #0
   279e8:	701a      	strb	r2, [r3, #0]
}
   279ea:	46c0      	nop			; (mov r8, r8)
   279ec:	46bd      	mov	sp, r7
   279ee:	b002      	add	sp, #8
   279f0:	bd80      	pop	{r7, pc}
	...

000279f4 <system_apb_clock_set_mask>:
{
   279f4:	b580      	push	{r7, lr}
   279f6:	b082      	sub	sp, #8
   279f8:	af00      	add	r7, sp, #0
   279fa:	0002      	movs	r2, r0
   279fc:	6039      	str	r1, [r7, #0]
   279fe:	1dfb      	adds	r3, r7, #7
   27a00:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   27a02:	1dfb      	adds	r3, r7, #7
   27a04:	781b      	ldrb	r3, [r3, #0]
   27a06:	2b01      	cmp	r3, #1
   27a08:	d00a      	beq.n	27a20 <system_apb_clock_set_mask+0x2c>
   27a0a:	2b02      	cmp	r3, #2
   27a0c:	d00f      	beq.n	27a2e <system_apb_clock_set_mask+0x3a>
   27a0e:	2b00      	cmp	r3, #0
   27a10:	d114      	bne.n	27a3c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   27a12:	4b0e      	ldr	r3, [pc, #56]	; (27a4c <system_apb_clock_set_mask+0x58>)
   27a14:	4a0d      	ldr	r2, [pc, #52]	; (27a4c <system_apb_clock_set_mask+0x58>)
   27a16:	6991      	ldr	r1, [r2, #24]
   27a18:	683a      	ldr	r2, [r7, #0]
   27a1a:	430a      	orrs	r2, r1
   27a1c:	619a      	str	r2, [r3, #24]
			break;
   27a1e:	e00f      	b.n	27a40 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   27a20:	4b0a      	ldr	r3, [pc, #40]	; (27a4c <system_apb_clock_set_mask+0x58>)
   27a22:	4a0a      	ldr	r2, [pc, #40]	; (27a4c <system_apb_clock_set_mask+0x58>)
   27a24:	69d1      	ldr	r1, [r2, #28]
   27a26:	683a      	ldr	r2, [r7, #0]
   27a28:	430a      	orrs	r2, r1
   27a2a:	61da      	str	r2, [r3, #28]
			break;
   27a2c:	e008      	b.n	27a40 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   27a2e:	4b07      	ldr	r3, [pc, #28]	; (27a4c <system_apb_clock_set_mask+0x58>)
   27a30:	4a06      	ldr	r2, [pc, #24]	; (27a4c <system_apb_clock_set_mask+0x58>)
   27a32:	6a11      	ldr	r1, [r2, #32]
   27a34:	683a      	ldr	r2, [r7, #0]
   27a36:	430a      	orrs	r2, r1
   27a38:	621a      	str	r2, [r3, #32]
			break;
   27a3a:	e001      	b.n	27a40 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   27a3c:	2317      	movs	r3, #23
   27a3e:	e000      	b.n	27a42 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   27a40:	2300      	movs	r3, #0
}
   27a42:	0018      	movs	r0, r3
   27a44:	46bd      	mov	sp, r7
   27a46:	b002      	add	sp, #8
   27a48:	bd80      	pop	{r7, pc}
   27a4a:	46c0      	nop			; (mov r8, r8)
   27a4c:	40000400 	.word	0x40000400

00027a50 <system_interrupt_enable>:
{
   27a50:	b580      	push	{r7, lr}
   27a52:	b082      	sub	sp, #8
   27a54:	af00      	add	r7, sp, #0
   27a56:	0002      	movs	r2, r0
   27a58:	1dfb      	adds	r3, r7, #7
   27a5a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   27a5c:	4b06      	ldr	r3, [pc, #24]	; (27a78 <system_interrupt_enable+0x28>)
   27a5e:	1dfa      	adds	r2, r7, #7
   27a60:	7812      	ldrb	r2, [r2, #0]
   27a62:	0011      	movs	r1, r2
   27a64:	221f      	movs	r2, #31
   27a66:	400a      	ands	r2, r1
   27a68:	2101      	movs	r1, #1
   27a6a:	4091      	lsls	r1, r2
   27a6c:	000a      	movs	r2, r1
   27a6e:	601a      	str	r2, [r3, #0]
}
   27a70:	46c0      	nop			; (mov r8, r8)
   27a72:	46bd      	mov	sp, r7
   27a74:	b002      	add	sp, #8
   27a76:	bd80      	pop	{r7, pc}
   27a78:	e000e100 	.word	0xe000e100

00027a7c <system_interrupt_disable>:
{
   27a7c:	b580      	push	{r7, lr}
   27a7e:	b082      	sub	sp, #8
   27a80:	af00      	add	r7, sp, #0
   27a82:	0002      	movs	r2, r0
   27a84:	1dfb      	adds	r3, r7, #7
   27a86:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   27a88:	4a07      	ldr	r2, [pc, #28]	; (27aa8 <system_interrupt_disable+0x2c>)
   27a8a:	1dfb      	adds	r3, r7, #7
   27a8c:	781b      	ldrb	r3, [r3, #0]
   27a8e:	0019      	movs	r1, r3
   27a90:	231f      	movs	r3, #31
   27a92:	400b      	ands	r3, r1
   27a94:	2101      	movs	r1, #1
   27a96:	4099      	lsls	r1, r3
   27a98:	000b      	movs	r3, r1
   27a9a:	0019      	movs	r1, r3
   27a9c:	2380      	movs	r3, #128	; 0x80
   27a9e:	50d1      	str	r1, [r2, r3]
}
   27aa0:	46c0      	nop			; (mov r8, r8)
   27aa2:	46bd      	mov	sp, r7
   27aa4:	b002      	add	sp, #8
   27aa6:	bd80      	pop	{r7, pc}
   27aa8:	e000e100 	.word	0xe000e100

00027aac <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   27aac:	b580      	push	{r7, lr}
   27aae:	b084      	sub	sp, #16
   27ab0:	af00      	add	r7, sp, #0
   27ab2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27ab4:	687b      	ldr	r3, [r7, #4]
   27ab6:	681b      	ldr	r3, [r3, #0]
   27ab8:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   27aba:	68fb      	ldr	r3, [r7, #12]
   27abc:	7a9b      	ldrb	r3, [r3, #10]
   27abe:	b2db      	uxtb	r3, r3
   27ac0:	b25b      	sxtb	r3, r3
   27ac2:	2b00      	cmp	r3, #0
   27ac4:	da01      	bge.n	27aca <rtc_calendar_is_syncing+0x1e>
                return true;
   27ac6:	2301      	movs	r3, #1
   27ac8:	e000      	b.n	27acc <rtc_calendar_is_syncing+0x20>
        }

        return false;
   27aca:	2300      	movs	r3, #0
}
   27acc:	0018      	movs	r0, r3
   27ace:	46bd      	mov	sp, r7
   27ad0:	b004      	add	sp, #16
   27ad2:	bd80      	pop	{r7, pc}

00027ad4 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   27ad4:	b580      	push	{r7, lr}
   27ad6:	b084      	sub	sp, #16
   27ad8:	af00      	add	r7, sp, #0
   27ada:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27adc:	687b      	ldr	r3, [r7, #4]
   27ade:	681b      	ldr	r3, [r3, #0]
   27ae0:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   27ae2:	2003      	movs	r0, #3
   27ae4:	4b0a      	ldr	r3, [pc, #40]	; (27b10 <rtc_calendar_enable+0x3c>)
   27ae6:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   27ae8:	46c0      	nop			; (mov r8, r8)
   27aea:	687b      	ldr	r3, [r7, #4]
   27aec:	0018      	movs	r0, r3
   27aee:	4b09      	ldr	r3, [pc, #36]	; (27b14 <rtc_calendar_enable+0x40>)
   27af0:	4798      	blx	r3
   27af2:	1e03      	subs	r3, r0, #0
   27af4:	d1f9      	bne.n	27aea <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   27af6:	68fb      	ldr	r3, [r7, #12]
   27af8:	881b      	ldrh	r3, [r3, #0]
   27afa:	b29b      	uxth	r3, r3
   27afc:	2202      	movs	r2, #2
   27afe:	4313      	orrs	r3, r2
   27b00:	b29a      	uxth	r2, r3
   27b02:	68fb      	ldr	r3, [r7, #12]
   27b04:	801a      	strh	r2, [r3, #0]
}
   27b06:	46c0      	nop			; (mov r8, r8)
   27b08:	46bd      	mov	sp, r7
   27b0a:	b004      	add	sp, #16
   27b0c:	bd80      	pop	{r7, pc}
   27b0e:	46c0      	nop			; (mov r8, r8)
   27b10:	00027a51 	.word	0x00027a51
   27b14:	00027aad 	.word	0x00027aad

00027b18 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   27b18:	b580      	push	{r7, lr}
   27b1a:	b084      	sub	sp, #16
   27b1c:	af00      	add	r7, sp, #0
   27b1e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27b20:	687b      	ldr	r3, [r7, #4]
   27b22:	681b      	ldr	r3, [r3, #0]
   27b24:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   27b26:	2003      	movs	r0, #3
   27b28:	4b0d      	ldr	r3, [pc, #52]	; (27b60 <rtc_calendar_disable+0x48>)
   27b2a:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   27b2c:	46c0      	nop			; (mov r8, r8)
   27b2e:	687b      	ldr	r3, [r7, #4]
   27b30:	0018      	movs	r0, r3
   27b32:	4b0c      	ldr	r3, [pc, #48]	; (27b64 <rtc_calendar_disable+0x4c>)
   27b34:	4798      	blx	r3
   27b36:	1e03      	subs	r3, r0, #0
   27b38:	d1f9      	bne.n	27b2e <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   27b3a:	68fb      	ldr	r3, [r7, #12]
   27b3c:	22c1      	movs	r2, #193	; 0xc1
   27b3e:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   27b40:	68fb      	ldr	r3, [r7, #12]
   27b42:	22c1      	movs	r2, #193	; 0xc1
   27b44:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   27b46:	68fb      	ldr	r3, [r7, #12]
   27b48:	881b      	ldrh	r3, [r3, #0]
   27b4a:	b29b      	uxth	r3, r3
   27b4c:	2202      	movs	r2, #2
   27b4e:	4393      	bics	r3, r2
   27b50:	b29a      	uxth	r2, r3
   27b52:	68fb      	ldr	r3, [r7, #12]
   27b54:	801a      	strh	r2, [r3, #0]
}
   27b56:	46c0      	nop			; (mov r8, r8)
   27b58:	46bd      	mov	sp, r7
   27b5a:	b004      	add	sp, #16
   27b5c:	bd80      	pop	{r7, pc}
   27b5e:	46c0      	nop			; (mov r8, r8)
   27b60:	00027a7d 	.word	0x00027a7d
   27b64:	00027aad 	.word	0x00027aad

00027b68 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   27b68:	b580      	push	{r7, lr}
   27b6a:	b084      	sub	sp, #16
   27b6c:	af00      	add	r7, sp, #0
   27b6e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27b70:	687b      	ldr	r3, [r7, #4]
   27b72:	681b      	ldr	r3, [r3, #0]
   27b74:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   27b76:	687b      	ldr	r3, [r7, #4]
   27b78:	0018      	movs	r0, r3
   27b7a:	4b0d      	ldr	r3, [pc, #52]	; (27bb0 <rtc_calendar_reset+0x48>)
   27b7c:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   27b7e:	687b      	ldr	r3, [r7, #4]
   27b80:	2200      	movs	r2, #0
   27b82:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   27b84:	687b      	ldr	r3, [r7, #4]
   27b86:	2200      	movs	r2, #0
   27b88:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   27b8a:	46c0      	nop			; (mov r8, r8)
   27b8c:	687b      	ldr	r3, [r7, #4]
   27b8e:	0018      	movs	r0, r3
   27b90:	4b08      	ldr	r3, [pc, #32]	; (27bb4 <rtc_calendar_reset+0x4c>)
   27b92:	4798      	blx	r3
   27b94:	1e03      	subs	r3, r0, #0
   27b96:	d1f9      	bne.n	27b8c <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   27b98:	68fb      	ldr	r3, [r7, #12]
   27b9a:	881b      	ldrh	r3, [r3, #0]
   27b9c:	b29b      	uxth	r3, r3
   27b9e:	2201      	movs	r2, #1
   27ba0:	4313      	orrs	r3, r2
   27ba2:	b29a      	uxth	r2, r3
   27ba4:	68fb      	ldr	r3, [r7, #12]
   27ba6:	801a      	strh	r2, [r3, #0]
}
   27ba8:	46c0      	nop			; (mov r8, r8)
   27baa:	46bd      	mov	sp, r7
   27bac:	b004      	add	sp, #16
   27bae:	bd80      	pop	{r7, pc}
   27bb0:	00027b19 	.word	0x00027b19
   27bb4:	00027aad 	.word	0x00027aad

00027bb8 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   27bb8:	b580      	push	{r7, lr}
   27bba:	b084      	sub	sp, #16
   27bbc:	af00      	add	r7, sp, #0
   27bbe:	6078      	str	r0, [r7, #4]
   27bc0:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   27bc2:	683b      	ldr	r3, [r7, #0]
   27bc4:	88db      	ldrh	r3, [r3, #6]
   27bc6:	001a      	movs	r2, r3
   27bc8:	687b      	ldr	r3, [r7, #4]
   27bca:	88db      	ldrh	r3, [r3, #6]
   27bcc:	1ad3      	subs	r3, r2, r3
   27bce:	069b      	lsls	r3, r3, #26
   27bd0:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   27bd2:	683b      	ldr	r3, [r7, #0]
   27bd4:	795b      	ldrb	r3, [r3, #5]
   27bd6:	059b      	lsls	r3, r3, #22
   27bd8:	001a      	movs	r2, r3
   27bda:	68fb      	ldr	r3, [r7, #12]
   27bdc:	4313      	orrs	r3, r2
   27bde:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   27be0:	683b      	ldr	r3, [r7, #0]
   27be2:	791b      	ldrb	r3, [r3, #4]
   27be4:	045b      	lsls	r3, r3, #17
   27be6:	001a      	movs	r2, r3
   27be8:	68fb      	ldr	r3, [r7, #12]
   27bea:	4313      	orrs	r3, r2
   27bec:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   27bee:	683b      	ldr	r3, [r7, #0]
   27bf0:	789b      	ldrb	r3, [r3, #2]
   27bf2:	031b      	lsls	r3, r3, #12
   27bf4:	001a      	movs	r2, r3
   27bf6:	68fb      	ldr	r3, [r7, #12]
   27bf8:	4313      	orrs	r3, r2
   27bfa:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   27bfc:	687b      	ldr	r3, [r7, #4]
   27bfe:	791b      	ldrb	r3, [r3, #4]
   27c00:	2201      	movs	r2, #1
   27c02:	4053      	eors	r3, r2
   27c04:	b2db      	uxtb	r3, r3
   27c06:	2b00      	cmp	r3, #0
   27c08:	d008      	beq.n	27c1c <rtc_calendar_time_to_register_value+0x64>
   27c0a:	683b      	ldr	r3, [r7, #0]
   27c0c:	78db      	ldrb	r3, [r3, #3]
   27c0e:	2b00      	cmp	r3, #0
   27c10:	d004      	beq.n	27c1c <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   27c12:	68fb      	ldr	r3, [r7, #12]
   27c14:	2280      	movs	r2, #128	; 0x80
   27c16:	0252      	lsls	r2, r2, #9
   27c18:	4313      	orrs	r3, r2
   27c1a:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   27c1c:	683b      	ldr	r3, [r7, #0]
   27c1e:	785b      	ldrb	r3, [r3, #1]
   27c20:	019b      	lsls	r3, r3, #6
   27c22:	001a      	movs	r2, r3
   27c24:	68fb      	ldr	r3, [r7, #12]
   27c26:	4313      	orrs	r3, r2
   27c28:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   27c2a:	683b      	ldr	r3, [r7, #0]
   27c2c:	781b      	ldrb	r3, [r3, #0]
   27c2e:	001a      	movs	r2, r3
   27c30:	68fb      	ldr	r3, [r7, #12]
   27c32:	4313      	orrs	r3, r2
   27c34:	60fb      	str	r3, [r7, #12]

	return register_value;
   27c36:	68fb      	ldr	r3, [r7, #12]
}
   27c38:	0018      	movs	r0, r3
   27c3a:	46bd      	mov	sp, r7
   27c3c:	b004      	add	sp, #16
   27c3e:	bd80      	pop	{r7, pc}

00027c40 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   27c40:	b580      	push	{r7, lr}
   27c42:	b084      	sub	sp, #16
   27c44:	af00      	add	r7, sp, #0
   27c46:	60f8      	str	r0, [r7, #12]
   27c48:	60b9      	str	r1, [r7, #8]
   27c4a:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   27c4c:	68bb      	ldr	r3, [r7, #8]
   27c4e:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   27c50:	b29a      	uxth	r2, r3
   27c52:	68fb      	ldr	r3, [r7, #12]
   27c54:	88db      	ldrh	r3, [r3, #6]
   27c56:	18d3      	adds	r3, r2, r3
   27c58:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   27c5a:	687b      	ldr	r3, [r7, #4]
   27c5c:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   27c5e:	68bb      	ldr	r3, [r7, #8]
   27c60:	0d9b      	lsrs	r3, r3, #22
   27c62:	b2db      	uxtb	r3, r3
   27c64:	220f      	movs	r2, #15
   27c66:	4013      	ands	r3, r2
   27c68:	b2da      	uxtb	r2, r3
   27c6a:	687b      	ldr	r3, [r7, #4]
   27c6c:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   27c6e:	68bb      	ldr	r3, [r7, #8]
   27c70:	0c5b      	lsrs	r3, r3, #17
   27c72:	b2db      	uxtb	r3, r3
   27c74:	221f      	movs	r2, #31
   27c76:	4013      	ands	r3, r2
   27c78:	b2da      	uxtb	r2, r3
   27c7a:	687b      	ldr	r3, [r7, #4]
   27c7c:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   27c7e:	68fb      	ldr	r3, [r7, #12]
   27c80:	791b      	ldrb	r3, [r3, #4]
   27c82:	2b00      	cmp	r3, #0
   27c84:	d008      	beq.n	27c98 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   27c86:	68bb      	ldr	r3, [r7, #8]
   27c88:	0b1b      	lsrs	r3, r3, #12
   27c8a:	b2db      	uxtb	r3, r3
   27c8c:	221f      	movs	r2, #31
   27c8e:	4013      	ands	r3, r2
   27c90:	b2da      	uxtb	r2, r3
   27c92:	687b      	ldr	r3, [r7, #4]
   27c94:	709a      	strb	r2, [r3, #2]
   27c96:	e010      	b.n	27cba <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   27c98:	68bb      	ldr	r3, [r7, #8]
   27c9a:	0b1b      	lsrs	r3, r3, #12
   27c9c:	b2db      	uxtb	r3, r3
   27c9e:	220f      	movs	r2, #15
   27ca0:	4013      	ands	r3, r2
   27ca2:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   27ca4:	687b      	ldr	r3, [r7, #4]
   27ca6:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   27ca8:	68ba      	ldr	r2, [r7, #8]
   27caa:	2380      	movs	r3, #128	; 0x80
   27cac:	025b      	lsls	r3, r3, #9
   27cae:	4013      	ands	r3, r2
   27cb0:	1e5a      	subs	r2, r3, #1
   27cb2:	4193      	sbcs	r3, r2
   27cb4:	b2da      	uxtb	r2, r3
   27cb6:	687b      	ldr	r3, [r7, #4]
   27cb8:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   27cba:	68bb      	ldr	r3, [r7, #8]
   27cbc:	099b      	lsrs	r3, r3, #6
   27cbe:	b2db      	uxtb	r3, r3
   27cc0:	223f      	movs	r2, #63	; 0x3f
   27cc2:	4013      	ands	r3, r2
   27cc4:	b2da      	uxtb	r2, r3
   27cc6:	687b      	ldr	r3, [r7, #4]
   27cc8:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   27cca:	68bb      	ldr	r3, [r7, #8]
   27ccc:	b2db      	uxtb	r3, r3
   27cce:	223f      	movs	r2, #63	; 0x3f
   27cd0:	4013      	ands	r3, r2
   27cd2:	b2da      	uxtb	r2, r3
   27cd4:	687b      	ldr	r3, [r7, #4]
   27cd6:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   27cd8:	46c0      	nop			; (mov r8, r8)
   27cda:	46bd      	mov	sp, r7
   27cdc:	b004      	add	sp, #16
   27cde:	bd80      	pop	{r7, pc}

00027ce0 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   27ce0:	b580      	push	{r7, lr}
   27ce2:	b084      	sub	sp, #16
   27ce4:	af00      	add	r7, sp, #0
   27ce6:	6078      	str	r0, [r7, #4]
   27ce8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27cea:	687b      	ldr	r3, [r7, #4]
   27cec:	681b      	ldr	r3, [r3, #0]
   27cee:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   27cf0:	683b      	ldr	r3, [r7, #0]
   27cf2:	881a      	ldrh	r2, [r3, #0]
   27cf4:	230e      	movs	r3, #14
   27cf6:	18fb      	adds	r3, r7, r3
   27cf8:	2108      	movs	r1, #8
   27cfa:	430a      	orrs	r2, r1
   27cfc:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   27cfe:	683b      	ldr	r3, [r7, #0]
   27d00:	791b      	ldrb	r3, [r3, #4]
   27d02:	2201      	movs	r2, #1
   27d04:	4053      	eors	r3, r2
   27d06:	b2db      	uxtb	r3, r3
   27d08:	2b00      	cmp	r3, #0
   27d0a:	d007      	beq.n	27d1c <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   27d0c:	230e      	movs	r3, #14
   27d0e:	18fb      	adds	r3, r7, r3
   27d10:	220e      	movs	r2, #14
   27d12:	18ba      	adds	r2, r7, r2
   27d14:	8812      	ldrh	r2, [r2, #0]
   27d16:	2140      	movs	r1, #64	; 0x40
   27d18:	430a      	orrs	r2, r1
   27d1a:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   27d1c:	683b      	ldr	r3, [r7, #0]
   27d1e:	789b      	ldrb	r3, [r3, #2]
   27d20:	2b00      	cmp	r3, #0
   27d22:	d007      	beq.n	27d34 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   27d24:	230e      	movs	r3, #14
   27d26:	18fb      	adds	r3, r7, r3
   27d28:	220e      	movs	r2, #14
   27d2a:	18ba      	adds	r2, r7, r2
   27d2c:	8812      	ldrh	r2, [r2, #0]
   27d2e:	2180      	movs	r1, #128	; 0x80
   27d30:	430a      	orrs	r2, r1
   27d32:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   27d34:	68bb      	ldr	r3, [r7, #8]
   27d36:	220e      	movs	r2, #14
   27d38:	18ba      	adds	r2, r7, r2
   27d3a:	8812      	ldrh	r2, [r2, #0]
   27d3c:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   27d3e:	683b      	ldr	r3, [r7, #0]
   27d40:	78db      	ldrb	r3, [r3, #3]
   27d42:	2b00      	cmp	r3, #0
   27d44:	d008      	beq.n	27d58 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   27d46:	68bb      	ldr	r3, [r7, #8]
   27d48:	885b      	ldrh	r3, [r3, #2]
   27d4a:	b29b      	uxth	r3, r3
   27d4c:	2280      	movs	r2, #128	; 0x80
   27d4e:	01d2      	lsls	r2, r2, #7
   27d50:	4313      	orrs	r3, r2
   27d52:	b29a      	uxth	r2, r3
   27d54:	68bb      	ldr	r3, [r7, #8]
   27d56:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   27d58:	230d      	movs	r3, #13
   27d5a:	18fb      	adds	r3, r7, r3
   27d5c:	2200      	movs	r2, #0
   27d5e:	701a      	strb	r2, [r3, #0]
   27d60:	e017      	b.n	27d92 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   27d62:	230d      	movs	r3, #13
   27d64:	18fb      	adds	r3, r7, r3
   27d66:	781a      	ldrb	r2, [r3, #0]
   27d68:	0013      	movs	r3, r2
   27d6a:	009b      	lsls	r3, r3, #2
   27d6c:	189b      	adds	r3, r3, r2
   27d6e:	005b      	lsls	r3, r3, #1
   27d70:	3308      	adds	r3, #8
   27d72:	683a      	ldr	r2, [r7, #0]
   27d74:	18d1      	adds	r1, r2, r3
   27d76:	230d      	movs	r3, #13
   27d78:	18fb      	adds	r3, r7, r3
   27d7a:	781a      	ldrb	r2, [r3, #0]
   27d7c:	687b      	ldr	r3, [r7, #4]
   27d7e:	0018      	movs	r0, r3
   27d80:	4b08      	ldr	r3, [pc, #32]	; (27da4 <_rtc_calendar_set_config+0xc4>)
   27d82:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   27d84:	230d      	movs	r3, #13
   27d86:	18fb      	adds	r3, r7, r3
   27d88:	781a      	ldrb	r2, [r3, #0]
   27d8a:	230d      	movs	r3, #13
   27d8c:	18fb      	adds	r3, r7, r3
   27d8e:	3201      	adds	r2, #1
   27d90:	701a      	strb	r2, [r3, #0]
   27d92:	230d      	movs	r3, #13
   27d94:	18fb      	adds	r3, r7, r3
   27d96:	781b      	ldrb	r3, [r3, #0]
   27d98:	2b00      	cmp	r3, #0
   27d9a:	d0e2      	beq.n	27d62 <_rtc_calendar_set_config+0x82>
	}
}
   27d9c:	46c0      	nop			; (mov r8, r8)
   27d9e:	46bd      	mov	sp, r7
   27da0:	b004      	add	sp, #16
   27da2:	bd80      	pop	{r7, pc}
   27da4:	00027ec9 	.word	0x00027ec9

00027da8 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   27da8:	b580      	push	{r7, lr}
   27daa:	b086      	sub	sp, #24
   27dac:	af00      	add	r7, sp, #0
   27dae:	60f8      	str	r0, [r7, #12]
   27db0:	60b9      	str	r1, [r7, #8]
   27db2:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   27db4:	68fb      	ldr	r3, [r7, #12]
   27db6:	68ba      	ldr	r2, [r7, #8]
   27db8:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   27dba:	2120      	movs	r1, #32
   27dbc:	2000      	movs	r0, #0
   27dbe:	4b18      	ldr	r3, [pc, #96]	; (27e20 <rtc_calendar_init+0x78>)
   27dc0:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27dc2:	2314      	movs	r3, #20
   27dc4:	18fb      	adds	r3, r7, r3
   27dc6:	0018      	movs	r0, r3
   27dc8:	4b16      	ldr	r3, [pc, #88]	; (27e24 <rtc_calendar_init+0x7c>)
   27dca:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   27dcc:	2314      	movs	r3, #20
   27dce:	18fb      	adds	r3, r7, r3
   27dd0:	2202      	movs	r2, #2
   27dd2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   27dd4:	2314      	movs	r3, #20
   27dd6:	18fb      	adds	r3, r7, r3
   27dd8:	0019      	movs	r1, r3
   27dda:	2004      	movs	r0, #4
   27ddc:	4b12      	ldr	r3, [pc, #72]	; (27e28 <rtc_calendar_init+0x80>)
   27dde:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   27de0:	2004      	movs	r0, #4
   27de2:	4b12      	ldr	r3, [pc, #72]	; (27e2c <rtc_calendar_init+0x84>)
   27de4:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   27de6:	68fb      	ldr	r3, [r7, #12]
   27de8:	0018      	movs	r0, r3
   27dea:	4b11      	ldr	r3, [pc, #68]	; (27e30 <rtc_calendar_init+0x88>)
   27dec:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   27dee:	687b      	ldr	r3, [r7, #4]
   27df0:	791a      	ldrb	r2, [r3, #4]
   27df2:	68fb      	ldr	r3, [r7, #12]
   27df4:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   27df6:	687b      	ldr	r3, [r7, #4]
   27df8:	78da      	ldrb	r2, [r3, #3]
   27dfa:	68fb      	ldr	r3, [r7, #12]
   27dfc:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   27dfe:	687b      	ldr	r3, [r7, #4]
   27e00:	88da      	ldrh	r2, [r3, #6]
   27e02:	68fb      	ldr	r3, [r7, #12]
   27e04:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   27e06:	4b0b      	ldr	r3, [pc, #44]	; (27e34 <rtc_calendar_init+0x8c>)
   27e08:	68fa      	ldr	r2, [r7, #12]
   27e0a:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   27e0c:	687a      	ldr	r2, [r7, #4]
   27e0e:	68fb      	ldr	r3, [r7, #12]
   27e10:	0011      	movs	r1, r2
   27e12:	0018      	movs	r0, r3
   27e14:	4b08      	ldr	r3, [pc, #32]	; (27e38 <rtc_calendar_init+0x90>)
   27e16:	4798      	blx	r3
}
   27e18:	46c0      	nop			; (mov r8, r8)
   27e1a:	46bd      	mov	sp, r7
   27e1c:	b006      	add	sp, #24
   27e1e:	bd80      	pop	{r7, pc}
   27e20:	000279f5 	.word	0x000279f5
   27e24:	000279dd 	.word	0x000279dd
   27e28:	0002ae0d 	.word	0x0002ae0d
   27e2c:	0002ae51 	.word	0x0002ae51
   27e30:	00027b69 	.word	0x00027b69
   27e34:	20005c98 	.word	0x20005c98
   27e38:	00027ce1 	.word	0x00027ce1

00027e3c <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   27e3c:	b580      	push	{r7, lr}
   27e3e:	b084      	sub	sp, #16
   27e40:	af00      	add	r7, sp, #0
   27e42:	6078      	str	r0, [r7, #4]
   27e44:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27e46:	687b      	ldr	r3, [r7, #4]
   27e48:	681b      	ldr	r3, [r3, #0]
   27e4a:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   27e4c:	687b      	ldr	r3, [r7, #4]
   27e4e:	795b      	ldrb	r3, [r3, #5]
   27e50:	2201      	movs	r2, #1
   27e52:	4053      	eors	r3, r2
   27e54:	b2db      	uxtb	r3, r3
   27e56:	2b00      	cmp	r3, #0
   27e58:	d00a      	beq.n	27e70 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   27e5a:	68fb      	ldr	r3, [r7, #12]
   27e5c:	4a16      	ldr	r2, [pc, #88]	; (27eb8 <rtc_calendar_get_time+0x7c>)
   27e5e:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   27e60:	46c0      	nop			; (mov r8, r8)
   27e62:	687b      	ldr	r3, [r7, #4]
   27e64:	0018      	movs	r0, r3
   27e66:	4b15      	ldr	r3, [pc, #84]	; (27ebc <rtc_calendar_get_time+0x80>)
   27e68:	4798      	blx	r3
   27e6a:	1e03      	subs	r3, r0, #0
   27e6c:	d1f9      	bne.n	27e62 <rtc_calendar_get_time+0x26>
   27e6e:	e016      	b.n	27e9e <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   27e70:	68fb      	ldr	r3, [r7, #12]
   27e72:	885b      	ldrh	r3, [r3, #2]
   27e74:	b29b      	uxth	r3, r3
   27e76:	001a      	movs	r2, r3
   27e78:	2380      	movs	r3, #128	; 0x80
   27e7a:	01db      	lsls	r3, r3, #7
   27e7c:	4013      	ands	r3, r2
   27e7e:	d10e      	bne.n	27e9e <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   27e80:	68fb      	ldr	r3, [r7, #12]
   27e82:	885b      	ldrh	r3, [r3, #2]
   27e84:	b29b      	uxth	r3, r3
   27e86:	4a0e      	ldr	r2, [pc, #56]	; (27ec0 <rtc_calendar_get_time+0x84>)
   27e88:	4313      	orrs	r3, r2
   27e8a:	b29a      	uxth	r2, r3
   27e8c:	68fb      	ldr	r3, [r7, #12]
   27e8e:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   27e90:	46c0      	nop			; (mov r8, r8)
   27e92:	687b      	ldr	r3, [r7, #4]
   27e94:	0018      	movs	r0, r3
   27e96:	4b09      	ldr	r3, [pc, #36]	; (27ebc <rtc_calendar_get_time+0x80>)
   27e98:	4798      	blx	r3
   27e9a:	1e03      	subs	r3, r0, #0
   27e9c:	d1f9      	bne.n	27e92 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   27e9e:	68fb      	ldr	r3, [r7, #12]
   27ea0:	691b      	ldr	r3, [r3, #16]
   27ea2:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   27ea4:	683a      	ldr	r2, [r7, #0]
   27ea6:	68b9      	ldr	r1, [r7, #8]
   27ea8:	687b      	ldr	r3, [r7, #4]
   27eaa:	0018      	movs	r0, r3
   27eac:	4b05      	ldr	r3, [pc, #20]	; (27ec4 <rtc_calendar_get_time+0x88>)
   27eae:	4798      	blx	r3
}
   27eb0:	46c0      	nop			; (mov r8, r8)
   27eb2:	46bd      	mov	sp, r7
   27eb4:	b004      	add	sp, #16
   27eb6:	bd80      	pop	{r7, pc}
   27eb8:	ffff8000 	.word	0xffff8000
   27ebc:	00027aad 	.word	0x00027aad
   27ec0:	ffffc000 	.word	0xffffc000
   27ec4:	00027c41 	.word	0x00027c41

00027ec8 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   27ec8:	b580      	push	{r7, lr}
   27eca:	b086      	sub	sp, #24
   27ecc:	af00      	add	r7, sp, #0
   27ece:	60f8      	str	r0, [r7, #12]
   27ed0:	60b9      	str	r1, [r7, #8]
   27ed2:	1dfb      	adds	r3, r7, #7
   27ed4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27ed6:	68fb      	ldr	r3, [r7, #12]
   27ed8:	681b      	ldr	r3, [r3, #0]
   27eda:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   27edc:	1dfb      	adds	r3, r7, #7
   27ede:	781b      	ldrb	r3, [r3, #0]
   27ee0:	2b01      	cmp	r3, #1
   27ee2:	d901      	bls.n	27ee8 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   27ee4:	2317      	movs	r3, #23
   27ee6:	e021      	b.n	27f2c <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   27ee8:	68ba      	ldr	r2, [r7, #8]
   27eea:	68fb      	ldr	r3, [r7, #12]
   27eec:	0011      	movs	r1, r2
   27eee:	0018      	movs	r0, r3
   27ef0:	4b10      	ldr	r3, [pc, #64]	; (27f34 <rtc_calendar_set_alarm+0x6c>)
   27ef2:	4798      	blx	r3
   27ef4:	0003      	movs	r3, r0
   27ef6:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   27ef8:	46c0      	nop			; (mov r8, r8)
   27efa:	68fb      	ldr	r3, [r7, #12]
   27efc:	0018      	movs	r0, r3
   27efe:	4b0e      	ldr	r3, [pc, #56]	; (27f38 <rtc_calendar_set_alarm+0x70>)
   27f00:	4798      	blx	r3
   27f02:	1e03      	subs	r3, r0, #0
   27f04:	d1f9      	bne.n	27efa <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   27f06:	1dfb      	adds	r3, r7, #7
   27f08:	781a      	ldrb	r2, [r3, #0]
   27f0a:	697b      	ldr	r3, [r7, #20]
   27f0c:	3203      	adds	r2, #3
   27f0e:	00d2      	lsls	r2, r2, #3
   27f10:	6939      	ldr	r1, [r7, #16]
   27f12:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   27f14:	1dfb      	adds	r3, r7, #7
   27f16:	781b      	ldrb	r3, [r3, #0]
   27f18:	68ba      	ldr	r2, [r7, #8]
   27f1a:	7a11      	ldrb	r1, [r2, #8]
   27f1c:	697a      	ldr	r2, [r7, #20]
   27f1e:	3303      	adds	r3, #3
   27f20:	00db      	lsls	r3, r3, #3
   27f22:	18d3      	adds	r3, r2, r3
   27f24:	3304      	adds	r3, #4
   27f26:	1c0a      	adds	r2, r1, #0
   27f28:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   27f2a:	2300      	movs	r3, #0
}
   27f2c:	0018      	movs	r0, r3
   27f2e:	46bd      	mov	sp, r7
   27f30:	b006      	add	sp, #24
   27f32:	bd80      	pop	{r7, pc}
   27f34:	00027bb9 	.word	0x00027bb9
   27f38:	00027aad 	.word	0x00027aad

00027f3c <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   27f3c:	b580      	push	{r7, lr}
   27f3e:	b086      	sub	sp, #24
   27f40:	af00      	add	r7, sp, #0
   27f42:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   27f44:	4b28      	ldr	r3, [pc, #160]	; (27fe8 <_rtc_interrupt_handler+0xac>)
   27f46:	687a      	ldr	r2, [r7, #4]
   27f48:	0092      	lsls	r2, r2, #2
   27f4a:	58d3      	ldr	r3, [r2, r3]
   27f4c:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   27f4e:	697b      	ldr	r3, [r7, #20]
   27f50:	681b      	ldr	r3, [r3, #0]
   27f52:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   27f54:	230e      	movs	r3, #14
   27f56:	18fb      	adds	r3, r7, r3
   27f58:	697a      	ldr	r2, [r7, #20]
   27f5a:	8a52      	ldrh	r2, [r2, #18]
   27f5c:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   27f5e:	697b      	ldr	r3, [r7, #20]
   27f60:	8a1b      	ldrh	r3, [r3, #16]
   27f62:	b29a      	uxth	r2, r3
   27f64:	230e      	movs	r3, #14
   27f66:	18fb      	adds	r3, r7, r3
   27f68:	210e      	movs	r1, #14
   27f6a:	1879      	adds	r1, r7, r1
   27f6c:	8809      	ldrh	r1, [r1, #0]
   27f6e:	400a      	ands	r2, r1
   27f70:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   27f72:	693b      	ldr	r3, [r7, #16]
   27f74:	7a1b      	ldrb	r3, [r3, #8]
   27f76:	b2da      	uxtb	r2, r3
   27f78:	230c      	movs	r3, #12
   27f7a:	18fb      	adds	r3, r7, r3
   27f7c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   27f7e:	693b      	ldr	r3, [r7, #16]
   27f80:	79db      	ldrb	r3, [r3, #7]
   27f82:	b2db      	uxtb	r3, r3
   27f84:	b29a      	uxth	r2, r3
   27f86:	230c      	movs	r3, #12
   27f88:	18fb      	adds	r3, r7, r3
   27f8a:	210c      	movs	r1, #12
   27f8c:	1879      	adds	r1, r7, r1
   27f8e:	8809      	ldrh	r1, [r1, #0]
   27f90:	400a      	ands	r2, r1
   27f92:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   27f94:	230c      	movs	r3, #12
   27f96:	18fb      	adds	r3, r7, r3
   27f98:	881b      	ldrh	r3, [r3, #0]
   27f9a:	2280      	movs	r2, #128	; 0x80
   27f9c:	4013      	ands	r3, r2
   27f9e:	d00c      	beq.n	27fba <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   27fa0:	230e      	movs	r3, #14
   27fa2:	18fb      	adds	r3, r7, r3
   27fa4:	881b      	ldrh	r3, [r3, #0]
   27fa6:	2202      	movs	r2, #2
   27fa8:	4013      	ands	r3, r2
   27faa:	d002      	beq.n	27fb2 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   27fac:	697b      	ldr	r3, [r7, #20]
   27fae:	68db      	ldr	r3, [r3, #12]
   27fb0:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   27fb2:	693b      	ldr	r3, [r7, #16]
   27fb4:	2280      	movs	r2, #128	; 0x80
   27fb6:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   27fb8:	e011      	b.n	27fde <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   27fba:	230c      	movs	r3, #12
   27fbc:	18fb      	adds	r3, r7, r3
   27fbe:	881b      	ldrh	r3, [r3, #0]
   27fc0:	2201      	movs	r2, #1
   27fc2:	4013      	ands	r3, r2
   27fc4:	d00b      	beq.n	27fde <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   27fc6:	230e      	movs	r3, #14
   27fc8:	18fb      	adds	r3, r7, r3
   27fca:	881b      	ldrh	r3, [r3, #0]
   27fcc:	2201      	movs	r2, #1
   27fce:	4013      	ands	r3, r2
   27fd0:	d002      	beq.n	27fd8 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   27fd2:	697b      	ldr	r3, [r7, #20]
   27fd4:	689b      	ldr	r3, [r3, #8]
   27fd6:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   27fd8:	693b      	ldr	r3, [r7, #16]
   27fda:	2201      	movs	r2, #1
   27fdc:	721a      	strb	r2, [r3, #8]
}
   27fde:	46c0      	nop			; (mov r8, r8)
   27fe0:	46bd      	mov	sp, r7
   27fe2:	b006      	add	sp, #24
   27fe4:	bd80      	pop	{r7, pc}
   27fe6:	46c0      	nop			; (mov r8, r8)
   27fe8:	20005c98 	.word	0x20005c98

00027fec <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   27fec:	b580      	push	{r7, lr}
   27fee:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   27ff0:	2000      	movs	r0, #0
   27ff2:	4b02      	ldr	r3, [pc, #8]	; (27ffc <RTC_Handler+0x10>)
   27ff4:	4798      	blx	r3
}
   27ff6:	46c0      	nop			; (mov r8, r8)
   27ff8:	46bd      	mov	sp, r7
   27ffa:	bd80      	pop	{r7, pc}
   27ffc:	00027f3d 	.word	0x00027f3d

00028000 <system_gclk_chan_get_config_defaults>:
{
   28000:	b580      	push	{r7, lr}
   28002:	b082      	sub	sp, #8
   28004:	af00      	add	r7, sp, #0
   28006:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   28008:	687b      	ldr	r3, [r7, #4]
   2800a:	2200      	movs	r2, #0
   2800c:	701a      	strb	r2, [r3, #0]
}
   2800e:	46c0      	nop			; (mov r8, r8)
   28010:	46bd      	mov	sp, r7
   28012:	b002      	add	sp, #8
   28014:	bd80      	pop	{r7, pc}

00028016 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   28016:	b5f0      	push	{r4, r5, r6, r7, lr}
   28018:	b08d      	sub	sp, #52	; 0x34
   2801a:	af00      	add	r7, sp, #0
   2801c:	60b8      	str	r0, [r7, #8]
   2801e:	60f9      	str	r1, [r7, #12]
   28020:	603a      	str	r2, [r7, #0]
   28022:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   28024:	2300      	movs	r3, #0
   28026:	2400      	movs	r4, #0
   28028:	623b      	str	r3, [r7, #32]
   2802a:	627c      	str	r4, [r7, #36]	; 0x24
   2802c:	2300      	movs	r3, #0
   2802e:	2400      	movs	r4, #0
   28030:	61bb      	str	r3, [r7, #24]
   28032:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   28034:	233f      	movs	r3, #63	; 0x3f
   28036:	62fb      	str	r3, [r7, #44]	; 0x2c
   28038:	e053      	b.n	280e2 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   2803a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2803c:	3b20      	subs	r3, #32
   2803e:	2b00      	cmp	r3, #0
   28040:	db04      	blt.n	2804c <long_division+0x36>
   28042:	2201      	movs	r2, #1
   28044:	409a      	lsls	r2, r3
   28046:	0013      	movs	r3, r2
   28048:	617b      	str	r3, [r7, #20]
   2804a:	e00b      	b.n	28064 <long_division+0x4e>
   2804c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2804e:	2220      	movs	r2, #32
   28050:	1ad3      	subs	r3, r2, r3
   28052:	2201      	movs	r2, #1
   28054:	40da      	lsrs	r2, r3
   28056:	0013      	movs	r3, r2
   28058:	2100      	movs	r1, #0
   2805a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2805c:	4091      	lsls	r1, r2
   2805e:	000a      	movs	r2, r1
   28060:	4313      	orrs	r3, r2
   28062:	617b      	str	r3, [r7, #20]
   28064:	2201      	movs	r2, #1
   28066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   28068:	409a      	lsls	r2, r3
   2806a:	0013      	movs	r3, r2
   2806c:	613b      	str	r3, [r7, #16]

		r = r << 1;
   2806e:	69bb      	ldr	r3, [r7, #24]
   28070:	69fc      	ldr	r4, [r7, #28]
   28072:	18db      	adds	r3, r3, r3
   28074:	4164      	adcs	r4, r4
   28076:	61bb      	str	r3, [r7, #24]
   28078:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   2807a:	68bb      	ldr	r3, [r7, #8]
   2807c:	693a      	ldr	r2, [r7, #16]
   2807e:	401a      	ands	r2, r3
   28080:	0015      	movs	r5, r2
   28082:	68fb      	ldr	r3, [r7, #12]
   28084:	697a      	ldr	r2, [r7, #20]
   28086:	401a      	ands	r2, r3
   28088:	0016      	movs	r6, r2
   2808a:	002b      	movs	r3, r5
   2808c:	4333      	orrs	r3, r6
   2808e:	d007      	beq.n	280a0 <long_division+0x8a>
			r |= 0x01;
   28090:	69bb      	ldr	r3, [r7, #24]
   28092:	2201      	movs	r2, #1
   28094:	4313      	orrs	r3, r2
   28096:	61bb      	str	r3, [r7, #24]
   28098:	69fb      	ldr	r3, [r7, #28]
   2809a:	2200      	movs	r2, #0
   2809c:	4313      	orrs	r3, r2
   2809e:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   280a0:	687a      	ldr	r2, [r7, #4]
   280a2:	69fb      	ldr	r3, [r7, #28]
   280a4:	429a      	cmp	r2, r3
   280a6:	d819      	bhi.n	280dc <long_division+0xc6>
   280a8:	687a      	ldr	r2, [r7, #4]
   280aa:	69fb      	ldr	r3, [r7, #28]
   280ac:	429a      	cmp	r2, r3
   280ae:	d103      	bne.n	280b8 <long_division+0xa2>
   280b0:	683a      	ldr	r2, [r7, #0]
   280b2:	69bb      	ldr	r3, [r7, #24]
   280b4:	429a      	cmp	r2, r3
   280b6:	d811      	bhi.n	280dc <long_division+0xc6>
			r = r - d;
   280b8:	69b9      	ldr	r1, [r7, #24]
   280ba:	69fa      	ldr	r2, [r7, #28]
   280bc:	683b      	ldr	r3, [r7, #0]
   280be:	687c      	ldr	r4, [r7, #4]
   280c0:	1ac9      	subs	r1, r1, r3
   280c2:	41a2      	sbcs	r2, r4
   280c4:	000b      	movs	r3, r1
   280c6:	0014      	movs	r4, r2
   280c8:	61bb      	str	r3, [r7, #24]
   280ca:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   280cc:	6a3a      	ldr	r2, [r7, #32]
   280ce:	693b      	ldr	r3, [r7, #16]
   280d0:	4313      	orrs	r3, r2
   280d2:	623b      	str	r3, [r7, #32]
   280d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   280d6:	697b      	ldr	r3, [r7, #20]
   280d8:	4313      	orrs	r3, r2
   280da:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   280dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   280de:	3b01      	subs	r3, #1
   280e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   280e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   280e4:	2b00      	cmp	r3, #0
   280e6:	daa8      	bge.n	2803a <long_division+0x24>
		}
	}

	return q;
   280e8:	6a3b      	ldr	r3, [r7, #32]
   280ea:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   280ec:	0018      	movs	r0, r3
   280ee:	0021      	movs	r1, r4
   280f0:	46bd      	mov	sp, r7
   280f2:	b00d      	add	sp, #52	; 0x34
   280f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000280f6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   280f6:	b580      	push	{r7, lr}
   280f8:	b086      	sub	sp, #24
   280fa:	af00      	add	r7, sp, #0
   280fc:	60f8      	str	r0, [r7, #12]
   280fe:	60b9      	str	r1, [r7, #8]
   28100:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   28102:	2316      	movs	r3, #22
   28104:	18fb      	adds	r3, r7, r3
   28106:	2200      	movs	r2, #0
   28108:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   2810a:	68bb      	ldr	r3, [r7, #8]
   2810c:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   2810e:	68bb      	ldr	r3, [r7, #8]
   28110:	085a      	lsrs	r2, r3, #1
   28112:	68fb      	ldr	r3, [r7, #12]
   28114:	429a      	cmp	r2, r3
   28116:	d201      	bcs.n	2811c <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   28118:	2340      	movs	r3, #64	; 0x40
   2811a:	e026      	b.n	2816a <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   2811c:	68bb      	ldr	r3, [r7, #8]
   2811e:	085b      	lsrs	r3, r3, #1
   28120:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   28122:	e00a      	b.n	2813a <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   28124:	693a      	ldr	r2, [r7, #16]
   28126:	68fb      	ldr	r3, [r7, #12]
   28128:	1ad3      	subs	r3, r2, r3
   2812a:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   2812c:	2316      	movs	r3, #22
   2812e:	18fb      	adds	r3, r7, r3
   28130:	881a      	ldrh	r2, [r3, #0]
   28132:	2316      	movs	r3, #22
   28134:	18fb      	adds	r3, r7, r3
   28136:	3201      	adds	r2, #1
   28138:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   2813a:	693a      	ldr	r2, [r7, #16]
   2813c:	68fb      	ldr	r3, [r7, #12]
   2813e:	429a      	cmp	r2, r3
   28140:	d2f0      	bcs.n	28124 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   28142:	2316      	movs	r3, #22
   28144:	18fb      	adds	r3, r7, r3
   28146:	2216      	movs	r2, #22
   28148:	18ba      	adds	r2, r7, r2
   2814a:	8812      	ldrh	r2, [r2, #0]
   2814c:	3a01      	subs	r2, #1
   2814e:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   28150:	2316      	movs	r3, #22
   28152:	18fb      	adds	r3, r7, r3
   28154:	881b      	ldrh	r3, [r3, #0]
   28156:	2bff      	cmp	r3, #255	; 0xff
   28158:	d901      	bls.n	2815e <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   2815a:	2340      	movs	r3, #64	; 0x40
   2815c:	e005      	b.n	2816a <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   2815e:	687b      	ldr	r3, [r7, #4]
   28160:	2216      	movs	r2, #22
   28162:	18ba      	adds	r2, r7, r2
   28164:	8812      	ldrh	r2, [r2, #0]
   28166:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   28168:	2300      	movs	r3, #0
	}
}
   2816a:	0018      	movs	r0, r3
   2816c:	46bd      	mov	sp, r7
   2816e:	b006      	add	sp, #24
   28170:	bd80      	pop	{r7, pc}
	...

00028174 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   28174:	b5f0      	push	{r4, r5, r6, r7, lr}
   28176:	b0a1      	sub	sp, #132	; 0x84
   28178:	af00      	add	r7, sp, #0
   2817a:	64f8      	str	r0, [r7, #76]	; 0x4c
   2817c:	64b9      	str	r1, [r7, #72]	; 0x48
   2817e:	647a      	str	r2, [r7, #68]	; 0x44
   28180:	2243      	movs	r2, #67	; 0x43
   28182:	18ba      	adds	r2, r7, r2
   28184:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   28186:	2300      	movs	r3, #0
   28188:	2400      	movs	r4, #0
   2818a:	673b      	str	r3, [r7, #112]	; 0x70
   2818c:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   2818e:	2300      	movs	r3, #0
   28190:	2400      	movs	r4, #0
   28192:	66bb      	str	r3, [r7, #104]	; 0x68
   28194:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   28196:	2300      	movs	r3, #0
   28198:	2400      	movs	r4, #0
   2819a:	67bb      	str	r3, [r7, #120]	; 0x78
   2819c:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   2819e:	2300      	movs	r3, #0
   281a0:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   281a2:	2358      	movs	r3, #88	; 0x58
   281a4:	2240      	movs	r2, #64	; 0x40
   281a6:	4694      	mov	ip, r2
   281a8:	44bc      	add	ip, r7
   281aa:	4463      	add	r3, ip
   281ac:	781a      	ldrb	r2, [r3, #0]
   281ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   281b0:	435a      	muls	r2, r3
   281b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   281b4:	429a      	cmp	r2, r3
   281b6:	d901      	bls.n	281bc <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   281b8:	2340      	movs	r3, #64	; 0x40
   281ba:	e0b3      	b.n	28324 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   281bc:	2343      	movs	r3, #67	; 0x43
   281be:	18fb      	adds	r3, r7, r3
   281c0:	781b      	ldrb	r3, [r3, #0]
   281c2:	2b00      	cmp	r3, #0
   281c4:	d13d      	bne.n	28242 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   281c6:	2358      	movs	r3, #88	; 0x58
   281c8:	2240      	movs	r2, #64	; 0x40
   281ca:	4694      	mov	ip, r2
   281cc:	44bc      	add	ip, r7
   281ce:	4463      	add	r3, ip
   281d0:	781b      	ldrb	r3, [r3, #0]
   281d2:	b2db      	uxtb	r3, r3
   281d4:	613b      	str	r3, [r7, #16]
   281d6:	2300      	movs	r3, #0
   281d8:	617b      	str	r3, [r7, #20]
   281da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   281dc:	60bb      	str	r3, [r7, #8]
   281de:	2300      	movs	r3, #0
   281e0:	60fb      	str	r3, [r7, #12]
   281e2:	4c52      	ldr	r4, [pc, #328]	; (2832c <_sercom_get_async_baud_val+0x1b8>)
   281e4:	68ba      	ldr	r2, [r7, #8]
   281e6:	68fb      	ldr	r3, [r7, #12]
   281e8:	6938      	ldr	r0, [r7, #16]
   281ea:	6979      	ldr	r1, [r7, #20]
   281ec:	47a0      	blx	r4
   281ee:	0003      	movs	r3, r0
   281f0:	000c      	movs	r4, r1
   281f2:	001b      	movs	r3, r3
   281f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   281f6:	2300      	movs	r3, #0
   281f8:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   281fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   281fc:	603b      	str	r3, [r7, #0]
   281fe:	2300      	movs	r3, #0
   28200:	607b      	str	r3, [r7, #4]
   28202:	6db8      	ldr	r0, [r7, #88]	; 0x58
   28204:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   28206:	683a      	ldr	r2, [r7, #0]
   28208:	687b      	ldr	r3, [r7, #4]
   2820a:	4c49      	ldr	r4, [pc, #292]	; (28330 <_sercom_get_async_baud_val+0x1bc>)
   2820c:	47a0      	blx	r4
   2820e:	0003      	movs	r3, r0
   28210:	000c      	movs	r4, r1
   28212:	673b      	str	r3, [r7, #112]	; 0x70
   28214:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   28216:	2100      	movs	r1, #0
   28218:	2201      	movs	r2, #1
   2821a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2821c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   2821e:	1ac9      	subs	r1, r1, r3
   28220:	41a2      	sbcs	r2, r4
   28222:	000b      	movs	r3, r1
   28224:	0014      	movs	r4, r2
   28226:	66bb      	str	r3, [r7, #104]	; 0x68
   28228:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   2822a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2822c:	0c1b      	lsrs	r3, r3, #16
   2822e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   28230:	0416      	lsls	r6, r2, #16
   28232:	431e      	orrs	r6, r3
   28234:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   28236:	041d      	lsls	r5, r3, #16
   28238:	0033      	movs	r3, r6
   2823a:	67bb      	str	r3, [r7, #120]	; 0x78
   2823c:	2300      	movs	r3, #0
   2823e:	67fb      	str	r3, [r7, #124]	; 0x7c
   28240:	e06a      	b.n	28318 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   28242:	2343      	movs	r3, #67	; 0x43
   28244:	18fb      	adds	r3, r7, r3
   28246:	781b      	ldrb	r3, [r3, #0]
   28248:	2b01      	cmp	r3, #1
   2824a:	d165      	bne.n	28318 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   2824c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2824e:	633b      	str	r3, [r7, #48]	; 0x30
   28250:	2300      	movs	r3, #0
   28252:	637b      	str	r3, [r7, #52]	; 0x34
   28254:	2358      	movs	r3, #88	; 0x58
   28256:	2240      	movs	r2, #64	; 0x40
   28258:	4694      	mov	ip, r2
   2825a:	44bc      	add	ip, r7
   2825c:	4463      	add	r3, ip
   2825e:	781b      	ldrb	r3, [r3, #0]
   28260:	b2db      	uxtb	r3, r3
   28262:	62bb      	str	r3, [r7, #40]	; 0x28
   28264:	2300      	movs	r3, #0
   28266:	62fb      	str	r3, [r7, #44]	; 0x2c
   28268:	4c30      	ldr	r4, [pc, #192]	; (2832c <_sercom_get_async_baud_val+0x1b8>)
   2826a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2826c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2826e:	6b38      	ldr	r0, [r7, #48]	; 0x30
   28270:	6b79      	ldr	r1, [r7, #52]	; 0x34
   28272:	47a0      	blx	r4
   28274:	0003      	movs	r3, r0
   28276:	000c      	movs	r4, r1
   28278:	65bb      	str	r3, [r7, #88]	; 0x58
   2827a:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   2827c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2827e:	623b      	str	r3, [r7, #32]
   28280:	2300      	movs	r3, #0
   28282:	627b      	str	r3, [r7, #36]	; 0x24
   28284:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   28286:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   28288:	001a      	movs	r2, r3
   2828a:	0023      	movs	r3, r4
   2828c:	6a38      	ldr	r0, [r7, #32]
   2828e:	6a79      	ldr	r1, [r7, #36]	; 0x24
   28290:	4c27      	ldr	r4, [pc, #156]	; (28330 <_sercom_get_async_baud_val+0x1bc>)
   28292:	47a0      	blx	r4
   28294:	0003      	movs	r3, r0
   28296:	000c      	movs	r4, r1
   28298:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   2829a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   2829c:	2380      	movs	r3, #128	; 0x80
   2829e:	019b      	lsls	r3, r3, #6
   282a0:	429a      	cmp	r2, r3
   282a2:	d901      	bls.n	282a8 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   282a4:	2340      	movs	r3, #64	; 0x40
   282a6:	e03d      	b.n	28324 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   282a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   282aa:	61bb      	str	r3, [r7, #24]
   282ac:	2300      	movs	r3, #0
   282ae:	61fb      	str	r3, [r7, #28]
   282b0:	69b9      	ldr	r1, [r7, #24]
   282b2:	69fa      	ldr	r2, [r7, #28]
   282b4:	000b      	movs	r3, r1
   282b6:	0f5b      	lsrs	r3, r3, #29
   282b8:	0010      	movs	r0, r2
   282ba:	00c0      	lsls	r0, r0, #3
   282bc:	63f8      	str	r0, [r7, #60]	; 0x3c
   282be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   282c0:	4318      	orrs	r0, r3
   282c2:	63f8      	str	r0, [r7, #60]	; 0x3c
   282c4:	000b      	movs	r3, r1
   282c6:	00db      	lsls	r3, r3, #3
   282c8:	63bb      	str	r3, [r7, #56]	; 0x38
   282ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   282cc:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   282ce:	001a      	movs	r2, r3
   282d0:	0023      	movs	r3, r4
   282d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   282d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   282d6:	4c16      	ldr	r4, [pc, #88]	; (28330 <_sercom_get_async_baud_val+0x1bc>)
   282d8:	47a0      	blx	r4
   282da:	0003      	movs	r3, r0
   282dc:	000c      	movs	r4, r1
   282de:	65bb      	str	r3, [r7, #88]	; 0x58
   282e0:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   282e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   282e4:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   282e6:	b2d9      	uxtb	r1, r3
   282e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   282ea:	b2db      	uxtb	r3, r3
   282ec:	00db      	lsls	r3, r3, #3
   282ee:	b2da      	uxtb	r2, r3
   282f0:	2317      	movs	r3, #23
   282f2:	2040      	movs	r0, #64	; 0x40
   282f4:	4684      	mov	ip, r0
   282f6:	44bc      	add	ip, r7
   282f8:	4463      	add	r3, ip
   282fa:	1a8a      	subs	r2, r1, r2
   282fc:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   282fe:	2317      	movs	r3, #23
   28300:	2240      	movs	r2, #64	; 0x40
   28302:	4694      	mov	ip, r2
   28304:	44bc      	add	ip, r7
   28306:	4463      	add	r3, ip
   28308:	781b      	ldrb	r3, [r3, #0]
   2830a:	035b      	lsls	r3, r3, #13
   2830c:	001a      	movs	r2, r3
   2830e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   28310:	4313      	orrs	r3, r2
   28312:	67bb      	str	r3, [r7, #120]	; 0x78
   28314:	2300      	movs	r3, #0
   28316:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   28318:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   2831a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   2831c:	b29a      	uxth	r2, r3
   2831e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   28320:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   28322:	2300      	movs	r3, #0
}
   28324:	0018      	movs	r0, r3
   28326:	46bd      	mov	sp, r7
   28328:	b021      	add	sp, #132	; 0x84
   2832a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2832c:	00033dc1 	.word	0x00033dc1
   28330:	00028017 	.word	0x00028017

00028334 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   28334:	b580      	push	{r7, lr}
   28336:	b084      	sub	sp, #16
   28338:	af00      	add	r7, sp, #0
   2833a:	0002      	movs	r2, r0
   2833c:	1dfb      	adds	r3, r7, #7
   2833e:	701a      	strb	r2, [r3, #0]
   28340:	1dbb      	adds	r3, r7, #6
   28342:	1c0a      	adds	r2, r1, #0
   28344:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   28346:	4b1a      	ldr	r3, [pc, #104]	; (283b0 <sercom_set_gclk_generator+0x7c>)
   28348:	781b      	ldrb	r3, [r3, #0]
   2834a:	2201      	movs	r2, #1
   2834c:	4053      	eors	r3, r2
   2834e:	b2db      	uxtb	r3, r3
   28350:	2b00      	cmp	r3, #0
   28352:	d103      	bne.n	2835c <sercom_set_gclk_generator+0x28>
   28354:	1dbb      	adds	r3, r7, #6
   28356:	781b      	ldrb	r3, [r3, #0]
   28358:	2b00      	cmp	r3, #0
   2835a:	d01b      	beq.n	28394 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2835c:	230c      	movs	r3, #12
   2835e:	18fb      	adds	r3, r7, r3
   28360:	0018      	movs	r0, r3
   28362:	4b14      	ldr	r3, [pc, #80]	; (283b4 <sercom_set_gclk_generator+0x80>)
   28364:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   28366:	230c      	movs	r3, #12
   28368:	18fb      	adds	r3, r7, r3
   2836a:	1dfa      	adds	r2, r7, #7
   2836c:	7812      	ldrb	r2, [r2, #0]
   2836e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   28370:	230c      	movs	r3, #12
   28372:	18fb      	adds	r3, r7, r3
   28374:	0019      	movs	r1, r3
   28376:	2013      	movs	r0, #19
   28378:	4b0f      	ldr	r3, [pc, #60]	; (283b8 <sercom_set_gclk_generator+0x84>)
   2837a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   2837c:	2013      	movs	r0, #19
   2837e:	4b0f      	ldr	r3, [pc, #60]	; (283bc <sercom_set_gclk_generator+0x88>)
   28380:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   28382:	4b0b      	ldr	r3, [pc, #44]	; (283b0 <sercom_set_gclk_generator+0x7c>)
   28384:	1dfa      	adds	r2, r7, #7
   28386:	7812      	ldrb	r2, [r2, #0]
   28388:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   2838a:	4b09      	ldr	r3, [pc, #36]	; (283b0 <sercom_set_gclk_generator+0x7c>)
   2838c:	2201      	movs	r2, #1
   2838e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   28390:	2300      	movs	r3, #0
   28392:	e008      	b.n	283a6 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   28394:	4b06      	ldr	r3, [pc, #24]	; (283b0 <sercom_set_gclk_generator+0x7c>)
   28396:	785b      	ldrb	r3, [r3, #1]
   28398:	1dfa      	adds	r2, r7, #7
   2839a:	7812      	ldrb	r2, [r2, #0]
   2839c:	429a      	cmp	r2, r3
   2839e:	d101      	bne.n	283a4 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   283a0:	2300      	movs	r3, #0
   283a2:	e000      	b.n	283a6 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   283a4:	231d      	movs	r3, #29
}
   283a6:	0018      	movs	r0, r3
   283a8:	46bd      	mov	sp, r7
   283aa:	b004      	add	sp, #16
   283ac:	bd80      	pop	{r7, pc}
   283ae:	46c0      	nop			; (mov r8, r8)
   283b0:	200042c4 	.word	0x200042c4
   283b4:	00028001 	.word	0x00028001
   283b8:	0002ae0d 	.word	0x0002ae0d
   283bc:	0002ae51 	.word	0x0002ae51

000283c0 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   283c0:	b580      	push	{r7, lr}
   283c2:	b082      	sub	sp, #8
   283c4:	af00      	add	r7, sp, #0
   283c6:	6078      	str	r0, [r7, #4]
   283c8:	000a      	movs	r2, r1
   283ca:	1cfb      	adds	r3, r7, #3
   283cc:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   283ce:	687b      	ldr	r3, [r7, #4]
   283d0:	4a4d      	ldr	r2, [pc, #308]	; (28508 <_sercom_get_default_pad+0x148>)
   283d2:	4293      	cmp	r3, r2
   283d4:	d03f      	beq.n	28456 <_sercom_get_default_pad+0x96>
   283d6:	4a4c      	ldr	r2, [pc, #304]	; (28508 <_sercom_get_default_pad+0x148>)
   283d8:	4293      	cmp	r3, r2
   283da:	d806      	bhi.n	283ea <_sercom_get_default_pad+0x2a>
   283dc:	4a4b      	ldr	r2, [pc, #300]	; (2850c <_sercom_get_default_pad+0x14c>)
   283de:	4293      	cmp	r3, r2
   283e0:	d00f      	beq.n	28402 <_sercom_get_default_pad+0x42>
   283e2:	4a4b      	ldr	r2, [pc, #300]	; (28510 <_sercom_get_default_pad+0x150>)
   283e4:	4293      	cmp	r3, r2
   283e6:	d021      	beq.n	2842c <_sercom_get_default_pad+0x6c>
   283e8:	e089      	b.n	284fe <_sercom_get_default_pad+0x13e>
   283ea:	4a4a      	ldr	r2, [pc, #296]	; (28514 <_sercom_get_default_pad+0x154>)
   283ec:	4293      	cmp	r3, r2
   283ee:	d100      	bne.n	283f2 <_sercom_get_default_pad+0x32>
   283f0:	e05b      	b.n	284aa <_sercom_get_default_pad+0xea>
   283f2:	4a49      	ldr	r2, [pc, #292]	; (28518 <_sercom_get_default_pad+0x158>)
   283f4:	4293      	cmp	r3, r2
   283f6:	d100      	bne.n	283fa <_sercom_get_default_pad+0x3a>
   283f8:	e06c      	b.n	284d4 <_sercom_get_default_pad+0x114>
   283fa:	4a48      	ldr	r2, [pc, #288]	; (2851c <_sercom_get_default_pad+0x15c>)
   283fc:	4293      	cmp	r3, r2
   283fe:	d03f      	beq.n	28480 <_sercom_get_default_pad+0xc0>
   28400:	e07d      	b.n	284fe <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   28402:	1cfb      	adds	r3, r7, #3
   28404:	781b      	ldrb	r3, [r3, #0]
   28406:	2b01      	cmp	r3, #1
   28408:	d00a      	beq.n	28420 <_sercom_get_default_pad+0x60>
   2840a:	dc02      	bgt.n	28412 <_sercom_get_default_pad+0x52>
   2840c:	2b00      	cmp	r3, #0
   2840e:	d005      	beq.n	2841c <_sercom_get_default_pad+0x5c>
   28410:	e075      	b.n	284fe <_sercom_get_default_pad+0x13e>
   28412:	2b02      	cmp	r3, #2
   28414:	d006      	beq.n	28424 <_sercom_get_default_pad+0x64>
   28416:	2b03      	cmp	r3, #3
   28418:	d006      	beq.n	28428 <_sercom_get_default_pad+0x68>
   2841a:	e070      	b.n	284fe <_sercom_get_default_pad+0x13e>
   2841c:	4b40      	ldr	r3, [pc, #256]	; (28520 <_sercom_get_default_pad+0x160>)
   2841e:	e06f      	b.n	28500 <_sercom_get_default_pad+0x140>
   28420:	4b40      	ldr	r3, [pc, #256]	; (28524 <_sercom_get_default_pad+0x164>)
   28422:	e06d      	b.n	28500 <_sercom_get_default_pad+0x140>
   28424:	4b40      	ldr	r3, [pc, #256]	; (28528 <_sercom_get_default_pad+0x168>)
   28426:	e06b      	b.n	28500 <_sercom_get_default_pad+0x140>
   28428:	4b40      	ldr	r3, [pc, #256]	; (2852c <_sercom_get_default_pad+0x16c>)
   2842a:	e069      	b.n	28500 <_sercom_get_default_pad+0x140>
   2842c:	1cfb      	adds	r3, r7, #3
   2842e:	781b      	ldrb	r3, [r3, #0]
   28430:	2b01      	cmp	r3, #1
   28432:	d00a      	beq.n	2844a <_sercom_get_default_pad+0x8a>
   28434:	dc02      	bgt.n	2843c <_sercom_get_default_pad+0x7c>
   28436:	2b00      	cmp	r3, #0
   28438:	d005      	beq.n	28446 <_sercom_get_default_pad+0x86>
   2843a:	e060      	b.n	284fe <_sercom_get_default_pad+0x13e>
   2843c:	2b02      	cmp	r3, #2
   2843e:	d006      	beq.n	2844e <_sercom_get_default_pad+0x8e>
   28440:	2b03      	cmp	r3, #3
   28442:	d006      	beq.n	28452 <_sercom_get_default_pad+0x92>
   28444:	e05b      	b.n	284fe <_sercom_get_default_pad+0x13e>
   28446:	2303      	movs	r3, #3
   28448:	e05a      	b.n	28500 <_sercom_get_default_pad+0x140>
   2844a:	4b39      	ldr	r3, [pc, #228]	; (28530 <_sercom_get_default_pad+0x170>)
   2844c:	e058      	b.n	28500 <_sercom_get_default_pad+0x140>
   2844e:	4b39      	ldr	r3, [pc, #228]	; (28534 <_sercom_get_default_pad+0x174>)
   28450:	e056      	b.n	28500 <_sercom_get_default_pad+0x140>
   28452:	4b39      	ldr	r3, [pc, #228]	; (28538 <_sercom_get_default_pad+0x178>)
   28454:	e054      	b.n	28500 <_sercom_get_default_pad+0x140>
   28456:	1cfb      	adds	r3, r7, #3
   28458:	781b      	ldrb	r3, [r3, #0]
   2845a:	2b01      	cmp	r3, #1
   2845c:	d00a      	beq.n	28474 <_sercom_get_default_pad+0xb4>
   2845e:	dc02      	bgt.n	28466 <_sercom_get_default_pad+0xa6>
   28460:	2b00      	cmp	r3, #0
   28462:	d005      	beq.n	28470 <_sercom_get_default_pad+0xb0>
   28464:	e04b      	b.n	284fe <_sercom_get_default_pad+0x13e>
   28466:	2b02      	cmp	r3, #2
   28468:	d006      	beq.n	28478 <_sercom_get_default_pad+0xb8>
   2846a:	2b03      	cmp	r3, #3
   2846c:	d006      	beq.n	2847c <_sercom_get_default_pad+0xbc>
   2846e:	e046      	b.n	284fe <_sercom_get_default_pad+0x13e>
   28470:	4b32      	ldr	r3, [pc, #200]	; (2853c <_sercom_get_default_pad+0x17c>)
   28472:	e045      	b.n	28500 <_sercom_get_default_pad+0x140>
   28474:	4b32      	ldr	r3, [pc, #200]	; (28540 <_sercom_get_default_pad+0x180>)
   28476:	e043      	b.n	28500 <_sercom_get_default_pad+0x140>
   28478:	4b32      	ldr	r3, [pc, #200]	; (28544 <_sercom_get_default_pad+0x184>)
   2847a:	e041      	b.n	28500 <_sercom_get_default_pad+0x140>
   2847c:	4b32      	ldr	r3, [pc, #200]	; (28548 <_sercom_get_default_pad+0x188>)
   2847e:	e03f      	b.n	28500 <_sercom_get_default_pad+0x140>
   28480:	1cfb      	adds	r3, r7, #3
   28482:	781b      	ldrb	r3, [r3, #0]
   28484:	2b01      	cmp	r3, #1
   28486:	d00a      	beq.n	2849e <_sercom_get_default_pad+0xde>
   28488:	dc02      	bgt.n	28490 <_sercom_get_default_pad+0xd0>
   2848a:	2b00      	cmp	r3, #0
   2848c:	d005      	beq.n	2849a <_sercom_get_default_pad+0xda>
   2848e:	e036      	b.n	284fe <_sercom_get_default_pad+0x13e>
   28490:	2b02      	cmp	r3, #2
   28492:	d006      	beq.n	284a2 <_sercom_get_default_pad+0xe2>
   28494:	2b03      	cmp	r3, #3
   28496:	d006      	beq.n	284a6 <_sercom_get_default_pad+0xe6>
   28498:	e031      	b.n	284fe <_sercom_get_default_pad+0x13e>
   2849a:	4b2c      	ldr	r3, [pc, #176]	; (2854c <_sercom_get_default_pad+0x18c>)
   2849c:	e030      	b.n	28500 <_sercom_get_default_pad+0x140>
   2849e:	4b2c      	ldr	r3, [pc, #176]	; (28550 <_sercom_get_default_pad+0x190>)
   284a0:	e02e      	b.n	28500 <_sercom_get_default_pad+0x140>
   284a2:	4b2c      	ldr	r3, [pc, #176]	; (28554 <_sercom_get_default_pad+0x194>)
   284a4:	e02c      	b.n	28500 <_sercom_get_default_pad+0x140>
   284a6:	4b2c      	ldr	r3, [pc, #176]	; (28558 <_sercom_get_default_pad+0x198>)
   284a8:	e02a      	b.n	28500 <_sercom_get_default_pad+0x140>
   284aa:	1cfb      	adds	r3, r7, #3
   284ac:	781b      	ldrb	r3, [r3, #0]
   284ae:	2b01      	cmp	r3, #1
   284b0:	d00a      	beq.n	284c8 <_sercom_get_default_pad+0x108>
   284b2:	dc02      	bgt.n	284ba <_sercom_get_default_pad+0xfa>
   284b4:	2b00      	cmp	r3, #0
   284b6:	d005      	beq.n	284c4 <_sercom_get_default_pad+0x104>
   284b8:	e021      	b.n	284fe <_sercom_get_default_pad+0x13e>
   284ba:	2b02      	cmp	r3, #2
   284bc:	d006      	beq.n	284cc <_sercom_get_default_pad+0x10c>
   284be:	2b03      	cmp	r3, #3
   284c0:	d006      	beq.n	284d0 <_sercom_get_default_pad+0x110>
   284c2:	e01c      	b.n	284fe <_sercom_get_default_pad+0x13e>
   284c4:	4b25      	ldr	r3, [pc, #148]	; (2855c <_sercom_get_default_pad+0x19c>)
   284c6:	e01b      	b.n	28500 <_sercom_get_default_pad+0x140>
   284c8:	4b25      	ldr	r3, [pc, #148]	; (28560 <_sercom_get_default_pad+0x1a0>)
   284ca:	e019      	b.n	28500 <_sercom_get_default_pad+0x140>
   284cc:	4b25      	ldr	r3, [pc, #148]	; (28564 <_sercom_get_default_pad+0x1a4>)
   284ce:	e017      	b.n	28500 <_sercom_get_default_pad+0x140>
   284d0:	4b25      	ldr	r3, [pc, #148]	; (28568 <_sercom_get_default_pad+0x1a8>)
   284d2:	e015      	b.n	28500 <_sercom_get_default_pad+0x140>
   284d4:	1cfb      	adds	r3, r7, #3
   284d6:	781b      	ldrb	r3, [r3, #0]
   284d8:	2b01      	cmp	r3, #1
   284da:	d00a      	beq.n	284f2 <_sercom_get_default_pad+0x132>
   284dc:	dc02      	bgt.n	284e4 <_sercom_get_default_pad+0x124>
   284de:	2b00      	cmp	r3, #0
   284e0:	d005      	beq.n	284ee <_sercom_get_default_pad+0x12e>
   284e2:	e00c      	b.n	284fe <_sercom_get_default_pad+0x13e>
   284e4:	2b02      	cmp	r3, #2
   284e6:	d006      	beq.n	284f6 <_sercom_get_default_pad+0x136>
   284e8:	2b03      	cmp	r3, #3
   284ea:	d006      	beq.n	284fa <_sercom_get_default_pad+0x13a>
   284ec:	e007      	b.n	284fe <_sercom_get_default_pad+0x13e>
   284ee:	4b1f      	ldr	r3, [pc, #124]	; (2856c <_sercom_get_default_pad+0x1ac>)
   284f0:	e006      	b.n	28500 <_sercom_get_default_pad+0x140>
   284f2:	4b1f      	ldr	r3, [pc, #124]	; (28570 <_sercom_get_default_pad+0x1b0>)
   284f4:	e004      	b.n	28500 <_sercom_get_default_pad+0x140>
   284f6:	4b1f      	ldr	r3, [pc, #124]	; (28574 <_sercom_get_default_pad+0x1b4>)
   284f8:	e002      	b.n	28500 <_sercom_get_default_pad+0x140>
   284fa:	4b1f      	ldr	r3, [pc, #124]	; (28578 <_sercom_get_default_pad+0x1b8>)
   284fc:	e000      	b.n	28500 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   284fe:	2300      	movs	r3, #0
}
   28500:	0018      	movs	r0, r3
   28502:	46bd      	mov	sp, r7
   28504:	b002      	add	sp, #8
   28506:	bd80      	pop	{r7, pc}
   28508:	42001000 	.word	0x42001000
   2850c:	42000800 	.word	0x42000800
   28510:	42000c00 	.word	0x42000c00
   28514:	42001800 	.word	0x42001800
   28518:	42001c00 	.word	0x42001c00
   2851c:	42001400 	.word	0x42001400
   28520:	00040003 	.word	0x00040003
   28524:	00050003 	.word	0x00050003
   28528:	00060003 	.word	0x00060003
   2852c:	00070003 	.word	0x00070003
   28530:	00010003 	.word	0x00010003
   28534:	001e0003 	.word	0x001e0003
   28538:	001f0003 	.word	0x001f0003
   2853c:	00080003 	.word	0x00080003
   28540:	00090003 	.word	0x00090003
   28544:	000a0003 	.word	0x000a0003
   28548:	000b0003 	.word	0x000b0003
   2854c:	00100003 	.word	0x00100003
   28550:	00110003 	.word	0x00110003
   28554:	00120003 	.word	0x00120003
   28558:	00130003 	.word	0x00130003
   2855c:	000c0003 	.word	0x000c0003
   28560:	000d0003 	.word	0x000d0003
   28564:	000e0003 	.word	0x000e0003
   28568:	000f0003 	.word	0x000f0003
   2856c:	00160003 	.word	0x00160003
   28570:	00170003 	.word	0x00170003
   28574:	00180003 	.word	0x00180003
   28578:	00190003 	.word	0x00190003

0002857c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   2857c:	b590      	push	{r4, r7, lr}
   2857e:	b08b      	sub	sp, #44	; 0x2c
   28580:	af00      	add	r7, sp, #0
   28582:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   28584:	230c      	movs	r3, #12
   28586:	18fb      	adds	r3, r7, r3
   28588:	4a0f      	ldr	r2, [pc, #60]	; (285c8 <_sercom_get_sercom_inst_index+0x4c>)
   2858a:	ca13      	ldmia	r2!, {r0, r1, r4}
   2858c:	c313      	stmia	r3!, {r0, r1, r4}
   2858e:	ca13      	ldmia	r2!, {r0, r1, r4}
   28590:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   28592:	2300      	movs	r3, #0
   28594:	627b      	str	r3, [r7, #36]	; 0x24
   28596:	e00e      	b.n	285b6 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   28598:	230c      	movs	r3, #12
   2859a:	18fb      	adds	r3, r7, r3
   2859c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2859e:	0092      	lsls	r2, r2, #2
   285a0:	58d3      	ldr	r3, [r2, r3]
   285a2:	001a      	movs	r2, r3
   285a4:	687b      	ldr	r3, [r7, #4]
   285a6:	429a      	cmp	r2, r3
   285a8:	d102      	bne.n	285b0 <_sercom_get_sercom_inst_index+0x34>
			return i;
   285aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   285ac:	b2db      	uxtb	r3, r3
   285ae:	e006      	b.n	285be <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   285b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   285b2:	3301      	adds	r3, #1
   285b4:	627b      	str	r3, [r7, #36]	; 0x24
   285b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   285b8:	2b05      	cmp	r3, #5
   285ba:	d9ed      	bls.n	28598 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   285bc:	2300      	movs	r3, #0
}
   285be:	0018      	movs	r0, r3
   285c0:	46bd      	mov	sp, r7
   285c2:	b00b      	add	sp, #44	; 0x2c
   285c4:	bd90      	pop	{r4, r7, pc}
   285c6:	46c0      	nop			; (mov r8, r8)
   285c8:	0003b334 	.word	0x0003b334

000285cc <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   285cc:	b580      	push	{r7, lr}
   285ce:	b082      	sub	sp, #8
   285d0:	af00      	add	r7, sp, #0
   285d2:	0002      	movs	r2, r0
   285d4:	1dfb      	adds	r3, r7, #7
   285d6:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   285d8:	46c0      	nop			; (mov r8, r8)
   285da:	46bd      	mov	sp, r7
   285dc:	b002      	add	sp, #8
   285de:	bd80      	pop	{r7, pc}

000285e0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   285e0:	b580      	push	{r7, lr}
   285e2:	b084      	sub	sp, #16
   285e4:	af00      	add	r7, sp, #0
   285e6:	0002      	movs	r2, r0
   285e8:	6039      	str	r1, [r7, #0]
   285ea:	1dfb      	adds	r3, r7, #7
   285ec:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   285ee:	4b13      	ldr	r3, [pc, #76]	; (2863c <_sercom_set_handler+0x5c>)
   285f0:	781b      	ldrb	r3, [r3, #0]
   285f2:	2201      	movs	r2, #1
   285f4:	4053      	eors	r3, r2
   285f6:	b2db      	uxtb	r3, r3
   285f8:	2b00      	cmp	r3, #0
   285fa:	d015      	beq.n	28628 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   285fc:	2300      	movs	r3, #0
   285fe:	60fb      	str	r3, [r7, #12]
   28600:	e00c      	b.n	2861c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   28602:	4b0f      	ldr	r3, [pc, #60]	; (28640 <_sercom_set_handler+0x60>)
   28604:	68fa      	ldr	r2, [r7, #12]
   28606:	0092      	lsls	r2, r2, #2
   28608:	490e      	ldr	r1, [pc, #56]	; (28644 <_sercom_set_handler+0x64>)
   2860a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   2860c:	4b0e      	ldr	r3, [pc, #56]	; (28648 <_sercom_set_handler+0x68>)
   2860e:	68fa      	ldr	r2, [r7, #12]
   28610:	0092      	lsls	r2, r2, #2
   28612:	2100      	movs	r1, #0
   28614:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   28616:	68fb      	ldr	r3, [r7, #12]
   28618:	3301      	adds	r3, #1
   2861a:	60fb      	str	r3, [r7, #12]
   2861c:	68fb      	ldr	r3, [r7, #12]
   2861e:	2b05      	cmp	r3, #5
   28620:	d9ef      	bls.n	28602 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   28622:	4b06      	ldr	r3, [pc, #24]	; (2863c <_sercom_set_handler+0x5c>)
   28624:	2201      	movs	r2, #1
   28626:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   28628:	1dfb      	adds	r3, r7, #7
   2862a:	781a      	ldrb	r2, [r3, #0]
   2862c:	4b04      	ldr	r3, [pc, #16]	; (28640 <_sercom_set_handler+0x60>)
   2862e:	0092      	lsls	r2, r2, #2
   28630:	6839      	ldr	r1, [r7, #0]
   28632:	50d1      	str	r1, [r2, r3]
}
   28634:	46c0      	nop			; (mov r8, r8)
   28636:	46bd      	mov	sp, r7
   28638:	b004      	add	sp, #16
   2863a:	bd80      	pop	{r7, pc}
   2863c:	200042c6 	.word	0x200042c6
   28640:	200042c8 	.word	0x200042c8
   28644:	000285cd 	.word	0x000285cd
   28648:	20005c9c 	.word	0x20005c9c

0002864c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   2864c:	b590      	push	{r4, r7, lr}
   2864e:	b085      	sub	sp, #20
   28650:	af00      	add	r7, sp, #0
   28652:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   28654:	2308      	movs	r3, #8
   28656:	18fb      	adds	r3, r7, r3
   28658:	4a0b      	ldr	r2, [pc, #44]	; (28688 <_sercom_get_interrupt_vector+0x3c>)
   2865a:	6811      	ldr	r1, [r2, #0]
   2865c:	6019      	str	r1, [r3, #0]
   2865e:	8892      	ldrh	r2, [r2, #4]
   28660:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   28662:	230f      	movs	r3, #15
   28664:	18fc      	adds	r4, r7, r3
   28666:	687b      	ldr	r3, [r7, #4]
   28668:	0018      	movs	r0, r3
   2866a:	4b08      	ldr	r3, [pc, #32]	; (2868c <_sercom_get_interrupt_vector+0x40>)
   2866c:	4798      	blx	r3
   2866e:	0003      	movs	r3, r0
   28670:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   28672:	230f      	movs	r3, #15
   28674:	18fb      	adds	r3, r7, r3
   28676:	781b      	ldrb	r3, [r3, #0]
   28678:	2208      	movs	r2, #8
   2867a:	18ba      	adds	r2, r7, r2
   2867c:	5cd3      	ldrb	r3, [r2, r3]
   2867e:	b25b      	sxtb	r3, r3
}
   28680:	0018      	movs	r0, r3
   28682:	46bd      	mov	sp, r7
   28684:	b005      	add	sp, #20
   28686:	bd90      	pop	{r4, r7, pc}
   28688:	0003b34c 	.word	0x0003b34c
   2868c:	0002857d 	.word	0x0002857d

00028690 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   28690:	b580      	push	{r7, lr}
   28692:	af00      	add	r7, sp, #0
   28694:	4b03      	ldr	r3, [pc, #12]	; (286a4 <SERCOM0_Handler+0x14>)
   28696:	681b      	ldr	r3, [r3, #0]
   28698:	2000      	movs	r0, #0
   2869a:	4798      	blx	r3
   2869c:	46c0      	nop			; (mov r8, r8)
   2869e:	46bd      	mov	sp, r7
   286a0:	bd80      	pop	{r7, pc}
   286a2:	46c0      	nop			; (mov r8, r8)
   286a4:	200042c8 	.word	0x200042c8

000286a8 <SERCOM1_Handler>:
   286a8:	b580      	push	{r7, lr}
   286aa:	af00      	add	r7, sp, #0
   286ac:	4b03      	ldr	r3, [pc, #12]	; (286bc <SERCOM1_Handler+0x14>)
   286ae:	685b      	ldr	r3, [r3, #4]
   286b0:	2001      	movs	r0, #1
   286b2:	4798      	blx	r3
   286b4:	46c0      	nop			; (mov r8, r8)
   286b6:	46bd      	mov	sp, r7
   286b8:	bd80      	pop	{r7, pc}
   286ba:	46c0      	nop			; (mov r8, r8)
   286bc:	200042c8 	.word	0x200042c8

000286c0 <SERCOM2_Handler>:
   286c0:	b580      	push	{r7, lr}
   286c2:	af00      	add	r7, sp, #0
   286c4:	4b03      	ldr	r3, [pc, #12]	; (286d4 <SERCOM2_Handler+0x14>)
   286c6:	689b      	ldr	r3, [r3, #8]
   286c8:	2002      	movs	r0, #2
   286ca:	4798      	blx	r3
   286cc:	46c0      	nop			; (mov r8, r8)
   286ce:	46bd      	mov	sp, r7
   286d0:	bd80      	pop	{r7, pc}
   286d2:	46c0      	nop			; (mov r8, r8)
   286d4:	200042c8 	.word	0x200042c8

000286d8 <SERCOM3_Handler>:
   286d8:	b580      	push	{r7, lr}
   286da:	af00      	add	r7, sp, #0
   286dc:	4b03      	ldr	r3, [pc, #12]	; (286ec <SERCOM3_Handler+0x14>)
   286de:	68db      	ldr	r3, [r3, #12]
   286e0:	2003      	movs	r0, #3
   286e2:	4798      	blx	r3
   286e4:	46c0      	nop			; (mov r8, r8)
   286e6:	46bd      	mov	sp, r7
   286e8:	bd80      	pop	{r7, pc}
   286ea:	46c0      	nop			; (mov r8, r8)
   286ec:	200042c8 	.word	0x200042c8

000286f0 <SERCOM4_Handler>:
   286f0:	b580      	push	{r7, lr}
   286f2:	af00      	add	r7, sp, #0
   286f4:	4b03      	ldr	r3, [pc, #12]	; (28704 <SERCOM4_Handler+0x14>)
   286f6:	691b      	ldr	r3, [r3, #16]
   286f8:	2004      	movs	r0, #4
   286fa:	4798      	blx	r3
   286fc:	46c0      	nop			; (mov r8, r8)
   286fe:	46bd      	mov	sp, r7
   28700:	bd80      	pop	{r7, pc}
   28702:	46c0      	nop			; (mov r8, r8)
   28704:	200042c8 	.word	0x200042c8

00028708 <SERCOM5_Handler>:
   28708:	b580      	push	{r7, lr}
   2870a:	af00      	add	r7, sp, #0
   2870c:	4b03      	ldr	r3, [pc, #12]	; (2871c <SERCOM5_Handler+0x14>)
   2870e:	695b      	ldr	r3, [r3, #20]
   28710:	2005      	movs	r0, #5
   28712:	4798      	blx	r3
   28714:	46c0      	nop			; (mov r8, r8)
   28716:	46bd      	mov	sp, r7
   28718:	bd80      	pop	{r7, pc}
   2871a:	46c0      	nop			; (mov r8, r8)
   2871c:	200042c8 	.word	0x200042c8

00028720 <system_pinmux_get_config_defaults>:
{
   28720:	b580      	push	{r7, lr}
   28722:	b082      	sub	sp, #8
   28724:	af00      	add	r7, sp, #0
   28726:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   28728:	687b      	ldr	r3, [r7, #4]
   2872a:	2280      	movs	r2, #128	; 0x80
   2872c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2872e:	687b      	ldr	r3, [r7, #4]
   28730:	2200      	movs	r2, #0
   28732:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   28734:	687b      	ldr	r3, [r7, #4]
   28736:	2201      	movs	r2, #1
   28738:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2873a:	687b      	ldr	r3, [r7, #4]
   2873c:	2200      	movs	r2, #0
   2873e:	70da      	strb	r2, [r3, #3]
}
   28740:	46c0      	nop			; (mov r8, r8)
   28742:	46bd      	mov	sp, r7
   28744:	b002      	add	sp, #8
   28746:	bd80      	pop	{r7, pc}

00028748 <system_pinmux_get_group_from_gpio_pin>:
{
   28748:	b580      	push	{r7, lr}
   2874a:	b084      	sub	sp, #16
   2874c:	af00      	add	r7, sp, #0
   2874e:	0002      	movs	r2, r0
   28750:	1dfb      	adds	r3, r7, #7
   28752:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   28754:	230f      	movs	r3, #15
   28756:	18fb      	adds	r3, r7, r3
   28758:	1dfa      	adds	r2, r7, #7
   2875a:	7812      	ldrb	r2, [r2, #0]
   2875c:	09d2      	lsrs	r2, r2, #7
   2875e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   28760:	230e      	movs	r3, #14
   28762:	18fb      	adds	r3, r7, r3
   28764:	1dfa      	adds	r2, r7, #7
   28766:	7812      	ldrb	r2, [r2, #0]
   28768:	0952      	lsrs	r2, r2, #5
   2876a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2876c:	4b0d      	ldr	r3, [pc, #52]	; (287a4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2876e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   28770:	230f      	movs	r3, #15
   28772:	18fb      	adds	r3, r7, r3
   28774:	781b      	ldrb	r3, [r3, #0]
   28776:	2b00      	cmp	r3, #0
   28778:	d10f      	bne.n	2879a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2877a:	230f      	movs	r3, #15
   2877c:	18fb      	adds	r3, r7, r3
   2877e:	781b      	ldrb	r3, [r3, #0]
   28780:	009b      	lsls	r3, r3, #2
   28782:	2210      	movs	r2, #16
   28784:	4694      	mov	ip, r2
   28786:	44bc      	add	ip, r7
   28788:	4463      	add	r3, ip
   2878a:	3b08      	subs	r3, #8
   2878c:	681a      	ldr	r2, [r3, #0]
   2878e:	230e      	movs	r3, #14
   28790:	18fb      	adds	r3, r7, r3
   28792:	781b      	ldrb	r3, [r3, #0]
   28794:	01db      	lsls	r3, r3, #7
   28796:	18d3      	adds	r3, r2, r3
   28798:	e000      	b.n	2879c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2879a:	2300      	movs	r3, #0
}
   2879c:	0018      	movs	r0, r3
   2879e:	46bd      	mov	sp, r7
   287a0:	b004      	add	sp, #16
   287a2:	bd80      	pop	{r7, pc}
   287a4:	41004400 	.word	0x41004400

000287a8 <port_get_group_from_gpio_pin>:
{
   287a8:	b580      	push	{r7, lr}
   287aa:	b082      	sub	sp, #8
   287ac:	af00      	add	r7, sp, #0
   287ae:	0002      	movs	r2, r0
   287b0:	1dfb      	adds	r3, r7, #7
   287b2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   287b4:	1dfb      	adds	r3, r7, #7
   287b6:	781b      	ldrb	r3, [r3, #0]
   287b8:	0018      	movs	r0, r3
   287ba:	4b03      	ldr	r3, [pc, #12]	; (287c8 <port_get_group_from_gpio_pin+0x20>)
   287bc:	4798      	blx	r3
   287be:	0003      	movs	r3, r0
}
   287c0:	0018      	movs	r0, r3
   287c2:	46bd      	mov	sp, r7
   287c4:	b002      	add	sp, #8
   287c6:	bd80      	pop	{r7, pc}
   287c8:	00028749 	.word	0x00028749

000287cc <port_pin_set_output_level>:
{
   287cc:	b580      	push	{r7, lr}
   287ce:	b084      	sub	sp, #16
   287d0:	af00      	add	r7, sp, #0
   287d2:	0002      	movs	r2, r0
   287d4:	1dfb      	adds	r3, r7, #7
   287d6:	701a      	strb	r2, [r3, #0]
   287d8:	1dbb      	adds	r3, r7, #6
   287da:	1c0a      	adds	r2, r1, #0
   287dc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   287de:	1dfb      	adds	r3, r7, #7
   287e0:	781b      	ldrb	r3, [r3, #0]
   287e2:	0018      	movs	r0, r3
   287e4:	4b0d      	ldr	r3, [pc, #52]	; (2881c <port_pin_set_output_level+0x50>)
   287e6:	4798      	blx	r3
   287e8:	0003      	movs	r3, r0
   287ea:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   287ec:	1dfb      	adds	r3, r7, #7
   287ee:	781b      	ldrb	r3, [r3, #0]
   287f0:	221f      	movs	r2, #31
   287f2:	4013      	ands	r3, r2
   287f4:	2201      	movs	r2, #1
   287f6:	409a      	lsls	r2, r3
   287f8:	0013      	movs	r3, r2
   287fa:	60bb      	str	r3, [r7, #8]
	if (level) {
   287fc:	1dbb      	adds	r3, r7, #6
   287fe:	781b      	ldrb	r3, [r3, #0]
   28800:	2b00      	cmp	r3, #0
   28802:	d003      	beq.n	2880c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   28804:	68fb      	ldr	r3, [r7, #12]
   28806:	68ba      	ldr	r2, [r7, #8]
   28808:	619a      	str	r2, [r3, #24]
}
   2880a:	e002      	b.n	28812 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2880c:	68fb      	ldr	r3, [r7, #12]
   2880e:	68ba      	ldr	r2, [r7, #8]
   28810:	615a      	str	r2, [r3, #20]
}
   28812:	46c0      	nop			; (mov r8, r8)
   28814:	46bd      	mov	sp, r7
   28816:	b004      	add	sp, #16
   28818:	bd80      	pop	{r7, pc}
   2881a:	46c0      	nop			; (mov r8, r8)
   2881c:	000287a9 	.word	0x000287a9

00028820 <system_gclk_chan_get_config_defaults>:
{
   28820:	b580      	push	{r7, lr}
   28822:	b082      	sub	sp, #8
   28824:	af00      	add	r7, sp, #0
   28826:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   28828:	687b      	ldr	r3, [r7, #4]
   2882a:	2200      	movs	r2, #0
   2882c:	701a      	strb	r2, [r3, #0]
}
   2882e:	46c0      	nop			; (mov r8, r8)
   28830:	46bd      	mov	sp, r7
   28832:	b002      	add	sp, #8
   28834:	bd80      	pop	{r7, pc}
	...

00028838 <system_apb_clock_set_mask>:
{
   28838:	b580      	push	{r7, lr}
   2883a:	b082      	sub	sp, #8
   2883c:	af00      	add	r7, sp, #0
   2883e:	0002      	movs	r2, r0
   28840:	6039      	str	r1, [r7, #0]
   28842:	1dfb      	adds	r3, r7, #7
   28844:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   28846:	1dfb      	adds	r3, r7, #7
   28848:	781b      	ldrb	r3, [r3, #0]
   2884a:	2b01      	cmp	r3, #1
   2884c:	d00a      	beq.n	28864 <system_apb_clock_set_mask+0x2c>
   2884e:	2b02      	cmp	r3, #2
   28850:	d00f      	beq.n	28872 <system_apb_clock_set_mask+0x3a>
   28852:	2b00      	cmp	r3, #0
   28854:	d114      	bne.n	28880 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   28856:	4b0e      	ldr	r3, [pc, #56]	; (28890 <system_apb_clock_set_mask+0x58>)
   28858:	4a0d      	ldr	r2, [pc, #52]	; (28890 <system_apb_clock_set_mask+0x58>)
   2885a:	6991      	ldr	r1, [r2, #24]
   2885c:	683a      	ldr	r2, [r7, #0]
   2885e:	430a      	orrs	r2, r1
   28860:	619a      	str	r2, [r3, #24]
			break;
   28862:	e00f      	b.n	28884 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   28864:	4b0a      	ldr	r3, [pc, #40]	; (28890 <system_apb_clock_set_mask+0x58>)
   28866:	4a0a      	ldr	r2, [pc, #40]	; (28890 <system_apb_clock_set_mask+0x58>)
   28868:	69d1      	ldr	r1, [r2, #28]
   2886a:	683a      	ldr	r2, [r7, #0]
   2886c:	430a      	orrs	r2, r1
   2886e:	61da      	str	r2, [r3, #28]
			break;
   28870:	e008      	b.n	28884 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   28872:	4b07      	ldr	r3, [pc, #28]	; (28890 <system_apb_clock_set_mask+0x58>)
   28874:	4a06      	ldr	r2, [pc, #24]	; (28890 <system_apb_clock_set_mask+0x58>)
   28876:	6a11      	ldr	r1, [r2, #32]
   28878:	683a      	ldr	r2, [r7, #0]
   2887a:	430a      	orrs	r2, r1
   2887c:	621a      	str	r2, [r3, #32]
			break;
   2887e:	e001      	b.n	28884 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   28880:	2317      	movs	r3, #23
   28882:	e000      	b.n	28886 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   28884:	2300      	movs	r3, #0
}
   28886:	0018      	movs	r0, r3
   28888:	46bd      	mov	sp, r7
   2888a:	b002      	add	sp, #8
   2888c:	bd80      	pop	{r7, pc}
   2888e:	46c0      	nop			; (mov r8, r8)
   28890:	40000400 	.word	0x40000400

00028894 <system_is_debugger_present>:
{
   28894:	b580      	push	{r7, lr}
   28896:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   28898:	4b05      	ldr	r3, [pc, #20]	; (288b0 <system_is_debugger_present+0x1c>)
   2889a:	789b      	ldrb	r3, [r3, #2]
   2889c:	b2db      	uxtb	r3, r3
   2889e:	001a      	movs	r2, r3
   288a0:	2302      	movs	r3, #2
   288a2:	4013      	ands	r3, r2
   288a4:	1e5a      	subs	r2, r3, #1
   288a6:	4193      	sbcs	r3, r2
   288a8:	b2db      	uxtb	r3, r3
}
   288aa:	0018      	movs	r0, r3
   288ac:	46bd      	mov	sp, r7
   288ae:	bd80      	pop	{r7, pc}
   288b0:	41002000 	.word	0x41002000

000288b4 <system_interrupt_enable>:
{
   288b4:	b580      	push	{r7, lr}
   288b6:	b082      	sub	sp, #8
   288b8:	af00      	add	r7, sp, #0
   288ba:	0002      	movs	r2, r0
   288bc:	1dfb      	adds	r3, r7, #7
   288be:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   288c0:	4b06      	ldr	r3, [pc, #24]	; (288dc <system_interrupt_enable+0x28>)
   288c2:	1dfa      	adds	r2, r7, #7
   288c4:	7812      	ldrb	r2, [r2, #0]
   288c6:	0011      	movs	r1, r2
   288c8:	221f      	movs	r2, #31
   288ca:	400a      	ands	r2, r1
   288cc:	2101      	movs	r1, #1
   288ce:	4091      	lsls	r1, r2
   288d0:	000a      	movs	r2, r1
   288d2:	601a      	str	r2, [r3, #0]
}
   288d4:	46c0      	nop			; (mov r8, r8)
   288d6:	46bd      	mov	sp, r7
   288d8:	b002      	add	sp, #8
   288da:	bd80      	pop	{r7, pc}
   288dc:	e000e100 	.word	0xe000e100

000288e0 <system_interrupt_disable>:
{
   288e0:	b580      	push	{r7, lr}
   288e2:	b082      	sub	sp, #8
   288e4:	af00      	add	r7, sp, #0
   288e6:	0002      	movs	r2, r0
   288e8:	1dfb      	adds	r3, r7, #7
   288ea:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   288ec:	4a07      	ldr	r2, [pc, #28]	; (2890c <system_interrupt_disable+0x2c>)
   288ee:	1dfb      	adds	r3, r7, #7
   288f0:	781b      	ldrb	r3, [r3, #0]
   288f2:	0019      	movs	r1, r3
   288f4:	231f      	movs	r3, #31
   288f6:	400b      	ands	r3, r1
   288f8:	2101      	movs	r1, #1
   288fa:	4099      	lsls	r1, r3
   288fc:	000b      	movs	r3, r1
   288fe:	0019      	movs	r1, r3
   28900:	2380      	movs	r3, #128	; 0x80
   28902:	50d1      	str	r1, [r2, r3]
}
   28904:	46c0      	nop			; (mov r8, r8)
   28906:	46bd      	mov	sp, r7
   28908:	b002      	add	sp, #8
   2890a:	bd80      	pop	{r7, pc}
   2890c:	e000e100 	.word	0xe000e100

00028910 <spi_is_syncing>:
{
   28910:	b580      	push	{r7, lr}
   28912:	b084      	sub	sp, #16
   28914:	af00      	add	r7, sp, #0
   28916:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28918:	687b      	ldr	r3, [r7, #4]
   2891a:	681b      	ldr	r3, [r3, #0]
   2891c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   2891e:	68fb      	ldr	r3, [r7, #12]
   28920:	69db      	ldr	r3, [r3, #28]
   28922:	1e5a      	subs	r2, r3, #1
   28924:	4193      	sbcs	r3, r2
   28926:	b2db      	uxtb	r3, r3
}
   28928:	0018      	movs	r0, r3
   2892a:	46bd      	mov	sp, r7
   2892c:	b004      	add	sp, #16
   2892e:	bd80      	pop	{r7, pc}

00028930 <spi_enable>:
{
   28930:	b580      	push	{r7, lr}
   28932:	b084      	sub	sp, #16
   28934:	af00      	add	r7, sp, #0
   28936:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28938:	687b      	ldr	r3, [r7, #4]
   2893a:	681b      	ldr	r3, [r3, #0]
   2893c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   2893e:	687b      	ldr	r3, [r7, #4]
   28940:	681b      	ldr	r3, [r3, #0]
   28942:	0018      	movs	r0, r3
   28944:	4b0b      	ldr	r3, [pc, #44]	; (28974 <spi_enable+0x44>)
   28946:	4798      	blx	r3
   28948:	0003      	movs	r3, r0
   2894a:	0018      	movs	r0, r3
   2894c:	4b0a      	ldr	r3, [pc, #40]	; (28978 <spi_enable+0x48>)
   2894e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   28950:	46c0      	nop			; (mov r8, r8)
   28952:	687b      	ldr	r3, [r7, #4]
   28954:	0018      	movs	r0, r3
   28956:	4b09      	ldr	r3, [pc, #36]	; (2897c <spi_enable+0x4c>)
   28958:	4798      	blx	r3
   2895a:	1e03      	subs	r3, r0, #0
   2895c:	d1f9      	bne.n	28952 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   2895e:	68fb      	ldr	r3, [r7, #12]
   28960:	681b      	ldr	r3, [r3, #0]
   28962:	2202      	movs	r2, #2
   28964:	431a      	orrs	r2, r3
   28966:	68fb      	ldr	r3, [r7, #12]
   28968:	601a      	str	r2, [r3, #0]
}
   2896a:	46c0      	nop			; (mov r8, r8)
   2896c:	46bd      	mov	sp, r7
   2896e:	b004      	add	sp, #16
   28970:	bd80      	pop	{r7, pc}
   28972:	46c0      	nop			; (mov r8, r8)
   28974:	0002864d 	.word	0x0002864d
   28978:	000288b5 	.word	0x000288b5
   2897c:	00028911 	.word	0x00028911

00028980 <spi_disable>:
{
   28980:	b580      	push	{r7, lr}
   28982:	b084      	sub	sp, #16
   28984:	af00      	add	r7, sp, #0
   28986:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28988:	687b      	ldr	r3, [r7, #4]
   2898a:	681b      	ldr	r3, [r3, #0]
   2898c:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   2898e:	687b      	ldr	r3, [r7, #4]
   28990:	681b      	ldr	r3, [r3, #0]
   28992:	0018      	movs	r0, r3
   28994:	4b0e      	ldr	r3, [pc, #56]	; (289d0 <spi_disable+0x50>)
   28996:	4798      	blx	r3
   28998:	0003      	movs	r3, r0
   2899a:	0018      	movs	r0, r3
   2899c:	4b0d      	ldr	r3, [pc, #52]	; (289d4 <spi_disable+0x54>)
   2899e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   289a0:	46c0      	nop			; (mov r8, r8)
   289a2:	687b      	ldr	r3, [r7, #4]
   289a4:	0018      	movs	r0, r3
   289a6:	4b0c      	ldr	r3, [pc, #48]	; (289d8 <spi_disable+0x58>)
   289a8:	4798      	blx	r3
   289aa:	1e03      	subs	r3, r0, #0
   289ac:	d1f9      	bne.n	289a2 <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   289ae:	68fb      	ldr	r3, [r7, #12]
   289b0:	228f      	movs	r2, #143	; 0x8f
   289b2:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   289b4:	68fb      	ldr	r3, [r7, #12]
   289b6:	228f      	movs	r2, #143	; 0x8f
   289b8:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   289ba:	68fb      	ldr	r3, [r7, #12]
   289bc:	681b      	ldr	r3, [r3, #0]
   289be:	2202      	movs	r2, #2
   289c0:	4393      	bics	r3, r2
   289c2:	001a      	movs	r2, r3
   289c4:	68fb      	ldr	r3, [r7, #12]
   289c6:	601a      	str	r2, [r3, #0]
}
   289c8:	46c0      	nop			; (mov r8, r8)
   289ca:	46bd      	mov	sp, r7
   289cc:	b004      	add	sp, #16
   289ce:	bd80      	pop	{r7, pc}
   289d0:	0002864d 	.word	0x0002864d
   289d4:	000288e1 	.word	0x000288e1
   289d8:	00028911 	.word	0x00028911

000289dc <spi_is_write_complete>:
{
   289dc:	b580      	push	{r7, lr}
   289de:	b084      	sub	sp, #16
   289e0:	af00      	add	r7, sp, #0
   289e2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   289e4:	687b      	ldr	r3, [r7, #4]
   289e6:	681b      	ldr	r3, [r3, #0]
   289e8:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   289ea:	68fb      	ldr	r3, [r7, #12]
   289ec:	7e1b      	ldrb	r3, [r3, #24]
   289ee:	b2db      	uxtb	r3, r3
   289f0:	001a      	movs	r2, r3
   289f2:	2302      	movs	r3, #2
   289f4:	4013      	ands	r3, r2
   289f6:	1e5a      	subs	r2, r3, #1
   289f8:	4193      	sbcs	r3, r2
   289fa:	b2db      	uxtb	r3, r3
}
   289fc:	0018      	movs	r0, r3
   289fe:	46bd      	mov	sp, r7
   28a00:	b004      	add	sp, #16
   28a02:	bd80      	pop	{r7, pc}

00028a04 <spi_is_ready_to_write>:
{
   28a04:	b580      	push	{r7, lr}
   28a06:	b084      	sub	sp, #16
   28a08:	af00      	add	r7, sp, #0
   28a0a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28a0c:	687b      	ldr	r3, [r7, #4]
   28a0e:	681b      	ldr	r3, [r3, #0]
   28a10:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   28a12:	68fb      	ldr	r3, [r7, #12]
   28a14:	7e1b      	ldrb	r3, [r3, #24]
   28a16:	b2db      	uxtb	r3, r3
   28a18:	001a      	movs	r2, r3
   28a1a:	2301      	movs	r3, #1
   28a1c:	4013      	ands	r3, r2
   28a1e:	1e5a      	subs	r2, r3, #1
   28a20:	4193      	sbcs	r3, r2
   28a22:	b2db      	uxtb	r3, r3
}
   28a24:	0018      	movs	r0, r3
   28a26:	46bd      	mov	sp, r7
   28a28:	b004      	add	sp, #16
   28a2a:	bd80      	pop	{r7, pc}

00028a2c <spi_is_ready_to_read>:
{
   28a2c:	b580      	push	{r7, lr}
   28a2e:	b084      	sub	sp, #16
   28a30:	af00      	add	r7, sp, #0
   28a32:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28a34:	687b      	ldr	r3, [r7, #4]
   28a36:	681b      	ldr	r3, [r3, #0]
   28a38:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   28a3a:	68fb      	ldr	r3, [r7, #12]
   28a3c:	7e1b      	ldrb	r3, [r3, #24]
   28a3e:	b2db      	uxtb	r3, r3
   28a40:	001a      	movs	r2, r3
   28a42:	2304      	movs	r3, #4
   28a44:	4013      	ands	r3, r2
   28a46:	1e5a      	subs	r2, r3, #1
   28a48:	4193      	sbcs	r3, r2
   28a4a:	b2db      	uxtb	r3, r3
}
   28a4c:	0018      	movs	r0, r3
   28a4e:	46bd      	mov	sp, r7
   28a50:	b004      	add	sp, #16
   28a52:	bd80      	pop	{r7, pc}

00028a54 <spi_write>:
{
   28a54:	b580      	push	{r7, lr}
   28a56:	b084      	sub	sp, #16
   28a58:	af00      	add	r7, sp, #0
   28a5a:	6078      	str	r0, [r7, #4]
   28a5c:	000a      	movs	r2, r1
   28a5e:	1cbb      	adds	r3, r7, #2
   28a60:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28a62:	687b      	ldr	r3, [r7, #4]
   28a64:	681b      	ldr	r3, [r3, #0]
   28a66:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   28a68:	687b      	ldr	r3, [r7, #4]
   28a6a:	0018      	movs	r0, r3
   28a6c:	4b0a      	ldr	r3, [pc, #40]	; (28a98 <spi_write+0x44>)
   28a6e:	4798      	blx	r3
   28a70:	0003      	movs	r3, r0
   28a72:	001a      	movs	r2, r3
   28a74:	2301      	movs	r3, #1
   28a76:	4053      	eors	r3, r2
   28a78:	b2db      	uxtb	r3, r3
   28a7a:	2b00      	cmp	r3, #0
   28a7c:	d001      	beq.n	28a82 <spi_write+0x2e>
		return STATUS_BUSY;
   28a7e:	2305      	movs	r3, #5
   28a80:	e006      	b.n	28a90 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   28a82:	1cbb      	adds	r3, r7, #2
   28a84:	881b      	ldrh	r3, [r3, #0]
   28a86:	05db      	lsls	r3, r3, #23
   28a88:	0dda      	lsrs	r2, r3, #23
   28a8a:	68fb      	ldr	r3, [r7, #12]
   28a8c:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   28a8e:	2300      	movs	r3, #0
}
   28a90:	0018      	movs	r0, r3
   28a92:	46bd      	mov	sp, r7
   28a94:	b004      	add	sp, #16
   28a96:	bd80      	pop	{r7, pc}
   28a98:	00028a05 	.word	0x00028a05

00028a9c <spi_read>:
{
   28a9c:	b580      	push	{r7, lr}
   28a9e:	b084      	sub	sp, #16
   28aa0:	af00      	add	r7, sp, #0
   28aa2:	6078      	str	r0, [r7, #4]
   28aa4:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28aa6:	687b      	ldr	r3, [r7, #4]
   28aa8:	681b      	ldr	r3, [r3, #0]
   28aaa:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   28aac:	687b      	ldr	r3, [r7, #4]
   28aae:	0018      	movs	r0, r3
   28ab0:	4b1b      	ldr	r3, [pc, #108]	; (28b20 <spi_read+0x84>)
   28ab2:	4798      	blx	r3
   28ab4:	0003      	movs	r3, r0
   28ab6:	001a      	movs	r2, r3
   28ab8:	2301      	movs	r3, #1
   28aba:	4053      	eors	r3, r2
   28abc:	b2db      	uxtb	r3, r3
   28abe:	2b00      	cmp	r3, #0
   28ac0:	d001      	beq.n	28ac6 <spi_read+0x2a>
		return STATUS_ERR_IO;
   28ac2:	2310      	movs	r3, #16
   28ac4:	e027      	b.n	28b16 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   28ac6:	230f      	movs	r3, #15
   28ac8:	18fb      	adds	r3, r7, r3
   28aca:	2200      	movs	r2, #0
   28acc:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   28ace:	68bb      	ldr	r3, [r7, #8]
   28ad0:	8b5b      	ldrh	r3, [r3, #26]
   28ad2:	b29b      	uxth	r3, r3
   28ad4:	001a      	movs	r2, r3
   28ad6:	2304      	movs	r3, #4
   28ad8:	4013      	ands	r3, r2
   28ada:	d006      	beq.n	28aea <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   28adc:	230f      	movs	r3, #15
   28ade:	18fb      	adds	r3, r7, r3
   28ae0:	221e      	movs	r2, #30
   28ae2:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   28ae4:	68bb      	ldr	r3, [r7, #8]
   28ae6:	2204      	movs	r2, #4
   28ae8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28aea:	687b      	ldr	r3, [r7, #4]
   28aec:	799b      	ldrb	r3, [r3, #6]
   28aee:	2b01      	cmp	r3, #1
   28af0:	d108      	bne.n	28b04 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   28af2:	68bb      	ldr	r3, [r7, #8]
   28af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28af6:	b29b      	uxth	r3, r3
   28af8:	05db      	lsls	r3, r3, #23
   28afa:	0ddb      	lsrs	r3, r3, #23
   28afc:	b29a      	uxth	r2, r3
   28afe:	683b      	ldr	r3, [r7, #0]
   28b00:	801a      	strh	r2, [r3, #0]
   28b02:	e005      	b.n	28b10 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   28b04:	68bb      	ldr	r3, [r7, #8]
   28b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28b08:	b2db      	uxtb	r3, r3
   28b0a:	b29a      	uxth	r2, r3
   28b0c:	683b      	ldr	r3, [r7, #0]
   28b0e:	801a      	strh	r2, [r3, #0]
	return retval;
   28b10:	230f      	movs	r3, #15
   28b12:	18fb      	adds	r3, r7, r3
   28b14:	781b      	ldrb	r3, [r3, #0]
}
   28b16:	0018      	movs	r0, r3
   28b18:	46bd      	mov	sp, r7
   28b1a:	b004      	add	sp, #16
   28b1c:	bd80      	pop	{r7, pc}
   28b1e:	46c0      	nop			; (mov r8, r8)
   28b20:	00028a2d 	.word	0x00028a2d

00028b24 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   28b24:	b590      	push	{r4, r7, lr}
   28b26:	b089      	sub	sp, #36	; 0x24
   28b28:	af00      	add	r7, sp, #0
   28b2a:	6078      	str	r0, [r7, #4]
   28b2c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   28b2e:	230c      	movs	r3, #12
   28b30:	18fb      	adds	r3, r7, r3
   28b32:	2200      	movs	r2, #0
   28b34:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   28b36:	687b      	ldr	r3, [r7, #4]
   28b38:	681b      	ldr	r3, [r3, #0]
   28b3a:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   28b3c:	687b      	ldr	r3, [r7, #4]
   28b3e:	0018      	movs	r0, r3
   28b40:	4b24      	ldr	r3, [pc, #144]	; (28bd4 <spi_set_baudrate+0xb0>)
   28b42:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   28b44:	46c0      	nop			; (mov r8, r8)
   28b46:	687b      	ldr	r3, [r7, #4]
   28b48:	0018      	movs	r0, r3
   28b4a:	4b23      	ldr	r3, [pc, #140]	; (28bd8 <spi_set_baudrate+0xb4>)
   28b4c:	4798      	blx	r3
   28b4e:	1e03      	subs	r3, r0, #0
   28b50:	d1f9      	bne.n	28b46 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28b52:	687b      	ldr	r3, [r7, #4]
   28b54:	681b      	ldr	r3, [r3, #0]
   28b56:	0018      	movs	r0, r3
   28b58:	4b20      	ldr	r3, [pc, #128]	; (28bdc <spi_set_baudrate+0xb8>)
   28b5a:	4798      	blx	r3
   28b5c:	0003      	movs	r3, r0
   28b5e:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28b60:	69bb      	ldr	r3, [r7, #24]
   28b62:	3314      	adds	r3, #20
   28b64:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   28b66:	697b      	ldr	r3, [r7, #20]
   28b68:	b2db      	uxtb	r3, r3
   28b6a:	0018      	movs	r0, r3
   28b6c:	4b1c      	ldr	r3, [pc, #112]	; (28be0 <spi_set_baudrate+0xbc>)
   28b6e:	4798      	blx	r3
   28b70:	0003      	movs	r3, r0
   28b72:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   28b74:	230f      	movs	r3, #15
   28b76:	18fc      	adds	r4, r7, r3
   28b78:	230c      	movs	r3, #12
   28b7a:	18fa      	adds	r2, r7, r3
   28b7c:	6939      	ldr	r1, [r7, #16]
   28b7e:	683b      	ldr	r3, [r7, #0]
   28b80:	0018      	movs	r0, r3
   28b82:	4b18      	ldr	r3, [pc, #96]	; (28be4 <spi_set_baudrate+0xc0>)
   28b84:	4798      	blx	r3
   28b86:	0003      	movs	r3, r0
   28b88:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   28b8a:	230f      	movs	r3, #15
   28b8c:	18fb      	adds	r3, r7, r3
   28b8e:	781b      	ldrb	r3, [r3, #0]
   28b90:	2b00      	cmp	r3, #0
   28b92:	d001      	beq.n	28b98 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   28b94:	2317      	movs	r3, #23
   28b96:	e018      	b.n	28bca <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   28b98:	230c      	movs	r3, #12
   28b9a:	18fb      	adds	r3, r7, r3
   28b9c:	881b      	ldrh	r3, [r3, #0]
   28b9e:	b2da      	uxtb	r2, r3
   28ba0:	69fb      	ldr	r3, [r7, #28]
   28ba2:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   28ba4:	46c0      	nop			; (mov r8, r8)
   28ba6:	687b      	ldr	r3, [r7, #4]
   28ba8:	0018      	movs	r0, r3
   28baa:	4b0b      	ldr	r3, [pc, #44]	; (28bd8 <spi_set_baudrate+0xb4>)
   28bac:	4798      	blx	r3
   28bae:	1e03      	subs	r3, r0, #0
   28bb0:	d1f9      	bne.n	28ba6 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   28bb2:	687b      	ldr	r3, [r7, #4]
   28bb4:	0018      	movs	r0, r3
   28bb6:	4b0c      	ldr	r3, [pc, #48]	; (28be8 <spi_set_baudrate+0xc4>)
   28bb8:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   28bba:	46c0      	nop			; (mov r8, r8)
   28bbc:	687b      	ldr	r3, [r7, #4]
   28bbe:	0018      	movs	r0, r3
   28bc0:	4b05      	ldr	r3, [pc, #20]	; (28bd8 <spi_set_baudrate+0xb4>)
   28bc2:	4798      	blx	r3
   28bc4:	1e03      	subs	r3, r0, #0
   28bc6:	d1f9      	bne.n	28bbc <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   28bc8:	2300      	movs	r3, #0
}
   28bca:	0018      	movs	r0, r3
   28bcc:	46bd      	mov	sp, r7
   28bce:	b009      	add	sp, #36	; 0x24
   28bd0:	bd90      	pop	{r4, r7, pc}
   28bd2:	46c0      	nop			; (mov r8, r8)
   28bd4:	00028981 	.word	0x00028981
   28bd8:	00028911 	.word	0x00028911
   28bdc:	0002857d 	.word	0x0002857d
   28be0:	0002af31 	.word	0x0002af31
   28be4:	000280f7 	.word	0x000280f7
   28be8:	00028931 	.word	0x00028931

00028bec <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   28bec:	b590      	push	{r4, r7, lr}
   28bee:	b093      	sub	sp, #76	; 0x4c
   28bf0:	af00      	add	r7, sp, #0
   28bf2:	6078      	str	r0, [r7, #4]
   28bf4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   28bf6:	687b      	ldr	r3, [r7, #4]
   28bf8:	681b      	ldr	r3, [r3, #0]
   28bfa:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   28bfc:	687b      	ldr	r3, [r7, #4]
   28bfe:	681b      	ldr	r3, [r3, #0]
   28c00:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   28c02:	231c      	movs	r3, #28
   28c04:	18fb      	adds	r3, r7, r3
   28c06:	0018      	movs	r0, r3
   28c08:	4b75      	ldr	r3, [pc, #468]	; (28de0 <_spi_set_config+0x1f4>)
   28c0a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28c0c:	231c      	movs	r3, #28
   28c0e:	18fb      	adds	r3, r7, r3
   28c10:	2200      	movs	r2, #0
   28c12:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   28c14:	683b      	ldr	r3, [r7, #0]
   28c16:	781b      	ldrb	r3, [r3, #0]
   28c18:	2b00      	cmp	r3, #0
   28c1a:	d103      	bne.n	28c24 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   28c1c:	231c      	movs	r3, #28
   28c1e:	18fb      	adds	r3, r7, r3
   28c20:	2200      	movs	r2, #0
   28c22:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   28c24:	683b      	ldr	r3, [r7, #0]
   28c26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   28c28:	230c      	movs	r3, #12
   28c2a:	18fb      	adds	r3, r7, r3
   28c2c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   28c2e:	683b      	ldr	r3, [r7, #0]
   28c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   28c32:	230c      	movs	r3, #12
   28c34:	18fb      	adds	r3, r7, r3
   28c36:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   28c38:	683b      	ldr	r3, [r7, #0]
   28c3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   28c3c:	230c      	movs	r3, #12
   28c3e:	18fb      	adds	r3, r7, r3
   28c40:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   28c42:	683b      	ldr	r3, [r7, #0]
   28c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   28c46:	230c      	movs	r3, #12
   28c48:	18fb      	adds	r3, r7, r3
   28c4a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   28c4c:	2347      	movs	r3, #71	; 0x47
   28c4e:	18fb      	adds	r3, r7, r3
   28c50:	2200      	movs	r2, #0
   28c52:	701a      	strb	r2, [r3, #0]
   28c54:	e02c      	b.n	28cb0 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   28c56:	2347      	movs	r3, #71	; 0x47
   28c58:	18fb      	adds	r3, r7, r3
   28c5a:	781a      	ldrb	r2, [r3, #0]
   28c5c:	230c      	movs	r3, #12
   28c5e:	18fb      	adds	r3, r7, r3
   28c60:	0092      	lsls	r2, r2, #2
   28c62:	58d3      	ldr	r3, [r2, r3]
   28c64:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   28c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28c68:	2b00      	cmp	r3, #0
   28c6a:	d109      	bne.n	28c80 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   28c6c:	2347      	movs	r3, #71	; 0x47
   28c6e:	18fb      	adds	r3, r7, r3
   28c70:	781a      	ldrb	r2, [r3, #0]
   28c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   28c74:	0011      	movs	r1, r2
   28c76:	0018      	movs	r0, r3
   28c78:	4b5a      	ldr	r3, [pc, #360]	; (28de4 <_spi_set_config+0x1f8>)
   28c7a:	4798      	blx	r3
   28c7c:	0003      	movs	r3, r0
   28c7e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   28c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28c82:	3301      	adds	r3, #1
   28c84:	d00d      	beq.n	28ca2 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   28c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28c88:	b2da      	uxtb	r2, r3
   28c8a:	231c      	movs	r3, #28
   28c8c:	18fb      	adds	r3, r7, r3
   28c8e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   28c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28c92:	0c1b      	lsrs	r3, r3, #16
   28c94:	b2db      	uxtb	r3, r3
   28c96:	221c      	movs	r2, #28
   28c98:	18ba      	adds	r2, r7, r2
   28c9a:	0011      	movs	r1, r2
   28c9c:	0018      	movs	r0, r3
   28c9e:	4b52      	ldr	r3, [pc, #328]	; (28de8 <_spi_set_config+0x1fc>)
   28ca0:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   28ca2:	2347      	movs	r3, #71	; 0x47
   28ca4:	18fb      	adds	r3, r7, r3
   28ca6:	781a      	ldrb	r2, [r3, #0]
   28ca8:	2347      	movs	r3, #71	; 0x47
   28caa:	18fb      	adds	r3, r7, r3
   28cac:	3201      	adds	r2, #1
   28cae:	701a      	strb	r2, [r3, #0]
   28cb0:	2347      	movs	r3, #71	; 0x47
   28cb2:	18fb      	adds	r3, r7, r3
   28cb4:	781b      	ldrb	r3, [r3, #0]
   28cb6:	2b03      	cmp	r3, #3
   28cb8:	d9cd      	bls.n	28c56 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   28cba:	683b      	ldr	r3, [r7, #0]
   28cbc:	781a      	ldrb	r2, [r3, #0]
   28cbe:	687b      	ldr	r3, [r7, #4]
   28cc0:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   28cc2:	683b      	ldr	r3, [r7, #0]
   28cc4:	7c1a      	ldrb	r2, [r3, #16]
   28cc6:	687b      	ldr	r3, [r7, #4]
   28cc8:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   28cca:	683b      	ldr	r3, [r7, #0]
   28ccc:	7c9a      	ldrb	r2, [r3, #18]
   28cce:	687b      	ldr	r3, [r7, #4]
   28cd0:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   28cd2:	683b      	ldr	r3, [r7, #0]
   28cd4:	7d1a      	ldrb	r2, [r3, #20]
   28cd6:	687b      	ldr	r3, [r7, #4]
   28cd8:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   28cda:	230a      	movs	r3, #10
   28cdc:	18fb      	adds	r3, r7, r3
   28cde:	2200      	movs	r2, #0
   28ce0:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   28ce2:	2300      	movs	r3, #0
   28ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   28ce6:	2300      	movs	r3, #0
   28ce8:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   28cea:	683b      	ldr	r3, [r7, #0]
   28cec:	781b      	ldrb	r3, [r3, #0]
   28cee:	2b01      	cmp	r3, #1
   28cf0:	d129      	bne.n	28d46 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28cf2:	687b      	ldr	r3, [r7, #4]
   28cf4:	681b      	ldr	r3, [r3, #0]
   28cf6:	0018      	movs	r0, r3
   28cf8:	4b3c      	ldr	r3, [pc, #240]	; (28dec <_spi_set_config+0x200>)
   28cfa:	4798      	blx	r3
   28cfc:	0003      	movs	r3, r0
   28cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   28d02:	3314      	adds	r3, #20
   28d04:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   28d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
   28d08:	b2db      	uxtb	r3, r3
   28d0a:	0018      	movs	r0, r3
   28d0c:	4b38      	ldr	r3, [pc, #224]	; (28df0 <_spi_set_config+0x204>)
   28d0e:	4798      	blx	r3
   28d10:	0003      	movs	r3, r0
   28d12:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   28d14:	683b      	ldr	r3, [r7, #0]
   28d16:	699b      	ldr	r3, [r3, #24]
   28d18:	2223      	movs	r2, #35	; 0x23
   28d1a:	18bc      	adds	r4, r7, r2
   28d1c:	220a      	movs	r2, #10
   28d1e:	18ba      	adds	r2, r7, r2
   28d20:	6a79      	ldr	r1, [r7, #36]	; 0x24
   28d22:	0018      	movs	r0, r3
   28d24:	4b33      	ldr	r3, [pc, #204]	; (28df4 <_spi_set_config+0x208>)
   28d26:	4798      	blx	r3
   28d28:	0003      	movs	r3, r0
   28d2a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   28d2c:	2323      	movs	r3, #35	; 0x23
   28d2e:	18fb      	adds	r3, r7, r3
   28d30:	781b      	ldrb	r3, [r3, #0]
   28d32:	2b00      	cmp	r3, #0
   28d34:	d001      	beq.n	28d3a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   28d36:	2317      	movs	r3, #23
   28d38:	e04e      	b.n	28dd8 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   28d3a:	230a      	movs	r3, #10
   28d3c:	18fb      	adds	r3, r7, r3
   28d3e:	881b      	ldrh	r3, [r3, #0]
   28d40:	b2da      	uxtb	r2, r3
   28d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28d44:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   28d46:	683b      	ldr	r3, [r7, #0]
   28d48:	685b      	ldr	r3, [r3, #4]
   28d4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   28d4c:	4313      	orrs	r3, r2
   28d4e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   28d50:	683b      	ldr	r3, [r7, #0]
   28d52:	689b      	ldr	r3, [r3, #8]
   28d54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   28d56:	4313      	orrs	r3, r2
   28d58:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   28d5a:	683b      	ldr	r3, [r7, #0]
   28d5c:	68db      	ldr	r3, [r3, #12]
   28d5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   28d60:	4313      	orrs	r3, r2
   28d62:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   28d64:	683b      	ldr	r3, [r7, #0]
   28d66:	7c1b      	ldrb	r3, [r3, #16]
   28d68:	001a      	movs	r2, r3
   28d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28d6c:	4313      	orrs	r3, r2
   28d6e:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   28d70:	683b      	ldr	r3, [r7, #0]
   28d72:	7c5b      	ldrb	r3, [r3, #17]
   28d74:	2b00      	cmp	r3, #0
   28d76:	d103      	bne.n	28d80 <_spi_set_config+0x194>
   28d78:	4b1f      	ldr	r3, [pc, #124]	; (28df8 <_spi_set_config+0x20c>)
   28d7a:	4798      	blx	r3
   28d7c:	1e03      	subs	r3, r0, #0
   28d7e:	d003      	beq.n	28d88 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   28d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28d82:	2280      	movs	r2, #128	; 0x80
   28d84:	4313      	orrs	r3, r2
   28d86:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   28d88:	683b      	ldr	r3, [r7, #0]
   28d8a:	7c9b      	ldrb	r3, [r3, #18]
   28d8c:	2b00      	cmp	r3, #0
   28d8e:	d004      	beq.n	28d9a <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   28d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28d92:	2280      	movs	r2, #128	; 0x80
   28d94:	0292      	lsls	r2, r2, #10
   28d96:	4313      	orrs	r3, r2
   28d98:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   28d9a:	683b      	ldr	r3, [r7, #0]
   28d9c:	7cdb      	ldrb	r3, [r3, #19]
   28d9e:	2b00      	cmp	r3, #0
   28da0:	d004      	beq.n	28dac <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   28da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28da4:	2280      	movs	r2, #128	; 0x80
   28da6:	0092      	lsls	r2, r2, #2
   28da8:	4313      	orrs	r3, r2
   28daa:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   28dac:	683b      	ldr	r3, [r7, #0]
   28dae:	7d1b      	ldrb	r3, [r3, #20]
   28db0:	2b00      	cmp	r3, #0
   28db2:	d004      	beq.n	28dbe <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   28db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28db6:	2280      	movs	r2, #128	; 0x80
   28db8:	0192      	lsls	r2, r2, #6
   28dba:	4313      	orrs	r3, r2
   28dbc:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   28dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28dc0:	681a      	ldr	r2, [r3, #0]
   28dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28dc4:	431a      	orrs	r2, r3
   28dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28dc8:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   28dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28dcc:	685a      	ldr	r2, [r3, #4]
   28dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28dd0:	431a      	orrs	r2, r3
   28dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28dd4:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   28dd6:	2300      	movs	r3, #0
}
   28dd8:	0018      	movs	r0, r3
   28dda:	46bd      	mov	sp, r7
   28ddc:	b013      	add	sp, #76	; 0x4c
   28dde:	bd90      	pop	{r4, r7, pc}
   28de0:	00028721 	.word	0x00028721
   28de4:	000283c1 	.word	0x000283c1
   28de8:	0002b16d 	.word	0x0002b16d
   28dec:	0002857d 	.word	0x0002857d
   28df0:	0002af31 	.word	0x0002af31
   28df4:	000280f7 	.word	0x000280f7
   28df8:	00028895 	.word	0x00028895

00028dfc <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   28dfc:	b590      	push	{r4, r7, lr}
   28dfe:	b08b      	sub	sp, #44	; 0x2c
   28e00:	af00      	add	r7, sp, #0
   28e02:	60f8      	str	r0, [r7, #12]
   28e04:	60b9      	str	r1, [r7, #8]
   28e06:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   28e08:	68fb      	ldr	r3, [r7, #12]
   28e0a:	68ba      	ldr	r2, [r7, #8]
   28e0c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   28e0e:	68fb      	ldr	r3, [r7, #12]
   28e10:	681b      	ldr	r3, [r3, #0]
   28e12:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   28e14:	6a3b      	ldr	r3, [r7, #32]
   28e16:	681b      	ldr	r3, [r3, #0]
   28e18:	2202      	movs	r2, #2
   28e1a:	4013      	ands	r3, r2
   28e1c:	d001      	beq.n	28e22 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   28e1e:	231c      	movs	r3, #28
   28e20:	e09c      	b.n	28f5c <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   28e22:	6a3b      	ldr	r3, [r7, #32]
   28e24:	681b      	ldr	r3, [r3, #0]
   28e26:	2201      	movs	r2, #1
   28e28:	4013      	ands	r3, r2
   28e2a:	d001      	beq.n	28e30 <spi_init+0x34>
		return STATUS_BUSY;
   28e2c:	2305      	movs	r3, #5
   28e2e:	e095      	b.n	28f5c <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28e30:	68fb      	ldr	r3, [r7, #12]
   28e32:	681b      	ldr	r3, [r3, #0]
   28e34:	0018      	movs	r0, r3
   28e36:	4b4b      	ldr	r3, [pc, #300]	; (28f64 <spi_init+0x168>)
   28e38:	4798      	blx	r3
   28e3a:	0003      	movs	r3, r0
   28e3c:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   28e3e:	69fb      	ldr	r3, [r7, #28]
   28e40:	3302      	adds	r3, #2
   28e42:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28e44:	69fb      	ldr	r3, [r7, #28]
   28e46:	3314      	adds	r3, #20
   28e48:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   28e4a:	2201      	movs	r2, #1
   28e4c:	69bb      	ldr	r3, [r7, #24]
   28e4e:	409a      	lsls	r2, r3
   28e50:	0013      	movs	r3, r2
   28e52:	0019      	movs	r1, r3
   28e54:	2002      	movs	r0, #2
   28e56:	4b44      	ldr	r3, [pc, #272]	; (28f68 <spi_init+0x16c>)
   28e58:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   28e5a:	2310      	movs	r3, #16
   28e5c:	18fb      	adds	r3, r7, r3
   28e5e:	0018      	movs	r0, r3
   28e60:	4b42      	ldr	r3, [pc, #264]	; (28f6c <spi_init+0x170>)
   28e62:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   28e64:	687b      	ldr	r3, [r7, #4]
   28e66:	2224      	movs	r2, #36	; 0x24
   28e68:	5c9a      	ldrb	r2, [r3, r2]
   28e6a:	2310      	movs	r3, #16
   28e6c:	18fb      	adds	r3, r7, r3
   28e6e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   28e70:	697b      	ldr	r3, [r7, #20]
   28e72:	b2db      	uxtb	r3, r3
   28e74:	2210      	movs	r2, #16
   28e76:	18ba      	adds	r2, r7, r2
   28e78:	0011      	movs	r1, r2
   28e7a:	0018      	movs	r0, r3
   28e7c:	4b3c      	ldr	r3, [pc, #240]	; (28f70 <spi_init+0x174>)
   28e7e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   28e80:	697b      	ldr	r3, [r7, #20]
   28e82:	b2db      	uxtb	r3, r3
   28e84:	0018      	movs	r0, r3
   28e86:	4b3b      	ldr	r3, [pc, #236]	; (28f74 <spi_init+0x178>)
   28e88:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   28e8a:	687b      	ldr	r3, [r7, #4]
   28e8c:	2224      	movs	r2, #36	; 0x24
   28e8e:	5c9b      	ldrb	r3, [r3, r2]
   28e90:	2100      	movs	r1, #0
   28e92:	0018      	movs	r0, r3
   28e94:	4b38      	ldr	r3, [pc, #224]	; (28f78 <spi_init+0x17c>)
   28e96:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   28e98:	687b      	ldr	r3, [r7, #4]
   28e9a:	781b      	ldrb	r3, [r3, #0]
   28e9c:	2b01      	cmp	r3, #1
   28e9e:	d105      	bne.n	28eac <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   28ea0:	6a3b      	ldr	r3, [r7, #32]
   28ea2:	681b      	ldr	r3, [r3, #0]
   28ea4:	220c      	movs	r2, #12
   28ea6:	431a      	orrs	r2, r3
   28ea8:	6a3b      	ldr	r3, [r7, #32]
   28eaa:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   28eac:	2327      	movs	r3, #39	; 0x27
   28eae:	18fb      	adds	r3, r7, r3
   28eb0:	2200      	movs	r2, #0
   28eb2:	701a      	strb	r2, [r3, #0]
   28eb4:	e010      	b.n	28ed8 <spi_init+0xdc>
		module->callback[i]        = NULL;
   28eb6:	2327      	movs	r3, #39	; 0x27
   28eb8:	18fb      	adds	r3, r7, r3
   28eba:	781b      	ldrb	r3, [r3, #0]
   28ebc:	68fa      	ldr	r2, [r7, #12]
   28ebe:	3302      	adds	r3, #2
   28ec0:	009b      	lsls	r3, r3, #2
   28ec2:	18d3      	adds	r3, r2, r3
   28ec4:	3304      	adds	r3, #4
   28ec6:	2200      	movs	r2, #0
   28ec8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   28eca:	2327      	movs	r3, #39	; 0x27
   28ecc:	18fb      	adds	r3, r7, r3
   28ece:	781a      	ldrb	r2, [r3, #0]
   28ed0:	2327      	movs	r3, #39	; 0x27
   28ed2:	18fb      	adds	r3, r7, r3
   28ed4:	3201      	adds	r2, #1
   28ed6:	701a      	strb	r2, [r3, #0]
   28ed8:	2327      	movs	r3, #39	; 0x27
   28eda:	18fb      	adds	r3, r7, r3
   28edc:	781b      	ldrb	r3, [r3, #0]
   28ede:	2b06      	cmp	r3, #6
   28ee0:	d9e9      	bls.n	28eb6 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   28ee2:	68fb      	ldr	r3, [r7, #12]
   28ee4:	2200      	movs	r2, #0
   28ee6:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   28ee8:	68fb      	ldr	r3, [r7, #12]
   28eea:	2200      	movs	r2, #0
   28eec:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   28eee:	68fb      	ldr	r3, [r7, #12]
   28ef0:	2200      	movs	r2, #0
   28ef2:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   28ef4:	68fb      	ldr	r3, [r7, #12]
   28ef6:	2200      	movs	r2, #0
   28ef8:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   28efa:	68fb      	ldr	r3, [r7, #12]
   28efc:	2236      	movs	r2, #54	; 0x36
   28efe:	2100      	movs	r1, #0
   28f00:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   28f02:	68fb      	ldr	r3, [r7, #12]
   28f04:	2237      	movs	r2, #55	; 0x37
   28f06:	2100      	movs	r1, #0
   28f08:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   28f0a:	68fb      	ldr	r3, [r7, #12]
   28f0c:	2238      	movs	r2, #56	; 0x38
   28f0e:	2100      	movs	r1, #0
   28f10:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   28f12:	68fb      	ldr	r3, [r7, #12]
   28f14:	2203      	movs	r2, #3
   28f16:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   28f18:	68fb      	ldr	r3, [r7, #12]
   28f1a:	2200      	movs	r2, #0
   28f1c:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   28f1e:	68fb      	ldr	r3, [r7, #12]
   28f20:	681b      	ldr	r3, [r3, #0]
   28f22:	2213      	movs	r2, #19
   28f24:	18bc      	adds	r4, r7, r2
   28f26:	0018      	movs	r0, r3
   28f28:	4b0e      	ldr	r3, [pc, #56]	; (28f64 <spi_init+0x168>)
   28f2a:	4798      	blx	r3
   28f2c:	0003      	movs	r3, r0
   28f2e:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   28f30:	4a12      	ldr	r2, [pc, #72]	; (28f7c <spi_init+0x180>)
   28f32:	2313      	movs	r3, #19
   28f34:	18fb      	adds	r3, r7, r3
   28f36:	781b      	ldrb	r3, [r3, #0]
   28f38:	0011      	movs	r1, r2
   28f3a:	0018      	movs	r0, r3
   28f3c:	4b10      	ldr	r3, [pc, #64]	; (28f80 <spi_init+0x184>)
   28f3e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   28f40:	2313      	movs	r3, #19
   28f42:	18fb      	adds	r3, r7, r3
   28f44:	781a      	ldrb	r2, [r3, #0]
   28f46:	4b0f      	ldr	r3, [pc, #60]	; (28f84 <spi_init+0x188>)
   28f48:	0092      	lsls	r2, r2, #2
   28f4a:	68f9      	ldr	r1, [r7, #12]
   28f4c:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   28f4e:	687a      	ldr	r2, [r7, #4]
   28f50:	68fb      	ldr	r3, [r7, #12]
   28f52:	0011      	movs	r1, r2
   28f54:	0018      	movs	r0, r3
   28f56:	4b0c      	ldr	r3, [pc, #48]	; (28f88 <spi_init+0x18c>)
   28f58:	4798      	blx	r3
   28f5a:	0003      	movs	r3, r0
}
   28f5c:	0018      	movs	r0, r3
   28f5e:	46bd      	mov	sp, r7
   28f60:	b00b      	add	sp, #44	; 0x2c
   28f62:	bd90      	pop	{r4, r7, pc}
   28f64:	0002857d 	.word	0x0002857d
   28f68:	00028839 	.word	0x00028839
   28f6c:	00028821 	.word	0x00028821
   28f70:	0002ae0d 	.word	0x0002ae0d
   28f74:	0002ae51 	.word	0x0002ae51
   28f78:	00028335 	.word	0x00028335
   28f7c:	00029455 	.word	0x00029455
   28f80:	000285e1 	.word	0x000285e1
   28f84:	20005c9c 	.word	0x20005c9c
   28f88:	00028bed 	.word	0x00028bed

00028f8c <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   28f8c:	b590      	push	{r4, r7, lr}
   28f8e:	b087      	sub	sp, #28
   28f90:	af00      	add	r7, sp, #0
   28f92:	60f8      	str	r0, [r7, #12]
   28f94:	60b9      	str	r1, [r7, #8]
   28f96:	0019      	movs	r1, r3
   28f98:	1dbb      	adds	r3, r7, #6
   28f9a:	801a      	strh	r2, [r3, #0]
   28f9c:	1d3b      	adds	r3, r7, #4
   28f9e:	1c0a      	adds	r2, r1, #0
   28fa0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   28fa2:	68fb      	ldr	r3, [r7, #12]
   28fa4:	2238      	movs	r2, #56	; 0x38
   28fa6:	5c9b      	ldrb	r3, [r3, r2]
   28fa8:	b2db      	uxtb	r3, r3
   28faa:	2b05      	cmp	r3, #5
   28fac:	d101      	bne.n	28fb2 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   28fae:	2305      	movs	r3, #5
   28fb0:	e07a      	b.n	290a8 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   28fb2:	1dbb      	adds	r3, r7, #6
   28fb4:	881b      	ldrh	r3, [r3, #0]
   28fb6:	2b00      	cmp	r3, #0
   28fb8:	d101      	bne.n	28fbe <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   28fba:	2317      	movs	r3, #23
   28fbc:	e074      	b.n	290a8 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   28fbe:	68fb      	ldr	r3, [r7, #12]
   28fc0:	79db      	ldrb	r3, [r3, #7]
   28fc2:	2201      	movs	r2, #1
   28fc4:	4053      	eors	r3, r2
   28fc6:	b2db      	uxtb	r3, r3
   28fc8:	2b00      	cmp	r3, #0
   28fca:	d001      	beq.n	28fd0 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   28fcc:	231c      	movs	r3, #28
   28fce:	e06b      	b.n	290a8 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   28fd0:	2316      	movs	r3, #22
   28fd2:	18fb      	adds	r3, r7, r3
   28fd4:	2200      	movs	r2, #0
   28fd6:	801a      	strh	r2, [r3, #0]

	while (length--) {
   28fd8:	e05e      	b.n	29098 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   28fda:	68fb      	ldr	r3, [r7, #12]
   28fdc:	795b      	ldrb	r3, [r3, #5]
   28fde:	2b01      	cmp	r3, #1
   28fe0:	d112      	bne.n	29008 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   28fe2:	46c0      	nop			; (mov r8, r8)
   28fe4:	68fb      	ldr	r3, [r7, #12]
   28fe6:	0018      	movs	r0, r3
   28fe8:	4b31      	ldr	r3, [pc, #196]	; (290b0 <spi_read_buffer_wait+0x124>)
   28fea:	4798      	blx	r3
   28fec:	0003      	movs	r3, r0
   28fee:	001a      	movs	r2, r3
   28ff0:	2301      	movs	r3, #1
   28ff2:	4053      	eors	r3, r2
   28ff4:	b2db      	uxtb	r3, r3
   28ff6:	2b00      	cmp	r3, #0
   28ff8:	d1f4      	bne.n	28fe4 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   28ffa:	1d3b      	adds	r3, r7, #4
   28ffc:	881a      	ldrh	r2, [r3, #0]
   28ffe:	68fb      	ldr	r3, [r7, #12]
   29000:	0011      	movs	r1, r2
   29002:	0018      	movs	r0, r3
   29004:	4b2b      	ldr	r3, [pc, #172]	; (290b4 <spi_read_buffer_wait+0x128>)
   29006:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   29008:	46c0      	nop			; (mov r8, r8)
   2900a:	68fb      	ldr	r3, [r7, #12]
   2900c:	0018      	movs	r0, r3
   2900e:	4b2a      	ldr	r3, [pc, #168]	; (290b8 <spi_read_buffer_wait+0x12c>)
   29010:	4798      	blx	r3
   29012:	0003      	movs	r3, r0
   29014:	001a      	movs	r2, r3
   29016:	2301      	movs	r3, #1
   29018:	4053      	eors	r3, r2
   2901a:	b2db      	uxtb	r3, r3
   2901c:	2b00      	cmp	r3, #0
   2901e:	d1f4      	bne.n	2900a <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   29020:	2312      	movs	r3, #18
   29022:	18fb      	adds	r3, r7, r3
   29024:	2200      	movs	r2, #0
   29026:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   29028:	2315      	movs	r3, #21
   2902a:	18fc      	adds	r4, r7, r3
   2902c:	2312      	movs	r3, #18
   2902e:	18fa      	adds	r2, r7, r3
   29030:	68fb      	ldr	r3, [r7, #12]
   29032:	0011      	movs	r1, r2
   29034:	0018      	movs	r0, r3
   29036:	4b21      	ldr	r3, [pc, #132]	; (290bc <spi_read_buffer_wait+0x130>)
   29038:	4798      	blx	r3
   2903a:	0003      	movs	r3, r0
   2903c:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   2903e:	2315      	movs	r3, #21
   29040:	18fb      	adds	r3, r7, r3
   29042:	781b      	ldrb	r3, [r3, #0]
   29044:	2b00      	cmp	r3, #0
   29046:	d003      	beq.n	29050 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   29048:	2315      	movs	r3, #21
   2904a:	18fb      	adds	r3, r7, r3
   2904c:	781b      	ldrb	r3, [r3, #0]
   2904e:	e02b      	b.n	290a8 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   29050:	2316      	movs	r3, #22
   29052:	18fb      	adds	r3, r7, r3
   29054:	881b      	ldrh	r3, [r3, #0]
   29056:	2216      	movs	r2, #22
   29058:	18ba      	adds	r2, r7, r2
   2905a:	1c59      	adds	r1, r3, #1
   2905c:	8011      	strh	r1, [r2, #0]
   2905e:	001a      	movs	r2, r3
   29060:	68bb      	ldr	r3, [r7, #8]
   29062:	189b      	adds	r3, r3, r2
   29064:	2212      	movs	r2, #18
   29066:	18ba      	adds	r2, r7, r2
   29068:	8812      	ldrh	r2, [r2, #0]
   2906a:	b2d2      	uxtb	r2, r2
   2906c:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2906e:	68fb      	ldr	r3, [r7, #12]
   29070:	799b      	ldrb	r3, [r3, #6]
   29072:	2b01      	cmp	r3, #1
   29074:	d110      	bne.n	29098 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   29076:	2316      	movs	r3, #22
   29078:	18fb      	adds	r3, r7, r3
   2907a:	881b      	ldrh	r3, [r3, #0]
   2907c:	2216      	movs	r2, #22
   2907e:	18ba      	adds	r2, r7, r2
   29080:	1c59      	adds	r1, r3, #1
   29082:	8011      	strh	r1, [r2, #0]
   29084:	001a      	movs	r2, r3
   29086:	68bb      	ldr	r3, [r7, #8]
   29088:	189b      	adds	r3, r3, r2
   2908a:	2212      	movs	r2, #18
   2908c:	18ba      	adds	r2, r7, r2
   2908e:	8812      	ldrh	r2, [r2, #0]
   29090:	0a12      	lsrs	r2, r2, #8
   29092:	b292      	uxth	r2, r2
   29094:	b2d2      	uxtb	r2, r2
   29096:	701a      	strb	r2, [r3, #0]
	while (length--) {
   29098:	1dbb      	adds	r3, r7, #6
   2909a:	881b      	ldrh	r3, [r3, #0]
   2909c:	1dba      	adds	r2, r7, #6
   2909e:	1e59      	subs	r1, r3, #1
   290a0:	8011      	strh	r1, [r2, #0]
   290a2:	2b00      	cmp	r3, #0
   290a4:	d199      	bne.n	28fda <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   290a6:	2300      	movs	r3, #0
}
   290a8:	0018      	movs	r0, r3
   290aa:	46bd      	mov	sp, r7
   290ac:	b007      	add	sp, #28
   290ae:	bd90      	pop	{r4, r7, pc}
   290b0:	00028a05 	.word	0x00028a05
   290b4:	00028a55 	.word	0x00028a55
   290b8:	00028a2d 	.word	0x00028a2d
   290bc:	00028a9d 	.word	0x00028a9d

000290c0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   290c0:	b580      	push	{r7, lr}
   290c2:	b086      	sub	sp, #24
   290c4:	af00      	add	r7, sp, #0
   290c6:	60f8      	str	r0, [r7, #12]
   290c8:	60b9      	str	r1, [r7, #8]
   290ca:	1dfb      	adds	r3, r7, #7
   290cc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   290ce:	68fb      	ldr	r3, [r7, #12]
   290d0:	795b      	ldrb	r3, [r3, #5]
   290d2:	2b01      	cmp	r3, #1
   290d4:	d001      	beq.n	290da <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   290d6:	2315      	movs	r3, #21
   290d8:	e05c      	b.n	29194 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   290da:	68fb      	ldr	r3, [r7, #12]
   290dc:	7a1b      	ldrb	r3, [r3, #8]
   290de:	2201      	movs	r2, #1
   290e0:	4053      	eors	r3, r2
   290e2:	b2db      	uxtb	r3, r3
   290e4:	2b00      	cmp	r3, #0
   290e6:	d054      	beq.n	29192 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   290e8:	1dfb      	adds	r3, r7, #7
   290ea:	781b      	ldrb	r3, [r3, #0]
   290ec:	2b00      	cmp	r3, #0
   290ee:	d04a      	beq.n	29186 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   290f0:	68bb      	ldr	r3, [r7, #8]
   290f2:	785b      	ldrb	r3, [r3, #1]
   290f4:	2b00      	cmp	r3, #0
   290f6:	d03f      	beq.n	29178 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   290f8:	68fb      	ldr	r3, [r7, #12]
   290fa:	0018      	movs	r0, r3
   290fc:	4b27      	ldr	r3, [pc, #156]	; (2919c <spi_select_slave+0xdc>)
   290fe:	4798      	blx	r3
   29100:	0003      	movs	r3, r0
   29102:	001a      	movs	r2, r3
   29104:	2301      	movs	r3, #1
   29106:	4053      	eors	r3, r2
   29108:	b2db      	uxtb	r3, r3
   2910a:	2b00      	cmp	r3, #0
   2910c:	d007      	beq.n	2911e <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   2910e:	68bb      	ldr	r3, [r7, #8]
   29110:	781b      	ldrb	r3, [r3, #0]
   29112:	2101      	movs	r1, #1
   29114:	0018      	movs	r0, r3
   29116:	4b22      	ldr	r3, [pc, #136]	; (291a0 <spi_select_slave+0xe0>)
   29118:	4798      	blx	r3
					return STATUS_BUSY;
   2911a:	2305      	movs	r3, #5
   2911c:	e03a      	b.n	29194 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   2911e:	68bb      	ldr	r3, [r7, #8]
   29120:	781b      	ldrb	r3, [r3, #0]
   29122:	2100      	movs	r1, #0
   29124:	0018      	movs	r0, r3
   29126:	4b1e      	ldr	r3, [pc, #120]	; (291a0 <spi_select_slave+0xe0>)
   29128:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   2912a:	68bb      	ldr	r3, [r7, #8]
   2912c:	789b      	ldrb	r3, [r3, #2]
   2912e:	b29a      	uxth	r2, r3
   29130:	68fb      	ldr	r3, [r7, #12]
   29132:	0011      	movs	r1, r2
   29134:	0018      	movs	r0, r3
   29136:	4b1b      	ldr	r3, [pc, #108]	; (291a4 <spi_select_slave+0xe4>)
   29138:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   2913a:	68fb      	ldr	r3, [r7, #12]
   2913c:	79db      	ldrb	r3, [r3, #7]
   2913e:	2201      	movs	r2, #1
   29140:	4053      	eors	r3, r2
   29142:	b2db      	uxtb	r3, r3
   29144:	2b00      	cmp	r3, #0
   29146:	d024      	beq.n	29192 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   29148:	46c0      	nop			; (mov r8, r8)
   2914a:	68fb      	ldr	r3, [r7, #12]
   2914c:	0018      	movs	r0, r3
   2914e:	4b16      	ldr	r3, [pc, #88]	; (291a8 <spi_select_slave+0xe8>)
   29150:	4798      	blx	r3
   29152:	0003      	movs	r3, r0
   29154:	001a      	movs	r2, r3
   29156:	2301      	movs	r3, #1
   29158:	4053      	eors	r3, r2
   2915a:	b2db      	uxtb	r3, r3
   2915c:	2b00      	cmp	r3, #0
   2915e:	d1f4      	bne.n	2914a <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   29160:	2316      	movs	r3, #22
   29162:	18fb      	adds	r3, r7, r3
   29164:	2200      	movs	r2, #0
   29166:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   29168:	2316      	movs	r3, #22
   2916a:	18fa      	adds	r2, r7, r3
   2916c:	68fb      	ldr	r3, [r7, #12]
   2916e:	0011      	movs	r1, r2
   29170:	0018      	movs	r0, r3
   29172:	4b0e      	ldr	r3, [pc, #56]	; (291ac <spi_select_slave+0xec>)
   29174:	4798      	blx	r3
   29176:	e00c      	b.n	29192 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   29178:	68bb      	ldr	r3, [r7, #8]
   2917a:	781b      	ldrb	r3, [r3, #0]
   2917c:	2100      	movs	r1, #0
   2917e:	0018      	movs	r0, r3
   29180:	4b07      	ldr	r3, [pc, #28]	; (291a0 <spi_select_slave+0xe0>)
   29182:	4798      	blx	r3
   29184:	e005      	b.n	29192 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   29186:	68bb      	ldr	r3, [r7, #8]
   29188:	781b      	ldrb	r3, [r3, #0]
   2918a:	2101      	movs	r1, #1
   2918c:	0018      	movs	r0, r3
   2918e:	4b04      	ldr	r3, [pc, #16]	; (291a0 <spi_select_slave+0xe0>)
   29190:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   29192:	2300      	movs	r3, #0
}
   29194:	0018      	movs	r0, r3
   29196:	46bd      	mov	sp, r7
   29198:	b006      	add	sp, #24
   2919a:	bd80      	pop	{r7, pc}
   2919c:	00028a05 	.word	0x00028a05
   291a0:	000287cd 	.word	0x000287cd
   291a4:	00028a55 	.word	0x00028a55
   291a8:	00028a2d 	.word	0x00028a2d
   291ac:	00028a9d 	.word	0x00028a9d

000291b0 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   291b0:	b580      	push	{r7, lr}
   291b2:	b086      	sub	sp, #24
   291b4:	af00      	add	r7, sp, #0
   291b6:	60f8      	str	r0, [r7, #12]
   291b8:	60b9      	str	r1, [r7, #8]
   291ba:	1dbb      	adds	r3, r7, #6
   291bc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   291be:	68fb      	ldr	r3, [r7, #12]
   291c0:	2238      	movs	r2, #56	; 0x38
   291c2:	5c9b      	ldrb	r3, [r3, r2]
   291c4:	b2db      	uxtb	r3, r3
   291c6:	2b05      	cmp	r3, #5
   291c8:	d101      	bne.n	291ce <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   291ca:	2305      	movs	r3, #5
   291cc:	e087      	b.n	292de <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   291ce:	1dbb      	adds	r3, r7, #6
   291d0:	881b      	ldrh	r3, [r3, #0]
   291d2:	2b00      	cmp	r3, #0
   291d4:	d101      	bne.n	291da <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   291d6:	2317      	movs	r3, #23
   291d8:	e081      	b.n	292de <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   291da:	2316      	movs	r3, #22
   291dc:	18fb      	adds	r3, r7, r3
   291de:	2200      	movs	r2, #0
   291e0:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   291e2:	2314      	movs	r3, #20
   291e4:	18fb      	adds	r3, r7, r3
   291e6:	1dba      	adds	r2, r7, #6
   291e8:	8812      	ldrh	r2, [r2, #0]
   291ea:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   291ec:	e05f      	b.n	292ae <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   291ee:	46c0      	nop			; (mov r8, r8)
   291f0:	68fb      	ldr	r3, [r7, #12]
   291f2:	0018      	movs	r0, r3
   291f4:	4b3c      	ldr	r3, [pc, #240]	; (292e8 <spi_write_buffer_wait+0x138>)
   291f6:	4798      	blx	r3
   291f8:	0003      	movs	r3, r0
   291fa:	001a      	movs	r2, r3
   291fc:	2301      	movs	r3, #1
   291fe:	4053      	eors	r3, r2
   29200:	b2db      	uxtb	r3, r3
   29202:	2b00      	cmp	r3, #0
   29204:	d1f4      	bne.n	291f0 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   29206:	2316      	movs	r3, #22
   29208:	18fb      	adds	r3, r7, r3
   2920a:	881b      	ldrh	r3, [r3, #0]
   2920c:	2216      	movs	r2, #22
   2920e:	18ba      	adds	r2, r7, r2
   29210:	1c59      	adds	r1, r3, #1
   29212:	8011      	strh	r1, [r2, #0]
   29214:	001a      	movs	r2, r3
   29216:	68bb      	ldr	r3, [r7, #8]
   29218:	189b      	adds	r3, r3, r2
   2921a:	781a      	ldrb	r2, [r3, #0]
   2921c:	2312      	movs	r3, #18
   2921e:	18fb      	adds	r3, r7, r3
   29220:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   29222:	68fb      	ldr	r3, [r7, #12]
   29224:	799b      	ldrb	r3, [r3, #6]
   29226:	2b01      	cmp	r3, #1
   29228:	d115      	bne.n	29256 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   2922a:	2316      	movs	r3, #22
   2922c:	18fb      	adds	r3, r7, r3
   2922e:	881b      	ldrh	r3, [r3, #0]
   29230:	2216      	movs	r2, #22
   29232:	18ba      	adds	r2, r7, r2
   29234:	1c59      	adds	r1, r3, #1
   29236:	8011      	strh	r1, [r2, #0]
   29238:	001a      	movs	r2, r3
   2923a:	68bb      	ldr	r3, [r7, #8]
   2923c:	189b      	adds	r3, r3, r2
   2923e:	781b      	ldrb	r3, [r3, #0]
   29240:	021b      	lsls	r3, r3, #8
   29242:	b21a      	sxth	r2, r3
   29244:	2312      	movs	r3, #18
   29246:	18fb      	adds	r3, r7, r3
   29248:	2100      	movs	r1, #0
   2924a:	5e5b      	ldrsh	r3, [r3, r1]
   2924c:	4313      	orrs	r3, r2
   2924e:	b21a      	sxth	r2, r3
   29250:	2312      	movs	r3, #18
   29252:	18fb      	adds	r3, r7, r3
   29254:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   29256:	2312      	movs	r3, #18
   29258:	18fb      	adds	r3, r7, r3
   2925a:	881a      	ldrh	r2, [r3, #0]
   2925c:	68fb      	ldr	r3, [r7, #12]
   2925e:	0011      	movs	r1, r2
   29260:	0018      	movs	r0, r3
   29262:	4b22      	ldr	r3, [pc, #136]	; (292ec <spi_write_buffer_wait+0x13c>)
   29264:	4798      	blx	r3

		if (module->receiver_enabled) {
   29266:	68fb      	ldr	r3, [r7, #12]
   29268:	79db      	ldrb	r3, [r3, #7]
   2926a:	2214      	movs	r2, #20
   2926c:	18ba      	adds	r2, r7, r2
   2926e:	2114      	movs	r1, #20
   29270:	1879      	adds	r1, r7, r1
   29272:	8809      	ldrh	r1, [r1, #0]
   29274:	8011      	strh	r1, [r2, #0]
   29276:	2b00      	cmp	r3, #0
   29278:	d019      	beq.n	292ae <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   2927a:	46c0      	nop			; (mov r8, r8)
   2927c:	68fb      	ldr	r3, [r7, #12]
   2927e:	0018      	movs	r0, r3
   29280:	4b1b      	ldr	r3, [pc, #108]	; (292f0 <spi_write_buffer_wait+0x140>)
   29282:	4798      	blx	r3
   29284:	0003      	movs	r3, r0
   29286:	001a      	movs	r2, r3
   29288:	2301      	movs	r3, #1
   2928a:	4053      	eors	r3, r2
   2928c:	b2db      	uxtb	r3, r3
   2928e:	2b00      	cmp	r3, #0
   29290:	d1f4      	bne.n	2927c <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   29292:	2310      	movs	r3, #16
   29294:	18fa      	adds	r2, r7, r3
   29296:	68fb      	ldr	r3, [r7, #12]
   29298:	0011      	movs	r1, r2
   2929a:	0018      	movs	r0, r3
   2929c:	4b15      	ldr	r3, [pc, #84]	; (292f4 <spi_write_buffer_wait+0x144>)
   2929e:	4798      	blx	r3
			flush_length--;
   292a0:	2314      	movs	r3, #20
   292a2:	18fb      	adds	r3, r7, r3
   292a4:	881a      	ldrh	r2, [r3, #0]
   292a6:	2314      	movs	r3, #20
   292a8:	18fb      	adds	r3, r7, r3
   292aa:	3a01      	subs	r2, #1
   292ac:	801a      	strh	r2, [r3, #0]
	while (length--) {
   292ae:	1dbb      	adds	r3, r7, #6
   292b0:	881b      	ldrh	r3, [r3, #0]
   292b2:	1dba      	adds	r2, r7, #6
   292b4:	1e59      	subs	r1, r3, #1
   292b6:	8011      	strh	r1, [r2, #0]
   292b8:	2b00      	cmp	r3, #0
   292ba:	d198      	bne.n	291ee <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   292bc:	68fb      	ldr	r3, [r7, #12]
   292be:	795b      	ldrb	r3, [r3, #5]
   292c0:	2b01      	cmp	r3, #1
   292c2:	d10b      	bne.n	292dc <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   292c4:	46c0      	nop			; (mov r8, r8)
   292c6:	68fb      	ldr	r3, [r7, #12]
   292c8:	0018      	movs	r0, r3
   292ca:	4b0b      	ldr	r3, [pc, #44]	; (292f8 <spi_write_buffer_wait+0x148>)
   292cc:	4798      	blx	r3
   292ce:	0003      	movs	r3, r0
   292d0:	001a      	movs	r2, r3
   292d2:	2301      	movs	r3, #1
   292d4:	4053      	eors	r3, r2
   292d6:	b2db      	uxtb	r3, r3
   292d8:	2b00      	cmp	r3, #0
   292da:	d1f4      	bne.n	292c6 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   292dc:	2300      	movs	r3, #0
}
   292de:	0018      	movs	r0, r3
   292e0:	46bd      	mov	sp, r7
   292e2:	b006      	add	sp, #24
   292e4:	bd80      	pop	{r7, pc}
   292e6:	46c0      	nop			; (mov r8, r8)
   292e8:	00028a05 	.word	0x00028a05
   292ec:	00028a55 	.word	0x00028a55
   292f0:	00028a2d 	.word	0x00028a2d
   292f4:	00028a9d 	.word	0x00028a9d
   292f8:	000289dd 	.word	0x000289dd

000292fc <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   292fc:	b580      	push	{r7, lr}
   292fe:	b084      	sub	sp, #16
   29300:	af00      	add	r7, sp, #0
   29302:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   29304:	687b      	ldr	r3, [r7, #4]
   29306:	681b      	ldr	r3, [r3, #0]
   29308:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   2930a:	687b      	ldr	r3, [r7, #4]
   2930c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2930e:	781b      	ldrb	r3, [r3, #0]
   29310:	b2da      	uxtb	r2, r3
   29312:	230e      	movs	r3, #14
   29314:	18fb      	adds	r3, r7, r3
   29316:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   29318:	687b      	ldr	r3, [r7, #4]
   2931a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2931c:	1c5a      	adds	r2, r3, #1
   2931e:	687b      	ldr	r3, [r7, #4]
   29320:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   29322:	687b      	ldr	r3, [r7, #4]
   29324:	799b      	ldrb	r3, [r3, #6]
   29326:	2b01      	cmp	r3, #1
   29328:	d113      	bne.n	29352 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   2932a:	687b      	ldr	r3, [r7, #4]
   2932c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2932e:	781b      	ldrb	r3, [r3, #0]
   29330:	b2db      	uxtb	r3, r3
   29332:	021b      	lsls	r3, r3, #8
   29334:	b21a      	sxth	r2, r3
   29336:	230e      	movs	r3, #14
   29338:	18fb      	adds	r3, r7, r3
   2933a:	2100      	movs	r1, #0
   2933c:	5e5b      	ldrsh	r3, [r3, r1]
   2933e:	4313      	orrs	r3, r2
   29340:	b21a      	sxth	r2, r3
   29342:	230e      	movs	r3, #14
   29344:	18fb      	adds	r3, r7, r3
   29346:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   29348:	687b      	ldr	r3, [r7, #4]
   2934a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2934c:	1c5a      	adds	r2, r3, #1
   2934e:	687b      	ldr	r3, [r7, #4]
   29350:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   29352:	230e      	movs	r3, #14
   29354:	18fb      	adds	r3, r7, r3
   29356:	881b      	ldrh	r3, [r3, #0]
   29358:	05db      	lsls	r3, r3, #23
   2935a:	0dda      	lsrs	r2, r3, #23
   2935c:	68bb      	ldr	r3, [r7, #8]
   2935e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   29360:	687b      	ldr	r3, [r7, #4]
   29362:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   29364:	b29b      	uxth	r3, r3
   29366:	3b01      	subs	r3, #1
   29368:	b29a      	uxth	r2, r3
   2936a:	687b      	ldr	r3, [r7, #4]
   2936c:	869a      	strh	r2, [r3, #52]	; 0x34
}
   2936e:	46c0      	nop			; (mov r8, r8)
   29370:	46bd      	mov	sp, r7
   29372:	b004      	add	sp, #16
   29374:	bd80      	pop	{r7, pc}
	...

00029378 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   29378:	b580      	push	{r7, lr}
   2937a:	b084      	sub	sp, #16
   2937c:	af00      	add	r7, sp, #0
   2937e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   29380:	687b      	ldr	r3, [r7, #4]
   29382:	681b      	ldr	r3, [r3, #0]
   29384:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   29386:	4b08      	ldr	r3, [pc, #32]	; (293a8 <_spi_write_dummy+0x30>)
   29388:	881b      	ldrh	r3, [r3, #0]
   2938a:	001a      	movs	r2, r3
   2938c:	68fb      	ldr	r3, [r7, #12]
   2938e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   29390:	687b      	ldr	r3, [r7, #4]
   29392:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   29394:	b29b      	uxth	r3, r3
   29396:	3b01      	subs	r3, #1
   29398:	b29a      	uxth	r2, r3
   2939a:	687b      	ldr	r3, [r7, #4]
   2939c:	865a      	strh	r2, [r3, #50]	; 0x32
}
   2939e:	46c0      	nop			; (mov r8, r8)
   293a0:	46bd      	mov	sp, r7
   293a2:	b004      	add	sp, #16
   293a4:	bd80      	pop	{r7, pc}
   293a6:	46c0      	nop			; (mov r8, r8)
   293a8:	20005cb4 	.word	0x20005cb4

000293ac <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   293ac:	b580      	push	{r7, lr}
   293ae:	b084      	sub	sp, #16
   293b0:	af00      	add	r7, sp, #0
   293b2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   293b4:	687b      	ldr	r3, [r7, #4]
   293b6:	681b      	ldr	r3, [r3, #0]
   293b8:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   293ba:	230a      	movs	r3, #10
   293bc:	18fb      	adds	r3, r7, r3
   293be:	2200      	movs	r2, #0
   293c0:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   293c2:	68fb      	ldr	r3, [r7, #12]
   293c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   293c6:	230a      	movs	r3, #10
   293c8:	18fb      	adds	r3, r7, r3
   293ca:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   293cc:	687b      	ldr	r3, [r7, #4]
   293ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   293d0:	b29b      	uxth	r3, r3
   293d2:	3b01      	subs	r3, #1
   293d4:	b29a      	uxth	r2, r3
   293d6:	687b      	ldr	r3, [r7, #4]
   293d8:	865a      	strh	r2, [r3, #50]	; 0x32
}
   293da:	46c0      	nop			; (mov r8, r8)
   293dc:	46bd      	mov	sp, r7
   293de:	b004      	add	sp, #16
   293e0:	bd80      	pop	{r7, pc}

000293e2 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   293e2:	b580      	push	{r7, lr}
   293e4:	b084      	sub	sp, #16
   293e6:	af00      	add	r7, sp, #0
   293e8:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   293ea:	687b      	ldr	r3, [r7, #4]
   293ec:	681b      	ldr	r3, [r3, #0]
   293ee:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   293f0:	68fb      	ldr	r3, [r7, #12]
   293f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   293f4:	b29a      	uxth	r2, r3
   293f6:	230a      	movs	r3, #10
   293f8:	18fb      	adds	r3, r7, r3
   293fa:	05d2      	lsls	r2, r2, #23
   293fc:	0dd2      	lsrs	r2, r2, #23
   293fe:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   29400:	687b      	ldr	r3, [r7, #4]
   29402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29404:	220a      	movs	r2, #10
   29406:	18ba      	adds	r2, r7, r2
   29408:	8812      	ldrh	r2, [r2, #0]
   2940a:	b2d2      	uxtb	r2, r2
   2940c:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   2940e:	687b      	ldr	r3, [r7, #4]
   29410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29412:	1c5a      	adds	r2, r3, #1
   29414:	687b      	ldr	r3, [r7, #4]
   29416:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   29418:	687b      	ldr	r3, [r7, #4]
   2941a:	799b      	ldrb	r3, [r3, #6]
   2941c:	2b01      	cmp	r3, #1
   2941e:	d10d      	bne.n	2943c <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   29420:	687b      	ldr	r3, [r7, #4]
   29422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29424:	220a      	movs	r2, #10
   29426:	18ba      	adds	r2, r7, r2
   29428:	8812      	ldrh	r2, [r2, #0]
   2942a:	0a12      	lsrs	r2, r2, #8
   2942c:	b292      	uxth	r2, r2
   2942e:	b2d2      	uxtb	r2, r2
   29430:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   29432:	687b      	ldr	r3, [r7, #4]
   29434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29436:	1c5a      	adds	r2, r3, #1
   29438:	687b      	ldr	r3, [r7, #4]
   2943a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   2943c:	687b      	ldr	r3, [r7, #4]
   2943e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   29440:	b29b      	uxth	r3, r3
   29442:	3b01      	subs	r3, #1
   29444:	b29a      	uxth	r2, r3
   29446:	687b      	ldr	r3, [r7, #4]
   29448:	861a      	strh	r2, [r3, #48]	; 0x30
}
   2944a:	46c0      	nop			; (mov r8, r8)
   2944c:	46bd      	mov	sp, r7
   2944e:	b004      	add	sp, #16
   29450:	bd80      	pop	{r7, pc}
	...

00029454 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   29454:	b580      	push	{r7, lr}
   29456:	b086      	sub	sp, #24
   29458:	af00      	add	r7, sp, #0
   2945a:	0002      	movs	r2, r0
   2945c:	1dfb      	adds	r3, r7, #7
   2945e:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   29460:	1dfb      	adds	r3, r7, #7
   29462:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   29464:	4b96      	ldr	r3, [pc, #600]	; (296c0 <_spi_interrupt_handler+0x26c>)
   29466:	0092      	lsls	r2, r2, #2
   29468:	58d3      	ldr	r3, [r2, r3]
   2946a:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   2946c:	697b      	ldr	r3, [r7, #20]
   2946e:	681b      	ldr	r3, [r3, #0]
   29470:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   29472:	697b      	ldr	r3, [r7, #20]
   29474:	2237      	movs	r2, #55	; 0x37
   29476:	5c9a      	ldrb	r2, [r3, r2]
   29478:	697b      	ldr	r3, [r7, #20]
   2947a:	2136      	movs	r1, #54	; 0x36
   2947c:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   2947e:	230f      	movs	r3, #15
   29480:	18fb      	adds	r3, r7, r3
   29482:	400a      	ands	r2, r1
   29484:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   29486:	693b      	ldr	r3, [r7, #16]
   29488:	7e1b      	ldrb	r3, [r3, #24]
   2948a:	b2da      	uxtb	r2, r3
   2948c:	230c      	movs	r3, #12
   2948e:	18fb      	adds	r3, r7, r3
   29490:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   29492:	693b      	ldr	r3, [r7, #16]
   29494:	7d9b      	ldrb	r3, [r3, #22]
   29496:	b2db      	uxtb	r3, r3
   29498:	b29a      	uxth	r2, r3
   2949a:	230c      	movs	r3, #12
   2949c:	18fb      	adds	r3, r7, r3
   2949e:	210c      	movs	r1, #12
   294a0:	1879      	adds	r1, r7, r1
   294a2:	8809      	ldrh	r1, [r1, #0]
   294a4:	400a      	ands	r2, r1
   294a6:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   294a8:	230c      	movs	r3, #12
   294aa:	18fb      	adds	r3, r7, r3
   294ac:	881b      	ldrh	r3, [r3, #0]
   294ae:	2201      	movs	r2, #1
   294b0:	4013      	ands	r3, r2
   294b2:	d038      	beq.n	29526 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   294b4:	697b      	ldr	r3, [r7, #20]
   294b6:	795b      	ldrb	r3, [r3, #5]
   294b8:	2b01      	cmp	r3, #1
   294ba:	d110      	bne.n	294de <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   294bc:	697b      	ldr	r3, [r7, #20]
   294be:	7a5b      	ldrb	r3, [r3, #9]
   294c0:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   294c2:	2b00      	cmp	r3, #0
   294c4:	d10b      	bne.n	294de <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   294c6:	697b      	ldr	r3, [r7, #20]
   294c8:	0018      	movs	r0, r3
   294ca:	4b7e      	ldr	r3, [pc, #504]	; (296c4 <_spi_interrupt_handler+0x270>)
   294cc:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   294ce:	697b      	ldr	r3, [r7, #20]
   294d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   294d2:	b29b      	uxth	r3, r3
   294d4:	2b00      	cmp	r3, #0
   294d6:	d102      	bne.n	294de <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   294d8:	693b      	ldr	r3, [r7, #16]
   294da:	2201      	movs	r2, #1
   294dc:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   294de:	697b      	ldr	r3, [r7, #20]
   294e0:	795b      	ldrb	r3, [r3, #5]
		if (0
   294e2:	2b01      	cmp	r3, #1
   294e4:	d11f      	bne.n	29526 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   294e6:	697b      	ldr	r3, [r7, #20]
   294e8:	7a5b      	ldrb	r3, [r3, #9]
   294ea:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   294ec:	2b00      	cmp	r3, #0
   294ee:	d01a      	beq.n	29526 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   294f0:	697b      	ldr	r3, [r7, #20]
   294f2:	0018      	movs	r0, r3
   294f4:	4b74      	ldr	r3, [pc, #464]	; (296c8 <_spi_interrupt_handler+0x274>)
   294f6:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   294f8:	697b      	ldr	r3, [r7, #20]
   294fa:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   294fc:	b29b      	uxth	r3, r3
   294fe:	2b00      	cmp	r3, #0
   29500:	d111      	bne.n	29526 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   29502:	693b      	ldr	r3, [r7, #16]
   29504:	2201      	movs	r2, #1
   29506:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   29508:	697b      	ldr	r3, [r7, #20]
   2950a:	7a5b      	ldrb	r3, [r3, #9]
   2950c:	b2db      	uxtb	r3, r3
   2950e:	2b01      	cmp	r3, #1
   29510:	d109      	bne.n	29526 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   29512:	697b      	ldr	r3, [r7, #20]
   29514:	79db      	ldrb	r3, [r3, #7]
   29516:	2201      	movs	r2, #1
   29518:	4053      	eors	r3, r2
   2951a:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   2951c:	2b00      	cmp	r3, #0
   2951e:	d002      	beq.n	29526 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   29520:	693b      	ldr	r3, [r7, #16]
   29522:	2202      	movs	r2, #2
   29524:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   29526:	230c      	movs	r3, #12
   29528:	18fb      	adds	r3, r7, r3
   2952a:	881b      	ldrh	r3, [r3, #0]
   2952c:	2204      	movs	r2, #4
   2952e:	4013      	ands	r3, r2
   29530:	d100      	bne.n	29534 <_spi_interrupt_handler+0xe0>
   29532:	e07e      	b.n	29632 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   29534:	693b      	ldr	r3, [r7, #16]
   29536:	8b5b      	ldrh	r3, [r3, #26]
   29538:	b29b      	uxth	r3, r3
   2953a:	001a      	movs	r2, r3
   2953c:	2304      	movs	r3, #4
   2953e:	4013      	ands	r3, r2
   29540:	d022      	beq.n	29588 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   29542:	697b      	ldr	r3, [r7, #20]
   29544:	7a5b      	ldrb	r3, [r3, #9]
   29546:	b2db      	uxtb	r3, r3
   29548:	2b01      	cmp	r3, #1
   2954a:	d014      	beq.n	29576 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   2954c:	697b      	ldr	r3, [r7, #20]
   2954e:	2238      	movs	r2, #56	; 0x38
   29550:	211e      	movs	r1, #30
   29552:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   29554:	697b      	ldr	r3, [r7, #20]
   29556:	2203      	movs	r2, #3
   29558:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   2955a:	693b      	ldr	r3, [r7, #16]
   2955c:	2205      	movs	r2, #5
   2955e:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   29560:	230f      	movs	r3, #15
   29562:	18fb      	adds	r3, r7, r3
   29564:	781b      	ldrb	r3, [r3, #0]
   29566:	2208      	movs	r2, #8
   29568:	4013      	ands	r3, r2
   2956a:	d004      	beq.n	29576 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   2956c:	697b      	ldr	r3, [r7, #20]
   2956e:	699b      	ldr	r3, [r3, #24]
   29570:	697a      	ldr	r2, [r7, #20]
   29572:	0010      	movs	r0, r2
   29574:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   29576:	693b      	ldr	r3, [r7, #16]
   29578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2957a:	230a      	movs	r3, #10
   2957c:	18fb      	adds	r3, r7, r3
   2957e:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   29580:	693b      	ldr	r3, [r7, #16]
   29582:	2204      	movs	r2, #4
   29584:	835a      	strh	r2, [r3, #26]
   29586:	e054      	b.n	29632 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   29588:	697b      	ldr	r3, [r7, #20]
   2958a:	7a5b      	ldrb	r3, [r3, #9]
   2958c:	b2db      	uxtb	r3, r3
   2958e:	2b01      	cmp	r3, #1
   29590:	d11e      	bne.n	295d0 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   29592:	697b      	ldr	r3, [r7, #20]
   29594:	0018      	movs	r0, r3
   29596:	4b4d      	ldr	r3, [pc, #308]	; (296cc <_spi_interrupt_handler+0x278>)
   29598:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   2959a:	697b      	ldr	r3, [r7, #20]
   2959c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   2959e:	b29b      	uxth	r3, r3
   295a0:	2b00      	cmp	r3, #0
   295a2:	d146      	bne.n	29632 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   295a4:	693b      	ldr	r3, [r7, #16]
   295a6:	2204      	movs	r2, #4
   295a8:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   295aa:	697b      	ldr	r3, [r7, #20]
   295ac:	2238      	movs	r2, #56	; 0x38
   295ae:	2100      	movs	r1, #0
   295b0:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   295b2:	697b      	ldr	r3, [r7, #20]
   295b4:	2203      	movs	r2, #3
   295b6:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   295b8:	230f      	movs	r3, #15
   295ba:	18fb      	adds	r3, r7, r3
   295bc:	781b      	ldrb	r3, [r3, #0]
   295be:	2201      	movs	r2, #1
   295c0:	4013      	ands	r3, r2
   295c2:	d036      	beq.n	29632 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   295c4:	697b      	ldr	r3, [r7, #20]
   295c6:	68db      	ldr	r3, [r3, #12]
   295c8:	697a      	ldr	r2, [r7, #20]
   295ca:	0010      	movs	r0, r2
   295cc:	4798      	blx	r3
   295ce:	e030      	b.n	29632 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   295d0:	697b      	ldr	r3, [r7, #20]
   295d2:	0018      	movs	r0, r3
   295d4:	4b3e      	ldr	r3, [pc, #248]	; (296d0 <_spi_interrupt_handler+0x27c>)
   295d6:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   295d8:	697b      	ldr	r3, [r7, #20]
   295da:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   295dc:	b29b      	uxth	r3, r3
   295de:	2b00      	cmp	r3, #0
   295e0:	d127      	bne.n	29632 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   295e2:	697b      	ldr	r3, [r7, #20]
   295e4:	2238      	movs	r2, #56	; 0x38
   295e6:	2100      	movs	r1, #0
   295e8:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   295ea:	693b      	ldr	r3, [r7, #16]
   295ec:	2204      	movs	r2, #4
   295ee:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   295f0:	697b      	ldr	r3, [r7, #20]
   295f2:	7a5b      	ldrb	r3, [r3, #9]
   295f4:	b2db      	uxtb	r3, r3
   295f6:	2b02      	cmp	r3, #2
   295f8:	d10b      	bne.n	29612 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   295fa:	230f      	movs	r3, #15
   295fc:	18fb      	adds	r3, r7, r3
   295fe:	781b      	ldrb	r3, [r3, #0]
   29600:	2204      	movs	r2, #4
   29602:	4013      	ands	r3, r2
   29604:	d015      	beq.n	29632 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   29606:	697b      	ldr	r3, [r7, #20]
   29608:	695b      	ldr	r3, [r3, #20]
   2960a:	697a      	ldr	r2, [r7, #20]
   2960c:	0010      	movs	r0, r2
   2960e:	4798      	blx	r3
   29610:	e00f      	b.n	29632 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   29612:	697b      	ldr	r3, [r7, #20]
   29614:	7a5b      	ldrb	r3, [r3, #9]
   29616:	b2db      	uxtb	r3, r3
   29618:	2b00      	cmp	r3, #0
   2961a:	d10a      	bne.n	29632 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   2961c:	230f      	movs	r3, #15
   2961e:	18fb      	adds	r3, r7, r3
   29620:	781b      	ldrb	r3, [r3, #0]
   29622:	2202      	movs	r2, #2
   29624:	4013      	ands	r3, r2
   29626:	d004      	beq.n	29632 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   29628:	697b      	ldr	r3, [r7, #20]
   2962a:	691b      	ldr	r3, [r3, #16]
   2962c:	697a      	ldr	r2, [r7, #20]
   2962e:	0010      	movs	r0, r2
   29630:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   29632:	230c      	movs	r3, #12
   29634:	18fb      	adds	r3, r7, r3
   29636:	881b      	ldrh	r3, [r3, #0]
   29638:	2202      	movs	r2, #2
   2963a:	4013      	ands	r3, r2
   2963c:	d024      	beq.n	29688 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   2963e:	697b      	ldr	r3, [r7, #20]
   29640:	795b      	ldrb	r3, [r3, #5]
   29642:	2b01      	cmp	r3, #1
   29644:	d120      	bne.n	29688 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   29646:	697b      	ldr	r3, [r7, #20]
   29648:	7a5b      	ldrb	r3, [r3, #9]
   2964a:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   2964c:	2b01      	cmp	r3, #1
   2964e:	d11b      	bne.n	29688 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   29650:	697b      	ldr	r3, [r7, #20]
   29652:	79db      	ldrb	r3, [r3, #7]
   29654:	2201      	movs	r2, #1
   29656:	4053      	eors	r3, r2
   29658:	b2db      	uxtb	r3, r3
   2965a:	2b00      	cmp	r3, #0
   2965c:	d014      	beq.n	29688 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   2965e:	693b      	ldr	r3, [r7, #16]
   29660:	2202      	movs	r2, #2
   29662:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   29664:	697b      	ldr	r3, [r7, #20]
   29666:	2203      	movs	r2, #3
   29668:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   2966a:	697b      	ldr	r3, [r7, #20]
   2966c:	2238      	movs	r2, #56	; 0x38
   2966e:	2100      	movs	r1, #0
   29670:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   29672:	230f      	movs	r3, #15
   29674:	18fb      	adds	r3, r7, r3
   29676:	781b      	ldrb	r3, [r3, #0]
   29678:	2201      	movs	r2, #1
   2967a:	4013      	ands	r3, r2
   2967c:	d004      	beq.n	29688 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   2967e:	697b      	ldr	r3, [r7, #20]
   29680:	68db      	ldr	r3, [r3, #12]
   29682:	697a      	ldr	r2, [r7, #20]
   29684:	0010      	movs	r0, r2
   29686:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   29688:	230c      	movs	r3, #12
   2968a:	18fb      	adds	r3, r7, r3
   2968c:	881b      	ldrh	r3, [r3, #0]
   2968e:	2280      	movs	r2, #128	; 0x80
   29690:	4013      	ands	r3, r2
   29692:	d010      	beq.n	296b6 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   29694:	693b      	ldr	r3, [r7, #16]
   29696:	2280      	movs	r2, #128	; 0x80
   29698:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   2969a:	693b      	ldr	r3, [r7, #16]
   2969c:	2280      	movs	r2, #128	; 0x80
   2969e:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   296a0:	230f      	movs	r3, #15
   296a2:	18fb      	adds	r3, r7, r3
   296a4:	781b      	ldrb	r3, [r3, #0]
   296a6:	2240      	movs	r2, #64	; 0x40
   296a8:	4013      	ands	r3, r2
   296aa:	d004      	beq.n	296b6 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   296ac:	697b      	ldr	r3, [r7, #20]
   296ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   296b0:	697a      	ldr	r2, [r7, #20]
   296b2:	0010      	movs	r0, r2
   296b4:	4798      	blx	r3
		}
	}
#  endif
}
   296b6:	46c0      	nop			; (mov r8, r8)
   296b8:	46bd      	mov	sp, r7
   296ba:	b006      	add	sp, #24
   296bc:	bd80      	pop	{r7, pc}
   296be:	46c0      	nop			; (mov r8, r8)
   296c0:	20005c9c 	.word	0x20005c9c
   296c4:	00029379 	.word	0x00029379
   296c8:	000292fd 	.word	0x000292fd
   296cc:	000293ad 	.word	0x000293ad
   296d0:	000293e3 	.word	0x000293e3

000296d4 <system_gclk_chan_get_config_defaults>:
{
   296d4:	b580      	push	{r7, lr}
   296d6:	b082      	sub	sp, #8
   296d8:	af00      	add	r7, sp, #0
   296da:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   296dc:	687b      	ldr	r3, [r7, #4]
   296de:	2200      	movs	r2, #0
   296e0:	701a      	strb	r2, [r3, #0]
}
   296e2:	46c0      	nop			; (mov r8, r8)
   296e4:	46bd      	mov	sp, r7
   296e6:	b002      	add	sp, #8
   296e8:	bd80      	pop	{r7, pc}
	...

000296ec <system_apb_clock_set_mask>:
{
   296ec:	b580      	push	{r7, lr}
   296ee:	b082      	sub	sp, #8
   296f0:	af00      	add	r7, sp, #0
   296f2:	0002      	movs	r2, r0
   296f4:	6039      	str	r1, [r7, #0]
   296f6:	1dfb      	adds	r3, r7, #7
   296f8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   296fa:	1dfb      	adds	r3, r7, #7
   296fc:	781b      	ldrb	r3, [r3, #0]
   296fe:	2b01      	cmp	r3, #1
   29700:	d00a      	beq.n	29718 <system_apb_clock_set_mask+0x2c>
   29702:	2b02      	cmp	r3, #2
   29704:	d00f      	beq.n	29726 <system_apb_clock_set_mask+0x3a>
   29706:	2b00      	cmp	r3, #0
   29708:	d114      	bne.n	29734 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2970a:	4b0e      	ldr	r3, [pc, #56]	; (29744 <system_apb_clock_set_mask+0x58>)
   2970c:	4a0d      	ldr	r2, [pc, #52]	; (29744 <system_apb_clock_set_mask+0x58>)
   2970e:	6991      	ldr	r1, [r2, #24]
   29710:	683a      	ldr	r2, [r7, #0]
   29712:	430a      	orrs	r2, r1
   29714:	619a      	str	r2, [r3, #24]
			break;
   29716:	e00f      	b.n	29738 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   29718:	4b0a      	ldr	r3, [pc, #40]	; (29744 <system_apb_clock_set_mask+0x58>)
   2971a:	4a0a      	ldr	r2, [pc, #40]	; (29744 <system_apb_clock_set_mask+0x58>)
   2971c:	69d1      	ldr	r1, [r2, #28]
   2971e:	683a      	ldr	r2, [r7, #0]
   29720:	430a      	orrs	r2, r1
   29722:	61da      	str	r2, [r3, #28]
			break;
   29724:	e008      	b.n	29738 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   29726:	4b07      	ldr	r3, [pc, #28]	; (29744 <system_apb_clock_set_mask+0x58>)
   29728:	4a06      	ldr	r2, [pc, #24]	; (29744 <system_apb_clock_set_mask+0x58>)
   2972a:	6a11      	ldr	r1, [r2, #32]
   2972c:	683a      	ldr	r2, [r7, #0]
   2972e:	430a      	orrs	r2, r1
   29730:	621a      	str	r2, [r3, #32]
			break;
   29732:	e001      	b.n	29738 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   29734:	2317      	movs	r3, #23
   29736:	e000      	b.n	2973a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   29738:	2300      	movs	r3, #0
}
   2973a:	0018      	movs	r0, r3
   2973c:	46bd      	mov	sp, r7
   2973e:	b002      	add	sp, #8
   29740:	bd80      	pop	{r7, pc}
   29742:	46c0      	nop			; (mov r8, r8)
   29744:	40000400 	.word	0x40000400

00029748 <system_pinmux_get_config_defaults>:
{
   29748:	b580      	push	{r7, lr}
   2974a:	b082      	sub	sp, #8
   2974c:	af00      	add	r7, sp, #0
   2974e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   29750:	687b      	ldr	r3, [r7, #4]
   29752:	2280      	movs	r2, #128	; 0x80
   29754:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   29756:	687b      	ldr	r3, [r7, #4]
   29758:	2200      	movs	r2, #0
   2975a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2975c:	687b      	ldr	r3, [r7, #4]
   2975e:	2201      	movs	r2, #1
   29760:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   29762:	687b      	ldr	r3, [r7, #4]
   29764:	2200      	movs	r2, #0
   29766:	70da      	strb	r2, [r3, #3]
}
   29768:	46c0      	nop			; (mov r8, r8)
   2976a:	46bd      	mov	sp, r7
   2976c:	b002      	add	sp, #8
   2976e:	bd80      	pop	{r7, pc}

00029770 <system_is_debugger_present>:
{
   29770:	b580      	push	{r7, lr}
   29772:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   29774:	4b05      	ldr	r3, [pc, #20]	; (2978c <system_is_debugger_present+0x1c>)
   29776:	789b      	ldrb	r3, [r3, #2]
   29778:	b2db      	uxtb	r3, r3
   2977a:	001a      	movs	r2, r3
   2977c:	2302      	movs	r3, #2
   2977e:	4013      	ands	r3, r2
   29780:	1e5a      	subs	r2, r3, #1
   29782:	4193      	sbcs	r3, r2
   29784:	b2db      	uxtb	r3, r3
}
   29786:	0018      	movs	r0, r3
   29788:	46bd      	mov	sp, r7
   2978a:	bd80      	pop	{r7, pc}
   2978c:	41002000 	.word	0x41002000

00029790 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   29790:	b580      	push	{r7, lr}
   29792:	b084      	sub	sp, #16
   29794:	af00      	add	r7, sp, #0
   29796:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   29798:	687b      	ldr	r3, [r7, #4]
   2979a:	681b      	ldr	r3, [r3, #0]
   2979c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   2979e:	68fb      	ldr	r3, [r7, #12]
   297a0:	69db      	ldr	r3, [r3, #28]
   297a2:	1e5a      	subs	r2, r3, #1
   297a4:	4193      	sbcs	r3, r2
   297a6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   297a8:	0018      	movs	r0, r3
   297aa:	46bd      	mov	sp, r7
   297ac:	b004      	add	sp, #16
   297ae:	bd80      	pop	{r7, pc}

000297b0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   297b0:	b580      	push	{r7, lr}
   297b2:	b082      	sub	sp, #8
   297b4:	af00      	add	r7, sp, #0
   297b6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   297b8:	46c0      	nop			; (mov r8, r8)
   297ba:	687b      	ldr	r3, [r7, #4]
   297bc:	0018      	movs	r0, r3
   297be:	4b04      	ldr	r3, [pc, #16]	; (297d0 <_usart_wait_for_sync+0x20>)
   297c0:	4798      	blx	r3
   297c2:	1e03      	subs	r3, r0, #0
   297c4:	d1f9      	bne.n	297ba <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   297c6:	46c0      	nop			; (mov r8, r8)
   297c8:	46bd      	mov	sp, r7
   297ca:	b002      	add	sp, #8
   297cc:	bd80      	pop	{r7, pc}
   297ce:	46c0      	nop			; (mov r8, r8)
   297d0:	00029791 	.word	0x00029791

000297d4 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   297d4:	b5b0      	push	{r4, r5, r7, lr}
   297d6:	b08c      	sub	sp, #48	; 0x30
   297d8:	af02      	add	r7, sp, #8
   297da:	6078      	str	r0, [r7, #4]
   297dc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   297de:	687b      	ldr	r3, [r7, #4]
   297e0:	681b      	ldr	r3, [r3, #0]
   297e2:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   297e4:	687b      	ldr	r3, [r7, #4]
   297e6:	681b      	ldr	r3, [r3, #0]
   297e8:	0018      	movs	r0, r3
   297ea:	4bab      	ldr	r3, [pc, #684]	; (29a98 <_usart_set_config+0x2c4>)
   297ec:	4798      	blx	r3
   297ee:	0003      	movs	r3, r0
   297f0:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   297f2:	697b      	ldr	r3, [r7, #20]
   297f4:	3314      	adds	r3, #20
   297f6:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   297f8:	2300      	movs	r3, #0
   297fa:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   297fc:	2300      	movs	r3, #0
   297fe:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   29800:	230a      	movs	r3, #10
   29802:	18fb      	adds	r3, r7, r3
   29804:	2200      	movs	r2, #0
   29806:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   29808:	231f      	movs	r3, #31
   2980a:	18fb      	adds	r3, r7, r3
   2980c:	2200      	movs	r2, #0
   2980e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   29810:	231e      	movs	r3, #30
   29812:	18fb      	adds	r3, r7, r3
   29814:	2210      	movs	r2, #16
   29816:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   29818:	683b      	ldr	r3, [r7, #0]
   2981a:	8a1b      	ldrh	r3, [r3, #16]
   2981c:	2280      	movs	r2, #128	; 0x80
   2981e:	01d2      	lsls	r2, r2, #7
   29820:	4293      	cmp	r3, r2
   29822:	d01c      	beq.n	2985e <_usart_set_config+0x8a>
   29824:	2280      	movs	r2, #128	; 0x80
   29826:	01d2      	lsls	r2, r2, #7
   29828:	4293      	cmp	r3, r2
   2982a:	dc06      	bgt.n	2983a <_usart_set_config+0x66>
   2982c:	2b00      	cmp	r3, #0
   2982e:	d00d      	beq.n	2984c <_usart_set_config+0x78>
   29830:	2280      	movs	r2, #128	; 0x80
   29832:	0192      	lsls	r2, r2, #6
   29834:	4293      	cmp	r3, r2
   29836:	d024      	beq.n	29882 <_usart_set_config+0xae>
   29838:	e035      	b.n	298a6 <_usart_set_config+0xd2>
   2983a:	22c0      	movs	r2, #192	; 0xc0
   2983c:	01d2      	lsls	r2, r2, #7
   2983e:	4293      	cmp	r3, r2
   29840:	d028      	beq.n	29894 <_usart_set_config+0xc0>
   29842:	2280      	movs	r2, #128	; 0x80
   29844:	0212      	lsls	r2, r2, #8
   29846:	4293      	cmp	r3, r2
   29848:	d012      	beq.n	29870 <_usart_set_config+0x9c>
   2984a:	e02c      	b.n	298a6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2984c:	231f      	movs	r3, #31
   2984e:	18fb      	adds	r3, r7, r3
   29850:	2200      	movs	r2, #0
   29852:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   29854:	231e      	movs	r3, #30
   29856:	18fb      	adds	r3, r7, r3
   29858:	2210      	movs	r2, #16
   2985a:	701a      	strb	r2, [r3, #0]
			break;
   2985c:	e023      	b.n	298a6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2985e:	231f      	movs	r3, #31
   29860:	18fb      	adds	r3, r7, r3
   29862:	2200      	movs	r2, #0
   29864:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   29866:	231e      	movs	r3, #30
   29868:	18fb      	adds	r3, r7, r3
   2986a:	2208      	movs	r2, #8
   2986c:	701a      	strb	r2, [r3, #0]
			break;
   2986e:	e01a      	b.n	298a6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   29870:	231f      	movs	r3, #31
   29872:	18fb      	adds	r3, r7, r3
   29874:	2200      	movs	r2, #0
   29876:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   29878:	231e      	movs	r3, #30
   2987a:	18fb      	adds	r3, r7, r3
   2987c:	2203      	movs	r2, #3
   2987e:	701a      	strb	r2, [r3, #0]
			break;
   29880:	e011      	b.n	298a6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   29882:	231f      	movs	r3, #31
   29884:	18fb      	adds	r3, r7, r3
   29886:	2201      	movs	r2, #1
   29888:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2988a:	231e      	movs	r3, #30
   2988c:	18fb      	adds	r3, r7, r3
   2988e:	2210      	movs	r2, #16
   29890:	701a      	strb	r2, [r3, #0]
			break;
   29892:	e008      	b.n	298a6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   29894:	231f      	movs	r3, #31
   29896:	18fb      	adds	r3, r7, r3
   29898:	2201      	movs	r2, #1
   2989a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   2989c:	231e      	movs	r3, #30
   2989e:	18fb      	adds	r3, r7, r3
   298a0:	2208      	movs	r2, #8
   298a2:	701a      	strb	r2, [r3, #0]
			break;
   298a4:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   298a6:	683b      	ldr	r3, [r7, #0]
   298a8:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   298aa:	683b      	ldr	r3, [r7, #0]
   298ac:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   298ae:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   298b0:	683b      	ldr	r3, [r7, #0]
   298b2:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   298b4:	4313      	orrs	r3, r2
		config->sample_rate |
   298b6:	683a      	ldr	r2, [r7, #0]
   298b8:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   298ba:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   298bc:	683a      	ldr	r2, [r7, #0]
   298be:	7e12      	ldrb	r2, [r2, #24]
   298c0:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   298c2:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   298c4:	683a      	ldr	r2, [r7, #0]
   298c6:	2126      	movs	r1, #38	; 0x26
   298c8:	5c52      	ldrb	r2, [r2, r1]
   298ca:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   298cc:	4313      	orrs	r3, r2
   298ce:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   298d0:	231d      	movs	r3, #29
   298d2:	18fb      	adds	r3, r7, r3
   298d4:	2200      	movs	r2, #0
   298d6:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   298d8:	683b      	ldr	r3, [r7, #0]
   298da:	685b      	ldr	r3, [r3, #4]
   298dc:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   298de:	68fb      	ldr	r3, [r7, #12]
   298e0:	2b00      	cmp	r3, #0
   298e2:	d01e      	beq.n	29922 <_usart_set_config+0x14e>
   298e4:	2280      	movs	r2, #128	; 0x80
   298e6:	0552      	lsls	r2, r2, #21
   298e8:	4293      	cmp	r3, r2
   298ea:	d14f      	bne.n	2998c <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   298ec:	683b      	ldr	r3, [r7, #0]
   298ee:	2227      	movs	r2, #39	; 0x27
   298f0:	5c9b      	ldrb	r3, [r3, r2]
   298f2:	2201      	movs	r2, #1
   298f4:	4053      	eors	r3, r2
   298f6:	b2db      	uxtb	r3, r3
   298f8:	2b00      	cmp	r3, #0
   298fa:	d046      	beq.n	2998a <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   298fc:	683b      	ldr	r3, [r7, #0]
   298fe:	6a1d      	ldr	r5, [r3, #32]
   29900:	693b      	ldr	r3, [r7, #16]
   29902:	b2db      	uxtb	r3, r3
   29904:	0018      	movs	r0, r3
   29906:	4b65      	ldr	r3, [pc, #404]	; (29a9c <_usart_set_config+0x2c8>)
   29908:	4798      	blx	r3
   2990a:	0001      	movs	r1, r0
   2990c:	231d      	movs	r3, #29
   2990e:	18fc      	adds	r4, r7, r3
   29910:	230a      	movs	r3, #10
   29912:	18fb      	adds	r3, r7, r3
   29914:	001a      	movs	r2, r3
   29916:	0028      	movs	r0, r5
   29918:	4b61      	ldr	r3, [pc, #388]	; (29aa0 <_usart_set_config+0x2cc>)
   2991a:	4798      	blx	r3
   2991c:	0003      	movs	r3, r0
   2991e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   29920:	e033      	b.n	2998a <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   29922:	683b      	ldr	r3, [r7, #0]
   29924:	2227      	movs	r2, #39	; 0x27
   29926:	5c9b      	ldrb	r3, [r3, r2]
   29928:	2b00      	cmp	r3, #0
   2992a:	d014      	beq.n	29956 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   2992c:	683b      	ldr	r3, [r7, #0]
   2992e:	6a18      	ldr	r0, [r3, #32]
   29930:	683b      	ldr	r3, [r7, #0]
   29932:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   29934:	231d      	movs	r3, #29
   29936:	18fc      	adds	r4, r7, r3
   29938:	231f      	movs	r3, #31
   2993a:	18fb      	adds	r3, r7, r3
   2993c:	781d      	ldrb	r5, [r3, #0]
   2993e:	230a      	movs	r3, #10
   29940:	18fa      	adds	r2, r7, r3
   29942:	231e      	movs	r3, #30
   29944:	18fb      	adds	r3, r7, r3
   29946:	781b      	ldrb	r3, [r3, #0]
   29948:	9300      	str	r3, [sp, #0]
   2994a:	002b      	movs	r3, r5
   2994c:	4d55      	ldr	r5, [pc, #340]	; (29aa4 <_usart_set_config+0x2d0>)
   2994e:	47a8      	blx	r5
   29950:	0003      	movs	r3, r0
   29952:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   29954:	e01a      	b.n	2998c <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   29956:	683b      	ldr	r3, [r7, #0]
   29958:	6a1d      	ldr	r5, [r3, #32]
   2995a:	693b      	ldr	r3, [r7, #16]
   2995c:	b2db      	uxtb	r3, r3
   2995e:	0018      	movs	r0, r3
   29960:	4b4e      	ldr	r3, [pc, #312]	; (29a9c <_usart_set_config+0x2c8>)
   29962:	4798      	blx	r3
				status_code =
   29964:	231d      	movs	r3, #29
   29966:	18fc      	adds	r4, r7, r3
   29968:	231f      	movs	r3, #31
   2996a:	18fb      	adds	r3, r7, r3
   2996c:	7819      	ldrb	r1, [r3, #0]
   2996e:	230a      	movs	r3, #10
   29970:	18fa      	adds	r2, r7, r3
   29972:	231e      	movs	r3, #30
   29974:	18fb      	adds	r3, r7, r3
   29976:	781b      	ldrb	r3, [r3, #0]
   29978:	9300      	str	r3, [sp, #0]
   2997a:	000b      	movs	r3, r1
   2997c:	0001      	movs	r1, r0
   2997e:	0028      	movs	r0, r5
   29980:	4d48      	ldr	r5, [pc, #288]	; (29aa4 <_usart_set_config+0x2d0>)
   29982:	47a8      	blx	r5
   29984:	0003      	movs	r3, r0
   29986:	7023      	strb	r3, [r4, #0]
			break;
   29988:	e000      	b.n	2998c <_usart_set_config+0x1b8>
			break;
   2998a:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   2998c:	231d      	movs	r3, #29
   2998e:	18fb      	adds	r3, r7, r3
   29990:	781b      	ldrb	r3, [r3, #0]
   29992:	2b00      	cmp	r3, #0
   29994:	d003      	beq.n	2999e <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   29996:	231d      	movs	r3, #29
   29998:	18fb      	adds	r3, r7, r3
   2999a:	781b      	ldrb	r3, [r3, #0]
   2999c:	e077      	b.n	29a8e <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   2999e:	683b      	ldr	r3, [r7, #0]
   299a0:	7e5b      	ldrb	r3, [r3, #25]
   299a2:	2b00      	cmp	r3, #0
   299a4:	d003      	beq.n	299ae <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   299a6:	683b      	ldr	r3, [r7, #0]
   299a8:	7e9a      	ldrb	r2, [r3, #26]
   299aa:	69bb      	ldr	r3, [r7, #24]
   299ac:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   299ae:	687b      	ldr	r3, [r7, #4]
   299b0:	0018      	movs	r0, r3
   299b2:	4b3d      	ldr	r3, [pc, #244]	; (29aa8 <_usart_set_config+0x2d4>)
   299b4:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   299b6:	230a      	movs	r3, #10
   299b8:	18fb      	adds	r3, r7, r3
   299ba:	881a      	ldrh	r2, [r3, #0]
   299bc:	69bb      	ldr	r3, [r7, #24]
   299be:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   299c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   299c2:	68fb      	ldr	r3, [r7, #12]
   299c4:	4313      	orrs	r3, r2
   299c6:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   299c8:	683b      	ldr	r3, [r7, #0]
   299ca:	2227      	movs	r2, #39	; 0x27
   299cc:	5c9b      	ldrb	r3, [r3, r2]
   299ce:	2201      	movs	r2, #1
   299d0:	4053      	eors	r3, r2
   299d2:	b2db      	uxtb	r3, r3
   299d4:	2b00      	cmp	r3, #0
   299d6:	d003      	beq.n	299e0 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   299d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   299da:	2204      	movs	r2, #4
   299dc:	4313      	orrs	r3, r2
   299de:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   299e0:	683b      	ldr	r3, [r7, #0]
   299e2:	7e5b      	ldrb	r3, [r3, #25]
   299e4:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   299e6:	683b      	ldr	r3, [r7, #0]
   299e8:	7f1b      	ldrb	r3, [r3, #28]
   299ea:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   299ec:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   299ee:	683b      	ldr	r3, [r7, #0]
   299f0:	7f5b      	ldrb	r3, [r3, #29]
   299f2:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   299f4:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   299f6:	683b      	ldr	r3, [r7, #0]
   299f8:	2124      	movs	r1, #36	; 0x24
   299fa:	5c5b      	ldrb	r3, [r3, r1]
   299fc:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   299fe:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   29a00:	683b      	ldr	r3, [r7, #0]
   29a02:	2125      	movs	r1, #37	; 0x25
   29a04:	5c5b      	ldrb	r3, [r3, r1]
   29a06:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   29a08:	4313      	orrs	r3, r2
	ctrlb =  
   29a0a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   29a0c:	683b      	ldr	r3, [r7, #0]
   29a0e:	7a9b      	ldrb	r3, [r3, #10]
   29a10:	001a      	movs	r2, r3
   29a12:	6a3b      	ldr	r3, [r7, #32]
   29a14:	4313      	orrs	r3, r2
   29a16:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   29a18:	683b      	ldr	r3, [r7, #0]
   29a1a:	7adb      	ldrb	r3, [r3, #11]
   29a1c:	001a      	movs	r2, r3
   29a1e:	6a3b      	ldr	r3, [r7, #32]
   29a20:	4313      	orrs	r3, r2
   29a22:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   29a24:	683b      	ldr	r3, [r7, #0]
   29a26:	891b      	ldrh	r3, [r3, #8]
   29a28:	2bff      	cmp	r3, #255	; 0xff
   29a2a:	d00b      	beq.n	29a44 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   29a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   29a2e:	2280      	movs	r2, #128	; 0x80
   29a30:	0452      	lsls	r2, r2, #17
   29a32:	4313      	orrs	r3, r2
   29a34:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   29a36:	683b      	ldr	r3, [r7, #0]
   29a38:	891b      	ldrh	r3, [r3, #8]
   29a3a:	001a      	movs	r2, r3
   29a3c:	6a3b      	ldr	r3, [r7, #32]
   29a3e:	4313      	orrs	r3, r2
   29a40:	623b      	str	r3, [r7, #32]
   29a42:	e008      	b.n	29a56 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   29a44:	683b      	ldr	r3, [r7, #0]
   29a46:	7edb      	ldrb	r3, [r3, #27]
   29a48:	2b00      	cmp	r3, #0
   29a4a:	d004      	beq.n	29a56 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   29a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   29a4e:	2280      	movs	r2, #128	; 0x80
   29a50:	04d2      	lsls	r2, r2, #19
   29a52:	4313      	orrs	r3, r2
   29a54:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   29a56:	683b      	ldr	r3, [r7, #0]
   29a58:	222c      	movs	r2, #44	; 0x2c
   29a5a:	5c9b      	ldrb	r3, [r3, r2]
   29a5c:	2b00      	cmp	r3, #0
   29a5e:	d103      	bne.n	29a68 <_usart_set_config+0x294>
   29a60:	4b12      	ldr	r3, [pc, #72]	; (29aac <_usart_set_config+0x2d8>)
   29a62:	4798      	blx	r3
   29a64:	1e03      	subs	r3, r0, #0
   29a66:	d003      	beq.n	29a70 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   29a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   29a6a:	2280      	movs	r2, #128	; 0x80
   29a6c:	4313      	orrs	r3, r2
   29a6e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   29a70:	687b      	ldr	r3, [r7, #4]
   29a72:	0018      	movs	r0, r3
   29a74:	4b0c      	ldr	r3, [pc, #48]	; (29aa8 <_usart_set_config+0x2d4>)
   29a76:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   29a78:	69bb      	ldr	r3, [r7, #24]
   29a7a:	6a3a      	ldr	r2, [r7, #32]
   29a7c:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   29a7e:	687b      	ldr	r3, [r7, #4]
   29a80:	0018      	movs	r0, r3
   29a82:	4b09      	ldr	r3, [pc, #36]	; (29aa8 <_usart_set_config+0x2d4>)
   29a84:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   29a86:	69bb      	ldr	r3, [r7, #24]
   29a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   29a8a:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   29a8c:	2300      	movs	r3, #0
}
   29a8e:	0018      	movs	r0, r3
   29a90:	46bd      	mov	sp, r7
   29a92:	b00a      	add	sp, #40	; 0x28
   29a94:	bdb0      	pop	{r4, r5, r7, pc}
   29a96:	46c0      	nop			; (mov r8, r8)
   29a98:	0002857d 	.word	0x0002857d
   29a9c:	0002af31 	.word	0x0002af31
   29aa0:	000280f7 	.word	0x000280f7
   29aa4:	00028175 	.word	0x00028175
   29aa8:	000297b1 	.word	0x000297b1
   29aac:	00029771 	.word	0x00029771

00029ab0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   29ab0:	b590      	push	{r4, r7, lr}
   29ab2:	b093      	sub	sp, #76	; 0x4c
   29ab4:	af00      	add	r7, sp, #0
   29ab6:	60f8      	str	r0, [r7, #12]
   29ab8:	60b9      	str	r1, [r7, #8]
   29aba:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   29abc:	233b      	movs	r3, #59	; 0x3b
   29abe:	18fb      	adds	r3, r7, r3
   29ac0:	2200      	movs	r2, #0
   29ac2:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   29ac4:	68fb      	ldr	r3, [r7, #12]
   29ac6:	68ba      	ldr	r2, [r7, #8]
   29ac8:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   29aca:	68fb      	ldr	r3, [r7, #12]
   29acc:	681b      	ldr	r3, [r3, #0]
   29ace:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   29ad0:	68fb      	ldr	r3, [r7, #12]
   29ad2:	681b      	ldr	r3, [r3, #0]
   29ad4:	0018      	movs	r0, r3
   29ad6:	4b86      	ldr	r3, [pc, #536]	; (29cf0 <usart_init+0x240>)
   29ad8:	4798      	blx	r3
   29ada:	0003      	movs	r3, r0
   29adc:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   29ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   29ae0:	3302      	adds	r3, #2
   29ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   29ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   29ae6:	3314      	adds	r3, #20
   29ae8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   29aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29aec:	681b      	ldr	r3, [r3, #0]
   29aee:	2201      	movs	r2, #1
   29af0:	4013      	ands	r3, r2
   29af2:	d001      	beq.n	29af8 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   29af4:	2305      	movs	r3, #5
   29af6:	e0f6      	b.n	29ce6 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   29af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29afa:	681b      	ldr	r3, [r3, #0]
   29afc:	2202      	movs	r2, #2
   29afe:	4013      	ands	r3, r2
   29b00:	d001      	beq.n	29b06 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   29b02:	231c      	movs	r3, #28
   29b04:	e0ef      	b.n	29ce6 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   29b06:	2201      	movs	r2, #1
   29b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   29b0a:	409a      	lsls	r2, r3
   29b0c:	0013      	movs	r3, r2
   29b0e:	0019      	movs	r1, r3
   29b10:	2002      	movs	r0, #2
   29b12:	4b78      	ldr	r3, [pc, #480]	; (29cf4 <usart_init+0x244>)
   29b14:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   29b16:	2324      	movs	r3, #36	; 0x24
   29b18:	18fb      	adds	r3, r7, r3
   29b1a:	0018      	movs	r0, r3
   29b1c:	4b76      	ldr	r3, [pc, #472]	; (29cf8 <usart_init+0x248>)
   29b1e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   29b20:	687b      	ldr	r3, [r7, #4]
   29b22:	222d      	movs	r2, #45	; 0x2d
   29b24:	5c9a      	ldrb	r2, [r3, r2]
   29b26:	2324      	movs	r3, #36	; 0x24
   29b28:	18fb      	adds	r3, r7, r3
   29b2a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   29b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   29b2e:	b2db      	uxtb	r3, r3
   29b30:	2224      	movs	r2, #36	; 0x24
   29b32:	18ba      	adds	r2, r7, r2
   29b34:	0011      	movs	r1, r2
   29b36:	0018      	movs	r0, r3
   29b38:	4b70      	ldr	r3, [pc, #448]	; (29cfc <usart_init+0x24c>)
   29b3a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   29b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   29b3e:	b2db      	uxtb	r3, r3
   29b40:	0018      	movs	r0, r3
   29b42:	4b6f      	ldr	r3, [pc, #444]	; (29d00 <usart_init+0x250>)
   29b44:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   29b46:	687b      	ldr	r3, [r7, #4]
   29b48:	222d      	movs	r2, #45	; 0x2d
   29b4a:	5c9b      	ldrb	r3, [r3, r2]
   29b4c:	2100      	movs	r1, #0
   29b4e:	0018      	movs	r0, r3
   29b50:	4b6c      	ldr	r3, [pc, #432]	; (29d04 <usart_init+0x254>)
   29b52:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   29b54:	687b      	ldr	r3, [r7, #4]
   29b56:	7ada      	ldrb	r2, [r3, #11]
   29b58:	68fb      	ldr	r3, [r7, #12]
   29b5a:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   29b5c:	687b      	ldr	r3, [r7, #4]
   29b5e:	2224      	movs	r2, #36	; 0x24
   29b60:	5c9a      	ldrb	r2, [r3, r2]
   29b62:	68fb      	ldr	r3, [r7, #12]
   29b64:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   29b66:	687b      	ldr	r3, [r7, #4]
   29b68:	2225      	movs	r2, #37	; 0x25
   29b6a:	5c9a      	ldrb	r2, [r3, r2]
   29b6c:	68fb      	ldr	r3, [r7, #12]
   29b6e:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   29b70:	687b      	ldr	r3, [r7, #4]
   29b72:	7eda      	ldrb	r2, [r3, #27]
   29b74:	68fb      	ldr	r3, [r7, #12]
   29b76:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   29b78:	687b      	ldr	r3, [r7, #4]
   29b7a:	7f1a      	ldrb	r2, [r3, #28]
   29b7c:	68fb      	ldr	r3, [r7, #12]
   29b7e:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   29b80:	233b      	movs	r3, #59	; 0x3b
   29b82:	18fc      	adds	r4, r7, r3
   29b84:	687a      	ldr	r2, [r7, #4]
   29b86:	68fb      	ldr	r3, [r7, #12]
   29b88:	0011      	movs	r1, r2
   29b8a:	0018      	movs	r0, r3
   29b8c:	4b5e      	ldr	r3, [pc, #376]	; (29d08 <usart_init+0x258>)
   29b8e:	4798      	blx	r3
   29b90:	0003      	movs	r3, r0
   29b92:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   29b94:	233b      	movs	r3, #59	; 0x3b
   29b96:	18fb      	adds	r3, r7, r3
   29b98:	781b      	ldrb	r3, [r3, #0]
   29b9a:	2b00      	cmp	r3, #0
   29b9c:	d003      	beq.n	29ba6 <usart_init+0xf6>
		return status_code;
   29b9e:	233b      	movs	r3, #59	; 0x3b
   29ba0:	18fb      	adds	r3, r7, r3
   29ba2:	781b      	ldrb	r3, [r3, #0]
   29ba4:	e09f      	b.n	29ce6 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   29ba6:	2320      	movs	r3, #32
   29ba8:	18fb      	adds	r3, r7, r3
   29baa:	0018      	movs	r0, r3
   29bac:	4b57      	ldr	r3, [pc, #348]	; (29d0c <usart_init+0x25c>)
   29bae:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   29bb0:	2320      	movs	r3, #32
   29bb2:	18fb      	adds	r3, r7, r3
   29bb4:	2200      	movs	r2, #0
   29bb6:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   29bb8:	2320      	movs	r3, #32
   29bba:	18fb      	adds	r3, r7, r3
   29bbc:	2200      	movs	r2, #0
   29bbe:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   29bc0:	687b      	ldr	r3, [r7, #4]
   29bc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   29bc4:	2310      	movs	r3, #16
   29bc6:	18fb      	adds	r3, r7, r3
   29bc8:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   29bca:	687b      	ldr	r3, [r7, #4]
   29bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   29bce:	2310      	movs	r3, #16
   29bd0:	18fb      	adds	r3, r7, r3
   29bd2:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   29bd4:	687b      	ldr	r3, [r7, #4]
   29bd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   29bd8:	2310      	movs	r3, #16
   29bda:	18fb      	adds	r3, r7, r3
   29bdc:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   29bde:	687b      	ldr	r3, [r7, #4]
   29be0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   29be2:	2310      	movs	r3, #16
   29be4:	18fb      	adds	r3, r7, r3
   29be6:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   29be8:	2347      	movs	r3, #71	; 0x47
   29bea:	18fb      	adds	r3, r7, r3
   29bec:	2200      	movs	r2, #0
   29bee:	701a      	strb	r2, [r3, #0]
   29bf0:	e02c      	b.n	29c4c <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   29bf2:	2347      	movs	r3, #71	; 0x47
   29bf4:	18fb      	adds	r3, r7, r3
   29bf6:	781a      	ldrb	r2, [r3, #0]
   29bf8:	2310      	movs	r3, #16
   29bfa:	18fb      	adds	r3, r7, r3
   29bfc:	0092      	lsls	r2, r2, #2
   29bfe:	58d3      	ldr	r3, [r2, r3]
   29c00:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   29c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29c04:	2b00      	cmp	r3, #0
   29c06:	d109      	bne.n	29c1c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   29c08:	2347      	movs	r3, #71	; 0x47
   29c0a:	18fb      	adds	r3, r7, r3
   29c0c:	781a      	ldrb	r2, [r3, #0]
   29c0e:	68bb      	ldr	r3, [r7, #8]
   29c10:	0011      	movs	r1, r2
   29c12:	0018      	movs	r0, r3
   29c14:	4b3e      	ldr	r3, [pc, #248]	; (29d10 <usart_init+0x260>)
   29c16:	4798      	blx	r3
   29c18:	0003      	movs	r3, r0
   29c1a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   29c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29c1e:	3301      	adds	r3, #1
   29c20:	d00d      	beq.n	29c3e <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   29c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29c24:	b2da      	uxtb	r2, r3
   29c26:	2320      	movs	r3, #32
   29c28:	18fb      	adds	r3, r7, r3
   29c2a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   29c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29c2e:	0c1b      	lsrs	r3, r3, #16
   29c30:	b2db      	uxtb	r3, r3
   29c32:	2220      	movs	r2, #32
   29c34:	18ba      	adds	r2, r7, r2
   29c36:	0011      	movs	r1, r2
   29c38:	0018      	movs	r0, r3
   29c3a:	4b36      	ldr	r3, [pc, #216]	; (29d14 <usart_init+0x264>)
   29c3c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   29c3e:	2347      	movs	r3, #71	; 0x47
   29c40:	18fb      	adds	r3, r7, r3
   29c42:	781a      	ldrb	r2, [r3, #0]
   29c44:	2347      	movs	r3, #71	; 0x47
   29c46:	18fb      	adds	r3, r7, r3
   29c48:	3201      	adds	r2, #1
   29c4a:	701a      	strb	r2, [r3, #0]
   29c4c:	2347      	movs	r3, #71	; 0x47
   29c4e:	18fb      	adds	r3, r7, r3
   29c50:	781b      	ldrb	r3, [r3, #0]
   29c52:	2b03      	cmp	r3, #3
   29c54:	d9cd      	bls.n	29bf2 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   29c56:	2300      	movs	r3, #0
   29c58:	63fb      	str	r3, [r7, #60]	; 0x3c
   29c5a:	e00a      	b.n	29c72 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   29c5c:	68fa      	ldr	r2, [r7, #12]
   29c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29c60:	3302      	adds	r3, #2
   29c62:	009b      	lsls	r3, r3, #2
   29c64:	18d3      	adds	r3, r2, r3
   29c66:	3304      	adds	r3, #4
   29c68:	2200      	movs	r2, #0
   29c6a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   29c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29c6e:	3301      	adds	r3, #1
   29c70:	63fb      	str	r3, [r7, #60]	; 0x3c
   29c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29c74:	2b05      	cmp	r3, #5
   29c76:	d9f1      	bls.n	29c5c <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   29c78:	68fb      	ldr	r3, [r7, #12]
   29c7a:	2200      	movs	r2, #0
   29c7c:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   29c7e:	68fb      	ldr	r3, [r7, #12]
   29c80:	2200      	movs	r2, #0
   29c82:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   29c84:	68fb      	ldr	r3, [r7, #12]
   29c86:	2200      	movs	r2, #0
   29c88:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   29c8a:	68fb      	ldr	r3, [r7, #12]
   29c8c:	2200      	movs	r2, #0
   29c8e:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   29c90:	68fb      	ldr	r3, [r7, #12]
   29c92:	2230      	movs	r2, #48	; 0x30
   29c94:	2100      	movs	r1, #0
   29c96:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   29c98:	68fb      	ldr	r3, [r7, #12]
   29c9a:	2231      	movs	r2, #49	; 0x31
   29c9c:	2100      	movs	r1, #0
   29c9e:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   29ca0:	68fb      	ldr	r3, [r7, #12]
   29ca2:	2232      	movs	r2, #50	; 0x32
   29ca4:	2100      	movs	r1, #0
   29ca6:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   29ca8:	68fb      	ldr	r3, [r7, #12]
   29caa:	2233      	movs	r2, #51	; 0x33
   29cac:	2100      	movs	r1, #0
   29cae:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   29cb0:	68fb      	ldr	r3, [r7, #12]
   29cb2:	681b      	ldr	r3, [r3, #0]
   29cb4:	2227      	movs	r2, #39	; 0x27
   29cb6:	18bc      	adds	r4, r7, r2
   29cb8:	0018      	movs	r0, r3
   29cba:	4b0d      	ldr	r3, [pc, #52]	; (29cf0 <usart_init+0x240>)
   29cbc:	4798      	blx	r3
   29cbe:	0003      	movs	r3, r0
   29cc0:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   29cc2:	4a15      	ldr	r2, [pc, #84]	; (29d18 <usart_init+0x268>)
   29cc4:	2327      	movs	r3, #39	; 0x27
   29cc6:	18fb      	adds	r3, r7, r3
   29cc8:	781b      	ldrb	r3, [r3, #0]
   29cca:	0011      	movs	r1, r2
   29ccc:	0018      	movs	r0, r3
   29cce:	4b13      	ldr	r3, [pc, #76]	; (29d1c <usart_init+0x26c>)
   29cd0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   29cd2:	2327      	movs	r3, #39	; 0x27
   29cd4:	18fb      	adds	r3, r7, r3
   29cd6:	781a      	ldrb	r2, [r3, #0]
   29cd8:	4b11      	ldr	r3, [pc, #68]	; (29d20 <usart_init+0x270>)
   29cda:	0092      	lsls	r2, r2, #2
   29cdc:	68f9      	ldr	r1, [r7, #12]
   29cde:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   29ce0:	233b      	movs	r3, #59	; 0x3b
   29ce2:	18fb      	adds	r3, r7, r3
   29ce4:	781b      	ldrb	r3, [r3, #0]
}
   29ce6:	0018      	movs	r0, r3
   29ce8:	46bd      	mov	sp, r7
   29cea:	b013      	add	sp, #76	; 0x4c
   29cec:	bd90      	pop	{r4, r7, pc}
   29cee:	46c0      	nop			; (mov r8, r8)
   29cf0:	0002857d 	.word	0x0002857d
   29cf4:	000296ed 	.word	0x000296ed
   29cf8:	000296d5 	.word	0x000296d5
   29cfc:	0002ae0d 	.word	0x0002ae0d
   29d00:	0002ae51 	.word	0x0002ae51
   29d04:	00028335 	.word	0x00028335
   29d08:	000297d5 	.word	0x000297d5
   29d0c:	00029749 	.word	0x00029749
   29d10:	000283c1 	.word	0x000283c1
   29d14:	0002b16d 	.word	0x0002b16d
   29d18:	00029f8d 	.word	0x00029f8d
   29d1c:	000285e1 	.word	0x000285e1
   29d20:	20005c9c 	.word	0x20005c9c

00029d24 <system_interrupt_enter_critical_section>:
{
   29d24:	b580      	push	{r7, lr}
   29d26:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   29d28:	4b02      	ldr	r3, [pc, #8]	; (29d34 <system_interrupt_enter_critical_section+0x10>)
   29d2a:	4798      	blx	r3
}
   29d2c:	46c0      	nop			; (mov r8, r8)
   29d2e:	46bd      	mov	sp, r7
   29d30:	bd80      	pop	{r7, pc}
   29d32:	46c0      	nop			; (mov r8, r8)
   29d34:	00027179 	.word	0x00027179

00029d38 <system_interrupt_leave_critical_section>:
{
   29d38:	b580      	push	{r7, lr}
   29d3a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   29d3c:	4b02      	ldr	r3, [pc, #8]	; (29d48 <system_interrupt_leave_critical_section+0x10>)
   29d3e:	4798      	blx	r3
}
   29d40:	46c0      	nop			; (mov r8, r8)
   29d42:	46bd      	mov	sp, r7
   29d44:	bd80      	pop	{r7, pc}
   29d46:	46c0      	nop			; (mov r8, r8)
   29d48:	000271cd 	.word	0x000271cd

00029d4c <usart_is_syncing>:
{
   29d4c:	b580      	push	{r7, lr}
   29d4e:	b084      	sub	sp, #16
   29d50:	af00      	add	r7, sp, #0
   29d52:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   29d54:	687b      	ldr	r3, [r7, #4]
   29d56:	681b      	ldr	r3, [r3, #0]
   29d58:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   29d5a:	68fb      	ldr	r3, [r7, #12]
   29d5c:	69db      	ldr	r3, [r3, #28]
   29d5e:	1e5a      	subs	r2, r3, #1
   29d60:	4193      	sbcs	r3, r2
   29d62:	b2db      	uxtb	r3, r3
}
   29d64:	0018      	movs	r0, r3
   29d66:	46bd      	mov	sp, r7
   29d68:	b004      	add	sp, #16
   29d6a:	bd80      	pop	{r7, pc}

00029d6c <_usart_wait_for_sync>:
{
   29d6c:	b580      	push	{r7, lr}
   29d6e:	b082      	sub	sp, #8
   29d70:	af00      	add	r7, sp, #0
   29d72:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   29d74:	46c0      	nop			; (mov r8, r8)
   29d76:	687b      	ldr	r3, [r7, #4]
   29d78:	0018      	movs	r0, r3
   29d7a:	4b04      	ldr	r3, [pc, #16]	; (29d8c <_usart_wait_for_sync+0x20>)
   29d7c:	4798      	blx	r3
   29d7e:	1e03      	subs	r3, r0, #0
   29d80:	d1f9      	bne.n	29d76 <_usart_wait_for_sync+0xa>
}
   29d82:	46c0      	nop			; (mov r8, r8)
   29d84:	46bd      	mov	sp, r7
   29d86:	b002      	add	sp, #8
   29d88:	bd80      	pop	{r7, pc}
   29d8a:	46c0      	nop			; (mov r8, r8)
   29d8c:	00029d4d 	.word	0x00029d4d

00029d90 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   29d90:	b580      	push	{r7, lr}
   29d92:	b086      	sub	sp, #24
   29d94:	af00      	add	r7, sp, #0
   29d96:	60f8      	str	r0, [r7, #12]
   29d98:	60b9      	str	r1, [r7, #8]
   29d9a:	1dbb      	adds	r3, r7, #6
   29d9c:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   29d9e:	68fb      	ldr	r3, [r7, #12]
   29da0:	681b      	ldr	r3, [r3, #0]
   29da2:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   29da4:	4b0f      	ldr	r3, [pc, #60]	; (29de4 <_usart_write_buffer+0x54>)
   29da6:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   29da8:	68fb      	ldr	r3, [r7, #12]
   29daa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   29dac:	b29b      	uxth	r3, r3
   29dae:	2b00      	cmp	r3, #0
   29db0:	d003      	beq.n	29dba <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   29db2:	4b0d      	ldr	r3, [pc, #52]	; (29de8 <_usart_write_buffer+0x58>)
   29db4:	4798      	blx	r3
		return STATUS_BUSY;
   29db6:	2305      	movs	r3, #5
   29db8:	e010      	b.n	29ddc <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   29dba:	68fb      	ldr	r3, [r7, #12]
   29dbc:	1dba      	adds	r2, r7, #6
   29dbe:	8812      	ldrh	r2, [r2, #0]
   29dc0:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   29dc2:	4b09      	ldr	r3, [pc, #36]	; (29de8 <_usart_write_buffer+0x58>)
   29dc4:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   29dc6:	68fb      	ldr	r3, [r7, #12]
   29dc8:	68ba      	ldr	r2, [r7, #8]
   29dca:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   29dcc:	68fb      	ldr	r3, [r7, #12]
   29dce:	2233      	movs	r2, #51	; 0x33
   29dd0:	2105      	movs	r1, #5
   29dd2:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   29dd4:	697b      	ldr	r3, [r7, #20]
   29dd6:	2201      	movs	r2, #1
   29dd8:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   29dda:	2300      	movs	r3, #0
}
   29ddc:	0018      	movs	r0, r3
   29dde:	46bd      	mov	sp, r7
   29de0:	b006      	add	sp, #24
   29de2:	bd80      	pop	{r7, pc}
   29de4:	00029d25 	.word	0x00029d25
   29de8:	00029d39 	.word	0x00029d39

00029dec <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   29dec:	b580      	push	{r7, lr}
   29dee:	b086      	sub	sp, #24
   29df0:	af00      	add	r7, sp, #0
   29df2:	60f8      	str	r0, [r7, #12]
   29df4:	60b9      	str	r1, [r7, #8]
   29df6:	1dbb      	adds	r3, r7, #6
   29df8:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   29dfa:	68fb      	ldr	r3, [r7, #12]
   29dfc:	681b      	ldr	r3, [r3, #0]
   29dfe:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   29e00:	4b16      	ldr	r3, [pc, #88]	; (29e5c <_usart_read_buffer+0x70>)
   29e02:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   29e04:	68fb      	ldr	r3, [r7, #12]
   29e06:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   29e08:	b29b      	uxth	r3, r3
   29e0a:	2b00      	cmp	r3, #0
   29e0c:	d003      	beq.n	29e16 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   29e0e:	4b14      	ldr	r3, [pc, #80]	; (29e60 <_usart_read_buffer+0x74>)
   29e10:	4798      	blx	r3
		return STATUS_BUSY;
   29e12:	2305      	movs	r3, #5
   29e14:	e01e      	b.n	29e54 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   29e16:	68fb      	ldr	r3, [r7, #12]
   29e18:	1dba      	adds	r2, r7, #6
   29e1a:	8812      	ldrh	r2, [r2, #0]
   29e1c:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   29e1e:	4b10      	ldr	r3, [pc, #64]	; (29e60 <_usart_read_buffer+0x74>)
   29e20:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   29e22:	68fb      	ldr	r3, [r7, #12]
   29e24:	68ba      	ldr	r2, [r7, #8]
   29e26:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   29e28:	68fb      	ldr	r3, [r7, #12]
   29e2a:	2232      	movs	r2, #50	; 0x32
   29e2c:	2105      	movs	r1, #5
   29e2e:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   29e30:	697b      	ldr	r3, [r7, #20]
   29e32:	2204      	movs	r2, #4
   29e34:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   29e36:	68fb      	ldr	r3, [r7, #12]
   29e38:	7a1b      	ldrb	r3, [r3, #8]
   29e3a:	2b00      	cmp	r3, #0
   29e3c:	d002      	beq.n	29e44 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   29e3e:	697b      	ldr	r3, [r7, #20]
   29e40:	2220      	movs	r2, #32
   29e42:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   29e44:	68fb      	ldr	r3, [r7, #12]
   29e46:	7a5b      	ldrb	r3, [r3, #9]
   29e48:	2b00      	cmp	r3, #0
   29e4a:	d002      	beq.n	29e52 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   29e4c:	697b      	ldr	r3, [r7, #20]
   29e4e:	2208      	movs	r2, #8
   29e50:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   29e52:	2300      	movs	r3, #0
}
   29e54:	0018      	movs	r0, r3
   29e56:	46bd      	mov	sp, r7
   29e58:	b006      	add	sp, #24
   29e5a:	bd80      	pop	{r7, pc}
   29e5c:	00029d25 	.word	0x00029d25
   29e60:	00029d39 	.word	0x00029d39

00029e64 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   29e64:	b580      	push	{r7, lr}
   29e66:	b084      	sub	sp, #16
   29e68:	af00      	add	r7, sp, #0
   29e6a:	60f8      	str	r0, [r7, #12]
   29e6c:	60b9      	str	r1, [r7, #8]
   29e6e:	1dfb      	adds	r3, r7, #7
   29e70:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   29e72:	1dfb      	adds	r3, r7, #7
   29e74:	781b      	ldrb	r3, [r3, #0]
   29e76:	68fa      	ldr	r2, [r7, #12]
   29e78:	3302      	adds	r3, #2
   29e7a:	009b      	lsls	r3, r3, #2
   29e7c:	18d3      	adds	r3, r2, r3
   29e7e:	3304      	adds	r3, #4
   29e80:	68ba      	ldr	r2, [r7, #8]
   29e82:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   29e84:	68fb      	ldr	r3, [r7, #12]
   29e86:	2230      	movs	r2, #48	; 0x30
   29e88:	5c9b      	ldrb	r3, [r3, r2]
   29e8a:	b25a      	sxtb	r2, r3
   29e8c:	1dfb      	adds	r3, r7, #7
   29e8e:	781b      	ldrb	r3, [r3, #0]
   29e90:	2101      	movs	r1, #1
   29e92:	4099      	lsls	r1, r3
   29e94:	000b      	movs	r3, r1
   29e96:	b25b      	sxtb	r3, r3
   29e98:	4313      	orrs	r3, r2
   29e9a:	b25b      	sxtb	r3, r3
   29e9c:	b2d9      	uxtb	r1, r3
   29e9e:	68fb      	ldr	r3, [r7, #12]
   29ea0:	2230      	movs	r2, #48	; 0x30
   29ea2:	5499      	strb	r1, [r3, r2]
}
   29ea4:	46c0      	nop			; (mov r8, r8)
   29ea6:	46bd      	mov	sp, r7
   29ea8:	b004      	add	sp, #16
   29eaa:	bd80      	pop	{r7, pc}

00029eac <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   29eac:	b580      	push	{r7, lr}
   29eae:	b084      	sub	sp, #16
   29eb0:	af00      	add	r7, sp, #0
   29eb2:	60f8      	str	r0, [r7, #12]
   29eb4:	60b9      	str	r1, [r7, #8]
   29eb6:	1dbb      	adds	r3, r7, #6
   29eb8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   29eba:	1dbb      	adds	r3, r7, #6
   29ebc:	881b      	ldrh	r3, [r3, #0]
   29ebe:	2b00      	cmp	r3, #0
   29ec0:	d101      	bne.n	29ec6 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   29ec2:	2317      	movs	r3, #23
   29ec4:	e010      	b.n	29ee8 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   29ec6:	68fb      	ldr	r3, [r7, #12]
   29ec8:	79db      	ldrb	r3, [r3, #7]
   29eca:	2201      	movs	r2, #1
   29ecc:	4053      	eors	r3, r2
   29ece:	b2db      	uxtb	r3, r3
   29ed0:	2b00      	cmp	r3, #0
   29ed2:	d001      	beq.n	29ed8 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   29ed4:	231c      	movs	r3, #28
   29ed6:	e007      	b.n	29ee8 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   29ed8:	1dbb      	adds	r3, r7, #6
   29eda:	881a      	ldrh	r2, [r3, #0]
   29edc:	68b9      	ldr	r1, [r7, #8]
   29ede:	68fb      	ldr	r3, [r7, #12]
   29ee0:	0018      	movs	r0, r3
   29ee2:	4b03      	ldr	r3, [pc, #12]	; (29ef0 <usart_write_buffer_job+0x44>)
   29ee4:	4798      	blx	r3
   29ee6:	0003      	movs	r3, r0
}
   29ee8:	0018      	movs	r0, r3
   29eea:	46bd      	mov	sp, r7
   29eec:	b004      	add	sp, #16
   29eee:	bd80      	pop	{r7, pc}
   29ef0:	00029d91 	.word	0x00029d91

00029ef4 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   29ef4:	b580      	push	{r7, lr}
   29ef6:	b084      	sub	sp, #16
   29ef8:	af00      	add	r7, sp, #0
   29efa:	60f8      	str	r0, [r7, #12]
   29efc:	60b9      	str	r1, [r7, #8]
   29efe:	1dbb      	adds	r3, r7, #6
   29f00:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   29f02:	1dbb      	adds	r3, r7, #6
   29f04:	881b      	ldrh	r3, [r3, #0]
   29f06:	2b00      	cmp	r3, #0
   29f08:	d101      	bne.n	29f0e <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   29f0a:	2317      	movs	r3, #23
   29f0c:	e010      	b.n	29f30 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   29f0e:	68fb      	ldr	r3, [r7, #12]
   29f10:	799b      	ldrb	r3, [r3, #6]
   29f12:	2201      	movs	r2, #1
   29f14:	4053      	eors	r3, r2
   29f16:	b2db      	uxtb	r3, r3
   29f18:	2b00      	cmp	r3, #0
   29f1a:	d001      	beq.n	29f20 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   29f1c:	231c      	movs	r3, #28
   29f1e:	e007      	b.n	29f30 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   29f20:	1dbb      	adds	r3, r7, #6
   29f22:	881a      	ldrh	r2, [r3, #0]
   29f24:	68b9      	ldr	r1, [r7, #8]
   29f26:	68fb      	ldr	r3, [r7, #12]
   29f28:	0018      	movs	r0, r3
   29f2a:	4b03      	ldr	r3, [pc, #12]	; (29f38 <usart_read_buffer_job+0x44>)
   29f2c:	4798      	blx	r3
   29f2e:	0003      	movs	r3, r0
}
   29f30:	0018      	movs	r0, r3
   29f32:	46bd      	mov	sp, r7
   29f34:	b004      	add	sp, #16
   29f36:	bd80      	pop	{r7, pc}
   29f38:	00029ded 	.word	0x00029ded

00029f3c <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   29f3c:	b580      	push	{r7, lr}
   29f3e:	b084      	sub	sp, #16
   29f40:	af00      	add	r7, sp, #0
   29f42:	6078      	str	r0, [r7, #4]
   29f44:	000a      	movs	r2, r1
   29f46:	1cfb      	adds	r3, r7, #3
   29f48:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   29f4a:	1cfb      	adds	r3, r7, #3
   29f4c:	781b      	ldrb	r3, [r3, #0]
   29f4e:	2b00      	cmp	r3, #0
   29f50:	d002      	beq.n	29f58 <usart_get_job_status+0x1c>
   29f52:	2b01      	cmp	r3, #1
   29f54:	d007      	beq.n	29f66 <usart_get_job_status+0x2a>
   29f56:	e00d      	b.n	29f74 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   29f58:	230f      	movs	r3, #15
   29f5a:	18fb      	adds	r3, r7, r3
   29f5c:	687a      	ldr	r2, [r7, #4]
   29f5e:	2132      	movs	r1, #50	; 0x32
   29f60:	5c52      	ldrb	r2, [r2, r1]
   29f62:	701a      	strb	r2, [r3, #0]
			break;
   29f64:	e00b      	b.n	29f7e <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   29f66:	230f      	movs	r3, #15
   29f68:	18fb      	adds	r3, r7, r3
   29f6a:	687a      	ldr	r2, [r7, #4]
   29f6c:	2133      	movs	r1, #51	; 0x33
   29f6e:	5c52      	ldrb	r2, [r2, r1]
   29f70:	701a      	strb	r2, [r3, #0]
			break;
   29f72:	e004      	b.n	29f7e <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   29f74:	230f      	movs	r3, #15
   29f76:	18fb      	adds	r3, r7, r3
   29f78:	2217      	movs	r2, #23
   29f7a:	701a      	strb	r2, [r3, #0]
			break;
   29f7c:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   29f7e:	230f      	movs	r3, #15
   29f80:	18fb      	adds	r3, r7, r3
   29f82:	781b      	ldrb	r3, [r3, #0]
}
   29f84:	0018      	movs	r0, r3
   29f86:	46bd      	mov	sp, r7
   29f88:	b004      	add	sp, #16
   29f8a:	bd80      	pop	{r7, pc}

00029f8c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   29f8c:	b580      	push	{r7, lr}
   29f8e:	b088      	sub	sp, #32
   29f90:	af00      	add	r7, sp, #0
   29f92:	0002      	movs	r2, r0
   29f94:	1dfb      	adds	r3, r7, #7
   29f96:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   29f98:	1dfb      	adds	r3, r7, #7
   29f9a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   29f9c:	4ba3      	ldr	r3, [pc, #652]	; (2a22c <_usart_interrupt_handler+0x2a0>)
   29f9e:	0092      	lsls	r2, r2, #2
   29fa0:	58d3      	ldr	r3, [r2, r3]
   29fa2:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   29fa4:	69bb      	ldr	r3, [r7, #24]
   29fa6:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   29fa8:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   29faa:	69bb      	ldr	r3, [r7, #24]
   29fac:	0018      	movs	r0, r3
   29fae:	4ba0      	ldr	r3, [pc, #640]	; (2a230 <_usart_interrupt_handler+0x2a4>)
   29fb0:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   29fb2:	697b      	ldr	r3, [r7, #20]
   29fb4:	7e1b      	ldrb	r3, [r3, #24]
   29fb6:	b2da      	uxtb	r2, r3
   29fb8:	2312      	movs	r3, #18
   29fba:	18fb      	adds	r3, r7, r3
   29fbc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   29fbe:	697b      	ldr	r3, [r7, #20]
   29fc0:	7d9b      	ldrb	r3, [r3, #22]
   29fc2:	b2db      	uxtb	r3, r3
   29fc4:	b29a      	uxth	r2, r3
   29fc6:	2312      	movs	r3, #18
   29fc8:	18fb      	adds	r3, r7, r3
   29fca:	2112      	movs	r1, #18
   29fcc:	1879      	adds	r1, r7, r1
   29fce:	8809      	ldrh	r1, [r1, #0]
   29fd0:	400a      	ands	r2, r1
   29fd2:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   29fd4:	69bb      	ldr	r3, [r7, #24]
   29fd6:	2230      	movs	r2, #48	; 0x30
   29fd8:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   29fda:	69ba      	ldr	r2, [r7, #24]
   29fdc:	2131      	movs	r1, #49	; 0x31
   29fde:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   29fe0:	4013      	ands	r3, r2
   29fe2:	b2da      	uxtb	r2, r3
   29fe4:	2310      	movs	r3, #16
   29fe6:	18fb      	adds	r3, r7, r3
   29fe8:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   29fea:	2312      	movs	r3, #18
   29fec:	18fb      	adds	r3, r7, r3
   29fee:	881b      	ldrh	r3, [r3, #0]
   29ff0:	2201      	movs	r2, #1
   29ff2:	4013      	ands	r3, r2
   29ff4:	d044      	beq.n	2a080 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   29ff6:	69bb      	ldr	r3, [r7, #24]
   29ff8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   29ffa:	b29b      	uxth	r3, r3
   29ffc:	2b00      	cmp	r3, #0
   29ffe:	d03c      	beq.n	2a07a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   2a000:	69bb      	ldr	r3, [r7, #24]
   2a002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2a004:	781b      	ldrb	r3, [r3, #0]
   2a006:	b2da      	uxtb	r2, r3
   2a008:	231c      	movs	r3, #28
   2a00a:	18fb      	adds	r3, r7, r3
   2a00c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   2a00e:	69bb      	ldr	r3, [r7, #24]
   2a010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2a012:	1c5a      	adds	r2, r3, #1
   2a014:	69bb      	ldr	r3, [r7, #24]
   2a016:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   2a018:	69bb      	ldr	r3, [r7, #24]
   2a01a:	795b      	ldrb	r3, [r3, #5]
   2a01c:	2b01      	cmp	r3, #1
   2a01e:	d113      	bne.n	2a048 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   2a020:	69bb      	ldr	r3, [r7, #24]
   2a022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2a024:	781b      	ldrb	r3, [r3, #0]
   2a026:	b2db      	uxtb	r3, r3
   2a028:	021b      	lsls	r3, r3, #8
   2a02a:	b21a      	sxth	r2, r3
   2a02c:	231c      	movs	r3, #28
   2a02e:	18fb      	adds	r3, r7, r3
   2a030:	2100      	movs	r1, #0
   2a032:	5e5b      	ldrsh	r3, [r3, r1]
   2a034:	4313      	orrs	r3, r2
   2a036:	b21a      	sxth	r2, r3
   2a038:	231c      	movs	r3, #28
   2a03a:	18fb      	adds	r3, r7, r3
   2a03c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   2a03e:	69bb      	ldr	r3, [r7, #24]
   2a040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2a042:	1c5a      	adds	r2, r3, #1
   2a044:	69bb      	ldr	r3, [r7, #24]
   2a046:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   2a048:	231c      	movs	r3, #28
   2a04a:	18fb      	adds	r3, r7, r3
   2a04c:	881b      	ldrh	r3, [r3, #0]
   2a04e:	05db      	lsls	r3, r3, #23
   2a050:	0ddb      	lsrs	r3, r3, #23
   2a052:	b29a      	uxth	r2, r3
   2a054:	697b      	ldr	r3, [r7, #20]
   2a056:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   2a058:	69bb      	ldr	r3, [r7, #24]
   2a05a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2a05c:	b29b      	uxth	r3, r3
   2a05e:	3b01      	subs	r3, #1
   2a060:	b29b      	uxth	r3, r3
   2a062:	69ba      	ldr	r2, [r7, #24]
   2a064:	1c19      	adds	r1, r3, #0
   2a066:	85d1      	strh	r1, [r2, #46]	; 0x2e
   2a068:	2b00      	cmp	r3, #0
   2a06a:	d109      	bne.n	2a080 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   2a06c:	697b      	ldr	r3, [r7, #20]
   2a06e:	2201      	movs	r2, #1
   2a070:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   2a072:	697b      	ldr	r3, [r7, #20]
   2a074:	2202      	movs	r2, #2
   2a076:	759a      	strb	r2, [r3, #22]
   2a078:	e002      	b.n	2a080 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   2a07a:	697b      	ldr	r3, [r7, #20]
   2a07c:	2201      	movs	r2, #1
   2a07e:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   2a080:	2312      	movs	r3, #18
   2a082:	18fb      	adds	r3, r7, r3
   2a084:	881b      	ldrh	r3, [r3, #0]
   2a086:	2202      	movs	r2, #2
   2a088:	4013      	ands	r3, r2
   2a08a:	d011      	beq.n	2a0b0 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   2a08c:	697b      	ldr	r3, [r7, #20]
   2a08e:	2202      	movs	r2, #2
   2a090:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   2a092:	69bb      	ldr	r3, [r7, #24]
   2a094:	2233      	movs	r2, #51	; 0x33
   2a096:	2100      	movs	r1, #0
   2a098:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   2a09a:	2310      	movs	r3, #16
   2a09c:	18fb      	adds	r3, r7, r3
   2a09e:	881b      	ldrh	r3, [r3, #0]
   2a0a0:	2201      	movs	r2, #1
   2a0a2:	4013      	ands	r3, r2
   2a0a4:	d004      	beq.n	2a0b0 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   2a0a6:	69bb      	ldr	r3, [r7, #24]
   2a0a8:	68db      	ldr	r3, [r3, #12]
   2a0aa:	69ba      	ldr	r2, [r7, #24]
   2a0ac:	0010      	movs	r0, r2
   2a0ae:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   2a0b0:	2312      	movs	r3, #18
   2a0b2:	18fb      	adds	r3, r7, r3
   2a0b4:	881b      	ldrh	r3, [r3, #0]
   2a0b6:	2204      	movs	r2, #4
   2a0b8:	4013      	ands	r3, r2
   2a0ba:	d100      	bne.n	2a0be <_usart_interrupt_handler+0x132>
   2a0bc:	e0bd      	b.n	2a23a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   2a0be:	69bb      	ldr	r3, [r7, #24]
   2a0c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   2a0c2:	b29b      	uxth	r3, r3
   2a0c4:	2b00      	cmp	r3, #0
   2a0c6:	d100      	bne.n	2a0ca <_usart_interrupt_handler+0x13e>
   2a0c8:	e0b4      	b.n	2a234 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   2a0ca:	697b      	ldr	r3, [r7, #20]
   2a0cc:	8b5b      	ldrh	r3, [r3, #26]
   2a0ce:	b29b      	uxth	r3, r3
   2a0d0:	b2da      	uxtb	r2, r3
   2a0d2:	231f      	movs	r3, #31
   2a0d4:	18fb      	adds	r3, r7, r3
   2a0d6:	213f      	movs	r1, #63	; 0x3f
   2a0d8:	400a      	ands	r2, r1
   2a0da:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   2a0dc:	231f      	movs	r3, #31
   2a0de:	18fb      	adds	r3, r7, r3
   2a0e0:	781b      	ldrb	r3, [r3, #0]
   2a0e2:	2208      	movs	r2, #8
   2a0e4:	4013      	ands	r3, r2
   2a0e6:	d007      	beq.n	2a0f8 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   2a0e8:	231f      	movs	r3, #31
   2a0ea:	18fb      	adds	r3, r7, r3
   2a0ec:	221f      	movs	r2, #31
   2a0ee:	18ba      	adds	r2, r7, r2
   2a0f0:	7812      	ldrb	r2, [r2, #0]
   2a0f2:	2108      	movs	r1, #8
   2a0f4:	438a      	bics	r2, r1
   2a0f6:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   2a0f8:	231f      	movs	r3, #31
   2a0fa:	18fb      	adds	r3, r7, r3
   2a0fc:	781b      	ldrb	r3, [r3, #0]
   2a0fe:	2b00      	cmp	r3, #0
   2a100:	d050      	beq.n	2a1a4 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   2a102:	231f      	movs	r3, #31
   2a104:	18fb      	adds	r3, r7, r3
   2a106:	781b      	ldrb	r3, [r3, #0]
   2a108:	2202      	movs	r2, #2
   2a10a:	4013      	ands	r3, r2
   2a10c:	d007      	beq.n	2a11e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   2a10e:	69bb      	ldr	r3, [r7, #24]
   2a110:	2232      	movs	r2, #50	; 0x32
   2a112:	211a      	movs	r1, #26
   2a114:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   2a116:	697b      	ldr	r3, [r7, #20]
   2a118:	2202      	movs	r2, #2
   2a11a:	835a      	strh	r2, [r3, #26]
   2a11c:	e036      	b.n	2a18c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   2a11e:	231f      	movs	r3, #31
   2a120:	18fb      	adds	r3, r7, r3
   2a122:	781b      	ldrb	r3, [r3, #0]
   2a124:	2204      	movs	r2, #4
   2a126:	4013      	ands	r3, r2
   2a128:	d007      	beq.n	2a13a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   2a12a:	69bb      	ldr	r3, [r7, #24]
   2a12c:	2232      	movs	r2, #50	; 0x32
   2a12e:	211e      	movs	r1, #30
   2a130:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   2a132:	697b      	ldr	r3, [r7, #20]
   2a134:	2204      	movs	r2, #4
   2a136:	835a      	strh	r2, [r3, #26]
   2a138:	e028      	b.n	2a18c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   2a13a:	231f      	movs	r3, #31
   2a13c:	18fb      	adds	r3, r7, r3
   2a13e:	781b      	ldrb	r3, [r3, #0]
   2a140:	2201      	movs	r2, #1
   2a142:	4013      	ands	r3, r2
   2a144:	d007      	beq.n	2a156 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   2a146:	69bb      	ldr	r3, [r7, #24]
   2a148:	2232      	movs	r2, #50	; 0x32
   2a14a:	2113      	movs	r1, #19
   2a14c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   2a14e:	697b      	ldr	r3, [r7, #20]
   2a150:	2201      	movs	r2, #1
   2a152:	835a      	strh	r2, [r3, #26]
   2a154:	e01a      	b.n	2a18c <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   2a156:	231f      	movs	r3, #31
   2a158:	18fb      	adds	r3, r7, r3
   2a15a:	781b      	ldrb	r3, [r3, #0]
   2a15c:	2210      	movs	r2, #16
   2a15e:	4013      	ands	r3, r2
   2a160:	d007      	beq.n	2a172 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   2a162:	69bb      	ldr	r3, [r7, #24]
   2a164:	2232      	movs	r2, #50	; 0x32
   2a166:	2142      	movs	r1, #66	; 0x42
   2a168:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   2a16a:	697b      	ldr	r3, [r7, #20]
   2a16c:	2210      	movs	r2, #16
   2a16e:	835a      	strh	r2, [r3, #26]
   2a170:	e00c      	b.n	2a18c <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   2a172:	231f      	movs	r3, #31
   2a174:	18fb      	adds	r3, r7, r3
   2a176:	781b      	ldrb	r3, [r3, #0]
   2a178:	2220      	movs	r2, #32
   2a17a:	4013      	ands	r3, r2
   2a17c:	d006      	beq.n	2a18c <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   2a17e:	69bb      	ldr	r3, [r7, #24]
   2a180:	2232      	movs	r2, #50	; 0x32
   2a182:	2141      	movs	r1, #65	; 0x41
   2a184:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   2a186:	697b      	ldr	r3, [r7, #20]
   2a188:	2220      	movs	r2, #32
   2a18a:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   2a18c:	2310      	movs	r3, #16
   2a18e:	18fb      	adds	r3, r7, r3
   2a190:	881b      	ldrh	r3, [r3, #0]
   2a192:	2204      	movs	r2, #4
   2a194:	4013      	ands	r3, r2
				if (callback_status
   2a196:	d050      	beq.n	2a23a <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   2a198:	69bb      	ldr	r3, [r7, #24]
   2a19a:	695b      	ldr	r3, [r3, #20]
   2a19c:	69ba      	ldr	r2, [r7, #24]
   2a19e:	0010      	movs	r0, r2
   2a1a0:	4798      	blx	r3
   2a1a2:	e04a      	b.n	2a23a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   2a1a4:	697b      	ldr	r3, [r7, #20]
   2a1a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   2a1a8:	b29a      	uxth	r2, r3
   2a1aa:	230e      	movs	r3, #14
   2a1ac:	18fb      	adds	r3, r7, r3
   2a1ae:	05d2      	lsls	r2, r2, #23
   2a1b0:	0dd2      	lsrs	r2, r2, #23
   2a1b2:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   2a1b4:	69bb      	ldr	r3, [r7, #24]
   2a1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2a1b8:	220e      	movs	r2, #14
   2a1ba:	18ba      	adds	r2, r7, r2
   2a1bc:	8812      	ldrh	r2, [r2, #0]
   2a1be:	b2d2      	uxtb	r2, r2
   2a1c0:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   2a1c2:	69bb      	ldr	r3, [r7, #24]
   2a1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2a1c6:	1c5a      	adds	r2, r3, #1
   2a1c8:	69bb      	ldr	r3, [r7, #24]
   2a1ca:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   2a1cc:	69bb      	ldr	r3, [r7, #24]
   2a1ce:	795b      	ldrb	r3, [r3, #5]
   2a1d0:	2b01      	cmp	r3, #1
   2a1d2:	d10d      	bne.n	2a1f0 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   2a1d4:	69bb      	ldr	r3, [r7, #24]
   2a1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2a1d8:	220e      	movs	r2, #14
   2a1da:	18ba      	adds	r2, r7, r2
   2a1dc:	8812      	ldrh	r2, [r2, #0]
   2a1de:	0a12      	lsrs	r2, r2, #8
   2a1e0:	b292      	uxth	r2, r2
   2a1e2:	b2d2      	uxtb	r2, r2
   2a1e4:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   2a1e6:	69bb      	ldr	r3, [r7, #24]
   2a1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2a1ea:	1c5a      	adds	r2, r3, #1
   2a1ec:	69bb      	ldr	r3, [r7, #24]
   2a1ee:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   2a1f0:	69bb      	ldr	r3, [r7, #24]
   2a1f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   2a1f4:	b29b      	uxth	r3, r3
   2a1f6:	3b01      	subs	r3, #1
   2a1f8:	b29b      	uxth	r3, r3
   2a1fa:	69ba      	ldr	r2, [r7, #24]
   2a1fc:	1c19      	adds	r1, r3, #0
   2a1fe:	8591      	strh	r1, [r2, #44]	; 0x2c
   2a200:	2b00      	cmp	r3, #0
   2a202:	d11a      	bne.n	2a23a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   2a204:	697b      	ldr	r3, [r7, #20]
   2a206:	2204      	movs	r2, #4
   2a208:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   2a20a:	69bb      	ldr	r3, [r7, #24]
   2a20c:	2232      	movs	r2, #50	; 0x32
   2a20e:	2100      	movs	r1, #0
   2a210:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   2a212:	2310      	movs	r3, #16
   2a214:	18fb      	adds	r3, r7, r3
   2a216:	881b      	ldrh	r3, [r3, #0]
   2a218:	2202      	movs	r2, #2
   2a21a:	4013      	ands	r3, r2
					if (callback_status
   2a21c:	d00d      	beq.n	2a23a <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   2a21e:	69bb      	ldr	r3, [r7, #24]
   2a220:	691b      	ldr	r3, [r3, #16]
   2a222:	69ba      	ldr	r2, [r7, #24]
   2a224:	0010      	movs	r0, r2
   2a226:	4798      	blx	r3
   2a228:	e007      	b.n	2a23a <_usart_interrupt_handler+0x2ae>
   2a22a:	46c0      	nop			; (mov r8, r8)
   2a22c:	20005c9c 	.word	0x20005c9c
   2a230:	00029d6d 	.word	0x00029d6d
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   2a234:	697b      	ldr	r3, [r7, #20]
   2a236:	2204      	movs	r2, #4
   2a238:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   2a23a:	2312      	movs	r3, #18
   2a23c:	18fb      	adds	r3, r7, r3
   2a23e:	881b      	ldrh	r3, [r3, #0]
   2a240:	2210      	movs	r2, #16
   2a242:	4013      	ands	r3, r2
   2a244:	d010      	beq.n	2a268 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   2a246:	697b      	ldr	r3, [r7, #20]
   2a248:	2210      	movs	r2, #16
   2a24a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   2a24c:	697b      	ldr	r3, [r7, #20]
   2a24e:	2210      	movs	r2, #16
   2a250:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   2a252:	2310      	movs	r3, #16
   2a254:	18fb      	adds	r3, r7, r3
   2a256:	881b      	ldrh	r3, [r3, #0]
   2a258:	2210      	movs	r2, #16
   2a25a:	4013      	ands	r3, r2
   2a25c:	d004      	beq.n	2a268 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   2a25e:	69bb      	ldr	r3, [r7, #24]
   2a260:	69db      	ldr	r3, [r3, #28]
   2a262:	69ba      	ldr	r2, [r7, #24]
   2a264:	0010      	movs	r0, r2
   2a266:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   2a268:	2312      	movs	r3, #18
   2a26a:	18fb      	adds	r3, r7, r3
   2a26c:	881b      	ldrh	r3, [r3, #0]
   2a26e:	2220      	movs	r2, #32
   2a270:	4013      	ands	r3, r2
   2a272:	d010      	beq.n	2a296 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   2a274:	697b      	ldr	r3, [r7, #20]
   2a276:	2220      	movs	r2, #32
   2a278:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   2a27a:	697b      	ldr	r3, [r7, #20]
   2a27c:	2220      	movs	r2, #32
   2a27e:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   2a280:	2310      	movs	r3, #16
   2a282:	18fb      	adds	r3, r7, r3
   2a284:	881b      	ldrh	r3, [r3, #0]
   2a286:	2208      	movs	r2, #8
   2a288:	4013      	ands	r3, r2
   2a28a:	d004      	beq.n	2a296 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   2a28c:	69bb      	ldr	r3, [r7, #24]
   2a28e:	699b      	ldr	r3, [r3, #24]
   2a290:	69ba      	ldr	r2, [r7, #24]
   2a292:	0010      	movs	r0, r2
   2a294:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   2a296:	2312      	movs	r3, #18
   2a298:	18fb      	adds	r3, r7, r3
   2a29a:	881b      	ldrh	r3, [r3, #0]
   2a29c:	2208      	movs	r2, #8
   2a29e:	4013      	ands	r3, r2
   2a2a0:	d010      	beq.n	2a2c4 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   2a2a2:	697b      	ldr	r3, [r7, #20]
   2a2a4:	2208      	movs	r2, #8
   2a2a6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   2a2a8:	697b      	ldr	r3, [r7, #20]
   2a2aa:	2208      	movs	r2, #8
   2a2ac:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   2a2ae:	2310      	movs	r3, #16
   2a2b0:	18fb      	adds	r3, r7, r3
   2a2b2:	881b      	ldrh	r3, [r3, #0]
   2a2b4:	2220      	movs	r2, #32
   2a2b6:	4013      	ands	r3, r2
   2a2b8:	d004      	beq.n	2a2c4 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   2a2ba:	69bb      	ldr	r3, [r7, #24]
   2a2bc:	6a1b      	ldr	r3, [r3, #32]
   2a2be:	69ba      	ldr	r2, [r7, #24]
   2a2c0:	0010      	movs	r0, r2
   2a2c2:	4798      	blx	r3
		}
	}
#endif
}
   2a2c4:	46c0      	nop			; (mov r8, r8)
   2a2c6:	46bd      	mov	sp, r7
   2a2c8:	b008      	add	sp, #32
   2a2ca:	bd80      	pop	{r7, pc}

0002a2cc <system_gclk_gen_get_config_defaults>:
{
   2a2cc:	b580      	push	{r7, lr}
   2a2ce:	b082      	sub	sp, #8
   2a2d0:	af00      	add	r7, sp, #0
   2a2d2:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   2a2d4:	687b      	ldr	r3, [r7, #4]
   2a2d6:	2201      	movs	r2, #1
   2a2d8:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   2a2da:	687b      	ldr	r3, [r7, #4]
   2a2dc:	2200      	movs	r2, #0
   2a2de:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   2a2e0:	687b      	ldr	r3, [r7, #4]
   2a2e2:	2206      	movs	r2, #6
   2a2e4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   2a2e6:	687b      	ldr	r3, [r7, #4]
   2a2e8:	2200      	movs	r2, #0
   2a2ea:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   2a2ec:	687b      	ldr	r3, [r7, #4]
   2a2ee:	2200      	movs	r2, #0
   2a2f0:	725a      	strb	r2, [r3, #9]
}
   2a2f2:	46c0      	nop			; (mov r8, r8)
   2a2f4:	46bd      	mov	sp, r7
   2a2f6:	b002      	add	sp, #8
   2a2f8:	bd80      	pop	{r7, pc}

0002a2fa <system_gclk_chan_get_config_defaults>:
{
   2a2fa:	b580      	push	{r7, lr}
   2a2fc:	b082      	sub	sp, #8
   2a2fe:	af00      	add	r7, sp, #0
   2a300:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2a302:	687b      	ldr	r3, [r7, #4]
   2a304:	2200      	movs	r2, #0
   2a306:	701a      	strb	r2, [r3, #0]
}
   2a308:	46c0      	nop			; (mov r8, r8)
   2a30a:	46bd      	mov	sp, r7
   2a30c:	b002      	add	sp, #8
   2a30e:	bd80      	pop	{r7, pc}

0002a310 <system_clock_source_osc8m_get_config_defaults>:
{
   2a310:	b580      	push	{r7, lr}
   2a312:	b082      	sub	sp, #8
   2a314:	af00      	add	r7, sp, #0
   2a316:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   2a318:	687b      	ldr	r3, [r7, #4]
   2a31a:	2203      	movs	r2, #3
   2a31c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   2a31e:	687b      	ldr	r3, [r7, #4]
   2a320:	2200      	movs	r2, #0
   2a322:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   2a324:	687b      	ldr	r3, [r7, #4]
   2a326:	2201      	movs	r2, #1
   2a328:	709a      	strb	r2, [r3, #2]
}
   2a32a:	46c0      	nop			; (mov r8, r8)
   2a32c:	46bd      	mov	sp, r7
   2a32e:	b002      	add	sp, #8
   2a330:	bd80      	pop	{r7, pc}
	...

0002a334 <system_cpu_clock_set_divider>:
{
   2a334:	b580      	push	{r7, lr}
   2a336:	b082      	sub	sp, #8
   2a338:	af00      	add	r7, sp, #0
   2a33a:	0002      	movs	r2, r0
   2a33c:	1dfb      	adds	r3, r7, #7
   2a33e:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   2a340:	4a03      	ldr	r2, [pc, #12]	; (2a350 <system_cpu_clock_set_divider+0x1c>)
   2a342:	1dfb      	adds	r3, r7, #7
   2a344:	781b      	ldrb	r3, [r3, #0]
   2a346:	7213      	strb	r3, [r2, #8]
}
   2a348:	46c0      	nop			; (mov r8, r8)
   2a34a:	46bd      	mov	sp, r7
   2a34c:	b002      	add	sp, #8
   2a34e:	bd80      	pop	{r7, pc}
   2a350:	40000400 	.word	0x40000400

0002a354 <system_apb_clock_set_divider>:
{
   2a354:	b580      	push	{r7, lr}
   2a356:	b082      	sub	sp, #8
   2a358:	af00      	add	r7, sp, #0
   2a35a:	0002      	movs	r2, r0
   2a35c:	1dfb      	adds	r3, r7, #7
   2a35e:	701a      	strb	r2, [r3, #0]
   2a360:	1dbb      	adds	r3, r7, #6
   2a362:	1c0a      	adds	r2, r1, #0
   2a364:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2a366:	1dfb      	adds	r3, r7, #7
   2a368:	781b      	ldrb	r3, [r3, #0]
   2a36a:	2b01      	cmp	r3, #1
   2a36c:	d008      	beq.n	2a380 <system_apb_clock_set_divider+0x2c>
   2a36e:	2b02      	cmp	r3, #2
   2a370:	d00b      	beq.n	2a38a <system_apb_clock_set_divider+0x36>
   2a372:	2b00      	cmp	r3, #0
   2a374:	d10e      	bne.n	2a394 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   2a376:	4a0b      	ldr	r2, [pc, #44]	; (2a3a4 <system_apb_clock_set_divider+0x50>)
   2a378:	1dbb      	adds	r3, r7, #6
   2a37a:	781b      	ldrb	r3, [r3, #0]
   2a37c:	7253      	strb	r3, [r2, #9]
			break;
   2a37e:	e00b      	b.n	2a398 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   2a380:	4a08      	ldr	r2, [pc, #32]	; (2a3a4 <system_apb_clock_set_divider+0x50>)
   2a382:	1dbb      	adds	r3, r7, #6
   2a384:	781b      	ldrb	r3, [r3, #0]
   2a386:	7293      	strb	r3, [r2, #10]
			break;
   2a388:	e006      	b.n	2a398 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   2a38a:	4a06      	ldr	r2, [pc, #24]	; (2a3a4 <system_apb_clock_set_divider+0x50>)
   2a38c:	1dbb      	adds	r3, r7, #6
   2a38e:	781b      	ldrb	r3, [r3, #0]
   2a390:	72d3      	strb	r3, [r2, #11]
			break;
   2a392:	e001      	b.n	2a398 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   2a394:	2317      	movs	r3, #23
   2a396:	e000      	b.n	2a39a <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   2a398:	2300      	movs	r3, #0
}
   2a39a:	0018      	movs	r0, r3
   2a39c:	46bd      	mov	sp, r7
   2a39e:	b002      	add	sp, #8
   2a3a0:	bd80      	pop	{r7, pc}
   2a3a2:	46c0      	nop			; (mov r8, r8)
   2a3a4:	40000400 	.word	0x40000400

0002a3a8 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   2a3a8:	b580      	push	{r7, lr}
   2a3aa:	b082      	sub	sp, #8
   2a3ac:	af00      	add	r7, sp, #0
   2a3ae:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   2a3b0:	687b      	ldr	r3, [r7, #4]
   2a3b2:	2201      	movs	r2, #1
   2a3b4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   2a3b6:	687b      	ldr	r3, [r7, #4]
   2a3b8:	2200      	movs	r2, #0
   2a3ba:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   2a3bc:	687b      	ldr	r3, [r7, #4]
   2a3be:	2200      	movs	r2, #0
   2a3c0:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   2a3c2:	687b      	ldr	r3, [r7, #4]
   2a3c4:	2200      	movs	r2, #0
   2a3c6:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   2a3c8:	687b      	ldr	r3, [r7, #4]
   2a3ca:	2200      	movs	r2, #0
   2a3cc:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   2a3ce:	687b      	ldr	r3, [r7, #4]
   2a3d0:	4a0a      	ldr	r2, [pc, #40]	; (2a3fc <system_clock_source_dpll_get_config_defaults+0x54>)
   2a3d2:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   2a3d4:	687b      	ldr	r3, [r7, #4]
   2a3d6:	2280      	movs	r2, #128	; 0x80
   2a3d8:	0212      	lsls	r2, r2, #8
   2a3da:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   2a3dc:	687b      	ldr	r3, [r7, #4]
   2a3de:	2201      	movs	r2, #1
   2a3e0:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   2a3e2:	687b      	ldr	r3, [r7, #4]
   2a3e4:	2200      	movs	r2, #0
   2a3e6:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   2a3e8:	687b      	ldr	r3, [r7, #4]
   2a3ea:	2200      	movs	r2, #0
   2a3ec:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   2a3ee:	687b      	ldr	r3, [r7, #4]
   2a3f0:	2200      	movs	r2, #0
   2a3f2:	749a      	strb	r2, [r3, #18]
};
   2a3f4:	46c0      	nop			; (mov r8, r8)
   2a3f6:	46bd      	mov	sp, r7
   2a3f8:	b002      	add	sp, #8
   2a3fa:	bd80      	pop	{r7, pc}
   2a3fc:	02dc6c00 	.word	0x02dc6c00

0002a400 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   2a400:	b580      	push	{r7, lr}
   2a402:	b082      	sub	sp, #8
   2a404:	af00      	add	r7, sp, #0
   2a406:	0002      	movs	r2, r0
   2a408:	1dfb      	adds	r3, r7, #7
   2a40a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   2a40c:	4a08      	ldr	r2, [pc, #32]	; (2a430 <system_flash_set_waitstates+0x30>)
   2a40e:	1dfb      	adds	r3, r7, #7
   2a410:	781b      	ldrb	r3, [r3, #0]
   2a412:	210f      	movs	r1, #15
   2a414:	400b      	ands	r3, r1
   2a416:	b2d9      	uxtb	r1, r3
   2a418:	6853      	ldr	r3, [r2, #4]
   2a41a:	200f      	movs	r0, #15
   2a41c:	4001      	ands	r1, r0
   2a41e:	0049      	lsls	r1, r1, #1
   2a420:	201e      	movs	r0, #30
   2a422:	4383      	bics	r3, r0
   2a424:	430b      	orrs	r3, r1
   2a426:	6053      	str	r3, [r2, #4]
}
   2a428:	46c0      	nop			; (mov r8, r8)
   2a42a:	46bd      	mov	sp, r7
   2a42c:	b002      	add	sp, #8
   2a42e:	bd80      	pop	{r7, pc}
   2a430:	41004000 	.word	0x41004000

0002a434 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   2a434:	b580      	push	{r7, lr}
   2a436:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   2a438:	46c0      	nop			; (mov r8, r8)
   2a43a:	4b04      	ldr	r3, [pc, #16]	; (2a44c <_system_dfll_wait_for_sync+0x18>)
   2a43c:	68db      	ldr	r3, [r3, #12]
   2a43e:	2210      	movs	r2, #16
   2a440:	4013      	ands	r3, r2
   2a442:	d0fa      	beq.n	2a43a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   2a444:	46c0      	nop			; (mov r8, r8)
   2a446:	46bd      	mov	sp, r7
   2a448:	bd80      	pop	{r7, pc}
   2a44a:	46c0      	nop			; (mov r8, r8)
   2a44c:	40000800 	.word	0x40000800

0002a450 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   2a450:	b580      	push	{r7, lr}
   2a452:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   2a454:	4b0c      	ldr	r3, [pc, #48]	; (2a488 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a456:	2202      	movs	r2, #2
   2a458:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2a45a:	4b0c      	ldr	r3, [pc, #48]	; (2a48c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2a45c:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   2a45e:	4a0a      	ldr	r2, [pc, #40]	; (2a488 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a460:	4b0b      	ldr	r3, [pc, #44]	; (2a490 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2a462:	689b      	ldr	r3, [r3, #8]
   2a464:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   2a466:	4a08      	ldr	r2, [pc, #32]	; (2a488 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a468:	4b09      	ldr	r3, [pc, #36]	; (2a490 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2a46a:	685b      	ldr	r3, [r3, #4]
   2a46c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   2a46e:	4b06      	ldr	r3, [pc, #24]	; (2a488 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a470:	2200      	movs	r2, #0
   2a472:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2a474:	4b05      	ldr	r3, [pc, #20]	; (2a48c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2a476:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   2a478:	4a03      	ldr	r2, [pc, #12]	; (2a488 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a47a:	4b05      	ldr	r3, [pc, #20]	; (2a490 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2a47c:	681b      	ldr	r3, [r3, #0]
   2a47e:	b29b      	uxth	r3, r3
   2a480:	8493      	strh	r3, [r2, #36]	; 0x24
}
   2a482:	46c0      	nop			; (mov r8, r8)
   2a484:	46bd      	mov	sp, r7
   2a486:	bd80      	pop	{r7, pc}
   2a488:	40000800 	.word	0x40000800
   2a48c:	0002a435 	.word	0x0002a435
   2a490:	200042e0 	.word	0x200042e0

0002a494 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   2a494:	b580      	push	{r7, lr}
   2a496:	b082      	sub	sp, #8
   2a498:	af00      	add	r7, sp, #0
   2a49a:	0002      	movs	r2, r0
   2a49c:	1dfb      	adds	r3, r7, #7
   2a49e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2a4a0:	1dfb      	adds	r3, r7, #7
   2a4a2:	781b      	ldrb	r3, [r3, #0]
   2a4a4:	2b08      	cmp	r3, #8
   2a4a6:	d841      	bhi.n	2a52c <system_clock_source_get_hz+0x98>
   2a4a8:	009a      	lsls	r2, r3, #2
   2a4aa:	4b23      	ldr	r3, [pc, #140]	; (2a538 <system_clock_source_get_hz+0xa4>)
   2a4ac:	18d3      	adds	r3, r2, r3
   2a4ae:	681b      	ldr	r3, [r3, #0]
   2a4b0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   2a4b2:	4b22      	ldr	r3, [pc, #136]	; (2a53c <system_clock_source_get_hz+0xa8>)
   2a4b4:	691b      	ldr	r3, [r3, #16]
   2a4b6:	e03a      	b.n	2a52e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   2a4b8:	4b21      	ldr	r3, [pc, #132]	; (2a540 <system_clock_source_get_hz+0xac>)
   2a4ba:	6a1b      	ldr	r3, [r3, #32]
   2a4bc:	059b      	lsls	r3, r3, #22
   2a4be:	0f9b      	lsrs	r3, r3, #30
   2a4c0:	b2db      	uxtb	r3, r3
   2a4c2:	001a      	movs	r2, r3
   2a4c4:	4b1f      	ldr	r3, [pc, #124]	; (2a544 <system_clock_source_get_hz+0xb0>)
   2a4c6:	40d3      	lsrs	r3, r2
   2a4c8:	e031      	b.n	2a52e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   2a4ca:	2380      	movs	r3, #128	; 0x80
   2a4cc:	021b      	lsls	r3, r3, #8
   2a4ce:	e02e      	b.n	2a52e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   2a4d0:	2380      	movs	r3, #128	; 0x80
   2a4d2:	021b      	lsls	r3, r3, #8
   2a4d4:	e02b      	b.n	2a52e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   2a4d6:	4b19      	ldr	r3, [pc, #100]	; (2a53c <system_clock_source_get_hz+0xa8>)
   2a4d8:	695b      	ldr	r3, [r3, #20]
   2a4da:	e028      	b.n	2a52e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   2a4dc:	4b17      	ldr	r3, [pc, #92]	; (2a53c <system_clock_source_get_hz+0xa8>)
   2a4de:	681b      	ldr	r3, [r3, #0]
   2a4e0:	2202      	movs	r2, #2
   2a4e2:	4013      	ands	r3, r2
   2a4e4:	d101      	bne.n	2a4ea <system_clock_source_get_hz+0x56>
			return 0;
   2a4e6:	2300      	movs	r3, #0
   2a4e8:	e021      	b.n	2a52e <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   2a4ea:	4b17      	ldr	r3, [pc, #92]	; (2a548 <system_clock_source_get_hz+0xb4>)
   2a4ec:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   2a4ee:	4b13      	ldr	r3, [pc, #76]	; (2a53c <system_clock_source_get_hz+0xa8>)
   2a4f0:	681b      	ldr	r3, [r3, #0]
   2a4f2:	2224      	movs	r2, #36	; 0x24
   2a4f4:	4013      	ands	r3, r2
   2a4f6:	2b04      	cmp	r3, #4
   2a4f8:	d109      	bne.n	2a50e <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2a4fa:	2000      	movs	r0, #0
   2a4fc:	4b13      	ldr	r3, [pc, #76]	; (2a54c <system_clock_source_get_hz+0xb8>)
   2a4fe:	4798      	blx	r3
   2a500:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   2a502:	4b0e      	ldr	r3, [pc, #56]	; (2a53c <system_clock_source_get_hz+0xa8>)
   2a504:	689b      	ldr	r3, [r3, #8]
   2a506:	041b      	lsls	r3, r3, #16
   2a508:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2a50a:	4353      	muls	r3, r2
   2a50c:	e00f      	b.n	2a52e <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   2a50e:	4b10      	ldr	r3, [pc, #64]	; (2a550 <system_clock_source_get_hz+0xbc>)
   2a510:	e00d      	b.n	2a52e <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   2a512:	4a0b      	ldr	r2, [pc, #44]	; (2a540 <system_clock_source_get_hz+0xac>)
   2a514:	2350      	movs	r3, #80	; 0x50
   2a516:	5cd3      	ldrb	r3, [r2, r3]
   2a518:	b2db      	uxtb	r3, r3
   2a51a:	001a      	movs	r2, r3
   2a51c:	2304      	movs	r3, #4
   2a51e:	4013      	ands	r3, r2
   2a520:	d101      	bne.n	2a526 <system_clock_source_get_hz+0x92>
			return 0;
   2a522:	2300      	movs	r3, #0
   2a524:	e003      	b.n	2a52e <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   2a526:	4b05      	ldr	r3, [pc, #20]	; (2a53c <system_clock_source_get_hz+0xa8>)
   2a528:	68db      	ldr	r3, [r3, #12]
   2a52a:	e000      	b.n	2a52e <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   2a52c:	2300      	movs	r3, #0
	}
}
   2a52e:	0018      	movs	r0, r3
   2a530:	46bd      	mov	sp, r7
   2a532:	b002      	add	sp, #8
   2a534:	bd80      	pop	{r7, pc}
   2a536:	46c0      	nop			; (mov r8, r8)
   2a538:	0003b354 	.word	0x0003b354
   2a53c:	200042e0 	.word	0x200042e0
   2a540:	40000800 	.word	0x40000800
   2a544:	007a1200 	.word	0x007a1200
   2a548:	0002a435 	.word	0x0002a435
   2a54c:	0002af31 	.word	0x0002af31
   2a550:	02dc6c00 	.word	0x02dc6c00

0002a554 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   2a554:	b580      	push	{r7, lr}
   2a556:	b084      	sub	sp, #16
   2a558:	af00      	add	r7, sp, #0
   2a55a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   2a55c:	4b1a      	ldr	r3, [pc, #104]	; (2a5c8 <system_clock_source_osc8m_set_config+0x74>)
   2a55e:	6a1b      	ldr	r3, [r3, #32]
   2a560:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   2a562:	687b      	ldr	r3, [r7, #4]
   2a564:	781b      	ldrb	r3, [r3, #0]
   2a566:	1c1a      	adds	r2, r3, #0
   2a568:	2303      	movs	r3, #3
   2a56a:	4013      	ands	r3, r2
   2a56c:	b2da      	uxtb	r2, r3
   2a56e:	230d      	movs	r3, #13
   2a570:	18fb      	adds	r3, r7, r3
   2a572:	2103      	movs	r1, #3
   2a574:	400a      	ands	r2, r1
   2a576:	0010      	movs	r0, r2
   2a578:	781a      	ldrb	r2, [r3, #0]
   2a57a:	2103      	movs	r1, #3
   2a57c:	438a      	bics	r2, r1
   2a57e:	1c11      	adds	r1, r2, #0
   2a580:	1c02      	adds	r2, r0, #0
   2a582:	430a      	orrs	r2, r1
   2a584:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   2a586:	687b      	ldr	r3, [r7, #4]
   2a588:	789a      	ldrb	r2, [r3, #2]
   2a58a:	230c      	movs	r3, #12
   2a58c:	18fb      	adds	r3, r7, r3
   2a58e:	01d0      	lsls	r0, r2, #7
   2a590:	781a      	ldrb	r2, [r3, #0]
   2a592:	217f      	movs	r1, #127	; 0x7f
   2a594:	400a      	ands	r2, r1
   2a596:	1c11      	adds	r1, r2, #0
   2a598:	1c02      	adds	r2, r0, #0
   2a59a:	430a      	orrs	r2, r1
   2a59c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   2a59e:	687b      	ldr	r3, [r7, #4]
   2a5a0:	785a      	ldrb	r2, [r3, #1]
   2a5a2:	230c      	movs	r3, #12
   2a5a4:	18fb      	adds	r3, r7, r3
   2a5a6:	2101      	movs	r1, #1
   2a5a8:	400a      	ands	r2, r1
   2a5aa:	0190      	lsls	r0, r2, #6
   2a5ac:	781a      	ldrb	r2, [r3, #0]
   2a5ae:	2140      	movs	r1, #64	; 0x40
   2a5b0:	438a      	bics	r2, r1
   2a5b2:	1c11      	adds	r1, r2, #0
   2a5b4:	1c02      	adds	r2, r0, #0
   2a5b6:	430a      	orrs	r2, r1
   2a5b8:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   2a5ba:	4b03      	ldr	r3, [pc, #12]	; (2a5c8 <system_clock_source_osc8m_set_config+0x74>)
   2a5bc:	68fa      	ldr	r2, [r7, #12]
   2a5be:	621a      	str	r2, [r3, #32]
}
   2a5c0:	46c0      	nop			; (mov r8, r8)
   2a5c2:	46bd      	mov	sp, r7
   2a5c4:	b004      	add	sp, #16
   2a5c6:	bd80      	pop	{r7, pc}
   2a5c8:	40000800 	.word	0x40000800

0002a5cc <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   2a5cc:	b580      	push	{r7, lr}
   2a5ce:	b086      	sub	sp, #24
   2a5d0:	af00      	add	r7, sp, #0
   2a5d2:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   2a5d4:	687b      	ldr	r3, [r7, #4]
   2a5d6:	68db      	ldr	r3, [r3, #12]
   2a5d8:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   2a5da:	687b      	ldr	r3, [r7, #4]
   2a5dc:	7d1b      	ldrb	r3, [r3, #20]
   2a5de:	2b01      	cmp	r3, #1
   2a5e0:	d10a      	bne.n	2a5f8 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   2a5e2:	687b      	ldr	r3, [r7, #4]
   2a5e4:	8a1b      	ldrh	r3, [r3, #16]
   2a5e6:	3301      	adds	r3, #1
   2a5e8:	005b      	lsls	r3, r3, #1
   2a5ea:	001a      	movs	r2, r3
   2a5ec:	4b36      	ldr	r3, [pc, #216]	; (2a6c8 <system_clock_source_dpll_set_config+0xfc>)
   2a5ee:	0011      	movs	r1, r2
   2a5f0:	6978      	ldr	r0, [r7, #20]
   2a5f2:	4798      	blx	r3
   2a5f4:	0003      	movs	r3, r0
   2a5f6:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   2a5f8:	687b      	ldr	r3, [r7, #4]
   2a5fa:	689b      	ldr	r3, [r3, #8]
   2a5fc:	011a      	lsls	r2, r3, #4
   2a5fe:	4b32      	ldr	r3, [pc, #200]	; (2a6c8 <system_clock_source_dpll_set_config+0xfc>)
   2a600:	6979      	ldr	r1, [r7, #20]
   2a602:	0010      	movs	r0, r2
   2a604:	4798      	blx	r3
   2a606:	0003      	movs	r3, r0
   2a608:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   2a60a:	693b      	ldr	r3, [r7, #16]
   2a60c:	b2da      	uxtb	r2, r3
   2a60e:	230f      	movs	r3, #15
   2a610:	18fb      	adds	r3, r7, r3
   2a612:	210f      	movs	r1, #15
   2a614:	400a      	ands	r2, r1
   2a616:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   2a618:	693b      	ldr	r3, [r7, #16]
   2a61a:	091b      	lsrs	r3, r3, #4
   2a61c:	3b01      	subs	r3, #1
   2a61e:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   2a620:	492a      	ldr	r1, [pc, #168]	; (2a6cc <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2a622:	687b      	ldr	r3, [r7, #4]
   2a624:	781b      	ldrb	r3, [r3, #0]
   2a626:	01db      	lsls	r3, r3, #7
   2a628:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   2a62a:	687b      	ldr	r3, [r7, #4]
   2a62c:	785b      	ldrb	r3, [r3, #1]
   2a62e:	019b      	lsls	r3, r3, #6
   2a630:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2a632:	4313      	orrs	r3, r2
   2a634:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   2a636:	2344      	movs	r3, #68	; 0x44
   2a638:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   2a63a:	4b24      	ldr	r3, [pc, #144]	; (2a6cc <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2a63c:	220f      	movs	r2, #15
   2a63e:	18ba      	adds	r2, r7, r2
   2a640:	7812      	ldrb	r2, [r2, #0]
   2a642:	0412      	lsls	r2, r2, #16
   2a644:	0011      	movs	r1, r2
   2a646:	22f0      	movs	r2, #240	; 0xf0
   2a648:	0312      	lsls	r2, r2, #12
   2a64a:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   2a64c:	693a      	ldr	r2, [r7, #16]
   2a64e:	0512      	lsls	r2, r2, #20
   2a650:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2a652:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   2a654:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   2a656:	4b1d      	ldr	r3, [pc, #116]	; (2a6cc <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2a658:	687a      	ldr	r2, [r7, #4]
   2a65a:	8a12      	ldrh	r2, [r2, #16]
   2a65c:	0412      	lsls	r2, r2, #16
   2a65e:	0011      	movs	r1, r2
   2a660:	4a1b      	ldr	r2, [pc, #108]	; (2a6d0 <system_clock_source_dpll_set_config+0x104>)
   2a662:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2a664:	687a      	ldr	r2, [r7, #4]
   2a666:	7892      	ldrb	r2, [r2, #2]
   2a668:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2a66a:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2a66c:	687a      	ldr	r2, [r7, #4]
   2a66e:	7cd2      	ldrb	r2, [r2, #19]
   2a670:	0212      	lsls	r2, r2, #8
   2a672:	0010      	movs	r0, r2
   2a674:	22e0      	movs	r2, #224	; 0xe0
   2a676:	00d2      	lsls	r2, r2, #3
   2a678:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2a67a:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2a67c:	687a      	ldr	r2, [r7, #4]
   2a67e:	7d12      	ldrb	r2, [r2, #20]
   2a680:	0112      	lsls	r2, r2, #4
   2a682:	0010      	movs	r0, r2
   2a684:	2230      	movs	r2, #48	; 0x30
   2a686:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2a688:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2a68a:	687a      	ldr	r2, [r7, #4]
   2a68c:	78d2      	ldrb	r2, [r2, #3]
   2a68e:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2a690:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   2a692:	687a      	ldr	r2, [r7, #4]
   2a694:	7912      	ldrb	r2, [r2, #4]
   2a696:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2a698:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   2a69a:	687a      	ldr	r2, [r7, #4]
   2a69c:	7c92      	ldrb	r2, [r2, #18]
   2a69e:	0010      	movs	r0, r2
   2a6a0:	2203      	movs	r2, #3
   2a6a2:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   2a6a4:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   2a6a6:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   2a6a8:	693b      	ldr	r3, [r7, #16]
   2a6aa:	3301      	adds	r3, #1
   2a6ac:	011a      	lsls	r2, r3, #4
   2a6ae:	230f      	movs	r3, #15
   2a6b0:	18fb      	adds	r3, r7, r3
   2a6b2:	781b      	ldrb	r3, [r3, #0]
   2a6b4:	18d3      	adds	r3, r2, r3
   2a6b6:	697a      	ldr	r2, [r7, #20]
   2a6b8:	4353      	muls	r3, r2
   2a6ba:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   2a6bc:	4b05      	ldr	r3, [pc, #20]	; (2a6d4 <system_clock_source_dpll_set_config+0x108>)
   2a6be:	60da      	str	r2, [r3, #12]
}
   2a6c0:	46c0      	nop			; (mov r8, r8)
   2a6c2:	46bd      	mov	sp, r7
   2a6c4:	b006      	add	sp, #24
   2a6c6:	bd80      	pop	{r7, pc}
   2a6c8:	00033ad5 	.word	0x00033ad5
   2a6cc:	40000800 	.word	0x40000800
   2a6d0:	07ff0000 	.word	0x07ff0000
   2a6d4:	200042e0 	.word	0x200042e0

0002a6d8 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   2a6d8:	b580      	push	{r7, lr}
   2a6da:	b082      	sub	sp, #8
   2a6dc:	af00      	add	r7, sp, #0
   2a6de:	0002      	movs	r2, r0
   2a6e0:	1dfb      	adds	r3, r7, #7
   2a6e2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2a6e4:	1dfb      	adds	r3, r7, #7
   2a6e6:	781b      	ldrb	r3, [r3, #0]
   2a6e8:	2b08      	cmp	r3, #8
   2a6ea:	d83b      	bhi.n	2a764 <system_clock_source_enable+0x8c>
   2a6ec:	009a      	lsls	r2, r3, #2
   2a6ee:	4b21      	ldr	r3, [pc, #132]	; (2a774 <system_clock_source_enable+0x9c>)
   2a6f0:	18d3      	adds	r3, r2, r3
   2a6f2:	681b      	ldr	r3, [r3, #0]
   2a6f4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   2a6f6:	4b20      	ldr	r3, [pc, #128]	; (2a778 <system_clock_source_enable+0xa0>)
   2a6f8:	4a1f      	ldr	r2, [pc, #124]	; (2a778 <system_clock_source_enable+0xa0>)
   2a6fa:	6a12      	ldr	r2, [r2, #32]
   2a6fc:	2102      	movs	r1, #2
   2a6fe:	430a      	orrs	r2, r1
   2a700:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   2a702:	2300      	movs	r3, #0
   2a704:	e031      	b.n	2a76a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   2a706:	4b1c      	ldr	r3, [pc, #112]	; (2a778 <system_clock_source_enable+0xa0>)
   2a708:	4a1b      	ldr	r2, [pc, #108]	; (2a778 <system_clock_source_enable+0xa0>)
   2a70a:	6992      	ldr	r2, [r2, #24]
   2a70c:	2102      	movs	r1, #2
   2a70e:	430a      	orrs	r2, r1
   2a710:	619a      	str	r2, [r3, #24]
		break;
   2a712:	e029      	b.n	2a768 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   2a714:	4a18      	ldr	r2, [pc, #96]	; (2a778 <system_clock_source_enable+0xa0>)
   2a716:	4b18      	ldr	r3, [pc, #96]	; (2a778 <system_clock_source_enable+0xa0>)
   2a718:	8a1b      	ldrh	r3, [r3, #16]
   2a71a:	b29b      	uxth	r3, r3
   2a71c:	2102      	movs	r1, #2
   2a71e:	430b      	orrs	r3, r1
   2a720:	b29b      	uxth	r3, r3
   2a722:	8213      	strh	r3, [r2, #16]
		break;
   2a724:	e020      	b.n	2a768 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   2a726:	4a14      	ldr	r2, [pc, #80]	; (2a778 <system_clock_source_enable+0xa0>)
   2a728:	4b13      	ldr	r3, [pc, #76]	; (2a778 <system_clock_source_enable+0xa0>)
   2a72a:	8a9b      	ldrh	r3, [r3, #20]
   2a72c:	b29b      	uxth	r3, r3
   2a72e:	2102      	movs	r1, #2
   2a730:	430b      	orrs	r3, r1
   2a732:	b29b      	uxth	r3, r3
   2a734:	8293      	strh	r3, [r2, #20]
		break;
   2a736:	e017      	b.n	2a768 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   2a738:	4b10      	ldr	r3, [pc, #64]	; (2a77c <system_clock_source_enable+0xa4>)
   2a73a:	681b      	ldr	r3, [r3, #0]
   2a73c:	2202      	movs	r2, #2
   2a73e:	431a      	orrs	r2, r3
   2a740:	4b0e      	ldr	r3, [pc, #56]	; (2a77c <system_clock_source_enable+0xa4>)
   2a742:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   2a744:	4b0e      	ldr	r3, [pc, #56]	; (2a780 <system_clock_source_enable+0xa8>)
   2a746:	4798      	blx	r3
		break;
   2a748:	e00e      	b.n	2a768 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   2a74a:	4a0b      	ldr	r2, [pc, #44]	; (2a778 <system_clock_source_enable+0xa0>)
   2a74c:	490a      	ldr	r1, [pc, #40]	; (2a778 <system_clock_source_enable+0xa0>)
   2a74e:	2344      	movs	r3, #68	; 0x44
   2a750:	5ccb      	ldrb	r3, [r1, r3]
   2a752:	b2db      	uxtb	r3, r3
   2a754:	2102      	movs	r1, #2
   2a756:	430b      	orrs	r3, r1
   2a758:	b2d9      	uxtb	r1, r3
   2a75a:	2344      	movs	r3, #68	; 0x44
   2a75c:	54d1      	strb	r1, [r2, r3]
		break;
   2a75e:	e003      	b.n	2a768 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   2a760:	2300      	movs	r3, #0
   2a762:	e002      	b.n	2a76a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   2a764:	2317      	movs	r3, #23
   2a766:	e000      	b.n	2a76a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   2a768:	2300      	movs	r3, #0
}
   2a76a:	0018      	movs	r0, r3
   2a76c:	46bd      	mov	sp, r7
   2a76e:	b002      	add	sp, #8
   2a770:	bd80      	pop	{r7, pc}
   2a772:	46c0      	nop			; (mov r8, r8)
   2a774:	0003b378 	.word	0x0003b378
   2a778:	40000800 	.word	0x40000800
   2a77c:	200042e0 	.word	0x200042e0
   2a780:	0002a451 	.word	0x0002a451

0002a784 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   2a784:	b580      	push	{r7, lr}
   2a786:	b084      	sub	sp, #16
   2a788:	af00      	add	r7, sp, #0
   2a78a:	0002      	movs	r2, r0
   2a78c:	1dfb      	adds	r3, r7, #7
   2a78e:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   2a790:	2300      	movs	r3, #0
   2a792:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   2a794:	1dfb      	adds	r3, r7, #7
   2a796:	781b      	ldrb	r3, [r3, #0]
   2a798:	2b08      	cmp	r3, #8
   2a79a:	d821      	bhi.n	2a7e0 <system_clock_source_is_ready+0x5c>
   2a79c:	009a      	lsls	r2, r3, #2
   2a79e:	4b18      	ldr	r3, [pc, #96]	; (2a800 <system_clock_source_is_ready+0x7c>)
   2a7a0:	18d3      	adds	r3, r2, r3
   2a7a2:	681b      	ldr	r3, [r3, #0]
   2a7a4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   2a7a6:	2308      	movs	r3, #8
   2a7a8:	60fb      	str	r3, [r7, #12]
		break;
   2a7aa:	e01b      	b.n	2a7e4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   2a7ac:	2304      	movs	r3, #4
   2a7ae:	60fb      	str	r3, [r7, #12]
		break;
   2a7b0:	e018      	b.n	2a7e4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   2a7b2:	2301      	movs	r3, #1
   2a7b4:	60fb      	str	r3, [r7, #12]
		break;
   2a7b6:	e015      	b.n	2a7e4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   2a7b8:	2302      	movs	r3, #2
   2a7ba:	60fb      	str	r3, [r7, #12]
		break;
   2a7bc:	e012      	b.n	2a7e4 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   2a7be:	2310      	movs	r3, #16
   2a7c0:	60fb      	str	r3, [r7, #12]
		}
		break;
   2a7c2:	e00f      	b.n	2a7e4 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   2a7c4:	4a0f      	ldr	r2, [pc, #60]	; (2a804 <system_clock_source_is_ready+0x80>)
   2a7c6:	2350      	movs	r3, #80	; 0x50
   2a7c8:	5cd3      	ldrb	r3, [r2, r3]
   2a7ca:	b2db      	uxtb	r3, r3
   2a7cc:	001a      	movs	r2, r3
   2a7ce:	2303      	movs	r3, #3
   2a7d0:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   2a7d2:	3b03      	subs	r3, #3
   2a7d4:	425a      	negs	r2, r3
   2a7d6:	4153      	adcs	r3, r2
   2a7d8:	b2db      	uxtb	r3, r3
   2a7da:	e00c      	b.n	2a7f6 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   2a7dc:	2301      	movs	r3, #1
   2a7de:	e00a      	b.n	2a7f6 <system_clock_source_is_ready+0x72>

	default:
		return false;
   2a7e0:	2300      	movs	r3, #0
   2a7e2:	e008      	b.n	2a7f6 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   2a7e4:	4b07      	ldr	r3, [pc, #28]	; (2a804 <system_clock_source_is_ready+0x80>)
   2a7e6:	68db      	ldr	r3, [r3, #12]
   2a7e8:	68fa      	ldr	r2, [r7, #12]
   2a7ea:	401a      	ands	r2, r3
   2a7ec:	68fb      	ldr	r3, [r7, #12]
   2a7ee:	1ad3      	subs	r3, r2, r3
   2a7f0:	425a      	negs	r2, r3
   2a7f2:	4153      	adcs	r3, r2
   2a7f4:	b2db      	uxtb	r3, r3
}
   2a7f6:	0018      	movs	r0, r3
   2a7f8:	46bd      	mov	sp, r7
   2a7fa:	b004      	add	sp, #16
   2a7fc:	bd80      	pop	{r7, pc}
   2a7fe:	46c0      	nop			; (mov r8, r8)
   2a800:	0003b39c 	.word	0x0003b39c
   2a804:	40000800 	.word	0x40000800

0002a808 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   2a808:	b580      	push	{r7, lr}
   2a80a:	b082      	sub	sp, #8
   2a80c:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   2a80e:	003b      	movs	r3, r7
   2a810:	2203      	movs	r2, #3
   2a812:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2a814:	2300      	movs	r3, #0
   2a816:	607b      	str	r3, [r7, #4]
   2a818:	e009      	b.n	2a82e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   2a81a:	687b      	ldr	r3, [r7, #4]
   2a81c:	b2db      	uxtb	r3, r3
   2a81e:	003a      	movs	r2, r7
   2a820:	0011      	movs	r1, r2
   2a822:	0018      	movs	r0, r3
   2a824:	4b05      	ldr	r3, [pc, #20]	; (2a83c <_switch_peripheral_gclk+0x34>)
   2a826:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2a828:	687b      	ldr	r3, [r7, #4]
   2a82a:	3301      	adds	r3, #1
   2a82c:	607b      	str	r3, [r7, #4]
   2a82e:	687b      	ldr	r3, [r7, #4]
   2a830:	2b24      	cmp	r3, #36	; 0x24
   2a832:	d9f2      	bls.n	2a81a <_switch_peripheral_gclk+0x12>
	}
}
   2a834:	46c0      	nop			; (mov r8, r8)
   2a836:	46bd      	mov	sp, r7
   2a838:	b002      	add	sp, #8
   2a83a:	bd80      	pop	{r7, pc}
   2a83c:	0002ae0d 	.word	0x0002ae0d

0002a840 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   2a840:	b580      	push	{r7, lr}
   2a842:	b0a6      	sub	sp, #152	; 0x98
   2a844:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   2a846:	4b92      	ldr	r3, [pc, #584]	; (2aa90 <system_clock_init+0x250>)
   2a848:	22c2      	movs	r2, #194	; 0xc2
   2a84a:	00d2      	lsls	r2, r2, #3
   2a84c:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   2a84e:	2003      	movs	r0, #3
   2a850:	4b90      	ldr	r3, [pc, #576]	; (2aa94 <system_clock_init+0x254>)
   2a852:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   2a854:	4b90      	ldr	r3, [pc, #576]	; (2aa98 <system_clock_init+0x258>)
   2a856:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   2a858:	2394      	movs	r3, #148	; 0x94
   2a85a:	18fb      	adds	r3, r7, r3
   2a85c:	0018      	movs	r0, r3
   2a85e:	4b8f      	ldr	r3, [pc, #572]	; (2aa9c <system_clock_init+0x25c>)
   2a860:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   2a862:	2394      	movs	r3, #148	; 0x94
   2a864:	18fb      	adds	r3, r7, r3
   2a866:	2200      	movs	r2, #0
   2a868:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   2a86a:	2394      	movs	r3, #148	; 0x94
   2a86c:	18fb      	adds	r3, r7, r3
   2a86e:	2201      	movs	r2, #1
   2a870:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   2a872:	2394      	movs	r3, #148	; 0x94
   2a874:	18fb      	adds	r3, r7, r3
   2a876:	2200      	movs	r2, #0
   2a878:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   2a87a:	2394      	movs	r3, #148	; 0x94
   2a87c:	18fb      	adds	r3, r7, r3
   2a87e:	0018      	movs	r0, r3
   2a880:	4b87      	ldr	r3, [pc, #540]	; (2aaa0 <system_clock_init+0x260>)
   2a882:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   2a884:	2006      	movs	r0, #6
   2a886:	4b87      	ldr	r3, [pc, #540]	; (2aaa4 <system_clock_init+0x264>)
   2a888:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   2a88a:	4b87      	ldr	r3, [pc, #540]	; (2aaa8 <system_clock_init+0x268>)
   2a88c:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   2a88e:	2360      	movs	r3, #96	; 0x60
   2a890:	18fb      	adds	r3, r7, r3
   2a892:	0018      	movs	r0, r3
   2a894:	4b85      	ldr	r3, [pc, #532]	; (2aaac <system_clock_init+0x26c>)
   2a896:	4798      	blx	r3
   2a898:	2360      	movs	r3, #96	; 0x60
   2a89a:	18fb      	adds	r3, r7, r3
   2a89c:	2206      	movs	r2, #6
   2a89e:	701a      	strb	r2, [r3, #0]
   2a8a0:	2360      	movs	r3, #96	; 0x60
   2a8a2:	18fb      	adds	r3, r7, r3
   2a8a4:	2208      	movs	r2, #8
   2a8a6:	605a      	str	r2, [r3, #4]
   2a8a8:	2360      	movs	r3, #96	; 0x60
   2a8aa:	18fb      	adds	r3, r7, r3
   2a8ac:	2200      	movs	r2, #0
   2a8ae:	721a      	strb	r2, [r3, #8]
   2a8b0:	2360      	movs	r3, #96	; 0x60
   2a8b2:	18fb      	adds	r3, r7, r3
   2a8b4:	2200      	movs	r2, #0
   2a8b6:	725a      	strb	r2, [r3, #9]
   2a8b8:	2360      	movs	r3, #96	; 0x60
   2a8ba:	18fb      	adds	r3, r7, r3
   2a8bc:	0019      	movs	r1, r3
   2a8be:	2001      	movs	r0, #1
   2a8c0:	4b7b      	ldr	r3, [pc, #492]	; (2aab0 <system_clock_init+0x270>)
   2a8c2:	4798      	blx	r3
   2a8c4:	2001      	movs	r0, #1
   2a8c6:	4b7b      	ldr	r3, [pc, #492]	; (2aab4 <system_clock_init+0x274>)
   2a8c8:	4798      	blx	r3
   2a8ca:	2354      	movs	r3, #84	; 0x54
   2a8cc:	18fb      	adds	r3, r7, r3
   2a8ce:	0018      	movs	r0, r3
   2a8d0:	4b76      	ldr	r3, [pc, #472]	; (2aaac <system_clock_init+0x26c>)
   2a8d2:	4798      	blx	r3
   2a8d4:	2354      	movs	r3, #84	; 0x54
   2a8d6:	18fb      	adds	r3, r7, r3
   2a8d8:	2203      	movs	r2, #3
   2a8da:	701a      	strb	r2, [r3, #0]
   2a8dc:	2354      	movs	r3, #84	; 0x54
   2a8de:	18fb      	adds	r3, r7, r3
   2a8e0:	2201      	movs	r2, #1
   2a8e2:	605a      	str	r2, [r3, #4]
   2a8e4:	2354      	movs	r3, #84	; 0x54
   2a8e6:	18fb      	adds	r3, r7, r3
   2a8e8:	2201      	movs	r2, #1
   2a8ea:	721a      	strb	r2, [r3, #8]
   2a8ec:	2354      	movs	r3, #84	; 0x54
   2a8ee:	18fb      	adds	r3, r7, r3
   2a8f0:	2200      	movs	r2, #0
   2a8f2:	725a      	strb	r2, [r3, #9]
   2a8f4:	2354      	movs	r3, #84	; 0x54
   2a8f6:	18fb      	adds	r3, r7, r3
   2a8f8:	0019      	movs	r1, r3
   2a8fa:	2002      	movs	r0, #2
   2a8fc:	4b6c      	ldr	r3, [pc, #432]	; (2aab0 <system_clock_init+0x270>)
   2a8fe:	4798      	blx	r3
   2a900:	2002      	movs	r0, #2
   2a902:	4b6c      	ldr	r3, [pc, #432]	; (2aab4 <system_clock_init+0x274>)
   2a904:	4798      	blx	r3
   2a906:	233c      	movs	r3, #60	; 0x3c
   2a908:	18fb      	adds	r3, r7, r3
   2a90a:	0018      	movs	r0, r3
   2a90c:	4b67      	ldr	r3, [pc, #412]	; (2aaac <system_clock_init+0x26c>)
   2a90e:	4798      	blx	r3
   2a910:	233c      	movs	r3, #60	; 0x3c
   2a912:	18fb      	adds	r3, r7, r3
   2a914:	2203      	movs	r2, #3
   2a916:	701a      	strb	r2, [r3, #0]
   2a918:	233c      	movs	r3, #60	; 0x3c
   2a91a:	18fb      	adds	r3, r7, r3
   2a91c:	2220      	movs	r2, #32
   2a91e:	605a      	str	r2, [r3, #4]
   2a920:	233c      	movs	r3, #60	; 0x3c
   2a922:	18fb      	adds	r3, r7, r3
   2a924:	2200      	movs	r2, #0
   2a926:	721a      	strb	r2, [r3, #8]
   2a928:	233c      	movs	r3, #60	; 0x3c
   2a92a:	18fb      	adds	r3, r7, r3
   2a92c:	2200      	movs	r2, #0
   2a92e:	725a      	strb	r2, [r3, #9]
   2a930:	233c      	movs	r3, #60	; 0x3c
   2a932:	18fb      	adds	r3, r7, r3
   2a934:	0019      	movs	r1, r3
   2a936:	2004      	movs	r0, #4
   2a938:	4b5d      	ldr	r3, [pc, #372]	; (2aab0 <system_clock_init+0x270>)
   2a93a:	4798      	blx	r3
   2a93c:	2004      	movs	r0, #4
   2a93e:	4b5d      	ldr	r3, [pc, #372]	; (2aab4 <system_clock_init+0x274>)
   2a940:	4798      	blx	r3
   2a942:	2330      	movs	r3, #48	; 0x30
   2a944:	18fb      	adds	r3, r7, r3
   2a946:	0018      	movs	r0, r3
   2a948:	4b58      	ldr	r3, [pc, #352]	; (2aaac <system_clock_init+0x26c>)
   2a94a:	4798      	blx	r3
   2a94c:	2330      	movs	r3, #48	; 0x30
   2a94e:	18fb      	adds	r3, r7, r3
   2a950:	2206      	movs	r2, #6
   2a952:	701a      	strb	r2, [r3, #0]
   2a954:	2330      	movs	r3, #48	; 0x30
   2a956:	18fb      	adds	r3, r7, r3
   2a958:	2201      	movs	r2, #1
   2a95a:	605a      	str	r2, [r3, #4]
   2a95c:	2330      	movs	r3, #48	; 0x30
   2a95e:	18fb      	adds	r3, r7, r3
   2a960:	2200      	movs	r2, #0
   2a962:	721a      	strb	r2, [r3, #8]
   2a964:	2330      	movs	r3, #48	; 0x30
   2a966:	18fb      	adds	r3, r7, r3
   2a968:	2200      	movs	r2, #0
   2a96a:	725a      	strb	r2, [r3, #9]
   2a96c:	2330      	movs	r3, #48	; 0x30
   2a96e:	18fb      	adds	r3, r7, r3
   2a970:	0019      	movs	r1, r3
   2a972:	2005      	movs	r0, #5
   2a974:	4b4e      	ldr	r3, [pc, #312]	; (2aab0 <system_clock_init+0x270>)
   2a976:	4798      	blx	r3
   2a978:	2005      	movs	r0, #5
   2a97a:	4b4e      	ldr	r3, [pc, #312]	; (2aab4 <system_clock_init+0x274>)
   2a97c:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   2a97e:	2390      	movs	r3, #144	; 0x90
   2a980:	18fb      	adds	r3, r7, r3
   2a982:	0018      	movs	r0, r3
   2a984:	4b4c      	ldr	r3, [pc, #304]	; (2aab8 <system_clock_init+0x278>)
   2a986:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   2a988:	2390      	movs	r3, #144	; 0x90
   2a98a:	18fb      	adds	r3, r7, r3
   2a98c:	2201      	movs	r2, #1
   2a98e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   2a990:	2390      	movs	r3, #144	; 0x90
   2a992:	18fb      	adds	r3, r7, r3
   2a994:	0019      	movs	r1, r3
   2a996:	2001      	movs	r0, #1
   2a998:	4b48      	ldr	r3, [pc, #288]	; (2aabc <system_clock_init+0x27c>)
   2a99a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   2a99c:	2001      	movs	r0, #1
   2a99e:	4b48      	ldr	r3, [pc, #288]	; (2aac0 <system_clock_init+0x280>)
   2a9a0:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   2a9a2:	2378      	movs	r3, #120	; 0x78
   2a9a4:	18fb      	adds	r3, r7, r3
   2a9a6:	0018      	movs	r0, r3
   2a9a8:	4b46      	ldr	r3, [pc, #280]	; (2aac4 <system_clock_init+0x284>)
   2a9aa:	4798      	blx	r3

	dpll_config.on_demand        = false;
   2a9ac:	2378      	movs	r3, #120	; 0x78
   2a9ae:	18fb      	adds	r3, r7, r3
   2a9b0:	2200      	movs	r2, #0
   2a9b2:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   2a9b4:	2378      	movs	r3, #120	; 0x78
   2a9b6:	18fb      	adds	r3, r7, r3
   2a9b8:	2200      	movs	r2, #0
   2a9ba:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   2a9bc:	2378      	movs	r3, #120	; 0x78
   2a9be:	18fb      	adds	r3, r7, r3
   2a9c0:	2200      	movs	r2, #0
   2a9c2:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   2a9c4:	2378      	movs	r3, #120	; 0x78
   2a9c6:	18fb      	adds	r3, r7, r3
   2a9c8:	2200      	movs	r2, #0
   2a9ca:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   2a9cc:	2378      	movs	r3, #120	; 0x78
   2a9ce:	18fb      	adds	r3, r7, r3
   2a9d0:	2200      	movs	r2, #0
   2a9d2:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   2a9d4:	2378      	movs	r3, #120	; 0x78
   2a9d6:	18fb      	adds	r3, r7, r3
   2a9d8:	2200      	movs	r2, #0
   2a9da:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   2a9dc:	2378      	movs	r3, #120	; 0x78
   2a9de:	18fb      	adds	r3, r7, r3
   2a9e0:	2200      	movs	r2, #0
   2a9e2:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   2a9e4:	2378      	movs	r3, #120	; 0x78
   2a9e6:	18fb      	adds	r3, r7, r3
   2a9e8:	2202      	movs	r2, #2
   2a9ea:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   2a9ec:	2378      	movs	r3, #120	; 0x78
   2a9ee:	18fb      	adds	r3, r7, r3
   2a9f0:	4a35      	ldr	r2, [pc, #212]	; (2aac8 <system_clock_init+0x288>)
   2a9f2:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   2a9f4:	2378      	movs	r3, #120	; 0x78
   2a9f6:	18fb      	adds	r3, r7, r3
   2a9f8:	2201      	movs	r2, #1
   2a9fa:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   2a9fc:	2378      	movs	r3, #120	; 0x78
   2a9fe:	18fb      	adds	r3, r7, r3
   2aa00:	4a32      	ldr	r2, [pc, #200]	; (2aacc <system_clock_init+0x28c>)
   2aa02:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   2aa04:	2378      	movs	r3, #120	; 0x78
   2aa06:	18fb      	adds	r3, r7, r3
   2aa08:	0018      	movs	r0, r3
   2aa0a:	4b31      	ldr	r3, [pc, #196]	; (2aad0 <system_clock_init+0x290>)
   2aa0c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   2aa0e:	2008      	movs	r0, #8
   2aa10:	4b24      	ldr	r3, [pc, #144]	; (2aaa4 <system_clock_init+0x264>)
   2aa12:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   2aa14:	46c0      	nop			; (mov r8, r8)
   2aa16:	2008      	movs	r0, #8
   2aa18:	4b2e      	ldr	r3, [pc, #184]	; (2aad4 <system_clock_init+0x294>)
   2aa1a:	4798      	blx	r3
   2aa1c:	0003      	movs	r3, r0
   2aa1e:	001a      	movs	r2, r3
   2aa20:	2301      	movs	r3, #1
   2aa22:	4053      	eors	r3, r2
   2aa24:	b2db      	uxtb	r3, r3
   2aa26:	2b00      	cmp	r3, #0
   2aa28:	d1f5      	bne.n	2aa16 <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   2aa2a:	4919      	ldr	r1, [pc, #100]	; (2aa90 <system_clock_init+0x250>)
   2aa2c:	2244      	movs	r2, #68	; 0x44
   2aa2e:	5c8b      	ldrb	r3, [r1, r2]
   2aa30:	2080      	movs	r0, #128	; 0x80
   2aa32:	4240      	negs	r0, r0
   2aa34:	4303      	orrs	r3, r0
   2aa36:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   2aa38:	2000      	movs	r0, #0
   2aa3a:	4b27      	ldr	r3, [pc, #156]	; (2aad8 <system_clock_init+0x298>)
   2aa3c:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   2aa3e:	2100      	movs	r1, #0
   2aa40:	2000      	movs	r0, #0
   2aa42:	4b26      	ldr	r3, [pc, #152]	; (2aadc <system_clock_init+0x29c>)
   2aa44:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   2aa46:	2100      	movs	r1, #0
   2aa48:	2001      	movs	r0, #1
   2aa4a:	4b24      	ldr	r3, [pc, #144]	; (2aadc <system_clock_init+0x29c>)
   2aa4c:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   2aa4e:	2100      	movs	r1, #0
   2aa50:	2002      	movs	r0, #2
   2aa52:	4b22      	ldr	r3, [pc, #136]	; (2aadc <system_clock_init+0x29c>)
   2aa54:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   2aa56:	003b      	movs	r3, r7
   2aa58:	0018      	movs	r0, r3
   2aa5a:	4b14      	ldr	r3, [pc, #80]	; (2aaac <system_clock_init+0x26c>)
   2aa5c:	4798      	blx	r3
   2aa5e:	003b      	movs	r3, r7
   2aa60:	2208      	movs	r2, #8
   2aa62:	701a      	strb	r2, [r3, #0]
   2aa64:	003b      	movs	r3, r7
   2aa66:	2201      	movs	r2, #1
   2aa68:	605a      	str	r2, [r3, #4]
   2aa6a:	003b      	movs	r3, r7
   2aa6c:	2200      	movs	r2, #0
   2aa6e:	721a      	strb	r2, [r3, #8]
   2aa70:	003b      	movs	r3, r7
   2aa72:	2201      	movs	r2, #1
   2aa74:	725a      	strb	r2, [r3, #9]
   2aa76:	003b      	movs	r3, r7
   2aa78:	0019      	movs	r1, r3
   2aa7a:	2000      	movs	r0, #0
   2aa7c:	4b0c      	ldr	r3, [pc, #48]	; (2aab0 <system_clock_init+0x270>)
   2aa7e:	4798      	blx	r3
   2aa80:	2000      	movs	r0, #0
   2aa82:	4b0c      	ldr	r3, [pc, #48]	; (2aab4 <system_clock_init+0x274>)
   2aa84:	4798      	blx	r3
#endif
}
   2aa86:	46c0      	nop			; (mov r8, r8)
   2aa88:	46bd      	mov	sp, r7
   2aa8a:	b026      	add	sp, #152	; 0x98
   2aa8c:	bd80      	pop	{r7, pc}
   2aa8e:	46c0      	nop			; (mov r8, r8)
   2aa90:	40000800 	.word	0x40000800
   2aa94:	0002a401 	.word	0x0002a401
   2aa98:	0002a809 	.word	0x0002a809
   2aa9c:	0002a311 	.word	0x0002a311
   2aaa0:	0002a555 	.word	0x0002a555
   2aaa4:	0002a6d9 	.word	0x0002a6d9
   2aaa8:	0002ab85 	.word	0x0002ab85
   2aaac:	0002a2cd 	.word	0x0002a2cd
   2aab0:	0002abb5 	.word	0x0002abb5
   2aab4:	0002acd9 	.word	0x0002acd9
   2aab8:	0002a2fb 	.word	0x0002a2fb
   2aabc:	0002ae0d 	.word	0x0002ae0d
   2aac0:	0002ae51 	.word	0x0002ae51
   2aac4:	0002a3a9 	.word	0x0002a3a9
   2aac8:	000f4240 	.word	0x000f4240
   2aacc:	02dc6c00 	.word	0x02dc6c00
   2aad0:	0002a5cd 	.word	0x0002a5cd
   2aad4:	0002a785 	.word	0x0002a785
   2aad8:	0002a335 	.word	0x0002a335
   2aadc:	0002a355 	.word	0x0002a355

0002aae0 <system_apb_clock_set_mask>:
{
   2aae0:	b580      	push	{r7, lr}
   2aae2:	b082      	sub	sp, #8
   2aae4:	af00      	add	r7, sp, #0
   2aae6:	0002      	movs	r2, r0
   2aae8:	6039      	str	r1, [r7, #0]
   2aaea:	1dfb      	adds	r3, r7, #7
   2aaec:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2aaee:	1dfb      	adds	r3, r7, #7
   2aaf0:	781b      	ldrb	r3, [r3, #0]
   2aaf2:	2b01      	cmp	r3, #1
   2aaf4:	d00a      	beq.n	2ab0c <system_apb_clock_set_mask+0x2c>
   2aaf6:	2b02      	cmp	r3, #2
   2aaf8:	d00f      	beq.n	2ab1a <system_apb_clock_set_mask+0x3a>
   2aafa:	2b00      	cmp	r3, #0
   2aafc:	d114      	bne.n	2ab28 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2aafe:	4b0e      	ldr	r3, [pc, #56]	; (2ab38 <system_apb_clock_set_mask+0x58>)
   2ab00:	4a0d      	ldr	r2, [pc, #52]	; (2ab38 <system_apb_clock_set_mask+0x58>)
   2ab02:	6991      	ldr	r1, [r2, #24]
   2ab04:	683a      	ldr	r2, [r7, #0]
   2ab06:	430a      	orrs	r2, r1
   2ab08:	619a      	str	r2, [r3, #24]
			break;
   2ab0a:	e00f      	b.n	2ab2c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2ab0c:	4b0a      	ldr	r3, [pc, #40]	; (2ab38 <system_apb_clock_set_mask+0x58>)
   2ab0e:	4a0a      	ldr	r2, [pc, #40]	; (2ab38 <system_apb_clock_set_mask+0x58>)
   2ab10:	69d1      	ldr	r1, [r2, #28]
   2ab12:	683a      	ldr	r2, [r7, #0]
   2ab14:	430a      	orrs	r2, r1
   2ab16:	61da      	str	r2, [r3, #28]
			break;
   2ab18:	e008      	b.n	2ab2c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2ab1a:	4b07      	ldr	r3, [pc, #28]	; (2ab38 <system_apb_clock_set_mask+0x58>)
   2ab1c:	4a06      	ldr	r2, [pc, #24]	; (2ab38 <system_apb_clock_set_mask+0x58>)
   2ab1e:	6a11      	ldr	r1, [r2, #32]
   2ab20:	683a      	ldr	r2, [r7, #0]
   2ab22:	430a      	orrs	r2, r1
   2ab24:	621a      	str	r2, [r3, #32]
			break;
   2ab26:	e001      	b.n	2ab2c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2ab28:	2317      	movs	r3, #23
   2ab2a:	e000      	b.n	2ab2e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2ab2c:	2300      	movs	r3, #0
}
   2ab2e:	0018      	movs	r0, r3
   2ab30:	46bd      	mov	sp, r7
   2ab32:	b002      	add	sp, #8
   2ab34:	bd80      	pop	{r7, pc}
   2ab36:	46c0      	nop			; (mov r8, r8)
   2ab38:	40000400 	.word	0x40000400

0002ab3c <system_interrupt_enter_critical_section>:
{
   2ab3c:	b580      	push	{r7, lr}
   2ab3e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   2ab40:	4b02      	ldr	r3, [pc, #8]	; (2ab4c <system_interrupt_enter_critical_section+0x10>)
   2ab42:	4798      	blx	r3
}
   2ab44:	46c0      	nop			; (mov r8, r8)
   2ab46:	46bd      	mov	sp, r7
   2ab48:	bd80      	pop	{r7, pc}
   2ab4a:	46c0      	nop			; (mov r8, r8)
   2ab4c:	00027179 	.word	0x00027179

0002ab50 <system_interrupt_leave_critical_section>:
{
   2ab50:	b580      	push	{r7, lr}
   2ab52:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2ab54:	4b02      	ldr	r3, [pc, #8]	; (2ab60 <system_interrupt_leave_critical_section+0x10>)
   2ab56:	4798      	blx	r3
}
   2ab58:	46c0      	nop			; (mov r8, r8)
   2ab5a:	46bd      	mov	sp, r7
   2ab5c:	bd80      	pop	{r7, pc}
   2ab5e:	46c0      	nop			; (mov r8, r8)
   2ab60:	000271cd 	.word	0x000271cd

0002ab64 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   2ab64:	b580      	push	{r7, lr}
   2ab66:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   2ab68:	4b05      	ldr	r3, [pc, #20]	; (2ab80 <system_gclk_is_syncing+0x1c>)
   2ab6a:	785b      	ldrb	r3, [r3, #1]
   2ab6c:	b2db      	uxtb	r3, r3
   2ab6e:	b25b      	sxtb	r3, r3
   2ab70:	2b00      	cmp	r3, #0
   2ab72:	da01      	bge.n	2ab78 <system_gclk_is_syncing+0x14>
		return true;
   2ab74:	2301      	movs	r3, #1
   2ab76:	e000      	b.n	2ab7a <system_gclk_is_syncing+0x16>
	}

	return false;
   2ab78:	2300      	movs	r3, #0
}
   2ab7a:	0018      	movs	r0, r3
   2ab7c:	46bd      	mov	sp, r7
   2ab7e:	bd80      	pop	{r7, pc}
   2ab80:	40000c00 	.word	0x40000c00

0002ab84 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   2ab84:	b580      	push	{r7, lr}
   2ab86:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   2ab88:	2108      	movs	r1, #8
   2ab8a:	2000      	movs	r0, #0
   2ab8c:	4b07      	ldr	r3, [pc, #28]	; (2abac <system_gclk_init+0x28>)
   2ab8e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   2ab90:	4b07      	ldr	r3, [pc, #28]	; (2abb0 <system_gclk_init+0x2c>)
   2ab92:	2201      	movs	r2, #1
   2ab94:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   2ab96:	46c0      	nop			; (mov r8, r8)
   2ab98:	4b05      	ldr	r3, [pc, #20]	; (2abb0 <system_gclk_init+0x2c>)
   2ab9a:	781b      	ldrb	r3, [r3, #0]
   2ab9c:	b2db      	uxtb	r3, r3
   2ab9e:	001a      	movs	r2, r3
   2aba0:	2301      	movs	r3, #1
   2aba2:	4013      	ands	r3, r2
   2aba4:	d1f8      	bne.n	2ab98 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   2aba6:	46c0      	nop			; (mov r8, r8)
   2aba8:	46bd      	mov	sp, r7
   2abaa:	bd80      	pop	{r7, pc}
   2abac:	0002aae1 	.word	0x0002aae1
   2abb0:	40000c00 	.word	0x40000c00

0002abb4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   2abb4:	b580      	push	{r7, lr}
   2abb6:	b086      	sub	sp, #24
   2abb8:	af00      	add	r7, sp, #0
   2abba:	0002      	movs	r2, r0
   2abbc:	6039      	str	r1, [r7, #0]
   2abbe:	1dfb      	adds	r3, r7, #7
   2abc0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   2abc2:	1dfb      	adds	r3, r7, #7
   2abc4:	781b      	ldrb	r3, [r3, #0]
   2abc6:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   2abc8:	1dfb      	adds	r3, r7, #7
   2abca:	781b      	ldrb	r3, [r3, #0]
   2abcc:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   2abce:	683b      	ldr	r3, [r7, #0]
   2abd0:	781b      	ldrb	r3, [r3, #0]
   2abd2:	021b      	lsls	r3, r3, #8
   2abd4:	001a      	movs	r2, r3
   2abd6:	697b      	ldr	r3, [r7, #20]
   2abd8:	4313      	orrs	r3, r2
   2abda:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   2abdc:	683b      	ldr	r3, [r7, #0]
   2abde:	785b      	ldrb	r3, [r3, #1]
   2abe0:	2b00      	cmp	r3, #0
   2abe2:	d004      	beq.n	2abee <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   2abe4:	697b      	ldr	r3, [r7, #20]
   2abe6:	2280      	movs	r2, #128	; 0x80
   2abe8:	02d2      	lsls	r2, r2, #11
   2abea:	4313      	orrs	r3, r2
   2abec:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   2abee:	683b      	ldr	r3, [r7, #0]
   2abf0:	7a5b      	ldrb	r3, [r3, #9]
   2abf2:	2b00      	cmp	r3, #0
   2abf4:	d004      	beq.n	2ac00 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   2abf6:	697b      	ldr	r3, [r7, #20]
   2abf8:	2280      	movs	r2, #128	; 0x80
   2abfa:	0312      	lsls	r2, r2, #12
   2abfc:	4313      	orrs	r3, r2
   2abfe:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   2ac00:	683b      	ldr	r3, [r7, #0]
   2ac02:	685b      	ldr	r3, [r3, #4]
   2ac04:	2b01      	cmp	r3, #1
   2ac06:	d92c      	bls.n	2ac62 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   2ac08:	683b      	ldr	r3, [r7, #0]
   2ac0a:	685a      	ldr	r2, [r3, #4]
   2ac0c:	683b      	ldr	r3, [r7, #0]
   2ac0e:	685b      	ldr	r3, [r3, #4]
   2ac10:	3b01      	subs	r3, #1
   2ac12:	4013      	ands	r3, r2
   2ac14:	d11a      	bne.n	2ac4c <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   2ac16:	2300      	movs	r3, #0
   2ac18:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   2ac1a:	2302      	movs	r3, #2
   2ac1c:	60bb      	str	r3, [r7, #8]
   2ac1e:	e005      	b.n	2ac2c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   2ac20:	68fb      	ldr	r3, [r7, #12]
   2ac22:	3301      	adds	r3, #1
   2ac24:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   2ac26:	68bb      	ldr	r3, [r7, #8]
   2ac28:	005b      	lsls	r3, r3, #1
   2ac2a:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   2ac2c:	683b      	ldr	r3, [r7, #0]
   2ac2e:	685a      	ldr	r2, [r3, #4]
   2ac30:	68bb      	ldr	r3, [r7, #8]
   2ac32:	429a      	cmp	r2, r3
   2ac34:	d8f4      	bhi.n	2ac20 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   2ac36:	68fb      	ldr	r3, [r7, #12]
   2ac38:	021b      	lsls	r3, r3, #8
   2ac3a:	693a      	ldr	r2, [r7, #16]
   2ac3c:	4313      	orrs	r3, r2
   2ac3e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   2ac40:	697b      	ldr	r3, [r7, #20]
   2ac42:	2280      	movs	r2, #128	; 0x80
   2ac44:	0352      	lsls	r2, r2, #13
   2ac46:	4313      	orrs	r3, r2
   2ac48:	617b      	str	r3, [r7, #20]
   2ac4a:	e00a      	b.n	2ac62 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   2ac4c:	683b      	ldr	r3, [r7, #0]
   2ac4e:	685b      	ldr	r3, [r3, #4]
   2ac50:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   2ac52:	693a      	ldr	r2, [r7, #16]
   2ac54:	4313      	orrs	r3, r2
   2ac56:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   2ac58:	697b      	ldr	r3, [r7, #20]
   2ac5a:	2280      	movs	r2, #128	; 0x80
   2ac5c:	0292      	lsls	r2, r2, #10
   2ac5e:	4313      	orrs	r3, r2
   2ac60:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   2ac62:	683b      	ldr	r3, [r7, #0]
   2ac64:	7a1b      	ldrb	r3, [r3, #8]
   2ac66:	2b00      	cmp	r3, #0
   2ac68:	d004      	beq.n	2ac74 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   2ac6a:	697b      	ldr	r3, [r7, #20]
   2ac6c:	2280      	movs	r2, #128	; 0x80
   2ac6e:	0392      	lsls	r2, r2, #14
   2ac70:	4313      	orrs	r3, r2
   2ac72:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   2ac74:	46c0      	nop			; (mov r8, r8)
   2ac76:	4b13      	ldr	r3, [pc, #76]	; (2acc4 <system_gclk_gen_set_config+0x110>)
   2ac78:	4798      	blx	r3
   2ac7a:	1e03      	subs	r3, r0, #0
   2ac7c:	d1fb      	bne.n	2ac76 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2ac7e:	4b12      	ldr	r3, [pc, #72]	; (2acc8 <system_gclk_gen_set_config+0x114>)
   2ac80:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2ac82:	4a12      	ldr	r2, [pc, #72]	; (2accc <system_gclk_gen_set_config+0x118>)
   2ac84:	1dfb      	adds	r3, r7, #7
   2ac86:	781b      	ldrb	r3, [r3, #0]
   2ac88:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   2ac8a:	46c0      	nop			; (mov r8, r8)
   2ac8c:	4b0d      	ldr	r3, [pc, #52]	; (2acc4 <system_gclk_gen_set_config+0x110>)
   2ac8e:	4798      	blx	r3
   2ac90:	1e03      	subs	r3, r0, #0
   2ac92:	d1fb      	bne.n	2ac8c <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   2ac94:	4b0e      	ldr	r3, [pc, #56]	; (2acd0 <system_gclk_gen_set_config+0x11c>)
   2ac96:	693a      	ldr	r2, [r7, #16]
   2ac98:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   2ac9a:	46c0      	nop			; (mov r8, r8)
   2ac9c:	4b09      	ldr	r3, [pc, #36]	; (2acc4 <system_gclk_gen_set_config+0x110>)
   2ac9e:	4798      	blx	r3
   2aca0:	1e03      	subs	r3, r0, #0
   2aca2:	d1fb      	bne.n	2ac9c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   2aca4:	4b0a      	ldr	r3, [pc, #40]	; (2acd0 <system_gclk_gen_set_config+0x11c>)
   2aca6:	4a0a      	ldr	r2, [pc, #40]	; (2acd0 <system_gclk_gen_set_config+0x11c>)
   2aca8:	6851      	ldr	r1, [r2, #4]
   2acaa:	2280      	movs	r2, #128	; 0x80
   2acac:	0252      	lsls	r2, r2, #9
   2acae:	4011      	ands	r1, r2
   2acb0:	697a      	ldr	r2, [r7, #20]
   2acb2:	430a      	orrs	r2, r1
   2acb4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2acb6:	4b07      	ldr	r3, [pc, #28]	; (2acd4 <system_gclk_gen_set_config+0x120>)
   2acb8:	4798      	blx	r3
}
   2acba:	46c0      	nop			; (mov r8, r8)
   2acbc:	46bd      	mov	sp, r7
   2acbe:	b006      	add	sp, #24
   2acc0:	bd80      	pop	{r7, pc}
   2acc2:	46c0      	nop			; (mov r8, r8)
   2acc4:	0002ab65 	.word	0x0002ab65
   2acc8:	0002ab3d 	.word	0x0002ab3d
   2accc:	40000c08 	.word	0x40000c08
   2acd0:	40000c00 	.word	0x40000c00
   2acd4:	0002ab51 	.word	0x0002ab51

0002acd8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   2acd8:	b580      	push	{r7, lr}
   2acda:	b082      	sub	sp, #8
   2acdc:	af00      	add	r7, sp, #0
   2acde:	0002      	movs	r2, r0
   2ace0:	1dfb      	adds	r3, r7, #7
   2ace2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2ace4:	46c0      	nop			; (mov r8, r8)
   2ace6:	4b0e      	ldr	r3, [pc, #56]	; (2ad20 <system_gclk_gen_enable+0x48>)
   2ace8:	4798      	blx	r3
   2acea:	1e03      	subs	r3, r0, #0
   2acec:	d1fb      	bne.n	2ace6 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2acee:	4b0d      	ldr	r3, [pc, #52]	; (2ad24 <system_gclk_gen_enable+0x4c>)
   2acf0:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2acf2:	4a0d      	ldr	r2, [pc, #52]	; (2ad28 <system_gclk_gen_enable+0x50>)
   2acf4:	1dfb      	adds	r3, r7, #7
   2acf6:	781b      	ldrb	r3, [r3, #0]
   2acf8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2acfa:	46c0      	nop			; (mov r8, r8)
   2acfc:	4b08      	ldr	r3, [pc, #32]	; (2ad20 <system_gclk_gen_enable+0x48>)
   2acfe:	4798      	blx	r3
   2ad00:	1e03      	subs	r3, r0, #0
   2ad02:	d1fb      	bne.n	2acfc <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   2ad04:	4b09      	ldr	r3, [pc, #36]	; (2ad2c <system_gclk_gen_enable+0x54>)
   2ad06:	4a09      	ldr	r2, [pc, #36]	; (2ad2c <system_gclk_gen_enable+0x54>)
   2ad08:	6852      	ldr	r2, [r2, #4]
   2ad0a:	2180      	movs	r1, #128	; 0x80
   2ad0c:	0249      	lsls	r1, r1, #9
   2ad0e:	430a      	orrs	r2, r1
   2ad10:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2ad12:	4b07      	ldr	r3, [pc, #28]	; (2ad30 <system_gclk_gen_enable+0x58>)
   2ad14:	4798      	blx	r3
}
   2ad16:	46c0      	nop			; (mov r8, r8)
   2ad18:	46bd      	mov	sp, r7
   2ad1a:	b002      	add	sp, #8
   2ad1c:	bd80      	pop	{r7, pc}
   2ad1e:	46c0      	nop			; (mov r8, r8)
   2ad20:	0002ab65 	.word	0x0002ab65
   2ad24:	0002ab3d 	.word	0x0002ab3d
   2ad28:	40000c04 	.word	0x40000c04
   2ad2c:	40000c00 	.word	0x40000c00
   2ad30:	0002ab51 	.word	0x0002ab51

0002ad34 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   2ad34:	b580      	push	{r7, lr}
   2ad36:	b086      	sub	sp, #24
   2ad38:	af00      	add	r7, sp, #0
   2ad3a:	0002      	movs	r2, r0
   2ad3c:	1dfb      	adds	r3, r7, #7
   2ad3e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2ad40:	46c0      	nop			; (mov r8, r8)
   2ad42:	4b2a      	ldr	r3, [pc, #168]	; (2adec <system_gclk_gen_get_hz+0xb8>)
   2ad44:	4798      	blx	r3
   2ad46:	1e03      	subs	r3, r0, #0
   2ad48:	d1fb      	bne.n	2ad42 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2ad4a:	4b29      	ldr	r3, [pc, #164]	; (2adf0 <system_gclk_gen_get_hz+0xbc>)
   2ad4c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2ad4e:	4a29      	ldr	r2, [pc, #164]	; (2adf4 <system_gclk_gen_get_hz+0xc0>)
   2ad50:	1dfb      	adds	r3, r7, #7
   2ad52:	781b      	ldrb	r3, [r3, #0]
   2ad54:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2ad56:	46c0      	nop			; (mov r8, r8)
   2ad58:	4b24      	ldr	r3, [pc, #144]	; (2adec <system_gclk_gen_get_hz+0xb8>)
   2ad5a:	4798      	blx	r3
   2ad5c:	1e03      	subs	r3, r0, #0
   2ad5e:	d1fb      	bne.n	2ad58 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   2ad60:	4b25      	ldr	r3, [pc, #148]	; (2adf8 <system_gclk_gen_get_hz+0xc4>)
   2ad62:	685b      	ldr	r3, [r3, #4]
   2ad64:	04db      	lsls	r3, r3, #19
   2ad66:	0edb      	lsrs	r3, r3, #27
   2ad68:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   2ad6a:	0018      	movs	r0, r3
   2ad6c:	4b23      	ldr	r3, [pc, #140]	; (2adfc <system_gclk_gen_get_hz+0xc8>)
   2ad6e:	4798      	blx	r3
   2ad70:	0003      	movs	r3, r0
   2ad72:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2ad74:	4a1f      	ldr	r2, [pc, #124]	; (2adf4 <system_gclk_gen_get_hz+0xc0>)
   2ad76:	1dfb      	adds	r3, r7, #7
   2ad78:	781b      	ldrb	r3, [r3, #0]
   2ad7a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   2ad7c:	4b1e      	ldr	r3, [pc, #120]	; (2adf8 <system_gclk_gen_get_hz+0xc4>)
   2ad7e:	685b      	ldr	r3, [r3, #4]
   2ad80:	02db      	lsls	r3, r3, #11
   2ad82:	0fdb      	lsrs	r3, r3, #31
   2ad84:	b2da      	uxtb	r2, r3
   2ad86:	2313      	movs	r3, #19
   2ad88:	18fb      	adds	r3, r7, r3
   2ad8a:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2ad8c:	4a1c      	ldr	r2, [pc, #112]	; (2ae00 <system_gclk_gen_get_hz+0xcc>)
   2ad8e:	1dfb      	adds	r3, r7, #7
   2ad90:	781b      	ldrb	r3, [r3, #0]
   2ad92:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2ad94:	46c0      	nop			; (mov r8, r8)
   2ad96:	4b15      	ldr	r3, [pc, #84]	; (2adec <system_gclk_gen_get_hz+0xb8>)
   2ad98:	4798      	blx	r3
   2ad9a:	1e03      	subs	r3, r0, #0
   2ad9c:	d1fb      	bne.n	2ad96 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   2ad9e:	4b16      	ldr	r3, [pc, #88]	; (2adf8 <system_gclk_gen_get_hz+0xc4>)
   2ada0:	689b      	ldr	r3, [r3, #8]
   2ada2:	021b      	lsls	r3, r3, #8
   2ada4:	0c1b      	lsrs	r3, r3, #16
   2ada6:	b29b      	uxth	r3, r3
   2ada8:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   2adaa:	4b16      	ldr	r3, [pc, #88]	; (2ae04 <system_gclk_gen_get_hz+0xd0>)
   2adac:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   2adae:	2313      	movs	r3, #19
   2adb0:	18fb      	adds	r3, r7, r3
   2adb2:	781b      	ldrb	r3, [r3, #0]
   2adb4:	2b00      	cmp	r3, #0
   2adb6:	d109      	bne.n	2adcc <system_gclk_gen_get_hz+0x98>
   2adb8:	68fb      	ldr	r3, [r7, #12]
   2adba:	2b01      	cmp	r3, #1
   2adbc:	d906      	bls.n	2adcc <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   2adbe:	4b12      	ldr	r3, [pc, #72]	; (2ae08 <system_gclk_gen_get_hz+0xd4>)
   2adc0:	68f9      	ldr	r1, [r7, #12]
   2adc2:	6978      	ldr	r0, [r7, #20]
   2adc4:	4798      	blx	r3
   2adc6:	0003      	movs	r3, r0
   2adc8:	617b      	str	r3, [r7, #20]
   2adca:	e00a      	b.n	2ade2 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   2adcc:	2313      	movs	r3, #19
   2adce:	18fb      	adds	r3, r7, r3
   2add0:	781b      	ldrb	r3, [r3, #0]
   2add2:	2b00      	cmp	r3, #0
   2add4:	d005      	beq.n	2ade2 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   2add6:	68fb      	ldr	r3, [r7, #12]
   2add8:	3301      	adds	r3, #1
   2adda:	697a      	ldr	r2, [r7, #20]
   2addc:	40da      	lsrs	r2, r3
   2adde:	0013      	movs	r3, r2
   2ade0:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   2ade2:	697b      	ldr	r3, [r7, #20]
}
   2ade4:	0018      	movs	r0, r3
   2ade6:	46bd      	mov	sp, r7
   2ade8:	b006      	add	sp, #24
   2adea:	bd80      	pop	{r7, pc}
   2adec:	0002ab65 	.word	0x0002ab65
   2adf0:	0002ab3d 	.word	0x0002ab3d
   2adf4:	40000c04 	.word	0x40000c04
   2adf8:	40000c00 	.word	0x40000c00
   2adfc:	0002a495 	.word	0x0002a495
   2ae00:	40000c08 	.word	0x40000c08
   2ae04:	0002ab51 	.word	0x0002ab51
   2ae08:	00033ad5 	.word	0x00033ad5

0002ae0c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   2ae0c:	b580      	push	{r7, lr}
   2ae0e:	b084      	sub	sp, #16
   2ae10:	af00      	add	r7, sp, #0
   2ae12:	0002      	movs	r2, r0
   2ae14:	6039      	str	r1, [r7, #0]
   2ae16:	1dfb      	adds	r3, r7, #7
   2ae18:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   2ae1a:	1dfb      	adds	r3, r7, #7
   2ae1c:	781b      	ldrb	r3, [r3, #0]
   2ae1e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   2ae20:	683b      	ldr	r3, [r7, #0]
   2ae22:	781b      	ldrb	r3, [r3, #0]
   2ae24:	021b      	lsls	r3, r3, #8
   2ae26:	001a      	movs	r2, r3
   2ae28:	68fb      	ldr	r3, [r7, #12]
   2ae2a:	4313      	orrs	r3, r2
   2ae2c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   2ae2e:	1dfb      	adds	r3, r7, #7
   2ae30:	781b      	ldrb	r3, [r3, #0]
   2ae32:	0018      	movs	r0, r3
   2ae34:	4b04      	ldr	r3, [pc, #16]	; (2ae48 <system_gclk_chan_set_config+0x3c>)
   2ae36:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   2ae38:	4b04      	ldr	r3, [pc, #16]	; (2ae4c <system_gclk_chan_set_config+0x40>)
   2ae3a:	68fa      	ldr	r2, [r7, #12]
   2ae3c:	b292      	uxth	r2, r2
   2ae3e:	805a      	strh	r2, [r3, #2]
}
   2ae40:	46c0      	nop			; (mov r8, r8)
   2ae42:	46bd      	mov	sp, r7
   2ae44:	b004      	add	sp, #16
   2ae46:	bd80      	pop	{r7, pc}
   2ae48:	0002ae99 	.word	0x0002ae99
   2ae4c:	40000c00 	.word	0x40000c00

0002ae50 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   2ae50:	b580      	push	{r7, lr}
   2ae52:	b082      	sub	sp, #8
   2ae54:	af00      	add	r7, sp, #0
   2ae56:	0002      	movs	r2, r0
   2ae58:	1dfb      	adds	r3, r7, #7
   2ae5a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2ae5c:	4b0a      	ldr	r3, [pc, #40]	; (2ae88 <system_gclk_chan_enable+0x38>)
   2ae5e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2ae60:	4a0a      	ldr	r2, [pc, #40]	; (2ae8c <system_gclk_chan_enable+0x3c>)
   2ae62:	1dfb      	adds	r3, r7, #7
   2ae64:	781b      	ldrb	r3, [r3, #0]
   2ae66:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   2ae68:	4909      	ldr	r1, [pc, #36]	; (2ae90 <system_gclk_chan_enable+0x40>)
   2ae6a:	4b09      	ldr	r3, [pc, #36]	; (2ae90 <system_gclk_chan_enable+0x40>)
   2ae6c:	885b      	ldrh	r3, [r3, #2]
   2ae6e:	b29b      	uxth	r3, r3
   2ae70:	2280      	movs	r2, #128	; 0x80
   2ae72:	01d2      	lsls	r2, r2, #7
   2ae74:	4313      	orrs	r3, r2
   2ae76:	b29b      	uxth	r3, r3
   2ae78:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   2ae7a:	4b06      	ldr	r3, [pc, #24]	; (2ae94 <system_gclk_chan_enable+0x44>)
   2ae7c:	4798      	blx	r3
}
   2ae7e:	46c0      	nop			; (mov r8, r8)
   2ae80:	46bd      	mov	sp, r7
   2ae82:	b002      	add	sp, #8
   2ae84:	bd80      	pop	{r7, pc}
   2ae86:	46c0      	nop			; (mov r8, r8)
   2ae88:	0002ab3d 	.word	0x0002ab3d
   2ae8c:	40000c02 	.word	0x40000c02
   2ae90:	40000c00 	.word	0x40000c00
   2ae94:	0002ab51 	.word	0x0002ab51

0002ae98 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   2ae98:	b580      	push	{r7, lr}
   2ae9a:	b084      	sub	sp, #16
   2ae9c:	af00      	add	r7, sp, #0
   2ae9e:	0002      	movs	r2, r0
   2aea0:	1dfb      	adds	r3, r7, #7
   2aea2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2aea4:	4b1c      	ldr	r3, [pc, #112]	; (2af18 <system_gclk_chan_disable+0x80>)
   2aea6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2aea8:	4a1c      	ldr	r2, [pc, #112]	; (2af1c <system_gclk_chan_disable+0x84>)
   2aeaa:	1dfb      	adds	r3, r7, #7
   2aeac:	781b      	ldrb	r3, [r3, #0]
   2aeae:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   2aeb0:	4b1b      	ldr	r3, [pc, #108]	; (2af20 <system_gclk_chan_disable+0x88>)
   2aeb2:	885b      	ldrh	r3, [r3, #2]
   2aeb4:	051b      	lsls	r3, r3, #20
   2aeb6:	0f1b      	lsrs	r3, r3, #28
   2aeb8:	b2db      	uxtb	r3, r3
   2aeba:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   2aebc:	4a18      	ldr	r2, [pc, #96]	; (2af20 <system_gclk_chan_disable+0x88>)
   2aebe:	8853      	ldrh	r3, [r2, #2]
   2aec0:	4918      	ldr	r1, [pc, #96]	; (2af24 <system_gclk_chan_disable+0x8c>)
   2aec2:	400b      	ands	r3, r1
   2aec4:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   2aec6:	4a16      	ldr	r2, [pc, #88]	; (2af20 <system_gclk_chan_disable+0x88>)
   2aec8:	4b15      	ldr	r3, [pc, #84]	; (2af20 <system_gclk_chan_disable+0x88>)
   2aeca:	885b      	ldrh	r3, [r3, #2]
   2aecc:	b29b      	uxth	r3, r3
   2aece:	4916      	ldr	r1, [pc, #88]	; (2af28 <system_gclk_chan_disable+0x90>)
   2aed0:	400b      	ands	r3, r1
   2aed2:	b29b      	uxth	r3, r3
   2aed4:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   2aed6:	46c0      	nop			; (mov r8, r8)
   2aed8:	4b11      	ldr	r3, [pc, #68]	; (2af20 <system_gclk_chan_disable+0x88>)
   2aeda:	885b      	ldrh	r3, [r3, #2]
   2aedc:	b29b      	uxth	r3, r3
   2aede:	001a      	movs	r2, r3
   2aee0:	2380      	movs	r3, #128	; 0x80
   2aee2:	01db      	lsls	r3, r3, #7
   2aee4:	4013      	ands	r3, r2
   2aee6:	d1f7      	bne.n	2aed8 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   2aee8:	4a0d      	ldr	r2, [pc, #52]	; (2af20 <system_gclk_chan_disable+0x88>)
   2aeea:	68fb      	ldr	r3, [r7, #12]
   2aeec:	b2db      	uxtb	r3, r3
   2aeee:	1c19      	adds	r1, r3, #0
   2aef0:	230f      	movs	r3, #15
   2aef2:	400b      	ands	r3, r1
   2aef4:	b2d9      	uxtb	r1, r3
   2aef6:	8853      	ldrh	r3, [r2, #2]
   2aef8:	1c08      	adds	r0, r1, #0
   2aefa:	210f      	movs	r1, #15
   2aefc:	4001      	ands	r1, r0
   2aefe:	0208      	lsls	r0, r1, #8
   2af00:	4908      	ldr	r1, [pc, #32]	; (2af24 <system_gclk_chan_disable+0x8c>)
   2af02:	400b      	ands	r3, r1
   2af04:	1c19      	adds	r1, r3, #0
   2af06:	1c03      	adds	r3, r0, #0
   2af08:	430b      	orrs	r3, r1
   2af0a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   2af0c:	4b07      	ldr	r3, [pc, #28]	; (2af2c <system_gclk_chan_disable+0x94>)
   2af0e:	4798      	blx	r3
}
   2af10:	46c0      	nop			; (mov r8, r8)
   2af12:	46bd      	mov	sp, r7
   2af14:	b004      	add	sp, #16
   2af16:	bd80      	pop	{r7, pc}
   2af18:	0002ab3d 	.word	0x0002ab3d
   2af1c:	40000c02 	.word	0x40000c02
   2af20:	40000c00 	.word	0x40000c00
   2af24:	fffff0ff 	.word	0xfffff0ff
   2af28:	ffffbfff 	.word	0xffffbfff
   2af2c:	0002ab51 	.word	0x0002ab51

0002af30 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   2af30:	b580      	push	{r7, lr}
   2af32:	b084      	sub	sp, #16
   2af34:	af00      	add	r7, sp, #0
   2af36:	0002      	movs	r2, r0
   2af38:	1dfb      	adds	r3, r7, #7
   2af3a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   2af3c:	4b0d      	ldr	r3, [pc, #52]	; (2af74 <system_gclk_chan_get_hz+0x44>)
   2af3e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2af40:	4a0d      	ldr	r2, [pc, #52]	; (2af78 <system_gclk_chan_get_hz+0x48>)
   2af42:	1dfb      	adds	r3, r7, #7
   2af44:	781b      	ldrb	r3, [r3, #0]
   2af46:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   2af48:	4b0c      	ldr	r3, [pc, #48]	; (2af7c <system_gclk_chan_get_hz+0x4c>)
   2af4a:	885b      	ldrh	r3, [r3, #2]
   2af4c:	051b      	lsls	r3, r3, #20
   2af4e:	0f1b      	lsrs	r3, r3, #28
   2af50:	b2da      	uxtb	r2, r3
   2af52:	230f      	movs	r3, #15
   2af54:	18fb      	adds	r3, r7, r3
   2af56:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   2af58:	4b09      	ldr	r3, [pc, #36]	; (2af80 <system_gclk_chan_get_hz+0x50>)
   2af5a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   2af5c:	230f      	movs	r3, #15
   2af5e:	18fb      	adds	r3, r7, r3
   2af60:	781b      	ldrb	r3, [r3, #0]
   2af62:	0018      	movs	r0, r3
   2af64:	4b07      	ldr	r3, [pc, #28]	; (2af84 <system_gclk_chan_get_hz+0x54>)
   2af66:	4798      	blx	r3
   2af68:	0003      	movs	r3, r0
}
   2af6a:	0018      	movs	r0, r3
   2af6c:	46bd      	mov	sp, r7
   2af6e:	b004      	add	sp, #16
   2af70:	bd80      	pop	{r7, pc}
   2af72:	46c0      	nop			; (mov r8, r8)
   2af74:	0002ab3d 	.word	0x0002ab3d
   2af78:	40000c02 	.word	0x40000c02
   2af7c:	40000c00 	.word	0x40000c00
   2af80:	0002ab51 	.word	0x0002ab51
   2af84:	0002ad35 	.word	0x0002ad35

0002af88 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   2af88:	b580      	push	{r7, lr}
   2af8a:	b084      	sub	sp, #16
   2af8c:	af00      	add	r7, sp, #0
   2af8e:	0002      	movs	r2, r0
   2af90:	1dfb      	adds	r3, r7, #7
   2af92:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   2af94:	230f      	movs	r3, #15
   2af96:	18fb      	adds	r3, r7, r3
   2af98:	2200      	movs	r2, #0
   2af9a:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   2af9c:	1dfb      	adds	r3, r7, #7
   2af9e:	781b      	ldrb	r3, [r3, #0]
   2afa0:	2b7f      	cmp	r3, #127	; 0x7f
   2afa2:	d80b      	bhi.n	2afbc <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   2afa4:	4a13      	ldr	r2, [pc, #76]	; (2aff4 <system_interrupt_clear_pending+0x6c>)
   2afa6:	1dfb      	adds	r3, r7, #7
   2afa8:	781b      	ldrb	r3, [r3, #0]
   2afaa:	b25b      	sxtb	r3, r3
   2afac:	2101      	movs	r1, #1
   2afae:	4099      	lsls	r1, r3
   2afb0:	000b      	movs	r3, r1
   2afb2:	0019      	movs	r1, r3
   2afb4:	23c0      	movs	r3, #192	; 0xc0
   2afb6:	005b      	lsls	r3, r3, #1
   2afb8:	50d1      	str	r1, [r2, r3]
   2afba:	e014      	b.n	2afe6 <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   2afbc:	1dfb      	adds	r3, r7, #7
   2afbe:	781b      	ldrb	r3, [r3, #0]
   2afc0:	b25b      	sxtb	r3, r3
   2afc2:	330e      	adds	r3, #14
   2afc4:	d101      	bne.n	2afca <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   2afc6:	2317      	movs	r3, #23
   2afc8:	e010      	b.n	2afec <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   2afca:	1dfb      	adds	r3, r7, #7
   2afcc:	781b      	ldrb	r3, [r3, #0]
   2afce:	b25b      	sxtb	r3, r3
   2afd0:	3301      	adds	r3, #1
   2afd2:	d104      	bne.n	2afde <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   2afd4:	4b08      	ldr	r3, [pc, #32]	; (2aff8 <system_interrupt_clear_pending+0x70>)
   2afd6:	2280      	movs	r2, #128	; 0x80
   2afd8:	0492      	lsls	r2, r2, #18
   2afda:	605a      	str	r2, [r3, #4]
   2afdc:	e003      	b.n	2afe6 <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   2afde:	230f      	movs	r3, #15
   2afe0:	18fb      	adds	r3, r7, r3
   2afe2:	2217      	movs	r2, #23
   2afe4:	701a      	strb	r2, [r3, #0]
	}

	return status;
   2afe6:	230f      	movs	r3, #15
   2afe8:	18fb      	adds	r3, r7, r3
   2afea:	781b      	ldrb	r3, [r3, #0]
}
   2afec:	0018      	movs	r0, r3
   2afee:	46bd      	mov	sp, r7
   2aff0:	b004      	add	sp, #16
   2aff2:	bd80      	pop	{r7, pc}
   2aff4:	e000e100 	.word	0xe000e100
   2aff8:	e000ed00 	.word	0xe000ed00

0002affc <system_pinmux_get_group_from_gpio_pin>:
{
   2affc:	b580      	push	{r7, lr}
   2affe:	b084      	sub	sp, #16
   2b000:	af00      	add	r7, sp, #0
   2b002:	0002      	movs	r2, r0
   2b004:	1dfb      	adds	r3, r7, #7
   2b006:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2b008:	230f      	movs	r3, #15
   2b00a:	18fb      	adds	r3, r7, r3
   2b00c:	1dfa      	adds	r2, r7, #7
   2b00e:	7812      	ldrb	r2, [r2, #0]
   2b010:	09d2      	lsrs	r2, r2, #7
   2b012:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2b014:	230e      	movs	r3, #14
   2b016:	18fb      	adds	r3, r7, r3
   2b018:	1dfa      	adds	r2, r7, #7
   2b01a:	7812      	ldrb	r2, [r2, #0]
   2b01c:	0952      	lsrs	r2, r2, #5
   2b01e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2b020:	4b0d      	ldr	r3, [pc, #52]	; (2b058 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2b022:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2b024:	230f      	movs	r3, #15
   2b026:	18fb      	adds	r3, r7, r3
   2b028:	781b      	ldrb	r3, [r3, #0]
   2b02a:	2b00      	cmp	r3, #0
   2b02c:	d10f      	bne.n	2b04e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2b02e:	230f      	movs	r3, #15
   2b030:	18fb      	adds	r3, r7, r3
   2b032:	781b      	ldrb	r3, [r3, #0]
   2b034:	009b      	lsls	r3, r3, #2
   2b036:	2210      	movs	r2, #16
   2b038:	4694      	mov	ip, r2
   2b03a:	44bc      	add	ip, r7
   2b03c:	4463      	add	r3, ip
   2b03e:	3b08      	subs	r3, #8
   2b040:	681a      	ldr	r2, [r3, #0]
   2b042:	230e      	movs	r3, #14
   2b044:	18fb      	adds	r3, r7, r3
   2b046:	781b      	ldrb	r3, [r3, #0]
   2b048:	01db      	lsls	r3, r3, #7
   2b04a:	18d3      	adds	r3, r2, r3
   2b04c:	e000      	b.n	2b050 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2b04e:	2300      	movs	r3, #0
}
   2b050:	0018      	movs	r0, r3
   2b052:	46bd      	mov	sp, r7
   2b054:	b004      	add	sp, #16
   2b056:	bd80      	pop	{r7, pc}
   2b058:	41004400 	.word	0x41004400

0002b05c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   2b05c:	b580      	push	{r7, lr}
   2b05e:	b088      	sub	sp, #32
   2b060:	af00      	add	r7, sp, #0
   2b062:	60f8      	str	r0, [r7, #12]
   2b064:	60b9      	str	r1, [r7, #8]
   2b066:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   2b068:	2300      	movs	r3, #0
   2b06a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   2b06c:	687b      	ldr	r3, [r7, #4]
   2b06e:	78db      	ldrb	r3, [r3, #3]
   2b070:	2201      	movs	r2, #1
   2b072:	4053      	eors	r3, r2
   2b074:	b2db      	uxtb	r3, r3
   2b076:	2b00      	cmp	r3, #0
   2b078:	d035      	beq.n	2b0e6 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   2b07a:	687b      	ldr	r3, [r7, #4]
   2b07c:	781b      	ldrb	r3, [r3, #0]
   2b07e:	2b80      	cmp	r3, #128	; 0x80
   2b080:	d00b      	beq.n	2b09a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   2b082:	69fb      	ldr	r3, [r7, #28]
   2b084:	2280      	movs	r2, #128	; 0x80
   2b086:	0252      	lsls	r2, r2, #9
   2b088:	4313      	orrs	r3, r2
   2b08a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   2b08c:	687b      	ldr	r3, [r7, #4]
   2b08e:	781b      	ldrb	r3, [r3, #0]
   2b090:	061b      	lsls	r3, r3, #24
   2b092:	001a      	movs	r2, r3
   2b094:	69fb      	ldr	r3, [r7, #28]
   2b096:	4313      	orrs	r3, r2
   2b098:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2b09a:	687b      	ldr	r3, [r7, #4]
   2b09c:	785b      	ldrb	r3, [r3, #1]
   2b09e:	2b00      	cmp	r3, #0
   2b0a0:	d003      	beq.n	2b0aa <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2b0a2:	687b      	ldr	r3, [r7, #4]
   2b0a4:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2b0a6:	2b02      	cmp	r3, #2
   2b0a8:	d110      	bne.n	2b0cc <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   2b0aa:	69fb      	ldr	r3, [r7, #28]
   2b0ac:	2280      	movs	r2, #128	; 0x80
   2b0ae:	0292      	lsls	r2, r2, #10
   2b0b0:	4313      	orrs	r3, r2
   2b0b2:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   2b0b4:	687b      	ldr	r3, [r7, #4]
   2b0b6:	789b      	ldrb	r3, [r3, #2]
   2b0b8:	2b00      	cmp	r3, #0
   2b0ba:	d004      	beq.n	2b0c6 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   2b0bc:	69fb      	ldr	r3, [r7, #28]
   2b0be:	2280      	movs	r2, #128	; 0x80
   2b0c0:	02d2      	lsls	r2, r2, #11
   2b0c2:	4313      	orrs	r3, r2
   2b0c4:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   2b0c6:	68fb      	ldr	r3, [r7, #12]
   2b0c8:	68ba      	ldr	r2, [r7, #8]
   2b0ca:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2b0cc:	687b      	ldr	r3, [r7, #4]
   2b0ce:	785b      	ldrb	r3, [r3, #1]
   2b0d0:	2b01      	cmp	r3, #1
   2b0d2:	d003      	beq.n	2b0dc <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2b0d4:	687b      	ldr	r3, [r7, #4]
   2b0d6:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2b0d8:	2b02      	cmp	r3, #2
   2b0da:	d107      	bne.n	2b0ec <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   2b0dc:	69fb      	ldr	r3, [r7, #28]
   2b0de:	4a22      	ldr	r2, [pc, #136]	; (2b168 <_system_pinmux_config+0x10c>)
   2b0e0:	4013      	ands	r3, r2
   2b0e2:	61fb      	str	r3, [r7, #28]
   2b0e4:	e002      	b.n	2b0ec <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   2b0e6:	68fb      	ldr	r3, [r7, #12]
   2b0e8:	68ba      	ldr	r2, [r7, #8]
   2b0ea:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   2b0ec:	68bb      	ldr	r3, [r7, #8]
   2b0ee:	041b      	lsls	r3, r3, #16
   2b0f0:	0c1b      	lsrs	r3, r3, #16
   2b0f2:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   2b0f4:	68bb      	ldr	r3, [r7, #8]
   2b0f6:	0c1b      	lsrs	r3, r3, #16
   2b0f8:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2b0fa:	69ba      	ldr	r2, [r7, #24]
   2b0fc:	69fb      	ldr	r3, [r7, #28]
   2b0fe:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   2b100:	22a0      	movs	r2, #160	; 0xa0
   2b102:	05d2      	lsls	r2, r2, #23
   2b104:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2b106:	68fb      	ldr	r3, [r7, #12]
   2b108:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2b10a:	697a      	ldr	r2, [r7, #20]
   2b10c:	69fb      	ldr	r3, [r7, #28]
   2b10e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   2b110:	22d0      	movs	r2, #208	; 0xd0
   2b112:	0612      	lsls	r2, r2, #24
   2b114:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2b116:	68fb      	ldr	r3, [r7, #12]
   2b118:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   2b11a:	687b      	ldr	r3, [r7, #4]
   2b11c:	78db      	ldrb	r3, [r3, #3]
   2b11e:	2201      	movs	r2, #1
   2b120:	4053      	eors	r3, r2
   2b122:	b2db      	uxtb	r3, r3
   2b124:	2b00      	cmp	r3, #0
   2b126:	d01a      	beq.n	2b15e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   2b128:	69fa      	ldr	r2, [r7, #28]
   2b12a:	2380      	movs	r3, #128	; 0x80
   2b12c:	02db      	lsls	r3, r3, #11
   2b12e:	4013      	ands	r3, r2
   2b130:	d00a      	beq.n	2b148 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   2b132:	687b      	ldr	r3, [r7, #4]
   2b134:	789b      	ldrb	r3, [r3, #2]
   2b136:	2b01      	cmp	r3, #1
   2b138:	d103      	bne.n	2b142 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   2b13a:	68fb      	ldr	r3, [r7, #12]
   2b13c:	68ba      	ldr	r2, [r7, #8]
   2b13e:	619a      	str	r2, [r3, #24]
   2b140:	e002      	b.n	2b148 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   2b142:	68fb      	ldr	r3, [r7, #12]
   2b144:	68ba      	ldr	r2, [r7, #8]
   2b146:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2b148:	687b      	ldr	r3, [r7, #4]
   2b14a:	785b      	ldrb	r3, [r3, #1]
   2b14c:	2b01      	cmp	r3, #1
   2b14e:	d003      	beq.n	2b158 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2b150:	687b      	ldr	r3, [r7, #4]
   2b152:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2b154:	2b02      	cmp	r3, #2
   2b156:	d102      	bne.n	2b15e <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   2b158:	68fb      	ldr	r3, [r7, #12]
   2b15a:	68ba      	ldr	r2, [r7, #8]
   2b15c:	609a      	str	r2, [r3, #8]
		}
	}
}
   2b15e:	46c0      	nop			; (mov r8, r8)
   2b160:	46bd      	mov	sp, r7
   2b162:	b008      	add	sp, #32
   2b164:	bd80      	pop	{r7, pc}
   2b166:	46c0      	nop			; (mov r8, r8)
   2b168:	fffbffff 	.word	0xfffbffff

0002b16c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   2b16c:	b580      	push	{r7, lr}
   2b16e:	b084      	sub	sp, #16
   2b170:	af00      	add	r7, sp, #0
   2b172:	0002      	movs	r2, r0
   2b174:	6039      	str	r1, [r7, #0]
   2b176:	1dfb      	adds	r3, r7, #7
   2b178:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2b17a:	1dfb      	adds	r3, r7, #7
   2b17c:	781b      	ldrb	r3, [r3, #0]
   2b17e:	0018      	movs	r0, r3
   2b180:	4b0a      	ldr	r3, [pc, #40]	; (2b1ac <system_pinmux_pin_set_config+0x40>)
   2b182:	4798      	blx	r3
   2b184:	0003      	movs	r3, r0
   2b186:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   2b188:	1dfb      	adds	r3, r7, #7
   2b18a:	781b      	ldrb	r3, [r3, #0]
   2b18c:	221f      	movs	r2, #31
   2b18e:	4013      	ands	r3, r2
   2b190:	2201      	movs	r2, #1
   2b192:	409a      	lsls	r2, r3
   2b194:	0013      	movs	r3, r2
   2b196:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   2b198:	683a      	ldr	r2, [r7, #0]
   2b19a:	68b9      	ldr	r1, [r7, #8]
   2b19c:	68fb      	ldr	r3, [r7, #12]
   2b19e:	0018      	movs	r0, r3
   2b1a0:	4b03      	ldr	r3, [pc, #12]	; (2b1b0 <system_pinmux_pin_set_config+0x44>)
   2b1a2:	4798      	blx	r3
}
   2b1a4:	46c0      	nop			; (mov r8, r8)
   2b1a6:	46bd      	mov	sp, r7
   2b1a8:	b004      	add	sp, #16
   2b1aa:	bd80      	pop	{r7, pc}
   2b1ac:	0002affd 	.word	0x0002affd
   2b1b0:	0002b05d 	.word	0x0002b05d

0002b1b4 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   2b1b4:	b580      	push	{r7, lr}
   2b1b6:	af00      	add	r7, sp, #0
	return;
   2b1b8:	46c0      	nop			; (mov r8, r8)
}
   2b1ba:	46bd      	mov	sp, r7
   2b1bc:	bd80      	pop	{r7, pc}
	...

0002b1c0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   2b1c0:	b580      	push	{r7, lr}
   2b1c2:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   2b1c4:	4b06      	ldr	r3, [pc, #24]	; (2b1e0 <system_init+0x20>)
   2b1c6:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   2b1c8:	4b06      	ldr	r3, [pc, #24]	; (2b1e4 <system_init+0x24>)
   2b1ca:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   2b1cc:	4b06      	ldr	r3, [pc, #24]	; (2b1e8 <system_init+0x28>)
   2b1ce:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   2b1d0:	4b06      	ldr	r3, [pc, #24]	; (2b1ec <system_init+0x2c>)
   2b1d2:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   2b1d4:	4b06      	ldr	r3, [pc, #24]	; (2b1f0 <system_init+0x30>)
   2b1d6:	4798      	blx	r3
}
   2b1d8:	46c0      	nop			; (mov r8, r8)
   2b1da:	46bd      	mov	sp, r7
   2b1dc:	bd80      	pop	{r7, pc}
   2b1de:	46c0      	nop			; (mov r8, r8)
   2b1e0:	0002a841 	.word	0x0002a841
   2b1e4:	00027309 	.word	0x00027309
   2b1e8:	00013011 	.word	0x00013011
   2b1ec:	000276e1 	.word	0x000276e1
   2b1f0:	0002b1b5 	.word	0x0002b1b5

0002b1f4 <system_gclk_chan_get_config_defaults>:
{
   2b1f4:	b580      	push	{r7, lr}
   2b1f6:	b082      	sub	sp, #8
   2b1f8:	af00      	add	r7, sp, #0
   2b1fa:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2b1fc:	687b      	ldr	r3, [r7, #4]
   2b1fe:	2200      	movs	r2, #0
   2b200:	701a      	strb	r2, [r3, #0]
}
   2b202:	46c0      	nop			; (mov r8, r8)
   2b204:	46bd      	mov	sp, r7
   2b206:	b002      	add	sp, #8
   2b208:	bd80      	pop	{r7, pc}
	...

0002b20c <system_apb_clock_set_mask>:
{
   2b20c:	b580      	push	{r7, lr}
   2b20e:	b082      	sub	sp, #8
   2b210:	af00      	add	r7, sp, #0
   2b212:	0002      	movs	r2, r0
   2b214:	6039      	str	r1, [r7, #0]
   2b216:	1dfb      	adds	r3, r7, #7
   2b218:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2b21a:	1dfb      	adds	r3, r7, #7
   2b21c:	781b      	ldrb	r3, [r3, #0]
   2b21e:	2b01      	cmp	r3, #1
   2b220:	d00a      	beq.n	2b238 <system_apb_clock_set_mask+0x2c>
   2b222:	2b02      	cmp	r3, #2
   2b224:	d00f      	beq.n	2b246 <system_apb_clock_set_mask+0x3a>
   2b226:	2b00      	cmp	r3, #0
   2b228:	d114      	bne.n	2b254 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2b22a:	4b0e      	ldr	r3, [pc, #56]	; (2b264 <system_apb_clock_set_mask+0x58>)
   2b22c:	4a0d      	ldr	r2, [pc, #52]	; (2b264 <system_apb_clock_set_mask+0x58>)
   2b22e:	6991      	ldr	r1, [r2, #24]
   2b230:	683a      	ldr	r2, [r7, #0]
   2b232:	430a      	orrs	r2, r1
   2b234:	619a      	str	r2, [r3, #24]
			break;
   2b236:	e00f      	b.n	2b258 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2b238:	4b0a      	ldr	r3, [pc, #40]	; (2b264 <system_apb_clock_set_mask+0x58>)
   2b23a:	4a0a      	ldr	r2, [pc, #40]	; (2b264 <system_apb_clock_set_mask+0x58>)
   2b23c:	69d1      	ldr	r1, [r2, #28]
   2b23e:	683a      	ldr	r2, [r7, #0]
   2b240:	430a      	orrs	r2, r1
   2b242:	61da      	str	r2, [r3, #28]
			break;
   2b244:	e008      	b.n	2b258 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2b246:	4b07      	ldr	r3, [pc, #28]	; (2b264 <system_apb_clock_set_mask+0x58>)
   2b248:	4a06      	ldr	r2, [pc, #24]	; (2b264 <system_apb_clock_set_mask+0x58>)
   2b24a:	6a11      	ldr	r1, [r2, #32]
   2b24c:	683a      	ldr	r2, [r7, #0]
   2b24e:	430a      	orrs	r2, r1
   2b250:	621a      	str	r2, [r3, #32]
			break;
   2b252:	e001      	b.n	2b258 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2b254:	2317      	movs	r3, #23
   2b256:	e000      	b.n	2b25a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2b258:	2300      	movs	r3, #0
}
   2b25a:	0018      	movs	r0, r3
   2b25c:	46bd      	mov	sp, r7
   2b25e:	b002      	add	sp, #8
   2b260:	bd80      	pop	{r7, pc}
   2b262:	46c0      	nop			; (mov r8, r8)
   2b264:	40000400 	.word	0x40000400

0002b268 <system_pinmux_get_config_defaults>:
{
   2b268:	b580      	push	{r7, lr}
   2b26a:	b082      	sub	sp, #8
   2b26c:	af00      	add	r7, sp, #0
   2b26e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2b270:	687b      	ldr	r3, [r7, #4]
   2b272:	2280      	movs	r2, #128	; 0x80
   2b274:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2b276:	687b      	ldr	r3, [r7, #4]
   2b278:	2200      	movs	r2, #0
   2b27a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2b27c:	687b      	ldr	r3, [r7, #4]
   2b27e:	2201      	movs	r2, #1
   2b280:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2b282:	687b      	ldr	r3, [r7, #4]
   2b284:	2200      	movs	r2, #0
   2b286:	70da      	strb	r2, [r3, #3]
}
   2b288:	46c0      	nop			; (mov r8, r8)
   2b28a:	46bd      	mov	sp, r7
   2b28c:	b002      	add	sp, #8
   2b28e:	bd80      	pop	{r7, pc}

0002b290 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   2b290:	b580      	push	{r7, lr}
   2b292:	b084      	sub	sp, #16
   2b294:	af00      	add	r7, sp, #0
   2b296:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2b298:	2300      	movs	r3, #0
   2b29a:	60fb      	str	r3, [r7, #12]
   2b29c:	e00c      	b.n	2b2b8 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   2b29e:	4b0a      	ldr	r3, [pc, #40]	; (2b2c8 <_tcc_get_inst_index+0x38>)
   2b2a0:	68fa      	ldr	r2, [r7, #12]
   2b2a2:	0092      	lsls	r2, r2, #2
   2b2a4:	58d2      	ldr	r2, [r2, r3]
   2b2a6:	687b      	ldr	r3, [r7, #4]
   2b2a8:	429a      	cmp	r2, r3
   2b2aa:	d102      	bne.n	2b2b2 <_tcc_get_inst_index+0x22>
			return i;
   2b2ac:	68fb      	ldr	r3, [r7, #12]
   2b2ae:	b2db      	uxtb	r3, r3
   2b2b0:	e006      	b.n	2b2c0 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2b2b2:	68fb      	ldr	r3, [r7, #12]
   2b2b4:	3301      	adds	r3, #1
   2b2b6:	60fb      	str	r3, [r7, #12]
   2b2b8:	68fb      	ldr	r3, [r7, #12]
   2b2ba:	2b02      	cmp	r3, #2
   2b2bc:	d9ef      	bls.n	2b29e <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   2b2be:	2300      	movs	r3, #0
}
   2b2c0:	0018      	movs	r0, r3
   2b2c2:	46bd      	mov	sp, r7
   2b2c4:	b004      	add	sp, #16
   2b2c6:	bd80      	pop	{r7, pc}
   2b2c8:	0003b3c0 	.word	0x0003b3c0

0002b2cc <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   2b2cc:	b590      	push	{r4, r7, lr}
   2b2ce:	b085      	sub	sp, #20
   2b2d0:	af00      	add	r7, sp, #0
   2b2d2:	6078      	str	r0, [r7, #4]
   2b2d4:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2b2d6:	230f      	movs	r3, #15
   2b2d8:	18fc      	adds	r4, r7, r3
   2b2da:	683b      	ldr	r3, [r7, #0]
   2b2dc:	0018      	movs	r0, r3
   2b2de:	4bad      	ldr	r3, [pc, #692]	; (2b594 <tcc_get_config_defaults+0x2c8>)
   2b2e0:	4798      	blx	r3
   2b2e2:	0003      	movs	r3, r0
   2b2e4:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   2b2e6:	687b      	ldr	r3, [r7, #4]
   2b2e8:	2200      	movs	r2, #0
   2b2ea:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   2b2ec:	230f      	movs	r3, #15
   2b2ee:	18fb      	adds	r3, r7, r3
   2b2f0:	781a      	ldrb	r2, [r3, #0]
   2b2f2:	4ba9      	ldr	r3, [pc, #676]	; (2b598 <tcc_get_config_defaults+0x2cc>)
   2b2f4:	0092      	lsls	r2, r2, #2
   2b2f6:	58d2      	ldr	r2, [r2, r3]
   2b2f8:	687b      	ldr	r3, [r7, #4]
   2b2fa:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   2b2fc:	687b      	ldr	r3, [r7, #4]
   2b2fe:	2200      	movs	r2, #0
   2b300:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   2b302:	687b      	ldr	r3, [r7, #4]
   2b304:	2200      	movs	r2, #0
   2b306:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   2b308:	687b      	ldr	r3, [r7, #4]
   2b30a:	2200      	movs	r2, #0
   2b30c:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   2b30e:	687b      	ldr	r3, [r7, #4]
   2b310:	2200      	movs	r2, #0
   2b312:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   2b314:	687b      	ldr	r3, [r7, #4]
   2b316:	2200      	movs	r2, #0
   2b318:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2b31a:	687b      	ldr	r3, [r7, #4]
   2b31c:	2200      	movs	r2, #0
   2b31e:	61da      	str	r2, [r3, #28]
   2b320:	687b      	ldr	r3, [r7, #4]
   2b322:	2200      	movs	r2, #0
   2b324:	621a      	str	r2, [r3, #32]
   2b326:	687b      	ldr	r3, [r7, #4]
   2b328:	2200      	movs	r2, #0
   2b32a:	625a      	str	r2, [r3, #36]	; 0x24
   2b32c:	687b      	ldr	r3, [r7, #4]
   2b32e:	2200      	movs	r2, #0
   2b330:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2b332:	687b      	ldr	r3, [r7, #4]
   2b334:	2200      	movs	r2, #0
   2b336:	751a      	strb	r2, [r3, #20]
   2b338:	687b      	ldr	r3, [r7, #4]
   2b33a:	2200      	movs	r2, #0
   2b33c:	755a      	strb	r2, [r3, #21]
   2b33e:	687b      	ldr	r3, [r7, #4]
   2b340:	2200      	movs	r2, #0
   2b342:	759a      	strb	r2, [r3, #22]
   2b344:	687b      	ldr	r3, [r7, #4]
   2b346:	2200      	movs	r2, #0
   2b348:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   2b34a:	687b      	ldr	r3, [r7, #4]
   2b34c:	2200      	movs	r2, #0
   2b34e:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   2b350:	687b      	ldr	r3, [r7, #4]
   2b352:	2200      	movs	r2, #0
   2b354:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2b356:	687b      	ldr	r3, [r7, #4]
   2b358:	2200      	movs	r2, #0
   2b35a:	741a      	strb	r2, [r3, #16]
   2b35c:	687b      	ldr	r3, [r7, #4]
   2b35e:	2200      	movs	r2, #0
   2b360:	745a      	strb	r2, [r3, #17]
   2b362:	687b      	ldr	r3, [r7, #4]
   2b364:	2200      	movs	r2, #0
   2b366:	749a      	strb	r2, [r3, #18]
   2b368:	687b      	ldr	r3, [r7, #4]
   2b36a:	2200      	movs	r2, #0
   2b36c:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   2b36e:	687b      	ldr	r3, [r7, #4]
   2b370:	222c      	movs	r2, #44	; 0x2c
   2b372:	2100      	movs	r1, #0
   2b374:	5499      	strb	r1, [r3, r2]
   2b376:	687b      	ldr	r3, [r7, #4]
   2b378:	222d      	movs	r2, #45	; 0x2d
   2b37a:	2100      	movs	r1, #0
   2b37c:	5499      	strb	r1, [r3, r2]
   2b37e:	687b      	ldr	r3, [r7, #4]
   2b380:	222e      	movs	r2, #46	; 0x2e
   2b382:	2100      	movs	r1, #0
   2b384:	5499      	strb	r1, [r3, r2]
   2b386:	687b      	ldr	r3, [r7, #4]
   2b388:	222f      	movs	r2, #47	; 0x2f
   2b38a:	2100      	movs	r1, #0
   2b38c:	5499      	strb	r1, [r3, r2]
   2b38e:	687b      	ldr	r3, [r7, #4]
   2b390:	2230      	movs	r2, #48	; 0x30
   2b392:	2100      	movs	r1, #0
   2b394:	5499      	strb	r1, [r3, r2]
   2b396:	687b      	ldr	r3, [r7, #4]
   2b398:	2231      	movs	r2, #49	; 0x31
   2b39a:	2100      	movs	r1, #0
   2b39c:	5499      	strb	r1, [r3, r2]
   2b39e:	687b      	ldr	r3, [r7, #4]
   2b3a0:	2232      	movs	r2, #50	; 0x32
   2b3a2:	2100      	movs	r1, #0
   2b3a4:	5499      	strb	r1, [r3, r2]
   2b3a6:	687b      	ldr	r3, [r7, #4]
   2b3a8:	2233      	movs	r2, #51	; 0x33
   2b3aa:	2100      	movs	r1, #0
   2b3ac:	5499      	strb	r1, [r3, r2]
   2b3ae:	687b      	ldr	r3, [r7, #4]
   2b3b0:	2234      	movs	r2, #52	; 0x34
   2b3b2:	2100      	movs	r1, #0
   2b3b4:	5499      	strb	r1, [r3, r2]
   2b3b6:	687b      	ldr	r3, [r7, #4]
   2b3b8:	2235      	movs	r2, #53	; 0x35
   2b3ba:	2100      	movs	r1, #0
   2b3bc:	5499      	strb	r1, [r3, r2]
   2b3be:	687b      	ldr	r3, [r7, #4]
   2b3c0:	2236      	movs	r2, #54	; 0x36
   2b3c2:	2100      	movs	r1, #0
   2b3c4:	5499      	strb	r1, [r3, r2]
   2b3c6:	687b      	ldr	r3, [r7, #4]
   2b3c8:	2237      	movs	r2, #55	; 0x37
   2b3ca:	2100      	movs	r1, #0
   2b3cc:	5499      	strb	r1, [r3, r2]
   2b3ce:	687b      	ldr	r3, [r7, #4]
   2b3d0:	2238      	movs	r2, #56	; 0x38
   2b3d2:	2100      	movs	r1, #0
   2b3d4:	5499      	strb	r1, [r3, r2]
   2b3d6:	687b      	ldr	r3, [r7, #4]
   2b3d8:	2239      	movs	r2, #57	; 0x39
   2b3da:	2100      	movs	r1, #0
   2b3dc:	5499      	strb	r1, [r3, r2]
   2b3de:	687b      	ldr	r3, [r7, #4]
   2b3e0:	223a      	movs	r2, #58	; 0x3a
   2b3e2:	2100      	movs	r1, #0
   2b3e4:	5499      	strb	r1, [r3, r2]
   2b3e6:	687b      	ldr	r3, [r7, #4]
   2b3e8:	223b      	movs	r2, #59	; 0x3b
   2b3ea:	2100      	movs	r1, #0
   2b3ec:	5499      	strb	r1, [r3, r2]
   2b3ee:	687b      	ldr	r3, [r7, #4]
   2b3f0:	223c      	movs	r2, #60	; 0x3c
   2b3f2:	2100      	movs	r1, #0
   2b3f4:	5499      	strb	r1, [r3, r2]
   2b3f6:	687b      	ldr	r3, [r7, #4]
   2b3f8:	223d      	movs	r2, #61	; 0x3d
   2b3fa:	2100      	movs	r1, #0
   2b3fc:	5499      	strb	r1, [r3, r2]
   2b3fe:	687b      	ldr	r3, [r7, #4]
   2b400:	223e      	movs	r2, #62	; 0x3e
   2b402:	2100      	movs	r1, #0
   2b404:	5499      	strb	r1, [r3, r2]
   2b406:	687b      	ldr	r3, [r7, #4]
   2b408:	223f      	movs	r2, #63	; 0x3f
   2b40a:	2100      	movs	r1, #0
   2b40c:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   2b40e:	687b      	ldr	r3, [r7, #4]
   2b410:	2240      	movs	r2, #64	; 0x40
   2b412:	2100      	movs	r1, #0
   2b414:	5499      	strb	r1, [r3, r2]
   2b416:	687b      	ldr	r3, [r7, #4]
   2b418:	2241      	movs	r2, #65	; 0x41
   2b41a:	2100      	movs	r1, #0
   2b41c:	5499      	strb	r1, [r3, r2]
   2b41e:	687b      	ldr	r3, [r7, #4]
   2b420:	2242      	movs	r2, #66	; 0x42
   2b422:	2100      	movs	r1, #0
   2b424:	5499      	strb	r1, [r3, r2]
   2b426:	687b      	ldr	r3, [r7, #4]
   2b428:	2243      	movs	r2, #67	; 0x43
   2b42a:	2100      	movs	r1, #0
   2b42c:	5499      	strb	r1, [r3, r2]
   2b42e:	687b      	ldr	r3, [r7, #4]
   2b430:	2244      	movs	r2, #68	; 0x44
   2b432:	2100      	movs	r1, #0
   2b434:	5499      	strb	r1, [r3, r2]
   2b436:	687b      	ldr	r3, [r7, #4]
   2b438:	2245      	movs	r2, #69	; 0x45
   2b43a:	2100      	movs	r1, #0
   2b43c:	5499      	strb	r1, [r3, r2]
   2b43e:	687b      	ldr	r3, [r7, #4]
   2b440:	2246      	movs	r2, #70	; 0x46
   2b442:	2100      	movs	r1, #0
   2b444:	5499      	strb	r1, [r3, r2]
   2b446:	687b      	ldr	r3, [r7, #4]
   2b448:	2247      	movs	r2, #71	; 0x47
   2b44a:	2100      	movs	r1, #0
   2b44c:	5499      	strb	r1, [r3, r2]
   2b44e:	687b      	ldr	r3, [r7, #4]
   2b450:	2248      	movs	r2, #72	; 0x48
   2b452:	2100      	movs	r1, #0
   2b454:	5499      	strb	r1, [r3, r2]
   2b456:	687b      	ldr	r3, [r7, #4]
   2b458:	2249      	movs	r2, #73	; 0x49
   2b45a:	2100      	movs	r1, #0
   2b45c:	5499      	strb	r1, [r3, r2]
   2b45e:	687b      	ldr	r3, [r7, #4]
   2b460:	224a      	movs	r2, #74	; 0x4a
   2b462:	2100      	movs	r1, #0
   2b464:	5499      	strb	r1, [r3, r2]
   2b466:	687b      	ldr	r3, [r7, #4]
   2b468:	224b      	movs	r2, #75	; 0x4b
   2b46a:	2100      	movs	r1, #0
   2b46c:	5499      	strb	r1, [r3, r2]
   2b46e:	687b      	ldr	r3, [r7, #4]
   2b470:	224c      	movs	r2, #76	; 0x4c
   2b472:	2100      	movs	r1, #0
   2b474:	5499      	strb	r1, [r3, r2]
   2b476:	687b      	ldr	r3, [r7, #4]
   2b478:	224d      	movs	r2, #77	; 0x4d
   2b47a:	2100      	movs	r1, #0
   2b47c:	5499      	strb	r1, [r3, r2]
   2b47e:	687b      	ldr	r3, [r7, #4]
   2b480:	224e      	movs	r2, #78	; 0x4e
   2b482:	2100      	movs	r1, #0
   2b484:	5499      	strb	r1, [r3, r2]
   2b486:	687b      	ldr	r3, [r7, #4]
   2b488:	224f      	movs	r2, #79	; 0x4f
   2b48a:	2100      	movs	r1, #0
   2b48c:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   2b48e:	687b      	ldr	r3, [r7, #4]
   2b490:	2250      	movs	r2, #80	; 0x50
   2b492:	2100      	movs	r1, #0
   2b494:	5499      	strb	r1, [r3, r2]
   2b496:	687b      	ldr	r3, [r7, #4]
   2b498:	2251      	movs	r2, #81	; 0x51
   2b49a:	2100      	movs	r1, #0
   2b49c:	5499      	strb	r1, [r3, r2]
   2b49e:	687b      	ldr	r3, [r7, #4]
   2b4a0:	2252      	movs	r2, #82	; 0x52
   2b4a2:	2100      	movs	r1, #0
   2b4a4:	5499      	strb	r1, [r3, r2]
   2b4a6:	687b      	ldr	r3, [r7, #4]
   2b4a8:	2253      	movs	r2, #83	; 0x53
   2b4aa:	2100      	movs	r1, #0
   2b4ac:	5499      	strb	r1, [r3, r2]
   2b4ae:	687b      	ldr	r3, [r7, #4]
   2b4b0:	2254      	movs	r2, #84	; 0x54
   2b4b2:	2100      	movs	r1, #0
   2b4b4:	5499      	strb	r1, [r3, r2]
   2b4b6:	687b      	ldr	r3, [r7, #4]
   2b4b8:	2255      	movs	r2, #85	; 0x55
   2b4ba:	2100      	movs	r1, #0
   2b4bc:	5499      	strb	r1, [r3, r2]
   2b4be:	687b      	ldr	r3, [r7, #4]
   2b4c0:	2256      	movs	r2, #86	; 0x56
   2b4c2:	2100      	movs	r1, #0
   2b4c4:	5499      	strb	r1, [r3, r2]
   2b4c6:	687b      	ldr	r3, [r7, #4]
   2b4c8:	2257      	movs	r2, #87	; 0x57
   2b4ca:	2100      	movs	r1, #0
   2b4cc:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   2b4ce:	687b      	ldr	r3, [r7, #4]
   2b4d0:	2298      	movs	r2, #152	; 0x98
   2b4d2:	2100      	movs	r1, #0
   2b4d4:	5499      	strb	r1, [r3, r2]
   2b4d6:	687b      	ldr	r3, [r7, #4]
   2b4d8:	2200      	movs	r2, #0
   2b4da:	659a      	str	r2, [r3, #88]	; 0x58
   2b4dc:	687b      	ldr	r3, [r7, #4]
   2b4de:	2200      	movs	r2, #0
   2b4e0:	679a      	str	r2, [r3, #120]	; 0x78
   2b4e2:	687b      	ldr	r3, [r7, #4]
   2b4e4:	2299      	movs	r2, #153	; 0x99
   2b4e6:	2100      	movs	r1, #0
   2b4e8:	5499      	strb	r1, [r3, r2]
   2b4ea:	687b      	ldr	r3, [r7, #4]
   2b4ec:	2200      	movs	r2, #0
   2b4ee:	65da      	str	r2, [r3, #92]	; 0x5c
   2b4f0:	687b      	ldr	r3, [r7, #4]
   2b4f2:	2200      	movs	r2, #0
   2b4f4:	67da      	str	r2, [r3, #124]	; 0x7c
   2b4f6:	687b      	ldr	r3, [r7, #4]
   2b4f8:	229a      	movs	r2, #154	; 0x9a
   2b4fa:	2100      	movs	r1, #0
   2b4fc:	5499      	strb	r1, [r3, r2]
   2b4fe:	687b      	ldr	r3, [r7, #4]
   2b500:	2200      	movs	r2, #0
   2b502:	661a      	str	r2, [r3, #96]	; 0x60
   2b504:	687b      	ldr	r3, [r7, #4]
   2b506:	2280      	movs	r2, #128	; 0x80
   2b508:	2100      	movs	r1, #0
   2b50a:	5099      	str	r1, [r3, r2]
   2b50c:	687b      	ldr	r3, [r7, #4]
   2b50e:	229b      	movs	r2, #155	; 0x9b
   2b510:	2100      	movs	r1, #0
   2b512:	5499      	strb	r1, [r3, r2]
   2b514:	687b      	ldr	r3, [r7, #4]
   2b516:	2200      	movs	r2, #0
   2b518:	665a      	str	r2, [r3, #100]	; 0x64
   2b51a:	687b      	ldr	r3, [r7, #4]
   2b51c:	2284      	movs	r2, #132	; 0x84
   2b51e:	2100      	movs	r1, #0
   2b520:	5099      	str	r1, [r3, r2]
   2b522:	687b      	ldr	r3, [r7, #4]
   2b524:	229c      	movs	r2, #156	; 0x9c
   2b526:	2100      	movs	r1, #0
   2b528:	5499      	strb	r1, [r3, r2]
   2b52a:	687b      	ldr	r3, [r7, #4]
   2b52c:	2200      	movs	r2, #0
   2b52e:	669a      	str	r2, [r3, #104]	; 0x68
   2b530:	687b      	ldr	r3, [r7, #4]
   2b532:	2288      	movs	r2, #136	; 0x88
   2b534:	2100      	movs	r1, #0
   2b536:	5099      	str	r1, [r3, r2]
   2b538:	687b      	ldr	r3, [r7, #4]
   2b53a:	229d      	movs	r2, #157	; 0x9d
   2b53c:	2100      	movs	r1, #0
   2b53e:	5499      	strb	r1, [r3, r2]
   2b540:	687b      	ldr	r3, [r7, #4]
   2b542:	2200      	movs	r2, #0
   2b544:	66da      	str	r2, [r3, #108]	; 0x6c
   2b546:	687b      	ldr	r3, [r7, #4]
   2b548:	228c      	movs	r2, #140	; 0x8c
   2b54a:	2100      	movs	r1, #0
   2b54c:	5099      	str	r1, [r3, r2]
   2b54e:	687b      	ldr	r3, [r7, #4]
   2b550:	229e      	movs	r2, #158	; 0x9e
   2b552:	2100      	movs	r1, #0
   2b554:	5499      	strb	r1, [r3, r2]
   2b556:	687b      	ldr	r3, [r7, #4]
   2b558:	2200      	movs	r2, #0
   2b55a:	671a      	str	r2, [r3, #112]	; 0x70
   2b55c:	687b      	ldr	r3, [r7, #4]
   2b55e:	2290      	movs	r2, #144	; 0x90
   2b560:	2100      	movs	r1, #0
   2b562:	5099      	str	r1, [r3, r2]
   2b564:	687b      	ldr	r3, [r7, #4]
   2b566:	229f      	movs	r2, #159	; 0x9f
   2b568:	2100      	movs	r1, #0
   2b56a:	5499      	strb	r1, [r3, r2]
   2b56c:	687b      	ldr	r3, [r7, #4]
   2b56e:	2200      	movs	r2, #0
   2b570:	675a      	str	r2, [r3, #116]	; 0x74
   2b572:	687b      	ldr	r3, [r7, #4]
   2b574:	2294      	movs	r2, #148	; 0x94
   2b576:	2100      	movs	r1, #0
   2b578:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   2b57a:	687b      	ldr	r3, [r7, #4]
   2b57c:	22a0      	movs	r2, #160	; 0xa0
   2b57e:	2101      	movs	r1, #1
   2b580:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   2b582:	687b      	ldr	r3, [r7, #4]
   2b584:	22a1      	movs	r2, #161	; 0xa1
   2b586:	2100      	movs	r1, #0
   2b588:	5499      	strb	r1, [r3, r2]
}
   2b58a:	46c0      	nop			; (mov r8, r8)
   2b58c:	46bd      	mov	sp, r7
   2b58e:	b005      	add	sp, #20
   2b590:	bd90      	pop	{r4, r7, pc}
   2b592:	46c0      	nop			; (mov r8, r8)
   2b594:	0002b291 	.word	0x0002b291
   2b598:	0003b3dc 	.word	0x0003b3dc

0002b59c <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b59c:	b580      	push	{r7, lr}
   2b59e:	b086      	sub	sp, #24
   2b5a0:	af00      	add	r7, sp, #0
   2b5a2:	60b9      	str	r1, [r7, #8]
   2b5a4:	607a      	str	r2, [r7, #4]
   2b5a6:	230f      	movs	r3, #15
   2b5a8:	18fb      	adds	r3, r7, r3
   2b5aa:	1c02      	adds	r2, r0, #0
   2b5ac:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   2b5ae:	2300      	movs	r3, #0
   2b5b0:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b5b2:	2300      	movs	r3, #0
   2b5b4:	613b      	str	r3, [r7, #16]
   2b5b6:	e01d      	b.n	2b5f4 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   2b5b8:	68ba      	ldr	r2, [r7, #8]
   2b5ba:	693b      	ldr	r3, [r7, #16]
   2b5bc:	18d3      	adds	r3, r2, r3
   2b5be:	3310      	adds	r3, #16
   2b5c0:	781b      	ldrb	r3, [r3, #0]
   2b5c2:	2b01      	cmp	r3, #1
   2b5c4:	d113      	bne.n	2b5ee <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   2b5c6:	230f      	movs	r3, #15
   2b5c8:	18fb      	adds	r3, r7, r3
   2b5ca:	781b      	ldrb	r3, [r3, #0]
   2b5cc:	4a1b      	ldr	r2, [pc, #108]	; (2b63c <_tcc_build_ctrla+0xa0>)
   2b5ce:	5cd3      	ldrb	r3, [r2, r3]
   2b5d0:	001a      	movs	r2, r3
   2b5d2:	693b      	ldr	r3, [r7, #16]
   2b5d4:	429a      	cmp	r2, r3
   2b5d6:	da01      	bge.n	2b5dc <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   2b5d8:	2317      	movs	r3, #23
   2b5da:	e02a      	b.n	2b632 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   2b5dc:	2380      	movs	r3, #128	; 0x80
   2b5de:	045a      	lsls	r2, r3, #17
   2b5e0:	693b      	ldr	r3, [r7, #16]
   2b5e2:	409a      	lsls	r2, r3
   2b5e4:	0013      	movs	r3, r2
   2b5e6:	001a      	movs	r2, r3
   2b5e8:	697b      	ldr	r3, [r7, #20]
   2b5ea:	4313      	orrs	r3, r2
   2b5ec:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b5ee:	693b      	ldr	r3, [r7, #16]
   2b5f0:	3301      	adds	r3, #1
   2b5f2:	613b      	str	r3, [r7, #16]
   2b5f4:	693b      	ldr	r3, [r7, #16]
   2b5f6:	2b03      	cmp	r3, #3
   2b5f8:	ddde      	ble.n	2b5b8 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   2b5fa:	68bb      	ldr	r3, [r7, #8]
   2b5fc:	22a1      	movs	r2, #161	; 0xa1
   2b5fe:	5c9b      	ldrb	r3, [r3, r2]
   2b600:	2b00      	cmp	r3, #0
   2b602:	d004      	beq.n	2b60e <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   2b604:	697b      	ldr	r3, [r7, #20]
   2b606:	2280      	movs	r2, #128	; 0x80
   2b608:	0112      	lsls	r2, r2, #4
   2b60a:	4313      	orrs	r3, r2
   2b60c:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   2b60e:	68bb      	ldr	r3, [r7, #8]
   2b610:	7b1b      	ldrb	r3, [r3, #12]
   2b612:	031b      	lsls	r3, r3, #12
   2b614:	001a      	movs	r2, r3
   2b616:	697b      	ldr	r3, [r7, #20]
   2b618:	4313      	orrs	r3, r2
   2b61a:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   2b61c:	68bb      	ldr	r3, [r7, #8]
   2b61e:	7adb      	ldrb	r3, [r3, #11]
   2b620:	021b      	lsls	r3, r3, #8
   2b622:	001a      	movs	r2, r3
   2b624:	697b      	ldr	r3, [r7, #20]
   2b626:	4313      	orrs	r3, r2
   2b628:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   2b62a:	687b      	ldr	r3, [r7, #4]
   2b62c:	697a      	ldr	r2, [r7, #20]
   2b62e:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2b630:	2300      	movs	r3, #0
}
   2b632:	0018      	movs	r0, r3
   2b634:	46bd      	mov	sp, r7
   2b636:	b006      	add	sp, #24
   2b638:	bd80      	pop	{r7, pc}
   2b63a:	46c0      	nop			; (mov r8, r8)
   2b63c:	0003b3e8 	.word	0x0003b3e8

0002b640 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   2b640:	b580      	push	{r7, lr}
   2b642:	b086      	sub	sp, #24
   2b644:	af00      	add	r7, sp, #0
   2b646:	60b9      	str	r1, [r7, #8]
   2b648:	607a      	str	r2, [r7, #4]
   2b64a:	230f      	movs	r3, #15
   2b64c:	18fb      	adds	r3, r7, r3
   2b64e:	1c02      	adds	r2, r0, #0
   2b650:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   2b652:	2317      	movs	r3, #23
   2b654:	18fb      	adds	r3, r7, r3
   2b656:	2200      	movs	r2, #0
   2b658:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   2b65a:	68bb      	ldr	r3, [r7, #8]
   2b65c:	7a1b      	ldrb	r3, [r3, #8]
   2b65e:	2b00      	cmp	r3, #0
   2b660:	d007      	beq.n	2b672 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   2b662:	2317      	movs	r3, #23
   2b664:	18fb      	adds	r3, r7, r3
   2b666:	2217      	movs	r2, #23
   2b668:	18ba      	adds	r2, r7, r2
   2b66a:	7812      	ldrb	r2, [r2, #0]
   2b66c:	2104      	movs	r1, #4
   2b66e:	430a      	orrs	r2, r1
   2b670:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   2b672:	68bb      	ldr	r3, [r7, #8]
   2b674:	7a5b      	ldrb	r3, [r3, #9]
   2b676:	2b01      	cmp	r3, #1
   2b678:	d107      	bne.n	2b68a <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   2b67a:	2317      	movs	r3, #23
   2b67c:	18fb      	adds	r3, r7, r3
   2b67e:	2217      	movs	r2, #23
   2b680:	18ba      	adds	r2, r7, r2
   2b682:	7812      	ldrb	r2, [r2, #0]
   2b684:	2101      	movs	r1, #1
   2b686:	430a      	orrs	r2, r1
   2b688:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   2b68a:	687b      	ldr	r3, [r7, #4]
   2b68c:	2217      	movs	r2, #23
   2b68e:	18ba      	adds	r2, r7, r2
   2b690:	7812      	ldrb	r2, [r2, #0]
   2b692:	701a      	strb	r2, [r3, #0]
}
   2b694:	46c0      	nop			; (mov r8, r8)
   2b696:	46bd      	mov	sp, r7
   2b698:	b006      	add	sp, #24
   2b69a:	bd80      	pop	{r7, pc}

0002b69c <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b69c:	b580      	push	{r7, lr}
   2b69e:	b088      	sub	sp, #32
   2b6a0:	af00      	add	r7, sp, #0
   2b6a2:	60b9      	str	r1, [r7, #8]
   2b6a4:	607a      	str	r2, [r7, #4]
   2b6a6:	230f      	movs	r3, #15
   2b6a8:	18fb      	adds	r3, r7, r3
   2b6aa:	1c02      	adds	r2, r0, #0
   2b6ac:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   2b6ae:	230f      	movs	r3, #15
   2b6b0:	18fb      	adds	r3, r7, r3
   2b6b2:	781a      	ldrb	r2, [r3, #0]
   2b6b4:	231b      	movs	r3, #27
   2b6b6:	18fb      	adds	r3, r7, r3
   2b6b8:	493e      	ldr	r1, [pc, #248]	; (2b7b4 <_tcc_build_faults+0x118>)
   2b6ba:	5c8a      	ldrb	r2, [r1, r2]
   2b6bc:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2b6be:	2300      	movs	r3, #0
   2b6c0:	61fb      	str	r3, [r7, #28]
   2b6c2:	e06e      	b.n	2b7a2 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   2b6c4:	69fa      	ldr	r2, [r7, #28]
   2b6c6:	0013      	movs	r3, r2
   2b6c8:	009b      	lsls	r3, r3, #2
   2b6ca:	189b      	adds	r3, r3, r2
   2b6cc:	005b      	lsls	r3, r3, #1
   2b6ce:	3328      	adds	r3, #40	; 0x28
   2b6d0:	68ba      	ldr	r2, [r7, #8]
   2b6d2:	18d3      	adds	r3, r2, r3
   2b6d4:	3304      	adds	r3, #4
   2b6d6:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   2b6d8:	697b      	ldr	r3, [r7, #20]
   2b6da:	7a5b      	ldrb	r3, [r3, #9]
   2b6dc:	221b      	movs	r2, #27
   2b6de:	18ba      	adds	r2, r7, r2
   2b6e0:	7812      	ldrb	r2, [r2, #0]
   2b6e2:	429a      	cmp	r2, r3
   2b6e4:	d801      	bhi.n	2b6ea <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   2b6e6:	2317      	movs	r3, #23
   2b6e8:	e05f      	b.n	2b7aa <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   2b6ea:	697b      	ldr	r3, [r7, #20]
   2b6ec:	781b      	ldrb	r3, [r3, #0]
   2b6ee:	2b0f      	cmp	r3, #15
   2b6f0:	d901      	bls.n	2b6f6 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   2b6f2:	2317      	movs	r3, #23
   2b6f4:	e059      	b.n	2b7aa <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2b6f6:	697b      	ldr	r3, [r7, #20]
   2b6f8:	781b      	ldrb	r3, [r3, #0]
   2b6fa:	061b      	lsls	r3, r3, #24
   2b6fc:	001a      	movs	r2, r3
   2b6fe:	23f0      	movs	r3, #240	; 0xf0
   2b700:	051b      	lsls	r3, r3, #20
   2b702:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   2b704:	697b      	ldr	r3, [r7, #20]
   2b706:	785b      	ldrb	r3, [r3, #1]
   2b708:	041b      	lsls	r3, r3, #16
   2b70a:	0019      	movs	r1, r3
   2b70c:	23ff      	movs	r3, #255	; 0xff
   2b70e:	041b      	lsls	r3, r3, #16
   2b710:	400b      	ands	r3, r1
   2b712:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   2b714:	697b      	ldr	r3, [r7, #20]
   2b716:	789b      	ldrb	r3, [r3, #2]
   2b718:	2b00      	cmp	r3, #0
   2b71a:	d001      	beq.n	2b720 <_tcc_build_faults+0x84>
   2b71c:	2380      	movs	r3, #128	; 0x80
   2b71e:	e000      	b.n	2b722 <_tcc_build_faults+0x86>
   2b720:	2300      	movs	r3, #0
   2b722:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   2b724:	697b      	ldr	r3, [r7, #20]
   2b726:	78db      	ldrb	r3, [r3, #3]
   2b728:	2b00      	cmp	r3, #0
   2b72a:	d001      	beq.n	2b730 <_tcc_build_faults+0x94>
   2b72c:	2308      	movs	r3, #8
   2b72e:	e000      	b.n	2b732 <_tcc_build_faults+0x96>
   2b730:	2300      	movs	r3, #0
   2b732:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   2b734:	697b      	ldr	r3, [r7, #20]
   2b736:	791b      	ldrb	r3, [r3, #4]
   2b738:	2b00      	cmp	r3, #0
   2b73a:	d001      	beq.n	2b740 <_tcc_build_faults+0xa4>
   2b73c:	2310      	movs	r3, #16
   2b73e:	e000      	b.n	2b742 <_tcc_build_faults+0xa6>
   2b740:	2300      	movs	r3, #0
   2b742:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   2b744:	697b      	ldr	r3, [r7, #20]
   2b746:	795b      	ldrb	r3, [r3, #5]
   2b748:	0019      	movs	r1, r3
   2b74a:	2303      	movs	r3, #3
   2b74c:	400b      	ands	r3, r1
   2b74e:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   2b750:	697b      	ldr	r3, [r7, #20]
   2b752:	799b      	ldrb	r3, [r3, #6]
   2b754:	015b      	lsls	r3, r3, #5
   2b756:	0019      	movs	r1, r3
   2b758:	2360      	movs	r3, #96	; 0x60
   2b75a:	400b      	ands	r3, r1
   2b75c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   2b75e:	697b      	ldr	r3, [r7, #20]
   2b760:	79db      	ldrb	r3, [r3, #7]
   2b762:	021b      	lsls	r3, r3, #8
   2b764:	0019      	movs	r1, r3
   2b766:	23c0      	movs	r3, #192	; 0xc0
   2b768:	009b      	lsls	r3, r3, #2
   2b76a:	400b      	ands	r3, r1
   2b76c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   2b76e:	697b      	ldr	r3, [r7, #20]
   2b770:	7a1b      	ldrb	r3, [r3, #8]
   2b772:	031b      	lsls	r3, r3, #12
   2b774:	0019      	movs	r1, r3
   2b776:	23e0      	movs	r3, #224	; 0xe0
   2b778:	01db      	lsls	r3, r3, #7
   2b77a:	400b      	ands	r3, r1
   2b77c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   2b77e:	697b      	ldr	r3, [r7, #20]
   2b780:	7a5b      	ldrb	r3, [r3, #9]
   2b782:	029b      	lsls	r3, r3, #10
   2b784:	0019      	movs	r1, r3
   2b786:	23c0      	movs	r3, #192	; 0xc0
   2b788:	011b      	lsls	r3, r3, #4
   2b78a:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2b78c:	4313      	orrs	r3, r2
   2b78e:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   2b790:	69fb      	ldr	r3, [r7, #28]
   2b792:	009b      	lsls	r3, r3, #2
   2b794:	687a      	ldr	r2, [r7, #4]
   2b796:	18d3      	adds	r3, r2, r3
   2b798:	693a      	ldr	r2, [r7, #16]
   2b79a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2b79c:	69fb      	ldr	r3, [r7, #28]
   2b79e:	3301      	adds	r3, #1
   2b7a0:	61fb      	str	r3, [r7, #28]
   2b7a2:	69fb      	ldr	r3, [r7, #28]
   2b7a4:	2b01      	cmp	r3, #1
   2b7a6:	dd8d      	ble.n	2b6c4 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   2b7a8:	2300      	movs	r3, #0
}
   2b7aa:	0018      	movs	r0, r3
   2b7ac:	46bd      	mov	sp, r7
   2b7ae:	b008      	add	sp, #32
   2b7b0:	bd80      	pop	{r7, pc}
   2b7b2:	46c0      	nop			; (mov r8, r8)
   2b7b4:	0003b3e8 	.word	0x0003b3e8

0002b7b8 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b7b8:	b580      	push	{r7, lr}
   2b7ba:	b088      	sub	sp, #32
   2b7bc:	af00      	add	r7, sp, #0
   2b7be:	60b9      	str	r1, [r7, #8]
   2b7c0:	607a      	str	r2, [r7, #4]
   2b7c2:	230f      	movs	r3, #15
   2b7c4:	18fb      	adds	r3, r7, r3
   2b7c6:	1c02      	adds	r2, r0, #0
   2b7c8:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2b7ca:	230f      	movs	r3, #15
   2b7cc:	18fb      	adds	r3, r7, r3
   2b7ce:	781a      	ldrb	r2, [r3, #0]
   2b7d0:	2317      	movs	r3, #23
   2b7d2:	18fb      	adds	r3, r7, r3
   2b7d4:	492d      	ldr	r1, [pc, #180]	; (2b88c <_tcc_build_drvctrl+0xd4>)
   2b7d6:	5c8a      	ldrb	r2, [r1, r2]
   2b7d8:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2b7da:	2300      	movs	r3, #0
   2b7dc:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b7de:	2300      	movs	r3, #0
   2b7e0:	61fb      	str	r3, [r7, #28]
   2b7e2:	e048      	b.n	2b876 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   2b7e4:	68ba      	ldr	r2, [r7, #8]
   2b7e6:	2150      	movs	r1, #80	; 0x50
   2b7e8:	69fb      	ldr	r3, [r7, #28]
   2b7ea:	18d3      	adds	r3, r2, r3
   2b7ec:	185b      	adds	r3, r3, r1
   2b7ee:	781b      	ldrb	r3, [r3, #0]
   2b7f0:	2b00      	cmp	r3, #0
   2b7f2:	d010      	beq.n	2b816 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   2b7f4:	2317      	movs	r3, #23
   2b7f6:	18fb      	adds	r3, r7, r3
   2b7f8:	781a      	ldrb	r2, [r3, #0]
   2b7fa:	69fb      	ldr	r3, [r7, #28]
   2b7fc:	429a      	cmp	r2, r3
   2b7fe:	d801      	bhi.n	2b804 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   2b800:	2317      	movs	r3, #23
   2b802:	e03f      	b.n	2b884 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   2b804:	2380      	movs	r3, #128	; 0x80
   2b806:	025a      	lsls	r2, r3, #9
   2b808:	69fb      	ldr	r3, [r7, #28]
   2b80a:	409a      	lsls	r2, r3
   2b80c:	0013      	movs	r3, r2
   2b80e:	001a      	movs	r2, r3
   2b810:	69bb      	ldr	r3, [r7, #24]
   2b812:	4313      	orrs	r3, r2
   2b814:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   2b816:	68ba      	ldr	r2, [r7, #8]
   2b818:	69fb      	ldr	r3, [r7, #28]
   2b81a:	331c      	adds	r3, #28
   2b81c:	005b      	lsls	r3, r3, #1
   2b81e:	18d3      	adds	r3, r2, r3
   2b820:	3309      	adds	r3, #9
   2b822:	781b      	ldrb	r3, [r3, #0]
   2b824:	2b00      	cmp	r3, #0
   2b826:	d023      	beq.n	2b870 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   2b828:	2317      	movs	r3, #23
   2b82a:	18fb      	adds	r3, r7, r3
   2b82c:	781a      	ldrb	r2, [r3, #0]
   2b82e:	69fb      	ldr	r3, [r7, #28]
   2b830:	429a      	cmp	r2, r3
   2b832:	d801      	bhi.n	2b838 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   2b834:	2317      	movs	r3, #23
   2b836:	e025      	b.n	2b884 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   2b838:	68ba      	ldr	r2, [r7, #8]
   2b83a:	69fb      	ldr	r3, [r7, #28]
   2b83c:	331c      	adds	r3, #28
   2b83e:	005b      	lsls	r3, r3, #1
   2b840:	18d3      	adds	r3, r2, r3
   2b842:	3309      	adds	r3, #9
   2b844:	781b      	ldrb	r3, [r3, #0]
   2b846:	2b02      	cmp	r3, #2
   2b848:	d10a      	bne.n	2b860 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   2b84a:	2302      	movs	r3, #2
   2b84c:	33ff      	adds	r3, #255	; 0xff
   2b84e:	001a      	movs	r2, r3
   2b850:	69fb      	ldr	r3, [r7, #28]
   2b852:	409a      	lsls	r2, r3
   2b854:	0013      	movs	r3, r2
   2b856:	001a      	movs	r2, r3
   2b858:	69bb      	ldr	r3, [r7, #24]
   2b85a:	4313      	orrs	r3, r2
   2b85c:	61bb      	str	r3, [r7, #24]
   2b85e:	e007      	b.n	2b870 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   2b860:	2201      	movs	r2, #1
   2b862:	69fb      	ldr	r3, [r7, #28]
   2b864:	409a      	lsls	r2, r3
   2b866:	0013      	movs	r3, r2
   2b868:	001a      	movs	r2, r3
   2b86a:	69bb      	ldr	r3, [r7, #24]
   2b86c:	4313      	orrs	r3, r2
   2b86e:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b870:	69fb      	ldr	r3, [r7, #28]
   2b872:	3301      	adds	r3, #1
   2b874:	61fb      	str	r3, [r7, #28]
   2b876:	69fb      	ldr	r3, [r7, #28]
   2b878:	2b07      	cmp	r3, #7
   2b87a:	d9b3      	bls.n	2b7e4 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   2b87c:	687b      	ldr	r3, [r7, #4]
   2b87e:	69ba      	ldr	r2, [r7, #24]
   2b880:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2b882:	2300      	movs	r3, #0
}
   2b884:	0018      	movs	r0, r3
   2b886:	46bd      	mov	sp, r7
   2b888:	b008      	add	sp, #32
   2b88a:	bd80      	pop	{r7, pc}
   2b88c:	0003b3ec 	.word	0x0003b3ec

0002b890 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b890:	b580      	push	{r7, lr}
   2b892:	b088      	sub	sp, #32
   2b894:	af00      	add	r7, sp, #0
   2b896:	60b9      	str	r1, [r7, #8]
   2b898:	607a      	str	r2, [r7, #4]
   2b89a:	230f      	movs	r3, #15
   2b89c:	18fb      	adds	r3, r7, r3
   2b89e:	1c02      	adds	r2, r0, #0
   2b8a0:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   2b8a2:	230f      	movs	r3, #15
   2b8a4:	18fb      	adds	r3, r7, r3
   2b8a6:	781a      	ldrb	r2, [r3, #0]
   2b8a8:	2317      	movs	r3, #23
   2b8aa:	18fb      	adds	r3, r7, r3
   2b8ac:	491d      	ldr	r1, [pc, #116]	; (2b924 <_tcc_build_waves+0x94>)
   2b8ae:	5c8a      	ldrb	r2, [r1, r2]
   2b8b0:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   2b8b2:	68bb      	ldr	r3, [r7, #8]
   2b8b4:	3310      	adds	r3, #16
   2b8b6:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2b8b8:	693b      	ldr	r3, [r7, #16]
   2b8ba:	7a5b      	ldrb	r3, [r3, #9]
   2b8bc:	011b      	lsls	r3, r3, #4
   2b8be:	001a      	movs	r2, r3
   2b8c0:	2330      	movs	r3, #48	; 0x30
   2b8c2:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   2b8c4:	693b      	ldr	r3, [r7, #16]
   2b8c6:	7a1b      	ldrb	r3, [r3, #8]
   2b8c8:	0019      	movs	r1, r3
   2b8ca:	2307      	movs	r3, #7
   2b8cc:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2b8ce:	4313      	orrs	r3, r2
   2b8d0:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2b8d2:	2300      	movs	r3, #0
   2b8d4:	61fb      	str	r3, [r7, #28]
   2b8d6:	e01a      	b.n	2b90e <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   2b8d8:	693a      	ldr	r2, [r7, #16]
   2b8da:	69fb      	ldr	r3, [r7, #28]
   2b8dc:	18d3      	adds	r3, r2, r3
   2b8de:	3304      	adds	r3, #4
   2b8e0:	781b      	ldrb	r3, [r3, #0]
   2b8e2:	2b00      	cmp	r3, #0
   2b8e4:	d010      	beq.n	2b908 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   2b8e6:	2317      	movs	r3, #23
   2b8e8:	18fb      	adds	r3, r7, r3
   2b8ea:	781a      	ldrb	r2, [r3, #0]
   2b8ec:	69fb      	ldr	r3, [r7, #28]
   2b8ee:	429a      	cmp	r2, r3
   2b8f0:	dc01      	bgt.n	2b8f6 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   2b8f2:	2317      	movs	r3, #23
   2b8f4:	e012      	b.n	2b91c <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   2b8f6:	2380      	movs	r3, #128	; 0x80
   2b8f8:	025a      	lsls	r2, r3, #9
   2b8fa:	69fb      	ldr	r3, [r7, #28]
   2b8fc:	409a      	lsls	r2, r3
   2b8fe:	0013      	movs	r3, r2
   2b900:	001a      	movs	r2, r3
   2b902:	69bb      	ldr	r3, [r7, #24]
   2b904:	4313      	orrs	r3, r2
   2b906:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2b908:	69fb      	ldr	r3, [r7, #28]
   2b90a:	3301      	adds	r3, #1
   2b90c:	61fb      	str	r3, [r7, #28]
   2b90e:	69fb      	ldr	r3, [r7, #28]
   2b910:	2b03      	cmp	r3, #3
   2b912:	dde1      	ble.n	2b8d8 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   2b914:	687b      	ldr	r3, [r7, #4]
   2b916:	69ba      	ldr	r2, [r7, #24]
   2b918:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   2b91a:	2300      	movs	r3, #0
}
   2b91c:	0018      	movs	r0, r3
   2b91e:	46bd      	mov	sp, r7
   2b920:	b008      	add	sp, #32
   2b922:	bd80      	pop	{r7, pc}
   2b924:	0003b3e8 	.word	0x0003b3e8

0002b928 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   2b928:	b590      	push	{r4, r7, lr}
   2b92a:	b091      	sub	sp, #68	; 0x44
   2b92c:	af00      	add	r7, sp, #0
   2b92e:	60f8      	str	r0, [r7, #12]
   2b930:	60b9      	str	r1, [r7, #8]
   2b932:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2b934:	233b      	movs	r3, #59	; 0x3b
   2b936:	18fc      	adds	r4, r7, r3
   2b938:	68bb      	ldr	r3, [r7, #8]
   2b93a:	0018      	movs	r0, r3
   2b93c:	4bc4      	ldr	r3, [pc, #784]	; (2bc50 <tcc_init+0x328>)
   2b93e:	4798      	blx	r3
   2b940:	0003      	movs	r3, r0
   2b942:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   2b944:	233b      	movs	r3, #59	; 0x3b
   2b946:	18fb      	adds	r3, r7, r3
   2b948:	781a      	ldrb	r2, [r3, #0]
   2b94a:	4bc2      	ldr	r3, [pc, #776]	; (2bc54 <tcc_init+0x32c>)
   2b94c:	0092      	lsls	r2, r2, #2
   2b94e:	58d3      	ldr	r3, [r2, r3]
   2b950:	0019      	movs	r1, r3
   2b952:	2002      	movs	r0, #2
   2b954:	4bc0      	ldr	r3, [pc, #768]	; (2bc58 <tcc_init+0x330>)
   2b956:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   2b958:	68bb      	ldr	r3, [r7, #8]
   2b95a:	681b      	ldr	r3, [r3, #0]
   2b95c:	2202      	movs	r2, #2
   2b95e:	4013      	ands	r3, r2
   2b960:	d001      	beq.n	2b966 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   2b962:	231c      	movs	r3, #28
   2b964:	e1be      	b.n	2bce4 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   2b966:	68bb      	ldr	r3, [r7, #8]
   2b968:	681b      	ldr	r3, [r3, #0]
   2b96a:	2201      	movs	r2, #1
   2b96c:	4013      	ands	r3, r2
   2b96e:	d001      	beq.n	2b974 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   2b970:	231c      	movs	r3, #28
   2b972:	e1b7      	b.n	2bce4 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   2b974:	233b      	movs	r3, #59	; 0x3b
   2b976:	18fb      	adds	r3, r7, r3
   2b978:	781a      	ldrb	r2, [r3, #0]
   2b97a:	4bb8      	ldr	r3, [pc, #736]	; (2bc5c <tcc_init+0x334>)
   2b97c:	0092      	lsls	r2, r2, #2
   2b97e:	58d3      	ldr	r3, [r2, r3]
   2b980:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   2b982:	687b      	ldr	r3, [r7, #4]
   2b984:	681a      	ldr	r2, [r3, #0]
   2b986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b988:	429a      	cmp	r2, r3
   2b98a:	d804      	bhi.n	2b996 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   2b98c:	687b      	ldr	r3, [r7, #4]
   2b98e:	685a      	ldr	r2, [r3, #4]
   2b990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b992:	429a      	cmp	r2, r3
   2b994:	d901      	bls.n	2b99a <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   2b996:	2317      	movs	r3, #23
   2b998:	e1a4      	b.n	2bce4 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b99a:	2300      	movs	r3, #0
   2b99c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b99e:	e00e      	b.n	2b9be <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   2b9a0:	687a      	ldr	r2, [r7, #4]
   2b9a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b9a4:	3306      	adds	r3, #6
   2b9a6:	009b      	lsls	r3, r3, #2
   2b9a8:	18d3      	adds	r3, r2, r3
   2b9aa:	3304      	adds	r3, #4
   2b9ac:	681a      	ldr	r2, [r3, #0]
   2b9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b9b0:	429a      	cmp	r2, r3
   2b9b2:	d901      	bls.n	2b9b8 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   2b9b4:	2317      	movs	r3, #23
   2b9b6:	e195      	b.n	2bce4 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b9b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b9ba:	3301      	adds	r3, #1
   2b9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b9be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b9c0:	2b03      	cmp	r3, #3
   2b9c2:	dded      	ble.n	2b9a0 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b9c4:	2300      	movs	r3, #0
   2b9c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b9c8:	e019      	b.n	2b9fe <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   2b9ca:	687a      	ldr	r2, [r7, #4]
   2b9cc:	2198      	movs	r1, #152	; 0x98
   2b9ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b9d0:	18d3      	adds	r3, r2, r3
   2b9d2:	185b      	adds	r3, r3, r1
   2b9d4:	781b      	ldrb	r3, [r3, #0]
   2b9d6:	2201      	movs	r2, #1
   2b9d8:	4053      	eors	r3, r2
   2b9da:	b2db      	uxtb	r3, r3
   2b9dc:	2b00      	cmp	r3, #0
   2b9de:	d10a      	bne.n	2b9f6 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   2b9e0:	233b      	movs	r3, #59	; 0x3b
   2b9e2:	18fb      	adds	r3, r7, r3
   2b9e4:	781b      	ldrb	r3, [r3, #0]
   2b9e6:	4a9e      	ldr	r2, [pc, #632]	; (2bc60 <tcc_init+0x338>)
   2b9e8:	5cd3      	ldrb	r3, [r2, r3]
   2b9ea:	001a      	movs	r2, r3
   2b9ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b9ee:	429a      	cmp	r2, r3
   2b9f0:	dc02      	bgt.n	2b9f8 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   2b9f2:	2317      	movs	r3, #23
   2b9f4:	e176      	b.n	2bce4 <tcc_init+0x3bc>
			continue;
   2b9f6:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b9f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b9fa:	3301      	adds	r3, #1
   2b9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b9fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ba00:	2b07      	cmp	r3, #7
   2ba02:	dde2      	ble.n	2b9ca <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   2ba04:	2300      	movs	r3, #0
   2ba06:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   2ba08:	2333      	movs	r3, #51	; 0x33
   2ba0a:	18fc      	adds	r4, r7, r3
   2ba0c:	232c      	movs	r3, #44	; 0x2c
   2ba0e:	18fa      	adds	r2, r7, r3
   2ba10:	6879      	ldr	r1, [r7, #4]
   2ba12:	233b      	movs	r3, #59	; 0x3b
   2ba14:	18fb      	adds	r3, r7, r3
   2ba16:	781b      	ldrb	r3, [r3, #0]
   2ba18:	0018      	movs	r0, r3
   2ba1a:	4b92      	ldr	r3, [pc, #584]	; (2bc64 <tcc_init+0x33c>)
   2ba1c:	4798      	blx	r3
   2ba1e:	0003      	movs	r3, r0
   2ba20:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2ba22:	2333      	movs	r3, #51	; 0x33
   2ba24:	18fb      	adds	r3, r7, r3
   2ba26:	781b      	ldrb	r3, [r3, #0]
   2ba28:	2b00      	cmp	r3, #0
   2ba2a:	d003      	beq.n	2ba34 <tcc_init+0x10c>
		return status;
   2ba2c:	2333      	movs	r3, #51	; 0x33
   2ba2e:	18fb      	adds	r3, r7, r3
   2ba30:	781b      	ldrb	r3, [r3, #0]
   2ba32:	e157      	b.n	2bce4 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   2ba34:	232b      	movs	r3, #43	; 0x2b
   2ba36:	18fa      	adds	r2, r7, r3
   2ba38:	6879      	ldr	r1, [r7, #4]
   2ba3a:	233b      	movs	r3, #59	; 0x3b
   2ba3c:	18fb      	adds	r3, r7, r3
   2ba3e:	781b      	ldrb	r3, [r3, #0]
   2ba40:	0018      	movs	r0, r3
   2ba42:	4b89      	ldr	r3, [pc, #548]	; (2bc68 <tcc_init+0x340>)
   2ba44:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   2ba46:	2333      	movs	r3, #51	; 0x33
   2ba48:	18fc      	adds	r4, r7, r3
   2ba4a:	2320      	movs	r3, #32
   2ba4c:	18fa      	adds	r2, r7, r3
   2ba4e:	6879      	ldr	r1, [r7, #4]
   2ba50:	233b      	movs	r3, #59	; 0x3b
   2ba52:	18fb      	adds	r3, r7, r3
   2ba54:	781b      	ldrb	r3, [r3, #0]
   2ba56:	0018      	movs	r0, r3
   2ba58:	4b84      	ldr	r3, [pc, #528]	; (2bc6c <tcc_init+0x344>)
   2ba5a:	4798      	blx	r3
   2ba5c:	0003      	movs	r3, r0
   2ba5e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2ba60:	2333      	movs	r3, #51	; 0x33
   2ba62:	18fb      	adds	r3, r7, r3
   2ba64:	781b      	ldrb	r3, [r3, #0]
   2ba66:	2b00      	cmp	r3, #0
   2ba68:	d003      	beq.n	2ba72 <tcc_init+0x14a>
		return status;
   2ba6a:	2333      	movs	r3, #51	; 0x33
   2ba6c:	18fb      	adds	r3, r7, r3
   2ba6e:	781b      	ldrb	r3, [r3, #0]
   2ba70:	e138      	b.n	2bce4 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   2ba72:	2300      	movs	r3, #0
   2ba74:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   2ba76:	2333      	movs	r3, #51	; 0x33
   2ba78:	18fc      	adds	r4, r7, r3
   2ba7a:	231c      	movs	r3, #28
   2ba7c:	18fa      	adds	r2, r7, r3
   2ba7e:	6879      	ldr	r1, [r7, #4]
   2ba80:	233b      	movs	r3, #59	; 0x3b
   2ba82:	18fb      	adds	r3, r7, r3
   2ba84:	781b      	ldrb	r3, [r3, #0]
   2ba86:	0018      	movs	r0, r3
   2ba88:	4b79      	ldr	r3, [pc, #484]	; (2bc70 <tcc_init+0x348>)
   2ba8a:	4798      	blx	r3
   2ba8c:	0003      	movs	r3, r0
   2ba8e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2ba90:	2333      	movs	r3, #51	; 0x33
   2ba92:	18fb      	adds	r3, r7, r3
   2ba94:	781b      	ldrb	r3, [r3, #0]
   2ba96:	2b00      	cmp	r3, #0
   2ba98:	d003      	beq.n	2baa2 <tcc_init+0x17a>
		return status;
   2ba9a:	2333      	movs	r3, #51	; 0x33
   2ba9c:	18fb      	adds	r3, r7, r3
   2ba9e:	781b      	ldrb	r3, [r3, #0]
   2baa0:	e120      	b.n	2bce4 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   2baa2:	2333      	movs	r3, #51	; 0x33
   2baa4:	18fc      	adds	r4, r7, r3
   2baa6:	2318      	movs	r3, #24
   2baa8:	18fa      	adds	r2, r7, r3
   2baaa:	6879      	ldr	r1, [r7, #4]
   2baac:	233b      	movs	r3, #59	; 0x3b
   2baae:	18fb      	adds	r3, r7, r3
   2bab0:	781b      	ldrb	r3, [r3, #0]
   2bab2:	0018      	movs	r0, r3
   2bab4:	4b6f      	ldr	r3, [pc, #444]	; (2bc74 <tcc_init+0x34c>)
   2bab6:	4798      	blx	r3
   2bab8:	0003      	movs	r3, r0
   2baba:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2babc:	2333      	movs	r3, #51	; 0x33
   2babe:	18fb      	adds	r3, r7, r3
   2bac0:	781b      	ldrb	r3, [r3, #0]
   2bac2:	2b00      	cmp	r3, #0
   2bac4:	d003      	beq.n	2bace <tcc_init+0x1a6>
		return status;
   2bac6:	2333      	movs	r3, #51	; 0x33
   2bac8:	18fb      	adds	r3, r7, r3
   2baca:	781b      	ldrb	r3, [r3, #0]
   2bacc:	e10a      	b.n	2bce4 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2bace:	2300      	movs	r3, #0
   2bad0:	63fb      	str	r3, [r7, #60]	; 0x3c
   2bad2:	e009      	b.n	2bae8 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   2bad4:	68fa      	ldr	r2, [r7, #12]
   2bad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2bad8:	009b      	lsls	r3, r3, #2
   2bada:	18d3      	adds	r3, r2, r3
   2badc:	3304      	adds	r3, #4
   2bade:	2200      	movs	r2, #0
   2bae0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2bae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2bae4:	3301      	adds	r3, #1
   2bae6:	63fb      	str	r3, [r7, #60]	; 0x3c
   2bae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2baea:	2b0b      	cmp	r3, #11
   2baec:	ddf2      	ble.n	2bad4 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   2baee:	68fb      	ldr	r3, [r7, #12]
   2baf0:	2200      	movs	r2, #0
   2baf2:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   2baf4:	68fb      	ldr	r3, [r7, #12]
   2baf6:	2200      	movs	r2, #0
   2baf8:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   2bafa:	233b      	movs	r3, #59	; 0x3b
   2bafc:	18fb      	adds	r3, r7, r3
   2bafe:	781a      	ldrb	r2, [r3, #0]
   2bb00:	4b5d      	ldr	r3, [pc, #372]	; (2bc78 <tcc_init+0x350>)
   2bb02:	0092      	lsls	r2, r2, #2
   2bb04:	68f9      	ldr	r1, [r7, #12]
   2bb06:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   2bb08:	68fb      	ldr	r3, [r7, #12]
   2bb0a:	68ba      	ldr	r2, [r7, #8]
   2bb0c:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   2bb0e:	687b      	ldr	r3, [r7, #4]
   2bb10:	22a0      	movs	r2, #160	; 0xa0
   2bb12:	5c99      	ldrb	r1, [r3, r2]
   2bb14:	68fb      	ldr	r3, [r7, #12]
   2bb16:	223c      	movs	r2, #60	; 0x3c
   2bb18:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   2bb1a:	2314      	movs	r3, #20
   2bb1c:	18fb      	adds	r3, r7, r3
   2bb1e:	0018      	movs	r0, r3
   2bb20:	4b56      	ldr	r3, [pc, #344]	; (2bc7c <tcc_init+0x354>)
   2bb22:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   2bb24:	687b      	ldr	r3, [r7, #4]
   2bb26:	7a9a      	ldrb	r2, [r3, #10]
   2bb28:	2314      	movs	r3, #20
   2bb2a:	18fb      	adds	r3, r7, r3
   2bb2c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   2bb2e:	233b      	movs	r3, #59	; 0x3b
   2bb30:	18fb      	adds	r3, r7, r3
   2bb32:	781b      	ldrb	r3, [r3, #0]
   2bb34:	4a52      	ldr	r2, [pc, #328]	; (2bc80 <tcc_init+0x358>)
   2bb36:	5cd3      	ldrb	r3, [r2, r3]
   2bb38:	2214      	movs	r2, #20
   2bb3a:	18ba      	adds	r2, r7, r2
   2bb3c:	0011      	movs	r1, r2
   2bb3e:	0018      	movs	r0, r3
   2bb40:	4b50      	ldr	r3, [pc, #320]	; (2bc84 <tcc_init+0x35c>)
   2bb42:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   2bb44:	233b      	movs	r3, #59	; 0x3b
   2bb46:	18fb      	adds	r3, r7, r3
   2bb48:	781b      	ldrb	r3, [r3, #0]
   2bb4a:	4a4d      	ldr	r2, [pc, #308]	; (2bc80 <tcc_init+0x358>)
   2bb4c:	5cd3      	ldrb	r3, [r2, r3]
   2bb4e:	0018      	movs	r0, r3
   2bb50:	4b4d      	ldr	r3, [pc, #308]	; (2bc88 <tcc_init+0x360>)
   2bb52:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2bb54:	2300      	movs	r3, #0
   2bb56:	63fb      	str	r3, [r7, #60]	; 0x3c
   2bb58:	e02d      	b.n	2bbb6 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   2bb5a:	687a      	ldr	r2, [r7, #4]
   2bb5c:	2198      	movs	r1, #152	; 0x98
   2bb5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2bb60:	18d3      	adds	r3, r2, r3
   2bb62:	185b      	adds	r3, r3, r1
   2bb64:	781b      	ldrb	r3, [r3, #0]
   2bb66:	2201      	movs	r2, #1
   2bb68:	4053      	eors	r3, r2
   2bb6a:	b2db      	uxtb	r3, r3
   2bb6c:	2b00      	cmp	r3, #0
   2bb6e:	d11e      	bne.n	2bbae <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   2bb70:	2310      	movs	r3, #16
   2bb72:	18fb      	adds	r3, r7, r3
   2bb74:	0018      	movs	r0, r3
   2bb76:	4b45      	ldr	r3, [pc, #276]	; (2bc8c <tcc_init+0x364>)
   2bb78:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   2bb7a:	687b      	ldr	r3, [r7, #4]
   2bb7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2bb7e:	321e      	adds	r2, #30
   2bb80:	0092      	lsls	r2, r2, #2
   2bb82:	58d3      	ldr	r3, [r2, r3]
   2bb84:	b2da      	uxtb	r2, r3
   2bb86:	2310      	movs	r3, #16
   2bb88:	18fb      	adds	r3, r7, r3
   2bb8a:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   2bb8c:	2310      	movs	r3, #16
   2bb8e:	18fb      	adds	r3, r7, r3
   2bb90:	2201      	movs	r2, #1
   2bb92:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   2bb94:	687b      	ldr	r3, [r7, #4]
   2bb96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2bb98:	3216      	adds	r2, #22
   2bb9a:	0092      	lsls	r2, r2, #2
   2bb9c:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   2bb9e:	b2db      	uxtb	r3, r3
   2bba0:	2210      	movs	r2, #16
   2bba2:	18ba      	adds	r2, r7, r2
   2bba4:	0011      	movs	r1, r2
   2bba6:	0018      	movs	r0, r3
   2bba8:	4b39      	ldr	r3, [pc, #228]	; (2bc90 <tcc_init+0x368>)
   2bbaa:	4798      	blx	r3
   2bbac:	e000      	b.n	2bbb0 <tcc_init+0x288>
			continue;
   2bbae:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2bbb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2bbb2:	3301      	adds	r3, #1
   2bbb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   2bbb6:	233b      	movs	r3, #59	; 0x3b
   2bbb8:	18fb      	adds	r3, r7, r3
   2bbba:	781b      	ldrb	r3, [r3, #0]
   2bbbc:	4a28      	ldr	r2, [pc, #160]	; (2bc60 <tcc_init+0x338>)
   2bbbe:	5cd3      	ldrb	r3, [r2, r3]
   2bbc0:	001a      	movs	r2, r3
   2bbc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2bbc4:	429a      	cmp	r2, r3
   2bbc6:	dcc8      	bgt.n	2bb5a <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   2bbc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2bbca:	68bb      	ldr	r3, [r7, #8]
   2bbcc:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2bbce:	46c0      	nop			; (mov r8, r8)
   2bbd0:	68bb      	ldr	r3, [r7, #8]
   2bbd2:	689b      	ldr	r3, [r3, #8]
   2bbd4:	2204      	movs	r2, #4
   2bbd6:	4013      	ands	r3, r2
   2bbd8:	d1fa      	bne.n	2bbd0 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2bbda:	68bb      	ldr	r3, [r7, #8]
   2bbdc:	22ff      	movs	r2, #255	; 0xff
   2bbde:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2bbe0:	46c0      	nop			; (mov r8, r8)
   2bbe2:	68bb      	ldr	r3, [r7, #8]
   2bbe4:	689b      	ldr	r3, [r3, #8]
   2bbe6:	2204      	movs	r2, #4
   2bbe8:	4013      	ands	r3, r2
   2bbea:	d1fa      	bne.n	2bbe2 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   2bbec:	232b      	movs	r3, #43	; 0x2b
   2bbee:	18fb      	adds	r3, r7, r3
   2bbf0:	781a      	ldrb	r2, [r3, #0]
   2bbf2:	68bb      	ldr	r3, [r7, #8]
   2bbf4:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   2bbf6:	2320      	movs	r3, #32
   2bbf8:	18fb      	adds	r3, r7, r3
   2bbfa:	681a      	ldr	r2, [r3, #0]
   2bbfc:	68bb      	ldr	r3, [r7, #8]
   2bbfe:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   2bc00:	2320      	movs	r3, #32
   2bc02:	18fb      	adds	r3, r7, r3
   2bc04:	685a      	ldr	r2, [r3, #4]
   2bc06:	68bb      	ldr	r3, [r7, #8]
   2bc08:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2bc0a:	69fa      	ldr	r2, [r7, #28]
   2bc0c:	68bb      	ldr	r3, [r7, #8]
   2bc0e:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   2bc10:	46c0      	nop			; (mov r8, r8)
   2bc12:	68bb      	ldr	r3, [r7, #8]
   2bc14:	689b      	ldr	r3, [r3, #8]
   2bc16:	4a1f      	ldr	r2, [pc, #124]	; (2bc94 <tcc_init+0x36c>)
   2bc18:	4013      	ands	r3, r2
   2bc1a:	d1fa      	bne.n	2bc12 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   2bc1c:	69ba      	ldr	r2, [r7, #24]
   2bc1e:	68bb      	ldr	r3, [r7, #8]
   2bc20:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   2bc22:	46c0      	nop			; (mov r8, r8)
   2bc24:	68bb      	ldr	r3, [r7, #8]
   2bc26:	689b      	ldr	r3, [r3, #8]
   2bc28:	2210      	movs	r2, #16
   2bc2a:	4013      	ands	r3, r2
   2bc2c:	d1fa      	bne.n	2bc24 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   2bc2e:	687b      	ldr	r3, [r7, #4]
   2bc30:	681a      	ldr	r2, [r3, #0]
   2bc32:	68bb      	ldr	r3, [r7, #8]
   2bc34:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   2bc36:	46c0      	nop			; (mov r8, r8)
   2bc38:	68bb      	ldr	r3, [r7, #8]
   2bc3a:	689b      	ldr	r3, [r3, #8]
   2bc3c:	4a16      	ldr	r2, [pc, #88]	; (2bc98 <tcc_init+0x370>)
   2bc3e:	4013      	ands	r3, r2
   2bc40:	d1fa      	bne.n	2bc38 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   2bc42:	687b      	ldr	r3, [r7, #4]
   2bc44:	685a      	ldr	r2, [r3, #4]
   2bc46:	68bb      	ldr	r3, [r7, #8]
   2bc48:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2bc4a:	2300      	movs	r3, #0
   2bc4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2bc4e:	e03f      	b.n	2bcd0 <tcc_init+0x3a8>
   2bc50:	0002b291 	.word	0x0002b291
   2bc54:	0003b3d0 	.word	0x0003b3d0
   2bc58:	0002b20d 	.word	0x0002b20d
   2bc5c:	0003b3dc 	.word	0x0003b3dc
   2bc60:	0003b3ec 	.word	0x0003b3ec
   2bc64:	0002b59d 	.word	0x0002b59d
   2bc68:	0002b641 	.word	0x0002b641
   2bc6c:	0002b69d 	.word	0x0002b69d
   2bc70:	0002b7b9 	.word	0x0002b7b9
   2bc74:	0002b891 	.word	0x0002b891
   2bc78:	20005cb8 	.word	0x20005cb8
   2bc7c:	0002b1f5 	.word	0x0002b1f5
   2bc80:	0003b3cc 	.word	0x0003b3cc
   2bc84:	0002ae0d 	.word	0x0002ae0d
   2bc88:	0002ae51 	.word	0x0002ae51
   2bc8c:	0002b269 	.word	0x0002b269
   2bc90:	0002b16d 	.word	0x0002b16d
   2bc94:	00020040 	.word	0x00020040
   2bc98:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2bc9c:	46c0      	nop			; (mov r8, r8)
   2bc9e:	68bb      	ldr	r3, [r7, #8]
   2bca0:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   2bca2:	4912      	ldr	r1, [pc, #72]	; (2bcec <tcc_init+0x3c4>)
   2bca4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2bca6:	4091      	lsls	r1, r2
   2bca8:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2bcaa:	4013      	ands	r3, r2
   2bcac:	d1f7      	bne.n	2bc9e <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2bcae:	687a      	ldr	r2, [r7, #4]
   2bcb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2bcb2:	3306      	adds	r3, #6
   2bcb4:	009b      	lsls	r3, r3, #2
   2bcb6:	18d3      	adds	r3, r2, r3
   2bcb8:	3304      	adds	r3, #4
   2bcba:	681a      	ldr	r2, [r3, #0]
   2bcbc:	68b9      	ldr	r1, [r7, #8]
   2bcbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2bcc0:	3310      	adds	r3, #16
   2bcc2:	009b      	lsls	r3, r3, #2
   2bcc4:	18cb      	adds	r3, r1, r3
   2bcc6:	3304      	adds	r3, #4
   2bcc8:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2bcca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2bccc:	3301      	adds	r3, #1
   2bcce:	63fb      	str	r3, [r7, #60]	; 0x3c
   2bcd0:	233b      	movs	r3, #59	; 0x3b
   2bcd2:	18fb      	adds	r3, r7, r3
   2bcd4:	781b      	ldrb	r3, [r3, #0]
   2bcd6:	4a06      	ldr	r2, [pc, #24]	; (2bcf0 <tcc_init+0x3c8>)
   2bcd8:	5cd3      	ldrb	r3, [r2, r3]
   2bcda:	001a      	movs	r2, r3
   2bcdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2bcde:	429a      	cmp	r2, r3
   2bce0:	dcdc      	bgt.n	2bc9c <tcc_init+0x374>
	}

	return STATUS_OK;
   2bce2:	2300      	movs	r3, #0
}
   2bce4:	0018      	movs	r0, r3
   2bce6:	46bd      	mov	sp, r7
   2bce8:	b011      	add	sp, #68	; 0x44
   2bcea:	bd90      	pop	{r4, r7, pc}
   2bcec:	00080100 	.word	0x00080100
   2bcf0:	0003b3e8 	.word	0x0003b3e8

0002bcf4 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
   2bcf4:	b590      	push	{r4, r7, lr}
   2bcf6:	b089      	sub	sp, #36	; 0x24
   2bcf8:	af00      	add	r7, sp, #0
   2bcfa:	60f8      	str	r0, [r7, #12]
   2bcfc:	0008      	movs	r0, r1
   2bcfe:	607a      	str	r2, [r7, #4]
   2bd00:	0019      	movs	r1, r3
   2bd02:	230b      	movs	r3, #11
   2bd04:	18fb      	adds	r3, r7, r3
   2bd06:	1c02      	adds	r2, r0, #0
   2bd08:	701a      	strb	r2, [r3, #0]
   2bd0a:	230a      	movs	r3, #10
   2bd0c:	18fb      	adds	r3, r7, r3
   2bd0e:	1c0a      	adds	r2, r1, #0
   2bd10:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   2bd12:	68fb      	ldr	r3, [r7, #12]
   2bd14:	681b      	ldr	r3, [r3, #0]
   2bd16:	61fb      	str	r3, [r7, #28]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
   2bd18:	231b      	movs	r3, #27
   2bd1a:	18fc      	adds	r4, r7, r3
   2bd1c:	69fb      	ldr	r3, [r7, #28]
   2bd1e:	0018      	movs	r0, r3
   2bd20:	4b2e      	ldr	r3, [pc, #184]	; (2bddc <_tcc_set_compare_value+0xe8>)
   2bd22:	4798      	blx	r3
   2bd24:	0003      	movs	r3, r0
   2bd26:	7023      	strb	r3, [r4, #0]

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
   2bd28:	231b      	movs	r3, #27
   2bd2a:	18fb      	adds	r3, r7, r3
   2bd2c:	781b      	ldrb	r3, [r3, #0]
   2bd2e:	4a2c      	ldr	r2, [pc, #176]	; (2bde0 <_tcc_set_compare_value+0xec>)
   2bd30:	5cd3      	ldrb	r3, [r2, r3]
   2bd32:	220b      	movs	r2, #11
   2bd34:	18ba      	adds	r2, r7, r2
   2bd36:	7812      	ldrb	r2, [r2, #0]
   2bd38:	429a      	cmp	r2, r3
   2bd3a:	d301      	bcc.n	2bd40 <_tcc_set_compare_value+0x4c>
		return STATUS_ERR_INVALID_ARG;
   2bd3c:	2317      	movs	r3, #23
   2bd3e:	e049      	b.n	2bdd4 <_tcc_set_compare_value+0xe0>
	}

	uint32_t max_count = _tcc_maxs[module_index];
   2bd40:	231b      	movs	r3, #27
   2bd42:	18fb      	adds	r3, r7, r3
   2bd44:	781a      	ldrb	r2, [r3, #0]
   2bd46:	4b27      	ldr	r3, [pc, #156]	; (2bde4 <_tcc_set_compare_value+0xf0>)
   2bd48:	0092      	lsls	r2, r2, #2
   2bd4a:	58d3      	ldr	r3, [r2, r3]
   2bd4c:	617b      	str	r3, [r7, #20]

	/* Check compare value */
	if (compare > max_count) {
   2bd4e:	687a      	ldr	r2, [r7, #4]
   2bd50:	697b      	ldr	r3, [r7, #20]
   2bd52:	429a      	cmp	r2, r3
   2bd54:	d901      	bls.n	2bd5a <_tcc_set_compare_value+0x66>
		return STATUS_ERR_INVALID_ARG;
   2bd56:	2317      	movs	r3, #23
   2bd58:	e03c      	b.n	2bdd4 <_tcc_set_compare_value+0xe0>
	}

	if (double_buffering_enabled) {
   2bd5a:	230a      	movs	r3, #10
   2bd5c:	18fb      	adds	r3, r7, r3
   2bd5e:	781b      	ldrb	r3, [r3, #0]
   2bd60:	2b00      	cmp	r3, #0
   2bd62:	d020      	beq.n	2bda6 <_tcc_set_compare_value+0xb2>
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22) || (SAMR30)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->STATUS.reg  &
   2bd64:	46c0      	nop			; (mov r8, r8)
   2bd66:	69fb      	ldr	r3, [r7, #28]
   2bd68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				(TCC_STATUS_CCBV0 << channel_index)) {
   2bd6a:	220b      	movs	r2, #11
   2bd6c:	18ba      	adds	r2, r7, r2
   2bd6e:	7812      	ldrb	r2, [r2, #0]
   2bd70:	2180      	movs	r1, #128	; 0x80
   2bd72:	0249      	lsls	r1, r1, #9
   2bd74:	4091      	lsls	r1, r2
   2bd76:	000a      	movs	r2, r1
		while(tcc_module->STATUS.reg  &
   2bd78:	4013      	ands	r3, r2
   2bd7a:	d1f4      	bne.n	2bd66 <_tcc_set_compare_value+0x72>
			/* Valid check */
		}
		while(tcc_module->SYNCBUSY.reg  &
   2bd7c:	46c0      	nop			; (mov r8, r8)
   2bd7e:	69fb      	ldr	r3, [r7, #28]
   2bd80:	689b      	ldr	r3, [r3, #8]
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
   2bd82:	220b      	movs	r2, #11
   2bd84:	18ba      	adds	r2, r7, r2
   2bd86:	7812      	ldrb	r2, [r2, #0]
   2bd88:	2180      	movs	r1, #128	; 0x80
   2bd8a:	0309      	lsls	r1, r1, #12
   2bd8c:	4091      	lsls	r1, r2
   2bd8e:	000a      	movs	r2, r1
		while(tcc_module->SYNCBUSY.reg  &
   2bd90:	4013      	ands	r3, r2
   2bd92:	d1f4      	bne.n	2bd7e <_tcc_set_compare_value+0x8a>
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
   2bd94:	230b      	movs	r3, #11
   2bd96:	18fb      	adds	r3, r7, r3
   2bd98:	781a      	ldrb	r2, [r3, #0]
   2bd9a:	69fb      	ldr	r3, [r7, #28]
   2bd9c:	321c      	adds	r2, #28
   2bd9e:	0092      	lsls	r2, r2, #2
   2bda0:	6879      	ldr	r1, [r7, #4]
   2bda2:	50d1      	str	r1, [r2, r3]
   2bda4:	e015      	b.n	2bdd2 <_tcc_set_compare_value+0xde>
#endif
	} else {
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
   2bda6:	46c0      	nop			; (mov r8, r8)
   2bda8:	69fb      	ldr	r3, [r7, #28]
   2bdaa:	689b      	ldr	r3, [r3, #8]
   2bdac:	220b      	movs	r2, #11
   2bdae:	18ba      	adds	r2, r7, r2
   2bdb0:	7812      	ldrb	r2, [r2, #0]
   2bdb2:	2180      	movs	r1, #128	; 0x80
   2bdb4:	0049      	lsls	r1, r1, #1
   2bdb6:	4091      	lsls	r1, r2
   2bdb8:	000a      	movs	r2, r1
   2bdba:	4013      	ands	r3, r2
   2bdbc:	d1f4      	bne.n	2bda8 <_tcc_set_compare_value+0xb4>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
   2bdbe:	230b      	movs	r3, #11
   2bdc0:	18fb      	adds	r3, r7, r3
   2bdc2:	781b      	ldrb	r3, [r3, #0]
   2bdc4:	69fa      	ldr	r2, [r7, #28]
   2bdc6:	3310      	adds	r3, #16
   2bdc8:	009b      	lsls	r3, r3, #2
   2bdca:	18d3      	adds	r3, r2, r3
   2bdcc:	3304      	adds	r3, #4
   2bdce:	687a      	ldr	r2, [r7, #4]
   2bdd0:	601a      	str	r2, [r3, #0]
	}
	return STATUS_OK;
   2bdd2:	2300      	movs	r3, #0
}
   2bdd4:	0018      	movs	r0, r3
   2bdd6:	46bd      	mov	sp, r7
   2bdd8:	b009      	add	sp, #36	; 0x24
   2bdda:	bd90      	pop	{r4, r7, pc}
   2bddc:	0002b291 	.word	0x0002b291
   2bde0:	0003b3e8 	.word	0x0003b3e8
   2bde4:	0003b3dc 	.word	0x0003b3dc

0002bde8 <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
   2bde8:	b590      	push	{r4, r7, lr}
   2bdea:	b085      	sub	sp, #20
   2bdec:	af00      	add	r7, sp, #0
   2bdee:	60f8      	str	r0, [r7, #12]
   2bdf0:	607a      	str	r2, [r7, #4]
   2bdf2:	230b      	movs	r3, #11
   2bdf4:	18fb      	adds	r3, r7, r3
   2bdf6:	1c0a      	adds	r2, r1, #0
   2bdf8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
   2bdfa:	68fb      	ldr	r3, [r7, #12]
   2bdfc:	223c      	movs	r2, #60	; 0x3c
   2bdfe:	5c9c      	ldrb	r4, [r3, r2]
   2be00:	687a      	ldr	r2, [r7, #4]
   2be02:	230b      	movs	r3, #11
   2be04:	18fb      	adds	r3, r7, r3
   2be06:	7819      	ldrb	r1, [r3, #0]
   2be08:	68f8      	ldr	r0, [r7, #12]
   2be0a:	0023      	movs	r3, r4
   2be0c:	4c03      	ldr	r4, [pc, #12]	; (2be1c <tcc_set_compare_value+0x34>)
   2be0e:	47a0      	blx	r4
   2be10:	0003      	movs	r3, r0
			module_inst->double_buffering_enabled);
}
   2be12:	0018      	movs	r0, r3
   2be14:	46bd      	mov	sp, r7
   2be16:	b005      	add	sp, #20
   2be18:	bd90      	pop	{r4, r7, pc}
   2be1a:	46c0      	nop			; (mov r8, r8)
   2be1c:	0002bcf5 	.word	0x0002bcf5

0002be20 <system_interrupt_enable>:
{
   2be20:	b580      	push	{r7, lr}
   2be22:	b082      	sub	sp, #8
   2be24:	af00      	add	r7, sp, #0
   2be26:	0002      	movs	r2, r0
   2be28:	1dfb      	adds	r3, r7, #7
   2be2a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2be2c:	4b06      	ldr	r3, [pc, #24]	; (2be48 <system_interrupt_enable+0x28>)
   2be2e:	1dfa      	adds	r2, r7, #7
   2be30:	7812      	ldrb	r2, [r2, #0]
   2be32:	0011      	movs	r1, r2
   2be34:	221f      	movs	r2, #31
   2be36:	400a      	ands	r2, r1
   2be38:	2101      	movs	r1, #1
   2be3a:	4091      	lsls	r1, r2
   2be3c:	000a      	movs	r2, r1
   2be3e:	601a      	str	r2, [r3, #0]
}
   2be40:	46c0      	nop			; (mov r8, r8)
   2be42:	46bd      	mov	sp, r7
   2be44:	b002      	add	sp, #8
   2be46:	bd80      	pop	{r7, pc}
   2be48:	e000e100 	.word	0xe000e100

0002be4c <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   2be4c:	b580      	push	{r7, lr}
   2be4e:	b082      	sub	sp, #8
   2be50:	af00      	add	r7, sp, #0
   2be52:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   2be54:	4a04      	ldr	r2, [pc, #16]	; (2be68 <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2be56:	687b      	ldr	r3, [r7, #4]
   2be58:	18d3      	adds	r3, r2, r3
   2be5a:	781b      	ldrb	r3, [r3, #0]
   2be5c:	b25b      	sxtb	r3, r3
}
   2be5e:	0018      	movs	r0, r3
   2be60:	46bd      	mov	sp, r7
   2be62:	b002      	add	sp, #8
   2be64:	bd80      	pop	{r7, pc}
   2be66:	46c0      	nop			; (mov r8, r8)
   2be68:	20000128 	.word	0x20000128

0002be6c <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   2be6c:	b580      	push	{r7, lr}
   2be6e:	b084      	sub	sp, #16
   2be70:	af00      	add	r7, sp, #0
   2be72:	60f8      	str	r0, [r7, #12]
   2be74:	60b9      	str	r1, [r7, #8]
   2be76:	1dfb      	adds	r3, r7, #7
   2be78:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2be7a:	1dfb      	adds	r3, r7, #7
   2be7c:	781b      	ldrb	r3, [r3, #0]
   2be7e:	68fa      	ldr	r2, [r7, #12]
   2be80:	009b      	lsls	r3, r3, #2
   2be82:	18d3      	adds	r3, r2, r3
   2be84:	3304      	adds	r3, #4
   2be86:	68ba      	ldr	r2, [r7, #8]
   2be88:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   2be8a:	68fb      	ldr	r3, [r7, #12]
   2be8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2be8e:	1dfb      	adds	r3, r7, #7
   2be90:	7819      	ldrb	r1, [r3, #0]
   2be92:	4b05      	ldr	r3, [pc, #20]	; (2bea8 <tcc_register_callback+0x3c>)
   2be94:	0089      	lsls	r1, r1, #2
   2be96:	58cb      	ldr	r3, [r1, r3]
   2be98:	431a      	orrs	r2, r3
   2be9a:	68fb      	ldr	r3, [r7, #12]
   2be9c:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   2be9e:	2300      	movs	r3, #0
}
   2bea0:	0018      	movs	r0, r3
   2bea2:	46bd      	mov	sp, r7
   2bea4:	b004      	add	sp, #16
   2bea6:	bd80      	pop	{r7, pc}
   2bea8:	0003b3f0 	.word	0x0003b3f0

0002beac <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   2beac:	b580      	push	{r7, lr}
   2beae:	b082      	sub	sp, #8
   2beb0:	af00      	add	r7, sp, #0
   2beb2:	6078      	str	r0, [r7, #4]
   2beb4:	000a      	movs	r2, r1
   2beb6:	1cfb      	adds	r3, r7, #3
   2beb8:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2beba:	687b      	ldr	r3, [r7, #4]
   2bebc:	681b      	ldr	r3, [r3, #0]
   2bebe:	0018      	movs	r0, r3
   2bec0:	4b0f      	ldr	r3, [pc, #60]	; (2bf00 <tcc_enable_callback+0x54>)
   2bec2:	4798      	blx	r3
   2bec4:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2bec6:	0018      	movs	r0, r3
   2bec8:	4b0e      	ldr	r3, [pc, #56]	; (2bf04 <tcc_enable_callback+0x58>)
   2beca:	4798      	blx	r3
   2becc:	0003      	movs	r3, r0
   2bece:	0018      	movs	r0, r3
   2bed0:	4b0d      	ldr	r3, [pc, #52]	; (2bf08 <tcc_enable_callback+0x5c>)
   2bed2:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2bed4:	687b      	ldr	r3, [r7, #4]
   2bed6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2bed8:	1cfb      	adds	r3, r7, #3
   2beda:	7819      	ldrb	r1, [r3, #0]
   2bedc:	4b0b      	ldr	r3, [pc, #44]	; (2bf0c <tcc_enable_callback+0x60>)
   2bede:	0089      	lsls	r1, r1, #2
   2bee0:	58cb      	ldr	r3, [r1, r3]
   2bee2:	431a      	orrs	r2, r3
   2bee4:	687b      	ldr	r3, [r7, #4]
   2bee6:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2bee8:	687b      	ldr	r3, [r7, #4]
   2beea:	681b      	ldr	r3, [r3, #0]
   2beec:	1cfa      	adds	r2, r7, #3
   2beee:	7811      	ldrb	r1, [r2, #0]
   2bef0:	4a06      	ldr	r2, [pc, #24]	; (2bf0c <tcc_enable_callback+0x60>)
   2bef2:	0089      	lsls	r1, r1, #2
   2bef4:	588a      	ldr	r2, [r1, r2]
   2bef6:	629a      	str	r2, [r3, #40]	; 0x28
}
   2bef8:	46c0      	nop			; (mov r8, r8)
   2befa:	46bd      	mov	sp, r7
   2befc:	b002      	add	sp, #8
   2befe:	bd80      	pop	{r7, pc}
   2bf00:	0002b291 	.word	0x0002b291
   2bf04:	0002be4d 	.word	0x0002be4d
   2bf08:	0002be21 	.word	0x0002be21
   2bf0c:	0003b3f0 	.word	0x0003b3f0

0002bf10 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2bf10:	b580      	push	{r7, lr}
   2bf12:	af00      	add	r7, sp, #0
   2bf14:	2000      	movs	r0, #0
   2bf16:	4b02      	ldr	r3, [pc, #8]	; (2bf20 <TCC0_Handler+0x10>)
   2bf18:	4798      	blx	r3
   2bf1a:	46c0      	nop			; (mov r8, r8)
   2bf1c:	46bd      	mov	sp, r7
   2bf1e:	bd80      	pop	{r7, pc}
   2bf20:	0002bf4d 	.word	0x0002bf4d

0002bf24 <TCC1_Handler>:
   2bf24:	b580      	push	{r7, lr}
   2bf26:	af00      	add	r7, sp, #0
   2bf28:	2001      	movs	r0, #1
   2bf2a:	4b02      	ldr	r3, [pc, #8]	; (2bf34 <TCC1_Handler+0x10>)
   2bf2c:	4798      	blx	r3
   2bf2e:	46c0      	nop			; (mov r8, r8)
   2bf30:	46bd      	mov	sp, r7
   2bf32:	bd80      	pop	{r7, pc}
   2bf34:	0002bf4d 	.word	0x0002bf4d

0002bf38 <TCC2_Handler>:
   2bf38:	b580      	push	{r7, lr}
   2bf3a:	af00      	add	r7, sp, #0
   2bf3c:	2002      	movs	r0, #2
   2bf3e:	4b02      	ldr	r3, [pc, #8]	; (2bf48 <TCC2_Handler+0x10>)
   2bf40:	4798      	blx	r3
   2bf42:	46c0      	nop			; (mov r8, r8)
   2bf44:	46bd      	mov	sp, r7
   2bf46:	bd80      	pop	{r7, pc}
   2bf48:	0002bf4d 	.word	0x0002bf4d

0002bf4c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2bf4c:	b580      	push	{r7, lr}
   2bf4e:	b086      	sub	sp, #24
   2bf50:	af00      	add	r7, sp, #0
   2bf52:	0002      	movs	r2, r0
   2bf54:	1dfb      	adds	r3, r7, #7
   2bf56:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2bf58:	1dfb      	adds	r3, r7, #7
   2bf5a:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2bf5c:	4b18      	ldr	r3, [pc, #96]	; (2bfc0 <_tcc_interrupt_handler+0x74>)
   2bf5e:	0092      	lsls	r2, r2, #2
   2bf60:	58d3      	ldr	r3, [r2, r3]
   2bf62:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2bf64:	693b      	ldr	r3, [r7, #16]
   2bf66:	681b      	ldr	r3, [r3, #0]
   2bf68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2bf6a:	693b      	ldr	r3, [r7, #16]
   2bf6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2bf6e:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2bf70:	693b      	ldr	r3, [r7, #16]
   2bf72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2bf74:	4013      	ands	r3, r2
   2bf76:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2bf78:	2300      	movs	r3, #0
   2bf7a:	617b      	str	r3, [r7, #20]
   2bf7c:	e019      	b.n	2bfb2 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2bf7e:	4b11      	ldr	r3, [pc, #68]	; (2bfc4 <_tcc_interrupt_handler+0x78>)
   2bf80:	697a      	ldr	r2, [r7, #20]
   2bf82:	0092      	lsls	r2, r2, #2
   2bf84:	58d3      	ldr	r3, [r2, r3]
   2bf86:	68fa      	ldr	r2, [r7, #12]
   2bf88:	4013      	ands	r3, r2
   2bf8a:	d00f      	beq.n	2bfac <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2bf8c:	693a      	ldr	r2, [r7, #16]
   2bf8e:	697b      	ldr	r3, [r7, #20]
   2bf90:	009b      	lsls	r3, r3, #2
   2bf92:	18d3      	adds	r3, r2, r3
   2bf94:	3304      	adds	r3, #4
   2bf96:	681b      	ldr	r3, [r3, #0]
   2bf98:	693a      	ldr	r2, [r7, #16]
   2bf9a:	0010      	movs	r0, r2
   2bf9c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2bf9e:	693b      	ldr	r3, [r7, #16]
   2bfa0:	681b      	ldr	r3, [r3, #0]
   2bfa2:	4a08      	ldr	r2, [pc, #32]	; (2bfc4 <_tcc_interrupt_handler+0x78>)
   2bfa4:	6979      	ldr	r1, [r7, #20]
   2bfa6:	0089      	lsls	r1, r1, #2
   2bfa8:	588a      	ldr	r2, [r1, r2]
   2bfaa:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2bfac:	697b      	ldr	r3, [r7, #20]
   2bfae:	3301      	adds	r3, #1
   2bfb0:	617b      	str	r3, [r7, #20]
   2bfb2:	697b      	ldr	r3, [r7, #20]
   2bfb4:	2b0b      	cmp	r3, #11
   2bfb6:	dde2      	ble.n	2bf7e <_tcc_interrupt_handler+0x32>
		}
	}
}
   2bfb8:	46c0      	nop			; (mov r8, r8)
   2bfba:	46bd      	mov	sp, r7
   2bfbc:	b006      	add	sp, #24
   2bfbe:	bd80      	pop	{r7, pc}
   2bfc0:	20005cb8 	.word	0x20005cb8
   2bfc4:	0003b3f0 	.word	0x0003b3f0

0002bfc8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2bfc8:	b580      	push	{r7, lr}
   2bfca:	b082      	sub	sp, #8
   2bfcc:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2bfce:	4b2f      	ldr	r3, [pc, #188]	; (2c08c <Reset_Handler+0xc4>)
   2bfd0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2bfd2:	4b2f      	ldr	r3, [pc, #188]	; (2c090 <Reset_Handler+0xc8>)
   2bfd4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2bfd6:	687a      	ldr	r2, [r7, #4]
   2bfd8:	683b      	ldr	r3, [r7, #0]
   2bfda:	429a      	cmp	r2, r3
   2bfdc:	d00c      	beq.n	2bff8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2bfde:	e007      	b.n	2bff0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2bfe0:	683b      	ldr	r3, [r7, #0]
   2bfe2:	1d1a      	adds	r2, r3, #4
   2bfe4:	603a      	str	r2, [r7, #0]
   2bfe6:	687a      	ldr	r2, [r7, #4]
   2bfe8:	1d11      	adds	r1, r2, #4
   2bfea:	6079      	str	r1, [r7, #4]
   2bfec:	6812      	ldr	r2, [r2, #0]
   2bfee:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2bff0:	683a      	ldr	r2, [r7, #0]
   2bff2:	4b28      	ldr	r3, [pc, #160]	; (2c094 <Reset_Handler+0xcc>)
   2bff4:	429a      	cmp	r2, r3
   2bff6:	d3f3      	bcc.n	2bfe0 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2bff8:	4b27      	ldr	r3, [pc, #156]	; (2c098 <Reset_Handler+0xd0>)
   2bffa:	603b      	str	r3, [r7, #0]
   2bffc:	e004      	b.n	2c008 <Reset_Handler+0x40>
                *pDest++ = 0;
   2bffe:	683b      	ldr	r3, [r7, #0]
   2c000:	1d1a      	adds	r2, r3, #4
   2c002:	603a      	str	r2, [r7, #0]
   2c004:	2200      	movs	r2, #0
   2c006:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2c008:	683a      	ldr	r2, [r7, #0]
   2c00a:	4b24      	ldr	r3, [pc, #144]	; (2c09c <Reset_Handler+0xd4>)
   2c00c:	429a      	cmp	r2, r3
   2c00e:	d3f6      	bcc.n	2bffe <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2c010:	4b23      	ldr	r3, [pc, #140]	; (2c0a0 <Reset_Handler+0xd8>)
   2c012:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2c014:	4b23      	ldr	r3, [pc, #140]	; (2c0a4 <Reset_Handler+0xdc>)
   2c016:	687a      	ldr	r2, [r7, #4]
   2c018:	21ff      	movs	r1, #255	; 0xff
   2c01a:	438a      	bics	r2, r1
   2c01c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2c01e:	4a22      	ldr	r2, [pc, #136]	; (2c0a8 <Reset_Handler+0xe0>)
   2c020:	2390      	movs	r3, #144	; 0x90
   2c022:	005b      	lsls	r3, r3, #1
   2c024:	2102      	movs	r1, #2
   2c026:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2c028:	4a20      	ldr	r2, [pc, #128]	; (2c0ac <Reset_Handler+0xe4>)
   2c02a:	78d3      	ldrb	r3, [r2, #3]
   2c02c:	2103      	movs	r1, #3
   2c02e:	438b      	bics	r3, r1
   2c030:	1c19      	adds	r1, r3, #0
   2c032:	2302      	movs	r3, #2
   2c034:	430b      	orrs	r3, r1
   2c036:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2c038:	4a1c      	ldr	r2, [pc, #112]	; (2c0ac <Reset_Handler+0xe4>)
   2c03a:	78d3      	ldrb	r3, [r2, #3]
   2c03c:	210c      	movs	r1, #12
   2c03e:	438b      	bics	r3, r1
   2c040:	1c19      	adds	r1, r3, #0
   2c042:	2308      	movs	r3, #8
   2c044:	430b      	orrs	r3, r1
   2c046:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2c048:	4a19      	ldr	r2, [pc, #100]	; (2c0b0 <Reset_Handler+0xe8>)
   2c04a:	7b93      	ldrb	r3, [r2, #14]
   2c04c:	2130      	movs	r1, #48	; 0x30
   2c04e:	438b      	bics	r3, r1
   2c050:	1c19      	adds	r1, r3, #0
   2c052:	2320      	movs	r3, #32
   2c054:	430b      	orrs	r3, r1
   2c056:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2c058:	4a15      	ldr	r2, [pc, #84]	; (2c0b0 <Reset_Handler+0xe8>)
   2c05a:	7b93      	ldrb	r3, [r2, #14]
   2c05c:	210c      	movs	r1, #12
   2c05e:	438b      	bics	r3, r1
   2c060:	1c19      	adds	r1, r3, #0
   2c062:	2308      	movs	r3, #8
   2c064:	430b      	orrs	r3, r1
   2c066:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2c068:	4a11      	ldr	r2, [pc, #68]	; (2c0b0 <Reset_Handler+0xe8>)
   2c06a:	7b93      	ldrb	r3, [r2, #14]
   2c06c:	2103      	movs	r1, #3
   2c06e:	438b      	bics	r3, r1
   2c070:	1c19      	adds	r1, r3, #0
   2c072:	2302      	movs	r3, #2
   2c074:	430b      	orrs	r3, r1
   2c076:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2c078:	4a0e      	ldr	r2, [pc, #56]	; (2c0b4 <Reset_Handler+0xec>)
   2c07a:	6853      	ldr	r3, [r2, #4]
   2c07c:	2180      	movs	r1, #128	; 0x80
   2c07e:	430b      	orrs	r3, r1
   2c080:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2c082:	4b0d      	ldr	r3, [pc, #52]	; (2c0b8 <Reset_Handler+0xf0>)
   2c084:	4798      	blx	r3

        /* Branch to main function */
        main();
   2c086:	4b0d      	ldr	r3, [pc, #52]	; (2c0bc <Reset_Handler+0xf4>)
   2c088:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2c08a:	e7fe      	b.n	2c08a <Reset_Handler+0xc2>
   2c08c:	0003c228 	.word	0x0003c228
   2c090:	20000000 	.word	0x20000000
   2c094:	20000300 	.word	0x20000300
   2c098:	20000300 	.word	0x20000300
   2c09c:	20005d28 	.word	0x20005d28
   2c0a0:	00012000 	.word	0x00012000
   2c0a4:	e000ed00 	.word	0xe000ed00
   2c0a8:	41007000 	.word	0x41007000
   2c0ac:	41005000 	.word	0x41005000
   2c0b0:	41004800 	.word	0x41004800
   2c0b4:	41004000 	.word	0x41004000
   2c0b8:	00036399 	.word	0x00036399
   2c0bc:	000337fd 	.word	0x000337fd

0002c0c0 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2c0c0:	b580      	push	{r7, lr}
   2c0c2:	af00      	add	r7, sp, #0
  __asm volatile (
   2c0c4:	2004      	movs	r0, #4
   2c0c6:	4671      	mov	r1, lr
   2c0c8:	4208      	tst	r0, r1
   2c0ca:	d002      	beq.n	2c0d2 <_MSP>
   2c0cc:	f3ef 8009 	mrs	r0, PSP
   2c0d0:	e001      	b.n	2c0d6 <_HALT>

0002c0d2 <_MSP>:
   2c0d2:	f3ef 8008 	mrs	r0, MSP

0002c0d6 <_HALT>:
   2c0d6:	6941      	ldr	r1, [r0, #20]
   2c0d8:	e004      	b.n	2c0e4 <HardFault_HandlerC>
   2c0da:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2c0dc:	46c0      	nop			; (mov r8, r8)
   2c0de:	46bd      	mov	sp, r7
   2c0e0:	bd80      	pop	{r7, pc}
	...

0002c0e4 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2c0e4:	b580      	push	{r7, lr}
   2c0e6:	b090      	sub	sp, #64	; 0x40
   2c0e8:	af00      	add	r7, sp, #0
   2c0ea:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2c0ec:	687b      	ldr	r3, [r7, #4]
   2c0ee:	681b      	ldr	r3, [r3, #0]
   2c0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2c0f2:	687b      	ldr	r3, [r7, #4]
   2c0f4:	685b      	ldr	r3, [r3, #4]
   2c0f6:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2c0f8:	687b      	ldr	r3, [r7, #4]
   2c0fa:	689b      	ldr	r3, [r3, #8]
   2c0fc:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2c0fe:	687b      	ldr	r3, [r7, #4]
   2c100:	68db      	ldr	r3, [r3, #12]
   2c102:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2c104:	687b      	ldr	r3, [r7, #4]
   2c106:	691b      	ldr	r3, [r3, #16]
   2c108:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2c10a:	687b      	ldr	r3, [r7, #4]
   2c10c:	695b      	ldr	r3, [r3, #20]
   2c10e:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2c110:	687b      	ldr	r3, [r7, #4]
   2c112:	699b      	ldr	r3, [r3, #24]
   2c114:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2c116:	687b      	ldr	r3, [r7, #4]
   2c118:	69db      	ldr	r3, [r3, #28]
   2c11a:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2c11c:	4b0b      	ldr	r3, [pc, #44]	; (2c14c <HardFault_HandlerC+0x68>)
   2c11e:	681b      	ldr	r3, [r3, #0]
   2c120:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2c122:	4b0b      	ldr	r3, [pc, #44]	; (2c150 <HardFault_HandlerC+0x6c>)
   2c124:	681b      	ldr	r3, [r3, #0]
   2c126:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2c128:	4b0a      	ldr	r3, [pc, #40]	; (2c154 <HardFault_HandlerC+0x70>)
   2c12a:	681b      	ldr	r3, [r3, #0]
   2c12c:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2c12e:	4b0a      	ldr	r3, [pc, #40]	; (2c158 <HardFault_HandlerC+0x74>)
   2c130:	681b      	ldr	r3, [r3, #0]
   2c132:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2c134:	4b09      	ldr	r3, [pc, #36]	; (2c15c <HardFault_HandlerC+0x78>)
   2c136:	681b      	ldr	r3, [r3, #0]
   2c138:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2c13a:	4b09      	ldr	r3, [pc, #36]	; (2c160 <HardFault_HandlerC+0x7c>)
   2c13c:	681b      	ldr	r3, [r3, #0]
   2c13e:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2c140:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2c142:	46c0      	nop			; (mov r8, r8)
   2c144:	46bd      	mov	sp, r7
   2c146:	b010      	add	sp, #64	; 0x40
   2c148:	bd80      	pop	{r7, pc}
   2c14a:	46c0      	nop			; (mov r8, r8)
   2c14c:	e000ed28 	.word	0xe000ed28
   2c150:	e000ed2c 	.word	0xe000ed2c
   2c154:	e000ed30 	.word	0xe000ed30
   2c158:	e000ed3c 	.word	0xe000ed3c
   2c15c:	e000ed34 	.word	0xe000ed34
   2c160:	e000ed38 	.word	0xe000ed38

0002c164 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2c164:	b580      	push	{r7, lr}
   2c166:	b086      	sub	sp, #24
   2c168:	af00      	add	r7, sp, #0
   2c16a:	60f8      	str	r0, [r7, #12]
   2c16c:	60b9      	str	r1, [r7, #8]
   2c16e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2c170:	2300      	movs	r3, #0
   2c172:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2c174:	68fb      	ldr	r3, [r7, #12]
   2c176:	2b00      	cmp	r3, #0
   2c178:	d012      	beq.n	2c1a0 <_read+0x3c>
		return -1;
   2c17a:	2301      	movs	r3, #1
   2c17c:	425b      	negs	r3, r3
   2c17e:	e013      	b.n	2c1a8 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2c180:	4b0b      	ldr	r3, [pc, #44]	; (2c1b0 <_read+0x4c>)
   2c182:	681a      	ldr	r2, [r3, #0]
   2c184:	4b0b      	ldr	r3, [pc, #44]	; (2c1b4 <_read+0x50>)
   2c186:	681b      	ldr	r3, [r3, #0]
   2c188:	68b9      	ldr	r1, [r7, #8]
   2c18a:	0018      	movs	r0, r3
   2c18c:	4790      	blx	r2
		ptr++;
   2c18e:	68bb      	ldr	r3, [r7, #8]
   2c190:	3301      	adds	r3, #1
   2c192:	60bb      	str	r3, [r7, #8]
		nChars++;
   2c194:	697b      	ldr	r3, [r7, #20]
   2c196:	3301      	adds	r3, #1
   2c198:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2c19a:	687b      	ldr	r3, [r7, #4]
   2c19c:	3b01      	subs	r3, #1
   2c19e:	607b      	str	r3, [r7, #4]
   2c1a0:	687b      	ldr	r3, [r7, #4]
   2c1a2:	2b00      	cmp	r3, #0
   2c1a4:	dcec      	bgt.n	2c180 <_read+0x1c>
	}
	return nChars;
   2c1a6:	697b      	ldr	r3, [r7, #20]
}
   2c1a8:	0018      	movs	r0, r3
   2c1aa:	46bd      	mov	sp, r7
   2c1ac:	b006      	add	sp, #24
   2c1ae:	bd80      	pop	{r7, pc}
   2c1b0:	20005cc4 	.word	0x20005cc4
   2c1b4:	20005ccc 	.word	0x20005ccc

0002c1b8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2c1b8:	b580      	push	{r7, lr}
   2c1ba:	b086      	sub	sp, #24
   2c1bc:	af00      	add	r7, sp, #0
   2c1be:	60f8      	str	r0, [r7, #12]
   2c1c0:	60b9      	str	r1, [r7, #8]
   2c1c2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2c1c4:	2300      	movs	r3, #0
   2c1c6:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2c1c8:	68fb      	ldr	r3, [r7, #12]
   2c1ca:	2b01      	cmp	r3, #1
   2c1cc:	d01d      	beq.n	2c20a <_write+0x52>
   2c1ce:	68fb      	ldr	r3, [r7, #12]
   2c1d0:	2b02      	cmp	r3, #2
   2c1d2:	d01a      	beq.n	2c20a <_write+0x52>
   2c1d4:	68fb      	ldr	r3, [r7, #12]
   2c1d6:	2b03      	cmp	r3, #3
   2c1d8:	d017      	beq.n	2c20a <_write+0x52>
		return -1;
   2c1da:	2301      	movs	r3, #1
   2c1dc:	425b      	negs	r3, r3
   2c1de:	e018      	b.n	2c212 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2c1e0:	4b0e      	ldr	r3, [pc, #56]	; (2c21c <_write+0x64>)
   2c1e2:	681a      	ldr	r2, [r3, #0]
   2c1e4:	4b0e      	ldr	r3, [pc, #56]	; (2c220 <_write+0x68>)
   2c1e6:	6818      	ldr	r0, [r3, #0]
   2c1e8:	68bb      	ldr	r3, [r7, #8]
   2c1ea:	1c59      	adds	r1, r3, #1
   2c1ec:	60b9      	str	r1, [r7, #8]
   2c1ee:	781b      	ldrb	r3, [r3, #0]
   2c1f0:	0019      	movs	r1, r3
   2c1f2:	4790      	blx	r2
   2c1f4:	1e03      	subs	r3, r0, #0
   2c1f6:	da02      	bge.n	2c1fe <_write+0x46>
			return -1;
   2c1f8:	2301      	movs	r3, #1
   2c1fa:	425b      	negs	r3, r3
   2c1fc:	e009      	b.n	2c212 <_write+0x5a>
		}
		++nChars;
   2c1fe:	697b      	ldr	r3, [r7, #20]
   2c200:	3301      	adds	r3, #1
   2c202:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2c204:	687b      	ldr	r3, [r7, #4]
   2c206:	3b01      	subs	r3, #1
   2c208:	607b      	str	r3, [r7, #4]
   2c20a:	687b      	ldr	r3, [r7, #4]
   2c20c:	2b00      	cmp	r3, #0
   2c20e:	d1e7      	bne.n	2c1e0 <_write+0x28>
	}
	return nChars;
   2c210:	697b      	ldr	r3, [r7, #20]
}
   2c212:	0018      	movs	r0, r3
   2c214:	46bd      	mov	sp, r7
   2c216:	b006      	add	sp, #24
   2c218:	bd80      	pop	{r7, pc}
   2c21a:	46c0      	nop			; (mov r8, r8)
   2c21c:	20005cc8 	.word	0x20005cc8
   2c220:	20005ccc 	.word	0x20005ccc

0002c224 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2c224:	b580      	push	{r7, lr}
   2c226:	b084      	sub	sp, #16
   2c228:	af00      	add	r7, sp, #0
   2c22a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2c22c:	4b0a      	ldr	r3, [pc, #40]	; (2c258 <_sbrk+0x34>)
   2c22e:	681b      	ldr	r3, [r3, #0]
   2c230:	2b00      	cmp	r3, #0
   2c232:	d102      	bne.n	2c23a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2c234:	4b08      	ldr	r3, [pc, #32]	; (2c258 <_sbrk+0x34>)
   2c236:	4a09      	ldr	r2, [pc, #36]	; (2c25c <_sbrk+0x38>)
   2c238:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2c23a:	4b07      	ldr	r3, [pc, #28]	; (2c258 <_sbrk+0x34>)
   2c23c:	681b      	ldr	r3, [r3, #0]
   2c23e:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2c240:	4b05      	ldr	r3, [pc, #20]	; (2c258 <_sbrk+0x34>)
   2c242:	681a      	ldr	r2, [r3, #0]
   2c244:	687b      	ldr	r3, [r7, #4]
   2c246:	18d2      	adds	r2, r2, r3
   2c248:	4b03      	ldr	r3, [pc, #12]	; (2c258 <_sbrk+0x34>)
   2c24a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2c24c:	68fb      	ldr	r3, [r7, #12]
}
   2c24e:	0018      	movs	r0, r3
   2c250:	46bd      	mov	sp, r7
   2c252:	b004      	add	sp, #16
   2c254:	bd80      	pop	{r7, pc}
   2c256:	46c0      	nop			; (mov r8, r8)
   2c258:	200042f8 	.word	0x200042f8
   2c25c:	20007d28 	.word	0x20007d28

0002c260 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2c260:	b580      	push	{r7, lr}
   2c262:	b082      	sub	sp, #8
   2c264:	af00      	add	r7, sp, #0
   2c266:	6078      	str	r0, [r7, #4]
	return -1;
   2c268:	2301      	movs	r3, #1
   2c26a:	425b      	negs	r3, r3
}
   2c26c:	0018      	movs	r0, r3
   2c26e:	46bd      	mov	sp, r7
   2c270:	b002      	add	sp, #8
   2c272:	bd80      	pop	{r7, pc}

0002c274 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2c274:	b580      	push	{r7, lr}
   2c276:	b082      	sub	sp, #8
   2c278:	af00      	add	r7, sp, #0
   2c27a:	6078      	str	r0, [r7, #4]
   2c27c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2c27e:	683b      	ldr	r3, [r7, #0]
   2c280:	2280      	movs	r2, #128	; 0x80
   2c282:	0192      	lsls	r2, r2, #6
   2c284:	605a      	str	r2, [r3, #4]

	return 0;
   2c286:	2300      	movs	r3, #0
}
   2c288:	0018      	movs	r0, r3
   2c28a:	46bd      	mov	sp, r7
   2c28c:	b002      	add	sp, #8
   2c28e:	bd80      	pop	{r7, pc}

0002c290 <_isatty>:

extern int _isatty(int file)
{
   2c290:	b580      	push	{r7, lr}
   2c292:	b082      	sub	sp, #8
   2c294:	af00      	add	r7, sp, #0
   2c296:	6078      	str	r0, [r7, #4]
	return 1;
   2c298:	2301      	movs	r3, #1
}
   2c29a:	0018      	movs	r0, r3
   2c29c:	46bd      	mov	sp, r7
   2c29e:	b002      	add	sp, #8
   2c2a0:	bd80      	pop	{r7, pc}

0002c2a2 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2c2a2:	b580      	push	{r7, lr}
   2c2a4:	b084      	sub	sp, #16
   2c2a6:	af00      	add	r7, sp, #0
   2c2a8:	60f8      	str	r0, [r7, #12]
   2c2aa:	60b9      	str	r1, [r7, #8]
   2c2ac:	607a      	str	r2, [r7, #4]
	return 0;
   2c2ae:	2300      	movs	r3, #0
}
   2c2b0:	0018      	movs	r0, r3
   2c2b2:	46bd      	mov	sp, r7
   2c2b4:	b004      	add	sp, #16
   2c2b6:	bd80      	pop	{r7, pc}

0002c2b8 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2c2b8:	b580      	push	{r7, lr}
   2c2ba:	b082      	sub	sp, #8
   2c2bc:	af00      	add	r7, sp, #0
   2c2be:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2c2c0:	687b      	ldr	r3, [r7, #4]
   2c2c2:	2200      	movs	r2, #0
   2c2c4:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2c2c6:	687b      	ldr	r3, [r7, #4]
   2c2c8:	2200      	movs	r2, #0
   2c2ca:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2c2cc:	687b      	ldr	r3, [r7, #4]
   2c2ce:	2200      	movs	r2, #0
   2c2d0:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2c2d2:	687b      	ldr	r3, [r7, #4]
   2c2d4:	2200      	movs	r2, #0
   2c2d6:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2c2d8:	687b      	ldr	r3, [r7, #4]
   2c2da:	2201      	movs	r2, #1
   2c2dc:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2c2de:	687b      	ldr	r3, [r7, #4]
   2c2e0:	2201      	movs	r2, #1
   2c2e2:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2c2e4:	687b      	ldr	r3, [r7, #4]
   2c2e6:	22fa      	movs	r2, #250	; 0xfa
   2c2e8:	00d2      	lsls	r2, r2, #3
   2c2ea:	80da      	strh	r2, [r3, #6]
}
   2c2ec:	46c0      	nop			; (mov r8, r8)
   2c2ee:	46bd      	mov	sp, r7
   2c2f0:	b002      	add	sp, #8
   2c2f2:	bd80      	pop	{r7, pc}

0002c2f4 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2c2f4:	b580      	push	{r7, lr}
   2c2f6:	b086      	sub	sp, #24
   2c2f8:	af00      	add	r7, sp, #0
   2c2fa:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2c2fc:	230c      	movs	r3, #12
   2c2fe:	18fb      	adds	r3, r7, r3
   2c300:	0018      	movs	r0, r3
   2c302:	4b23      	ldr	r3, [pc, #140]	; (2c390 <rtc_calendar_get_config_defaults+0x9c>)
   2c304:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2c306:	687b      	ldr	r3, [r7, #4]
   2c308:	22a0      	movs	r2, #160	; 0xa0
   2c30a:	0112      	lsls	r2, r2, #4
   2c30c:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2c30e:	687b      	ldr	r3, [r7, #4]
   2c310:	2200      	movs	r2, #0
   2c312:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2c314:	687b      	ldr	r3, [r7, #4]
   2c316:	2200      	movs	r2, #0
   2c318:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2c31a:	687b      	ldr	r3, [r7, #4]
   2c31c:	2200      	movs	r2, #0
   2c31e:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2c320:	687b      	ldr	r3, [r7, #4]
   2c322:	22fa      	movs	r2, #250	; 0xfa
   2c324:	00d2      	lsls	r2, r2, #3
   2c326:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2c328:	2317      	movs	r3, #23
   2c32a:	18fb      	adds	r3, r7, r3
   2c32c:	2200      	movs	r2, #0
   2c32e:	701a      	strb	r2, [r3, #0]
   2c330:	e025      	b.n	2c37e <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2c332:	2317      	movs	r3, #23
   2c334:	18fb      	adds	r3, r7, r3
   2c336:	781a      	ldrb	r2, [r3, #0]
   2c338:	6879      	ldr	r1, [r7, #4]
   2c33a:	2008      	movs	r0, #8
   2c33c:	0013      	movs	r3, r2
   2c33e:	009b      	lsls	r3, r3, #2
   2c340:	189b      	adds	r3, r3, r2
   2c342:	005b      	lsls	r3, r3, #1
   2c344:	18cb      	adds	r3, r1, r3
   2c346:	181a      	adds	r2, r3, r0
   2c348:	230c      	movs	r3, #12
   2c34a:	18fb      	adds	r3, r7, r3
   2c34c:	0010      	movs	r0, r2
   2c34e:	0019      	movs	r1, r3
   2c350:	2308      	movs	r3, #8
   2c352:	001a      	movs	r2, r3
   2c354:	4b0f      	ldr	r3, [pc, #60]	; (2c394 <rtc_calendar_get_config_defaults+0xa0>)
   2c356:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2c358:	2317      	movs	r3, #23
   2c35a:	18fb      	adds	r3, r7, r3
   2c35c:	781a      	ldrb	r2, [r3, #0]
   2c35e:	6879      	ldr	r1, [r7, #4]
   2c360:	0013      	movs	r3, r2
   2c362:	009b      	lsls	r3, r3, #2
   2c364:	189b      	adds	r3, r3, r2
   2c366:	005b      	lsls	r3, r3, #1
   2c368:	18cb      	adds	r3, r1, r3
   2c36a:	3310      	adds	r3, #16
   2c36c:	2206      	movs	r2, #6
   2c36e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2c370:	2317      	movs	r3, #23
   2c372:	18fb      	adds	r3, r7, r3
   2c374:	781a      	ldrb	r2, [r3, #0]
   2c376:	2317      	movs	r3, #23
   2c378:	18fb      	adds	r3, r7, r3
   2c37a:	3201      	adds	r2, #1
   2c37c:	701a      	strb	r2, [r3, #0]
   2c37e:	2317      	movs	r3, #23
   2c380:	18fb      	adds	r3, r7, r3
   2c382:	781b      	ldrb	r3, [r3, #0]
   2c384:	2b00      	cmp	r3, #0
   2c386:	d0d4      	beq.n	2c332 <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2c388:	46c0      	nop			; (mov r8, r8)
   2c38a:	46bd      	mov	sp, r7
   2c38c:	b006      	add	sp, #24
   2c38e:	bd80      	pop	{r7, pc}
   2c390:	0002c2b9 	.word	0x0002c2b9
   2c394:	00036409 	.word	0x00036409

0002c398 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2c398:	b580      	push	{r7, lr}
   2c39a:	b088      	sub	sp, #32
   2c39c:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2c39e:	230c      	movs	r3, #12
   2c3a0:	18fb      	adds	r3, r7, r3
   2c3a2:	0018      	movs	r0, r3
   2c3a4:	4b1a      	ldr	r3, [pc, #104]	; (2c410 <configure_rtc_calendar+0x78>)
   2c3a6:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2c3a8:	1d3b      	adds	r3, r7, #4
   2c3aa:	0018      	movs	r0, r3
   2c3ac:	4b19      	ldr	r3, [pc, #100]	; (2c414 <configure_rtc_calendar+0x7c>)
   2c3ae:	4798      	blx	r3
	init_time.year   = 2014;
   2c3b0:	1d3b      	adds	r3, r7, #4
   2c3b2:	4a19      	ldr	r2, [pc, #100]	; (2c418 <configure_rtc_calendar+0x80>)
   2c3b4:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2c3b6:	1d3b      	adds	r3, r7, #4
   2c3b8:	2201      	movs	r2, #1
   2c3ba:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2c3bc:	1d3b      	adds	r3, r7, #4
   2c3be:	2201      	movs	r2, #1
   2c3c0:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2c3c2:	1d3b      	adds	r3, r7, #4
   2c3c4:	2200      	movs	r2, #0
   2c3c6:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2c3c8:	1d3b      	adds	r3, r7, #4
   2c3ca:	2200      	movs	r2, #0
   2c3cc:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2c3ce:	1d3b      	adds	r3, r7, #4
   2c3d0:	2204      	movs	r2, #4
   2c3d2:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2c3d4:	230c      	movs	r3, #12
   2c3d6:	18fb      	adds	r3, r7, r3
   2c3d8:	2201      	movs	r2, #1
   2c3da:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2c3dc:	230c      	movs	r3, #12
   2c3de:	18fb      	adds	r3, r7, r3
   2c3e0:	1d3a      	adds	r2, r7, #4
   2c3e2:	3308      	adds	r3, #8
   2c3e4:	ca03      	ldmia	r2!, {r0, r1}
   2c3e6:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2c3e8:	230c      	movs	r3, #12
   2c3ea:	18fb      	adds	r3, r7, r3
   2c3ec:	2206      	movs	r2, #6
   2c3ee:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2c3f0:	230c      	movs	r3, #12
   2c3f2:	18fa      	adds	r2, r7, r3
   2c3f4:	4909      	ldr	r1, [pc, #36]	; (2c41c <configure_rtc_calendar+0x84>)
   2c3f6:	4b0a      	ldr	r3, [pc, #40]	; (2c420 <configure_rtc_calendar+0x88>)
   2c3f8:	0018      	movs	r0, r3
   2c3fa:	4b0a      	ldr	r3, [pc, #40]	; (2c424 <configure_rtc_calendar+0x8c>)
   2c3fc:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2c3fe:	4b08      	ldr	r3, [pc, #32]	; (2c420 <configure_rtc_calendar+0x88>)
   2c400:	0018      	movs	r0, r3
   2c402:	4b09      	ldr	r3, [pc, #36]	; (2c428 <configure_rtc_calendar+0x90>)
   2c404:	4798      	blx	r3
}
   2c406:	46c0      	nop			; (mov r8, r8)
   2c408:	46bd      	mov	sp, r7
   2c40a:	b008      	add	sp, #32
   2c40c:	bd80      	pop	{r7, pc}
   2c40e:	46c0      	nop			; (mov r8, r8)
   2c410:	0002c2f5 	.word	0x0002c2f5
   2c414:	0002c2b9 	.word	0x0002c2b9
   2c418:	000007de 	.word	0x000007de
   2c41c:	40001400 	.word	0x40001400
   2c420:	20005cd0 	.word	0x20005cd0
   2c424:	00027da9 	.word	0x00027da9
   2c428:	00027ad5 	.word	0x00027ad5

0002c42c <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2c42c:	b590      	push	{r4, r7, lr}
   2c42e:	b085      	sub	sp, #20
   2c430:	af00      	add	r7, sp, #0
   2c432:	0002      	movs	r2, r0
   2c434:	1dfb      	adds	r3, r7, #7
   2c436:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2c438:	4b1a      	ldr	r3, [pc, #104]	; (2c4a4 <disk_initialize+0x78>)
   2c43a:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2c43c:	1dfb      	adds	r3, r7, #7
   2c43e:	781b      	ldrb	r3, [r3, #0]
   2c440:	2b01      	cmp	r3, #1
   2c442:	d901      	bls.n	2c448 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2c444:	2301      	movs	r3, #1
   2c446:	e029      	b.n	2c49c <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2c448:	2300      	movs	r3, #0
   2c44a:	60fb      	str	r3, [r7, #12]
   2c44c:	e010      	b.n	2c470 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2c44e:	230b      	movs	r3, #11
   2c450:	18fc      	adds	r4, r7, r3
   2c452:	1dfb      	adds	r3, r7, #7
   2c454:	781b      	ldrb	r3, [r3, #0]
   2c456:	0018      	movs	r0, r3
   2c458:	4b13      	ldr	r3, [pc, #76]	; (2c4a8 <disk_initialize+0x7c>)
   2c45a:	4798      	blx	r3
   2c45c:	0003      	movs	r3, r0
   2c45e:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2c460:	230b      	movs	r3, #11
   2c462:	18fb      	adds	r3, r7, r3
   2c464:	781b      	ldrb	r3, [r3, #0]
   2c466:	2b03      	cmp	r3, #3
   2c468:	d106      	bne.n	2c478 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2c46a:	68fb      	ldr	r3, [r7, #12]
   2c46c:	3301      	adds	r3, #1
   2c46e:	60fb      	str	r3, [r7, #12]
   2c470:	68fb      	ldr	r3, [r7, #12]
   2c472:	2b01      	cmp	r3, #1
   2c474:	ddeb      	ble.n	2c44e <disk_initialize+0x22>
   2c476:	e000      	b.n	2c47a <disk_initialize+0x4e>
			break;
   2c478:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2c47a:	230b      	movs	r3, #11
   2c47c:	18fb      	adds	r3, r7, r3
   2c47e:	781b      	ldrb	r3, [r3, #0]
   2c480:	2b00      	cmp	r3, #0
   2c482:	d001      	beq.n	2c488 <disk_initialize+0x5c>
		return STA_NOINIT;
   2c484:	2301      	movs	r3, #1
   2c486:	e009      	b.n	2c49c <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2c488:	1dfb      	adds	r3, r7, #7
   2c48a:	781b      	ldrb	r3, [r3, #0]
   2c48c:	0018      	movs	r0, r3
   2c48e:	4b07      	ldr	r3, [pc, #28]	; (2c4ac <disk_initialize+0x80>)
   2c490:	4798      	blx	r3
   2c492:	1e03      	subs	r3, r0, #0
   2c494:	d001      	beq.n	2c49a <disk_initialize+0x6e>
		return STA_PROTECT;
   2c496:	2304      	movs	r3, #4
   2c498:	e000      	b.n	2c49c <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2c49a:	2300      	movs	r3, #0
}
   2c49c:	0018      	movs	r0, r3
   2c49e:	46bd      	mov	sp, r7
   2c4a0:	b005      	add	sp, #20
   2c4a2:	bd90      	pop	{r4, r7, pc}
   2c4a4:	0002c399 	.word	0x0002c399
   2c4a8:	00026fd1 	.word	0x00026fd1
   2c4ac:	00027089 	.word	0x00027089

0002c4b0 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2c4b0:	b580      	push	{r7, lr}
   2c4b2:	b082      	sub	sp, #8
   2c4b4:	af00      	add	r7, sp, #0
   2c4b6:	0002      	movs	r2, r0
   2c4b8:	1dfb      	adds	r3, r7, #7
   2c4ba:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2c4bc:	1dfb      	adds	r3, r7, #7
   2c4be:	781b      	ldrb	r3, [r3, #0]
   2c4c0:	0018      	movs	r0, r3
   2c4c2:	4b08      	ldr	r3, [pc, #32]	; (2c4e4 <disk_status+0x34>)
   2c4c4:	4798      	blx	r3
   2c4c6:	1e03      	subs	r3, r0, #0
   2c4c8:	d002      	beq.n	2c4d0 <disk_status+0x20>
   2c4ca:	2b02      	cmp	r3, #2
   2c4cc:	d002      	beq.n	2c4d4 <disk_status+0x24>
   2c4ce:	e003      	b.n	2c4d8 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2c4d0:	2300      	movs	r3, #0
   2c4d2:	e002      	b.n	2c4da <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2c4d4:	2303      	movs	r3, #3
   2c4d6:	e000      	b.n	2c4da <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2c4d8:	2301      	movs	r3, #1
	}
}
   2c4da:	0018      	movs	r0, r3
   2c4dc:	46bd      	mov	sp, r7
   2c4de:	b002      	add	sp, #8
   2c4e0:	bd80      	pop	{r7, pc}
   2c4e2:	46c0      	nop			; (mov r8, r8)
   2c4e4:	00026fd1 	.word	0x00026fd1

0002c4e8 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2c4e8:	b590      	push	{r4, r7, lr}
   2c4ea:	b089      	sub	sp, #36	; 0x24
   2c4ec:	af00      	add	r7, sp, #0
   2c4ee:	60b9      	str	r1, [r7, #8]
   2c4f0:	607a      	str	r2, [r7, #4]
   2c4f2:	0019      	movs	r1, r3
   2c4f4:	230f      	movs	r3, #15
   2c4f6:	18fb      	adds	r3, r7, r3
   2c4f8:	1c02      	adds	r2, r0, #0
   2c4fa:	701a      	strb	r2, [r3, #0]
   2c4fc:	230e      	movs	r3, #14
   2c4fe:	18fb      	adds	r3, r7, r3
   2c500:	1c0a      	adds	r2, r1, #0
   2c502:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2c504:	231b      	movs	r3, #27
   2c506:	18fc      	adds	r4, r7, r3
   2c508:	230f      	movs	r3, #15
   2c50a:	18fb      	adds	r3, r7, r3
   2c50c:	781b      	ldrb	r3, [r3, #0]
   2c50e:	0018      	movs	r0, r3
   2c510:	4b28      	ldr	r3, [pc, #160]	; (2c5b4 <disk_read+0xcc>)
   2c512:	4798      	blx	r3
   2c514:	0003      	movs	r3, r0
   2c516:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2c518:	231b      	movs	r3, #27
   2c51a:	18fb      	adds	r3, r7, r3
   2c51c:	781b      	ldrb	r3, [r3, #0]
   2c51e:	2b00      	cmp	r3, #0
   2c520:	d101      	bne.n	2c526 <disk_read+0x3e>
		return RES_ERROR;
   2c522:	2301      	movs	r3, #1
   2c524:	e042      	b.n	2c5ac <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2c526:	2314      	movs	r3, #20
   2c528:	18fa      	adds	r2, r7, r3
   2c52a:	230f      	movs	r3, #15
   2c52c:	18fb      	adds	r3, r7, r3
   2c52e:	781b      	ldrb	r3, [r3, #0]
   2c530:	0011      	movs	r1, r2
   2c532:	0018      	movs	r0, r3
   2c534:	4b20      	ldr	r3, [pc, #128]	; (2c5b8 <disk_read+0xd0>)
   2c536:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2c538:	230e      	movs	r3, #14
   2c53a:	18fb      	adds	r3, r7, r3
   2c53c:	781b      	ldrb	r3, [r3, #0]
   2c53e:	221b      	movs	r2, #27
   2c540:	18ba      	adds	r2, r7, r2
   2c542:	7812      	ldrb	r2, [r2, #0]
   2c544:	4353      	muls	r3, r2
   2c546:	001a      	movs	r2, r3
   2c548:	687b      	ldr	r3, [r7, #4]
   2c54a:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2c54c:	697b      	ldr	r3, [r7, #20]
   2c54e:	3301      	adds	r3, #1
   2c550:	211b      	movs	r1, #27
   2c552:	1879      	adds	r1, r7, r1
   2c554:	7809      	ldrb	r1, [r1, #0]
   2c556:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2c558:	429a      	cmp	r2, r3
   2c55a:	d901      	bls.n	2c560 <disk_read+0x78>
		return RES_PARERR;
   2c55c:	2304      	movs	r3, #4
   2c55e:	e025      	b.n	2c5ac <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2c560:	2300      	movs	r3, #0
   2c562:	61fb      	str	r3, [r7, #28]
   2c564:	e01b      	b.n	2c59e <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2c566:	231b      	movs	r3, #27
   2c568:	18fb      	adds	r3, r7, r3
   2c56a:	781b      	ldrb	r3, [r3, #0]
   2c56c:	69fa      	ldr	r2, [r7, #28]
   2c56e:	435a      	muls	r2, r3
   2c570:	687b      	ldr	r3, [r7, #4]
   2c572:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2c574:	231b      	movs	r3, #27
   2c576:	18fb      	adds	r3, r7, r3
   2c578:	781b      	ldrb	r3, [r3, #0]
   2c57a:	69fa      	ldr	r2, [r7, #28]
   2c57c:	4353      	muls	r3, r2
   2c57e:	025b      	lsls	r3, r3, #9
   2c580:	68ba      	ldr	r2, [r7, #8]
   2c582:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2c584:	230f      	movs	r3, #15
   2c586:	18fb      	adds	r3, r7, r3
   2c588:	781b      	ldrb	r3, [r3, #0]
   2c58a:	0018      	movs	r0, r3
   2c58c:	4b0b      	ldr	r3, [pc, #44]	; (2c5bc <disk_read+0xd4>)
   2c58e:	4798      	blx	r3
   2c590:	1e03      	subs	r3, r0, #0
   2c592:	d001      	beq.n	2c598 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2c594:	2301      	movs	r3, #1
   2c596:	e009      	b.n	2c5ac <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2c598:	69fb      	ldr	r3, [r7, #28]
   2c59a:	3301      	adds	r3, #1
   2c59c:	61fb      	str	r3, [r7, #28]
   2c59e:	230e      	movs	r3, #14
   2c5a0:	18fb      	adds	r3, r7, r3
   2c5a2:	781a      	ldrb	r2, [r3, #0]
   2c5a4:	69fb      	ldr	r3, [r7, #28]
   2c5a6:	429a      	cmp	r2, r3
   2c5a8:	d8dd      	bhi.n	2c566 <disk_read+0x7e>
		}
	}

	return RES_OK;
   2c5aa:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2c5ac:	0018      	movs	r0, r3
   2c5ae:	46bd      	mov	sp, r7
   2c5b0:	b009      	add	sp, #36	; 0x24
   2c5b2:	bd90      	pop	{r4, r7, pc}
   2c5b4:	0002705d 	.word	0x0002705d
   2c5b8:	00027011 	.word	0x00027011
   2c5bc:	000270d1 	.word	0x000270d1

0002c5c0 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2c5c0:	b590      	push	{r4, r7, lr}
   2c5c2:	b089      	sub	sp, #36	; 0x24
   2c5c4:	af00      	add	r7, sp, #0
   2c5c6:	60b9      	str	r1, [r7, #8]
   2c5c8:	607a      	str	r2, [r7, #4]
   2c5ca:	0019      	movs	r1, r3
   2c5cc:	230f      	movs	r3, #15
   2c5ce:	18fb      	adds	r3, r7, r3
   2c5d0:	1c02      	adds	r2, r0, #0
   2c5d2:	701a      	strb	r2, [r3, #0]
   2c5d4:	230e      	movs	r3, #14
   2c5d6:	18fb      	adds	r3, r7, r3
   2c5d8:	1c0a      	adds	r2, r1, #0
   2c5da:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2c5dc:	231b      	movs	r3, #27
   2c5de:	18fc      	adds	r4, r7, r3
   2c5e0:	230f      	movs	r3, #15
   2c5e2:	18fb      	adds	r3, r7, r3
   2c5e4:	781b      	ldrb	r3, [r3, #0]
   2c5e6:	0018      	movs	r0, r3
   2c5e8:	4b28      	ldr	r3, [pc, #160]	; (2c68c <disk_write+0xcc>)
   2c5ea:	4798      	blx	r3
   2c5ec:	0003      	movs	r3, r0
   2c5ee:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2c5f0:	231b      	movs	r3, #27
   2c5f2:	18fb      	adds	r3, r7, r3
   2c5f4:	781b      	ldrb	r3, [r3, #0]
   2c5f6:	2b00      	cmp	r3, #0
   2c5f8:	d101      	bne.n	2c5fe <disk_write+0x3e>
		return RES_ERROR;
   2c5fa:	2301      	movs	r3, #1
   2c5fc:	e042      	b.n	2c684 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2c5fe:	2314      	movs	r3, #20
   2c600:	18fa      	adds	r2, r7, r3
   2c602:	230f      	movs	r3, #15
   2c604:	18fb      	adds	r3, r7, r3
   2c606:	781b      	ldrb	r3, [r3, #0]
   2c608:	0011      	movs	r1, r2
   2c60a:	0018      	movs	r0, r3
   2c60c:	4b20      	ldr	r3, [pc, #128]	; (2c690 <disk_write+0xd0>)
   2c60e:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2c610:	230e      	movs	r3, #14
   2c612:	18fb      	adds	r3, r7, r3
   2c614:	781b      	ldrb	r3, [r3, #0]
   2c616:	221b      	movs	r2, #27
   2c618:	18ba      	adds	r2, r7, r2
   2c61a:	7812      	ldrb	r2, [r2, #0]
   2c61c:	4353      	muls	r3, r2
   2c61e:	001a      	movs	r2, r3
   2c620:	687b      	ldr	r3, [r7, #4]
   2c622:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2c624:	697b      	ldr	r3, [r7, #20]
   2c626:	3301      	adds	r3, #1
   2c628:	211b      	movs	r1, #27
   2c62a:	1879      	adds	r1, r7, r1
   2c62c:	7809      	ldrb	r1, [r1, #0]
   2c62e:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2c630:	429a      	cmp	r2, r3
   2c632:	d901      	bls.n	2c638 <disk_write+0x78>
		return RES_PARERR;
   2c634:	2304      	movs	r3, #4
   2c636:	e025      	b.n	2c684 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2c638:	2300      	movs	r3, #0
   2c63a:	61fb      	str	r3, [r7, #28]
   2c63c:	e01b      	b.n	2c676 <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2c63e:	231b      	movs	r3, #27
   2c640:	18fb      	adds	r3, r7, r3
   2c642:	781b      	ldrb	r3, [r3, #0]
   2c644:	69fa      	ldr	r2, [r7, #28]
   2c646:	435a      	muls	r2, r3
   2c648:	687b      	ldr	r3, [r7, #4]
   2c64a:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2c64c:	231b      	movs	r3, #27
   2c64e:	18fb      	adds	r3, r7, r3
   2c650:	781b      	ldrb	r3, [r3, #0]
   2c652:	69fa      	ldr	r2, [r7, #28]
   2c654:	4353      	muls	r3, r2
   2c656:	025b      	lsls	r3, r3, #9
   2c658:	68ba      	ldr	r2, [r7, #8]
   2c65a:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2c65c:	230f      	movs	r3, #15
   2c65e:	18fb      	adds	r3, r7, r3
   2c660:	781b      	ldrb	r3, [r3, #0]
   2c662:	0018      	movs	r0, r3
   2c664:	4b0b      	ldr	r3, [pc, #44]	; (2c694 <disk_write+0xd4>)
   2c666:	4798      	blx	r3
   2c668:	1e03      	subs	r3, r0, #0
   2c66a:	d001      	beq.n	2c670 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2c66c:	2301      	movs	r3, #1
   2c66e:	e009      	b.n	2c684 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2c670:	69fb      	ldr	r3, [r7, #28]
   2c672:	3301      	adds	r3, #1
   2c674:	61fb      	str	r3, [r7, #28]
   2c676:	230e      	movs	r3, #14
   2c678:	18fb      	adds	r3, r7, r3
   2c67a:	781a      	ldrb	r2, [r3, #0]
   2c67c:	69fb      	ldr	r3, [r7, #28]
   2c67e:	429a      	cmp	r2, r3
   2c680:	d8dd      	bhi.n	2c63e <disk_write+0x7e>
		}
	}

	return RES_OK;
   2c682:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2c684:	0018      	movs	r0, r3
   2c686:	46bd      	mov	sp, r7
   2c688:	b009      	add	sp, #36	; 0x24
   2c68a:	bd90      	pop	{r4, r7, pc}
   2c68c:	0002705d 	.word	0x0002705d
   2c690:	00027011 	.word	0x00027011
   2c694:	00027125 	.word	0x00027125

0002c698 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2c698:	b590      	push	{r4, r7, lr}
   2c69a:	b085      	sub	sp, #20
   2c69c:	af00      	add	r7, sp, #0
   2c69e:	603a      	str	r2, [r7, #0]
   2c6a0:	1dfb      	adds	r3, r7, #7
   2c6a2:	1c02      	adds	r2, r0, #0
   2c6a4:	701a      	strb	r2, [r3, #0]
   2c6a6:	1dbb      	adds	r3, r7, #6
   2c6a8:	1c0a      	adds	r2, r1, #0
   2c6aa:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2c6ac:	230f      	movs	r3, #15
   2c6ae:	18fb      	adds	r3, r7, r3
   2c6b0:	2204      	movs	r2, #4
   2c6b2:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2c6b4:	1dbb      	adds	r3, r7, #6
   2c6b6:	781b      	ldrb	r3, [r3, #0]
   2c6b8:	2b01      	cmp	r3, #1
   2c6ba:	d00f      	beq.n	2c6dc <disk_ioctl+0x44>
   2c6bc:	dc02      	bgt.n	2c6c4 <disk_ioctl+0x2c>
   2c6be:	2b00      	cmp	r3, #0
   2c6c0:	d044      	beq.n	2c74c <disk_ioctl+0xb4>
   2c6c2:	e054      	b.n	2c76e <disk_ioctl+0xd6>
   2c6c4:	2b02      	cmp	r3, #2
   2c6c6:	d01a      	beq.n	2c6fe <disk_ioctl+0x66>
   2c6c8:	2b03      	cmp	r3, #3
   2c6ca:	d150      	bne.n	2c76e <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2c6cc:	683b      	ldr	r3, [r7, #0]
   2c6ce:	2201      	movs	r2, #1
   2c6d0:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2c6d2:	230f      	movs	r3, #15
   2c6d4:	18fb      	adds	r3, r7, r3
   2c6d6:	2200      	movs	r2, #0
   2c6d8:	701a      	strb	r2, [r3, #0]
		break;
   2c6da:	e04c      	b.n	2c776 <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2c6dc:	2308      	movs	r3, #8
   2c6de:	18fa      	adds	r2, r7, r3
   2c6e0:	1dfb      	adds	r3, r7, #7
   2c6e2:	781b      	ldrb	r3, [r3, #0]
   2c6e4:	0011      	movs	r1, r2
   2c6e6:	0018      	movs	r0, r3
   2c6e8:	4b26      	ldr	r3, [pc, #152]	; (2c784 <disk_ioctl+0xec>)
   2c6ea:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2c6ec:	68bb      	ldr	r3, [r7, #8]
   2c6ee:	1c5a      	adds	r2, r3, #1
   2c6f0:	683b      	ldr	r3, [r7, #0]
   2c6f2:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2c6f4:	230f      	movs	r3, #15
   2c6f6:	18fb      	adds	r3, r7, r3
   2c6f8:	2200      	movs	r2, #0
   2c6fa:	701a      	strb	r2, [r3, #0]
	}
	break;
   2c6fc:	e03b      	b.n	2c776 <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2c6fe:	230e      	movs	r3, #14
   2c700:	18fc      	adds	r4, r7, r3
   2c702:	1dfb      	adds	r3, r7, #7
   2c704:	781b      	ldrb	r3, [r3, #0]
   2c706:	0018      	movs	r0, r3
   2c708:	4b1f      	ldr	r3, [pc, #124]	; (2c788 <disk_ioctl+0xf0>)
   2c70a:	4798      	blx	r3
   2c70c:	0003      	movs	r3, r0
   2c70e:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2c710:	230e      	movs	r3, #14
   2c712:	18fb      	adds	r3, r7, r3
   2c714:	781b      	ldrb	r3, [r3, #0]
   2c716:	2b01      	cmp	r3, #1
   2c718:	d010      	beq.n	2c73c <disk_ioctl+0xa4>
   2c71a:	230e      	movs	r3, #14
   2c71c:	18fb      	adds	r3, r7, r3
   2c71e:	781b      	ldrb	r3, [r3, #0]
   2c720:	2b02      	cmp	r3, #2
   2c722:	d00b      	beq.n	2c73c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2c724:	230e      	movs	r3, #14
   2c726:	18fb      	adds	r3, r7, r3
   2c728:	781b      	ldrb	r3, [r3, #0]
   2c72a:	2b04      	cmp	r3, #4
   2c72c:	d006      	beq.n	2c73c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2c72e:	230e      	movs	r3, #14
   2c730:	18fb      	adds	r3, r7, r3
   2c732:	781b      	ldrb	r3, [r3, #0]
   2c734:	2b08      	cmp	r3, #8
   2c736:	d001      	beq.n	2c73c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2c738:	2301      	movs	r3, #1
   2c73a:	e01f      	b.n	2c77c <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2c73c:	683b      	ldr	r3, [r7, #0]
   2c73e:	2200      	movs	r2, #0
   2c740:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2c742:	230f      	movs	r3, #15
   2c744:	18fb      	adds	r3, r7, r3
   2c746:	2200      	movs	r2, #0
   2c748:	701a      	strb	r2, [r3, #0]
	}
	break;
   2c74a:	e014      	b.n	2c776 <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2c74c:	1dfb      	adds	r3, r7, #7
   2c74e:	781b      	ldrb	r3, [r3, #0]
   2c750:	0018      	movs	r0, r3
   2c752:	4b0e      	ldr	r3, [pc, #56]	; (2c78c <disk_ioctl+0xf4>)
   2c754:	4798      	blx	r3
   2c756:	1e03      	subs	r3, r0, #0
   2c758:	d104      	bne.n	2c764 <disk_ioctl+0xcc>
			res = RES_OK;
   2c75a:	230f      	movs	r3, #15
   2c75c:	18fb      	adds	r3, r7, r3
   2c75e:	2200      	movs	r2, #0
   2c760:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2c762:	e008      	b.n	2c776 <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2c764:	230f      	movs	r3, #15
   2c766:	18fb      	adds	r3, r7, r3
   2c768:	2203      	movs	r2, #3
   2c76a:	701a      	strb	r2, [r3, #0]
		break;
   2c76c:	e003      	b.n	2c776 <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2c76e:	230f      	movs	r3, #15
   2c770:	18fb      	adds	r3, r7, r3
   2c772:	2204      	movs	r2, #4
   2c774:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2c776:	230f      	movs	r3, #15
   2c778:	18fb      	adds	r3, r7, r3
   2c77a:	781b      	ldrb	r3, [r3, #0]
}
   2c77c:	0018      	movs	r0, r3
   2c77e:	46bd      	mov	sp, r7
   2c780:	b005      	add	sp, #20
   2c782:	bd90      	pop	{r4, r7, pc}
   2c784:	00027011 	.word	0x00027011
   2c788:	0002705d 	.word	0x0002705d
   2c78c:	00026fd1 	.word	0x00026fd1

0002c790 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2c790:	b580      	push	{r7, lr}
   2c792:	b084      	sub	sp, #16
   2c794:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2c796:	1d3a      	adds	r2, r7, #4
   2c798:	4b12      	ldr	r3, [pc, #72]	; (2c7e4 <get_fattime+0x54>)
   2c79a:	0011      	movs	r1, r2
   2c79c:	0018      	movs	r0, r3
   2c79e:	4b12      	ldr	r3, [pc, #72]	; (2c7e8 <get_fattime+0x58>)
   2c7a0:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2c7a2:	1d3b      	adds	r3, r7, #4
   2c7a4:	88db      	ldrh	r3, [r3, #6]
   2c7a6:	4a11      	ldr	r2, [pc, #68]	; (2c7ec <get_fattime+0x5c>)
   2c7a8:	4694      	mov	ip, r2
   2c7aa:	4463      	add	r3, ip
   2c7ac:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2c7ae:	1d3b      	adds	r3, r7, #4
   2c7b0:	795b      	ldrb	r3, [r3, #5]
   2c7b2:	055b      	lsls	r3, r3, #21
   2c7b4:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2c7b6:	1d3b      	adds	r3, r7, #4
   2c7b8:	791b      	ldrb	r3, [r3, #4]
   2c7ba:	041b      	lsls	r3, r3, #16
   2c7bc:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2c7be:	1d3b      	adds	r3, r7, #4
   2c7c0:	789b      	ldrb	r3, [r3, #2]
   2c7c2:	02db      	lsls	r3, r3, #11
   2c7c4:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2c7c6:	1d3b      	adds	r3, r7, #4
   2c7c8:	785b      	ldrb	r3, [r3, #1]
   2c7ca:	015b      	lsls	r3, r3, #5
   2c7cc:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2c7ce:	1d3a      	adds	r2, r7, #4
   2c7d0:	7812      	ldrb	r2, [r2, #0]
   2c7d2:	0852      	lsrs	r2, r2, #1
   2c7d4:	b2d2      	uxtb	r2, r2
   2c7d6:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2c7d8:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2c7da:	68fb      	ldr	r3, [r7, #12]
}
   2c7dc:	0018      	movs	r0, r3
   2c7de:	46bd      	mov	sp, r7
   2c7e0:	b004      	add	sp, #16
   2c7e2:	bd80      	pop	{r7, pc}
   2c7e4:	20005cd0 	.word	0x20005cd0
   2c7e8:	00027e3d 	.word	0x00027e3d
   2c7ec:	fffff844 	.word	0xfffff844

0002c7f0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2c7f0:	b580      	push	{r7, lr}
   2c7f2:	b086      	sub	sp, #24
   2c7f4:	af00      	add	r7, sp, #0
   2c7f6:	60f8      	str	r0, [r7, #12]
   2c7f8:	60b9      	str	r1, [r7, #8]
   2c7fa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2c7fc:	68fb      	ldr	r3, [r7, #12]
   2c7fe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2c800:	68bb      	ldr	r3, [r7, #8]
   2c802:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2c804:	e007      	b.n	2c816 <mem_cpy+0x26>
		*d++ = *s++;
   2c806:	697b      	ldr	r3, [r7, #20]
   2c808:	1c5a      	adds	r2, r3, #1
   2c80a:	617a      	str	r2, [r7, #20]
   2c80c:	693a      	ldr	r2, [r7, #16]
   2c80e:	1c51      	adds	r1, r2, #1
   2c810:	6139      	str	r1, [r7, #16]
   2c812:	7812      	ldrb	r2, [r2, #0]
   2c814:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2c816:	687b      	ldr	r3, [r7, #4]
   2c818:	1e5a      	subs	r2, r3, #1
   2c81a:	607a      	str	r2, [r7, #4]
   2c81c:	2b00      	cmp	r3, #0
   2c81e:	d1f2      	bne.n	2c806 <mem_cpy+0x16>
}
   2c820:	46c0      	nop			; (mov r8, r8)
   2c822:	46bd      	mov	sp, r7
   2c824:	b006      	add	sp, #24
   2c826:	bd80      	pop	{r7, pc}

0002c828 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2c828:	b580      	push	{r7, lr}
   2c82a:	b086      	sub	sp, #24
   2c82c:	af00      	add	r7, sp, #0
   2c82e:	60f8      	str	r0, [r7, #12]
   2c830:	60b9      	str	r1, [r7, #8]
   2c832:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2c834:	68fb      	ldr	r3, [r7, #12]
   2c836:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2c838:	e005      	b.n	2c846 <mem_set+0x1e>
		*d++ = (BYTE)val;
   2c83a:	697b      	ldr	r3, [r7, #20]
   2c83c:	1c5a      	adds	r2, r3, #1
   2c83e:	617a      	str	r2, [r7, #20]
   2c840:	68ba      	ldr	r2, [r7, #8]
   2c842:	b2d2      	uxtb	r2, r2
   2c844:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2c846:	687b      	ldr	r3, [r7, #4]
   2c848:	1e5a      	subs	r2, r3, #1
   2c84a:	607a      	str	r2, [r7, #4]
   2c84c:	2b00      	cmp	r3, #0
   2c84e:	d1f4      	bne.n	2c83a <mem_set+0x12>
}
   2c850:	46c0      	nop			; (mov r8, r8)
   2c852:	46bd      	mov	sp, r7
   2c854:	b006      	add	sp, #24
   2c856:	bd80      	pop	{r7, pc}

0002c858 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2c858:	b580      	push	{r7, lr}
   2c85a:	b088      	sub	sp, #32
   2c85c:	af00      	add	r7, sp, #0
   2c85e:	60f8      	str	r0, [r7, #12]
   2c860:	60b9      	str	r1, [r7, #8]
   2c862:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2c864:	68fb      	ldr	r3, [r7, #12]
   2c866:	61fb      	str	r3, [r7, #28]
   2c868:	68bb      	ldr	r3, [r7, #8]
   2c86a:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2c86c:	2300      	movs	r3, #0
   2c86e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2c870:	46c0      	nop			; (mov r8, r8)
   2c872:	687b      	ldr	r3, [r7, #4]
   2c874:	1e5a      	subs	r2, r3, #1
   2c876:	607a      	str	r2, [r7, #4]
   2c878:	2b00      	cmp	r3, #0
   2c87a:	d00d      	beq.n	2c898 <mem_cmp+0x40>
   2c87c:	69fb      	ldr	r3, [r7, #28]
   2c87e:	1c5a      	adds	r2, r3, #1
   2c880:	61fa      	str	r2, [r7, #28]
   2c882:	781b      	ldrb	r3, [r3, #0]
   2c884:	0019      	movs	r1, r3
   2c886:	69bb      	ldr	r3, [r7, #24]
   2c888:	1c5a      	adds	r2, r3, #1
   2c88a:	61ba      	str	r2, [r7, #24]
   2c88c:	781b      	ldrb	r3, [r3, #0]
   2c88e:	1acb      	subs	r3, r1, r3
   2c890:	617b      	str	r3, [r7, #20]
   2c892:	697b      	ldr	r3, [r7, #20]
   2c894:	2b00      	cmp	r3, #0
   2c896:	d0ec      	beq.n	2c872 <mem_cmp+0x1a>
	return r;
   2c898:	697b      	ldr	r3, [r7, #20]
}
   2c89a:	0018      	movs	r0, r3
   2c89c:	46bd      	mov	sp, r7
   2c89e:	b008      	add	sp, #32
   2c8a0:	bd80      	pop	{r7, pc}

0002c8a2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2c8a2:	b580      	push	{r7, lr}
   2c8a4:	b082      	sub	sp, #8
   2c8a6:	af00      	add	r7, sp, #0
   2c8a8:	6078      	str	r0, [r7, #4]
   2c8aa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2c8ac:	e002      	b.n	2c8b4 <chk_chr+0x12>
   2c8ae:	687b      	ldr	r3, [r7, #4]
   2c8b0:	3301      	adds	r3, #1
   2c8b2:	607b      	str	r3, [r7, #4]
   2c8b4:	687b      	ldr	r3, [r7, #4]
   2c8b6:	781b      	ldrb	r3, [r3, #0]
   2c8b8:	2b00      	cmp	r3, #0
   2c8ba:	d005      	beq.n	2c8c8 <chk_chr+0x26>
   2c8bc:	687b      	ldr	r3, [r7, #4]
   2c8be:	781b      	ldrb	r3, [r3, #0]
   2c8c0:	001a      	movs	r2, r3
   2c8c2:	683b      	ldr	r3, [r7, #0]
   2c8c4:	429a      	cmp	r2, r3
   2c8c6:	d1f2      	bne.n	2c8ae <chk_chr+0xc>
	return *str;
   2c8c8:	687b      	ldr	r3, [r7, #4]
   2c8ca:	781b      	ldrb	r3, [r3, #0]
}
   2c8cc:	0018      	movs	r0, r3
   2c8ce:	46bd      	mov	sp, r7
   2c8d0:	b002      	add	sp, #8
   2c8d2:	bd80      	pop	{r7, pc}

0002c8d4 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2c8d4:	b590      	push	{r4, r7, lr}
   2c8d6:	b085      	sub	sp, #20
   2c8d8:	af00      	add	r7, sp, #0
   2c8da:	6078      	str	r0, [r7, #4]
   2c8dc:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2c8de:	687b      	ldr	r3, [r7, #4]
   2c8e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2c8e2:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2c8e4:	68fa      	ldr	r2, [r7, #12]
   2c8e6:	683b      	ldr	r3, [r7, #0]
   2c8e8:	429a      	cmp	r2, r3
   2c8ea:	d04e      	beq.n	2c98a <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2c8ec:	687b      	ldr	r3, [r7, #4]
   2c8ee:	791b      	ldrb	r3, [r3, #4]
   2c8f0:	2b00      	cmp	r3, #0
   2c8f2:	d037      	beq.n	2c964 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2c8f4:	687b      	ldr	r3, [r7, #4]
   2c8f6:	7858      	ldrb	r0, [r3, #1]
   2c8f8:	687b      	ldr	r3, [r7, #4]
   2c8fa:	3330      	adds	r3, #48	; 0x30
   2c8fc:	0019      	movs	r1, r3
   2c8fe:	68fa      	ldr	r2, [r7, #12]
   2c900:	2301      	movs	r3, #1
   2c902:	4c24      	ldr	r4, [pc, #144]	; (2c994 <move_window+0xc0>)
   2c904:	47a0      	blx	r4
   2c906:	1e03      	subs	r3, r0, #0
   2c908:	d001      	beq.n	2c90e <move_window+0x3a>
				return FR_DISK_ERR;
   2c90a:	2301      	movs	r3, #1
   2c90c:	e03e      	b.n	2c98c <move_window+0xb8>
			fs->wflag = 0;
   2c90e:	687b      	ldr	r3, [r7, #4]
   2c910:	2200      	movs	r2, #0
   2c912:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2c914:	687b      	ldr	r3, [r7, #4]
   2c916:	6a1a      	ldr	r2, [r3, #32]
   2c918:	687b      	ldr	r3, [r7, #4]
   2c91a:	69db      	ldr	r3, [r3, #28]
   2c91c:	18d2      	adds	r2, r2, r3
   2c91e:	68fb      	ldr	r3, [r7, #12]
   2c920:	429a      	cmp	r2, r3
   2c922:	d91f      	bls.n	2c964 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2c924:	230b      	movs	r3, #11
   2c926:	18fb      	adds	r3, r7, r3
   2c928:	687a      	ldr	r2, [r7, #4]
   2c92a:	78d2      	ldrb	r2, [r2, #3]
   2c92c:	701a      	strb	r2, [r3, #0]
   2c92e:	e014      	b.n	2c95a <move_window+0x86>
					wsect += fs->fsize;
   2c930:	687b      	ldr	r3, [r7, #4]
   2c932:	69db      	ldr	r3, [r3, #28]
   2c934:	68fa      	ldr	r2, [r7, #12]
   2c936:	18d3      	adds	r3, r2, r3
   2c938:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2c93a:	687b      	ldr	r3, [r7, #4]
   2c93c:	7858      	ldrb	r0, [r3, #1]
   2c93e:	687b      	ldr	r3, [r7, #4]
   2c940:	3330      	adds	r3, #48	; 0x30
   2c942:	0019      	movs	r1, r3
   2c944:	68fa      	ldr	r2, [r7, #12]
   2c946:	2301      	movs	r3, #1
   2c948:	4c12      	ldr	r4, [pc, #72]	; (2c994 <move_window+0xc0>)
   2c94a:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2c94c:	230b      	movs	r3, #11
   2c94e:	18fb      	adds	r3, r7, r3
   2c950:	781a      	ldrb	r2, [r3, #0]
   2c952:	230b      	movs	r3, #11
   2c954:	18fb      	adds	r3, r7, r3
   2c956:	3a01      	subs	r2, #1
   2c958:	701a      	strb	r2, [r3, #0]
   2c95a:	230b      	movs	r3, #11
   2c95c:	18fb      	adds	r3, r7, r3
   2c95e:	781b      	ldrb	r3, [r3, #0]
   2c960:	2b01      	cmp	r3, #1
   2c962:	d8e5      	bhi.n	2c930 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2c964:	683b      	ldr	r3, [r7, #0]
   2c966:	2b00      	cmp	r3, #0
   2c968:	d00f      	beq.n	2c98a <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2c96a:	687b      	ldr	r3, [r7, #4]
   2c96c:	7858      	ldrb	r0, [r3, #1]
   2c96e:	687b      	ldr	r3, [r7, #4]
   2c970:	3330      	adds	r3, #48	; 0x30
   2c972:	0019      	movs	r1, r3
   2c974:	683a      	ldr	r2, [r7, #0]
   2c976:	2301      	movs	r3, #1
   2c978:	4c07      	ldr	r4, [pc, #28]	; (2c998 <move_window+0xc4>)
   2c97a:	47a0      	blx	r4
   2c97c:	1e03      	subs	r3, r0, #0
   2c97e:	d001      	beq.n	2c984 <move_window+0xb0>
				return FR_DISK_ERR;
   2c980:	2301      	movs	r3, #1
   2c982:	e003      	b.n	2c98c <move_window+0xb8>
			fs->winsect = sector;
   2c984:	687b      	ldr	r3, [r7, #4]
   2c986:	683a      	ldr	r2, [r7, #0]
   2c988:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2c98a:	2300      	movs	r3, #0
}
   2c98c:	0018      	movs	r0, r3
   2c98e:	46bd      	mov	sp, r7
   2c990:	b005      	add	sp, #20
   2c992:	bd90      	pop	{r4, r7, pc}
   2c994:	0002c5c1 	.word	0x0002c5c1
   2c998:	0002c4e9 	.word	0x0002c4e9

0002c99c <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2c99c:	b590      	push	{r4, r7, lr}
   2c99e:	b085      	sub	sp, #20
   2c9a0:	af00      	add	r7, sp, #0
   2c9a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2c9a4:	230f      	movs	r3, #15
   2c9a6:	18fc      	adds	r4, r7, r3
   2c9a8:	687b      	ldr	r3, [r7, #4]
   2c9aa:	2100      	movs	r1, #0
   2c9ac:	0018      	movs	r0, r3
   2c9ae:	4b52      	ldr	r3, [pc, #328]	; (2caf8 <sync+0x15c>)
   2c9b0:	4798      	blx	r3
   2c9b2:	0003      	movs	r3, r0
   2c9b4:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2c9b6:	230f      	movs	r3, #15
   2c9b8:	18fb      	adds	r3, r7, r3
   2c9ba:	781b      	ldrb	r3, [r3, #0]
   2c9bc:	2b00      	cmp	r3, #0
   2c9be:	d000      	beq.n	2c9c2 <sync+0x26>
   2c9c0:	e093      	b.n	2caea <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2c9c2:	687b      	ldr	r3, [r7, #4]
   2c9c4:	781b      	ldrb	r3, [r3, #0]
   2c9c6:	2b03      	cmp	r3, #3
   2c9c8:	d000      	beq.n	2c9cc <sync+0x30>
   2c9ca:	e081      	b.n	2cad0 <sync+0x134>
   2c9cc:	687b      	ldr	r3, [r7, #4]
   2c9ce:	795b      	ldrb	r3, [r3, #5]
   2c9d0:	2b00      	cmp	r3, #0
   2c9d2:	d07d      	beq.n	2cad0 <sync+0x134>
			fs->winsect = 0;
   2c9d4:	687b      	ldr	r3, [r7, #4]
   2c9d6:	2200      	movs	r2, #0
   2c9d8:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2c9da:	687b      	ldr	r3, [r7, #4]
   2c9dc:	3330      	adds	r3, #48	; 0x30
   2c9de:	0018      	movs	r0, r3
   2c9e0:	2380      	movs	r3, #128	; 0x80
   2c9e2:	009b      	lsls	r3, r3, #2
   2c9e4:	001a      	movs	r2, r3
   2c9e6:	2100      	movs	r1, #0
   2c9e8:	4b44      	ldr	r3, [pc, #272]	; (2cafc <sync+0x160>)
   2c9ea:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2c9ec:	687b      	ldr	r3, [r7, #4]
   2c9ee:	4a44      	ldr	r2, [pc, #272]	; (2cb00 <sync+0x164>)
   2c9f0:	2155      	movs	r1, #85	; 0x55
   2c9f2:	5499      	strb	r1, [r3, r2]
   2c9f4:	687b      	ldr	r3, [r7, #4]
   2c9f6:	4a43      	ldr	r2, [pc, #268]	; (2cb04 <sync+0x168>)
   2c9f8:	21aa      	movs	r1, #170	; 0xaa
   2c9fa:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2c9fc:	687b      	ldr	r3, [r7, #4]
   2c9fe:	2230      	movs	r2, #48	; 0x30
   2ca00:	2152      	movs	r1, #82	; 0x52
   2ca02:	5499      	strb	r1, [r3, r2]
   2ca04:	687b      	ldr	r3, [r7, #4]
   2ca06:	2231      	movs	r2, #49	; 0x31
   2ca08:	2152      	movs	r1, #82	; 0x52
   2ca0a:	5499      	strb	r1, [r3, r2]
   2ca0c:	687b      	ldr	r3, [r7, #4]
   2ca0e:	2232      	movs	r2, #50	; 0x32
   2ca10:	2161      	movs	r1, #97	; 0x61
   2ca12:	5499      	strb	r1, [r3, r2]
   2ca14:	687b      	ldr	r3, [r7, #4]
   2ca16:	2233      	movs	r2, #51	; 0x33
   2ca18:	2141      	movs	r1, #65	; 0x41
   2ca1a:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2ca1c:	687a      	ldr	r2, [r7, #4]
   2ca1e:	2385      	movs	r3, #133	; 0x85
   2ca20:	009b      	lsls	r3, r3, #2
   2ca22:	2172      	movs	r1, #114	; 0x72
   2ca24:	54d1      	strb	r1, [r2, r3]
   2ca26:	687b      	ldr	r3, [r7, #4]
   2ca28:	4a37      	ldr	r2, [pc, #220]	; (2cb08 <sync+0x16c>)
   2ca2a:	2172      	movs	r1, #114	; 0x72
   2ca2c:	5499      	strb	r1, [r3, r2]
   2ca2e:	687b      	ldr	r3, [r7, #4]
   2ca30:	4a36      	ldr	r2, [pc, #216]	; (2cb0c <sync+0x170>)
   2ca32:	2141      	movs	r1, #65	; 0x41
   2ca34:	5499      	strb	r1, [r3, r2]
   2ca36:	687b      	ldr	r3, [r7, #4]
   2ca38:	4a35      	ldr	r2, [pc, #212]	; (2cb10 <sync+0x174>)
   2ca3a:	2161      	movs	r1, #97	; 0x61
   2ca3c:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2ca3e:	687b      	ldr	r3, [r7, #4]
   2ca40:	691b      	ldr	r3, [r3, #16]
   2ca42:	b2d9      	uxtb	r1, r3
   2ca44:	687a      	ldr	r2, [r7, #4]
   2ca46:	2386      	movs	r3, #134	; 0x86
   2ca48:	009b      	lsls	r3, r3, #2
   2ca4a:	54d1      	strb	r1, [r2, r3]
   2ca4c:	687b      	ldr	r3, [r7, #4]
   2ca4e:	691b      	ldr	r3, [r3, #16]
   2ca50:	b29b      	uxth	r3, r3
   2ca52:	0a1b      	lsrs	r3, r3, #8
   2ca54:	b29b      	uxth	r3, r3
   2ca56:	b2d9      	uxtb	r1, r3
   2ca58:	687b      	ldr	r3, [r7, #4]
   2ca5a:	4a2e      	ldr	r2, [pc, #184]	; (2cb14 <sync+0x178>)
   2ca5c:	5499      	strb	r1, [r3, r2]
   2ca5e:	687b      	ldr	r3, [r7, #4]
   2ca60:	691b      	ldr	r3, [r3, #16]
   2ca62:	0c1b      	lsrs	r3, r3, #16
   2ca64:	b2d9      	uxtb	r1, r3
   2ca66:	687b      	ldr	r3, [r7, #4]
   2ca68:	4a2b      	ldr	r2, [pc, #172]	; (2cb18 <sync+0x17c>)
   2ca6a:	5499      	strb	r1, [r3, r2]
   2ca6c:	687b      	ldr	r3, [r7, #4]
   2ca6e:	691b      	ldr	r3, [r3, #16]
   2ca70:	0e1b      	lsrs	r3, r3, #24
   2ca72:	b2d9      	uxtb	r1, r3
   2ca74:	687b      	ldr	r3, [r7, #4]
   2ca76:	4a29      	ldr	r2, [pc, #164]	; (2cb1c <sync+0x180>)
   2ca78:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2ca7a:	687b      	ldr	r3, [r7, #4]
   2ca7c:	68db      	ldr	r3, [r3, #12]
   2ca7e:	b2d9      	uxtb	r1, r3
   2ca80:	687a      	ldr	r2, [r7, #4]
   2ca82:	2387      	movs	r3, #135	; 0x87
   2ca84:	009b      	lsls	r3, r3, #2
   2ca86:	54d1      	strb	r1, [r2, r3]
   2ca88:	687b      	ldr	r3, [r7, #4]
   2ca8a:	68db      	ldr	r3, [r3, #12]
   2ca8c:	b29b      	uxth	r3, r3
   2ca8e:	0a1b      	lsrs	r3, r3, #8
   2ca90:	b29b      	uxth	r3, r3
   2ca92:	b2d9      	uxtb	r1, r3
   2ca94:	687b      	ldr	r3, [r7, #4]
   2ca96:	4a22      	ldr	r2, [pc, #136]	; (2cb20 <sync+0x184>)
   2ca98:	5499      	strb	r1, [r3, r2]
   2ca9a:	687b      	ldr	r3, [r7, #4]
   2ca9c:	68db      	ldr	r3, [r3, #12]
   2ca9e:	0c1b      	lsrs	r3, r3, #16
   2caa0:	b2d9      	uxtb	r1, r3
   2caa2:	687b      	ldr	r3, [r7, #4]
   2caa4:	4a1f      	ldr	r2, [pc, #124]	; (2cb24 <sync+0x188>)
   2caa6:	5499      	strb	r1, [r3, r2]
   2caa8:	687b      	ldr	r3, [r7, #4]
   2caaa:	68db      	ldr	r3, [r3, #12]
   2caac:	0e1b      	lsrs	r3, r3, #24
   2caae:	b2d9      	uxtb	r1, r3
   2cab0:	687b      	ldr	r3, [r7, #4]
   2cab2:	4a1d      	ldr	r2, [pc, #116]	; (2cb28 <sync+0x18c>)
   2cab4:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2cab6:	687b      	ldr	r3, [r7, #4]
   2cab8:	7858      	ldrb	r0, [r3, #1]
   2caba:	687b      	ldr	r3, [r7, #4]
   2cabc:	3330      	adds	r3, #48	; 0x30
   2cabe:	0019      	movs	r1, r3
   2cac0:	687b      	ldr	r3, [r7, #4]
   2cac2:	695a      	ldr	r2, [r3, #20]
   2cac4:	2301      	movs	r3, #1
   2cac6:	4c19      	ldr	r4, [pc, #100]	; (2cb2c <sync+0x190>)
   2cac8:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2caca:	687b      	ldr	r3, [r7, #4]
   2cacc:	2200      	movs	r2, #0
   2cace:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2cad0:	687b      	ldr	r3, [r7, #4]
   2cad2:	785b      	ldrb	r3, [r3, #1]
   2cad4:	2200      	movs	r2, #0
   2cad6:	2100      	movs	r1, #0
   2cad8:	0018      	movs	r0, r3
   2cada:	4b15      	ldr	r3, [pc, #84]	; (2cb30 <sync+0x194>)
   2cadc:	4798      	blx	r3
   2cade:	1e03      	subs	r3, r0, #0
   2cae0:	d003      	beq.n	2caea <sync+0x14e>
			res = FR_DISK_ERR;
   2cae2:	230f      	movs	r3, #15
   2cae4:	18fb      	adds	r3, r7, r3
   2cae6:	2201      	movs	r2, #1
   2cae8:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2caea:	230f      	movs	r3, #15
   2caec:	18fb      	adds	r3, r7, r3
   2caee:	781b      	ldrb	r3, [r3, #0]
}
   2caf0:	0018      	movs	r0, r3
   2caf2:	46bd      	mov	sp, r7
   2caf4:	b005      	add	sp, #20
   2caf6:	bd90      	pop	{r4, r7, pc}
   2caf8:	0002c8d5 	.word	0x0002c8d5
   2cafc:	0002c829 	.word	0x0002c829
   2cb00:	0000022e 	.word	0x0000022e
   2cb04:	0000022f 	.word	0x0000022f
   2cb08:	00000215 	.word	0x00000215
   2cb0c:	00000216 	.word	0x00000216
   2cb10:	00000217 	.word	0x00000217
   2cb14:	00000219 	.word	0x00000219
   2cb18:	0000021a 	.word	0x0000021a
   2cb1c:	0000021b 	.word	0x0000021b
   2cb20:	0000021d 	.word	0x0000021d
   2cb24:	0000021e 	.word	0x0000021e
   2cb28:	0000021f 	.word	0x0000021f
   2cb2c:	0002c5c1 	.word	0x0002c5c1
   2cb30:	0002c699 	.word	0x0002c699

0002cb34 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2cb34:	b580      	push	{r7, lr}
   2cb36:	b082      	sub	sp, #8
   2cb38:	af00      	add	r7, sp, #0
   2cb3a:	6078      	str	r0, [r7, #4]
   2cb3c:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2cb3e:	683b      	ldr	r3, [r7, #0]
   2cb40:	3b02      	subs	r3, #2
   2cb42:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2cb44:	687b      	ldr	r3, [r7, #4]
   2cb46:	699b      	ldr	r3, [r3, #24]
   2cb48:	1e9a      	subs	r2, r3, #2
   2cb4a:	683b      	ldr	r3, [r7, #0]
   2cb4c:	429a      	cmp	r2, r3
   2cb4e:	d801      	bhi.n	2cb54 <clust2sect+0x20>
   2cb50:	2300      	movs	r3, #0
   2cb52:	e007      	b.n	2cb64 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2cb54:	687b      	ldr	r3, [r7, #4]
   2cb56:	789b      	ldrb	r3, [r3, #2]
   2cb58:	001a      	movs	r2, r3
   2cb5a:	683b      	ldr	r3, [r7, #0]
   2cb5c:	435a      	muls	r2, r3
   2cb5e:	687b      	ldr	r3, [r7, #4]
   2cb60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2cb62:	18d3      	adds	r3, r2, r3
}
   2cb64:	0018      	movs	r0, r3
   2cb66:	46bd      	mov	sp, r7
   2cb68:	b002      	add	sp, #8
   2cb6a:	bd80      	pop	{r7, pc}

0002cb6c <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2cb6c:	b580      	push	{r7, lr}
   2cb6e:	b086      	sub	sp, #24
   2cb70:	af00      	add	r7, sp, #0
   2cb72:	6078      	str	r0, [r7, #4]
   2cb74:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2cb76:	683b      	ldr	r3, [r7, #0]
   2cb78:	2b01      	cmp	r3, #1
   2cb7a:	d904      	bls.n	2cb86 <get_fat+0x1a>
   2cb7c:	687b      	ldr	r3, [r7, #4]
   2cb7e:	699a      	ldr	r2, [r3, #24]
   2cb80:	683b      	ldr	r3, [r7, #0]
   2cb82:	429a      	cmp	r2, r3
   2cb84:	d801      	bhi.n	2cb8a <get_fat+0x1e>
		return 1;
   2cb86:	2301      	movs	r3, #1
   2cb88:	e09f      	b.n	2ccca <get_fat+0x15e>

	switch (fs->fs_type) {
   2cb8a:	687b      	ldr	r3, [r7, #4]
   2cb8c:	781b      	ldrb	r3, [r3, #0]
   2cb8e:	2b02      	cmp	r3, #2
   2cb90:	d048      	beq.n	2cc24 <get_fat+0xb8>
   2cb92:	2b03      	cmp	r3, #3
   2cb94:	d067      	beq.n	2cc66 <get_fat+0xfa>
   2cb96:	2b01      	cmp	r3, #1
   2cb98:	d000      	beq.n	2cb9c <get_fat+0x30>
   2cb9a:	e094      	b.n	2ccc6 <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2cb9c:	683b      	ldr	r3, [r7, #0]
   2cb9e:	617b      	str	r3, [r7, #20]
   2cba0:	697b      	ldr	r3, [r7, #20]
   2cba2:	085b      	lsrs	r3, r3, #1
   2cba4:	697a      	ldr	r2, [r7, #20]
   2cba6:	18d3      	adds	r3, r2, r3
   2cba8:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2cbaa:	687b      	ldr	r3, [r7, #4]
   2cbac:	6a1a      	ldr	r2, [r3, #32]
   2cbae:	697b      	ldr	r3, [r7, #20]
   2cbb0:	0a5b      	lsrs	r3, r3, #9
   2cbb2:	18d2      	adds	r2, r2, r3
   2cbb4:	687b      	ldr	r3, [r7, #4]
   2cbb6:	0011      	movs	r1, r2
   2cbb8:	0018      	movs	r0, r3
   2cbba:	4b46      	ldr	r3, [pc, #280]	; (2ccd4 <get_fat+0x168>)
   2cbbc:	4798      	blx	r3
   2cbbe:	1e03      	subs	r3, r0, #0
   2cbc0:	d000      	beq.n	2cbc4 <get_fat+0x58>
   2cbc2:	e079      	b.n	2ccb8 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2cbc4:	697b      	ldr	r3, [r7, #20]
   2cbc6:	05db      	lsls	r3, r3, #23
   2cbc8:	0ddb      	lsrs	r3, r3, #23
   2cbca:	687a      	ldr	r2, [r7, #4]
   2cbcc:	2130      	movs	r1, #48	; 0x30
   2cbce:	18d3      	adds	r3, r2, r3
   2cbd0:	185b      	adds	r3, r3, r1
   2cbd2:	781b      	ldrb	r3, [r3, #0]
   2cbd4:	613b      	str	r3, [r7, #16]
   2cbd6:	697b      	ldr	r3, [r7, #20]
   2cbd8:	3301      	adds	r3, #1
   2cbda:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2cbdc:	687b      	ldr	r3, [r7, #4]
   2cbde:	6a1a      	ldr	r2, [r3, #32]
   2cbe0:	697b      	ldr	r3, [r7, #20]
   2cbe2:	0a5b      	lsrs	r3, r3, #9
   2cbe4:	18d2      	adds	r2, r2, r3
   2cbe6:	687b      	ldr	r3, [r7, #4]
   2cbe8:	0011      	movs	r1, r2
   2cbea:	0018      	movs	r0, r3
   2cbec:	4b39      	ldr	r3, [pc, #228]	; (2ccd4 <get_fat+0x168>)
   2cbee:	4798      	blx	r3
   2cbf0:	1e03      	subs	r3, r0, #0
   2cbf2:	d163      	bne.n	2ccbc <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2cbf4:	697b      	ldr	r3, [r7, #20]
   2cbf6:	05db      	lsls	r3, r3, #23
   2cbf8:	0ddb      	lsrs	r3, r3, #23
   2cbfa:	687a      	ldr	r2, [r7, #4]
   2cbfc:	2130      	movs	r1, #48	; 0x30
   2cbfe:	18d3      	adds	r3, r2, r3
   2cc00:	185b      	adds	r3, r3, r1
   2cc02:	781b      	ldrb	r3, [r3, #0]
   2cc04:	021b      	lsls	r3, r3, #8
   2cc06:	001a      	movs	r2, r3
   2cc08:	693b      	ldr	r3, [r7, #16]
   2cc0a:	4313      	orrs	r3, r2
   2cc0c:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2cc0e:	683b      	ldr	r3, [r7, #0]
   2cc10:	2201      	movs	r2, #1
   2cc12:	4013      	ands	r3, r2
   2cc14:	d002      	beq.n	2cc1c <get_fat+0xb0>
   2cc16:	693b      	ldr	r3, [r7, #16]
   2cc18:	091b      	lsrs	r3, r3, #4
   2cc1a:	e056      	b.n	2ccca <get_fat+0x15e>
   2cc1c:	693b      	ldr	r3, [r7, #16]
   2cc1e:	051b      	lsls	r3, r3, #20
   2cc20:	0d1b      	lsrs	r3, r3, #20
   2cc22:	e052      	b.n	2ccca <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2cc24:	687b      	ldr	r3, [r7, #4]
   2cc26:	6a1a      	ldr	r2, [r3, #32]
   2cc28:	683b      	ldr	r3, [r7, #0]
   2cc2a:	0a1b      	lsrs	r3, r3, #8
   2cc2c:	18d2      	adds	r2, r2, r3
   2cc2e:	687b      	ldr	r3, [r7, #4]
   2cc30:	0011      	movs	r1, r2
   2cc32:	0018      	movs	r0, r3
   2cc34:	4b27      	ldr	r3, [pc, #156]	; (2ccd4 <get_fat+0x168>)
   2cc36:	4798      	blx	r3
   2cc38:	1e03      	subs	r3, r0, #0
   2cc3a:	d141      	bne.n	2ccc0 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2cc3c:	683b      	ldr	r3, [r7, #0]
   2cc3e:	005a      	lsls	r2, r3, #1
   2cc40:	23ff      	movs	r3, #255	; 0xff
   2cc42:	005b      	lsls	r3, r3, #1
   2cc44:	4013      	ands	r3, r2
   2cc46:	3330      	adds	r3, #48	; 0x30
   2cc48:	687a      	ldr	r2, [r7, #4]
   2cc4a:	18d3      	adds	r3, r2, r3
   2cc4c:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2cc4e:	68fb      	ldr	r3, [r7, #12]
   2cc50:	3301      	adds	r3, #1
   2cc52:	781b      	ldrb	r3, [r3, #0]
   2cc54:	021b      	lsls	r3, r3, #8
   2cc56:	b21a      	sxth	r2, r3
   2cc58:	68fb      	ldr	r3, [r7, #12]
   2cc5a:	781b      	ldrb	r3, [r3, #0]
   2cc5c:	b21b      	sxth	r3, r3
   2cc5e:	4313      	orrs	r3, r2
   2cc60:	b21b      	sxth	r3, r3
   2cc62:	b29b      	uxth	r3, r3
   2cc64:	e031      	b.n	2ccca <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2cc66:	687b      	ldr	r3, [r7, #4]
   2cc68:	6a1a      	ldr	r2, [r3, #32]
   2cc6a:	683b      	ldr	r3, [r7, #0]
   2cc6c:	09db      	lsrs	r3, r3, #7
   2cc6e:	18d2      	adds	r2, r2, r3
   2cc70:	687b      	ldr	r3, [r7, #4]
   2cc72:	0011      	movs	r1, r2
   2cc74:	0018      	movs	r0, r3
   2cc76:	4b17      	ldr	r3, [pc, #92]	; (2ccd4 <get_fat+0x168>)
   2cc78:	4798      	blx	r3
   2cc7a:	1e03      	subs	r3, r0, #0
   2cc7c:	d122      	bne.n	2ccc4 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2cc7e:	683b      	ldr	r3, [r7, #0]
   2cc80:	009a      	lsls	r2, r3, #2
   2cc82:	23fe      	movs	r3, #254	; 0xfe
   2cc84:	005b      	lsls	r3, r3, #1
   2cc86:	4013      	ands	r3, r2
   2cc88:	3330      	adds	r3, #48	; 0x30
   2cc8a:	687a      	ldr	r2, [r7, #4]
   2cc8c:	18d3      	adds	r3, r2, r3
   2cc8e:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2cc90:	68fb      	ldr	r3, [r7, #12]
   2cc92:	3303      	adds	r3, #3
   2cc94:	781b      	ldrb	r3, [r3, #0]
   2cc96:	061a      	lsls	r2, r3, #24
   2cc98:	68fb      	ldr	r3, [r7, #12]
   2cc9a:	3302      	adds	r3, #2
   2cc9c:	781b      	ldrb	r3, [r3, #0]
   2cc9e:	041b      	lsls	r3, r3, #16
   2cca0:	4313      	orrs	r3, r2
   2cca2:	68fa      	ldr	r2, [r7, #12]
   2cca4:	3201      	adds	r2, #1
   2cca6:	7812      	ldrb	r2, [r2, #0]
   2cca8:	0212      	lsls	r2, r2, #8
   2ccaa:	4313      	orrs	r3, r2
   2ccac:	68fa      	ldr	r2, [r7, #12]
   2ccae:	7812      	ldrb	r2, [r2, #0]
   2ccb0:	4313      	orrs	r3, r2
   2ccb2:	011b      	lsls	r3, r3, #4
   2ccb4:	091b      	lsrs	r3, r3, #4
   2ccb6:	e008      	b.n	2ccca <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2ccb8:	46c0      	nop			; (mov r8, r8)
   2ccba:	e004      	b.n	2ccc6 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2ccbc:	46c0      	nop			; (mov r8, r8)
   2ccbe:	e002      	b.n	2ccc6 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2ccc0:	46c0      	nop			; (mov r8, r8)
   2ccc2:	e000      	b.n	2ccc6 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2ccc4:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2ccc6:	2301      	movs	r3, #1
   2ccc8:	425b      	negs	r3, r3
}
   2ccca:	0018      	movs	r0, r3
   2cccc:	46bd      	mov	sp, r7
   2ccce:	b006      	add	sp, #24
   2ccd0:	bd80      	pop	{r7, pc}
   2ccd2:	46c0      	nop			; (mov r8, r8)
   2ccd4:	0002c8d5 	.word	0x0002c8d5

0002ccd8 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2ccd8:	b590      	push	{r4, r7, lr}
   2ccda:	b089      	sub	sp, #36	; 0x24
   2ccdc:	af00      	add	r7, sp, #0
   2ccde:	60f8      	str	r0, [r7, #12]
   2cce0:	60b9      	str	r1, [r7, #8]
   2cce2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2cce4:	68bb      	ldr	r3, [r7, #8]
   2cce6:	2b01      	cmp	r3, #1
   2cce8:	d904      	bls.n	2ccf4 <put_fat+0x1c>
   2ccea:	68fb      	ldr	r3, [r7, #12]
   2ccec:	699a      	ldr	r2, [r3, #24]
   2ccee:	68bb      	ldr	r3, [r7, #8]
   2ccf0:	429a      	cmp	r2, r3
   2ccf2:	d804      	bhi.n	2ccfe <put_fat+0x26>
		res = FR_INT_ERR;
   2ccf4:	231f      	movs	r3, #31
   2ccf6:	18fb      	adds	r3, r7, r3
   2ccf8:	2202      	movs	r2, #2
   2ccfa:	701a      	strb	r2, [r3, #0]
   2ccfc:	e100      	b.n	2cf00 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2ccfe:	68fb      	ldr	r3, [r7, #12]
   2cd00:	781b      	ldrb	r3, [r3, #0]
   2cd02:	2b02      	cmp	r3, #2
   2cd04:	d100      	bne.n	2cd08 <put_fat+0x30>
   2cd06:	e078      	b.n	2cdfa <put_fat+0x122>
   2cd08:	2b03      	cmp	r3, #3
   2cd0a:	d100      	bne.n	2cd0e <put_fat+0x36>
   2cd0c:	e09e      	b.n	2ce4c <put_fat+0x174>
   2cd0e:	2b01      	cmp	r3, #1
   2cd10:	d000      	beq.n	2cd14 <put_fat+0x3c>
   2cd12:	e0e6      	b.n	2cee2 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2cd14:	68bb      	ldr	r3, [r7, #8]
   2cd16:	61bb      	str	r3, [r7, #24]
   2cd18:	69bb      	ldr	r3, [r7, #24]
   2cd1a:	085b      	lsrs	r3, r3, #1
   2cd1c:	69ba      	ldr	r2, [r7, #24]
   2cd1e:	18d3      	adds	r3, r2, r3
   2cd20:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2cd22:	68fb      	ldr	r3, [r7, #12]
   2cd24:	6a1a      	ldr	r2, [r3, #32]
   2cd26:	69bb      	ldr	r3, [r7, #24]
   2cd28:	0a5b      	lsrs	r3, r3, #9
   2cd2a:	18d2      	adds	r2, r2, r3
   2cd2c:	231f      	movs	r3, #31
   2cd2e:	18fc      	adds	r4, r7, r3
   2cd30:	68fb      	ldr	r3, [r7, #12]
   2cd32:	0011      	movs	r1, r2
   2cd34:	0018      	movs	r0, r3
   2cd36:	4b76      	ldr	r3, [pc, #472]	; (2cf10 <put_fat+0x238>)
   2cd38:	4798      	blx	r3
   2cd3a:	0003      	movs	r3, r0
   2cd3c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2cd3e:	231f      	movs	r3, #31
   2cd40:	18fb      	adds	r3, r7, r3
   2cd42:	781b      	ldrb	r3, [r3, #0]
   2cd44:	2b00      	cmp	r3, #0
   2cd46:	d000      	beq.n	2cd4a <put_fat+0x72>
   2cd48:	e0d0      	b.n	2ceec <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2cd4a:	69bb      	ldr	r3, [r7, #24]
   2cd4c:	05db      	lsls	r3, r3, #23
   2cd4e:	0ddb      	lsrs	r3, r3, #23
   2cd50:	3330      	adds	r3, #48	; 0x30
   2cd52:	68fa      	ldr	r2, [r7, #12]
   2cd54:	18d3      	adds	r3, r2, r3
   2cd56:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2cd58:	68bb      	ldr	r3, [r7, #8]
   2cd5a:	2201      	movs	r2, #1
   2cd5c:	4013      	ands	r3, r2
   2cd5e:	d00d      	beq.n	2cd7c <put_fat+0xa4>
   2cd60:	697b      	ldr	r3, [r7, #20]
   2cd62:	781b      	ldrb	r3, [r3, #0]
   2cd64:	b25b      	sxtb	r3, r3
   2cd66:	220f      	movs	r2, #15
   2cd68:	4013      	ands	r3, r2
   2cd6a:	b25a      	sxtb	r2, r3
   2cd6c:	687b      	ldr	r3, [r7, #4]
   2cd6e:	b2db      	uxtb	r3, r3
   2cd70:	011b      	lsls	r3, r3, #4
   2cd72:	b25b      	sxtb	r3, r3
   2cd74:	4313      	orrs	r3, r2
   2cd76:	b25b      	sxtb	r3, r3
   2cd78:	b2db      	uxtb	r3, r3
   2cd7a:	e001      	b.n	2cd80 <put_fat+0xa8>
   2cd7c:	687b      	ldr	r3, [r7, #4]
   2cd7e:	b2db      	uxtb	r3, r3
   2cd80:	697a      	ldr	r2, [r7, #20]
   2cd82:	7013      	strb	r3, [r2, #0]
			bc++;
   2cd84:	69bb      	ldr	r3, [r7, #24]
   2cd86:	3301      	adds	r3, #1
   2cd88:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2cd8a:	68fb      	ldr	r3, [r7, #12]
   2cd8c:	2201      	movs	r2, #1
   2cd8e:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2cd90:	68fb      	ldr	r3, [r7, #12]
   2cd92:	6a1a      	ldr	r2, [r3, #32]
   2cd94:	69bb      	ldr	r3, [r7, #24]
   2cd96:	0a5b      	lsrs	r3, r3, #9
   2cd98:	18d2      	adds	r2, r2, r3
   2cd9a:	231f      	movs	r3, #31
   2cd9c:	18fc      	adds	r4, r7, r3
   2cd9e:	68fb      	ldr	r3, [r7, #12]
   2cda0:	0011      	movs	r1, r2
   2cda2:	0018      	movs	r0, r3
   2cda4:	4b5a      	ldr	r3, [pc, #360]	; (2cf10 <put_fat+0x238>)
   2cda6:	4798      	blx	r3
   2cda8:	0003      	movs	r3, r0
   2cdaa:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2cdac:	231f      	movs	r3, #31
   2cdae:	18fb      	adds	r3, r7, r3
   2cdb0:	781b      	ldrb	r3, [r3, #0]
   2cdb2:	2b00      	cmp	r3, #0
   2cdb4:	d000      	beq.n	2cdb8 <put_fat+0xe0>
   2cdb6:	e09b      	b.n	2cef0 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2cdb8:	69bb      	ldr	r3, [r7, #24]
   2cdba:	05db      	lsls	r3, r3, #23
   2cdbc:	0ddb      	lsrs	r3, r3, #23
   2cdbe:	3330      	adds	r3, #48	; 0x30
   2cdc0:	68fa      	ldr	r2, [r7, #12]
   2cdc2:	18d3      	adds	r3, r2, r3
   2cdc4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2cdc6:	68bb      	ldr	r3, [r7, #8]
   2cdc8:	2201      	movs	r2, #1
   2cdca:	4013      	ands	r3, r2
   2cdcc:	d003      	beq.n	2cdd6 <put_fat+0xfe>
   2cdce:	687b      	ldr	r3, [r7, #4]
   2cdd0:	091b      	lsrs	r3, r3, #4
   2cdd2:	b2db      	uxtb	r3, r3
   2cdd4:	e00e      	b.n	2cdf4 <put_fat+0x11c>
   2cdd6:	697b      	ldr	r3, [r7, #20]
   2cdd8:	781b      	ldrb	r3, [r3, #0]
   2cdda:	b25b      	sxtb	r3, r3
   2cddc:	220f      	movs	r2, #15
   2cdde:	4393      	bics	r3, r2
   2cde0:	b25a      	sxtb	r2, r3
   2cde2:	687b      	ldr	r3, [r7, #4]
   2cde4:	0a1b      	lsrs	r3, r3, #8
   2cde6:	b25b      	sxtb	r3, r3
   2cde8:	210f      	movs	r1, #15
   2cdea:	400b      	ands	r3, r1
   2cdec:	b25b      	sxtb	r3, r3
   2cdee:	4313      	orrs	r3, r2
   2cdf0:	b25b      	sxtb	r3, r3
   2cdf2:	b2db      	uxtb	r3, r3
   2cdf4:	697a      	ldr	r2, [r7, #20]
   2cdf6:	7013      	strb	r3, [r2, #0]
			break;
   2cdf8:	e07f      	b.n	2cefa <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2cdfa:	68fb      	ldr	r3, [r7, #12]
   2cdfc:	6a1a      	ldr	r2, [r3, #32]
   2cdfe:	68bb      	ldr	r3, [r7, #8]
   2ce00:	0a1b      	lsrs	r3, r3, #8
   2ce02:	18d2      	adds	r2, r2, r3
   2ce04:	231f      	movs	r3, #31
   2ce06:	18fc      	adds	r4, r7, r3
   2ce08:	68fb      	ldr	r3, [r7, #12]
   2ce0a:	0011      	movs	r1, r2
   2ce0c:	0018      	movs	r0, r3
   2ce0e:	4b40      	ldr	r3, [pc, #256]	; (2cf10 <put_fat+0x238>)
   2ce10:	4798      	blx	r3
   2ce12:	0003      	movs	r3, r0
   2ce14:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2ce16:	231f      	movs	r3, #31
   2ce18:	18fb      	adds	r3, r7, r3
   2ce1a:	781b      	ldrb	r3, [r3, #0]
   2ce1c:	2b00      	cmp	r3, #0
   2ce1e:	d169      	bne.n	2cef4 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2ce20:	68bb      	ldr	r3, [r7, #8]
   2ce22:	005a      	lsls	r2, r3, #1
   2ce24:	23ff      	movs	r3, #255	; 0xff
   2ce26:	005b      	lsls	r3, r3, #1
   2ce28:	4013      	ands	r3, r2
   2ce2a:	3330      	adds	r3, #48	; 0x30
   2ce2c:	68fa      	ldr	r2, [r7, #12]
   2ce2e:	18d3      	adds	r3, r2, r3
   2ce30:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2ce32:	687b      	ldr	r3, [r7, #4]
   2ce34:	b2da      	uxtb	r2, r3
   2ce36:	697b      	ldr	r3, [r7, #20]
   2ce38:	701a      	strb	r2, [r3, #0]
   2ce3a:	697b      	ldr	r3, [r7, #20]
   2ce3c:	3301      	adds	r3, #1
   2ce3e:	687a      	ldr	r2, [r7, #4]
   2ce40:	b292      	uxth	r2, r2
   2ce42:	0a12      	lsrs	r2, r2, #8
   2ce44:	b292      	uxth	r2, r2
   2ce46:	b2d2      	uxtb	r2, r2
   2ce48:	701a      	strb	r2, [r3, #0]
			break;
   2ce4a:	e056      	b.n	2cefa <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2ce4c:	68fb      	ldr	r3, [r7, #12]
   2ce4e:	6a1a      	ldr	r2, [r3, #32]
   2ce50:	68bb      	ldr	r3, [r7, #8]
   2ce52:	09db      	lsrs	r3, r3, #7
   2ce54:	18d2      	adds	r2, r2, r3
   2ce56:	231f      	movs	r3, #31
   2ce58:	18fc      	adds	r4, r7, r3
   2ce5a:	68fb      	ldr	r3, [r7, #12]
   2ce5c:	0011      	movs	r1, r2
   2ce5e:	0018      	movs	r0, r3
   2ce60:	4b2b      	ldr	r3, [pc, #172]	; (2cf10 <put_fat+0x238>)
   2ce62:	4798      	blx	r3
   2ce64:	0003      	movs	r3, r0
   2ce66:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2ce68:	231f      	movs	r3, #31
   2ce6a:	18fb      	adds	r3, r7, r3
   2ce6c:	781b      	ldrb	r3, [r3, #0]
   2ce6e:	2b00      	cmp	r3, #0
   2ce70:	d142      	bne.n	2cef8 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2ce72:	68bb      	ldr	r3, [r7, #8]
   2ce74:	009a      	lsls	r2, r3, #2
   2ce76:	23fe      	movs	r3, #254	; 0xfe
   2ce78:	005b      	lsls	r3, r3, #1
   2ce7a:	4013      	ands	r3, r2
   2ce7c:	3330      	adds	r3, #48	; 0x30
   2ce7e:	68fa      	ldr	r2, [r7, #12]
   2ce80:	18d3      	adds	r3, r2, r3
   2ce82:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2ce84:	697b      	ldr	r3, [r7, #20]
   2ce86:	3303      	adds	r3, #3
   2ce88:	781b      	ldrb	r3, [r3, #0]
   2ce8a:	061a      	lsls	r2, r3, #24
   2ce8c:	697b      	ldr	r3, [r7, #20]
   2ce8e:	3302      	adds	r3, #2
   2ce90:	781b      	ldrb	r3, [r3, #0]
   2ce92:	041b      	lsls	r3, r3, #16
   2ce94:	4313      	orrs	r3, r2
   2ce96:	697a      	ldr	r2, [r7, #20]
   2ce98:	3201      	adds	r2, #1
   2ce9a:	7812      	ldrb	r2, [r2, #0]
   2ce9c:	0212      	lsls	r2, r2, #8
   2ce9e:	4313      	orrs	r3, r2
   2cea0:	697a      	ldr	r2, [r7, #20]
   2cea2:	7812      	ldrb	r2, [r2, #0]
   2cea4:	4313      	orrs	r3, r2
   2cea6:	0f1b      	lsrs	r3, r3, #28
   2cea8:	071b      	lsls	r3, r3, #28
   2ceaa:	687a      	ldr	r2, [r7, #4]
   2ceac:	4313      	orrs	r3, r2
   2ceae:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2ceb0:	687b      	ldr	r3, [r7, #4]
   2ceb2:	b2da      	uxtb	r2, r3
   2ceb4:	697b      	ldr	r3, [r7, #20]
   2ceb6:	701a      	strb	r2, [r3, #0]
   2ceb8:	697b      	ldr	r3, [r7, #20]
   2ceba:	3301      	adds	r3, #1
   2cebc:	687a      	ldr	r2, [r7, #4]
   2cebe:	b292      	uxth	r2, r2
   2cec0:	0a12      	lsrs	r2, r2, #8
   2cec2:	b292      	uxth	r2, r2
   2cec4:	b2d2      	uxtb	r2, r2
   2cec6:	701a      	strb	r2, [r3, #0]
   2cec8:	697b      	ldr	r3, [r7, #20]
   2ceca:	3302      	adds	r3, #2
   2cecc:	687a      	ldr	r2, [r7, #4]
   2cece:	0c12      	lsrs	r2, r2, #16
   2ced0:	b2d2      	uxtb	r2, r2
   2ced2:	701a      	strb	r2, [r3, #0]
   2ced4:	697b      	ldr	r3, [r7, #20]
   2ced6:	3303      	adds	r3, #3
   2ced8:	687a      	ldr	r2, [r7, #4]
   2ceda:	0e12      	lsrs	r2, r2, #24
   2cedc:	b2d2      	uxtb	r2, r2
   2cede:	701a      	strb	r2, [r3, #0]
			break;
   2cee0:	e00b      	b.n	2cefa <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2cee2:	231f      	movs	r3, #31
   2cee4:	18fb      	adds	r3, r7, r3
   2cee6:	2202      	movs	r2, #2
   2cee8:	701a      	strb	r2, [r3, #0]
   2ceea:	e006      	b.n	2cefa <put_fat+0x222>
			if (res != FR_OK) break;
   2ceec:	46c0      	nop			; (mov r8, r8)
   2ceee:	e004      	b.n	2cefa <put_fat+0x222>
			if (res != FR_OK) break;
   2cef0:	46c0      	nop			; (mov r8, r8)
   2cef2:	e002      	b.n	2cefa <put_fat+0x222>
			if (res != FR_OK) break;
   2cef4:	46c0      	nop			; (mov r8, r8)
   2cef6:	e000      	b.n	2cefa <put_fat+0x222>
			if (res != FR_OK) break;
   2cef8:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2cefa:	68fb      	ldr	r3, [r7, #12]
   2cefc:	2201      	movs	r2, #1
   2cefe:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2cf00:	231f      	movs	r3, #31
   2cf02:	18fb      	adds	r3, r7, r3
   2cf04:	781b      	ldrb	r3, [r3, #0]
}
   2cf06:	0018      	movs	r0, r3
   2cf08:	46bd      	mov	sp, r7
   2cf0a:	b009      	add	sp, #36	; 0x24
   2cf0c:	bd90      	pop	{r4, r7, pc}
   2cf0e:	46c0      	nop			; (mov r8, r8)
   2cf10:	0002c8d5 	.word	0x0002c8d5

0002cf14 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2cf14:	b590      	push	{r4, r7, lr}
   2cf16:	b085      	sub	sp, #20
   2cf18:	af00      	add	r7, sp, #0
   2cf1a:	6078      	str	r0, [r7, #4]
   2cf1c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2cf1e:	683b      	ldr	r3, [r7, #0]
   2cf20:	2b01      	cmp	r3, #1
   2cf22:	d904      	bls.n	2cf2e <remove_chain+0x1a>
   2cf24:	687b      	ldr	r3, [r7, #4]
   2cf26:	699a      	ldr	r2, [r3, #24]
   2cf28:	683b      	ldr	r3, [r7, #0]
   2cf2a:	429a      	cmp	r2, r3
   2cf2c:	d804      	bhi.n	2cf38 <remove_chain+0x24>
		res = FR_INT_ERR;
   2cf2e:	230f      	movs	r3, #15
   2cf30:	18fb      	adds	r3, r7, r3
   2cf32:	2202      	movs	r2, #2
   2cf34:	701a      	strb	r2, [r3, #0]
   2cf36:	e045      	b.n	2cfc4 <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2cf38:	230f      	movs	r3, #15
   2cf3a:	18fb      	adds	r3, r7, r3
   2cf3c:	2200      	movs	r2, #0
   2cf3e:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2cf40:	e037      	b.n	2cfb2 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2cf42:	683a      	ldr	r2, [r7, #0]
   2cf44:	687b      	ldr	r3, [r7, #4]
   2cf46:	0011      	movs	r1, r2
   2cf48:	0018      	movs	r0, r3
   2cf4a:	4b22      	ldr	r3, [pc, #136]	; (2cfd4 <remove_chain+0xc0>)
   2cf4c:	4798      	blx	r3
   2cf4e:	0003      	movs	r3, r0
   2cf50:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2cf52:	68bb      	ldr	r3, [r7, #8]
   2cf54:	2b00      	cmp	r3, #0
   2cf56:	d032      	beq.n	2cfbe <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2cf58:	68bb      	ldr	r3, [r7, #8]
   2cf5a:	2b01      	cmp	r3, #1
   2cf5c:	d104      	bne.n	2cf68 <remove_chain+0x54>
   2cf5e:	230f      	movs	r3, #15
   2cf60:	18fb      	adds	r3, r7, r3
   2cf62:	2202      	movs	r2, #2
   2cf64:	701a      	strb	r2, [r3, #0]
   2cf66:	e02d      	b.n	2cfc4 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2cf68:	68bb      	ldr	r3, [r7, #8]
   2cf6a:	3301      	adds	r3, #1
   2cf6c:	d104      	bne.n	2cf78 <remove_chain+0x64>
   2cf6e:	230f      	movs	r3, #15
   2cf70:	18fb      	adds	r3, r7, r3
   2cf72:	2201      	movs	r2, #1
   2cf74:	701a      	strb	r2, [r3, #0]
   2cf76:	e025      	b.n	2cfc4 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2cf78:	230f      	movs	r3, #15
   2cf7a:	18fc      	adds	r4, r7, r3
   2cf7c:	6839      	ldr	r1, [r7, #0]
   2cf7e:	687b      	ldr	r3, [r7, #4]
   2cf80:	2200      	movs	r2, #0
   2cf82:	0018      	movs	r0, r3
   2cf84:	4b14      	ldr	r3, [pc, #80]	; (2cfd8 <remove_chain+0xc4>)
   2cf86:	4798      	blx	r3
   2cf88:	0003      	movs	r3, r0
   2cf8a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2cf8c:	230f      	movs	r3, #15
   2cf8e:	18fb      	adds	r3, r7, r3
   2cf90:	781b      	ldrb	r3, [r3, #0]
   2cf92:	2b00      	cmp	r3, #0
   2cf94:	d115      	bne.n	2cfc2 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2cf96:	687b      	ldr	r3, [r7, #4]
   2cf98:	691b      	ldr	r3, [r3, #16]
   2cf9a:	3301      	adds	r3, #1
   2cf9c:	d007      	beq.n	2cfae <remove_chain+0x9a>
				fs->free_clust++;
   2cf9e:	687b      	ldr	r3, [r7, #4]
   2cfa0:	691b      	ldr	r3, [r3, #16]
   2cfa2:	1c5a      	adds	r2, r3, #1
   2cfa4:	687b      	ldr	r3, [r7, #4]
   2cfa6:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2cfa8:	687b      	ldr	r3, [r7, #4]
   2cfaa:	2201      	movs	r2, #1
   2cfac:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2cfae:	68bb      	ldr	r3, [r7, #8]
   2cfb0:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2cfb2:	687b      	ldr	r3, [r7, #4]
   2cfb4:	699a      	ldr	r2, [r3, #24]
   2cfb6:	683b      	ldr	r3, [r7, #0]
   2cfb8:	429a      	cmp	r2, r3
   2cfba:	d8c2      	bhi.n	2cf42 <remove_chain+0x2e>
   2cfbc:	e002      	b.n	2cfc4 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2cfbe:	46c0      	nop			; (mov r8, r8)
   2cfc0:	e000      	b.n	2cfc4 <remove_chain+0xb0>
			if (res != FR_OK) break;
   2cfc2:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2cfc4:	230f      	movs	r3, #15
   2cfc6:	18fb      	adds	r3, r7, r3
   2cfc8:	781b      	ldrb	r3, [r3, #0]
}
   2cfca:	0018      	movs	r0, r3
   2cfcc:	46bd      	mov	sp, r7
   2cfce:	b005      	add	sp, #20
   2cfd0:	bd90      	pop	{r4, r7, pc}
   2cfd2:	46c0      	nop			; (mov r8, r8)
   2cfd4:	0002cb6d 	.word	0x0002cb6d
   2cfd8:	0002ccd9 	.word	0x0002ccd9

0002cfdc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2cfdc:	b590      	push	{r4, r7, lr}
   2cfde:	b087      	sub	sp, #28
   2cfe0:	af00      	add	r7, sp, #0
   2cfe2:	6078      	str	r0, [r7, #4]
   2cfe4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2cfe6:	683b      	ldr	r3, [r7, #0]
   2cfe8:	2b00      	cmp	r3, #0
   2cfea:	d10d      	bne.n	2d008 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2cfec:	687b      	ldr	r3, [r7, #4]
   2cfee:	68db      	ldr	r3, [r3, #12]
   2cff0:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2cff2:	693b      	ldr	r3, [r7, #16]
   2cff4:	2b00      	cmp	r3, #0
   2cff6:	d004      	beq.n	2d002 <create_chain+0x26>
   2cff8:	687b      	ldr	r3, [r7, #4]
   2cffa:	699a      	ldr	r2, [r3, #24]
   2cffc:	693b      	ldr	r3, [r7, #16]
   2cffe:	429a      	cmp	r2, r3
   2d000:	d818      	bhi.n	2d034 <create_chain+0x58>
   2d002:	2301      	movs	r3, #1
   2d004:	613b      	str	r3, [r7, #16]
   2d006:	e015      	b.n	2d034 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2d008:	683a      	ldr	r2, [r7, #0]
   2d00a:	687b      	ldr	r3, [r7, #4]
   2d00c:	0011      	movs	r1, r2
   2d00e:	0018      	movs	r0, r3
   2d010:	4b3e      	ldr	r3, [pc, #248]	; (2d10c <create_chain+0x130>)
   2d012:	4798      	blx	r3
   2d014:	0003      	movs	r3, r0
   2d016:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2d018:	68bb      	ldr	r3, [r7, #8]
   2d01a:	2b01      	cmp	r3, #1
   2d01c:	d801      	bhi.n	2d022 <create_chain+0x46>
   2d01e:	2301      	movs	r3, #1
   2d020:	e070      	b.n	2d104 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2d022:	687b      	ldr	r3, [r7, #4]
   2d024:	699a      	ldr	r2, [r3, #24]
   2d026:	68bb      	ldr	r3, [r7, #8]
   2d028:	429a      	cmp	r2, r3
   2d02a:	d901      	bls.n	2d030 <create_chain+0x54>
   2d02c:	68bb      	ldr	r3, [r7, #8]
   2d02e:	e069      	b.n	2d104 <create_chain+0x128>
		scl = clst;
   2d030:	683b      	ldr	r3, [r7, #0]
   2d032:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2d034:	693b      	ldr	r3, [r7, #16]
   2d036:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2d038:	697b      	ldr	r3, [r7, #20]
   2d03a:	3301      	adds	r3, #1
   2d03c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2d03e:	687b      	ldr	r3, [r7, #4]
   2d040:	699a      	ldr	r2, [r3, #24]
   2d042:	697b      	ldr	r3, [r7, #20]
   2d044:	429a      	cmp	r2, r3
   2d046:	d807      	bhi.n	2d058 <create_chain+0x7c>
			ncl = 2;
   2d048:	2302      	movs	r3, #2
   2d04a:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2d04c:	697a      	ldr	r2, [r7, #20]
   2d04e:	693b      	ldr	r3, [r7, #16]
   2d050:	429a      	cmp	r2, r3
   2d052:	d901      	bls.n	2d058 <create_chain+0x7c>
   2d054:	2300      	movs	r3, #0
   2d056:	e055      	b.n	2d104 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2d058:	697a      	ldr	r2, [r7, #20]
   2d05a:	687b      	ldr	r3, [r7, #4]
   2d05c:	0011      	movs	r1, r2
   2d05e:	0018      	movs	r0, r3
   2d060:	4b2a      	ldr	r3, [pc, #168]	; (2d10c <create_chain+0x130>)
   2d062:	4798      	blx	r3
   2d064:	0003      	movs	r3, r0
   2d066:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2d068:	68bb      	ldr	r3, [r7, #8]
   2d06a:	2b00      	cmp	r3, #0
   2d06c:	d00d      	beq.n	2d08a <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2d06e:	68bb      	ldr	r3, [r7, #8]
   2d070:	3301      	adds	r3, #1
   2d072:	d002      	beq.n	2d07a <create_chain+0x9e>
   2d074:	68bb      	ldr	r3, [r7, #8]
   2d076:	2b01      	cmp	r3, #1
   2d078:	d101      	bne.n	2d07e <create_chain+0xa2>
			return cs;
   2d07a:	68bb      	ldr	r3, [r7, #8]
   2d07c:	e042      	b.n	2d104 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2d07e:	697a      	ldr	r2, [r7, #20]
   2d080:	693b      	ldr	r3, [r7, #16]
   2d082:	429a      	cmp	r2, r3
   2d084:	d1d8      	bne.n	2d038 <create_chain+0x5c>
   2d086:	2300      	movs	r3, #0
   2d088:	e03c      	b.n	2d104 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2d08a:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2d08c:	230f      	movs	r3, #15
   2d08e:	18fc      	adds	r4, r7, r3
   2d090:	4a1f      	ldr	r2, [pc, #124]	; (2d110 <create_chain+0x134>)
   2d092:	6979      	ldr	r1, [r7, #20]
   2d094:	687b      	ldr	r3, [r7, #4]
   2d096:	0018      	movs	r0, r3
   2d098:	4b1e      	ldr	r3, [pc, #120]	; (2d114 <create_chain+0x138>)
   2d09a:	4798      	blx	r3
   2d09c:	0003      	movs	r3, r0
   2d09e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2d0a0:	230f      	movs	r3, #15
   2d0a2:	18fb      	adds	r3, r7, r3
   2d0a4:	781b      	ldrb	r3, [r3, #0]
   2d0a6:	2b00      	cmp	r3, #0
   2d0a8:	d10c      	bne.n	2d0c4 <create_chain+0xe8>
   2d0aa:	683b      	ldr	r3, [r7, #0]
   2d0ac:	2b00      	cmp	r3, #0
   2d0ae:	d009      	beq.n	2d0c4 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2d0b0:	230f      	movs	r3, #15
   2d0b2:	18fc      	adds	r4, r7, r3
   2d0b4:	697a      	ldr	r2, [r7, #20]
   2d0b6:	6839      	ldr	r1, [r7, #0]
   2d0b8:	687b      	ldr	r3, [r7, #4]
   2d0ba:	0018      	movs	r0, r3
   2d0bc:	4b15      	ldr	r3, [pc, #84]	; (2d114 <create_chain+0x138>)
   2d0be:	4798      	blx	r3
   2d0c0:	0003      	movs	r3, r0
   2d0c2:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2d0c4:	230f      	movs	r3, #15
   2d0c6:	18fb      	adds	r3, r7, r3
   2d0c8:	781b      	ldrb	r3, [r3, #0]
   2d0ca:	2b00      	cmp	r3, #0
   2d0cc:	d10f      	bne.n	2d0ee <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2d0ce:	687b      	ldr	r3, [r7, #4]
   2d0d0:	697a      	ldr	r2, [r7, #20]
   2d0d2:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2d0d4:	687b      	ldr	r3, [r7, #4]
   2d0d6:	691b      	ldr	r3, [r3, #16]
   2d0d8:	3301      	adds	r3, #1
   2d0da:	d012      	beq.n	2d102 <create_chain+0x126>
			fs->free_clust--;
   2d0dc:	687b      	ldr	r3, [r7, #4]
   2d0de:	691b      	ldr	r3, [r3, #16]
   2d0e0:	1e5a      	subs	r2, r3, #1
   2d0e2:	687b      	ldr	r3, [r7, #4]
   2d0e4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2d0e6:	687b      	ldr	r3, [r7, #4]
   2d0e8:	2201      	movs	r2, #1
   2d0ea:	715a      	strb	r2, [r3, #5]
   2d0ec:	e009      	b.n	2d102 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2d0ee:	230f      	movs	r3, #15
   2d0f0:	18fb      	adds	r3, r7, r3
   2d0f2:	781b      	ldrb	r3, [r3, #0]
   2d0f4:	2b01      	cmp	r3, #1
   2d0f6:	d102      	bne.n	2d0fe <create_chain+0x122>
   2d0f8:	2301      	movs	r3, #1
   2d0fa:	425b      	negs	r3, r3
   2d0fc:	e000      	b.n	2d100 <create_chain+0x124>
   2d0fe:	2301      	movs	r3, #1
   2d100:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2d102:	697b      	ldr	r3, [r7, #20]
}
   2d104:	0018      	movs	r0, r3
   2d106:	46bd      	mov	sp, r7
   2d108:	b007      	add	sp, #28
   2d10a:	bd90      	pop	{r4, r7, pc}
   2d10c:	0002cb6d 	.word	0x0002cb6d
   2d110:	0fffffff 	.word	0x0fffffff
   2d114:	0002ccd9 	.word	0x0002ccd9

0002d118 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2d118:	b580      	push	{r7, lr}
   2d11a:	b084      	sub	sp, #16
   2d11c:	af00      	add	r7, sp, #0
   2d11e:	6078      	str	r0, [r7, #4]
   2d120:	000a      	movs	r2, r1
   2d122:	1cbb      	adds	r3, r7, #2
   2d124:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2d126:	687b      	ldr	r3, [r7, #4]
   2d128:	1cba      	adds	r2, r7, #2
   2d12a:	8812      	ldrh	r2, [r2, #0]
   2d12c:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2d12e:	687b      	ldr	r3, [r7, #4]
   2d130:	689b      	ldr	r3, [r3, #8]
   2d132:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2d134:	68fb      	ldr	r3, [r7, #12]
   2d136:	2b01      	cmp	r3, #1
   2d138:	d005      	beq.n	2d146 <dir_sdi+0x2e>
   2d13a:	687b      	ldr	r3, [r7, #4]
   2d13c:	681b      	ldr	r3, [r3, #0]
   2d13e:	699a      	ldr	r2, [r3, #24]
   2d140:	68fb      	ldr	r3, [r7, #12]
   2d142:	429a      	cmp	r2, r3
   2d144:	d801      	bhi.n	2d14a <dir_sdi+0x32>
		return FR_INT_ERR;
   2d146:	2302      	movs	r3, #2
   2d148:	e075      	b.n	2d236 <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2d14a:	68fb      	ldr	r3, [r7, #12]
   2d14c:	2b00      	cmp	r3, #0
   2d14e:	d108      	bne.n	2d162 <dir_sdi+0x4a>
   2d150:	687b      	ldr	r3, [r7, #4]
   2d152:	681b      	ldr	r3, [r3, #0]
   2d154:	781b      	ldrb	r3, [r3, #0]
   2d156:	2b03      	cmp	r3, #3
   2d158:	d103      	bne.n	2d162 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2d15a:	687b      	ldr	r3, [r7, #4]
   2d15c:	681b      	ldr	r3, [r3, #0]
   2d15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2d160:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2d162:	68fb      	ldr	r3, [r7, #12]
   2d164:	2b00      	cmp	r3, #0
   2d166:	d116      	bne.n	2d196 <dir_sdi+0x7e>
		dj->clust = clst;
   2d168:	687b      	ldr	r3, [r7, #4]
   2d16a:	68fa      	ldr	r2, [r7, #12]
   2d16c:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2d16e:	687b      	ldr	r3, [r7, #4]
   2d170:	681b      	ldr	r3, [r3, #0]
   2d172:	891b      	ldrh	r3, [r3, #8]
   2d174:	1cba      	adds	r2, r7, #2
   2d176:	8812      	ldrh	r2, [r2, #0]
   2d178:	429a      	cmp	r2, r3
   2d17a:	d301      	bcc.n	2d180 <dir_sdi+0x68>
			return FR_INT_ERR;
   2d17c:	2302      	movs	r3, #2
   2d17e:	e05a      	b.n	2d236 <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2d180:	687b      	ldr	r3, [r7, #4]
   2d182:	681b      	ldr	r3, [r3, #0]
   2d184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2d186:	1cba      	adds	r2, r7, #2
   2d188:	8812      	ldrh	r2, [r2, #0]
   2d18a:	0912      	lsrs	r2, r2, #4
   2d18c:	b292      	uxth	r2, r2
   2d18e:	189a      	adds	r2, r3, r2
   2d190:	687b      	ldr	r3, [r7, #4]
   2d192:	611a      	str	r2, [r3, #16]
   2d194:	e042      	b.n	2d21c <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2d196:	687b      	ldr	r3, [r7, #4]
   2d198:	681b      	ldr	r3, [r3, #0]
   2d19a:	789b      	ldrb	r3, [r3, #2]
   2d19c:	b29a      	uxth	r2, r3
   2d19e:	230a      	movs	r3, #10
   2d1a0:	18fb      	adds	r3, r7, r3
   2d1a2:	0112      	lsls	r2, r2, #4
   2d1a4:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2d1a6:	e020      	b.n	2d1ea <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2d1a8:	687b      	ldr	r3, [r7, #4]
   2d1aa:	681b      	ldr	r3, [r3, #0]
   2d1ac:	68fa      	ldr	r2, [r7, #12]
   2d1ae:	0011      	movs	r1, r2
   2d1b0:	0018      	movs	r0, r3
   2d1b2:	4b23      	ldr	r3, [pc, #140]	; (2d240 <dir_sdi+0x128>)
   2d1b4:	4798      	blx	r3
   2d1b6:	0003      	movs	r3, r0
   2d1b8:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2d1ba:	68fb      	ldr	r3, [r7, #12]
   2d1bc:	3301      	adds	r3, #1
   2d1be:	d101      	bne.n	2d1c4 <dir_sdi+0xac>
   2d1c0:	2301      	movs	r3, #1
   2d1c2:	e038      	b.n	2d236 <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2d1c4:	68fb      	ldr	r3, [r7, #12]
   2d1c6:	2b01      	cmp	r3, #1
   2d1c8:	d905      	bls.n	2d1d6 <dir_sdi+0xbe>
   2d1ca:	687b      	ldr	r3, [r7, #4]
   2d1cc:	681b      	ldr	r3, [r3, #0]
   2d1ce:	699a      	ldr	r2, [r3, #24]
   2d1d0:	68fb      	ldr	r3, [r7, #12]
   2d1d2:	429a      	cmp	r2, r3
   2d1d4:	d801      	bhi.n	2d1da <dir_sdi+0xc2>
				return FR_INT_ERR;
   2d1d6:	2302      	movs	r3, #2
   2d1d8:	e02d      	b.n	2d236 <dir_sdi+0x11e>
			idx -= ic;
   2d1da:	1cbb      	adds	r3, r7, #2
   2d1dc:	1cb9      	adds	r1, r7, #2
   2d1de:	220a      	movs	r2, #10
   2d1e0:	18ba      	adds	r2, r7, r2
   2d1e2:	8809      	ldrh	r1, [r1, #0]
   2d1e4:	8812      	ldrh	r2, [r2, #0]
   2d1e6:	1a8a      	subs	r2, r1, r2
   2d1e8:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2d1ea:	1cba      	adds	r2, r7, #2
   2d1ec:	230a      	movs	r3, #10
   2d1ee:	18fb      	adds	r3, r7, r3
   2d1f0:	8812      	ldrh	r2, [r2, #0]
   2d1f2:	881b      	ldrh	r3, [r3, #0]
   2d1f4:	429a      	cmp	r2, r3
   2d1f6:	d2d7      	bcs.n	2d1a8 <dir_sdi+0x90>
		}
		dj->clust = clst;
   2d1f8:	687b      	ldr	r3, [r7, #4]
   2d1fa:	68fa      	ldr	r2, [r7, #12]
   2d1fc:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2d1fe:	687b      	ldr	r3, [r7, #4]
   2d200:	681b      	ldr	r3, [r3, #0]
   2d202:	68fa      	ldr	r2, [r7, #12]
   2d204:	0011      	movs	r1, r2
   2d206:	0018      	movs	r0, r3
   2d208:	4b0e      	ldr	r3, [pc, #56]	; (2d244 <dir_sdi+0x12c>)
   2d20a:	4798      	blx	r3
   2d20c:	0002      	movs	r2, r0
   2d20e:	1cbb      	adds	r3, r7, #2
   2d210:	881b      	ldrh	r3, [r3, #0]
   2d212:	091b      	lsrs	r3, r3, #4
   2d214:	b29b      	uxth	r3, r3
   2d216:	18d2      	adds	r2, r2, r3
   2d218:	687b      	ldr	r3, [r7, #4]
   2d21a:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2d21c:	687b      	ldr	r3, [r7, #4]
   2d21e:	681b      	ldr	r3, [r3, #0]
   2d220:	3330      	adds	r3, #48	; 0x30
   2d222:	001a      	movs	r2, r3
   2d224:	1cbb      	adds	r3, r7, #2
   2d226:	881b      	ldrh	r3, [r3, #0]
   2d228:	210f      	movs	r1, #15
   2d22a:	400b      	ands	r3, r1
   2d22c:	015b      	lsls	r3, r3, #5
   2d22e:	18d2      	adds	r2, r2, r3
   2d230:	687b      	ldr	r3, [r7, #4]
   2d232:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2d234:	2300      	movs	r3, #0
}
   2d236:	0018      	movs	r0, r3
   2d238:	46bd      	mov	sp, r7
   2d23a:	b004      	add	sp, #16
   2d23c:	bd80      	pop	{r7, pc}
   2d23e:	46c0      	nop			; (mov r8, r8)
   2d240:	0002cb6d 	.word	0x0002cb6d
   2d244:	0002cb35 	.word	0x0002cb35

0002d248 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2d248:	b590      	push	{r4, r7, lr}
   2d24a:	b085      	sub	sp, #20
   2d24c:	af00      	add	r7, sp, #0
   2d24e:	6078      	str	r0, [r7, #4]
   2d250:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2d252:	687b      	ldr	r3, [r7, #4]
   2d254:	88da      	ldrh	r2, [r3, #6]
   2d256:	2308      	movs	r3, #8
   2d258:	18fb      	adds	r3, r7, r3
   2d25a:	3201      	adds	r2, #1
   2d25c:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2d25e:	2308      	movs	r3, #8
   2d260:	18fb      	adds	r3, r7, r3
   2d262:	881b      	ldrh	r3, [r3, #0]
   2d264:	2b00      	cmp	r3, #0
   2d266:	d003      	beq.n	2d270 <dir_next+0x28>
   2d268:	687b      	ldr	r3, [r7, #4]
   2d26a:	691b      	ldr	r3, [r3, #16]
   2d26c:	2b00      	cmp	r3, #0
   2d26e:	d101      	bne.n	2d274 <dir_next+0x2c>
		return FR_NO_FILE;
   2d270:	2304      	movs	r3, #4
   2d272:	e0d2      	b.n	2d41a <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2d274:	2308      	movs	r3, #8
   2d276:	18fb      	adds	r3, r7, r3
   2d278:	881b      	ldrh	r3, [r3, #0]
   2d27a:	220f      	movs	r2, #15
   2d27c:	4013      	ands	r3, r2
   2d27e:	b29b      	uxth	r3, r3
   2d280:	2b00      	cmp	r3, #0
   2d282:	d000      	beq.n	2d286 <dir_next+0x3e>
   2d284:	e0b6      	b.n	2d3f4 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2d286:	687b      	ldr	r3, [r7, #4]
   2d288:	691b      	ldr	r3, [r3, #16]
   2d28a:	1c5a      	adds	r2, r3, #1
   2d28c:	687b      	ldr	r3, [r7, #4]
   2d28e:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2d290:	687b      	ldr	r3, [r7, #4]
   2d292:	68db      	ldr	r3, [r3, #12]
   2d294:	2b00      	cmp	r3, #0
   2d296:	d10a      	bne.n	2d2ae <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2d298:	687b      	ldr	r3, [r7, #4]
   2d29a:	681b      	ldr	r3, [r3, #0]
   2d29c:	891b      	ldrh	r3, [r3, #8]
   2d29e:	2208      	movs	r2, #8
   2d2a0:	18ba      	adds	r2, r7, r2
   2d2a2:	8812      	ldrh	r2, [r2, #0]
   2d2a4:	429a      	cmp	r2, r3
   2d2a6:	d200      	bcs.n	2d2aa <dir_next+0x62>
   2d2a8:	e0a4      	b.n	2d3f4 <dir_next+0x1ac>
				return FR_NO_FILE;
   2d2aa:	2304      	movs	r3, #4
   2d2ac:	e0b5      	b.n	2d41a <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2d2ae:	2308      	movs	r3, #8
   2d2b0:	18fb      	adds	r3, r7, r3
   2d2b2:	881b      	ldrh	r3, [r3, #0]
   2d2b4:	091b      	lsrs	r3, r3, #4
   2d2b6:	b29b      	uxth	r3, r3
   2d2b8:	001a      	movs	r2, r3
   2d2ba:	687b      	ldr	r3, [r7, #4]
   2d2bc:	681b      	ldr	r3, [r3, #0]
   2d2be:	789b      	ldrb	r3, [r3, #2]
   2d2c0:	3b01      	subs	r3, #1
   2d2c2:	4013      	ands	r3, r2
   2d2c4:	d000      	beq.n	2d2c8 <dir_next+0x80>
   2d2c6:	e095      	b.n	2d3f4 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2d2c8:	687b      	ldr	r3, [r7, #4]
   2d2ca:	681a      	ldr	r2, [r3, #0]
   2d2cc:	687b      	ldr	r3, [r7, #4]
   2d2ce:	68db      	ldr	r3, [r3, #12]
   2d2d0:	0019      	movs	r1, r3
   2d2d2:	0010      	movs	r0, r2
   2d2d4:	4b53      	ldr	r3, [pc, #332]	; (2d424 <dir_next+0x1dc>)
   2d2d6:	4798      	blx	r3
   2d2d8:	0003      	movs	r3, r0
   2d2da:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2d2dc:	68fb      	ldr	r3, [r7, #12]
   2d2de:	2b01      	cmp	r3, #1
   2d2e0:	d801      	bhi.n	2d2e6 <dir_next+0x9e>
   2d2e2:	2302      	movs	r3, #2
   2d2e4:	e099      	b.n	2d41a <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2d2e6:	68fb      	ldr	r3, [r7, #12]
   2d2e8:	3301      	adds	r3, #1
   2d2ea:	d101      	bne.n	2d2f0 <dir_next+0xa8>
   2d2ec:	2301      	movs	r3, #1
   2d2ee:	e094      	b.n	2d41a <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2d2f0:	687b      	ldr	r3, [r7, #4]
   2d2f2:	681b      	ldr	r3, [r3, #0]
   2d2f4:	699a      	ldr	r2, [r3, #24]
   2d2f6:	68fb      	ldr	r3, [r7, #12]
   2d2f8:	429a      	cmp	r2, r3
   2d2fa:	d900      	bls.n	2d2fe <dir_next+0xb6>
   2d2fc:	e06d      	b.n	2d3da <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2d2fe:	683b      	ldr	r3, [r7, #0]
   2d300:	2b00      	cmp	r3, #0
   2d302:	d101      	bne.n	2d308 <dir_next+0xc0>
   2d304:	2304      	movs	r3, #4
   2d306:	e088      	b.n	2d41a <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2d308:	687b      	ldr	r3, [r7, #4]
   2d30a:	681a      	ldr	r2, [r3, #0]
   2d30c:	687b      	ldr	r3, [r7, #4]
   2d30e:	68db      	ldr	r3, [r3, #12]
   2d310:	0019      	movs	r1, r3
   2d312:	0010      	movs	r0, r2
   2d314:	4b44      	ldr	r3, [pc, #272]	; (2d428 <dir_next+0x1e0>)
   2d316:	4798      	blx	r3
   2d318:	0003      	movs	r3, r0
   2d31a:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2d31c:	68fb      	ldr	r3, [r7, #12]
   2d31e:	2b00      	cmp	r3, #0
   2d320:	d101      	bne.n	2d326 <dir_next+0xde>
   2d322:	2307      	movs	r3, #7
   2d324:	e079      	b.n	2d41a <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2d326:	68fb      	ldr	r3, [r7, #12]
   2d328:	2b01      	cmp	r3, #1
   2d32a:	d101      	bne.n	2d330 <dir_next+0xe8>
   2d32c:	2302      	movs	r3, #2
   2d32e:	e074      	b.n	2d41a <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2d330:	68fb      	ldr	r3, [r7, #12]
   2d332:	3301      	adds	r3, #1
   2d334:	d101      	bne.n	2d33a <dir_next+0xf2>
   2d336:	2301      	movs	r3, #1
   2d338:	e06f      	b.n	2d41a <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2d33a:	687b      	ldr	r3, [r7, #4]
   2d33c:	681b      	ldr	r3, [r3, #0]
   2d33e:	2100      	movs	r1, #0
   2d340:	0018      	movs	r0, r3
   2d342:	4b3a      	ldr	r3, [pc, #232]	; (2d42c <dir_next+0x1e4>)
   2d344:	4798      	blx	r3
   2d346:	1e03      	subs	r3, r0, #0
   2d348:	d001      	beq.n	2d34e <dir_next+0x106>
   2d34a:	2301      	movs	r3, #1
   2d34c:	e065      	b.n	2d41a <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2d34e:	687b      	ldr	r3, [r7, #4]
   2d350:	681b      	ldr	r3, [r3, #0]
   2d352:	3330      	adds	r3, #48	; 0x30
   2d354:	0018      	movs	r0, r3
   2d356:	2380      	movs	r3, #128	; 0x80
   2d358:	009b      	lsls	r3, r3, #2
   2d35a:	001a      	movs	r2, r3
   2d35c:	2100      	movs	r1, #0
   2d35e:	4b34      	ldr	r3, [pc, #208]	; (2d430 <dir_next+0x1e8>)
   2d360:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2d362:	687b      	ldr	r3, [r7, #4]
   2d364:	681c      	ldr	r4, [r3, #0]
   2d366:	687b      	ldr	r3, [r7, #4]
   2d368:	681b      	ldr	r3, [r3, #0]
   2d36a:	68fa      	ldr	r2, [r7, #12]
   2d36c:	0011      	movs	r1, r2
   2d36e:	0018      	movs	r0, r3
   2d370:	4b30      	ldr	r3, [pc, #192]	; (2d434 <dir_next+0x1ec>)
   2d372:	4798      	blx	r3
   2d374:	0003      	movs	r3, r0
   2d376:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2d378:	230b      	movs	r3, #11
   2d37a:	18fb      	adds	r3, r7, r3
   2d37c:	2200      	movs	r2, #0
   2d37e:	701a      	strb	r2, [r3, #0]
   2d380:	e019      	b.n	2d3b6 <dir_next+0x16e>
						dj->fs->wflag = 1;
   2d382:	687b      	ldr	r3, [r7, #4]
   2d384:	681b      	ldr	r3, [r3, #0]
   2d386:	2201      	movs	r2, #1
   2d388:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2d38a:	687b      	ldr	r3, [r7, #4]
   2d38c:	681b      	ldr	r3, [r3, #0]
   2d38e:	2100      	movs	r1, #0
   2d390:	0018      	movs	r0, r3
   2d392:	4b26      	ldr	r3, [pc, #152]	; (2d42c <dir_next+0x1e4>)
   2d394:	4798      	blx	r3
   2d396:	1e03      	subs	r3, r0, #0
   2d398:	d001      	beq.n	2d39e <dir_next+0x156>
   2d39a:	2301      	movs	r3, #1
   2d39c:	e03d      	b.n	2d41a <dir_next+0x1d2>
						dj->fs->winsect++;
   2d39e:	687b      	ldr	r3, [r7, #4]
   2d3a0:	681b      	ldr	r3, [r3, #0]
   2d3a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d3a4:	3201      	adds	r2, #1
   2d3a6:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2d3a8:	230b      	movs	r3, #11
   2d3aa:	18fb      	adds	r3, r7, r3
   2d3ac:	781a      	ldrb	r2, [r3, #0]
   2d3ae:	230b      	movs	r3, #11
   2d3b0:	18fb      	adds	r3, r7, r3
   2d3b2:	3201      	adds	r2, #1
   2d3b4:	701a      	strb	r2, [r3, #0]
   2d3b6:	687b      	ldr	r3, [r7, #4]
   2d3b8:	681b      	ldr	r3, [r3, #0]
   2d3ba:	789b      	ldrb	r3, [r3, #2]
   2d3bc:	220b      	movs	r2, #11
   2d3be:	18ba      	adds	r2, r7, r2
   2d3c0:	7812      	ldrb	r2, [r2, #0]
   2d3c2:	429a      	cmp	r2, r3
   2d3c4:	d3dd      	bcc.n	2d382 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2d3c6:	687b      	ldr	r3, [r7, #4]
   2d3c8:	681b      	ldr	r3, [r3, #0]
   2d3ca:	687a      	ldr	r2, [r7, #4]
   2d3cc:	6812      	ldr	r2, [r2, #0]
   2d3ce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2d3d0:	220b      	movs	r2, #11
   2d3d2:	18ba      	adds	r2, r7, r2
   2d3d4:	7812      	ldrb	r2, [r2, #0]
   2d3d6:	1a8a      	subs	r2, r1, r2
   2d3d8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2d3da:	687b      	ldr	r3, [r7, #4]
   2d3dc:	68fa      	ldr	r2, [r7, #12]
   2d3de:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2d3e0:	687b      	ldr	r3, [r7, #4]
   2d3e2:	681b      	ldr	r3, [r3, #0]
   2d3e4:	68fa      	ldr	r2, [r7, #12]
   2d3e6:	0011      	movs	r1, r2
   2d3e8:	0018      	movs	r0, r3
   2d3ea:	4b12      	ldr	r3, [pc, #72]	; (2d434 <dir_next+0x1ec>)
   2d3ec:	4798      	blx	r3
   2d3ee:	0002      	movs	r2, r0
   2d3f0:	687b      	ldr	r3, [r7, #4]
   2d3f2:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2d3f4:	687b      	ldr	r3, [r7, #4]
   2d3f6:	2208      	movs	r2, #8
   2d3f8:	18ba      	adds	r2, r7, r2
   2d3fa:	8812      	ldrh	r2, [r2, #0]
   2d3fc:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2d3fe:	687b      	ldr	r3, [r7, #4]
   2d400:	681b      	ldr	r3, [r3, #0]
   2d402:	3330      	adds	r3, #48	; 0x30
   2d404:	001a      	movs	r2, r3
   2d406:	2308      	movs	r3, #8
   2d408:	18fb      	adds	r3, r7, r3
   2d40a:	881b      	ldrh	r3, [r3, #0]
   2d40c:	210f      	movs	r1, #15
   2d40e:	400b      	ands	r3, r1
   2d410:	015b      	lsls	r3, r3, #5
   2d412:	18d2      	adds	r2, r2, r3
   2d414:	687b      	ldr	r3, [r7, #4]
   2d416:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2d418:	2300      	movs	r3, #0
}
   2d41a:	0018      	movs	r0, r3
   2d41c:	46bd      	mov	sp, r7
   2d41e:	b005      	add	sp, #20
   2d420:	bd90      	pop	{r4, r7, pc}
   2d422:	46c0      	nop			; (mov r8, r8)
   2d424:	0002cb6d 	.word	0x0002cb6d
   2d428:	0002cfdd 	.word	0x0002cfdd
   2d42c:	0002c8d5 	.word	0x0002c8d5
   2d430:	0002c829 	.word	0x0002c829
   2d434:	0002cb35 	.word	0x0002cb35

0002d438 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2d438:	b590      	push	{r4, r7, lr}
   2d43a:	b087      	sub	sp, #28
   2d43c:	af00      	add	r7, sp, #0
   2d43e:	6078      	str	r0, [r7, #4]
   2d440:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2d442:	683b      	ldr	r3, [r7, #0]
   2d444:	781b      	ldrb	r3, [r3, #0]
   2d446:	001a      	movs	r2, r3
   2d448:	2340      	movs	r3, #64	; 0x40
   2d44a:	439a      	bics	r2, r3
   2d44c:	0013      	movs	r3, r2
   2d44e:	1e5a      	subs	r2, r3, #1
   2d450:	0013      	movs	r3, r2
   2d452:	005b      	lsls	r3, r3, #1
   2d454:	189b      	adds	r3, r3, r2
   2d456:	009b      	lsls	r3, r3, #2
   2d458:	189b      	adds	r3, r3, r2
   2d45a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2d45c:	2300      	movs	r3, #0
   2d45e:	613b      	str	r3, [r7, #16]
   2d460:	230e      	movs	r3, #14
   2d462:	18fb      	adds	r3, r7, r3
   2d464:	2201      	movs	r2, #1
   2d466:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2d468:	4a31      	ldr	r2, [pc, #196]	; (2d530 <cmp_lfn+0xf8>)
   2d46a:	693b      	ldr	r3, [r7, #16]
   2d46c:	18d3      	adds	r3, r2, r3
   2d46e:	781b      	ldrb	r3, [r3, #0]
   2d470:	3301      	adds	r3, #1
   2d472:	683a      	ldr	r2, [r7, #0]
   2d474:	18d3      	adds	r3, r2, r3
   2d476:	781b      	ldrb	r3, [r3, #0]
   2d478:	021b      	lsls	r3, r3, #8
   2d47a:	b21a      	sxth	r2, r3
   2d47c:	492c      	ldr	r1, [pc, #176]	; (2d530 <cmp_lfn+0xf8>)
   2d47e:	693b      	ldr	r3, [r7, #16]
   2d480:	18cb      	adds	r3, r1, r3
   2d482:	781b      	ldrb	r3, [r3, #0]
   2d484:	0019      	movs	r1, r3
   2d486:	683b      	ldr	r3, [r7, #0]
   2d488:	185b      	adds	r3, r3, r1
   2d48a:	781b      	ldrb	r3, [r3, #0]
   2d48c:	b21b      	sxth	r3, r3
   2d48e:	4313      	orrs	r3, r2
   2d490:	b21a      	sxth	r2, r3
   2d492:	230c      	movs	r3, #12
   2d494:	18fb      	adds	r3, r7, r3
   2d496:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2d498:	230e      	movs	r3, #14
   2d49a:	18fb      	adds	r3, r7, r3
   2d49c:	881b      	ldrh	r3, [r3, #0]
   2d49e:	2b00      	cmp	r3, #0
   2d4a0:	d01f      	beq.n	2d4e2 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2d4a2:	230e      	movs	r3, #14
   2d4a4:	18fc      	adds	r4, r7, r3
   2d4a6:	230c      	movs	r3, #12
   2d4a8:	18fb      	adds	r3, r7, r3
   2d4aa:	881b      	ldrh	r3, [r3, #0]
   2d4ac:	0018      	movs	r0, r3
   2d4ae:	4b21      	ldr	r3, [pc, #132]	; (2d534 <cmp_lfn+0xfc>)
   2d4b0:	4798      	blx	r3
   2d4b2:	0003      	movs	r3, r0
   2d4b4:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2d4b6:	697b      	ldr	r3, [r7, #20]
   2d4b8:	2bfe      	cmp	r3, #254	; 0xfe
   2d4ba:	d810      	bhi.n	2d4de <cmp_lfn+0xa6>
   2d4bc:	697b      	ldr	r3, [r7, #20]
   2d4be:	1c5a      	adds	r2, r3, #1
   2d4c0:	617a      	str	r2, [r7, #20]
   2d4c2:	005b      	lsls	r3, r3, #1
   2d4c4:	687a      	ldr	r2, [r7, #4]
   2d4c6:	18d3      	adds	r3, r2, r3
   2d4c8:	881b      	ldrh	r3, [r3, #0]
   2d4ca:	0018      	movs	r0, r3
   2d4cc:	4b19      	ldr	r3, [pc, #100]	; (2d534 <cmp_lfn+0xfc>)
   2d4ce:	4798      	blx	r3
   2d4d0:	0003      	movs	r3, r0
   2d4d2:	001a      	movs	r2, r3
   2d4d4:	230e      	movs	r3, #14
   2d4d6:	18fb      	adds	r3, r7, r3
   2d4d8:	881b      	ldrh	r3, [r3, #0]
   2d4da:	4293      	cmp	r3, r2
   2d4dc:	d009      	beq.n	2d4f2 <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2d4de:	2300      	movs	r3, #0
   2d4e0:	e022      	b.n	2d528 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2d4e2:	230c      	movs	r3, #12
   2d4e4:	18fb      	adds	r3, r7, r3
   2d4e6:	881b      	ldrh	r3, [r3, #0]
   2d4e8:	4a13      	ldr	r2, [pc, #76]	; (2d538 <cmp_lfn+0x100>)
   2d4ea:	4293      	cmp	r3, r2
   2d4ec:	d001      	beq.n	2d4f2 <cmp_lfn+0xba>
   2d4ee:	2300      	movs	r3, #0
   2d4f0:	e01a      	b.n	2d528 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2d4f2:	693b      	ldr	r3, [r7, #16]
   2d4f4:	3301      	adds	r3, #1
   2d4f6:	613b      	str	r3, [r7, #16]
   2d4f8:	693b      	ldr	r3, [r7, #16]
   2d4fa:	2b0c      	cmp	r3, #12
   2d4fc:	d9b4      	bls.n	2d468 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2d4fe:	683b      	ldr	r3, [r7, #0]
   2d500:	781b      	ldrb	r3, [r3, #0]
   2d502:	001a      	movs	r2, r3
   2d504:	2340      	movs	r3, #64	; 0x40
   2d506:	4013      	ands	r3, r2
   2d508:	d00d      	beq.n	2d526 <cmp_lfn+0xee>
   2d50a:	230e      	movs	r3, #14
   2d50c:	18fb      	adds	r3, r7, r3
   2d50e:	881b      	ldrh	r3, [r3, #0]
   2d510:	2b00      	cmp	r3, #0
   2d512:	d008      	beq.n	2d526 <cmp_lfn+0xee>
   2d514:	697b      	ldr	r3, [r7, #20]
   2d516:	005b      	lsls	r3, r3, #1
   2d518:	687a      	ldr	r2, [r7, #4]
   2d51a:	18d3      	adds	r3, r2, r3
   2d51c:	881b      	ldrh	r3, [r3, #0]
   2d51e:	2b00      	cmp	r3, #0
   2d520:	d001      	beq.n	2d526 <cmp_lfn+0xee>
		return 0;
   2d522:	2300      	movs	r3, #0
   2d524:	e000      	b.n	2d528 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2d526:	2301      	movs	r3, #1
}
   2d528:	0018      	movs	r0, r3
   2d52a:	46bd      	mov	sp, r7
   2d52c:	b007      	add	sp, #28
   2d52e:	bd90      	pop	{r4, r7, pc}
   2d530:	0003b420 	.word	0x0003b420
   2d534:	0002f4e5 	.word	0x0002f4e5
   2d538:	0000ffff 	.word	0x0000ffff

0002d53c <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2d53c:	b580      	push	{r7, lr}
   2d53e:	b088      	sub	sp, #32
   2d540:	af00      	add	r7, sp, #0
   2d542:	60f8      	str	r0, [r7, #12]
   2d544:	60b9      	str	r1, [r7, #8]
   2d546:	0019      	movs	r1, r3
   2d548:	1dfb      	adds	r3, r7, #7
   2d54a:	701a      	strb	r2, [r3, #0]
   2d54c:	1dbb      	adds	r3, r7, #6
   2d54e:	1c0a      	adds	r2, r1, #0
   2d550:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2d552:	68bb      	ldr	r3, [r7, #8]
   2d554:	330d      	adds	r3, #13
   2d556:	1dba      	adds	r2, r7, #6
   2d558:	7812      	ldrb	r2, [r2, #0]
   2d55a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2d55c:	68bb      	ldr	r3, [r7, #8]
   2d55e:	330b      	adds	r3, #11
   2d560:	220f      	movs	r2, #15
   2d562:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2d564:	68bb      	ldr	r3, [r7, #8]
   2d566:	330c      	adds	r3, #12
   2d568:	2200      	movs	r2, #0
   2d56a:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2d56c:	68bb      	ldr	r3, [r7, #8]
   2d56e:	331a      	adds	r3, #26
   2d570:	2200      	movs	r2, #0
   2d572:	701a      	strb	r2, [r3, #0]
   2d574:	68bb      	ldr	r3, [r7, #8]
   2d576:	331b      	adds	r3, #27
   2d578:	2200      	movs	r2, #0
   2d57a:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2d57c:	1dfb      	adds	r3, r7, #7
   2d57e:	781b      	ldrb	r3, [r3, #0]
   2d580:	1e5a      	subs	r2, r3, #1
   2d582:	0013      	movs	r3, r2
   2d584:	005b      	lsls	r3, r3, #1
   2d586:	189b      	adds	r3, r3, r2
   2d588:	009b      	lsls	r3, r3, #2
   2d58a:	189b      	adds	r3, r3, r2
   2d58c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2d58e:	2316      	movs	r3, #22
   2d590:	18fb      	adds	r3, r7, r3
   2d592:	2200      	movs	r2, #0
   2d594:	801a      	strh	r2, [r3, #0]
   2d596:	2300      	movs	r3, #0
   2d598:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2d59a:	2316      	movs	r3, #22
   2d59c:	18fb      	adds	r3, r7, r3
   2d59e:	881b      	ldrh	r3, [r3, #0]
   2d5a0:	4a28      	ldr	r2, [pc, #160]	; (2d644 <fit_lfn+0x108>)
   2d5a2:	4293      	cmp	r3, r2
   2d5a4:	d009      	beq.n	2d5ba <fit_lfn+0x7e>
   2d5a6:	69fb      	ldr	r3, [r7, #28]
   2d5a8:	1c5a      	adds	r2, r3, #1
   2d5aa:	61fa      	str	r2, [r7, #28]
   2d5ac:	005b      	lsls	r3, r3, #1
   2d5ae:	68fa      	ldr	r2, [r7, #12]
   2d5b0:	18d2      	adds	r2, r2, r3
   2d5b2:	2316      	movs	r3, #22
   2d5b4:	18fb      	adds	r3, r7, r3
   2d5b6:	8812      	ldrh	r2, [r2, #0]
   2d5b8:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2d5ba:	4a23      	ldr	r2, [pc, #140]	; (2d648 <fit_lfn+0x10c>)
   2d5bc:	69bb      	ldr	r3, [r7, #24]
   2d5be:	18d3      	adds	r3, r2, r3
   2d5c0:	781b      	ldrb	r3, [r3, #0]
   2d5c2:	001a      	movs	r2, r3
   2d5c4:	68bb      	ldr	r3, [r7, #8]
   2d5c6:	189b      	adds	r3, r3, r2
   2d5c8:	2216      	movs	r2, #22
   2d5ca:	18ba      	adds	r2, r7, r2
   2d5cc:	8812      	ldrh	r2, [r2, #0]
   2d5ce:	b2d2      	uxtb	r2, r2
   2d5d0:	701a      	strb	r2, [r3, #0]
   2d5d2:	4a1d      	ldr	r2, [pc, #116]	; (2d648 <fit_lfn+0x10c>)
   2d5d4:	69bb      	ldr	r3, [r7, #24]
   2d5d6:	18d3      	adds	r3, r2, r3
   2d5d8:	781b      	ldrb	r3, [r3, #0]
   2d5da:	3301      	adds	r3, #1
   2d5dc:	68ba      	ldr	r2, [r7, #8]
   2d5de:	18d3      	adds	r3, r2, r3
   2d5e0:	2216      	movs	r2, #22
   2d5e2:	18ba      	adds	r2, r7, r2
   2d5e4:	8812      	ldrh	r2, [r2, #0]
   2d5e6:	0a12      	lsrs	r2, r2, #8
   2d5e8:	b292      	uxth	r2, r2
   2d5ea:	b2d2      	uxtb	r2, r2
   2d5ec:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2d5ee:	2316      	movs	r3, #22
   2d5f0:	18fb      	adds	r3, r7, r3
   2d5f2:	881b      	ldrh	r3, [r3, #0]
   2d5f4:	2b00      	cmp	r3, #0
   2d5f6:	d104      	bne.n	2d602 <fit_lfn+0xc6>
   2d5f8:	2316      	movs	r3, #22
   2d5fa:	18fb      	adds	r3, r7, r3
   2d5fc:	2201      	movs	r2, #1
   2d5fe:	4252      	negs	r2, r2
   2d600:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2d602:	69bb      	ldr	r3, [r7, #24]
   2d604:	3301      	adds	r3, #1
   2d606:	61bb      	str	r3, [r7, #24]
   2d608:	69bb      	ldr	r3, [r7, #24]
   2d60a:	2b0c      	cmp	r3, #12
   2d60c:	d9c5      	bls.n	2d59a <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2d60e:	2316      	movs	r3, #22
   2d610:	18fb      	adds	r3, r7, r3
   2d612:	881b      	ldrh	r3, [r3, #0]
   2d614:	4a0b      	ldr	r2, [pc, #44]	; (2d644 <fit_lfn+0x108>)
   2d616:	4293      	cmp	r3, r2
   2d618:	d006      	beq.n	2d628 <fit_lfn+0xec>
   2d61a:	69fb      	ldr	r3, [r7, #28]
   2d61c:	005b      	lsls	r3, r3, #1
   2d61e:	68fa      	ldr	r2, [r7, #12]
   2d620:	18d3      	adds	r3, r2, r3
   2d622:	881b      	ldrh	r3, [r3, #0]
   2d624:	2b00      	cmp	r3, #0
   2d626:	d105      	bne.n	2d634 <fit_lfn+0xf8>
   2d628:	1dfb      	adds	r3, r7, #7
   2d62a:	1dfa      	adds	r2, r7, #7
   2d62c:	7812      	ldrb	r2, [r2, #0]
   2d62e:	2140      	movs	r1, #64	; 0x40
   2d630:	430a      	orrs	r2, r1
   2d632:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2d634:	68bb      	ldr	r3, [r7, #8]
   2d636:	1dfa      	adds	r2, r7, #7
   2d638:	7812      	ldrb	r2, [r2, #0]
   2d63a:	701a      	strb	r2, [r3, #0]
}
   2d63c:	46c0      	nop			; (mov r8, r8)
   2d63e:	46bd      	mov	sp, r7
   2d640:	b008      	add	sp, #32
   2d642:	bd80      	pop	{r7, pc}
   2d644:	0000ffff 	.word	0x0000ffff
   2d648:	0003b420 	.word	0x0003b420

0002d64c <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2d64c:	b580      	push	{r7, lr}
   2d64e:	b08a      	sub	sp, #40	; 0x28
   2d650:	af00      	add	r7, sp, #0
   2d652:	60f8      	str	r0, [r7, #12]
   2d654:	60b9      	str	r1, [r7, #8]
   2d656:	607a      	str	r2, [r7, #4]
   2d658:	001a      	movs	r2, r3
   2d65a:	1cbb      	adds	r3, r7, #2
   2d65c:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2d65e:	68b9      	ldr	r1, [r7, #8]
   2d660:	68fb      	ldr	r3, [r7, #12]
   2d662:	220b      	movs	r2, #11
   2d664:	0018      	movs	r0, r3
   2d666:	4b38      	ldr	r3, [pc, #224]	; (2d748 <gen_numname+0xfc>)
   2d668:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2d66a:	1cbb      	adds	r3, r7, #2
   2d66c:	881b      	ldrh	r3, [r3, #0]
   2d66e:	2b05      	cmp	r3, #5
   2d670:	d911      	bls.n	2d696 <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2d672:	1cbb      	adds	r3, r7, #2
   2d674:	881b      	ldrh	r3, [r3, #0]
   2d676:	b29a      	uxth	r2, r3
   2d678:	0852      	lsrs	r2, r2, #1
   2d67a:	03db      	lsls	r3, r3, #15
   2d67c:	4313      	orrs	r3, r2
   2d67e:	b299      	uxth	r1, r3
   2d680:	687b      	ldr	r3, [r7, #4]
   2d682:	1c9a      	adds	r2, r3, #2
   2d684:	607a      	str	r2, [r7, #4]
   2d686:	881a      	ldrh	r2, [r3, #0]
   2d688:	1cbb      	adds	r3, r7, #2
   2d68a:	188a      	adds	r2, r1, r2
   2d68c:	801a      	strh	r2, [r3, #0]
   2d68e:	687b      	ldr	r3, [r7, #4]
   2d690:	881b      	ldrh	r3, [r3, #0]
   2d692:	2b00      	cmp	r3, #0
   2d694:	d1ed      	bne.n	2d672 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2d696:	2307      	movs	r3, #7
   2d698:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2d69a:	1cbb      	adds	r3, r7, #2
   2d69c:	881b      	ldrh	r3, [r3, #0]
   2d69e:	b2db      	uxtb	r3, r3
   2d6a0:	220f      	movs	r2, #15
   2d6a2:	4013      	ands	r3, r2
   2d6a4:	b2da      	uxtb	r2, r3
   2d6a6:	2327      	movs	r3, #39	; 0x27
   2d6a8:	18fb      	adds	r3, r7, r3
   2d6aa:	3230      	adds	r2, #48	; 0x30
   2d6ac:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2d6ae:	2327      	movs	r3, #39	; 0x27
   2d6b0:	18fb      	adds	r3, r7, r3
   2d6b2:	781b      	ldrb	r3, [r3, #0]
   2d6b4:	2b39      	cmp	r3, #57	; 0x39
   2d6b6:	d906      	bls.n	2d6c6 <gen_numname+0x7a>
   2d6b8:	2327      	movs	r3, #39	; 0x27
   2d6ba:	18fb      	adds	r3, r7, r3
   2d6bc:	2227      	movs	r2, #39	; 0x27
   2d6be:	18ba      	adds	r2, r7, r2
   2d6c0:	7812      	ldrb	r2, [r2, #0]
   2d6c2:	3207      	adds	r2, #7
   2d6c4:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2d6c6:	6a3b      	ldr	r3, [r7, #32]
   2d6c8:	1e5a      	subs	r2, r3, #1
   2d6ca:	623a      	str	r2, [r7, #32]
   2d6cc:	2214      	movs	r2, #20
   2d6ce:	18ba      	adds	r2, r7, r2
   2d6d0:	2127      	movs	r1, #39	; 0x27
   2d6d2:	1879      	adds	r1, r7, r1
   2d6d4:	7809      	ldrb	r1, [r1, #0]
   2d6d6:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2d6d8:	1cbb      	adds	r3, r7, #2
   2d6da:	1cba      	adds	r2, r7, #2
   2d6dc:	8812      	ldrh	r2, [r2, #0]
   2d6de:	0912      	lsrs	r2, r2, #4
   2d6e0:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2d6e2:	1cbb      	adds	r3, r7, #2
   2d6e4:	881b      	ldrh	r3, [r3, #0]
   2d6e6:	2b00      	cmp	r3, #0
   2d6e8:	d1d7      	bne.n	2d69a <gen_numname+0x4e>
	ns[i] = '~';
   2d6ea:	2314      	movs	r3, #20
   2d6ec:	18fa      	adds	r2, r7, r3
   2d6ee:	6a3b      	ldr	r3, [r7, #32]
   2d6f0:	18d3      	adds	r3, r2, r3
   2d6f2:	227e      	movs	r2, #126	; 0x7e
   2d6f4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2d6f6:	2300      	movs	r3, #0
   2d6f8:	61fb      	str	r3, [r7, #28]
   2d6fa:	e002      	b.n	2d702 <gen_numname+0xb6>
   2d6fc:	69fb      	ldr	r3, [r7, #28]
   2d6fe:	3301      	adds	r3, #1
   2d700:	61fb      	str	r3, [r7, #28]
   2d702:	69fa      	ldr	r2, [r7, #28]
   2d704:	6a3b      	ldr	r3, [r7, #32]
   2d706:	429a      	cmp	r2, r3
   2d708:	d205      	bcs.n	2d716 <gen_numname+0xca>
   2d70a:	68fa      	ldr	r2, [r7, #12]
   2d70c:	69fb      	ldr	r3, [r7, #28]
   2d70e:	18d3      	adds	r3, r2, r3
   2d710:	781b      	ldrb	r3, [r3, #0]
   2d712:	2b20      	cmp	r3, #32
   2d714:	d1f2      	bne.n	2d6fc <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2d716:	69fb      	ldr	r3, [r7, #28]
   2d718:	1c5a      	adds	r2, r3, #1
   2d71a:	61fa      	str	r2, [r7, #28]
   2d71c:	68fa      	ldr	r2, [r7, #12]
   2d71e:	18d2      	adds	r2, r2, r3
   2d720:	6a3b      	ldr	r3, [r7, #32]
   2d722:	2b07      	cmp	r3, #7
   2d724:	d806      	bhi.n	2d734 <gen_numname+0xe8>
   2d726:	6a3b      	ldr	r3, [r7, #32]
   2d728:	1c59      	adds	r1, r3, #1
   2d72a:	6239      	str	r1, [r7, #32]
   2d72c:	2114      	movs	r1, #20
   2d72e:	1879      	adds	r1, r7, r1
   2d730:	5ccb      	ldrb	r3, [r1, r3]
   2d732:	e000      	b.n	2d736 <gen_numname+0xea>
   2d734:	2320      	movs	r3, #32
   2d736:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2d738:	69fb      	ldr	r3, [r7, #28]
   2d73a:	2b07      	cmp	r3, #7
   2d73c:	d9eb      	bls.n	2d716 <gen_numname+0xca>
}
   2d73e:	46c0      	nop			; (mov r8, r8)
   2d740:	46bd      	mov	sp, r7
   2d742:	b00a      	add	sp, #40	; 0x28
   2d744:	bd80      	pop	{r7, pc}
   2d746:	46c0      	nop			; (mov r8, r8)
   2d748:	0002c7f1 	.word	0x0002c7f1

0002d74c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2d74c:	b580      	push	{r7, lr}
   2d74e:	b084      	sub	sp, #16
   2d750:	af00      	add	r7, sp, #0
   2d752:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2d754:	230f      	movs	r3, #15
   2d756:	18fb      	adds	r3, r7, r3
   2d758:	2200      	movs	r2, #0
   2d75a:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2d75c:	230b      	movs	r3, #11
   2d75e:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2d760:	230f      	movs	r3, #15
   2d762:	18fb      	adds	r3, r7, r3
   2d764:	781b      	ldrb	r3, [r3, #0]
   2d766:	b2da      	uxtb	r2, r3
   2d768:	0852      	lsrs	r2, r2, #1
   2d76a:	01db      	lsls	r3, r3, #7
   2d76c:	4313      	orrs	r3, r2
   2d76e:	b2d9      	uxtb	r1, r3
   2d770:	687b      	ldr	r3, [r7, #4]
   2d772:	1c5a      	adds	r2, r3, #1
   2d774:	607a      	str	r2, [r7, #4]
   2d776:	781a      	ldrb	r2, [r3, #0]
   2d778:	230f      	movs	r3, #15
   2d77a:	18fb      	adds	r3, r7, r3
   2d77c:	188a      	adds	r2, r1, r2
   2d77e:	701a      	strb	r2, [r3, #0]
   2d780:	68bb      	ldr	r3, [r7, #8]
   2d782:	3b01      	subs	r3, #1
   2d784:	60bb      	str	r3, [r7, #8]
   2d786:	68bb      	ldr	r3, [r7, #8]
   2d788:	2b00      	cmp	r3, #0
   2d78a:	d1e9      	bne.n	2d760 <sum_sfn+0x14>
	return sum;
   2d78c:	230f      	movs	r3, #15
   2d78e:	18fb      	adds	r3, r7, r3
   2d790:	781b      	ldrb	r3, [r3, #0]
}
   2d792:	0018      	movs	r0, r3
   2d794:	46bd      	mov	sp, r7
   2d796:	b004      	add	sp, #16
   2d798:	bd80      	pop	{r7, pc}
	...

0002d79c <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2d79c:	b590      	push	{r4, r7, lr}
   2d79e:	b087      	sub	sp, #28
   2d7a0:	af00      	add	r7, sp, #0
   2d7a2:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2d7a4:	2317      	movs	r3, #23
   2d7a6:	18fc      	adds	r4, r7, r3
   2d7a8:	687b      	ldr	r3, [r7, #4]
   2d7aa:	2100      	movs	r1, #0
   2d7ac:	0018      	movs	r0, r3
   2d7ae:	4b74      	ldr	r3, [pc, #464]	; (2d980 <dir_find+0x1e4>)
   2d7b0:	4798      	blx	r3
   2d7b2:	0003      	movs	r3, r0
   2d7b4:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2d7b6:	2317      	movs	r3, #23
   2d7b8:	18fb      	adds	r3, r7, r3
   2d7ba:	781b      	ldrb	r3, [r3, #0]
   2d7bc:	2b00      	cmp	r3, #0
   2d7be:	d003      	beq.n	2d7c8 <dir_find+0x2c>
   2d7c0:	2317      	movs	r3, #23
   2d7c2:	18fb      	adds	r3, r7, r3
   2d7c4:	781b      	ldrb	r3, [r3, #0]
   2d7c6:	e0d6      	b.n	2d976 <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2d7c8:	2314      	movs	r3, #20
   2d7ca:	18fb      	adds	r3, r7, r3
   2d7cc:	22ff      	movs	r2, #255	; 0xff
   2d7ce:	701a      	strb	r2, [r3, #0]
   2d7d0:	2315      	movs	r3, #21
   2d7d2:	18fb      	adds	r3, r7, r3
   2d7d4:	2214      	movs	r2, #20
   2d7d6:	18ba      	adds	r2, r7, r2
   2d7d8:	7812      	ldrb	r2, [r2, #0]
   2d7da:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2d7dc:	687b      	ldr	r3, [r7, #4]
   2d7de:	681a      	ldr	r2, [r3, #0]
   2d7e0:	687b      	ldr	r3, [r7, #4]
   2d7e2:	691b      	ldr	r3, [r3, #16]
   2d7e4:	2117      	movs	r1, #23
   2d7e6:	187c      	adds	r4, r7, r1
   2d7e8:	0019      	movs	r1, r3
   2d7ea:	0010      	movs	r0, r2
   2d7ec:	4b65      	ldr	r3, [pc, #404]	; (2d984 <dir_find+0x1e8>)
   2d7ee:	4798      	blx	r3
   2d7f0:	0003      	movs	r3, r0
   2d7f2:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2d7f4:	2317      	movs	r3, #23
   2d7f6:	18fb      	adds	r3, r7, r3
   2d7f8:	781b      	ldrb	r3, [r3, #0]
   2d7fa:	2b00      	cmp	r3, #0
   2d7fc:	d000      	beq.n	2d800 <dir_find+0x64>
   2d7fe:	e0b2      	b.n	2d966 <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2d800:	687b      	ldr	r3, [r7, #4]
   2d802:	695b      	ldr	r3, [r3, #20]
   2d804:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2d806:	2316      	movs	r3, #22
   2d808:	18fb      	adds	r3, r7, r3
   2d80a:	693a      	ldr	r2, [r7, #16]
   2d80c:	7812      	ldrb	r2, [r2, #0]
   2d80e:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2d810:	2316      	movs	r3, #22
   2d812:	18fb      	adds	r3, r7, r3
   2d814:	781b      	ldrb	r3, [r3, #0]
   2d816:	2b00      	cmp	r3, #0
   2d818:	d104      	bne.n	2d824 <dir_find+0x88>
   2d81a:	2317      	movs	r3, #23
   2d81c:	18fb      	adds	r3, r7, r3
   2d81e:	2204      	movs	r2, #4
   2d820:	701a      	strb	r2, [r3, #0]
   2d822:	e0a5      	b.n	2d970 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2d824:	693b      	ldr	r3, [r7, #16]
   2d826:	330b      	adds	r3, #11
   2d828:	781a      	ldrb	r2, [r3, #0]
   2d82a:	230f      	movs	r3, #15
   2d82c:	18fb      	adds	r3, r7, r3
   2d82e:	213f      	movs	r1, #63	; 0x3f
   2d830:	400a      	ands	r2, r1
   2d832:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2d834:	2316      	movs	r3, #22
   2d836:	18fb      	adds	r3, r7, r3
   2d838:	781b      	ldrb	r3, [r3, #0]
   2d83a:	2be5      	cmp	r3, #229	; 0xe5
   2d83c:	d00a      	beq.n	2d854 <dir_find+0xb8>
   2d83e:	230f      	movs	r3, #15
   2d840:	18fb      	adds	r3, r7, r3
   2d842:	781b      	ldrb	r3, [r3, #0]
   2d844:	2208      	movs	r2, #8
   2d846:	4013      	ands	r3, r2
   2d848:	d009      	beq.n	2d85e <dir_find+0xc2>
   2d84a:	230f      	movs	r3, #15
   2d84c:	18fb      	adds	r3, r7, r3
   2d84e:	781b      	ldrb	r3, [r3, #0]
   2d850:	2b0f      	cmp	r3, #15
   2d852:	d004      	beq.n	2d85e <dir_find+0xc2>
			ord = 0xFF;
   2d854:	2315      	movs	r3, #21
   2d856:	18fb      	adds	r3, r7, r3
   2d858:	22ff      	movs	r2, #255	; 0xff
   2d85a:	701a      	strb	r2, [r3, #0]
   2d85c:	e073      	b.n	2d946 <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2d85e:	230f      	movs	r3, #15
   2d860:	18fb      	adds	r3, r7, r3
   2d862:	781b      	ldrb	r3, [r3, #0]
   2d864:	2b0f      	cmp	r3, #15
   2d866:	d145      	bne.n	2d8f4 <dir_find+0x158>
				if (dj->lfn) {
   2d868:	687b      	ldr	r3, [r7, #4]
   2d86a:	69db      	ldr	r3, [r3, #28]
   2d86c:	2b00      	cmp	r3, #0
   2d86e:	d100      	bne.n	2d872 <dir_find+0xd6>
   2d870:	e069      	b.n	2d946 <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2d872:	2316      	movs	r3, #22
   2d874:	18fb      	adds	r3, r7, r3
   2d876:	781b      	ldrb	r3, [r3, #0]
   2d878:	2240      	movs	r2, #64	; 0x40
   2d87a:	4013      	ands	r3, r2
   2d87c:	d016      	beq.n	2d8ac <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2d87e:	2314      	movs	r3, #20
   2d880:	18fb      	adds	r3, r7, r3
   2d882:	693a      	ldr	r2, [r7, #16]
   2d884:	7b52      	ldrb	r2, [r2, #13]
   2d886:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2d888:	2316      	movs	r3, #22
   2d88a:	18fb      	adds	r3, r7, r3
   2d88c:	2216      	movs	r2, #22
   2d88e:	18ba      	adds	r2, r7, r2
   2d890:	7812      	ldrb	r2, [r2, #0]
   2d892:	2140      	movs	r1, #64	; 0x40
   2d894:	438a      	bics	r2, r1
   2d896:	701a      	strb	r2, [r3, #0]
   2d898:	2315      	movs	r3, #21
   2d89a:	18fb      	adds	r3, r7, r3
   2d89c:	2216      	movs	r2, #22
   2d89e:	18ba      	adds	r2, r7, r2
   2d8a0:	7812      	ldrb	r2, [r2, #0]
   2d8a2:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2d8a4:	687b      	ldr	r3, [r7, #4]
   2d8a6:	88da      	ldrh	r2, [r3, #6]
   2d8a8:	687b      	ldr	r3, [r7, #4]
   2d8aa:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2d8ac:	2316      	movs	r3, #22
   2d8ae:	18fa      	adds	r2, r7, r3
   2d8b0:	2315      	movs	r3, #21
   2d8b2:	18fb      	adds	r3, r7, r3
   2d8b4:	7812      	ldrb	r2, [r2, #0]
   2d8b6:	781b      	ldrb	r3, [r3, #0]
   2d8b8:	429a      	cmp	r2, r3
   2d8ba:	d116      	bne.n	2d8ea <dir_find+0x14e>
   2d8bc:	693b      	ldr	r3, [r7, #16]
   2d8be:	330d      	adds	r3, #13
   2d8c0:	781b      	ldrb	r3, [r3, #0]
   2d8c2:	2214      	movs	r2, #20
   2d8c4:	18ba      	adds	r2, r7, r2
   2d8c6:	7812      	ldrb	r2, [r2, #0]
   2d8c8:	429a      	cmp	r2, r3
   2d8ca:	d10e      	bne.n	2d8ea <dir_find+0x14e>
   2d8cc:	687b      	ldr	r3, [r7, #4]
   2d8ce:	69db      	ldr	r3, [r3, #28]
   2d8d0:	693a      	ldr	r2, [r7, #16]
   2d8d2:	0011      	movs	r1, r2
   2d8d4:	0018      	movs	r0, r3
   2d8d6:	4b2c      	ldr	r3, [pc, #176]	; (2d988 <dir_find+0x1ec>)
   2d8d8:	4798      	blx	r3
   2d8da:	1e03      	subs	r3, r0, #0
   2d8dc:	d005      	beq.n	2d8ea <dir_find+0x14e>
   2d8de:	2315      	movs	r3, #21
   2d8e0:	18fb      	adds	r3, r7, r3
   2d8e2:	781b      	ldrb	r3, [r3, #0]
   2d8e4:	3b01      	subs	r3, #1
   2d8e6:	b2da      	uxtb	r2, r3
   2d8e8:	e000      	b.n	2d8ec <dir_find+0x150>
   2d8ea:	22ff      	movs	r2, #255	; 0xff
   2d8ec:	2315      	movs	r3, #21
   2d8ee:	18fb      	adds	r3, r7, r3
   2d8f0:	701a      	strb	r2, [r3, #0]
   2d8f2:	e028      	b.n	2d946 <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2d8f4:	2315      	movs	r3, #21
   2d8f6:	18fb      	adds	r3, r7, r3
   2d8f8:	781b      	ldrb	r3, [r3, #0]
   2d8fa:	2b00      	cmp	r3, #0
   2d8fc:	d10a      	bne.n	2d914 <dir_find+0x178>
   2d8fe:	693b      	ldr	r3, [r7, #16]
   2d900:	0018      	movs	r0, r3
   2d902:	4b22      	ldr	r3, [pc, #136]	; (2d98c <dir_find+0x1f0>)
   2d904:	4798      	blx	r3
   2d906:	0003      	movs	r3, r0
   2d908:	001a      	movs	r2, r3
   2d90a:	2314      	movs	r3, #20
   2d90c:	18fb      	adds	r3, r7, r3
   2d90e:	781b      	ldrb	r3, [r3, #0]
   2d910:	4293      	cmp	r3, r2
   2d912:	d02a      	beq.n	2d96a <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2d914:	2315      	movs	r3, #21
   2d916:	18fb      	adds	r3, r7, r3
   2d918:	22ff      	movs	r2, #255	; 0xff
   2d91a:	701a      	strb	r2, [r3, #0]
   2d91c:	687b      	ldr	r3, [r7, #4]
   2d91e:	2201      	movs	r2, #1
   2d920:	4252      	negs	r2, r2
   2d922:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2d924:	687b      	ldr	r3, [r7, #4]
   2d926:	699b      	ldr	r3, [r3, #24]
   2d928:	330b      	adds	r3, #11
   2d92a:	781b      	ldrb	r3, [r3, #0]
   2d92c:	001a      	movs	r2, r3
   2d92e:	2301      	movs	r3, #1
   2d930:	4013      	ands	r3, r2
   2d932:	d108      	bne.n	2d946 <dir_find+0x1aa>
   2d934:	687b      	ldr	r3, [r7, #4]
   2d936:	6999      	ldr	r1, [r3, #24]
   2d938:	693b      	ldr	r3, [r7, #16]
   2d93a:	220b      	movs	r2, #11
   2d93c:	0018      	movs	r0, r3
   2d93e:	4b14      	ldr	r3, [pc, #80]	; (2d990 <dir_find+0x1f4>)
   2d940:	4798      	blx	r3
   2d942:	1e03      	subs	r3, r0, #0
   2d944:	d013      	beq.n	2d96e <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2d946:	2317      	movs	r3, #23
   2d948:	18fc      	adds	r4, r7, r3
   2d94a:	687b      	ldr	r3, [r7, #4]
   2d94c:	2100      	movs	r1, #0
   2d94e:	0018      	movs	r0, r3
   2d950:	4b10      	ldr	r3, [pc, #64]	; (2d994 <dir_find+0x1f8>)
   2d952:	4798      	blx	r3
   2d954:	0003      	movs	r3, r0
   2d956:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2d958:	2317      	movs	r3, #23
   2d95a:	18fb      	adds	r3, r7, r3
   2d95c:	781b      	ldrb	r3, [r3, #0]
   2d95e:	2b00      	cmp	r3, #0
   2d960:	d100      	bne.n	2d964 <dir_find+0x1c8>
   2d962:	e73b      	b.n	2d7dc <dir_find+0x40>
   2d964:	e004      	b.n	2d970 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2d966:	46c0      	nop			; (mov r8, r8)
   2d968:	e002      	b.n	2d970 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2d96a:	46c0      	nop			; (mov r8, r8)
   2d96c:	e000      	b.n	2d970 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2d96e:	46c0      	nop			; (mov r8, r8)

	return res;
   2d970:	2317      	movs	r3, #23
   2d972:	18fb      	adds	r3, r7, r3
   2d974:	781b      	ldrb	r3, [r3, #0]
}
   2d976:	0018      	movs	r0, r3
   2d978:	46bd      	mov	sp, r7
   2d97a:	b007      	add	sp, #28
   2d97c:	bd90      	pop	{r4, r7, pc}
   2d97e:	46c0      	nop			; (mov r8, r8)
   2d980:	0002d119 	.word	0x0002d119
   2d984:	0002c8d5 	.word	0x0002c8d5
   2d988:	0002d439 	.word	0x0002d439
   2d98c:	0002d74d 	.word	0x0002d74d
   2d990:	0002c859 	.word	0x0002c859
   2d994:	0002d249 	.word	0x0002d249

0002d998 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2d998:	b590      	push	{r4, r7, lr}
   2d99a:	b08d      	sub	sp, #52	; 0x34
   2d99c:	af00      	add	r7, sp, #0
   2d99e:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2d9a0:	687b      	ldr	r3, [r7, #4]
   2d9a2:	699b      	ldr	r3, [r3, #24]
   2d9a4:	627b      	str	r3, [r7, #36]	; 0x24
   2d9a6:	687b      	ldr	r3, [r7, #4]
   2d9a8:	69db      	ldr	r3, [r3, #28]
   2d9aa:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2d9ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2d9ae:	230c      	movs	r3, #12
   2d9b0:	18fb      	adds	r3, r7, r3
   2d9b2:	220c      	movs	r2, #12
   2d9b4:	0018      	movs	r0, r3
   2d9b6:	4bc8      	ldr	r3, [pc, #800]	; (2dcd8 <dir_register+0x340>)
   2d9b8:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2d9ba:	230c      	movs	r3, #12
   2d9bc:	18fb      	adds	r3, r7, r3
   2d9be:	7adb      	ldrb	r3, [r3, #11]
   2d9c0:	001a      	movs	r2, r3
   2d9c2:	2301      	movs	r3, #1
   2d9c4:	4013      	ands	r3, r2
   2d9c6:	d048      	beq.n	2da5a <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2d9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d9ca:	330b      	adds	r3, #11
   2d9cc:	2200      	movs	r2, #0
   2d9ce:	701a      	strb	r2, [r3, #0]
   2d9d0:	687b      	ldr	r3, [r7, #4]
   2d9d2:	2200      	movs	r2, #0
   2d9d4:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2d9d6:	232c      	movs	r3, #44	; 0x2c
   2d9d8:	18fb      	adds	r3, r7, r3
   2d9da:	2201      	movs	r2, #1
   2d9dc:	801a      	strh	r2, [r3, #0]
   2d9de:	e01c      	b.n	2da1a <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2d9e0:	232c      	movs	r3, #44	; 0x2c
   2d9e2:	18fb      	adds	r3, r7, r3
   2d9e4:	881b      	ldrh	r3, [r3, #0]
   2d9e6:	6a3a      	ldr	r2, [r7, #32]
   2d9e8:	210c      	movs	r1, #12
   2d9ea:	1879      	adds	r1, r7, r1
   2d9ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2d9ee:	4cbb      	ldr	r4, [pc, #748]	; (2dcdc <dir_register+0x344>)
   2d9f0:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2d9f2:	232f      	movs	r3, #47	; 0x2f
   2d9f4:	18fc      	adds	r4, r7, r3
   2d9f6:	687b      	ldr	r3, [r7, #4]
   2d9f8:	0018      	movs	r0, r3
   2d9fa:	4bb9      	ldr	r3, [pc, #740]	; (2dce0 <dir_register+0x348>)
   2d9fc:	4798      	blx	r3
   2d9fe:	0003      	movs	r3, r0
   2da00:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2da02:	232f      	movs	r3, #47	; 0x2f
   2da04:	18fb      	adds	r3, r7, r3
   2da06:	781b      	ldrb	r3, [r3, #0]
   2da08:	2b00      	cmp	r3, #0
   2da0a:	d10c      	bne.n	2da26 <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2da0c:	232c      	movs	r3, #44	; 0x2c
   2da0e:	18fb      	adds	r3, r7, r3
   2da10:	881a      	ldrh	r2, [r3, #0]
   2da12:	232c      	movs	r3, #44	; 0x2c
   2da14:	18fb      	adds	r3, r7, r3
   2da16:	3201      	adds	r2, #1
   2da18:	801a      	strh	r2, [r3, #0]
   2da1a:	232c      	movs	r3, #44	; 0x2c
   2da1c:	18fb      	adds	r3, r7, r3
   2da1e:	881b      	ldrh	r3, [r3, #0]
   2da20:	2b63      	cmp	r3, #99	; 0x63
   2da22:	d9dd      	bls.n	2d9e0 <dir_register+0x48>
   2da24:	e000      	b.n	2da28 <dir_register+0x90>
			if (res != FR_OK) break;
   2da26:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2da28:	232c      	movs	r3, #44	; 0x2c
   2da2a:	18fb      	adds	r3, r7, r3
   2da2c:	881b      	ldrh	r3, [r3, #0]
   2da2e:	2b64      	cmp	r3, #100	; 0x64
   2da30:	d101      	bne.n	2da36 <dir_register+0x9e>
   2da32:	2307      	movs	r3, #7
   2da34:	e14c      	b.n	2dcd0 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2da36:	232f      	movs	r3, #47	; 0x2f
   2da38:	18fb      	adds	r3, r7, r3
   2da3a:	781b      	ldrb	r3, [r3, #0]
   2da3c:	2b04      	cmp	r3, #4
   2da3e:	d003      	beq.n	2da48 <dir_register+0xb0>
   2da40:	232f      	movs	r3, #47	; 0x2f
   2da42:	18fb      	adds	r3, r7, r3
   2da44:	781b      	ldrb	r3, [r3, #0]
   2da46:	e143      	b.n	2dcd0 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2da48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2da4a:	330b      	adds	r3, #11
   2da4c:	220c      	movs	r2, #12
   2da4e:	18ba      	adds	r2, r7, r2
   2da50:	7ad2      	ldrb	r2, [r2, #11]
   2da52:	701a      	strb	r2, [r3, #0]
   2da54:	687b      	ldr	r3, [r7, #4]
   2da56:	6a3a      	ldr	r2, [r7, #32]
   2da58:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2da5a:	230c      	movs	r3, #12
   2da5c:	18fb      	adds	r3, r7, r3
   2da5e:	7adb      	ldrb	r3, [r3, #11]
   2da60:	001a      	movs	r2, r3
   2da62:	2302      	movs	r3, #2
   2da64:	4013      	ands	r3, r2
   2da66:	d023      	beq.n	2dab0 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2da68:	232a      	movs	r3, #42	; 0x2a
   2da6a:	18fb      	adds	r3, r7, r3
   2da6c:	2200      	movs	r2, #0
   2da6e:	801a      	strh	r2, [r3, #0]
   2da70:	e006      	b.n	2da80 <dir_register+0xe8>
   2da72:	232a      	movs	r3, #42	; 0x2a
   2da74:	18fb      	adds	r3, r7, r3
   2da76:	881a      	ldrh	r2, [r3, #0]
   2da78:	232a      	movs	r3, #42	; 0x2a
   2da7a:	18fb      	adds	r3, r7, r3
   2da7c:	3201      	adds	r2, #1
   2da7e:	801a      	strh	r2, [r3, #0]
   2da80:	232a      	movs	r3, #42	; 0x2a
   2da82:	18fb      	adds	r3, r7, r3
   2da84:	881b      	ldrh	r3, [r3, #0]
   2da86:	005b      	lsls	r3, r3, #1
   2da88:	6a3a      	ldr	r2, [r7, #32]
   2da8a:	18d3      	adds	r3, r2, r3
   2da8c:	881b      	ldrh	r3, [r3, #0]
   2da8e:	2b00      	cmp	r3, #0
   2da90:	d1ef      	bne.n	2da72 <dir_register+0xda>
		ne = (ne + 25) / 13;
   2da92:	232a      	movs	r3, #42	; 0x2a
   2da94:	18fb      	adds	r3, r7, r3
   2da96:	881b      	ldrh	r3, [r3, #0]
   2da98:	3319      	adds	r3, #25
   2da9a:	001a      	movs	r2, r3
   2da9c:	4b91      	ldr	r3, [pc, #580]	; (2dce4 <dir_register+0x34c>)
   2da9e:	210d      	movs	r1, #13
   2daa0:	0010      	movs	r0, r2
   2daa2:	4798      	blx	r3
   2daa4:	0003      	movs	r3, r0
   2daa6:	001a      	movs	r2, r3
   2daa8:	232a      	movs	r3, #42	; 0x2a
   2daaa:	18fb      	adds	r3, r7, r3
   2daac:	801a      	strh	r2, [r3, #0]
   2daae:	e003      	b.n	2dab8 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2dab0:	232a      	movs	r3, #42	; 0x2a
   2dab2:	18fb      	adds	r3, r7, r3
   2dab4:	2201      	movs	r2, #1
   2dab6:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2dab8:	232f      	movs	r3, #47	; 0x2f
   2daba:	18fc      	adds	r4, r7, r3
   2dabc:	687b      	ldr	r3, [r7, #4]
   2dabe:	2100      	movs	r1, #0
   2dac0:	0018      	movs	r0, r3
   2dac2:	4b89      	ldr	r3, [pc, #548]	; (2dce8 <dir_register+0x350>)
   2dac4:	4798      	blx	r3
   2dac6:	0003      	movs	r3, r0
   2dac8:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2daca:	232f      	movs	r3, #47	; 0x2f
   2dacc:	18fb      	adds	r3, r7, r3
   2dace:	781b      	ldrb	r3, [r3, #0]
   2dad0:	2b00      	cmp	r3, #0
   2dad2:	d003      	beq.n	2dadc <dir_register+0x144>
   2dad4:	232f      	movs	r3, #47	; 0x2f
   2dad6:	18fb      	adds	r3, r7, r3
   2dad8:	781b      	ldrb	r3, [r3, #0]
   2dada:	e0f9      	b.n	2dcd0 <dir_register+0x338>
	n = is = 0;
   2dadc:	2328      	movs	r3, #40	; 0x28
   2dade:	18fb      	adds	r3, r7, r3
   2dae0:	2200      	movs	r2, #0
   2dae2:	801a      	strh	r2, [r3, #0]
   2dae4:	232c      	movs	r3, #44	; 0x2c
   2dae6:	18fb      	adds	r3, r7, r3
   2dae8:	2228      	movs	r2, #40	; 0x28
   2daea:	18ba      	adds	r2, r7, r2
   2daec:	8812      	ldrh	r2, [r2, #0]
   2daee:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2daf0:	687b      	ldr	r3, [r7, #4]
   2daf2:	681a      	ldr	r2, [r3, #0]
   2daf4:	687b      	ldr	r3, [r7, #4]
   2daf6:	691b      	ldr	r3, [r3, #16]
   2daf8:	212f      	movs	r1, #47	; 0x2f
   2dafa:	187c      	adds	r4, r7, r1
   2dafc:	0019      	movs	r1, r3
   2dafe:	0010      	movs	r0, r2
   2db00:	4b7a      	ldr	r3, [pc, #488]	; (2dcec <dir_register+0x354>)
   2db02:	4798      	blx	r3
   2db04:	0003      	movs	r3, r0
   2db06:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2db08:	232f      	movs	r3, #47	; 0x2f
   2db0a:	18fb      	adds	r3, r7, r3
   2db0c:	781b      	ldrb	r3, [r3, #0]
   2db0e:	2b00      	cmp	r3, #0
   2db10:	d13c      	bne.n	2db8c <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2db12:	687b      	ldr	r3, [r7, #4]
   2db14:	695a      	ldr	r2, [r3, #20]
   2db16:	231f      	movs	r3, #31
   2db18:	18fb      	adds	r3, r7, r3
   2db1a:	7812      	ldrb	r2, [r2, #0]
   2db1c:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2db1e:	231f      	movs	r3, #31
   2db20:	18fb      	adds	r3, r7, r3
   2db22:	781b      	ldrb	r3, [r3, #0]
   2db24:	2be5      	cmp	r3, #229	; 0xe5
   2db26:	d004      	beq.n	2db32 <dir_register+0x19a>
   2db28:	231f      	movs	r3, #31
   2db2a:	18fb      	adds	r3, r7, r3
   2db2c:	781b      	ldrb	r3, [r3, #0]
   2db2e:	2b00      	cmp	r3, #0
   2db30:	d119      	bne.n	2db66 <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2db32:	232c      	movs	r3, #44	; 0x2c
   2db34:	18fb      	adds	r3, r7, r3
   2db36:	881b      	ldrh	r3, [r3, #0]
   2db38:	2b00      	cmp	r3, #0
   2db3a:	d104      	bne.n	2db46 <dir_register+0x1ae>
   2db3c:	2328      	movs	r3, #40	; 0x28
   2db3e:	18fb      	adds	r3, r7, r3
   2db40:	687a      	ldr	r2, [r7, #4]
   2db42:	88d2      	ldrh	r2, [r2, #6]
   2db44:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2db46:	232c      	movs	r3, #44	; 0x2c
   2db48:	18fb      	adds	r3, r7, r3
   2db4a:	222c      	movs	r2, #44	; 0x2c
   2db4c:	18ba      	adds	r2, r7, r2
   2db4e:	8812      	ldrh	r2, [r2, #0]
   2db50:	3201      	adds	r2, #1
   2db52:	801a      	strh	r2, [r3, #0]
   2db54:	232c      	movs	r3, #44	; 0x2c
   2db56:	18fa      	adds	r2, r7, r3
   2db58:	232a      	movs	r3, #42	; 0x2a
   2db5a:	18fb      	adds	r3, r7, r3
   2db5c:	8812      	ldrh	r2, [r2, #0]
   2db5e:	881b      	ldrh	r3, [r3, #0]
   2db60:	429a      	cmp	r2, r3
   2db62:	d104      	bne.n	2db6e <dir_register+0x1d6>
   2db64:	e013      	b.n	2db8e <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2db66:	232c      	movs	r3, #44	; 0x2c
   2db68:	18fb      	adds	r3, r7, r3
   2db6a:	2200      	movs	r2, #0
   2db6c:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2db6e:	232f      	movs	r3, #47	; 0x2f
   2db70:	18fc      	adds	r4, r7, r3
   2db72:	687b      	ldr	r3, [r7, #4]
   2db74:	2101      	movs	r1, #1
   2db76:	0018      	movs	r0, r3
   2db78:	4b5d      	ldr	r3, [pc, #372]	; (2dcf0 <dir_register+0x358>)
   2db7a:	4798      	blx	r3
   2db7c:	0003      	movs	r3, r0
   2db7e:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2db80:	232f      	movs	r3, #47	; 0x2f
   2db82:	18fb      	adds	r3, r7, r3
   2db84:	781b      	ldrb	r3, [r3, #0]
   2db86:	2b00      	cmp	r3, #0
   2db88:	d0b2      	beq.n	2daf0 <dir_register+0x158>
   2db8a:	e000      	b.n	2db8e <dir_register+0x1f6>
		if (res != FR_OK) break;
   2db8c:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2db8e:	232f      	movs	r3, #47	; 0x2f
   2db90:	18fb      	adds	r3, r7, r3
   2db92:	781b      	ldrb	r3, [r3, #0]
   2db94:	2b00      	cmp	r3, #0
   2db96:	d163      	bne.n	2dc60 <dir_register+0x2c8>
   2db98:	232a      	movs	r3, #42	; 0x2a
   2db9a:	18fb      	adds	r3, r7, r3
   2db9c:	881b      	ldrh	r3, [r3, #0]
   2db9e:	2b01      	cmp	r3, #1
   2dba0:	d95e      	bls.n	2dc60 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2dba2:	232f      	movs	r3, #47	; 0x2f
   2dba4:	18fc      	adds	r4, r7, r3
   2dba6:	2328      	movs	r3, #40	; 0x28
   2dba8:	18fb      	adds	r3, r7, r3
   2dbaa:	881a      	ldrh	r2, [r3, #0]
   2dbac:	687b      	ldr	r3, [r7, #4]
   2dbae:	0011      	movs	r1, r2
   2dbb0:	0018      	movs	r0, r3
   2dbb2:	4b4d      	ldr	r3, [pc, #308]	; (2dce8 <dir_register+0x350>)
   2dbb4:	4798      	blx	r3
   2dbb6:	0003      	movs	r3, r0
   2dbb8:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2dbba:	232f      	movs	r3, #47	; 0x2f
   2dbbc:	18fb      	adds	r3, r7, r3
   2dbbe:	781b      	ldrb	r3, [r3, #0]
   2dbc0:	2b00      	cmp	r3, #0
   2dbc2:	d14d      	bne.n	2dc60 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2dbc4:	687b      	ldr	r3, [r7, #4]
   2dbc6:	699b      	ldr	r3, [r3, #24]
   2dbc8:	221e      	movs	r2, #30
   2dbca:	18bc      	adds	r4, r7, r2
   2dbcc:	0018      	movs	r0, r3
   2dbce:	4b49      	ldr	r3, [pc, #292]	; (2dcf4 <dir_register+0x35c>)
   2dbd0:	4798      	blx	r3
   2dbd2:	0003      	movs	r3, r0
   2dbd4:	7023      	strb	r3, [r4, #0]
			ne--;
   2dbd6:	232a      	movs	r3, #42	; 0x2a
   2dbd8:	18fb      	adds	r3, r7, r3
   2dbda:	881a      	ldrh	r2, [r3, #0]
   2dbdc:	232a      	movs	r3, #42	; 0x2a
   2dbde:	18fb      	adds	r3, r7, r3
   2dbe0:	3a01      	subs	r2, #1
   2dbe2:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2dbe4:	687b      	ldr	r3, [r7, #4]
   2dbe6:	681a      	ldr	r2, [r3, #0]
   2dbe8:	687b      	ldr	r3, [r7, #4]
   2dbea:	691b      	ldr	r3, [r3, #16]
   2dbec:	212f      	movs	r1, #47	; 0x2f
   2dbee:	187c      	adds	r4, r7, r1
   2dbf0:	0019      	movs	r1, r3
   2dbf2:	0010      	movs	r0, r2
   2dbf4:	4b3d      	ldr	r3, [pc, #244]	; (2dcec <dir_register+0x354>)
   2dbf6:	4798      	blx	r3
   2dbf8:	0003      	movs	r3, r0
   2dbfa:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2dbfc:	232f      	movs	r3, #47	; 0x2f
   2dbfe:	18fb      	adds	r3, r7, r3
   2dc00:	781b      	ldrb	r3, [r3, #0]
   2dc02:	2b00      	cmp	r3, #0
   2dc04:	d12b      	bne.n	2dc5e <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2dc06:	687b      	ldr	r3, [r7, #4]
   2dc08:	69d8      	ldr	r0, [r3, #28]
   2dc0a:	687b      	ldr	r3, [r7, #4]
   2dc0c:	6959      	ldr	r1, [r3, #20]
   2dc0e:	232a      	movs	r3, #42	; 0x2a
   2dc10:	18fb      	adds	r3, r7, r3
   2dc12:	881b      	ldrh	r3, [r3, #0]
   2dc14:	b2da      	uxtb	r2, r3
   2dc16:	231e      	movs	r3, #30
   2dc18:	18fb      	adds	r3, r7, r3
   2dc1a:	781b      	ldrb	r3, [r3, #0]
   2dc1c:	4c36      	ldr	r4, [pc, #216]	; (2dcf8 <dir_register+0x360>)
   2dc1e:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2dc20:	687b      	ldr	r3, [r7, #4]
   2dc22:	681b      	ldr	r3, [r3, #0]
   2dc24:	2201      	movs	r2, #1
   2dc26:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2dc28:	232f      	movs	r3, #47	; 0x2f
   2dc2a:	18fc      	adds	r4, r7, r3
   2dc2c:	687b      	ldr	r3, [r7, #4]
   2dc2e:	2100      	movs	r1, #0
   2dc30:	0018      	movs	r0, r3
   2dc32:	4b2f      	ldr	r3, [pc, #188]	; (2dcf0 <dir_register+0x358>)
   2dc34:	4798      	blx	r3
   2dc36:	0003      	movs	r3, r0
   2dc38:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2dc3a:	232f      	movs	r3, #47	; 0x2f
   2dc3c:	18fb      	adds	r3, r7, r3
   2dc3e:	781b      	ldrb	r3, [r3, #0]
   2dc40:	2b00      	cmp	r3, #0
   2dc42:	d10d      	bne.n	2dc60 <dir_register+0x2c8>
   2dc44:	232a      	movs	r3, #42	; 0x2a
   2dc46:	18fb      	adds	r3, r7, r3
   2dc48:	222a      	movs	r2, #42	; 0x2a
   2dc4a:	18ba      	adds	r2, r7, r2
   2dc4c:	8812      	ldrh	r2, [r2, #0]
   2dc4e:	3a01      	subs	r2, #1
   2dc50:	801a      	strh	r2, [r3, #0]
   2dc52:	232a      	movs	r3, #42	; 0x2a
   2dc54:	18fb      	adds	r3, r7, r3
   2dc56:	881b      	ldrh	r3, [r3, #0]
   2dc58:	2b00      	cmp	r3, #0
   2dc5a:	d1c3      	bne.n	2dbe4 <dir_register+0x24c>
   2dc5c:	e000      	b.n	2dc60 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2dc5e:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2dc60:	232f      	movs	r3, #47	; 0x2f
   2dc62:	18fb      	adds	r3, r7, r3
   2dc64:	781b      	ldrb	r3, [r3, #0]
   2dc66:	2b00      	cmp	r3, #0
   2dc68:	d12f      	bne.n	2dcca <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2dc6a:	687b      	ldr	r3, [r7, #4]
   2dc6c:	681a      	ldr	r2, [r3, #0]
   2dc6e:	687b      	ldr	r3, [r7, #4]
   2dc70:	691b      	ldr	r3, [r3, #16]
   2dc72:	212f      	movs	r1, #47	; 0x2f
   2dc74:	187c      	adds	r4, r7, r1
   2dc76:	0019      	movs	r1, r3
   2dc78:	0010      	movs	r0, r2
   2dc7a:	4b1c      	ldr	r3, [pc, #112]	; (2dcec <dir_register+0x354>)
   2dc7c:	4798      	blx	r3
   2dc7e:	0003      	movs	r3, r0
   2dc80:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2dc82:	232f      	movs	r3, #47	; 0x2f
   2dc84:	18fb      	adds	r3, r7, r3
   2dc86:	781b      	ldrb	r3, [r3, #0]
   2dc88:	2b00      	cmp	r3, #0
   2dc8a:	d11e      	bne.n	2dcca <dir_register+0x332>
			dir = dj->dir;
   2dc8c:	687b      	ldr	r3, [r7, #4]
   2dc8e:	695b      	ldr	r3, [r3, #20]
   2dc90:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2dc92:	69bb      	ldr	r3, [r7, #24]
   2dc94:	2220      	movs	r2, #32
   2dc96:	2100      	movs	r1, #0
   2dc98:	0018      	movs	r0, r3
   2dc9a:	4b18      	ldr	r3, [pc, #96]	; (2dcfc <dir_register+0x364>)
   2dc9c:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2dc9e:	687b      	ldr	r3, [r7, #4]
   2dca0:	6999      	ldr	r1, [r3, #24]
   2dca2:	69bb      	ldr	r3, [r7, #24]
   2dca4:	220b      	movs	r2, #11
   2dca6:	0018      	movs	r0, r3
   2dca8:	4b0b      	ldr	r3, [pc, #44]	; (2dcd8 <dir_register+0x340>)
   2dcaa:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2dcac:	69bb      	ldr	r3, [r7, #24]
   2dcae:	330c      	adds	r3, #12
   2dcb0:	001a      	movs	r2, r3
   2dcb2:	687b      	ldr	r3, [r7, #4]
   2dcb4:	699b      	ldr	r3, [r3, #24]
   2dcb6:	330b      	adds	r3, #11
   2dcb8:	781b      	ldrb	r3, [r3, #0]
   2dcba:	2118      	movs	r1, #24
   2dcbc:	400b      	ands	r3, r1
   2dcbe:	b2db      	uxtb	r3, r3
   2dcc0:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2dcc2:	687b      	ldr	r3, [r7, #4]
   2dcc4:	681b      	ldr	r3, [r3, #0]
   2dcc6:	2201      	movs	r2, #1
   2dcc8:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2dcca:	232f      	movs	r3, #47	; 0x2f
   2dccc:	18fb      	adds	r3, r7, r3
   2dcce:	781b      	ldrb	r3, [r3, #0]
}
   2dcd0:	0018      	movs	r0, r3
   2dcd2:	46bd      	mov	sp, r7
   2dcd4:	b00d      	add	sp, #52	; 0x34
   2dcd6:	bd90      	pop	{r4, r7, pc}
   2dcd8:	0002c7f1 	.word	0x0002c7f1
   2dcdc:	0002d64d 	.word	0x0002d64d
   2dce0:	0002d79d 	.word	0x0002d79d
   2dce4:	00033be9 	.word	0x00033be9
   2dce8:	0002d119 	.word	0x0002d119
   2dcec:	0002c8d5 	.word	0x0002c8d5
   2dcf0:	0002d249 	.word	0x0002d249
   2dcf4:	0002d74d 	.word	0x0002d74d
   2dcf8:	0002d53d 	.word	0x0002d53d
   2dcfc:	0002c829 	.word	0x0002c829

0002dd00 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2dd00:	b590      	push	{r4, r7, lr}
   2dd02:	b08b      	sub	sp, #44	; 0x2c
   2dd04:	af00      	add	r7, sp, #0
   2dd06:	6078      	str	r0, [r7, #4]
   2dd08:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2dd0a:	683b      	ldr	r3, [r7, #0]
   2dd0c:	681b      	ldr	r3, [r3, #0]
   2dd0e:	613b      	str	r3, [r7, #16]
   2dd10:	e002      	b.n	2dd18 <create_name+0x18>
   2dd12:	693b      	ldr	r3, [r7, #16]
   2dd14:	3301      	adds	r3, #1
   2dd16:	613b      	str	r3, [r7, #16]
   2dd18:	693b      	ldr	r3, [r7, #16]
   2dd1a:	781b      	ldrb	r3, [r3, #0]
   2dd1c:	2b2f      	cmp	r3, #47	; 0x2f
   2dd1e:	d0f8      	beq.n	2dd12 <create_name+0x12>
   2dd20:	693b      	ldr	r3, [r7, #16]
   2dd22:	781b      	ldrb	r3, [r3, #0]
   2dd24:	2b5c      	cmp	r3, #92	; 0x5c
   2dd26:	d0f4      	beq.n	2dd12 <create_name+0x12>
	lfn = dj->lfn;
   2dd28:	687b      	ldr	r3, [r7, #4]
   2dd2a:	69db      	ldr	r3, [r3, #28]
   2dd2c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2dd2e:	2300      	movs	r3, #0
   2dd30:	617b      	str	r3, [r7, #20]
   2dd32:	697b      	ldr	r3, [r7, #20]
   2dd34:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2dd36:	69bb      	ldr	r3, [r7, #24]
   2dd38:	1c5a      	adds	r2, r3, #1
   2dd3a:	61ba      	str	r2, [r7, #24]
   2dd3c:	693a      	ldr	r2, [r7, #16]
   2dd3e:	18d3      	adds	r3, r2, r3
   2dd40:	781a      	ldrb	r2, [r3, #0]
   2dd42:	2324      	movs	r3, #36	; 0x24
   2dd44:	18fb      	adds	r3, r7, r3
   2dd46:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2dd48:	2324      	movs	r3, #36	; 0x24
   2dd4a:	18fb      	adds	r3, r7, r3
   2dd4c:	881b      	ldrh	r3, [r3, #0]
   2dd4e:	2b1f      	cmp	r3, #31
   2dd50:	d944      	bls.n	2dddc <create_name+0xdc>
   2dd52:	2324      	movs	r3, #36	; 0x24
   2dd54:	18fb      	adds	r3, r7, r3
   2dd56:	881b      	ldrh	r3, [r3, #0]
   2dd58:	2b2f      	cmp	r3, #47	; 0x2f
   2dd5a:	d03f      	beq.n	2dddc <create_name+0xdc>
   2dd5c:	2324      	movs	r3, #36	; 0x24
   2dd5e:	18fb      	adds	r3, r7, r3
   2dd60:	881b      	ldrh	r3, [r3, #0]
   2dd62:	2b5c      	cmp	r3, #92	; 0x5c
   2dd64:	d03a      	beq.n	2dddc <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2dd66:	697b      	ldr	r3, [r7, #20]
   2dd68:	2bfe      	cmp	r3, #254	; 0xfe
   2dd6a:	d901      	bls.n	2dd70 <create_name+0x70>
			return FR_INVALID_NAME;
   2dd6c:	2306      	movs	r3, #6
   2dd6e:	e1e7      	b.n	2e140 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2dd70:	2324      	movs	r3, #36	; 0x24
   2dd72:	18fb      	adds	r3, r7, r3
   2dd74:	2224      	movs	r2, #36	; 0x24
   2dd76:	18ba      	adds	r2, r7, r2
   2dd78:	8812      	ldrh	r2, [r2, #0]
   2dd7a:	21ff      	movs	r1, #255	; 0xff
   2dd7c:	400a      	ands	r2, r1
   2dd7e:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2dd80:	2324      	movs	r3, #36	; 0x24
   2dd82:	18fc      	adds	r4, r7, r3
   2dd84:	2324      	movs	r3, #36	; 0x24
   2dd86:	18fb      	adds	r3, r7, r3
   2dd88:	881b      	ldrh	r3, [r3, #0]
   2dd8a:	2101      	movs	r1, #1
   2dd8c:	0018      	movs	r0, r3
   2dd8e:	4bba      	ldr	r3, [pc, #744]	; (2e078 <create_name+0x378>)
   2dd90:	4798      	blx	r3
   2dd92:	0003      	movs	r3, r0
   2dd94:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2dd96:	2324      	movs	r3, #36	; 0x24
   2dd98:	18fb      	adds	r3, r7, r3
   2dd9a:	881b      	ldrh	r3, [r3, #0]
   2dd9c:	2b00      	cmp	r3, #0
   2dd9e:	d101      	bne.n	2dda4 <create_name+0xa4>
   2dda0:	2306      	movs	r3, #6
   2dda2:	e1cd      	b.n	2e140 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2dda4:	2324      	movs	r3, #36	; 0x24
   2dda6:	18fb      	adds	r3, r7, r3
   2dda8:	881b      	ldrh	r3, [r3, #0]
   2ddaa:	2b7f      	cmp	r3, #127	; 0x7f
   2ddac:	d80b      	bhi.n	2ddc6 <create_name+0xc6>
   2ddae:	2324      	movs	r3, #36	; 0x24
   2ddb0:	18fb      	adds	r3, r7, r3
   2ddb2:	881a      	ldrh	r2, [r3, #0]
   2ddb4:	4bb1      	ldr	r3, [pc, #708]	; (2e07c <create_name+0x37c>)
   2ddb6:	0011      	movs	r1, r2
   2ddb8:	0018      	movs	r0, r3
   2ddba:	4bb1      	ldr	r3, [pc, #708]	; (2e080 <create_name+0x380>)
   2ddbc:	4798      	blx	r3
   2ddbe:	1e03      	subs	r3, r0, #0
   2ddc0:	d001      	beq.n	2ddc6 <create_name+0xc6>
			return FR_INVALID_NAME;
   2ddc2:	2306      	movs	r3, #6
   2ddc4:	e1bc      	b.n	2e140 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2ddc6:	697b      	ldr	r3, [r7, #20]
   2ddc8:	1c5a      	adds	r2, r3, #1
   2ddca:	617a      	str	r2, [r7, #20]
   2ddcc:	005b      	lsls	r3, r3, #1
   2ddce:	68fa      	ldr	r2, [r7, #12]
   2ddd0:	18d3      	adds	r3, r2, r3
   2ddd2:	2224      	movs	r2, #36	; 0x24
   2ddd4:	18ba      	adds	r2, r7, r2
   2ddd6:	8812      	ldrh	r2, [r2, #0]
   2ddd8:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2ddda:	e7ac      	b.n	2dd36 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2dddc:	693a      	ldr	r2, [r7, #16]
   2ddde:	69bb      	ldr	r3, [r7, #24]
   2dde0:	18d2      	adds	r2, r2, r3
   2dde2:	683b      	ldr	r3, [r7, #0]
   2dde4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2dde6:	2324      	movs	r3, #36	; 0x24
   2dde8:	18fb      	adds	r3, r7, r3
   2ddea:	881b      	ldrh	r3, [r3, #0]
   2ddec:	2b1f      	cmp	r3, #31
   2ddee:	d801      	bhi.n	2ddf4 <create_name+0xf4>
   2ddf0:	2204      	movs	r2, #4
   2ddf2:	e000      	b.n	2ddf6 <create_name+0xf6>
   2ddf4:	2200      	movs	r2, #0
   2ddf6:	2326      	movs	r3, #38	; 0x26
   2ddf8:	18fb      	adds	r3, r7, r3
   2ddfa:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2ddfc:	e017      	b.n	2de2e <create_name+0x12e>
		w = lfn[di-1];
   2ddfe:	697b      	ldr	r3, [r7, #20]
   2de00:	4aa0      	ldr	r2, [pc, #640]	; (2e084 <create_name+0x384>)
   2de02:	4694      	mov	ip, r2
   2de04:	4463      	add	r3, ip
   2de06:	005b      	lsls	r3, r3, #1
   2de08:	68fa      	ldr	r2, [r7, #12]
   2de0a:	18d2      	adds	r2, r2, r3
   2de0c:	2324      	movs	r3, #36	; 0x24
   2de0e:	18fb      	adds	r3, r7, r3
   2de10:	8812      	ldrh	r2, [r2, #0]
   2de12:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2de14:	2324      	movs	r3, #36	; 0x24
   2de16:	18fb      	adds	r3, r7, r3
   2de18:	881b      	ldrh	r3, [r3, #0]
   2de1a:	2b20      	cmp	r3, #32
   2de1c:	d004      	beq.n	2de28 <create_name+0x128>
   2de1e:	2324      	movs	r3, #36	; 0x24
   2de20:	18fb      	adds	r3, r7, r3
   2de22:	881b      	ldrh	r3, [r3, #0]
   2de24:	2b2e      	cmp	r3, #46	; 0x2e
   2de26:	d106      	bne.n	2de36 <create_name+0x136>
		di--;
   2de28:	697b      	ldr	r3, [r7, #20]
   2de2a:	3b01      	subs	r3, #1
   2de2c:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2de2e:	697b      	ldr	r3, [r7, #20]
   2de30:	2b00      	cmp	r3, #0
   2de32:	d1e4      	bne.n	2ddfe <create_name+0xfe>
   2de34:	e000      	b.n	2de38 <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2de36:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2de38:	697b      	ldr	r3, [r7, #20]
   2de3a:	2b00      	cmp	r3, #0
   2de3c:	d101      	bne.n	2de42 <create_name+0x142>
   2de3e:	2306      	movs	r3, #6
   2de40:	e17e      	b.n	2e140 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2de42:	697b      	ldr	r3, [r7, #20]
   2de44:	005b      	lsls	r3, r3, #1
   2de46:	68fa      	ldr	r2, [r7, #12]
   2de48:	18d3      	adds	r3, r2, r3
   2de4a:	2200      	movs	r2, #0
   2de4c:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2de4e:	687b      	ldr	r3, [r7, #4]
   2de50:	699b      	ldr	r3, [r3, #24]
   2de52:	220b      	movs	r2, #11
   2de54:	2120      	movs	r1, #32
   2de56:	0018      	movs	r0, r3
   2de58:	4b8b      	ldr	r3, [pc, #556]	; (2e088 <create_name+0x388>)
   2de5a:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2de5c:	2300      	movs	r3, #0
   2de5e:	61bb      	str	r3, [r7, #24]
   2de60:	e002      	b.n	2de68 <create_name+0x168>
   2de62:	69bb      	ldr	r3, [r7, #24]
   2de64:	3301      	adds	r3, #1
   2de66:	61bb      	str	r3, [r7, #24]
   2de68:	69bb      	ldr	r3, [r7, #24]
   2de6a:	005b      	lsls	r3, r3, #1
   2de6c:	68fa      	ldr	r2, [r7, #12]
   2de6e:	18d3      	adds	r3, r2, r3
   2de70:	881b      	ldrh	r3, [r3, #0]
   2de72:	2b20      	cmp	r3, #32
   2de74:	d0f5      	beq.n	2de62 <create_name+0x162>
   2de76:	69bb      	ldr	r3, [r7, #24]
   2de78:	005b      	lsls	r3, r3, #1
   2de7a:	68fa      	ldr	r2, [r7, #12]
   2de7c:	18d3      	adds	r3, r2, r3
   2de7e:	881b      	ldrh	r3, [r3, #0]
   2de80:	2b2e      	cmp	r3, #46	; 0x2e
   2de82:	d0ee      	beq.n	2de62 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2de84:	69bb      	ldr	r3, [r7, #24]
   2de86:	2b00      	cmp	r3, #0
   2de88:	d00b      	beq.n	2dea2 <create_name+0x1a2>
   2de8a:	2326      	movs	r3, #38	; 0x26
   2de8c:	18fb      	adds	r3, r7, r3
   2de8e:	2226      	movs	r2, #38	; 0x26
   2de90:	18ba      	adds	r2, r7, r2
   2de92:	7812      	ldrb	r2, [r2, #0]
   2de94:	2103      	movs	r1, #3
   2de96:	430a      	orrs	r2, r1
   2de98:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2de9a:	e002      	b.n	2dea2 <create_name+0x1a2>
   2de9c:	697b      	ldr	r3, [r7, #20]
   2de9e:	3b01      	subs	r3, #1
   2dea0:	617b      	str	r3, [r7, #20]
   2dea2:	697b      	ldr	r3, [r7, #20]
   2dea4:	2b00      	cmp	r3, #0
   2dea6:	d009      	beq.n	2debc <create_name+0x1bc>
   2dea8:	697b      	ldr	r3, [r7, #20]
   2deaa:	4a76      	ldr	r2, [pc, #472]	; (2e084 <create_name+0x384>)
   2deac:	4694      	mov	ip, r2
   2deae:	4463      	add	r3, ip
   2deb0:	005b      	lsls	r3, r3, #1
   2deb2:	68fa      	ldr	r2, [r7, #12]
   2deb4:	18d3      	adds	r3, r2, r3
   2deb6:	881b      	ldrh	r3, [r3, #0]
   2deb8:	2b2e      	cmp	r3, #46	; 0x2e
   2deba:	d1ef      	bne.n	2de9c <create_name+0x19c>

	b = i = 0; ni = 8;
   2debc:	2300      	movs	r3, #0
   2debe:	623b      	str	r3, [r7, #32]
   2dec0:	2327      	movs	r3, #39	; 0x27
   2dec2:	18fb      	adds	r3, r7, r3
   2dec4:	2200      	movs	r2, #0
   2dec6:	701a      	strb	r2, [r3, #0]
   2dec8:	2308      	movs	r3, #8
   2deca:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2decc:	69bb      	ldr	r3, [r7, #24]
   2dece:	1c5a      	adds	r2, r3, #1
   2ded0:	61ba      	str	r2, [r7, #24]
   2ded2:	005b      	lsls	r3, r3, #1
   2ded4:	68fa      	ldr	r2, [r7, #12]
   2ded6:	18d2      	adds	r2, r2, r3
   2ded8:	2324      	movs	r3, #36	; 0x24
   2deda:	18fb      	adds	r3, r7, r3
   2dedc:	8812      	ldrh	r2, [r2, #0]
   2dede:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2dee0:	2324      	movs	r3, #36	; 0x24
   2dee2:	18fb      	adds	r3, r7, r3
   2dee4:	881b      	ldrh	r3, [r3, #0]
   2dee6:	2b00      	cmp	r3, #0
   2dee8:	d100      	bne.n	2deec <create_name+0x1ec>
   2deea:	e0c3      	b.n	2e074 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2deec:	2324      	movs	r3, #36	; 0x24
   2deee:	18fb      	adds	r3, r7, r3
   2def0:	881b      	ldrh	r3, [r3, #0]
   2def2:	2b20      	cmp	r3, #32
   2def4:	d008      	beq.n	2df08 <create_name+0x208>
   2def6:	2324      	movs	r3, #36	; 0x24
   2def8:	18fb      	adds	r3, r7, r3
   2defa:	881b      	ldrh	r3, [r3, #0]
   2defc:	2b2e      	cmp	r3, #46	; 0x2e
   2defe:	d10c      	bne.n	2df1a <create_name+0x21a>
   2df00:	69ba      	ldr	r2, [r7, #24]
   2df02:	697b      	ldr	r3, [r7, #20]
   2df04:	429a      	cmp	r2, r3
   2df06:	d008      	beq.n	2df1a <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2df08:	2326      	movs	r3, #38	; 0x26
   2df0a:	18fb      	adds	r3, r7, r3
   2df0c:	2226      	movs	r2, #38	; 0x26
   2df0e:	18ba      	adds	r2, r7, r2
   2df10:	7812      	ldrb	r2, [r2, #0]
   2df12:	2103      	movs	r1, #3
   2df14:	430a      	orrs	r2, r1
   2df16:	701a      	strb	r2, [r3, #0]
   2df18:	e0ab      	b.n	2e072 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2df1a:	6a3a      	ldr	r2, [r7, #32]
   2df1c:	69fb      	ldr	r3, [r7, #28]
   2df1e:	429a      	cmp	r2, r3
   2df20:	d203      	bcs.n	2df2a <create_name+0x22a>
   2df22:	69ba      	ldr	r2, [r7, #24]
   2df24:	697b      	ldr	r3, [r7, #20]
   2df26:	429a      	cmp	r2, r3
   2df28:	d12a      	bne.n	2df80 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2df2a:	69fb      	ldr	r3, [r7, #28]
   2df2c:	2b0b      	cmp	r3, #11
   2df2e:	d108      	bne.n	2df42 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2df30:	2326      	movs	r3, #38	; 0x26
   2df32:	18fb      	adds	r3, r7, r3
   2df34:	2226      	movs	r2, #38	; 0x26
   2df36:	18ba      	adds	r2, r7, r2
   2df38:	7812      	ldrb	r2, [r2, #0]
   2df3a:	2103      	movs	r1, #3
   2df3c:	430a      	orrs	r2, r1
   2df3e:	701a      	strb	r2, [r3, #0]
   2df40:	e0a9      	b.n	2e096 <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2df42:	69ba      	ldr	r2, [r7, #24]
   2df44:	697b      	ldr	r3, [r7, #20]
   2df46:	429a      	cmp	r2, r3
   2df48:	d007      	beq.n	2df5a <create_name+0x25a>
   2df4a:	2326      	movs	r3, #38	; 0x26
   2df4c:	18fb      	adds	r3, r7, r3
   2df4e:	2226      	movs	r2, #38	; 0x26
   2df50:	18ba      	adds	r2, r7, r2
   2df52:	7812      	ldrb	r2, [r2, #0]
   2df54:	2103      	movs	r1, #3
   2df56:	430a      	orrs	r2, r1
   2df58:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2df5a:	69ba      	ldr	r2, [r7, #24]
   2df5c:	697b      	ldr	r3, [r7, #20]
   2df5e:	429a      	cmp	r2, r3
   2df60:	d900      	bls.n	2df64 <create_name+0x264>
   2df62:	e097      	b.n	2e094 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2df64:	697b      	ldr	r3, [r7, #20]
   2df66:	61bb      	str	r3, [r7, #24]
   2df68:	2308      	movs	r3, #8
   2df6a:	623b      	str	r3, [r7, #32]
   2df6c:	230b      	movs	r3, #11
   2df6e:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2df70:	2327      	movs	r3, #39	; 0x27
   2df72:	18fb      	adds	r3, r7, r3
   2df74:	2227      	movs	r2, #39	; 0x27
   2df76:	18ba      	adds	r2, r7, r2
   2df78:	7812      	ldrb	r2, [r2, #0]
   2df7a:	0092      	lsls	r2, r2, #2
   2df7c:	701a      	strb	r2, [r3, #0]
   2df7e:	e078      	b.n	2e072 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2df80:	2324      	movs	r3, #36	; 0x24
   2df82:	18fb      	adds	r3, r7, r3
   2df84:	881b      	ldrh	r3, [r3, #0]
   2df86:	2b7f      	cmp	r3, #127	; 0x7f
   2df88:	d920      	bls.n	2dfcc <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2df8a:	2324      	movs	r3, #36	; 0x24
   2df8c:	18fc      	adds	r4, r7, r3
   2df8e:	2324      	movs	r3, #36	; 0x24
   2df90:	18fb      	adds	r3, r7, r3
   2df92:	881b      	ldrh	r3, [r3, #0]
   2df94:	2100      	movs	r1, #0
   2df96:	0018      	movs	r0, r3
   2df98:	4b37      	ldr	r3, [pc, #220]	; (2e078 <create_name+0x378>)
   2df9a:	4798      	blx	r3
   2df9c:	0003      	movs	r3, r0
   2df9e:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2dfa0:	2324      	movs	r3, #36	; 0x24
   2dfa2:	18fb      	adds	r3, r7, r3
   2dfa4:	881b      	ldrh	r3, [r3, #0]
   2dfa6:	2b00      	cmp	r3, #0
   2dfa8:	d008      	beq.n	2dfbc <create_name+0x2bc>
   2dfaa:	2324      	movs	r3, #36	; 0x24
   2dfac:	18fb      	adds	r3, r7, r3
   2dfae:	881b      	ldrh	r3, [r3, #0]
   2dfb0:	3b80      	subs	r3, #128	; 0x80
   2dfb2:	4a36      	ldr	r2, [pc, #216]	; (2e08c <create_name+0x38c>)
   2dfb4:	5cd2      	ldrb	r2, [r2, r3]
   2dfb6:	2324      	movs	r3, #36	; 0x24
   2dfb8:	18fb      	adds	r3, r7, r3
   2dfba:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2dfbc:	2326      	movs	r3, #38	; 0x26
   2dfbe:	18fb      	adds	r3, r7, r3
   2dfc0:	2226      	movs	r2, #38	; 0x26
   2dfc2:	18ba      	adds	r2, r7, r2
   2dfc4:	7812      	ldrb	r2, [r2, #0]
   2dfc6:	2102      	movs	r1, #2
   2dfc8:	430a      	orrs	r2, r1
   2dfca:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2dfcc:	2324      	movs	r3, #36	; 0x24
   2dfce:	18fb      	adds	r3, r7, r3
   2dfd0:	881b      	ldrh	r3, [r3, #0]
   2dfd2:	2b00      	cmp	r3, #0
   2dfd4:	d009      	beq.n	2dfea <create_name+0x2ea>
   2dfd6:	2324      	movs	r3, #36	; 0x24
   2dfd8:	18fb      	adds	r3, r7, r3
   2dfda:	881a      	ldrh	r2, [r3, #0]
   2dfdc:	4b2c      	ldr	r3, [pc, #176]	; (2e090 <create_name+0x390>)
   2dfde:	0011      	movs	r1, r2
   2dfe0:	0018      	movs	r0, r3
   2dfe2:	4b27      	ldr	r3, [pc, #156]	; (2e080 <create_name+0x380>)
   2dfe4:	4798      	blx	r3
   2dfe6:	1e03      	subs	r3, r0, #0
   2dfe8:	d00c      	beq.n	2e004 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2dfea:	2324      	movs	r3, #36	; 0x24
   2dfec:	18fb      	adds	r3, r7, r3
   2dfee:	225f      	movs	r2, #95	; 0x5f
   2dff0:	801a      	strh	r2, [r3, #0]
   2dff2:	2326      	movs	r3, #38	; 0x26
   2dff4:	18fb      	adds	r3, r7, r3
   2dff6:	2226      	movs	r2, #38	; 0x26
   2dff8:	18ba      	adds	r2, r7, r2
   2dffa:	7812      	ldrb	r2, [r2, #0]
   2dffc:	2103      	movs	r1, #3
   2dffe:	430a      	orrs	r2, r1
   2e000:	701a      	strb	r2, [r3, #0]
   2e002:	e02b      	b.n	2e05c <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2e004:	2324      	movs	r3, #36	; 0x24
   2e006:	18fb      	adds	r3, r7, r3
   2e008:	881b      	ldrh	r3, [r3, #0]
   2e00a:	2b40      	cmp	r3, #64	; 0x40
   2e00c:	d90d      	bls.n	2e02a <create_name+0x32a>
   2e00e:	2324      	movs	r3, #36	; 0x24
   2e010:	18fb      	adds	r3, r7, r3
   2e012:	881b      	ldrh	r3, [r3, #0]
   2e014:	2b5a      	cmp	r3, #90	; 0x5a
   2e016:	d808      	bhi.n	2e02a <create_name+0x32a>
					b |= 2;
   2e018:	2327      	movs	r3, #39	; 0x27
   2e01a:	18fb      	adds	r3, r7, r3
   2e01c:	2227      	movs	r2, #39	; 0x27
   2e01e:	18ba      	adds	r2, r7, r2
   2e020:	7812      	ldrb	r2, [r2, #0]
   2e022:	2102      	movs	r1, #2
   2e024:	430a      	orrs	r2, r1
   2e026:	701a      	strb	r2, [r3, #0]
   2e028:	e018      	b.n	2e05c <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2e02a:	2324      	movs	r3, #36	; 0x24
   2e02c:	18fb      	adds	r3, r7, r3
   2e02e:	881b      	ldrh	r3, [r3, #0]
   2e030:	2b60      	cmp	r3, #96	; 0x60
   2e032:	d913      	bls.n	2e05c <create_name+0x35c>
   2e034:	2324      	movs	r3, #36	; 0x24
   2e036:	18fb      	adds	r3, r7, r3
   2e038:	881b      	ldrh	r3, [r3, #0]
   2e03a:	2b7a      	cmp	r3, #122	; 0x7a
   2e03c:	d80e      	bhi.n	2e05c <create_name+0x35c>
						b |= 1; w -= 0x20;
   2e03e:	2327      	movs	r3, #39	; 0x27
   2e040:	18fb      	adds	r3, r7, r3
   2e042:	2227      	movs	r2, #39	; 0x27
   2e044:	18ba      	adds	r2, r7, r2
   2e046:	7812      	ldrb	r2, [r2, #0]
   2e048:	2101      	movs	r1, #1
   2e04a:	430a      	orrs	r2, r1
   2e04c:	701a      	strb	r2, [r3, #0]
   2e04e:	2324      	movs	r3, #36	; 0x24
   2e050:	18fb      	adds	r3, r7, r3
   2e052:	2224      	movs	r2, #36	; 0x24
   2e054:	18ba      	adds	r2, r7, r2
   2e056:	8812      	ldrh	r2, [r2, #0]
   2e058:	3a20      	subs	r2, #32
   2e05a:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2e05c:	687b      	ldr	r3, [r7, #4]
   2e05e:	699a      	ldr	r2, [r3, #24]
   2e060:	6a3b      	ldr	r3, [r7, #32]
   2e062:	1c59      	adds	r1, r3, #1
   2e064:	6239      	str	r1, [r7, #32]
   2e066:	18d3      	adds	r3, r2, r3
   2e068:	2224      	movs	r2, #36	; 0x24
   2e06a:	18ba      	adds	r2, r7, r2
   2e06c:	8812      	ldrh	r2, [r2, #0]
   2e06e:	b2d2      	uxtb	r2, r2
   2e070:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2e072:	e72b      	b.n	2decc <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2e074:	46c0      	nop			; (mov r8, r8)
   2e076:	e00e      	b.n	2e096 <create_name+0x396>
   2e078:	0002f439 	.word	0x0002f439
   2e07c:	0003b430 	.word	0x0003b430
   2e080:	0002c8a3 	.word	0x0002c8a3
   2e084:	7fffffff 	.word	0x7fffffff
   2e088:	0002c829 	.word	0x0002c829
   2e08c:	0003b478 	.word	0x0003b478
   2e090:	0003b43c 	.word	0x0003b43c
			if (si > di) break;			/* No extension */
   2e094:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2e096:	687b      	ldr	r3, [r7, #4]
   2e098:	699b      	ldr	r3, [r3, #24]
   2e09a:	781b      	ldrb	r3, [r3, #0]
   2e09c:	2be5      	cmp	r3, #229	; 0xe5
   2e09e:	d103      	bne.n	2e0a8 <create_name+0x3a8>
   2e0a0:	687b      	ldr	r3, [r7, #4]
   2e0a2:	699b      	ldr	r3, [r3, #24]
   2e0a4:	2205      	movs	r2, #5
   2e0a6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2e0a8:	69fb      	ldr	r3, [r7, #28]
   2e0aa:	2b08      	cmp	r3, #8
   2e0ac:	d106      	bne.n	2e0bc <create_name+0x3bc>
   2e0ae:	2327      	movs	r3, #39	; 0x27
   2e0b0:	18fb      	adds	r3, r7, r3
   2e0b2:	2227      	movs	r2, #39	; 0x27
   2e0b4:	18ba      	adds	r2, r7, r2
   2e0b6:	7812      	ldrb	r2, [r2, #0]
   2e0b8:	0092      	lsls	r2, r2, #2
   2e0ba:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2e0bc:	2327      	movs	r3, #39	; 0x27
   2e0be:	18fb      	adds	r3, r7, r3
   2e0c0:	781b      	ldrb	r3, [r3, #0]
   2e0c2:	220c      	movs	r2, #12
   2e0c4:	4013      	ands	r3, r2
   2e0c6:	2b0c      	cmp	r3, #12
   2e0c8:	d006      	beq.n	2e0d8 <create_name+0x3d8>
   2e0ca:	2327      	movs	r3, #39	; 0x27
   2e0cc:	18fb      	adds	r3, r7, r3
   2e0ce:	781b      	ldrb	r3, [r3, #0]
   2e0d0:	2203      	movs	r2, #3
   2e0d2:	4013      	ands	r3, r2
   2e0d4:	2b03      	cmp	r3, #3
   2e0d6:	d107      	bne.n	2e0e8 <create_name+0x3e8>
		cf |= NS_LFN;
   2e0d8:	2326      	movs	r3, #38	; 0x26
   2e0da:	18fb      	adds	r3, r7, r3
   2e0dc:	2226      	movs	r2, #38	; 0x26
   2e0de:	18ba      	adds	r2, r7, r2
   2e0e0:	7812      	ldrb	r2, [r2, #0]
   2e0e2:	2102      	movs	r1, #2
   2e0e4:	430a      	orrs	r2, r1
   2e0e6:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2e0e8:	2326      	movs	r3, #38	; 0x26
   2e0ea:	18fb      	adds	r3, r7, r3
   2e0ec:	781b      	ldrb	r3, [r3, #0]
   2e0ee:	2202      	movs	r2, #2
   2e0f0:	4013      	ands	r3, r2
   2e0f2:	d11d      	bne.n	2e130 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2e0f4:	2327      	movs	r3, #39	; 0x27
   2e0f6:	18fb      	adds	r3, r7, r3
   2e0f8:	781b      	ldrb	r3, [r3, #0]
   2e0fa:	2203      	movs	r2, #3
   2e0fc:	4013      	ands	r3, r2
   2e0fe:	2b01      	cmp	r3, #1
   2e100:	d107      	bne.n	2e112 <create_name+0x412>
   2e102:	2326      	movs	r3, #38	; 0x26
   2e104:	18fb      	adds	r3, r7, r3
   2e106:	2226      	movs	r2, #38	; 0x26
   2e108:	18ba      	adds	r2, r7, r2
   2e10a:	7812      	ldrb	r2, [r2, #0]
   2e10c:	2110      	movs	r1, #16
   2e10e:	430a      	orrs	r2, r1
   2e110:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2e112:	2327      	movs	r3, #39	; 0x27
   2e114:	18fb      	adds	r3, r7, r3
   2e116:	781b      	ldrb	r3, [r3, #0]
   2e118:	220c      	movs	r2, #12
   2e11a:	4013      	ands	r3, r2
   2e11c:	2b04      	cmp	r3, #4
   2e11e:	d107      	bne.n	2e130 <create_name+0x430>
   2e120:	2326      	movs	r3, #38	; 0x26
   2e122:	18fb      	adds	r3, r7, r3
   2e124:	2226      	movs	r2, #38	; 0x26
   2e126:	18ba      	adds	r2, r7, r2
   2e128:	7812      	ldrb	r2, [r2, #0]
   2e12a:	2108      	movs	r1, #8
   2e12c:	430a      	orrs	r2, r1
   2e12e:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2e130:	687b      	ldr	r3, [r7, #4]
   2e132:	699b      	ldr	r3, [r3, #24]
   2e134:	330b      	adds	r3, #11
   2e136:	2226      	movs	r2, #38	; 0x26
   2e138:	18ba      	adds	r2, r7, r2
   2e13a:	7812      	ldrb	r2, [r2, #0]
   2e13c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2e13e:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2e140:	0018      	movs	r0, r3
   2e142:	46bd      	mov	sp, r7
   2e144:	b00b      	add	sp, #44	; 0x2c
   2e146:	bd90      	pop	{r4, r7, pc}

0002e148 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2e148:	b590      	push	{r4, r7, lr}
   2e14a:	b085      	sub	sp, #20
   2e14c:	af00      	add	r7, sp, #0
   2e14e:	6078      	str	r0, [r7, #4]
   2e150:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2e152:	683b      	ldr	r3, [r7, #0]
   2e154:	781b      	ldrb	r3, [r3, #0]
   2e156:	2b2f      	cmp	r3, #47	; 0x2f
   2e158:	d003      	beq.n	2e162 <follow_path+0x1a>
   2e15a:	683b      	ldr	r3, [r7, #0]
   2e15c:	781b      	ldrb	r3, [r3, #0]
   2e15e:	2b5c      	cmp	r3, #92	; 0x5c
   2e160:	d102      	bne.n	2e168 <follow_path+0x20>
		path++;
   2e162:	683b      	ldr	r3, [r7, #0]
   2e164:	3301      	adds	r3, #1
   2e166:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2e168:	687b      	ldr	r3, [r7, #4]
   2e16a:	2200      	movs	r2, #0
   2e16c:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2e16e:	683b      	ldr	r3, [r7, #0]
   2e170:	781b      	ldrb	r3, [r3, #0]
   2e172:	2b1f      	cmp	r3, #31
   2e174:	d80c      	bhi.n	2e190 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2e176:	230f      	movs	r3, #15
   2e178:	18fc      	adds	r4, r7, r3
   2e17a:	687b      	ldr	r3, [r7, #4]
   2e17c:	2100      	movs	r1, #0
   2e17e:	0018      	movs	r0, r3
   2e180:	4b3c      	ldr	r3, [pc, #240]	; (2e274 <follow_path+0x12c>)
   2e182:	4798      	blx	r3
   2e184:	0003      	movs	r3, r0
   2e186:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2e188:	687b      	ldr	r3, [r7, #4]
   2e18a:	2200      	movs	r2, #0
   2e18c:	615a      	str	r2, [r3, #20]
   2e18e:	e06a      	b.n	2e266 <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2e190:	230f      	movs	r3, #15
   2e192:	18fc      	adds	r4, r7, r3
   2e194:	003a      	movs	r2, r7
   2e196:	687b      	ldr	r3, [r7, #4]
   2e198:	0011      	movs	r1, r2
   2e19a:	0018      	movs	r0, r3
   2e19c:	4b36      	ldr	r3, [pc, #216]	; (2e278 <follow_path+0x130>)
   2e19e:	4798      	blx	r3
   2e1a0:	0003      	movs	r3, r0
   2e1a2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2e1a4:	230f      	movs	r3, #15
   2e1a6:	18fb      	adds	r3, r7, r3
   2e1a8:	781b      	ldrb	r3, [r3, #0]
   2e1aa:	2b00      	cmp	r3, #0
   2e1ac:	d154      	bne.n	2e258 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2e1ae:	230f      	movs	r3, #15
   2e1b0:	18fc      	adds	r4, r7, r3
   2e1b2:	687b      	ldr	r3, [r7, #4]
   2e1b4:	0018      	movs	r0, r3
   2e1b6:	4b31      	ldr	r3, [pc, #196]	; (2e27c <follow_path+0x134>)
   2e1b8:	4798      	blx	r3
   2e1ba:	0003      	movs	r3, r0
   2e1bc:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2e1be:	687b      	ldr	r3, [r7, #4]
   2e1c0:	699a      	ldr	r2, [r3, #24]
   2e1c2:	230e      	movs	r3, #14
   2e1c4:	18fb      	adds	r3, r7, r3
   2e1c6:	7ad2      	ldrb	r2, [r2, #11]
   2e1c8:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2e1ca:	230f      	movs	r3, #15
   2e1cc:	18fb      	adds	r3, r7, r3
   2e1ce:	781b      	ldrb	r3, [r3, #0]
   2e1d0:	2b00      	cmp	r3, #0
   2e1d2:	d00f      	beq.n	2e1f4 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2e1d4:	230f      	movs	r3, #15
   2e1d6:	18fb      	adds	r3, r7, r3
   2e1d8:	781b      	ldrb	r3, [r3, #0]
   2e1da:	2b04      	cmp	r3, #4
   2e1dc:	d13e      	bne.n	2e25c <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2e1de:	230e      	movs	r3, #14
   2e1e0:	18fb      	adds	r3, r7, r3
   2e1e2:	781b      	ldrb	r3, [r3, #0]
   2e1e4:	2204      	movs	r2, #4
   2e1e6:	4013      	ands	r3, r2
   2e1e8:	d13a      	bne.n	2e260 <follow_path+0x118>
   2e1ea:	230f      	movs	r3, #15
   2e1ec:	18fb      	adds	r3, r7, r3
   2e1ee:	2205      	movs	r2, #5
   2e1f0:	701a      	strb	r2, [r3, #0]
				}
				break;
   2e1f2:	e035      	b.n	2e260 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2e1f4:	230e      	movs	r3, #14
   2e1f6:	18fb      	adds	r3, r7, r3
   2e1f8:	781b      	ldrb	r3, [r3, #0]
   2e1fa:	2204      	movs	r2, #4
   2e1fc:	4013      	ands	r3, r2
   2e1fe:	d131      	bne.n	2e264 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2e200:	687b      	ldr	r3, [r7, #4]
   2e202:	695b      	ldr	r3, [r3, #20]
   2e204:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2e206:	68bb      	ldr	r3, [r7, #8]
   2e208:	330b      	adds	r3, #11
   2e20a:	781b      	ldrb	r3, [r3, #0]
   2e20c:	001a      	movs	r2, r3
   2e20e:	2310      	movs	r3, #16
   2e210:	4013      	ands	r3, r2
   2e212:	d104      	bne.n	2e21e <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2e214:	230f      	movs	r3, #15
   2e216:	18fb      	adds	r3, r7, r3
   2e218:	2205      	movs	r2, #5
   2e21a:	701a      	strb	r2, [r3, #0]
   2e21c:	e023      	b.n	2e266 <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2e21e:	68bb      	ldr	r3, [r7, #8]
   2e220:	3315      	adds	r3, #21
   2e222:	781b      	ldrb	r3, [r3, #0]
   2e224:	021b      	lsls	r3, r3, #8
   2e226:	b21a      	sxth	r2, r3
   2e228:	68bb      	ldr	r3, [r7, #8]
   2e22a:	3314      	adds	r3, #20
   2e22c:	781b      	ldrb	r3, [r3, #0]
   2e22e:	b21b      	sxth	r3, r3
   2e230:	4313      	orrs	r3, r2
   2e232:	b21b      	sxth	r3, r3
   2e234:	b29b      	uxth	r3, r3
   2e236:	041b      	lsls	r3, r3, #16
   2e238:	68ba      	ldr	r2, [r7, #8]
   2e23a:	321b      	adds	r2, #27
   2e23c:	7812      	ldrb	r2, [r2, #0]
   2e23e:	0212      	lsls	r2, r2, #8
   2e240:	b211      	sxth	r1, r2
   2e242:	68ba      	ldr	r2, [r7, #8]
   2e244:	321a      	adds	r2, #26
   2e246:	7812      	ldrb	r2, [r2, #0]
   2e248:	b212      	sxth	r2, r2
   2e24a:	430a      	orrs	r2, r1
   2e24c:	b212      	sxth	r2, r2
   2e24e:	b292      	uxth	r2, r2
   2e250:	431a      	orrs	r2, r3
   2e252:	687b      	ldr	r3, [r7, #4]
   2e254:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2e256:	e79b      	b.n	2e190 <follow_path+0x48>
			if (res != FR_OK) break;
   2e258:	46c0      	nop			; (mov r8, r8)
   2e25a:	e004      	b.n	2e266 <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2e25c:	46c0      	nop			; (mov r8, r8)
   2e25e:	e002      	b.n	2e266 <follow_path+0x11e>
				break;
   2e260:	46c0      	nop			; (mov r8, r8)
   2e262:	e000      	b.n	2e266 <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2e264:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2e266:	230f      	movs	r3, #15
   2e268:	18fb      	adds	r3, r7, r3
   2e26a:	781b      	ldrb	r3, [r3, #0]
}
   2e26c:	0018      	movs	r0, r3
   2e26e:	46bd      	mov	sp, r7
   2e270:	b005      	add	sp, #20
   2e272:	bd90      	pop	{r4, r7, pc}
   2e274:	0002d119 	.word	0x0002d119
   2e278:	0002dd01 	.word	0x0002dd01
   2e27c:	0002d79d 	.word	0x0002d79d

0002e280 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2e280:	b590      	push	{r4, r7, lr}
   2e282:	b083      	sub	sp, #12
   2e284:	af00      	add	r7, sp, #0
   2e286:	6078      	str	r0, [r7, #4]
   2e288:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2e28a:	687b      	ldr	r3, [r7, #4]
   2e28c:	7858      	ldrb	r0, [r3, #1]
   2e28e:	687b      	ldr	r3, [r7, #4]
   2e290:	3330      	adds	r3, #48	; 0x30
   2e292:	0019      	movs	r1, r3
   2e294:	683a      	ldr	r2, [r7, #0]
   2e296:	2301      	movs	r3, #1
   2e298:	4c2a      	ldr	r4, [pc, #168]	; (2e344 <check_fs+0xc4>)
   2e29a:	47a0      	blx	r4
   2e29c:	1e03      	subs	r3, r0, #0
   2e29e:	d001      	beq.n	2e2a4 <check_fs+0x24>
		return 3;
   2e2a0:	2303      	movs	r3, #3
   2e2a2:	e04b      	b.n	2e33c <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2e2a4:	687b      	ldr	r3, [r7, #4]
   2e2a6:	4a28      	ldr	r2, [pc, #160]	; (2e348 <check_fs+0xc8>)
   2e2a8:	4694      	mov	ip, r2
   2e2aa:	4463      	add	r3, ip
   2e2ac:	3301      	adds	r3, #1
   2e2ae:	781b      	ldrb	r3, [r3, #0]
   2e2b0:	021b      	lsls	r3, r3, #8
   2e2b2:	b21a      	sxth	r2, r3
   2e2b4:	687b      	ldr	r3, [r7, #4]
   2e2b6:	4924      	ldr	r1, [pc, #144]	; (2e348 <check_fs+0xc8>)
   2e2b8:	5c5b      	ldrb	r3, [r3, r1]
   2e2ba:	b21b      	sxth	r3, r3
   2e2bc:	4313      	orrs	r3, r2
   2e2be:	b21b      	sxth	r3, r3
   2e2c0:	4a22      	ldr	r2, [pc, #136]	; (2e34c <check_fs+0xcc>)
   2e2c2:	4293      	cmp	r3, r2
   2e2c4:	d001      	beq.n	2e2ca <check_fs+0x4a>
		return 2;
   2e2c6:	2302      	movs	r3, #2
   2e2c8:	e038      	b.n	2e33c <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2e2ca:	687b      	ldr	r3, [r7, #4]
   2e2cc:	3366      	adds	r3, #102	; 0x66
   2e2ce:	3303      	adds	r3, #3
   2e2d0:	781b      	ldrb	r3, [r3, #0]
   2e2d2:	061a      	lsls	r2, r3, #24
   2e2d4:	687b      	ldr	r3, [r7, #4]
   2e2d6:	3366      	adds	r3, #102	; 0x66
   2e2d8:	3302      	adds	r3, #2
   2e2da:	781b      	ldrb	r3, [r3, #0]
   2e2dc:	041b      	lsls	r3, r3, #16
   2e2de:	4313      	orrs	r3, r2
   2e2e0:	687a      	ldr	r2, [r7, #4]
   2e2e2:	3266      	adds	r2, #102	; 0x66
   2e2e4:	3201      	adds	r2, #1
   2e2e6:	7812      	ldrb	r2, [r2, #0]
   2e2e8:	0212      	lsls	r2, r2, #8
   2e2ea:	4313      	orrs	r3, r2
   2e2ec:	687a      	ldr	r2, [r7, #4]
   2e2ee:	2166      	movs	r1, #102	; 0x66
   2e2f0:	5c52      	ldrb	r2, [r2, r1]
   2e2f2:	4313      	orrs	r3, r2
   2e2f4:	021b      	lsls	r3, r3, #8
   2e2f6:	0a1b      	lsrs	r3, r3, #8
   2e2f8:	4a15      	ldr	r2, [pc, #84]	; (2e350 <check_fs+0xd0>)
   2e2fa:	4293      	cmp	r3, r2
   2e2fc:	d101      	bne.n	2e302 <check_fs+0x82>
		return 0;
   2e2fe:	2300      	movs	r3, #0
   2e300:	e01c      	b.n	2e33c <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2e302:	687b      	ldr	r3, [r7, #4]
   2e304:	3382      	adds	r3, #130	; 0x82
   2e306:	3303      	adds	r3, #3
   2e308:	781b      	ldrb	r3, [r3, #0]
   2e30a:	061a      	lsls	r2, r3, #24
   2e30c:	687b      	ldr	r3, [r7, #4]
   2e30e:	3382      	adds	r3, #130	; 0x82
   2e310:	3302      	adds	r3, #2
   2e312:	781b      	ldrb	r3, [r3, #0]
   2e314:	041b      	lsls	r3, r3, #16
   2e316:	4313      	orrs	r3, r2
   2e318:	687a      	ldr	r2, [r7, #4]
   2e31a:	3282      	adds	r2, #130	; 0x82
   2e31c:	3201      	adds	r2, #1
   2e31e:	7812      	ldrb	r2, [r2, #0]
   2e320:	0212      	lsls	r2, r2, #8
   2e322:	4313      	orrs	r3, r2
   2e324:	687a      	ldr	r2, [r7, #4]
   2e326:	2182      	movs	r1, #130	; 0x82
   2e328:	5c52      	ldrb	r2, [r2, r1]
   2e32a:	4313      	orrs	r3, r2
   2e32c:	021b      	lsls	r3, r3, #8
   2e32e:	0a1b      	lsrs	r3, r3, #8
   2e330:	4a07      	ldr	r2, [pc, #28]	; (2e350 <check_fs+0xd0>)
   2e332:	4293      	cmp	r3, r2
   2e334:	d101      	bne.n	2e33a <check_fs+0xba>
		return 0;
   2e336:	2300      	movs	r3, #0
   2e338:	e000      	b.n	2e33c <check_fs+0xbc>

	return 1;
   2e33a:	2301      	movs	r3, #1
}
   2e33c:	0018      	movs	r0, r3
   2e33e:	46bd      	mov	sp, r7
   2e340:	b003      	add	sp, #12
   2e342:	bd90      	pop	{r4, r7, pc}
   2e344:	0002c4e9 	.word	0x0002c4e9
   2e348:	0000022e 	.word	0x0000022e
   2e34c:	ffffaa55 	.word	0xffffaa55
   2e350:	00544146 	.word	0x00544146

0002e354 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2e354:	b590      	push	{r4, r7, lr}
   2e356:	b093      	sub	sp, #76	; 0x4c
   2e358:	af00      	add	r7, sp, #0
   2e35a:	60f8      	str	r0, [r7, #12]
   2e35c:	60b9      	str	r1, [r7, #8]
   2e35e:	1dfb      	adds	r3, r7, #7
   2e360:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2e362:	68fb      	ldr	r3, [r7, #12]
   2e364:	681b      	ldr	r3, [r3, #0]
   2e366:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2e368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2e36a:	781b      	ldrb	r3, [r3, #0]
   2e36c:	3b30      	subs	r3, #48	; 0x30
   2e36e:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2e370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e372:	2b09      	cmp	r3, #9
   2e374:	d80b      	bhi.n	2e38e <chk_mounted+0x3a>
   2e376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2e378:	3301      	adds	r3, #1
   2e37a:	781b      	ldrb	r3, [r3, #0]
   2e37c:	2b3a      	cmp	r3, #58	; 0x3a
   2e37e:	d106      	bne.n	2e38e <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2e380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2e382:	3302      	adds	r3, #2
   2e384:	62fb      	str	r3, [r7, #44]	; 0x2c
   2e386:	68fb      	ldr	r3, [r7, #12]
   2e388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2e38a:	601a      	str	r2, [r3, #0]
   2e38c:	e001      	b.n	2e392 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2e38e:	2300      	movs	r3, #0
   2e390:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2e392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e394:	2b07      	cmp	r3, #7
   2e396:	d901      	bls.n	2e39c <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2e398:	230b      	movs	r3, #11
   2e39a:	e2af      	b.n	2e8fc <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2e39c:	4bc5      	ldr	r3, [pc, #788]	; (2e6b4 <chk_mounted+0x360>)
   2e39e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2e3a0:	0092      	lsls	r2, r2, #2
   2e3a2:	58d3      	ldr	r3, [r2, r3]
   2e3a4:	62bb      	str	r3, [r7, #40]	; 0x28
   2e3a6:	68bb      	ldr	r3, [r7, #8]
   2e3a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e3aa:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2e3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3ae:	2b00      	cmp	r3, #0
   2e3b0:	d101      	bne.n	2e3b6 <chk_mounted+0x62>
   2e3b2:	230c      	movs	r3, #12
   2e3b4:	e2a2      	b.n	2e8fc <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2e3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3b8:	781b      	ldrb	r3, [r3, #0]
   2e3ba:	2b00      	cmp	r3, #0
   2e3bc:	d01c      	beq.n	2e3f8 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2e3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3c0:	785b      	ldrb	r3, [r3, #1]
   2e3c2:	2227      	movs	r2, #39	; 0x27
   2e3c4:	18bc      	adds	r4, r7, r2
   2e3c6:	0018      	movs	r0, r3
   2e3c8:	4bbb      	ldr	r3, [pc, #748]	; (2e6b8 <chk_mounted+0x364>)
   2e3ca:	4798      	blx	r3
   2e3cc:	0003      	movs	r3, r0
   2e3ce:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2e3d0:	2327      	movs	r3, #39	; 0x27
   2e3d2:	18fb      	adds	r3, r7, r3
   2e3d4:	781b      	ldrb	r3, [r3, #0]
   2e3d6:	2201      	movs	r2, #1
   2e3d8:	4013      	ands	r3, r2
   2e3da:	d10d      	bne.n	2e3f8 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2e3dc:	1dfb      	adds	r3, r7, #7
   2e3de:	781b      	ldrb	r3, [r3, #0]
   2e3e0:	2b00      	cmp	r3, #0
   2e3e2:	d007      	beq.n	2e3f4 <chk_mounted+0xa0>
   2e3e4:	2327      	movs	r3, #39	; 0x27
   2e3e6:	18fb      	adds	r3, r7, r3
   2e3e8:	781b      	ldrb	r3, [r3, #0]
   2e3ea:	2204      	movs	r2, #4
   2e3ec:	4013      	ands	r3, r2
   2e3ee:	d001      	beq.n	2e3f4 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2e3f0:	230a      	movs	r3, #10
   2e3f2:	e283      	b.n	2e8fc <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2e3f4:	2300      	movs	r3, #0
   2e3f6:	e281      	b.n	2e8fc <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2e3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3fa:	2200      	movs	r2, #0
   2e3fc:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2e3fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e400:	b2da      	uxtb	r2, r3
   2e402:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e404:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2e406:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e408:	785b      	ldrb	r3, [r3, #1]
   2e40a:	2227      	movs	r2, #39	; 0x27
   2e40c:	18bc      	adds	r4, r7, r2
   2e40e:	0018      	movs	r0, r3
   2e410:	4baa      	ldr	r3, [pc, #680]	; (2e6bc <chk_mounted+0x368>)
   2e412:	4798      	blx	r3
   2e414:	0003      	movs	r3, r0
   2e416:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2e418:	2327      	movs	r3, #39	; 0x27
   2e41a:	18fb      	adds	r3, r7, r3
   2e41c:	781b      	ldrb	r3, [r3, #0]
   2e41e:	2201      	movs	r2, #1
   2e420:	4013      	ands	r3, r2
   2e422:	d001      	beq.n	2e428 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2e424:	2303      	movs	r3, #3
   2e426:	e269      	b.n	2e8fc <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2e428:	1dfb      	adds	r3, r7, #7
   2e42a:	781b      	ldrb	r3, [r3, #0]
   2e42c:	2b00      	cmp	r3, #0
   2e42e:	d007      	beq.n	2e440 <chk_mounted+0xec>
   2e430:	2327      	movs	r3, #39	; 0x27
   2e432:	18fb      	adds	r3, r7, r3
   2e434:	781b      	ldrb	r3, [r3, #0]
   2e436:	2204      	movs	r2, #4
   2e438:	4013      	ands	r3, r2
   2e43a:	d001      	beq.n	2e440 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2e43c:	230a      	movs	r3, #10
   2e43e:	e25d      	b.n	2e8fc <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2e440:	2300      	movs	r3, #0
   2e442:	63fb      	str	r3, [r7, #60]	; 0x3c
   2e444:	2347      	movs	r3, #71	; 0x47
   2e446:	18fc      	adds	r4, r7, r3
   2e448:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2e44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e44c:	0011      	movs	r1, r2
   2e44e:	0018      	movs	r0, r3
   2e450:	4b9b      	ldr	r3, [pc, #620]	; (2e6c0 <chk_mounted+0x36c>)
   2e452:	4798      	blx	r3
   2e454:	0003      	movs	r3, r0
   2e456:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2e458:	2347      	movs	r3, #71	; 0x47
   2e45a:	18fb      	adds	r3, r7, r3
   2e45c:	781b      	ldrb	r3, [r3, #0]
   2e45e:	2b01      	cmp	r3, #1
   2e460:	d13b      	bne.n	2e4da <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2e462:	2346      	movs	r3, #70	; 0x46
   2e464:	18fb      	adds	r3, r7, r3
   2e466:	2200      	movs	r2, #0
   2e468:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2e46a:	2346      	movs	r3, #70	; 0x46
   2e46c:	18fb      	adds	r3, r7, r3
   2e46e:	781b      	ldrb	r3, [r3, #0]
   2e470:	2b00      	cmp	r3, #0
   2e472:	d006      	beq.n	2e482 <chk_mounted+0x12e>
   2e474:	2346      	movs	r3, #70	; 0x46
   2e476:	18fb      	adds	r3, r7, r3
   2e478:	781a      	ldrb	r2, [r3, #0]
   2e47a:	2346      	movs	r3, #70	; 0x46
   2e47c:	18fb      	adds	r3, r7, r3
   2e47e:	3a01      	subs	r2, #1
   2e480:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2e482:	2346      	movs	r3, #70	; 0x46
   2e484:	18fb      	adds	r3, r7, r3
   2e486:	781b      	ldrb	r3, [r3, #0]
   2e488:	011b      	lsls	r3, r3, #4
   2e48a:	33bf      	adds	r3, #191	; 0xbf
   2e48c:	33ff      	adds	r3, #255	; 0xff
   2e48e:	3330      	adds	r3, #48	; 0x30
   2e490:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e492:	18d3      	adds	r3, r2, r3
   2e494:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2e496:	6a3b      	ldr	r3, [r7, #32]
   2e498:	3304      	adds	r3, #4
   2e49a:	781b      	ldrb	r3, [r3, #0]
   2e49c:	2b00      	cmp	r3, #0
   2e49e:	d01c      	beq.n	2e4da <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2e4a0:	6a3b      	ldr	r3, [r7, #32]
   2e4a2:	330b      	adds	r3, #11
   2e4a4:	781b      	ldrb	r3, [r3, #0]
   2e4a6:	061a      	lsls	r2, r3, #24
   2e4a8:	6a3b      	ldr	r3, [r7, #32]
   2e4aa:	330a      	adds	r3, #10
   2e4ac:	781b      	ldrb	r3, [r3, #0]
   2e4ae:	041b      	lsls	r3, r3, #16
   2e4b0:	4313      	orrs	r3, r2
   2e4b2:	6a3a      	ldr	r2, [r7, #32]
   2e4b4:	3209      	adds	r2, #9
   2e4b6:	7812      	ldrb	r2, [r2, #0]
   2e4b8:	0212      	lsls	r2, r2, #8
   2e4ba:	4313      	orrs	r3, r2
   2e4bc:	6a3a      	ldr	r2, [r7, #32]
   2e4be:	3208      	adds	r2, #8
   2e4c0:	7812      	ldrb	r2, [r2, #0]
   2e4c2:	4313      	orrs	r3, r2
   2e4c4:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2e4c6:	2347      	movs	r3, #71	; 0x47
   2e4c8:	18fc      	adds	r4, r7, r3
   2e4ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2e4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4ce:	0011      	movs	r1, r2
   2e4d0:	0018      	movs	r0, r3
   2e4d2:	4b7b      	ldr	r3, [pc, #492]	; (2e6c0 <chk_mounted+0x36c>)
   2e4d4:	4798      	blx	r3
   2e4d6:	0003      	movs	r3, r0
   2e4d8:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2e4da:	2347      	movs	r3, #71	; 0x47
   2e4dc:	18fb      	adds	r3, r7, r3
   2e4de:	781b      	ldrb	r3, [r3, #0]
   2e4e0:	2b03      	cmp	r3, #3
   2e4e2:	d101      	bne.n	2e4e8 <chk_mounted+0x194>
   2e4e4:	2301      	movs	r3, #1
   2e4e6:	e209      	b.n	2e8fc <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2e4e8:	2347      	movs	r3, #71	; 0x47
   2e4ea:	18fb      	adds	r3, r7, r3
   2e4ec:	781b      	ldrb	r3, [r3, #0]
   2e4ee:	2b00      	cmp	r3, #0
   2e4f0:	d001      	beq.n	2e4f6 <chk_mounted+0x1a2>
   2e4f2:	230d      	movs	r3, #13
   2e4f4:	e202      	b.n	2e8fc <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2e4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4f8:	223c      	movs	r2, #60	; 0x3c
   2e4fa:	5c9b      	ldrb	r3, [r3, r2]
   2e4fc:	021b      	lsls	r3, r3, #8
   2e4fe:	b21a      	sxth	r2, r3
   2e500:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e502:	213b      	movs	r1, #59	; 0x3b
   2e504:	5c5b      	ldrb	r3, [r3, r1]
   2e506:	b21b      	sxth	r3, r3
   2e508:	4313      	orrs	r3, r2
   2e50a:	b21a      	sxth	r2, r3
   2e50c:	2380      	movs	r3, #128	; 0x80
   2e50e:	009b      	lsls	r3, r3, #2
   2e510:	429a      	cmp	r2, r3
   2e512:	d001      	beq.n	2e518 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2e514:	230d      	movs	r3, #13
   2e516:	e1f1      	b.n	2e8fc <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2e518:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e51a:	2247      	movs	r2, #71	; 0x47
   2e51c:	5c9b      	ldrb	r3, [r3, r2]
   2e51e:	021b      	lsls	r3, r3, #8
   2e520:	b21a      	sxth	r2, r3
   2e522:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e524:	2146      	movs	r1, #70	; 0x46
   2e526:	5c5b      	ldrb	r3, [r3, r1]
   2e528:	b21b      	sxth	r3, r3
   2e52a:	4313      	orrs	r3, r2
   2e52c:	b21b      	sxth	r3, r3
   2e52e:	b29b      	uxth	r3, r3
   2e530:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2e532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e534:	2b00      	cmp	r3, #0
   2e536:	d112      	bne.n	2e55e <chk_mounted+0x20a>
   2e538:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e53a:	2257      	movs	r2, #87	; 0x57
   2e53c:	5c9b      	ldrb	r3, [r3, r2]
   2e53e:	061a      	lsls	r2, r3, #24
   2e540:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e542:	2156      	movs	r1, #86	; 0x56
   2e544:	5c5b      	ldrb	r3, [r3, r1]
   2e546:	041b      	lsls	r3, r3, #16
   2e548:	4313      	orrs	r3, r2
   2e54a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e54c:	2155      	movs	r1, #85	; 0x55
   2e54e:	5c52      	ldrb	r2, [r2, r1]
   2e550:	0212      	lsls	r2, r2, #8
   2e552:	4313      	orrs	r3, r2
   2e554:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e556:	2154      	movs	r1, #84	; 0x54
   2e558:	5c52      	ldrb	r2, [r2, r1]
   2e55a:	4313      	orrs	r3, r2
   2e55c:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2e55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e560:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2e562:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2e564:	231f      	movs	r3, #31
   2e566:	18fb      	adds	r3, r7, r3
   2e568:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e56a:	2140      	movs	r1, #64	; 0x40
   2e56c:	5c52      	ldrb	r2, [r2, r1]
   2e56e:	701a      	strb	r2, [r3, #0]
   2e570:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e572:	221f      	movs	r2, #31
   2e574:	18ba      	adds	r2, r7, r2
   2e576:	7812      	ldrb	r2, [r2, #0]
   2e578:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2e57a:	231f      	movs	r3, #31
   2e57c:	18fb      	adds	r3, r7, r3
   2e57e:	781b      	ldrb	r3, [r3, #0]
   2e580:	2b01      	cmp	r3, #1
   2e582:	d006      	beq.n	2e592 <chk_mounted+0x23e>
   2e584:	231f      	movs	r3, #31
   2e586:	18fb      	adds	r3, r7, r3
   2e588:	781b      	ldrb	r3, [r3, #0]
   2e58a:	2b02      	cmp	r3, #2
   2e58c:	d001      	beq.n	2e592 <chk_mounted+0x23e>
   2e58e:	230d      	movs	r3, #13
   2e590:	e1b4      	b.n	2e8fc <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2e592:	231f      	movs	r3, #31
   2e594:	18fb      	adds	r3, r7, r3
   2e596:	781a      	ldrb	r2, [r3, #0]
   2e598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e59a:	4353      	muls	r3, r2
   2e59c:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2e59e:	231f      	movs	r3, #31
   2e5a0:	18fb      	adds	r3, r7, r3
   2e5a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e5a4:	213d      	movs	r1, #61	; 0x3d
   2e5a6:	5c52      	ldrb	r2, [r2, r1]
   2e5a8:	701a      	strb	r2, [r3, #0]
   2e5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e5ac:	221f      	movs	r2, #31
   2e5ae:	18ba      	adds	r2, r7, r2
   2e5b0:	7812      	ldrb	r2, [r2, #0]
   2e5b2:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2e5b4:	231f      	movs	r3, #31
   2e5b6:	18fb      	adds	r3, r7, r3
   2e5b8:	781b      	ldrb	r3, [r3, #0]
   2e5ba:	2b00      	cmp	r3, #0
   2e5bc:	d008      	beq.n	2e5d0 <chk_mounted+0x27c>
   2e5be:	231f      	movs	r3, #31
   2e5c0:	18fb      	adds	r3, r7, r3
   2e5c2:	781b      	ldrb	r3, [r3, #0]
   2e5c4:	221f      	movs	r2, #31
   2e5c6:	18ba      	adds	r2, r7, r2
   2e5c8:	7812      	ldrb	r2, [r2, #0]
   2e5ca:	3a01      	subs	r2, #1
   2e5cc:	4013      	ands	r3, r2
   2e5ce:	d001      	beq.n	2e5d4 <chk_mounted+0x280>
   2e5d0:	230d      	movs	r3, #13
   2e5d2:	e193      	b.n	2e8fc <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2e5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e5d6:	2242      	movs	r2, #66	; 0x42
   2e5d8:	5c9b      	ldrb	r3, [r3, r2]
   2e5da:	021b      	lsls	r3, r3, #8
   2e5dc:	b21a      	sxth	r2, r3
   2e5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e5e0:	2141      	movs	r1, #65	; 0x41
   2e5e2:	5c5b      	ldrb	r3, [r3, r1]
   2e5e4:	b21b      	sxth	r3, r3
   2e5e6:	4313      	orrs	r3, r2
   2e5e8:	b21b      	sxth	r3, r3
   2e5ea:	b29a      	uxth	r2, r3
   2e5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e5ee:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2e5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e5f2:	891b      	ldrh	r3, [r3, #8]
   2e5f4:	220f      	movs	r2, #15
   2e5f6:	4013      	ands	r3, r2
   2e5f8:	b29b      	uxth	r3, r3
   2e5fa:	2b00      	cmp	r3, #0
   2e5fc:	d001      	beq.n	2e602 <chk_mounted+0x2ae>
   2e5fe:	230d      	movs	r3, #13
   2e600:	e17c      	b.n	2e8fc <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2e602:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e604:	2244      	movs	r2, #68	; 0x44
   2e606:	5c9b      	ldrb	r3, [r3, r2]
   2e608:	021b      	lsls	r3, r3, #8
   2e60a:	b21a      	sxth	r2, r3
   2e60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e60e:	2143      	movs	r1, #67	; 0x43
   2e610:	5c5b      	ldrb	r3, [r3, r1]
   2e612:	b21b      	sxth	r3, r3
   2e614:	4313      	orrs	r3, r2
   2e616:	b21b      	sxth	r3, r3
   2e618:	b29b      	uxth	r3, r3
   2e61a:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2e61c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e61e:	2b00      	cmp	r3, #0
   2e620:	d112      	bne.n	2e648 <chk_mounted+0x2f4>
   2e622:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e624:	2253      	movs	r2, #83	; 0x53
   2e626:	5c9b      	ldrb	r3, [r3, r2]
   2e628:	061a      	lsls	r2, r3, #24
   2e62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e62c:	2152      	movs	r1, #82	; 0x52
   2e62e:	5c5b      	ldrb	r3, [r3, r1]
   2e630:	041b      	lsls	r3, r3, #16
   2e632:	4313      	orrs	r3, r2
   2e634:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e636:	2151      	movs	r1, #81	; 0x51
   2e638:	5c52      	ldrb	r2, [r2, r1]
   2e63a:	0212      	lsls	r2, r2, #8
   2e63c:	4313      	orrs	r3, r2
   2e63e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e640:	2150      	movs	r1, #80	; 0x50
   2e642:	5c52      	ldrb	r2, [r2, r1]
   2e644:	4313      	orrs	r3, r2
   2e646:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2e648:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e64a:	223f      	movs	r2, #63	; 0x3f
   2e64c:	5c9b      	ldrb	r3, [r3, r2]
   2e64e:	021b      	lsls	r3, r3, #8
   2e650:	b21a      	sxth	r2, r3
   2e652:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e654:	213e      	movs	r1, #62	; 0x3e
   2e656:	5c5b      	ldrb	r3, [r3, r1]
   2e658:	b21b      	sxth	r3, r3
   2e65a:	4313      	orrs	r3, r2
   2e65c:	b21a      	sxth	r2, r3
   2e65e:	231c      	movs	r3, #28
   2e660:	18fb      	adds	r3, r7, r3
   2e662:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2e664:	231c      	movs	r3, #28
   2e666:	18fb      	adds	r3, r7, r3
   2e668:	881b      	ldrh	r3, [r3, #0]
   2e66a:	2b00      	cmp	r3, #0
   2e66c:	d101      	bne.n	2e672 <chk_mounted+0x31e>
   2e66e:	230d      	movs	r3, #13
   2e670:	e144      	b.n	2e8fc <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2e672:	231c      	movs	r3, #28
   2e674:	18fb      	adds	r3, r7, r3
   2e676:	881a      	ldrh	r2, [r3, #0]
   2e678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e67a:	18d3      	adds	r3, r2, r3
   2e67c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e67e:	8912      	ldrh	r2, [r2, #8]
   2e680:	0912      	lsrs	r2, r2, #4
   2e682:	b292      	uxth	r2, r2
   2e684:	189b      	adds	r3, r3, r2
   2e686:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2e688:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2e68a:	69bb      	ldr	r3, [r7, #24]
   2e68c:	429a      	cmp	r2, r3
   2e68e:	d201      	bcs.n	2e694 <chk_mounted+0x340>
   2e690:	230d      	movs	r3, #13
   2e692:	e133      	b.n	2e8fc <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2e694:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2e696:	69bb      	ldr	r3, [r7, #24]
   2e698:	1ad2      	subs	r2, r2, r3
   2e69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e69c:	789b      	ldrb	r3, [r3, #2]
   2e69e:	0019      	movs	r1, r3
   2e6a0:	4b08      	ldr	r3, [pc, #32]	; (2e6c4 <chk_mounted+0x370>)
   2e6a2:	0010      	movs	r0, r2
   2e6a4:	4798      	blx	r3
   2e6a6:	0003      	movs	r3, r0
   2e6a8:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2e6aa:	697b      	ldr	r3, [r7, #20]
   2e6ac:	2b00      	cmp	r3, #0
   2e6ae:	d10b      	bne.n	2e6c8 <chk_mounted+0x374>
   2e6b0:	230d      	movs	r3, #13
   2e6b2:	e123      	b.n	2e8fc <chk_mounted+0x5a8>
   2e6b4:	200042fc 	.word	0x200042fc
   2e6b8:	0002c4b1 	.word	0x0002c4b1
   2e6bc:	0002c42d 	.word	0x0002c42d
   2e6c0:	0002e281 	.word	0x0002e281
   2e6c4:	00033ad5 	.word	0x00033ad5
	fmt = FS_FAT12;
   2e6c8:	2347      	movs	r3, #71	; 0x47
   2e6ca:	18fb      	adds	r3, r7, r3
   2e6cc:	2201      	movs	r2, #1
   2e6ce:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2e6d0:	697b      	ldr	r3, [r7, #20]
   2e6d2:	4a8c      	ldr	r2, [pc, #560]	; (2e904 <chk_mounted+0x5b0>)
   2e6d4:	4293      	cmp	r3, r2
   2e6d6:	d903      	bls.n	2e6e0 <chk_mounted+0x38c>
   2e6d8:	2347      	movs	r3, #71	; 0x47
   2e6da:	18fb      	adds	r3, r7, r3
   2e6dc:	2202      	movs	r2, #2
   2e6de:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2e6e0:	697b      	ldr	r3, [r7, #20]
   2e6e2:	4a89      	ldr	r2, [pc, #548]	; (2e908 <chk_mounted+0x5b4>)
   2e6e4:	4293      	cmp	r3, r2
   2e6e6:	d903      	bls.n	2e6f0 <chk_mounted+0x39c>
   2e6e8:	2347      	movs	r3, #71	; 0x47
   2e6ea:	18fb      	adds	r3, r7, r3
   2e6ec:	2203      	movs	r2, #3
   2e6ee:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2e6f0:	697b      	ldr	r3, [r7, #20]
   2e6f2:	1c9a      	adds	r2, r3, #2
   2e6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e6f6:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2e6f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2e6fa:	69bb      	ldr	r3, [r7, #24]
   2e6fc:	18d2      	adds	r2, r2, r3
   2e6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e700:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2e702:	231c      	movs	r3, #28
   2e704:	18fb      	adds	r3, r7, r3
   2e706:	881a      	ldrh	r2, [r3, #0]
   2e708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2e70a:	18d2      	adds	r2, r2, r3
   2e70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e70e:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2e710:	2347      	movs	r3, #71	; 0x47
   2e712:	18fb      	adds	r3, r7, r3
   2e714:	781b      	ldrb	r3, [r3, #0]
   2e716:	2b03      	cmp	r3, #3
   2e718:	d11e      	bne.n	2e758 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2e71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e71c:	891b      	ldrh	r3, [r3, #8]
   2e71e:	2b00      	cmp	r3, #0
   2e720:	d001      	beq.n	2e726 <chk_mounted+0x3d2>
   2e722:	230d      	movs	r3, #13
   2e724:	e0ea      	b.n	2e8fc <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2e726:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e728:	225f      	movs	r2, #95	; 0x5f
   2e72a:	5c9b      	ldrb	r3, [r3, r2]
   2e72c:	061a      	lsls	r2, r3, #24
   2e72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e730:	215e      	movs	r1, #94	; 0x5e
   2e732:	5c5b      	ldrb	r3, [r3, r1]
   2e734:	041b      	lsls	r3, r3, #16
   2e736:	4313      	orrs	r3, r2
   2e738:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e73a:	215d      	movs	r1, #93	; 0x5d
   2e73c:	5c52      	ldrb	r2, [r2, r1]
   2e73e:	0212      	lsls	r2, r2, #8
   2e740:	4313      	orrs	r3, r2
   2e742:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e744:	215c      	movs	r1, #92	; 0x5c
   2e746:	5c52      	ldrb	r2, [r2, r1]
   2e748:	431a      	orrs	r2, r3
   2e74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e74c:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2e74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e750:	699b      	ldr	r3, [r3, #24]
   2e752:	009b      	lsls	r3, r3, #2
   2e754:	633b      	str	r3, [r7, #48]	; 0x30
   2e756:	e020      	b.n	2e79a <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2e758:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e75a:	891b      	ldrh	r3, [r3, #8]
   2e75c:	2b00      	cmp	r3, #0
   2e75e:	d101      	bne.n	2e764 <chk_mounted+0x410>
   2e760:	230d      	movs	r3, #13
   2e762:	e0cb      	b.n	2e8fc <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2e764:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e766:	6a1a      	ldr	r2, [r3, #32]
   2e768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e76a:	18d2      	adds	r2, r2, r3
   2e76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e76e:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2e770:	2347      	movs	r3, #71	; 0x47
   2e772:	18fb      	adds	r3, r7, r3
   2e774:	781b      	ldrb	r3, [r3, #0]
   2e776:	2b02      	cmp	r3, #2
   2e778:	d103      	bne.n	2e782 <chk_mounted+0x42e>
   2e77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e77c:	699b      	ldr	r3, [r3, #24]
   2e77e:	005b      	lsls	r3, r3, #1
   2e780:	e00a      	b.n	2e798 <chk_mounted+0x444>
   2e782:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e784:	699a      	ldr	r2, [r3, #24]
   2e786:	0013      	movs	r3, r2
   2e788:	005b      	lsls	r3, r3, #1
   2e78a:	189b      	adds	r3, r3, r2
   2e78c:	085a      	lsrs	r2, r3, #1
   2e78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e790:	699b      	ldr	r3, [r3, #24]
   2e792:	2101      	movs	r1, #1
   2e794:	400b      	ands	r3, r1
   2e796:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2e798:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2e79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e79c:	69da      	ldr	r2, [r3, #28]
   2e79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e7a0:	495a      	ldr	r1, [pc, #360]	; (2e90c <chk_mounted+0x5b8>)
   2e7a2:	468c      	mov	ip, r1
   2e7a4:	4463      	add	r3, ip
   2e7a6:	0a5b      	lsrs	r3, r3, #9
   2e7a8:	429a      	cmp	r2, r3
   2e7aa:	d201      	bcs.n	2e7b0 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2e7ac:	230d      	movs	r3, #13
   2e7ae:	e0a5      	b.n	2e8fc <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2e7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e7b2:	2201      	movs	r2, #1
   2e7b4:	4252      	negs	r2, r2
   2e7b6:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2e7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e7ba:	2200      	movs	r2, #0
   2e7bc:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2e7be:	2347      	movs	r3, #71	; 0x47
   2e7c0:	18fb      	adds	r3, r7, r3
   2e7c2:	781b      	ldrb	r3, [r3, #0]
   2e7c4:	2b03      	cmp	r3, #3
   2e7c6:	d000      	beq.n	2e7ca <chk_mounted+0x476>
   2e7c8:	e082      	b.n	2e8d0 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2e7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e7cc:	2200      	movs	r2, #0
   2e7ce:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2e7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e7d2:	2261      	movs	r2, #97	; 0x61
   2e7d4:	5c9b      	ldrb	r3, [r3, r2]
   2e7d6:	021b      	lsls	r3, r3, #8
   2e7d8:	b21a      	sxth	r2, r3
   2e7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e7dc:	2160      	movs	r1, #96	; 0x60
   2e7de:	5c5b      	ldrb	r3, [r3, r1]
   2e7e0:	b21b      	sxth	r3, r3
   2e7e2:	4313      	orrs	r3, r2
   2e7e4:	b21b      	sxth	r3, r3
   2e7e6:	b29b      	uxth	r3, r3
   2e7e8:	001a      	movs	r2, r3
   2e7ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2e7ec:	18d2      	adds	r2, r2, r3
   2e7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e7f0:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2e7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e7f4:	7858      	ldrb	r0, [r3, #1]
   2e7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e7f8:	3330      	adds	r3, #48	; 0x30
   2e7fa:	0019      	movs	r1, r3
   2e7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e7fe:	695a      	ldr	r2, [r3, #20]
   2e800:	2301      	movs	r3, #1
   2e802:	4c43      	ldr	r4, [pc, #268]	; (2e910 <chk_mounted+0x5bc>)
   2e804:	47a0      	blx	r4
   2e806:	1e03      	subs	r3, r0, #0
   2e808:	d162      	bne.n	2e8d0 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2e80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e80c:	4a41      	ldr	r2, [pc, #260]	; (2e914 <chk_mounted+0x5c0>)
   2e80e:	5c9b      	ldrb	r3, [r3, r2]
   2e810:	021b      	lsls	r3, r3, #8
   2e812:	b21a      	sxth	r2, r3
   2e814:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e816:	4940      	ldr	r1, [pc, #256]	; (2e918 <chk_mounted+0x5c4>)
   2e818:	5c5b      	ldrb	r3, [r3, r1]
   2e81a:	b21b      	sxth	r3, r3
   2e81c:	4313      	orrs	r3, r2
   2e81e:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2e820:	4a3e      	ldr	r2, [pc, #248]	; (2e91c <chk_mounted+0x5c8>)
   2e822:	4293      	cmp	r3, r2
   2e824:	d154      	bne.n	2e8d0 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2e826:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e828:	2233      	movs	r2, #51	; 0x33
   2e82a:	5c9b      	ldrb	r3, [r3, r2]
   2e82c:	061a      	lsls	r2, r3, #24
   2e82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e830:	2132      	movs	r1, #50	; 0x32
   2e832:	5c5b      	ldrb	r3, [r3, r1]
   2e834:	041b      	lsls	r3, r3, #16
   2e836:	4313      	orrs	r3, r2
   2e838:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e83a:	2131      	movs	r1, #49	; 0x31
   2e83c:	5c52      	ldrb	r2, [r2, r1]
   2e83e:	0212      	lsls	r2, r2, #8
   2e840:	4313      	orrs	r3, r2
   2e842:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e844:	2130      	movs	r1, #48	; 0x30
   2e846:	5c52      	ldrb	r2, [r2, r1]
   2e848:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2e84a:	4a35      	ldr	r2, [pc, #212]	; (2e920 <chk_mounted+0x5cc>)
   2e84c:	4293      	cmp	r3, r2
   2e84e:	d13f      	bne.n	2e8d0 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2e850:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e852:	4a34      	ldr	r2, [pc, #208]	; (2e924 <chk_mounted+0x5d0>)
   2e854:	5c9b      	ldrb	r3, [r3, r2]
   2e856:	061a      	lsls	r2, r3, #24
   2e858:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e85a:	4933      	ldr	r1, [pc, #204]	; (2e928 <chk_mounted+0x5d4>)
   2e85c:	5c5b      	ldrb	r3, [r3, r1]
   2e85e:	041b      	lsls	r3, r3, #16
   2e860:	4313      	orrs	r3, r2
   2e862:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e864:	4931      	ldr	r1, [pc, #196]	; (2e92c <chk_mounted+0x5d8>)
   2e866:	5c52      	ldrb	r2, [r2, r1]
   2e868:	0212      	lsls	r2, r2, #8
   2e86a:	4313      	orrs	r3, r2
   2e86c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2e86e:	2285      	movs	r2, #133	; 0x85
   2e870:	0092      	lsls	r2, r2, #2
   2e872:	5c8a      	ldrb	r2, [r1, r2]
   2e874:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2e876:	4a2e      	ldr	r2, [pc, #184]	; (2e930 <chk_mounted+0x5dc>)
   2e878:	4293      	cmp	r3, r2
   2e87a:	d129      	bne.n	2e8d0 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2e87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e87e:	4a2d      	ldr	r2, [pc, #180]	; (2e934 <chk_mounted+0x5e0>)
   2e880:	5c9b      	ldrb	r3, [r3, r2]
   2e882:	061a      	lsls	r2, r3, #24
   2e884:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e886:	492c      	ldr	r1, [pc, #176]	; (2e938 <chk_mounted+0x5e4>)
   2e888:	5c5b      	ldrb	r3, [r3, r1]
   2e88a:	041b      	lsls	r3, r3, #16
   2e88c:	4313      	orrs	r3, r2
   2e88e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e890:	492a      	ldr	r1, [pc, #168]	; (2e93c <chk_mounted+0x5e8>)
   2e892:	5c52      	ldrb	r2, [r2, r1]
   2e894:	0212      	lsls	r2, r2, #8
   2e896:	4313      	orrs	r3, r2
   2e898:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2e89a:	2287      	movs	r2, #135	; 0x87
   2e89c:	0092      	lsls	r2, r2, #2
   2e89e:	5c8a      	ldrb	r2, [r1, r2]
   2e8a0:	431a      	orrs	r2, r3
   2e8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e8a4:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2e8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e8a8:	4a25      	ldr	r2, [pc, #148]	; (2e940 <chk_mounted+0x5ec>)
   2e8aa:	5c9b      	ldrb	r3, [r3, r2]
   2e8ac:	061a      	lsls	r2, r3, #24
   2e8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e8b0:	4924      	ldr	r1, [pc, #144]	; (2e944 <chk_mounted+0x5f0>)
   2e8b2:	5c5b      	ldrb	r3, [r3, r1]
   2e8b4:	041b      	lsls	r3, r3, #16
   2e8b6:	4313      	orrs	r3, r2
   2e8b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e8ba:	4923      	ldr	r1, [pc, #140]	; (2e948 <chk_mounted+0x5f4>)
   2e8bc:	5c52      	ldrb	r2, [r2, r1]
   2e8be:	0212      	lsls	r2, r2, #8
   2e8c0:	4313      	orrs	r3, r2
   2e8c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2e8c4:	2286      	movs	r2, #134	; 0x86
   2e8c6:	0092      	lsls	r2, r2, #2
   2e8c8:	5c8a      	ldrb	r2, [r1, r2]
   2e8ca:	431a      	orrs	r2, r3
   2e8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e8ce:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2e8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e8d2:	2247      	movs	r2, #71	; 0x47
   2e8d4:	18ba      	adds	r2, r7, r2
   2e8d6:	7812      	ldrb	r2, [r2, #0]
   2e8d8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2e8da:	4b1c      	ldr	r3, [pc, #112]	; (2e94c <chk_mounted+0x5f8>)
   2e8dc:	881b      	ldrh	r3, [r3, #0]
   2e8de:	3301      	adds	r3, #1
   2e8e0:	b29a      	uxth	r2, r3
   2e8e2:	4b1a      	ldr	r3, [pc, #104]	; (2e94c <chk_mounted+0x5f8>)
   2e8e4:	801a      	strh	r2, [r3, #0]
   2e8e6:	4b19      	ldr	r3, [pc, #100]	; (2e94c <chk_mounted+0x5f8>)
   2e8e8:	881a      	ldrh	r2, [r3, #0]
   2e8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e8ec:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2e8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e8f0:	2200      	movs	r2, #0
   2e8f2:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2e8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e8f6:	2200      	movs	r2, #0
   2e8f8:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2e8fa:	2300      	movs	r3, #0
}
   2e8fc:	0018      	movs	r0, r3
   2e8fe:	46bd      	mov	sp, r7
   2e900:	b013      	add	sp, #76	; 0x4c
   2e902:	bd90      	pop	{r4, r7, pc}
   2e904:	00000ff5 	.word	0x00000ff5
   2e908:	0000fff5 	.word	0x0000fff5
   2e90c:	000001ff 	.word	0x000001ff
   2e910:	0002c4e9 	.word	0x0002c4e9
   2e914:	0000022f 	.word	0x0000022f
   2e918:	0000022e 	.word	0x0000022e
   2e91c:	ffffaa55 	.word	0xffffaa55
   2e920:	41615252 	.word	0x41615252
   2e924:	00000217 	.word	0x00000217
   2e928:	00000216 	.word	0x00000216
   2e92c:	00000215 	.word	0x00000215
   2e930:	61417272 	.word	0x61417272
   2e934:	0000021f 	.word	0x0000021f
   2e938:	0000021e 	.word	0x0000021e
   2e93c:	0000021d 	.word	0x0000021d
   2e940:	0000021b 	.word	0x0000021b
   2e944:	0000021a 	.word	0x0000021a
   2e948:	00000219 	.word	0x00000219
   2e94c:	2000431c 	.word	0x2000431c

0002e950 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2e950:	b580      	push	{r7, lr}
   2e952:	b082      	sub	sp, #8
   2e954:	af00      	add	r7, sp, #0
   2e956:	6078      	str	r0, [r7, #4]
   2e958:	000a      	movs	r2, r1
   2e95a:	1cbb      	adds	r3, r7, #2
   2e95c:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2e95e:	687b      	ldr	r3, [r7, #4]
   2e960:	2b00      	cmp	r3, #0
   2e962:	d009      	beq.n	2e978 <validate+0x28>
   2e964:	687b      	ldr	r3, [r7, #4]
   2e966:	781b      	ldrb	r3, [r3, #0]
   2e968:	2b00      	cmp	r3, #0
   2e96a:	d005      	beq.n	2e978 <validate+0x28>
   2e96c:	687b      	ldr	r3, [r7, #4]
   2e96e:	88db      	ldrh	r3, [r3, #6]
   2e970:	1cba      	adds	r2, r7, #2
   2e972:	8812      	ldrh	r2, [r2, #0]
   2e974:	429a      	cmp	r2, r3
   2e976:	d001      	beq.n	2e97c <validate+0x2c>
		return FR_INVALID_OBJECT;
   2e978:	2309      	movs	r3, #9
   2e97a:	e00c      	b.n	2e996 <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2e97c:	687b      	ldr	r3, [r7, #4]
   2e97e:	785b      	ldrb	r3, [r3, #1]
   2e980:	0018      	movs	r0, r3
   2e982:	4b07      	ldr	r3, [pc, #28]	; (2e9a0 <validate+0x50>)
   2e984:	4798      	blx	r3
   2e986:	0003      	movs	r3, r0
   2e988:	001a      	movs	r2, r3
   2e98a:	2301      	movs	r3, #1
   2e98c:	4013      	ands	r3, r2
   2e98e:	d001      	beq.n	2e994 <validate+0x44>
		return FR_NOT_READY;
   2e990:	2303      	movs	r3, #3
   2e992:	e000      	b.n	2e996 <validate+0x46>

	return FR_OK;
   2e994:	2300      	movs	r3, #0
}
   2e996:	0018      	movs	r0, r3
   2e998:	46bd      	mov	sp, r7
   2e99a:	b002      	add	sp, #8
   2e99c:	bd80      	pop	{r7, pc}
   2e99e:	46c0      	nop			; (mov r8, r8)
   2e9a0:	0002c4b1 	.word	0x0002c4b1

0002e9a4 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   2e9a4:	b580      	push	{r7, lr}
   2e9a6:	b084      	sub	sp, #16
   2e9a8:	af00      	add	r7, sp, #0
   2e9aa:	0002      	movs	r2, r0
   2e9ac:	6039      	str	r1, [r7, #0]
   2e9ae:	1dfb      	adds	r3, r7, #7
   2e9b0:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   2e9b2:	1dfb      	adds	r3, r7, #7
   2e9b4:	781b      	ldrb	r3, [r3, #0]
   2e9b6:	2b07      	cmp	r3, #7
   2e9b8:	d901      	bls.n	2e9be <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   2e9ba:	230b      	movs	r3, #11
   2e9bc:	e018      	b.n	2e9f0 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   2e9be:	1dfb      	adds	r3, r7, #7
   2e9c0:	781a      	ldrb	r2, [r3, #0]
   2e9c2:	4b0d      	ldr	r3, [pc, #52]	; (2e9f8 <f_mount+0x54>)
   2e9c4:	0092      	lsls	r2, r2, #2
   2e9c6:	58d3      	ldr	r3, [r2, r3]
   2e9c8:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   2e9ca:	68fb      	ldr	r3, [r7, #12]
   2e9cc:	2b00      	cmp	r3, #0
   2e9ce:	d002      	beq.n	2e9d6 <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   2e9d0:	68fb      	ldr	r3, [r7, #12]
   2e9d2:	2200      	movs	r2, #0
   2e9d4:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   2e9d6:	683b      	ldr	r3, [r7, #0]
   2e9d8:	2b00      	cmp	r3, #0
   2e9da:	d002      	beq.n	2e9e2 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   2e9dc:	683b      	ldr	r3, [r7, #0]
   2e9de:	2200      	movs	r2, #0
   2e9e0:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   2e9e2:	1dfb      	adds	r3, r7, #7
   2e9e4:	781a      	ldrb	r2, [r3, #0]
   2e9e6:	4b04      	ldr	r3, [pc, #16]	; (2e9f8 <f_mount+0x54>)
   2e9e8:	0092      	lsls	r2, r2, #2
   2e9ea:	6839      	ldr	r1, [r7, #0]
   2e9ec:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   2e9ee:	2300      	movs	r3, #0
}
   2e9f0:	0018      	movs	r0, r3
   2e9f2:	46bd      	mov	sp, r7
   2e9f4:	b004      	add	sp, #16
   2e9f6:	bd80      	pop	{r7, pc}
   2e9f8:	200042fc 	.word	0x200042fc

0002e9fc <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2e9fc:	b590      	push	{r4, r7, lr}
   2e9fe:	4ce5      	ldr	r4, [pc, #916]	; (2ed94 <f_open+0x398>)
   2ea00:	44a5      	add	sp, r4
   2ea02:	af00      	add	r7, sp, #0
   2ea04:	60f8      	str	r0, [r7, #12]
   2ea06:	60b9      	str	r1, [r7, #8]
   2ea08:	4be3      	ldr	r3, [pc, #908]	; (2ed98 <f_open+0x39c>)
   2ea0a:	2194      	movs	r1, #148	; 0x94
   2ea0c:	0089      	lsls	r1, r1, #2
   2ea0e:	468c      	mov	ip, r1
   2ea10:	44bc      	add	ip, r7
   2ea12:	4463      	add	r3, ip
   2ea14:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2ea16:	68fb      	ldr	r3, [r7, #12]
   2ea18:	2200      	movs	r2, #0
   2ea1a:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2ea1c:	4bde      	ldr	r3, [pc, #888]	; (2ed98 <f_open+0x39c>)
   2ea1e:	2294      	movs	r2, #148	; 0x94
   2ea20:	0092      	lsls	r2, r2, #2
   2ea22:	4694      	mov	ip, r2
   2ea24:	44bc      	add	ip, r7
   2ea26:	4463      	add	r3, ip
   2ea28:	4adb      	ldr	r2, [pc, #876]	; (2ed98 <f_open+0x39c>)
   2ea2a:	2194      	movs	r1, #148	; 0x94
   2ea2c:	0089      	lsls	r1, r1, #2
   2ea2e:	468c      	mov	ip, r1
   2ea30:	44bc      	add	ip, r7
   2ea32:	4462      	add	r2, ip
   2ea34:	7812      	ldrb	r2, [r2, #0]
   2ea36:	211f      	movs	r1, #31
   2ea38:	400a      	ands	r2, r1
   2ea3a:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2ea3c:	4bd6      	ldr	r3, [pc, #856]	; (2ed98 <f_open+0x39c>)
   2ea3e:	2294      	movs	r2, #148	; 0x94
   2ea40:	0092      	lsls	r2, r2, #2
   2ea42:	4694      	mov	ip, r2
   2ea44:	44bc      	add	ip, r7
   2ea46:	4463      	add	r3, ip
   2ea48:	781b      	ldrb	r3, [r3, #0]
   2ea4a:	2201      	movs	r2, #1
   2ea4c:	4393      	bics	r3, r2
   2ea4e:	b2da      	uxtb	r2, r3
   2ea50:	4bd2      	ldr	r3, [pc, #840]	; (2ed9c <f_open+0x3a0>)
   2ea52:	18fc      	adds	r4, r7, r3
   2ea54:	2387      	movs	r3, #135	; 0x87
   2ea56:	009b      	lsls	r3, r3, #2
   2ea58:	18f9      	adds	r1, r7, r3
   2ea5a:	2308      	movs	r3, #8
   2ea5c:	18fb      	adds	r3, r7, r3
   2ea5e:	0018      	movs	r0, r3
   2ea60:	4bcf      	ldr	r3, [pc, #828]	; (2eda0 <f_open+0x3a4>)
   2ea62:	4798      	blx	r3
   2ea64:	0003      	movs	r3, r0
   2ea66:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2ea68:	2387      	movs	r3, #135	; 0x87
   2ea6a:	009b      	lsls	r3, r3, #2
   2ea6c:	18fb      	adds	r3, r7, r3
   2ea6e:	2284      	movs	r2, #132	; 0x84
   2ea70:	0092      	lsls	r2, r2, #2
   2ea72:	18ba      	adds	r2, r7, r2
   2ea74:	619a      	str	r2, [r3, #24]
   2ea76:	2387      	movs	r3, #135	; 0x87
   2ea78:	009b      	lsls	r3, r3, #2
   2ea7a:	18fb      	adds	r3, r7, r3
   2ea7c:	2210      	movs	r2, #16
   2ea7e:	18ba      	adds	r2, r7, r2
   2ea80:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2ea82:	4bc6      	ldr	r3, [pc, #792]	; (2ed9c <f_open+0x3a0>)
   2ea84:	18fb      	adds	r3, r7, r3
   2ea86:	781b      	ldrb	r3, [r3, #0]
   2ea88:	2b00      	cmp	r3, #0
   2ea8a:	d10b      	bne.n	2eaa4 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2ea8c:	68ba      	ldr	r2, [r7, #8]
   2ea8e:	4bc3      	ldr	r3, [pc, #780]	; (2ed9c <f_open+0x3a0>)
   2ea90:	18fc      	adds	r4, r7, r3
   2ea92:	2387      	movs	r3, #135	; 0x87
   2ea94:	009b      	lsls	r3, r3, #2
   2ea96:	18fb      	adds	r3, r7, r3
   2ea98:	0011      	movs	r1, r2
   2ea9a:	0018      	movs	r0, r3
   2ea9c:	4bc1      	ldr	r3, [pc, #772]	; (2eda4 <f_open+0x3a8>)
   2ea9e:	4798      	blx	r3
   2eaa0:	0003      	movs	r3, r0
   2eaa2:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2eaa4:	2387      	movs	r3, #135	; 0x87
   2eaa6:	009b      	lsls	r3, r3, #2
   2eaa8:	18fb      	adds	r3, r7, r3
   2eaaa:	695b      	ldr	r3, [r3, #20]
   2eaac:	2292      	movs	r2, #146	; 0x92
   2eaae:	0092      	lsls	r2, r2, #2
   2eab0:	18ba      	adds	r2, r7, r2
   2eab2:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2eab4:	4bb9      	ldr	r3, [pc, #740]	; (2ed9c <f_open+0x3a0>)
   2eab6:	18fb      	adds	r3, r7, r3
   2eab8:	781b      	ldrb	r3, [r3, #0]
   2eaba:	2b00      	cmp	r3, #0
   2eabc:	d109      	bne.n	2ead2 <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2eabe:	2392      	movs	r3, #146	; 0x92
   2eac0:	009b      	lsls	r3, r3, #2
   2eac2:	18fb      	adds	r3, r7, r3
   2eac4:	681b      	ldr	r3, [r3, #0]
   2eac6:	2b00      	cmp	r3, #0
   2eac8:	d103      	bne.n	2ead2 <f_open+0xd6>
			res = FR_INVALID_NAME;
   2eaca:	4bb4      	ldr	r3, [pc, #720]	; (2ed9c <f_open+0x3a0>)
   2eacc:	18fb      	adds	r3, r7, r3
   2eace:	2206      	movs	r2, #6
   2ead0:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2ead2:	4bb1      	ldr	r3, [pc, #708]	; (2ed98 <f_open+0x39c>)
   2ead4:	2294      	movs	r2, #148	; 0x94
   2ead6:	0092      	lsls	r2, r2, #2
   2ead8:	4694      	mov	ip, r2
   2eada:	44bc      	add	ip, r7
   2eadc:	4463      	add	r3, ip
   2eade:	781b      	ldrb	r3, [r3, #0]
   2eae0:	221c      	movs	r2, #28
   2eae2:	4013      	ands	r3, r2
   2eae4:	d100      	bne.n	2eae8 <f_open+0xec>
   2eae6:	e141      	b.n	2ed6c <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2eae8:	4bac      	ldr	r3, [pc, #688]	; (2ed9c <f_open+0x3a0>)
   2eaea:	18fb      	adds	r3, r7, r3
   2eaec:	781b      	ldrb	r3, [r3, #0]
   2eaee:	2b00      	cmp	r3, #0
   2eaf0:	d027      	beq.n	2eb42 <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2eaf2:	4baa      	ldr	r3, [pc, #680]	; (2ed9c <f_open+0x3a0>)
   2eaf4:	18fb      	adds	r3, r7, r3
   2eaf6:	781b      	ldrb	r3, [r3, #0]
   2eaf8:	2b04      	cmp	r3, #4
   2eafa:	d109      	bne.n	2eb10 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2eafc:	4ba7      	ldr	r3, [pc, #668]	; (2ed9c <f_open+0x3a0>)
   2eafe:	18fc      	adds	r4, r7, r3
   2eb00:	2387      	movs	r3, #135	; 0x87
   2eb02:	009b      	lsls	r3, r3, #2
   2eb04:	18fb      	adds	r3, r7, r3
   2eb06:	0018      	movs	r0, r3
   2eb08:	4ba7      	ldr	r3, [pc, #668]	; (2eda8 <f_open+0x3ac>)
   2eb0a:	4798      	blx	r3
   2eb0c:	0003      	movs	r3, r0
   2eb0e:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2eb10:	4ba1      	ldr	r3, [pc, #644]	; (2ed98 <f_open+0x39c>)
   2eb12:	2294      	movs	r2, #148	; 0x94
   2eb14:	0092      	lsls	r2, r2, #2
   2eb16:	4694      	mov	ip, r2
   2eb18:	44bc      	add	ip, r7
   2eb1a:	4463      	add	r3, ip
   2eb1c:	4a9e      	ldr	r2, [pc, #632]	; (2ed98 <f_open+0x39c>)
   2eb1e:	2194      	movs	r1, #148	; 0x94
   2eb20:	0089      	lsls	r1, r1, #2
   2eb22:	468c      	mov	ip, r1
   2eb24:	44bc      	add	ip, r7
   2eb26:	4462      	add	r2, ip
   2eb28:	7812      	ldrb	r2, [r2, #0]
   2eb2a:	2108      	movs	r1, #8
   2eb2c:	430a      	orrs	r2, r1
   2eb2e:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2eb30:	2387      	movs	r3, #135	; 0x87
   2eb32:	009b      	lsls	r3, r3, #2
   2eb34:	18fb      	adds	r3, r7, r3
   2eb36:	695b      	ldr	r3, [r3, #20]
   2eb38:	2292      	movs	r2, #146	; 0x92
   2eb3a:	0092      	lsls	r2, r2, #2
   2eb3c:	18ba      	adds	r2, r7, r2
   2eb3e:	6013      	str	r3, [r2, #0]
   2eb40:	e01c      	b.n	2eb7c <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2eb42:	2392      	movs	r3, #146	; 0x92
   2eb44:	009b      	lsls	r3, r3, #2
   2eb46:	18fb      	adds	r3, r7, r3
   2eb48:	681b      	ldr	r3, [r3, #0]
   2eb4a:	330b      	adds	r3, #11
   2eb4c:	781b      	ldrb	r3, [r3, #0]
   2eb4e:	001a      	movs	r2, r3
   2eb50:	2311      	movs	r3, #17
   2eb52:	4013      	ands	r3, r2
   2eb54:	d004      	beq.n	2eb60 <f_open+0x164>
				res = FR_DENIED;
   2eb56:	4b91      	ldr	r3, [pc, #580]	; (2ed9c <f_open+0x3a0>)
   2eb58:	18fb      	adds	r3, r7, r3
   2eb5a:	2207      	movs	r2, #7
   2eb5c:	701a      	strb	r2, [r3, #0]
   2eb5e:	e00d      	b.n	2eb7c <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2eb60:	4b8d      	ldr	r3, [pc, #564]	; (2ed98 <f_open+0x39c>)
   2eb62:	2294      	movs	r2, #148	; 0x94
   2eb64:	0092      	lsls	r2, r2, #2
   2eb66:	4694      	mov	ip, r2
   2eb68:	44bc      	add	ip, r7
   2eb6a:	4463      	add	r3, ip
   2eb6c:	781b      	ldrb	r3, [r3, #0]
   2eb6e:	2204      	movs	r2, #4
   2eb70:	4013      	ands	r3, r2
   2eb72:	d003      	beq.n	2eb7c <f_open+0x180>
					res = FR_EXIST;
   2eb74:	4b89      	ldr	r3, [pc, #548]	; (2ed9c <f_open+0x3a0>)
   2eb76:	18fb      	adds	r3, r7, r3
   2eb78:	2208      	movs	r2, #8
   2eb7a:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2eb7c:	4b87      	ldr	r3, [pc, #540]	; (2ed9c <f_open+0x3a0>)
   2eb7e:	18fb      	adds	r3, r7, r3
   2eb80:	781b      	ldrb	r3, [r3, #0]
   2eb82:	2b00      	cmp	r3, #0
   2eb84:	d000      	beq.n	2eb88 <f_open+0x18c>
   2eb86:	e12f      	b.n	2ede8 <f_open+0x3ec>
   2eb88:	4b83      	ldr	r3, [pc, #524]	; (2ed98 <f_open+0x39c>)
   2eb8a:	2294      	movs	r2, #148	; 0x94
   2eb8c:	0092      	lsls	r2, r2, #2
   2eb8e:	4694      	mov	ip, r2
   2eb90:	44bc      	add	ip, r7
   2eb92:	4463      	add	r3, ip
   2eb94:	781b      	ldrb	r3, [r3, #0]
   2eb96:	2208      	movs	r2, #8
   2eb98:	4013      	ands	r3, r2
   2eb9a:	d100      	bne.n	2eb9e <f_open+0x1a2>
   2eb9c:	e124      	b.n	2ede8 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2eb9e:	4b83      	ldr	r3, [pc, #524]	; (2edac <f_open+0x3b0>)
   2eba0:	4798      	blx	r3
   2eba2:	0003      	movs	r3, r0
   2eba4:	2291      	movs	r2, #145	; 0x91
   2eba6:	0092      	lsls	r2, r2, #2
   2eba8:	18ba      	adds	r2, r7, r2
   2ebaa:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2ebac:	2392      	movs	r3, #146	; 0x92
   2ebae:	009b      	lsls	r3, r3, #2
   2ebb0:	18fb      	adds	r3, r7, r3
   2ebb2:	681b      	ldr	r3, [r3, #0]
   2ebb4:	330e      	adds	r3, #14
   2ebb6:	2291      	movs	r2, #145	; 0x91
   2ebb8:	0092      	lsls	r2, r2, #2
   2ebba:	18ba      	adds	r2, r7, r2
   2ebbc:	6812      	ldr	r2, [r2, #0]
   2ebbe:	b2d2      	uxtb	r2, r2
   2ebc0:	701a      	strb	r2, [r3, #0]
   2ebc2:	2392      	movs	r3, #146	; 0x92
   2ebc4:	009b      	lsls	r3, r3, #2
   2ebc6:	18fb      	adds	r3, r7, r3
   2ebc8:	681b      	ldr	r3, [r3, #0]
   2ebca:	330f      	adds	r3, #15
   2ebcc:	2291      	movs	r2, #145	; 0x91
   2ebce:	0092      	lsls	r2, r2, #2
   2ebd0:	18ba      	adds	r2, r7, r2
   2ebd2:	6812      	ldr	r2, [r2, #0]
   2ebd4:	b292      	uxth	r2, r2
   2ebd6:	0a12      	lsrs	r2, r2, #8
   2ebd8:	b292      	uxth	r2, r2
   2ebda:	b2d2      	uxtb	r2, r2
   2ebdc:	701a      	strb	r2, [r3, #0]
   2ebde:	2392      	movs	r3, #146	; 0x92
   2ebe0:	009b      	lsls	r3, r3, #2
   2ebe2:	18fb      	adds	r3, r7, r3
   2ebe4:	681b      	ldr	r3, [r3, #0]
   2ebe6:	3310      	adds	r3, #16
   2ebe8:	2291      	movs	r2, #145	; 0x91
   2ebea:	0092      	lsls	r2, r2, #2
   2ebec:	18ba      	adds	r2, r7, r2
   2ebee:	6812      	ldr	r2, [r2, #0]
   2ebf0:	0c12      	lsrs	r2, r2, #16
   2ebf2:	b2d2      	uxtb	r2, r2
   2ebf4:	701a      	strb	r2, [r3, #0]
   2ebf6:	2392      	movs	r3, #146	; 0x92
   2ebf8:	009b      	lsls	r3, r3, #2
   2ebfa:	18fb      	adds	r3, r7, r3
   2ebfc:	681b      	ldr	r3, [r3, #0]
   2ebfe:	3311      	adds	r3, #17
   2ec00:	2291      	movs	r2, #145	; 0x91
   2ec02:	0092      	lsls	r2, r2, #2
   2ec04:	18ba      	adds	r2, r7, r2
   2ec06:	6812      	ldr	r2, [r2, #0]
   2ec08:	0e12      	lsrs	r2, r2, #24
   2ec0a:	b2d2      	uxtb	r2, r2
   2ec0c:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2ec0e:	2392      	movs	r3, #146	; 0x92
   2ec10:	009b      	lsls	r3, r3, #2
   2ec12:	18fb      	adds	r3, r7, r3
   2ec14:	681b      	ldr	r3, [r3, #0]
   2ec16:	330b      	adds	r3, #11
   2ec18:	2200      	movs	r2, #0
   2ec1a:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2ec1c:	2392      	movs	r3, #146	; 0x92
   2ec1e:	009b      	lsls	r3, r3, #2
   2ec20:	18fb      	adds	r3, r7, r3
   2ec22:	681b      	ldr	r3, [r3, #0]
   2ec24:	331c      	adds	r3, #28
   2ec26:	2200      	movs	r2, #0
   2ec28:	701a      	strb	r2, [r3, #0]
   2ec2a:	2392      	movs	r3, #146	; 0x92
   2ec2c:	009b      	lsls	r3, r3, #2
   2ec2e:	18fb      	adds	r3, r7, r3
   2ec30:	681b      	ldr	r3, [r3, #0]
   2ec32:	331d      	adds	r3, #29
   2ec34:	2200      	movs	r2, #0
   2ec36:	701a      	strb	r2, [r3, #0]
   2ec38:	2392      	movs	r3, #146	; 0x92
   2ec3a:	009b      	lsls	r3, r3, #2
   2ec3c:	18fb      	adds	r3, r7, r3
   2ec3e:	681b      	ldr	r3, [r3, #0]
   2ec40:	331e      	adds	r3, #30
   2ec42:	2200      	movs	r2, #0
   2ec44:	701a      	strb	r2, [r3, #0]
   2ec46:	2392      	movs	r3, #146	; 0x92
   2ec48:	009b      	lsls	r3, r3, #2
   2ec4a:	18fb      	adds	r3, r7, r3
   2ec4c:	681b      	ldr	r3, [r3, #0]
   2ec4e:	331f      	adds	r3, #31
   2ec50:	2200      	movs	r2, #0
   2ec52:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2ec54:	2392      	movs	r3, #146	; 0x92
   2ec56:	009b      	lsls	r3, r3, #2
   2ec58:	18fb      	adds	r3, r7, r3
   2ec5a:	681b      	ldr	r3, [r3, #0]
   2ec5c:	3315      	adds	r3, #21
   2ec5e:	781b      	ldrb	r3, [r3, #0]
   2ec60:	021b      	lsls	r3, r3, #8
   2ec62:	b21a      	sxth	r2, r3
   2ec64:	2392      	movs	r3, #146	; 0x92
   2ec66:	009b      	lsls	r3, r3, #2
   2ec68:	18fb      	adds	r3, r7, r3
   2ec6a:	681b      	ldr	r3, [r3, #0]
   2ec6c:	3314      	adds	r3, #20
   2ec6e:	781b      	ldrb	r3, [r3, #0]
   2ec70:	b21b      	sxth	r3, r3
   2ec72:	4313      	orrs	r3, r2
   2ec74:	b21b      	sxth	r3, r3
   2ec76:	b29b      	uxth	r3, r3
   2ec78:	041b      	lsls	r3, r3, #16
   2ec7a:	2292      	movs	r2, #146	; 0x92
   2ec7c:	0092      	lsls	r2, r2, #2
   2ec7e:	18ba      	adds	r2, r7, r2
   2ec80:	6812      	ldr	r2, [r2, #0]
   2ec82:	321b      	adds	r2, #27
   2ec84:	7812      	ldrb	r2, [r2, #0]
   2ec86:	0212      	lsls	r2, r2, #8
   2ec88:	b211      	sxth	r1, r2
   2ec8a:	2292      	movs	r2, #146	; 0x92
   2ec8c:	0092      	lsls	r2, r2, #2
   2ec8e:	18ba      	adds	r2, r7, r2
   2ec90:	6812      	ldr	r2, [r2, #0]
   2ec92:	321a      	adds	r2, #26
   2ec94:	7812      	ldrb	r2, [r2, #0]
   2ec96:	b212      	sxth	r2, r2
   2ec98:	430a      	orrs	r2, r1
   2ec9a:	b212      	sxth	r2, r2
   2ec9c:	b292      	uxth	r2, r2
   2ec9e:	4313      	orrs	r3, r2
   2eca0:	2290      	movs	r2, #144	; 0x90
   2eca2:	0092      	lsls	r2, r2, #2
   2eca4:	18ba      	adds	r2, r7, r2
   2eca6:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2eca8:	2392      	movs	r3, #146	; 0x92
   2ecaa:	009b      	lsls	r3, r3, #2
   2ecac:	18fb      	adds	r3, r7, r3
   2ecae:	681b      	ldr	r3, [r3, #0]
   2ecb0:	331a      	adds	r3, #26
   2ecb2:	2200      	movs	r2, #0
   2ecb4:	701a      	strb	r2, [r3, #0]
   2ecb6:	2392      	movs	r3, #146	; 0x92
   2ecb8:	009b      	lsls	r3, r3, #2
   2ecba:	18fb      	adds	r3, r7, r3
   2ecbc:	681b      	ldr	r3, [r3, #0]
   2ecbe:	331b      	adds	r3, #27
   2ecc0:	2200      	movs	r2, #0
   2ecc2:	701a      	strb	r2, [r3, #0]
   2ecc4:	2392      	movs	r3, #146	; 0x92
   2ecc6:	009b      	lsls	r3, r3, #2
   2ecc8:	18fb      	adds	r3, r7, r3
   2ecca:	681b      	ldr	r3, [r3, #0]
   2eccc:	3314      	adds	r3, #20
   2ecce:	2200      	movs	r2, #0
   2ecd0:	701a      	strb	r2, [r3, #0]
   2ecd2:	2392      	movs	r3, #146	; 0x92
   2ecd4:	009b      	lsls	r3, r3, #2
   2ecd6:	18fb      	adds	r3, r7, r3
   2ecd8:	681b      	ldr	r3, [r3, #0]
   2ecda:	3315      	adds	r3, #21
   2ecdc:	2200      	movs	r2, #0
   2ecde:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2ece0:	2387      	movs	r3, #135	; 0x87
   2ece2:	009b      	lsls	r3, r3, #2
   2ece4:	18fb      	adds	r3, r7, r3
   2ece6:	681b      	ldr	r3, [r3, #0]
   2ece8:	2201      	movs	r2, #1
   2ecea:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2ecec:	2390      	movs	r3, #144	; 0x90
   2ecee:	009b      	lsls	r3, r3, #2
   2ecf0:	18fb      	adds	r3, r7, r3
   2ecf2:	681b      	ldr	r3, [r3, #0]
   2ecf4:	2b00      	cmp	r3, #0
   2ecf6:	d100      	bne.n	2ecfa <f_open+0x2fe>
   2ecf8:	e076      	b.n	2ede8 <f_open+0x3ec>
				dw = dj.fs->winsect;
   2ecfa:	2387      	movs	r3, #135	; 0x87
   2ecfc:	009b      	lsls	r3, r3, #2
   2ecfe:	18fb      	adds	r3, r7, r3
   2ed00:	681b      	ldr	r3, [r3, #0]
   2ed02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2ed04:	2291      	movs	r2, #145	; 0x91
   2ed06:	0092      	lsls	r2, r2, #2
   2ed08:	18ba      	adds	r2, r7, r2
   2ed0a:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2ed0c:	2387      	movs	r3, #135	; 0x87
   2ed0e:	009b      	lsls	r3, r3, #2
   2ed10:	18fb      	adds	r3, r7, r3
   2ed12:	681b      	ldr	r3, [r3, #0]
   2ed14:	4a21      	ldr	r2, [pc, #132]	; (2ed9c <f_open+0x3a0>)
   2ed16:	18bc      	adds	r4, r7, r2
   2ed18:	2290      	movs	r2, #144	; 0x90
   2ed1a:	0092      	lsls	r2, r2, #2
   2ed1c:	18ba      	adds	r2, r7, r2
   2ed1e:	6812      	ldr	r2, [r2, #0]
   2ed20:	0011      	movs	r1, r2
   2ed22:	0018      	movs	r0, r3
   2ed24:	4b22      	ldr	r3, [pc, #136]	; (2edb0 <f_open+0x3b4>)
   2ed26:	4798      	blx	r3
   2ed28:	0003      	movs	r3, r0
   2ed2a:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2ed2c:	4b1b      	ldr	r3, [pc, #108]	; (2ed9c <f_open+0x3a0>)
   2ed2e:	18fb      	adds	r3, r7, r3
   2ed30:	781b      	ldrb	r3, [r3, #0]
   2ed32:	2b00      	cmp	r3, #0
   2ed34:	d158      	bne.n	2ede8 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2ed36:	2387      	movs	r3, #135	; 0x87
   2ed38:	009b      	lsls	r3, r3, #2
   2ed3a:	18fb      	adds	r3, r7, r3
   2ed3c:	681b      	ldr	r3, [r3, #0]
   2ed3e:	2290      	movs	r2, #144	; 0x90
   2ed40:	0092      	lsls	r2, r2, #2
   2ed42:	18ba      	adds	r2, r7, r2
   2ed44:	6812      	ldr	r2, [r2, #0]
   2ed46:	3a01      	subs	r2, #1
   2ed48:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2ed4a:	2387      	movs	r3, #135	; 0x87
   2ed4c:	009b      	lsls	r3, r3, #2
   2ed4e:	18fb      	adds	r3, r7, r3
   2ed50:	681b      	ldr	r3, [r3, #0]
   2ed52:	4a12      	ldr	r2, [pc, #72]	; (2ed9c <f_open+0x3a0>)
   2ed54:	18bc      	adds	r4, r7, r2
   2ed56:	2291      	movs	r2, #145	; 0x91
   2ed58:	0092      	lsls	r2, r2, #2
   2ed5a:	18ba      	adds	r2, r7, r2
   2ed5c:	6812      	ldr	r2, [r2, #0]
   2ed5e:	0011      	movs	r1, r2
   2ed60:	0018      	movs	r0, r3
   2ed62:	4b14      	ldr	r3, [pc, #80]	; (2edb4 <f_open+0x3b8>)
   2ed64:	4798      	blx	r3
   2ed66:	0003      	movs	r3, r0
   2ed68:	7023      	strb	r3, [r4, #0]
   2ed6a:	e03d      	b.n	2ede8 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2ed6c:	4b0b      	ldr	r3, [pc, #44]	; (2ed9c <f_open+0x3a0>)
   2ed6e:	18fb      	adds	r3, r7, r3
   2ed70:	781b      	ldrb	r3, [r3, #0]
   2ed72:	2b00      	cmp	r3, #0
   2ed74:	d138      	bne.n	2ede8 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2ed76:	2392      	movs	r3, #146	; 0x92
   2ed78:	009b      	lsls	r3, r3, #2
   2ed7a:	18fb      	adds	r3, r7, r3
   2ed7c:	681b      	ldr	r3, [r3, #0]
   2ed7e:	330b      	adds	r3, #11
   2ed80:	781b      	ldrb	r3, [r3, #0]
   2ed82:	001a      	movs	r2, r3
   2ed84:	2310      	movs	r3, #16
   2ed86:	4013      	ands	r3, r2
   2ed88:	d016      	beq.n	2edb8 <f_open+0x3bc>
				res = FR_NO_FILE;
   2ed8a:	4b04      	ldr	r3, [pc, #16]	; (2ed9c <f_open+0x3a0>)
   2ed8c:	18fb      	adds	r3, r7, r3
   2ed8e:	2204      	movs	r2, #4
   2ed90:	701a      	strb	r2, [r3, #0]
   2ed92:	e029      	b.n	2ede8 <f_open+0x3ec>
   2ed94:	fffffdac 	.word	0xfffffdac
   2ed98:	fffffdb7 	.word	0xfffffdb7
   2ed9c:	0000024f 	.word	0x0000024f
   2eda0:	0002e355 	.word	0x0002e355
   2eda4:	0002e149 	.word	0x0002e149
   2eda8:	0002d999 	.word	0x0002d999
   2edac:	0002c791 	.word	0x0002c791
   2edb0:	0002cf15 	.word	0x0002cf15
   2edb4:	0002c8d5 	.word	0x0002c8d5
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2edb8:	4b5a      	ldr	r3, [pc, #360]	; (2ef24 <f_open+0x528>)
   2edba:	2294      	movs	r2, #148	; 0x94
   2edbc:	0092      	lsls	r2, r2, #2
   2edbe:	4694      	mov	ip, r2
   2edc0:	44bc      	add	ip, r7
   2edc2:	4463      	add	r3, ip
   2edc4:	781b      	ldrb	r3, [r3, #0]
   2edc6:	2202      	movs	r2, #2
   2edc8:	4013      	ands	r3, r2
   2edca:	d00d      	beq.n	2ede8 <f_open+0x3ec>
   2edcc:	2392      	movs	r3, #146	; 0x92
   2edce:	009b      	lsls	r3, r3, #2
   2edd0:	18fb      	adds	r3, r7, r3
   2edd2:	681b      	ldr	r3, [r3, #0]
   2edd4:	330b      	adds	r3, #11
   2edd6:	781b      	ldrb	r3, [r3, #0]
   2edd8:	001a      	movs	r2, r3
   2edda:	2301      	movs	r3, #1
   2eddc:	4013      	ands	r3, r2
   2edde:	d003      	beq.n	2ede8 <f_open+0x3ec>
					res = FR_DENIED;
   2ede0:	4b51      	ldr	r3, [pc, #324]	; (2ef28 <f_open+0x52c>)
   2ede2:	18fb      	adds	r3, r7, r3
   2ede4:	2207      	movs	r2, #7
   2ede6:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2ede8:	4b4f      	ldr	r3, [pc, #316]	; (2ef28 <f_open+0x52c>)
   2edea:	18fb      	adds	r3, r7, r3
   2edec:	781b      	ldrb	r3, [r3, #0]
   2edee:	2b00      	cmp	r3, #0
   2edf0:	d126      	bne.n	2ee40 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2edf2:	4b4c      	ldr	r3, [pc, #304]	; (2ef24 <f_open+0x528>)
   2edf4:	2294      	movs	r2, #148	; 0x94
   2edf6:	0092      	lsls	r2, r2, #2
   2edf8:	4694      	mov	ip, r2
   2edfa:	44bc      	add	ip, r7
   2edfc:	4463      	add	r3, ip
   2edfe:	781b      	ldrb	r3, [r3, #0]
   2ee00:	2208      	movs	r2, #8
   2ee02:	4013      	ands	r3, r2
   2ee04:	d00f      	beq.n	2ee26 <f_open+0x42a>
			mode |= FA__WRITTEN;
   2ee06:	4b47      	ldr	r3, [pc, #284]	; (2ef24 <f_open+0x528>)
   2ee08:	2294      	movs	r2, #148	; 0x94
   2ee0a:	0092      	lsls	r2, r2, #2
   2ee0c:	4694      	mov	ip, r2
   2ee0e:	44bc      	add	ip, r7
   2ee10:	4463      	add	r3, ip
   2ee12:	4a44      	ldr	r2, [pc, #272]	; (2ef24 <f_open+0x528>)
   2ee14:	2194      	movs	r1, #148	; 0x94
   2ee16:	0089      	lsls	r1, r1, #2
   2ee18:	468c      	mov	ip, r1
   2ee1a:	44bc      	add	ip, r7
   2ee1c:	4462      	add	r2, ip
   2ee1e:	7812      	ldrb	r2, [r2, #0]
   2ee20:	2120      	movs	r1, #32
   2ee22:	430a      	orrs	r2, r1
   2ee24:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2ee26:	2387      	movs	r3, #135	; 0x87
   2ee28:	009b      	lsls	r3, r3, #2
   2ee2a:	18fb      	adds	r3, r7, r3
   2ee2c:	681b      	ldr	r3, [r3, #0]
   2ee2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ee30:	68fb      	ldr	r3, [r7, #12]
   2ee32:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2ee34:	68fb      	ldr	r3, [r7, #12]
   2ee36:	2292      	movs	r2, #146	; 0x92
   2ee38:	0092      	lsls	r2, r2, #2
   2ee3a:	18ba      	adds	r2, r7, r2
   2ee3c:	6812      	ldr	r2, [r2, #0]
   2ee3e:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2ee40:	4b39      	ldr	r3, [pc, #228]	; (2ef28 <f_open+0x52c>)
   2ee42:	18fb      	adds	r3, r7, r3
   2ee44:	781b      	ldrb	r3, [r3, #0]
   2ee46:	2b00      	cmp	r3, #0
   2ee48:	d163      	bne.n	2ef12 <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2ee4a:	68fb      	ldr	r3, [r7, #12]
   2ee4c:	4a35      	ldr	r2, [pc, #212]	; (2ef24 <f_open+0x528>)
   2ee4e:	2194      	movs	r1, #148	; 0x94
   2ee50:	0089      	lsls	r1, r1, #2
   2ee52:	468c      	mov	ip, r1
   2ee54:	44bc      	add	ip, r7
   2ee56:	4462      	add	r2, ip
   2ee58:	7812      	ldrb	r2, [r2, #0]
   2ee5a:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2ee5c:	2392      	movs	r3, #146	; 0x92
   2ee5e:	009b      	lsls	r3, r3, #2
   2ee60:	18fb      	adds	r3, r7, r3
   2ee62:	681b      	ldr	r3, [r3, #0]
   2ee64:	3315      	adds	r3, #21
   2ee66:	781b      	ldrb	r3, [r3, #0]
   2ee68:	021b      	lsls	r3, r3, #8
   2ee6a:	b21a      	sxth	r2, r3
   2ee6c:	2392      	movs	r3, #146	; 0x92
   2ee6e:	009b      	lsls	r3, r3, #2
   2ee70:	18fb      	adds	r3, r7, r3
   2ee72:	681b      	ldr	r3, [r3, #0]
   2ee74:	3314      	adds	r3, #20
   2ee76:	781b      	ldrb	r3, [r3, #0]
   2ee78:	b21b      	sxth	r3, r3
   2ee7a:	4313      	orrs	r3, r2
   2ee7c:	b21b      	sxth	r3, r3
   2ee7e:	b29b      	uxth	r3, r3
   2ee80:	041b      	lsls	r3, r3, #16
   2ee82:	2292      	movs	r2, #146	; 0x92
   2ee84:	0092      	lsls	r2, r2, #2
   2ee86:	18ba      	adds	r2, r7, r2
   2ee88:	6812      	ldr	r2, [r2, #0]
   2ee8a:	321b      	adds	r2, #27
   2ee8c:	7812      	ldrb	r2, [r2, #0]
   2ee8e:	0212      	lsls	r2, r2, #8
   2ee90:	b211      	sxth	r1, r2
   2ee92:	2292      	movs	r2, #146	; 0x92
   2ee94:	0092      	lsls	r2, r2, #2
   2ee96:	18ba      	adds	r2, r7, r2
   2ee98:	6812      	ldr	r2, [r2, #0]
   2ee9a:	321a      	adds	r2, #26
   2ee9c:	7812      	ldrb	r2, [r2, #0]
   2ee9e:	b212      	sxth	r2, r2
   2eea0:	430a      	orrs	r2, r1
   2eea2:	b212      	sxth	r2, r2
   2eea4:	b292      	uxth	r2, r2
   2eea6:	431a      	orrs	r2, r3
   2eea8:	68fb      	ldr	r3, [r7, #12]
   2eeaa:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2eeac:	2392      	movs	r3, #146	; 0x92
   2eeae:	009b      	lsls	r3, r3, #2
   2eeb0:	18fb      	adds	r3, r7, r3
   2eeb2:	681b      	ldr	r3, [r3, #0]
   2eeb4:	331f      	adds	r3, #31
   2eeb6:	781b      	ldrb	r3, [r3, #0]
   2eeb8:	061a      	lsls	r2, r3, #24
   2eeba:	2392      	movs	r3, #146	; 0x92
   2eebc:	009b      	lsls	r3, r3, #2
   2eebe:	18fb      	adds	r3, r7, r3
   2eec0:	681b      	ldr	r3, [r3, #0]
   2eec2:	331e      	adds	r3, #30
   2eec4:	781b      	ldrb	r3, [r3, #0]
   2eec6:	041b      	lsls	r3, r3, #16
   2eec8:	4313      	orrs	r3, r2
   2eeca:	2292      	movs	r2, #146	; 0x92
   2eecc:	0092      	lsls	r2, r2, #2
   2eece:	18ba      	adds	r2, r7, r2
   2eed0:	6812      	ldr	r2, [r2, #0]
   2eed2:	321d      	adds	r2, #29
   2eed4:	7812      	ldrb	r2, [r2, #0]
   2eed6:	0212      	lsls	r2, r2, #8
   2eed8:	4313      	orrs	r3, r2
   2eeda:	2292      	movs	r2, #146	; 0x92
   2eedc:	0092      	lsls	r2, r2, #2
   2eede:	18ba      	adds	r2, r7, r2
   2eee0:	6812      	ldr	r2, [r2, #0]
   2eee2:	321c      	adds	r2, #28
   2eee4:	7812      	ldrb	r2, [r2, #0]
   2eee6:	431a      	orrs	r2, r3
   2eee8:	68fb      	ldr	r3, [r7, #12]
   2eeea:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   2eeec:	68fb      	ldr	r3, [r7, #12]
   2eeee:	2200      	movs	r2, #0
   2eef0:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   2eef2:	68fb      	ldr	r3, [r7, #12]
   2eef4:	2200      	movs	r2, #0
   2eef6:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2eef8:	2387      	movs	r3, #135	; 0x87
   2eefa:	009b      	lsls	r3, r3, #2
   2eefc:	18fb      	adds	r3, r7, r3
   2eefe:	681a      	ldr	r2, [r3, #0]
   2ef00:	68fb      	ldr	r3, [r7, #12]
   2ef02:	601a      	str	r2, [r3, #0]
   2ef04:	2387      	movs	r3, #135	; 0x87
   2ef06:	009b      	lsls	r3, r3, #2
   2ef08:	18fb      	adds	r3, r7, r3
   2ef0a:	681b      	ldr	r3, [r3, #0]
   2ef0c:	88da      	ldrh	r2, [r3, #6]
   2ef0e:	68fb      	ldr	r3, [r7, #12]
   2ef10:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   2ef12:	4b05      	ldr	r3, [pc, #20]	; (2ef28 <f_open+0x52c>)
   2ef14:	18fb      	adds	r3, r7, r3
   2ef16:	781b      	ldrb	r3, [r3, #0]
}
   2ef18:	0018      	movs	r0, r3
   2ef1a:	46bd      	mov	sp, r7
   2ef1c:	2395      	movs	r3, #149	; 0x95
   2ef1e:	009b      	lsls	r3, r3, #2
   2ef20:	449d      	add	sp, r3
   2ef22:	bd90      	pop	{r4, r7, pc}
   2ef24:	fffffdb7 	.word	0xfffffdb7
   2ef28:	0000024f 	.word	0x0000024f

0002ef2c <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2ef2c:	b590      	push	{r4, r7, lr}
   2ef2e:	b08b      	sub	sp, #44	; 0x2c
   2ef30:	af00      	add	r7, sp, #0
   2ef32:	60f8      	str	r0, [r7, #12]
   2ef34:	60b9      	str	r1, [r7, #8]
   2ef36:	607a      	str	r2, [r7, #4]
   2ef38:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   2ef3a:	68bb      	ldr	r3, [r7, #8]
   2ef3c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2ef3e:	683b      	ldr	r3, [r7, #0]
   2ef40:	2200      	movs	r2, #0
   2ef42:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   2ef44:	68fb      	ldr	r3, [r7, #12]
   2ef46:	681a      	ldr	r2, [r3, #0]
   2ef48:	68fb      	ldr	r3, [r7, #12]
   2ef4a:	889b      	ldrh	r3, [r3, #4]
   2ef4c:	2117      	movs	r1, #23
   2ef4e:	187c      	adds	r4, r7, r1
   2ef50:	0019      	movs	r1, r3
   2ef52:	0010      	movs	r0, r2
   2ef54:	4bc3      	ldr	r3, [pc, #780]	; (2f264 <f_write+0x338>)
   2ef56:	4798      	blx	r3
   2ef58:	0003      	movs	r3, r0
   2ef5a:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2ef5c:	2317      	movs	r3, #23
   2ef5e:	18fb      	adds	r3, r7, r3
   2ef60:	781b      	ldrb	r3, [r3, #0]
   2ef62:	2b00      	cmp	r3, #0
   2ef64:	d003      	beq.n	2ef6e <f_write+0x42>
   2ef66:	2317      	movs	r3, #23
   2ef68:	18fb      	adds	r3, r7, r3
   2ef6a:	781b      	ldrb	r3, [r3, #0]
   2ef6c:	e176      	b.n	2f25c <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2ef6e:	68fb      	ldr	r3, [r7, #12]
   2ef70:	799b      	ldrb	r3, [r3, #6]
   2ef72:	b25b      	sxtb	r3, r3
   2ef74:	2b00      	cmp	r3, #0
   2ef76:	da01      	bge.n	2ef7c <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2ef78:	2302      	movs	r3, #2
   2ef7a:	e16f      	b.n	2f25c <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2ef7c:	68fb      	ldr	r3, [r7, #12]
   2ef7e:	799b      	ldrb	r3, [r3, #6]
   2ef80:	001a      	movs	r2, r3
   2ef82:	2302      	movs	r3, #2
   2ef84:	4013      	ands	r3, r2
   2ef86:	d101      	bne.n	2ef8c <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2ef88:	2307      	movs	r3, #7
   2ef8a:	e167      	b.n	2f25c <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2ef8c:	68fb      	ldr	r3, [r7, #12]
   2ef8e:	68da      	ldr	r2, [r3, #12]
   2ef90:	687b      	ldr	r3, [r7, #4]
   2ef92:	18d2      	adds	r2, r2, r3
   2ef94:	68fb      	ldr	r3, [r7, #12]
   2ef96:	68db      	ldr	r3, [r3, #12]
   2ef98:	429a      	cmp	r2, r3
   2ef9a:	d300      	bcc.n	2ef9e <f_write+0x72>
   2ef9c:	e146      	b.n	2f22c <f_write+0x300>
   2ef9e:	2300      	movs	r3, #0
   2efa0:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   2efa2:	e143      	b.n	2f22c <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2efa4:	68fb      	ldr	r3, [r7, #12]
   2efa6:	689b      	ldr	r3, [r3, #8]
   2efa8:	05db      	lsls	r3, r3, #23
   2efaa:	0ddb      	lsrs	r3, r3, #23
   2efac:	d000      	beq.n	2efb0 <f_write+0x84>
   2efae:	e0f6      	b.n	2f19e <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2efb0:	68fb      	ldr	r3, [r7, #12]
   2efb2:	689b      	ldr	r3, [r3, #8]
   2efb4:	0a5b      	lsrs	r3, r3, #9
   2efb6:	b2da      	uxtb	r2, r3
   2efb8:	68fb      	ldr	r3, [r7, #12]
   2efba:	681b      	ldr	r3, [r3, #0]
   2efbc:	789b      	ldrb	r3, [r3, #2]
   2efbe:	3b01      	subs	r3, #1
   2efc0:	b2d9      	uxtb	r1, r3
   2efc2:	2316      	movs	r3, #22
   2efc4:	18fb      	adds	r3, r7, r3
   2efc6:	400a      	ands	r2, r1
   2efc8:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   2efca:	2316      	movs	r3, #22
   2efcc:	18fb      	adds	r3, r7, r3
   2efce:	781b      	ldrb	r3, [r3, #0]
   2efd0:	2b00      	cmp	r3, #0
   2efd2:	d140      	bne.n	2f056 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2efd4:	68fb      	ldr	r3, [r7, #12]
   2efd6:	689b      	ldr	r3, [r3, #8]
   2efd8:	2b00      	cmp	r3, #0
   2efda:	d111      	bne.n	2f000 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   2efdc:	68fb      	ldr	r3, [r7, #12]
   2efde:	691b      	ldr	r3, [r3, #16]
   2efe0:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   2efe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2efe4:	2b00      	cmp	r3, #0
   2efe6:	d115      	bne.n	2f014 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2efe8:	68fb      	ldr	r3, [r7, #12]
   2efea:	681b      	ldr	r3, [r3, #0]
   2efec:	2100      	movs	r1, #0
   2efee:	0018      	movs	r0, r3
   2eff0:	4b9d      	ldr	r3, [pc, #628]	; (2f268 <f_write+0x33c>)
   2eff2:	4798      	blx	r3
   2eff4:	0003      	movs	r3, r0
   2eff6:	627b      	str	r3, [r7, #36]	; 0x24
   2eff8:	68fb      	ldr	r3, [r7, #12]
   2effa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2effc:	611a      	str	r2, [r3, #16]
   2effe:	e009      	b.n	2f014 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2f000:	68fb      	ldr	r3, [r7, #12]
   2f002:	681a      	ldr	r2, [r3, #0]
   2f004:	68fb      	ldr	r3, [r7, #12]
   2f006:	695b      	ldr	r3, [r3, #20]
   2f008:	0019      	movs	r1, r3
   2f00a:	0010      	movs	r0, r2
   2f00c:	4b96      	ldr	r3, [pc, #600]	; (2f268 <f_write+0x33c>)
   2f00e:	4798      	blx	r3
   2f010:	0003      	movs	r3, r0
   2f012:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2f014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f016:	2b00      	cmp	r3, #0
   2f018:	d100      	bne.n	2f01c <f_write+0xf0>
   2f01a:	e10c      	b.n	2f236 <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2f01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f01e:	2b01      	cmp	r3, #1
   2f020:	d109      	bne.n	2f036 <f_write+0x10a>
   2f022:	68fb      	ldr	r3, [r7, #12]
   2f024:	799b      	ldrb	r3, [r3, #6]
   2f026:	2280      	movs	r2, #128	; 0x80
   2f028:	4252      	negs	r2, r2
   2f02a:	4313      	orrs	r3, r2
   2f02c:	b2da      	uxtb	r2, r3
   2f02e:	68fb      	ldr	r3, [r7, #12]
   2f030:	719a      	strb	r2, [r3, #6]
   2f032:	2302      	movs	r3, #2
   2f034:	e112      	b.n	2f25c <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2f036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f038:	3301      	adds	r3, #1
   2f03a:	d109      	bne.n	2f050 <f_write+0x124>
   2f03c:	68fb      	ldr	r3, [r7, #12]
   2f03e:	799b      	ldrb	r3, [r3, #6]
   2f040:	2280      	movs	r2, #128	; 0x80
   2f042:	4252      	negs	r2, r2
   2f044:	4313      	orrs	r3, r2
   2f046:	b2da      	uxtb	r2, r3
   2f048:	68fb      	ldr	r3, [r7, #12]
   2f04a:	719a      	strb	r2, [r3, #6]
   2f04c:	2301      	movs	r3, #1
   2f04e:	e105      	b.n	2f25c <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   2f050:	68fb      	ldr	r3, [r7, #12]
   2f052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f054:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2f056:	68fb      	ldr	r3, [r7, #12]
   2f058:	681b      	ldr	r3, [r3, #0]
   2f05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2f05c:	68fb      	ldr	r3, [r7, #12]
   2f05e:	699b      	ldr	r3, [r3, #24]
   2f060:	429a      	cmp	r2, r3
   2f062:	d111      	bne.n	2f088 <f_write+0x15c>
   2f064:	68fb      	ldr	r3, [r7, #12]
   2f066:	681b      	ldr	r3, [r3, #0]
   2f068:	2100      	movs	r1, #0
   2f06a:	0018      	movs	r0, r3
   2f06c:	4b7f      	ldr	r3, [pc, #508]	; (2f26c <f_write+0x340>)
   2f06e:	4798      	blx	r3
   2f070:	1e03      	subs	r3, r0, #0
   2f072:	d009      	beq.n	2f088 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   2f074:	68fb      	ldr	r3, [r7, #12]
   2f076:	799b      	ldrb	r3, [r3, #6]
   2f078:	2280      	movs	r2, #128	; 0x80
   2f07a:	4252      	negs	r2, r2
   2f07c:	4313      	orrs	r3, r2
   2f07e:	b2da      	uxtb	r2, r3
   2f080:	68fb      	ldr	r3, [r7, #12]
   2f082:	719a      	strb	r2, [r3, #6]
   2f084:	2301      	movs	r3, #1
   2f086:	e0e9      	b.n	2f25c <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2f088:	68fb      	ldr	r3, [r7, #12]
   2f08a:	681a      	ldr	r2, [r3, #0]
   2f08c:	68fb      	ldr	r3, [r7, #12]
   2f08e:	695b      	ldr	r3, [r3, #20]
   2f090:	0019      	movs	r1, r3
   2f092:	0010      	movs	r0, r2
   2f094:	4b76      	ldr	r3, [pc, #472]	; (2f270 <f_write+0x344>)
   2f096:	4798      	blx	r3
   2f098:	0003      	movs	r3, r0
   2f09a:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2f09c:	693b      	ldr	r3, [r7, #16]
   2f09e:	2b00      	cmp	r3, #0
   2f0a0:	d109      	bne.n	2f0b6 <f_write+0x18a>
   2f0a2:	68fb      	ldr	r3, [r7, #12]
   2f0a4:	799b      	ldrb	r3, [r3, #6]
   2f0a6:	2280      	movs	r2, #128	; 0x80
   2f0a8:	4252      	negs	r2, r2
   2f0aa:	4313      	orrs	r3, r2
   2f0ac:	b2da      	uxtb	r2, r3
   2f0ae:	68fb      	ldr	r3, [r7, #12]
   2f0b0:	719a      	strb	r2, [r3, #6]
   2f0b2:	2302      	movs	r3, #2
   2f0b4:	e0d2      	b.n	2f25c <f_write+0x330>
			sect += csect;
   2f0b6:	2316      	movs	r3, #22
   2f0b8:	18fb      	adds	r3, r7, r3
   2f0ba:	781b      	ldrb	r3, [r3, #0]
   2f0bc:	693a      	ldr	r2, [r7, #16]
   2f0be:	18d3      	adds	r3, r2, r3
   2f0c0:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2f0c2:	687b      	ldr	r3, [r7, #4]
   2f0c4:	0a5b      	lsrs	r3, r3, #9
   2f0c6:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   2f0c8:	69fb      	ldr	r3, [r7, #28]
   2f0ca:	2b00      	cmp	r3, #0
   2f0cc:	d048      	beq.n	2f160 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2f0ce:	2316      	movs	r3, #22
   2f0d0:	18fb      	adds	r3, r7, r3
   2f0d2:	781a      	ldrb	r2, [r3, #0]
   2f0d4:	69fb      	ldr	r3, [r7, #28]
   2f0d6:	18d2      	adds	r2, r2, r3
   2f0d8:	68fb      	ldr	r3, [r7, #12]
   2f0da:	681b      	ldr	r3, [r3, #0]
   2f0dc:	789b      	ldrb	r3, [r3, #2]
   2f0de:	429a      	cmp	r2, r3
   2f0e0:	d908      	bls.n	2f0f4 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   2f0e2:	68fb      	ldr	r3, [r7, #12]
   2f0e4:	681b      	ldr	r3, [r3, #0]
   2f0e6:	789b      	ldrb	r3, [r3, #2]
   2f0e8:	001a      	movs	r2, r3
   2f0ea:	2316      	movs	r3, #22
   2f0ec:	18fb      	adds	r3, r7, r3
   2f0ee:	781b      	ldrb	r3, [r3, #0]
   2f0f0:	1ad3      	subs	r3, r2, r3
   2f0f2:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2f0f4:	68fb      	ldr	r3, [r7, #12]
   2f0f6:	681b      	ldr	r3, [r3, #0]
   2f0f8:	7858      	ldrb	r0, [r3, #1]
   2f0fa:	69fb      	ldr	r3, [r7, #28]
   2f0fc:	b2db      	uxtb	r3, r3
   2f0fe:	693a      	ldr	r2, [r7, #16]
   2f100:	69b9      	ldr	r1, [r7, #24]
   2f102:	4c5c      	ldr	r4, [pc, #368]	; (2f274 <f_write+0x348>)
   2f104:	47a0      	blx	r4
   2f106:	1e03      	subs	r3, r0, #0
   2f108:	d009      	beq.n	2f11e <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   2f10a:	68fb      	ldr	r3, [r7, #12]
   2f10c:	799b      	ldrb	r3, [r3, #6]
   2f10e:	2280      	movs	r2, #128	; 0x80
   2f110:	4252      	negs	r2, r2
   2f112:	4313      	orrs	r3, r2
   2f114:	b2da      	uxtb	r2, r3
   2f116:	68fb      	ldr	r3, [r7, #12]
   2f118:	719a      	strb	r2, [r3, #6]
   2f11a:	2301      	movs	r3, #1
   2f11c:	e09e      	b.n	2f25c <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2f11e:	68fb      	ldr	r3, [r7, #12]
   2f120:	681b      	ldr	r3, [r3, #0]
   2f122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2f124:	693b      	ldr	r3, [r7, #16]
   2f126:	1ad2      	subs	r2, r2, r3
   2f128:	69fb      	ldr	r3, [r7, #28]
   2f12a:	429a      	cmp	r2, r3
   2f12c:	d214      	bcs.n	2f158 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2f12e:	68fb      	ldr	r3, [r7, #12]
   2f130:	681b      	ldr	r3, [r3, #0]
   2f132:	3330      	adds	r3, #48	; 0x30
   2f134:	0018      	movs	r0, r3
   2f136:	68fb      	ldr	r3, [r7, #12]
   2f138:	681b      	ldr	r3, [r3, #0]
   2f13a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2f13c:	693b      	ldr	r3, [r7, #16]
   2f13e:	1ad3      	subs	r3, r2, r3
   2f140:	025b      	lsls	r3, r3, #9
   2f142:	69ba      	ldr	r2, [r7, #24]
   2f144:	18d1      	adds	r1, r2, r3
   2f146:	2380      	movs	r3, #128	; 0x80
   2f148:	009b      	lsls	r3, r3, #2
   2f14a:	001a      	movs	r2, r3
   2f14c:	4b4a      	ldr	r3, [pc, #296]	; (2f278 <f_write+0x34c>)
   2f14e:	4798      	blx	r3
					fp->fs->wflag = 0;
   2f150:	68fb      	ldr	r3, [r7, #12]
   2f152:	681b      	ldr	r3, [r3, #0]
   2f154:	2200      	movs	r2, #0
   2f156:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2f158:	69fb      	ldr	r3, [r7, #28]
   2f15a:	025b      	lsls	r3, r3, #9
   2f15c:	623b      	str	r3, [r7, #32]
				continue;
   2f15e:	e051      	b.n	2f204 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2f160:	68fb      	ldr	r3, [r7, #12]
   2f162:	689a      	ldr	r2, [r3, #8]
   2f164:	68fb      	ldr	r3, [r7, #12]
   2f166:	68db      	ldr	r3, [r3, #12]
   2f168:	429a      	cmp	r2, r3
   2f16a:	d315      	bcc.n	2f198 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2f16c:	68fb      	ldr	r3, [r7, #12]
   2f16e:	681b      	ldr	r3, [r3, #0]
   2f170:	2100      	movs	r1, #0
   2f172:	0018      	movs	r0, r3
   2f174:	4b3d      	ldr	r3, [pc, #244]	; (2f26c <f_write+0x340>)
   2f176:	4798      	blx	r3
   2f178:	1e03      	subs	r3, r0, #0
   2f17a:	d009      	beq.n	2f190 <f_write+0x264>
   2f17c:	68fb      	ldr	r3, [r7, #12]
   2f17e:	799b      	ldrb	r3, [r3, #6]
   2f180:	2280      	movs	r2, #128	; 0x80
   2f182:	4252      	negs	r2, r2
   2f184:	4313      	orrs	r3, r2
   2f186:	b2da      	uxtb	r2, r3
   2f188:	68fb      	ldr	r3, [r7, #12]
   2f18a:	719a      	strb	r2, [r3, #6]
   2f18c:	2301      	movs	r3, #1
   2f18e:	e065      	b.n	2f25c <f_write+0x330>
				fp->fs->winsect = sect;
   2f190:	68fb      	ldr	r3, [r7, #12]
   2f192:	681b      	ldr	r3, [r3, #0]
   2f194:	693a      	ldr	r2, [r7, #16]
   2f196:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2f198:	68fb      	ldr	r3, [r7, #12]
   2f19a:	693a      	ldr	r2, [r7, #16]
   2f19c:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2f19e:	68fb      	ldr	r3, [r7, #12]
   2f1a0:	689b      	ldr	r3, [r3, #8]
   2f1a2:	05db      	lsls	r3, r3, #23
   2f1a4:	0ddb      	lsrs	r3, r3, #23
   2f1a6:	2280      	movs	r2, #128	; 0x80
   2f1a8:	0092      	lsls	r2, r2, #2
   2f1aa:	1ad3      	subs	r3, r2, r3
   2f1ac:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   2f1ae:	6a3a      	ldr	r2, [r7, #32]
   2f1b0:	687b      	ldr	r3, [r7, #4]
   2f1b2:	429a      	cmp	r2, r3
   2f1b4:	d901      	bls.n	2f1ba <f_write+0x28e>
   2f1b6:	687b      	ldr	r3, [r7, #4]
   2f1b8:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2f1ba:	68fb      	ldr	r3, [r7, #12]
   2f1bc:	681a      	ldr	r2, [r3, #0]
   2f1be:	68fb      	ldr	r3, [r7, #12]
   2f1c0:	699b      	ldr	r3, [r3, #24]
   2f1c2:	0019      	movs	r1, r3
   2f1c4:	0010      	movs	r0, r2
   2f1c6:	4b29      	ldr	r3, [pc, #164]	; (2f26c <f_write+0x340>)
   2f1c8:	4798      	blx	r3
   2f1ca:	1e03      	subs	r3, r0, #0
   2f1cc:	d009      	beq.n	2f1e2 <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   2f1ce:	68fb      	ldr	r3, [r7, #12]
   2f1d0:	799b      	ldrb	r3, [r3, #6]
   2f1d2:	2280      	movs	r2, #128	; 0x80
   2f1d4:	4252      	negs	r2, r2
   2f1d6:	4313      	orrs	r3, r2
   2f1d8:	b2da      	uxtb	r2, r3
   2f1da:	68fb      	ldr	r3, [r7, #12]
   2f1dc:	719a      	strb	r2, [r3, #6]
   2f1de:	2301      	movs	r3, #1
   2f1e0:	e03c      	b.n	2f25c <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2f1e2:	68fb      	ldr	r3, [r7, #12]
   2f1e4:	681a      	ldr	r2, [r3, #0]
   2f1e6:	68fb      	ldr	r3, [r7, #12]
   2f1e8:	689b      	ldr	r3, [r3, #8]
   2f1ea:	05db      	lsls	r3, r3, #23
   2f1ec:	0ddb      	lsrs	r3, r3, #23
   2f1ee:	3330      	adds	r3, #48	; 0x30
   2f1f0:	18d3      	adds	r3, r2, r3
   2f1f2:	6a3a      	ldr	r2, [r7, #32]
   2f1f4:	69b9      	ldr	r1, [r7, #24]
   2f1f6:	0018      	movs	r0, r3
   2f1f8:	4b1f      	ldr	r3, [pc, #124]	; (2f278 <f_write+0x34c>)
   2f1fa:	4798      	blx	r3
		fp->fs->wflag = 1;
   2f1fc:	68fb      	ldr	r3, [r7, #12]
   2f1fe:	681b      	ldr	r3, [r3, #0]
   2f200:	2201      	movs	r2, #1
   2f202:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2f204:	69ba      	ldr	r2, [r7, #24]
   2f206:	6a3b      	ldr	r3, [r7, #32]
   2f208:	18d3      	adds	r3, r2, r3
   2f20a:	61bb      	str	r3, [r7, #24]
   2f20c:	68fb      	ldr	r3, [r7, #12]
   2f20e:	689a      	ldr	r2, [r3, #8]
   2f210:	6a3b      	ldr	r3, [r7, #32]
   2f212:	18d2      	adds	r2, r2, r3
   2f214:	68fb      	ldr	r3, [r7, #12]
   2f216:	609a      	str	r2, [r3, #8]
   2f218:	683b      	ldr	r3, [r7, #0]
   2f21a:	681a      	ldr	r2, [r3, #0]
   2f21c:	6a3b      	ldr	r3, [r7, #32]
   2f21e:	18d2      	adds	r2, r2, r3
   2f220:	683b      	ldr	r3, [r7, #0]
   2f222:	601a      	str	r2, [r3, #0]
   2f224:	687a      	ldr	r2, [r7, #4]
   2f226:	6a3b      	ldr	r3, [r7, #32]
   2f228:	1ad3      	subs	r3, r2, r3
   2f22a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   2f22c:	687b      	ldr	r3, [r7, #4]
   2f22e:	2b00      	cmp	r3, #0
   2f230:	d000      	beq.n	2f234 <f_write+0x308>
   2f232:	e6b7      	b.n	2efa4 <f_write+0x78>
   2f234:	e000      	b.n	2f238 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2f236:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2f238:	68fb      	ldr	r3, [r7, #12]
   2f23a:	689a      	ldr	r2, [r3, #8]
   2f23c:	68fb      	ldr	r3, [r7, #12]
   2f23e:	68db      	ldr	r3, [r3, #12]
   2f240:	429a      	cmp	r2, r3
   2f242:	d903      	bls.n	2f24c <f_write+0x320>
   2f244:	68fb      	ldr	r3, [r7, #12]
   2f246:	689a      	ldr	r2, [r3, #8]
   2f248:	68fb      	ldr	r3, [r7, #12]
   2f24a:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2f24c:	68fb      	ldr	r3, [r7, #12]
   2f24e:	799b      	ldrb	r3, [r3, #6]
   2f250:	2220      	movs	r2, #32
   2f252:	4313      	orrs	r3, r2
   2f254:	b2da      	uxtb	r2, r3
   2f256:	68fb      	ldr	r3, [r7, #12]
   2f258:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   2f25a:	2300      	movs	r3, #0
}
   2f25c:	0018      	movs	r0, r3
   2f25e:	46bd      	mov	sp, r7
   2f260:	b00b      	add	sp, #44	; 0x2c
   2f262:	bd90      	pop	{r4, r7, pc}
   2f264:	0002e951 	.word	0x0002e951
   2f268:	0002cfdd 	.word	0x0002cfdd
   2f26c:	0002c8d5 	.word	0x0002c8d5
   2f270:	0002cb35 	.word	0x0002cb35
   2f274:	0002c5c1 	.word	0x0002c5c1
   2f278:	0002c7f1 	.word	0x0002c7f1

0002f27c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2f27c:	b590      	push	{r4, r7, lr}
   2f27e:	b087      	sub	sp, #28
   2f280:	af00      	add	r7, sp, #0
   2f282:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2f284:	687b      	ldr	r3, [r7, #4]
   2f286:	681a      	ldr	r2, [r3, #0]
   2f288:	687b      	ldr	r3, [r7, #4]
   2f28a:	889b      	ldrh	r3, [r3, #4]
   2f28c:	2117      	movs	r1, #23
   2f28e:	187c      	adds	r4, r7, r1
   2f290:	0019      	movs	r1, r3
   2f292:	0010      	movs	r0, r2
   2f294:	4b55      	ldr	r3, [pc, #340]	; (2f3ec <f_sync+0x170>)
   2f296:	4798      	blx	r3
   2f298:	0003      	movs	r3, r0
   2f29a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2f29c:	2317      	movs	r3, #23
   2f29e:	18fb      	adds	r3, r7, r3
   2f2a0:	781b      	ldrb	r3, [r3, #0]
   2f2a2:	2b00      	cmp	r3, #0
   2f2a4:	d000      	beq.n	2f2a8 <f_sync+0x2c>
   2f2a6:	e09a      	b.n	2f3de <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2f2a8:	687b      	ldr	r3, [r7, #4]
   2f2aa:	799b      	ldrb	r3, [r3, #6]
   2f2ac:	001a      	movs	r2, r3
   2f2ae:	2320      	movs	r3, #32
   2f2b0:	4013      	ands	r3, r2
   2f2b2:	d100      	bne.n	2f2b6 <f_sync+0x3a>
   2f2b4:	e093      	b.n	2f3de <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   2f2b6:	687b      	ldr	r3, [r7, #4]
   2f2b8:	681a      	ldr	r2, [r3, #0]
   2f2ba:	687b      	ldr	r3, [r7, #4]
   2f2bc:	69db      	ldr	r3, [r3, #28]
   2f2be:	2117      	movs	r1, #23
   2f2c0:	187c      	adds	r4, r7, r1
   2f2c2:	0019      	movs	r1, r3
   2f2c4:	0010      	movs	r0, r2
   2f2c6:	4b4a      	ldr	r3, [pc, #296]	; (2f3f0 <f_sync+0x174>)
   2f2c8:	4798      	blx	r3
   2f2ca:	0003      	movs	r3, r0
   2f2cc:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   2f2ce:	2317      	movs	r3, #23
   2f2d0:	18fb      	adds	r3, r7, r3
   2f2d2:	781b      	ldrb	r3, [r3, #0]
   2f2d4:	2b00      	cmp	r3, #0
   2f2d6:	d000      	beq.n	2f2da <f_sync+0x5e>
   2f2d8:	e081      	b.n	2f3de <f_sync+0x162>
				dir = fp->dir_ptr;
   2f2da:	687b      	ldr	r3, [r7, #4]
   2f2dc:	6a1b      	ldr	r3, [r3, #32]
   2f2de:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2f2e0:	693b      	ldr	r3, [r7, #16]
   2f2e2:	330b      	adds	r3, #11
   2f2e4:	693a      	ldr	r2, [r7, #16]
   2f2e6:	320b      	adds	r2, #11
   2f2e8:	7812      	ldrb	r2, [r2, #0]
   2f2ea:	2120      	movs	r1, #32
   2f2ec:	430a      	orrs	r2, r1
   2f2ee:	b2d2      	uxtb	r2, r2
   2f2f0:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2f2f2:	693b      	ldr	r3, [r7, #16]
   2f2f4:	331c      	adds	r3, #28
   2f2f6:	001a      	movs	r2, r3
   2f2f8:	687b      	ldr	r3, [r7, #4]
   2f2fa:	68db      	ldr	r3, [r3, #12]
   2f2fc:	b2db      	uxtb	r3, r3
   2f2fe:	7013      	strb	r3, [r2, #0]
   2f300:	693b      	ldr	r3, [r7, #16]
   2f302:	331d      	adds	r3, #29
   2f304:	001a      	movs	r2, r3
   2f306:	687b      	ldr	r3, [r7, #4]
   2f308:	68db      	ldr	r3, [r3, #12]
   2f30a:	b29b      	uxth	r3, r3
   2f30c:	0a1b      	lsrs	r3, r3, #8
   2f30e:	b29b      	uxth	r3, r3
   2f310:	b2db      	uxtb	r3, r3
   2f312:	7013      	strb	r3, [r2, #0]
   2f314:	693b      	ldr	r3, [r7, #16]
   2f316:	331e      	adds	r3, #30
   2f318:	001a      	movs	r2, r3
   2f31a:	687b      	ldr	r3, [r7, #4]
   2f31c:	68db      	ldr	r3, [r3, #12]
   2f31e:	0c1b      	lsrs	r3, r3, #16
   2f320:	b2db      	uxtb	r3, r3
   2f322:	7013      	strb	r3, [r2, #0]
   2f324:	693b      	ldr	r3, [r7, #16]
   2f326:	331f      	adds	r3, #31
   2f328:	001a      	movs	r2, r3
   2f32a:	687b      	ldr	r3, [r7, #4]
   2f32c:	68db      	ldr	r3, [r3, #12]
   2f32e:	0e1b      	lsrs	r3, r3, #24
   2f330:	b2db      	uxtb	r3, r3
   2f332:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2f334:	693b      	ldr	r3, [r7, #16]
   2f336:	331a      	adds	r3, #26
   2f338:	001a      	movs	r2, r3
   2f33a:	687b      	ldr	r3, [r7, #4]
   2f33c:	691b      	ldr	r3, [r3, #16]
   2f33e:	b2db      	uxtb	r3, r3
   2f340:	7013      	strb	r3, [r2, #0]
   2f342:	693b      	ldr	r3, [r7, #16]
   2f344:	331b      	adds	r3, #27
   2f346:	001a      	movs	r2, r3
   2f348:	687b      	ldr	r3, [r7, #4]
   2f34a:	691b      	ldr	r3, [r3, #16]
   2f34c:	b29b      	uxth	r3, r3
   2f34e:	0a1b      	lsrs	r3, r3, #8
   2f350:	b29b      	uxth	r3, r3
   2f352:	b2db      	uxtb	r3, r3
   2f354:	7013      	strb	r3, [r2, #0]
   2f356:	693b      	ldr	r3, [r7, #16]
   2f358:	3314      	adds	r3, #20
   2f35a:	001a      	movs	r2, r3
   2f35c:	687b      	ldr	r3, [r7, #4]
   2f35e:	691b      	ldr	r3, [r3, #16]
   2f360:	0c1b      	lsrs	r3, r3, #16
   2f362:	b2db      	uxtb	r3, r3
   2f364:	7013      	strb	r3, [r2, #0]
   2f366:	693b      	ldr	r3, [r7, #16]
   2f368:	3315      	adds	r3, #21
   2f36a:	001a      	movs	r2, r3
   2f36c:	687b      	ldr	r3, [r7, #4]
   2f36e:	691b      	ldr	r3, [r3, #16]
   2f370:	0c1b      	lsrs	r3, r3, #16
   2f372:	b29b      	uxth	r3, r3
   2f374:	0a1b      	lsrs	r3, r3, #8
   2f376:	b29b      	uxth	r3, r3
   2f378:	b2db      	uxtb	r3, r3
   2f37a:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   2f37c:	4b1d      	ldr	r3, [pc, #116]	; (2f3f4 <f_sync+0x178>)
   2f37e:	4798      	blx	r3
   2f380:	0003      	movs	r3, r0
   2f382:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   2f384:	693b      	ldr	r3, [r7, #16]
   2f386:	3316      	adds	r3, #22
   2f388:	68fa      	ldr	r2, [r7, #12]
   2f38a:	b2d2      	uxtb	r2, r2
   2f38c:	701a      	strb	r2, [r3, #0]
   2f38e:	693b      	ldr	r3, [r7, #16]
   2f390:	3317      	adds	r3, #23
   2f392:	68fa      	ldr	r2, [r7, #12]
   2f394:	b292      	uxth	r2, r2
   2f396:	0a12      	lsrs	r2, r2, #8
   2f398:	b292      	uxth	r2, r2
   2f39a:	b2d2      	uxtb	r2, r2
   2f39c:	701a      	strb	r2, [r3, #0]
   2f39e:	693b      	ldr	r3, [r7, #16]
   2f3a0:	3318      	adds	r3, #24
   2f3a2:	68fa      	ldr	r2, [r7, #12]
   2f3a4:	0c12      	lsrs	r2, r2, #16
   2f3a6:	b2d2      	uxtb	r2, r2
   2f3a8:	701a      	strb	r2, [r3, #0]
   2f3aa:	693b      	ldr	r3, [r7, #16]
   2f3ac:	3319      	adds	r3, #25
   2f3ae:	68fa      	ldr	r2, [r7, #12]
   2f3b0:	0e12      	lsrs	r2, r2, #24
   2f3b2:	b2d2      	uxtb	r2, r2
   2f3b4:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   2f3b6:	687b      	ldr	r3, [r7, #4]
   2f3b8:	799b      	ldrb	r3, [r3, #6]
   2f3ba:	2220      	movs	r2, #32
   2f3bc:	4393      	bics	r3, r2
   2f3be:	b2da      	uxtb	r2, r3
   2f3c0:	687b      	ldr	r3, [r7, #4]
   2f3c2:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   2f3c4:	687b      	ldr	r3, [r7, #4]
   2f3c6:	681b      	ldr	r3, [r3, #0]
   2f3c8:	2201      	movs	r2, #1
   2f3ca:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   2f3cc:	687b      	ldr	r3, [r7, #4]
   2f3ce:	681b      	ldr	r3, [r3, #0]
   2f3d0:	2217      	movs	r2, #23
   2f3d2:	18bc      	adds	r4, r7, r2
   2f3d4:	0018      	movs	r0, r3
   2f3d6:	4b08      	ldr	r3, [pc, #32]	; (2f3f8 <f_sync+0x17c>)
   2f3d8:	4798      	blx	r3
   2f3da:	0003      	movs	r3, r0
   2f3dc:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   2f3de:	2317      	movs	r3, #23
   2f3e0:	18fb      	adds	r3, r7, r3
   2f3e2:	781b      	ldrb	r3, [r3, #0]
}
   2f3e4:	0018      	movs	r0, r3
   2f3e6:	46bd      	mov	sp, r7
   2f3e8:	b007      	add	sp, #28
   2f3ea:	bd90      	pop	{r4, r7, pc}
   2f3ec:	0002e951 	.word	0x0002e951
   2f3f0:	0002c8d5 	.word	0x0002c8d5
   2f3f4:	0002c791 	.word	0x0002c791
   2f3f8:	0002c99d 	.word	0x0002c99d

0002f3fc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   2f3fc:	b590      	push	{r4, r7, lr}
   2f3fe:	b085      	sub	sp, #20
   2f400:	af00      	add	r7, sp, #0
   2f402:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   2f404:	230f      	movs	r3, #15
   2f406:	18fc      	adds	r4, r7, r3
   2f408:	687b      	ldr	r3, [r7, #4]
   2f40a:	0018      	movs	r0, r3
   2f40c:	4b09      	ldr	r3, [pc, #36]	; (2f434 <f_close+0x38>)
   2f40e:	4798      	blx	r3
   2f410:	0003      	movs	r3, r0
   2f412:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2f414:	230f      	movs	r3, #15
   2f416:	18fb      	adds	r3, r7, r3
   2f418:	781b      	ldrb	r3, [r3, #0]
   2f41a:	2b00      	cmp	r3, #0
   2f41c:	d102      	bne.n	2f424 <f_close+0x28>
   2f41e:	687b      	ldr	r3, [r7, #4]
   2f420:	2200      	movs	r2, #0
   2f422:	601a      	str	r2, [r3, #0]
	return res;
   2f424:	230f      	movs	r3, #15
   2f426:	18fb      	adds	r3, r7, r3
   2f428:	781b      	ldrb	r3, [r3, #0]
#endif
}
   2f42a:	0018      	movs	r0, r3
   2f42c:	46bd      	mov	sp, r7
   2f42e:	b005      	add	sp, #20
   2f430:	bd90      	pop	{r4, r7, pc}
   2f432:	46c0      	nop			; (mov r8, r8)
   2f434:	0002f27d 	.word	0x0002f27d

0002f438 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   2f438:	b580      	push	{r7, lr}
   2f43a:	b084      	sub	sp, #16
   2f43c:	af00      	add	r7, sp, #0
   2f43e:	0002      	movs	r2, r0
   2f440:	6039      	str	r1, [r7, #0]
   2f442:	1dbb      	adds	r3, r7, #6
   2f444:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   2f446:	1dbb      	adds	r3, r7, #6
   2f448:	881b      	ldrh	r3, [r3, #0]
   2f44a:	2b7f      	cmp	r3, #127	; 0x7f
   2f44c:	d805      	bhi.n	2f45a <ff_convert+0x22>
		c = src;
   2f44e:	230e      	movs	r3, #14
   2f450:	18fb      	adds	r3, r7, r3
   2f452:	1dba      	adds	r2, r7, #6
   2f454:	8812      	ldrh	r2, [r2, #0]
   2f456:	801a      	strh	r2, [r3, #0]
   2f458:	e03a      	b.n	2f4d0 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   2f45a:	683b      	ldr	r3, [r7, #0]
   2f45c:	2b00      	cmp	r3, #0
   2f45e:	d010      	beq.n	2f482 <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   2f460:	1dbb      	adds	r3, r7, #6
   2f462:	881b      	ldrh	r3, [r3, #0]
   2f464:	2bff      	cmp	r3, #255	; 0xff
   2f466:	d807      	bhi.n	2f478 <ff_convert+0x40>
   2f468:	1dbb      	adds	r3, r7, #6
   2f46a:	881b      	ldrh	r3, [r3, #0]
   2f46c:	3b80      	subs	r3, #128	; 0x80
   2f46e:	001a      	movs	r2, r3
   2f470:	4b1b      	ldr	r3, [pc, #108]	; (2f4e0 <ff_convert+0xa8>)
   2f472:	0052      	lsls	r2, r2, #1
   2f474:	5ad2      	ldrh	r2, [r2, r3]
   2f476:	e000      	b.n	2f47a <ff_convert+0x42>
   2f478:	2200      	movs	r2, #0
   2f47a:	230e      	movs	r3, #14
   2f47c:	18fb      	adds	r3, r7, r3
   2f47e:	801a      	strh	r2, [r3, #0]
   2f480:	e026      	b.n	2f4d0 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   2f482:	230e      	movs	r3, #14
   2f484:	18fb      	adds	r3, r7, r3
   2f486:	2200      	movs	r2, #0
   2f488:	801a      	strh	r2, [r3, #0]
   2f48a:	e010      	b.n	2f4ae <ff_convert+0x76>
				if (src == Tbl[c]) break;
   2f48c:	230e      	movs	r3, #14
   2f48e:	18fb      	adds	r3, r7, r3
   2f490:	881a      	ldrh	r2, [r3, #0]
   2f492:	4b13      	ldr	r3, [pc, #76]	; (2f4e0 <ff_convert+0xa8>)
   2f494:	0052      	lsls	r2, r2, #1
   2f496:	5ad3      	ldrh	r3, [r2, r3]
   2f498:	1dba      	adds	r2, r7, #6
   2f49a:	8812      	ldrh	r2, [r2, #0]
   2f49c:	429a      	cmp	r2, r3
   2f49e:	d00c      	beq.n	2f4ba <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   2f4a0:	230e      	movs	r3, #14
   2f4a2:	18fb      	adds	r3, r7, r3
   2f4a4:	881a      	ldrh	r2, [r3, #0]
   2f4a6:	230e      	movs	r3, #14
   2f4a8:	18fb      	adds	r3, r7, r3
   2f4aa:	3201      	adds	r2, #1
   2f4ac:	801a      	strh	r2, [r3, #0]
   2f4ae:	230e      	movs	r3, #14
   2f4b0:	18fb      	adds	r3, r7, r3
   2f4b2:	881b      	ldrh	r3, [r3, #0]
   2f4b4:	2b7f      	cmp	r3, #127	; 0x7f
   2f4b6:	d9e9      	bls.n	2f48c <ff_convert+0x54>
   2f4b8:	e000      	b.n	2f4bc <ff_convert+0x84>
				if (src == Tbl[c]) break;
   2f4ba:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   2f4bc:	230e      	movs	r3, #14
   2f4be:	18fb      	adds	r3, r7, r3
   2f4c0:	881b      	ldrh	r3, [r3, #0]
   2f4c2:	3380      	adds	r3, #128	; 0x80
   2f4c4:	b29a      	uxth	r2, r3
   2f4c6:	230e      	movs	r3, #14
   2f4c8:	18fb      	adds	r3, r7, r3
   2f4ca:	21ff      	movs	r1, #255	; 0xff
   2f4cc:	400a      	ands	r2, r1
   2f4ce:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   2f4d0:	230e      	movs	r3, #14
   2f4d2:	18fb      	adds	r3, r7, r3
   2f4d4:	881b      	ldrh	r3, [r3, #0]
}
   2f4d6:	0018      	movs	r0, r3
   2f4d8:	46bd      	mov	sp, r7
   2f4da:	b004      	add	sp, #16
   2f4dc:	bd80      	pop	{r7, pc}
   2f4de:	46c0      	nop			; (mov r8, r8)
   2f4e0:	0003b4f8 	.word	0x0003b4f8

0002f4e4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   2f4e4:	b580      	push	{r7, lr}
   2f4e6:	b084      	sub	sp, #16
   2f4e8:	af00      	add	r7, sp, #0
   2f4ea:	0002      	movs	r2, r0
   2f4ec:	1dbb      	adds	r3, r7, #6
   2f4ee:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   2f4f0:	2300      	movs	r3, #0
   2f4f2:	60fb      	str	r3, [r7, #12]
   2f4f4:	e002      	b.n	2f4fc <ff_wtoupper+0x18>
   2f4f6:	68fb      	ldr	r3, [r7, #12]
   2f4f8:	3301      	adds	r3, #1
   2f4fa:	60fb      	str	r3, [r7, #12]
   2f4fc:	4b0f      	ldr	r3, [pc, #60]	; (2f53c <ff_wtoupper+0x58>)
   2f4fe:	68fa      	ldr	r2, [r7, #12]
   2f500:	0052      	lsls	r2, r2, #1
   2f502:	5ad3      	ldrh	r3, [r2, r3]
   2f504:	2b00      	cmp	r3, #0
   2f506:	d007      	beq.n	2f518 <ff_wtoupper+0x34>
   2f508:	4b0c      	ldr	r3, [pc, #48]	; (2f53c <ff_wtoupper+0x58>)
   2f50a:	68fa      	ldr	r2, [r7, #12]
   2f50c:	0052      	lsls	r2, r2, #1
   2f50e:	5ad3      	ldrh	r3, [r2, r3]
   2f510:	1dba      	adds	r2, r7, #6
   2f512:	8812      	ldrh	r2, [r2, #0]
   2f514:	429a      	cmp	r2, r3
   2f516:	d1ee      	bne.n	2f4f6 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   2f518:	4b08      	ldr	r3, [pc, #32]	; (2f53c <ff_wtoupper+0x58>)
   2f51a:	68fa      	ldr	r2, [r7, #12]
   2f51c:	0052      	lsls	r2, r2, #1
   2f51e:	5ad3      	ldrh	r3, [r2, r3]
   2f520:	2b00      	cmp	r3, #0
   2f522:	d004      	beq.n	2f52e <ff_wtoupper+0x4a>
   2f524:	4b06      	ldr	r3, [pc, #24]	; (2f540 <ff_wtoupper+0x5c>)
   2f526:	68fa      	ldr	r2, [r7, #12]
   2f528:	0052      	lsls	r2, r2, #1
   2f52a:	5ad3      	ldrh	r3, [r2, r3]
   2f52c:	e001      	b.n	2f532 <ff_wtoupper+0x4e>
   2f52e:	1dbb      	adds	r3, r7, #6
   2f530:	881b      	ldrh	r3, [r3, #0]
}
   2f532:	0018      	movs	r0, r3
   2f534:	46bd      	mov	sp, r7
   2f536:	b004      	add	sp, #16
   2f538:	bd80      	pop	{r7, pc}
   2f53a:	46c0      	nop			; (mov r8, r8)
   2f53c:	0003b5f8 	.word	0x0003b5f8
   2f540:	0003b7d8 	.word	0x0003b7d8

0002f544 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2f544:	b580      	push	{r7, lr}
   2f546:	b084      	sub	sp, #16
   2f548:	af00      	add	r7, sp, #0
   2f54a:	60f8      	str	r0, [r7, #12]
   2f54c:	60b9      	str	r1, [r7, #8]
   2f54e:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2f550:	68fb      	ldr	r3, [r7, #12]
   2f552:	68ba      	ldr	r2, [r7, #8]
   2f554:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2f556:	68fb      	ldr	r3, [r7, #12]
   2f558:	687a      	ldr	r2, [r7, #4]
   2f55a:	601a      	str	r2, [r3, #0]
}
   2f55c:	46c0      	nop			; (mov r8, r8)
   2f55e:	46bd      	mov	sp, r7
   2f560:	b004      	add	sp, #16
   2f562:	bd80      	pop	{r7, pc}

0002f564 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2f564:	b580      	push	{r7, lr}
   2f566:	b082      	sub	sp, #8
   2f568:	af00      	add	r7, sp, #0
   2f56a:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2f56c:	687b      	ldr	r3, [r7, #4]
   2f56e:	681b      	ldr	r3, [r3, #0]
   2f570:	4a07      	ldr	r2, [pc, #28]	; (2f590 <getNextPacketId+0x2c>)
   2f572:	4293      	cmp	r3, r2
   2f574:	d003      	beq.n	2f57e <getNextPacketId+0x1a>
   2f576:	687b      	ldr	r3, [r7, #4]
   2f578:	681b      	ldr	r3, [r3, #0]
   2f57a:	1c5a      	adds	r2, r3, #1
   2f57c:	e000      	b.n	2f580 <getNextPacketId+0x1c>
   2f57e:	2201      	movs	r2, #1
   2f580:	687b      	ldr	r3, [r7, #4]
   2f582:	601a      	str	r2, [r3, #0]
   2f584:	687b      	ldr	r3, [r7, #4]
   2f586:	681b      	ldr	r3, [r3, #0]
}
   2f588:	0018      	movs	r0, r3
   2f58a:	46bd      	mov	sp, r7
   2f58c:	b002      	add	sp, #8
   2f58e:	bd80      	pop	{r7, pc}
   2f590:	0000ffff 	.word	0x0000ffff

0002f594 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2f594:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f596:	b087      	sub	sp, #28
   2f598:	af00      	add	r7, sp, #0
   2f59a:	60f8      	str	r0, [r7, #12]
   2f59c:	60b9      	str	r1, [r7, #8]
   2f59e:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2f5a0:	2301      	movs	r3, #1
   2f5a2:	425b      	negs	r3, r3
   2f5a4:	617b      	str	r3, [r7, #20]
        sent = 0;
   2f5a6:	2300      	movs	r3, #0
   2f5a8:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2f5aa:	e01a      	b.n	2f5e2 <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2f5ac:	68fb      	ldr	r3, [r7, #12]
   2f5ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f5b0:	68dc      	ldr	r4, [r3, #12]
   2f5b2:	68fb      	ldr	r3, [r7, #12]
   2f5b4:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2f5b6:	68fb      	ldr	r3, [r7, #12]
   2f5b8:	691a      	ldr	r2, [r3, #16]
   2f5ba:	693b      	ldr	r3, [r7, #16]
   2f5bc:	18d6      	adds	r6, r2, r3
   2f5be:	687b      	ldr	r3, [r7, #4]
   2f5c0:	0018      	movs	r0, r3
   2f5c2:	4b1a      	ldr	r3, [pc, #104]	; (2f62c <sendPacket+0x98>)
   2f5c4:	4798      	blx	r3
   2f5c6:	0003      	movs	r3, r0
   2f5c8:	68ba      	ldr	r2, [r7, #8]
   2f5ca:	0031      	movs	r1, r6
   2f5cc:	0028      	movs	r0, r5
   2f5ce:	47a0      	blx	r4
   2f5d0:	0003      	movs	r3, r0
   2f5d2:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2f5d4:	697b      	ldr	r3, [r7, #20]
   2f5d6:	2b00      	cmp	r3, #0
   2f5d8:	db0e      	blt.n	2f5f8 <sendPacket+0x64>
            break;
        sent += rc;
   2f5da:	693a      	ldr	r2, [r7, #16]
   2f5dc:	697b      	ldr	r3, [r7, #20]
   2f5de:	18d3      	adds	r3, r2, r3
   2f5e0:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2f5e2:	693a      	ldr	r2, [r7, #16]
   2f5e4:	68bb      	ldr	r3, [r7, #8]
   2f5e6:	429a      	cmp	r2, r3
   2f5e8:	da07      	bge.n	2f5fa <sendPacket+0x66>
   2f5ea:	687b      	ldr	r3, [r7, #4]
   2f5ec:	0018      	movs	r0, r3
   2f5ee:	4b10      	ldr	r3, [pc, #64]	; (2f630 <sendPacket+0x9c>)
   2f5f0:	4798      	blx	r3
   2f5f2:	1e03      	subs	r3, r0, #0
   2f5f4:	d0da      	beq.n	2f5ac <sendPacket+0x18>
   2f5f6:	e000      	b.n	2f5fa <sendPacket+0x66>
            break;
   2f5f8:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2f5fa:	693a      	ldr	r2, [r7, #16]
   2f5fc:	68bb      	ldr	r3, [r7, #8]
   2f5fe:	429a      	cmp	r2, r3
   2f600:	d10b      	bne.n	2f61a <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2f602:	68fb      	ldr	r3, [r7, #12]
   2f604:	3354      	adds	r3, #84	; 0x54
   2f606:	001a      	movs	r2, r3
   2f608:	68fb      	ldr	r3, [r7, #12]
   2f60a:	699b      	ldr	r3, [r3, #24]
   2f60c:	0019      	movs	r1, r3
   2f60e:	0010      	movs	r0, r2
   2f610:	4b08      	ldr	r3, [pc, #32]	; (2f634 <sendPacket+0xa0>)
   2f612:	4798      	blx	r3
        rc = SUCCESS;
   2f614:	2300      	movs	r3, #0
   2f616:	617b      	str	r3, [r7, #20]
   2f618:	e002      	b.n	2f620 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2f61a:	2301      	movs	r3, #1
   2f61c:	425b      	negs	r3, r3
   2f61e:	617b      	str	r3, [r7, #20]
    return rc;
   2f620:	697b      	ldr	r3, [r7, #20]
}
   2f622:	0018      	movs	r0, r3
   2f624:	46bd      	mov	sp, r7
   2f626:	b007      	add	sp, #28
   2f628:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f62a:	46c0      	nop			; (mov r8, r8)
   2f62c:	000303f5 	.word	0x000303f5
   2f630:	00030379 	.word	0x00030379
   2f634:	000303cd 	.word	0x000303cd

0002f638 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2f638:	b580      	push	{r7, lr}
   2f63a:	b086      	sub	sp, #24
   2f63c:	af00      	add	r7, sp, #0
   2f63e:	60f8      	str	r0, [r7, #12]
   2f640:	60b9      	str	r1, [r7, #8]
   2f642:	607a      	str	r2, [r7, #4]
   2f644:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2f646:	68fb      	ldr	r3, [r7, #12]
   2f648:	68ba      	ldr	r2, [r7, #8]
   2f64a:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f64c:	2300      	movs	r3, #0
   2f64e:	617b      	str	r3, [r7, #20]
   2f650:	e00a      	b.n	2f668 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2f652:	68fa      	ldr	r2, [r7, #12]
   2f654:	697b      	ldr	r3, [r7, #20]
   2f656:	3304      	adds	r3, #4
   2f658:	00db      	lsls	r3, r3, #3
   2f65a:	18d3      	adds	r3, r2, r3
   2f65c:	3304      	adds	r3, #4
   2f65e:	2200      	movs	r2, #0
   2f660:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f662:	697b      	ldr	r3, [r7, #20]
   2f664:	3301      	adds	r3, #1
   2f666:	617b      	str	r3, [r7, #20]
   2f668:	697b      	ldr	r3, [r7, #20]
   2f66a:	2b04      	cmp	r3, #4
   2f66c:	ddf1      	ble.n	2f652 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2f66e:	68fb      	ldr	r3, [r7, #12]
   2f670:	687a      	ldr	r2, [r7, #4]
   2f672:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2f674:	68fb      	ldr	r3, [r7, #12]
   2f676:	683a      	ldr	r2, [r7, #0]
   2f678:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2f67a:	68fb      	ldr	r3, [r7, #12]
   2f67c:	6a3a      	ldr	r2, [r7, #32]
   2f67e:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2f680:	68fb      	ldr	r3, [r7, #12]
   2f682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f684:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2f686:	68fb      	ldr	r3, [r7, #12]
   2f688:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f68a:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2f68c:	68fb      	ldr	r3, [r7, #12]
   2f68e:	2200      	movs	r2, #0
   2f690:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2f692:	68fb      	ldr	r3, [r7, #12]
   2f694:	2200      	movs	r2, #0
   2f696:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2f698:	68fb      	ldr	r3, [r7, #12]
   2f69a:	2200      	movs	r2, #0
   2f69c:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2f69e:	68fb      	ldr	r3, [r7, #12]
   2f6a0:	2201      	movs	r2, #1
   2f6a2:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2f6a4:	68fb      	ldr	r3, [r7, #12]
   2f6a6:	3354      	adds	r3, #84	; 0x54
   2f6a8:	0018      	movs	r0, r3
   2f6aa:	4b03      	ldr	r3, [pc, #12]	; (2f6b8 <MQTTClientInit+0x80>)
   2f6ac:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2f6ae:	46c0      	nop			; (mov r8, r8)
   2f6b0:	46bd      	mov	sp, r7
   2f6b2:	b006      	add	sp, #24
   2f6b4:	bd80      	pop	{r7, pc}
   2f6b6:	46c0      	nop			; (mov r8, r8)
   2f6b8:	0003041d 	.word	0x0003041d

0002f6bc <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2f6bc:	b590      	push	{r4, r7, lr}
   2f6be:	b08b      	sub	sp, #44	; 0x2c
   2f6c0:	af00      	add	r7, sp, #0
   2f6c2:	60f8      	str	r0, [r7, #12]
   2f6c4:	60b9      	str	r1, [r7, #8]
   2f6c6:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2f6c8:	2301      	movs	r3, #1
   2f6ca:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2f6cc:	2300      	movs	r3, #0
   2f6ce:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2f6d0:	2304      	movs	r3, #4
   2f6d2:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2f6d4:	68bb      	ldr	r3, [r7, #8]
   2f6d6:	2200      	movs	r2, #0
   2f6d8:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2f6da:	2301      	movs	r3, #1
   2f6dc:	425b      	negs	r3, r3
   2f6de:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2f6e0:	6a3b      	ldr	r3, [r7, #32]
   2f6e2:	3301      	adds	r3, #1
   2f6e4:	623b      	str	r3, [r7, #32]
   2f6e6:	6a3a      	ldr	r2, [r7, #32]
   2f6e8:	69fb      	ldr	r3, [r7, #28]
   2f6ea:	429a      	cmp	r2, r3
   2f6ec:	dd03      	ble.n	2f6f6 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2f6ee:	2301      	movs	r3, #1
   2f6f0:	425b      	negs	r3, r3
   2f6f2:	61bb      	str	r3, [r7, #24]
            goto exit;
   2f6f4:	e026      	b.n	2f744 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2f6f6:	68fb      	ldr	r3, [r7, #12]
   2f6f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f6fa:	689c      	ldr	r4, [r3, #8]
   2f6fc:	68fb      	ldr	r3, [r7, #12]
   2f6fe:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2f700:	687b      	ldr	r3, [r7, #4]
   2f702:	2217      	movs	r2, #23
   2f704:	18b9      	adds	r1, r7, r2
   2f706:	2201      	movs	r2, #1
   2f708:	47a0      	blx	r4
   2f70a:	0003      	movs	r3, r0
   2f70c:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2f70e:	69bb      	ldr	r3, [r7, #24]
   2f710:	2b01      	cmp	r3, #1
   2f712:	d116      	bne.n	2f742 <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2f714:	68bb      	ldr	r3, [r7, #8]
   2f716:	681a      	ldr	r2, [r3, #0]
   2f718:	2317      	movs	r3, #23
   2f71a:	18fb      	adds	r3, r7, r3
   2f71c:	781b      	ldrb	r3, [r3, #0]
   2f71e:	0019      	movs	r1, r3
   2f720:	237f      	movs	r3, #127	; 0x7f
   2f722:	400b      	ands	r3, r1
   2f724:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2f726:	434b      	muls	r3, r1
   2f728:	18d2      	adds	r2, r2, r3
   2f72a:	68bb      	ldr	r3, [r7, #8]
   2f72c:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2f72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f730:	01db      	lsls	r3, r3, #7
   2f732:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2f734:	2317      	movs	r3, #23
   2f736:	18fb      	adds	r3, r7, r3
   2f738:	781b      	ldrb	r3, [r3, #0]
   2f73a:	b25b      	sxtb	r3, r3
   2f73c:	2b00      	cmp	r3, #0
   2f73e:	dbcc      	blt.n	2f6da <decodePacket+0x1e>
   2f740:	e000      	b.n	2f744 <decodePacket+0x88>
            goto exit;
   2f742:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2f744:	6a3b      	ldr	r3, [r7, #32]
}
   2f746:	0018      	movs	r0, r3
   2f748:	46bd      	mov	sp, r7
   2f74a:	b00b      	add	sp, #44	; 0x2c
   2f74c:	bd90      	pop	{r4, r7, pc}
	...

0002f750 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2f750:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f752:	46c6      	mov	lr, r8
   2f754:	b500      	push	{lr}
   2f756:	b086      	sub	sp, #24
   2f758:	af00      	add	r7, sp, #0
   2f75a:	6078      	str	r0, [r7, #4]
   2f75c:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2f75e:	2301      	movs	r3, #1
   2f760:	425b      	negs	r3, r3
   2f762:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2f764:	2300      	movs	r3, #0
   2f766:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2f768:	2300      	movs	r3, #0
   2f76a:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2f76c:	2300      	movs	r3, #0
   2f76e:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2f770:	687b      	ldr	r3, [r7, #4]
   2f772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f774:	689c      	ldr	r4, [r3, #8]
   2f776:	687b      	ldr	r3, [r7, #4]
   2f778:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2f77a:	687b      	ldr	r3, [r7, #4]
   2f77c:	695e      	ldr	r6, [r3, #20]
   2f77e:	683b      	ldr	r3, [r7, #0]
   2f780:	0018      	movs	r0, r3
   2f782:	4b2b      	ldr	r3, [pc, #172]	; (2f830 <readPacket+0xe0>)
   2f784:	4798      	blx	r3
   2f786:	0003      	movs	r3, r0
   2f788:	2201      	movs	r2, #1
   2f78a:	0031      	movs	r1, r6
   2f78c:	0028      	movs	r0, r5
   2f78e:	47a0      	blx	r4
   2f790:	0003      	movs	r3, r0
   2f792:	2b01      	cmp	r3, #1
   2f794:	d141      	bne.n	2f81a <readPacket+0xca>
        goto exit;

    len = 1;
   2f796:	2301      	movs	r3, #1
   2f798:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2f79a:	683b      	ldr	r3, [r7, #0]
   2f79c:	0018      	movs	r0, r3
   2f79e:	4b24      	ldr	r3, [pc, #144]	; (2f830 <readPacket+0xe0>)
   2f7a0:	4798      	blx	r3
   2f7a2:	0002      	movs	r2, r0
   2f7a4:	2308      	movs	r3, #8
   2f7a6:	18f9      	adds	r1, r7, r3
   2f7a8:	687b      	ldr	r3, [r7, #4]
   2f7aa:	0018      	movs	r0, r3
   2f7ac:	4b21      	ldr	r3, [pc, #132]	; (2f834 <readPacket+0xe4>)
   2f7ae:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2f7b0:	687b      	ldr	r3, [r7, #4]
   2f7b2:	695b      	ldr	r3, [r3, #20]
   2f7b4:	3301      	adds	r3, #1
   2f7b6:	68ba      	ldr	r2, [r7, #8]
   2f7b8:	0011      	movs	r1, r2
   2f7ba:	0018      	movs	r0, r3
   2f7bc:	4b1e      	ldr	r3, [pc, #120]	; (2f838 <readPacket+0xe8>)
   2f7be:	4798      	blx	r3
   2f7c0:	0002      	movs	r2, r0
   2f7c2:	693b      	ldr	r3, [r7, #16]
   2f7c4:	189b      	adds	r3, r3, r2
   2f7c6:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2f7c8:	68bb      	ldr	r3, [r7, #8]
   2f7ca:	2b00      	cmp	r3, #0
   2f7cc:	dd17      	ble.n	2f7fe <readPacket+0xae>
   2f7ce:	687b      	ldr	r3, [r7, #4]
   2f7d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f7d2:	689c      	ldr	r4, [r3, #8]
   2f7d4:	687b      	ldr	r3, [r7, #4]
   2f7d6:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2f7d8:	687b      	ldr	r3, [r7, #4]
   2f7da:	695a      	ldr	r2, [r3, #20]
   2f7dc:	693b      	ldr	r3, [r7, #16]
   2f7de:	18d6      	adds	r6, r2, r3
   2f7e0:	68bb      	ldr	r3, [r7, #8]
   2f7e2:	4698      	mov	r8, r3
   2f7e4:	683b      	ldr	r3, [r7, #0]
   2f7e6:	0018      	movs	r0, r3
   2f7e8:	4b11      	ldr	r3, [pc, #68]	; (2f830 <readPacket+0xe0>)
   2f7ea:	4798      	blx	r3
   2f7ec:	0003      	movs	r3, r0
   2f7ee:	4642      	mov	r2, r8
   2f7f0:	0031      	movs	r1, r6
   2f7f2:	0028      	movs	r0, r5
   2f7f4:	47a0      	blx	r4
   2f7f6:	0002      	movs	r2, r0
   2f7f8:	68bb      	ldr	r3, [r7, #8]
   2f7fa:	429a      	cmp	r2, r3
   2f7fc:	d10f      	bne.n	2f81e <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2f7fe:	687b      	ldr	r3, [r7, #4]
   2f800:	695b      	ldr	r3, [r3, #20]
   2f802:	781a      	ldrb	r2, [r3, #0]
   2f804:	230c      	movs	r3, #12
   2f806:	18fb      	adds	r3, r7, r3
   2f808:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2f80a:	230c      	movs	r3, #12
   2f80c:	18fb      	adds	r3, r7, r3
   2f80e:	781b      	ldrb	r3, [r3, #0]
   2f810:	061b      	lsls	r3, r3, #24
   2f812:	0f1b      	lsrs	r3, r3, #28
   2f814:	b2db      	uxtb	r3, r3
   2f816:	617b      	str	r3, [r7, #20]
   2f818:	e002      	b.n	2f820 <readPacket+0xd0>
        goto exit;
   2f81a:	46c0      	nop			; (mov r8, r8)
   2f81c:	e000      	b.n	2f820 <readPacket+0xd0>
        goto exit;
   2f81e:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2f820:	697b      	ldr	r3, [r7, #20]
}
   2f822:	0018      	movs	r0, r3
   2f824:	46bd      	mov	sp, r7
   2f826:	b006      	add	sp, #24
   2f828:	bc04      	pop	{r2}
   2f82a:	4690      	mov	r8, r2
   2f82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f82e:	46c0      	nop			; (mov r8, r8)
   2f830:	000303f5 	.word	0x000303f5
   2f834:	0002f6bd 	.word	0x0002f6bd
   2f838:	000311cd 	.word	0x000311cd

0002f83c <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2f83c:	b580      	push	{r7, lr}
   2f83e:	b086      	sub	sp, #24
   2f840:	af00      	add	r7, sp, #0
   2f842:	6078      	str	r0, [r7, #4]
   2f844:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2f846:	687b      	ldr	r3, [r7, #4]
   2f848:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2f84a:	683b      	ldr	r3, [r7, #0]
   2f84c:	689b      	ldr	r3, [r3, #8]
   2f84e:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2f850:	683b      	ldr	r3, [r7, #0]
   2f852:	685b      	ldr	r3, [r3, #4]
   2f854:	001a      	movs	r2, r3
   2f856:	693b      	ldr	r3, [r7, #16]
   2f858:	189b      	adds	r3, r3, r2
   2f85a:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2f85c:	e039      	b.n	2f8d2 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2f85e:	693b      	ldr	r3, [r7, #16]
   2f860:	781b      	ldrb	r3, [r3, #0]
   2f862:	2b2f      	cmp	r3, #47	; 0x2f
   2f864:	d103      	bne.n	2f86e <isTopicMatched+0x32>
   2f866:	697b      	ldr	r3, [r7, #20]
   2f868:	781b      	ldrb	r3, [r3, #0]
   2f86a:	2b2f      	cmp	r3, #47	; 0x2f
   2f86c:	d13a      	bne.n	2f8e4 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2f86e:	697b      	ldr	r3, [r7, #20]
   2f870:	781b      	ldrb	r3, [r3, #0]
   2f872:	2b2b      	cmp	r3, #43	; 0x2b
   2f874:	d009      	beq.n	2f88a <isTopicMatched+0x4e>
   2f876:	697b      	ldr	r3, [r7, #20]
   2f878:	781b      	ldrb	r3, [r3, #0]
   2f87a:	2b23      	cmp	r3, #35	; 0x23
   2f87c:	d005      	beq.n	2f88a <isTopicMatched+0x4e>
   2f87e:	697b      	ldr	r3, [r7, #20]
   2f880:	781a      	ldrb	r2, [r3, #0]
   2f882:	693b      	ldr	r3, [r7, #16]
   2f884:	781b      	ldrb	r3, [r3, #0]
   2f886:	429a      	cmp	r2, r3
   2f888:	d12e      	bne.n	2f8e8 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2f88a:	697b      	ldr	r3, [r7, #20]
   2f88c:	781b      	ldrb	r3, [r3, #0]
   2f88e:	2b2b      	cmp	r3, #43	; 0x2b
   2f890:	d112      	bne.n	2f8b8 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2f892:	693b      	ldr	r3, [r7, #16]
   2f894:	3301      	adds	r3, #1
   2f896:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2f898:	e005      	b.n	2f8a6 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2f89a:	693b      	ldr	r3, [r7, #16]
   2f89c:	3301      	adds	r3, #1
   2f89e:	613b      	str	r3, [r7, #16]
   2f8a0:	693b      	ldr	r3, [r7, #16]
   2f8a2:	3301      	adds	r3, #1
   2f8a4:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2f8a6:	68fa      	ldr	r2, [r7, #12]
   2f8a8:	68bb      	ldr	r3, [r7, #8]
   2f8aa:	429a      	cmp	r2, r3
   2f8ac:	d20b      	bcs.n	2f8c6 <isTopicMatched+0x8a>
   2f8ae:	68fb      	ldr	r3, [r7, #12]
   2f8b0:	781b      	ldrb	r3, [r3, #0]
   2f8b2:	2b2f      	cmp	r3, #47	; 0x2f
   2f8b4:	d1f1      	bne.n	2f89a <isTopicMatched+0x5e>
   2f8b6:	e006      	b.n	2f8c6 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2f8b8:	697b      	ldr	r3, [r7, #20]
   2f8ba:	781b      	ldrb	r3, [r3, #0]
   2f8bc:	2b23      	cmp	r3, #35	; 0x23
   2f8be:	d102      	bne.n	2f8c6 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2f8c0:	68bb      	ldr	r3, [r7, #8]
   2f8c2:	3b01      	subs	r3, #1
   2f8c4:	613b      	str	r3, [r7, #16]
        curf++;
   2f8c6:	697b      	ldr	r3, [r7, #20]
   2f8c8:	3301      	adds	r3, #1
   2f8ca:	617b      	str	r3, [r7, #20]
        curn++;
   2f8cc:	693b      	ldr	r3, [r7, #16]
   2f8ce:	3301      	adds	r3, #1
   2f8d0:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2f8d2:	697b      	ldr	r3, [r7, #20]
   2f8d4:	781b      	ldrb	r3, [r3, #0]
   2f8d6:	2b00      	cmp	r3, #0
   2f8d8:	d007      	beq.n	2f8ea <isTopicMatched+0xae>
   2f8da:	693a      	ldr	r2, [r7, #16]
   2f8dc:	68bb      	ldr	r3, [r7, #8]
   2f8de:	429a      	cmp	r2, r3
   2f8e0:	d3bd      	bcc.n	2f85e <isTopicMatched+0x22>
   2f8e2:	e002      	b.n	2f8ea <isTopicMatched+0xae>
            break;
   2f8e4:	46c0      	nop			; (mov r8, r8)
   2f8e6:	e000      	b.n	2f8ea <isTopicMatched+0xae>
            break;
   2f8e8:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2f8ea:	693a      	ldr	r2, [r7, #16]
   2f8ec:	68bb      	ldr	r3, [r7, #8]
   2f8ee:	429a      	cmp	r2, r3
   2f8f0:	d105      	bne.n	2f8fe <isTopicMatched+0xc2>
   2f8f2:	697b      	ldr	r3, [r7, #20]
   2f8f4:	781b      	ldrb	r3, [r3, #0]
   2f8f6:	2b00      	cmp	r3, #0
   2f8f8:	d101      	bne.n	2f8fe <isTopicMatched+0xc2>
   2f8fa:	2301      	movs	r3, #1
   2f8fc:	e000      	b.n	2f900 <isTopicMatched+0xc4>
   2f8fe:	2300      	movs	r3, #0
   2f900:	b2db      	uxtb	r3, r3
}
   2f902:	0018      	movs	r0, r3
   2f904:	46bd      	mov	sp, r7
   2f906:	b006      	add	sp, #24
   2f908:	bd80      	pop	{r7, pc}
	...

0002f90c <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2f90c:	b580      	push	{r7, lr}
   2f90e:	b08a      	sub	sp, #40	; 0x28
   2f910:	af00      	add	r7, sp, #0
   2f912:	60f8      	str	r0, [r7, #12]
   2f914:	60b9      	str	r1, [r7, #8]
   2f916:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2f918:	2301      	movs	r3, #1
   2f91a:	425b      	negs	r3, r3
   2f91c:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f91e:	2300      	movs	r3, #0
   2f920:	627b      	str	r3, [r7, #36]	; 0x24
   2f922:	e044      	b.n	2f9ae <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2f924:	68fa      	ldr	r2, [r7, #12]
   2f926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f928:	3304      	adds	r3, #4
   2f92a:	00db      	lsls	r3, r3, #3
   2f92c:	18d3      	adds	r3, r2, r3
   2f92e:	3304      	adds	r3, #4
   2f930:	681b      	ldr	r3, [r3, #0]
   2f932:	2b00      	cmp	r3, #0
   2f934:	d038      	beq.n	2f9a8 <deliverMessage+0x9c>
   2f936:	68fa      	ldr	r2, [r7, #12]
   2f938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f93a:	3304      	adds	r3, #4
   2f93c:	00db      	lsls	r3, r3, #3
   2f93e:	18d3      	adds	r3, r2, r3
   2f940:	3304      	adds	r3, #4
   2f942:	681a      	ldr	r2, [r3, #0]
   2f944:	68bb      	ldr	r3, [r7, #8]
   2f946:	0011      	movs	r1, r2
   2f948:	0018      	movs	r0, r3
   2f94a:	4b28      	ldr	r3, [pc, #160]	; (2f9ec <deliverMessage+0xe0>)
   2f94c:	4798      	blx	r3
   2f94e:	1e03      	subs	r3, r0, #0
   2f950:	d10d      	bne.n	2f96e <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2f952:	68fa      	ldr	r2, [r7, #12]
   2f954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f956:	3304      	adds	r3, #4
   2f958:	00db      	lsls	r3, r3, #3
   2f95a:	18d3      	adds	r3, r2, r3
   2f95c:	3304      	adds	r3, #4
   2f95e:	681b      	ldr	r3, [r3, #0]
   2f960:	68ba      	ldr	r2, [r7, #8]
   2f962:	0011      	movs	r1, r2
   2f964:	0018      	movs	r0, r3
   2f966:	4b22      	ldr	r3, [pc, #136]	; (2f9f0 <deliverMessage+0xe4>)
   2f968:	4798      	blx	r3
   2f96a:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2f96c:	d01c      	beq.n	2f9a8 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2f96e:	68fa      	ldr	r2, [r7, #12]
   2f970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f972:	3304      	adds	r3, #4
   2f974:	00db      	lsls	r3, r3, #3
   2f976:	18d3      	adds	r3, r2, r3
   2f978:	3308      	adds	r3, #8
   2f97a:	681b      	ldr	r3, [r3, #0]
   2f97c:	2b00      	cmp	r3, #0
   2f97e:	d013      	beq.n	2f9a8 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2f980:	687a      	ldr	r2, [r7, #4]
   2f982:	68b9      	ldr	r1, [r7, #8]
   2f984:	2318      	movs	r3, #24
   2f986:	18fb      	adds	r3, r7, r3
   2f988:	0018      	movs	r0, r3
   2f98a:	4b1a      	ldr	r3, [pc, #104]	; (2f9f4 <deliverMessage+0xe8>)
   2f98c:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2f98e:	68fa      	ldr	r2, [r7, #12]
   2f990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f992:	3304      	adds	r3, #4
   2f994:	00db      	lsls	r3, r3, #3
   2f996:	18d3      	adds	r3, r2, r3
   2f998:	3308      	adds	r3, #8
   2f99a:	681b      	ldr	r3, [r3, #0]
   2f99c:	2218      	movs	r2, #24
   2f99e:	18ba      	adds	r2, r7, r2
   2f9a0:	0010      	movs	r0, r2
   2f9a2:	4798      	blx	r3
                rc = SUCCESS;
   2f9a4:	2300      	movs	r3, #0
   2f9a6:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f9aa:	3301      	adds	r3, #1
   2f9ac:	627b      	str	r3, [r7, #36]	; 0x24
   2f9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f9b0:	2b04      	cmp	r3, #4
   2f9b2:	ddb7      	ble.n	2f924 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2f9b4:	6a3b      	ldr	r3, [r7, #32]
   2f9b6:	3301      	adds	r3, #1
   2f9b8:	d112      	bne.n	2f9e0 <deliverMessage+0xd4>
   2f9ba:	68fb      	ldr	r3, [r7, #12]
   2f9bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f9be:	2b00      	cmp	r3, #0
   2f9c0:	d00e      	beq.n	2f9e0 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2f9c2:	687a      	ldr	r2, [r7, #4]
   2f9c4:	68b9      	ldr	r1, [r7, #8]
   2f9c6:	2310      	movs	r3, #16
   2f9c8:	18fb      	adds	r3, r7, r3
   2f9ca:	0018      	movs	r0, r3
   2f9cc:	4b09      	ldr	r3, [pc, #36]	; (2f9f4 <deliverMessage+0xe8>)
   2f9ce:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2f9d0:	68fb      	ldr	r3, [r7, #12]
   2f9d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f9d4:	2210      	movs	r2, #16
   2f9d6:	18ba      	adds	r2, r7, r2
   2f9d8:	0010      	movs	r0, r2
   2f9da:	4798      	blx	r3
        rc = SUCCESS;
   2f9dc:	2300      	movs	r3, #0
   2f9de:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2f9e0:	6a3b      	ldr	r3, [r7, #32]
}
   2f9e2:	0018      	movs	r0, r3
   2f9e4:	46bd      	mov	sp, r7
   2f9e6:	b00a      	add	sp, #40	; 0x28
   2f9e8:	bd80      	pop	{r7, pc}
   2f9ea:	46c0      	nop			; (mov r8, r8)
   2f9ec:	000315e1 	.word	0x000315e1
   2f9f0:	0002f83d 	.word	0x0002f83d
   2f9f4:	0002f545 	.word	0x0002f545

0002f9f8 <keepalive>:


int keepalive(MQTTClient* c)
{
   2f9f8:	b580      	push	{r7, lr}
   2f9fa:	b088      	sub	sp, #32
   2f9fc:	af00      	add	r7, sp, #0
   2f9fe:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2fa00:	2301      	movs	r3, #1
   2fa02:	425b      	negs	r3, r3
   2fa04:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2fa06:	687b      	ldr	r3, [r7, #4]
   2fa08:	699b      	ldr	r3, [r3, #24]
   2fa0a:	2b00      	cmp	r3, #0
   2fa0c:	d102      	bne.n	2fa14 <keepalive+0x1c>
    {
        rc = SUCCESS;
   2fa0e:	2300      	movs	r3, #0
   2fa10:	61fb      	str	r3, [r7, #28]
        goto exit;
   2fa12:	e033      	b.n	2fa7c <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2fa14:	687b      	ldr	r3, [r7, #4]
   2fa16:	3354      	adds	r3, #84	; 0x54
   2fa18:	0018      	movs	r0, r3
   2fa1a:	4b1b      	ldr	r3, [pc, #108]	; (2fa88 <keepalive+0x90>)
   2fa1c:	4798      	blx	r3
   2fa1e:	1e03      	subs	r3, r0, #0
   2fa20:	d02c      	beq.n	2fa7c <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2fa22:	687b      	ldr	r3, [r7, #4]
   2fa24:	7f1b      	ldrb	r3, [r3, #28]
   2fa26:	2b00      	cmp	r3, #0
   2fa28:	d128      	bne.n	2fa7c <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2fa2a:	230c      	movs	r3, #12
   2fa2c:	18fb      	adds	r3, r7, r3
   2fa2e:	0018      	movs	r0, r3
   2fa30:	4b16      	ldr	r3, [pc, #88]	; (2fa8c <keepalive+0x94>)
   2fa32:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2fa34:	23fa      	movs	r3, #250	; 0xfa
   2fa36:	009a      	lsls	r2, r3, #2
   2fa38:	230c      	movs	r3, #12
   2fa3a:	18fb      	adds	r3, r7, r3
   2fa3c:	0011      	movs	r1, r2
   2fa3e:	0018      	movs	r0, r3
   2fa40:	4b13      	ldr	r3, [pc, #76]	; (2fa90 <keepalive+0x98>)
   2fa42:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2fa44:	687b      	ldr	r3, [r7, #4]
   2fa46:	691a      	ldr	r2, [r3, #16]
   2fa48:	687b      	ldr	r3, [r7, #4]
   2fa4a:	689b      	ldr	r3, [r3, #8]
   2fa4c:	0019      	movs	r1, r3
   2fa4e:	0010      	movs	r0, r2
   2fa50:	4b10      	ldr	r3, [pc, #64]	; (2fa94 <keepalive+0x9c>)
   2fa52:	4798      	blx	r3
   2fa54:	0003      	movs	r3, r0
   2fa56:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2fa58:	69bb      	ldr	r3, [r7, #24]
   2fa5a:	2b00      	cmp	r3, #0
   2fa5c:	dd0e      	ble.n	2fa7c <keepalive+0x84>
   2fa5e:	230c      	movs	r3, #12
   2fa60:	18fa      	adds	r2, r7, r3
   2fa62:	69b9      	ldr	r1, [r7, #24]
   2fa64:	687b      	ldr	r3, [r7, #4]
   2fa66:	0018      	movs	r0, r3
   2fa68:	4b0b      	ldr	r3, [pc, #44]	; (2fa98 <keepalive+0xa0>)
   2fa6a:	4798      	blx	r3
   2fa6c:	0003      	movs	r3, r0
   2fa6e:	61fb      	str	r3, [r7, #28]
   2fa70:	69fb      	ldr	r3, [r7, #28]
   2fa72:	2b00      	cmp	r3, #0
   2fa74:	d102      	bne.n	2fa7c <keepalive+0x84>
                c->ping_outstanding = 1;
   2fa76:	687b      	ldr	r3, [r7, #4]
   2fa78:	2201      	movs	r2, #1
   2fa7a:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2fa7c:	69fb      	ldr	r3, [r7, #28]
}
   2fa7e:	0018      	movs	r0, r3
   2fa80:	46bd      	mov	sp, r7
   2fa82:	b008      	add	sp, #32
   2fa84:	bd80      	pop	{r7, pc}
   2fa86:	46c0      	nop			; (mov r8, r8)
   2fa88:	00030379 	.word	0x00030379
   2fa8c:	0003041d 	.word	0x0003041d
   2fa90:	000303a5 	.word	0x000303a5
   2fa94:	00030ff1 	.word	0x00030ff1
   2fa98:	0002f595 	.word	0x0002f595

0002fa9c <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2fa9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fa9e:	b095      	sub	sp, #84	; 0x54
   2faa0:	af06      	add	r7, sp, #24
   2faa2:	6078      	str	r0, [r7, #4]
   2faa4:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2faa6:	683a      	ldr	r2, [r7, #0]
   2faa8:	687b      	ldr	r3, [r7, #4]
   2faaa:	0011      	movs	r1, r2
   2faac:	0018      	movs	r0, r3
   2faae:	4b70      	ldr	r3, [pc, #448]	; (2fc70 <cycle+0x1d4>)
   2fab0:	4798      	blx	r3
   2fab2:	0002      	movs	r2, r0
   2fab4:	232e      	movs	r3, #46	; 0x2e
   2fab6:	18fb      	adds	r3, r7, r3
   2fab8:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2faba:	2300      	movs	r3, #0
   2fabc:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2fabe:	2300      	movs	r3, #0
   2fac0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2fac2:	232e      	movs	r3, #46	; 0x2e
   2fac4:	18fb      	adds	r3, r7, r3
   2fac6:	881b      	ldrh	r3, [r3, #0]
   2fac8:	2b0d      	cmp	r3, #13
   2faca:	d900      	bls.n	2face <cycle+0x32>
   2facc:	e0bd      	b.n	2fc4a <cycle+0x1ae>
   2face:	009a      	lsls	r2, r3, #2
   2fad0:	4b68      	ldr	r3, [pc, #416]	; (2fc74 <cycle+0x1d8>)
   2fad2:	18d3      	adds	r3, r2, r3
   2fad4:	681b      	ldr	r3, [r3, #0]
   2fad6:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2fad8:	687b      	ldr	r3, [r7, #4]
   2fada:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2fadc:	687b      	ldr	r3, [r7, #4]
   2fade:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2fae0:	001e      	movs	r6, r3
   2fae2:	2310      	movs	r3, #16
   2fae4:	18fb      	adds	r3, r7, r3
   2fae6:	1d1d      	adds	r5, r3, #4
   2fae8:	2310      	movs	r3, #16
   2faea:	18fb      	adds	r3, r7, r3
   2faec:	1c5c      	adds	r4, r3, #1
   2faee:	230c      	movs	r3, #12
   2faf0:	18f9      	adds	r1, r7, r3
   2faf2:	2310      	movs	r3, #16
   2faf4:	18fb      	adds	r3, r7, r3
   2faf6:	1c98      	adds	r0, r3, #2
   2faf8:	9604      	str	r6, [sp, #16]
   2fafa:	9203      	str	r2, [sp, #12]
   2fafc:	2310      	movs	r3, #16
   2fafe:	18fb      	adds	r3, r7, r3
   2fb00:	330c      	adds	r3, #12
   2fb02:	9302      	str	r3, [sp, #8]
   2fb04:	2310      	movs	r3, #16
   2fb06:	18fb      	adds	r3, r7, r3
   2fb08:	3308      	adds	r3, #8
   2fb0a:	9301      	str	r3, [sp, #4]
   2fb0c:	2320      	movs	r3, #32
   2fb0e:	18fb      	adds	r3, r7, r3
   2fb10:	9300      	str	r3, [sp, #0]
   2fb12:	002b      	movs	r3, r5
   2fb14:	0022      	movs	r2, r4
   2fb16:	4c58      	ldr	r4, [pc, #352]	; (2fc78 <cycle+0x1dc>)
   2fb18:	47a0      	blx	r4
   2fb1a:	0003      	movs	r3, r0
   2fb1c:	2b01      	cmp	r3, #1
   2fb1e:	d000      	beq.n	2fb22 <cycle+0x86>
   2fb20:	e098      	b.n	2fc54 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2fb22:	68fb      	ldr	r3, [r7, #12]
   2fb24:	b2da      	uxtb	r2, r3
   2fb26:	2310      	movs	r3, #16
   2fb28:	18fb      	adds	r3, r7, r3
   2fb2a:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2fb2c:	2310      	movs	r3, #16
   2fb2e:	18fa      	adds	r2, r7, r3
   2fb30:	2320      	movs	r3, #32
   2fb32:	18f9      	adds	r1, r7, r3
   2fb34:	687b      	ldr	r3, [r7, #4]
   2fb36:	0018      	movs	r0, r3
   2fb38:	4b50      	ldr	r3, [pc, #320]	; (2fc7c <cycle+0x1e0>)
   2fb3a:	4798      	blx	r3
            if (msg.qos != QOS0)
   2fb3c:	2310      	movs	r3, #16
   2fb3e:	18fb      	adds	r3, r7, r3
   2fb40:	781b      	ldrb	r3, [r3, #0]
   2fb42:	2b00      	cmp	r3, #0
   2fb44:	d100      	bne.n	2fb48 <cycle+0xac>
   2fb46:	e07d      	b.n	2fc44 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2fb48:	2310      	movs	r3, #16
   2fb4a:	18fb      	adds	r3, r7, r3
   2fb4c:	781b      	ldrb	r3, [r3, #0]
   2fb4e:	2b01      	cmp	r3, #1
   2fb50:	d10f      	bne.n	2fb72 <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2fb52:	687b      	ldr	r3, [r7, #4]
   2fb54:	6918      	ldr	r0, [r3, #16]
   2fb56:	687b      	ldr	r3, [r7, #4]
   2fb58:	689b      	ldr	r3, [r3, #8]
   2fb5a:	0019      	movs	r1, r3
   2fb5c:	2310      	movs	r3, #16
   2fb5e:	18fb      	adds	r3, r7, r3
   2fb60:	889b      	ldrh	r3, [r3, #4]
   2fb62:	9300      	str	r3, [sp, #0]
   2fb64:	2300      	movs	r3, #0
   2fb66:	2204      	movs	r2, #4
   2fb68:	4c45      	ldr	r4, [pc, #276]	; (2fc80 <cycle+0x1e4>)
   2fb6a:	47a0      	blx	r4
   2fb6c:	0003      	movs	r3, r0
   2fb6e:	637b      	str	r3, [r7, #52]	; 0x34
   2fb70:	e013      	b.n	2fb9a <cycle+0xfe>
                else if (msg.qos == QOS2)
   2fb72:	2310      	movs	r3, #16
   2fb74:	18fb      	adds	r3, r7, r3
   2fb76:	781b      	ldrb	r3, [r3, #0]
   2fb78:	2b02      	cmp	r3, #2
   2fb7a:	d10e      	bne.n	2fb9a <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2fb7c:	687b      	ldr	r3, [r7, #4]
   2fb7e:	6918      	ldr	r0, [r3, #16]
   2fb80:	687b      	ldr	r3, [r7, #4]
   2fb82:	689b      	ldr	r3, [r3, #8]
   2fb84:	0019      	movs	r1, r3
   2fb86:	2310      	movs	r3, #16
   2fb88:	18fb      	adds	r3, r7, r3
   2fb8a:	889b      	ldrh	r3, [r3, #4]
   2fb8c:	9300      	str	r3, [sp, #0]
   2fb8e:	2300      	movs	r3, #0
   2fb90:	2205      	movs	r2, #5
   2fb92:	4c3b      	ldr	r4, [pc, #236]	; (2fc80 <cycle+0x1e4>)
   2fb94:	47a0      	blx	r4
   2fb96:	0003      	movs	r3, r0
   2fb98:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2fb9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2fb9c:	2b00      	cmp	r3, #0
   2fb9e:	dc03      	bgt.n	2fba8 <cycle+0x10c>
                    rc = FAILURE;
   2fba0:	2301      	movs	r3, #1
   2fba2:	425b      	negs	r3, r3
   2fba4:	633b      	str	r3, [r7, #48]	; 0x30
   2fba6:	e007      	b.n	2fbb8 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2fba8:	683a      	ldr	r2, [r7, #0]
   2fbaa:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2fbac:	687b      	ldr	r3, [r7, #4]
   2fbae:	0018      	movs	r0, r3
   2fbb0:	4b34      	ldr	r3, [pc, #208]	; (2fc84 <cycle+0x1e8>)
   2fbb2:	4798      	blx	r3
   2fbb4:	0003      	movs	r3, r0
   2fbb6:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2fbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2fbba:	3301      	adds	r3, #1
   2fbbc:	d142      	bne.n	2fc44 <cycle+0x1a8>
                    goto exit; // there was a problem
   2fbbe:	46c0      	nop			; (mov r8, r8)
   2fbc0:	e049      	b.n	2fc56 <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2fbc2:	687b      	ldr	r3, [r7, #4]
   2fbc4:	695c      	ldr	r4, [r3, #20]
   2fbc6:	687b      	ldr	r3, [r7, #4]
   2fbc8:	68db      	ldr	r3, [r3, #12]
   2fbca:	220a      	movs	r2, #10
   2fbcc:	18ba      	adds	r2, r7, r2
   2fbce:	2109      	movs	r1, #9
   2fbd0:	1879      	adds	r1, r7, r1
   2fbd2:	2008      	movs	r0, #8
   2fbd4:	1838      	adds	r0, r7, r0
   2fbd6:	9300      	str	r3, [sp, #0]
   2fbd8:	0023      	movs	r3, r4
   2fbda:	4c2b      	ldr	r4, [pc, #172]	; (2fc88 <cycle+0x1ec>)
   2fbdc:	47a0      	blx	r4
   2fbde:	0003      	movs	r3, r0
   2fbe0:	2b01      	cmp	r3, #1
   2fbe2:	d003      	beq.n	2fbec <cycle+0x150>
                rc = FAILURE;
   2fbe4:	2301      	movs	r3, #1
   2fbe6:	425b      	negs	r3, r3
   2fbe8:	633b      	str	r3, [r7, #48]	; 0x30
   2fbea:	e023      	b.n	2fc34 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2fbec:	687b      	ldr	r3, [r7, #4]
   2fbee:	6918      	ldr	r0, [r3, #16]
   2fbf0:	687b      	ldr	r3, [r7, #4]
   2fbf2:	689b      	ldr	r3, [r3, #8]
   2fbf4:	0019      	movs	r1, r3
   2fbf6:	230a      	movs	r3, #10
   2fbf8:	18fb      	adds	r3, r7, r3
   2fbfa:	881b      	ldrh	r3, [r3, #0]
   2fbfc:	9300      	str	r3, [sp, #0]
   2fbfe:	2300      	movs	r3, #0
   2fc00:	2206      	movs	r2, #6
   2fc02:	4c1f      	ldr	r4, [pc, #124]	; (2fc80 <cycle+0x1e4>)
   2fc04:	47a0      	blx	r4
   2fc06:	0003      	movs	r3, r0
   2fc08:	637b      	str	r3, [r7, #52]	; 0x34
   2fc0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2fc0c:	2b00      	cmp	r3, #0
   2fc0e:	dc03      	bgt.n	2fc18 <cycle+0x17c>
                rc = FAILURE;
   2fc10:	2301      	movs	r3, #1
   2fc12:	425b      	negs	r3, r3
   2fc14:	633b      	str	r3, [r7, #48]	; 0x30
   2fc16:	e00d      	b.n	2fc34 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2fc18:	683a      	ldr	r2, [r7, #0]
   2fc1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2fc1c:	687b      	ldr	r3, [r7, #4]
   2fc1e:	0018      	movs	r0, r3
   2fc20:	4b18      	ldr	r3, [pc, #96]	; (2fc84 <cycle+0x1e8>)
   2fc22:	4798      	blx	r3
   2fc24:	0003      	movs	r3, r0
   2fc26:	633b      	str	r3, [r7, #48]	; 0x30
   2fc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2fc2a:	2b00      	cmp	r3, #0
   2fc2c:	d002      	beq.n	2fc34 <cycle+0x198>
                rc = FAILURE; // there was a problem
   2fc2e:	2301      	movs	r3, #1
   2fc30:	425b      	negs	r3, r3
   2fc32:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2fc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2fc36:	3301      	adds	r3, #1
   2fc38:	d106      	bne.n	2fc48 <cycle+0x1ac>
                goto exit; // there was a problem
   2fc3a:	e00c      	b.n	2fc56 <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2fc3c:	687b      	ldr	r3, [r7, #4]
   2fc3e:	2200      	movs	r2, #0
   2fc40:	771a      	strb	r2, [r3, #28]
            break;
   2fc42:	e002      	b.n	2fc4a <cycle+0x1ae>
            break;
   2fc44:	46c0      	nop			; (mov r8, r8)
   2fc46:	e000      	b.n	2fc4a <cycle+0x1ae>
            break;
   2fc48:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2fc4a:	687b      	ldr	r3, [r7, #4]
   2fc4c:	0018      	movs	r0, r3
   2fc4e:	4b0f      	ldr	r3, [pc, #60]	; (2fc8c <cycle+0x1f0>)
   2fc50:	4798      	blx	r3
   2fc52:	e000      	b.n	2fc56 <cycle+0x1ba>
                goto exit;
   2fc54:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2fc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2fc58:	2b00      	cmp	r3, #0
   2fc5a:	d103      	bne.n	2fc64 <cycle+0x1c8>
        rc = packet_type;
   2fc5c:	232e      	movs	r3, #46	; 0x2e
   2fc5e:	18fb      	adds	r3, r7, r3
   2fc60:	881b      	ldrh	r3, [r3, #0]
   2fc62:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2fc64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2fc66:	0018      	movs	r0, r3
   2fc68:	46bd      	mov	sp, r7
   2fc6a:	b00f      	add	sp, #60	; 0x3c
   2fc6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2fc6e:	46c0      	nop			; (mov r8, r8)
   2fc70:	0002f751 	.word	0x0002f751
   2fc74:	0003b9b8 	.word	0x0003b9b8
   2fc78:	00031015 	.word	0x00031015
   2fc7c:	0002f90d 	.word	0x0002f90d
   2fc80:	0003180d 	.word	0x0003180d
   2fc84:	0002f595 	.word	0x0002f595
   2fc88:	00031119 	.word	0x00031119
   2fc8c:	0002f9f9 	.word	0x0002f9f9

0002fc90 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2fc90:	b580      	push	{r7, lr}
   2fc92:	b086      	sub	sp, #24
   2fc94:	af00      	add	r7, sp, #0
   2fc96:	6078      	str	r0, [r7, #4]
   2fc98:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2fc9a:	2300      	movs	r3, #0
   2fc9c:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2fc9e:	2308      	movs	r3, #8
   2fca0:	18fb      	adds	r3, r7, r3
   2fca2:	0018      	movs	r0, r3
   2fca4:	4b11      	ldr	r3, [pc, #68]	; (2fcec <MQTTYield+0x5c>)
   2fca6:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2fca8:	683a      	ldr	r2, [r7, #0]
   2fcaa:	2308      	movs	r3, #8
   2fcac:	18fb      	adds	r3, r7, r3
   2fcae:	0011      	movs	r1, r2
   2fcb0:	0018      	movs	r0, r3
   2fcb2:	4b0f      	ldr	r3, [pc, #60]	; (2fcf0 <MQTTYield+0x60>)
   2fcb4:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2fcb6:	2308      	movs	r3, #8
   2fcb8:	18fa      	adds	r2, r7, r3
   2fcba:	687b      	ldr	r3, [r7, #4]
   2fcbc:	0011      	movs	r1, r2
   2fcbe:	0018      	movs	r0, r3
   2fcc0:	4b0c      	ldr	r3, [pc, #48]	; (2fcf4 <MQTTYield+0x64>)
   2fcc2:	4798      	blx	r3
   2fcc4:	0003      	movs	r3, r0
   2fcc6:	3301      	adds	r3, #1
   2fcc8:	d103      	bne.n	2fcd2 <MQTTYield+0x42>
        {
            rc = FAILURE;
   2fcca:	2301      	movs	r3, #1
   2fccc:	425b      	negs	r3, r3
   2fcce:	617b      	str	r3, [r7, #20]
            break;
   2fcd0:	e006      	b.n	2fce0 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2fcd2:	2308      	movs	r3, #8
   2fcd4:	18fb      	adds	r3, r7, r3
   2fcd6:	0018      	movs	r0, r3
   2fcd8:	4b07      	ldr	r3, [pc, #28]	; (2fcf8 <MQTTYield+0x68>)
   2fcda:	4798      	blx	r3
   2fcdc:	1e03      	subs	r3, r0, #0
   2fcde:	d0ea      	beq.n	2fcb6 <MQTTYield+0x26>
        
    return rc;
   2fce0:	697b      	ldr	r3, [r7, #20]
}
   2fce2:	0018      	movs	r0, r3
   2fce4:	46bd      	mov	sp, r7
   2fce6:	b006      	add	sp, #24
   2fce8:	bd80      	pop	{r7, pc}
   2fcea:	46c0      	nop			; (mov r8, r8)
   2fcec:	0003041d 	.word	0x0003041d
   2fcf0:	000303a5 	.word	0x000303a5
   2fcf4:	0002fa9d 	.word	0x0002fa9d
   2fcf8:	00030379 	.word	0x00030379

0002fcfc <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2fcfc:	b580      	push	{r7, lr}
   2fcfe:	b086      	sub	sp, #24
   2fd00:	af00      	add	r7, sp, #0
   2fd02:	60f8      	str	r0, [r7, #12]
   2fd04:	60b9      	str	r1, [r7, #8]
   2fd06:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2fd08:	2301      	movs	r3, #1
   2fd0a:	425b      	negs	r3, r3
   2fd0c:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2fd0e:	687b      	ldr	r3, [r7, #4]
   2fd10:	0018      	movs	r0, r3
   2fd12:	4b0b      	ldr	r3, [pc, #44]	; (2fd40 <waitfor+0x44>)
   2fd14:	4798      	blx	r3
   2fd16:	1e03      	subs	r3, r0, #0
   2fd18:	d10c      	bne.n	2fd34 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2fd1a:	687a      	ldr	r2, [r7, #4]
   2fd1c:	68fb      	ldr	r3, [r7, #12]
   2fd1e:	0011      	movs	r1, r2
   2fd20:	0018      	movs	r0, r3
   2fd22:	4b08      	ldr	r3, [pc, #32]	; (2fd44 <waitfor+0x48>)
   2fd24:	4798      	blx	r3
   2fd26:	0003      	movs	r3, r0
   2fd28:	617b      	str	r3, [r7, #20]
   2fd2a:	697a      	ldr	r2, [r7, #20]
   2fd2c:	68bb      	ldr	r3, [r7, #8]
   2fd2e:	429a      	cmp	r2, r3
   2fd30:	d1ed      	bne.n	2fd0e <waitfor+0x12>
   2fd32:	e000      	b.n	2fd36 <waitfor+0x3a>
            break; // we timed out
   2fd34:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2fd36:	697b      	ldr	r3, [r7, #20]
}
   2fd38:	0018      	movs	r0, r3
   2fd3a:	46bd      	mov	sp, r7
   2fd3c:	b006      	add	sp, #24
   2fd3e:	bd80      	pop	{r7, pc}
   2fd40:	00030379 	.word	0x00030379
   2fd44:	0002fa9d 	.word	0x0002fa9d

0002fd48 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2fd48:	b590      	push	{r4, r7, lr}
   2fd4a:	b09f      	sub	sp, #124	; 0x7c
   2fd4c:	af00      	add	r7, sp, #0
   2fd4e:	6078      	str	r0, [r7, #4]
   2fd50:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2fd52:	2301      	movs	r3, #1
   2fd54:	425b      	negs	r3, r3
   2fd56:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2fd58:	230c      	movs	r3, #12
   2fd5a:	18fa      	adds	r2, r7, r3
   2fd5c:	4b41      	ldr	r3, [pc, #260]	; (2fe64 <MQTTConnect+0x11c>)
   2fd5e:	0010      	movs	r0, r2
   2fd60:	0019      	movs	r1, r3
   2fd62:	2358      	movs	r3, #88	; 0x58
   2fd64:	001a      	movs	r2, r3
   2fd66:	4b40      	ldr	r3, [pc, #256]	; (2fe68 <MQTTConnect+0x120>)
   2fd68:	4798      	blx	r3
    int len = 0;
   2fd6a:	2300      	movs	r3, #0
   2fd6c:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2fd6e:	687b      	ldr	r3, [r7, #4]
   2fd70:	6a1b      	ldr	r3, [r3, #32]
   2fd72:	2b00      	cmp	r3, #0
   2fd74:	d166      	bne.n	2fe44 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2fd76:	2364      	movs	r3, #100	; 0x64
   2fd78:	18fb      	adds	r3, r7, r3
   2fd7a:	0018      	movs	r0, r3
   2fd7c:	4b3b      	ldr	r3, [pc, #236]	; (2fe6c <MQTTConnect+0x124>)
   2fd7e:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2fd80:	687b      	ldr	r3, [r7, #4]
   2fd82:	685a      	ldr	r2, [r3, #4]
   2fd84:	2364      	movs	r3, #100	; 0x64
   2fd86:	18fb      	adds	r3, r7, r3
   2fd88:	0011      	movs	r1, r2
   2fd8a:	0018      	movs	r0, r3
   2fd8c:	4b38      	ldr	r3, [pc, #224]	; (2fe70 <MQTTConnect+0x128>)
   2fd8e:	4798      	blx	r3

    if (options == 0)
   2fd90:	683b      	ldr	r3, [r7, #0]
   2fd92:	2b00      	cmp	r3, #0
   2fd94:	d102      	bne.n	2fd9c <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2fd96:	230c      	movs	r3, #12
   2fd98:	18fb      	adds	r3, r7, r3
   2fd9a:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2fd9c:	683b      	ldr	r3, [r7, #0]
   2fd9e:	8b1b      	ldrh	r3, [r3, #24]
   2fda0:	001a      	movs	r2, r3
   2fda2:	687b      	ldr	r3, [r7, #4]
   2fda4:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2fda6:	687b      	ldr	r3, [r7, #4]
   2fda8:	3354      	adds	r3, #84	; 0x54
   2fdaa:	001a      	movs	r2, r3
   2fdac:	687b      	ldr	r3, [r7, #4]
   2fdae:	699b      	ldr	r3, [r3, #24]
   2fdb0:	0019      	movs	r1, r3
   2fdb2:	0010      	movs	r0, r2
   2fdb4:	4b2f      	ldr	r3, [pc, #188]	; (2fe74 <MQTTConnect+0x12c>)
   2fdb6:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2fdb8:	687b      	ldr	r3, [r7, #4]
   2fdba:	6918      	ldr	r0, [r3, #16]
   2fdbc:	687b      	ldr	r3, [r7, #4]
   2fdbe:	689b      	ldr	r3, [r3, #8]
   2fdc0:	0019      	movs	r1, r3
   2fdc2:	683b      	ldr	r3, [r7, #0]
   2fdc4:	001a      	movs	r2, r3
   2fdc6:	4b2c      	ldr	r3, [pc, #176]	; (2fe78 <MQTTConnect+0x130>)
   2fdc8:	4798      	blx	r3
   2fdca:	0003      	movs	r3, r0
   2fdcc:	673b      	str	r3, [r7, #112]	; 0x70
   2fdce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2fdd0:	2b00      	cmp	r3, #0
   2fdd2:	dd39      	ble.n	2fe48 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2fdd4:	2364      	movs	r3, #100	; 0x64
   2fdd6:	18fa      	adds	r2, r7, r3
   2fdd8:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2fdda:	687b      	ldr	r3, [r7, #4]
   2fddc:	0018      	movs	r0, r3
   2fdde:	4b27      	ldr	r3, [pc, #156]	; (2fe7c <MQTTConnect+0x134>)
   2fde0:	4798      	blx	r3
   2fde2:	0003      	movs	r3, r0
   2fde4:	677b      	str	r3, [r7, #116]	; 0x74
   2fde6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2fde8:	2b00      	cmp	r3, #0
   2fdea:	d12f      	bne.n	2fe4c <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2fdec:	2364      	movs	r3, #100	; 0x64
   2fdee:	18fa      	adds	r2, r7, r3
   2fdf0:	687b      	ldr	r3, [r7, #4]
   2fdf2:	2102      	movs	r1, #2
   2fdf4:	0018      	movs	r0, r3
   2fdf6:	4b22      	ldr	r3, [pc, #136]	; (2fe80 <MQTTConnect+0x138>)
   2fdf8:	4798      	blx	r3
   2fdfa:	0003      	movs	r3, r0
   2fdfc:	2b02      	cmp	r3, #2
   2fdfe:	d11d      	bne.n	2fe3c <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2fe00:	230b      	movs	r3, #11
   2fe02:	18fb      	adds	r3, r7, r3
   2fe04:	22ff      	movs	r2, #255	; 0xff
   2fe06:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2fe08:	230a      	movs	r3, #10
   2fe0a:	18fb      	adds	r3, r7, r3
   2fe0c:	2200      	movs	r2, #0
   2fe0e:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2fe10:	687b      	ldr	r3, [r7, #4]
   2fe12:	695a      	ldr	r2, [r3, #20]
   2fe14:	687b      	ldr	r3, [r7, #4]
   2fe16:	68db      	ldr	r3, [r3, #12]
   2fe18:	210b      	movs	r1, #11
   2fe1a:	1879      	adds	r1, r7, r1
   2fe1c:	200a      	movs	r0, #10
   2fe1e:	1838      	adds	r0, r7, r0
   2fe20:	4c18      	ldr	r4, [pc, #96]	; (2fe84 <MQTTConnect+0x13c>)
   2fe22:	47a0      	blx	r4
   2fe24:	0003      	movs	r3, r0
   2fe26:	2b01      	cmp	r3, #1
   2fe28:	d104      	bne.n	2fe34 <MQTTConnect+0xec>
            rc = connack_rc;
   2fe2a:	230b      	movs	r3, #11
   2fe2c:	18fb      	adds	r3, r7, r3
   2fe2e:	781b      	ldrb	r3, [r3, #0]
   2fe30:	677b      	str	r3, [r7, #116]	; 0x74
   2fe32:	e00c      	b.n	2fe4e <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2fe34:	2301      	movs	r3, #1
   2fe36:	425b      	negs	r3, r3
   2fe38:	677b      	str	r3, [r7, #116]	; 0x74
   2fe3a:	e008      	b.n	2fe4e <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2fe3c:	2301      	movs	r3, #1
   2fe3e:	425b      	negs	r3, r3
   2fe40:	677b      	str	r3, [r7, #116]	; 0x74
   2fe42:	e004      	b.n	2fe4e <MQTTConnect+0x106>
		goto exit;
   2fe44:	46c0      	nop			; (mov r8, r8)
   2fe46:	e002      	b.n	2fe4e <MQTTConnect+0x106>
        goto exit;
   2fe48:	46c0      	nop			; (mov r8, r8)
   2fe4a:	e000      	b.n	2fe4e <MQTTConnect+0x106>
        goto exit; // there was a problem
   2fe4c:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2fe4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2fe50:	2b00      	cmp	r3, #0
   2fe52:	d102      	bne.n	2fe5a <MQTTConnect+0x112>
        c->isconnected = 1;
   2fe54:	687b      	ldr	r3, [r7, #4]
   2fe56:	2201      	movs	r2, #1
   2fe58:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2fe5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2fe5c:	0018      	movs	r0, r3
   2fe5e:	46bd      	mov	sp, r7
   2fe60:	b01f      	add	sp, #124	; 0x7c
   2fe62:	bd90      	pop	{r4, r7, pc}
   2fe64:	0003b9f0 	.word	0x0003b9f0
   2fe68:	00036409 	.word	0x00036409
   2fe6c:	0003041d 	.word	0x0003041d
   2fe70:	000303a5 	.word	0x000303a5
   2fe74:	000303cd 	.word	0x000303cd
   2fe78:	00030bf9 	.word	0x00030bf9
   2fe7c:	0002f595 	.word	0x0002f595
   2fe80:	0002fcfd 	.word	0x0002fcfd
   2fe84:	00030e75 	.word	0x00030e75

0002fe88 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2fe88:	b5b0      	push	{r4, r5, r7, lr}
   2fe8a:	b096      	sub	sp, #88	; 0x58
   2fe8c:	af04      	add	r7, sp, #16
   2fe8e:	60f8      	str	r0, [r7, #12]
   2fe90:	60b9      	str	r1, [r7, #8]
   2fe92:	603b      	str	r3, [r7, #0]
   2fe94:	1dfb      	adds	r3, r7, #7
   2fe96:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2fe98:	2301      	movs	r3, #1
   2fe9a:	425b      	negs	r3, r3
   2fe9c:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2fe9e:	2300      	movs	r3, #0
   2fea0:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2fea2:	2324      	movs	r3, #36	; 0x24
   2fea4:	18fb      	adds	r3, r7, r3
   2fea6:	2200      	movs	r2, #0
   2fea8:	601a      	str	r2, [r3, #0]
   2feaa:	2324      	movs	r3, #36	; 0x24
   2feac:	18fb      	adds	r3, r7, r3
   2feae:	2200      	movs	r2, #0
   2feb0:	605a      	str	r2, [r3, #4]
   2feb2:	2324      	movs	r3, #36	; 0x24
   2feb4:	18fb      	adds	r3, r7, r3
   2feb6:	2200      	movs	r2, #0
   2feb8:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2feba:	1dfb      	adds	r3, r7, #7
   2febc:	781b      	ldrb	r3, [r3, #0]
   2febe:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2fec0:	2324      	movs	r3, #36	; 0x24
   2fec2:	18fb      	adds	r3, r7, r3
   2fec4:	68ba      	ldr	r2, [r7, #8]
   2fec6:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2fec8:	68fb      	ldr	r3, [r7, #12]
   2feca:	6a1b      	ldr	r3, [r3, #32]
   2fecc:	2b00      	cmp	r3, #0
   2fece:	d100      	bne.n	2fed2 <MQTTSubscribe+0x4a>
   2fed0:	e088      	b.n	2ffe4 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2fed2:	2330      	movs	r3, #48	; 0x30
   2fed4:	18fb      	adds	r3, r7, r3
   2fed6:	0018      	movs	r0, r3
   2fed8:	4b47      	ldr	r3, [pc, #284]	; (2fff8 <MQTTSubscribe+0x170>)
   2feda:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2fedc:	68fb      	ldr	r3, [r7, #12]
   2fede:	685a      	ldr	r2, [r3, #4]
   2fee0:	2330      	movs	r3, #48	; 0x30
   2fee2:	18fb      	adds	r3, r7, r3
   2fee4:	0011      	movs	r1, r2
   2fee6:	0018      	movs	r0, r3
   2fee8:	4b44      	ldr	r3, [pc, #272]	; (2fffc <MQTTSubscribe+0x174>)
   2feea:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2feec:	68fb      	ldr	r3, [r7, #12]
   2feee:	691c      	ldr	r4, [r3, #16]
   2fef0:	68fb      	ldr	r3, [r7, #12]
   2fef2:	689b      	ldr	r3, [r3, #8]
   2fef4:	001d      	movs	r5, r3
   2fef6:	68fb      	ldr	r3, [r7, #12]
   2fef8:	0018      	movs	r0, r3
   2fefa:	4b41      	ldr	r3, [pc, #260]	; (30000 <MQTTSubscribe+0x178>)
   2fefc:	4798      	blx	r3
   2fefe:	0003      	movs	r3, r0
   2ff00:	b29a      	uxth	r2, r3
   2ff02:	2320      	movs	r3, #32
   2ff04:	18fb      	adds	r3, r7, r3
   2ff06:	9302      	str	r3, [sp, #8]
   2ff08:	2324      	movs	r3, #36	; 0x24
   2ff0a:	18fb      	adds	r3, r7, r3
   2ff0c:	9301      	str	r3, [sp, #4]
   2ff0e:	2301      	movs	r3, #1
   2ff10:	9300      	str	r3, [sp, #0]
   2ff12:	0013      	movs	r3, r2
   2ff14:	2200      	movs	r2, #0
   2ff16:	0029      	movs	r1, r5
   2ff18:	0020      	movs	r0, r4
   2ff1a:	4c3a      	ldr	r4, [pc, #232]	; (30004 <MQTTSubscribe+0x17c>)
   2ff1c:	47a0      	blx	r4
   2ff1e:	0003      	movs	r3, r0
   2ff20:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2ff22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ff24:	2b00      	cmp	r3, #0
   2ff26:	dd5f      	ble.n	2ffe8 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2ff28:	2330      	movs	r3, #48	; 0x30
   2ff2a:	18fa      	adds	r2, r7, r3
   2ff2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2ff2e:	68fb      	ldr	r3, [r7, #12]
   2ff30:	0018      	movs	r0, r3
   2ff32:	4b35      	ldr	r3, [pc, #212]	; (30008 <MQTTSubscribe+0x180>)
   2ff34:	4798      	blx	r3
   2ff36:	0003      	movs	r3, r0
   2ff38:	647b      	str	r3, [r7, #68]	; 0x44
   2ff3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2ff3c:	2b00      	cmp	r3, #0
   2ff3e:	d155      	bne.n	2ffec <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2ff40:	2330      	movs	r3, #48	; 0x30
   2ff42:	18fa      	adds	r2, r7, r3
   2ff44:	68fb      	ldr	r3, [r7, #12]
   2ff46:	2109      	movs	r1, #9
   2ff48:	0018      	movs	r0, r3
   2ff4a:	4b30      	ldr	r3, [pc, #192]	; (3000c <MQTTSubscribe+0x184>)
   2ff4c:	4798      	blx	r3
   2ff4e:	0003      	movs	r3, r0
   2ff50:	2b09      	cmp	r3, #9
   2ff52:	d143      	bne.n	2ffdc <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2ff54:	2300      	movs	r3, #0
   2ff56:	61fb      	str	r3, [r7, #28]
   2ff58:	2301      	movs	r3, #1
   2ff5a:	425b      	negs	r3, r3
   2ff5c:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2ff5e:	68fb      	ldr	r3, [r7, #12]
   2ff60:	695a      	ldr	r2, [r3, #20]
   2ff62:	68fb      	ldr	r3, [r7, #12]
   2ff64:	68db      	ldr	r3, [r3, #12]
   2ff66:	001c      	movs	r4, r3
   2ff68:	2318      	movs	r3, #24
   2ff6a:	18fb      	adds	r3, r7, r3
   2ff6c:	211c      	movs	r1, #28
   2ff6e:	1879      	adds	r1, r7, r1
   2ff70:	2016      	movs	r0, #22
   2ff72:	1838      	adds	r0, r7, r0
   2ff74:	9401      	str	r4, [sp, #4]
   2ff76:	9200      	str	r2, [sp, #0]
   2ff78:	000a      	movs	r2, r1
   2ff7a:	2101      	movs	r1, #1
   2ff7c:	4c24      	ldr	r4, [pc, #144]	; (30010 <MQTTSubscribe+0x188>)
   2ff7e:	47a0      	blx	r4
   2ff80:	0003      	movs	r3, r0
   2ff82:	2b01      	cmp	r3, #1
   2ff84:	d101      	bne.n	2ff8a <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2ff86:	69bb      	ldr	r3, [r7, #24]
   2ff88:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2ff8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2ff8c:	2b80      	cmp	r3, #128	; 0x80
   2ff8e:	d02e      	beq.n	2ffee <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2ff90:	2300      	movs	r3, #0
   2ff92:	643b      	str	r3, [r7, #64]	; 0x40
   2ff94:	e01e      	b.n	2ffd4 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2ff96:	68fa      	ldr	r2, [r7, #12]
   2ff98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ff9a:	3304      	adds	r3, #4
   2ff9c:	00db      	lsls	r3, r3, #3
   2ff9e:	18d3      	adds	r3, r2, r3
   2ffa0:	3304      	adds	r3, #4
   2ffa2:	681b      	ldr	r3, [r3, #0]
   2ffa4:	2b00      	cmp	r3, #0
   2ffa6:	d112      	bne.n	2ffce <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2ffa8:	68fa      	ldr	r2, [r7, #12]
   2ffaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ffac:	3304      	adds	r3, #4
   2ffae:	00db      	lsls	r3, r3, #3
   2ffb0:	18d3      	adds	r3, r2, r3
   2ffb2:	3304      	adds	r3, #4
   2ffb4:	68ba      	ldr	r2, [r7, #8]
   2ffb6:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2ffb8:	68fa      	ldr	r2, [r7, #12]
   2ffba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ffbc:	3304      	adds	r3, #4
   2ffbe:	00db      	lsls	r3, r3, #3
   2ffc0:	18d3      	adds	r3, r2, r3
   2ffc2:	3308      	adds	r3, #8
   2ffc4:	683a      	ldr	r2, [r7, #0]
   2ffc6:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2ffc8:	2300      	movs	r3, #0
   2ffca:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2ffcc:	e00f      	b.n	2ffee <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2ffce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ffd0:	3301      	adds	r3, #1
   2ffd2:	643b      	str	r3, [r7, #64]	; 0x40
   2ffd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ffd6:	2b04      	cmp	r3, #4
   2ffd8:	dddd      	ble.n	2ff96 <MQTTSubscribe+0x10e>
   2ffda:	e008      	b.n	2ffee <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2ffdc:	2301      	movs	r3, #1
   2ffde:	425b      	negs	r3, r3
   2ffe0:	647b      	str	r3, [r7, #68]	; 0x44
   2ffe2:	e004      	b.n	2ffee <MQTTSubscribe+0x166>
		goto exit;
   2ffe4:	46c0      	nop			; (mov r8, r8)
   2ffe6:	e002      	b.n	2ffee <MQTTSubscribe+0x166>
        goto exit;
   2ffe8:	46c0      	nop			; (mov r8, r8)
   2ffea:	e000      	b.n	2ffee <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2ffec:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2ffee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2fff0:	0018      	movs	r0, r3
   2fff2:	46bd      	mov	sp, r7
   2fff4:	b012      	add	sp, #72	; 0x48
   2fff6:	bdb0      	pop	{r4, r5, r7, pc}
   2fff8:	0003041d 	.word	0x0003041d
   2fffc:	000303a5 	.word	0x000303a5
   30000:	0002f565 	.word	0x0002f565
   30004:	00031955 	.word	0x00031955
   30008:	0002f595 	.word	0x0002f595
   3000c:	0002fcfd 	.word	0x0002fcfd
   30010:	00031aa5 	.word	0x00031aa5

00030014 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   30014:	b5f0      	push	{r4, r5, r6, r7, lr}
   30016:	46ce      	mov	lr, r9
   30018:	4647      	mov	r7, r8
   3001a:	b580      	push	{r7, lr}
   3001c:	b097      	sub	sp, #92	; 0x5c
   3001e:	af08      	add	r7, sp, #32
   30020:	60f8      	str	r0, [r7, #12]
   30022:	60b9      	str	r1, [r7, #8]
   30024:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   30026:	2301      	movs	r3, #1
   30028:	425b      	negs	r3, r3
   3002a:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   3002c:	2318      	movs	r3, #24
   3002e:	18fb      	adds	r3, r7, r3
   30030:	2200      	movs	r2, #0
   30032:	601a      	str	r2, [r3, #0]
   30034:	2318      	movs	r3, #24
   30036:	18fb      	adds	r3, r7, r3
   30038:	2200      	movs	r2, #0
   3003a:	605a      	str	r2, [r3, #4]
   3003c:	2318      	movs	r3, #24
   3003e:	18fb      	adds	r3, r7, r3
   30040:	2200      	movs	r2, #0
   30042:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   30044:	2318      	movs	r3, #24
   30046:	18fb      	adds	r3, r7, r3
   30048:	68ba      	ldr	r2, [r7, #8]
   3004a:	601a      	str	r2, [r3, #0]
    int len = 0;
   3004c:	2300      	movs	r3, #0
   3004e:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   30050:	68fb      	ldr	r3, [r7, #12]
   30052:	6a1b      	ldr	r3, [r3, #32]
   30054:	2b00      	cmp	r3, #0
   30056:	d100      	bne.n	3005a <MQTTPublish+0x46>
   30058:	e0a0      	b.n	3019c <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   3005a:	2324      	movs	r3, #36	; 0x24
   3005c:	18fb      	adds	r3, r7, r3
   3005e:	0018      	movs	r0, r3
   30060:	4b55      	ldr	r3, [pc, #340]	; (301b8 <MQTTPublish+0x1a4>)
   30062:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   30064:	68fb      	ldr	r3, [r7, #12]
   30066:	685a      	ldr	r2, [r3, #4]
   30068:	2324      	movs	r3, #36	; 0x24
   3006a:	18fb      	adds	r3, r7, r3
   3006c:	0011      	movs	r1, r2
   3006e:	0018      	movs	r0, r3
   30070:	4b52      	ldr	r3, [pc, #328]	; (301bc <MQTTPublish+0x1a8>)
   30072:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   30074:	687b      	ldr	r3, [r7, #4]
   30076:	781b      	ldrb	r3, [r3, #0]
   30078:	2b01      	cmp	r3, #1
   3007a:	d003      	beq.n	30084 <MQTTPublish+0x70>
   3007c:	687b      	ldr	r3, [r7, #4]
   3007e:	781b      	ldrb	r3, [r3, #0]
   30080:	2b02      	cmp	r3, #2
   30082:	d107      	bne.n	30094 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   30084:	68fb      	ldr	r3, [r7, #12]
   30086:	0018      	movs	r0, r3
   30088:	4b4d      	ldr	r3, [pc, #308]	; (301c0 <MQTTPublish+0x1ac>)
   3008a:	4798      	blx	r3
   3008c:	0003      	movs	r3, r0
   3008e:	b29a      	uxth	r2, r3
   30090:	687b      	ldr	r3, [r7, #4]
   30092:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   30094:	68fb      	ldr	r3, [r7, #12]
   30096:	691b      	ldr	r3, [r3, #16]
   30098:	469c      	mov	ip, r3
   3009a:	68fb      	ldr	r3, [r7, #12]
   3009c:	689b      	ldr	r3, [r3, #8]
   3009e:	001d      	movs	r5, r3
   300a0:	687b      	ldr	r3, [r7, #4]
   300a2:	781b      	ldrb	r3, [r3, #0]
   300a4:	001e      	movs	r6, r3
   300a6:	687b      	ldr	r3, [r7, #4]
   300a8:	785b      	ldrb	r3, [r3, #1]
   300aa:	4698      	mov	r8, r3
   300ac:	687b      	ldr	r3, [r7, #4]
   300ae:	889b      	ldrh	r3, [r3, #4]
   300b0:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   300b2:	687b      	ldr	r3, [r7, #4]
   300b4:	689a      	ldr	r2, [r3, #8]
   300b6:	687b      	ldr	r3, [r7, #4]
   300b8:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   300ba:	9306      	str	r3, [sp, #24]
   300bc:	9205      	str	r2, [sp, #20]
   300be:	2318      	movs	r3, #24
   300c0:	18fa      	adds	r2, r7, r3
   300c2:	2308      	movs	r3, #8
   300c4:	446b      	add	r3, sp
   300c6:	ca13      	ldmia	r2!, {r0, r1, r4}
   300c8:	c313      	stmia	r3!, {r0, r1, r4}
   300ca:	464b      	mov	r3, r9
   300cc:	9301      	str	r3, [sp, #4]
   300ce:	4643      	mov	r3, r8
   300d0:	9300      	str	r3, [sp, #0]
   300d2:	0033      	movs	r3, r6
   300d4:	2200      	movs	r2, #0
   300d6:	0029      	movs	r1, r5
   300d8:	4660      	mov	r0, ip
   300da:	4c3a      	ldr	r4, [pc, #232]	; (301c4 <MQTTPublish+0x1b0>)
   300dc:	47a0      	blx	r4
   300de:	0003      	movs	r3, r0
   300e0:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   300e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   300e4:	2b00      	cmp	r3, #0
   300e6:	dd5b      	ble.n	301a0 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   300e8:	2324      	movs	r3, #36	; 0x24
   300ea:	18fa      	adds	r2, r7, r3
   300ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
   300ee:	68fb      	ldr	r3, [r7, #12]
   300f0:	0018      	movs	r0, r3
   300f2:	4b35      	ldr	r3, [pc, #212]	; (301c8 <MQTTPublish+0x1b4>)
   300f4:	4798      	blx	r3
   300f6:	0003      	movs	r3, r0
   300f8:	637b      	str	r3, [r7, #52]	; 0x34
   300fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   300fc:	2b00      	cmp	r3, #0
   300fe:	d151      	bne.n	301a4 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   30100:	687b      	ldr	r3, [r7, #4]
   30102:	781b      	ldrb	r3, [r3, #0]
   30104:	2b01      	cmp	r3, #1
   30106:	d122      	bne.n	3014e <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   30108:	2324      	movs	r3, #36	; 0x24
   3010a:	18fa      	adds	r2, r7, r3
   3010c:	68fb      	ldr	r3, [r7, #12]
   3010e:	2104      	movs	r1, #4
   30110:	0018      	movs	r0, r3
   30112:	4b2e      	ldr	r3, [pc, #184]	; (301cc <MQTTPublish+0x1b8>)
   30114:	4798      	blx	r3
   30116:	0003      	movs	r3, r0
   30118:	2b04      	cmp	r3, #4
   3011a:	d114      	bne.n	30146 <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   3011c:	68fb      	ldr	r3, [r7, #12]
   3011e:	695c      	ldr	r4, [r3, #20]
   30120:	68fb      	ldr	r3, [r7, #12]
   30122:	68db      	ldr	r3, [r3, #12]
   30124:	2216      	movs	r2, #22
   30126:	18ba      	adds	r2, r7, r2
   30128:	2115      	movs	r1, #21
   3012a:	1879      	adds	r1, r7, r1
   3012c:	2014      	movs	r0, #20
   3012e:	1838      	adds	r0, r7, r0
   30130:	9300      	str	r3, [sp, #0]
   30132:	0023      	movs	r3, r4
   30134:	4c26      	ldr	r4, [pc, #152]	; (301d0 <MQTTPublish+0x1bc>)
   30136:	47a0      	blx	r4
   30138:	0003      	movs	r3, r0
   3013a:	2b01      	cmp	r3, #1
   3013c:	d033      	beq.n	301a6 <MQTTPublish+0x192>
                rc = FAILURE;
   3013e:	2301      	movs	r3, #1
   30140:	425b      	negs	r3, r3
   30142:	637b      	str	r3, [r7, #52]	; 0x34
   30144:	e02f      	b.n	301a6 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   30146:	2301      	movs	r3, #1
   30148:	425b      	negs	r3, r3
   3014a:	637b      	str	r3, [r7, #52]	; 0x34
   3014c:	e02b      	b.n	301a6 <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   3014e:	687b      	ldr	r3, [r7, #4]
   30150:	781b      	ldrb	r3, [r3, #0]
   30152:	2b02      	cmp	r3, #2
   30154:	d127      	bne.n	301a6 <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   30156:	2324      	movs	r3, #36	; 0x24
   30158:	18fa      	adds	r2, r7, r3
   3015a:	68fb      	ldr	r3, [r7, #12]
   3015c:	2107      	movs	r1, #7
   3015e:	0018      	movs	r0, r3
   30160:	4b1a      	ldr	r3, [pc, #104]	; (301cc <MQTTPublish+0x1b8>)
   30162:	4798      	blx	r3
   30164:	0003      	movs	r3, r0
   30166:	2b07      	cmp	r3, #7
   30168:	d114      	bne.n	30194 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   3016a:	68fb      	ldr	r3, [r7, #12]
   3016c:	695c      	ldr	r4, [r3, #20]
   3016e:	68fb      	ldr	r3, [r7, #12]
   30170:	68db      	ldr	r3, [r3, #12]
   30172:	2212      	movs	r2, #18
   30174:	18ba      	adds	r2, r7, r2
   30176:	2111      	movs	r1, #17
   30178:	1879      	adds	r1, r7, r1
   3017a:	2010      	movs	r0, #16
   3017c:	1838      	adds	r0, r7, r0
   3017e:	9300      	str	r3, [sp, #0]
   30180:	0023      	movs	r3, r4
   30182:	4c13      	ldr	r4, [pc, #76]	; (301d0 <MQTTPublish+0x1bc>)
   30184:	47a0      	blx	r4
   30186:	0003      	movs	r3, r0
   30188:	2b01      	cmp	r3, #1
   3018a:	d00c      	beq.n	301a6 <MQTTPublish+0x192>
                rc = FAILURE;
   3018c:	2301      	movs	r3, #1
   3018e:	425b      	negs	r3, r3
   30190:	637b      	str	r3, [r7, #52]	; 0x34
   30192:	e008      	b.n	301a6 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   30194:	2301      	movs	r3, #1
   30196:	425b      	negs	r3, r3
   30198:	637b      	str	r3, [r7, #52]	; 0x34
   3019a:	e004      	b.n	301a6 <MQTTPublish+0x192>
		goto exit;
   3019c:	46c0      	nop			; (mov r8, r8)
   3019e:	e002      	b.n	301a6 <MQTTPublish+0x192>
        goto exit;
   301a0:	46c0      	nop			; (mov r8, r8)
   301a2:	e000      	b.n	301a6 <MQTTPublish+0x192>
        goto exit; // there was a problem
   301a4:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   301a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   301a8:	0018      	movs	r0, r3
   301aa:	46bd      	mov	sp, r7
   301ac:	b00f      	add	sp, #60	; 0x3c
   301ae:	bc0c      	pop	{r2, r3}
   301b0:	4690      	mov	r8, r2
   301b2:	4699      	mov	r9, r3
   301b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   301b6:	46c0      	nop			; (mov r8, r8)
   301b8:	0003041d 	.word	0x0003041d
   301bc:	000303a5 	.word	0x000303a5
   301c0:	0002f565 	.word	0x0002f565
   301c4:	000316a1 	.word	0x000316a1
   301c8:	0002f595 	.word	0x0002f595
   301cc:	0002fcfd 	.word	0x0002fcfd
   301d0:	00031119 	.word	0x00031119

000301d4 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   301d4:	b580      	push	{r7, lr}
   301d6:	b088      	sub	sp, #32
   301d8:	af00      	add	r7, sp, #0
   301da:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   301dc:	2301      	movs	r3, #1
   301de:	425b      	negs	r3, r3
   301e0:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   301e2:	2300      	movs	r3, #0
   301e4:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   301e6:	230c      	movs	r3, #12
   301e8:	18fb      	adds	r3, r7, r3
   301ea:	0018      	movs	r0, r3
   301ec:	4b13      	ldr	r3, [pc, #76]	; (3023c <MQTTDisconnect+0x68>)
   301ee:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   301f0:	687b      	ldr	r3, [r7, #4]
   301f2:	685a      	ldr	r2, [r3, #4]
   301f4:	230c      	movs	r3, #12
   301f6:	18fb      	adds	r3, r7, r3
   301f8:	0011      	movs	r1, r2
   301fa:	0018      	movs	r0, r3
   301fc:	4b10      	ldr	r3, [pc, #64]	; (30240 <MQTTDisconnect+0x6c>)
   301fe:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   30200:	687b      	ldr	r3, [r7, #4]
   30202:	691a      	ldr	r2, [r3, #16]
   30204:	687b      	ldr	r3, [r7, #4]
   30206:	689b      	ldr	r3, [r3, #8]
   30208:	0019      	movs	r1, r3
   3020a:	0010      	movs	r0, r2
   3020c:	4b0d      	ldr	r3, [pc, #52]	; (30244 <MQTTDisconnect+0x70>)
   3020e:	4798      	blx	r3
   30210:	0003      	movs	r3, r0
   30212:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   30214:	69bb      	ldr	r3, [r7, #24]
   30216:	2b00      	cmp	r3, #0
   30218:	dd08      	ble.n	3022c <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   3021a:	230c      	movs	r3, #12
   3021c:	18fa      	adds	r2, r7, r3
   3021e:	69b9      	ldr	r1, [r7, #24]
   30220:	687b      	ldr	r3, [r7, #4]
   30222:	0018      	movs	r0, r3
   30224:	4b08      	ldr	r3, [pc, #32]	; (30248 <MQTTDisconnect+0x74>)
   30226:	4798      	blx	r3
   30228:	0003      	movs	r3, r0
   3022a:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   3022c:	687b      	ldr	r3, [r7, #4]
   3022e:	2200      	movs	r2, #0
   30230:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   30232:	69fb      	ldr	r3, [r7, #28]
}
   30234:	0018      	movs	r0, r3
   30236:	46bd      	mov	sp, r7
   30238:	b008      	add	sp, #32
   3023a:	bd80      	pop	{r7, pc}
   3023c:	0003041d 	.word	0x0003041d
   30240:	000303a5 	.word	0x000303a5
   30244:	00030fcd 	.word	0x00030fcd
   30248:	0002f595 	.word	0x0002f595

0003024c <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   3024c:	b580      	push	{r7, lr}
   3024e:	b084      	sub	sp, #16
   30250:	af00      	add	r7, sp, #0
   30252:	0002      	movs	r2, r0
   30254:	1dfb      	adds	r3, r7, #7
   30256:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   30258:	2300      	movs	r3, #0
   3025a:	60fb      	str	r3, [r7, #12]
   3025c:	e01c      	b.n	30298 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   3025e:	4a12      	ldr	r2, [pc, #72]	; (302a8 <isMQTTSocket+0x5c>)
   30260:	68fb      	ldr	r3, [r7, #12]
   30262:	2164      	movs	r1, #100	; 0x64
   30264:	434b      	muls	r3, r1
   30266:	18d3      	adds	r3, r2, r3
   30268:	3360      	adds	r3, #96	; 0x60
   3026a:	681b      	ldr	r3, [r3, #0]
   3026c:	2b00      	cmp	r3, #0
   3026e:	d010      	beq.n	30292 <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   30270:	4a0d      	ldr	r2, [pc, #52]	; (302a8 <isMQTTSocket+0x5c>)
   30272:	68fb      	ldr	r3, [r7, #12]
   30274:	2164      	movs	r1, #100	; 0x64
   30276:	434b      	muls	r3, r1
   30278:	18d3      	adds	r3, r2, r3
   3027a:	3360      	adds	r3, #96	; 0x60
   3027c:	681b      	ldr	r3, [r3, #0]
   3027e:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   30280:	68bb      	ldr	r3, [r7, #8]
   30282:	6a1a      	ldr	r2, [r3, #32]
   30284:	1dfb      	adds	r3, r7, #7
   30286:	781b      	ldrb	r3, [r3, #0]
   30288:	b25b      	sxtb	r3, r3
   3028a:	429a      	cmp	r2, r3
   3028c:	d101      	bne.n	30292 <isMQTTSocket+0x46>
				return true;
   3028e:	2301      	movs	r3, #1
   30290:	e006      	b.n	302a0 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   30292:	68fb      	ldr	r3, [r7, #12]
   30294:	3301      	adds	r3, #1
   30296:	60fb      	str	r3, [r7, #12]
   30298:	68fb      	ldr	r3, [r7, #12]
   3029a:	2b06      	cmp	r3, #6
   3029c:	d9df      	bls.n	3025e <isMQTTSocket+0x12>
		}
	}
	return false;
   3029e:	2300      	movs	r3, #0
}
   302a0:	0018      	movs	r0, r3
   302a2:	46bd      	mov	sp, r7
   302a4:	b004      	add	sp, #16
   302a6:	bd80      	pop	{r7, pc}
   302a8:	20004438 	.word	0x20004438

000302ac <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   302ac:	b580      	push	{r7, lr}
   302ae:	b082      	sub	sp, #8
   302b0:	af00      	add	r7, sp, #0
   302b2:	6078      	str	r0, [r7, #4]
   302b4:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   302b6:	4b0d      	ldr	r3, [pc, #52]	; (302ec <dnsResolveCallback+0x40>)
   302b8:	781b      	ldrb	r3, [r3, #0]
   302ba:	2201      	movs	r2, #1
   302bc:	4053      	eors	r3, r2
   302be:	b2db      	uxtb	r3, r3
   302c0:	2b00      	cmp	r3, #0
   302c2:	d00e      	beq.n	302e2 <dnsResolveCallback+0x36>
   302c4:	4b0a      	ldr	r3, [pc, #40]	; (302f0 <dnsResolveCallback+0x44>)
   302c6:	681b      	ldr	r3, [r3, #0]
   302c8:	687a      	ldr	r2, [r7, #4]
   302ca:	0011      	movs	r1, r2
   302cc:	0018      	movs	r0, r3
   302ce:	4b09      	ldr	r3, [pc, #36]	; (302f4 <dnsResolveCallback+0x48>)
   302d0:	4798      	blx	r3
   302d2:	1e03      	subs	r3, r0, #0
   302d4:	d105      	bne.n	302e2 <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   302d6:	683a      	ldr	r2, [r7, #0]
   302d8:	4b07      	ldr	r3, [pc, #28]	; (302f8 <dnsResolveCallback+0x4c>)
   302da:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   302dc:	4b03      	ldr	r3, [pc, #12]	; (302ec <dnsResolveCallback+0x40>)
   302de:	2201      	movs	r2, #1
   302e0:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   302e2:	46c0      	nop			; (mov r8, r8)
   302e4:	46bd      	mov	sp, r7
   302e6:	b002      	add	sp, #8
   302e8:	bd80      	pop	{r7, pc}
   302ea:	46c0      	nop			; (mov r8, r8)
   302ec:	20004328 	.word	0x20004328
   302f0:	20004434 	.word	0x20004434
   302f4:	00036797 	.word	0x00036797
   302f8:	20004320 	.word	0x20004320

000302fc <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   302fc:	b580      	push	{r7, lr}
   302fe:	b084      	sub	sp, #16
   30300:	af00      	add	r7, sp, #0
   30302:	603a      	str	r2, [r7, #0]
   30304:	1dfb      	adds	r3, r7, #7
   30306:	1c02      	adds	r2, r0, #0
   30308:	701a      	strb	r2, [r3, #0]
   3030a:	1dbb      	adds	r3, r7, #6
   3030c:	1c0a      	adds	r2, r1, #0
   3030e:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   30310:	1dfb      	adds	r3, r7, #7
   30312:	781b      	ldrb	r3, [r3, #0]
   30314:	b25b      	sxtb	r3, r3
   30316:	0018      	movs	r0, r3
   30318:	4b12      	ldr	r3, [pc, #72]	; (30364 <tcpClientSocketEventHandler+0x68>)
   3031a:	4798      	blx	r3
   3031c:	1e03      	subs	r3, r0, #0
   3031e:	d01c      	beq.n	3035a <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   30320:	1dbb      	adds	r3, r7, #6
   30322:	781b      	ldrb	r3, [r3, #0]
   30324:	2b06      	cmp	r3, #6
   30326:	d00c      	beq.n	30342 <tcpClientSocketEventHandler+0x46>
   30328:	2b07      	cmp	r3, #7
   3032a:	d006      	beq.n	3033a <tcpClientSocketEventHandler+0x3e>
   3032c:	2b05      	cmp	r3, #5
   3032e:	d000      	beq.n	30332 <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   30330:	e013      	b.n	3035a <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   30332:	4b0d      	ldr	r3, [pc, #52]	; (30368 <tcpClientSocketEventHandler+0x6c>)
   30334:	2201      	movs	r2, #1
   30336:	701a      	strb	r2, [r3, #0]
			break;
   30338:	e00f      	b.n	3035a <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   3033a:	4b0c      	ldr	r3, [pc, #48]	; (3036c <tcpClientSocketEventHandler+0x70>)
   3033c:	2201      	movs	r2, #1
   3033e:	701a      	strb	r2, [r3, #0]
			break;
   30340:	e00b      	b.n	3035a <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   30342:	683b      	ldr	r3, [r7, #0]
   30344:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   30346:	68fb      	ldr	r3, [r7, #12]
   30348:	2204      	movs	r2, #4
   3034a:	5e9b      	ldrsh	r3, [r3, r2]
   3034c:	001a      	movs	r2, r3
   3034e:	4b08      	ldr	r3, [pc, #32]	; (30370 <tcpClientSocketEventHandler+0x74>)
   30350:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   30352:	4b08      	ldr	r3, [pc, #32]	; (30374 <tcpClientSocketEventHandler+0x78>)
   30354:	2201      	movs	r2, #1
   30356:	701a      	strb	r2, [r3, #0]
			break;
   30358:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   3035a:	46c0      	nop			; (mov r8, r8)
   3035c:	46bd      	mov	sp, r7
   3035e:	b004      	add	sp, #16
   30360:	bd80      	pop	{r7, pc}
   30362:	46c0      	nop			; (mov r8, r8)
   30364:	0003024d 	.word	0x0003024d
   30368:	20004329 	.word	0x20004329
   3036c:	2000432a 	.word	0x2000432a
   30370:	20004324 	.word	0x20004324
   30374:	2000432b 	.word	0x2000432b

00030378 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   30378:	b580      	push	{r7, lr}
   3037a:	b082      	sub	sp, #8
   3037c:	af00      	add	r7, sp, #0
   3037e:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   30380:	687b      	ldr	r3, [r7, #4]
   30382:	3304      	adds	r3, #4
   30384:	687a      	ldr	r2, [r7, #4]
   30386:	0011      	movs	r1, r2
   30388:	0018      	movs	r0, r3
   3038a:	4b05      	ldr	r3, [pc, #20]	; (303a0 <TimerIsExpired+0x28>)
   3038c:	4798      	blx	r3
   3038e:	0003      	movs	r3, r0
   30390:	3b01      	subs	r3, #1
   30392:	425a      	negs	r2, r3
   30394:	4153      	adcs	r3, r2
   30396:	b2db      	uxtb	r3, r3
}
   30398:	0018      	movs	r0, r3
   3039a:	46bd      	mov	sp, r7
   3039c:	b002      	add	sp, #8
   3039e:	bd80      	pop	{r7, pc}
   303a0:	0001da81 	.word	0x0001da81

000303a4 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   303a4:	b580      	push	{r7, lr}
   303a6:	b082      	sub	sp, #8
   303a8:	af00      	add	r7, sp, #0
   303aa:	6078      	str	r0, [r7, #4]
   303ac:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   303ae:	687b      	ldr	r3, [r7, #4]
   303b0:	683a      	ldr	r2, [r7, #0]
   303b2:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   303b4:	687b      	ldr	r3, [r7, #4]
   303b6:	3304      	adds	r3, #4
   303b8:	0018      	movs	r0, r3
   303ba:	4b03      	ldr	r3, [pc, #12]	; (303c8 <TimerCountdownMS+0x24>)
   303bc:	4798      	blx	r3
}
   303be:	46c0      	nop			; (mov r8, r8)
   303c0:	46bd      	mov	sp, r7
   303c2:	b002      	add	sp, #8
   303c4:	bd80      	pop	{r7, pc}
   303c6:	46c0      	nop			; (mov r8, r8)
   303c8:	0001da15 	.word	0x0001da15

000303cc <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   303cc:	b580      	push	{r7, lr}
   303ce:	b082      	sub	sp, #8
   303d0:	af00      	add	r7, sp, #0
   303d2:	6078      	str	r0, [r7, #4]
   303d4:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   303d6:	683b      	ldr	r3, [r7, #0]
   303d8:	22fa      	movs	r2, #250	; 0xfa
   303da:	0092      	lsls	r2, r2, #2
   303dc:	435a      	muls	r2, r3
   303de:	687b      	ldr	r3, [r7, #4]
   303e0:	0011      	movs	r1, r2
   303e2:	0018      	movs	r0, r3
   303e4:	4b02      	ldr	r3, [pc, #8]	; (303f0 <TimerCountdown+0x24>)
   303e6:	4798      	blx	r3
}
   303e8:	46c0      	nop			; (mov r8, r8)
   303ea:	46bd      	mov	sp, r7
   303ec:	b002      	add	sp, #8
   303ee:	bd80      	pop	{r7, pc}
   303f0:	000303a5 	.word	0x000303a5

000303f4 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   303f4:	b580      	push	{r7, lr}
   303f6:	b082      	sub	sp, #8
   303f8:	af00      	add	r7, sp, #0
   303fa:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   303fc:	687b      	ldr	r3, [r7, #4]
   303fe:	3304      	adds	r3, #4
   30400:	687a      	ldr	r2, [r7, #4]
   30402:	0011      	movs	r1, r2
   30404:	0018      	movs	r0, r3
   30406:	4b04      	ldr	r3, [pc, #16]	; (30418 <TimerLeftMS+0x24>)
   30408:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   3040a:	687b      	ldr	r3, [r7, #4]
   3040c:	681b      	ldr	r3, [r3, #0]
}
   3040e:	0018      	movs	r0, r3
   30410:	46bd      	mov	sp, r7
   30412:	b002      	add	sp, #8
   30414:	bd80      	pop	{r7, pc}
   30416:	46c0      	nop			; (mov r8, r8)
   30418:	0001da81 	.word	0x0001da81

0003041c <TimerInit>:


void TimerInit(Timer* timer) {
   3041c:	b580      	push	{r7, lr}
   3041e:	b082      	sub	sp, #8
   30420:	af00      	add	r7, sp, #0
   30422:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   30424:	687b      	ldr	r3, [r7, #4]
   30426:	2200      	movs	r2, #0
   30428:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   3042a:	687b      	ldr	r3, [r7, #4]
   3042c:	3304      	adds	r3, #4
   3042e:	2208      	movs	r2, #8
   30430:	2100      	movs	r1, #0
   30432:	0018      	movs	r0, r3
   30434:	4b02      	ldr	r3, [pc, #8]	; (30440 <TimerInit+0x24>)
   30436:	4798      	blx	r3
}
   30438:	46c0      	nop			; (mov r8, r8)
   3043a:	46bd      	mov	sp, r7
   3043c:	b002      	add	sp, #8
   3043e:	bd80      	pop	{r7, pc}
   30440:	0003643f 	.word	0x0003643f

00030444 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   30444:	b590      	push	{r4, r7, lr}
   30446:	b085      	sub	sp, #20
   30448:	af00      	add	r7, sp, #0
   3044a:	60f8      	str	r0, [r7, #12]
   3044c:	60b9      	str	r1, [r7, #8]
   3044e:	607a      	str	r2, [r7, #4]
   30450:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   30452:	683b      	ldr	r3, [r7, #0]
   30454:	2b00      	cmp	r3, #0
   30456:	d101      	bne.n	3045c <WINC1500_read+0x18>
   30458:	230a      	movs	r3, #10
   3045a:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   3045c:	4b2c      	ldr	r3, [pc, #176]	; (30510 <WINC1500_read+0xcc>)
   3045e:	681b      	ldr	r3, [r3, #0]
   30460:	2b00      	cmp	r3, #0
   30462:	d131      	bne.n	304c8 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   30464:	4b2b      	ldr	r3, [pc, #172]	; (30514 <WINC1500_read+0xd0>)
   30466:	2200      	movs	r2, #0
   30468:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   3046a:	68fb      	ldr	r3, [r7, #12]
   3046c:	681b      	ldr	r3, [r3, #0]
   3046e:	b258      	sxtb	r0, r3
   30470:	683c      	ldr	r4, [r7, #0]
   30472:	2380      	movs	r3, #128	; 0x80
   30474:	005a      	lsls	r2, r3, #1
   30476:	4928      	ldr	r1, [pc, #160]	; (30518 <WINC1500_read+0xd4>)
   30478:	0023      	movs	r3, r4
   3047a:	4c28      	ldr	r4, [pc, #160]	; (3051c <WINC1500_read+0xd8>)
   3047c:	47a0      	blx	r4
   3047e:	1e03      	subs	r3, r0, #0
   30480:	d005      	beq.n	3048e <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   30482:	2301      	movs	r3, #1
   30484:	425b      	negs	r3, r3
   30486:	e03e      	b.n	30506 <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   30488:	2000      	movs	r0, #0
   3048a:	4b25      	ldr	r3, [pc, #148]	; (30520 <WINC1500_read+0xdc>)
   3048c:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   3048e:	4b21      	ldr	r3, [pc, #132]	; (30514 <WINC1500_read+0xd0>)
   30490:	781b      	ldrb	r3, [r3, #0]
   30492:	2201      	movs	r2, #1
   30494:	4053      	eors	r3, r2
   30496:	b2db      	uxtb	r3, r3
   30498:	2b00      	cmp	r3, #0
   3049a:	d1f5      	bne.n	30488 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   3049c:	4b21      	ldr	r3, [pc, #132]	; (30524 <WINC1500_read+0xe0>)
   3049e:	681b      	ldr	r3, [r3, #0]
   304a0:	2b00      	cmp	r3, #0
   304a2:	dd08      	ble.n	304b6 <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   304a4:	4b1f      	ldr	r3, [pc, #124]	; (30524 <WINC1500_read+0xe0>)
   304a6:	681b      	ldr	r3, [r3, #0]
   304a8:	001a      	movs	r2, r3
   304aa:	4b19      	ldr	r3, [pc, #100]	; (30510 <WINC1500_read+0xcc>)
   304ac:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   304ae:	4b1e      	ldr	r3, [pc, #120]	; (30528 <WINC1500_read+0xe4>)
   304b0:	2200      	movs	r2, #0
   304b2:	601a      	str	r2, [r3, #0]
   304b4:	e008      	b.n	304c8 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   304b6:	4b16      	ldr	r3, [pc, #88]	; (30510 <WINC1500_read+0xcc>)
   304b8:	2200      	movs	r2, #0
   304ba:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   304bc:	4b1a      	ldr	r3, [pc, #104]	; (30528 <WINC1500_read+0xe4>)
   304be:	2200      	movs	r2, #0
   304c0:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   304c2:	4b18      	ldr	r3, [pc, #96]	; (30524 <WINC1500_read+0xe0>)
   304c4:	681b      	ldr	r3, [r3, #0]
   304c6:	e01e      	b.n	30506 <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   304c8:	4b11      	ldr	r3, [pc, #68]	; (30510 <WINC1500_read+0xcc>)
   304ca:	681b      	ldr	r3, [r3, #0]
   304cc:	001a      	movs	r2, r3
   304ce:	687b      	ldr	r3, [r7, #4]
   304d0:	4293      	cmp	r3, r2
   304d2:	dd02      	ble.n	304da <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   304d4:	2301      	movs	r3, #1
   304d6:	425b      	negs	r3, r3
   304d8:	e015      	b.n	30506 <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   304da:	4b13      	ldr	r3, [pc, #76]	; (30528 <WINC1500_read+0xe4>)
   304dc:	681a      	ldr	r2, [r3, #0]
   304de:	4b0e      	ldr	r3, [pc, #56]	; (30518 <WINC1500_read+0xd4>)
   304e0:	18d1      	adds	r1, r2, r3
   304e2:	687a      	ldr	r2, [r7, #4]
   304e4:	68bb      	ldr	r3, [r7, #8]
   304e6:	0018      	movs	r0, r3
   304e8:	4b10      	ldr	r3, [pc, #64]	; (3052c <WINC1500_read+0xe8>)
   304ea:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   304ec:	4b08      	ldr	r3, [pc, #32]	; (30510 <WINC1500_read+0xcc>)
   304ee:	681a      	ldr	r2, [r3, #0]
   304f0:	687b      	ldr	r3, [r7, #4]
   304f2:	1ad2      	subs	r2, r2, r3
   304f4:	4b06      	ldr	r3, [pc, #24]	; (30510 <WINC1500_read+0xcc>)
   304f6:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   304f8:	4b0b      	ldr	r3, [pc, #44]	; (30528 <WINC1500_read+0xe4>)
   304fa:	681a      	ldr	r2, [r3, #0]
   304fc:	687b      	ldr	r3, [r7, #4]
   304fe:	18d2      	adds	r2, r2, r3
   30500:	4b09      	ldr	r3, [pc, #36]	; (30528 <WINC1500_read+0xe4>)
   30502:	601a      	str	r2, [r3, #0]
  
  return len;
   30504:	687b      	ldr	r3, [r7, #4]
}
   30506:	0018      	movs	r0, r3
   30508:	46bd      	mov	sp, r7
   3050a:	b005      	add	sp, #20
   3050c:	bd90      	pop	{r4, r7, pc}
   3050e:	46c0      	nop			; (mov r8, r8)
   30510:	20004430 	.word	0x20004430
   30514:	2000432b 	.word	0x2000432b
   30518:	2000432c 	.word	0x2000432c
   3051c:	000269cd 	.word	0x000269cd
   30520:	00022f15 	.word	0x00022f15
   30524:	20004324 	.word	0x20004324
   30528:	2000442c 	.word	0x2000442c
   3052c:	00036409 	.word	0x00036409

00030530 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   30530:	b590      	push	{r4, r7, lr}
   30532:	b085      	sub	sp, #20
   30534:	af00      	add	r7, sp, #0
   30536:	60f8      	str	r0, [r7, #12]
   30538:	60b9      	str	r1, [r7, #8]
   3053a:	607a      	str	r2, [r7, #4]
   3053c:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   3053e:	4b10      	ldr	r3, [pc, #64]	; (30580 <WINC1500_write+0x50>)
   30540:	2200      	movs	r2, #0
   30542:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   30544:	68fb      	ldr	r3, [r7, #12]
   30546:	681b      	ldr	r3, [r3, #0]
   30548:	b258      	sxtb	r0, r3
   3054a:	687b      	ldr	r3, [r7, #4]
   3054c:	b29a      	uxth	r2, r3
   3054e:	68b9      	ldr	r1, [r7, #8]
   30550:	2300      	movs	r3, #0
   30552:	4c0c      	ldr	r4, [pc, #48]	; (30584 <WINC1500_write+0x54>)
   30554:	47a0      	blx	r4
   30556:	1e03      	subs	r3, r0, #0
   30558:	d005      	beq.n	30566 <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   3055a:	2301      	movs	r3, #1
   3055c:	425b      	negs	r3, r3
   3055e:	e00a      	b.n	30576 <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   30560:	2000      	movs	r0, #0
   30562:	4b09      	ldr	r3, [pc, #36]	; (30588 <WINC1500_write+0x58>)
   30564:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   30566:	4b06      	ldr	r3, [pc, #24]	; (30580 <WINC1500_write+0x50>)
   30568:	781b      	ldrb	r3, [r3, #0]
   3056a:	2201      	movs	r2, #1
   3056c:	4053      	eors	r3, r2
   3056e:	b2db      	uxtb	r3, r3
   30570:	2b00      	cmp	r3, #0
   30572:	d1f5      	bne.n	30560 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   30574:	687b      	ldr	r3, [r7, #4]
}
   30576:	0018      	movs	r0, r3
   30578:	46bd      	mov	sp, r7
   3057a:	b005      	add	sp, #20
   3057c:	bd90      	pop	{r4, r7, pc}
   3057e:	46c0      	nop			; (mov r8, r8)
   30580:	2000432a 	.word	0x2000432a
   30584:	00026869 	.word	0x00026869
   30588:	00022f15 	.word	0x00022f15

0003058c <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   3058c:	b580      	push	{r7, lr}
   3058e:	b082      	sub	sp, #8
   30590:	af00      	add	r7, sp, #0
   30592:	6078      	str	r0, [r7, #4]
	close(n->socket);
   30594:	687b      	ldr	r3, [r7, #4]
   30596:	681b      	ldr	r3, [r3, #0]
   30598:	b25b      	sxtb	r3, r3
   3059a:	0018      	movs	r0, r3
   3059c:	4b06      	ldr	r3, [pc, #24]	; (305b8 <WINC1500_disconnect+0x2c>)
   3059e:	4798      	blx	r3
	n->socket=-1;
   305a0:	687b      	ldr	r3, [r7, #4]
   305a2:	2201      	movs	r2, #1
   305a4:	4252      	negs	r2, r2
   305a6:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   305a8:	4b04      	ldr	r3, [pc, #16]	; (305bc <WINC1500_disconnect+0x30>)
   305aa:	2200      	movs	r2, #0
   305ac:	701a      	strb	r2, [r3, #0]
}
   305ae:	46c0      	nop			; (mov r8, r8)
   305b0:	46bd      	mov	sp, r7
   305b2:	b002      	add	sp, #8
   305b4:	bd80      	pop	{r7, pc}
   305b6:	46c0      	nop			; (mov r8, r8)
   305b8:	00026b4d 	.word	0x00026b4d
   305bc:	20004329 	.word	0x20004329

000305c0 <NetworkInit>:


void NetworkInit(Network* n) {
   305c0:	b580      	push	{r7, lr}
   305c2:	b082      	sub	sp, #8
   305c4:	af00      	add	r7, sp, #0
   305c6:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   305c8:	687b      	ldr	r3, [r7, #4]
   305ca:	2201      	movs	r2, #1
   305cc:	4252      	negs	r2, r2
   305ce:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   305d0:	687b      	ldr	r3, [r7, #4]
   305d2:	4a06      	ldr	r2, [pc, #24]	; (305ec <NetworkInit+0x2c>)
   305d4:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   305d6:	687b      	ldr	r3, [r7, #4]
   305d8:	4a05      	ldr	r2, [pc, #20]	; (305f0 <NetworkInit+0x30>)
   305da:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   305dc:	687b      	ldr	r3, [r7, #4]
   305de:	4a05      	ldr	r2, [pc, #20]	; (305f4 <NetworkInit+0x34>)
   305e0:	611a      	str	r2, [r3, #16]
}
   305e2:	46c0      	nop			; (mov r8, r8)
   305e4:	46bd      	mov	sp, r7
   305e6:	b002      	add	sp, #8
   305e8:	bd80      	pop	{r7, pc}
   305ea:	46c0      	nop			; (mov r8, r8)
   305ec:	00030445 	.word	0x00030445
   305f0:	00030531 	.word	0x00030531
   305f4:	0003058d 	.word	0x0003058d

000305f8 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   305f8:	b580      	push	{r7, lr}
   305fa:	b088      	sub	sp, #32
   305fc:	af00      	add	r7, sp, #0
   305fe:	60f8      	str	r0, [r7, #12]
   30600:	60b9      	str	r1, [r7, #8]
   30602:	607a      	str	r2, [r7, #4]
   30604:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   30606:	4b37      	ldr	r3, [pc, #220]	; (306e4 <ConnectNetwork+0xec>)
   30608:	2200      	movs	r2, #0
   3060a:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   3060c:	4b36      	ldr	r3, [pc, #216]	; (306e8 <ConnectNetwork+0xf0>)
   3060e:	68ba      	ldr	r2, [r7, #8]
   30610:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   30612:	68bb      	ldr	r3, [r7, #8]
   30614:	0018      	movs	r0, r3
   30616:	4b35      	ldr	r3, [pc, #212]	; (306ec <ConnectNetwork+0xf4>)
   30618:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   3061a:	e002      	b.n	30622 <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   3061c:	2000      	movs	r0, #0
   3061e:	4b34      	ldr	r3, [pc, #208]	; (306f0 <ConnectNetwork+0xf8>)
   30620:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   30622:	4b30      	ldr	r3, [pc, #192]	; (306e4 <ConnectNetwork+0xec>)
   30624:	781b      	ldrb	r3, [r3, #0]
   30626:	2201      	movs	r2, #1
   30628:	4053      	eors	r3, r2
   3062a:	b2db      	uxtb	r3, r3
   3062c:	2b00      	cmp	r3, #0
   3062e:	d1f5      	bne.n	3061c <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   30630:	4b30      	ldr	r3, [pc, #192]	; (306f4 <ConnectNetwork+0xfc>)
   30632:	681a      	ldr	r2, [r3, #0]
   30634:	68fb      	ldr	r3, [r7, #12]
   30636:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   30638:	2310      	movs	r3, #16
   3063a:	18fb      	adds	r3, r7, r3
   3063c:	2202      	movs	r2, #2
   3063e:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   30640:	687b      	ldr	r3, [r7, #4]
   30642:	b29b      	uxth	r3, r3
   30644:	021b      	lsls	r3, r3, #8
   30646:	b21a      	sxth	r2, r3
   30648:	687b      	ldr	r3, [r7, #4]
   3064a:	b29b      	uxth	r3, r3
   3064c:	0a1b      	lsrs	r3, r3, #8
   3064e:	b29b      	uxth	r3, r3
   30650:	b21b      	sxth	r3, r3
   30652:	4313      	orrs	r3, r2
   30654:	b21b      	sxth	r3, r3
   30656:	b29a      	uxth	r2, r3
   30658:	2310      	movs	r3, #16
   3065a:	18fb      	adds	r3, r7, r3
   3065c:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   3065e:	4b25      	ldr	r3, [pc, #148]	; (306f4 <ConnectNetwork+0xfc>)
   30660:	681b      	ldr	r3, [r3, #0]
   30662:	001a      	movs	r2, r3
   30664:	2310      	movs	r3, #16
   30666:	18fb      	adds	r3, r7, r3
   30668:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   3066a:	68fb      	ldr	r3, [r7, #12]
   3066c:	681b      	ldr	r3, [r3, #0]
   3066e:	2b00      	cmp	r3, #0
   30670:	da0a      	bge.n	30688 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   30672:	683b      	ldr	r3, [r7, #0]
   30674:	b2db      	uxtb	r3, r3
   30676:	001a      	movs	r2, r3
   30678:	2101      	movs	r1, #1
   3067a:	2002      	movs	r0, #2
   3067c:	4b1e      	ldr	r3, [pc, #120]	; (306f8 <ConnectNetwork+0x100>)
   3067e:	4798      	blx	r3
   30680:	0003      	movs	r3, r0
   30682:	001a      	movs	r2, r3
   30684:	68fb      	ldr	r3, [r7, #12]
   30686:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   30688:	68fb      	ldr	r3, [r7, #12]
   3068a:	681b      	ldr	r3, [r3, #0]
   3068c:	3301      	adds	r3, #1
   3068e:	d108      	bne.n	306a2 <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   30690:	68fb      	ldr	r3, [r7, #12]
   30692:	681b      	ldr	r3, [r3, #0]
   30694:	b25b      	sxtb	r3, r3
   30696:	0018      	movs	r0, r3
   30698:	4b18      	ldr	r3, [pc, #96]	; (306fc <ConnectNetwork+0x104>)
   3069a:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   3069c:	2309      	movs	r3, #9
   3069e:	425b      	negs	r3, r3
   306a0:	e01c      	b.n	306dc <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   306a2:	68fb      	ldr	r3, [r7, #12]
   306a4:	681b      	ldr	r3, [r3, #0]
   306a6:	b25b      	sxtb	r3, r3
   306a8:	2210      	movs	r2, #16
   306aa:	18b9      	adds	r1, r7, r2
   306ac:	2210      	movs	r2, #16
   306ae:	0018      	movs	r0, r3
   306b0:	4b13      	ldr	r3, [pc, #76]	; (30700 <ConnectNetwork+0x108>)
   306b2:	4798      	blx	r3
   306b4:	1e03      	subs	r3, r0, #0
   306b6:	d002      	beq.n	306be <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   306b8:	2309      	movs	r3, #9
   306ba:	425b      	negs	r3, r3
   306bc:	e00e      	b.n	306dc <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   306be:	4b11      	ldr	r3, [pc, #68]	; (30704 <ConnectNetwork+0x10c>)
   306c0:	2200      	movs	r2, #0
   306c2:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   306c4:	e002      	b.n	306cc <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   306c6:	2000      	movs	r0, #0
   306c8:	4b09      	ldr	r3, [pc, #36]	; (306f0 <ConnectNetwork+0xf8>)
   306ca:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   306cc:	4b0d      	ldr	r3, [pc, #52]	; (30704 <ConnectNetwork+0x10c>)
   306ce:	781b      	ldrb	r3, [r3, #0]
   306d0:	2201      	movs	r2, #1
   306d2:	4053      	eors	r3, r2
   306d4:	b2db      	uxtb	r3, r3
   306d6:	2b00      	cmp	r3, #0
   306d8:	d1f5      	bne.n	306c6 <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   306da:	2300      	movs	r3, #0
   306dc:	0018      	movs	r0, r3
   306de:	46bd      	mov	sp, r7
   306e0:	b008      	add	sp, #32
   306e2:	bd80      	pop	{r7, pc}
   306e4:	20004328 	.word	0x20004328
   306e8:	20004434 	.word	0x20004434
   306ec:	00026d95 	.word	0x00026d95
   306f0:	00022f15 	.word	0x00022f15
   306f4:	20004320 	.word	0x20004320
   306f8:	00026541 	.word	0x00026541
   306fc:	00026b4d 	.word	0x00026b4d
   30700:	00026755 	.word	0x00026755
   30704:	20004329 	.word	0x20004329

00030708 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   30708:	b580      	push	{r7, lr}
   3070a:	b084      	sub	sp, #16
   3070c:	af00      	add	r7, sp, #0
   3070e:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   30710:	687b      	ldr	r3, [r7, #4]
   30712:	2b00      	cmp	r3, #0
   30714:	d022      	beq.n	3075c <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   30716:	2300      	movs	r3, #0
   30718:	60fb      	str	r3, [r7, #12]
   3071a:	e01b      	b.n	30754 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   3071c:	4a11      	ldr	r2, [pc, #68]	; (30764 <allocateClient+0x5c>)
   3071e:	68fb      	ldr	r3, [r7, #12]
   30720:	2164      	movs	r1, #100	; 0x64
   30722:	434b      	muls	r3, r1
   30724:	18d3      	adds	r3, r2, r3
   30726:	3360      	adds	r3, #96	; 0x60
   30728:	681b      	ldr	r3, [r3, #0]
   3072a:	2b00      	cmp	r3, #0
   3072c:	d10f      	bne.n	3074e <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   3072e:	4a0d      	ldr	r2, [pc, #52]	; (30764 <allocateClient+0x5c>)
   30730:	68fb      	ldr	r3, [r7, #12]
   30732:	2164      	movs	r1, #100	; 0x64
   30734:	434b      	muls	r3, r1
   30736:	18d3      	adds	r3, r2, r3
   30738:	3360      	adds	r3, #96	; 0x60
   3073a:	687a      	ldr	r2, [r7, #4]
   3073c:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   3073e:	68fb      	ldr	r3, [r7, #12]
   30740:	2264      	movs	r2, #100	; 0x64
   30742:	435a      	muls	r2, r3
   30744:	4b07      	ldr	r3, [pc, #28]	; (30764 <allocateClient+0x5c>)
   30746:	18d2      	adds	r2, r2, r3
   30748:	687b      	ldr	r3, [r7, #4]
   3074a:	61da      	str	r2, [r3, #28]
			return;
   3074c:	e007      	b.n	3075e <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   3074e:	68fb      	ldr	r3, [r7, #12]
   30750:	3301      	adds	r3, #1
   30752:	60fb      	str	r3, [r7, #12]
   30754:	68fb      	ldr	r3, [r7, #12]
   30756:	2b06      	cmp	r3, #6
   30758:	d9e0      	bls.n	3071c <allocateClient+0x14>
   3075a:	e000      	b.n	3075e <allocateClient+0x56>
		return;
   3075c:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   3075e:	46bd      	mov	sp, r7
   30760:	b004      	add	sp, #16
   30762:	bd80      	pop	{r7, pc}
   30764:	20004438 	.word	0x20004438

00030768 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   30768:	b5f0      	push	{r4, r5, r6, r7, lr}
   3076a:	b089      	sub	sp, #36	; 0x24
   3076c:	af04      	add	r7, sp, #16
   3076e:	6078      	str	r0, [r7, #4]
   30770:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   30772:	687b      	ldr	r3, [r7, #4]
   30774:	2b00      	cmp	r3, #0
   30776:	d00a      	beq.n	3078e <mqtt_init+0x26>
   30778:	683b      	ldr	r3, [r7, #0]
   3077a:	2b00      	cmp	r3, #0
   3077c:	d007      	beq.n	3078e <mqtt_init+0x26>
   3077e:	683b      	ldr	r3, [r7, #0]
   30780:	691b      	ldr	r3, [r3, #16]
   30782:	2b00      	cmp	r3, #0
   30784:	d003      	beq.n	3078e <mqtt_init+0x26>
   30786:	683b      	ldr	r3, [r7, #0]
   30788:	689b      	ldr	r3, [r3, #8]
   3078a:	2b00      	cmp	r3, #0
   3078c:	d102      	bne.n	30794 <mqtt_init+0x2c>
		return FAILURE;
   3078e:	2301      	movs	r3, #1
   30790:	425b      	negs	r3, r3
   30792:	e034      	b.n	307fe <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   30794:	683b      	ldr	r3, [r7, #0]
   30796:	889b      	ldrh	r3, [r3, #4]
   30798:	001a      	movs	r2, r3
   3079a:	23fa      	movs	r3, #250	; 0xfa
   3079c:	009b      	lsls	r3, r3, #2
   3079e:	4353      	muls	r3, r2
   307a0:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   307a2:	687b      	ldr	r3, [r7, #4]
   307a4:	3320      	adds	r3, #32
   307a6:	0018      	movs	r0, r3
   307a8:	4b17      	ldr	r3, [pc, #92]	; (30808 <mqtt_init+0xa0>)
   307aa:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   307ac:	687b      	ldr	r3, [r7, #4]
   307ae:	3304      	adds	r3, #4
   307b0:	6839      	ldr	r1, [r7, #0]
   307b2:	2218      	movs	r2, #24
   307b4:	0018      	movs	r0, r3
   307b6:	4b15      	ldr	r3, [pc, #84]	; (3080c <mqtt_init+0xa4>)
   307b8:	4798      	blx	r3
	allocateClient(module);
   307ba:	687b      	ldr	r3, [r7, #4]
   307bc:	0018      	movs	r0, r3
   307be:	4b14      	ldr	r3, [pc, #80]	; (30810 <mqtt_init+0xa8>)
   307c0:	4798      	blx	r3
	
	if(module->client)
   307c2:	687b      	ldr	r3, [r7, #4]
   307c4:	69db      	ldr	r3, [r3, #28]
   307c6:	2b00      	cmp	r3, #0
   307c8:	d017      	beq.n	307fa <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   307ca:	687b      	ldr	r3, [r7, #4]
   307cc:	69d8      	ldr	r0, [r3, #28]
   307ce:	687b      	ldr	r3, [r7, #4]
   307d0:	3320      	adds	r3, #32
   307d2:	001c      	movs	r4, r3
   307d4:	683b      	ldr	r3, [r7, #0]
   307d6:	691e      	ldr	r6, [r3, #16]
   307d8:	683b      	ldr	r3, [r7, #0]
   307da:	695a      	ldr	r2, [r3, #20]
   307dc:	683b      	ldr	r3, [r7, #0]
   307de:	6899      	ldr	r1, [r3, #8]
   307e0:	683b      	ldr	r3, [r7, #0]
   307e2:	68db      	ldr	r3, [r3, #12]
   307e4:	68fd      	ldr	r5, [r7, #12]
   307e6:	9302      	str	r3, [sp, #8]
   307e8:	9101      	str	r1, [sp, #4]
   307ea:	9200      	str	r2, [sp, #0]
   307ec:	0033      	movs	r3, r6
   307ee:	002a      	movs	r2, r5
   307f0:	0021      	movs	r1, r4
   307f2:	4c08      	ldr	r4, [pc, #32]	; (30814 <mqtt_init+0xac>)
   307f4:	47a0      	blx	r4
		return SUCCESS;
   307f6:	2300      	movs	r3, #0
   307f8:	e001      	b.n	307fe <mqtt_init+0x96>
	}
	else
		return FAILURE;
   307fa:	2301      	movs	r3, #1
   307fc:	425b      	negs	r3, r3
}
   307fe:	0018      	movs	r0, r3
   30800:	46bd      	mov	sp, r7
   30802:	b005      	add	sp, #20
   30804:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30806:	46c0      	nop			; (mov r8, r8)
   30808:	000305c1 	.word	0x000305c1
   3080c:	00036409 	.word	0x00036409
   30810:	00030709 	.word	0x00030709
   30814:	0002f639 	.word	0x0002f639

00030818 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   30818:	b580      	push	{r7, lr}
   3081a:	b082      	sub	sp, #8
   3081c:	af00      	add	r7, sp, #0
   3081e:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   30820:	687b      	ldr	r3, [r7, #4]
   30822:	4a0c      	ldr	r2, [pc, #48]	; (30854 <mqtt_get_config_defaults+0x3c>)
   30824:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   30826:	687b      	ldr	r3, [r7, #4]
   30828:	2200      	movs	r2, #0
   3082a:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   3082c:	687b      	ldr	r3, [r7, #4]
   3082e:	223c      	movs	r2, #60	; 0x3c
   30830:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   30832:	687b      	ldr	r3, [r7, #4]
   30834:	2200      	movs	r2, #0
   30836:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   30838:	687b      	ldr	r3, [r7, #4]
   3083a:	2200      	movs	r2, #0
   3083c:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   3083e:	687b      	ldr	r3, [r7, #4]
   30840:	2200      	movs	r2, #0
   30842:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   30844:	687b      	ldr	r3, [r7, #4]
   30846:	2200      	movs	r2, #0
   30848:	615a      	str	r2, [r3, #20]
}
   3084a:	46c0      	nop			; (mov r8, r8)
   3084c:	46bd      	mov	sp, r7
   3084e:	b002      	add	sp, #8
   30850:	bd80      	pop	{r7, pc}
   30852:	46c0      	nop			; (mov r8, r8)
   30854:	0000075b 	.word	0x0000075b

00030858 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   30858:	b580      	push	{r7, lr}
   3085a:	b082      	sub	sp, #8
   3085c:	af00      	add	r7, sp, #0
   3085e:	6078      	str	r0, [r7, #4]
   30860:	6039      	str	r1, [r7, #0]
	if(module)
   30862:	687b      	ldr	r3, [r7, #4]
   30864:	2b00      	cmp	r3, #0
   30866:	d004      	beq.n	30872 <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   30868:	687b      	ldr	r3, [r7, #4]
   3086a:	683a      	ldr	r2, [r7, #0]
   3086c:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   3086e:	2300      	movs	r3, #0
   30870:	e001      	b.n	30876 <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   30872:	2301      	movs	r3, #1
   30874:	425b      	negs	r3, r3
}
   30876:	0018      	movs	r0, r3
   30878:	46bd      	mov	sp, r7
   3087a:	b002      	add	sp, #8
   3087c:	bd80      	pop	{r7, pc}
	...

00030880 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   30880:	b580      	push	{r7, lr}
   30882:	b082      	sub	sp, #8
   30884:	af00      	add	r7, sp, #0
   30886:	603a      	str	r2, [r7, #0]
   30888:	1dfb      	adds	r3, r7, #7
   3088a:	1c02      	adds	r2, r0, #0
   3088c:	701a      	strb	r2, [r3, #0]
   3088e:	1dbb      	adds	r3, r7, #6
   30890:	1c0a      	adds	r2, r1, #0
   30892:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   30894:	683a      	ldr	r2, [r7, #0]
   30896:	1dbb      	adds	r3, r7, #6
   30898:	7819      	ldrb	r1, [r3, #0]
   3089a:	1dfb      	adds	r3, r7, #7
   3089c:	781b      	ldrb	r3, [r3, #0]
   3089e:	b25b      	sxtb	r3, r3
   308a0:	0018      	movs	r0, r3
   308a2:	4b03      	ldr	r3, [pc, #12]	; (308b0 <mqtt_socket_event_handler+0x30>)
   308a4:	4798      	blx	r3
}
   308a6:	46c0      	nop			; (mov r8, r8)
   308a8:	46bd      	mov	sp, r7
   308aa:	b002      	add	sp, #8
   308ac:	bd80      	pop	{r7, pc}
   308ae:	46c0      	nop			; (mov r8, r8)
   308b0:	000302fd 	.word	0x000302fd

000308b4 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   308b4:	b580      	push	{r7, lr}
   308b6:	b082      	sub	sp, #8
   308b8:	af00      	add	r7, sp, #0
   308ba:	6078      	str	r0, [r7, #4]
   308bc:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   308be:	683a      	ldr	r2, [r7, #0]
   308c0:	687b      	ldr	r3, [r7, #4]
   308c2:	0011      	movs	r1, r2
   308c4:	0018      	movs	r0, r3
   308c6:	4b03      	ldr	r3, [pc, #12]	; (308d4 <mqtt_socket_resolve_handler+0x20>)
   308c8:	4798      	blx	r3
}
   308ca:	46c0      	nop			; (mov r8, r8)
   308cc:	46bd      	mov	sp, r7
   308ce:	b002      	add	sp, #8
   308d0:	bd80      	pop	{r7, pc}
   308d2:	46c0      	nop			; (mov r8, r8)
   308d4:	000302ad 	.word	0x000302ad

000308d8 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   308d8:	b590      	push	{r4, r7, lr}
   308da:	b085      	sub	sp, #20
   308dc:	af00      	add	r7, sp, #0
   308de:	6078      	str	r0, [r7, #4]
   308e0:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   308e2:	687b      	ldr	r3, [r7, #4]
   308e4:	3320      	adds	r3, #32
   308e6:	0018      	movs	r0, r3
   308e8:	687b      	ldr	r3, [r7, #4]
   308ea:	889b      	ldrh	r3, [r3, #4]
   308ec:	001a      	movs	r2, r3
   308ee:	687b      	ldr	r3, [r7, #4]
   308f0:	799b      	ldrb	r3, [r3, #6]
   308f2:	6839      	ldr	r1, [r7, #0]
   308f4:	4c09      	ldr	r4, [pc, #36]	; (3091c <mqtt_connect+0x44>)
   308f6:	47a0      	blx	r4
   308f8:	0003      	movs	r3, r0
   308fa:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   308fc:	687b      	ldr	r3, [r7, #4]
   308fe:	681b      	ldr	r3, [r3, #0]
   30900:	2b00      	cmp	r3, #0
   30902:	d006      	beq.n	30912 <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   30904:	687b      	ldr	r3, [r7, #4]
   30906:	681b      	ldr	r3, [r3, #0]
   30908:	220c      	movs	r2, #12
   3090a:	18ba      	adds	r2, r7, r2
   3090c:	6878      	ldr	r0, [r7, #4]
   3090e:	2100      	movs	r1, #0
   30910:	4798      	blx	r3
	return connResult.sock_connected.result;
   30912:	68fb      	ldr	r3, [r7, #12]
}
   30914:	0018      	movs	r0, r3
   30916:	46bd      	mov	sp, r7
   30918:	b005      	add	sp, #20
   3091a:	bd90      	pop	{r4, r7, pc}
   3091c:	000305f9 	.word	0x000305f9

00030920 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   30920:	b580      	push	{r7, lr}
   30922:	b09c      	sub	sp, #112	; 0x70
   30924:	af00      	add	r7, sp, #0
   30926:	60f8      	str	r0, [r7, #12]
   30928:	607a      	str	r2, [r7, #4]
   3092a:	603b      	str	r3, [r7, #0]
   3092c:	230b      	movs	r3, #11
   3092e:	18fb      	adds	r3, r7, r3
   30930:	1c0a      	adds	r2, r1, #0
   30932:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   30934:	2310      	movs	r3, #16
   30936:	18fa      	adds	r2, r7, r3
   30938:	4b31      	ldr	r3, [pc, #196]	; (30a00 <mqtt_connect_broker+0xe0>)
   3093a:	0010      	movs	r0, r2
   3093c:	0019      	movs	r1, r3
   3093e:	2358      	movs	r3, #88	; 0x58
   30940:	001a      	movs	r2, r3
   30942:	4b30      	ldr	r3, [pc, #192]	; (30a04 <mqtt_connect_broker+0xe4>)
   30944:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   30946:	2310      	movs	r3, #16
   30948:	18fb      	adds	r3, r7, r3
   3094a:	2204      	movs	r2, #4
   3094c:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   3094e:	2310      	movs	r3, #16
   30950:	18fb      	adds	r3, r7, r3
   30952:	6fba      	ldr	r2, [r7, #120]	; 0x78
   30954:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   30956:	2310      	movs	r3, #16
   30958:	18fb      	adds	r3, r7, r3
   3095a:	687a      	ldr	r2, [r7, #4]
   3095c:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   3095e:	2310      	movs	r3, #16
   30960:	18fb      	adds	r3, r7, r3
   30962:	683a      	ldr	r2, [r7, #0]
   30964:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   30966:	2310      	movs	r3, #16
   30968:	18fb      	adds	r3, r7, r3
   3096a:	220b      	movs	r2, #11
   3096c:	18ba      	adds	r2, r7, r2
   3096e:	7812      	ldrb	r2, [r2, #0]
   30970:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   30972:	2310      	movs	r3, #16
   30974:	18fb      	adds	r3, r7, r3
   30976:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   30978:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   3097a:	2310      	movs	r3, #16
   3097c:	18fb      	adds	r3, r7, r3
   3097e:	2280      	movs	r2, #128	; 0x80
   30980:	18ba      	adds	r2, r7, r2
   30982:	6812      	ldr	r2, [r2, #0]
   30984:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   30986:	2310      	movs	r3, #16
   30988:	18fb      	adds	r3, r7, r3
   3098a:	228c      	movs	r2, #140	; 0x8c
   3098c:	18ba      	adds	r2, r7, r2
   3098e:	213c      	movs	r1, #60	; 0x3c
   30990:	7812      	ldrb	r2, [r2, #0]
   30992:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   30994:	2310      	movs	r3, #16
   30996:	18fb      	adds	r3, r7, r3
   30998:	2288      	movs	r2, #136	; 0x88
   3099a:	18ba      	adds	r2, r7, r2
   3099c:	213d      	movs	r1, #61	; 0x3d
   3099e:	7812      	ldrb	r2, [r2, #0]
   309a0:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   309a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   309a4:	2b00      	cmp	r3, #0
   309a6:	d008      	beq.n	309ba <mqtt_connect_broker+0x9a>
   309a8:	2380      	movs	r3, #128	; 0x80
   309aa:	18fb      	adds	r3, r7, r3
   309ac:	681b      	ldr	r3, [r3, #0]
   309ae:	2b00      	cmp	r3, #0
   309b0:	d003      	beq.n	309ba <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   309b2:	2310      	movs	r3, #16
   309b4:	18fb      	adds	r3, r7, r3
   309b6:	2201      	movs	r2, #1
   309b8:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   309ba:	68fb      	ldr	r3, [r7, #12]
   309bc:	69db      	ldr	r3, [r3, #28]
   309be:	2210      	movs	r2, #16
   309c0:	18ba      	adds	r2, r7, r2
   309c2:	0011      	movs	r1, r2
   309c4:	0018      	movs	r0, r3
   309c6:	4b10      	ldr	r3, [pc, #64]	; (30a08 <mqtt_connect_broker+0xe8>)
   309c8:	4798      	blx	r3
   309ca:	0003      	movs	r3, r0
   309cc:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   309ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   309d0:	b2da      	uxtb	r2, r3
   309d2:	2368      	movs	r3, #104	; 0x68
   309d4:	18fb      	adds	r3, r7, r3
   309d6:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   309d8:	68fb      	ldr	r3, [r7, #12]
   309da:	681b      	ldr	r3, [r3, #0]
   309dc:	2b00      	cmp	r3, #0
   309de:	d006      	beq.n	309ee <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   309e0:	68fb      	ldr	r3, [r7, #12]
   309e2:	681b      	ldr	r3, [r3, #0]
   309e4:	2268      	movs	r2, #104	; 0x68
   309e6:	18ba      	adds	r2, r7, r2
   309e8:	68f8      	ldr	r0, [r7, #12]
   309ea:	2101      	movs	r1, #1
   309ec:	4798      	blx	r3
	
	module->isConnected = true;
   309ee:	68fb      	ldr	r3, [r7, #12]
   309f0:	2234      	movs	r2, #52	; 0x34
   309f2:	2101      	movs	r1, #1
   309f4:	5499      	strb	r1, [r3, r2]
	return rc;
   309f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   309f8:	0018      	movs	r0, r3
   309fa:	46bd      	mov	sp, r7
   309fc:	b01c      	add	sp, #112	; 0x70
   309fe:	bd80      	pop	{r7, pc}
   30a00:	0003ba48 	.word	0x0003ba48
   30a04:	00036409 	.word	0x00036409
   30a08:	0002fd49 	.word	0x0002fd49

00030a0c <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   30a0c:	b580      	push	{r7, lr}
   30a0e:	b084      	sub	sp, #16
   30a10:	af00      	add	r7, sp, #0
   30a12:	6078      	str	r0, [r7, #4]
   30a14:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   30a16:	687b      	ldr	r3, [r7, #4]
   30a18:	69db      	ldr	r3, [r3, #28]
   30a1a:	0018      	movs	r0, r3
   30a1c:	4b0c      	ldr	r3, [pc, #48]	; (30a50 <mqtt_disconnect+0x44>)
   30a1e:	4798      	blx	r3
   30a20:	0003      	movs	r3, r0
   30a22:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   30a24:	68fb      	ldr	r3, [r7, #12]
   30a26:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   30a28:	687b      	ldr	r3, [r7, #4]
   30a2a:	681b      	ldr	r3, [r3, #0]
   30a2c:	2b00      	cmp	r3, #0
   30a2e:	d006      	beq.n	30a3e <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   30a30:	687b      	ldr	r3, [r7, #4]
   30a32:	681b      	ldr	r3, [r3, #0]
   30a34:	2208      	movs	r2, #8
   30a36:	18ba      	adds	r2, r7, r2
   30a38:	6878      	ldr	r0, [r7, #4]
   30a3a:	2105      	movs	r1, #5
   30a3c:	4798      	blx	r3
	
	module->isConnected = false;
   30a3e:	687b      	ldr	r3, [r7, #4]
   30a40:	2234      	movs	r2, #52	; 0x34
   30a42:	2100      	movs	r1, #0
   30a44:	5499      	strb	r1, [r3, r2]
	return rc;
   30a46:	68fb      	ldr	r3, [r7, #12]
}
   30a48:	0018      	movs	r0, r3
   30a4a:	46bd      	mov	sp, r7
   30a4c:	b004      	add	sp, #16
   30a4e:	bd80      	pop	{r7, pc}
   30a50:	000301d5 	.word	0x000301d5

00030a54 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   30a54:	b580      	push	{r7, lr}
   30a56:	b08a      	sub	sp, #40	; 0x28
   30a58:	af00      	add	r7, sp, #0
   30a5a:	60f8      	str	r0, [r7, #12]
   30a5c:	60b9      	str	r1, [r7, #8]
   30a5e:	607a      	str	r2, [r7, #4]
   30a60:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   30a62:	2314      	movs	r3, #20
   30a64:	18fb      	adds	r3, r7, r3
   30a66:	2230      	movs	r2, #48	; 0x30
   30a68:	18ba      	adds	r2, r7, r2
   30a6a:	7812      	ldrb	r2, [r2, #0]
   30a6c:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   30a6e:	2314      	movs	r3, #20
   30a70:	18fb      	adds	r3, r7, r3
   30a72:	687a      	ldr	r2, [r7, #4]
   30a74:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   30a76:	2314      	movs	r3, #20
   30a78:	18fb      	adds	r3, r7, r3
   30a7a:	683a      	ldr	r2, [r7, #0]
   30a7c:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   30a7e:	2314      	movs	r3, #20
   30a80:	18fb      	adds	r3, r7, r3
   30a82:	2234      	movs	r2, #52	; 0x34
   30a84:	18ba      	adds	r2, r7, r2
   30a86:	7812      	ldrb	r2, [r2, #0]
   30a88:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   30a8a:	68fb      	ldr	r3, [r7, #12]
   30a8c:	69db      	ldr	r3, [r3, #28]
   30a8e:	2214      	movs	r2, #20
   30a90:	18ba      	adds	r2, r7, r2
   30a92:	68b9      	ldr	r1, [r7, #8]
   30a94:	0018      	movs	r0, r3
   30a96:	4b09      	ldr	r3, [pc, #36]	; (30abc <mqtt_publish+0x68>)
   30a98:	4798      	blx	r3
   30a9a:	0003      	movs	r3, r0
   30a9c:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   30a9e:	68fb      	ldr	r3, [r7, #12]
   30aa0:	681b      	ldr	r3, [r3, #0]
   30aa2:	2b00      	cmp	r3, #0
   30aa4:	d005      	beq.n	30ab2 <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   30aa6:	68fb      	ldr	r3, [r7, #12]
   30aa8:	681b      	ldr	r3, [r3, #0]
   30aaa:	68f8      	ldr	r0, [r7, #12]
   30aac:	2200      	movs	r2, #0
   30aae:	2102      	movs	r1, #2
   30ab0:	4798      	blx	r3
	
	return rc;
   30ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30ab4:	0018      	movs	r0, r3
   30ab6:	46bd      	mov	sp, r7
   30ab8:	b00a      	add	sp, #40	; 0x28
   30aba:	bd80      	pop	{r7, pc}
   30abc:	00030015 	.word	0x00030015

00030ac0 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   30ac0:	b590      	push	{r4, r7, lr}
   30ac2:	b087      	sub	sp, #28
   30ac4:	af00      	add	r7, sp, #0
   30ac6:	60f8      	str	r0, [r7, #12]
   30ac8:	60b9      	str	r1, [r7, #8]
   30aca:	603b      	str	r3, [r7, #0]
   30acc:	1dfb      	adds	r3, r7, #7
   30ace:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   30ad0:	68fb      	ldr	r3, [r7, #12]
   30ad2:	69d8      	ldr	r0, [r3, #28]
   30ad4:	683c      	ldr	r4, [r7, #0]
   30ad6:	1dfb      	adds	r3, r7, #7
   30ad8:	781a      	ldrb	r2, [r3, #0]
   30ada:	68b9      	ldr	r1, [r7, #8]
   30adc:	0023      	movs	r3, r4
   30ade:	4c09      	ldr	r4, [pc, #36]	; (30b04 <mqtt_subscribe+0x44>)
   30ae0:	47a0      	blx	r4
   30ae2:	0003      	movs	r3, r0
   30ae4:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   30ae6:	68fb      	ldr	r3, [r7, #12]
   30ae8:	681b      	ldr	r3, [r3, #0]
   30aea:	2b00      	cmp	r3, #0
   30aec:	d005      	beq.n	30afa <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   30aee:	68fb      	ldr	r3, [r7, #12]
   30af0:	681b      	ldr	r3, [r3, #0]
   30af2:	68f8      	ldr	r0, [r7, #12]
   30af4:	2200      	movs	r2, #0
   30af6:	2103      	movs	r1, #3
   30af8:	4798      	blx	r3
	
	return rc;
   30afa:	697b      	ldr	r3, [r7, #20]
}
   30afc:	0018      	movs	r0, r3
   30afe:	46bd      	mov	sp, r7
   30b00:	b007      	add	sp, #28
   30b02:	bd90      	pop	{r4, r7, pc}
   30b04:	0002fe89 	.word	0x0002fe89

00030b08 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   30b08:	b580      	push	{r7, lr}
   30b0a:	b082      	sub	sp, #8
   30b0c:	af00      	add	r7, sp, #0
   30b0e:	6078      	str	r0, [r7, #4]
   30b10:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   30b12:	687b      	ldr	r3, [r7, #4]
   30b14:	69db      	ldr	r3, [r3, #28]
   30b16:	683a      	ldr	r2, [r7, #0]
   30b18:	0011      	movs	r1, r2
   30b1a:	0018      	movs	r0, r3
   30b1c:	4b03      	ldr	r3, [pc, #12]	; (30b2c <mqtt_yield+0x24>)
   30b1e:	4798      	blx	r3
   30b20:	0003      	movs	r3, r0
   30b22:	0018      	movs	r0, r3
   30b24:	46bd      	mov	sp, r7
   30b26:	b002      	add	sp, #8
   30b28:	bd80      	pop	{r7, pc}
   30b2a:	46c0      	nop			; (mov r8, r8)
   30b2c:	0002fc91 	.word	0x0002fc91

00030b30 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   30b30:	b590      	push	{r4, r7, lr}
   30b32:	b085      	sub	sp, #20
   30b34:	af00      	add	r7, sp, #0
   30b36:	6078      	str	r0, [r7, #4]
	int len = 0;
   30b38:	2300      	movs	r3, #0
   30b3a:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   30b3c:	687b      	ldr	r3, [r7, #4]
   30b3e:	7a1b      	ldrb	r3, [r3, #8]
   30b40:	2b03      	cmp	r3, #3
   30b42:	d102      	bne.n	30b4a <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   30b44:	230c      	movs	r3, #12
   30b46:	60fb      	str	r3, [r7, #12]
   30b48:	e005      	b.n	30b56 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   30b4a:	687b      	ldr	r3, [r7, #4]
   30b4c:	7a1b      	ldrb	r3, [r3, #8]
   30b4e:	2b04      	cmp	r3, #4
   30b50:	d101      	bne.n	30b56 <MQTTSerialize_connectLength+0x26>
		len = 10;
   30b52:	230a      	movs	r3, #10
   30b54:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   30b56:	687b      	ldr	r3, [r7, #4]
   30b58:	68d8      	ldr	r0, [r3, #12]
   30b5a:	6919      	ldr	r1, [r3, #16]
   30b5c:	695a      	ldr	r2, [r3, #20]
   30b5e:	4b25      	ldr	r3, [pc, #148]	; (30bf4 <MQTTSerialize_connectLength+0xc4>)
   30b60:	4798      	blx	r3
   30b62:	0003      	movs	r3, r0
   30b64:	3302      	adds	r3, #2
   30b66:	68fa      	ldr	r2, [r7, #12]
   30b68:	18d3      	adds	r3, r2, r3
   30b6a:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   30b6c:	687b      	ldr	r3, [r7, #4]
   30b6e:	7edb      	ldrb	r3, [r3, #27]
   30b70:	2b00      	cmp	r3, #0
   30b72:	d013      	beq.n	30b9c <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   30b74:	687b      	ldr	r3, [r7, #4]
   30b76:	6a58      	ldr	r0, [r3, #36]	; 0x24
   30b78:	6a99      	ldr	r1, [r3, #40]	; 0x28
   30b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   30b7c:	4b1d      	ldr	r3, [pc, #116]	; (30bf4 <MQTTSerialize_connectLength+0xc4>)
   30b7e:	4798      	blx	r3
   30b80:	0003      	movs	r3, r0
   30b82:	1c9c      	adds	r4, r3, #2
   30b84:	687b      	ldr	r3, [r7, #4]
   30b86:	6b18      	ldr	r0, [r3, #48]	; 0x30
   30b88:	6b59      	ldr	r1, [r3, #52]	; 0x34
   30b8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   30b8c:	4b19      	ldr	r3, [pc, #100]	; (30bf4 <MQTTSerialize_connectLength+0xc4>)
   30b8e:	4798      	blx	r3
   30b90:	0003      	movs	r3, r0
   30b92:	18e3      	adds	r3, r4, r3
   30b94:	3302      	adds	r3, #2
   30b96:	68fa      	ldr	r2, [r7, #12]
   30b98:	18d3      	adds	r3, r2, r3
   30b9a:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   30b9c:	687b      	ldr	r3, [r7, #4]
   30b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   30ba0:	2b00      	cmp	r3, #0
   30ba2:	d103      	bne.n	30bac <MQTTSerialize_connectLength+0x7c>
   30ba4:	687b      	ldr	r3, [r7, #4]
   30ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30ba8:	2b00      	cmp	r3, #0
   30baa:	d00a      	beq.n	30bc2 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   30bac:	687b      	ldr	r3, [r7, #4]
   30bae:	6c18      	ldr	r0, [r3, #64]	; 0x40
   30bb0:	6c59      	ldr	r1, [r3, #68]	; 0x44
   30bb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   30bb4:	4b0f      	ldr	r3, [pc, #60]	; (30bf4 <MQTTSerialize_connectLength+0xc4>)
   30bb6:	4798      	blx	r3
   30bb8:	0003      	movs	r3, r0
   30bba:	3302      	adds	r3, #2
   30bbc:	68fa      	ldr	r2, [r7, #12]
   30bbe:	18d3      	adds	r3, r2, r3
   30bc0:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   30bc2:	687b      	ldr	r3, [r7, #4]
   30bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30bc6:	2b00      	cmp	r3, #0
   30bc8:	d103      	bne.n	30bd2 <MQTTSerialize_connectLength+0xa2>
   30bca:	687b      	ldr	r3, [r7, #4]
   30bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   30bce:	2b00      	cmp	r3, #0
   30bd0:	d00a      	beq.n	30be8 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   30bd2:	687b      	ldr	r3, [r7, #4]
   30bd4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   30bd6:	6d19      	ldr	r1, [r3, #80]	; 0x50
   30bd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   30bda:	4b06      	ldr	r3, [pc, #24]	; (30bf4 <MQTTSerialize_connectLength+0xc4>)
   30bdc:	4798      	blx	r3
   30bde:	0003      	movs	r3, r0
   30be0:	3302      	adds	r3, #2
   30be2:	68fa      	ldr	r2, [r7, #12]
   30be4:	18d3      	adds	r3, r2, r3
   30be6:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   30be8:	68fb      	ldr	r3, [r7, #12]
}
   30bea:	0018      	movs	r0, r3
   30bec:	46bd      	mov	sp, r7
   30bee:	b005      	add	sp, #20
   30bf0:	bd90      	pop	{r4, r7, pc}
   30bf2:	46c0      	nop			; (mov r8, r8)
   30bf4:	000315a1 	.word	0x000315a1

00030bf8 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   30bf8:	b590      	push	{r4, r7, lr}
   30bfa:	b08b      	sub	sp, #44	; 0x2c
   30bfc:	af00      	add	r7, sp, #0
   30bfe:	60f8      	str	r0, [r7, #12]
   30c00:	60b9      	str	r1, [r7, #8]
   30c02:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   30c04:	68fb      	ldr	r3, [r7, #12]
   30c06:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   30c08:	2300      	movs	r3, #0
   30c0a:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   30c0c:	2300      	movs	r3, #0
   30c0e:	617b      	str	r3, [r7, #20]
	int len = 0;
   30c10:	2300      	movs	r3, #0
   30c12:	623b      	str	r3, [r7, #32]
	int rc = -1;
   30c14:	2301      	movs	r3, #1
   30c16:	425b      	negs	r3, r3
   30c18:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   30c1a:	687b      	ldr	r3, [r7, #4]
   30c1c:	0018      	movs	r0, r3
   30c1e:	4b8c      	ldr	r3, [pc, #560]	; (30e50 <MQTTSerialize_connect+0x258>)
   30c20:	4798      	blx	r3
   30c22:	0003      	movs	r3, r0
   30c24:	623b      	str	r3, [r7, #32]
   30c26:	6a3b      	ldr	r3, [r7, #32]
   30c28:	0018      	movs	r0, r3
   30c2a:	4b8a      	ldr	r3, [pc, #552]	; (30e54 <MQTTSerialize_connect+0x25c>)
   30c2c:	4798      	blx	r3
   30c2e:	0002      	movs	r2, r0
   30c30:	68bb      	ldr	r3, [r7, #8]
   30c32:	429a      	cmp	r2, r3
   30c34:	dd03      	ble.n	30c3e <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30c36:	2302      	movs	r3, #2
   30c38:	425b      	negs	r3, r3
   30c3a:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   30c3c:	e103      	b.n	30e46 <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   30c3e:	2318      	movs	r3, #24
   30c40:	18fb      	adds	r3, r7, r3
   30c42:	2200      	movs	r2, #0
   30c44:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   30c46:	2318      	movs	r3, #24
   30c48:	18fb      	adds	r3, r7, r3
   30c4a:	781a      	ldrb	r2, [r3, #0]
   30c4c:	210f      	movs	r1, #15
   30c4e:	400a      	ands	r2, r1
   30c50:	1c11      	adds	r1, r2, #0
   30c52:	2210      	movs	r2, #16
   30c54:	430a      	orrs	r2, r1
   30c56:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30c58:	2318      	movs	r3, #24
   30c5a:	18fb      	adds	r3, r7, r3
   30c5c:	781a      	ldrb	r2, [r3, #0]
   30c5e:	231c      	movs	r3, #28
   30c60:	18fb      	adds	r3, r7, r3
   30c62:	0011      	movs	r1, r2
   30c64:	0018      	movs	r0, r3
   30c66:	4b7c      	ldr	r3, [pc, #496]	; (30e58 <MQTTSerialize_connect+0x260>)
   30c68:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   30c6a:	69fb      	ldr	r3, [r7, #28]
   30c6c:	6a3a      	ldr	r2, [r7, #32]
   30c6e:	0011      	movs	r1, r2
   30c70:	0018      	movs	r0, r3
   30c72:	4b7a      	ldr	r3, [pc, #488]	; (30e5c <MQTTSerialize_connect+0x264>)
   30c74:	4798      	blx	r3
   30c76:	0002      	movs	r2, r0
   30c78:	69fb      	ldr	r3, [r7, #28]
   30c7a:	189b      	adds	r3, r3, r2
   30c7c:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   30c7e:	687b      	ldr	r3, [r7, #4]
   30c80:	7a1b      	ldrb	r3, [r3, #8]
   30c82:	2b04      	cmp	r3, #4
   30c84:	d10d      	bne.n	30ca2 <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   30c86:	4a76      	ldr	r2, [pc, #472]	; (30e60 <MQTTSerialize_connect+0x268>)
   30c88:	231c      	movs	r3, #28
   30c8a:	18fb      	adds	r3, r7, r3
   30c8c:	0011      	movs	r1, r2
   30c8e:	0018      	movs	r0, r3
   30c90:	4b74      	ldr	r3, [pc, #464]	; (30e64 <MQTTSerialize_connect+0x26c>)
   30c92:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   30c94:	231c      	movs	r3, #28
   30c96:	18fb      	adds	r3, r7, r3
   30c98:	2104      	movs	r1, #4
   30c9a:	0018      	movs	r0, r3
   30c9c:	4b6e      	ldr	r3, [pc, #440]	; (30e58 <MQTTSerialize_connect+0x260>)
   30c9e:	4798      	blx	r3
   30ca0:	e00c      	b.n	30cbc <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   30ca2:	4a71      	ldr	r2, [pc, #452]	; (30e68 <MQTTSerialize_connect+0x270>)
   30ca4:	231c      	movs	r3, #28
   30ca6:	18fb      	adds	r3, r7, r3
   30ca8:	0011      	movs	r1, r2
   30caa:	0018      	movs	r0, r3
   30cac:	4b6d      	ldr	r3, [pc, #436]	; (30e64 <MQTTSerialize_connect+0x26c>)
   30cae:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   30cb0:	231c      	movs	r3, #28
   30cb2:	18fb      	adds	r3, r7, r3
   30cb4:	2103      	movs	r1, #3
   30cb6:	0018      	movs	r0, r3
   30cb8:	4b67      	ldr	r3, [pc, #412]	; (30e58 <MQTTSerialize_connect+0x260>)
   30cba:	4798      	blx	r3
	}

	flags.all = 0;
   30cbc:	2314      	movs	r3, #20
   30cbe:	18fb      	adds	r3, r7, r3
   30cc0:	2200      	movs	r2, #0
   30cc2:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   30cc4:	687b      	ldr	r3, [r7, #4]
   30cc6:	7e9b      	ldrb	r3, [r3, #26]
   30cc8:	1c1a      	adds	r2, r3, #0
   30cca:	2301      	movs	r3, #1
   30ccc:	4013      	ands	r3, r2
   30cce:	b2da      	uxtb	r2, r3
   30cd0:	2314      	movs	r3, #20
   30cd2:	18fb      	adds	r3, r7, r3
   30cd4:	2101      	movs	r1, #1
   30cd6:	400a      	ands	r2, r1
   30cd8:	1890      	adds	r0, r2, r2
   30cda:	781a      	ldrb	r2, [r3, #0]
   30cdc:	2102      	movs	r1, #2
   30cde:	438a      	bics	r2, r1
   30ce0:	1c11      	adds	r1, r2, #0
   30ce2:	1c02      	adds	r2, r0, #0
   30ce4:	430a      	orrs	r2, r1
   30ce6:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   30ce8:	687b      	ldr	r3, [r7, #4]
   30cea:	7edb      	ldrb	r3, [r3, #27]
   30cec:	1e5a      	subs	r2, r3, #1
   30cee:	4193      	sbcs	r3, r2
   30cf0:	b2da      	uxtb	r2, r3
   30cf2:	2314      	movs	r3, #20
   30cf4:	18fb      	adds	r3, r7, r3
   30cf6:	2101      	movs	r1, #1
   30cf8:	400a      	ands	r2, r1
   30cfa:	0090      	lsls	r0, r2, #2
   30cfc:	781a      	ldrb	r2, [r3, #0]
   30cfe:	2104      	movs	r1, #4
   30d00:	438a      	bics	r2, r1
   30d02:	1c11      	adds	r1, r2, #0
   30d04:	1c02      	adds	r2, r0, #0
   30d06:	430a      	orrs	r2, r1
   30d08:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   30d0a:	2314      	movs	r3, #20
   30d0c:	18fb      	adds	r3, r7, r3
   30d0e:	781b      	ldrb	r3, [r3, #0]
   30d10:	2204      	movs	r2, #4
   30d12:	4013      	ands	r3, r2
   30d14:	b2db      	uxtb	r3, r3
   30d16:	2b00      	cmp	r3, #0
   30d18:	d025      	beq.n	30d66 <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   30d1a:	687b      	ldr	r3, [r7, #4]
   30d1c:	223d      	movs	r2, #61	; 0x3d
   30d1e:	5c9b      	ldrb	r3, [r3, r2]
   30d20:	1c1a      	adds	r2, r3, #0
   30d22:	2303      	movs	r3, #3
   30d24:	4013      	ands	r3, r2
   30d26:	b2da      	uxtb	r2, r3
   30d28:	2314      	movs	r3, #20
   30d2a:	18fb      	adds	r3, r7, r3
   30d2c:	2103      	movs	r1, #3
   30d2e:	400a      	ands	r2, r1
   30d30:	00d0      	lsls	r0, r2, #3
   30d32:	781a      	ldrb	r2, [r3, #0]
   30d34:	2118      	movs	r1, #24
   30d36:	438a      	bics	r2, r1
   30d38:	1c11      	adds	r1, r2, #0
   30d3a:	1c02      	adds	r2, r0, #0
   30d3c:	430a      	orrs	r2, r1
   30d3e:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   30d40:	687b      	ldr	r3, [r7, #4]
   30d42:	223c      	movs	r2, #60	; 0x3c
   30d44:	5c9b      	ldrb	r3, [r3, r2]
   30d46:	1c1a      	adds	r2, r3, #0
   30d48:	2301      	movs	r3, #1
   30d4a:	4013      	ands	r3, r2
   30d4c:	b2da      	uxtb	r2, r3
   30d4e:	2314      	movs	r3, #20
   30d50:	18fb      	adds	r3, r7, r3
   30d52:	2101      	movs	r1, #1
   30d54:	400a      	ands	r2, r1
   30d56:	0150      	lsls	r0, r2, #5
   30d58:	781a      	ldrb	r2, [r3, #0]
   30d5a:	2120      	movs	r1, #32
   30d5c:	438a      	bics	r2, r1
   30d5e:	1c11      	adds	r1, r2, #0
   30d60:	1c02      	adds	r2, r0, #0
   30d62:	430a      	orrs	r2, r1
   30d64:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   30d66:	687b      	ldr	r3, [r7, #4]
   30d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   30d6a:	2b00      	cmp	r3, #0
   30d6c:	d103      	bne.n	30d76 <MQTTSerialize_connect+0x17e>
   30d6e:	687b      	ldr	r3, [r7, #4]
   30d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30d72:	2b00      	cmp	r3, #0
   30d74:	d006      	beq.n	30d84 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   30d76:	2314      	movs	r3, #20
   30d78:	18fb      	adds	r3, r7, r3
   30d7a:	781a      	ldrb	r2, [r3, #0]
   30d7c:	2180      	movs	r1, #128	; 0x80
   30d7e:	4249      	negs	r1, r1
   30d80:	430a      	orrs	r2, r1
   30d82:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   30d84:	687b      	ldr	r3, [r7, #4]
   30d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30d88:	2b00      	cmp	r3, #0
   30d8a:	d103      	bne.n	30d94 <MQTTSerialize_connect+0x19c>
   30d8c:	687b      	ldr	r3, [r7, #4]
   30d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   30d90:	2b00      	cmp	r3, #0
   30d92:	d005      	beq.n	30da0 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   30d94:	2314      	movs	r3, #20
   30d96:	18fb      	adds	r3, r7, r3
   30d98:	781a      	ldrb	r2, [r3, #0]
   30d9a:	2140      	movs	r1, #64	; 0x40
   30d9c:	430a      	orrs	r2, r1
   30d9e:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   30da0:	2314      	movs	r3, #20
   30da2:	18fb      	adds	r3, r7, r3
   30da4:	781a      	ldrb	r2, [r3, #0]
   30da6:	231c      	movs	r3, #28
   30da8:	18fb      	adds	r3, r7, r3
   30daa:	0011      	movs	r1, r2
   30dac:	0018      	movs	r0, r3
   30dae:	4b2a      	ldr	r3, [pc, #168]	; (30e58 <MQTTSerialize_connect+0x260>)
   30db0:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   30db2:	687b      	ldr	r3, [r7, #4]
   30db4:	8b1b      	ldrh	r3, [r3, #24]
   30db6:	001a      	movs	r2, r3
   30db8:	231c      	movs	r3, #28
   30dba:	18fb      	adds	r3, r7, r3
   30dbc:	0011      	movs	r1, r2
   30dbe:	0018      	movs	r0, r3
   30dc0:	4b2a      	ldr	r3, [pc, #168]	; (30e6c <MQTTSerialize_connect+0x274>)
   30dc2:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   30dc4:	687b      	ldr	r3, [r7, #4]
   30dc6:	221c      	movs	r2, #28
   30dc8:	18b8      	adds	r0, r7, r2
   30dca:	68d9      	ldr	r1, [r3, #12]
   30dcc:	691a      	ldr	r2, [r3, #16]
   30dce:	695b      	ldr	r3, [r3, #20]
   30dd0:	4c27      	ldr	r4, [pc, #156]	; (30e70 <MQTTSerialize_connect+0x278>)
   30dd2:	47a0      	blx	r4
	if (options->willFlag)
   30dd4:	687b      	ldr	r3, [r7, #4]
   30dd6:	7edb      	ldrb	r3, [r3, #27]
   30dd8:	2b00      	cmp	r3, #0
   30dda:	d00f      	beq.n	30dfc <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   30ddc:	687b      	ldr	r3, [r7, #4]
   30dde:	221c      	movs	r2, #28
   30de0:	18b8      	adds	r0, r7, r2
   30de2:	6a59      	ldr	r1, [r3, #36]	; 0x24
   30de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   30de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   30de8:	4c21      	ldr	r4, [pc, #132]	; (30e70 <MQTTSerialize_connect+0x278>)
   30dea:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   30dec:	687b      	ldr	r3, [r7, #4]
   30dee:	221c      	movs	r2, #28
   30df0:	18b8      	adds	r0, r7, r2
   30df2:	6b19      	ldr	r1, [r3, #48]	; 0x30
   30df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   30df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   30df8:	4c1d      	ldr	r4, [pc, #116]	; (30e70 <MQTTSerialize_connect+0x278>)
   30dfa:	47a0      	blx	r4
	}
	if (flags.bits.username)
   30dfc:	2314      	movs	r3, #20
   30dfe:	18fb      	adds	r3, r7, r3
   30e00:	781b      	ldrb	r3, [r3, #0]
   30e02:	227f      	movs	r2, #127	; 0x7f
   30e04:	4393      	bics	r3, r2
   30e06:	b2db      	uxtb	r3, r3
   30e08:	2b00      	cmp	r3, #0
   30e0a:	d007      	beq.n	30e1c <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   30e0c:	687b      	ldr	r3, [r7, #4]
   30e0e:	221c      	movs	r2, #28
   30e10:	18b8      	adds	r0, r7, r2
   30e12:	6c19      	ldr	r1, [r3, #64]	; 0x40
   30e14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   30e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30e18:	4c15      	ldr	r4, [pc, #84]	; (30e70 <MQTTSerialize_connect+0x278>)
   30e1a:	47a0      	blx	r4
	if (flags.bits.password)
   30e1c:	2314      	movs	r3, #20
   30e1e:	18fb      	adds	r3, r7, r3
   30e20:	781b      	ldrb	r3, [r3, #0]
   30e22:	2240      	movs	r2, #64	; 0x40
   30e24:	4013      	ands	r3, r2
   30e26:	b2db      	uxtb	r3, r3
   30e28:	2b00      	cmp	r3, #0
   30e2a:	d007      	beq.n	30e3c <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   30e2c:	687b      	ldr	r3, [r7, #4]
   30e2e:	221c      	movs	r2, #28
   30e30:	18b8      	adds	r0, r7, r2
   30e32:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   30e34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   30e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   30e38:	4c0d      	ldr	r4, [pc, #52]	; (30e70 <MQTTSerialize_connect+0x278>)
   30e3a:	47a0      	blx	r4

	rc = ptr - buf;
   30e3c:	69fb      	ldr	r3, [r7, #28]
   30e3e:	001a      	movs	r2, r3
   30e40:	68fb      	ldr	r3, [r7, #12]
   30e42:	1ad3      	subs	r3, r2, r3
   30e44:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   30e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30e48:	0018      	movs	r0, r3
   30e4a:	46bd      	mov	sp, r7
   30e4c:	b00b      	add	sp, #44	; 0x2c
   30e4e:	bd90      	pop	{r4, r7, pc}
   30e50:	00030b31 	.word	0x00030b31
   30e54:	000312c5 	.word	0x000312c5
   30e58:	000313e7 	.word	0x000313e7
   30e5c:	000311cd 	.word	0x000311cd
   30e60:	0003baa0 	.word	0x0003baa0
   30e64:	00031469 	.word	0x00031469
   30e68:	0003baa8 	.word	0x0003baa8
   30e6c:	00031411 	.word	0x00031411
   30e70:	000314b9 	.word	0x000314b9

00030e74 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   30e74:	b580      	push	{r7, lr}
   30e76:	b08a      	sub	sp, #40	; 0x28
   30e78:	af00      	add	r7, sp, #0
   30e7a:	60f8      	str	r0, [r7, #12]
   30e7c:	60b9      	str	r1, [r7, #8]
   30e7e:	607a      	str	r2, [r7, #4]
   30e80:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   30e82:	2300      	movs	r3, #0
   30e84:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   30e86:	687b      	ldr	r3, [r7, #4]
   30e88:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   30e8a:	2300      	movs	r3, #0
   30e8c:	623b      	str	r3, [r7, #32]
	int rc = 0;
   30e8e:	2300      	movs	r3, #0
   30e90:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   30e92:	2300      	movs	r3, #0
   30e94:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   30e96:	2318      	movs	r3, #24
   30e98:	18fb      	adds	r3, r7, r3
   30e9a:	0018      	movs	r0, r3
   30e9c:	4b25      	ldr	r3, [pc, #148]	; (30f34 <MQTTDeserialize_connack+0xc0>)
   30e9e:	4798      	blx	r3
   30ea0:	0003      	movs	r3, r0
   30ea2:	001a      	movs	r2, r3
   30ea4:	231c      	movs	r3, #28
   30ea6:	18fb      	adds	r3, r7, r3
   30ea8:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   30eaa:	231c      	movs	r3, #28
   30eac:	18fb      	adds	r3, r7, r3
   30eae:	781b      	ldrb	r3, [r3, #0]
   30eb0:	220f      	movs	r2, #15
   30eb2:	4393      	bics	r3, r2
   30eb4:	b2db      	uxtb	r3, r3
   30eb6:	2b20      	cmp	r3, #32
   30eb8:	d134      	bne.n	30f24 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30eba:	69bb      	ldr	r3, [r7, #24]
   30ebc:	2214      	movs	r2, #20
   30ebe:	18ba      	adds	r2, r7, r2
   30ec0:	0011      	movs	r1, r2
   30ec2:	0018      	movs	r0, r3
   30ec4:	4b1c      	ldr	r3, [pc, #112]	; (30f38 <MQTTDeserialize_connack+0xc4>)
   30ec6:	4798      	blx	r3
   30ec8:	0003      	movs	r3, r0
   30eca:	627b      	str	r3, [r7, #36]	; 0x24
   30ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30ece:	69bb      	ldr	r3, [r7, #24]
   30ed0:	189b      	adds	r3, r3, r2
   30ed2:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30ed4:	69bb      	ldr	r3, [r7, #24]
   30ed6:	697a      	ldr	r2, [r7, #20]
   30ed8:	189b      	adds	r3, r3, r2
   30eda:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   30edc:	6a3b      	ldr	r3, [r7, #32]
   30ede:	69ba      	ldr	r2, [r7, #24]
   30ee0:	1a9b      	subs	r3, r3, r2
   30ee2:	2b01      	cmp	r3, #1
   30ee4:	dd20      	ble.n	30f28 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   30ee6:	2318      	movs	r3, #24
   30ee8:	18fb      	adds	r3, r7, r3
   30eea:	0018      	movs	r0, r3
   30eec:	4b11      	ldr	r3, [pc, #68]	; (30f34 <MQTTDeserialize_connack+0xc0>)
   30eee:	4798      	blx	r3
   30ef0:	0003      	movs	r3, r0
   30ef2:	001a      	movs	r2, r3
   30ef4:	2310      	movs	r3, #16
   30ef6:	18fb      	adds	r3, r7, r3
   30ef8:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   30efa:	2310      	movs	r3, #16
   30efc:	18fb      	adds	r3, r7, r3
   30efe:	781b      	ldrb	r3, [r3, #0]
   30f00:	061b      	lsls	r3, r3, #24
   30f02:	0fdb      	lsrs	r3, r3, #31
   30f04:	b2db      	uxtb	r3, r3
   30f06:	001a      	movs	r2, r3
   30f08:	68fb      	ldr	r3, [r7, #12]
   30f0a:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   30f0c:	2318      	movs	r3, #24
   30f0e:	18fb      	adds	r3, r7, r3
   30f10:	0018      	movs	r0, r3
   30f12:	4b08      	ldr	r3, [pc, #32]	; (30f34 <MQTTDeserialize_connack+0xc0>)
   30f14:	4798      	blx	r3
   30f16:	0003      	movs	r3, r0
   30f18:	001a      	movs	r2, r3
   30f1a:	68bb      	ldr	r3, [r7, #8]
   30f1c:	701a      	strb	r2, [r3, #0]

	rc = 1;
   30f1e:	2301      	movs	r3, #1
   30f20:	627b      	str	r3, [r7, #36]	; 0x24
   30f22:	e002      	b.n	30f2a <MQTTDeserialize_connack+0xb6>
		goto exit;
   30f24:	46c0      	nop			; (mov r8, r8)
   30f26:	e000      	b.n	30f2a <MQTTDeserialize_connack+0xb6>
		goto exit;
   30f28:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30f2c:	0018      	movs	r0, r3
   30f2e:	46bd      	mov	sp, r7
   30f30:	b00a      	add	sp, #40	; 0x28
   30f32:	bd80      	pop	{r7, pc}
   30f34:	000313bb 	.word	0x000313bb
   30f38:	00031355 	.word	0x00031355

00030f3c <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   30f3c:	b580      	push	{r7, lr}
   30f3e:	b088      	sub	sp, #32
   30f40:	af00      	add	r7, sp, #0
   30f42:	60f8      	str	r0, [r7, #12]
   30f44:	60b9      	str	r1, [r7, #8]
   30f46:	1dfb      	adds	r3, r7, #7
   30f48:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   30f4a:	2300      	movs	r3, #0
   30f4c:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   30f4e:	2301      	movs	r3, #1
   30f50:	425b      	negs	r3, r3
   30f52:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   30f54:	68fb      	ldr	r3, [r7, #12]
   30f56:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   30f58:	68bb      	ldr	r3, [r7, #8]
   30f5a:	2b01      	cmp	r3, #1
   30f5c:	dc03      	bgt.n	30f66 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30f5e:	2302      	movs	r3, #2
   30f60:	425b      	negs	r3, r3
   30f62:	61fb      	str	r3, [r7, #28]
		goto exit;
   30f64:	e029      	b.n	30fba <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   30f66:	2318      	movs	r3, #24
   30f68:	18fb      	adds	r3, r7, r3
   30f6a:	2200      	movs	r2, #0
   30f6c:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   30f6e:	1dfb      	adds	r3, r7, #7
   30f70:	781b      	ldrb	r3, [r3, #0]
   30f72:	220f      	movs	r2, #15
   30f74:	4013      	ands	r3, r2
   30f76:	b2da      	uxtb	r2, r3
   30f78:	2318      	movs	r3, #24
   30f7a:	18fb      	adds	r3, r7, r3
   30f7c:	0110      	lsls	r0, r2, #4
   30f7e:	781a      	ldrb	r2, [r3, #0]
   30f80:	210f      	movs	r1, #15
   30f82:	400a      	ands	r2, r1
   30f84:	1c11      	adds	r1, r2, #0
   30f86:	1c02      	adds	r2, r0, #0
   30f88:	430a      	orrs	r2, r1
   30f8a:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30f8c:	2318      	movs	r3, #24
   30f8e:	18fb      	adds	r3, r7, r3
   30f90:	781a      	ldrb	r2, [r3, #0]
   30f92:	2314      	movs	r3, #20
   30f94:	18fb      	adds	r3, r7, r3
   30f96:	0011      	movs	r1, r2
   30f98:	0018      	movs	r0, r3
   30f9a:	4b0a      	ldr	r3, [pc, #40]	; (30fc4 <MQTTSerialize_zero+0x88>)
   30f9c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   30f9e:	697b      	ldr	r3, [r7, #20]
   30fa0:	2100      	movs	r1, #0
   30fa2:	0018      	movs	r0, r3
   30fa4:	4b08      	ldr	r3, [pc, #32]	; (30fc8 <MQTTSerialize_zero+0x8c>)
   30fa6:	4798      	blx	r3
   30fa8:	0002      	movs	r2, r0
   30faa:	697b      	ldr	r3, [r7, #20]
   30fac:	189b      	adds	r3, r3, r2
   30fae:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   30fb0:	697b      	ldr	r3, [r7, #20]
   30fb2:	001a      	movs	r2, r3
   30fb4:	68fb      	ldr	r3, [r7, #12]
   30fb6:	1ad3      	subs	r3, r2, r3
   30fb8:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30fba:	69fb      	ldr	r3, [r7, #28]
}
   30fbc:	0018      	movs	r0, r3
   30fbe:	46bd      	mov	sp, r7
   30fc0:	b008      	add	sp, #32
   30fc2:	bd80      	pop	{r7, pc}
   30fc4:	000313e7 	.word	0x000313e7
   30fc8:	000311cd 	.word	0x000311cd

00030fcc <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   30fcc:	b580      	push	{r7, lr}
   30fce:	b082      	sub	sp, #8
   30fd0:	af00      	add	r7, sp, #0
   30fd2:	6078      	str	r0, [r7, #4]
   30fd4:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   30fd6:	6839      	ldr	r1, [r7, #0]
   30fd8:	687b      	ldr	r3, [r7, #4]
   30fda:	220e      	movs	r2, #14
   30fdc:	0018      	movs	r0, r3
   30fde:	4b03      	ldr	r3, [pc, #12]	; (30fec <MQTTSerialize_disconnect+0x20>)
   30fe0:	4798      	blx	r3
   30fe2:	0003      	movs	r3, r0
}
   30fe4:	0018      	movs	r0, r3
   30fe6:	46bd      	mov	sp, r7
   30fe8:	b002      	add	sp, #8
   30fea:	bd80      	pop	{r7, pc}
   30fec:	00030f3d 	.word	0x00030f3d

00030ff0 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   30ff0:	b580      	push	{r7, lr}
   30ff2:	b082      	sub	sp, #8
   30ff4:	af00      	add	r7, sp, #0
   30ff6:	6078      	str	r0, [r7, #4]
   30ff8:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   30ffa:	6839      	ldr	r1, [r7, #0]
   30ffc:	687b      	ldr	r3, [r7, #4]
   30ffe:	220c      	movs	r2, #12
   31000:	0018      	movs	r0, r3
   31002:	4b03      	ldr	r3, [pc, #12]	; (31010 <MQTTSerialize_pingreq+0x20>)
   31004:	4798      	blx	r3
   31006:	0003      	movs	r3, r0
}
   31008:	0018      	movs	r0, r3
   3100a:	46bd      	mov	sp, r7
   3100c:	b002      	add	sp, #8
   3100e:	bd80      	pop	{r7, pc}
   31010:	00030f3d 	.word	0x00030f3d

00031014 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   31014:	b580      	push	{r7, lr}
   31016:	b08a      	sub	sp, #40	; 0x28
   31018:	af00      	add	r7, sp, #0
   3101a:	60f8      	str	r0, [r7, #12]
   3101c:	60b9      	str	r1, [r7, #8]
   3101e:	607a      	str	r2, [r7, #4]
   31020:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   31022:	2300      	movs	r3, #0
   31024:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   31026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   31028:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   3102a:	2300      	movs	r3, #0
   3102c:	623b      	str	r3, [r7, #32]
	int rc = 0;
   3102e:	2300      	movs	r3, #0
   31030:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   31032:	2300      	movs	r3, #0
   31034:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   31036:	2318      	movs	r3, #24
   31038:	18fb      	adds	r3, r7, r3
   3103a:	0018      	movs	r0, r3
   3103c:	4b32      	ldr	r3, [pc, #200]	; (31108 <MQTTDeserialize_publish+0xf4>)
   3103e:	4798      	blx	r3
   31040:	0003      	movs	r3, r0
   31042:	001a      	movs	r2, r3
   31044:	231c      	movs	r3, #28
   31046:	18fb      	adds	r3, r7, r3
   31048:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   3104a:	231c      	movs	r3, #28
   3104c:	18fb      	adds	r3, r7, r3
   3104e:	781b      	ldrb	r3, [r3, #0]
   31050:	220f      	movs	r2, #15
   31052:	4393      	bics	r3, r2
   31054:	b2db      	uxtb	r3, r3
   31056:	2b30      	cmp	r3, #48	; 0x30
   31058:	d150      	bne.n	310fc <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   3105a:	231c      	movs	r3, #28
   3105c:	18fb      	adds	r3, r7, r3
   3105e:	781b      	ldrb	r3, [r3, #0]
   31060:	071b      	lsls	r3, r3, #28
   31062:	0fdb      	lsrs	r3, r3, #31
   31064:	b2db      	uxtb	r3, r3
   31066:	001a      	movs	r2, r3
   31068:	68fb      	ldr	r3, [r7, #12]
   3106a:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   3106c:	231c      	movs	r3, #28
   3106e:	18fb      	adds	r3, r7, r3
   31070:	781b      	ldrb	r3, [r3, #0]
   31072:	075b      	lsls	r3, r3, #29
   31074:	0f9b      	lsrs	r3, r3, #30
   31076:	b2db      	uxtb	r3, r3
   31078:	001a      	movs	r2, r3
   3107a:	68bb      	ldr	r3, [r7, #8]
   3107c:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   3107e:	231c      	movs	r3, #28
   31080:	18fb      	adds	r3, r7, r3
   31082:	781b      	ldrb	r3, [r3, #0]
   31084:	07db      	lsls	r3, r3, #31
   31086:	0fdb      	lsrs	r3, r3, #31
   31088:	b2db      	uxtb	r3, r3
   3108a:	001a      	movs	r2, r3
   3108c:	687b      	ldr	r3, [r7, #4]
   3108e:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   31090:	69bb      	ldr	r3, [r7, #24]
   31092:	2214      	movs	r2, #20
   31094:	18ba      	adds	r2, r7, r2
   31096:	0011      	movs	r1, r2
   31098:	0018      	movs	r0, r3
   3109a:	4b1c      	ldr	r3, [pc, #112]	; (3110c <MQTTDeserialize_publish+0xf8>)
   3109c:	4798      	blx	r3
   3109e:	0003      	movs	r3, r0
   310a0:	627b      	str	r3, [r7, #36]	; 0x24
   310a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   310a4:	69bb      	ldr	r3, [r7, #24]
   310a6:	189b      	adds	r3, r3, r2
   310a8:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   310aa:	69bb      	ldr	r3, [r7, #24]
   310ac:	697a      	ldr	r2, [r7, #20]
   310ae:	189b      	adds	r3, r3, r2
   310b0:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   310b2:	6a3a      	ldr	r2, [r7, #32]
   310b4:	2318      	movs	r3, #24
   310b6:	18f9      	adds	r1, r7, r3
   310b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   310ba:	0018      	movs	r0, r3
   310bc:	4b14      	ldr	r3, [pc, #80]	; (31110 <MQTTDeserialize_publish+0xfc>)
   310be:	4798      	blx	r3
   310c0:	1e03      	subs	r3, r0, #0
   310c2:	d01c      	beq.n	310fe <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   310c4:	6a3b      	ldr	r3, [r7, #32]
   310c6:	69ba      	ldr	r2, [r7, #24]
   310c8:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   310ca:	d418      	bmi.n	310fe <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   310cc:	68bb      	ldr	r3, [r7, #8]
   310ce:	681b      	ldr	r3, [r3, #0]
   310d0:	2b00      	cmp	r3, #0
   310d2:	dd08      	ble.n	310e6 <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   310d4:	2318      	movs	r3, #24
   310d6:	18fb      	adds	r3, r7, r3
   310d8:	0018      	movs	r0, r3
   310da:	4b0e      	ldr	r3, [pc, #56]	; (31114 <MQTTDeserialize_publish+0x100>)
   310dc:	4798      	blx	r3
   310de:	0003      	movs	r3, r0
   310e0:	b29a      	uxth	r2, r3
   310e2:	683b      	ldr	r3, [r7, #0]
   310e4:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   310e6:	6a3b      	ldr	r3, [r7, #32]
   310e8:	69ba      	ldr	r2, [r7, #24]
   310ea:	1a9a      	subs	r2, r3, r2
   310ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   310ee:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   310f0:	69ba      	ldr	r2, [r7, #24]
   310f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   310f4:	601a      	str	r2, [r3, #0]
	rc = 1;
   310f6:	2301      	movs	r3, #1
   310f8:	627b      	str	r3, [r7, #36]	; 0x24
   310fa:	e000      	b.n	310fe <MQTTDeserialize_publish+0xea>
		goto exit;
   310fc:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   310fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   31100:	0018      	movs	r0, r3
   31102:	46bd      	mov	sp, r7
   31104:	b00a      	add	sp, #40	; 0x28
   31106:	bd80      	pop	{r7, pc}
   31108:	000313bb 	.word	0x000313bb
   3110c:	00031355 	.word	0x00031355
   31110:	00031539 	.word	0x00031539
   31114:	00031389 	.word	0x00031389

00031118 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   31118:	b580      	push	{r7, lr}
   3111a:	b08a      	sub	sp, #40	; 0x28
   3111c:	af00      	add	r7, sp, #0
   3111e:	60f8      	str	r0, [r7, #12]
   31120:	60b9      	str	r1, [r7, #8]
   31122:	607a      	str	r2, [r7, #4]
   31124:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   31126:	2300      	movs	r3, #0
   31128:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   3112a:	683b      	ldr	r3, [r7, #0]
   3112c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   3112e:	2300      	movs	r3, #0
   31130:	623b      	str	r3, [r7, #32]
	int rc = 0;
   31132:	2300      	movs	r3, #0
   31134:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   31136:	2318      	movs	r3, #24
   31138:	18fb      	adds	r3, r7, r3
   3113a:	0018      	movs	r0, r3
   3113c:	4b20      	ldr	r3, [pc, #128]	; (311c0 <MQTTDeserialize_ack+0xa8>)
   3113e:	4798      	blx	r3
   31140:	0003      	movs	r3, r0
   31142:	001a      	movs	r2, r3
   31144:	231c      	movs	r3, #28
   31146:	18fb      	adds	r3, r7, r3
   31148:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   3114a:	231c      	movs	r3, #28
   3114c:	18fb      	adds	r3, r7, r3
   3114e:	781b      	ldrb	r3, [r3, #0]
   31150:	071b      	lsls	r3, r3, #28
   31152:	0fdb      	lsrs	r3, r3, #31
   31154:	b2db      	uxtb	r3, r3
   31156:	001a      	movs	r2, r3
   31158:	68bb      	ldr	r3, [r7, #8]
   3115a:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   3115c:	231c      	movs	r3, #28
   3115e:	18fb      	adds	r3, r7, r3
   31160:	781b      	ldrb	r3, [r3, #0]
   31162:	061b      	lsls	r3, r3, #24
   31164:	0f1b      	lsrs	r3, r3, #28
   31166:	b2db      	uxtb	r3, r3
   31168:	001a      	movs	r2, r3
   3116a:	68fb      	ldr	r3, [r7, #12]
   3116c:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   3116e:	69bb      	ldr	r3, [r7, #24]
   31170:	2214      	movs	r2, #20
   31172:	18ba      	adds	r2, r7, r2
   31174:	0011      	movs	r1, r2
   31176:	0018      	movs	r0, r3
   31178:	4b12      	ldr	r3, [pc, #72]	; (311c4 <MQTTDeserialize_ack+0xac>)
   3117a:	4798      	blx	r3
   3117c:	0003      	movs	r3, r0
   3117e:	627b      	str	r3, [r7, #36]	; 0x24
   31180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   31182:	69bb      	ldr	r3, [r7, #24]
   31184:	189b      	adds	r3, r3, r2
   31186:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   31188:	69bb      	ldr	r3, [r7, #24]
   3118a:	697a      	ldr	r2, [r7, #20]
   3118c:	189b      	adds	r3, r3, r2
   3118e:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   31190:	6a3b      	ldr	r3, [r7, #32]
   31192:	69ba      	ldr	r2, [r7, #24]
   31194:	1a9b      	subs	r3, r3, r2
   31196:	2b01      	cmp	r3, #1
   31198:	dd0b      	ble.n	311b2 <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   3119a:	2318      	movs	r3, #24
   3119c:	18fb      	adds	r3, r7, r3
   3119e:	0018      	movs	r0, r3
   311a0:	4b09      	ldr	r3, [pc, #36]	; (311c8 <MQTTDeserialize_ack+0xb0>)
   311a2:	4798      	blx	r3
   311a4:	0003      	movs	r3, r0
   311a6:	b29a      	uxth	r2, r3
   311a8:	687b      	ldr	r3, [r7, #4]
   311aa:	801a      	strh	r2, [r3, #0]

	rc = 1;
   311ac:	2301      	movs	r3, #1
   311ae:	627b      	str	r3, [r7, #36]	; 0x24
   311b0:	e000      	b.n	311b4 <MQTTDeserialize_ack+0x9c>
		goto exit;
   311b2:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   311b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   311b6:	0018      	movs	r0, r3
   311b8:	46bd      	mov	sp, r7
   311ba:	b00a      	add	sp, #40	; 0x28
   311bc:	bd80      	pop	{r7, pc}
   311be:	46c0      	nop			; (mov r8, r8)
   311c0:	000313bb 	.word	0x000313bb
   311c4:	00031355 	.word	0x00031355
   311c8:	00031389 	.word	0x00031389

000311cc <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   311cc:	b580      	push	{r7, lr}
   311ce:	b084      	sub	sp, #16
   311d0:	af00      	add	r7, sp, #0
   311d2:	6078      	str	r0, [r7, #4]
   311d4:	6039      	str	r1, [r7, #0]
	int rc = 0;
   311d6:	2300      	movs	r3, #0
   311d8:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   311da:	683b      	ldr	r3, [r7, #0]
   311dc:	4a17      	ldr	r2, [pc, #92]	; (3123c <MQTTPacket_encode+0x70>)
   311de:	4013      	ands	r3, r2
   311e0:	d504      	bpl.n	311ec <MQTTPacket_encode+0x20>
   311e2:	3b01      	subs	r3, #1
   311e4:	2280      	movs	r2, #128	; 0x80
   311e6:	4252      	negs	r2, r2
   311e8:	4313      	orrs	r3, r2
   311ea:	3301      	adds	r3, #1
   311ec:	001a      	movs	r2, r3
   311ee:	230b      	movs	r3, #11
   311f0:	18fb      	adds	r3, r7, r3
   311f2:	701a      	strb	r2, [r3, #0]
		length /= 128;
   311f4:	683b      	ldr	r3, [r7, #0]
   311f6:	2b00      	cmp	r3, #0
   311f8:	da00      	bge.n	311fc <MQTTPacket_encode+0x30>
   311fa:	337f      	adds	r3, #127	; 0x7f
   311fc:	11db      	asrs	r3, r3, #7
   311fe:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   31200:	683b      	ldr	r3, [r7, #0]
   31202:	2b00      	cmp	r3, #0
   31204:	dd08      	ble.n	31218 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   31206:	230b      	movs	r3, #11
   31208:	18fb      	adds	r3, r7, r3
   3120a:	220b      	movs	r2, #11
   3120c:	18ba      	adds	r2, r7, r2
   3120e:	7812      	ldrb	r2, [r2, #0]
   31210:	2180      	movs	r1, #128	; 0x80
   31212:	4249      	negs	r1, r1
   31214:	430a      	orrs	r2, r1
   31216:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   31218:	68fb      	ldr	r3, [r7, #12]
   3121a:	1c5a      	adds	r2, r3, #1
   3121c:	60fa      	str	r2, [r7, #12]
   3121e:	001a      	movs	r2, r3
   31220:	687b      	ldr	r3, [r7, #4]
   31222:	189b      	adds	r3, r3, r2
   31224:	220b      	movs	r2, #11
   31226:	18ba      	adds	r2, r7, r2
   31228:	7812      	ldrb	r2, [r2, #0]
   3122a:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   3122c:	683b      	ldr	r3, [r7, #0]
   3122e:	2b00      	cmp	r3, #0
   31230:	dcd3      	bgt.n	311da <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   31232:	68fb      	ldr	r3, [r7, #12]
}
   31234:	0018      	movs	r0, r3
   31236:	46bd      	mov	sp, r7
   31238:	b004      	add	sp, #16
   3123a:	bd80      	pop	{r7, pc}
   3123c:	8000007f 	.word	0x8000007f

00031240 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   31240:	b580      	push	{r7, lr}
   31242:	b086      	sub	sp, #24
   31244:	af00      	add	r7, sp, #0
   31246:	6078      	str	r0, [r7, #4]
   31248:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   3124a:	2301      	movs	r3, #1
   3124c:	617b      	str	r3, [r7, #20]
	int len = 0;
   3124e:	2300      	movs	r3, #0
   31250:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   31252:	683b      	ldr	r3, [r7, #0]
   31254:	2200      	movs	r2, #0
   31256:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   31258:	2301      	movs	r3, #1
   3125a:	425b      	negs	r3, r3
   3125c:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   3125e:	693b      	ldr	r3, [r7, #16]
   31260:	3301      	adds	r3, #1
   31262:	613b      	str	r3, [r7, #16]
   31264:	693b      	ldr	r3, [r7, #16]
   31266:	2b04      	cmp	r3, #4
   31268:	dd03      	ble.n	31272 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   3126a:	2301      	movs	r3, #1
   3126c:	425b      	negs	r3, r3
   3126e:	60fb      	str	r3, [r7, #12]
			goto exit;
   31270:	e022      	b.n	312b8 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   31272:	230b      	movs	r3, #11
   31274:	18fa      	adds	r2, r7, r3
   31276:	687b      	ldr	r3, [r7, #4]
   31278:	2101      	movs	r1, #1
   3127a:	0010      	movs	r0, r2
   3127c:	4798      	blx	r3
   3127e:	0003      	movs	r3, r0
   31280:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   31282:	68fb      	ldr	r3, [r7, #12]
   31284:	2b01      	cmp	r3, #1
   31286:	d116      	bne.n	312b6 <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   31288:	683b      	ldr	r3, [r7, #0]
   3128a:	681a      	ldr	r2, [r3, #0]
   3128c:	230b      	movs	r3, #11
   3128e:	18fb      	adds	r3, r7, r3
   31290:	781b      	ldrb	r3, [r3, #0]
   31292:	0019      	movs	r1, r3
   31294:	237f      	movs	r3, #127	; 0x7f
   31296:	400b      	ands	r3, r1
   31298:	6979      	ldr	r1, [r7, #20]
   3129a:	434b      	muls	r3, r1
   3129c:	18d2      	adds	r2, r2, r3
   3129e:	683b      	ldr	r3, [r7, #0]
   312a0:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   312a2:	697b      	ldr	r3, [r7, #20]
   312a4:	01db      	lsls	r3, r3, #7
   312a6:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   312a8:	230b      	movs	r3, #11
   312aa:	18fb      	adds	r3, r7, r3
   312ac:	781b      	ldrb	r3, [r3, #0]
   312ae:	b25b      	sxtb	r3, r3
   312b0:	2b00      	cmp	r3, #0
   312b2:	dbd1      	blt.n	31258 <MQTTPacket_decode+0x18>
   312b4:	e000      	b.n	312b8 <MQTTPacket_decode+0x78>
			goto exit;
   312b6:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   312b8:	693b      	ldr	r3, [r7, #16]
}
   312ba:	0018      	movs	r0, r3
   312bc:	46bd      	mov	sp, r7
   312be:	b006      	add	sp, #24
   312c0:	bd80      	pop	{r7, pc}
	...

000312c4 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   312c4:	b580      	push	{r7, lr}
   312c6:	b082      	sub	sp, #8
   312c8:	af00      	add	r7, sp, #0
   312ca:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   312cc:	687b      	ldr	r3, [r7, #4]
   312ce:	3301      	adds	r3, #1
   312d0:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   312d2:	687b      	ldr	r3, [r7, #4]
   312d4:	2b7f      	cmp	r3, #127	; 0x7f
   312d6:	dc03      	bgt.n	312e0 <MQTTPacket_len+0x1c>
		rem_len += 1;
   312d8:	687b      	ldr	r3, [r7, #4]
   312da:	3301      	adds	r3, #1
   312dc:	607b      	str	r3, [r7, #4]
   312de:	e012      	b.n	31306 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   312e0:	687b      	ldr	r3, [r7, #4]
   312e2:	4a0b      	ldr	r2, [pc, #44]	; (31310 <MQTTPacket_len+0x4c>)
   312e4:	4293      	cmp	r3, r2
   312e6:	dc03      	bgt.n	312f0 <MQTTPacket_len+0x2c>
		rem_len += 2;
   312e8:	687b      	ldr	r3, [r7, #4]
   312ea:	3302      	adds	r3, #2
   312ec:	607b      	str	r3, [r7, #4]
   312ee:	e00a      	b.n	31306 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   312f0:	687b      	ldr	r3, [r7, #4]
   312f2:	4a08      	ldr	r2, [pc, #32]	; (31314 <MQTTPacket_len+0x50>)
   312f4:	4293      	cmp	r3, r2
   312f6:	dc03      	bgt.n	31300 <MQTTPacket_len+0x3c>
		rem_len += 3;
   312f8:	687b      	ldr	r3, [r7, #4]
   312fa:	3303      	adds	r3, #3
   312fc:	607b      	str	r3, [r7, #4]
   312fe:	e002      	b.n	31306 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   31300:	687b      	ldr	r3, [r7, #4]
   31302:	3304      	adds	r3, #4
   31304:	607b      	str	r3, [r7, #4]
	return rem_len;
   31306:	687b      	ldr	r3, [r7, #4]
}
   31308:	0018      	movs	r0, r3
   3130a:	46bd      	mov	sp, r7
   3130c:	b002      	add	sp, #8
   3130e:	bd80      	pop	{r7, pc}
   31310:	00003fff 	.word	0x00003fff
   31314:	001ffffe 	.word	0x001ffffe

00031318 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   31318:	b580      	push	{r7, lr}
   3131a:	b084      	sub	sp, #16
   3131c:	af00      	add	r7, sp, #0
   3131e:	6078      	str	r0, [r7, #4]
   31320:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   31322:	2300      	movs	r3, #0
   31324:	60fb      	str	r3, [r7, #12]
   31326:	e00a      	b.n	3133e <bufchar+0x26>
		*c = *bufptr++;
   31328:	4b09      	ldr	r3, [pc, #36]	; (31350 <bufchar+0x38>)
   3132a:	681b      	ldr	r3, [r3, #0]
   3132c:	1c59      	adds	r1, r3, #1
   3132e:	4a08      	ldr	r2, [pc, #32]	; (31350 <bufchar+0x38>)
   31330:	6011      	str	r1, [r2, #0]
   31332:	781a      	ldrb	r2, [r3, #0]
   31334:	687b      	ldr	r3, [r7, #4]
   31336:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   31338:	68fb      	ldr	r3, [r7, #12]
   3133a:	3301      	adds	r3, #1
   3133c:	60fb      	str	r3, [r7, #12]
   3133e:	68fa      	ldr	r2, [r7, #12]
   31340:	683b      	ldr	r3, [r7, #0]
   31342:	429a      	cmp	r2, r3
   31344:	dbf0      	blt.n	31328 <bufchar+0x10>
	return count;
   31346:	683b      	ldr	r3, [r7, #0]
}
   31348:	0018      	movs	r0, r3
   3134a:	46bd      	mov	sp, r7
   3134c:	b004      	add	sp, #16
   3134e:	bd80      	pop	{r7, pc}
   31350:	200046f4 	.word	0x200046f4

00031354 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   31354:	b580      	push	{r7, lr}
   31356:	b082      	sub	sp, #8
   31358:	af00      	add	r7, sp, #0
   3135a:	6078      	str	r0, [r7, #4]
   3135c:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   3135e:	4b07      	ldr	r3, [pc, #28]	; (3137c <MQTTPacket_decodeBuf+0x28>)
   31360:	687a      	ldr	r2, [r7, #4]
   31362:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   31364:	683a      	ldr	r2, [r7, #0]
   31366:	4b06      	ldr	r3, [pc, #24]	; (31380 <MQTTPacket_decodeBuf+0x2c>)
   31368:	0011      	movs	r1, r2
   3136a:	0018      	movs	r0, r3
   3136c:	4b05      	ldr	r3, [pc, #20]	; (31384 <MQTTPacket_decodeBuf+0x30>)
   3136e:	4798      	blx	r3
   31370:	0003      	movs	r3, r0
}
   31372:	0018      	movs	r0, r3
   31374:	46bd      	mov	sp, r7
   31376:	b002      	add	sp, #8
   31378:	bd80      	pop	{r7, pc}
   3137a:	46c0      	nop			; (mov r8, r8)
   3137c:	200046f4 	.word	0x200046f4
   31380:	00031319 	.word	0x00031319
   31384:	00031241 	.word	0x00031241

00031388 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   31388:	b580      	push	{r7, lr}
   3138a:	b084      	sub	sp, #16
   3138c:	af00      	add	r7, sp, #0
   3138e:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   31390:	687b      	ldr	r3, [r7, #4]
   31392:	681b      	ldr	r3, [r3, #0]
   31394:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   31396:	68fb      	ldr	r3, [r7, #12]
   31398:	781b      	ldrb	r3, [r3, #0]
   3139a:	021b      	lsls	r3, r3, #8
   3139c:	68fa      	ldr	r2, [r7, #12]
   3139e:	3201      	adds	r2, #1
   313a0:	7812      	ldrb	r2, [r2, #0]
   313a2:	189b      	adds	r3, r3, r2
   313a4:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   313a6:	687b      	ldr	r3, [r7, #4]
   313a8:	681b      	ldr	r3, [r3, #0]
   313aa:	1c9a      	adds	r2, r3, #2
   313ac:	687b      	ldr	r3, [r7, #4]
   313ae:	601a      	str	r2, [r3, #0]
	return len;
   313b0:	68bb      	ldr	r3, [r7, #8]
}
   313b2:	0018      	movs	r0, r3
   313b4:	46bd      	mov	sp, r7
   313b6:	b004      	add	sp, #16
   313b8:	bd80      	pop	{r7, pc}

000313ba <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   313ba:	b580      	push	{r7, lr}
   313bc:	b084      	sub	sp, #16
   313be:	af00      	add	r7, sp, #0
   313c0:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   313c2:	687b      	ldr	r3, [r7, #4]
   313c4:	681a      	ldr	r2, [r3, #0]
   313c6:	230f      	movs	r3, #15
   313c8:	18fb      	adds	r3, r7, r3
   313ca:	7812      	ldrb	r2, [r2, #0]
   313cc:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   313ce:	687b      	ldr	r3, [r7, #4]
   313d0:	681b      	ldr	r3, [r3, #0]
   313d2:	1c5a      	adds	r2, r3, #1
   313d4:	687b      	ldr	r3, [r7, #4]
   313d6:	601a      	str	r2, [r3, #0]
	return c;
   313d8:	230f      	movs	r3, #15
   313da:	18fb      	adds	r3, r7, r3
   313dc:	781b      	ldrb	r3, [r3, #0]
}
   313de:	0018      	movs	r0, r3
   313e0:	46bd      	mov	sp, r7
   313e2:	b004      	add	sp, #16
   313e4:	bd80      	pop	{r7, pc}

000313e6 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   313e6:	b580      	push	{r7, lr}
   313e8:	b082      	sub	sp, #8
   313ea:	af00      	add	r7, sp, #0
   313ec:	6078      	str	r0, [r7, #4]
   313ee:	000a      	movs	r2, r1
   313f0:	1cfb      	adds	r3, r7, #3
   313f2:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   313f4:	687b      	ldr	r3, [r7, #4]
   313f6:	681b      	ldr	r3, [r3, #0]
   313f8:	1cfa      	adds	r2, r7, #3
   313fa:	7812      	ldrb	r2, [r2, #0]
   313fc:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   313fe:	687b      	ldr	r3, [r7, #4]
   31400:	681b      	ldr	r3, [r3, #0]
   31402:	1c5a      	adds	r2, r3, #1
   31404:	687b      	ldr	r3, [r7, #4]
   31406:	601a      	str	r2, [r3, #0]
}
   31408:	46c0      	nop			; (mov r8, r8)
   3140a:	46bd      	mov	sp, r7
   3140c:	b002      	add	sp, #8
   3140e:	bd80      	pop	{r7, pc}

00031410 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   31410:	b580      	push	{r7, lr}
   31412:	b082      	sub	sp, #8
   31414:	af00      	add	r7, sp, #0
   31416:	6078      	str	r0, [r7, #4]
   31418:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   3141a:	687b      	ldr	r3, [r7, #4]
   3141c:	681a      	ldr	r2, [r3, #0]
   3141e:	683b      	ldr	r3, [r7, #0]
   31420:	2b00      	cmp	r3, #0
   31422:	da00      	bge.n	31426 <writeInt+0x16>
   31424:	33ff      	adds	r3, #255	; 0xff
   31426:	121b      	asrs	r3, r3, #8
   31428:	b2db      	uxtb	r3, r3
   3142a:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   3142c:	687b      	ldr	r3, [r7, #4]
   3142e:	681b      	ldr	r3, [r3, #0]
   31430:	1c5a      	adds	r2, r3, #1
   31432:	687b      	ldr	r3, [r7, #4]
   31434:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   31436:	687b      	ldr	r3, [r7, #4]
   31438:	681a      	ldr	r2, [r3, #0]
   3143a:	683b      	ldr	r3, [r7, #0]
   3143c:	4908      	ldr	r1, [pc, #32]	; (31460 <writeInt+0x50>)
   3143e:	400b      	ands	r3, r1
   31440:	d503      	bpl.n	3144a <writeInt+0x3a>
   31442:	3b01      	subs	r3, #1
   31444:	4907      	ldr	r1, [pc, #28]	; (31464 <writeInt+0x54>)
   31446:	430b      	orrs	r3, r1
   31448:	3301      	adds	r3, #1
   3144a:	b2db      	uxtb	r3, r3
   3144c:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   3144e:	687b      	ldr	r3, [r7, #4]
   31450:	681b      	ldr	r3, [r3, #0]
   31452:	1c5a      	adds	r2, r3, #1
   31454:	687b      	ldr	r3, [r7, #4]
   31456:	601a      	str	r2, [r3, #0]
}
   31458:	46c0      	nop			; (mov r8, r8)
   3145a:	46bd      	mov	sp, r7
   3145c:	b002      	add	sp, #8
   3145e:	bd80      	pop	{r7, pc}
   31460:	800000ff 	.word	0x800000ff
   31464:	ffffff00 	.word	0xffffff00

00031468 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   31468:	b580      	push	{r7, lr}
   3146a:	b084      	sub	sp, #16
   3146c:	af00      	add	r7, sp, #0
   3146e:	6078      	str	r0, [r7, #4]
   31470:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   31472:	683b      	ldr	r3, [r7, #0]
   31474:	0018      	movs	r0, r3
   31476:	4b0d      	ldr	r3, [pc, #52]	; (314ac <writeCString+0x44>)
   31478:	4798      	blx	r3
   3147a:	0003      	movs	r3, r0
   3147c:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   3147e:	68fa      	ldr	r2, [r7, #12]
   31480:	687b      	ldr	r3, [r7, #4]
   31482:	0011      	movs	r1, r2
   31484:	0018      	movs	r0, r3
   31486:	4b0a      	ldr	r3, [pc, #40]	; (314b0 <writeCString+0x48>)
   31488:	4798      	blx	r3
	memcpy(*pptr, string, len);
   3148a:	687b      	ldr	r3, [r7, #4]
   3148c:	681b      	ldr	r3, [r3, #0]
   3148e:	68fa      	ldr	r2, [r7, #12]
   31490:	6839      	ldr	r1, [r7, #0]
   31492:	0018      	movs	r0, r3
   31494:	4b07      	ldr	r3, [pc, #28]	; (314b4 <writeCString+0x4c>)
   31496:	4798      	blx	r3
	*pptr += len;
   31498:	687b      	ldr	r3, [r7, #4]
   3149a:	681a      	ldr	r2, [r3, #0]
   3149c:	68fb      	ldr	r3, [r7, #12]
   3149e:	18d2      	adds	r2, r2, r3
   314a0:	687b      	ldr	r3, [r7, #4]
   314a2:	601a      	str	r2, [r3, #0]
}
   314a4:	46c0      	nop			; (mov r8, r8)
   314a6:	46bd      	mov	sp, r7
   314a8:	b004      	add	sp, #16
   314aa:	bd80      	pop	{r7, pc}
   314ac:	000367f7 	.word	0x000367f7
   314b0:	00031411 	.word	0x00031411
   314b4:	00036409 	.word	0x00036409

000314b8 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   314b8:	b580      	push	{r7, lr}
   314ba:	b084      	sub	sp, #16
   314bc:	af00      	add	r7, sp, #0
   314be:	60f8      	str	r0, [r7, #12]
   314c0:	0038      	movs	r0, r7
   314c2:	6001      	str	r1, [r0, #0]
   314c4:	6042      	str	r2, [r0, #4]
   314c6:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   314c8:	003b      	movs	r3, r7
   314ca:	685b      	ldr	r3, [r3, #4]
   314cc:	2b00      	cmp	r3, #0
   314ce:	dd17      	ble.n	31500 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   314d0:	003b      	movs	r3, r7
   314d2:	685a      	ldr	r2, [r3, #4]
   314d4:	68fb      	ldr	r3, [r7, #12]
   314d6:	0011      	movs	r1, r2
   314d8:	0018      	movs	r0, r3
   314da:	4b14      	ldr	r3, [pc, #80]	; (3152c <writeMQTTString+0x74>)
   314dc:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   314de:	68fb      	ldr	r3, [r7, #12]
   314e0:	6818      	ldr	r0, [r3, #0]
   314e2:	003b      	movs	r3, r7
   314e4:	6899      	ldr	r1, [r3, #8]
   314e6:	003b      	movs	r3, r7
   314e8:	685b      	ldr	r3, [r3, #4]
   314ea:	001a      	movs	r2, r3
   314ec:	4b10      	ldr	r3, [pc, #64]	; (31530 <writeMQTTString+0x78>)
   314ee:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   314f0:	68fb      	ldr	r3, [r7, #12]
   314f2:	681a      	ldr	r2, [r3, #0]
   314f4:	003b      	movs	r3, r7
   314f6:	685b      	ldr	r3, [r3, #4]
   314f8:	18d2      	adds	r2, r2, r3
   314fa:	68fb      	ldr	r3, [r7, #12]
   314fc:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   314fe:	e010      	b.n	31522 <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   31500:	003b      	movs	r3, r7
   31502:	681b      	ldr	r3, [r3, #0]
   31504:	2b00      	cmp	r3, #0
   31506:	d007      	beq.n	31518 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   31508:	003b      	movs	r3, r7
   3150a:	681a      	ldr	r2, [r3, #0]
   3150c:	68fb      	ldr	r3, [r7, #12]
   3150e:	0011      	movs	r1, r2
   31510:	0018      	movs	r0, r3
   31512:	4b08      	ldr	r3, [pc, #32]	; (31534 <writeMQTTString+0x7c>)
   31514:	4798      	blx	r3
}
   31516:	e004      	b.n	31522 <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   31518:	68fb      	ldr	r3, [r7, #12]
   3151a:	2100      	movs	r1, #0
   3151c:	0018      	movs	r0, r3
   3151e:	4b03      	ldr	r3, [pc, #12]	; (3152c <writeMQTTString+0x74>)
   31520:	4798      	blx	r3
}
   31522:	46c0      	nop			; (mov r8, r8)
   31524:	46bd      	mov	sp, r7
   31526:	b004      	add	sp, #16
   31528:	bd80      	pop	{r7, pc}
   3152a:	46c0      	nop			; (mov r8, r8)
   3152c:	00031411 	.word	0x00031411
   31530:	00036409 	.word	0x00036409
   31534:	00031469 	.word	0x00031469

00031538 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   31538:	b580      	push	{r7, lr}
   3153a:	b086      	sub	sp, #24
   3153c:	af00      	add	r7, sp, #0
   3153e:	60f8      	str	r0, [r7, #12]
   31540:	60b9      	str	r1, [r7, #8]
   31542:	607a      	str	r2, [r7, #4]
	int rc = 0;
   31544:	2300      	movs	r3, #0
   31546:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   31548:	687a      	ldr	r2, [r7, #4]
   3154a:	68bb      	ldr	r3, [r7, #8]
   3154c:	681b      	ldr	r3, [r3, #0]
   3154e:	1ad3      	subs	r3, r2, r3
   31550:	2b01      	cmp	r3, #1
   31552:	dd1b      	ble.n	3158c <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   31554:	68bb      	ldr	r3, [r7, #8]
   31556:	0018      	movs	r0, r3
   31558:	4b10      	ldr	r3, [pc, #64]	; (3159c <readMQTTLenString+0x64>)
   3155a:	4798      	blx	r3
   3155c:	0002      	movs	r2, r0
   3155e:	68fb      	ldr	r3, [r7, #12]
   31560:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   31562:	68bb      	ldr	r3, [r7, #8]
   31564:	681a      	ldr	r2, [r3, #0]
   31566:	68fb      	ldr	r3, [r7, #12]
   31568:	685b      	ldr	r3, [r3, #4]
   3156a:	18d2      	adds	r2, r2, r3
   3156c:	687b      	ldr	r3, [r7, #4]
   3156e:	429a      	cmp	r2, r3
   31570:	d80c      	bhi.n	3158c <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   31572:	68bb      	ldr	r3, [r7, #8]
   31574:	681a      	ldr	r2, [r3, #0]
   31576:	68fb      	ldr	r3, [r7, #12]
   31578:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   3157a:	68bb      	ldr	r3, [r7, #8]
   3157c:	681a      	ldr	r2, [r3, #0]
   3157e:	68fb      	ldr	r3, [r7, #12]
   31580:	685b      	ldr	r3, [r3, #4]
   31582:	18d2      	adds	r2, r2, r3
   31584:	68bb      	ldr	r3, [r7, #8]
   31586:	601a      	str	r2, [r3, #0]
			rc = 1;
   31588:	2301      	movs	r3, #1
   3158a:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   3158c:	68fb      	ldr	r3, [r7, #12]
   3158e:	2200      	movs	r2, #0
   31590:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   31592:	697b      	ldr	r3, [r7, #20]
}
   31594:	0018      	movs	r0, r3
   31596:	46bd      	mov	sp, r7
   31598:	b006      	add	sp, #24
   3159a:	bd80      	pop	{r7, pc}
   3159c:	00031389 	.word	0x00031389

000315a0 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   315a0:	b580      	push	{r7, lr}
   315a2:	b086      	sub	sp, #24
   315a4:	af00      	add	r7, sp, #0
   315a6:	1d3b      	adds	r3, r7, #4
   315a8:	6018      	str	r0, [r3, #0]
   315aa:	6059      	str	r1, [r3, #4]
   315ac:	609a      	str	r2, [r3, #8]
	int rc = 0;
   315ae:	2300      	movs	r3, #0
   315b0:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   315b2:	1d3b      	adds	r3, r7, #4
   315b4:	681b      	ldr	r3, [r3, #0]
   315b6:	2b00      	cmp	r3, #0
   315b8:	d007      	beq.n	315ca <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   315ba:	1d3b      	adds	r3, r7, #4
   315bc:	681b      	ldr	r3, [r3, #0]
   315be:	0018      	movs	r0, r3
   315c0:	4b06      	ldr	r3, [pc, #24]	; (315dc <MQTTstrlen+0x3c>)
   315c2:	4798      	blx	r3
   315c4:	0003      	movs	r3, r0
   315c6:	617b      	str	r3, [r7, #20]
   315c8:	e002      	b.n	315d0 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   315ca:	1d3b      	adds	r3, r7, #4
   315cc:	685b      	ldr	r3, [r3, #4]
   315ce:	617b      	str	r3, [r7, #20]
	return rc;
   315d0:	697b      	ldr	r3, [r7, #20]
}
   315d2:	0018      	movs	r0, r3
   315d4:	46bd      	mov	sp, r7
   315d6:	b006      	add	sp, #24
   315d8:	bd80      	pop	{r7, pc}
   315da:	46c0      	nop			; (mov r8, r8)
   315dc:	000367f7 	.word	0x000367f7

000315e0 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   315e0:	b580      	push	{r7, lr}
   315e2:	b086      	sub	sp, #24
   315e4:	af00      	add	r7, sp, #0
   315e6:	6078      	str	r0, [r7, #4]
   315e8:	6039      	str	r1, [r7, #0]
	int alen = 0,
   315ea:	2300      	movs	r3, #0
   315ec:	617b      	str	r3, [r7, #20]
		blen = 0;
   315ee:	2300      	movs	r3, #0
   315f0:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   315f2:	687b      	ldr	r3, [r7, #4]
   315f4:	681b      	ldr	r3, [r3, #0]
   315f6:	2b00      	cmp	r3, #0
   315f8:	d00a      	beq.n	31610 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   315fa:	687b      	ldr	r3, [r7, #4]
   315fc:	681b      	ldr	r3, [r3, #0]
   315fe:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   31600:	687b      	ldr	r3, [r7, #4]
   31602:	681b      	ldr	r3, [r3, #0]
   31604:	0018      	movs	r0, r3
   31606:	4b12      	ldr	r3, [pc, #72]	; (31650 <MQTTPacket_equals+0x70>)
   31608:	4798      	blx	r3
   3160a:	0003      	movs	r3, r0
   3160c:	617b      	str	r3, [r7, #20]
   3160e:	e005      	b.n	3161c <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   31610:	687b      	ldr	r3, [r7, #4]
   31612:	689b      	ldr	r3, [r3, #8]
   31614:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   31616:	687b      	ldr	r3, [r7, #4]
   31618:	685b      	ldr	r3, [r3, #4]
   3161a:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   3161c:	683b      	ldr	r3, [r7, #0]
   3161e:	0018      	movs	r0, r3
   31620:	4b0b      	ldr	r3, [pc, #44]	; (31650 <MQTTPacket_equals+0x70>)
   31622:	4798      	blx	r3
   31624:	0003      	movs	r3, r0
   31626:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   31628:	697a      	ldr	r2, [r7, #20]
   3162a:	68fb      	ldr	r3, [r7, #12]
   3162c:	429a      	cmp	r2, r3
   3162e:	d109      	bne.n	31644 <MQTTPacket_equals+0x64>
   31630:	697a      	ldr	r2, [r7, #20]
   31632:	6839      	ldr	r1, [r7, #0]
   31634:	693b      	ldr	r3, [r7, #16]
   31636:	0018      	movs	r0, r3
   31638:	4b06      	ldr	r3, [pc, #24]	; (31654 <MQTTPacket_equals+0x74>)
   3163a:	4798      	blx	r3
   3163c:	1e03      	subs	r3, r0, #0
   3163e:	d101      	bne.n	31644 <MQTTPacket_equals+0x64>
   31640:	2301      	movs	r3, #1
   31642:	e000      	b.n	31646 <MQTTPacket_equals+0x66>
   31644:	2300      	movs	r3, #0
}
   31646:	0018      	movs	r0, r3
   31648:	46bd      	mov	sp, r7
   3164a:	b006      	add	sp, #24
   3164c:	bd80      	pop	{r7, pc}
   3164e:	46c0      	nop			; (mov r8, r8)
   31650:	000367f7 	.word	0x000367f7
   31654:	00036805 	.word	0x00036805

00031658 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   31658:	b580      	push	{r7, lr}
   3165a:	b086      	sub	sp, #24
   3165c:	af00      	add	r7, sp, #0
   3165e:	60f8      	str	r0, [r7, #12]
   31660:	0038      	movs	r0, r7
   31662:	6001      	str	r1, [r0, #0]
   31664:	6042      	str	r2, [r0, #4]
   31666:	6083      	str	r3, [r0, #8]
	int len = 0;
   31668:	2300      	movs	r3, #0
   3166a:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   3166c:	003b      	movs	r3, r7
   3166e:	6818      	ldr	r0, [r3, #0]
   31670:	6859      	ldr	r1, [r3, #4]
   31672:	689a      	ldr	r2, [r3, #8]
   31674:	4b09      	ldr	r3, [pc, #36]	; (3169c <MQTTSerialize_publishLength+0x44>)
   31676:	4798      	blx	r3
   31678:	0003      	movs	r3, r0
   3167a:	1c9a      	adds	r2, r3, #2
   3167c:	6a3b      	ldr	r3, [r7, #32]
   3167e:	18d3      	adds	r3, r2, r3
   31680:	697a      	ldr	r2, [r7, #20]
   31682:	18d3      	adds	r3, r2, r3
   31684:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   31686:	68fb      	ldr	r3, [r7, #12]
   31688:	2b00      	cmp	r3, #0
   3168a:	dd02      	ble.n	31692 <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   3168c:	697b      	ldr	r3, [r7, #20]
   3168e:	3302      	adds	r3, #2
   31690:	617b      	str	r3, [r7, #20]
	return len;
   31692:	697b      	ldr	r3, [r7, #20]
}
   31694:	0018      	movs	r0, r3
   31696:	46bd      	mov	sp, r7
   31698:	b006      	add	sp, #24
   3169a:	bd80      	pop	{r7, pc}
   3169c:	000315a1 	.word	0x000315a1

000316a0 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   316a0:	b590      	push	{r4, r7, lr}
   316a2:	b08b      	sub	sp, #44	; 0x2c
   316a4:	af02      	add	r7, sp, #8
   316a6:	60f8      	str	r0, [r7, #12]
   316a8:	60b9      	str	r1, [r7, #8]
   316aa:	603b      	str	r3, [r7, #0]
   316ac:	1dfb      	adds	r3, r7, #7
   316ae:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   316b0:	68fb      	ldr	r3, [r7, #12]
   316b2:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   316b4:	2300      	movs	r3, #0
   316b6:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   316b8:	2300      	movs	r3, #0
   316ba:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   316bc:	2300      	movs	r3, #0
   316be:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   316c0:	2308      	movs	r3, #8
   316c2:	2230      	movs	r2, #48	; 0x30
   316c4:	4694      	mov	ip, r2
   316c6:	44bc      	add	ip, r7
   316c8:	4463      	add	r3, ip
   316ca:	6838      	ldr	r0, [r7, #0]
   316cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
   316ce:	9200      	str	r2, [sp, #0]
   316d0:	6819      	ldr	r1, [r3, #0]
   316d2:	685a      	ldr	r2, [r3, #4]
   316d4:	689b      	ldr	r3, [r3, #8]
   316d6:	4c46      	ldr	r4, [pc, #280]	; (317f0 <MQTTSerialize_publish+0x150>)
   316d8:	47a0      	blx	r4
   316da:	0003      	movs	r3, r0
   316dc:	61bb      	str	r3, [r7, #24]
   316de:	69bb      	ldr	r3, [r7, #24]
   316e0:	0018      	movs	r0, r3
   316e2:	4b44      	ldr	r3, [pc, #272]	; (317f4 <MQTTSerialize_publish+0x154>)
   316e4:	4798      	blx	r3
   316e6:	0002      	movs	r2, r0
   316e8:	68bb      	ldr	r3, [r7, #8]
   316ea:	429a      	cmp	r2, r3
   316ec:	dd03      	ble.n	316f6 <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   316ee:	2302      	movs	r3, #2
   316f0:	425b      	negs	r3, r3
   316f2:	61fb      	str	r3, [r7, #28]
		goto exit;
   316f4:	e077      	b.n	317e6 <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   316f6:	2310      	movs	r3, #16
   316f8:	18fb      	adds	r3, r7, r3
   316fa:	781a      	ldrb	r2, [r3, #0]
   316fc:	210f      	movs	r1, #15
   316fe:	400a      	ands	r2, r1
   31700:	1c11      	adds	r1, r2, #0
   31702:	2230      	movs	r2, #48	; 0x30
   31704:	430a      	orrs	r2, r1
   31706:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   31708:	1dfb      	adds	r3, r7, #7
   3170a:	781b      	ldrb	r3, [r3, #0]
   3170c:	2201      	movs	r2, #1
   3170e:	4013      	ands	r3, r2
   31710:	b2da      	uxtb	r2, r3
   31712:	2310      	movs	r3, #16
   31714:	18fb      	adds	r3, r7, r3
   31716:	2101      	movs	r1, #1
   31718:	400a      	ands	r2, r1
   3171a:	00d0      	lsls	r0, r2, #3
   3171c:	781a      	ldrb	r2, [r3, #0]
   3171e:	2108      	movs	r1, #8
   31720:	438a      	bics	r2, r1
   31722:	1c11      	adds	r1, r2, #0
   31724:	1c02      	adds	r2, r0, #0
   31726:	430a      	orrs	r2, r1
   31728:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   3172a:	683b      	ldr	r3, [r7, #0]
   3172c:	b2db      	uxtb	r3, r3
   3172e:	1c1a      	adds	r2, r3, #0
   31730:	2303      	movs	r3, #3
   31732:	4013      	ands	r3, r2
   31734:	b2da      	uxtb	r2, r3
   31736:	2310      	movs	r3, #16
   31738:	18fb      	adds	r3, r7, r3
   3173a:	2103      	movs	r1, #3
   3173c:	400a      	ands	r2, r1
   3173e:	1890      	adds	r0, r2, r2
   31740:	781a      	ldrb	r2, [r3, #0]
   31742:	2106      	movs	r1, #6
   31744:	438a      	bics	r2, r1
   31746:	1c11      	adds	r1, r2, #0
   31748:	1c02      	adds	r2, r0, #0
   3174a:	430a      	orrs	r2, r1
   3174c:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   3174e:	2330      	movs	r3, #48	; 0x30
   31750:	18fb      	adds	r3, r7, r3
   31752:	781b      	ldrb	r3, [r3, #0]
   31754:	2201      	movs	r2, #1
   31756:	4013      	ands	r3, r2
   31758:	b2da      	uxtb	r2, r3
   3175a:	2310      	movs	r3, #16
   3175c:	18fb      	adds	r3, r7, r3
   3175e:	2101      	movs	r1, #1
   31760:	400a      	ands	r2, r1
   31762:	0010      	movs	r0, r2
   31764:	781a      	ldrb	r2, [r3, #0]
   31766:	2101      	movs	r1, #1
   31768:	438a      	bics	r2, r1
   3176a:	1c11      	adds	r1, r2, #0
   3176c:	1c02      	adds	r2, r0, #0
   3176e:	430a      	orrs	r2, r1
   31770:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   31772:	2310      	movs	r3, #16
   31774:	18fb      	adds	r3, r7, r3
   31776:	781a      	ldrb	r2, [r3, #0]
   31778:	2314      	movs	r3, #20
   3177a:	18fb      	adds	r3, r7, r3
   3177c:	0011      	movs	r1, r2
   3177e:	0018      	movs	r0, r3
   31780:	4b1d      	ldr	r3, [pc, #116]	; (317f8 <MQTTSerialize_publish+0x158>)
   31782:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   31784:	697b      	ldr	r3, [r7, #20]
   31786:	69ba      	ldr	r2, [r7, #24]
   31788:	0011      	movs	r1, r2
   3178a:	0018      	movs	r0, r3
   3178c:	4b1b      	ldr	r3, [pc, #108]	; (317fc <MQTTSerialize_publish+0x15c>)
   3178e:	4798      	blx	r3
   31790:	0002      	movs	r2, r0
   31792:	697b      	ldr	r3, [r7, #20]
   31794:	189b      	adds	r3, r3, r2
   31796:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   31798:	2308      	movs	r3, #8
   3179a:	2230      	movs	r2, #48	; 0x30
   3179c:	4694      	mov	ip, r2
   3179e:	44bc      	add	ip, r7
   317a0:	4463      	add	r3, ip
   317a2:	2214      	movs	r2, #20
   317a4:	18b8      	adds	r0, r7, r2
   317a6:	6819      	ldr	r1, [r3, #0]
   317a8:	685a      	ldr	r2, [r3, #4]
   317aa:	689b      	ldr	r3, [r3, #8]
   317ac:	4c14      	ldr	r4, [pc, #80]	; (31800 <MQTTSerialize_publish+0x160>)
   317ae:	47a0      	blx	r4

	if (qos > 0)
   317b0:	683b      	ldr	r3, [r7, #0]
   317b2:	2b00      	cmp	r3, #0
   317b4:	dd08      	ble.n	317c8 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   317b6:	2334      	movs	r3, #52	; 0x34
   317b8:	18fb      	adds	r3, r7, r3
   317ba:	881a      	ldrh	r2, [r3, #0]
   317bc:	2314      	movs	r3, #20
   317be:	18fb      	adds	r3, r7, r3
   317c0:	0011      	movs	r1, r2
   317c2:	0018      	movs	r0, r3
   317c4:	4b0f      	ldr	r3, [pc, #60]	; (31804 <MQTTSerialize_publish+0x164>)
   317c6:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   317c8:	697b      	ldr	r3, [r7, #20]
   317ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
   317cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
   317ce:	0018      	movs	r0, r3
   317d0:	4b0d      	ldr	r3, [pc, #52]	; (31808 <MQTTSerialize_publish+0x168>)
   317d2:	4798      	blx	r3
	ptr += payloadlen;
   317d4:	697a      	ldr	r2, [r7, #20]
   317d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   317d8:	18d3      	adds	r3, r2, r3
   317da:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   317dc:	697b      	ldr	r3, [r7, #20]
   317de:	001a      	movs	r2, r3
   317e0:	68fb      	ldr	r3, [r7, #12]
   317e2:	1ad3      	subs	r3, r2, r3
   317e4:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   317e6:	69fb      	ldr	r3, [r7, #28]
}
   317e8:	0018      	movs	r0, r3
   317ea:	46bd      	mov	sp, r7
   317ec:	b009      	add	sp, #36	; 0x24
   317ee:	bd90      	pop	{r4, r7, pc}
   317f0:	00031659 	.word	0x00031659
   317f4:	000312c5 	.word	0x000312c5
   317f8:	000313e7 	.word	0x000313e7
   317fc:	000311cd 	.word	0x000311cd
   31800:	000314b9 	.word	0x000314b9
   31804:	00031411 	.word	0x00031411
   31808:	00036409 	.word	0x00036409

0003180c <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   3180c:	b580      	push	{r7, lr}
   3180e:	b088      	sub	sp, #32
   31810:	af00      	add	r7, sp, #0
   31812:	60f8      	str	r0, [r7, #12]
   31814:	60b9      	str	r1, [r7, #8]
   31816:	0019      	movs	r1, r3
   31818:	1dfb      	adds	r3, r7, #7
   3181a:	701a      	strb	r2, [r3, #0]
   3181c:	1dbb      	adds	r3, r7, #6
   3181e:	1c0a      	adds	r2, r1, #0
   31820:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   31822:	2300      	movs	r3, #0
   31824:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   31826:	2300      	movs	r3, #0
   31828:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   3182a:	68fb      	ldr	r3, [r7, #12]
   3182c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   3182e:	68bb      	ldr	r3, [r7, #8]
   31830:	2b03      	cmp	r3, #3
   31832:	dc03      	bgt.n	3183c <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   31834:	2302      	movs	r3, #2
   31836:	425b      	negs	r3, r3
   31838:	61fb      	str	r3, [r7, #28]
		goto exit;
   3183a:	e055      	b.n	318e8 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   3183c:	1dfb      	adds	r3, r7, #7
   3183e:	781b      	ldrb	r3, [r3, #0]
   31840:	220f      	movs	r2, #15
   31842:	4013      	ands	r3, r2
   31844:	b2da      	uxtb	r2, r3
   31846:	2318      	movs	r3, #24
   31848:	18fb      	adds	r3, r7, r3
   3184a:	0110      	lsls	r0, r2, #4
   3184c:	781a      	ldrb	r2, [r3, #0]
   3184e:	210f      	movs	r1, #15
   31850:	400a      	ands	r2, r1
   31852:	1c11      	adds	r1, r2, #0
   31854:	1c02      	adds	r2, r0, #0
   31856:	430a      	orrs	r2, r1
   31858:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   3185a:	1dbb      	adds	r3, r7, #6
   3185c:	781b      	ldrb	r3, [r3, #0]
   3185e:	2201      	movs	r2, #1
   31860:	4013      	ands	r3, r2
   31862:	b2da      	uxtb	r2, r3
   31864:	2318      	movs	r3, #24
   31866:	18fb      	adds	r3, r7, r3
   31868:	2101      	movs	r1, #1
   3186a:	400a      	ands	r2, r1
   3186c:	00d0      	lsls	r0, r2, #3
   3186e:	781a      	ldrb	r2, [r3, #0]
   31870:	2108      	movs	r1, #8
   31872:	438a      	bics	r2, r1
   31874:	1c11      	adds	r1, r2, #0
   31876:	1c02      	adds	r2, r0, #0
   31878:	430a      	orrs	r2, r1
   3187a:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   3187c:	1dfb      	adds	r3, r7, #7
   3187e:	781b      	ldrb	r3, [r3, #0]
   31880:	3b06      	subs	r3, #6
   31882:	425a      	negs	r2, r3
   31884:	4153      	adcs	r3, r2
   31886:	b2db      	uxtb	r3, r3
   31888:	1c1a      	adds	r2, r3, #0
   3188a:	2303      	movs	r3, #3
   3188c:	4013      	ands	r3, r2
   3188e:	b2da      	uxtb	r2, r3
   31890:	2318      	movs	r3, #24
   31892:	18fb      	adds	r3, r7, r3
   31894:	2103      	movs	r1, #3
   31896:	400a      	ands	r2, r1
   31898:	1890      	adds	r0, r2, r2
   3189a:	781a      	ldrb	r2, [r3, #0]
   3189c:	2106      	movs	r1, #6
   3189e:	438a      	bics	r2, r1
   318a0:	1c11      	adds	r1, r2, #0
   318a2:	1c02      	adds	r2, r0, #0
   318a4:	430a      	orrs	r2, r1
   318a6:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   318a8:	2318      	movs	r3, #24
   318aa:	18fb      	adds	r3, r7, r3
   318ac:	781a      	ldrb	r2, [r3, #0]
   318ae:	2314      	movs	r3, #20
   318b0:	18fb      	adds	r3, r7, r3
   318b2:	0011      	movs	r1, r2
   318b4:	0018      	movs	r0, r3
   318b6:	4b0f      	ldr	r3, [pc, #60]	; (318f4 <MQTTSerialize_ack+0xe8>)
   318b8:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   318ba:	697b      	ldr	r3, [r7, #20]
   318bc:	2102      	movs	r1, #2
   318be:	0018      	movs	r0, r3
   318c0:	4b0d      	ldr	r3, [pc, #52]	; (318f8 <MQTTSerialize_ack+0xec>)
   318c2:	4798      	blx	r3
   318c4:	0002      	movs	r2, r0
   318c6:	697b      	ldr	r3, [r7, #20]
   318c8:	189b      	adds	r3, r3, r2
   318ca:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   318cc:	2328      	movs	r3, #40	; 0x28
   318ce:	18fb      	adds	r3, r7, r3
   318d0:	881a      	ldrh	r2, [r3, #0]
   318d2:	2314      	movs	r3, #20
   318d4:	18fb      	adds	r3, r7, r3
   318d6:	0011      	movs	r1, r2
   318d8:	0018      	movs	r0, r3
   318da:	4b08      	ldr	r3, [pc, #32]	; (318fc <MQTTSerialize_ack+0xf0>)
   318dc:	4798      	blx	r3
	rc = ptr - buf;
   318de:	697b      	ldr	r3, [r7, #20]
   318e0:	001a      	movs	r2, r3
   318e2:	68fb      	ldr	r3, [r7, #12]
   318e4:	1ad3      	subs	r3, r2, r3
   318e6:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   318e8:	69fb      	ldr	r3, [r7, #28]
}
   318ea:	0018      	movs	r0, r3
   318ec:	46bd      	mov	sp, r7
   318ee:	b008      	add	sp, #32
   318f0:	bd80      	pop	{r7, pc}
   318f2:	46c0      	nop			; (mov r8, r8)
   318f4:	000313e7 	.word	0x000313e7
   318f8:	000311cd 	.word	0x000311cd
   318fc:	00031411 	.word	0x00031411

00031900 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   31900:	b580      	push	{r7, lr}
   31902:	b084      	sub	sp, #16
   31904:	af00      	add	r7, sp, #0
   31906:	6078      	str	r0, [r7, #4]
   31908:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   3190a:	2302      	movs	r3, #2
   3190c:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   3190e:	2300      	movs	r3, #0
   31910:	60fb      	str	r3, [r7, #12]
   31912:	e014      	b.n	3193e <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   31914:	68fa      	ldr	r2, [r7, #12]
   31916:	0013      	movs	r3, r2
   31918:	005b      	lsls	r3, r3, #1
   3191a:	189b      	adds	r3, r3, r2
   3191c:	009b      	lsls	r3, r3, #2
   3191e:	001a      	movs	r2, r3
   31920:	683b      	ldr	r3, [r7, #0]
   31922:	189b      	adds	r3, r3, r2
   31924:	6818      	ldr	r0, [r3, #0]
   31926:	6859      	ldr	r1, [r3, #4]
   31928:	689a      	ldr	r2, [r3, #8]
   3192a:	4b09      	ldr	r3, [pc, #36]	; (31950 <MQTTSerialize_subscribeLength+0x50>)
   3192c:	4798      	blx	r3
   3192e:	0003      	movs	r3, r0
   31930:	3303      	adds	r3, #3
   31932:	68ba      	ldr	r2, [r7, #8]
   31934:	18d3      	adds	r3, r2, r3
   31936:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   31938:	68fb      	ldr	r3, [r7, #12]
   3193a:	3301      	adds	r3, #1
   3193c:	60fb      	str	r3, [r7, #12]
   3193e:	68fa      	ldr	r2, [r7, #12]
   31940:	687b      	ldr	r3, [r7, #4]
   31942:	429a      	cmp	r2, r3
   31944:	dbe6      	blt.n	31914 <MQTTSerialize_subscribeLength+0x14>
	return len;
   31946:	68bb      	ldr	r3, [r7, #8]
}
   31948:	0018      	movs	r0, r3
   3194a:	46bd      	mov	sp, r7
   3194c:	b004      	add	sp, #16
   3194e:	bd80      	pop	{r7, pc}
   31950:	000315a1 	.word	0x000315a1

00031954 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   31954:	b590      	push	{r4, r7, lr}
   31956:	b08b      	sub	sp, #44	; 0x2c
   31958:	af00      	add	r7, sp, #0
   3195a:	60f8      	str	r0, [r7, #12]
   3195c:	60b9      	str	r1, [r7, #8]
   3195e:	0019      	movs	r1, r3
   31960:	1dfb      	adds	r3, r7, #7
   31962:	701a      	strb	r2, [r3, #0]
   31964:	1d3b      	adds	r3, r7, #4
   31966:	1c0a      	adds	r2, r1, #0
   31968:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   3196a:	68fb      	ldr	r3, [r7, #12]
   3196c:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   3196e:	2300      	movs	r3, #0
   31970:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   31972:	2300      	movs	r3, #0
   31974:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   31976:	2300      	movs	r3, #0
   31978:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   3197a:	2300      	movs	r3, #0
   3197c:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   3197e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   31980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   31982:	0011      	movs	r1, r2
   31984:	0018      	movs	r0, r3
   31986:	4b41      	ldr	r3, [pc, #260]	; (31a8c <MQTTSerialize_subscribe+0x138>)
   31988:	4798      	blx	r3
   3198a:	0003      	movs	r3, r0
   3198c:	61fb      	str	r3, [r7, #28]
   3198e:	69fb      	ldr	r3, [r7, #28]
   31990:	0018      	movs	r0, r3
   31992:	4b3f      	ldr	r3, [pc, #252]	; (31a90 <MQTTSerialize_subscribe+0x13c>)
   31994:	4798      	blx	r3
   31996:	0002      	movs	r2, r0
   31998:	68bb      	ldr	r3, [r7, #8]
   3199a:	429a      	cmp	r2, r3
   3199c:	dd03      	ble.n	319a6 <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   3199e:	2302      	movs	r3, #2
   319a0:	425b      	negs	r3, r3
   319a2:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   319a4:	e06c      	b.n	31a80 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   319a6:	2314      	movs	r3, #20
   319a8:	18fb      	adds	r3, r7, r3
   319aa:	2200      	movs	r2, #0
   319ac:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   319ae:	2314      	movs	r3, #20
   319b0:	18fb      	adds	r3, r7, r3
   319b2:	781a      	ldrb	r2, [r3, #0]
   319b4:	210f      	movs	r1, #15
   319b6:	400a      	ands	r2, r1
   319b8:	1c11      	adds	r1, r2, #0
   319ba:	2280      	movs	r2, #128	; 0x80
   319bc:	4252      	negs	r2, r2
   319be:	430a      	orrs	r2, r1
   319c0:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   319c2:	1dfb      	adds	r3, r7, #7
   319c4:	781b      	ldrb	r3, [r3, #0]
   319c6:	2201      	movs	r2, #1
   319c8:	4013      	ands	r3, r2
   319ca:	b2da      	uxtb	r2, r3
   319cc:	2314      	movs	r3, #20
   319ce:	18fb      	adds	r3, r7, r3
   319d0:	2101      	movs	r1, #1
   319d2:	400a      	ands	r2, r1
   319d4:	00d0      	lsls	r0, r2, #3
   319d6:	781a      	ldrb	r2, [r3, #0]
   319d8:	2108      	movs	r1, #8
   319da:	438a      	bics	r2, r1
   319dc:	1c11      	adds	r1, r2, #0
   319de:	1c02      	adds	r2, r0, #0
   319e0:	430a      	orrs	r2, r1
   319e2:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   319e4:	2314      	movs	r3, #20
   319e6:	18fb      	adds	r3, r7, r3
   319e8:	781a      	ldrb	r2, [r3, #0]
   319ea:	2106      	movs	r1, #6
   319ec:	438a      	bics	r2, r1
   319ee:	1c11      	adds	r1, r2, #0
   319f0:	2202      	movs	r2, #2
   319f2:	430a      	orrs	r2, r1
   319f4:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   319f6:	2314      	movs	r3, #20
   319f8:	18fb      	adds	r3, r7, r3
   319fa:	781a      	ldrb	r2, [r3, #0]
   319fc:	2318      	movs	r3, #24
   319fe:	18fb      	adds	r3, r7, r3
   31a00:	0011      	movs	r1, r2
   31a02:	0018      	movs	r0, r3
   31a04:	4b23      	ldr	r3, [pc, #140]	; (31a94 <MQTTSerialize_subscribe+0x140>)
   31a06:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   31a08:	69bb      	ldr	r3, [r7, #24]
   31a0a:	69fa      	ldr	r2, [r7, #28]
   31a0c:	0011      	movs	r1, r2
   31a0e:	0018      	movs	r0, r3
   31a10:	4b21      	ldr	r3, [pc, #132]	; (31a98 <MQTTSerialize_subscribe+0x144>)
   31a12:	4798      	blx	r3
   31a14:	0002      	movs	r2, r0
   31a16:	69bb      	ldr	r3, [r7, #24]
   31a18:	189b      	adds	r3, r3, r2
   31a1a:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   31a1c:	1d3b      	adds	r3, r7, #4
   31a1e:	881a      	ldrh	r2, [r3, #0]
   31a20:	2318      	movs	r3, #24
   31a22:	18fb      	adds	r3, r7, r3
   31a24:	0011      	movs	r1, r2
   31a26:	0018      	movs	r0, r3
   31a28:	4b1c      	ldr	r3, [pc, #112]	; (31a9c <MQTTSerialize_subscribe+0x148>)
   31a2a:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   31a2c:	2300      	movs	r3, #0
   31a2e:	623b      	str	r3, [r7, #32]
   31a30:	e01d      	b.n	31a6e <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   31a32:	6a3a      	ldr	r2, [r7, #32]
   31a34:	0013      	movs	r3, r2
   31a36:	005b      	lsls	r3, r3, #1
   31a38:	189b      	adds	r3, r3, r2
   31a3a:	009b      	lsls	r3, r3, #2
   31a3c:	001a      	movs	r2, r3
   31a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   31a40:	189b      	adds	r3, r3, r2
   31a42:	2218      	movs	r2, #24
   31a44:	18b8      	adds	r0, r7, r2
   31a46:	6819      	ldr	r1, [r3, #0]
   31a48:	685a      	ldr	r2, [r3, #4]
   31a4a:	689b      	ldr	r3, [r3, #8]
   31a4c:	4c14      	ldr	r4, [pc, #80]	; (31aa0 <MQTTSerialize_subscribe+0x14c>)
   31a4e:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   31a50:	6a3b      	ldr	r3, [r7, #32]
   31a52:	009b      	lsls	r3, r3, #2
   31a54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   31a56:	18d3      	adds	r3, r2, r3
   31a58:	681b      	ldr	r3, [r3, #0]
   31a5a:	b2da      	uxtb	r2, r3
   31a5c:	2318      	movs	r3, #24
   31a5e:	18fb      	adds	r3, r7, r3
   31a60:	0011      	movs	r1, r2
   31a62:	0018      	movs	r0, r3
   31a64:	4b0b      	ldr	r3, [pc, #44]	; (31a94 <MQTTSerialize_subscribe+0x140>)
   31a66:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   31a68:	6a3b      	ldr	r3, [r7, #32]
   31a6a:	3301      	adds	r3, #1
   31a6c:	623b      	str	r3, [r7, #32]
   31a6e:	6a3a      	ldr	r2, [r7, #32]
   31a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   31a72:	429a      	cmp	r2, r3
   31a74:	dbdd      	blt.n	31a32 <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   31a76:	69bb      	ldr	r3, [r7, #24]
   31a78:	001a      	movs	r2, r3
   31a7a:	68fb      	ldr	r3, [r7, #12]
   31a7c:	1ad3      	subs	r3, r2, r3
   31a7e:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   31a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   31a82:	0018      	movs	r0, r3
   31a84:	46bd      	mov	sp, r7
   31a86:	b00b      	add	sp, #44	; 0x2c
   31a88:	bd90      	pop	{r4, r7, pc}
   31a8a:	46c0      	nop			; (mov r8, r8)
   31a8c:	00031901 	.word	0x00031901
   31a90:	000312c5 	.word	0x000312c5
   31a94:	000313e7 	.word	0x000313e7
   31a98:	000311cd 	.word	0x000311cd
   31a9c:	00031411 	.word	0x00031411
   31aa0:	000314b9 	.word	0x000314b9

00031aa4 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   31aa4:	b590      	push	{r4, r7, lr}
   31aa6:	b08b      	sub	sp, #44	; 0x2c
   31aa8:	af00      	add	r7, sp, #0
   31aaa:	60f8      	str	r0, [r7, #12]
   31aac:	60b9      	str	r1, [r7, #8]
   31aae:	607a      	str	r2, [r7, #4]
   31ab0:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   31ab2:	2300      	movs	r3, #0
   31ab4:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   31ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   31ab8:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   31aba:	2300      	movs	r3, #0
   31abc:	623b      	str	r3, [r7, #32]
	int rc = 0;
   31abe:	2300      	movs	r3, #0
   31ac0:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   31ac2:	2318      	movs	r3, #24
   31ac4:	18fb      	adds	r3, r7, r3
   31ac6:	0018      	movs	r0, r3
   31ac8:	4b2c      	ldr	r3, [pc, #176]	; (31b7c <MQTTDeserialize_suback+0xd8>)
   31aca:	4798      	blx	r3
   31acc:	0003      	movs	r3, r0
   31ace:	001a      	movs	r2, r3
   31ad0:	231c      	movs	r3, #28
   31ad2:	18fb      	adds	r3, r7, r3
   31ad4:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   31ad6:	231c      	movs	r3, #28
   31ad8:	18fb      	adds	r3, r7, r3
   31ada:	781b      	ldrb	r3, [r3, #0]
   31adc:	220f      	movs	r2, #15
   31ade:	4393      	bics	r3, r2
   31ae0:	b2db      	uxtb	r3, r3
   31ae2:	2b90      	cmp	r3, #144	; 0x90
   31ae4:	d142      	bne.n	31b6c <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   31ae6:	69bb      	ldr	r3, [r7, #24]
   31ae8:	2214      	movs	r2, #20
   31aea:	18ba      	adds	r2, r7, r2
   31aec:	0011      	movs	r1, r2
   31aee:	0018      	movs	r0, r3
   31af0:	4b23      	ldr	r3, [pc, #140]	; (31b80 <MQTTDeserialize_suback+0xdc>)
   31af2:	4798      	blx	r3
   31af4:	0003      	movs	r3, r0
   31af6:	627b      	str	r3, [r7, #36]	; 0x24
   31af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   31afa:	69bb      	ldr	r3, [r7, #24]
   31afc:	189b      	adds	r3, r3, r2
   31afe:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   31b00:	69bb      	ldr	r3, [r7, #24]
   31b02:	697a      	ldr	r2, [r7, #20]
   31b04:	189b      	adds	r3, r3, r2
   31b06:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   31b08:	6a3b      	ldr	r3, [r7, #32]
   31b0a:	69ba      	ldr	r2, [r7, #24]
   31b0c:	1a9b      	subs	r3, r3, r2
   31b0e:	2b01      	cmp	r3, #1
   31b10:	dd2e      	ble.n	31b70 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   31b12:	2318      	movs	r3, #24
   31b14:	18fb      	adds	r3, r7, r3
   31b16:	0018      	movs	r0, r3
   31b18:	4b1a      	ldr	r3, [pc, #104]	; (31b84 <MQTTDeserialize_suback+0xe0>)
   31b1a:	4798      	blx	r3
   31b1c:	0003      	movs	r3, r0
   31b1e:	b29a      	uxth	r2, r3
   31b20:	68fb      	ldr	r3, [r7, #12]
   31b22:	801a      	strh	r2, [r3, #0]

	*count = 0;
   31b24:	687b      	ldr	r3, [r7, #4]
   31b26:	2200      	movs	r2, #0
   31b28:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   31b2a:	e018      	b.n	31b5e <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   31b2c:	687b      	ldr	r3, [r7, #4]
   31b2e:	681a      	ldr	r2, [r3, #0]
   31b30:	68bb      	ldr	r3, [r7, #8]
   31b32:	429a      	cmp	r2, r3
   31b34:	dd03      	ble.n	31b3e <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   31b36:	2301      	movs	r3, #1
   31b38:	425b      	negs	r3, r3
   31b3a:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   31b3c:	e019      	b.n	31b72 <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   31b3e:	687b      	ldr	r3, [r7, #4]
   31b40:	681a      	ldr	r2, [r3, #0]
   31b42:	1c51      	adds	r1, r2, #1
   31b44:	687b      	ldr	r3, [r7, #4]
   31b46:	6019      	str	r1, [r3, #0]
   31b48:	0013      	movs	r3, r2
   31b4a:	009b      	lsls	r3, r3, #2
   31b4c:	683a      	ldr	r2, [r7, #0]
   31b4e:	18d4      	adds	r4, r2, r3
   31b50:	2318      	movs	r3, #24
   31b52:	18fb      	adds	r3, r7, r3
   31b54:	0018      	movs	r0, r3
   31b56:	4b09      	ldr	r3, [pc, #36]	; (31b7c <MQTTDeserialize_suback+0xd8>)
   31b58:	4798      	blx	r3
   31b5a:	0003      	movs	r3, r0
   31b5c:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   31b5e:	69ba      	ldr	r2, [r7, #24]
   31b60:	6a3b      	ldr	r3, [r7, #32]
   31b62:	429a      	cmp	r2, r3
   31b64:	d3e2      	bcc.n	31b2c <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   31b66:	2301      	movs	r3, #1
   31b68:	627b      	str	r3, [r7, #36]	; 0x24
   31b6a:	e002      	b.n	31b72 <MQTTDeserialize_suback+0xce>
		goto exit;
   31b6c:	46c0      	nop			; (mov r8, r8)
   31b6e:	e000      	b.n	31b72 <MQTTDeserialize_suback+0xce>
		goto exit;
   31b70:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   31b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   31b74:	0018      	movs	r0, r3
   31b76:	46bd      	mov	sp, r7
   31b78:	b00b      	add	sp, #44	; 0x2c
   31b7a:	bd90      	pop	{r4, r7, pc}
   31b7c:	000313bb 	.word	0x000313bb
   31b80:	00031355 	.word	0x00031355
   31b84:	00031389 	.word	0x00031389

00031b88 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   31b88:	b580      	push	{r7, lr}
   31b8a:	b082      	sub	sp, #8
   31b8c:	af00      	add	r7, sp, #0
   31b8e:	6078      	str	r0, [r7, #4]
	config->port = 80;
   31b90:	687b      	ldr	r3, [r7, #4]
   31b92:	2250      	movs	r2, #80	; 0x50
   31b94:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   31b96:	687b      	ldr	r3, [r7, #4]
   31b98:	2200      	movs	r2, #0
   31b9a:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   31b9c:	687b      	ldr	r3, [r7, #4]
   31b9e:	4a0b      	ldr	r2, [pc, #44]	; (31bcc <http_client_get_config_defaults+0x44>)
   31ba0:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   31ba2:	687b      	ldr	r3, [r7, #4]
   31ba4:	2200      	movs	r2, #0
   31ba6:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   31ba8:	687b      	ldr	r3, [r7, #4]
   31baa:	2200      	movs	r2, #0
   31bac:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   31bae:	687b      	ldr	r3, [r7, #4]
   31bb0:	2280      	movs	r2, #128	; 0x80
   31bb2:	0052      	lsls	r2, r2, #1
   31bb4:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   31bb6:	687b      	ldr	r3, [r7, #4]
   31bb8:	2252      	movs	r2, #82	; 0x52
   31bba:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   31bbc:	687b      	ldr	r3, [r7, #4]
   31bbe:	4a04      	ldr	r2, [pc, #16]	; (31bd0 <http_client_get_config_defaults+0x48>)
   31bc0:	619a      	str	r2, [r3, #24]
}
   31bc2:	46c0      	nop			; (mov r8, r8)
   31bc4:	46bd      	mov	sp, r7
   31bc6:	b002      	add	sp, #8
   31bc8:	bd80      	pop	{r7, pc}
   31bca:	46c0      	nop			; (mov r8, r8)
   31bcc:	00004e20 	.word	0x00004e20
   31bd0:	0003bab0 	.word	0x0003bab0

00031bd4 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   31bd4:	b590      	push	{r4, r7, lr}
   31bd6:	b083      	sub	sp, #12
   31bd8:	af00      	add	r7, sp, #0
   31bda:	6078      	str	r0, [r7, #4]
   31bdc:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   31bde:	687b      	ldr	r3, [r7, #4]
   31be0:	2b00      	cmp	r3, #0
   31be2:	d002      	beq.n	31bea <http_client_init+0x16>
   31be4:	683b      	ldr	r3, [r7, #0]
   31be6:	2b00      	cmp	r3, #0
   31be8:	d102      	bne.n	31bf0 <http_client_init+0x1c>
		return -EINVAL;
   31bea:	2316      	movs	r3, #22
   31bec:	425b      	negs	r3, r3
   31bee:	e058      	b.n	31ca2 <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   31bf0:	683b      	ldr	r3, [r7, #0]
   31bf2:	691b      	ldr	r3, [r3, #16]
   31bf4:	2b00      	cmp	r3, #0
   31bf6:	d102      	bne.n	31bfe <http_client_init+0x2a>
		return -EINVAL;
   31bf8:	2316      	movs	r3, #22
   31bfa:	425b      	negs	r3, r3
   31bfc:	e051      	b.n	31ca2 <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   31bfe:	683b      	ldr	r3, [r7, #0]
   31c00:	685b      	ldr	r3, [r3, #4]
   31c02:	2b00      	cmp	r3, #0
   31c04:	d102      	bne.n	31c0c <http_client_init+0x38>
		return -EINVAL;
   31c06:	2316      	movs	r3, #22
   31c08:	425b      	negs	r3, r3
   31c0a:	e04a      	b.n	31ca2 <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   31c0c:	683b      	ldr	r3, [r7, #0]
   31c0e:	695b      	ldr	r3, [r3, #20]
   31c10:	2b51      	cmp	r3, #81	; 0x51
   31c12:	d802      	bhi.n	31c1a <http_client_init+0x46>
		return -EINVAL;
   31c14:	2316      	movs	r3, #22
   31c16:	425b      	negs	r3, r3
   31c18:	e043      	b.n	31ca2 <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   31c1a:	687b      	ldr	r3, [r7, #4]
   31c1c:	22e8      	movs	r2, #232	; 0xe8
   31c1e:	2100      	movs	r1, #0
   31c20:	0018      	movs	r0, r3
   31c22:	4b22      	ldr	r3, [pc, #136]	; (31cac <http_client_init+0xd8>)
   31c24:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   31c26:	687b      	ldr	r3, [r7, #4]
   31c28:	3350      	adds	r3, #80	; 0x50
   31c2a:	6839      	ldr	r1, [r7, #0]
   31c2c:	221c      	movs	r2, #28
   31c2e:	0018      	movs	r0, r3
   31c30:	4b1f      	ldr	r3, [pc, #124]	; (31cb0 <http_client_init+0xdc>)
   31c32:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   31c34:	687b      	ldr	r3, [r7, #4]
   31c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31c38:	2b00      	cmp	r3, #0
   31c3a:	d115      	bne.n	31c68 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   31c3c:	683b      	ldr	r3, [r7, #0]
   31c3e:	691b      	ldr	r3, [r3, #16]
   31c40:	0018      	movs	r0, r3
   31c42:	4b1c      	ldr	r3, [pc, #112]	; (31cb4 <http_client_init+0xe0>)
   31c44:	4798      	blx	r3
   31c46:	0003      	movs	r3, r0
   31c48:	001a      	movs	r2, r3
   31c4a:	687b      	ldr	r3, [r7, #4]
   31c4c:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   31c4e:	687b      	ldr	r3, [r7, #4]
   31c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31c52:	2b00      	cmp	r3, #0
   31c54:	d102      	bne.n	31c5c <http_client_init+0x88>
			return -ENOMEM;
   31c56:	230c      	movs	r3, #12
   31c58:	425b      	negs	r3, r3
   31c5a:	e022      	b.n	31ca2 <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   31c5c:	687b      	ldr	r3, [r7, #4]
   31c5e:	2241      	movs	r2, #65	; 0x41
   31c60:	5c99      	ldrb	r1, [r3, r2]
   31c62:	2004      	movs	r0, #4
   31c64:	4301      	orrs	r1, r0
   31c66:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   31c68:	683b      	ldr	r3, [r7, #0]
   31c6a:	891b      	ldrh	r3, [r3, #8]
   31c6c:	2b00      	cmp	r3, #0
   31c6e:	d010      	beq.n	31c92 <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   31c70:	683b      	ldr	r3, [r7, #0]
   31c72:	6858      	ldr	r0, [r3, #4]
   31c74:	687a      	ldr	r2, [r7, #4]
   31c76:	4910      	ldr	r1, [pc, #64]	; (31cb8 <http_client_init+0xe4>)
   31c78:	2300      	movs	r3, #0
   31c7a:	4c10      	ldr	r4, [pc, #64]	; (31cbc <http_client_init+0xe8>)
   31c7c:	47a0      	blx	r4
   31c7e:	0002      	movs	r2, r0
   31c80:	687b      	ldr	r3, [r7, #4]
   31c82:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   31c84:	687b      	ldr	r3, [r7, #4]
   31c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   31c88:	2b00      	cmp	r3, #0
   31c8a:	da02      	bge.n	31c92 <http_client_init+0xbe>
			return -ENOSPC;
   31c8c:	231c      	movs	r3, #28
   31c8e:	425b      	negs	r3, r3
   31c90:	e007      	b.n	31ca2 <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   31c92:	687b      	ldr	r3, [r7, #4]
   31c94:	2200      	movs	r2, #0
   31c96:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   31c98:	687b      	ldr	r3, [r7, #4]
   31c9a:	22d8      	movs	r2, #216	; 0xd8
   31c9c:	2100      	movs	r1, #0
   31c9e:	5099      	str	r1, [r3, r2]

	return 0;
   31ca0:	2300      	movs	r3, #0
}
   31ca2:	0018      	movs	r0, r3
   31ca4:	46bd      	mov	sp, r7
   31ca6:	b003      	add	sp, #12
   31ca8:	bd90      	pop	{r4, r7, pc}
   31caa:	46c0      	nop			; (mov r8, r8)
   31cac:	0003643f 	.word	0x0003643f
   31cb0:	00036409 	.word	0x00036409
   31cb4:	000363e1 	.word	0x000363e1
   31cb8:	00031f85 	.word	0x00031f85
   31cbc:	00033629 	.word	0x00033629

00031cc0 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   31cc0:	b580      	push	{r7, lr}
   31cc2:	b082      	sub	sp, #8
   31cc4:	af00      	add	r7, sp, #0
   31cc6:	6078      	str	r0, [r7, #4]
   31cc8:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   31cca:	687b      	ldr	r3, [r7, #4]
   31ccc:	2b00      	cmp	r3, #0
   31cce:	d102      	bne.n	31cd6 <http_client_register_callback+0x16>
		return -EINVAL;
   31cd0:	2316      	movs	r3, #22
   31cd2:	425b      	negs	r3, r3
   31cd4:	e003      	b.n	31cde <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   31cd6:	687b      	ldr	r3, [r7, #4]
   31cd8:	683a      	ldr	r2, [r7, #0]
   31cda:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   31cdc:	2300      	movs	r3, #0
}
   31cde:	0018      	movs	r0, r3
   31ce0:	46bd      	mov	sp, r7
   31ce2:	b002      	add	sp, #8
   31ce4:	bd80      	pop	{r7, pc}
	...

00031ce8 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   31ce8:	b580      	push	{r7, lr}
   31cea:	b082      	sub	sp, #8
   31cec:	af00      	add	r7, sp, #0
   31cee:	6078      	str	r0, [r7, #4]
	switch (err) {
   31cf0:	687b      	ldr	r3, [r7, #4]
   31cf2:	330e      	adds	r3, #14
   31cf4:	2b0e      	cmp	r3, #14
   31cf6:	d825      	bhi.n	31d44 <_hwerr_to_stderr+0x5c>
   31cf8:	009a      	lsls	r2, r3, #2
   31cfa:	4b18      	ldr	r3, [pc, #96]	; (31d5c <_hwerr_to_stderr+0x74>)
   31cfc:	18d3      	adds	r3, r2, r3
   31cfe:	681b      	ldr	r3, [r3, #0]
   31d00:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   31d02:	2305      	movs	r3, #5
   31d04:	425b      	negs	r3, r3
   31d06:	e024      	b.n	31d52 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   31d08:	2302      	movs	r3, #2
   31d0a:	425b      	negs	r3, r3
   31d0c:	e021      	b.n	31d52 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   31d0e:	2370      	movs	r3, #112	; 0x70
   31d10:	425b      	negs	r3, r3
   31d12:	e01e      	b.n	31d52 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   31d14:	230c      	movs	r3, #12
   31d16:	425b      	negs	r3, r3
   31d18:	e01b      	b.n	31d52 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   31d1a:	2316      	movs	r3, #22
   31d1c:	425b      	negs	r3, r3
   31d1e:	e018      	b.n	31d52 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   31d20:	230c      	movs	r3, #12
   31d22:	425b      	negs	r3, r3
   31d24:	e015      	b.n	31d52 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   31d26:	2305      	movs	r3, #5
   31d28:	425b      	negs	r3, r3
   31d2a:	e012      	b.n	31d52 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   31d2c:	2379      	movs	r3, #121	; 0x79
   31d2e:	425b      	negs	r3, r3
   31d30:	e00f      	b.n	31d52 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   31d32:	2368      	movs	r3, #104	; 0x68
   31d34:	425b      	negs	r3, r3
   31d36:	e00c      	b.n	31d52 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   31d38:	230b      	movs	r3, #11
   31d3a:	425b      	negs	r3, r3
   31d3c:	e009      	b.n	31d52 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   31d3e:	2310      	movs	r3, #16
   31d40:	425b      	negs	r3, r3
   31d42:	e006      	b.n	31d52 <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   31d44:	687b      	ldr	r3, [r7, #4]
   31d46:	2b00      	cmp	r3, #0
   31d48:	da02      	bge.n	31d50 <_hwerr_to_stderr+0x68>
				return -EIO;
   31d4a:	2305      	movs	r3, #5
   31d4c:	425b      	negs	r3, r3
   31d4e:	e000      	b.n	31d52 <_hwerr_to_stderr+0x6a>
			}
			return 0;
   31d50:	2300      	movs	r3, #0
	}
}
   31d52:	0018      	movs	r0, r3
   31d54:	46bd      	mov	sp, r7
   31d56:	b002      	add	sp, #8
   31d58:	bd80      	pop	{r7, pc}
   31d5a:	46c0      	nop			; (mov r8, r8)
   31d5c:	0003bbec 	.word	0x0003bbec

00031d60 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   31d60:	b580      	push	{r7, lr}
   31d62:	b08a      	sub	sp, #40	; 0x28
   31d64:	af00      	add	r7, sp, #0
   31d66:	603a      	str	r2, [r7, #0]
   31d68:	1dfb      	adds	r3, r7, #7
   31d6a:	1c02      	adds	r2, r0, #0
   31d6c:	701a      	strb	r2, [r3, #0]
   31d6e:	1dbb      	adds	r3, r7, #6
   31d70:	1c0a      	adds	r2, r1, #0
   31d72:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   31d74:	1dfb      	adds	r3, r7, #7
   31d76:	2200      	movs	r2, #0
   31d78:	569a      	ldrsb	r2, [r3, r2]
   31d7a:	4b4b      	ldr	r3, [pc, #300]	; (31ea8 <http_client_socket_event_handler+0x148>)
   31d7c:	0092      	lsls	r2, r2, #2
   31d7e:	58d3      	ldr	r3, [r2, r3]
   31d80:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   31d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31d84:	2b00      	cmp	r3, #0
   31d86:	d100      	bne.n	31d8a <http_client_socket_event_handler+0x2a>
   31d88:	e08a      	b.n	31ea0 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   31d8a:	1dbb      	adds	r3, r7, #6
   31d8c:	781b      	ldrb	r3, [r3, #0]
   31d8e:	2b06      	cmp	r3, #6
   31d90:	d040      	beq.n	31e14 <http_client_socket_event_handler+0xb4>
   31d92:	2b07      	cmp	r3, #7
   31d94:	d060      	beq.n	31e58 <http_client_socket_event_handler+0xf8>
   31d96:	2b05      	cmp	r3, #5
   31d98:	d000      	beq.n	31d9c <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   31d9a:	e082      	b.n	31ea2 <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   31d9c:	683b      	ldr	r3, [r7, #0]
   31d9e:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   31da0:	6a3b      	ldr	r3, [r7, #32]
   31da2:	785b      	ldrb	r3, [r3, #1]
   31da4:	b25b      	sxtb	r3, r3
   31da6:	001a      	movs	r2, r3
   31da8:	230c      	movs	r3, #12
   31daa:	18fb      	adds	r3, r7, r3
   31dac:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   31dae:	6a3b      	ldr	r3, [r7, #32]
   31db0:	785b      	ldrb	r3, [r3, #1]
   31db2:	b25b      	sxtb	r3, r3
   31db4:	2b00      	cmp	r3, #0
   31db6:	da0c      	bge.n	31dd2 <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   31db8:	6a3b      	ldr	r3, [r7, #32]
   31dba:	785b      	ldrb	r3, [r3, #1]
   31dbc:	b25b      	sxtb	r3, r3
   31dbe:	0018      	movs	r0, r3
   31dc0:	4b3a      	ldr	r3, [pc, #232]	; (31eac <http_client_socket_event_handler+0x14c>)
   31dc2:	4798      	blx	r3
   31dc4:	0002      	movs	r2, r0
   31dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31dc8:	0011      	movs	r1, r2
   31dca:	0018      	movs	r0, r3
   31dcc:	4b38      	ldr	r3, [pc, #224]	; (31eb0 <http_client_socket_event_handler+0x150>)
   31dce:	4798      	blx	r3
    	break;
   31dd0:	e067      	b.n	31ea2 <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   31dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31dd6:	2b00      	cmp	r3, #0
   31dd8:	d006      	beq.n	31de8 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   31dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31dde:	220c      	movs	r2, #12
   31de0:	18ba      	adds	r2, r7, r2
   31de2:	6a78      	ldr	r0, [r7, #36]	; 0x24
   31de4:	2100      	movs	r1, #0
   31de6:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   31de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31dea:	2203      	movs	r2, #3
   31dec:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   31dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31df0:	6d58      	ldr	r0, [r3, #84]	; 0x54
   31df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31df4:	6c99      	ldr	r1, [r3, #72]	; 0x48
   31df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31df8:	2258      	movs	r2, #88	; 0x58
   31dfa:	5a9b      	ldrh	r3, [r3, r2]
   31dfc:	001a      	movs	r2, r3
   31dfe:	4b2d      	ldr	r3, [pc, #180]	; (31eb4 <http_client_socket_event_handler+0x154>)
   31e00:	4798      	blx	r3
    		_http_client_recv_packet(module);
   31e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31e04:	0018      	movs	r0, r3
   31e06:	4b2c      	ldr	r3, [pc, #176]	; (31eb8 <http_client_socket_event_handler+0x158>)
   31e08:	4798      	blx	r3
			_http_client_request(module);
   31e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31e0c:	0018      	movs	r0, r3
   31e0e:	4b2b      	ldr	r3, [pc, #172]	; (31ebc <http_client_socket_event_handler+0x15c>)
   31e10:	4798      	blx	r3
    	break;
   31e12:	e046      	b.n	31ea2 <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   31e14:	683b      	ldr	r3, [r7, #0]
   31e16:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   31e18:	69fb      	ldr	r3, [r7, #28]
   31e1a:	2204      	movs	r2, #4
   31e1c:	5e9b      	ldrsh	r3, [r3, r2]
   31e1e:	2b00      	cmp	r3, #0
   31e20:	dd09      	ble.n	31e36 <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   31e22:	69fb      	ldr	r3, [r7, #28]
   31e24:	2204      	movs	r2, #4
   31e26:	5e9b      	ldrsh	r3, [r3, r2]
   31e28:	001a      	movs	r2, r3
   31e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31e2c:	0011      	movs	r1, r2
   31e2e:	0018      	movs	r0, r3
   31e30:	4b23      	ldr	r3, [pc, #140]	; (31ec0 <http_client_socket_event_handler+0x160>)
   31e32:	4798      	blx	r3
   31e34:	e00b      	b.n	31e4e <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   31e36:	69fb      	ldr	r3, [r7, #28]
   31e38:	2204      	movs	r2, #4
   31e3a:	5e9b      	ldrsh	r3, [r3, r2]
   31e3c:	0018      	movs	r0, r3
   31e3e:	4b1b      	ldr	r3, [pc, #108]	; (31eac <http_client_socket_event_handler+0x14c>)
   31e40:	4798      	blx	r3
   31e42:	0002      	movs	r2, r0
   31e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31e46:	0011      	movs	r1, r2
   31e48:	0018      	movs	r0, r3
   31e4a:	4b19      	ldr	r3, [pc, #100]	; (31eb0 <http_client_socket_event_handler+0x150>)
   31e4c:	4798      	blx	r3
		_http_client_recv_packet(module);
   31e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31e50:	0018      	movs	r0, r3
   31e52:	4b19      	ldr	r3, [pc, #100]	; (31eb8 <http_client_socket_event_handler+0x158>)
   31e54:	4798      	blx	r3
		break;
   31e56:	e024      	b.n	31ea2 <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   31e58:	231a      	movs	r3, #26
   31e5a:	18fb      	adds	r3, r7, r3
   31e5c:	683a      	ldr	r2, [r7, #0]
   31e5e:	8812      	ldrh	r2, [r2, #0]
   31e60:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   31e62:	231a      	movs	r3, #26
   31e64:	18fb      	adds	r3, r7, r3
   31e66:	2200      	movs	r2, #0
   31e68:	5e9b      	ldrsh	r3, [r3, r2]
   31e6a:	2b00      	cmp	r3, #0
   31e6c:	da0d      	bge.n	31e8a <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   31e6e:	231a      	movs	r3, #26
   31e70:	18fb      	adds	r3, r7, r3
   31e72:	2200      	movs	r2, #0
   31e74:	5e9b      	ldrsh	r3, [r3, r2]
   31e76:	0018      	movs	r0, r3
   31e78:	4b0c      	ldr	r3, [pc, #48]	; (31eac <http_client_socket_event_handler+0x14c>)
   31e7a:	4798      	blx	r3
   31e7c:	0002      	movs	r2, r0
   31e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31e80:	0011      	movs	r1, r2
   31e82:	0018      	movs	r0, r3
   31e84:	4b0a      	ldr	r3, [pc, #40]	; (31eb0 <http_client_socket_event_handler+0x150>)
   31e86:	4798      	blx	r3
   31e88:	e003      	b.n	31e92 <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   31e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31e8c:	0018      	movs	r0, r3
   31e8e:	4b0b      	ldr	r3, [pc, #44]	; (31ebc <http_client_socket_event_handler+0x15c>)
   31e90:	4798      	blx	r3
		module->sending = 0;
   31e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31e94:	2241      	movs	r2, #65	; 0x41
   31e96:	5c99      	ldrb	r1, [r3, r2]
   31e98:	2001      	movs	r0, #1
   31e9a:	4381      	bics	r1, r0
   31e9c:	5499      	strb	r1, [r3, r2]
    	break;
   31e9e:	e000      	b.n	31ea2 <http_client_socket_event_handler+0x142>
		return;
   31ea0:	46c0      	nop			; (mov r8, r8)
	}

}
   31ea2:	46bd      	mov	sp, r7
   31ea4:	b00a      	add	sp, #40	; 0x28
   31ea6:	bd80      	pop	{r7, pc}
   31ea8:	200046f8 	.word	0x200046f8
   31eac:	00031ce9 	.word	0x00031ce9
   31eb0:	0003235d 	.word	0x0003235d
   31eb4:	000336b9 	.word	0x000336b9
   31eb8:	00032be9 	.word	0x00032be9
   31ebc:	000324b1 	.word	0x000324b1
   31ec0:	00032c4d 	.word	0x00032c4d

00031ec4 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   31ec4:	b580      	push	{r7, lr}
   31ec6:	b088      	sub	sp, #32
   31ec8:	af00      	add	r7, sp, #0
   31eca:	6078      	str	r0, [r7, #4]
   31ecc:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   31ece:	2300      	movs	r3, #0
   31ed0:	61fb      	str	r3, [r7, #28]
   31ed2:	e048      	b.n	31f66 <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   31ed4:	4b27      	ldr	r3, [pc, #156]	; (31f74 <http_client_socket_resolve_handler+0xb0>)
   31ed6:	69fa      	ldr	r2, [r7, #28]
   31ed8:	0092      	lsls	r2, r2, #2
   31eda:	58d3      	ldr	r3, [r2, r3]
   31edc:	2b00      	cmp	r3, #0
   31ede:	d03f      	beq.n	31f60 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   31ee0:	4b24      	ldr	r3, [pc, #144]	; (31f74 <http_client_socket_resolve_handler+0xb0>)
   31ee2:	69fa      	ldr	r2, [r7, #28]
   31ee4:	0092      	lsls	r2, r2, #2
   31ee6:	58d3      	ldr	r3, [r2, r3]
   31ee8:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   31eea:	69bb      	ldr	r3, [r7, #24]
   31eec:	1c5a      	adds	r2, r3, #1
   31eee:	687b      	ldr	r3, [r7, #4]
   31ef0:	0011      	movs	r1, r2
   31ef2:	0018      	movs	r0, r3
   31ef4:	4b20      	ldr	r3, [pc, #128]	; (31f78 <http_client_socket_resolve_handler+0xb4>)
   31ef6:	4798      	blx	r3
   31ef8:	1e03      	subs	r3, r0, #0
   31efa:	d131      	bne.n	31f60 <http_client_socket_resolve_handler+0x9c>
   31efc:	69bb      	ldr	r3, [r7, #24]
   31efe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31f00:	2b01      	cmp	r3, #1
   31f02:	d12d      	bne.n	31f60 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   31f04:	683b      	ldr	r3, [r7, #0]
   31f06:	2b00      	cmp	r3, #0
   31f08:	d107      	bne.n	31f1a <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   31f0a:	2376      	movs	r3, #118	; 0x76
   31f0c:	425a      	negs	r2, r3
   31f0e:	69bb      	ldr	r3, [r7, #24]
   31f10:	0011      	movs	r1, r2
   31f12:	0018      	movs	r0, r3
   31f14:	4b19      	ldr	r3, [pc, #100]	; (31f7c <http_client_socket_resolve_handler+0xb8>)
   31f16:	4798      	blx	r3
					return;
   31f18:	e028      	b.n	31f6c <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   31f1a:	2308      	movs	r3, #8
   31f1c:	18fb      	adds	r3, r7, r3
   31f1e:	2202      	movs	r2, #2
   31f20:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   31f22:	69bb      	ldr	r3, [r7, #24]
   31f24:	2250      	movs	r2, #80	; 0x50
   31f26:	5a9b      	ldrh	r3, [r3, r2]
   31f28:	021b      	lsls	r3, r3, #8
   31f2a:	b21a      	sxth	r2, r3
   31f2c:	69bb      	ldr	r3, [r7, #24]
   31f2e:	2150      	movs	r1, #80	; 0x50
   31f30:	5a5b      	ldrh	r3, [r3, r1]
   31f32:	0a1b      	lsrs	r3, r3, #8
   31f34:	b29b      	uxth	r3, r3
   31f36:	b21b      	sxth	r3, r3
   31f38:	4313      	orrs	r3, r2
   31f3a:	b21b      	sxth	r3, r3
   31f3c:	b29a      	uxth	r2, r3
   31f3e:	2308      	movs	r3, #8
   31f40:	18fb      	adds	r3, r7, r3
   31f42:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   31f44:	2308      	movs	r3, #8
   31f46:	18fb      	adds	r3, r7, r3
   31f48:	683a      	ldr	r2, [r7, #0]
   31f4a:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   31f4c:	69bb      	ldr	r3, [r7, #24]
   31f4e:	781b      	ldrb	r3, [r3, #0]
   31f50:	b25b      	sxtb	r3, r3
   31f52:	2208      	movs	r2, #8
   31f54:	18b9      	adds	r1, r7, r2
   31f56:	2210      	movs	r2, #16
   31f58:	0018      	movs	r0, r3
   31f5a:	4b09      	ldr	r3, [pc, #36]	; (31f80 <http_client_socket_resolve_handler+0xbc>)
   31f5c:	4798      	blx	r3
				return;
   31f5e:	e005      	b.n	31f6c <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   31f60:	69fb      	ldr	r3, [r7, #28]
   31f62:	3301      	adds	r3, #1
   31f64:	61fb      	str	r3, [r7, #28]
   31f66:	69fb      	ldr	r3, [r7, #28]
   31f68:	2b06      	cmp	r3, #6
   31f6a:	ddb3      	ble.n	31ed4 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   31f6c:	46bd      	mov	sp, r7
   31f6e:	b008      	add	sp, #32
   31f70:	bd80      	pop	{r7, pc}
   31f72:	46c0      	nop			; (mov r8, r8)
   31f74:	200046f8 	.word	0x200046f8
   31f78:	00036797 	.word	0x00036797
   31f7c:	0003235d 	.word	0x0003235d
   31f80:	00026755 	.word	0x00026755

00031f84 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   31f84:	b580      	push	{r7, lr}
   31f86:	b086      	sub	sp, #24
   31f88:	af00      	add	r7, sp, #0
   31f8a:	60f8      	str	r0, [r7, #12]
   31f8c:	60b9      	str	r1, [r7, #8]
   31f8e:	607a      	str	r2, [r7, #4]
   31f90:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   31f92:	687b      	ldr	r3, [r7, #4]
   31f94:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   31f96:	697b      	ldr	r3, [r7, #20]
   31f98:	2b00      	cmp	r3, #0
   31f9a:	d007      	beq.n	31fac <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   31f9c:	233e      	movs	r3, #62	; 0x3e
   31f9e:	425a      	negs	r2, r3
   31fa0:	697b      	ldr	r3, [r7, #20]
   31fa2:	0011      	movs	r1, r2
   31fa4:	0018      	movs	r0, r3
   31fa6:	4b03      	ldr	r3, [pc, #12]	; (31fb4 <http_client_timer_callback+0x30>)
   31fa8:	4798      	blx	r3
   31faa:	e000      	b.n	31fae <http_client_timer_callback+0x2a>
		return;
   31fac:	46c0      	nop			; (mov r8, r8)
}
   31fae:	46bd      	mov	sp, r7
   31fb0:	b006      	add	sp, #24
   31fb2:	bd80      	pop	{r7, pc}
   31fb4:	0003235d 	.word	0x0003235d

00031fb8 <_is_ip>:

static int _is_ip(const char *host)
{
   31fb8:	b580      	push	{r7, lr}
   31fba:	b084      	sub	sp, #16
   31fbc:	af00      	add	r7, sp, #0
   31fbe:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   31fc0:	2300      	movs	r3, #0
   31fc2:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   31fc4:	e03a      	b.n	3203c <_is_ip+0x84>
		ch = *host++;
   31fc6:	687b      	ldr	r3, [r7, #4]
   31fc8:	1c5a      	adds	r2, r3, #1
   31fca:	607a      	str	r2, [r7, #4]
   31fcc:	220b      	movs	r2, #11
   31fce:	18ba      	adds	r2, r7, r2
   31fd0:	781b      	ldrb	r3, [r3, #0]
   31fd2:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   31fd4:	230b      	movs	r3, #11
   31fd6:	18fb      	adds	r3, r7, r3
   31fd8:	781b      	ldrb	r3, [r3, #0]
   31fda:	2b60      	cmp	r3, #96	; 0x60
   31fdc:	d904      	bls.n	31fe8 <_is_ip+0x30>
   31fde:	230b      	movs	r3, #11
   31fe0:	18fb      	adds	r3, r7, r3
   31fe2:	781b      	ldrb	r3, [r3, #0]
   31fe4:	2b66      	cmp	r3, #102	; 0x66
   31fe6:	d913      	bls.n	32010 <_is_ip+0x58>
   31fe8:	230b      	movs	r3, #11
   31fea:	18fb      	adds	r3, r7, r3
   31fec:	781b      	ldrb	r3, [r3, #0]
   31fee:	2b40      	cmp	r3, #64	; 0x40
   31ff0:	d904      	bls.n	31ffc <_is_ip+0x44>
   31ff2:	230b      	movs	r3, #11
   31ff4:	18fb      	adds	r3, r7, r3
   31ff6:	781b      	ldrb	r3, [r3, #0]
   31ff8:	2b46      	cmp	r3, #70	; 0x46
   31ffa:	d909      	bls.n	32010 <_is_ip+0x58>
   31ffc:	230b      	movs	r3, #11
   31ffe:	18fb      	adds	r3, r7, r3
   32000:	781b      	ldrb	r3, [r3, #0]
   32002:	2b3a      	cmp	r3, #58	; 0x3a
   32004:	d004      	beq.n	32010 <_is_ip+0x58>
   32006:	230b      	movs	r3, #11
   32008:	18fb      	adds	r3, r7, r3
   3200a:	781b      	ldrb	r3, [r3, #0]
   3200c:	2b2f      	cmp	r3, #47	; 0x2f
   3200e:	d102      	bne.n	32016 <_is_ip+0x5e>
			isv6 = 1;
   32010:	2301      	movs	r3, #1
   32012:	60fb      	str	r3, [r7, #12]
   32014:	e012      	b.n	3203c <_is_ip+0x84>
		} else if (ch == '.') {
   32016:	230b      	movs	r3, #11
   32018:	18fb      	adds	r3, r7, r3
   3201a:	781b      	ldrb	r3, [r3, #0]
   3201c:	2b2e      	cmp	r3, #46	; 0x2e
   3201e:	d104      	bne.n	3202a <_is_ip+0x72>
			if (isv6) {
   32020:	68fb      	ldr	r3, [r7, #12]
   32022:	2b00      	cmp	r3, #0
   32024:	d00a      	beq.n	3203c <_is_ip+0x84>
				return 0;
   32026:	2300      	movs	r3, #0
   32028:	e00d      	b.n	32046 <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   3202a:	230b      	movs	r3, #11
   3202c:	18fb      	adds	r3, r7, r3
   3202e:	781b      	ldrb	r3, [r3, #0]
   32030:	2230      	movs	r2, #48	; 0x30
   32032:	4013      	ands	r3, r2
   32034:	2b30      	cmp	r3, #48	; 0x30
   32036:	d001      	beq.n	3203c <_is_ip+0x84>
			return 0;
   32038:	2300      	movs	r3, #0
   3203a:	e004      	b.n	32046 <_is_ip+0x8e>
	while (*host != '\0') {
   3203c:	687b      	ldr	r3, [r7, #4]
   3203e:	781b      	ldrb	r3, [r3, #0]
   32040:	2b00      	cmp	r3, #0
   32042:	d1c0      	bne.n	31fc6 <_is_ip+0xe>
		}
	}
	return 1;
   32044:	2301      	movs	r3, #1
}
   32046:	0018      	movs	r0, r3
   32048:	46bd      	mov	sp, r7
   3204a:	b004      	add	sp, #16
   3204c:	bd80      	pop	{r7, pc}
	...

00032050 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   32050:	b5b0      	push	{r4, r5, r7, lr}
   32052:	b08e      	sub	sp, #56	; 0x38
   32054:	af00      	add	r7, sp, #0
   32056:	60f8      	str	r0, [r7, #12]
   32058:	60b9      	str	r1, [r7, #8]
   3205a:	603b      	str	r3, [r7, #0]
   3205c:	1dfb      	adds	r3, r7, #7
   3205e:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   32060:	2337      	movs	r3, #55	; 0x37
   32062:	18fb      	adds	r3, r7, r3
   32064:	2200      	movs	r2, #0
   32066:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   32068:	2300      	movs	r3, #0
   3206a:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   3206c:	2300      	movs	r3, #0
   3206e:	633b      	str	r3, [r7, #48]	; 0x30
   32070:	2300      	movs	r3, #0
   32072:	62fb      	str	r3, [r7, #44]	; 0x2c
   32074:	2300      	movs	r3, #0
   32076:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   32078:	68fb      	ldr	r3, [r7, #12]
   3207a:	2b00      	cmp	r3, #0
   3207c:	d102      	bne.n	32084 <http_client_send_request+0x34>
		return -EINVAL;
   3207e:	2316      	movs	r3, #22
   32080:	425b      	negs	r3, r3
   32082:	e145      	b.n	32310 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   32084:	68fb      	ldr	r3, [r7, #12]
   32086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   32088:	2b02      	cmp	r3, #2
   3208a:	d902      	bls.n	32092 <http_client_send_request+0x42>
		return -EBUSY;
   3208c:	2310      	movs	r3, #16
   3208e:	425b      	negs	r3, r3
   32090:	e13e      	b.n	32310 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   32092:	49a1      	ldr	r1, [pc, #644]	; (32318 <http_client_send_request+0x2c8>)
   32094:	68bb      	ldr	r3, [r7, #8]
   32096:	2207      	movs	r2, #7
   32098:	0018      	movs	r0, r3
   3209a:	4ba0      	ldr	r3, [pc, #640]	; (3231c <http_client_send_request+0x2cc>)
   3209c:	4798      	blx	r3
   3209e:	1e03      	subs	r3, r0, #0
   320a0:	d102      	bne.n	320a8 <http_client_send_request+0x58>
		i = 7;
   320a2:	2307      	movs	r3, #7
   320a4:	633b      	str	r3, [r7, #48]	; 0x30
   320a6:	e009      	b.n	320bc <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   320a8:	499d      	ldr	r1, [pc, #628]	; (32320 <http_client_send_request+0x2d0>)
   320aa:	68bb      	ldr	r3, [r7, #8]
   320ac:	2208      	movs	r2, #8
   320ae:	0018      	movs	r0, r3
   320b0:	4b9a      	ldr	r3, [pc, #616]	; (3231c <http_client_send_request+0x2cc>)
   320b2:	4798      	blx	r3
   320b4:	1e03      	subs	r3, r0, #0
   320b6:	d101      	bne.n	320bc <http_client_send_request+0x6c>
		i = 8;
   320b8:	2308      	movs	r3, #8
   320ba:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   320bc:	68fb      	ldr	r3, [r7, #12]
   320be:	1c5c      	adds	r4, r3, #1
   320c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   320c2:	68ba      	ldr	r2, [r7, #8]
   320c4:	18d5      	adds	r5, r2, r3
   320c6:	68fb      	ldr	r3, [r7, #12]
   320c8:	3301      	adds	r3, #1
   320ca:	0018      	movs	r0, r3
   320cc:	4b95      	ldr	r3, [pc, #596]	; (32324 <http_client_send_request+0x2d4>)
   320ce:	4798      	blx	r3
   320d0:	0003      	movs	r3, r0
   320d2:	001a      	movs	r2, r3
   320d4:	0029      	movs	r1, r5
   320d6:	0020      	movs	r0, r4
   320d8:	4b90      	ldr	r3, [pc, #576]	; (3231c <http_client_send_request+0x2cc>)
   320da:	4798      	blx	r3
   320dc:	0003      	movs	r3, r0
   320de:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   320e0:	e00d      	b.n	320fe <http_client_send_request+0xae>
		module->host[j++] = url[i];
   320e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   320e4:	1c5a      	adds	r2, r3, #1
   320e6:	62fa      	str	r2, [r7, #44]	; 0x2c
   320e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   320ea:	68b9      	ldr	r1, [r7, #8]
   320ec:	188a      	adds	r2, r1, r2
   320ee:	7811      	ldrb	r1, [r2, #0]
   320f0:	68fa      	ldr	r2, [r7, #12]
   320f2:	18d3      	adds	r3, r2, r3
   320f4:	1c0a      	adds	r2, r1, #0
   320f6:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   320f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   320fa:	3301      	adds	r3, #1
   320fc:	633b      	str	r3, [r7, #48]	; 0x30
   320fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   32100:	68ba      	ldr	r2, [r7, #8]
   32102:	18d3      	adds	r3, r2, r3
   32104:	781b      	ldrb	r3, [r3, #0]
   32106:	2b00      	cmp	r3, #0
   32108:	d005      	beq.n	32116 <http_client_send_request+0xc6>
   3210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   3210c:	68ba      	ldr	r2, [r7, #8]
   3210e:	18d3      	adds	r3, r2, r3
   32110:	781b      	ldrb	r3, [r3, #0]
   32112:	2b2f      	cmp	r3, #47	; 0x2f
   32114:	d1e5      	bne.n	320e2 <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   32116:	68fa      	ldr	r2, [r7, #12]
   32118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   3211a:	18d3      	adds	r3, r2, r3
   3211c:	3301      	adds	r3, #1
   3211e:	2200      	movs	r2, #0
   32120:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   32122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   32124:	68ba      	ldr	r2, [r7, #8]
   32126:	18d3      	adds	r3, r2, r3
   32128:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   3212a:	68fb      	ldr	r3, [r7, #12]
   3212c:	3301      	adds	r3, #1
   3212e:	781b      	ldrb	r3, [r3, #0]
   32130:	2b00      	cmp	r3, #0
   32132:	d102      	bne.n	3213a <http_client_send_request+0xea>
		return -EINVAL;
   32134:	2316      	movs	r3, #22
   32136:	425b      	negs	r3, r3
   32138:	e0ea      	b.n	32310 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   3213a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   3213c:	0018      	movs	r0, r3
   3213e:	4b79      	ldr	r3, [pc, #484]	; (32324 <http_client_send_request+0x2d4>)
   32140:	4798      	blx	r3
   32142:	0003      	movs	r3, r0
   32144:	2b3f      	cmp	r3, #63	; 0x3f
   32146:	d902      	bls.n	3214e <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   32148:	235b      	movs	r3, #91	; 0x5b
   3214a:	425b      	negs	r3, r3
   3214c:	e0e0      	b.n	32310 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   3214e:	68fb      	ldr	r3, [r7, #12]
   32150:	22d4      	movs	r2, #212	; 0xd4
   32152:	589b      	ldr	r3, [r3, r2]
   32154:	2b00      	cmp	r3, #0
   32156:	d005      	beq.n	32164 <http_client_send_request+0x114>
		free(module->req.ext_header);
   32158:	68fb      	ldr	r3, [r7, #12]
   3215a:	22d4      	movs	r2, #212	; 0xd4
   3215c:	589b      	ldr	r3, [r3, r2]
   3215e:	0018      	movs	r0, r3
   32160:	4b71      	ldr	r3, [pc, #452]	; (32328 <http_client_send_request+0x2d8>)
   32162:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   32164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   32166:	2b00      	cmp	r3, #0
   32168:	d010      	beq.n	3218c <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   3216a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   3216c:	0018      	movs	r0, r3
   3216e:	4b6f      	ldr	r3, [pc, #444]	; (3232c <http_client_send_request+0x2dc>)
   32170:	4798      	blx	r3
   32172:	0003      	movs	r3, r0
   32174:	0019      	movs	r1, r3
   32176:	68fb      	ldr	r3, [r7, #12]
   32178:	22d4      	movs	r2, #212	; 0xd4
   3217a:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   3217c:	68fb      	ldr	r3, [r7, #12]
   3217e:	22d4      	movs	r2, #212	; 0xd4
   32180:	589b      	ldr	r3, [r3, r2]
   32182:	2b00      	cmp	r3, #0
   32184:	d106      	bne.n	32194 <http_client_send_request+0x144>
			return -ENOMEM;
   32186:	230c      	movs	r3, #12
   32188:	425b      	negs	r3, r3
   3218a:	e0c1      	b.n	32310 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   3218c:	68fb      	ldr	r3, [r7, #12]
   3218e:	22d4      	movs	r2, #212	; 0xd4
   32190:	2100      	movs	r1, #0
   32192:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   32194:	68fb      	ldr	r3, [r7, #12]
   32196:	2241      	movs	r2, #65	; 0x41
   32198:	5c99      	ldrb	r1, [r3, r2]
   3219a:	2001      	movs	r0, #1
   3219c:	4381      	bics	r1, r0
   3219e:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   321a0:	68fb      	ldr	r3, [r7, #12]
   321a2:	2200      	movs	r2, #0
   321a4:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   321a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   321a8:	781b      	ldrb	r3, [r3, #0]
   321aa:	2b2f      	cmp	r3, #47	; 0x2f
   321ac:	d107      	bne.n	321be <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   321ae:	68fb      	ldr	r3, [r7, #12]
   321b0:	3370      	adds	r3, #112	; 0x70
   321b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   321b4:	0011      	movs	r1, r2
   321b6:	0018      	movs	r0, r3
   321b8:	4b5d      	ldr	r3, [pc, #372]	; (32330 <http_client_send_request+0x2e0>)
   321ba:	4798      	blx	r3
   321bc:	e00f      	b.n	321de <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   321be:	68fb      	ldr	r3, [r7, #12]
   321c0:	2270      	movs	r2, #112	; 0x70
   321c2:	212f      	movs	r1, #47	; 0x2f
   321c4:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   321c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   321c8:	781b      	ldrb	r3, [r3, #0]
   321ca:	2b00      	cmp	r3, #0
   321cc:	d007      	beq.n	321de <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   321ce:	68fb      	ldr	r3, [r7, #12]
   321d0:	3370      	adds	r3, #112	; 0x70
   321d2:	3301      	adds	r3, #1
   321d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   321d6:	0011      	movs	r1, r2
   321d8:	0018      	movs	r0, r3
   321da:	4b55      	ldr	r3, [pc, #340]	; (32330 <http_client_send_request+0x2e0>)
   321dc:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   321de:	683b      	ldr	r3, [r7, #0]
   321e0:	2b00      	cmp	r3, #0
   321e2:	d007      	beq.n	321f4 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   321e4:	68fb      	ldr	r3, [r7, #12]
   321e6:	33b0      	adds	r3, #176	; 0xb0
   321e8:	6839      	ldr	r1, [r7, #0]
   321ea:	2218      	movs	r2, #24
   321ec:	0018      	movs	r0, r3
   321ee:	4b51      	ldr	r3, [pc, #324]	; (32334 <http_client_send_request+0x2e4>)
   321f0:	4798      	blx	r3
   321f2:	e006      	b.n	32202 <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   321f4:	68fb      	ldr	r3, [r7, #12]
   321f6:	33b0      	adds	r3, #176	; 0xb0
   321f8:	2218      	movs	r2, #24
   321fa:	2100      	movs	r1, #0
   321fc:	0018      	movs	r0, r3
   321fe:	4b4e      	ldr	r3, [pc, #312]	; (32338 <http_client_send_request+0x2e8>)
   32200:	4798      	blx	r3
	}

	module->req.method = method;
   32202:	68fb      	ldr	r3, [r7, #12]
   32204:	1dfa      	adds	r2, r7, #7
   32206:	21c8      	movs	r1, #200	; 0xc8
   32208:	7812      	ldrb	r2, [r2, #0]
   3220a:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   3220c:	68fb      	ldr	r3, [r7, #12]
   3220e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   32210:	2b01      	cmp	r3, #1
   32212:	d003      	beq.n	3221c <http_client_send_request+0x1cc>
   32214:	d316      	bcc.n	32244 <http_client_send_request+0x1f4>
   32216:	2b02      	cmp	r3, #2
   32218:	d004      	beq.n	32224 <http_client_send_request+0x1d4>
   3221a:	e074      	b.n	32306 <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   3221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3221e:	2b00      	cmp	r3, #0
   32220:	d100      	bne.n	32224 <http_client_send_request+0x1d4>
   32222:	e073      	b.n	3230c <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   32224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32226:	2b00      	cmp	r3, #0
   32228:	d107      	bne.n	3223a <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   3222a:	68fb      	ldr	r3, [r7, #12]
   3222c:	2203      	movs	r2, #3
   3222e:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   32230:	68fb      	ldr	r3, [r7, #12]
   32232:	0018      	movs	r0, r3
   32234:	4b41      	ldr	r3, [pc, #260]	; (3233c <http_client_send_request+0x2ec>)
   32236:	4798      	blx	r3
			break;
   32238:	e069      	b.n	3230e <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   3223a:	68fb      	ldr	r3, [r7, #12]
   3223c:	2100      	movs	r1, #0
   3223e:	0018      	movs	r0, r3
   32240:	4b3f      	ldr	r3, [pc, #252]	; (32340 <http_client_send_request+0x2f0>)
   32242:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   32244:	68fb      	ldr	r3, [r7, #12]
   32246:	2252      	movs	r2, #82	; 0x52
   32248:	5c9b      	ldrb	r3, [r3, r2]
   3224a:	2b00      	cmp	r3, #0
   3224c:	d007      	beq.n	3225e <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   3224e:	2337      	movs	r3, #55	; 0x37
   32250:	18fb      	adds	r3, r7, r3
   32252:	2237      	movs	r2, #55	; 0x37
   32254:	18ba      	adds	r2, r7, r2
   32256:	7812      	ldrb	r2, [r2, #0]
   32258:	2101      	movs	r1, #1
   3225a:	430a      	orrs	r2, r1
   3225c:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   3225e:	2337      	movs	r3, #55	; 0x37
   32260:	18fb      	adds	r3, r7, r3
   32262:	781b      	ldrb	r3, [r3, #0]
   32264:	001a      	movs	r2, r3
   32266:	2101      	movs	r1, #1
   32268:	2002      	movs	r0, #2
   3226a:	4b36      	ldr	r3, [pc, #216]	; (32344 <http_client_send_request+0x2f4>)
   3226c:	4798      	blx	r3
   3226e:	0003      	movs	r3, r0
   32270:	001a      	movs	r2, r3
   32272:	68fb      	ldr	r3, [r7, #12]
   32274:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   32276:	68fb      	ldr	r3, [r7, #12]
   32278:	781b      	ldrb	r3, [r3, #0]
   3227a:	b25b      	sxtb	r3, r3
   3227c:	2b00      	cmp	r3, #0
   3227e:	db3f      	blt.n	32300 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   32280:	68fb      	ldr	r3, [r7, #12]
   32282:	781b      	ldrb	r3, [r3, #0]
   32284:	b25b      	sxtb	r3, r3
   32286:	001a      	movs	r2, r3
   32288:	4b2f      	ldr	r3, [pc, #188]	; (32348 <http_client_send_request+0x2f8>)
   3228a:	0092      	lsls	r2, r2, #2
   3228c:	68f9      	ldr	r1, [r7, #12]
   3228e:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   32290:	68fb      	ldr	r3, [r7, #12]
   32292:	3301      	adds	r3, #1
   32294:	0018      	movs	r0, r3
   32296:	4b2d      	ldr	r3, [pc, #180]	; (3234c <http_client_send_request+0x2fc>)
   32298:	4798      	blx	r3
   3229a:	1e03      	subs	r3, r0, #0
   3229c:	d027      	beq.n	322ee <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   3229e:	2314      	movs	r3, #20
   322a0:	18fb      	adds	r3, r7, r3
   322a2:	2202      	movs	r2, #2
   322a4:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   322a6:	68fb      	ldr	r3, [r7, #12]
   322a8:	2250      	movs	r2, #80	; 0x50
   322aa:	5a9b      	ldrh	r3, [r3, r2]
   322ac:	021b      	lsls	r3, r3, #8
   322ae:	b21a      	sxth	r2, r3
   322b0:	68fb      	ldr	r3, [r7, #12]
   322b2:	2150      	movs	r1, #80	; 0x50
   322b4:	5a5b      	ldrh	r3, [r3, r1]
   322b6:	0a1b      	lsrs	r3, r3, #8
   322b8:	b29b      	uxth	r3, r3
   322ba:	b21b      	sxth	r3, r3
   322bc:	4313      	orrs	r3, r2
   322be:	b21b      	sxth	r3, r3
   322c0:	b29a      	uxth	r2, r3
   322c2:	2314      	movs	r3, #20
   322c4:	18fb      	adds	r3, r7, r3
   322c6:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   322c8:	68fb      	ldr	r3, [r7, #12]
   322ca:	3301      	adds	r3, #1
   322cc:	0018      	movs	r0, r3
   322ce:	4b20      	ldr	r3, [pc, #128]	; (32350 <http_client_send_request+0x300>)
   322d0:	4798      	blx	r3
   322d2:	0002      	movs	r2, r0
   322d4:	2314      	movs	r3, #20
   322d6:	18fb      	adds	r3, r7, r3
   322d8:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   322da:	68fb      	ldr	r3, [r7, #12]
   322dc:	781b      	ldrb	r3, [r3, #0]
   322de:	b25b      	sxtb	r3, r3
   322e0:	2214      	movs	r2, #20
   322e2:	18b9      	adds	r1, r7, r2
   322e4:	2210      	movs	r2, #16
   322e6:	0018      	movs	r0, r3
   322e8:	4b1a      	ldr	r3, [pc, #104]	; (32354 <http_client_send_request+0x304>)
   322ea:	4798      	blx	r3
   322ec:	e004      	b.n	322f8 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   322ee:	68fb      	ldr	r3, [r7, #12]
   322f0:	3301      	adds	r3, #1
   322f2:	0018      	movs	r0, r3
   322f4:	4b18      	ldr	r3, [pc, #96]	; (32358 <http_client_send_request+0x308>)
   322f6:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   322f8:	68fb      	ldr	r3, [r7, #12]
   322fa:	2201      	movs	r2, #1
   322fc:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   322fe:	e006      	b.n	3230e <http_client_send_request+0x2be>
			return -ENOSPC;
   32300:	231c      	movs	r3, #28
   32302:	425b      	negs	r3, r3
   32304:	e004      	b.n	32310 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   32306:	230b      	movs	r3, #11
   32308:	425b      	negs	r3, r3
   3230a:	e001      	b.n	32310 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   3230c:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   3230e:	2300      	movs	r3, #0
}
   32310:	0018      	movs	r0, r3
   32312:	46bd      	mov	sp, r7
   32314:	b00e      	add	sp, #56	; 0x38
   32316:	bdb0      	pop	{r4, r5, r7, pc}
   32318:	0003babc 	.word	0x0003babc
   3231c:	00036805 	.word	0x00036805
   32320:	0003bac4 	.word	0x0003bac4
   32324:	000367f7 	.word	0x000367f7
   32328:	000363f5 	.word	0x000363f5
   3232c:	000367bd 	.word	0x000367bd
   32330:	000367ab 	.word	0x000367ab
   32334:	00036409 	.word	0x00036409
   32338:	0003643f 	.word	0x0003643f
   3233c:	000324b1 	.word	0x000324b1
   32340:	0003235d 	.word	0x0003235d
   32344:	00026541 	.word	0x00026541
   32348:	200046f8 	.word	0x200046f8
   3234c:	00031fb9 	.word	0x00031fb9
   32350:	00026c8d 	.word	0x00026c8d
   32354:	00026755 	.word	0x00026755
   32358:	00026d95 	.word	0x00026d95

0003235c <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   3235c:	b580      	push	{r7, lr}
   3235e:	b086      	sub	sp, #24
   32360:	af00      	add	r7, sp, #0
   32362:	6078      	str	r0, [r7, #4]
   32364:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   32366:	687b      	ldr	r3, [r7, #4]
   32368:	22c0      	movs	r2, #192	; 0xc0
   3236a:	589b      	ldr	r3, [r3, r2]
   3236c:	2b00      	cmp	r3, #0
   3236e:	d007      	beq.n	32380 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   32370:	687b      	ldr	r3, [r7, #4]
   32372:	22c0      	movs	r2, #192	; 0xc0
   32374:	589b      	ldr	r3, [r3, r2]
   32376:	687a      	ldr	r2, [r7, #4]
   32378:	21c4      	movs	r1, #196	; 0xc4
   3237a:	5852      	ldr	r2, [r2, r1]
   3237c:	0010      	movs	r0, r2
   3237e:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   32380:	687b      	ldr	r3, [r7, #4]
   32382:	33b0      	adds	r3, #176	; 0xb0
   32384:	2218      	movs	r2, #24
   32386:	2100      	movs	r1, #0
   32388:	0018      	movs	r0, r3
   3238a:	4b24      	ldr	r3, [pc, #144]	; (3241c <_http_client_clear_conn+0xc0>)
   3238c:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   3238e:	687b      	ldr	r3, [r7, #4]
   32390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   32392:	2b00      	cmp	r3, #0
   32394:	d005      	beq.n	323a2 <_http_client_clear_conn+0x46>
		close(module->sock);
   32396:	687b      	ldr	r3, [r7, #4]
   32398:	781b      	ldrb	r3, [r3, #0]
   3239a:	b25b      	sxtb	r3, r3
   3239c:	0018      	movs	r0, r3
   3239e:	4b20      	ldr	r3, [pc, #128]	; (32420 <_http_client_clear_conn+0xc4>)
   323a0:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   323a2:	687b      	ldr	r3, [r7, #4]
   323a4:	781b      	ldrb	r3, [r3, #0]
   323a6:	b25b      	sxtb	r3, r3
   323a8:	001a      	movs	r2, r3
   323aa:	4b1e      	ldr	r3, [pc, #120]	; (32424 <_http_client_clear_conn+0xc8>)
   323ac:	0092      	lsls	r2, r2, #2
   323ae:	2100      	movs	r1, #0
   323b0:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   323b2:	687b      	ldr	r3, [r7, #4]
   323b4:	336c      	adds	r3, #108	; 0x6c
   323b6:	226c      	movs	r2, #108	; 0x6c
   323b8:	2100      	movs	r1, #0
   323ba:	0018      	movs	r0, r3
   323bc:	4b17      	ldr	r3, [pc, #92]	; (3241c <_http_client_clear_conn+0xc0>)
   323be:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   323c0:	687b      	ldr	r3, [r7, #4]
   323c2:	33d8      	adds	r3, #216	; 0xd8
   323c4:	2210      	movs	r2, #16
   323c6:	2100      	movs	r1, #0
   323c8:	0018      	movs	r0, r3
   323ca:	4b14      	ldr	r3, [pc, #80]	; (3241c <_http_client_clear_conn+0xc0>)
   323cc:	4798      	blx	r3
	module->req.state = STATE_INIT;
   323ce:	687b      	ldr	r3, [r7, #4]
   323d0:	2200      	movs	r2, #0
   323d2:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   323d4:	687b      	ldr	r3, [r7, #4]
   323d6:	22d8      	movs	r2, #216	; 0xd8
   323d8:	2100      	movs	r1, #0
   323da:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   323dc:	687b      	ldr	r3, [r7, #4]
   323de:	2241      	movs	r2, #65	; 0x41
   323e0:	5c99      	ldrb	r1, [r3, r2]
   323e2:	2001      	movs	r0, #1
   323e4:	4381      	bics	r1, r0
   323e6:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   323e8:	687b      	ldr	r3, [r7, #4]
   323ea:	2241      	movs	r2, #65	; 0x41
   323ec:	5c99      	ldrb	r1, [r3, r2]
   323ee:	2002      	movs	r0, #2
   323f0:	4381      	bics	r1, r0
   323f2:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   323f4:	230c      	movs	r3, #12
   323f6:	18fb      	adds	r3, r7, r3
   323f8:	683a      	ldr	r2, [r7, #0]
   323fa:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   323fc:	687b      	ldr	r3, [r7, #4]
   323fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32400:	2b00      	cmp	r3, #0
   32402:	d006      	beq.n	32412 <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   32404:	687b      	ldr	r3, [r7, #4]
   32406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32408:	220c      	movs	r2, #12
   3240a:	18ba      	adds	r2, r7, r2
   3240c:	6878      	ldr	r0, [r7, #4]
   3240e:	2104      	movs	r1, #4
   32410:	4798      	blx	r3
	}
}
   32412:	46c0      	nop			; (mov r8, r8)
   32414:	46bd      	mov	sp, r7
   32416:	b006      	add	sp, #24
   32418:	bd80      	pop	{r7, pc}
   3241a:	46c0      	nop			; (mov r8, r8)
   3241c:	0003643f 	.word	0x0003643f
   32420:	00026b4d 	.word	0x00026b4d
   32424:	200046f8 	.word	0x200046f8

00032428 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   32428:	b590      	push	{r4, r7, lr}
   3242a:	b087      	sub	sp, #28
   3242c:	af00      	add	r7, sp, #0
   3242e:	60f8      	str	r0, [r7, #12]
   32430:	60b9      	str	r1, [r7, #8]
   32432:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   32434:	68fb      	ldr	r3, [r7, #12]
   32436:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   32438:	697b      	ldr	r3, [r7, #20]
   3243a:	2241      	movs	r2, #65	; 0x41
   3243c:	5c99      	ldrb	r1, [r3, r2]
   3243e:	2001      	movs	r0, #1
   32440:	4301      	orrs	r1, r0
   32442:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   32444:	697b      	ldr	r3, [r7, #20]
   32446:	2000      	movs	r0, #0
   32448:	5618      	ldrsb	r0, [r3, r0]
   3244a:	687b      	ldr	r3, [r7, #4]
   3244c:	b29a      	uxth	r2, r3
   3244e:	68b9      	ldr	r1, [r7, #8]
   32450:	2300      	movs	r3, #0
   32452:	4c14      	ldr	r4, [pc, #80]	; (324a4 <_http_client_send_wait+0x7c>)
   32454:	47a0      	blx	r4
   32456:	0003      	movs	r3, r0
   32458:	613b      	str	r3, [r7, #16]
   3245a:	693b      	ldr	r3, [r7, #16]
   3245c:	2b00      	cmp	r3, #0
   3245e:	da0f      	bge.n	32480 <_http_client_send_wait+0x58>
		module->sending = 0;
   32460:	697b      	ldr	r3, [r7, #20]
   32462:	2241      	movs	r2, #65	; 0x41
   32464:	5c99      	ldrb	r1, [r3, r2]
   32466:	2001      	movs	r0, #1
   32468:	4381      	bics	r1, r0
   3246a:	5499      	strb	r1, [r3, r2]
		return result;
   3246c:	693b      	ldr	r3, [r7, #16]
   3246e:	e014      	b.n	3249a <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   32470:	2000      	movs	r0, #0
   32472:	4b0d      	ldr	r3, [pc, #52]	; (324a8 <_http_client_send_wait+0x80>)
   32474:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   32476:	697b      	ldr	r3, [r7, #20]
   32478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   3247a:	0018      	movs	r0, r3
   3247c:	4b0b      	ldr	r3, [pc, #44]	; (324ac <_http_client_send_wait+0x84>)
   3247e:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   32480:	697b      	ldr	r3, [r7, #20]
   32482:	2241      	movs	r2, #65	; 0x41
   32484:	5c9b      	ldrb	r3, [r3, r2]
   32486:	2201      	movs	r2, #1
   32488:	4013      	ands	r3, r2
   3248a:	b2db      	uxtb	r3, r3
   3248c:	2b00      	cmp	r3, #0
   3248e:	d003      	beq.n	32498 <_http_client_send_wait+0x70>
   32490:	697b      	ldr	r3, [r7, #20]
   32492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   32494:	2b02      	cmp	r3, #2
   32496:	d8eb      	bhi.n	32470 <_http_client_send_wait+0x48>
	}

	return 0;
   32498:	2300      	movs	r3, #0
}
   3249a:	0018      	movs	r0, r3
   3249c:	46bd      	mov	sp, r7
   3249e:	b007      	add	sp, #28
   324a0:	bd90      	pop	{r4, r7, pc}
   324a2:	46c0      	nop			; (mov r8, r8)
   324a4:	00026869 	.word	0x00026869
   324a8:	00022f15 	.word	0x00022f15
   324ac:	00033735 	.word	0x00033735

000324b0 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   324b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   324b2:	46c6      	mov	lr, r8
   324b4:	b500      	push	{lr}
   324b6:	b0a0      	sub	sp, #128	; 0x80
   324b8:	af02      	add	r7, sp, #8
   324ba:	61f8      	str	r0, [r7, #28]
   324bc:	4668      	mov	r0, sp
   324be:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   324c0:	2318      	movs	r3, #24
   324c2:	2218      	movs	r2, #24
   324c4:	18ba      	adds	r2, r7, r2
   324c6:	18d0      	adds	r0, r2, r3
   324c8:	4bbd      	ldr	r3, [pc, #756]	; (327c0 <_http_client_request+0x310>)
   324ca:	469c      	mov	ip, r3
   324cc:	4663      	mov	r3, ip
   324ce:	cb16      	ldmia	r3!, {r1, r2, r4}
   324d0:	c016      	stmia	r0!, {r1, r2, r4}
   324d2:	469c      	mov	ip, r3
   324d4:	4663      	mov	r3, ip
   324d6:	681b      	ldr	r3, [r3, #0]
   324d8:	469c      	mov	ip, r3
   324da:	4663      	mov	r3, ip
   324dc:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   324de:	69f8      	ldr	r0, [r7, #28]
   324e0:	6e40      	ldr	r0, [r0, #100]	; 0x64
   324e2:	4684      	mov	ip, r0
   324e4:	2301      	movs	r3, #1
   324e6:	425b      	negs	r3, r3
   324e8:	4698      	mov	r8, r3
   324ea:	44c4      	add	ip, r8
   324ec:	4663      	mov	r3, ip
   324ee:	66fb      	str	r3, [r7, #108]	; 0x6c
   324f0:	6038      	str	r0, [r7, #0]
   324f2:	2300      	movs	r3, #0
   324f4:	607b      	str	r3, [r7, #4]
   324f6:	6839      	ldr	r1, [r7, #0]
   324f8:	687a      	ldr	r2, [r7, #4]
   324fa:	000b      	movs	r3, r1
   324fc:	0f5b      	lsrs	r3, r3, #29
   324fe:	469c      	mov	ip, r3
   32500:	0013      	movs	r3, r2
   32502:	00db      	lsls	r3, r3, #3
   32504:	617b      	str	r3, [r7, #20]
   32506:	4663      	mov	r3, ip
   32508:	697c      	ldr	r4, [r7, #20]
   3250a:	431c      	orrs	r4, r3
   3250c:	617c      	str	r4, [r7, #20]
   3250e:	000b      	movs	r3, r1
   32510:	00db      	lsls	r3, r3, #3
   32512:	613b      	str	r3, [r7, #16]
   32514:	0005      	movs	r5, r0
   32516:	2200      	movs	r2, #0
   32518:	0016      	movs	r6, r2
   3251a:	0f6a      	lsrs	r2, r5, #29
   3251c:	00f3      	lsls	r3, r6, #3
   3251e:	60fb      	str	r3, [r7, #12]
   32520:	68fb      	ldr	r3, [r7, #12]
   32522:	4313      	orrs	r3, r2
   32524:	60fb      	str	r3, [r7, #12]
   32526:	00eb      	lsls	r3, r5, #3
   32528:	60bb      	str	r3, [r7, #8]
   3252a:	1dc3      	adds	r3, r0, #7
   3252c:	08db      	lsrs	r3, r3, #3
   3252e:	00db      	lsls	r3, r3, #3
   32530:	466a      	mov	r2, sp
   32532:	1ad3      	subs	r3, r2, r3
   32534:	469d      	mov	sp, r3
   32536:	ab02      	add	r3, sp, #8
   32538:	3300      	adds	r3, #0
   3253a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   3253c:	69fb      	ldr	r3, [r7, #28]
   3253e:	2b00      	cmp	r3, #0
   32540:	d100      	bne.n	32544 <_http_client_request+0x94>
   32542:	e346      	b.n	32bd2 <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   32544:	69fb      	ldr	r3, [r7, #28]
   32546:	2241      	movs	r2, #65	; 0x41
   32548:	5c9b      	ldrb	r3, [r3, r2]
   3254a:	2201      	movs	r2, #1
   3254c:	4013      	ands	r3, r2
   3254e:	b2db      	uxtb	r3, r3
   32550:	2b00      	cmp	r3, #0
   32552:	d000      	beq.n	32556 <_http_client_request+0xa6>
   32554:	e33f      	b.n	32bd6 <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   32556:	69fb      	ldr	r3, [r7, #28]
   32558:	33b0      	adds	r3, #176	; 0xb0
   3255a:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   3255c:	69fb      	ldr	r3, [r7, #28]
   3255e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   32560:	2b03      	cmp	r3, #3
   32562:	d003      	beq.n	3256c <_http_client_request+0xbc>
   32564:	2b04      	cmp	r3, #4
   32566:	d100      	bne.n	3256a <_http_client_request+0xba>
   32568:	e1b3      	b.n	328d2 <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   3256a:	e32f      	b.n	32bcc <_http_client_request+0x71c>
		module->req.content_length = 0;
   3256c:	69fb      	ldr	r3, [r7, #28]
   3256e:	22cc      	movs	r2, #204	; 0xcc
   32570:	2100      	movs	r1, #0
   32572:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   32574:	69fb      	ldr	r3, [r7, #28]
   32576:	22d0      	movs	r2, #208	; 0xd0
   32578:	2100      	movs	r1, #0
   3257a:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   3257c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   3257e:	69fb      	ldr	r3, [r7, #28]
   32580:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   32582:	4c90      	ldr	r4, [pc, #576]	; (327c4 <_http_client_request+0x314>)
   32584:	2334      	movs	r3, #52	; 0x34
   32586:	2018      	movs	r0, #24
   32588:	1838      	adds	r0, r7, r0
   3258a:	18c0      	adds	r0, r0, r3
   3258c:	69fb      	ldr	r3, [r7, #28]
   3258e:	9300      	str	r3, [sp, #0]
   32590:	0023      	movs	r3, r4
   32592:	4c8d      	ldr	r4, [pc, #564]	; (327c8 <_http_client_request+0x318>)
   32594:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   32596:	69fb      	ldr	r3, [r7, #28]
   32598:	22c8      	movs	r2, #200	; 0xc8
   3259a:	5c9b      	ldrb	r3, [r3, r2]
   3259c:	2b01      	cmp	r3, #1
   3259e:	d10a      	bne.n	325b6 <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   325a0:	498a      	ldr	r1, [pc, #552]	; (327cc <_http_client_request+0x31c>)
   325a2:	2334      	movs	r3, #52	; 0x34
   325a4:	2218      	movs	r2, #24
   325a6:	4694      	mov	ip, r2
   325a8:	44bc      	add	ip, r7
   325aa:	4463      	add	r3, ip
   325ac:	2204      	movs	r2, #4
   325ae:	0018      	movs	r0, r3
   325b0:	4b87      	ldr	r3, [pc, #540]	; (327d0 <_http_client_request+0x320>)
   325b2:	4798      	blx	r3
   325b4:	e04e      	b.n	32654 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   325b6:	69fb      	ldr	r3, [r7, #28]
   325b8:	22c8      	movs	r2, #200	; 0xc8
   325ba:	5c9b      	ldrb	r3, [r3, r2]
   325bc:	2b02      	cmp	r3, #2
   325be:	d10a      	bne.n	325d6 <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   325c0:	4984      	ldr	r1, [pc, #528]	; (327d4 <_http_client_request+0x324>)
   325c2:	2334      	movs	r3, #52	; 0x34
   325c4:	2218      	movs	r2, #24
   325c6:	4694      	mov	ip, r2
   325c8:	44bc      	add	ip, r7
   325ca:	4463      	add	r3, ip
   325cc:	2205      	movs	r2, #5
   325ce:	0018      	movs	r0, r3
   325d0:	4b7f      	ldr	r3, [pc, #508]	; (327d0 <_http_client_request+0x320>)
   325d2:	4798      	blx	r3
   325d4:	e03e      	b.n	32654 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   325d6:	69fb      	ldr	r3, [r7, #28]
   325d8:	22c8      	movs	r2, #200	; 0xc8
   325da:	5c9b      	ldrb	r3, [r3, r2]
   325dc:	2b03      	cmp	r3, #3
   325de:	d10a      	bne.n	325f6 <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   325e0:	497d      	ldr	r1, [pc, #500]	; (327d8 <_http_client_request+0x328>)
   325e2:	2334      	movs	r3, #52	; 0x34
   325e4:	2218      	movs	r2, #24
   325e6:	4694      	mov	ip, r2
   325e8:	44bc      	add	ip, r7
   325ea:	4463      	add	r3, ip
   325ec:	2207      	movs	r2, #7
   325ee:	0018      	movs	r0, r3
   325f0:	4b77      	ldr	r3, [pc, #476]	; (327d0 <_http_client_request+0x320>)
   325f2:	4798      	blx	r3
   325f4:	e02e      	b.n	32654 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   325f6:	69fb      	ldr	r3, [r7, #28]
   325f8:	22c8      	movs	r2, #200	; 0xc8
   325fa:	5c9b      	ldrb	r3, [r3, r2]
   325fc:	2b04      	cmp	r3, #4
   325fe:	d10a      	bne.n	32616 <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   32600:	4976      	ldr	r1, [pc, #472]	; (327dc <_http_client_request+0x32c>)
   32602:	2334      	movs	r3, #52	; 0x34
   32604:	2218      	movs	r2, #24
   32606:	4694      	mov	ip, r2
   32608:	44bc      	add	ip, r7
   3260a:	4463      	add	r3, ip
   3260c:	2204      	movs	r2, #4
   3260e:	0018      	movs	r0, r3
   32610:	4b6f      	ldr	r3, [pc, #444]	; (327d0 <_http_client_request+0x320>)
   32612:	4798      	blx	r3
   32614:	e01e      	b.n	32654 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   32616:	69fb      	ldr	r3, [r7, #28]
   32618:	22c8      	movs	r2, #200	; 0xc8
   3261a:	5c9b      	ldrb	r3, [r3, r2]
   3261c:	2b05      	cmp	r3, #5
   3261e:	d10a      	bne.n	32636 <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   32620:	496f      	ldr	r1, [pc, #444]	; (327e0 <_http_client_request+0x330>)
   32622:	2334      	movs	r3, #52	; 0x34
   32624:	2218      	movs	r2, #24
   32626:	4694      	mov	ip, r2
   32628:	44bc      	add	ip, r7
   3262a:	4463      	add	r3, ip
   3262c:	2208      	movs	r2, #8
   3262e:	0018      	movs	r0, r3
   32630:	4b67      	ldr	r3, [pc, #412]	; (327d0 <_http_client_request+0x320>)
   32632:	4798      	blx	r3
   32634:	e00e      	b.n	32654 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   32636:	69fb      	ldr	r3, [r7, #28]
   32638:	22c8      	movs	r2, #200	; 0xc8
   3263a:	5c9b      	ldrb	r3, [r3, r2]
   3263c:	2b06      	cmp	r3, #6
   3263e:	d109      	bne.n	32654 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   32640:	4968      	ldr	r1, [pc, #416]	; (327e4 <_http_client_request+0x334>)
   32642:	2334      	movs	r3, #52	; 0x34
   32644:	2218      	movs	r2, #24
   32646:	4694      	mov	ip, r2
   32648:	44bc      	add	ip, r7
   3264a:	4463      	add	r3, ip
   3264c:	2205      	movs	r2, #5
   3264e:	0018      	movs	r0, r3
   32650:	4b5f      	ldr	r3, [pc, #380]	; (327d0 <_http_client_request+0x320>)
   32652:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   32654:	69fb      	ldr	r3, [r7, #28]
   32656:	3370      	adds	r3, #112	; 0x70
   32658:	001c      	movs	r4, r3
   3265a:	69fb      	ldr	r3, [r7, #28]
   3265c:	3370      	adds	r3, #112	; 0x70
   3265e:	0018      	movs	r0, r3
   32660:	4b61      	ldr	r3, [pc, #388]	; (327e8 <_http_client_request+0x338>)
   32662:	4798      	blx	r3
   32664:	0002      	movs	r2, r0
   32666:	2334      	movs	r3, #52	; 0x34
   32668:	2118      	movs	r1, #24
   3266a:	468c      	mov	ip, r1
   3266c:	44bc      	add	ip, r7
   3266e:	4463      	add	r3, ip
   32670:	0021      	movs	r1, r4
   32672:	0018      	movs	r0, r3
   32674:	4b56      	ldr	r3, [pc, #344]	; (327d0 <_http_client_request+0x320>)
   32676:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   32678:	495c      	ldr	r1, [pc, #368]	; (327ec <_http_client_request+0x33c>)
   3267a:	2334      	movs	r3, #52	; 0x34
   3267c:	2218      	movs	r2, #24
   3267e:	4694      	mov	ip, r2
   32680:	44bc      	add	ip, r7
   32682:	4463      	add	r3, ip
   32684:	220b      	movs	r2, #11
   32686:	0018      	movs	r0, r3
   32688:	4b51      	ldr	r3, [pc, #324]	; (327d0 <_http_client_request+0x320>)
   3268a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   3268c:	4958      	ldr	r1, [pc, #352]	; (327f0 <_http_client_request+0x340>)
   3268e:	2334      	movs	r3, #52	; 0x34
   32690:	2218      	movs	r2, #24
   32692:	4694      	mov	ip, r2
   32694:	44bc      	add	ip, r7
   32696:	4463      	add	r3, ip
   32698:	220c      	movs	r2, #12
   3269a:	0018      	movs	r0, r3
   3269c:	4b4c      	ldr	r3, [pc, #304]	; (327d0 <_http_client_request+0x320>)
   3269e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   326a0:	69fb      	ldr	r3, [r7, #28]
   326a2:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   326a4:	69fb      	ldr	r3, [r7, #28]
   326a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   326a8:	0018      	movs	r0, r3
   326aa:	4b4f      	ldr	r3, [pc, #316]	; (327e8 <_http_client_request+0x338>)
   326ac:	4798      	blx	r3
   326ae:	0002      	movs	r2, r0
   326b0:	2334      	movs	r3, #52	; 0x34
   326b2:	2118      	movs	r1, #24
   326b4:	468c      	mov	ip, r1
   326b6:	44bc      	add	ip, r7
   326b8:	4463      	add	r3, ip
   326ba:	0021      	movs	r1, r4
   326bc:	0018      	movs	r0, r3
   326be:	4b44      	ldr	r3, [pc, #272]	; (327d0 <_http_client_request+0x320>)
   326c0:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   326c2:	494c      	ldr	r1, [pc, #304]	; (327f4 <_http_client_request+0x344>)
   326c4:	2334      	movs	r3, #52	; 0x34
   326c6:	2218      	movs	r2, #24
   326c8:	4694      	mov	ip, r2
   326ca:	44bc      	add	ip, r7
   326cc:	4463      	add	r3, ip
   326ce:	2202      	movs	r2, #2
   326d0:	0018      	movs	r0, r3
   326d2:	4b3f      	ldr	r3, [pc, #252]	; (327d0 <_http_client_request+0x320>)
   326d4:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   326d6:	4948      	ldr	r1, [pc, #288]	; (327f8 <_http_client_request+0x348>)
   326d8:	2334      	movs	r3, #52	; 0x34
   326da:	2218      	movs	r2, #24
   326dc:	4694      	mov	ip, r2
   326de:	44bc      	add	ip, r7
   326e0:	4463      	add	r3, ip
   326e2:	2206      	movs	r2, #6
   326e4:	0018      	movs	r0, r3
   326e6:	4b3a      	ldr	r3, [pc, #232]	; (327d0 <_http_client_request+0x320>)
   326e8:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   326ea:	69fb      	ldr	r3, [r7, #28]
   326ec:	1c5c      	adds	r4, r3, #1
   326ee:	69fb      	ldr	r3, [r7, #28]
   326f0:	3301      	adds	r3, #1
   326f2:	0018      	movs	r0, r3
   326f4:	4b3c      	ldr	r3, [pc, #240]	; (327e8 <_http_client_request+0x338>)
   326f6:	4798      	blx	r3
   326f8:	0002      	movs	r2, r0
   326fa:	2334      	movs	r3, #52	; 0x34
   326fc:	2118      	movs	r1, #24
   326fe:	468c      	mov	ip, r1
   32700:	44bc      	add	ip, r7
   32702:	4463      	add	r3, ip
   32704:	0021      	movs	r1, r4
   32706:	0018      	movs	r0, r3
   32708:	4b31      	ldr	r3, [pc, #196]	; (327d0 <_http_client_request+0x320>)
   3270a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   3270c:	4939      	ldr	r1, [pc, #228]	; (327f4 <_http_client_request+0x344>)
   3270e:	2334      	movs	r3, #52	; 0x34
   32710:	2218      	movs	r2, #24
   32712:	4694      	mov	ip, r2
   32714:	44bc      	add	ip, r7
   32716:	4463      	add	r3, ip
   32718:	2202      	movs	r2, #2
   3271a:	0018      	movs	r0, r3
   3271c:	4b2c      	ldr	r3, [pc, #176]	; (327d0 <_http_client_request+0x320>)
   3271e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   32720:	4936      	ldr	r1, [pc, #216]	; (327fc <_http_client_request+0x34c>)
   32722:	2334      	movs	r3, #52	; 0x34
   32724:	2218      	movs	r2, #24
   32726:	4694      	mov	ip, r2
   32728:	44bc      	add	ip, r7
   3272a:	4463      	add	r3, ip
   3272c:	2218      	movs	r2, #24
   3272e:	0018      	movs	r0, r3
   32730:	4b27      	ldr	r3, [pc, #156]	; (327d0 <_http_client_request+0x320>)
   32732:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   32734:	4932      	ldr	r1, [pc, #200]	; (32800 <_http_client_request+0x350>)
   32736:	2334      	movs	r3, #52	; 0x34
   32738:	2218      	movs	r2, #24
   3273a:	4694      	mov	ip, r2
   3273c:	44bc      	add	ip, r7
   3273e:	4463      	add	r3, ip
   32740:	2213      	movs	r2, #19
   32742:	0018      	movs	r0, r3
   32744:	4b22      	ldr	r3, [pc, #136]	; (327d0 <_http_client_request+0x320>)
   32746:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   32748:	492e      	ldr	r1, [pc, #184]	; (32804 <_http_client_request+0x354>)
   3274a:	2334      	movs	r3, #52	; 0x34
   3274c:	2218      	movs	r2, #24
   3274e:	4694      	mov	ip, r2
   32750:	44bc      	add	ip, r7
   32752:	4463      	add	r3, ip
   32754:	2217      	movs	r2, #23
   32756:	0018      	movs	r0, r3
   32758:	4b1d      	ldr	r3, [pc, #116]	; (327d0 <_http_client_request+0x320>)
   3275a:	4798      	blx	r3
		if (entity->read != NULL) {
   3275c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3275e:	68db      	ldr	r3, [r3, #12]
   32760:	2b00      	cmp	r3, #0
   32762:	d100      	bne.n	32766 <_http_client_request+0x2b6>
   32764:	e088      	b.n	32878 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   32766:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32768:	781b      	ldrb	r3, [r3, #0]
   3276a:	2b00      	cmp	r3, #0
   3276c:	d00f      	beq.n	3278e <_http_client_request+0x2de>
				module->req.content_length = -1;
   3276e:	69fb      	ldr	r3, [r7, #28]
   32770:	21cc      	movs	r1, #204	; 0xcc
   32772:	2201      	movs	r2, #1
   32774:	4252      	negs	r2, r2
   32776:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   32778:	4923      	ldr	r1, [pc, #140]	; (32808 <_http_client_request+0x358>)
   3277a:	2334      	movs	r3, #52	; 0x34
   3277c:	2218      	movs	r2, #24
   3277e:	4694      	mov	ip, r2
   32780:	44bc      	add	ip, r7
   32782:	4463      	add	r3, ip
   32784:	221c      	movs	r2, #28
   32786:	0018      	movs	r0, r3
   32788:	4b11      	ldr	r3, [pc, #68]	; (327d0 <_http_client_request+0x320>)
   3278a:	4798      	blx	r3
   3278c:	e074      	b.n	32878 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   3278e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32790:	689b      	ldr	r3, [r3, #8]
   32792:	2b00      	cmp	r3, #0
   32794:	d070      	beq.n	32878 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   32796:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32798:	689a      	ldr	r2, [r3, #8]
   3279a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3279c:	695b      	ldr	r3, [r3, #20]
   3279e:	0018      	movs	r0, r3
   327a0:	4790      	blx	r2
   327a2:	0001      	movs	r1, r0
   327a4:	69fb      	ldr	r3, [r7, #28]
   327a6:	22cc      	movs	r2, #204	; 0xcc
   327a8:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   327aa:	69fb      	ldr	r3, [r7, #28]
   327ac:	22cc      	movs	r2, #204	; 0xcc
   327ae:	589b      	ldr	r3, [r3, r2]
   327b0:	2b00      	cmp	r3, #0
   327b2:	da2b      	bge.n	3280c <_http_client_request+0x35c>
					module->req.content_length = 0;
   327b4:	69fb      	ldr	r3, [r7, #28]
   327b6:	22cc      	movs	r2, #204	; 0xcc
   327b8:	2100      	movs	r1, #0
   327ba:	5099      	str	r1, [r3, r2]
   327bc:	e05c      	b.n	32878 <_http_client_request+0x3c8>
   327be:	46c0      	nop			; (mov r8, r8)
   327c0:	0003bbac 	.word	0x0003bbac
   327c4:	00032429 	.word	0x00032429
   327c8:	00033391 	.word	0x00033391
   327cc:	0003bad0 	.word	0x0003bad0
   327d0:	00033411 	.word	0x00033411
   327d4:	0003bad8 	.word	0x0003bad8
   327d8:	0003bae0 	.word	0x0003bae0
   327dc:	0003bae8 	.word	0x0003bae8
   327e0:	0003baf0 	.word	0x0003baf0
   327e4:	0003bafc 	.word	0x0003bafc
   327e8:	000367f7 	.word	0x000367f7
   327ec:	0003bb04 	.word	0x0003bb04
   327f0:	0003bb10 	.word	0x0003bb10
   327f4:	0003bb20 	.word	0x0003bb20
   327f8:	0003bb24 	.word	0x0003bb24
   327fc:	0003bb2c 	.word	0x0003bb2c
   32800:	0003bb48 	.word	0x0003bb48
   32804:	0003bb5c 	.word	0x0003bb5c
   32808:	0003bb74 	.word	0x0003bb74
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   3280c:	69fb      	ldr	r3, [r7, #28]
   3280e:	22cc      	movs	r2, #204	; 0xcc
   32810:	589b      	ldr	r3, [r3, r2]
   32812:	001a      	movs	r2, r3
   32814:	49e0      	ldr	r1, [pc, #896]	; (32b98 <_http_client_request+0x6e8>)
   32816:	2328      	movs	r3, #40	; 0x28
   32818:	2018      	movs	r0, #24
   3281a:	4684      	mov	ip, r0
   3281c:	44bc      	add	ip, r7
   3281e:	4463      	add	r3, ip
   32820:	0018      	movs	r0, r3
   32822:	4bde      	ldr	r3, [pc, #888]	; (32b9c <_http_client_request+0x6ec>)
   32824:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   32826:	49de      	ldr	r1, [pc, #888]	; (32ba0 <_http_client_request+0x6f0>)
   32828:	2334      	movs	r3, #52	; 0x34
   3282a:	2218      	movs	r2, #24
   3282c:	4694      	mov	ip, r2
   3282e:	44bc      	add	ip, r7
   32830:	4463      	add	r3, ip
   32832:	2210      	movs	r2, #16
   32834:	0018      	movs	r0, r3
   32836:	4bdb      	ldr	r3, [pc, #876]	; (32ba4 <_http_client_request+0x6f4>)
   32838:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   3283a:	2328      	movs	r3, #40	; 0x28
   3283c:	2218      	movs	r2, #24
   3283e:	4694      	mov	ip, r2
   32840:	44bc      	add	ip, r7
   32842:	4463      	add	r3, ip
   32844:	0018      	movs	r0, r3
   32846:	4bd8      	ldr	r3, [pc, #864]	; (32ba8 <_http_client_request+0x6f8>)
   32848:	4798      	blx	r3
   3284a:	0002      	movs	r2, r0
   3284c:	2328      	movs	r3, #40	; 0x28
   3284e:	2118      	movs	r1, #24
   32850:	1879      	adds	r1, r7, r1
   32852:	18c9      	adds	r1, r1, r3
   32854:	2334      	movs	r3, #52	; 0x34
   32856:	2018      	movs	r0, #24
   32858:	4684      	mov	ip, r0
   3285a:	44bc      	add	ip, r7
   3285c:	4463      	add	r3, ip
   3285e:	0018      	movs	r0, r3
   32860:	4bd0      	ldr	r3, [pc, #832]	; (32ba4 <_http_client_request+0x6f4>)
   32862:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   32864:	49d1      	ldr	r1, [pc, #836]	; (32bac <_http_client_request+0x6fc>)
   32866:	2334      	movs	r3, #52	; 0x34
   32868:	2218      	movs	r2, #24
   3286a:	4694      	mov	ip, r2
   3286c:	44bc      	add	ip, r7
   3286e:	4463      	add	r3, ip
   32870:	2202      	movs	r2, #2
   32872:	0018      	movs	r0, r3
   32874:	4bcb      	ldr	r3, [pc, #812]	; (32ba4 <_http_client_request+0x6f4>)
   32876:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   32878:	69fb      	ldr	r3, [r7, #28]
   3287a:	22d4      	movs	r2, #212	; 0xd4
   3287c:	589b      	ldr	r3, [r3, r2]
   3287e:	2b00      	cmp	r3, #0
   32880:	d012      	beq.n	328a8 <_http_client_request+0x3f8>
				module->req.ext_header,
   32882:	69fb      	ldr	r3, [r7, #28]
   32884:	22d4      	movs	r2, #212	; 0xd4
   32886:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   32888:	69fb      	ldr	r3, [r7, #28]
   3288a:	22d4      	movs	r2, #212	; 0xd4
   3288c:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   3288e:	0018      	movs	r0, r3
   32890:	4bc5      	ldr	r3, [pc, #788]	; (32ba8 <_http_client_request+0x6f8>)
   32892:	4798      	blx	r3
   32894:	0002      	movs	r2, r0
   32896:	2334      	movs	r3, #52	; 0x34
   32898:	2118      	movs	r1, #24
   3289a:	468c      	mov	ip, r1
   3289c:	44bc      	add	ip, r7
   3289e:	4463      	add	r3, ip
   328a0:	0021      	movs	r1, r4
   328a2:	0018      	movs	r0, r3
   328a4:	4bbf      	ldr	r3, [pc, #764]	; (32ba4 <_http_client_request+0x6f4>)
   328a6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   328a8:	49c0      	ldr	r1, [pc, #768]	; (32bac <_http_client_request+0x6fc>)
   328aa:	2334      	movs	r3, #52	; 0x34
   328ac:	2218      	movs	r2, #24
   328ae:	4694      	mov	ip, r2
   328b0:	44bc      	add	ip, r7
   328b2:	4463      	add	r3, ip
   328b4:	2202      	movs	r2, #2
   328b6:	0018      	movs	r0, r3
   328b8:	4bba      	ldr	r3, [pc, #744]	; (32ba4 <_http_client_request+0x6f4>)
   328ba:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   328bc:	2334      	movs	r3, #52	; 0x34
   328be:	2218      	movs	r2, #24
   328c0:	4694      	mov	ip, r2
   328c2:	44bc      	add	ip, r7
   328c4:	4463      	add	r3, ip
   328c6:	0018      	movs	r0, r3
   328c8:	4bb9      	ldr	r3, [pc, #740]	; (32bb0 <_http_client_request+0x700>)
   328ca:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   328cc:	69fb      	ldr	r3, [r7, #28]
   328ce:	2204      	movs	r2, #4
   328d0:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   328d2:	69fb      	ldr	r3, [r7, #28]
   328d4:	22cc      	movs	r2, #204	; 0xcc
   328d6:	589b      	ldr	r3, [r3, r2]
   328d8:	2b00      	cmp	r3, #0
   328da:	db00      	blt.n	328de <_http_client_request+0x42e>
   328dc:	e0c6      	b.n	32a6c <_http_client_request+0x5bc>
   328de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   328e0:	68db      	ldr	r3, [r3, #12]
   328e2:	2b00      	cmp	r3, #0
   328e4:	d100      	bne.n	328e8 <_http_client_request+0x438>
   328e6:	e0c1      	b.n	32a6c <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   328e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   328ea:	68dc      	ldr	r4, [r3, #12]
   328ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   328ee:	6958      	ldr	r0, [r3, #20]
   328f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   328f2:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   328f4:	69fb      	ldr	r3, [r7, #28]
   328f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   328f8:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   328fa:	69fb      	ldr	r3, [r7, #28]
   328fc:	22d0      	movs	r2, #208	; 0xd0
   328fe:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   32900:	002a      	movs	r2, r5
   32902:	47a0      	blx	r4
   32904:	0003      	movs	r3, r0
   32906:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   32908:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3290a:	2b00      	cmp	r3, #0
   3290c:	da01      	bge.n	32912 <_http_client_request+0x462>
				size = 0;
   3290e:	2300      	movs	r3, #0
   32910:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   32912:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   32914:	220a      	movs	r2, #10
   32916:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   32918:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3291a:	220d      	movs	r2, #13
   3291c:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   3291e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32920:	3305      	adds	r3, #5
   32922:	6eba      	ldr	r2, [r7, #104]	; 0x68
   32924:	210d      	movs	r1, #13
   32926:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   32928:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3292a:	3306      	adds	r3, #6
   3292c:	6eba      	ldr	r2, [r7, #104]	; 0x68
   3292e:	210a      	movs	r1, #10
   32930:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   32932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32934:	2b00      	cmp	r3, #0
   32936:	db14      	blt.n	32962 <_http_client_request+0x4b2>
				ptr = buffer + 2;
   32938:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3293a:	3302      	adds	r3, #2
   3293c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   3293e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32940:	4a9c      	ldr	r2, [pc, #624]	; (32bb4 <_http_client_request+0x704>)
   32942:	4013      	ands	r3, r2
   32944:	d504      	bpl.n	32950 <_http_client_request+0x4a0>
   32946:	3b01      	subs	r3, #1
   32948:	2210      	movs	r2, #16
   3294a:	4252      	negs	r2, r2
   3294c:	4313      	orrs	r3, r2
   3294e:	3301      	adds	r3, #1
   32950:	001a      	movs	r2, r3
   32952:	2318      	movs	r3, #24
   32954:	2118      	movs	r1, #24
   32956:	468c      	mov	ip, r1
   32958:	44bc      	add	ip, r7
   3295a:	4463      	add	r3, ip
   3295c:	5c9a      	ldrb	r2, [r3, r2]
   3295e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   32960:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   32962:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32964:	2b0f      	cmp	r3, #15
   32966:	dd19      	ble.n	3299c <_http_client_request+0x4ec>
				ptr = buffer + 1;
   32968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3296a:	3301      	adds	r3, #1
   3296c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   3296e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32970:	2b00      	cmp	r3, #0
   32972:	da00      	bge.n	32976 <_http_client_request+0x4c6>
   32974:	330f      	adds	r3, #15
   32976:	111b      	asrs	r3, r3, #4
   32978:	001a      	movs	r2, r3
   3297a:	4b8e      	ldr	r3, [pc, #568]	; (32bb4 <_http_client_request+0x704>)
   3297c:	4013      	ands	r3, r2
   3297e:	d504      	bpl.n	3298a <_http_client_request+0x4da>
   32980:	3b01      	subs	r3, #1
   32982:	2210      	movs	r2, #16
   32984:	4252      	negs	r2, r2
   32986:	4313      	orrs	r3, r2
   32988:	3301      	adds	r3, #1
   3298a:	001a      	movs	r2, r3
   3298c:	2318      	movs	r3, #24
   3298e:	2118      	movs	r1, #24
   32990:	468c      	mov	ip, r1
   32992:	44bc      	add	ip, r7
   32994:	4463      	add	r3, ip
   32996:	5c9a      	ldrb	r2, [r3, r2]
   32998:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   3299a:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   3299c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3299e:	2bff      	cmp	r3, #255	; 0xff
   329a0:	dd18      	ble.n	329d4 <_http_client_request+0x524>
				ptr = buffer;
   329a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   329a4:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   329a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   329a8:	2b00      	cmp	r3, #0
   329aa:	da00      	bge.n	329ae <_http_client_request+0x4fe>
   329ac:	33ff      	adds	r3, #255	; 0xff
   329ae:	121b      	asrs	r3, r3, #8
   329b0:	001a      	movs	r2, r3
   329b2:	4b80      	ldr	r3, [pc, #512]	; (32bb4 <_http_client_request+0x704>)
   329b4:	4013      	ands	r3, r2
   329b6:	d504      	bpl.n	329c2 <_http_client_request+0x512>
   329b8:	3b01      	subs	r3, #1
   329ba:	2210      	movs	r2, #16
   329bc:	4252      	negs	r2, r2
   329be:	4313      	orrs	r3, r2
   329c0:	3301      	adds	r3, #1
   329c2:	001a      	movs	r2, r3
   329c4:	2318      	movs	r3, #24
   329c6:	2118      	movs	r1, #24
   329c8:	468c      	mov	ip, r1
   329ca:	44bc      	add	ip, r7
   329cc:	4463      	add	r3, ip
   329ce:	5c9a      	ldrb	r2, [r3, r2]
   329d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   329d2:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   329d4:	69fb      	ldr	r3, [r7, #28]
   329d6:	2000      	movs	r0, #0
   329d8:	5618      	ldrsb	r0, [r3, r0]
   329da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   329dc:	3303      	adds	r3, #3
   329de:	001a      	movs	r2, r3
   329e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   329e2:	1ad3      	subs	r3, r2, r3
   329e4:	b29a      	uxth	r2, r3
   329e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   329e8:	b29b      	uxth	r3, r3
   329ea:	18d3      	adds	r3, r2, r3
   329ec:	b29b      	uxth	r3, r3
   329ee:	3304      	adds	r3, #4
   329f0:	b29a      	uxth	r2, r3
   329f2:	6f39      	ldr	r1, [r7, #112]	; 0x70
   329f4:	2300      	movs	r3, #0
   329f6:	4c70      	ldr	r4, [pc, #448]	; (32bb8 <_http_client_request+0x708>)
   329f8:	47a0      	blx	r4
   329fa:	0003      	movs	r3, r0
   329fc:	663b      	str	r3, [r7, #96]	; 0x60
   329fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   32a00:	2b00      	cmp	r3, #0
   32a02:	da07      	bge.n	32a14 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   32a04:	2305      	movs	r3, #5
   32a06:	425a      	negs	r2, r3
   32a08:	69fb      	ldr	r3, [r7, #28]
   32a0a:	0011      	movs	r1, r2
   32a0c:	0018      	movs	r0, r3
   32a0e:	4b6b      	ldr	r3, [pc, #428]	; (32bbc <_http_client_request+0x70c>)
   32a10:	4798      	blx	r3
				return;
   32a12:	e0e1      	b.n	32bd8 <_http_client_request+0x728>
			module->req.sent_length += size;
   32a14:	69fb      	ldr	r3, [r7, #28]
   32a16:	22d0      	movs	r2, #208	; 0xd0
   32a18:	589a      	ldr	r2, [r3, r2]
   32a1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32a1c:	18d2      	adds	r2, r2, r3
   32a1e:	69fb      	ldr	r3, [r7, #28]
   32a20:	21d0      	movs	r1, #208	; 0xd0
   32a22:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   32a24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32a26:	2b00      	cmp	r3, #0
   32a28:	d000      	beq.n	32a2c <_http_client_request+0x57c>
   32a2a:	e0c9      	b.n	32bc0 <_http_client_request+0x710>
				if (module->req.entity.close) {
   32a2c:	69fb      	ldr	r3, [r7, #28]
   32a2e:	22c0      	movs	r2, #192	; 0xc0
   32a30:	589b      	ldr	r3, [r3, r2]
   32a32:	2b00      	cmp	r3, #0
   32a34:	d007      	beq.n	32a46 <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   32a36:	69fb      	ldr	r3, [r7, #28]
   32a38:	22c0      	movs	r2, #192	; 0xc0
   32a3a:	589b      	ldr	r3, [r3, r2]
   32a3c:	69fa      	ldr	r2, [r7, #28]
   32a3e:	21c4      	movs	r1, #196	; 0xc4
   32a40:	5852      	ldr	r2, [r2, r1]
   32a42:	0010      	movs	r0, r2
   32a44:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   32a46:	69fb      	ldr	r3, [r7, #28]
   32a48:	2202      	movs	r2, #2
   32a4a:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   32a4c:	69fb      	ldr	r3, [r7, #28]
   32a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32a50:	2b00      	cmp	r3, #0
   32a52:	d100      	bne.n	32a56 <_http_client_request+0x5a6>
   32a54:	e0b5      	b.n	32bc2 <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   32a56:	69fb      	ldr	r3, [r7, #28]
   32a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32a5a:	220c      	movs	r2, #12
   32a5c:	2118      	movs	r1, #24
   32a5e:	468c      	mov	ip, r1
   32a60:	44bc      	add	ip, r7
   32a62:	4462      	add	r2, ip
   32a64:	69f8      	ldr	r0, [r7, #28]
   32a66:	2101      	movs	r1, #1
   32a68:	4798      	blx	r3
				break;
   32a6a:	e0aa      	b.n	32bc2 <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   32a6c:	69fb      	ldr	r3, [r7, #28]
   32a6e:	22cc      	movs	r2, #204	; 0xcc
   32a70:	589b      	ldr	r3, [r3, r2]
   32a72:	2b00      	cmp	r3, #0
   32a74:	dc00      	bgt.n	32a78 <_http_client_request+0x5c8>
   32a76:	e07c      	b.n	32b72 <_http_client_request+0x6c2>
   32a78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32a7a:	68db      	ldr	r3, [r3, #12]
   32a7c:	2b00      	cmp	r3, #0
   32a7e:	d100      	bne.n	32a82 <_http_client_request+0x5d2>
   32a80:	e077      	b.n	32b72 <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   32a82:	69fb      	ldr	r3, [r7, #28]
   32a84:	22d0      	movs	r2, #208	; 0xd0
   32a86:	589a      	ldr	r2, [r3, r2]
   32a88:	69fb      	ldr	r3, [r7, #28]
   32a8a:	21cc      	movs	r1, #204	; 0xcc
   32a8c:	585b      	ldr	r3, [r3, r1]
   32a8e:	429a      	cmp	r2, r3
   32a90:	db1f      	blt.n	32ad2 <_http_client_request+0x622>
				if (module->req.entity.close) {
   32a92:	69fb      	ldr	r3, [r7, #28]
   32a94:	22c0      	movs	r2, #192	; 0xc0
   32a96:	589b      	ldr	r3, [r3, r2]
   32a98:	2b00      	cmp	r3, #0
   32a9a:	d007      	beq.n	32aac <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   32a9c:	69fb      	ldr	r3, [r7, #28]
   32a9e:	22c0      	movs	r2, #192	; 0xc0
   32aa0:	589b      	ldr	r3, [r3, r2]
   32aa2:	69fa      	ldr	r2, [r7, #28]
   32aa4:	21c4      	movs	r1, #196	; 0xc4
   32aa6:	5852      	ldr	r2, [r2, r1]
   32aa8:	0010      	movs	r0, r2
   32aaa:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   32aac:	69fb      	ldr	r3, [r7, #28]
   32aae:	2202      	movs	r2, #2
   32ab0:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   32ab2:	69fb      	ldr	r3, [r7, #28]
   32ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32ab6:	2b00      	cmp	r3, #0
   32ab8:	d100      	bne.n	32abc <_http_client_request+0x60c>
   32aba:	e084      	b.n	32bc6 <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   32abc:	69fb      	ldr	r3, [r7, #28]
   32abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32ac0:	220c      	movs	r2, #12
   32ac2:	2118      	movs	r1, #24
   32ac4:	468c      	mov	ip, r1
   32ac6:	44bc      	add	ip, r7
   32ac8:	4462      	add	r2, ip
   32aca:	69f8      	ldr	r0, [r7, #28]
   32acc:	2101      	movs	r1, #1
   32ace:	4798      	blx	r3
				break;
   32ad0:	e079      	b.n	32bc6 <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   32ad2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32ad4:	68dc      	ldr	r4, [r3, #12]
   32ad6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32ad8:	6958      	ldr	r0, [r3, #20]
   32ada:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   32adc:	69fb      	ldr	r3, [r7, #28]
   32ade:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   32ae0:	69fb      	ldr	r3, [r7, #28]
   32ae2:	22d0      	movs	r2, #208	; 0xd0
   32ae4:	589b      	ldr	r3, [r3, r2]
   32ae6:	002a      	movs	r2, r5
   32ae8:	47a0      	blx	r4
   32aea:	0003      	movs	r3, r0
   32aec:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   32aee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32af0:	2b00      	cmp	r3, #0
   32af2:	da0d      	bge.n	32b10 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   32af4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32af6:	2b00      	cmp	r3, #0
   32af8:	d102      	bne.n	32b00 <_http_client_request+0x650>
   32afa:	234d      	movs	r3, #77	; 0x4d
   32afc:	425b      	negs	r3, r3
   32afe:	e001      	b.n	32b04 <_http_client_request+0x654>
   32b00:	2305      	movs	r3, #5
   32b02:	425b      	negs	r3, r3
   32b04:	69fa      	ldr	r2, [r7, #28]
   32b06:	0019      	movs	r1, r3
   32b08:	0010      	movs	r0, r2
   32b0a:	4b2c      	ldr	r3, [pc, #176]	; (32bbc <_http_client_request+0x70c>)
   32b0c:	4798      	blx	r3
			if (size < 0) {
   32b0e:	e057      	b.n	32bc0 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   32b10:	69fb      	ldr	r3, [r7, #28]
   32b12:	22cc      	movs	r2, #204	; 0xcc
   32b14:	589a      	ldr	r2, [r3, r2]
   32b16:	69fb      	ldr	r3, [r7, #28]
   32b18:	21d0      	movs	r1, #208	; 0xd0
   32b1a:	585b      	ldr	r3, [r3, r1]
   32b1c:	1ad2      	subs	r2, r2, r3
   32b1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32b20:	429a      	cmp	r2, r3
   32b22:	da07      	bge.n	32b34 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   32b24:	69fb      	ldr	r3, [r7, #28]
   32b26:	22cc      	movs	r2, #204	; 0xcc
   32b28:	589a      	ldr	r2, [r3, r2]
   32b2a:	69fb      	ldr	r3, [r7, #28]
   32b2c:	21d0      	movs	r1, #208	; 0xd0
   32b2e:	585b      	ldr	r3, [r3, r1]
   32b30:	1ad3      	subs	r3, r2, r3
   32b32:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   32b34:	69fb      	ldr	r3, [r7, #28]
   32b36:	2000      	movs	r0, #0
   32b38:	5618      	ldrsb	r0, [r3, r0]
   32b3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   32b3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32b3e:	b29a      	uxth	r2, r3
   32b40:	2300      	movs	r3, #0
   32b42:	4c1d      	ldr	r4, [pc, #116]	; (32bb8 <_http_client_request+0x708>)
   32b44:	47a0      	blx	r4
   32b46:	0003      	movs	r3, r0
   32b48:	663b      	str	r3, [r7, #96]	; 0x60
   32b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   32b4c:	2b00      	cmp	r3, #0
   32b4e:	da07      	bge.n	32b60 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   32b50:	2305      	movs	r3, #5
   32b52:	425a      	negs	r2, r3
   32b54:	69fb      	ldr	r3, [r7, #28]
   32b56:	0011      	movs	r1, r2
   32b58:	0018      	movs	r0, r3
   32b5a:	4b18      	ldr	r3, [pc, #96]	; (32bbc <_http_client_request+0x70c>)
   32b5c:	4798      	blx	r3
					return;
   32b5e:	e03b      	b.n	32bd8 <_http_client_request+0x728>
				module->req.sent_length += size;
   32b60:	69fb      	ldr	r3, [r7, #28]
   32b62:	22d0      	movs	r2, #208	; 0xd0
   32b64:	589a      	ldr	r2, [r3, r2]
   32b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32b68:	18d2      	adds	r2, r2, r3
   32b6a:	69fb      	ldr	r3, [r7, #28]
   32b6c:	21d0      	movs	r1, #208	; 0xd0
   32b6e:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   32b70:	e026      	b.n	32bc0 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   32b72:	69fb      	ldr	r3, [r7, #28]
   32b74:	2202      	movs	r2, #2
   32b76:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   32b78:	69fb      	ldr	r3, [r7, #28]
   32b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32b7c:	2b00      	cmp	r3, #0
   32b7e:	d024      	beq.n	32bca <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   32b80:	69fb      	ldr	r3, [r7, #28]
   32b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32b84:	220c      	movs	r2, #12
   32b86:	2118      	movs	r1, #24
   32b88:	468c      	mov	ip, r1
   32b8a:	44bc      	add	ip, r7
   32b8c:	4462      	add	r2, ip
   32b8e:	69f8      	ldr	r0, [r7, #28]
   32b90:	2101      	movs	r1, #1
   32b92:	4798      	blx	r3
			break;
   32b94:	e019      	b.n	32bca <_http_client_request+0x71a>
   32b96:	46c0      	nop			; (mov r8, r8)
   32b98:	0003bb94 	.word	0x0003bb94
   32b9c:	000366fd 	.word	0x000366fd
   32ba0:	0003bb98 	.word	0x0003bb98
   32ba4:	00033411 	.word	0x00033411
   32ba8:	000367f7 	.word	0x000367f7
   32bac:	0003bb20 	.word	0x0003bb20
   32bb0:	0003344d 	.word	0x0003344d
   32bb4:	8000000f 	.word	0x8000000f
   32bb8:	00026869 	.word	0x00026869
   32bbc:	0003235d 	.word	0x0003235d
		break;
   32bc0:	e004      	b.n	32bcc <_http_client_request+0x71c>
				break;
   32bc2:	46c0      	nop			; (mov r8, r8)
   32bc4:	e002      	b.n	32bcc <_http_client_request+0x71c>
				break;
   32bc6:	46c0      	nop			; (mov r8, r8)
   32bc8:	e000      	b.n	32bcc <_http_client_request+0x71c>
			break;
   32bca:	46c0      	nop			; (mov r8, r8)
   32bcc:	69bb      	ldr	r3, [r7, #24]
   32bce:	469d      	mov	sp, r3
   32bd0:	e004      	b.n	32bdc <_http_client_request+0x72c>
		return;
   32bd2:	46c0      	nop			; (mov r8, r8)
   32bd4:	e000      	b.n	32bd8 <_http_client_request+0x728>
		return;
   32bd6:	46c0      	nop			; (mov r8, r8)
   32bd8:	69bb      	ldr	r3, [r7, #24]
   32bda:	469d      	mov	sp, r3
	}
}
   32bdc:	46bd      	mov	sp, r7
   32bde:	b01e      	add	sp, #120	; 0x78
   32be0:	bc04      	pop	{r2}
   32be2:	4690      	mov	r8, r2
   32be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32be6:	46c0      	nop			; (mov r8, r8)

00032be8 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   32be8:	b590      	push	{r4, r7, lr}
   32bea:	b083      	sub	sp, #12
   32bec:	af00      	add	r7, sp, #0
   32bee:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   32bf0:	687b      	ldr	r3, [r7, #4]
   32bf2:	2b00      	cmp	r3, #0
   32bf4:	d021      	beq.n	32c3a <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   32bf6:	687b      	ldr	r3, [r7, #4]
   32bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   32bfa:	687b      	ldr	r3, [r7, #4]
   32bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32bfe:	429a      	cmp	r2, r3
   32c00:	d307      	bcc.n	32c12 <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   32c02:	238b      	movs	r3, #139	; 0x8b
   32c04:	425a      	negs	r2, r3
   32c06:	687b      	ldr	r3, [r7, #4]
   32c08:	0011      	movs	r1, r2
   32c0a:	0018      	movs	r0, r3
   32c0c:	4b0d      	ldr	r3, [pc, #52]	; (32c44 <_http_client_recv_packet+0x5c>)
   32c0e:	4798      	blx	r3
		return;
   32c10:	e014      	b.n	32c3c <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   32c12:	687b      	ldr	r3, [r7, #4]
   32c14:	2000      	movs	r0, #0
   32c16:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   32c18:	687b      	ldr	r3, [r7, #4]
   32c1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   32c1c:	687b      	ldr	r3, [r7, #4]
   32c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32c20:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   32c22:	687b      	ldr	r3, [r7, #4]
   32c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   32c26:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   32c28:	687b      	ldr	r3, [r7, #4]
   32c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   32c2c:	b29b      	uxth	r3, r3
   32c2e:	1ad3      	subs	r3, r2, r3
   32c30:	b29a      	uxth	r2, r3
   32c32:	2300      	movs	r3, #0
   32c34:	4c04      	ldr	r4, [pc, #16]	; (32c48 <_http_client_recv_packet+0x60>)
   32c36:	47a0      	blx	r4
   32c38:	e000      	b.n	32c3c <_http_client_recv_packet+0x54>
		return;
   32c3a:	46c0      	nop			; (mov r8, r8)
}
   32c3c:	46bd      	mov	sp, r7
   32c3e:	b003      	add	sp, #12
   32c40:	bd90      	pop	{r4, r7, pc}
   32c42:	46c0      	nop			; (mov r8, r8)
   32c44:	0003235d 	.word	0x0003235d
   32c48:	000269cd 	.word	0x000269cd

00032c4c <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   32c4c:	b580      	push	{r7, lr}
   32c4e:	b082      	sub	sp, #8
   32c50:	af00      	add	r7, sp, #0
   32c52:	6078      	str	r0, [r7, #4]
   32c54:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   32c56:	687b      	ldr	r3, [r7, #4]
   32c58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   32c5a:	683b      	ldr	r3, [r7, #0]
   32c5c:	18d2      	adds	r2, r2, r3
   32c5e:	687b      	ldr	r3, [r7, #4]
   32c60:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   32c62:	687b      	ldr	r3, [r7, #4]
   32c64:	2258      	movs	r2, #88	; 0x58
   32c66:	5a9b      	ldrh	r3, [r3, r2]
   32c68:	2b00      	cmp	r3, #0
   32c6a:	d007      	beq.n	32c7c <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   32c6c:	687b      	ldr	r3, [r7, #4]
   32c6e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   32c70:	687b      	ldr	r3, [r7, #4]
   32c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   32c74:	0019      	movs	r1, r3
   32c76:	0010      	movs	r0, r2
   32c78:	4b06      	ldr	r3, [pc, #24]	; (32c94 <_http_client_recved_packet+0x48>)
   32c7a:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   32c7c:	46c0      	nop			; (mov r8, r8)
   32c7e:	687b      	ldr	r3, [r7, #4]
   32c80:	0018      	movs	r0, r3
   32c82:	4b05      	ldr	r3, [pc, #20]	; (32c98 <_http_client_recved_packet+0x4c>)
   32c84:	4798      	blx	r3
   32c86:	1e03      	subs	r3, r0, #0
   32c88:	d1f9      	bne.n	32c7e <_http_client_recved_packet+0x32>
}
   32c8a:	46c0      	nop			; (mov r8, r8)
   32c8c:	46bd      	mov	sp, r7
   32c8e:	b002      	add	sp, #8
   32c90:	bd80      	pop	{r7, pc}
   32c92:	46c0      	nop			; (mov r8, r8)
   32c94:	00033709 	.word	0x00033709
   32c98:	00032c9d 	.word	0x00032c9d

00032c9c <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   32c9c:	b580      	push	{r7, lr}
   32c9e:	b082      	sub	sp, #8
   32ca0:	af00      	add	r7, sp, #0
   32ca2:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   32ca4:	687b      	ldr	r3, [r7, #4]
   32ca6:	22d8      	movs	r2, #216	; 0xd8
   32ca8:	589b      	ldr	r3, [r3, r2]
   32caa:	2b00      	cmp	r3, #0
   32cac:	d002      	beq.n	32cb4 <_http_client_handle_response+0x18>
   32cae:	2b01      	cmp	r3, #1
   32cb0:	d006      	beq.n	32cc0 <_http_client_handle_response+0x24>
   32cb2:	e00b      	b.n	32ccc <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   32cb4:	687b      	ldr	r3, [r7, #4]
   32cb6:	0018      	movs	r0, r3
   32cb8:	4b07      	ldr	r3, [pc, #28]	; (32cd8 <_http_client_handle_response+0x3c>)
   32cba:	4798      	blx	r3
   32cbc:	0003      	movs	r3, r0
   32cbe:	e006      	b.n	32cce <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   32cc0:	687b      	ldr	r3, [r7, #4]
   32cc2:	0018      	movs	r0, r3
   32cc4:	4b05      	ldr	r3, [pc, #20]	; (32cdc <_http_client_handle_response+0x40>)
   32cc6:	4798      	blx	r3
   32cc8:	0003      	movs	r3, r0
   32cca:	e000      	b.n	32cce <_http_client_handle_response+0x32>
	}
	return 0;
   32ccc:	2300      	movs	r3, #0
}
   32cce:	0018      	movs	r0, r3
   32cd0:	46bd      	mov	sp, r7
   32cd2:	b002      	add	sp, #8
   32cd4:	bd80      	pop	{r7, pc}
   32cd6:	46c0      	nop			; (mov r8, r8)
   32cd8:	00032ce1 	.word	0x00032ce1
   32cdc:	00033199 	.word	0x00033199

00032ce0 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   32ce0:	b590      	push	{r4, r7, lr}
   32ce2:	b08b      	sub	sp, #44	; 0x2c
   32ce4:	af00      	add	r7, sp, #0
   32ce6:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   32ce8:	687b      	ldr	r3, [r7, #4]
   32cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32cec:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   32cee:	4b9a      	ldr	r3, [pc, #616]	; (32f58 <_http_client_handle_header+0x278>)
   32cf0:	681a      	ldr	r2, [r3, #0]
   32cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32cf4:	0011      	movs	r1, r2
   32cf6:	0018      	movs	r0, r3
   32cf8:	4b98      	ldr	r3, [pc, #608]	; (32f5c <_http_client_handle_header+0x27c>)
   32cfa:	4798      	blx	r3
   32cfc:	0003      	movs	r3, r0
   32cfe:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   32d00:	69bb      	ldr	r3, [r7, #24]
   32d02:	2b00      	cmp	r3, #0
   32d04:	d007      	beq.n	32d16 <_http_client_handle_header+0x36>
   32d06:	687b      	ldr	r3, [r7, #4]
   32d08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   32d0a:	687b      	ldr	r3, [r7, #4]
   32d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32d0e:	18d2      	adds	r2, r2, r3
   32d10:	69bb      	ldr	r3, [r7, #24]
   32d12:	429a      	cmp	r2, r3
   32d14:	d807      	bhi.n	32d26 <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   32d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   32d18:	687b      	ldr	r3, [r7, #4]
   32d1a:	0011      	movs	r1, r2
   32d1c:	0018      	movs	r0, r3
   32d1e:	4b90      	ldr	r3, [pc, #576]	; (32f60 <_http_client_handle_header+0x280>)
   32d20:	4798      	blx	r3
			return 0;
   32d22:	2300      	movs	r3, #0
   32d24:	e114      	b.n	32f50 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   32d26:	4b8c      	ldr	r3, [pc, #560]	; (32f58 <_http_client_handle_header+0x278>)
   32d28:	681c      	ldr	r4, [r3, #0]
   32d2a:	4b8b      	ldr	r3, [pc, #556]	; (32f58 <_http_client_handle_header+0x278>)
   32d2c:	681b      	ldr	r3, [r3, #0]
   32d2e:	0018      	movs	r0, r3
   32d30:	4b8c      	ldr	r3, [pc, #560]	; (32f64 <_http_client_handle_header+0x284>)
   32d32:	4798      	blx	r3
   32d34:	0002      	movs	r2, r0
   32d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32d38:	0021      	movs	r1, r4
   32d3a:	0018      	movs	r0, r3
   32d3c:	4b8a      	ldr	r3, [pc, #552]	; (32f68 <_http_client_handle_header+0x288>)
   32d3e:	4798      	blx	r3
   32d40:	1e03      	subs	r3, r0, #0
   32d42:	d15d      	bne.n	32e00 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   32d44:	4b84      	ldr	r3, [pc, #528]	; (32f58 <_http_client_handle_header+0x278>)
   32d46:	681b      	ldr	r3, [r3, #0]
   32d48:	0018      	movs	r0, r3
   32d4a:	4b86      	ldr	r3, [pc, #536]	; (32f64 <_http_client_handle_header+0x284>)
   32d4c:	4798      	blx	r3
   32d4e:	0002      	movs	r2, r0
   32d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32d52:	189a      	adds	r2, r3, r2
   32d54:	687b      	ldr	r3, [r7, #4]
   32d56:	0011      	movs	r1, r2
   32d58:	0018      	movs	r0, r3
   32d5a:	4b81      	ldr	r3, [pc, #516]	; (32f60 <_http_client_handle_header+0x280>)
   32d5c:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   32d5e:	687b      	ldr	r3, [r7, #4]
   32d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32d62:	2b00      	cmp	r3, #0
   32d64:	d046      	beq.n	32df4 <_http_client_handle_header+0x114>
   32d66:	687b      	ldr	r3, [r7, #4]
   32d68:	22e4      	movs	r2, #228	; 0xe4
   32d6a:	5a9b      	ldrh	r3, [r3, r2]
   32d6c:	2b00      	cmp	r3, #0
   32d6e:	d041      	beq.n	32df4 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   32d70:	687b      	ldr	r3, [r7, #4]
   32d72:	22dc      	movs	r2, #220	; 0xdc
   32d74:	589b      	ldr	r3, [r3, r2]
   32d76:	2b00      	cmp	r3, #0
   32d78:	da19      	bge.n	32dae <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   32d7a:	687b      	ldr	r3, [r7, #4]
   32d7c:	22e4      	movs	r2, #228	; 0xe4
   32d7e:	5a9a      	ldrh	r2, [r3, r2]
   32d80:	230c      	movs	r3, #12
   32d82:	18fb      	adds	r3, r7, r3
   32d84:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   32d86:	230c      	movs	r3, #12
   32d88:	18fb      	adds	r3, r7, r3
   32d8a:	2201      	movs	r2, #1
   32d8c:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   32d8e:	687b      	ldr	r3, [r7, #4]
   32d90:	22e0      	movs	r2, #224	; 0xe0
   32d92:	2100      	movs	r1, #0
   32d94:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   32d96:	230c      	movs	r3, #12
   32d98:	18fb      	adds	r3, r7, r3
   32d9a:	2200      	movs	r2, #0
   32d9c:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   32d9e:	687b      	ldr	r3, [r7, #4]
   32da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32da2:	220c      	movs	r2, #12
   32da4:	18ba      	adds	r2, r7, r2
   32da6:	6878      	ldr	r0, [r7, #4]
   32da8:	2102      	movs	r1, #2
   32daa:	4798      	blx	r3
   32dac:	e022      	b.n	32df4 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   32dae:	687b      	ldr	r3, [r7, #4]
   32db0:	22dc      	movs	r2, #220	; 0xdc
   32db2:	589a      	ldr	r2, [r3, r2]
   32db4:	687b      	ldr	r3, [r7, #4]
   32db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32db8:	429a      	cmp	r2, r3
   32dba:	dd1b      	ble.n	32df4 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   32dbc:	687b      	ldr	r3, [r7, #4]
   32dbe:	22e4      	movs	r2, #228	; 0xe4
   32dc0:	5a9a      	ldrh	r2, [r3, r2]
   32dc2:	230c      	movs	r3, #12
   32dc4:	18fb      	adds	r3, r7, r3
   32dc6:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   32dc8:	687b      	ldr	r3, [r7, #4]
   32dca:	22dc      	movs	r2, #220	; 0xdc
   32dcc:	589b      	ldr	r3, [r3, r2]
   32dce:	001a      	movs	r2, r3
   32dd0:	230c      	movs	r3, #12
   32dd2:	18fb      	adds	r3, r7, r3
   32dd4:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   32dd6:	230c      	movs	r3, #12
   32dd8:	18fb      	adds	r3, r7, r3
   32dda:	2200      	movs	r2, #0
   32ddc:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   32dde:	687b      	ldr	r3, [r7, #4]
   32de0:	22e0      	movs	r2, #224	; 0xe0
   32de2:	2100      	movs	r1, #0
   32de4:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   32de6:	687b      	ldr	r3, [r7, #4]
   32de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32dea:	220c      	movs	r2, #12
   32dec:	18ba      	adds	r2, r7, r2
   32dee:	6878      	ldr	r0, [r7, #4]
   32df0:	2102      	movs	r1, #2
   32df2:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   32df4:	687b      	ldr	r3, [r7, #4]
   32df6:	22d8      	movs	r2, #216	; 0xd8
   32df8:	2101      	movs	r1, #1
   32dfa:	5099      	str	r1, [r3, r2]
			return 1;
   32dfc:	2301      	movs	r3, #1
   32dfe:	e0a7      	b.n	32f50 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   32e00:	495a      	ldr	r1, [pc, #360]	; (32f6c <_http_client_handle_header+0x28c>)
   32e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32e04:	2210      	movs	r2, #16
   32e06:	0018      	movs	r0, r3
   32e08:	4b57      	ldr	r3, [pc, #348]	; (32f68 <_http_client_handle_header+0x288>)
   32e0a:	4798      	blx	r3
   32e0c:	1e03      	subs	r3, r0, #0
   32e0e:	d109      	bne.n	32e24 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   32e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32e12:	3310      	adds	r3, #16
   32e14:	0018      	movs	r0, r3
   32e16:	4b56      	ldr	r3, [pc, #344]	; (32f70 <_http_client_handle_header+0x290>)
   32e18:	4798      	blx	r3
   32e1a:	0001      	movs	r1, r0
   32e1c:	687b      	ldr	r3, [r7, #4]
   32e1e:	22dc      	movs	r2, #220	; 0xdc
   32e20:	5099      	str	r1, [r3, r2]
   32e22:	e08b      	b.n	32f3c <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   32e24:	4953      	ldr	r1, [pc, #332]	; (32f74 <_http_client_handle_header+0x294>)
   32e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32e28:	2213      	movs	r2, #19
   32e2a:	0018      	movs	r0, r3
   32e2c:	4b4e      	ldr	r3, [pc, #312]	; (32f68 <_http_client_handle_header+0x288>)
   32e2e:	4798      	blx	r3
   32e30:	1e03      	subs	r3, r0, #0
   32e32:	d127      	bne.n	32e84 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   32e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32e36:	3313      	adds	r3, #19
   32e38:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32e3a:	e01e      	b.n	32e7a <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   32e3c:	6a3b      	ldr	r3, [r7, #32]
   32e3e:	781b      	ldrb	r3, [r3, #0]
   32e40:	2b20      	cmp	r3, #32
   32e42:	d103      	bne.n	32e4c <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32e44:	6a3b      	ldr	r3, [r7, #32]
   32e46:	3301      	adds	r3, #1
   32e48:	623b      	str	r3, [r7, #32]
   32e4a:	e016      	b.n	32e7a <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   32e4c:	6a3b      	ldr	r3, [r7, #32]
   32e4e:	781b      	ldrb	r3, [r3, #0]
   32e50:	2b43      	cmp	r3, #67	; 0x43
   32e52:	d003      	beq.n	32e5c <_http_client_handle_header+0x17c>
   32e54:	6a3b      	ldr	r3, [r7, #32]
   32e56:	781b      	ldrb	r3, [r3, #0]
   32e58:	2b63      	cmp	r3, #99	; 0x63
   32e5a:	d105      	bne.n	32e68 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   32e5c:	687b      	ldr	r3, [r7, #4]
   32e5e:	21cc      	movs	r1, #204	; 0xcc
   32e60:	2201      	movs	r2, #1
   32e62:	4252      	negs	r2, r2
   32e64:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   32e66:	e069      	b.n	32f3c <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   32e68:	2386      	movs	r3, #134	; 0x86
   32e6a:	425a      	negs	r2, r3
   32e6c:	687b      	ldr	r3, [r7, #4]
   32e6e:	0011      	movs	r1, r2
   32e70:	0018      	movs	r0, r3
   32e72:	4b41      	ldr	r3, [pc, #260]	; (32f78 <_http_client_handle_header+0x298>)
   32e74:	4798      	blx	r3
					return 0;
   32e76:	2300      	movs	r3, #0
   32e78:	e06a      	b.n	32f50 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32e7a:	69ba      	ldr	r2, [r7, #24]
   32e7c:	6a3b      	ldr	r3, [r7, #32]
   32e7e:	429a      	cmp	r2, r3
   32e80:	d8dc      	bhi.n	32e3c <_http_client_handle_header+0x15c>
   32e82:	e05b      	b.n	32f3c <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   32e84:	493d      	ldr	r1, [pc, #244]	; (32f7c <_http_client_handle_header+0x29c>)
   32e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32e88:	220c      	movs	r2, #12
   32e8a:	0018      	movs	r0, r3
   32e8c:	4b36      	ldr	r3, [pc, #216]	; (32f68 <_http_client_handle_header+0x288>)
   32e8e:	4798      	blx	r3
   32e90:	1e03      	subs	r3, r0, #0
   32e92:	d126      	bne.n	32ee2 <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   32e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32e96:	330c      	adds	r3, #12
   32e98:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32e9a:	e01d      	b.n	32ed8 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   32e9c:	69fb      	ldr	r3, [r7, #28]
   32e9e:	781b      	ldrb	r3, [r3, #0]
   32ea0:	2b20      	cmp	r3, #32
   32ea2:	d103      	bne.n	32eac <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32ea4:	69fb      	ldr	r3, [r7, #28]
   32ea6:	3301      	adds	r3, #1
   32ea8:	61fb      	str	r3, [r7, #28]
   32eaa:	e015      	b.n	32ed8 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   32eac:	69fb      	ldr	r3, [r7, #28]
   32eae:	781b      	ldrb	r3, [r3, #0]
   32eb0:	2b4b      	cmp	r3, #75	; 0x4b
   32eb2:	d003      	beq.n	32ebc <_http_client_handle_header+0x1dc>
   32eb4:	69fb      	ldr	r3, [r7, #28]
   32eb6:	781b      	ldrb	r3, [r3, #0]
   32eb8:	2b6b      	cmp	r3, #107	; 0x6b
   32eba:	d106      	bne.n	32eca <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   32ebc:	687b      	ldr	r3, [r7, #4]
   32ebe:	2241      	movs	r2, #65	; 0x41
   32ec0:	5c99      	ldrb	r1, [r3, r2]
   32ec2:	2002      	movs	r0, #2
   32ec4:	4301      	orrs	r1, r0
   32ec6:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   32ec8:	e038      	b.n	32f3c <_http_client_handle_header+0x25c>
					module->permanent = 0;
   32eca:	687b      	ldr	r3, [r7, #4]
   32ecc:	2241      	movs	r2, #65	; 0x41
   32ece:	5c99      	ldrb	r1, [r3, r2]
   32ed0:	2002      	movs	r0, #2
   32ed2:	4381      	bics	r1, r0
   32ed4:	5499      	strb	r1, [r3, r2]
				break;
   32ed6:	e031      	b.n	32f3c <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32ed8:	69ba      	ldr	r2, [r7, #24]
   32eda:	69fb      	ldr	r3, [r7, #28]
   32edc:	429a      	cmp	r2, r3
   32ede:	d8dd      	bhi.n	32e9c <_http_client_handle_header+0x1bc>
   32ee0:	e02c      	b.n	32f3c <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   32ee2:	4927      	ldr	r1, [pc, #156]	; (32f80 <_http_client_handle_header+0x2a0>)
   32ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32ee6:	2205      	movs	r2, #5
   32ee8:	0018      	movs	r0, r3
   32eea:	4b1f      	ldr	r3, [pc, #124]	; (32f68 <_http_client_handle_header+0x288>)
   32eec:	4798      	blx	r3
   32eee:	1e03      	subs	r3, r0, #0
   32ef0:	d124      	bne.n	32f3c <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   32ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32ef4:	3309      	adds	r3, #9
   32ef6:	0018      	movs	r0, r3
   32ef8:	4b1d      	ldr	r3, [pc, #116]	; (32f70 <_http_client_handle_header+0x290>)
   32efa:	4798      	blx	r3
   32efc:	0003      	movs	r3, r0
   32efe:	b299      	uxth	r1, r3
   32f00:	687b      	ldr	r3, [r7, #4]
   32f02:	22e4      	movs	r2, #228	; 0xe4
   32f04:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   32f06:	687b      	ldr	r3, [r7, #4]
   32f08:	22dc      	movs	r2, #220	; 0xdc
   32f0a:	2100      	movs	r1, #0
   32f0c:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   32f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32f10:	3305      	adds	r3, #5
   32f12:	781b      	ldrb	r3, [r3, #0]
   32f14:	2b31      	cmp	r3, #49	; 0x31
   32f16:	d804      	bhi.n	32f22 <_http_client_handle_header+0x242>
   32f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32f1a:	3307      	adds	r3, #7
   32f1c:	781b      	ldrb	r3, [r3, #0]
   32f1e:	2b30      	cmp	r3, #48	; 0x30
   32f20:	d906      	bls.n	32f30 <_http_client_handle_header+0x250>
				module->permanent = 1;
   32f22:	687b      	ldr	r3, [r7, #4]
   32f24:	2241      	movs	r2, #65	; 0x41
   32f26:	5c99      	ldrb	r1, [r3, r2]
   32f28:	2002      	movs	r0, #2
   32f2a:	4301      	orrs	r1, r0
   32f2c:	5499      	strb	r1, [r3, r2]
   32f2e:	e005      	b.n	32f3c <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   32f30:	687b      	ldr	r3, [r7, #4]
   32f32:	2241      	movs	r2, #65	; 0x41
   32f34:	5c99      	ldrb	r1, [r3, r2]
   32f36:	2002      	movs	r0, #2
   32f38:	4381      	bics	r1, r0
   32f3a:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   32f3c:	4b06      	ldr	r3, [pc, #24]	; (32f58 <_http_client_handle_header+0x278>)
   32f3e:	681b      	ldr	r3, [r3, #0]
   32f40:	0018      	movs	r0, r3
   32f42:	4b08      	ldr	r3, [pc, #32]	; (32f64 <_http_client_handle_header+0x284>)
   32f44:	4798      	blx	r3
   32f46:	0002      	movs	r2, r0
   32f48:	69bb      	ldr	r3, [r7, #24]
   32f4a:	189b      	adds	r3, r3, r2
   32f4c:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   32f4e:	e6ce      	b.n	32cee <_http_client_handle_header+0xe>
	}
}
   32f50:	0018      	movs	r0, r3
   32f52:	46bd      	mov	sp, r7
   32f54:	b00b      	add	sp, #44	; 0x2c
   32f56:	bd90      	pop	{r4, r7, pc}
   32f58:	2000012c 	.word	0x2000012c
   32f5c:	00036875 	.word	0x00036875
   32f60:	00033345 	.word	0x00033345
   32f64:	000367f7 	.word	0x000367f7
   32f68:	00036805 	.word	0x00036805
   32f6c:	0003bb98 	.word	0x0003bb98
   32f70:	0003638d 	.word	0x0003638d
   32f74:	0003bbbc 	.word	0x0003bbbc
   32f78:	0003235d 	.word	0x0003235d
   32f7c:	0003bbd0 	.word	0x0003bbd0
   32f80:	0003bbe0 	.word	0x0003bbe0

00032f84 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   32f84:	b580      	push	{r7, lr}
   32f86:	b088      	sub	sp, #32
   32f88:	af00      	add	r7, sp, #0
   32f8a:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   32f8c:	687b      	ldr	r3, [r7, #4]
   32f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32f90:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   32f92:	2300      	movs	r3, #0
   32f94:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   32f96:	687b      	ldr	r3, [r7, #4]
   32f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32f9a:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   32f9c:	687b      	ldr	r3, [r7, #4]
   32f9e:	22e0      	movs	r2, #224	; 0xe0
   32fa0:	589b      	ldr	r3, [r3, r2]
   32fa2:	2b00      	cmp	r3, #0
   32fa4:	db71      	blt.n	3308a <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   32fa6:	687b      	ldr	r3, [r7, #4]
   32fa8:	22e0      	movs	r2, #224	; 0xe0
   32faa:	589b      	ldr	r3, [r3, r2]
   32fac:	2b00      	cmp	r3, #0
   32fae:	d134      	bne.n	3301a <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   32fb0:	687b      	ldr	r3, [r7, #4]
   32fb2:	22d8      	movs	r2, #216	; 0xd8
   32fb4:	2100      	movs	r1, #0
   32fb6:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   32fb8:	687b      	ldr	r3, [r7, #4]
   32fba:	22e4      	movs	r2, #228	; 0xe4
   32fbc:	2100      	movs	r1, #0
   32fbe:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   32fc0:	2308      	movs	r3, #8
   32fc2:	18fb      	adds	r3, r7, r3
   32fc4:	2201      	movs	r2, #1
   32fc6:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   32fc8:	2308      	movs	r3, #8
   32fca:	18fb      	adds	r3, r7, r3
   32fcc:	2200      	movs	r2, #0
   32fce:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   32fd0:	2308      	movs	r3, #8
   32fd2:	18fb      	adds	r3, r7, r3
   32fd4:	2200      	movs	r2, #0
   32fd6:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   32fd8:	687b      	ldr	r3, [r7, #4]
   32fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32fdc:	2b00      	cmp	r3, #0
   32fde:	d006      	beq.n	32fee <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32fe0:	687b      	ldr	r3, [r7, #4]
   32fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32fe4:	2208      	movs	r2, #8
   32fe6:	18ba      	adds	r2, r7, r2
   32fe8:	6878      	ldr	r0, [r7, #4]
   32fea:	2103      	movs	r1, #3
   32fec:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   32fee:	687b      	ldr	r3, [r7, #4]
   32ff0:	2241      	movs	r2, #65	; 0x41
   32ff2:	5c9b      	ldrb	r3, [r3, r2]
   32ff4:	2202      	movs	r2, #2
   32ff6:	4013      	ands	r3, r2
   32ff8:	b2db      	uxtb	r3, r3
   32ffa:	2b00      	cmp	r3, #0
   32ffc:	d105      	bne.n	3300a <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   32ffe:	687b      	ldr	r3, [r7, #4]
   33000:	2100      	movs	r1, #0
   33002:	0018      	movs	r0, r3
   33004:	4b62      	ldr	r3, [pc, #392]	; (33190 <_http_client_read_chuked_entity+0x20c>)
   33006:	4798      	blx	r3
					return;
   33008:	e0bf      	b.n	3318a <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   3300a:	697b      	ldr	r3, [r7, #20]
   3300c:	1c9a      	adds	r2, r3, #2
   3300e:	687b      	ldr	r3, [r7, #4]
   33010:	0011      	movs	r1, r2
   33012:	0018      	movs	r0, r3
   33014:	4b5f      	ldr	r3, [pc, #380]	; (33194 <_http_client_read_chuked_entity+0x210>)
   33016:	4798      	blx	r3
   33018:	e0b2      	b.n	33180 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   3301a:	687b      	ldr	r3, [r7, #4]
   3301c:	22e0      	movs	r2, #224	; 0xe0
   3301e:	589a      	ldr	r2, [r3, r2]
   33020:	69fb      	ldr	r3, [r7, #28]
   33022:	429a      	cmp	r2, r3
   33024:	dd00      	ble.n	33028 <_http_client_read_chuked_entity+0xa4>
   33026:	e0ab      	b.n	33180 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   33028:	687b      	ldr	r3, [r7, #4]
   3302a:	22e0      	movs	r2, #224	; 0xe0
   3302c:	589b      	ldr	r3, [r3, r2]
   3302e:	001a      	movs	r2, r3
   33030:	2308      	movs	r3, #8
   33032:	18fb      	adds	r3, r7, r3
   33034:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   33036:	2308      	movs	r3, #8
   33038:	18fb      	adds	r3, r7, r3
   3303a:	697a      	ldr	r2, [r7, #20]
   3303c:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   3303e:	2308      	movs	r3, #8
   33040:	18fb      	adds	r3, r7, r3
   33042:	2200      	movs	r2, #0
   33044:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   33046:	687b      	ldr	r3, [r7, #4]
   33048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3304a:	2b00      	cmp	r3, #0
   3304c:	d006      	beq.n	3305c <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   3304e:	687b      	ldr	r3, [r7, #4]
   33050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33052:	2208      	movs	r2, #8
   33054:	18ba      	adds	r2, r7, r2
   33056:	6878      	ldr	r0, [r7, #4]
   33058:	2103      	movs	r1, #3
   3305a:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   3305c:	687b      	ldr	r3, [r7, #4]
   3305e:	22e0      	movs	r2, #224	; 0xe0
   33060:	589b      	ldr	r3, [r3, r2]
   33062:	3302      	adds	r3, #2
   33064:	697a      	ldr	r2, [r7, #20]
   33066:	18d2      	adds	r2, r2, r3
   33068:	687b      	ldr	r3, [r7, #4]
   3306a:	0011      	movs	r1, r2
   3306c:	0018      	movs	r0, r3
   3306e:	4b49      	ldr	r3, [pc, #292]	; (33194 <_http_client_read_chuked_entity+0x210>)
   33070:	4798      	blx	r3
				length = (int)module->recved_size;
   33072:	687b      	ldr	r3, [r7, #4]
   33074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   33076:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   33078:	687b      	ldr	r3, [r7, #4]
   3307a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3307c:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   3307e:	687b      	ldr	r3, [r7, #4]
   33080:	21e0      	movs	r1, #224	; 0xe0
   33082:	2201      	movs	r2, #1
   33084:	4252      	negs	r2, r2
   33086:	505a      	str	r2, [r3, r1]
   33088:	e07a      	b.n	33180 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   3308a:	687b      	ldr	r3, [r7, #4]
   3308c:	22e0      	movs	r2, #224	; 0xe0
   3308e:	2100      	movs	r1, #0
   33090:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   33092:	e05a      	b.n	3314a <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   33094:	697b      	ldr	r3, [r7, #20]
   33096:	781b      	ldrb	r3, [r3, #0]
   33098:	2b0a      	cmp	r3, #10
   3309a:	d106      	bne.n	330aa <_http_client_read_chuked_entity+0x126>
					buffer++;
   3309c:	697b      	ldr	r3, [r7, #20]
   3309e:	3301      	adds	r3, #1
   330a0:	617b      	str	r3, [r7, #20]
					length--;
   330a2:	69fb      	ldr	r3, [r7, #28]
   330a4:	3b01      	subs	r3, #1
   330a6:	61fb      	str	r3, [r7, #28]
					break;
   330a8:	e052      	b.n	33150 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   330aa:	69bb      	ldr	r3, [r7, #24]
   330ac:	2b00      	cmp	r3, #0
   330ae:	d145      	bne.n	3313c <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   330b0:	697b      	ldr	r3, [r7, #20]
   330b2:	781b      	ldrb	r3, [r3, #0]
   330b4:	2b2f      	cmp	r3, #47	; 0x2f
   330b6:	d910      	bls.n	330da <_http_client_read_chuked_entity+0x156>
   330b8:	697b      	ldr	r3, [r7, #20]
   330ba:	781b      	ldrb	r3, [r3, #0]
   330bc:	2b39      	cmp	r3, #57	; 0x39
   330be:	d80c      	bhi.n	330da <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   330c0:	687b      	ldr	r3, [r7, #4]
   330c2:	22e0      	movs	r2, #224	; 0xe0
   330c4:	589b      	ldr	r3, [r3, r2]
   330c6:	011b      	lsls	r3, r3, #4
   330c8:	697a      	ldr	r2, [r7, #20]
   330ca:	7812      	ldrb	r2, [r2, #0]
   330cc:	189b      	adds	r3, r3, r2
   330ce:	3b30      	subs	r3, #48	; 0x30
   330d0:	001a      	movs	r2, r3
   330d2:	687b      	ldr	r3, [r7, #4]
   330d4:	21e0      	movs	r1, #224	; 0xe0
   330d6:	505a      	str	r2, [r3, r1]
   330d8:	e031      	b.n	3313e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   330da:	697b      	ldr	r3, [r7, #20]
   330dc:	781b      	ldrb	r3, [r3, #0]
   330de:	2b60      	cmp	r3, #96	; 0x60
   330e0:	d910      	bls.n	33104 <_http_client_read_chuked_entity+0x180>
   330e2:	697b      	ldr	r3, [r7, #20]
   330e4:	781b      	ldrb	r3, [r3, #0]
   330e6:	2b66      	cmp	r3, #102	; 0x66
   330e8:	d80c      	bhi.n	33104 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   330ea:	687b      	ldr	r3, [r7, #4]
   330ec:	22e0      	movs	r2, #224	; 0xe0
   330ee:	589b      	ldr	r3, [r3, r2]
   330f0:	011b      	lsls	r3, r3, #4
   330f2:	697a      	ldr	r2, [r7, #20]
   330f4:	7812      	ldrb	r2, [r2, #0]
   330f6:	189b      	adds	r3, r3, r2
   330f8:	3b61      	subs	r3, #97	; 0x61
   330fa:	001a      	movs	r2, r3
   330fc:	687b      	ldr	r3, [r7, #4]
   330fe:	21e0      	movs	r1, #224	; 0xe0
   33100:	505a      	str	r2, [r3, r1]
   33102:	e01c      	b.n	3313e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   33104:	697b      	ldr	r3, [r7, #20]
   33106:	781b      	ldrb	r3, [r3, #0]
   33108:	2b40      	cmp	r3, #64	; 0x40
   3310a:	d910      	bls.n	3312e <_http_client_read_chuked_entity+0x1aa>
   3310c:	697b      	ldr	r3, [r7, #20]
   3310e:	781b      	ldrb	r3, [r3, #0]
   33110:	2b46      	cmp	r3, #70	; 0x46
   33112:	d80c      	bhi.n	3312e <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   33114:	687b      	ldr	r3, [r7, #4]
   33116:	22e0      	movs	r2, #224	; 0xe0
   33118:	589b      	ldr	r3, [r3, r2]
   3311a:	011b      	lsls	r3, r3, #4
   3311c:	697a      	ldr	r2, [r7, #20]
   3311e:	7812      	ldrb	r2, [r2, #0]
   33120:	189b      	adds	r3, r3, r2
   33122:	3b41      	subs	r3, #65	; 0x41
   33124:	001a      	movs	r2, r3
   33126:	687b      	ldr	r3, [r7, #4]
   33128:	21e0      	movs	r1, #224	; 0xe0
   3312a:	505a      	str	r2, [r3, r1]
   3312c:	e007      	b.n	3313e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   3312e:	697b      	ldr	r3, [r7, #20]
   33130:	781b      	ldrb	r3, [r3, #0]
   33132:	2b3b      	cmp	r3, #59	; 0x3b
   33134:	d103      	bne.n	3313e <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   33136:	2301      	movs	r3, #1
   33138:	61bb      	str	r3, [r7, #24]
   3313a:	e000      	b.n	3313e <_http_client_read_chuked_entity+0x1ba>
					continue;
   3313c:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   3313e:	697b      	ldr	r3, [r7, #20]
   33140:	3301      	adds	r3, #1
   33142:	617b      	str	r3, [r7, #20]
   33144:	69fb      	ldr	r3, [r7, #28]
   33146:	3b01      	subs	r3, #1
   33148:	61fb      	str	r3, [r7, #28]
   3314a:	69fb      	ldr	r3, [r7, #28]
   3314c:	2b00      	cmp	r3, #0
   3314e:	dca1      	bgt.n	33094 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   33150:	687b      	ldr	r3, [r7, #4]
   33152:	22e0      	movs	r2, #224	; 0xe0
   33154:	589a      	ldr	r2, [r3, r2]
   33156:	687b      	ldr	r3, [r7, #4]
   33158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   3315a:	429a      	cmp	r2, r3
   3315c:	dd07      	ble.n	3316e <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   3315e:	238b      	movs	r3, #139	; 0x8b
   33160:	425a      	negs	r2, r3
   33162:	687b      	ldr	r3, [r7, #4]
   33164:	0011      	movs	r1, r2
   33166:	0018      	movs	r0, r3
   33168:	4b09      	ldr	r3, [pc, #36]	; (33190 <_http_client_read_chuked_entity+0x20c>)
   3316a:	4798      	blx	r3
				return;
   3316c:	e00d      	b.n	3318a <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   3316e:	69fb      	ldr	r3, [r7, #28]
   33170:	2b00      	cmp	r3, #0
   33172:	d105      	bne.n	33180 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   33174:	687b      	ldr	r3, [r7, #4]
   33176:	21e0      	movs	r1, #224	; 0xe0
   33178:	2201      	movs	r2, #1
   3317a:	4252      	negs	r2, r2
   3317c:	505a      	str	r2, [r3, r1]
				return;
   3317e:	e004      	b.n	3318a <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   33180:	687b      	ldr	r3, [r7, #4]
   33182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   33184:	2b00      	cmp	r3, #0
   33186:	d000      	beq.n	3318a <_http_client_read_chuked_entity+0x206>
   33188:	e708      	b.n	32f9c <_http_client_read_chuked_entity+0x18>
}
   3318a:	46bd      	mov	sp, r7
   3318c:	b008      	add	sp, #32
   3318e:	bd80      	pop	{r7, pc}
   33190:	0003235d 	.word	0x0003235d
   33194:	00033345 	.word	0x00033345

00033198 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   33198:	b580      	push	{r7, lr}
   3319a:	b086      	sub	sp, #24
   3319c:	af00      	add	r7, sp, #0
   3319e:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   331a0:	687b      	ldr	r3, [r7, #4]
   331a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   331a4:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   331a6:	687b      	ldr	r3, [r7, #4]
   331a8:	22dc      	movs	r2, #220	; 0xdc
   331aa:	589b      	ldr	r3, [r3, r2]
   331ac:	2b00      	cmp	r3, #0
   331ae:	db58      	blt.n	33262 <_http_client_handle_entity+0xca>
   331b0:	687b      	ldr	r3, [r7, #4]
   331b2:	22dc      	movs	r2, #220	; 0xdc
   331b4:	589a      	ldr	r2, [r3, r2]
   331b6:	687b      	ldr	r3, [r7, #4]
   331b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   331ba:	429a      	cmp	r2, r3
   331bc:	dc51      	bgt.n	33262 <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   331be:	687b      	ldr	r3, [r7, #4]
   331c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   331c2:	0019      	movs	r1, r3
   331c4:	687b      	ldr	r3, [r7, #4]
   331c6:	22dc      	movs	r2, #220	; 0xdc
   331c8:	589b      	ldr	r3, [r3, r2]
   331ca:	4299      	cmp	r1, r3
   331cc:	da00      	bge.n	331d0 <_http_client_handle_entity+0x38>
   331ce:	e0a9      	b.n	33324 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   331d0:	687b      	ldr	r3, [r7, #4]
   331d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   331d4:	2b00      	cmp	r3, #0
   331d6:	d020      	beq.n	3321a <_http_client_handle_entity+0x82>
   331d8:	687b      	ldr	r3, [r7, #4]
   331da:	22e4      	movs	r2, #228	; 0xe4
   331dc:	5a9b      	ldrh	r3, [r3, r2]
   331de:	2b00      	cmp	r3, #0
   331e0:	d01b      	beq.n	3321a <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   331e2:	687b      	ldr	r3, [r7, #4]
   331e4:	22e4      	movs	r2, #228	; 0xe4
   331e6:	5a9a      	ldrh	r2, [r3, r2]
   331e8:	2308      	movs	r3, #8
   331ea:	18fb      	adds	r3, r7, r3
   331ec:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   331ee:	2308      	movs	r3, #8
   331f0:	18fb      	adds	r3, r7, r3
   331f2:	2200      	movs	r2, #0
   331f4:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   331f6:	687b      	ldr	r3, [r7, #4]
   331f8:	22dc      	movs	r2, #220	; 0xdc
   331fa:	589b      	ldr	r3, [r3, r2]
   331fc:	001a      	movs	r2, r3
   331fe:	2308      	movs	r3, #8
   33200:	18fb      	adds	r3, r7, r3
   33202:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   33204:	2308      	movs	r3, #8
   33206:	18fb      	adds	r3, r7, r3
   33208:	697a      	ldr	r2, [r7, #20]
   3320a:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   3320c:	687b      	ldr	r3, [r7, #4]
   3320e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33210:	2208      	movs	r2, #8
   33212:	18ba      	adds	r2, r7, r2
   33214:	6878      	ldr	r0, [r7, #4]
   33216:	2102      	movs	r1, #2
   33218:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   3321a:	687b      	ldr	r3, [r7, #4]
   3321c:	22d8      	movs	r2, #216	; 0xd8
   3321e:	2100      	movs	r1, #0
   33220:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   33222:	687b      	ldr	r3, [r7, #4]
   33224:	22e4      	movs	r2, #228	; 0xe4
   33226:	2100      	movs	r1, #0
   33228:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   3322a:	687b      	ldr	r3, [r7, #4]
   3322c:	2241      	movs	r2, #65	; 0x41
   3322e:	5c9b      	ldrb	r3, [r3, r2]
   33230:	2202      	movs	r2, #2
   33232:	4013      	ands	r3, r2
   33234:	b2db      	uxtb	r3, r3
   33236:	2b00      	cmp	r3, #0
   33238:	d105      	bne.n	33246 <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   3323a:	687b      	ldr	r3, [r7, #4]
   3323c:	2100      	movs	r1, #0
   3323e:	0018      	movs	r0, r3
   33240:	4b3b      	ldr	r3, [pc, #236]	; (33330 <_http_client_handle_entity+0x198>)
   33242:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   33244:	e06e      	b.n	33324 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   33246:	687b      	ldr	r3, [r7, #4]
   33248:	22dc      	movs	r2, #220	; 0xdc
   3324a:	589b      	ldr	r3, [r3, r2]
   3324c:	001a      	movs	r2, r3
   3324e:	697b      	ldr	r3, [r7, #20]
   33250:	189a      	adds	r2, r3, r2
   33252:	687b      	ldr	r3, [r7, #4]
   33254:	0011      	movs	r1, r2
   33256:	0018      	movs	r0, r3
   33258:	4b36      	ldr	r3, [pc, #216]	; (33334 <_http_client_handle_entity+0x19c>)
   3325a:	4798      	blx	r3
				return module->recved_size;
   3325c:	687b      	ldr	r3, [r7, #4]
   3325e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   33260:	e061      	b.n	33326 <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   33262:	687b      	ldr	r3, [r7, #4]
   33264:	22dc      	movs	r2, #220	; 0xdc
   33266:	589b      	ldr	r3, [r3, r2]
   33268:	2b00      	cmp	r3, #0
   3326a:	db57      	blt.n	3331c <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   3326c:	687b      	ldr	r3, [r7, #4]
   3326e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   33270:	2308      	movs	r3, #8
   33272:	18fb      	adds	r3, r7, r3
   33274:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   33276:	2308      	movs	r3, #8
   33278:	18fb      	adds	r3, r7, r3
   3327a:	697a      	ldr	r2, [r7, #20]
   3327c:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   3327e:	687b      	ldr	r3, [r7, #4]
   33280:	22e0      	movs	r2, #224	; 0xe0
   33282:	589a      	ldr	r2, [r3, r2]
   33284:	687b      	ldr	r3, [r7, #4]
   33286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   33288:	18d2      	adds	r2, r2, r3
   3328a:	687b      	ldr	r3, [r7, #4]
   3328c:	21e0      	movs	r1, #224	; 0xe0
   3328e:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   33290:	687b      	ldr	r3, [r7, #4]
   33292:	22dc      	movs	r2, #220	; 0xdc
   33294:	589a      	ldr	r2, [r3, r2]
   33296:	687b      	ldr	r3, [r7, #4]
   33298:	21e0      	movs	r1, #224	; 0xe0
   3329a:	585b      	ldr	r3, [r3, r1]
   3329c:	429a      	cmp	r2, r3
   3329e:	dc0c      	bgt.n	332ba <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   332a0:	687b      	ldr	r3, [r7, #4]
   332a2:	22d8      	movs	r2, #216	; 0xd8
   332a4:	2100      	movs	r1, #0
   332a6:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   332a8:	687b      	ldr	r3, [r7, #4]
   332aa:	22e4      	movs	r2, #228	; 0xe4
   332ac:	2100      	movs	r1, #0
   332ae:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   332b0:	2308      	movs	r3, #8
   332b2:	18fb      	adds	r3, r7, r3
   332b4:	2201      	movs	r2, #1
   332b6:	721a      	strb	r2, [r3, #8]
   332b8:	e003      	b.n	332c2 <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   332ba:	2308      	movs	r3, #8
   332bc:	18fb      	adds	r3, r7, r3
   332be:	2200      	movs	r2, #0
   332c0:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   332c2:	687b      	ldr	r3, [r7, #4]
   332c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   332c6:	2b00      	cmp	r3, #0
   332c8:	d006      	beq.n	332d8 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   332ca:	687b      	ldr	r3, [r7, #4]
   332cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   332ce:	2208      	movs	r2, #8
   332d0:	18ba      	adds	r2, r7, r2
   332d2:	6878      	ldr	r0, [r7, #4]
   332d4:	2103      	movs	r1, #3
   332d6:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   332d8:	2308      	movs	r3, #8
   332da:	18fb      	adds	r3, r7, r3
   332dc:	7a1b      	ldrb	r3, [r3, #8]
   332de:	2b01      	cmp	r3, #1
   332e0:	d112      	bne.n	33308 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   332e2:	687b      	ldr	r3, [r7, #4]
   332e4:	2241      	movs	r2, #65	; 0x41
   332e6:	5c9b      	ldrb	r3, [r3, r2]
   332e8:	2202      	movs	r2, #2
   332ea:	4013      	ands	r3, r2
   332ec:	b2db      	uxtb	r3, r3
   332ee:	2b00      	cmp	r3, #0
   332f0:	d10a      	bne.n	33308 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   332f2:	4b11      	ldr	r3, [pc, #68]	; (33338 <_http_client_handle_entity+0x1a0>)
   332f4:	0018      	movs	r0, r3
   332f6:	4b11      	ldr	r3, [pc, #68]	; (3333c <_http_client_handle_entity+0x1a4>)
   332f8:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   332fa:	687b      	ldr	r3, [r7, #4]
   332fc:	2100      	movs	r1, #0
   332fe:	0018      	movs	r0, r3
   33300:	4b0b      	ldr	r3, [pc, #44]	; (33330 <_http_client_handle_entity+0x198>)
   33302:	4798      	blx	r3
					return 0;
   33304:	2300      	movs	r3, #0
   33306:	e00e      	b.n	33326 <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   33308:	687b      	ldr	r3, [r7, #4]
   3330a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3330c:	697a      	ldr	r2, [r7, #20]
   3330e:	18d2      	adds	r2, r2, r3
   33310:	687b      	ldr	r3, [r7, #4]
   33312:	0011      	movs	r1, r2
   33314:	0018      	movs	r0, r3
   33316:	4b07      	ldr	r3, [pc, #28]	; (33334 <_http_client_handle_entity+0x19c>)
   33318:	4798      	blx	r3
   3331a:	e003      	b.n	33324 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   3331c:	687b      	ldr	r3, [r7, #4]
   3331e:	0018      	movs	r0, r3
   33320:	4b07      	ldr	r3, [pc, #28]	; (33340 <_http_client_handle_entity+0x1a8>)
   33322:	4798      	blx	r3
		}
	}

	return 0;
   33324:	2300      	movs	r3, #0
}
   33326:	0018      	movs	r0, r3
   33328:	46bd      	mov	sp, r7
   3332a:	b006      	add	sp, #24
   3332c:	bd80      	pop	{r7, pc}
   3332e:	46c0      	nop			; (mov r8, r8)
   33330:	0003235d 	.word	0x0003235d
   33334:	00033345 	.word	0x00033345
   33338:	0003bbe8 	.word	0x0003bbe8
   3333c:	00036661 	.word	0x00036661
   33340:	00032f85 	.word	0x00032f85

00033344 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   33344:	b580      	push	{r7, lr}
   33346:	b084      	sub	sp, #16
   33348:	af00      	add	r7, sp, #0
   3334a:	6078      	str	r0, [r7, #4]
   3334c:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   3334e:	687b      	ldr	r3, [r7, #4]
   33350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   33352:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   33354:	687b      	ldr	r3, [r7, #4]
   33356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   33358:	001a      	movs	r2, r3
   3335a:	683b      	ldr	r3, [r7, #0]
   3335c:	1ad2      	subs	r2, r2, r3
   3335e:	68fb      	ldr	r3, [r7, #12]
   33360:	18d3      	adds	r3, r2, r3
   33362:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   33364:	68bb      	ldr	r3, [r7, #8]
   33366:	2b00      	cmp	r3, #0
   33368:	dd09      	ble.n	3337e <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   3336a:	68ba      	ldr	r2, [r7, #8]
   3336c:	6839      	ldr	r1, [r7, #0]
   3336e:	68fb      	ldr	r3, [r7, #12]
   33370:	0018      	movs	r0, r3
   33372:	4b06      	ldr	r3, [pc, #24]	; (3338c <_http_client_move_buffer+0x48>)
   33374:	4798      	blx	r3
		module->recved_size = remain;
   33376:	68ba      	ldr	r2, [r7, #8]
   33378:	687b      	ldr	r3, [r7, #4]
   3337a:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   3337c:	e002      	b.n	33384 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   3337e:	687b      	ldr	r3, [r7, #4]
   33380:	2200      	movs	r2, #0
   33382:	645a      	str	r2, [r3, #68]	; 0x44
}
   33384:	46c0      	nop			; (mov r8, r8)
   33386:	46bd      	mov	sp, r7
   33388:	b004      	add	sp, #16
   3338a:	bd80      	pop	{r7, pc}
   3338c:	0003641b 	.word	0x0003641b

00033390 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   33390:	b580      	push	{r7, lr}
   33392:	b084      	sub	sp, #16
   33394:	af00      	add	r7, sp, #0
   33396:	60f8      	str	r0, [r7, #12]
   33398:	60b9      	str	r1, [r7, #8]
   3339a:	607a      	str	r2, [r7, #4]
   3339c:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   3339e:	68fb      	ldr	r3, [r7, #12]
   333a0:	687a      	ldr	r2, [r7, #4]
   333a2:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   333a4:	68fb      	ldr	r3, [r7, #12]
   333a6:	68ba      	ldr	r2, [r7, #8]
   333a8:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   333aa:	68fb      	ldr	r3, [r7, #12]
   333ac:	2200      	movs	r2, #0
   333ae:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   333b0:	68fb      	ldr	r3, [r7, #12]
   333b2:	683a      	ldr	r2, [r7, #0]
   333b4:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   333b6:	68fb      	ldr	r3, [r7, #12]
   333b8:	69ba      	ldr	r2, [r7, #24]
   333ba:	60da      	str	r2, [r3, #12]
}
   333bc:	46c0      	nop			; (mov r8, r8)
   333be:	46bd      	mov	sp, r7
   333c0:	b004      	add	sp, #16
   333c2:	bd80      	pop	{r7, pc}

000333c4 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   333c4:	b580      	push	{r7, lr}
   333c6:	b084      	sub	sp, #16
   333c8:	af00      	add	r7, sp, #0
   333ca:	6078      	str	r0, [r7, #4]
   333cc:	000a      	movs	r2, r1
   333ce:	1cfb      	adds	r3, r7, #3
   333d0:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   333d2:	687b      	ldr	r3, [r7, #4]
   333d4:	681a      	ldr	r2, [r3, #0]
   333d6:	687b      	ldr	r3, [r7, #4]
   333d8:	685b      	ldr	r3, [r3, #4]
   333da:	1ad3      	subs	r3, r2, r3
   333dc:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   333de:	68fb      	ldr	r3, [r7, #12]
   333e0:	2b00      	cmp	r3, #0
   333e2:	dc03      	bgt.n	333ec <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   333e4:	687b      	ldr	r3, [r7, #4]
   333e6:	0018      	movs	r0, r3
   333e8:	4b08      	ldr	r3, [pc, #32]	; (3340c <stream_writer_send_8+0x48>)
   333ea:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   333ec:	687b      	ldr	r3, [r7, #4]
   333ee:	6919      	ldr	r1, [r3, #16]
   333f0:	687b      	ldr	r3, [r7, #4]
   333f2:	685b      	ldr	r3, [r3, #4]
   333f4:	1c58      	adds	r0, r3, #1
   333f6:	687a      	ldr	r2, [r7, #4]
   333f8:	6050      	str	r0, [r2, #4]
   333fa:	18cb      	adds	r3, r1, r3
   333fc:	1cfa      	adds	r2, r7, #3
   333fe:	7812      	ldrb	r2, [r2, #0]
   33400:	701a      	strb	r2, [r3, #0]
}
   33402:	46c0      	nop			; (mov r8, r8)
   33404:	46bd      	mov	sp, r7
   33406:	b004      	add	sp, #16
   33408:	bd80      	pop	{r7, pc}
   3340a:	46c0      	nop			; (mov r8, r8)
   3340c:	0003344d 	.word	0x0003344d

00033410 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   33410:	b580      	push	{r7, lr}
   33412:	b084      	sub	sp, #16
   33414:	af00      	add	r7, sp, #0
   33416:	60f8      	str	r0, [r7, #12]
   33418:	60b9      	str	r1, [r7, #8]
   3341a:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   3341c:	e00d      	b.n	3343a <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   3341e:	68bb      	ldr	r3, [r7, #8]
   33420:	781b      	ldrb	r3, [r3, #0]
   33422:	b25a      	sxtb	r2, r3
   33424:	68fb      	ldr	r3, [r7, #12]
   33426:	0011      	movs	r1, r2
   33428:	0018      	movs	r0, r3
   3342a:	4b07      	ldr	r3, [pc, #28]	; (33448 <stream_writer_send_buffer+0x38>)
   3342c:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   3342e:	687b      	ldr	r3, [r7, #4]
   33430:	3b01      	subs	r3, #1
   33432:	607b      	str	r3, [r7, #4]
   33434:	68bb      	ldr	r3, [r7, #8]
   33436:	3301      	adds	r3, #1
   33438:	60bb      	str	r3, [r7, #8]
   3343a:	687b      	ldr	r3, [r7, #4]
   3343c:	2b00      	cmp	r3, #0
   3343e:	d1ee      	bne.n	3341e <stream_writer_send_buffer+0xe>
	}
}
   33440:	46c0      	nop			; (mov r8, r8)
   33442:	46bd      	mov	sp, r7
   33444:	b004      	add	sp, #16
   33446:	bd80      	pop	{r7, pc}
   33448:	000333c5 	.word	0x000333c5

0003344c <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   3344c:	b590      	push	{r4, r7, lr}
   3344e:	b083      	sub	sp, #12
   33450:	af00      	add	r7, sp, #0
   33452:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   33454:	687b      	ldr	r3, [r7, #4]
   33456:	685b      	ldr	r3, [r3, #4]
   33458:	2b00      	cmp	r3, #0
   3345a:	d00c      	beq.n	33476 <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   3345c:	687b      	ldr	r3, [r7, #4]
   3345e:	689c      	ldr	r4, [r3, #8]
   33460:	687b      	ldr	r3, [r7, #4]
   33462:	68d8      	ldr	r0, [r3, #12]
   33464:	687b      	ldr	r3, [r7, #4]
   33466:	6919      	ldr	r1, [r3, #16]
   33468:	687b      	ldr	r3, [r7, #4]
   3346a:	685b      	ldr	r3, [r3, #4]
   3346c:	001a      	movs	r2, r3
   3346e:	47a0      	blx	r4
		writer->written = 0;
   33470:	687b      	ldr	r3, [r7, #4]
   33472:	2200      	movs	r2, #0
   33474:	605a      	str	r2, [r3, #4]
	}
}
   33476:	46c0      	nop			; (mov r8, r8)
   33478:	46bd      	mov	sp, r7
   3347a:	b003      	add	sp, #12
   3347c:	bd90      	pop	{r4, r7, pc}
	...

00033480 <system_cpu_clock_get_hz>:
{
   33480:	b580      	push	{r7, lr}
   33482:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   33484:	2000      	movs	r0, #0
   33486:	4b05      	ldr	r3, [pc, #20]	; (3349c <system_cpu_clock_get_hz+0x1c>)
   33488:	4798      	blx	r3
   3348a:	0002      	movs	r2, r0
   3348c:	4b04      	ldr	r3, [pc, #16]	; (334a0 <system_cpu_clock_get_hz+0x20>)
   3348e:	7a1b      	ldrb	r3, [r3, #8]
   33490:	b2db      	uxtb	r3, r3
   33492:	40da      	lsrs	r2, r3
   33494:	0013      	movs	r3, r2
}
   33496:	0018      	movs	r0, r3
   33498:	46bd      	mov	sp, r7
   3349a:	bd80      	pop	{r7, pc}
   3349c:	0002ad35 	.word	0x0002ad35
   334a0:	40000400 	.word	0x40000400

000334a4 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   334a4:	b580      	push	{r7, lr}
   334a6:	b084      	sub	sp, #16
   334a8:	af00      	add	r7, sp, #0
   334aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   334ac:	687b      	ldr	r3, [r7, #4]
   334ae:	681b      	ldr	r3, [r3, #0]
   334b0:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   334b2:	46c0      	nop			; (mov r8, r8)
   334b4:	68fb      	ldr	r3, [r7, #12]
   334b6:	689b      	ldr	r3, [r3, #8]
   334b8:	2202      	movs	r2, #2
   334ba:	4013      	ands	r3, r2
   334bc:	d1fa      	bne.n	334b4 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   334be:	68fb      	ldr	r3, [r7, #12]
   334c0:	681b      	ldr	r3, [r3, #0]
   334c2:	2202      	movs	r2, #2
   334c4:	431a      	orrs	r2, r3
   334c6:	68fb      	ldr	r3, [r7, #12]
   334c8:	601a      	str	r2, [r3, #0]
}
   334ca:	46c0      	nop			; (mov r8, r8)
   334cc:	46bd      	mov	sp, r7
   334ce:	b004      	add	sp, #16
   334d0:	bd80      	pop	{r7, pc}
	...

000334d4 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   334d4:	b580      	push	{r7, lr}
   334d6:	b082      	sub	sp, #8
   334d8:	af00      	add	r7, sp, #0
   334da:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   334dc:	4b04      	ldr	r3, [pc, #16]	; (334f0 <sw_timer_tcc_callback+0x1c>)
   334de:	681b      	ldr	r3, [r3, #0]
   334e0:	1c5a      	adds	r2, r3, #1
   334e2:	4b03      	ldr	r3, [pc, #12]	; (334f0 <sw_timer_tcc_callback+0x1c>)
   334e4:	601a      	str	r2, [r3, #0]
}
   334e6:	46c0      	nop			; (mov r8, r8)
   334e8:	46bd      	mov	sp, r7
   334ea:	b002      	add	sp, #8
   334ec:	bd80      	pop	{r7, pc}
   334ee:	46c0      	nop			; (mov r8, r8)
   334f0:	20004714 	.word	0x20004714

000334f4 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   334f4:	b580      	push	{r7, lr}
   334f6:	b082      	sub	sp, #8
   334f8:	af00      	add	r7, sp, #0
   334fa:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   334fc:	687b      	ldr	r3, [r7, #4]
   334fe:	2264      	movs	r2, #100	; 0x64
   33500:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   33502:	687b      	ldr	r3, [r7, #4]
   33504:	2200      	movs	r2, #0
   33506:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   33508:	687b      	ldr	r3, [r7, #4]
   3350a:	2200      	movs	r2, #0
   3350c:	705a      	strb	r2, [r3, #1]
}
   3350e:	46c0      	nop			; (mov r8, r8)
   33510:	46bd      	mov	sp, r7
   33512:	b002      	add	sp, #8
   33514:	bd80      	pop	{r7, pc}
	...

00033518 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   33518:	b590      	push	{r4, r7, lr}
   3351a:	b0b1      	sub	sp, #196	; 0xc4
   3351c:	af00      	add	r7, sp, #0
   3351e:	6078      	str	r0, [r7, #4]
   33520:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   33522:	230c      	movs	r3, #12
   33524:	18fb      	adds	r3, r7, r3
   33526:	4a2e      	ldr	r2, [pc, #184]	; (335e0 <sw_timer_init+0xc8>)
   33528:	ca13      	ldmia	r2!, {r0, r1, r4}
   3352a:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   3352c:	683b      	ldr	r3, [r7, #0]
   3352e:	885b      	ldrh	r3, [r3, #2]
   33530:	001a      	movs	r2, r3
   33532:	687b      	ldr	r3, [r7, #4]
   33534:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   33536:	687b      	ldr	r3, [r7, #4]
   33538:	3314      	adds	r3, #20
   3353a:	22bc      	movs	r2, #188	; 0xbc
   3353c:	18ba      	adds	r2, r7, r2
   3353e:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   33540:	683b      	ldr	r3, [r7, #0]
   33542:	781b      	ldrb	r3, [r3, #0]
   33544:	001a      	movs	r2, r3
   33546:	230c      	movs	r3, #12
   33548:	18fb      	adds	r3, r7, r3
   3354a:	0092      	lsls	r2, r2, #2
   3354c:	58d2      	ldr	r2, [r2, r3]
   3354e:	2318      	movs	r3, #24
   33550:	18fb      	adds	r3, r7, r3
   33552:	0011      	movs	r1, r2
   33554:	0018      	movs	r0, r3
   33556:	4b23      	ldr	r3, [pc, #140]	; (335e4 <sw_timer_init+0xcc>)
   33558:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   3355a:	4b23      	ldr	r3, [pc, #140]	; (335e8 <sw_timer_init+0xd0>)
   3355c:	4798      	blx	r3
   3355e:	0004      	movs	r4, r0
   33560:	683b      	ldr	r3, [r7, #0]
   33562:	885b      	ldrh	r3, [r3, #2]
   33564:	001a      	movs	r2, r3
   33566:	4b21      	ldr	r3, [pc, #132]	; (335ec <sw_timer_init+0xd4>)
   33568:	0011      	movs	r1, r2
   3356a:	22fa      	movs	r2, #250	; 0xfa
   3356c:	0210      	lsls	r0, r2, #8
   3356e:	4798      	blx	r3
   33570:	0003      	movs	r3, r0
   33572:	001a      	movs	r2, r3
   33574:	4b1e      	ldr	r3, [pc, #120]	; (335f0 <sw_timer_init+0xd8>)
   33576:	0011      	movs	r1, r2
   33578:	0020      	movs	r0, r4
   3357a:	4798      	blx	r3
   3357c:	0003      	movs	r3, r0
   3357e:	001a      	movs	r2, r3
   33580:	2318      	movs	r3, #24
   33582:	18fb      	adds	r3, r7, r3
   33584:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   33586:	2318      	movs	r3, #24
   33588:	18fb      	adds	r3, r7, r3
   3358a:	2205      	movs	r2, #5
   3358c:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   3358e:	683b      	ldr	r3, [r7, #0]
   33590:	781b      	ldrb	r3, [r3, #0]
   33592:	001a      	movs	r2, r3
   33594:	230c      	movs	r3, #12
   33596:	18fb      	adds	r3, r7, r3
   33598:	0092      	lsls	r2, r2, #2
   3359a:	58d1      	ldr	r1, [r2, r3]
   3359c:	2318      	movs	r3, #24
   3359e:	18fa      	adds	r2, r7, r3
   335a0:	23bc      	movs	r3, #188	; 0xbc
   335a2:	18fb      	adds	r3, r7, r3
   335a4:	681b      	ldr	r3, [r3, #0]
   335a6:	0018      	movs	r0, r3
   335a8:	4b12      	ldr	r3, [pc, #72]	; (335f4 <sw_timer_init+0xdc>)
   335aa:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   335ac:	683b      	ldr	r3, [r7, #0]
   335ae:	785b      	ldrb	r3, [r3, #1]
   335b0:	3308      	adds	r3, #8
   335b2:	b2da      	uxtb	r2, r3
   335b4:	4910      	ldr	r1, [pc, #64]	; (335f8 <sw_timer_init+0xe0>)
   335b6:	23bc      	movs	r3, #188	; 0xbc
   335b8:	18fb      	adds	r3, r7, r3
   335ba:	681b      	ldr	r3, [r3, #0]
   335bc:	0018      	movs	r0, r3
   335be:	4b0f      	ldr	r3, [pc, #60]	; (335fc <sw_timer_init+0xe4>)
   335c0:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   335c2:	683b      	ldr	r3, [r7, #0]
   335c4:	785b      	ldrb	r3, [r3, #1]
   335c6:	3308      	adds	r3, #8
   335c8:	b2da      	uxtb	r2, r3
   335ca:	23bc      	movs	r3, #188	; 0xbc
   335cc:	18fb      	adds	r3, r7, r3
   335ce:	681b      	ldr	r3, [r3, #0]
   335d0:	0011      	movs	r1, r2
   335d2:	0018      	movs	r0, r3
   335d4:	4b0a      	ldr	r3, [pc, #40]	; (33600 <sw_timer_init+0xe8>)
   335d6:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   335d8:	46c0      	nop			; (mov r8, r8)
   335da:	46bd      	mov	sp, r7
   335dc:	b031      	add	sp, #196	; 0xc4
   335de:	bd90      	pop	{r4, r7, pc}
   335e0:	0003bc28 	.word	0x0003bc28
   335e4:	0002b2cd 	.word	0x0002b2cd
   335e8:	00033481 	.word	0x00033481
   335ec:	00033be9 	.word	0x00033be9
   335f0:	00033ad5 	.word	0x00033ad5
   335f4:	0002b929 	.word	0x0002b929
   335f8:	000334d5 	.word	0x000334d5
   335fc:	0002be6d 	.word	0x0002be6d
   33600:	0002bead 	.word	0x0002bead

00033604 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   33604:	b580      	push	{r7, lr}
   33606:	b084      	sub	sp, #16
   33608:	af00      	add	r7, sp, #0
   3360a:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   3360c:	687b      	ldr	r3, [r7, #4]
   3360e:	3314      	adds	r3, #20
   33610:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   33612:	68fb      	ldr	r3, [r7, #12]
   33614:	0018      	movs	r0, r3
   33616:	4b03      	ldr	r3, [pc, #12]	; (33624 <sw_timer_enable+0x20>)
   33618:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   3361a:	46c0      	nop			; (mov r8, r8)
   3361c:	46bd      	mov	sp, r7
   3361e:	b004      	add	sp, #16
   33620:	bd80      	pop	{r7, pc}
   33622:	46c0      	nop			; (mov r8, r8)
   33624:	000334a5 	.word	0x000334a5

00033628 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   33628:	b580      	push	{r7, lr}
   3362a:	b086      	sub	sp, #24
   3362c:	af00      	add	r7, sp, #0
   3362e:	60f8      	str	r0, [r7, #12]
   33630:	60b9      	str	r1, [r7, #8]
   33632:	607a      	str	r2, [r7, #4]
   33634:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   33636:	2300      	movs	r3, #0
   33638:	617b      	str	r3, [r7, #20]
   3363a:	e032      	b.n	336a2 <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   3363c:	68f9      	ldr	r1, [r7, #12]
   3363e:	697a      	ldr	r2, [r7, #20]
   33640:	0013      	movs	r3, r2
   33642:	009b      	lsls	r3, r3, #2
   33644:	189b      	adds	r3, r3, r2
   33646:	009b      	lsls	r3, r3, #2
   33648:	5c5b      	ldrb	r3, [r3, r1]
   3364a:	07db      	lsls	r3, r3, #31
   3364c:	0fdb      	lsrs	r3, r3, #31
   3364e:	b2db      	uxtb	r3, r3
   33650:	2b00      	cmp	r3, #0
   33652:	d123      	bne.n	3369c <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   33654:	697a      	ldr	r2, [r7, #20]
   33656:	0013      	movs	r3, r2
   33658:	009b      	lsls	r3, r3, #2
   3365a:	189b      	adds	r3, r3, r2
   3365c:	009b      	lsls	r3, r3, #2
   3365e:	68fa      	ldr	r2, [r7, #12]
   33660:	18d3      	adds	r3, r2, r3
   33662:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   33664:	693b      	ldr	r3, [r7, #16]
   33666:	68ba      	ldr	r2, [r7, #8]
   33668:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   3366a:	693b      	ldr	r3, [r7, #16]
   3366c:	781a      	ldrb	r2, [r3, #0]
   3366e:	2102      	movs	r1, #2
   33670:	438a      	bics	r2, r1
   33672:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   33674:	693b      	ldr	r3, [r7, #16]
   33676:	687a      	ldr	r2, [r7, #4]
   33678:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   3367a:	68fb      	ldr	r3, [r7, #12]
   3367c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   3367e:	4b0d      	ldr	r3, [pc, #52]	; (336b4 <sw_timer_register_callback+0x8c>)
   33680:	0011      	movs	r1, r2
   33682:	6838      	ldr	r0, [r7, #0]
   33684:	4798      	blx	r3
   33686:	0003      	movs	r3, r0
   33688:	001a      	movs	r2, r3
   3368a:	693b      	ldr	r3, [r7, #16]
   3368c:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   3368e:	693b      	ldr	r3, [r7, #16]
   33690:	781a      	ldrb	r2, [r3, #0]
   33692:	2101      	movs	r1, #1
   33694:	430a      	orrs	r2, r1
   33696:	701a      	strb	r2, [r3, #0]
			return index;
   33698:	697b      	ldr	r3, [r7, #20]
   3369a:	e007      	b.n	336ac <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   3369c:	697b      	ldr	r3, [r7, #20]
   3369e:	3301      	adds	r3, #1
   336a0:	617b      	str	r3, [r7, #20]
   336a2:	697b      	ldr	r3, [r7, #20]
   336a4:	2b00      	cmp	r3, #0
   336a6:	ddc9      	ble.n	3363c <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   336a8:	2301      	movs	r3, #1
   336aa:	425b      	negs	r3, r3
}
   336ac:	0018      	movs	r0, r3
   336ae:	46bd      	mov	sp, r7
   336b0:	b006      	add	sp, #24
   336b2:	bd80      	pop	{r7, pc}
   336b4:	00033ad5 	.word	0x00033ad5

000336b8 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   336b8:	b580      	push	{r7, lr}
   336ba:	b086      	sub	sp, #24
   336bc:	af00      	add	r7, sp, #0
   336be:	60f8      	str	r0, [r7, #12]
   336c0:	60b9      	str	r1, [r7, #8]
   336c2:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   336c4:	68ba      	ldr	r2, [r7, #8]
   336c6:	0013      	movs	r3, r2
   336c8:	009b      	lsls	r3, r3, #2
   336ca:	189b      	adds	r3, r3, r2
   336cc:	009b      	lsls	r3, r3, #2
   336ce:	68fa      	ldr	r2, [r7, #12]
   336d0:	18d3      	adds	r3, r2, r3
   336d2:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   336d4:	697b      	ldr	r3, [r7, #20]
   336d6:	781a      	ldrb	r2, [r3, #0]
   336d8:	2102      	movs	r1, #2
   336da:	430a      	orrs	r2, r1
   336dc:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   336de:	68fb      	ldr	r3, [r7, #12]
   336e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   336e2:	4b07      	ldr	r3, [pc, #28]	; (33700 <sw_timer_enable_callback+0x48>)
   336e4:	0011      	movs	r1, r2
   336e6:	6878      	ldr	r0, [r7, #4]
   336e8:	4798      	blx	r3
   336ea:	0003      	movs	r3, r0
   336ec:	001a      	movs	r2, r3
   336ee:	4b05      	ldr	r3, [pc, #20]	; (33704 <sw_timer_enable_callback+0x4c>)
   336f0:	681b      	ldr	r3, [r3, #0]
   336f2:	18d2      	adds	r2, r2, r3
   336f4:	697b      	ldr	r3, [r7, #20]
   336f6:	611a      	str	r2, [r3, #16]
}
   336f8:	46c0      	nop			; (mov r8, r8)
   336fa:	46bd      	mov	sp, r7
   336fc:	b006      	add	sp, #24
   336fe:	bd80      	pop	{r7, pc}
   33700:	00033ad5 	.word	0x00033ad5
   33704:	20004714 	.word	0x20004714

00033708 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   33708:	b580      	push	{r7, lr}
   3370a:	b084      	sub	sp, #16
   3370c:	af00      	add	r7, sp, #0
   3370e:	6078      	str	r0, [r7, #4]
   33710:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   33712:	683a      	ldr	r2, [r7, #0]
   33714:	0013      	movs	r3, r2
   33716:	009b      	lsls	r3, r3, #2
   33718:	189b      	adds	r3, r3, r2
   3371a:	009b      	lsls	r3, r3, #2
   3371c:	687a      	ldr	r2, [r7, #4]
   3371e:	18d3      	adds	r3, r2, r3
   33720:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   33722:	68fb      	ldr	r3, [r7, #12]
   33724:	781a      	ldrb	r2, [r3, #0]
   33726:	2102      	movs	r1, #2
   33728:	438a      	bics	r2, r1
   3372a:	701a      	strb	r2, [r3, #0]
}
   3372c:	46c0      	nop			; (mov r8, r8)
   3372e:	46bd      	mov	sp, r7
   33730:	b004      	add	sp, #16
   33732:	bd80      	pop	{r7, pc}

00033734 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   33734:	b590      	push	{r4, r7, lr}
   33736:	b085      	sub	sp, #20
   33738:	af00      	add	r7, sp, #0
   3373a:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   3373c:	2300      	movs	r3, #0
   3373e:	60fb      	str	r3, [r7, #12]
   33740:	e053      	b.n	337ea <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   33742:	6879      	ldr	r1, [r7, #4]
   33744:	68fa      	ldr	r2, [r7, #12]
   33746:	0013      	movs	r3, r2
   33748:	009b      	lsls	r3, r3, #2
   3374a:	189b      	adds	r3, r3, r2
   3374c:	009b      	lsls	r3, r3, #2
   3374e:	5c5b      	ldrb	r3, [r3, r1]
   33750:	07db      	lsls	r3, r3, #31
   33752:	0fdb      	lsrs	r3, r3, #31
   33754:	b2db      	uxtb	r3, r3
   33756:	2b00      	cmp	r3, #0
   33758:	d044      	beq.n	337e4 <sw_timer_task+0xb0>
   3375a:	6879      	ldr	r1, [r7, #4]
   3375c:	68fa      	ldr	r2, [r7, #12]
   3375e:	0013      	movs	r3, r2
   33760:	009b      	lsls	r3, r3, #2
   33762:	189b      	adds	r3, r3, r2
   33764:	009b      	lsls	r3, r3, #2
   33766:	5c5b      	ldrb	r3, [r3, r1]
   33768:	079b      	lsls	r3, r3, #30
   3376a:	0fdb      	lsrs	r3, r3, #31
   3376c:	b2db      	uxtb	r3, r3
   3376e:	2b00      	cmp	r3, #0
   33770:	d038      	beq.n	337e4 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   33772:	68fa      	ldr	r2, [r7, #12]
   33774:	0013      	movs	r3, r2
   33776:	009b      	lsls	r3, r3, #2
   33778:	189b      	adds	r3, r3, r2
   3377a:	009b      	lsls	r3, r3, #2
   3377c:	687a      	ldr	r2, [r7, #4]
   3377e:	18d3      	adds	r3, r2, r3
   33780:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   33782:	68bb      	ldr	r3, [r7, #8]
   33784:	691a      	ldr	r2, [r3, #16]
   33786:	4b1c      	ldr	r3, [pc, #112]	; (337f8 <sw_timer_task+0xc4>)
   33788:	681b      	ldr	r3, [r3, #0]
   3378a:	1ad3      	subs	r3, r2, r3
   3378c:	d52a      	bpl.n	337e4 <sw_timer_task+0xb0>
   3378e:	68bb      	ldr	r3, [r7, #8]
   33790:	781b      	ldrb	r3, [r3, #0]
   33792:	2204      	movs	r2, #4
   33794:	4013      	ands	r3, r2
   33796:	b2db      	uxtb	r3, r3
   33798:	2b00      	cmp	r3, #0
   3379a:	d123      	bne.n	337e4 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   3379c:	68bb      	ldr	r3, [r7, #8]
   3379e:	781a      	ldrb	r2, [r3, #0]
   337a0:	2104      	movs	r1, #4
   337a2:	430a      	orrs	r2, r1
   337a4:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   337a6:	68bb      	ldr	r3, [r7, #8]
   337a8:	68db      	ldr	r3, [r3, #12]
   337aa:	2b00      	cmp	r3, #0
   337ac:	d007      	beq.n	337be <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   337ae:	68bb      	ldr	r3, [r7, #8]
   337b0:	68da      	ldr	r2, [r3, #12]
   337b2:	4b11      	ldr	r3, [pc, #68]	; (337f8 <sw_timer_task+0xc4>)
   337b4:	681b      	ldr	r3, [r3, #0]
   337b6:	18d2      	adds	r2, r2, r3
   337b8:	68bb      	ldr	r3, [r7, #8]
   337ba:	611a      	str	r2, [r3, #16]
   337bc:	e004      	b.n	337c8 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   337be:	68bb      	ldr	r3, [r7, #8]
   337c0:	781a      	ldrb	r2, [r3, #0]
   337c2:	2102      	movs	r1, #2
   337c4:	438a      	bics	r2, r1
   337c6:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   337c8:	68bb      	ldr	r3, [r7, #8]
   337ca:	685c      	ldr	r4, [r3, #4]
   337cc:	68bb      	ldr	r3, [r7, #8]
   337ce:	689a      	ldr	r2, [r3, #8]
   337d0:	68bb      	ldr	r3, [r7, #8]
   337d2:	68db      	ldr	r3, [r3, #12]
   337d4:	68f9      	ldr	r1, [r7, #12]
   337d6:	6878      	ldr	r0, [r7, #4]
   337d8:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   337da:	68bb      	ldr	r3, [r7, #8]
   337dc:	781a      	ldrb	r2, [r3, #0]
   337de:	2104      	movs	r1, #4
   337e0:	438a      	bics	r2, r1
   337e2:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   337e4:	68fb      	ldr	r3, [r7, #12]
   337e6:	3301      	adds	r3, #1
   337e8:	60fb      	str	r3, [r7, #12]
   337ea:	68fb      	ldr	r3, [r7, #12]
   337ec:	2b00      	cmp	r3, #0
   337ee:	dda8      	ble.n	33742 <sw_timer_task+0xe>
			}
		}
	}
}
   337f0:	46c0      	nop			; (mov r8, r8)
   337f2:	46bd      	mov	sp, r7
   337f4:	b005      	add	sp, #20
   337f6:	bd90      	pop	{r4, r7, pc}
   337f8:	20004714 	.word	0x20004714

000337fc <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   337fc:	b580      	push	{r7, lr}
   337fe:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   33800:	4b06      	ldr	r3, [pc, #24]	; (3381c <main+0x20>)
   33802:	4798      	blx	r3
		//delay_ms(2000);
		//servo_setDuty(3);
		//delay_ms(2000);
	//}
    /* Initialize the UART console. */
    InitializeSerialConsole();
   33804:	4b06      	ldr	r3, [pc, #24]	; (33820 <main+0x24>)
   33806:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   33808:	2001      	movs	r0, #1
   3380a:	4b06      	ldr	r3, [pc, #24]	; (33824 <main+0x28>)
   3380c:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   3380e:	4b06      	ldr	r3, [pc, #24]	; (33828 <main+0x2c>)
   33810:	4798      	blx	r3

    return 0;  // Will not get here
   33812:	2300      	movs	r3, #0
}
   33814:	0018      	movs	r0, r3
   33816:	46bd      	mov	sp, r7
   33818:	bd80      	pop	{r7, pc}
   3381a:	46c0      	nop			; (mov r8, r8)
   3381c:	0002b1c1 	.word	0x0002b1c1
   33820:	0001ec65 	.word	0x0001ec65
   33824:	00019331 	.word	0x00019331
   33828:	0001d2bd 	.word	0x0001d2bd

0003382c <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   3382c:	b580      	push	{r7, lr}
   3382e:	b082      	sub	sp, #8
   33830:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   33832:	4b29      	ldr	r3, [pc, #164]	; (338d8 <vApplicationDaemonTaskStartupHook+0xac>)
   33834:	0018      	movs	r0, r3
   33836:	4b29      	ldr	r3, [pc, #164]	; (338dc <vApplicationDaemonTaskStartupHook+0xb0>)
   33838:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   3383a:	4b29      	ldr	r3, [pc, #164]	; (338e0 <vApplicationDaemonTaskStartupHook+0xb4>)
   3383c:	0018      	movs	r0, r3
   3383e:	4b27      	ldr	r3, [pc, #156]	; (338dc <vApplicationDaemonTaskStartupHook+0xb0>)
   33840:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   33842:	4b28      	ldr	r3, [pc, #160]	; (338e4 <vApplicationDaemonTaskStartupHook+0xb8>)
   33844:	4798      	blx	r3
   33846:	1e03      	subs	r3, r0, #0
   33848:	d004      	beq.n	33854 <vApplicationDaemonTaskStartupHook+0x28>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   3384a:	4b27      	ldr	r3, [pc, #156]	; (338e8 <vApplicationDaemonTaskStartupHook+0xbc>)
   3384c:	0018      	movs	r0, r3
   3384e:	4b23      	ldr	r3, [pc, #140]	; (338dc <vApplicationDaemonTaskStartupHook+0xb0>)
   33850:	4798      	blx	r3
   33852:	e003      	b.n	3385c <vApplicationDaemonTaskStartupHook+0x30>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   33854:	4b25      	ldr	r3, [pc, #148]	; (338ec <vApplicationDaemonTaskStartupHook+0xc0>)
   33856:	0018      	movs	r0, r3
   33858:	4b20      	ldr	r3, [pc, #128]	; (338dc <vApplicationDaemonTaskStartupHook+0xb0>)
   3385a:	4798      	blx	r3
    }

    if (0 != InitializeSeesaw()) {
   3385c:	4b24      	ldr	r3, [pc, #144]	; (338f0 <vApplicationDaemonTaskStartupHook+0xc4>)
   3385e:	4798      	blx	r3
   33860:	1e03      	subs	r3, r0, #0
   33862:	d004      	beq.n	3386e <vApplicationDaemonTaskStartupHook+0x42>
        SerialConsoleWriteString("Error initializing Seesaw!\r\n");
   33864:	4b23      	ldr	r3, [pc, #140]	; (338f4 <vApplicationDaemonTaskStartupHook+0xc8>)
   33866:	0018      	movs	r0, r3
   33868:	4b1c      	ldr	r3, [pc, #112]	; (338dc <vApplicationDaemonTaskStartupHook+0xb0>)
   3386a:	4798      	blx	r3
   3386c:	e003      	b.n	33876 <vApplicationDaemonTaskStartupHook+0x4a>
    } else {
        SerialConsoleWriteString("Initialized Seesaw!\r\n");
   3386e:	4b22      	ldr	r3, [pc, #136]	; (338f8 <vApplicationDaemonTaskStartupHook+0xcc>)
   33870:	0018      	movs	r0, r3
   33872:	4b1a      	ldr	r3, [pc, #104]	; (338dc <vApplicationDaemonTaskStartupHook+0xb0>)
   33874:	4798      	blx	r3
    }

    uint8_t whoamI = 0;
   33876:	1dfb      	adds	r3, r7, #7
   33878:	2200      	movs	r2, #0
   3387a:	701a      	strb	r2, [r3, #0]
    (lsm6dso_device_id_get(GetImuStruct(), &whoamI));
   3387c:	4b1f      	ldr	r3, [pc, #124]	; (338fc <vApplicationDaemonTaskStartupHook+0xd0>)
   3387e:	4798      	blx	r3
   33880:	0002      	movs	r2, r0
   33882:	1dfb      	adds	r3, r7, #7
   33884:	0019      	movs	r1, r3
   33886:	0010      	movs	r0, r2
   33888:	4b1d      	ldr	r3, [pc, #116]	; (33900 <vApplicationDaemonTaskStartupHook+0xd4>)
   3388a:	4798      	blx	r3

    if (whoamI != LSM6DSO_ID) {
   3388c:	1dfb      	adds	r3, r7, #7
   3388e:	781b      	ldrb	r3, [r3, #0]
   33890:	2b6c      	cmp	r3, #108	; 0x6c
   33892:	d004      	beq.n	3389e <vApplicationDaemonTaskStartupHook+0x72>
        SerialConsoleWriteString("Cannot find IMU!\r\n");
   33894:	4b1b      	ldr	r3, [pc, #108]	; (33904 <vApplicationDaemonTaskStartupHook+0xd8>)
   33896:	0018      	movs	r0, r3
   33898:	4b10      	ldr	r3, [pc, #64]	; (338dc <vApplicationDaemonTaskStartupHook+0xb0>)
   3389a:	4798      	blx	r3
   3389c:	e010      	b.n	338c0 <vApplicationDaemonTaskStartupHook+0x94>
    } else {
        SerialConsoleWriteString("IMU found!\r\n");
   3389e:	4b1a      	ldr	r3, [pc, #104]	; (33908 <vApplicationDaemonTaskStartupHook+0xdc>)
   338a0:	0018      	movs	r0, r3
   338a2:	4b0e      	ldr	r3, [pc, #56]	; (338dc <vApplicationDaemonTaskStartupHook+0xb0>)
   338a4:	4798      	blx	r3
        if (InitImu() == 0) {
   338a6:	4b19      	ldr	r3, [pc, #100]	; (3390c <vApplicationDaemonTaskStartupHook+0xe0>)
   338a8:	4798      	blx	r3
   338aa:	1e03      	subs	r3, r0, #0
   338ac:	d104      	bne.n	338b8 <vApplicationDaemonTaskStartupHook+0x8c>
            SerialConsoleWriteString("IMU initialized!\r\n");
   338ae:	4b18      	ldr	r3, [pc, #96]	; (33910 <vApplicationDaemonTaskStartupHook+0xe4>)
   338b0:	0018      	movs	r0, r3
   338b2:	4b0a      	ldr	r3, [pc, #40]	; (338dc <vApplicationDaemonTaskStartupHook+0xb0>)
   338b4:	4798      	blx	r3
   338b6:	e003      	b.n	338c0 <vApplicationDaemonTaskStartupHook+0x94>
        } else {
            SerialConsoleWriteString("Could not initialize IMU\r\n");
   338b8:	4b16      	ldr	r3, [pc, #88]	; (33914 <vApplicationDaemonTaskStartupHook+0xe8>)
   338ba:	0018      	movs	r0, r3
   338bc:	4b07      	ldr	r3, [pc, #28]	; (338dc <vApplicationDaemonTaskStartupHook+0xb0>)
   338be:	4798      	blx	r3
    SerialConsoleWriteString("Initializing distance sensor\r\n");
    InitializeDistanceSensor();
    SerialConsoleWriteString("Distance sensor initialized\r\n");
	*/

    StartTasks();
   338c0:	4b15      	ldr	r3, [pc, #84]	; (33918 <vApplicationDaemonTaskStartupHook+0xec>)
   338c2:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   338c4:	4b15      	ldr	r3, [pc, #84]	; (3391c <vApplicationDaemonTaskStartupHook+0xf0>)
   338c6:	681b      	ldr	r3, [r3, #0]
   338c8:	0018      	movs	r0, r3
   338ca:	4b15      	ldr	r3, [pc, #84]	; (33920 <vApplicationDaemonTaskStartupHook+0xf4>)
   338cc:	4798      	blx	r3
}
   338ce:	46c0      	nop			; (mov r8, r8)
   338d0:	46bd      	mov	sp, r7
   338d2:	b002      	add	sp, #8
   338d4:	bd80      	pop	{r7, pc}
   338d6:	46c0      	nop			; (mov r8, r8)
   338d8:	0003bc34 	.word	0x0003bc34
   338dc:	0001ecd5 	.word	0x0001ecd5
   338e0:	0003bc58 	.word	0x0003bc58
   338e4:	000148f1 	.word	0x000148f1
   338e8:	0003bc70 	.word	0x0003bc70
   338ec:	0003bc94 	.word	0x0003bc94
   338f0:	00016195 	.word	0x00016195
   338f4:	0003bcb0 	.word	0x0003bcb0
   338f8:	0003bcd0 	.word	0x0003bcd0
   338fc:	00015a59 	.word	0x00015a59
   33900:	0001565d 	.word	0x0001565d
   33904:	0003bce8 	.word	0x0003bce8
   33908:	0003bcfc 	.word	0x0003bcfc
   3390c:	00015a69 	.word	0x00015a69
   33910:	0003bd0c 	.word	0x0003bd0c
   33914:	0003bd20 	.word	0x0003bd20
   33918:	00033925 	.word	0x00033925
   3391c:	2000471c 	.word	0x2000471c
   33920:	0001d161 	.word	0x0001d161

00033924 <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   33924:	b590      	push	{r4, r7, lr}
   33926:	b083      	sub	sp, #12
   33928:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   3392a:	4b44      	ldr	r3, [pc, #272]	; (33a3c <StartTasks+0x118>)
   3392c:	4798      	blx	r3
   3392e:	0003      	movs	r3, r0
   33930:	4a43      	ldr	r2, [pc, #268]	; (33a40 <StartTasks+0x11c>)
   33932:	4844      	ldr	r0, [pc, #272]	; (33a44 <StartTasks+0x120>)
   33934:	2140      	movs	r1, #64	; 0x40
   33936:	4c44      	ldr	r4, [pc, #272]	; (33a48 <StartTasks+0x124>)
   33938:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   3393a:	4b42      	ldr	r3, [pc, #264]	; (33a44 <StartTasks+0x120>)
   3393c:	0018      	movs	r0, r3
   3393e:	4b43      	ldr	r3, [pc, #268]	; (33a4c <StartTasks+0x128>)
   33940:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   33942:	23c8      	movs	r3, #200	; 0xc8
   33944:	005a      	lsls	r2, r3, #1
   33946:	4942      	ldr	r1, [pc, #264]	; (33a50 <StartTasks+0x12c>)
   33948:	4842      	ldr	r0, [pc, #264]	; (33a54 <StartTasks+0x130>)
   3394a:	4b43      	ldr	r3, [pc, #268]	; (33a58 <StartTasks+0x134>)
   3394c:	9301      	str	r3, [sp, #4]
   3394e:	2304      	movs	r3, #4
   33950:	9300      	str	r3, [sp, #0]
   33952:	2300      	movs	r3, #0
   33954:	4c41      	ldr	r4, [pc, #260]	; (33a5c <StartTasks+0x138>)
   33956:	47a0      	blx	r4
   33958:	0003      	movs	r3, r0
   3395a:	2b01      	cmp	r3, #1
   3395c:	d003      	beq.n	33966 <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   3395e:	4b40      	ldr	r3, [pc, #256]	; (33a60 <StartTasks+0x13c>)
   33960:	0018      	movs	r0, r3
   33962:	4b3a      	ldr	r3, [pc, #232]	; (33a4c <StartTasks+0x128>)
   33964:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   33966:	4b35      	ldr	r3, [pc, #212]	; (33a3c <StartTasks+0x118>)
   33968:	4798      	blx	r3
   3396a:	0003      	movs	r3, r0
   3396c:	4a3d      	ldr	r2, [pc, #244]	; (33a64 <StartTasks+0x140>)
   3396e:	4835      	ldr	r0, [pc, #212]	; (33a44 <StartTasks+0x120>)
   33970:	2140      	movs	r1, #64	; 0x40
   33972:	4c35      	ldr	r4, [pc, #212]	; (33a48 <StartTasks+0x124>)
   33974:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   33976:	4b33      	ldr	r3, [pc, #204]	; (33a44 <StartTasks+0x120>)
   33978:	0018      	movs	r0, r3
   3397a:	4b34      	ldr	r3, [pc, #208]	; (33a4c <StartTasks+0x128>)
   3397c:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   3397e:	23fa      	movs	r3, #250	; 0xfa
   33980:	009a      	lsls	r2, r3, #2
   33982:	4939      	ldr	r1, [pc, #228]	; (33a68 <StartTasks+0x144>)
   33984:	4839      	ldr	r0, [pc, #228]	; (33a6c <StartTasks+0x148>)
   33986:	4b3a      	ldr	r3, [pc, #232]	; (33a70 <StartTasks+0x14c>)
   33988:	9301      	str	r3, [sp, #4]
   3398a:	2303      	movs	r3, #3
   3398c:	9300      	str	r3, [sp, #0]
   3398e:	2300      	movs	r3, #0
   33990:	4c32      	ldr	r4, [pc, #200]	; (33a5c <StartTasks+0x138>)
   33992:	47a0      	blx	r4
   33994:	0003      	movs	r3, r0
   33996:	2b01      	cmp	r3, #1
   33998:	d003      	beq.n	339a2 <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   3399a:	4b36      	ldr	r3, [pc, #216]	; (33a74 <StartTasks+0x150>)
   3399c:	0018      	movs	r0, r3
   3399e:	4b2b      	ldr	r3, [pc, #172]	; (33a4c <StartTasks+0x128>)
   339a0:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   339a2:	4b26      	ldr	r3, [pc, #152]	; (33a3c <StartTasks+0x118>)
   339a4:	4798      	blx	r3
   339a6:	0003      	movs	r3, r0
   339a8:	4a33      	ldr	r2, [pc, #204]	; (33a78 <StartTasks+0x154>)
   339aa:	4826      	ldr	r0, [pc, #152]	; (33a44 <StartTasks+0x120>)
   339ac:	2140      	movs	r1, #64	; 0x40
   339ae:	4c26      	ldr	r4, [pc, #152]	; (33a48 <StartTasks+0x124>)
   339b0:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   339b2:	4b24      	ldr	r3, [pc, #144]	; (33a44 <StartTasks+0x120>)
   339b4:	0018      	movs	r0, r3
   339b6:	4b25      	ldr	r3, [pc, #148]	; (33a4c <StartTasks+0x128>)
   339b8:	4798      	blx	r3

    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   339ba:	23c8      	movs	r3, #200	; 0xc8
   339bc:	005a      	lsls	r2, r3, #1
   339be:	492f      	ldr	r1, [pc, #188]	; (33a7c <StartTasks+0x158>)
   339c0:	482f      	ldr	r0, [pc, #188]	; (33a80 <StartTasks+0x15c>)
   339c2:	4b30      	ldr	r3, [pc, #192]	; (33a84 <StartTasks+0x160>)
   339c4:	9301      	str	r3, [sp, #4]
   339c6:	2304      	movs	r3, #4
   339c8:	9300      	str	r3, [sp, #0]
   339ca:	2300      	movs	r3, #0
   339cc:	4c23      	ldr	r4, [pc, #140]	; (33a5c <StartTasks+0x138>)
   339ce:	47a0      	blx	r4
   339d0:	0003      	movs	r3, r0
   339d2:	2b01      	cmp	r3, #1
   339d4:	d003      	beq.n	339de <StartTasks+0xba>
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   339d6:	4b2c      	ldr	r3, [pc, #176]	; (33a88 <StartTasks+0x164>)
   339d8:	0018      	movs	r0, r3
   339da:	4b1c      	ldr	r3, [pc, #112]	; (33a4c <StartTasks+0x128>)
   339dc:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
   339de:	4b17      	ldr	r3, [pc, #92]	; (33a3c <StartTasks+0x118>)
   339e0:	4798      	blx	r3
   339e2:	0003      	movs	r3, r0
   339e4:	4a29      	ldr	r2, [pc, #164]	; (33a8c <StartTasks+0x168>)
   339e6:	4817      	ldr	r0, [pc, #92]	; (33a44 <StartTasks+0x120>)
   339e8:	2140      	movs	r1, #64	; 0x40
   339ea:	4c17      	ldr	r4, [pc, #92]	; (33a48 <StartTasks+0x124>)
   339ec:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   339ee:	4b15      	ldr	r3, [pc, #84]	; (33a44 <StartTasks+0x120>)
   339f0:	0018      	movs	r0, r3
   339f2:	4b16      	ldr	r3, [pc, #88]	; (33a4c <StartTasks+0x128>)
   339f4:	4798      	blx	r3

    if (xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
   339f6:	2380      	movs	r3, #128	; 0x80
   339f8:	005a      	lsls	r2, r3, #1
   339fa:	4925      	ldr	r1, [pc, #148]	; (33a90 <StartTasks+0x16c>)
   339fc:	4825      	ldr	r0, [pc, #148]	; (33a94 <StartTasks+0x170>)
   339fe:	4b26      	ldr	r3, [pc, #152]	; (33a98 <StartTasks+0x174>)
   33a00:	9301      	str	r3, [sp, #4]
   33a02:	2304      	movs	r3, #4
   33a04:	9300      	str	r3, [sp, #0]
   33a06:	2300      	movs	r3, #0
   33a08:	4c14      	ldr	r4, [pc, #80]	; (33a5c <StartTasks+0x138>)
   33a0a:	47a0      	blx	r4
   33a0c:	0003      	movs	r3, r0
   33a0e:	2b01      	cmp	r3, #1
   33a10:	d003      	beq.n	33a1a <StartTasks+0xf6>
        SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
   33a12:	4b22      	ldr	r3, [pc, #136]	; (33a9c <StartTasks+0x178>)
   33a14:	0018      	movs	r0, r3
   33a16:	4b0d      	ldr	r3, [pc, #52]	; (33a4c <StartTasks+0x128>)
   33a18:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
   33a1a:	4b08      	ldr	r3, [pc, #32]	; (33a3c <StartTasks+0x118>)
   33a1c:	4798      	blx	r3
   33a1e:	0003      	movs	r3, r0
   33a20:	4a1f      	ldr	r2, [pc, #124]	; (33aa0 <StartTasks+0x17c>)
   33a22:	4808      	ldr	r0, [pc, #32]	; (33a44 <StartTasks+0x120>)
   33a24:	2140      	movs	r1, #64	; 0x40
   33a26:	4c08      	ldr	r4, [pc, #32]	; (33a48 <StartTasks+0x124>)
   33a28:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   33a2a:	4b06      	ldr	r3, [pc, #24]	; (33a44 <StartTasks+0x120>)
   33a2c:	0018      	movs	r0, r3
   33a2e:	4b07      	ldr	r3, [pc, #28]	; (33a4c <StartTasks+0x128>)
   33a30:	4798      	blx	r3
}
   33a32:	46c0      	nop			; (mov r8, r8)
   33a34:	46bd      	mov	sp, r7
   33a36:	b001      	add	sp, #4
   33a38:	bd90      	pop	{r4, r7, pc}
   33a3a:	46c0      	nop			; (mov r8, r8)
   33a3c:	0001b2a1 	.word	0x0001b2a1
   33a40:	0003bd3c 	.word	0x0003bd3c
   33a44:	20005ce4 	.word	0x20005ce4
   33a48:	00036699 	.word	0x00036699
   33a4c:	0001ecd5 	.word	0x0001ecd5
   33a50:	0003bd60 	.word	0x0003bd60
   33a54:	00013819 	.word	0x00013819
   33a58:	20004718 	.word	0x20004718
   33a5c:	0001cce5 	.word	0x0001cce5
   33a60:	0003bd6c 	.word	0x0003bd6c
   33a64:	0003bd98 	.word	0x0003bd98
   33a68:	0003bdb8 	.word	0x0003bdb8
   33a6c:	00018081 	.word	0x00018081
   33a70:	20004720 	.word	0x20004720
   33a74:	0003bdc4 	.word	0x0003bdc4
   33a78:	0003bdf0 	.word	0x0003bdf0
   33a7c:	0003be10 	.word	0x0003be10
   33a80:	00016789 	.word	0x00016789
   33a84:	20004724 	.word	0x20004724
   33a88:	0003be18 	.word	0x0003be18
   33a8c:	0003be44 	.word	0x0003be44
   33a90:	0003be68 	.word	0x0003be68
   33a94:	000142a5 	.word	0x000142a5
   33a98:	20004728 	.word	0x20004728
   33a9c:	0003be78 	.word	0x0003be78
   33aa0:	0003bea8 	.word	0x0003bea8

00033aa4 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   33aa4:	b580      	push	{r7, lr}
   33aa6:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   33aa8:	4b02      	ldr	r3, [pc, #8]	; (33ab4 <vApplicationMallocFailedHook+0x10>)
   33aaa:	0018      	movs	r0, r3
   33aac:	4b02      	ldr	r3, [pc, #8]	; (33ab8 <vApplicationMallocFailedHook+0x14>)
   33aae:	4798      	blx	r3
    while (1)
   33ab0:	e7fe      	b.n	33ab0 <vApplicationMallocFailedHook+0xc>
   33ab2:	46c0      	nop			; (mov r8, r8)
   33ab4:	0003bed0 	.word	0x0003bed0
   33ab8:	0001ecd5 	.word	0x0001ecd5

00033abc <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   33abc:	b580      	push	{r7, lr}
   33abe:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   33ac0:	4b02      	ldr	r3, [pc, #8]	; (33acc <vApplicationStackOverflowHook+0x10>)
   33ac2:	0018      	movs	r0, r3
   33ac4:	4b02      	ldr	r3, [pc, #8]	; (33ad0 <vApplicationStackOverflowHook+0x14>)
   33ac6:	4798      	blx	r3
    while (1)
   33ac8:	e7fe      	b.n	33ac8 <vApplicationStackOverflowHook+0xc>
   33aca:	46c0      	nop			; (mov r8, r8)
   33acc:	0003befc 	.word	0x0003befc
   33ad0:	0001ecd5 	.word	0x0001ecd5

00033ad4 <__udivsi3>:
   33ad4:	2200      	movs	r2, #0
   33ad6:	0843      	lsrs	r3, r0, #1
   33ad8:	428b      	cmp	r3, r1
   33ada:	d374      	bcc.n	33bc6 <__udivsi3+0xf2>
   33adc:	0903      	lsrs	r3, r0, #4
   33ade:	428b      	cmp	r3, r1
   33ae0:	d35f      	bcc.n	33ba2 <__udivsi3+0xce>
   33ae2:	0a03      	lsrs	r3, r0, #8
   33ae4:	428b      	cmp	r3, r1
   33ae6:	d344      	bcc.n	33b72 <__udivsi3+0x9e>
   33ae8:	0b03      	lsrs	r3, r0, #12
   33aea:	428b      	cmp	r3, r1
   33aec:	d328      	bcc.n	33b40 <__udivsi3+0x6c>
   33aee:	0c03      	lsrs	r3, r0, #16
   33af0:	428b      	cmp	r3, r1
   33af2:	d30d      	bcc.n	33b10 <__udivsi3+0x3c>
   33af4:	22ff      	movs	r2, #255	; 0xff
   33af6:	0209      	lsls	r1, r1, #8
   33af8:	ba12      	rev	r2, r2
   33afa:	0c03      	lsrs	r3, r0, #16
   33afc:	428b      	cmp	r3, r1
   33afe:	d302      	bcc.n	33b06 <__udivsi3+0x32>
   33b00:	1212      	asrs	r2, r2, #8
   33b02:	0209      	lsls	r1, r1, #8
   33b04:	d065      	beq.n	33bd2 <__udivsi3+0xfe>
   33b06:	0b03      	lsrs	r3, r0, #12
   33b08:	428b      	cmp	r3, r1
   33b0a:	d319      	bcc.n	33b40 <__udivsi3+0x6c>
   33b0c:	e000      	b.n	33b10 <__udivsi3+0x3c>
   33b0e:	0a09      	lsrs	r1, r1, #8
   33b10:	0bc3      	lsrs	r3, r0, #15
   33b12:	428b      	cmp	r3, r1
   33b14:	d301      	bcc.n	33b1a <__udivsi3+0x46>
   33b16:	03cb      	lsls	r3, r1, #15
   33b18:	1ac0      	subs	r0, r0, r3
   33b1a:	4152      	adcs	r2, r2
   33b1c:	0b83      	lsrs	r3, r0, #14
   33b1e:	428b      	cmp	r3, r1
   33b20:	d301      	bcc.n	33b26 <__udivsi3+0x52>
   33b22:	038b      	lsls	r3, r1, #14
   33b24:	1ac0      	subs	r0, r0, r3
   33b26:	4152      	adcs	r2, r2
   33b28:	0b43      	lsrs	r3, r0, #13
   33b2a:	428b      	cmp	r3, r1
   33b2c:	d301      	bcc.n	33b32 <__udivsi3+0x5e>
   33b2e:	034b      	lsls	r3, r1, #13
   33b30:	1ac0      	subs	r0, r0, r3
   33b32:	4152      	adcs	r2, r2
   33b34:	0b03      	lsrs	r3, r0, #12
   33b36:	428b      	cmp	r3, r1
   33b38:	d301      	bcc.n	33b3e <__udivsi3+0x6a>
   33b3a:	030b      	lsls	r3, r1, #12
   33b3c:	1ac0      	subs	r0, r0, r3
   33b3e:	4152      	adcs	r2, r2
   33b40:	0ac3      	lsrs	r3, r0, #11
   33b42:	428b      	cmp	r3, r1
   33b44:	d301      	bcc.n	33b4a <__udivsi3+0x76>
   33b46:	02cb      	lsls	r3, r1, #11
   33b48:	1ac0      	subs	r0, r0, r3
   33b4a:	4152      	adcs	r2, r2
   33b4c:	0a83      	lsrs	r3, r0, #10
   33b4e:	428b      	cmp	r3, r1
   33b50:	d301      	bcc.n	33b56 <__udivsi3+0x82>
   33b52:	028b      	lsls	r3, r1, #10
   33b54:	1ac0      	subs	r0, r0, r3
   33b56:	4152      	adcs	r2, r2
   33b58:	0a43      	lsrs	r3, r0, #9
   33b5a:	428b      	cmp	r3, r1
   33b5c:	d301      	bcc.n	33b62 <__udivsi3+0x8e>
   33b5e:	024b      	lsls	r3, r1, #9
   33b60:	1ac0      	subs	r0, r0, r3
   33b62:	4152      	adcs	r2, r2
   33b64:	0a03      	lsrs	r3, r0, #8
   33b66:	428b      	cmp	r3, r1
   33b68:	d301      	bcc.n	33b6e <__udivsi3+0x9a>
   33b6a:	020b      	lsls	r3, r1, #8
   33b6c:	1ac0      	subs	r0, r0, r3
   33b6e:	4152      	adcs	r2, r2
   33b70:	d2cd      	bcs.n	33b0e <__udivsi3+0x3a>
   33b72:	09c3      	lsrs	r3, r0, #7
   33b74:	428b      	cmp	r3, r1
   33b76:	d301      	bcc.n	33b7c <__udivsi3+0xa8>
   33b78:	01cb      	lsls	r3, r1, #7
   33b7a:	1ac0      	subs	r0, r0, r3
   33b7c:	4152      	adcs	r2, r2
   33b7e:	0983      	lsrs	r3, r0, #6
   33b80:	428b      	cmp	r3, r1
   33b82:	d301      	bcc.n	33b88 <__udivsi3+0xb4>
   33b84:	018b      	lsls	r3, r1, #6
   33b86:	1ac0      	subs	r0, r0, r3
   33b88:	4152      	adcs	r2, r2
   33b8a:	0943      	lsrs	r3, r0, #5
   33b8c:	428b      	cmp	r3, r1
   33b8e:	d301      	bcc.n	33b94 <__udivsi3+0xc0>
   33b90:	014b      	lsls	r3, r1, #5
   33b92:	1ac0      	subs	r0, r0, r3
   33b94:	4152      	adcs	r2, r2
   33b96:	0903      	lsrs	r3, r0, #4
   33b98:	428b      	cmp	r3, r1
   33b9a:	d301      	bcc.n	33ba0 <__udivsi3+0xcc>
   33b9c:	010b      	lsls	r3, r1, #4
   33b9e:	1ac0      	subs	r0, r0, r3
   33ba0:	4152      	adcs	r2, r2
   33ba2:	08c3      	lsrs	r3, r0, #3
   33ba4:	428b      	cmp	r3, r1
   33ba6:	d301      	bcc.n	33bac <__udivsi3+0xd8>
   33ba8:	00cb      	lsls	r3, r1, #3
   33baa:	1ac0      	subs	r0, r0, r3
   33bac:	4152      	adcs	r2, r2
   33bae:	0883      	lsrs	r3, r0, #2
   33bb0:	428b      	cmp	r3, r1
   33bb2:	d301      	bcc.n	33bb8 <__udivsi3+0xe4>
   33bb4:	008b      	lsls	r3, r1, #2
   33bb6:	1ac0      	subs	r0, r0, r3
   33bb8:	4152      	adcs	r2, r2
   33bba:	0843      	lsrs	r3, r0, #1
   33bbc:	428b      	cmp	r3, r1
   33bbe:	d301      	bcc.n	33bc4 <__udivsi3+0xf0>
   33bc0:	004b      	lsls	r3, r1, #1
   33bc2:	1ac0      	subs	r0, r0, r3
   33bc4:	4152      	adcs	r2, r2
   33bc6:	1a41      	subs	r1, r0, r1
   33bc8:	d200      	bcs.n	33bcc <__udivsi3+0xf8>
   33bca:	4601      	mov	r1, r0
   33bcc:	4152      	adcs	r2, r2
   33bce:	4610      	mov	r0, r2
   33bd0:	4770      	bx	lr
   33bd2:	e7ff      	b.n	33bd4 <__udivsi3+0x100>
   33bd4:	b501      	push	{r0, lr}
   33bd6:	2000      	movs	r0, #0
   33bd8:	f000 f8f0 	bl	33dbc <__aeabi_idiv0>
   33bdc:	bd02      	pop	{r1, pc}
   33bde:	46c0      	nop			; (mov r8, r8)

00033be0 <__aeabi_uidivmod>:
   33be0:	2900      	cmp	r1, #0
   33be2:	d0f7      	beq.n	33bd4 <__udivsi3+0x100>
   33be4:	e776      	b.n	33ad4 <__udivsi3>
   33be6:	4770      	bx	lr

00033be8 <__divsi3>:
   33be8:	4603      	mov	r3, r0
   33bea:	430b      	orrs	r3, r1
   33bec:	d47f      	bmi.n	33cee <__divsi3+0x106>
   33bee:	2200      	movs	r2, #0
   33bf0:	0843      	lsrs	r3, r0, #1
   33bf2:	428b      	cmp	r3, r1
   33bf4:	d374      	bcc.n	33ce0 <__divsi3+0xf8>
   33bf6:	0903      	lsrs	r3, r0, #4
   33bf8:	428b      	cmp	r3, r1
   33bfa:	d35f      	bcc.n	33cbc <__divsi3+0xd4>
   33bfc:	0a03      	lsrs	r3, r0, #8
   33bfe:	428b      	cmp	r3, r1
   33c00:	d344      	bcc.n	33c8c <__divsi3+0xa4>
   33c02:	0b03      	lsrs	r3, r0, #12
   33c04:	428b      	cmp	r3, r1
   33c06:	d328      	bcc.n	33c5a <__divsi3+0x72>
   33c08:	0c03      	lsrs	r3, r0, #16
   33c0a:	428b      	cmp	r3, r1
   33c0c:	d30d      	bcc.n	33c2a <__divsi3+0x42>
   33c0e:	22ff      	movs	r2, #255	; 0xff
   33c10:	0209      	lsls	r1, r1, #8
   33c12:	ba12      	rev	r2, r2
   33c14:	0c03      	lsrs	r3, r0, #16
   33c16:	428b      	cmp	r3, r1
   33c18:	d302      	bcc.n	33c20 <__divsi3+0x38>
   33c1a:	1212      	asrs	r2, r2, #8
   33c1c:	0209      	lsls	r1, r1, #8
   33c1e:	d065      	beq.n	33cec <__divsi3+0x104>
   33c20:	0b03      	lsrs	r3, r0, #12
   33c22:	428b      	cmp	r3, r1
   33c24:	d319      	bcc.n	33c5a <__divsi3+0x72>
   33c26:	e000      	b.n	33c2a <__divsi3+0x42>
   33c28:	0a09      	lsrs	r1, r1, #8
   33c2a:	0bc3      	lsrs	r3, r0, #15
   33c2c:	428b      	cmp	r3, r1
   33c2e:	d301      	bcc.n	33c34 <__divsi3+0x4c>
   33c30:	03cb      	lsls	r3, r1, #15
   33c32:	1ac0      	subs	r0, r0, r3
   33c34:	4152      	adcs	r2, r2
   33c36:	0b83      	lsrs	r3, r0, #14
   33c38:	428b      	cmp	r3, r1
   33c3a:	d301      	bcc.n	33c40 <__divsi3+0x58>
   33c3c:	038b      	lsls	r3, r1, #14
   33c3e:	1ac0      	subs	r0, r0, r3
   33c40:	4152      	adcs	r2, r2
   33c42:	0b43      	lsrs	r3, r0, #13
   33c44:	428b      	cmp	r3, r1
   33c46:	d301      	bcc.n	33c4c <__divsi3+0x64>
   33c48:	034b      	lsls	r3, r1, #13
   33c4a:	1ac0      	subs	r0, r0, r3
   33c4c:	4152      	adcs	r2, r2
   33c4e:	0b03      	lsrs	r3, r0, #12
   33c50:	428b      	cmp	r3, r1
   33c52:	d301      	bcc.n	33c58 <__divsi3+0x70>
   33c54:	030b      	lsls	r3, r1, #12
   33c56:	1ac0      	subs	r0, r0, r3
   33c58:	4152      	adcs	r2, r2
   33c5a:	0ac3      	lsrs	r3, r0, #11
   33c5c:	428b      	cmp	r3, r1
   33c5e:	d301      	bcc.n	33c64 <__divsi3+0x7c>
   33c60:	02cb      	lsls	r3, r1, #11
   33c62:	1ac0      	subs	r0, r0, r3
   33c64:	4152      	adcs	r2, r2
   33c66:	0a83      	lsrs	r3, r0, #10
   33c68:	428b      	cmp	r3, r1
   33c6a:	d301      	bcc.n	33c70 <__divsi3+0x88>
   33c6c:	028b      	lsls	r3, r1, #10
   33c6e:	1ac0      	subs	r0, r0, r3
   33c70:	4152      	adcs	r2, r2
   33c72:	0a43      	lsrs	r3, r0, #9
   33c74:	428b      	cmp	r3, r1
   33c76:	d301      	bcc.n	33c7c <__divsi3+0x94>
   33c78:	024b      	lsls	r3, r1, #9
   33c7a:	1ac0      	subs	r0, r0, r3
   33c7c:	4152      	adcs	r2, r2
   33c7e:	0a03      	lsrs	r3, r0, #8
   33c80:	428b      	cmp	r3, r1
   33c82:	d301      	bcc.n	33c88 <__divsi3+0xa0>
   33c84:	020b      	lsls	r3, r1, #8
   33c86:	1ac0      	subs	r0, r0, r3
   33c88:	4152      	adcs	r2, r2
   33c8a:	d2cd      	bcs.n	33c28 <__divsi3+0x40>
   33c8c:	09c3      	lsrs	r3, r0, #7
   33c8e:	428b      	cmp	r3, r1
   33c90:	d301      	bcc.n	33c96 <__divsi3+0xae>
   33c92:	01cb      	lsls	r3, r1, #7
   33c94:	1ac0      	subs	r0, r0, r3
   33c96:	4152      	adcs	r2, r2
   33c98:	0983      	lsrs	r3, r0, #6
   33c9a:	428b      	cmp	r3, r1
   33c9c:	d301      	bcc.n	33ca2 <__divsi3+0xba>
   33c9e:	018b      	lsls	r3, r1, #6
   33ca0:	1ac0      	subs	r0, r0, r3
   33ca2:	4152      	adcs	r2, r2
   33ca4:	0943      	lsrs	r3, r0, #5
   33ca6:	428b      	cmp	r3, r1
   33ca8:	d301      	bcc.n	33cae <__divsi3+0xc6>
   33caa:	014b      	lsls	r3, r1, #5
   33cac:	1ac0      	subs	r0, r0, r3
   33cae:	4152      	adcs	r2, r2
   33cb0:	0903      	lsrs	r3, r0, #4
   33cb2:	428b      	cmp	r3, r1
   33cb4:	d301      	bcc.n	33cba <__divsi3+0xd2>
   33cb6:	010b      	lsls	r3, r1, #4
   33cb8:	1ac0      	subs	r0, r0, r3
   33cba:	4152      	adcs	r2, r2
   33cbc:	08c3      	lsrs	r3, r0, #3
   33cbe:	428b      	cmp	r3, r1
   33cc0:	d301      	bcc.n	33cc6 <__divsi3+0xde>
   33cc2:	00cb      	lsls	r3, r1, #3
   33cc4:	1ac0      	subs	r0, r0, r3
   33cc6:	4152      	adcs	r2, r2
   33cc8:	0883      	lsrs	r3, r0, #2
   33cca:	428b      	cmp	r3, r1
   33ccc:	d301      	bcc.n	33cd2 <__divsi3+0xea>
   33cce:	008b      	lsls	r3, r1, #2
   33cd0:	1ac0      	subs	r0, r0, r3
   33cd2:	4152      	adcs	r2, r2
   33cd4:	0843      	lsrs	r3, r0, #1
   33cd6:	428b      	cmp	r3, r1
   33cd8:	d301      	bcc.n	33cde <__divsi3+0xf6>
   33cda:	004b      	lsls	r3, r1, #1
   33cdc:	1ac0      	subs	r0, r0, r3
   33cde:	4152      	adcs	r2, r2
   33ce0:	1a41      	subs	r1, r0, r1
   33ce2:	d200      	bcs.n	33ce6 <__divsi3+0xfe>
   33ce4:	4601      	mov	r1, r0
   33ce6:	4152      	adcs	r2, r2
   33ce8:	4610      	mov	r0, r2
   33cea:	4770      	bx	lr
   33cec:	e05d      	b.n	33daa <__divsi3+0x1c2>
   33cee:	0fca      	lsrs	r2, r1, #31
   33cf0:	d000      	beq.n	33cf4 <__divsi3+0x10c>
   33cf2:	4249      	negs	r1, r1
   33cf4:	1003      	asrs	r3, r0, #32
   33cf6:	d300      	bcc.n	33cfa <__divsi3+0x112>
   33cf8:	4240      	negs	r0, r0
   33cfa:	4053      	eors	r3, r2
   33cfc:	2200      	movs	r2, #0
   33cfe:	469c      	mov	ip, r3
   33d00:	0903      	lsrs	r3, r0, #4
   33d02:	428b      	cmp	r3, r1
   33d04:	d32d      	bcc.n	33d62 <__divsi3+0x17a>
   33d06:	0a03      	lsrs	r3, r0, #8
   33d08:	428b      	cmp	r3, r1
   33d0a:	d312      	bcc.n	33d32 <__divsi3+0x14a>
   33d0c:	22fc      	movs	r2, #252	; 0xfc
   33d0e:	0189      	lsls	r1, r1, #6
   33d10:	ba12      	rev	r2, r2
   33d12:	0a03      	lsrs	r3, r0, #8
   33d14:	428b      	cmp	r3, r1
   33d16:	d30c      	bcc.n	33d32 <__divsi3+0x14a>
   33d18:	0189      	lsls	r1, r1, #6
   33d1a:	1192      	asrs	r2, r2, #6
   33d1c:	428b      	cmp	r3, r1
   33d1e:	d308      	bcc.n	33d32 <__divsi3+0x14a>
   33d20:	0189      	lsls	r1, r1, #6
   33d22:	1192      	asrs	r2, r2, #6
   33d24:	428b      	cmp	r3, r1
   33d26:	d304      	bcc.n	33d32 <__divsi3+0x14a>
   33d28:	0189      	lsls	r1, r1, #6
   33d2a:	d03a      	beq.n	33da2 <__divsi3+0x1ba>
   33d2c:	1192      	asrs	r2, r2, #6
   33d2e:	e000      	b.n	33d32 <__divsi3+0x14a>
   33d30:	0989      	lsrs	r1, r1, #6
   33d32:	09c3      	lsrs	r3, r0, #7
   33d34:	428b      	cmp	r3, r1
   33d36:	d301      	bcc.n	33d3c <__divsi3+0x154>
   33d38:	01cb      	lsls	r3, r1, #7
   33d3a:	1ac0      	subs	r0, r0, r3
   33d3c:	4152      	adcs	r2, r2
   33d3e:	0983      	lsrs	r3, r0, #6
   33d40:	428b      	cmp	r3, r1
   33d42:	d301      	bcc.n	33d48 <__divsi3+0x160>
   33d44:	018b      	lsls	r3, r1, #6
   33d46:	1ac0      	subs	r0, r0, r3
   33d48:	4152      	adcs	r2, r2
   33d4a:	0943      	lsrs	r3, r0, #5
   33d4c:	428b      	cmp	r3, r1
   33d4e:	d301      	bcc.n	33d54 <__divsi3+0x16c>
   33d50:	014b      	lsls	r3, r1, #5
   33d52:	1ac0      	subs	r0, r0, r3
   33d54:	4152      	adcs	r2, r2
   33d56:	0903      	lsrs	r3, r0, #4
   33d58:	428b      	cmp	r3, r1
   33d5a:	d301      	bcc.n	33d60 <__divsi3+0x178>
   33d5c:	010b      	lsls	r3, r1, #4
   33d5e:	1ac0      	subs	r0, r0, r3
   33d60:	4152      	adcs	r2, r2
   33d62:	08c3      	lsrs	r3, r0, #3
   33d64:	428b      	cmp	r3, r1
   33d66:	d301      	bcc.n	33d6c <__divsi3+0x184>
   33d68:	00cb      	lsls	r3, r1, #3
   33d6a:	1ac0      	subs	r0, r0, r3
   33d6c:	4152      	adcs	r2, r2
   33d6e:	0883      	lsrs	r3, r0, #2
   33d70:	428b      	cmp	r3, r1
   33d72:	d301      	bcc.n	33d78 <__divsi3+0x190>
   33d74:	008b      	lsls	r3, r1, #2
   33d76:	1ac0      	subs	r0, r0, r3
   33d78:	4152      	adcs	r2, r2
   33d7a:	d2d9      	bcs.n	33d30 <__divsi3+0x148>
   33d7c:	0843      	lsrs	r3, r0, #1
   33d7e:	428b      	cmp	r3, r1
   33d80:	d301      	bcc.n	33d86 <__divsi3+0x19e>
   33d82:	004b      	lsls	r3, r1, #1
   33d84:	1ac0      	subs	r0, r0, r3
   33d86:	4152      	adcs	r2, r2
   33d88:	1a41      	subs	r1, r0, r1
   33d8a:	d200      	bcs.n	33d8e <__divsi3+0x1a6>
   33d8c:	4601      	mov	r1, r0
   33d8e:	4663      	mov	r3, ip
   33d90:	4152      	adcs	r2, r2
   33d92:	105b      	asrs	r3, r3, #1
   33d94:	4610      	mov	r0, r2
   33d96:	d301      	bcc.n	33d9c <__divsi3+0x1b4>
   33d98:	4240      	negs	r0, r0
   33d9a:	2b00      	cmp	r3, #0
   33d9c:	d500      	bpl.n	33da0 <__divsi3+0x1b8>
   33d9e:	4249      	negs	r1, r1
   33da0:	4770      	bx	lr
   33da2:	4663      	mov	r3, ip
   33da4:	105b      	asrs	r3, r3, #1
   33da6:	d300      	bcc.n	33daa <__divsi3+0x1c2>
   33da8:	4240      	negs	r0, r0
   33daa:	b501      	push	{r0, lr}
   33dac:	2000      	movs	r0, #0
   33dae:	f000 f805 	bl	33dbc <__aeabi_idiv0>
   33db2:	bd02      	pop	{r1, pc}

00033db4 <__aeabi_idivmod>:
   33db4:	2900      	cmp	r1, #0
   33db6:	d0f8      	beq.n	33daa <__divsi3+0x1c2>
   33db8:	e716      	b.n	33be8 <__divsi3>
   33dba:	4770      	bx	lr

00033dbc <__aeabi_idiv0>:
   33dbc:	4770      	bx	lr
   33dbe:	46c0      	nop			; (mov r8, r8)

00033dc0 <__aeabi_lmul>:
   33dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   33dc2:	46ce      	mov	lr, r9
   33dc4:	4647      	mov	r7, r8
   33dc6:	0415      	lsls	r5, r2, #16
   33dc8:	0c2d      	lsrs	r5, r5, #16
   33dca:	002e      	movs	r6, r5
   33dcc:	b580      	push	{r7, lr}
   33dce:	0407      	lsls	r7, r0, #16
   33dd0:	0c14      	lsrs	r4, r2, #16
   33dd2:	0c3f      	lsrs	r7, r7, #16
   33dd4:	4699      	mov	r9, r3
   33dd6:	0c03      	lsrs	r3, r0, #16
   33dd8:	437e      	muls	r6, r7
   33dda:	435d      	muls	r5, r3
   33ddc:	4367      	muls	r7, r4
   33dde:	4363      	muls	r3, r4
   33de0:	197f      	adds	r7, r7, r5
   33de2:	0c34      	lsrs	r4, r6, #16
   33de4:	19e4      	adds	r4, r4, r7
   33de6:	469c      	mov	ip, r3
   33de8:	42a5      	cmp	r5, r4
   33dea:	d903      	bls.n	33df4 <__aeabi_lmul+0x34>
   33dec:	2380      	movs	r3, #128	; 0x80
   33dee:	025b      	lsls	r3, r3, #9
   33df0:	4698      	mov	r8, r3
   33df2:	44c4      	add	ip, r8
   33df4:	464b      	mov	r3, r9
   33df6:	4351      	muls	r1, r2
   33df8:	4343      	muls	r3, r0
   33dfa:	0436      	lsls	r6, r6, #16
   33dfc:	0c36      	lsrs	r6, r6, #16
   33dfe:	0c25      	lsrs	r5, r4, #16
   33e00:	0424      	lsls	r4, r4, #16
   33e02:	4465      	add	r5, ip
   33e04:	19a4      	adds	r4, r4, r6
   33e06:	1859      	adds	r1, r3, r1
   33e08:	1949      	adds	r1, r1, r5
   33e0a:	0020      	movs	r0, r4
   33e0c:	bc0c      	pop	{r2, r3}
   33e0e:	4690      	mov	r8, r2
   33e10:	4699      	mov	r9, r3
   33e12:	bdf0      	pop	{r4, r5, r6, r7, pc}

00033e14 <__aeabi_fadd>:
   33e14:	b5f0      	push	{r4, r5, r6, r7, lr}
   33e16:	46c6      	mov	lr, r8
   33e18:	024e      	lsls	r6, r1, #9
   33e1a:	0247      	lsls	r7, r0, #9
   33e1c:	0a76      	lsrs	r6, r6, #9
   33e1e:	0a7b      	lsrs	r3, r7, #9
   33e20:	0044      	lsls	r4, r0, #1
   33e22:	0fc5      	lsrs	r5, r0, #31
   33e24:	00f7      	lsls	r7, r6, #3
   33e26:	0048      	lsls	r0, r1, #1
   33e28:	4698      	mov	r8, r3
   33e2a:	b500      	push	{lr}
   33e2c:	0e24      	lsrs	r4, r4, #24
   33e2e:	002a      	movs	r2, r5
   33e30:	00db      	lsls	r3, r3, #3
   33e32:	0e00      	lsrs	r0, r0, #24
   33e34:	0fc9      	lsrs	r1, r1, #31
   33e36:	46bc      	mov	ip, r7
   33e38:	428d      	cmp	r5, r1
   33e3a:	d067      	beq.n	33f0c <__aeabi_fadd+0xf8>
   33e3c:	1a22      	subs	r2, r4, r0
   33e3e:	2a00      	cmp	r2, #0
   33e40:	dc00      	bgt.n	33e44 <__aeabi_fadd+0x30>
   33e42:	e0a5      	b.n	33f90 <__aeabi_fadd+0x17c>
   33e44:	2800      	cmp	r0, #0
   33e46:	d13a      	bne.n	33ebe <__aeabi_fadd+0xaa>
   33e48:	2f00      	cmp	r7, #0
   33e4a:	d100      	bne.n	33e4e <__aeabi_fadd+0x3a>
   33e4c:	e093      	b.n	33f76 <__aeabi_fadd+0x162>
   33e4e:	1e51      	subs	r1, r2, #1
   33e50:	2900      	cmp	r1, #0
   33e52:	d000      	beq.n	33e56 <__aeabi_fadd+0x42>
   33e54:	e0bc      	b.n	33fd0 <__aeabi_fadd+0x1bc>
   33e56:	2401      	movs	r4, #1
   33e58:	1bdb      	subs	r3, r3, r7
   33e5a:	015a      	lsls	r2, r3, #5
   33e5c:	d546      	bpl.n	33eec <__aeabi_fadd+0xd8>
   33e5e:	019b      	lsls	r3, r3, #6
   33e60:	099e      	lsrs	r6, r3, #6
   33e62:	0030      	movs	r0, r6
   33e64:	f002 fa74 	bl	36350 <__clzsi2>
   33e68:	3805      	subs	r0, #5
   33e6a:	4086      	lsls	r6, r0
   33e6c:	4284      	cmp	r4, r0
   33e6e:	dd00      	ble.n	33e72 <__aeabi_fadd+0x5e>
   33e70:	e09d      	b.n	33fae <__aeabi_fadd+0x19a>
   33e72:	1b04      	subs	r4, r0, r4
   33e74:	0032      	movs	r2, r6
   33e76:	2020      	movs	r0, #32
   33e78:	3401      	adds	r4, #1
   33e7a:	40e2      	lsrs	r2, r4
   33e7c:	1b04      	subs	r4, r0, r4
   33e7e:	40a6      	lsls	r6, r4
   33e80:	0033      	movs	r3, r6
   33e82:	1e5e      	subs	r6, r3, #1
   33e84:	41b3      	sbcs	r3, r6
   33e86:	2400      	movs	r4, #0
   33e88:	4313      	orrs	r3, r2
   33e8a:	075a      	lsls	r2, r3, #29
   33e8c:	d004      	beq.n	33e98 <__aeabi_fadd+0x84>
   33e8e:	220f      	movs	r2, #15
   33e90:	401a      	ands	r2, r3
   33e92:	2a04      	cmp	r2, #4
   33e94:	d000      	beq.n	33e98 <__aeabi_fadd+0x84>
   33e96:	3304      	adds	r3, #4
   33e98:	015a      	lsls	r2, r3, #5
   33e9a:	d529      	bpl.n	33ef0 <__aeabi_fadd+0xdc>
   33e9c:	3401      	adds	r4, #1
   33e9e:	2cff      	cmp	r4, #255	; 0xff
   33ea0:	d100      	bne.n	33ea4 <__aeabi_fadd+0x90>
   33ea2:	e081      	b.n	33fa8 <__aeabi_fadd+0x194>
   33ea4:	002a      	movs	r2, r5
   33ea6:	019b      	lsls	r3, r3, #6
   33ea8:	0a5b      	lsrs	r3, r3, #9
   33eaa:	b2e4      	uxtb	r4, r4
   33eac:	025b      	lsls	r3, r3, #9
   33eae:	05e4      	lsls	r4, r4, #23
   33eb0:	0a58      	lsrs	r0, r3, #9
   33eb2:	07d2      	lsls	r2, r2, #31
   33eb4:	4320      	orrs	r0, r4
   33eb6:	4310      	orrs	r0, r2
   33eb8:	bc04      	pop	{r2}
   33eba:	4690      	mov	r8, r2
   33ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33ebe:	2cff      	cmp	r4, #255	; 0xff
   33ec0:	d0e3      	beq.n	33e8a <__aeabi_fadd+0x76>
   33ec2:	2180      	movs	r1, #128	; 0x80
   33ec4:	0038      	movs	r0, r7
   33ec6:	04c9      	lsls	r1, r1, #19
   33ec8:	4308      	orrs	r0, r1
   33eca:	4684      	mov	ip, r0
   33ecc:	2a1b      	cmp	r2, #27
   33ece:	dd00      	ble.n	33ed2 <__aeabi_fadd+0xbe>
   33ed0:	e082      	b.n	33fd8 <__aeabi_fadd+0x1c4>
   33ed2:	2020      	movs	r0, #32
   33ed4:	4661      	mov	r1, ip
   33ed6:	40d1      	lsrs	r1, r2
   33ed8:	1a82      	subs	r2, r0, r2
   33eda:	4660      	mov	r0, ip
   33edc:	4090      	lsls	r0, r2
   33ede:	0002      	movs	r2, r0
   33ee0:	1e50      	subs	r0, r2, #1
   33ee2:	4182      	sbcs	r2, r0
   33ee4:	430a      	orrs	r2, r1
   33ee6:	1a9b      	subs	r3, r3, r2
   33ee8:	015a      	lsls	r2, r3, #5
   33eea:	d4b8      	bmi.n	33e5e <__aeabi_fadd+0x4a>
   33eec:	075a      	lsls	r2, r3, #29
   33eee:	d1ce      	bne.n	33e8e <__aeabi_fadd+0x7a>
   33ef0:	08de      	lsrs	r6, r3, #3
   33ef2:	002a      	movs	r2, r5
   33ef4:	2cff      	cmp	r4, #255	; 0xff
   33ef6:	d13a      	bne.n	33f6e <__aeabi_fadd+0x15a>
   33ef8:	2e00      	cmp	r6, #0
   33efa:	d100      	bne.n	33efe <__aeabi_fadd+0xea>
   33efc:	e0ae      	b.n	3405c <__aeabi_fadd+0x248>
   33efe:	2380      	movs	r3, #128	; 0x80
   33f00:	03db      	lsls	r3, r3, #15
   33f02:	4333      	orrs	r3, r6
   33f04:	025b      	lsls	r3, r3, #9
   33f06:	0a5b      	lsrs	r3, r3, #9
   33f08:	24ff      	movs	r4, #255	; 0xff
   33f0a:	e7cf      	b.n	33eac <__aeabi_fadd+0x98>
   33f0c:	1a21      	subs	r1, r4, r0
   33f0e:	2900      	cmp	r1, #0
   33f10:	dd52      	ble.n	33fb8 <__aeabi_fadd+0x1a4>
   33f12:	2800      	cmp	r0, #0
   33f14:	d031      	beq.n	33f7a <__aeabi_fadd+0x166>
   33f16:	2cff      	cmp	r4, #255	; 0xff
   33f18:	d0b7      	beq.n	33e8a <__aeabi_fadd+0x76>
   33f1a:	2080      	movs	r0, #128	; 0x80
   33f1c:	003e      	movs	r6, r7
   33f1e:	04c0      	lsls	r0, r0, #19
   33f20:	4306      	orrs	r6, r0
   33f22:	46b4      	mov	ip, r6
   33f24:	291b      	cmp	r1, #27
   33f26:	dd00      	ble.n	33f2a <__aeabi_fadd+0x116>
   33f28:	e0aa      	b.n	34080 <__aeabi_fadd+0x26c>
   33f2a:	2620      	movs	r6, #32
   33f2c:	4660      	mov	r0, ip
   33f2e:	40c8      	lsrs	r0, r1
   33f30:	1a71      	subs	r1, r6, r1
   33f32:	4666      	mov	r6, ip
   33f34:	408e      	lsls	r6, r1
   33f36:	0031      	movs	r1, r6
   33f38:	1e4e      	subs	r6, r1, #1
   33f3a:	41b1      	sbcs	r1, r6
   33f3c:	4301      	orrs	r1, r0
   33f3e:	185b      	adds	r3, r3, r1
   33f40:	0159      	lsls	r1, r3, #5
   33f42:	d5d3      	bpl.n	33eec <__aeabi_fadd+0xd8>
   33f44:	3401      	adds	r4, #1
   33f46:	2cff      	cmp	r4, #255	; 0xff
   33f48:	d100      	bne.n	33f4c <__aeabi_fadd+0x138>
   33f4a:	e087      	b.n	3405c <__aeabi_fadd+0x248>
   33f4c:	2201      	movs	r2, #1
   33f4e:	4978      	ldr	r1, [pc, #480]	; (34130 <__aeabi_fadd+0x31c>)
   33f50:	401a      	ands	r2, r3
   33f52:	085b      	lsrs	r3, r3, #1
   33f54:	400b      	ands	r3, r1
   33f56:	4313      	orrs	r3, r2
   33f58:	e797      	b.n	33e8a <__aeabi_fadd+0x76>
   33f5a:	2c00      	cmp	r4, #0
   33f5c:	d000      	beq.n	33f60 <__aeabi_fadd+0x14c>
   33f5e:	e0a7      	b.n	340b0 <__aeabi_fadd+0x29c>
   33f60:	2b00      	cmp	r3, #0
   33f62:	d000      	beq.n	33f66 <__aeabi_fadd+0x152>
   33f64:	e0b6      	b.n	340d4 <__aeabi_fadd+0x2c0>
   33f66:	1e3b      	subs	r3, r7, #0
   33f68:	d162      	bne.n	34030 <__aeabi_fadd+0x21c>
   33f6a:	2600      	movs	r6, #0
   33f6c:	2200      	movs	r2, #0
   33f6e:	0273      	lsls	r3, r6, #9
   33f70:	0a5b      	lsrs	r3, r3, #9
   33f72:	b2e4      	uxtb	r4, r4
   33f74:	e79a      	b.n	33eac <__aeabi_fadd+0x98>
   33f76:	0014      	movs	r4, r2
   33f78:	e787      	b.n	33e8a <__aeabi_fadd+0x76>
   33f7a:	2f00      	cmp	r7, #0
   33f7c:	d04d      	beq.n	3401a <__aeabi_fadd+0x206>
   33f7e:	1e48      	subs	r0, r1, #1
   33f80:	2800      	cmp	r0, #0
   33f82:	d157      	bne.n	34034 <__aeabi_fadd+0x220>
   33f84:	4463      	add	r3, ip
   33f86:	2401      	movs	r4, #1
   33f88:	015a      	lsls	r2, r3, #5
   33f8a:	d5af      	bpl.n	33eec <__aeabi_fadd+0xd8>
   33f8c:	2402      	movs	r4, #2
   33f8e:	e7dd      	b.n	33f4c <__aeabi_fadd+0x138>
   33f90:	2a00      	cmp	r2, #0
   33f92:	d124      	bne.n	33fde <__aeabi_fadd+0x1ca>
   33f94:	1c62      	adds	r2, r4, #1
   33f96:	b2d2      	uxtb	r2, r2
   33f98:	2a01      	cmp	r2, #1
   33f9a:	ddde      	ble.n	33f5a <__aeabi_fadd+0x146>
   33f9c:	1bde      	subs	r6, r3, r7
   33f9e:	0172      	lsls	r2, r6, #5
   33fa0:	d535      	bpl.n	3400e <__aeabi_fadd+0x1fa>
   33fa2:	1afe      	subs	r6, r7, r3
   33fa4:	000d      	movs	r5, r1
   33fa6:	e75c      	b.n	33e62 <__aeabi_fadd+0x4e>
   33fa8:	002a      	movs	r2, r5
   33faa:	2300      	movs	r3, #0
   33fac:	e77e      	b.n	33eac <__aeabi_fadd+0x98>
   33fae:	0033      	movs	r3, r6
   33fb0:	4a60      	ldr	r2, [pc, #384]	; (34134 <__aeabi_fadd+0x320>)
   33fb2:	1a24      	subs	r4, r4, r0
   33fb4:	4013      	ands	r3, r2
   33fb6:	e768      	b.n	33e8a <__aeabi_fadd+0x76>
   33fb8:	2900      	cmp	r1, #0
   33fba:	d163      	bne.n	34084 <__aeabi_fadd+0x270>
   33fbc:	1c61      	adds	r1, r4, #1
   33fbe:	b2c8      	uxtb	r0, r1
   33fc0:	2801      	cmp	r0, #1
   33fc2:	dd4e      	ble.n	34062 <__aeabi_fadd+0x24e>
   33fc4:	29ff      	cmp	r1, #255	; 0xff
   33fc6:	d049      	beq.n	3405c <__aeabi_fadd+0x248>
   33fc8:	4463      	add	r3, ip
   33fca:	085b      	lsrs	r3, r3, #1
   33fcc:	000c      	movs	r4, r1
   33fce:	e75c      	b.n	33e8a <__aeabi_fadd+0x76>
   33fd0:	2aff      	cmp	r2, #255	; 0xff
   33fd2:	d041      	beq.n	34058 <__aeabi_fadd+0x244>
   33fd4:	000a      	movs	r2, r1
   33fd6:	e779      	b.n	33ecc <__aeabi_fadd+0xb8>
   33fd8:	2201      	movs	r2, #1
   33fda:	1a9b      	subs	r3, r3, r2
   33fdc:	e784      	b.n	33ee8 <__aeabi_fadd+0xd4>
   33fde:	2c00      	cmp	r4, #0
   33fe0:	d01d      	beq.n	3401e <__aeabi_fadd+0x20a>
   33fe2:	28ff      	cmp	r0, #255	; 0xff
   33fe4:	d022      	beq.n	3402c <__aeabi_fadd+0x218>
   33fe6:	2480      	movs	r4, #128	; 0x80
   33fe8:	04e4      	lsls	r4, r4, #19
   33fea:	4252      	negs	r2, r2
   33fec:	4323      	orrs	r3, r4
   33fee:	2a1b      	cmp	r2, #27
   33ff0:	dd00      	ble.n	33ff4 <__aeabi_fadd+0x1e0>
   33ff2:	e08a      	b.n	3410a <__aeabi_fadd+0x2f6>
   33ff4:	001c      	movs	r4, r3
   33ff6:	2520      	movs	r5, #32
   33ff8:	40d4      	lsrs	r4, r2
   33ffa:	1aaa      	subs	r2, r5, r2
   33ffc:	4093      	lsls	r3, r2
   33ffe:	1e5a      	subs	r2, r3, #1
   34000:	4193      	sbcs	r3, r2
   34002:	4323      	orrs	r3, r4
   34004:	4662      	mov	r2, ip
   34006:	0004      	movs	r4, r0
   34008:	1ad3      	subs	r3, r2, r3
   3400a:	000d      	movs	r5, r1
   3400c:	e725      	b.n	33e5a <__aeabi_fadd+0x46>
   3400e:	2e00      	cmp	r6, #0
   34010:	d000      	beq.n	34014 <__aeabi_fadd+0x200>
   34012:	e726      	b.n	33e62 <__aeabi_fadd+0x4e>
   34014:	2200      	movs	r2, #0
   34016:	2400      	movs	r4, #0
   34018:	e7a9      	b.n	33f6e <__aeabi_fadd+0x15a>
   3401a:	000c      	movs	r4, r1
   3401c:	e735      	b.n	33e8a <__aeabi_fadd+0x76>
   3401e:	2b00      	cmp	r3, #0
   34020:	d04d      	beq.n	340be <__aeabi_fadd+0x2aa>
   34022:	43d2      	mvns	r2, r2
   34024:	2a00      	cmp	r2, #0
   34026:	d0ed      	beq.n	34004 <__aeabi_fadd+0x1f0>
   34028:	28ff      	cmp	r0, #255	; 0xff
   3402a:	d1e0      	bne.n	33fee <__aeabi_fadd+0x1da>
   3402c:	4663      	mov	r3, ip
   3402e:	24ff      	movs	r4, #255	; 0xff
   34030:	000d      	movs	r5, r1
   34032:	e72a      	b.n	33e8a <__aeabi_fadd+0x76>
   34034:	29ff      	cmp	r1, #255	; 0xff
   34036:	d00f      	beq.n	34058 <__aeabi_fadd+0x244>
   34038:	0001      	movs	r1, r0
   3403a:	e773      	b.n	33f24 <__aeabi_fadd+0x110>
   3403c:	2b00      	cmp	r3, #0
   3403e:	d061      	beq.n	34104 <__aeabi_fadd+0x2f0>
   34040:	24ff      	movs	r4, #255	; 0xff
   34042:	2f00      	cmp	r7, #0
   34044:	d100      	bne.n	34048 <__aeabi_fadd+0x234>
   34046:	e720      	b.n	33e8a <__aeabi_fadd+0x76>
   34048:	2280      	movs	r2, #128	; 0x80
   3404a:	4641      	mov	r1, r8
   3404c:	03d2      	lsls	r2, r2, #15
   3404e:	4211      	tst	r1, r2
   34050:	d002      	beq.n	34058 <__aeabi_fadd+0x244>
   34052:	4216      	tst	r6, r2
   34054:	d100      	bne.n	34058 <__aeabi_fadd+0x244>
   34056:	003b      	movs	r3, r7
   34058:	24ff      	movs	r4, #255	; 0xff
   3405a:	e716      	b.n	33e8a <__aeabi_fadd+0x76>
   3405c:	24ff      	movs	r4, #255	; 0xff
   3405e:	2300      	movs	r3, #0
   34060:	e724      	b.n	33eac <__aeabi_fadd+0x98>
   34062:	2c00      	cmp	r4, #0
   34064:	d1ea      	bne.n	3403c <__aeabi_fadd+0x228>
   34066:	2b00      	cmp	r3, #0
   34068:	d058      	beq.n	3411c <__aeabi_fadd+0x308>
   3406a:	2f00      	cmp	r7, #0
   3406c:	d100      	bne.n	34070 <__aeabi_fadd+0x25c>
   3406e:	e70c      	b.n	33e8a <__aeabi_fadd+0x76>
   34070:	4463      	add	r3, ip
   34072:	015a      	lsls	r2, r3, #5
   34074:	d400      	bmi.n	34078 <__aeabi_fadd+0x264>
   34076:	e739      	b.n	33eec <__aeabi_fadd+0xd8>
   34078:	4a2e      	ldr	r2, [pc, #184]	; (34134 <__aeabi_fadd+0x320>)
   3407a:	000c      	movs	r4, r1
   3407c:	4013      	ands	r3, r2
   3407e:	e704      	b.n	33e8a <__aeabi_fadd+0x76>
   34080:	2101      	movs	r1, #1
   34082:	e75c      	b.n	33f3e <__aeabi_fadd+0x12a>
   34084:	2c00      	cmp	r4, #0
   34086:	d11e      	bne.n	340c6 <__aeabi_fadd+0x2b2>
   34088:	2b00      	cmp	r3, #0
   3408a:	d040      	beq.n	3410e <__aeabi_fadd+0x2fa>
   3408c:	43c9      	mvns	r1, r1
   3408e:	2900      	cmp	r1, #0
   34090:	d00b      	beq.n	340aa <__aeabi_fadd+0x296>
   34092:	28ff      	cmp	r0, #255	; 0xff
   34094:	d036      	beq.n	34104 <__aeabi_fadd+0x2f0>
   34096:	291b      	cmp	r1, #27
   34098:	dc47      	bgt.n	3412a <__aeabi_fadd+0x316>
   3409a:	001c      	movs	r4, r3
   3409c:	2620      	movs	r6, #32
   3409e:	40cc      	lsrs	r4, r1
   340a0:	1a71      	subs	r1, r6, r1
   340a2:	408b      	lsls	r3, r1
   340a4:	1e59      	subs	r1, r3, #1
   340a6:	418b      	sbcs	r3, r1
   340a8:	4323      	orrs	r3, r4
   340aa:	4463      	add	r3, ip
   340ac:	0004      	movs	r4, r0
   340ae:	e747      	b.n	33f40 <__aeabi_fadd+0x12c>
   340b0:	2b00      	cmp	r3, #0
   340b2:	d118      	bne.n	340e6 <__aeabi_fadd+0x2d2>
   340b4:	1e3b      	subs	r3, r7, #0
   340b6:	d02d      	beq.n	34114 <__aeabi_fadd+0x300>
   340b8:	000d      	movs	r5, r1
   340ba:	24ff      	movs	r4, #255	; 0xff
   340bc:	e6e5      	b.n	33e8a <__aeabi_fadd+0x76>
   340be:	003b      	movs	r3, r7
   340c0:	0004      	movs	r4, r0
   340c2:	000d      	movs	r5, r1
   340c4:	e6e1      	b.n	33e8a <__aeabi_fadd+0x76>
   340c6:	28ff      	cmp	r0, #255	; 0xff
   340c8:	d01c      	beq.n	34104 <__aeabi_fadd+0x2f0>
   340ca:	2480      	movs	r4, #128	; 0x80
   340cc:	04e4      	lsls	r4, r4, #19
   340ce:	4249      	negs	r1, r1
   340d0:	4323      	orrs	r3, r4
   340d2:	e7e0      	b.n	34096 <__aeabi_fadd+0x282>
   340d4:	2f00      	cmp	r7, #0
   340d6:	d100      	bne.n	340da <__aeabi_fadd+0x2c6>
   340d8:	e6d7      	b.n	33e8a <__aeabi_fadd+0x76>
   340da:	1bde      	subs	r6, r3, r7
   340dc:	0172      	lsls	r2, r6, #5
   340de:	d51f      	bpl.n	34120 <__aeabi_fadd+0x30c>
   340e0:	1afb      	subs	r3, r7, r3
   340e2:	000d      	movs	r5, r1
   340e4:	e6d1      	b.n	33e8a <__aeabi_fadd+0x76>
   340e6:	24ff      	movs	r4, #255	; 0xff
   340e8:	2f00      	cmp	r7, #0
   340ea:	d100      	bne.n	340ee <__aeabi_fadd+0x2da>
   340ec:	e6cd      	b.n	33e8a <__aeabi_fadd+0x76>
   340ee:	2280      	movs	r2, #128	; 0x80
   340f0:	4640      	mov	r0, r8
   340f2:	03d2      	lsls	r2, r2, #15
   340f4:	4210      	tst	r0, r2
   340f6:	d0af      	beq.n	34058 <__aeabi_fadd+0x244>
   340f8:	4216      	tst	r6, r2
   340fa:	d1ad      	bne.n	34058 <__aeabi_fadd+0x244>
   340fc:	003b      	movs	r3, r7
   340fe:	000d      	movs	r5, r1
   34100:	24ff      	movs	r4, #255	; 0xff
   34102:	e6c2      	b.n	33e8a <__aeabi_fadd+0x76>
   34104:	4663      	mov	r3, ip
   34106:	24ff      	movs	r4, #255	; 0xff
   34108:	e6bf      	b.n	33e8a <__aeabi_fadd+0x76>
   3410a:	2301      	movs	r3, #1
   3410c:	e77a      	b.n	34004 <__aeabi_fadd+0x1f0>
   3410e:	003b      	movs	r3, r7
   34110:	0004      	movs	r4, r0
   34112:	e6ba      	b.n	33e8a <__aeabi_fadd+0x76>
   34114:	2680      	movs	r6, #128	; 0x80
   34116:	2200      	movs	r2, #0
   34118:	03f6      	lsls	r6, r6, #15
   3411a:	e6f0      	b.n	33efe <__aeabi_fadd+0xea>
   3411c:	003b      	movs	r3, r7
   3411e:	e6b4      	b.n	33e8a <__aeabi_fadd+0x76>
   34120:	1e33      	subs	r3, r6, #0
   34122:	d000      	beq.n	34126 <__aeabi_fadd+0x312>
   34124:	e6e2      	b.n	33eec <__aeabi_fadd+0xd8>
   34126:	2200      	movs	r2, #0
   34128:	e721      	b.n	33f6e <__aeabi_fadd+0x15a>
   3412a:	2301      	movs	r3, #1
   3412c:	e7bd      	b.n	340aa <__aeabi_fadd+0x296>
   3412e:	46c0      	nop			; (mov r8, r8)
   34130:	7dffffff 	.word	0x7dffffff
   34134:	fbffffff 	.word	0xfbffffff

00034138 <__aeabi_fdiv>:
   34138:	b5f0      	push	{r4, r5, r6, r7, lr}
   3413a:	4657      	mov	r7, sl
   3413c:	464e      	mov	r6, r9
   3413e:	46de      	mov	lr, fp
   34140:	4645      	mov	r5, r8
   34142:	b5e0      	push	{r5, r6, r7, lr}
   34144:	0244      	lsls	r4, r0, #9
   34146:	0043      	lsls	r3, r0, #1
   34148:	0fc6      	lsrs	r6, r0, #31
   3414a:	b083      	sub	sp, #12
   3414c:	1c0f      	adds	r7, r1, #0
   3414e:	0a64      	lsrs	r4, r4, #9
   34150:	0e1b      	lsrs	r3, r3, #24
   34152:	46b2      	mov	sl, r6
   34154:	d053      	beq.n	341fe <__aeabi_fdiv+0xc6>
   34156:	2bff      	cmp	r3, #255	; 0xff
   34158:	d027      	beq.n	341aa <__aeabi_fdiv+0x72>
   3415a:	2280      	movs	r2, #128	; 0x80
   3415c:	00e4      	lsls	r4, r4, #3
   3415e:	04d2      	lsls	r2, r2, #19
   34160:	4314      	orrs	r4, r2
   34162:	227f      	movs	r2, #127	; 0x7f
   34164:	4252      	negs	r2, r2
   34166:	4690      	mov	r8, r2
   34168:	4498      	add	r8, r3
   3416a:	2300      	movs	r3, #0
   3416c:	4699      	mov	r9, r3
   3416e:	469b      	mov	fp, r3
   34170:	027d      	lsls	r5, r7, #9
   34172:	0078      	lsls	r0, r7, #1
   34174:	0ffb      	lsrs	r3, r7, #31
   34176:	0a6d      	lsrs	r5, r5, #9
   34178:	0e00      	lsrs	r0, r0, #24
   3417a:	9300      	str	r3, [sp, #0]
   3417c:	d024      	beq.n	341c8 <__aeabi_fdiv+0x90>
   3417e:	28ff      	cmp	r0, #255	; 0xff
   34180:	d046      	beq.n	34210 <__aeabi_fdiv+0xd8>
   34182:	2380      	movs	r3, #128	; 0x80
   34184:	2100      	movs	r1, #0
   34186:	00ed      	lsls	r5, r5, #3
   34188:	04db      	lsls	r3, r3, #19
   3418a:	431d      	orrs	r5, r3
   3418c:	387f      	subs	r0, #127	; 0x7f
   3418e:	4647      	mov	r7, r8
   34190:	1a38      	subs	r0, r7, r0
   34192:	464f      	mov	r7, r9
   34194:	430f      	orrs	r7, r1
   34196:	00bf      	lsls	r7, r7, #2
   34198:	46b9      	mov	r9, r7
   3419a:	0033      	movs	r3, r6
   3419c:	9a00      	ldr	r2, [sp, #0]
   3419e:	4f87      	ldr	r7, [pc, #540]	; (343bc <__aeabi_fdiv+0x284>)
   341a0:	4053      	eors	r3, r2
   341a2:	464a      	mov	r2, r9
   341a4:	58ba      	ldr	r2, [r7, r2]
   341a6:	9301      	str	r3, [sp, #4]
   341a8:	4697      	mov	pc, r2
   341aa:	2c00      	cmp	r4, #0
   341ac:	d14e      	bne.n	3424c <__aeabi_fdiv+0x114>
   341ae:	2308      	movs	r3, #8
   341b0:	4699      	mov	r9, r3
   341b2:	33f7      	adds	r3, #247	; 0xf7
   341b4:	4698      	mov	r8, r3
   341b6:	3bfd      	subs	r3, #253	; 0xfd
   341b8:	469b      	mov	fp, r3
   341ba:	027d      	lsls	r5, r7, #9
   341bc:	0078      	lsls	r0, r7, #1
   341be:	0ffb      	lsrs	r3, r7, #31
   341c0:	0a6d      	lsrs	r5, r5, #9
   341c2:	0e00      	lsrs	r0, r0, #24
   341c4:	9300      	str	r3, [sp, #0]
   341c6:	d1da      	bne.n	3417e <__aeabi_fdiv+0x46>
   341c8:	2d00      	cmp	r5, #0
   341ca:	d126      	bne.n	3421a <__aeabi_fdiv+0xe2>
   341cc:	2000      	movs	r0, #0
   341ce:	2101      	movs	r1, #1
   341d0:	0033      	movs	r3, r6
   341d2:	9a00      	ldr	r2, [sp, #0]
   341d4:	4f7a      	ldr	r7, [pc, #488]	; (343c0 <__aeabi_fdiv+0x288>)
   341d6:	4053      	eors	r3, r2
   341d8:	4642      	mov	r2, r8
   341da:	1a10      	subs	r0, r2, r0
   341dc:	464a      	mov	r2, r9
   341de:	430a      	orrs	r2, r1
   341e0:	0092      	lsls	r2, r2, #2
   341e2:	58ba      	ldr	r2, [r7, r2]
   341e4:	001d      	movs	r5, r3
   341e6:	4697      	mov	pc, r2
   341e8:	9b00      	ldr	r3, [sp, #0]
   341ea:	002c      	movs	r4, r5
   341ec:	469a      	mov	sl, r3
   341ee:	468b      	mov	fp, r1
   341f0:	465b      	mov	r3, fp
   341f2:	2b02      	cmp	r3, #2
   341f4:	d131      	bne.n	3425a <__aeabi_fdiv+0x122>
   341f6:	4653      	mov	r3, sl
   341f8:	21ff      	movs	r1, #255	; 0xff
   341fa:	2400      	movs	r4, #0
   341fc:	e038      	b.n	34270 <__aeabi_fdiv+0x138>
   341fe:	2c00      	cmp	r4, #0
   34200:	d117      	bne.n	34232 <__aeabi_fdiv+0xfa>
   34202:	2304      	movs	r3, #4
   34204:	4699      	mov	r9, r3
   34206:	2300      	movs	r3, #0
   34208:	4698      	mov	r8, r3
   3420a:	3301      	adds	r3, #1
   3420c:	469b      	mov	fp, r3
   3420e:	e7af      	b.n	34170 <__aeabi_fdiv+0x38>
   34210:	20ff      	movs	r0, #255	; 0xff
   34212:	2d00      	cmp	r5, #0
   34214:	d10b      	bne.n	3422e <__aeabi_fdiv+0xf6>
   34216:	2102      	movs	r1, #2
   34218:	e7da      	b.n	341d0 <__aeabi_fdiv+0x98>
   3421a:	0028      	movs	r0, r5
   3421c:	f002 f898 	bl	36350 <__clzsi2>
   34220:	1f43      	subs	r3, r0, #5
   34222:	409d      	lsls	r5, r3
   34224:	2376      	movs	r3, #118	; 0x76
   34226:	425b      	negs	r3, r3
   34228:	1a18      	subs	r0, r3, r0
   3422a:	2100      	movs	r1, #0
   3422c:	e7af      	b.n	3418e <__aeabi_fdiv+0x56>
   3422e:	2103      	movs	r1, #3
   34230:	e7ad      	b.n	3418e <__aeabi_fdiv+0x56>
   34232:	0020      	movs	r0, r4
   34234:	f002 f88c 	bl	36350 <__clzsi2>
   34238:	1f43      	subs	r3, r0, #5
   3423a:	409c      	lsls	r4, r3
   3423c:	2376      	movs	r3, #118	; 0x76
   3423e:	425b      	negs	r3, r3
   34240:	1a1b      	subs	r3, r3, r0
   34242:	4698      	mov	r8, r3
   34244:	2300      	movs	r3, #0
   34246:	4699      	mov	r9, r3
   34248:	469b      	mov	fp, r3
   3424a:	e791      	b.n	34170 <__aeabi_fdiv+0x38>
   3424c:	230c      	movs	r3, #12
   3424e:	4699      	mov	r9, r3
   34250:	33f3      	adds	r3, #243	; 0xf3
   34252:	4698      	mov	r8, r3
   34254:	3bfc      	subs	r3, #252	; 0xfc
   34256:	469b      	mov	fp, r3
   34258:	e78a      	b.n	34170 <__aeabi_fdiv+0x38>
   3425a:	2b03      	cmp	r3, #3
   3425c:	d100      	bne.n	34260 <__aeabi_fdiv+0x128>
   3425e:	e0a5      	b.n	343ac <__aeabi_fdiv+0x274>
   34260:	4655      	mov	r5, sl
   34262:	2b01      	cmp	r3, #1
   34264:	d000      	beq.n	34268 <__aeabi_fdiv+0x130>
   34266:	e081      	b.n	3436c <__aeabi_fdiv+0x234>
   34268:	2301      	movs	r3, #1
   3426a:	2100      	movs	r1, #0
   3426c:	2400      	movs	r4, #0
   3426e:	402b      	ands	r3, r5
   34270:	0264      	lsls	r4, r4, #9
   34272:	05c9      	lsls	r1, r1, #23
   34274:	0a60      	lsrs	r0, r4, #9
   34276:	07db      	lsls	r3, r3, #31
   34278:	4308      	orrs	r0, r1
   3427a:	4318      	orrs	r0, r3
   3427c:	b003      	add	sp, #12
   3427e:	bc3c      	pop	{r2, r3, r4, r5}
   34280:	4690      	mov	r8, r2
   34282:	4699      	mov	r9, r3
   34284:	46a2      	mov	sl, r4
   34286:	46ab      	mov	fp, r5
   34288:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3428a:	2480      	movs	r4, #128	; 0x80
   3428c:	2300      	movs	r3, #0
   3428e:	03e4      	lsls	r4, r4, #15
   34290:	21ff      	movs	r1, #255	; 0xff
   34292:	e7ed      	b.n	34270 <__aeabi_fdiv+0x138>
   34294:	21ff      	movs	r1, #255	; 0xff
   34296:	2400      	movs	r4, #0
   34298:	e7ea      	b.n	34270 <__aeabi_fdiv+0x138>
   3429a:	2301      	movs	r3, #1
   3429c:	1a59      	subs	r1, r3, r1
   3429e:	291b      	cmp	r1, #27
   342a0:	dd66      	ble.n	34370 <__aeabi_fdiv+0x238>
   342a2:	9a01      	ldr	r2, [sp, #4]
   342a4:	4013      	ands	r3, r2
   342a6:	2100      	movs	r1, #0
   342a8:	2400      	movs	r4, #0
   342aa:	e7e1      	b.n	34270 <__aeabi_fdiv+0x138>
   342ac:	2380      	movs	r3, #128	; 0x80
   342ae:	03db      	lsls	r3, r3, #15
   342b0:	421c      	tst	r4, r3
   342b2:	d038      	beq.n	34326 <__aeabi_fdiv+0x1ee>
   342b4:	421d      	tst	r5, r3
   342b6:	d051      	beq.n	3435c <__aeabi_fdiv+0x224>
   342b8:	431c      	orrs	r4, r3
   342ba:	0264      	lsls	r4, r4, #9
   342bc:	0a64      	lsrs	r4, r4, #9
   342be:	0033      	movs	r3, r6
   342c0:	21ff      	movs	r1, #255	; 0xff
   342c2:	e7d5      	b.n	34270 <__aeabi_fdiv+0x138>
   342c4:	0163      	lsls	r3, r4, #5
   342c6:	016c      	lsls	r4, r5, #5
   342c8:	42a3      	cmp	r3, r4
   342ca:	d23b      	bcs.n	34344 <__aeabi_fdiv+0x20c>
   342cc:	261b      	movs	r6, #27
   342ce:	2100      	movs	r1, #0
   342d0:	3801      	subs	r0, #1
   342d2:	2501      	movs	r5, #1
   342d4:	001f      	movs	r7, r3
   342d6:	0049      	lsls	r1, r1, #1
   342d8:	005b      	lsls	r3, r3, #1
   342da:	2f00      	cmp	r7, #0
   342dc:	db01      	blt.n	342e2 <__aeabi_fdiv+0x1aa>
   342de:	429c      	cmp	r4, r3
   342e0:	d801      	bhi.n	342e6 <__aeabi_fdiv+0x1ae>
   342e2:	1b1b      	subs	r3, r3, r4
   342e4:	4329      	orrs	r1, r5
   342e6:	3e01      	subs	r6, #1
   342e8:	2e00      	cmp	r6, #0
   342ea:	d1f3      	bne.n	342d4 <__aeabi_fdiv+0x19c>
   342ec:	001c      	movs	r4, r3
   342ee:	1e63      	subs	r3, r4, #1
   342f0:	419c      	sbcs	r4, r3
   342f2:	430c      	orrs	r4, r1
   342f4:	0001      	movs	r1, r0
   342f6:	317f      	adds	r1, #127	; 0x7f
   342f8:	2900      	cmp	r1, #0
   342fa:	ddce      	ble.n	3429a <__aeabi_fdiv+0x162>
   342fc:	0763      	lsls	r3, r4, #29
   342fe:	d004      	beq.n	3430a <__aeabi_fdiv+0x1d2>
   34300:	230f      	movs	r3, #15
   34302:	4023      	ands	r3, r4
   34304:	2b04      	cmp	r3, #4
   34306:	d000      	beq.n	3430a <__aeabi_fdiv+0x1d2>
   34308:	3404      	adds	r4, #4
   3430a:	0123      	lsls	r3, r4, #4
   3430c:	d503      	bpl.n	34316 <__aeabi_fdiv+0x1de>
   3430e:	0001      	movs	r1, r0
   34310:	4b2c      	ldr	r3, [pc, #176]	; (343c4 <__aeabi_fdiv+0x28c>)
   34312:	3180      	adds	r1, #128	; 0x80
   34314:	401c      	ands	r4, r3
   34316:	29fe      	cmp	r1, #254	; 0xfe
   34318:	dd0d      	ble.n	34336 <__aeabi_fdiv+0x1fe>
   3431a:	2301      	movs	r3, #1
   3431c:	9a01      	ldr	r2, [sp, #4]
   3431e:	21ff      	movs	r1, #255	; 0xff
   34320:	4013      	ands	r3, r2
   34322:	2400      	movs	r4, #0
   34324:	e7a4      	b.n	34270 <__aeabi_fdiv+0x138>
   34326:	2380      	movs	r3, #128	; 0x80
   34328:	03db      	lsls	r3, r3, #15
   3432a:	431c      	orrs	r4, r3
   3432c:	0264      	lsls	r4, r4, #9
   3432e:	0a64      	lsrs	r4, r4, #9
   34330:	0033      	movs	r3, r6
   34332:	21ff      	movs	r1, #255	; 0xff
   34334:	e79c      	b.n	34270 <__aeabi_fdiv+0x138>
   34336:	2301      	movs	r3, #1
   34338:	9a01      	ldr	r2, [sp, #4]
   3433a:	01a4      	lsls	r4, r4, #6
   3433c:	0a64      	lsrs	r4, r4, #9
   3433e:	b2c9      	uxtb	r1, r1
   34340:	4013      	ands	r3, r2
   34342:	e795      	b.n	34270 <__aeabi_fdiv+0x138>
   34344:	1b1b      	subs	r3, r3, r4
   34346:	261a      	movs	r6, #26
   34348:	2101      	movs	r1, #1
   3434a:	e7c2      	b.n	342d2 <__aeabi_fdiv+0x19a>
   3434c:	9b00      	ldr	r3, [sp, #0]
   3434e:	468b      	mov	fp, r1
   34350:	469a      	mov	sl, r3
   34352:	2400      	movs	r4, #0
   34354:	e74c      	b.n	341f0 <__aeabi_fdiv+0xb8>
   34356:	0263      	lsls	r3, r4, #9
   34358:	d5e5      	bpl.n	34326 <__aeabi_fdiv+0x1ee>
   3435a:	2500      	movs	r5, #0
   3435c:	2480      	movs	r4, #128	; 0x80
   3435e:	03e4      	lsls	r4, r4, #15
   34360:	432c      	orrs	r4, r5
   34362:	0264      	lsls	r4, r4, #9
   34364:	0a64      	lsrs	r4, r4, #9
   34366:	9b00      	ldr	r3, [sp, #0]
   34368:	21ff      	movs	r1, #255	; 0xff
   3436a:	e781      	b.n	34270 <__aeabi_fdiv+0x138>
   3436c:	9501      	str	r5, [sp, #4]
   3436e:	e7c1      	b.n	342f4 <__aeabi_fdiv+0x1bc>
   34370:	0023      	movs	r3, r4
   34372:	2020      	movs	r0, #32
   34374:	40cb      	lsrs	r3, r1
   34376:	1a41      	subs	r1, r0, r1
   34378:	408c      	lsls	r4, r1
   3437a:	1e61      	subs	r1, r4, #1
   3437c:	418c      	sbcs	r4, r1
   3437e:	431c      	orrs	r4, r3
   34380:	0763      	lsls	r3, r4, #29
   34382:	d004      	beq.n	3438e <__aeabi_fdiv+0x256>
   34384:	230f      	movs	r3, #15
   34386:	4023      	ands	r3, r4
   34388:	2b04      	cmp	r3, #4
   3438a:	d000      	beq.n	3438e <__aeabi_fdiv+0x256>
   3438c:	3404      	adds	r4, #4
   3438e:	0163      	lsls	r3, r4, #5
   34390:	d505      	bpl.n	3439e <__aeabi_fdiv+0x266>
   34392:	2301      	movs	r3, #1
   34394:	9a01      	ldr	r2, [sp, #4]
   34396:	2101      	movs	r1, #1
   34398:	4013      	ands	r3, r2
   3439a:	2400      	movs	r4, #0
   3439c:	e768      	b.n	34270 <__aeabi_fdiv+0x138>
   3439e:	2301      	movs	r3, #1
   343a0:	9a01      	ldr	r2, [sp, #4]
   343a2:	01a4      	lsls	r4, r4, #6
   343a4:	0a64      	lsrs	r4, r4, #9
   343a6:	4013      	ands	r3, r2
   343a8:	2100      	movs	r1, #0
   343aa:	e761      	b.n	34270 <__aeabi_fdiv+0x138>
   343ac:	2380      	movs	r3, #128	; 0x80
   343ae:	03db      	lsls	r3, r3, #15
   343b0:	431c      	orrs	r4, r3
   343b2:	0264      	lsls	r4, r4, #9
   343b4:	0a64      	lsrs	r4, r4, #9
   343b6:	4653      	mov	r3, sl
   343b8:	21ff      	movs	r1, #255	; 0xff
   343ba:	e759      	b.n	34270 <__aeabi_fdiv+0x138>
   343bc:	0003bf24 	.word	0x0003bf24
   343c0:	0003bf64 	.word	0x0003bf64
   343c4:	f7ffffff 	.word	0xf7ffffff

000343c8 <__aeabi_fmul>:
   343c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   343ca:	4657      	mov	r7, sl
   343cc:	464e      	mov	r6, r9
   343ce:	4645      	mov	r5, r8
   343d0:	46de      	mov	lr, fp
   343d2:	b5e0      	push	{r5, r6, r7, lr}
   343d4:	0247      	lsls	r7, r0, #9
   343d6:	0046      	lsls	r6, r0, #1
   343d8:	4688      	mov	r8, r1
   343da:	0a7f      	lsrs	r7, r7, #9
   343dc:	0e36      	lsrs	r6, r6, #24
   343de:	0fc4      	lsrs	r4, r0, #31
   343e0:	2e00      	cmp	r6, #0
   343e2:	d047      	beq.n	34474 <__aeabi_fmul+0xac>
   343e4:	2eff      	cmp	r6, #255	; 0xff
   343e6:	d024      	beq.n	34432 <__aeabi_fmul+0x6a>
   343e8:	00fb      	lsls	r3, r7, #3
   343ea:	2780      	movs	r7, #128	; 0x80
   343ec:	04ff      	lsls	r7, r7, #19
   343ee:	431f      	orrs	r7, r3
   343f0:	2300      	movs	r3, #0
   343f2:	4699      	mov	r9, r3
   343f4:	469a      	mov	sl, r3
   343f6:	3e7f      	subs	r6, #127	; 0x7f
   343f8:	4643      	mov	r3, r8
   343fa:	025d      	lsls	r5, r3, #9
   343fc:	0058      	lsls	r0, r3, #1
   343fe:	0fdb      	lsrs	r3, r3, #31
   34400:	0a6d      	lsrs	r5, r5, #9
   34402:	0e00      	lsrs	r0, r0, #24
   34404:	4698      	mov	r8, r3
   34406:	d043      	beq.n	34490 <__aeabi_fmul+0xc8>
   34408:	28ff      	cmp	r0, #255	; 0xff
   3440a:	d03b      	beq.n	34484 <__aeabi_fmul+0xbc>
   3440c:	00eb      	lsls	r3, r5, #3
   3440e:	2580      	movs	r5, #128	; 0x80
   34410:	2200      	movs	r2, #0
   34412:	04ed      	lsls	r5, r5, #19
   34414:	431d      	orrs	r5, r3
   34416:	387f      	subs	r0, #127	; 0x7f
   34418:	1836      	adds	r6, r6, r0
   3441a:	1c73      	adds	r3, r6, #1
   3441c:	4641      	mov	r1, r8
   3441e:	469b      	mov	fp, r3
   34420:	464b      	mov	r3, r9
   34422:	4061      	eors	r1, r4
   34424:	4313      	orrs	r3, r2
   34426:	2b0f      	cmp	r3, #15
   34428:	d864      	bhi.n	344f4 <__aeabi_fmul+0x12c>
   3442a:	4875      	ldr	r0, [pc, #468]	; (34600 <__aeabi_fmul+0x238>)
   3442c:	009b      	lsls	r3, r3, #2
   3442e:	58c3      	ldr	r3, [r0, r3]
   34430:	469f      	mov	pc, r3
   34432:	2f00      	cmp	r7, #0
   34434:	d142      	bne.n	344bc <__aeabi_fmul+0xf4>
   34436:	2308      	movs	r3, #8
   34438:	4699      	mov	r9, r3
   3443a:	3b06      	subs	r3, #6
   3443c:	26ff      	movs	r6, #255	; 0xff
   3443e:	469a      	mov	sl, r3
   34440:	e7da      	b.n	343f8 <__aeabi_fmul+0x30>
   34442:	4641      	mov	r1, r8
   34444:	2a02      	cmp	r2, #2
   34446:	d028      	beq.n	3449a <__aeabi_fmul+0xd2>
   34448:	2a03      	cmp	r2, #3
   3444a:	d100      	bne.n	3444e <__aeabi_fmul+0x86>
   3444c:	e0ce      	b.n	345ec <__aeabi_fmul+0x224>
   3444e:	2a01      	cmp	r2, #1
   34450:	d000      	beq.n	34454 <__aeabi_fmul+0x8c>
   34452:	e0ac      	b.n	345ae <__aeabi_fmul+0x1e6>
   34454:	4011      	ands	r1, r2
   34456:	2000      	movs	r0, #0
   34458:	2200      	movs	r2, #0
   3445a:	b2cc      	uxtb	r4, r1
   3445c:	0240      	lsls	r0, r0, #9
   3445e:	05d2      	lsls	r2, r2, #23
   34460:	0a40      	lsrs	r0, r0, #9
   34462:	07e4      	lsls	r4, r4, #31
   34464:	4310      	orrs	r0, r2
   34466:	4320      	orrs	r0, r4
   34468:	bc3c      	pop	{r2, r3, r4, r5}
   3446a:	4690      	mov	r8, r2
   3446c:	4699      	mov	r9, r3
   3446e:	46a2      	mov	sl, r4
   34470:	46ab      	mov	fp, r5
   34472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34474:	2f00      	cmp	r7, #0
   34476:	d115      	bne.n	344a4 <__aeabi_fmul+0xdc>
   34478:	2304      	movs	r3, #4
   3447a:	4699      	mov	r9, r3
   3447c:	3b03      	subs	r3, #3
   3447e:	2600      	movs	r6, #0
   34480:	469a      	mov	sl, r3
   34482:	e7b9      	b.n	343f8 <__aeabi_fmul+0x30>
   34484:	20ff      	movs	r0, #255	; 0xff
   34486:	2202      	movs	r2, #2
   34488:	2d00      	cmp	r5, #0
   3448a:	d0c5      	beq.n	34418 <__aeabi_fmul+0x50>
   3448c:	2203      	movs	r2, #3
   3448e:	e7c3      	b.n	34418 <__aeabi_fmul+0x50>
   34490:	2d00      	cmp	r5, #0
   34492:	d119      	bne.n	344c8 <__aeabi_fmul+0x100>
   34494:	2000      	movs	r0, #0
   34496:	2201      	movs	r2, #1
   34498:	e7be      	b.n	34418 <__aeabi_fmul+0x50>
   3449a:	2401      	movs	r4, #1
   3449c:	22ff      	movs	r2, #255	; 0xff
   3449e:	400c      	ands	r4, r1
   344a0:	2000      	movs	r0, #0
   344a2:	e7db      	b.n	3445c <__aeabi_fmul+0x94>
   344a4:	0038      	movs	r0, r7
   344a6:	f001 ff53 	bl	36350 <__clzsi2>
   344aa:	2676      	movs	r6, #118	; 0x76
   344ac:	1f43      	subs	r3, r0, #5
   344ae:	409f      	lsls	r7, r3
   344b0:	2300      	movs	r3, #0
   344b2:	4276      	negs	r6, r6
   344b4:	1a36      	subs	r6, r6, r0
   344b6:	4699      	mov	r9, r3
   344b8:	469a      	mov	sl, r3
   344ba:	e79d      	b.n	343f8 <__aeabi_fmul+0x30>
   344bc:	230c      	movs	r3, #12
   344be:	4699      	mov	r9, r3
   344c0:	3b09      	subs	r3, #9
   344c2:	26ff      	movs	r6, #255	; 0xff
   344c4:	469a      	mov	sl, r3
   344c6:	e797      	b.n	343f8 <__aeabi_fmul+0x30>
   344c8:	0028      	movs	r0, r5
   344ca:	f001 ff41 	bl	36350 <__clzsi2>
   344ce:	1f43      	subs	r3, r0, #5
   344d0:	409d      	lsls	r5, r3
   344d2:	2376      	movs	r3, #118	; 0x76
   344d4:	425b      	negs	r3, r3
   344d6:	1a18      	subs	r0, r3, r0
   344d8:	2200      	movs	r2, #0
   344da:	e79d      	b.n	34418 <__aeabi_fmul+0x50>
   344dc:	2080      	movs	r0, #128	; 0x80
   344de:	2400      	movs	r4, #0
   344e0:	03c0      	lsls	r0, r0, #15
   344e2:	22ff      	movs	r2, #255	; 0xff
   344e4:	e7ba      	b.n	3445c <__aeabi_fmul+0x94>
   344e6:	003d      	movs	r5, r7
   344e8:	4652      	mov	r2, sl
   344ea:	e7ab      	b.n	34444 <__aeabi_fmul+0x7c>
   344ec:	003d      	movs	r5, r7
   344ee:	0021      	movs	r1, r4
   344f0:	4652      	mov	r2, sl
   344f2:	e7a7      	b.n	34444 <__aeabi_fmul+0x7c>
   344f4:	0c3b      	lsrs	r3, r7, #16
   344f6:	469c      	mov	ip, r3
   344f8:	042a      	lsls	r2, r5, #16
   344fa:	0c12      	lsrs	r2, r2, #16
   344fc:	0c2b      	lsrs	r3, r5, #16
   344fe:	0014      	movs	r4, r2
   34500:	4660      	mov	r0, ip
   34502:	4665      	mov	r5, ip
   34504:	043f      	lsls	r7, r7, #16
   34506:	0c3f      	lsrs	r7, r7, #16
   34508:	437c      	muls	r4, r7
   3450a:	4342      	muls	r2, r0
   3450c:	435d      	muls	r5, r3
   3450e:	437b      	muls	r3, r7
   34510:	0c27      	lsrs	r7, r4, #16
   34512:	189b      	adds	r3, r3, r2
   34514:	18ff      	adds	r7, r7, r3
   34516:	42ba      	cmp	r2, r7
   34518:	d903      	bls.n	34522 <__aeabi_fmul+0x15a>
   3451a:	2380      	movs	r3, #128	; 0x80
   3451c:	025b      	lsls	r3, r3, #9
   3451e:	469c      	mov	ip, r3
   34520:	4465      	add	r5, ip
   34522:	0424      	lsls	r4, r4, #16
   34524:	043a      	lsls	r2, r7, #16
   34526:	0c24      	lsrs	r4, r4, #16
   34528:	1912      	adds	r2, r2, r4
   3452a:	0193      	lsls	r3, r2, #6
   3452c:	1e5c      	subs	r4, r3, #1
   3452e:	41a3      	sbcs	r3, r4
   34530:	0c3f      	lsrs	r7, r7, #16
   34532:	0e92      	lsrs	r2, r2, #26
   34534:	197d      	adds	r5, r7, r5
   34536:	431a      	orrs	r2, r3
   34538:	01ad      	lsls	r5, r5, #6
   3453a:	4315      	orrs	r5, r2
   3453c:	012b      	lsls	r3, r5, #4
   3453e:	d504      	bpl.n	3454a <__aeabi_fmul+0x182>
   34540:	2301      	movs	r3, #1
   34542:	465e      	mov	r6, fp
   34544:	086a      	lsrs	r2, r5, #1
   34546:	401d      	ands	r5, r3
   34548:	4315      	orrs	r5, r2
   3454a:	0032      	movs	r2, r6
   3454c:	327f      	adds	r2, #127	; 0x7f
   3454e:	2a00      	cmp	r2, #0
   34550:	dd25      	ble.n	3459e <__aeabi_fmul+0x1d6>
   34552:	076b      	lsls	r3, r5, #29
   34554:	d004      	beq.n	34560 <__aeabi_fmul+0x198>
   34556:	230f      	movs	r3, #15
   34558:	402b      	ands	r3, r5
   3455a:	2b04      	cmp	r3, #4
   3455c:	d000      	beq.n	34560 <__aeabi_fmul+0x198>
   3455e:	3504      	adds	r5, #4
   34560:	012b      	lsls	r3, r5, #4
   34562:	d503      	bpl.n	3456c <__aeabi_fmul+0x1a4>
   34564:	0032      	movs	r2, r6
   34566:	4b27      	ldr	r3, [pc, #156]	; (34604 <__aeabi_fmul+0x23c>)
   34568:	3280      	adds	r2, #128	; 0x80
   3456a:	401d      	ands	r5, r3
   3456c:	2afe      	cmp	r2, #254	; 0xfe
   3456e:	dc94      	bgt.n	3449a <__aeabi_fmul+0xd2>
   34570:	2401      	movs	r4, #1
   34572:	01a8      	lsls	r0, r5, #6
   34574:	0a40      	lsrs	r0, r0, #9
   34576:	b2d2      	uxtb	r2, r2
   34578:	400c      	ands	r4, r1
   3457a:	e76f      	b.n	3445c <__aeabi_fmul+0x94>
   3457c:	2080      	movs	r0, #128	; 0x80
   3457e:	03c0      	lsls	r0, r0, #15
   34580:	4207      	tst	r7, r0
   34582:	d007      	beq.n	34594 <__aeabi_fmul+0x1cc>
   34584:	4205      	tst	r5, r0
   34586:	d105      	bne.n	34594 <__aeabi_fmul+0x1cc>
   34588:	4328      	orrs	r0, r5
   3458a:	0240      	lsls	r0, r0, #9
   3458c:	0a40      	lsrs	r0, r0, #9
   3458e:	4644      	mov	r4, r8
   34590:	22ff      	movs	r2, #255	; 0xff
   34592:	e763      	b.n	3445c <__aeabi_fmul+0x94>
   34594:	4338      	orrs	r0, r7
   34596:	0240      	lsls	r0, r0, #9
   34598:	0a40      	lsrs	r0, r0, #9
   3459a:	22ff      	movs	r2, #255	; 0xff
   3459c:	e75e      	b.n	3445c <__aeabi_fmul+0x94>
   3459e:	2401      	movs	r4, #1
   345a0:	1aa3      	subs	r3, r4, r2
   345a2:	2b1b      	cmp	r3, #27
   345a4:	dd05      	ble.n	345b2 <__aeabi_fmul+0x1ea>
   345a6:	400c      	ands	r4, r1
   345a8:	2200      	movs	r2, #0
   345aa:	2000      	movs	r0, #0
   345ac:	e756      	b.n	3445c <__aeabi_fmul+0x94>
   345ae:	465e      	mov	r6, fp
   345b0:	e7cb      	b.n	3454a <__aeabi_fmul+0x182>
   345b2:	002a      	movs	r2, r5
   345b4:	2020      	movs	r0, #32
   345b6:	40da      	lsrs	r2, r3
   345b8:	1ac3      	subs	r3, r0, r3
   345ba:	409d      	lsls	r5, r3
   345bc:	002b      	movs	r3, r5
   345be:	1e5d      	subs	r5, r3, #1
   345c0:	41ab      	sbcs	r3, r5
   345c2:	4313      	orrs	r3, r2
   345c4:	075a      	lsls	r2, r3, #29
   345c6:	d004      	beq.n	345d2 <__aeabi_fmul+0x20a>
   345c8:	220f      	movs	r2, #15
   345ca:	401a      	ands	r2, r3
   345cc:	2a04      	cmp	r2, #4
   345ce:	d000      	beq.n	345d2 <__aeabi_fmul+0x20a>
   345d0:	3304      	adds	r3, #4
   345d2:	015a      	lsls	r2, r3, #5
   345d4:	d504      	bpl.n	345e0 <__aeabi_fmul+0x218>
   345d6:	2401      	movs	r4, #1
   345d8:	2201      	movs	r2, #1
   345da:	400c      	ands	r4, r1
   345dc:	2000      	movs	r0, #0
   345de:	e73d      	b.n	3445c <__aeabi_fmul+0x94>
   345e0:	2401      	movs	r4, #1
   345e2:	019b      	lsls	r3, r3, #6
   345e4:	0a58      	lsrs	r0, r3, #9
   345e6:	400c      	ands	r4, r1
   345e8:	2200      	movs	r2, #0
   345ea:	e737      	b.n	3445c <__aeabi_fmul+0x94>
   345ec:	2080      	movs	r0, #128	; 0x80
   345ee:	2401      	movs	r4, #1
   345f0:	03c0      	lsls	r0, r0, #15
   345f2:	4328      	orrs	r0, r5
   345f4:	0240      	lsls	r0, r0, #9
   345f6:	0a40      	lsrs	r0, r0, #9
   345f8:	400c      	ands	r4, r1
   345fa:	22ff      	movs	r2, #255	; 0xff
   345fc:	e72e      	b.n	3445c <__aeabi_fmul+0x94>
   345fe:	46c0      	nop			; (mov r8, r8)
   34600:	0003bfa4 	.word	0x0003bfa4
   34604:	f7ffffff 	.word	0xf7ffffff

00034608 <__aeabi_fsub>:
   34608:	b5f0      	push	{r4, r5, r6, r7, lr}
   3460a:	464f      	mov	r7, r9
   3460c:	46d6      	mov	lr, sl
   3460e:	4646      	mov	r6, r8
   34610:	0044      	lsls	r4, r0, #1
   34612:	b5c0      	push	{r6, r7, lr}
   34614:	0fc2      	lsrs	r2, r0, #31
   34616:	0247      	lsls	r7, r0, #9
   34618:	0248      	lsls	r0, r1, #9
   3461a:	0a40      	lsrs	r0, r0, #9
   3461c:	4684      	mov	ip, r0
   3461e:	4666      	mov	r6, ip
   34620:	0a7b      	lsrs	r3, r7, #9
   34622:	0048      	lsls	r0, r1, #1
   34624:	0fc9      	lsrs	r1, r1, #31
   34626:	469a      	mov	sl, r3
   34628:	0e24      	lsrs	r4, r4, #24
   3462a:	0015      	movs	r5, r2
   3462c:	00db      	lsls	r3, r3, #3
   3462e:	0e00      	lsrs	r0, r0, #24
   34630:	4689      	mov	r9, r1
   34632:	00f6      	lsls	r6, r6, #3
   34634:	28ff      	cmp	r0, #255	; 0xff
   34636:	d100      	bne.n	3463a <__aeabi_fsub+0x32>
   34638:	e08f      	b.n	3475a <__aeabi_fsub+0x152>
   3463a:	2101      	movs	r1, #1
   3463c:	464f      	mov	r7, r9
   3463e:	404f      	eors	r7, r1
   34640:	0039      	movs	r1, r7
   34642:	4291      	cmp	r1, r2
   34644:	d066      	beq.n	34714 <__aeabi_fsub+0x10c>
   34646:	1a22      	subs	r2, r4, r0
   34648:	2a00      	cmp	r2, #0
   3464a:	dc00      	bgt.n	3464e <__aeabi_fsub+0x46>
   3464c:	e09d      	b.n	3478a <__aeabi_fsub+0x182>
   3464e:	2800      	cmp	r0, #0
   34650:	d13d      	bne.n	346ce <__aeabi_fsub+0xc6>
   34652:	2e00      	cmp	r6, #0
   34654:	d100      	bne.n	34658 <__aeabi_fsub+0x50>
   34656:	e08b      	b.n	34770 <__aeabi_fsub+0x168>
   34658:	1e51      	subs	r1, r2, #1
   3465a:	2900      	cmp	r1, #0
   3465c:	d000      	beq.n	34660 <__aeabi_fsub+0x58>
   3465e:	e0b5      	b.n	347cc <__aeabi_fsub+0x1c4>
   34660:	2401      	movs	r4, #1
   34662:	1b9b      	subs	r3, r3, r6
   34664:	015a      	lsls	r2, r3, #5
   34666:	d544      	bpl.n	346f2 <__aeabi_fsub+0xea>
   34668:	019b      	lsls	r3, r3, #6
   3466a:	099f      	lsrs	r7, r3, #6
   3466c:	0038      	movs	r0, r7
   3466e:	f001 fe6f 	bl	36350 <__clzsi2>
   34672:	3805      	subs	r0, #5
   34674:	4087      	lsls	r7, r0
   34676:	4284      	cmp	r4, r0
   34678:	dd00      	ble.n	3467c <__aeabi_fsub+0x74>
   3467a:	e096      	b.n	347aa <__aeabi_fsub+0x1a2>
   3467c:	1b04      	subs	r4, r0, r4
   3467e:	003a      	movs	r2, r7
   34680:	2020      	movs	r0, #32
   34682:	3401      	adds	r4, #1
   34684:	40e2      	lsrs	r2, r4
   34686:	1b04      	subs	r4, r0, r4
   34688:	40a7      	lsls	r7, r4
   3468a:	003b      	movs	r3, r7
   3468c:	1e5f      	subs	r7, r3, #1
   3468e:	41bb      	sbcs	r3, r7
   34690:	2400      	movs	r4, #0
   34692:	4313      	orrs	r3, r2
   34694:	075a      	lsls	r2, r3, #29
   34696:	d004      	beq.n	346a2 <__aeabi_fsub+0x9a>
   34698:	220f      	movs	r2, #15
   3469a:	401a      	ands	r2, r3
   3469c:	2a04      	cmp	r2, #4
   3469e:	d000      	beq.n	346a2 <__aeabi_fsub+0x9a>
   346a0:	3304      	adds	r3, #4
   346a2:	015a      	lsls	r2, r3, #5
   346a4:	d527      	bpl.n	346f6 <__aeabi_fsub+0xee>
   346a6:	3401      	adds	r4, #1
   346a8:	2cff      	cmp	r4, #255	; 0xff
   346aa:	d100      	bne.n	346ae <__aeabi_fsub+0xa6>
   346ac:	e079      	b.n	347a2 <__aeabi_fsub+0x19a>
   346ae:	2201      	movs	r2, #1
   346b0:	019b      	lsls	r3, r3, #6
   346b2:	0a5b      	lsrs	r3, r3, #9
   346b4:	b2e4      	uxtb	r4, r4
   346b6:	402a      	ands	r2, r5
   346b8:	025b      	lsls	r3, r3, #9
   346ba:	05e4      	lsls	r4, r4, #23
   346bc:	0a58      	lsrs	r0, r3, #9
   346be:	07d2      	lsls	r2, r2, #31
   346c0:	4320      	orrs	r0, r4
   346c2:	4310      	orrs	r0, r2
   346c4:	bc1c      	pop	{r2, r3, r4}
   346c6:	4690      	mov	r8, r2
   346c8:	4699      	mov	r9, r3
   346ca:	46a2      	mov	sl, r4
   346cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   346ce:	2cff      	cmp	r4, #255	; 0xff
   346d0:	d0e0      	beq.n	34694 <__aeabi_fsub+0x8c>
   346d2:	2180      	movs	r1, #128	; 0x80
   346d4:	04c9      	lsls	r1, r1, #19
   346d6:	430e      	orrs	r6, r1
   346d8:	2a1b      	cmp	r2, #27
   346da:	dc7b      	bgt.n	347d4 <__aeabi_fsub+0x1cc>
   346dc:	0031      	movs	r1, r6
   346de:	2020      	movs	r0, #32
   346e0:	40d1      	lsrs	r1, r2
   346e2:	1a82      	subs	r2, r0, r2
   346e4:	4096      	lsls	r6, r2
   346e6:	1e72      	subs	r2, r6, #1
   346e8:	4196      	sbcs	r6, r2
   346ea:	430e      	orrs	r6, r1
   346ec:	1b9b      	subs	r3, r3, r6
   346ee:	015a      	lsls	r2, r3, #5
   346f0:	d4ba      	bmi.n	34668 <__aeabi_fsub+0x60>
   346f2:	075a      	lsls	r2, r3, #29
   346f4:	d1d0      	bne.n	34698 <__aeabi_fsub+0x90>
   346f6:	2201      	movs	r2, #1
   346f8:	08df      	lsrs	r7, r3, #3
   346fa:	402a      	ands	r2, r5
   346fc:	2cff      	cmp	r4, #255	; 0xff
   346fe:	d133      	bne.n	34768 <__aeabi_fsub+0x160>
   34700:	2f00      	cmp	r7, #0
   34702:	d100      	bne.n	34706 <__aeabi_fsub+0xfe>
   34704:	e0a8      	b.n	34858 <__aeabi_fsub+0x250>
   34706:	2380      	movs	r3, #128	; 0x80
   34708:	03db      	lsls	r3, r3, #15
   3470a:	433b      	orrs	r3, r7
   3470c:	025b      	lsls	r3, r3, #9
   3470e:	0a5b      	lsrs	r3, r3, #9
   34710:	24ff      	movs	r4, #255	; 0xff
   34712:	e7d1      	b.n	346b8 <__aeabi_fsub+0xb0>
   34714:	1a21      	subs	r1, r4, r0
   34716:	2900      	cmp	r1, #0
   34718:	dd4c      	ble.n	347b4 <__aeabi_fsub+0x1ac>
   3471a:	2800      	cmp	r0, #0
   3471c:	d02a      	beq.n	34774 <__aeabi_fsub+0x16c>
   3471e:	2cff      	cmp	r4, #255	; 0xff
   34720:	d0b8      	beq.n	34694 <__aeabi_fsub+0x8c>
   34722:	2080      	movs	r0, #128	; 0x80
   34724:	04c0      	lsls	r0, r0, #19
   34726:	4306      	orrs	r6, r0
   34728:	291b      	cmp	r1, #27
   3472a:	dd00      	ble.n	3472e <__aeabi_fsub+0x126>
   3472c:	e0af      	b.n	3488e <__aeabi_fsub+0x286>
   3472e:	0030      	movs	r0, r6
   34730:	2720      	movs	r7, #32
   34732:	40c8      	lsrs	r0, r1
   34734:	1a79      	subs	r1, r7, r1
   34736:	408e      	lsls	r6, r1
   34738:	1e71      	subs	r1, r6, #1
   3473a:	418e      	sbcs	r6, r1
   3473c:	4306      	orrs	r6, r0
   3473e:	199b      	adds	r3, r3, r6
   34740:	0159      	lsls	r1, r3, #5
   34742:	d5d6      	bpl.n	346f2 <__aeabi_fsub+0xea>
   34744:	3401      	adds	r4, #1
   34746:	2cff      	cmp	r4, #255	; 0xff
   34748:	d100      	bne.n	3474c <__aeabi_fsub+0x144>
   3474a:	e085      	b.n	34858 <__aeabi_fsub+0x250>
   3474c:	2201      	movs	r2, #1
   3474e:	497a      	ldr	r1, [pc, #488]	; (34938 <__aeabi_fsub+0x330>)
   34750:	401a      	ands	r2, r3
   34752:	085b      	lsrs	r3, r3, #1
   34754:	400b      	ands	r3, r1
   34756:	4313      	orrs	r3, r2
   34758:	e79c      	b.n	34694 <__aeabi_fsub+0x8c>
   3475a:	2e00      	cmp	r6, #0
   3475c:	d000      	beq.n	34760 <__aeabi_fsub+0x158>
   3475e:	e770      	b.n	34642 <__aeabi_fsub+0x3a>
   34760:	e76b      	b.n	3463a <__aeabi_fsub+0x32>
   34762:	1e3b      	subs	r3, r7, #0
   34764:	d1c5      	bne.n	346f2 <__aeabi_fsub+0xea>
   34766:	2200      	movs	r2, #0
   34768:	027b      	lsls	r3, r7, #9
   3476a:	0a5b      	lsrs	r3, r3, #9
   3476c:	b2e4      	uxtb	r4, r4
   3476e:	e7a3      	b.n	346b8 <__aeabi_fsub+0xb0>
   34770:	0014      	movs	r4, r2
   34772:	e78f      	b.n	34694 <__aeabi_fsub+0x8c>
   34774:	2e00      	cmp	r6, #0
   34776:	d04d      	beq.n	34814 <__aeabi_fsub+0x20c>
   34778:	1e48      	subs	r0, r1, #1
   3477a:	2800      	cmp	r0, #0
   3477c:	d157      	bne.n	3482e <__aeabi_fsub+0x226>
   3477e:	199b      	adds	r3, r3, r6
   34780:	2401      	movs	r4, #1
   34782:	015a      	lsls	r2, r3, #5
   34784:	d5b5      	bpl.n	346f2 <__aeabi_fsub+0xea>
   34786:	2402      	movs	r4, #2
   34788:	e7e0      	b.n	3474c <__aeabi_fsub+0x144>
   3478a:	2a00      	cmp	r2, #0
   3478c:	d125      	bne.n	347da <__aeabi_fsub+0x1d2>
   3478e:	1c62      	adds	r2, r4, #1
   34790:	b2d2      	uxtb	r2, r2
   34792:	2a01      	cmp	r2, #1
   34794:	dd72      	ble.n	3487c <__aeabi_fsub+0x274>
   34796:	1b9f      	subs	r7, r3, r6
   34798:	017a      	lsls	r2, r7, #5
   3479a:	d535      	bpl.n	34808 <__aeabi_fsub+0x200>
   3479c:	1af7      	subs	r7, r6, r3
   3479e:	000d      	movs	r5, r1
   347a0:	e764      	b.n	3466c <__aeabi_fsub+0x64>
   347a2:	2201      	movs	r2, #1
   347a4:	2300      	movs	r3, #0
   347a6:	402a      	ands	r2, r5
   347a8:	e786      	b.n	346b8 <__aeabi_fsub+0xb0>
   347aa:	003b      	movs	r3, r7
   347ac:	4a63      	ldr	r2, [pc, #396]	; (3493c <__aeabi_fsub+0x334>)
   347ae:	1a24      	subs	r4, r4, r0
   347b0:	4013      	ands	r3, r2
   347b2:	e76f      	b.n	34694 <__aeabi_fsub+0x8c>
   347b4:	2900      	cmp	r1, #0
   347b6:	d16c      	bne.n	34892 <__aeabi_fsub+0x28a>
   347b8:	1c61      	adds	r1, r4, #1
   347ba:	b2c8      	uxtb	r0, r1
   347bc:	2801      	cmp	r0, #1
   347be:	dd4e      	ble.n	3485e <__aeabi_fsub+0x256>
   347c0:	29ff      	cmp	r1, #255	; 0xff
   347c2:	d049      	beq.n	34858 <__aeabi_fsub+0x250>
   347c4:	199b      	adds	r3, r3, r6
   347c6:	085b      	lsrs	r3, r3, #1
   347c8:	000c      	movs	r4, r1
   347ca:	e763      	b.n	34694 <__aeabi_fsub+0x8c>
   347cc:	2aff      	cmp	r2, #255	; 0xff
   347ce:	d041      	beq.n	34854 <__aeabi_fsub+0x24c>
   347d0:	000a      	movs	r2, r1
   347d2:	e781      	b.n	346d8 <__aeabi_fsub+0xd0>
   347d4:	2601      	movs	r6, #1
   347d6:	1b9b      	subs	r3, r3, r6
   347d8:	e789      	b.n	346ee <__aeabi_fsub+0xe6>
   347da:	2c00      	cmp	r4, #0
   347dc:	d01c      	beq.n	34818 <__aeabi_fsub+0x210>
   347de:	28ff      	cmp	r0, #255	; 0xff
   347e0:	d021      	beq.n	34826 <__aeabi_fsub+0x21e>
   347e2:	2480      	movs	r4, #128	; 0x80
   347e4:	04e4      	lsls	r4, r4, #19
   347e6:	4252      	negs	r2, r2
   347e8:	4323      	orrs	r3, r4
   347ea:	2a1b      	cmp	r2, #27
   347ec:	dd00      	ble.n	347f0 <__aeabi_fsub+0x1e8>
   347ee:	e096      	b.n	3491e <__aeabi_fsub+0x316>
   347f0:	001c      	movs	r4, r3
   347f2:	2520      	movs	r5, #32
   347f4:	40d4      	lsrs	r4, r2
   347f6:	1aaa      	subs	r2, r5, r2
   347f8:	4093      	lsls	r3, r2
   347fa:	1e5a      	subs	r2, r3, #1
   347fc:	4193      	sbcs	r3, r2
   347fe:	4323      	orrs	r3, r4
   34800:	1af3      	subs	r3, r6, r3
   34802:	0004      	movs	r4, r0
   34804:	000d      	movs	r5, r1
   34806:	e72d      	b.n	34664 <__aeabi_fsub+0x5c>
   34808:	2f00      	cmp	r7, #0
   3480a:	d000      	beq.n	3480e <__aeabi_fsub+0x206>
   3480c:	e72e      	b.n	3466c <__aeabi_fsub+0x64>
   3480e:	2200      	movs	r2, #0
   34810:	2400      	movs	r4, #0
   34812:	e7a9      	b.n	34768 <__aeabi_fsub+0x160>
   34814:	000c      	movs	r4, r1
   34816:	e73d      	b.n	34694 <__aeabi_fsub+0x8c>
   34818:	2b00      	cmp	r3, #0
   3481a:	d058      	beq.n	348ce <__aeabi_fsub+0x2c6>
   3481c:	43d2      	mvns	r2, r2
   3481e:	2a00      	cmp	r2, #0
   34820:	d0ee      	beq.n	34800 <__aeabi_fsub+0x1f8>
   34822:	28ff      	cmp	r0, #255	; 0xff
   34824:	d1e1      	bne.n	347ea <__aeabi_fsub+0x1e2>
   34826:	0033      	movs	r3, r6
   34828:	24ff      	movs	r4, #255	; 0xff
   3482a:	000d      	movs	r5, r1
   3482c:	e732      	b.n	34694 <__aeabi_fsub+0x8c>
   3482e:	29ff      	cmp	r1, #255	; 0xff
   34830:	d010      	beq.n	34854 <__aeabi_fsub+0x24c>
   34832:	0001      	movs	r1, r0
   34834:	e778      	b.n	34728 <__aeabi_fsub+0x120>
   34836:	2b00      	cmp	r3, #0
   34838:	d06e      	beq.n	34918 <__aeabi_fsub+0x310>
   3483a:	24ff      	movs	r4, #255	; 0xff
   3483c:	2e00      	cmp	r6, #0
   3483e:	d100      	bne.n	34842 <__aeabi_fsub+0x23a>
   34840:	e728      	b.n	34694 <__aeabi_fsub+0x8c>
   34842:	2280      	movs	r2, #128	; 0x80
   34844:	4651      	mov	r1, sl
   34846:	03d2      	lsls	r2, r2, #15
   34848:	4211      	tst	r1, r2
   3484a:	d003      	beq.n	34854 <__aeabi_fsub+0x24c>
   3484c:	4661      	mov	r1, ip
   3484e:	4211      	tst	r1, r2
   34850:	d100      	bne.n	34854 <__aeabi_fsub+0x24c>
   34852:	0033      	movs	r3, r6
   34854:	24ff      	movs	r4, #255	; 0xff
   34856:	e71d      	b.n	34694 <__aeabi_fsub+0x8c>
   34858:	24ff      	movs	r4, #255	; 0xff
   3485a:	2300      	movs	r3, #0
   3485c:	e72c      	b.n	346b8 <__aeabi_fsub+0xb0>
   3485e:	2c00      	cmp	r4, #0
   34860:	d1e9      	bne.n	34836 <__aeabi_fsub+0x22e>
   34862:	2b00      	cmp	r3, #0
   34864:	d063      	beq.n	3492e <__aeabi_fsub+0x326>
   34866:	2e00      	cmp	r6, #0
   34868:	d100      	bne.n	3486c <__aeabi_fsub+0x264>
   3486a:	e713      	b.n	34694 <__aeabi_fsub+0x8c>
   3486c:	199b      	adds	r3, r3, r6
   3486e:	015a      	lsls	r2, r3, #5
   34870:	d400      	bmi.n	34874 <__aeabi_fsub+0x26c>
   34872:	e73e      	b.n	346f2 <__aeabi_fsub+0xea>
   34874:	4a31      	ldr	r2, [pc, #196]	; (3493c <__aeabi_fsub+0x334>)
   34876:	000c      	movs	r4, r1
   34878:	4013      	ands	r3, r2
   3487a:	e70b      	b.n	34694 <__aeabi_fsub+0x8c>
   3487c:	2c00      	cmp	r4, #0
   3487e:	d11e      	bne.n	348be <__aeabi_fsub+0x2b6>
   34880:	2b00      	cmp	r3, #0
   34882:	d12f      	bne.n	348e4 <__aeabi_fsub+0x2dc>
   34884:	2e00      	cmp	r6, #0
   34886:	d04f      	beq.n	34928 <__aeabi_fsub+0x320>
   34888:	0033      	movs	r3, r6
   3488a:	000d      	movs	r5, r1
   3488c:	e702      	b.n	34694 <__aeabi_fsub+0x8c>
   3488e:	2601      	movs	r6, #1
   34890:	e755      	b.n	3473e <__aeabi_fsub+0x136>
   34892:	2c00      	cmp	r4, #0
   34894:	d11f      	bne.n	348d6 <__aeabi_fsub+0x2ce>
   34896:	2b00      	cmp	r3, #0
   34898:	d043      	beq.n	34922 <__aeabi_fsub+0x31a>
   3489a:	43c9      	mvns	r1, r1
   3489c:	2900      	cmp	r1, #0
   3489e:	d00b      	beq.n	348b8 <__aeabi_fsub+0x2b0>
   348a0:	28ff      	cmp	r0, #255	; 0xff
   348a2:	d039      	beq.n	34918 <__aeabi_fsub+0x310>
   348a4:	291b      	cmp	r1, #27
   348a6:	dc44      	bgt.n	34932 <__aeabi_fsub+0x32a>
   348a8:	001c      	movs	r4, r3
   348aa:	2720      	movs	r7, #32
   348ac:	40cc      	lsrs	r4, r1
   348ae:	1a79      	subs	r1, r7, r1
   348b0:	408b      	lsls	r3, r1
   348b2:	1e59      	subs	r1, r3, #1
   348b4:	418b      	sbcs	r3, r1
   348b6:	4323      	orrs	r3, r4
   348b8:	199b      	adds	r3, r3, r6
   348ba:	0004      	movs	r4, r0
   348bc:	e740      	b.n	34740 <__aeabi_fsub+0x138>
   348be:	2b00      	cmp	r3, #0
   348c0:	d11a      	bne.n	348f8 <__aeabi_fsub+0x2f0>
   348c2:	2e00      	cmp	r6, #0
   348c4:	d124      	bne.n	34910 <__aeabi_fsub+0x308>
   348c6:	2780      	movs	r7, #128	; 0x80
   348c8:	2200      	movs	r2, #0
   348ca:	03ff      	lsls	r7, r7, #15
   348cc:	e71b      	b.n	34706 <__aeabi_fsub+0xfe>
   348ce:	0033      	movs	r3, r6
   348d0:	0004      	movs	r4, r0
   348d2:	000d      	movs	r5, r1
   348d4:	e6de      	b.n	34694 <__aeabi_fsub+0x8c>
   348d6:	28ff      	cmp	r0, #255	; 0xff
   348d8:	d01e      	beq.n	34918 <__aeabi_fsub+0x310>
   348da:	2480      	movs	r4, #128	; 0x80
   348dc:	04e4      	lsls	r4, r4, #19
   348de:	4249      	negs	r1, r1
   348e0:	4323      	orrs	r3, r4
   348e2:	e7df      	b.n	348a4 <__aeabi_fsub+0x29c>
   348e4:	2e00      	cmp	r6, #0
   348e6:	d100      	bne.n	348ea <__aeabi_fsub+0x2e2>
   348e8:	e6d4      	b.n	34694 <__aeabi_fsub+0x8c>
   348ea:	1b9f      	subs	r7, r3, r6
   348ec:	017a      	lsls	r2, r7, #5
   348ee:	d400      	bmi.n	348f2 <__aeabi_fsub+0x2ea>
   348f0:	e737      	b.n	34762 <__aeabi_fsub+0x15a>
   348f2:	1af3      	subs	r3, r6, r3
   348f4:	000d      	movs	r5, r1
   348f6:	e6cd      	b.n	34694 <__aeabi_fsub+0x8c>
   348f8:	24ff      	movs	r4, #255	; 0xff
   348fa:	2e00      	cmp	r6, #0
   348fc:	d100      	bne.n	34900 <__aeabi_fsub+0x2f8>
   348fe:	e6c9      	b.n	34694 <__aeabi_fsub+0x8c>
   34900:	2280      	movs	r2, #128	; 0x80
   34902:	4650      	mov	r0, sl
   34904:	03d2      	lsls	r2, r2, #15
   34906:	4210      	tst	r0, r2
   34908:	d0a4      	beq.n	34854 <__aeabi_fsub+0x24c>
   3490a:	4660      	mov	r0, ip
   3490c:	4210      	tst	r0, r2
   3490e:	d1a1      	bne.n	34854 <__aeabi_fsub+0x24c>
   34910:	0033      	movs	r3, r6
   34912:	000d      	movs	r5, r1
   34914:	24ff      	movs	r4, #255	; 0xff
   34916:	e6bd      	b.n	34694 <__aeabi_fsub+0x8c>
   34918:	0033      	movs	r3, r6
   3491a:	24ff      	movs	r4, #255	; 0xff
   3491c:	e6ba      	b.n	34694 <__aeabi_fsub+0x8c>
   3491e:	2301      	movs	r3, #1
   34920:	e76e      	b.n	34800 <__aeabi_fsub+0x1f8>
   34922:	0033      	movs	r3, r6
   34924:	0004      	movs	r4, r0
   34926:	e6b5      	b.n	34694 <__aeabi_fsub+0x8c>
   34928:	2700      	movs	r7, #0
   3492a:	2200      	movs	r2, #0
   3492c:	e71c      	b.n	34768 <__aeabi_fsub+0x160>
   3492e:	0033      	movs	r3, r6
   34930:	e6b0      	b.n	34694 <__aeabi_fsub+0x8c>
   34932:	2301      	movs	r3, #1
   34934:	e7c0      	b.n	348b8 <__aeabi_fsub+0x2b0>
   34936:	46c0      	nop			; (mov r8, r8)
   34938:	7dffffff 	.word	0x7dffffff
   3493c:	fbffffff 	.word	0xfbffffff

00034940 <__aeabi_f2iz>:
   34940:	0241      	lsls	r1, r0, #9
   34942:	0043      	lsls	r3, r0, #1
   34944:	0fc2      	lsrs	r2, r0, #31
   34946:	0a49      	lsrs	r1, r1, #9
   34948:	0e1b      	lsrs	r3, r3, #24
   3494a:	2000      	movs	r0, #0
   3494c:	2b7e      	cmp	r3, #126	; 0x7e
   3494e:	dd0d      	ble.n	3496c <__aeabi_f2iz+0x2c>
   34950:	2b9d      	cmp	r3, #157	; 0x9d
   34952:	dc0c      	bgt.n	3496e <__aeabi_f2iz+0x2e>
   34954:	2080      	movs	r0, #128	; 0x80
   34956:	0400      	lsls	r0, r0, #16
   34958:	4301      	orrs	r1, r0
   3495a:	2b95      	cmp	r3, #149	; 0x95
   3495c:	dc0a      	bgt.n	34974 <__aeabi_f2iz+0x34>
   3495e:	2096      	movs	r0, #150	; 0x96
   34960:	1ac3      	subs	r3, r0, r3
   34962:	40d9      	lsrs	r1, r3
   34964:	4248      	negs	r0, r1
   34966:	2a00      	cmp	r2, #0
   34968:	d100      	bne.n	3496c <__aeabi_f2iz+0x2c>
   3496a:	0008      	movs	r0, r1
   3496c:	4770      	bx	lr
   3496e:	4b03      	ldr	r3, [pc, #12]	; (3497c <__aeabi_f2iz+0x3c>)
   34970:	18d0      	adds	r0, r2, r3
   34972:	e7fb      	b.n	3496c <__aeabi_f2iz+0x2c>
   34974:	3b96      	subs	r3, #150	; 0x96
   34976:	4099      	lsls	r1, r3
   34978:	e7f4      	b.n	34964 <__aeabi_f2iz+0x24>
   3497a:	46c0      	nop			; (mov r8, r8)
   3497c:	7fffffff 	.word	0x7fffffff

00034980 <__aeabi_i2f>:
   34980:	b570      	push	{r4, r5, r6, lr}
   34982:	2800      	cmp	r0, #0
   34984:	d030      	beq.n	349e8 <__aeabi_i2f+0x68>
   34986:	17c3      	asrs	r3, r0, #31
   34988:	18c4      	adds	r4, r0, r3
   3498a:	405c      	eors	r4, r3
   3498c:	0fc5      	lsrs	r5, r0, #31
   3498e:	0020      	movs	r0, r4
   34990:	f001 fcde 	bl	36350 <__clzsi2>
   34994:	239e      	movs	r3, #158	; 0x9e
   34996:	1a1b      	subs	r3, r3, r0
   34998:	2b96      	cmp	r3, #150	; 0x96
   3499a:	dc0d      	bgt.n	349b8 <__aeabi_i2f+0x38>
   3499c:	2296      	movs	r2, #150	; 0x96
   3499e:	1ad2      	subs	r2, r2, r3
   349a0:	4094      	lsls	r4, r2
   349a2:	002a      	movs	r2, r5
   349a4:	0264      	lsls	r4, r4, #9
   349a6:	0a64      	lsrs	r4, r4, #9
   349a8:	b2db      	uxtb	r3, r3
   349aa:	0264      	lsls	r4, r4, #9
   349ac:	05db      	lsls	r3, r3, #23
   349ae:	0a60      	lsrs	r0, r4, #9
   349b0:	07d2      	lsls	r2, r2, #31
   349b2:	4318      	orrs	r0, r3
   349b4:	4310      	orrs	r0, r2
   349b6:	bd70      	pop	{r4, r5, r6, pc}
   349b8:	2b99      	cmp	r3, #153	; 0x99
   349ba:	dc19      	bgt.n	349f0 <__aeabi_i2f+0x70>
   349bc:	2299      	movs	r2, #153	; 0x99
   349be:	1ad2      	subs	r2, r2, r3
   349c0:	2a00      	cmp	r2, #0
   349c2:	dd29      	ble.n	34a18 <__aeabi_i2f+0x98>
   349c4:	4094      	lsls	r4, r2
   349c6:	0022      	movs	r2, r4
   349c8:	4c14      	ldr	r4, [pc, #80]	; (34a1c <__aeabi_i2f+0x9c>)
   349ca:	4014      	ands	r4, r2
   349cc:	0751      	lsls	r1, r2, #29
   349ce:	d004      	beq.n	349da <__aeabi_i2f+0x5a>
   349d0:	210f      	movs	r1, #15
   349d2:	400a      	ands	r2, r1
   349d4:	2a04      	cmp	r2, #4
   349d6:	d000      	beq.n	349da <__aeabi_i2f+0x5a>
   349d8:	3404      	adds	r4, #4
   349da:	0162      	lsls	r2, r4, #5
   349dc:	d413      	bmi.n	34a06 <__aeabi_i2f+0x86>
   349de:	01a4      	lsls	r4, r4, #6
   349e0:	0a64      	lsrs	r4, r4, #9
   349e2:	b2db      	uxtb	r3, r3
   349e4:	002a      	movs	r2, r5
   349e6:	e7e0      	b.n	349aa <__aeabi_i2f+0x2a>
   349e8:	2200      	movs	r2, #0
   349ea:	2300      	movs	r3, #0
   349ec:	2400      	movs	r4, #0
   349ee:	e7dc      	b.n	349aa <__aeabi_i2f+0x2a>
   349f0:	2205      	movs	r2, #5
   349f2:	0021      	movs	r1, r4
   349f4:	1a12      	subs	r2, r2, r0
   349f6:	40d1      	lsrs	r1, r2
   349f8:	22b9      	movs	r2, #185	; 0xb9
   349fa:	1ad2      	subs	r2, r2, r3
   349fc:	4094      	lsls	r4, r2
   349fe:	1e62      	subs	r2, r4, #1
   34a00:	4194      	sbcs	r4, r2
   34a02:	430c      	orrs	r4, r1
   34a04:	e7da      	b.n	349bc <__aeabi_i2f+0x3c>
   34a06:	4b05      	ldr	r3, [pc, #20]	; (34a1c <__aeabi_i2f+0x9c>)
   34a08:	002a      	movs	r2, r5
   34a0a:	401c      	ands	r4, r3
   34a0c:	239f      	movs	r3, #159	; 0x9f
   34a0e:	01a4      	lsls	r4, r4, #6
   34a10:	1a1b      	subs	r3, r3, r0
   34a12:	0a64      	lsrs	r4, r4, #9
   34a14:	b2db      	uxtb	r3, r3
   34a16:	e7c8      	b.n	349aa <__aeabi_i2f+0x2a>
   34a18:	0022      	movs	r2, r4
   34a1a:	e7d5      	b.n	349c8 <__aeabi_i2f+0x48>
   34a1c:	fbffffff 	.word	0xfbffffff

00034a20 <__aeabi_dadd>:
   34a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34a22:	4645      	mov	r5, r8
   34a24:	46de      	mov	lr, fp
   34a26:	4657      	mov	r7, sl
   34a28:	464e      	mov	r6, r9
   34a2a:	030c      	lsls	r4, r1, #12
   34a2c:	b5e0      	push	{r5, r6, r7, lr}
   34a2e:	004e      	lsls	r6, r1, #1
   34a30:	0fc9      	lsrs	r1, r1, #31
   34a32:	4688      	mov	r8, r1
   34a34:	000d      	movs	r5, r1
   34a36:	0a61      	lsrs	r1, r4, #9
   34a38:	0f44      	lsrs	r4, r0, #29
   34a3a:	430c      	orrs	r4, r1
   34a3c:	00c7      	lsls	r7, r0, #3
   34a3e:	0319      	lsls	r1, r3, #12
   34a40:	0058      	lsls	r0, r3, #1
   34a42:	0fdb      	lsrs	r3, r3, #31
   34a44:	469b      	mov	fp, r3
   34a46:	0a4b      	lsrs	r3, r1, #9
   34a48:	0f51      	lsrs	r1, r2, #29
   34a4a:	430b      	orrs	r3, r1
   34a4c:	0d76      	lsrs	r6, r6, #21
   34a4e:	0d40      	lsrs	r0, r0, #21
   34a50:	0019      	movs	r1, r3
   34a52:	00d2      	lsls	r2, r2, #3
   34a54:	45d8      	cmp	r8, fp
   34a56:	d100      	bne.n	34a5a <__aeabi_dadd+0x3a>
   34a58:	e0ae      	b.n	34bb8 <__aeabi_dadd+0x198>
   34a5a:	1a35      	subs	r5, r6, r0
   34a5c:	2d00      	cmp	r5, #0
   34a5e:	dc00      	bgt.n	34a62 <__aeabi_dadd+0x42>
   34a60:	e0f6      	b.n	34c50 <__aeabi_dadd+0x230>
   34a62:	2800      	cmp	r0, #0
   34a64:	d10f      	bne.n	34a86 <__aeabi_dadd+0x66>
   34a66:	4313      	orrs	r3, r2
   34a68:	d100      	bne.n	34a6c <__aeabi_dadd+0x4c>
   34a6a:	e0db      	b.n	34c24 <__aeabi_dadd+0x204>
   34a6c:	1e6b      	subs	r3, r5, #1
   34a6e:	2b00      	cmp	r3, #0
   34a70:	d000      	beq.n	34a74 <__aeabi_dadd+0x54>
   34a72:	e137      	b.n	34ce4 <__aeabi_dadd+0x2c4>
   34a74:	1aba      	subs	r2, r7, r2
   34a76:	4297      	cmp	r7, r2
   34a78:	41bf      	sbcs	r7, r7
   34a7a:	1a64      	subs	r4, r4, r1
   34a7c:	427f      	negs	r7, r7
   34a7e:	1be4      	subs	r4, r4, r7
   34a80:	2601      	movs	r6, #1
   34a82:	0017      	movs	r7, r2
   34a84:	e024      	b.n	34ad0 <__aeabi_dadd+0xb0>
   34a86:	4bc6      	ldr	r3, [pc, #792]	; (34da0 <__aeabi_dadd+0x380>)
   34a88:	429e      	cmp	r6, r3
   34a8a:	d04d      	beq.n	34b28 <__aeabi_dadd+0x108>
   34a8c:	2380      	movs	r3, #128	; 0x80
   34a8e:	041b      	lsls	r3, r3, #16
   34a90:	4319      	orrs	r1, r3
   34a92:	2d38      	cmp	r5, #56	; 0x38
   34a94:	dd00      	ble.n	34a98 <__aeabi_dadd+0x78>
   34a96:	e107      	b.n	34ca8 <__aeabi_dadd+0x288>
   34a98:	2d1f      	cmp	r5, #31
   34a9a:	dd00      	ble.n	34a9e <__aeabi_dadd+0x7e>
   34a9c:	e138      	b.n	34d10 <__aeabi_dadd+0x2f0>
   34a9e:	2020      	movs	r0, #32
   34aa0:	1b43      	subs	r3, r0, r5
   34aa2:	469a      	mov	sl, r3
   34aa4:	000b      	movs	r3, r1
   34aa6:	4650      	mov	r0, sl
   34aa8:	4083      	lsls	r3, r0
   34aaa:	4699      	mov	r9, r3
   34aac:	0013      	movs	r3, r2
   34aae:	4648      	mov	r0, r9
   34ab0:	40eb      	lsrs	r3, r5
   34ab2:	4318      	orrs	r0, r3
   34ab4:	0003      	movs	r3, r0
   34ab6:	4650      	mov	r0, sl
   34ab8:	4082      	lsls	r2, r0
   34aba:	1e50      	subs	r0, r2, #1
   34abc:	4182      	sbcs	r2, r0
   34abe:	40e9      	lsrs	r1, r5
   34ac0:	431a      	orrs	r2, r3
   34ac2:	1aba      	subs	r2, r7, r2
   34ac4:	1a61      	subs	r1, r4, r1
   34ac6:	4297      	cmp	r7, r2
   34ac8:	41a4      	sbcs	r4, r4
   34aca:	0017      	movs	r7, r2
   34acc:	4264      	negs	r4, r4
   34ace:	1b0c      	subs	r4, r1, r4
   34ad0:	0223      	lsls	r3, r4, #8
   34ad2:	d562      	bpl.n	34b9a <__aeabi_dadd+0x17a>
   34ad4:	0264      	lsls	r4, r4, #9
   34ad6:	0a65      	lsrs	r5, r4, #9
   34ad8:	2d00      	cmp	r5, #0
   34ada:	d100      	bne.n	34ade <__aeabi_dadd+0xbe>
   34adc:	e0df      	b.n	34c9e <__aeabi_dadd+0x27e>
   34ade:	0028      	movs	r0, r5
   34ae0:	f001 fc36 	bl	36350 <__clzsi2>
   34ae4:	0003      	movs	r3, r0
   34ae6:	3b08      	subs	r3, #8
   34ae8:	2b1f      	cmp	r3, #31
   34aea:	dd00      	ble.n	34aee <__aeabi_dadd+0xce>
   34aec:	e0d2      	b.n	34c94 <__aeabi_dadd+0x274>
   34aee:	2220      	movs	r2, #32
   34af0:	003c      	movs	r4, r7
   34af2:	1ad2      	subs	r2, r2, r3
   34af4:	409d      	lsls	r5, r3
   34af6:	40d4      	lsrs	r4, r2
   34af8:	409f      	lsls	r7, r3
   34afa:	4325      	orrs	r5, r4
   34afc:	429e      	cmp	r6, r3
   34afe:	dd00      	ble.n	34b02 <__aeabi_dadd+0xe2>
   34b00:	e0c4      	b.n	34c8c <__aeabi_dadd+0x26c>
   34b02:	1b9e      	subs	r6, r3, r6
   34b04:	1c73      	adds	r3, r6, #1
   34b06:	2b1f      	cmp	r3, #31
   34b08:	dd00      	ble.n	34b0c <__aeabi_dadd+0xec>
   34b0a:	e0f1      	b.n	34cf0 <__aeabi_dadd+0x2d0>
   34b0c:	2220      	movs	r2, #32
   34b0e:	0038      	movs	r0, r7
   34b10:	0029      	movs	r1, r5
   34b12:	1ad2      	subs	r2, r2, r3
   34b14:	40d8      	lsrs	r0, r3
   34b16:	4091      	lsls	r1, r2
   34b18:	4097      	lsls	r7, r2
   34b1a:	002c      	movs	r4, r5
   34b1c:	4301      	orrs	r1, r0
   34b1e:	1e78      	subs	r0, r7, #1
   34b20:	4187      	sbcs	r7, r0
   34b22:	40dc      	lsrs	r4, r3
   34b24:	2600      	movs	r6, #0
   34b26:	430f      	orrs	r7, r1
   34b28:	077b      	lsls	r3, r7, #29
   34b2a:	d009      	beq.n	34b40 <__aeabi_dadd+0x120>
   34b2c:	230f      	movs	r3, #15
   34b2e:	403b      	ands	r3, r7
   34b30:	2b04      	cmp	r3, #4
   34b32:	d005      	beq.n	34b40 <__aeabi_dadd+0x120>
   34b34:	1d3b      	adds	r3, r7, #4
   34b36:	42bb      	cmp	r3, r7
   34b38:	41bf      	sbcs	r7, r7
   34b3a:	427f      	negs	r7, r7
   34b3c:	19e4      	adds	r4, r4, r7
   34b3e:	001f      	movs	r7, r3
   34b40:	0223      	lsls	r3, r4, #8
   34b42:	d52c      	bpl.n	34b9e <__aeabi_dadd+0x17e>
   34b44:	4b96      	ldr	r3, [pc, #600]	; (34da0 <__aeabi_dadd+0x380>)
   34b46:	3601      	adds	r6, #1
   34b48:	429e      	cmp	r6, r3
   34b4a:	d100      	bne.n	34b4e <__aeabi_dadd+0x12e>
   34b4c:	e09a      	b.n	34c84 <__aeabi_dadd+0x264>
   34b4e:	4645      	mov	r5, r8
   34b50:	4b94      	ldr	r3, [pc, #592]	; (34da4 <__aeabi_dadd+0x384>)
   34b52:	08ff      	lsrs	r7, r7, #3
   34b54:	401c      	ands	r4, r3
   34b56:	0760      	lsls	r0, r4, #29
   34b58:	0576      	lsls	r6, r6, #21
   34b5a:	0264      	lsls	r4, r4, #9
   34b5c:	4307      	orrs	r7, r0
   34b5e:	0b24      	lsrs	r4, r4, #12
   34b60:	0d76      	lsrs	r6, r6, #21
   34b62:	2100      	movs	r1, #0
   34b64:	0324      	lsls	r4, r4, #12
   34b66:	0b23      	lsrs	r3, r4, #12
   34b68:	0d0c      	lsrs	r4, r1, #20
   34b6a:	4a8f      	ldr	r2, [pc, #572]	; (34da8 <__aeabi_dadd+0x388>)
   34b6c:	0524      	lsls	r4, r4, #20
   34b6e:	431c      	orrs	r4, r3
   34b70:	4014      	ands	r4, r2
   34b72:	0533      	lsls	r3, r6, #20
   34b74:	4323      	orrs	r3, r4
   34b76:	005b      	lsls	r3, r3, #1
   34b78:	07ed      	lsls	r5, r5, #31
   34b7a:	085b      	lsrs	r3, r3, #1
   34b7c:	432b      	orrs	r3, r5
   34b7e:	0038      	movs	r0, r7
   34b80:	0019      	movs	r1, r3
   34b82:	bc3c      	pop	{r2, r3, r4, r5}
   34b84:	4690      	mov	r8, r2
   34b86:	4699      	mov	r9, r3
   34b88:	46a2      	mov	sl, r4
   34b8a:	46ab      	mov	fp, r5
   34b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34b8e:	4664      	mov	r4, ip
   34b90:	4304      	orrs	r4, r0
   34b92:	d100      	bne.n	34b96 <__aeabi_dadd+0x176>
   34b94:	e211      	b.n	34fba <__aeabi_dadd+0x59a>
   34b96:	0004      	movs	r4, r0
   34b98:	4667      	mov	r7, ip
   34b9a:	077b      	lsls	r3, r7, #29
   34b9c:	d1c6      	bne.n	34b2c <__aeabi_dadd+0x10c>
   34b9e:	4645      	mov	r5, r8
   34ba0:	0760      	lsls	r0, r4, #29
   34ba2:	08ff      	lsrs	r7, r7, #3
   34ba4:	4307      	orrs	r7, r0
   34ba6:	08e4      	lsrs	r4, r4, #3
   34ba8:	4b7d      	ldr	r3, [pc, #500]	; (34da0 <__aeabi_dadd+0x380>)
   34baa:	429e      	cmp	r6, r3
   34bac:	d030      	beq.n	34c10 <__aeabi_dadd+0x1f0>
   34bae:	0324      	lsls	r4, r4, #12
   34bb0:	0576      	lsls	r6, r6, #21
   34bb2:	0b24      	lsrs	r4, r4, #12
   34bb4:	0d76      	lsrs	r6, r6, #21
   34bb6:	e7d4      	b.n	34b62 <__aeabi_dadd+0x142>
   34bb8:	1a33      	subs	r3, r6, r0
   34bba:	469a      	mov	sl, r3
   34bbc:	2b00      	cmp	r3, #0
   34bbe:	dd78      	ble.n	34cb2 <__aeabi_dadd+0x292>
   34bc0:	2800      	cmp	r0, #0
   34bc2:	d031      	beq.n	34c28 <__aeabi_dadd+0x208>
   34bc4:	4876      	ldr	r0, [pc, #472]	; (34da0 <__aeabi_dadd+0x380>)
   34bc6:	4286      	cmp	r6, r0
   34bc8:	d0ae      	beq.n	34b28 <__aeabi_dadd+0x108>
   34bca:	2080      	movs	r0, #128	; 0x80
   34bcc:	0400      	lsls	r0, r0, #16
   34bce:	4301      	orrs	r1, r0
   34bd0:	4653      	mov	r3, sl
   34bd2:	2b38      	cmp	r3, #56	; 0x38
   34bd4:	dc00      	bgt.n	34bd8 <__aeabi_dadd+0x1b8>
   34bd6:	e0e9      	b.n	34dac <__aeabi_dadd+0x38c>
   34bd8:	430a      	orrs	r2, r1
   34bda:	1e51      	subs	r1, r2, #1
   34bdc:	418a      	sbcs	r2, r1
   34bde:	2100      	movs	r1, #0
   34be0:	19d2      	adds	r2, r2, r7
   34be2:	42ba      	cmp	r2, r7
   34be4:	41bf      	sbcs	r7, r7
   34be6:	1909      	adds	r1, r1, r4
   34be8:	427c      	negs	r4, r7
   34bea:	0017      	movs	r7, r2
   34bec:	190c      	adds	r4, r1, r4
   34bee:	0223      	lsls	r3, r4, #8
   34bf0:	d5d3      	bpl.n	34b9a <__aeabi_dadd+0x17a>
   34bf2:	4b6b      	ldr	r3, [pc, #428]	; (34da0 <__aeabi_dadd+0x380>)
   34bf4:	3601      	adds	r6, #1
   34bf6:	429e      	cmp	r6, r3
   34bf8:	d100      	bne.n	34bfc <__aeabi_dadd+0x1dc>
   34bfa:	e13a      	b.n	34e72 <__aeabi_dadd+0x452>
   34bfc:	2001      	movs	r0, #1
   34bfe:	4b69      	ldr	r3, [pc, #420]	; (34da4 <__aeabi_dadd+0x384>)
   34c00:	401c      	ands	r4, r3
   34c02:	087b      	lsrs	r3, r7, #1
   34c04:	4007      	ands	r7, r0
   34c06:	431f      	orrs	r7, r3
   34c08:	07e0      	lsls	r0, r4, #31
   34c0a:	4307      	orrs	r7, r0
   34c0c:	0864      	lsrs	r4, r4, #1
   34c0e:	e78b      	b.n	34b28 <__aeabi_dadd+0x108>
   34c10:	0023      	movs	r3, r4
   34c12:	433b      	orrs	r3, r7
   34c14:	d100      	bne.n	34c18 <__aeabi_dadd+0x1f8>
   34c16:	e1cb      	b.n	34fb0 <__aeabi_dadd+0x590>
   34c18:	2280      	movs	r2, #128	; 0x80
   34c1a:	0312      	lsls	r2, r2, #12
   34c1c:	4314      	orrs	r4, r2
   34c1e:	0324      	lsls	r4, r4, #12
   34c20:	0b24      	lsrs	r4, r4, #12
   34c22:	e79e      	b.n	34b62 <__aeabi_dadd+0x142>
   34c24:	002e      	movs	r6, r5
   34c26:	e77f      	b.n	34b28 <__aeabi_dadd+0x108>
   34c28:	0008      	movs	r0, r1
   34c2a:	4310      	orrs	r0, r2
   34c2c:	d100      	bne.n	34c30 <__aeabi_dadd+0x210>
   34c2e:	e0b4      	b.n	34d9a <__aeabi_dadd+0x37a>
   34c30:	1e58      	subs	r0, r3, #1
   34c32:	2800      	cmp	r0, #0
   34c34:	d000      	beq.n	34c38 <__aeabi_dadd+0x218>
   34c36:	e0de      	b.n	34df6 <__aeabi_dadd+0x3d6>
   34c38:	18ba      	adds	r2, r7, r2
   34c3a:	42ba      	cmp	r2, r7
   34c3c:	419b      	sbcs	r3, r3
   34c3e:	1864      	adds	r4, r4, r1
   34c40:	425b      	negs	r3, r3
   34c42:	18e4      	adds	r4, r4, r3
   34c44:	0017      	movs	r7, r2
   34c46:	2601      	movs	r6, #1
   34c48:	0223      	lsls	r3, r4, #8
   34c4a:	d5a6      	bpl.n	34b9a <__aeabi_dadd+0x17a>
   34c4c:	2602      	movs	r6, #2
   34c4e:	e7d5      	b.n	34bfc <__aeabi_dadd+0x1dc>
   34c50:	2d00      	cmp	r5, #0
   34c52:	d16e      	bne.n	34d32 <__aeabi_dadd+0x312>
   34c54:	1c70      	adds	r0, r6, #1
   34c56:	0540      	lsls	r0, r0, #21
   34c58:	0d40      	lsrs	r0, r0, #21
   34c5a:	2801      	cmp	r0, #1
   34c5c:	dc00      	bgt.n	34c60 <__aeabi_dadd+0x240>
   34c5e:	e0f9      	b.n	34e54 <__aeabi_dadd+0x434>
   34c60:	1ab8      	subs	r0, r7, r2
   34c62:	4684      	mov	ip, r0
   34c64:	4287      	cmp	r7, r0
   34c66:	4180      	sbcs	r0, r0
   34c68:	1ae5      	subs	r5, r4, r3
   34c6a:	4240      	negs	r0, r0
   34c6c:	1a2d      	subs	r5, r5, r0
   34c6e:	0228      	lsls	r0, r5, #8
   34c70:	d400      	bmi.n	34c74 <__aeabi_dadd+0x254>
   34c72:	e089      	b.n	34d88 <__aeabi_dadd+0x368>
   34c74:	1bd7      	subs	r7, r2, r7
   34c76:	42ba      	cmp	r2, r7
   34c78:	4192      	sbcs	r2, r2
   34c7a:	1b1c      	subs	r4, r3, r4
   34c7c:	4252      	negs	r2, r2
   34c7e:	1aa5      	subs	r5, r4, r2
   34c80:	46d8      	mov	r8, fp
   34c82:	e729      	b.n	34ad8 <__aeabi_dadd+0xb8>
   34c84:	4645      	mov	r5, r8
   34c86:	2400      	movs	r4, #0
   34c88:	2700      	movs	r7, #0
   34c8a:	e76a      	b.n	34b62 <__aeabi_dadd+0x142>
   34c8c:	4c45      	ldr	r4, [pc, #276]	; (34da4 <__aeabi_dadd+0x384>)
   34c8e:	1af6      	subs	r6, r6, r3
   34c90:	402c      	ands	r4, r5
   34c92:	e749      	b.n	34b28 <__aeabi_dadd+0x108>
   34c94:	003d      	movs	r5, r7
   34c96:	3828      	subs	r0, #40	; 0x28
   34c98:	4085      	lsls	r5, r0
   34c9a:	2700      	movs	r7, #0
   34c9c:	e72e      	b.n	34afc <__aeabi_dadd+0xdc>
   34c9e:	0038      	movs	r0, r7
   34ca0:	f001 fb56 	bl	36350 <__clzsi2>
   34ca4:	3020      	adds	r0, #32
   34ca6:	e71d      	b.n	34ae4 <__aeabi_dadd+0xc4>
   34ca8:	430a      	orrs	r2, r1
   34caa:	1e51      	subs	r1, r2, #1
   34cac:	418a      	sbcs	r2, r1
   34cae:	2100      	movs	r1, #0
   34cb0:	e707      	b.n	34ac2 <__aeabi_dadd+0xa2>
   34cb2:	2b00      	cmp	r3, #0
   34cb4:	d000      	beq.n	34cb8 <__aeabi_dadd+0x298>
   34cb6:	e0f3      	b.n	34ea0 <__aeabi_dadd+0x480>
   34cb8:	1c70      	adds	r0, r6, #1
   34cba:	0543      	lsls	r3, r0, #21
   34cbc:	0d5b      	lsrs	r3, r3, #21
   34cbe:	2b01      	cmp	r3, #1
   34cc0:	dc00      	bgt.n	34cc4 <__aeabi_dadd+0x2a4>
   34cc2:	e0ad      	b.n	34e20 <__aeabi_dadd+0x400>
   34cc4:	4b36      	ldr	r3, [pc, #216]	; (34da0 <__aeabi_dadd+0x380>)
   34cc6:	4298      	cmp	r0, r3
   34cc8:	d100      	bne.n	34ccc <__aeabi_dadd+0x2ac>
   34cca:	e0d1      	b.n	34e70 <__aeabi_dadd+0x450>
   34ccc:	18ba      	adds	r2, r7, r2
   34cce:	42ba      	cmp	r2, r7
   34cd0:	41bf      	sbcs	r7, r7
   34cd2:	1864      	adds	r4, r4, r1
   34cd4:	427f      	negs	r7, r7
   34cd6:	19e4      	adds	r4, r4, r7
   34cd8:	07e7      	lsls	r7, r4, #31
   34cda:	0852      	lsrs	r2, r2, #1
   34cdc:	4317      	orrs	r7, r2
   34cde:	0864      	lsrs	r4, r4, #1
   34ce0:	0006      	movs	r6, r0
   34ce2:	e721      	b.n	34b28 <__aeabi_dadd+0x108>
   34ce4:	482e      	ldr	r0, [pc, #184]	; (34da0 <__aeabi_dadd+0x380>)
   34ce6:	4285      	cmp	r5, r0
   34ce8:	d100      	bne.n	34cec <__aeabi_dadd+0x2cc>
   34cea:	e093      	b.n	34e14 <__aeabi_dadd+0x3f4>
   34cec:	001d      	movs	r5, r3
   34cee:	e6d0      	b.n	34a92 <__aeabi_dadd+0x72>
   34cf0:	0029      	movs	r1, r5
   34cf2:	3e1f      	subs	r6, #31
   34cf4:	40f1      	lsrs	r1, r6
   34cf6:	2b20      	cmp	r3, #32
   34cf8:	d100      	bne.n	34cfc <__aeabi_dadd+0x2dc>
   34cfa:	e08d      	b.n	34e18 <__aeabi_dadd+0x3f8>
   34cfc:	2240      	movs	r2, #64	; 0x40
   34cfe:	1ad3      	subs	r3, r2, r3
   34d00:	409d      	lsls	r5, r3
   34d02:	432f      	orrs	r7, r5
   34d04:	1e7d      	subs	r5, r7, #1
   34d06:	41af      	sbcs	r7, r5
   34d08:	2400      	movs	r4, #0
   34d0a:	430f      	orrs	r7, r1
   34d0c:	2600      	movs	r6, #0
   34d0e:	e744      	b.n	34b9a <__aeabi_dadd+0x17a>
   34d10:	002b      	movs	r3, r5
   34d12:	0008      	movs	r0, r1
   34d14:	3b20      	subs	r3, #32
   34d16:	40d8      	lsrs	r0, r3
   34d18:	0003      	movs	r3, r0
   34d1a:	2d20      	cmp	r5, #32
   34d1c:	d100      	bne.n	34d20 <__aeabi_dadd+0x300>
   34d1e:	e07d      	b.n	34e1c <__aeabi_dadd+0x3fc>
   34d20:	2040      	movs	r0, #64	; 0x40
   34d22:	1b45      	subs	r5, r0, r5
   34d24:	40a9      	lsls	r1, r5
   34d26:	430a      	orrs	r2, r1
   34d28:	1e51      	subs	r1, r2, #1
   34d2a:	418a      	sbcs	r2, r1
   34d2c:	2100      	movs	r1, #0
   34d2e:	431a      	orrs	r2, r3
   34d30:	e6c7      	b.n	34ac2 <__aeabi_dadd+0xa2>
   34d32:	2e00      	cmp	r6, #0
   34d34:	d050      	beq.n	34dd8 <__aeabi_dadd+0x3b8>
   34d36:	4e1a      	ldr	r6, [pc, #104]	; (34da0 <__aeabi_dadd+0x380>)
   34d38:	42b0      	cmp	r0, r6
   34d3a:	d057      	beq.n	34dec <__aeabi_dadd+0x3cc>
   34d3c:	2680      	movs	r6, #128	; 0x80
   34d3e:	426b      	negs	r3, r5
   34d40:	4699      	mov	r9, r3
   34d42:	0436      	lsls	r6, r6, #16
   34d44:	4334      	orrs	r4, r6
   34d46:	464b      	mov	r3, r9
   34d48:	2b38      	cmp	r3, #56	; 0x38
   34d4a:	dd00      	ble.n	34d4e <__aeabi_dadd+0x32e>
   34d4c:	e0d6      	b.n	34efc <__aeabi_dadd+0x4dc>
   34d4e:	2b1f      	cmp	r3, #31
   34d50:	dd00      	ble.n	34d54 <__aeabi_dadd+0x334>
   34d52:	e135      	b.n	34fc0 <__aeabi_dadd+0x5a0>
   34d54:	2620      	movs	r6, #32
   34d56:	1af5      	subs	r5, r6, r3
   34d58:	0026      	movs	r6, r4
   34d5a:	40ae      	lsls	r6, r5
   34d5c:	46b2      	mov	sl, r6
   34d5e:	003e      	movs	r6, r7
   34d60:	40de      	lsrs	r6, r3
   34d62:	46ac      	mov	ip, r5
   34d64:	0035      	movs	r5, r6
   34d66:	4656      	mov	r6, sl
   34d68:	432e      	orrs	r6, r5
   34d6a:	4665      	mov	r5, ip
   34d6c:	40af      	lsls	r7, r5
   34d6e:	1e7d      	subs	r5, r7, #1
   34d70:	41af      	sbcs	r7, r5
   34d72:	40dc      	lsrs	r4, r3
   34d74:	4337      	orrs	r7, r6
   34d76:	1bd7      	subs	r7, r2, r7
   34d78:	42ba      	cmp	r2, r7
   34d7a:	4192      	sbcs	r2, r2
   34d7c:	1b0c      	subs	r4, r1, r4
   34d7e:	4252      	negs	r2, r2
   34d80:	1aa4      	subs	r4, r4, r2
   34d82:	0006      	movs	r6, r0
   34d84:	46d8      	mov	r8, fp
   34d86:	e6a3      	b.n	34ad0 <__aeabi_dadd+0xb0>
   34d88:	4664      	mov	r4, ip
   34d8a:	4667      	mov	r7, ip
   34d8c:	432c      	orrs	r4, r5
   34d8e:	d000      	beq.n	34d92 <__aeabi_dadd+0x372>
   34d90:	e6a2      	b.n	34ad8 <__aeabi_dadd+0xb8>
   34d92:	2500      	movs	r5, #0
   34d94:	2600      	movs	r6, #0
   34d96:	2700      	movs	r7, #0
   34d98:	e706      	b.n	34ba8 <__aeabi_dadd+0x188>
   34d9a:	001e      	movs	r6, r3
   34d9c:	e6c4      	b.n	34b28 <__aeabi_dadd+0x108>
   34d9e:	46c0      	nop			; (mov r8, r8)
   34da0:	000007ff 	.word	0x000007ff
   34da4:	ff7fffff 	.word	0xff7fffff
   34da8:	800fffff 	.word	0x800fffff
   34dac:	2b1f      	cmp	r3, #31
   34dae:	dc63      	bgt.n	34e78 <__aeabi_dadd+0x458>
   34db0:	2020      	movs	r0, #32
   34db2:	1ac3      	subs	r3, r0, r3
   34db4:	0008      	movs	r0, r1
   34db6:	4098      	lsls	r0, r3
   34db8:	469c      	mov	ip, r3
   34dba:	4683      	mov	fp, r0
   34dbc:	4653      	mov	r3, sl
   34dbe:	0010      	movs	r0, r2
   34dc0:	40d8      	lsrs	r0, r3
   34dc2:	0003      	movs	r3, r0
   34dc4:	4658      	mov	r0, fp
   34dc6:	4318      	orrs	r0, r3
   34dc8:	4663      	mov	r3, ip
   34dca:	409a      	lsls	r2, r3
   34dcc:	1e53      	subs	r3, r2, #1
   34dce:	419a      	sbcs	r2, r3
   34dd0:	4653      	mov	r3, sl
   34dd2:	4302      	orrs	r2, r0
   34dd4:	40d9      	lsrs	r1, r3
   34dd6:	e703      	b.n	34be0 <__aeabi_dadd+0x1c0>
   34dd8:	0026      	movs	r6, r4
   34dda:	433e      	orrs	r6, r7
   34ddc:	d006      	beq.n	34dec <__aeabi_dadd+0x3cc>
   34dde:	43eb      	mvns	r3, r5
   34de0:	4699      	mov	r9, r3
   34de2:	2b00      	cmp	r3, #0
   34de4:	d0c7      	beq.n	34d76 <__aeabi_dadd+0x356>
   34de6:	4e94      	ldr	r6, [pc, #592]	; (35038 <__aeabi_dadd+0x618>)
   34de8:	42b0      	cmp	r0, r6
   34dea:	d1ac      	bne.n	34d46 <__aeabi_dadd+0x326>
   34dec:	000c      	movs	r4, r1
   34dee:	0017      	movs	r7, r2
   34df0:	0006      	movs	r6, r0
   34df2:	46d8      	mov	r8, fp
   34df4:	e698      	b.n	34b28 <__aeabi_dadd+0x108>
   34df6:	4b90      	ldr	r3, [pc, #576]	; (35038 <__aeabi_dadd+0x618>)
   34df8:	459a      	cmp	sl, r3
   34dfa:	d00b      	beq.n	34e14 <__aeabi_dadd+0x3f4>
   34dfc:	4682      	mov	sl, r0
   34dfe:	e6e7      	b.n	34bd0 <__aeabi_dadd+0x1b0>
   34e00:	2800      	cmp	r0, #0
   34e02:	d000      	beq.n	34e06 <__aeabi_dadd+0x3e6>
   34e04:	e09e      	b.n	34f44 <__aeabi_dadd+0x524>
   34e06:	0018      	movs	r0, r3
   34e08:	4310      	orrs	r0, r2
   34e0a:	d100      	bne.n	34e0e <__aeabi_dadd+0x3ee>
   34e0c:	e0e9      	b.n	34fe2 <__aeabi_dadd+0x5c2>
   34e0e:	001c      	movs	r4, r3
   34e10:	0017      	movs	r7, r2
   34e12:	46d8      	mov	r8, fp
   34e14:	4e88      	ldr	r6, [pc, #544]	; (35038 <__aeabi_dadd+0x618>)
   34e16:	e687      	b.n	34b28 <__aeabi_dadd+0x108>
   34e18:	2500      	movs	r5, #0
   34e1a:	e772      	b.n	34d02 <__aeabi_dadd+0x2e2>
   34e1c:	2100      	movs	r1, #0
   34e1e:	e782      	b.n	34d26 <__aeabi_dadd+0x306>
   34e20:	0023      	movs	r3, r4
   34e22:	433b      	orrs	r3, r7
   34e24:	2e00      	cmp	r6, #0
   34e26:	d000      	beq.n	34e2a <__aeabi_dadd+0x40a>
   34e28:	e0ab      	b.n	34f82 <__aeabi_dadd+0x562>
   34e2a:	2b00      	cmp	r3, #0
   34e2c:	d100      	bne.n	34e30 <__aeabi_dadd+0x410>
   34e2e:	e0e7      	b.n	35000 <__aeabi_dadd+0x5e0>
   34e30:	000b      	movs	r3, r1
   34e32:	4313      	orrs	r3, r2
   34e34:	d100      	bne.n	34e38 <__aeabi_dadd+0x418>
   34e36:	e677      	b.n	34b28 <__aeabi_dadd+0x108>
   34e38:	18ba      	adds	r2, r7, r2
   34e3a:	42ba      	cmp	r2, r7
   34e3c:	41bf      	sbcs	r7, r7
   34e3e:	1864      	adds	r4, r4, r1
   34e40:	427f      	negs	r7, r7
   34e42:	19e4      	adds	r4, r4, r7
   34e44:	0223      	lsls	r3, r4, #8
   34e46:	d400      	bmi.n	34e4a <__aeabi_dadd+0x42a>
   34e48:	e0f2      	b.n	35030 <__aeabi_dadd+0x610>
   34e4a:	4b7c      	ldr	r3, [pc, #496]	; (3503c <__aeabi_dadd+0x61c>)
   34e4c:	0017      	movs	r7, r2
   34e4e:	401c      	ands	r4, r3
   34e50:	0006      	movs	r6, r0
   34e52:	e669      	b.n	34b28 <__aeabi_dadd+0x108>
   34e54:	0020      	movs	r0, r4
   34e56:	4338      	orrs	r0, r7
   34e58:	2e00      	cmp	r6, #0
   34e5a:	d1d1      	bne.n	34e00 <__aeabi_dadd+0x3e0>
   34e5c:	2800      	cmp	r0, #0
   34e5e:	d15b      	bne.n	34f18 <__aeabi_dadd+0x4f8>
   34e60:	001c      	movs	r4, r3
   34e62:	4314      	orrs	r4, r2
   34e64:	d100      	bne.n	34e68 <__aeabi_dadd+0x448>
   34e66:	e0a8      	b.n	34fba <__aeabi_dadd+0x59a>
   34e68:	001c      	movs	r4, r3
   34e6a:	0017      	movs	r7, r2
   34e6c:	46d8      	mov	r8, fp
   34e6e:	e65b      	b.n	34b28 <__aeabi_dadd+0x108>
   34e70:	0006      	movs	r6, r0
   34e72:	2400      	movs	r4, #0
   34e74:	2700      	movs	r7, #0
   34e76:	e697      	b.n	34ba8 <__aeabi_dadd+0x188>
   34e78:	4650      	mov	r0, sl
   34e7a:	000b      	movs	r3, r1
   34e7c:	3820      	subs	r0, #32
   34e7e:	40c3      	lsrs	r3, r0
   34e80:	4699      	mov	r9, r3
   34e82:	4653      	mov	r3, sl
   34e84:	2b20      	cmp	r3, #32
   34e86:	d100      	bne.n	34e8a <__aeabi_dadd+0x46a>
   34e88:	e095      	b.n	34fb6 <__aeabi_dadd+0x596>
   34e8a:	2340      	movs	r3, #64	; 0x40
   34e8c:	4650      	mov	r0, sl
   34e8e:	1a1b      	subs	r3, r3, r0
   34e90:	4099      	lsls	r1, r3
   34e92:	430a      	orrs	r2, r1
   34e94:	1e51      	subs	r1, r2, #1
   34e96:	418a      	sbcs	r2, r1
   34e98:	464b      	mov	r3, r9
   34e9a:	2100      	movs	r1, #0
   34e9c:	431a      	orrs	r2, r3
   34e9e:	e69f      	b.n	34be0 <__aeabi_dadd+0x1c0>
   34ea0:	2e00      	cmp	r6, #0
   34ea2:	d130      	bne.n	34f06 <__aeabi_dadd+0x4e6>
   34ea4:	0026      	movs	r6, r4
   34ea6:	433e      	orrs	r6, r7
   34ea8:	d067      	beq.n	34f7a <__aeabi_dadd+0x55a>
   34eaa:	43db      	mvns	r3, r3
   34eac:	469a      	mov	sl, r3
   34eae:	2b00      	cmp	r3, #0
   34eb0:	d01c      	beq.n	34eec <__aeabi_dadd+0x4cc>
   34eb2:	4e61      	ldr	r6, [pc, #388]	; (35038 <__aeabi_dadd+0x618>)
   34eb4:	42b0      	cmp	r0, r6
   34eb6:	d060      	beq.n	34f7a <__aeabi_dadd+0x55a>
   34eb8:	4653      	mov	r3, sl
   34eba:	2b38      	cmp	r3, #56	; 0x38
   34ebc:	dd00      	ble.n	34ec0 <__aeabi_dadd+0x4a0>
   34ebe:	e096      	b.n	34fee <__aeabi_dadd+0x5ce>
   34ec0:	2b1f      	cmp	r3, #31
   34ec2:	dd00      	ble.n	34ec6 <__aeabi_dadd+0x4a6>
   34ec4:	e09f      	b.n	35006 <__aeabi_dadd+0x5e6>
   34ec6:	2620      	movs	r6, #32
   34ec8:	1af3      	subs	r3, r6, r3
   34eca:	0026      	movs	r6, r4
   34ecc:	409e      	lsls	r6, r3
   34ece:	469c      	mov	ip, r3
   34ed0:	46b3      	mov	fp, r6
   34ed2:	4653      	mov	r3, sl
   34ed4:	003e      	movs	r6, r7
   34ed6:	40de      	lsrs	r6, r3
   34ed8:	0033      	movs	r3, r6
   34eda:	465e      	mov	r6, fp
   34edc:	431e      	orrs	r6, r3
   34ede:	4663      	mov	r3, ip
   34ee0:	409f      	lsls	r7, r3
   34ee2:	1e7b      	subs	r3, r7, #1
   34ee4:	419f      	sbcs	r7, r3
   34ee6:	4653      	mov	r3, sl
   34ee8:	40dc      	lsrs	r4, r3
   34eea:	4337      	orrs	r7, r6
   34eec:	18bf      	adds	r7, r7, r2
   34eee:	4297      	cmp	r7, r2
   34ef0:	4192      	sbcs	r2, r2
   34ef2:	1864      	adds	r4, r4, r1
   34ef4:	4252      	negs	r2, r2
   34ef6:	18a4      	adds	r4, r4, r2
   34ef8:	0006      	movs	r6, r0
   34efa:	e678      	b.n	34bee <__aeabi_dadd+0x1ce>
   34efc:	4327      	orrs	r7, r4
   34efe:	1e7c      	subs	r4, r7, #1
   34f00:	41a7      	sbcs	r7, r4
   34f02:	2400      	movs	r4, #0
   34f04:	e737      	b.n	34d76 <__aeabi_dadd+0x356>
   34f06:	4e4c      	ldr	r6, [pc, #304]	; (35038 <__aeabi_dadd+0x618>)
   34f08:	42b0      	cmp	r0, r6
   34f0a:	d036      	beq.n	34f7a <__aeabi_dadd+0x55a>
   34f0c:	2680      	movs	r6, #128	; 0x80
   34f0e:	425b      	negs	r3, r3
   34f10:	0436      	lsls	r6, r6, #16
   34f12:	469a      	mov	sl, r3
   34f14:	4334      	orrs	r4, r6
   34f16:	e7cf      	b.n	34eb8 <__aeabi_dadd+0x498>
   34f18:	0018      	movs	r0, r3
   34f1a:	4310      	orrs	r0, r2
   34f1c:	d100      	bne.n	34f20 <__aeabi_dadd+0x500>
   34f1e:	e603      	b.n	34b28 <__aeabi_dadd+0x108>
   34f20:	1ab8      	subs	r0, r7, r2
   34f22:	4684      	mov	ip, r0
   34f24:	4567      	cmp	r7, ip
   34f26:	41ad      	sbcs	r5, r5
   34f28:	1ae0      	subs	r0, r4, r3
   34f2a:	426d      	negs	r5, r5
   34f2c:	1b40      	subs	r0, r0, r5
   34f2e:	0205      	lsls	r5, r0, #8
   34f30:	d400      	bmi.n	34f34 <__aeabi_dadd+0x514>
   34f32:	e62c      	b.n	34b8e <__aeabi_dadd+0x16e>
   34f34:	1bd7      	subs	r7, r2, r7
   34f36:	42ba      	cmp	r2, r7
   34f38:	4192      	sbcs	r2, r2
   34f3a:	1b1c      	subs	r4, r3, r4
   34f3c:	4252      	negs	r2, r2
   34f3e:	1aa4      	subs	r4, r4, r2
   34f40:	46d8      	mov	r8, fp
   34f42:	e5f1      	b.n	34b28 <__aeabi_dadd+0x108>
   34f44:	0018      	movs	r0, r3
   34f46:	4310      	orrs	r0, r2
   34f48:	d100      	bne.n	34f4c <__aeabi_dadd+0x52c>
   34f4a:	e763      	b.n	34e14 <__aeabi_dadd+0x3f4>
   34f4c:	08f8      	lsrs	r0, r7, #3
   34f4e:	0767      	lsls	r7, r4, #29
   34f50:	4307      	orrs	r7, r0
   34f52:	2080      	movs	r0, #128	; 0x80
   34f54:	08e4      	lsrs	r4, r4, #3
   34f56:	0300      	lsls	r0, r0, #12
   34f58:	4204      	tst	r4, r0
   34f5a:	d008      	beq.n	34f6e <__aeabi_dadd+0x54e>
   34f5c:	08dd      	lsrs	r5, r3, #3
   34f5e:	4205      	tst	r5, r0
   34f60:	d105      	bne.n	34f6e <__aeabi_dadd+0x54e>
   34f62:	08d2      	lsrs	r2, r2, #3
   34f64:	0759      	lsls	r1, r3, #29
   34f66:	4311      	orrs	r1, r2
   34f68:	000f      	movs	r7, r1
   34f6a:	002c      	movs	r4, r5
   34f6c:	46d8      	mov	r8, fp
   34f6e:	0f7b      	lsrs	r3, r7, #29
   34f70:	00e4      	lsls	r4, r4, #3
   34f72:	431c      	orrs	r4, r3
   34f74:	00ff      	lsls	r7, r7, #3
   34f76:	4e30      	ldr	r6, [pc, #192]	; (35038 <__aeabi_dadd+0x618>)
   34f78:	e5d6      	b.n	34b28 <__aeabi_dadd+0x108>
   34f7a:	000c      	movs	r4, r1
   34f7c:	0017      	movs	r7, r2
   34f7e:	0006      	movs	r6, r0
   34f80:	e5d2      	b.n	34b28 <__aeabi_dadd+0x108>
   34f82:	2b00      	cmp	r3, #0
   34f84:	d038      	beq.n	34ff8 <__aeabi_dadd+0x5d8>
   34f86:	000b      	movs	r3, r1
   34f88:	4313      	orrs	r3, r2
   34f8a:	d100      	bne.n	34f8e <__aeabi_dadd+0x56e>
   34f8c:	e742      	b.n	34e14 <__aeabi_dadd+0x3f4>
   34f8e:	08f8      	lsrs	r0, r7, #3
   34f90:	0767      	lsls	r7, r4, #29
   34f92:	4307      	orrs	r7, r0
   34f94:	2080      	movs	r0, #128	; 0x80
   34f96:	08e4      	lsrs	r4, r4, #3
   34f98:	0300      	lsls	r0, r0, #12
   34f9a:	4204      	tst	r4, r0
   34f9c:	d0e7      	beq.n	34f6e <__aeabi_dadd+0x54e>
   34f9e:	08cb      	lsrs	r3, r1, #3
   34fa0:	4203      	tst	r3, r0
   34fa2:	d1e4      	bne.n	34f6e <__aeabi_dadd+0x54e>
   34fa4:	08d2      	lsrs	r2, r2, #3
   34fa6:	0749      	lsls	r1, r1, #29
   34fa8:	4311      	orrs	r1, r2
   34faa:	000f      	movs	r7, r1
   34fac:	001c      	movs	r4, r3
   34fae:	e7de      	b.n	34f6e <__aeabi_dadd+0x54e>
   34fb0:	2700      	movs	r7, #0
   34fb2:	2400      	movs	r4, #0
   34fb4:	e5d5      	b.n	34b62 <__aeabi_dadd+0x142>
   34fb6:	2100      	movs	r1, #0
   34fb8:	e76b      	b.n	34e92 <__aeabi_dadd+0x472>
   34fba:	2500      	movs	r5, #0
   34fbc:	2700      	movs	r7, #0
   34fbe:	e5f3      	b.n	34ba8 <__aeabi_dadd+0x188>
   34fc0:	464e      	mov	r6, r9
   34fc2:	0025      	movs	r5, r4
   34fc4:	3e20      	subs	r6, #32
   34fc6:	40f5      	lsrs	r5, r6
   34fc8:	464b      	mov	r3, r9
   34fca:	002e      	movs	r6, r5
   34fcc:	2b20      	cmp	r3, #32
   34fce:	d02d      	beq.n	3502c <__aeabi_dadd+0x60c>
   34fd0:	2540      	movs	r5, #64	; 0x40
   34fd2:	1aed      	subs	r5, r5, r3
   34fd4:	40ac      	lsls	r4, r5
   34fd6:	4327      	orrs	r7, r4
   34fd8:	1e7c      	subs	r4, r7, #1
   34fda:	41a7      	sbcs	r7, r4
   34fdc:	2400      	movs	r4, #0
   34fde:	4337      	orrs	r7, r6
   34fe0:	e6c9      	b.n	34d76 <__aeabi_dadd+0x356>
   34fe2:	2480      	movs	r4, #128	; 0x80
   34fe4:	2500      	movs	r5, #0
   34fe6:	0324      	lsls	r4, r4, #12
   34fe8:	4e13      	ldr	r6, [pc, #76]	; (35038 <__aeabi_dadd+0x618>)
   34fea:	2700      	movs	r7, #0
   34fec:	e5dc      	b.n	34ba8 <__aeabi_dadd+0x188>
   34fee:	4327      	orrs	r7, r4
   34ff0:	1e7c      	subs	r4, r7, #1
   34ff2:	41a7      	sbcs	r7, r4
   34ff4:	2400      	movs	r4, #0
   34ff6:	e779      	b.n	34eec <__aeabi_dadd+0x4cc>
   34ff8:	000c      	movs	r4, r1
   34ffa:	0017      	movs	r7, r2
   34ffc:	4e0e      	ldr	r6, [pc, #56]	; (35038 <__aeabi_dadd+0x618>)
   34ffe:	e593      	b.n	34b28 <__aeabi_dadd+0x108>
   35000:	000c      	movs	r4, r1
   35002:	0017      	movs	r7, r2
   35004:	e590      	b.n	34b28 <__aeabi_dadd+0x108>
   35006:	4656      	mov	r6, sl
   35008:	0023      	movs	r3, r4
   3500a:	3e20      	subs	r6, #32
   3500c:	40f3      	lsrs	r3, r6
   3500e:	4699      	mov	r9, r3
   35010:	4653      	mov	r3, sl
   35012:	2b20      	cmp	r3, #32
   35014:	d00e      	beq.n	35034 <__aeabi_dadd+0x614>
   35016:	2340      	movs	r3, #64	; 0x40
   35018:	4656      	mov	r6, sl
   3501a:	1b9b      	subs	r3, r3, r6
   3501c:	409c      	lsls	r4, r3
   3501e:	4327      	orrs	r7, r4
   35020:	1e7c      	subs	r4, r7, #1
   35022:	41a7      	sbcs	r7, r4
   35024:	464b      	mov	r3, r9
   35026:	2400      	movs	r4, #0
   35028:	431f      	orrs	r7, r3
   3502a:	e75f      	b.n	34eec <__aeabi_dadd+0x4cc>
   3502c:	2400      	movs	r4, #0
   3502e:	e7d2      	b.n	34fd6 <__aeabi_dadd+0x5b6>
   35030:	0017      	movs	r7, r2
   35032:	e5b2      	b.n	34b9a <__aeabi_dadd+0x17a>
   35034:	2400      	movs	r4, #0
   35036:	e7f2      	b.n	3501e <__aeabi_dadd+0x5fe>
   35038:	000007ff 	.word	0x000007ff
   3503c:	ff7fffff 	.word	0xff7fffff

00035040 <__aeabi_ddiv>:
   35040:	b5f0      	push	{r4, r5, r6, r7, lr}
   35042:	4657      	mov	r7, sl
   35044:	4645      	mov	r5, r8
   35046:	46de      	mov	lr, fp
   35048:	464e      	mov	r6, r9
   3504a:	b5e0      	push	{r5, r6, r7, lr}
   3504c:	004c      	lsls	r4, r1, #1
   3504e:	030e      	lsls	r6, r1, #12
   35050:	b087      	sub	sp, #28
   35052:	4683      	mov	fp, r0
   35054:	4692      	mov	sl, r2
   35056:	001d      	movs	r5, r3
   35058:	4680      	mov	r8, r0
   3505a:	0b36      	lsrs	r6, r6, #12
   3505c:	0d64      	lsrs	r4, r4, #21
   3505e:	0fcf      	lsrs	r7, r1, #31
   35060:	2c00      	cmp	r4, #0
   35062:	d04f      	beq.n	35104 <__aeabi_ddiv+0xc4>
   35064:	4b6f      	ldr	r3, [pc, #444]	; (35224 <__aeabi_ddiv+0x1e4>)
   35066:	429c      	cmp	r4, r3
   35068:	d035      	beq.n	350d6 <__aeabi_ddiv+0x96>
   3506a:	2380      	movs	r3, #128	; 0x80
   3506c:	0f42      	lsrs	r2, r0, #29
   3506e:	041b      	lsls	r3, r3, #16
   35070:	00f6      	lsls	r6, r6, #3
   35072:	4313      	orrs	r3, r2
   35074:	4333      	orrs	r3, r6
   35076:	4699      	mov	r9, r3
   35078:	00c3      	lsls	r3, r0, #3
   3507a:	4698      	mov	r8, r3
   3507c:	4b6a      	ldr	r3, [pc, #424]	; (35228 <__aeabi_ddiv+0x1e8>)
   3507e:	2600      	movs	r6, #0
   35080:	469c      	mov	ip, r3
   35082:	2300      	movs	r3, #0
   35084:	4464      	add	r4, ip
   35086:	9303      	str	r3, [sp, #12]
   35088:	032b      	lsls	r3, r5, #12
   3508a:	0b1b      	lsrs	r3, r3, #12
   3508c:	469b      	mov	fp, r3
   3508e:	006b      	lsls	r3, r5, #1
   35090:	0fed      	lsrs	r5, r5, #31
   35092:	4650      	mov	r0, sl
   35094:	0d5b      	lsrs	r3, r3, #21
   35096:	9501      	str	r5, [sp, #4]
   35098:	d05e      	beq.n	35158 <__aeabi_ddiv+0x118>
   3509a:	4a62      	ldr	r2, [pc, #392]	; (35224 <__aeabi_ddiv+0x1e4>)
   3509c:	4293      	cmp	r3, r2
   3509e:	d053      	beq.n	35148 <__aeabi_ddiv+0x108>
   350a0:	465a      	mov	r2, fp
   350a2:	00d1      	lsls	r1, r2, #3
   350a4:	2280      	movs	r2, #128	; 0x80
   350a6:	0f40      	lsrs	r0, r0, #29
   350a8:	0412      	lsls	r2, r2, #16
   350aa:	4302      	orrs	r2, r0
   350ac:	430a      	orrs	r2, r1
   350ae:	4693      	mov	fp, r2
   350b0:	4652      	mov	r2, sl
   350b2:	00d1      	lsls	r1, r2, #3
   350b4:	4a5c      	ldr	r2, [pc, #368]	; (35228 <__aeabi_ddiv+0x1e8>)
   350b6:	4694      	mov	ip, r2
   350b8:	2200      	movs	r2, #0
   350ba:	4463      	add	r3, ip
   350bc:	0038      	movs	r0, r7
   350be:	4068      	eors	r0, r5
   350c0:	4684      	mov	ip, r0
   350c2:	9002      	str	r0, [sp, #8]
   350c4:	1ae4      	subs	r4, r4, r3
   350c6:	4316      	orrs	r6, r2
   350c8:	2e0f      	cmp	r6, #15
   350ca:	d900      	bls.n	350ce <__aeabi_ddiv+0x8e>
   350cc:	e0b4      	b.n	35238 <__aeabi_ddiv+0x1f8>
   350ce:	4b57      	ldr	r3, [pc, #348]	; (3522c <__aeabi_ddiv+0x1ec>)
   350d0:	00b6      	lsls	r6, r6, #2
   350d2:	599b      	ldr	r3, [r3, r6]
   350d4:	469f      	mov	pc, r3
   350d6:	0003      	movs	r3, r0
   350d8:	4333      	orrs	r3, r6
   350da:	4699      	mov	r9, r3
   350dc:	d16c      	bne.n	351b8 <__aeabi_ddiv+0x178>
   350de:	2300      	movs	r3, #0
   350e0:	4698      	mov	r8, r3
   350e2:	3302      	adds	r3, #2
   350e4:	2608      	movs	r6, #8
   350e6:	9303      	str	r3, [sp, #12]
   350e8:	e7ce      	b.n	35088 <__aeabi_ddiv+0x48>
   350ea:	46cb      	mov	fp, r9
   350ec:	4641      	mov	r1, r8
   350ee:	9a03      	ldr	r2, [sp, #12]
   350f0:	9701      	str	r7, [sp, #4]
   350f2:	2a02      	cmp	r2, #2
   350f4:	d165      	bne.n	351c2 <__aeabi_ddiv+0x182>
   350f6:	9b01      	ldr	r3, [sp, #4]
   350f8:	4c4a      	ldr	r4, [pc, #296]	; (35224 <__aeabi_ddiv+0x1e4>)
   350fa:	469c      	mov	ip, r3
   350fc:	2300      	movs	r3, #0
   350fe:	2200      	movs	r2, #0
   35100:	4698      	mov	r8, r3
   35102:	e06b      	b.n	351dc <__aeabi_ddiv+0x19c>
   35104:	0003      	movs	r3, r0
   35106:	4333      	orrs	r3, r6
   35108:	4699      	mov	r9, r3
   3510a:	d04e      	beq.n	351aa <__aeabi_ddiv+0x16a>
   3510c:	2e00      	cmp	r6, #0
   3510e:	d100      	bne.n	35112 <__aeabi_ddiv+0xd2>
   35110:	e1bc      	b.n	3548c <__aeabi_ddiv+0x44c>
   35112:	0030      	movs	r0, r6
   35114:	f001 f91c 	bl	36350 <__clzsi2>
   35118:	0003      	movs	r3, r0
   3511a:	3b0b      	subs	r3, #11
   3511c:	2b1c      	cmp	r3, #28
   3511e:	dd00      	ble.n	35122 <__aeabi_ddiv+0xe2>
   35120:	e1ac      	b.n	3547c <__aeabi_ddiv+0x43c>
   35122:	221d      	movs	r2, #29
   35124:	1ad3      	subs	r3, r2, r3
   35126:	465a      	mov	r2, fp
   35128:	0001      	movs	r1, r0
   3512a:	40da      	lsrs	r2, r3
   3512c:	3908      	subs	r1, #8
   3512e:	408e      	lsls	r6, r1
   35130:	0013      	movs	r3, r2
   35132:	4333      	orrs	r3, r6
   35134:	4699      	mov	r9, r3
   35136:	465b      	mov	r3, fp
   35138:	408b      	lsls	r3, r1
   3513a:	4698      	mov	r8, r3
   3513c:	2300      	movs	r3, #0
   3513e:	4c3c      	ldr	r4, [pc, #240]	; (35230 <__aeabi_ddiv+0x1f0>)
   35140:	2600      	movs	r6, #0
   35142:	1a24      	subs	r4, r4, r0
   35144:	9303      	str	r3, [sp, #12]
   35146:	e79f      	b.n	35088 <__aeabi_ddiv+0x48>
   35148:	4651      	mov	r1, sl
   3514a:	465a      	mov	r2, fp
   3514c:	4311      	orrs	r1, r2
   3514e:	d129      	bne.n	351a4 <__aeabi_ddiv+0x164>
   35150:	2200      	movs	r2, #0
   35152:	4693      	mov	fp, r2
   35154:	3202      	adds	r2, #2
   35156:	e7b1      	b.n	350bc <__aeabi_ddiv+0x7c>
   35158:	4659      	mov	r1, fp
   3515a:	4301      	orrs	r1, r0
   3515c:	d01e      	beq.n	3519c <__aeabi_ddiv+0x15c>
   3515e:	465b      	mov	r3, fp
   35160:	2b00      	cmp	r3, #0
   35162:	d100      	bne.n	35166 <__aeabi_ddiv+0x126>
   35164:	e19e      	b.n	354a4 <__aeabi_ddiv+0x464>
   35166:	4658      	mov	r0, fp
   35168:	f001 f8f2 	bl	36350 <__clzsi2>
   3516c:	0003      	movs	r3, r0
   3516e:	3b0b      	subs	r3, #11
   35170:	2b1c      	cmp	r3, #28
   35172:	dd00      	ble.n	35176 <__aeabi_ddiv+0x136>
   35174:	e18f      	b.n	35496 <__aeabi_ddiv+0x456>
   35176:	0002      	movs	r2, r0
   35178:	4659      	mov	r1, fp
   3517a:	3a08      	subs	r2, #8
   3517c:	4091      	lsls	r1, r2
   3517e:	468b      	mov	fp, r1
   35180:	211d      	movs	r1, #29
   35182:	1acb      	subs	r3, r1, r3
   35184:	4651      	mov	r1, sl
   35186:	40d9      	lsrs	r1, r3
   35188:	000b      	movs	r3, r1
   3518a:	4659      	mov	r1, fp
   3518c:	430b      	orrs	r3, r1
   3518e:	4651      	mov	r1, sl
   35190:	469b      	mov	fp, r3
   35192:	4091      	lsls	r1, r2
   35194:	4b26      	ldr	r3, [pc, #152]	; (35230 <__aeabi_ddiv+0x1f0>)
   35196:	2200      	movs	r2, #0
   35198:	1a1b      	subs	r3, r3, r0
   3519a:	e78f      	b.n	350bc <__aeabi_ddiv+0x7c>
   3519c:	2300      	movs	r3, #0
   3519e:	2201      	movs	r2, #1
   351a0:	469b      	mov	fp, r3
   351a2:	e78b      	b.n	350bc <__aeabi_ddiv+0x7c>
   351a4:	4651      	mov	r1, sl
   351a6:	2203      	movs	r2, #3
   351a8:	e788      	b.n	350bc <__aeabi_ddiv+0x7c>
   351aa:	2300      	movs	r3, #0
   351ac:	4698      	mov	r8, r3
   351ae:	3301      	adds	r3, #1
   351b0:	2604      	movs	r6, #4
   351b2:	2400      	movs	r4, #0
   351b4:	9303      	str	r3, [sp, #12]
   351b6:	e767      	b.n	35088 <__aeabi_ddiv+0x48>
   351b8:	2303      	movs	r3, #3
   351ba:	46b1      	mov	r9, r6
   351bc:	9303      	str	r3, [sp, #12]
   351be:	260c      	movs	r6, #12
   351c0:	e762      	b.n	35088 <__aeabi_ddiv+0x48>
   351c2:	2a03      	cmp	r2, #3
   351c4:	d100      	bne.n	351c8 <__aeabi_ddiv+0x188>
   351c6:	e25c      	b.n	35682 <__aeabi_ddiv+0x642>
   351c8:	9b01      	ldr	r3, [sp, #4]
   351ca:	2a01      	cmp	r2, #1
   351cc:	d000      	beq.n	351d0 <__aeabi_ddiv+0x190>
   351ce:	e1e4      	b.n	3559a <__aeabi_ddiv+0x55a>
   351d0:	4013      	ands	r3, r2
   351d2:	469c      	mov	ip, r3
   351d4:	2300      	movs	r3, #0
   351d6:	2400      	movs	r4, #0
   351d8:	2200      	movs	r2, #0
   351da:	4698      	mov	r8, r3
   351dc:	2100      	movs	r1, #0
   351de:	0312      	lsls	r2, r2, #12
   351e0:	0b13      	lsrs	r3, r2, #12
   351e2:	0d0a      	lsrs	r2, r1, #20
   351e4:	0512      	lsls	r2, r2, #20
   351e6:	431a      	orrs	r2, r3
   351e8:	0523      	lsls	r3, r4, #20
   351ea:	4c12      	ldr	r4, [pc, #72]	; (35234 <__aeabi_ddiv+0x1f4>)
   351ec:	4640      	mov	r0, r8
   351ee:	4022      	ands	r2, r4
   351f0:	4313      	orrs	r3, r2
   351f2:	4662      	mov	r2, ip
   351f4:	005b      	lsls	r3, r3, #1
   351f6:	07d2      	lsls	r2, r2, #31
   351f8:	085b      	lsrs	r3, r3, #1
   351fa:	4313      	orrs	r3, r2
   351fc:	0019      	movs	r1, r3
   351fe:	b007      	add	sp, #28
   35200:	bc3c      	pop	{r2, r3, r4, r5}
   35202:	4690      	mov	r8, r2
   35204:	4699      	mov	r9, r3
   35206:	46a2      	mov	sl, r4
   35208:	46ab      	mov	fp, r5
   3520a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3520c:	2300      	movs	r3, #0
   3520e:	2280      	movs	r2, #128	; 0x80
   35210:	469c      	mov	ip, r3
   35212:	0312      	lsls	r2, r2, #12
   35214:	4698      	mov	r8, r3
   35216:	4c03      	ldr	r4, [pc, #12]	; (35224 <__aeabi_ddiv+0x1e4>)
   35218:	e7e0      	b.n	351dc <__aeabi_ddiv+0x19c>
   3521a:	2300      	movs	r3, #0
   3521c:	4c01      	ldr	r4, [pc, #4]	; (35224 <__aeabi_ddiv+0x1e4>)
   3521e:	2200      	movs	r2, #0
   35220:	4698      	mov	r8, r3
   35222:	e7db      	b.n	351dc <__aeabi_ddiv+0x19c>
   35224:	000007ff 	.word	0x000007ff
   35228:	fffffc01 	.word	0xfffffc01
   3522c:	0003bfe4 	.word	0x0003bfe4
   35230:	fffffc0d 	.word	0xfffffc0d
   35234:	800fffff 	.word	0x800fffff
   35238:	45d9      	cmp	r9, fp
   3523a:	d900      	bls.n	3523e <__aeabi_ddiv+0x1fe>
   3523c:	e139      	b.n	354b2 <__aeabi_ddiv+0x472>
   3523e:	d100      	bne.n	35242 <__aeabi_ddiv+0x202>
   35240:	e134      	b.n	354ac <__aeabi_ddiv+0x46c>
   35242:	2300      	movs	r3, #0
   35244:	4646      	mov	r6, r8
   35246:	464d      	mov	r5, r9
   35248:	469a      	mov	sl, r3
   3524a:	3c01      	subs	r4, #1
   3524c:	465b      	mov	r3, fp
   3524e:	0e0a      	lsrs	r2, r1, #24
   35250:	021b      	lsls	r3, r3, #8
   35252:	431a      	orrs	r2, r3
   35254:	020b      	lsls	r3, r1, #8
   35256:	0c17      	lsrs	r7, r2, #16
   35258:	9303      	str	r3, [sp, #12]
   3525a:	0413      	lsls	r3, r2, #16
   3525c:	0c1b      	lsrs	r3, r3, #16
   3525e:	0039      	movs	r1, r7
   35260:	0028      	movs	r0, r5
   35262:	4690      	mov	r8, r2
   35264:	9301      	str	r3, [sp, #4]
   35266:	f7fe fc35 	bl	33ad4 <__udivsi3>
   3526a:	0002      	movs	r2, r0
   3526c:	9b01      	ldr	r3, [sp, #4]
   3526e:	4683      	mov	fp, r0
   35270:	435a      	muls	r2, r3
   35272:	0028      	movs	r0, r5
   35274:	0039      	movs	r1, r7
   35276:	4691      	mov	r9, r2
   35278:	f7fe fcb2 	bl	33be0 <__aeabi_uidivmod>
   3527c:	0c35      	lsrs	r5, r6, #16
   3527e:	0409      	lsls	r1, r1, #16
   35280:	430d      	orrs	r5, r1
   35282:	45a9      	cmp	r9, r5
   35284:	d90d      	bls.n	352a2 <__aeabi_ddiv+0x262>
   35286:	465b      	mov	r3, fp
   35288:	4445      	add	r5, r8
   3528a:	3b01      	subs	r3, #1
   3528c:	45a8      	cmp	r8, r5
   3528e:	d900      	bls.n	35292 <__aeabi_ddiv+0x252>
   35290:	e13a      	b.n	35508 <__aeabi_ddiv+0x4c8>
   35292:	45a9      	cmp	r9, r5
   35294:	d800      	bhi.n	35298 <__aeabi_ddiv+0x258>
   35296:	e137      	b.n	35508 <__aeabi_ddiv+0x4c8>
   35298:	2302      	movs	r3, #2
   3529a:	425b      	negs	r3, r3
   3529c:	469c      	mov	ip, r3
   3529e:	4445      	add	r5, r8
   352a0:	44e3      	add	fp, ip
   352a2:	464b      	mov	r3, r9
   352a4:	1aeb      	subs	r3, r5, r3
   352a6:	0039      	movs	r1, r7
   352a8:	0018      	movs	r0, r3
   352aa:	9304      	str	r3, [sp, #16]
   352ac:	f7fe fc12 	bl	33ad4 <__udivsi3>
   352b0:	9b01      	ldr	r3, [sp, #4]
   352b2:	0005      	movs	r5, r0
   352b4:	4343      	muls	r3, r0
   352b6:	0039      	movs	r1, r7
   352b8:	9804      	ldr	r0, [sp, #16]
   352ba:	4699      	mov	r9, r3
   352bc:	f7fe fc90 	bl	33be0 <__aeabi_uidivmod>
   352c0:	0433      	lsls	r3, r6, #16
   352c2:	0409      	lsls	r1, r1, #16
   352c4:	0c1b      	lsrs	r3, r3, #16
   352c6:	430b      	orrs	r3, r1
   352c8:	4599      	cmp	r9, r3
   352ca:	d909      	bls.n	352e0 <__aeabi_ddiv+0x2a0>
   352cc:	4443      	add	r3, r8
   352ce:	1e6a      	subs	r2, r5, #1
   352d0:	4598      	cmp	r8, r3
   352d2:	d900      	bls.n	352d6 <__aeabi_ddiv+0x296>
   352d4:	e11a      	b.n	3550c <__aeabi_ddiv+0x4cc>
   352d6:	4599      	cmp	r9, r3
   352d8:	d800      	bhi.n	352dc <__aeabi_ddiv+0x29c>
   352da:	e117      	b.n	3550c <__aeabi_ddiv+0x4cc>
   352dc:	3d02      	subs	r5, #2
   352de:	4443      	add	r3, r8
   352e0:	464a      	mov	r2, r9
   352e2:	1a9b      	subs	r3, r3, r2
   352e4:	465a      	mov	r2, fp
   352e6:	0412      	lsls	r2, r2, #16
   352e8:	432a      	orrs	r2, r5
   352ea:	9903      	ldr	r1, [sp, #12]
   352ec:	4693      	mov	fp, r2
   352ee:	0c10      	lsrs	r0, r2, #16
   352f0:	0c0a      	lsrs	r2, r1, #16
   352f2:	4691      	mov	r9, r2
   352f4:	0409      	lsls	r1, r1, #16
   352f6:	465a      	mov	r2, fp
   352f8:	0c09      	lsrs	r1, r1, #16
   352fa:	464e      	mov	r6, r9
   352fc:	000d      	movs	r5, r1
   352fe:	0412      	lsls	r2, r2, #16
   35300:	0c12      	lsrs	r2, r2, #16
   35302:	4345      	muls	r5, r0
   35304:	9105      	str	r1, [sp, #20]
   35306:	4351      	muls	r1, r2
   35308:	4372      	muls	r2, r6
   3530a:	4370      	muls	r0, r6
   3530c:	1952      	adds	r2, r2, r5
   3530e:	0c0e      	lsrs	r6, r1, #16
   35310:	18b2      	adds	r2, r6, r2
   35312:	4295      	cmp	r5, r2
   35314:	d903      	bls.n	3531e <__aeabi_ddiv+0x2de>
   35316:	2580      	movs	r5, #128	; 0x80
   35318:	026d      	lsls	r5, r5, #9
   3531a:	46ac      	mov	ip, r5
   3531c:	4460      	add	r0, ip
   3531e:	0c15      	lsrs	r5, r2, #16
   35320:	0409      	lsls	r1, r1, #16
   35322:	0412      	lsls	r2, r2, #16
   35324:	0c09      	lsrs	r1, r1, #16
   35326:	1828      	adds	r0, r5, r0
   35328:	1852      	adds	r2, r2, r1
   3532a:	4283      	cmp	r3, r0
   3532c:	d200      	bcs.n	35330 <__aeabi_ddiv+0x2f0>
   3532e:	e0ce      	b.n	354ce <__aeabi_ddiv+0x48e>
   35330:	d100      	bne.n	35334 <__aeabi_ddiv+0x2f4>
   35332:	e0c8      	b.n	354c6 <__aeabi_ddiv+0x486>
   35334:	1a1d      	subs	r5, r3, r0
   35336:	4653      	mov	r3, sl
   35338:	1a9e      	subs	r6, r3, r2
   3533a:	45b2      	cmp	sl, r6
   3533c:	4192      	sbcs	r2, r2
   3533e:	4252      	negs	r2, r2
   35340:	1aab      	subs	r3, r5, r2
   35342:	469a      	mov	sl, r3
   35344:	4598      	cmp	r8, r3
   35346:	d100      	bne.n	3534a <__aeabi_ddiv+0x30a>
   35348:	e117      	b.n	3557a <__aeabi_ddiv+0x53a>
   3534a:	0039      	movs	r1, r7
   3534c:	0018      	movs	r0, r3
   3534e:	f7fe fbc1 	bl	33ad4 <__udivsi3>
   35352:	9b01      	ldr	r3, [sp, #4]
   35354:	0005      	movs	r5, r0
   35356:	4343      	muls	r3, r0
   35358:	0039      	movs	r1, r7
   3535a:	4650      	mov	r0, sl
   3535c:	9304      	str	r3, [sp, #16]
   3535e:	f7fe fc3f 	bl	33be0 <__aeabi_uidivmod>
   35362:	9804      	ldr	r0, [sp, #16]
   35364:	040b      	lsls	r3, r1, #16
   35366:	0c31      	lsrs	r1, r6, #16
   35368:	4319      	orrs	r1, r3
   3536a:	4288      	cmp	r0, r1
   3536c:	d909      	bls.n	35382 <__aeabi_ddiv+0x342>
   3536e:	4441      	add	r1, r8
   35370:	1e6b      	subs	r3, r5, #1
   35372:	4588      	cmp	r8, r1
   35374:	d900      	bls.n	35378 <__aeabi_ddiv+0x338>
   35376:	e107      	b.n	35588 <__aeabi_ddiv+0x548>
   35378:	4288      	cmp	r0, r1
   3537a:	d800      	bhi.n	3537e <__aeabi_ddiv+0x33e>
   3537c:	e104      	b.n	35588 <__aeabi_ddiv+0x548>
   3537e:	3d02      	subs	r5, #2
   35380:	4441      	add	r1, r8
   35382:	9b04      	ldr	r3, [sp, #16]
   35384:	1acb      	subs	r3, r1, r3
   35386:	0018      	movs	r0, r3
   35388:	0039      	movs	r1, r7
   3538a:	9304      	str	r3, [sp, #16]
   3538c:	f7fe fba2 	bl	33ad4 <__udivsi3>
   35390:	9b01      	ldr	r3, [sp, #4]
   35392:	4682      	mov	sl, r0
   35394:	4343      	muls	r3, r0
   35396:	0039      	movs	r1, r7
   35398:	9804      	ldr	r0, [sp, #16]
   3539a:	9301      	str	r3, [sp, #4]
   3539c:	f7fe fc20 	bl	33be0 <__aeabi_uidivmod>
   353a0:	9801      	ldr	r0, [sp, #4]
   353a2:	040b      	lsls	r3, r1, #16
   353a4:	0431      	lsls	r1, r6, #16
   353a6:	0c09      	lsrs	r1, r1, #16
   353a8:	4319      	orrs	r1, r3
   353aa:	4288      	cmp	r0, r1
   353ac:	d90d      	bls.n	353ca <__aeabi_ddiv+0x38a>
   353ae:	4653      	mov	r3, sl
   353b0:	4441      	add	r1, r8
   353b2:	3b01      	subs	r3, #1
   353b4:	4588      	cmp	r8, r1
   353b6:	d900      	bls.n	353ba <__aeabi_ddiv+0x37a>
   353b8:	e0e8      	b.n	3558c <__aeabi_ddiv+0x54c>
   353ba:	4288      	cmp	r0, r1
   353bc:	d800      	bhi.n	353c0 <__aeabi_ddiv+0x380>
   353be:	e0e5      	b.n	3558c <__aeabi_ddiv+0x54c>
   353c0:	2302      	movs	r3, #2
   353c2:	425b      	negs	r3, r3
   353c4:	469c      	mov	ip, r3
   353c6:	4441      	add	r1, r8
   353c8:	44e2      	add	sl, ip
   353ca:	9b01      	ldr	r3, [sp, #4]
   353cc:	042d      	lsls	r5, r5, #16
   353ce:	1ace      	subs	r6, r1, r3
   353d0:	4651      	mov	r1, sl
   353d2:	4329      	orrs	r1, r5
   353d4:	9d05      	ldr	r5, [sp, #20]
   353d6:	464f      	mov	r7, r9
   353d8:	002a      	movs	r2, r5
   353da:	040b      	lsls	r3, r1, #16
   353dc:	0c08      	lsrs	r0, r1, #16
   353de:	0c1b      	lsrs	r3, r3, #16
   353e0:	435a      	muls	r2, r3
   353e2:	4345      	muls	r5, r0
   353e4:	437b      	muls	r3, r7
   353e6:	4378      	muls	r0, r7
   353e8:	195b      	adds	r3, r3, r5
   353ea:	0c17      	lsrs	r7, r2, #16
   353ec:	18fb      	adds	r3, r7, r3
   353ee:	429d      	cmp	r5, r3
   353f0:	d903      	bls.n	353fa <__aeabi_ddiv+0x3ba>
   353f2:	2580      	movs	r5, #128	; 0x80
   353f4:	026d      	lsls	r5, r5, #9
   353f6:	46ac      	mov	ip, r5
   353f8:	4460      	add	r0, ip
   353fa:	0c1d      	lsrs	r5, r3, #16
   353fc:	0412      	lsls	r2, r2, #16
   353fe:	041b      	lsls	r3, r3, #16
   35400:	0c12      	lsrs	r2, r2, #16
   35402:	1828      	adds	r0, r5, r0
   35404:	189b      	adds	r3, r3, r2
   35406:	4286      	cmp	r6, r0
   35408:	d200      	bcs.n	3540c <__aeabi_ddiv+0x3cc>
   3540a:	e093      	b.n	35534 <__aeabi_ddiv+0x4f4>
   3540c:	d100      	bne.n	35410 <__aeabi_ddiv+0x3d0>
   3540e:	e08e      	b.n	3552e <__aeabi_ddiv+0x4ee>
   35410:	2301      	movs	r3, #1
   35412:	4319      	orrs	r1, r3
   35414:	4ba0      	ldr	r3, [pc, #640]	; (35698 <__aeabi_ddiv+0x658>)
   35416:	18e3      	adds	r3, r4, r3
   35418:	2b00      	cmp	r3, #0
   3541a:	dc00      	bgt.n	3541e <__aeabi_ddiv+0x3de>
   3541c:	e099      	b.n	35552 <__aeabi_ddiv+0x512>
   3541e:	074a      	lsls	r2, r1, #29
   35420:	d000      	beq.n	35424 <__aeabi_ddiv+0x3e4>
   35422:	e09e      	b.n	35562 <__aeabi_ddiv+0x522>
   35424:	465a      	mov	r2, fp
   35426:	01d2      	lsls	r2, r2, #7
   35428:	d506      	bpl.n	35438 <__aeabi_ddiv+0x3f8>
   3542a:	465a      	mov	r2, fp
   3542c:	4b9b      	ldr	r3, [pc, #620]	; (3569c <__aeabi_ddiv+0x65c>)
   3542e:	401a      	ands	r2, r3
   35430:	2380      	movs	r3, #128	; 0x80
   35432:	4693      	mov	fp, r2
   35434:	00db      	lsls	r3, r3, #3
   35436:	18e3      	adds	r3, r4, r3
   35438:	4a99      	ldr	r2, [pc, #612]	; (356a0 <__aeabi_ddiv+0x660>)
   3543a:	4293      	cmp	r3, r2
   3543c:	dd68      	ble.n	35510 <__aeabi_ddiv+0x4d0>
   3543e:	2301      	movs	r3, #1
   35440:	9a02      	ldr	r2, [sp, #8]
   35442:	4c98      	ldr	r4, [pc, #608]	; (356a4 <__aeabi_ddiv+0x664>)
   35444:	401a      	ands	r2, r3
   35446:	2300      	movs	r3, #0
   35448:	4694      	mov	ip, r2
   3544a:	4698      	mov	r8, r3
   3544c:	2200      	movs	r2, #0
   3544e:	e6c5      	b.n	351dc <__aeabi_ddiv+0x19c>
   35450:	2280      	movs	r2, #128	; 0x80
   35452:	464b      	mov	r3, r9
   35454:	0312      	lsls	r2, r2, #12
   35456:	4213      	tst	r3, r2
   35458:	d00a      	beq.n	35470 <__aeabi_ddiv+0x430>
   3545a:	465b      	mov	r3, fp
   3545c:	4213      	tst	r3, r2
   3545e:	d106      	bne.n	3546e <__aeabi_ddiv+0x42e>
   35460:	431a      	orrs	r2, r3
   35462:	0312      	lsls	r2, r2, #12
   35464:	0b12      	lsrs	r2, r2, #12
   35466:	46ac      	mov	ip, r5
   35468:	4688      	mov	r8, r1
   3546a:	4c8e      	ldr	r4, [pc, #568]	; (356a4 <__aeabi_ddiv+0x664>)
   3546c:	e6b6      	b.n	351dc <__aeabi_ddiv+0x19c>
   3546e:	464b      	mov	r3, r9
   35470:	431a      	orrs	r2, r3
   35472:	0312      	lsls	r2, r2, #12
   35474:	0b12      	lsrs	r2, r2, #12
   35476:	46bc      	mov	ip, r7
   35478:	4c8a      	ldr	r4, [pc, #552]	; (356a4 <__aeabi_ddiv+0x664>)
   3547a:	e6af      	b.n	351dc <__aeabi_ddiv+0x19c>
   3547c:	0003      	movs	r3, r0
   3547e:	465a      	mov	r2, fp
   35480:	3b28      	subs	r3, #40	; 0x28
   35482:	409a      	lsls	r2, r3
   35484:	2300      	movs	r3, #0
   35486:	4691      	mov	r9, r2
   35488:	4698      	mov	r8, r3
   3548a:	e657      	b.n	3513c <__aeabi_ddiv+0xfc>
   3548c:	4658      	mov	r0, fp
   3548e:	f000 ff5f 	bl	36350 <__clzsi2>
   35492:	3020      	adds	r0, #32
   35494:	e640      	b.n	35118 <__aeabi_ddiv+0xd8>
   35496:	0003      	movs	r3, r0
   35498:	4652      	mov	r2, sl
   3549a:	3b28      	subs	r3, #40	; 0x28
   3549c:	409a      	lsls	r2, r3
   3549e:	2100      	movs	r1, #0
   354a0:	4693      	mov	fp, r2
   354a2:	e677      	b.n	35194 <__aeabi_ddiv+0x154>
   354a4:	f000 ff54 	bl	36350 <__clzsi2>
   354a8:	3020      	adds	r0, #32
   354aa:	e65f      	b.n	3516c <__aeabi_ddiv+0x12c>
   354ac:	4588      	cmp	r8, r1
   354ae:	d200      	bcs.n	354b2 <__aeabi_ddiv+0x472>
   354b0:	e6c7      	b.n	35242 <__aeabi_ddiv+0x202>
   354b2:	464b      	mov	r3, r9
   354b4:	07de      	lsls	r6, r3, #31
   354b6:	085d      	lsrs	r5, r3, #1
   354b8:	4643      	mov	r3, r8
   354ba:	085b      	lsrs	r3, r3, #1
   354bc:	431e      	orrs	r6, r3
   354be:	4643      	mov	r3, r8
   354c0:	07db      	lsls	r3, r3, #31
   354c2:	469a      	mov	sl, r3
   354c4:	e6c2      	b.n	3524c <__aeabi_ddiv+0x20c>
   354c6:	2500      	movs	r5, #0
   354c8:	4592      	cmp	sl, r2
   354ca:	d300      	bcc.n	354ce <__aeabi_ddiv+0x48e>
   354cc:	e733      	b.n	35336 <__aeabi_ddiv+0x2f6>
   354ce:	9e03      	ldr	r6, [sp, #12]
   354d0:	4659      	mov	r1, fp
   354d2:	46b4      	mov	ip, r6
   354d4:	44e2      	add	sl, ip
   354d6:	45b2      	cmp	sl, r6
   354d8:	41ad      	sbcs	r5, r5
   354da:	426d      	negs	r5, r5
   354dc:	4445      	add	r5, r8
   354de:	18eb      	adds	r3, r5, r3
   354e0:	3901      	subs	r1, #1
   354e2:	4598      	cmp	r8, r3
   354e4:	d207      	bcs.n	354f6 <__aeabi_ddiv+0x4b6>
   354e6:	4298      	cmp	r0, r3
   354e8:	d900      	bls.n	354ec <__aeabi_ddiv+0x4ac>
   354ea:	e07f      	b.n	355ec <__aeabi_ddiv+0x5ac>
   354ec:	d100      	bne.n	354f0 <__aeabi_ddiv+0x4b0>
   354ee:	e0bc      	b.n	3566a <__aeabi_ddiv+0x62a>
   354f0:	1a1d      	subs	r5, r3, r0
   354f2:	468b      	mov	fp, r1
   354f4:	e71f      	b.n	35336 <__aeabi_ddiv+0x2f6>
   354f6:	4598      	cmp	r8, r3
   354f8:	d1fa      	bne.n	354f0 <__aeabi_ddiv+0x4b0>
   354fa:	9d03      	ldr	r5, [sp, #12]
   354fc:	4555      	cmp	r5, sl
   354fe:	d9f2      	bls.n	354e6 <__aeabi_ddiv+0x4a6>
   35500:	4643      	mov	r3, r8
   35502:	468b      	mov	fp, r1
   35504:	1a1d      	subs	r5, r3, r0
   35506:	e716      	b.n	35336 <__aeabi_ddiv+0x2f6>
   35508:	469b      	mov	fp, r3
   3550a:	e6ca      	b.n	352a2 <__aeabi_ddiv+0x262>
   3550c:	0015      	movs	r5, r2
   3550e:	e6e7      	b.n	352e0 <__aeabi_ddiv+0x2a0>
   35510:	465a      	mov	r2, fp
   35512:	08c9      	lsrs	r1, r1, #3
   35514:	0752      	lsls	r2, r2, #29
   35516:	430a      	orrs	r2, r1
   35518:	055b      	lsls	r3, r3, #21
   3551a:	4690      	mov	r8, r2
   3551c:	0d5c      	lsrs	r4, r3, #21
   3551e:	465a      	mov	r2, fp
   35520:	2301      	movs	r3, #1
   35522:	9902      	ldr	r1, [sp, #8]
   35524:	0252      	lsls	r2, r2, #9
   35526:	4019      	ands	r1, r3
   35528:	0b12      	lsrs	r2, r2, #12
   3552a:	468c      	mov	ip, r1
   3552c:	e656      	b.n	351dc <__aeabi_ddiv+0x19c>
   3552e:	2b00      	cmp	r3, #0
   35530:	d100      	bne.n	35534 <__aeabi_ddiv+0x4f4>
   35532:	e76f      	b.n	35414 <__aeabi_ddiv+0x3d4>
   35534:	4446      	add	r6, r8
   35536:	1e4a      	subs	r2, r1, #1
   35538:	45b0      	cmp	r8, r6
   3553a:	d929      	bls.n	35590 <__aeabi_ddiv+0x550>
   3553c:	0011      	movs	r1, r2
   3553e:	4286      	cmp	r6, r0
   35540:	d000      	beq.n	35544 <__aeabi_ddiv+0x504>
   35542:	e765      	b.n	35410 <__aeabi_ddiv+0x3d0>
   35544:	9a03      	ldr	r2, [sp, #12]
   35546:	4293      	cmp	r3, r2
   35548:	d000      	beq.n	3554c <__aeabi_ddiv+0x50c>
   3554a:	e761      	b.n	35410 <__aeabi_ddiv+0x3d0>
   3554c:	e762      	b.n	35414 <__aeabi_ddiv+0x3d4>
   3554e:	2101      	movs	r1, #1
   35550:	4249      	negs	r1, r1
   35552:	2001      	movs	r0, #1
   35554:	1ac2      	subs	r2, r0, r3
   35556:	2a38      	cmp	r2, #56	; 0x38
   35558:	dd21      	ble.n	3559e <__aeabi_ddiv+0x55e>
   3555a:	9b02      	ldr	r3, [sp, #8]
   3555c:	4003      	ands	r3, r0
   3555e:	469c      	mov	ip, r3
   35560:	e638      	b.n	351d4 <__aeabi_ddiv+0x194>
   35562:	220f      	movs	r2, #15
   35564:	400a      	ands	r2, r1
   35566:	2a04      	cmp	r2, #4
   35568:	d100      	bne.n	3556c <__aeabi_ddiv+0x52c>
   3556a:	e75b      	b.n	35424 <__aeabi_ddiv+0x3e4>
   3556c:	000a      	movs	r2, r1
   3556e:	1d11      	adds	r1, r2, #4
   35570:	4291      	cmp	r1, r2
   35572:	4192      	sbcs	r2, r2
   35574:	4252      	negs	r2, r2
   35576:	4493      	add	fp, r2
   35578:	e754      	b.n	35424 <__aeabi_ddiv+0x3e4>
   3557a:	4b47      	ldr	r3, [pc, #284]	; (35698 <__aeabi_ddiv+0x658>)
   3557c:	18e3      	adds	r3, r4, r3
   3557e:	2b00      	cmp	r3, #0
   35580:	dde5      	ble.n	3554e <__aeabi_ddiv+0x50e>
   35582:	2201      	movs	r2, #1
   35584:	4252      	negs	r2, r2
   35586:	e7f2      	b.n	3556e <__aeabi_ddiv+0x52e>
   35588:	001d      	movs	r5, r3
   3558a:	e6fa      	b.n	35382 <__aeabi_ddiv+0x342>
   3558c:	469a      	mov	sl, r3
   3558e:	e71c      	b.n	353ca <__aeabi_ddiv+0x38a>
   35590:	42b0      	cmp	r0, r6
   35592:	d839      	bhi.n	35608 <__aeabi_ddiv+0x5c8>
   35594:	d06e      	beq.n	35674 <__aeabi_ddiv+0x634>
   35596:	0011      	movs	r1, r2
   35598:	e73a      	b.n	35410 <__aeabi_ddiv+0x3d0>
   3559a:	9302      	str	r3, [sp, #8]
   3559c:	e73a      	b.n	35414 <__aeabi_ddiv+0x3d4>
   3559e:	2a1f      	cmp	r2, #31
   355a0:	dc3c      	bgt.n	3561c <__aeabi_ddiv+0x5dc>
   355a2:	2320      	movs	r3, #32
   355a4:	1a9b      	subs	r3, r3, r2
   355a6:	000c      	movs	r4, r1
   355a8:	4658      	mov	r0, fp
   355aa:	4099      	lsls	r1, r3
   355ac:	4098      	lsls	r0, r3
   355ae:	1e4b      	subs	r3, r1, #1
   355b0:	4199      	sbcs	r1, r3
   355b2:	465b      	mov	r3, fp
   355b4:	40d4      	lsrs	r4, r2
   355b6:	40d3      	lsrs	r3, r2
   355b8:	4320      	orrs	r0, r4
   355ba:	4308      	orrs	r0, r1
   355bc:	001a      	movs	r2, r3
   355be:	0743      	lsls	r3, r0, #29
   355c0:	d009      	beq.n	355d6 <__aeabi_ddiv+0x596>
   355c2:	230f      	movs	r3, #15
   355c4:	4003      	ands	r3, r0
   355c6:	2b04      	cmp	r3, #4
   355c8:	d005      	beq.n	355d6 <__aeabi_ddiv+0x596>
   355ca:	0001      	movs	r1, r0
   355cc:	1d08      	adds	r0, r1, #4
   355ce:	4288      	cmp	r0, r1
   355d0:	419b      	sbcs	r3, r3
   355d2:	425b      	negs	r3, r3
   355d4:	18d2      	adds	r2, r2, r3
   355d6:	0213      	lsls	r3, r2, #8
   355d8:	d53a      	bpl.n	35650 <__aeabi_ddiv+0x610>
   355da:	2301      	movs	r3, #1
   355dc:	9a02      	ldr	r2, [sp, #8]
   355de:	2401      	movs	r4, #1
   355e0:	401a      	ands	r2, r3
   355e2:	2300      	movs	r3, #0
   355e4:	4694      	mov	ip, r2
   355e6:	4698      	mov	r8, r3
   355e8:	2200      	movs	r2, #0
   355ea:	e5f7      	b.n	351dc <__aeabi_ddiv+0x19c>
   355ec:	2102      	movs	r1, #2
   355ee:	4249      	negs	r1, r1
   355f0:	468c      	mov	ip, r1
   355f2:	9d03      	ldr	r5, [sp, #12]
   355f4:	44e3      	add	fp, ip
   355f6:	46ac      	mov	ip, r5
   355f8:	44e2      	add	sl, ip
   355fa:	45aa      	cmp	sl, r5
   355fc:	41ad      	sbcs	r5, r5
   355fe:	426d      	negs	r5, r5
   35600:	4445      	add	r5, r8
   35602:	18ed      	adds	r5, r5, r3
   35604:	1a2d      	subs	r5, r5, r0
   35606:	e696      	b.n	35336 <__aeabi_ddiv+0x2f6>
   35608:	1e8a      	subs	r2, r1, #2
   3560a:	9903      	ldr	r1, [sp, #12]
   3560c:	004d      	lsls	r5, r1, #1
   3560e:	428d      	cmp	r5, r1
   35610:	4189      	sbcs	r1, r1
   35612:	4249      	negs	r1, r1
   35614:	4441      	add	r1, r8
   35616:	1876      	adds	r6, r6, r1
   35618:	9503      	str	r5, [sp, #12]
   3561a:	e78f      	b.n	3553c <__aeabi_ddiv+0x4fc>
   3561c:	201f      	movs	r0, #31
   3561e:	4240      	negs	r0, r0
   35620:	1ac3      	subs	r3, r0, r3
   35622:	4658      	mov	r0, fp
   35624:	40d8      	lsrs	r0, r3
   35626:	0003      	movs	r3, r0
   35628:	2a20      	cmp	r2, #32
   3562a:	d028      	beq.n	3567e <__aeabi_ddiv+0x63e>
   3562c:	2040      	movs	r0, #64	; 0x40
   3562e:	465d      	mov	r5, fp
   35630:	1a82      	subs	r2, r0, r2
   35632:	4095      	lsls	r5, r2
   35634:	4329      	orrs	r1, r5
   35636:	1e4a      	subs	r2, r1, #1
   35638:	4191      	sbcs	r1, r2
   3563a:	4319      	orrs	r1, r3
   3563c:	2307      	movs	r3, #7
   3563e:	2200      	movs	r2, #0
   35640:	400b      	ands	r3, r1
   35642:	d009      	beq.n	35658 <__aeabi_ddiv+0x618>
   35644:	230f      	movs	r3, #15
   35646:	2200      	movs	r2, #0
   35648:	400b      	ands	r3, r1
   3564a:	0008      	movs	r0, r1
   3564c:	2b04      	cmp	r3, #4
   3564e:	d1bd      	bne.n	355cc <__aeabi_ddiv+0x58c>
   35650:	0001      	movs	r1, r0
   35652:	0753      	lsls	r3, r2, #29
   35654:	0252      	lsls	r2, r2, #9
   35656:	0b12      	lsrs	r2, r2, #12
   35658:	08c9      	lsrs	r1, r1, #3
   3565a:	4319      	orrs	r1, r3
   3565c:	2301      	movs	r3, #1
   3565e:	4688      	mov	r8, r1
   35660:	9902      	ldr	r1, [sp, #8]
   35662:	2400      	movs	r4, #0
   35664:	4019      	ands	r1, r3
   35666:	468c      	mov	ip, r1
   35668:	e5b8      	b.n	351dc <__aeabi_ddiv+0x19c>
   3566a:	4552      	cmp	r2, sl
   3566c:	d8be      	bhi.n	355ec <__aeabi_ddiv+0x5ac>
   3566e:	468b      	mov	fp, r1
   35670:	2500      	movs	r5, #0
   35672:	e660      	b.n	35336 <__aeabi_ddiv+0x2f6>
   35674:	9d03      	ldr	r5, [sp, #12]
   35676:	429d      	cmp	r5, r3
   35678:	d3c6      	bcc.n	35608 <__aeabi_ddiv+0x5c8>
   3567a:	0011      	movs	r1, r2
   3567c:	e762      	b.n	35544 <__aeabi_ddiv+0x504>
   3567e:	2500      	movs	r5, #0
   35680:	e7d8      	b.n	35634 <__aeabi_ddiv+0x5f4>
   35682:	2280      	movs	r2, #128	; 0x80
   35684:	465b      	mov	r3, fp
   35686:	0312      	lsls	r2, r2, #12
   35688:	431a      	orrs	r2, r3
   3568a:	9b01      	ldr	r3, [sp, #4]
   3568c:	0312      	lsls	r2, r2, #12
   3568e:	0b12      	lsrs	r2, r2, #12
   35690:	469c      	mov	ip, r3
   35692:	4688      	mov	r8, r1
   35694:	4c03      	ldr	r4, [pc, #12]	; (356a4 <__aeabi_ddiv+0x664>)
   35696:	e5a1      	b.n	351dc <__aeabi_ddiv+0x19c>
   35698:	000003ff 	.word	0x000003ff
   3569c:	feffffff 	.word	0xfeffffff
   356a0:	000007fe 	.word	0x000007fe
   356a4:	000007ff 	.word	0x000007ff

000356a8 <__aeabi_dmul>:
   356a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   356aa:	4657      	mov	r7, sl
   356ac:	4645      	mov	r5, r8
   356ae:	46de      	mov	lr, fp
   356b0:	464e      	mov	r6, r9
   356b2:	b5e0      	push	{r5, r6, r7, lr}
   356b4:	030c      	lsls	r4, r1, #12
   356b6:	4698      	mov	r8, r3
   356b8:	004e      	lsls	r6, r1, #1
   356ba:	0b23      	lsrs	r3, r4, #12
   356bc:	b087      	sub	sp, #28
   356be:	0007      	movs	r7, r0
   356c0:	4692      	mov	sl, r2
   356c2:	469b      	mov	fp, r3
   356c4:	0d76      	lsrs	r6, r6, #21
   356c6:	0fcd      	lsrs	r5, r1, #31
   356c8:	2e00      	cmp	r6, #0
   356ca:	d06b      	beq.n	357a4 <__aeabi_dmul+0xfc>
   356cc:	4b6d      	ldr	r3, [pc, #436]	; (35884 <__aeabi_dmul+0x1dc>)
   356ce:	429e      	cmp	r6, r3
   356d0:	d035      	beq.n	3573e <__aeabi_dmul+0x96>
   356d2:	2480      	movs	r4, #128	; 0x80
   356d4:	465b      	mov	r3, fp
   356d6:	0f42      	lsrs	r2, r0, #29
   356d8:	0424      	lsls	r4, r4, #16
   356da:	00db      	lsls	r3, r3, #3
   356dc:	4314      	orrs	r4, r2
   356de:	431c      	orrs	r4, r3
   356e0:	00c3      	lsls	r3, r0, #3
   356e2:	4699      	mov	r9, r3
   356e4:	4b68      	ldr	r3, [pc, #416]	; (35888 <__aeabi_dmul+0x1e0>)
   356e6:	46a3      	mov	fp, r4
   356e8:	469c      	mov	ip, r3
   356ea:	2300      	movs	r3, #0
   356ec:	2700      	movs	r7, #0
   356ee:	4466      	add	r6, ip
   356f0:	9302      	str	r3, [sp, #8]
   356f2:	4643      	mov	r3, r8
   356f4:	031c      	lsls	r4, r3, #12
   356f6:	005a      	lsls	r2, r3, #1
   356f8:	0fdb      	lsrs	r3, r3, #31
   356fa:	4650      	mov	r0, sl
   356fc:	0b24      	lsrs	r4, r4, #12
   356fe:	0d52      	lsrs	r2, r2, #21
   35700:	4698      	mov	r8, r3
   35702:	d100      	bne.n	35706 <__aeabi_dmul+0x5e>
   35704:	e076      	b.n	357f4 <__aeabi_dmul+0x14c>
   35706:	4b5f      	ldr	r3, [pc, #380]	; (35884 <__aeabi_dmul+0x1dc>)
   35708:	429a      	cmp	r2, r3
   3570a:	d06d      	beq.n	357e8 <__aeabi_dmul+0x140>
   3570c:	2380      	movs	r3, #128	; 0x80
   3570e:	0f41      	lsrs	r1, r0, #29
   35710:	041b      	lsls	r3, r3, #16
   35712:	430b      	orrs	r3, r1
   35714:	495c      	ldr	r1, [pc, #368]	; (35888 <__aeabi_dmul+0x1e0>)
   35716:	00e4      	lsls	r4, r4, #3
   35718:	468c      	mov	ip, r1
   3571a:	431c      	orrs	r4, r3
   3571c:	00c3      	lsls	r3, r0, #3
   3571e:	2000      	movs	r0, #0
   35720:	4462      	add	r2, ip
   35722:	4641      	mov	r1, r8
   35724:	18b6      	adds	r6, r6, r2
   35726:	4069      	eors	r1, r5
   35728:	1c72      	adds	r2, r6, #1
   3572a:	9101      	str	r1, [sp, #4]
   3572c:	4694      	mov	ip, r2
   3572e:	4307      	orrs	r7, r0
   35730:	2f0f      	cmp	r7, #15
   35732:	d900      	bls.n	35736 <__aeabi_dmul+0x8e>
   35734:	e0b0      	b.n	35898 <__aeabi_dmul+0x1f0>
   35736:	4a55      	ldr	r2, [pc, #340]	; (3588c <__aeabi_dmul+0x1e4>)
   35738:	00bf      	lsls	r7, r7, #2
   3573a:	59d2      	ldr	r2, [r2, r7]
   3573c:	4697      	mov	pc, r2
   3573e:	465b      	mov	r3, fp
   35740:	4303      	orrs	r3, r0
   35742:	4699      	mov	r9, r3
   35744:	d000      	beq.n	35748 <__aeabi_dmul+0xa0>
   35746:	e087      	b.n	35858 <__aeabi_dmul+0x1b0>
   35748:	2300      	movs	r3, #0
   3574a:	469b      	mov	fp, r3
   3574c:	3302      	adds	r3, #2
   3574e:	2708      	movs	r7, #8
   35750:	9302      	str	r3, [sp, #8]
   35752:	e7ce      	b.n	356f2 <__aeabi_dmul+0x4a>
   35754:	4642      	mov	r2, r8
   35756:	9201      	str	r2, [sp, #4]
   35758:	2802      	cmp	r0, #2
   3575a:	d067      	beq.n	3582c <__aeabi_dmul+0x184>
   3575c:	2803      	cmp	r0, #3
   3575e:	d100      	bne.n	35762 <__aeabi_dmul+0xba>
   35760:	e20e      	b.n	35b80 <__aeabi_dmul+0x4d8>
   35762:	2801      	cmp	r0, #1
   35764:	d000      	beq.n	35768 <__aeabi_dmul+0xc0>
   35766:	e162      	b.n	35a2e <__aeabi_dmul+0x386>
   35768:	2300      	movs	r3, #0
   3576a:	2400      	movs	r4, #0
   3576c:	2200      	movs	r2, #0
   3576e:	4699      	mov	r9, r3
   35770:	9901      	ldr	r1, [sp, #4]
   35772:	4001      	ands	r1, r0
   35774:	b2cd      	uxtb	r5, r1
   35776:	2100      	movs	r1, #0
   35778:	0312      	lsls	r2, r2, #12
   3577a:	0d0b      	lsrs	r3, r1, #20
   3577c:	0b12      	lsrs	r2, r2, #12
   3577e:	051b      	lsls	r3, r3, #20
   35780:	4313      	orrs	r3, r2
   35782:	4a43      	ldr	r2, [pc, #268]	; (35890 <__aeabi_dmul+0x1e8>)
   35784:	0524      	lsls	r4, r4, #20
   35786:	4013      	ands	r3, r2
   35788:	431c      	orrs	r4, r3
   3578a:	0064      	lsls	r4, r4, #1
   3578c:	07ed      	lsls	r5, r5, #31
   3578e:	0864      	lsrs	r4, r4, #1
   35790:	432c      	orrs	r4, r5
   35792:	4648      	mov	r0, r9
   35794:	0021      	movs	r1, r4
   35796:	b007      	add	sp, #28
   35798:	bc3c      	pop	{r2, r3, r4, r5}
   3579a:	4690      	mov	r8, r2
   3579c:	4699      	mov	r9, r3
   3579e:	46a2      	mov	sl, r4
   357a0:	46ab      	mov	fp, r5
   357a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   357a4:	4303      	orrs	r3, r0
   357a6:	4699      	mov	r9, r3
   357a8:	d04f      	beq.n	3584a <__aeabi_dmul+0x1a2>
   357aa:	465b      	mov	r3, fp
   357ac:	2b00      	cmp	r3, #0
   357ae:	d100      	bne.n	357b2 <__aeabi_dmul+0x10a>
   357b0:	e189      	b.n	35ac6 <__aeabi_dmul+0x41e>
   357b2:	4658      	mov	r0, fp
   357b4:	f000 fdcc 	bl	36350 <__clzsi2>
   357b8:	0003      	movs	r3, r0
   357ba:	3b0b      	subs	r3, #11
   357bc:	2b1c      	cmp	r3, #28
   357be:	dd00      	ble.n	357c2 <__aeabi_dmul+0x11a>
   357c0:	e17a      	b.n	35ab8 <__aeabi_dmul+0x410>
   357c2:	221d      	movs	r2, #29
   357c4:	1ad3      	subs	r3, r2, r3
   357c6:	003a      	movs	r2, r7
   357c8:	0001      	movs	r1, r0
   357ca:	465c      	mov	r4, fp
   357cc:	40da      	lsrs	r2, r3
   357ce:	3908      	subs	r1, #8
   357d0:	408c      	lsls	r4, r1
   357d2:	0013      	movs	r3, r2
   357d4:	408f      	lsls	r7, r1
   357d6:	4323      	orrs	r3, r4
   357d8:	469b      	mov	fp, r3
   357da:	46b9      	mov	r9, r7
   357dc:	2300      	movs	r3, #0
   357de:	4e2d      	ldr	r6, [pc, #180]	; (35894 <__aeabi_dmul+0x1ec>)
   357e0:	2700      	movs	r7, #0
   357e2:	1a36      	subs	r6, r6, r0
   357e4:	9302      	str	r3, [sp, #8]
   357e6:	e784      	b.n	356f2 <__aeabi_dmul+0x4a>
   357e8:	4653      	mov	r3, sl
   357ea:	4323      	orrs	r3, r4
   357ec:	d12a      	bne.n	35844 <__aeabi_dmul+0x19c>
   357ee:	2400      	movs	r4, #0
   357f0:	2002      	movs	r0, #2
   357f2:	e796      	b.n	35722 <__aeabi_dmul+0x7a>
   357f4:	4653      	mov	r3, sl
   357f6:	4323      	orrs	r3, r4
   357f8:	d020      	beq.n	3583c <__aeabi_dmul+0x194>
   357fa:	2c00      	cmp	r4, #0
   357fc:	d100      	bne.n	35800 <__aeabi_dmul+0x158>
   357fe:	e157      	b.n	35ab0 <__aeabi_dmul+0x408>
   35800:	0020      	movs	r0, r4
   35802:	f000 fda5 	bl	36350 <__clzsi2>
   35806:	0003      	movs	r3, r0
   35808:	3b0b      	subs	r3, #11
   3580a:	2b1c      	cmp	r3, #28
   3580c:	dd00      	ble.n	35810 <__aeabi_dmul+0x168>
   3580e:	e149      	b.n	35aa4 <__aeabi_dmul+0x3fc>
   35810:	211d      	movs	r1, #29
   35812:	1acb      	subs	r3, r1, r3
   35814:	4651      	mov	r1, sl
   35816:	0002      	movs	r2, r0
   35818:	40d9      	lsrs	r1, r3
   3581a:	4653      	mov	r3, sl
   3581c:	3a08      	subs	r2, #8
   3581e:	4094      	lsls	r4, r2
   35820:	4093      	lsls	r3, r2
   35822:	430c      	orrs	r4, r1
   35824:	4a1b      	ldr	r2, [pc, #108]	; (35894 <__aeabi_dmul+0x1ec>)
   35826:	1a12      	subs	r2, r2, r0
   35828:	2000      	movs	r0, #0
   3582a:	e77a      	b.n	35722 <__aeabi_dmul+0x7a>
   3582c:	2501      	movs	r5, #1
   3582e:	9b01      	ldr	r3, [sp, #4]
   35830:	4c14      	ldr	r4, [pc, #80]	; (35884 <__aeabi_dmul+0x1dc>)
   35832:	401d      	ands	r5, r3
   35834:	2300      	movs	r3, #0
   35836:	2200      	movs	r2, #0
   35838:	4699      	mov	r9, r3
   3583a:	e79c      	b.n	35776 <__aeabi_dmul+0xce>
   3583c:	2400      	movs	r4, #0
   3583e:	2200      	movs	r2, #0
   35840:	2001      	movs	r0, #1
   35842:	e76e      	b.n	35722 <__aeabi_dmul+0x7a>
   35844:	4653      	mov	r3, sl
   35846:	2003      	movs	r0, #3
   35848:	e76b      	b.n	35722 <__aeabi_dmul+0x7a>
   3584a:	2300      	movs	r3, #0
   3584c:	469b      	mov	fp, r3
   3584e:	3301      	adds	r3, #1
   35850:	2704      	movs	r7, #4
   35852:	2600      	movs	r6, #0
   35854:	9302      	str	r3, [sp, #8]
   35856:	e74c      	b.n	356f2 <__aeabi_dmul+0x4a>
   35858:	2303      	movs	r3, #3
   3585a:	4681      	mov	r9, r0
   3585c:	270c      	movs	r7, #12
   3585e:	9302      	str	r3, [sp, #8]
   35860:	e747      	b.n	356f2 <__aeabi_dmul+0x4a>
   35862:	2280      	movs	r2, #128	; 0x80
   35864:	2300      	movs	r3, #0
   35866:	2500      	movs	r5, #0
   35868:	0312      	lsls	r2, r2, #12
   3586a:	4699      	mov	r9, r3
   3586c:	4c05      	ldr	r4, [pc, #20]	; (35884 <__aeabi_dmul+0x1dc>)
   3586e:	e782      	b.n	35776 <__aeabi_dmul+0xce>
   35870:	465c      	mov	r4, fp
   35872:	464b      	mov	r3, r9
   35874:	9802      	ldr	r0, [sp, #8]
   35876:	e76f      	b.n	35758 <__aeabi_dmul+0xb0>
   35878:	465c      	mov	r4, fp
   3587a:	464b      	mov	r3, r9
   3587c:	9501      	str	r5, [sp, #4]
   3587e:	9802      	ldr	r0, [sp, #8]
   35880:	e76a      	b.n	35758 <__aeabi_dmul+0xb0>
   35882:	46c0      	nop			; (mov r8, r8)
   35884:	000007ff 	.word	0x000007ff
   35888:	fffffc01 	.word	0xfffffc01
   3588c:	0003c024 	.word	0x0003c024
   35890:	800fffff 	.word	0x800fffff
   35894:	fffffc0d 	.word	0xfffffc0d
   35898:	464a      	mov	r2, r9
   3589a:	4649      	mov	r1, r9
   3589c:	0c17      	lsrs	r7, r2, #16
   3589e:	0c1a      	lsrs	r2, r3, #16
   358a0:	041b      	lsls	r3, r3, #16
   358a2:	0c1b      	lsrs	r3, r3, #16
   358a4:	0408      	lsls	r0, r1, #16
   358a6:	0019      	movs	r1, r3
   358a8:	0c00      	lsrs	r0, r0, #16
   358aa:	4341      	muls	r1, r0
   358ac:	0015      	movs	r5, r2
   358ae:	4688      	mov	r8, r1
   358b0:	0019      	movs	r1, r3
   358b2:	437d      	muls	r5, r7
   358b4:	4379      	muls	r1, r7
   358b6:	9503      	str	r5, [sp, #12]
   358b8:	4689      	mov	r9, r1
   358ba:	0029      	movs	r1, r5
   358bc:	0015      	movs	r5, r2
   358be:	4345      	muls	r5, r0
   358c0:	444d      	add	r5, r9
   358c2:	9502      	str	r5, [sp, #8]
   358c4:	4645      	mov	r5, r8
   358c6:	0c2d      	lsrs	r5, r5, #16
   358c8:	46aa      	mov	sl, r5
   358ca:	9d02      	ldr	r5, [sp, #8]
   358cc:	4455      	add	r5, sl
   358ce:	45a9      	cmp	r9, r5
   358d0:	d906      	bls.n	358e0 <__aeabi_dmul+0x238>
   358d2:	468a      	mov	sl, r1
   358d4:	2180      	movs	r1, #128	; 0x80
   358d6:	0249      	lsls	r1, r1, #9
   358d8:	4689      	mov	r9, r1
   358da:	44ca      	add	sl, r9
   358dc:	4651      	mov	r1, sl
   358de:	9103      	str	r1, [sp, #12]
   358e0:	0c29      	lsrs	r1, r5, #16
   358e2:	9104      	str	r1, [sp, #16]
   358e4:	4641      	mov	r1, r8
   358e6:	0409      	lsls	r1, r1, #16
   358e8:	042d      	lsls	r5, r5, #16
   358ea:	0c09      	lsrs	r1, r1, #16
   358ec:	4688      	mov	r8, r1
   358ee:	0029      	movs	r1, r5
   358f0:	0c25      	lsrs	r5, r4, #16
   358f2:	0424      	lsls	r4, r4, #16
   358f4:	4441      	add	r1, r8
   358f6:	0c24      	lsrs	r4, r4, #16
   358f8:	9105      	str	r1, [sp, #20]
   358fa:	0021      	movs	r1, r4
   358fc:	4341      	muls	r1, r0
   358fe:	4688      	mov	r8, r1
   35900:	0021      	movs	r1, r4
   35902:	4379      	muls	r1, r7
   35904:	468a      	mov	sl, r1
   35906:	4368      	muls	r0, r5
   35908:	4641      	mov	r1, r8
   3590a:	4450      	add	r0, sl
   3590c:	4681      	mov	r9, r0
   3590e:	0c08      	lsrs	r0, r1, #16
   35910:	4448      	add	r0, r9
   35912:	436f      	muls	r7, r5
   35914:	4582      	cmp	sl, r0
   35916:	d903      	bls.n	35920 <__aeabi_dmul+0x278>
   35918:	2180      	movs	r1, #128	; 0x80
   3591a:	0249      	lsls	r1, r1, #9
   3591c:	4689      	mov	r9, r1
   3591e:	444f      	add	r7, r9
   35920:	0c01      	lsrs	r1, r0, #16
   35922:	4689      	mov	r9, r1
   35924:	0039      	movs	r1, r7
   35926:	4449      	add	r1, r9
   35928:	9102      	str	r1, [sp, #8]
   3592a:	4641      	mov	r1, r8
   3592c:	040f      	lsls	r7, r1, #16
   3592e:	9904      	ldr	r1, [sp, #16]
   35930:	0c3f      	lsrs	r7, r7, #16
   35932:	4688      	mov	r8, r1
   35934:	0400      	lsls	r0, r0, #16
   35936:	19c0      	adds	r0, r0, r7
   35938:	4480      	add	r8, r0
   3593a:	4641      	mov	r1, r8
   3593c:	9104      	str	r1, [sp, #16]
   3593e:	4659      	mov	r1, fp
   35940:	0c0f      	lsrs	r7, r1, #16
   35942:	0409      	lsls	r1, r1, #16
   35944:	0c09      	lsrs	r1, r1, #16
   35946:	4688      	mov	r8, r1
   35948:	4359      	muls	r1, r3
   3594a:	468a      	mov	sl, r1
   3594c:	0039      	movs	r1, r7
   3594e:	4351      	muls	r1, r2
   35950:	4689      	mov	r9, r1
   35952:	4641      	mov	r1, r8
   35954:	434a      	muls	r2, r1
   35956:	4651      	mov	r1, sl
   35958:	0c09      	lsrs	r1, r1, #16
   3595a:	468b      	mov	fp, r1
   3595c:	437b      	muls	r3, r7
   3595e:	18d2      	adds	r2, r2, r3
   35960:	445a      	add	r2, fp
   35962:	4293      	cmp	r3, r2
   35964:	d903      	bls.n	3596e <__aeabi_dmul+0x2c6>
   35966:	2380      	movs	r3, #128	; 0x80
   35968:	025b      	lsls	r3, r3, #9
   3596a:	469b      	mov	fp, r3
   3596c:	44d9      	add	r9, fp
   3596e:	4651      	mov	r1, sl
   35970:	0409      	lsls	r1, r1, #16
   35972:	0c09      	lsrs	r1, r1, #16
   35974:	468a      	mov	sl, r1
   35976:	4641      	mov	r1, r8
   35978:	4361      	muls	r1, r4
   3597a:	437c      	muls	r4, r7
   3597c:	0c13      	lsrs	r3, r2, #16
   3597e:	0412      	lsls	r2, r2, #16
   35980:	444b      	add	r3, r9
   35982:	4452      	add	r2, sl
   35984:	46a1      	mov	r9, r4
   35986:	468a      	mov	sl, r1
   35988:	003c      	movs	r4, r7
   3598a:	4641      	mov	r1, r8
   3598c:	436c      	muls	r4, r5
   3598e:	434d      	muls	r5, r1
   35990:	4651      	mov	r1, sl
   35992:	444d      	add	r5, r9
   35994:	0c0f      	lsrs	r7, r1, #16
   35996:	197d      	adds	r5, r7, r5
   35998:	45a9      	cmp	r9, r5
   3599a:	d903      	bls.n	359a4 <__aeabi_dmul+0x2fc>
   3599c:	2180      	movs	r1, #128	; 0x80
   3599e:	0249      	lsls	r1, r1, #9
   359a0:	4688      	mov	r8, r1
   359a2:	4444      	add	r4, r8
   359a4:	9f04      	ldr	r7, [sp, #16]
   359a6:	9903      	ldr	r1, [sp, #12]
   359a8:	46b8      	mov	r8, r7
   359aa:	4441      	add	r1, r8
   359ac:	468b      	mov	fp, r1
   359ae:	4583      	cmp	fp, r0
   359b0:	4180      	sbcs	r0, r0
   359b2:	4241      	negs	r1, r0
   359b4:	4688      	mov	r8, r1
   359b6:	4651      	mov	r1, sl
   359b8:	0408      	lsls	r0, r1, #16
   359ba:	042f      	lsls	r7, r5, #16
   359bc:	0c00      	lsrs	r0, r0, #16
   359be:	183f      	adds	r7, r7, r0
   359c0:	4658      	mov	r0, fp
   359c2:	9902      	ldr	r1, [sp, #8]
   359c4:	1810      	adds	r0, r2, r0
   359c6:	4689      	mov	r9, r1
   359c8:	4290      	cmp	r0, r2
   359ca:	4192      	sbcs	r2, r2
   359cc:	444f      	add	r7, r9
   359ce:	46ba      	mov	sl, r7
   359d0:	4252      	negs	r2, r2
   359d2:	4699      	mov	r9, r3
   359d4:	4693      	mov	fp, r2
   359d6:	44c2      	add	sl, r8
   359d8:	44d1      	add	r9, sl
   359da:	44cb      	add	fp, r9
   359dc:	428f      	cmp	r7, r1
   359de:	41bf      	sbcs	r7, r7
   359e0:	45c2      	cmp	sl, r8
   359e2:	4189      	sbcs	r1, r1
   359e4:	4599      	cmp	r9, r3
   359e6:	419b      	sbcs	r3, r3
   359e8:	4593      	cmp	fp, r2
   359ea:	4192      	sbcs	r2, r2
   359ec:	427f      	negs	r7, r7
   359ee:	4249      	negs	r1, r1
   359f0:	0c2d      	lsrs	r5, r5, #16
   359f2:	4252      	negs	r2, r2
   359f4:	430f      	orrs	r7, r1
   359f6:	425b      	negs	r3, r3
   359f8:	4313      	orrs	r3, r2
   359fa:	197f      	adds	r7, r7, r5
   359fc:	18ff      	adds	r7, r7, r3
   359fe:	465b      	mov	r3, fp
   35a00:	193c      	adds	r4, r7, r4
   35a02:	0ddb      	lsrs	r3, r3, #23
   35a04:	9a05      	ldr	r2, [sp, #20]
   35a06:	0264      	lsls	r4, r4, #9
   35a08:	431c      	orrs	r4, r3
   35a0a:	0243      	lsls	r3, r0, #9
   35a0c:	4313      	orrs	r3, r2
   35a0e:	1e5d      	subs	r5, r3, #1
   35a10:	41ab      	sbcs	r3, r5
   35a12:	465a      	mov	r2, fp
   35a14:	0dc0      	lsrs	r0, r0, #23
   35a16:	4303      	orrs	r3, r0
   35a18:	0252      	lsls	r2, r2, #9
   35a1a:	4313      	orrs	r3, r2
   35a1c:	01e2      	lsls	r2, r4, #7
   35a1e:	d556      	bpl.n	35ace <__aeabi_dmul+0x426>
   35a20:	2001      	movs	r0, #1
   35a22:	085a      	lsrs	r2, r3, #1
   35a24:	4003      	ands	r3, r0
   35a26:	4313      	orrs	r3, r2
   35a28:	07e2      	lsls	r2, r4, #31
   35a2a:	4313      	orrs	r3, r2
   35a2c:	0864      	lsrs	r4, r4, #1
   35a2e:	485a      	ldr	r0, [pc, #360]	; (35b98 <__aeabi_dmul+0x4f0>)
   35a30:	4460      	add	r0, ip
   35a32:	2800      	cmp	r0, #0
   35a34:	dd4d      	ble.n	35ad2 <__aeabi_dmul+0x42a>
   35a36:	075a      	lsls	r2, r3, #29
   35a38:	d009      	beq.n	35a4e <__aeabi_dmul+0x3a6>
   35a3a:	220f      	movs	r2, #15
   35a3c:	401a      	ands	r2, r3
   35a3e:	2a04      	cmp	r2, #4
   35a40:	d005      	beq.n	35a4e <__aeabi_dmul+0x3a6>
   35a42:	1d1a      	adds	r2, r3, #4
   35a44:	429a      	cmp	r2, r3
   35a46:	419b      	sbcs	r3, r3
   35a48:	425b      	negs	r3, r3
   35a4a:	18e4      	adds	r4, r4, r3
   35a4c:	0013      	movs	r3, r2
   35a4e:	01e2      	lsls	r2, r4, #7
   35a50:	d504      	bpl.n	35a5c <__aeabi_dmul+0x3b4>
   35a52:	2080      	movs	r0, #128	; 0x80
   35a54:	4a51      	ldr	r2, [pc, #324]	; (35b9c <__aeabi_dmul+0x4f4>)
   35a56:	00c0      	lsls	r0, r0, #3
   35a58:	4014      	ands	r4, r2
   35a5a:	4460      	add	r0, ip
   35a5c:	4a50      	ldr	r2, [pc, #320]	; (35ba0 <__aeabi_dmul+0x4f8>)
   35a5e:	4290      	cmp	r0, r2
   35a60:	dd00      	ble.n	35a64 <__aeabi_dmul+0x3bc>
   35a62:	e6e3      	b.n	3582c <__aeabi_dmul+0x184>
   35a64:	2501      	movs	r5, #1
   35a66:	08db      	lsrs	r3, r3, #3
   35a68:	0762      	lsls	r2, r4, #29
   35a6a:	431a      	orrs	r2, r3
   35a6c:	0264      	lsls	r4, r4, #9
   35a6e:	9b01      	ldr	r3, [sp, #4]
   35a70:	4691      	mov	r9, r2
   35a72:	0b22      	lsrs	r2, r4, #12
   35a74:	0544      	lsls	r4, r0, #21
   35a76:	0d64      	lsrs	r4, r4, #21
   35a78:	401d      	ands	r5, r3
   35a7a:	e67c      	b.n	35776 <__aeabi_dmul+0xce>
   35a7c:	2280      	movs	r2, #128	; 0x80
   35a7e:	4659      	mov	r1, fp
   35a80:	0312      	lsls	r2, r2, #12
   35a82:	4211      	tst	r1, r2
   35a84:	d008      	beq.n	35a98 <__aeabi_dmul+0x3f0>
   35a86:	4214      	tst	r4, r2
   35a88:	d106      	bne.n	35a98 <__aeabi_dmul+0x3f0>
   35a8a:	4322      	orrs	r2, r4
   35a8c:	0312      	lsls	r2, r2, #12
   35a8e:	0b12      	lsrs	r2, r2, #12
   35a90:	4645      	mov	r5, r8
   35a92:	4699      	mov	r9, r3
   35a94:	4c43      	ldr	r4, [pc, #268]	; (35ba4 <__aeabi_dmul+0x4fc>)
   35a96:	e66e      	b.n	35776 <__aeabi_dmul+0xce>
   35a98:	465b      	mov	r3, fp
   35a9a:	431a      	orrs	r2, r3
   35a9c:	0312      	lsls	r2, r2, #12
   35a9e:	0b12      	lsrs	r2, r2, #12
   35aa0:	4c40      	ldr	r4, [pc, #256]	; (35ba4 <__aeabi_dmul+0x4fc>)
   35aa2:	e668      	b.n	35776 <__aeabi_dmul+0xce>
   35aa4:	0003      	movs	r3, r0
   35aa6:	4654      	mov	r4, sl
   35aa8:	3b28      	subs	r3, #40	; 0x28
   35aaa:	409c      	lsls	r4, r3
   35aac:	2300      	movs	r3, #0
   35aae:	e6b9      	b.n	35824 <__aeabi_dmul+0x17c>
   35ab0:	f000 fc4e 	bl	36350 <__clzsi2>
   35ab4:	3020      	adds	r0, #32
   35ab6:	e6a6      	b.n	35806 <__aeabi_dmul+0x15e>
   35ab8:	0003      	movs	r3, r0
   35aba:	3b28      	subs	r3, #40	; 0x28
   35abc:	409f      	lsls	r7, r3
   35abe:	2300      	movs	r3, #0
   35ac0:	46bb      	mov	fp, r7
   35ac2:	4699      	mov	r9, r3
   35ac4:	e68a      	b.n	357dc <__aeabi_dmul+0x134>
   35ac6:	f000 fc43 	bl	36350 <__clzsi2>
   35aca:	3020      	adds	r0, #32
   35acc:	e674      	b.n	357b8 <__aeabi_dmul+0x110>
   35ace:	46b4      	mov	ip, r6
   35ad0:	e7ad      	b.n	35a2e <__aeabi_dmul+0x386>
   35ad2:	2501      	movs	r5, #1
   35ad4:	1a2a      	subs	r2, r5, r0
   35ad6:	2a38      	cmp	r2, #56	; 0x38
   35ad8:	dd06      	ble.n	35ae8 <__aeabi_dmul+0x440>
   35ada:	9b01      	ldr	r3, [sp, #4]
   35adc:	2400      	movs	r4, #0
   35ade:	401d      	ands	r5, r3
   35ae0:	2300      	movs	r3, #0
   35ae2:	2200      	movs	r2, #0
   35ae4:	4699      	mov	r9, r3
   35ae6:	e646      	b.n	35776 <__aeabi_dmul+0xce>
   35ae8:	2a1f      	cmp	r2, #31
   35aea:	dc21      	bgt.n	35b30 <__aeabi_dmul+0x488>
   35aec:	2520      	movs	r5, #32
   35aee:	0020      	movs	r0, r4
   35af0:	1aad      	subs	r5, r5, r2
   35af2:	001e      	movs	r6, r3
   35af4:	40ab      	lsls	r3, r5
   35af6:	40a8      	lsls	r0, r5
   35af8:	40d6      	lsrs	r6, r2
   35afa:	1e5d      	subs	r5, r3, #1
   35afc:	41ab      	sbcs	r3, r5
   35afe:	4330      	orrs	r0, r6
   35b00:	4318      	orrs	r0, r3
   35b02:	40d4      	lsrs	r4, r2
   35b04:	0743      	lsls	r3, r0, #29
   35b06:	d009      	beq.n	35b1c <__aeabi_dmul+0x474>
   35b08:	230f      	movs	r3, #15
   35b0a:	4003      	ands	r3, r0
   35b0c:	2b04      	cmp	r3, #4
   35b0e:	d005      	beq.n	35b1c <__aeabi_dmul+0x474>
   35b10:	0003      	movs	r3, r0
   35b12:	1d18      	adds	r0, r3, #4
   35b14:	4298      	cmp	r0, r3
   35b16:	419b      	sbcs	r3, r3
   35b18:	425b      	negs	r3, r3
   35b1a:	18e4      	adds	r4, r4, r3
   35b1c:	0223      	lsls	r3, r4, #8
   35b1e:	d521      	bpl.n	35b64 <__aeabi_dmul+0x4bc>
   35b20:	2501      	movs	r5, #1
   35b22:	9b01      	ldr	r3, [sp, #4]
   35b24:	2401      	movs	r4, #1
   35b26:	401d      	ands	r5, r3
   35b28:	2300      	movs	r3, #0
   35b2a:	2200      	movs	r2, #0
   35b2c:	4699      	mov	r9, r3
   35b2e:	e622      	b.n	35776 <__aeabi_dmul+0xce>
   35b30:	251f      	movs	r5, #31
   35b32:	0021      	movs	r1, r4
   35b34:	426d      	negs	r5, r5
   35b36:	1a28      	subs	r0, r5, r0
   35b38:	40c1      	lsrs	r1, r0
   35b3a:	0008      	movs	r0, r1
   35b3c:	2a20      	cmp	r2, #32
   35b3e:	d01d      	beq.n	35b7c <__aeabi_dmul+0x4d4>
   35b40:	355f      	adds	r5, #95	; 0x5f
   35b42:	1aaa      	subs	r2, r5, r2
   35b44:	4094      	lsls	r4, r2
   35b46:	4323      	orrs	r3, r4
   35b48:	1e5c      	subs	r4, r3, #1
   35b4a:	41a3      	sbcs	r3, r4
   35b4c:	2507      	movs	r5, #7
   35b4e:	4303      	orrs	r3, r0
   35b50:	401d      	ands	r5, r3
   35b52:	2200      	movs	r2, #0
   35b54:	2d00      	cmp	r5, #0
   35b56:	d009      	beq.n	35b6c <__aeabi_dmul+0x4c4>
   35b58:	220f      	movs	r2, #15
   35b5a:	2400      	movs	r4, #0
   35b5c:	401a      	ands	r2, r3
   35b5e:	0018      	movs	r0, r3
   35b60:	2a04      	cmp	r2, #4
   35b62:	d1d6      	bne.n	35b12 <__aeabi_dmul+0x46a>
   35b64:	0003      	movs	r3, r0
   35b66:	0765      	lsls	r5, r4, #29
   35b68:	0264      	lsls	r4, r4, #9
   35b6a:	0b22      	lsrs	r2, r4, #12
   35b6c:	08db      	lsrs	r3, r3, #3
   35b6e:	432b      	orrs	r3, r5
   35b70:	2501      	movs	r5, #1
   35b72:	4699      	mov	r9, r3
   35b74:	9b01      	ldr	r3, [sp, #4]
   35b76:	2400      	movs	r4, #0
   35b78:	401d      	ands	r5, r3
   35b7a:	e5fc      	b.n	35776 <__aeabi_dmul+0xce>
   35b7c:	2400      	movs	r4, #0
   35b7e:	e7e2      	b.n	35b46 <__aeabi_dmul+0x49e>
   35b80:	2280      	movs	r2, #128	; 0x80
   35b82:	2501      	movs	r5, #1
   35b84:	0312      	lsls	r2, r2, #12
   35b86:	4322      	orrs	r2, r4
   35b88:	9901      	ldr	r1, [sp, #4]
   35b8a:	0312      	lsls	r2, r2, #12
   35b8c:	0b12      	lsrs	r2, r2, #12
   35b8e:	400d      	ands	r5, r1
   35b90:	4699      	mov	r9, r3
   35b92:	4c04      	ldr	r4, [pc, #16]	; (35ba4 <__aeabi_dmul+0x4fc>)
   35b94:	e5ef      	b.n	35776 <__aeabi_dmul+0xce>
   35b96:	46c0      	nop			; (mov r8, r8)
   35b98:	000003ff 	.word	0x000003ff
   35b9c:	feffffff 	.word	0xfeffffff
   35ba0:	000007fe 	.word	0x000007fe
   35ba4:	000007ff 	.word	0x000007ff

00035ba8 <__aeabi_dsub>:
   35ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
   35baa:	4646      	mov	r6, r8
   35bac:	46d6      	mov	lr, sl
   35bae:	464f      	mov	r7, r9
   35bb0:	030c      	lsls	r4, r1, #12
   35bb2:	b5c0      	push	{r6, r7, lr}
   35bb4:	0fcd      	lsrs	r5, r1, #31
   35bb6:	004e      	lsls	r6, r1, #1
   35bb8:	0a61      	lsrs	r1, r4, #9
   35bba:	0f44      	lsrs	r4, r0, #29
   35bbc:	430c      	orrs	r4, r1
   35bbe:	00c1      	lsls	r1, r0, #3
   35bc0:	0058      	lsls	r0, r3, #1
   35bc2:	0d40      	lsrs	r0, r0, #21
   35bc4:	4684      	mov	ip, r0
   35bc6:	468a      	mov	sl, r1
   35bc8:	000f      	movs	r7, r1
   35bca:	0319      	lsls	r1, r3, #12
   35bcc:	0f50      	lsrs	r0, r2, #29
   35bce:	0a49      	lsrs	r1, r1, #9
   35bd0:	4301      	orrs	r1, r0
   35bd2:	48c6      	ldr	r0, [pc, #792]	; (35eec <__aeabi_dsub+0x344>)
   35bd4:	0d76      	lsrs	r6, r6, #21
   35bd6:	46a8      	mov	r8, r5
   35bd8:	0fdb      	lsrs	r3, r3, #31
   35bda:	00d2      	lsls	r2, r2, #3
   35bdc:	4584      	cmp	ip, r0
   35bde:	d100      	bne.n	35be2 <__aeabi_dsub+0x3a>
   35be0:	e0d8      	b.n	35d94 <__aeabi_dsub+0x1ec>
   35be2:	2001      	movs	r0, #1
   35be4:	4043      	eors	r3, r0
   35be6:	42ab      	cmp	r3, r5
   35be8:	d100      	bne.n	35bec <__aeabi_dsub+0x44>
   35bea:	e0a6      	b.n	35d3a <__aeabi_dsub+0x192>
   35bec:	4660      	mov	r0, ip
   35bee:	1a35      	subs	r5, r6, r0
   35bf0:	2d00      	cmp	r5, #0
   35bf2:	dc00      	bgt.n	35bf6 <__aeabi_dsub+0x4e>
   35bf4:	e105      	b.n	35e02 <__aeabi_dsub+0x25a>
   35bf6:	2800      	cmp	r0, #0
   35bf8:	d110      	bne.n	35c1c <__aeabi_dsub+0x74>
   35bfa:	000b      	movs	r3, r1
   35bfc:	4313      	orrs	r3, r2
   35bfe:	d100      	bne.n	35c02 <__aeabi_dsub+0x5a>
   35c00:	e0d7      	b.n	35db2 <__aeabi_dsub+0x20a>
   35c02:	1e6b      	subs	r3, r5, #1
   35c04:	2b00      	cmp	r3, #0
   35c06:	d000      	beq.n	35c0a <__aeabi_dsub+0x62>
   35c08:	e14b      	b.n	35ea2 <__aeabi_dsub+0x2fa>
   35c0a:	4653      	mov	r3, sl
   35c0c:	1a9f      	subs	r7, r3, r2
   35c0e:	45ba      	cmp	sl, r7
   35c10:	4180      	sbcs	r0, r0
   35c12:	1a64      	subs	r4, r4, r1
   35c14:	4240      	negs	r0, r0
   35c16:	1a24      	subs	r4, r4, r0
   35c18:	2601      	movs	r6, #1
   35c1a:	e01e      	b.n	35c5a <__aeabi_dsub+0xb2>
   35c1c:	4bb3      	ldr	r3, [pc, #716]	; (35eec <__aeabi_dsub+0x344>)
   35c1e:	429e      	cmp	r6, r3
   35c20:	d048      	beq.n	35cb4 <__aeabi_dsub+0x10c>
   35c22:	2380      	movs	r3, #128	; 0x80
   35c24:	041b      	lsls	r3, r3, #16
   35c26:	4319      	orrs	r1, r3
   35c28:	2d38      	cmp	r5, #56	; 0x38
   35c2a:	dd00      	ble.n	35c2e <__aeabi_dsub+0x86>
   35c2c:	e119      	b.n	35e62 <__aeabi_dsub+0x2ba>
   35c2e:	2d1f      	cmp	r5, #31
   35c30:	dd00      	ble.n	35c34 <__aeabi_dsub+0x8c>
   35c32:	e14c      	b.n	35ece <__aeabi_dsub+0x326>
   35c34:	2320      	movs	r3, #32
   35c36:	000f      	movs	r7, r1
   35c38:	1b5b      	subs	r3, r3, r5
   35c3a:	0010      	movs	r0, r2
   35c3c:	409a      	lsls	r2, r3
   35c3e:	409f      	lsls	r7, r3
   35c40:	40e8      	lsrs	r0, r5
   35c42:	1e53      	subs	r3, r2, #1
   35c44:	419a      	sbcs	r2, r3
   35c46:	40e9      	lsrs	r1, r5
   35c48:	4307      	orrs	r7, r0
   35c4a:	4317      	orrs	r7, r2
   35c4c:	4653      	mov	r3, sl
   35c4e:	1bdf      	subs	r7, r3, r7
   35c50:	1a61      	subs	r1, r4, r1
   35c52:	45ba      	cmp	sl, r7
   35c54:	41a4      	sbcs	r4, r4
   35c56:	4264      	negs	r4, r4
   35c58:	1b0c      	subs	r4, r1, r4
   35c5a:	0223      	lsls	r3, r4, #8
   35c5c:	d400      	bmi.n	35c60 <__aeabi_dsub+0xb8>
   35c5e:	e0c5      	b.n	35dec <__aeabi_dsub+0x244>
   35c60:	0264      	lsls	r4, r4, #9
   35c62:	0a65      	lsrs	r5, r4, #9
   35c64:	2d00      	cmp	r5, #0
   35c66:	d100      	bne.n	35c6a <__aeabi_dsub+0xc2>
   35c68:	e0f6      	b.n	35e58 <__aeabi_dsub+0x2b0>
   35c6a:	0028      	movs	r0, r5
   35c6c:	f000 fb70 	bl	36350 <__clzsi2>
   35c70:	0003      	movs	r3, r0
   35c72:	3b08      	subs	r3, #8
   35c74:	2b1f      	cmp	r3, #31
   35c76:	dd00      	ble.n	35c7a <__aeabi_dsub+0xd2>
   35c78:	e0e9      	b.n	35e4e <__aeabi_dsub+0x2a6>
   35c7a:	2220      	movs	r2, #32
   35c7c:	003c      	movs	r4, r7
   35c7e:	1ad2      	subs	r2, r2, r3
   35c80:	409d      	lsls	r5, r3
   35c82:	40d4      	lsrs	r4, r2
   35c84:	409f      	lsls	r7, r3
   35c86:	4325      	orrs	r5, r4
   35c88:	429e      	cmp	r6, r3
   35c8a:	dd00      	ble.n	35c8e <__aeabi_dsub+0xe6>
   35c8c:	e0db      	b.n	35e46 <__aeabi_dsub+0x29e>
   35c8e:	1b9e      	subs	r6, r3, r6
   35c90:	1c73      	adds	r3, r6, #1
   35c92:	2b1f      	cmp	r3, #31
   35c94:	dd00      	ble.n	35c98 <__aeabi_dsub+0xf0>
   35c96:	e10a      	b.n	35eae <__aeabi_dsub+0x306>
   35c98:	2220      	movs	r2, #32
   35c9a:	0038      	movs	r0, r7
   35c9c:	1ad2      	subs	r2, r2, r3
   35c9e:	0029      	movs	r1, r5
   35ca0:	4097      	lsls	r7, r2
   35ca2:	002c      	movs	r4, r5
   35ca4:	4091      	lsls	r1, r2
   35ca6:	40d8      	lsrs	r0, r3
   35ca8:	1e7a      	subs	r2, r7, #1
   35caa:	4197      	sbcs	r7, r2
   35cac:	40dc      	lsrs	r4, r3
   35cae:	2600      	movs	r6, #0
   35cb0:	4301      	orrs	r1, r0
   35cb2:	430f      	orrs	r7, r1
   35cb4:	077b      	lsls	r3, r7, #29
   35cb6:	d009      	beq.n	35ccc <__aeabi_dsub+0x124>
   35cb8:	230f      	movs	r3, #15
   35cba:	403b      	ands	r3, r7
   35cbc:	2b04      	cmp	r3, #4
   35cbe:	d005      	beq.n	35ccc <__aeabi_dsub+0x124>
   35cc0:	1d3b      	adds	r3, r7, #4
   35cc2:	42bb      	cmp	r3, r7
   35cc4:	41bf      	sbcs	r7, r7
   35cc6:	427f      	negs	r7, r7
   35cc8:	19e4      	adds	r4, r4, r7
   35cca:	001f      	movs	r7, r3
   35ccc:	0223      	lsls	r3, r4, #8
   35cce:	d525      	bpl.n	35d1c <__aeabi_dsub+0x174>
   35cd0:	4b86      	ldr	r3, [pc, #536]	; (35eec <__aeabi_dsub+0x344>)
   35cd2:	3601      	adds	r6, #1
   35cd4:	429e      	cmp	r6, r3
   35cd6:	d100      	bne.n	35cda <__aeabi_dsub+0x132>
   35cd8:	e0af      	b.n	35e3a <__aeabi_dsub+0x292>
   35cda:	4b85      	ldr	r3, [pc, #532]	; (35ef0 <__aeabi_dsub+0x348>)
   35cdc:	2501      	movs	r5, #1
   35cde:	401c      	ands	r4, r3
   35ce0:	4643      	mov	r3, r8
   35ce2:	0762      	lsls	r2, r4, #29
   35ce4:	08ff      	lsrs	r7, r7, #3
   35ce6:	0264      	lsls	r4, r4, #9
   35ce8:	0576      	lsls	r6, r6, #21
   35cea:	4317      	orrs	r7, r2
   35cec:	0b24      	lsrs	r4, r4, #12
   35cee:	0d76      	lsrs	r6, r6, #21
   35cf0:	401d      	ands	r5, r3
   35cf2:	2100      	movs	r1, #0
   35cf4:	0324      	lsls	r4, r4, #12
   35cf6:	0b23      	lsrs	r3, r4, #12
   35cf8:	0d0c      	lsrs	r4, r1, #20
   35cfa:	4a7e      	ldr	r2, [pc, #504]	; (35ef4 <__aeabi_dsub+0x34c>)
   35cfc:	0524      	lsls	r4, r4, #20
   35cfe:	431c      	orrs	r4, r3
   35d00:	4014      	ands	r4, r2
   35d02:	0533      	lsls	r3, r6, #20
   35d04:	4323      	orrs	r3, r4
   35d06:	005b      	lsls	r3, r3, #1
   35d08:	07ed      	lsls	r5, r5, #31
   35d0a:	085b      	lsrs	r3, r3, #1
   35d0c:	432b      	orrs	r3, r5
   35d0e:	0038      	movs	r0, r7
   35d10:	0019      	movs	r1, r3
   35d12:	bc1c      	pop	{r2, r3, r4}
   35d14:	4690      	mov	r8, r2
   35d16:	4699      	mov	r9, r3
   35d18:	46a2      	mov	sl, r4
   35d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35d1c:	2501      	movs	r5, #1
   35d1e:	4643      	mov	r3, r8
   35d20:	0762      	lsls	r2, r4, #29
   35d22:	08ff      	lsrs	r7, r7, #3
   35d24:	4317      	orrs	r7, r2
   35d26:	08e4      	lsrs	r4, r4, #3
   35d28:	401d      	ands	r5, r3
   35d2a:	4b70      	ldr	r3, [pc, #448]	; (35eec <__aeabi_dsub+0x344>)
   35d2c:	429e      	cmp	r6, r3
   35d2e:	d036      	beq.n	35d9e <__aeabi_dsub+0x1f6>
   35d30:	0324      	lsls	r4, r4, #12
   35d32:	0576      	lsls	r6, r6, #21
   35d34:	0b24      	lsrs	r4, r4, #12
   35d36:	0d76      	lsrs	r6, r6, #21
   35d38:	e7db      	b.n	35cf2 <__aeabi_dsub+0x14a>
   35d3a:	4663      	mov	r3, ip
   35d3c:	1af3      	subs	r3, r6, r3
   35d3e:	2b00      	cmp	r3, #0
   35d40:	dc00      	bgt.n	35d44 <__aeabi_dsub+0x19c>
   35d42:	e094      	b.n	35e6e <__aeabi_dsub+0x2c6>
   35d44:	4660      	mov	r0, ip
   35d46:	2800      	cmp	r0, #0
   35d48:	d035      	beq.n	35db6 <__aeabi_dsub+0x20e>
   35d4a:	4868      	ldr	r0, [pc, #416]	; (35eec <__aeabi_dsub+0x344>)
   35d4c:	4286      	cmp	r6, r0
   35d4e:	d0b1      	beq.n	35cb4 <__aeabi_dsub+0x10c>
   35d50:	2780      	movs	r7, #128	; 0x80
   35d52:	043f      	lsls	r7, r7, #16
   35d54:	4339      	orrs	r1, r7
   35d56:	2b38      	cmp	r3, #56	; 0x38
   35d58:	dc00      	bgt.n	35d5c <__aeabi_dsub+0x1b4>
   35d5a:	e0fd      	b.n	35f58 <__aeabi_dsub+0x3b0>
   35d5c:	430a      	orrs	r2, r1
   35d5e:	0017      	movs	r7, r2
   35d60:	2100      	movs	r1, #0
   35d62:	1e7a      	subs	r2, r7, #1
   35d64:	4197      	sbcs	r7, r2
   35d66:	4457      	add	r7, sl
   35d68:	4557      	cmp	r7, sl
   35d6a:	4180      	sbcs	r0, r0
   35d6c:	1909      	adds	r1, r1, r4
   35d6e:	4244      	negs	r4, r0
   35d70:	190c      	adds	r4, r1, r4
   35d72:	0223      	lsls	r3, r4, #8
   35d74:	d53a      	bpl.n	35dec <__aeabi_dsub+0x244>
   35d76:	4b5d      	ldr	r3, [pc, #372]	; (35eec <__aeabi_dsub+0x344>)
   35d78:	3601      	adds	r6, #1
   35d7a:	429e      	cmp	r6, r3
   35d7c:	d100      	bne.n	35d80 <__aeabi_dsub+0x1d8>
   35d7e:	e14b      	b.n	36018 <__aeabi_dsub+0x470>
   35d80:	2201      	movs	r2, #1
   35d82:	4b5b      	ldr	r3, [pc, #364]	; (35ef0 <__aeabi_dsub+0x348>)
   35d84:	401c      	ands	r4, r3
   35d86:	087b      	lsrs	r3, r7, #1
   35d88:	4017      	ands	r7, r2
   35d8a:	431f      	orrs	r7, r3
   35d8c:	07e2      	lsls	r2, r4, #31
   35d8e:	4317      	orrs	r7, r2
   35d90:	0864      	lsrs	r4, r4, #1
   35d92:	e78f      	b.n	35cb4 <__aeabi_dsub+0x10c>
   35d94:	0008      	movs	r0, r1
   35d96:	4310      	orrs	r0, r2
   35d98:	d000      	beq.n	35d9c <__aeabi_dsub+0x1f4>
   35d9a:	e724      	b.n	35be6 <__aeabi_dsub+0x3e>
   35d9c:	e721      	b.n	35be2 <__aeabi_dsub+0x3a>
   35d9e:	0023      	movs	r3, r4
   35da0:	433b      	orrs	r3, r7
   35da2:	d100      	bne.n	35da6 <__aeabi_dsub+0x1fe>
   35da4:	e1b9      	b.n	3611a <__aeabi_dsub+0x572>
   35da6:	2280      	movs	r2, #128	; 0x80
   35da8:	0312      	lsls	r2, r2, #12
   35daa:	4314      	orrs	r4, r2
   35dac:	0324      	lsls	r4, r4, #12
   35dae:	0b24      	lsrs	r4, r4, #12
   35db0:	e79f      	b.n	35cf2 <__aeabi_dsub+0x14a>
   35db2:	002e      	movs	r6, r5
   35db4:	e77e      	b.n	35cb4 <__aeabi_dsub+0x10c>
   35db6:	0008      	movs	r0, r1
   35db8:	4310      	orrs	r0, r2
   35dba:	d100      	bne.n	35dbe <__aeabi_dsub+0x216>
   35dbc:	e0ca      	b.n	35f54 <__aeabi_dsub+0x3ac>
   35dbe:	1e58      	subs	r0, r3, #1
   35dc0:	4684      	mov	ip, r0
   35dc2:	2800      	cmp	r0, #0
   35dc4:	d000      	beq.n	35dc8 <__aeabi_dsub+0x220>
   35dc6:	e0e7      	b.n	35f98 <__aeabi_dsub+0x3f0>
   35dc8:	4452      	add	r2, sl
   35dca:	4552      	cmp	r2, sl
   35dcc:	4180      	sbcs	r0, r0
   35dce:	1864      	adds	r4, r4, r1
   35dd0:	4240      	negs	r0, r0
   35dd2:	1824      	adds	r4, r4, r0
   35dd4:	0017      	movs	r7, r2
   35dd6:	2601      	movs	r6, #1
   35dd8:	0223      	lsls	r3, r4, #8
   35dda:	d507      	bpl.n	35dec <__aeabi_dsub+0x244>
   35ddc:	2602      	movs	r6, #2
   35dde:	e7cf      	b.n	35d80 <__aeabi_dsub+0x1d8>
   35de0:	4664      	mov	r4, ip
   35de2:	432c      	orrs	r4, r5
   35de4:	d100      	bne.n	35de8 <__aeabi_dsub+0x240>
   35de6:	e1b3      	b.n	36150 <__aeabi_dsub+0x5a8>
   35de8:	002c      	movs	r4, r5
   35dea:	4667      	mov	r7, ip
   35dec:	077b      	lsls	r3, r7, #29
   35dee:	d000      	beq.n	35df2 <__aeabi_dsub+0x24a>
   35df0:	e762      	b.n	35cb8 <__aeabi_dsub+0x110>
   35df2:	0763      	lsls	r3, r4, #29
   35df4:	08ff      	lsrs	r7, r7, #3
   35df6:	431f      	orrs	r7, r3
   35df8:	2501      	movs	r5, #1
   35dfa:	4643      	mov	r3, r8
   35dfc:	08e4      	lsrs	r4, r4, #3
   35dfe:	401d      	ands	r5, r3
   35e00:	e793      	b.n	35d2a <__aeabi_dsub+0x182>
   35e02:	2d00      	cmp	r5, #0
   35e04:	d178      	bne.n	35ef8 <__aeabi_dsub+0x350>
   35e06:	1c75      	adds	r5, r6, #1
   35e08:	056d      	lsls	r5, r5, #21
   35e0a:	0d6d      	lsrs	r5, r5, #21
   35e0c:	2d01      	cmp	r5, #1
   35e0e:	dc00      	bgt.n	35e12 <__aeabi_dsub+0x26a>
   35e10:	e0f2      	b.n	35ff8 <__aeabi_dsub+0x450>
   35e12:	4650      	mov	r0, sl
   35e14:	1a80      	subs	r0, r0, r2
   35e16:	4582      	cmp	sl, r0
   35e18:	41bf      	sbcs	r7, r7
   35e1a:	1a65      	subs	r5, r4, r1
   35e1c:	427f      	negs	r7, r7
   35e1e:	1bed      	subs	r5, r5, r7
   35e20:	4684      	mov	ip, r0
   35e22:	0228      	lsls	r0, r5, #8
   35e24:	d400      	bmi.n	35e28 <__aeabi_dsub+0x280>
   35e26:	e08c      	b.n	35f42 <__aeabi_dsub+0x39a>
   35e28:	4650      	mov	r0, sl
   35e2a:	1a17      	subs	r7, r2, r0
   35e2c:	42ba      	cmp	r2, r7
   35e2e:	4192      	sbcs	r2, r2
   35e30:	1b0c      	subs	r4, r1, r4
   35e32:	4255      	negs	r5, r2
   35e34:	1b65      	subs	r5, r4, r5
   35e36:	4698      	mov	r8, r3
   35e38:	e714      	b.n	35c64 <__aeabi_dsub+0xbc>
   35e3a:	2501      	movs	r5, #1
   35e3c:	4643      	mov	r3, r8
   35e3e:	2400      	movs	r4, #0
   35e40:	401d      	ands	r5, r3
   35e42:	2700      	movs	r7, #0
   35e44:	e755      	b.n	35cf2 <__aeabi_dsub+0x14a>
   35e46:	4c2a      	ldr	r4, [pc, #168]	; (35ef0 <__aeabi_dsub+0x348>)
   35e48:	1af6      	subs	r6, r6, r3
   35e4a:	402c      	ands	r4, r5
   35e4c:	e732      	b.n	35cb4 <__aeabi_dsub+0x10c>
   35e4e:	003d      	movs	r5, r7
   35e50:	3828      	subs	r0, #40	; 0x28
   35e52:	4085      	lsls	r5, r0
   35e54:	2700      	movs	r7, #0
   35e56:	e717      	b.n	35c88 <__aeabi_dsub+0xe0>
   35e58:	0038      	movs	r0, r7
   35e5a:	f000 fa79 	bl	36350 <__clzsi2>
   35e5e:	3020      	adds	r0, #32
   35e60:	e706      	b.n	35c70 <__aeabi_dsub+0xc8>
   35e62:	430a      	orrs	r2, r1
   35e64:	0017      	movs	r7, r2
   35e66:	2100      	movs	r1, #0
   35e68:	1e7a      	subs	r2, r7, #1
   35e6a:	4197      	sbcs	r7, r2
   35e6c:	e6ee      	b.n	35c4c <__aeabi_dsub+0xa4>
   35e6e:	2b00      	cmp	r3, #0
   35e70:	d000      	beq.n	35e74 <__aeabi_dsub+0x2cc>
   35e72:	e0e5      	b.n	36040 <__aeabi_dsub+0x498>
   35e74:	1c73      	adds	r3, r6, #1
   35e76:	469c      	mov	ip, r3
   35e78:	055b      	lsls	r3, r3, #21
   35e7a:	0d5b      	lsrs	r3, r3, #21
   35e7c:	2b01      	cmp	r3, #1
   35e7e:	dc00      	bgt.n	35e82 <__aeabi_dsub+0x2da>
   35e80:	e09f      	b.n	35fc2 <__aeabi_dsub+0x41a>
   35e82:	4b1a      	ldr	r3, [pc, #104]	; (35eec <__aeabi_dsub+0x344>)
   35e84:	459c      	cmp	ip, r3
   35e86:	d100      	bne.n	35e8a <__aeabi_dsub+0x2e2>
   35e88:	e0c5      	b.n	36016 <__aeabi_dsub+0x46e>
   35e8a:	4452      	add	r2, sl
   35e8c:	4552      	cmp	r2, sl
   35e8e:	4180      	sbcs	r0, r0
   35e90:	1864      	adds	r4, r4, r1
   35e92:	4240      	negs	r0, r0
   35e94:	1824      	adds	r4, r4, r0
   35e96:	07e7      	lsls	r7, r4, #31
   35e98:	0852      	lsrs	r2, r2, #1
   35e9a:	4317      	orrs	r7, r2
   35e9c:	0864      	lsrs	r4, r4, #1
   35e9e:	4666      	mov	r6, ip
   35ea0:	e708      	b.n	35cb4 <__aeabi_dsub+0x10c>
   35ea2:	4812      	ldr	r0, [pc, #72]	; (35eec <__aeabi_dsub+0x344>)
   35ea4:	4285      	cmp	r5, r0
   35ea6:	d100      	bne.n	35eaa <__aeabi_dsub+0x302>
   35ea8:	e085      	b.n	35fb6 <__aeabi_dsub+0x40e>
   35eaa:	001d      	movs	r5, r3
   35eac:	e6bc      	b.n	35c28 <__aeabi_dsub+0x80>
   35eae:	0029      	movs	r1, r5
   35eb0:	3e1f      	subs	r6, #31
   35eb2:	40f1      	lsrs	r1, r6
   35eb4:	2b20      	cmp	r3, #32
   35eb6:	d100      	bne.n	35eba <__aeabi_dsub+0x312>
   35eb8:	e07f      	b.n	35fba <__aeabi_dsub+0x412>
   35eba:	2240      	movs	r2, #64	; 0x40
   35ebc:	1ad3      	subs	r3, r2, r3
   35ebe:	409d      	lsls	r5, r3
   35ec0:	432f      	orrs	r7, r5
   35ec2:	1e7d      	subs	r5, r7, #1
   35ec4:	41af      	sbcs	r7, r5
   35ec6:	2400      	movs	r4, #0
   35ec8:	430f      	orrs	r7, r1
   35eca:	2600      	movs	r6, #0
   35ecc:	e78e      	b.n	35dec <__aeabi_dsub+0x244>
   35ece:	002b      	movs	r3, r5
   35ed0:	000f      	movs	r7, r1
   35ed2:	3b20      	subs	r3, #32
   35ed4:	40df      	lsrs	r7, r3
   35ed6:	2d20      	cmp	r5, #32
   35ed8:	d071      	beq.n	35fbe <__aeabi_dsub+0x416>
   35eda:	2340      	movs	r3, #64	; 0x40
   35edc:	1b5d      	subs	r5, r3, r5
   35ede:	40a9      	lsls	r1, r5
   35ee0:	430a      	orrs	r2, r1
   35ee2:	1e51      	subs	r1, r2, #1
   35ee4:	418a      	sbcs	r2, r1
   35ee6:	2100      	movs	r1, #0
   35ee8:	4317      	orrs	r7, r2
   35eea:	e6af      	b.n	35c4c <__aeabi_dsub+0xa4>
   35eec:	000007ff 	.word	0x000007ff
   35ef0:	ff7fffff 	.word	0xff7fffff
   35ef4:	800fffff 	.word	0x800fffff
   35ef8:	2e00      	cmp	r6, #0
   35efa:	d03e      	beq.n	35f7a <__aeabi_dsub+0x3d2>
   35efc:	4eb3      	ldr	r6, [pc, #716]	; (361cc <__aeabi_dsub+0x624>)
   35efe:	45b4      	cmp	ip, r6
   35f00:	d045      	beq.n	35f8e <__aeabi_dsub+0x3e6>
   35f02:	2680      	movs	r6, #128	; 0x80
   35f04:	0436      	lsls	r6, r6, #16
   35f06:	426d      	negs	r5, r5
   35f08:	4334      	orrs	r4, r6
   35f0a:	2d38      	cmp	r5, #56	; 0x38
   35f0c:	dd00      	ble.n	35f10 <__aeabi_dsub+0x368>
   35f0e:	e0a8      	b.n	36062 <__aeabi_dsub+0x4ba>
   35f10:	2d1f      	cmp	r5, #31
   35f12:	dd00      	ble.n	35f16 <__aeabi_dsub+0x36e>
   35f14:	e11f      	b.n	36156 <__aeabi_dsub+0x5ae>
   35f16:	2620      	movs	r6, #32
   35f18:	0027      	movs	r7, r4
   35f1a:	4650      	mov	r0, sl
   35f1c:	1b76      	subs	r6, r6, r5
   35f1e:	40b7      	lsls	r7, r6
   35f20:	40e8      	lsrs	r0, r5
   35f22:	4307      	orrs	r7, r0
   35f24:	4650      	mov	r0, sl
   35f26:	40b0      	lsls	r0, r6
   35f28:	1e46      	subs	r6, r0, #1
   35f2a:	41b0      	sbcs	r0, r6
   35f2c:	40ec      	lsrs	r4, r5
   35f2e:	4338      	orrs	r0, r7
   35f30:	1a17      	subs	r7, r2, r0
   35f32:	42ba      	cmp	r2, r7
   35f34:	4192      	sbcs	r2, r2
   35f36:	1b0c      	subs	r4, r1, r4
   35f38:	4252      	negs	r2, r2
   35f3a:	1aa4      	subs	r4, r4, r2
   35f3c:	4666      	mov	r6, ip
   35f3e:	4698      	mov	r8, r3
   35f40:	e68b      	b.n	35c5a <__aeabi_dsub+0xb2>
   35f42:	4664      	mov	r4, ip
   35f44:	4667      	mov	r7, ip
   35f46:	432c      	orrs	r4, r5
   35f48:	d000      	beq.n	35f4c <__aeabi_dsub+0x3a4>
   35f4a:	e68b      	b.n	35c64 <__aeabi_dsub+0xbc>
   35f4c:	2500      	movs	r5, #0
   35f4e:	2600      	movs	r6, #0
   35f50:	2700      	movs	r7, #0
   35f52:	e6ea      	b.n	35d2a <__aeabi_dsub+0x182>
   35f54:	001e      	movs	r6, r3
   35f56:	e6ad      	b.n	35cb4 <__aeabi_dsub+0x10c>
   35f58:	2b1f      	cmp	r3, #31
   35f5a:	dc60      	bgt.n	3601e <__aeabi_dsub+0x476>
   35f5c:	2720      	movs	r7, #32
   35f5e:	1af8      	subs	r0, r7, r3
   35f60:	000f      	movs	r7, r1
   35f62:	4684      	mov	ip, r0
   35f64:	4087      	lsls	r7, r0
   35f66:	0010      	movs	r0, r2
   35f68:	40d8      	lsrs	r0, r3
   35f6a:	4307      	orrs	r7, r0
   35f6c:	4660      	mov	r0, ip
   35f6e:	4082      	lsls	r2, r0
   35f70:	1e50      	subs	r0, r2, #1
   35f72:	4182      	sbcs	r2, r0
   35f74:	40d9      	lsrs	r1, r3
   35f76:	4317      	orrs	r7, r2
   35f78:	e6f5      	b.n	35d66 <__aeabi_dsub+0x1be>
   35f7a:	0026      	movs	r6, r4
   35f7c:	4650      	mov	r0, sl
   35f7e:	4306      	orrs	r6, r0
   35f80:	d005      	beq.n	35f8e <__aeabi_dsub+0x3e6>
   35f82:	43ed      	mvns	r5, r5
   35f84:	2d00      	cmp	r5, #0
   35f86:	d0d3      	beq.n	35f30 <__aeabi_dsub+0x388>
   35f88:	4e90      	ldr	r6, [pc, #576]	; (361cc <__aeabi_dsub+0x624>)
   35f8a:	45b4      	cmp	ip, r6
   35f8c:	d1bd      	bne.n	35f0a <__aeabi_dsub+0x362>
   35f8e:	000c      	movs	r4, r1
   35f90:	0017      	movs	r7, r2
   35f92:	4666      	mov	r6, ip
   35f94:	4698      	mov	r8, r3
   35f96:	e68d      	b.n	35cb4 <__aeabi_dsub+0x10c>
   35f98:	488c      	ldr	r0, [pc, #560]	; (361cc <__aeabi_dsub+0x624>)
   35f9a:	4283      	cmp	r3, r0
   35f9c:	d00b      	beq.n	35fb6 <__aeabi_dsub+0x40e>
   35f9e:	4663      	mov	r3, ip
   35fa0:	e6d9      	b.n	35d56 <__aeabi_dsub+0x1ae>
   35fa2:	2d00      	cmp	r5, #0
   35fa4:	d000      	beq.n	35fa8 <__aeabi_dsub+0x400>
   35fa6:	e096      	b.n	360d6 <__aeabi_dsub+0x52e>
   35fa8:	0008      	movs	r0, r1
   35faa:	4310      	orrs	r0, r2
   35fac:	d100      	bne.n	35fb0 <__aeabi_dsub+0x408>
   35fae:	e0e2      	b.n	36176 <__aeabi_dsub+0x5ce>
   35fb0:	000c      	movs	r4, r1
   35fb2:	0017      	movs	r7, r2
   35fb4:	4698      	mov	r8, r3
   35fb6:	4e85      	ldr	r6, [pc, #532]	; (361cc <__aeabi_dsub+0x624>)
   35fb8:	e67c      	b.n	35cb4 <__aeabi_dsub+0x10c>
   35fba:	2500      	movs	r5, #0
   35fbc:	e780      	b.n	35ec0 <__aeabi_dsub+0x318>
   35fbe:	2100      	movs	r1, #0
   35fc0:	e78e      	b.n	35ee0 <__aeabi_dsub+0x338>
   35fc2:	0023      	movs	r3, r4
   35fc4:	4650      	mov	r0, sl
   35fc6:	4303      	orrs	r3, r0
   35fc8:	2e00      	cmp	r6, #0
   35fca:	d000      	beq.n	35fce <__aeabi_dsub+0x426>
   35fcc:	e0a8      	b.n	36120 <__aeabi_dsub+0x578>
   35fce:	2b00      	cmp	r3, #0
   35fd0:	d100      	bne.n	35fd4 <__aeabi_dsub+0x42c>
   35fd2:	e0de      	b.n	36192 <__aeabi_dsub+0x5ea>
   35fd4:	000b      	movs	r3, r1
   35fd6:	4313      	orrs	r3, r2
   35fd8:	d100      	bne.n	35fdc <__aeabi_dsub+0x434>
   35fda:	e66b      	b.n	35cb4 <__aeabi_dsub+0x10c>
   35fdc:	4452      	add	r2, sl
   35fde:	4552      	cmp	r2, sl
   35fe0:	4180      	sbcs	r0, r0
   35fe2:	1864      	adds	r4, r4, r1
   35fe4:	4240      	negs	r0, r0
   35fe6:	1824      	adds	r4, r4, r0
   35fe8:	0017      	movs	r7, r2
   35fea:	0223      	lsls	r3, r4, #8
   35fec:	d400      	bmi.n	35ff0 <__aeabi_dsub+0x448>
   35fee:	e6fd      	b.n	35dec <__aeabi_dsub+0x244>
   35ff0:	4b77      	ldr	r3, [pc, #476]	; (361d0 <__aeabi_dsub+0x628>)
   35ff2:	4666      	mov	r6, ip
   35ff4:	401c      	ands	r4, r3
   35ff6:	e65d      	b.n	35cb4 <__aeabi_dsub+0x10c>
   35ff8:	0025      	movs	r5, r4
   35ffa:	4650      	mov	r0, sl
   35ffc:	4305      	orrs	r5, r0
   35ffe:	2e00      	cmp	r6, #0
   36000:	d1cf      	bne.n	35fa2 <__aeabi_dsub+0x3fa>
   36002:	2d00      	cmp	r5, #0
   36004:	d14f      	bne.n	360a6 <__aeabi_dsub+0x4fe>
   36006:	000c      	movs	r4, r1
   36008:	4314      	orrs	r4, r2
   3600a:	d100      	bne.n	3600e <__aeabi_dsub+0x466>
   3600c:	e0a0      	b.n	36150 <__aeabi_dsub+0x5a8>
   3600e:	000c      	movs	r4, r1
   36010:	0017      	movs	r7, r2
   36012:	4698      	mov	r8, r3
   36014:	e64e      	b.n	35cb4 <__aeabi_dsub+0x10c>
   36016:	4666      	mov	r6, ip
   36018:	2400      	movs	r4, #0
   3601a:	2700      	movs	r7, #0
   3601c:	e685      	b.n	35d2a <__aeabi_dsub+0x182>
   3601e:	001f      	movs	r7, r3
   36020:	0008      	movs	r0, r1
   36022:	3f20      	subs	r7, #32
   36024:	40f8      	lsrs	r0, r7
   36026:	0007      	movs	r7, r0
   36028:	2b20      	cmp	r3, #32
   3602a:	d100      	bne.n	3602e <__aeabi_dsub+0x486>
   3602c:	e08e      	b.n	3614c <__aeabi_dsub+0x5a4>
   3602e:	2040      	movs	r0, #64	; 0x40
   36030:	1ac3      	subs	r3, r0, r3
   36032:	4099      	lsls	r1, r3
   36034:	430a      	orrs	r2, r1
   36036:	1e51      	subs	r1, r2, #1
   36038:	418a      	sbcs	r2, r1
   3603a:	2100      	movs	r1, #0
   3603c:	4317      	orrs	r7, r2
   3603e:	e692      	b.n	35d66 <__aeabi_dsub+0x1be>
   36040:	2e00      	cmp	r6, #0
   36042:	d114      	bne.n	3606e <__aeabi_dsub+0x4c6>
   36044:	0026      	movs	r6, r4
   36046:	4650      	mov	r0, sl
   36048:	4306      	orrs	r6, r0
   3604a:	d062      	beq.n	36112 <__aeabi_dsub+0x56a>
   3604c:	43db      	mvns	r3, r3
   3604e:	2b00      	cmp	r3, #0
   36050:	d15c      	bne.n	3610c <__aeabi_dsub+0x564>
   36052:	1887      	adds	r7, r0, r2
   36054:	4297      	cmp	r7, r2
   36056:	4192      	sbcs	r2, r2
   36058:	1864      	adds	r4, r4, r1
   3605a:	4252      	negs	r2, r2
   3605c:	18a4      	adds	r4, r4, r2
   3605e:	4666      	mov	r6, ip
   36060:	e687      	b.n	35d72 <__aeabi_dsub+0x1ca>
   36062:	4650      	mov	r0, sl
   36064:	4320      	orrs	r0, r4
   36066:	1e44      	subs	r4, r0, #1
   36068:	41a0      	sbcs	r0, r4
   3606a:	2400      	movs	r4, #0
   3606c:	e760      	b.n	35f30 <__aeabi_dsub+0x388>
   3606e:	4e57      	ldr	r6, [pc, #348]	; (361cc <__aeabi_dsub+0x624>)
   36070:	45b4      	cmp	ip, r6
   36072:	d04e      	beq.n	36112 <__aeabi_dsub+0x56a>
   36074:	2680      	movs	r6, #128	; 0x80
   36076:	0436      	lsls	r6, r6, #16
   36078:	425b      	negs	r3, r3
   3607a:	4334      	orrs	r4, r6
   3607c:	2b38      	cmp	r3, #56	; 0x38
   3607e:	dd00      	ble.n	36082 <__aeabi_dsub+0x4da>
   36080:	e07f      	b.n	36182 <__aeabi_dsub+0x5da>
   36082:	2b1f      	cmp	r3, #31
   36084:	dd00      	ble.n	36088 <__aeabi_dsub+0x4e0>
   36086:	e08b      	b.n	361a0 <__aeabi_dsub+0x5f8>
   36088:	2620      	movs	r6, #32
   3608a:	0027      	movs	r7, r4
   3608c:	4650      	mov	r0, sl
   3608e:	1af6      	subs	r6, r6, r3
   36090:	40b7      	lsls	r7, r6
   36092:	40d8      	lsrs	r0, r3
   36094:	4307      	orrs	r7, r0
   36096:	4650      	mov	r0, sl
   36098:	40b0      	lsls	r0, r6
   3609a:	1e46      	subs	r6, r0, #1
   3609c:	41b0      	sbcs	r0, r6
   3609e:	4307      	orrs	r7, r0
   360a0:	40dc      	lsrs	r4, r3
   360a2:	18bf      	adds	r7, r7, r2
   360a4:	e7d6      	b.n	36054 <__aeabi_dsub+0x4ac>
   360a6:	000d      	movs	r5, r1
   360a8:	4315      	orrs	r5, r2
   360aa:	d100      	bne.n	360ae <__aeabi_dsub+0x506>
   360ac:	e602      	b.n	35cb4 <__aeabi_dsub+0x10c>
   360ae:	4650      	mov	r0, sl
   360b0:	1a80      	subs	r0, r0, r2
   360b2:	4582      	cmp	sl, r0
   360b4:	41bf      	sbcs	r7, r7
   360b6:	1a65      	subs	r5, r4, r1
   360b8:	427f      	negs	r7, r7
   360ba:	1bed      	subs	r5, r5, r7
   360bc:	4684      	mov	ip, r0
   360be:	0228      	lsls	r0, r5, #8
   360c0:	d400      	bmi.n	360c4 <__aeabi_dsub+0x51c>
   360c2:	e68d      	b.n	35de0 <__aeabi_dsub+0x238>
   360c4:	4650      	mov	r0, sl
   360c6:	1a17      	subs	r7, r2, r0
   360c8:	42ba      	cmp	r2, r7
   360ca:	4192      	sbcs	r2, r2
   360cc:	1b0c      	subs	r4, r1, r4
   360ce:	4252      	negs	r2, r2
   360d0:	1aa4      	subs	r4, r4, r2
   360d2:	4698      	mov	r8, r3
   360d4:	e5ee      	b.n	35cb4 <__aeabi_dsub+0x10c>
   360d6:	000d      	movs	r5, r1
   360d8:	4315      	orrs	r5, r2
   360da:	d100      	bne.n	360de <__aeabi_dsub+0x536>
   360dc:	e76b      	b.n	35fb6 <__aeabi_dsub+0x40e>
   360de:	4650      	mov	r0, sl
   360e0:	0767      	lsls	r7, r4, #29
   360e2:	08c0      	lsrs	r0, r0, #3
   360e4:	4307      	orrs	r7, r0
   360e6:	2080      	movs	r0, #128	; 0x80
   360e8:	08e4      	lsrs	r4, r4, #3
   360ea:	0300      	lsls	r0, r0, #12
   360ec:	4204      	tst	r4, r0
   360ee:	d007      	beq.n	36100 <__aeabi_dsub+0x558>
   360f0:	08cd      	lsrs	r5, r1, #3
   360f2:	4205      	tst	r5, r0
   360f4:	d104      	bne.n	36100 <__aeabi_dsub+0x558>
   360f6:	002c      	movs	r4, r5
   360f8:	4698      	mov	r8, r3
   360fa:	08d7      	lsrs	r7, r2, #3
   360fc:	0749      	lsls	r1, r1, #29
   360fe:	430f      	orrs	r7, r1
   36100:	0f7b      	lsrs	r3, r7, #29
   36102:	00e4      	lsls	r4, r4, #3
   36104:	431c      	orrs	r4, r3
   36106:	00ff      	lsls	r7, r7, #3
   36108:	4e30      	ldr	r6, [pc, #192]	; (361cc <__aeabi_dsub+0x624>)
   3610a:	e5d3      	b.n	35cb4 <__aeabi_dsub+0x10c>
   3610c:	4e2f      	ldr	r6, [pc, #188]	; (361cc <__aeabi_dsub+0x624>)
   3610e:	45b4      	cmp	ip, r6
   36110:	d1b4      	bne.n	3607c <__aeabi_dsub+0x4d4>
   36112:	000c      	movs	r4, r1
   36114:	0017      	movs	r7, r2
   36116:	4666      	mov	r6, ip
   36118:	e5cc      	b.n	35cb4 <__aeabi_dsub+0x10c>
   3611a:	2700      	movs	r7, #0
   3611c:	2400      	movs	r4, #0
   3611e:	e5e8      	b.n	35cf2 <__aeabi_dsub+0x14a>
   36120:	2b00      	cmp	r3, #0
   36122:	d039      	beq.n	36198 <__aeabi_dsub+0x5f0>
   36124:	000b      	movs	r3, r1
   36126:	4313      	orrs	r3, r2
   36128:	d100      	bne.n	3612c <__aeabi_dsub+0x584>
   3612a:	e744      	b.n	35fb6 <__aeabi_dsub+0x40e>
   3612c:	08c0      	lsrs	r0, r0, #3
   3612e:	0767      	lsls	r7, r4, #29
   36130:	4307      	orrs	r7, r0
   36132:	2080      	movs	r0, #128	; 0x80
   36134:	08e4      	lsrs	r4, r4, #3
   36136:	0300      	lsls	r0, r0, #12
   36138:	4204      	tst	r4, r0
   3613a:	d0e1      	beq.n	36100 <__aeabi_dsub+0x558>
   3613c:	08cb      	lsrs	r3, r1, #3
   3613e:	4203      	tst	r3, r0
   36140:	d1de      	bne.n	36100 <__aeabi_dsub+0x558>
   36142:	08d7      	lsrs	r7, r2, #3
   36144:	0749      	lsls	r1, r1, #29
   36146:	430f      	orrs	r7, r1
   36148:	001c      	movs	r4, r3
   3614a:	e7d9      	b.n	36100 <__aeabi_dsub+0x558>
   3614c:	2100      	movs	r1, #0
   3614e:	e771      	b.n	36034 <__aeabi_dsub+0x48c>
   36150:	2500      	movs	r5, #0
   36152:	2700      	movs	r7, #0
   36154:	e5e9      	b.n	35d2a <__aeabi_dsub+0x182>
   36156:	002e      	movs	r6, r5
   36158:	0027      	movs	r7, r4
   3615a:	3e20      	subs	r6, #32
   3615c:	40f7      	lsrs	r7, r6
   3615e:	2d20      	cmp	r5, #32
   36160:	d02f      	beq.n	361c2 <__aeabi_dsub+0x61a>
   36162:	2640      	movs	r6, #64	; 0x40
   36164:	1b75      	subs	r5, r6, r5
   36166:	40ac      	lsls	r4, r5
   36168:	4650      	mov	r0, sl
   3616a:	4320      	orrs	r0, r4
   3616c:	1e44      	subs	r4, r0, #1
   3616e:	41a0      	sbcs	r0, r4
   36170:	2400      	movs	r4, #0
   36172:	4338      	orrs	r0, r7
   36174:	e6dc      	b.n	35f30 <__aeabi_dsub+0x388>
   36176:	2480      	movs	r4, #128	; 0x80
   36178:	2500      	movs	r5, #0
   3617a:	0324      	lsls	r4, r4, #12
   3617c:	4e13      	ldr	r6, [pc, #76]	; (361cc <__aeabi_dsub+0x624>)
   3617e:	2700      	movs	r7, #0
   36180:	e5d3      	b.n	35d2a <__aeabi_dsub+0x182>
   36182:	4650      	mov	r0, sl
   36184:	4320      	orrs	r0, r4
   36186:	0007      	movs	r7, r0
   36188:	1e78      	subs	r0, r7, #1
   3618a:	4187      	sbcs	r7, r0
   3618c:	2400      	movs	r4, #0
   3618e:	18bf      	adds	r7, r7, r2
   36190:	e760      	b.n	36054 <__aeabi_dsub+0x4ac>
   36192:	000c      	movs	r4, r1
   36194:	0017      	movs	r7, r2
   36196:	e58d      	b.n	35cb4 <__aeabi_dsub+0x10c>
   36198:	000c      	movs	r4, r1
   3619a:	0017      	movs	r7, r2
   3619c:	4e0b      	ldr	r6, [pc, #44]	; (361cc <__aeabi_dsub+0x624>)
   3619e:	e589      	b.n	35cb4 <__aeabi_dsub+0x10c>
   361a0:	001e      	movs	r6, r3
   361a2:	0027      	movs	r7, r4
   361a4:	3e20      	subs	r6, #32
   361a6:	40f7      	lsrs	r7, r6
   361a8:	2b20      	cmp	r3, #32
   361aa:	d00c      	beq.n	361c6 <__aeabi_dsub+0x61e>
   361ac:	2640      	movs	r6, #64	; 0x40
   361ae:	1af3      	subs	r3, r6, r3
   361b0:	409c      	lsls	r4, r3
   361b2:	4650      	mov	r0, sl
   361b4:	4320      	orrs	r0, r4
   361b6:	1e44      	subs	r4, r0, #1
   361b8:	41a0      	sbcs	r0, r4
   361ba:	4307      	orrs	r7, r0
   361bc:	2400      	movs	r4, #0
   361be:	18bf      	adds	r7, r7, r2
   361c0:	e748      	b.n	36054 <__aeabi_dsub+0x4ac>
   361c2:	2400      	movs	r4, #0
   361c4:	e7d0      	b.n	36168 <__aeabi_dsub+0x5c0>
   361c6:	2400      	movs	r4, #0
   361c8:	e7f3      	b.n	361b2 <__aeabi_dsub+0x60a>
   361ca:	46c0      	nop			; (mov r8, r8)
   361cc:	000007ff 	.word	0x000007ff
   361d0:	ff7fffff 	.word	0xff7fffff

000361d4 <__aeabi_d2iz>:
   361d4:	b530      	push	{r4, r5, lr}
   361d6:	4d13      	ldr	r5, [pc, #76]	; (36224 <__aeabi_d2iz+0x50>)
   361d8:	030a      	lsls	r2, r1, #12
   361da:	004b      	lsls	r3, r1, #1
   361dc:	0b12      	lsrs	r2, r2, #12
   361de:	0d5b      	lsrs	r3, r3, #21
   361e0:	0fc9      	lsrs	r1, r1, #31
   361e2:	2400      	movs	r4, #0
   361e4:	42ab      	cmp	r3, r5
   361e6:	dd10      	ble.n	3620a <__aeabi_d2iz+0x36>
   361e8:	4c0f      	ldr	r4, [pc, #60]	; (36228 <__aeabi_d2iz+0x54>)
   361ea:	42a3      	cmp	r3, r4
   361ec:	dc0f      	bgt.n	3620e <__aeabi_d2iz+0x3a>
   361ee:	2480      	movs	r4, #128	; 0x80
   361f0:	4d0e      	ldr	r5, [pc, #56]	; (3622c <__aeabi_d2iz+0x58>)
   361f2:	0364      	lsls	r4, r4, #13
   361f4:	4322      	orrs	r2, r4
   361f6:	1aed      	subs	r5, r5, r3
   361f8:	2d1f      	cmp	r5, #31
   361fa:	dd0b      	ble.n	36214 <__aeabi_d2iz+0x40>
   361fc:	480c      	ldr	r0, [pc, #48]	; (36230 <__aeabi_d2iz+0x5c>)
   361fe:	1ac3      	subs	r3, r0, r3
   36200:	40da      	lsrs	r2, r3
   36202:	4254      	negs	r4, r2
   36204:	2900      	cmp	r1, #0
   36206:	d100      	bne.n	3620a <__aeabi_d2iz+0x36>
   36208:	0014      	movs	r4, r2
   3620a:	0020      	movs	r0, r4
   3620c:	bd30      	pop	{r4, r5, pc}
   3620e:	4b09      	ldr	r3, [pc, #36]	; (36234 <__aeabi_d2iz+0x60>)
   36210:	18cc      	adds	r4, r1, r3
   36212:	e7fa      	b.n	3620a <__aeabi_d2iz+0x36>
   36214:	4c08      	ldr	r4, [pc, #32]	; (36238 <__aeabi_d2iz+0x64>)
   36216:	40e8      	lsrs	r0, r5
   36218:	46a4      	mov	ip, r4
   3621a:	4463      	add	r3, ip
   3621c:	409a      	lsls	r2, r3
   3621e:	4302      	orrs	r2, r0
   36220:	e7ef      	b.n	36202 <__aeabi_d2iz+0x2e>
   36222:	46c0      	nop			; (mov r8, r8)
   36224:	000003fe 	.word	0x000003fe
   36228:	0000041d 	.word	0x0000041d
   3622c:	00000433 	.word	0x00000433
   36230:	00000413 	.word	0x00000413
   36234:	7fffffff 	.word	0x7fffffff
   36238:	fffffbed 	.word	0xfffffbed

0003623c <__aeabi_ui2d>:
   3623c:	b510      	push	{r4, lr}
   3623e:	1e04      	subs	r4, r0, #0
   36240:	d028      	beq.n	36294 <__aeabi_ui2d+0x58>
   36242:	f000 f885 	bl	36350 <__clzsi2>
   36246:	4b15      	ldr	r3, [pc, #84]	; (3629c <__aeabi_ui2d+0x60>)
   36248:	4a15      	ldr	r2, [pc, #84]	; (362a0 <__aeabi_ui2d+0x64>)
   3624a:	1a1b      	subs	r3, r3, r0
   3624c:	1ad2      	subs	r2, r2, r3
   3624e:	2a1f      	cmp	r2, #31
   36250:	dd15      	ble.n	3627e <__aeabi_ui2d+0x42>
   36252:	4a14      	ldr	r2, [pc, #80]	; (362a4 <__aeabi_ui2d+0x68>)
   36254:	1ad2      	subs	r2, r2, r3
   36256:	4094      	lsls	r4, r2
   36258:	2200      	movs	r2, #0
   3625a:	0324      	lsls	r4, r4, #12
   3625c:	055b      	lsls	r3, r3, #21
   3625e:	0b24      	lsrs	r4, r4, #12
   36260:	0d5b      	lsrs	r3, r3, #21
   36262:	2100      	movs	r1, #0
   36264:	0010      	movs	r0, r2
   36266:	0324      	lsls	r4, r4, #12
   36268:	0d0a      	lsrs	r2, r1, #20
   3626a:	0b24      	lsrs	r4, r4, #12
   3626c:	0512      	lsls	r2, r2, #20
   3626e:	4322      	orrs	r2, r4
   36270:	4c0d      	ldr	r4, [pc, #52]	; (362a8 <__aeabi_ui2d+0x6c>)
   36272:	051b      	lsls	r3, r3, #20
   36274:	4022      	ands	r2, r4
   36276:	4313      	orrs	r3, r2
   36278:	005b      	lsls	r3, r3, #1
   3627a:	0859      	lsrs	r1, r3, #1
   3627c:	bd10      	pop	{r4, pc}
   3627e:	0021      	movs	r1, r4
   36280:	4091      	lsls	r1, r2
   36282:	000a      	movs	r2, r1
   36284:	210b      	movs	r1, #11
   36286:	1a08      	subs	r0, r1, r0
   36288:	40c4      	lsrs	r4, r0
   3628a:	055b      	lsls	r3, r3, #21
   3628c:	0324      	lsls	r4, r4, #12
   3628e:	0b24      	lsrs	r4, r4, #12
   36290:	0d5b      	lsrs	r3, r3, #21
   36292:	e7e6      	b.n	36262 <__aeabi_ui2d+0x26>
   36294:	2300      	movs	r3, #0
   36296:	2400      	movs	r4, #0
   36298:	2200      	movs	r2, #0
   3629a:	e7e2      	b.n	36262 <__aeabi_ui2d+0x26>
   3629c:	0000041e 	.word	0x0000041e
   362a0:	00000433 	.word	0x00000433
   362a4:	00000413 	.word	0x00000413
   362a8:	800fffff 	.word	0x800fffff

000362ac <__aeabi_f2d>:
   362ac:	0041      	lsls	r1, r0, #1
   362ae:	0e09      	lsrs	r1, r1, #24
   362b0:	1c4b      	adds	r3, r1, #1
   362b2:	b570      	push	{r4, r5, r6, lr}
   362b4:	b2db      	uxtb	r3, r3
   362b6:	0246      	lsls	r6, r0, #9
   362b8:	0a75      	lsrs	r5, r6, #9
   362ba:	0fc4      	lsrs	r4, r0, #31
   362bc:	2b01      	cmp	r3, #1
   362be:	dd14      	ble.n	362ea <__aeabi_f2d+0x3e>
   362c0:	23e0      	movs	r3, #224	; 0xe0
   362c2:	009b      	lsls	r3, r3, #2
   362c4:	076d      	lsls	r5, r5, #29
   362c6:	0b36      	lsrs	r6, r6, #12
   362c8:	18cb      	adds	r3, r1, r3
   362ca:	2100      	movs	r1, #0
   362cc:	0d0a      	lsrs	r2, r1, #20
   362ce:	0028      	movs	r0, r5
   362d0:	0512      	lsls	r2, r2, #20
   362d2:	4d1c      	ldr	r5, [pc, #112]	; (36344 <__aeabi_f2d+0x98>)
   362d4:	4332      	orrs	r2, r6
   362d6:	055b      	lsls	r3, r3, #21
   362d8:	402a      	ands	r2, r5
   362da:	085b      	lsrs	r3, r3, #1
   362dc:	4313      	orrs	r3, r2
   362de:	005b      	lsls	r3, r3, #1
   362e0:	07e4      	lsls	r4, r4, #31
   362e2:	085b      	lsrs	r3, r3, #1
   362e4:	4323      	orrs	r3, r4
   362e6:	0019      	movs	r1, r3
   362e8:	bd70      	pop	{r4, r5, r6, pc}
   362ea:	2900      	cmp	r1, #0
   362ec:	d114      	bne.n	36318 <__aeabi_f2d+0x6c>
   362ee:	2d00      	cmp	r5, #0
   362f0:	d01e      	beq.n	36330 <__aeabi_f2d+0x84>
   362f2:	0028      	movs	r0, r5
   362f4:	f000 f82c 	bl	36350 <__clzsi2>
   362f8:	280a      	cmp	r0, #10
   362fa:	dc1c      	bgt.n	36336 <__aeabi_f2d+0x8a>
   362fc:	230b      	movs	r3, #11
   362fe:	002a      	movs	r2, r5
   36300:	1a1b      	subs	r3, r3, r0
   36302:	40da      	lsrs	r2, r3
   36304:	0003      	movs	r3, r0
   36306:	3315      	adds	r3, #21
   36308:	409d      	lsls	r5, r3
   3630a:	4b0f      	ldr	r3, [pc, #60]	; (36348 <__aeabi_f2d+0x9c>)
   3630c:	0312      	lsls	r2, r2, #12
   3630e:	1a1b      	subs	r3, r3, r0
   36310:	055b      	lsls	r3, r3, #21
   36312:	0b16      	lsrs	r6, r2, #12
   36314:	0d5b      	lsrs	r3, r3, #21
   36316:	e7d8      	b.n	362ca <__aeabi_f2d+0x1e>
   36318:	2d00      	cmp	r5, #0
   3631a:	d006      	beq.n	3632a <__aeabi_f2d+0x7e>
   3631c:	0b32      	lsrs	r2, r6, #12
   3631e:	2680      	movs	r6, #128	; 0x80
   36320:	0336      	lsls	r6, r6, #12
   36322:	076d      	lsls	r5, r5, #29
   36324:	4316      	orrs	r6, r2
   36326:	4b09      	ldr	r3, [pc, #36]	; (3634c <__aeabi_f2d+0xa0>)
   36328:	e7cf      	b.n	362ca <__aeabi_f2d+0x1e>
   3632a:	4b08      	ldr	r3, [pc, #32]	; (3634c <__aeabi_f2d+0xa0>)
   3632c:	2600      	movs	r6, #0
   3632e:	e7cc      	b.n	362ca <__aeabi_f2d+0x1e>
   36330:	2300      	movs	r3, #0
   36332:	2600      	movs	r6, #0
   36334:	e7c9      	b.n	362ca <__aeabi_f2d+0x1e>
   36336:	0003      	movs	r3, r0
   36338:	002a      	movs	r2, r5
   3633a:	3b0b      	subs	r3, #11
   3633c:	409a      	lsls	r2, r3
   3633e:	2500      	movs	r5, #0
   36340:	e7e3      	b.n	3630a <__aeabi_f2d+0x5e>
   36342:	46c0      	nop			; (mov r8, r8)
   36344:	800fffff 	.word	0x800fffff
   36348:	00000389 	.word	0x00000389
   3634c:	000007ff 	.word	0x000007ff

00036350 <__clzsi2>:
   36350:	211c      	movs	r1, #28
   36352:	2301      	movs	r3, #1
   36354:	041b      	lsls	r3, r3, #16
   36356:	4298      	cmp	r0, r3
   36358:	d301      	bcc.n	3635e <__clzsi2+0xe>
   3635a:	0c00      	lsrs	r0, r0, #16
   3635c:	3910      	subs	r1, #16
   3635e:	0a1b      	lsrs	r3, r3, #8
   36360:	4298      	cmp	r0, r3
   36362:	d301      	bcc.n	36368 <__clzsi2+0x18>
   36364:	0a00      	lsrs	r0, r0, #8
   36366:	3908      	subs	r1, #8
   36368:	091b      	lsrs	r3, r3, #4
   3636a:	4298      	cmp	r0, r3
   3636c:	d301      	bcc.n	36372 <__clzsi2+0x22>
   3636e:	0900      	lsrs	r0, r0, #4
   36370:	3904      	subs	r1, #4
   36372:	a202      	add	r2, pc, #8	; (adr r2, 3637c <__clzsi2+0x2c>)
   36374:	5c10      	ldrb	r0, [r2, r0]
   36376:	1840      	adds	r0, r0, r1
   36378:	4770      	bx	lr
   3637a:	46c0      	nop			; (mov r8, r8)
   3637c:	02020304 	.word	0x02020304
   36380:	01010101 	.word	0x01010101
	...

0003638c <atoi>:
   3638c:	b510      	push	{r4, lr}
   3638e:	220a      	movs	r2, #10
   36390:	2100      	movs	r1, #0
   36392:	f000 fb0d 	bl	369b0 <strtol>
   36396:	bd10      	pop	{r4, pc}

00036398 <__libc_init_array>:
   36398:	b570      	push	{r4, r5, r6, lr}
   3639a:	2600      	movs	r6, #0
   3639c:	4d0c      	ldr	r5, [pc, #48]	; (363d0 <__libc_init_array+0x38>)
   3639e:	4c0d      	ldr	r4, [pc, #52]	; (363d4 <__libc_init_array+0x3c>)
   363a0:	1b64      	subs	r4, r4, r5
   363a2:	10a4      	asrs	r4, r4, #2
   363a4:	42a6      	cmp	r6, r4
   363a6:	d109      	bne.n	363bc <__libc_init_array+0x24>
   363a8:	2600      	movs	r6, #0
   363aa:	f005 ff2d 	bl	3c208 <_init>
   363ae:	4d0a      	ldr	r5, [pc, #40]	; (363d8 <__libc_init_array+0x40>)
   363b0:	4c0a      	ldr	r4, [pc, #40]	; (363dc <__libc_init_array+0x44>)
   363b2:	1b64      	subs	r4, r4, r5
   363b4:	10a4      	asrs	r4, r4, #2
   363b6:	42a6      	cmp	r6, r4
   363b8:	d105      	bne.n	363c6 <__libc_init_array+0x2e>
   363ba:	bd70      	pop	{r4, r5, r6, pc}
   363bc:	00b3      	lsls	r3, r6, #2
   363be:	58eb      	ldr	r3, [r5, r3]
   363c0:	4798      	blx	r3
   363c2:	3601      	adds	r6, #1
   363c4:	e7ee      	b.n	363a4 <__libc_init_array+0xc>
   363c6:	00b3      	lsls	r3, r6, #2
   363c8:	58eb      	ldr	r3, [r5, r3]
   363ca:	4798      	blx	r3
   363cc:	3601      	adds	r6, #1
   363ce:	e7f2      	b.n	363b6 <__libc_init_array+0x1e>
   363d0:	0003c214 	.word	0x0003c214
   363d4:	0003c214 	.word	0x0003c214
   363d8:	0003c214 	.word	0x0003c214
   363dc:	0003c218 	.word	0x0003c218

000363e0 <malloc>:
   363e0:	b510      	push	{r4, lr}
   363e2:	4b03      	ldr	r3, [pc, #12]	; (363f0 <malloc+0x10>)
   363e4:	0001      	movs	r1, r0
   363e6:	6818      	ldr	r0, [r3, #0]
   363e8:	f000 f87c 	bl	364e4 <_malloc_r>
   363ec:	bd10      	pop	{r4, pc}
   363ee:	46c0      	nop			; (mov r8, r8)
   363f0:	20000130 	.word	0x20000130

000363f4 <free>:
   363f4:	b510      	push	{r4, lr}
   363f6:	4b03      	ldr	r3, [pc, #12]	; (36404 <free+0x10>)
   363f8:	0001      	movs	r1, r0
   363fa:	6818      	ldr	r0, [r3, #0]
   363fc:	f000 f828 	bl	36450 <_free_r>
   36400:	bd10      	pop	{r4, pc}
   36402:	46c0      	nop			; (mov r8, r8)
   36404:	20000130 	.word	0x20000130

00036408 <memcpy>:
   36408:	2300      	movs	r3, #0
   3640a:	b510      	push	{r4, lr}
   3640c:	429a      	cmp	r2, r3
   3640e:	d100      	bne.n	36412 <memcpy+0xa>
   36410:	bd10      	pop	{r4, pc}
   36412:	5ccc      	ldrb	r4, [r1, r3]
   36414:	54c4      	strb	r4, [r0, r3]
   36416:	3301      	adds	r3, #1
   36418:	e7f8      	b.n	3640c <memcpy+0x4>

0003641a <memmove>:
   3641a:	b510      	push	{r4, lr}
   3641c:	4288      	cmp	r0, r1
   3641e:	d902      	bls.n	36426 <memmove+0xc>
   36420:	188b      	adds	r3, r1, r2
   36422:	4298      	cmp	r0, r3
   36424:	d308      	bcc.n	36438 <memmove+0x1e>
   36426:	2300      	movs	r3, #0
   36428:	429a      	cmp	r2, r3
   3642a:	d007      	beq.n	3643c <memmove+0x22>
   3642c:	5ccc      	ldrb	r4, [r1, r3]
   3642e:	54c4      	strb	r4, [r0, r3]
   36430:	3301      	adds	r3, #1
   36432:	e7f9      	b.n	36428 <memmove+0xe>
   36434:	5c8b      	ldrb	r3, [r1, r2]
   36436:	5483      	strb	r3, [r0, r2]
   36438:	3a01      	subs	r2, #1
   3643a:	d2fb      	bcs.n	36434 <memmove+0x1a>
   3643c:	bd10      	pop	{r4, pc}

0003643e <memset>:
   3643e:	0003      	movs	r3, r0
   36440:	1882      	adds	r2, r0, r2
   36442:	4293      	cmp	r3, r2
   36444:	d100      	bne.n	36448 <memset+0xa>
   36446:	4770      	bx	lr
   36448:	7019      	strb	r1, [r3, #0]
   3644a:	3301      	adds	r3, #1
   3644c:	e7f9      	b.n	36442 <memset+0x4>
	...

00036450 <_free_r>:
   36450:	b570      	push	{r4, r5, r6, lr}
   36452:	0005      	movs	r5, r0
   36454:	2900      	cmp	r1, #0
   36456:	d010      	beq.n	3647a <_free_r+0x2a>
   36458:	1f0c      	subs	r4, r1, #4
   3645a:	6823      	ldr	r3, [r4, #0]
   3645c:	2b00      	cmp	r3, #0
   3645e:	da00      	bge.n	36462 <_free_r+0x12>
   36460:	18e4      	adds	r4, r4, r3
   36462:	0028      	movs	r0, r5
   36464:	f000 fdd8 	bl	37018 <__malloc_lock>
   36468:	4a1d      	ldr	r2, [pc, #116]	; (364e0 <_free_r+0x90>)
   3646a:	6813      	ldr	r3, [r2, #0]
   3646c:	2b00      	cmp	r3, #0
   3646e:	d105      	bne.n	3647c <_free_r+0x2c>
   36470:	6063      	str	r3, [r4, #4]
   36472:	6014      	str	r4, [r2, #0]
   36474:	0028      	movs	r0, r5
   36476:	f000 fdd0 	bl	3701a <__malloc_unlock>
   3647a:	bd70      	pop	{r4, r5, r6, pc}
   3647c:	42a3      	cmp	r3, r4
   3647e:	d909      	bls.n	36494 <_free_r+0x44>
   36480:	6821      	ldr	r1, [r4, #0]
   36482:	1860      	adds	r0, r4, r1
   36484:	4283      	cmp	r3, r0
   36486:	d1f3      	bne.n	36470 <_free_r+0x20>
   36488:	6818      	ldr	r0, [r3, #0]
   3648a:	685b      	ldr	r3, [r3, #4]
   3648c:	1841      	adds	r1, r0, r1
   3648e:	6021      	str	r1, [r4, #0]
   36490:	e7ee      	b.n	36470 <_free_r+0x20>
   36492:	0013      	movs	r3, r2
   36494:	685a      	ldr	r2, [r3, #4]
   36496:	2a00      	cmp	r2, #0
   36498:	d001      	beq.n	3649e <_free_r+0x4e>
   3649a:	42a2      	cmp	r2, r4
   3649c:	d9f9      	bls.n	36492 <_free_r+0x42>
   3649e:	6819      	ldr	r1, [r3, #0]
   364a0:	1858      	adds	r0, r3, r1
   364a2:	42a0      	cmp	r0, r4
   364a4:	d10b      	bne.n	364be <_free_r+0x6e>
   364a6:	6820      	ldr	r0, [r4, #0]
   364a8:	1809      	adds	r1, r1, r0
   364aa:	1858      	adds	r0, r3, r1
   364ac:	6019      	str	r1, [r3, #0]
   364ae:	4282      	cmp	r2, r0
   364b0:	d1e0      	bne.n	36474 <_free_r+0x24>
   364b2:	6810      	ldr	r0, [r2, #0]
   364b4:	6852      	ldr	r2, [r2, #4]
   364b6:	1841      	adds	r1, r0, r1
   364b8:	6019      	str	r1, [r3, #0]
   364ba:	605a      	str	r2, [r3, #4]
   364bc:	e7da      	b.n	36474 <_free_r+0x24>
   364be:	42a0      	cmp	r0, r4
   364c0:	d902      	bls.n	364c8 <_free_r+0x78>
   364c2:	230c      	movs	r3, #12
   364c4:	602b      	str	r3, [r5, #0]
   364c6:	e7d5      	b.n	36474 <_free_r+0x24>
   364c8:	6821      	ldr	r1, [r4, #0]
   364ca:	1860      	adds	r0, r4, r1
   364cc:	4282      	cmp	r2, r0
   364ce:	d103      	bne.n	364d8 <_free_r+0x88>
   364d0:	6810      	ldr	r0, [r2, #0]
   364d2:	6852      	ldr	r2, [r2, #4]
   364d4:	1841      	adds	r1, r0, r1
   364d6:	6021      	str	r1, [r4, #0]
   364d8:	6062      	str	r2, [r4, #4]
   364da:	605c      	str	r4, [r3, #4]
   364dc:	e7ca      	b.n	36474 <_free_r+0x24>
   364de:	46c0      	nop			; (mov r8, r8)
   364e0:	2000472c 	.word	0x2000472c

000364e4 <_malloc_r>:
   364e4:	2303      	movs	r3, #3
   364e6:	b570      	push	{r4, r5, r6, lr}
   364e8:	1ccd      	adds	r5, r1, #3
   364ea:	439d      	bics	r5, r3
   364ec:	3508      	adds	r5, #8
   364ee:	0006      	movs	r6, r0
   364f0:	2d0c      	cmp	r5, #12
   364f2:	d21e      	bcs.n	36532 <_malloc_r+0x4e>
   364f4:	250c      	movs	r5, #12
   364f6:	42a9      	cmp	r1, r5
   364f8:	d81d      	bhi.n	36536 <_malloc_r+0x52>
   364fa:	0030      	movs	r0, r6
   364fc:	f000 fd8c 	bl	37018 <__malloc_lock>
   36500:	4a25      	ldr	r2, [pc, #148]	; (36598 <_malloc_r+0xb4>)
   36502:	6814      	ldr	r4, [r2, #0]
   36504:	0021      	movs	r1, r4
   36506:	2900      	cmp	r1, #0
   36508:	d119      	bne.n	3653e <_malloc_r+0x5a>
   3650a:	4c24      	ldr	r4, [pc, #144]	; (3659c <_malloc_r+0xb8>)
   3650c:	6823      	ldr	r3, [r4, #0]
   3650e:	2b00      	cmp	r3, #0
   36510:	d103      	bne.n	3651a <_malloc_r+0x36>
   36512:	0030      	movs	r0, r6
   36514:	f000 f8ae 	bl	36674 <_sbrk_r>
   36518:	6020      	str	r0, [r4, #0]
   3651a:	0029      	movs	r1, r5
   3651c:	0030      	movs	r0, r6
   3651e:	f000 f8a9 	bl	36674 <_sbrk_r>
   36522:	1c43      	adds	r3, r0, #1
   36524:	d12c      	bne.n	36580 <_malloc_r+0x9c>
   36526:	230c      	movs	r3, #12
   36528:	0030      	movs	r0, r6
   3652a:	6033      	str	r3, [r6, #0]
   3652c:	f000 fd75 	bl	3701a <__malloc_unlock>
   36530:	e003      	b.n	3653a <_malloc_r+0x56>
   36532:	2d00      	cmp	r5, #0
   36534:	dadf      	bge.n	364f6 <_malloc_r+0x12>
   36536:	230c      	movs	r3, #12
   36538:	6033      	str	r3, [r6, #0]
   3653a:	2000      	movs	r0, #0
   3653c:	bd70      	pop	{r4, r5, r6, pc}
   3653e:	680b      	ldr	r3, [r1, #0]
   36540:	1b5b      	subs	r3, r3, r5
   36542:	d41a      	bmi.n	3657a <_malloc_r+0x96>
   36544:	2b0b      	cmp	r3, #11
   36546:	d903      	bls.n	36550 <_malloc_r+0x6c>
   36548:	600b      	str	r3, [r1, #0]
   3654a:	18cc      	adds	r4, r1, r3
   3654c:	6025      	str	r5, [r4, #0]
   3654e:	e003      	b.n	36558 <_malloc_r+0x74>
   36550:	428c      	cmp	r4, r1
   36552:	d10e      	bne.n	36572 <_malloc_r+0x8e>
   36554:	6863      	ldr	r3, [r4, #4]
   36556:	6013      	str	r3, [r2, #0]
   36558:	0030      	movs	r0, r6
   3655a:	f000 fd5e 	bl	3701a <__malloc_unlock>
   3655e:	0020      	movs	r0, r4
   36560:	2207      	movs	r2, #7
   36562:	300b      	adds	r0, #11
   36564:	1d23      	adds	r3, r4, #4
   36566:	4390      	bics	r0, r2
   36568:	1ac3      	subs	r3, r0, r3
   3656a:	d0e7      	beq.n	3653c <_malloc_r+0x58>
   3656c:	425a      	negs	r2, r3
   3656e:	50e2      	str	r2, [r4, r3]
   36570:	e7e4      	b.n	3653c <_malloc_r+0x58>
   36572:	684b      	ldr	r3, [r1, #4]
   36574:	6063      	str	r3, [r4, #4]
   36576:	000c      	movs	r4, r1
   36578:	e7ee      	b.n	36558 <_malloc_r+0x74>
   3657a:	000c      	movs	r4, r1
   3657c:	6849      	ldr	r1, [r1, #4]
   3657e:	e7c2      	b.n	36506 <_malloc_r+0x22>
   36580:	2303      	movs	r3, #3
   36582:	1cc4      	adds	r4, r0, #3
   36584:	439c      	bics	r4, r3
   36586:	42a0      	cmp	r0, r4
   36588:	d0e0      	beq.n	3654c <_malloc_r+0x68>
   3658a:	1a21      	subs	r1, r4, r0
   3658c:	0030      	movs	r0, r6
   3658e:	f000 f871 	bl	36674 <_sbrk_r>
   36592:	1c43      	adds	r3, r0, #1
   36594:	d1da      	bne.n	3654c <_malloc_r+0x68>
   36596:	e7c6      	b.n	36526 <_malloc_r+0x42>
   36598:	2000472c 	.word	0x2000472c
   3659c:	20004730 	.word	0x20004730

000365a0 <_puts_r>:
   365a0:	b570      	push	{r4, r5, r6, lr}
   365a2:	0005      	movs	r5, r0
   365a4:	000e      	movs	r6, r1
   365a6:	2800      	cmp	r0, #0
   365a8:	d004      	beq.n	365b4 <_puts_r+0x14>
   365aa:	6983      	ldr	r3, [r0, #24]
   365ac:	2b00      	cmp	r3, #0
   365ae:	d101      	bne.n	365b4 <_puts_r+0x14>
   365b0:	f000 fc0e 	bl	36dd0 <__sinit>
   365b4:	69ab      	ldr	r3, [r5, #24]
   365b6:	68ac      	ldr	r4, [r5, #8]
   365b8:	2b00      	cmp	r3, #0
   365ba:	d102      	bne.n	365c2 <_puts_r+0x22>
   365bc:	0028      	movs	r0, r5
   365be:	f000 fc07 	bl	36dd0 <__sinit>
   365c2:	4b24      	ldr	r3, [pc, #144]	; (36654 <_puts_r+0xb4>)
   365c4:	429c      	cmp	r4, r3
   365c6:	d10f      	bne.n	365e8 <_puts_r+0x48>
   365c8:	686c      	ldr	r4, [r5, #4]
   365ca:	89a3      	ldrh	r3, [r4, #12]
   365cc:	071b      	lsls	r3, r3, #28
   365ce:	d502      	bpl.n	365d6 <_puts_r+0x36>
   365d0:	6923      	ldr	r3, [r4, #16]
   365d2:	2b00      	cmp	r3, #0
   365d4:	d120      	bne.n	36618 <_puts_r+0x78>
   365d6:	0021      	movs	r1, r4
   365d8:	0028      	movs	r0, r5
   365da:	f000 fa8b 	bl	36af4 <__swsetup_r>
   365de:	2800      	cmp	r0, #0
   365e0:	d01a      	beq.n	36618 <_puts_r+0x78>
   365e2:	2001      	movs	r0, #1
   365e4:	4240      	negs	r0, r0
   365e6:	bd70      	pop	{r4, r5, r6, pc}
   365e8:	4b1b      	ldr	r3, [pc, #108]	; (36658 <_puts_r+0xb8>)
   365ea:	429c      	cmp	r4, r3
   365ec:	d101      	bne.n	365f2 <_puts_r+0x52>
   365ee:	68ac      	ldr	r4, [r5, #8]
   365f0:	e7eb      	b.n	365ca <_puts_r+0x2a>
   365f2:	4b1a      	ldr	r3, [pc, #104]	; (3665c <_puts_r+0xbc>)
   365f4:	429c      	cmp	r4, r3
   365f6:	d1e8      	bne.n	365ca <_puts_r+0x2a>
   365f8:	68ec      	ldr	r4, [r5, #12]
   365fa:	e7e6      	b.n	365ca <_puts_r+0x2a>
   365fc:	3b01      	subs	r3, #1
   365fe:	3601      	adds	r6, #1
   36600:	60a3      	str	r3, [r4, #8]
   36602:	2b00      	cmp	r3, #0
   36604:	da04      	bge.n	36610 <_puts_r+0x70>
   36606:	69a2      	ldr	r2, [r4, #24]
   36608:	4293      	cmp	r3, r2
   3660a:	db16      	blt.n	3663a <_puts_r+0x9a>
   3660c:	290a      	cmp	r1, #10
   3660e:	d014      	beq.n	3663a <_puts_r+0x9a>
   36610:	6823      	ldr	r3, [r4, #0]
   36612:	1c5a      	adds	r2, r3, #1
   36614:	6022      	str	r2, [r4, #0]
   36616:	7019      	strb	r1, [r3, #0]
   36618:	7831      	ldrb	r1, [r6, #0]
   3661a:	68a3      	ldr	r3, [r4, #8]
   3661c:	2900      	cmp	r1, #0
   3661e:	d1ed      	bne.n	365fc <_puts_r+0x5c>
   36620:	3b01      	subs	r3, #1
   36622:	60a3      	str	r3, [r4, #8]
   36624:	2b00      	cmp	r3, #0
   36626:	da0f      	bge.n	36648 <_puts_r+0xa8>
   36628:	0022      	movs	r2, r4
   3662a:	310a      	adds	r1, #10
   3662c:	0028      	movs	r0, r5
   3662e:	f000 fa0b 	bl	36a48 <__swbuf_r>
   36632:	1c43      	adds	r3, r0, #1
   36634:	d0d5      	beq.n	365e2 <_puts_r+0x42>
   36636:	200a      	movs	r0, #10
   36638:	e7d5      	b.n	365e6 <_puts_r+0x46>
   3663a:	0022      	movs	r2, r4
   3663c:	0028      	movs	r0, r5
   3663e:	f000 fa03 	bl	36a48 <__swbuf_r>
   36642:	1c43      	adds	r3, r0, #1
   36644:	d1e8      	bne.n	36618 <_puts_r+0x78>
   36646:	e7cc      	b.n	365e2 <_puts_r+0x42>
   36648:	200a      	movs	r0, #10
   3664a:	6823      	ldr	r3, [r4, #0]
   3664c:	1c5a      	adds	r2, r3, #1
   3664e:	6022      	str	r2, [r4, #0]
   36650:	7018      	strb	r0, [r3, #0]
   36652:	e7c8      	b.n	365e6 <_puts_r+0x46>
   36654:	0003c088 	.word	0x0003c088
   36658:	0003c0a8 	.word	0x0003c0a8
   3665c:	0003c068 	.word	0x0003c068

00036660 <puts>:
   36660:	b510      	push	{r4, lr}
   36662:	4b03      	ldr	r3, [pc, #12]	; (36670 <puts+0x10>)
   36664:	0001      	movs	r1, r0
   36666:	6818      	ldr	r0, [r3, #0]
   36668:	f7ff ff9a 	bl	365a0 <_puts_r>
   3666c:	bd10      	pop	{r4, pc}
   3666e:	46c0      	nop			; (mov r8, r8)
   36670:	20000130 	.word	0x20000130

00036674 <_sbrk_r>:
   36674:	2300      	movs	r3, #0
   36676:	b570      	push	{r4, r5, r6, lr}
   36678:	4c06      	ldr	r4, [pc, #24]	; (36694 <_sbrk_r+0x20>)
   3667a:	0005      	movs	r5, r0
   3667c:	0008      	movs	r0, r1
   3667e:	6023      	str	r3, [r4, #0]
   36680:	f7f5 fdd0 	bl	2c224 <_sbrk>
   36684:	1c43      	adds	r3, r0, #1
   36686:	d103      	bne.n	36690 <_sbrk_r+0x1c>
   36688:	6823      	ldr	r3, [r4, #0]
   3668a:	2b00      	cmp	r3, #0
   3668c:	d000      	beq.n	36690 <_sbrk_r+0x1c>
   3668e:	602b      	str	r3, [r5, #0]
   36690:	bd70      	pop	{r4, r5, r6, pc}
   36692:	46c0      	nop			; (mov r8, r8)
   36694:	20005d24 	.word	0x20005d24

00036698 <sniprintf>:
   36698:	b40c      	push	{r2, r3}
   3669a:	b530      	push	{r4, r5, lr}
   3669c:	4b16      	ldr	r3, [pc, #88]	; (366f8 <sniprintf+0x60>)
   3669e:	b09d      	sub	sp, #116	; 0x74
   366a0:	1e0c      	subs	r4, r1, #0
   366a2:	681d      	ldr	r5, [r3, #0]
   366a4:	da08      	bge.n	366b8 <sniprintf+0x20>
   366a6:	238b      	movs	r3, #139	; 0x8b
   366a8:	2001      	movs	r0, #1
   366aa:	602b      	str	r3, [r5, #0]
   366ac:	4240      	negs	r0, r0
   366ae:	b01d      	add	sp, #116	; 0x74
   366b0:	bc30      	pop	{r4, r5}
   366b2:	bc08      	pop	{r3}
   366b4:	b002      	add	sp, #8
   366b6:	4718      	bx	r3
   366b8:	2382      	movs	r3, #130	; 0x82
   366ba:	a902      	add	r1, sp, #8
   366bc:	009b      	lsls	r3, r3, #2
   366be:	818b      	strh	r3, [r1, #12]
   366c0:	2300      	movs	r3, #0
   366c2:	9002      	str	r0, [sp, #8]
   366c4:	6108      	str	r0, [r1, #16]
   366c6:	429c      	cmp	r4, r3
   366c8:	d000      	beq.n	366cc <sniprintf+0x34>
   366ca:	1e63      	subs	r3, r4, #1
   366cc:	608b      	str	r3, [r1, #8]
   366ce:	614b      	str	r3, [r1, #20]
   366d0:	2301      	movs	r3, #1
   366d2:	425b      	negs	r3, r3
   366d4:	81cb      	strh	r3, [r1, #14]
   366d6:	9a20      	ldr	r2, [sp, #128]	; 0x80
   366d8:	ab21      	add	r3, sp, #132	; 0x84
   366da:	0028      	movs	r0, r5
   366dc:	9301      	str	r3, [sp, #4]
   366de:	f000 fcff 	bl	370e0 <_svfiprintf_r>
   366e2:	1c43      	adds	r3, r0, #1
   366e4:	da01      	bge.n	366ea <sniprintf+0x52>
   366e6:	238b      	movs	r3, #139	; 0x8b
   366e8:	602b      	str	r3, [r5, #0]
   366ea:	2c00      	cmp	r4, #0
   366ec:	d0df      	beq.n	366ae <sniprintf+0x16>
   366ee:	2300      	movs	r3, #0
   366f0:	9a02      	ldr	r2, [sp, #8]
   366f2:	7013      	strb	r3, [r2, #0]
   366f4:	e7db      	b.n	366ae <sniprintf+0x16>
   366f6:	46c0      	nop			; (mov r8, r8)
   366f8:	20000130 	.word	0x20000130

000366fc <siprintf>:
   366fc:	b40e      	push	{r1, r2, r3}
   366fe:	b510      	push	{r4, lr}
   36700:	b09d      	sub	sp, #116	; 0x74
   36702:	a902      	add	r1, sp, #8
   36704:	9002      	str	r0, [sp, #8]
   36706:	6108      	str	r0, [r1, #16]
   36708:	480b      	ldr	r0, [pc, #44]	; (36738 <siprintf+0x3c>)
   3670a:	2482      	movs	r4, #130	; 0x82
   3670c:	6088      	str	r0, [r1, #8]
   3670e:	6148      	str	r0, [r1, #20]
   36710:	2001      	movs	r0, #1
   36712:	4240      	negs	r0, r0
   36714:	ab1f      	add	r3, sp, #124	; 0x7c
   36716:	81c8      	strh	r0, [r1, #14]
   36718:	4808      	ldr	r0, [pc, #32]	; (3673c <siprintf+0x40>)
   3671a:	cb04      	ldmia	r3!, {r2}
   3671c:	00a4      	lsls	r4, r4, #2
   3671e:	6800      	ldr	r0, [r0, #0]
   36720:	9301      	str	r3, [sp, #4]
   36722:	818c      	strh	r4, [r1, #12]
   36724:	f000 fcdc 	bl	370e0 <_svfiprintf_r>
   36728:	2300      	movs	r3, #0
   3672a:	9a02      	ldr	r2, [sp, #8]
   3672c:	7013      	strb	r3, [r2, #0]
   3672e:	b01d      	add	sp, #116	; 0x74
   36730:	bc10      	pop	{r4}
   36732:	bc08      	pop	{r3}
   36734:	b003      	add	sp, #12
   36736:	4718      	bx	r3
   36738:	7fffffff 	.word	0x7fffffff
   3673c:	20000130 	.word	0x20000130

00036740 <strcasecmp>:
   36740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36742:	0007      	movs	r7, r0
   36744:	000e      	movs	r6, r1
   36746:	783c      	ldrb	r4, [r7, #0]
   36748:	f000 fbda 	bl	36f00 <__locale_ctype_ptr>
   3674c:	2203      	movs	r2, #3
   3674e:	1900      	adds	r0, r0, r4
   36750:	7843      	ldrb	r3, [r0, #1]
   36752:	4013      	ands	r3, r2
   36754:	2b01      	cmp	r3, #1
   36756:	d100      	bne.n	3675a <strcasecmp+0x1a>
   36758:	3420      	adds	r4, #32
   3675a:	7835      	ldrb	r5, [r6, #0]
   3675c:	f000 fbd0 	bl	36f00 <__locale_ctype_ptr>
   36760:	2203      	movs	r2, #3
   36762:	1940      	adds	r0, r0, r5
   36764:	7843      	ldrb	r3, [r0, #1]
   36766:	4013      	ands	r3, r2
   36768:	2b01      	cmp	r3, #1
   3676a:	d100      	bne.n	3676e <strcasecmp+0x2e>
   3676c:	3520      	adds	r5, #32
   3676e:	1b60      	subs	r0, r4, r5
   36770:	d103      	bne.n	3677a <strcasecmp+0x3a>
   36772:	3701      	adds	r7, #1
   36774:	3601      	adds	r6, #1
   36776:	2d00      	cmp	r5, #0
   36778:	d1e5      	bne.n	36746 <strcasecmp+0x6>
   3677a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003677c <strcat>:
   3677c:	0002      	movs	r2, r0
   3677e:	b510      	push	{r4, lr}
   36780:	7813      	ldrb	r3, [r2, #0]
   36782:	2b00      	cmp	r3, #0
   36784:	d105      	bne.n	36792 <strcat+0x16>
   36786:	5ccc      	ldrb	r4, [r1, r3]
   36788:	54d4      	strb	r4, [r2, r3]
   3678a:	3301      	adds	r3, #1
   3678c:	2c00      	cmp	r4, #0
   3678e:	d1fa      	bne.n	36786 <strcat+0xa>
   36790:	bd10      	pop	{r4, pc}
   36792:	3201      	adds	r2, #1
   36794:	e7f4      	b.n	36780 <strcat+0x4>

00036796 <strcmp>:
   36796:	7802      	ldrb	r2, [r0, #0]
   36798:	780b      	ldrb	r3, [r1, #0]
   3679a:	2a00      	cmp	r2, #0
   3679c:	d003      	beq.n	367a6 <strcmp+0x10>
   3679e:	3001      	adds	r0, #1
   367a0:	3101      	adds	r1, #1
   367a2:	429a      	cmp	r2, r3
   367a4:	d0f7      	beq.n	36796 <strcmp>
   367a6:	1ad0      	subs	r0, r2, r3
   367a8:	4770      	bx	lr

000367aa <strcpy>:
   367aa:	1c03      	adds	r3, r0, #0
   367ac:	780a      	ldrb	r2, [r1, #0]
   367ae:	3101      	adds	r1, #1
   367b0:	701a      	strb	r2, [r3, #0]
   367b2:	3301      	adds	r3, #1
   367b4:	2a00      	cmp	r2, #0
   367b6:	d1f9      	bne.n	367ac <strcpy+0x2>
   367b8:	4770      	bx	lr
	...

000367bc <strdup>:
   367bc:	b510      	push	{r4, lr}
   367be:	4b03      	ldr	r3, [pc, #12]	; (367cc <strdup+0x10>)
   367c0:	0001      	movs	r1, r0
   367c2:	6818      	ldr	r0, [r3, #0]
   367c4:	f000 f804 	bl	367d0 <_strdup_r>
   367c8:	bd10      	pop	{r4, pc}
   367ca:	46c0      	nop			; (mov r8, r8)
   367cc:	20000130 	.word	0x20000130

000367d0 <_strdup_r>:
   367d0:	b570      	push	{r4, r5, r6, lr}
   367d2:	0005      	movs	r5, r0
   367d4:	0008      	movs	r0, r1
   367d6:	000e      	movs	r6, r1
   367d8:	f000 f80d 	bl	367f6 <strlen>
   367dc:	1c44      	adds	r4, r0, #1
   367de:	0021      	movs	r1, r4
   367e0:	0028      	movs	r0, r5
   367e2:	f7ff fe7f 	bl	364e4 <_malloc_r>
   367e6:	1e05      	subs	r5, r0, #0
   367e8:	d003      	beq.n	367f2 <_strdup_r+0x22>
   367ea:	0022      	movs	r2, r4
   367ec:	0031      	movs	r1, r6
   367ee:	f7ff fe0b 	bl	36408 <memcpy>
   367f2:	0028      	movs	r0, r5
   367f4:	bd70      	pop	{r4, r5, r6, pc}

000367f6 <strlen>:
   367f6:	2300      	movs	r3, #0
   367f8:	5cc2      	ldrb	r2, [r0, r3]
   367fa:	3301      	adds	r3, #1
   367fc:	2a00      	cmp	r2, #0
   367fe:	d1fb      	bne.n	367f8 <strlen+0x2>
   36800:	1e58      	subs	r0, r3, #1
   36802:	4770      	bx	lr

00036804 <strncmp>:
   36804:	2300      	movs	r3, #0
   36806:	b530      	push	{r4, r5, lr}
   36808:	429a      	cmp	r2, r3
   3680a:	d00a      	beq.n	36822 <strncmp+0x1e>
   3680c:	3a01      	subs	r2, #1
   3680e:	5cc4      	ldrb	r4, [r0, r3]
   36810:	5ccd      	ldrb	r5, [r1, r3]
   36812:	42ac      	cmp	r4, r5
   36814:	d104      	bne.n	36820 <strncmp+0x1c>
   36816:	429a      	cmp	r2, r3
   36818:	d002      	beq.n	36820 <strncmp+0x1c>
   3681a:	3301      	adds	r3, #1
   3681c:	2c00      	cmp	r4, #0
   3681e:	d1f6      	bne.n	3680e <strncmp+0xa>
   36820:	1b63      	subs	r3, r4, r5
   36822:	0018      	movs	r0, r3
   36824:	bd30      	pop	{r4, r5, pc}

00036826 <strncpy>:
   36826:	b570      	push	{r4, r5, r6, lr}
   36828:	0004      	movs	r4, r0
   3682a:	2a00      	cmp	r2, #0
   3682c:	d100      	bne.n	36830 <strncpy+0xa>
   3682e:	bd70      	pop	{r4, r5, r6, pc}
   36830:	780d      	ldrb	r5, [r1, #0]
   36832:	1e56      	subs	r6, r2, #1
   36834:	1c63      	adds	r3, r4, #1
   36836:	7025      	strb	r5, [r4, #0]
   36838:	3101      	adds	r1, #1
   3683a:	2d00      	cmp	r5, #0
   3683c:	d105      	bne.n	3684a <strncpy+0x24>
   3683e:	18a4      	adds	r4, r4, r2
   36840:	429c      	cmp	r4, r3
   36842:	d0f4      	beq.n	3682e <strncpy+0x8>
   36844:	701d      	strb	r5, [r3, #0]
   36846:	3301      	adds	r3, #1
   36848:	e7fa      	b.n	36840 <strncpy+0x1a>
   3684a:	001c      	movs	r4, r3
   3684c:	0032      	movs	r2, r6
   3684e:	e7ec      	b.n	3682a <strncpy+0x4>

00036850 <strrchr>:
   36850:	b570      	push	{r4, r5, r6, lr}
   36852:	000d      	movs	r5, r1
   36854:	2400      	movs	r4, #0
   36856:	2900      	cmp	r1, #0
   36858:	d105      	bne.n	36866 <strrchr+0x16>
   3685a:	f000 ff19 	bl	37690 <strchr>
   3685e:	0004      	movs	r4, r0
   36860:	e006      	b.n	36870 <strrchr+0x20>
   36862:	001c      	movs	r4, r3
   36864:	1c58      	adds	r0, r3, #1
   36866:	0029      	movs	r1, r5
   36868:	f000 ff12 	bl	37690 <strchr>
   3686c:	1e03      	subs	r3, r0, #0
   3686e:	d1f8      	bne.n	36862 <strrchr+0x12>
   36870:	0020      	movs	r0, r4
   36872:	bd70      	pop	{r4, r5, r6, pc}

00036874 <strstr>:
   36874:	b510      	push	{r4, lr}
   36876:	0002      	movs	r2, r0
   36878:	7800      	ldrb	r0, [r0, #0]
   3687a:	2800      	cmp	r0, #0
   3687c:	d104      	bne.n	36888 <strstr+0x14>
   3687e:	7809      	ldrb	r1, [r1, #0]
   36880:	2900      	cmp	r1, #0
   36882:	d00d      	beq.n	368a0 <strstr+0x2c>
   36884:	bd10      	pop	{r4, pc}
   36886:	3201      	adds	r2, #1
   36888:	7810      	ldrb	r0, [r2, #0]
   3688a:	2800      	cmp	r0, #0
   3688c:	d0fa      	beq.n	36884 <strstr+0x10>
   3688e:	2300      	movs	r3, #0
   36890:	5cc8      	ldrb	r0, [r1, r3]
   36892:	2800      	cmp	r0, #0
   36894:	d004      	beq.n	368a0 <strstr+0x2c>
   36896:	5cd4      	ldrb	r4, [r2, r3]
   36898:	4284      	cmp	r4, r0
   3689a:	d1f4      	bne.n	36886 <strstr+0x12>
   3689c:	3301      	adds	r3, #1
   3689e:	e7f7      	b.n	36890 <strstr+0x1c>
   368a0:	0010      	movs	r0, r2
   368a2:	e7ef      	b.n	36884 <strstr+0x10>

000368a4 <_strtol_l.isra.0>:
   368a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   368a6:	001f      	movs	r7, r3
   368a8:	000e      	movs	r6, r1
   368aa:	b087      	sub	sp, #28
   368ac:	9005      	str	r0, [sp, #20]
   368ae:	9103      	str	r1, [sp, #12]
   368b0:	9202      	str	r2, [sp, #8]
   368b2:	980c      	ldr	r0, [sp, #48]	; 0x30
   368b4:	7834      	ldrb	r4, [r6, #0]
   368b6:	f000 fb20 	bl	36efa <__locale_ctype_ptr_l>
   368ba:	2208      	movs	r2, #8
   368bc:	1900      	adds	r0, r0, r4
   368be:	7843      	ldrb	r3, [r0, #1]
   368c0:	1c75      	adds	r5, r6, #1
   368c2:	4013      	ands	r3, r2
   368c4:	d10c      	bne.n	368e0 <_strtol_l.isra.0+0x3c>
   368c6:	2c2d      	cmp	r4, #45	; 0x2d
   368c8:	d10c      	bne.n	368e4 <_strtol_l.isra.0+0x40>
   368ca:	3301      	adds	r3, #1
   368cc:	782c      	ldrb	r4, [r5, #0]
   368ce:	9301      	str	r3, [sp, #4]
   368d0:	1cb5      	adds	r5, r6, #2
   368d2:	2f00      	cmp	r7, #0
   368d4:	d00c      	beq.n	368f0 <_strtol_l.isra.0+0x4c>
   368d6:	2f10      	cmp	r7, #16
   368d8:	d114      	bne.n	36904 <_strtol_l.isra.0+0x60>
   368da:	2c30      	cmp	r4, #48	; 0x30
   368dc:	d00a      	beq.n	368f4 <_strtol_l.isra.0+0x50>
   368de:	e011      	b.n	36904 <_strtol_l.isra.0+0x60>
   368e0:	002e      	movs	r6, r5
   368e2:	e7e6      	b.n	368b2 <_strtol_l.isra.0+0xe>
   368e4:	9301      	str	r3, [sp, #4]
   368e6:	2c2b      	cmp	r4, #43	; 0x2b
   368e8:	d1f3      	bne.n	368d2 <_strtol_l.isra.0+0x2e>
   368ea:	782c      	ldrb	r4, [r5, #0]
   368ec:	1cb5      	adds	r5, r6, #2
   368ee:	e7f0      	b.n	368d2 <_strtol_l.isra.0+0x2e>
   368f0:	2c30      	cmp	r4, #48	; 0x30
   368f2:	d12f      	bne.n	36954 <_strtol_l.isra.0+0xb0>
   368f4:	2220      	movs	r2, #32
   368f6:	782b      	ldrb	r3, [r5, #0]
   368f8:	4393      	bics	r3, r2
   368fa:	2b58      	cmp	r3, #88	; 0x58
   368fc:	d151      	bne.n	369a2 <_strtol_l.isra.0+0xfe>
   368fe:	2710      	movs	r7, #16
   36900:	786c      	ldrb	r4, [r5, #1]
   36902:	3502      	adds	r5, #2
   36904:	9b01      	ldr	r3, [sp, #4]
   36906:	4a29      	ldr	r2, [pc, #164]	; (369ac <_strtol_l.isra.0+0x108>)
   36908:	0039      	movs	r1, r7
   3690a:	189e      	adds	r6, r3, r2
   3690c:	0030      	movs	r0, r6
   3690e:	f7fd f967 	bl	33be0 <__aeabi_uidivmod>
   36912:	0030      	movs	r0, r6
   36914:	9104      	str	r1, [sp, #16]
   36916:	0039      	movs	r1, r7
   36918:	f7fd f8dc 	bl	33ad4 <__udivsi3>
   3691c:	2101      	movs	r1, #1
   3691e:	2300      	movs	r3, #0
   36920:	4249      	negs	r1, r1
   36922:	0002      	movs	r2, r0
   36924:	468c      	mov	ip, r1
   36926:	0018      	movs	r0, r3
   36928:	0021      	movs	r1, r4
   3692a:	3930      	subs	r1, #48	; 0x30
   3692c:	2909      	cmp	r1, #9
   3692e:	d813      	bhi.n	36958 <_strtol_l.isra.0+0xb4>
   36930:	000c      	movs	r4, r1
   36932:	42a7      	cmp	r7, r4
   36934:	dd1c      	ble.n	36970 <_strtol_l.isra.0+0xcc>
   36936:	1c59      	adds	r1, r3, #1
   36938:	d009      	beq.n	3694e <_strtol_l.isra.0+0xaa>
   3693a:	4663      	mov	r3, ip
   3693c:	4282      	cmp	r2, r0
   3693e:	d306      	bcc.n	3694e <_strtol_l.isra.0+0xaa>
   36940:	d102      	bne.n	36948 <_strtol_l.isra.0+0xa4>
   36942:	9904      	ldr	r1, [sp, #16]
   36944:	42a1      	cmp	r1, r4
   36946:	db02      	blt.n	3694e <_strtol_l.isra.0+0xaa>
   36948:	2301      	movs	r3, #1
   3694a:	4378      	muls	r0, r7
   3694c:	1820      	adds	r0, r4, r0
   3694e:	782c      	ldrb	r4, [r5, #0]
   36950:	3501      	adds	r5, #1
   36952:	e7e9      	b.n	36928 <_strtol_l.isra.0+0x84>
   36954:	270a      	movs	r7, #10
   36956:	e7d5      	b.n	36904 <_strtol_l.isra.0+0x60>
   36958:	0021      	movs	r1, r4
   3695a:	3941      	subs	r1, #65	; 0x41
   3695c:	2919      	cmp	r1, #25
   3695e:	d801      	bhi.n	36964 <_strtol_l.isra.0+0xc0>
   36960:	3c37      	subs	r4, #55	; 0x37
   36962:	e7e6      	b.n	36932 <_strtol_l.isra.0+0x8e>
   36964:	0021      	movs	r1, r4
   36966:	3961      	subs	r1, #97	; 0x61
   36968:	2919      	cmp	r1, #25
   3696a:	d801      	bhi.n	36970 <_strtol_l.isra.0+0xcc>
   3696c:	3c57      	subs	r4, #87	; 0x57
   3696e:	e7e0      	b.n	36932 <_strtol_l.isra.0+0x8e>
   36970:	1c5a      	adds	r2, r3, #1
   36972:	d108      	bne.n	36986 <_strtol_l.isra.0+0xe2>
   36974:	9a05      	ldr	r2, [sp, #20]
   36976:	3323      	adds	r3, #35	; 0x23
   36978:	6013      	str	r3, [r2, #0]
   3697a:	9b02      	ldr	r3, [sp, #8]
   3697c:	0030      	movs	r0, r6
   3697e:	2b00      	cmp	r3, #0
   36980:	d10b      	bne.n	3699a <_strtol_l.isra.0+0xf6>
   36982:	b007      	add	sp, #28
   36984:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36986:	9a01      	ldr	r2, [sp, #4]
   36988:	2a00      	cmp	r2, #0
   3698a:	d000      	beq.n	3698e <_strtol_l.isra.0+0xea>
   3698c:	4240      	negs	r0, r0
   3698e:	9a02      	ldr	r2, [sp, #8]
   36990:	2a00      	cmp	r2, #0
   36992:	d0f6      	beq.n	36982 <_strtol_l.isra.0+0xde>
   36994:	9a03      	ldr	r2, [sp, #12]
   36996:	2b00      	cmp	r3, #0
   36998:	d000      	beq.n	3699c <_strtol_l.isra.0+0xf8>
   3699a:	1e6a      	subs	r2, r5, #1
   3699c:	9b02      	ldr	r3, [sp, #8]
   3699e:	601a      	str	r2, [r3, #0]
   369a0:	e7ef      	b.n	36982 <_strtol_l.isra.0+0xde>
   369a2:	2430      	movs	r4, #48	; 0x30
   369a4:	2f00      	cmp	r7, #0
   369a6:	d1ad      	bne.n	36904 <_strtol_l.isra.0+0x60>
   369a8:	3708      	adds	r7, #8
   369aa:	e7ab      	b.n	36904 <_strtol_l.isra.0+0x60>
   369ac:	7fffffff 	.word	0x7fffffff

000369b0 <strtol>:
   369b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   369b2:	0013      	movs	r3, r2
   369b4:	4a06      	ldr	r2, [pc, #24]	; (369d0 <strtol+0x20>)
   369b6:	0005      	movs	r5, r0
   369b8:	6810      	ldr	r0, [r2, #0]
   369ba:	6a04      	ldr	r4, [r0, #32]
   369bc:	2c00      	cmp	r4, #0
   369be:	d100      	bne.n	369c2 <strtol+0x12>
   369c0:	4c04      	ldr	r4, [pc, #16]	; (369d4 <strtol+0x24>)
   369c2:	000a      	movs	r2, r1
   369c4:	9400      	str	r4, [sp, #0]
   369c6:	0029      	movs	r1, r5
   369c8:	f7ff ff6c 	bl	368a4 <_strtol_l.isra.0>
   369cc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   369ce:	46c0      	nop			; (mov r8, r8)
   369d0:	20000130 	.word	0x20000130
   369d4:	20000194 	.word	0x20000194

000369d8 <_vsniprintf_r>:
   369d8:	b530      	push	{r4, r5, lr}
   369da:	0014      	movs	r4, r2
   369dc:	b09b      	sub	sp, #108	; 0x6c
   369de:	0005      	movs	r5, r0
   369e0:	001a      	movs	r2, r3
   369e2:	2c00      	cmp	r4, #0
   369e4:	da05      	bge.n	369f2 <_vsniprintf_r+0x1a>
   369e6:	238b      	movs	r3, #139	; 0x8b
   369e8:	6003      	str	r3, [r0, #0]
   369ea:	2001      	movs	r0, #1
   369ec:	4240      	negs	r0, r0
   369ee:	b01b      	add	sp, #108	; 0x6c
   369f0:	bd30      	pop	{r4, r5, pc}
   369f2:	2382      	movs	r3, #130	; 0x82
   369f4:	4668      	mov	r0, sp
   369f6:	009b      	lsls	r3, r3, #2
   369f8:	8183      	strh	r3, [r0, #12]
   369fa:	2300      	movs	r3, #0
   369fc:	9100      	str	r1, [sp, #0]
   369fe:	9104      	str	r1, [sp, #16]
   36a00:	429c      	cmp	r4, r3
   36a02:	d000      	beq.n	36a06 <_vsniprintf_r+0x2e>
   36a04:	1e63      	subs	r3, r4, #1
   36a06:	9302      	str	r3, [sp, #8]
   36a08:	9305      	str	r3, [sp, #20]
   36a0a:	2301      	movs	r3, #1
   36a0c:	4669      	mov	r1, sp
   36a0e:	425b      	negs	r3, r3
   36a10:	81cb      	strh	r3, [r1, #14]
   36a12:	0028      	movs	r0, r5
   36a14:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   36a16:	f000 fb63 	bl	370e0 <_svfiprintf_r>
   36a1a:	1c43      	adds	r3, r0, #1
   36a1c:	da01      	bge.n	36a22 <_vsniprintf_r+0x4a>
   36a1e:	238b      	movs	r3, #139	; 0x8b
   36a20:	602b      	str	r3, [r5, #0]
   36a22:	2c00      	cmp	r4, #0
   36a24:	d0e3      	beq.n	369ee <_vsniprintf_r+0x16>
   36a26:	2300      	movs	r3, #0
   36a28:	9a00      	ldr	r2, [sp, #0]
   36a2a:	7013      	strb	r3, [r2, #0]
   36a2c:	e7df      	b.n	369ee <_vsniprintf_r+0x16>
	...

00036a30 <vsniprintf>:
   36a30:	b507      	push	{r0, r1, r2, lr}
   36a32:	9300      	str	r3, [sp, #0]
   36a34:	0013      	movs	r3, r2
   36a36:	000a      	movs	r2, r1
   36a38:	0001      	movs	r1, r0
   36a3a:	4802      	ldr	r0, [pc, #8]	; (36a44 <vsniprintf+0x14>)
   36a3c:	6800      	ldr	r0, [r0, #0]
   36a3e:	f7ff ffcb 	bl	369d8 <_vsniprintf_r>
   36a42:	bd0e      	pop	{r1, r2, r3, pc}
   36a44:	20000130 	.word	0x20000130

00036a48 <__swbuf_r>:
   36a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36a4a:	0005      	movs	r5, r0
   36a4c:	000e      	movs	r6, r1
   36a4e:	0014      	movs	r4, r2
   36a50:	2800      	cmp	r0, #0
   36a52:	d004      	beq.n	36a5e <__swbuf_r+0x16>
   36a54:	6983      	ldr	r3, [r0, #24]
   36a56:	2b00      	cmp	r3, #0
   36a58:	d101      	bne.n	36a5e <__swbuf_r+0x16>
   36a5a:	f000 f9b9 	bl	36dd0 <__sinit>
   36a5e:	4b22      	ldr	r3, [pc, #136]	; (36ae8 <__swbuf_r+0xa0>)
   36a60:	429c      	cmp	r4, r3
   36a62:	d12d      	bne.n	36ac0 <__swbuf_r+0x78>
   36a64:	686c      	ldr	r4, [r5, #4]
   36a66:	69a3      	ldr	r3, [r4, #24]
   36a68:	60a3      	str	r3, [r4, #8]
   36a6a:	89a3      	ldrh	r3, [r4, #12]
   36a6c:	071b      	lsls	r3, r3, #28
   36a6e:	d531      	bpl.n	36ad4 <__swbuf_r+0x8c>
   36a70:	6923      	ldr	r3, [r4, #16]
   36a72:	2b00      	cmp	r3, #0
   36a74:	d02e      	beq.n	36ad4 <__swbuf_r+0x8c>
   36a76:	6823      	ldr	r3, [r4, #0]
   36a78:	6922      	ldr	r2, [r4, #16]
   36a7a:	b2f7      	uxtb	r7, r6
   36a7c:	1a98      	subs	r0, r3, r2
   36a7e:	6963      	ldr	r3, [r4, #20]
   36a80:	b2f6      	uxtb	r6, r6
   36a82:	4298      	cmp	r0, r3
   36a84:	db05      	blt.n	36a92 <__swbuf_r+0x4a>
   36a86:	0021      	movs	r1, r4
   36a88:	0028      	movs	r0, r5
   36a8a:	f000 f933 	bl	36cf4 <_fflush_r>
   36a8e:	2800      	cmp	r0, #0
   36a90:	d126      	bne.n	36ae0 <__swbuf_r+0x98>
   36a92:	68a3      	ldr	r3, [r4, #8]
   36a94:	3001      	adds	r0, #1
   36a96:	3b01      	subs	r3, #1
   36a98:	60a3      	str	r3, [r4, #8]
   36a9a:	6823      	ldr	r3, [r4, #0]
   36a9c:	1c5a      	adds	r2, r3, #1
   36a9e:	6022      	str	r2, [r4, #0]
   36aa0:	701f      	strb	r7, [r3, #0]
   36aa2:	6963      	ldr	r3, [r4, #20]
   36aa4:	4298      	cmp	r0, r3
   36aa6:	d004      	beq.n	36ab2 <__swbuf_r+0x6a>
   36aa8:	89a3      	ldrh	r3, [r4, #12]
   36aaa:	07db      	lsls	r3, r3, #31
   36aac:	d51a      	bpl.n	36ae4 <__swbuf_r+0x9c>
   36aae:	2e0a      	cmp	r6, #10
   36ab0:	d118      	bne.n	36ae4 <__swbuf_r+0x9c>
   36ab2:	0021      	movs	r1, r4
   36ab4:	0028      	movs	r0, r5
   36ab6:	f000 f91d 	bl	36cf4 <_fflush_r>
   36aba:	2800      	cmp	r0, #0
   36abc:	d012      	beq.n	36ae4 <__swbuf_r+0x9c>
   36abe:	e00f      	b.n	36ae0 <__swbuf_r+0x98>
   36ac0:	4b0a      	ldr	r3, [pc, #40]	; (36aec <__swbuf_r+0xa4>)
   36ac2:	429c      	cmp	r4, r3
   36ac4:	d101      	bne.n	36aca <__swbuf_r+0x82>
   36ac6:	68ac      	ldr	r4, [r5, #8]
   36ac8:	e7cd      	b.n	36a66 <__swbuf_r+0x1e>
   36aca:	4b09      	ldr	r3, [pc, #36]	; (36af0 <__swbuf_r+0xa8>)
   36acc:	429c      	cmp	r4, r3
   36ace:	d1ca      	bne.n	36a66 <__swbuf_r+0x1e>
   36ad0:	68ec      	ldr	r4, [r5, #12]
   36ad2:	e7c8      	b.n	36a66 <__swbuf_r+0x1e>
   36ad4:	0021      	movs	r1, r4
   36ad6:	0028      	movs	r0, r5
   36ad8:	f000 f80c 	bl	36af4 <__swsetup_r>
   36adc:	2800      	cmp	r0, #0
   36ade:	d0ca      	beq.n	36a76 <__swbuf_r+0x2e>
   36ae0:	2601      	movs	r6, #1
   36ae2:	4276      	negs	r6, r6
   36ae4:	0030      	movs	r0, r6
   36ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36ae8:	0003c088 	.word	0x0003c088
   36aec:	0003c0a8 	.word	0x0003c0a8
   36af0:	0003c068 	.word	0x0003c068

00036af4 <__swsetup_r>:
   36af4:	4b36      	ldr	r3, [pc, #216]	; (36bd0 <__swsetup_r+0xdc>)
   36af6:	b570      	push	{r4, r5, r6, lr}
   36af8:	681d      	ldr	r5, [r3, #0]
   36afa:	0006      	movs	r6, r0
   36afc:	000c      	movs	r4, r1
   36afe:	2d00      	cmp	r5, #0
   36b00:	d005      	beq.n	36b0e <__swsetup_r+0x1a>
   36b02:	69ab      	ldr	r3, [r5, #24]
   36b04:	2b00      	cmp	r3, #0
   36b06:	d102      	bne.n	36b0e <__swsetup_r+0x1a>
   36b08:	0028      	movs	r0, r5
   36b0a:	f000 f961 	bl	36dd0 <__sinit>
   36b0e:	4b31      	ldr	r3, [pc, #196]	; (36bd4 <__swsetup_r+0xe0>)
   36b10:	429c      	cmp	r4, r3
   36b12:	d10f      	bne.n	36b34 <__swsetup_r+0x40>
   36b14:	686c      	ldr	r4, [r5, #4]
   36b16:	230c      	movs	r3, #12
   36b18:	5ee2      	ldrsh	r2, [r4, r3]
   36b1a:	b293      	uxth	r3, r2
   36b1c:	0719      	lsls	r1, r3, #28
   36b1e:	d42d      	bmi.n	36b7c <__swsetup_r+0x88>
   36b20:	06d9      	lsls	r1, r3, #27
   36b22:	d411      	bmi.n	36b48 <__swsetup_r+0x54>
   36b24:	2309      	movs	r3, #9
   36b26:	2001      	movs	r0, #1
   36b28:	6033      	str	r3, [r6, #0]
   36b2a:	3337      	adds	r3, #55	; 0x37
   36b2c:	4313      	orrs	r3, r2
   36b2e:	81a3      	strh	r3, [r4, #12]
   36b30:	4240      	negs	r0, r0
   36b32:	bd70      	pop	{r4, r5, r6, pc}
   36b34:	4b28      	ldr	r3, [pc, #160]	; (36bd8 <__swsetup_r+0xe4>)
   36b36:	429c      	cmp	r4, r3
   36b38:	d101      	bne.n	36b3e <__swsetup_r+0x4a>
   36b3a:	68ac      	ldr	r4, [r5, #8]
   36b3c:	e7eb      	b.n	36b16 <__swsetup_r+0x22>
   36b3e:	4b27      	ldr	r3, [pc, #156]	; (36bdc <__swsetup_r+0xe8>)
   36b40:	429c      	cmp	r4, r3
   36b42:	d1e8      	bne.n	36b16 <__swsetup_r+0x22>
   36b44:	68ec      	ldr	r4, [r5, #12]
   36b46:	e7e6      	b.n	36b16 <__swsetup_r+0x22>
   36b48:	075b      	lsls	r3, r3, #29
   36b4a:	d513      	bpl.n	36b74 <__swsetup_r+0x80>
   36b4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   36b4e:	2900      	cmp	r1, #0
   36b50:	d008      	beq.n	36b64 <__swsetup_r+0x70>
   36b52:	0023      	movs	r3, r4
   36b54:	3344      	adds	r3, #68	; 0x44
   36b56:	4299      	cmp	r1, r3
   36b58:	d002      	beq.n	36b60 <__swsetup_r+0x6c>
   36b5a:	0030      	movs	r0, r6
   36b5c:	f7ff fc78 	bl	36450 <_free_r>
   36b60:	2300      	movs	r3, #0
   36b62:	6363      	str	r3, [r4, #52]	; 0x34
   36b64:	2224      	movs	r2, #36	; 0x24
   36b66:	89a3      	ldrh	r3, [r4, #12]
   36b68:	4393      	bics	r3, r2
   36b6a:	81a3      	strh	r3, [r4, #12]
   36b6c:	2300      	movs	r3, #0
   36b6e:	6063      	str	r3, [r4, #4]
   36b70:	6923      	ldr	r3, [r4, #16]
   36b72:	6023      	str	r3, [r4, #0]
   36b74:	2308      	movs	r3, #8
   36b76:	89a2      	ldrh	r2, [r4, #12]
   36b78:	4313      	orrs	r3, r2
   36b7a:	81a3      	strh	r3, [r4, #12]
   36b7c:	6923      	ldr	r3, [r4, #16]
   36b7e:	2b00      	cmp	r3, #0
   36b80:	d10b      	bne.n	36b9a <__swsetup_r+0xa6>
   36b82:	21a0      	movs	r1, #160	; 0xa0
   36b84:	2280      	movs	r2, #128	; 0x80
   36b86:	89a3      	ldrh	r3, [r4, #12]
   36b88:	0089      	lsls	r1, r1, #2
   36b8a:	0092      	lsls	r2, r2, #2
   36b8c:	400b      	ands	r3, r1
   36b8e:	4293      	cmp	r3, r2
   36b90:	d003      	beq.n	36b9a <__swsetup_r+0xa6>
   36b92:	0021      	movs	r1, r4
   36b94:	0030      	movs	r0, r6
   36b96:	f000 f9e9 	bl	36f6c <__smakebuf_r>
   36b9a:	2301      	movs	r3, #1
   36b9c:	89a2      	ldrh	r2, [r4, #12]
   36b9e:	4013      	ands	r3, r2
   36ba0:	d011      	beq.n	36bc6 <__swsetup_r+0xd2>
   36ba2:	2300      	movs	r3, #0
   36ba4:	60a3      	str	r3, [r4, #8]
   36ba6:	6963      	ldr	r3, [r4, #20]
   36ba8:	425b      	negs	r3, r3
   36baa:	61a3      	str	r3, [r4, #24]
   36bac:	2000      	movs	r0, #0
   36bae:	6923      	ldr	r3, [r4, #16]
   36bb0:	4283      	cmp	r3, r0
   36bb2:	d1be      	bne.n	36b32 <__swsetup_r+0x3e>
   36bb4:	230c      	movs	r3, #12
   36bb6:	5ee2      	ldrsh	r2, [r4, r3]
   36bb8:	0613      	lsls	r3, r2, #24
   36bba:	d5ba      	bpl.n	36b32 <__swsetup_r+0x3e>
   36bbc:	2340      	movs	r3, #64	; 0x40
   36bbe:	4313      	orrs	r3, r2
   36bc0:	81a3      	strh	r3, [r4, #12]
   36bc2:	3801      	subs	r0, #1
   36bc4:	e7b5      	b.n	36b32 <__swsetup_r+0x3e>
   36bc6:	0792      	lsls	r2, r2, #30
   36bc8:	d400      	bmi.n	36bcc <__swsetup_r+0xd8>
   36bca:	6963      	ldr	r3, [r4, #20]
   36bcc:	60a3      	str	r3, [r4, #8]
   36bce:	e7ed      	b.n	36bac <__swsetup_r+0xb8>
   36bd0:	20000130 	.word	0x20000130
   36bd4:	0003c088 	.word	0x0003c088
   36bd8:	0003c0a8 	.word	0x0003c0a8
   36bdc:	0003c068 	.word	0x0003c068

00036be0 <__sflush_r>:
   36be0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   36be2:	898a      	ldrh	r2, [r1, #12]
   36be4:	0005      	movs	r5, r0
   36be6:	000c      	movs	r4, r1
   36be8:	0713      	lsls	r3, r2, #28
   36bea:	d460      	bmi.n	36cae <__sflush_r+0xce>
   36bec:	684b      	ldr	r3, [r1, #4]
   36bee:	2b00      	cmp	r3, #0
   36bf0:	dc04      	bgt.n	36bfc <__sflush_r+0x1c>
   36bf2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   36bf4:	2b00      	cmp	r3, #0
   36bf6:	dc01      	bgt.n	36bfc <__sflush_r+0x1c>
   36bf8:	2000      	movs	r0, #0
   36bfa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   36bfc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   36bfe:	2f00      	cmp	r7, #0
   36c00:	d0fa      	beq.n	36bf8 <__sflush_r+0x18>
   36c02:	2300      	movs	r3, #0
   36c04:	682e      	ldr	r6, [r5, #0]
   36c06:	602b      	str	r3, [r5, #0]
   36c08:	2380      	movs	r3, #128	; 0x80
   36c0a:	015b      	lsls	r3, r3, #5
   36c0c:	401a      	ands	r2, r3
   36c0e:	d034      	beq.n	36c7a <__sflush_r+0x9a>
   36c10:	6d60      	ldr	r0, [r4, #84]	; 0x54
   36c12:	89a3      	ldrh	r3, [r4, #12]
   36c14:	075b      	lsls	r3, r3, #29
   36c16:	d506      	bpl.n	36c26 <__sflush_r+0x46>
   36c18:	6863      	ldr	r3, [r4, #4]
   36c1a:	1ac0      	subs	r0, r0, r3
   36c1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   36c1e:	2b00      	cmp	r3, #0
   36c20:	d001      	beq.n	36c26 <__sflush_r+0x46>
   36c22:	6c23      	ldr	r3, [r4, #64]	; 0x40
   36c24:	1ac0      	subs	r0, r0, r3
   36c26:	0002      	movs	r2, r0
   36c28:	6a21      	ldr	r1, [r4, #32]
   36c2a:	2300      	movs	r3, #0
   36c2c:	0028      	movs	r0, r5
   36c2e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   36c30:	47b8      	blx	r7
   36c32:	89a1      	ldrh	r1, [r4, #12]
   36c34:	1c43      	adds	r3, r0, #1
   36c36:	d106      	bne.n	36c46 <__sflush_r+0x66>
   36c38:	682b      	ldr	r3, [r5, #0]
   36c3a:	2b1d      	cmp	r3, #29
   36c3c:	d831      	bhi.n	36ca2 <__sflush_r+0xc2>
   36c3e:	4a2c      	ldr	r2, [pc, #176]	; (36cf0 <__sflush_r+0x110>)
   36c40:	40da      	lsrs	r2, r3
   36c42:	07d3      	lsls	r3, r2, #31
   36c44:	d52d      	bpl.n	36ca2 <__sflush_r+0xc2>
   36c46:	2300      	movs	r3, #0
   36c48:	6063      	str	r3, [r4, #4]
   36c4a:	6923      	ldr	r3, [r4, #16]
   36c4c:	6023      	str	r3, [r4, #0]
   36c4e:	04cb      	lsls	r3, r1, #19
   36c50:	d505      	bpl.n	36c5e <__sflush_r+0x7e>
   36c52:	1c43      	adds	r3, r0, #1
   36c54:	d102      	bne.n	36c5c <__sflush_r+0x7c>
   36c56:	682b      	ldr	r3, [r5, #0]
   36c58:	2b00      	cmp	r3, #0
   36c5a:	d100      	bne.n	36c5e <__sflush_r+0x7e>
   36c5c:	6560      	str	r0, [r4, #84]	; 0x54
   36c5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   36c60:	602e      	str	r6, [r5, #0]
   36c62:	2900      	cmp	r1, #0
   36c64:	d0c8      	beq.n	36bf8 <__sflush_r+0x18>
   36c66:	0023      	movs	r3, r4
   36c68:	3344      	adds	r3, #68	; 0x44
   36c6a:	4299      	cmp	r1, r3
   36c6c:	d002      	beq.n	36c74 <__sflush_r+0x94>
   36c6e:	0028      	movs	r0, r5
   36c70:	f7ff fbee 	bl	36450 <_free_r>
   36c74:	2000      	movs	r0, #0
   36c76:	6360      	str	r0, [r4, #52]	; 0x34
   36c78:	e7bf      	b.n	36bfa <__sflush_r+0x1a>
   36c7a:	2301      	movs	r3, #1
   36c7c:	6a21      	ldr	r1, [r4, #32]
   36c7e:	0028      	movs	r0, r5
   36c80:	47b8      	blx	r7
   36c82:	1c43      	adds	r3, r0, #1
   36c84:	d1c5      	bne.n	36c12 <__sflush_r+0x32>
   36c86:	682b      	ldr	r3, [r5, #0]
   36c88:	2b00      	cmp	r3, #0
   36c8a:	d0c2      	beq.n	36c12 <__sflush_r+0x32>
   36c8c:	2b1d      	cmp	r3, #29
   36c8e:	d001      	beq.n	36c94 <__sflush_r+0xb4>
   36c90:	2b16      	cmp	r3, #22
   36c92:	d101      	bne.n	36c98 <__sflush_r+0xb8>
   36c94:	602e      	str	r6, [r5, #0]
   36c96:	e7af      	b.n	36bf8 <__sflush_r+0x18>
   36c98:	2340      	movs	r3, #64	; 0x40
   36c9a:	89a2      	ldrh	r2, [r4, #12]
   36c9c:	4313      	orrs	r3, r2
   36c9e:	81a3      	strh	r3, [r4, #12]
   36ca0:	e7ab      	b.n	36bfa <__sflush_r+0x1a>
   36ca2:	2340      	movs	r3, #64	; 0x40
   36ca4:	430b      	orrs	r3, r1
   36ca6:	2001      	movs	r0, #1
   36ca8:	81a3      	strh	r3, [r4, #12]
   36caa:	4240      	negs	r0, r0
   36cac:	e7a5      	b.n	36bfa <__sflush_r+0x1a>
   36cae:	690f      	ldr	r7, [r1, #16]
   36cb0:	2f00      	cmp	r7, #0
   36cb2:	d0a1      	beq.n	36bf8 <__sflush_r+0x18>
   36cb4:	680b      	ldr	r3, [r1, #0]
   36cb6:	600f      	str	r7, [r1, #0]
   36cb8:	1bdb      	subs	r3, r3, r7
   36cba:	9301      	str	r3, [sp, #4]
   36cbc:	2300      	movs	r3, #0
   36cbe:	0792      	lsls	r2, r2, #30
   36cc0:	d100      	bne.n	36cc4 <__sflush_r+0xe4>
   36cc2:	694b      	ldr	r3, [r1, #20]
   36cc4:	60a3      	str	r3, [r4, #8]
   36cc6:	9b01      	ldr	r3, [sp, #4]
   36cc8:	2b00      	cmp	r3, #0
   36cca:	dc00      	bgt.n	36cce <__sflush_r+0xee>
   36ccc:	e794      	b.n	36bf8 <__sflush_r+0x18>
   36cce:	9b01      	ldr	r3, [sp, #4]
   36cd0:	003a      	movs	r2, r7
   36cd2:	6a21      	ldr	r1, [r4, #32]
   36cd4:	0028      	movs	r0, r5
   36cd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   36cd8:	47b0      	blx	r6
   36cda:	2800      	cmp	r0, #0
   36cdc:	dc03      	bgt.n	36ce6 <__sflush_r+0x106>
   36cde:	2340      	movs	r3, #64	; 0x40
   36ce0:	89a2      	ldrh	r2, [r4, #12]
   36ce2:	4313      	orrs	r3, r2
   36ce4:	e7df      	b.n	36ca6 <__sflush_r+0xc6>
   36ce6:	9b01      	ldr	r3, [sp, #4]
   36ce8:	183f      	adds	r7, r7, r0
   36cea:	1a1b      	subs	r3, r3, r0
   36cec:	9301      	str	r3, [sp, #4]
   36cee:	e7ea      	b.n	36cc6 <__sflush_r+0xe6>
   36cf0:	20400001 	.word	0x20400001

00036cf4 <_fflush_r>:
   36cf4:	690b      	ldr	r3, [r1, #16]
   36cf6:	b570      	push	{r4, r5, r6, lr}
   36cf8:	0005      	movs	r5, r0
   36cfa:	000c      	movs	r4, r1
   36cfc:	2b00      	cmp	r3, #0
   36cfe:	d101      	bne.n	36d04 <_fflush_r+0x10>
   36d00:	2000      	movs	r0, #0
   36d02:	bd70      	pop	{r4, r5, r6, pc}
   36d04:	2800      	cmp	r0, #0
   36d06:	d004      	beq.n	36d12 <_fflush_r+0x1e>
   36d08:	6983      	ldr	r3, [r0, #24]
   36d0a:	2b00      	cmp	r3, #0
   36d0c:	d101      	bne.n	36d12 <_fflush_r+0x1e>
   36d0e:	f000 f85f 	bl	36dd0 <__sinit>
   36d12:	4b0b      	ldr	r3, [pc, #44]	; (36d40 <_fflush_r+0x4c>)
   36d14:	429c      	cmp	r4, r3
   36d16:	d109      	bne.n	36d2c <_fflush_r+0x38>
   36d18:	686c      	ldr	r4, [r5, #4]
   36d1a:	220c      	movs	r2, #12
   36d1c:	5ea3      	ldrsh	r3, [r4, r2]
   36d1e:	2b00      	cmp	r3, #0
   36d20:	d0ee      	beq.n	36d00 <_fflush_r+0xc>
   36d22:	0021      	movs	r1, r4
   36d24:	0028      	movs	r0, r5
   36d26:	f7ff ff5b 	bl	36be0 <__sflush_r>
   36d2a:	e7ea      	b.n	36d02 <_fflush_r+0xe>
   36d2c:	4b05      	ldr	r3, [pc, #20]	; (36d44 <_fflush_r+0x50>)
   36d2e:	429c      	cmp	r4, r3
   36d30:	d101      	bne.n	36d36 <_fflush_r+0x42>
   36d32:	68ac      	ldr	r4, [r5, #8]
   36d34:	e7f1      	b.n	36d1a <_fflush_r+0x26>
   36d36:	4b04      	ldr	r3, [pc, #16]	; (36d48 <_fflush_r+0x54>)
   36d38:	429c      	cmp	r4, r3
   36d3a:	d1ee      	bne.n	36d1a <_fflush_r+0x26>
   36d3c:	68ec      	ldr	r4, [r5, #12]
   36d3e:	e7ec      	b.n	36d1a <_fflush_r+0x26>
   36d40:	0003c088 	.word	0x0003c088
   36d44:	0003c0a8 	.word	0x0003c0a8
   36d48:	0003c068 	.word	0x0003c068

00036d4c <_cleanup_r>:
   36d4c:	b510      	push	{r4, lr}
   36d4e:	4902      	ldr	r1, [pc, #8]	; (36d58 <_cleanup_r+0xc>)
   36d50:	f000 f8b2 	bl	36eb8 <_fwalk_reent>
   36d54:	bd10      	pop	{r4, pc}
   36d56:	46c0      	nop			; (mov r8, r8)
   36d58:	00036cf5 	.word	0x00036cf5

00036d5c <std.isra.0>:
   36d5c:	2300      	movs	r3, #0
   36d5e:	b510      	push	{r4, lr}
   36d60:	0004      	movs	r4, r0
   36d62:	6003      	str	r3, [r0, #0]
   36d64:	6043      	str	r3, [r0, #4]
   36d66:	6083      	str	r3, [r0, #8]
   36d68:	8181      	strh	r1, [r0, #12]
   36d6a:	6643      	str	r3, [r0, #100]	; 0x64
   36d6c:	81c2      	strh	r2, [r0, #14]
   36d6e:	6103      	str	r3, [r0, #16]
   36d70:	6143      	str	r3, [r0, #20]
   36d72:	6183      	str	r3, [r0, #24]
   36d74:	0019      	movs	r1, r3
   36d76:	2208      	movs	r2, #8
   36d78:	305c      	adds	r0, #92	; 0x5c
   36d7a:	f7ff fb60 	bl	3643e <memset>
   36d7e:	4b05      	ldr	r3, [pc, #20]	; (36d94 <std.isra.0+0x38>)
   36d80:	6224      	str	r4, [r4, #32]
   36d82:	6263      	str	r3, [r4, #36]	; 0x24
   36d84:	4b04      	ldr	r3, [pc, #16]	; (36d98 <std.isra.0+0x3c>)
   36d86:	62a3      	str	r3, [r4, #40]	; 0x28
   36d88:	4b04      	ldr	r3, [pc, #16]	; (36d9c <std.isra.0+0x40>)
   36d8a:	62e3      	str	r3, [r4, #44]	; 0x2c
   36d8c:	4b04      	ldr	r3, [pc, #16]	; (36da0 <std.isra.0+0x44>)
   36d8e:	6323      	str	r3, [r4, #48]	; 0x30
   36d90:	bd10      	pop	{r4, pc}
   36d92:	46c0      	nop			; (mov r8, r8)
   36d94:	000375f9 	.word	0x000375f9
   36d98:	00037621 	.word	0x00037621
   36d9c:	00037659 	.word	0x00037659
   36da0:	00037685 	.word	0x00037685

00036da4 <__sfmoreglue>:
   36da4:	b570      	push	{r4, r5, r6, lr}
   36da6:	2568      	movs	r5, #104	; 0x68
   36da8:	1e4a      	subs	r2, r1, #1
   36daa:	4355      	muls	r5, r2
   36dac:	000e      	movs	r6, r1
   36dae:	0029      	movs	r1, r5
   36db0:	3174      	adds	r1, #116	; 0x74
   36db2:	f7ff fb97 	bl	364e4 <_malloc_r>
   36db6:	1e04      	subs	r4, r0, #0
   36db8:	d008      	beq.n	36dcc <__sfmoreglue+0x28>
   36dba:	2100      	movs	r1, #0
   36dbc:	002a      	movs	r2, r5
   36dbe:	6001      	str	r1, [r0, #0]
   36dc0:	6046      	str	r6, [r0, #4]
   36dc2:	300c      	adds	r0, #12
   36dc4:	60a0      	str	r0, [r4, #8]
   36dc6:	3268      	adds	r2, #104	; 0x68
   36dc8:	f7ff fb39 	bl	3643e <memset>
   36dcc:	0020      	movs	r0, r4
   36dce:	bd70      	pop	{r4, r5, r6, pc}

00036dd0 <__sinit>:
   36dd0:	6983      	ldr	r3, [r0, #24]
   36dd2:	b513      	push	{r0, r1, r4, lr}
   36dd4:	0004      	movs	r4, r0
   36dd6:	2b00      	cmp	r3, #0
   36dd8:	d128      	bne.n	36e2c <__sinit+0x5c>
   36dda:	6483      	str	r3, [r0, #72]	; 0x48
   36ddc:	64c3      	str	r3, [r0, #76]	; 0x4c
   36dde:	6503      	str	r3, [r0, #80]	; 0x50
   36de0:	4b13      	ldr	r3, [pc, #76]	; (36e30 <__sinit+0x60>)
   36de2:	4a14      	ldr	r2, [pc, #80]	; (36e34 <__sinit+0x64>)
   36de4:	681b      	ldr	r3, [r3, #0]
   36de6:	6282      	str	r2, [r0, #40]	; 0x28
   36de8:	9301      	str	r3, [sp, #4]
   36dea:	4298      	cmp	r0, r3
   36dec:	d101      	bne.n	36df2 <__sinit+0x22>
   36dee:	2301      	movs	r3, #1
   36df0:	6183      	str	r3, [r0, #24]
   36df2:	0020      	movs	r0, r4
   36df4:	f000 f820 	bl	36e38 <__sfp>
   36df8:	6060      	str	r0, [r4, #4]
   36dfa:	0020      	movs	r0, r4
   36dfc:	f000 f81c 	bl	36e38 <__sfp>
   36e00:	60a0      	str	r0, [r4, #8]
   36e02:	0020      	movs	r0, r4
   36e04:	f000 f818 	bl	36e38 <__sfp>
   36e08:	2200      	movs	r2, #0
   36e0a:	60e0      	str	r0, [r4, #12]
   36e0c:	2104      	movs	r1, #4
   36e0e:	6860      	ldr	r0, [r4, #4]
   36e10:	f7ff ffa4 	bl	36d5c <std.isra.0>
   36e14:	2201      	movs	r2, #1
   36e16:	2109      	movs	r1, #9
   36e18:	68a0      	ldr	r0, [r4, #8]
   36e1a:	f7ff ff9f 	bl	36d5c <std.isra.0>
   36e1e:	2202      	movs	r2, #2
   36e20:	2112      	movs	r1, #18
   36e22:	68e0      	ldr	r0, [r4, #12]
   36e24:	f7ff ff9a 	bl	36d5c <std.isra.0>
   36e28:	2301      	movs	r3, #1
   36e2a:	61a3      	str	r3, [r4, #24]
   36e2c:	bd13      	pop	{r0, r1, r4, pc}
   36e2e:	46c0      	nop			; (mov r8, r8)
   36e30:	0003c064 	.word	0x0003c064
   36e34:	00036d4d 	.word	0x00036d4d

00036e38 <__sfp>:
   36e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36e3a:	4b1e      	ldr	r3, [pc, #120]	; (36eb4 <__sfp+0x7c>)
   36e3c:	0007      	movs	r7, r0
   36e3e:	681e      	ldr	r6, [r3, #0]
   36e40:	69b3      	ldr	r3, [r6, #24]
   36e42:	2b00      	cmp	r3, #0
   36e44:	d102      	bne.n	36e4c <__sfp+0x14>
   36e46:	0030      	movs	r0, r6
   36e48:	f7ff ffc2 	bl	36dd0 <__sinit>
   36e4c:	3648      	adds	r6, #72	; 0x48
   36e4e:	68b4      	ldr	r4, [r6, #8]
   36e50:	6873      	ldr	r3, [r6, #4]
   36e52:	3b01      	subs	r3, #1
   36e54:	d504      	bpl.n	36e60 <__sfp+0x28>
   36e56:	6833      	ldr	r3, [r6, #0]
   36e58:	2b00      	cmp	r3, #0
   36e5a:	d007      	beq.n	36e6c <__sfp+0x34>
   36e5c:	6836      	ldr	r6, [r6, #0]
   36e5e:	e7f6      	b.n	36e4e <__sfp+0x16>
   36e60:	220c      	movs	r2, #12
   36e62:	5ea5      	ldrsh	r5, [r4, r2]
   36e64:	2d00      	cmp	r5, #0
   36e66:	d00d      	beq.n	36e84 <__sfp+0x4c>
   36e68:	3468      	adds	r4, #104	; 0x68
   36e6a:	e7f2      	b.n	36e52 <__sfp+0x1a>
   36e6c:	2104      	movs	r1, #4
   36e6e:	0038      	movs	r0, r7
   36e70:	f7ff ff98 	bl	36da4 <__sfmoreglue>
   36e74:	6030      	str	r0, [r6, #0]
   36e76:	2800      	cmp	r0, #0
   36e78:	d1f0      	bne.n	36e5c <__sfp+0x24>
   36e7a:	230c      	movs	r3, #12
   36e7c:	0004      	movs	r4, r0
   36e7e:	603b      	str	r3, [r7, #0]
   36e80:	0020      	movs	r0, r4
   36e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36e84:	2301      	movs	r3, #1
   36e86:	0020      	movs	r0, r4
   36e88:	425b      	negs	r3, r3
   36e8a:	81e3      	strh	r3, [r4, #14]
   36e8c:	3302      	adds	r3, #2
   36e8e:	81a3      	strh	r3, [r4, #12]
   36e90:	6665      	str	r5, [r4, #100]	; 0x64
   36e92:	6025      	str	r5, [r4, #0]
   36e94:	60a5      	str	r5, [r4, #8]
   36e96:	6065      	str	r5, [r4, #4]
   36e98:	6125      	str	r5, [r4, #16]
   36e9a:	6165      	str	r5, [r4, #20]
   36e9c:	61a5      	str	r5, [r4, #24]
   36e9e:	2208      	movs	r2, #8
   36ea0:	0029      	movs	r1, r5
   36ea2:	305c      	adds	r0, #92	; 0x5c
   36ea4:	f7ff facb 	bl	3643e <memset>
   36ea8:	6365      	str	r5, [r4, #52]	; 0x34
   36eaa:	63a5      	str	r5, [r4, #56]	; 0x38
   36eac:	64a5      	str	r5, [r4, #72]	; 0x48
   36eae:	64e5      	str	r5, [r4, #76]	; 0x4c
   36eb0:	e7e6      	b.n	36e80 <__sfp+0x48>
   36eb2:	46c0      	nop			; (mov r8, r8)
   36eb4:	0003c064 	.word	0x0003c064

00036eb8 <_fwalk_reent>:
   36eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   36eba:	0004      	movs	r4, r0
   36ebc:	0007      	movs	r7, r0
   36ebe:	2600      	movs	r6, #0
   36ec0:	9101      	str	r1, [sp, #4]
   36ec2:	3448      	adds	r4, #72	; 0x48
   36ec4:	2c00      	cmp	r4, #0
   36ec6:	d101      	bne.n	36ecc <_fwalk_reent+0x14>
   36ec8:	0030      	movs	r0, r6
   36eca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   36ecc:	6863      	ldr	r3, [r4, #4]
   36ece:	68a5      	ldr	r5, [r4, #8]
   36ed0:	9300      	str	r3, [sp, #0]
   36ed2:	9b00      	ldr	r3, [sp, #0]
   36ed4:	3b01      	subs	r3, #1
   36ed6:	9300      	str	r3, [sp, #0]
   36ed8:	d501      	bpl.n	36ede <_fwalk_reent+0x26>
   36eda:	6824      	ldr	r4, [r4, #0]
   36edc:	e7f2      	b.n	36ec4 <_fwalk_reent+0xc>
   36ede:	89ab      	ldrh	r3, [r5, #12]
   36ee0:	2b01      	cmp	r3, #1
   36ee2:	d908      	bls.n	36ef6 <_fwalk_reent+0x3e>
   36ee4:	220e      	movs	r2, #14
   36ee6:	5eab      	ldrsh	r3, [r5, r2]
   36ee8:	3301      	adds	r3, #1
   36eea:	d004      	beq.n	36ef6 <_fwalk_reent+0x3e>
   36eec:	0029      	movs	r1, r5
   36eee:	0038      	movs	r0, r7
   36ef0:	9b01      	ldr	r3, [sp, #4]
   36ef2:	4798      	blx	r3
   36ef4:	4306      	orrs	r6, r0
   36ef6:	3568      	adds	r5, #104	; 0x68
   36ef8:	e7eb      	b.n	36ed2 <_fwalk_reent+0x1a>

00036efa <__locale_ctype_ptr_l>:
   36efa:	30ec      	adds	r0, #236	; 0xec
   36efc:	6800      	ldr	r0, [r0, #0]
   36efe:	4770      	bx	lr

00036f00 <__locale_ctype_ptr>:
   36f00:	4b04      	ldr	r3, [pc, #16]	; (36f14 <__locale_ctype_ptr+0x14>)
   36f02:	681b      	ldr	r3, [r3, #0]
   36f04:	6a1b      	ldr	r3, [r3, #32]
   36f06:	2b00      	cmp	r3, #0
   36f08:	d100      	bne.n	36f0c <__locale_ctype_ptr+0xc>
   36f0a:	4b03      	ldr	r3, [pc, #12]	; (36f18 <__locale_ctype_ptr+0x18>)
   36f0c:	33ec      	adds	r3, #236	; 0xec
   36f0e:	6818      	ldr	r0, [r3, #0]
   36f10:	4770      	bx	lr
   36f12:	46c0      	nop			; (mov r8, r8)
   36f14:	20000130 	.word	0x20000130
   36f18:	20000194 	.word	0x20000194

00036f1c <__swhatbuf_r>:
   36f1c:	b570      	push	{r4, r5, r6, lr}
   36f1e:	000e      	movs	r6, r1
   36f20:	001d      	movs	r5, r3
   36f22:	230e      	movs	r3, #14
   36f24:	5ec9      	ldrsh	r1, [r1, r3]
   36f26:	b090      	sub	sp, #64	; 0x40
   36f28:	0014      	movs	r4, r2
   36f2a:	2900      	cmp	r1, #0
   36f2c:	da07      	bge.n	36f3e <__swhatbuf_r+0x22>
   36f2e:	2300      	movs	r3, #0
   36f30:	602b      	str	r3, [r5, #0]
   36f32:	89b3      	ldrh	r3, [r6, #12]
   36f34:	061b      	lsls	r3, r3, #24
   36f36:	d411      	bmi.n	36f5c <__swhatbuf_r+0x40>
   36f38:	2380      	movs	r3, #128	; 0x80
   36f3a:	00db      	lsls	r3, r3, #3
   36f3c:	e00f      	b.n	36f5e <__swhatbuf_r+0x42>
   36f3e:	aa01      	add	r2, sp, #4
   36f40:	f000 fbe6 	bl	37710 <_fstat_r>
   36f44:	2800      	cmp	r0, #0
   36f46:	dbf2      	blt.n	36f2e <__swhatbuf_r+0x12>
   36f48:	22f0      	movs	r2, #240	; 0xf0
   36f4a:	9b02      	ldr	r3, [sp, #8]
   36f4c:	0212      	lsls	r2, r2, #8
   36f4e:	4013      	ands	r3, r2
   36f50:	4a05      	ldr	r2, [pc, #20]	; (36f68 <__swhatbuf_r+0x4c>)
   36f52:	189b      	adds	r3, r3, r2
   36f54:	425a      	negs	r2, r3
   36f56:	4153      	adcs	r3, r2
   36f58:	602b      	str	r3, [r5, #0]
   36f5a:	e7ed      	b.n	36f38 <__swhatbuf_r+0x1c>
   36f5c:	2340      	movs	r3, #64	; 0x40
   36f5e:	2000      	movs	r0, #0
   36f60:	6023      	str	r3, [r4, #0]
   36f62:	b010      	add	sp, #64	; 0x40
   36f64:	bd70      	pop	{r4, r5, r6, pc}
   36f66:	46c0      	nop			; (mov r8, r8)
   36f68:	ffffe000 	.word	0xffffe000

00036f6c <__smakebuf_r>:
   36f6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   36f6e:	2602      	movs	r6, #2
   36f70:	898b      	ldrh	r3, [r1, #12]
   36f72:	0005      	movs	r5, r0
   36f74:	000c      	movs	r4, r1
   36f76:	4233      	tst	r3, r6
   36f78:	d006      	beq.n	36f88 <__smakebuf_r+0x1c>
   36f7a:	0023      	movs	r3, r4
   36f7c:	3347      	adds	r3, #71	; 0x47
   36f7e:	6023      	str	r3, [r4, #0]
   36f80:	6123      	str	r3, [r4, #16]
   36f82:	2301      	movs	r3, #1
   36f84:	6163      	str	r3, [r4, #20]
   36f86:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   36f88:	ab01      	add	r3, sp, #4
   36f8a:	466a      	mov	r2, sp
   36f8c:	f7ff ffc6 	bl	36f1c <__swhatbuf_r>
   36f90:	9900      	ldr	r1, [sp, #0]
   36f92:	0007      	movs	r7, r0
   36f94:	0028      	movs	r0, r5
   36f96:	f7ff faa5 	bl	364e4 <_malloc_r>
   36f9a:	2800      	cmp	r0, #0
   36f9c:	d108      	bne.n	36fb0 <__smakebuf_r+0x44>
   36f9e:	220c      	movs	r2, #12
   36fa0:	5ea3      	ldrsh	r3, [r4, r2]
   36fa2:	059a      	lsls	r2, r3, #22
   36fa4:	d4ef      	bmi.n	36f86 <__smakebuf_r+0x1a>
   36fa6:	2203      	movs	r2, #3
   36fa8:	4393      	bics	r3, r2
   36faa:	431e      	orrs	r6, r3
   36fac:	81a6      	strh	r6, [r4, #12]
   36fae:	e7e4      	b.n	36f7a <__smakebuf_r+0xe>
   36fb0:	4b0f      	ldr	r3, [pc, #60]	; (36ff0 <__smakebuf_r+0x84>)
   36fb2:	62ab      	str	r3, [r5, #40]	; 0x28
   36fb4:	2380      	movs	r3, #128	; 0x80
   36fb6:	89a2      	ldrh	r2, [r4, #12]
   36fb8:	6020      	str	r0, [r4, #0]
   36fba:	4313      	orrs	r3, r2
   36fbc:	81a3      	strh	r3, [r4, #12]
   36fbe:	9b00      	ldr	r3, [sp, #0]
   36fc0:	6120      	str	r0, [r4, #16]
   36fc2:	6163      	str	r3, [r4, #20]
   36fc4:	9b01      	ldr	r3, [sp, #4]
   36fc6:	2b00      	cmp	r3, #0
   36fc8:	d00d      	beq.n	36fe6 <__smakebuf_r+0x7a>
   36fca:	230e      	movs	r3, #14
   36fcc:	5ee1      	ldrsh	r1, [r4, r3]
   36fce:	0028      	movs	r0, r5
   36fd0:	f000 fbb0 	bl	37734 <_isatty_r>
   36fd4:	2800      	cmp	r0, #0
   36fd6:	d006      	beq.n	36fe6 <__smakebuf_r+0x7a>
   36fd8:	2203      	movs	r2, #3
   36fda:	89a3      	ldrh	r3, [r4, #12]
   36fdc:	4393      	bics	r3, r2
   36fde:	001a      	movs	r2, r3
   36fe0:	2301      	movs	r3, #1
   36fe2:	4313      	orrs	r3, r2
   36fe4:	81a3      	strh	r3, [r4, #12]
   36fe6:	89a0      	ldrh	r0, [r4, #12]
   36fe8:	4338      	orrs	r0, r7
   36fea:	81a0      	strh	r0, [r4, #12]
   36fec:	e7cb      	b.n	36f86 <__smakebuf_r+0x1a>
   36fee:	46c0      	nop			; (mov r8, r8)
   36ff0:	00036d4d 	.word	0x00036d4d

00036ff4 <__ascii_mbtowc>:
   36ff4:	b082      	sub	sp, #8
   36ff6:	2900      	cmp	r1, #0
   36ff8:	d100      	bne.n	36ffc <__ascii_mbtowc+0x8>
   36ffa:	a901      	add	r1, sp, #4
   36ffc:	1e10      	subs	r0, r2, #0
   36ffe:	d006      	beq.n	3700e <__ascii_mbtowc+0x1a>
   37000:	2b00      	cmp	r3, #0
   37002:	d006      	beq.n	37012 <__ascii_mbtowc+0x1e>
   37004:	7813      	ldrb	r3, [r2, #0]
   37006:	600b      	str	r3, [r1, #0]
   37008:	7810      	ldrb	r0, [r2, #0]
   3700a:	1e43      	subs	r3, r0, #1
   3700c:	4198      	sbcs	r0, r3
   3700e:	b002      	add	sp, #8
   37010:	4770      	bx	lr
   37012:	2002      	movs	r0, #2
   37014:	4240      	negs	r0, r0
   37016:	e7fa      	b.n	3700e <__ascii_mbtowc+0x1a>

00037018 <__malloc_lock>:
   37018:	4770      	bx	lr

0003701a <__malloc_unlock>:
   3701a:	4770      	bx	lr

0003701c <__ssputs_r>:
   3701c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3701e:	688e      	ldr	r6, [r1, #8]
   37020:	b085      	sub	sp, #20
   37022:	0007      	movs	r7, r0
   37024:	000c      	movs	r4, r1
   37026:	9203      	str	r2, [sp, #12]
   37028:	9301      	str	r3, [sp, #4]
   3702a:	429e      	cmp	r6, r3
   3702c:	d839      	bhi.n	370a2 <__ssputs_r+0x86>
   3702e:	2390      	movs	r3, #144	; 0x90
   37030:	898a      	ldrh	r2, [r1, #12]
   37032:	00db      	lsls	r3, r3, #3
   37034:	421a      	tst	r2, r3
   37036:	d034      	beq.n	370a2 <__ssputs_r+0x86>
   37038:	2503      	movs	r5, #3
   3703a:	6909      	ldr	r1, [r1, #16]
   3703c:	6823      	ldr	r3, [r4, #0]
   3703e:	1a5b      	subs	r3, r3, r1
   37040:	9302      	str	r3, [sp, #8]
   37042:	6963      	ldr	r3, [r4, #20]
   37044:	9802      	ldr	r0, [sp, #8]
   37046:	435d      	muls	r5, r3
   37048:	0feb      	lsrs	r3, r5, #31
   3704a:	195d      	adds	r5, r3, r5
   3704c:	9b01      	ldr	r3, [sp, #4]
   3704e:	106d      	asrs	r5, r5, #1
   37050:	3301      	adds	r3, #1
   37052:	181b      	adds	r3, r3, r0
   37054:	42ab      	cmp	r3, r5
   37056:	d900      	bls.n	3705a <__ssputs_r+0x3e>
   37058:	001d      	movs	r5, r3
   3705a:	0553      	lsls	r3, r2, #21
   3705c:	d532      	bpl.n	370c4 <__ssputs_r+0xa8>
   3705e:	0029      	movs	r1, r5
   37060:	0038      	movs	r0, r7
   37062:	f7ff fa3f 	bl	364e4 <_malloc_r>
   37066:	1e06      	subs	r6, r0, #0
   37068:	d109      	bne.n	3707e <__ssputs_r+0x62>
   3706a:	230c      	movs	r3, #12
   3706c:	603b      	str	r3, [r7, #0]
   3706e:	2340      	movs	r3, #64	; 0x40
   37070:	2001      	movs	r0, #1
   37072:	89a2      	ldrh	r2, [r4, #12]
   37074:	4240      	negs	r0, r0
   37076:	4313      	orrs	r3, r2
   37078:	81a3      	strh	r3, [r4, #12]
   3707a:	b005      	add	sp, #20
   3707c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3707e:	9a02      	ldr	r2, [sp, #8]
   37080:	6921      	ldr	r1, [r4, #16]
   37082:	f7ff f9c1 	bl	36408 <memcpy>
   37086:	89a3      	ldrh	r3, [r4, #12]
   37088:	4a14      	ldr	r2, [pc, #80]	; (370dc <__ssputs_r+0xc0>)
   3708a:	401a      	ands	r2, r3
   3708c:	2380      	movs	r3, #128	; 0x80
   3708e:	4313      	orrs	r3, r2
   37090:	81a3      	strh	r3, [r4, #12]
   37092:	9b02      	ldr	r3, [sp, #8]
   37094:	6126      	str	r6, [r4, #16]
   37096:	18f6      	adds	r6, r6, r3
   37098:	6026      	str	r6, [r4, #0]
   3709a:	6165      	str	r5, [r4, #20]
   3709c:	9e01      	ldr	r6, [sp, #4]
   3709e:	1aed      	subs	r5, r5, r3
   370a0:	60a5      	str	r5, [r4, #8]
   370a2:	9b01      	ldr	r3, [sp, #4]
   370a4:	42b3      	cmp	r3, r6
   370a6:	d200      	bcs.n	370aa <__ssputs_r+0x8e>
   370a8:	001e      	movs	r6, r3
   370aa:	0032      	movs	r2, r6
   370ac:	9903      	ldr	r1, [sp, #12]
   370ae:	6820      	ldr	r0, [r4, #0]
   370b0:	f7ff f9b3 	bl	3641a <memmove>
   370b4:	68a3      	ldr	r3, [r4, #8]
   370b6:	2000      	movs	r0, #0
   370b8:	1b9b      	subs	r3, r3, r6
   370ba:	60a3      	str	r3, [r4, #8]
   370bc:	6823      	ldr	r3, [r4, #0]
   370be:	199e      	adds	r6, r3, r6
   370c0:	6026      	str	r6, [r4, #0]
   370c2:	e7da      	b.n	3707a <__ssputs_r+0x5e>
   370c4:	002a      	movs	r2, r5
   370c6:	0038      	movs	r0, r7
   370c8:	f000 fb65 	bl	37796 <_realloc_r>
   370cc:	1e06      	subs	r6, r0, #0
   370ce:	d1e0      	bne.n	37092 <__ssputs_r+0x76>
   370d0:	6921      	ldr	r1, [r4, #16]
   370d2:	0038      	movs	r0, r7
   370d4:	f7ff f9bc 	bl	36450 <_free_r>
   370d8:	e7c7      	b.n	3706a <__ssputs_r+0x4e>
   370da:	46c0      	nop			; (mov r8, r8)
   370dc:	fffffb7f 	.word	0xfffffb7f

000370e0 <_svfiprintf_r>:
   370e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   370e2:	b09f      	sub	sp, #124	; 0x7c
   370e4:	9002      	str	r0, [sp, #8]
   370e6:	9305      	str	r3, [sp, #20]
   370e8:	898b      	ldrh	r3, [r1, #12]
   370ea:	000f      	movs	r7, r1
   370ec:	0016      	movs	r6, r2
   370ee:	061b      	lsls	r3, r3, #24
   370f0:	d511      	bpl.n	37116 <_svfiprintf_r+0x36>
   370f2:	690b      	ldr	r3, [r1, #16]
   370f4:	2b00      	cmp	r3, #0
   370f6:	d10e      	bne.n	37116 <_svfiprintf_r+0x36>
   370f8:	2140      	movs	r1, #64	; 0x40
   370fa:	f7ff f9f3 	bl	364e4 <_malloc_r>
   370fe:	6038      	str	r0, [r7, #0]
   37100:	6138      	str	r0, [r7, #16]
   37102:	2800      	cmp	r0, #0
   37104:	d105      	bne.n	37112 <_svfiprintf_r+0x32>
   37106:	230c      	movs	r3, #12
   37108:	9a02      	ldr	r2, [sp, #8]
   3710a:	3801      	subs	r0, #1
   3710c:	6013      	str	r3, [r2, #0]
   3710e:	b01f      	add	sp, #124	; 0x7c
   37110:	bdf0      	pop	{r4, r5, r6, r7, pc}
   37112:	2340      	movs	r3, #64	; 0x40
   37114:	617b      	str	r3, [r7, #20]
   37116:	2300      	movs	r3, #0
   37118:	ad06      	add	r5, sp, #24
   3711a:	616b      	str	r3, [r5, #20]
   3711c:	3320      	adds	r3, #32
   3711e:	766b      	strb	r3, [r5, #25]
   37120:	3310      	adds	r3, #16
   37122:	76ab      	strb	r3, [r5, #26]
   37124:	0034      	movs	r4, r6
   37126:	7823      	ldrb	r3, [r4, #0]
   37128:	2b00      	cmp	r3, #0
   3712a:	d147      	bne.n	371bc <_svfiprintf_r+0xdc>
   3712c:	1ba3      	subs	r3, r4, r6
   3712e:	9304      	str	r3, [sp, #16]
   37130:	d00d      	beq.n	3714e <_svfiprintf_r+0x6e>
   37132:	1ba3      	subs	r3, r4, r6
   37134:	0032      	movs	r2, r6
   37136:	0039      	movs	r1, r7
   37138:	9802      	ldr	r0, [sp, #8]
   3713a:	f7ff ff6f 	bl	3701c <__ssputs_r>
   3713e:	1c43      	adds	r3, r0, #1
   37140:	d100      	bne.n	37144 <_svfiprintf_r+0x64>
   37142:	e0b5      	b.n	372b0 <_svfiprintf_r+0x1d0>
   37144:	696a      	ldr	r2, [r5, #20]
   37146:	9b04      	ldr	r3, [sp, #16]
   37148:	4694      	mov	ip, r2
   3714a:	4463      	add	r3, ip
   3714c:	616b      	str	r3, [r5, #20]
   3714e:	7823      	ldrb	r3, [r4, #0]
   37150:	2b00      	cmp	r3, #0
   37152:	d100      	bne.n	37156 <_svfiprintf_r+0x76>
   37154:	e0ac      	b.n	372b0 <_svfiprintf_r+0x1d0>
   37156:	2201      	movs	r2, #1
   37158:	2300      	movs	r3, #0
   3715a:	4252      	negs	r2, r2
   3715c:	606a      	str	r2, [r5, #4]
   3715e:	a902      	add	r1, sp, #8
   37160:	3254      	adds	r2, #84	; 0x54
   37162:	1852      	adds	r2, r2, r1
   37164:	3401      	adds	r4, #1
   37166:	602b      	str	r3, [r5, #0]
   37168:	60eb      	str	r3, [r5, #12]
   3716a:	60ab      	str	r3, [r5, #8]
   3716c:	7013      	strb	r3, [r2, #0]
   3716e:	65ab      	str	r3, [r5, #88]	; 0x58
   37170:	4e58      	ldr	r6, [pc, #352]	; (372d4 <_svfiprintf_r+0x1f4>)
   37172:	2205      	movs	r2, #5
   37174:	7821      	ldrb	r1, [r4, #0]
   37176:	0030      	movs	r0, r6
   37178:	f000 fb02 	bl	37780 <memchr>
   3717c:	1c62      	adds	r2, r4, #1
   3717e:	2800      	cmp	r0, #0
   37180:	d120      	bne.n	371c4 <_svfiprintf_r+0xe4>
   37182:	6829      	ldr	r1, [r5, #0]
   37184:	06cb      	lsls	r3, r1, #27
   37186:	d504      	bpl.n	37192 <_svfiprintf_r+0xb2>
   37188:	2353      	movs	r3, #83	; 0x53
   3718a:	ae02      	add	r6, sp, #8
   3718c:	3020      	adds	r0, #32
   3718e:	199b      	adds	r3, r3, r6
   37190:	7018      	strb	r0, [r3, #0]
   37192:	070b      	lsls	r3, r1, #28
   37194:	d504      	bpl.n	371a0 <_svfiprintf_r+0xc0>
   37196:	2353      	movs	r3, #83	; 0x53
   37198:	202b      	movs	r0, #43	; 0x2b
   3719a:	ae02      	add	r6, sp, #8
   3719c:	199b      	adds	r3, r3, r6
   3719e:	7018      	strb	r0, [r3, #0]
   371a0:	7823      	ldrb	r3, [r4, #0]
   371a2:	2b2a      	cmp	r3, #42	; 0x2a
   371a4:	d016      	beq.n	371d4 <_svfiprintf_r+0xf4>
   371a6:	2000      	movs	r0, #0
   371a8:	210a      	movs	r1, #10
   371aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   371ac:	7822      	ldrb	r2, [r4, #0]
   371ae:	3a30      	subs	r2, #48	; 0x30
   371b0:	2a09      	cmp	r2, #9
   371b2:	d955      	bls.n	37260 <_svfiprintf_r+0x180>
   371b4:	2800      	cmp	r0, #0
   371b6:	d015      	beq.n	371e4 <_svfiprintf_r+0x104>
   371b8:	9309      	str	r3, [sp, #36]	; 0x24
   371ba:	e013      	b.n	371e4 <_svfiprintf_r+0x104>
   371bc:	2b25      	cmp	r3, #37	; 0x25
   371be:	d0b5      	beq.n	3712c <_svfiprintf_r+0x4c>
   371c0:	3401      	adds	r4, #1
   371c2:	e7b0      	b.n	37126 <_svfiprintf_r+0x46>
   371c4:	2301      	movs	r3, #1
   371c6:	1b80      	subs	r0, r0, r6
   371c8:	4083      	lsls	r3, r0
   371ca:	6829      	ldr	r1, [r5, #0]
   371cc:	0014      	movs	r4, r2
   371ce:	430b      	orrs	r3, r1
   371d0:	602b      	str	r3, [r5, #0]
   371d2:	e7cd      	b.n	37170 <_svfiprintf_r+0x90>
   371d4:	9b05      	ldr	r3, [sp, #20]
   371d6:	1d18      	adds	r0, r3, #4
   371d8:	681b      	ldr	r3, [r3, #0]
   371da:	9005      	str	r0, [sp, #20]
   371dc:	2b00      	cmp	r3, #0
   371de:	db39      	blt.n	37254 <_svfiprintf_r+0x174>
   371e0:	9309      	str	r3, [sp, #36]	; 0x24
   371e2:	0014      	movs	r4, r2
   371e4:	7823      	ldrb	r3, [r4, #0]
   371e6:	2b2e      	cmp	r3, #46	; 0x2e
   371e8:	d10b      	bne.n	37202 <_svfiprintf_r+0x122>
   371ea:	7863      	ldrb	r3, [r4, #1]
   371ec:	1c62      	adds	r2, r4, #1
   371ee:	2b2a      	cmp	r3, #42	; 0x2a
   371f0:	d13e      	bne.n	37270 <_svfiprintf_r+0x190>
   371f2:	9b05      	ldr	r3, [sp, #20]
   371f4:	3402      	adds	r4, #2
   371f6:	1d1a      	adds	r2, r3, #4
   371f8:	681b      	ldr	r3, [r3, #0]
   371fa:	9205      	str	r2, [sp, #20]
   371fc:	2b00      	cmp	r3, #0
   371fe:	db34      	blt.n	3726a <_svfiprintf_r+0x18a>
   37200:	9307      	str	r3, [sp, #28]
   37202:	4e35      	ldr	r6, [pc, #212]	; (372d8 <_svfiprintf_r+0x1f8>)
   37204:	7821      	ldrb	r1, [r4, #0]
   37206:	2203      	movs	r2, #3
   37208:	0030      	movs	r0, r6
   3720a:	f000 fab9 	bl	37780 <memchr>
   3720e:	2800      	cmp	r0, #0
   37210:	d006      	beq.n	37220 <_svfiprintf_r+0x140>
   37212:	2340      	movs	r3, #64	; 0x40
   37214:	1b80      	subs	r0, r0, r6
   37216:	4083      	lsls	r3, r0
   37218:	682a      	ldr	r2, [r5, #0]
   3721a:	3401      	adds	r4, #1
   3721c:	4313      	orrs	r3, r2
   3721e:	602b      	str	r3, [r5, #0]
   37220:	7821      	ldrb	r1, [r4, #0]
   37222:	2206      	movs	r2, #6
   37224:	482d      	ldr	r0, [pc, #180]	; (372dc <_svfiprintf_r+0x1fc>)
   37226:	1c66      	adds	r6, r4, #1
   37228:	7629      	strb	r1, [r5, #24]
   3722a:	f000 faa9 	bl	37780 <memchr>
   3722e:	2800      	cmp	r0, #0
   37230:	d046      	beq.n	372c0 <_svfiprintf_r+0x1e0>
   37232:	4b2b      	ldr	r3, [pc, #172]	; (372e0 <_svfiprintf_r+0x200>)
   37234:	2b00      	cmp	r3, #0
   37236:	d12f      	bne.n	37298 <_svfiprintf_r+0x1b8>
   37238:	6829      	ldr	r1, [r5, #0]
   3723a:	9b05      	ldr	r3, [sp, #20]
   3723c:	2207      	movs	r2, #7
   3723e:	05c9      	lsls	r1, r1, #23
   37240:	d528      	bpl.n	37294 <_svfiprintf_r+0x1b4>
   37242:	189b      	adds	r3, r3, r2
   37244:	4393      	bics	r3, r2
   37246:	3308      	adds	r3, #8
   37248:	9305      	str	r3, [sp, #20]
   3724a:	696b      	ldr	r3, [r5, #20]
   3724c:	9a03      	ldr	r2, [sp, #12]
   3724e:	189b      	adds	r3, r3, r2
   37250:	616b      	str	r3, [r5, #20]
   37252:	e767      	b.n	37124 <_svfiprintf_r+0x44>
   37254:	425b      	negs	r3, r3
   37256:	60eb      	str	r3, [r5, #12]
   37258:	2302      	movs	r3, #2
   3725a:	430b      	orrs	r3, r1
   3725c:	602b      	str	r3, [r5, #0]
   3725e:	e7c0      	b.n	371e2 <_svfiprintf_r+0x102>
   37260:	434b      	muls	r3, r1
   37262:	3401      	adds	r4, #1
   37264:	189b      	adds	r3, r3, r2
   37266:	2001      	movs	r0, #1
   37268:	e7a0      	b.n	371ac <_svfiprintf_r+0xcc>
   3726a:	2301      	movs	r3, #1
   3726c:	425b      	negs	r3, r3
   3726e:	e7c7      	b.n	37200 <_svfiprintf_r+0x120>
   37270:	2300      	movs	r3, #0
   37272:	0014      	movs	r4, r2
   37274:	200a      	movs	r0, #10
   37276:	001a      	movs	r2, r3
   37278:	606b      	str	r3, [r5, #4]
   3727a:	7821      	ldrb	r1, [r4, #0]
   3727c:	3930      	subs	r1, #48	; 0x30
   3727e:	2909      	cmp	r1, #9
   37280:	d903      	bls.n	3728a <_svfiprintf_r+0x1aa>
   37282:	2b00      	cmp	r3, #0
   37284:	d0bd      	beq.n	37202 <_svfiprintf_r+0x122>
   37286:	9207      	str	r2, [sp, #28]
   37288:	e7bb      	b.n	37202 <_svfiprintf_r+0x122>
   3728a:	4342      	muls	r2, r0
   3728c:	3401      	adds	r4, #1
   3728e:	1852      	adds	r2, r2, r1
   37290:	2301      	movs	r3, #1
   37292:	e7f2      	b.n	3727a <_svfiprintf_r+0x19a>
   37294:	3307      	adds	r3, #7
   37296:	e7d5      	b.n	37244 <_svfiprintf_r+0x164>
   37298:	ab05      	add	r3, sp, #20
   3729a:	9300      	str	r3, [sp, #0]
   3729c:	003a      	movs	r2, r7
   3729e:	4b11      	ldr	r3, [pc, #68]	; (372e4 <_svfiprintf_r+0x204>)
   372a0:	0029      	movs	r1, r5
   372a2:	9802      	ldr	r0, [sp, #8]
   372a4:	e000      	b.n	372a8 <_svfiprintf_r+0x1c8>
   372a6:	bf00      	nop
   372a8:	9003      	str	r0, [sp, #12]
   372aa:	9b03      	ldr	r3, [sp, #12]
   372ac:	3301      	adds	r3, #1
   372ae:	d1cc      	bne.n	3724a <_svfiprintf_r+0x16a>
   372b0:	89bb      	ldrh	r3, [r7, #12]
   372b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   372b4:	065b      	lsls	r3, r3, #25
   372b6:	d400      	bmi.n	372ba <_svfiprintf_r+0x1da>
   372b8:	e729      	b.n	3710e <_svfiprintf_r+0x2e>
   372ba:	2001      	movs	r0, #1
   372bc:	4240      	negs	r0, r0
   372be:	e726      	b.n	3710e <_svfiprintf_r+0x2e>
   372c0:	ab05      	add	r3, sp, #20
   372c2:	9300      	str	r3, [sp, #0]
   372c4:	003a      	movs	r2, r7
   372c6:	4b07      	ldr	r3, [pc, #28]	; (372e4 <_svfiprintf_r+0x204>)
   372c8:	0029      	movs	r1, r5
   372ca:	9802      	ldr	r0, [sp, #8]
   372cc:	f000 f87a 	bl	373c4 <_printf_i>
   372d0:	e7ea      	b.n	372a8 <_svfiprintf_r+0x1c8>
   372d2:	46c0      	nop			; (mov r8, r8)
   372d4:	0003c0d2 	.word	0x0003c0d2
   372d8:	0003c0d8 	.word	0x0003c0d8
   372dc:	0003c0dc 	.word	0x0003c0dc
   372e0:	00000000 	.word	0x00000000
   372e4:	0003701d 	.word	0x0003701d

000372e8 <_printf_common>:
   372e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   372ea:	0015      	movs	r5, r2
   372ec:	9301      	str	r3, [sp, #4]
   372ee:	688a      	ldr	r2, [r1, #8]
   372f0:	690b      	ldr	r3, [r1, #16]
   372f2:	9000      	str	r0, [sp, #0]
   372f4:	000c      	movs	r4, r1
   372f6:	4293      	cmp	r3, r2
   372f8:	da00      	bge.n	372fc <_printf_common+0x14>
   372fa:	0013      	movs	r3, r2
   372fc:	0022      	movs	r2, r4
   372fe:	602b      	str	r3, [r5, #0]
   37300:	3243      	adds	r2, #67	; 0x43
   37302:	7812      	ldrb	r2, [r2, #0]
   37304:	2a00      	cmp	r2, #0
   37306:	d001      	beq.n	3730c <_printf_common+0x24>
   37308:	3301      	adds	r3, #1
   3730a:	602b      	str	r3, [r5, #0]
   3730c:	6823      	ldr	r3, [r4, #0]
   3730e:	069b      	lsls	r3, r3, #26
   37310:	d502      	bpl.n	37318 <_printf_common+0x30>
   37312:	682b      	ldr	r3, [r5, #0]
   37314:	3302      	adds	r3, #2
   37316:	602b      	str	r3, [r5, #0]
   37318:	2706      	movs	r7, #6
   3731a:	6823      	ldr	r3, [r4, #0]
   3731c:	401f      	ands	r7, r3
   3731e:	d027      	beq.n	37370 <_printf_common+0x88>
   37320:	0023      	movs	r3, r4
   37322:	3343      	adds	r3, #67	; 0x43
   37324:	781b      	ldrb	r3, [r3, #0]
   37326:	1e5a      	subs	r2, r3, #1
   37328:	4193      	sbcs	r3, r2
   3732a:	6822      	ldr	r2, [r4, #0]
   3732c:	0692      	lsls	r2, r2, #26
   3732e:	d430      	bmi.n	37392 <_printf_common+0xaa>
   37330:	0022      	movs	r2, r4
   37332:	9901      	ldr	r1, [sp, #4]
   37334:	3243      	adds	r2, #67	; 0x43
   37336:	9800      	ldr	r0, [sp, #0]
   37338:	9e08      	ldr	r6, [sp, #32]
   3733a:	47b0      	blx	r6
   3733c:	1c43      	adds	r3, r0, #1
   3733e:	d025      	beq.n	3738c <_printf_common+0xa4>
   37340:	2306      	movs	r3, #6
   37342:	6820      	ldr	r0, [r4, #0]
   37344:	682a      	ldr	r2, [r5, #0]
   37346:	68e1      	ldr	r1, [r4, #12]
   37348:	4003      	ands	r3, r0
   3734a:	2500      	movs	r5, #0
   3734c:	2b04      	cmp	r3, #4
   3734e:	d103      	bne.n	37358 <_printf_common+0x70>
   37350:	1a8d      	subs	r5, r1, r2
   37352:	43eb      	mvns	r3, r5
   37354:	17db      	asrs	r3, r3, #31
   37356:	401d      	ands	r5, r3
   37358:	68a3      	ldr	r3, [r4, #8]
   3735a:	6922      	ldr	r2, [r4, #16]
   3735c:	4293      	cmp	r3, r2
   3735e:	dd01      	ble.n	37364 <_printf_common+0x7c>
   37360:	1a9b      	subs	r3, r3, r2
   37362:	18ed      	adds	r5, r5, r3
   37364:	2700      	movs	r7, #0
   37366:	42bd      	cmp	r5, r7
   37368:	d120      	bne.n	373ac <_printf_common+0xc4>
   3736a:	2000      	movs	r0, #0
   3736c:	e010      	b.n	37390 <_printf_common+0xa8>
   3736e:	3701      	adds	r7, #1
   37370:	68e3      	ldr	r3, [r4, #12]
   37372:	682a      	ldr	r2, [r5, #0]
   37374:	1a9b      	subs	r3, r3, r2
   37376:	429f      	cmp	r7, r3
   37378:	dad2      	bge.n	37320 <_printf_common+0x38>
   3737a:	0022      	movs	r2, r4
   3737c:	2301      	movs	r3, #1
   3737e:	3219      	adds	r2, #25
   37380:	9901      	ldr	r1, [sp, #4]
   37382:	9800      	ldr	r0, [sp, #0]
   37384:	9e08      	ldr	r6, [sp, #32]
   37386:	47b0      	blx	r6
   37388:	1c43      	adds	r3, r0, #1
   3738a:	d1f0      	bne.n	3736e <_printf_common+0x86>
   3738c:	2001      	movs	r0, #1
   3738e:	4240      	negs	r0, r0
   37390:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   37392:	2030      	movs	r0, #48	; 0x30
   37394:	18e1      	adds	r1, r4, r3
   37396:	3143      	adds	r1, #67	; 0x43
   37398:	7008      	strb	r0, [r1, #0]
   3739a:	0021      	movs	r1, r4
   3739c:	1c5a      	adds	r2, r3, #1
   3739e:	3145      	adds	r1, #69	; 0x45
   373a0:	7809      	ldrb	r1, [r1, #0]
   373a2:	18a2      	adds	r2, r4, r2
   373a4:	3243      	adds	r2, #67	; 0x43
   373a6:	3302      	adds	r3, #2
   373a8:	7011      	strb	r1, [r2, #0]
   373aa:	e7c1      	b.n	37330 <_printf_common+0x48>
   373ac:	0022      	movs	r2, r4
   373ae:	2301      	movs	r3, #1
   373b0:	321a      	adds	r2, #26
   373b2:	9901      	ldr	r1, [sp, #4]
   373b4:	9800      	ldr	r0, [sp, #0]
   373b6:	9e08      	ldr	r6, [sp, #32]
   373b8:	47b0      	blx	r6
   373ba:	1c43      	adds	r3, r0, #1
   373bc:	d0e6      	beq.n	3738c <_printf_common+0xa4>
   373be:	3701      	adds	r7, #1
   373c0:	e7d1      	b.n	37366 <_printf_common+0x7e>
	...

000373c4 <_printf_i>:
   373c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   373c6:	b08b      	sub	sp, #44	; 0x2c
   373c8:	9206      	str	r2, [sp, #24]
   373ca:	000a      	movs	r2, r1
   373cc:	3243      	adds	r2, #67	; 0x43
   373ce:	9307      	str	r3, [sp, #28]
   373d0:	9005      	str	r0, [sp, #20]
   373d2:	9204      	str	r2, [sp, #16]
   373d4:	7e0a      	ldrb	r2, [r1, #24]
   373d6:	000c      	movs	r4, r1
   373d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   373da:	2a6e      	cmp	r2, #110	; 0x6e
   373dc:	d100      	bne.n	373e0 <_printf_i+0x1c>
   373de:	e08f      	b.n	37500 <_printf_i+0x13c>
   373e0:	d817      	bhi.n	37412 <_printf_i+0x4e>
   373e2:	2a63      	cmp	r2, #99	; 0x63
   373e4:	d02c      	beq.n	37440 <_printf_i+0x7c>
   373e6:	d808      	bhi.n	373fa <_printf_i+0x36>
   373e8:	2a00      	cmp	r2, #0
   373ea:	d100      	bne.n	373ee <_printf_i+0x2a>
   373ec:	e099      	b.n	37522 <_printf_i+0x15e>
   373ee:	2a58      	cmp	r2, #88	; 0x58
   373f0:	d054      	beq.n	3749c <_printf_i+0xd8>
   373f2:	0026      	movs	r6, r4
   373f4:	3642      	adds	r6, #66	; 0x42
   373f6:	7032      	strb	r2, [r6, #0]
   373f8:	e029      	b.n	3744e <_printf_i+0x8a>
   373fa:	2a64      	cmp	r2, #100	; 0x64
   373fc:	d001      	beq.n	37402 <_printf_i+0x3e>
   373fe:	2a69      	cmp	r2, #105	; 0x69
   37400:	d1f7      	bne.n	373f2 <_printf_i+0x2e>
   37402:	6821      	ldr	r1, [r4, #0]
   37404:	681a      	ldr	r2, [r3, #0]
   37406:	0608      	lsls	r0, r1, #24
   37408:	d523      	bpl.n	37452 <_printf_i+0x8e>
   3740a:	1d11      	adds	r1, r2, #4
   3740c:	6019      	str	r1, [r3, #0]
   3740e:	6815      	ldr	r5, [r2, #0]
   37410:	e025      	b.n	3745e <_printf_i+0x9a>
   37412:	2a73      	cmp	r2, #115	; 0x73
   37414:	d100      	bne.n	37418 <_printf_i+0x54>
   37416:	e088      	b.n	3752a <_printf_i+0x166>
   37418:	d808      	bhi.n	3742c <_printf_i+0x68>
   3741a:	2a6f      	cmp	r2, #111	; 0x6f
   3741c:	d029      	beq.n	37472 <_printf_i+0xae>
   3741e:	2a70      	cmp	r2, #112	; 0x70
   37420:	d1e7      	bne.n	373f2 <_printf_i+0x2e>
   37422:	2220      	movs	r2, #32
   37424:	6809      	ldr	r1, [r1, #0]
   37426:	430a      	orrs	r2, r1
   37428:	6022      	str	r2, [r4, #0]
   3742a:	e003      	b.n	37434 <_printf_i+0x70>
   3742c:	2a75      	cmp	r2, #117	; 0x75
   3742e:	d020      	beq.n	37472 <_printf_i+0xae>
   37430:	2a78      	cmp	r2, #120	; 0x78
   37432:	d1de      	bne.n	373f2 <_printf_i+0x2e>
   37434:	0022      	movs	r2, r4
   37436:	2178      	movs	r1, #120	; 0x78
   37438:	3245      	adds	r2, #69	; 0x45
   3743a:	7011      	strb	r1, [r2, #0]
   3743c:	4a6c      	ldr	r2, [pc, #432]	; (375f0 <_printf_i+0x22c>)
   3743e:	e030      	b.n	374a2 <_printf_i+0xde>
   37440:	000e      	movs	r6, r1
   37442:	681a      	ldr	r2, [r3, #0]
   37444:	3642      	adds	r6, #66	; 0x42
   37446:	1d11      	adds	r1, r2, #4
   37448:	6019      	str	r1, [r3, #0]
   3744a:	6813      	ldr	r3, [r2, #0]
   3744c:	7033      	strb	r3, [r6, #0]
   3744e:	2301      	movs	r3, #1
   37450:	e079      	b.n	37546 <_printf_i+0x182>
   37452:	0649      	lsls	r1, r1, #25
   37454:	d5d9      	bpl.n	3740a <_printf_i+0x46>
   37456:	1d11      	adds	r1, r2, #4
   37458:	6019      	str	r1, [r3, #0]
   3745a:	2300      	movs	r3, #0
   3745c:	5ed5      	ldrsh	r5, [r2, r3]
   3745e:	2d00      	cmp	r5, #0
   37460:	da03      	bge.n	3746a <_printf_i+0xa6>
   37462:	232d      	movs	r3, #45	; 0x2d
   37464:	9a04      	ldr	r2, [sp, #16]
   37466:	426d      	negs	r5, r5
   37468:	7013      	strb	r3, [r2, #0]
   3746a:	4b62      	ldr	r3, [pc, #392]	; (375f4 <_printf_i+0x230>)
   3746c:	270a      	movs	r7, #10
   3746e:	9303      	str	r3, [sp, #12]
   37470:	e02f      	b.n	374d2 <_printf_i+0x10e>
   37472:	6820      	ldr	r0, [r4, #0]
   37474:	6819      	ldr	r1, [r3, #0]
   37476:	0605      	lsls	r5, r0, #24
   37478:	d503      	bpl.n	37482 <_printf_i+0xbe>
   3747a:	1d08      	adds	r0, r1, #4
   3747c:	6018      	str	r0, [r3, #0]
   3747e:	680d      	ldr	r5, [r1, #0]
   37480:	e005      	b.n	3748e <_printf_i+0xca>
   37482:	0640      	lsls	r0, r0, #25
   37484:	d5f9      	bpl.n	3747a <_printf_i+0xb6>
   37486:	680d      	ldr	r5, [r1, #0]
   37488:	1d08      	adds	r0, r1, #4
   3748a:	6018      	str	r0, [r3, #0]
   3748c:	b2ad      	uxth	r5, r5
   3748e:	4b59      	ldr	r3, [pc, #356]	; (375f4 <_printf_i+0x230>)
   37490:	2708      	movs	r7, #8
   37492:	9303      	str	r3, [sp, #12]
   37494:	2a6f      	cmp	r2, #111	; 0x6f
   37496:	d018      	beq.n	374ca <_printf_i+0x106>
   37498:	270a      	movs	r7, #10
   3749a:	e016      	b.n	374ca <_printf_i+0x106>
   3749c:	3145      	adds	r1, #69	; 0x45
   3749e:	700a      	strb	r2, [r1, #0]
   374a0:	4a54      	ldr	r2, [pc, #336]	; (375f4 <_printf_i+0x230>)
   374a2:	9203      	str	r2, [sp, #12]
   374a4:	681a      	ldr	r2, [r3, #0]
   374a6:	6821      	ldr	r1, [r4, #0]
   374a8:	1d10      	adds	r0, r2, #4
   374aa:	6018      	str	r0, [r3, #0]
   374ac:	6815      	ldr	r5, [r2, #0]
   374ae:	0608      	lsls	r0, r1, #24
   374b0:	d522      	bpl.n	374f8 <_printf_i+0x134>
   374b2:	07cb      	lsls	r3, r1, #31
   374b4:	d502      	bpl.n	374bc <_printf_i+0xf8>
   374b6:	2320      	movs	r3, #32
   374b8:	4319      	orrs	r1, r3
   374ba:	6021      	str	r1, [r4, #0]
   374bc:	2710      	movs	r7, #16
   374be:	2d00      	cmp	r5, #0
   374c0:	d103      	bne.n	374ca <_printf_i+0x106>
   374c2:	2320      	movs	r3, #32
   374c4:	6822      	ldr	r2, [r4, #0]
   374c6:	439a      	bics	r2, r3
   374c8:	6022      	str	r2, [r4, #0]
   374ca:	0023      	movs	r3, r4
   374cc:	2200      	movs	r2, #0
   374ce:	3343      	adds	r3, #67	; 0x43
   374d0:	701a      	strb	r2, [r3, #0]
   374d2:	6863      	ldr	r3, [r4, #4]
   374d4:	60a3      	str	r3, [r4, #8]
   374d6:	2b00      	cmp	r3, #0
   374d8:	db5c      	blt.n	37594 <_printf_i+0x1d0>
   374da:	2204      	movs	r2, #4
   374dc:	6821      	ldr	r1, [r4, #0]
   374de:	4391      	bics	r1, r2
   374e0:	6021      	str	r1, [r4, #0]
   374e2:	2d00      	cmp	r5, #0
   374e4:	d158      	bne.n	37598 <_printf_i+0x1d4>
   374e6:	9e04      	ldr	r6, [sp, #16]
   374e8:	2b00      	cmp	r3, #0
   374ea:	d064      	beq.n	375b6 <_printf_i+0x1f2>
   374ec:	0026      	movs	r6, r4
   374ee:	9b03      	ldr	r3, [sp, #12]
   374f0:	3642      	adds	r6, #66	; 0x42
   374f2:	781b      	ldrb	r3, [r3, #0]
   374f4:	7033      	strb	r3, [r6, #0]
   374f6:	e05e      	b.n	375b6 <_printf_i+0x1f2>
   374f8:	0648      	lsls	r0, r1, #25
   374fa:	d5da      	bpl.n	374b2 <_printf_i+0xee>
   374fc:	b2ad      	uxth	r5, r5
   374fe:	e7d8      	b.n	374b2 <_printf_i+0xee>
   37500:	6809      	ldr	r1, [r1, #0]
   37502:	681a      	ldr	r2, [r3, #0]
   37504:	0608      	lsls	r0, r1, #24
   37506:	d505      	bpl.n	37514 <_printf_i+0x150>
   37508:	1d11      	adds	r1, r2, #4
   3750a:	6019      	str	r1, [r3, #0]
   3750c:	6813      	ldr	r3, [r2, #0]
   3750e:	6962      	ldr	r2, [r4, #20]
   37510:	601a      	str	r2, [r3, #0]
   37512:	e006      	b.n	37522 <_printf_i+0x15e>
   37514:	0649      	lsls	r1, r1, #25
   37516:	d5f7      	bpl.n	37508 <_printf_i+0x144>
   37518:	1d11      	adds	r1, r2, #4
   3751a:	6019      	str	r1, [r3, #0]
   3751c:	6813      	ldr	r3, [r2, #0]
   3751e:	8aa2      	ldrh	r2, [r4, #20]
   37520:	801a      	strh	r2, [r3, #0]
   37522:	2300      	movs	r3, #0
   37524:	9e04      	ldr	r6, [sp, #16]
   37526:	6123      	str	r3, [r4, #16]
   37528:	e054      	b.n	375d4 <_printf_i+0x210>
   3752a:	681a      	ldr	r2, [r3, #0]
   3752c:	1d11      	adds	r1, r2, #4
   3752e:	6019      	str	r1, [r3, #0]
   37530:	6816      	ldr	r6, [r2, #0]
   37532:	2100      	movs	r1, #0
   37534:	6862      	ldr	r2, [r4, #4]
   37536:	0030      	movs	r0, r6
   37538:	f000 f922 	bl	37780 <memchr>
   3753c:	2800      	cmp	r0, #0
   3753e:	d001      	beq.n	37544 <_printf_i+0x180>
   37540:	1b80      	subs	r0, r0, r6
   37542:	6060      	str	r0, [r4, #4]
   37544:	6863      	ldr	r3, [r4, #4]
   37546:	6123      	str	r3, [r4, #16]
   37548:	2300      	movs	r3, #0
   3754a:	9a04      	ldr	r2, [sp, #16]
   3754c:	7013      	strb	r3, [r2, #0]
   3754e:	e041      	b.n	375d4 <_printf_i+0x210>
   37550:	6923      	ldr	r3, [r4, #16]
   37552:	0032      	movs	r2, r6
   37554:	9906      	ldr	r1, [sp, #24]
   37556:	9805      	ldr	r0, [sp, #20]
   37558:	9d07      	ldr	r5, [sp, #28]
   3755a:	47a8      	blx	r5
   3755c:	1c43      	adds	r3, r0, #1
   3755e:	d043      	beq.n	375e8 <_printf_i+0x224>
   37560:	6823      	ldr	r3, [r4, #0]
   37562:	2500      	movs	r5, #0
   37564:	079b      	lsls	r3, r3, #30
   37566:	d40f      	bmi.n	37588 <_printf_i+0x1c4>
   37568:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3756a:	68e0      	ldr	r0, [r4, #12]
   3756c:	4298      	cmp	r0, r3
   3756e:	da3d      	bge.n	375ec <_printf_i+0x228>
   37570:	0018      	movs	r0, r3
   37572:	e03b      	b.n	375ec <_printf_i+0x228>
   37574:	0022      	movs	r2, r4
   37576:	2301      	movs	r3, #1
   37578:	3219      	adds	r2, #25
   3757a:	9906      	ldr	r1, [sp, #24]
   3757c:	9805      	ldr	r0, [sp, #20]
   3757e:	9e07      	ldr	r6, [sp, #28]
   37580:	47b0      	blx	r6
   37582:	1c43      	adds	r3, r0, #1
   37584:	d030      	beq.n	375e8 <_printf_i+0x224>
   37586:	3501      	adds	r5, #1
   37588:	68e3      	ldr	r3, [r4, #12]
   3758a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3758c:	1a9b      	subs	r3, r3, r2
   3758e:	429d      	cmp	r5, r3
   37590:	dbf0      	blt.n	37574 <_printf_i+0x1b0>
   37592:	e7e9      	b.n	37568 <_printf_i+0x1a4>
   37594:	2d00      	cmp	r5, #0
   37596:	d0a9      	beq.n	374ec <_printf_i+0x128>
   37598:	9e04      	ldr	r6, [sp, #16]
   3759a:	0028      	movs	r0, r5
   3759c:	0039      	movs	r1, r7
   3759e:	f7fc fb1f 	bl	33be0 <__aeabi_uidivmod>
   375a2:	9b03      	ldr	r3, [sp, #12]
   375a4:	3e01      	subs	r6, #1
   375a6:	5c5b      	ldrb	r3, [r3, r1]
   375a8:	0028      	movs	r0, r5
   375aa:	7033      	strb	r3, [r6, #0]
   375ac:	0039      	movs	r1, r7
   375ae:	f7fc fa91 	bl	33ad4 <__udivsi3>
   375b2:	1e05      	subs	r5, r0, #0
   375b4:	d1f1      	bne.n	3759a <_printf_i+0x1d6>
   375b6:	2f08      	cmp	r7, #8
   375b8:	d109      	bne.n	375ce <_printf_i+0x20a>
   375ba:	6823      	ldr	r3, [r4, #0]
   375bc:	07db      	lsls	r3, r3, #31
   375be:	d506      	bpl.n	375ce <_printf_i+0x20a>
   375c0:	6863      	ldr	r3, [r4, #4]
   375c2:	6922      	ldr	r2, [r4, #16]
   375c4:	4293      	cmp	r3, r2
   375c6:	dc02      	bgt.n	375ce <_printf_i+0x20a>
   375c8:	2330      	movs	r3, #48	; 0x30
   375ca:	3e01      	subs	r6, #1
   375cc:	7033      	strb	r3, [r6, #0]
   375ce:	9b04      	ldr	r3, [sp, #16]
   375d0:	1b9b      	subs	r3, r3, r6
   375d2:	6123      	str	r3, [r4, #16]
   375d4:	9b07      	ldr	r3, [sp, #28]
   375d6:	aa09      	add	r2, sp, #36	; 0x24
   375d8:	9300      	str	r3, [sp, #0]
   375da:	0021      	movs	r1, r4
   375dc:	9b06      	ldr	r3, [sp, #24]
   375de:	9805      	ldr	r0, [sp, #20]
   375e0:	f7ff fe82 	bl	372e8 <_printf_common>
   375e4:	1c43      	adds	r3, r0, #1
   375e6:	d1b3      	bne.n	37550 <_printf_i+0x18c>
   375e8:	2001      	movs	r0, #1
   375ea:	4240      	negs	r0, r0
   375ec:	b00b      	add	sp, #44	; 0x2c
   375ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   375f0:	0003c0f4 	.word	0x0003c0f4
   375f4:	0003c0e3 	.word	0x0003c0e3

000375f8 <__sread>:
   375f8:	b570      	push	{r4, r5, r6, lr}
   375fa:	000c      	movs	r4, r1
   375fc:	250e      	movs	r5, #14
   375fe:	5f49      	ldrsh	r1, [r1, r5]
   37600:	f000 f8f0 	bl	377e4 <_read_r>
   37604:	2800      	cmp	r0, #0
   37606:	db03      	blt.n	37610 <__sread+0x18>
   37608:	6d63      	ldr	r3, [r4, #84]	; 0x54
   3760a:	181b      	adds	r3, r3, r0
   3760c:	6563      	str	r3, [r4, #84]	; 0x54
   3760e:	bd70      	pop	{r4, r5, r6, pc}
   37610:	89a3      	ldrh	r3, [r4, #12]
   37612:	4a02      	ldr	r2, [pc, #8]	; (3761c <__sread+0x24>)
   37614:	4013      	ands	r3, r2
   37616:	81a3      	strh	r3, [r4, #12]
   37618:	e7f9      	b.n	3760e <__sread+0x16>
   3761a:	46c0      	nop			; (mov r8, r8)
   3761c:	ffffefff 	.word	0xffffefff

00037620 <__swrite>:
   37620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37622:	001f      	movs	r7, r3
   37624:	898b      	ldrh	r3, [r1, #12]
   37626:	0005      	movs	r5, r0
   37628:	000c      	movs	r4, r1
   3762a:	0016      	movs	r6, r2
   3762c:	05db      	lsls	r3, r3, #23
   3762e:	d505      	bpl.n	3763c <__swrite+0x1c>
   37630:	230e      	movs	r3, #14
   37632:	5ec9      	ldrsh	r1, [r1, r3]
   37634:	2200      	movs	r2, #0
   37636:	2302      	movs	r3, #2
   37638:	f000 f88e 	bl	37758 <_lseek_r>
   3763c:	89a3      	ldrh	r3, [r4, #12]
   3763e:	4a05      	ldr	r2, [pc, #20]	; (37654 <__swrite+0x34>)
   37640:	0028      	movs	r0, r5
   37642:	4013      	ands	r3, r2
   37644:	81a3      	strh	r3, [r4, #12]
   37646:	0032      	movs	r2, r6
   37648:	230e      	movs	r3, #14
   3764a:	5ee1      	ldrsh	r1, [r4, r3]
   3764c:	003b      	movs	r3, r7
   3764e:	f000 f839 	bl	376c4 <_write_r>
   37652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   37654:	ffffefff 	.word	0xffffefff

00037658 <__sseek>:
   37658:	b570      	push	{r4, r5, r6, lr}
   3765a:	000c      	movs	r4, r1
   3765c:	250e      	movs	r5, #14
   3765e:	5f49      	ldrsh	r1, [r1, r5]
   37660:	f000 f87a 	bl	37758 <_lseek_r>
   37664:	89a3      	ldrh	r3, [r4, #12]
   37666:	1c42      	adds	r2, r0, #1
   37668:	d103      	bne.n	37672 <__sseek+0x1a>
   3766a:	4a05      	ldr	r2, [pc, #20]	; (37680 <__sseek+0x28>)
   3766c:	4013      	ands	r3, r2
   3766e:	81a3      	strh	r3, [r4, #12]
   37670:	bd70      	pop	{r4, r5, r6, pc}
   37672:	2280      	movs	r2, #128	; 0x80
   37674:	0152      	lsls	r2, r2, #5
   37676:	4313      	orrs	r3, r2
   37678:	81a3      	strh	r3, [r4, #12]
   3767a:	6560      	str	r0, [r4, #84]	; 0x54
   3767c:	e7f8      	b.n	37670 <__sseek+0x18>
   3767e:	46c0      	nop			; (mov r8, r8)
   37680:	ffffefff 	.word	0xffffefff

00037684 <__sclose>:
   37684:	b510      	push	{r4, lr}
   37686:	230e      	movs	r3, #14
   37688:	5ec9      	ldrsh	r1, [r1, r3]
   3768a:	f000 f82f 	bl	376ec <_close_r>
   3768e:	bd10      	pop	{r4, pc}

00037690 <strchr>:
   37690:	b2c9      	uxtb	r1, r1
   37692:	7803      	ldrb	r3, [r0, #0]
   37694:	2b00      	cmp	r3, #0
   37696:	d004      	beq.n	376a2 <strchr+0x12>
   37698:	4299      	cmp	r1, r3
   3769a:	d100      	bne.n	3769e <strchr+0xe>
   3769c:	4770      	bx	lr
   3769e:	3001      	adds	r0, #1
   376a0:	e7f7      	b.n	37692 <strchr+0x2>
   376a2:	424b      	negs	r3, r1
   376a4:	4159      	adcs	r1, r3
   376a6:	4249      	negs	r1, r1
   376a8:	4008      	ands	r0, r1
   376aa:	e7f7      	b.n	3769c <strchr+0xc>

000376ac <__ascii_wctomb>:
   376ac:	1e0b      	subs	r3, r1, #0
   376ae:	d004      	beq.n	376ba <__ascii_wctomb+0xe>
   376b0:	2aff      	cmp	r2, #255	; 0xff
   376b2:	d904      	bls.n	376be <__ascii_wctomb+0x12>
   376b4:	238a      	movs	r3, #138	; 0x8a
   376b6:	6003      	str	r3, [r0, #0]
   376b8:	3b8b      	subs	r3, #139	; 0x8b
   376ba:	0018      	movs	r0, r3
   376bc:	4770      	bx	lr
   376be:	700a      	strb	r2, [r1, #0]
   376c0:	2301      	movs	r3, #1
   376c2:	e7fa      	b.n	376ba <__ascii_wctomb+0xe>

000376c4 <_write_r>:
   376c4:	b570      	push	{r4, r5, r6, lr}
   376c6:	0005      	movs	r5, r0
   376c8:	0008      	movs	r0, r1
   376ca:	0011      	movs	r1, r2
   376cc:	2200      	movs	r2, #0
   376ce:	4c06      	ldr	r4, [pc, #24]	; (376e8 <_write_r+0x24>)
   376d0:	6022      	str	r2, [r4, #0]
   376d2:	001a      	movs	r2, r3
   376d4:	f7f4 fd70 	bl	2c1b8 <_write>
   376d8:	1c43      	adds	r3, r0, #1
   376da:	d103      	bne.n	376e4 <_write_r+0x20>
   376dc:	6823      	ldr	r3, [r4, #0]
   376de:	2b00      	cmp	r3, #0
   376e0:	d000      	beq.n	376e4 <_write_r+0x20>
   376e2:	602b      	str	r3, [r5, #0]
   376e4:	bd70      	pop	{r4, r5, r6, pc}
   376e6:	46c0      	nop			; (mov r8, r8)
   376e8:	20005d24 	.word	0x20005d24

000376ec <_close_r>:
   376ec:	2300      	movs	r3, #0
   376ee:	b570      	push	{r4, r5, r6, lr}
   376f0:	4c06      	ldr	r4, [pc, #24]	; (3770c <_close_r+0x20>)
   376f2:	0005      	movs	r5, r0
   376f4:	0008      	movs	r0, r1
   376f6:	6023      	str	r3, [r4, #0]
   376f8:	f7f4 fdb2 	bl	2c260 <_close>
   376fc:	1c43      	adds	r3, r0, #1
   376fe:	d103      	bne.n	37708 <_close_r+0x1c>
   37700:	6823      	ldr	r3, [r4, #0]
   37702:	2b00      	cmp	r3, #0
   37704:	d000      	beq.n	37708 <_close_r+0x1c>
   37706:	602b      	str	r3, [r5, #0]
   37708:	bd70      	pop	{r4, r5, r6, pc}
   3770a:	46c0      	nop			; (mov r8, r8)
   3770c:	20005d24 	.word	0x20005d24

00037710 <_fstat_r>:
   37710:	2300      	movs	r3, #0
   37712:	b570      	push	{r4, r5, r6, lr}
   37714:	4c06      	ldr	r4, [pc, #24]	; (37730 <_fstat_r+0x20>)
   37716:	0005      	movs	r5, r0
   37718:	0008      	movs	r0, r1
   3771a:	0011      	movs	r1, r2
   3771c:	6023      	str	r3, [r4, #0]
   3771e:	f7f4 fda9 	bl	2c274 <_fstat>
   37722:	1c43      	adds	r3, r0, #1
   37724:	d103      	bne.n	3772e <_fstat_r+0x1e>
   37726:	6823      	ldr	r3, [r4, #0]
   37728:	2b00      	cmp	r3, #0
   3772a:	d000      	beq.n	3772e <_fstat_r+0x1e>
   3772c:	602b      	str	r3, [r5, #0]
   3772e:	bd70      	pop	{r4, r5, r6, pc}
   37730:	20005d24 	.word	0x20005d24

00037734 <_isatty_r>:
   37734:	2300      	movs	r3, #0
   37736:	b570      	push	{r4, r5, r6, lr}
   37738:	4c06      	ldr	r4, [pc, #24]	; (37754 <_isatty_r+0x20>)
   3773a:	0005      	movs	r5, r0
   3773c:	0008      	movs	r0, r1
   3773e:	6023      	str	r3, [r4, #0]
   37740:	f7f4 fda6 	bl	2c290 <_isatty>
   37744:	1c43      	adds	r3, r0, #1
   37746:	d103      	bne.n	37750 <_isatty_r+0x1c>
   37748:	6823      	ldr	r3, [r4, #0]
   3774a:	2b00      	cmp	r3, #0
   3774c:	d000      	beq.n	37750 <_isatty_r+0x1c>
   3774e:	602b      	str	r3, [r5, #0]
   37750:	bd70      	pop	{r4, r5, r6, pc}
   37752:	46c0      	nop			; (mov r8, r8)
   37754:	20005d24 	.word	0x20005d24

00037758 <_lseek_r>:
   37758:	b570      	push	{r4, r5, r6, lr}
   3775a:	0005      	movs	r5, r0
   3775c:	0008      	movs	r0, r1
   3775e:	0011      	movs	r1, r2
   37760:	2200      	movs	r2, #0
   37762:	4c06      	ldr	r4, [pc, #24]	; (3777c <_lseek_r+0x24>)
   37764:	6022      	str	r2, [r4, #0]
   37766:	001a      	movs	r2, r3
   37768:	f7f4 fd9b 	bl	2c2a2 <_lseek>
   3776c:	1c43      	adds	r3, r0, #1
   3776e:	d103      	bne.n	37778 <_lseek_r+0x20>
   37770:	6823      	ldr	r3, [r4, #0]
   37772:	2b00      	cmp	r3, #0
   37774:	d000      	beq.n	37778 <_lseek_r+0x20>
   37776:	602b      	str	r3, [r5, #0]
   37778:	bd70      	pop	{r4, r5, r6, pc}
   3777a:	46c0      	nop			; (mov r8, r8)
   3777c:	20005d24 	.word	0x20005d24

00037780 <memchr>:
   37780:	b2c9      	uxtb	r1, r1
   37782:	1882      	adds	r2, r0, r2
   37784:	4290      	cmp	r0, r2
   37786:	d101      	bne.n	3778c <memchr+0xc>
   37788:	2000      	movs	r0, #0
   3778a:	4770      	bx	lr
   3778c:	7803      	ldrb	r3, [r0, #0]
   3778e:	428b      	cmp	r3, r1
   37790:	d0fb      	beq.n	3778a <memchr+0xa>
   37792:	3001      	adds	r0, #1
   37794:	e7f6      	b.n	37784 <memchr+0x4>

00037796 <_realloc_r>:
   37796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37798:	0007      	movs	r7, r0
   3779a:	000d      	movs	r5, r1
   3779c:	0016      	movs	r6, r2
   3779e:	2900      	cmp	r1, #0
   377a0:	d105      	bne.n	377ae <_realloc_r+0x18>
   377a2:	0011      	movs	r1, r2
   377a4:	f7fe fe9e 	bl	364e4 <_malloc_r>
   377a8:	0004      	movs	r4, r0
   377aa:	0020      	movs	r0, r4
   377ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   377ae:	2a00      	cmp	r2, #0
   377b0:	d103      	bne.n	377ba <_realloc_r+0x24>
   377b2:	f7fe fe4d 	bl	36450 <_free_r>
   377b6:	0034      	movs	r4, r6
   377b8:	e7f7      	b.n	377aa <_realloc_r+0x14>
   377ba:	f000 f827 	bl	3780c <_malloc_usable_size_r>
   377be:	002c      	movs	r4, r5
   377c0:	4286      	cmp	r6, r0
   377c2:	d9f2      	bls.n	377aa <_realloc_r+0x14>
   377c4:	0031      	movs	r1, r6
   377c6:	0038      	movs	r0, r7
   377c8:	f7fe fe8c 	bl	364e4 <_malloc_r>
   377cc:	1e04      	subs	r4, r0, #0
   377ce:	d0ec      	beq.n	377aa <_realloc_r+0x14>
   377d0:	0029      	movs	r1, r5
   377d2:	0032      	movs	r2, r6
   377d4:	f7fe fe18 	bl	36408 <memcpy>
   377d8:	0029      	movs	r1, r5
   377da:	0038      	movs	r0, r7
   377dc:	f7fe fe38 	bl	36450 <_free_r>
   377e0:	e7e3      	b.n	377aa <_realloc_r+0x14>
	...

000377e4 <_read_r>:
   377e4:	b570      	push	{r4, r5, r6, lr}
   377e6:	0005      	movs	r5, r0
   377e8:	0008      	movs	r0, r1
   377ea:	0011      	movs	r1, r2
   377ec:	2200      	movs	r2, #0
   377ee:	4c06      	ldr	r4, [pc, #24]	; (37808 <_read_r+0x24>)
   377f0:	6022      	str	r2, [r4, #0]
   377f2:	001a      	movs	r2, r3
   377f4:	f7f4 fcb6 	bl	2c164 <_read>
   377f8:	1c43      	adds	r3, r0, #1
   377fa:	d103      	bne.n	37804 <_read_r+0x20>
   377fc:	6823      	ldr	r3, [r4, #0]
   377fe:	2b00      	cmp	r3, #0
   37800:	d000      	beq.n	37804 <_read_r+0x20>
   37802:	602b      	str	r3, [r5, #0]
   37804:	bd70      	pop	{r4, r5, r6, pc}
   37806:	46c0      	nop			; (mov r8, r8)
   37808:	20005d24 	.word	0x20005d24

0003780c <_malloc_usable_size_r>:
   3780c:	1f0b      	subs	r3, r1, #4
   3780e:	681b      	ldr	r3, [r3, #0]
   37810:	1f18      	subs	r0, r3, #4
   37812:	2b00      	cmp	r3, #0
   37814:	da01      	bge.n	3781a <_malloc_usable_size_r+0xe>
   37816:	580b      	ldr	r3, [r1, r0]
   37818:	18c0      	adds	r0, r0, r3
   3781a:	4770      	bx	lr

0003781c <sysfont_glyphs>:
   3781c:	0000 0000 0000 2000 2020 2020 2000 5050     .......     . PP
   3782c:	0050 0000 5000 f850 f850 5050 7820 70a0     P....PP.P.PP x.p
   3783c:	f028 c020 10c8 4020 1898 9060 40a0 90a8     (. ... @..`..@..
   3784c:	6068 4020 0000 0000 2010 4040 2040 4010     h` @..... @@@ .@
   3785c:	1020 1010 4020 5000 f820 5020 0000 2020      ... @.P . P..  
   3786c:	20f8 0020 0000 0000 2060 0040 0000 00f8     .  .....` @.....
   3787c:	0000 0000 0000 6000 0060 1008 4020 0080     .......``... @..
   3788c:	8870 a898 88c8 2070 2060 2020 7020 8870     p.....p `    pp.
   3789c:	1008 4020 f8f8 2010 0810 7088 3010 9050     .. @... ...p.0P.
   378ac:	10f8 f810 f080 0808 7088 4030 f080 8888     .........p0@....
   378bc:	f870 1008 4020 4040 8870 7088 8888 7070     p... @@@p..p..pp
   378cc:	8888 0878 6010 6000 0060 6060 0000 6060     ..x..`.``.``..``
   378dc:	6000 4020 1008 4020 1020 0008 f800 f800     .` @.. @ .......
   378ec:	0000 4080 1020 4020 7080 0888 2010 2000     ...@ . @.p... . 
   378fc:	8870 6808 a8a8 7070 8888 f888 8888 88f0     p..h..pp........
   3790c:	f088 8888 70f0 8088 8080 7088 90e0 8888     .....p.....p....
   3791c:	9088 f8e0 8080 80f0 f880 80f8 e080 8080     ................
   3792c:	7080 8088 9880 7088 8888 f888 8888 7088     .p.....p.......p
   3793c:	2020 2020 7020 1038 1010 9010 8860 a090          p8.....`...
   3794c:	a0c0 8890 8080 8080 8080 88f8 a8d8 8888     ................
   3795c:	8888 8888 a8c8 8898 7088 8888 8888 7088     .........p.....p
   3796c:	88f0 f088 8080 7080 8888 a888 6890 88f0     .......p.....h..
   3797c:	f088 90a0 7888 8080 0870 f008 20f8 2020     .....x..p....   
   3798c:	2020 8820 8888 8888 7088 8888 8888 5088        ......p.....P
   3799c:	8820 8888 a8a8 88d8 8888 2050 8850 8888      .........P P...
   379ac:	5088 2020 2020 08f8 2010 8040 38f8 2020     .P    ... @..8  
   379bc:	2020 3820 8000 2040 0810 e000 2020 2020        8..@ ....    
   379cc:	e020 5020 0088 0000 0000 0000 0000 f800      . P............
   379dc:	2040 0010 0000 0000 7000 7808 7888 8080     @ .......p.x.x..
   379ec:	c8b0 8888 00f0 7000 8080 7088 0808 9868     .......p...p..h.
   379fc:	8888 0078 7000 f888 7080 4830 e040 4040     ..x..p...p0H@.@@
   37a0c:	0040 7800 7888 3008 8080 c8b0 8888 2088     @..x.x.0....... 
   37a1c:	6000 2020 7020 0010 1030 9010 4060 4840     .`   p..0...`@@H
   37a2c:	6050 4850 2060 2020 2020 0070 d000 a8a8     P`PH`     p.....
   37a3c:	8888 0000 c8b0 8888 0088 7000 8888 7088     ...........p...p
   37a4c:	0000 88f0 80f0 0080 6800 7898 0808 0000     .........h.x....
   37a5c:	c8b0 8080 0080 7000 7080 f008 4040 40e0     .......p.p..@@.@
   37a6c:	4840 0030 8800 8888 6898 0000 8888 5088     @H0......h.....P
   37a7c:	0020 8800 a888 50a8 0000 5088 5020 0088      ......P...P P..
   37a8c:	8800 7888 7008 0000 10f8 4020 10f8 2020     ...x.p.... @..  
   37a9c:	2040 1020 2020 2020 2020 4020 2020 2010     @  .       @  . 
   37aac:	4020 0000                                    @..

00037ab0 <pcWelcomeMessage>:
   37ab0:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   37ac0:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   37ad0:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   37ae0:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   37af0:	000a 0000 6d69 0075 6d69 3a75 5220 7465     ....imu.imu: Ret
   37b00:	7275 736e 6120 7620 6c61 6575 6620 6f72     urns a value fro
   37b10:	206d 6874 2065 4d49 0d55 000a 7766 0000     m the IMU...fw..
   37b20:	7766 203a 6f44 6e77 6f6c 6461 6120 6620     fw: Download a f
   37b30:	6c69 2065 6e61 2064 6570 6672 726f 206d     ile and perform 
   37b40:	6e61 4620 2057 7075 6164 6574 0a0d 0000     an FW update....
   37b50:	6572 6573 0074 0000 6572 6573 3a74 5220     reset...reset: R
   37b60:	7365 7465 2073 6874 2065 6564 6976 6563     esets the device
   37b70:	0a0d 0000 656c 0064 656c 2064 6b5b 7965     ....led.led [key
   37b80:	756e 5d6d 525b 5b5d 5d47 425b 3a5d 5320     num][R][G][B]: S
   37b90:	7465 2073 6874 2065 6967 6576 206e 454c     ets the given LE
   37ba0:	2044 6f74 7420 6568 6720 7669 6e65 5220     D to the given R
   37bb0:	472c 422c 7620 6c61 6575 2e73 0a0d 0000     ,G,B values.....
   37bc0:	6567 6274 7475 6f74 006e 0000 6567 6274     getbutton...getb
   37bd0:	7475 6f74 3a6e 5020 6f72 6563 7373 7365     utton: Processes
   37be0:	6120 646e 7020 6972 746e 2073 6874 2065      and prints the 
   37bf0:	4946 4f46 6220 7475 6f74 206e 7562 6666     FIFO button buff
   37c00:	7265 6620 6f72 206d 6874 2065 6573 7365     er from the sees
   37c10:	7761 0d2e 000a 0000 6567 6474 7369 6174     aw......getdista
   37c20:	636e 0065 6567 6474 7369 6174 636e 3a65     nce.getdistance:
   37c30:	5220 7465 7275 736e 7420 6568 6420 7369      Returns the dis
   37c40:	6174 636e 2065 7266 6d6f 7420 6568 5520     tance from the U
   37c50:	2d53 3031 2030 6553 736e 726f 0d2e 000a     S-100 Sensor....
   37c60:	6167 656d 0000 0000 6167 656d 203a 6553     game....game: Se
   37c70:	646e 2073 7564 6d6d 2079 6167 656d 6420     nds dummy game d
   37c80:	7461 0d61 000a 0000 3269 0063 3269 3a63     ata.....i2c.i2c:
   37c90:	5320 6163 736e 4920 4332 6220 7375 0a0d      Scans I2C bus..
   37ca0:	0000 0000 6574 7473 0000 0000 6574 7473     ....test....test
   37cb0:	203a 6553 646e 2073 6574 7473 6420 7461     : Sends test dat
   37cc0:	0d61 000a 616e 0075 616e 3a75 5320 6e65     a...nau.nau: Sen
   37cd0:	7364 7720 6965 6867 2074 6164 6174 0a0d     ds weight data..
   37ce0:	0000 0000 706f 6e65 0000 0000 6573 7672     ....open....serv
   37cf0:	3a6f 4f20 6570 0d6e 000a 0000 6c63 736f     o: Open.....clos
   37d00:	0065 0000 6573 7672 3a6f 4320 6f6c 6573     e...servo: Close
   37d10:	0a0d 0000 6c63 0073 6c63 3a73 4320 656c     ....cls.cls: Cle
   37d20:	7261 2073 6874 2065 6574 6d72 6e69 6c61     ars the terminal
   37d30:	7320 7263 6565 0d6e 000a 0000 6f43 6c75      screen.....Coul
   37d40:	2064 6f6e 2074 6c61 6f6c 6163 6574 7320     d not allocate s
   37d50:	6d65 7061 6f68 6572 0a0d 0000 0a0d 0000     emaphore........
   37d60:	616f 0000 6325 325b 0d4b 003e 2008 0008     oa..%c[2K.>.. ..
   37d70:	6341 6563 656c 6172 6974 6e6f 5b20 676d     Acceleration [mg
   37d80:	3a5d 2058 6425 5909 2520 0964 205a 6425     ]:X %d.Y %d.Z %d
   37d90:	0a0d 0000 6f4e 6420 7461 2061 6572 6461     ....No data read
   37da0:	2179 0d20 000a 0000 6325 325b 004a 0000     y! .....%c[2J...
   37db0:	7453 6475 6e65 7374 7420 206f 6966 6c6c     Students to fill
   37dc0:	6f20 7475 0021 0000 7542 7474 6e6f 2320      out!...Button #
   37dd0:	6425 6920 2073 6572 656c 7361 6465 0a0d     %d is released..
   37de0:	0000 0000 7542 7474 6e6f 2320 6425 6920     ....Button #%d i
   37df0:	2073 7270 7365 6573 0d64 000a 6553 736e     s pressed...Sens
   37e00:	726f 4520 7272 726f 2520 2164 0a0d 0000     or Error %d!....
   37e10:	6944 7473 6e61 6563 203a 6425 6d20 0d6d     Distance: %d mm.
   37e20:	000a 0000 6944 7473 6e61 6563 4420 7461     ....Distance Dat
   37e30:	2061 514d 5454 5020 736f 0d74 000a 0000     a MQTT Post.....
   37e40:	7544 6d6d 2079 6147 656d 4420 7461 2061     Dummy Game Data 
   37e50:	514d 5454 5020 736f 0d74 000a 6554 7473     MQTT Post...Test
   37e60:	4420 7461 2061 514d 5454 5020 736f 0d74      Data MQTT Post.
   37e70:	000a 0000 6e69 7570 2074 6f76 206c 203d     ....input vol = 
   37e80:	4956 314e 2050 202d 4956 314e 204e 203d     VIN1P - VIN1N = 
   37e90:	6425 0a0d 0000 0000 614e 2075 6144 6174     %d......Nau Data
   37ea0:	4d20 5451 2054 6f50 7473 0a0d 0000 0000      MQTT Post......
   37eb0:	6425 0000 2030 3120 2020 2032 3320 2020     %d..0  1  2  3  
   37ec0:	2034 3520 2020 2036 3720 2020 2038 3920     4  5  6  7  8  9
   37ed0:	2020 2061 6220 2020 2063 6420 2020 2065       a  b  c  d  e 
   37ee0:	6620 0a0d 0000 0000 3025 7832 203a 0000      f......%02x: ..
   37ef0:	2058 0000                                   X ..

00037ef4 <xImuGetCommand>:
   37ef4:	7af4 0003 7af8 0003 3be1 0001 0000 0000     .z...z...;......

00037f04 <xOTAUCommand>:
   37f04:	7b1c 0003 7b20 0003 3d1d 0001 0000 0000     .{.. {...=......

00037f14 <xResetCommand>:
   37f14:	7b50 0003 7b58 0003 3d3d 0001 0000 0000     P{..X{..==......

00037f24 <xNeotrellisTurnLEDCommand>:
   37f24:	7b74 0003 7b78 0003 3d5d 0001 0004 0000     t{..x{..]=......

00037f34 <xNeotrellisProcessButtonCommand>:
   37f34:	7bc0 0003 7bcc 0003 3d89 0001 0000 0000     .{...{...=......

00037f44 <xDistanceSensorGetDistance>:
   37f44:	7c18 0003 7c24 0003 3e8d 0001 0000 0000     .|..$|...>......

00037f54 <xSendDummyGameData>:
   37f54:	7c60 0003 7c68 0003 3f31 0001 0000 0000     `|..h|..1?......

00037f64 <xI2cScan>:
   37f64:	7c88 0003 7c8c 0003 4179 0001 0000 0000     .|...|..yA......

00037f74 <xSendTestData>:
   37f74:	7ca4 0003 7cac 0003 3fcd 0001 0000 0000     .|...|...?......

00037f84 <xSendWeightData>:
   37f84:	7cc4 0003 7cc8 0003 4059 0001 0000 0000     .|...|..Y@......

00037f94 <xServoOpen>:
   37f94:	7ce4 0003 7cec 0003 4019 0001 0000 0000     .|...|...@......

00037fa4 <xServoClose>:
   37fa4:	7cfc 0003 7d04 0003 4039 0001 0000 0000     .|...}..9@......

00037fb4 <xClearScreen>:
   37fb4:	7d14 0003 7d18 0003 3cd5 0001 0000 0000     .}...}...<......
   37fc4:	5345 3545 3631 2d20 4320 6e6f 7274 6c6f     ESE516 - Control
   37fd4:	4920 696e 2074 6f43 6564 0a0d 0000 0000      Init Code......
   37fe4:	5245 4f52 2052 6e49 7469 6169 696c 697a     ERROR Initializi
   37ff4:	676e 4320 6e6f 7274 6c6f 4420 7461 2061     ng Control Data 
   38004:	7571 7565 7365 0d21 000a 0000 6f43 746e     queues!.....Cont
   38014:	6f72 206c 6854 6572 6461 203a 6f43 736e     rol Thread: Cons
   38024:	6d75 6465 6720 6d61 2065 6170 6b63 7465     umed game packet
   38034:	0d21 000a 6f43 746e 6f72 206c 6854 6572     !...Control Thre
   38044:	6461 203a 6f43 6c75 2064 6f6e 2074 6573     ad: Could not se
   38054:	646e 6720 6d61 2065 6170 6b63 7465 0d21     nd game packet!.
   38064:	000a 0000 6720 6961 3d6e 2520 0d64 000a     .... gain= %d...
   38074:	6966 616e 206c 666f 7366 7465 203d 6425     final offset= %d
   38084:	0a0d 0000 6966 616e 5f6c 6e69 3d74 2520     ....final_int= %
   38094:	0d64 000a 6966 616e 5f6c 6564 6963 616d     d...final_decima
   380a4:	3d6c 2520 0d64 000a                         l= %d...

000380ac <msgBaseGetHWID>:
   380ac:	0100 0000                                   ....

000380b0 <msgNeopixelPin>:
   380b0:	010e 0003                                   ....

000380b4 <msgNeopixelSpeed>:
   380b4:	020e 0001                                   ....

000380b8 <msgNeopixelBufLength>:
   380b8:	030e 3000                                   ...0

000380bc <msgKeypadEnableInt>:
   380bc:	0210 0001                                   ....

000380c0 <msgKeypadGetCount>:
   380c0:	0410 0000 7245 6f72 2072 6e69 7469 6169     ....Error initia
   380d0:	696c 697a 676e 5320 6565 6173 2177 722f     lizing Seesaw!/r
   380e0:	6e2f 0000 7245 6f72 2f72 2f72 006e 0000     /n..Error/r/n...
   380f0:	6f46 6e75 2064 6553 7365 7761 2f21 2f72     Found Seesaw!/r/
   38100:	006e 0000 6f43 6c75 2064 6f6e 2074 7277     n...Could not wr
   38110:	7469 2065 6553 7365 7761 7020 6e69 2f21     ite Seesaw pin!/
   38120:	2f72 006e 6f43 6c75 2064 6f6e 2074 6573     r/n.Could not se
   38130:	2074 6573 7365 7761 4e20 6f65 6970 6578     t seesaw Neopixe
   38140:	206c 7073 6565 2164 722f 6e2f 0000 0000     l speed!/r/n....
   38150:	6f43 6c75 2064 6f6e 2074 6573 2074 6573     Could not set se
   38160:	7365 7761 4e20 6f65 6970 6578 206c 756e     esaw Neopixel nu
   38170:	626d 7265 6f20 2066 6564 6976 6563 2f73     mber of devices/
   38180:	2f72 006e 7245 6f72 2072 6572 6461 6e69     r/n.Error readin
   38190:	2067 6553 7365 7761 6320 756f 746e 2173     g Seesaw counts!
   381a0:	722f 6e2f 0000 0000 1010 0000 050e 0000     /r/n............
   381b0:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   381c0:	696c 657a 4b20 7965 6170 2164 722f 6e2f     lize Keypad!/r/n
   381d0:	0000 0000 4955 5420 7361 206b 7453 7261     ....UI Task Star
   381e0:	6574 2164 0000 0000 5345 3545 3631 0000     ted!....ESE516..
   381f0:	4948 4847 4157 0059                         HIGHWAY.

000381f8 <main_mqtt_broker>:
   381f8:	7262 6b6f 7265 682e 7669 6d65 2e71 6f63     broker.hivemq.co
   38208:	006d 0000 3025 6433 0000 0000 7473 7261     m...%03d....star
   38218:	5f74 6f64 6e77 6f6c 6461 203a 4d4d 2043     t_download: MMC 
   38228:	7473 726f 6761 2065 6f6e 2074 6572 6461     storage not read
   38238:	2e79 0a0d 0000 0000 7473 7261 5f74 6f64     y.......start_do
   38248:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   38258:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   38268:	000a 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   38278:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   38288:	6e65 2074 6c61 6572 6461 2e79 0a0d 0000     ent already.....
   38298:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   382a8:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   382b8:	6120 726c 6165 7964 0d2e 000a 7473 7261      already....star
   382c8:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   382d8:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   382e8:	2e2e 0d2e 000a 0000 7468 7074 3a73 2f2f     ........https://
   382f8:	3437 322e 3533 312e 3537 342e 2f31 6554     74.235.175.41/Te
   38308:	7473 2e42 6962 006e 7473 726f 5f65 6966     stB.bin.store_fi
   38318:	656c 705f 6361 656b 3a74 6520 706d 7974     le_packet: empty
   38328:	6420 7461 2e61 0a0d 0000 0000 7473 726f      data.......stor
   38338:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   38348:	6c69 2065 616e 656d 6920 2073 6e69 6176     ile name is inva
   38358:	696c 2e64 4420 776f 6c6e 616f 2064 6163     lid. Download ca
   38368:	636e 6c65 6465 0d2e 000a 0000 7473 726f     nceled......stor
   38378:	5f65 6966 656c 705f 6361 656b 3a74 6320     e_file_packet: c
   38388:	6572 7461 6e69 2067 6966 656c 5b20 7325     reating file [%s
   38398:	0d5d 000a 7473 726f 5f65 6966 656c 705f     ]...store_file_p
   383a8:	6361 656b 3a74 6620 6c69 2065 7263 6165     acket: file crea
   383b8:	6974 6e6f 6520 7272 726f 2021 6572 3a74     tion error! ret:
   383c8:	6425 0a0d 0000 0000 7473 726f 5f65 6966     %d......store_fi
   383d8:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   383e8:	7277 7469 2065 7265 6f72 2c72 6420 776f     write error, dow
   383f8:	6c6e 616f 2064 6163 636e 6c65 6465 0d2e     nload canceled..
   38408:	000a 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   38418:	6361 656b 3a74 7220 6365 6965 6576 5b64     acket: received[
   38428:	6c25 5d75 202c 6966 656c 7320 7a69 5b65     %lu], file size[
   38438:	6c25 5d75 0a0d 0000 7473 726f 5f65 6966     %lu]....store_fi
   38448:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   38458:	6f64 6e77 6f6c 6461 6465 7320 6375 6563     downloaded succe
   38468:	7373 7566 6c6c 2e79 0a0d 0000 7468 7074     ssfully.....http
   38478:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   38488:	203a 5448 5054 6320 696c 6e65 2074 6f73     : HTTP client so
   38498:	6b63 7465 6320 6e6f 656e 7463 6465 0d2e     cket connected..
   384a8:	000a 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
   384b8:	6163 6c6c 6162 6b63 203a 6572 7571 7365     callback: reques
   384c8:	2074 6f63 706d 656c 6574 2e64 0a0d 0000     t completed.....
   384d8:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   384e8:	6162 6b63 203a 6572 6563 7669 6465 7220     back: received r
   384f8:	7365 6f70 736e 2065 7525 6420 7461 2061     esponse %u data 
   38508:	6973 657a 2520 0d75 000a 0000 7468 7074     size %u.....http
   38518:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   38528:	203a 6964 6373 6e6f 656e 7463 6f69 206e     : disconnection 
   38538:	6572 7361 6e6f 253a 0d64 000a 6572 6f73     reason:%d...reso
   38548:	766c 5f65 6263 203a 7325 4920 2050 6461     lve_cb: %s IP ad
   38558:	7264 7365 2073 7369 2520 2e64 6425 252e     dress is %d.%d.%
   38568:	2e64 6425 0a0d 0a0d 0000 0000 6977 6966     d.%d........wifi
   38578:	635f 3a62 4d20 4d32 575f 4649 5f49 4f43     _cb: M2M_WIFI_CO
   38588:	4e4e 4345 4554 0d44 000a 0000 6977 6966     NNECTED.....wifi
   38598:	635f 3a62 4d20 4d32 575f 4649 5f49 4944     _cb: M2M_WIFI_DI
   385a8:	4353 4e4f 454e 5443 4445 0a0d 0000 0000     SCONNECTED......
   385b8:	317a 3332 3534 3736 0038 0000 007a 0000     z12345678...z...
   385c8:	6977 6966 635f 3a62 4920 2050 6461 7264     wifi_cb: IP addr
   385d8:	7365 2073 7369 2520 2e75 7525 252e 2e75     ess is %u.%u.%u.
   385e8:	7525 0a0d 0000 0000 7245 6f72 2072 6f63     %u......Error co
   385f8:	6e6e 6365 6974 676e 7420 206f 514d 5454     nnecting to MQTT
   38608:	4220 6f72 656b 2172 0a0d 0000 6e69 7469      Broker!....init
   38618:	735f 6f74 6172 6567 203a 6c70 6165 6573     _storage: please
   38628:	7020 756c 2067 6e61 5320 2f44 4d4d 2043      plug an SD/MMC 
   38638:	6163 6472 6920 206e 6c73 746f 2e2e 0d2e     card in slot....
   38648:	000a 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   38658:	203a 4453 4320 7261 2064 6e69 7473 6c61     : SD Card instal
   38668:	206c 6166 6c69 6465 0d2e 000a 6e69 7469     l failed....init
   38678:	735f 6f74 6172 6567 203a 7274 2079 6e75     _storage: try un
   38688:	6c70 6775 6120 646e 7220 2d65 6c70 6775     plug and re-plug
   38698:	7420 6568 6320 7261 2e64 0a0d 0000 0000      the card.......
   386a8:	6e69 7469 735f 6f74 6172 6567 203a 6f6d     init_storage: mo
   386b8:	6e75 6974 676e 5320 2044 6163 6472 2e2e     unting SD card..
   386c8:	0d2e 000a 6e69 7469 735f 6f74 6172 6567     ....init_storage
   386d8:	203a 4453 6320 7261 2064 6f6d 6e75 2074     : SD card mount 
   386e8:	6166 6c69 6465 2021 7228 7365 2520 2964     failed! (res %d)
   386f8:	0a0d 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   38708:	203a 4453 6320 7261 2064 6f6d 6e75 2074     : SD card mount 
   38718:	4b4f 0d2e 000a 0000 6f63 666e 6769 7275     OK......configur
   38728:	5f65 7468 7074 635f 696c 6e65 3a74 4820     e_http_client: H
   38738:	5454 2050 6c63 6569 746e 6920 696e 6974     TTP client initi
   38748:	6c61 7a69 7461 6f69 206e 6166 6c69 6465     alization failed
   38758:	2021 7228 7365 2520 2964 0a0d 0000 0000     ! (res %d)......
   38768:	0a0d 2520 2a2e 0073 6772 2862 0000 0000     .. %.*s.rgb(....
   38778:	0a0d 4752 2042 6425 2520 2064 6425 0a0d     ..RGB %d %d %d..
   38788:	0000 0000 227b 6167 656d 3a22 005b 0000     ....{"game":[...
   38798:	0a0d 6147 656d 6d20 7365 6173 6567 7220     ..Game message r
   387a8:	6365 6965 6576 2164 0a0d 0000 2e25 732a     eceived!....%.*s
   387b8:	0000 0000 0a0d 6150 7372 6465 4320 6d6f     ......Parsed Com
   387c8:	616d 646e 203a 0000 6425 002c 0a0d 6553     mand: ..%d,...Se
   387d8:	746e 7020 616c 2079 6f74 6320 6e6f 7274     nt play to contr
   387e8:	6c6f 0d21 000a 0000 0a0d 6147 656d 6d20     ol!.......Game m
   387f8:	7365 6173 6567 7220 6365 6965 6576 2064     essage received 
   38808:	7562 2074 6f6e 2074 6e75 6564 7372 6f74     but not understo
   38818:	646f 0d21 000a 0000 3e20 203e 0000 0000     od!..... >> ....
   38828:	3150 4c5f 4445 455f 4553 3135 5f36 3954     P1_LED_ESE516_T9
   38838:	0000 0000 6166 736c 0065 0000 7274 6575     ....false...true
   38848:	0000 0000 0a0d 6f43 6e6e 6365 6974 676e     ......Connecting
   38858:	7420 206f 7242 6b6f 7265 2e2e 002e 0000      to Broker......
   38868:	7242 4a73 4e42 6f56 4251 376c 0000 0000     BrsJBNVoQBl7....
   38878:	7472 7974 626f 6a65 0000 0000 514d 5454     rttyobej....MQTT
   38888:	2020 7245 6f72 2072 202d 4f4e 2054 6f43       Error - NOT Co
   38898:	6e6e 6365 6574 2064 6f74 6220 6f72 656b     nnected to broke
   388a8:	0d72 000a 514d 5454 4320 6e6f 656e 7463     r...MQTT Connect
   388b8:	6465 7420 206f 7262 6b6f 7265 0a0d 0000     ed to broker....
   388c8:	6f43 6e6e 6365 2074 6166 6c69 7420 206f     Connect fail to 
   388d8:	6573 7672 7265 2528 2973 2021 6572 7274     server(%s)! retr
   388e8:	2079 7469 6120 7475 6d6f 7461 6369 6c61     y it automatical
   388f8:	796c 0d2e 000a 0000 3150 475f 4d41 5f45     ly......P1_GAME_
   38908:	5345 3545 3631 545f 0039 0000 514d 5454     ESE516_T9...MQTT
   38918:	4320 6e6f 656e 7463 6465 0a0d 0000 0000      Connected......
   38928:	514d 5454 6220 6f72 656b 2072 6564 6c63     MQTT broker decl
   38938:	6e69 2065 6f79 7275 6120 6363 7365 2173     ine your access!
   38948:	6520 7272 726f 6320 646f 2065 6425 0a0d      error code %d..
   38958:	0000 0000 514d 5454 6420 7369 6f63 6e6e     ....MQTT disconn
   38968:	6365 6574 0d64 000a 514d 5454 6920 696e     ected...MQTT ini
   38978:	6974 6c61 7a69 7461 6f69 206e 6166 6c69     tialization fail
   38988:	6465 202e 7245 6f72 2072 6f63 6564 6920     ed. Error code i
   38998:	2073 2528 2964 0a0d 0000 0000 514d 5454     s (%d)......MQTT
   389a8:	7220 6765 7369 6574 2072 6163 6c6c 6162      register callba
   389b8:	6b63 6620 6961 656c 2e64 4520 7272 726f     ck failed. Error
   389c8:	6320 646f 2065 7369 2820 6425 0d29 000a      code is (%d)...
   389d8:	227b 2264 7b3a 7422 6d65 2270 253a 7d64     {"d":{"temp":%d}
   389e8:	007d 0000 465b 4941 5d4c 7220 7365 2520     }...[FAIL] res %
   389f8:	0d64 000a 6c46 6761 2e41 7874 2074 6461     d...FlagA.txt ad
   38a08:	6564 2164 0a0d 0000 3a30 6c46 6761 2e41     ded!....0:FlagA.
   38a18:	7874 0074 6f43 6e6e 6365 6574 2064 6f74     txt.Connected to
   38a28:	4d20 5451 2054 7242 6b6f 7265 0d21 000a      MQTT Broker!...
   38a38:	227b 6d69 7875 3a22 6425 202c 6922 756d     {"imux":%d, "imu
   38a48:	2279 203a 6425 202c 6922 756d 227a 203a     y": %d, "imuz": 
   38a58:	6425 007d 3150 495f 554d 455f 4553 3135     %d}.P1_IMU_ESE51
   38a68:	5f36 3954 0000 0000 227b 6574 7473 3a22     6_T9....{"test":
   38a78:	6425 7d20 0000 0000 4554 5453 545f 504f     %d }....TEST_TOP
   38a88:	4349 355f 3631 545f 0039 0000 227b 616e     IC_516_T9...{"na
   38a98:	5f75 2269 253a 2c64 2020 6e22 7561 665f     u_i":%d,  "nau_f
   38aa8:	3a22 2520 7d64 0000 414e 5f55 4f54 4950     ": %d}..NAU_TOPI
   38ab8:	5f43 3135 5f36 3954 0000 0000 6425 0000     C_516_T9....%d..
   38ac8:	7d5d 0000 0a0d 0000 3250 475f 4d41 5f45     ]}......P2_GAME_
   38ad8:	5345 3545 3631 545f 0039 0000 5245 4f52     ESE516_T9...ERRO
   38ae8:	2052 6e49 7469 6169 696c 697a 676e 5720     R Initializing W
   38af8:	6669 2069 6144 6174 7120 6575 6575 2173     ifi Data queues!
   38b08:	0a0d 0000 5345 3545 3631 2d20 5720 6669     ....ESE516 - Wif
   38b18:	2069 6e49 7469 4320 646f 0d65 000a 0000     i Init Code.....
   38b28:	616d 6e69 203a 326d 5f6d 6977 6966 695f     main: m2m_wifi_i
   38b38:	696e 2074 6163 6c6c 6520 7272 726f 2021     nit call error! 
   38b48:	7228 7365 2520 2964 0a0d 0000 616d 6e69     (res %d)....main
   38b58:	203a 6f63 6e6e 6365 6974 676e 7420 206f     : connecting to 
   38b68:	6957 6946 4120 2050 7325 2e2e 0d2e 000a     WiFi AP %s......
   38b78:	3150 545f 4d45 4550 4152 5554 4552 455f     P1_TEMPERATURE_E
   38b88:	4553 3135 5f36 3954 0000 0000 514d 5454     SE516_T9....MQTT
   38b98:	7320 6e65 2064 7325 0a0d 0000 7080 0001      send %s.....p..
   38ba8:	708c 0001 709e 0001 70f4 0001 7114 0001     .p...p...p...q..
   38bb8:	6568 706c 0000 0000 0a0d 6568 706c 0d3a     help......help:.
   38bc8:	200a 694c 7473 2073 6c61 206c 6874 2065     . Lists all the 
   38bd8:	6572 6967 7473 7265 6465 6320 6d6f 616d     registered comma
   38be8:	646e 0d73 0d0a 000a 6e49 6f63 7272 6365     nds.....Incorrec
   38bf8:	2074 6f63 6d6d 6e61 2064 6170 6172 656d     t command parame
   38c08:	6574 2872 2973 202e 4520 746e 7265 2220     ter(s).  Enter "
   38c18:	6568 706c 2022 6f74 7620 6569 2077 2061     help" to view a 
   38c28:	696c 7473 6f20 2066 7661 6961 616c 6c62     list of availabl
   38c38:	2065 6f63 6d6d 6e61 7364 0d2e 0d0a 000a     e commands......
   38c48:	6f43 6d6d 6e61 2064 6f6e 2074 6572 6f63     Command not reco
   38c58:	6e67 7369 6465 202e 4520 746e 7265 2720     gnised.  Enter '
   38c68:	6568 706c 2027 6f74 7620 6569 2077 2061     help' to view a 
   38c78:	696c 7473 6f20 2066 7661 6961 616c 6c62     list of availabl
   38c88:	2065 6f63 6d6d 6e61 7364 0d2e 0d0a 000a     e commands......

00038c98 <xHelpCommand>:
   38c98:	8bb8 0003 8bc0 0003 8f45 0001 0000 0000     ........E.......
   38ca8:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   38cb8:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   38cc8:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   38cd8:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   38ce8:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   38cf8:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   38d08:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   38d18:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   38d28:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   38d38:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   38d48:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   38d58:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   38d68:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   38d78:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   38d88:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   38d98:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   38da8:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   38db8:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   38dc8:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   38dd8:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   38de8:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   38df8:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   38e08:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   38e18:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   38e28:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   38e38:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   38e48:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   38e58:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   38e68:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   38e78:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   38e88:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   38e98:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   38ea8:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   38eb8:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   38ec8:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   38ed8:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   38ee8:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   38ef8:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   38f08:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   38f18:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   38f28:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   38f38:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   38f48:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   38f58:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   38f68:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   38f78:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   38f88:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   38f98:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   38fa8:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   38fb8:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   38fc8:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   38fd8:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   38fe8:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   38ff8:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   39008:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   39018:	6365 6374 616c 7373 0021 0000 966a 0001     ectclass!...j...
   39028:	9662 0001 9666 0001 965a 0001 965e 0001     b...f...Z...^...
   39038:	966e 0001 9672 0001 9676 0001 967a 0001     n...r...v...z...
   39048:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   39058:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   39068:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   39078:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   39088:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   39098:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   390a8:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   390b8:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   390c8:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   390d8:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   390e8:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   390f8:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   39108:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   39118:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   39128:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   39138:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   39148:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   39158:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   39168:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   39178:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   39188:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   39198:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   391a8:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   391b8:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   391c8:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   391d8:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   391e8:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   391f8:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   39208:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   39218:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   39228:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   39238:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   39248:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   39258:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   39268:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   39278:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   39288:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   39298:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   392a8:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   392b8:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   392c8:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   392d8:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   392e8:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   392f8:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   39308:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   39318:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   39328:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   39338:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   39348:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   39358:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   39368:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   39378:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   39388:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   39398:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   393a8:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   393b8:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   393c8:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   393d8:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   393e8:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   393f8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   39408:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   39418:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   39428:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   39438:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   39448:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   39458:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   39468:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   39478:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   39488:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   39498:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   394a8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   394b8:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   394c8:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   394d8:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   394e8:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   394f8:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   39508:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   39518:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   39528:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   39538:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   39548:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   39558:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   39568:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   39578:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   39588:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   39598:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   395a8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   395b8:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   395c8:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   395d8:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   395e8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   395f8:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   39608:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   39618:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   39628:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   39638:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   39648:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   39658:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   39668:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   39678:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   39688:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   39698:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   396a8:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   396b8:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   396c8:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   396d8:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   396e8:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   396f8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   39708:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   39718:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   39728:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   39738:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   39748:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   39758:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   39768:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   39778:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   39788:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   39798:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   397a8:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   397b8:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   397c8:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   397d8:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   397e8:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   397f8:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   39808:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   39818:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   39828:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   39838:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   39848:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   39858:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   39868:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   39878:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   39888:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   39898:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   398a8:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   398b8:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   398c8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   398d8:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   398e8:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   398f8:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   39908:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   39918:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   39928:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   39938:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   39948:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   39958:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   39968:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   39978:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   39988:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   39998:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   399a8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   399b8:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   399c8:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   399d8:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   399e8:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   399f8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   39a08:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   39a18:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   39a28:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   39a38:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   39a48:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   39a58:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   39a68:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   39a78:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   39a88:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   39a98:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   39aa8:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   39ab8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   39ac8:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   39ad8:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   39ae8:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   39af8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   39b08:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   39b18:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   39b28:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   39b38:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   39b48:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   39b58:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   39b68:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   39b78:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   39b88:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   39b98:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   39ba8:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   39bb8:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   39bc8:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   39bd8:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   39be8:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   39bf8:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   39c08:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   39c18:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   39c28:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   39c38:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   39c48:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   39c58:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   39c68:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   39c78:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   39c88:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   39c98:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   39ca8:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   39cb8:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   39cc8:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   39cd8:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   39ce8:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   39cf8:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   39d08:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   39d18:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   39d28:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   39d38:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   39d48:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   39d58:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   39d68:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   39d78:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   39d88:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   39d98:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   39da8:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   39db8:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   39dc8:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   39dd8:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   39de8:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   39df8:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   39e08:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   39e18:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   39e28:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   39e38:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   39e48:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   39e58:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   39e68:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   39e78:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   39e88:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   39e98:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   39ea8:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   39eb8:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   39ec8:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   39ed8:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   39ee8:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   39ef8:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   39f08:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   39f18:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   39f28:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   39f38:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   39f48:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   39f58:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   39f68:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   39f78:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   39f88:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   39f98:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   39fa8:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   39fb8:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   39fc8:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   39fd8:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   39fe8:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   39ff8:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   3a008:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   3a018:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   3a028:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   3a038:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   3a048:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   3a058:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   3a068:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   3a078:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   3a088:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   3a098:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   3a0a8:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   3a0b8:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   3a0c8:	0000 0000 6d54 2072 7653 0063 e708 0001     ....Tmr Svc.....
   3a0d8:	e708 0001 e708 0001 e796 0001 e760 0001     ............`...
   3a0e8:	e78a 0001 e708 0001 e708 0001 e796 0001     ................
   3a0f8:	e760 0001                                   `...

0003a0fc <sd_mmc_trans_units>:
   3a0fc:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0003a118 <sd_trans_multipliers>:
   3a118:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   3a128:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   3a138:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   3a148:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0003a158 <mmc_trans_multipliers>:
   3a158:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   3a168:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   3a178:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   3a188:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   3a198:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   3a1a8:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   3a1b8:	746c 6320 646d 000a 000d 0000               lt cmd......

0003a1c4 <__FUNCTION__.17099>:
   3a1c4:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   3a1d4:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   3a1e4:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   3a1f4:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   3a204:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   3a214:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   3a224:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   3a234:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   3a244:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   3a254:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   3a264:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   3a274:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   3a284:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   3a294:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   3a2a4:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   3a2b4:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   3a2c4:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   3a2d4:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   3a2e4:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   3a2f4:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   3a304:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   3a314:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   3a324:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   3a334:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   3a344:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   3a354:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   3a364:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   3a374:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   3a384:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   3a394:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   3a3a4:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   3a3b4:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   3a3c4:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   3a3d4:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   3a3e4:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   3a3f4:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   3a404:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   3a414:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   3a424:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   3a434:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   3a444:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   3a454:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   3a464:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   3a474:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   3a484:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   3a494:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   3a4a4:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   3a4b4:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   3a4c4:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   3a4d4:	203f 6425 000a 0000 290c 0002 28dc 0002     ? %d.....)...(..
   3a4e4:	28d4 0002 28ec 0002 28e4 0002 2904 0002     .(...(...(...)..
   3a4f4:	28f4 0002 28fc 0002                         .(...(..

0003a4fc <__FUNCTION__.17967>:
   3a4fc:	6968 5f66 6573 646e 0000 0000               hif_send....

0003a508 <__FUNCTION__.17977>:
   3a508:	6968 5f66 7369 0072                         hif_isr.

0003a510 <__FUNCTION__.17986>:
   3a510:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

0003a520 <__FUNCTION__.17998>:
   3a520:	6968 5f66 6572 6563 7669 0065               hif_receive.

0003a52c <__FUNCTION__.18014>:
   3a52c:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   3a53c:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   3a54c:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   3a55c:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   3a56c:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   3a57c:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   3a58c:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   3a59c:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   3a5ac:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   3a5bc:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   3a5cc:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   3a5dc:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   3a5ec:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   3a5fc:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   3a60c:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   3a61c:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   3a62c:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   3a63c:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   3a64c:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   3a65c:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   3a66c:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   3a67c:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   3a68c:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   3a69c:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   3a6ac:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   3a6bc:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   3a6cc:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   3a6dc:	2064 000a 6946 6d72 6177 6572 7620 7265     d ..Firmware ver
   3a6ec:	2020 3a20 2520 2e75 7525 252e 2075 7653        : %u.%u.%u Sv
   3a6fc:	726e 7665 2520 0a75 0000 0000 6946 6d72     nrev %u.....Firm
   3a70c:	6177 6572 4220 6975 646c 2520 2073 6954     ware Build %s Ti
   3a71c:	656d 2520 0a73 0000 6946 6d72 6177 6572     me %s...Firmware
   3a72c:	4d20 6e69 6420 6972 6576 2072 6576 2072      Min driver ver 
   3a73c:	203a 7525 252e 2e75 7525 000a 7244 7669     : %u.%u.%u..Driv
   3a74c:	7265 7620 7265 203a 7525 252e 2e75 7525     er ver: %u.%u.%u
   3a75c:	000a 0000 3332 303a 3a32 3130 0000 0000     ....23:02:01....
   3a76c:	7041 2072 3931 3220 3230 0033 7244 7669     Apr 19 2023.Driv
   3a77c:	7265 6220 6975 746c 6120 2074 7325 2509     er built at %s.%
   3a78c:	0a73 0000 694d 6d73 7461 6863 4620 7269     s...Mismatch Fir
   3a79c:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...
   3a7ac:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
   3a7bc:	000a 0000 6e49 6176 696c 2064 654b 0a79     ....Invalid Key.
   3a7cc:	0000 0000 5353 4449 4c20 4e45 4920 564e     ....SSID LEN INV
   3a7dc:	4c41 4449 000a 0000 4843 4920 564e 4c41     ALID....CH INVAL
   3a7ec:	4449 000a 6e49 6176 696c 2064 6557 2070     ID..Invalid Wep 
   3a7fc:	656b 2079 6e69 6564 2078 6425 000a 0000     key index %d....
   3a80c:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
   3a81c:	656c 676e 6874 2520 0a64 0000 6e49 6f63     length %d...Inco
   3a82c:	7272 6365 2074 5350 204b 656b 2079 656c     rrect PSK key le
   3a83c:	676e 6874 000a 0000 6e75 6564 6966 656e     ngth....undefine
   3a84c:	2064 6573 2063 7974 6570 000a 505f 5f53     d sec type.._PS_
   3a85c:	4553 5652 5245 205f 7369 6e20 746f 6420     SERVER_ is not d
   3a86c:	6665 6e69 6465 000a 694c 7473 6e65 6320     efined..Listen c
   3a87c:	6168 6e6e 6c65 7320 6f68 6c75 2064 6e6f     hannel should on
   3a88c:	796c 6220 2065 324d 5f4d 4957 4946 435f     ly be M2M_WIFI_C
   3a89c:	5f48 2f31 2f36 3131 0a20 0000 4f50 4557     H_1/6/11 ...POWE
   3a8ac:	2052 4153 4556 2520 0a64 0000 4e49 4156     R SAVE %d...INVA
   3a8bc:	494c 2044 4f44 414d 4e49 4e20 4d41 0a45     LID DOMAIN NAME.
   3a8cc:	0000 0000 5250 474e 4220 6675 6566 2072     ....PRNG Buffer 
   3a8dc:	7865 6563 6465 6465 6d20 7861 6d69 6d75     exceeded maximum
   3a8ec:	7320 7a69 2065 6425 6f20 2072 554e 4c4c      size %d or NULL
   3a8fc:	4220 6675 6566 0a72 0000 0000                Buffer.....

0003a908 <__FUNCTION__.17949>:
   3a908:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

0003a914 <__FUNCTION__.17978>:
   3a914:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

0003a924 <__FUNCTION__.18009>:
   3a924:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   3a934:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   3a944:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   3a954:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   3a964:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   3a974:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   3a984:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   3a994:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   3a9a4:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   3a9b4:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

0003a9c4 <__FUNCTION__.17806>:
   3a9c4:	6863 7069 775f 6b61 0065 0000               chip_wake...

0003a9d0 <__FUNCTION__.17855>:
   3a9d0:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   3a9e0:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   3a9f0:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   3aa00:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   3aa10:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   3aa20:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   3aa30:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   3aa40:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   3aa50:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   3aa60:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   3aa70:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   3aa80:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   3aa90:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   3aaa0:	6920 696e 2074 7562 0a73 0000                init bus...

0003aaac <__FUNCTION__.17853>:
   3aaac:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

0003aab8 <__FUNCTION__.17860>:
   3aab8:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

0003aac8 <crc7_syndrome_table>:
   3aac8:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   3aad8:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   3aae8:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   3aaf8:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   3ab08:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   3ab18:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   3ab28:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   3ab38:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   3ab48:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   3ab58:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   3ab68:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   3ab78:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   3ab88:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   3ab98:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   3aba8:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   3abb8:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   3abc8:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   3abd8:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   3abe8:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   3abf8:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   3ac08:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3ac18:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   3ac28:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3ac38:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   3ac48:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   3ac58:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   3ac68:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   3ac78:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   3ac88:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   3ac98:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   3aca8:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   3acb8:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   3acc8:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   3acd8:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   3ace8:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   3acf8:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3ad08:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   3ad18:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   3ad28:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   3ad38:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   3ad48:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   3ad58:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   3ad68:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   3ad78:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   3ad88:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   3ad98:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   3ada8:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   3adb8:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   3adc8:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   3add8:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   3ade8:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   3adf8:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   3ae08:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   3ae18:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   3ae28:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3ae38:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   3ae48:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   3ae58:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   3ae68:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   3ae78:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   3ae88:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   3ae98:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   3aea8:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   3aeb8:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   3aec8:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   3aed8:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   3aee8:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   3aef8:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3af08:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   3af18:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   3af28:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   3af38:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   3af48:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   3af58:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   3af68:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   3af78:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   3af88:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   3af98:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   3afa8:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3afb8:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   3afc8:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   3afd8:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   3afe8:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   3aff8:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   3b008:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   3b018:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   3b028:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   3b038:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   3b048:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   3b058:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   3b068:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3b078:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   3b088:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   3b098:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   3b0a8:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   3b0b8:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3b0c8:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   3b0d8:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   3b0e8:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3b0f8:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   3b108:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   3b118:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   3b128:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   3b138:	2e2e 0a2e 0000 0000 4534 0002 4534 0002     ........4E..4E..
   3b148:	45c4 0002 4488 0002 44ce 0002 44f0 0002     .E...D...D...D..
   3b158:	4576 0002 4576 0002 4630 0002 445c 0002     vE..vE..0F..\D..
   3b168:	468a 0002 468a 0002 468a 0002 468a 0002     .F...F...F...F..
   3b178:	4512 0002 4a94 0002 4a94 0002 4b1c 0002     .E...J...J...K..
   3b188:	49f8 0002 4a3a 0002 4a58 0002 4ad2 0002     .I..:J..XJ...J..
   3b198:	4ad2 0002 4b7e 0002 49d0 0002 4bce 0002     .J..~K...I...K..
   3b1a8:	4bce 0002 4bce 0002 4bce 0002 4a76 0002     .K...K...K..vJ..

0003b1b8 <__FUNCTION__.17128>:
   3b1b8:	7073 5f69 6d63 0064                         spi_cmd.

0003b1c0 <__FUNCTION__.17135>:
   3b1c0:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

0003b1d0 <__FUNCTION__.17144>:
   3b1d0:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

0003b1dc <__FUNCTION__.17177>:
   3b1dc:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   3b1ec:	0000 0000                                   ....

0003b1f0 <__FUNCTION__.17223>:
   3b1f0:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

0003b200 <__FUNCTION__.17235>:
   3b200:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

0003b210 <__FUNCTION__.17246>:
   3b210:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

0003b220 <__FUNCTION__.17258>:
   3b220:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

0003b230 <__FUNCTION__.17269>:
   3b230:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

0003b23c <__FUNCTION__.17290>:
   3b23c:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   3b24c:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   3b25c:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   3b26c:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   3b27c:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   3b28c:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   3b29c:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   3b2ac:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   3b2bc:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   3b2cc:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   3b2dc:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   3b2ec:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   3b2fc:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   3b30c:	2074 2230 0000 0000                         t 0"....

0003b314 <lun_desc>:
   3b314:	012d 0002 0185 0002 01d1 0002 021d 0002     -...............
   3b324:	024d 0002 02d1 0002 0361 0002 b2fc 0003     M.......a.......
   3b334:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   3b344:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   3b354:	a4b2 0002 a52c 0002 a52c 0002 a4d0 0002     ....,...,.......
   3b364:	a4ca 0002 a4d6 0002 a4b8 0002 a4dc 0002     ................
   3b374:	a512 0002 a714 0002 a764 0002 a764 0002     ........d...d...
   3b384:	a760 0002 a706 0002 a726 0002 a6f6 0002     `.......&.......
   3b394:	a738 0002 a74a 0002 a7b2 0002 a7e0 0002     8...J...........
   3b3a4:	a7e0 0002 a7dc 0002 a7ac 0002 a7b8 0002     ................
   3b3b4:	a7a6 0002 a7be 0002 a7c4 0002               ............

0003b3c0 <tcc_modules>:
   3b3c0:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

0003b3cc <_tcc_gclk_ids>:
   3b3cc:	1a1a 001b                                   ....

0003b3d0 <_tcc_apbcmasks>:
   3b3d0:	0100 0000 0200 0000 0400 0000               ............

0003b3dc <_tcc_maxs>:
   3b3dc:	ffff 00ff ffff 00ff ffff 0000               ............

0003b3e8 <_tcc_cc_nums>:
   3b3e8:	0204 0002                                   ....

0003b3ec <_tcc_ow_nums>:
   3b3ec:	0408 0002                                   ....

0003b3f0 <_tcc_intflag>:
   3b3f0:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   3b400:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   3b410:	0000 0001 0000 0002 0000 0004 0000 0008     ................

0003b420 <LfnOfs>:
   3b420:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   3b430:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   3b440:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   3b450:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   3b460:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   3b470:	5441 2020 2020 0020                         AT     .

0003b478 <excvt.4558>:
   3b478:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   3b488:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   3b498:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   3b4a8:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   3b4b8:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   3b4c8:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   3b4d8:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   3b4e8:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

0003b4f8 <Tbl>:
   3b4f8:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   3b508:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   3b518:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   3b528:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   3b538:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   3b548:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   3b558:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   3b568:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   3b578:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   3b588:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   3b598:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   3b5a8:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   3b5b8:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   3b5c8:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   3b5d8:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   3b5e8:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

0003b5f8 <tbl_lower.4308>:
   3b5f8:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   3b608:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   3b618:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   3b628:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   3b638:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   3b648:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   3b658:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   3b668:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   3b678:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   3b688:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   3b698:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   3b6a8:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   3b6b8:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   3b6c8:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   3b6d8:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   3b6e8:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   3b6f8:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   3b708:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   3b718:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   3b728:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   3b738:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   3b748:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   3b758:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   3b768:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   3b778:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   3b788:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   3b798:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   3b7a8:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   3b7b8:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   3b7c8:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

0003b7d8 <tbl_upper.4309>:
   3b7d8:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   3b7e8:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   3b7f8:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   3b808:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   3b818:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   3b828:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   3b838:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   3b848:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   3b858:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   3b868:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   3b878:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   3b888:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   3b898:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   3b8a8:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   3b8b8:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   3b8c8:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   3b8d8:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   3b8e8:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   3b8f8:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   3b908:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   3b918:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   3b928:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   3b938:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   3b948:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   3b958:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   3b968:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   3b978:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   3b988:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   3b998:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   3b9a8:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   3b9b8:	fc4a 0002 fc4a 0002 fc4a 0002 fad8 0002     J...J...J.......
   3b9c8:	fc4a 0002 fbc2 0002 fc4a 0002 fc4a 0002     J.......J...J...
   3b9d8:	fc4a 0002 fc4a 0002 fc4a 0002 fc4a 0002     J...J...J...J...
   3b9e8:	fc4a 0002 fc3c 0002 514d 4354 0000 0000     J...<...MQTC....
   3b9f8:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   3ba08:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   3ba48:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   3ba60:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   3baa0:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   3bab0:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   3bac0:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   3bad0:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   3bae0:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   3baf0:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   3bb00:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   3bb10:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   3bb20:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   3bb30:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   3bb40:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   3bb50:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   3bb60:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   3bb70:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   3bb80:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   3bb90:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   3bba0:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   3bbb0:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   3bbc0:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   3bbd0:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   3bbe0:	5448 5054 002f 0000 0d31 0000 1d3e 0003     HTTP/...1...>...
   3bbf0:	1d38 0003 1d32 0003 1d2c 0003 1d44 0003     8...2...,...D...
   3bc00:	1d26 0003 1d44 0003 1d20 0003 1d1a 0003     &...D... .......
   3bc10:	1d44 0003 1d14 0003 1d14 0003 1d0e 0003     D...............
   3bc20:	1d08 0003 1d02 0003 2000 4200 2400 4200     ......... .B.$.B
   3bc30:	2800 4200 0a0d 0a0d 2d2d 2d2d 452d 4553     .(.B....-----ESE
   3bc40:	3135 2036 614d 6e69 5020 6f72 7267 6d61     516 Main Program
   3bc50:	2d2d 2d2d 0d2d 000a 0a0d 0a0d 6e49 7469     -----.......Init
   3bc60:	6169 696c 657a 4820 2e57 2e2e 0a0d 0000     ialize HW.......
   3bc70:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   3bc80:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   3bc90:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   3bca0:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   3bcb0:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   3bcc0:	676e 5320 6565 6173 2177 0a0d 0000 0000     ng Seesaw!......
   3bcd0:	6e49 7469 6169 696c 657a 2064 6553 7365     Initialized Sees
   3bce0:	7761 0d21 000a 0000 6143 6e6e 746f 6620     aw!.....Cannot f
   3bcf0:	6e69 2064 4d49 2155 0a0d 0000 4d49 2055     ind IMU!....IMU 
   3bd00:	6f66 6e75 2164 0a0d 0000 0000 4d49 2055     found!......IMU 
   3bd10:	6e69 7469 6169 696c 657a 2164 0a0d 0000     initialized!....
   3bd20:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   3bd30:	696c 657a 4920 554d 0a0d 0000 6548 7061     lize IMU....Heap
   3bd40:	6220 6665 726f 2065 7473 7261 6974 676e      before starting
   3bd50:	7420 7361 736b 203a 6425 0a0d 0000 0000      tasks: %d......
   3bd60:	4c43 5f49 4154 4b53 0000 0000 5245 3a52     CLI_TASK....ERR:
   3bd70:	4320 494c 7420 7361 206b 6f63 6c75 2064      CLI task could 
   3bd80:	6f6e 2074 6562 6920 696e 6974 6c61 7a69     not be initializ
   3bd90:	6465 0d21 000a 0000 6548 7061 6120 7466     ed!.....Heap aft
   3bda0:	7265 7320 6174 7472 6e69 2067 4c43 3a49     er starting CLI:
   3bdb0:	2520 0d64 000a 0000 4957 4946 545f 5341      %d.....WIFI_TAS
   3bdc0:	004b 0000 5245 3a52 5720 4649 2049 6174     K...ERR: WIFI ta
   3bdd0:	6b73 6320 756f 646c 6e20 746f 6220 2065     sk could not be 
   3bde0:	6e69 7469 6169 696c 657a 2164 0a0d 0000     initialized!....
   3bdf0:	6548 7061 6120 7466 7265 7320 6174 7472     Heap after start
   3be00:	6e69 2067 4957 4946 203a 6425 0a0d 0000     ing WIFI: %d....
   3be10:	4955 5420 7361 006b 5245 3a52 5520 2049     UI Task.ERR: UI 
   3be20:	6174 6b73 6320 756f 646c 6e20 746f 6220     task could not b
   3be30:	2065 6e69 7469 6169 696c 657a 2164 0a0d     e initialized!..
   3be40:	0000 0000 6548 7061 6120 7466 7265 7320     ....Heap after s
   3be50:	6174 7472 6e69 2067 4955 5420 7361 3a6b     tarting UI Task:
   3be60:	2520 0d64 000a 0000 6f43 746e 6f72 206c      %d.....Control 
   3be70:	6154 6b73 0000 0000 5245 3a52 4320 6e6f     Task....ERR: Con
   3be80:	7274 6c6f 7420 7361 206b 6f63 6c75 2064     trol task could 
   3be90:	6f6e 2074 6562 6920 696e 6974 6c61 7a69     not be initializ
   3bea0:	6465 0d21 000a 0000 6548 7061 6120 7466     ed!.....Heap aft
   3beb0:	7265 7320 6174 7472 6e69 2067 6f43 746e     er starting Cont
   3bec0:	6f72 206c 6154 6b73 203a 6425 0a0d 0000     rol Task: %d....
   3bed0:	7245 6f72 2072 6e6f 6d20 6d65 726f 2079     Error on memory 
   3bee0:	6c61 6f6c 6163 6974 6e6f 6f20 206e 5246     allocation on FR
   3bef0:	4545 5452 534f 0d21 000a 0000 7245 6f72     EERTOS!.....Erro
   3bf00:	2072 6e6f 7320 6174 6b63 6f20 6576 6672     r on stack overf
   3bf10:	6f6c 2077 6e6f 4620 4552 5245 4f54 2153     low on FREERTOS!
   3bf20:	0a0d 0000 42c4 0003 4294 0003 42a6 0003     .....B...B...B..
   3bf30:	41e8 0003 42a6 0003 428a 0003 42a6 0003     .A...B...B...B..
   3bf40:	41e8 0003 4294 0003 4294 0003 428a 0003     .A...B...B...B..
   3bf50:	41e8 0003 41f0 0003 41f0 0003 41f0 0003     .A...A...A...A..
   3bf60:	42ac 0003 4294 0003 4294 0003 4268 0003     .B...B...B..hB..
   3bf70:	434c 0003 4268 0003 428a 0003 4268 0003     LC..hB...B..hB..
   3bf80:	434c 0003 4294 0003 4294 0003 428a 0003     LC...B...B...B..
   3bf90:	434c 0003 41f0 0003 41f0 0003 41f0 0003     LC...A...A...A..
   3bfa0:	4356 0003 44f4 0003 4444 0003 4444 0003     VC...D..DD..DD..
   3bfb0:	4442 0003 44e6 0003 44e6 0003 44dc 0003     BD...D...D...D..
   3bfc0:	4442 0003 44e6 0003 44dc 0003 44e6 0003     BD...D...D...D..
   3bfd0:	4442 0003 44ec 0003 44ec 0003 44ec 0003     BD...D...D...D..
   3bfe0:	457c 0003 5238 0003 521a 0003 51d4 0003     |E..8R...R...Q..
   3bff0:	50f2 0003 51d4 0003 520c 0003 51d4 0003     .P...Q...R...Q..
   3c000:	50f2 0003 521a 0003 521a 0003 520c 0003     .P...R...R...R..
   3c010:	50f2 0003 50ea 0003 50ea 0003 50ea 0003     .P...P...P...P..
   3c020:	5450 0003 5898 0003 5758 0003 5758 0003     PT...X..XW..XW..
   3c030:	5754 0003 5870 0003 5870 0003 5862 0003     TW..pX..pX..bX..
   3c040:	5754 0003 5870 0003 5862 0003 5870 0003     TW..pX..bX..pX..
   3c050:	5754 0003 5878 0003 5878 0003 5878 0003     TW..xX..xX..xX..
   3c060:	5a7c 0003                                   |Z..

0003c064 <_global_impure_ptr>:
   3c064:	0134 2000                                   4.. 

0003c068 <__sf_fake_stderr>:
	...

0003c088 <__sf_fake_stdin>:
	...

0003c0a8 <__sf_fake_stdout>:
	...
   3c0c8:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   3c0d8:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   3c0e8:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   3c0f8:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

0003c105 <_ctype_>:
   3c105:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   3c115:	2020 2020 2020 2020 2020 2020 2020 2020                     
   3c125:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   3c135:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   3c145:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   3c155:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   3c165:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   3c175:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   3c185:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0003c208 <_init>:
   3c208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3c20a:	46c0      	nop			; (mov r8, r8)
   3c20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3c20e:	bc08      	pop	{r3}
   3c210:	469e      	mov	lr, r3
   3c212:	4770      	bx	lr

0003c214 <__init_array_start>:
   3c214:	000120dd 	.word	0x000120dd

0003c218 <_fini>:
   3c218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3c21a:	46c0      	nop			; (mov r8, r8)
   3c21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3c21e:	bc08      	pop	{r3}
   3c220:	469e      	mov	lr, r3
   3c222:	4770      	bx	lr

0003c224 <__fini_array_start>:
   3c224:	000120b5 	.word	0x000120b5
