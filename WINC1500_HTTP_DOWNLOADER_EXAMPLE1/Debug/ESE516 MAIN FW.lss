
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00027cf0  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002f0  20000000  00039cf0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005968  200002f0  00039fe0  000302f0  2**4
                  ALLOC
  3 .stack        00002000  20005c58  0003f948  000302f0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000302f0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00030318  2**0
                  CONTENTS, READONLY
  6 .debug_info   00122980  00000000  00000000  00030371  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00010f3f  00000000  00000000  00152cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001231b  00000000  00000000  00163c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000032b8  00000000  00000000  00175f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002ec0  00000000  00000000  00179203  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00041683  00000000  00000000  0017c0c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005b446  00000000  00000000  001bd746  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000be60f  00000000  00000000  00218b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000bdfc  00000000  00000000  002d719c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	58 7c 00 20 99 a0 02 00 91 a1 02 00 91 a1 02 00     X|. ............
	...
   1202c:	99 90 01 00 00 00 00 00 00 00 00 00 c1 91 01 00     ................
   1203c:	09 92 01 00 91 a1 02 00 91 a1 02 00 91 a1 02 00     ................
   1204c:	bd 60 02 00 e9 55 02 00 91 a1 02 00 09 2e 01 00     .`...U..........
   1205c:	91 a1 02 00 4d 2f 01 00 61 67 02 00 79 67 02 00     ....M/..ag..yg..
   1206c:	91 67 02 00 a9 67 02 00 c1 67 02 00 d9 67 02 00     .g...g...g...g..
   1207c:	e1 9f 02 00 f5 9f 02 00 09 a0 02 00 85 6d 01 00     .............m..
   1208c:	99 6d 01 00 ad 6d 01 00 00 00 00 00 00 00 00 00     .m...m..........
   1209c:	91 2c 01 00 91 a1 02 00 cd 2d 01 00 91 a1 02 00     .,.......-......
   120ac:	91 a1 02 00 00 00 00 00                             ........

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	200002f0 	.word	0x200002f0
   120d4:	00000000 	.word	0x00000000
   120d8:	00039cf0 	.word	0x00039cf0

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	200002f4 	.word	0x200002f4
   12108:	00039cf0 	.word	0x00039cf0
   1210c:	00039cf0 	.word	0x00039cf0
   12110:	00000000 	.word	0x00000000

00012114 <ssd1306_hard_reset>:
 * \brief Perform a hard reset of the OLED controller
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
   12114:	b580      	push	{r7, lr}
   12116:	af00      	add	r7, sp, #0
	/*uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
	port_pin_set_output_level(SSD1306_RES_PIN, false);
	delay_cycles(delay_10us); // At lest 10us
	port_pin_set_output_level(SSD1306_RES_PIN, true);
	delay_cycles(delay_10us); // At lest 10us*/
}
   12118:	46c0      	nop			; (mov r8, r8)
   1211a:	46bd      	mov	sp, r7
   1211c:	bd80      	pop	{r7, pc}

0001211e <ssd1306_interface_init>:
 *
 * Depending on what interface used for interfacing the OLED controller this
 * function will initialize the necessary hardware.
 */
static void ssd1306_interface_init(void)
{
   1211e:	b580      	push	{r7, lr}
   12120:	af00      	add	r7, sp, #0

}
   12122:	46c0      	nop			; (mov r8, r8)
   12124:	46bd      	mov	sp, r7
   12126:	bd80      	pop	{r7, pc}

00012128 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
   12128:	b580      	push	{r7, lr}
   1212a:	af00      	add	r7, sp, #0


	// Initialize the interface
	ssd1306_interface_init();
   1212c:	4b25      	ldr	r3, [pc, #148]	; (121c4 <ssd1306_init+0x9c>)
   1212e:	4798      	blx	r3

	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
   12130:	4b25      	ldr	r3, [pc, #148]	; (121c8 <ssd1306_init+0xa0>)
   12132:	4798      	blx	r3

	// Set the reset pin to the default state
	//port_pin_set_output_level(SSD1306_RES_PIN, true);
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFF); //0xAE
   12134:	20ae      	movs	r0, #174	; 0xae
   12136:	4b25      	ldr	r3, [pc, #148]	; (121cc <ssd1306_init+0xa4>)
   12138:	4798      	blx	r3
	
	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO); //0XD5
   1213a:	20d5      	movs	r0, #213	; 0xd5
   1213c:	4b23      	ldr	r3, [pc, #140]	; (121cc <ssd1306_init+0xa4>)
   1213e:	4798      	blx	r3
	ssd1306_write_command(0x80);
   12140:	2080      	movs	r0, #128	; 0x80
   12142:	4b22      	ldr	r3, [pc, #136]	; (121cc <ssd1306_init+0xa4>)
   12144:	4798      	blx	r3
	
	
	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO); //0XA8
   12146:	20a8      	movs	r0, #168	; 0xa8
   12148:	4b20      	ldr	r3, [pc, #128]	; (121cc <ssd1306_init+0xa4>)
   1214a:	4798      	blx	r3
	ssd1306_write_command(0x2F); //2F
   1214c:	202f      	movs	r0, #47	; 0x2f
   1214e:	4b1f      	ldr	r3, [pc, #124]	; (121cc <ssd1306_init+0xa4>)
   12150:	4798      	blx	r3
	
	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET); //D3
   12152:	20d3      	movs	r0, #211	; 0xd3
   12154:	4b1d      	ldr	r3, [pc, #116]	; (121cc <ssd1306_init+0xa4>)
   12156:	4798      	blx	r3
	ssd1306_write_command(0x00);
   12158:	2000      	movs	r0, #0
   1215a:	4b1c      	ldr	r3, [pc, #112]	; (121cc <ssd1306_init+0xa4>)
   1215c:	4798      	blx	r3
	
	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));	
   1215e:	2040      	movs	r0, #64	; 0x40
   12160:	4b1a      	ldr	r3, [pc, #104]	; (121cc <ssd1306_init+0xa4>)
   12162:	4798      	blx	r3
	
	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING); //8D
   12164:	208d      	movs	r0, #141	; 0x8d
   12166:	4b19      	ldr	r3, [pc, #100]	; (121cc <ssd1306_init+0xa4>)
   12168:	4798      	blx	r3
	ssd1306_write_command(0x14);
   1216a:	2014      	movs	r0, #20
   1216c:	4b17      	ldr	r3, [pc, #92]	; (121cc <ssd1306_init+0xa4>)
   1216e:	4798      	blx	r3

	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY); //A6
   12170:	20a6      	movs	r0, #166	; 0xa6
   12172:	4b16      	ldr	r3, [pc, #88]	; (121cc <ssd1306_init+0xa4>)
   12174:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON); //0xA4
   12176:	20a4      	movs	r0, #164	; 0xa4
   12178:	4b14      	ldr	r3, [pc, #80]	; (121cc <ssd1306_init+0xa4>)
   1217a:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL0_SEG0| 0x1); //0xA0
   1217c:	20a1      	movs	r0, #161	; 0xa1
   1217e:	4b13      	ldr	r3, [pc, #76]	; (121cc <ssd1306_init+0xa4>)
   12180:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN); //0xC8
   12182:	20c8      	movs	r0, #200	; 0xc8
   12184:	4b11      	ldr	r3, [pc, #68]	; (121cc <ssd1306_init+0xa4>)
   12186:	4798      	blx	r3
	
	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS); //0xDA
   12188:	20da      	movs	r0, #218	; 0xda
   1218a:	4b10      	ldr	r3, [pc, #64]	; (121cc <ssd1306_init+0xa4>)
   1218c:	4798      	blx	r3
	ssd1306_write_command(0x12);
   1218e:	2012      	movs	r0, #18
   12190:	4b0e      	ldr	r3, [pc, #56]	; (121cc <ssd1306_init+0xa4>)
   12192:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0); //0x81
   12194:	2081      	movs	r0, #129	; 0x81
   12196:	4b0d      	ldr	r3, [pc, #52]	; (121cc <ssd1306_init+0xa4>)
   12198:	4798      	blx	r3
	ssd1306_write_command(0x8F);
   1219a:	208f      	movs	r0, #143	; 0x8f
   1219c:	4b0b      	ldr	r3, [pc, #44]	; (121cc <ssd1306_init+0xa4>)
   1219e:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD); //0xD9
   121a0:	20d9      	movs	r0, #217	; 0xd9
   121a2:	4b0a      	ldr	r3, [pc, #40]	; (121cc <ssd1306_init+0xa4>)
   121a4:	4798      	blx	r3
	ssd1306_write_command(0xF1);	
   121a6:	20f1      	movs	r0, #241	; 0xf1
   121a8:	4b08      	ldr	r3, [pc, #32]	; (121cc <ssd1306_init+0xa4>)
   121aa:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL); //DB
   121ac:	20db      	movs	r0, #219	; 0xdb
   121ae:	4b07      	ldr	r3, [pc, #28]	; (121cc <ssd1306_init+0xa4>)
   121b0:	4798      	blx	r3
	ssd1306_write_command(0x40);
   121b2:	2040      	movs	r0, #64	; 0x40
   121b4:	4b05      	ldr	r3, [pc, #20]	; (121cc <ssd1306_init+0xa4>)
   121b6:	4798      	blx	r3

	
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
   121b8:	20af      	movs	r0, #175	; 0xaf
   121ba:	4b04      	ldr	r3, [pc, #16]	; (121cc <ssd1306_init+0xa4>)
   121bc:	4798      	blx	r3

}
   121be:	46c0      	nop			; (mov r8, r8)
   121c0:	46bd      	mov	sp, r7
   121c2:	bd80      	pop	{r7, pc}
   121c4:	0001211f 	.word	0x0001211f
   121c8:	00012115 	.word	0x00012115
   121cc:	000121d1 	.word	0x000121d1

000121d0 <ssd1306_write_command>:
 * \param command the command to write
 */


void ssd1306_write_command(uint8_t command)
{
   121d0:	b580      	push	{r7, lr}
   121d2:	b084      	sub	sp, #16
   121d4:	af00      	add	r7, sp, #0
   121d6:	0002      	movs	r2, r0
   121d8:	1dfb      	adds	r3, r7, #7
   121da:	701a      	strb	r2, [r3, #0]
	//Send 0 command byte
	uint8_t data[2];
	data[0] = I2C_COMMAND_SSD1306;
   121dc:	230c      	movs	r3, #12
   121de:	18fb      	adds	r3, r7, r3
   121e0:	2200      	movs	r2, #0
   121e2:	701a      	strb	r2, [r3, #0]
	data[1] = command;
   121e4:	230c      	movs	r3, #12
   121e6:	18fb      	adds	r3, r7, r3
   121e8:	1dfa      	adds	r2, r7, #7
   121ea:	7812      	ldrb	r2, [r2, #0]
   121ec:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   121ee:	4b0c      	ldr	r3, [pc, #48]	; (12220 <ssd1306_write_command+0x50>)
   121f0:	223c      	movs	r2, #60	; 0x3c
   121f2:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &data[0];
   121f4:	4b0a      	ldr	r3, [pc, #40]	; (12220 <ssd1306_write_command+0x50>)
   121f6:	220c      	movs	r2, #12
   121f8:	18ba      	adds	r2, r7, r2
   121fa:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(data);
   121fc:	4b08      	ldr	r3, [pc, #32]	; (12220 <ssd1306_write_command+0x50>)
   121fe:	2202      	movs	r2, #2
   12200:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   12202:	4b07      	ldr	r3, [pc, #28]	; (12220 <ssd1306_write_command+0x50>)
   12204:	2200      	movs	r2, #0
   12206:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12208:	4b05      	ldr	r3, [pc, #20]	; (12220 <ssd1306_write_command+0x50>)
   1220a:	2200      	movs	r2, #0
   1220c:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   1220e:	4b04      	ldr	r3, [pc, #16]	; (12220 <ssd1306_write_command+0x50>)
   12210:	2164      	movs	r1, #100	; 0x64
   12212:	0018      	movs	r0, r3
   12214:	4b03      	ldr	r3, [pc, #12]	; (12224 <ssd1306_write_command+0x54>)
   12216:	4798      	blx	r3
}
   12218:	46c0      	nop			; (mov r8, r8)
   1221a:	46bd      	mov	sp, r7
   1221c:	b004      	add	sp, #16
   1221e:	bd80      	pop	{r7, pc}
   12220:	20004734 	.word	0x20004734
   12224:	000144f1 	.word	0x000144f1

00012228 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
   12228:	b580      	push	{r7, lr}
   1222a:	b084      	sub	sp, #16
   1222c:	af00      	add	r7, sp, #0
   1222e:	0002      	movs	r2, r0
   12230:	1dfb      	adds	r3, r7, #7
   12232:	701a      	strb	r2, [r3, #0]
	uint8_t msg[2];
	msg[0] = I2C_DATA_SSD1306;
   12234:	230c      	movs	r3, #12
   12236:	18fb      	adds	r3, r7, r3
   12238:	2240      	movs	r2, #64	; 0x40
   1223a:	701a      	strb	r2, [r3, #0]
	msg[1] = data;
   1223c:	230c      	movs	r3, #12
   1223e:	18fb      	adds	r3, r7, r3
   12240:	1dfa      	adds	r2, r7, #7
   12242:	7812      	ldrb	r2, [r2, #0]
   12244:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   12246:	4b0c      	ldr	r3, [pc, #48]	; (12278 <ssd1306_write_data+0x50>)
   12248:	223c      	movs	r2, #60	; 0x3c
   1224a:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &msg[0];
   1224c:	4b0a      	ldr	r3, [pc, #40]	; (12278 <ssd1306_write_data+0x50>)
   1224e:	220c      	movs	r2, #12
   12250:	18ba      	adds	r2, r7, r2
   12252:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(msg);
   12254:	4b08      	ldr	r3, [pc, #32]	; (12278 <ssd1306_write_data+0x50>)
   12256:	2202      	movs	r2, #2
   12258:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   1225a:	4b07      	ldr	r3, [pc, #28]	; (12278 <ssd1306_write_data+0x50>)
   1225c:	2200      	movs	r2, #0
   1225e:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12260:	4b05      	ldr	r3, [pc, #20]	; (12278 <ssd1306_write_data+0x50>)
   12262:	2200      	movs	r2, #0
   12264:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   12266:	4b04      	ldr	r3, [pc, #16]	; (12278 <ssd1306_write_data+0x50>)
   12268:	2164      	movs	r1, #100	; 0x64
   1226a:	0018      	movs	r0, r3
   1226c:	4b03      	ldr	r3, [pc, #12]	; (1227c <ssd1306_write_data+0x54>)
   1226e:	4798      	blx	r3
}
   12270:	46c0      	nop			; (mov r8, r8)
   12272:	46bd      	mov	sp, r7
   12274:	b004      	add	sp, #16
   12276:	bd80      	pop	{r7, pc}
   12278:	20004734 	.word	0x20004734
   1227c:	000144f1 	.word	0x000144f1

00012280 <gfx_mono_set_framebuffer>:
	uint8_t framebuffer[FRAMEBUFFER_SIZE];
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
   12280:	b580      	push	{r7, lr}
   12282:	b082      	sub	sp, #8
   12284:	af00      	add	r7, sp, #0
   12286:	6078      	str	r0, [r7, #4]
	fbpointer = framebuffer;
   12288:	4b03      	ldr	r3, [pc, #12]	; (12298 <gfx_mono_set_framebuffer+0x18>)
   1228a:	687a      	ldr	r2, [r7, #4]
   1228c:	601a      	str	r2, [r3, #0]
}
   1228e:	46c0      	nop			; (mov r8, r8)
   12290:	46bd      	mov	sp, r7
   12292:	b002      	add	sp, #8
   12294:	bd80      	pop	{r7, pc}
   12296:	46c0      	nop			; (mov r8, r8)
   12298:	2000030c 	.word	0x2000030c

0001229c <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
   1229c:	b590      	push	{r4, r7, lr}
   1229e:	b083      	sub	sp, #12
   122a0:	af00      	add	r7, sp, #0
   122a2:	0004      	movs	r4, r0
   122a4:	0008      	movs	r0, r1
   122a6:	0011      	movs	r1, r2
   122a8:	1dfb      	adds	r3, r7, #7
   122aa:	1c22      	adds	r2, r4, #0
   122ac:	701a      	strb	r2, [r3, #0]
   122ae:	1dbb      	adds	r3, r7, #6
   122b0:	1c02      	adds	r2, r0, #0
   122b2:	701a      	strb	r2, [r3, #0]
   122b4:	1d7b      	adds	r3, r7, #5
   122b6:	1c0a      	adds	r2, r1, #0
   122b8:	701a      	strb	r2, [r3, #0]
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
   122ba:	4b08      	ldr	r3, [pc, #32]	; (122dc <gfx_mono_framebuffer_put_byte+0x40>)
   122bc:	681a      	ldr	r2, [r3, #0]
   122be:	1dfb      	adds	r3, r7, #7
   122c0:	781b      	ldrb	r3, [r3, #0]
   122c2:	019b      	lsls	r3, r3, #6
   122c4:	0019      	movs	r1, r3
   122c6:	1dbb      	adds	r3, r7, #6
   122c8:	781b      	ldrb	r3, [r3, #0]
   122ca:	18cb      	adds	r3, r1, r3
   122cc:	18d3      	adds	r3, r2, r3
   122ce:	1d7a      	adds	r2, r7, #5
   122d0:	7812      	ldrb	r2, [r2, #0]
   122d2:	701a      	strb	r2, [r3, #0]
}
   122d4:	46c0      	nop			; (mov r8, r8)
   122d6:	46bd      	mov	sp, r7
   122d8:	b003      	add	sp, #12
   122da:	bd90      	pop	{r4, r7, pc}
   122dc:	2000030c 	.word	0x2000030c

000122e0 <gfx_mono_framebuffer_get_byte>:
 * \code
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   122e0:	b580      	push	{r7, lr}
   122e2:	b082      	sub	sp, #8
   122e4:	af00      	add	r7, sp, #0
   122e6:	0002      	movs	r2, r0
   122e8:	1dfb      	adds	r3, r7, #7
   122ea:	701a      	strb	r2, [r3, #0]
   122ec:	1dbb      	adds	r3, r7, #6
   122ee:	1c0a      	adds	r2, r1, #0
   122f0:	701a      	strb	r2, [r3, #0]
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
   122f2:	4b07      	ldr	r3, [pc, #28]	; (12310 <gfx_mono_framebuffer_get_byte+0x30>)
   122f4:	681a      	ldr	r2, [r3, #0]
   122f6:	1dfb      	adds	r3, r7, #7
   122f8:	781b      	ldrb	r3, [r3, #0]
   122fa:	019b      	lsls	r3, r3, #6
   122fc:	0019      	movs	r1, r3
   122fe:	1dbb      	adds	r3, r7, #6
   12300:	781b      	ldrb	r3, [r3, #0]
   12302:	18cb      	adds	r3, r1, r3
   12304:	18d3      	adds	r3, r2, r3
   12306:	781b      	ldrb	r3, [r3, #0]
}
   12308:	0018      	movs	r0, r3
   1230a:	46bd      	mov	sp, r7
   1230c:	b002      	add	sp, #8
   1230e:	bd80      	pop	{r7, pc}
   12310:	2000030c 	.word	0x2000030c

00012314 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
   12314:	b5b0      	push	{r4, r5, r7, lr}
   12316:	b084      	sub	sp, #16
   12318:	af00      	add	r7, sp, #0
   1231a:	0005      	movs	r5, r0
   1231c:	000c      	movs	r4, r1
   1231e:	0010      	movs	r0, r2
   12320:	0019      	movs	r1, r3
   12322:	1dfb      	adds	r3, r7, #7
   12324:	1c2a      	adds	r2, r5, #0
   12326:	701a      	strb	r2, [r3, #0]
   12328:	1dbb      	adds	r3, r7, #6
   1232a:	1c22      	adds	r2, r4, #0
   1232c:	701a      	strb	r2, [r3, #0]
   1232e:	1d7b      	adds	r3, r7, #5
   12330:	1c02      	adds	r2, r0, #0
   12332:	701a      	strb	r2, [r3, #0]
   12334:	1d3b      	adds	r3, r7, #4
   12336:	1c0a      	adds	r2, r1, #0
   12338:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
   1233a:	1dfb      	adds	r3, r7, #7
   1233c:	781a      	ldrb	r2, [r3, #0]
   1233e:	1d7b      	adds	r3, r7, #5
   12340:	781b      	ldrb	r3, [r3, #0]
   12342:	18d3      	adds	r3, r2, r3
   12344:	2b40      	cmp	r3, #64	; 0x40
   12346:	dd05      	ble.n	12354 <gfx_mono_generic_draw_horizontal_line+0x40>
		length = GFX_MONO_LCD_WIDTH - x;
   12348:	1d7b      	adds	r3, r7, #5
   1234a:	1dfa      	adds	r2, r7, #7
   1234c:	7812      	ldrb	r2, [r2, #0]
   1234e:	2140      	movs	r1, #64	; 0x40
   12350:	1a8a      	subs	r2, r1, r2
   12352:	701a      	strb	r2, [r3, #0]
	}

	page = y / 8;
   12354:	230f      	movs	r3, #15
   12356:	18fb      	adds	r3, r7, r3
   12358:	1dba      	adds	r2, r7, #6
   1235a:	7812      	ldrb	r2, [r2, #0]
   1235c:	08d2      	lsrs	r2, r2, #3
   1235e:	701a      	strb	r2, [r3, #0]
	pixelmask = (1 << (y - (page * 8)));
   12360:	1dbb      	adds	r3, r7, #6
   12362:	781a      	ldrb	r2, [r3, #0]
   12364:	230f      	movs	r3, #15
   12366:	18fb      	adds	r3, r7, r3
   12368:	781b      	ldrb	r3, [r3, #0]
   1236a:	00db      	lsls	r3, r3, #3
   1236c:	1ad3      	subs	r3, r2, r3
   1236e:	2201      	movs	r2, #1
   12370:	409a      	lsls	r2, r3
   12372:	230e      	movs	r3, #14
   12374:	18fb      	adds	r3, r7, r3
   12376:	701a      	strb	r2, [r3, #0]

	if (length == 0) {
   12378:	1d7b      	adds	r3, r7, #5
   1237a:	781b      	ldrb	r3, [r3, #0]
   1237c:	2b00      	cmp	r3, #0
   1237e:	d100      	bne.n	12382 <gfx_mono_generic_draw_horizontal_line+0x6e>
   12380:	e0a4      	b.n	124cc <gfx_mono_generic_draw_horizontal_line+0x1b8>
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
   12382:	1d3b      	adds	r3, r7, #4
   12384:	781b      	ldrb	r3, [r3, #0]
   12386:	2b01      	cmp	r3, #1
   12388:	d02f      	beq.n	123ea <gfx_mono_generic_draw_horizontal_line+0xd6>
   1238a:	2b02      	cmp	r3, #2
   1238c:	d100      	bne.n	12390 <gfx_mono_generic_draw_horizontal_line+0x7c>
   1238e:	e095      	b.n	124bc <gfx_mono_generic_draw_horizontal_line+0x1a8>
   12390:	2b00      	cmp	r3, #0
   12392:	d061      	beq.n	12458 <gfx_mono_generic_draw_horizontal_line+0x144>
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	default:
		break;
   12394:	e09b      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   12396:	1dfa      	adds	r2, r7, #7
   12398:	1d7b      	adds	r3, r7, #5
   1239a:	7812      	ldrb	r2, [r2, #0]
   1239c:	781b      	ldrb	r3, [r3, #0]
   1239e:	18d3      	adds	r3, r2, r3
   123a0:	b2da      	uxtb	r2, r3
   123a2:	230d      	movs	r3, #13
   123a4:	18fc      	adds	r4, r7, r3
   123a6:	230f      	movs	r3, #15
   123a8:	18fb      	adds	r3, r7, r3
   123aa:	781b      	ldrb	r3, [r3, #0]
   123ac:	0011      	movs	r1, r2
   123ae:	0018      	movs	r0, r3
   123b0:	4b48      	ldr	r3, [pc, #288]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   123b2:	4798      	blx	r3
   123b4:	0003      	movs	r3, r0
   123b6:	7023      	strb	r3, [r4, #0]
			temp |= pixelmask;
   123b8:	230d      	movs	r3, #13
   123ba:	18fb      	adds	r3, r7, r3
   123bc:	220d      	movs	r2, #13
   123be:	18b9      	adds	r1, r7, r2
   123c0:	220e      	movs	r2, #14
   123c2:	18ba      	adds	r2, r7, r2
   123c4:	7809      	ldrb	r1, [r1, #0]
   123c6:	7812      	ldrb	r2, [r2, #0]
   123c8:	430a      	orrs	r2, r1
   123ca:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   123cc:	1dfa      	adds	r2, r7, #7
   123ce:	1d7b      	adds	r3, r7, #5
   123d0:	7812      	ldrb	r2, [r2, #0]
   123d2:	781b      	ldrb	r3, [r3, #0]
   123d4:	18d3      	adds	r3, r2, r3
   123d6:	b2d9      	uxtb	r1, r3
   123d8:	230d      	movs	r3, #13
   123da:	18fb      	adds	r3, r7, r3
   123dc:	781a      	ldrb	r2, [r3, #0]
   123de:	230f      	movs	r3, #15
   123e0:	18fb      	adds	r3, r7, r3
   123e2:	7818      	ldrb	r0, [r3, #0]
   123e4:	2300      	movs	r3, #0
   123e6:	4c3c      	ldr	r4, [pc, #240]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   123e8:	47a0      	blx	r4
		while (length-- > 0) {
   123ea:	1d7b      	adds	r3, r7, #5
   123ec:	781b      	ldrb	r3, [r3, #0]
   123ee:	1d7a      	adds	r2, r7, #5
   123f0:	1e59      	subs	r1, r3, #1
   123f2:	7011      	strb	r1, [r2, #0]
   123f4:	2b00      	cmp	r3, #0
   123f6:	d1ce      	bne.n	12396 <gfx_mono_generic_draw_horizontal_line+0x82>
		break;
   123f8:	e069      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   123fa:	1dfa      	adds	r2, r7, #7
   123fc:	1d7b      	adds	r3, r7, #5
   123fe:	7812      	ldrb	r2, [r2, #0]
   12400:	781b      	ldrb	r3, [r3, #0]
   12402:	18d3      	adds	r3, r2, r3
   12404:	b2da      	uxtb	r2, r3
   12406:	230d      	movs	r3, #13
   12408:	18fc      	adds	r4, r7, r3
   1240a:	230f      	movs	r3, #15
   1240c:	18fb      	adds	r3, r7, r3
   1240e:	781b      	ldrb	r3, [r3, #0]
   12410:	0011      	movs	r1, r2
   12412:	0018      	movs	r0, r3
   12414:	4b2f      	ldr	r3, [pc, #188]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   12416:	4798      	blx	r3
   12418:	0003      	movs	r3, r0
   1241a:	7023      	strb	r3, [r4, #0]
			temp &= ~pixelmask;
   1241c:	230e      	movs	r3, #14
   1241e:	18fb      	adds	r3, r7, r3
   12420:	781b      	ldrb	r3, [r3, #0]
   12422:	b25b      	sxtb	r3, r3
   12424:	43db      	mvns	r3, r3
   12426:	b25b      	sxtb	r3, r3
   12428:	220d      	movs	r2, #13
   1242a:	18ba      	adds	r2, r7, r2
   1242c:	7812      	ldrb	r2, [r2, #0]
   1242e:	b252      	sxtb	r2, r2
   12430:	4013      	ands	r3, r2
   12432:	b25a      	sxtb	r2, r3
   12434:	230d      	movs	r3, #13
   12436:	18fb      	adds	r3, r7, r3
   12438:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   1243a:	1dfa      	adds	r2, r7, #7
   1243c:	1d7b      	adds	r3, r7, #5
   1243e:	7812      	ldrb	r2, [r2, #0]
   12440:	781b      	ldrb	r3, [r3, #0]
   12442:	18d3      	adds	r3, r2, r3
   12444:	b2d9      	uxtb	r1, r3
   12446:	230d      	movs	r3, #13
   12448:	18fb      	adds	r3, r7, r3
   1244a:	781a      	ldrb	r2, [r3, #0]
   1244c:	230f      	movs	r3, #15
   1244e:	18fb      	adds	r3, r7, r3
   12450:	7818      	ldrb	r0, [r3, #0]
   12452:	2300      	movs	r3, #0
   12454:	4c20      	ldr	r4, [pc, #128]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   12456:	47a0      	blx	r4
		while (length-- > 0) {
   12458:	1d7b      	adds	r3, r7, #5
   1245a:	781b      	ldrb	r3, [r3, #0]
   1245c:	1d7a      	adds	r2, r7, #5
   1245e:	1e59      	subs	r1, r3, #1
   12460:	7011      	strb	r1, [r2, #0]
   12462:	2b00      	cmp	r3, #0
   12464:	d1c9      	bne.n	123fa <gfx_mono_generic_draw_horizontal_line+0xe6>
		break;
   12466:	e032      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   12468:	1dfa      	adds	r2, r7, #7
   1246a:	1d7b      	adds	r3, r7, #5
   1246c:	7812      	ldrb	r2, [r2, #0]
   1246e:	781b      	ldrb	r3, [r3, #0]
   12470:	18d3      	adds	r3, r2, r3
   12472:	b2da      	uxtb	r2, r3
   12474:	230d      	movs	r3, #13
   12476:	18fc      	adds	r4, r7, r3
   12478:	230f      	movs	r3, #15
   1247a:	18fb      	adds	r3, r7, r3
   1247c:	781b      	ldrb	r3, [r3, #0]
   1247e:	0011      	movs	r1, r2
   12480:	0018      	movs	r0, r3
   12482:	4b14      	ldr	r3, [pc, #80]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   12484:	4798      	blx	r3
   12486:	0003      	movs	r3, r0
   12488:	7023      	strb	r3, [r4, #0]
			temp ^= pixelmask;
   1248a:	230d      	movs	r3, #13
   1248c:	18fb      	adds	r3, r7, r3
   1248e:	220d      	movs	r2, #13
   12490:	18b9      	adds	r1, r7, r2
   12492:	220e      	movs	r2, #14
   12494:	18ba      	adds	r2, r7, r2
   12496:	7809      	ldrb	r1, [r1, #0]
   12498:	7812      	ldrb	r2, [r2, #0]
   1249a:	404a      	eors	r2, r1
   1249c:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   1249e:	1dfa      	adds	r2, r7, #7
   124a0:	1d7b      	adds	r3, r7, #5
   124a2:	7812      	ldrb	r2, [r2, #0]
   124a4:	781b      	ldrb	r3, [r3, #0]
   124a6:	18d3      	adds	r3, r2, r3
   124a8:	b2d9      	uxtb	r1, r3
   124aa:	230d      	movs	r3, #13
   124ac:	18fb      	adds	r3, r7, r3
   124ae:	781a      	ldrb	r2, [r3, #0]
   124b0:	230f      	movs	r3, #15
   124b2:	18fb      	adds	r3, r7, r3
   124b4:	7818      	ldrb	r0, [r3, #0]
   124b6:	2300      	movs	r3, #0
   124b8:	4c07      	ldr	r4, [pc, #28]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   124ba:	47a0      	blx	r4
		while (length-- > 0) {
   124bc:	1d7b      	adds	r3, r7, #5
   124be:	781b      	ldrb	r3, [r3, #0]
   124c0:	1d7a      	adds	r2, r7, #5
   124c2:	1e59      	subs	r1, r3, #1
   124c4:	7011      	strb	r1, [r2, #0]
   124c6:	2b00      	cmp	r3, #0
   124c8:	d1ce      	bne.n	12468 <gfx_mono_generic_draw_horizontal_line+0x154>
		break;
   124ca:	e000      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
		return;
   124cc:	46c0      	nop			; (mov r8, r8)
	}
}
   124ce:	46bd      	mov	sp, r7
   124d0:	b004      	add	sp, #16
   124d2:	bdb0      	pop	{r4, r5, r7, pc}
   124d4:	00012a8d 	.word	0x00012a8d
   124d8:	000129ed 	.word	0x000129ed

000124dc <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
   124dc:	b5b0      	push	{r4, r5, r7, lr}
   124de:	b082      	sub	sp, #8
   124e0:	af00      	add	r7, sp, #0
   124e2:	0005      	movs	r5, r0
   124e4:	000c      	movs	r4, r1
   124e6:	0010      	movs	r0, r2
   124e8:	0019      	movs	r1, r3
   124ea:	1dfb      	adds	r3, r7, #7
   124ec:	1c2a      	adds	r2, r5, #0
   124ee:	701a      	strb	r2, [r3, #0]
   124f0:	1dbb      	adds	r3, r7, #6
   124f2:	1c22      	adds	r2, r4, #0
   124f4:	701a      	strb	r2, [r3, #0]
   124f6:	1d7b      	adds	r3, r7, #5
   124f8:	1c02      	adds	r2, r0, #0
   124fa:	701a      	strb	r2, [r3, #0]
   124fc:	1d3b      	adds	r3, r7, #4
   124fe:	1c0a      	adds	r2, r1, #0
   12500:	701a      	strb	r2, [r3, #0]
	if (height == 0) {
   12502:	1d3b      	adds	r3, r7, #4
   12504:	781b      	ldrb	r3, [r3, #0]
   12506:	2b00      	cmp	r3, #0
   12508:	d018      	beq.n	1253c <gfx_mono_generic_draw_filled_rect+0x60>
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
   1250a:	e00f      	b.n	1252c <gfx_mono_generic_draw_filled_rect+0x50>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
   1250c:	1dba      	adds	r2, r7, #6
   1250e:	1d3b      	adds	r3, r7, #4
   12510:	7812      	ldrb	r2, [r2, #0]
   12512:	781b      	ldrb	r3, [r3, #0]
   12514:	18d3      	adds	r3, r2, r3
   12516:	b2d9      	uxtb	r1, r3
   12518:	2318      	movs	r3, #24
   1251a:	18fb      	adds	r3, r7, r3
   1251c:	781c      	ldrb	r4, [r3, #0]
   1251e:	1d7b      	adds	r3, r7, #5
   12520:	781a      	ldrb	r2, [r3, #0]
   12522:	1dfb      	adds	r3, r7, #7
   12524:	7818      	ldrb	r0, [r3, #0]
   12526:	0023      	movs	r3, r4
   12528:	4c06      	ldr	r4, [pc, #24]	; (12544 <gfx_mono_generic_draw_filled_rect+0x68>)
   1252a:	47a0      	blx	r4
	while (height-- > 0) {
   1252c:	1d3b      	adds	r3, r7, #4
   1252e:	781b      	ldrb	r3, [r3, #0]
   12530:	1d3a      	adds	r2, r7, #4
   12532:	1e59      	subs	r1, r3, #1
   12534:	7011      	strb	r1, [r2, #0]
   12536:	2b00      	cmp	r3, #0
   12538:	d1e8      	bne.n	1250c <gfx_mono_generic_draw_filled_rect+0x30>
   1253a:	e000      	b.n	1253e <gfx_mono_generic_draw_filled_rect+0x62>
		return;
   1253c:	46c0      	nop			; (mov r8, r8)
	}
}
   1253e:	46bd      	mov	sp, r7
   12540:	b002      	add	sp, #8
   12542:	bdb0      	pop	{r4, r5, r7, pc}
   12544:	00012315 	.word	0x00012315

00012548 <gfx_mono_draw_char_progmem>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
static void gfx_mono_draw_char_progmem(const char ch, const gfx_coord_t x,
		const gfx_coord_t y, const struct font *font)
{
   12548:	b590      	push	{r4, r7, lr}
   1254a:	b087      	sub	sp, #28
   1254c:	af00      	add	r7, sp, #0
   1254e:	0004      	movs	r4, r0
   12550:	0008      	movs	r0, r1
   12552:	0011      	movs	r1, r2
   12554:	603b      	str	r3, [r7, #0]
   12556:	1dfb      	adds	r3, r7, #7
   12558:	1c22      	adds	r2, r4, #0
   1255a:	701a      	strb	r2, [r3, #0]
   1255c:	1dbb      	adds	r3, r7, #6
   1255e:	1c02      	adds	r2, r0, #0
   12560:	701a      	strb	r2, [r3, #0]
   12562:	1d7b      	adds	r3, r7, #5
   12564:	1c0a      	adds	r2, r1, #0
   12566:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	/* Sanity check on parameters, assert if font is NULL. */
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
   12568:	2310      	movs	r3, #16
   1256a:	18fb      	adds	r3, r7, r3
   1256c:	1dba      	adds	r2, r7, #6
   1256e:	7812      	ldrb	r2, [r2, #0]
   12570:	701a      	strb	r2, [r3, #0]
	gfx_coord_t inc_y = y;
   12572:	230f      	movs	r3, #15
   12574:	18fb      	adds	r3, r7, r3
   12576:	1d7a      	adds	r2, r7, #5
   12578:	7812      	ldrb	r2, [r2, #0]
   1257a:	701a      	strb	r2, [r3, #0]

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
   1257c:	683b      	ldr	r3, [r7, #0]
   1257e:	7a1a      	ldrb	r2, [r3, #8]
   12580:	2313      	movs	r3, #19
   12582:	18fb      	adds	r3, r7, r3
   12584:	08d2      	lsrs	r2, r2, #3
   12586:	701a      	strb	r2, [r3, #0]
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
   12588:	683b      	ldr	r3, [r7, #0]
   1258a:	7a1b      	ldrb	r3, [r3, #8]
   1258c:	2207      	movs	r2, #7
   1258e:	4013      	ands	r3, r2
   12590:	b2db      	uxtb	r3, r3
   12592:	2b00      	cmp	r3, #0
   12594:	d006      	beq.n	125a4 <gfx_mono_draw_char_progmem+0x5c>
		char_row_size++;
   12596:	2313      	movs	r3, #19
   12598:	18fb      	adds	r3, r7, r3
   1259a:	781a      	ldrb	r2, [r3, #0]
   1259c:	2313      	movs	r3, #19
   1259e:	18fb      	adds	r3, r7, r3
   125a0:	3201      	adds	r2, #1
   125a2:	701a      	strb	r2, [r3, #0]
	}

	glyph_data_offset = char_row_size * font->height *
   125a4:	2313      	movs	r3, #19
   125a6:	18fb      	adds	r3, r7, r3
   125a8:	781b      	ldrb	r3, [r3, #0]
   125aa:	b29b      	uxth	r3, r3
   125ac:	683a      	ldr	r2, [r7, #0]
   125ae:	7a52      	ldrb	r2, [r2, #9]
   125b0:	b292      	uxth	r2, r2
   125b2:	4353      	muls	r3, r2
   125b4:	b29a      	uxth	r2, r3
			((uint8_t)ch - font->first_char);
   125b6:	1dfb      	adds	r3, r7, #7
   125b8:	781b      	ldrb	r3, [r3, #0]
   125ba:	6839      	ldr	r1, [r7, #0]
   125bc:	7a89      	ldrb	r1, [r1, #10]
   125be:	1a5b      	subs	r3, r3, r1
	glyph_data_offset = char_row_size * font->height *
   125c0:	b299      	uxth	r1, r3
   125c2:	230c      	movs	r3, #12
   125c4:	18fb      	adds	r3, r7, r3
   125c6:	434a      	muls	r2, r1
   125c8:	801a      	strh	r2, [r3, #0]
	glyph_data = font->data.progmem + glyph_data_offset;
   125ca:	683b      	ldr	r3, [r7, #0]
   125cc:	685a      	ldr	r2, [r3, #4]
   125ce:	230c      	movs	r3, #12
   125d0:	18fb      	adds	r3, r7, r3
   125d2:	881b      	ldrh	r3, [r3, #0]
   125d4:	18d3      	adds	r3, r2, r3
   125d6:	617b      	str	r3, [r7, #20]
	rows_left = font->height;
   125d8:	2312      	movs	r3, #18
   125da:	18fb      	adds	r3, r7, r3
   125dc:	683a      	ldr	r2, [r7, #0]
   125de:	7a52      	ldrb	r2, [r2, #9]
   125e0:	701a      	strb	r2, [r3, #0]

	do {
		uint8_t glyph_byte = 0;
   125e2:	230e      	movs	r3, #14
   125e4:	18fb      	adds	r3, r7, r3
   125e6:	2200      	movs	r2, #0
   125e8:	701a      	strb	r2, [r3, #0]
		uint8_t pixelsToDraw = font->width;
   125ea:	230b      	movs	r3, #11
   125ec:	18fb      	adds	r3, r7, r3
   125ee:	683a      	ldr	r2, [r7, #0]
   125f0:	7a12      	ldrb	r2, [r2, #8]
   125f2:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < pixelsToDraw; i++) {
   125f4:	2311      	movs	r3, #17
   125f6:	18fb      	adds	r3, r7, r3
   125f8:	2200      	movs	r2, #0
   125fa:	701a      	strb	r2, [r3, #0]
   125fc:	e034      	b.n	12668 <gfx_mono_draw_char_progmem+0x120>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
   125fe:	2311      	movs	r3, #17
   12600:	18fb      	adds	r3, r7, r3
   12602:	781b      	ldrb	r3, [r3, #0]
   12604:	2207      	movs	r2, #7
   12606:	4013      	ands	r3, r2
   12608:	b2db      	uxtb	r3, r3
   1260a:	2b00      	cmp	r3, #0
   1260c:	d107      	bne.n	1261e <gfx_mono_draw_char_progmem+0xd6>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
   1260e:	230e      	movs	r3, #14
   12610:	18fb      	adds	r3, r7, r3
   12612:	697a      	ldr	r2, [r7, #20]
   12614:	7812      	ldrb	r2, [r2, #0]
   12616:	701a      	strb	r2, [r3, #0]
				glyph_data++;
   12618:	697b      	ldr	r3, [r7, #20]
   1261a:	3301      	adds	r3, #1
   1261c:	617b      	str	r3, [r7, #20]
			}

			if ((glyph_byte & 0x80)) {
   1261e:	230e      	movs	r3, #14
   12620:	18fb      	adds	r3, r7, r3
   12622:	781b      	ldrb	r3, [r3, #0]
   12624:	b25b      	sxtb	r3, r3
   12626:	2b00      	cmp	r3, #0
   12628:	da09      	bge.n	1263e <gfx_mono_draw_char_progmem+0xf6>
				gfx_mono_draw_pixel(inc_x, inc_y,
   1262a:	230f      	movs	r3, #15
   1262c:	18fb      	adds	r3, r7, r3
   1262e:	7819      	ldrb	r1, [r3, #0]
   12630:	2310      	movs	r3, #16
   12632:	18fb      	adds	r3, r7, r3
   12634:	781b      	ldrb	r3, [r3, #0]
   12636:	2201      	movs	r2, #1
   12638:	0018      	movs	r0, r3
   1263a:	4b1d      	ldr	r3, [pc, #116]	; (126b0 <gfx_mono_draw_char_progmem+0x168>)
   1263c:	4798      	blx	r3
						GFX_PIXEL_SET);
			}

			inc_x += 1;
   1263e:	2310      	movs	r3, #16
   12640:	18fb      	adds	r3, r7, r3
   12642:	2210      	movs	r2, #16
   12644:	18ba      	adds	r2, r7, r2
   12646:	7812      	ldrb	r2, [r2, #0]
   12648:	3201      	adds	r2, #1
   1264a:	701a      	strb	r2, [r3, #0]
			glyph_byte <<= 1;
   1264c:	230e      	movs	r3, #14
   1264e:	18fa      	adds	r2, r7, r3
   12650:	230e      	movs	r3, #14
   12652:	18fb      	adds	r3, r7, r3
   12654:	781b      	ldrb	r3, [r3, #0]
   12656:	18db      	adds	r3, r3, r3
   12658:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < pixelsToDraw; i++) {
   1265a:	2311      	movs	r3, #17
   1265c:	18fb      	adds	r3, r7, r3
   1265e:	781a      	ldrb	r2, [r3, #0]
   12660:	2311      	movs	r3, #17
   12662:	18fb      	adds	r3, r7, r3
   12664:	3201      	adds	r2, #1
   12666:	701a      	strb	r2, [r3, #0]
   12668:	2311      	movs	r3, #17
   1266a:	18fa      	adds	r2, r7, r3
   1266c:	230b      	movs	r3, #11
   1266e:	18fb      	adds	r3, r7, r3
   12670:	7812      	ldrb	r2, [r2, #0]
   12672:	781b      	ldrb	r3, [r3, #0]
   12674:	429a      	cmp	r2, r3
   12676:	d3c2      	bcc.n	125fe <gfx_mono_draw_char_progmem+0xb6>
		}

		inc_y += 1;
   12678:	230f      	movs	r3, #15
   1267a:	18fb      	adds	r3, r7, r3
   1267c:	220f      	movs	r2, #15
   1267e:	18ba      	adds	r2, r7, r2
   12680:	7812      	ldrb	r2, [r2, #0]
   12682:	3201      	adds	r2, #1
   12684:	701a      	strb	r2, [r3, #0]
		inc_x = x;
   12686:	2310      	movs	r3, #16
   12688:	18fb      	adds	r3, r7, r3
   1268a:	1dba      	adds	r2, r7, #6
   1268c:	7812      	ldrb	r2, [r2, #0]
   1268e:	701a      	strb	r2, [r3, #0]
		rows_left--;
   12690:	2312      	movs	r3, #18
   12692:	18fb      	adds	r3, r7, r3
   12694:	781a      	ldrb	r2, [r3, #0]
   12696:	2312      	movs	r3, #18
   12698:	18fb      	adds	r3, r7, r3
   1269a:	3a01      	subs	r2, #1
   1269c:	701a      	strb	r2, [r3, #0]
	} while (rows_left > 0);
   1269e:	2312      	movs	r3, #18
   126a0:	18fb      	adds	r3, r7, r3
   126a2:	781b      	ldrb	r3, [r3, #0]
   126a4:	2b00      	cmp	r3, #0
   126a6:	d19c      	bne.n	125e2 <gfx_mono_draw_char_progmem+0x9a>
}
   126a8:	46c0      	nop			; (mov r8, r8)
   126aa:	46bd      	mov	sp, r7
   126ac:	b007      	add	sp, #28
   126ae:	bd90      	pop	{r4, r7, pc}
   126b0:	000128f9 	.word	0x000128f9

000126b4 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
   126b4:	b590      	push	{r4, r7, lr}
   126b6:	b085      	sub	sp, #20
   126b8:	af02      	add	r7, sp, #8
   126ba:	0004      	movs	r4, r0
   126bc:	0008      	movs	r0, r1
   126be:	0011      	movs	r1, r2
   126c0:	603b      	str	r3, [r7, #0]
   126c2:	1dfb      	adds	r3, r7, #7
   126c4:	1c22      	adds	r2, r4, #0
   126c6:	701a      	strb	r2, [r3, #0]
   126c8:	1dbb      	adds	r3, r7, #6
   126ca:	1c02      	adds	r2, r0, #0
   126cc:	701a      	strb	r2, [r3, #0]
   126ce:	1d7b      	adds	r3, r7, #5
   126d0:	1c0a      	adds	r2, r1, #0
   126d2:	701a      	strb	r2, [r3, #0]
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
   126d4:	683b      	ldr	r3, [r7, #0]
   126d6:	7a1a      	ldrb	r2, [r3, #8]
   126d8:	683b      	ldr	r3, [r7, #0]
   126da:	7a5c      	ldrb	r4, [r3, #9]
   126dc:	1d7b      	adds	r3, r7, #5
   126de:	7819      	ldrb	r1, [r3, #0]
   126e0:	1dbb      	adds	r3, r7, #6
   126e2:	7818      	ldrb	r0, [r3, #0]
   126e4:	2300      	movs	r3, #0
   126e6:	9300      	str	r3, [sp, #0]
   126e8:	0023      	movs	r3, r4
   126ea:	4c0b      	ldr	r4, [pc, #44]	; (12718 <gfx_mono_draw_char+0x64>)
   126ec:	47a0      	blx	r4
			GFX_PIXEL_CLR);

	switch (font->type) {
   126ee:	683b      	ldr	r3, [r7, #0]
   126f0:	781b      	ldrb	r3, [r3, #0]
   126f2:	2b00      	cmp	r3, #0
   126f4:	d000      	beq.n	126f8 <gfx_mono_draw_char+0x44>

#endif
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
   126f6:	e00a      	b.n	1270e <gfx_mono_draw_char+0x5a>
		gfx_mono_draw_char_progmem(c, x, y, font);
   126f8:	683c      	ldr	r4, [r7, #0]
   126fa:	1d7b      	adds	r3, r7, #5
   126fc:	781a      	ldrb	r2, [r3, #0]
   126fe:	1dbb      	adds	r3, r7, #6
   12700:	7819      	ldrb	r1, [r3, #0]
   12702:	1dfb      	adds	r3, r7, #7
   12704:	7818      	ldrb	r0, [r3, #0]
   12706:	0023      	movs	r3, r4
   12708:	4c04      	ldr	r4, [pc, #16]	; (1271c <gfx_mono_draw_char+0x68>)
   1270a:	47a0      	blx	r4
		break;
   1270c:	46c0      	nop			; (mov r8, r8)
	}
}
   1270e:	46c0      	nop			; (mov r8, r8)
   12710:	46bd      	mov	sp, r7
   12712:	b003      	add	sp, #12
   12714:	bd90      	pop	{r4, r7, pc}
   12716:	46c0      	nop			; (mov r8, r8)
   12718:	000124dd 	.word	0x000124dd
   1271c:	00012549 	.word	0x00012549

00012720 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
   12720:	b590      	push	{r4, r7, lr}
   12722:	b087      	sub	sp, #28
   12724:	af00      	add	r7, sp, #0
   12726:	60f8      	str	r0, [r7, #12]
   12728:	0008      	movs	r0, r1
   1272a:	0011      	movs	r1, r2
   1272c:	607b      	str	r3, [r7, #4]
   1272e:	230b      	movs	r3, #11
   12730:	18fb      	adds	r3, r7, r3
   12732:	1c02      	adds	r2, r0, #0
   12734:	701a      	strb	r2, [r3, #0]
   12736:	230a      	movs	r3, #10
   12738:	18fb      	adds	r3, r7, r3
   1273a:	1c0a      	adds	r2, r1, #0
   1273c:	701a      	strb	r2, [r3, #0]
	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;
   1273e:	2317      	movs	r3, #23
   12740:	18fb      	adds	r3, r7, r3
   12742:	220b      	movs	r2, #11
   12744:	18ba      	adds	r2, r7, r2
   12746:	7812      	ldrb	r2, [r2, #0]
   12748:	701a      	strb	r2, [r3, #0]
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
   1274a:	68fb      	ldr	r3, [r7, #12]
   1274c:	781b      	ldrb	r3, [r3, #0]
   1274e:	2b0a      	cmp	r3, #10
   12750:	d111      	bne.n	12776 <gfx_mono_draw_string+0x56>
			x = start_of_string_position_x;
   12752:	230b      	movs	r3, #11
   12754:	18fb      	adds	r3, r7, r3
   12756:	2217      	movs	r2, #23
   12758:	18ba      	adds	r2, r7, r2
   1275a:	7812      	ldrb	r2, [r2, #0]
   1275c:	701a      	strb	r2, [r3, #0]
			y += font->height + 1;
   1275e:	687b      	ldr	r3, [r7, #4]
   12760:	7a5a      	ldrb	r2, [r3, #9]
   12762:	230a      	movs	r3, #10
   12764:	18fb      	adds	r3, r7, r3
   12766:	781b      	ldrb	r3, [r3, #0]
   12768:	18d3      	adds	r3, r2, r3
   1276a:	b2da      	uxtb	r2, r3
   1276c:	230a      	movs	r3, #10
   1276e:	18fb      	adds	r3, r7, r3
   12770:	3201      	adds	r2, #1
   12772:	701a      	strb	r2, [r3, #0]
   12774:	e018      	b.n	127a8 <gfx_mono_draw_string+0x88>
		} else if (*str == '\r') {
   12776:	68fb      	ldr	r3, [r7, #12]
   12778:	781b      	ldrb	r3, [r3, #0]
   1277a:	2b0d      	cmp	r3, #13
   1277c:	d014      	beq.n	127a8 <gfx_mono_draw_string+0x88>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
   1277e:	68fb      	ldr	r3, [r7, #12]
   12780:	7818      	ldrb	r0, [r3, #0]
   12782:	687c      	ldr	r4, [r7, #4]
   12784:	230a      	movs	r3, #10
   12786:	18fb      	adds	r3, r7, r3
   12788:	781a      	ldrb	r2, [r3, #0]
   1278a:	230b      	movs	r3, #11
   1278c:	18fb      	adds	r3, r7, r3
   1278e:	7819      	ldrb	r1, [r3, #0]
   12790:	0023      	movs	r3, r4
   12792:	4c0b      	ldr	r4, [pc, #44]	; (127c0 <gfx_mono_draw_string+0xa0>)
   12794:	47a0      	blx	r4
			x += font->width;
   12796:	687b      	ldr	r3, [r7, #4]
   12798:	7a19      	ldrb	r1, [r3, #8]
   1279a:	230b      	movs	r3, #11
   1279c:	18fb      	adds	r3, r7, r3
   1279e:	220b      	movs	r2, #11
   127a0:	18ba      	adds	r2, r7, r2
   127a2:	7812      	ldrb	r2, [r2, #0]
   127a4:	188a      	adds	r2, r1, r2
   127a6:	701a      	strb	r2, [r3, #0]
		}
	} while (*(++str));
   127a8:	68fb      	ldr	r3, [r7, #12]
   127aa:	3301      	adds	r3, #1
   127ac:	60fb      	str	r3, [r7, #12]
   127ae:	68fb      	ldr	r3, [r7, #12]
   127b0:	781b      	ldrb	r3, [r3, #0]
   127b2:	2b00      	cmp	r3, #0
   127b4:	d1c9      	bne.n	1274a <gfx_mono_draw_string+0x2a>
}
   127b6:	46c0      	nop			; (mov r8, r8)
   127b8:	46bd      	mov	sp, r7
   127ba:	b007      	add	sp, #28
   127bc:	bd90      	pop	{r4, r7, pc}
   127be:	46c0      	nop			; (mov r8, r8)
   127c0:	000126b5 	.word	0x000126b5

000127c4 <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
   127c4:	b580      	push	{r7, lr}
   127c6:	b082      	sub	sp, #8
   127c8:	af00      	add	r7, sp, #0
   127ca:	0002      	movs	r2, r0
   127cc:	1dfb      	adds	r3, r7, #7
   127ce:	701a      	strb	r2, [r3, #0]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
   127d0:	1dfb      	adds	r3, r7, #7
   127d2:	1dfa      	adds	r2, r7, #7
   127d4:	7812      	ldrb	r2, [r2, #0]
   127d6:	210f      	movs	r1, #15
   127d8:	400a      	ands	r2, r1
   127da:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
   127dc:	1dfb      	adds	r3, r7, #7
   127de:	781b      	ldrb	r3, [r3, #0]
   127e0:	2250      	movs	r2, #80	; 0x50
   127e2:	4252      	negs	r2, r2
   127e4:	4313      	orrs	r3, r2
   127e6:	b2db      	uxtb	r3, r3
   127e8:	0018      	movs	r0, r3
   127ea:	4b03      	ldr	r3, [pc, #12]	; (127f8 <ssd1306_set_page_address+0x34>)
   127ec:	4798      	blx	r3
}
   127ee:	46c0      	nop			; (mov r8, r8)
   127f0:	46bd      	mov	sp, r7
   127f2:	b002      	add	sp, #8
   127f4:	bd80      	pop	{r7, pc}
   127f6:	46c0      	nop			; (mov r8, r8)
   127f8:	000121d1 	.word	0x000121d1

000127fc <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
   127fc:	b580      	push	{r7, lr}
   127fe:	b082      	sub	sp, #8
   12800:	af00      	add	r7, sp, #0
   12802:	0002      	movs	r2, r0
   12804:	1dfb      	adds	r3, r7, #7
   12806:	701a      	strb	r2, [r3, #0]
	// Make sure the address is 7 bits
	address &= 0x7F;
   12808:	1dfb      	adds	r3, r7, #7
   1280a:	1dfa      	adds	r2, r7, #7
   1280c:	7812      	ldrb	r2, [r2, #0]
   1280e:	217f      	movs	r1, #127	; 0x7f
   12810:	400a      	ands	r2, r1
   12812:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4)+ 0x02); //ESE516 change
   12814:	1dfb      	adds	r3, r7, #7
   12816:	781b      	ldrb	r3, [r3, #0]
   12818:	091b      	lsrs	r3, r3, #4
   1281a:	b2db      	uxtb	r3, r3
   1281c:	2210      	movs	r2, #16
   1281e:	4313      	orrs	r3, r2
   12820:	b2db      	uxtb	r3, r3
   12822:	3302      	adds	r3, #2
   12824:	b2db      	uxtb	r3, r3
   12826:	0018      	movs	r0, r3
   12828:	4b06      	ldr	r3, [pc, #24]	; (12844 <ssd1306_set_column_address+0x48>)
   1282a:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
   1282c:	1dfb      	adds	r3, r7, #7
   1282e:	781b      	ldrb	r3, [r3, #0]
   12830:	220f      	movs	r2, #15
   12832:	4013      	ands	r3, r2
   12834:	b2db      	uxtb	r3, r3
   12836:	0018      	movs	r0, r3
   12838:	4b02      	ldr	r3, [pc, #8]	; (12844 <ssd1306_set_column_address+0x48>)
   1283a:	4798      	blx	r3
}
   1283c:	46c0      	nop			; (mov r8, r8)
   1283e:	46bd      	mov	sp, r7
   12840:	b002      	add	sp, #8
   12842:	bd80      	pop	{r7, pc}
   12844:	000121d1 	.word	0x000121d1

00012848 <ssd1306_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the OLED.
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
   12848:	b580      	push	{r7, lr}
   1284a:	b082      	sub	sp, #8
   1284c:	af00      	add	r7, sp, #0
   1284e:	0002      	movs	r2, r0
   12850:	1dfb      	adds	r3, r7, #7
   12852:	701a      	strb	r2, [r3, #0]
	// Make sure address is 6 bits
	address &= 0x3F;
   12854:	1dfb      	adds	r3, r7, #7
   12856:	1dfa      	adds	r2, r7, #7
   12858:	7812      	ldrb	r2, [r2, #0]
   1285a:	213f      	movs	r1, #63	; 0x3f
   1285c:	400a      	ands	r2, r1
   1285e:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
   12860:	1dfb      	adds	r3, r7, #7
   12862:	781b      	ldrb	r3, [r3, #0]
   12864:	2240      	movs	r2, #64	; 0x40
   12866:	4313      	orrs	r3, r2
   12868:	b2db      	uxtb	r3, r3
   1286a:	0018      	movs	r0, r3
   1286c:	4b02      	ldr	r3, [pc, #8]	; (12878 <ssd1306_set_display_start_line_address+0x30>)
   1286e:	4798      	blx	r3
}
   12870:	46c0      	nop			; (mov r8, r8)
   12872:	46bd      	mov	sp, r7
   12874:	b002      	add	sp, #8
   12876:	bd80      	pop	{r7, pc}
   12878:	000121d1 	.word	0x000121d1

0001287c <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
   1287c:	b590      	push	{r4, r7, lr}
   1287e:	b083      	sub	sp, #12
   12880:	af00      	add	r7, sp, #0
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
   12882:	4b18      	ldr	r3, [pc, #96]	; (128e4 <gfx_mono_ssd1306_init+0x68>)
   12884:	0018      	movs	r0, r3
   12886:	4b18      	ldr	r3, [pc, #96]	; (128e8 <gfx_mono_ssd1306_init+0x6c>)
   12888:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
   1288a:	4b18      	ldr	r3, [pc, #96]	; (128ec <gfx_mono_ssd1306_init+0x70>)
   1288c:	4798      	blx	r3

	/* Set display to output data from line 0 */
	ssd1306_set_display_start_line_address(0);
   1288e:	2000      	movs	r0, #0
   12890:	4b17      	ldr	r3, [pc, #92]	; (128f0 <gfx_mono_ssd1306_init+0x74>)
   12892:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   12894:	1dfb      	adds	r3, r7, #7
   12896:	2200      	movs	r2, #0
   12898:	701a      	strb	r2, [r3, #0]
   1289a:	e01a      	b.n	128d2 <gfx_mono_ssd1306_init+0x56>
		for (column = 0; column < 128; column++) {
   1289c:	1dbb      	adds	r3, r7, #6
   1289e:	2200      	movs	r2, #0
   128a0:	701a      	strb	r2, [r3, #0]
   128a2:	e00c      	b.n	128be <gfx_mono_ssd1306_init+0x42>
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
   128a4:	1dbb      	adds	r3, r7, #6
   128a6:	7819      	ldrb	r1, [r3, #0]
   128a8:	1dfb      	adds	r3, r7, #7
   128aa:	7818      	ldrb	r0, [r3, #0]
   128ac:	2301      	movs	r3, #1
   128ae:	2200      	movs	r2, #0
   128b0:	4c10      	ldr	r4, [pc, #64]	; (128f4 <gfx_mono_ssd1306_init+0x78>)
   128b2:	47a0      	blx	r4
		for (column = 0; column < 128; column++) {
   128b4:	1dbb      	adds	r3, r7, #6
   128b6:	781a      	ldrb	r2, [r3, #0]
   128b8:	1dbb      	adds	r3, r7, #6
   128ba:	3201      	adds	r2, #1
   128bc:	701a      	strb	r2, [r3, #0]
   128be:	1dbb      	adds	r3, r7, #6
   128c0:	781b      	ldrb	r3, [r3, #0]
   128c2:	b25b      	sxtb	r3, r3
   128c4:	2b00      	cmp	r3, #0
   128c6:	daed      	bge.n	128a4 <gfx_mono_ssd1306_init+0x28>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   128c8:	1dfb      	adds	r3, r7, #7
   128ca:	781a      	ldrb	r2, [r3, #0]
   128cc:	1dfb      	adds	r3, r7, #7
   128ce:	3201      	adds	r2, #1
   128d0:	701a      	strb	r2, [r3, #0]
   128d2:	1dfb      	adds	r3, r7, #7
   128d4:	781b      	ldrb	r3, [r3, #0]
   128d6:	2b05      	cmp	r3, #5
   128d8:	d9e0      	bls.n	1289c <gfx_mono_ssd1306_init+0x20>
		}
	}
}
   128da:	46c0      	nop			; (mov r8, r8)
   128dc:	46bd      	mov	sp, r7
   128de:	b003      	add	sp, #12
   128e0:	bd90      	pop	{r4, r7, pc}
   128e2:	46c0      	nop			; (mov r8, r8)
   128e4:	20000310 	.word	0x20000310
   128e8:	00012281 	.word	0x00012281
   128ec:	00012129 	.word	0x00012129
   128f0:	00012849 	.word	0x00012849
   128f4:	000129ed 	.word	0x000129ed

000128f8 <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
   128f8:	b590      	push	{r4, r7, lr}
   128fa:	b085      	sub	sp, #20
   128fc:	af00      	add	r7, sp, #0
   128fe:	0004      	movs	r4, r0
   12900:	0008      	movs	r0, r1
   12902:	0011      	movs	r1, r2
   12904:	1dfb      	adds	r3, r7, #7
   12906:	1c22      	adds	r2, r4, #0
   12908:	701a      	strb	r2, [r3, #0]
   1290a:	1dbb      	adds	r3, r7, #6
   1290c:	1c02      	adds	r2, r0, #0
   1290e:	701a      	strb	r2, [r3, #0]
   12910:	1d7b      	adds	r3, r7, #5
   12912:	1c0a      	adds	r2, r1, #0
   12914:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
   12916:	1dfb      	adds	r3, r7, #7
   12918:	781b      	ldrb	r3, [r3, #0]
   1291a:	2b3f      	cmp	r3, #63	; 0x3f
   1291c:	d85d      	bhi.n	129da <gfx_mono_ssd1306_draw_pixel+0xe2>
   1291e:	1dbb      	adds	r3, r7, #6
   12920:	781b      	ldrb	r3, [r3, #0]
   12922:	2b2f      	cmp	r3, #47	; 0x2f
   12924:	d859      	bhi.n	129da <gfx_mono_ssd1306_draw_pixel+0xe2>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
   12926:	230e      	movs	r3, #14
   12928:	18fb      	adds	r3, r7, r3
   1292a:	1dba      	adds	r2, r7, #6
   1292c:	7812      	ldrb	r2, [r2, #0]
   1292e:	08d2      	lsrs	r2, r2, #3
   12930:	701a      	strb	r2, [r3, #0]
	pixel_mask = (1 << (y - (page * 8)));
   12932:	1dbb      	adds	r3, r7, #6
   12934:	781a      	ldrb	r2, [r3, #0]
   12936:	230e      	movs	r3, #14
   12938:	18fb      	adds	r3, r7, r3
   1293a:	781b      	ldrb	r3, [r3, #0]
   1293c:	00db      	lsls	r3, r3, #3
   1293e:	1ad3      	subs	r3, r2, r3
   12940:	2201      	movs	r2, #1
   12942:	409a      	lsls	r2, r3
   12944:	230d      	movs	r3, #13
   12946:	18fb      	adds	r3, r7, r3
   12948:	701a      	strb	r2, [r3, #0]
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
   1294a:	230f      	movs	r3, #15
   1294c:	18fc      	adds	r4, r7, r3
   1294e:	1dfb      	adds	r3, r7, #7
   12950:	781a      	ldrb	r2, [r3, #0]
   12952:	230e      	movs	r3, #14
   12954:	18fb      	adds	r3, r7, r3
   12956:	781b      	ldrb	r3, [r3, #0]
   12958:	0011      	movs	r1, r2
   1295a:	0018      	movs	r0, r3
   1295c:	4b21      	ldr	r3, [pc, #132]	; (129e4 <gfx_mono_ssd1306_draw_pixel+0xec>)
   1295e:	4798      	blx	r3
   12960:	0003      	movs	r3, r0
   12962:	7023      	strb	r3, [r4, #0]

	switch (color) {
   12964:	1d7b      	adds	r3, r7, #5
   12966:	781b      	ldrb	r3, [r3, #0]
   12968:	2b01      	cmp	r3, #1
   1296a:	d004      	beq.n	12976 <gfx_mono_ssd1306_draw_pixel+0x7e>
   1296c:	2b02      	cmp	r3, #2
   1296e:	d01d      	beq.n	129ac <gfx_mono_ssd1306_draw_pixel+0xb4>
   12970:	2b00      	cmp	r3, #0
   12972:	d00b      	beq.n	1298c <gfx_mono_ssd1306_draw_pixel+0x94>
	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
		break;

	default:
		break;
   12974:	e025      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value |= pixel_mask;
   12976:	230f      	movs	r3, #15
   12978:	18fb      	adds	r3, r7, r3
   1297a:	220f      	movs	r2, #15
   1297c:	18b9      	adds	r1, r7, r2
   1297e:	220d      	movs	r2, #13
   12980:	18ba      	adds	r2, r7, r2
   12982:	7809      	ldrb	r1, [r1, #0]
   12984:	7812      	ldrb	r2, [r2, #0]
   12986:	430a      	orrs	r2, r1
   12988:	701a      	strb	r2, [r3, #0]
		break;
   1298a:	e01a      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value &= ~pixel_mask;
   1298c:	230d      	movs	r3, #13
   1298e:	18fb      	adds	r3, r7, r3
   12990:	781b      	ldrb	r3, [r3, #0]
   12992:	b25b      	sxtb	r3, r3
   12994:	43db      	mvns	r3, r3
   12996:	b25b      	sxtb	r3, r3
   12998:	220f      	movs	r2, #15
   1299a:	18ba      	adds	r2, r7, r2
   1299c:	7812      	ldrb	r2, [r2, #0]
   1299e:	b252      	sxtb	r2, r2
   129a0:	4013      	ands	r3, r2
   129a2:	b25a      	sxtb	r2, r3
   129a4:	230f      	movs	r3, #15
   129a6:	18fb      	adds	r3, r7, r3
   129a8:	701a      	strb	r2, [r3, #0]
		break;
   129aa:	e00a      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value ^= pixel_mask;
   129ac:	230f      	movs	r3, #15
   129ae:	18fb      	adds	r3, r7, r3
   129b0:	220f      	movs	r2, #15
   129b2:	18b9      	adds	r1, r7, r2
   129b4:	220d      	movs	r2, #13
   129b6:	18ba      	adds	r2, r7, r2
   129b8:	7809      	ldrb	r1, [r1, #0]
   129ba:	7812      	ldrb	r2, [r2, #0]
   129bc:	404a      	eors	r2, r1
   129be:	701a      	strb	r2, [r3, #0]
		break;
   129c0:	46c0      	nop			; (mov r8, r8)
	}

	gfx_mono_put_byte(page, x, pixel_value);
   129c2:	230f      	movs	r3, #15
   129c4:	18fb      	adds	r3, r7, r3
   129c6:	781a      	ldrb	r2, [r3, #0]
   129c8:	1dfb      	adds	r3, r7, #7
   129ca:	7819      	ldrb	r1, [r3, #0]
   129cc:	230e      	movs	r3, #14
   129ce:	18fb      	adds	r3, r7, r3
   129d0:	7818      	ldrb	r0, [r3, #0]
   129d2:	2300      	movs	r3, #0
   129d4:	4c04      	ldr	r4, [pc, #16]	; (129e8 <gfx_mono_ssd1306_draw_pixel+0xf0>)
   129d6:	47a0      	blx	r4
   129d8:	e000      	b.n	129dc <gfx_mono_ssd1306_draw_pixel+0xe4>
		return;
   129da:	46c0      	nop			; (mov r8, r8)
}
   129dc:	46bd      	mov	sp, r7
   129de:	b005      	add	sp, #20
   129e0:	bd90      	pop	{r4, r7, pc}
   129e2:	46c0      	nop			; (mov r8, r8)
   129e4:	00012a8d 	.word	0x00012a8d
   129e8:	000129ed 	.word	0x000129ed

000129ec <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
   129ec:	b5b0      	push	{r4, r5, r7, lr}
   129ee:	b082      	sub	sp, #8
   129f0:	af00      	add	r7, sp, #0
   129f2:	0005      	movs	r5, r0
   129f4:	000c      	movs	r4, r1
   129f6:	0010      	movs	r0, r2
   129f8:	0019      	movs	r1, r3
   129fa:	1dfb      	adds	r3, r7, #7
   129fc:	1c2a      	adds	r2, r5, #0
   129fe:	701a      	strb	r2, [r3, #0]
   12a00:	1dbb      	adds	r3, r7, #6
   12a02:	1c22      	adds	r2, r4, #0
   12a04:	701a      	strb	r2, [r3, #0]
   12a06:	1d7b      	adds	r3, r7, #5
   12a08:	1c02      	adds	r2, r0, #0
   12a0a:	701a      	strb	r2, [r3, #0]
   12a0c:	1d3b      	adds	r3, r7, #4
   12a0e:	1c0a      	adds	r2, r1, #0
   12a10:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
   12a12:	1d3b      	adds	r3, r7, #4
   12a14:	781b      	ldrb	r3, [r3, #0]
   12a16:	2201      	movs	r2, #1
   12a18:	4053      	eors	r3, r2
   12a1a:	b2db      	uxtb	r3, r3
   12a1c:	2b00      	cmp	r3, #0
   12a1e:	d00d      	beq.n	12a3c <gfx_mono_ssd1306_put_byte+0x50>
   12a20:	1dbb      	adds	r3, r7, #6
   12a22:	781a      	ldrb	r2, [r3, #0]
   12a24:	1dfb      	adds	r3, r7, #7
   12a26:	781b      	ldrb	r3, [r3, #0]
   12a28:	0011      	movs	r1, r2
   12a2a:	0018      	movs	r0, r3
   12a2c:	4b12      	ldr	r3, [pc, #72]	; (12a78 <gfx_mono_ssd1306_put_byte+0x8c>)
   12a2e:	4798      	blx	r3
   12a30:	0003      	movs	r3, r0
   12a32:	001a      	movs	r2, r3
   12a34:	1d7b      	adds	r3, r7, #5
   12a36:	781b      	ldrb	r3, [r3, #0]
   12a38:	4293      	cmp	r3, r2
   12a3a:	d018      	beq.n	12a6e <gfx_mono_ssd1306_put_byte+0x82>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
   12a3c:	1d7b      	adds	r3, r7, #5
   12a3e:	781a      	ldrb	r2, [r3, #0]
   12a40:	1dbb      	adds	r3, r7, #6
   12a42:	7819      	ldrb	r1, [r3, #0]
   12a44:	1dfb      	adds	r3, r7, #7
   12a46:	781b      	ldrb	r3, [r3, #0]
   12a48:	0018      	movs	r0, r3
   12a4a:	4b0c      	ldr	r3, [pc, #48]	; (12a7c <gfx_mono_ssd1306_put_byte+0x90>)
   12a4c:	4798      	blx	r3
#endif

	ssd1306_set_page_address(page);
   12a4e:	1dfb      	adds	r3, r7, #7
   12a50:	781b      	ldrb	r3, [r3, #0]
   12a52:	0018      	movs	r0, r3
   12a54:	4b0a      	ldr	r3, [pc, #40]	; (12a80 <gfx_mono_ssd1306_put_byte+0x94>)
   12a56:	4798      	blx	r3
	ssd1306_set_column_address(column);
   12a58:	1dbb      	adds	r3, r7, #6
   12a5a:	781b      	ldrb	r3, [r3, #0]
   12a5c:	0018      	movs	r0, r3
   12a5e:	4b09      	ldr	r3, [pc, #36]	; (12a84 <gfx_mono_ssd1306_put_byte+0x98>)
   12a60:	4798      	blx	r3

	ssd1306_write_data(data);
   12a62:	1d7b      	adds	r3, r7, #5
   12a64:	781b      	ldrb	r3, [r3, #0]
   12a66:	0018      	movs	r0, r3
   12a68:	4b07      	ldr	r3, [pc, #28]	; (12a88 <gfx_mono_ssd1306_put_byte+0x9c>)
   12a6a:	4798      	blx	r3
   12a6c:	e000      	b.n	12a70 <gfx_mono_ssd1306_put_byte+0x84>
		return;
   12a6e:	46c0      	nop			; (mov r8, r8)
}
   12a70:	46bd      	mov	sp, r7
   12a72:	b002      	add	sp, #8
   12a74:	bdb0      	pop	{r4, r5, r7, pc}
   12a76:	46c0      	nop			; (mov r8, r8)
   12a78:	000122e1 	.word	0x000122e1
   12a7c:	0001229d 	.word	0x0001229d
   12a80:	000127c5 	.word	0x000127c5
   12a84:	000127fd 	.word	0x000127fd
   12a88:	00012229 	.word	0x00012229

00012a8c <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   12a8c:	b580      	push	{r7, lr}
   12a8e:	b082      	sub	sp, #8
   12a90:	af00      	add	r7, sp, #0
   12a92:	0002      	movs	r2, r0
   12a94:	1dfb      	adds	r3, r7, #7
   12a96:	701a      	strb	r2, [r3, #0]
   12a98:	1dbb      	adds	r3, r7, #6
   12a9a:	1c0a      	adds	r2, r1, #0
   12a9c:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
   12a9e:	1dbb      	adds	r3, r7, #6
   12aa0:	781a      	ldrb	r2, [r3, #0]
   12aa2:	1dfb      	adds	r3, r7, #7
   12aa4:	781b      	ldrb	r3, [r3, #0]
   12aa6:	0011      	movs	r1, r2
   12aa8:	0018      	movs	r0, r3
   12aaa:	4b03      	ldr	r3, [pc, #12]	; (12ab8 <gfx_mono_ssd1306_get_byte+0x2c>)
   12aac:	4798      	blx	r3
   12aae:	0003      	movs	r3, r0
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
   12ab0:	0018      	movs	r0, r3
   12ab2:	46bd      	mov	sp, r7
   12ab4:	b002      	add	sp, #8
   12ab6:	bd80      	pop	{r7, pc}
   12ab8:	000122e1 	.word	0x000122e1

00012abc <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   12abc:	b580      	push	{r7, lr}
   12abe:	b084      	sub	sp, #16
   12ac0:	af00      	add	r7, sp, #0
   12ac2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   12ac4:	687b      	ldr	r3, [r7, #4]
   12ac6:	681b      	ldr	r3, [r3, #0]
   12ac8:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12aca:	68fb      	ldr	r3, [r7, #12]
   12acc:	7e5b      	ldrb	r3, [r3, #25]
   12ace:	b2db      	uxtb	r3, r3
   12ad0:	b25b      	sxtb	r3, r3
   12ad2:	2b00      	cmp	r3, #0
   12ad4:	da01      	bge.n	12ada <adc_is_syncing+0x1e>
		return true;
   12ad6:	2301      	movs	r3, #1
   12ad8:	e000      	b.n	12adc <adc_is_syncing+0x20>
	}

	return false;
   12ada:	2300      	movs	r3, #0
}
   12adc:	0018      	movs	r0, r3
   12ade:	46bd      	mov	sp, r7
   12ae0:	b004      	add	sp, #16
   12ae2:	bd80      	pop	{r7, pc}

00012ae4 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   12ae4:	b580      	push	{r7, lr}
   12ae6:	b084      	sub	sp, #16
   12ae8:	af00      	add	r7, sp, #0
   12aea:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12aec:	687b      	ldr	r3, [r7, #4]
   12aee:	681b      	ldr	r3, [r3, #0]
   12af0:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   12af2:	46c0      	nop			; (mov r8, r8)
   12af4:	687b      	ldr	r3, [r7, #4]
   12af6:	0018      	movs	r0, r3
   12af8:	4b0b      	ldr	r3, [pc, #44]	; (12b28 <adc_start_conversion+0x44>)
   12afa:	4798      	blx	r3
   12afc:	1e03      	subs	r3, r0, #0
   12afe:	d1f9      	bne.n	12af4 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   12b00:	68fb      	ldr	r3, [r7, #12]
   12b02:	7b1b      	ldrb	r3, [r3, #12]
   12b04:	b2db      	uxtb	r3, r3
   12b06:	2202      	movs	r2, #2
   12b08:	4313      	orrs	r3, r2
   12b0a:	b2da      	uxtb	r2, r3
   12b0c:	68fb      	ldr	r3, [r7, #12]
   12b0e:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   12b10:	46c0      	nop			; (mov r8, r8)
   12b12:	687b      	ldr	r3, [r7, #4]
   12b14:	0018      	movs	r0, r3
   12b16:	4b04      	ldr	r3, [pc, #16]	; (12b28 <adc_start_conversion+0x44>)
   12b18:	4798      	blx	r3
   12b1a:	1e03      	subs	r3, r0, #0
   12b1c:	d1f9      	bne.n	12b12 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   12b1e:	46c0      	nop			; (mov r8, r8)
   12b20:	46bd      	mov	sp, r7
   12b22:	b004      	add	sp, #16
   12b24:	bd80      	pop	{r7, pc}
   12b26:	46c0      	nop			; (mov r8, r8)
   12b28:	00012abd 	.word	0x00012abd

00012b2c <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   12b2c:	b580      	push	{r7, lr}
   12b2e:	b084      	sub	sp, #16
   12b30:	af00      	add	r7, sp, #0
   12b32:	6078      	str	r0, [r7, #4]
   12b34:	000a      	movs	r2, r1
   12b36:	1cfb      	adds	r3, r7, #3
   12b38:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12b3a:	687b      	ldr	r3, [r7, #4]
   12b3c:	681b      	ldr	r3, [r3, #0]
   12b3e:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   12b40:	68fb      	ldr	r3, [r7, #12]
   12b42:	1cfa      	adds	r2, r7, #3
   12b44:	7812      	ldrb	r2, [r2, #0]
   12b46:	759a      	strb	r2, [r3, #22]
}
   12b48:	46c0      	nop			; (mov r8, r8)
   12b4a:	46bd      	mov	sp, r7
   12b4c:	b004      	add	sp, #16
   12b4e:	bd80      	pop	{r7, pc}

00012b50 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   12b50:	b580      	push	{r7, lr}
   12b52:	b084      	sub	sp, #16
   12b54:	af00      	add	r7, sp, #0
   12b56:	0002      	movs	r2, r0
   12b58:	1dfb      	adds	r3, r7, #7
   12b5a:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   12b5c:	1dfb      	adds	r3, r7, #7
   12b5e:	781a      	ldrb	r2, [r3, #0]
   12b60:	4b47      	ldr	r3, [pc, #284]	; (12c80 <_adc_interrupt_handler+0x130>)
   12b62:	0092      	lsls	r2, r2, #2
   12b64:	58d3      	ldr	r3, [r2, r3]
   12b66:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   12b68:	68fb      	ldr	r3, [r7, #12]
   12b6a:	681b      	ldr	r3, [r3, #0]
   12b6c:	7e1b      	ldrb	r3, [r3, #24]
   12b6e:	b2da      	uxtb	r2, r3
   12b70:	68fb      	ldr	r3, [r7, #12]
   12b72:	681b      	ldr	r3, [r3, #0]
   12b74:	7ddb      	ldrb	r3, [r3, #23]
   12b76:	b2db      	uxtb	r3, r3
   12b78:	4013      	ands	r3, r2
   12b7a:	b2db      	uxtb	r3, r3
   12b7c:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   12b7e:	68bb      	ldr	r3, [r7, #8]
   12b80:	2201      	movs	r2, #1
   12b82:	4013      	ands	r3, r2
   12b84:	d045      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   12b86:	68fb      	ldr	r3, [r7, #12]
   12b88:	681b      	ldr	r3, [r3, #0]
   12b8a:	2201      	movs	r2, #1
   12b8c:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   12b8e:	46c0      	nop			; (mov r8, r8)
   12b90:	68fb      	ldr	r3, [r7, #12]
   12b92:	0018      	movs	r0, r3
   12b94:	4b3b      	ldr	r3, [pc, #236]	; (12c84 <_adc_interrupt_handler+0x134>)
   12b96:	4798      	blx	r3
   12b98:	1e03      	subs	r3, r0, #0
   12b9a:	d1f9      	bne.n	12b90 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   12b9c:	68fb      	ldr	r3, [r7, #12]
   12b9e:	695b      	ldr	r3, [r3, #20]
   12ba0:	1c99      	adds	r1, r3, #2
   12ba2:	68fa      	ldr	r2, [r7, #12]
   12ba4:	6151      	str	r1, [r2, #20]
   12ba6:	68fa      	ldr	r2, [r7, #12]
   12ba8:	6812      	ldr	r2, [r2, #0]
   12baa:	8b52      	ldrh	r2, [r2, #26]
   12bac:	b292      	uxth	r2, r2
   12bae:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12bb0:	68fb      	ldr	r3, [r7, #12]
   12bb2:	8b1b      	ldrh	r3, [r3, #24]
   12bb4:	b29b      	uxth	r3, r3
   12bb6:	3b01      	subs	r3, #1
   12bb8:	b29b      	uxth	r3, r3
   12bba:	68fa      	ldr	r2, [r7, #12]
   12bbc:	1c19      	adds	r1, r3, #0
   12bbe:	8311      	strh	r1, [r2, #24]
   12bc0:	2b00      	cmp	r3, #0
   12bc2:	d008      	beq.n	12bd6 <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   12bc4:	68fb      	ldr	r3, [r7, #12]
   12bc6:	7f5b      	ldrb	r3, [r3, #29]
   12bc8:	2b00      	cmp	r3, #0
   12bca:	d022      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12bcc:	68fb      	ldr	r3, [r7, #12]
   12bce:	0018      	movs	r0, r3
   12bd0:	4b2d      	ldr	r3, [pc, #180]	; (12c88 <_adc_interrupt_handler+0x138>)
   12bd2:	4798      	blx	r3
   12bd4:	e01d      	b.n	12c12 <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   12bd6:	68fb      	ldr	r3, [r7, #12]
   12bd8:	2101      	movs	r1, #1
   12bda:	0018      	movs	r0, r3
   12bdc:	4b2b      	ldr	r3, [pc, #172]	; (12c8c <_adc_interrupt_handler+0x13c>)
   12bde:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12be0:	68fb      	ldr	r3, [r7, #12]
   12be2:	7f1b      	ldrb	r3, [r3, #28]
   12be4:	b2db      	uxtb	r3, r3
   12be6:	2b05      	cmp	r3, #5
   12be8:	d113      	bne.n	12c12 <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12bea:	68fb      	ldr	r3, [r7, #12]
   12bec:	2200      	movs	r2, #0
   12bee:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12bf0:	68fb      	ldr	r3, [r7, #12]
   12bf2:	7edb      	ldrb	r3, [r3, #27]
   12bf4:	001a      	movs	r2, r3
   12bf6:	2301      	movs	r3, #1
   12bf8:	4013      	ands	r3, r2
   12bfa:	d00a      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12bfc:	68fb      	ldr	r3, [r7, #12]
   12bfe:	7e9b      	ldrb	r3, [r3, #26]
   12c00:	001a      	movs	r2, r3
   12c02:	2301      	movs	r3, #1
   12c04:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   12c06:	d004      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12c08:	68fb      	ldr	r3, [r7, #12]
   12c0a:	689b      	ldr	r3, [r3, #8]
   12c0c:	68fa      	ldr	r2, [r7, #12]
   12c0e:	0010      	movs	r0, r2
   12c10:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   12c12:	68bb      	ldr	r3, [r7, #8]
   12c14:	2204      	movs	r2, #4
   12c16:	4013      	ands	r3, r2
   12c18:	d014      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12c1a:	68fb      	ldr	r3, [r7, #12]
   12c1c:	681b      	ldr	r3, [r3, #0]
   12c1e:	2204      	movs	r2, #4
   12c20:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12c22:	68fb      	ldr	r3, [r7, #12]
   12c24:	7edb      	ldrb	r3, [r3, #27]
   12c26:	001a      	movs	r2, r3
   12c28:	2302      	movs	r3, #2
   12c2a:	4013      	ands	r3, r2
   12c2c:	d00a      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12c2e:	68fb      	ldr	r3, [r7, #12]
   12c30:	7e9b      	ldrb	r3, [r3, #26]
   12c32:	001a      	movs	r2, r3
   12c34:	2302      	movs	r3, #2
   12c36:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12c38:	d004      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   12c3a:	68fb      	ldr	r3, [r7, #12]
   12c3c:	68db      	ldr	r3, [r3, #12]
   12c3e:	68fa      	ldr	r2, [r7, #12]
   12c40:	0010      	movs	r0, r2
   12c42:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   12c44:	68bb      	ldr	r3, [r7, #8]
   12c46:	2202      	movs	r2, #2
   12c48:	4013      	ands	r3, r2
   12c4a:	d014      	beq.n	12c76 <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   12c4c:	68fb      	ldr	r3, [r7, #12]
   12c4e:	681b      	ldr	r3, [r3, #0]
   12c50:	2202      	movs	r2, #2
   12c52:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12c54:	68fb      	ldr	r3, [r7, #12]
   12c56:	7edb      	ldrb	r3, [r3, #27]
   12c58:	001a      	movs	r2, r3
   12c5a:	2304      	movs	r3, #4
   12c5c:	4013      	ands	r3, r2
   12c5e:	d00a      	beq.n	12c76 <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   12c60:	68fb      	ldr	r3, [r7, #12]
   12c62:	7e9b      	ldrb	r3, [r3, #26]
   12c64:	001a      	movs	r2, r3
   12c66:	2304      	movs	r3, #4
   12c68:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12c6a:	d004      	beq.n	12c76 <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   12c6c:	68fb      	ldr	r3, [r7, #12]
   12c6e:	691b      	ldr	r3, [r3, #16]
   12c70:	68fa      	ldr	r2, [r7, #12]
   12c72:	0010      	movs	r0, r2
   12c74:	4798      	blx	r3
		}
	}
}
   12c76:	46c0      	nop			; (mov r8, r8)
   12c78:	46bd      	mov	sp, r7
   12c7a:	b004      	add	sp, #16
   12c7c:	bd80      	pop	{r7, pc}
   12c7e:	46c0      	nop			; (mov r8, r8)
   12c80:	20004748 	.word	0x20004748
   12c84:	00012abd 	.word	0x00012abd
   12c88:	00012ae5 	.word	0x00012ae5
   12c8c:	00012b2d 	.word	0x00012b2d

00012c90 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   12c90:	b580      	push	{r7, lr}
   12c92:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   12c94:	2000      	movs	r0, #0
   12c96:	4b02      	ldr	r3, [pc, #8]	; (12ca0 <ADC_Handler+0x10>)
   12c98:	4798      	blx	r3
}
   12c9a:	46c0      	nop			; (mov r8, r8)
   12c9c:	46bd      	mov	sp, r7
   12c9e:	bd80      	pop	{r7, pc}
   12ca0:	00012b51 	.word	0x00012b51

00012ca4 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   12ca4:	b580      	push	{r7, lr}
   12ca6:	b082      	sub	sp, #8
   12ca8:	af00      	add	r7, sp, #0
   12caa:	0002      	movs	r2, r0
   12cac:	1dfb      	adds	r3, r7, #7
   12cae:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12cb0:	4a07      	ldr	r2, [pc, #28]	; (12cd0 <system_interrupt_disable+0x2c>)
   12cb2:	1dfb      	adds	r3, r7, #7
   12cb4:	781b      	ldrb	r3, [r3, #0]
   12cb6:	0019      	movs	r1, r3
   12cb8:	231f      	movs	r3, #31
   12cba:	400b      	ands	r3, r1
   12cbc:	2101      	movs	r1, #1
   12cbe:	4099      	lsls	r1, r3
   12cc0:	000b      	movs	r3, r1
   12cc2:	0019      	movs	r1, r3
   12cc4:	2380      	movs	r3, #128	; 0x80
   12cc6:	50d1      	str	r1, [r2, r3]
}
   12cc8:	46c0      	nop			; (mov r8, r8)
   12cca:	46bd      	mov	sp, r7
   12ccc:	b002      	add	sp, #8
   12cce:	bd80      	pop	{r7, pc}
   12cd0:	e000e100 	.word	0xe000e100

00012cd4 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   12cd4:	b580      	push	{r7, lr}
   12cd6:	b084      	sub	sp, #16
   12cd8:	af00      	add	r7, sp, #0
   12cda:	0002      	movs	r2, r0
   12cdc:	1dfb      	adds	r3, r7, #7
   12cde:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12ce0:	1dfb      	adds	r3, r7, #7
   12ce2:	781a      	ldrb	r2, [r3, #0]
   12ce4:	4b37      	ldr	r3, [pc, #220]	; (12dc4 <_dac_interrupt_handler+0xf0>)
   12ce6:	0092      	lsls	r2, r2, #2
   12ce8:	58d3      	ldr	r3, [r2, r3]
   12cea:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12cec:	68fb      	ldr	r3, [r7, #12]
   12cee:	681b      	ldr	r3, [r3, #0]
   12cf0:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   12cf2:	68bb      	ldr	r3, [r7, #8]
   12cf4:	799b      	ldrb	r3, [r3, #6]
   12cf6:	b2db      	uxtb	r3, r3
   12cf8:	001a      	movs	r2, r3
   12cfa:	2301      	movs	r3, #1
   12cfc:	4013      	ands	r3, r2
   12cfe:	d00e      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12d00:	68bb      	ldr	r3, [r7, #8]
   12d02:	2201      	movs	r2, #1
   12d04:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   12d06:	68fb      	ldr	r3, [r7, #12]
   12d08:	3314      	adds	r3, #20
   12d0a:	2b00      	cmp	r3, #0
   12d0c:	d007      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12d0e:	68fb      	ldr	r3, [r7, #12]
   12d10:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   12d12:	2b00      	cmp	r3, #0
   12d14:	d003      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   12d16:	68fb      	ldr	r3, [r7, #12]
   12d18:	699b      	ldr	r3, [r3, #24]
   12d1a:	2000      	movs	r0, #0
   12d1c:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12d1e:	68bb      	ldr	r3, [r7, #8]
   12d20:	799b      	ldrb	r3, [r3, #6]
   12d22:	b2db      	uxtb	r3, r3
   12d24:	001a      	movs	r2, r3
   12d26:	2302      	movs	r3, #2
   12d28:	4013      	ands	r3, r2
   12d2a:	d047      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12d2c:	68bb      	ldr	r3, [r7, #8]
   12d2e:	2202      	movs	r2, #2
   12d30:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   12d32:	68fb      	ldr	r3, [r7, #12]
   12d34:	899b      	ldrh	r3, [r3, #12]
   12d36:	b29b      	uxth	r3, r3
   12d38:	2b00      	cmp	r3, #0
   12d3a:	d033      	beq.n	12da4 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   12d3c:	68fb      	ldr	r3, [r7, #12]
   12d3e:	689a      	ldr	r2, [r3, #8]
   12d40:	68fb      	ldr	r3, [r7, #12]
   12d42:	89db      	ldrh	r3, [r3, #14]
   12d44:	b29b      	uxth	r3, r3
   12d46:	1c59      	adds	r1, r3, #1
   12d48:	b288      	uxth	r0, r1
   12d4a:	68f9      	ldr	r1, [r7, #12]
   12d4c:	81c8      	strh	r0, [r1, #14]
   12d4e:	005b      	lsls	r3, r3, #1
   12d50:	18d3      	adds	r3, r2, r3
   12d52:	881b      	ldrh	r3, [r3, #0]
   12d54:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   12d56:	68bb      	ldr	r3, [r7, #8]
   12d58:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   12d5a:	68fb      	ldr	r3, [r7, #12]
   12d5c:	899b      	ldrh	r3, [r3, #12]
   12d5e:	b29b      	uxth	r3, r3
   12d60:	3b01      	subs	r3, #1
   12d62:	b29a      	uxth	r2, r3
   12d64:	68fb      	ldr	r3, [r7, #12]
   12d66:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   12d68:	68fb      	ldr	r3, [r7, #12]
   12d6a:	899b      	ldrh	r3, [r3, #12]
   12d6c:	b29b      	uxth	r3, r3
   12d6e:	2b00      	cmp	r3, #0
   12d70:	d118      	bne.n	12da4 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   12d72:	68fb      	ldr	r3, [r7, #12]
   12d74:	2220      	movs	r2, #32
   12d76:	2100      	movs	r1, #0
   12d78:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   12d7a:	68bb      	ldr	r3, [r7, #8]
   12d7c:	2202      	movs	r2, #2
   12d7e:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12d80:	68bb      	ldr	r3, [r7, #8]
   12d82:	2202      	movs	r2, #2
   12d84:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   12d86:	2019      	movs	r0, #25
   12d88:	4b0f      	ldr	r3, [pc, #60]	; (12dc8 <_dac_interrupt_handler+0xf4>)
   12d8a:	4798      	blx	r3

				if ((module->callback) &&
   12d8c:	68fb      	ldr	r3, [r7, #12]
   12d8e:	3314      	adds	r3, #20
   12d90:	2b00      	cmp	r3, #0
   12d92:	d007      	beq.n	12da4 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   12d94:	68fb      	ldr	r3, [r7, #12]
   12d96:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   12d98:	2b00      	cmp	r3, #0
   12d9a:	d003      	beq.n	12da4 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   12d9c:	68fb      	ldr	r3, [r7, #12]
   12d9e:	69db      	ldr	r3, [r3, #28]
   12da0:	2000      	movs	r0, #0
   12da2:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   12da4:	68fb      	ldr	r3, [r7, #12]
   12da6:	3314      	adds	r3, #20
   12da8:	2b00      	cmp	r3, #0
   12daa:	d007      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   12dac:	68fb      	ldr	r3, [r7, #12]
   12dae:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   12db0:	2b00      	cmp	r3, #0
   12db2:	d003      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   12db4:	68fb      	ldr	r3, [r7, #12]
   12db6:	695b      	ldr	r3, [r3, #20]
   12db8:	2000      	movs	r0, #0
   12dba:	4798      	blx	r3
		}
	}
}
   12dbc:	46c0      	nop			; (mov r8, r8)
   12dbe:	46bd      	mov	sp, r7
   12dc0:	b004      	add	sp, #16
   12dc2:	bd80      	pop	{r7, pc}
   12dc4:	2000474c 	.word	0x2000474c
   12dc8:	00012ca5 	.word	0x00012ca5

00012dcc <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   12dcc:	b580      	push	{r7, lr}
   12dce:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   12dd0:	2000      	movs	r0, #0
   12dd2:	4b02      	ldr	r3, [pc, #8]	; (12ddc <DAC_Handler+0x10>)
   12dd4:	4798      	blx	r3
}
   12dd6:	46c0      	nop			; (mov r8, r8)
   12dd8:	46bd      	mov	sp, r7
   12dda:	bd80      	pop	{r7, pc}
   12ddc:	00012cd5 	.word	0x00012cd5

00012de0 <system_interrupt_enter_critical_section>:
{
   12de0:	b580      	push	{r7, lr}
   12de2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   12de4:	4b02      	ldr	r3, [pc, #8]	; (12df0 <system_interrupt_enter_critical_section+0x10>)
   12de6:	4798      	blx	r3
}
   12de8:	46c0      	nop			; (mov r8, r8)
   12dea:	46bd      	mov	sp, r7
   12dec:	bd80      	pop	{r7, pc}
   12dee:	46c0      	nop			; (mov r8, r8)
   12df0:	00025249 	.word	0x00025249

00012df4 <system_interrupt_leave_critical_section>:
{
   12df4:	b580      	push	{r7, lr}
   12df6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   12df8:	4b02      	ldr	r3, [pc, #8]	; (12e04 <system_interrupt_leave_critical_section+0x10>)
   12dfa:	4798      	blx	r3
}
   12dfc:	46c0      	nop			; (mov r8, r8)
   12dfe:	46bd      	mov	sp, r7
   12e00:	bd80      	pop	{r7, pc}
   12e02:	46c0      	nop			; (mov r8, r8)
   12e04:	0002529d 	.word	0x0002529d

00012e08 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   12e08:	b580      	push	{r7, lr}
   12e0a:	b086      	sub	sp, #24
   12e0c:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   12e0e:	4b49      	ldr	r3, [pc, #292]	; (12f34 <DMAC_Handler+0x12c>)
   12e10:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   12e12:	4b49      	ldr	r3, [pc, #292]	; (12f38 <DMAC_Handler+0x130>)
   12e14:	8c1b      	ldrh	r3, [r3, #32]
   12e16:	b29b      	uxth	r3, r3
   12e18:	b2da      	uxtb	r2, r3
   12e1a:	2317      	movs	r3, #23
   12e1c:	18fb      	adds	r3, r7, r3
   12e1e:	210f      	movs	r1, #15
   12e20:	400a      	ands	r2, r1
   12e22:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   12e24:	2317      	movs	r3, #23
   12e26:	18fb      	adds	r3, r7, r3
   12e28:	781a      	ldrb	r2, [r3, #0]
   12e2a:	4b44      	ldr	r3, [pc, #272]	; (12f3c <DMAC_Handler+0x134>)
   12e2c:	0092      	lsls	r2, r2, #2
   12e2e:	58d3      	ldr	r3, [r2, r3]
   12e30:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   12e32:	4a41      	ldr	r2, [pc, #260]	; (12f38 <DMAC_Handler+0x130>)
   12e34:	693b      	ldr	r3, [r7, #16]
   12e36:	781b      	ldrb	r3, [r3, #0]
   12e38:	210f      	movs	r1, #15
   12e3a:	400b      	ands	r3, r1
   12e3c:	b2d9      	uxtb	r1, r3
   12e3e:	233f      	movs	r3, #63	; 0x3f
   12e40:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   12e42:	493d      	ldr	r1, [pc, #244]	; (12f38 <DMAC_Handler+0x130>)
   12e44:	230f      	movs	r3, #15
   12e46:	18fb      	adds	r3, r7, r3
   12e48:	224e      	movs	r2, #78	; 0x4e
   12e4a:	5c8a      	ldrb	r2, [r1, r2]
   12e4c:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   12e4e:	693b      	ldr	r3, [r7, #16]
   12e50:	781b      	ldrb	r3, [r3, #0]
   12e52:	4a3b      	ldr	r2, [pc, #236]	; (12f40 <DMAC_Handler+0x138>)
   12e54:	011b      	lsls	r3, r3, #4
   12e56:	18d3      	adds	r3, r2, r3
   12e58:	3302      	adds	r3, #2
   12e5a:	881b      	ldrh	r3, [r3, #0]
   12e5c:	b29b      	uxth	r3, r3
   12e5e:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   12e60:	693b      	ldr	r3, [r7, #16]
   12e62:	781b      	ldrb	r3, [r3, #0]
   12e64:	4a37      	ldr	r2, [pc, #220]	; (12f44 <DMAC_Handler+0x13c>)
   12e66:	011b      	lsls	r3, r3, #4
   12e68:	18d3      	adds	r3, r2, r3
   12e6a:	3302      	adds	r3, #2
   12e6c:	881b      	ldrh	r3, [r3, #0]
   12e6e:	b29b      	uxth	r3, r3
   12e70:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   12e72:	68ba      	ldr	r2, [r7, #8]
   12e74:	687b      	ldr	r3, [r7, #4]
   12e76:	1ad2      	subs	r2, r2, r3
   12e78:	693b      	ldr	r3, [r7, #16]
   12e7a:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   12e7c:	230f      	movs	r3, #15
   12e7e:	18fb      	adds	r3, r7, r3
   12e80:	781b      	ldrb	r3, [r3, #0]
   12e82:	2201      	movs	r2, #1
   12e84:	4013      	ands	r3, r2
   12e86:	d016      	beq.n	12eb6 <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   12e88:	4a2b      	ldr	r2, [pc, #172]	; (12f38 <DMAC_Handler+0x130>)
   12e8a:	234e      	movs	r3, #78	; 0x4e
   12e8c:	2101      	movs	r1, #1
   12e8e:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   12e90:	693b      	ldr	r3, [r7, #16]
   12e92:	2210      	movs	r2, #16
   12e94:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12e96:	693b      	ldr	r3, [r7, #16]
   12e98:	7c1b      	ldrb	r3, [r3, #16]
   12e9a:	001a      	movs	r2, r3
   12e9c:	2301      	movs	r3, #1
   12e9e:	4013      	ands	r3, r2
   12ea0:	d042      	beq.n	12f28 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   12ea2:	693b      	ldr	r3, [r7, #16]
   12ea4:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12ea6:	2b00      	cmp	r3, #0
   12ea8:	d03e      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   12eaa:	693b      	ldr	r3, [r7, #16]
   12eac:	685b      	ldr	r3, [r3, #4]
   12eae:	693a      	ldr	r2, [r7, #16]
   12eb0:	0010      	movs	r0, r2
   12eb2:	4798      	blx	r3
   12eb4:	e038      	b.n	12f28 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   12eb6:	230f      	movs	r3, #15
   12eb8:	18fb      	adds	r3, r7, r3
   12eba:	781b      	ldrb	r3, [r3, #0]
   12ebc:	2202      	movs	r2, #2
   12ebe:	4013      	ands	r3, r2
   12ec0:	d016      	beq.n	12ef0 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   12ec2:	4a1d      	ldr	r2, [pc, #116]	; (12f38 <DMAC_Handler+0x130>)
   12ec4:	234e      	movs	r3, #78	; 0x4e
   12ec6:	2102      	movs	r1, #2
   12ec8:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   12eca:	693b      	ldr	r3, [r7, #16]
   12ecc:	2200      	movs	r2, #0
   12ece:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12ed0:	693b      	ldr	r3, [r7, #16]
   12ed2:	7c1b      	ldrb	r3, [r3, #16]
   12ed4:	001a      	movs	r2, r3
   12ed6:	2302      	movs	r3, #2
   12ed8:	4013      	ands	r3, r2
   12eda:	d025      	beq.n	12f28 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   12edc:	693b      	ldr	r3, [r7, #16]
   12ede:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12ee0:	2b00      	cmp	r3, #0
   12ee2:	d021      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   12ee4:	693b      	ldr	r3, [r7, #16]
   12ee6:	689b      	ldr	r3, [r3, #8]
   12ee8:	693a      	ldr	r2, [r7, #16]
   12eea:	0010      	movs	r0, r2
   12eec:	4798      	blx	r3
   12eee:	e01b      	b.n	12f28 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   12ef0:	230f      	movs	r3, #15
   12ef2:	18fb      	adds	r3, r7, r3
   12ef4:	781b      	ldrb	r3, [r3, #0]
   12ef6:	2204      	movs	r2, #4
   12ef8:	4013      	ands	r3, r2
   12efa:	d015      	beq.n	12f28 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   12efc:	4a0e      	ldr	r2, [pc, #56]	; (12f38 <DMAC_Handler+0x130>)
   12efe:	234e      	movs	r3, #78	; 0x4e
   12f00:	2104      	movs	r1, #4
   12f02:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   12f04:	693b      	ldr	r3, [r7, #16]
   12f06:	2206      	movs	r2, #6
   12f08:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12f0a:	693b      	ldr	r3, [r7, #16]
   12f0c:	7c1b      	ldrb	r3, [r3, #16]
   12f0e:	001a      	movs	r2, r3
   12f10:	2304      	movs	r3, #4
   12f12:	4013      	ands	r3, r2
   12f14:	d008      	beq.n	12f28 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   12f16:	693b      	ldr	r3, [r7, #16]
   12f18:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12f1a:	2b00      	cmp	r3, #0
   12f1c:	d004      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   12f1e:	693b      	ldr	r3, [r7, #16]
   12f20:	68db      	ldr	r3, [r3, #12]
   12f22:	693a      	ldr	r2, [r7, #16]
   12f24:	0010      	movs	r0, r2
   12f26:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   12f28:	4b07      	ldr	r3, [pc, #28]	; (12f48 <DMAC_Handler+0x140>)
   12f2a:	4798      	blx	r3
}
   12f2c:	46c0      	nop			; (mov r8, r8)
   12f2e:	46bd      	mov	sp, r7
   12f30:	b006      	add	sp, #24
   12f32:	bd80      	pop	{r7, pc}
   12f34:	00012de1 	.word	0x00012de1
   12f38:	41004800 	.word	0x41004800
   12f3c:	200004e0 	.word	0x200004e0
   12f40:	20004750 	.word	0x20004750
   12f44:	20000490 	.word	0x20000490
   12f48:	00012df5 	.word	0x00012df5

00012f4c <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   12f4c:	b580      	push	{r7, lr}
   12f4e:	b082      	sub	sp, #8
   12f50:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   12f52:	4b15      	ldr	r3, [pc, #84]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f54:	691b      	ldr	r3, [r3, #16]
   12f56:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   12f58:	4b14      	ldr	r3, [pc, #80]	; (12fac <EVSYS_Handler+0x60>)
   12f5a:	699b      	ldr	r3, [r3, #24]
   12f5c:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   12f5e:	4b12      	ldr	r3, [pc, #72]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f60:	689a      	ldr	r2, [r3, #8]
   12f62:	683b      	ldr	r3, [r7, #0]
   12f64:	431a      	orrs	r2, r3
   12f66:	4b10      	ldr	r3, [pc, #64]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f68:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   12f6a:	4b10      	ldr	r3, [pc, #64]	; (12fac <EVSYS_Handler+0x60>)
   12f6c:	4a10      	ldr	r2, [pc, #64]	; (12fb0 <EVSYS_Handler+0x64>)
   12f6e:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   12f70:	e008      	b.n	12f84 <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   12f72:	687b      	ldr	r3, [r7, #4]
   12f74:	685a      	ldr	r2, [r3, #4]
   12f76:	687b      	ldr	r3, [r7, #4]
   12f78:	681b      	ldr	r3, [r3, #0]
   12f7a:	0018      	movs	r0, r3
   12f7c:	4790      	blx	r2
		current_hook = current_hook->next;
   12f7e:	687b      	ldr	r3, [r7, #4]
   12f80:	689b      	ldr	r3, [r3, #8]
   12f82:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   12f84:	687b      	ldr	r3, [r7, #4]
   12f86:	2b00      	cmp	r3, #0
   12f88:	d1f3      	bne.n	12f72 <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   12f8a:	4b07      	ldr	r3, [pc, #28]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f8c:	68db      	ldr	r3, [r3, #12]
   12f8e:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   12f90:	4b05      	ldr	r3, [pc, #20]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f92:	689b      	ldr	r3, [r3, #8]
   12f94:	683a      	ldr	r2, [r7, #0]
   12f96:	43d2      	mvns	r2, r2
   12f98:	401a      	ands	r2, r3
   12f9a:	4b03      	ldr	r3, [pc, #12]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f9c:	609a      	str	r2, [r3, #8]
}
   12f9e:	46c0      	nop			; (mov r8, r8)
   12fa0:	46bd      	mov	sp, r7
   12fa2:	b002      	add	sp, #8
   12fa4:	bd80      	pop	{r7, pc}
   12fa6:	46c0      	nop			; (mov r8, r8)
   12fa8:	2000000c 	.word	0x2000000c
   12fac:	42000400 	.word	0x42000400
   12fb0:	0f0fffff 	.word	0x0f0fffff

00012fb4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   12fb4:	b580      	push	{r7, lr}
   12fb6:	b082      	sub	sp, #8
   12fb8:	af00      	add	r7, sp, #0
   12fba:	0002      	movs	r2, r0
   12fbc:	6039      	str	r1, [r7, #0]
   12fbe:	1dfb      	adds	r3, r7, #7
   12fc0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   12fc2:	1dfb      	adds	r3, r7, #7
   12fc4:	781b      	ldrb	r3, [r3, #0]
   12fc6:	2b01      	cmp	r3, #1
   12fc8:	d00a      	beq.n	12fe0 <system_apb_clock_set_mask+0x2c>
   12fca:	2b02      	cmp	r3, #2
   12fcc:	d00f      	beq.n	12fee <system_apb_clock_set_mask+0x3a>
   12fce:	2b00      	cmp	r3, #0
   12fd0:	d114      	bne.n	12ffc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   12fd2:	4b0e      	ldr	r3, [pc, #56]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fd4:	4a0d      	ldr	r2, [pc, #52]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fd6:	6991      	ldr	r1, [r2, #24]
   12fd8:	683a      	ldr	r2, [r7, #0]
   12fda:	430a      	orrs	r2, r1
   12fdc:	619a      	str	r2, [r3, #24]
			break;
   12fde:	e00f      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12fe0:	4b0a      	ldr	r3, [pc, #40]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fe2:	4a0a      	ldr	r2, [pc, #40]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fe4:	69d1      	ldr	r1, [r2, #28]
   12fe6:	683a      	ldr	r2, [r7, #0]
   12fe8:	430a      	orrs	r2, r1
   12fea:	61da      	str	r2, [r3, #28]
			break;
   12fec:	e008      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12fee:	4b07      	ldr	r3, [pc, #28]	; (1300c <system_apb_clock_set_mask+0x58>)
   12ff0:	4a06      	ldr	r2, [pc, #24]	; (1300c <system_apb_clock_set_mask+0x58>)
   12ff2:	6a11      	ldr	r1, [r2, #32]
   12ff4:	683a      	ldr	r2, [r7, #0]
   12ff6:	430a      	orrs	r2, r1
   12ff8:	621a      	str	r2, [r3, #32]
			break;
   12ffa:	e001      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12ffc:	2317      	movs	r3, #23
   12ffe:	e000      	b.n	13002 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   13000:	2300      	movs	r3, #0
}
   13002:	0018      	movs	r0, r3
   13004:	46bd      	mov	sp, r7
   13006:	b002      	add	sp, #8
   13008:	bd80      	pop	{r7, pc}
   1300a:	46c0      	nop			; (mov r8, r8)
   1300c:	40000400 	.word	0x40000400

00013010 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   13010:	b580      	push	{r7, lr}
   13012:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   13014:	2102      	movs	r1, #2
   13016:	2002      	movs	r0, #2
   13018:	4b07      	ldr	r3, [pc, #28]	; (13038 <_system_events_init+0x28>)
   1301a:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   1301c:	4b07      	ldr	r3, [pc, #28]	; (1303c <_system_events_init+0x2c>)
   1301e:	2201      	movs	r2, #1
   13020:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   13022:	46c0      	nop			; (mov r8, r8)
   13024:	4b05      	ldr	r3, [pc, #20]	; (1303c <_system_events_init+0x2c>)
   13026:	781b      	ldrb	r3, [r3, #0]
   13028:	b2db      	uxtb	r3, r3
   1302a:	001a      	movs	r2, r3
   1302c:	2301      	movs	r3, #1
   1302e:	4013      	ands	r3, r2
   13030:	d1f8      	bne.n	13024 <_system_events_init+0x14>
	}
}
   13032:	46c0      	nop			; (mov r8, r8)
   13034:	46bd      	mov	sp, r7
   13036:	bd80      	pop	{r7, pc}
   13038:	00012fb5 	.word	0x00012fb5
   1303c:	42000400 	.word	0x42000400

00013040 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   13040:	b580      	push	{r7, lr}
   13042:	b084      	sub	sp, #16
   13044:	af00      	add	r7, sp, #0
   13046:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   13048:	687b      	ldr	r3, [r7, #4]
   1304a:	681b      	ldr	r3, [r3, #0]
   1304c:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1304e:	68fb      	ldr	r3, [r7, #12]
   13050:	69db      	ldr	r3, [r3, #28]
   13052:	2207      	movs	r2, #7
   13054:	4013      	ands	r3, r2
   13056:	1e5a      	subs	r2, r3, #1
   13058:	4193      	sbcs	r3, r2
   1305a:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   1305c:	0018      	movs	r0, r3
   1305e:	46bd      	mov	sp, r7
   13060:	b004      	add	sp, #16
   13062:	bd80      	pop	{r7, pc}

00013064 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   13064:	b580      	push	{r7, lr}
   13066:	b082      	sub	sp, #8
   13068:	af00      	add	r7, sp, #0
   1306a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   1306c:	46c0      	nop			; (mov r8, r8)
   1306e:	687b      	ldr	r3, [r7, #4]
   13070:	0018      	movs	r0, r3
   13072:	4b04      	ldr	r3, [pc, #16]	; (13084 <_i2c_master_wait_for_sync+0x20>)
   13074:	4798      	blx	r3
   13076:	1e03      	subs	r3, r0, #0
   13078:	d1f9      	bne.n	1306e <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   1307a:	46c0      	nop			; (mov r8, r8)
   1307c:	46bd      	mov	sp, r7
   1307e:	b002      	add	sp, #8
   13080:	bd80      	pop	{r7, pc}
   13082:	46c0      	nop			; (mov r8, r8)
   13084:	00013041 	.word	0x00013041

00013088 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   13088:	b580      	push	{r7, lr}
   1308a:	b084      	sub	sp, #16
   1308c:	af00      	add	r7, sp, #0
   1308e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13090:	687b      	ldr	r3, [r7, #4]
   13092:	681b      	ldr	r3, [r3, #0]
   13094:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13096:	68fb      	ldr	r3, [r7, #12]
   13098:	681b      	ldr	r3, [r3, #0]
   1309a:	011b      	lsls	r3, r3, #4
   1309c:	0fdb      	lsrs	r3, r3, #31
   1309e:	b2db      	uxtb	r3, r3
   130a0:	001a      	movs	r2, r3
   130a2:	230b      	movs	r3, #11
   130a4:	18fb      	adds	r3, r7, r3
   130a6:	1e51      	subs	r1, r2, #1
   130a8:	418a      	sbcs	r2, r1
   130aa:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   130ac:	2308      	movs	r3, #8
   130ae:	18fb      	adds	r3, r7, r3
   130b0:	687a      	ldr	r2, [r7, #4]
   130b2:	8b52      	ldrh	r2, [r2, #26]
   130b4:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   130b6:	687b      	ldr	r3, [r7, #4]
   130b8:	8b9b      	ldrh	r3, [r3, #28]
   130ba:	b29a      	uxth	r2, r3
   130bc:	2308      	movs	r3, #8
   130be:	18fb      	adds	r3, r7, r3
   130c0:	2108      	movs	r1, #8
   130c2:	1879      	adds	r1, r7, r1
   130c4:	8809      	ldrh	r1, [r1, #0]
   130c6:	1a8a      	subs	r2, r1, r2
   130c8:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   130ca:	687b      	ldr	r3, [r7, #4]
   130cc:	8b9b      	ldrh	r3, [r3, #28]
   130ce:	b29b      	uxth	r3, r3
   130d0:	3b01      	subs	r3, #1
   130d2:	b29a      	uxth	r2, r3
   130d4:	687b      	ldr	r3, [r7, #4]
   130d6:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   130d8:	230b      	movs	r3, #11
   130da:	18fb      	adds	r3, r7, r3
   130dc:	781b      	ldrb	r3, [r3, #0]
   130de:	2b00      	cmp	r3, #0
   130e0:	d010      	beq.n	13104 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   130e2:	687b      	ldr	r3, [r7, #4]
   130e4:	7adb      	ldrb	r3, [r3, #11]
   130e6:	2b00      	cmp	r3, #0
   130e8:	d01c      	beq.n	13124 <_i2c_master_read+0x9c>
   130ea:	687b      	ldr	r3, [r7, #4]
   130ec:	8b9b      	ldrh	r3, [r3, #28]
   130ee:	b29b      	uxth	r3, r3
   130f0:	2b01      	cmp	r3, #1
   130f2:	d117      	bne.n	13124 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   130f4:	68fb      	ldr	r3, [r7, #12]
   130f6:	685b      	ldr	r3, [r3, #4]
   130f8:	2280      	movs	r2, #128	; 0x80
   130fa:	02d2      	lsls	r2, r2, #11
   130fc:	431a      	orrs	r2, r3
   130fe:	68fb      	ldr	r3, [r7, #12]
   13100:	605a      	str	r2, [r3, #4]
   13102:	e00f      	b.n	13124 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   13104:	687b      	ldr	r3, [r7, #4]
   13106:	7adb      	ldrb	r3, [r3, #11]
   13108:	2b00      	cmp	r3, #0
   1310a:	d00b      	beq.n	13124 <_i2c_master_read+0x9c>
   1310c:	687b      	ldr	r3, [r7, #4]
   1310e:	8b9b      	ldrh	r3, [r3, #28]
   13110:	b29b      	uxth	r3, r3
   13112:	2b00      	cmp	r3, #0
   13114:	d106      	bne.n	13124 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13116:	68fb      	ldr	r3, [r7, #12]
   13118:	685b      	ldr	r3, [r3, #4]
   1311a:	2280      	movs	r2, #128	; 0x80
   1311c:	02d2      	lsls	r2, r2, #11
   1311e:	431a      	orrs	r2, r3
   13120:	68fb      	ldr	r3, [r7, #12]
   13122:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   13124:	687b      	ldr	r3, [r7, #4]
   13126:	8b9b      	ldrh	r3, [r3, #28]
   13128:	b29b      	uxth	r3, r3
   1312a:	2b00      	cmp	r3, #0
   1312c:	d10e      	bne.n	1314c <_i2c_master_read+0xc4>
		if (module->send_stop) {
   1312e:	687b      	ldr	r3, [r7, #4]
   13130:	7a9b      	ldrb	r3, [r3, #10]
   13132:	2b00      	cmp	r3, #0
   13134:	d00a      	beq.n	1314c <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   13136:	687b      	ldr	r3, [r7, #4]
   13138:	0018      	movs	r0, r3
   1313a:	4b0e      	ldr	r3, [pc, #56]	; (13174 <_i2c_master_read+0xec>)
   1313c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1313e:	68fb      	ldr	r3, [r7, #12]
   13140:	685b      	ldr	r3, [r3, #4]
   13142:	22c0      	movs	r2, #192	; 0xc0
   13144:	0292      	lsls	r2, r2, #10
   13146:	431a      	orrs	r2, r3
   13148:	68fb      	ldr	r3, [r7, #12]
   1314a:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   1314c:	687b      	ldr	r3, [r7, #4]
   1314e:	0018      	movs	r0, r3
   13150:	4b08      	ldr	r3, [pc, #32]	; (13174 <_i2c_master_read+0xec>)
   13152:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   13154:	687b      	ldr	r3, [r7, #4]
   13156:	6a1a      	ldr	r2, [r3, #32]
   13158:	2308      	movs	r3, #8
   1315a:	18fb      	adds	r3, r7, r3
   1315c:	881b      	ldrh	r3, [r3, #0]
   1315e:	18d3      	adds	r3, r2, r3
   13160:	68fa      	ldr	r2, [r7, #12]
   13162:	2128      	movs	r1, #40	; 0x28
   13164:	5c52      	ldrb	r2, [r2, r1]
   13166:	b2d2      	uxtb	r2, r2
   13168:	701a      	strb	r2, [r3, #0]
}
   1316a:	46c0      	nop			; (mov r8, r8)
   1316c:	46bd      	mov	sp, r7
   1316e:	b004      	add	sp, #16
   13170:	bd80      	pop	{r7, pc}
   13172:	46c0      	nop			; (mov r8, r8)
   13174:	00013065 	.word	0x00013065

00013178 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   13178:	b580      	push	{r7, lr}
   1317a:	b084      	sub	sp, #16
   1317c:	af00      	add	r7, sp, #0
   1317e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13180:	687b      	ldr	r3, [r7, #4]
   13182:	681b      	ldr	r3, [r3, #0]
   13184:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   13186:	68fb      	ldr	r3, [r7, #12]
   13188:	8b5b      	ldrh	r3, [r3, #26]
   1318a:	b29b      	uxth	r3, r3
   1318c:	001a      	movs	r2, r3
   1318e:	2304      	movs	r3, #4
   13190:	4013      	ands	r3, r2
   13192:	d004      	beq.n	1319e <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   13194:	687b      	ldr	r3, [r7, #4]
   13196:	2225      	movs	r2, #37	; 0x25
   13198:	211e      	movs	r1, #30
   1319a:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   1319c:	e024      	b.n	131e8 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   1319e:	230a      	movs	r3, #10
   131a0:	18fb      	adds	r3, r7, r3
   131a2:	687a      	ldr	r2, [r7, #4]
   131a4:	8b52      	ldrh	r2, [r2, #26]
   131a6:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   131a8:	687b      	ldr	r3, [r7, #4]
   131aa:	8b9b      	ldrh	r3, [r3, #28]
   131ac:	b29a      	uxth	r2, r3
   131ae:	230a      	movs	r3, #10
   131b0:	18fb      	adds	r3, r7, r3
   131b2:	210a      	movs	r1, #10
   131b4:	1879      	adds	r1, r7, r1
   131b6:	8809      	ldrh	r1, [r1, #0]
   131b8:	1a8a      	subs	r2, r1, r2
   131ba:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   131bc:	687b      	ldr	r3, [r7, #4]
   131be:	8b9b      	ldrh	r3, [r3, #28]
   131c0:	b29b      	uxth	r3, r3
   131c2:	3b01      	subs	r3, #1
   131c4:	b29a      	uxth	r2, r3
   131c6:	687b      	ldr	r3, [r7, #4]
   131c8:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   131ca:	687b      	ldr	r3, [r7, #4]
   131cc:	0018      	movs	r0, r3
   131ce:	4b08      	ldr	r3, [pc, #32]	; (131f0 <_i2c_master_write+0x78>)
   131d0:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   131d2:	687b      	ldr	r3, [r7, #4]
   131d4:	6a1a      	ldr	r2, [r3, #32]
   131d6:	230a      	movs	r3, #10
   131d8:	18fb      	adds	r3, r7, r3
   131da:	881b      	ldrh	r3, [r3, #0]
   131dc:	18d3      	adds	r3, r2, r3
   131de:	781b      	ldrb	r3, [r3, #0]
   131e0:	b2d9      	uxtb	r1, r3
   131e2:	68fb      	ldr	r3, [r7, #12]
   131e4:	2228      	movs	r2, #40	; 0x28
   131e6:	5499      	strb	r1, [r3, r2]
}
   131e8:	46bd      	mov	sp, r7
   131ea:	b004      	add	sp, #16
   131ec:	bd80      	pop	{r7, pc}
   131ee:	46c0      	nop			; (mov r8, r8)
   131f0:	00013065 	.word	0x00013065

000131f4 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   131f4:	b580      	push	{r7, lr}
   131f6:	b084      	sub	sp, #16
   131f8:	af00      	add	r7, sp, #0
   131fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   131fc:	687b      	ldr	r3, [r7, #4]
   131fe:	681b      	ldr	r3, [r3, #0]
   13200:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   13202:	68fb      	ldr	r3, [r7, #12]
   13204:	7e1b      	ldrb	r3, [r3, #24]
   13206:	b2db      	uxtb	r3, r3
   13208:	001a      	movs	r2, r3
   1320a:	2301      	movs	r3, #1
   1320c:	4013      	ands	r3, r2
   1320e:	d02b      	beq.n	13268 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   13210:	68fb      	ldr	r3, [r7, #12]
   13212:	2201      	movs	r2, #1
   13214:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   13216:	68fb      	ldr	r3, [r7, #12]
   13218:	8b5b      	ldrh	r3, [r3, #26]
   1321a:	b29b      	uxth	r3, r3
   1321c:	001a      	movs	r2, r3
   1321e:	2302      	movs	r3, #2
   13220:	4013      	ands	r3, r2
   13222:	d004      	beq.n	1322e <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   13224:	687b      	ldr	r3, [r7, #4]
   13226:	2225      	movs	r2, #37	; 0x25
   13228:	2141      	movs	r1, #65	; 0x41
   1322a:	5499      	strb	r1, [r3, r2]
   1322c:	e01c      	b.n	13268 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   1322e:	68fb      	ldr	r3, [r7, #12]
   13230:	8b5b      	ldrh	r3, [r3, #26]
   13232:	b29b      	uxth	r3, r3
   13234:	001a      	movs	r2, r3
   13236:	2304      	movs	r3, #4
   13238:	4013      	ands	r3, r2
   1323a:	d015      	beq.n	13268 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   1323c:	687b      	ldr	r3, [r7, #4]
   1323e:	2225      	movs	r2, #37	; 0x25
   13240:	2118      	movs	r1, #24
   13242:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   13244:	687b      	ldr	r3, [r7, #4]
   13246:	2200      	movs	r2, #0
   13248:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   1324a:	687b      	ldr	r3, [r7, #4]
   1324c:	7a9b      	ldrb	r3, [r3, #10]
   1324e:	2b00      	cmp	r3, #0
   13250:	d00a      	beq.n	13268 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   13252:	687b      	ldr	r3, [r7, #4]
   13254:	0018      	movs	r0, r3
   13256:	4b13      	ldr	r3, [pc, #76]	; (132a4 <_i2c_master_async_address_response+0xb0>)
   13258:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1325a:	68fb      	ldr	r3, [r7, #12]
   1325c:	685b      	ldr	r3, [r3, #4]
   1325e:	22c0      	movs	r2, #192	; 0xc0
   13260:	0292      	lsls	r2, r2, #10
   13262:	431a      	orrs	r2, r3
   13264:	68fb      	ldr	r3, [r7, #12]
   13266:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   13268:	687b      	ldr	r3, [r7, #4]
   1326a:	8b9b      	ldrh	r3, [r3, #28]
   1326c:	b29a      	uxth	r2, r3
   1326e:	687b      	ldr	r3, [r7, #4]
   13270:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   13272:	687b      	ldr	r3, [r7, #4]
   13274:	2225      	movs	r2, #37	; 0x25
   13276:	5c9b      	ldrb	r3, [r3, r2]
   13278:	b2db      	uxtb	r3, r3
   1327a:	2b05      	cmp	r3, #5
   1327c:	d10e      	bne.n	1329c <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   1327e:	687b      	ldr	r3, [r7, #4]
   13280:	2224      	movs	r2, #36	; 0x24
   13282:	5c9b      	ldrb	r3, [r3, r2]
   13284:	b2db      	uxtb	r3, r3
   13286:	2b00      	cmp	r3, #0
   13288:	d104      	bne.n	13294 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   1328a:	687b      	ldr	r3, [r7, #4]
   1328c:	0018      	movs	r0, r3
   1328e:	4b06      	ldr	r3, [pc, #24]	; (132a8 <_i2c_master_async_address_response+0xb4>)
   13290:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   13292:	e003      	b.n	1329c <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   13294:	687b      	ldr	r3, [r7, #4]
   13296:	0018      	movs	r0, r3
   13298:	4b04      	ldr	r3, [pc, #16]	; (132ac <_i2c_master_async_address_response+0xb8>)
   1329a:	4798      	blx	r3
}
   1329c:	46c0      	nop			; (mov r8, r8)
   1329e:	46bd      	mov	sp, r7
   132a0:	b004      	add	sp, #16
   132a2:	bd80      	pop	{r7, pc}
   132a4:	00013065 	.word	0x00013065
   132a8:	00013179 	.word	0x00013179
   132ac:	00013089 	.word	0x00013089

000132b0 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   132b0:	b580      	push	{r7, lr}
   132b2:	b084      	sub	sp, #16
   132b4:	af00      	add	r7, sp, #0
   132b6:	60f8      	str	r0, [r7, #12]
   132b8:	60b9      	str	r1, [r7, #8]
   132ba:	1dfb      	adds	r3, r7, #7
   132bc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   132be:	1dfb      	adds	r3, r7, #7
   132c0:	781b      	ldrb	r3, [r3, #0]
   132c2:	68fa      	ldr	r2, [r7, #12]
   132c4:	3302      	adds	r3, #2
   132c6:	009b      	lsls	r3, r3, #2
   132c8:	18d3      	adds	r3, r2, r3
   132ca:	3304      	adds	r3, #4
   132cc:	68ba      	ldr	r2, [r7, #8]
   132ce:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   132d0:	68fb      	ldr	r3, [r7, #12]
   132d2:	7e1b      	ldrb	r3, [r3, #24]
   132d4:	b2db      	uxtb	r3, r3
   132d6:	b25a      	sxtb	r2, r3
   132d8:	1dfb      	adds	r3, r7, #7
   132da:	781b      	ldrb	r3, [r3, #0]
   132dc:	2101      	movs	r1, #1
   132de:	4099      	lsls	r1, r3
   132e0:	000b      	movs	r3, r1
   132e2:	b25b      	sxtb	r3, r3
   132e4:	4313      	orrs	r3, r2
   132e6:	b25b      	sxtb	r3, r3
   132e8:	b2da      	uxtb	r2, r3
   132ea:	68fb      	ldr	r3, [r7, #12]
   132ec:	761a      	strb	r2, [r3, #24]
}
   132ee:	46c0      	nop			; (mov r8, r8)
   132f0:	46bd      	mov	sp, r7
   132f2:	b004      	add	sp, #16
   132f4:	bd80      	pop	{r7, pc}
	...

000132f8 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   132f8:	b590      	push	{r4, r7, lr}
   132fa:	b087      	sub	sp, #28
   132fc:	af00      	add	r7, sp, #0
   132fe:	6078      	str	r0, [r7, #4]
   13300:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13302:	687b      	ldr	r3, [r7, #4]
   13304:	681b      	ldr	r3, [r3, #0]
   13306:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   13308:	683b      	ldr	r3, [r7, #0]
   1330a:	685a      	ldr	r2, [r3, #4]
   1330c:	687b      	ldr	r3, [r7, #4]
   1330e:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   13310:	683b      	ldr	r3, [r7, #0]
   13312:	885a      	ldrh	r2, [r3, #2]
   13314:	687b      	ldr	r3, [r7, #4]
   13316:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   13318:	687b      	ldr	r3, [r7, #4]
   1331a:	2224      	movs	r2, #36	; 0x24
   1331c:	2101      	movs	r1, #1
   1331e:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   13320:	687b      	ldr	r3, [r7, #4]
   13322:	2225      	movs	r2, #37	; 0x25
   13324:	2105      	movs	r1, #5
   13326:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13328:	693b      	ldr	r3, [r7, #16]
   1332a:	681b      	ldr	r3, [r3, #0]
   1332c:	011b      	lsls	r3, r3, #4
   1332e:	0fdb      	lsrs	r3, r3, #31
   13330:	b2db      	uxtb	r3, r3
   13332:	001a      	movs	r2, r3
   13334:	230f      	movs	r3, #15
   13336:	18fb      	adds	r3, r7, r3
   13338:	1e51      	subs	r1, r2, #1
   1333a:	418a      	sbcs	r2, r1
   1333c:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   1333e:	683b      	ldr	r3, [r7, #0]
   13340:	7a5b      	ldrb	r3, [r3, #9]
   13342:	2b00      	cmp	r3, #0
   13344:	d006      	beq.n	13354 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   13346:	683b      	ldr	r3, [r7, #0]
   13348:	7a9a      	ldrb	r2, [r3, #10]
   1334a:	687b      	ldr	r3, [r7, #4]
   1334c:	0011      	movs	r1, r2
   1334e:	0018      	movs	r0, r3
   13350:	4b3b      	ldr	r3, [pc, #236]	; (13440 <_i2c_master_read_packet+0x148>)
   13352:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   13354:	230f      	movs	r3, #15
   13356:	18fb      	adds	r3, r7, r3
   13358:	781b      	ldrb	r3, [r3, #0]
   1335a:	2b00      	cmp	r3, #0
   1335c:	d00b      	beq.n	13376 <_i2c_master_read_packet+0x7e>
   1335e:	683b      	ldr	r3, [r7, #0]
   13360:	885b      	ldrh	r3, [r3, #2]
   13362:	2b01      	cmp	r3, #1
   13364:	d107      	bne.n	13376 <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13366:	693b      	ldr	r3, [r7, #16]
   13368:	685b      	ldr	r3, [r3, #4]
   1336a:	2280      	movs	r2, #128	; 0x80
   1336c:	02d2      	lsls	r2, r2, #11
   1336e:	431a      	orrs	r2, r3
   13370:	693b      	ldr	r3, [r7, #16]
   13372:	605a      	str	r2, [r3, #4]
   13374:	e005      	b.n	13382 <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13376:	693b      	ldr	r3, [r7, #16]
   13378:	685b      	ldr	r3, [r3, #4]
   1337a:	4a32      	ldr	r2, [pc, #200]	; (13444 <_i2c_master_read_packet+0x14c>)
   1337c:	401a      	ands	r2, r3
   1337e:	693b      	ldr	r3, [r7, #16]
   13380:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   13382:	683b      	ldr	r3, [r7, #0]
   13384:	7a1b      	ldrb	r3, [r3, #8]
   13386:	2b00      	cmp	r3, #0
   13388:	d045      	beq.n	13416 <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   1338a:	683b      	ldr	r3, [r7, #0]
   1338c:	881b      	ldrh	r3, [r3, #0]
   1338e:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13390:	683b      	ldr	r3, [r7, #0]
   13392:	7a5b      	ldrb	r3, [r3, #9]
   13394:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   13396:	4313      	orrs	r3, r2
   13398:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1339a:	2380      	movs	r3, #128	; 0x80
   1339c:	021b      	lsls	r3, r3, #8
   1339e:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   133a0:	693b      	ldr	r3, [r7, #16]
   133a2:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   133a4:	2317      	movs	r3, #23
   133a6:	18fc      	adds	r4, r7, r3
   133a8:	687b      	ldr	r3, [r7, #4]
   133aa:	0018      	movs	r0, r3
   133ac:	4b26      	ldr	r3, [pc, #152]	; (13448 <_i2c_master_read_packet+0x150>)
   133ae:	4798      	blx	r3
   133b0:	0003      	movs	r3, r0
   133b2:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   133b4:	693b      	ldr	r3, [r7, #16]
   133b6:	685b      	ldr	r3, [r3, #4]
   133b8:	4a22      	ldr	r2, [pc, #136]	; (13444 <_i2c_master_read_packet+0x14c>)
   133ba:	401a      	ands	r2, r3
   133bc:	693b      	ldr	r3, [r7, #16]
   133be:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   133c0:	2317      	movs	r3, #23
   133c2:	18fb      	adds	r3, r7, r3
   133c4:	781b      	ldrb	r3, [r3, #0]
   133c6:	2b00      	cmp	r3, #0
   133c8:	d107      	bne.n	133da <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   133ca:	2317      	movs	r3, #23
   133cc:	18fc      	adds	r4, r7, r3
   133ce:	687b      	ldr	r3, [r7, #4]
   133d0:	0018      	movs	r0, r3
   133d2:	4b1e      	ldr	r3, [pc, #120]	; (1344c <_i2c_master_read_packet+0x154>)
   133d4:	4798      	blx	r3
   133d6:	0003      	movs	r3, r0
   133d8:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   133da:	2317      	movs	r3, #23
   133dc:	18fb      	adds	r3, r7, r3
   133de:	781b      	ldrb	r3, [r3, #0]
   133e0:	2b00      	cmp	r3, #0
   133e2:	d114      	bne.n	1340e <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   133e4:	693b      	ldr	r3, [r7, #16]
   133e6:	2203      	movs	r2, #3
   133e8:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   133ea:	683b      	ldr	r3, [r7, #0]
   133ec:	881b      	ldrh	r3, [r3, #0]
   133ee:	0a1b      	lsrs	r3, r3, #8
   133f0:	b29b      	uxth	r3, r3
   133f2:	2278      	movs	r2, #120	; 0x78
   133f4:	4313      	orrs	r3, r2
   133f6:	b29b      	uxth	r3, r3
   133f8:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   133fa:	683b      	ldr	r3, [r7, #0]
   133fc:	7a5b      	ldrb	r3, [r3, #9]
   133fe:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13400:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13402:	2201      	movs	r2, #1
   13404:	4313      	orrs	r3, r2
   13406:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13408:	693b      	ldr	r3, [r7, #16]
   1340a:	625a      	str	r2, [r3, #36]	; 0x24
   1340c:	e012      	b.n	13434 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   1340e:	2317      	movs	r3, #23
   13410:	18fb      	adds	r3, r7, r3
   13412:	781b      	ldrb	r3, [r3, #0]
   13414:	e00f      	b.n	13436 <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   13416:	693b      	ldr	r3, [r7, #16]
   13418:	2203      	movs	r2, #3
   1341a:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   1341c:	683b      	ldr	r3, [r7, #0]
   1341e:	881b      	ldrh	r3, [r3, #0]
   13420:	005b      	lsls	r3, r3, #1
   13422:	2201      	movs	r2, #1
   13424:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13426:	683b      	ldr	r3, [r7, #0]
   13428:	7a5b      	ldrb	r3, [r3, #9]
   1342a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   1342c:	4313      	orrs	r3, r2
   1342e:	001a      	movs	r2, r3
   13430:	693b      	ldr	r3, [r7, #16]
   13432:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   13434:	2300      	movs	r3, #0
}
   13436:	0018      	movs	r0, r3
   13438:	46bd      	mov	sp, r7
   1343a:	b007      	add	sp, #28
   1343c:	bd90      	pop	{r4, r7, pc}
   1343e:	46c0      	nop			; (mov r8, r8)
   13440:	00016d31 	.word	0x00016d31
   13444:	fffbffff 	.word	0xfffbffff
   13448:	00016cd3 	.word	0x00016cd3
   1344c:	00016c75 	.word	0x00016c75

00013450 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13450:	b580      	push	{r7, lr}
   13452:	b082      	sub	sp, #8
   13454:	af00      	add	r7, sp, #0
   13456:	6078      	str	r0, [r7, #4]
   13458:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   1345a:	687b      	ldr	r3, [r7, #4]
   1345c:	8b9b      	ldrh	r3, [r3, #28]
   1345e:	b29b      	uxth	r3, r3
   13460:	2b00      	cmp	r3, #0
   13462:	d001      	beq.n	13468 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   13464:	2305      	movs	r3, #5
   13466:	e00c      	b.n	13482 <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   13468:	687b      	ldr	r3, [r7, #4]
   1346a:	2201      	movs	r2, #1
   1346c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   1346e:	687b      	ldr	r3, [r7, #4]
   13470:	2201      	movs	r2, #1
   13472:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   13474:	683a      	ldr	r2, [r7, #0]
   13476:	687b      	ldr	r3, [r7, #4]
   13478:	0011      	movs	r1, r2
   1347a:	0018      	movs	r0, r3
   1347c:	4b03      	ldr	r3, [pc, #12]	; (1348c <i2c_master_read_packet_job+0x3c>)
   1347e:	4798      	blx	r3
   13480:	0003      	movs	r3, r0
}
   13482:	0018      	movs	r0, r3
   13484:	46bd      	mov	sp, r7
   13486:	b002      	add	sp, #8
   13488:	bd80      	pop	{r7, pc}
   1348a:	46c0      	nop			; (mov r8, r8)
   1348c:	000132f9 	.word	0x000132f9

00013490 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13490:	b580      	push	{r7, lr}
   13492:	b084      	sub	sp, #16
   13494:	af00      	add	r7, sp, #0
   13496:	6078      	str	r0, [r7, #4]
   13498:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1349a:	687b      	ldr	r3, [r7, #4]
   1349c:	681b      	ldr	r3, [r3, #0]
   1349e:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   134a0:	683b      	ldr	r3, [r7, #0]
   134a2:	7a5b      	ldrb	r3, [r3, #9]
   134a4:	2b00      	cmp	r3, #0
   134a6:	d006      	beq.n	134b6 <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   134a8:	683b      	ldr	r3, [r7, #0]
   134aa:	7a9a      	ldrb	r2, [r3, #10]
   134ac:	687b      	ldr	r3, [r7, #4]
   134ae:	0011      	movs	r1, r2
   134b0:	0018      	movs	r0, r3
   134b2:	4b1e      	ldr	r3, [pc, #120]	; (1352c <_i2c_master_write_packet+0x9c>)
   134b4:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   134b6:	68fb      	ldr	r3, [r7, #12]
   134b8:	685b      	ldr	r3, [r3, #4]
   134ba:	4a1d      	ldr	r2, [pc, #116]	; (13530 <_i2c_master_write_packet+0xa0>)
   134bc:	401a      	ands	r2, r3
   134be:	68fb      	ldr	r3, [r7, #12]
   134c0:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   134c2:	683b      	ldr	r3, [r7, #0]
   134c4:	685a      	ldr	r2, [r3, #4]
   134c6:	687b      	ldr	r3, [r7, #4]
   134c8:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   134ca:	683b      	ldr	r3, [r7, #0]
   134cc:	885a      	ldrh	r2, [r3, #2]
   134ce:	687b      	ldr	r3, [r7, #4]
   134d0:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   134d2:	687b      	ldr	r3, [r7, #4]
   134d4:	2224      	movs	r2, #36	; 0x24
   134d6:	2100      	movs	r1, #0
   134d8:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   134da:	687b      	ldr	r3, [r7, #4]
   134dc:	2225      	movs	r2, #37	; 0x25
   134de:	2105      	movs	r1, #5
   134e0:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   134e2:	68fb      	ldr	r3, [r7, #12]
   134e4:	2203      	movs	r2, #3
   134e6:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   134e8:	683b      	ldr	r3, [r7, #0]
   134ea:	7a1b      	ldrb	r3, [r3, #8]
   134ec:	2b00      	cmp	r3, #0
   134ee:	d00d      	beq.n	1350c <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   134f0:	683b      	ldr	r3, [r7, #0]
   134f2:	881b      	ldrh	r3, [r3, #0]
   134f4:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   134f6:	683b      	ldr	r3, [r7, #0]
   134f8:	7a5b      	ldrb	r3, [r3, #9]
   134fa:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   134fc:	4313      	orrs	r3, r2
   134fe:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13500:	2380      	movs	r3, #128	; 0x80
   13502:	021b      	lsls	r3, r3, #8
   13504:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13506:	68fb      	ldr	r3, [r7, #12]
   13508:	625a      	str	r2, [r3, #36]	; 0x24
   1350a:	e009      	b.n	13520 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   1350c:	683b      	ldr	r3, [r7, #0]
   1350e:	881b      	ldrh	r3, [r3, #0]
   13510:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13512:	683b      	ldr	r3, [r7, #0]
   13514:	7a5b      	ldrb	r3, [r3, #9]
   13516:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13518:	4313      	orrs	r3, r2
   1351a:	001a      	movs	r2, r3
   1351c:	68fb      	ldr	r3, [r7, #12]
   1351e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   13520:	2300      	movs	r3, #0
}
   13522:	0018      	movs	r0, r3
   13524:	46bd      	mov	sp, r7
   13526:	b004      	add	sp, #16
   13528:	bd80      	pop	{r7, pc}
   1352a:	46c0      	nop			; (mov r8, r8)
   1352c:	00016d31 	.word	0x00016d31
   13530:	fffbffff 	.word	0xfffbffff

00013534 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13534:	b580      	push	{r7, lr}
   13536:	b082      	sub	sp, #8
   13538:	af00      	add	r7, sp, #0
   1353a:	6078      	str	r0, [r7, #4]
   1353c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   1353e:	687b      	ldr	r3, [r7, #4]
   13540:	8b9b      	ldrh	r3, [r3, #28]
   13542:	b29b      	uxth	r3, r3
   13544:	2b00      	cmp	r3, #0
   13546:	d001      	beq.n	1354c <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   13548:	2305      	movs	r3, #5
   1354a:	e00c      	b.n	13566 <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   1354c:	687b      	ldr	r3, [r7, #4]
   1354e:	2201      	movs	r2, #1
   13550:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   13552:	687b      	ldr	r3, [r7, #4]
   13554:	2201      	movs	r2, #1
   13556:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   13558:	683a      	ldr	r2, [r7, #0]
   1355a:	687b      	ldr	r3, [r7, #4]
   1355c:	0011      	movs	r1, r2
   1355e:	0018      	movs	r0, r3
   13560:	4b03      	ldr	r3, [pc, #12]	; (13570 <i2c_master_write_packet_job+0x3c>)
   13562:	4798      	blx	r3
   13564:	0003      	movs	r3, r0
}
   13566:	0018      	movs	r0, r3
   13568:	46bd      	mov	sp, r7
   1356a:	b002      	add	sp, #8
   1356c:	bd80      	pop	{r7, pc}
   1356e:	46c0      	nop			; (mov r8, r8)
   13570:	00013491 	.word	0x00013491

00013574 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   13574:	b580      	push	{r7, lr}
   13576:	b086      	sub	sp, #24
   13578:	af00      	add	r7, sp, #0
   1357a:	0002      	movs	r2, r0
   1357c:	1dfb      	adds	r3, r7, #7
   1357e:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   13580:	1dfb      	adds	r3, r7, #7
   13582:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   13584:	4b93      	ldr	r3, [pc, #588]	; (137d4 <_i2c_master_interrupt_handler+0x260>)
   13586:	0092      	lsls	r2, r2, #2
   13588:	58d3      	ldr	r3, [r2, r3]
   1358a:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1358c:	697b      	ldr	r3, [r7, #20]
   1358e:	681b      	ldr	r3, [r3, #0]
   13590:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13592:	693b      	ldr	r3, [r7, #16]
   13594:	681b      	ldr	r3, [r3, #0]
   13596:	011b      	lsls	r3, r3, #4
   13598:	0fdb      	lsrs	r3, r3, #31
   1359a:	b2db      	uxtb	r3, r3
   1359c:	001a      	movs	r2, r3
   1359e:	230f      	movs	r3, #15
   135a0:	18fb      	adds	r3, r7, r3
   135a2:	1e51      	subs	r1, r2, #1
   135a4:	418a      	sbcs	r2, r1
   135a6:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   135a8:	230e      	movs	r3, #14
   135aa:	18fb      	adds	r3, r7, r3
   135ac:	697a      	ldr	r2, [r7, #20]
   135ae:	7e52      	ldrb	r2, [r2, #25]
   135b0:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   135b2:	697b      	ldr	r3, [r7, #20]
   135b4:	7e1b      	ldrb	r3, [r3, #24]
   135b6:	b2da      	uxtb	r2, r3
   135b8:	230e      	movs	r3, #14
   135ba:	18fb      	adds	r3, r7, r3
   135bc:	210e      	movs	r1, #14
   135be:	1879      	adds	r1, r7, r1
   135c0:	7809      	ldrb	r1, [r1, #0]
   135c2:	400a      	ands	r2, r1
   135c4:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   135c6:	697b      	ldr	r3, [r7, #20]
   135c8:	8b5b      	ldrh	r3, [r3, #26]
   135ca:	b29b      	uxth	r3, r3
   135cc:	2b00      	cmp	r3, #0
   135ce:	d109      	bne.n	135e4 <_i2c_master_interrupt_handler+0x70>
   135d0:	697b      	ldr	r3, [r7, #20]
   135d2:	8b9b      	ldrh	r3, [r3, #28]
   135d4:	b29b      	uxth	r3, r3
   135d6:	2b00      	cmp	r3, #0
   135d8:	d004      	beq.n	135e4 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   135da:	697b      	ldr	r3, [r7, #20]
   135dc:	0018      	movs	r0, r3
   135de:	4b7e      	ldr	r3, [pc, #504]	; (137d8 <_i2c_master_interrupt_handler+0x264>)
   135e0:	4798      	blx	r3
   135e2:	e070      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   135e4:	697b      	ldr	r3, [r7, #20]
   135e6:	8b5b      	ldrh	r3, [r3, #26]
   135e8:	b29b      	uxth	r3, r3
   135ea:	2b00      	cmp	r3, #0
   135ec:	d039      	beq.n	13662 <_i2c_master_interrupt_handler+0xee>
   135ee:	697b      	ldr	r3, [r7, #20]
   135f0:	8b9b      	ldrh	r3, [r3, #28]
   135f2:	b29b      	uxth	r3, r3
   135f4:	2b00      	cmp	r3, #0
   135f6:	d134      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   135f8:	697b      	ldr	r3, [r7, #20]
   135fa:	2225      	movs	r2, #37	; 0x25
   135fc:	5c9b      	ldrb	r3, [r3, r2]
   135fe:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13600:	2b05      	cmp	r3, #5
   13602:	d12e      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   13604:	697b      	ldr	r3, [r7, #20]
   13606:	2224      	movs	r2, #36	; 0x24
   13608:	5c9b      	ldrb	r3, [r3, r2]
   1360a:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   1360c:	2b00      	cmp	r3, #0
   1360e:	d128      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13610:	693b      	ldr	r3, [r7, #16]
   13612:	2203      	movs	r2, #3
   13614:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   13616:	697b      	ldr	r3, [r7, #20]
   13618:	2200      	movs	r2, #0
   1361a:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   1361c:	697b      	ldr	r3, [r7, #20]
   1361e:	2225      	movs	r2, #37	; 0x25
   13620:	2100      	movs	r1, #0
   13622:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   13624:	697b      	ldr	r3, [r7, #20]
   13626:	7a9b      	ldrb	r3, [r3, #10]
   13628:	2b00      	cmp	r3, #0
   1362a:	d00b      	beq.n	13644 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   1362c:	697b      	ldr	r3, [r7, #20]
   1362e:	0018      	movs	r0, r3
   13630:	4b6a      	ldr	r3, [pc, #424]	; (137dc <_i2c_master_interrupt_handler+0x268>)
   13632:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   13634:	693b      	ldr	r3, [r7, #16]
   13636:	685b      	ldr	r3, [r3, #4]
   13638:	22c0      	movs	r2, #192	; 0xc0
   1363a:	0292      	lsls	r2, r2, #10
   1363c:	431a      	orrs	r2, r3
   1363e:	693b      	ldr	r3, [r7, #16]
   13640:	605a      	str	r2, [r3, #4]
   13642:	e002      	b.n	1364a <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   13644:	693b      	ldr	r3, [r7, #16]
   13646:	2201      	movs	r2, #1
   13648:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   1364a:	230e      	movs	r3, #14
   1364c:	18fb      	adds	r3, r7, r3
   1364e:	781b      	ldrb	r3, [r3, #0]
   13650:	2201      	movs	r2, #1
   13652:	4013      	ands	r3, r2
   13654:	d037      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13656:	697b      	ldr	r3, [r7, #20]
   13658:	68db      	ldr	r3, [r3, #12]
   1365a:	697a      	ldr	r2, [r7, #20]
   1365c:	0010      	movs	r0, r2
   1365e:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   13660:	e031      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   13662:	697b      	ldr	r3, [r7, #20]
   13664:	8b5b      	ldrh	r3, [r3, #26]
   13666:	b29b      	uxth	r3, r3
   13668:	2b00      	cmp	r3, #0
   1366a:	d02c      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
   1366c:	697b      	ldr	r3, [r7, #20]
   1366e:	8b9b      	ldrh	r3, [r3, #28]
   13670:	b29b      	uxth	r3, r3
   13672:	2b00      	cmp	r3, #0
   13674:	d027      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13676:	693b      	ldr	r3, [r7, #16]
   13678:	8b5b      	ldrh	r3, [r3, #26]
   1367a:	b29b      	uxth	r3, r3
   1367c:	001a      	movs	r2, r3
   1367e:	2320      	movs	r3, #32
   13680:	4013      	ands	r3, r2
   13682:	d111      	bne.n	136a8 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13684:	230f      	movs	r3, #15
   13686:	18fb      	adds	r3, r7, r3
   13688:	781b      	ldrb	r3, [r3, #0]
   1368a:	2201      	movs	r2, #1
   1368c:	4053      	eors	r3, r2
   1368e:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13690:	2b00      	cmp	r3, #0
   13692:	d104      	bne.n	1369e <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13694:	697b      	ldr	r3, [r7, #20]
   13696:	8b9b      	ldrh	r3, [r3, #28]
   13698:	b29b      	uxth	r3, r3
   1369a:	2b01      	cmp	r3, #1
   1369c:	d004      	beq.n	136a8 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   1369e:	697b      	ldr	r3, [r7, #20]
   136a0:	2225      	movs	r2, #37	; 0x25
   136a2:	2141      	movs	r1, #65	; 0x41
   136a4:	5499      	strb	r1, [r3, r2]
   136a6:	e00e      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   136a8:	697b      	ldr	r3, [r7, #20]
   136aa:	2224      	movs	r2, #36	; 0x24
   136ac:	5c9b      	ldrb	r3, [r3, r2]
   136ae:	b2db      	uxtb	r3, r3
   136b0:	2b00      	cmp	r3, #0
   136b2:	d104      	bne.n	136be <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   136b4:	697b      	ldr	r3, [r7, #20]
   136b6:	0018      	movs	r0, r3
   136b8:	4b49      	ldr	r3, [pc, #292]	; (137e0 <_i2c_master_interrupt_handler+0x26c>)
   136ba:	4798      	blx	r3
   136bc:	e003      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   136be:	697b      	ldr	r3, [r7, #20]
   136c0:	0018      	movs	r0, r3
   136c2:	4b48      	ldr	r3, [pc, #288]	; (137e4 <_i2c_master_interrupt_handler+0x270>)
   136c4:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   136c6:	697b      	ldr	r3, [r7, #20]
   136c8:	8b5b      	ldrh	r3, [r3, #26]
   136ca:	b29b      	uxth	r3, r3
   136cc:	2b00      	cmp	r3, #0
   136ce:	d047      	beq.n	13760 <_i2c_master_interrupt_handler+0x1ec>
   136d0:	697b      	ldr	r3, [r7, #20]
   136d2:	8b9b      	ldrh	r3, [r3, #28]
   136d4:	b29b      	uxth	r3, r3
   136d6:	2b00      	cmp	r3, #0
   136d8:	d142      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   136da:	697b      	ldr	r3, [r7, #20]
   136dc:	2225      	movs	r2, #37	; 0x25
   136de:	5c9b      	ldrb	r3, [r3, r2]
   136e0:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   136e2:	2b05      	cmp	r3, #5
   136e4:	d13c      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   136e6:	697b      	ldr	r3, [r7, #20]
   136e8:	2224      	movs	r2, #36	; 0x24
   136ea:	5c9b      	ldrb	r3, [r3, r2]
   136ec:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   136ee:	2b01      	cmp	r3, #1
   136f0:	d136      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   136f2:	693b      	ldr	r3, [r7, #16]
   136f4:	7e1b      	ldrb	r3, [r3, #24]
   136f6:	b2db      	uxtb	r3, r3
   136f8:	001a      	movs	r2, r3
   136fa:	2302      	movs	r3, #2
   136fc:	4013      	ands	r3, r2
   136fe:	d002      	beq.n	13706 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   13700:	693b      	ldr	r3, [r7, #16]
   13702:	2202      	movs	r2, #2
   13704:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13706:	693b      	ldr	r3, [r7, #16]
   13708:	2203      	movs	r2, #3
   1370a:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   1370c:	697b      	ldr	r3, [r7, #20]
   1370e:	2200      	movs	r2, #0
   13710:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   13712:	697b      	ldr	r3, [r7, #20]
   13714:	2225      	movs	r2, #37	; 0x25
   13716:	2100      	movs	r1, #0
   13718:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   1371a:	230e      	movs	r3, #14
   1371c:	18fb      	adds	r3, r7, r3
   1371e:	781b      	ldrb	r3, [r3, #0]
   13720:	2202      	movs	r2, #2
   13722:	4013      	ands	r3, r2
   13724:	d00b      	beq.n	1373e <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   13726:	697b      	ldr	r3, [r7, #20]
   13728:	2224      	movs	r2, #36	; 0x24
   1372a:	5c9b      	ldrb	r3, [r3, r2]
   1372c:	b2db      	uxtb	r3, r3
   1372e:	2b01      	cmp	r3, #1
   13730:	d105      	bne.n	1373e <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   13732:	697b      	ldr	r3, [r7, #20]
   13734:	691b      	ldr	r3, [r3, #16]
   13736:	697a      	ldr	r2, [r7, #20]
   13738:	0010      	movs	r0, r2
   1373a:	4798      	blx	r3
   1373c:	e010      	b.n	13760 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   1373e:	230e      	movs	r3, #14
   13740:	18fb      	adds	r3, r7, r3
   13742:	781b      	ldrb	r3, [r3, #0]
   13744:	2201      	movs	r2, #1
   13746:	4013      	ands	r3, r2
   13748:	d00a      	beq.n	13760 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   1374a:	697b      	ldr	r3, [r7, #20]
   1374c:	2224      	movs	r2, #36	; 0x24
   1374e:	5c9b      	ldrb	r3, [r3, r2]
   13750:	b2db      	uxtb	r3, r3
   13752:	2b00      	cmp	r3, #0
   13754:	d104      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13756:	697b      	ldr	r3, [r7, #20]
   13758:	68db      	ldr	r3, [r3, #12]
   1375a:	697a      	ldr	r2, [r7, #20]
   1375c:	0010      	movs	r0, r2
   1375e:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   13760:	697b      	ldr	r3, [r7, #20]
   13762:	2225      	movs	r2, #37	; 0x25
   13764:	5c9b      	ldrb	r3, [r3, r2]
   13766:	b2db      	uxtb	r3, r3
   13768:	2b05      	cmp	r3, #5
   1376a:	d02e      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
   1376c:	697b      	ldr	r3, [r7, #20]
   1376e:	2225      	movs	r2, #37	; 0x25
   13770:	5c9b      	ldrb	r3, [r3, r2]
   13772:	b2db      	uxtb	r3, r3
   13774:	2b00      	cmp	r3, #0
   13776:	d028      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   13778:	693b      	ldr	r3, [r7, #16]
   1377a:	2203      	movs	r2, #3
   1377c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   1377e:	697b      	ldr	r3, [r7, #20]
   13780:	2200      	movs	r2, #0
   13782:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   13784:	697b      	ldr	r3, [r7, #20]
   13786:	2200      	movs	r2, #0
   13788:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1378a:	697b      	ldr	r3, [r7, #20]
   1378c:	2225      	movs	r2, #37	; 0x25
   1378e:	5c9b      	ldrb	r3, [r3, r2]
   13790:	b2db      	uxtb	r3, r3
   13792:	2b41      	cmp	r3, #65	; 0x41
   13794:	d00e      	beq.n	137b4 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   13796:	697b      	ldr	r3, [r7, #20]
   13798:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1379a:	2b00      	cmp	r3, #0
   1379c:	d00a      	beq.n	137b4 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   1379e:	697b      	ldr	r3, [r7, #20]
   137a0:	0018      	movs	r0, r3
   137a2:	4b0e      	ldr	r3, [pc, #56]	; (137dc <_i2c_master_interrupt_handler+0x268>)
   137a4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   137a6:	693b      	ldr	r3, [r7, #16]
   137a8:	685b      	ldr	r3, [r3, #4]
   137aa:	22e0      	movs	r2, #224	; 0xe0
   137ac:	02d2      	lsls	r2, r2, #11
   137ae:	431a      	orrs	r2, r3
   137b0:	693b      	ldr	r3, [r7, #16]
   137b2:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   137b4:	230e      	movs	r3, #14
   137b6:	18fb      	adds	r3, r7, r3
   137b8:	781b      	ldrb	r3, [r3, #0]
   137ba:	2204      	movs	r2, #4
   137bc:	4013      	ands	r3, r2
   137be:	d004      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   137c0:	697b      	ldr	r3, [r7, #20]
   137c2:	695b      	ldr	r3, [r3, #20]
   137c4:	697a      	ldr	r2, [r7, #20]
   137c6:	0010      	movs	r0, r2
   137c8:	4798      	blx	r3
		}
	}
}
   137ca:	46c0      	nop			; (mov r8, r8)
   137cc:	46bd      	mov	sp, r7
   137ce:	b006      	add	sp, #24
   137d0:	bd80      	pop	{r7, pc}
   137d2:	46c0      	nop			; (mov r8, r8)
   137d4:	20005bcc 	.word	0x20005bcc
   137d8:	000131f5 	.word	0x000131f5
   137dc:	00013065 	.word	0x00013065
   137e0:	00013179 	.word	0x00013179
   137e4:	00013089 	.word	0x00013089

000137e8 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   137e8:	b580      	push	{r7, lr}
   137ea:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   137ec:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   137f0:	4b02      	ldr	r3, [pc, #8]	; (137fc <NVIC_SystemReset+0x14>)
   137f2:	4a03      	ldr	r2, [pc, #12]	; (13800 <NVIC_SystemReset+0x18>)
   137f4:	60da      	str	r2, [r3, #12]
   137f6:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   137fa:	e7fe      	b.n	137fa <NVIC_SystemReset+0x12>
   137fc:	e000ed00 	.word	0xe000ed00
   13800:	05fa0004 	.word	0x05fa0004

00013804 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   13804:	b580      	push	{r7, lr}
   13806:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   13808:	4b02      	ldr	r3, [pc, #8]	; (13814 <system_reset+0x10>)
   1380a:	4798      	blx	r3
}
   1380c:	46c0      	nop			; (mov r8, r8)
   1380e:	46bd      	mov	sp, r7
   13810:	bd80      	pop	{r7, pc}
   13812:	46c0      	nop			; (mov r8, r8)
   13814:	000137e9 	.word	0x000137e9

00013818 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   13818:	b580      	push	{r7, lr}
   1381a:	b086      	sub	sp, #24
   1381c:	af00      	add	r7, sp, #0
   1381e:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   13820:	4b9c      	ldr	r3, [pc, #624]	; (13a94 <vCommandConsoleTask+0x27c>)
   13822:	0018      	movs	r0, r3
   13824:	4b9c      	ldr	r3, [pc, #624]	; (13a98 <vCommandConsoleTask+0x280>)
   13826:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   13828:	4b9c      	ldr	r3, [pc, #624]	; (13a9c <vCommandConsoleTask+0x284>)
   1382a:	0018      	movs	r0, r3
   1382c:	4b9a      	ldr	r3, [pc, #616]	; (13a98 <vCommandConsoleTask+0x280>)
   1382e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   13830:	4b9b      	ldr	r3, [pc, #620]	; (13aa0 <vCommandConsoleTask+0x288>)
   13832:	0018      	movs	r0, r3
   13834:	4b98      	ldr	r3, [pc, #608]	; (13a98 <vCommandConsoleTask+0x280>)
   13836:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xSendTestData);
   13838:	4b9a      	ldr	r3, [pc, #616]	; (13aa4 <vCommandConsoleTask+0x28c>)
   1383a:	0018      	movs	r0, r3
   1383c:	4b96      	ldr	r3, [pc, #600]	; (13a98 <vCommandConsoleTask+0x280>)
   1383e:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   13840:	4b99      	ldr	r3, [pc, #612]	; (13aa8 <vCommandConsoleTask+0x290>)
   13842:	0018      	movs	r0, r3
   13844:	4b94      	ldr	r3, [pc, #592]	; (13a98 <vCommandConsoleTask+0x280>)
   13846:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xSendWeightData);
   13848:	4b98      	ldr	r3, [pc, #608]	; (13aac <vCommandConsoleTask+0x294>)
   1384a:	0018      	movs	r0, r3
   1384c:	4b92      	ldr	r3, [pc, #584]	; (13a98 <vCommandConsoleTask+0x280>)
   1384e:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xServoOpen);
   13850:	4b97      	ldr	r3, [pc, #604]	; (13ab0 <vCommandConsoleTask+0x298>)
   13852:	0018      	movs	r0, r3
   13854:	4b90      	ldr	r3, [pc, #576]	; (13a98 <vCommandConsoleTask+0x280>)
   13856:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xServoClose);
   13858:	4b96      	ldr	r3, [pc, #600]	; (13ab4 <vCommandConsoleTask+0x29c>)
   1385a:	0018      	movs	r0, r3
   1385c:	4b8e      	ldr	r3, [pc, #568]	; (13a98 <vCommandConsoleTask+0x280>)
   1385e:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   13860:	2317      	movs	r3, #23
   13862:	18fb      	adds	r3, r7, r3
   13864:	2200      	movs	r2, #0
   13866:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   13868:	4b93      	ldr	r3, [pc, #588]	; (13ab8 <vCommandConsoleTask+0x2a0>)
   1386a:	0018      	movs	r0, r3
   1386c:	4b93      	ldr	r3, [pc, #588]	; (13abc <vCommandConsoleTask+0x2a4>)
   1386e:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   13870:	2203      	movs	r2, #3
   13872:	2100      	movs	r1, #0
   13874:	2001      	movs	r0, #1
   13876:	4b92      	ldr	r3, [pc, #584]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   13878:	4798      	blx	r3
   1387a:	0002      	movs	r2, r0
   1387c:	4b91      	ldr	r3, [pc, #580]	; (13ac4 <vCommandConsoleTask+0x2ac>)
   1387e:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   13880:	4b90      	ldr	r3, [pc, #576]	; (13ac4 <vCommandConsoleTask+0x2ac>)
   13882:	681b      	ldr	r3, [r3, #0]
   13884:	2b00      	cmp	r3, #0
   13886:	d107      	bne.n	13898 <vCommandConsoleTask+0x80>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   13888:	4b8f      	ldr	r3, [pc, #572]	; (13ac8 <vCommandConsoleTask+0x2b0>)
   1388a:	0019      	movs	r1, r3
   1388c:	2003      	movs	r0, #3
   1388e:	4b8f      	ldr	r3, [pc, #572]	; (13acc <vCommandConsoleTask+0x2b4>)
   13890:	4798      	blx	r3
        vTaskSuspend(NULL);
   13892:	2000      	movs	r0, #0
   13894:	4b8e      	ldr	r3, [pc, #568]	; (13ad0 <vCommandConsoleTask+0x2b8>)
   13896:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   13898:	230c      	movs	r3, #12
   1389a:	18fb      	adds	r3, r7, r3
   1389c:	0018      	movs	r0, r3
   1389e:	4b8d      	ldr	r3, [pc, #564]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   138a0:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   138a2:	230c      	movs	r3, #12
   138a4:	18fb      	adds	r3, r7, r3
   138a6:	781b      	ldrb	r3, [r3, #0]
   138a8:	2b0a      	cmp	r3, #10
   138aa:	d004      	beq.n	138b6 <vCommandConsoleTask+0x9e>
   138ac:	230c      	movs	r3, #12
   138ae:	18fb      	adds	r3, r7, r3
   138b0:	781b      	ldrb	r3, [r3, #0]
   138b2:	2b0d      	cmp	r3, #13
   138b4:	d137      	bne.n	13926 <vCommandConsoleTask+0x10e>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   138b6:	4b88      	ldr	r3, [pc, #544]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   138b8:	0018      	movs	r0, r3
   138ba:	4b80      	ldr	r3, [pc, #512]	; (13abc <vCommandConsoleTask+0x2a4>)
   138bc:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   138be:	4b87      	ldr	r3, [pc, #540]	; (13adc <vCommandConsoleTask+0x2c4>)
   138c0:	2200      	movs	r2, #0
   138c2:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   138c4:	4b86      	ldr	r3, [pc, #536]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   138c6:	2200      	movs	r2, #0
   138c8:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   138ca:	4986      	ldr	r1, [pc, #536]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   138cc:	4b86      	ldr	r3, [pc, #536]	; (13ae8 <vCommandConsoleTask+0x2d0>)
   138ce:	2231      	movs	r2, #49	; 0x31
   138d0:	0018      	movs	r0, r3
   138d2:	4b86      	ldr	r3, [pc, #536]	; (13aec <vCommandConsoleTask+0x2d4>)
   138d4:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   138d6:	4b84      	ldr	r3, [pc, #528]	; (13ae8 <vCommandConsoleTask+0x2d0>)
   138d8:	2231      	movs	r2, #49	; 0x31
   138da:	2100      	movs	r1, #0
   138dc:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   138de:	4984      	ldr	r1, [pc, #528]	; (13af0 <vCommandConsoleTask+0x2d8>)
   138e0:	4b80      	ldr	r3, [pc, #512]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   138e2:	2264      	movs	r2, #100	; 0x64
   138e4:	0018      	movs	r0, r3
   138e6:	4b83      	ldr	r3, [pc, #524]	; (13af4 <vCommandConsoleTask+0x2dc>)
   138e8:	4798      	blx	r3
   138ea:	0003      	movs	r3, r0
   138ec:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   138ee:	4b80      	ldr	r3, [pc, #512]	; (13af0 <vCommandConsoleTask+0x2d8>)
   138f0:	2263      	movs	r2, #99	; 0x63
   138f2:	2100      	movs	r1, #0
   138f4:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   138f6:	4b7e      	ldr	r3, [pc, #504]	; (13af0 <vCommandConsoleTask+0x2d8>)
   138f8:	0018      	movs	r0, r3
   138fa:	4b70      	ldr	r3, [pc, #448]	; (13abc <vCommandConsoleTask+0x2a4>)
   138fc:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   138fe:	693b      	ldr	r3, [r7, #16]
   13900:	2b00      	cmp	r3, #0
   13902:	d1ec      	bne.n	138de <vCommandConsoleTask+0xc6>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   13904:	2317      	movs	r3, #23
   13906:	18fb      	adds	r3, r7, r3
   13908:	2200      	movs	r2, #0
   1390a:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   1390c:	4b75      	ldr	r3, [pc, #468]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   1390e:	2232      	movs	r2, #50	; 0x32
   13910:	2100      	movs	r1, #0
   13912:	0018      	movs	r0, r3
   13914:	4b78      	ldr	r3, [pc, #480]	; (13af8 <vCommandConsoleTask+0x2e0>)
   13916:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   13918:	4b75      	ldr	r3, [pc, #468]	; (13af0 <vCommandConsoleTask+0x2d8>)
   1391a:	2264      	movs	r2, #100	; 0x64
   1391c:	2100      	movs	r1, #0
   1391e:	0018      	movs	r0, r3
   13920:	4b75      	ldr	r3, [pc, #468]	; (13af8 <vCommandConsoleTask+0x2e0>)
   13922:	4798      	blx	r3
   13924:	e0b5      	b.n	13a92 <vCommandConsoleTask+0x27a>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   13926:	4b6d      	ldr	r3, [pc, #436]	; (13adc <vCommandConsoleTask+0x2c4>)
   13928:	781b      	ldrb	r3, [r3, #0]
   1392a:	2b00      	cmp	r3, #0
   1392c:	d059      	beq.n	139e2 <vCommandConsoleTask+0x1ca>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   1392e:	4b6c      	ldr	r3, [pc, #432]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   13930:	781b      	ldrb	r3, [r3, #0]
   13932:	2b03      	cmp	r3, #3
   13934:	d80c      	bhi.n	13950 <vCommandConsoleTask+0x138>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   13936:	4b6a      	ldr	r3, [pc, #424]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   13938:	781b      	ldrb	r3, [r3, #0]
   1393a:	1c5a      	adds	r2, r3, #1
   1393c:	b2d1      	uxtb	r1, r2
   1393e:	4a68      	ldr	r2, [pc, #416]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   13940:	7011      	strb	r1, [r2, #0]
   13942:	001a      	movs	r2, r3
   13944:	230c      	movs	r3, #12
   13946:	18fb      	adds	r3, r7, r3
   13948:	7819      	ldrb	r1, [r3, #0]
   1394a:	4b6c      	ldr	r3, [pc, #432]	; (13afc <vCommandConsoleTask+0x2e4>)
   1394c:	5499      	strb	r1, [r3, r2]
   1394e:	e005      	b.n	1395c <vCommandConsoleTask+0x144>
                } else {
                    isEscapeCode = false;
   13950:	4b62      	ldr	r3, [pc, #392]	; (13adc <vCommandConsoleTask+0x2c4>)
   13952:	2200      	movs	r2, #0
   13954:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   13956:	4b62      	ldr	r3, [pc, #392]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   13958:	2200      	movs	r2, #0
   1395a:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   1395c:	4b60      	ldr	r3, [pc, #384]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   1395e:	781b      	ldrb	r3, [r3, #0]
   13960:	2b01      	cmp	r3, #1
   13962:	d999      	bls.n	13898 <vCommandConsoleTask+0x80>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   13964:	4a66      	ldr	r2, [pc, #408]	; (13b00 <vCommandConsoleTask+0x2e8>)
   13966:	4b65      	ldr	r3, [pc, #404]	; (13afc <vCommandConsoleTask+0x2e4>)
   13968:	0011      	movs	r1, r2
   1396a:	0018      	movs	r0, r3
   1396c:	4b65      	ldr	r3, [pc, #404]	; (13b04 <vCommandConsoleTask+0x2ec>)
   1396e:	4798      	blx	r3
   13970:	1e03      	subs	r3, r0, #0
   13972:	d02f      	beq.n	139d4 <vCommandConsoleTask+0x1bc>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   13974:	4964      	ldr	r1, [pc, #400]	; (13b08 <vCommandConsoleTask+0x2f0>)
   13976:	4b5b      	ldr	r3, [pc, #364]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   13978:	221b      	movs	r2, #27
   1397a:	0018      	movs	r0, r3
   1397c:	4b63      	ldr	r3, [pc, #396]	; (13b0c <vCommandConsoleTask+0x2f4>)
   1397e:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   13980:	4b58      	ldr	r3, [pc, #352]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   13982:	0018      	movs	r0, r3
   13984:	4b4d      	ldr	r3, [pc, #308]	; (13abc <vCommandConsoleTask+0x2a4>)
   13986:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   13988:	2317      	movs	r3, #23
   1398a:	18fb      	adds	r3, r7, r3
   1398c:	2200      	movs	r2, #0
   1398e:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   13990:	4b54      	ldr	r3, [pc, #336]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   13992:	2232      	movs	r2, #50	; 0x32
   13994:	2100      	movs	r1, #0
   13996:	0018      	movs	r0, r3
   13998:	4b57      	ldr	r3, [pc, #348]	; (13af8 <vCommandConsoleTask+0x2e0>)
   1399a:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   1399c:	4952      	ldr	r1, [pc, #328]	; (13ae8 <vCommandConsoleTask+0x2d0>)
   1399e:	4b51      	ldr	r3, [pc, #324]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   139a0:	2231      	movs	r2, #49	; 0x31
   139a2:	0018      	movs	r0, r3
   139a4:	4b51      	ldr	r3, [pc, #324]	; (13aec <vCommandConsoleTask+0x2d4>)
   139a6:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   139a8:	4b4e      	ldr	r3, [pc, #312]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   139aa:	0018      	movs	r0, r3
   139ac:	4b58      	ldr	r3, [pc, #352]	; (13b10 <vCommandConsoleTask+0x2f8>)
   139ae:	4798      	blx	r3
   139b0:	0003      	movs	r3, r0
   139b2:	2b30      	cmp	r3, #48	; 0x30
   139b4:	d806      	bhi.n	139c4 <vCommandConsoleTask+0x1ac>
   139b6:	4b4c      	ldr	r3, [pc, #304]	; (13ae8 <vCommandConsoleTask+0x2d0>)
   139b8:	0018      	movs	r0, r3
   139ba:	4b55      	ldr	r3, [pc, #340]	; (13b10 <vCommandConsoleTask+0x2f8>)
   139bc:	4798      	blx	r3
   139be:	0003      	movs	r3, r0
   139c0:	b2da      	uxtb	r2, r3
   139c2:	e000      	b.n	139c6 <vCommandConsoleTask+0x1ae>
   139c4:	2231      	movs	r2, #49	; 0x31
   139c6:	2317      	movs	r3, #23
   139c8:	18fb      	adds	r3, r7, r3
   139ca:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   139cc:	4b45      	ldr	r3, [pc, #276]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   139ce:	0018      	movs	r0, r3
   139d0:	4b3a      	ldr	r3, [pc, #232]	; (13abc <vCommandConsoleTask+0x2a4>)
   139d2:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   139d4:	4b41      	ldr	r3, [pc, #260]	; (13adc <vCommandConsoleTask+0x2c4>)
   139d6:	2200      	movs	r2, #0
   139d8:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   139da:	4b41      	ldr	r3, [pc, #260]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   139dc:	2200      	movs	r2, #0
   139de:	701a      	strb	r2, [r3, #0]
   139e0:	e75a      	b.n	13898 <vCommandConsoleTask+0x80>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   139e2:	230c      	movs	r3, #12
   139e4:	18fb      	adds	r3, r7, r3
   139e6:	781b      	ldrb	r3, [r3, #0]
   139e8:	2b0d      	cmp	r3, #13
   139ea:	d100      	bne.n	139ee <vCommandConsoleTask+0x1d6>
   139ec:	e754      	b.n	13898 <vCommandConsoleTask+0x80>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   139ee:	230c      	movs	r3, #12
   139f0:	18fb      	adds	r3, r7, r3
   139f2:	781b      	ldrb	r3, [r3, #0]
   139f4:	2b08      	cmp	r3, #8
   139f6:	d004      	beq.n	13a02 <vCommandConsoleTask+0x1ea>
   139f8:	230c      	movs	r3, #12
   139fa:	18fb      	adds	r3, r7, r3
   139fc:	781b      	ldrb	r3, [r3, #0]
   139fe:	2b7f      	cmp	r3, #127	; 0x7f
   13a00:	d11c      	bne.n	13a3c <vCommandConsoleTask+0x224>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   13a02:	2308      	movs	r3, #8
   13a04:	18fb      	adds	r3, r7, r3
   13a06:	4a43      	ldr	r2, [pc, #268]	; (13b14 <vCommandConsoleTask+0x2fc>)
   13a08:	6812      	ldr	r2, [r2, #0]
   13a0a:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   13a0c:	2308      	movs	r3, #8
   13a0e:	18fb      	adds	r3, r7, r3
   13a10:	0018      	movs	r0, r3
   13a12:	4b2a      	ldr	r3, [pc, #168]	; (13abc <vCommandConsoleTask+0x2a4>)
   13a14:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   13a16:	2317      	movs	r3, #23
   13a18:	18fb      	adds	r3, r7, r3
   13a1a:	781b      	ldrb	r3, [r3, #0]
   13a1c:	2b00      	cmp	r3, #0
   13a1e:	d037      	beq.n	13a90 <vCommandConsoleTask+0x278>
                    cInputIndex--;
   13a20:	2317      	movs	r3, #23
   13a22:	18fb      	adds	r3, r7, r3
   13a24:	781a      	ldrb	r2, [r3, #0]
   13a26:	2317      	movs	r3, #23
   13a28:	18fb      	adds	r3, r7, r3
   13a2a:	3a01      	subs	r2, #1
   13a2c:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   13a2e:	2317      	movs	r3, #23
   13a30:	18fb      	adds	r3, r7, r3
   13a32:	781b      	ldrb	r3, [r3, #0]
   13a34:	4a2b      	ldr	r2, [pc, #172]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   13a36:	2100      	movs	r1, #0
   13a38:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13a3a:	e029      	b.n	13a90 <vCommandConsoleTask+0x278>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   13a3c:	230c      	movs	r3, #12
   13a3e:	18fb      	adds	r3, r7, r3
   13a40:	781b      	ldrb	r3, [r3, #0]
   13a42:	2b1b      	cmp	r3, #27
   13a44:	d106      	bne.n	13a54 <vCommandConsoleTask+0x23c>
                isEscapeCode = true;  // Next characters will be code arguments
   13a46:	4b25      	ldr	r3, [pc, #148]	; (13adc <vCommandConsoleTask+0x2c4>)
   13a48:	2201      	movs	r2, #1
   13a4a:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   13a4c:	4b24      	ldr	r3, [pc, #144]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   13a4e:	2200      	movs	r2, #0
   13a50:	701a      	strb	r2, [r3, #0]
   13a52:	e721      	b.n	13898 <vCommandConsoleTask+0x80>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   13a54:	2317      	movs	r3, #23
   13a56:	18fb      	adds	r3, r7, r3
   13a58:	781b      	ldrb	r3, [r3, #0]
   13a5a:	2b31      	cmp	r3, #49	; 0x31
   13a5c:	d80e      	bhi.n	13a7c <vCommandConsoleTask+0x264>
                    pcInputString[cInputIndex] = cRxedChar[0];
   13a5e:	2317      	movs	r3, #23
   13a60:	18fb      	adds	r3, r7, r3
   13a62:	781b      	ldrb	r3, [r3, #0]
   13a64:	220c      	movs	r2, #12
   13a66:	18ba      	adds	r2, r7, r2
   13a68:	7811      	ldrb	r1, [r2, #0]
   13a6a:	4a1e      	ldr	r2, [pc, #120]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   13a6c:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   13a6e:	2317      	movs	r3, #23
   13a70:	18fb      	adds	r3, r7, r3
   13a72:	781a      	ldrb	r2, [r3, #0]
   13a74:	2317      	movs	r3, #23
   13a76:	18fb      	adds	r3, r7, r3
   13a78:	3201      	adds	r2, #1
   13a7a:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   13a7c:	230c      	movs	r3, #12
   13a7e:	18fb      	adds	r3, r7, r3
   13a80:	2200      	movs	r2, #0
   13a82:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   13a84:	230c      	movs	r3, #12
   13a86:	18fb      	adds	r3, r7, r3
   13a88:	0018      	movs	r0, r3
   13a8a:	4b0c      	ldr	r3, [pc, #48]	; (13abc <vCommandConsoleTask+0x2a4>)
   13a8c:	4798      	blx	r3
   13a8e:	e703      	b.n	13898 <vCommandConsoleTask+0x80>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13a90:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   13a92:	e701      	b.n	13898 <vCommandConsoleTask+0x80>
   13a94:	00035df8 	.word	0x00035df8
   13a98:	00016e79 	.word	0x00016e79
   13a9c:	00035e68 	.word	0x00035e68
   13aa0:	00035e08 	.word	0x00035e08
   13aa4:	00035e28 	.word	0x00035e28
   13aa8:	00035e18 	.word	0x00035e18
   13aac:	00035e38 	.word	0x00035e38
   13ab0:	00035e48 	.word	0x00035e48
   13ab4:	00035e58 	.word	0x00035e58
   13ab8:	00035bd4 	.word	0x00035bd4
   13abc:	0001cda5 	.word	0x0001cda5
   13ac0:	00019445 	.word	0x00019445
   13ac4:	200047a0 	.word	0x200047a0
   13ac8:	00035d24 	.word	0x00035d24
   13acc:	0001ce91 	.word	0x0001ce91
   13ad0:	0001b231 	.word	0x0001b231
   13ad4:	00013b19 	.word	0x00013b19
   13ad8:	00035d44 	.word	0x00035d44
   13adc:	20000504 	.word	0x20000504
   13ae0:	20000505 	.word	0x20000505
   13ae4:	2000053c 	.word	0x2000053c
   13ae8:	20000508 	.word	0x20000508
   13aec:	0003494b 	.word	0x0003494b
   13af0:	20000570 	.word	0x20000570
   13af4:	00016ee9 	.word	0x00016ee9
   13af8:	0003457f 	.word	0x0003457f
   13afc:	200005d4 	.word	0x200005d4
   13b00:	00035d48 	.word	0x00035d48
   13b04:	00034881 	.word	0x00034881
   13b08:	00035d4c 	.word	0x00035d4c
   13b0c:	0003483d 	.word	0x0003483d
   13b10:	0003491b 	.word	0x0003491b
   13b14:	00035d54 	.word	0x00035d54

00013b18 <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   13b18:	b580      	push	{r7, lr}
   13b1a:	b084      	sub	sp, #16
   13b1c:	af00      	add	r7, sp, #0
   13b1e:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   13b20:	687b      	ldr	r3, [r7, #4]
   13b22:	0018      	movs	r0, r3
   13b24:	4b0c      	ldr	r3, [pc, #48]	; (13b58 <FreeRTOS_read+0x40>)
   13b26:	4798      	blx	r3
   13b28:	0003      	movs	r3, r0
   13b2a:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   13b2c:	e00d      	b.n	13b4a <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   13b2e:	4b0b      	ldr	r3, [pc, #44]	; (13b5c <FreeRTOS_read+0x44>)
   13b30:	681a      	ldr	r2, [r3, #0]
   13b32:	2301      	movs	r3, #1
   13b34:	425b      	negs	r3, r3
   13b36:	0019      	movs	r1, r3
   13b38:	0010      	movs	r0, r2
   13b3a:	4b09      	ldr	r3, [pc, #36]	; (13b60 <FreeRTOS_read+0x48>)
   13b3c:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   13b3e:	687b      	ldr	r3, [r7, #4]
   13b40:	0018      	movs	r0, r3
   13b42:	4b05      	ldr	r3, [pc, #20]	; (13b58 <FreeRTOS_read+0x40>)
   13b44:	4798      	blx	r3
   13b46:	0003      	movs	r3, r0
   13b48:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   13b4a:	68fb      	ldr	r3, [r7, #12]
   13b4c:	3301      	adds	r3, #1
   13b4e:	d0ee      	beq.n	13b2e <FreeRTOS_read+0x16>
    }
}
   13b50:	46c0      	nop			; (mov r8, r8)
   13b52:	46bd      	mov	sp, r7
   13b54:	b004      	add	sp, #16
   13b56:	bd80      	pop	{r7, pc}
   13b58:	0001ce41 	.word	0x0001ce41
   13b5c:	200047a0 	.word	0x200047a0
   13b60:	0001a3fd 	.word	0x0001a3fd

00013b64 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   13b64:	b580      	push	{r7, lr}
   13b66:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   13b68:	4b0a      	ldr	r3, [pc, #40]	; (13b94 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13b6a:	2200      	movs	r2, #0
   13b6c:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   13b6e:	4b0a      	ldr	r3, [pc, #40]	; (13b98 <CliCharReadySemaphoreGiveFromISR+0x34>)
   13b70:	681b      	ldr	r3, [r3, #0]
   13b72:	4a08      	ldr	r2, [pc, #32]	; (13b94 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13b74:	0011      	movs	r1, r2
   13b76:	0018      	movs	r0, r3
   13b78:	4b08      	ldr	r3, [pc, #32]	; (13b9c <CliCharReadySemaphoreGiveFromISR+0x38>)
   13b7a:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13b7c:	4b05      	ldr	r3, [pc, #20]	; (13b94 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13b7e:	681b      	ldr	r3, [r3, #0]
   13b80:	2b00      	cmp	r3, #0
   13b82:	d003      	beq.n	13b8c <CliCharReadySemaphoreGiveFromISR+0x28>
   13b84:	4b06      	ldr	r3, [pc, #24]	; (13ba0 <CliCharReadySemaphoreGiveFromISR+0x3c>)
   13b86:	2280      	movs	r2, #128	; 0x80
   13b88:	0552      	lsls	r2, r2, #21
   13b8a:	601a      	str	r2, [r3, #0]
}
   13b8c:	46c0      	nop			; (mov r8, r8)
   13b8e:	46bd      	mov	sp, r7
   13b90:	bd80      	pop	{r7, pc}
   13b92:	46c0      	nop			; (mov r8, r8)
   13b94:	200005d8 	.word	0x200005d8
   13b98:	200047a0 	.word	0x200047a0
   13b9c:	00019d75 	.word	0x00019d75
   13ba0:	e000ed04 	.word	0xe000ed04

00013ba4 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13ba4:	b590      	push	{r4, r7, lr}
   13ba6:	b087      	sub	sp, #28
   13ba8:	af00      	add	r7, sp, #0
   13baa:	60f8      	str	r0, [r7, #12]
   13bac:	60b9      	str	r1, [r7, #8]
   13bae:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   13bb0:	2317      	movs	r3, #23
   13bb2:	18fb      	adds	r3, r7, r3
   13bb4:	221b      	movs	r2, #27
   13bb6:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   13bb8:	2317      	movs	r3, #23
   13bba:	18fb      	adds	r3, r7, r3
   13bbc:	781b      	ldrb	r3, [r3, #0]
   13bbe:	4a08      	ldr	r2, [pc, #32]	; (13be0 <xCliClearTerminalScreen+0x3c>)
   13bc0:	4808      	ldr	r0, [pc, #32]	; (13be4 <xCliClearTerminalScreen+0x40>)
   13bc2:	210f      	movs	r1, #15
   13bc4:	4c08      	ldr	r4, [pc, #32]	; (13be8 <xCliClearTerminalScreen+0x44>)
   13bc6:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   13bc8:	4a06      	ldr	r2, [pc, #24]	; (13be4 <xCliClearTerminalScreen+0x40>)
   13bca:	68b9      	ldr	r1, [r7, #8]
   13bcc:	68fb      	ldr	r3, [r7, #12]
   13bce:	0018      	movs	r0, r3
   13bd0:	4b05      	ldr	r3, [pc, #20]	; (13be8 <xCliClearTerminalScreen+0x44>)
   13bd2:	4798      	blx	r3
    return pdFALSE;
   13bd4:	2300      	movs	r3, #0
}
   13bd6:	0018      	movs	r0, r3
   13bd8:	46bd      	mov	sp, r7
   13bda:	b007      	add	sp, #28
   13bdc:	bd90      	pop	{r4, r7, pc}
   13bde:	46c0      	nop			; (mov r8, r8)
   13be0:	00035d58 	.word	0x00035d58
   13be4:	200004f4 	.word	0x200004f4
   13be8:	000347d9 	.word	0x000347d9

00013bec <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13bec:	b580      	push	{r7, lr}
   13bee:	b084      	sub	sp, #16
   13bf0:	af00      	add	r7, sp, #0
   13bf2:	60f8      	str	r0, [r7, #12]
   13bf4:	60b9      	str	r1, [r7, #8]
   13bf6:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   13bf8:	2002      	movs	r0, #2
   13bfa:	4b03      	ldr	r3, [pc, #12]	; (13c08 <CLI_OTAU+0x1c>)
   13bfc:	4798      	blx	r3

    return pdFALSE;
   13bfe:	2300      	movs	r3, #0
}
   13c00:	0018      	movs	r0, r3
   13c02:	46bd      	mov	sp, r7
   13c04:	b004      	add	sp, #16
   13c06:	bd80      	pop	{r7, pc}
   13c08:	00016489 	.word	0x00016489

00013c0c <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13c0c:	b580      	push	{r7, lr}
   13c0e:	b084      	sub	sp, #16
   13c10:	af00      	add	r7, sp, #0
   13c12:	60f8      	str	r0, [r7, #12]
   13c14:	60b9      	str	r1, [r7, #8]
   13c16:	607a      	str	r2, [r7, #4]
    system_reset();
   13c18:	4b03      	ldr	r3, [pc, #12]	; (13c28 <CLI_ResetDevice+0x1c>)
   13c1a:	4798      	blx	r3
    return pdFALSE;
   13c1c:	2300      	movs	r3, #0
}
   13c1e:	0018      	movs	r0, r3
   13c20:	46bd      	mov	sp, r7
   13c22:	b004      	add	sp, #16
   13c24:	bd80      	pop	{r7, pc}
   13c26:	46c0      	nop			; (mov r8, r8)
   13c28:	00013805 	.word	0x00013805

00013c2c <CLI_SendTestData>:



BaseType_t CLI_SendTestData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13c2c:	b580      	push	{r7, lr}
   13c2e:	b086      	sub	sp, #24
   13c30:	af00      	add	r7, sp, #0
   13c32:	60f8      	str	r0, [r7, #12]
   13c34:	60b9      	str	r1, [r7, #8]
   13c36:	607a      	str	r2, [r7, #4]
	struct TestPacket testvar;

	testvar.test = 6;
   13c38:	2310      	movs	r3, #16
   13c3a:	18fb      	adds	r3, r7, r3
   13c3c:	2206      	movs	r2, #6
   13c3e:	701a      	strb	r2, [r3, #0]

	int error = WifiAddTestDataToQueue(&testvar);
   13c40:	2310      	movs	r3, #16
   13c42:	18fb      	adds	r3, r7, r3
   13c44:	0018      	movs	r0, r3
   13c46:	4b09      	ldr	r3, [pc, #36]	; (13c6c <CLI_SendTestData+0x40>)
   13c48:	4798      	blx	r3
   13c4a:	0003      	movs	r3, r0
   13c4c:	617b      	str	r3, [r7, #20]
	if (error == pdTRUE) {
   13c4e:	697b      	ldr	r3, [r7, #20]
   13c50:	2b01      	cmp	r3, #1
   13c52:	d105      	bne.n	13c60 <CLI_SendTestData+0x34>
		snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Test Data MQTT Post\r\n");
   13c54:	4a06      	ldr	r2, [pc, #24]	; (13c70 <CLI_SendTestData+0x44>)
   13c56:	68b9      	ldr	r1, [r7, #8]
   13c58:	68fb      	ldr	r3, [r7, #12]
   13c5a:	0018      	movs	r0, r3
   13c5c:	4b05      	ldr	r3, [pc, #20]	; (13c74 <CLI_SendTestData+0x48>)
   13c5e:	4798      	blx	r3
	}
	return pdFALSE;
   13c60:	2300      	movs	r3, #0
}
   13c62:	0018      	movs	r0, r3
   13c64:	46bd      	mov	sp, r7
   13c66:	b006      	add	sp, #24
   13c68:	bd80      	pop	{r7, pc}
   13c6a:	46c0      	nop			; (mov r8, r8)
   13c6c:	000164bd 	.word	0x000164bd
   13c70:	00035d60 	.word	0x00035d60
   13c74:	000347d9 	.word	0x000347d9

00013c78 <CLI_ServoOpen>:

BaseType_t CLI_ServoOpen(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13c78:	b580      	push	{r7, lr}
   13c7a:	b084      	sub	sp, #16
   13c7c:	af00      	add	r7, sp, #0
   13c7e:	60f8      	str	r0, [r7, #12]
   13c80:	60b9      	str	r1, [r7, #8]
   13c82:	607a      	str	r2, [r7, #4]
	servo_setDuty(2);	
   13c84:	2002      	movs	r0, #2
   13c86:	4b03      	ldr	r3, [pc, #12]	; (13c94 <CLI_ServoOpen+0x1c>)
   13c88:	4798      	blx	r3
	return pdFALSE;
   13c8a:	2300      	movs	r3, #0
}
   13c8c:	0018      	movs	r0, r3
   13c8e:	46bd      	mov	sp, r7
   13c90:	b004      	add	sp, #16
   13c92:	bd80      	pop	{r7, pc}
   13c94:	00014d59 	.word	0x00014d59

00013c98 <CLI_ServoClose>:

BaseType_t CLI_ServoClose(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13c98:	b580      	push	{r7, lr}
   13c9a:	b084      	sub	sp, #16
   13c9c:	af00      	add	r7, sp, #0
   13c9e:	60f8      	str	r0, [r7, #12]
   13ca0:	60b9      	str	r1, [r7, #8]
   13ca2:	607a      	str	r2, [r7, #4]
	servo_setDuty(3);
   13ca4:	2003      	movs	r0, #3
   13ca6:	4b03      	ldr	r3, [pc, #12]	; (13cb4 <CLI_ServoClose+0x1c>)
   13ca8:	4798      	blx	r3
	return pdFALSE;
   13caa:	2300      	movs	r3, #0
}
   13cac:	0018      	movs	r0, r3
   13cae:	46bd      	mov	sp, r7
   13cb0:	b004      	add	sp, #16
   13cb2:	bd80      	pop	{r7, pc}
   13cb4:	00014d59 	.word	0x00014d59

00013cb8 <CLI_SendWeightData>:

BaseType_t CLI_SendWeightData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13cb8:	b590      	push	{r4, r7, lr}
   13cba:	b0ab      	sub	sp, #172	; 0xac
   13cbc:	af00      	add	r7, sp, #0
   13cbe:	60f8      	str	r0, [r7, #12]
   13cc0:	60b9      	str	r1, [r7, #8]
   13cc2:	607a      	str	r2, [r7, #4]
	struct NauPacket nauvar;
	ADCchip_Init();
   13cc4:	4b33      	ldr	r3, [pc, #204]	; (13d94 <CLI_SendWeightData+0xdc>)
   13cc6:	4798      	blx	r3
	ADC_StartConversion();
   13cc8:	4b33      	ldr	r3, [pc, #204]	; (13d98 <CLI_SendWeightData+0xe0>)
   13cca:	4798      	blx	r3
	
	
	while ((ADC_ReadReg(PU_CTRL_ADDR)&CR_Msk) != CR_DATA_RDY);
   13ccc:	46c0      	nop			; (mov r8, r8)
   13cce:	2000      	movs	r0, #0
   13cd0:	4b32      	ldr	r3, [pc, #200]	; (13d9c <CLI_SendWeightData+0xe4>)
   13cd2:	4798      	blx	r3
   13cd4:	0003      	movs	r3, r0
   13cd6:	001a      	movs	r2, r3
   13cd8:	2320      	movs	r3, #32
   13cda:	4013      	ands	r3, r2
   13cdc:	2b20      	cmp	r3, #32
   13cde:	d1f6      	bne.n	13cce <CLI_SendWeightData+0x16>
	uint32_t ADC_value=ADC_Read_Conversion_Data();
   13ce0:	4b2f      	ldr	r3, [pc, #188]	; (13da0 <CLI_SendWeightData+0xe8>)
   13ce2:	4798      	blx	r3
   13ce4:	0003      	movs	r3, r0
   13ce6:	22a4      	movs	r2, #164	; 0xa4
   13ce8:	18ba      	adds	r2, r7, r2
   13cea:	6013      	str	r3, [r2, #0]
	int ADC_Array[2];
	
	//int i32ConversionData = (int)(ADC_value << 8);
	///* Shift the number back right to recover its intended magnitude */
	//i32ConversionData = (i32ConversionData >> 8);
	Value_conversion(ADC_value,ADC_Array);
   13cec:	23a4      	movs	r3, #164	; 0xa4
   13cee:	18fb      	adds	r3, r7, r3
   13cf0:	681b      	ldr	r3, [r3, #0]
   13cf2:	2290      	movs	r2, #144	; 0x90
   13cf4:	18ba      	adds	r2, r7, r2
   13cf6:	0011      	movs	r1, r2
   13cf8:	0018      	movs	r0, r3
   13cfa:	4b2a      	ldr	r3, [pc, #168]	; (13da4 <CLI_SendWeightData+0xec>)
   13cfc:	4798      	blx	r3
	
	char help[64];
	//snprintf(help, 64, "input vol = VIN1P - VIN1N = %.2f\r\n",((float)i32ConversionData / 16777216) * (float)(3.14));
	snprintf(help, 64, "input vol = VIN1P - VIN1N = %d\r\n",ADC_Array[0]);
   13cfe:	2390      	movs	r3, #144	; 0x90
   13d00:	18fb      	adds	r3, r7, r3
   13d02:	681b      	ldr	r3, [r3, #0]
   13d04:	4a28      	ldr	r2, [pc, #160]	; (13da8 <CLI_SendWeightData+0xf0>)
   13d06:	2150      	movs	r1, #80	; 0x50
   13d08:	1878      	adds	r0, r7, r1
   13d0a:	2140      	movs	r1, #64	; 0x40
   13d0c:	4c27      	ldr	r4, [pc, #156]	; (13dac <CLI_SendWeightData+0xf4>)
   13d0e:	47a0      	blx	r4
	
	SerialConsoleWriteString(help);
   13d10:	2350      	movs	r3, #80	; 0x50
   13d12:	18fb      	adds	r3, r7, r3
   13d14:	0018      	movs	r0, r3
   13d16:	4b26      	ldr	r3, [pc, #152]	; (13db0 <CLI_SendWeightData+0xf8>)
   13d18:	4798      	blx	r3
	nauvar.nau_i = ADC_Array[0];
   13d1a:	2390      	movs	r3, #144	; 0x90
   13d1c:	18fb      	adds	r3, r7, r3
   13d1e:	681b      	ldr	r3, [r3, #0]
   13d20:	b29a      	uxth	r2, r3
   13d22:	2398      	movs	r3, #152	; 0x98
   13d24:	18fb      	adds	r3, r7, r3
   13d26:	801a      	strh	r2, [r3, #0]
	nauvar.nau_f = ADC_Array[1];
   13d28:	2390      	movs	r3, #144	; 0x90
   13d2a:	18fb      	adds	r3, r7, r3
   13d2c:	685b      	ldr	r3, [r3, #4]
   13d2e:	b29a      	uxth	r2, r3
   13d30:	2398      	movs	r3, #152	; 0x98
   13d32:	18fb      	adds	r3, r7, r3
   13d34:	805a      	strh	r2, [r3, #2]
	
	int error = WifiAddNauDataToQueue(&nauvar);
   13d36:	2398      	movs	r3, #152	; 0x98
   13d38:	18fb      	adds	r3, r7, r3
   13d3a:	0018      	movs	r0, r3
   13d3c:	4b1d      	ldr	r3, [pc, #116]	; (13db4 <CLI_SendWeightData+0xfc>)
   13d3e:	4798      	blx	r3
   13d40:	0003      	movs	r3, r0
   13d42:	22a0      	movs	r2, #160	; 0xa0
   13d44:	18ba      	adds	r2, r7, r2
   13d46:	6013      	str	r3, [r2, #0]
	if (error == pdTRUE) {
   13d48:	23a0      	movs	r3, #160	; 0xa0
   13d4a:	18fb      	adds	r3, r7, r3
   13d4c:	681b      	ldr	r3, [r3, #0]
   13d4e:	2b01      	cmp	r3, #1
   13d50:	d105      	bne.n	13d5e <CLI_SendWeightData+0xa6>
		snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Nau Data MQTT Post\r\n");
   13d52:	4a19      	ldr	r2, [pc, #100]	; (13db8 <CLI_SendWeightData+0x100>)
   13d54:	68b9      	ldr	r1, [r7, #8]
   13d56:	68fb      	ldr	r3, [r7, #12]
   13d58:	0018      	movs	r0, r3
   13d5a:	4b14      	ldr	r3, [pc, #80]	; (13dac <CLI_SendWeightData+0xf4>)
   13d5c:	4798      	blx	r3
	}
	gfx_mono_init();
   13d5e:	4b17      	ldr	r3, [pc, #92]	; (13dbc <CLI_SendWeightData+0x104>)
   13d60:	4798      	blx	r3
	uint8_t charge = 100;
   13d62:	239f      	movs	r3, #159	; 0x9f
   13d64:	18fb      	adds	r3, r7, r3
   13d66:	2264      	movs	r2, #100	; 0x64
   13d68:	701a      	strb	r2, [r3, #0]
	char charge_char[64];
	sprintf(charge_char, "%d", charge);
   13d6a:	239f      	movs	r3, #159	; 0x9f
   13d6c:	18fb      	adds	r3, r7, r3
   13d6e:	781a      	ldrb	r2, [r3, #0]
   13d70:	4913      	ldr	r1, [pc, #76]	; (13dc0 <CLI_SendWeightData+0x108>)
   13d72:	2310      	movs	r3, #16
   13d74:	18fb      	adds	r3, r7, r3
   13d76:	0018      	movs	r0, r3
   13d78:	4b12      	ldr	r3, [pc, #72]	; (13dc4 <CLI_SendWeightData+0x10c>)
   13d7a:	4798      	blx	r3
	gfx_mono_draw_string(charge_char, 0, 8, &sysfont);
   13d7c:	4b12      	ldr	r3, [pc, #72]	; (13dc8 <CLI_SendWeightData+0x110>)
   13d7e:	2210      	movs	r2, #16
   13d80:	18b8      	adds	r0, r7, r2
   13d82:	2208      	movs	r2, #8
   13d84:	2100      	movs	r1, #0
   13d86:	4c11      	ldr	r4, [pc, #68]	; (13dcc <CLI_SendWeightData+0x114>)
   13d88:	47a0      	blx	r4
	return pdFALSE;
   13d8a:	2300      	movs	r3, #0
}
   13d8c:	0018      	movs	r0, r3
   13d8e:	46bd      	mov	sp, r7
   13d90:	b02b      	add	sp, #172	; 0xac
   13d92:	bd90      	pop	{r4, r7, pc}
   13d94:	00014905 	.word	0x00014905
   13d98:	000149a1 	.word	0x000149a1
   13d9c:	000147ed 	.word	0x000147ed
   13da0:	00014a5d 	.word	0x00014a5d
   13da4:	00014a81 	.word	0x00014a81
   13da8:	00035d78 	.word	0x00035d78
   13dac:	000347d9 	.word	0x000347d9
   13db0:	0001cda5 	.word	0x0001cda5
   13db4:	000164e9 	.word	0x000164e9
   13db8:	00035d9c 	.word	0x00035d9c
   13dbc:	0001287d 	.word	0x0001287d
   13dc0:	00035db4 	.word	0x00035db4
   13dc4:	0003483d 	.word	0x0003483d
   13dc8:	20000000 	.word	0x20000000
   13dcc:	00012721 	.word	0x00012721

00013dd0 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13dd0:	b590      	push	{r4, r7, lr}
   13dd2:	b08f      	sub	sp, #60	; 0x3c
   13dd4:	af00      	add	r7, sp, #0
   13dd6:	60f8      	str	r0, [r7, #12]
   13dd8:	60b9      	str	r1, [r7, #8]
   13dda:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
   13ddc:	2318      	movs	r3, #24
   13dde:	18fb      	adds	r3, r7, r3
   13de0:	2200      	movs	r2, #0
   13de2:	701a      	strb	r2, [r3, #0]
   13de4:	2318      	movs	r3, #24
   13de6:	18fb      	adds	r3, r7, r3
   13de8:	2200      	movs	r2, #0
   13dea:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
   13dec:	2318      	movs	r3, #24
   13dee:	18fb      	adds	r3, r7, r3
   13df0:	2200      	movs	r2, #0
   13df2:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
   13df4:	2318      	movs	r3, #24
   13df6:	18fb      	adds	r3, r7, r3
   13df8:	2200      	movs	r2, #0
   13dfa:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
   13dfc:	231c      	movs	r3, #28
   13dfe:	18fb      	adds	r3, r7, r3
   13e00:	2200      	movs	r2, #0
   13e02:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
   13e04:	231c      	movs	r3, #28
   13e06:	18fb      	adds	r3, r7, r3
   13e08:	2214      	movs	r2, #20
   13e0a:	18ba      	adds	r2, r7, r2
   13e0c:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
   13e0e:	231c      	movs	r3, #28
   13e10:	18fb      	adds	r3, r7, r3
   13e12:	2201      	movs	r2, #1
   13e14:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   13e16:	231c      	movs	r3, #28
   13e18:	18fb      	adds	r3, r7, r3
   13e1a:	2218      	movs	r2, #24
   13e1c:	18ba      	adds	r2, r7, r2
   13e1e:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
   13e20:	231c      	movs	r3, #28
   13e22:	18fb      	adds	r3, r7, r3
   13e24:	2201      	movs	r2, #1
   13e26:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   13e28:	4b2c      	ldr	r3, [pc, #176]	; (13edc <CLI_i2cScan+0x10c>)
   13e2a:	0018      	movs	r0, r3
   13e2c:	4b2c      	ldr	r3, [pc, #176]	; (13ee0 <CLI_i2cScan+0x110>)
   13e2e:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   13e30:	2300      	movs	r3, #0
   13e32:	637b      	str	r3, [r7, #52]	; 0x34
   13e34:	e046      	b.n	13ec4 <CLI_i2cScan+0xf4>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   13e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13e38:	4a2a      	ldr	r2, [pc, #168]	; (13ee4 <CLI_i2cScan+0x114>)
   13e3a:	482b      	ldr	r0, [pc, #172]	; (13ee8 <CLI_i2cScan+0x118>)
   13e3c:	210f      	movs	r1, #15
   13e3e:	4c2b      	ldr	r4, [pc, #172]	; (13eec <CLI_i2cScan+0x11c>)
   13e40:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   13e42:	4b29      	ldr	r3, [pc, #164]	; (13ee8 <CLI_i2cScan+0x118>)
   13e44:	0018      	movs	r0, r3
   13e46:	4b26      	ldr	r3, [pc, #152]	; (13ee0 <CLI_i2cScan+0x110>)
   13e48:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   13e4a:	2300      	movs	r3, #0
   13e4c:	633b      	str	r3, [r7, #48]	; 0x30
   13e4e:	e02f      	b.n	13eb0 <CLI_i2cScan+0xe0>
                {

                    i2cOled.address = (i + j) << 1;
   13e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13e52:	b2da      	uxtb	r2, r3
   13e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13e56:	b2db      	uxtb	r3, r3
   13e58:	18d3      	adds	r3, r2, r3
   13e5a:	b2db      	uxtb	r3, r3
   13e5c:	18db      	adds	r3, r3, r3
   13e5e:	b2da      	uxtb	r2, r3
   13e60:	231c      	movs	r3, #28
   13e62:	18fb      	adds	r3, r7, r3
   13e64:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cWriteDataWait(&i2cOled, 100);
   13e66:	231c      	movs	r3, #28
   13e68:	18fb      	adds	r3, r7, r3
   13e6a:	2164      	movs	r1, #100	; 0x64
   13e6c:	0018      	movs	r0, r3
   13e6e:	4b20      	ldr	r3, [pc, #128]	; (13ef0 <CLI_i2cScan+0x120>)
   13e70:	4798      	blx	r3
   13e72:	0003      	movs	r3, r0
   13e74:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   13e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13e78:	2b00      	cmp	r3, #0
   13e7a:	d10c      	bne.n	13e96 <CLI_i2cScan+0xc6>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i2cOled.address);
   13e7c:	231c      	movs	r3, #28
   13e7e:	18fb      	adds	r3, r7, r3
   13e80:	781b      	ldrb	r3, [r3, #0]
   13e82:	4a18      	ldr	r2, [pc, #96]	; (13ee4 <CLI_i2cScan+0x114>)
   13e84:	4818      	ldr	r0, [pc, #96]	; (13ee8 <CLI_i2cScan+0x118>)
   13e86:	210f      	movs	r1, #15
   13e88:	4c18      	ldr	r4, [pc, #96]	; (13eec <CLI_i2cScan+0x11c>)
   13e8a:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   13e8c:	4b16      	ldr	r3, [pc, #88]	; (13ee8 <CLI_i2cScan+0x118>)
   13e8e:	0018      	movs	r0, r3
   13e90:	4b13      	ldr	r3, [pc, #76]	; (13ee0 <CLI_i2cScan+0x110>)
   13e92:	4798      	blx	r3
   13e94:	e009      	b.n	13eaa <CLI_i2cScan+0xda>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X ");
   13e96:	4b14      	ldr	r3, [pc, #80]	; (13ee8 <CLI_i2cScan+0x118>)
   13e98:	4a16      	ldr	r2, [pc, #88]	; (13ef4 <CLI_i2cScan+0x124>)
   13e9a:	8811      	ldrh	r1, [r2, #0]
   13e9c:	8019      	strh	r1, [r3, #0]
   13e9e:	7892      	ldrb	r2, [r2, #2]
   13ea0:	709a      	strb	r2, [r3, #2]
						SerialConsoleWriteString(bufCli);
   13ea2:	4b11      	ldr	r3, [pc, #68]	; (13ee8 <CLI_i2cScan+0x118>)
   13ea4:	0018      	movs	r0, r3
   13ea6:	4b0e      	ldr	r3, [pc, #56]	; (13ee0 <CLI_i2cScan+0x110>)
   13ea8:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   13eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13eac:	3301      	adds	r3, #1
   13eae:	633b      	str	r3, [r7, #48]	; 0x30
   13eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13eb2:	2b0f      	cmp	r3, #15
   13eb4:	ddcc      	ble.n	13e50 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   13eb6:	4b10      	ldr	r3, [pc, #64]	; (13ef8 <CLI_i2cScan+0x128>)
   13eb8:	0018      	movs	r0, r3
   13eba:	4b09      	ldr	r3, [pc, #36]	; (13ee0 <CLI_i2cScan+0x110>)
   13ebc:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   13ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13ec0:	3310      	adds	r3, #16
   13ec2:	637b      	str	r3, [r7, #52]	; 0x34
   13ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13ec6:	2b7f      	cmp	r3, #127	; 0x7f
   13ec8:	ddb5      	ble.n	13e36 <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   13eca:	4b0b      	ldr	r3, [pc, #44]	; (13ef8 <CLI_i2cScan+0x128>)
   13ecc:	0018      	movs	r0, r3
   13ece:	4b04      	ldr	r3, [pc, #16]	; (13ee0 <CLI_i2cScan+0x110>)
   13ed0:	4798      	blx	r3
			return pdFALSE;
   13ed2:	2300      	movs	r3, #0

}
   13ed4:	0018      	movs	r0, r3
   13ed6:	46bd      	mov	sp, r7
   13ed8:	b00f      	add	sp, #60	; 0x3c
   13eda:	bd90      	pop	{r4, r7, pc}
   13edc:	00035db8 	.word	0x00035db8
   13ee0:	0001cda5 	.word	0x0001cda5
   13ee4:	00035dec 	.word	0x00035dec
   13ee8:	200004f4 	.word	0x200004f4
   13eec:	000347d9 	.word	0x000347d9
   13ef0:	000144f1 	.word	0x000144f1
   13ef4:	00035df4 	.word	0x00035df4
   13ef8:	00035d44 	.word	0x00035d44

00013efc <system_interrupt_enable>:
{
   13efc:	b580      	push	{r7, lr}
   13efe:	b082      	sub	sp, #8
   13f00:	af00      	add	r7, sp, #0
   13f02:	0002      	movs	r2, r0
   13f04:	1dfb      	adds	r3, r7, #7
   13f06:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   13f08:	4b06      	ldr	r3, [pc, #24]	; (13f24 <system_interrupt_enable+0x28>)
   13f0a:	1dfa      	adds	r2, r7, #7
   13f0c:	7812      	ldrb	r2, [r2, #0]
   13f0e:	0011      	movs	r1, r2
   13f10:	221f      	movs	r2, #31
   13f12:	400a      	ands	r2, r1
   13f14:	2101      	movs	r1, #1
   13f16:	4091      	lsls	r1, r2
   13f18:	000a      	movs	r2, r1
   13f1a:	601a      	str	r2, [r3, #0]
}
   13f1c:	46c0      	nop			; (mov r8, r8)
   13f1e:	46bd      	mov	sp, r7
   13f20:	b002      	add	sp, #8
   13f22:	bd80      	pop	{r7, pc}
   13f24:	e000e100 	.word	0xe000e100

00013f28 <i2c_master_is_syncing>:
{
   13f28:	b580      	push	{r7, lr}
   13f2a:	b084      	sub	sp, #16
   13f2c:	af00      	add	r7, sp, #0
   13f2e:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   13f30:	687b      	ldr	r3, [r7, #4]
   13f32:	681b      	ldr	r3, [r3, #0]
   13f34:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   13f36:	68fb      	ldr	r3, [r7, #12]
   13f38:	69db      	ldr	r3, [r3, #28]
   13f3a:	2207      	movs	r2, #7
   13f3c:	4013      	ands	r3, r2
   13f3e:	1e5a      	subs	r2, r3, #1
   13f40:	4193      	sbcs	r3, r2
   13f42:	b2db      	uxtb	r3, r3
}
   13f44:	0018      	movs	r0, r3
   13f46:	46bd      	mov	sp, r7
   13f48:	b004      	add	sp, #16
   13f4a:	bd80      	pop	{r7, pc}

00013f4c <_i2c_master_wait_for_sync>:
{
   13f4c:	b580      	push	{r7, lr}
   13f4e:	b082      	sub	sp, #8
   13f50:	af00      	add	r7, sp, #0
   13f52:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   13f54:	46c0      	nop			; (mov r8, r8)
   13f56:	687b      	ldr	r3, [r7, #4]
   13f58:	0018      	movs	r0, r3
   13f5a:	4b04      	ldr	r3, [pc, #16]	; (13f6c <_i2c_master_wait_for_sync+0x20>)
   13f5c:	4798      	blx	r3
   13f5e:	1e03      	subs	r3, r0, #0
   13f60:	d1f9      	bne.n	13f56 <_i2c_master_wait_for_sync+0xa>
}
   13f62:	46c0      	nop			; (mov r8, r8)
   13f64:	46bd      	mov	sp, r7
   13f66:	b002      	add	sp, #8
   13f68:	bd80      	pop	{r7, pc}
   13f6a:	46c0      	nop			; (mov r8, r8)
   13f6c:	00013f29 	.word	0x00013f29

00013f70 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   13f70:	b580      	push	{r7, lr}
   13f72:	b082      	sub	sp, #8
   13f74:	af00      	add	r7, sp, #0
   13f76:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   13f78:	687b      	ldr	r3, [r7, #4]
   13f7a:	2264      	movs	r2, #100	; 0x64
   13f7c:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   13f7e:	687b      	ldr	r3, [r7, #4]
   13f80:	4a1b      	ldr	r2, [pc, #108]	; (13ff0 <i2c_master_get_config_defaults+0x80>)
   13f82:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   13f84:	687b      	ldr	r3, [r7, #4]
   13f86:	2200      	movs	r2, #0
   13f88:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   13f8a:	687b      	ldr	r3, [r7, #4]
   13f8c:	2200      	movs	r2, #0
   13f8e:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   13f90:	687b      	ldr	r3, [r7, #4]
   13f92:	2200      	movs	r2, #0
   13f94:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   13f96:	687b      	ldr	r3, [r7, #4]
   13f98:	2280      	movs	r2, #128	; 0x80
   13f9a:	0392      	lsls	r2, r2, #14
   13f9c:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   13f9e:	687b      	ldr	r3, [r7, #4]
   13fa0:	2201      	movs	r2, #1
   13fa2:	4252      	negs	r2, r2
   13fa4:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   13fa6:	687b      	ldr	r3, [r7, #4]
   13fa8:	2201      	movs	r2, #1
   13faa:	4252      	negs	r2, r2
   13fac:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   13fae:	687b      	ldr	r3, [r7, #4]
   13fb0:	2200      	movs	r2, #0
   13fb2:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   13fb4:	687b      	ldr	r3, [r7, #4]
   13fb6:	2200      	movs	r2, #0
   13fb8:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   13fba:	687b      	ldr	r3, [r7, #4]
   13fbc:	2224      	movs	r2, #36	; 0x24
   13fbe:	2100      	movs	r1, #0
   13fc0:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   13fc2:	687b      	ldr	r3, [r7, #4]
   13fc4:	2200      	movs	r2, #0
   13fc6:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   13fc8:	687b      	ldr	r3, [r7, #4]
   13fca:	222c      	movs	r2, #44	; 0x2c
   13fcc:	2100      	movs	r1, #0
   13fce:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   13fd0:	687b      	ldr	r3, [r7, #4]
   13fd2:	222d      	movs	r2, #45	; 0x2d
   13fd4:	2100      	movs	r1, #0
   13fd6:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   13fd8:	687b      	ldr	r3, [r7, #4]
   13fda:	222e      	movs	r2, #46	; 0x2e
   13fdc:	2100      	movs	r1, #0
   13fde:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   13fe0:	687b      	ldr	r3, [r7, #4]
   13fe2:	22d7      	movs	r2, #215	; 0xd7
   13fe4:	861a      	strh	r2, [r3, #48]	; 0x30
}
   13fe6:	46c0      	nop			; (mov r8, r8)
   13fe8:	46bd      	mov	sp, r7
   13fea:	b002      	add	sp, #8
   13fec:	bd80      	pop	{r7, pc}
   13fee:	46c0      	nop			; (mov r8, r8)
   13ff0:	00000d48 	.word	0x00000d48

00013ff4 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   13ff4:	b580      	push	{r7, lr}
   13ff6:	b084      	sub	sp, #16
   13ff8:	af00      	add	r7, sp, #0
   13ffa:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13ffc:	687b      	ldr	r3, [r7, #4]
   13ffe:	681b      	ldr	r3, [r3, #0]
   14000:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   14002:	2300      	movs	r3, #0
   14004:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   14006:	687b      	ldr	r3, [r7, #4]
   14008:	0018      	movs	r0, r3
   1400a:	4b14      	ldr	r3, [pc, #80]	; (1405c <i2c_master_enable+0x68>)
   1400c:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   1400e:	68bb      	ldr	r3, [r7, #8]
   14010:	681b      	ldr	r3, [r3, #0]
   14012:	2202      	movs	r2, #2
   14014:	431a      	orrs	r2, r3
   14016:	68bb      	ldr	r3, [r7, #8]
   14018:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1401a:	687b      	ldr	r3, [r7, #4]
   1401c:	681b      	ldr	r3, [r3, #0]
   1401e:	0018      	movs	r0, r3
   14020:	4b0f      	ldr	r3, [pc, #60]	; (14060 <i2c_master_enable+0x6c>)
   14022:	4798      	blx	r3
   14024:	0003      	movs	r3, r0
   14026:	0018      	movs	r0, r3
   14028:	4b0e      	ldr	r3, [pc, #56]	; (14064 <i2c_master_enable+0x70>)
   1402a:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   1402c:	e00c      	b.n	14048 <i2c_master_enable+0x54>
		timeout_counter++;
   1402e:	68fb      	ldr	r3, [r7, #12]
   14030:	3301      	adds	r3, #1
   14032:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   14034:	687b      	ldr	r3, [r7, #4]
   14036:	88db      	ldrh	r3, [r3, #6]
   14038:	001a      	movs	r2, r3
   1403a:	68fb      	ldr	r3, [r7, #12]
   1403c:	429a      	cmp	r2, r3
   1403e:	d803      	bhi.n	14048 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   14040:	68bb      	ldr	r3, [r7, #8]
   14042:	2210      	movs	r2, #16
   14044:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   14046:	e006      	b.n	14056 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   14048:	68bb      	ldr	r3, [r7, #8]
   1404a:	8b5b      	ldrh	r3, [r3, #26]
   1404c:	b29b      	uxth	r3, r3
   1404e:	001a      	movs	r2, r3
   14050:	2310      	movs	r3, #16
   14052:	4013      	ands	r3, r2
   14054:	d0eb      	beq.n	1402e <i2c_master_enable+0x3a>
		}
	}
}
   14056:	46bd      	mov	sp, r7
   14058:	b004      	add	sp, #16
   1405a:	bd80      	pop	{r7, pc}
   1405c:	00013f4d 	.word	0x00013f4d
   14060:	0002671d 	.word	0x0002671d
   14064:	00013efd 	.word	0x00013efd

00014068 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   14068:	b580      	push	{r7, lr}
   1406a:	b082      	sub	sp, #8
   1406c:	af00      	add	r7, sp, #0
   1406e:	6078      	str	r0, [r7, #4]
   14070:	000a      	movs	r2, r1
   14072:	1cfb      	adds	r3, r7, #3
   14074:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   14076:	687b      	ldr	r3, [r7, #4]
   14078:	7e5b      	ldrb	r3, [r3, #25]
   1407a:	b2db      	uxtb	r3, r3
   1407c:	b25a      	sxtb	r2, r3
   1407e:	1cfb      	adds	r3, r7, #3
   14080:	781b      	ldrb	r3, [r3, #0]
   14082:	2101      	movs	r1, #1
   14084:	4099      	lsls	r1, r3
   14086:	000b      	movs	r3, r1
   14088:	b25b      	sxtb	r3, r3
   1408a:	4313      	orrs	r3, r2
   1408c:	b25b      	sxtb	r3, r3
   1408e:	b2da      	uxtb	r2, r3
   14090:	687b      	ldr	r3, [r7, #4]
   14092:	765a      	strb	r2, [r3, #25]
}
   14094:	46c0      	nop			; (mov r8, r8)
   14096:	46bd      	mov	sp, r7
   14098:	b002      	add	sp, #8
   1409a:	bd80      	pop	{r7, pc}

0001409c <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   1409c:	b590      	push	{r4, r7, lr}
   1409e:	b091      	sub	sp, #68	; 0x44
   140a0:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   140a2:	2300      	movs	r3, #0
   140a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   140a6:	233a      	movs	r3, #58	; 0x3a
   140a8:	18fb      	adds	r3, r7, r3
   140aa:	2200      	movs	r2, #0
   140ac:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   140ae:	1d3b      	adds	r3, r7, #4
   140b0:	0018      	movs	r0, r3
   140b2:	4b21      	ldr	r3, [pc, #132]	; (14138 <I2cDriverConfigureSensorBus+0x9c>)
   140b4:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   140b6:	1d3b      	adds	r3, r7, #4
   140b8:	4a20      	ldr	r2, [pc, #128]	; (1413c <I2cDriverConfigureSensorBus+0xa0>)
   140ba:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   140bc:	1d3b      	adds	r3, r7, #4
   140be:	4a20      	ldr	r2, [pc, #128]	; (14140 <I2cDriverConfigureSensorBus+0xa4>)
   140c0:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   140c2:	1d3b      	adds	r3, r7, #4
   140c4:	22fa      	movs	r2, #250	; 0xfa
   140c6:	0092      	lsls	r2, r2, #2
   140c8:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   140ca:	233b      	movs	r3, #59	; 0x3b
   140cc:	18fb      	adds	r3, r7, r3
   140ce:	2203      	movs	r2, #3
   140d0:	701a      	strb	r2, [r3, #0]
   140d2:	e01e      	b.n	14112 <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   140d4:	233a      	movs	r3, #58	; 0x3a
   140d6:	18fc      	adds	r4, r7, r3
   140d8:	1d3a      	adds	r2, r7, #4
   140da:	491a      	ldr	r1, [pc, #104]	; (14144 <I2cDriverConfigureSensorBus+0xa8>)
   140dc:	4b1a      	ldr	r3, [pc, #104]	; (14148 <I2cDriverConfigureSensorBus+0xac>)
   140de:	0018      	movs	r0, r3
   140e0:	4b1a      	ldr	r3, [pc, #104]	; (1414c <I2cDriverConfigureSensorBus+0xb0>)
   140e2:	4798      	blx	r3
   140e4:	0003      	movs	r3, r0
   140e6:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   140e8:	233a      	movs	r3, #58	; 0x3a
   140ea:	18fb      	adds	r3, r7, r3
   140ec:	781b      	ldrb	r3, [r3, #0]
   140ee:	2b00      	cmp	r3, #0
   140f0:	d104      	bne.n	140fc <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   140f2:	233a      	movs	r3, #58	; 0x3a
   140f4:	18fb      	adds	r3, r7, r3
   140f6:	781b      	ldrb	r3, [r3, #0]
   140f8:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   140fa:	e00f      	b.n	1411c <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   140fc:	4b12      	ldr	r3, [pc, #72]	; (14148 <I2cDriverConfigureSensorBus+0xac>)
   140fe:	0018      	movs	r0, r3
   14100:	4b13      	ldr	r3, [pc, #76]	; (14150 <I2cDriverConfigureSensorBus+0xb4>)
   14102:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   14104:	233b      	movs	r3, #59	; 0x3b
   14106:	18fb      	adds	r3, r7, r3
   14108:	781a      	ldrb	r2, [r3, #0]
   1410a:	233b      	movs	r3, #59	; 0x3b
   1410c:	18fb      	adds	r3, r7, r3
   1410e:	3a01      	subs	r2, #1
   14110:	701a      	strb	r2, [r3, #0]
   14112:	233b      	movs	r3, #59	; 0x3b
   14114:	18fb      	adds	r3, r7, r3
   14116:	781b      	ldrb	r3, [r3, #0]
   14118:	2b00      	cmp	r3, #0
   1411a:	d1db      	bne.n	140d4 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   1411c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1411e:	2b00      	cmp	r3, #0
   14120:	d104      	bne.n	1412c <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   14122:	4b09      	ldr	r3, [pc, #36]	; (14148 <I2cDriverConfigureSensorBus+0xac>)
   14124:	0018      	movs	r0, r3
   14126:	4b0b      	ldr	r3, [pc, #44]	; (14154 <I2cDriverConfigureSensorBus+0xb8>)
   14128:	4798      	blx	r3
   1412a:	e000      	b.n	1412e <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   1412c:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   1412e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   14130:	0018      	movs	r0, r3
   14132:	46bd      	mov	sp, r7
   14134:	b011      	add	sp, #68	; 0x44
   14136:	bd90      	pop	{r4, r7, pc}
   14138:	00013f71 	.word	0x00013f71
   1413c:	00080002 	.word	0x00080002
   14140:	00090002 	.word	0x00090002
   14144:	42000800 	.word	0x42000800
   14148:	200047a8 	.word	0x200047a8
   1414c:	00016ad9 	.word	0x00016ad9
   14150:	00016c0d 	.word	0x00016c0d
   14154:	00013ff5 	.word	0x00013ff5

00014158 <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   14158:	b580      	push	{r7, lr}
   1415a:	b084      	sub	sp, #16
   1415c:	af00      	add	r7, sp, #0
   1415e:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14160:	4b0e      	ldr	r3, [pc, #56]	; (1419c <I2cSensorsTxComplete+0x44>)
   14162:	2200      	movs	r2, #0
   14164:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   14166:	4b0d      	ldr	r3, [pc, #52]	; (1419c <I2cSensorsTxComplete+0x44>)
   14168:	2201      	movs	r2, #1
   1416a:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   1416c:	2300      	movs	r3, #0
   1416e:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14170:	4b0b      	ldr	r3, [pc, #44]	; (141a0 <I2cSensorsTxComplete+0x48>)
   14172:	681b      	ldr	r3, [r3, #0]
   14174:	220c      	movs	r2, #12
   14176:	18ba      	adds	r2, r7, r2
   14178:	0011      	movs	r1, r2
   1417a:	0018      	movs	r0, r3
   1417c:	4b09      	ldr	r3, [pc, #36]	; (141a4 <I2cSensorsTxComplete+0x4c>)
   1417e:	4798      	blx	r3
    sensorTransmitError = false;
   14180:	4b09      	ldr	r3, [pc, #36]	; (141a8 <I2cSensorsTxComplete+0x50>)
   14182:	2200      	movs	r2, #0
   14184:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14186:	68fb      	ldr	r3, [r7, #12]
   14188:	2b00      	cmp	r3, #0
   1418a:	d003      	beq.n	14194 <I2cSensorsTxComplete+0x3c>
   1418c:	4b07      	ldr	r3, [pc, #28]	; (141ac <I2cSensorsTxComplete+0x54>)
   1418e:	2280      	movs	r2, #128	; 0x80
   14190:	0552      	lsls	r2, r2, #21
   14192:	601a      	str	r2, [r3, #0]
}
   14194:	46c0      	nop			; (mov r8, r8)
   14196:	46bd      	mov	sp, r7
   14198:	b004      	add	sp, #16
   1419a:	bd80      	pop	{r7, pc}
   1419c:	200005e0 	.word	0x200005e0
   141a0:	200047d0 	.word	0x200047d0
   141a4:	00019d75 	.word	0x00019d75
   141a8:	200005dc 	.word	0x200005dc
   141ac:	e000ed04 	.word	0xe000ed04

000141b0 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   141b0:	b580      	push	{r7, lr}
   141b2:	b084      	sub	sp, #16
   141b4:	af00      	add	r7, sp, #0
   141b6:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   141b8:	4b0e      	ldr	r3, [pc, #56]	; (141f4 <I2cSensorsRxComplete+0x44>)
   141ba:	2200      	movs	r2, #0
   141bc:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   141be:	4b0d      	ldr	r3, [pc, #52]	; (141f4 <I2cSensorsRxComplete+0x44>)
   141c0:	2201      	movs	r2, #1
   141c2:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   141c4:	2300      	movs	r3, #0
   141c6:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   141c8:	4b0b      	ldr	r3, [pc, #44]	; (141f8 <I2cSensorsRxComplete+0x48>)
   141ca:	681b      	ldr	r3, [r3, #0]
   141cc:	220c      	movs	r2, #12
   141ce:	18ba      	adds	r2, r7, r2
   141d0:	0011      	movs	r1, r2
   141d2:	0018      	movs	r0, r3
   141d4:	4b09      	ldr	r3, [pc, #36]	; (141fc <I2cSensorsRxComplete+0x4c>)
   141d6:	4798      	blx	r3
    sensorTransmitError = false;
   141d8:	4b09      	ldr	r3, [pc, #36]	; (14200 <I2cSensorsRxComplete+0x50>)
   141da:	2200      	movs	r2, #0
   141dc:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   141de:	68fb      	ldr	r3, [r7, #12]
   141e0:	2b00      	cmp	r3, #0
   141e2:	d003      	beq.n	141ec <I2cSensorsRxComplete+0x3c>
   141e4:	4b07      	ldr	r3, [pc, #28]	; (14204 <I2cSensorsRxComplete+0x54>)
   141e6:	2280      	movs	r2, #128	; 0x80
   141e8:	0552      	lsls	r2, r2, #21
   141ea:	601a      	str	r2, [r3, #0]
}
   141ec:	46c0      	nop			; (mov r8, r8)
   141ee:	46bd      	mov	sp, r7
   141f0:	b004      	add	sp, #16
   141f2:	bd80      	pop	{r7, pc}
   141f4:	200005e0 	.word	0x200005e0
   141f8:	200047d0 	.word	0x200047d0
   141fc:	00019d75 	.word	0x00019d75
   14200:	200005dc 	.word	0x200005dc
   14204:	e000ed04 	.word	0xe000ed04

00014208 <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   14208:	b580      	push	{r7, lr}
   1420a:	b084      	sub	sp, #16
   1420c:	af00      	add	r7, sp, #0
   1420e:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14210:	4b0e      	ldr	r3, [pc, #56]	; (1424c <I2cSensorsError+0x44>)
   14212:	2200      	movs	r2, #0
   14214:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   14216:	4b0d      	ldr	r3, [pc, #52]	; (1424c <I2cSensorsError+0x44>)
   14218:	2201      	movs	r2, #1
   1421a:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   1421c:	2300      	movs	r3, #0
   1421e:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14220:	4b0b      	ldr	r3, [pc, #44]	; (14250 <I2cSensorsError+0x48>)
   14222:	681b      	ldr	r3, [r3, #0]
   14224:	220c      	movs	r2, #12
   14226:	18ba      	adds	r2, r7, r2
   14228:	0011      	movs	r1, r2
   1422a:	0018      	movs	r0, r3
   1422c:	4b09      	ldr	r3, [pc, #36]	; (14254 <I2cSensorsError+0x4c>)
   1422e:	4798      	blx	r3
    sensorTransmitError = true;
   14230:	4b09      	ldr	r3, [pc, #36]	; (14258 <I2cSensorsError+0x50>)
   14232:	2201      	movs	r2, #1
   14234:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14236:	68fb      	ldr	r3, [r7, #12]
   14238:	2b00      	cmp	r3, #0
   1423a:	d003      	beq.n	14244 <I2cSensorsError+0x3c>
   1423c:	4b07      	ldr	r3, [pc, #28]	; (1425c <I2cSensorsError+0x54>)
   1423e:	2280      	movs	r2, #128	; 0x80
   14240:	0552      	lsls	r2, r2, #21
   14242:	601a      	str	r2, [r3, #0]
}
   14244:	46c0      	nop			; (mov r8, r8)
   14246:	46bd      	mov	sp, r7
   14248:	b004      	add	sp, #16
   1424a:	bd80      	pop	{r7, pc}
   1424c:	200005e0 	.word	0x200005e0
   14250:	200047d0 	.word	0x200047d0
   14254:	00019d75 	.word	0x00019d75
   14258:	200005dc 	.word	0x200005dc
   1425c:	e000ed04 	.word	0xe000ed04

00014260 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   14260:	b580      	push	{r7, lr}
   14262:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   14264:	4911      	ldr	r1, [pc, #68]	; (142ac <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   14266:	4b12      	ldr	r3, [pc, #72]	; (142b0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14268:	2200      	movs	r2, #0
   1426a:	0018      	movs	r0, r3
   1426c:	4b11      	ldr	r3, [pc, #68]	; (142b4 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   1426e:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   14270:	4b0f      	ldr	r3, [pc, #60]	; (142b0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14272:	2100      	movs	r1, #0
   14274:	0018      	movs	r0, r3
   14276:	4b10      	ldr	r3, [pc, #64]	; (142b8 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14278:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   1427a:	4910      	ldr	r1, [pc, #64]	; (142bc <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   1427c:	4b0c      	ldr	r3, [pc, #48]	; (142b0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1427e:	2201      	movs	r2, #1
   14280:	0018      	movs	r0, r3
   14282:	4b0c      	ldr	r3, [pc, #48]	; (142b4 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   14284:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   14286:	4b0a      	ldr	r3, [pc, #40]	; (142b0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14288:	2101      	movs	r1, #1
   1428a:	0018      	movs	r0, r3
   1428c:	4b0a      	ldr	r3, [pc, #40]	; (142b8 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   1428e:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   14290:	490b      	ldr	r1, [pc, #44]	; (142c0 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   14292:	4b07      	ldr	r3, [pc, #28]	; (142b0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14294:	2202      	movs	r2, #2
   14296:	0018      	movs	r0, r3
   14298:	4b06      	ldr	r3, [pc, #24]	; (142b4 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   1429a:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   1429c:	4b04      	ldr	r3, [pc, #16]	; (142b0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1429e:	2102      	movs	r1, #2
   142a0:	0018      	movs	r0, r3
   142a2:	4b05      	ldr	r3, [pc, #20]	; (142b8 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   142a4:	4798      	blx	r3
}
   142a6:	46c0      	nop			; (mov r8, r8)
   142a8:	46bd      	mov	sp, r7
   142aa:	bd80      	pop	{r7, pc}
   142ac:	00014159 	.word	0x00014159
   142b0:	200047a8 	.word	0x200047a8
   142b4:	000132b1 	.word	0x000132b1
   142b8:	00014069 	.word	0x00014069
   142bc:	000141b1 	.word	0x000141b1
   142c0:	00014209 	.word	0x00014209

000142c4 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   142c4:	b580      	push	{r7, lr}
   142c6:	b082      	sub	sp, #8
   142c8:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   142ca:	2300      	movs	r3, #0
   142cc:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   142ce:	4b14      	ldr	r3, [pc, #80]	; (14320 <I2cInitializeDriver+0x5c>)
   142d0:	4798      	blx	r3
   142d2:	0003      	movs	r3, r0
   142d4:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   142d6:	687b      	ldr	r3, [r7, #4]
   142d8:	2b00      	cmp	r3, #0
   142da:	d11a      	bne.n	14312 <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   142dc:	4b11      	ldr	r3, [pc, #68]	; (14324 <I2cInitializeDriver+0x60>)
   142de:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   142e0:	2001      	movs	r0, #1
   142e2:	4b11      	ldr	r3, [pc, #68]	; (14328 <I2cInitializeDriver+0x64>)
   142e4:	4798      	blx	r3
   142e6:	0002      	movs	r2, r0
   142e8:	4b10      	ldr	r3, [pc, #64]	; (1432c <I2cInitializeDriver+0x68>)
   142ea:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   142ec:	2203      	movs	r2, #3
   142ee:	2100      	movs	r1, #0
   142f0:	2001      	movs	r0, #1
   142f2:	4b0f      	ldr	r3, [pc, #60]	; (14330 <I2cInitializeDriver+0x6c>)
   142f4:	4798      	blx	r3
   142f6:	0002      	movs	r2, r0
   142f8:	4b0e      	ldr	r3, [pc, #56]	; (14334 <I2cInitializeDriver+0x70>)
   142fa:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   142fc:	4b0b      	ldr	r3, [pc, #44]	; (1432c <I2cInitializeDriver+0x68>)
   142fe:	681b      	ldr	r3, [r3, #0]
   14300:	2b00      	cmp	r3, #0
   14302:	d003      	beq.n	1430c <I2cInitializeDriver+0x48>
   14304:	4b0b      	ldr	r3, [pc, #44]	; (14334 <I2cInitializeDriver+0x70>)
   14306:	681b      	ldr	r3, [r3, #0]
   14308:	2b00      	cmp	r3, #0
   1430a:	d103      	bne.n	14314 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   1430c:	2306      	movs	r3, #6
   1430e:	607b      	str	r3, [r7, #4]
        goto exit;
   14310:	e000      	b.n	14314 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   14312:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14314:	687b      	ldr	r3, [r7, #4]
}
   14316:	0018      	movs	r0, r3
   14318:	46bd      	mov	sp, r7
   1431a:	b002      	add	sp, #8
   1431c:	bd80      	pop	{r7, pc}
   1431e:	46c0      	nop			; (mov r8, r8)
   14320:	0001409d 	.word	0x0001409d
   14324:	00014261 	.word	0x00014261
   14328:	000196ad 	.word	0x000196ad
   1432c:	200047a4 	.word	0x200047a4
   14330:	00019445 	.word	0x00019445
   14334:	200047d0 	.word	0x200047d0

00014338 <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   14338:	b590      	push	{r4, r7, lr}
   1433a:	b085      	sub	sp, #20
   1433c:	af00      	add	r7, sp, #0
   1433e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14340:	2300      	movs	r3, #0
   14342:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   14344:	687b      	ldr	r3, [r7, #4]
   14346:	2b00      	cmp	r3, #0
   14348:	d003      	beq.n	14352 <I2cWriteData+0x1a>
   1434a:	687b      	ldr	r3, [r7, #4]
   1434c:	685b      	ldr	r3, [r3, #4]
   1434e:	2b00      	cmp	r3, #0
   14350:	d103      	bne.n	1435a <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   14352:	2308      	movs	r3, #8
   14354:	425b      	negs	r3, r3
   14356:	60fb      	str	r3, [r7, #12]
        goto exit;
   14358:	e01f      	b.n	1439a <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   1435a:	687b      	ldr	r3, [r7, #4]
   1435c:	781b      	ldrb	r3, [r3, #0]
   1435e:	b29a      	uxth	r2, r3
   14360:	4b10      	ldr	r3, [pc, #64]	; (143a4 <I2cWriteData+0x6c>)
   14362:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   14364:	687b      	ldr	r3, [r7, #4]
   14366:	685a      	ldr	r2, [r3, #4]
   14368:	4b0e      	ldr	r3, [pc, #56]	; (143a4 <I2cWriteData+0x6c>)
   1436a:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   1436c:	687b      	ldr	r3, [r7, #4]
   1436e:	89da      	ldrh	r2, [r3, #14]
   14370:	4b0c      	ldr	r3, [pc, #48]	; (143a4 <I2cWriteData+0x6c>)
   14372:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   14374:	230b      	movs	r3, #11
   14376:	18fc      	adds	r4, r7, r3
   14378:	4a0a      	ldr	r2, [pc, #40]	; (143a4 <I2cWriteData+0x6c>)
   1437a:	4b0b      	ldr	r3, [pc, #44]	; (143a8 <I2cWriteData+0x70>)
   1437c:	0011      	movs	r1, r2
   1437e:	0018      	movs	r0, r3
   14380:	4b0a      	ldr	r3, [pc, #40]	; (143ac <I2cWriteData+0x74>)
   14382:	4798      	blx	r3
   14384:	0003      	movs	r3, r0
   14386:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   14388:	230b      	movs	r3, #11
   1438a:	18fb      	adds	r3, r7, r3
   1438c:	781b      	ldrb	r3, [r3, #0]
   1438e:	2b00      	cmp	r3, #0
   14390:	d003      	beq.n	1439a <I2cWriteData+0x62>
        error = ERROR_IO;
   14392:	2306      	movs	r3, #6
   14394:	425b      	negs	r3, r3
   14396:	60fb      	str	r3, [r7, #12]
        goto exit;
   14398:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   1439a:	68fb      	ldr	r3, [r7, #12]
}
   1439c:	0018      	movs	r0, r3
   1439e:	46bd      	mov	sp, r7
   143a0:	b005      	add	sp, #20
   143a2:	bd90      	pop	{r4, r7, pc}
   143a4:	200047d4 	.word	0x200047d4
   143a8:	200047a8 	.word	0x200047a8
   143ac:	00013535 	.word	0x00013535

000143b0 <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   143b0:	b590      	push	{r4, r7, lr}
   143b2:	b085      	sub	sp, #20
   143b4:	af00      	add	r7, sp, #0
   143b6:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   143b8:	2300      	movs	r3, #0
   143ba:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   143bc:	687b      	ldr	r3, [r7, #4]
   143be:	2b00      	cmp	r3, #0
   143c0:	d003      	beq.n	143ca <I2cReadData+0x1a>
   143c2:	687b      	ldr	r3, [r7, #4]
   143c4:	685b      	ldr	r3, [r3, #4]
   143c6:	2b00      	cmp	r3, #0
   143c8:	d103      	bne.n	143d2 <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   143ca:	2308      	movs	r3, #8
   143cc:	425b      	negs	r3, r3
   143ce:	60fb      	str	r3, [r7, #12]
        goto exit;
   143d0:	e01f      	b.n	14412 <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   143d2:	687b      	ldr	r3, [r7, #4]
   143d4:	781b      	ldrb	r3, [r3, #0]
   143d6:	b29a      	uxth	r2, r3
   143d8:	4b10      	ldr	r3, [pc, #64]	; (1441c <I2cReadData+0x6c>)
   143da:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   143dc:	687b      	ldr	r3, [r7, #4]
   143de:	689a      	ldr	r2, [r3, #8]
   143e0:	4b0e      	ldr	r3, [pc, #56]	; (1441c <I2cReadData+0x6c>)
   143e2:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   143e4:	687b      	ldr	r3, [r7, #4]
   143e6:	899a      	ldrh	r2, [r3, #12]
   143e8:	4b0c      	ldr	r3, [pc, #48]	; (1441c <I2cReadData+0x6c>)
   143ea:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   143ec:	230b      	movs	r3, #11
   143ee:	18fc      	adds	r4, r7, r3
   143f0:	4a0a      	ldr	r2, [pc, #40]	; (1441c <I2cReadData+0x6c>)
   143f2:	4b0b      	ldr	r3, [pc, #44]	; (14420 <I2cReadData+0x70>)
   143f4:	0011      	movs	r1, r2
   143f6:	0018      	movs	r0, r3
   143f8:	4b0a      	ldr	r3, [pc, #40]	; (14424 <I2cReadData+0x74>)
   143fa:	4798      	blx	r3
   143fc:	0003      	movs	r3, r0
   143fe:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   14400:	230b      	movs	r3, #11
   14402:	18fb      	adds	r3, r7, r3
   14404:	781b      	ldrb	r3, [r3, #0]
   14406:	2b00      	cmp	r3, #0
   14408:	d003      	beq.n	14412 <I2cReadData+0x62>
        error = ERROR_IO;
   1440a:	2306      	movs	r3, #6
   1440c:	425b      	negs	r3, r3
   1440e:	60fb      	str	r3, [r7, #12]
        goto exit;
   14410:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14412:	68fb      	ldr	r3, [r7, #12]
}
   14414:	0018      	movs	r0, r3
   14416:	46bd      	mov	sp, r7
   14418:	b005      	add	sp, #20
   1441a:	bd90      	pop	{r4, r7, pc}
   1441c:	200047d4 	.word	0x200047d4
   14420:	200047a8 	.word	0x200047a8
   14424:	00013451 	.word	0x00013451

00014428 <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   14428:	b590      	push	{r4, r7, lr}
   1442a:	b083      	sub	sp, #12
   1442c:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   1442e:	2300      	movs	r3, #0
   14430:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   14432:	4b09      	ldr	r3, [pc, #36]	; (14458 <I2cFreeMutex+0x30>)
   14434:	6818      	ldr	r0, [r3, #0]
   14436:	2300      	movs	r3, #0
   14438:	2200      	movs	r2, #0
   1443a:	2100      	movs	r1, #0
   1443c:	4c07      	ldr	r4, [pc, #28]	; (1445c <I2cFreeMutex+0x34>)
   1443e:	47a0      	blx	r4
   14440:	0003      	movs	r3, r0
   14442:	2b01      	cmp	r3, #1
   14444:	d002      	beq.n	1444c <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   14446:	2314      	movs	r3, #20
   14448:	425b      	negs	r3, r3
   1444a:	607b      	str	r3, [r7, #4]
    }
    return error;
   1444c:	687b      	ldr	r3, [r7, #4]
}
   1444e:	0018      	movs	r0, r3
   14450:	46bd      	mov	sp, r7
   14452:	b003      	add	sp, #12
   14454:	bd90      	pop	{r4, r7, pc}
   14456:	46c0      	nop			; (mov r8, r8)
   14458:	200047a4 	.word	0x200047a4
   1445c:	000196ed 	.word	0x000196ed

00014460 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   14460:	b580      	push	{r7, lr}
   14462:	b084      	sub	sp, #16
   14464:	af00      	add	r7, sp, #0
   14466:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14468:	2300      	movs	r3, #0
   1446a:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   1446c:	4b08      	ldr	r3, [pc, #32]	; (14490 <I2cGetMutex+0x30>)
   1446e:	681b      	ldr	r3, [r3, #0]
   14470:	687a      	ldr	r2, [r7, #4]
   14472:	0011      	movs	r1, r2
   14474:	0018      	movs	r0, r3
   14476:	4b07      	ldr	r3, [pc, #28]	; (14494 <I2cGetMutex+0x34>)
   14478:	4798      	blx	r3
   1447a:	0003      	movs	r3, r0
   1447c:	2b01      	cmp	r3, #1
   1447e:	d002      	beq.n	14486 <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   14480:	231d      	movs	r3, #29
   14482:	425b      	negs	r3, r3
   14484:	60fb      	str	r3, [r7, #12]
    }
    return error;
   14486:	68fb      	ldr	r3, [r7, #12]
}
   14488:	0018      	movs	r0, r3
   1448a:	46bd      	mov	sp, r7
   1448c:	b004      	add	sp, #16
   1448e:	bd80      	pop	{r7, pc}
   14490:	200047a4 	.word	0x200047a4
   14494:	0001a3fd 	.word	0x0001a3fd

00014498 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   14498:	b580      	push	{r7, lr}
   1449a:	b084      	sub	sp, #16
   1449c:	af00      	add	r7, sp, #0
   1449e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   144a0:	2300      	movs	r3, #0
   144a2:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   144a4:	4b04      	ldr	r3, [pc, #16]	; (144b8 <I2cGetSemaphoreHandle+0x20>)
   144a6:	681a      	ldr	r2, [r3, #0]
   144a8:	687b      	ldr	r3, [r7, #4]
   144aa:	601a      	str	r2, [r3, #0]
    return error;
   144ac:	68fb      	ldr	r3, [r7, #12]
}
   144ae:	0018      	movs	r0, r3
   144b0:	46bd      	mov	sp, r7
   144b2:	b004      	add	sp, #16
   144b4:	bd80      	pop	{r7, pc}
   144b6:	46c0      	nop			; (mov r8, r8)
   144b8:	200047d0 	.word	0x200047d0

000144bc <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   144bc:	b580      	push	{r7, lr}
   144be:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   144c0:	4b02      	ldr	r3, [pc, #8]	; (144cc <I2cGetTaskErrorStatus+0x10>)
   144c2:	781b      	ldrb	r3, [r3, #0]
}
   144c4:	0018      	movs	r0, r3
   144c6:	46bd      	mov	sp, r7
   144c8:	bd80      	pop	{r7, pc}
   144ca:	46c0      	nop			; (mov r8, r8)
   144cc:	200005dc 	.word	0x200005dc

000144d0 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   144d0:	b580      	push	{r7, lr}
   144d2:	b082      	sub	sp, #8
   144d4:	af00      	add	r7, sp, #0
   144d6:	0002      	movs	r2, r0
   144d8:	1dfb      	adds	r3, r7, #7
   144da:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   144dc:	4b03      	ldr	r3, [pc, #12]	; (144ec <I2cSetTaskErrorStatus+0x1c>)
   144de:	1dfa      	adds	r2, r7, #7
   144e0:	7812      	ldrb	r2, [r2, #0]
   144e2:	701a      	strb	r2, [r3, #0]
}
   144e4:	46c0      	nop			; (mov r8, r8)
   144e6:	46bd      	mov	sp, r7
   144e8:	b002      	add	sp, #8
   144ea:	bd80      	pop	{r7, pc}
   144ec:	200005dc 	.word	0x200005dc

000144f0 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   144f0:	b580      	push	{r7, lr}
   144f2:	b084      	sub	sp, #16
   144f4:	af00      	add	r7, sp, #0
   144f6:	6078      	str	r0, [r7, #4]
   144f8:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   144fa:	2300      	movs	r3, #0
   144fc:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   144fe:	2300      	movs	r3, #0
   14500:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   14502:	2396      	movs	r3, #150	; 0x96
   14504:	005b      	lsls	r3, r3, #1
   14506:	0018      	movs	r0, r3
   14508:	4b28      	ldr	r3, [pc, #160]	; (145ac <I2cWriteDataWait+0xbc>)
   1450a:	4798      	blx	r3
   1450c:	0003      	movs	r3, r0
   1450e:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   14510:	68fb      	ldr	r3, [r7, #12]
   14512:	2b00      	cmp	r3, #0
   14514:	d138      	bne.n	14588 <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   14516:	2308      	movs	r3, #8
   14518:	18fb      	adds	r3, r7, r3
   1451a:	0018      	movs	r0, r3
   1451c:	4b24      	ldr	r3, [pc, #144]	; (145b0 <I2cWriteDataWait+0xc0>)
   1451e:	4798      	blx	r3
   14520:	0003      	movs	r3, r0
   14522:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   14524:	68fb      	ldr	r3, [r7, #12]
   14526:	2b00      	cmp	r3, #0
   14528:	d130      	bne.n	1458c <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   1452a:	687b      	ldr	r3, [r7, #4]
   1452c:	0018      	movs	r0, r3
   1452e:	4b21      	ldr	r3, [pc, #132]	; (145b4 <I2cWriteDataWait+0xc4>)
   14530:	4798      	blx	r3
   14532:	0003      	movs	r3, r0
   14534:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   14536:	68fb      	ldr	r3, [r7, #12]
   14538:	2b00      	cmp	r3, #0
   1453a:	d12a      	bne.n	14592 <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   1453c:	68bb      	ldr	r3, [r7, #8]
   1453e:	683a      	ldr	r2, [r7, #0]
   14540:	0011      	movs	r1, r2
   14542:	0018      	movs	r0, r3
   14544:	4b1c      	ldr	r3, [pc, #112]	; (145b8 <I2cWriteDataWait+0xc8>)
   14546:	4798      	blx	r3
   14548:	0003      	movs	r3, r0
   1454a:	2b01      	cmp	r3, #1
   1454c:	d111      	bne.n	14572 <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   1454e:	4b1b      	ldr	r3, [pc, #108]	; (145bc <I2cWriteDataWait+0xcc>)
   14550:	4798      	blx	r3
   14552:	1e03      	subs	r3, r0, #0
   14554:	d011      	beq.n	1457a <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   14556:	2000      	movs	r0, #0
   14558:	4b19      	ldr	r3, [pc, #100]	; (145c0 <I2cWriteDataWait+0xd0>)
   1455a:	4798      	blx	r3
            if (error != ERROR_NONE) {
   1455c:	68fb      	ldr	r3, [r7, #12]
   1455e:	2b00      	cmp	r3, #0
   14560:	d003      	beq.n	1456a <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   14562:	2321      	movs	r3, #33	; 0x21
   14564:	425b      	negs	r3, r3
   14566:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   14568:	e014      	b.n	14594 <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   1456a:	2303      	movs	r3, #3
   1456c:	425b      	negs	r3, r3
   1456e:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   14570:	e010      	b.n	14594 <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14572:	2303      	movs	r3, #3
   14574:	425b      	negs	r3, r3
   14576:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   14578:	e00c      	b.n	14594 <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   1457a:	4b12      	ldr	r3, [pc, #72]	; (145c4 <I2cWriteDataWait+0xd4>)
   1457c:	4798      	blx	r3
   1457e:	0002      	movs	r2, r0
   14580:	68fb      	ldr	r3, [r7, #12]
   14582:	4313      	orrs	r3, r2
   14584:	60fb      	str	r3, [r7, #12]
   14586:	e002      	b.n	1458e <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   14588:	46c0      	nop			; (mov r8, r8)
   1458a:	e000      	b.n	1458e <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   1458c:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   1458e:	68fb      	ldr	r3, [r7, #12]
   14590:	e007      	b.n	145a2 <I2cWriteDataWait+0xb2>
        goto exitError0;
   14592:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   14594:	4b0b      	ldr	r3, [pc, #44]	; (145c4 <I2cWriteDataWait+0xd4>)
   14596:	4798      	blx	r3
   14598:	0002      	movs	r2, r0
   1459a:	68fb      	ldr	r3, [r7, #12]
   1459c:	4313      	orrs	r3, r2
   1459e:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   145a0:	68fb      	ldr	r3, [r7, #12]
}
   145a2:	0018      	movs	r0, r3
   145a4:	46bd      	mov	sp, r7
   145a6:	b004      	add	sp, #16
   145a8:	bd80      	pop	{r7, pc}
   145aa:	46c0      	nop			; (mov r8, r8)
   145ac:	00014461 	.word	0x00014461
   145b0:	00014499 	.word	0x00014499
   145b4:	00014339 	.word	0x00014339
   145b8:	0001a3fd 	.word	0x0001a3fd
   145bc:	000144bd 	.word	0x000144bd
   145c0:	000144d1 	.word	0x000144d1
   145c4:	00014429 	.word	0x00014429

000145c8 <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   145c8:	b580      	push	{r7, lr}
   145ca:	b086      	sub	sp, #24
   145cc:	af00      	add	r7, sp, #0
   145ce:	60f8      	str	r0, [r7, #12]
   145d0:	60b9      	str	r1, [r7, #8]
   145d2:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   145d4:	2300      	movs	r3, #0
   145d6:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   145d8:	2300      	movs	r3, #0
   145da:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   145dc:	2396      	movs	r3, #150	; 0x96
   145de:	005b      	lsls	r3, r3, #1
   145e0:	0018      	movs	r0, r3
   145e2:	4b35      	ldr	r3, [pc, #212]	; (146b8 <I2cReadDataWait+0xf0>)
   145e4:	4798      	blx	r3
   145e6:	0003      	movs	r3, r0
   145e8:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   145ea:	697b      	ldr	r3, [r7, #20]
   145ec:	2b00      	cmp	r3, #0
   145ee:	d155      	bne.n	1469c <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   145f0:	2310      	movs	r3, #16
   145f2:	18fb      	adds	r3, r7, r3
   145f4:	0018      	movs	r0, r3
   145f6:	4b31      	ldr	r3, [pc, #196]	; (146bc <I2cReadDataWait+0xf4>)
   145f8:	4798      	blx	r3
   145fa:	0003      	movs	r3, r0
   145fc:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   145fe:	697b      	ldr	r3, [r7, #20]
   14600:	2b00      	cmp	r3, #0
   14602:	d14d      	bne.n	146a0 <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   14604:	68fb      	ldr	r3, [r7, #12]
   14606:	0018      	movs	r0, r3
   14608:	4b2d      	ldr	r3, [pc, #180]	; (146c0 <I2cReadDataWait+0xf8>)
   1460a:	4798      	blx	r3
   1460c:	0003      	movs	r3, r0
   1460e:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14610:	697b      	ldr	r3, [r7, #20]
   14612:	2b00      	cmp	r3, #0
   14614:	d147      	bne.n	146a6 <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14616:	693b      	ldr	r3, [r7, #16]
   14618:	687a      	ldr	r2, [r7, #4]
   1461a:	0011      	movs	r1, r2
   1461c:	0018      	movs	r0, r3
   1461e:	4b29      	ldr	r3, [pc, #164]	; (146c4 <I2cReadDataWait+0xfc>)
   14620:	4798      	blx	r3
   14622:	0003      	movs	r3, r0
   14624:	2b01      	cmp	r3, #1
   14626:	d118      	bne.n	1465a <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14628:	4b27      	ldr	r3, [pc, #156]	; (146c8 <I2cReadDataWait+0x100>)
   1462a:	4798      	blx	r3
   1462c:	1e03      	subs	r3, r0, #0
   1462e:	d006      	beq.n	1463e <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
   14630:	2000      	movs	r0, #0
   14632:	4b26      	ldr	r3, [pc, #152]	; (146cc <I2cReadDataWait+0x104>)
   14634:	4798      	blx	r3
            error = ERROR_ABORTED;
   14636:	2303      	movs	r3, #3
   14638:	425b      	negs	r3, r3
   1463a:	617b      	str	r3, [r7, #20]
            goto exitError0;
   1463c:	e034      	b.n	146a8 <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
   1463e:	68bb      	ldr	r3, [r7, #8]
   14640:	0018      	movs	r0, r3
   14642:	4b23      	ldr	r3, [pc, #140]	; (146d0 <I2cReadDataWait+0x108>)
   14644:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
   14646:	68fb      	ldr	r3, [r7, #12]
   14648:	0018      	movs	r0, r3
   1464a:	4b22      	ldr	r3, [pc, #136]	; (146d4 <I2cReadDataWait+0x10c>)
   1464c:	4798      	blx	r3
   1464e:	0003      	movs	r3, r0
   14650:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14652:	697b      	ldr	r3, [r7, #20]
   14654:	2b00      	cmp	r3, #0
   14656:	d004      	beq.n	14662 <I2cReadDataWait+0x9a>
        goto exitError0;
   14658:	e026      	b.n	146a8 <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
   1465a:	2303      	movs	r3, #3
   1465c:	425b      	negs	r3, r3
   1465e:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14660:	e022      	b.n	146a8 <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14662:	693b      	ldr	r3, [r7, #16]
   14664:	687a      	ldr	r2, [r7, #4]
   14666:	0011      	movs	r1, r2
   14668:	0018      	movs	r0, r3
   1466a:	4b16      	ldr	r3, [pc, #88]	; (146c4 <I2cReadDataWait+0xfc>)
   1466c:	4798      	blx	r3
   1466e:	0003      	movs	r3, r0
   14670:	2b01      	cmp	r3, #1
   14672:	d10a      	bne.n	1468a <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14674:	4b14      	ldr	r3, [pc, #80]	; (146c8 <I2cReadDataWait+0x100>)
   14676:	4798      	blx	r3
   14678:	1e03      	subs	r3, r0, #0
   1467a:	d00a      	beq.n	14692 <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
   1467c:	2000      	movs	r0, #0
   1467e:	4b13      	ldr	r3, [pc, #76]	; (146cc <I2cReadDataWait+0x104>)
   14680:	4798      	blx	r3
            error = ERROR_ABORTED;
   14682:	2303      	movs	r3, #3
   14684:	425b      	negs	r3, r3
   14686:	617b      	str	r3, [r7, #20]
            goto exitError0;
   14688:	e00e      	b.n	146a8 <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   1468a:	2303      	movs	r3, #3
   1468c:	425b      	negs	r3, r3
   1468e:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14690:	e00a      	b.n	146a8 <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   14692:	4b11      	ldr	r3, [pc, #68]	; (146d8 <I2cReadDataWait+0x110>)
   14694:	4798      	blx	r3
   14696:	0003      	movs	r3, r0
   14698:	617b      	str	r3, [r7, #20]
   1469a:	e002      	b.n	146a2 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   1469c:	46c0      	nop			; (mov r8, r8)
   1469e:	e000      	b.n	146a2 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   146a0:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   146a2:	697b      	ldr	r3, [r7, #20]
   146a4:	e003      	b.n	146ae <I2cReadDataWait+0xe6>
        goto exitError0;
   146a6:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   146a8:	4b0b      	ldr	r3, [pc, #44]	; (146d8 <I2cReadDataWait+0x110>)
   146aa:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   146ac:	697b      	ldr	r3, [r7, #20]
}
   146ae:	0018      	movs	r0, r3
   146b0:	46bd      	mov	sp, r7
   146b2:	b006      	add	sp, #24
   146b4:	bd80      	pop	{r7, pc}
   146b6:	46c0      	nop			; (mov r8, r8)
   146b8:	00014461 	.word	0x00014461
   146bc:	00014499 	.word	0x00014499
   146c0:	00014339 	.word	0x00014339
   146c4:	0001a3fd 	.word	0x0001a3fd
   146c8:	000144bd 	.word	0x000144bd
   146cc:	000144d1 	.word	0x000144d1
   146d0:	0001b151 	.word	0x0001b151
   146d4:	000143b1 	.word	0x000143b1
   146d8:	00014429 	.word	0x00014429

000146dc <reg_write>:
#include "I2cDriver/I2cDriver.h"
#include "SerialConsole.h"
uint8_t msgOut[64];
I2C_Data adcData; 
static int32_t reg_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   146dc:	b580      	push	{r7, lr}
   146de:	b096      	sub	sp, #88	; 0x58
   146e0:	af00      	add	r7, sp, #0
   146e2:	60f8      	str	r0, [r7, #12]
   146e4:	0008      	movs	r0, r1
   146e6:	607a      	str	r2, [r7, #4]
   146e8:	0019      	movs	r1, r3
   146ea:	230b      	movs	r3, #11
   146ec:	18fb      	adds	r3, r7, r3
   146ee:	1c02      	adds	r2, r0, #0
   146f0:	701a      	strb	r2, [r3, #0]
   146f2:	2308      	movs	r3, #8
   146f4:	18fb      	adds	r3, r7, r3
   146f6:	1c0a      	adds	r2, r1, #0
   146f8:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
	int32_t error = ERROR_NONE;
   146fa:	2300      	movs	r3, #0
   146fc:	653b      	str	r3, [r7, #80]	; 0x50
	msgOut[0]=reg;
   146fe:	4b19      	ldr	r3, [pc, #100]	; (14764 <reg_write+0x88>)
   14700:	220b      	movs	r2, #11
   14702:	18ba      	adds	r2, r7, r2
   14704:	7812      	ldrb	r2, [r2, #0]
   14706:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<len;i++)
   14708:	2300      	movs	r3, #0
   1470a:	657b      	str	r3, [r7, #84]	; 0x54
   1470c:	e00a      	b.n	14724 <reg_write+0x48>
	{
		msgOut[1+i]=bufp[i];
   1470e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   14710:	3301      	adds	r3, #1
   14712:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   14714:	6879      	ldr	r1, [r7, #4]
   14716:	188a      	adds	r2, r1, r2
   14718:	7811      	ldrb	r1, [r2, #0]
   1471a:	4a12      	ldr	r2, [pc, #72]	; (14764 <reg_write+0x88>)
   1471c:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<len;i++)
   1471e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   14720:	3301      	adds	r3, #1
   14722:	657b      	str	r3, [r7, #84]	; 0x54
   14724:	2308      	movs	r3, #8
   14726:	18fb      	adds	r3, r7, r3
   14728:	881a      	ldrh	r2, [r3, #0]
   1472a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1472c:	429a      	cmp	r2, r3
   1472e:	dcee      	bgt.n	1470e <reg_write+0x32>
	}
	
	adcData.address=ADC_SLAVE_ADDR;	///<Address of the I2C device
   14730:	4b0d      	ldr	r3, [pc, #52]	; (14768 <reg_write+0x8c>)
   14732:	222a      	movs	r2, #42	; 0x2a
   14734:	701a      	strb	r2, [r3, #0]
	adcData.msgOut=&msgOut;		///<Pointer to array buffer that we will write from
   14736:	4b0c      	ldr	r3, [pc, #48]	; (14768 <reg_write+0x8c>)
   14738:	4a0a      	ldr	r2, [pc, #40]	; (14764 <reg_write+0x88>)
   1473a:	605a      	str	r2, [r3, #4]
	adcData.lenOut=1+len;
   1473c:	2308      	movs	r3, #8
   1473e:	18fb      	adds	r3, r7, r3
   14740:	881b      	ldrh	r3, [r3, #0]
   14742:	3301      	adds	r3, #1
   14744:	b29a      	uxth	r2, r3
   14746:	4b08      	ldr	r3, [pc, #32]	; (14768 <reg_write+0x8c>)
   14748:	81da      	strh	r2, [r3, #14]
	error= I2cWriteDataWait(&adcData, 100);
   1474a:	4b07      	ldr	r3, [pc, #28]	; (14768 <reg_write+0x8c>)
   1474c:	2164      	movs	r1, #100	; 0x64
   1474e:	0018      	movs	r0, r3
   14750:	4b06      	ldr	r3, [pc, #24]	; (1476c <reg_write+0x90>)
   14752:	4798      	blx	r3
   14754:	0003      	movs	r3, r0
   14756:	653b      	str	r3, [r7, #80]	; 0x50
		char help[64];
		//snprintf(help, 64, "error_write = %d\r\n",error);
		//SerialConsoleWriteString(help);
	return error;
   14758:	6d3b      	ldr	r3, [r7, #80]	; 0x50

}
   1475a:	0018      	movs	r0, r3
   1475c:	46bd      	mov	sp, r7
   1475e:	b016      	add	sp, #88	; 0x58
   14760:	bd80      	pop	{r7, pc}
   14762:	46c0      	nop			; (mov r8, r8)
   14764:	200047e4 	.word	0x200047e4
   14768:	20004824 	.word	0x20004824
   1476c:	000144f1 	.word	0x000144f1

00014770 <reg_read>:

static  int32_t reg_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   14770:	b580      	push	{r7, lr}
   14772:	b096      	sub	sp, #88	; 0x58
   14774:	af00      	add	r7, sp, #0
   14776:	60f8      	str	r0, [r7, #12]
   14778:	0008      	movs	r0, r1
   1477a:	607a      	str	r2, [r7, #4]
   1477c:	0019      	movs	r1, r3
   1477e:	230b      	movs	r3, #11
   14780:	18fb      	adds	r3, r7, r3
   14782:	1c02      	adds	r2, r0, #0
   14784:	701a      	strb	r2, [r3, #0]
   14786:	2308      	movs	r3, #8
   14788:	18fb      	adds	r3, r7, r3
   1478a:	1c0a      	adds	r2, r1, #0
   1478c:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
	int32_t error = ERROR_NONE;
   1478e:	2300      	movs	r3, #0
   14790:	657b      	str	r3, [r7, #84]	; 0x54
	
	adcData.address=ADC_SLAVE_ADDR;	///<Address of the I2C device
   14792:	4b13      	ldr	r3, [pc, #76]	; (147e0 <reg_read+0x70>)
   14794:	222a      	movs	r2, #42	; 0x2a
   14796:	701a      	strb	r2, [r3, #0]

	adcData.lenIn=len;			///<Length of message to read/write;	
   14798:	4b11      	ldr	r3, [pc, #68]	; (147e0 <reg_read+0x70>)
   1479a:	2208      	movs	r2, #8
   1479c:	18ba      	adds	r2, r7, r2
   1479e:	8812      	ldrh	r2, [r2, #0]
   147a0:	819a      	strh	r2, [r3, #12]
	adcData.msgIn=bufp;
   147a2:	4b0f      	ldr	r3, [pc, #60]	; (147e0 <reg_read+0x70>)
   147a4:	687a      	ldr	r2, [r7, #4]
   147a6:	609a      	str	r2, [r3, #8]
	msgOut[0]=reg;
   147a8:	4b0e      	ldr	r3, [pc, #56]	; (147e4 <reg_read+0x74>)
   147aa:	220b      	movs	r2, #11
   147ac:	18ba      	adds	r2, r7, r2
   147ae:	7812      	ldrb	r2, [r2, #0]
   147b0:	701a      	strb	r2, [r3, #0]
	msgOut[1]=0;
   147b2:	4b0c      	ldr	r3, [pc, #48]	; (147e4 <reg_read+0x74>)
   147b4:	2200      	movs	r2, #0
   147b6:	705a      	strb	r2, [r3, #1]
	adcData.msgOut=&msgOut;	
   147b8:	4b09      	ldr	r3, [pc, #36]	; (147e0 <reg_read+0x70>)
   147ba:	4a0a      	ldr	r2, [pc, #40]	; (147e4 <reg_read+0x74>)
   147bc:	605a      	str	r2, [r3, #4]
	adcData.lenOut=1;	///<Pointer to array buffer that we will write from
   147be:	4b08      	ldr	r3, [pc, #32]	; (147e0 <reg_read+0x70>)
   147c0:	2201      	movs	r2, #1
   147c2:	81da      	strh	r2, [r3, #14]
	error= I2cReadDataWait(&adcData, 5, 100);
   147c4:	4b06      	ldr	r3, [pc, #24]	; (147e0 <reg_read+0x70>)
   147c6:	2264      	movs	r2, #100	; 0x64
   147c8:	2105      	movs	r1, #5
   147ca:	0018      	movs	r0, r3
   147cc:	4b06      	ldr	r3, [pc, #24]	; (147e8 <reg_read+0x78>)
   147ce:	4798      	blx	r3
   147d0:	0003      	movs	r3, r0
   147d2:	657b      	str	r3, [r7, #84]	; 0x54
	char help[64];
	//snprintf(help, 64, "error_read = %d\r\n",error);
	//SerialConsoleWriteString(help);
	
	
	return error;
   147d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
   147d6:	0018      	movs	r0, r3
   147d8:	46bd      	mov	sp, r7
   147da:	b016      	add	sp, #88	; 0x58
   147dc:	bd80      	pop	{r7, pc}
   147de:	46c0      	nop			; (mov r8, r8)
   147e0:	20004824 	.word	0x20004824
   147e4:	200047e4 	.word	0x200047e4
   147e8:	000145c9 	.word	0x000145c9

000147ec <ADC_ReadReg>:
void *handle;
uint8_t ADC_ReadReg(uint8_t u8RegAddr)
{
   147ec:	b590      	push	{r4, r7, lr}
   147ee:	b085      	sub	sp, #20
   147f0:	af00      	add	r7, sp, #0
   147f2:	0002      	movs	r2, r0
   147f4:	1dfb      	adds	r3, r7, #7
   147f6:	701a      	strb	r2, [r3, #0]
	//rdata = I2C_ReadByteOneReg(I2C1, ADC_SLAVE_ADDR, u8RegAddr);
	int32_t err= I2cReadData(&adcData);
	return ADC_bytes[0];*/
	static uint8_t read_bytes;
	
	int32_t err= reg_read(handle, u8RegAddr, &read_bytes,1);
   147f8:	4b07      	ldr	r3, [pc, #28]	; (14818 <ADC_ReadReg+0x2c>)
   147fa:	6818      	ldr	r0, [r3, #0]
   147fc:	4a07      	ldr	r2, [pc, #28]	; (1481c <ADC_ReadReg+0x30>)
   147fe:	1dfb      	adds	r3, r7, #7
   14800:	7819      	ldrb	r1, [r3, #0]
   14802:	2301      	movs	r3, #1
   14804:	4c06      	ldr	r4, [pc, #24]	; (14820 <ADC_ReadReg+0x34>)
   14806:	47a0      	blx	r4
   14808:	0003      	movs	r3, r0
   1480a:	60fb      	str	r3, [r7, #12]
	return read_bytes;
   1480c:	4b03      	ldr	r3, [pc, #12]	; (1481c <ADC_ReadReg+0x30>)
   1480e:	781b      	ldrb	r3, [r3, #0]
	
}
   14810:	0018      	movs	r0, r3
   14812:	46bd      	mov	sp, r7
   14814:	b005      	add	sp, #20
   14816:	bd90      	pop	{r4, r7, pc}
   14818:	200047e0 	.word	0x200047e0
   1481c:	200005f4 	.word	0x200005f4
   14820:	00014771 	.word	0x00014771

00014824 <ADC_WriteReg>:


uint8_t ADC_WriteReg(uint8_t u8RegAddr, uint8_t data)
{
   14824:	b590      	push	{r4, r7, lr}
   14826:	b085      	sub	sp, #20
   14828:	af00      	add	r7, sp, #0
   1482a:	0002      	movs	r2, r0
   1482c:	1dfb      	adds	r3, r7, #7
   1482e:	701a      	strb	r2, [r3, #0]
   14830:	1dbb      	adds	r3, r7, #6
   14832:	1c0a      	adds	r2, r1, #0
   14834:	701a      	strb	r2, [r3, #0]
	adcData.address = u8RegAddr;
	adcData.msgOut=&data;
	adcData.lenOut=sizeof(data);
	int32_t err=I2cWriteData(&adcData);
	return err;*/
	int32_t err=reg_write(handle, u8RegAddr,&data,1);
   14836:	4b08      	ldr	r3, [pc, #32]	; (14858 <ADC_WriteReg+0x34>)
   14838:	6818      	ldr	r0, [r3, #0]
   1483a:	1dba      	adds	r2, r7, #6
   1483c:	1dfb      	adds	r3, r7, #7
   1483e:	7819      	ldrb	r1, [r3, #0]
   14840:	2301      	movs	r3, #1
   14842:	4c06      	ldr	r4, [pc, #24]	; (1485c <ADC_WriteReg+0x38>)
   14844:	47a0      	blx	r4
   14846:	0003      	movs	r3, r0
   14848:	60fb      	str	r3, [r7, #12]
	return err;
   1484a:	68fb      	ldr	r3, [r7, #12]
   1484c:	b2db      	uxtb	r3, r3
}
   1484e:	0018      	movs	r0, r3
   14850:	46bd      	mov	sp, r7
   14852:	b005      	add	sp, #20
   14854:	bd90      	pop	{r4, r7, pc}
   14856:	46c0      	nop			; (mov r8, r8)
   14858:	200047e0 	.word	0x200047e0
   1485c:	000146dd 	.word	0x000146dd

00014860 <ADC_Calibration>:

	ADC_WriteReg(CTRL1_ADDR, reg);
}

void ADC_Calibration(void)
{
   14860:	b590      	push	{r4, r7, lr}
   14862:	b083      	sub	sp, #12
   14864:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
   14866:	1dfb      	adds	r3, r7, #7
   14868:	2200      	movs	r2, #0
   1486a:	701a      	strb	r2, [r3, #0]
	while (1)
	{
		reg = ADC_ReadReg(CTRL2_ADDR);
   1486c:	1dfc      	adds	r4, r7, #7
   1486e:	2002      	movs	r0, #2
   14870:	4b21      	ldr	r3, [pc, #132]	; (148f8 <ADC_Calibration+0x98>)
   14872:	4798      	blx	r3
   14874:	0003      	movs	r3, r0
   14876:	7023      	strb	r3, [r4, #0]
		reg &= ~(CALMOD_Msk | CALS_Msk);
   14878:	1dfb      	adds	r3, r7, #7
   1487a:	1dfa      	adds	r2, r7, #7
   1487c:	7812      	ldrb	r2, [r2, #0]
   1487e:	2107      	movs	r1, #7
   14880:	438a      	bics	r2, r1
   14882:	701a      	strb	r2, [r3, #0]

		/* Set Calibration mode */
		reg |= CALMOD_OFFSET_INTERNAL;   /* Calibration mode = Internal Offset Calibration */
   14884:	1dfb      	adds	r3, r7, #7
   14886:	1dfa      	adds	r2, r7, #7
   14888:	7812      	ldrb	r2, [r2, #0]
   1488a:	701a      	strb	r2, [r3, #0]
		ADC_WriteReg(CTRL2_ADDR, reg);
   1488c:	1dfb      	adds	r3, r7, #7
   1488e:	781b      	ldrb	r3, [r3, #0]
   14890:	0019      	movs	r1, r3
   14892:	2002      	movs	r0, #2
   14894:	4b19      	ldr	r3, [pc, #100]	; (148fc <ADC_Calibration+0x9c>)
   14896:	4798      	blx	r3
		/* Start calibration */
		reg |= CALS_ACTION;              /* Start calibration */
   14898:	1dfb      	adds	r3, r7, #7
   1489a:	1dfa      	adds	r2, r7, #7
   1489c:	7812      	ldrb	r2, [r2, #0]
   1489e:	2104      	movs	r1, #4
   148a0:	430a      	orrs	r2, r1
   148a2:	701a      	strb	r2, [r3, #0]
		ADC_WriteReg(CTRL2_ADDR, reg);
   148a4:	1dfb      	adds	r3, r7, #7
   148a6:	781b      	ldrb	r3, [r3, #0]
   148a8:	0019      	movs	r1, r3
   148aa:	2002      	movs	r0, #2
   148ac:	4b13      	ldr	r3, [pc, #76]	; (148fc <ADC_Calibration+0x9c>)
   148ae:	4798      	blx	r3

		while (1)
		{
			/* Wait for calibration finish */
			delay_ms(50); /* Wait 50ms */
   148b0:	2032      	movs	r0, #50	; 0x32
   148b2:	4b13      	ldr	r3, [pc, #76]	; (14900 <ADC_Calibration+0xa0>)
   148b4:	4798      	blx	r3
			/* Read calibration result */
			reg = ADC_ReadReg(CTRL2_ADDR);
   148b6:	1dfc      	adds	r4, r7, #7
   148b8:	2002      	movs	r0, #2
   148ba:	4b0f      	ldr	r3, [pc, #60]	; (148f8 <ADC_Calibration+0x98>)
   148bc:	4798      	blx	r3
   148be:	0003      	movs	r3, r0
   148c0:	7023      	strb	r3, [r4, #0]

			if ((reg & CALS_Msk) == CALS_FINISHED)
   148c2:	1dfb      	adds	r3, r7, #7
   148c4:	781b      	ldrb	r3, [r3, #0]
   148c6:	2204      	movs	r2, #4
   148c8:	4013      	ands	r3, r2
   148ca:	d000      	beq.n	148ce <ADC_Calibration+0x6e>
			delay_ms(50); /* Wait 50ms */
   148cc:	e7f0      	b.n	148b0 <ADC_Calibration+0x50>
			break;
   148ce:	46c0      	nop			; (mov r8, r8)
		}
		reg &= CAL_ERR_Msk;
   148d0:	1dfb      	adds	r3, r7, #7
   148d2:	1dfa      	adds	r2, r7, #7
   148d4:	7812      	ldrb	r2, [r2, #0]
   148d6:	2108      	movs	r1, #8
   148d8:	400a      	ands	r2, r1
   148da:	701a      	strb	r2, [r3, #0]
		if ((reg & CAL_ERR_Msk) == 0) /* There is no error */
   148dc:	1dfb      	adds	r3, r7, #7
   148de:	781b      	ldrb	r3, [r3, #0]
   148e0:	2208      	movs	r2, #8
   148e2:	4013      	ands	r3, r2
   148e4:	d000      	beq.n	148e8 <ADC_Calibration+0x88>
		reg = ADC_ReadReg(CTRL2_ADDR);
   148e6:	e7c1      	b.n	1486c <ADC_Calibration+0xc>
		break;
   148e8:	46c0      	nop			; (mov r8, r8)
	}
	delay_ms(1);    /* Wait 1 ms */
   148ea:	2001      	movs	r0, #1
   148ec:	4b04      	ldr	r3, [pc, #16]	; (14900 <ADC_Calibration+0xa0>)
   148ee:	4798      	blx	r3

}
   148f0:	46c0      	nop			; (mov r8, r8)
   148f2:	46bd      	mov	sp, r7
   148f4:	b003      	add	sp, #12
   148f6:	bd90      	pop	{r4, r7, pc}
   148f8:	000147ed 	.word	0x000147ed
   148fc:	00014825 	.word	0x00014825
   14900:	0001f15d 	.word	0x0001f15d

00014904 <ADCchip_Init>:

void  ADCchip_Init(void)
{
   14904:	b580      	push	{r7, lr}
   14906:	b082      	sub	sp, #8
   14908:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
   1490a:	1dfb      	adds	r3, r7, #7
   1490c:	2200      	movs	r2, #0
   1490e:	701a      	strb	r2, [r3, #0]

	/* Reset */
	reg =  0x01;                   /* Enter reset mode */
   14910:	1dfb      	adds	r3, r7, #7
   14912:	2201      	movs	r2, #1
   14914:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   14916:	1dfb      	adds	r3, r7, #7
   14918:	781b      	ldrb	r3, [r3, #0]
   1491a:	0019      	movs	r1, r3
   1491c:	2000      	movs	r0, #0
   1491e:	4b1d      	ldr	r3, [pc, #116]	; (14994 <ADCchip_Init+0x90>)
   14920:	4798      	blx	r3
	delay_ms(1);         /* Wait 1 ms */
   14922:	2001      	movs	r0, #1
   14924:	4b1c      	ldr	r3, [pc, #112]	; (14998 <ADCchip_Init+0x94>)
   14926:	4798      	blx	r3
	
	reg =  0x02 ;                  /* Enter Noraml mode */
   14928:	1dfb      	adds	r3, r7, #7
   1492a:	2202      	movs	r2, #2
   1492c:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   1492e:	1dfb      	adds	r3, r7, #7
   14930:	781b      	ldrb	r3, [r3, #0]
   14932:	0019      	movs	r1, r3
   14934:	2000      	movs	r0, #0
   14936:	4b17      	ldr	r3, [pc, #92]	; (14994 <ADCchip_Init+0x90>)
   14938:	4798      	blx	r3
	delay_ms(50);         /* Wait 1 ms */
   1493a:	2032      	movs	r0, #50	; 0x32
   1493c:	4b16      	ldr	r3, [pc, #88]	; (14998 <ADCchip_Init+0x94>)
   1493e:	4798      	blx	r3
	reg = (CRP_ACTIVE_LOW |             // DRDY = LOW Active 
	DRDY_SEL_OUTPUT_CONVERSION | // DRDY output = conversion ready 
	VLDO_3V3 |                   // LDO = 3.3V  (no use) 
	GAINS_1);                    // PGA = x1 
*/	
	reg=0x27;
   14940:	1dfb      	adds	r3, r7, #7
   14942:	2227      	movs	r2, #39	; 0x27
   14944:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(CTRL1_ADDR, reg);
   14946:	1dfb      	adds	r3, r7, #7
   14948:	781b      	ldrb	r3, [r3, #0]
   1494a:	0019      	movs	r1, r3
   1494c:	2001      	movs	r0, #1
   1494e:	4b11      	ldr	r3, [pc, #68]	; (14994 <ADCchip_Init+0x90>)
   14950:	4798      	blx	r3
	delay_ms(1);
   14952:	2001      	movs	r0, #1
   14954:	4b10      	ldr	r3, [pc, #64]	; (14998 <ADCchip_Init+0x94>)
   14956:	4798      	blx	r3
	
	reg=0x86;
   14958:	1dfb      	adds	r3, r7, #7
   1495a:	2286      	movs	r2, #134	; 0x86
   1495c:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   1495e:	1dfb      	adds	r3, r7, #7
   14960:	781b      	ldrb	r3, [r3, #0]
   14962:	0019      	movs	r1, r3
   14964:	2000      	movs	r0, #0
   14966:	4b0b      	ldr	r3, [pc, #44]	; (14994 <ADCchip_Init+0x90>)
   14968:	4798      	blx	r3
	delay_ms(1);
   1496a:	2001      	movs	r0, #1
   1496c:	4b0a      	ldr	r3, [pc, #40]	; (14998 <ADCchip_Init+0x94>)
   1496e:	4798      	blx	r3
	
	reg=0x30;
   14970:	1dfb      	adds	r3, r7, #7
   14972:	2230      	movs	r2, #48	; 0x30
   14974:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(OTP_B1_ADDR , reg);
   14976:	1dfb      	adds	r3, r7, #7
   14978:	781b      	ldrb	r3, [r3, #0]
   1497a:	0019      	movs	r1, r3
   1497c:	2015      	movs	r0, #21
   1497e:	4b05      	ldr	r3, [pc, #20]	; (14994 <ADCchip_Init+0x90>)
   14980:	4798      	blx	r3
	delay_ms(1);
   14982:	2001      	movs	r0, #1
   14984:	4b04      	ldr	r3, [pc, #16]	; (14998 <ADCchip_Init+0x94>)
   14986:	4798      	blx	r3
   

	/* Calibration */
	ADC_Calibration();
   14988:	4b04      	ldr	r3, [pc, #16]	; (1499c <ADCchip_Init+0x98>)
   1498a:	4798      	blx	r3
}
   1498c:	46c0      	nop			; (mov r8, r8)
   1498e:	46bd      	mov	sp, r7
   14990:	b002      	add	sp, #8
   14992:	bd80      	pop	{r7, pc}
   14994:	00014825 	.word	0x00014825
   14998:	0001f15d 	.word	0x0001f15d
   1499c:	00014861 	.word	0x00014861

000149a0 <ADC_StartConversion>:

void ADC_StartConversion(void)
{
   149a0:	b590      	push	{r4, r7, lr}
   149a2:	b083      	sub	sp, #12
   149a4:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
   149a6:	1dfb      	adds	r3, r7, #7
   149a8:	2200      	movs	r2, #0
   149aa:	701a      	strb	r2, [r3, #0]
	/* Start conversion */
	reg = ADC_ReadReg(PU_CTRL_ADDR);
   149ac:	1dfc      	adds	r4, r7, #7
   149ae:	2000      	movs	r0, #0
   149b0:	4b09      	ldr	r3, [pc, #36]	; (149d8 <ADC_StartConversion+0x38>)
   149b2:	4798      	blx	r3
   149b4:	0003      	movs	r3, r0
   149b6:	7023      	strb	r3, [r4, #0]
	reg |= CS_START_CONVERSION; /* CS=1 */
   149b8:	1dfb      	adds	r3, r7, #7
   149ba:	1dfa      	adds	r2, r7, #7
   149bc:	7812      	ldrb	r2, [r2, #0]
   149be:	2110      	movs	r1, #16
   149c0:	430a      	orrs	r2, r1
   149c2:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   149c4:	1dfb      	adds	r3, r7, #7
   149c6:	781b      	ldrb	r3, [r3, #0]
   149c8:	0019      	movs	r1, r3
   149ca:	2000      	movs	r0, #0
   149cc:	4b03      	ldr	r3, [pc, #12]	; (149dc <ADC_StartConversion+0x3c>)
   149ce:	4798      	blx	r3
}
   149d0:	46c0      	nop			; (mov r8, r8)
   149d2:	46bd      	mov	sp, r7
   149d4:	b003      	add	sp, #12
   149d6:	bd90      	pop	{r4, r7, pc}
   149d8:	000147ed 	.word	0x000147ed
   149dc:	00014825 	.word	0x00014825

000149e0 <I2C_ReadMultiBytesOneReg>:

int32_t I2C_ReadMultiBytesOneReg(uint8_t u8RegAddr1, uint8_t u8RegAddr2,uint8_t *data,uint32_t len)
{
   149e0:	b580      	push	{r7, lr}
   149e2:	b088      	sub	sp, #32
   149e4:	af00      	add	r7, sp, #0
   149e6:	60ba      	str	r2, [r7, #8]
   149e8:	607b      	str	r3, [r7, #4]
   149ea:	230f      	movs	r3, #15
   149ec:	18fb      	adds	r3, r7, r3
   149ee:	1c02      	adds	r2, r0, #0
   149f0:	701a      	strb	r2, [r3, #0]
   149f2:	230e      	movs	r3, #14
   149f4:	18fb      	adds	r3, r7, r3
   149f6:	1c0a      	adds	r2, r1, #0
   149f8:	701a      	strb	r2, [r3, #0]
	int32_t temp1, temp2, temp3, x;
	temp1 = ADC_ReadReg( 0x02);
   149fa:	2002      	movs	r0, #2
   149fc:	4b14      	ldr	r3, [pc, #80]	; (14a50 <I2C_ReadMultiBytesOneReg+0x70>)
   149fe:	4798      	blx	r3
   14a00:	0003      	movs	r3, r0
   14a02:	61fb      	str	r3, [r7, #28]
	temp1 |= 0 << 7;
	ADC_WriteReg(0x02, temp1);
   14a04:	69fb      	ldr	r3, [r7, #28]
   14a06:	b2db      	uxtb	r3, r3
   14a08:	0019      	movs	r1, r3
   14a0a:	2002      	movs	r0, #2
   14a0c:	4b11      	ldr	r3, [pc, #68]	; (14a54 <I2C_ReadMultiBytesOneReg+0x74>)
   14a0e:	4798      	blx	r3
	delay_ms(1);
   14a10:	2001      	movs	r0, #1
   14a12:	4b11      	ldr	r3, [pc, #68]	; (14a58 <I2C_ReadMultiBytesOneReg+0x78>)
   14a14:	4798      	blx	r3

	temp1 = ADC_ReadReg(0x12);
   14a16:	2012      	movs	r0, #18
   14a18:	4b0d      	ldr	r3, [pc, #52]	; (14a50 <I2C_ReadMultiBytesOneReg+0x70>)
   14a1a:	4798      	blx	r3
   14a1c:	0003      	movs	r3, r0
   14a1e:	61fb      	str	r3, [r7, #28]
	temp2 = ADC_ReadReg(0x13);
   14a20:	2013      	movs	r0, #19
   14a22:	4b0b      	ldr	r3, [pc, #44]	; (14a50 <I2C_ReadMultiBytesOneReg+0x70>)
   14a24:	4798      	blx	r3
   14a26:	0003      	movs	r3, r0
   14a28:	61bb      	str	r3, [r7, #24]
	temp3 = ADC_ReadReg( 0x14);
   14a2a:	2014      	movs	r0, #20
   14a2c:	4b08      	ldr	r3, [pc, #32]	; (14a50 <I2C_ReadMultiBytesOneReg+0x70>)
   14a2e:	4798      	blx	r3
   14a30:	0003      	movs	r3, r0
   14a32:	617b      	str	r3, [r7, #20]

	x = temp1 << 16 | temp2 << 8 | temp3 << 0;
   14a34:	69fb      	ldr	r3, [r7, #28]
   14a36:	041a      	lsls	r2, r3, #16
   14a38:	69bb      	ldr	r3, [r7, #24]
   14a3a:	021b      	lsls	r3, r3, #8
   14a3c:	431a      	orrs	r2, r3
   14a3e:	697b      	ldr	r3, [r7, #20]
   14a40:	4313      	orrs	r3, r2
   14a42:	613b      	str	r3, [r7, #16]
	return x;
   14a44:	693b      	ldr	r3, [r7, #16]
	adcData.lenOut = sizeof(data);

	int32_t err= I2cReadData(&adcData);*/
	
	//int32_t err= reg_read(handle, u8RegAddr2, data,len);
}
   14a46:	0018      	movs	r0, r3
   14a48:	46bd      	mov	sp, r7
   14a4a:	b008      	add	sp, #32
   14a4c:	bd80      	pop	{r7, pc}
   14a4e:	46c0      	nop			; (mov r8, r8)
   14a50:	000147ed 	.word	0x000147ed
   14a54:	00014825 	.word	0x00014825
   14a58:	0001f15d 	.word	0x0001f15d

00014a5c <ADC_Read_Conversion_Data>:

uint32_t ADC_Read_Conversion_Data(void)
{
   14a5c:	b590      	push	{r4, r7, lr}
   14a5e:	b083      	sub	sp, #12
   14a60:	af00      	add	r7, sp, #0
	uint8_t rdata[3];
	uint32_t result;
	result = I2C_ReadMultiBytesOneReg( ADC_SLAVE_ADDR, ADCO_B2_ADDR, &rdata[0], 3);
   14a62:	003a      	movs	r2, r7
   14a64:	2303      	movs	r3, #3
   14a66:	2112      	movs	r1, #18
   14a68:	202a      	movs	r0, #42	; 0x2a
   14a6a:	4c04      	ldr	r4, [pc, #16]	; (14a7c <ADC_Read_Conversion_Data+0x20>)
   14a6c:	47a0      	blx	r4
   14a6e:	0003      	movs	r3, r0
   14a70:	607b      	str	r3, [r7, #4]
	//((rdata[0] << 16) | (rdata[1] << 8) | rdata[2]);
	return result;
   14a72:	687b      	ldr	r3, [r7, #4]
}
   14a74:	0018      	movs	r0, r3
   14a76:	46bd      	mov	sp, r7
   14a78:	b003      	add	sp, #12
   14a7a:	bd90      	pop	{r4, r7, pc}
   14a7c:	000149e1 	.word	0x000149e1

00014a80 <Value_conversion>:

void Value_conversion(int value,uint16_t final[2]){
   14a80:	b5b0      	push	{r4, r5, r7, lr}
   14a82:	b092      	sub	sp, #72	; 0x48
   14a84:	af00      	add	r7, sp, #0
   14a86:	6078      	str	r0, [r7, #4]
   14a88:	6039      	str	r1, [r7, #0]
	float gain;
	float offset;
	uint8_t gain_reg[4];
	uint8_t offset_reg[3];
	//int final[2];
	gain_reg[0]=ADC_ReadReg(GCAL1_B3_ADDR);
   14a8a:	2006      	movs	r0, #6
   14a8c:	4b7d      	ldr	r3, [pc, #500]	; (14c84 <Value_conversion+0x204>)
   14a8e:	4798      	blx	r3
   14a90:	0003      	movs	r3, r0
   14a92:	001a      	movs	r2, r3
   14a94:	232c      	movs	r3, #44	; 0x2c
   14a96:	18fb      	adds	r3, r7, r3
   14a98:	701a      	strb	r2, [r3, #0]
	gain_reg[1]=ADC_ReadReg(GCAL1_B2_ADDR);
   14a9a:	2007      	movs	r0, #7
   14a9c:	4b79      	ldr	r3, [pc, #484]	; (14c84 <Value_conversion+0x204>)
   14a9e:	4798      	blx	r3
   14aa0:	0003      	movs	r3, r0
   14aa2:	001a      	movs	r2, r3
   14aa4:	232c      	movs	r3, #44	; 0x2c
   14aa6:	18fb      	adds	r3, r7, r3
   14aa8:	705a      	strb	r2, [r3, #1]
	gain_reg[2]=ADC_ReadReg(GCAL1_B1_ADDR);
   14aaa:	2008      	movs	r0, #8
   14aac:	4b75      	ldr	r3, [pc, #468]	; (14c84 <Value_conversion+0x204>)
   14aae:	4798      	blx	r3
   14ab0:	0003      	movs	r3, r0
   14ab2:	001a      	movs	r2, r3
   14ab4:	232c      	movs	r3, #44	; 0x2c
   14ab6:	18fb      	adds	r3, r7, r3
   14ab8:	709a      	strb	r2, [r3, #2]
	gain_reg[3]=ADC_ReadReg(GCAL1_B0_ADDR);
   14aba:	2009      	movs	r0, #9
   14abc:	4b71      	ldr	r3, [pc, #452]	; (14c84 <Value_conversion+0x204>)
   14abe:	4798      	blx	r3
   14ac0:	0003      	movs	r3, r0
   14ac2:	001a      	movs	r2, r3
   14ac4:	232c      	movs	r3, #44	; 0x2c
   14ac6:	18fb      	adds	r3, r7, r3
   14ac8:	70da      	strb	r2, [r3, #3]
	offset_reg[0]=ADC_ReadReg(OCAL1_B2_ADDR);
   14aca:	2003      	movs	r0, #3
   14acc:	4b6d      	ldr	r3, [pc, #436]	; (14c84 <Value_conversion+0x204>)
   14ace:	4798      	blx	r3
   14ad0:	0003      	movs	r3, r0
   14ad2:	001a      	movs	r2, r3
   14ad4:	2328      	movs	r3, #40	; 0x28
   14ad6:	18fb      	adds	r3, r7, r3
   14ad8:	701a      	strb	r2, [r3, #0]
	offset_reg[1]=ADC_ReadReg(OCAL1_B1_ADDR);
   14ada:	2004      	movs	r0, #4
   14adc:	4b69      	ldr	r3, [pc, #420]	; (14c84 <Value_conversion+0x204>)
   14ade:	4798      	blx	r3
   14ae0:	0003      	movs	r3, r0
   14ae2:	001a      	movs	r2, r3
   14ae4:	2328      	movs	r3, #40	; 0x28
   14ae6:	18fb      	adds	r3, r7, r3
   14ae8:	705a      	strb	r2, [r3, #1]
	offset_reg[2]=ADC_ReadReg(OCAL1_B0_ADDR);
   14aea:	2005      	movs	r0, #5
   14aec:	4b65      	ldr	r3, [pc, #404]	; (14c84 <Value_conversion+0x204>)
   14aee:	4798      	blx	r3
   14af0:	0003      	movs	r3, r0
   14af2:	001a      	movs	r2, r3
   14af4:	2328      	movs	r3, #40	; 0x28
   14af6:	18fb      	adds	r3, r7, r3
   14af8:	709a      	strb	r2, [r3, #2]
	

	for(int j=0;j<4;j++)
   14afa:	2300      	movs	r3, #0
   14afc:	63fb      	str	r3, [r7, #60]	; 0x3c
   14afe:	e002      	b.n	14b06 <Value_conversion+0x86>
   14b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14b02:	3301      	adds	r3, #1
   14b04:	63fb      	str	r3, [r7, #60]	; 0x3c
   14b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14b08:	2b03      	cmp	r3, #3
   14b0a:	ddf9      	ble.n	14b00 <Value_conversion+0x80>
		//SerialConsoleWriteString(help);
		//snprintf(help, 32, "offset_reg [%d]= %d\r\n",j%4,offset_reg[j%4]);
		//SerialConsoleWriteString(help);
	}

	for(int i=31;i>=0;i--){
   14b0c:	231f      	movs	r3, #31
   14b0e:	63bb      	str	r3, [r7, #56]	; 0x38
   14b10:	e02c      	b.n	14b6c <Value_conversion+0xec>
		gain+=(float)(((gain_reg[3-i/8]>>(i%8))&0x01)*(2<<(i-23)*10000));
   14b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14b14:	2b00      	cmp	r3, #0
   14b16:	da00      	bge.n	14b1a <Value_conversion+0x9a>
   14b18:	3307      	adds	r3, #7
   14b1a:	10db      	asrs	r3, r3, #3
   14b1c:	425b      	negs	r3, r3
   14b1e:	3303      	adds	r3, #3
   14b20:	222c      	movs	r2, #44	; 0x2c
   14b22:	18ba      	adds	r2, r7, r2
   14b24:	5cd3      	ldrb	r3, [r2, r3]
   14b26:	0019      	movs	r1, r3
   14b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14b2a:	4a57      	ldr	r2, [pc, #348]	; (14c88 <Value_conversion+0x208>)
   14b2c:	4013      	ands	r3, r2
   14b2e:	d504      	bpl.n	14b3a <Value_conversion+0xba>
   14b30:	3b01      	subs	r3, #1
   14b32:	2208      	movs	r2, #8
   14b34:	4252      	negs	r2, r2
   14b36:	4313      	orrs	r3, r2
   14b38:	3301      	adds	r3, #1
   14b3a:	4119      	asrs	r1, r3
   14b3c:	000b      	movs	r3, r1
   14b3e:	2201      	movs	r2, #1
   14b40:	4013      	ands	r3, r2
   14b42:	6bba      	ldr	r2, [r7, #56]	; 0x38
   14b44:	3a17      	subs	r2, #23
   14b46:	4951      	ldr	r1, [pc, #324]	; (14c8c <Value_conversion+0x20c>)
   14b48:	434a      	muls	r2, r1
   14b4a:	2102      	movs	r1, #2
   14b4c:	4091      	lsls	r1, r2
   14b4e:	000a      	movs	r2, r1
   14b50:	435a      	muls	r2, r3
   14b52:	4b4f      	ldr	r3, [pc, #316]	; (14c90 <Value_conversion+0x210>)
   14b54:	0010      	movs	r0, r2
   14b56:	4798      	blx	r3
   14b58:	1c02      	adds	r2, r0, #0
   14b5a:	4b4e      	ldr	r3, [pc, #312]	; (14c94 <Value_conversion+0x214>)
   14b5c:	1c11      	adds	r1, r2, #0
   14b5e:	6c78      	ldr	r0, [r7, #68]	; 0x44
   14b60:	4798      	blx	r3
   14b62:	1c03      	adds	r3, r0, #0
   14b64:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=31;i>=0;i--){
   14b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14b68:	3b01      	subs	r3, #1
   14b6a:	63bb      	str	r3, [r7, #56]	; 0x38
   14b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14b6e:	2b00      	cmp	r3, #0
   14b70:	dacf      	bge.n	14b12 <Value_conversion+0x92>
	}
	for(int i=22;i>=0;i--){
   14b72:	2316      	movs	r3, #22
   14b74:	637b      	str	r3, [r7, #52]	; 0x34
   14b76:	e02c      	b.n	14bd2 <Value_conversion+0x152>
		offset+=(float)(((offset_reg[2-i/8]>>(i%8))&0x01)*(2<<(i-23)*10000));
   14b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14b7a:	2b00      	cmp	r3, #0
   14b7c:	da00      	bge.n	14b80 <Value_conversion+0x100>
   14b7e:	3307      	adds	r3, #7
   14b80:	10db      	asrs	r3, r3, #3
   14b82:	425b      	negs	r3, r3
   14b84:	3302      	adds	r3, #2
   14b86:	2228      	movs	r2, #40	; 0x28
   14b88:	18ba      	adds	r2, r7, r2
   14b8a:	5cd3      	ldrb	r3, [r2, r3]
   14b8c:	0019      	movs	r1, r3
   14b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14b90:	4a3d      	ldr	r2, [pc, #244]	; (14c88 <Value_conversion+0x208>)
   14b92:	4013      	ands	r3, r2
   14b94:	d504      	bpl.n	14ba0 <Value_conversion+0x120>
   14b96:	3b01      	subs	r3, #1
   14b98:	2208      	movs	r2, #8
   14b9a:	4252      	negs	r2, r2
   14b9c:	4313      	orrs	r3, r2
   14b9e:	3301      	adds	r3, #1
   14ba0:	4119      	asrs	r1, r3
   14ba2:	000b      	movs	r3, r1
   14ba4:	2201      	movs	r2, #1
   14ba6:	4013      	ands	r3, r2
   14ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   14baa:	3a17      	subs	r2, #23
   14bac:	4937      	ldr	r1, [pc, #220]	; (14c8c <Value_conversion+0x20c>)
   14bae:	434a      	muls	r2, r1
   14bb0:	2102      	movs	r1, #2
   14bb2:	4091      	lsls	r1, r2
   14bb4:	000a      	movs	r2, r1
   14bb6:	435a      	muls	r2, r3
   14bb8:	4b35      	ldr	r3, [pc, #212]	; (14c90 <Value_conversion+0x210>)
   14bba:	0010      	movs	r0, r2
   14bbc:	4798      	blx	r3
   14bbe:	1c02      	adds	r2, r0, #0
   14bc0:	4b34      	ldr	r3, [pc, #208]	; (14c94 <Value_conversion+0x214>)
   14bc2:	1c11      	adds	r1, r2, #0
   14bc4:	6c38      	ldr	r0, [r7, #64]	; 0x40
   14bc6:	4798      	blx	r3
   14bc8:	1c03      	adds	r3, r0, #0
   14bca:	643b      	str	r3, [r7, #64]	; 0x40
	for(int i=22;i>=0;i--){
   14bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14bce:	3b01      	subs	r3, #1
   14bd0:	637b      	str	r3, [r7, #52]	; 0x34
   14bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14bd4:	2b00      	cmp	r3, #0
   14bd6:	dacf      	bge.n	14b78 <Value_conversion+0xf8>
	}
	offset*=(float)(1-(offset_reg[0]>>7)&0x01);
   14bd8:	2328      	movs	r3, #40	; 0x28
   14bda:	18fb      	adds	r3, r7, r3
   14bdc:	781b      	ldrb	r3, [r3, #0]
   14bde:	09db      	lsrs	r3, r3, #7
   14be0:	b2db      	uxtb	r3, r3
   14be2:	001a      	movs	r2, r3
   14be4:	2301      	movs	r3, #1
   14be6:	1a9b      	subs	r3, r3, r2
   14be8:	2201      	movs	r2, #1
   14bea:	401a      	ands	r2, r3
   14bec:	4b28      	ldr	r3, [pc, #160]	; (14c90 <Value_conversion+0x210>)
   14bee:	0010      	movs	r0, r2
   14bf0:	4798      	blx	r3
   14bf2:	1c02      	adds	r2, r0, #0
   14bf4:	4b28      	ldr	r3, [pc, #160]	; (14c98 <Value_conversion+0x218>)
   14bf6:	1c11      	adds	r1, r2, #0
   14bf8:	6c38      	ldr	r0, [r7, #64]	; 0x40
   14bfa:	4798      	blx	r3
   14bfc:	1c03      	adds	r3, r0, #0
   14bfe:	643b      	str	r3, [r7, #64]	; 0x40
	//snprintf(help, 32, " gain= %d\r\n",gain);
	//SerialConsoleWriteString(help);
	//snprintf(help, 32, "final offset= %d\r\n",offset);
	//SerialConsoleWriteString(help);
	
	calibrate_adc=(float)gain/10000*((float)value-(float)offset/10000);
   14c00:	4b26      	ldr	r3, [pc, #152]	; (14c9c <Value_conversion+0x21c>)
   14c02:	4927      	ldr	r1, [pc, #156]	; (14ca0 <Value_conversion+0x220>)
   14c04:	6c78      	ldr	r0, [r7, #68]	; 0x44
   14c06:	4798      	blx	r3
   14c08:	1c03      	adds	r3, r0, #0
   14c0a:	1c1c      	adds	r4, r3, #0
   14c0c:	4b20      	ldr	r3, [pc, #128]	; (14c90 <Value_conversion+0x210>)
   14c0e:	6878      	ldr	r0, [r7, #4]
   14c10:	4798      	blx	r3
   14c12:	1c05      	adds	r5, r0, #0
   14c14:	4b21      	ldr	r3, [pc, #132]	; (14c9c <Value_conversion+0x21c>)
   14c16:	4922      	ldr	r1, [pc, #136]	; (14ca0 <Value_conversion+0x220>)
   14c18:	6c38      	ldr	r0, [r7, #64]	; 0x40
   14c1a:	4798      	blx	r3
   14c1c:	1c03      	adds	r3, r0, #0
   14c1e:	1c1a      	adds	r2, r3, #0
   14c20:	4b20      	ldr	r3, [pc, #128]	; (14ca4 <Value_conversion+0x224>)
   14c22:	1c11      	adds	r1, r2, #0
   14c24:	1c28      	adds	r0, r5, #0
   14c26:	4798      	blx	r3
   14c28:	1c03      	adds	r3, r0, #0
   14c2a:	1c1a      	adds	r2, r3, #0
   14c2c:	4b1a      	ldr	r3, [pc, #104]	; (14c98 <Value_conversion+0x218>)
   14c2e:	1c11      	adds	r1, r2, #0
   14c30:	1c20      	adds	r0, r4, #0
   14c32:	4798      	blx	r3
   14c34:	1c03      	adds	r3, r0, #0
   14c36:	633b      	str	r3, [r7, #48]	; 0x30
	
	final[0]=(int)calibrate_adc;
   14c38:	4b1b      	ldr	r3, [pc, #108]	; (14ca8 <Value_conversion+0x228>)
   14c3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   14c3c:	4798      	blx	r3
   14c3e:	0003      	movs	r3, r0
   14c40:	b29a      	uxth	r2, r3
   14c42:	683b      	ldr	r3, [r7, #0]
   14c44:	801a      	strh	r2, [r3, #0]
	final[1]=10000*(calibrate_adc-final[0]);
   14c46:	683b      	ldr	r3, [r7, #0]
   14c48:	1c9c      	adds	r4, r3, #2
   14c4a:	683b      	ldr	r3, [r7, #0]
   14c4c:	881b      	ldrh	r3, [r3, #0]
   14c4e:	001a      	movs	r2, r3
   14c50:	4b0f      	ldr	r3, [pc, #60]	; (14c90 <Value_conversion+0x210>)
   14c52:	0010      	movs	r0, r2
   14c54:	4798      	blx	r3
   14c56:	1c02      	adds	r2, r0, #0
   14c58:	4b12      	ldr	r3, [pc, #72]	; (14ca4 <Value_conversion+0x224>)
   14c5a:	1c11      	adds	r1, r2, #0
   14c5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
   14c5e:	4798      	blx	r3
   14c60:	1c03      	adds	r3, r0, #0
   14c62:	1c1a      	adds	r2, r3, #0
   14c64:	4b0c      	ldr	r3, [pc, #48]	; (14c98 <Value_conversion+0x218>)
   14c66:	490e      	ldr	r1, [pc, #56]	; (14ca0 <Value_conversion+0x220>)
   14c68:	1c10      	adds	r0, r2, #0
   14c6a:	4798      	blx	r3
   14c6c:	1c03      	adds	r3, r0, #0
   14c6e:	1c1a      	adds	r2, r3, #0
   14c70:	4b0e      	ldr	r3, [pc, #56]	; (14cac <Value_conversion+0x22c>)
   14c72:	1c10      	adds	r0, r2, #0
   14c74:	4798      	blx	r3
   14c76:	0003      	movs	r3, r0
   14c78:	b29b      	uxth	r3, r3
   14c7a:	8023      	strh	r3, [r4, #0]
	//snprintf(help, 32, "final_int= %d\r\n",final[0]);
	//SerialConsoleWriteString(help);
	//snprintf(help, 32, "final_decimal= %d\r\n",final[1]);
	//SerialConsoleWriteString(help);
	return final;
   14c7c:	46c0      	nop			; (mov r8, r8)
	//final=(float)((float)value / 16777216) * (float)(3.14);
   14c7e:	46bd      	mov	sp, r7
   14c80:	b012      	add	sp, #72	; 0x48
   14c82:	bdb0      	pop	{r4, r5, r7, pc}
   14c84:	000147ed 	.word	0x000147ed
   14c88:	80000007 	.word	0x80000007
   14c8c:	00002710 	.word	0x00002710
   14c90:	000329a1 	.word	0x000329a1
   14c94:	00031e35 	.word	0x00031e35
   14c98:	000323e9 	.word	0x000323e9
   14c9c:	00032159 	.word	0x00032159
   14ca0:	461c4000 	.word	0x461c4000
   14ca4:	00032629 	.word	0x00032629
   14ca8:	00032961 	.word	0x00032961
   14cac:	00031e05 	.word	0x00031e05

00014cb0 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   14cb0:	b580      	push	{r7, lr}
   14cb2:	b084      	sub	sp, #16
   14cb4:	af00      	add	r7, sp, #0
   14cb6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   14cb8:	687b      	ldr	r3, [r7, #4]
   14cba:	681b      	ldr	r3, [r3, #0]
   14cbc:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   14cbe:	46c0      	nop			; (mov r8, r8)
   14cc0:	68fb      	ldr	r3, [r7, #12]
   14cc2:	689b      	ldr	r3, [r3, #8]
   14cc4:	2202      	movs	r2, #2
   14cc6:	4013      	ands	r3, r2
   14cc8:	d1fa      	bne.n	14cc0 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   14cca:	68fb      	ldr	r3, [r7, #12]
   14ccc:	681b      	ldr	r3, [r3, #0]
   14cce:	2202      	movs	r2, #2
   14cd0:	431a      	orrs	r2, r3
   14cd2:	68fb      	ldr	r3, [r7, #12]
   14cd4:	601a      	str	r2, [r3, #0]
}
   14cd6:	46c0      	nop			; (mov r8, r8)
   14cd8:	46bd      	mov	sp, r7
   14cda:	b004      	add	sp, #16
   14cdc:	bd80      	pop	{r7, pc}
	...

00014ce0 <configure_tcc>:
 *  Author: 60267
 */ 
#include "servo.h"
struct tcc_module tcc_instance;
void configure_tcc(void)
{
   14ce0:	b580      	push	{r7, lr}
   14ce2:	b0aa      	sub	sp, #168	; 0xa8
   14ce4:	af00      	add	r7, sp, #0
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, CONF_PWM_MODULE);
   14ce6:	4a15      	ldr	r2, [pc, #84]	; (14d3c <configure_tcc+0x5c>)
   14ce8:	1d3b      	adds	r3, r7, #4
   14cea:	0011      	movs	r1, r2
   14cec:	0018      	movs	r0, r3
   14cee:	4b14      	ldr	r3, [pc, #80]	; (14d40 <configure_tcc+0x60>)
   14cf0:	4798      	blx	r3
	config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV4;
   14cf2:	1d3b      	adds	r3, r7, #4
   14cf4:	2202      	movs	r2, #2
   14cf6:	72da      	strb	r2, [r3, #11]
	config_tcc.counter.period = 0xBA2E;
   14cf8:	1d3b      	adds	r3, r7, #4
   14cfa:	4a12      	ldr	r2, [pc, #72]	; (14d44 <configure_tcc+0x64>)
   14cfc:	605a      	str	r2, [r3, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
   14cfe:	1d3b      	adds	r3, r7, #4
   14d00:	2202      	movs	r2, #2
   14d02:	761a      	strb	r2, [r3, #24]
	config_tcc.compare.match[CONF_PWM_CHANNEL] = (0xBA2E / 2);
   14d04:	1d3b      	adds	r3, r7, #4
   14d06:	4a10      	ldr	r2, [pc, #64]	; (14d48 <configure_tcc+0x68>)
   14d08:	625a      	str	r2, [r3, #36]	; 0x24
	config_tcc.pins.enable_wave_out_pin[CONF_PWM_OUTPUT] = true;
   14d0a:	1d3b      	adds	r3, r7, #4
   14d0c:	229a      	movs	r2, #154	; 0x9a
   14d0e:	2101      	movs	r1, #1
   14d10:	5499      	strb	r1, [r3, r2]
	config_tcc.pins.wave_out_pin[CONF_PWM_OUTPUT]        = CONF_PWM_OUT_PIN;
   14d12:	1d3b      	adds	r3, r7, #4
   14d14:	220a      	movs	r2, #10
   14d16:	661a      	str	r2, [r3, #96]	; 0x60
	config_tcc.pins.wave_out_pin_mux[CONF_PWM_OUTPUT]    = CONF_PWM_OUT_MUX;
   14d18:	1d3b      	adds	r3, r7, #4
   14d1a:	2280      	movs	r2, #128	; 0x80
   14d1c:	2105      	movs	r1, #5
   14d1e:	5099      	str	r1, [r3, r2]
	tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
   14d20:	1d3a      	adds	r2, r7, #4
   14d22:	4906      	ldr	r1, [pc, #24]	; (14d3c <configure_tcc+0x5c>)
   14d24:	4b09      	ldr	r3, [pc, #36]	; (14d4c <configure_tcc+0x6c>)
   14d26:	0018      	movs	r0, r3
   14d28:	4b09      	ldr	r3, [pc, #36]	; (14d50 <configure_tcc+0x70>)
   14d2a:	4798      	blx	r3
	tcc_enable(&tcc_instance);
   14d2c:	4b07      	ldr	r3, [pc, #28]	; (14d4c <configure_tcc+0x6c>)
   14d2e:	0018      	movs	r0, r3
   14d30:	4b08      	ldr	r3, [pc, #32]	; (14d54 <configure_tcc+0x74>)
   14d32:	4798      	blx	r3
}
   14d34:	46c0      	nop			; (mov r8, r8)
   14d36:	46bd      	mov	sp, r7
   14d38:	b02a      	add	sp, #168	; 0xa8
   14d3a:	bd80      	pop	{r7, pc}
   14d3c:	42002000 	.word	0x42002000
   14d40:	0002939d 	.word	0x0002939d
   14d44:	0000ba2e 	.word	0x0000ba2e
   14d48:	00005d17 	.word	0x00005d17
   14d4c:	20004834 	.word	0x20004834
   14d50:	000299f9 	.word	0x000299f9
   14d54:	00014cb1 	.word	0x00014cb1

00014d58 <servo_setDuty>:


void servo_setDuty(int dutyCycle)
{
   14d58:	b580      	push	{r7, lr}
   14d5a:	b084      	sub	sp, #16
   14d5c:	af00      	add	r7, sp, #0
   14d5e:	6078      	str	r0, [r7, #4]
	uint32_t compareValue = 0xBA2E / dutyCycle;
   14d60:	4b07      	ldr	r3, [pc, #28]	; (14d80 <servo_setDuty+0x28>)
   14d62:	6879      	ldr	r1, [r7, #4]
   14d64:	4807      	ldr	r0, [pc, #28]	; (14d84 <servo_setDuty+0x2c>)
   14d66:	4798      	blx	r3
   14d68:	0003      	movs	r3, r0
   14d6a:	60fb      	str	r3, [r7, #12]
	tcc_set_compare_value(&tcc_instance, CONF_PWM_CHANNEL, compareValue);
   14d6c:	68fa      	ldr	r2, [r7, #12]
   14d6e:	4b06      	ldr	r3, [pc, #24]	; (14d88 <servo_setDuty+0x30>)
   14d70:	2102      	movs	r1, #2
   14d72:	0018      	movs	r0, r3
   14d74:	4b05      	ldr	r3, [pc, #20]	; (14d8c <servo_setDuty+0x34>)
   14d76:	4798      	blx	r3
   14d78:	46c0      	nop			; (mov r8, r8)
   14d7a:	46bd      	mov	sp, r7
   14d7c:	b004      	add	sp, #16
   14d7e:	bd80      	pop	{r7, pc}
   14d80:	00031bd9 	.word	0x00031bd9
   14d84:	0000ba2e 	.word	0x0000ba2e
   14d88:	20004834 	.word	0x20004834
   14d8c:	00029eb9 	.word	0x00029eb9

00014d90 <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
   14d90:	b590      	push	{r4, r7, lr}
   14d92:	b09f      	sub	sp, #124	; 0x7c
   14d94:	af00      	add	r7, sp, #0
   14d96:	6078      	str	r0, [r7, #4]
    // Do initialization code here
	SerialConsoleWriteString("UI Task Started!");
   14d98:	4b40      	ldr	r3, [pc, #256]	; (14e9c <vUiHandlerTask+0x10c>)
   14d9a:	0018      	movs	r0, r3
   14d9c:	4b40      	ldr	r3, [pc, #256]	; (14ea0 <vUiHandlerTask+0x110>)
   14d9e:	4798      	blx	r3
	configure_tcc();
   14da0:	4b40      	ldr	r3, [pc, #256]	; (14ea4 <vUiHandlerTask+0x114>)
   14da2:	4798      	blx	r3
	servo_setDuty(2);
   14da4:	2002      	movs	r0, #2
   14da6:	4b40      	ldr	r3, [pc, #256]	; (14ea8 <vUiHandlerTask+0x118>)
   14da8:	4798      	blx	r3

	
    // Graphics Test - Students to uncomment to test out the OLED driver if you are using it! 
	
    gfx_mono_init();
   14daa:	4b40      	ldr	r3, [pc, #256]	; (14eac <vUiHandlerTask+0x11c>)
   14dac:	4798      	blx	r3
    gfx_mono_draw_string("ESE516", 0, 8, &sysfont);
   14dae:	4b40      	ldr	r3, [pc, #256]	; (14eb0 <vUiHandlerTask+0x120>)
   14db0:	4840      	ldr	r0, [pc, #256]	; (14eb4 <vUiHandlerTask+0x124>)
   14db2:	2208      	movs	r2, #8
   14db4:	2100      	movs	r1, #0
   14db6:	4c40      	ldr	r4, [pc, #256]	; (14eb8 <vUiHandlerTask+0x128>)
   14db8:	47a0      	blx	r4
    gfx_mono_draw_string("HIGHWAY", 0, 18, &sysfont);
   14dba:	4b3d      	ldr	r3, [pc, #244]	; (14eb0 <vUiHandlerTask+0x120>)
   14dbc:	483f      	ldr	r0, [pc, #252]	; (14ebc <vUiHandlerTask+0x12c>)
   14dbe:	2212      	movs	r2, #18
   14dc0:	2100      	movs	r1, #0
   14dc2:	4c3d      	ldr	r4, [pc, #244]	; (14eb8 <vUiHandlerTask+0x128>)
   14dc4:	47a0      	blx	r4
	uint8_t count = 0;
   14dc6:	2377      	movs	r3, #119	; 0x77
   14dc8:	18fb      	adds	r3, r7, r3
   14dca:	2200      	movs	r2, #0
   14dcc:	701a      	strb	r2, [r3, #0]
	uint8_t count_nau = 0;
   14dce:	2376      	movs	r3, #118	; 0x76
   14dd0:	18fb      	adds	r3, r7, r3
   14dd2:	2200      	movs	r2, #0
   14dd4:	701a      	strb	r2, [r3, #0]
	uint16_t nau_i_total = 0;
   14dd6:	2374      	movs	r3, #116	; 0x74
   14dd8:	18fb      	adds	r3, r7, r3
   14dda:	2200      	movs	r2, #0
   14ddc:	801a      	strh	r2, [r3, #0]
	uint16_t nau_f_total = 0;
   14dde:	2372      	movs	r3, #114	; 0x72
   14de0:	18fb      	adds	r3, r7, r3
   14de2:	2200      	movs	r2, #0
   14de4:	801a      	strh	r2, [r3, #0]
	char oled_display[24];
	bool servo_flag = false;
   14de6:	2371      	movs	r3, #113	; 0x71
   14de8:	18fb      	adds	r3, r7, r3
   14dea:	2200      	movs	r2, #0
   14dec:	701a      	strb	r2, [r3, #0]
	ADCchip_Init();
   14dee:	4b34      	ldr	r3, [pc, #208]	; (14ec0 <vUiHandlerTask+0x130>)
   14df0:	4798      	blx	r3
	

    // Here we start the loop for the UI State Machine
    while (1) {
		ADC_StartConversion();
   14df2:	4b34      	ldr	r3, [pc, #208]	; (14ec4 <vUiHandlerTask+0x134>)
   14df4:	4798      	blx	r3
		struct NauPacket nauvar;
		
		while ((ADC_ReadReg(PU_CTRL_ADDR)&CR_Msk) != CR_DATA_RDY);
   14df6:	46c0      	nop			; (mov r8, r8)
   14df8:	2000      	movs	r0, #0
   14dfa:	4b33      	ldr	r3, [pc, #204]	; (14ec8 <vUiHandlerTask+0x138>)
   14dfc:	4798      	blx	r3
   14dfe:	0003      	movs	r3, r0
   14e00:	001a      	movs	r2, r3
   14e02:	2320      	movs	r3, #32
   14e04:	4013      	ands	r3, r2
   14e06:	2b20      	cmp	r3, #32
   14e08:	d1f6      	bne.n	14df8 <vUiHandlerTask+0x68>
		uint32_t ADC_value=ADC_Read_Conversion_Data();
   14e0a:	4b30      	ldr	r3, [pc, #192]	; (14ecc <vUiHandlerTask+0x13c>)
   14e0c:	4798      	blx	r3
   14e0e:	0003      	movs	r3, r0
   14e10:	66fb      	str	r3, [r7, #108]	; 0x6c
		uint16_t ADC_Array[2];
		//int ADC_Array[2];
		Value_conversion(ADC_value,ADC_Array);
   14e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   14e14:	2248      	movs	r2, #72	; 0x48
   14e16:	18ba      	adds	r2, r7, r2
   14e18:	0011      	movs	r1, r2
   14e1a:	0018      	movs	r0, r3
   14e1c:	4b2c      	ldr	r3, [pc, #176]	; (14ed0 <vUiHandlerTask+0x140>)
   14e1e:	4798      	blx	r3
		char help[64];
		//snprintf(help, 64, "input vol = VIN1P - VIN1N = %d\r\n",ADC_Array[0]);
		nauvar.nau_i = ADC_Array[0];
   14e20:	2348      	movs	r3, #72	; 0x48
   14e22:	18fb      	adds	r3, r7, r3
   14e24:	881a      	ldrh	r2, [r3, #0]
   14e26:	234c      	movs	r3, #76	; 0x4c
   14e28:	18fb      	adds	r3, r7, r3
   14e2a:	801a      	strh	r2, [r3, #0]
		nauvar.nau_f = ADC_Array[1];
   14e2c:	2348      	movs	r3, #72	; 0x48
   14e2e:	18fb      	adds	r3, r7, r3
   14e30:	885a      	ldrh	r2, [r3, #2]
   14e32:	234c      	movs	r3, #76	; 0x4c
   14e34:	18fb      	adds	r3, r7, r3
   14e36:	805a      	strh	r2, [r3, #2]
		//nau_i_total = ADC_Array[0] + nau_i_total;
		//nau_f_total = ADC_Array[1] + nau_f_total;
		
		int error = WifiAddNauDataToQueue(&nauvar);
   14e38:	234c      	movs	r3, #76	; 0x4c
   14e3a:	18fb      	adds	r3, r7, r3
   14e3c:	0018      	movs	r0, r3
   14e3e:	4b25      	ldr	r3, [pc, #148]	; (14ed4 <vUiHandlerTask+0x144>)
   14e40:	4798      	blx	r3
   14e42:	0003      	movs	r3, r0
   14e44:	66bb      	str	r3, [r7, #104]	; 0x68
			//int error = WifiAddNauDataToQueue(&nauvar);
		//}
		//
		
		
		if(count!=100)
   14e46:	2377      	movs	r3, #119	; 0x77
   14e48:	18fb      	adds	r3, r7, r3
   14e4a:	781b      	ldrb	r3, [r3, #0]
   14e4c:	2b64      	cmp	r3, #100	; 0x64
   14e4e:	d007      	beq.n	14e60 <vUiHandlerTask+0xd0>
		{
			count = count + 1;
   14e50:	2377      	movs	r3, #119	; 0x77
   14e52:	18fb      	adds	r3, r7, r3
   14e54:	2277      	movs	r2, #119	; 0x77
   14e56:	18ba      	adds	r2, r7, r2
   14e58:	7812      	ldrb	r2, [r2, #0]
   14e5a:	3201      	adds	r2, #1
   14e5c:	701a      	strb	r2, [r3, #0]
   14e5e:	e016      	b.n	14e8e <vUiHandlerTask+0xfe>
		}
		else
		{
			count = 0;
   14e60:	2377      	movs	r3, #119	; 0x77
   14e62:	18fb      	adds	r3, r7, r3
   14e64:	2200      	movs	r2, #0
   14e66:	701a      	strb	r2, [r3, #0]
			//gfx_mono_init();
			sprintf(oled_display, "%d.%d", ADC_Array[0], ADC_Array[1]);
   14e68:	2348      	movs	r3, #72	; 0x48
   14e6a:	18fb      	adds	r3, r7, r3
   14e6c:	881b      	ldrh	r3, [r3, #0]
   14e6e:	001a      	movs	r2, r3
   14e70:	2348      	movs	r3, #72	; 0x48
   14e72:	18fb      	adds	r3, r7, r3
   14e74:	885b      	ldrh	r3, [r3, #2]
   14e76:	4918      	ldr	r1, [pc, #96]	; (14ed8 <vUiHandlerTask+0x148>)
   14e78:	2050      	movs	r0, #80	; 0x50
   14e7a:	1838      	adds	r0, r7, r0
   14e7c:	4c17      	ldr	r4, [pc, #92]	; (14edc <vUiHandlerTask+0x14c>)
   14e7e:	47a0      	blx	r4
			gfx_mono_draw_string(oled_display, 0, 8, &sysfont);
   14e80:	4b0b      	ldr	r3, [pc, #44]	; (14eb0 <vUiHandlerTask+0x120>)
   14e82:	2250      	movs	r2, #80	; 0x50
   14e84:	18b8      	adds	r0, r7, r2
   14e86:	2208      	movs	r2, #8
   14e88:	2100      	movs	r1, #0
   14e8a:	4c0b      	ldr	r4, [pc, #44]	; (14eb8 <vUiHandlerTask+0x128>)
   14e8c:	47a0      	blx	r4
		}
		
		
		
        // After execution, you can put a thread to sleep for some time.
        vTaskDelay(500);
   14e8e:	23fa      	movs	r3, #250	; 0xfa
   14e90:	005b      	lsls	r3, r3, #1
   14e92:	0018      	movs	r0, r3
   14e94:	4b12      	ldr	r3, [pc, #72]	; (14ee0 <vUiHandlerTask+0x150>)
   14e96:	4798      	blx	r3
    while (1) {
   14e98:	e7ab      	b.n	14df2 <vUiHandlerTask+0x62>
   14e9a:	46c0      	nop			; (mov r8, r8)
   14e9c:	00035e78 	.word	0x00035e78
   14ea0:	0001cda5 	.word	0x0001cda5
   14ea4:	00014ce1 	.word	0x00014ce1
   14ea8:	00014d59 	.word	0x00014d59
   14eac:	0001287d 	.word	0x0001287d
   14eb0:	20000000 	.word	0x20000000
   14eb4:	00035e8c 	.word	0x00035e8c
   14eb8:	00012721 	.word	0x00012721
   14ebc:	00035e94 	.word	0x00035e94
   14ec0:	00014905 	.word	0x00014905
   14ec4:	000149a1 	.word	0x000149a1
   14ec8:	000147ed 	.word	0x000147ed
   14ecc:	00014a5d 	.word	0x00014a5d
   14ed0:	00014a81 	.word	0x00014a81
   14ed4:	000164e9 	.word	0x000164e9
   14ed8:	00035e9c 	.word	0x00035e9c
   14edc:	0003483d 	.word	0x0003483d
   14ee0:	0001b151 	.word	0x0001b151

00014ee4 <NVIC_SystemReset>:
{
   14ee4:	b580      	push	{r7, lr}
   14ee6:	af00      	add	r7, sp, #0
   14ee8:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   14eec:	4b02      	ldr	r3, [pc, #8]	; (14ef8 <NVIC_SystemReset+0x14>)
   14eee:	4a03      	ldr	r2, [pc, #12]	; (14efc <NVIC_SystemReset+0x18>)
   14ef0:	60da      	str	r2, [r3, #12]
   14ef2:	f3bf 8f4f 	dsb	sy
  while(1);                                                    /* wait until reset */
   14ef6:	e7fe      	b.n	14ef6 <NVIC_SystemReset+0x12>
   14ef8:	e000ed00 	.word	0xe000ed00
   14efc:	05fa0004 	.word	0x05fa0004

00014f00 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   14f00:	b580      	push	{r7, lr}
   14f02:	b084      	sub	sp, #16
   14f04:	af00      	add	r7, sp, #0
   14f06:	0002      	movs	r2, r0
   14f08:	1dfb      	adds	r3, r7, #7
   14f0a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   14f0c:	230f      	movs	r3, #15
   14f0e:	18fb      	adds	r3, r7, r3
   14f10:	1dfa      	adds	r2, r7, #7
   14f12:	7812      	ldrb	r2, [r2, #0]
   14f14:	09d2      	lsrs	r2, r2, #7
   14f16:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   14f18:	230e      	movs	r3, #14
   14f1a:	18fb      	adds	r3, r7, r3
   14f1c:	1dfa      	adds	r2, r7, #7
   14f1e:	7812      	ldrb	r2, [r2, #0]
   14f20:	0952      	lsrs	r2, r2, #5
   14f22:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   14f24:	4b0d      	ldr	r3, [pc, #52]	; (14f5c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   14f26:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   14f28:	230f      	movs	r3, #15
   14f2a:	18fb      	adds	r3, r7, r3
   14f2c:	781b      	ldrb	r3, [r3, #0]
   14f2e:	2b00      	cmp	r3, #0
   14f30:	d10f      	bne.n	14f52 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   14f32:	230f      	movs	r3, #15
   14f34:	18fb      	adds	r3, r7, r3
   14f36:	781b      	ldrb	r3, [r3, #0]
   14f38:	009b      	lsls	r3, r3, #2
   14f3a:	2210      	movs	r2, #16
   14f3c:	4694      	mov	ip, r2
   14f3e:	44bc      	add	ip, r7
   14f40:	4463      	add	r3, ip
   14f42:	3b08      	subs	r3, #8
   14f44:	681a      	ldr	r2, [r3, #0]
   14f46:	230e      	movs	r3, #14
   14f48:	18fb      	adds	r3, r7, r3
   14f4a:	781b      	ldrb	r3, [r3, #0]
   14f4c:	01db      	lsls	r3, r3, #7
   14f4e:	18d3      	adds	r3, r2, r3
   14f50:	e000      	b.n	14f54 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   14f52:	2300      	movs	r3, #0
	}
}
   14f54:	0018      	movs	r0, r3
   14f56:	46bd      	mov	sp, r7
   14f58:	b004      	add	sp, #16
   14f5a:	bd80      	pop	{r7, pc}
   14f5c:	41004400 	.word	0x41004400

00014f60 <system_reset>:
{
   14f60:	b580      	push	{r7, lr}
   14f62:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   14f64:	4b02      	ldr	r3, [pc, #8]	; (14f70 <system_reset+0x10>)
   14f66:	4798      	blx	r3
}
   14f68:	46c0      	nop			; (mov r8, r8)
   14f6a:	46bd      	mov	sp, r7
   14f6c:	bd80      	pop	{r7, pc}
   14f6e:	46c0      	nop			; (mov r8, r8)
   14f70:	00014ee5 	.word	0x00014ee5

00014f74 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   14f74:	b580      	push	{r7, lr}
   14f76:	b082      	sub	sp, #8
   14f78:	af00      	add	r7, sp, #0
   14f7a:	0002      	movs	r2, r0
   14f7c:	1dfb      	adds	r3, r7, #7
   14f7e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   14f80:	1dfb      	adds	r3, r7, #7
   14f82:	781b      	ldrb	r3, [r3, #0]
   14f84:	0018      	movs	r0, r3
   14f86:	4b03      	ldr	r3, [pc, #12]	; (14f94 <port_get_group_from_gpio_pin+0x20>)
   14f88:	4798      	blx	r3
   14f8a:	0003      	movs	r3, r0
}
   14f8c:	0018      	movs	r0, r3
   14f8e:	46bd      	mov	sp, r7
   14f90:	b002      	add	sp, #8
   14f92:	bd80      	pop	{r7, pc}
   14f94:	00014f01 	.word	0x00014f01

00014f98 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   14f98:	b580      	push	{r7, lr}
   14f9a:	b084      	sub	sp, #16
   14f9c:	af00      	add	r7, sp, #0
   14f9e:	0002      	movs	r2, r0
   14fa0:	1dfb      	adds	r3, r7, #7
   14fa2:	701a      	strb	r2, [r3, #0]
   14fa4:	1dbb      	adds	r3, r7, #6
   14fa6:	1c0a      	adds	r2, r1, #0
   14fa8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   14faa:	1dfb      	adds	r3, r7, #7
   14fac:	781b      	ldrb	r3, [r3, #0]
   14fae:	0018      	movs	r0, r3
   14fb0:	4b0d      	ldr	r3, [pc, #52]	; (14fe8 <port_pin_set_output_level+0x50>)
   14fb2:	4798      	blx	r3
   14fb4:	0003      	movs	r3, r0
   14fb6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   14fb8:	1dfb      	adds	r3, r7, #7
   14fba:	781b      	ldrb	r3, [r3, #0]
   14fbc:	221f      	movs	r2, #31
   14fbe:	4013      	ands	r3, r2
   14fc0:	2201      	movs	r2, #1
   14fc2:	409a      	lsls	r2, r3
   14fc4:	0013      	movs	r3, r2
   14fc6:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   14fc8:	1dbb      	adds	r3, r7, #6
   14fca:	781b      	ldrb	r3, [r3, #0]
   14fcc:	2b00      	cmp	r3, #0
   14fce:	d003      	beq.n	14fd8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   14fd0:	68fb      	ldr	r3, [r7, #12]
   14fd2:	68ba      	ldr	r2, [r7, #8]
   14fd4:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   14fd6:	e002      	b.n	14fde <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   14fd8:	68fb      	ldr	r3, [r7, #12]
   14fda:	68ba      	ldr	r2, [r7, #8]
   14fdc:	615a      	str	r2, [r3, #20]
}
   14fde:	46c0      	nop			; (mov r8, r8)
   14fe0:	46bd      	mov	sp, r7
   14fe2:	b004      	add	sp, #16
   14fe4:	bd80      	pop	{r7, pc}
   14fe6:	46c0      	nop			; (mov r8, r8)
   14fe8:	00014f75 	.word	0x00014f75

00014fec <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   14fec:	b580      	push	{r7, lr}
   14fee:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   14ff0:	4b02      	ldr	r3, [pc, #8]	; (14ffc <init_state+0x10>)
   14ff2:	2200      	movs	r2, #0
   14ff4:	701a      	strb	r2, [r3, #0]
}
   14ff6:	46c0      	nop			; (mov r8, r8)
   14ff8:	46bd      	mov	sp, r7
   14ffa:	bd80      	pop	{r7, pc}
   14ffc:	20000605 	.word	0x20000605

00015000 <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   15000:	b580      	push	{r7, lr}
   15002:	b082      	sub	sp, #8
   15004:	af00      	add	r7, sp, #0
   15006:	0002      	movs	r2, r0
   15008:	1dfb      	adds	r3, r7, #7
   1500a:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   1500c:	1dfb      	adds	r3, r7, #7
   1500e:	781b      	ldrb	r3, [r3, #0]
   15010:	b25b      	sxtb	r3, r3
   15012:	43db      	mvns	r3, r3
   15014:	b25b      	sxtb	r3, r3
   15016:	4a06      	ldr	r2, [pc, #24]	; (15030 <clear_state+0x30>)
   15018:	7812      	ldrb	r2, [r2, #0]
   1501a:	b252      	sxtb	r2, r2
   1501c:	4013      	ands	r3, r2
   1501e:	b25b      	sxtb	r3, r3
   15020:	b2da      	uxtb	r2, r3
   15022:	4b03      	ldr	r3, [pc, #12]	; (15030 <clear_state+0x30>)
   15024:	701a      	strb	r2, [r3, #0]
}
   15026:	46c0      	nop			; (mov r8, r8)
   15028:	46bd      	mov	sp, r7
   1502a:	b002      	add	sp, #8
   1502c:	bd80      	pop	{r7, pc}
   1502e:	46c0      	nop			; (mov r8, r8)
   15030:	20000605 	.word	0x20000605

00015034 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   15034:	b580      	push	{r7, lr}
   15036:	b082      	sub	sp, #8
   15038:	af00      	add	r7, sp, #0
   1503a:	0002      	movs	r2, r0
   1503c:	1dfb      	adds	r3, r7, #7
   1503e:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   15040:	4b05      	ldr	r3, [pc, #20]	; (15058 <add_state+0x24>)
   15042:	781a      	ldrb	r2, [r3, #0]
   15044:	1dfb      	adds	r3, r7, #7
   15046:	781b      	ldrb	r3, [r3, #0]
   15048:	4313      	orrs	r3, r2
   1504a:	b2da      	uxtb	r2, r3
   1504c:	4b02      	ldr	r3, [pc, #8]	; (15058 <add_state+0x24>)
   1504e:	701a      	strb	r2, [r3, #0]
}
   15050:	46c0      	nop			; (mov r8, r8)
   15052:	46bd      	mov	sp, r7
   15054:	b002      	add	sp, #8
   15056:	bd80      	pop	{r7, pc}
   15058:	20000605 	.word	0x20000605

0001505c <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   1505c:	b580      	push	{r7, lr}
   1505e:	b082      	sub	sp, #8
   15060:	af00      	add	r7, sp, #0
   15062:	0002      	movs	r2, r0
   15064:	1dfb      	adds	r3, r7, #7
   15066:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   15068:	4b06      	ldr	r3, [pc, #24]	; (15084 <is_state_set+0x28>)
   1506a:	781b      	ldrb	r3, [r3, #0]
   1506c:	1dfa      	adds	r2, r7, #7
   1506e:	7812      	ldrb	r2, [r2, #0]
   15070:	4013      	ands	r3, r2
   15072:	b2db      	uxtb	r3, r3
   15074:	1e5a      	subs	r2, r3, #1
   15076:	4193      	sbcs	r3, r2
   15078:	b2db      	uxtb	r3, r3
}
   1507a:	0018      	movs	r0, r3
   1507c:	46bd      	mov	sp, r7
   1507e:	b002      	add	sp, #8
   15080:	bd80      	pop	{r7, pc}
   15082:	46c0      	nop			; (mov r8, r8)
   15084:	20000605 	.word	0x20000605

00015088 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   15088:	b590      	push	{r4, r7, lr}
   1508a:	b085      	sub	sp, #20
   1508c:	af00      	add	r7, sp, #0
   1508e:	6078      	str	r0, [r7, #4]
   15090:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   15092:	687b      	ldr	r3, [r7, #4]
   15094:	2b00      	cmp	r3, #0
   15096:	d002      	beq.n	1509e <is_exist_file+0x16>
   15098:	683b      	ldr	r3, [r7, #0]
   1509a:	2b00      	cmp	r3, #0
   1509c:	d101      	bne.n	150a2 <is_exist_file+0x1a>
        return false;
   1509e:	2300      	movs	r3, #0
   150a0:	e013      	b.n	150ca <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   150a2:	230f      	movs	r3, #15
   150a4:	18fc      	adds	r4, r7, r3
   150a6:	6839      	ldr	r1, [r7, #0]
   150a8:	4b0a      	ldr	r3, [pc, #40]	; (150d4 <is_exist_file+0x4c>)
   150aa:	2200      	movs	r2, #0
   150ac:	0018      	movs	r0, r3
   150ae:	4b0a      	ldr	r3, [pc, #40]	; (150d8 <is_exist_file+0x50>)
   150b0:	4798      	blx	r3
   150b2:	0003      	movs	r3, r0
   150b4:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   150b6:	4b07      	ldr	r3, [pc, #28]	; (150d4 <is_exist_file+0x4c>)
   150b8:	0018      	movs	r0, r3
   150ba:	4b08      	ldr	r3, [pc, #32]	; (150dc <is_exist_file+0x54>)
   150bc:	4798      	blx	r3
    return (ret == FR_OK);
   150be:	230f      	movs	r3, #15
   150c0:	18fb      	adds	r3, r7, r3
   150c2:	781b      	ldrb	r3, [r3, #0]
   150c4:	425a      	negs	r2, r3
   150c6:	4153      	adcs	r3, r2
   150c8:	b2db      	uxtb	r3, r3
}
   150ca:	0018      	movs	r0, r3
   150cc:	46bd      	mov	sp, r7
   150ce:	b005      	add	sp, #20
   150d0:	bd90      	pop	{r4, r7, pc}
   150d2:	46c0      	nop			; (mov r8, r8)
   150d4:	20000838 	.word	0x20000838
   150d8:	0002cacd 	.word	0x0002cacd
   150dc:	0002d4cd 	.word	0x0002d4cd

000150e0 <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   150e0:	b580      	push	{r7, lr}
   150e2:	b09e      	sub	sp, #120	; 0x78
   150e4:	af00      	add	r7, sp, #0
   150e6:	60f8      	str	r0, [r7, #12]
   150e8:	60b9      	str	r1, [r7, #8]
   150ea:	1dfb      	adds	r3, r7, #7
   150ec:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   150ee:	2376      	movs	r3, #118	; 0x76
   150f0:	18fb      	adds	r3, r7, r3
   150f2:	2201      	movs	r2, #1
   150f4:	801a      	strh	r2, [r3, #0]
   150f6:	2374      	movs	r3, #116	; 0x74
   150f8:	18fb      	adds	r3, r7, r3
   150fa:	2200      	movs	r2, #0
   150fc:	801a      	strh	r2, [r3, #0]
   150fe:	236e      	movs	r3, #110	; 0x6e
   15100:	18fb      	adds	r3, r7, r3
   15102:	2200      	movs	r2, #0
   15104:	801a      	strh	r2, [r3, #0]
   15106:	2372      	movs	r3, #114	; 0x72
   15108:	18fb      	adds	r3, r7, r3
   1510a:	2200      	movs	r2, #0
   1510c:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   1510e:	2324      	movs	r3, #36	; 0x24
   15110:	18fb      	adds	r3, r7, r3
   15112:	0018      	movs	r0, r3
   15114:	2341      	movs	r3, #65	; 0x41
   15116:	001a      	movs	r2, r3
   15118:	2100      	movs	r1, #0
   1511a:	4b92      	ldr	r3, [pc, #584]	; (15364 <rename_to_unique+0x284>)
   1511c:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   1511e:	2318      	movs	r3, #24
   15120:	18fb      	adds	r3, r7, r3
   15122:	0018      	movs	r0, r3
   15124:	2309      	movs	r3, #9
   15126:	001a      	movs	r2, r3
   15128:	2100      	movs	r1, #0
   1512a:	4b8e      	ldr	r3, [pc, #568]	; (15364 <rename_to_unique+0x284>)
   1512c:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   1512e:	2314      	movs	r3, #20
   15130:	18fb      	adds	r3, r7, r3
   15132:	2200      	movs	r2, #0
   15134:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   15136:	2300      	movs	r3, #0
   15138:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   1513a:	2371      	movs	r3, #113	; 0x71
   1513c:	18fb      	adds	r3, r7, r3
   1513e:	2200      	movs	r2, #0
   15140:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   15142:	68bb      	ldr	r3, [r7, #8]
   15144:	2b00      	cmp	r3, #0
   15146:	d101      	bne.n	1514c <rename_to_unique+0x6c>
        return false;
   15148:	2300      	movs	r3, #0
   1514a:	e106      	b.n	1535a <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   1514c:	68ba      	ldr	r2, [r7, #8]
   1514e:	68fb      	ldr	r3, [r7, #12]
   15150:	0011      	movs	r1, r2
   15152:	0018      	movs	r0, r3
   15154:	4b84      	ldr	r3, [pc, #528]	; (15368 <rename_to_unique+0x288>)
   15156:	4798      	blx	r3
   15158:	0003      	movs	r3, r0
   1515a:	001a      	movs	r2, r3
   1515c:	2301      	movs	r3, #1
   1515e:	4053      	eors	r3, r2
   15160:	b2db      	uxtb	r3, r3
   15162:	2b00      	cmp	r3, #0
   15164:	d001      	beq.n	1516a <rename_to_unique+0x8a>
        return true;
   15166:	2301      	movs	r3, #1
   15168:	e0f7      	b.n	1535a <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   1516a:	68bb      	ldr	r3, [r7, #8]
   1516c:	0018      	movs	r0, r3
   1516e:	4b7f      	ldr	r3, [pc, #508]	; (1536c <rename_to_unique+0x28c>)
   15170:	4798      	blx	r3
   15172:	0003      	movs	r3, r0
   15174:	2b40      	cmp	r3, #64	; 0x40
   15176:	d901      	bls.n	1517c <rename_to_unique+0x9c>
        return false;
   15178:	2300      	movs	r3, #0
   1517a:	e0ee      	b.n	1535a <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   1517c:	68bb      	ldr	r3, [r7, #8]
   1517e:	212e      	movs	r1, #46	; 0x2e
   15180:	0018      	movs	r0, r3
   15182:	4b7b      	ldr	r3, [pc, #492]	; (15370 <rename_to_unique+0x290>)
   15184:	4798      	blx	r3
   15186:	0003      	movs	r3, r0
   15188:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   1518a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1518c:	2b00      	cmp	r3, #0
   1518e:	d052      	beq.n	15236 <rename_to_unique+0x156>
        ext_len = strlen(p);
   15190:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   15192:	0018      	movs	r0, r3
   15194:	4b75      	ldr	r3, [pc, #468]	; (1536c <rename_to_unique+0x28c>)
   15196:	4798      	blx	r3
   15198:	0002      	movs	r2, r0
   1519a:	236e      	movs	r3, #110	; 0x6e
   1519c:	18fb      	adds	r3, r7, r3
   1519e:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   151a0:	236e      	movs	r3, #110	; 0x6e
   151a2:	18fb      	adds	r3, r7, r3
   151a4:	881b      	ldrh	r3, [r3, #0]
   151a6:	2b07      	cmp	r3, #7
   151a8:	d837      	bhi.n	1521a <rename_to_unique+0x13a>
            valid_ext = true;
   151aa:	2371      	movs	r3, #113	; 0x71
   151ac:	18fb      	adds	r3, r7, r3
   151ae:	2201      	movs	r2, #1
   151b0:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   151b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
   151b4:	2318      	movs	r3, #24
   151b6:	18fb      	adds	r3, r7, r3
   151b8:	0011      	movs	r1, r2
   151ba:	0018      	movs	r0, r3
   151bc:	4b6d      	ldr	r3, [pc, #436]	; (15374 <rename_to_unique+0x294>)
   151be:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   151c0:	68bb      	ldr	r3, [r7, #8]
   151c2:	0018      	movs	r0, r3
   151c4:	4b69      	ldr	r3, [pc, #420]	; (1536c <rename_to_unique+0x28c>)
   151c6:	4798      	blx	r3
   151c8:	0002      	movs	r2, r0
   151ca:	236e      	movs	r3, #110	; 0x6e
   151cc:	18fb      	adds	r3, r7, r3
   151ce:	881b      	ldrh	r3, [r3, #0]
   151d0:	1ad3      	subs	r3, r2, r3
   151d2:	2b3c      	cmp	r3, #60	; 0x3c
   151d4:	d911      	bls.n	151fa <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   151d6:	2374      	movs	r3, #116	; 0x74
   151d8:	18fb      	adds	r3, r7, r3
   151da:	226e      	movs	r2, #110	; 0x6e
   151dc:	18ba      	adds	r2, r7, r2
   151de:	8812      	ldrh	r2, [r2, #0]
   151e0:	213c      	movs	r1, #60	; 0x3c
   151e2:	1a8a      	subs	r2, r1, r2
   151e4:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   151e6:	2374      	movs	r3, #116	; 0x74
   151e8:	18fb      	adds	r3, r7, r3
   151ea:	881a      	ldrh	r2, [r3, #0]
   151ec:	68b9      	ldr	r1, [r7, #8]
   151ee:	2324      	movs	r3, #36	; 0x24
   151f0:	18fb      	adds	r3, r7, r3
   151f2:	0018      	movs	r0, r3
   151f4:	4b60      	ldr	r3, [pc, #384]	; (15378 <rename_to_unique+0x298>)
   151f6:	4798      	blx	r3
   151f8:	e02a      	b.n	15250 <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   151fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
   151fc:	68bb      	ldr	r3, [r7, #8]
   151fe:	1ad2      	subs	r2, r2, r3
   15200:	2374      	movs	r3, #116	; 0x74
   15202:	18fb      	adds	r3, r7, r3
   15204:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   15206:	2374      	movs	r3, #116	; 0x74
   15208:	18fb      	adds	r3, r7, r3
   1520a:	881a      	ldrh	r2, [r3, #0]
   1520c:	68b9      	ldr	r1, [r7, #8]
   1520e:	2324      	movs	r3, #36	; 0x24
   15210:	18fb      	adds	r3, r7, r3
   15212:	0018      	movs	r0, r3
   15214:	4b58      	ldr	r3, [pc, #352]	; (15378 <rename_to_unique+0x298>)
   15216:	4798      	blx	r3
   15218:	e01a      	b.n	15250 <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   1521a:	2374      	movs	r3, #116	; 0x74
   1521c:	18fb      	adds	r3, r7, r3
   1521e:	223c      	movs	r2, #60	; 0x3c
   15220:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   15222:	2374      	movs	r3, #116	; 0x74
   15224:	18fb      	adds	r3, r7, r3
   15226:	881a      	ldrh	r2, [r3, #0]
   15228:	68b9      	ldr	r1, [r7, #8]
   1522a:	2324      	movs	r3, #36	; 0x24
   1522c:	18fb      	adds	r3, r7, r3
   1522e:	0018      	movs	r0, r3
   15230:	4b51      	ldr	r3, [pc, #324]	; (15378 <rename_to_unique+0x298>)
   15232:	4798      	blx	r3
   15234:	e00c      	b.n	15250 <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   15236:	2374      	movs	r3, #116	; 0x74
   15238:	18fb      	adds	r3, r7, r3
   1523a:	223c      	movs	r2, #60	; 0x3c
   1523c:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   1523e:	2374      	movs	r3, #116	; 0x74
   15240:	18fb      	adds	r3, r7, r3
   15242:	881a      	ldrh	r2, [r3, #0]
   15244:	68b9      	ldr	r1, [r7, #8]
   15246:	2324      	movs	r3, #36	; 0x24
   15248:	18fb      	adds	r3, r7, r3
   1524a:	0018      	movs	r0, r3
   1524c:	4b4a      	ldr	r3, [pc, #296]	; (15378 <rename_to_unique+0x298>)
   1524e:	4798      	blx	r3
    }

    name[name_len++] = '-';
   15250:	2374      	movs	r3, #116	; 0x74
   15252:	18fb      	adds	r3, r7, r3
   15254:	881b      	ldrh	r3, [r3, #0]
   15256:	2274      	movs	r2, #116	; 0x74
   15258:	18ba      	adds	r2, r7, r2
   1525a:	1c59      	adds	r1, r3, #1
   1525c:	8011      	strh	r1, [r2, #0]
   1525e:	001a      	movs	r2, r3
   15260:	2324      	movs	r3, #36	; 0x24
   15262:	18fb      	adds	r3, r7, r3
   15264:	212d      	movs	r1, #45	; 0x2d
   15266:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   15268:	2376      	movs	r3, #118	; 0x76
   1526a:	18fb      	adds	r3, r7, r3
   1526c:	2200      	movs	r2, #0
   1526e:	801a      	strh	r2, [r3, #0]
   15270:	2372      	movs	r3, #114	; 0x72
   15272:	18fb      	adds	r3, r7, r3
   15274:	2201      	movs	r2, #1
   15276:	801a      	strh	r2, [r3, #0]
   15278:	e010      	b.n	1529c <rename_to_unique+0x1bc>
        count *= 10;
   1527a:	2372      	movs	r3, #114	; 0x72
   1527c:	18fa      	adds	r2, r7, r3
   1527e:	2372      	movs	r3, #114	; 0x72
   15280:	18fb      	adds	r3, r7, r3
   15282:	881b      	ldrh	r3, [r3, #0]
   15284:	1c19      	adds	r1, r3, #0
   15286:	0089      	lsls	r1, r1, #2
   15288:	18cb      	adds	r3, r1, r3
   1528a:	18db      	adds	r3, r3, r3
   1528c:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   1528e:	2376      	movs	r3, #118	; 0x76
   15290:	18fb      	adds	r3, r7, r3
   15292:	881a      	ldrh	r2, [r3, #0]
   15294:	2376      	movs	r3, #118	; 0x76
   15296:	18fb      	adds	r3, r7, r3
   15298:	3201      	adds	r2, #1
   1529a:	801a      	strh	r2, [r3, #0]
   1529c:	2376      	movs	r3, #118	; 0x76
   1529e:	18fb      	adds	r3, r7, r3
   152a0:	881b      	ldrh	r3, [r3, #0]
   152a2:	2b02      	cmp	r3, #2
   152a4:	d9e9      	bls.n	1527a <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   152a6:	2376      	movs	r3, #118	; 0x76
   152a8:	18fb      	adds	r3, r7, r3
   152aa:	2201      	movs	r2, #1
   152ac:	801a      	strh	r2, [r3, #0]
   152ae:	e04b      	b.n	15348 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   152b0:	2376      	movs	r3, #118	; 0x76
   152b2:	18fb      	adds	r3, r7, r3
   152b4:	881a      	ldrh	r2, [r3, #0]
   152b6:	4931      	ldr	r1, [pc, #196]	; (1537c <rename_to_unique+0x29c>)
   152b8:	2314      	movs	r3, #20
   152ba:	18fb      	adds	r3, r7, r3
   152bc:	0018      	movs	r0, r3
   152be:	4b30      	ldr	r3, [pc, #192]	; (15380 <rename_to_unique+0x2a0>)
   152c0:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   152c2:	2374      	movs	r3, #116	; 0x74
   152c4:	18fb      	adds	r3, r7, r3
   152c6:	881b      	ldrh	r3, [r3, #0]
   152c8:	2224      	movs	r2, #36	; 0x24
   152ca:	18ba      	adds	r2, r7, r2
   152cc:	18d3      	adds	r3, r2, r3
   152ce:	2214      	movs	r2, #20
   152d0:	18b9      	adds	r1, r7, r2
   152d2:	2203      	movs	r2, #3
   152d4:	0018      	movs	r0, r3
   152d6:	4b28      	ldr	r3, [pc, #160]	; (15378 <rename_to_unique+0x298>)
   152d8:	4798      	blx	r3
        if (valid_ext) {
   152da:	2371      	movs	r3, #113	; 0x71
   152dc:	18fb      	adds	r3, r7, r3
   152de:	781b      	ldrb	r3, [r3, #0]
   152e0:	2b00      	cmp	r3, #0
   152e2:	d00c      	beq.n	152fe <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   152e4:	2374      	movs	r3, #116	; 0x74
   152e6:	18fb      	adds	r3, r7, r3
   152e8:	881b      	ldrh	r3, [r3, #0]
   152ea:	3303      	adds	r3, #3
   152ec:	2224      	movs	r2, #36	; 0x24
   152ee:	18ba      	adds	r2, r7, r2
   152f0:	18d3      	adds	r3, r2, r3
   152f2:	2218      	movs	r2, #24
   152f4:	18ba      	adds	r2, r7, r2
   152f6:	0011      	movs	r1, r2
   152f8:	0018      	movs	r0, r3
   152fa:	4b1e      	ldr	r3, [pc, #120]	; (15374 <rename_to_unique+0x294>)
   152fc:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   152fe:	2324      	movs	r3, #36	; 0x24
   15300:	18fa      	adds	r2, r7, r3
   15302:	68fb      	ldr	r3, [r7, #12]
   15304:	0011      	movs	r1, r2
   15306:	0018      	movs	r0, r3
   15308:	4b17      	ldr	r3, [pc, #92]	; (15368 <rename_to_unique+0x288>)
   1530a:	4798      	blx	r3
   1530c:	0003      	movs	r3, r0
   1530e:	001a      	movs	r2, r3
   15310:	2301      	movs	r3, #1
   15312:	4053      	eors	r3, r2
   15314:	b2db      	uxtb	r3, r3
   15316:	2b00      	cmp	r3, #0
   15318:	d00f      	beq.n	1533a <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   1531a:	1dfb      	adds	r3, r7, #7
   1531c:	781a      	ldrb	r2, [r3, #0]
   1531e:	68bb      	ldr	r3, [r7, #8]
   15320:	2100      	movs	r1, #0
   15322:	0018      	movs	r0, r3
   15324:	4b0f      	ldr	r3, [pc, #60]	; (15364 <rename_to_unique+0x284>)
   15326:	4798      	blx	r3
            strcpy(file_path_name, name);
   15328:	2324      	movs	r3, #36	; 0x24
   1532a:	18fa      	adds	r2, r7, r3
   1532c:	68bb      	ldr	r3, [r7, #8]
   1532e:	0011      	movs	r1, r2
   15330:	0018      	movs	r0, r3
   15332:	4b10      	ldr	r3, [pc, #64]	; (15374 <rename_to_unique+0x294>)
   15334:	4798      	blx	r3
            return true;
   15336:	2301      	movs	r3, #1
   15338:	e00f      	b.n	1535a <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   1533a:	2376      	movs	r3, #118	; 0x76
   1533c:	18fb      	adds	r3, r7, r3
   1533e:	881a      	ldrh	r2, [r3, #0]
   15340:	2376      	movs	r3, #118	; 0x76
   15342:	18fb      	adds	r3, r7, r3
   15344:	3201      	adds	r2, #1
   15346:	801a      	strh	r2, [r3, #0]
   15348:	2376      	movs	r3, #118	; 0x76
   1534a:	18fa      	adds	r2, r7, r3
   1534c:	2372      	movs	r3, #114	; 0x72
   1534e:	18fb      	adds	r3, r7, r3
   15350:	8812      	ldrh	r2, [r2, #0]
   15352:	881b      	ldrh	r3, [r3, #0]
   15354:	429a      	cmp	r2, r3
   15356:	d3ab      	bcc.n	152b0 <rename_to_unique+0x1d0>
        }
    }
    return false;
   15358:	2300      	movs	r3, #0
}
   1535a:	0018      	movs	r0, r3
   1535c:	46bd      	mov	sp, r7
   1535e:	b01e      	add	sp, #120	; 0x78
   15360:	bd80      	pop	{r7, pc}
   15362:	46c0      	nop			; (mov r8, r8)
   15364:	0003457f 	.word	0x0003457f
   15368:	00015089 	.word	0x00015089
   1536c:	0003491b 	.word	0x0003491b
   15370:	00034975 	.word	0x00034975
   15374:	000348d1 	.word	0x000348d1
   15378:	0003494b 	.word	0x0003494b
   1537c:	00035eb8 	.word	0x00035eb8
   15380:	0003483d 	.word	0x0003483d

00015384 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   15384:	b590      	push	{r4, r7, lr}
   15386:	b083      	sub	sp, #12
   15388:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   1538a:	2001      	movs	r0, #1
   1538c:	4b22      	ldr	r3, [pc, #136]	; (15418 <start_download+0x94>)
   1538e:	4798      	blx	r3
   15390:	0003      	movs	r3, r0
   15392:	001a      	movs	r2, r3
   15394:	2301      	movs	r3, #1
   15396:	4053      	eors	r3, r2
   15398:	b2db      	uxtb	r3, r3
   1539a:	2b00      	cmp	r3, #0
   1539c:	d005      	beq.n	153aa <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   1539e:	4b1f      	ldr	r3, [pc, #124]	; (1541c <start_download+0x98>)
   153a0:	0019      	movs	r1, r3
   153a2:	2001      	movs	r0, #1
   153a4:	4b1e      	ldr	r3, [pc, #120]	; (15420 <start_download+0x9c>)
   153a6:	4798      	blx	r3
        return;
   153a8:	e032      	b.n	15410 <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   153aa:	2002      	movs	r0, #2
   153ac:	4b1a      	ldr	r3, [pc, #104]	; (15418 <start_download+0x94>)
   153ae:	4798      	blx	r3
   153b0:	0003      	movs	r3, r0
   153b2:	001a      	movs	r2, r3
   153b4:	2301      	movs	r3, #1
   153b6:	4053      	eors	r3, r2
   153b8:	b2db      	uxtb	r3, r3
   153ba:	2b00      	cmp	r3, #0
   153bc:	d005      	beq.n	153ca <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   153be:	4b19      	ldr	r3, [pc, #100]	; (15424 <start_download+0xa0>)
   153c0:	0019      	movs	r1, r3
   153c2:	2001      	movs	r0, #1
   153c4:	4b16      	ldr	r3, [pc, #88]	; (15420 <start_download+0x9c>)
   153c6:	4798      	blx	r3
        return;
   153c8:	e022      	b.n	15410 <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   153ca:	2004      	movs	r0, #4
   153cc:	4b12      	ldr	r3, [pc, #72]	; (15418 <start_download+0x94>)
   153ce:	4798      	blx	r3
   153d0:	1e03      	subs	r3, r0, #0
   153d2:	d005      	beq.n	153e0 <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   153d4:	4b14      	ldr	r3, [pc, #80]	; (15428 <start_download+0xa4>)
   153d6:	0019      	movs	r1, r3
   153d8:	2001      	movs	r0, #1
   153da:	4b11      	ldr	r3, [pc, #68]	; (15420 <start_download+0x9c>)
   153dc:	4798      	blx	r3
        return;
   153de:	e017      	b.n	15410 <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   153e0:	2008      	movs	r0, #8
   153e2:	4b0d      	ldr	r3, [pc, #52]	; (15418 <start_download+0x94>)
   153e4:	4798      	blx	r3
   153e6:	1e03      	subs	r3, r0, #0
   153e8:	d005      	beq.n	153f6 <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   153ea:	4b10      	ldr	r3, [pc, #64]	; (1542c <start_download+0xa8>)
   153ec:	0019      	movs	r1, r3
   153ee:	2001      	movs	r0, #1
   153f0:	4b0b      	ldr	r3, [pc, #44]	; (15420 <start_download+0x9c>)
   153f2:	4798      	blx	r3
        return;
   153f4:	e00c      	b.n	15410 <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   153f6:	4b0e      	ldr	r3, [pc, #56]	; (15430 <start_download+0xac>)
   153f8:	0019      	movs	r1, r3
   153fa:	2001      	movs	r0, #1
   153fc:	4b08      	ldr	r3, [pc, #32]	; (15420 <start_download+0x9c>)
   153fe:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   15400:	490c      	ldr	r1, [pc, #48]	; (15434 <start_download+0xb0>)
   15402:	480d      	ldr	r0, [pc, #52]	; (15438 <start_download+0xb4>)
   15404:	2300      	movs	r3, #0
   15406:	9300      	str	r3, [sp, #0]
   15408:	2300      	movs	r3, #0
   1540a:	2201      	movs	r2, #1
   1540c:	4c0b      	ldr	r4, [pc, #44]	; (1543c <start_download+0xb8>)
   1540e:	47a0      	blx	r4
}
   15410:	46bd      	mov	sp, r7
   15412:	b001      	add	sp, #4
   15414:	bd90      	pop	{r4, r7, pc}
   15416:	46c0      	nop			; (mov r8, r8)
   15418:	0001505d 	.word	0x0001505d
   1541c:	00035ec0 	.word	0x00035ec0
   15420:	0001ce91 	.word	0x0001ce91
   15424:	00035eec 	.word	0x00035eec
   15428:	00035f18 	.word	0x00035f18
   1542c:	00035f44 	.word	0x00035f44
   15430:	00035f70 	.word	0x00035f70
   15434:	00035f9c 	.word	0x00035f9c
   15438:	200048cc 	.word	0x200048cc
   1543c:	00030121 	.word	0x00030121

00015440 <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   15440:	b5b0      	push	{r4, r5, r7, lr}
   15442:	b086      	sub	sp, #24
   15444:	af00      	add	r7, sp, #0
   15446:	6078      	str	r0, [r7, #4]
   15448:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   1544a:	687b      	ldr	r3, [r7, #4]
   1544c:	2b00      	cmp	r3, #0
   1544e:	d002      	beq.n	15456 <store_file_packet+0x16>
   15450:	683b      	ldr	r3, [r7, #0]
   15452:	2b00      	cmp	r3, #0
   15454:	d105      	bne.n	15462 <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   15456:	4b58      	ldr	r3, [pc, #352]	; (155b8 <store_file_packet+0x178>)
   15458:	0019      	movs	r1, r3
   1545a:	2001      	movs	r0, #1
   1545c:	4b57      	ldr	r3, [pc, #348]	; (155bc <store_file_packet+0x17c>)
   1545e:	4798      	blx	r3
        return;
   15460:	e0a6      	b.n	155b0 <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   15462:	2008      	movs	r0, #8
   15464:	4b56      	ldr	r3, [pc, #344]	; (155c0 <store_file_packet+0x180>)
   15466:	4798      	blx	r3
   15468:	0003      	movs	r3, r0
   1546a:	001a      	movs	r2, r3
   1546c:	2301      	movs	r3, #1
   1546e:	4053      	eors	r3, r2
   15470:	b2db      	uxtb	r3, r3
   15472:	2b00      	cmp	r3, #0
   15474:	d055      	beq.n	15522 <store_file_packet+0xe2>
        char *cp = NULL;
   15476:	2300      	movs	r3, #0
   15478:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   1547a:	4b52      	ldr	r3, [pc, #328]	; (155c4 <store_file_packet+0x184>)
   1547c:	2230      	movs	r2, #48	; 0x30
   1547e:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   15480:	4b50      	ldr	r3, [pc, #320]	; (155c4 <store_file_packet+0x184>)
   15482:	223a      	movs	r2, #58	; 0x3a
   15484:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   15486:	4b50      	ldr	r3, [pc, #320]	; (155c8 <store_file_packet+0x188>)
   15488:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   1548a:	e002      	b.n	15492 <store_file_packet+0x52>
            cp--;
   1548c:	697b      	ldr	r3, [r7, #20]
   1548e:	3b01      	subs	r3, #1
   15490:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   15492:	697b      	ldr	r3, [r7, #20]
   15494:	781b      	ldrb	r3, [r3, #0]
   15496:	2b2f      	cmp	r3, #47	; 0x2f
   15498:	d1f8      	bne.n	1548c <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   1549a:	697b      	ldr	r3, [r7, #20]
   1549c:	0018      	movs	r0, r3
   1549e:	4b4b      	ldr	r3, [pc, #300]	; (155cc <store_file_packet+0x18c>)
   154a0:	4798      	blx	r3
   154a2:	0003      	movs	r3, r0
   154a4:	2b01      	cmp	r3, #1
   154a6:	d924      	bls.n	154f2 <store_file_packet+0xb2>
            cp++;
   154a8:	697b      	ldr	r3, [r7, #20]
   154aa:	3301      	adds	r3, #1
   154ac:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   154ae:	697a      	ldr	r2, [r7, #20]
   154b0:	4b47      	ldr	r3, [pc, #284]	; (155d0 <store_file_packet+0x190>)
   154b2:	0011      	movs	r1, r2
   154b4:	0018      	movs	r0, r3
   154b6:	4b47      	ldr	r3, [pc, #284]	; (155d4 <store_file_packet+0x194>)
   154b8:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   154ba:	4942      	ldr	r1, [pc, #264]	; (155c4 <store_file_packet+0x184>)
   154bc:	4b46      	ldr	r3, [pc, #280]	; (155d8 <store_file_packet+0x198>)
   154be:	2240      	movs	r2, #64	; 0x40
   154c0:	0018      	movs	r0, r3
   154c2:	4b46      	ldr	r3, [pc, #280]	; (155dc <store_file_packet+0x19c>)
   154c4:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   154c6:	4a3f      	ldr	r2, [pc, #252]	; (155c4 <store_file_packet+0x184>)
   154c8:	4b45      	ldr	r3, [pc, #276]	; (155e0 <store_file_packet+0x1a0>)
   154ca:	0019      	movs	r1, r3
   154cc:	2001      	movs	r0, #1
   154ce:	4b3b      	ldr	r3, [pc, #236]	; (155bc <store_file_packet+0x17c>)
   154d0:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   154d2:	2313      	movs	r3, #19
   154d4:	18fc      	adds	r4, r7, r3
   154d6:	493b      	ldr	r1, [pc, #236]	; (155c4 <store_file_packet+0x184>)
   154d8:	4b3f      	ldr	r3, [pc, #252]	; (155d8 <store_file_packet+0x198>)
   154da:	220a      	movs	r2, #10
   154dc:	0018      	movs	r0, r3
   154de:	4b41      	ldr	r3, [pc, #260]	; (155e4 <store_file_packet+0x1a4>)
   154e0:	4798      	blx	r3
   154e2:	0003      	movs	r3, r0
   154e4:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   154e6:	2313      	movs	r3, #19
   154e8:	18fb      	adds	r3, r7, r3
   154ea:	781b      	ldrb	r3, [r3, #0]
   154ec:	2b00      	cmp	r3, #0
   154ee:	d012      	beq.n	15516 <store_file_packet+0xd6>
   154f0:	e008      	b.n	15504 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   154f2:	4b3d      	ldr	r3, [pc, #244]	; (155e8 <store_file_packet+0x1a8>)
   154f4:	0019      	movs	r1, r3
   154f6:	2001      	movs	r0, #1
   154f8:	4b30      	ldr	r3, [pc, #192]	; (155bc <store_file_packet+0x17c>)
   154fa:	4798      	blx	r3
            add_state(CANCELED);
   154fc:	2020      	movs	r0, #32
   154fe:	4b3b      	ldr	r3, [pc, #236]	; (155ec <store_file_packet+0x1ac>)
   15500:	4798      	blx	r3
            return;
   15502:	e055      	b.n	155b0 <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   15504:	2313      	movs	r3, #19
   15506:	18fb      	adds	r3, r7, r3
   15508:	781a      	ldrb	r2, [r3, #0]
   1550a:	4b39      	ldr	r3, [pc, #228]	; (155f0 <store_file_packet+0x1b0>)
   1550c:	0019      	movs	r1, r3
   1550e:	2001      	movs	r0, #1
   15510:	4b2a      	ldr	r3, [pc, #168]	; (155bc <store_file_packet+0x17c>)
   15512:	4798      	blx	r3
            return;
   15514:	e04c      	b.n	155b0 <store_file_packet+0x170>
        }

        received_file_size = 0;
   15516:	4b37      	ldr	r3, [pc, #220]	; (155f4 <store_file_packet+0x1b4>)
   15518:	2200      	movs	r2, #0
   1551a:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   1551c:	2008      	movs	r0, #8
   1551e:	4b33      	ldr	r3, [pc, #204]	; (155ec <store_file_packet+0x1ac>)
   15520:	4798      	blx	r3
    }

    if (data != NULL) {
   15522:	687b      	ldr	r3, [r7, #4]
   15524:	2b00      	cmp	r3, #0
   15526:	d043      	beq.n	155b0 <store_file_packet+0x170>
        UINT wsize = 0;
   15528:	2300      	movs	r3, #0
   1552a:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   1552c:	2313      	movs	r3, #19
   1552e:	18fc      	adds	r4, r7, r3
   15530:	230c      	movs	r3, #12
   15532:	18fb      	adds	r3, r7, r3
   15534:	683a      	ldr	r2, [r7, #0]
   15536:	6879      	ldr	r1, [r7, #4]
   15538:	4827      	ldr	r0, [pc, #156]	; (155d8 <store_file_packet+0x198>)
   1553a:	4d2f      	ldr	r5, [pc, #188]	; (155f8 <store_file_packet+0x1b8>)
   1553c:	47a8      	blx	r5
   1553e:	0003      	movs	r3, r0
   15540:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   15542:	2313      	movs	r3, #19
   15544:	18fb      	adds	r3, r7, r3
   15546:	781b      	ldrb	r3, [r3, #0]
   15548:	2b00      	cmp	r3, #0
   1554a:	d00c      	beq.n	15566 <store_file_packet+0x126>
            f_close(&file_object);
   1554c:	4b22      	ldr	r3, [pc, #136]	; (155d8 <store_file_packet+0x198>)
   1554e:	0018      	movs	r0, r3
   15550:	4b2a      	ldr	r3, [pc, #168]	; (155fc <store_file_packet+0x1bc>)
   15552:	4798      	blx	r3
            add_state(CANCELED);
   15554:	2020      	movs	r0, #32
   15556:	4b25      	ldr	r3, [pc, #148]	; (155ec <store_file_packet+0x1ac>)
   15558:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   1555a:	4b29      	ldr	r3, [pc, #164]	; (15600 <store_file_packet+0x1c0>)
   1555c:	0019      	movs	r1, r3
   1555e:	2001      	movs	r0, #1
   15560:	4b16      	ldr	r3, [pc, #88]	; (155bc <store_file_packet+0x17c>)
   15562:	4798      	blx	r3
            return;
   15564:	e024      	b.n	155b0 <store_file_packet+0x170>
        }

        received_file_size += wsize;
   15566:	4b23      	ldr	r3, [pc, #140]	; (155f4 <store_file_packet+0x1b4>)
   15568:	681a      	ldr	r2, [r3, #0]
   1556a:	68fb      	ldr	r3, [r7, #12]
   1556c:	18d2      	adds	r2, r2, r3
   1556e:	4b21      	ldr	r3, [pc, #132]	; (155f4 <store_file_packet+0x1b4>)
   15570:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   15572:	4b20      	ldr	r3, [pc, #128]	; (155f4 <store_file_packet+0x1b4>)
   15574:	681a      	ldr	r2, [r3, #0]
   15576:	4b23      	ldr	r3, [pc, #140]	; (15604 <store_file_packet+0x1c4>)
   15578:	681b      	ldr	r3, [r3, #0]
   1557a:	4923      	ldr	r1, [pc, #140]	; (15608 <store_file_packet+0x1c8>)
   1557c:	2001      	movs	r0, #1
   1557e:	4c0f      	ldr	r4, [pc, #60]	; (155bc <store_file_packet+0x17c>)
   15580:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   15582:	4b1c      	ldr	r3, [pc, #112]	; (155f4 <store_file_packet+0x1b4>)
   15584:	681a      	ldr	r2, [r3, #0]
   15586:	4b1f      	ldr	r3, [pc, #124]	; (15604 <store_file_packet+0x1c4>)
   15588:	681b      	ldr	r3, [r3, #0]
   1558a:	429a      	cmp	r2, r3
   1558c:	d310      	bcc.n	155b0 <store_file_packet+0x170>
            f_close(&file_object);
   1558e:	4b12      	ldr	r3, [pc, #72]	; (155d8 <store_file_packet+0x198>)
   15590:	0018      	movs	r0, r3
   15592:	4b1a      	ldr	r3, [pc, #104]	; (155fc <store_file_packet+0x1bc>)
   15594:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   15596:	4b1d      	ldr	r3, [pc, #116]	; (1560c <store_file_packet+0x1cc>)
   15598:	0019      	movs	r1, r3
   1559a:	2001      	movs	r0, #1
   1559c:	4b07      	ldr	r3, [pc, #28]	; (155bc <store_file_packet+0x17c>)
   1559e:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   155a0:	2100      	movs	r1, #0
   155a2:	2017      	movs	r0, #23
   155a4:	4b1a      	ldr	r3, [pc, #104]	; (15610 <store_file_packet+0x1d0>)
   155a6:	4798      	blx	r3
            add_state(COMPLETED);
   155a8:	2010      	movs	r0, #16
   155aa:	4b10      	ldr	r3, [pc, #64]	; (155ec <store_file_packet+0x1ac>)
   155ac:	4798      	blx	r3
            return;
   155ae:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   155b0:	46bd      	mov	sp, r7
   155b2:	b006      	add	sp, #24
   155b4:	bdb0      	pop	{r4, r5, r7, pc}
   155b6:	46c0      	nop			; (mov r8, r8)
   155b8:	00035fbc 	.word	0x00035fbc
   155bc:	0001ce91 	.word	0x0001ce91
   155c0:	0001505d 	.word	0x0001505d
   155c4:	200000a4 	.word	0x200000a4
   155c8:	00035fbb 	.word	0x00035fbb
   155cc:	0003491b 	.word	0x0003491b
   155d0:	200000a6 	.word	0x200000a6
   155d4:	000348d1 	.word	0x000348d1
   155d8:	20000838 	.word	0x20000838
   155dc:	000150e1 	.word	0x000150e1
   155e0:	00036020 	.word	0x00036020
   155e4:	0002cacd 	.word	0x0002cacd
   155e8:	00035fe0 	.word	0x00035fe0
   155ec:	00015035 	.word	0x00015035
   155f0:	00036048 	.word	0x00036048
   155f4:	20000860 	.word	0x20000860
   155f8:	0002cffd 	.word	0x0002cffd
   155fc:	0002d4cd 	.word	0x0002d4cd
   15600:	0003607c 	.word	0x0003607c
   15604:	2000085c 	.word	0x2000085c
   15608:	000360b8 	.word	0x000360b8
   1560c:	000360ec 	.word	0x000360ec
   15610:	00014f99 	.word	0x00014f99

00015614 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   15614:	b590      	push	{r4, r7, lr}
   15616:	b085      	sub	sp, #20
   15618:	af00      	add	r7, sp, #0
   1561a:	60f8      	str	r0, [r7, #12]
   1561c:	60b9      	str	r1, [r7, #8]
   1561e:	607a      	str	r2, [r7, #4]
    switch (type) {
   15620:	68bb      	ldr	r3, [r7, #8]
   15622:	2b04      	cmp	r3, #4
   15624:	d900      	bls.n	15628 <http_client_callback+0x14>
   15626:	e077      	b.n	15718 <http_client_callback+0x104>
   15628:	68bb      	ldr	r3, [r7, #8]
   1562a:	009a      	lsls	r2, r3, #2
   1562c:	4b3c      	ldr	r3, [pc, #240]	; (15720 <http_client_callback+0x10c>)
   1562e:	18d3      	adds	r3, r2, r3
   15630:	681b      	ldr	r3, [r3, #0]
   15632:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   15634:	4b3b      	ldr	r3, [pc, #236]	; (15724 <http_client_callback+0x110>)
   15636:	0019      	movs	r1, r3
   15638:	2001      	movs	r0, #1
   1563a:	4b3b      	ldr	r3, [pc, #236]	; (15728 <http_client_callback+0x114>)
   1563c:	4798      	blx	r3
            break;
   1563e:	e06b      	b.n	15718 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   15640:	4b3a      	ldr	r3, [pc, #232]	; (1572c <http_client_callback+0x118>)
   15642:	0019      	movs	r1, r3
   15644:	2001      	movs	r0, #1
   15646:	4b38      	ldr	r3, [pc, #224]	; (15728 <http_client_callback+0x114>)
   15648:	4798      	blx	r3
            add_state(GET_REQUESTED);
   1564a:	2004      	movs	r0, #4
   1564c:	4b38      	ldr	r3, [pc, #224]	; (15730 <http_client_callback+0x11c>)
   1564e:	4798      	blx	r3
            break;
   15650:	e062      	b.n	15718 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   15652:	687b      	ldr	r3, [r7, #4]
   15654:	881b      	ldrh	r3, [r3, #0]
   15656:	001a      	movs	r2, r3
   15658:	687b      	ldr	r3, [r7, #4]
   1565a:	685b      	ldr	r3, [r3, #4]
   1565c:	4935      	ldr	r1, [pc, #212]	; (15734 <http_client_callback+0x120>)
   1565e:	2001      	movs	r0, #1
   15660:	4c31      	ldr	r4, [pc, #196]	; (15728 <http_client_callback+0x114>)
   15662:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   15664:	687b      	ldr	r3, [r7, #4]
   15666:	881b      	ldrh	r3, [r3, #0]
   15668:	2bc8      	cmp	r3, #200	; 0xc8
   1566a:	d10d      	bne.n	15688 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   1566c:	687b      	ldr	r3, [r7, #4]
   1566e:	685a      	ldr	r2, [r3, #4]
   15670:	4b31      	ldr	r3, [pc, #196]	; (15738 <http_client_callback+0x124>)
   15672:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   15674:	4b31      	ldr	r3, [pc, #196]	; (1573c <http_client_callback+0x128>)
   15676:	2200      	movs	r2, #0
   15678:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   1567a:	687b      	ldr	r3, [r7, #4]
   1567c:	685a      	ldr	r2, [r3, #4]
   1567e:	2380      	movs	r3, #128	; 0x80
   15680:	009b      	lsls	r3, r3, #2
   15682:	429a      	cmp	r2, r3
   15684:	d843      	bhi.n	1570e <http_client_callback+0xfa>
   15686:	e003      	b.n	15690 <http_client_callback+0x7c>
                add_state(CANCELED);
   15688:	2020      	movs	r0, #32
   1568a:	4b29      	ldr	r3, [pc, #164]	; (15730 <http_client_callback+0x11c>)
   1568c:	4798      	blx	r3
                return;
   1568e:	e043      	b.n	15718 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   15690:	687b      	ldr	r3, [r7, #4]
   15692:	689a      	ldr	r2, [r3, #8]
   15694:	687b      	ldr	r3, [r7, #4]
   15696:	685b      	ldr	r3, [r3, #4]
   15698:	0019      	movs	r1, r3
   1569a:	0010      	movs	r0, r2
   1569c:	4b28      	ldr	r3, [pc, #160]	; (15740 <http_client_callback+0x12c>)
   1569e:	4798      	blx	r3
                add_state(COMPLETED);
   156a0:	2010      	movs	r0, #16
   156a2:	4b23      	ldr	r3, [pc, #140]	; (15730 <http_client_callback+0x11c>)
   156a4:	4798      	blx	r3
            }
            break;
   156a6:	e032      	b.n	1570e <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   156a8:	687b      	ldr	r3, [r7, #4]
   156aa:	685a      	ldr	r2, [r3, #4]
   156ac:	687b      	ldr	r3, [r7, #4]
   156ae:	681b      	ldr	r3, [r3, #0]
   156b0:	0019      	movs	r1, r3
   156b2:	0010      	movs	r0, r2
   156b4:	4b22      	ldr	r3, [pc, #136]	; (15740 <http_client_callback+0x12c>)
   156b6:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   156b8:	687b      	ldr	r3, [r7, #4]
   156ba:	7a1b      	ldrb	r3, [r3, #8]
   156bc:	2b00      	cmp	r3, #0
   156be:	d028      	beq.n	15712 <http_client_callback+0xfe>
                add_state(COMPLETED);
   156c0:	2010      	movs	r0, #16
   156c2:	4b1b      	ldr	r3, [pc, #108]	; (15730 <http_client_callback+0x11c>)
   156c4:	4798      	blx	r3
            }

            break;
   156c6:	e024      	b.n	15712 <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   156c8:	687b      	ldr	r3, [r7, #4]
   156ca:	681a      	ldr	r2, [r3, #0]
   156cc:	4b1d      	ldr	r3, [pc, #116]	; (15744 <http_client_callback+0x130>)
   156ce:	0019      	movs	r1, r3
   156d0:	2001      	movs	r0, #1
   156d2:	4b15      	ldr	r3, [pc, #84]	; (15728 <http_client_callback+0x114>)
   156d4:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   156d6:	687b      	ldr	r3, [r7, #4]
   156d8:	681b      	ldr	r3, [r3, #0]
   156da:	330b      	adds	r3, #11
   156dc:	d11b      	bne.n	15716 <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   156de:	2008      	movs	r0, #8
   156e0:	4b19      	ldr	r3, [pc, #100]	; (15748 <http_client_callback+0x134>)
   156e2:	4798      	blx	r3
   156e4:	1e03      	subs	r3, r0, #0
   156e6:	d006      	beq.n	156f6 <http_client_callback+0xe2>
                    f_close(&file_object);
   156e8:	4b18      	ldr	r3, [pc, #96]	; (1574c <http_client_callback+0x138>)
   156ea:	0018      	movs	r0, r3
   156ec:	4b18      	ldr	r3, [pc, #96]	; (15750 <http_client_callback+0x13c>)
   156ee:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   156f0:	2008      	movs	r0, #8
   156f2:	4b18      	ldr	r3, [pc, #96]	; (15754 <http_client_callback+0x140>)
   156f4:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   156f6:	2004      	movs	r0, #4
   156f8:	4b13      	ldr	r3, [pc, #76]	; (15748 <http_client_callback+0x134>)
   156fa:	4798      	blx	r3
   156fc:	1e03      	subs	r3, r0, #0
   156fe:	d002      	beq.n	15706 <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   15700:	2004      	movs	r0, #4
   15702:	4b14      	ldr	r3, [pc, #80]	; (15754 <http_client_callback+0x140>)
   15704:	4798      	blx	r3
                }

                start_download();
   15706:	4b14      	ldr	r3, [pc, #80]	; (15758 <http_client_callback+0x144>)
   15708:	4798      	blx	r3
            }

            break;
   1570a:	46c0      	nop			; (mov r8, r8)
   1570c:	e003      	b.n	15716 <http_client_callback+0x102>
            break;
   1570e:	46c0      	nop			; (mov r8, r8)
   15710:	e002      	b.n	15718 <http_client_callback+0x104>
            break;
   15712:	46c0      	nop			; (mov r8, r8)
   15714:	e000      	b.n	15718 <http_client_callback+0x104>
            break;
   15716:	46c0      	nop			; (mov r8, r8)
    }
}
   15718:	46bd      	mov	sp, r7
   1571a:	b005      	add	sp, #20
   1571c:	bd90      	pop	{r4, r7, pc}
   1571e:	46c0      	nop			; (mov r8, r8)
   15720:	00036760 	.word	0x00036760
   15724:	00036120 	.word	0x00036120
   15728:	0001ce91 	.word	0x0001ce91
   1572c:	00036158 	.word	0x00036158
   15730:	00015035 	.word	0x00015035
   15734:	00036184 	.word	0x00036184
   15738:	2000085c 	.word	0x2000085c
   1573c:	20000860 	.word	0x20000860
   15740:	00015441 	.word	0x00015441
   15744:	000361c0 	.word	0x000361c0
   15748:	0001505d 	.word	0x0001505d
   1574c:	20000838 	.word	0x20000838
   15750:	0002d4cd 	.word	0x0002d4cd
   15754:	00015001 	.word	0x00015001
   15758:	00015385 	.word	0x00015385

0001575c <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   1575c:	b580      	push	{r7, lr}
   1575e:	b082      	sub	sp, #8
   15760:	af00      	add	r7, sp, #0
   15762:	603a      	str	r2, [r7, #0]
   15764:	1dfb      	adds	r3, r7, #7
   15766:	1c02      	adds	r2, r0, #0
   15768:	701a      	strb	r2, [r3, #0]
   1576a:	1dbb      	adds	r3, r7, #6
   1576c:	1c0a      	adds	r2, r1, #0
   1576e:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   15770:	683a      	ldr	r2, [r7, #0]
   15772:	1dbb      	adds	r3, r7, #6
   15774:	7819      	ldrb	r1, [r3, #0]
   15776:	1dfb      	adds	r3, r7, #7
   15778:	781b      	ldrb	r3, [r3, #0]
   1577a:	b25b      	sxtb	r3, r3
   1577c:	0018      	movs	r0, r3
   1577e:	4b03      	ldr	r3, [pc, #12]	; (1578c <socket_cb+0x30>)
   15780:	4798      	blx	r3
}
   15782:	46c0      	nop			; (mov r8, r8)
   15784:	46bd      	mov	sp, r7
   15786:	b002      	add	sp, #8
   15788:	bd80      	pop	{r7, pc}
   1578a:	46c0      	nop			; (mov r8, r8)
   1578c:	0002fe31 	.word	0x0002fe31

00015790 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   15790:	b5b0      	push	{r4, r5, r7, lr}
   15792:	b086      	sub	sp, #24
   15794:	af04      	add	r7, sp, #16
   15796:	6078      	str	r0, [r7, #4]
   15798:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   1579a:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   1579c:	22ff      	movs	r2, #255	; 0xff
   1579e:	4013      	ands	r3, r2
   157a0:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   157a2:	683b      	ldr	r3, [r7, #0]
   157a4:	0a1b      	lsrs	r3, r3, #8
   157a6:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   157a8:	23ff      	movs	r3, #255	; 0xff
   157aa:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   157ac:	683a      	ldr	r2, [r7, #0]
   157ae:	0c12      	lsrs	r2, r2, #16
   157b0:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   157b2:	22ff      	movs	r2, #255	; 0xff
   157b4:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   157b6:	6839      	ldr	r1, [r7, #0]
   157b8:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   157ba:	000d      	movs	r5, r1
   157bc:	6878      	ldr	r0, [r7, #4]
   157be:	4909      	ldr	r1, [pc, #36]	; (157e4 <resolve_cb+0x54>)
   157c0:	9502      	str	r5, [sp, #8]
   157c2:	9201      	str	r2, [sp, #4]
   157c4:	9300      	str	r3, [sp, #0]
   157c6:	0023      	movs	r3, r4
   157c8:	0002      	movs	r2, r0
   157ca:	2001      	movs	r0, #1
   157cc:	4c06      	ldr	r4, [pc, #24]	; (157e8 <resolve_cb+0x58>)
   157ce:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   157d0:	683a      	ldr	r2, [r7, #0]
   157d2:	687b      	ldr	r3, [r7, #4]
   157d4:	0011      	movs	r1, r2
   157d6:	0018      	movs	r0, r3
   157d8:	4b04      	ldr	r3, [pc, #16]	; (157ec <resolve_cb+0x5c>)
   157da:	4798      	blx	r3
}
   157dc:	46c0      	nop			; (mov r8, r8)
   157de:	46bd      	mov	sp, r7
   157e0:	b002      	add	sp, #8
   157e2:	bdb0      	pop	{r4, r5, r7, pc}
   157e4:	000361f0 	.word	0x000361f0
   157e8:	0001ce91 	.word	0x0001ce91
   157ec:	0002ff95 	.word	0x0002ff95

000157f0 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   157f0:	b590      	push	{r4, r7, lr}
   157f2:	b087      	sub	sp, #28
   157f4:	af02      	add	r7, sp, #8
   157f6:	0002      	movs	r2, r0
   157f8:	6039      	str	r1, [r7, #0]
   157fa:	1dfb      	adds	r3, r7, #7
   157fc:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   157fe:	1dfb      	adds	r3, r7, #7
   15800:	781b      	ldrb	r3, [r3, #0]
   15802:	2b2c      	cmp	r3, #44	; 0x2c
   15804:	d002      	beq.n	1580c <wifi_cb+0x1c>
   15806:	2b32      	cmp	r3, #50	; 0x32
   15808:	d03d      	beq.n	15886 <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   1580a:	e06f      	b.n	158ec <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   1580c:	683b      	ldr	r3, [r7, #0]
   1580e:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   15810:	68fb      	ldr	r3, [r7, #12]
   15812:	781b      	ldrb	r3, [r3, #0]
   15814:	2b01      	cmp	r3, #1
   15816:	d107      	bne.n	15828 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   15818:	4b36      	ldr	r3, [pc, #216]	; (158f4 <wifi_cb+0x104>)
   1581a:	0019      	movs	r1, r3
   1581c:	2001      	movs	r0, #1
   1581e:	4b36      	ldr	r3, [pc, #216]	; (158f8 <wifi_cb+0x108>)
   15820:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   15822:	4b36      	ldr	r3, [pc, #216]	; (158fc <wifi_cb+0x10c>)
   15824:	4798      	blx	r3
            break;
   15826:	e05e      	b.n	158e6 <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   15828:	68fb      	ldr	r3, [r7, #12]
   1582a:	781b      	ldrb	r3, [r3, #0]
   1582c:	2b00      	cmp	r3, #0
   1582e:	d15a      	bne.n	158e6 <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   15830:	4b33      	ldr	r3, [pc, #204]	; (15900 <wifi_cb+0x110>)
   15832:	0019      	movs	r1, r3
   15834:	2001      	movs	r0, #1
   15836:	4b30      	ldr	r3, [pc, #192]	; (158f8 <wifi_cb+0x108>)
   15838:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   1583a:	2002      	movs	r0, #2
   1583c:	4b31      	ldr	r3, [pc, #196]	; (15904 <wifi_cb+0x114>)
   1583e:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   15840:	2008      	movs	r0, #8
   15842:	4b31      	ldr	r3, [pc, #196]	; (15908 <wifi_cb+0x118>)
   15844:	4798      	blx	r3
   15846:	1e03      	subs	r3, r0, #0
   15848:	d006      	beq.n	15858 <wifi_cb+0x68>
                    f_close(&file_object);
   1584a:	4b30      	ldr	r3, [pc, #192]	; (1590c <wifi_cb+0x11c>)
   1584c:	0018      	movs	r0, r3
   1584e:	4b30      	ldr	r3, [pc, #192]	; (15910 <wifi_cb+0x120>)
   15850:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   15852:	2008      	movs	r0, #8
   15854:	4b2b      	ldr	r3, [pc, #172]	; (15904 <wifi_cb+0x114>)
   15856:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   15858:	2004      	movs	r0, #4
   1585a:	4b2b      	ldr	r3, [pc, #172]	; (15908 <wifi_cb+0x118>)
   1585c:	4798      	blx	r3
   1585e:	1e03      	subs	r3, r0, #0
   15860:	d002      	beq.n	15868 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   15862:	2004      	movs	r0, #4
   15864:	4b27      	ldr	r3, [pc, #156]	; (15904 <wifi_cb+0x114>)
   15866:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   15868:	4b2a      	ldr	r3, [pc, #168]	; (15914 <wifi_cb+0x124>)
   1586a:	2101      	movs	r1, #1
   1586c:	0018      	movs	r0, r3
   1586e:	4b2a      	ldr	r3, [pc, #168]	; (15918 <wifi_cb+0x128>)
   15870:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   15872:	4a2a      	ldr	r2, [pc, #168]	; (1591c <wifi_cb+0x12c>)
   15874:	482a      	ldr	r0, [pc, #168]	; (15920 <wifi_cb+0x130>)
   15876:	23ff      	movs	r3, #255	; 0xff
   15878:	9300      	str	r3, [sp, #0]
   1587a:	0013      	movs	r3, r2
   1587c:	2202      	movs	r2, #2
   1587e:	2102      	movs	r1, #2
   15880:	4c28      	ldr	r4, [pc, #160]	; (15924 <wifi_cb+0x134>)
   15882:	47a0      	blx	r4
            break;
   15884:	e02f      	b.n	158e6 <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   15886:	683b      	ldr	r3, [r7, #0]
   15888:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   1588a:	68bb      	ldr	r3, [r7, #8]
   1588c:	781b      	ldrb	r3, [r3, #0]
   1588e:	0018      	movs	r0, r3
   15890:	68bb      	ldr	r3, [r7, #8]
   15892:	3301      	adds	r3, #1
   15894:	781b      	ldrb	r3, [r3, #0]
   15896:	001c      	movs	r4, r3
   15898:	68bb      	ldr	r3, [r7, #8]
   1589a:	3302      	adds	r3, #2
   1589c:	781b      	ldrb	r3, [r3, #0]
   1589e:	001a      	movs	r2, r3
   158a0:	68bb      	ldr	r3, [r7, #8]
   158a2:	3303      	adds	r3, #3
   158a4:	781b      	ldrb	r3, [r3, #0]
   158a6:	4920      	ldr	r1, [pc, #128]	; (15928 <wifi_cb+0x138>)
   158a8:	9301      	str	r3, [sp, #4]
   158aa:	9200      	str	r2, [sp, #0]
   158ac:	0023      	movs	r3, r4
   158ae:	0002      	movs	r2, r0
   158b0:	2001      	movs	r0, #1
   158b2:	4c11      	ldr	r4, [pc, #68]	; (158f8 <wifi_cb+0x108>)
   158b4:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   158b6:	2002      	movs	r0, #2
   158b8:	4b1c      	ldr	r3, [pc, #112]	; (1592c <wifi_cb+0x13c>)
   158ba:	4798      	blx	r3
            if (do_download_flag == 1) {
   158bc:	4b1c      	ldr	r3, [pc, #112]	; (15930 <wifi_cb+0x140>)
   158be:	781b      	ldrb	r3, [r3, #0]
   158c0:	2b01      	cmp	r3, #1
   158c2:	d102      	bne.n	158ca <wifi_cb+0xda>
                start_download();
   158c4:	4b1b      	ldr	r3, [pc, #108]	; (15934 <wifi_cb+0x144>)
   158c6:	4798      	blx	r3
        } break;
   158c8:	e00f      	b.n	158ea <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   158ca:	4a1b      	ldr	r2, [pc, #108]	; (15938 <wifi_cb+0x148>)
   158cc:	4b11      	ldr	r3, [pc, #68]	; (15914 <wifi_cb+0x124>)
   158ce:	0011      	movs	r1, r2
   158d0:	0018      	movs	r0, r3
   158d2:	4b1a      	ldr	r3, [pc, #104]	; (1593c <wifi_cb+0x14c>)
   158d4:	4798      	blx	r3
   158d6:	1e03      	subs	r3, r0, #0
   158d8:	d007      	beq.n	158ea <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   158da:	4b19      	ldr	r3, [pc, #100]	; (15940 <wifi_cb+0x150>)
   158dc:	0019      	movs	r1, r3
   158de:	2001      	movs	r0, #1
   158e0:	4b05      	ldr	r3, [pc, #20]	; (158f8 <wifi_cb+0x108>)
   158e2:	4798      	blx	r3
        } break;
   158e4:	e001      	b.n	158ea <wifi_cb+0xfa>
            break;
   158e6:	46c0      	nop			; (mov r8, r8)
   158e8:	e000      	b.n	158ec <wifi_cb+0xfc>
        } break;
   158ea:	46c0      	nop			; (mov r8, r8)
    }
}
   158ec:	46c0      	nop			; (mov r8, r8)
   158ee:	46bd      	mov	sp, r7
   158f0:	b005      	add	sp, #20
   158f2:	bd90      	pop	{r4, r7, pc}
   158f4:	00036220 	.word	0x00036220
   158f8:	0001ce91 	.word	0x0001ce91
   158fc:	000214d5 	.word	0x000214d5
   15900:	00036240 	.word	0x00036240
   15904:	00015001 	.word	0x00015001
   15908:	0001505d 	.word	0x0001505d
   1590c:	20000838 	.word	0x20000838
   15910:	0002d4cd 	.word	0x0002d4cd
   15914:	20000864 	.word	0x20000864
   15918:	0002eadd 	.word	0x0002eadd
   1591c:	00036264 	.word	0x00036264
   15920:	00036270 	.word	0x00036270
   15924:	00021001 	.word	0x00021001
   15928:	00036274 	.word	0x00036274
   1592c:	00015035 	.word	0x00015035
   15930:	20000604 	.word	0x20000604
   15934:	00015385 	.word	0x00015385
   15938:	00035ea4 	.word	0x00035ea4
   1593c:	0002e9a9 	.word	0x0002e9a9
   15940:	0003629c 	.word	0x0003629c

00015944 <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   15944:	b590      	push	{r4, r7, lr}
   15946:	b083      	sub	sp, #12
   15948:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
   1594a:	4b29      	ldr	r3, [pc, #164]	; (159f0 <init_storage+0xac>)
   1594c:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   1594e:	4b29      	ldr	r3, [pc, #164]	; (159f4 <init_storage+0xb0>)
   15950:	0019      	movs	r1, r3
   15952:	2001      	movs	r0, #1
   15954:	4b28      	ldr	r3, [pc, #160]	; (159f8 <init_storage+0xb4>)
   15956:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
   15958:	1dfc      	adds	r4, r7, #7
   1595a:	2000      	movs	r0, #0
   1595c:	4b27      	ldr	r3, [pc, #156]	; (159fc <init_storage+0xb8>)
   1595e:	4798      	blx	r3
   15960:	0003      	movs	r3, r0
   15962:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
   15964:	1dfb      	adds	r3, r7, #7
   15966:	781b      	ldrb	r3, [r3, #0]
   15968:	2b01      	cmp	r3, #1
   1596a:	d110      	bne.n	1598e <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   1596c:	4b24      	ldr	r3, [pc, #144]	; (15a00 <init_storage+0xbc>)
   1596e:	0019      	movs	r1, r3
   15970:	2001      	movs	r0, #1
   15972:	4b21      	ldr	r3, [pc, #132]	; (159f8 <init_storage+0xb4>)
   15974:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   15976:	4b23      	ldr	r3, [pc, #140]	; (15a04 <init_storage+0xc0>)
   15978:	0019      	movs	r1, r3
   1597a:	2001      	movs	r0, #1
   1597c:	4b1e      	ldr	r3, [pc, #120]	; (159f8 <init_storage+0xb4>)
   1597e:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   15980:	46c0      	nop			; (mov r8, r8)
   15982:	2000      	movs	r0, #0
   15984:	4b20      	ldr	r3, [pc, #128]	; (15a08 <init_storage+0xc4>)
   15986:	4798      	blx	r3
   15988:	0003      	movs	r3, r0
   1598a:	2b02      	cmp	r3, #2
   1598c:	d1f9      	bne.n	15982 <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
   1598e:	1dfb      	adds	r3, r7, #7
   15990:	781b      	ldrb	r3, [r3, #0]
   15992:	2b00      	cmp	r3, #0
   15994:	d1e0      	bne.n	15958 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   15996:	4b1d      	ldr	r3, [pc, #116]	; (15a0c <init_storage+0xc8>)
   15998:	0019      	movs	r1, r3
   1599a:	2001      	movs	r0, #1
   1599c:	4b16      	ldr	r3, [pc, #88]	; (159f8 <init_storage+0xb4>)
   1599e:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
   159a0:	238c      	movs	r3, #140	; 0x8c
   159a2:	009a      	lsls	r2, r3, #2
   159a4:	4b1a      	ldr	r3, [pc, #104]	; (15a10 <init_storage+0xcc>)
   159a6:	2100      	movs	r1, #0
   159a8:	0018      	movs	r0, r3
   159aa:	4b1a      	ldr	r3, [pc, #104]	; (15a14 <init_storage+0xd0>)
   159ac:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   159ae:	1dbc      	adds	r4, r7, #6
   159b0:	4b17      	ldr	r3, [pc, #92]	; (15a10 <init_storage+0xcc>)
   159b2:	0019      	movs	r1, r3
   159b4:	2000      	movs	r0, #0
   159b6:	4b18      	ldr	r3, [pc, #96]	; (15a18 <init_storage+0xd4>)
   159b8:	4798      	blx	r3
   159ba:	0003      	movs	r3, r0
   159bc:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
   159be:	1dbb      	adds	r3, r7, #6
   159c0:	781b      	ldrb	r3, [r3, #0]
   159c2:	2b0b      	cmp	r3, #11
   159c4:	d107      	bne.n	159d6 <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   159c6:	1dbb      	adds	r3, r7, #6
   159c8:	781a      	ldrb	r2, [r3, #0]
   159ca:	4b14      	ldr	r3, [pc, #80]	; (15a1c <init_storage+0xd8>)
   159cc:	0019      	movs	r1, r3
   159ce:	2001      	movs	r0, #1
   159d0:	4b09      	ldr	r3, [pc, #36]	; (159f8 <init_storage+0xb4>)
   159d2:	4798      	blx	r3
            return;
   159d4:	e008      	b.n	159e8 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   159d6:	4b12      	ldr	r3, [pc, #72]	; (15a20 <init_storage+0xdc>)
   159d8:	0019      	movs	r1, r3
   159da:	2001      	movs	r0, #1
   159dc:	4b06      	ldr	r3, [pc, #24]	; (159f8 <init_storage+0xb4>)
   159de:	4798      	blx	r3
        add_state(STORAGE_READY);
   159e0:	2001      	movs	r0, #1
   159e2:	4b10      	ldr	r3, [pc, #64]	; (15a24 <init_storage+0xe0>)
   159e4:	4798      	blx	r3
        return;
   159e6:	46c0      	nop			; (mov r8, r8)
    }
}
   159e8:	46bd      	mov	sp, r7
   159ea:	b003      	add	sp, #12
   159ec:	bd90      	pop	{r4, r7, pc}
   159ee:	46c0      	nop			; (mov r8, r8)
   159f0:	0001dca9 	.word	0x0001dca9
   159f4:	000362c0 	.word	0x000362c0
   159f8:	0001ce91 	.word	0x0001ce91
   159fc:	0001e185 	.word	0x0001e185
   15a00:	000362f8 	.word	0x000362f8
   15a04:	00036320 	.word	0x00036320
   15a08:	0001dcf9 	.word	0x0001dcf9
   15a0c:	00036354 	.word	0x00036354
   15a10:	20000608 	.word	0x20000608
   15a14:	0003457f 	.word	0x0003457f
   15a18:	0002ca75 	.word	0x0002ca75
   15a1c:	00036378 	.word	0x00036378
   15a20:	000363a8 	.word	0x000363a8
   15a24:	00015035 	.word	0x00015035

00015a28 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   15a28:	b580      	push	{r7, lr}
   15a2a:	b082      	sub	sp, #8
   15a2c:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   15a2e:	1d3b      	adds	r3, r7, #4
   15a30:	0018      	movs	r0, r3
   15a32:	4b08      	ldr	r3, [pc, #32]	; (15a54 <configure_timer+0x2c>)
   15a34:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   15a36:	1d3a      	adds	r2, r7, #4
   15a38:	4b07      	ldr	r3, [pc, #28]	; (15a58 <configure_timer+0x30>)
   15a3a:	0011      	movs	r1, r2
   15a3c:	0018      	movs	r0, r3
   15a3e:	4b07      	ldr	r3, [pc, #28]	; (15a5c <configure_timer+0x34>)
   15a40:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   15a42:	4b05      	ldr	r3, [pc, #20]	; (15a58 <configure_timer+0x30>)
   15a44:	0018      	movs	r0, r3
   15a46:	4b06      	ldr	r3, [pc, #24]	; (15a60 <configure_timer+0x38>)
   15a48:	4798      	blx	r3
}
   15a4a:	46c0      	nop			; (mov r8, r8)
   15a4c:	46bd      	mov	sp, r7
   15a4e:	b002      	add	sp, #8
   15a50:	bd80      	pop	{r7, pc}
   15a52:	46c0      	nop			; (mov r8, r8)
   15a54:	000315c5 	.word	0x000315c5
   15a58:	20004874 	.word	0x20004874
   15a5c:	000315e9 	.word	0x000315e9
   15a60:	000316d5 	.word	0x000316d5

00015a64 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   15a64:	b580      	push	{r7, lr}
   15a66:	b088      	sub	sp, #32
   15a68:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   15a6a:	003b      	movs	r3, r7
   15a6c:	0018      	movs	r0, r3
   15a6e:	4b12      	ldr	r3, [pc, #72]	; (15ab8 <configure_http_client+0x54>)
   15a70:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   15a72:	003b      	movs	r3, r7
   15a74:	2280      	movs	r2, #128	; 0x80
   15a76:	0092      	lsls	r2, r2, #2
   15a78:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   15a7a:	003b      	movs	r3, r7
   15a7c:	4a0f      	ldr	r2, [pc, #60]	; (15abc <configure_http_client+0x58>)
   15a7e:	605a      	str	r2, [r3, #4]
    //httpc_conf.port = 443;
    //httpc_conf.tls = 1;

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   15a80:	003a      	movs	r2, r7
   15a82:	4b0f      	ldr	r3, [pc, #60]	; (15ac0 <configure_http_client+0x5c>)
   15a84:	0011      	movs	r1, r2
   15a86:	0018      	movs	r0, r3
   15a88:	4b0e      	ldr	r3, [pc, #56]	; (15ac4 <configure_http_client+0x60>)
   15a8a:	4798      	blx	r3
   15a8c:	0003      	movs	r3, r0
   15a8e:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   15a90:	69fb      	ldr	r3, [r7, #28]
   15a92:	2b00      	cmp	r3, #0
   15a94:	da06      	bge.n	15aa4 <configure_http_client+0x40>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   15a96:	69fa      	ldr	r2, [r7, #28]
   15a98:	4b0b      	ldr	r3, [pc, #44]	; (15ac8 <configure_http_client+0x64>)
   15a9a:	0019      	movs	r1, r3
   15a9c:	2001      	movs	r0, #1
   15a9e:	4b0b      	ldr	r3, [pc, #44]	; (15acc <configure_http_client+0x68>)
   15aa0:	4798      	blx	r3
        while (1) {
   15aa2:	e7fe      	b.n	15aa2 <configure_http_client+0x3e>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   15aa4:	4a0a      	ldr	r2, [pc, #40]	; (15ad0 <configure_http_client+0x6c>)
   15aa6:	4b06      	ldr	r3, [pc, #24]	; (15ac0 <configure_http_client+0x5c>)
   15aa8:	0011      	movs	r1, r2
   15aaa:	0018      	movs	r0, r3
   15aac:	4b09      	ldr	r3, [pc, #36]	; (15ad4 <configure_http_client+0x70>)
   15aae:	4798      	blx	r3
}
   15ab0:	46c0      	nop			; (mov r8, r8)
   15ab2:	46bd      	mov	sp, r7
   15ab4:	b008      	add	sp, #32
   15ab6:	bd80      	pop	{r7, pc}
   15ab8:	0002fc59 	.word	0x0002fc59
   15abc:	20004874 	.word	0x20004874
   15ac0:	200048cc 	.word	0x200048cc
   15ac4:	0002fca5 	.word	0x0002fca5
   15ac8:	000363cc 	.word	0x000363cc
   15acc:	0001ce91 	.word	0x0001ce91
   15ad0:	00015615 	.word	0x00015615
   15ad4:	0002fd91 	.word	0x0002fd91

00015ad8 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   15ad8:	b580      	push	{r7, lr}
   15ada:	b082      	sub	sp, #8
   15adc:	af00      	add	r7, sp, #0
   15ade:	603a      	str	r2, [r7, #0]
   15ae0:	1dfb      	adds	r3, r7, #7
   15ae2:	1c02      	adds	r2, r0, #0
   15ae4:	701a      	strb	r2, [r3, #0]
   15ae6:	1dbb      	adds	r3, r7, #6
   15ae8:	1c0a      	adds	r2, r1, #0
   15aea:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   15aec:	683a      	ldr	r2, [r7, #0]
   15aee:	1dbb      	adds	r3, r7, #6
   15af0:	7819      	ldrb	r1, [r3, #0]
   15af2:	1dfb      	adds	r3, r7, #7
   15af4:	781b      	ldrb	r3, [r3, #0]
   15af6:	b25b      	sxtb	r3, r3
   15af8:	0018      	movs	r0, r3
   15afa:	4b03      	ldr	r3, [pc, #12]	; (15b08 <socket_event_handler+0x30>)
   15afc:	4798      	blx	r3
}
   15afe:	46c0      	nop			; (mov r8, r8)
   15b00:	46bd      	mov	sp, r7
   15b02:	b002      	add	sp, #8
   15b04:	bd80      	pop	{r7, pc}
   15b06:	46c0      	nop			; (mov r8, r8)
   15b08:	0002e951 	.word	0x0002e951

00015b0c <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   15b0c:	b580      	push	{r7, lr}
   15b0e:	b082      	sub	sp, #8
   15b10:	af00      	add	r7, sp, #0
   15b12:	6078      	str	r0, [r7, #4]
   15b14:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   15b16:	683a      	ldr	r2, [r7, #0]
   15b18:	687b      	ldr	r3, [r7, #4]
   15b1a:	0011      	movs	r1, r2
   15b1c:	0018      	movs	r0, r3
   15b1e:	4b03      	ldr	r3, [pc, #12]	; (15b2c <socket_resolve_handler+0x20>)
   15b20:	4798      	blx	r3
}
   15b22:	46c0      	nop			; (mov r8, r8)
   15b24:	46bd      	mov	sp, r7
   15b26:	b002      	add	sp, #8
   15b28:	bd80      	pop	{r7, pc}
   15b2a:	46c0      	nop			; (mov r8, r8)
   15b2c:	0002e985 	.word	0x0002e985

00015b30 <SubscribeHandlerServo>:
        }
    }
}

void SubscribeHandlerServo(MessageData *msgData)
{
   15b30:	b590      	push	{r4, r7, lr}
   15b32:	b083      	sub	sp, #12
   15b34:	af00      	add	r7, sp, #0
   15b36:	6078      	str	r0, [r7, #4]
	/* You received publish message which you had subscribed. */
	/* Print Topic and message */
	LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   15b38:	687b      	ldr	r3, [r7, #4]
   15b3a:	685b      	ldr	r3, [r3, #4]
   15b3c:	685a      	ldr	r2, [r3, #4]
   15b3e:	687b      	ldr	r3, [r7, #4]
   15b40:	685b      	ldr	r3, [r3, #4]
   15b42:	689b      	ldr	r3, [r3, #8]
   15b44:	4920      	ldr	r1, [pc, #128]	; (15bc8 <SubscribeHandlerServo+0x98>)
   15b46:	2001      	movs	r0, #1
   15b48:	4c20      	ldr	r4, [pc, #128]	; (15bcc <SubscribeHandlerServo+0x9c>)
   15b4a:	47a0      	blx	r4
	LogMessage(LOG_DEBUG_LVL, " >> ");
   15b4c:	4b20      	ldr	r3, [pc, #128]	; (15bd0 <SubscribeHandlerServo+0xa0>)
   15b4e:	0019      	movs	r1, r3
   15b50:	2001      	movs	r0, #1
   15b52:	4b1e      	ldr	r3, [pc, #120]	; (15bcc <SubscribeHandlerServo+0x9c>)
   15b54:	4798      	blx	r3
	LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   15b56:	687b      	ldr	r3, [r7, #4]
   15b58:	681b      	ldr	r3, [r3, #0]
   15b5a:	68da      	ldr	r2, [r3, #12]
   15b5c:	687b      	ldr	r3, [r7, #4]
   15b5e:	681b      	ldr	r3, [r3, #0]
   15b60:	689b      	ldr	r3, [r3, #8]
   15b62:	491c      	ldr	r1, [pc, #112]	; (15bd4 <SubscribeHandlerServo+0xa4>)
   15b64:	2001      	movs	r0, #1
   15b66:	4c19      	ldr	r4, [pc, #100]	; (15bcc <SubscribeHandlerServo+0x9c>)
   15b68:	47a0      	blx	r4

	// Handle LedData message
	if (strncmp((char *)msgData->topicName->lenstring.data, SERVO_TOPIC, msgData->message->payloadlen) == 0) {
   15b6a:	687b      	ldr	r3, [r7, #4]
   15b6c:	685b      	ldr	r3, [r3, #4]
   15b6e:	6898      	ldr	r0, [r3, #8]
   15b70:	687b      	ldr	r3, [r7, #4]
   15b72:	681b      	ldr	r3, [r3, #0]
   15b74:	68da      	ldr	r2, [r3, #12]
   15b76:	4b18      	ldr	r3, [pc, #96]	; (15bd8 <SubscribeHandlerServo+0xa8>)
   15b78:	0019      	movs	r1, r3
   15b7a:	4b18      	ldr	r3, [pc, #96]	; (15bdc <SubscribeHandlerServo+0xac>)
   15b7c:	4798      	blx	r3
   15b7e:	1e03      	subs	r3, r0, #0
   15b80:	d11e      	bne.n	15bc0 <SubscribeHandlerServo+0x90>
		if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_OFF, msgData->message->payloadlen) == 0) {
   15b82:	687b      	ldr	r3, [r7, #4]
   15b84:	681b      	ldr	r3, [r3, #0]
   15b86:	6898      	ldr	r0, [r3, #8]
   15b88:	687b      	ldr	r3, [r7, #4]
   15b8a:	681b      	ldr	r3, [r3, #0]
   15b8c:	68da      	ldr	r2, [r3, #12]
   15b8e:	4b14      	ldr	r3, [pc, #80]	; (15be0 <SubscribeHandlerServo+0xb0>)
   15b90:	0019      	movs	r1, r3
   15b92:	4b12      	ldr	r3, [pc, #72]	; (15bdc <SubscribeHandlerServo+0xac>)
   15b94:	4798      	blx	r3
   15b96:	1e03      	subs	r3, r0, #0
   15b98:	d103      	bne.n	15ba2 <SubscribeHandlerServo+0x72>
			servo_setDuty(2);
   15b9a:	2002      	movs	r0, #2
   15b9c:	4b11      	ldr	r3, [pc, #68]	; (15be4 <SubscribeHandlerServo+0xb4>)
   15b9e:	4798      	blx	r3
			} else if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0) {
			servo_setDuty(3);
		}
	}
}
   15ba0:	e00e      	b.n	15bc0 <SubscribeHandlerServo+0x90>
			} else if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0) {
   15ba2:	687b      	ldr	r3, [r7, #4]
   15ba4:	681b      	ldr	r3, [r3, #0]
   15ba6:	6898      	ldr	r0, [r3, #8]
   15ba8:	687b      	ldr	r3, [r7, #4]
   15baa:	681b      	ldr	r3, [r3, #0]
   15bac:	68da      	ldr	r2, [r3, #12]
   15bae:	4b0e      	ldr	r3, [pc, #56]	; (15be8 <SubscribeHandlerServo+0xb8>)
   15bb0:	0019      	movs	r1, r3
   15bb2:	4b0a      	ldr	r3, [pc, #40]	; (15bdc <SubscribeHandlerServo+0xac>)
   15bb4:	4798      	blx	r3
   15bb6:	1e03      	subs	r3, r0, #0
   15bb8:	d102      	bne.n	15bc0 <SubscribeHandlerServo+0x90>
			servo_setDuty(3);
   15bba:	2003      	movs	r0, #3
   15bbc:	4b09      	ldr	r3, [pc, #36]	; (15be4 <SubscribeHandlerServo+0xb4>)
   15bbe:	4798      	blx	r3
}
   15bc0:	46c0      	nop			; (mov r8, r8)
   15bc2:	46bd      	mov	sp, r7
   15bc4:	b003      	add	sp, #12
   15bc6:	bd90      	pop	{r4, r7, pc}
   15bc8:	00036414 	.word	0x00036414
   15bcc:	0001ce91 	.word	0x0001ce91
   15bd0:	0003641c 	.word	0x0003641c
   15bd4:	00036424 	.word	0x00036424
   15bd8:	00036450 	.word	0x00036450
   15bdc:	00034929 	.word	0x00034929
   15be0:	00036440 	.word	0x00036440
   15be4:	00014d59 	.word	0x00014d59
   15be8:	00036448 	.word	0x00036448

00015bec <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   15bec:	b590      	push	{r4, r7, lr}
   15bee:	b08b      	sub	sp, #44	; 0x2c
   15bf0:	af06      	add	r7, sp, #24
   15bf2:	60f8      	str	r0, [r7, #12]
   15bf4:	60b9      	str	r1, [r7, #8]
   15bf6:	607a      	str	r2, [r7, #4]
    switch (type) {
   15bf8:	68bb      	ldr	r3, [r7, #8]
   15bfa:	2b01      	cmp	r3, #1
   15bfc:	d03b      	beq.n	15c76 <mqtt_callback+0x8a>
   15bfe:	2b05      	cmp	r3, #5
   15c00:	d052      	beq.n	15ca8 <mqtt_callback+0xbc>
   15c02:	2b00      	cmp	r3, #0
   15c04:	d000      	beq.n	15c08 <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   15c06:	e055      	b.n	15cb4 <mqtt_callback+0xc8>
            if (data->sock_connected.result >= 0) {
   15c08:	687b      	ldr	r3, [r7, #4]
   15c0a:	681b      	ldr	r3, [r3, #0]
   15c0c:	2b00      	cmp	r3, #0
   15c0e:	db25      	blt.n	15c5c <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   15c10:	4b2a      	ldr	r3, [pc, #168]	; (15cbc <mqtt_callback+0xd0>)
   15c12:	0019      	movs	r1, r3
   15c14:	2001      	movs	r0, #1
   15c16:	4b2a      	ldr	r3, [pc, #168]	; (15cc0 <mqtt_callback+0xd4>)
   15c18:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   15c1a:	492a      	ldr	r1, [pc, #168]	; (15cc4 <mqtt_callback+0xd8>)
   15c1c:	4a2a      	ldr	r2, [pc, #168]	; (15cc8 <mqtt_callback+0xdc>)
   15c1e:	68f8      	ldr	r0, [r7, #12]
   15c20:	2300      	movs	r3, #0
   15c22:	9305      	str	r3, [sp, #20]
   15c24:	2300      	movs	r3, #0
   15c26:	9304      	str	r3, [sp, #16]
   15c28:	2300      	movs	r3, #0
   15c2a:	9303      	str	r3, [sp, #12]
   15c2c:	2300      	movs	r3, #0
   15c2e:	9302      	str	r3, [sp, #8]
   15c30:	2300      	movs	r3, #0
   15c32:	9301      	str	r3, [sp, #4]
   15c34:	4b24      	ldr	r3, [pc, #144]	; (15cc8 <mqtt_callback+0xdc>)
   15c36:	9300      	str	r3, [sp, #0]
   15c38:	000b      	movs	r3, r1
   15c3a:	2101      	movs	r1, #1
   15c3c:	4c23      	ldr	r4, [pc, #140]	; (15ccc <mqtt_callback+0xe0>)
   15c3e:	47a0      	blx	r4
   15c40:	1e03      	subs	r3, r0, #0
   15c42:	d005      	beq.n	15c50 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   15c44:	4b22      	ldr	r3, [pc, #136]	; (15cd0 <mqtt_callback+0xe4>)
   15c46:	0019      	movs	r1, r3
   15c48:	2001      	movs	r0, #1
   15c4a:	4b1d      	ldr	r3, [pc, #116]	; (15cc0 <mqtt_callback+0xd4>)
   15c4c:	4798      	blx	r3
        } break;
   15c4e:	e031      	b.n	15cb4 <mqtt_callback+0xc8>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
   15c50:	4b20      	ldr	r3, [pc, #128]	; (15cd4 <mqtt_callback+0xe8>)
   15c52:	0019      	movs	r1, r3
   15c54:	2001      	movs	r0, #1
   15c56:	4b1a      	ldr	r3, [pc, #104]	; (15cc0 <mqtt_callback+0xd4>)
   15c58:	4798      	blx	r3
        } break;
   15c5a:	e02b      	b.n	15cb4 <mqtt_callback+0xc8>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   15c5c:	4a1e      	ldr	r2, [pc, #120]	; (15cd8 <mqtt_callback+0xec>)
   15c5e:	4b1f      	ldr	r3, [pc, #124]	; (15cdc <mqtt_callback+0xf0>)
   15c60:	0019      	movs	r1, r3
   15c62:	2001      	movs	r0, #1
   15c64:	4b16      	ldr	r3, [pc, #88]	; (15cc0 <mqtt_callback+0xd4>)
   15c66:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   15c68:	4a1b      	ldr	r2, [pc, #108]	; (15cd8 <mqtt_callback+0xec>)
   15c6a:	68fb      	ldr	r3, [r7, #12]
   15c6c:	0011      	movs	r1, r2
   15c6e:	0018      	movs	r0, r3
   15c70:	4b1b      	ldr	r3, [pc, #108]	; (15ce0 <mqtt_callback+0xf4>)
   15c72:	4798      	blx	r3
        } break;
   15c74:	e01e      	b.n	15cb4 <mqtt_callback+0xc8>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   15c76:	687b      	ldr	r3, [r7, #4]
   15c78:	781b      	ldrb	r3, [r3, #0]
   15c7a:	2b00      	cmp	r3, #0
   15c7c:	d10b      	bne.n	15c96 <mqtt_callback+0xaa>
				mqtt_subscribe(module_inst, SERVO_TOPIC, 2, SubscribeHandlerServo);
   15c7e:	4b19      	ldr	r3, [pc, #100]	; (15ce4 <mqtt_callback+0xf8>)
   15c80:	4919      	ldr	r1, [pc, #100]	; (15ce8 <mqtt_callback+0xfc>)
   15c82:	68f8      	ldr	r0, [r7, #12]
   15c84:	2202      	movs	r2, #2
   15c86:	4c19      	ldr	r4, [pc, #100]	; (15cec <mqtt_callback+0x100>)
   15c88:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   15c8a:	4b19      	ldr	r3, [pc, #100]	; (15cf0 <mqtt_callback+0x104>)
   15c8c:	0019      	movs	r1, r3
   15c8e:	2001      	movs	r0, #1
   15c90:	4b0b      	ldr	r3, [pc, #44]	; (15cc0 <mqtt_callback+0xd4>)
   15c92:	4798      	blx	r3
            break;
   15c94:	e00e      	b.n	15cb4 <mqtt_callback+0xc8>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   15c96:	687b      	ldr	r3, [r7, #4]
   15c98:	781b      	ldrb	r3, [r3, #0]
   15c9a:	001a      	movs	r2, r3
   15c9c:	4b15      	ldr	r3, [pc, #84]	; (15cf4 <mqtt_callback+0x108>)
   15c9e:	0019      	movs	r1, r3
   15ca0:	2001      	movs	r0, #1
   15ca2:	4b07      	ldr	r3, [pc, #28]	; (15cc0 <mqtt_callback+0xd4>)
   15ca4:	4798      	blx	r3
            break;
   15ca6:	e005      	b.n	15cb4 <mqtt_callback+0xc8>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   15ca8:	4b13      	ldr	r3, [pc, #76]	; (15cf8 <mqtt_callback+0x10c>)
   15caa:	0019      	movs	r1, r3
   15cac:	2001      	movs	r0, #1
   15cae:	4b04      	ldr	r3, [pc, #16]	; (15cc0 <mqtt_callback+0xd4>)
   15cb0:	4798      	blx	r3
            break;
   15cb2:	46c0      	nop			; (mov r8, r8)
}
   15cb4:	46c0      	nop			; (mov r8, r8)
   15cb6:	46bd      	mov	sp, r7
   15cb8:	b005      	add	sp, #20
   15cba:	bd90      	pop	{r4, r7, pc}
   15cbc:	00036464 	.word	0x00036464
   15cc0:	0001ce91 	.word	0x0001ce91
   15cc4:	00036480 	.word	0x00036480
   15cc8:	00036490 	.word	0x00036490
   15ccc:	0002e9f1 	.word	0x0002e9f1
   15cd0:	0003649c 	.word	0x0003649c
   15cd4:	000364c4 	.word	0x000364c4
   15cd8:	00035ea4 	.word	0x00035ea4
   15cdc:	000364e0 	.word	0x000364e0
   15ce0:	0002e9a9 	.word	0x0002e9a9
   15ce4:	00015b31 	.word	0x00015b31
   15ce8:	00036450 	.word	0x00036450
   15cec:	0002eb91 	.word	0x0002eb91
   15cf0:	00036518 	.word	0x00036518
   15cf4:	0003652c 	.word	0x0003652c
   15cf8:	00036560 	.word	0x00036560

00015cfc <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   15cfc:	b580      	push	{r7, lr}
   15cfe:	b088      	sub	sp, #32
   15d00:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   15d02:	1d3b      	adds	r3, r7, #4
   15d04:	0018      	movs	r0, r3
   15d06:	4b1f      	ldr	r3, [pc, #124]	; (15d84 <configure_mqtt+0x88>)
   15d08:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   15d0a:	1d3b      	adds	r3, r7, #4
   15d0c:	4a1e      	ldr	r2, [pc, #120]	; (15d88 <configure_mqtt+0x8c>)
   15d0e:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   15d10:	1d3b      	adds	r3, r7, #4
   15d12:	2280      	movs	r2, #128	; 0x80
   15d14:	0092      	lsls	r2, r2, #2
   15d16:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   15d18:	1d3b      	adds	r3, r7, #4
   15d1a:	4a1c      	ldr	r2, [pc, #112]	; (15d8c <configure_mqtt+0x90>)
   15d1c:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   15d1e:	1d3b      	adds	r3, r7, #4
   15d20:	2280      	movs	r2, #128	; 0x80
   15d22:	0092      	lsls	r2, r2, #2
   15d24:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   15d26:	1d3b      	adds	r3, r7, #4
   15d28:	4a19      	ldr	r2, [pc, #100]	; (15d90 <configure_mqtt+0x94>)
   15d2a:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   15d2c:	1d3b      	adds	r3, r7, #4
   15d2e:	4a19      	ldr	r2, [pc, #100]	; (15d94 <configure_mqtt+0x98>)
   15d30:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   15d32:	1d3a      	adds	r2, r7, #4
   15d34:	4b18      	ldr	r3, [pc, #96]	; (15d98 <configure_mqtt+0x9c>)
   15d36:	0011      	movs	r1, r2
   15d38:	0018      	movs	r0, r3
   15d3a:	4b18      	ldr	r3, [pc, #96]	; (15d9c <configure_mqtt+0xa0>)
   15d3c:	4798      	blx	r3
   15d3e:	0003      	movs	r3, r0
   15d40:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   15d42:	69fb      	ldr	r3, [r7, #28]
   15d44:	2b00      	cmp	r3, #0
   15d46:	da06      	bge.n	15d56 <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   15d48:	69fa      	ldr	r2, [r7, #28]
   15d4a:	4b15      	ldr	r3, [pc, #84]	; (15da0 <configure_mqtt+0xa4>)
   15d4c:	0019      	movs	r1, r3
   15d4e:	2001      	movs	r0, #1
   15d50:	4b14      	ldr	r3, [pc, #80]	; (15da4 <configure_mqtt+0xa8>)
   15d52:	4798      	blx	r3
        while (1) {
   15d54:	e7fe      	b.n	15d54 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   15d56:	4a14      	ldr	r2, [pc, #80]	; (15da8 <configure_mqtt+0xac>)
   15d58:	4b0f      	ldr	r3, [pc, #60]	; (15d98 <configure_mqtt+0x9c>)
   15d5a:	0011      	movs	r1, r2
   15d5c:	0018      	movs	r0, r3
   15d5e:	4b13      	ldr	r3, [pc, #76]	; (15dac <configure_mqtt+0xb0>)
   15d60:	4798      	blx	r3
   15d62:	0003      	movs	r3, r0
   15d64:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   15d66:	69fb      	ldr	r3, [r7, #28]
   15d68:	2b00      	cmp	r3, #0
   15d6a:	da06      	bge.n	15d7a <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   15d6c:	69fa      	ldr	r2, [r7, #28]
   15d6e:	4b10      	ldr	r3, [pc, #64]	; (15db0 <configure_mqtt+0xb4>)
   15d70:	0019      	movs	r1, r3
   15d72:	2001      	movs	r0, #1
   15d74:	4b0b      	ldr	r3, [pc, #44]	; (15da4 <configure_mqtt+0xa8>)
   15d76:	4798      	blx	r3
        while (1) {
   15d78:	e7fe      	b.n	15d78 <configure_mqtt+0x7c>
        }
    }
}
   15d7a:	46c0      	nop			; (mov r8, r8)
   15d7c:	46bd      	mov	sp, r7
   15d7e:	b008      	add	sp, #32
   15d80:	bd80      	pop	{r7, pc}
   15d82:	46c0      	nop			; (mov r8, r8)
   15d84:	0002e8e9 	.word	0x0002e8e9
   15d88:	2000089c 	.word	0x2000089c
   15d8c:	20000a9c 	.word	0x20000a9c
   15d90:	0000075b 	.word	0x0000075b
   15d94:	00001770 	.word	0x00001770
   15d98:	20000864 	.word	0x20000864
   15d9c:	0002e839 	.word	0x0002e839
   15da0:	00036574 	.word	0x00036574
   15da4:	0001ce91 	.word	0x0001ce91
   15da8:	00015bed 	.word	0x00015bed
   15dac:	0002e929 	.word	0x0002e929
   15db0:	000365a8 	.word	0x000365a8

00015db4 <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   15db4:	b580      	push	{r7, lr}
   15db6:	b084      	sub	sp, #16
   15db8:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   15dba:	1d3b      	adds	r3, r7, #4
   15dbc:	0018      	movs	r0, r3
   15dbe:	4b0b      	ldr	r3, [pc, #44]	; (15dec <configure_extint_channel+0x38>)
   15dc0:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   15dc2:	1d3b      	adds	r3, r7, #4
   15dc4:	2237      	movs	r2, #55	; 0x37
   15dc6:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   15dc8:	1d3b      	adds	r3, r7, #4
   15dca:	2200      	movs	r2, #0
   15dcc:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   15dce:	1d3b      	adds	r3, r7, #4
   15dd0:	2201      	movs	r2, #1
   15dd2:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   15dd4:	1d3b      	adds	r3, r7, #4
   15dd6:	2202      	movs	r2, #2
   15dd8:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   15dda:	1d3b      	adds	r3, r7, #4
   15ddc:	0019      	movs	r1, r3
   15dde:	2007      	movs	r0, #7
   15de0:	4b03      	ldr	r3, [pc, #12]	; (15df0 <configure_extint_channel+0x3c>)
   15de2:	4798      	blx	r3
}
   15de4:	46c0      	nop			; (mov r8, r8)
   15de6:	46bd      	mov	sp, r7
   15de8:	b004      	add	sp, #16
   15dea:	bd80      	pop	{r7, pc}
   15dec:	000258f5 	.word	0x000258f5
   15df0:	00025929 	.word	0x00025929

00015df4 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   15df4:	b580      	push	{r7, lr}
   15df6:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   15df8:	4b06      	ldr	r3, [pc, #24]	; (15e14 <configure_extint_callbacks+0x20>)
   15dfa:	2200      	movs	r2, #0
   15dfc:	2107      	movs	r1, #7
   15dfe:	0018      	movs	r0, r3
   15e00:	4b05      	ldr	r3, [pc, #20]	; (15e18 <configure_extint_callbacks+0x24>)
   15e02:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   15e04:	2100      	movs	r1, #0
   15e06:	2007      	movs	r0, #7
   15e08:	4b04      	ldr	r3, [pc, #16]	; (15e1c <configure_extint_callbacks+0x28>)
   15e0a:	4798      	blx	r3
}
   15e0c:	46c0      	nop			; (mov r8, r8)
   15e0e:	46bd      	mov	sp, r7
   15e10:	bd80      	pop	{r7, pc}
   15e12:	46c0      	nop			; (mov r8, r8)
   15e14:	00015e21 	.word	0x00015e21
   15e18:	000254f5 	.word	0x000254f5
   15e1c:	00025559 	.word	0x00025559

00015e20 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   15e20:	b5b0      	push	{r4, r5, r7, lr}
   15e22:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
   15e24:	4b0c      	ldr	r3, [pc, #48]	; (15e58 <extint_detection_callback+0x38>)
   15e26:	681b      	ldr	r3, [r3, #0]
   15e28:	1c5a      	adds	r2, r3, #1
   15e2a:	4b0b      	ldr	r3, [pc, #44]	; (15e58 <extint_detection_callback+0x38>)
   15e2c:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
   15e2e:	4b0a      	ldr	r3, [pc, #40]	; (15e58 <extint_detection_callback+0x38>)
   15e30:	681b      	ldr	r3, [r3, #0]
   15e32:	2b28      	cmp	r3, #40	; 0x28
   15e34:	d902      	bls.n	15e3c <extint_detection_callback+0x1c>
   15e36:	4b08      	ldr	r3, [pc, #32]	; (15e58 <extint_detection_callback+0x38>)
   15e38:	2201      	movs	r2, #1
   15e3a:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
   15e3c:	4b06      	ldr	r3, [pc, #24]	; (15e58 <extint_detection_callback+0x38>)
   15e3e:	681b      	ldr	r3, [r3, #0]
   15e40:	4a06      	ldr	r2, [pc, #24]	; (15e5c <extint_detection_callback+0x3c>)
   15e42:	4807      	ldr	r0, [pc, #28]	; (15e60 <extint_detection_callback+0x40>)
   15e44:	213f      	movs	r1, #63	; 0x3f
   15e46:	4c07      	ldr	r4, [pc, #28]	; (15e64 <extint_detection_callback+0x44>)
   15e48:	47a0      	blx	r4
    isPressed = true;
   15e4a:	4b07      	ldr	r3, [pc, #28]	; (15e68 <extint_detection_callback+0x48>)
   15e4c:	2201      	movs	r2, #1
   15e4e:	701a      	strb	r2, [r3, #0]
    //Published in the Wifi thread main loop
}
   15e50:	46c0      	nop			; (mov r8, r8)
   15e52:	46bd      	mov	sp, r7
   15e54:	bdb0      	pop	{r4, r5, r7, pc}
   15e56:	46c0      	nop			; (mov r8, r8)
   15e58:	200000a0 	.word	0x200000a0
   15e5c:	000365dc 	.word	0x000365dc
   15e60:	20000060 	.word	0x20000060
   15e64:	000347d9 	.word	0x000347d9
   15e68:	20000c9c 	.word	0x20000c9c

00015e6c <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   15e6c:	b580      	push	{r7, lr}
   15e6e:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   15e70:	4a15      	ldr	r2, [pc, #84]	; (15ec8 <HTTP_DownloadFileInit+0x5c>)
   15e72:	4b16      	ldr	r3, [pc, #88]	; (15ecc <HTTP_DownloadFileInit+0x60>)
   15e74:	0011      	movs	r1, r2
   15e76:	0018      	movs	r0, r3
   15e78:	4b15      	ldr	r3, [pc, #84]	; (15ed0 <HTTP_DownloadFileInit+0x64>)
   15e7a:	4798      	blx	r3
   15e7c:	1e03      	subs	r3, r0, #0
   15e7e:	d008      	beq.n	15e92 <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   15e80:	4b14      	ldr	r3, [pc, #80]	; (15ed4 <HTTP_DownloadFileInit+0x68>)
   15e82:	0019      	movs	r1, r3
   15e84:	2001      	movs	r0, #1
   15e86:	4b14      	ldr	r3, [pc, #80]	; (15ed8 <HTTP_DownloadFileInit+0x6c>)
   15e88:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   15e8a:	e002      	b.n	15e92 <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   15e8c:	2000      	movs	r0, #0
   15e8e:	4b13      	ldr	r3, [pc, #76]	; (15edc <HTTP_DownloadFileInit+0x70>)
   15e90:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   15e92:	4b0e      	ldr	r3, [pc, #56]	; (15ecc <HTTP_DownloadFileInit+0x60>)
   15e94:	2234      	movs	r2, #52	; 0x34
   15e96:	5c9b      	ldrb	r3, [r3, r2]
   15e98:	2b00      	cmp	r3, #0
   15e9a:	d1f7      	bne.n	15e8c <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   15e9c:	4b10      	ldr	r3, [pc, #64]	; (15ee0 <HTTP_DownloadFileInit+0x74>)
   15e9e:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   15ea0:	4b10      	ldr	r3, [pc, #64]	; (15ee4 <HTTP_DownloadFileInit+0x78>)
   15ea2:	2201      	movs	r2, #1
   15ea4:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   15ea6:	4a10      	ldr	r2, [pc, #64]	; (15ee8 <HTTP_DownloadFileInit+0x7c>)
   15ea8:	4b10      	ldr	r3, [pc, #64]	; (15eec <HTTP_DownloadFileInit+0x80>)
   15eaa:	0011      	movs	r1, r2
   15eac:	0018      	movs	r0, r3
   15eae:	4b10      	ldr	r3, [pc, #64]	; (15ef0 <HTTP_DownloadFileInit+0x84>)
   15eb0:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   15eb2:	4b10      	ldr	r3, [pc, #64]	; (15ef4 <HTTP_DownloadFileInit+0x88>)
   15eb4:	4798      	blx	r3

    start_download();
   15eb6:	4b10      	ldr	r3, [pc, #64]	; (15ef8 <HTTP_DownloadFileInit+0x8c>)
   15eb8:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   15eba:	4b10      	ldr	r3, [pc, #64]	; (15efc <HTTP_DownloadFileInit+0x90>)
   15ebc:	2203      	movs	r2, #3
   15ebe:	701a      	strb	r2, [r3, #0]
}
   15ec0:	46c0      	nop			; (mov r8, r8)
   15ec2:	46bd      	mov	sp, r7
   15ec4:	bd80      	pop	{r7, pc}
   15ec6:	46c0      	nop			; (mov r8, r8)
   15ec8:	00035ea4 	.word	0x00035ea4
   15ecc:	20000864 	.word	0x20000864
   15ed0:	0002eadd 	.word	0x0002eadd
   15ed4:	0003629c 	.word	0x0003629c
   15ed8:	0001ce91 	.word	0x0001ce91
   15edc:	00020fe5 	.word	0x00020fe5
   15ee0:	000245a1 	.word	0x000245a1
   15ee4:	20000604 	.word	0x20000604
   15ee8:	00015791 	.word	0x00015791
   15eec:	0001575d 	.word	0x0001575d
   15ef0:	000245e9 	.word	0x000245e9
   15ef4:	00024551 	.word	0x00024551
   15ef8:	00015385 	.word	0x00015385
   15efc:	200005f5 	.word	0x200005f5

00015f00 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   15f00:	b590      	push	{r4, r7, lr}
   15f02:	b085      	sub	sp, #20
   15f04:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   15f06:	e009      	b.n	15f1c <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   15f08:	2000      	movs	r0, #0
   15f0a:	4b30      	ldr	r3, [pc, #192]	; (15fcc <HTTP_DownloadFileTransaction+0xcc>)
   15f0c:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   15f0e:	4b30      	ldr	r3, [pc, #192]	; (15fd0 <HTTP_DownloadFileTransaction+0xd0>)
   15f10:	0018      	movs	r0, r3
   15f12:	4b30      	ldr	r3, [pc, #192]	; (15fd4 <HTTP_DownloadFileTransaction+0xd4>)
   15f14:	4798      	blx	r3
        vTaskDelay(5);
   15f16:	2005      	movs	r0, #5
   15f18:	4b2f      	ldr	r3, [pc, #188]	; (15fd8 <HTTP_DownloadFileTransaction+0xd8>)
   15f1a:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   15f1c:	2010      	movs	r0, #16
   15f1e:	4b2f      	ldr	r3, [pc, #188]	; (15fdc <HTTP_DownloadFileTransaction+0xdc>)
   15f20:	4798      	blx	r3
   15f22:	0003      	movs	r3, r0
   15f24:	001a      	movs	r2, r3
   15f26:	2301      	movs	r3, #1
   15f28:	4053      	eors	r3, r2
   15f2a:	b2db      	uxtb	r3, r3
   15f2c:	2b00      	cmp	r3, #0
   15f2e:	d009      	beq.n	15f44 <HTTP_DownloadFileTransaction+0x44>
   15f30:	2020      	movs	r0, #32
   15f32:	4b2a      	ldr	r3, [pc, #168]	; (15fdc <HTTP_DownloadFileTransaction+0xdc>)
   15f34:	4798      	blx	r3
   15f36:	0003      	movs	r3, r0
   15f38:	001a      	movs	r2, r3
   15f3a:	2301      	movs	r3, #1
   15f3c:	4053      	eors	r3, r2
   15f3e:	b2db      	uxtb	r3, r3
   15f40:	2b00      	cmp	r3, #0
   15f42:	d1e1      	bne.n	15f08 <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   15f44:	4b26      	ldr	r3, [pc, #152]	; (15fe0 <HTTP_DownloadFileTransaction+0xe0>)
   15f46:	4798      	blx	r3
    vTaskDelay(1000);
   15f48:	23fa      	movs	r3, #250	; 0xfa
   15f4a:	009b      	lsls	r3, r3, #2
   15f4c:	0018      	movs	r0, r3
   15f4e:	4b22      	ldr	r3, [pc, #136]	; (15fd8 <HTTP_DownloadFileTransaction+0xd8>)
   15f50:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   15f52:	4b24      	ldr	r3, [pc, #144]	; (15fe4 <HTTP_DownloadFileTransaction+0xe4>)
   15f54:	2200      	movs	r2, #0
   15f56:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
   15f58:	003b      	movs	r3, r7
   15f5a:	4a23      	ldr	r2, [pc, #140]	; (15fe8 <HTTP_DownloadFileTransaction+0xe8>)
   15f5c:	ca13      	ldmia	r2!, {r0, r1, r4}
   15f5e:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   15f60:	003b      	movs	r3, r7
   15f62:	2230      	movs	r2, #48	; 0x30
   15f64:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   15f66:	230f      	movs	r3, #15
   15f68:	18fc      	adds	r4, r7, r3
   15f6a:	0039      	movs	r1, r7
   15f6c:	4b1f      	ldr	r3, [pc, #124]	; (15fec <HTTP_DownloadFileTransaction+0xec>)
   15f6e:	220a      	movs	r2, #10
   15f70:	0018      	movs	r0, r3
   15f72:	4b1f      	ldr	r3, [pc, #124]	; (15ff0 <HTTP_DownloadFileTransaction+0xf0>)
   15f74:	4798      	blx	r3
   15f76:	0003      	movs	r3, r0
   15f78:	7023      	strb	r3, [r4, #0]
    res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   15f7a:	230f      	movs	r3, #15
   15f7c:	18fc      	adds	r4, r7, r3
   15f7e:	0039      	movs	r1, r7
   15f80:	4b1a      	ldr	r3, [pc, #104]	; (15fec <HTTP_DownloadFileTransaction+0xec>)
   15f82:	220a      	movs	r2, #10
   15f84:	0018      	movs	r0, r3
   15f86:	4b1a      	ldr	r3, [pc, #104]	; (15ff0 <HTTP_DownloadFileTransaction+0xf0>)
   15f88:	4798      	blx	r3
   15f8a:	0003      	movs	r3, r0
   15f8c:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
   15f8e:	230f      	movs	r3, #15
   15f90:	18fb      	adds	r3, r7, r3
   15f92:	781b      	ldrb	r3, [r3, #0]
   15f94:	2b00      	cmp	r3, #0
   15f96:	d008      	beq.n	15faa <HTTP_DownloadFileTransaction+0xaa>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   15f98:	230f      	movs	r3, #15
   15f9a:	18fb      	adds	r3, r7, r3
   15f9c:	781a      	ldrb	r2, [r3, #0]
   15f9e:	4b15      	ldr	r3, [pc, #84]	; (15ff4 <HTTP_DownloadFileTransaction+0xf4>)
   15fa0:	0019      	movs	r1, r3
   15fa2:	2000      	movs	r0, #0
   15fa4:	4b14      	ldr	r3, [pc, #80]	; (15ff8 <HTTP_DownloadFileTransaction+0xf8>)
   15fa6:	4798      	blx	r3
   15fa8:	e003      	b.n	15fb2 <HTTP_DownloadFileTransaction+0xb2>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
   15faa:	4b14      	ldr	r3, [pc, #80]	; (15ffc <HTTP_DownloadFileTransaction+0xfc>)
   15fac:	0018      	movs	r0, r3
   15fae:	4b14      	ldr	r3, [pc, #80]	; (16000 <HTTP_DownloadFileTransaction+0x100>)
   15fb0:	4798      	blx	r3
    }
    vTaskDelay(100);
   15fb2:	2064      	movs	r0, #100	; 0x64
   15fb4:	4b08      	ldr	r3, [pc, #32]	; (15fd8 <HTTP_DownloadFileTransaction+0xd8>)
   15fb6:	4798      	blx	r3
    system_reset();
   15fb8:	4b12      	ldr	r3, [pc, #72]	; (16004 <HTTP_DownloadFileTransaction+0x104>)
   15fba:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
   15fbc:	4b12      	ldr	r3, [pc, #72]	; (16008 <HTTP_DownloadFileTransaction+0x108>)
   15fbe:	2200      	movs	r2, #0
   15fc0:	701a      	strb	r2, [r3, #0]
}
   15fc2:	46c0      	nop			; (mov r8, r8)
   15fc4:	46bd      	mov	sp, r7
   15fc6:	b005      	add	sp, #20
   15fc8:	bd90      	pop	{r4, r7, pc}
   15fca:	46c0      	nop			; (mov r8, r8)
   15fcc:	00020fe5 	.word	0x00020fe5
   15fd0:	20004874 	.word	0x20004874
   15fd4:	00031805 	.word	0x00031805
   15fd8:	0001b151 	.word	0x0001b151
   15fdc:	0001505d 	.word	0x0001505d
   15fe0:	000245a1 	.word	0x000245a1
   15fe4:	20000604 	.word	0x20000604
   15fe8:	00036614 	.word	0x00036614
   15fec:	20000838 	.word	0x20000838
   15ff0:	0002cacd 	.word	0x0002cacd
   15ff4:	000365f0 	.word	0x000365f0
   15ff8:	0001ce91 	.word	0x0001ce91
   15ffc:	00036600 	.word	0x00036600
   16000:	0001cda5 	.word	0x0001cda5
   16004:	00014f61 	.word	0x00014f61
   16008:	200005f5 	.word	0x200005f5

0001600c <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   1600c:	b580      	push	{r7, lr}
   1600e:	af00      	add	r7, sp, #0
    socketDeinit();
   16010:	4b18      	ldr	r3, [pc, #96]	; (16074 <MQTT_InitRoutine+0x68>)
   16012:	4798      	blx	r3
    configure_mqtt();
   16014:	4b18      	ldr	r3, [pc, #96]	; (16078 <MQTT_InitRoutine+0x6c>)
   16016:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   16018:	4a18      	ldr	r2, [pc, #96]	; (1607c <MQTT_InitRoutine+0x70>)
   1601a:	4b19      	ldr	r3, [pc, #100]	; (16080 <MQTT_InitRoutine+0x74>)
   1601c:	0011      	movs	r1, r2
   1601e:	0018      	movs	r0, r3
   16020:	4b18      	ldr	r3, [pc, #96]	; (16084 <MQTT_InitRoutine+0x78>)
   16022:	4798      	blx	r3
    socketInit();
   16024:	4b18      	ldr	r3, [pc, #96]	; (16088 <MQTT_InitRoutine+0x7c>)
   16026:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   16028:	4b18      	ldr	r3, [pc, #96]	; (1608c <MQTT_InitRoutine+0x80>)
   1602a:	2234      	movs	r2, #52	; 0x34
   1602c:	5c9b      	ldrb	r3, [r3, r2]
   1602e:	2201      	movs	r2, #1
   16030:	4053      	eors	r3, r2
   16032:	b2db      	uxtb	r3, r3
   16034:	2b00      	cmp	r3, #0
   16036:	d00c      	beq.n	16052 <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   16038:	4a15      	ldr	r2, [pc, #84]	; (16090 <MQTT_InitRoutine+0x84>)
   1603a:	4b14      	ldr	r3, [pc, #80]	; (1608c <MQTT_InitRoutine+0x80>)
   1603c:	0011      	movs	r1, r2
   1603e:	0018      	movs	r0, r3
   16040:	4b14      	ldr	r3, [pc, #80]	; (16094 <MQTT_InitRoutine+0x88>)
   16042:	4798      	blx	r3
   16044:	1e03      	subs	r3, r0, #0
   16046:	d004      	beq.n	16052 <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   16048:	4b13      	ldr	r3, [pc, #76]	; (16098 <MQTT_InitRoutine+0x8c>)
   1604a:	0019      	movs	r1, r3
   1604c:	2001      	movs	r0, #1
   1604e:	4b13      	ldr	r3, [pc, #76]	; (1609c <MQTT_InitRoutine+0x90>)
   16050:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   16052:	4b0e      	ldr	r3, [pc, #56]	; (1608c <MQTT_InitRoutine+0x80>)
   16054:	2234      	movs	r2, #52	; 0x34
   16056:	5c9b      	ldrb	r3, [r3, r2]
   16058:	2b00      	cmp	r3, #0
   1605a:	d004      	beq.n	16066 <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
   1605c:	4b10      	ldr	r3, [pc, #64]	; (160a0 <MQTT_InitRoutine+0x94>)
   1605e:	0019      	movs	r1, r3
   16060:	2001      	movs	r0, #1
   16062:	4b0e      	ldr	r3, [pc, #56]	; (1609c <MQTT_InitRoutine+0x90>)
   16064:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   16066:	4b0f      	ldr	r3, [pc, #60]	; (160a4 <MQTT_InitRoutine+0x98>)
   16068:	2201      	movs	r2, #1
   1606a:	701a      	strb	r2, [r3, #0]
}
   1606c:	46c0      	nop			; (mov r8, r8)
   1606e:	46bd      	mov	sp, r7
   16070:	bd80      	pop	{r7, pc}
   16072:	46c0      	nop			; (mov r8, r8)
   16074:	000245a1 	.word	0x000245a1
   16078:	00015cfd 	.word	0x00015cfd
   1607c:	00015b0d 	.word	0x00015b0d
   16080:	00015ad9 	.word	0x00015ad9
   16084:	000245e9 	.word	0x000245e9
   16088:	00024551 	.word	0x00024551
   1608c:	20000864 	.word	0x20000864
   16090:	00035ea4 	.word	0x00035ea4
   16094:	0002e9a9 	.word	0x0002e9a9
   16098:	0003629c 	.word	0x0003629c
   1609c:	0001ce91 	.word	0x0001ce91
   160a0:	00036620 	.word	0x00036620
   160a4:	200005f5 	.word	0x200005f5

000160a8 <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   160a8:	b580      	push	{r7, lr}
   160aa:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   160ac:	2000      	movs	r0, #0
   160ae:	4b0b      	ldr	r3, [pc, #44]	; (160dc <MQTT_HandleTransactions+0x34>)
   160b0:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   160b2:	4b0b      	ldr	r3, [pc, #44]	; (160e0 <MQTT_HandleTransactions+0x38>)
   160b4:	0018      	movs	r0, r3
   160b6:	4b0b      	ldr	r3, [pc, #44]	; (160e4 <MQTT_HandleTransactions+0x3c>)
   160b8:	4798      	blx	r3

    // Check if data has to be sent!
	MQTT_HandleTestMessages();
   160ba:	4b0b      	ldr	r3, [pc, #44]	; (160e8 <MQTT_HandleTransactions+0x40>)
   160bc:	4798      	blx	r3
	MQTT_HandleNauMessages();
   160be:	4b0b      	ldr	r3, [pc, #44]	; (160ec <MQTT_HandleTransactions+0x44>)
   160c0:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   160c2:	4b0b      	ldr	r3, [pc, #44]	; (160f0 <MQTT_HandleTransactions+0x48>)
   160c4:	2234      	movs	r2, #52	; 0x34
   160c6:	5c9b      	ldrb	r3, [r3, r2]
   160c8:	2b00      	cmp	r3, #0
   160ca:	d004      	beq.n	160d6 <MQTT_HandleTransactions+0x2e>
   160cc:	4b08      	ldr	r3, [pc, #32]	; (160f0 <MQTT_HandleTransactions+0x48>)
   160ce:	2164      	movs	r1, #100	; 0x64
   160d0:	0018      	movs	r0, r3
   160d2:	4b08      	ldr	r3, [pc, #32]	; (160f4 <MQTT_HandleTransactions+0x4c>)
   160d4:	4798      	blx	r3
}
   160d6:	46c0      	nop			; (mov r8, r8)
   160d8:	46bd      	mov	sp, r7
   160da:	bd80      	pop	{r7, pc}
   160dc:	00020fe5 	.word	0x00020fe5
   160e0:	20004874 	.word	0x20004874
   160e4:	00031805 	.word	0x00031805
   160e8:	000160f9 	.word	0x000160f9
   160ec:	0001616d 	.word	0x0001616d
   160f0:	20000864 	.word	0x20000864
   160f4:	0002ebd9 	.word	0x0002ebd9

000160f8 <MQTT_HandleTestMessages>:


static void MQTT_HandleTestMessages(void)
{
   160f8:	b590      	push	{r4, r7, lr}
   160fa:	b085      	sub	sp, #20
   160fc:	af02      	add	r7, sp, #8
	struct TestPacket TestDataVar;
	if (pdPASS == xQueueReceive(xQueueTestBuffer, &TestDataVar, 0)) {
   160fe:	4b12      	ldr	r3, [pc, #72]	; (16148 <MQTT_HandleTestMessages+0x50>)
   16100:	681b      	ldr	r3, [r3, #0]
   16102:	1d39      	adds	r1, r7, #4
   16104:	2200      	movs	r2, #0
   16106:	0018      	movs	r0, r3
   16108:	4b10      	ldr	r3, [pc, #64]	; (1614c <MQTT_HandleTestMessages+0x54>)
   1610a:	4798      	blx	r3
   1610c:	0003      	movs	r3, r0
   1610e:	2b01      	cmp	r3, #1
   16110:	d115      	bne.n	1613e <MQTT_HandleTestMessages+0x46>
		snprintf(mqtt_msg, 63, "{\"test\":%d }", TestDataVar.test);
   16112:	1d3b      	adds	r3, r7, #4
   16114:	781b      	ldrb	r3, [r3, #0]
   16116:	4a0e      	ldr	r2, [pc, #56]	; (16150 <MQTT_HandleTestMessages+0x58>)
   16118:	480e      	ldr	r0, [pc, #56]	; (16154 <MQTT_HandleTestMessages+0x5c>)
   1611a:	213f      	movs	r1, #63	; 0x3f
   1611c:	4c0e      	ldr	r4, [pc, #56]	; (16158 <MQTT_HandleTestMessages+0x60>)
   1611e:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, TEST_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   16120:	4b0c      	ldr	r3, [pc, #48]	; (16154 <MQTT_HandleTestMessages+0x5c>)
   16122:	0018      	movs	r0, r3
   16124:	4b0d      	ldr	r3, [pc, #52]	; (1615c <MQTT_HandleTestMessages+0x64>)
   16126:	4798      	blx	r3
   16128:	0004      	movs	r4, r0
   1612a:	4a0a      	ldr	r2, [pc, #40]	; (16154 <MQTT_HandleTestMessages+0x5c>)
   1612c:	490c      	ldr	r1, [pc, #48]	; (16160 <MQTT_HandleTestMessages+0x68>)
   1612e:	480d      	ldr	r0, [pc, #52]	; (16164 <MQTT_HandleTestMessages+0x6c>)
   16130:	2300      	movs	r3, #0
   16132:	9301      	str	r3, [sp, #4]
   16134:	2301      	movs	r3, #1
   16136:	9300      	str	r3, [sp, #0]
   16138:	0023      	movs	r3, r4
   1613a:	4c0b      	ldr	r4, [pc, #44]	; (16168 <MQTT_HandleTestMessages+0x70>)
   1613c:	47a0      	blx	r4
	}
}
   1613e:	46c0      	nop			; (mov r8, r8)
   16140:	46bd      	mov	sp, r7
   16142:	b003      	add	sp, #12
   16144:	bd90      	pop	{r4, r7, pc}
   16146:	46c0      	nop			; (mov r8, r8)
   16148:	200005fc 	.word	0x200005fc
   1614c:	00019fa5 	.word	0x00019fa5
   16150:	0003663c 	.word	0x0003663c
   16154:	20000020 	.word	0x20000020
   16158:	000347d9 	.word	0x000347d9
   1615c:	0003491b 	.word	0x0003491b
   16160:	0003664c 	.word	0x0003664c
   16164:	20000864 	.word	0x20000864
   16168:	0002eb25 	.word	0x0002eb25

0001616c <MQTT_HandleNauMessages>:

static void MQTT_HandleNauMessages(void)
{
   1616c:	b590      	push	{r4, r7, lr}
   1616e:	b085      	sub	sp, #20
   16170:	af02      	add	r7, sp, #8
	struct NauPacket NauDataVar;
	if (pdPASS == xQueueReceive(xQueueNauBuffer, &NauDataVar, 0)) {
   16172:	4b16      	ldr	r3, [pc, #88]	; (161cc <MQTT_HandleNauMessages+0x60>)
   16174:	681b      	ldr	r3, [r3, #0]
   16176:	1d39      	adds	r1, r7, #4
   16178:	2200      	movs	r2, #0
   1617a:	0018      	movs	r0, r3
   1617c:	4b14      	ldr	r3, [pc, #80]	; (161d0 <MQTT_HandleNauMessages+0x64>)
   1617e:	4798      	blx	r3
   16180:	0003      	movs	r3, r0
   16182:	2b01      	cmp	r3, #1
   16184:	d11e      	bne.n	161c4 <MQTT_HandleNauMessages+0x58>
		snprintf(mqtt_msg, 63, "{\"nau_i\":%d,  \"nau_f\": %d}", NauDataVar.nau_i, NauDataVar.nau_f);
   16186:	1d3b      	adds	r3, r7, #4
   16188:	881b      	ldrh	r3, [r3, #0]
   1618a:	0019      	movs	r1, r3
   1618c:	1d3b      	adds	r3, r7, #4
   1618e:	885b      	ldrh	r3, [r3, #2]
   16190:	4a10      	ldr	r2, [pc, #64]	; (161d4 <MQTT_HandleNauMessages+0x68>)
   16192:	4811      	ldr	r0, [pc, #68]	; (161d8 <MQTT_HandleNauMessages+0x6c>)
   16194:	9300      	str	r3, [sp, #0]
   16196:	000b      	movs	r3, r1
   16198:	213f      	movs	r1, #63	; 0x3f
   1619a:	4c10      	ldr	r4, [pc, #64]	; (161dc <MQTT_HandleNauMessages+0x70>)
   1619c:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, NAU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   1619e:	4b0e      	ldr	r3, [pc, #56]	; (161d8 <MQTT_HandleNauMessages+0x6c>)
   161a0:	0018      	movs	r0, r3
   161a2:	4b0f      	ldr	r3, [pc, #60]	; (161e0 <MQTT_HandleNauMessages+0x74>)
   161a4:	4798      	blx	r3
   161a6:	0004      	movs	r4, r0
   161a8:	4a0b      	ldr	r2, [pc, #44]	; (161d8 <MQTT_HandleNauMessages+0x6c>)
   161aa:	490e      	ldr	r1, [pc, #56]	; (161e4 <MQTT_HandleNauMessages+0x78>)
   161ac:	480e      	ldr	r0, [pc, #56]	; (161e8 <MQTT_HandleNauMessages+0x7c>)
   161ae:	2300      	movs	r3, #0
   161b0:	9301      	str	r3, [sp, #4]
   161b2:	2301      	movs	r3, #1
   161b4:	9300      	str	r3, [sp, #0]
   161b6:	0023      	movs	r3, r4
   161b8:	4c0c      	ldr	r4, [pc, #48]	; (161ec <MQTT_HandleNauMessages+0x80>)
   161ba:	47a0      	blx	r4
		SerialConsoleWriteString("NAU DATA POSTED");
   161bc:	4b0c      	ldr	r3, [pc, #48]	; (161f0 <MQTT_HandleNauMessages+0x84>)
   161be:	0018      	movs	r0, r3
   161c0:	4b0c      	ldr	r3, [pc, #48]	; (161f4 <MQTT_HandleNauMessages+0x88>)
   161c2:	4798      	blx	r3
	}
}
   161c4:	46c0      	nop			; (mov r8, r8)
   161c6:	46bd      	mov	sp, r7
   161c8:	b003      	add	sp, #12
   161ca:	bd90      	pop	{r4, r7, pc}
   161cc:	20000600 	.word	0x20000600
   161d0:	00019fa5 	.word	0x00019fa5
   161d4:	00036660 	.word	0x00036660
   161d8:	20000020 	.word	0x20000020
   161dc:	000347d9 	.word	0x000347d9
   161e0:	0003491b 	.word	0x0003491b
   161e4:	0003667c 	.word	0x0003667c
   161e8:	20000864 	.word	0x20000864
   161ec:	0002eb25 	.word	0x0002eb25
   161f0:	00036690 	.word	0x00036690
   161f4:	0001cda5 	.word	0x0001cda5

000161f8 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   161f8:	b590      	push	{r4, r7, lr}
   161fa:	b08d      	sub	sp, #52	; 0x34
   161fc:	af02      	add	r7, sp, #8
   161fe:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   16200:	2064      	movs	r0, #100	; 0x64
   16202:	4b73      	ldr	r3, [pc, #460]	; (163d0 <vWifiTask+0x1d8>)
   16204:	4798      	blx	r3
    init_state();
   16206:	4b73      	ldr	r3, [pc, #460]	; (163d4 <vWifiTask+0x1dc>)
   16208:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   1620a:	2200      	movs	r2, #0
   1620c:	2104      	movs	r1, #4
   1620e:	2005      	movs	r0, #5
   16210:	4b71      	ldr	r3, [pc, #452]	; (163d8 <vWifiTask+0x1e0>)
   16212:	4798      	blx	r3
   16214:	0002      	movs	r2, r0
   16216:	4b71      	ldr	r3, [pc, #452]	; (163dc <vWifiTask+0x1e4>)
   16218:	601a      	str	r2, [r3, #0]
	xQueueTestBuffer = xQueueCreate(5, sizeof(struct TestPacket));
   1621a:	2200      	movs	r2, #0
   1621c:	2101      	movs	r1, #1
   1621e:	2005      	movs	r0, #5
   16220:	4b6d      	ldr	r3, [pc, #436]	; (163d8 <vWifiTask+0x1e0>)
   16222:	4798      	blx	r3
   16224:	0002      	movs	r2, r0
   16226:	4b6e      	ldr	r3, [pc, #440]	; (163e0 <vWifiTask+0x1e8>)
   16228:	601a      	str	r2, [r3, #0]
	xQueueNauBuffer = xQueueCreate(5, sizeof(struct NauPacket));
   1622a:	2200      	movs	r2, #0
   1622c:	2104      	movs	r1, #4
   1622e:	2005      	movs	r0, #5
   16230:	4b69      	ldr	r3, [pc, #420]	; (163d8 <vWifiTask+0x1e0>)
   16232:	4798      	blx	r3
   16234:	0002      	movs	r2, r0
   16236:	4b6b      	ldr	r3, [pc, #428]	; (163e4 <vWifiTask+0x1ec>)
   16238:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueTestBuffer == NULL || xQueueNauBuffer == NULL) {
   1623a:	4b68      	ldr	r3, [pc, #416]	; (163dc <vWifiTask+0x1e4>)
   1623c:	681b      	ldr	r3, [r3, #0]
   1623e:	2b00      	cmp	r3, #0
   16240:	d007      	beq.n	16252 <vWifiTask+0x5a>
   16242:	4b67      	ldr	r3, [pc, #412]	; (163e0 <vWifiTask+0x1e8>)
   16244:	681b      	ldr	r3, [r3, #0]
   16246:	2b00      	cmp	r3, #0
   16248:	d003      	beq.n	16252 <vWifiTask+0x5a>
   1624a:	4b66      	ldr	r3, [pc, #408]	; (163e4 <vWifiTask+0x1ec>)
   1624c:	681b      	ldr	r3, [r3, #0]
   1624e:	2b00      	cmp	r3, #0
   16250:	d103      	bne.n	1625a <vWifiTask+0x62>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   16252:	4b65      	ldr	r3, [pc, #404]	; (163e8 <vWifiTask+0x1f0>)
   16254:	0018      	movs	r0, r3
   16256:	4b65      	ldr	r3, [pc, #404]	; (163ec <vWifiTask+0x1f4>)
   16258:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   1625a:	4b65      	ldr	r3, [pc, #404]	; (163f0 <vWifiTask+0x1f8>)
   1625c:	0018      	movs	r0, r3
   1625e:	4b63      	ldr	r3, [pc, #396]	; (163ec <vWifiTask+0x1f4>)
   16260:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   16262:	4b64      	ldr	r3, [pc, #400]	; (163f4 <vWifiTask+0x1fc>)
   16264:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   16266:	4b64      	ldr	r3, [pc, #400]	; (163f8 <vWifiTask+0x200>)
   16268:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   1626a:	4b64      	ldr	r3, [pc, #400]	; (163fc <vWifiTask+0x204>)
   1626c:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
   1626e:	4b64      	ldr	r3, [pc, #400]	; (16400 <vWifiTask+0x208>)
   16270:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   16272:	4b64      	ldr	r3, [pc, #400]	; (16404 <vWifiTask+0x20c>)
   16274:	4798      	blx	r3
    configure_extint_callbacks();
   16276:	4b64      	ldr	r3, [pc, #400]	; (16408 <vWifiTask+0x210>)
   16278:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   1627a:	230c      	movs	r3, #12
   1627c:	18fb      	adds	r3, r7, r3
   1627e:	2218      	movs	r2, #24
   16280:	2100      	movs	r1, #0
   16282:	0018      	movs	r0, r3
   16284:	4b61      	ldr	r3, [pc, #388]	; (1640c <vWifiTask+0x214>)
   16286:	4798      	blx	r3

    nm_bsp_init();
   16288:	4b61      	ldr	r3, [pc, #388]	; (16410 <vWifiTask+0x218>)
   1628a:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   1628c:	230c      	movs	r3, #12
   1628e:	18fb      	adds	r3, r7, r3
   16290:	4a60      	ldr	r2, [pc, #384]	; (16414 <vWifiTask+0x21c>)
   16292:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   16294:	2327      	movs	r3, #39	; 0x27
   16296:	18fc      	adds	r4, r7, r3
   16298:	230c      	movs	r3, #12
   1629a:	18fb      	adds	r3, r7, r3
   1629c:	0018      	movs	r0, r3
   1629e:	4b5e      	ldr	r3, [pc, #376]	; (16418 <vWifiTask+0x220>)
   162a0:	4798      	blx	r3
   162a2:	0003      	movs	r3, r0
   162a4:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   162a6:	2327      	movs	r3, #39	; 0x27
   162a8:	18fb      	adds	r3, r7, r3
   162aa:	781b      	ldrb	r3, [r3, #0]
   162ac:	b25b      	sxtb	r3, r3
   162ae:	2b00      	cmp	r3, #0
   162b0:	d009      	beq.n	162c6 <vWifiTask+0xce>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   162b2:	2327      	movs	r3, #39	; 0x27
   162b4:	18fb      	adds	r3, r7, r3
   162b6:	2200      	movs	r2, #0
   162b8:	569a      	ldrsb	r2, [r3, r2]
   162ba:	4b58      	ldr	r3, [pc, #352]	; (1641c <vWifiTask+0x224>)
   162bc:	0019      	movs	r1, r3
   162be:	2001      	movs	r0, #1
   162c0:	4b57      	ldr	r3, [pc, #348]	; (16420 <vWifiTask+0x228>)
   162c2:	4798      	blx	r3
        while (1) {
   162c4:	e7fe      	b.n	162c4 <vWifiTask+0xcc>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   162c6:	4a57      	ldr	r2, [pc, #348]	; (16424 <vWifiTask+0x22c>)
   162c8:	4b57      	ldr	r3, [pc, #348]	; (16428 <vWifiTask+0x230>)
   162ca:	0019      	movs	r1, r3
   162cc:	2001      	movs	r0, #1
   162ce:	4b54      	ldr	r3, [pc, #336]	; (16420 <vWifiTask+0x228>)
   162d0:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   162d2:	4b56      	ldr	r3, [pc, #344]	; (1642c <vWifiTask+0x234>)
   162d4:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   162d6:	4a56      	ldr	r2, [pc, #344]	; (16430 <vWifiTask+0x238>)
   162d8:	4b56      	ldr	r3, [pc, #344]	; (16434 <vWifiTask+0x23c>)
   162da:	0011      	movs	r1, r2
   162dc:	0018      	movs	r0, r3
   162de:	4b56      	ldr	r3, [pc, #344]	; (16438 <vWifiTask+0x240>)
   162e0:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   162e2:	4a56      	ldr	r2, [pc, #344]	; (1643c <vWifiTask+0x244>)
   162e4:	484f      	ldr	r0, [pc, #316]	; (16424 <vWifiTask+0x22c>)
   162e6:	23ff      	movs	r3, #255	; 0xff
   162e8:	9300      	str	r3, [sp, #0]
   162ea:	0013      	movs	r3, r2
   162ec:	2202      	movs	r2, #2
   162ee:	2102      	movs	r1, #2
   162f0:	4c53      	ldr	r4, [pc, #332]	; (16440 <vWifiTask+0x248>)
   162f2:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   162f4:	e006      	b.n	16304 <vWifiTask+0x10c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   162f6:	2000      	movs	r0, #0
   162f8:	4b52      	ldr	r3, [pc, #328]	; (16444 <vWifiTask+0x24c>)
   162fa:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   162fc:	4b52      	ldr	r3, [pc, #328]	; (16448 <vWifiTask+0x250>)
   162fe:	0018      	movs	r0, r3
   16300:	4b52      	ldr	r3, [pc, #328]	; (1644c <vWifiTask+0x254>)
   16302:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   16304:	2002      	movs	r0, #2
   16306:	4b52      	ldr	r3, [pc, #328]	; (16450 <vWifiTask+0x258>)
   16308:	4798      	blx	r3
   1630a:	0003      	movs	r3, r0
   1630c:	001a      	movs	r2, r3
   1630e:	2301      	movs	r3, #1
   16310:	4053      	eors	r3, r2
   16312:	b2db      	uxtb	r3, r3
   16314:	2b00      	cmp	r3, #0
   16316:	d1ee      	bne.n	162f6 <vWifiTask+0xfe>
    }

    vTaskDelay(1000);
   16318:	23fa      	movs	r3, #250	; 0xfa
   1631a:	009b      	lsls	r3, r3, #2
   1631c:	0018      	movs	r0, r3
   1631e:	4b2c      	ldr	r3, [pc, #176]	; (163d0 <vWifiTask+0x1d8>)
   16320:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   16322:	4b4c      	ldr	r3, [pc, #304]	; (16454 <vWifiTask+0x25c>)
   16324:	2201      	movs	r2, #1
   16326:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
   16328:	4b4a      	ldr	r3, [pc, #296]	; (16454 <vWifiTask+0x25c>)
   1632a:	781b      	ldrb	r3, [r3, #0]
   1632c:	b25b      	sxtb	r3, r3
   1632e:	2b01      	cmp	r3, #1
   16330:	d00b      	beq.n	1634a <vWifiTask+0x152>
   16332:	dc02      	bgt.n	1633a <vWifiTask+0x142>
   16334:	2b00      	cmp	r3, #0
   16336:	d005      	beq.n	16344 <vWifiTask+0x14c>
   16338:	e010      	b.n	1635c <vWifiTask+0x164>
   1633a:	2b02      	cmp	r3, #2
   1633c:	d008      	beq.n	16350 <vWifiTask+0x158>
   1633e:	2b03      	cmp	r3, #3
   16340:	d009      	beq.n	16356 <vWifiTask+0x15e>
   16342:	e00b      	b.n	1635c <vWifiTask+0x164>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   16344:	4b44      	ldr	r3, [pc, #272]	; (16458 <vWifiTask+0x260>)
   16346:	4798      	blx	r3

                break;
   16348:	e00c      	b.n	16364 <vWifiTask+0x16c>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   1634a:	4b44      	ldr	r3, [pc, #272]	; (1645c <vWifiTask+0x264>)
   1634c:	4798      	blx	r3
                break;
   1634e:	e009      	b.n	16364 <vWifiTask+0x16c>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   16350:	4b43      	ldr	r3, [pc, #268]	; (16460 <vWifiTask+0x268>)
   16352:	4798      	blx	r3
                break;
   16354:	e006      	b.n	16364 <vWifiTask+0x16c>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   16356:	4b43      	ldr	r3, [pc, #268]	; (16464 <vWifiTask+0x26c>)
   16358:	4798      	blx	r3
                break;
   1635a:	e003      	b.n	16364 <vWifiTask+0x16c>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   1635c:	4b3d      	ldr	r3, [pc, #244]	; (16454 <vWifiTask+0x25c>)
   1635e:	2200      	movs	r2, #0
   16360:	701a      	strb	r2, [r3, #0]
                break;
   16362:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   16364:	230b      	movs	r3, #11
   16366:	18fb      	adds	r3, r7, r3
   16368:	2200      	movs	r2, #0
   1636a:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   1636c:	4b1b      	ldr	r3, [pc, #108]	; (163dc <vWifiTask+0x1e4>)
   1636e:	681b      	ldr	r3, [r3, #0]
   16370:	220b      	movs	r2, #11
   16372:	18b9      	adds	r1, r7, r2
   16374:	2200      	movs	r2, #0
   16376:	0018      	movs	r0, r3
   16378:	4b3b      	ldr	r3, [pc, #236]	; (16468 <vWifiTask+0x270>)
   1637a:	4798      	blx	r3
   1637c:	0003      	movs	r3, r0
   1637e:	2b01      	cmp	r3, #1
   16380:	d105      	bne.n	1638e <vWifiTask+0x196>
            wifiStateMachine = DataToReceive;  // Update new state
   16382:	230b      	movs	r3, #11
   16384:	18fb      	adds	r3, r7, r3
   16386:	781b      	ldrb	r3, [r3, #0]
   16388:	b25a      	sxtb	r2, r3
   1638a:	4b32      	ldr	r3, [pc, #200]	; (16454 <vWifiTask+0x25c>)
   1638c:	701a      	strb	r2, [r3, #0]
        }

        //Check if we need to publis something. In this example, we publish the "temperature" when the button was pressed.
        if(isPressed)
   1638e:	4b37      	ldr	r3, [pc, #220]	; (1646c <vWifiTask+0x274>)
   16390:	781b      	ldrb	r3, [r3, #0]
   16392:	b2db      	uxtb	r3, r3
   16394:	2b00      	cmp	r3, #0
   16396:	d017      	beq.n	163c8 <vWifiTask+0x1d0>
        {
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
   16398:	4b35      	ldr	r3, [pc, #212]	; (16470 <vWifiTask+0x278>)
   1639a:	0018      	movs	r0, r3
   1639c:	4b35      	ldr	r3, [pc, #212]	; (16474 <vWifiTask+0x27c>)
   1639e:	4798      	blx	r3
   163a0:	0004      	movs	r4, r0
   163a2:	4a33      	ldr	r2, [pc, #204]	; (16470 <vWifiTask+0x278>)
   163a4:	4934      	ldr	r1, [pc, #208]	; (16478 <vWifiTask+0x280>)
   163a6:	4835      	ldr	r0, [pc, #212]	; (1647c <vWifiTask+0x284>)
   163a8:	2300      	movs	r3, #0
   163aa:	9301      	str	r3, [sp, #4]
   163ac:	2301      	movs	r3, #1
   163ae:	9300      	str	r3, [sp, #0]
   163b0:	0023      	movs	r3, r4
   163b2:	4c33      	ldr	r4, [pc, #204]	; (16480 <vWifiTask+0x288>)
   163b4:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
   163b6:	4a2e      	ldr	r2, [pc, #184]	; (16470 <vWifiTask+0x278>)
   163b8:	4b32      	ldr	r3, [pc, #200]	; (16484 <vWifiTask+0x28c>)
   163ba:	0019      	movs	r1, r3
   163bc:	2001      	movs	r0, #1
   163be:	4b18      	ldr	r3, [pc, #96]	; (16420 <vWifiTask+0x228>)
   163c0:	4798      	blx	r3
            isPressed = false;
   163c2:	4b2a      	ldr	r3, [pc, #168]	; (1646c <vWifiTask+0x274>)
   163c4:	2200      	movs	r2, #0
   163c6:	701a      	strb	r2, [r3, #0]

        }

        vTaskDelay(100);
   163c8:	2064      	movs	r0, #100	; 0x64
   163ca:	4b01      	ldr	r3, [pc, #4]	; (163d0 <vWifiTask+0x1d8>)
   163cc:	4798      	blx	r3
    while (1) {
   163ce:	e7ab      	b.n	16328 <vWifiTask+0x130>
   163d0:	0001b151 	.word	0x0001b151
   163d4:	00014fed 	.word	0x00014fed
   163d8:	00019445 	.word	0x00019445
   163dc:	200005f8 	.word	0x200005f8
   163e0:	200005fc 	.word	0x200005fc
   163e4:	20000600 	.word	0x20000600
   163e8:	000366a0 	.word	0x000366a0
   163ec:	0001cda5 	.word	0x0001cda5
   163f0:	000366c8 	.word	0x000366c8
   163f4:	00015a29 	.word	0x00015a29
   163f8:	00015a65 	.word	0x00015a65
   163fc:	00015cfd 	.word	0x00015cfd
   16400:	00015945 	.word	0x00015945
   16404:	00015db5 	.word	0x00015db5
   16408:	00015df5 	.word	0x00015df5
   1640c:	0003457f 	.word	0x0003457f
   16410:	0001f319 	.word	0x0001f319
   16414:	000157f1 	.word	0x000157f1
   16418:	00020df1 	.word	0x00020df1
   1641c:	000366e4 	.word	0x000366e4
   16420:	0001ce91 	.word	0x0001ce91
   16424:	00036270 	.word	0x00036270
   16428:	00036710 	.word	0x00036710
   1642c:	00024551 	.word	0x00024551
   16430:	00015b0d 	.word	0x00015b0d
   16434:	00015ad9 	.word	0x00015ad9
   16438:	000245e9 	.word	0x000245e9
   1643c:	00036264 	.word	0x00036264
   16440:	00021001 	.word	0x00021001
   16444:	00020fe5 	.word	0x00020fe5
   16448:	20004874 	.word	0x20004874
   1644c:	00031805 	.word	0x00031805
   16450:	0001505d 	.word	0x0001505d
   16454:	200005f5 	.word	0x200005f5
   16458:	0001600d 	.word	0x0001600d
   1645c:	000160a9 	.word	0x000160a9
   16460:	00015e6d 	.word	0x00015e6d
   16464:	00015f01 	.word	0x00015f01
   16468:	00019fa5 	.word	0x00019fa5
   1646c:	20000c9c 	.word	0x20000c9c
   16470:	20000060 	.word	0x20000060
   16474:	0003491b 	.word	0x0003491b
   16478:	00036734 	.word	0x00036734
   1647c:	20000864 	.word	0x20000864
   16480:	0002eb25 	.word	0x0002eb25
   16484:	00036750 	.word	0x00036750

00016488 <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   16488:	b590      	push	{r4, r7, lr}
   1648a:	b083      	sub	sp, #12
   1648c:	af00      	add	r7, sp, #0
   1648e:	0002      	movs	r2, r0
   16490:	1dfb      	adds	r3, r7, #7
   16492:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   16494:	1dfb      	adds	r3, r7, #7
   16496:	781b      	ldrb	r3, [r3, #0]
   16498:	2b03      	cmp	r3, #3
   1649a:	d806      	bhi.n	164aa <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   1649c:	4b05      	ldr	r3, [pc, #20]	; (164b4 <WifiHandlerSetState+0x2c>)
   1649e:	6818      	ldr	r0, [r3, #0]
   164a0:	1df9      	adds	r1, r7, #7
   164a2:	2300      	movs	r3, #0
   164a4:	220a      	movs	r2, #10
   164a6:	4c04      	ldr	r4, [pc, #16]	; (164b8 <WifiHandlerSetState+0x30>)
   164a8:	47a0      	blx	r4
    }
}
   164aa:	46c0      	nop			; (mov r8, r8)
   164ac:	46bd      	mov	sp, r7
   164ae:	b003      	add	sp, #12
   164b0:	bd90      	pop	{r4, r7, pc}
   164b2:	46c0      	nop			; (mov r8, r8)
   164b4:	200005f8 	.word	0x200005f8
   164b8:	000196ed 	.word	0x000196ed

000164bc <WifiAddTestDataToQueue>:


int WifiAddTestDataToQueue(struct TestPacket *test)
{
   164bc:	b590      	push	{r4, r7, lr}
   164be:	b085      	sub	sp, #20
   164c0:	af00      	add	r7, sp, #0
   164c2:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueTestBuffer, test, (TickType_t)10);
   164c4:	4b06      	ldr	r3, [pc, #24]	; (164e0 <WifiAddTestDataToQueue+0x24>)
   164c6:	6818      	ldr	r0, [r3, #0]
   164c8:	6879      	ldr	r1, [r7, #4]
   164ca:	2300      	movs	r3, #0
   164cc:	220a      	movs	r2, #10
   164ce:	4c05      	ldr	r4, [pc, #20]	; (164e4 <WifiAddTestDataToQueue+0x28>)
   164d0:	47a0      	blx	r4
   164d2:	0003      	movs	r3, r0
   164d4:	60fb      	str	r3, [r7, #12]
	return error;
   164d6:	68fb      	ldr	r3, [r7, #12]
}
   164d8:	0018      	movs	r0, r3
   164da:	46bd      	mov	sp, r7
   164dc:	b005      	add	sp, #20
   164de:	bd90      	pop	{r4, r7, pc}
   164e0:	200005fc 	.word	0x200005fc
   164e4:	000196ed 	.word	0x000196ed

000164e8 <WifiAddNauDataToQueue>:

int WifiAddNauDataToQueue(struct NauPacket *nau)
{
   164e8:	b590      	push	{r4, r7, lr}
   164ea:	b085      	sub	sp, #20
   164ec:	af00      	add	r7, sp, #0
   164ee:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueNauBuffer, nau, (TickType_t)10);
   164f0:	4b06      	ldr	r3, [pc, #24]	; (1650c <WifiAddNauDataToQueue+0x24>)
   164f2:	6818      	ldr	r0, [r3, #0]
   164f4:	6879      	ldr	r1, [r7, #4]
   164f6:	2300      	movs	r3, #0
   164f8:	220a      	movs	r2, #10
   164fa:	4c05      	ldr	r4, [pc, #20]	; (16510 <WifiAddNauDataToQueue+0x28>)
   164fc:	47a0      	blx	r4
   164fe:	0003      	movs	r3, r0
   16500:	60fb      	str	r3, [r7, #12]
	return error;
   16502:	68fb      	ldr	r3, [r7, #12]
   16504:	0018      	movs	r0, r3
   16506:	46bd      	mov	sp, r7
   16508:	b005      	add	sp, #20
   1650a:	bd90      	pop	{r4, r7, pc}
   1650c:	20000600 	.word	0x20000600
   16510:	000196ed 	.word	0x000196ed

00016514 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   16514:	b580      	push	{r7, lr}
   16516:	b082      	sub	sp, #8
   16518:	af00      	add	r7, sp, #0
   1651a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   1651c:	687b      	ldr	r3, [r7, #4]
   1651e:	2200      	movs	r2, #0
   16520:	701a      	strb	r2, [r3, #0]
}
   16522:	46c0      	nop			; (mov r8, r8)
   16524:	46bd      	mov	sp, r7
   16526:	b002      	add	sp, #8
   16528:	bd80      	pop	{r7, pc}
	...

0001652c <system_apb_clock_set_mask>:
{
   1652c:	b580      	push	{r7, lr}
   1652e:	b082      	sub	sp, #8
   16530:	af00      	add	r7, sp, #0
   16532:	0002      	movs	r2, r0
   16534:	6039      	str	r1, [r7, #0]
   16536:	1dfb      	adds	r3, r7, #7
   16538:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1653a:	1dfb      	adds	r3, r7, #7
   1653c:	781b      	ldrb	r3, [r3, #0]
   1653e:	2b01      	cmp	r3, #1
   16540:	d00a      	beq.n	16558 <system_apb_clock_set_mask+0x2c>
   16542:	2b02      	cmp	r3, #2
   16544:	d00f      	beq.n	16566 <system_apb_clock_set_mask+0x3a>
   16546:	2b00      	cmp	r3, #0
   16548:	d114      	bne.n	16574 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1654a:	4b0e      	ldr	r3, [pc, #56]	; (16584 <system_apb_clock_set_mask+0x58>)
   1654c:	4a0d      	ldr	r2, [pc, #52]	; (16584 <system_apb_clock_set_mask+0x58>)
   1654e:	6991      	ldr	r1, [r2, #24]
   16550:	683a      	ldr	r2, [r7, #0]
   16552:	430a      	orrs	r2, r1
   16554:	619a      	str	r2, [r3, #24]
			break;
   16556:	e00f      	b.n	16578 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   16558:	4b0a      	ldr	r3, [pc, #40]	; (16584 <system_apb_clock_set_mask+0x58>)
   1655a:	4a0a      	ldr	r2, [pc, #40]	; (16584 <system_apb_clock_set_mask+0x58>)
   1655c:	69d1      	ldr	r1, [r2, #28]
   1655e:	683a      	ldr	r2, [r7, #0]
   16560:	430a      	orrs	r2, r1
   16562:	61da      	str	r2, [r3, #28]
			break;
   16564:	e008      	b.n	16578 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   16566:	4b07      	ldr	r3, [pc, #28]	; (16584 <system_apb_clock_set_mask+0x58>)
   16568:	4a06      	ldr	r2, [pc, #24]	; (16584 <system_apb_clock_set_mask+0x58>)
   1656a:	6a11      	ldr	r1, [r2, #32]
   1656c:	683a      	ldr	r2, [r7, #0]
   1656e:	430a      	orrs	r2, r1
   16570:	621a      	str	r2, [r3, #32]
			break;
   16572:	e001      	b.n	16578 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   16574:	2317      	movs	r3, #23
   16576:	e000      	b.n	1657a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   16578:	2300      	movs	r3, #0
}
   1657a:	0018      	movs	r0, r3
   1657c:	46bd      	mov	sp, r7
   1657e:	b002      	add	sp, #8
   16580:	bd80      	pop	{r7, pc}
   16582:	46c0      	nop			; (mov r8, r8)
   16584:	40000400 	.word	0x40000400

00016588 <system_pinmux_get_config_defaults>:
{
   16588:	b580      	push	{r7, lr}
   1658a:	b082      	sub	sp, #8
   1658c:	af00      	add	r7, sp, #0
   1658e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   16590:	687b      	ldr	r3, [r7, #4]
   16592:	2280      	movs	r2, #128	; 0x80
   16594:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   16596:	687b      	ldr	r3, [r7, #4]
   16598:	2200      	movs	r2, #0
   1659a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1659c:	687b      	ldr	r3, [r7, #4]
   1659e:	2201      	movs	r2, #1
   165a0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   165a2:	687b      	ldr	r3, [r7, #4]
   165a4:	2200      	movs	r2, #0
   165a6:	70da      	strb	r2, [r3, #3]
}
   165a8:	46c0      	nop			; (mov r8, r8)
   165aa:	46bd      	mov	sp, r7
   165ac:	b002      	add	sp, #8
   165ae:	bd80      	pop	{r7, pc}

000165b0 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   165b0:	b580      	push	{r7, lr}
   165b2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   165b4:	4b05      	ldr	r3, [pc, #20]	; (165cc <system_is_debugger_present+0x1c>)
   165b6:	789b      	ldrb	r3, [r3, #2]
   165b8:	b2db      	uxtb	r3, r3
   165ba:	001a      	movs	r2, r3
   165bc:	2302      	movs	r3, #2
   165be:	4013      	ands	r3, r2
   165c0:	1e5a      	subs	r2, r3, #1
   165c2:	4193      	sbcs	r3, r2
   165c4:	b2db      	uxtb	r3, r3
}
   165c6:	0018      	movs	r0, r3
   165c8:	46bd      	mov	sp, r7
   165ca:	bd80      	pop	{r7, pc}
   165cc:	41002000 	.word	0x41002000

000165d0 <system_interrupt_enter_critical_section>:
{
   165d0:	b580      	push	{r7, lr}
   165d2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   165d4:	4b02      	ldr	r3, [pc, #8]	; (165e0 <system_interrupt_enter_critical_section+0x10>)
   165d6:	4798      	blx	r3
}
   165d8:	46c0      	nop			; (mov r8, r8)
   165da:	46bd      	mov	sp, r7
   165dc:	bd80      	pop	{r7, pc}
   165de:	46c0      	nop			; (mov r8, r8)
   165e0:	00025249 	.word	0x00025249

000165e4 <system_interrupt_leave_critical_section>:
{
   165e4:	b580      	push	{r7, lr}
   165e6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   165e8:	4b02      	ldr	r3, [pc, #8]	; (165f4 <system_interrupt_leave_critical_section+0x10>)
   165ea:	4798      	blx	r3
}
   165ec:	46c0      	nop			; (mov r8, r8)
   165ee:	46bd      	mov	sp, r7
   165f0:	bd80      	pop	{r7, pc}
   165f2:	46c0      	nop			; (mov r8, r8)
   165f4:	0002529d 	.word	0x0002529d

000165f8 <system_interrupt_disable>:
{
   165f8:	b580      	push	{r7, lr}
   165fa:	b082      	sub	sp, #8
   165fc:	af00      	add	r7, sp, #0
   165fe:	0002      	movs	r2, r0
   16600:	1dfb      	adds	r3, r7, #7
   16602:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   16604:	4a07      	ldr	r2, [pc, #28]	; (16624 <system_interrupt_disable+0x2c>)
   16606:	1dfb      	adds	r3, r7, #7
   16608:	781b      	ldrb	r3, [r3, #0]
   1660a:	0019      	movs	r1, r3
   1660c:	231f      	movs	r3, #31
   1660e:	400b      	ands	r3, r1
   16610:	2101      	movs	r1, #1
   16612:	4099      	lsls	r1, r3
   16614:	000b      	movs	r3, r1
   16616:	0019      	movs	r1, r3
   16618:	2380      	movs	r3, #128	; 0x80
   1661a:	50d1      	str	r1, [r2, r3]
}
   1661c:	46c0      	nop			; (mov r8, r8)
   1661e:	46bd      	mov	sp, r7
   16620:	b002      	add	sp, #8
   16622:	bd80      	pop	{r7, pc}
   16624:	e000e100 	.word	0xe000e100

00016628 <i2c_master_is_syncing>:
{
   16628:	b580      	push	{r7, lr}
   1662a:	b084      	sub	sp, #16
   1662c:	af00      	add	r7, sp, #0
   1662e:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   16630:	687b      	ldr	r3, [r7, #4]
   16632:	681b      	ldr	r3, [r3, #0]
   16634:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   16636:	68fb      	ldr	r3, [r7, #12]
   16638:	69db      	ldr	r3, [r3, #28]
   1663a:	2207      	movs	r2, #7
   1663c:	4013      	ands	r3, r2
   1663e:	1e5a      	subs	r2, r3, #1
   16640:	4193      	sbcs	r3, r2
   16642:	b2db      	uxtb	r3, r3
}
   16644:	0018      	movs	r0, r3
   16646:	46bd      	mov	sp, r7
   16648:	b004      	add	sp, #16
   1664a:	bd80      	pop	{r7, pc}

0001664c <_i2c_master_wait_for_sync>:
{
   1664c:	b580      	push	{r7, lr}
   1664e:	b082      	sub	sp, #8
   16650:	af00      	add	r7, sp, #0
   16652:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   16654:	46c0      	nop			; (mov r8, r8)
   16656:	687b      	ldr	r3, [r7, #4]
   16658:	0018      	movs	r0, r3
   1665a:	4b04      	ldr	r3, [pc, #16]	; (1666c <_i2c_master_wait_for_sync+0x20>)
   1665c:	4798      	blx	r3
   1665e:	1e03      	subs	r3, r0, #0
   16660:	d1f9      	bne.n	16656 <_i2c_master_wait_for_sync+0xa>
}
   16662:	46c0      	nop			; (mov r8, r8)
   16664:	46bd      	mov	sp, r7
   16666:	b002      	add	sp, #8
   16668:	bd80      	pop	{r7, pc}
   1666a:	46c0      	nop			; (mov r8, r8)
   1666c:	00016629 	.word	0x00016629

00016670 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   16670:	b580      	push	{r7, lr}
   16672:	b084      	sub	sp, #16
   16674:	af00      	add	r7, sp, #0
   16676:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16678:	687b      	ldr	r3, [r7, #4]
   1667a:	681b      	ldr	r3, [r3, #0]
   1667c:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1667e:	687b      	ldr	r3, [r7, #4]
   16680:	681b      	ldr	r3, [r3, #0]
   16682:	0018      	movs	r0, r3
   16684:	4b0d      	ldr	r3, [pc, #52]	; (166bc <i2c_master_disable+0x4c>)
   16686:	4798      	blx	r3
   16688:	0003      	movs	r3, r0
   1668a:	0018      	movs	r0, r3
   1668c:	4b0c      	ldr	r3, [pc, #48]	; (166c0 <i2c_master_disable+0x50>)
   1668e:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   16690:	687b      	ldr	r3, [r7, #4]
   16692:	0018      	movs	r0, r3
   16694:	4b0b      	ldr	r3, [pc, #44]	; (166c4 <i2c_master_disable+0x54>)
   16696:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   16698:	68fb      	ldr	r3, [r7, #12]
   1669a:	2283      	movs	r2, #131	; 0x83
   1669c:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   1669e:	68fb      	ldr	r3, [r7, #12]
   166a0:	2283      	movs	r2, #131	; 0x83
   166a2:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   166a4:	68fb      	ldr	r3, [r7, #12]
   166a6:	681b      	ldr	r3, [r3, #0]
   166a8:	2202      	movs	r2, #2
   166aa:	4393      	bics	r3, r2
   166ac:	001a      	movs	r2, r3
   166ae:	68fb      	ldr	r3, [r7, #12]
   166b0:	601a      	str	r2, [r3, #0]

}
   166b2:	46c0      	nop			; (mov r8, r8)
   166b4:	46bd      	mov	sp, r7
   166b6:	b004      	add	sp, #16
   166b8:	bd80      	pop	{r7, pc}
   166ba:	46c0      	nop			; (mov r8, r8)
   166bc:	0002671d 	.word	0x0002671d
   166c0:	000165f9 	.word	0x000165f9
   166c4:	0001664d 	.word	0x0001664d

000166c8 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   166c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   166ca:	b097      	sub	sp, #92	; 0x5c
   166cc:	af00      	add	r7, sp, #0
   166ce:	6178      	str	r0, [r7, #20]
   166d0:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   166d2:	2300      	movs	r3, #0
   166d4:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   166d6:	2300      	movs	r3, #0
   166d8:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   166da:	2300      	movs	r3, #0
   166dc:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   166de:	233b      	movs	r3, #59	; 0x3b
   166e0:	2210      	movs	r2, #16
   166e2:	4694      	mov	ip, r2
   166e4:	44bc      	add	ip, r7
   166e6:	4463      	add	r3, ip
   166e8:	2200      	movs	r2, #0
   166ea:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   166ec:	697b      	ldr	r3, [r7, #20]
   166ee:	681b      	ldr	r3, [r3, #0]
   166f0:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   166f2:	697b      	ldr	r3, [r7, #20]
   166f4:	681b      	ldr	r3, [r3, #0]
   166f6:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   166f8:	2323      	movs	r3, #35	; 0x23
   166fa:	2210      	movs	r2, #16
   166fc:	18ba      	adds	r2, r7, r2
   166fe:	18d4      	adds	r4, r2, r3
   16700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16702:	0018      	movs	r0, r3
   16704:	4bc0      	ldr	r3, [pc, #768]	; (16a08 <_i2c_master_set_config+0x340>)
   16706:	4798      	blx	r3
   16708:	0003      	movs	r3, r0
   1670a:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   1670c:	230c      	movs	r3, #12
   1670e:	2210      	movs	r2, #16
   16710:	4694      	mov	ip, r2
   16712:	44bc      	add	ip, r7
   16714:	4463      	add	r3, ip
   16716:	0018      	movs	r0, r3
   16718:	4bbc      	ldr	r3, [pc, #752]	; (16a0c <_i2c_master_set_config+0x344>)
   1671a:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   1671c:	693b      	ldr	r3, [r7, #16]
   1671e:	69db      	ldr	r3, [r3, #28]
   16720:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   16722:	693b      	ldr	r3, [r7, #16]
   16724:	6a1b      	ldr	r3, [r3, #32]
   16726:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   16728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1672a:	2b00      	cmp	r3, #0
   1672c:	d106      	bne.n	1673c <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   1672e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16730:	2100      	movs	r1, #0
   16732:	0018      	movs	r0, r3
   16734:	4bb6      	ldr	r3, [pc, #728]	; (16a10 <_i2c_master_set_config+0x348>)
   16736:	4798      	blx	r3
   16738:	0003      	movs	r3, r0
   1673a:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   1673c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1673e:	b2da      	uxtb	r2, r3
   16740:	230c      	movs	r3, #12
   16742:	2110      	movs	r1, #16
   16744:	468c      	mov	ip, r1
   16746:	44bc      	add	ip, r7
   16748:	4463      	add	r3, ip
   1674a:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   1674c:	230c      	movs	r3, #12
   1674e:	2210      	movs	r2, #16
   16750:	4694      	mov	ip, r2
   16752:	44bc      	add	ip, r7
   16754:	4463      	add	r3, ip
   16756:	2202      	movs	r2, #2
   16758:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   1675a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1675c:	0c1b      	lsrs	r3, r3, #16
   1675e:	b2db      	uxtb	r3, r3
   16760:	220c      	movs	r2, #12
   16762:	2110      	movs	r1, #16
   16764:	468c      	mov	ip, r1
   16766:	44bc      	add	ip, r7
   16768:	4462      	add	r2, ip
   1676a:	0011      	movs	r1, r2
   1676c:	0018      	movs	r0, r3
   1676e:	4ba9      	ldr	r3, [pc, #676]	; (16a14 <_i2c_master_set_config+0x34c>)
   16770:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   16772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16774:	2b00      	cmp	r3, #0
   16776:	d106      	bne.n	16786 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   16778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1677a:	2101      	movs	r1, #1
   1677c:	0018      	movs	r0, r3
   1677e:	4ba4      	ldr	r3, [pc, #656]	; (16a10 <_i2c_master_set_config+0x348>)
   16780:	4798      	blx	r3
   16782:	0003      	movs	r3, r0
   16784:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   16786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16788:	b2da      	uxtb	r2, r3
   1678a:	230c      	movs	r3, #12
   1678c:	2110      	movs	r1, #16
   1678e:	468c      	mov	ip, r1
   16790:	44bc      	add	ip, r7
   16792:	4463      	add	r3, ip
   16794:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   16796:	230c      	movs	r3, #12
   16798:	2210      	movs	r2, #16
   1679a:	4694      	mov	ip, r2
   1679c:	44bc      	add	ip, r7
   1679e:	4463      	add	r3, ip
   167a0:	2202      	movs	r2, #2
   167a2:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   167a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   167a6:	0c1b      	lsrs	r3, r3, #16
   167a8:	b2db      	uxtb	r3, r3
   167aa:	220c      	movs	r2, #12
   167ac:	2110      	movs	r1, #16
   167ae:	468c      	mov	ip, r1
   167b0:	44bc      	add	ip, r7
   167b2:	4462      	add	r2, ip
   167b4:	0011      	movs	r1, r2
   167b6:	0018      	movs	r0, r3
   167b8:	4b96      	ldr	r3, [pc, #600]	; (16a14 <_i2c_master_set_config+0x34c>)
   167ba:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   167bc:	693b      	ldr	r3, [r7, #16]
   167be:	8a9a      	ldrh	r2, [r3, #20]
   167c0:	697b      	ldr	r3, [r7, #20]
   167c2:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   167c4:	693b      	ldr	r3, [r7, #16]
   167c6:	8ada      	ldrh	r2, [r3, #22]
   167c8:	697b      	ldr	r3, [r7, #20]
   167ca:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   167cc:	693b      	ldr	r3, [r7, #16]
   167ce:	7e1b      	ldrb	r3, [r3, #24]
   167d0:	2b00      	cmp	r3, #0
   167d2:	d103      	bne.n	167dc <_i2c_master_set_config+0x114>
   167d4:	4b90      	ldr	r3, [pc, #576]	; (16a18 <_i2c_master_set_config+0x350>)
   167d6:	4798      	blx	r3
   167d8:	1e03      	subs	r3, r0, #0
   167da:	d002      	beq.n	167e2 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   167dc:	2380      	movs	r3, #128	; 0x80
   167de:	657b      	str	r3, [r7, #84]	; 0x54
   167e0:	e001      	b.n	167e6 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   167e2:	2300      	movs	r3, #0
   167e4:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   167e6:	693b      	ldr	r3, [r7, #16]
   167e8:	691b      	ldr	r3, [r3, #16]
   167ea:	2b00      	cmp	r3, #0
   167ec:	d004      	beq.n	167f8 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   167ee:	693b      	ldr	r3, [r7, #16]
   167f0:	691b      	ldr	r3, [r3, #16]
   167f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   167f4:	4313      	orrs	r3, r2
   167f6:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   167f8:	693b      	ldr	r3, [r7, #16]
   167fa:	689b      	ldr	r3, [r3, #8]
   167fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   167fe:	4313      	orrs	r3, r2
   16800:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   16802:	693b      	ldr	r3, [r7, #16]
   16804:	2224      	movs	r2, #36	; 0x24
   16806:	5c9b      	ldrb	r3, [r3, r2]
   16808:	2b00      	cmp	r3, #0
   1680a:	d004      	beq.n	16816 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   1680c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1680e:	2280      	movs	r2, #128	; 0x80
   16810:	05d2      	lsls	r2, r2, #23
   16812:	4313      	orrs	r3, r2
   16814:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   16816:	693b      	ldr	r3, [r7, #16]
   16818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1681a:	2b00      	cmp	r3, #0
   1681c:	d004      	beq.n	16828 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   1681e:	693b      	ldr	r3, [r7, #16]
   16820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16822:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   16824:	4313      	orrs	r3, r2
   16826:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   16828:	693b      	ldr	r3, [r7, #16]
   1682a:	222c      	movs	r2, #44	; 0x2c
   1682c:	5c9b      	ldrb	r3, [r3, r2]
   1682e:	2b00      	cmp	r3, #0
   16830:	d105      	bne.n	1683e <_i2c_master_set_config+0x176>
   16832:	693b      	ldr	r3, [r7, #16]
   16834:	689a      	ldr	r2, [r3, #8]
   16836:	2380      	movs	r3, #128	; 0x80
   16838:	049b      	lsls	r3, r3, #18
   1683a:	429a      	cmp	r2, r3
   1683c:	d104      	bne.n	16848 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   1683e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   16840:	2280      	movs	r2, #128	; 0x80
   16842:	0512      	lsls	r2, r2, #20
   16844:	4313      	orrs	r3, r2
   16846:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   16848:	693b      	ldr	r3, [r7, #16]
   1684a:	222d      	movs	r2, #45	; 0x2d
   1684c:	5c9b      	ldrb	r3, [r3, r2]
   1684e:	2b00      	cmp	r3, #0
   16850:	d004      	beq.n	1685c <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   16852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   16854:	2280      	movs	r2, #128	; 0x80
   16856:	0412      	lsls	r2, r2, #16
   16858:	4313      	orrs	r3, r2
   1685a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   1685c:	693b      	ldr	r3, [r7, #16]
   1685e:	222e      	movs	r2, #46	; 0x2e
   16860:	5c9b      	ldrb	r3, [r3, r2]
   16862:	2b00      	cmp	r3, #0
   16864:	d004      	beq.n	16870 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   16866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   16868:	2280      	movs	r2, #128	; 0x80
   1686a:	03d2      	lsls	r2, r2, #15
   1686c:	4313      	orrs	r3, r2
   1686e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   16870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16872:	681a      	ldr	r2, [r3, #0]
   16874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   16876:	431a      	orrs	r2, r3
   16878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1687a:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   1687c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1687e:	2280      	movs	r2, #128	; 0x80
   16880:	0052      	lsls	r2, r2, #1
   16882:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   16884:	2323      	movs	r3, #35	; 0x23
   16886:	2210      	movs	r2, #16
   16888:	4694      	mov	ip, r2
   1688a:	44bc      	add	ip, r7
   1688c:	4463      	add	r3, ip
   1688e:	781b      	ldrb	r3, [r3, #0]
   16890:	3314      	adds	r3, #20
   16892:	b2db      	uxtb	r3, r3
   16894:	0018      	movs	r0, r3
   16896:	4b61      	ldr	r3, [pc, #388]	; (16a1c <_i2c_master_set_config+0x354>)
   16898:	4798      	blx	r3
   1689a:	0003      	movs	r3, r0
   1689c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   1689e:	693b      	ldr	r3, [r7, #16]
   168a0:	681b      	ldr	r3, [r3, #0]
   168a2:	22fa      	movs	r2, #250	; 0xfa
   168a4:	0092      	lsls	r2, r2, #2
   168a6:	4353      	muls	r3, r2
   168a8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   168aa:	693b      	ldr	r3, [r7, #16]
   168ac:	685b      	ldr	r3, [r3, #4]
   168ae:	22fa      	movs	r2, #250	; 0xfa
   168b0:	0092      	lsls	r2, r2, #2
   168b2:	4353      	muls	r3, r2
   168b4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   168b6:	693b      	ldr	r3, [r7, #16]
   168b8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   168ba:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   168bc:	4b58      	ldr	r3, [pc, #352]	; (16a20 <_i2c_master_set_config+0x358>)
   168be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   168c0:	4798      	blx	r3
   168c2:	0005      	movs	r5, r0
   168c4:	000e      	movs	r6, r1
   168c6:	4b56      	ldr	r3, [pc, #344]	; (16a20 <_i2c_master_set_config+0x358>)
   168c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   168ca:	4798      	blx	r3
   168cc:	60b8      	str	r0, [r7, #8]
   168ce:	60f9      	str	r1, [r7, #12]
   168d0:	4b53      	ldr	r3, [pc, #332]	; (16a20 <_i2c_master_set_config+0x358>)
   168d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   168d4:	4798      	blx	r3
   168d6:	4c53      	ldr	r4, [pc, #332]	; (16a24 <_i2c_master_set_config+0x35c>)
   168d8:	4a53      	ldr	r2, [pc, #332]	; (16a28 <_i2c_master_set_config+0x360>)
   168da:	4b54      	ldr	r3, [pc, #336]	; (16a2c <_i2c_master_set_config+0x364>)
   168dc:	47a0      	blx	r4
   168de:	0003      	movs	r3, r0
   168e0:	000c      	movs	r4, r1
   168e2:	603b      	str	r3, [r7, #0]
   168e4:	607c      	str	r4, [r7, #4]
   168e6:	4b4e      	ldr	r3, [pc, #312]	; (16a20 <_i2c_master_set_config+0x358>)
   168e8:	6a38      	ldr	r0, [r7, #32]
   168ea:	4798      	blx	r3
   168ec:	0002      	movs	r2, r0
   168ee:	000b      	movs	r3, r1
   168f0:	4c4c      	ldr	r4, [pc, #304]	; (16a24 <_i2c_master_set_config+0x35c>)
   168f2:	6838      	ldr	r0, [r7, #0]
   168f4:	6879      	ldr	r1, [r7, #4]
   168f6:	47a0      	blx	r4
   168f8:	0003      	movs	r3, r0
   168fa:	000c      	movs	r4, r1
   168fc:	0018      	movs	r0, r3
   168fe:	0021      	movs	r1, r4
   16900:	4c4b      	ldr	r4, [pc, #300]	; (16a30 <_i2c_master_set_config+0x368>)
   16902:	2200      	movs	r2, #0
   16904:	4b4b      	ldr	r3, [pc, #300]	; (16a34 <_i2c_master_set_config+0x36c>)
   16906:	47a0      	blx	r4
   16908:	0003      	movs	r3, r0
   1690a:	000c      	movs	r4, r1
   1690c:	001a      	movs	r2, r3
   1690e:	0023      	movs	r3, r4
   16910:	4c44      	ldr	r4, [pc, #272]	; (16a24 <_i2c_master_set_config+0x35c>)
   16912:	68b8      	ldr	r0, [r7, #8]
   16914:	68f9      	ldr	r1, [r7, #12]
   16916:	47a0      	blx	r4
   16918:	0003      	movs	r3, r0
   1691a:	000c      	movs	r4, r1
   1691c:	001a      	movs	r2, r3
   1691e:	0023      	movs	r3, r4
   16920:	4c45      	ldr	r4, [pc, #276]	; (16a38 <_i2c_master_set_config+0x370>)
   16922:	0028      	movs	r0, r5
   16924:	0031      	movs	r1, r6
   16926:	47a0      	blx	r4
   16928:	0003      	movs	r3, r0
   1692a:	000c      	movs	r4, r1
   1692c:	001d      	movs	r5, r3
   1692e:	0026      	movs	r6, r4
   16930:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16932:	005a      	lsls	r2, r3, #1
   16934:	4b3a      	ldr	r3, [pc, #232]	; (16a20 <_i2c_master_set_config+0x358>)
   16936:	0010      	movs	r0, r2
   16938:	4798      	blx	r3
   1693a:	0002      	movs	r2, r0
   1693c:	000b      	movs	r3, r1
   1693e:	4c3c      	ldr	r4, [pc, #240]	; (16a30 <_i2c_master_set_config+0x368>)
   16940:	0028      	movs	r0, r5
   16942:	0031      	movs	r1, r6
   16944:	47a0      	blx	r4
   16946:	0003      	movs	r3, r0
   16948:	000c      	movs	r4, r1
   1694a:	0018      	movs	r0, r3
   1694c:	0021      	movs	r1, r4
   1694e:	4c3a      	ldr	r4, [pc, #232]	; (16a38 <_i2c_master_set_config+0x370>)
   16950:	2200      	movs	r2, #0
   16952:	4b3a      	ldr	r3, [pc, #232]	; (16a3c <_i2c_master_set_config+0x374>)
   16954:	47a0      	blx	r4
   16956:	0003      	movs	r3, r0
   16958:	000c      	movs	r4, r1
   1695a:	001d      	movs	r5, r3
   1695c:	0026      	movs	r6, r4
   1695e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16960:	005a      	lsls	r2, r3, #1
   16962:	4b2f      	ldr	r3, [pc, #188]	; (16a20 <_i2c_master_set_config+0x358>)
   16964:	0010      	movs	r0, r2
   16966:	4798      	blx	r3
   16968:	0002      	movs	r2, r0
   1696a:	000b      	movs	r3, r1
   1696c:	4c34      	ldr	r4, [pc, #208]	; (16a40 <_i2c_master_set_config+0x378>)
   1696e:	0028      	movs	r0, r5
   16970:	0031      	movs	r1, r6
   16972:	47a0      	blx	r4
   16974:	0003      	movs	r3, r0
   16976:	000c      	movs	r4, r1
   16978:	0019      	movs	r1, r3
   1697a:	0022      	movs	r2, r4
   1697c:	4b31      	ldr	r3, [pc, #196]	; (16a44 <_i2c_master_set_config+0x37c>)
   1697e:	0008      	movs	r0, r1
   16980:	0011      	movs	r1, r2
   16982:	4798      	blx	r3
   16984:	0003      	movs	r3, r0
   16986:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   16988:	693b      	ldr	r3, [r7, #16]
   1698a:	689a      	ldr	r2, [r3, #8]
   1698c:	2380      	movs	r3, #128	; 0x80
   1698e:	049b      	lsls	r3, r3, #18
   16990:	429a      	cmp	r2, r3
   16992:	d16a      	bne.n	16a6a <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   16994:	4b22      	ldr	r3, [pc, #136]	; (16a20 <_i2c_master_set_config+0x358>)
   16996:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16998:	4798      	blx	r3
   1699a:	4c25      	ldr	r4, [pc, #148]	; (16a30 <_i2c_master_set_config+0x368>)
   1699c:	0002      	movs	r2, r0
   1699e:	000b      	movs	r3, r1
   169a0:	47a0      	blx	r4
   169a2:	0003      	movs	r3, r0
   169a4:	000c      	movs	r4, r1
   169a6:	001d      	movs	r5, r3
   169a8:	0026      	movs	r6, r4
   169aa:	4b1d      	ldr	r3, [pc, #116]	; (16a20 <_i2c_master_set_config+0x358>)
   169ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
   169ae:	4798      	blx	r3
   169b0:	4c1c      	ldr	r4, [pc, #112]	; (16a24 <_i2c_master_set_config+0x35c>)
   169b2:	2200      	movs	r2, #0
   169b4:	4b24      	ldr	r3, [pc, #144]	; (16a48 <_i2c_master_set_config+0x380>)
   169b6:	47a0      	blx	r4
   169b8:	0003      	movs	r3, r0
   169ba:	000c      	movs	r4, r1
   169bc:	001a      	movs	r2, r3
   169be:	0023      	movs	r3, r4
   169c0:	4c1f      	ldr	r4, [pc, #124]	; (16a40 <_i2c_master_set_config+0x378>)
   169c2:	0028      	movs	r0, r5
   169c4:	0031      	movs	r1, r6
   169c6:	47a0      	blx	r4
   169c8:	0003      	movs	r3, r0
   169ca:	000c      	movs	r4, r1
   169cc:	0018      	movs	r0, r3
   169ce:	0021      	movs	r1, r4
   169d0:	4c19      	ldr	r4, [pc, #100]	; (16a38 <_i2c_master_set_config+0x370>)
   169d2:	2200      	movs	r2, #0
   169d4:	4b19      	ldr	r3, [pc, #100]	; (16a3c <_i2c_master_set_config+0x374>)
   169d6:	47a0      	blx	r4
   169d8:	0003      	movs	r3, r0
   169da:	000c      	movs	r4, r1
   169dc:	0019      	movs	r1, r3
   169de:	0022      	movs	r2, r4
   169e0:	4b18      	ldr	r3, [pc, #96]	; (16a44 <_i2c_master_set_config+0x37c>)
   169e2:	0008      	movs	r0, r1
   169e4:	0011      	movs	r1, r2
   169e6:	4798      	blx	r3
   169e8:	0003      	movs	r3, r0
   169ea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   169ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   169ee:	2b00      	cmp	r3, #0
   169f0:	d02e      	beq.n	16a50 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   169f2:	4b16      	ldr	r3, [pc, #88]	; (16a4c <_i2c_master_set_config+0x384>)
   169f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   169f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   169f8:	4798      	blx	r3
   169fa:	0003      	movs	r3, r0
   169fc:	1e9a      	subs	r2, r3, #2
   169fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   16a00:	1ad3      	subs	r3, r2, r3
   16a02:	653b      	str	r3, [r7, #80]	; 0x50
   16a04:	e031      	b.n	16a6a <_i2c_master_set_config+0x3a2>
   16a06:	46c0      	nop			; (mov r8, r8)
   16a08:	0002664d 	.word	0x0002664d
   16a0c:	00016589 	.word	0x00016589
   16a10:	00026491 	.word	0x00026491
   16a14:	0002923d 	.word	0x0002923d
   16a18:	000165b1 	.word	0x000165b1
   16a1c:	00029001 	.word	0x00029001
   16a20:	0003425d 	.word	0x0003425d
   16a24:	000336c9 	.word	0x000336c9
   16a28:	e826d695 	.word	0xe826d695
   16a2c:	3e112e0b 	.word	0x3e112e0b
   16a30:	00032a41 	.word	0x00032a41
   16a34:	40240000 	.word	0x40240000
   16a38:	00033bc9 	.word	0x00033bc9
   16a3c:	3ff00000 	.word	0x3ff00000
   16a40:	00033061 	.word	0x00033061
   16a44:	000341f5 	.word	0x000341f5
   16a48:	40080000 	.word	0x40080000
   16a4c:	00031ac5 	.word	0x00031ac5
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   16a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16a52:	005a      	lsls	r2, r3, #1
   16a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16a56:	18d3      	adds	r3, r2, r3
   16a58:	1e5a      	subs	r2, r3, #1
   16a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16a5c:	0059      	lsls	r1, r3, #1
   16a5e:	4b1d      	ldr	r3, [pc, #116]	; (16ad4 <_i2c_master_set_config+0x40c>)
   16a60:	0010      	movs	r0, r2
   16a62:	4798      	blx	r3
   16a64:	0003      	movs	r3, r0
   16a66:	3b01      	subs	r3, #1
   16a68:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   16a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16a6c:	2bff      	cmp	r3, #255	; 0xff
   16a6e:	dc08      	bgt.n	16a82 <_i2c_master_set_config+0x3ba>
   16a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16a72:	2b00      	cmp	r3, #0
   16a74:	db05      	blt.n	16a82 <_i2c_master_set_config+0x3ba>
   16a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   16a78:	2bff      	cmp	r3, #255	; 0xff
   16a7a:	dc02      	bgt.n	16a82 <_i2c_master_set_config+0x3ba>
   16a7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   16a7e:	2b00      	cmp	r3, #0
   16a80:	da06      	bge.n	16a90 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   16a82:	233b      	movs	r3, #59	; 0x3b
   16a84:	2210      	movs	r2, #16
   16a86:	4694      	mov	ip, r2
   16a88:	44bc      	add	ip, r7
   16a8a:	4463      	add	r3, ip
   16a8c:	2240      	movs	r2, #64	; 0x40
   16a8e:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   16a90:	233b      	movs	r3, #59	; 0x3b
   16a92:	2210      	movs	r2, #16
   16a94:	4694      	mov	ip, r2
   16a96:	44bc      	add	ip, r7
   16a98:	4463      	add	r3, ip
   16a9a:	781b      	ldrb	r3, [r3, #0]
   16a9c:	2b40      	cmp	r3, #64	; 0x40
   16a9e:	d00e      	beq.n	16abe <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   16aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16aa2:	22ff      	movs	r2, #255	; 0xff
   16aa4:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   16aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   16aa8:	041b      	lsls	r3, r3, #16
   16aaa:	0019      	movs	r1, r3
   16aac:	23ff      	movs	r3, #255	; 0xff
   16aae:	041b      	lsls	r3, r3, #16
   16ab0:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   16ab2:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   16ab4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   16ab6:	0612      	lsls	r2, r2, #24
   16ab8:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   16aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16abc:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   16abe:	233b      	movs	r3, #59	; 0x3b
   16ac0:	2210      	movs	r2, #16
   16ac2:	4694      	mov	ip, r2
   16ac4:	44bc      	add	ip, r7
   16ac6:	4463      	add	r3, ip
   16ac8:	781b      	ldrb	r3, [r3, #0]
}
   16aca:	0018      	movs	r0, r3
   16acc:	46bd      	mov	sp, r7
   16ace:	b017      	add	sp, #92	; 0x5c
   16ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16ad2:	46c0      	nop			; (mov r8, r8)
   16ad4:	00031ac5 	.word	0x00031ac5

00016ad8 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   16ad8:	b590      	push	{r4, r7, lr}
   16ada:	b08b      	sub	sp, #44	; 0x2c
   16adc:	af00      	add	r7, sp, #0
   16ade:	60f8      	str	r0, [r7, #12]
   16ae0:	60b9      	str	r1, [r7, #8]
   16ae2:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   16ae4:	68fb      	ldr	r3, [r7, #12]
   16ae6:	68ba      	ldr	r2, [r7, #8]
   16ae8:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16aea:	68fb      	ldr	r3, [r7, #12]
   16aec:	681b      	ldr	r3, [r3, #0]
   16aee:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   16af0:	68fb      	ldr	r3, [r7, #12]
   16af2:	681b      	ldr	r3, [r3, #0]
   16af4:	0018      	movs	r0, r3
   16af6:	4b3b      	ldr	r3, [pc, #236]	; (16be4 <i2c_master_init+0x10c>)
   16af8:	4798      	blx	r3
   16afa:	0003      	movs	r3, r0
   16afc:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   16afe:	6a3b      	ldr	r3, [r7, #32]
   16b00:	3302      	adds	r3, #2
   16b02:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   16b04:	6a3b      	ldr	r3, [r7, #32]
   16b06:	3314      	adds	r3, #20
   16b08:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   16b0a:	2201      	movs	r2, #1
   16b0c:	69fb      	ldr	r3, [r7, #28]
   16b0e:	409a      	lsls	r2, r3
   16b10:	0013      	movs	r3, r2
   16b12:	0019      	movs	r1, r3
   16b14:	2002      	movs	r0, #2
   16b16:	4b34      	ldr	r3, [pc, #208]	; (16be8 <i2c_master_init+0x110>)
   16b18:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   16b1a:	2314      	movs	r3, #20
   16b1c:	18fb      	adds	r3, r7, r3
   16b1e:	0018      	movs	r0, r3
   16b20:	4b32      	ldr	r3, [pc, #200]	; (16bec <i2c_master_init+0x114>)
   16b22:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   16b24:	687b      	ldr	r3, [r7, #4]
   16b26:	7b1a      	ldrb	r2, [r3, #12]
   16b28:	2314      	movs	r3, #20
   16b2a:	18fb      	adds	r3, r7, r3
   16b2c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   16b2e:	69bb      	ldr	r3, [r7, #24]
   16b30:	b2db      	uxtb	r3, r3
   16b32:	2214      	movs	r2, #20
   16b34:	18ba      	adds	r2, r7, r2
   16b36:	0011      	movs	r1, r2
   16b38:	0018      	movs	r0, r3
   16b3a:	4b2d      	ldr	r3, [pc, #180]	; (16bf0 <i2c_master_init+0x118>)
   16b3c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   16b3e:	69bb      	ldr	r3, [r7, #24]
   16b40:	b2db      	uxtb	r3, r3
   16b42:	0018      	movs	r0, r3
   16b44:	4b2b      	ldr	r3, [pc, #172]	; (16bf4 <i2c_master_init+0x11c>)
   16b46:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   16b48:	687b      	ldr	r3, [r7, #4]
   16b4a:	7b1b      	ldrb	r3, [r3, #12]
   16b4c:	2100      	movs	r1, #0
   16b4e:	0018      	movs	r0, r3
   16b50:	4b29      	ldr	r3, [pc, #164]	; (16bf8 <i2c_master_init+0x120>)
   16b52:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   16b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16b56:	681b      	ldr	r3, [r3, #0]
   16b58:	2202      	movs	r2, #2
   16b5a:	4013      	ands	r3, r2
   16b5c:	d001      	beq.n	16b62 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   16b5e:	231c      	movs	r3, #28
   16b60:	e03b      	b.n	16bda <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   16b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16b64:	681b      	ldr	r3, [r3, #0]
   16b66:	2201      	movs	r2, #1
   16b68:	4013      	ands	r3, r2
   16b6a:	d001      	beq.n	16b70 <i2c_master_init+0x98>
		return STATUS_BUSY;
   16b6c:	2305      	movs	r3, #5
   16b6e:	e034      	b.n	16bda <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   16b70:	68fb      	ldr	r3, [r7, #12]
   16b72:	681b      	ldr	r3, [r3, #0]
   16b74:	2217      	movs	r2, #23
   16b76:	18bc      	adds	r4, r7, r2
   16b78:	0018      	movs	r0, r3
   16b7a:	4b1a      	ldr	r3, [pc, #104]	; (16be4 <i2c_master_init+0x10c>)
   16b7c:	4798      	blx	r3
   16b7e:	0003      	movs	r3, r0
   16b80:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   16b82:	4a1e      	ldr	r2, [pc, #120]	; (16bfc <i2c_master_init+0x124>)
   16b84:	2317      	movs	r3, #23
   16b86:	18fb      	adds	r3, r7, r3
   16b88:	781b      	ldrb	r3, [r3, #0]
   16b8a:	0011      	movs	r1, r2
   16b8c:	0018      	movs	r0, r3
   16b8e:	4b1c      	ldr	r3, [pc, #112]	; (16c00 <i2c_master_init+0x128>)
   16b90:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   16b92:	2317      	movs	r3, #23
   16b94:	18fb      	adds	r3, r7, r3
   16b96:	781a      	ldrb	r2, [r3, #0]
   16b98:	4b1a      	ldr	r3, [pc, #104]	; (16c04 <i2c_master_init+0x12c>)
   16b9a:	0092      	lsls	r2, r2, #2
   16b9c:	68f9      	ldr	r1, [r7, #12]
   16b9e:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   16ba0:	68fb      	ldr	r3, [r7, #12]
   16ba2:	2200      	movs	r2, #0
   16ba4:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   16ba6:	68fb      	ldr	r3, [r7, #12]
   16ba8:	2200      	movs	r2, #0
   16baa:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   16bac:	68fb      	ldr	r3, [r7, #12]
   16bae:	2200      	movs	r2, #0
   16bb0:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   16bb2:	68fb      	ldr	r3, [r7, #12]
   16bb4:	2200      	movs	r2, #0
   16bb6:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   16bb8:	68fb      	ldr	r3, [r7, #12]
   16bba:	2225      	movs	r2, #37	; 0x25
   16bbc:	2100      	movs	r1, #0
   16bbe:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   16bc0:	68fb      	ldr	r3, [r7, #12]
   16bc2:	2200      	movs	r2, #0
   16bc4:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   16bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16bc8:	2214      	movs	r2, #20
   16bca:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   16bcc:	687a      	ldr	r2, [r7, #4]
   16bce:	68fb      	ldr	r3, [r7, #12]
   16bd0:	0011      	movs	r1, r2
   16bd2:	0018      	movs	r0, r3
   16bd4:	4b0c      	ldr	r3, [pc, #48]	; (16c08 <i2c_master_init+0x130>)
   16bd6:	4798      	blx	r3
   16bd8:	0003      	movs	r3, r0
}
   16bda:	0018      	movs	r0, r3
   16bdc:	46bd      	mov	sp, r7
   16bde:	b00b      	add	sp, #44	; 0x2c
   16be0:	bd90      	pop	{r4, r7, pc}
   16be2:	46c0      	nop			; (mov r8, r8)
   16be4:	0002664d 	.word	0x0002664d
   16be8:	0001652d 	.word	0x0001652d
   16bec:	00016515 	.word	0x00016515
   16bf0:	00028edd 	.word	0x00028edd
   16bf4:	00028f21 	.word	0x00028f21
   16bf8:	00026405 	.word	0x00026405
   16bfc:	00013575 	.word	0x00013575
   16c00:	000266b1 	.word	0x000266b1
   16c04:	20005bcc 	.word	0x20005bcc
   16c08:	000166c9 	.word	0x000166c9

00016c0c <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   16c0c:	b580      	push	{r7, lr}
   16c0e:	b084      	sub	sp, #16
   16c10:	af00      	add	r7, sp, #0
   16c12:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16c14:	687b      	ldr	r3, [r7, #4]
   16c16:	681b      	ldr	r3, [r3, #0]
   16c18:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   16c1a:	687b      	ldr	r3, [r7, #4]
   16c1c:	0018      	movs	r0, r3
   16c1e:	4b0f      	ldr	r3, [pc, #60]	; (16c5c <i2c_master_reset+0x50>)
   16c20:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   16c22:	687b      	ldr	r3, [r7, #4]
   16c24:	0018      	movs	r0, r3
   16c26:	4b0e      	ldr	r3, [pc, #56]	; (16c60 <i2c_master_reset+0x54>)
   16c28:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   16c2a:	4b0e      	ldr	r3, [pc, #56]	; (16c64 <i2c_master_reset+0x58>)
   16c2c:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   16c2e:	687b      	ldr	r3, [r7, #4]
   16c30:	681b      	ldr	r3, [r3, #0]
   16c32:	0018      	movs	r0, r3
   16c34:	4b0c      	ldr	r3, [pc, #48]	; (16c68 <i2c_master_reset+0x5c>)
   16c36:	4798      	blx	r3
   16c38:	0003      	movs	r3, r0
   16c3a:	0018      	movs	r0, r3
   16c3c:	4b0b      	ldr	r3, [pc, #44]	; (16c6c <i2c_master_reset+0x60>)
   16c3e:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   16c40:	4b0b      	ldr	r3, [pc, #44]	; (16c70 <i2c_master_reset+0x64>)
   16c42:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   16c44:	687b      	ldr	r3, [r7, #4]
   16c46:	0018      	movs	r0, r3
   16c48:	4b04      	ldr	r3, [pc, #16]	; (16c5c <i2c_master_reset+0x50>)
   16c4a:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   16c4c:	68fb      	ldr	r3, [r7, #12]
   16c4e:	2201      	movs	r2, #1
   16c50:	601a      	str	r2, [r3, #0]
}
   16c52:	46c0      	nop			; (mov r8, r8)
   16c54:	46bd      	mov	sp, r7
   16c56:	b004      	add	sp, #16
   16c58:	bd80      	pop	{r7, pc}
   16c5a:	46c0      	nop			; (mov r8, r8)
   16c5c:	0001664d 	.word	0x0001664d
   16c60:	00016671 	.word	0x00016671
   16c64:	000165d1 	.word	0x000165d1
   16c68:	0002671d 	.word	0x0002671d
   16c6c:	00029059 	.word	0x00029059
   16c70:	000165e5 	.word	0x000165e5

00016c74 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   16c74:	b580      	push	{r7, lr}
   16c76:	b084      	sub	sp, #16
   16c78:	af00      	add	r7, sp, #0
   16c7a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16c7c:	687b      	ldr	r3, [r7, #4]
   16c7e:	681b      	ldr	r3, [r3, #0]
   16c80:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   16c82:	68fb      	ldr	r3, [r7, #12]
   16c84:	7e1b      	ldrb	r3, [r3, #24]
   16c86:	b2db      	uxtb	r3, r3
   16c88:	001a      	movs	r2, r3
   16c8a:	2302      	movs	r3, #2
   16c8c:	4013      	ands	r3, r2
   16c8e:	d00b      	beq.n	16ca8 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   16c90:	68fb      	ldr	r3, [r7, #12]
   16c92:	2202      	movs	r2, #2
   16c94:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   16c96:	68fb      	ldr	r3, [r7, #12]
   16c98:	8b5b      	ldrh	r3, [r3, #26]
   16c9a:	b29b      	uxth	r3, r3
   16c9c:	001a      	movs	r2, r3
   16c9e:	2302      	movs	r3, #2
   16ca0:	4013      	ands	r3, r2
   16ca2:	d011      	beq.n	16cc8 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   16ca4:	2341      	movs	r3, #65	; 0x41
   16ca6:	e010      	b.n	16cca <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   16ca8:	68fb      	ldr	r3, [r7, #12]
   16caa:	8b5b      	ldrh	r3, [r3, #26]
   16cac:	b29b      	uxth	r3, r3
   16cae:	001a      	movs	r2, r3
   16cb0:	2304      	movs	r3, #4
   16cb2:	4013      	ands	r3, r2
   16cb4:	d008      	beq.n	16cc8 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   16cb6:	68fb      	ldr	r3, [r7, #12]
   16cb8:	685b      	ldr	r3, [r3, #4]
   16cba:	22c0      	movs	r2, #192	; 0xc0
   16cbc:	0292      	lsls	r2, r2, #10
   16cbe:	431a      	orrs	r2, r3
   16cc0:	68fb      	ldr	r3, [r7, #12]
   16cc2:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   16cc4:	2318      	movs	r3, #24
   16cc6:	e000      	b.n	16cca <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   16cc8:	2300      	movs	r3, #0
}
   16cca:	0018      	movs	r0, r3
   16ccc:	46bd      	mov	sp, r7
   16cce:	b004      	add	sp, #16
   16cd0:	bd80      	pop	{r7, pc}

00016cd2 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   16cd2:	b580      	push	{r7, lr}
   16cd4:	b084      	sub	sp, #16
   16cd6:	af00      	add	r7, sp, #0
   16cd8:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16cda:	687b      	ldr	r3, [r7, #4]
   16cdc:	681b      	ldr	r3, [r3, #0]
   16cde:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   16ce0:	230e      	movs	r3, #14
   16ce2:	18fb      	adds	r3, r7, r3
   16ce4:	2200      	movs	r2, #0
   16ce6:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   16ce8:	e00f      	b.n	16d0a <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   16cea:	230e      	movs	r3, #14
   16cec:	18fb      	adds	r3, r7, r3
   16cee:	220e      	movs	r2, #14
   16cf0:	18ba      	adds	r2, r7, r2
   16cf2:	8812      	ldrh	r2, [r2, #0]
   16cf4:	3201      	adds	r2, #1
   16cf6:	801a      	strh	r2, [r3, #0]
   16cf8:	687b      	ldr	r3, [r7, #4]
   16cfa:	891b      	ldrh	r3, [r3, #8]
   16cfc:	220e      	movs	r2, #14
   16cfe:	18ba      	adds	r2, r7, r2
   16d00:	8812      	ldrh	r2, [r2, #0]
   16d02:	429a      	cmp	r2, r3
   16d04:	d301      	bcc.n	16d0a <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   16d06:	2312      	movs	r3, #18
   16d08:	e00e      	b.n	16d28 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   16d0a:	68bb      	ldr	r3, [r7, #8]
   16d0c:	7e1b      	ldrb	r3, [r3, #24]
   16d0e:	b2db      	uxtb	r3, r3
   16d10:	001a      	movs	r2, r3
   16d12:	2301      	movs	r3, #1
   16d14:	4013      	ands	r3, r2
   16d16:	d106      	bne.n	16d26 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   16d18:	68bb      	ldr	r3, [r7, #8]
   16d1a:	7e1b      	ldrb	r3, [r3, #24]
   16d1c:	b2db      	uxtb	r3, r3
   16d1e:	001a      	movs	r2, r3
   16d20:	2302      	movs	r3, #2
   16d22:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   16d24:	d0e1      	beq.n	16cea <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   16d26:	2300      	movs	r3, #0
}
   16d28:	0018      	movs	r0, r3
   16d2a:	46bd      	mov	sp, r7
   16d2c:	b004      	add	sp, #16
   16d2e:	bd80      	pop	{r7, pc}

00016d30 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   16d30:	b590      	push	{r4, r7, lr}
   16d32:	b085      	sub	sp, #20
   16d34:	af00      	add	r7, sp, #0
   16d36:	6078      	str	r0, [r7, #4]
   16d38:	000a      	movs	r2, r1
   16d3a:	1cfb      	adds	r3, r7, #3
   16d3c:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16d3e:	687b      	ldr	r3, [r7, #4]
   16d40:	681b      	ldr	r3, [r3, #0]
   16d42:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   16d44:	68fb      	ldr	r3, [r7, #12]
   16d46:	685b      	ldr	r3, [r3, #4]
   16d48:	2280      	movs	r2, #128	; 0x80
   16d4a:	02d2      	lsls	r2, r2, #11
   16d4c:	431a      	orrs	r2, r3
   16d4e:	68fb      	ldr	r3, [r7, #12]
   16d50:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   16d52:	1cfb      	adds	r3, r7, #3
   16d54:	781a      	ldrb	r2, [r3, #0]
   16d56:	68fb      	ldr	r3, [r7, #12]
   16d58:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   16d5a:	230b      	movs	r3, #11
   16d5c:	18fc      	adds	r4, r7, r3
   16d5e:	687b      	ldr	r3, [r7, #4]
   16d60:	0018      	movs	r0, r3
   16d62:	4b07      	ldr	r3, [pc, #28]	; (16d80 <_i2c_master_send_hs_master_code+0x50>)
   16d64:	4798      	blx	r3
   16d66:	0003      	movs	r3, r0
   16d68:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   16d6a:	68fb      	ldr	r3, [r7, #12]
   16d6c:	2201      	movs	r2, #1
   16d6e:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   16d70:	230b      	movs	r3, #11
   16d72:	18fb      	adds	r3, r7, r3
   16d74:	781b      	ldrb	r3, [r3, #0]
}
   16d76:	0018      	movs	r0, r3
   16d78:	46bd      	mov	sp, r7
   16d7a:	b005      	add	sp, #20
   16d7c:	bd90      	pop	{r4, r7, pc}
   16d7e:	46c0      	nop			; (mov r8, r8)
   16d80:	00016cd3 	.word	0x00016cd3

00016d84 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   16d84:	b580      	push	{r7, lr}
   16d86:	af00      	add	r7, sp, #0
   16d88:	2000      	movs	r0, #0
   16d8a:	4b02      	ldr	r3, [pc, #8]	; (16d94 <TC3_Handler+0x10>)
   16d8c:	4798      	blx	r3
   16d8e:	46c0      	nop			; (mov r8, r8)
   16d90:	46bd      	mov	sp, r7
   16d92:	bd80      	pop	{r7, pc}
   16d94:	00016dc1 	.word	0x00016dc1

00016d98 <TC4_Handler>:
   16d98:	b580      	push	{r7, lr}
   16d9a:	af00      	add	r7, sp, #0
   16d9c:	2001      	movs	r0, #1
   16d9e:	4b02      	ldr	r3, [pc, #8]	; (16da8 <TC4_Handler+0x10>)
   16da0:	4798      	blx	r3
   16da2:	46c0      	nop			; (mov r8, r8)
   16da4:	46bd      	mov	sp, r7
   16da6:	bd80      	pop	{r7, pc}
   16da8:	00016dc1 	.word	0x00016dc1

00016dac <TC5_Handler>:
   16dac:	b580      	push	{r7, lr}
   16dae:	af00      	add	r7, sp, #0
   16db0:	2002      	movs	r0, #2
   16db2:	4b02      	ldr	r3, [pc, #8]	; (16dbc <TC5_Handler+0x10>)
   16db4:	4798      	blx	r3
   16db6:	46c0      	nop			; (mov r8, r8)
   16db8:	46bd      	mov	sp, r7
   16dba:	bd80      	pop	{r7, pc}
   16dbc:	00016dc1 	.word	0x00016dc1

00016dc0 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   16dc0:	b580      	push	{r7, lr}
   16dc2:	b084      	sub	sp, #16
   16dc4:	af00      	add	r7, sp, #0
   16dc6:	0002      	movs	r2, r0
   16dc8:	1dfb      	adds	r3, r7, #7
   16dca:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   16dcc:	1dfb      	adds	r3, r7, #7
   16dce:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   16dd0:	4b28      	ldr	r3, [pc, #160]	; (16e74 <_tc_interrupt_handler+0xb4>)
   16dd2:	0092      	lsls	r2, r2, #2
   16dd4:	58d3      	ldr	r3, [r2, r3]
   16dd6:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   16dd8:	68fb      	ldr	r3, [r7, #12]
   16dda:	681b      	ldr	r3, [r3, #0]
   16ddc:	7b9b      	ldrb	r3, [r3, #14]
   16dde:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   16de0:	68fa      	ldr	r2, [r7, #12]
   16de2:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   16de4:	4013      	ands	r3, r2
   16de6:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   16de8:	68fb      	ldr	r3, [r7, #12]
   16dea:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   16dec:	230b      	movs	r3, #11
   16dee:	18fb      	adds	r3, r7, r3
   16df0:	400a      	ands	r2, r1
   16df2:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   16df4:	230b      	movs	r3, #11
   16df6:	18fb      	adds	r3, r7, r3
   16df8:	781b      	ldrb	r3, [r3, #0]
   16dfa:	2201      	movs	r2, #1
   16dfc:	4013      	ands	r3, r2
   16dfe:	d008      	beq.n	16e12 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   16e00:	68fb      	ldr	r3, [r7, #12]
   16e02:	689b      	ldr	r3, [r3, #8]
   16e04:	68fa      	ldr	r2, [r7, #12]
   16e06:	0010      	movs	r0, r2
   16e08:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   16e0a:	68fb      	ldr	r3, [r7, #12]
   16e0c:	681b      	ldr	r3, [r3, #0]
   16e0e:	2201      	movs	r2, #1
   16e10:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   16e12:	230b      	movs	r3, #11
   16e14:	18fb      	adds	r3, r7, r3
   16e16:	781b      	ldrb	r3, [r3, #0]
   16e18:	2202      	movs	r2, #2
   16e1a:	4013      	ands	r3, r2
   16e1c:	d008      	beq.n	16e30 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   16e1e:	68fb      	ldr	r3, [r7, #12]
   16e20:	68db      	ldr	r3, [r3, #12]
   16e22:	68fa      	ldr	r2, [r7, #12]
   16e24:	0010      	movs	r0, r2
   16e26:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   16e28:	68fb      	ldr	r3, [r7, #12]
   16e2a:	681b      	ldr	r3, [r3, #0]
   16e2c:	2202      	movs	r2, #2
   16e2e:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   16e30:	230b      	movs	r3, #11
   16e32:	18fb      	adds	r3, r7, r3
   16e34:	781b      	ldrb	r3, [r3, #0]
   16e36:	2210      	movs	r2, #16
   16e38:	4013      	ands	r3, r2
   16e3a:	d008      	beq.n	16e4e <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   16e3c:	68fb      	ldr	r3, [r7, #12]
   16e3e:	691b      	ldr	r3, [r3, #16]
   16e40:	68fa      	ldr	r2, [r7, #12]
   16e42:	0010      	movs	r0, r2
   16e44:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   16e46:	68fb      	ldr	r3, [r7, #12]
   16e48:	681b      	ldr	r3, [r3, #0]
   16e4a:	2210      	movs	r2, #16
   16e4c:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   16e4e:	230b      	movs	r3, #11
   16e50:	18fb      	adds	r3, r7, r3
   16e52:	781b      	ldrb	r3, [r3, #0]
   16e54:	2220      	movs	r2, #32
   16e56:	4013      	ands	r3, r2
   16e58:	d008      	beq.n	16e6c <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   16e5a:	68fb      	ldr	r3, [r7, #12]
   16e5c:	695b      	ldr	r3, [r3, #20]
   16e5e:	68fa      	ldr	r2, [r7, #12]
   16e60:	0010      	movs	r0, r2
   16e62:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   16e64:	68fb      	ldr	r3, [r7, #12]
   16e66:	681b      	ldr	r3, [r3, #0]
   16e68:	2220      	movs	r2, #32
   16e6a:	739a      	strb	r2, [r3, #14]
	}
}
   16e6c:	46c0      	nop			; (mov r8, r8)
   16e6e:	46bd      	mov	sp, r7
   16e70:	b004      	add	sp, #16
   16e72:	bd80      	pop	{r7, pc}
   16e74:	200049b4 	.word	0x200049b4

00016e78 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   16e78:	b580      	push	{r7, lr}
   16e7a:	b084      	sub	sp, #16
   16e7c:	af00      	add	r7, sp, #0
   16e7e:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   16e80:	2300      	movs	r3, #0
   16e82:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   16e84:	687b      	ldr	r3, [r7, #4]
   16e86:	2b00      	cmp	r3, #0
   16e88:	d101      	bne.n	16e8e <FreeRTOS_CLIRegisterCommand+0x16>
   16e8a:	b672      	cpsid	i
   16e8c:	e7fe      	b.n	16e8c <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   16e8e:	2008      	movs	r0, #8
   16e90:	4b11      	ldr	r3, [pc, #68]	; (16ed8 <FreeRTOS_CLIRegisterCommand+0x60>)
   16e92:	4798      	blx	r3
   16e94:	0003      	movs	r3, r0
   16e96:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   16e98:	68bb      	ldr	r3, [r7, #8]
   16e9a:	2b00      	cmp	r3, #0
   16e9c:	d101      	bne.n	16ea2 <FreeRTOS_CLIRegisterCommand+0x2a>
   16e9e:	b672      	cpsid	i
   16ea0:	e7fe      	b.n	16ea0 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   16ea2:	68bb      	ldr	r3, [r7, #8]
   16ea4:	2b00      	cmp	r3, #0
   16ea6:	d012      	beq.n	16ece <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   16ea8:	4b0c      	ldr	r3, [pc, #48]	; (16edc <FreeRTOS_CLIRegisterCommand+0x64>)
   16eaa:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   16eac:	68bb      	ldr	r3, [r7, #8]
   16eae:	687a      	ldr	r2, [r7, #4]
   16eb0:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   16eb2:	68bb      	ldr	r3, [r7, #8]
   16eb4:	2200      	movs	r2, #0
   16eb6:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   16eb8:	4b09      	ldr	r3, [pc, #36]	; (16ee0 <FreeRTOS_CLIRegisterCommand+0x68>)
   16eba:	681b      	ldr	r3, [r3, #0]
   16ebc:	68ba      	ldr	r2, [r7, #8]
   16ebe:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   16ec0:	4b07      	ldr	r3, [pc, #28]	; (16ee0 <FreeRTOS_CLIRegisterCommand+0x68>)
   16ec2:	68ba      	ldr	r2, [r7, #8]
   16ec4:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   16ec6:	4b07      	ldr	r3, [pc, #28]	; (16ee4 <FreeRTOS_CLIRegisterCommand+0x6c>)
   16ec8:	4798      	blx	r3

		xReturn = pdPASS;
   16eca:	2301      	movs	r3, #1
   16ecc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   16ece:	68fb      	ldr	r3, [r7, #12]
}
   16ed0:	0018      	movs	r0, r3
   16ed2:	46bd      	mov	sp, r7
   16ed4:	b004      	add	sp, #16
   16ed6:	bd80      	pop	{r7, pc}
   16ed8:	00019291 	.word	0x00019291
   16edc:	00019159 	.word	0x00019159
   16ee0:	200000f0 	.word	0x200000f0
   16ee4:	0001917d 	.word	0x0001917d

00016ee8 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   16ee8:	b580      	push	{r7, lr}
   16eea:	b088      	sub	sp, #32
   16eec:	af00      	add	r7, sp, #0
   16eee:	60f8      	str	r0, [r7, #12]
   16ef0:	60b9      	str	r1, [r7, #8]
   16ef2:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   16ef4:	2301      	movs	r3, #1
   16ef6:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   16ef8:	4b3d      	ldr	r3, [pc, #244]	; (16ff0 <FreeRTOS_CLIProcessCommand+0x108>)
   16efa:	681b      	ldr	r3, [r3, #0]
   16efc:	2b00      	cmp	r3, #0
   16efe:	d144      	bne.n	16f8a <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   16f00:	4b3b      	ldr	r3, [pc, #236]	; (16ff0 <FreeRTOS_CLIProcessCommand+0x108>)
   16f02:	4a3c      	ldr	r2, [pc, #240]	; (16ff4 <FreeRTOS_CLIProcessCommand+0x10c>)
   16f04:	601a      	str	r2, [r3, #0]
   16f06:	e03a      	b.n	16f7e <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   16f08:	4b39      	ldr	r3, [pc, #228]	; (16ff0 <FreeRTOS_CLIProcessCommand+0x108>)
   16f0a:	681b      	ldr	r3, [r3, #0]
   16f0c:	681b      	ldr	r3, [r3, #0]
   16f0e:	681b      	ldr	r3, [r3, #0]
   16f10:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   16f12:	69bb      	ldr	r3, [r7, #24]
   16f14:	0018      	movs	r0, r3
   16f16:	4b38      	ldr	r3, [pc, #224]	; (16ff8 <FreeRTOS_CLIProcessCommand+0x110>)
   16f18:	4798      	blx	r3
   16f1a:	0003      	movs	r3, r0
   16f1c:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   16f1e:	68fa      	ldr	r2, [r7, #12]
   16f20:	697b      	ldr	r3, [r7, #20]
   16f22:	18d3      	adds	r3, r2, r3
   16f24:	781b      	ldrb	r3, [r3, #0]
   16f26:	2b20      	cmp	r3, #32
   16f28:	d005      	beq.n	16f36 <FreeRTOS_CLIProcessCommand+0x4e>
   16f2a:	68fa      	ldr	r2, [r7, #12]
   16f2c:	697b      	ldr	r3, [r7, #20]
   16f2e:	18d3      	adds	r3, r2, r3
   16f30:	781b      	ldrb	r3, [r3, #0]
   16f32:	2b00      	cmp	r3, #0
   16f34:	d11e      	bne.n	16f74 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   16f36:	697a      	ldr	r2, [r7, #20]
   16f38:	69b9      	ldr	r1, [r7, #24]
   16f3a:	68fb      	ldr	r3, [r7, #12]
   16f3c:	0018      	movs	r0, r3
   16f3e:	4b2f      	ldr	r3, [pc, #188]	; (16ffc <FreeRTOS_CLIProcessCommand+0x114>)
   16f40:	4798      	blx	r3
   16f42:	1e03      	subs	r3, r0, #0
   16f44:	d116      	bne.n	16f74 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   16f46:	4b2a      	ldr	r3, [pc, #168]	; (16ff0 <FreeRTOS_CLIProcessCommand+0x108>)
   16f48:	681b      	ldr	r3, [r3, #0]
   16f4a:	681b      	ldr	r3, [r3, #0]
   16f4c:	7b1b      	ldrb	r3, [r3, #12]
   16f4e:	b25b      	sxtb	r3, r3
   16f50:	2b00      	cmp	r3, #0
   16f52:	db19      	blt.n	16f88 <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   16f54:	68fb      	ldr	r3, [r7, #12]
   16f56:	0018      	movs	r0, r3
   16f58:	4b29      	ldr	r3, [pc, #164]	; (17000 <FreeRTOS_CLIProcessCommand+0x118>)
   16f5a:	4798      	blx	r3
   16f5c:	0003      	movs	r3, r0
   16f5e:	001a      	movs	r2, r3
   16f60:	4b23      	ldr	r3, [pc, #140]	; (16ff0 <FreeRTOS_CLIProcessCommand+0x108>)
   16f62:	681b      	ldr	r3, [r3, #0]
   16f64:	681b      	ldr	r3, [r3, #0]
   16f66:	7b1b      	ldrb	r3, [r3, #12]
   16f68:	b25b      	sxtb	r3, r3
   16f6a:	429a      	cmp	r2, r3
   16f6c:	d00c      	beq.n	16f88 <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   16f6e:	2300      	movs	r3, #0
   16f70:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   16f72:	e009      	b.n	16f88 <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   16f74:	4b1e      	ldr	r3, [pc, #120]	; (16ff0 <FreeRTOS_CLIProcessCommand+0x108>)
   16f76:	681b      	ldr	r3, [r3, #0]
   16f78:	685a      	ldr	r2, [r3, #4]
   16f7a:	4b1d      	ldr	r3, [pc, #116]	; (16ff0 <FreeRTOS_CLIProcessCommand+0x108>)
   16f7c:	601a      	str	r2, [r3, #0]
   16f7e:	4b1c      	ldr	r3, [pc, #112]	; (16ff0 <FreeRTOS_CLIProcessCommand+0x108>)
   16f80:	681b      	ldr	r3, [r3, #0]
   16f82:	2b00      	cmp	r3, #0
   16f84:	d1c0      	bne.n	16f08 <FreeRTOS_CLIProcessCommand+0x20>
   16f86:	e000      	b.n	16f8a <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   16f88:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   16f8a:	4b19      	ldr	r3, [pc, #100]	; (16ff0 <FreeRTOS_CLIProcessCommand+0x108>)
   16f8c:	681b      	ldr	r3, [r3, #0]
   16f8e:	2b00      	cmp	r3, #0
   16f90:	d00c      	beq.n	16fac <FreeRTOS_CLIProcessCommand+0xc4>
   16f92:	69fb      	ldr	r3, [r7, #28]
   16f94:	2b00      	cmp	r3, #0
   16f96:	d109      	bne.n	16fac <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   16f98:	687a      	ldr	r2, [r7, #4]
   16f9a:	491a      	ldr	r1, [pc, #104]	; (17004 <FreeRTOS_CLIProcessCommand+0x11c>)
   16f9c:	68bb      	ldr	r3, [r7, #8]
   16f9e:	0018      	movs	r0, r3
   16fa0:	4b19      	ldr	r3, [pc, #100]	; (17008 <FreeRTOS_CLIProcessCommand+0x120>)
   16fa2:	4798      	blx	r3
		pxCommand = NULL;
   16fa4:	4b12      	ldr	r3, [pc, #72]	; (16ff0 <FreeRTOS_CLIProcessCommand+0x108>)
   16fa6:	2200      	movs	r2, #0
   16fa8:	601a      	str	r2, [r3, #0]
   16faa:	e01c      	b.n	16fe6 <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   16fac:	4b10      	ldr	r3, [pc, #64]	; (16ff0 <FreeRTOS_CLIProcessCommand+0x108>)
   16fae:	681b      	ldr	r3, [r3, #0]
   16fb0:	2b00      	cmp	r3, #0
   16fb2:	d010      	beq.n	16fd6 <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   16fb4:	4b0e      	ldr	r3, [pc, #56]	; (16ff0 <FreeRTOS_CLIProcessCommand+0x108>)
   16fb6:	681b      	ldr	r3, [r3, #0]
   16fb8:	681b      	ldr	r3, [r3, #0]
   16fba:	689b      	ldr	r3, [r3, #8]
   16fbc:	68fa      	ldr	r2, [r7, #12]
   16fbe:	6879      	ldr	r1, [r7, #4]
   16fc0:	68b8      	ldr	r0, [r7, #8]
   16fc2:	4798      	blx	r3
   16fc4:	0003      	movs	r3, r0
   16fc6:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   16fc8:	69fb      	ldr	r3, [r7, #28]
   16fca:	2b00      	cmp	r3, #0
   16fcc:	d10b      	bne.n	16fe6 <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   16fce:	4b08      	ldr	r3, [pc, #32]	; (16ff0 <FreeRTOS_CLIProcessCommand+0x108>)
   16fd0:	2200      	movs	r2, #0
   16fd2:	601a      	str	r2, [r3, #0]
   16fd4:	e007      	b.n	16fe6 <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   16fd6:	687a      	ldr	r2, [r7, #4]
   16fd8:	490c      	ldr	r1, [pc, #48]	; (1700c <FreeRTOS_CLIProcessCommand+0x124>)
   16fda:	68bb      	ldr	r3, [r7, #8]
   16fdc:	0018      	movs	r0, r3
   16fde:	4b0a      	ldr	r3, [pc, #40]	; (17008 <FreeRTOS_CLIProcessCommand+0x120>)
   16fe0:	4798      	blx	r3
		xReturn = pdFALSE;
   16fe2:	2300      	movs	r3, #0
   16fe4:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   16fe6:	69fb      	ldr	r3, [r7, #28]
}
   16fe8:	0018      	movs	r0, r3
   16fea:	46bd      	mov	sp, r7
   16fec:	b008      	add	sp, #32
   16fee:	bd80      	pop	{r7, pc}
   16ff0:	20000ca0 	.word	0x20000ca0
   16ff4:	200000e8 	.word	0x200000e8
   16ff8:	0003491b 	.word	0x0003491b
   16ffc:	00034929 	.word	0x00034929
   17000:	00017071 	.word	0x00017071
   17004:	000367ac 	.word	0x000367ac
   17008:	0003494b 	.word	0x0003494b
   1700c:	00036804 	.word	0x00036804

00017010 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   17010:	b580      	push	{r7, lr}
   17012:	b086      	sub	sp, #24
   17014:	af00      	add	r7, sp, #0
   17016:	60f8      	str	r0, [r7, #12]
   17018:	60b9      	str	r1, [r7, #8]
   1701a:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   1701c:	4b11      	ldr	r3, [pc, #68]	; (17064 <prvHelpCommand+0x54>)
   1701e:	681b      	ldr	r3, [r3, #0]
   17020:	2b00      	cmp	r3, #0
   17022:	d102      	bne.n	1702a <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   17024:	4b0f      	ldr	r3, [pc, #60]	; (17064 <prvHelpCommand+0x54>)
   17026:	4a10      	ldr	r2, [pc, #64]	; (17068 <prvHelpCommand+0x58>)
   17028:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   1702a:	4b0e      	ldr	r3, [pc, #56]	; (17064 <prvHelpCommand+0x54>)
   1702c:	681b      	ldr	r3, [r3, #0]
   1702e:	681b      	ldr	r3, [r3, #0]
   17030:	6859      	ldr	r1, [r3, #4]
   17032:	68ba      	ldr	r2, [r7, #8]
   17034:	68fb      	ldr	r3, [r7, #12]
   17036:	0018      	movs	r0, r3
   17038:	4b0c      	ldr	r3, [pc, #48]	; (1706c <prvHelpCommand+0x5c>)
   1703a:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   1703c:	4b09      	ldr	r3, [pc, #36]	; (17064 <prvHelpCommand+0x54>)
   1703e:	681b      	ldr	r3, [r3, #0]
   17040:	685a      	ldr	r2, [r3, #4]
   17042:	4b08      	ldr	r3, [pc, #32]	; (17064 <prvHelpCommand+0x54>)
   17044:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   17046:	4b07      	ldr	r3, [pc, #28]	; (17064 <prvHelpCommand+0x54>)
   17048:	681b      	ldr	r3, [r3, #0]
   1704a:	2b00      	cmp	r3, #0
   1704c:	d102      	bne.n	17054 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   1704e:	2300      	movs	r3, #0
   17050:	617b      	str	r3, [r7, #20]
   17052:	e001      	b.n	17058 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   17054:	2301      	movs	r3, #1
   17056:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   17058:	697b      	ldr	r3, [r7, #20]
}
   1705a:	0018      	movs	r0, r3
   1705c:	46bd      	mov	sp, r7
   1705e:	b006      	add	sp, #24
   17060:	bd80      	pop	{r7, pc}
   17062:	46c0      	nop			; (mov r8, r8)
   17064:	20000ca4 	.word	0x20000ca4
   17068:	200000e8 	.word	0x200000e8
   1706c:	0003494b 	.word	0x0003494b

00017070 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   17070:	b580      	push	{r7, lr}
   17072:	b084      	sub	sp, #16
   17074:	af00      	add	r7, sp, #0
   17076:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   17078:	230f      	movs	r3, #15
   1707a:	18fb      	adds	r3, r7, r3
   1707c:	2200      	movs	r2, #0
   1707e:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   17080:	2300      	movs	r3, #0
   17082:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   17084:	e018      	b.n	170b8 <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   17086:	687b      	ldr	r3, [r7, #4]
   17088:	781b      	ldrb	r3, [r3, #0]
   1708a:	2b20      	cmp	r3, #32
   1708c:	d10f      	bne.n	170ae <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   1708e:	68bb      	ldr	r3, [r7, #8]
   17090:	2b01      	cmp	r3, #1
   17092:	d00e      	beq.n	170b2 <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   17094:	230f      	movs	r3, #15
   17096:	18fb      	adds	r3, r7, r3
   17098:	781b      	ldrb	r3, [r3, #0]
   1709a:	b25b      	sxtb	r3, r3
   1709c:	b2db      	uxtb	r3, r3
   1709e:	3301      	adds	r3, #1
   170a0:	b2da      	uxtb	r2, r3
   170a2:	230f      	movs	r3, #15
   170a4:	18fb      	adds	r3, r7, r3
   170a6:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   170a8:	2301      	movs	r3, #1
   170aa:	60bb      	str	r3, [r7, #8]
   170ac:	e001      	b.n	170b2 <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   170ae:	2300      	movs	r3, #0
   170b0:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   170b2:	687b      	ldr	r3, [r7, #4]
   170b4:	3301      	adds	r3, #1
   170b6:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   170b8:	687b      	ldr	r3, [r7, #4]
   170ba:	781b      	ldrb	r3, [r3, #0]
   170bc:	2b00      	cmp	r3, #0
   170be:	d1e2      	bne.n	17086 <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   170c0:	68bb      	ldr	r3, [r7, #8]
   170c2:	2b01      	cmp	r3, #1
   170c4:	d109      	bne.n	170da <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   170c6:	230f      	movs	r3, #15
   170c8:	18fb      	adds	r3, r7, r3
   170ca:	781b      	ldrb	r3, [r3, #0]
   170cc:	b25b      	sxtb	r3, r3
   170ce:	b2db      	uxtb	r3, r3
   170d0:	3b01      	subs	r3, #1
   170d2:	b2da      	uxtb	r2, r3
   170d4:	230f      	movs	r3, #15
   170d6:	18fb      	adds	r3, r7, r3
   170d8:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   170da:	230f      	movs	r3, #15
   170dc:	18fb      	adds	r3, r7, r3
   170de:	781b      	ldrb	r3, [r3, #0]
   170e0:	b25b      	sxtb	r3, r3
}
   170e2:	0018      	movs	r0, r3
   170e4:	46bd      	mov	sp, r7
   170e6:	b004      	add	sp, #16
   170e8:	bd80      	pop	{r7, pc}
	...

000170ec <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   170ec:	b580      	push	{r7, lr}
   170ee:	b082      	sub	sp, #8
   170f0:	af00      	add	r7, sp, #0
   170f2:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   170f4:	687b      	ldr	r3, [r7, #4]
   170f6:	0018      	movs	r0, r3
   170f8:	4b03      	ldr	r3, [pc, #12]	; (17108 <prvTraceGetQueueNumber+0x1c>)
   170fa:	4798      	blx	r3
   170fc:	0003      	movs	r3, r0
}
   170fe:	0018      	movs	r0, r3
   17100:	46bd      	mov	sp, r7
   17102:	b002      	add	sp, #8
   17104:	bd80      	pop	{r7, pc}
   17106:	46c0      	nop			; (mov r8, r8)
   17108:	0001a8b5 	.word	0x0001a8b5

0001710c <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   1710c:	b580      	push	{r7, lr}
   1710e:	b082      	sub	sp, #8
   17110:	af00      	add	r7, sp, #0
   17112:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   17114:	687b      	ldr	r3, [r7, #4]
   17116:	0018      	movs	r0, r3
   17118:	4b03      	ldr	r3, [pc, #12]	; (17128 <prvTraceGetQueueType+0x1c>)
   1711a:	4798      	blx	r3
   1711c:	0003      	movs	r3, r0
}
   1711e:	0018      	movs	r0, r3
   17120:	46bd      	mov	sp, r7
   17122:	b002      	add	sp, #8
   17124:	bd80      	pop	{r7, pc}
   17126:	46c0      	nop			; (mov r8, r8)
   17128:	0001a8e1 	.word	0x0001a8e1

0001712c <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   1712c:	b580      	push	{r7, lr}
   1712e:	b082      	sub	sp, #8
   17130:	af00      	add	r7, sp, #0
   17132:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   17134:	687b      	ldr	r3, [r7, #4]
   17136:	0018      	movs	r0, r3
   17138:	4b03      	ldr	r3, [pc, #12]	; (17148 <prvTraceGetTaskNumberLow16+0x1c>)
   1713a:	4798      	blx	r3
   1713c:	0003      	movs	r3, r0
   1713e:	b29b      	uxth	r3, r3
}
   17140:	0018      	movs	r0, r3
   17142:	46bd      	mov	sp, r7
   17144:	b002      	add	sp, #8
   17146:	bd80      	pop	{r7, pc}
   17148:	0001bc11 	.word	0x0001bc11

0001714c <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   1714c:	b580      	push	{r7, lr}
   1714e:	b082      	sub	sp, #8
   17150:	af00      	add	r7, sp, #0
   17152:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   17154:	687b      	ldr	r3, [r7, #4]
   17156:	0018      	movs	r0, r3
   17158:	4b04      	ldr	r3, [pc, #16]	; (1716c <prvTraceGetTaskNumberHigh16+0x20>)
   1715a:	4798      	blx	r3
   1715c:	0003      	movs	r3, r0
   1715e:	0c1b      	lsrs	r3, r3, #16
   17160:	b29b      	uxth	r3, r3
}
   17162:	0018      	movs	r0, r3
   17164:	46bd      	mov	sp, r7
   17166:	b002      	add	sp, #8
   17168:	bd80      	pop	{r7, pc}
   1716a:	46c0      	nop			; (mov r8, r8)
   1716c:	0001bc11 	.word	0x0001bc11

00017170 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   17170:	b580      	push	{r7, lr}
   17172:	b082      	sub	sp, #8
   17174:	af00      	add	r7, sp, #0
   17176:	6078      	str	r0, [r7, #4]
   17178:	000a      	movs	r2, r1
   1717a:	1cbb      	adds	r3, r7, #2
   1717c:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   1717e:	687b      	ldr	r3, [r7, #4]
   17180:	0018      	movs	r0, r3
   17182:	4b08      	ldr	r3, [pc, #32]	; (171a4 <prvTraceSetTaskNumberLow16+0x34>)
   17184:	4798      	blx	r3
   17186:	0003      	movs	r3, r0
   17188:	0c1b      	lsrs	r3, r3, #16
   1718a:	041a      	lsls	r2, r3, #16
   1718c:	1cbb      	adds	r3, r7, #2
   1718e:	881b      	ldrh	r3, [r3, #0]
   17190:	431a      	orrs	r2, r3
   17192:	687b      	ldr	r3, [r7, #4]
   17194:	0011      	movs	r1, r2
   17196:	0018      	movs	r0, r3
   17198:	4b03      	ldr	r3, [pc, #12]	; (171a8 <prvTraceSetTaskNumberLow16+0x38>)
   1719a:	4798      	blx	r3
}
   1719c:	46c0      	nop			; (mov r8, r8)
   1719e:	46bd      	mov	sp, r7
   171a0:	b002      	add	sp, #8
   171a2:	bd80      	pop	{r7, pc}
   171a4:	0001bc11 	.word	0x0001bc11
   171a8:	0001bc39 	.word	0x0001bc39

000171ac <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   171ac:	b580      	push	{r7, lr}
   171ae:	b082      	sub	sp, #8
   171b0:	af00      	add	r7, sp, #0
   171b2:	6078      	str	r0, [r7, #4]
   171b4:	000a      	movs	r2, r1
   171b6:	1cbb      	adds	r3, r7, #2
   171b8:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   171ba:	687b      	ldr	r3, [r7, #4]
   171bc:	0018      	movs	r0, r3
   171be:	4b09      	ldr	r3, [pc, #36]	; (171e4 <prvTraceSetTaskNumberHigh16+0x38>)
   171c0:	4798      	blx	r3
   171c2:	0003      	movs	r3, r0
   171c4:	041b      	lsls	r3, r3, #16
   171c6:	0c1a      	lsrs	r2, r3, #16
   171c8:	1cbb      	adds	r3, r7, #2
   171ca:	881b      	ldrh	r3, [r3, #0]
   171cc:	041b      	lsls	r3, r3, #16
   171ce:	431a      	orrs	r2, r3
   171d0:	687b      	ldr	r3, [r7, #4]
   171d2:	0011      	movs	r1, r2
   171d4:	0018      	movs	r0, r3
   171d6:	4b04      	ldr	r3, [pc, #16]	; (171e8 <prvTraceSetTaskNumberHigh16+0x3c>)
   171d8:	4798      	blx	r3
}
   171da:	46c0      	nop			; (mov r8, r8)
   171dc:	46bd      	mov	sp, r7
   171de:	b002      	add	sp, #8
   171e0:	bd80      	pop	{r7, pc}
   171e2:	46c0      	nop			; (mov r8, r8)
   171e4:	0001bc11 	.word	0x0001bc11
   171e8:	0001bc39 	.word	0x0001bc39

000171ec <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   171ec:	b580      	push	{r7, lr}
   171ee:	b082      	sub	sp, #8
   171f0:	af00      	add	r7, sp, #0
   171f2:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   171f4:	687b      	ldr	r3, [r7, #4]
   171f6:	0018      	movs	r0, r3
   171f8:	4b03      	ldr	r3, [pc, #12]	; (17208 <prvTraceGetQueueNumberLow16+0x1c>)
   171fa:	4798      	blx	r3
   171fc:	0003      	movs	r3, r0
   171fe:	b29b      	uxth	r3, r3
}
   17200:	0018      	movs	r0, r3
   17202:	46bd      	mov	sp, r7
   17204:	b002      	add	sp, #8
   17206:	bd80      	pop	{r7, pc}
   17208:	000170ed 	.word	0x000170ed

0001720c <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   1720c:	b580      	push	{r7, lr}
   1720e:	b082      	sub	sp, #8
   17210:	af00      	add	r7, sp, #0
   17212:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   17214:	687b      	ldr	r3, [r7, #4]
   17216:	0018      	movs	r0, r3
   17218:	4b04      	ldr	r3, [pc, #16]	; (1722c <prvTraceGetQueueNumberHigh16+0x20>)
   1721a:	4798      	blx	r3
   1721c:	0003      	movs	r3, r0
   1721e:	0c1b      	lsrs	r3, r3, #16
   17220:	b29b      	uxth	r3, r3
}
   17222:	0018      	movs	r0, r3
   17224:	46bd      	mov	sp, r7
   17226:	b002      	add	sp, #8
   17228:	bd80      	pop	{r7, pc}
   1722a:	46c0      	nop			; (mov r8, r8)
   1722c:	000170ed 	.word	0x000170ed

00017230 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   17230:	b580      	push	{r7, lr}
   17232:	b082      	sub	sp, #8
   17234:	af00      	add	r7, sp, #0
   17236:	6078      	str	r0, [r7, #4]
   17238:	000a      	movs	r2, r1
   1723a:	1cbb      	adds	r3, r7, #2
   1723c:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   1723e:	687b      	ldr	r3, [r7, #4]
   17240:	0018      	movs	r0, r3
   17242:	4b08      	ldr	r3, [pc, #32]	; (17264 <prvTraceSetQueueNumberLow16+0x34>)
   17244:	4798      	blx	r3
   17246:	0003      	movs	r3, r0
   17248:	0c1b      	lsrs	r3, r3, #16
   1724a:	041a      	lsls	r2, r3, #16
   1724c:	1cbb      	adds	r3, r7, #2
   1724e:	881b      	ldrh	r3, [r3, #0]
   17250:	431a      	orrs	r2, r3
   17252:	687b      	ldr	r3, [r7, #4]
   17254:	0011      	movs	r1, r2
   17256:	0018      	movs	r0, r3
   17258:	4b03      	ldr	r3, [pc, #12]	; (17268 <prvTraceSetQueueNumberLow16+0x38>)
   1725a:	4798      	blx	r3
}
   1725c:	46c0      	nop			; (mov r8, r8)
   1725e:	46bd      	mov	sp, r7
   17260:	b002      	add	sp, #8
   17262:	bd80      	pop	{r7, pc}
   17264:	000170ed 	.word	0x000170ed
   17268:	0001a8c9 	.word	0x0001a8c9

0001726c <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   1726c:	b580      	push	{r7, lr}
   1726e:	b082      	sub	sp, #8
   17270:	af00      	add	r7, sp, #0
   17272:	6078      	str	r0, [r7, #4]
   17274:	000a      	movs	r2, r1
   17276:	1cbb      	adds	r3, r7, #2
   17278:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   1727a:	687b      	ldr	r3, [r7, #4]
   1727c:	0018      	movs	r0, r3
   1727e:	4b09      	ldr	r3, [pc, #36]	; (172a4 <prvTraceSetQueueNumberHigh16+0x38>)
   17280:	4798      	blx	r3
   17282:	0003      	movs	r3, r0
   17284:	041b      	lsls	r3, r3, #16
   17286:	0c1a      	lsrs	r2, r3, #16
   17288:	1cbb      	adds	r3, r7, #2
   1728a:	881b      	ldrh	r3, [r3, #0]
   1728c:	041b      	lsls	r3, r3, #16
   1728e:	431a      	orrs	r2, r3
   17290:	687b      	ldr	r3, [r7, #4]
   17292:	0011      	movs	r1, r2
   17294:	0018      	movs	r0, r3
   17296:	4b04      	ldr	r3, [pc, #16]	; (172a8 <prvTraceSetQueueNumberHigh16+0x3c>)
   17298:	4798      	blx	r3
}
   1729a:	46c0      	nop			; (mov r8, r8)
   1729c:	46bd      	mov	sp, r7
   1729e:	b002      	add	sp, #8
   172a0:	bd80      	pop	{r7, pc}
   172a2:	46c0      	nop			; (mov r8, r8)
   172a4:	000170ed 	.word	0x000170ed
   172a8:	0001a8c9 	.word	0x0001a8c9

000172ac <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   172ac:	b580      	push	{r7, lr}
   172ae:	b084      	sub	sp, #16
   172b0:	af00      	add	r7, sp, #0
   172b2:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   172b4:	2300      	movs	r3, #0
   172b6:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   172b8:	2300      	movs	r3, #0
   172ba:	60bb      	str	r3, [r7, #8]
   172bc:	e018      	b.n	172f0 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   172be:	4b14      	ldr	r3, [pc, #80]	; (17310 <prvAddTaskToStackMonitor+0x64>)
   172c0:	68ba      	ldr	r2, [r7, #8]
   172c2:	00d2      	lsls	r2, r2, #3
   172c4:	58d3      	ldr	r3, [r2, r3]
   172c6:	2b00      	cmp	r3, #0
   172c8:	d10f      	bne.n	172ea <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   172ca:	4b11      	ldr	r3, [pc, #68]	; (17310 <prvAddTaskToStackMonitor+0x64>)
   172cc:	68ba      	ldr	r2, [r7, #8]
   172ce:	00d2      	lsls	r2, r2, #3
   172d0:	6879      	ldr	r1, [r7, #4]
   172d2:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   172d4:	4a0e      	ldr	r2, [pc, #56]	; (17310 <prvAddTaskToStackMonitor+0x64>)
   172d6:	68bb      	ldr	r3, [r7, #8]
   172d8:	00db      	lsls	r3, r3, #3
   172da:	18d3      	adds	r3, r2, r3
   172dc:	3304      	adds	r3, #4
   172de:	2201      	movs	r2, #1
   172e0:	4252      	negs	r2, r2
   172e2:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   172e4:	2301      	movs	r3, #1
   172e6:	60fb      	str	r3, [r7, #12]
			break;
   172e8:	e005      	b.n	172f6 <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   172ea:	68bb      	ldr	r3, [r7, #8]
   172ec:	3301      	adds	r3, #1
   172ee:	60bb      	str	r3, [r7, #8]
   172f0:	68bb      	ldr	r3, [r7, #8]
   172f2:	2b09      	cmp	r3, #9
   172f4:	dde3      	ble.n	172be <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   172f6:	68fb      	ldr	r3, [r7, #12]
   172f8:	2b00      	cmp	r3, #0
   172fa:	d104      	bne.n	17306 <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   172fc:	4b05      	ldr	r3, [pc, #20]	; (17314 <prvAddTaskToStackMonitor+0x68>)
   172fe:	681b      	ldr	r3, [r3, #0]
   17300:	1c5a      	adds	r2, r3, #1
   17302:	4b04      	ldr	r3, [pc, #16]	; (17314 <prvAddTaskToStackMonitor+0x68>)
   17304:	601a      	str	r2, [r3, #0]
	}
}
   17306:	46c0      	nop			; (mov r8, r8)
   17308:	46bd      	mov	sp, r7
   1730a:	b004      	add	sp, #16
   1730c:	bd80      	pop	{r7, pc}
   1730e:	46c0      	nop			; (mov r8, r8)
   17310:	20000cac 	.word	0x20000cac
   17314:	20000cfc 	.word	0x20000cfc

00017318 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   17318:	b590      	push	{r4, r7, lr}
   1731a:	b085      	sub	sp, #20
   1731c:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   1731e:	2300      	movs	r3, #0
   17320:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   17322:	4b2b      	ldr	r3, [pc, #172]	; (173d0 <prvReportStackUsage+0xb8>)
   17324:	681b      	ldr	r3, [r3, #0]
   17326:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   17328:	4b29      	ldr	r3, [pc, #164]	; (173d0 <prvReportStackUsage+0xb8>)
   1732a:	681a      	ldr	r2, [r3, #0]
   1732c:	4b29      	ldr	r3, [pc, #164]	; (173d4 <prvReportStackUsage+0xbc>)
   1732e:	00d2      	lsls	r2, r2, #3
   17330:	58d3      	ldr	r3, [r2, r3]
   17332:	2b00      	cmp	r3, #0
   17334:	d035      	beq.n	173a2 <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   17336:	4b26      	ldr	r3, [pc, #152]	; (173d0 <prvReportStackUsage+0xb8>)
   17338:	681a      	ldr	r2, [r3, #0]
   1733a:	4b26      	ldr	r3, [pc, #152]	; (173d4 <prvReportStackUsage+0xbc>)
   1733c:	00d2      	lsls	r2, r2, #3
   1733e:	58d3      	ldr	r3, [r2, r3]
   17340:	0018      	movs	r0, r3
   17342:	4b25      	ldr	r3, [pc, #148]	; (173d8 <prvReportStackUsage+0xc0>)
   17344:	4798      	blx	r3
   17346:	0003      	movs	r3, r0
   17348:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   1734a:	4b21      	ldr	r3, [pc, #132]	; (173d0 <prvReportStackUsage+0xb8>)
   1734c:	681b      	ldr	r3, [r3, #0]
   1734e:	4a21      	ldr	r2, [pc, #132]	; (173d4 <prvReportStackUsage+0xbc>)
   17350:	00db      	lsls	r3, r3, #3
   17352:	18d3      	adds	r3, r2, r3
   17354:	3304      	adds	r3, #4
   17356:	681a      	ldr	r2, [r3, #0]
   17358:	687b      	ldr	r3, [r7, #4]
   1735a:	429a      	cmp	r2, r3
   1735c:	d907      	bls.n	1736e <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   1735e:	4b1c      	ldr	r3, [pc, #112]	; (173d0 <prvReportStackUsage+0xb8>)
   17360:	681b      	ldr	r3, [r3, #0]
   17362:	4a1c      	ldr	r2, [pc, #112]	; (173d4 <prvReportStackUsage+0xbc>)
   17364:	00db      	lsls	r3, r3, #3
   17366:	18d3      	adds	r3, r2, r3
   17368:	3304      	adds	r3, #4
   1736a:	687a      	ldr	r2, [r7, #4]
   1736c:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   1736e:	4b18      	ldr	r3, [pc, #96]	; (173d0 <prvReportStackUsage+0xb8>)
   17370:	681a      	ldr	r2, [r3, #0]
   17372:	4b18      	ldr	r3, [pc, #96]	; (173d4 <prvReportStackUsage+0xbc>)
   17374:	00d2      	lsls	r2, r2, #3
   17376:	58d3      	ldr	r3, [r2, r3]
   17378:	0018      	movs	r0, r3
   1737a:	4b18      	ldr	r3, [pc, #96]	; (173dc <prvReportStackUsage+0xc4>)
   1737c:	4798      	blx	r3
   1737e:	0003      	movs	r3, r0
   17380:	b2db      	uxtb	r3, r3
   17382:	0019      	movs	r1, r3
   17384:	4b12      	ldr	r3, [pc, #72]	; (173d0 <prvReportStackUsage+0xb8>)
   17386:	681b      	ldr	r3, [r3, #0]
   17388:	4a12      	ldr	r2, [pc, #72]	; (173d4 <prvReportStackUsage+0xbc>)
   1738a:	00db      	lsls	r3, r3, #3
   1738c:	18d3      	adds	r3, r2, r3
   1738e:	3304      	adds	r3, #4
   17390:	681b      	ldr	r3, [r3, #0]
   17392:	000a      	movs	r2, r1
   17394:	2103      	movs	r1, #3
   17396:	20ea      	movs	r0, #234	; 0xea
   17398:	4c11      	ldr	r4, [pc, #68]	; (173e0 <prvReportStackUsage+0xc8>)
   1739a:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   1739c:	68fb      	ldr	r3, [r7, #12]
   1739e:	3301      	adds	r3, #1
   173a0:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   173a2:	4b0b      	ldr	r3, [pc, #44]	; (173d0 <prvReportStackUsage+0xb8>)
   173a4:	681b      	ldr	r3, [r3, #0]
   173a6:	1c5a      	adds	r2, r3, #1
   173a8:	4b0e      	ldr	r3, [pc, #56]	; (173e4 <prvReportStackUsage+0xcc>)
   173aa:	210a      	movs	r1, #10
   173ac:	0010      	movs	r0, r2
   173ae:	4798      	blx	r3
   173b0:	000b      	movs	r3, r1
   173b2:	001a      	movs	r2, r3
   173b4:	4b06      	ldr	r3, [pc, #24]	; (173d0 <prvReportStackUsage+0xb8>)
   173b6:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   173b8:	68fb      	ldr	r3, [r7, #12]
   173ba:	2b00      	cmp	r3, #0
   173bc:	dc04      	bgt.n	173c8 <prvReportStackUsage+0xb0>
   173be:	4b04      	ldr	r3, [pc, #16]	; (173d0 <prvReportStackUsage+0xb8>)
   173c0:	681a      	ldr	r2, [r3, #0]
   173c2:	68bb      	ldr	r3, [r7, #8]
   173c4:	429a      	cmp	r2, r3
   173c6:	d1af      	bne.n	17328 <prvReportStackUsage+0x10>
}
   173c8:	46c0      	nop			; (mov r8, r8)
   173ca:	46bd      	mov	sp, r7
   173cc:	b005      	add	sp, #20
   173ce:	bd90      	pop	{r4, r7, pc}
   173d0:	20000d00 	.word	0x20000d00
   173d4:	20000cac 	.word	0x20000cac
   173d8:	0001bdb1 	.word	0x0001bdb1
   173dc:	0001712d 	.word	0x0001712d
   173e0:	00017c75 	.word	0x00017c75
   173e4:	00031da5 	.word	0x00031da5

000173e8 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   173e8:	b580      	push	{r7, lr}
   173ea:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   173ec:	4b02      	ldr	r3, [pc, #8]	; (173f8 <prvTraceGetCurrentTaskHandle+0x10>)
   173ee:	4798      	blx	r3
   173f0:	0003      	movs	r3, r0
}
   173f2:	0018      	movs	r0, r3
   173f4:	46bd      	mov	sp, r7
   173f6:	bd80      	pop	{r7, pc}
   173f8:	0001be5d 	.word	0x0001be5d

000173fc <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   173fc:	b590      	push	{r4, r7, lr}
   173fe:	b085      	sub	sp, #20
   17400:	af02      	add	r7, sp, #8
   17402:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   17404:	4b14      	ldr	r3, [pc, #80]	; (17458 <vTraceEnable+0x5c>)
   17406:	4798      	blx	r3

	if (startOption == TRC_START)
   17408:	687b      	ldr	r3, [r7, #4]
   1740a:	2b01      	cmp	r3, #1
   1740c:	d102      	bne.n	17414 <vTraceEnable+0x18>
	{
		vTraceStart();
   1740e:	4b13      	ldr	r3, [pc, #76]	; (1745c <vTraceEnable+0x60>)
   17410:	4798      	blx	r3
   17412:	e00e      	b.n	17432 <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   17414:	687b      	ldr	r3, [r7, #4]
   17416:	2b02      	cmp	r3, #2
   17418:	d104      	bne.n	17424 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   1741a:	4b11      	ldr	r3, [pc, #68]	; (17460 <vTraceEnable+0x64>)
   1741c:	0018      	movs	r0, r3
   1741e:	4b11      	ldr	r3, [pc, #68]	; (17464 <vTraceEnable+0x68>)
   17420:	4798      	blx	r3
   17422:	e006      	b.n	17432 <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   17424:	687b      	ldr	r3, [r7, #4]
   17426:	2b00      	cmp	r3, #0
   17428:	d003      	beq.n	17432 <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   1742a:	4b0f      	ldr	r3, [pc, #60]	; (17468 <vTraceEnable+0x6c>)
   1742c:	0018      	movs	r0, r3
   1742e:	4b0d      	ldr	r3, [pc, #52]	; (17464 <vTraceEnable+0x68>)
   17430:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   17432:	4b0e      	ldr	r3, [pc, #56]	; (1746c <vTraceEnable+0x70>)
   17434:	681b      	ldr	r3, [r3, #0]
   17436:	2b00      	cmp	r3, #0
   17438:	d10a      	bne.n	17450 <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   1743a:	2396      	movs	r3, #150	; 0x96
   1743c:	005a      	lsls	r2, r3, #1
   1743e:	490c      	ldr	r1, [pc, #48]	; (17470 <vTraceEnable+0x74>)
   17440:	480c      	ldr	r0, [pc, #48]	; (17474 <vTraceEnable+0x78>)
   17442:	4b0a      	ldr	r3, [pc, #40]	; (1746c <vTraceEnable+0x70>)
   17444:	9301      	str	r3, [sp, #4]
   17446:	2304      	movs	r3, #4
   17448:	9300      	str	r3, [sp, #0]
   1744a:	2300      	movs	r3, #0
   1744c:	4c0a      	ldr	r4, [pc, #40]	; (17478 <vTraceEnable+0x7c>)
   1744e:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   17450:	46c0      	nop			; (mov r8, r8)
   17452:	46bd      	mov	sp, r7
   17454:	b003      	add	sp, #12
   17456:	bd90      	pop	{r4, r7, pc}
   17458:	00018341 	.word	0x00018341
   1745c:	00017899 	.word	0x00017899
   17460:	00036864 	.word	0x00036864
   17464:	000189e9 	.word	0x000189e9
   17468:	000368a4 	.word	0x000368a4
   1746c:	20000ca8 	.word	0x20000ca8
   17470:	000368d8 	.word	0x000368d8
   17474:	0001747d 	.word	0x0001747d
   17478:	0001adb5 	.word	0x0001adb5

0001747c <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   1747c:	b580      	push	{r7, lr}
   1747e:	b082      	sub	sp, #8
   17480:	af00      	add	r7, sp, #0
   17482:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   17484:	4b04      	ldr	r3, [pc, #16]	; (17498 <TzCtrl+0x1c>)
   17486:	4798      	blx	r3
   17488:	1e03      	subs	r3, r0, #0
   1748a:	d001      	beq.n	17490 <TzCtrl+0x14>
		{
			prvReportStackUsage();
   1748c:	4b03      	ldr	r3, [pc, #12]	; (1749c <TzCtrl+0x20>)
   1748e:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   17490:	2004      	movs	r0, #4
   17492:	4b03      	ldr	r3, [pc, #12]	; (174a0 <TzCtrl+0x24>)
   17494:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   17496:	e7f5      	b.n	17484 <TzCtrl+0x8>
   17498:	000178dd 	.word	0x000178dd
   1749c:	00017319 	.word	0x00017319
   174a0:	0001b151 	.word	0x0001b151

000174a4 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   174a4:	b580      	push	{r7, lr}
   174a6:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   174a8:	4b60      	ldr	r3, [pc, #384]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   174aa:	681b      	ldr	r3, [r3, #0]
   174ac:	2209      	movs	r2, #9
   174ae:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   174b0:	4b5e      	ldr	r3, [pc, #376]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   174b2:	681b      	ldr	r3, [r3, #0]
   174b4:	2264      	movs	r2, #100	; 0x64
   174b6:	210a      	movs	r1, #10
   174b8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   174ba:	4b5c      	ldr	r3, [pc, #368]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   174bc:	681b      	ldr	r3, [r3, #0]
   174be:	2265      	movs	r2, #101	; 0x65
   174c0:	210a      	movs	r1, #10
   174c2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   174c4:	4b59      	ldr	r3, [pc, #356]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   174c6:	681b      	ldr	r3, [r3, #0]
   174c8:	2266      	movs	r2, #102	; 0x66
   174ca:	210a      	movs	r1, #10
   174cc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   174ce:	4b57      	ldr	r3, [pc, #348]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   174d0:	681b      	ldr	r3, [r3, #0]
   174d2:	2267      	movs	r2, #103	; 0x67
   174d4:	210f      	movs	r1, #15
   174d6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   174d8:	4b54      	ldr	r3, [pc, #336]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   174da:	681b      	ldr	r3, [r3, #0]
   174dc:	2268      	movs	r2, #104	; 0x68
   174de:	2105      	movs	r1, #5
   174e0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   174e2:	4b52      	ldr	r3, [pc, #328]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   174e4:	681b      	ldr	r3, [r3, #0]
   174e6:	2269      	movs	r2, #105	; 0x69
   174e8:	2105      	movs	r1, #5
   174ea:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   174ec:	4b4f      	ldr	r3, [pc, #316]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   174ee:	681b      	ldr	r3, [r3, #0]
   174f0:	226a      	movs	r2, #106	; 0x6a
   174f2:	2105      	movs	r1, #5
   174f4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   174f6:	4b4d      	ldr	r3, [pc, #308]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   174f8:	681b      	ldr	r3, [r3, #0]
   174fa:	226b      	movs	r2, #107	; 0x6b
   174fc:	2105      	movs	r1, #5
   174fe:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   17500:	4b4a      	ldr	r3, [pc, #296]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   17502:	681b      	ldr	r3, [r3, #0]
   17504:	226c      	movs	r2, #108	; 0x6c
   17506:	2105      	movs	r1, #5
   17508:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   1750a:	4b48      	ldr	r3, [pc, #288]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   1750c:	681b      	ldr	r3, [r3, #0]
   1750e:	2270      	movs	r2, #112	; 0x70
   17510:	210f      	movs	r1, #15
   17512:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   17514:	4b45      	ldr	r3, [pc, #276]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   17516:	681b      	ldr	r3, [r3, #0]
   17518:	2271      	movs	r2, #113	; 0x71
   1751a:	210f      	movs	r1, #15
   1751c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   1751e:	4b43      	ldr	r3, [pc, #268]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   17520:	681b      	ldr	r3, [r3, #0]
   17522:	2272      	movs	r2, #114	; 0x72
   17524:	210f      	movs	r1, #15
   17526:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   17528:	4b40      	ldr	r3, [pc, #256]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   1752a:	681b      	ldr	r3, [r3, #0]
   1752c:	2273      	movs	r2, #115	; 0x73
   1752e:	210f      	movs	r1, #15
   17530:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   17532:	4b3e      	ldr	r3, [pc, #248]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   17534:	681b      	ldr	r3, [r3, #0]
   17536:	2274      	movs	r2, #116	; 0x74
   17538:	210f      	movs	r1, #15
   1753a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   1753c:	4b3b      	ldr	r3, [pc, #236]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   1753e:	681b      	ldr	r3, [r3, #0]
   17540:	2275      	movs	r2, #117	; 0x75
   17542:	210f      	movs	r1, #15
   17544:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   17546:	4b39      	ldr	r3, [pc, #228]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   17548:	681b      	ldr	r3, [r3, #0]
   1754a:	2276      	movs	r2, #118	; 0x76
   1754c:	210f      	movs	r1, #15
   1754e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   17550:	4b36      	ldr	r3, [pc, #216]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   17552:	681b      	ldr	r3, [r3, #0]
   17554:	2277      	movs	r2, #119	; 0x77
   17556:	210f      	movs	r1, #15
   17558:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   1755a:	4b34      	ldr	r3, [pc, #208]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   1755c:	681b      	ldr	r3, [r3, #0]
   1755e:	2278      	movs	r2, #120	; 0x78
   17560:	210f      	movs	r1, #15
   17562:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   17564:	4b31      	ldr	r3, [pc, #196]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   17566:	681b      	ldr	r3, [r3, #0]
   17568:	227c      	movs	r2, #124	; 0x7c
   1756a:	2110      	movs	r1, #16
   1756c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   1756e:	4b2f      	ldr	r3, [pc, #188]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   17570:	681b      	ldr	r3, [r3, #0]
   17572:	227d      	movs	r2, #125	; 0x7d
   17574:	2110      	movs	r1, #16
   17576:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   17578:	4b2c      	ldr	r3, [pc, #176]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   1757a:	681b      	ldr	r3, [r3, #0]
   1757c:	227e      	movs	r2, #126	; 0x7e
   1757e:	2110      	movs	r1, #16
   17580:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   17582:	4b2a      	ldr	r3, [pc, #168]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   17584:	681b      	ldr	r3, [r3, #0]
   17586:	227f      	movs	r2, #127	; 0x7f
   17588:	2113      	movs	r1, #19
   1758a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   1758c:	4b27      	ldr	r3, [pc, #156]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   1758e:	681b      	ldr	r3, [r3, #0]
   17590:	2280      	movs	r2, #128	; 0x80
   17592:	2111      	movs	r1, #17
   17594:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   17596:	4b25      	ldr	r3, [pc, #148]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   17598:	681b      	ldr	r3, [r3, #0]
   1759a:	2281      	movs	r2, #129	; 0x81
   1759c:	2110      	movs	r1, #16
   1759e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   175a0:	4b22      	ldr	r3, [pc, #136]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   175a2:	681b      	ldr	r3, [r3, #0]
   175a4:	2282      	movs	r2, #130	; 0x82
   175a6:	2113      	movs	r1, #19
   175a8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   175aa:	4b20      	ldr	r3, [pc, #128]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   175ac:	681b      	ldr	r3, [r3, #0]
   175ae:	2283      	movs	r2, #131	; 0x83
   175b0:	2113      	movs	r1, #19
   175b2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   175b4:	4b1d      	ldr	r3, [pc, #116]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   175b6:	681b      	ldr	r3, [r3, #0]
   175b8:	2284      	movs	r2, #132	; 0x84
   175ba:	2113      	movs	r1, #19
   175bc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   175be:	4b1b      	ldr	r3, [pc, #108]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   175c0:	681b      	ldr	r3, [r3, #0]
   175c2:	2288      	movs	r2, #136	; 0x88
   175c4:	2100      	movs	r1, #0
   175c6:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   175c8:	4b18      	ldr	r3, [pc, #96]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   175ca:	681b      	ldr	r3, [r3, #0]
   175cc:	228a      	movs	r2, #138	; 0x8a
   175ce:	21a0      	movs	r1, #160	; 0xa0
   175d0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   175d2:	4b16      	ldr	r3, [pc, #88]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   175d4:	681b      	ldr	r3, [r3, #0]
   175d6:	228c      	movs	r2, #140	; 0x8c
   175d8:	21a0      	movs	r1, #160	; 0xa0
   175da:	0049      	lsls	r1, r1, #1
   175dc:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   175de:	4b13      	ldr	r3, [pc, #76]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   175e0:	681b      	ldr	r3, [r3, #0]
   175e2:	228e      	movs	r2, #142	; 0x8e
   175e4:	21f0      	movs	r1, #240	; 0xf0
   175e6:	0049      	lsls	r1, r1, #1
   175e8:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   175ea:	4b10      	ldr	r3, [pc, #64]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   175ec:	681b      	ldr	r3, [r3, #0]
   175ee:	2290      	movs	r2, #144	; 0x90
   175f0:	490f      	ldr	r1, [pc, #60]	; (17630 <vTraceInitObjectPropertyTable+0x18c>)
   175f2:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   175f4:	4b0d      	ldr	r3, [pc, #52]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   175f6:	681b      	ldr	r3, [r3, #0]
   175f8:	2292      	movs	r2, #146	; 0x92
   175fa:	490e      	ldr	r1, [pc, #56]	; (17634 <vTraceInitObjectPropertyTable+0x190>)
   175fc:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   175fe:	4b0b      	ldr	r3, [pc, #44]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   17600:	681b      	ldr	r3, [r3, #0]
   17602:	2294      	movs	r2, #148	; 0x94
   17604:	490c      	ldr	r1, [pc, #48]	; (17638 <vTraceInitObjectPropertyTable+0x194>)
   17606:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   17608:	4b08      	ldr	r3, [pc, #32]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   1760a:	681b      	ldr	r3, [r3, #0]
   1760c:	2296      	movs	r2, #150	; 0x96
   1760e:	490b      	ldr	r1, [pc, #44]	; (1763c <vTraceInitObjectPropertyTable+0x198>)
   17610:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   17612:	4b06      	ldr	r3, [pc, #24]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   17614:	681b      	ldr	r3, [r3, #0]
   17616:	2298      	movs	r2, #152	; 0x98
   17618:	218c      	movs	r1, #140	; 0x8c
   1761a:	00c9      	lsls	r1, r1, #3
   1761c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   1761e:	4b03      	ldr	r3, [pc, #12]	; (1762c <vTraceInitObjectPropertyTable+0x188>)
   17620:	681b      	ldr	r3, [r3, #0]
   17622:	4a07      	ldr	r2, [pc, #28]	; (17640 <vTraceInitObjectPropertyTable+0x19c>)
   17624:	661a      	str	r2, [r3, #96]	; 0x60
}
   17626:	46c0      	nop			; (mov r8, r8)
   17628:	46bd      	mov	sp, r7
   1762a:	bd80      	pop	{r7, pc}
   1762c:	20000dc0 	.word	0x20000dc0
   17630:	000002fd 	.word	0x000002fd
   17634:	00000352 	.word	0x00000352
   17638:	000003a2 	.word	0x000003a2
   1763c:	00000401 	.word	0x00000401
   17640:	000004bf 	.word	0x000004bf

00017644 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   17644:	b580      	push	{r7, lr}
   17646:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   17648:	4b2e      	ldr	r3, [pc, #184]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   1764a:	2200      	movs	r2, #0
   1764c:	825a      	strh	r2, [r3, #18]
   1764e:	4b2d      	ldr	r3, [pc, #180]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   17650:	8a5a      	ldrh	r2, [r3, #18]
   17652:	4b2c      	ldr	r3, [pc, #176]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   17654:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   17656:	4b2b      	ldr	r3, [pc, #172]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   17658:	220a      	movs	r2, #10
   1765a:	829a      	strh	r2, [r3, #20]
   1765c:	4b29      	ldr	r3, [pc, #164]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   1765e:	8a9a      	ldrh	r2, [r3, #20]
   17660:	4b28      	ldr	r3, [pc, #160]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   17662:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   17664:	4b27      	ldr	r3, [pc, #156]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   17666:	2214      	movs	r2, #20
   17668:	82da      	strh	r2, [r3, #22]
   1766a:	4b26      	ldr	r3, [pc, #152]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   1766c:	8ada      	ldrh	r2, [r3, #22]
   1766e:	4b25      	ldr	r3, [pc, #148]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   17670:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   17672:	4b24      	ldr	r3, [pc, #144]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   17674:	221e      	movs	r2, #30
   17676:	831a      	strh	r2, [r3, #24]
   17678:	4b22      	ldr	r3, [pc, #136]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   1767a:	8b1a      	ldrh	r2, [r3, #24]
   1767c:	4b21      	ldr	r3, [pc, #132]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   1767e:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   17680:	4b20      	ldr	r3, [pc, #128]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   17682:	222d      	movs	r2, #45	; 0x2d
   17684:	835a      	strh	r2, [r3, #26]
   17686:	4b1f      	ldr	r3, [pc, #124]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   17688:	8b5a      	ldrh	r2, [r3, #26]
   1768a:	4b1e      	ldr	r3, [pc, #120]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   1768c:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   1768e:	4b1d      	ldr	r3, [pc, #116]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   17690:	2232      	movs	r2, #50	; 0x32
   17692:	839a      	strh	r2, [r3, #28]
   17694:	4b1b      	ldr	r3, [pc, #108]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   17696:	8b9a      	ldrh	r2, [r3, #28]
   17698:	4b1a      	ldr	r3, [pc, #104]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   1769a:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   1769c:	4b19      	ldr	r3, [pc, #100]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   1769e:	2237      	movs	r2, #55	; 0x37
   176a0:	83da      	strh	r2, [r3, #30]
   176a2:	4b18      	ldr	r3, [pc, #96]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   176a4:	8bda      	ldrh	r2, [r3, #30]
   176a6:	4b17      	ldr	r3, [pc, #92]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   176a8:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   176aa:	4b16      	ldr	r3, [pc, #88]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   176ac:	223c      	movs	r2, #60	; 0x3c
   176ae:	841a      	strh	r2, [r3, #32]
   176b0:	4b14      	ldr	r3, [pc, #80]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   176b2:	8c1a      	ldrh	r2, [r3, #32]
   176b4:	4b13      	ldr	r3, [pc, #76]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   176b6:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   176b8:	4b12      	ldr	r3, [pc, #72]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   176ba:	2241      	movs	r2, #65	; 0x41
   176bc:	845a      	strh	r2, [r3, #34]	; 0x22
   176be:	4b11      	ldr	r3, [pc, #68]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   176c0:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   176c2:	4b10      	ldr	r3, [pc, #64]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   176c4:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   176c6:	4b0f      	ldr	r3, [pc, #60]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   176c8:	2209      	movs	r2, #9
   176ca:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   176cc:	4b0d      	ldr	r3, [pc, #52]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   176ce:	2213      	movs	r2, #19
   176d0:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   176d2:	4b0c      	ldr	r3, [pc, #48]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   176d4:	221d      	movs	r2, #29
   176d6:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   176d8:	4b0a      	ldr	r3, [pc, #40]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   176da:	222c      	movs	r2, #44	; 0x2c
   176dc:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   176de:	4b09      	ldr	r3, [pc, #36]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   176e0:	2231      	movs	r2, #49	; 0x31
   176e2:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   176e4:	4b07      	ldr	r3, [pc, #28]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   176e6:	2236      	movs	r2, #54	; 0x36
   176e8:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   176ea:	4b06      	ldr	r3, [pc, #24]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   176ec:	223b      	movs	r2, #59	; 0x3b
   176ee:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   176f0:	4b04      	ldr	r3, [pc, #16]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   176f2:	2240      	movs	r2, #64	; 0x40
   176f4:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   176f6:	4b03      	ldr	r3, [pc, #12]	; (17704 <vTraceInitObjectHandleStack+0xc0>)
   176f8:	2245      	movs	r2, #69	; 0x45
   176fa:	869a      	strh	r2, [r3, #52]	; 0x34
}
   176fc:	46c0      	nop			; (mov r8, r8)
   176fe:	46bd      	mov	sp, r7
   17700:	bd80      	pop	{r7, pc}
   17702:	46c0      	nop			; (mov r8, r8)
   17704:	20000d30 	.word	0x20000d30

00017708 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   17708:	b580      	push	{r7, lr}
   1770a:	b082      	sub	sp, #8
   1770c:	af00      	add	r7, sp, #0
   1770e:	0002      	movs	r2, r0
   17710:	1dfb      	adds	r3, r7, #7
   17712:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   17714:	1dfb      	adds	r3, r7, #7
   17716:	781b      	ldrb	r3, [r3, #0]
   17718:	2b08      	cmp	r3, #8
   1771a:	d816      	bhi.n	1774a <pszTraceGetErrorNotEnoughHandles+0x42>
   1771c:	009a      	lsls	r2, r3, #2
   1771e:	4b0d      	ldr	r3, [pc, #52]	; (17754 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   17720:	18d3      	adds	r3, r2, r3
   17722:	681b      	ldr	r3, [r3, #0]
   17724:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   17726:	4b0c      	ldr	r3, [pc, #48]	; (17758 <pszTraceGetErrorNotEnoughHandles+0x50>)
   17728:	e010      	b.n	1774c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   1772a:	4b0c      	ldr	r3, [pc, #48]	; (1775c <pszTraceGetErrorNotEnoughHandles+0x54>)
   1772c:	e00e      	b.n	1774c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   1772e:	4b0c      	ldr	r3, [pc, #48]	; (17760 <pszTraceGetErrorNotEnoughHandles+0x58>)
   17730:	e00c      	b.n	1774c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   17732:	4b0c      	ldr	r3, [pc, #48]	; (17764 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   17734:	e00a      	b.n	1774c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   17736:	4b0c      	ldr	r3, [pc, #48]	; (17768 <pszTraceGetErrorNotEnoughHandles+0x60>)
   17738:	e008      	b.n	1774c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   1773a:	4b0c      	ldr	r3, [pc, #48]	; (1776c <pszTraceGetErrorNotEnoughHandles+0x64>)
   1773c:	e006      	b.n	1774c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   1773e:	4b0c      	ldr	r3, [pc, #48]	; (17770 <pszTraceGetErrorNotEnoughHandles+0x68>)
   17740:	e004      	b.n	1774c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   17742:	4b0c      	ldr	r3, [pc, #48]	; (17774 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   17744:	e002      	b.n	1774c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   17746:	4b0c      	ldr	r3, [pc, #48]	; (17778 <pszTraceGetErrorNotEnoughHandles+0x70>)
   17748:	e000      	b.n	1774c <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   1774a:	4b0c      	ldr	r3, [pc, #48]	; (1777c <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   1774c:	0018      	movs	r0, r3
   1774e:	46bd      	mov	sp, r7
   17750:	b002      	add	sp, #8
   17752:	bd80      	pop	{r7, pc}
   17754:	00036be0 	.word	0x00036be0
   17758:	000368e0 	.word	0x000368e0
   1775c:	00036928 	.word	0x00036928
   17760:	00036970 	.word	0x00036970
   17764:	000369c4 	.word	0x000369c4
   17768:	00036a10 	.word	0x00036a10
   1776c:	00036a5c 	.word	0x00036a5c
   17770:	00036aa8 	.word	0x00036aa8
   17774:	00036afc 	.word	0x00036afc
   17778:	00036b54 	.word	0x00036b54
   1777c:	00036bb0 	.word	0x00036bb0

00017780 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   17780:	b590      	push	{r4, r7, lr}
   17782:	b087      	sub	sp, #28
   17784:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   17786:	2317      	movs	r3, #23
   17788:	18fb      	adds	r3, r7, r3
   1778a:	2200      	movs	r2, #0
   1778c:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   1778e:	4b36      	ldr	r3, [pc, #216]	; (17868 <uiTraceStart+0xe8>)
   17790:	681b      	ldr	r3, [r3, #0]
   17792:	2b00      	cmp	r3, #0
   17794:	d10b      	bne.n	177ae <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   17796:	4b34      	ldr	r3, [pc, #208]	; (17868 <uiTraceStart+0xe8>)
   17798:	681b      	ldr	r3, [r3, #0]
   1779a:	2b00      	cmp	r3, #0
   1779c:	d105      	bne.n	177aa <uiTraceStart+0x2a>
   1779e:	4b33      	ldr	r3, [pc, #204]	; (1786c <uiTraceStart+0xec>)
   177a0:	0018      	movs	r0, r3
   177a2:	4b33      	ldr	r3, [pc, #204]	; (17870 <uiTraceStart+0xf0>)
   177a4:	4798      	blx	r3
   177a6:	2300      	movs	r3, #0
   177a8:	e059      	b.n	1785e <uiTraceStart+0xde>
		return 0;
   177aa:	2300      	movs	r3, #0
   177ac:	e057      	b.n	1785e <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   177ae:	4b2e      	ldr	r3, [pc, #184]	; (17868 <uiTraceStart+0xe8>)
   177b0:	681b      	ldr	r3, [r3, #0]
   177b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   177b4:	2b01      	cmp	r3, #1
   177b6:	d101      	bne.n	177bc <uiTraceStart+0x3c>
		return 1; /* Already running */
   177b8:	2301      	movs	r3, #1
   177ba:	e050      	b.n	1785e <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   177bc:	4b2d      	ldr	r3, [pc, #180]	; (17874 <uiTraceStart+0xf4>)
   177be:	681b      	ldr	r3, [r3, #0]
   177c0:	2b00      	cmp	r3, #0
   177c2:	d149      	bne.n	17858 <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   177c4:	f3ef 8310 	mrs	r3, PRIMASK
   177c8:	60bb      	str	r3, [r7, #8]
  return(result);
   177ca:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   177cc:	613b      	str	r3, [r7, #16]
   177ce:	2301      	movs	r3, #1
   177d0:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   177d2:	68fb      	ldr	r3, [r7, #12]
   177d4:	f383 8810 	msr	PRIMASK, r3
   177d8:	4b27      	ldr	r3, [pc, #156]	; (17878 <uiTraceStart+0xf8>)
   177da:	681b      	ldr	r3, [r3, #0]
   177dc:	1c5a      	adds	r2, r3, #1
   177de:	4b26      	ldr	r3, [pc, #152]	; (17878 <uiTraceStart+0xf8>)
   177e0:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   177e2:	4b21      	ldr	r3, [pc, #132]	; (17868 <uiTraceStart+0xe8>)
   177e4:	681b      	ldr	r3, [r3, #0]
   177e6:	2201      	movs	r2, #1
   177e8:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   177ea:	4b24      	ldr	r3, [pc, #144]	; (1787c <uiTraceStart+0xfc>)
   177ec:	4798      	blx	r3
   177ee:	0003      	movs	r3, r0
   177f0:	0018      	movs	r0, r3
   177f2:	4b23      	ldr	r3, [pc, #140]	; (17880 <uiTraceStart+0x100>)
   177f4:	4798      	blx	r3
   177f6:	0003      	movs	r3, r0
   177f8:	001a      	movs	r2, r3
   177fa:	2317      	movs	r3, #23
   177fc:	18fb      	adds	r3, r7, r3
   177fe:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   17800:	2317      	movs	r3, #23
   17802:	18fb      	adds	r3, r7, r3
   17804:	781b      	ldrb	r3, [r3, #0]
   17806:	2b00      	cmp	r3, #0
   17808:	d116      	bne.n	17838 <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   1780a:	2317      	movs	r3, #23
   1780c:	18fc      	adds	r4, r7, r3
   1780e:	2003      	movs	r0, #3
   17810:	4b1c      	ldr	r3, [pc, #112]	; (17884 <uiTraceStart+0x104>)
   17812:	4798      	blx	r3
   17814:	0003      	movs	r3, r0
   17816:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   17818:	4a1b      	ldr	r2, [pc, #108]	; (17888 <uiTraceStart+0x108>)
   1781a:	2317      	movs	r3, #23
   1781c:	18fb      	adds	r3, r7, r3
   1781e:	781b      	ldrb	r3, [r3, #0]
   17820:	0019      	movs	r1, r3
   17822:	2003      	movs	r0, #3
   17824:	4b19      	ldr	r3, [pc, #100]	; (1788c <uiTraceStart+0x10c>)
   17826:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   17828:	2317      	movs	r3, #23
   1782a:	18fb      	adds	r3, r7, r3
   1782c:	781b      	ldrb	r3, [r3, #0]
   1782e:	2200      	movs	r2, #0
   17830:	0019      	movs	r1, r3
   17832:	2003      	movs	r0, #3
   17834:	4b16      	ldr	r3, [pc, #88]	; (17890 <uiTraceStart+0x110>)
   17836:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   17838:	2317      	movs	r3, #23
   1783a:	18fb      	adds	r3, r7, r3
   1783c:	781b      	ldrb	r3, [r3, #0]
   1783e:	0018      	movs	r0, r3
   17840:	4b14      	ldr	r3, [pc, #80]	; (17894 <uiTraceStart+0x114>)
   17842:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   17844:	4b0c      	ldr	r3, [pc, #48]	; (17878 <uiTraceStart+0xf8>)
   17846:	681b      	ldr	r3, [r3, #0]
   17848:	1e5a      	subs	r2, r3, #1
   1784a:	4b0b      	ldr	r3, [pc, #44]	; (17878 <uiTraceStart+0xf8>)
   1784c:	601a      	str	r2, [r3, #0]
   1784e:	693b      	ldr	r3, [r7, #16]
   17850:	607b      	str	r3, [r7, #4]
   17852:	687b      	ldr	r3, [r7, #4]
   17854:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   17858:	4b03      	ldr	r3, [pc, #12]	; (17868 <uiTraceStart+0xe8>)
   1785a:	681b      	ldr	r3, [r3, #0]
   1785c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   1785e:	0018      	movs	r0, r3
   17860:	46bd      	mov	sp, r7
   17862:	b007      	add	sp, #28
   17864:	bd90      	pop	{r4, r7, pc}
   17866:	46c0      	nop			; (mov r8, r8)
   17868:	20000dc0 	.word	0x20000dc0
   1786c:	00036c04 	.word	0x00036c04
   17870:	000189e9 	.word	0x000189e9
   17874:	20000d20 	.word	0x20000d20
   17878:	20000d18 	.word	0x20000d18
   1787c:	000173e9 	.word	0x000173e9
   17880:	0001712d 	.word	0x0001712d
   17884:	000186cd 	.word	0x000186cd
   17888:	00036c48 	.word	0x00036c48
   1788c:	000188fd 	.word	0x000188fd
   17890:	00018061 	.word	0x00018061
   17894:	00017f49 	.word	0x00017f49

00017898 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   17898:	b580      	push	{r7, lr}
   1789a:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   1789c:	4b02      	ldr	r3, [pc, #8]	; (178a8 <vTraceStart+0x10>)
   1789e:	4798      	blx	r3
}
   178a0:	46c0      	nop			; (mov r8, r8)
   178a2:	46bd      	mov	sp, r7
   178a4:	bd80      	pop	{r7, pc}
   178a6:	46c0      	nop			; (mov r8, r8)
   178a8:	00017781 	.word	0x00017781

000178ac <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   178ac:	b580      	push	{r7, lr}
   178ae:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   178b0:	4b08      	ldr	r3, [pc, #32]	; (178d4 <vTraceStop+0x28>)
   178b2:	681b      	ldr	r3, [r3, #0]
   178b4:	2b00      	cmp	r3, #0
   178b6:	d003      	beq.n	178c0 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   178b8:	4b06      	ldr	r3, [pc, #24]	; (178d4 <vTraceStop+0x28>)
   178ba:	681b      	ldr	r3, [r3, #0]
   178bc:	2200      	movs	r2, #0
   178be:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   178c0:	4b05      	ldr	r3, [pc, #20]	; (178d8 <vTraceStop+0x2c>)
   178c2:	681b      	ldr	r3, [r3, #0]
   178c4:	2b00      	cmp	r3, #0
   178c6:	d002      	beq.n	178ce <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   178c8:	4b03      	ldr	r3, [pc, #12]	; (178d8 <vTraceStop+0x2c>)
   178ca:	681b      	ldr	r3, [r3, #0]
   178cc:	4798      	blx	r3
	}
}
   178ce:	46c0      	nop			; (mov r8, r8)
   178d0:	46bd      	mov	sp, r7
   178d2:	bd80      	pop	{r7, pc}
   178d4:	20000dc0 	.word	0x20000dc0
   178d8:	20000d28 	.word	0x20000d28

000178dc <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   178dc:	b580      	push	{r7, lr}
   178de:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   178e0:	4b05      	ldr	r3, [pc, #20]	; (178f8 <xTraceIsRecordingEnabled+0x1c>)
   178e2:	681b      	ldr	r3, [r3, #0]
   178e4:	2b00      	cmp	r3, #0
   178e6:	d003      	beq.n	178f0 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   178e8:	4b03      	ldr	r3, [pc, #12]	; (178f8 <xTraceIsRecordingEnabled+0x1c>)
   178ea:	681b      	ldr	r3, [r3, #0]
   178ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   178ee:	e000      	b.n	178f2 <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   178f0:	2300      	movs	r3, #0
	}
}
   178f2:	0018      	movs	r0, r3
   178f4:	46bd      	mov	sp, r7
   178f6:	bd80      	pop	{r7, pc}
   178f8:	20000dc0 	.word	0x20000dc0

000178fc <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   178fc:	b590      	push	{r4, r7, lr}
   178fe:	b089      	sub	sp, #36	; 0x24
   17900:	af00      	add	r7, sp, #0
   17902:	0002      	movs	r2, r0
   17904:	1dfb      	adds	r3, r7, #7
   17906:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   17908:	1dfb      	adds	r3, r7, #7
   1790a:	781b      	ldrb	r3, [r3, #0]
   1790c:	2b00      	cmp	r3, #0
   1790e:	d057      	beq.n	179c0 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   17910:	4b2e      	ldr	r3, [pc, #184]	; (179cc <prvTraceStoreTaskReady+0xd0>)
   17912:	681b      	ldr	r3, [r3, #0]
   17914:	2b00      	cmp	r3, #0
   17916:	d055      	beq.n	179c4 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   17918:	1dfb      	adds	r3, r7, #7
   1791a:	781b      	ldrb	r3, [r3, #0]
   1791c:	2b0f      	cmp	r3, #15
   1791e:	d904      	bls.n	1792a <prvTraceStoreTaskReady+0x2e>
   17920:	4b2b      	ldr	r3, [pc, #172]	; (179d0 <prvTraceStoreTaskReady+0xd4>)
   17922:	0018      	movs	r0, r3
   17924:	4b2b      	ldr	r3, [pc, #172]	; (179d4 <prvTraceStoreTaskReady+0xd8>)
   17926:	4798      	blx	r3
   17928:	e04d      	b.n	179c6 <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   1792a:	4b2b      	ldr	r3, [pc, #172]	; (179d8 <prvTraceStoreTaskReady+0xdc>)
   1792c:	681b      	ldr	r3, [r3, #0]
   1792e:	2b00      	cmp	r3, #0
   17930:	d004      	beq.n	1793c <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   17932:	4b2a      	ldr	r3, [pc, #168]	; (179dc <prvTraceStoreTaskReady+0xe0>)
   17934:	0018      	movs	r0, r3
   17936:	4b27      	ldr	r3, [pc, #156]	; (179d4 <prvTraceStoreTaskReady+0xd8>)
   17938:	4798      	blx	r3
		return;
   1793a:	e044      	b.n	179c6 <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1793c:	f3ef 8310 	mrs	r3, PRIMASK
   17940:	60fb      	str	r3, [r7, #12]
  return(result);
   17942:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   17944:	61fb      	str	r3, [r7, #28]
   17946:	2301      	movs	r3, #1
   17948:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1794a:	693b      	ldr	r3, [r7, #16]
   1794c:	f383 8810 	msr	PRIMASK, r3
   17950:	4b21      	ldr	r3, [pc, #132]	; (179d8 <prvTraceStoreTaskReady+0xdc>)
   17952:	681b      	ldr	r3, [r3, #0]
   17954:	1c5a      	adds	r2, r3, #1
   17956:	4b20      	ldr	r3, [pc, #128]	; (179d8 <prvTraceStoreTaskReady+0xdc>)
   17958:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   1795a:	4b21      	ldr	r3, [pc, #132]	; (179e0 <prvTraceStoreTaskReady+0xe4>)
   1795c:	681b      	ldr	r3, [r3, #0]
   1795e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17960:	2b00      	cmp	r3, #0
   17962:	d022      	beq.n	179aa <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   17964:	231a      	movs	r3, #26
   17966:	18fc      	adds	r4, r7, r3
   17968:	4b1e      	ldr	r3, [pc, #120]	; (179e4 <prvTraceStoreTaskReady+0xe8>)
   1796a:	0018      	movs	r0, r3
   1796c:	4b1e      	ldr	r3, [pc, #120]	; (179e8 <prvTraceStoreTaskReady+0xec>)
   1796e:	4798      	blx	r3
   17970:	0003      	movs	r3, r0
   17972:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   17974:	2319      	movs	r3, #25
   17976:	18fb      	adds	r3, r7, r3
   17978:	1dfa      	adds	r2, r7, #7
   1797a:	7812      	ldrb	r2, [r2, #0]
   1797c:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   1797e:	4b1b      	ldr	r3, [pc, #108]	; (179ec <prvTraceStoreTaskReady+0xf0>)
   17980:	4798      	blx	r3
   17982:	0003      	movs	r3, r0
   17984:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   17986:	697b      	ldr	r3, [r7, #20]
   17988:	2b00      	cmp	r3, #0
   1798a:	d00e      	beq.n	179aa <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   1798c:	697b      	ldr	r3, [r7, #20]
   1798e:	2202      	movs	r2, #2
   17990:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   17992:	697b      	ldr	r3, [r7, #20]
   17994:	221a      	movs	r2, #26
   17996:	18ba      	adds	r2, r7, r2
   17998:	8812      	ldrh	r2, [r2, #0]
   1799a:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   1799c:	697b      	ldr	r3, [r7, #20]
   1799e:	2219      	movs	r2, #25
   179a0:	18ba      	adds	r2, r7, r2
   179a2:	7812      	ldrb	r2, [r2, #0]
   179a4:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   179a6:	4b12      	ldr	r3, [pc, #72]	; (179f0 <prvTraceStoreTaskReady+0xf4>)
   179a8:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   179aa:	4b0b      	ldr	r3, [pc, #44]	; (179d8 <prvTraceStoreTaskReady+0xdc>)
   179ac:	681b      	ldr	r3, [r3, #0]
   179ae:	1e5a      	subs	r2, r3, #1
   179b0:	4b09      	ldr	r3, [pc, #36]	; (179d8 <prvTraceStoreTaskReady+0xdc>)
   179b2:	601a      	str	r2, [r3, #0]
   179b4:	69fb      	ldr	r3, [r7, #28]
   179b6:	60bb      	str	r3, [r7, #8]
   179b8:	68bb      	ldr	r3, [r7, #8]
   179ba:	f383 8810 	msr	PRIMASK, r3
   179be:	e002      	b.n	179c6 <prvTraceStoreTaskReady+0xca>
		return;
   179c0:	46c0      	nop			; (mov r8, r8)
   179c2:	e000      	b.n	179c6 <prvTraceStoreTaskReady+0xca>
		return;
   179c4:	46c0      	nop			; (mov r8, r8)
}
   179c6:	46bd      	mov	sp, r7
   179c8:	b009      	add	sp, #36	; 0x24
   179ca:	bd90      	pop	{r4, r7, pc}
   179cc:	200000fc 	.word	0x200000fc
   179d0:	00036fb0 	.word	0x00036fb0
   179d4:	000189e9 	.word	0x000189e9
   179d8:	20000d18 	.word	0x20000d18
   179dc:	00036ff0 	.word	0x00036ff0
   179e0:	20000dc0 	.word	0x20000dc0
   179e4:	0000ffff 	.word	0x0000ffff
   179e8:	00018bfd 	.word	0x00018bfd
   179ec:	000185a1 	.word	0x000185a1
   179f0:	00018ba5 	.word	0x00018ba5

000179f4 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   179f4:	b580      	push	{r7, lr}
   179f6:	b08e      	sub	sp, #56	; 0x38
   179f8:	af00      	add	r7, sp, #0
   179fa:	60f8      	str	r0, [r7, #12]
   179fc:	60b9      	str	r1, [r7, #8]
   179fe:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   17a00:	4b48      	ldr	r3, [pc, #288]	; (17b24 <vTraceStoreMemMangEvent+0x130>)
   17a02:	681b      	ldr	r3, [r3, #0]
   17a04:	2b00      	cmp	r3, #0
   17a06:	d100      	bne.n	17a0a <vTraceStoreMemMangEvent+0x16>
   17a08:	e088      	b.n	17b1c <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   17a0a:	687b      	ldr	r3, [r7, #4]
   17a0c:	2b00      	cmp	r3, #0
   17a0e:	da03      	bge.n	17a18 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   17a10:	687b      	ldr	r3, [r7, #4]
   17a12:	425b      	negs	r3, r3
   17a14:	637b      	str	r3, [r7, #52]	; 0x34
   17a16:	e001      	b.n	17a1c <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   17a18:	687b      	ldr	r3, [r7, #4]
   17a1a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17a1c:	f3ef 8310 	mrs	r3, PRIMASK
   17a20:	61bb      	str	r3, [r7, #24]
  return(result);
   17a22:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   17a24:	633b      	str	r3, [r7, #48]	; 0x30
   17a26:	2301      	movs	r3, #1
   17a28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17a2a:	69fb      	ldr	r3, [r7, #28]
   17a2c:	f383 8810 	msr	PRIMASK, r3
   17a30:	4b3d      	ldr	r3, [pc, #244]	; (17b28 <vTraceStoreMemMangEvent+0x134>)
   17a32:	681b      	ldr	r3, [r3, #0]
   17a34:	1c5a      	adds	r2, r3, #1
   17a36:	4b3c      	ldr	r3, [pc, #240]	; (17b28 <vTraceStoreMemMangEvent+0x134>)
   17a38:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   17a3a:	68bb      	ldr	r3, [r7, #8]
   17a3c:	2b00      	cmp	r3, #0
   17a3e:	d005      	beq.n	17a4c <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   17a40:	4b3a      	ldr	r3, [pc, #232]	; (17b2c <vTraceStoreMemMangEvent+0x138>)
   17a42:	681a      	ldr	r2, [r3, #0]
   17a44:	687b      	ldr	r3, [r7, #4]
   17a46:	18d2      	adds	r2, r2, r3
   17a48:	4b38      	ldr	r3, [pc, #224]	; (17b2c <vTraceStoreMemMangEvent+0x138>)
   17a4a:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   17a4c:	4b35      	ldr	r3, [pc, #212]	; (17b24 <vTraceStoreMemMangEvent+0x130>)
   17a4e:	681b      	ldr	r3, [r3, #0]
   17a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17a52:	2b00      	cmp	r3, #0
   17a54:	d057      	beq.n	17b06 <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   17a56:	20ff      	movs	r0, #255	; 0xff
   17a58:	4b35      	ldr	r3, [pc, #212]	; (17b30 <vTraceStoreMemMangEvent+0x13c>)
   17a5a:	4798      	blx	r3
   17a5c:	0003      	movs	r3, r0
   17a5e:	001a      	movs	r2, r3
   17a60:	232f      	movs	r3, #47	; 0x2f
   17a62:	18fb      	adds	r3, r7, r3
   17a64:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   17a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17a68:	4a32      	ldr	r2, [pc, #200]	; (17b34 <vTraceStoreMemMangEvent+0x140>)
   17a6a:	0019      	movs	r1, r3
   17a6c:	0010      	movs	r0, r2
   17a6e:	4b32      	ldr	r3, [pc, #200]	; (17b38 <vTraceStoreMemMangEvent+0x144>)
   17a70:	4798      	blx	r3
   17a72:	0002      	movs	r2, r0
   17a74:	232c      	movs	r3, #44	; 0x2c
   17a76:	18fb      	adds	r3, r7, r3
   17a78:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   17a7a:	4b30      	ldr	r3, [pc, #192]	; (17b3c <vTraceStoreMemMangEvent+0x148>)
   17a7c:	4798      	blx	r3
   17a7e:	0003      	movs	r3, r0
   17a80:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   17a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17a84:	2b00      	cmp	r3, #0
   17a86:	d03e      	beq.n	17b06 <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   17a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17a8a:	222f      	movs	r2, #47	; 0x2f
   17a8c:	18ba      	adds	r2, r7, r2
   17a8e:	7812      	ldrb	r2, [r2, #0]
   17a90:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   17a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17a94:	2200      	movs	r2, #0
   17a96:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   17a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17a9a:	222c      	movs	r2, #44	; 0x2c
   17a9c:	18ba      	adds	r2, r7, r2
   17a9e:	8812      	ldrh	r2, [r2, #0]
   17aa0:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   17aa2:	4b27      	ldr	r3, [pc, #156]	; (17b40 <vTraceStoreMemMangEvent+0x14c>)
   17aa4:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   17aa6:	68bb      	ldr	r3, [r7, #8]
   17aa8:	4a22      	ldr	r2, [pc, #136]	; (17b34 <vTraceStoreMemMangEvent+0x140>)
   17aaa:	0019      	movs	r1, r3
   17aac:	0010      	movs	r0, r2
   17aae:	4b22      	ldr	r3, [pc, #136]	; (17b38 <vTraceStoreMemMangEvent+0x144>)
   17ab0:	4798      	blx	r3
   17ab2:	0002      	movs	r2, r0
   17ab4:	2326      	movs	r3, #38	; 0x26
   17ab6:	18fb      	adds	r3, r7, r3
   17ab8:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   17aba:	2325      	movs	r3, #37	; 0x25
   17abc:	18fb      	adds	r3, r7, r3
   17abe:	2200      	movs	r2, #0
   17ac0:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   17ac2:	4b1e      	ldr	r3, [pc, #120]	; (17b3c <vTraceStoreMemMangEvent+0x148>)
   17ac4:	4798      	blx	r3
   17ac6:	0003      	movs	r3, r0
   17ac8:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   17aca:	6a3b      	ldr	r3, [r7, #32]
   17acc:	2b00      	cmp	r3, #0
   17ace:	d01a      	beq.n	17b06 <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   17ad0:	6a3b      	ldr	r3, [r7, #32]
   17ad2:	2226      	movs	r2, #38	; 0x26
   17ad4:	18ba      	adds	r2, r7, r2
   17ad6:	8812      	ldrh	r2, [r2, #0]
   17ad8:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   17ada:	6a3b      	ldr	r3, [r7, #32]
   17adc:	2225      	movs	r2, #37	; 0x25
   17ade:	18ba      	adds	r2, r7, r2
   17ae0:	7812      	ldrb	r2, [r2, #0]
   17ae2:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   17ae4:	68fb      	ldr	r3, [r7, #12]
   17ae6:	b2db      	uxtb	r3, r3
   17ae8:	3301      	adds	r3, #1
   17aea:	b2da      	uxtb	r2, r3
   17aec:	6a3b      	ldr	r3, [r7, #32]
   17aee:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   17af0:	68fb      	ldr	r3, [r7, #12]
   17af2:	b2da      	uxtb	r2, r3
   17af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17af6:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   17af8:	4b11      	ldr	r3, [pc, #68]	; (17b40 <vTraceStoreMemMangEvent+0x14c>)
   17afa:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   17afc:	4b09      	ldr	r3, [pc, #36]	; (17b24 <vTraceStoreMemMangEvent+0x130>)
   17afe:	681b      	ldr	r3, [r3, #0]
   17b00:	4a0a      	ldr	r2, [pc, #40]	; (17b2c <vTraceStoreMemMangEvent+0x138>)
   17b02:	6812      	ldr	r2, [r2, #0]
   17b04:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   17b06:	4b08      	ldr	r3, [pc, #32]	; (17b28 <vTraceStoreMemMangEvent+0x134>)
   17b08:	681b      	ldr	r3, [r3, #0]
   17b0a:	1e5a      	subs	r2, r3, #1
   17b0c:	4b06      	ldr	r3, [pc, #24]	; (17b28 <vTraceStoreMemMangEvent+0x134>)
   17b0e:	601a      	str	r2, [r3, #0]
   17b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17b12:	617b      	str	r3, [r7, #20]
   17b14:	697b      	ldr	r3, [r7, #20]
   17b16:	f383 8810 	msr	PRIMASK, r3
   17b1a:	e000      	b.n	17b1e <vTraceStoreMemMangEvent+0x12a>
		return;
   17b1c:	46c0      	nop			; (mov r8, r8)
}
   17b1e:	46bd      	mov	sp, r7
   17b20:	b00e      	add	sp, #56	; 0x38
   17b22:	bd80      	pop	{r7, pc}
   17b24:	20000dc0 	.word	0x20000dc0
   17b28:	20000d18 	.word	0x20000d18
   17b2c:	20000d2c 	.word	0x20000d2c
   17b30:	00018bfd 	.word	0x00018bfd
   17b34:	0000ffff 	.word	0x0000ffff
   17b38:	00017dc1 	.word	0x00017dc1
   17b3c:	000185a1 	.word	0x000185a1
   17b40:	00018ba5 	.word	0x00018ba5

00017b44 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   17b44:	b590      	push	{r4, r7, lr}
   17b46:	b08b      	sub	sp, #44	; 0x2c
   17b48:	af00      	add	r7, sp, #0
   17b4a:	60f8      	str	r0, [r7, #12]
   17b4c:	607a      	str	r2, [r7, #4]
   17b4e:	230b      	movs	r3, #11
   17b50:	18fb      	adds	r3, r7, r3
   17b52:	1c0a      	adds	r2, r1, #0
   17b54:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   17b56:	68fb      	ldr	r3, [r7, #12]
   17b58:	2bfe      	cmp	r3, #254	; 0xfe
   17b5a:	d904      	bls.n	17b66 <prvTraceStoreKernelCall+0x22>
   17b5c:	4b39      	ldr	r3, [pc, #228]	; (17c44 <prvTraceStoreKernelCall+0x100>)
   17b5e:	0018      	movs	r0, r3
   17b60:	4b39      	ldr	r3, [pc, #228]	; (17c48 <prvTraceStoreKernelCall+0x104>)
   17b62:	4798      	blx	r3
   17b64:	e06b      	b.n	17c3e <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   17b66:	230b      	movs	r3, #11
   17b68:	18fb      	adds	r3, r7, r3
   17b6a:	781b      	ldrb	r3, [r3, #0]
   17b6c:	2b08      	cmp	r3, #8
   17b6e:	d904      	bls.n	17b7a <prvTraceStoreKernelCall+0x36>
   17b70:	4b36      	ldr	r3, [pc, #216]	; (17c4c <prvTraceStoreKernelCall+0x108>)
   17b72:	0018      	movs	r0, r3
   17b74:	4b34      	ldr	r3, [pc, #208]	; (17c48 <prvTraceStoreKernelCall+0x104>)
   17b76:	4798      	blx	r3
   17b78:	e061      	b.n	17c3e <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   17b7a:	4b35      	ldr	r3, [pc, #212]	; (17c50 <prvTraceStoreKernelCall+0x10c>)
   17b7c:	681a      	ldr	r2, [r3, #0]
   17b7e:	230b      	movs	r3, #11
   17b80:	18fb      	adds	r3, r7, r3
   17b82:	781b      	ldrb	r3, [r3, #0]
   17b84:	2164      	movs	r1, #100	; 0x64
   17b86:	18d3      	adds	r3, r2, r3
   17b88:	185b      	adds	r3, r3, r1
   17b8a:	781b      	ldrb	r3, [r3, #0]
   17b8c:	001a      	movs	r2, r3
   17b8e:	687b      	ldr	r3, [r7, #4]
   17b90:	429a      	cmp	r2, r3
   17b92:	d204      	bcs.n	17b9e <prvTraceStoreKernelCall+0x5a>
   17b94:	4b2f      	ldr	r3, [pc, #188]	; (17c54 <prvTraceStoreKernelCall+0x110>)
   17b96:	0018      	movs	r0, r3
   17b98:	4b2b      	ldr	r3, [pc, #172]	; (17c48 <prvTraceStoreKernelCall+0x104>)
   17b9a:	4798      	blx	r3
   17b9c:	e04f      	b.n	17c3e <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   17b9e:	4b2e      	ldr	r3, [pc, #184]	; (17c58 <prvTraceStoreKernelCall+0x114>)
   17ba0:	681b      	ldr	r3, [r3, #0]
   17ba2:	2b00      	cmp	r3, #0
   17ba4:	d004      	beq.n	17bb0 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   17ba6:	4b2d      	ldr	r3, [pc, #180]	; (17c5c <prvTraceStoreKernelCall+0x118>)
   17ba8:	0018      	movs	r0, r3
   17baa:	4b27      	ldr	r3, [pc, #156]	; (17c48 <prvTraceStoreKernelCall+0x104>)
   17bac:	4798      	blx	r3
		return;
   17bae:	e046      	b.n	17c3e <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   17bb0:	4b2b      	ldr	r3, [pc, #172]	; (17c60 <prvTraceStoreKernelCall+0x11c>)
   17bb2:	781b      	ldrb	r3, [r3, #0]
   17bb4:	2b00      	cmp	r3, #0
   17bb6:	d041      	beq.n	17c3c <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17bb8:	f3ef 8310 	mrs	r3, PRIMASK
   17bbc:	617b      	str	r3, [r7, #20]
  return(result);
   17bbe:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   17bc0:	627b      	str	r3, [r7, #36]	; 0x24
   17bc2:	2301      	movs	r3, #1
   17bc4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17bc6:	69bb      	ldr	r3, [r7, #24]
   17bc8:	f383 8810 	msr	PRIMASK, r3
   17bcc:	4b22      	ldr	r3, [pc, #136]	; (17c58 <prvTraceStoreKernelCall+0x114>)
   17bce:	681b      	ldr	r3, [r3, #0]
   17bd0:	1c5a      	adds	r2, r3, #1
   17bd2:	4b21      	ldr	r3, [pc, #132]	; (17c58 <prvTraceStoreKernelCall+0x114>)
   17bd4:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   17bd6:	4b1e      	ldr	r3, [pc, #120]	; (17c50 <prvTraceStoreKernelCall+0x10c>)
   17bd8:	681b      	ldr	r3, [r3, #0]
   17bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17bdc:	2b00      	cmp	r3, #0
   17bde:	d022      	beq.n	17c26 <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   17be0:	2322      	movs	r3, #34	; 0x22
   17be2:	18fc      	adds	r4, r7, r3
   17be4:	4b1f      	ldr	r3, [pc, #124]	; (17c64 <prvTraceStoreKernelCall+0x120>)
   17be6:	0018      	movs	r0, r3
   17be8:	4b1f      	ldr	r3, [pc, #124]	; (17c68 <prvTraceStoreKernelCall+0x124>)
   17bea:	4798      	blx	r3
   17bec:	0003      	movs	r3, r0
   17bee:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   17bf0:	2321      	movs	r3, #33	; 0x21
   17bf2:	18fb      	adds	r3, r7, r3
   17bf4:	687a      	ldr	r2, [r7, #4]
   17bf6:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   17bf8:	4b1c      	ldr	r3, [pc, #112]	; (17c6c <prvTraceStoreKernelCall+0x128>)
   17bfa:	4798      	blx	r3
   17bfc:	0003      	movs	r3, r0
   17bfe:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   17c00:	69fb      	ldr	r3, [r7, #28]
   17c02:	2b00      	cmp	r3, #0
   17c04:	d00f      	beq.n	17c26 <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   17c06:	69fb      	ldr	r3, [r7, #28]
   17c08:	2222      	movs	r2, #34	; 0x22
   17c0a:	18ba      	adds	r2, r7, r2
   17c0c:	8812      	ldrh	r2, [r2, #0]
   17c0e:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   17c10:	68fb      	ldr	r3, [r7, #12]
   17c12:	b2da      	uxtb	r2, r3
   17c14:	69fb      	ldr	r3, [r7, #28]
   17c16:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   17c18:	69fb      	ldr	r3, [r7, #28]
   17c1a:	2221      	movs	r2, #33	; 0x21
   17c1c:	18ba      	adds	r2, r7, r2
   17c1e:	7812      	ldrb	r2, [r2, #0]
   17c20:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   17c22:	4b13      	ldr	r3, [pc, #76]	; (17c70 <prvTraceStoreKernelCall+0x12c>)
   17c24:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   17c26:	4b0c      	ldr	r3, [pc, #48]	; (17c58 <prvTraceStoreKernelCall+0x114>)
   17c28:	681b      	ldr	r3, [r3, #0]
   17c2a:	1e5a      	subs	r2, r3, #1
   17c2c:	4b0a      	ldr	r3, [pc, #40]	; (17c58 <prvTraceStoreKernelCall+0x114>)
   17c2e:	601a      	str	r2, [r3, #0]
   17c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17c32:	613b      	str	r3, [r7, #16]
   17c34:	693b      	ldr	r3, [r7, #16]
   17c36:	f383 8810 	msr	PRIMASK, r3
   17c3a:	e000      	b.n	17c3e <prvTraceStoreKernelCall+0xfa>
		return;
   17c3c:	46c0      	nop			; (mov r8, r8)
}
   17c3e:	46bd      	mov	sp, r7
   17c40:	b00b      	add	sp, #44	; 0x2c
   17c42:	bd90      	pop	{r4, r7, pc}
   17c44:	00037060 	.word	0x00037060
   17c48:	000189e9 	.word	0x000189e9
   17c4c:	00037098 	.word	0x00037098
   17c50:	20000dc0 	.word	0x20000dc0
   17c54:	000370e0 	.word	0x000370e0
   17c58:	20000d18 	.word	0x20000d18
   17c5c:	00037128 	.word	0x00037128
   17c60:	20000d24 	.word	0x20000d24
   17c64:	0000ffff 	.word	0x0000ffff
   17c68:	00018bfd 	.word	0x00018bfd
   17c6c:	000185a1 	.word	0x000185a1
   17c70:	00018ba5 	.word	0x00018ba5

00017c74 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   17c74:	b580      	push	{r7, lr}
   17c76:	b08a      	sub	sp, #40	; 0x28
   17c78:	af00      	add	r7, sp, #0
   17c7a:	60f8      	str	r0, [r7, #12]
   17c7c:	607a      	str	r2, [r7, #4]
   17c7e:	603b      	str	r3, [r7, #0]
   17c80:	230b      	movs	r3, #11
   17c82:	18fb      	adds	r3, r7, r3
   17c84:	1c0a      	adds	r2, r1, #0
   17c86:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   17c88:	68fb      	ldr	r3, [r7, #12]
   17c8a:	2bfe      	cmp	r3, #254	; 0xfe
   17c8c:	d904      	bls.n	17c98 <prvTraceStoreKernelCallWithParam+0x24>
   17c8e:	4b40      	ldr	r3, [pc, #256]	; (17d90 <prvTraceStoreKernelCallWithParam+0x11c>)
   17c90:	0018      	movs	r0, r3
   17c92:	4b40      	ldr	r3, [pc, #256]	; (17d94 <prvTraceStoreKernelCallWithParam+0x120>)
   17c94:	4798      	blx	r3
   17c96:	e077      	b.n	17d88 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   17c98:	230b      	movs	r3, #11
   17c9a:	18fb      	adds	r3, r7, r3
   17c9c:	781b      	ldrb	r3, [r3, #0]
   17c9e:	2b08      	cmp	r3, #8
   17ca0:	d904      	bls.n	17cac <prvTraceStoreKernelCallWithParam+0x38>
   17ca2:	4b3d      	ldr	r3, [pc, #244]	; (17d98 <prvTraceStoreKernelCallWithParam+0x124>)
   17ca4:	0018      	movs	r0, r3
   17ca6:	4b3b      	ldr	r3, [pc, #236]	; (17d94 <prvTraceStoreKernelCallWithParam+0x120>)
   17ca8:	4798      	blx	r3
   17caa:	e06d      	b.n	17d88 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   17cac:	4b3b      	ldr	r3, [pc, #236]	; (17d9c <prvTraceStoreKernelCallWithParam+0x128>)
   17cae:	681a      	ldr	r2, [r3, #0]
   17cb0:	230b      	movs	r3, #11
   17cb2:	18fb      	adds	r3, r7, r3
   17cb4:	781b      	ldrb	r3, [r3, #0]
   17cb6:	2164      	movs	r1, #100	; 0x64
   17cb8:	18d3      	adds	r3, r2, r3
   17cba:	185b      	adds	r3, r3, r1
   17cbc:	781b      	ldrb	r3, [r3, #0]
   17cbe:	001a      	movs	r2, r3
   17cc0:	687b      	ldr	r3, [r7, #4]
   17cc2:	429a      	cmp	r2, r3
   17cc4:	d204      	bcs.n	17cd0 <prvTraceStoreKernelCallWithParam+0x5c>
   17cc6:	4b36      	ldr	r3, [pc, #216]	; (17da0 <prvTraceStoreKernelCallWithParam+0x12c>)
   17cc8:	0018      	movs	r0, r3
   17cca:	4b32      	ldr	r3, [pc, #200]	; (17d94 <prvTraceStoreKernelCallWithParam+0x120>)
   17ccc:	4798      	blx	r3
   17cce:	e05b      	b.n	17d88 <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   17cd0:	4b34      	ldr	r3, [pc, #208]	; (17da4 <prvTraceStoreKernelCallWithParam+0x130>)
   17cd2:	681b      	ldr	r3, [r3, #0]
   17cd4:	2b00      	cmp	r3, #0
   17cd6:	d004      	beq.n	17ce2 <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   17cd8:	4b33      	ldr	r3, [pc, #204]	; (17da8 <prvTraceStoreKernelCallWithParam+0x134>)
   17cda:	0018      	movs	r0, r3
   17cdc:	4b2d      	ldr	r3, [pc, #180]	; (17d94 <prvTraceStoreKernelCallWithParam+0x120>)
   17cde:	4798      	blx	r3
		return;
   17ce0:	e052      	b.n	17d88 <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17ce2:	f3ef 8310 	mrs	r3, PRIMASK
   17ce6:	617b      	str	r3, [r7, #20]
  return(result);
   17ce8:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   17cea:	627b      	str	r3, [r7, #36]	; 0x24
   17cec:	2301      	movs	r3, #1
   17cee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17cf0:	69bb      	ldr	r3, [r7, #24]
   17cf2:	f383 8810 	msr	PRIMASK, r3
   17cf6:	4b2b      	ldr	r3, [pc, #172]	; (17da4 <prvTraceStoreKernelCallWithParam+0x130>)
   17cf8:	681b      	ldr	r3, [r3, #0]
   17cfa:	1c5a      	adds	r2, r3, #1
   17cfc:	4b29      	ldr	r3, [pc, #164]	; (17da4 <prvTraceStoreKernelCallWithParam+0x130>)
   17cfe:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   17d00:	4b26      	ldr	r3, [pc, #152]	; (17d9c <prvTraceStoreKernelCallWithParam+0x128>)
   17d02:	681b      	ldr	r3, [r3, #0]
   17d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17d06:	2b00      	cmp	r3, #0
   17d08:	d034      	beq.n	17d74 <prvTraceStoreKernelCallWithParam+0x100>
   17d0a:	4b28      	ldr	r3, [pc, #160]	; (17dac <prvTraceStoreKernelCallWithParam+0x138>)
   17d0c:	781b      	ldrb	r3, [r3, #0]
   17d0e:	2b00      	cmp	r3, #0
   17d10:	d030      	beq.n	17d74 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   17d12:	20ff      	movs	r0, #255	; 0xff
   17d14:	4b26      	ldr	r3, [pc, #152]	; (17db0 <prvTraceStoreKernelCallWithParam+0x13c>)
   17d16:	4798      	blx	r3
   17d18:	0003      	movs	r3, r0
   17d1a:	001a      	movs	r2, r3
   17d1c:	2323      	movs	r3, #35	; 0x23
   17d1e:	18fb      	adds	r3, r7, r3
   17d20:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   17d22:	683b      	ldr	r3, [r7, #0]
   17d24:	0019      	movs	r1, r3
   17d26:	20ff      	movs	r0, #255	; 0xff
   17d28:	4b22      	ldr	r3, [pc, #136]	; (17db4 <prvTraceStoreKernelCallWithParam+0x140>)
   17d2a:	4798      	blx	r3
   17d2c:	0002      	movs	r2, r0
   17d2e:	2322      	movs	r3, #34	; 0x22
   17d30:	18fb      	adds	r3, r7, r3
   17d32:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   17d34:	2321      	movs	r3, #33	; 0x21
   17d36:	18fb      	adds	r3, r7, r3
   17d38:	687a      	ldr	r2, [r7, #4]
   17d3a:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   17d3c:	4b1e      	ldr	r3, [pc, #120]	; (17db8 <prvTraceStoreKernelCallWithParam+0x144>)
   17d3e:	4798      	blx	r3
   17d40:	0003      	movs	r3, r0
   17d42:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   17d44:	69fb      	ldr	r3, [r7, #28]
   17d46:	2b00      	cmp	r3, #0
   17d48:	d014      	beq.n	17d74 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   17d4a:	69fb      	ldr	r3, [r7, #28]
   17d4c:	2223      	movs	r2, #35	; 0x23
   17d4e:	18ba      	adds	r2, r7, r2
   17d50:	7812      	ldrb	r2, [r2, #0]
   17d52:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   17d54:	68fb      	ldr	r3, [r7, #12]
   17d56:	b2da      	uxtb	r2, r3
   17d58:	69fb      	ldr	r3, [r7, #28]
   17d5a:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   17d5c:	69fb      	ldr	r3, [r7, #28]
   17d5e:	2221      	movs	r2, #33	; 0x21
   17d60:	18ba      	adds	r2, r7, r2
   17d62:	7812      	ldrb	r2, [r2, #0]
   17d64:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   17d66:	69fb      	ldr	r3, [r7, #28]
   17d68:	2222      	movs	r2, #34	; 0x22
   17d6a:	18ba      	adds	r2, r7, r2
   17d6c:	7812      	ldrb	r2, [r2, #0]
   17d6e:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   17d70:	4b12      	ldr	r3, [pc, #72]	; (17dbc <prvTraceStoreKernelCallWithParam+0x148>)
   17d72:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   17d74:	4b0b      	ldr	r3, [pc, #44]	; (17da4 <prvTraceStoreKernelCallWithParam+0x130>)
   17d76:	681b      	ldr	r3, [r3, #0]
   17d78:	1e5a      	subs	r2, r3, #1
   17d7a:	4b0a      	ldr	r3, [pc, #40]	; (17da4 <prvTraceStoreKernelCallWithParam+0x130>)
   17d7c:	601a      	str	r2, [r3, #0]
   17d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17d80:	613b      	str	r3, [r7, #16]
   17d82:	693b      	ldr	r3, [r7, #16]
   17d84:	f383 8810 	msr	PRIMASK, r3
}
   17d88:	46bd      	mov	sp, r7
   17d8a:	b00a      	add	sp, #40	; 0x28
   17d8c:	bd80      	pop	{r7, pc}
   17d8e:	46c0      	nop			; (mov r8, r8)
   17d90:	00037160 	.word	0x00037160
   17d94:	000189e9 	.word	0x000189e9
   17d98:	000371a0 	.word	0x000371a0
   17d9c:	20000dc0 	.word	0x20000dc0
   17da0:	000371f0 	.word	0x000371f0
   17da4:	20000d18 	.word	0x20000d18
   17da8:	00037240 	.word	0x00037240
   17dac:	20000d24 	.word	0x20000d24
   17db0:	00018bfd 	.word	0x00018bfd
   17db4:	00017dc1 	.word	0x00017dc1
   17db8:	000185a1 	.word	0x000185a1
   17dbc:	00018ba5 	.word	0x00018ba5

00017dc0 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   17dc0:	b580      	push	{r7, lr}
   17dc2:	b084      	sub	sp, #16
   17dc4:	af00      	add	r7, sp, #0
   17dc6:	6078      	str	r0, [r7, #4]
   17dc8:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   17dca:	687b      	ldr	r3, [r7, #4]
   17dcc:	2bff      	cmp	r3, #255	; 0xff
   17dce:	d009      	beq.n	17de4 <prvTraceGetParam+0x24>
   17dd0:	687b      	ldr	r3, [r7, #4]
   17dd2:	4a19      	ldr	r2, [pc, #100]	; (17e38 <prvTraceGetParam+0x78>)
   17dd4:	4293      	cmp	r3, r2
   17dd6:	d005      	beq.n	17de4 <prvTraceGetParam+0x24>
   17dd8:	4b18      	ldr	r3, [pc, #96]	; (17e3c <prvTraceGetParam+0x7c>)
   17dda:	0018      	movs	r0, r3
   17ddc:	4b18      	ldr	r3, [pc, #96]	; (17e40 <prvTraceGetParam+0x80>)
   17dde:	4798      	blx	r3
   17de0:	683b      	ldr	r3, [r7, #0]
   17de2:	e024      	b.n	17e2e <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   17de4:	683a      	ldr	r2, [r7, #0]
   17de6:	687b      	ldr	r3, [r7, #4]
   17de8:	429a      	cmp	r2, r3
   17dea:	d801      	bhi.n	17df0 <prvTraceGetParam+0x30>
	{
		return param;
   17dec:	683b      	ldr	r3, [r7, #0]
   17dee:	e01e      	b.n	17e2e <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   17df0:	4b14      	ldr	r3, [pc, #80]	; (17e44 <prvTraceGetParam+0x84>)
   17df2:	4798      	blx	r3
   17df4:	0003      	movs	r3, r0
   17df6:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   17df8:	68fb      	ldr	r3, [r7, #12]
   17dfa:	2b00      	cmp	r3, #0
   17dfc:	d014      	beq.n	17e28 <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   17dfe:	68fb      	ldr	r3, [r7, #12]
   17e00:	2201      	movs	r2, #1
   17e02:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   17e04:	687b      	ldr	r3, [r7, #4]
   17e06:	43db      	mvns	r3, r3
   17e08:	683a      	ldr	r2, [r7, #0]
   17e0a:	4013      	ands	r3, r2
   17e0c:	0a1b      	lsrs	r3, r3, #8
   17e0e:	b2da      	uxtb	r2, r3
   17e10:	68fb      	ldr	r3, [r7, #12]
   17e12:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   17e14:	687b      	ldr	r3, [r7, #4]
   17e16:	43db      	mvns	r3, r3
   17e18:	683a      	ldr	r2, [r7, #0]
   17e1a:	4013      	ands	r3, r2
   17e1c:	0c1b      	lsrs	r3, r3, #16
   17e1e:	b29a      	uxth	r2, r3
   17e20:	68fb      	ldr	r3, [r7, #12]
   17e22:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   17e24:	4b08      	ldr	r3, [pc, #32]	; (17e48 <prvTraceGetParam+0x88>)
   17e26:	4798      	blx	r3
		}

		return param & param_max;
   17e28:	683b      	ldr	r3, [r7, #0]
   17e2a:	687a      	ldr	r2, [r7, #4]
   17e2c:	4013      	ands	r3, r2
	}
}
   17e2e:	0018      	movs	r0, r3
   17e30:	46bd      	mov	sp, r7
   17e32:	b004      	add	sp, #16
   17e34:	bd80      	pop	{r7, pc}
   17e36:	46c0      	nop			; (mov r8, r8)
   17e38:	0000ffff 	.word	0x0000ffff
   17e3c:	00037278 	.word	0x00037278
   17e40:	000189e9 	.word	0x000189e9
   17e44:	000185a1 	.word	0x000185a1
   17e48:	00018ba5 	.word	0x00018ba5

00017e4c <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   17e4c:	b580      	push	{r7, lr}
   17e4e:	b08a      	sub	sp, #40	; 0x28
   17e50:	af00      	add	r7, sp, #0
   17e52:	6078      	str	r0, [r7, #4]
   17e54:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   17e56:	2326      	movs	r3, #38	; 0x26
   17e58:	18fb      	adds	r3, r7, r3
   17e5a:	2200      	movs	r2, #0
   17e5c:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   17e5e:	687b      	ldr	r3, [r7, #4]
   17e60:	2bfe      	cmp	r3, #254	; 0xfe
   17e62:	d904      	bls.n	17e6e <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   17e64:	4b2d      	ldr	r3, [pc, #180]	; (17f1c <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   17e66:	0018      	movs	r0, r3
   17e68:	4b2d      	ldr	r3, [pc, #180]	; (17f20 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   17e6a:	4798      	blx	r3
   17e6c:	e053      	b.n	17f16 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   17e6e:	4b2d      	ldr	r3, [pc, #180]	; (17f24 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   17e70:	681b      	ldr	r3, [r3, #0]
   17e72:	2b00      	cmp	r3, #0
   17e74:	d004      	beq.n	17e80 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   17e76:	4b2c      	ldr	r3, [pc, #176]	; (17f28 <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   17e78:	0018      	movs	r0, r3
   17e7a:	4b29      	ldr	r3, [pc, #164]	; (17f20 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   17e7c:	4798      	blx	r3
		return;
   17e7e:	e04a      	b.n	17f16 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17e80:	f3ef 8310 	mrs	r3, PRIMASK
   17e84:	613b      	str	r3, [r7, #16]
  return(result);
   17e86:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   17e88:	623b      	str	r3, [r7, #32]
   17e8a:	2301      	movs	r3, #1
   17e8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17e8e:	697b      	ldr	r3, [r7, #20]
   17e90:	f383 8810 	msr	PRIMASK, r3
   17e94:	4b23      	ldr	r3, [pc, #140]	; (17f24 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   17e96:	681b      	ldr	r3, [r3, #0]
   17e98:	1c5a      	adds	r2, r3, #1
   17e9a:	4b22      	ldr	r3, [pc, #136]	; (17f24 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   17e9c:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   17e9e:	4b23      	ldr	r3, [pc, #140]	; (17f2c <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   17ea0:	681b      	ldr	r3, [r3, #0]
   17ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17ea4:	2b00      	cmp	r3, #0
   17ea6:	d02c      	beq.n	17f02 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   17ea8:	4b21      	ldr	r3, [pc, #132]	; (17f30 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   17eaa:	781b      	ldrb	r3, [r3, #0]
   17eac:	2b00      	cmp	r3, #0
   17eae:	d028      	beq.n	17f02 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   17eb0:	20ff      	movs	r0, #255	; 0xff
   17eb2:	4b20      	ldr	r3, [pc, #128]	; (17f34 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   17eb4:	4798      	blx	r3
   17eb6:	0003      	movs	r3, r0
   17eb8:	001a      	movs	r2, r3
   17eba:	231f      	movs	r3, #31
   17ebc:	18fb      	adds	r3, r7, r3
   17ebe:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   17ec0:	683b      	ldr	r3, [r7, #0]
   17ec2:	4a1d      	ldr	r2, [pc, #116]	; (17f38 <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   17ec4:	0019      	movs	r1, r3
   17ec6:	0010      	movs	r0, r2
   17ec8:	4b1c      	ldr	r3, [pc, #112]	; (17f3c <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   17eca:	4798      	blx	r3
   17ecc:	0002      	movs	r2, r0
   17ece:	2326      	movs	r3, #38	; 0x26
   17ed0:	18fb      	adds	r3, r7, r3
   17ed2:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   17ed4:	4b1a      	ldr	r3, [pc, #104]	; (17f40 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   17ed6:	4798      	blx	r3
   17ed8:	0003      	movs	r3, r0
   17eda:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   17edc:	69bb      	ldr	r3, [r7, #24]
   17ede:	2b00      	cmp	r3, #0
   17ee0:	d00f      	beq.n	17f02 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   17ee2:	69bb      	ldr	r3, [r7, #24]
   17ee4:	221f      	movs	r2, #31
   17ee6:	18ba      	adds	r2, r7, r2
   17ee8:	7812      	ldrb	r2, [r2, #0]
   17eea:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   17eec:	687b      	ldr	r3, [r7, #4]
   17eee:	b2da      	uxtb	r2, r3
   17ef0:	69bb      	ldr	r3, [r7, #24]
   17ef2:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   17ef4:	69bb      	ldr	r3, [r7, #24]
   17ef6:	2226      	movs	r2, #38	; 0x26
   17ef8:	18ba      	adds	r2, r7, r2
   17efa:	8812      	ldrh	r2, [r2, #0]
   17efc:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   17efe:	4b11      	ldr	r3, [pc, #68]	; (17f44 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   17f00:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   17f02:	4b08      	ldr	r3, [pc, #32]	; (17f24 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   17f04:	681b      	ldr	r3, [r3, #0]
   17f06:	1e5a      	subs	r2, r3, #1
   17f08:	4b06      	ldr	r3, [pc, #24]	; (17f24 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   17f0a:	601a      	str	r2, [r3, #0]
   17f0c:	6a3b      	ldr	r3, [r7, #32]
   17f0e:	60fb      	str	r3, [r7, #12]
   17f10:	68fb      	ldr	r3, [r7, #12]
   17f12:	f383 8810 	msr	PRIMASK, r3
}
   17f16:	46bd      	mov	sp, r7
   17f18:	b00a      	add	sp, #40	; 0x28
   17f1a:	bd80      	pop	{r7, pc}
   17f1c:	000372b4 	.word	0x000372b4
   17f20:	000189e9 	.word	0x000189e9
   17f24:	20000d18 	.word	0x20000d18
   17f28:	0003730c 	.word	0x0003730c
   17f2c:	20000dc0 	.word	0x20000dc0
   17f30:	20000d24 	.word	0x20000d24
   17f34:	00018bfd 	.word	0x00018bfd
   17f38:	0000ffff 	.word	0x0000ffff
   17f3c:	00017dc1 	.word	0x00017dc1
   17f40:	000185a1 	.word	0x000185a1
   17f44:	00018ba5 	.word	0x00018ba5

00017f48 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   17f48:	b590      	push	{r4, r7, lr}
   17f4a:	b089      	sub	sp, #36	; 0x24
   17f4c:	af00      	add	r7, sp, #0
   17f4e:	0002      	movs	r2, r0
   17f50:	1dfb      	adds	r3, r7, #7
   17f52:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   17f54:	1dfb      	adds	r3, r7, #7
   17f56:	781b      	ldrb	r3, [r3, #0]
   17f58:	2b0f      	cmp	r3, #15
   17f5a:	d904      	bls.n	17f66 <prvTraceStoreTaskswitch+0x1e>
   17f5c:	4b34      	ldr	r3, [pc, #208]	; (18030 <prvTraceStoreTaskswitch+0xe8>)
   17f5e:	0018      	movs	r0, r3
   17f60:	4b34      	ldr	r3, [pc, #208]	; (18034 <prvTraceStoreTaskswitch+0xec>)
   17f62:	4798      	blx	r3
   17f64:	e061      	b.n	1802a <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17f66:	f3ef 8310 	mrs	r3, PRIMASK
   17f6a:	60fb      	str	r3, [r7, #12]
  return(result);
   17f6c:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   17f6e:	61fb      	str	r3, [r7, #28]
   17f70:	2301      	movs	r3, #1
   17f72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17f74:	693b      	ldr	r3, [r7, #16]
   17f76:	f383 8810 	msr	PRIMASK, r3
   17f7a:	4b2f      	ldr	r3, [pc, #188]	; (18038 <prvTraceStoreTaskswitch+0xf0>)
   17f7c:	681b      	ldr	r3, [r3, #0]
   17f7e:	1c5a      	adds	r2, r3, #1
   17f80:	4b2d      	ldr	r3, [pc, #180]	; (18038 <prvTraceStoreTaskswitch+0xf0>)
   17f82:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   17f84:	4b2d      	ldr	r3, [pc, #180]	; (1803c <prvTraceStoreTaskswitch+0xf4>)
   17f86:	781b      	ldrb	r3, [r3, #0]
   17f88:	1dfa      	adds	r2, r7, #7
   17f8a:	7812      	ldrb	r2, [r2, #0]
   17f8c:	429a      	cmp	r2, r3
   17f8e:	d042      	beq.n	18016 <prvTraceStoreTaskswitch+0xce>
   17f90:	4b2b      	ldr	r3, [pc, #172]	; (18040 <prvTraceStoreTaskswitch+0xf8>)
   17f92:	681b      	ldr	r3, [r3, #0]
   17f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17f96:	2b00      	cmp	r3, #0
   17f98:	d03d      	beq.n	18016 <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   17f9a:	4b2a      	ldr	r3, [pc, #168]	; (18044 <prvTraceStoreTaskswitch+0xfc>)
   17f9c:	2200      	movs	r2, #0
   17f9e:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   17fa0:	231a      	movs	r3, #26
   17fa2:	18fc      	adds	r4, r7, r3
   17fa4:	4b28      	ldr	r3, [pc, #160]	; (18048 <prvTraceStoreTaskswitch+0x100>)
   17fa6:	0018      	movs	r0, r3
   17fa8:	4b28      	ldr	r3, [pc, #160]	; (1804c <prvTraceStoreTaskswitch+0x104>)
   17faa:	4798      	blx	r3
   17fac:	0003      	movs	r3, r0
   17fae:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   17fb0:	4b22      	ldr	r3, [pc, #136]	; (1803c <prvTraceStoreTaskswitch+0xf4>)
   17fb2:	1dfa      	adds	r2, r7, #7
   17fb4:	7812      	ldrb	r2, [r2, #0]
   17fb6:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   17fb8:	2319      	movs	r3, #25
   17fba:	18fb      	adds	r3, r7, r3
   17fbc:	4a1f      	ldr	r2, [pc, #124]	; (1803c <prvTraceStoreTaskswitch+0xf4>)
   17fbe:	7812      	ldrb	r2, [r2, #0]
   17fc0:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   17fc2:	4b23      	ldr	r3, [pc, #140]	; (18050 <prvTraceStoreTaskswitch+0x108>)
   17fc4:	4798      	blx	r3
   17fc6:	0003      	movs	r3, r0
   17fc8:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   17fca:	697b      	ldr	r3, [r7, #20]
   17fcc:	2b00      	cmp	r3, #0
   17fce:	d022      	beq.n	18016 <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   17fd0:	4b1a      	ldr	r3, [pc, #104]	; (1803c <prvTraceStoreTaskswitch+0xf4>)
   17fd2:	781b      	ldrb	r3, [r3, #0]
   17fd4:	0019      	movs	r1, r3
   17fd6:	2003      	movs	r0, #3
   17fd8:	4b1e      	ldr	r3, [pc, #120]	; (18054 <prvTraceStoreTaskswitch+0x10c>)
   17fda:	4798      	blx	r3
   17fdc:	0003      	movs	r3, r0
   17fde:	2b01      	cmp	r3, #1
   17fe0:	d103      	bne.n	17fea <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   17fe2:	697b      	ldr	r3, [r7, #20]
   17fe4:	2207      	movs	r2, #7
   17fe6:	701a      	strb	r2, [r3, #0]
   17fe8:	e002      	b.n	17ff0 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   17fea:	697b      	ldr	r3, [r7, #20]
   17fec:	2206      	movs	r2, #6
   17fee:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   17ff0:	697b      	ldr	r3, [r7, #20]
   17ff2:	221a      	movs	r2, #26
   17ff4:	18ba      	adds	r2, r7, r2
   17ff6:	8812      	ldrh	r2, [r2, #0]
   17ff8:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   17ffa:	697b      	ldr	r3, [r7, #20]
   17ffc:	2219      	movs	r2, #25
   17ffe:	18ba      	adds	r2, r7, r2
   18000:	7812      	ldrb	r2, [r2, #0]
   18002:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   18004:	4b0d      	ldr	r3, [pc, #52]	; (1803c <prvTraceStoreTaskswitch+0xf4>)
   18006:	781b      	ldrb	r3, [r3, #0]
   18008:	2201      	movs	r2, #1
   1800a:	0019      	movs	r1, r3
   1800c:	2003      	movs	r0, #3
   1800e:	4b12      	ldr	r3, [pc, #72]	; (18058 <prvTraceStoreTaskswitch+0x110>)
   18010:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   18012:	4b12      	ldr	r3, [pc, #72]	; (1805c <prvTraceStoreTaskswitch+0x114>)
   18014:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   18016:	4b08      	ldr	r3, [pc, #32]	; (18038 <prvTraceStoreTaskswitch+0xf0>)
   18018:	681b      	ldr	r3, [r3, #0]
   1801a:	1e5a      	subs	r2, r3, #1
   1801c:	4b06      	ldr	r3, [pc, #24]	; (18038 <prvTraceStoreTaskswitch+0xf0>)
   1801e:	601a      	str	r2, [r3, #0]
   18020:	69fb      	ldr	r3, [r7, #28]
   18022:	60bb      	str	r3, [r7, #8]
   18024:	68bb      	ldr	r3, [r7, #8]
   18026:	f383 8810 	msr	PRIMASK, r3
}
   1802a:	46bd      	mov	sp, r7
   1802c:	b009      	add	sp, #36	; 0x24
   1802e:	bd90      	pop	{r4, r7, pc}
   18030:	00037344 	.word	0x00037344
   18034:	000189e9 	.word	0x000189e9
   18038:	20000d18 	.word	0x20000d18
   1803c:	20000d24 	.word	0x20000d24
   18040:	20000dc0 	.word	0x20000dc0
   18044:	20000d04 	.word	0x20000d04
   18048:	0000ffff 	.word	0x0000ffff
   1804c:	00018bfd 	.word	0x00018bfd
   18050:	000185a1 	.word	0x000185a1
   18054:	00018245 	.word	0x00018245
   18058:	000181a1 	.word	0x000181a1
   1805c:	00018ba5 	.word	0x00018ba5

00018060 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   18060:	b590      	push	{r4, r7, lr}
   18062:	b083      	sub	sp, #12
   18064:	af00      	add	r7, sp, #0
   18066:	0004      	movs	r4, r0
   18068:	0008      	movs	r0, r1
   1806a:	0011      	movs	r1, r2
   1806c:	1dfb      	adds	r3, r7, #7
   1806e:	1c22      	adds	r2, r4, #0
   18070:	701a      	strb	r2, [r3, #0]
   18072:	1dbb      	adds	r3, r7, #6
   18074:	1c02      	adds	r2, r0, #0
   18076:	701a      	strb	r2, [r3, #0]
   18078:	1d7b      	adds	r3, r7, #5
   1807a:	1c0a      	adds	r2, r1, #0
   1807c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1807e:	1dfb      	adds	r3, r7, #7
   18080:	781b      	ldrb	r3, [r3, #0]
   18082:	2b08      	cmp	r3, #8
   18084:	d904      	bls.n	18090 <prvTraceSetPriorityProperty+0x30>
   18086:	4b1a      	ldr	r3, [pc, #104]	; (180f0 <prvTraceSetPriorityProperty+0x90>)
   18088:	0018      	movs	r0, r3
   1808a:	4b1a      	ldr	r3, [pc, #104]	; (180f4 <prvTraceSetPriorityProperty+0x94>)
   1808c:	4798      	blx	r3
   1808e:	e02c      	b.n	180ea <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   18090:	4b19      	ldr	r3, [pc, #100]	; (180f8 <prvTraceSetPriorityProperty+0x98>)
   18092:	681a      	ldr	r2, [r3, #0]
   18094:	1dfb      	adds	r3, r7, #7
   18096:	781b      	ldrb	r3, [r3, #0]
   18098:	2164      	movs	r1, #100	; 0x64
   1809a:	18d3      	adds	r3, r2, r3
   1809c:	185b      	adds	r3, r3, r1
   1809e:	781b      	ldrb	r3, [r3, #0]
   180a0:	1dba      	adds	r2, r7, #6
   180a2:	7812      	ldrb	r2, [r2, #0]
   180a4:	429a      	cmp	r2, r3
   180a6:	d904      	bls.n	180b2 <prvTraceSetPriorityProperty+0x52>
   180a8:	4b14      	ldr	r3, [pc, #80]	; (180fc <prvTraceSetPriorityProperty+0x9c>)
   180aa:	0018      	movs	r0, r3
   180ac:	4b11      	ldr	r3, [pc, #68]	; (180f4 <prvTraceSetPriorityProperty+0x94>)
   180ae:	4798      	blx	r3
   180b0:	e01b      	b.n	180ea <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   180b2:	4b11      	ldr	r3, [pc, #68]	; (180f8 <prvTraceSetPriorityProperty+0x98>)
   180b4:	681c      	ldr	r4, [r3, #0]
   180b6:	1dfb      	adds	r3, r7, #7
   180b8:	781a      	ldrb	r2, [r3, #0]
   180ba:	1dbb      	adds	r3, r7, #6
   180bc:	781b      	ldrb	r3, [r3, #0]
   180be:	0011      	movs	r1, r2
   180c0:	0018      	movs	r0, r3
   180c2:	4b0f      	ldr	r3, [pc, #60]	; (18100 <prvTraceSetPriorityProperty+0xa0>)
   180c4:	4798      	blx	r3
   180c6:	0003      	movs	r3, r0
   180c8:	0018      	movs	r0, r3
   180ca:	4b0b      	ldr	r3, [pc, #44]	; (180f8 <prvTraceSetPriorityProperty+0x98>)
   180cc:	681a      	ldr	r2, [r3, #0]
   180ce:	1dfb      	adds	r3, r7, #7
   180d0:	781b      	ldrb	r3, [r3, #0]
   180d2:	2170      	movs	r1, #112	; 0x70
   180d4:	18d3      	adds	r3, r2, r3
   180d6:	185b      	adds	r3, r3, r1
   180d8:	781b      	ldrb	r3, [r3, #0]
   180da:	18c3      	adds	r3, r0, r3
   180dc:	3301      	adds	r3, #1
   180de:	229c      	movs	r2, #156	; 0x9c
   180e0:	18e3      	adds	r3, r4, r3
   180e2:	189b      	adds	r3, r3, r2
   180e4:	1d7a      	adds	r2, r7, #5
   180e6:	7812      	ldrb	r2, [r2, #0]
   180e8:	701a      	strb	r2, [r3, #0]
}
   180ea:	46bd      	mov	sp, r7
   180ec:	b003      	add	sp, #12
   180ee:	bd90      	pop	{r4, r7, pc}
   180f0:	000374d8 	.word	0x000374d8
   180f4:	000189e9 	.word	0x000189e9
   180f8:	20000dc0 	.word	0x20000dc0
   180fc:	00037524 	.word	0x00037524
   18100:	000185f5 	.word	0x000185f5

00018104 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   18104:	b590      	push	{r4, r7, lr}
   18106:	b083      	sub	sp, #12
   18108:	af00      	add	r7, sp, #0
   1810a:	0002      	movs	r2, r0
   1810c:	1dfb      	adds	r3, r7, #7
   1810e:	701a      	strb	r2, [r3, #0]
   18110:	1dbb      	adds	r3, r7, #6
   18112:	1c0a      	adds	r2, r1, #0
   18114:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18116:	1dfb      	adds	r3, r7, #7
   18118:	781b      	ldrb	r3, [r3, #0]
   1811a:	2b08      	cmp	r3, #8
   1811c:	d905      	bls.n	1812a <prvTraceGetPriorityProperty+0x26>
   1811e:	4b1b      	ldr	r3, [pc, #108]	; (1818c <prvTraceGetPriorityProperty+0x88>)
   18120:	0018      	movs	r0, r3
   18122:	4b1b      	ldr	r3, [pc, #108]	; (18190 <prvTraceGetPriorityProperty+0x8c>)
   18124:	4798      	blx	r3
   18126:	2300      	movs	r3, #0
   18128:	e02b      	b.n	18182 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1812a:	4b1a      	ldr	r3, [pc, #104]	; (18194 <prvTraceGetPriorityProperty+0x90>)
   1812c:	681a      	ldr	r2, [r3, #0]
   1812e:	1dfb      	adds	r3, r7, #7
   18130:	781b      	ldrb	r3, [r3, #0]
   18132:	2164      	movs	r1, #100	; 0x64
   18134:	18d3      	adds	r3, r2, r3
   18136:	185b      	adds	r3, r3, r1
   18138:	781b      	ldrb	r3, [r3, #0]
   1813a:	1dba      	adds	r2, r7, #6
   1813c:	7812      	ldrb	r2, [r2, #0]
   1813e:	429a      	cmp	r2, r3
   18140:	d905      	bls.n	1814e <prvTraceGetPriorityProperty+0x4a>
   18142:	4b15      	ldr	r3, [pc, #84]	; (18198 <prvTraceGetPriorityProperty+0x94>)
   18144:	0018      	movs	r0, r3
   18146:	4b12      	ldr	r3, [pc, #72]	; (18190 <prvTraceGetPriorityProperty+0x8c>)
   18148:	4798      	blx	r3
   1814a:	2300      	movs	r3, #0
   1814c:	e019      	b.n	18182 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   1814e:	4b11      	ldr	r3, [pc, #68]	; (18194 <prvTraceGetPriorityProperty+0x90>)
   18150:	681c      	ldr	r4, [r3, #0]
   18152:	1dfb      	adds	r3, r7, #7
   18154:	781a      	ldrb	r2, [r3, #0]
   18156:	1dbb      	adds	r3, r7, #6
   18158:	781b      	ldrb	r3, [r3, #0]
   1815a:	0011      	movs	r1, r2
   1815c:	0018      	movs	r0, r3
   1815e:	4b0f      	ldr	r3, [pc, #60]	; (1819c <prvTraceGetPriorityProperty+0x98>)
   18160:	4798      	blx	r3
   18162:	0003      	movs	r3, r0
   18164:	0018      	movs	r0, r3
   18166:	4b0b      	ldr	r3, [pc, #44]	; (18194 <prvTraceGetPriorityProperty+0x90>)
   18168:	681a      	ldr	r2, [r3, #0]
   1816a:	1dfb      	adds	r3, r7, #7
   1816c:	781b      	ldrb	r3, [r3, #0]
   1816e:	2170      	movs	r1, #112	; 0x70
   18170:	18d3      	adds	r3, r2, r3
   18172:	185b      	adds	r3, r3, r1
   18174:	781b      	ldrb	r3, [r3, #0]
   18176:	18c3      	adds	r3, r0, r3
   18178:	3301      	adds	r3, #1
   1817a:	229c      	movs	r2, #156	; 0x9c
   1817c:	18e3      	adds	r3, r4, r3
   1817e:	189b      	adds	r3, r3, r2
   18180:	781b      	ldrb	r3, [r3, #0]
}
   18182:	0018      	movs	r0, r3
   18184:	46bd      	mov	sp, r7
   18186:	b003      	add	sp, #12
   18188:	bd90      	pop	{r4, r7, pc}
   1818a:	46c0      	nop			; (mov r8, r8)
   1818c:	00037564 	.word	0x00037564
   18190:	000189e9 	.word	0x000189e9
   18194:	20000dc0 	.word	0x20000dc0
   18198:	000375b0 	.word	0x000375b0
   1819c:	000185f5 	.word	0x000185f5

000181a0 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   181a0:	b590      	push	{r4, r7, lr}
   181a2:	b083      	sub	sp, #12
   181a4:	af00      	add	r7, sp, #0
   181a6:	0004      	movs	r4, r0
   181a8:	0008      	movs	r0, r1
   181aa:	0011      	movs	r1, r2
   181ac:	1dfb      	adds	r3, r7, #7
   181ae:	1c22      	adds	r2, r4, #0
   181b0:	701a      	strb	r2, [r3, #0]
   181b2:	1dbb      	adds	r3, r7, #6
   181b4:	1c02      	adds	r2, r0, #0
   181b6:	701a      	strb	r2, [r3, #0]
   181b8:	1d7b      	adds	r3, r7, #5
   181ba:	1c0a      	adds	r2, r1, #0
   181bc:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   181be:	1dfb      	adds	r3, r7, #7
   181c0:	781b      	ldrb	r3, [r3, #0]
   181c2:	2b08      	cmp	r3, #8
   181c4:	d904      	bls.n	181d0 <prvTraceSetObjectState+0x30>
   181c6:	4b1a      	ldr	r3, [pc, #104]	; (18230 <prvTraceSetObjectState+0x90>)
   181c8:	0018      	movs	r0, r3
   181ca:	4b1a      	ldr	r3, [pc, #104]	; (18234 <prvTraceSetObjectState+0x94>)
   181cc:	4798      	blx	r3
   181ce:	e02b      	b.n	18228 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   181d0:	4b19      	ldr	r3, [pc, #100]	; (18238 <prvTraceSetObjectState+0x98>)
   181d2:	681a      	ldr	r2, [r3, #0]
   181d4:	1dfb      	adds	r3, r7, #7
   181d6:	781b      	ldrb	r3, [r3, #0]
   181d8:	2164      	movs	r1, #100	; 0x64
   181da:	18d3      	adds	r3, r2, r3
   181dc:	185b      	adds	r3, r3, r1
   181de:	781b      	ldrb	r3, [r3, #0]
   181e0:	1dba      	adds	r2, r7, #6
   181e2:	7812      	ldrb	r2, [r2, #0]
   181e4:	429a      	cmp	r2, r3
   181e6:	d904      	bls.n	181f2 <prvTraceSetObjectState+0x52>
   181e8:	4b14      	ldr	r3, [pc, #80]	; (1823c <prvTraceSetObjectState+0x9c>)
   181ea:	0018      	movs	r0, r3
   181ec:	4b11      	ldr	r3, [pc, #68]	; (18234 <prvTraceSetObjectState+0x94>)
   181ee:	4798      	blx	r3
   181f0:	e01a      	b.n	18228 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   181f2:	4b11      	ldr	r3, [pc, #68]	; (18238 <prvTraceSetObjectState+0x98>)
   181f4:	681c      	ldr	r4, [r3, #0]
   181f6:	1dfb      	adds	r3, r7, #7
   181f8:	781a      	ldrb	r2, [r3, #0]
   181fa:	1dbb      	adds	r3, r7, #6
   181fc:	781b      	ldrb	r3, [r3, #0]
   181fe:	0011      	movs	r1, r2
   18200:	0018      	movs	r0, r3
   18202:	4b0f      	ldr	r3, [pc, #60]	; (18240 <prvTraceSetObjectState+0xa0>)
   18204:	4798      	blx	r3
   18206:	0003      	movs	r3, r0
   18208:	0018      	movs	r0, r3
   1820a:	4b0b      	ldr	r3, [pc, #44]	; (18238 <prvTraceSetObjectState+0x98>)
   1820c:	681a      	ldr	r2, [r3, #0]
   1820e:	1dfb      	adds	r3, r7, #7
   18210:	781b      	ldrb	r3, [r3, #0]
   18212:	2170      	movs	r1, #112	; 0x70
   18214:	18d3      	adds	r3, r2, r3
   18216:	185b      	adds	r3, r3, r1
   18218:	781b      	ldrb	r3, [r3, #0]
   1821a:	18c3      	adds	r3, r0, r3
   1821c:	229c      	movs	r2, #156	; 0x9c
   1821e:	18e3      	adds	r3, r4, r3
   18220:	189b      	adds	r3, r3, r2
   18222:	1d7a      	adds	r2, r7, #5
   18224:	7812      	ldrb	r2, [r2, #0]
   18226:	701a      	strb	r2, [r3, #0]
}
   18228:	46bd      	mov	sp, r7
   1822a:	b003      	add	sp, #12
   1822c:	bd90      	pop	{r4, r7, pc}
   1822e:	46c0      	nop			; (mov r8, r8)
   18230:	000375f0 	.word	0x000375f0
   18234:	000189e9 	.word	0x000189e9
   18238:	20000dc0 	.word	0x20000dc0
   1823c:	00037634 	.word	0x00037634
   18240:	000185f5 	.word	0x000185f5

00018244 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   18244:	b590      	push	{r4, r7, lr}
   18246:	b083      	sub	sp, #12
   18248:	af00      	add	r7, sp, #0
   1824a:	0002      	movs	r2, r0
   1824c:	1dfb      	adds	r3, r7, #7
   1824e:	701a      	strb	r2, [r3, #0]
   18250:	1dbb      	adds	r3, r7, #6
   18252:	1c0a      	adds	r2, r1, #0
   18254:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18256:	1dfb      	adds	r3, r7, #7
   18258:	781b      	ldrb	r3, [r3, #0]
   1825a:	2b08      	cmp	r3, #8
   1825c:	d905      	bls.n	1826a <prvTraceGetObjectState+0x26>
   1825e:	4b1a      	ldr	r3, [pc, #104]	; (182c8 <prvTraceGetObjectState+0x84>)
   18260:	0018      	movs	r0, r3
   18262:	4b1a      	ldr	r3, [pc, #104]	; (182cc <prvTraceGetObjectState+0x88>)
   18264:	4798      	blx	r3
   18266:	2300      	movs	r3, #0
   18268:	e02a      	b.n	182c0 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1826a:	4b19      	ldr	r3, [pc, #100]	; (182d0 <prvTraceGetObjectState+0x8c>)
   1826c:	681a      	ldr	r2, [r3, #0]
   1826e:	1dfb      	adds	r3, r7, #7
   18270:	781b      	ldrb	r3, [r3, #0]
   18272:	2164      	movs	r1, #100	; 0x64
   18274:	18d3      	adds	r3, r2, r3
   18276:	185b      	adds	r3, r3, r1
   18278:	781b      	ldrb	r3, [r3, #0]
   1827a:	1dba      	adds	r2, r7, #6
   1827c:	7812      	ldrb	r2, [r2, #0]
   1827e:	429a      	cmp	r2, r3
   18280:	d905      	bls.n	1828e <prvTraceGetObjectState+0x4a>
   18282:	4b14      	ldr	r3, [pc, #80]	; (182d4 <prvTraceGetObjectState+0x90>)
   18284:	0018      	movs	r0, r3
   18286:	4b11      	ldr	r3, [pc, #68]	; (182cc <prvTraceGetObjectState+0x88>)
   18288:	4798      	blx	r3
   1828a:	2300      	movs	r3, #0
   1828c:	e018      	b.n	182c0 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   1828e:	4b10      	ldr	r3, [pc, #64]	; (182d0 <prvTraceGetObjectState+0x8c>)
   18290:	681c      	ldr	r4, [r3, #0]
   18292:	1dfb      	adds	r3, r7, #7
   18294:	781a      	ldrb	r2, [r3, #0]
   18296:	1dbb      	adds	r3, r7, #6
   18298:	781b      	ldrb	r3, [r3, #0]
   1829a:	0011      	movs	r1, r2
   1829c:	0018      	movs	r0, r3
   1829e:	4b0e      	ldr	r3, [pc, #56]	; (182d8 <prvTraceGetObjectState+0x94>)
   182a0:	4798      	blx	r3
   182a2:	0003      	movs	r3, r0
   182a4:	0018      	movs	r0, r3
   182a6:	4b0a      	ldr	r3, [pc, #40]	; (182d0 <prvTraceGetObjectState+0x8c>)
   182a8:	681a      	ldr	r2, [r3, #0]
   182aa:	1dfb      	adds	r3, r7, #7
   182ac:	781b      	ldrb	r3, [r3, #0]
   182ae:	2170      	movs	r1, #112	; 0x70
   182b0:	18d3      	adds	r3, r2, r3
   182b2:	185b      	adds	r3, r3, r1
   182b4:	781b      	ldrb	r3, [r3, #0]
   182b6:	18c3      	adds	r3, r0, r3
   182b8:	229c      	movs	r2, #156	; 0x9c
   182ba:	18e3      	adds	r3, r4, r3
   182bc:	189b      	adds	r3, r3, r2
   182be:	781b      	ldrb	r3, [r3, #0]
}
   182c0:	0018      	movs	r0, r3
   182c2:	46bd      	mov	sp, r7
   182c4:	b003      	add	sp, #12
   182c6:	bd90      	pop	{r4, r7, pc}
   182c8:	00037670 	.word	0x00037670
   182cc:	000189e9 	.word	0x000189e9
   182d0:	20000dc0 	.word	0x20000dc0
   182d4:	000376b4 	.word	0x000376b4
   182d8:	000185f5 	.word	0x000185f5

000182dc <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   182dc:	b590      	push	{r4, r7, lr}
   182de:	b083      	sub	sp, #12
   182e0:	af00      	add	r7, sp, #0
   182e2:	0002      	movs	r2, r0
   182e4:	1dfb      	adds	r3, r7, #7
   182e6:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   182e8:	4b11      	ldr	r3, [pc, #68]	; (18330 <prvTraceSetTaskInstanceFinished+0x54>)
   182ea:	681b      	ldr	r3, [r3, #0]
   182ec:	2267      	movs	r2, #103	; 0x67
   182ee:	5c9b      	ldrb	r3, [r3, r2]
   182f0:	1dfa      	adds	r2, r7, #7
   182f2:	7812      	ldrb	r2, [r2, #0]
   182f4:	429a      	cmp	r2, r3
   182f6:	d904      	bls.n	18302 <prvTraceSetTaskInstanceFinished+0x26>
   182f8:	4b0e      	ldr	r3, [pc, #56]	; (18334 <prvTraceSetTaskInstanceFinished+0x58>)
   182fa:	0018      	movs	r0, r3
   182fc:	4b0e      	ldr	r3, [pc, #56]	; (18338 <prvTraceSetTaskInstanceFinished+0x5c>)
   182fe:	4798      	blx	r3
   18300:	e013      	b.n	1832a <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   18302:	4b0b      	ldr	r3, [pc, #44]	; (18330 <prvTraceSetTaskInstanceFinished+0x54>)
   18304:	681c      	ldr	r4, [r3, #0]
   18306:	1dfb      	adds	r3, r7, #7
   18308:	781b      	ldrb	r3, [r3, #0]
   1830a:	2103      	movs	r1, #3
   1830c:	0018      	movs	r0, r3
   1830e:	4b0b      	ldr	r3, [pc, #44]	; (1833c <prvTraceSetTaskInstanceFinished+0x60>)
   18310:	4798      	blx	r3
   18312:	0003      	movs	r3, r0
   18314:	0019      	movs	r1, r3
   18316:	4b06      	ldr	r3, [pc, #24]	; (18330 <prvTraceSetTaskInstanceFinished+0x54>)
   18318:	681b      	ldr	r3, [r3, #0]
   1831a:	2273      	movs	r2, #115	; 0x73
   1831c:	5c9b      	ldrb	r3, [r3, r2]
   1831e:	18cb      	adds	r3, r1, r3
   18320:	229c      	movs	r2, #156	; 0x9c
   18322:	18e3      	adds	r3, r4, r3
   18324:	189b      	adds	r3, r3, r2
   18326:	2200      	movs	r2, #0
   18328:	701a      	strb	r2, [r3, #0]
#endif
}
   1832a:	46bd      	mov	sp, r7
   1832c:	b003      	add	sp, #12
   1832e:	bd90      	pop	{r4, r7, pc}
   18330:	20000dc0 	.word	0x20000dc0
   18334:	000376f0 	.word	0x000376f0
   18338:	000189e9 	.word	0x000189e9
   1833c:	000185f5 	.word	0x000185f5

00018340 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   18340:	b580      	push	{r7, lr}
   18342:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   18344:	4b75      	ldr	r3, [pc, #468]	; (1851c <prvTraceInitTraceData+0x1dc>)
   18346:	681b      	ldr	r3, [r3, #0]
   18348:	2b00      	cmp	r3, #0
   1834a:	d103      	bne.n	18354 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   1834c:	4b73      	ldr	r3, [pc, #460]	; (1851c <prvTraceInitTraceData+0x1dc>)
   1834e:	4a74      	ldr	r2, [pc, #464]	; (18520 <prvTraceInitTraceData+0x1e0>)
   18350:	601a      	str	r2, [r3, #0]
   18352:	e006      	b.n	18362 <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   18354:	4b71      	ldr	r3, [pc, #452]	; (1851c <prvTraceInitTraceData+0x1dc>)
   18356:	681b      	ldr	r3, [r3, #0]
   18358:	781b      	ldrb	r3, [r3, #0]
   1835a:	b2db      	uxtb	r3, r3
   1835c:	2b01      	cmp	r3, #1
   1835e:	d100      	bne.n	18362 <prvTraceInitTraceData+0x22>
   18360:	e0d8      	b.n	18514 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   18362:	4b70      	ldr	r3, [pc, #448]	; (18524 <prvTraceInitTraceData+0x1e4>)
   18364:	681a      	ldr	r2, [r3, #0]
   18366:	4b70      	ldr	r3, [pc, #448]	; (18528 <prvTraceInitTraceData+0x1e8>)
   18368:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   1836a:	4b6c      	ldr	r3, [pc, #432]	; (1851c <prvTraceInitTraceData+0x1dc>)
   1836c:	6818      	ldr	r0, [r3, #0]
   1836e:	23bd      	movs	r3, #189	; 0xbd
   18370:	011b      	lsls	r3, r3, #4
   18372:	001a      	movs	r2, r3
   18374:	2100      	movs	r1, #0
   18376:	4b6d      	ldr	r3, [pc, #436]	; (1852c <prvTraceInitTraceData+0x1ec>)
   18378:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   1837a:	4b68      	ldr	r3, [pc, #416]	; (1851c <prvTraceInitTraceData+0x1dc>)
   1837c:	681b      	ldr	r3, [r3, #0]
   1837e:	4a6c      	ldr	r2, [pc, #432]	; (18530 <prvTraceInitTraceData+0x1f0>)
   18380:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   18382:	4b66      	ldr	r3, [pc, #408]	; (1851c <prvTraceInitTraceData+0x1dc>)
   18384:	681b      	ldr	r3, [r3, #0]
   18386:	2205      	movs	r2, #5
   18388:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   1838a:	4b64      	ldr	r3, [pc, #400]	; (1851c <prvTraceInitTraceData+0x1dc>)
   1838c:	681b      	ldr	r3, [r3, #0]
   1838e:	2200      	movs	r2, #0
   18390:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   18392:	4b62      	ldr	r3, [pc, #392]	; (1851c <prvTraceInitTraceData+0x1dc>)
   18394:	681b      	ldr	r3, [r3, #0]
   18396:	22bd      	movs	r2, #189	; 0xbd
   18398:	0112      	lsls	r2, r2, #4
   1839a:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   1839c:	4b5f      	ldr	r3, [pc, #380]	; (1851c <prvTraceInitTraceData+0x1dc>)
   1839e:	681b      	ldr	r3, [r3, #0]
   183a0:	2296      	movs	r2, #150	; 0x96
   183a2:	0052      	lsls	r2, r2, #1
   183a4:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   183a6:	4b5d      	ldr	r3, [pc, #372]	; (1851c <prvTraceInitTraceData+0x1dc>)
   183a8:	681b      	ldr	r3, [r3, #0]
   183aa:	4a62      	ldr	r2, [pc, #392]	; (18534 <prvTraceInitTraceData+0x1f4>)
   183ac:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   183ae:	4b5b      	ldr	r3, [pc, #364]	; (1851c <prvTraceInitTraceData+0x1dc>)
   183b0:	681b      	ldr	r3, [r3, #0]
   183b2:	2200      	movs	r2, #0
   183b4:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   183b6:	4b59      	ldr	r3, [pc, #356]	; (1851c <prvTraceInitTraceData+0x1dc>)
   183b8:	681b      	ldr	r3, [r3, #0]
   183ba:	2200      	movs	r2, #0
   183bc:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   183be:	4b5e      	ldr	r3, [pc, #376]	; (18538 <prvTraceInitTraceData+0x1f8>)
   183c0:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   183c2:	4b56      	ldr	r3, [pc, #344]	; (1851c <prvTraceInitTraceData+0x1dc>)
   183c4:	681b      	ldr	r3, [r3, #0]
   183c6:	4a5d      	ldr	r2, [pc, #372]	; (1853c <prvTraceInitTraceData+0x1fc>)
   183c8:	495d      	ldr	r1, [pc, #372]	; (18540 <prvTraceInitTraceData+0x200>)
   183ca:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   183cc:	4b53      	ldr	r3, [pc, #332]	; (1851c <prvTraceInitTraceData+0x1dc>)
   183ce:	681a      	ldr	r2, [r3, #0]
   183d0:	23ac      	movs	r3, #172	; 0xac
   183d2:	00db      	lsls	r3, r3, #3
   183d4:	21c8      	movs	r1, #200	; 0xc8
   183d6:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   183d8:	4b50      	ldr	r3, [pc, #320]	; (1851c <prvTraceInitTraceData+0x1dc>)
   183da:	681b      	ldr	r3, [r3, #0]
   183dc:	4a59      	ldr	r2, [pc, #356]	; (18544 <prvTraceInitTraceData+0x204>)
   183de:	2101      	movs	r1, #1
   183e0:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   183e2:	4b4e      	ldr	r3, [pc, #312]	; (1851c <prvTraceInitTraceData+0x1dc>)
   183e4:	681a      	ldr	r2, [r3, #0]
   183e6:	23d7      	movs	r3, #215	; 0xd7
   183e8:	00db      	lsls	r3, r3, #3
   183ea:	4957      	ldr	r1, [pc, #348]	; (18548 <prvTraceInitTraceData+0x208>)
   183ec:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   183ee:	4b4b      	ldr	r3, [pc, #300]	; (1851c <prvTraceInitTraceData+0x1dc>)
   183f0:	681b      	ldr	r3, [r3, #0]
   183f2:	4a56      	ldr	r2, [pc, #344]	; (1854c <prvTraceInitTraceData+0x20c>)
   183f4:	4694      	mov	ip, r2
   183f6:	4463      	add	r3, ip
   183f8:	4955      	ldr	r1, [pc, #340]	; (18550 <prvTraceInitTraceData+0x210>)
   183fa:	2250      	movs	r2, #80	; 0x50
   183fc:	0018      	movs	r0, r3
   183fe:	4b55      	ldr	r3, [pc, #340]	; (18554 <prvTraceInitTraceData+0x214>)
   18400:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   18402:	4b46      	ldr	r3, [pc, #280]	; (1851c <prvTraceInitTraceData+0x1dc>)
   18404:	681b      	ldr	r3, [r3, #0]
   18406:	4a54      	ldr	r2, [pc, #336]	; (18558 <prvTraceInitTraceData+0x218>)
   18408:	4954      	ldr	r1, [pc, #336]	; (1855c <prvTraceInitTraceData+0x21c>)
   1840a:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   1840c:	4b43      	ldr	r3, [pc, #268]	; (1851c <prvTraceInitTraceData+0x1dc>)
   1840e:	681b      	ldr	r3, [r3, #0]
   18410:	4a53      	ldr	r2, [pc, #332]	; (18560 <prvTraceInitTraceData+0x220>)
   18412:	210a      	movs	r1, #10
   18414:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   18416:	4b41      	ldr	r3, [pc, #260]	; (1851c <prvTraceInitTraceData+0x1dc>)
   18418:	681b      	ldr	r3, [r3, #0]
   1841a:	4a52      	ldr	r2, [pc, #328]	; (18564 <prvTraceInitTraceData+0x224>)
   1841c:	210b      	movs	r1, #11
   1841e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   18420:	4b3e      	ldr	r3, [pc, #248]	; (1851c <prvTraceInitTraceData+0x1dc>)
   18422:	681b      	ldr	r3, [r3, #0]
   18424:	4a50      	ldr	r2, [pc, #320]	; (18568 <prvTraceInitTraceData+0x228>)
   18426:	210c      	movs	r1, #12
   18428:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   1842a:	4b3c      	ldr	r3, [pc, #240]	; (1851c <prvTraceInitTraceData+0x1dc>)
   1842c:	681b      	ldr	r3, [r3, #0]
   1842e:	4a4f      	ldr	r2, [pc, #316]	; (1856c <prvTraceInitTraceData+0x22c>)
   18430:	210d      	movs	r1, #13
   18432:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   18434:	4b39      	ldr	r3, [pc, #228]	; (1851c <prvTraceInitTraceData+0x1dc>)
   18436:	681b      	ldr	r3, [r3, #0]
   18438:	4a4d      	ldr	r2, [pc, #308]	; (18570 <prvTraceInitTraceData+0x230>)
   1843a:	2171      	movs	r1, #113	; 0x71
   1843c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   1843e:	4b37      	ldr	r3, [pc, #220]	; (1851c <prvTraceInitTraceData+0x1dc>)
   18440:	681b      	ldr	r3, [r3, #0]
   18442:	4a4c      	ldr	r2, [pc, #304]	; (18574 <prvTraceInitTraceData+0x234>)
   18444:	2172      	movs	r1, #114	; 0x72
   18446:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   18448:	4b34      	ldr	r3, [pc, #208]	; (1851c <prvTraceInitTraceData+0x1dc>)
   1844a:	681b      	ldr	r3, [r3, #0]
   1844c:	4a4a      	ldr	r2, [pc, #296]	; (18578 <prvTraceInitTraceData+0x238>)
   1844e:	2173      	movs	r1, #115	; 0x73
   18450:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   18452:	4b32      	ldr	r3, [pc, #200]	; (1851c <prvTraceInitTraceData+0x1dc>)
   18454:	681b      	ldr	r3, [r3, #0]
   18456:	4a49      	ldr	r2, [pc, #292]	; (1857c <prvTraceInitTraceData+0x23c>)
   18458:	2174      	movs	r1, #116	; 0x74
   1845a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   1845c:	4b2f      	ldr	r3, [pc, #188]	; (1851c <prvTraceInitTraceData+0x1dc>)
   1845e:	681b      	ldr	r3, [r3, #0]
   18460:	4a47      	ldr	r2, [pc, #284]	; (18580 <prvTraceInitTraceData+0x240>)
   18462:	21f1      	movs	r1, #241	; 0xf1
   18464:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   18466:	4b2d      	ldr	r3, [pc, #180]	; (1851c <prvTraceInitTraceData+0x1dc>)
   18468:	681b      	ldr	r3, [r3, #0]
   1846a:	4a46      	ldr	r2, [pc, #280]	; (18584 <prvTraceInitTraceData+0x244>)
   1846c:	21f2      	movs	r1, #242	; 0xf2
   1846e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   18470:	4b2a      	ldr	r3, [pc, #168]	; (1851c <prvTraceInitTraceData+0x1dc>)
   18472:	681b      	ldr	r3, [r3, #0]
   18474:	4a44      	ldr	r2, [pc, #272]	; (18588 <prvTraceInitTraceData+0x248>)
   18476:	21f3      	movs	r1, #243	; 0xf3
   18478:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   1847a:	4b28      	ldr	r3, [pc, #160]	; (1851c <prvTraceInitTraceData+0x1dc>)
   1847c:	681b      	ldr	r3, [r3, #0]
   1847e:	4a43      	ldr	r2, [pc, #268]	; (1858c <prvTraceInitTraceData+0x24c>)
   18480:	21f4      	movs	r1, #244	; 0xf4
   18482:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   18484:	4b42      	ldr	r3, [pc, #264]	; (18590 <prvTraceInitTraceData+0x250>)
   18486:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   18488:	4b24      	ldr	r3, [pc, #144]	; (1851c <prvTraceInitTraceData+0x1dc>)
   1848a:	681b      	ldr	r3, [r3, #0]
   1848c:	22f4      	movs	r2, #244	; 0xf4
   1848e:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   18490:	4b22      	ldr	r3, [pc, #136]	; (1851c <prvTraceInitTraceData+0x1dc>)
   18492:	681b      	ldr	r3, [r3, #0]
   18494:	22f3      	movs	r2, #243	; 0xf3
   18496:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   18498:	4b20      	ldr	r3, [pc, #128]	; (1851c <prvTraceInitTraceData+0x1dc>)
   1849a:	681b      	ldr	r3, [r3, #0]
   1849c:	22f2      	movs	r2, #242	; 0xf2
   1849e:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   184a0:	4b1e      	ldr	r3, [pc, #120]	; (1851c <prvTraceInitTraceData+0x1dc>)
   184a2:	681b      	ldr	r3, [r3, #0]
   184a4:	22f1      	movs	r2, #241	; 0xf1
   184a6:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   184a8:	4b1c      	ldr	r3, [pc, #112]	; (1851c <prvTraceInitTraceData+0x1dc>)
   184aa:	681b      	ldr	r3, [r3, #0]
   184ac:	2274      	movs	r2, #116	; 0x74
   184ae:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   184b0:	4b1a      	ldr	r3, [pc, #104]	; (1851c <prvTraceInitTraceData+0x1dc>)
   184b2:	681b      	ldr	r3, [r3, #0]
   184b4:	2273      	movs	r2, #115	; 0x73
   184b6:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   184b8:	4b18      	ldr	r3, [pc, #96]	; (1851c <prvTraceInitTraceData+0x1dc>)
   184ba:	681b      	ldr	r3, [r3, #0]
   184bc:	2272      	movs	r2, #114	; 0x72
   184be:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   184c0:	4b16      	ldr	r3, [pc, #88]	; (1851c <prvTraceInitTraceData+0x1dc>)
   184c2:	681b      	ldr	r3, [r3, #0]
   184c4:	2271      	movs	r2, #113	; 0x71
   184c6:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   184c8:	4b14      	ldr	r3, [pc, #80]	; (1851c <prvTraceInitTraceData+0x1dc>)
   184ca:	681b      	ldr	r3, [r3, #0]
   184cc:	2204      	movs	r2, #4
   184ce:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   184d0:	4b12      	ldr	r3, [pc, #72]	; (1851c <prvTraceInitTraceData+0x1dc>)
   184d2:	681b      	ldr	r3, [r3, #0]
   184d4:	2203      	movs	r2, #3
   184d6:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   184d8:	4b10      	ldr	r3, [pc, #64]	; (1851c <prvTraceInitTraceData+0x1dc>)
   184da:	681b      	ldr	r3, [r3, #0]
   184dc:	2202      	movs	r2, #2
   184de:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   184e0:	4b0e      	ldr	r3, [pc, #56]	; (1851c <prvTraceInitTraceData+0x1dc>)
   184e2:	681b      	ldr	r3, [r3, #0]
   184e4:	2201      	movs	r2, #1
   184e6:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   184e8:	4b2a      	ldr	r3, [pc, #168]	; (18594 <prvTraceInitTraceData+0x254>)
   184ea:	681b      	ldr	r3, [r3, #0]
   184ec:	2b00      	cmp	r3, #0
   184ee:	d012      	beq.n	18516 <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   184f0:	4b0a      	ldr	r3, [pc, #40]	; (1851c <prvTraceInitTraceData+0x1dc>)
   184f2:	681b      	ldr	r3, [r3, #0]
   184f4:	4a15      	ldr	r2, [pc, #84]	; (1854c <prvTraceInitTraceData+0x20c>)
   184f6:	1898      	adds	r0, r3, r2
   184f8:	4b26      	ldr	r3, [pc, #152]	; (18594 <prvTraceInitTraceData+0x254>)
   184fa:	681b      	ldr	r3, [r3, #0]
   184fc:	2250      	movs	r2, #80	; 0x50
   184fe:	0019      	movs	r1, r3
   18500:	4b14      	ldr	r3, [pc, #80]	; (18554 <prvTraceInitTraceData+0x214>)
   18502:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   18504:	4b05      	ldr	r3, [pc, #20]	; (1851c <prvTraceInitTraceData+0x1dc>)
   18506:	681b      	ldr	r3, [r3, #0]
   18508:	4a23      	ldr	r2, [pc, #140]	; (18598 <prvTraceInitTraceData+0x258>)
   1850a:	2101      	movs	r1, #1
   1850c:	5099      	str	r1, [r3, r2]
		vTraceStop();
   1850e:	4b23      	ldr	r3, [pc, #140]	; (1859c <prvTraceInitTraceData+0x25c>)
   18510:	4798      	blx	r3
   18512:	e000      	b.n	18516 <prvTraceInitTraceData+0x1d6>
			return;
   18514:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   18516:	46bd      	mov	sp, r7
   18518:	bd80      	pop	{r7, pc}
   1851a:	46c0      	nop			; (mov r8, r8)
   1851c:	20000dc0 	.word	0x20000dc0
   18520:	200049c0 	.word	0x200049c0
   18524:	e000e018 	.word	0xe000e018
   18528:	20005590 	.word	0x20005590
   1852c:	0003457f 	.word	0x0003457f
   18530:	00001aa1 	.word	0x00001aa1
   18534:	f0f0f0f0 	.word	0xf0f0f0f0
   18538:	000174a5 	.word	0x000174a5
   1853c:	0000055c 	.word	0x0000055c
   18540:	f1f1f1f1 	.word	0xf1f1f1f1
   18544:	00000564 	.word	0x00000564
   18548:	f2f2f2f2 	.word	0xf2f2f2f2
   1854c:	000006bc 	.word	0x000006bc
   18550:	00037738 	.word	0x00037738
   18554:	000188b5 	.word	0x000188b5
   18558:	0000070c 	.word	0x0000070c
   1855c:	f3f3f3f3 	.word	0xf3f3f3f3
   18560:	00000bc4 	.word	0x00000bc4
   18564:	00000bc5 	.word	0x00000bc5
   18568:	00000bc6 	.word	0x00000bc6
   1856c:	00000bc7 	.word	0x00000bc7
   18570:	00000bc8 	.word	0x00000bc8
   18574:	00000bc9 	.word	0x00000bc9
   18578:	00000bca 	.word	0x00000bca
   1857c:	00000bcb 	.word	0x00000bcb
   18580:	00000bcc 	.word	0x00000bcc
   18584:	00000bcd 	.word	0x00000bcd
   18588:	00000bce 	.word	0x00000bce
   1858c:	00000bcf 	.word	0x00000bcf
   18590:	00017645 	.word	0x00017645
   18594:	20000d20 	.word	0x20000d20
   18598:	000006b4 	.word	0x000006b4
   1859c:	000178ad 	.word	0x000178ad

000185a0 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   185a0:	b580      	push	{r7, lr}
   185a2:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   185a4:	4b10      	ldr	r3, [pc, #64]	; (185e8 <prvTraceNextFreeEventBufferSlot+0x48>)
   185a6:	681b      	ldr	r3, [r3, #0]
   185a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   185aa:	2b00      	cmp	r3, #0
   185ac:	d101      	bne.n	185b2 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   185ae:	2300      	movs	r3, #0
   185b0:	e017      	b.n	185e2 <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   185b2:	4b0d      	ldr	r3, [pc, #52]	; (185e8 <prvTraceNextFreeEventBufferSlot+0x48>)
   185b4:	681b      	ldr	r3, [r3, #0]
   185b6:	69da      	ldr	r2, [r3, #28]
   185b8:	232c      	movs	r3, #44	; 0x2c
   185ba:	33ff      	adds	r3, #255	; 0xff
   185bc:	429a      	cmp	r2, r3
   185be:	d905      	bls.n	185cc <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   185c0:	4b0a      	ldr	r3, [pc, #40]	; (185ec <prvTraceNextFreeEventBufferSlot+0x4c>)
   185c2:	0018      	movs	r0, r3
   185c4:	4b0a      	ldr	r3, [pc, #40]	; (185f0 <prvTraceNextFreeEventBufferSlot+0x50>)
   185c6:	4798      	blx	r3
		return NULL;
   185c8:	2300      	movs	r3, #0
   185ca:	e00a      	b.n	185e2 <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   185cc:	4b06      	ldr	r3, [pc, #24]	; (185e8 <prvTraceNextFreeEventBufferSlot+0x48>)
   185ce:	681a      	ldr	r2, [r3, #0]
   185d0:	4b05      	ldr	r3, [pc, #20]	; (185e8 <prvTraceNextFreeEventBufferSlot+0x48>)
   185d2:	681b      	ldr	r3, [r3, #0]
   185d4:	69db      	ldr	r3, [r3, #28]
   185d6:	009b      	lsls	r3, r3, #2
   185d8:	21e2      	movs	r1, #226	; 0xe2
   185da:	00c9      	lsls	r1, r1, #3
   185dc:	468c      	mov	ip, r1
   185de:	4463      	add	r3, ip
   185e0:	18d3      	adds	r3, r2, r3
}
   185e2:	0018      	movs	r0, r3
   185e4:	46bd      	mov	sp, r7
   185e6:	bd80      	pop	{r7, pc}
   185e8:	20000dc0 	.word	0x20000dc0
   185ec:	0003774c 	.word	0x0003774c
   185f0:	000189e9 	.word	0x000189e9

000185f4 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   185f4:	b580      	push	{r7, lr}
   185f6:	b082      	sub	sp, #8
   185f8:	af00      	add	r7, sp, #0
   185fa:	0002      	movs	r2, r0
   185fc:	1dfb      	adds	r3, r7, #7
   185fe:	701a      	strb	r2, [r3, #0]
   18600:	1dbb      	adds	r3, r7, #6
   18602:	1c0a      	adds	r2, r1, #0
   18604:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   18606:	1dbb      	adds	r3, r7, #6
   18608:	781b      	ldrb	r3, [r3, #0]
   1860a:	2b08      	cmp	r3, #8
   1860c:	d905      	bls.n	1861a <uiIndexOfObject+0x26>
   1860e:	4b2a      	ldr	r3, [pc, #168]	; (186b8 <uiIndexOfObject+0xc4>)
   18610:	0018      	movs	r0, r3
   18612:	4b2a      	ldr	r3, [pc, #168]	; (186bc <uiIndexOfObject+0xc8>)
   18614:	4798      	blx	r3
   18616:	2300      	movs	r3, #0
   18618:	e049      	b.n	186ae <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   1861a:	1dfb      	adds	r3, r7, #7
   1861c:	781b      	ldrb	r3, [r3, #0]
   1861e:	2b00      	cmp	r3, #0
   18620:	d00b      	beq.n	1863a <uiIndexOfObject+0x46>
   18622:	4b27      	ldr	r3, [pc, #156]	; (186c0 <uiIndexOfObject+0xcc>)
   18624:	681a      	ldr	r2, [r3, #0]
   18626:	1dbb      	adds	r3, r7, #6
   18628:	781b      	ldrb	r3, [r3, #0]
   1862a:	2164      	movs	r1, #100	; 0x64
   1862c:	18d3      	adds	r3, r2, r3
   1862e:	185b      	adds	r3, r3, r1
   18630:	781b      	ldrb	r3, [r3, #0]
   18632:	1dfa      	adds	r2, r7, #7
   18634:	7812      	ldrb	r2, [r2, #0]
   18636:	429a      	cmp	r2, r3
   18638:	d905      	bls.n	18646 <uiIndexOfObject+0x52>
   1863a:	4b22      	ldr	r3, [pc, #136]	; (186c4 <uiIndexOfObject+0xd0>)
   1863c:	0018      	movs	r0, r3
   1863e:	4b1f      	ldr	r3, [pc, #124]	; (186bc <uiIndexOfObject+0xc8>)
   18640:	4798      	blx	r3
   18642:	2300      	movs	r3, #0
   18644:	e033      	b.n	186ae <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   18646:	1dbb      	adds	r3, r7, #6
   18648:	781b      	ldrb	r3, [r3, #0]
   1864a:	2b08      	cmp	r3, #8
   1864c:	d82a      	bhi.n	186a4 <uiIndexOfObject+0xb0>
   1864e:	1dfb      	adds	r3, r7, #7
   18650:	781b      	ldrb	r3, [r3, #0]
   18652:	2b00      	cmp	r3, #0
   18654:	d026      	beq.n	186a4 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   18656:	4b1a      	ldr	r3, [pc, #104]	; (186c0 <uiIndexOfObject+0xcc>)
   18658:	681a      	ldr	r2, [r3, #0]
   1865a:	1dbb      	adds	r3, r7, #6
   1865c:	781b      	ldrb	r3, [r3, #0]
   1865e:	2164      	movs	r1, #100	; 0x64
   18660:	18d3      	adds	r3, r2, r3
   18662:	185b      	adds	r3, r3, r1
   18664:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   18666:	1dfa      	adds	r2, r7, #7
   18668:	7812      	ldrb	r2, [r2, #0]
   1866a:	429a      	cmp	r2, r3
   1866c:	d81a      	bhi.n	186a4 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1866e:	4b14      	ldr	r3, [pc, #80]	; (186c0 <uiIndexOfObject+0xcc>)
   18670:	681a      	ldr	r2, [r3, #0]
   18672:	1dbb      	adds	r3, r7, #6
   18674:	781b      	ldrb	r3, [r3, #0]
   18676:	3340      	adds	r3, #64	; 0x40
   18678:	005b      	lsls	r3, r3, #1
   1867a:	18d3      	adds	r3, r2, r3
   1867c:	3308      	adds	r3, #8
   1867e:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   18680:	4b0f      	ldr	r3, [pc, #60]	; (186c0 <uiIndexOfObject+0xcc>)
   18682:	6819      	ldr	r1, [r3, #0]
   18684:	1dbb      	adds	r3, r7, #6
   18686:	781b      	ldrb	r3, [r3, #0]
   18688:	207c      	movs	r0, #124	; 0x7c
   1868a:	18cb      	adds	r3, r1, r3
   1868c:	181b      	adds	r3, r3, r0
   1868e:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   18690:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   18692:	1df9      	adds	r1, r7, #7
   18694:	7809      	ldrb	r1, [r1, #0]
   18696:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   18698:	b289      	uxth	r1, r1
   1869a:	434b      	muls	r3, r1
   1869c:	b29b      	uxth	r3, r3
   1869e:	18d3      	adds	r3, r2, r3
   186a0:	b29b      	uxth	r3, r3
   186a2:	e004      	b.n	186ae <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   186a4:	4b08      	ldr	r3, [pc, #32]	; (186c8 <uiIndexOfObject+0xd4>)
   186a6:	0018      	movs	r0, r3
   186a8:	4b04      	ldr	r3, [pc, #16]	; (186bc <uiIndexOfObject+0xc8>)
   186aa:	4798      	blx	r3
	return 0;
   186ac:	2300      	movs	r3, #0
}
   186ae:	0018      	movs	r0, r3
   186b0:	46bd      	mov	sp, r7
   186b2:	b002      	add	sp, #8
   186b4:	bd80      	pop	{r7, pc}
   186b6:	46c0      	nop			; (mov r8, r8)
   186b8:	00037774 	.word	0x00037774
   186bc:	000189e9 	.word	0x000189e9
   186c0:	20000dc0 	.word	0x20000dc0
   186c4:	000377b4 	.word	0x000377b4
   186c8:	000377f4 	.word	0x000377f4

000186cc <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   186cc:	b580      	push	{r7, lr}
   186ce:	b088      	sub	sp, #32
   186d0:	af00      	add	r7, sp, #0
   186d2:	0002      	movs	r2, r0
   186d4:	1dfb      	adds	r3, r7, #7
   186d6:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   186d8:	4b5a      	ldr	r3, [pc, #360]	; (18844 <prvTraceGetObjectHandle+0x178>)
   186da:	681b      	ldr	r3, [r3, #0]
   186dc:	2b00      	cmp	r3, #0
   186de:	d105      	bne.n	186ec <prvTraceGetObjectHandle+0x20>
   186e0:	4b59      	ldr	r3, [pc, #356]	; (18848 <prvTraceGetObjectHandle+0x17c>)
   186e2:	0018      	movs	r0, r3
   186e4:	4b59      	ldr	r3, [pc, #356]	; (1884c <prvTraceGetObjectHandle+0x180>)
   186e6:	4798      	blx	r3
   186e8:	2300      	movs	r3, #0
   186ea:	e0a7      	b.n	1883c <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   186ec:	1dfb      	adds	r3, r7, #7
   186ee:	781b      	ldrb	r3, [r3, #0]
   186f0:	2b08      	cmp	r3, #8
   186f2:	d905      	bls.n	18700 <prvTraceGetObjectHandle+0x34>
   186f4:	4b56      	ldr	r3, [pc, #344]	; (18850 <prvTraceGetObjectHandle+0x184>)
   186f6:	0018      	movs	r0, r3
   186f8:	4b54      	ldr	r3, [pc, #336]	; (1884c <prvTraceGetObjectHandle+0x180>)
   186fa:	4798      	blx	r3
   186fc:	2300      	movs	r3, #0
   186fe:	e09d      	b.n	1883c <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18700:	f3ef 8310 	mrs	r3, PRIMASK
   18704:	60fb      	str	r3, [r7, #12]
  return(result);
   18706:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   18708:	61bb      	str	r3, [r7, #24]
   1870a:	2301      	movs	r3, #1
   1870c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1870e:	693b      	ldr	r3, [r7, #16]
   18710:	f383 8810 	msr	PRIMASK, r3
   18714:	4b4f      	ldr	r3, [pc, #316]	; (18854 <prvTraceGetObjectHandle+0x188>)
   18716:	681b      	ldr	r3, [r3, #0]
   18718:	1c5a      	adds	r2, r3, #1
   1871a:	4b4e      	ldr	r3, [pc, #312]	; (18854 <prvTraceGetObjectHandle+0x188>)
   1871c:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   1871e:	1dfb      	adds	r3, r7, #7
   18720:	781a      	ldrb	r2, [r3, #0]
   18722:	4b4d      	ldr	r3, [pc, #308]	; (18858 <prvTraceGetObjectHandle+0x18c>)
   18724:	0052      	lsls	r2, r2, #1
   18726:	5ad3      	ldrh	r3, [r2, r3]
   18728:	001a      	movs	r2, r3
   1872a:	4b4c      	ldr	r3, [pc, #304]	; (1885c <prvTraceGetObjectHandle+0x190>)
   1872c:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   1872e:	4b4b      	ldr	r3, [pc, #300]	; (1885c <prvTraceGetObjectHandle+0x190>)
   18730:	681b      	ldr	r3, [r3, #0]
   18732:	4a49      	ldr	r2, [pc, #292]	; (18858 <prvTraceGetObjectHandle+0x18c>)
   18734:	2148      	movs	r1, #72	; 0x48
   18736:	18d3      	adds	r3, r2, r3
   18738:	185b      	adds	r3, r3, r1
   1873a:	781b      	ldrb	r3, [r3, #0]
   1873c:	2b00      	cmp	r3, #0
   1873e:	d117      	bne.n	18770 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   18740:	4b46      	ldr	r3, [pc, #280]	; (1885c <prvTraceGetObjectHandle+0x190>)
   18742:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   18744:	4b45      	ldr	r3, [pc, #276]	; (1885c <prvTraceGetObjectHandle+0x190>)
   18746:	681b      	ldr	r3, [r3, #0]
   18748:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   1874a:	1dfb      	adds	r3, r7, #7
   1874c:	781b      	ldrb	r3, [r3, #0]
   1874e:	4842      	ldr	r0, [pc, #264]	; (18858 <prvTraceGetObjectHandle+0x18c>)
   18750:	3308      	adds	r3, #8
   18752:	005b      	lsls	r3, r3, #1
   18754:	18c3      	adds	r3, r0, r3
   18756:	3302      	adds	r3, #2
   18758:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1875a:	b2db      	uxtb	r3, r3
   1875c:	1acb      	subs	r3, r1, r3
   1875e:	b2db      	uxtb	r3, r3
   18760:	3301      	adds	r3, #1
   18762:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   18764:	4b3c      	ldr	r3, [pc, #240]	; (18858 <prvTraceGetObjectHandle+0x18c>)
   18766:	2148      	movs	r1, #72	; 0x48
   18768:	189b      	adds	r3, r3, r2
   1876a:	185b      	adds	r3, r3, r1
   1876c:	1c02      	adds	r2, r0, #0
   1876e:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   18770:	4b3a      	ldr	r3, [pc, #232]	; (1885c <prvTraceGetObjectHandle+0x190>)
   18772:	681a      	ldr	r2, [r3, #0]
   18774:	231f      	movs	r3, #31
   18776:	18fb      	adds	r3, r7, r3
   18778:	4937      	ldr	r1, [pc, #220]	; (18858 <prvTraceGetObjectHandle+0x18c>)
   1877a:	2048      	movs	r0, #72	; 0x48
   1877c:	188a      	adds	r2, r1, r2
   1877e:	1812      	adds	r2, r2, r0
   18780:	7812      	ldrb	r2, [r2, #0]
   18782:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   18784:	1dfb      	adds	r3, r7, #7
   18786:	781a      	ldrb	r2, [r3, #0]
   18788:	4b33      	ldr	r3, [pc, #204]	; (18858 <prvTraceGetObjectHandle+0x18c>)
   1878a:	0052      	lsls	r2, r2, #1
   1878c:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   1878e:	1dfb      	adds	r3, r7, #7
   18790:	781b      	ldrb	r3, [r3, #0]
   18792:	4931      	ldr	r1, [pc, #196]	; (18858 <prvTraceGetObjectHandle+0x18c>)
   18794:	3310      	adds	r3, #16
   18796:	005b      	lsls	r3, r3, #1
   18798:	18cb      	adds	r3, r1, r3
   1879a:	3304      	adds	r3, #4
   1879c:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1879e:	429a      	cmp	r2, r3
   187a0:	d90d      	bls.n	187be <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   187a2:	1dfb      	adds	r3, r7, #7
   187a4:	781b      	ldrb	r3, [r3, #0]
   187a6:	0018      	movs	r0, r3
   187a8:	4b2d      	ldr	r3, [pc, #180]	; (18860 <prvTraceGetObjectHandle+0x194>)
   187aa:	4798      	blx	r3
   187ac:	0003      	movs	r3, r0
   187ae:	0018      	movs	r0, r3
   187b0:	4b26      	ldr	r3, [pc, #152]	; (1884c <prvTraceGetObjectHandle+0x180>)
   187b2:	4798      	blx	r3
		handle = 0;
   187b4:	231f      	movs	r3, #31
   187b6:	18fb      	adds	r3, r7, r3
   187b8:	2200      	movs	r2, #0
   187ba:	701a      	strb	r2, [r3, #0]
   187bc:	e031      	b.n	18822 <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   187be:	1dfb      	adds	r3, r7, #7
   187c0:	781b      	ldrb	r3, [r3, #0]
   187c2:	4a25      	ldr	r2, [pc, #148]	; (18858 <prvTraceGetObjectHandle+0x18c>)
   187c4:	0059      	lsls	r1, r3, #1
   187c6:	5a8a      	ldrh	r2, [r1, r2]
   187c8:	3201      	adds	r2, #1
   187ca:	b291      	uxth	r1, r2
   187cc:	4a22      	ldr	r2, [pc, #136]	; (18858 <prvTraceGetObjectHandle+0x18c>)
   187ce:	005b      	lsls	r3, r3, #1
   187d0:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   187d2:	1dfb      	adds	r3, r7, #7
   187d4:	781a      	ldrb	r2, [r3, #0]
   187d6:	4b20      	ldr	r3, [pc, #128]	; (18858 <prvTraceGetObjectHandle+0x18c>)
   187d8:	0052      	lsls	r2, r2, #1
   187da:	5ad3      	ldrh	r3, [r2, r3]
   187dc:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   187de:	1dfb      	adds	r3, r7, #7
   187e0:	781b      	ldrb	r3, [r3, #0]
   187e2:	4a1d      	ldr	r2, [pc, #116]	; (18858 <prvTraceGetObjectHandle+0x18c>)
   187e4:	3308      	adds	r3, #8
   187e6:	005b      	lsls	r3, r3, #1
   187e8:	18d3      	adds	r3, r2, r3
   187ea:	3302      	adds	r3, #2
   187ec:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   187ee:	1acb      	subs	r3, r1, r3
   187f0:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   187f2:	1dfb      	adds	r3, r7, #7
   187f4:	781b      	ldrb	r3, [r3, #0]
   187f6:	4a18      	ldr	r2, [pc, #96]	; (18858 <prvTraceGetObjectHandle+0x18c>)
   187f8:	3318      	adds	r3, #24
   187fa:	005b      	lsls	r3, r3, #1
   187fc:	18d3      	adds	r3, r2, r3
   187fe:	3306      	adds	r3, #6
   18800:	881b      	ldrh	r3, [r3, #0]
   18802:	001a      	movs	r2, r3
		if (hndCount >
   18804:	697b      	ldr	r3, [r7, #20]
   18806:	429a      	cmp	r2, r3
   18808:	da0b      	bge.n	18822 <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1880a:	1dfb      	adds	r3, r7, #7
   1880c:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   1880e:	697a      	ldr	r2, [r7, #20]
   18810:	b2d2      	uxtb	r2, r2
   18812:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   18814:	4a10      	ldr	r2, [pc, #64]	; (18858 <prvTraceGetObjectHandle+0x18c>)
   18816:	3318      	adds	r3, #24
   18818:	005b      	lsls	r3, r3, #1
   1881a:	18d3      	adds	r3, r2, r3
   1881c:	3306      	adds	r3, #6
   1881e:	1c0a      	adds	r2, r1, #0
   18820:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   18822:	4b0c      	ldr	r3, [pc, #48]	; (18854 <prvTraceGetObjectHandle+0x188>)
   18824:	681b      	ldr	r3, [r3, #0]
   18826:	1e5a      	subs	r2, r3, #1
   18828:	4b0a      	ldr	r3, [pc, #40]	; (18854 <prvTraceGetObjectHandle+0x188>)
   1882a:	601a      	str	r2, [r3, #0]
   1882c:	69bb      	ldr	r3, [r7, #24]
   1882e:	60bb      	str	r3, [r7, #8]
   18830:	68bb      	ldr	r3, [r7, #8]
   18832:	f383 8810 	msr	PRIMASK, r3

	return handle;
   18836:	231f      	movs	r3, #31
   18838:	18fb      	adds	r3, r7, r3
   1883a:	781b      	ldrb	r3, [r3, #0]
}
   1883c:	0018      	movs	r0, r3
   1883e:	46bd      	mov	sp, r7
   18840:	b008      	add	sp, #32
   18842:	bd80      	pop	{r7, pc}
   18844:	20000dc0 	.word	0x20000dc0
   18848:	00036c54 	.word	0x00036c54
   1884c:	000189e9 	.word	0x000189e9
   18850:	00037834 	.word	0x00037834
   18854:	20000d18 	.word	0x20000d18
   18858:	20000d30 	.word	0x20000d30
   1885c:	20000dc4 	.word	0x20000dc4
   18860:	00017709 	.word	0x00017709

00018864 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   18864:	b590      	push	{r4, r7, lr}
   18866:	b085      	sub	sp, #20
   18868:	af00      	add	r7, sp, #0
   1886a:	0002      	movs	r2, r0
   1886c:	1dfb      	adds	r3, r7, #7
   1886e:	701a      	strb	r2, [r3, #0]
   18870:	1dbb      	adds	r3, r7, #6
   18872:	1c0a      	adds	r2, r1, #0
   18874:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   18876:	230e      	movs	r3, #14
   18878:	18fc      	adds	r4, r7, r3
   1887a:	1dfb      	adds	r3, r7, #7
   1887c:	781a      	ldrb	r2, [r3, #0]
   1887e:	1dbb      	adds	r3, r7, #6
   18880:	781b      	ldrb	r3, [r3, #0]
   18882:	0011      	movs	r1, r2
   18884:	0018      	movs	r0, r3
   18886:	4b09      	ldr	r3, [pc, #36]	; (188ac <prvMarkObjectAsUsed+0x48>)
   18888:	4798      	blx	r3
   1888a:	0003      	movs	r3, r0
   1888c:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   1888e:	4b08      	ldr	r3, [pc, #32]	; (188b0 <prvMarkObjectAsUsed+0x4c>)
   18890:	681a      	ldr	r2, [r3, #0]
   18892:	230e      	movs	r3, #14
   18894:	18fb      	adds	r3, r7, r3
   18896:	881b      	ldrh	r3, [r3, #0]
   18898:	219c      	movs	r1, #156	; 0x9c
   1889a:	18d3      	adds	r3, r2, r3
   1889c:	185b      	adds	r3, r3, r1
   1889e:	2201      	movs	r2, #1
   188a0:	701a      	strb	r2, [r3, #0]
}
   188a2:	46c0      	nop			; (mov r8, r8)
   188a4:	46bd      	mov	sp, r7
   188a6:	b005      	add	sp, #20
   188a8:	bd90      	pop	{r4, r7, pc}
   188aa:	46c0      	nop			; (mov r8, r8)
   188ac:	000185f5 	.word	0x000185f5
   188b0:	20000dc0 	.word	0x20000dc0

000188b4 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   188b4:	b580      	push	{r7, lr}
   188b6:	b086      	sub	sp, #24
   188b8:	af00      	add	r7, sp, #0
   188ba:	60f8      	str	r0, [r7, #12]
   188bc:	60b9      	str	r1, [r7, #8]
   188be:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   188c0:	2300      	movs	r3, #0
   188c2:	617b      	str	r3, [r7, #20]
   188c4:	e010      	b.n	188e8 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   188c6:	68fa      	ldr	r2, [r7, #12]
   188c8:	697b      	ldr	r3, [r7, #20]
   188ca:	18d3      	adds	r3, r2, r3
   188cc:	68b9      	ldr	r1, [r7, #8]
   188ce:	697a      	ldr	r2, [r7, #20]
   188d0:	188a      	adds	r2, r1, r2
   188d2:	7812      	ldrb	r2, [r2, #0]
   188d4:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   188d6:	68ba      	ldr	r2, [r7, #8]
   188d8:	697b      	ldr	r3, [r7, #20]
   188da:	18d3      	adds	r3, r2, r3
   188dc:	781b      	ldrb	r3, [r3, #0]
   188de:	2b00      	cmp	r3, #0
   188e0:	d007      	beq.n	188f2 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   188e2:	697b      	ldr	r3, [r7, #20]
   188e4:	3301      	adds	r3, #1
   188e6:	617b      	str	r3, [r7, #20]
   188e8:	697a      	ldr	r2, [r7, #20]
   188ea:	687b      	ldr	r3, [r7, #4]
   188ec:	429a      	cmp	r2, r3
   188ee:	d3ea      	bcc.n	188c6 <prvStrncpy+0x12>
			break;
	}
}
   188f0:	e000      	b.n	188f4 <prvStrncpy+0x40>
			break;
   188f2:	46c0      	nop			; (mov r8, r8)
}
   188f4:	46c0      	nop			; (mov r8, r8)
   188f6:	46bd      	mov	sp, r7
   188f8:	b006      	add	sp, #24
   188fa:	bd80      	pop	{r7, pc}

000188fc <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   188fc:	b580      	push	{r7, lr}
   188fe:	b082      	sub	sp, #8
   18900:	af00      	add	r7, sp, #0
   18902:	603a      	str	r2, [r7, #0]
   18904:	1dfb      	adds	r3, r7, #7
   18906:	1c02      	adds	r2, r0, #0
   18908:	701a      	strb	r2, [r3, #0]
   1890a:	1dbb      	adds	r3, r7, #6
   1890c:	1c0a      	adds	r2, r1, #0
   1890e:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   18910:	683b      	ldr	r3, [r7, #0]
   18912:	2b00      	cmp	r3, #0
   18914:	d104      	bne.n	18920 <prvTraceSetObjectName+0x24>
   18916:	4b2a      	ldr	r3, [pc, #168]	; (189c0 <prvTraceSetObjectName+0xc4>)
   18918:	0018      	movs	r0, r3
   1891a:	4b2a      	ldr	r3, [pc, #168]	; (189c4 <prvTraceSetObjectName+0xc8>)
   1891c:	4798      	blx	r3
   1891e:	e04b      	b.n	189b8 <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   18920:	1dfb      	adds	r3, r7, #7
   18922:	781b      	ldrb	r3, [r3, #0]
   18924:	2b08      	cmp	r3, #8
   18926:	d904      	bls.n	18932 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   18928:	4b27      	ldr	r3, [pc, #156]	; (189c8 <prvTraceSetObjectName+0xcc>)
   1892a:	0018      	movs	r0, r3
   1892c:	4b25      	ldr	r3, [pc, #148]	; (189c4 <prvTraceSetObjectName+0xc8>)
   1892e:	4798      	blx	r3
		return;
   18930:	e042      	b.n	189b8 <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   18932:	1dbb      	adds	r3, r7, #6
   18934:	781b      	ldrb	r3, [r3, #0]
   18936:	2b00      	cmp	r3, #0
   18938:	d104      	bne.n	18944 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   1893a:	4b24      	ldr	r3, [pc, #144]	; (189cc <prvTraceSetObjectName+0xd0>)
   1893c:	0018      	movs	r0, r3
   1893e:	4b21      	ldr	r3, [pc, #132]	; (189c4 <prvTraceSetObjectName+0xc8>)
   18940:	4798      	blx	r3
		return;
   18942:	e039      	b.n	189b8 <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   18944:	4b22      	ldr	r3, [pc, #136]	; (189d0 <prvTraceSetObjectName+0xd4>)
   18946:	681a      	ldr	r2, [r3, #0]
   18948:	1dfb      	adds	r3, r7, #7
   1894a:	781b      	ldrb	r3, [r3, #0]
   1894c:	2164      	movs	r1, #100	; 0x64
   1894e:	18d3      	adds	r3, r2, r3
   18950:	185b      	adds	r3, r3, r1
   18952:	781b      	ldrb	r3, [r3, #0]
   18954:	1dba      	adds	r2, r7, #6
   18956:	7812      	ldrb	r2, [r2, #0]
   18958:	429a      	cmp	r2, r3
   1895a:	d909      	bls.n	18970 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1895c:	1dfb      	adds	r3, r7, #7
   1895e:	781b      	ldrb	r3, [r3, #0]
   18960:	0018      	movs	r0, r3
   18962:	4b1c      	ldr	r3, [pc, #112]	; (189d4 <prvTraceSetObjectName+0xd8>)
   18964:	4798      	blx	r3
   18966:	0003      	movs	r3, r0
   18968:	0018      	movs	r0, r3
   1896a:	4b16      	ldr	r3, [pc, #88]	; (189c4 <prvTraceSetObjectName+0xc8>)
   1896c:	4798      	blx	r3
   1896e:	e023      	b.n	189b8 <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   18970:	1dfb      	adds	r3, r7, #7
   18972:	781a      	ldrb	r2, [r3, #0]
   18974:	1dbb      	adds	r3, r7, #6
   18976:	781b      	ldrb	r3, [r3, #0]
   18978:	0011      	movs	r1, r2
   1897a:	0018      	movs	r0, r3
   1897c:	4b16      	ldr	r3, [pc, #88]	; (189d8 <prvTraceSetObjectName+0xdc>)
   1897e:	4798      	blx	r3
   18980:	0003      	movs	r3, r0
   18982:	001a      	movs	r2, r3
   18984:	4b15      	ldr	r3, [pc, #84]	; (189dc <prvTraceSetObjectName+0xe0>)
   18986:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   18988:	4b15      	ldr	r3, [pc, #84]	; (189e0 <prvTraceSetObjectName+0xe4>)
   1898a:	681b      	ldr	r3, [r3, #0]
   1898c:	2b00      	cmp	r3, #0
   1898e:	d113      	bne.n	189b8 <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   18990:	4b0f      	ldr	r3, [pc, #60]	; (189d0 <prvTraceSetObjectName+0xd4>)
   18992:	681a      	ldr	r2, [r3, #0]
   18994:	4b11      	ldr	r3, [pc, #68]	; (189dc <prvTraceSetObjectName+0xe0>)
   18996:	881b      	ldrh	r3, [r3, #0]
   18998:	3398      	adds	r3, #152	; 0x98
   1899a:	18d3      	adds	r3, r2, r3
   1899c:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   1899e:	4b0c      	ldr	r3, [pc, #48]	; (189d0 <prvTraceSetObjectName+0xd4>)
   189a0:	681a      	ldr	r2, [r3, #0]
   189a2:	1dfb      	adds	r3, r7, #7
   189a4:	781b      	ldrb	r3, [r3, #0]
   189a6:	2170      	movs	r1, #112	; 0x70
   189a8:	18d3      	adds	r3, r2, r3
   189aa:	185b      	adds	r3, r3, r1
   189ac:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   189ae:	001a      	movs	r2, r3
   189b0:	683b      	ldr	r3, [r7, #0]
   189b2:	0019      	movs	r1, r3
   189b4:	4b0b      	ldr	r3, [pc, #44]	; (189e4 <prvTraceSetObjectName+0xe8>)
   189b6:	4798      	blx	r3
		}
	}
}
   189b8:	46bd      	mov	sp, r7
   189ba:	b002      	add	sp, #8
   189bc:	bd80      	pop	{r7, pc}
   189be:	46c0      	nop			; (mov r8, r8)
   189c0:	00037938 	.word	0x00037938
   189c4:	000189e9 	.word	0x000189e9
   189c8:	0003796c 	.word	0x0003796c
   189cc:	0003799c 	.word	0x0003799c
   189d0:	20000dc0 	.word	0x20000dc0
   189d4:	00017709 	.word	0x00017709
   189d8:	000185f5 	.word	0x000185f5
   189dc:	20000dc8 	.word	0x20000dc8
   189e0:	20000d20 	.word	0x20000d20
   189e4:	000188b5 	.word	0x000188b5

000189e8 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   189e8:	b580      	push	{r7, lr}
   189ea:	b082      	sub	sp, #8
   189ec:	af00      	add	r7, sp, #0
   189ee:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   189f0:	4b11      	ldr	r3, [pc, #68]	; (18a38 <prvTraceError+0x50>)
   189f2:	681b      	ldr	r3, [r3, #0]
   189f4:	2b00      	cmp	r3, #0
   189f6:	d001      	beq.n	189fc <prvTraceError+0x14>
	{
		vTraceStop();
   189f8:	4b10      	ldr	r3, [pc, #64]	; (18a3c <prvTraceError+0x54>)
   189fa:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   189fc:	4b10      	ldr	r3, [pc, #64]	; (18a40 <prvTraceError+0x58>)
   189fe:	681b      	ldr	r3, [r3, #0]
   18a00:	2b00      	cmp	r3, #0
   18a02:	d115      	bne.n	18a30 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   18a04:	4b0e      	ldr	r3, [pc, #56]	; (18a40 <prvTraceError+0x58>)
   18a06:	687a      	ldr	r2, [r7, #4]
   18a08:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   18a0a:	4b0b      	ldr	r3, [pc, #44]	; (18a38 <prvTraceError+0x50>)
   18a0c:	681b      	ldr	r3, [r3, #0]
   18a0e:	2b00      	cmp	r3, #0
   18a10:	d00e      	beq.n	18a30 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   18a12:	4b09      	ldr	r3, [pc, #36]	; (18a38 <prvTraceError+0x50>)
   18a14:	681b      	ldr	r3, [r3, #0]
   18a16:	4a0b      	ldr	r2, [pc, #44]	; (18a44 <prvTraceError+0x5c>)
   18a18:	1898      	adds	r0, r3, r2
   18a1a:	4b09      	ldr	r3, [pc, #36]	; (18a40 <prvTraceError+0x58>)
   18a1c:	681b      	ldr	r3, [r3, #0]
   18a1e:	2250      	movs	r2, #80	; 0x50
   18a20:	0019      	movs	r1, r3
   18a22:	4b09      	ldr	r3, [pc, #36]	; (18a48 <prvTraceError+0x60>)
   18a24:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   18a26:	4b04      	ldr	r3, [pc, #16]	; (18a38 <prvTraceError+0x50>)
   18a28:	681b      	ldr	r3, [r3, #0]
   18a2a:	4a08      	ldr	r2, [pc, #32]	; (18a4c <prvTraceError+0x64>)
   18a2c:	2101      	movs	r1, #1
   18a2e:	5099      	str	r1, [r3, r2]
		}
	}
}
   18a30:	46c0      	nop			; (mov r8, r8)
   18a32:	46bd      	mov	sp, r7
   18a34:	b002      	add	sp, #8
   18a36:	bd80      	pop	{r7, pc}
   18a38:	20000dc0 	.word	0x20000dc0
   18a3c:	000178ad 	.word	0x000178ad
   18a40:	20000d20 	.word	0x20000d20
   18a44:	000006bc 	.word	0x000006bc
   18a48:	000188b5 	.word	0x000188b5
   18a4c:	000006b4 	.word	0x000006b4

00018a50 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   18a50:	b580      	push	{r7, lr}
   18a52:	b086      	sub	sp, #24
   18a54:	af00      	add	r7, sp, #0
   18a56:	0002      	movs	r2, r0
   18a58:	1dfb      	adds	r3, r7, #7
   18a5a:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   18a5c:	2300      	movs	r3, #0
   18a5e:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   18a60:	2300      	movs	r3, #0
   18a62:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   18a64:	1dfb      	adds	r3, r7, #7
   18a66:	781b      	ldrb	r3, [r3, #0]
   18a68:	2b00      	cmp	r3, #0
   18a6a:	d000      	beq.n	18a6e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   18a6c:	e089      	b.n	18b82 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   18a6e:	4b49      	ldr	r3, [pc, #292]	; (18b94 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   18a70:	0018      	movs	r0, r3
   18a72:	4b49      	ldr	r3, [pc, #292]	; (18b98 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   18a74:	4798      	blx	r3
   18a76:	e08a      	b.n	18b8e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   18a78:	4b48      	ldr	r3, [pc, #288]	; (18b9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18a7a:	681b      	ldr	r3, [r3, #0]
   18a7c:	69da      	ldr	r2, [r3, #28]
   18a7e:	697b      	ldr	r3, [r7, #20]
   18a80:	18d3      	adds	r3, r2, r3
   18a82:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   18a84:	4b45      	ldr	r3, [pc, #276]	; (18b9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18a86:	6819      	ldr	r1, [r3, #0]
   18a88:	693b      	ldr	r3, [r7, #16]
   18a8a:	009a      	lsls	r2, r3, #2
   18a8c:	23e2      	movs	r3, #226	; 0xe2
   18a8e:	00db      	lsls	r3, r3, #3
   18a90:	188a      	adds	r2, r1, r2
   18a92:	18d3      	adds	r3, r2, r3
   18a94:	781b      	ldrb	r3, [r3, #0]
   18a96:	2b98      	cmp	r3, #152	; 0x98
   18a98:	d934      	bls.n	18b04 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   18a9a:	4b40      	ldr	r3, [pc, #256]	; (18b9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18a9c:	6819      	ldr	r1, [r3, #0]
   18a9e:	693b      	ldr	r3, [r7, #16]
   18aa0:	009a      	lsls	r2, r3, #2
   18aa2:	23e2      	movs	r3, #226	; 0xe2
   18aa4:	00db      	lsls	r3, r3, #3
   18aa6:	188a      	adds	r2, r1, r2
   18aa8:	18d3      	adds	r3, r2, r3
   18aaa:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   18aac:	2ba7      	cmp	r3, #167	; 0xa7
   18aae:	d829      	bhi.n	18b04 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   18ab0:	4b3a      	ldr	r3, [pc, #232]	; (18b9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18ab2:	6819      	ldr	r1, [r3, #0]
   18ab4:	693b      	ldr	r3, [r7, #16]
   18ab6:	009a      	lsls	r2, r3, #2
   18ab8:	23e2      	movs	r3, #226	; 0xe2
   18aba:	00db      	lsls	r3, r3, #3
   18abc:	188a      	adds	r2, r1, r2
   18abe:	18d3      	adds	r3, r2, r3
   18ac0:	781a      	ldrb	r2, [r3, #0]
   18ac2:	230f      	movs	r3, #15
   18ac4:	18fb      	adds	r3, r7, r3
   18ac6:	3268      	adds	r2, #104	; 0x68
   18ac8:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   18aca:	230f      	movs	r3, #15
   18acc:	18fb      	adds	r3, r7, r3
   18ace:	781a      	ldrb	r2, [r3, #0]
   18ad0:	693b      	ldr	r3, [r7, #16]
   18ad2:	18d2      	adds	r2, r2, r3
   18ad4:	4b31      	ldr	r3, [pc, #196]	; (18b9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18ad6:	681b      	ldr	r3, [r3, #0]
   18ad8:	699b      	ldr	r3, [r3, #24]
   18ada:	429a      	cmp	r2, r3
   18adc:	d24d      	bcs.n	18b7a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   18ade:	4b2f      	ldr	r3, [pc, #188]	; (18b9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18ae0:	681a      	ldr	r2, [r3, #0]
   18ae2:	693b      	ldr	r3, [r7, #16]
   18ae4:	009b      	lsls	r3, r3, #2
   18ae6:	21e2      	movs	r1, #226	; 0xe2
   18ae8:	00c9      	lsls	r1, r1, #3
   18aea:	468c      	mov	ip, r1
   18aec:	4463      	add	r3, ip
   18aee:	18d0      	adds	r0, r2, r3
   18af0:	230f      	movs	r3, #15
   18af2:	18fb      	adds	r3, r7, r3
   18af4:	781b      	ldrb	r3, [r3, #0]
   18af6:	3301      	adds	r3, #1
   18af8:	009b      	lsls	r3, r3, #2
   18afa:	001a      	movs	r2, r3
   18afc:	2100      	movs	r1, #0
   18afe:	4b28      	ldr	r3, [pc, #160]	; (18ba0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   18b00:	4798      	blx	r3
		{
   18b02:	e03a      	b.n	18b7a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   18b04:	4b25      	ldr	r3, [pc, #148]	; (18b9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18b06:	6819      	ldr	r1, [r3, #0]
   18b08:	693b      	ldr	r3, [r7, #16]
   18b0a:	009a      	lsls	r2, r3, #2
   18b0c:	23e2      	movs	r3, #226	; 0xe2
   18b0e:	00db      	lsls	r3, r3, #3
   18b10:	188a      	adds	r2, r1, r2
   18b12:	18d3      	adds	r3, r2, r3
   18b14:	781b      	ldrb	r3, [r3, #0]
   18b16:	2b01      	cmp	r3, #1
   18b18:	d130      	bne.n	18b7c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   18b1a:	693b      	ldr	r3, [r7, #16]
   18b1c:	1c5a      	adds	r2, r3, #1
   18b1e:	4b1f      	ldr	r3, [pc, #124]	; (18b9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18b20:	681b      	ldr	r3, [r3, #0]
   18b22:	699b      	ldr	r3, [r3, #24]
   18b24:	429a      	cmp	r2, r3
   18b26:	d20e      	bcs.n	18b46 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   18b28:	4b1c      	ldr	r3, [pc, #112]	; (18b9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18b2a:	681a      	ldr	r2, [r3, #0]
   18b2c:	693b      	ldr	r3, [r7, #16]
   18b2e:	009b      	lsls	r3, r3, #2
   18b30:	21e2      	movs	r1, #226	; 0xe2
   18b32:	00c9      	lsls	r1, r1, #3
   18b34:	468c      	mov	ip, r1
   18b36:	4463      	add	r3, ip
   18b38:	18d3      	adds	r3, r2, r3
   18b3a:	2208      	movs	r2, #8
   18b3c:	2100      	movs	r1, #0
   18b3e:	0018      	movs	r0, r3
   18b40:	4b17      	ldr	r3, [pc, #92]	; (18ba0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   18b42:	4798      	blx	r3
   18b44:	e01a      	b.n	18b7c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   18b46:	4b15      	ldr	r3, [pc, #84]	; (18b9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18b48:	681b      	ldr	r3, [r3, #0]
   18b4a:	22e2      	movs	r2, #226	; 0xe2
   18b4c:	00d2      	lsls	r2, r2, #3
   18b4e:	4694      	mov	ip, r2
   18b50:	4463      	add	r3, ip
   18b52:	2204      	movs	r2, #4
   18b54:	2100      	movs	r1, #0
   18b56:	0018      	movs	r0, r3
   18b58:	4b11      	ldr	r3, [pc, #68]	; (18ba0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   18b5a:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   18b5c:	4b0f      	ldr	r3, [pc, #60]	; (18b9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18b5e:	681a      	ldr	r2, [r3, #0]
   18b60:	693b      	ldr	r3, [r7, #16]
   18b62:	009b      	lsls	r3, r3, #2
   18b64:	21e2      	movs	r1, #226	; 0xe2
   18b66:	00c9      	lsls	r1, r1, #3
   18b68:	468c      	mov	ip, r1
   18b6a:	4463      	add	r3, ip
   18b6c:	18d3      	adds	r3, r2, r3
   18b6e:	2204      	movs	r2, #4
   18b70:	2100      	movs	r1, #0
   18b72:	0018      	movs	r0, r3
   18b74:	4b0a      	ldr	r3, [pc, #40]	; (18ba0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   18b76:	4798      	blx	r3
   18b78:	e000      	b.n	18b7c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   18b7a:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   18b7c:	697b      	ldr	r3, [r7, #20]
   18b7e:	3301      	adds	r3, #1
   18b80:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   18b82:	1dfb      	adds	r3, r7, #7
   18b84:	781a      	ldrb	r2, [r3, #0]
   18b86:	697b      	ldr	r3, [r7, #20]
   18b88:	429a      	cmp	r2, r3
   18b8a:	d900      	bls.n	18b8e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   18b8c:	e774      	b.n	18a78 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   18b8e:	46bd      	mov	sp, r7
   18b90:	b006      	add	sp, #24
   18b92:	bd80      	pop	{r7, pc}
   18b94:	000379fc 	.word	0x000379fc
   18b98:	000189e9 	.word	0x000189e9
   18b9c:	20000dc0 	.word	0x20000dc0
   18ba0:	0003457f 	.word	0x0003457f

00018ba4 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   18ba4:	b580      	push	{r7, lr}
   18ba6:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   18ba8:	4b12      	ldr	r3, [pc, #72]	; (18bf4 <prvTraceUpdateCounters+0x50>)
   18baa:	681b      	ldr	r3, [r3, #0]
   18bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18bae:	2b00      	cmp	r3, #0
   18bb0:	d01c      	beq.n	18bec <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   18bb2:	4b10      	ldr	r3, [pc, #64]	; (18bf4 <prvTraceUpdateCounters+0x50>)
   18bb4:	681b      	ldr	r3, [r3, #0]
   18bb6:	695a      	ldr	r2, [r3, #20]
   18bb8:	3201      	adds	r2, #1
   18bba:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   18bbc:	4b0d      	ldr	r3, [pc, #52]	; (18bf4 <prvTraceUpdateCounters+0x50>)
   18bbe:	681b      	ldr	r3, [r3, #0]
   18bc0:	69da      	ldr	r2, [r3, #28]
   18bc2:	3201      	adds	r2, #1
   18bc4:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   18bc6:	4b0b      	ldr	r3, [pc, #44]	; (18bf4 <prvTraceUpdateCounters+0x50>)
   18bc8:	681b      	ldr	r3, [r3, #0]
   18bca:	69da      	ldr	r2, [r3, #28]
   18bcc:	232c      	movs	r3, #44	; 0x2c
   18bce:	33ff      	adds	r3, #255	; 0xff
   18bd0:	429a      	cmp	r2, r3
   18bd2:	d907      	bls.n	18be4 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   18bd4:	4b07      	ldr	r3, [pc, #28]	; (18bf4 <prvTraceUpdateCounters+0x50>)
   18bd6:	681b      	ldr	r3, [r3, #0]
   18bd8:	2201      	movs	r2, #1
   18bda:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   18bdc:	4b05      	ldr	r3, [pc, #20]	; (18bf4 <prvTraceUpdateCounters+0x50>)
   18bde:	681b      	ldr	r3, [r3, #0]
   18be0:	2200      	movs	r2, #0
   18be2:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   18be4:	2001      	movs	r0, #1
   18be6:	4b04      	ldr	r3, [pc, #16]	; (18bf8 <prvTraceUpdateCounters+0x54>)
   18be8:	4798      	blx	r3
   18bea:	e000      	b.n	18bee <prvTraceUpdateCounters+0x4a>
		return;
   18bec:	46c0      	nop			; (mov r8, r8)
#endif
}
   18bee:	46bd      	mov	sp, r7
   18bf0:	bd80      	pop	{r7, pc}
   18bf2:	46c0      	nop			; (mov r8, r8)
   18bf4:	20000dc0 	.word	0x20000dc0
   18bf8:	00018a51 	.word	0x00018a51

00018bfc <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   18bfc:	b5b0      	push	{r4, r5, r7, lr}
   18bfe:	b086      	sub	sp, #24
   18c00:	af00      	add	r7, sp, #0
   18c02:	0002      	movs	r2, r0
   18c04:	1dbb      	adds	r3, r7, #6
   18c06:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   18c08:	2300      	movs	r3, #0
   18c0a:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   18c0c:	2300      	movs	r3, #0
   18c0e:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   18c10:	2300      	movs	r3, #0
   18c12:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   18c14:	1dbb      	adds	r3, r7, #6
   18c16:	881b      	ldrh	r3, [r3, #0]
   18c18:	2bff      	cmp	r3, #255	; 0xff
   18c1a:	d00a      	beq.n	18c32 <prvTraceGetDTS+0x36>
   18c1c:	1dbb      	adds	r3, r7, #6
   18c1e:	881b      	ldrh	r3, [r3, #0]
   18c20:	4a60      	ldr	r2, [pc, #384]	; (18da4 <prvTraceGetDTS+0x1a8>)
   18c22:	4293      	cmp	r3, r2
   18c24:	d005      	beq.n	18c32 <prvTraceGetDTS+0x36>
   18c26:	4b60      	ldr	r3, [pc, #384]	; (18da8 <prvTraceGetDTS+0x1ac>)
   18c28:	0018      	movs	r0, r3
   18c2a:	4b60      	ldr	r3, [pc, #384]	; (18dac <prvTraceGetDTS+0x1b0>)
   18c2c:	4798      	blx	r3
   18c2e:	2300      	movs	r3, #0
   18c30:	e0b3      	b.n	18d9a <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   18c32:	4b5f      	ldr	r3, [pc, #380]	; (18db0 <prvTraceGetDTS+0x1b4>)
   18c34:	681b      	ldr	r3, [r3, #0]
   18c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18c38:	2b00      	cmp	r3, #0
   18c3a:	d118      	bne.n	18c6e <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   18c3c:	4b5d      	ldr	r3, [pc, #372]	; (18db4 <prvTraceGetDTS+0x1b8>)
   18c3e:	681b      	ldr	r3, [r3, #0]
   18c40:	2b00      	cmp	r3, #0
   18c42:	d006      	beq.n	18c52 <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   18c44:	4b5a      	ldr	r3, [pc, #360]	; (18db0 <prvTraceGetDTS+0x1b4>)
   18c46:	681b      	ldr	r3, [r3, #0]
   18c48:	4a5a      	ldr	r2, [pc, #360]	; (18db4 <prvTraceGetDTS+0x1b8>)
   18c4a:	6812      	ldr	r2, [r2, #0]
   18c4c:	0892      	lsrs	r2, r2, #2
   18c4e:	625a      	str	r2, [r3, #36]	; 0x24
   18c50:	e00d      	b.n	18c6e <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   18c52:	4b59      	ldr	r3, [pc, #356]	; (18db8 <prvTraceGetDTS+0x1bc>)
   18c54:	681a      	ldr	r2, [r3, #0]
   18c56:	4b59      	ldr	r3, [pc, #356]	; (18dbc <prvTraceGetDTS+0x1c0>)
   18c58:	681b      	ldr	r3, [r3, #0]
   18c5a:	429a      	cmp	r2, r3
   18c5c:	d007      	beq.n	18c6e <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   18c5e:	4b54      	ldr	r3, [pc, #336]	; (18db0 <prvTraceGetDTS+0x1b4>)
   18c60:	681c      	ldr	r4, [r3, #0]
   18c62:	2000      	movs	r0, #0
   18c64:	4b56      	ldr	r3, [pc, #344]	; (18dc0 <prvTraceGetDTS+0x1c4>)
   18c66:	4798      	blx	r3
   18c68:	0003      	movs	r3, r0
   18c6a:	089b      	lsrs	r3, r3, #2
   18c6c:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   18c6e:	230c      	movs	r3, #12
   18c70:	18fb      	adds	r3, r7, r3
   18c72:	0018      	movs	r0, r3
   18c74:	4b53      	ldr	r3, [pc, #332]	; (18dc4 <prvTraceGetDTS+0x1c8>)
   18c76:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   18c78:	68fa      	ldr	r2, [r7, #12]
   18c7a:	4b53      	ldr	r3, [pc, #332]	; (18dc8 <prvTraceGetDTS+0x1cc>)
   18c7c:	681b      	ldr	r3, [r3, #0]
   18c7e:	1ad3      	subs	r3, r2, r3
   18c80:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   18c82:	68fa      	ldr	r2, [r7, #12]
   18c84:	4b50      	ldr	r3, [pc, #320]	; (18dc8 <prvTraceGetDTS+0x1cc>)
   18c86:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   18c88:	4b49      	ldr	r3, [pc, #292]	; (18db0 <prvTraceGetDTS+0x1b4>)
   18c8a:	681b      	ldr	r3, [r3, #0]
   18c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18c8e:	2b00      	cmp	r3, #0
   18c90:	d044      	beq.n	18d1c <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   18c92:	4b47      	ldr	r3, [pc, #284]	; (18db0 <prvTraceGetDTS+0x1b4>)
   18c94:	681b      	ldr	r3, [r3, #0]
   18c96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   18c98:	693b      	ldr	r3, [r7, #16]
   18c9a:	429a      	cmp	r2, r3
   18c9c:	d21e      	bcs.n	18cdc <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   18c9e:	4b44      	ldr	r3, [pc, #272]	; (18db0 <prvTraceGetDTS+0x1b4>)
   18ca0:	681c      	ldr	r4, [r3, #0]
   18ca2:	4b43      	ldr	r3, [pc, #268]	; (18db0 <prvTraceGetDTS+0x1b4>)
   18ca4:	681b      	ldr	r3, [r3, #0]
   18ca6:	6add      	ldr	r5, [r3, #44]	; 0x2c
   18ca8:	4b41      	ldr	r3, [pc, #260]	; (18db0 <prvTraceGetDTS+0x1b4>)
   18caa:	681b      	ldr	r3, [r3, #0]
   18cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   18cae:	4b47      	ldr	r3, [pc, #284]	; (18dcc <prvTraceGetDTS+0x1d0>)
   18cb0:	0011      	movs	r1, r2
   18cb2:	6938      	ldr	r0, [r7, #16]
   18cb4:	4798      	blx	r3
   18cb6:	0003      	movs	r3, r0
   18cb8:	18eb      	adds	r3, r5, r3
   18cba:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   18cbc:	4b3c      	ldr	r3, [pc, #240]	; (18db0 <prvTraceGetDTS+0x1b4>)
   18cbe:	681c      	ldr	r4, [r3, #0]
   18cc0:	4b3b      	ldr	r3, [pc, #236]	; (18db0 <prvTraceGetDTS+0x1b4>)
   18cc2:	681b      	ldr	r3, [r3, #0]
   18cc4:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   18cc6:	4b3a      	ldr	r3, [pc, #232]	; (18db0 <prvTraceGetDTS+0x1b4>)
   18cc8:	681b      	ldr	r3, [r3, #0]
   18cca:	6a59      	ldr	r1, [r3, #36]	; 0x24
   18ccc:	693a      	ldr	r2, [r7, #16]
   18cce:	4b40      	ldr	r3, [pc, #256]	; (18dd0 <prvTraceGetDTS+0x1d4>)
   18cd0:	0010      	movs	r0, r2
   18cd2:	4798      	blx	r3
   18cd4:	000b      	movs	r3, r1
   18cd6:	18eb      	adds	r3, r5, r3
   18cd8:	62a3      	str	r3, [r4, #40]	; 0x28
   18cda:	e007      	b.n	18cec <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   18cdc:	4b34      	ldr	r3, [pc, #208]	; (18db0 <prvTraceGetDTS+0x1b4>)
   18cde:	681b      	ldr	r3, [r3, #0]
   18ce0:	4a33      	ldr	r2, [pc, #204]	; (18db0 <prvTraceGetDTS+0x1b4>)
   18ce2:	6812      	ldr	r2, [r2, #0]
   18ce4:	6a91      	ldr	r1, [r2, #40]	; 0x28
   18ce6:	693a      	ldr	r2, [r7, #16]
   18ce8:	188a      	adds	r2, r1, r2
   18cea:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   18cec:	4b30      	ldr	r3, [pc, #192]	; (18db0 <prvTraceGetDTS+0x1b4>)
   18cee:	681b      	ldr	r3, [r3, #0]
   18cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18cf2:	4b2f      	ldr	r3, [pc, #188]	; (18db0 <prvTraceGetDTS+0x1b4>)
   18cf4:	681b      	ldr	r3, [r3, #0]
   18cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18cf8:	429a      	cmp	r2, r3
   18cfa:	d313      	bcc.n	18d24 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   18cfc:	4b2c      	ldr	r3, [pc, #176]	; (18db0 <prvTraceGetDTS+0x1b4>)
   18cfe:	681b      	ldr	r3, [r3, #0]
   18d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18d02:	3201      	adds	r2, #1
   18d04:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   18d06:	4b2a      	ldr	r3, [pc, #168]	; (18db0 <prvTraceGetDTS+0x1b4>)
   18d08:	681b      	ldr	r3, [r3, #0]
   18d0a:	4a29      	ldr	r2, [pc, #164]	; (18db0 <prvTraceGetDTS+0x1b4>)
   18d0c:	6812      	ldr	r2, [r2, #0]
   18d0e:	6a91      	ldr	r1, [r2, #40]	; 0x28
   18d10:	4a27      	ldr	r2, [pc, #156]	; (18db0 <prvTraceGetDTS+0x1b4>)
   18d12:	6812      	ldr	r2, [r2, #0]
   18d14:	6a52      	ldr	r2, [r2, #36]	; 0x24
   18d16:	1a8a      	subs	r2, r1, r2
   18d18:	629a      	str	r2, [r3, #40]	; 0x28
   18d1a:	e003      	b.n	18d24 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   18d1c:	4b24      	ldr	r3, [pc, #144]	; (18db0 <prvTraceGetDTS+0x1b4>)
   18d1e:	681b      	ldr	r3, [r3, #0]
   18d20:	68fa      	ldr	r2, [r7, #12]
   18d22:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   18d24:	1dbb      	adds	r3, r7, #6
   18d26:	881a      	ldrh	r2, [r3, #0]
   18d28:	693b      	ldr	r3, [r7, #16]
   18d2a:	429a      	cmp	r2, r3
   18d2c:	d22f      	bcs.n	18d8e <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   18d2e:	4b29      	ldr	r3, [pc, #164]	; (18dd4 <prvTraceGetDTS+0x1d8>)
   18d30:	4798      	blx	r3
   18d32:	0003      	movs	r3, r0
   18d34:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   18d36:	697b      	ldr	r3, [r7, #20]
   18d38:	2b00      	cmp	r3, #0
   18d3a:	d028      	beq.n	18d8e <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   18d3c:	1dbb      	adds	r3, r7, #6
   18d3e:	881b      	ldrh	r3, [r3, #0]
   18d40:	4a18      	ldr	r2, [pc, #96]	; (18da4 <prvTraceGetDTS+0x1a8>)
   18d42:	4293      	cmp	r3, r2
   18d44:	d10b      	bne.n	18d5e <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   18d46:	697b      	ldr	r3, [r7, #20]
   18d48:	22a9      	movs	r2, #169	; 0xa9
   18d4a:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   18d4c:	693b      	ldr	r3, [r7, #16]
   18d4e:	0c1b      	lsrs	r3, r3, #16
   18d50:	b29a      	uxth	r2, r3
   18d52:	697b      	ldr	r3, [r7, #20]
   18d54:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   18d56:	697b      	ldr	r3, [r7, #20]
   18d58:	2200      	movs	r2, #0
   18d5a:	705a      	strb	r2, [r3, #1]
   18d5c:	e015      	b.n	18d8a <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   18d5e:	1dbb      	adds	r3, r7, #6
   18d60:	881b      	ldrh	r3, [r3, #0]
   18d62:	2bff      	cmp	r3, #255	; 0xff
   18d64:	d10d      	bne.n	18d82 <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   18d66:	697b      	ldr	r3, [r7, #20]
   18d68:	22a8      	movs	r2, #168	; 0xa8
   18d6a:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   18d6c:	693b      	ldr	r3, [r7, #16]
   18d6e:	0a1b      	lsrs	r3, r3, #8
   18d70:	b29a      	uxth	r2, r3
   18d72:	697b      	ldr	r3, [r7, #20]
   18d74:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   18d76:	693b      	ldr	r3, [r7, #16]
   18d78:	0e1b      	lsrs	r3, r3, #24
   18d7a:	b2da      	uxtb	r2, r3
   18d7c:	697b      	ldr	r3, [r7, #20]
   18d7e:	705a      	strb	r2, [r3, #1]
   18d80:	e003      	b.n	18d8a <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   18d82:	4b15      	ldr	r3, [pc, #84]	; (18dd8 <prvTraceGetDTS+0x1dc>)
   18d84:	0018      	movs	r0, r3
   18d86:	4b09      	ldr	r3, [pc, #36]	; (18dac <prvTraceGetDTS+0x1b0>)
   18d88:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   18d8a:	4b14      	ldr	r3, [pc, #80]	; (18ddc <prvTraceGetDTS+0x1e0>)
   18d8c:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   18d8e:	693b      	ldr	r3, [r7, #16]
   18d90:	b29b      	uxth	r3, r3
   18d92:	1dba      	adds	r2, r7, #6
   18d94:	8812      	ldrh	r2, [r2, #0]
   18d96:	4013      	ands	r3, r2
   18d98:	b29b      	uxth	r3, r3
}
   18d9a:	0018      	movs	r0, r3
   18d9c:	46bd      	mov	sp, r7
   18d9e:	b006      	add	sp, #24
   18da0:	bdb0      	pop	{r4, r5, r7, pc}
   18da2:	46c0      	nop			; (mov r8, r8)
   18da4:	0000ffff 	.word	0x0000ffff
   18da8:	00037a54 	.word	0x00037a54
   18dac:	000189e9 	.word	0x000189e9
   18db0:	20000dc0 	.word	0x20000dc0
   18db4:	20000d1c 	.word	0x20000d1c
   18db8:	e000e018 	.word	0xe000e018
   18dbc:	20005590 	.word	0x20005590
   18dc0:	00028e05 	.word	0x00028e05
   18dc4:	00018de1 	.word	0x00018de1
   18dc8:	20000dcc 	.word	0x20000dcc
   18dcc:	00031ac5 	.word	0x00031ac5
   18dd0:	00031bd1 	.word	0x00031bd1
   18dd4:	000185a1 	.word	0x000185a1
   18dd8:	00037a94 	.word	0x00037a94
   18ddc:	00018ba5 	.word	0x00018ba5

00018de0 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   18de0:	b580      	push	{r7, lr}
   18de2:	b084      	sub	sp, #16
   18de4:	af00      	add	r7, sp, #0
   18de6:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   18de8:	2300      	movs	r3, #0
   18dea:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   18dec:	2300      	movs	r3, #0
   18dee:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   18df0:	4b2d      	ldr	r3, [pc, #180]	; (18ea8 <prvTracePortGetTimeStamp+0xc8>)
   18df2:	681b      	ldr	r3, [r3, #0]
   18df4:	2b01      	cmp	r3, #1
   18df6:	d107      	bne.n	18e08 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   18df8:	687b      	ldr	r3, [r7, #4]
   18dfa:	2b00      	cmp	r3, #0
   18dfc:	d04f      	beq.n	18e9e <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   18dfe:	4b2b      	ldr	r3, [pc, #172]	; (18eac <prvTracePortGetTimeStamp+0xcc>)
   18e00:	681a      	ldr	r2, [r3, #0]
   18e02:	687b      	ldr	r3, [r7, #4]
   18e04:	601a      	str	r2, [r3, #0]
		return;
   18e06:	e04a      	b.n	18e9e <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   18e08:	4b29      	ldr	r3, [pc, #164]	; (18eb0 <prvTracePortGetTimeStamp+0xd0>)
   18e0a:	681a      	ldr	r2, [r3, #0]
   18e0c:	4b29      	ldr	r3, [pc, #164]	; (18eb4 <prvTracePortGetTimeStamp+0xd4>)
   18e0e:	681b      	ldr	r3, [r3, #0]
   18e10:	1ad3      	subs	r3, r2, r3
   18e12:	3301      	adds	r3, #1
   18e14:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   18e16:	4b28      	ldr	r3, [pc, #160]	; (18eb8 <prvTracePortGetTimeStamp+0xd8>)
   18e18:	681a      	ldr	r2, [r3, #0]
   18e1a:	4b28      	ldr	r3, [pc, #160]	; (18ebc <prvTracePortGetTimeStamp+0xdc>)
   18e1c:	681b      	ldr	r3, [r3, #0]
   18e1e:	1ad3      	subs	r3, r2, r3
   18e20:	3b01      	subs	r3, #1
   18e22:	2b00      	cmp	r3, #0
   18e24:	db03      	blt.n	18e2e <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   18e26:	4b24      	ldr	r3, [pc, #144]	; (18eb8 <prvTracePortGetTimeStamp+0xd8>)
   18e28:	681b      	ldr	r3, [r3, #0]
   18e2a:	60fb      	str	r3, [r7, #12]
   18e2c:	e002      	b.n	18e34 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   18e2e:	4b23      	ldr	r3, [pc, #140]	; (18ebc <prvTracePortGetTimeStamp+0xdc>)
   18e30:	681b      	ldr	r3, [r3, #0]
   18e32:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   18e34:	4b20      	ldr	r3, [pc, #128]	; (18eb8 <prvTracePortGetTimeStamp+0xd8>)
   18e36:	681b      	ldr	r3, [r3, #0]
   18e38:	68fa      	ldr	r2, [r7, #12]
   18e3a:	429a      	cmp	r2, r3
   18e3c:	d107      	bne.n	18e4e <prvTracePortGetTimeStamp+0x6e>
   18e3e:	4b20      	ldr	r3, [pc, #128]	; (18ec0 <prvTracePortGetTimeStamp+0xe0>)
   18e40:	681b      	ldr	r3, [r3, #0]
   18e42:	68ba      	ldr	r2, [r7, #8]
   18e44:	429a      	cmp	r2, r3
   18e46:	d202      	bcs.n	18e4e <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   18e48:	68fb      	ldr	r3, [r7, #12]
   18e4a:	3301      	adds	r3, #1
   18e4c:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   18e4e:	687b      	ldr	r3, [r7, #4]
   18e50:	2b00      	cmp	r3, #0
   18e52:	d016      	beq.n	18e82 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   18e54:	4b16      	ldr	r3, [pc, #88]	; (18eb0 <prvTracePortGetTimeStamp+0xd0>)
   18e56:	681b      	ldr	r3, [r3, #0]
   18e58:	3301      	adds	r3, #1
   18e5a:	089b      	lsrs	r3, r3, #2
   18e5c:	68fa      	ldr	r2, [r7, #12]
   18e5e:	435a      	muls	r2, r3
   18e60:	4b12      	ldr	r3, [pc, #72]	; (18eac <prvTracePortGetTimeStamp+0xcc>)
   18e62:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   18e64:	4b12      	ldr	r3, [pc, #72]	; (18eb0 <prvTracePortGetTimeStamp+0xd0>)
   18e66:	681b      	ldr	r3, [r3, #0]
   18e68:	3301      	adds	r3, #1
   18e6a:	2203      	movs	r2, #3
   18e6c:	4013      	ands	r3, r2
   18e6e:	68fa      	ldr	r2, [r7, #12]
   18e70:	435a      	muls	r2, r3
   18e72:	68bb      	ldr	r3, [r7, #8]
   18e74:	18d3      	adds	r3, r2, r3
   18e76:	089a      	lsrs	r2, r3, #2
   18e78:	4b0c      	ldr	r3, [pc, #48]	; (18eac <prvTracePortGetTimeStamp+0xcc>)
   18e7a:	681b      	ldr	r3, [r3, #0]
   18e7c:	18d2      	adds	r2, r2, r3
   18e7e:	4b0b      	ldr	r3, [pc, #44]	; (18eac <prvTracePortGetTimeStamp+0xcc>)
   18e80:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   18e82:	4b0d      	ldr	r3, [pc, #52]	; (18eb8 <prvTracePortGetTimeStamp+0xd8>)
   18e84:	68fa      	ldr	r2, [r7, #12]
   18e86:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   18e88:	687b      	ldr	r3, [r7, #4]
   18e8a:	2b00      	cmp	r3, #0
   18e8c:	d003      	beq.n	18e96 <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   18e8e:	4b07      	ldr	r3, [pc, #28]	; (18eac <prvTracePortGetTimeStamp+0xcc>)
   18e90:	681a      	ldr	r2, [r3, #0]
   18e92:	687b      	ldr	r3, [r7, #4]
   18e94:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   18e96:	4b0a      	ldr	r3, [pc, #40]	; (18ec0 <prvTracePortGetTimeStamp+0xe0>)
   18e98:	68ba      	ldr	r2, [r7, #8]
   18e9a:	601a      	str	r2, [r3, #0]
   18e9c:	e000      	b.n	18ea0 <prvTracePortGetTimeStamp+0xc0>
		return;
   18e9e:	46c0      	nop			; (mov r8, r8)
}
   18ea0:	46bd      	mov	sp, r7
   18ea2:	b004      	add	sp, #16
   18ea4:	bd80      	pop	{r7, pc}
   18ea6:	46c0      	nop			; (mov r8, r8)
   18ea8:	20000d0c 	.word	0x20000d0c
   18eac:	20000d10 	.word	0x20000d10
   18eb0:	e000e014 	.word	0xe000e014
   18eb4:	e000e018 	.word	0xe000e018
   18eb8:	20000dd0 	.word	0x20000dd0
   18ebc:	20000d08 	.word	0x20000d08
   18ec0:	20000dd4 	.word	0x20000dd4

00018ec4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   18ec4:	b580      	push	{r7, lr}
   18ec6:	b082      	sub	sp, #8
   18ec8:	af00      	add	r7, sp, #0
   18eca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   18ecc:	687b      	ldr	r3, [r7, #4]
   18ece:	3308      	adds	r3, #8
   18ed0:	001a      	movs	r2, r3
   18ed2:	687b      	ldr	r3, [r7, #4]
   18ed4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   18ed6:	687b      	ldr	r3, [r7, #4]
   18ed8:	2201      	movs	r2, #1
   18eda:	4252      	negs	r2, r2
   18edc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   18ede:	687b      	ldr	r3, [r7, #4]
   18ee0:	3308      	adds	r3, #8
   18ee2:	001a      	movs	r2, r3
   18ee4:	687b      	ldr	r3, [r7, #4]
   18ee6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   18ee8:	687b      	ldr	r3, [r7, #4]
   18eea:	3308      	adds	r3, #8
   18eec:	001a      	movs	r2, r3
   18eee:	687b      	ldr	r3, [r7, #4]
   18ef0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   18ef2:	687b      	ldr	r3, [r7, #4]
   18ef4:	2200      	movs	r2, #0
   18ef6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   18ef8:	46c0      	nop			; (mov r8, r8)
   18efa:	46bd      	mov	sp, r7
   18efc:	b002      	add	sp, #8
   18efe:	bd80      	pop	{r7, pc}

00018f00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   18f00:	b580      	push	{r7, lr}
   18f02:	b082      	sub	sp, #8
   18f04:	af00      	add	r7, sp, #0
   18f06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   18f08:	687b      	ldr	r3, [r7, #4]
   18f0a:	2200      	movs	r2, #0
   18f0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   18f0e:	46c0      	nop			; (mov r8, r8)
   18f10:	46bd      	mov	sp, r7
   18f12:	b002      	add	sp, #8
   18f14:	bd80      	pop	{r7, pc}

00018f16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   18f16:	b580      	push	{r7, lr}
   18f18:	b084      	sub	sp, #16
   18f1a:	af00      	add	r7, sp, #0
   18f1c:	6078      	str	r0, [r7, #4]
   18f1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   18f20:	687b      	ldr	r3, [r7, #4]
   18f22:	685b      	ldr	r3, [r3, #4]
   18f24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   18f26:	683b      	ldr	r3, [r7, #0]
   18f28:	68fa      	ldr	r2, [r7, #12]
   18f2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   18f2c:	68fb      	ldr	r3, [r7, #12]
   18f2e:	689a      	ldr	r2, [r3, #8]
   18f30:	683b      	ldr	r3, [r7, #0]
   18f32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   18f34:	68fb      	ldr	r3, [r7, #12]
   18f36:	689b      	ldr	r3, [r3, #8]
   18f38:	683a      	ldr	r2, [r7, #0]
   18f3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   18f3c:	68fb      	ldr	r3, [r7, #12]
   18f3e:	683a      	ldr	r2, [r7, #0]
   18f40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   18f42:	683b      	ldr	r3, [r7, #0]
   18f44:	687a      	ldr	r2, [r7, #4]
   18f46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   18f48:	687b      	ldr	r3, [r7, #4]
   18f4a:	681b      	ldr	r3, [r3, #0]
   18f4c:	1c5a      	adds	r2, r3, #1
   18f4e:	687b      	ldr	r3, [r7, #4]
   18f50:	601a      	str	r2, [r3, #0]
}
   18f52:	46c0      	nop			; (mov r8, r8)
   18f54:	46bd      	mov	sp, r7
   18f56:	b004      	add	sp, #16
   18f58:	bd80      	pop	{r7, pc}

00018f5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   18f5a:	b580      	push	{r7, lr}
   18f5c:	b084      	sub	sp, #16
   18f5e:	af00      	add	r7, sp, #0
   18f60:	6078      	str	r0, [r7, #4]
   18f62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   18f64:	683b      	ldr	r3, [r7, #0]
   18f66:	681b      	ldr	r3, [r3, #0]
   18f68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   18f6a:	68bb      	ldr	r3, [r7, #8]
   18f6c:	3301      	adds	r3, #1
   18f6e:	d103      	bne.n	18f78 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   18f70:	687b      	ldr	r3, [r7, #4]
   18f72:	691b      	ldr	r3, [r3, #16]
   18f74:	60fb      	str	r3, [r7, #12]
   18f76:	e00c      	b.n	18f92 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   18f78:	687b      	ldr	r3, [r7, #4]
   18f7a:	3308      	adds	r3, #8
   18f7c:	60fb      	str	r3, [r7, #12]
   18f7e:	e002      	b.n	18f86 <vListInsert+0x2c>
   18f80:	68fb      	ldr	r3, [r7, #12]
   18f82:	685b      	ldr	r3, [r3, #4]
   18f84:	60fb      	str	r3, [r7, #12]
   18f86:	68fb      	ldr	r3, [r7, #12]
   18f88:	685b      	ldr	r3, [r3, #4]
   18f8a:	681a      	ldr	r2, [r3, #0]
   18f8c:	68bb      	ldr	r3, [r7, #8]
   18f8e:	429a      	cmp	r2, r3
   18f90:	d9f6      	bls.n	18f80 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   18f92:	68fb      	ldr	r3, [r7, #12]
   18f94:	685a      	ldr	r2, [r3, #4]
   18f96:	683b      	ldr	r3, [r7, #0]
   18f98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   18f9a:	683b      	ldr	r3, [r7, #0]
   18f9c:	685b      	ldr	r3, [r3, #4]
   18f9e:	683a      	ldr	r2, [r7, #0]
   18fa0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   18fa2:	683b      	ldr	r3, [r7, #0]
   18fa4:	68fa      	ldr	r2, [r7, #12]
   18fa6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   18fa8:	68fb      	ldr	r3, [r7, #12]
   18faa:	683a      	ldr	r2, [r7, #0]
   18fac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   18fae:	683b      	ldr	r3, [r7, #0]
   18fb0:	687a      	ldr	r2, [r7, #4]
   18fb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   18fb4:	687b      	ldr	r3, [r7, #4]
   18fb6:	681b      	ldr	r3, [r3, #0]
   18fb8:	1c5a      	adds	r2, r3, #1
   18fba:	687b      	ldr	r3, [r7, #4]
   18fbc:	601a      	str	r2, [r3, #0]
}
   18fbe:	46c0      	nop			; (mov r8, r8)
   18fc0:	46bd      	mov	sp, r7
   18fc2:	b004      	add	sp, #16
   18fc4:	bd80      	pop	{r7, pc}

00018fc6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   18fc6:	b580      	push	{r7, lr}
   18fc8:	b084      	sub	sp, #16
   18fca:	af00      	add	r7, sp, #0
   18fcc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   18fce:	687b      	ldr	r3, [r7, #4]
   18fd0:	691b      	ldr	r3, [r3, #16]
   18fd2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   18fd4:	687b      	ldr	r3, [r7, #4]
   18fd6:	685b      	ldr	r3, [r3, #4]
   18fd8:	687a      	ldr	r2, [r7, #4]
   18fda:	6892      	ldr	r2, [r2, #8]
   18fdc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   18fde:	687b      	ldr	r3, [r7, #4]
   18fe0:	689b      	ldr	r3, [r3, #8]
   18fe2:	687a      	ldr	r2, [r7, #4]
   18fe4:	6852      	ldr	r2, [r2, #4]
   18fe6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   18fe8:	68fb      	ldr	r3, [r7, #12]
   18fea:	685a      	ldr	r2, [r3, #4]
   18fec:	687b      	ldr	r3, [r7, #4]
   18fee:	429a      	cmp	r2, r3
   18ff0:	d103      	bne.n	18ffa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   18ff2:	687b      	ldr	r3, [r7, #4]
   18ff4:	689a      	ldr	r2, [r3, #8]
   18ff6:	68fb      	ldr	r3, [r7, #12]
   18ff8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   18ffa:	687b      	ldr	r3, [r7, #4]
   18ffc:	2200      	movs	r2, #0
   18ffe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   19000:	68fb      	ldr	r3, [r7, #12]
   19002:	681b      	ldr	r3, [r3, #0]
   19004:	1e5a      	subs	r2, r3, #1
   19006:	68fb      	ldr	r3, [r7, #12]
   19008:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1900a:	68fb      	ldr	r3, [r7, #12]
   1900c:	681b      	ldr	r3, [r3, #0]
}
   1900e:	0018      	movs	r0, r3
   19010:	46bd      	mov	sp, r7
   19012:	b004      	add	sp, #16
   19014:	bd80      	pop	{r7, pc}
	...

00019018 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   19018:	b580      	push	{r7, lr}
   1901a:	b084      	sub	sp, #16
   1901c:	af00      	add	r7, sp, #0
   1901e:	60f8      	str	r0, [r7, #12]
   19020:	60b9      	str	r1, [r7, #8]
   19022:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   19024:	68fb      	ldr	r3, [r7, #12]
   19026:	3b04      	subs	r3, #4
   19028:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1902a:	68fb      	ldr	r3, [r7, #12]
   1902c:	2280      	movs	r2, #128	; 0x80
   1902e:	0452      	lsls	r2, r2, #17
   19030:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   19032:	68fb      	ldr	r3, [r7, #12]
   19034:	3b04      	subs	r3, #4
   19036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   19038:	68ba      	ldr	r2, [r7, #8]
   1903a:	68fb      	ldr	r3, [r7, #12]
   1903c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1903e:	68fb      	ldr	r3, [r7, #12]
   19040:	3b04      	subs	r3, #4
   19042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   19044:	4a08      	ldr	r2, [pc, #32]	; (19068 <pxPortInitialiseStack+0x50>)
   19046:	68fb      	ldr	r3, [r7, #12]
   19048:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1904a:	68fb      	ldr	r3, [r7, #12]
   1904c:	3b14      	subs	r3, #20
   1904e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   19050:	687a      	ldr	r2, [r7, #4]
   19052:	68fb      	ldr	r3, [r7, #12]
   19054:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   19056:	68fb      	ldr	r3, [r7, #12]
   19058:	3b20      	subs	r3, #32
   1905a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1905c:	68fb      	ldr	r3, [r7, #12]
}
   1905e:	0018      	movs	r0, r3
   19060:	46bd      	mov	sp, r7
   19062:	b004      	add	sp, #16
   19064:	bd80      	pop	{r7, pc}
   19066:	46c0      	nop			; (mov r8, r8)
   19068:	0001906d 	.word	0x0001906d

0001906c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1906c:	b580      	push	{r7, lr}
   1906e:	b082      	sub	sp, #8
   19070:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   19072:	2300      	movs	r3, #0
   19074:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   19076:	4b07      	ldr	r3, [pc, #28]	; (19094 <prvTaskExitError+0x28>)
   19078:	681b      	ldr	r3, [r3, #0]
   1907a:	3301      	adds	r3, #1
   1907c:	d001      	beq.n	19082 <prvTaskExitError+0x16>
   1907e:	b672      	cpsid	i
   19080:	e7fe      	b.n	19080 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   19082:	b672      	cpsid	i
	while( ulDummy == 0 )
   19084:	46c0      	nop			; (mov r8, r8)
   19086:	687b      	ldr	r3, [r7, #4]
   19088:	2b00      	cmp	r3, #0
   1908a:	d0fc      	beq.n	19086 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1908c:	46c0      	nop			; (mov r8, r8)
   1908e:	46bd      	mov	sp, r7
   19090:	b002      	add	sp, #8
   19092:	bd80      	pop	{r7, pc}
   19094:	20000104 	.word	0x20000104

00019098 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   19098:	b580      	push	{r7, lr}
   1909a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1909c:	46c0      	nop			; (mov r8, r8)
   1909e:	46bd      	mov	sp, r7
   190a0:	bd80      	pop	{r7, pc}
	...

000190b0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   190b0:	4a0b      	ldr	r2, [pc, #44]	; (190e0 <pxCurrentTCBConst2>)
   190b2:	6813      	ldr	r3, [r2, #0]
   190b4:	6818      	ldr	r0, [r3, #0]
   190b6:	3020      	adds	r0, #32
   190b8:	f380 8809 	msr	PSP, r0
   190bc:	2002      	movs	r0, #2
   190be:	f380 8814 	msr	CONTROL, r0
   190c2:	f3bf 8f6f 	isb	sy
   190c6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   190c8:	46ae      	mov	lr, r5
   190ca:	bc08      	pop	{r3}
   190cc:	bc04      	pop	{r2}
   190ce:	b662      	cpsie	i
   190d0:	4718      	bx	r3
   190d2:	46c0      	nop			; (mov r8, r8)
   190d4:	46c0      	nop			; (mov r8, r8)
   190d6:	46c0      	nop			; (mov r8, r8)
   190d8:	46c0      	nop			; (mov r8, r8)
   190da:	46c0      	nop			; (mov r8, r8)
   190dc:	46c0      	nop			; (mov r8, r8)
   190de:	46c0      	nop			; (mov r8, r8)

000190e0 <pxCurrentTCBConst2>:
   190e0:	200040a8 	.word	0x200040a8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   190e4:	46c0      	nop			; (mov r8, r8)
   190e6:	46c0      	nop			; (mov r8, r8)

000190e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   190e8:	b580      	push	{r7, lr}
   190ea:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   190ec:	4b0e      	ldr	r3, [pc, #56]	; (19128 <xPortStartScheduler+0x40>)
   190ee:	4a0e      	ldr	r2, [pc, #56]	; (19128 <xPortStartScheduler+0x40>)
   190f0:	6812      	ldr	r2, [r2, #0]
   190f2:	21ff      	movs	r1, #255	; 0xff
   190f4:	0409      	lsls	r1, r1, #16
   190f6:	430a      	orrs	r2, r1
   190f8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   190fa:	4b0b      	ldr	r3, [pc, #44]	; (19128 <xPortStartScheduler+0x40>)
   190fc:	4a0a      	ldr	r2, [pc, #40]	; (19128 <xPortStartScheduler+0x40>)
   190fe:	6812      	ldr	r2, [r2, #0]
   19100:	21ff      	movs	r1, #255	; 0xff
   19102:	0609      	lsls	r1, r1, #24
   19104:	430a      	orrs	r2, r1
   19106:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   19108:	4b08      	ldr	r3, [pc, #32]	; (1912c <xPortStartScheduler+0x44>)
   1910a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1910c:	4b08      	ldr	r3, [pc, #32]	; (19130 <xPortStartScheduler+0x48>)
   1910e:	2200      	movs	r2, #0
   19110:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   19112:	4b08      	ldr	r3, [pc, #32]	; (19134 <xPortStartScheduler+0x4c>)
   19114:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   19116:	4b08      	ldr	r3, [pc, #32]	; (19138 <xPortStartScheduler+0x50>)
   19118:	4798      	blx	r3
	prvTaskExitError();
   1911a:	4b08      	ldr	r3, [pc, #32]	; (1913c <xPortStartScheduler+0x54>)
   1911c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1911e:	2300      	movs	r3, #0
}
   19120:	0018      	movs	r0, r3
   19122:	46bd      	mov	sp, r7
   19124:	bd80      	pop	{r7, pc}
   19126:	46c0      	nop			; (mov r8, r8)
   19128:	e000ed20 	.word	0xe000ed20
   1912c:	00019249 	.word	0x00019249
   19130:	20000104 	.word	0x20000104
   19134:	000190b1 	.word	0x000190b1
   19138:	0001b7a5 	.word	0x0001b7a5
   1913c:	0001906d 	.word	0x0001906d

00019140 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   19140:	b580      	push	{r7, lr}
   19142:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   19144:	4b03      	ldr	r3, [pc, #12]	; (19154 <vPortYield+0x14>)
   19146:	2280      	movs	r2, #128	; 0x80
   19148:	0552      	lsls	r2, r2, #21
   1914a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   1914c:	46c0      	nop			; (mov r8, r8)
   1914e:	46bd      	mov	sp, r7
   19150:	bd80      	pop	{r7, pc}
   19152:	46c0      	nop			; (mov r8, r8)
   19154:	e000ed04 	.word	0xe000ed04

00019158 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   19158:	b580      	push	{r7, lr}
   1915a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1915c:	b672      	cpsid	i
    uxCriticalNesting++;
   1915e:	4b06      	ldr	r3, [pc, #24]	; (19178 <vPortEnterCritical+0x20>)
   19160:	681b      	ldr	r3, [r3, #0]
   19162:	1c5a      	adds	r2, r3, #1
   19164:	4b04      	ldr	r3, [pc, #16]	; (19178 <vPortEnterCritical+0x20>)
   19166:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   19168:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1916c:	f3bf 8f6f 	isb	sy
}
   19170:	46c0      	nop			; (mov r8, r8)
   19172:	46bd      	mov	sp, r7
   19174:	bd80      	pop	{r7, pc}
   19176:	46c0      	nop			; (mov r8, r8)
   19178:	20000104 	.word	0x20000104

0001917c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1917c:	b580      	push	{r7, lr}
   1917e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   19180:	4b09      	ldr	r3, [pc, #36]	; (191a8 <vPortExitCritical+0x2c>)
   19182:	681b      	ldr	r3, [r3, #0]
   19184:	2b00      	cmp	r3, #0
   19186:	d101      	bne.n	1918c <vPortExitCritical+0x10>
   19188:	b672      	cpsid	i
   1918a:	e7fe      	b.n	1918a <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1918c:	4b06      	ldr	r3, [pc, #24]	; (191a8 <vPortExitCritical+0x2c>)
   1918e:	681b      	ldr	r3, [r3, #0]
   19190:	1e5a      	subs	r2, r3, #1
   19192:	4b05      	ldr	r3, [pc, #20]	; (191a8 <vPortExitCritical+0x2c>)
   19194:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   19196:	4b04      	ldr	r3, [pc, #16]	; (191a8 <vPortExitCritical+0x2c>)
   19198:	681b      	ldr	r3, [r3, #0]
   1919a:	2b00      	cmp	r3, #0
   1919c:	d100      	bne.n	191a0 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1919e:	b662      	cpsie	i
    }
}
   191a0:	46c0      	nop			; (mov r8, r8)
   191a2:	46bd      	mov	sp, r7
   191a4:	bd80      	pop	{r7, pc}
   191a6:	46c0      	nop			; (mov r8, r8)
   191a8:	20000104 	.word	0x20000104

000191ac <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   191ac:	f3ef 8010 	mrs	r0, PRIMASK
   191b0:	b672      	cpsid	i
   191b2:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   191b4:	46c0      	nop			; (mov r8, r8)
   191b6:	0018      	movs	r0, r3

000191b8 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   191b8:	f380 8810 	msr	PRIMASK, r0
   191bc:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   191be:	46c0      	nop			; (mov r8, r8)

000191c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   191c0:	f3ef 8009 	mrs	r0, PSP
   191c4:	4b0e      	ldr	r3, [pc, #56]	; (19200 <pxCurrentTCBConst>)
   191c6:	681a      	ldr	r2, [r3, #0]
   191c8:	3820      	subs	r0, #32
   191ca:	6010      	str	r0, [r2, #0]
   191cc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   191ce:	4644      	mov	r4, r8
   191d0:	464d      	mov	r5, r9
   191d2:	4656      	mov	r6, sl
   191d4:	465f      	mov	r7, fp
   191d6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   191d8:	b508      	push	{r3, lr}
   191da:	b672      	cpsid	i
   191dc:	f002 fae2 	bl	1b7a4 <vTaskSwitchContext>
   191e0:	b662      	cpsie	i
   191e2:	bc0c      	pop	{r2, r3}
   191e4:	6811      	ldr	r1, [r2, #0]
   191e6:	6808      	ldr	r0, [r1, #0]
   191e8:	3010      	adds	r0, #16
   191ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   191ec:	46a0      	mov	r8, r4
   191ee:	46a9      	mov	r9, r5
   191f0:	46b2      	mov	sl, r6
   191f2:	46bb      	mov	fp, r7
   191f4:	f380 8809 	msr	PSP, r0
   191f8:	3820      	subs	r0, #32
   191fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   191fc:	4718      	bx	r3
   191fe:	46c0      	nop			; (mov r8, r8)

00019200 <pxCurrentTCBConst>:
   19200:	200040a8 	.word	0x200040a8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   19204:	46c0      	nop			; (mov r8, r8)
   19206:	46c0      	nop			; (mov r8, r8)

00019208 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   19208:	b580      	push	{r7, lr}
   1920a:	b082      	sub	sp, #8
   1920c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1920e:	4b0a      	ldr	r3, [pc, #40]	; (19238 <SysTick_Handler+0x30>)
   19210:	4798      	blx	r3
   19212:	0003      	movs	r3, r0
   19214:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   19216:	4b09      	ldr	r3, [pc, #36]	; (1923c <SysTick_Handler+0x34>)
   19218:	4798      	blx	r3
   1921a:	1e03      	subs	r3, r0, #0
   1921c:	d003      	beq.n	19226 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1921e:	4b08      	ldr	r3, [pc, #32]	; (19240 <SysTick_Handler+0x38>)
   19220:	2280      	movs	r2, #128	; 0x80
   19222:	0552      	lsls	r2, r2, #21
   19224:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   19226:	687b      	ldr	r3, [r7, #4]
   19228:	0018      	movs	r0, r3
   1922a:	4b06      	ldr	r3, [pc, #24]	; (19244 <SysTick_Handler+0x3c>)
   1922c:	4798      	blx	r3
}
   1922e:	46c0      	nop			; (mov r8, r8)
   19230:	46bd      	mov	sp, r7
   19232:	b002      	add	sp, #8
   19234:	bd80      	pop	{r7, pc}
   19236:	46c0      	nop			; (mov r8, r8)
   19238:	000191ad 	.word	0x000191ad
   1923c:	0001b5b5 	.word	0x0001b5b5
   19240:	e000ed04 	.word	0xe000ed04
   19244:	000191b9 	.word	0x000191b9

00019248 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   19248:	b5b0      	push	{r4, r5, r7, lr}
   1924a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1924c:	4b0b      	ldr	r3, [pc, #44]	; (1927c <prvSetupTimerInterrupt+0x34>)
   1924e:	2200      	movs	r2, #0
   19250:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   19252:	4b0b      	ldr	r3, [pc, #44]	; (19280 <prvSetupTimerInterrupt+0x38>)
   19254:	2200      	movs	r2, #0
   19256:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   19258:	4c0a      	ldr	r4, [pc, #40]	; (19284 <prvSetupTimerInterrupt+0x3c>)
   1925a:	2000      	movs	r0, #0
   1925c:	4b0a      	ldr	r3, [pc, #40]	; (19288 <prvSetupTimerInterrupt+0x40>)
   1925e:	4798      	blx	r3
   19260:	4b0a      	ldr	r3, [pc, #40]	; (1928c <prvSetupTimerInterrupt+0x44>)
   19262:	22fa      	movs	r2, #250	; 0xfa
   19264:	0091      	lsls	r1, r2, #2
   19266:	4798      	blx	r3
   19268:	0003      	movs	r3, r0
   1926a:	3b01      	subs	r3, #1
   1926c:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1926e:	4b03      	ldr	r3, [pc, #12]	; (1927c <prvSetupTimerInterrupt+0x34>)
   19270:	2207      	movs	r2, #7
   19272:	601a      	str	r2, [r3, #0]
}
   19274:	46c0      	nop			; (mov r8, r8)
   19276:	46bd      	mov	sp, r7
   19278:	bdb0      	pop	{r4, r5, r7, pc}
   1927a:	46c0      	nop			; (mov r8, r8)
   1927c:	e000e010 	.word	0xe000e010
   19280:	e000e018 	.word	0xe000e018
   19284:	e000e014 	.word	0xe000e014
   19288:	00028e05 	.word	0x00028e05
   1928c:	00031ac5 	.word	0x00031ac5

00019290 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   19290:	b580      	push	{r7, lr}
   19292:	b084      	sub	sp, #16
   19294:	af00      	add	r7, sp, #0
   19296:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   19298:	2300      	movs	r3, #0
   1929a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   1929c:	687b      	ldr	r3, [r7, #4]
   1929e:	2207      	movs	r2, #7
   192a0:	4013      	ands	r3, r2
   192a2:	d004      	beq.n	192ae <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   192a4:	687b      	ldr	r3, [r7, #4]
   192a6:	2207      	movs	r2, #7
   192a8:	4393      	bics	r3, r2
   192aa:	3308      	adds	r3, #8
   192ac:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   192ae:	4b21      	ldr	r3, [pc, #132]	; (19334 <pvPortMalloc+0xa4>)
   192b0:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   192b2:	4b21      	ldr	r3, [pc, #132]	; (19338 <pvPortMalloc+0xa8>)
   192b4:	681b      	ldr	r3, [r3, #0]
   192b6:	2b00      	cmp	r3, #0
   192b8:	d105      	bne.n	192c6 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   192ba:	4b20      	ldr	r3, [pc, #128]	; (1933c <pvPortMalloc+0xac>)
   192bc:	2207      	movs	r2, #7
   192be:	4393      	bics	r3, r2
   192c0:	001a      	movs	r2, r3
   192c2:	4b1d      	ldr	r3, [pc, #116]	; (19338 <pvPortMalloc+0xa8>)
   192c4:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   192c6:	4b1e      	ldr	r3, [pc, #120]	; (19340 <pvPortMalloc+0xb0>)
   192c8:	681a      	ldr	r2, [r3, #0]
   192ca:	687b      	ldr	r3, [r7, #4]
   192cc:	18d3      	adds	r3, r2, r3
   192ce:	4a1d      	ldr	r2, [pc, #116]	; (19344 <pvPortMalloc+0xb4>)
   192d0:	4293      	cmp	r3, r2
   192d2:	d813      	bhi.n	192fc <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   192d4:	4b1a      	ldr	r3, [pc, #104]	; (19340 <pvPortMalloc+0xb0>)
   192d6:	681a      	ldr	r2, [r3, #0]
   192d8:	687b      	ldr	r3, [r7, #4]
   192da:	18d2      	adds	r2, r2, r3
   192dc:	4b18      	ldr	r3, [pc, #96]	; (19340 <pvPortMalloc+0xb0>)
   192de:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   192e0:	429a      	cmp	r2, r3
   192e2:	d90b      	bls.n	192fc <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   192e4:	4b14      	ldr	r3, [pc, #80]	; (19338 <pvPortMalloc+0xa8>)
   192e6:	681a      	ldr	r2, [r3, #0]
   192e8:	4b15      	ldr	r3, [pc, #84]	; (19340 <pvPortMalloc+0xb0>)
   192ea:	681b      	ldr	r3, [r3, #0]
   192ec:	18d3      	adds	r3, r2, r3
   192ee:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   192f0:	4b13      	ldr	r3, [pc, #76]	; (19340 <pvPortMalloc+0xb0>)
   192f2:	681a      	ldr	r2, [r3, #0]
   192f4:	687b      	ldr	r3, [r7, #4]
   192f6:	18d2      	adds	r2, r2, r3
   192f8:	4b11      	ldr	r3, [pc, #68]	; (19340 <pvPortMalloc+0xb0>)
   192fa:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   192fc:	68fb      	ldr	r3, [r7, #12]
   192fe:	2b00      	cmp	r3, #0
   19300:	d006      	beq.n	19310 <pvPortMalloc+0x80>
   19302:	68fb      	ldr	r3, [r7, #12]
   19304:	687a      	ldr	r2, [r7, #4]
   19306:	0019      	movs	r1, r3
   19308:	2094      	movs	r0, #148	; 0x94
   1930a:	4b0f      	ldr	r3, [pc, #60]	; (19348 <pvPortMalloc+0xb8>)
   1930c:	4798      	blx	r3
   1930e:	e005      	b.n	1931c <pvPortMalloc+0x8c>
   19310:	68fb      	ldr	r3, [r7, #12]
   19312:	687a      	ldr	r2, [r7, #4]
   19314:	0019      	movs	r1, r3
   19316:	20e8      	movs	r0, #232	; 0xe8
   19318:	4b0b      	ldr	r3, [pc, #44]	; (19348 <pvPortMalloc+0xb8>)
   1931a:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   1931c:	4b0b      	ldr	r3, [pc, #44]	; (1934c <pvPortMalloc+0xbc>)
   1931e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   19320:	68fb      	ldr	r3, [r7, #12]
   19322:	2b00      	cmp	r3, #0
   19324:	d101      	bne.n	1932a <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   19326:	4b0a      	ldr	r3, [pc, #40]	; (19350 <pvPortMalloc+0xc0>)
   19328:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   1932a:	68fb      	ldr	r3, [r7, #12]
}
   1932c:	0018      	movs	r0, r3
   1932e:	46bd      	mov	sp, r7
   19330:	b004      	add	sp, #16
   19332:	bd80      	pop	{r7, pc}
   19334:	0001b411 	.word	0x0001b411
   19338:	200040a4 	.word	0x200040a4
   1933c:	20000de0 	.word	0x20000de0
   19340:	200040a0 	.word	0x200040a0
   19344:	000032bf 	.word	0x000032bf
   19348:	000179f5 	.word	0x000179f5
   1934c:	0001b429 	.word	0x0001b429
   19350:	00031a95 	.word	0x00031a95

00019354 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   19354:	b580      	push	{r7, lr}
   19356:	b082      	sub	sp, #8
   19358:	af00      	add	r7, sp, #0
   1935a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   1935c:	687b      	ldr	r3, [r7, #4]
   1935e:	2b00      	cmp	r3, #0
   19360:	d001      	beq.n	19366 <vPortFree+0x12>
   19362:	b672      	cpsid	i
   19364:	e7fe      	b.n	19364 <vPortFree+0x10>
}
   19366:	46c0      	nop			; (mov r8, r8)
   19368:	46bd      	mov	sp, r7
   1936a:	b002      	add	sp, #8
   1936c:	bd80      	pop	{r7, pc}
	...

00019370 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   19370:	b580      	push	{r7, lr}
   19372:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   19374:	4b03      	ldr	r3, [pc, #12]	; (19384 <xPortGetFreeHeapSize+0x14>)
   19376:	681b      	ldr	r3, [r3, #0]
   19378:	22cb      	movs	r2, #203	; 0xcb
   1937a:	0192      	lsls	r2, r2, #6
   1937c:	1ad3      	subs	r3, r2, r3
}
   1937e:	0018      	movs	r0, r3
   19380:	46bd      	mov	sp, r7
   19382:	bd80      	pop	{r7, pc}
   19384:	200040a0 	.word	0x200040a0

00019388 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   19388:	b580      	push	{r7, lr}
   1938a:	b084      	sub	sp, #16
   1938c:	af00      	add	r7, sp, #0
   1938e:	6078      	str	r0, [r7, #4]
   19390:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   19392:	687b      	ldr	r3, [r7, #4]
   19394:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   19396:	68fb      	ldr	r3, [r7, #12]
   19398:	2b00      	cmp	r3, #0
   1939a:	d101      	bne.n	193a0 <xQueueGenericReset+0x18>
   1939c:	b672      	cpsid	i
   1939e:	e7fe      	b.n	1939e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   193a0:	4b23      	ldr	r3, [pc, #140]	; (19430 <xQueueGenericReset+0xa8>)
   193a2:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   193a4:	68fb      	ldr	r3, [r7, #12]
   193a6:	681a      	ldr	r2, [r3, #0]
   193a8:	68fb      	ldr	r3, [r7, #12]
   193aa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   193ac:	68fb      	ldr	r3, [r7, #12]
   193ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   193b0:	434b      	muls	r3, r1
   193b2:	18d2      	adds	r2, r2, r3
   193b4:	68fb      	ldr	r3, [r7, #12]
   193b6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   193b8:	68fb      	ldr	r3, [r7, #12]
   193ba:	2200      	movs	r2, #0
   193bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   193be:	68fb      	ldr	r3, [r7, #12]
   193c0:	681a      	ldr	r2, [r3, #0]
   193c2:	68fb      	ldr	r3, [r7, #12]
   193c4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   193c6:	68fb      	ldr	r3, [r7, #12]
   193c8:	681a      	ldr	r2, [r3, #0]
   193ca:	68fb      	ldr	r3, [r7, #12]
   193cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   193ce:	1e59      	subs	r1, r3, #1
   193d0:	68fb      	ldr	r3, [r7, #12]
   193d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   193d4:	434b      	muls	r3, r1
   193d6:	18d2      	adds	r2, r2, r3
   193d8:	68fb      	ldr	r3, [r7, #12]
   193da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   193dc:	68fb      	ldr	r3, [r7, #12]
   193de:	2244      	movs	r2, #68	; 0x44
   193e0:	21ff      	movs	r1, #255	; 0xff
   193e2:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   193e4:	68fb      	ldr	r3, [r7, #12]
   193e6:	2245      	movs	r2, #69	; 0x45
   193e8:	21ff      	movs	r1, #255	; 0xff
   193ea:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   193ec:	683b      	ldr	r3, [r7, #0]
   193ee:	2b00      	cmp	r3, #0
   193f0:	d10d      	bne.n	1940e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   193f2:	68fb      	ldr	r3, [r7, #12]
   193f4:	691b      	ldr	r3, [r3, #16]
   193f6:	2b00      	cmp	r3, #0
   193f8:	d013      	beq.n	19422 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   193fa:	68fb      	ldr	r3, [r7, #12]
   193fc:	3310      	adds	r3, #16
   193fe:	0018      	movs	r0, r3
   19400:	4b0c      	ldr	r3, [pc, #48]	; (19434 <xQueueGenericReset+0xac>)
   19402:	4798      	blx	r3
   19404:	1e03      	subs	r3, r0, #0
   19406:	d00c      	beq.n	19422 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   19408:	4b0b      	ldr	r3, [pc, #44]	; (19438 <xQueueGenericReset+0xb0>)
   1940a:	4798      	blx	r3
   1940c:	e009      	b.n	19422 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1940e:	68fb      	ldr	r3, [r7, #12]
   19410:	3310      	adds	r3, #16
   19412:	0018      	movs	r0, r3
   19414:	4b09      	ldr	r3, [pc, #36]	; (1943c <xQueueGenericReset+0xb4>)
   19416:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   19418:	68fb      	ldr	r3, [r7, #12]
   1941a:	3324      	adds	r3, #36	; 0x24
   1941c:	0018      	movs	r0, r3
   1941e:	4b07      	ldr	r3, [pc, #28]	; (1943c <xQueueGenericReset+0xb4>)
   19420:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   19422:	4b07      	ldr	r3, [pc, #28]	; (19440 <xQueueGenericReset+0xb8>)
   19424:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   19426:	2301      	movs	r3, #1
}
   19428:	0018      	movs	r0, r3
   1942a:	46bd      	mov	sp, r7
   1942c:	b004      	add	sp, #16
   1942e:	bd80      	pop	{r7, pc}
   19430:	00019159 	.word	0x00019159
   19434:	0001b9e9 	.word	0x0001b9e9
   19438:	00019141 	.word	0x00019141
   1943c:	00018ec5 	.word	0x00018ec5
   19440:	0001917d 	.word	0x0001917d

00019444 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   19444:	b590      	push	{r4, r7, lr}
   19446:	b08b      	sub	sp, #44	; 0x2c
   19448:	af02      	add	r7, sp, #8
   1944a:	60f8      	str	r0, [r7, #12]
   1944c:	60b9      	str	r1, [r7, #8]
   1944e:	1dfb      	adds	r3, r7, #7
   19450:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   19452:	68fb      	ldr	r3, [r7, #12]
   19454:	2b00      	cmp	r3, #0
   19456:	d101      	bne.n	1945c <xQueueGenericCreate+0x18>
   19458:	b672      	cpsid	i
   1945a:	e7fe      	b.n	1945a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1945c:	68bb      	ldr	r3, [r7, #8]
   1945e:	2b00      	cmp	r3, #0
   19460:	d102      	bne.n	19468 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   19462:	2300      	movs	r3, #0
   19464:	61fb      	str	r3, [r7, #28]
   19466:	e003      	b.n	19470 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   19468:	68fb      	ldr	r3, [r7, #12]
   1946a:	68ba      	ldr	r2, [r7, #8]
   1946c:	4353      	muls	r3, r2
   1946e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   19470:	69fb      	ldr	r3, [r7, #28]
   19472:	3354      	adds	r3, #84	; 0x54
   19474:	0018      	movs	r0, r3
   19476:	4b19      	ldr	r3, [pc, #100]	; (194dc <xQueueGenericCreate+0x98>)
   19478:	4798      	blx	r3
   1947a:	0003      	movs	r3, r0
   1947c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1947e:	69bb      	ldr	r3, [r7, #24]
   19480:	2b00      	cmp	r3, #0
   19482:	d00d      	beq.n	194a0 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   19484:	69bb      	ldr	r3, [r7, #24]
   19486:	3354      	adds	r3, #84	; 0x54
   19488:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1948a:	1dfb      	adds	r3, r7, #7
   1948c:	781c      	ldrb	r4, [r3, #0]
   1948e:	697a      	ldr	r2, [r7, #20]
   19490:	68b9      	ldr	r1, [r7, #8]
   19492:	68f8      	ldr	r0, [r7, #12]
   19494:	69bb      	ldr	r3, [r7, #24]
   19496:	9300      	str	r3, [sp, #0]
   19498:	0023      	movs	r3, r4
   1949a:	4c11      	ldr	r4, [pc, #68]	; (194e0 <xQueueGenericCreate+0x9c>)
   1949c:	47a0      	blx	r4
   1949e:	e017      	b.n	194d0 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   194a0:	4b10      	ldr	r3, [pc, #64]	; (194e4 <xQueueGenericCreate+0xa0>)
   194a2:	4798      	blx	r3
   194a4:	0003      	movs	r3, r0
   194a6:	0018      	movs	r0, r3
   194a8:	4b0f      	ldr	r3, [pc, #60]	; (194e8 <xQueueGenericCreate+0xa4>)
   194aa:	4798      	blx	r3
   194ac:	0003      	movs	r3, r0
   194ae:	001a      	movs	r2, r3
   194b0:	4b0e      	ldr	r3, [pc, #56]	; (194ec <xQueueGenericCreate+0xa8>)
   194b2:	881b      	ldrh	r3, [r3, #0]
   194b4:	4013      	ands	r3, r2
   194b6:	b29b      	uxth	r3, r3
   194b8:	2b00      	cmp	r3, #0
   194ba:	d009      	beq.n	194d0 <xQueueGenericCreate+0x8c>
   194bc:	1dfb      	adds	r3, r7, #7
   194be:	781b      	ldrb	r3, [r3, #0]
   194c0:	4a0b      	ldr	r2, [pc, #44]	; (194f0 <xQueueGenericCreate+0xac>)
   194c2:	5cd3      	ldrb	r3, [r2, r3]
   194c4:	3340      	adds	r3, #64	; 0x40
   194c6:	b2db      	uxtb	r3, r3
   194c8:	2100      	movs	r1, #0
   194ca:	0018      	movs	r0, r3
   194cc:	4b09      	ldr	r3, [pc, #36]	; (194f4 <xQueueGenericCreate+0xb0>)
   194ce:	4798      	blx	r3
		}

		return pxNewQueue;
   194d0:	69bb      	ldr	r3, [r7, #24]
	}
   194d2:	0018      	movs	r0, r3
   194d4:	46bd      	mov	sp, r7
   194d6:	b009      	add	sp, #36	; 0x24
   194d8:	bd90      	pop	{r4, r7, pc}
   194da:	46c0      	nop			; (mov r8, r8)
   194dc:	00019291 	.word	0x00019291
   194e0:	000194f9 	.word	0x000194f9
   194e4:	000173e9 	.word	0x000173e9
   194e8:	0001714d 	.word	0x0001714d
   194ec:	20000100 	.word	0x20000100
   194f0:	200000f4 	.word	0x200000f4
   194f4:	00017e4d 	.word	0x00017e4d

000194f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   194f8:	b5b0      	push	{r4, r5, r7, lr}
   194fa:	b084      	sub	sp, #16
   194fc:	af00      	add	r7, sp, #0
   194fe:	60f8      	str	r0, [r7, #12]
   19500:	60b9      	str	r1, [r7, #8]
   19502:	607a      	str	r2, [r7, #4]
   19504:	001a      	movs	r2, r3
   19506:	1cfb      	adds	r3, r7, #3
   19508:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1950a:	68bb      	ldr	r3, [r7, #8]
   1950c:	2b00      	cmp	r3, #0
   1950e:	d103      	bne.n	19518 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   19510:	6a3b      	ldr	r3, [r7, #32]
   19512:	6a3a      	ldr	r2, [r7, #32]
   19514:	601a      	str	r2, [r3, #0]
   19516:	e002      	b.n	1951e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   19518:	6a3b      	ldr	r3, [r7, #32]
   1951a:	687a      	ldr	r2, [r7, #4]
   1951c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1951e:	6a3b      	ldr	r3, [r7, #32]
   19520:	68fa      	ldr	r2, [r7, #12]
   19522:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   19524:	6a3b      	ldr	r3, [r7, #32]
   19526:	68ba      	ldr	r2, [r7, #8]
   19528:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1952a:	6a3b      	ldr	r3, [r7, #32]
   1952c:	2101      	movs	r1, #1
   1952e:	0018      	movs	r0, r3
   19530:	4b41      	ldr	r3, [pc, #260]	; (19638 <prvInitialiseNewQueue+0x140>)
   19532:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   19534:	6a3b      	ldr	r3, [r7, #32]
   19536:	1cfa      	adds	r2, r7, #3
   19538:	2150      	movs	r1, #80	; 0x50
   1953a:	7812      	ldrb	r2, [r2, #0]
   1953c:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1953e:	6a3b      	ldr	r3, [r7, #32]
   19540:	2200      	movs	r2, #0
   19542:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   19544:	6a3b      	ldr	r3, [r7, #32]
   19546:	0018      	movs	r0, r3
   19548:	4b3c      	ldr	r3, [pc, #240]	; (1963c <prvInitialiseNewQueue+0x144>)
   1954a:	4798      	blx	r3
   1954c:	0003      	movs	r3, r0
   1954e:	001a      	movs	r2, r3
   19550:	4b3b      	ldr	r3, [pc, #236]	; (19640 <prvInitialiseNewQueue+0x148>)
   19552:	5c9b      	ldrb	r3, [r3, r2]
   19554:	0018      	movs	r0, r3
   19556:	4b3b      	ldr	r3, [pc, #236]	; (19644 <prvInitialiseNewQueue+0x14c>)
   19558:	4798      	blx	r3
   1955a:	0003      	movs	r3, r0
   1955c:	b29a      	uxth	r2, r3
   1955e:	6a3b      	ldr	r3, [r7, #32]
   19560:	0011      	movs	r1, r2
   19562:	0018      	movs	r0, r3
   19564:	4b38      	ldr	r3, [pc, #224]	; (19648 <prvInitialiseNewQueue+0x150>)
   19566:	4798      	blx	r3
   19568:	4b38      	ldr	r3, [pc, #224]	; (1964c <prvInitialiseNewQueue+0x154>)
   1956a:	881a      	ldrh	r2, [r3, #0]
   1956c:	6a3b      	ldr	r3, [r7, #32]
   1956e:	0011      	movs	r1, r2
   19570:	0018      	movs	r0, r3
   19572:	4b37      	ldr	r3, [pc, #220]	; (19650 <prvInitialiseNewQueue+0x158>)
   19574:	4798      	blx	r3
   19576:	6a3b      	ldr	r3, [r7, #32]
   19578:	0018      	movs	r0, r3
   1957a:	4b30      	ldr	r3, [pc, #192]	; (1963c <prvInitialiseNewQueue+0x144>)
   1957c:	4798      	blx	r3
   1957e:	0003      	movs	r3, r0
   19580:	001a      	movs	r2, r3
   19582:	4b2f      	ldr	r3, [pc, #188]	; (19640 <prvInitialiseNewQueue+0x148>)
   19584:	5c9c      	ldrb	r4, [r3, r2]
   19586:	6a3b      	ldr	r3, [r7, #32]
   19588:	0018      	movs	r0, r3
   1958a:	4b32      	ldr	r3, [pc, #200]	; (19654 <prvInitialiseNewQueue+0x15c>)
   1958c:	4798      	blx	r3
   1958e:	0003      	movs	r3, r0
   19590:	b2db      	uxtb	r3, r3
   19592:	0019      	movs	r1, r3
   19594:	0020      	movs	r0, r4
   19596:	4b30      	ldr	r3, [pc, #192]	; (19658 <prvInitialiseNewQueue+0x160>)
   19598:	4798      	blx	r3
   1959a:	4b30      	ldr	r3, [pc, #192]	; (1965c <prvInitialiseNewQueue+0x164>)
   1959c:	4798      	blx	r3
   1959e:	0003      	movs	r3, r0
   195a0:	0018      	movs	r0, r3
   195a2:	4b2f      	ldr	r3, [pc, #188]	; (19660 <prvInitialiseNewQueue+0x168>)
   195a4:	4798      	blx	r3
   195a6:	0003      	movs	r3, r0
   195a8:	001a      	movs	r2, r3
   195aa:	4b2e      	ldr	r3, [pc, #184]	; (19664 <prvInitialiseNewQueue+0x16c>)
   195ac:	881b      	ldrh	r3, [r3, #0]
   195ae:	4013      	ands	r3, r2
   195b0:	b29b      	uxth	r3, r3
   195b2:	2b00      	cmp	r3, #0
   195b4:	d029      	beq.n	1960a <prvInitialiseNewQueue+0x112>
   195b6:	6a3b      	ldr	r3, [r7, #32]
   195b8:	0018      	movs	r0, r3
   195ba:	4b2b      	ldr	r3, [pc, #172]	; (19668 <prvInitialiseNewQueue+0x170>)
   195bc:	4798      	blx	r3
   195be:	0003      	movs	r3, r0
   195c0:	001a      	movs	r2, r3
   195c2:	4b28      	ldr	r3, [pc, #160]	; (19664 <prvInitialiseNewQueue+0x16c>)
   195c4:	881b      	ldrh	r3, [r3, #0]
   195c6:	4013      	ands	r3, r2
   195c8:	b29b      	uxth	r3, r3
   195ca:	2b00      	cmp	r3, #0
   195cc:	d01d      	beq.n	1960a <prvInitialiseNewQueue+0x112>
   195ce:	6a3b      	ldr	r3, [r7, #32]
   195d0:	0018      	movs	r0, r3
   195d2:	4b1a      	ldr	r3, [pc, #104]	; (1963c <prvInitialiseNewQueue+0x144>)
   195d4:	4798      	blx	r3
   195d6:	0003      	movs	r3, r0
   195d8:	001a      	movs	r2, r3
   195da:	4b19      	ldr	r3, [pc, #100]	; (19640 <prvInitialiseNewQueue+0x148>)
   195dc:	5c9b      	ldrb	r3, [r3, r2]
   195de:	3318      	adds	r3, #24
   195e0:	b2db      	uxtb	r3, r3
   195e2:	001d      	movs	r5, r3
   195e4:	6a3b      	ldr	r3, [r7, #32]
   195e6:	0018      	movs	r0, r3
   195e8:	4b14      	ldr	r3, [pc, #80]	; (1963c <prvInitialiseNewQueue+0x144>)
   195ea:	4798      	blx	r3
   195ec:	0003      	movs	r3, r0
   195ee:	001a      	movs	r2, r3
   195f0:	4b13      	ldr	r3, [pc, #76]	; (19640 <prvInitialiseNewQueue+0x148>)
   195f2:	5c9c      	ldrb	r4, [r3, r2]
   195f4:	6a3b      	ldr	r3, [r7, #32]
   195f6:	0018      	movs	r0, r3
   195f8:	4b16      	ldr	r3, [pc, #88]	; (19654 <prvInitialiseNewQueue+0x15c>)
   195fa:	4798      	blx	r3
   195fc:	0003      	movs	r3, r0
   195fe:	b2db      	uxtb	r3, r3
   19600:	001a      	movs	r2, r3
   19602:	0021      	movs	r1, r4
   19604:	0028      	movs	r0, r5
   19606:	4b19      	ldr	r3, [pc, #100]	; (1966c <prvInitialiseNewQueue+0x174>)
   19608:	4798      	blx	r3
   1960a:	6a3b      	ldr	r3, [r7, #32]
   1960c:	0018      	movs	r0, r3
   1960e:	4b0b      	ldr	r3, [pc, #44]	; (1963c <prvInitialiseNewQueue+0x144>)
   19610:	4798      	blx	r3
   19612:	0003      	movs	r3, r0
   19614:	001a      	movs	r2, r3
   19616:	4b0a      	ldr	r3, [pc, #40]	; (19640 <prvInitialiseNewQueue+0x148>)
   19618:	5c9c      	ldrb	r4, [r3, r2]
   1961a:	6a3b      	ldr	r3, [r7, #32]
   1961c:	0018      	movs	r0, r3
   1961e:	4b0d      	ldr	r3, [pc, #52]	; (19654 <prvInitialiseNewQueue+0x15c>)
   19620:	4798      	blx	r3
   19622:	0003      	movs	r3, r0
   19624:	b2db      	uxtb	r3, r3
   19626:	2200      	movs	r2, #0
   19628:	0019      	movs	r1, r3
   1962a:	0020      	movs	r0, r4
   1962c:	4b10      	ldr	r3, [pc, #64]	; (19670 <prvInitialiseNewQueue+0x178>)
   1962e:	4798      	blx	r3
}
   19630:	46c0      	nop			; (mov r8, r8)
   19632:	46bd      	mov	sp, r7
   19634:	b004      	add	sp, #16
   19636:	bdb0      	pop	{r4, r5, r7, pc}
   19638:	00019389 	.word	0x00019389
   1963c:	0001710d 	.word	0x0001710d
   19640:	200000f4 	.word	0x200000f4
   19644:	000186cd 	.word	0x000186cd
   19648:	00017231 	.word	0x00017231
   1964c:	20000102 	.word	0x20000102
   19650:	0001726d 	.word	0x0001726d
   19654:	000171ed 	.word	0x000171ed
   19658:	00018865 	.word	0x00018865
   1965c:	000173e9 	.word	0x000173e9
   19660:	0001714d 	.word	0x0001714d
   19664:	20000100 	.word	0x20000100
   19668:	0001720d 	.word	0x0001720d
   1966c:	00017b45 	.word	0x00017b45
   19670:	000181a1 	.word	0x000181a1

00019674 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   19674:	b590      	push	{r4, r7, lr}
   19676:	b083      	sub	sp, #12
   19678:	af00      	add	r7, sp, #0
   1967a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   1967c:	687b      	ldr	r3, [r7, #4]
   1967e:	2b00      	cmp	r3, #0
   19680:	d00e      	beq.n	196a0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   19682:	687b      	ldr	r3, [r7, #4]
   19684:	2200      	movs	r2, #0
   19686:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   19688:	687b      	ldr	r3, [r7, #4]
   1968a:	2200      	movs	r2, #0
   1968c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1968e:	687b      	ldr	r3, [r7, #4]
   19690:	2200      	movs	r2, #0
   19692:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   19694:	6878      	ldr	r0, [r7, #4]
   19696:	2300      	movs	r3, #0
   19698:	2200      	movs	r2, #0
   1969a:	2100      	movs	r1, #0
   1969c:	4c02      	ldr	r4, [pc, #8]	; (196a8 <prvInitialiseMutex+0x34>)
   1969e:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   196a0:	46c0      	nop			; (mov r8, r8)
   196a2:	46bd      	mov	sp, r7
   196a4:	b003      	add	sp, #12
   196a6:	bd90      	pop	{r4, r7, pc}
   196a8:	000196ed 	.word	0x000196ed

000196ac <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   196ac:	b580      	push	{r7, lr}
   196ae:	b086      	sub	sp, #24
   196b0:	af00      	add	r7, sp, #0
   196b2:	0002      	movs	r2, r0
   196b4:	1dfb      	adds	r3, r7, #7
   196b6:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   196b8:	2301      	movs	r3, #1
   196ba:	617b      	str	r3, [r7, #20]
   196bc:	2300      	movs	r3, #0
   196be:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   196c0:	1dfb      	adds	r3, r7, #7
   196c2:	781a      	ldrb	r2, [r3, #0]
   196c4:	6939      	ldr	r1, [r7, #16]
   196c6:	697b      	ldr	r3, [r7, #20]
   196c8:	0018      	movs	r0, r3
   196ca:	4b06      	ldr	r3, [pc, #24]	; (196e4 <xQueueCreateMutex+0x38>)
   196cc:	4798      	blx	r3
   196ce:	0003      	movs	r3, r0
   196d0:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   196d2:	68fb      	ldr	r3, [r7, #12]
   196d4:	0018      	movs	r0, r3
   196d6:	4b04      	ldr	r3, [pc, #16]	; (196e8 <xQueueCreateMutex+0x3c>)
   196d8:	4798      	blx	r3

		return pxNewQueue;
   196da:	68fb      	ldr	r3, [r7, #12]
	}
   196dc:	0018      	movs	r0, r3
   196de:	46bd      	mov	sp, r7
   196e0:	b006      	add	sp, #24
   196e2:	bd80      	pop	{r7, pc}
   196e4:	00019445 	.word	0x00019445
   196e8:	00019675 	.word	0x00019675

000196ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   196ec:	b5b0      	push	{r4, r5, r7, lr}
   196ee:	b08a      	sub	sp, #40	; 0x28
   196f0:	af00      	add	r7, sp, #0
   196f2:	60f8      	str	r0, [r7, #12]
   196f4:	60b9      	str	r1, [r7, #8]
   196f6:	607a      	str	r2, [r7, #4]
   196f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   196fa:	2300      	movs	r3, #0
   196fc:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   196fe:	68fb      	ldr	r3, [r7, #12]
   19700:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   19702:	6a3b      	ldr	r3, [r7, #32]
   19704:	2b00      	cmp	r3, #0
   19706:	d101      	bne.n	1970c <xQueueGenericSend+0x20>
   19708:	b672      	cpsid	i
   1970a:	e7fe      	b.n	1970a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1970c:	68bb      	ldr	r3, [r7, #8]
   1970e:	2b00      	cmp	r3, #0
   19710:	d103      	bne.n	1971a <xQueueGenericSend+0x2e>
   19712:	6a3b      	ldr	r3, [r7, #32]
   19714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19716:	2b00      	cmp	r3, #0
   19718:	d101      	bne.n	1971e <xQueueGenericSend+0x32>
   1971a:	2301      	movs	r3, #1
   1971c:	e000      	b.n	19720 <xQueueGenericSend+0x34>
   1971e:	2300      	movs	r3, #0
   19720:	2b00      	cmp	r3, #0
   19722:	d101      	bne.n	19728 <xQueueGenericSend+0x3c>
   19724:	b672      	cpsid	i
   19726:	e7fe      	b.n	19726 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   19728:	683b      	ldr	r3, [r7, #0]
   1972a:	2b02      	cmp	r3, #2
   1972c:	d103      	bne.n	19736 <xQueueGenericSend+0x4a>
   1972e:	6a3b      	ldr	r3, [r7, #32]
   19730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19732:	2b01      	cmp	r3, #1
   19734:	d101      	bne.n	1973a <xQueueGenericSend+0x4e>
   19736:	2301      	movs	r3, #1
   19738:	e000      	b.n	1973c <xQueueGenericSend+0x50>
   1973a:	2300      	movs	r3, #0
   1973c:	2b00      	cmp	r3, #0
   1973e:	d101      	bne.n	19744 <xQueueGenericSend+0x58>
   19740:	b672      	cpsid	i
   19742:	e7fe      	b.n	19742 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   19744:	4bbc      	ldr	r3, [pc, #752]	; (19a38 <xQueueGenericSend+0x34c>)
   19746:	4798      	blx	r3
   19748:	1e03      	subs	r3, r0, #0
   1974a:	d102      	bne.n	19752 <xQueueGenericSend+0x66>
   1974c:	687b      	ldr	r3, [r7, #4]
   1974e:	2b00      	cmp	r3, #0
   19750:	d101      	bne.n	19756 <xQueueGenericSend+0x6a>
   19752:	2301      	movs	r3, #1
   19754:	e000      	b.n	19758 <xQueueGenericSend+0x6c>
   19756:	2300      	movs	r3, #0
   19758:	2b00      	cmp	r3, #0
   1975a:	d101      	bne.n	19760 <xQueueGenericSend+0x74>
   1975c:	b672      	cpsid	i
   1975e:	e7fe      	b.n	1975e <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   19760:	4bb6      	ldr	r3, [pc, #728]	; (19a3c <xQueueGenericSend+0x350>)
   19762:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   19764:	6a3b      	ldr	r3, [r7, #32]
   19766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   19768:	6a3b      	ldr	r3, [r7, #32]
   1976a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1976c:	429a      	cmp	r2, r3
   1976e:	d303      	bcc.n	19778 <xQueueGenericSend+0x8c>
   19770:	683b      	ldr	r3, [r7, #0]
   19772:	2b02      	cmp	r3, #2
   19774:	d000      	beq.n	19778 <xQueueGenericSend+0x8c>
   19776:	e08e      	b.n	19896 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   19778:	4bb1      	ldr	r3, [pc, #708]	; (19a40 <xQueueGenericSend+0x354>)
   1977a:	4798      	blx	r3
   1977c:	0003      	movs	r3, r0
   1977e:	0018      	movs	r0, r3
   19780:	4bb0      	ldr	r3, [pc, #704]	; (19a44 <xQueueGenericSend+0x358>)
   19782:	4798      	blx	r3
   19784:	0003      	movs	r3, r0
   19786:	001a      	movs	r2, r3
   19788:	4baf      	ldr	r3, [pc, #700]	; (19a48 <xQueueGenericSend+0x35c>)
   1978a:	881b      	ldrh	r3, [r3, #0]
   1978c:	4013      	ands	r3, r2
   1978e:	b29b      	uxth	r3, r3
   19790:	2b00      	cmp	r3, #0
   19792:	d02e      	beq.n	197f2 <xQueueGenericSend+0x106>
   19794:	6a3b      	ldr	r3, [r7, #32]
   19796:	0018      	movs	r0, r3
   19798:	4bac      	ldr	r3, [pc, #688]	; (19a4c <xQueueGenericSend+0x360>)
   1979a:	4798      	blx	r3
   1979c:	0003      	movs	r3, r0
   1979e:	001a      	movs	r2, r3
   197a0:	4ba9      	ldr	r3, [pc, #676]	; (19a48 <xQueueGenericSend+0x35c>)
   197a2:	881b      	ldrh	r3, [r3, #0]
   197a4:	4013      	ands	r3, r2
   197a6:	b29b      	uxth	r3, r3
   197a8:	2b00      	cmp	r3, #0
   197aa:	d022      	beq.n	197f2 <xQueueGenericSend+0x106>
   197ac:	683b      	ldr	r3, [r7, #0]
   197ae:	2b00      	cmp	r3, #0
   197b0:	d10b      	bne.n	197ca <xQueueGenericSend+0xde>
   197b2:	6a3b      	ldr	r3, [r7, #32]
   197b4:	0018      	movs	r0, r3
   197b6:	4ba6      	ldr	r3, [pc, #664]	; (19a50 <xQueueGenericSend+0x364>)
   197b8:	4798      	blx	r3
   197ba:	0003      	movs	r3, r0
   197bc:	001a      	movs	r2, r3
   197be:	4ba5      	ldr	r3, [pc, #660]	; (19a54 <xQueueGenericSend+0x368>)
   197c0:	5c9b      	ldrb	r3, [r3, r2]
   197c2:	3320      	adds	r3, #32
   197c4:	b2db      	uxtb	r3, r3
   197c6:	001d      	movs	r5, r3
   197c8:	e000      	b.n	197cc <xQueueGenericSend+0xe0>
   197ca:	2525      	movs	r5, #37	; 0x25
   197cc:	6a3b      	ldr	r3, [r7, #32]
   197ce:	0018      	movs	r0, r3
   197d0:	4b9f      	ldr	r3, [pc, #636]	; (19a50 <xQueueGenericSend+0x364>)
   197d2:	4798      	blx	r3
   197d4:	0003      	movs	r3, r0
   197d6:	001a      	movs	r2, r3
   197d8:	4b9e      	ldr	r3, [pc, #632]	; (19a54 <xQueueGenericSend+0x368>)
   197da:	5c9c      	ldrb	r4, [r3, r2]
   197dc:	6a3b      	ldr	r3, [r7, #32]
   197de:	0018      	movs	r0, r3
   197e0:	4b9d      	ldr	r3, [pc, #628]	; (19a58 <xQueueGenericSend+0x36c>)
   197e2:	4798      	blx	r3
   197e4:	0003      	movs	r3, r0
   197e6:	b2db      	uxtb	r3, r3
   197e8:	001a      	movs	r2, r3
   197ea:	0021      	movs	r1, r4
   197ec:	0028      	movs	r0, r5
   197ee:	4b9b      	ldr	r3, [pc, #620]	; (19a5c <xQueueGenericSend+0x370>)
   197f0:	4798      	blx	r3
   197f2:	6a3b      	ldr	r3, [r7, #32]
   197f4:	0018      	movs	r0, r3
   197f6:	4b96      	ldr	r3, [pc, #600]	; (19a50 <xQueueGenericSend+0x364>)
   197f8:	4798      	blx	r3
   197fa:	0003      	movs	r3, r0
   197fc:	001a      	movs	r2, r3
   197fe:	4b95      	ldr	r3, [pc, #596]	; (19a54 <xQueueGenericSend+0x368>)
   19800:	5c9c      	ldrb	r4, [r3, r2]
   19802:	6a3b      	ldr	r3, [r7, #32]
   19804:	0018      	movs	r0, r3
   19806:	4b94      	ldr	r3, [pc, #592]	; (19a58 <xQueueGenericSend+0x36c>)
   19808:	4798      	blx	r3
   1980a:	0003      	movs	r3, r0
   1980c:	b2dd      	uxtb	r5, r3
   1980e:	6a3b      	ldr	r3, [r7, #32]
   19810:	0018      	movs	r0, r3
   19812:	4b8f      	ldr	r3, [pc, #572]	; (19a50 <xQueueGenericSend+0x364>)
   19814:	4798      	blx	r3
   19816:	0003      	movs	r3, r0
   19818:	001a      	movs	r2, r3
   1981a:	4b8e      	ldr	r3, [pc, #568]	; (19a54 <xQueueGenericSend+0x368>)
   1981c:	5c9b      	ldrb	r3, [r3, r2]
   1981e:	2b02      	cmp	r3, #2
   19820:	d005      	beq.n	1982e <xQueueGenericSend+0x142>
   19822:	6a3b      	ldr	r3, [r7, #32]
   19824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19826:	b2db      	uxtb	r3, r3
   19828:	3301      	adds	r3, #1
   1982a:	b2db      	uxtb	r3, r3
   1982c:	e000      	b.n	19830 <xQueueGenericSend+0x144>
   1982e:	2300      	movs	r3, #0
   19830:	001a      	movs	r2, r3
   19832:	0029      	movs	r1, r5
   19834:	0020      	movs	r0, r4
   19836:	4b8a      	ldr	r3, [pc, #552]	; (19a60 <xQueueGenericSend+0x374>)
   19838:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1983a:	683a      	ldr	r2, [r7, #0]
   1983c:	68b9      	ldr	r1, [r7, #8]
   1983e:	6a3b      	ldr	r3, [r7, #32]
   19840:	0018      	movs	r0, r3
   19842:	4b88      	ldr	r3, [pc, #544]	; (19a64 <xQueueGenericSend+0x378>)
   19844:	4798      	blx	r3
   19846:	0003      	movs	r3, r0
   19848:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1984a:	6a3b      	ldr	r3, [r7, #32]
   1984c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1984e:	2b00      	cmp	r3, #0
   19850:	d00a      	beq.n	19868 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   19852:	683a      	ldr	r2, [r7, #0]
   19854:	6a3b      	ldr	r3, [r7, #32]
   19856:	0011      	movs	r1, r2
   19858:	0018      	movs	r0, r3
   1985a:	4b83      	ldr	r3, [pc, #524]	; (19a68 <xQueueGenericSend+0x37c>)
   1985c:	4798      	blx	r3
   1985e:	1e03      	subs	r3, r0, #0
   19860:	d015      	beq.n	1988e <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   19862:	4b82      	ldr	r3, [pc, #520]	; (19a6c <xQueueGenericSend+0x380>)
   19864:	4798      	blx	r3
   19866:	e012      	b.n	1988e <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   19868:	6a3b      	ldr	r3, [r7, #32]
   1986a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1986c:	2b00      	cmp	r3, #0
   1986e:	d009      	beq.n	19884 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   19870:	6a3b      	ldr	r3, [r7, #32]
   19872:	3324      	adds	r3, #36	; 0x24
   19874:	0018      	movs	r0, r3
   19876:	4b7e      	ldr	r3, [pc, #504]	; (19a70 <xQueueGenericSend+0x384>)
   19878:	4798      	blx	r3
   1987a:	1e03      	subs	r3, r0, #0
   1987c:	d007      	beq.n	1988e <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1987e:	4b7b      	ldr	r3, [pc, #492]	; (19a6c <xQueueGenericSend+0x380>)
   19880:	4798      	blx	r3
   19882:	e004      	b.n	1988e <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   19884:	69fb      	ldr	r3, [r7, #28]
   19886:	2b00      	cmp	r3, #0
   19888:	d001      	beq.n	1988e <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1988a:	4b78      	ldr	r3, [pc, #480]	; (19a6c <xQueueGenericSend+0x380>)
   1988c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1988e:	4b79      	ldr	r3, [pc, #484]	; (19a74 <xQueueGenericSend+0x388>)
   19890:	4798      	blx	r3
				return pdPASS;
   19892:	2301      	movs	r3, #1
   19894:	e142      	b.n	19b1c <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   19896:	687b      	ldr	r3, [r7, #4]
   19898:	2b00      	cmp	r3, #0
   1989a:	d140      	bne.n	1991e <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1989c:	4b75      	ldr	r3, [pc, #468]	; (19a74 <xQueueGenericSend+0x388>)
   1989e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   198a0:	4b67      	ldr	r3, [pc, #412]	; (19a40 <xQueueGenericSend+0x354>)
   198a2:	4798      	blx	r3
   198a4:	0003      	movs	r3, r0
   198a6:	0018      	movs	r0, r3
   198a8:	4b66      	ldr	r3, [pc, #408]	; (19a44 <xQueueGenericSend+0x358>)
   198aa:	4798      	blx	r3
   198ac:	0003      	movs	r3, r0
   198ae:	001a      	movs	r2, r3
   198b0:	4b65      	ldr	r3, [pc, #404]	; (19a48 <xQueueGenericSend+0x35c>)
   198b2:	881b      	ldrh	r3, [r3, #0]
   198b4:	4013      	ands	r3, r2
   198b6:	b29b      	uxth	r3, r3
   198b8:	2b00      	cmp	r3, #0
   198ba:	d02e      	beq.n	1991a <xQueueGenericSend+0x22e>
   198bc:	6a3b      	ldr	r3, [r7, #32]
   198be:	0018      	movs	r0, r3
   198c0:	4b62      	ldr	r3, [pc, #392]	; (19a4c <xQueueGenericSend+0x360>)
   198c2:	4798      	blx	r3
   198c4:	0003      	movs	r3, r0
   198c6:	001a      	movs	r2, r3
   198c8:	4b5f      	ldr	r3, [pc, #380]	; (19a48 <xQueueGenericSend+0x35c>)
   198ca:	881b      	ldrh	r3, [r3, #0]
   198cc:	4013      	ands	r3, r2
   198ce:	b29b      	uxth	r3, r3
   198d0:	2b00      	cmp	r3, #0
   198d2:	d022      	beq.n	1991a <xQueueGenericSend+0x22e>
   198d4:	683b      	ldr	r3, [r7, #0]
   198d6:	2b00      	cmp	r3, #0
   198d8:	d10b      	bne.n	198f2 <xQueueGenericSend+0x206>
   198da:	6a3b      	ldr	r3, [r7, #32]
   198dc:	0018      	movs	r0, r3
   198de:	4b5c      	ldr	r3, [pc, #368]	; (19a50 <xQueueGenericSend+0x364>)
   198e0:	4798      	blx	r3
   198e2:	0003      	movs	r3, r0
   198e4:	001a      	movs	r2, r3
   198e6:	4b5b      	ldr	r3, [pc, #364]	; (19a54 <xQueueGenericSend+0x368>)
   198e8:	5c9b      	ldrb	r3, [r3, r2]
   198ea:	3348      	adds	r3, #72	; 0x48
   198ec:	b2db      	uxtb	r3, r3
   198ee:	001d      	movs	r5, r3
   198f0:	e000      	b.n	198f4 <xQueueGenericSend+0x208>
   198f2:	254d      	movs	r5, #77	; 0x4d
   198f4:	6a3b      	ldr	r3, [r7, #32]
   198f6:	0018      	movs	r0, r3
   198f8:	4b55      	ldr	r3, [pc, #340]	; (19a50 <xQueueGenericSend+0x364>)
   198fa:	4798      	blx	r3
   198fc:	0003      	movs	r3, r0
   198fe:	001a      	movs	r2, r3
   19900:	4b54      	ldr	r3, [pc, #336]	; (19a54 <xQueueGenericSend+0x368>)
   19902:	5c9c      	ldrb	r4, [r3, r2]
   19904:	6a3b      	ldr	r3, [r7, #32]
   19906:	0018      	movs	r0, r3
   19908:	4b53      	ldr	r3, [pc, #332]	; (19a58 <xQueueGenericSend+0x36c>)
   1990a:	4798      	blx	r3
   1990c:	0003      	movs	r3, r0
   1990e:	b2db      	uxtb	r3, r3
   19910:	001a      	movs	r2, r3
   19912:	0021      	movs	r1, r4
   19914:	0028      	movs	r0, r5
   19916:	4b51      	ldr	r3, [pc, #324]	; (19a5c <xQueueGenericSend+0x370>)
   19918:	4798      	blx	r3
					return errQUEUE_FULL;
   1991a:	2300      	movs	r3, #0
   1991c:	e0fe      	b.n	19b1c <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1991e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19920:	2b00      	cmp	r3, #0
   19922:	d106      	bne.n	19932 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   19924:	2314      	movs	r3, #20
   19926:	18fb      	adds	r3, r7, r3
   19928:	0018      	movs	r0, r3
   1992a:	4b53      	ldr	r3, [pc, #332]	; (19a78 <xQueueGenericSend+0x38c>)
   1992c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1992e:	2301      	movs	r3, #1
   19930:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   19932:	4b50      	ldr	r3, [pc, #320]	; (19a74 <xQueueGenericSend+0x388>)
   19934:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   19936:	4b51      	ldr	r3, [pc, #324]	; (19a7c <xQueueGenericSend+0x390>)
   19938:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1993a:	4b40      	ldr	r3, [pc, #256]	; (19a3c <xQueueGenericSend+0x350>)
   1993c:	4798      	blx	r3
   1993e:	6a3b      	ldr	r3, [r7, #32]
   19940:	2244      	movs	r2, #68	; 0x44
   19942:	5c9b      	ldrb	r3, [r3, r2]
   19944:	b25b      	sxtb	r3, r3
   19946:	3301      	adds	r3, #1
   19948:	d103      	bne.n	19952 <xQueueGenericSend+0x266>
   1994a:	6a3b      	ldr	r3, [r7, #32]
   1994c:	2244      	movs	r2, #68	; 0x44
   1994e:	2100      	movs	r1, #0
   19950:	5499      	strb	r1, [r3, r2]
   19952:	6a3b      	ldr	r3, [r7, #32]
   19954:	2245      	movs	r2, #69	; 0x45
   19956:	5c9b      	ldrb	r3, [r3, r2]
   19958:	b25b      	sxtb	r3, r3
   1995a:	3301      	adds	r3, #1
   1995c:	d103      	bne.n	19966 <xQueueGenericSend+0x27a>
   1995e:	6a3b      	ldr	r3, [r7, #32]
   19960:	2245      	movs	r2, #69	; 0x45
   19962:	2100      	movs	r1, #0
   19964:	5499      	strb	r1, [r3, r2]
   19966:	4b43      	ldr	r3, [pc, #268]	; (19a74 <xQueueGenericSend+0x388>)
   19968:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1996a:	1d3a      	adds	r2, r7, #4
   1996c:	2314      	movs	r3, #20
   1996e:	18fb      	adds	r3, r7, r3
   19970:	0011      	movs	r1, r2
   19972:	0018      	movs	r0, r3
   19974:	4b42      	ldr	r3, [pc, #264]	; (19a80 <xQueueGenericSend+0x394>)
   19976:	4798      	blx	r3
   19978:	1e03      	subs	r3, r0, #0
   1997a:	d000      	beq.n	1997e <xQueueGenericSend+0x292>
   1997c:	e08a      	b.n	19a94 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1997e:	6a3b      	ldr	r3, [r7, #32]
   19980:	0018      	movs	r0, r3
   19982:	4b40      	ldr	r3, [pc, #256]	; (19a84 <xQueueGenericSend+0x398>)
   19984:	4798      	blx	r3
   19986:	1e03      	subs	r3, r0, #0
   19988:	d04f      	beq.n	19a2a <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1998a:	4b2d      	ldr	r3, [pc, #180]	; (19a40 <xQueueGenericSend+0x354>)
   1998c:	4798      	blx	r3
   1998e:	0003      	movs	r3, r0
   19990:	0018      	movs	r0, r3
   19992:	4b2c      	ldr	r3, [pc, #176]	; (19a44 <xQueueGenericSend+0x358>)
   19994:	4798      	blx	r3
   19996:	0003      	movs	r3, r0
   19998:	001a      	movs	r2, r3
   1999a:	4b2b      	ldr	r3, [pc, #172]	; (19a48 <xQueueGenericSend+0x35c>)
   1999c:	881b      	ldrh	r3, [r3, #0]
   1999e:	4013      	ands	r3, r2
   199a0:	b29b      	uxth	r3, r3
   199a2:	2b00      	cmp	r3, #0
   199a4:	d02e      	beq.n	19a04 <xQueueGenericSend+0x318>
   199a6:	6a3b      	ldr	r3, [r7, #32]
   199a8:	0018      	movs	r0, r3
   199aa:	4b28      	ldr	r3, [pc, #160]	; (19a4c <xQueueGenericSend+0x360>)
   199ac:	4798      	blx	r3
   199ae:	0003      	movs	r3, r0
   199b0:	001a      	movs	r2, r3
   199b2:	4b25      	ldr	r3, [pc, #148]	; (19a48 <xQueueGenericSend+0x35c>)
   199b4:	881b      	ldrh	r3, [r3, #0]
   199b6:	4013      	ands	r3, r2
   199b8:	b29b      	uxth	r3, r3
   199ba:	2b00      	cmp	r3, #0
   199bc:	d022      	beq.n	19a04 <xQueueGenericSend+0x318>
   199be:	683b      	ldr	r3, [r7, #0]
   199c0:	2b00      	cmp	r3, #0
   199c2:	d10b      	bne.n	199dc <xQueueGenericSend+0x2f0>
   199c4:	6a3b      	ldr	r3, [r7, #32]
   199c6:	0018      	movs	r0, r3
   199c8:	4b21      	ldr	r3, [pc, #132]	; (19a50 <xQueueGenericSend+0x364>)
   199ca:	4798      	blx	r3
   199cc:	0003      	movs	r3, r0
   199ce:	001a      	movs	r2, r3
   199d0:	4b20      	ldr	r3, [pc, #128]	; (19a54 <xQueueGenericSend+0x368>)
   199d2:	5c9b      	ldrb	r3, [r3, r2]
   199d4:	3370      	adds	r3, #112	; 0x70
   199d6:	b2db      	uxtb	r3, r3
   199d8:	001d      	movs	r5, r3
   199da:	e000      	b.n	199de <xQueueGenericSend+0x2f2>
   199dc:	2575      	movs	r5, #117	; 0x75
   199de:	6a3b      	ldr	r3, [r7, #32]
   199e0:	0018      	movs	r0, r3
   199e2:	4b1b      	ldr	r3, [pc, #108]	; (19a50 <xQueueGenericSend+0x364>)
   199e4:	4798      	blx	r3
   199e6:	0003      	movs	r3, r0
   199e8:	001a      	movs	r2, r3
   199ea:	4b1a      	ldr	r3, [pc, #104]	; (19a54 <xQueueGenericSend+0x368>)
   199ec:	5c9c      	ldrb	r4, [r3, r2]
   199ee:	6a3b      	ldr	r3, [r7, #32]
   199f0:	0018      	movs	r0, r3
   199f2:	4b19      	ldr	r3, [pc, #100]	; (19a58 <xQueueGenericSend+0x36c>)
   199f4:	4798      	blx	r3
   199f6:	0003      	movs	r3, r0
   199f8:	b2db      	uxtb	r3, r3
   199fa:	001a      	movs	r2, r3
   199fc:	0021      	movs	r1, r4
   199fe:	0028      	movs	r0, r5
   19a00:	4b16      	ldr	r3, [pc, #88]	; (19a5c <xQueueGenericSend+0x370>)
   19a02:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   19a04:	6a3b      	ldr	r3, [r7, #32]
   19a06:	3310      	adds	r3, #16
   19a08:	687a      	ldr	r2, [r7, #4]
   19a0a:	0011      	movs	r1, r2
   19a0c:	0018      	movs	r0, r3
   19a0e:	4b1e      	ldr	r3, [pc, #120]	; (19a88 <xQueueGenericSend+0x39c>)
   19a10:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   19a12:	6a3b      	ldr	r3, [r7, #32]
   19a14:	0018      	movs	r0, r3
   19a16:	4b1d      	ldr	r3, [pc, #116]	; (19a8c <xQueueGenericSend+0x3a0>)
   19a18:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   19a1a:	4b1d      	ldr	r3, [pc, #116]	; (19a90 <xQueueGenericSend+0x3a4>)
   19a1c:	4798      	blx	r3
   19a1e:	1e03      	subs	r3, r0, #0
   19a20:	d000      	beq.n	19a24 <xQueueGenericSend+0x338>
   19a22:	e69d      	b.n	19760 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   19a24:	4b11      	ldr	r3, [pc, #68]	; (19a6c <xQueueGenericSend+0x380>)
   19a26:	4798      	blx	r3
   19a28:	e69a      	b.n	19760 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   19a2a:	6a3b      	ldr	r3, [r7, #32]
   19a2c:	0018      	movs	r0, r3
   19a2e:	4b17      	ldr	r3, [pc, #92]	; (19a8c <xQueueGenericSend+0x3a0>)
   19a30:	4798      	blx	r3
				( void ) xTaskResumeAll();
   19a32:	4b17      	ldr	r3, [pc, #92]	; (19a90 <xQueueGenericSend+0x3a4>)
   19a34:	4798      	blx	r3
   19a36:	e693      	b.n	19760 <xQueueGenericSend+0x74>
   19a38:	0001be79 	.word	0x0001be79
   19a3c:	00019159 	.word	0x00019159
   19a40:	000173e9 	.word	0x000173e9
   19a44:	0001714d 	.word	0x0001714d
   19a48:	20000100 	.word	0x20000100
   19a4c:	0001720d 	.word	0x0001720d
   19a50:	0001710d 	.word	0x0001710d
   19a54:	200000f4 	.word	0x200000f4
   19a58:	000171ed 	.word	0x000171ed
   19a5c:	00017b45 	.word	0x00017b45
   19a60:	000181a1 	.word	0x000181a1
   19a64:	0001a925 	.word	0x0001a925
   19a68:	0001ac29 	.word	0x0001ac29
   19a6c:	00019141 	.word	0x00019141
   19a70:	0001b9e9 	.word	0x0001b9e9
   19a74:	0001917d 	.word	0x0001917d
   19a78:	0001bb29 	.word	0x0001bb29
   19a7c:	0001b411 	.word	0x0001b411
   19a80:	0001bb51 	.word	0x0001bb51
   19a84:	0001ab79 	.word	0x0001ab79
   19a88:	0001b8c5 	.word	0x0001b8c5
   19a8c:	0001aa55 	.word	0x0001aa55
   19a90:	0001b429 	.word	0x0001b429
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   19a94:	6a3b      	ldr	r3, [r7, #32]
   19a96:	0018      	movs	r0, r3
   19a98:	4b22      	ldr	r3, [pc, #136]	; (19b24 <xQueueGenericSend+0x438>)
   19a9a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   19a9c:	4b22      	ldr	r3, [pc, #136]	; (19b28 <xQueueGenericSend+0x43c>)
   19a9e:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   19aa0:	4b22      	ldr	r3, [pc, #136]	; (19b2c <xQueueGenericSend+0x440>)
   19aa2:	4798      	blx	r3
   19aa4:	0003      	movs	r3, r0
   19aa6:	0018      	movs	r0, r3
   19aa8:	4b21      	ldr	r3, [pc, #132]	; (19b30 <xQueueGenericSend+0x444>)
   19aaa:	4798      	blx	r3
   19aac:	0003      	movs	r3, r0
   19aae:	001a      	movs	r2, r3
   19ab0:	4b20      	ldr	r3, [pc, #128]	; (19b34 <xQueueGenericSend+0x448>)
   19ab2:	881b      	ldrh	r3, [r3, #0]
   19ab4:	4013      	ands	r3, r2
   19ab6:	b29b      	uxth	r3, r3
   19ab8:	2b00      	cmp	r3, #0
   19aba:	d02e      	beq.n	19b1a <xQueueGenericSend+0x42e>
   19abc:	6a3b      	ldr	r3, [r7, #32]
   19abe:	0018      	movs	r0, r3
   19ac0:	4b1d      	ldr	r3, [pc, #116]	; (19b38 <xQueueGenericSend+0x44c>)
   19ac2:	4798      	blx	r3
   19ac4:	0003      	movs	r3, r0
   19ac6:	001a      	movs	r2, r3
   19ac8:	4b1a      	ldr	r3, [pc, #104]	; (19b34 <xQueueGenericSend+0x448>)
   19aca:	881b      	ldrh	r3, [r3, #0]
   19acc:	4013      	ands	r3, r2
   19ace:	b29b      	uxth	r3, r3
   19ad0:	2b00      	cmp	r3, #0
   19ad2:	d022      	beq.n	19b1a <xQueueGenericSend+0x42e>
   19ad4:	683b      	ldr	r3, [r7, #0]
   19ad6:	2b00      	cmp	r3, #0
   19ad8:	d10b      	bne.n	19af2 <xQueueGenericSend+0x406>
   19ada:	6a3b      	ldr	r3, [r7, #32]
   19adc:	0018      	movs	r0, r3
   19ade:	4b17      	ldr	r3, [pc, #92]	; (19b3c <xQueueGenericSend+0x450>)
   19ae0:	4798      	blx	r3
   19ae2:	0003      	movs	r3, r0
   19ae4:	001a      	movs	r2, r3
   19ae6:	4b16      	ldr	r3, [pc, #88]	; (19b40 <xQueueGenericSend+0x454>)
   19ae8:	5c9b      	ldrb	r3, [r3, r2]
   19aea:	3348      	adds	r3, #72	; 0x48
   19aec:	b2db      	uxtb	r3, r3
   19aee:	001d      	movs	r5, r3
   19af0:	e000      	b.n	19af4 <xQueueGenericSend+0x408>
   19af2:	254d      	movs	r5, #77	; 0x4d
   19af4:	6a3b      	ldr	r3, [r7, #32]
   19af6:	0018      	movs	r0, r3
   19af8:	4b10      	ldr	r3, [pc, #64]	; (19b3c <xQueueGenericSend+0x450>)
   19afa:	4798      	blx	r3
   19afc:	0003      	movs	r3, r0
   19afe:	001a      	movs	r2, r3
   19b00:	4b0f      	ldr	r3, [pc, #60]	; (19b40 <xQueueGenericSend+0x454>)
   19b02:	5c9c      	ldrb	r4, [r3, r2]
   19b04:	6a3b      	ldr	r3, [r7, #32]
   19b06:	0018      	movs	r0, r3
   19b08:	4b0e      	ldr	r3, [pc, #56]	; (19b44 <xQueueGenericSend+0x458>)
   19b0a:	4798      	blx	r3
   19b0c:	0003      	movs	r3, r0
   19b0e:	b2db      	uxtb	r3, r3
   19b10:	001a      	movs	r2, r3
   19b12:	0021      	movs	r1, r4
   19b14:	0028      	movs	r0, r5
   19b16:	4b0c      	ldr	r3, [pc, #48]	; (19b48 <xQueueGenericSend+0x45c>)
   19b18:	4798      	blx	r3
			return errQUEUE_FULL;
   19b1a:	2300      	movs	r3, #0
		}
	}
}
   19b1c:	0018      	movs	r0, r3
   19b1e:	46bd      	mov	sp, r7
   19b20:	b00a      	add	sp, #40	; 0x28
   19b22:	bdb0      	pop	{r4, r5, r7, pc}
   19b24:	0001aa55 	.word	0x0001aa55
   19b28:	0001b429 	.word	0x0001b429
   19b2c:	000173e9 	.word	0x000173e9
   19b30:	0001714d 	.word	0x0001714d
   19b34:	20000100 	.word	0x20000100
   19b38:	0001720d 	.word	0x0001720d
   19b3c:	0001710d 	.word	0x0001710d
   19b40:	200000f4 	.word	0x200000f4
   19b44:	000171ed 	.word	0x000171ed
   19b48:	00017b45 	.word	0x00017b45

00019b4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   19b4c:	b5b0      	push	{r4, r5, r7, lr}
   19b4e:	b088      	sub	sp, #32
   19b50:	af00      	add	r7, sp, #0
   19b52:	60f8      	str	r0, [r7, #12]
   19b54:	60b9      	str	r1, [r7, #8]
   19b56:	607a      	str	r2, [r7, #4]
   19b58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   19b5a:	68fb      	ldr	r3, [r7, #12]
   19b5c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   19b5e:	69bb      	ldr	r3, [r7, #24]
   19b60:	2b00      	cmp	r3, #0
   19b62:	d101      	bne.n	19b68 <xQueueGenericSendFromISR+0x1c>
   19b64:	b672      	cpsid	i
   19b66:	e7fe      	b.n	19b66 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   19b68:	68bb      	ldr	r3, [r7, #8]
   19b6a:	2b00      	cmp	r3, #0
   19b6c:	d103      	bne.n	19b76 <xQueueGenericSendFromISR+0x2a>
   19b6e:	69bb      	ldr	r3, [r7, #24]
   19b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19b72:	2b00      	cmp	r3, #0
   19b74:	d101      	bne.n	19b7a <xQueueGenericSendFromISR+0x2e>
   19b76:	2301      	movs	r3, #1
   19b78:	e000      	b.n	19b7c <xQueueGenericSendFromISR+0x30>
   19b7a:	2300      	movs	r3, #0
   19b7c:	2b00      	cmp	r3, #0
   19b7e:	d101      	bne.n	19b84 <xQueueGenericSendFromISR+0x38>
   19b80:	b672      	cpsid	i
   19b82:	e7fe      	b.n	19b82 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   19b84:	683b      	ldr	r3, [r7, #0]
   19b86:	2b02      	cmp	r3, #2
   19b88:	d103      	bne.n	19b92 <xQueueGenericSendFromISR+0x46>
   19b8a:	69bb      	ldr	r3, [r7, #24]
   19b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19b8e:	2b01      	cmp	r3, #1
   19b90:	d101      	bne.n	19b96 <xQueueGenericSendFromISR+0x4a>
   19b92:	2301      	movs	r3, #1
   19b94:	e000      	b.n	19b98 <xQueueGenericSendFromISR+0x4c>
   19b96:	2300      	movs	r3, #0
   19b98:	2b00      	cmp	r3, #0
   19b9a:	d101      	bne.n	19ba0 <xQueueGenericSendFromISR+0x54>
   19b9c:	b672      	cpsid	i
   19b9e:	e7fe      	b.n	19b9e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   19ba0:	4b68      	ldr	r3, [pc, #416]	; (19d44 <xQueueGenericSendFromISR+0x1f8>)
   19ba2:	4798      	blx	r3
   19ba4:	0003      	movs	r3, r0
   19ba6:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   19ba8:	69bb      	ldr	r3, [r7, #24]
   19baa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   19bac:	69bb      	ldr	r3, [r7, #24]
   19bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19bb0:	429a      	cmp	r2, r3
   19bb2:	d303      	bcc.n	19bbc <xQueueGenericSendFromISR+0x70>
   19bb4:	683b      	ldr	r3, [r7, #0]
   19bb6:	2b02      	cmp	r3, #2
   19bb8:	d000      	beq.n	19bbc <xQueueGenericSendFromISR+0x70>
   19bba:	e088      	b.n	19cce <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   19bbc:	2313      	movs	r3, #19
   19bbe:	18fb      	adds	r3, r7, r3
   19bc0:	69ba      	ldr	r2, [r7, #24]
   19bc2:	2145      	movs	r1, #69	; 0x45
   19bc4:	5c52      	ldrb	r2, [r2, r1]
   19bc6:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   19bc8:	69bb      	ldr	r3, [r7, #24]
   19bca:	0018      	movs	r0, r3
   19bcc:	4b5e      	ldr	r3, [pc, #376]	; (19d48 <xQueueGenericSendFromISR+0x1fc>)
   19bce:	4798      	blx	r3
   19bd0:	0003      	movs	r3, r0
   19bd2:	001a      	movs	r2, r3
   19bd4:	4b5d      	ldr	r3, [pc, #372]	; (19d4c <xQueueGenericSendFromISR+0x200>)
   19bd6:	881b      	ldrh	r3, [r3, #0]
   19bd8:	4013      	ands	r3, r2
   19bda:	b29b      	uxth	r3, r3
   19bdc:	2b00      	cmp	r3, #0
   19bde:	d022      	beq.n	19c26 <xQueueGenericSendFromISR+0xda>
   19be0:	683b      	ldr	r3, [r7, #0]
   19be2:	2b00      	cmp	r3, #0
   19be4:	d10b      	bne.n	19bfe <xQueueGenericSendFromISR+0xb2>
   19be6:	69bb      	ldr	r3, [r7, #24]
   19be8:	0018      	movs	r0, r3
   19bea:	4b59      	ldr	r3, [pc, #356]	; (19d50 <xQueueGenericSendFromISR+0x204>)
   19bec:	4798      	blx	r3
   19bee:	0003      	movs	r3, r0
   19bf0:	001a      	movs	r2, r3
   19bf2:	4b58      	ldr	r3, [pc, #352]	; (19d54 <xQueueGenericSendFromISR+0x208>)
   19bf4:	5c9b      	ldrb	r3, [r3, r2]
   19bf6:	3330      	adds	r3, #48	; 0x30
   19bf8:	b2db      	uxtb	r3, r3
   19bfa:	001d      	movs	r5, r3
   19bfc:	e000      	b.n	19c00 <xQueueGenericSendFromISR+0xb4>
   19bfe:	2535      	movs	r5, #53	; 0x35
   19c00:	69bb      	ldr	r3, [r7, #24]
   19c02:	0018      	movs	r0, r3
   19c04:	4b52      	ldr	r3, [pc, #328]	; (19d50 <xQueueGenericSendFromISR+0x204>)
   19c06:	4798      	blx	r3
   19c08:	0003      	movs	r3, r0
   19c0a:	001a      	movs	r2, r3
   19c0c:	4b51      	ldr	r3, [pc, #324]	; (19d54 <xQueueGenericSendFromISR+0x208>)
   19c0e:	5c9c      	ldrb	r4, [r3, r2]
   19c10:	69bb      	ldr	r3, [r7, #24]
   19c12:	0018      	movs	r0, r3
   19c14:	4b50      	ldr	r3, [pc, #320]	; (19d58 <xQueueGenericSendFromISR+0x20c>)
   19c16:	4798      	blx	r3
   19c18:	0003      	movs	r3, r0
   19c1a:	b2db      	uxtb	r3, r3
   19c1c:	001a      	movs	r2, r3
   19c1e:	0021      	movs	r1, r4
   19c20:	0028      	movs	r0, r5
   19c22:	4b4e      	ldr	r3, [pc, #312]	; (19d5c <xQueueGenericSendFromISR+0x210>)
   19c24:	4798      	blx	r3
   19c26:	69bb      	ldr	r3, [r7, #24]
   19c28:	0018      	movs	r0, r3
   19c2a:	4b49      	ldr	r3, [pc, #292]	; (19d50 <xQueueGenericSendFromISR+0x204>)
   19c2c:	4798      	blx	r3
   19c2e:	0003      	movs	r3, r0
   19c30:	001a      	movs	r2, r3
   19c32:	4b48      	ldr	r3, [pc, #288]	; (19d54 <xQueueGenericSendFromISR+0x208>)
   19c34:	5c9c      	ldrb	r4, [r3, r2]
   19c36:	69bb      	ldr	r3, [r7, #24]
   19c38:	0018      	movs	r0, r3
   19c3a:	4b47      	ldr	r3, [pc, #284]	; (19d58 <xQueueGenericSendFromISR+0x20c>)
   19c3c:	4798      	blx	r3
   19c3e:	0003      	movs	r3, r0
   19c40:	b2d9      	uxtb	r1, r3
   19c42:	69bb      	ldr	r3, [r7, #24]
   19c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19c46:	b2db      	uxtb	r3, r3
   19c48:	3301      	adds	r3, #1
   19c4a:	b2db      	uxtb	r3, r3
   19c4c:	001a      	movs	r2, r3
   19c4e:	0020      	movs	r0, r4
   19c50:	4b43      	ldr	r3, [pc, #268]	; (19d60 <xQueueGenericSendFromISR+0x214>)
   19c52:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   19c54:	683a      	ldr	r2, [r7, #0]
   19c56:	68b9      	ldr	r1, [r7, #8]
   19c58:	69bb      	ldr	r3, [r7, #24]
   19c5a:	0018      	movs	r0, r3
   19c5c:	4b41      	ldr	r3, [pc, #260]	; (19d64 <xQueueGenericSendFromISR+0x218>)
   19c5e:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   19c60:	2313      	movs	r3, #19
   19c62:	18fb      	adds	r3, r7, r3
   19c64:	781b      	ldrb	r3, [r3, #0]
   19c66:	b25b      	sxtb	r3, r3
   19c68:	3301      	adds	r3, #1
   19c6a:	d124      	bne.n	19cb6 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   19c6c:	69bb      	ldr	r3, [r7, #24]
   19c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   19c70:	2b00      	cmp	r3, #0
   19c72:	d00e      	beq.n	19c92 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   19c74:	683a      	ldr	r2, [r7, #0]
   19c76:	69bb      	ldr	r3, [r7, #24]
   19c78:	0011      	movs	r1, r2
   19c7a:	0018      	movs	r0, r3
   19c7c:	4b3a      	ldr	r3, [pc, #232]	; (19d68 <xQueueGenericSendFromISR+0x21c>)
   19c7e:	4798      	blx	r3
   19c80:	1e03      	subs	r3, r0, #0
   19c82:	d021      	beq.n	19cc8 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   19c84:	687b      	ldr	r3, [r7, #4]
   19c86:	2b00      	cmp	r3, #0
   19c88:	d01e      	beq.n	19cc8 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   19c8a:	687b      	ldr	r3, [r7, #4]
   19c8c:	2201      	movs	r2, #1
   19c8e:	601a      	str	r2, [r3, #0]
   19c90:	e01a      	b.n	19cc8 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   19c92:	69bb      	ldr	r3, [r7, #24]
   19c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19c96:	2b00      	cmp	r3, #0
   19c98:	d016      	beq.n	19cc8 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   19c9a:	69bb      	ldr	r3, [r7, #24]
   19c9c:	3324      	adds	r3, #36	; 0x24
   19c9e:	0018      	movs	r0, r3
   19ca0:	4b32      	ldr	r3, [pc, #200]	; (19d6c <xQueueGenericSendFromISR+0x220>)
   19ca2:	4798      	blx	r3
   19ca4:	1e03      	subs	r3, r0, #0
   19ca6:	d00f      	beq.n	19cc8 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   19ca8:	687b      	ldr	r3, [r7, #4]
   19caa:	2b00      	cmp	r3, #0
   19cac:	d00c      	beq.n	19cc8 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   19cae:	687b      	ldr	r3, [r7, #4]
   19cb0:	2201      	movs	r2, #1
   19cb2:	601a      	str	r2, [r3, #0]
   19cb4:	e008      	b.n	19cc8 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   19cb6:	2313      	movs	r3, #19
   19cb8:	18fb      	adds	r3, r7, r3
   19cba:	781b      	ldrb	r3, [r3, #0]
   19cbc:	3301      	adds	r3, #1
   19cbe:	b2db      	uxtb	r3, r3
   19cc0:	b259      	sxtb	r1, r3
   19cc2:	69bb      	ldr	r3, [r7, #24]
   19cc4:	2245      	movs	r2, #69	; 0x45
   19cc6:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   19cc8:	2301      	movs	r3, #1
   19cca:	61fb      	str	r3, [r7, #28]
		{
   19ccc:	e030      	b.n	19d30 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   19cce:	69bb      	ldr	r3, [r7, #24]
   19cd0:	0018      	movs	r0, r3
   19cd2:	4b1d      	ldr	r3, [pc, #116]	; (19d48 <xQueueGenericSendFromISR+0x1fc>)
   19cd4:	4798      	blx	r3
   19cd6:	0003      	movs	r3, r0
   19cd8:	001a      	movs	r2, r3
   19cda:	4b1c      	ldr	r3, [pc, #112]	; (19d4c <xQueueGenericSendFromISR+0x200>)
   19cdc:	881b      	ldrh	r3, [r3, #0]
   19cde:	4013      	ands	r3, r2
   19ce0:	b29b      	uxth	r3, r3
   19ce2:	2b00      	cmp	r3, #0
   19ce4:	d022      	beq.n	19d2c <xQueueGenericSendFromISR+0x1e0>
   19ce6:	683b      	ldr	r3, [r7, #0]
   19ce8:	2b00      	cmp	r3, #0
   19cea:	d10b      	bne.n	19d04 <xQueueGenericSendFromISR+0x1b8>
   19cec:	69bb      	ldr	r3, [r7, #24]
   19cee:	0018      	movs	r0, r3
   19cf0:	4b17      	ldr	r3, [pc, #92]	; (19d50 <xQueueGenericSendFromISR+0x204>)
   19cf2:	4798      	blx	r3
   19cf4:	0003      	movs	r3, r0
   19cf6:	001a      	movs	r2, r3
   19cf8:	4b16      	ldr	r3, [pc, #88]	; (19d54 <xQueueGenericSendFromISR+0x208>)
   19cfa:	5c9b      	ldrb	r3, [r3, r2]
   19cfc:	3358      	adds	r3, #88	; 0x58
   19cfe:	b2db      	uxtb	r3, r3
   19d00:	001d      	movs	r5, r3
   19d02:	e000      	b.n	19d06 <xQueueGenericSendFromISR+0x1ba>
   19d04:	255d      	movs	r5, #93	; 0x5d
   19d06:	69bb      	ldr	r3, [r7, #24]
   19d08:	0018      	movs	r0, r3
   19d0a:	4b11      	ldr	r3, [pc, #68]	; (19d50 <xQueueGenericSendFromISR+0x204>)
   19d0c:	4798      	blx	r3
   19d0e:	0003      	movs	r3, r0
   19d10:	001a      	movs	r2, r3
   19d12:	4b10      	ldr	r3, [pc, #64]	; (19d54 <xQueueGenericSendFromISR+0x208>)
   19d14:	5c9c      	ldrb	r4, [r3, r2]
   19d16:	69bb      	ldr	r3, [r7, #24]
   19d18:	0018      	movs	r0, r3
   19d1a:	4b0f      	ldr	r3, [pc, #60]	; (19d58 <xQueueGenericSendFromISR+0x20c>)
   19d1c:	4798      	blx	r3
   19d1e:	0003      	movs	r3, r0
   19d20:	b2db      	uxtb	r3, r3
   19d22:	001a      	movs	r2, r3
   19d24:	0021      	movs	r1, r4
   19d26:	0028      	movs	r0, r5
   19d28:	4b0c      	ldr	r3, [pc, #48]	; (19d5c <xQueueGenericSendFromISR+0x210>)
   19d2a:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   19d2c:	2300      	movs	r3, #0
   19d2e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   19d30:	697b      	ldr	r3, [r7, #20]
   19d32:	0018      	movs	r0, r3
   19d34:	4b0e      	ldr	r3, [pc, #56]	; (19d70 <xQueueGenericSendFromISR+0x224>)
   19d36:	4798      	blx	r3

	return xReturn;
   19d38:	69fb      	ldr	r3, [r7, #28]
}
   19d3a:	0018      	movs	r0, r3
   19d3c:	46bd      	mov	sp, r7
   19d3e:	b008      	add	sp, #32
   19d40:	bdb0      	pop	{r4, r5, r7, pc}
   19d42:	46c0      	nop			; (mov r8, r8)
   19d44:	000191ad 	.word	0x000191ad
   19d48:	0001720d 	.word	0x0001720d
   19d4c:	20000100 	.word	0x20000100
   19d50:	0001710d 	.word	0x0001710d
   19d54:	200000f4 	.word	0x200000f4
   19d58:	000171ed 	.word	0x000171ed
   19d5c:	00017b45 	.word	0x00017b45
   19d60:	000181a1 	.word	0x000181a1
   19d64:	0001a925 	.word	0x0001a925
   19d68:	0001ac29 	.word	0x0001ac29
   19d6c:	0001b9e9 	.word	0x0001b9e9
   19d70:	000191b9 	.word	0x000191b9

00019d74 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   19d74:	b580      	push	{r7, lr}
   19d76:	b082      	sub	sp, #8
   19d78:	af00      	add	r7, sp, #0
   19d7a:	6078      	str	r0, [r7, #4]
   19d7c:	6039      	str	r1, [r7, #0]
   19d7e:	6839      	ldr	r1, [r7, #0]
   19d80:	687b      	ldr	r3, [r7, #4]
   19d82:	2200      	movs	r2, #0
   19d84:	0018      	movs	r0, r3
   19d86:	4b03      	ldr	r3, [pc, #12]	; (19d94 <xQueueGiveFromISR+0x20>)
   19d88:	4798      	blx	r3
   19d8a:	0003      	movs	r3, r0
   19d8c:	0018      	movs	r0, r3
   19d8e:	46bd      	mov	sp, r7
   19d90:	b002      	add	sp, #8
   19d92:	bd80      	pop	{r7, pc}
   19d94:	00019d99 	.word	0x00019d99

00019d98 <MyWrapper>:
{
   19d98:	b5b0      	push	{r4, r5, r7, lr}
   19d9a:	b08a      	sub	sp, #40	; 0x28
   19d9c:	af00      	add	r7, sp, #0
   19d9e:	60f8      	str	r0, [r7, #12]
   19da0:	60b9      	str	r1, [r7, #8]
   19da2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   19da4:	68fb      	ldr	r3, [r7, #12]
   19da6:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   19da8:	6a3b      	ldr	r3, [r7, #32]
   19daa:	2b00      	cmp	r3, #0
   19dac:	d101      	bne.n	19db2 <MyWrapper+0x1a>
   19dae:	b672      	cpsid	i
   19db0:	e7fe      	b.n	19db0 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   19db2:	6a3b      	ldr	r3, [r7, #32]
   19db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19db6:	2b00      	cmp	r3, #0
   19db8:	d001      	beq.n	19dbe <MyWrapper+0x26>
   19dba:	b672      	cpsid	i
   19dbc:	e7fe      	b.n	19dbc <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   19dbe:	6a3b      	ldr	r3, [r7, #32]
   19dc0:	681b      	ldr	r3, [r3, #0]
   19dc2:	2b00      	cmp	r3, #0
   19dc4:	d103      	bne.n	19dce <MyWrapper+0x36>
   19dc6:	6a3b      	ldr	r3, [r7, #32]
   19dc8:	685b      	ldr	r3, [r3, #4]
   19dca:	2b00      	cmp	r3, #0
   19dcc:	d101      	bne.n	19dd2 <MyWrapper+0x3a>
   19dce:	2301      	movs	r3, #1
   19dd0:	e000      	b.n	19dd4 <MyWrapper+0x3c>
   19dd2:	2300      	movs	r3, #0
   19dd4:	2b00      	cmp	r3, #0
   19dd6:	d101      	bne.n	19ddc <MyWrapper+0x44>
   19dd8:	b672      	cpsid	i
   19dda:	e7fe      	b.n	19dda <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   19ddc:	4b66      	ldr	r3, [pc, #408]	; (19f78 <MyWrapper+0x1e0>)
   19dde:	4798      	blx	r3
   19de0:	0003      	movs	r3, r0
   19de2:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   19de4:	6a3b      	ldr	r3, [r7, #32]
   19de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19de8:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   19dea:	6a3b      	ldr	r3, [r7, #32]
   19dec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   19dee:	69bb      	ldr	r3, [r7, #24]
   19df0:	429a      	cmp	r2, r3
   19df2:	d800      	bhi.n	19df6 <MyWrapper+0x5e>
   19df4:	e085      	b.n	19f02 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   19df6:	2317      	movs	r3, #23
   19df8:	18fb      	adds	r3, r7, r3
   19dfa:	6a3a      	ldr	r2, [r7, #32]
   19dfc:	2145      	movs	r1, #69	; 0x45
   19dfe:	5c52      	ldrb	r2, [r2, r1]
   19e00:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   19e02:	6a3b      	ldr	r3, [r7, #32]
   19e04:	0018      	movs	r0, r3
   19e06:	4b5d      	ldr	r3, [pc, #372]	; (19f7c <MyWrapper+0x1e4>)
   19e08:	4798      	blx	r3
   19e0a:	0003      	movs	r3, r0
   19e0c:	001a      	movs	r2, r3
   19e0e:	4b5c      	ldr	r3, [pc, #368]	; (19f80 <MyWrapper+0x1e8>)
   19e10:	881b      	ldrh	r3, [r3, #0]
   19e12:	4013      	ands	r3, r2
   19e14:	b29b      	uxth	r3, r3
   19e16:	2b00      	cmp	r3, #0
   19e18:	d022      	beq.n	19e60 <MyWrapper+0xc8>
   19e1a:	687b      	ldr	r3, [r7, #4]
   19e1c:	2b00      	cmp	r3, #0
   19e1e:	d10b      	bne.n	19e38 <MyWrapper+0xa0>
   19e20:	6a3b      	ldr	r3, [r7, #32]
   19e22:	0018      	movs	r0, r3
   19e24:	4b57      	ldr	r3, [pc, #348]	; (19f84 <MyWrapper+0x1ec>)
   19e26:	4798      	blx	r3
   19e28:	0003      	movs	r3, r0
   19e2a:	001a      	movs	r2, r3
   19e2c:	4b56      	ldr	r3, [pc, #344]	; (19f88 <MyWrapper+0x1f0>)
   19e2e:	5c9b      	ldrb	r3, [r3, r2]
   19e30:	3330      	adds	r3, #48	; 0x30
   19e32:	b2db      	uxtb	r3, r3
   19e34:	001d      	movs	r5, r3
   19e36:	e000      	b.n	19e3a <MyWrapper+0xa2>
   19e38:	2535      	movs	r5, #53	; 0x35
   19e3a:	6a3b      	ldr	r3, [r7, #32]
   19e3c:	0018      	movs	r0, r3
   19e3e:	4b51      	ldr	r3, [pc, #324]	; (19f84 <MyWrapper+0x1ec>)
   19e40:	4798      	blx	r3
   19e42:	0003      	movs	r3, r0
   19e44:	001a      	movs	r2, r3
   19e46:	4b50      	ldr	r3, [pc, #320]	; (19f88 <MyWrapper+0x1f0>)
   19e48:	5c9c      	ldrb	r4, [r3, r2]
   19e4a:	6a3b      	ldr	r3, [r7, #32]
   19e4c:	0018      	movs	r0, r3
   19e4e:	4b4f      	ldr	r3, [pc, #316]	; (19f8c <MyWrapper+0x1f4>)
   19e50:	4798      	blx	r3
   19e52:	0003      	movs	r3, r0
   19e54:	b2db      	uxtb	r3, r3
   19e56:	001a      	movs	r2, r3
   19e58:	0021      	movs	r1, r4
   19e5a:	0028      	movs	r0, r5
   19e5c:	4b4c      	ldr	r3, [pc, #304]	; (19f90 <MyWrapper+0x1f8>)
   19e5e:	4798      	blx	r3
   19e60:	6a3b      	ldr	r3, [r7, #32]
   19e62:	0018      	movs	r0, r3
   19e64:	4b47      	ldr	r3, [pc, #284]	; (19f84 <MyWrapper+0x1ec>)
   19e66:	4798      	blx	r3
   19e68:	0003      	movs	r3, r0
   19e6a:	001a      	movs	r2, r3
   19e6c:	4b46      	ldr	r3, [pc, #280]	; (19f88 <MyWrapper+0x1f0>)
   19e6e:	5c9c      	ldrb	r4, [r3, r2]
   19e70:	6a3b      	ldr	r3, [r7, #32]
   19e72:	0018      	movs	r0, r3
   19e74:	4b45      	ldr	r3, [pc, #276]	; (19f8c <MyWrapper+0x1f4>)
   19e76:	4798      	blx	r3
   19e78:	0003      	movs	r3, r0
   19e7a:	b2d9      	uxtb	r1, r3
   19e7c:	6a3b      	ldr	r3, [r7, #32]
   19e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19e80:	b2db      	uxtb	r3, r3
   19e82:	3301      	adds	r3, #1
   19e84:	b2db      	uxtb	r3, r3
   19e86:	001a      	movs	r2, r3
   19e88:	0020      	movs	r0, r4
   19e8a:	4b42      	ldr	r3, [pc, #264]	; (19f94 <MyWrapper+0x1fc>)
   19e8c:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   19e8e:	69bb      	ldr	r3, [r7, #24]
   19e90:	1c5a      	adds	r2, r3, #1
   19e92:	6a3b      	ldr	r3, [r7, #32]
   19e94:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   19e96:	2317      	movs	r3, #23
   19e98:	18fb      	adds	r3, r7, r3
   19e9a:	781b      	ldrb	r3, [r3, #0]
   19e9c:	b25b      	sxtb	r3, r3
   19e9e:	3301      	adds	r3, #1
   19ea0:	d123      	bne.n	19eea <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   19ea2:	6a3b      	ldr	r3, [r7, #32]
   19ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   19ea6:	2b00      	cmp	r3, #0
   19ea8:	d00d      	beq.n	19ec6 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   19eaa:	6a3b      	ldr	r3, [r7, #32]
   19eac:	2100      	movs	r1, #0
   19eae:	0018      	movs	r0, r3
   19eb0:	4b39      	ldr	r3, [pc, #228]	; (19f98 <MyWrapper+0x200>)
   19eb2:	4798      	blx	r3
   19eb4:	1e03      	subs	r3, r0, #0
   19eb6:	d021      	beq.n	19efc <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   19eb8:	68bb      	ldr	r3, [r7, #8]
   19eba:	2b00      	cmp	r3, #0
   19ebc:	d01e      	beq.n	19efc <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   19ebe:	68bb      	ldr	r3, [r7, #8]
   19ec0:	2201      	movs	r2, #1
   19ec2:	601a      	str	r2, [r3, #0]
   19ec4:	e01a      	b.n	19efc <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   19ec6:	6a3b      	ldr	r3, [r7, #32]
   19ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19eca:	2b00      	cmp	r3, #0
   19ecc:	d016      	beq.n	19efc <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   19ece:	6a3b      	ldr	r3, [r7, #32]
   19ed0:	3324      	adds	r3, #36	; 0x24
   19ed2:	0018      	movs	r0, r3
   19ed4:	4b31      	ldr	r3, [pc, #196]	; (19f9c <MyWrapper+0x204>)
   19ed6:	4798      	blx	r3
   19ed8:	1e03      	subs	r3, r0, #0
   19eda:	d00f      	beq.n	19efc <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   19edc:	68bb      	ldr	r3, [r7, #8]
   19ede:	2b00      	cmp	r3, #0
   19ee0:	d00c      	beq.n	19efc <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   19ee2:	68bb      	ldr	r3, [r7, #8]
   19ee4:	2201      	movs	r2, #1
   19ee6:	601a      	str	r2, [r3, #0]
   19ee8:	e008      	b.n	19efc <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   19eea:	2317      	movs	r3, #23
   19eec:	18fb      	adds	r3, r7, r3
   19eee:	781b      	ldrb	r3, [r3, #0]
   19ef0:	3301      	adds	r3, #1
   19ef2:	b2db      	uxtb	r3, r3
   19ef4:	b259      	sxtb	r1, r3
   19ef6:	6a3b      	ldr	r3, [r7, #32]
   19ef8:	2245      	movs	r2, #69	; 0x45
   19efa:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   19efc:	2301      	movs	r3, #1
   19efe:	627b      	str	r3, [r7, #36]	; 0x24
   19f00:	e030      	b.n	19f64 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   19f02:	6a3b      	ldr	r3, [r7, #32]
   19f04:	0018      	movs	r0, r3
   19f06:	4b1d      	ldr	r3, [pc, #116]	; (19f7c <MyWrapper+0x1e4>)
   19f08:	4798      	blx	r3
   19f0a:	0003      	movs	r3, r0
   19f0c:	001a      	movs	r2, r3
   19f0e:	4b1c      	ldr	r3, [pc, #112]	; (19f80 <MyWrapper+0x1e8>)
   19f10:	881b      	ldrh	r3, [r3, #0]
   19f12:	4013      	ands	r3, r2
   19f14:	b29b      	uxth	r3, r3
   19f16:	2b00      	cmp	r3, #0
   19f18:	d022      	beq.n	19f60 <MyWrapper+0x1c8>
   19f1a:	687b      	ldr	r3, [r7, #4]
   19f1c:	2b00      	cmp	r3, #0
   19f1e:	d10b      	bne.n	19f38 <MyWrapper+0x1a0>
   19f20:	6a3b      	ldr	r3, [r7, #32]
   19f22:	0018      	movs	r0, r3
   19f24:	4b17      	ldr	r3, [pc, #92]	; (19f84 <MyWrapper+0x1ec>)
   19f26:	4798      	blx	r3
   19f28:	0003      	movs	r3, r0
   19f2a:	001a      	movs	r2, r3
   19f2c:	4b16      	ldr	r3, [pc, #88]	; (19f88 <MyWrapper+0x1f0>)
   19f2e:	5c9b      	ldrb	r3, [r3, r2]
   19f30:	3358      	adds	r3, #88	; 0x58
   19f32:	b2db      	uxtb	r3, r3
   19f34:	001d      	movs	r5, r3
   19f36:	e000      	b.n	19f3a <MyWrapper+0x1a2>
   19f38:	255d      	movs	r5, #93	; 0x5d
   19f3a:	6a3b      	ldr	r3, [r7, #32]
   19f3c:	0018      	movs	r0, r3
   19f3e:	4b11      	ldr	r3, [pc, #68]	; (19f84 <MyWrapper+0x1ec>)
   19f40:	4798      	blx	r3
   19f42:	0003      	movs	r3, r0
   19f44:	001a      	movs	r2, r3
   19f46:	4b10      	ldr	r3, [pc, #64]	; (19f88 <MyWrapper+0x1f0>)
   19f48:	5c9c      	ldrb	r4, [r3, r2]
   19f4a:	6a3b      	ldr	r3, [r7, #32]
   19f4c:	0018      	movs	r0, r3
   19f4e:	4b0f      	ldr	r3, [pc, #60]	; (19f8c <MyWrapper+0x1f4>)
   19f50:	4798      	blx	r3
   19f52:	0003      	movs	r3, r0
   19f54:	b2db      	uxtb	r3, r3
   19f56:	001a      	movs	r2, r3
   19f58:	0021      	movs	r1, r4
   19f5a:	0028      	movs	r0, r5
   19f5c:	4b0c      	ldr	r3, [pc, #48]	; (19f90 <MyWrapper+0x1f8>)
   19f5e:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   19f60:	2300      	movs	r3, #0
   19f62:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   19f64:	69fb      	ldr	r3, [r7, #28]
   19f66:	0018      	movs	r0, r3
   19f68:	4b0d      	ldr	r3, [pc, #52]	; (19fa0 <MyWrapper+0x208>)
   19f6a:	4798      	blx	r3

	return xReturn;
   19f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   19f6e:	0018      	movs	r0, r3
   19f70:	46bd      	mov	sp, r7
   19f72:	b00a      	add	sp, #40	; 0x28
   19f74:	bdb0      	pop	{r4, r5, r7, pc}
   19f76:	46c0      	nop			; (mov r8, r8)
   19f78:	000191ad 	.word	0x000191ad
   19f7c:	0001720d 	.word	0x0001720d
   19f80:	20000100 	.word	0x20000100
   19f84:	0001710d 	.word	0x0001710d
   19f88:	200000f4 	.word	0x200000f4
   19f8c:	000171ed 	.word	0x000171ed
   19f90:	00017b45 	.word	0x00017b45
   19f94:	000181a1 	.word	0x000181a1
   19f98:	0001ac29 	.word	0x0001ac29
   19f9c:	0001b9e9 	.word	0x0001b9e9
   19fa0:	000191b9 	.word	0x000191b9

00019fa4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   19fa4:	b5b0      	push	{r4, r5, r7, lr}
   19fa6:	b08a      	sub	sp, #40	; 0x28
   19fa8:	af00      	add	r7, sp, #0
   19faa:	60f8      	str	r0, [r7, #12]
   19fac:	60b9      	str	r1, [r7, #8]
   19fae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   19fb0:	2300      	movs	r3, #0
   19fb2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   19fb4:	68fb      	ldr	r3, [r7, #12]
   19fb6:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   19fb8:	6a3b      	ldr	r3, [r7, #32]
   19fba:	2b00      	cmp	r3, #0
   19fbc:	d101      	bne.n	19fc2 <xQueueReceive+0x1e>
   19fbe:	b672      	cpsid	i
   19fc0:	e7fe      	b.n	19fc0 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   19fc2:	68bb      	ldr	r3, [r7, #8]
   19fc4:	2b00      	cmp	r3, #0
   19fc6:	d103      	bne.n	19fd0 <xQueueReceive+0x2c>
   19fc8:	6a3b      	ldr	r3, [r7, #32]
   19fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19fcc:	2b00      	cmp	r3, #0
   19fce:	d101      	bne.n	19fd4 <xQueueReceive+0x30>
   19fd0:	2301      	movs	r3, #1
   19fd2:	e000      	b.n	19fd6 <xQueueReceive+0x32>
   19fd4:	2300      	movs	r3, #0
   19fd6:	2b00      	cmp	r3, #0
   19fd8:	d101      	bne.n	19fde <xQueueReceive+0x3a>
   19fda:	b672      	cpsid	i
   19fdc:	e7fe      	b.n	19fdc <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   19fde:	4bbf      	ldr	r3, [pc, #764]	; (1a2dc <xQueueReceive+0x338>)
   19fe0:	4798      	blx	r3
   19fe2:	1e03      	subs	r3, r0, #0
   19fe4:	d102      	bne.n	19fec <xQueueReceive+0x48>
   19fe6:	687b      	ldr	r3, [r7, #4]
   19fe8:	2b00      	cmp	r3, #0
   19fea:	d101      	bne.n	19ff0 <xQueueReceive+0x4c>
   19fec:	2301      	movs	r3, #1
   19fee:	e000      	b.n	19ff2 <xQueueReceive+0x4e>
   19ff0:	2300      	movs	r3, #0
   19ff2:	2b00      	cmp	r3, #0
   19ff4:	d101      	bne.n	19ffa <xQueueReceive+0x56>
   19ff6:	b672      	cpsid	i
   19ff8:	e7fe      	b.n	19ff8 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   19ffa:	4bb9      	ldr	r3, [pc, #740]	; (1a2e0 <xQueueReceive+0x33c>)
   19ffc:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   19ffe:	6a3b      	ldr	r3, [r7, #32]
   1a000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a002:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1a004:	69fb      	ldr	r3, [r7, #28]
   1a006:	2b00      	cmp	r3, #0
   1a008:	d100      	bne.n	1a00c <xQueueReceive+0x68>
   1a00a:	e07d      	b.n	1a108 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1a00c:	68ba      	ldr	r2, [r7, #8]
   1a00e:	6a3b      	ldr	r3, [r7, #32]
   1a010:	0011      	movs	r1, r2
   1a012:	0018      	movs	r0, r3
   1a014:	4bb3      	ldr	r3, [pc, #716]	; (1a2e4 <xQueueReceive+0x340>)
   1a016:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1a018:	4bb3      	ldr	r3, [pc, #716]	; (1a2e8 <xQueueReceive+0x344>)
   1a01a:	4798      	blx	r3
   1a01c:	0003      	movs	r3, r0
   1a01e:	0018      	movs	r0, r3
   1a020:	4bb2      	ldr	r3, [pc, #712]	; (1a2ec <xQueueReceive+0x348>)
   1a022:	4798      	blx	r3
   1a024:	0003      	movs	r3, r0
   1a026:	001a      	movs	r2, r3
   1a028:	4bb1      	ldr	r3, [pc, #708]	; (1a2f0 <xQueueReceive+0x34c>)
   1a02a:	881b      	ldrh	r3, [r3, #0]
   1a02c:	4013      	ands	r3, r2
   1a02e:	b29b      	uxth	r3, r3
   1a030:	2b00      	cmp	r3, #0
   1a032:	d029      	beq.n	1a088 <xQueueReceive+0xe4>
   1a034:	6a3b      	ldr	r3, [r7, #32]
   1a036:	0018      	movs	r0, r3
   1a038:	4bae      	ldr	r3, [pc, #696]	; (1a2f4 <xQueueReceive+0x350>)
   1a03a:	4798      	blx	r3
   1a03c:	0003      	movs	r3, r0
   1a03e:	001a      	movs	r2, r3
   1a040:	4bab      	ldr	r3, [pc, #684]	; (1a2f0 <xQueueReceive+0x34c>)
   1a042:	881b      	ldrh	r3, [r3, #0]
   1a044:	4013      	ands	r3, r2
   1a046:	b29b      	uxth	r3, r3
   1a048:	2b00      	cmp	r3, #0
   1a04a:	d01d      	beq.n	1a088 <xQueueReceive+0xe4>
   1a04c:	6a3b      	ldr	r3, [r7, #32]
   1a04e:	0018      	movs	r0, r3
   1a050:	4ba9      	ldr	r3, [pc, #676]	; (1a2f8 <xQueueReceive+0x354>)
   1a052:	4798      	blx	r3
   1a054:	0003      	movs	r3, r0
   1a056:	001a      	movs	r2, r3
   1a058:	4ba8      	ldr	r3, [pc, #672]	; (1a2fc <xQueueReceive+0x358>)
   1a05a:	5c9b      	ldrb	r3, [r3, r2]
   1a05c:	3328      	adds	r3, #40	; 0x28
   1a05e:	b2db      	uxtb	r3, r3
   1a060:	001d      	movs	r5, r3
   1a062:	6a3b      	ldr	r3, [r7, #32]
   1a064:	0018      	movs	r0, r3
   1a066:	4ba4      	ldr	r3, [pc, #656]	; (1a2f8 <xQueueReceive+0x354>)
   1a068:	4798      	blx	r3
   1a06a:	0003      	movs	r3, r0
   1a06c:	001a      	movs	r2, r3
   1a06e:	4ba3      	ldr	r3, [pc, #652]	; (1a2fc <xQueueReceive+0x358>)
   1a070:	5c9c      	ldrb	r4, [r3, r2]
   1a072:	6a3b      	ldr	r3, [r7, #32]
   1a074:	0018      	movs	r0, r3
   1a076:	4ba2      	ldr	r3, [pc, #648]	; (1a300 <xQueueReceive+0x35c>)
   1a078:	4798      	blx	r3
   1a07a:	0003      	movs	r3, r0
   1a07c:	b2db      	uxtb	r3, r3
   1a07e:	001a      	movs	r2, r3
   1a080:	0021      	movs	r1, r4
   1a082:	0028      	movs	r0, r5
   1a084:	4b9f      	ldr	r3, [pc, #636]	; (1a304 <xQueueReceive+0x360>)
   1a086:	4798      	blx	r3
   1a088:	6a3b      	ldr	r3, [r7, #32]
   1a08a:	0018      	movs	r0, r3
   1a08c:	4b9a      	ldr	r3, [pc, #616]	; (1a2f8 <xQueueReceive+0x354>)
   1a08e:	4798      	blx	r3
   1a090:	0003      	movs	r3, r0
   1a092:	001a      	movs	r2, r3
   1a094:	4b99      	ldr	r3, [pc, #612]	; (1a2fc <xQueueReceive+0x358>)
   1a096:	5c9c      	ldrb	r4, [r3, r2]
   1a098:	6a3b      	ldr	r3, [r7, #32]
   1a09a:	0018      	movs	r0, r3
   1a09c:	4b98      	ldr	r3, [pc, #608]	; (1a300 <xQueueReceive+0x35c>)
   1a09e:	4798      	blx	r3
   1a0a0:	0003      	movs	r3, r0
   1a0a2:	b2dd      	uxtb	r5, r3
   1a0a4:	6a3b      	ldr	r3, [r7, #32]
   1a0a6:	0018      	movs	r0, r3
   1a0a8:	4b93      	ldr	r3, [pc, #588]	; (1a2f8 <xQueueReceive+0x354>)
   1a0aa:	4798      	blx	r3
   1a0ac:	0003      	movs	r3, r0
   1a0ae:	001a      	movs	r2, r3
   1a0b0:	4b92      	ldr	r3, [pc, #584]	; (1a2fc <xQueueReceive+0x358>)
   1a0b2:	5c9b      	ldrb	r3, [r3, r2]
   1a0b4:	2b02      	cmp	r3, #2
   1a0b6:	d108      	bne.n	1a0ca <xQueueReceive+0x126>
   1a0b8:	4b8b      	ldr	r3, [pc, #556]	; (1a2e8 <xQueueReceive+0x344>)
   1a0ba:	4798      	blx	r3
   1a0bc:	0003      	movs	r3, r0
   1a0be:	0018      	movs	r0, r3
   1a0c0:	4b91      	ldr	r3, [pc, #580]	; (1a308 <xQueueReceive+0x364>)
   1a0c2:	4798      	blx	r3
   1a0c4:	0003      	movs	r3, r0
   1a0c6:	b2db      	uxtb	r3, r3
   1a0c8:	e004      	b.n	1a0d4 <xQueueReceive+0x130>
   1a0ca:	6a3b      	ldr	r3, [r7, #32]
   1a0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a0ce:	b2db      	uxtb	r3, r3
   1a0d0:	3b01      	subs	r3, #1
   1a0d2:	b2db      	uxtb	r3, r3
   1a0d4:	001a      	movs	r2, r3
   1a0d6:	0029      	movs	r1, r5
   1a0d8:	0020      	movs	r0, r4
   1a0da:	4b8c      	ldr	r3, [pc, #560]	; (1a30c <xQueueReceive+0x368>)
   1a0dc:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1a0de:	69fb      	ldr	r3, [r7, #28]
   1a0e0:	1e5a      	subs	r2, r3, #1
   1a0e2:	6a3b      	ldr	r3, [r7, #32]
   1a0e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a0e6:	6a3b      	ldr	r3, [r7, #32]
   1a0e8:	691b      	ldr	r3, [r3, #16]
   1a0ea:	2b00      	cmp	r3, #0
   1a0ec:	d008      	beq.n	1a100 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a0ee:	6a3b      	ldr	r3, [r7, #32]
   1a0f0:	3310      	adds	r3, #16
   1a0f2:	0018      	movs	r0, r3
   1a0f4:	4b86      	ldr	r3, [pc, #536]	; (1a310 <xQueueReceive+0x36c>)
   1a0f6:	4798      	blx	r3
   1a0f8:	1e03      	subs	r3, r0, #0
   1a0fa:	d001      	beq.n	1a100 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1a0fc:	4b85      	ldr	r3, [pc, #532]	; (1a314 <xQueueReceive+0x370>)
   1a0fe:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1a100:	4b85      	ldr	r3, [pc, #532]	; (1a318 <xQueueReceive+0x374>)
   1a102:	4798      	blx	r3
				return pdPASS;
   1a104:	2301      	movs	r3, #1
   1a106:	e15f      	b.n	1a3c8 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1a108:	687b      	ldr	r3, [r7, #4]
   1a10a:	2b00      	cmp	r3, #0
   1a10c:	d13b      	bne.n	1a186 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1a10e:	4b82      	ldr	r3, [pc, #520]	; (1a318 <xQueueReceive+0x374>)
   1a110:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1a112:	4b75      	ldr	r3, [pc, #468]	; (1a2e8 <xQueueReceive+0x344>)
   1a114:	4798      	blx	r3
   1a116:	0003      	movs	r3, r0
   1a118:	0018      	movs	r0, r3
   1a11a:	4b74      	ldr	r3, [pc, #464]	; (1a2ec <xQueueReceive+0x348>)
   1a11c:	4798      	blx	r3
   1a11e:	0003      	movs	r3, r0
   1a120:	001a      	movs	r2, r3
   1a122:	4b73      	ldr	r3, [pc, #460]	; (1a2f0 <xQueueReceive+0x34c>)
   1a124:	881b      	ldrh	r3, [r3, #0]
   1a126:	4013      	ands	r3, r2
   1a128:	b29b      	uxth	r3, r3
   1a12a:	2b00      	cmp	r3, #0
   1a12c:	d029      	beq.n	1a182 <xQueueReceive+0x1de>
   1a12e:	6a3b      	ldr	r3, [r7, #32]
   1a130:	0018      	movs	r0, r3
   1a132:	4b70      	ldr	r3, [pc, #448]	; (1a2f4 <xQueueReceive+0x350>)
   1a134:	4798      	blx	r3
   1a136:	0003      	movs	r3, r0
   1a138:	001a      	movs	r2, r3
   1a13a:	4b6d      	ldr	r3, [pc, #436]	; (1a2f0 <xQueueReceive+0x34c>)
   1a13c:	881b      	ldrh	r3, [r3, #0]
   1a13e:	4013      	ands	r3, r2
   1a140:	b29b      	uxth	r3, r3
   1a142:	2b00      	cmp	r3, #0
   1a144:	d01d      	beq.n	1a182 <xQueueReceive+0x1de>
   1a146:	6a3b      	ldr	r3, [r7, #32]
   1a148:	0018      	movs	r0, r3
   1a14a:	4b6b      	ldr	r3, [pc, #428]	; (1a2f8 <xQueueReceive+0x354>)
   1a14c:	4798      	blx	r3
   1a14e:	0003      	movs	r3, r0
   1a150:	001a      	movs	r2, r3
   1a152:	4b6a      	ldr	r3, [pc, #424]	; (1a2fc <xQueueReceive+0x358>)
   1a154:	5c9b      	ldrb	r3, [r3, r2]
   1a156:	3350      	adds	r3, #80	; 0x50
   1a158:	b2db      	uxtb	r3, r3
   1a15a:	001d      	movs	r5, r3
   1a15c:	6a3b      	ldr	r3, [r7, #32]
   1a15e:	0018      	movs	r0, r3
   1a160:	4b65      	ldr	r3, [pc, #404]	; (1a2f8 <xQueueReceive+0x354>)
   1a162:	4798      	blx	r3
   1a164:	0003      	movs	r3, r0
   1a166:	001a      	movs	r2, r3
   1a168:	4b64      	ldr	r3, [pc, #400]	; (1a2fc <xQueueReceive+0x358>)
   1a16a:	5c9c      	ldrb	r4, [r3, r2]
   1a16c:	6a3b      	ldr	r3, [r7, #32]
   1a16e:	0018      	movs	r0, r3
   1a170:	4b63      	ldr	r3, [pc, #396]	; (1a300 <xQueueReceive+0x35c>)
   1a172:	4798      	blx	r3
   1a174:	0003      	movs	r3, r0
   1a176:	b2db      	uxtb	r3, r3
   1a178:	001a      	movs	r2, r3
   1a17a:	0021      	movs	r1, r4
   1a17c:	0028      	movs	r0, r5
   1a17e:	4b61      	ldr	r3, [pc, #388]	; (1a304 <xQueueReceive+0x360>)
   1a180:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1a182:	2300      	movs	r3, #0
   1a184:	e120      	b.n	1a3c8 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1a186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a188:	2b00      	cmp	r3, #0
   1a18a:	d106      	bne.n	1a19a <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1a18c:	2314      	movs	r3, #20
   1a18e:	18fb      	adds	r3, r7, r3
   1a190:	0018      	movs	r0, r3
   1a192:	4b62      	ldr	r3, [pc, #392]	; (1a31c <xQueueReceive+0x378>)
   1a194:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1a196:	2301      	movs	r3, #1
   1a198:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1a19a:	4b5f      	ldr	r3, [pc, #380]	; (1a318 <xQueueReceive+0x374>)
   1a19c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1a19e:	4b60      	ldr	r3, [pc, #384]	; (1a320 <xQueueReceive+0x37c>)
   1a1a0:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1a1a2:	4b4f      	ldr	r3, [pc, #316]	; (1a2e0 <xQueueReceive+0x33c>)
   1a1a4:	4798      	blx	r3
   1a1a6:	6a3b      	ldr	r3, [r7, #32]
   1a1a8:	2244      	movs	r2, #68	; 0x44
   1a1aa:	5c9b      	ldrb	r3, [r3, r2]
   1a1ac:	b25b      	sxtb	r3, r3
   1a1ae:	3301      	adds	r3, #1
   1a1b0:	d103      	bne.n	1a1ba <xQueueReceive+0x216>
   1a1b2:	6a3b      	ldr	r3, [r7, #32]
   1a1b4:	2244      	movs	r2, #68	; 0x44
   1a1b6:	2100      	movs	r1, #0
   1a1b8:	5499      	strb	r1, [r3, r2]
   1a1ba:	6a3b      	ldr	r3, [r7, #32]
   1a1bc:	2245      	movs	r2, #69	; 0x45
   1a1be:	5c9b      	ldrb	r3, [r3, r2]
   1a1c0:	b25b      	sxtb	r3, r3
   1a1c2:	3301      	adds	r3, #1
   1a1c4:	d103      	bne.n	1a1ce <xQueueReceive+0x22a>
   1a1c6:	6a3b      	ldr	r3, [r7, #32]
   1a1c8:	2245      	movs	r2, #69	; 0x45
   1a1ca:	2100      	movs	r1, #0
   1a1cc:	5499      	strb	r1, [r3, r2]
   1a1ce:	4b52      	ldr	r3, [pc, #328]	; (1a318 <xQueueReceive+0x374>)
   1a1d0:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1a1d2:	1d3a      	adds	r2, r7, #4
   1a1d4:	2314      	movs	r3, #20
   1a1d6:	18fb      	adds	r3, r7, r3
   1a1d8:	0011      	movs	r1, r2
   1a1da:	0018      	movs	r0, r3
   1a1dc:	4b51      	ldr	r3, [pc, #324]	; (1a324 <xQueueReceive+0x380>)
   1a1de:	4798      	blx	r3
   1a1e0:	1e03      	subs	r3, r0, #0
   1a1e2:	d000      	beq.n	1a1e6 <xQueueReceive+0x242>
   1a1e4:	e0aa      	b.n	1a33c <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1a1e6:	6a3b      	ldr	r3, [r7, #32]
   1a1e8:	0018      	movs	r0, r3
   1a1ea:	4b4f      	ldr	r3, [pc, #316]	; (1a328 <xQueueReceive+0x384>)
   1a1ec:	4798      	blx	r3
   1a1ee:	1e03      	subs	r3, r0, #0
   1a1f0:	d06d      	beq.n	1a2ce <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1a1f2:	4b3d      	ldr	r3, [pc, #244]	; (1a2e8 <xQueueReceive+0x344>)
   1a1f4:	4798      	blx	r3
   1a1f6:	0003      	movs	r3, r0
   1a1f8:	0018      	movs	r0, r3
   1a1fa:	4b3c      	ldr	r3, [pc, #240]	; (1a2ec <xQueueReceive+0x348>)
   1a1fc:	4798      	blx	r3
   1a1fe:	0003      	movs	r3, r0
   1a200:	001a      	movs	r2, r3
   1a202:	4b3b      	ldr	r3, [pc, #236]	; (1a2f0 <xQueueReceive+0x34c>)
   1a204:	881b      	ldrh	r3, [r3, #0]
   1a206:	4013      	ands	r3, r2
   1a208:	b29b      	uxth	r3, r3
   1a20a:	2b00      	cmp	r3, #0
   1a20c:	d029      	beq.n	1a262 <xQueueReceive+0x2be>
   1a20e:	6a3b      	ldr	r3, [r7, #32]
   1a210:	0018      	movs	r0, r3
   1a212:	4b38      	ldr	r3, [pc, #224]	; (1a2f4 <xQueueReceive+0x350>)
   1a214:	4798      	blx	r3
   1a216:	0003      	movs	r3, r0
   1a218:	001a      	movs	r2, r3
   1a21a:	4b35      	ldr	r3, [pc, #212]	; (1a2f0 <xQueueReceive+0x34c>)
   1a21c:	881b      	ldrh	r3, [r3, #0]
   1a21e:	4013      	ands	r3, r2
   1a220:	b29b      	uxth	r3, r3
   1a222:	2b00      	cmp	r3, #0
   1a224:	d01d      	beq.n	1a262 <xQueueReceive+0x2be>
   1a226:	6a3b      	ldr	r3, [r7, #32]
   1a228:	0018      	movs	r0, r3
   1a22a:	4b33      	ldr	r3, [pc, #204]	; (1a2f8 <xQueueReceive+0x354>)
   1a22c:	4798      	blx	r3
   1a22e:	0003      	movs	r3, r0
   1a230:	001a      	movs	r2, r3
   1a232:	4b32      	ldr	r3, [pc, #200]	; (1a2fc <xQueueReceive+0x358>)
   1a234:	5c9b      	ldrb	r3, [r3, r2]
   1a236:	3368      	adds	r3, #104	; 0x68
   1a238:	b2db      	uxtb	r3, r3
   1a23a:	001d      	movs	r5, r3
   1a23c:	6a3b      	ldr	r3, [r7, #32]
   1a23e:	0018      	movs	r0, r3
   1a240:	4b2d      	ldr	r3, [pc, #180]	; (1a2f8 <xQueueReceive+0x354>)
   1a242:	4798      	blx	r3
   1a244:	0003      	movs	r3, r0
   1a246:	001a      	movs	r2, r3
   1a248:	4b2c      	ldr	r3, [pc, #176]	; (1a2fc <xQueueReceive+0x358>)
   1a24a:	5c9c      	ldrb	r4, [r3, r2]
   1a24c:	6a3b      	ldr	r3, [r7, #32]
   1a24e:	0018      	movs	r0, r3
   1a250:	4b2b      	ldr	r3, [pc, #172]	; (1a300 <xQueueReceive+0x35c>)
   1a252:	4798      	blx	r3
   1a254:	0003      	movs	r3, r0
   1a256:	b2db      	uxtb	r3, r3
   1a258:	001a      	movs	r2, r3
   1a25a:	0021      	movs	r1, r4
   1a25c:	0028      	movs	r0, r5
   1a25e:	4b29      	ldr	r3, [pc, #164]	; (1a304 <xQueueReceive+0x360>)
   1a260:	4798      	blx	r3
   1a262:	6a3b      	ldr	r3, [r7, #32]
   1a264:	0018      	movs	r0, r3
   1a266:	4b24      	ldr	r3, [pc, #144]	; (1a2f8 <xQueueReceive+0x354>)
   1a268:	4798      	blx	r3
   1a26a:	0003      	movs	r3, r0
   1a26c:	001a      	movs	r2, r3
   1a26e:	4b23      	ldr	r3, [pc, #140]	; (1a2fc <xQueueReceive+0x358>)
   1a270:	5c9b      	ldrb	r3, [r3, r2]
   1a272:	2b02      	cmp	r3, #2
   1a274:	d018      	beq.n	1a2a8 <xQueueReceive+0x304>
   1a276:	4b1c      	ldr	r3, [pc, #112]	; (1a2e8 <xQueueReceive+0x344>)
   1a278:	4798      	blx	r3
   1a27a:	0003      	movs	r3, r0
   1a27c:	0018      	movs	r0, r3
   1a27e:	4b1b      	ldr	r3, [pc, #108]	; (1a2ec <xQueueReceive+0x348>)
   1a280:	4798      	blx	r3
   1a282:	0003      	movs	r3, r0
   1a284:	001a      	movs	r2, r3
   1a286:	4b1a      	ldr	r3, [pc, #104]	; (1a2f0 <xQueueReceive+0x34c>)
   1a288:	881b      	ldrh	r3, [r3, #0]
   1a28a:	4013      	ands	r3, r2
   1a28c:	b29b      	uxth	r3, r3
   1a28e:	2b00      	cmp	r3, #0
   1a290:	d00a      	beq.n	1a2a8 <xQueueReceive+0x304>
   1a292:	4b15      	ldr	r3, [pc, #84]	; (1a2e8 <xQueueReceive+0x344>)
   1a294:	4798      	blx	r3
   1a296:	0003      	movs	r3, r0
   1a298:	0018      	movs	r0, r3
   1a29a:	4b1b      	ldr	r3, [pc, #108]	; (1a308 <xQueueReceive+0x364>)
   1a29c:	4798      	blx	r3
   1a29e:	0003      	movs	r3, r0
   1a2a0:	b2db      	uxtb	r3, r3
   1a2a2:	0018      	movs	r0, r3
   1a2a4:	4b21      	ldr	r3, [pc, #132]	; (1a32c <xQueueReceive+0x388>)
   1a2a6:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1a2a8:	6a3b      	ldr	r3, [r7, #32]
   1a2aa:	3324      	adds	r3, #36	; 0x24
   1a2ac:	687a      	ldr	r2, [r7, #4]
   1a2ae:	0011      	movs	r1, r2
   1a2b0:	0018      	movs	r0, r3
   1a2b2:	4b1f      	ldr	r3, [pc, #124]	; (1a330 <xQueueReceive+0x38c>)
   1a2b4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1a2b6:	6a3b      	ldr	r3, [r7, #32]
   1a2b8:	0018      	movs	r0, r3
   1a2ba:	4b1e      	ldr	r3, [pc, #120]	; (1a334 <xQueueReceive+0x390>)
   1a2bc:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1a2be:	4b1e      	ldr	r3, [pc, #120]	; (1a338 <xQueueReceive+0x394>)
   1a2c0:	4798      	blx	r3
   1a2c2:	1e03      	subs	r3, r0, #0
   1a2c4:	d000      	beq.n	1a2c8 <xQueueReceive+0x324>
   1a2c6:	e698      	b.n	19ffa <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1a2c8:	4b12      	ldr	r3, [pc, #72]	; (1a314 <xQueueReceive+0x370>)
   1a2ca:	4798      	blx	r3
   1a2cc:	e695      	b.n	19ffa <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1a2ce:	6a3b      	ldr	r3, [r7, #32]
   1a2d0:	0018      	movs	r0, r3
   1a2d2:	4b18      	ldr	r3, [pc, #96]	; (1a334 <xQueueReceive+0x390>)
   1a2d4:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1a2d6:	4b18      	ldr	r3, [pc, #96]	; (1a338 <xQueueReceive+0x394>)
   1a2d8:	4798      	blx	r3
   1a2da:	e68e      	b.n	19ffa <xQueueReceive+0x56>
   1a2dc:	0001be79 	.word	0x0001be79
   1a2e0:	00019159 	.word	0x00019159
   1a2e4:	0001aa05 	.word	0x0001aa05
   1a2e8:	000173e9 	.word	0x000173e9
   1a2ec:	0001714d 	.word	0x0001714d
   1a2f0:	20000100 	.word	0x20000100
   1a2f4:	0001720d 	.word	0x0001720d
   1a2f8:	0001710d 	.word	0x0001710d
   1a2fc:	200000f4 	.word	0x200000f4
   1a300:	000171ed 	.word	0x000171ed
   1a304:	00017b45 	.word	0x00017b45
   1a308:	0001712d 	.word	0x0001712d
   1a30c:	000181a1 	.word	0x000181a1
   1a310:	0001b9e9 	.word	0x0001b9e9
   1a314:	00019141 	.word	0x00019141
   1a318:	0001917d 	.word	0x0001917d
   1a31c:	0001bb29 	.word	0x0001bb29
   1a320:	0001b411 	.word	0x0001b411
   1a324:	0001bb51 	.word	0x0001bb51
   1a328:	0001ab45 	.word	0x0001ab45
   1a32c:	000182dd 	.word	0x000182dd
   1a330:	0001b8c5 	.word	0x0001b8c5
   1a334:	0001aa55 	.word	0x0001aa55
   1a338:	0001b429 	.word	0x0001b429
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1a33c:	6a3b      	ldr	r3, [r7, #32]
   1a33e:	0018      	movs	r0, r3
   1a340:	4b23      	ldr	r3, [pc, #140]	; (1a3d0 <xQueueReceive+0x42c>)
   1a342:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1a344:	4b23      	ldr	r3, [pc, #140]	; (1a3d4 <xQueueReceive+0x430>)
   1a346:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1a348:	6a3b      	ldr	r3, [r7, #32]
   1a34a:	0018      	movs	r0, r3
   1a34c:	4b22      	ldr	r3, [pc, #136]	; (1a3d8 <xQueueReceive+0x434>)
   1a34e:	4798      	blx	r3
   1a350:	1e03      	subs	r3, r0, #0
   1a352:	d100      	bne.n	1a356 <xQueueReceive+0x3b2>
   1a354:	e651      	b.n	19ffa <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1a356:	4b21      	ldr	r3, [pc, #132]	; (1a3dc <xQueueReceive+0x438>)
   1a358:	4798      	blx	r3
   1a35a:	0003      	movs	r3, r0
   1a35c:	0018      	movs	r0, r3
   1a35e:	4b20      	ldr	r3, [pc, #128]	; (1a3e0 <xQueueReceive+0x43c>)
   1a360:	4798      	blx	r3
   1a362:	0003      	movs	r3, r0
   1a364:	001a      	movs	r2, r3
   1a366:	4b1f      	ldr	r3, [pc, #124]	; (1a3e4 <xQueueReceive+0x440>)
   1a368:	881b      	ldrh	r3, [r3, #0]
   1a36a:	4013      	ands	r3, r2
   1a36c:	b29b      	uxth	r3, r3
   1a36e:	2b00      	cmp	r3, #0
   1a370:	d029      	beq.n	1a3c6 <xQueueReceive+0x422>
   1a372:	6a3b      	ldr	r3, [r7, #32]
   1a374:	0018      	movs	r0, r3
   1a376:	4b1c      	ldr	r3, [pc, #112]	; (1a3e8 <xQueueReceive+0x444>)
   1a378:	4798      	blx	r3
   1a37a:	0003      	movs	r3, r0
   1a37c:	001a      	movs	r2, r3
   1a37e:	4b19      	ldr	r3, [pc, #100]	; (1a3e4 <xQueueReceive+0x440>)
   1a380:	881b      	ldrh	r3, [r3, #0]
   1a382:	4013      	ands	r3, r2
   1a384:	b29b      	uxth	r3, r3
   1a386:	2b00      	cmp	r3, #0
   1a388:	d01d      	beq.n	1a3c6 <xQueueReceive+0x422>
   1a38a:	6a3b      	ldr	r3, [r7, #32]
   1a38c:	0018      	movs	r0, r3
   1a38e:	4b17      	ldr	r3, [pc, #92]	; (1a3ec <xQueueReceive+0x448>)
   1a390:	4798      	blx	r3
   1a392:	0003      	movs	r3, r0
   1a394:	001a      	movs	r2, r3
   1a396:	4b16      	ldr	r3, [pc, #88]	; (1a3f0 <xQueueReceive+0x44c>)
   1a398:	5c9b      	ldrb	r3, [r3, r2]
   1a39a:	3350      	adds	r3, #80	; 0x50
   1a39c:	b2db      	uxtb	r3, r3
   1a39e:	001d      	movs	r5, r3
   1a3a0:	6a3b      	ldr	r3, [r7, #32]
   1a3a2:	0018      	movs	r0, r3
   1a3a4:	4b11      	ldr	r3, [pc, #68]	; (1a3ec <xQueueReceive+0x448>)
   1a3a6:	4798      	blx	r3
   1a3a8:	0003      	movs	r3, r0
   1a3aa:	001a      	movs	r2, r3
   1a3ac:	4b10      	ldr	r3, [pc, #64]	; (1a3f0 <xQueueReceive+0x44c>)
   1a3ae:	5c9c      	ldrb	r4, [r3, r2]
   1a3b0:	6a3b      	ldr	r3, [r7, #32]
   1a3b2:	0018      	movs	r0, r3
   1a3b4:	4b0f      	ldr	r3, [pc, #60]	; (1a3f4 <xQueueReceive+0x450>)
   1a3b6:	4798      	blx	r3
   1a3b8:	0003      	movs	r3, r0
   1a3ba:	b2db      	uxtb	r3, r3
   1a3bc:	001a      	movs	r2, r3
   1a3be:	0021      	movs	r1, r4
   1a3c0:	0028      	movs	r0, r5
   1a3c2:	4b0d      	ldr	r3, [pc, #52]	; (1a3f8 <xQueueReceive+0x454>)
   1a3c4:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1a3c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1a3c8:	0018      	movs	r0, r3
   1a3ca:	46bd      	mov	sp, r7
   1a3cc:	b00a      	add	sp, #40	; 0x28
   1a3ce:	bdb0      	pop	{r4, r5, r7, pc}
   1a3d0:	0001aa55 	.word	0x0001aa55
   1a3d4:	0001b429 	.word	0x0001b429
   1a3d8:	0001ab45 	.word	0x0001ab45
   1a3dc:	000173e9 	.word	0x000173e9
   1a3e0:	0001714d 	.word	0x0001714d
   1a3e4:	20000100 	.word	0x20000100
   1a3e8:	0001720d 	.word	0x0001720d
   1a3ec:	0001710d 	.word	0x0001710d
   1a3f0:	200000f4 	.word	0x200000f4
   1a3f4:	000171ed 	.word	0x000171ed
   1a3f8:	00017b45 	.word	0x00017b45

0001a3fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1a3fc:	b5b0      	push	{r4, r5, r7, lr}
   1a3fe:	b08a      	sub	sp, #40	; 0x28
   1a400:	af00      	add	r7, sp, #0
   1a402:	6078      	str	r0, [r7, #4]
   1a404:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1a406:	2300      	movs	r3, #0
   1a408:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a40a:	687b      	ldr	r3, [r7, #4]
   1a40c:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1a40e:	2300      	movs	r3, #0
   1a410:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1a412:	69fb      	ldr	r3, [r7, #28]
   1a414:	2b00      	cmp	r3, #0
   1a416:	d101      	bne.n	1a41c <xQueueSemaphoreTake+0x20>
   1a418:	b672      	cpsid	i
   1a41a:	e7fe      	b.n	1a41a <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1a41c:	69fb      	ldr	r3, [r7, #28]
   1a41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a420:	2b00      	cmp	r3, #0
   1a422:	d001      	beq.n	1a428 <xQueueSemaphoreTake+0x2c>
   1a424:	b672      	cpsid	i
   1a426:	e7fe      	b.n	1a426 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1a428:	4bcb      	ldr	r3, [pc, #812]	; (1a758 <xQueueSemaphoreTake+0x35c>)
   1a42a:	4798      	blx	r3
   1a42c:	1e03      	subs	r3, r0, #0
   1a42e:	d102      	bne.n	1a436 <xQueueSemaphoreTake+0x3a>
   1a430:	683b      	ldr	r3, [r7, #0]
   1a432:	2b00      	cmp	r3, #0
   1a434:	d101      	bne.n	1a43a <xQueueSemaphoreTake+0x3e>
   1a436:	2301      	movs	r3, #1
   1a438:	e000      	b.n	1a43c <xQueueSemaphoreTake+0x40>
   1a43a:	2300      	movs	r3, #0
   1a43c:	2b00      	cmp	r3, #0
   1a43e:	d101      	bne.n	1a444 <xQueueSemaphoreTake+0x48>
   1a440:	b672      	cpsid	i
   1a442:	e7fe      	b.n	1a442 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1a444:	4bc5      	ldr	r3, [pc, #788]	; (1a75c <xQueueSemaphoreTake+0x360>)
   1a446:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1a448:	69fb      	ldr	r3, [r7, #28]
   1a44a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a44c:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1a44e:	69bb      	ldr	r3, [r7, #24]
   1a450:	2b00      	cmp	r3, #0
   1a452:	d100      	bne.n	1a456 <xQueueSemaphoreTake+0x5a>
   1a454:	e080      	b.n	1a558 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1a456:	4bc2      	ldr	r3, [pc, #776]	; (1a760 <xQueueSemaphoreTake+0x364>)
   1a458:	4798      	blx	r3
   1a45a:	0003      	movs	r3, r0
   1a45c:	0018      	movs	r0, r3
   1a45e:	4bc1      	ldr	r3, [pc, #772]	; (1a764 <xQueueSemaphoreTake+0x368>)
   1a460:	4798      	blx	r3
   1a462:	0003      	movs	r3, r0
   1a464:	001a      	movs	r2, r3
   1a466:	4bc0      	ldr	r3, [pc, #768]	; (1a768 <xQueueSemaphoreTake+0x36c>)
   1a468:	881b      	ldrh	r3, [r3, #0]
   1a46a:	4013      	ands	r3, r2
   1a46c:	b29b      	uxth	r3, r3
   1a46e:	2b00      	cmp	r3, #0
   1a470:	d029      	beq.n	1a4c6 <xQueueSemaphoreTake+0xca>
   1a472:	69fb      	ldr	r3, [r7, #28]
   1a474:	0018      	movs	r0, r3
   1a476:	4bbd      	ldr	r3, [pc, #756]	; (1a76c <xQueueSemaphoreTake+0x370>)
   1a478:	4798      	blx	r3
   1a47a:	0003      	movs	r3, r0
   1a47c:	001a      	movs	r2, r3
   1a47e:	4bba      	ldr	r3, [pc, #744]	; (1a768 <xQueueSemaphoreTake+0x36c>)
   1a480:	881b      	ldrh	r3, [r3, #0]
   1a482:	4013      	ands	r3, r2
   1a484:	b29b      	uxth	r3, r3
   1a486:	2b00      	cmp	r3, #0
   1a488:	d01d      	beq.n	1a4c6 <xQueueSemaphoreTake+0xca>
   1a48a:	69fb      	ldr	r3, [r7, #28]
   1a48c:	0018      	movs	r0, r3
   1a48e:	4bb8      	ldr	r3, [pc, #736]	; (1a770 <xQueueSemaphoreTake+0x374>)
   1a490:	4798      	blx	r3
   1a492:	0003      	movs	r3, r0
   1a494:	001a      	movs	r2, r3
   1a496:	4bb7      	ldr	r3, [pc, #732]	; (1a774 <xQueueSemaphoreTake+0x378>)
   1a498:	5c9b      	ldrb	r3, [r3, r2]
   1a49a:	3328      	adds	r3, #40	; 0x28
   1a49c:	b2db      	uxtb	r3, r3
   1a49e:	001d      	movs	r5, r3
   1a4a0:	69fb      	ldr	r3, [r7, #28]
   1a4a2:	0018      	movs	r0, r3
   1a4a4:	4bb2      	ldr	r3, [pc, #712]	; (1a770 <xQueueSemaphoreTake+0x374>)
   1a4a6:	4798      	blx	r3
   1a4a8:	0003      	movs	r3, r0
   1a4aa:	001a      	movs	r2, r3
   1a4ac:	4bb1      	ldr	r3, [pc, #708]	; (1a774 <xQueueSemaphoreTake+0x378>)
   1a4ae:	5c9c      	ldrb	r4, [r3, r2]
   1a4b0:	69fb      	ldr	r3, [r7, #28]
   1a4b2:	0018      	movs	r0, r3
   1a4b4:	4bb0      	ldr	r3, [pc, #704]	; (1a778 <xQueueSemaphoreTake+0x37c>)
   1a4b6:	4798      	blx	r3
   1a4b8:	0003      	movs	r3, r0
   1a4ba:	b2db      	uxtb	r3, r3
   1a4bc:	001a      	movs	r2, r3
   1a4be:	0021      	movs	r1, r4
   1a4c0:	0028      	movs	r0, r5
   1a4c2:	4bae      	ldr	r3, [pc, #696]	; (1a77c <xQueueSemaphoreTake+0x380>)
   1a4c4:	4798      	blx	r3
   1a4c6:	69fb      	ldr	r3, [r7, #28]
   1a4c8:	0018      	movs	r0, r3
   1a4ca:	4ba9      	ldr	r3, [pc, #676]	; (1a770 <xQueueSemaphoreTake+0x374>)
   1a4cc:	4798      	blx	r3
   1a4ce:	0003      	movs	r3, r0
   1a4d0:	001a      	movs	r2, r3
   1a4d2:	4ba8      	ldr	r3, [pc, #672]	; (1a774 <xQueueSemaphoreTake+0x378>)
   1a4d4:	5c9c      	ldrb	r4, [r3, r2]
   1a4d6:	69fb      	ldr	r3, [r7, #28]
   1a4d8:	0018      	movs	r0, r3
   1a4da:	4ba7      	ldr	r3, [pc, #668]	; (1a778 <xQueueSemaphoreTake+0x37c>)
   1a4dc:	4798      	blx	r3
   1a4de:	0003      	movs	r3, r0
   1a4e0:	b2dd      	uxtb	r5, r3
   1a4e2:	69fb      	ldr	r3, [r7, #28]
   1a4e4:	0018      	movs	r0, r3
   1a4e6:	4ba2      	ldr	r3, [pc, #648]	; (1a770 <xQueueSemaphoreTake+0x374>)
   1a4e8:	4798      	blx	r3
   1a4ea:	0003      	movs	r3, r0
   1a4ec:	001a      	movs	r2, r3
   1a4ee:	4ba1      	ldr	r3, [pc, #644]	; (1a774 <xQueueSemaphoreTake+0x378>)
   1a4f0:	5c9b      	ldrb	r3, [r3, r2]
   1a4f2:	2b02      	cmp	r3, #2
   1a4f4:	d108      	bne.n	1a508 <xQueueSemaphoreTake+0x10c>
   1a4f6:	4b9a      	ldr	r3, [pc, #616]	; (1a760 <xQueueSemaphoreTake+0x364>)
   1a4f8:	4798      	blx	r3
   1a4fa:	0003      	movs	r3, r0
   1a4fc:	0018      	movs	r0, r3
   1a4fe:	4ba0      	ldr	r3, [pc, #640]	; (1a780 <xQueueSemaphoreTake+0x384>)
   1a500:	4798      	blx	r3
   1a502:	0003      	movs	r3, r0
   1a504:	b2db      	uxtb	r3, r3
   1a506:	e004      	b.n	1a512 <xQueueSemaphoreTake+0x116>
   1a508:	69fb      	ldr	r3, [r7, #28]
   1a50a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a50c:	b2db      	uxtb	r3, r3
   1a50e:	3b01      	subs	r3, #1
   1a510:	b2db      	uxtb	r3, r3
   1a512:	001a      	movs	r2, r3
   1a514:	0029      	movs	r1, r5
   1a516:	0020      	movs	r0, r4
   1a518:	4b9a      	ldr	r3, [pc, #616]	; (1a784 <xQueueSemaphoreTake+0x388>)
   1a51a:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1a51c:	69bb      	ldr	r3, [r7, #24]
   1a51e:	1e5a      	subs	r2, r3, #1
   1a520:	69fb      	ldr	r3, [r7, #28]
   1a522:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1a524:	69fb      	ldr	r3, [r7, #28]
   1a526:	681b      	ldr	r3, [r3, #0]
   1a528:	2b00      	cmp	r3, #0
   1a52a:	d104      	bne.n	1a536 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1a52c:	4b96      	ldr	r3, [pc, #600]	; (1a788 <xQueueSemaphoreTake+0x38c>)
   1a52e:	4798      	blx	r3
   1a530:	0002      	movs	r2, r0
   1a532:	69fb      	ldr	r3, [r7, #28]
   1a534:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a536:	69fb      	ldr	r3, [r7, #28]
   1a538:	691b      	ldr	r3, [r3, #16]
   1a53a:	2b00      	cmp	r3, #0
   1a53c:	d008      	beq.n	1a550 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a53e:	69fb      	ldr	r3, [r7, #28]
   1a540:	3310      	adds	r3, #16
   1a542:	0018      	movs	r0, r3
   1a544:	4b91      	ldr	r3, [pc, #580]	; (1a78c <xQueueSemaphoreTake+0x390>)
   1a546:	4798      	blx	r3
   1a548:	1e03      	subs	r3, r0, #0
   1a54a:	d001      	beq.n	1a550 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1a54c:	4b90      	ldr	r3, [pc, #576]	; (1a790 <xQueueSemaphoreTake+0x394>)
   1a54e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1a550:	4b90      	ldr	r3, [pc, #576]	; (1a794 <xQueueSemaphoreTake+0x398>)
   1a552:	4798      	blx	r3
				return pdPASS;
   1a554:	2301      	movs	r3, #1
   1a556:	e18b      	b.n	1a870 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1a558:	683b      	ldr	r3, [r7, #0]
   1a55a:	2b00      	cmp	r3, #0
   1a55c:	d140      	bne.n	1a5e0 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1a55e:	6a3b      	ldr	r3, [r7, #32]
   1a560:	2b00      	cmp	r3, #0
   1a562:	d001      	beq.n	1a568 <xQueueSemaphoreTake+0x16c>
   1a564:	b672      	cpsid	i
   1a566:	e7fe      	b.n	1a566 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1a568:	4b8a      	ldr	r3, [pc, #552]	; (1a794 <xQueueSemaphoreTake+0x398>)
   1a56a:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1a56c:	4b7c      	ldr	r3, [pc, #496]	; (1a760 <xQueueSemaphoreTake+0x364>)
   1a56e:	4798      	blx	r3
   1a570:	0003      	movs	r3, r0
   1a572:	0018      	movs	r0, r3
   1a574:	4b7b      	ldr	r3, [pc, #492]	; (1a764 <xQueueSemaphoreTake+0x368>)
   1a576:	4798      	blx	r3
   1a578:	0003      	movs	r3, r0
   1a57a:	001a      	movs	r2, r3
   1a57c:	4b7a      	ldr	r3, [pc, #488]	; (1a768 <xQueueSemaphoreTake+0x36c>)
   1a57e:	881b      	ldrh	r3, [r3, #0]
   1a580:	4013      	ands	r3, r2
   1a582:	b29b      	uxth	r3, r3
   1a584:	2b00      	cmp	r3, #0
   1a586:	d029      	beq.n	1a5dc <xQueueSemaphoreTake+0x1e0>
   1a588:	69fb      	ldr	r3, [r7, #28]
   1a58a:	0018      	movs	r0, r3
   1a58c:	4b77      	ldr	r3, [pc, #476]	; (1a76c <xQueueSemaphoreTake+0x370>)
   1a58e:	4798      	blx	r3
   1a590:	0003      	movs	r3, r0
   1a592:	001a      	movs	r2, r3
   1a594:	4b74      	ldr	r3, [pc, #464]	; (1a768 <xQueueSemaphoreTake+0x36c>)
   1a596:	881b      	ldrh	r3, [r3, #0]
   1a598:	4013      	ands	r3, r2
   1a59a:	b29b      	uxth	r3, r3
   1a59c:	2b00      	cmp	r3, #0
   1a59e:	d01d      	beq.n	1a5dc <xQueueSemaphoreTake+0x1e0>
   1a5a0:	69fb      	ldr	r3, [r7, #28]
   1a5a2:	0018      	movs	r0, r3
   1a5a4:	4b72      	ldr	r3, [pc, #456]	; (1a770 <xQueueSemaphoreTake+0x374>)
   1a5a6:	4798      	blx	r3
   1a5a8:	0003      	movs	r3, r0
   1a5aa:	001a      	movs	r2, r3
   1a5ac:	4b71      	ldr	r3, [pc, #452]	; (1a774 <xQueueSemaphoreTake+0x378>)
   1a5ae:	5c9b      	ldrb	r3, [r3, r2]
   1a5b0:	3350      	adds	r3, #80	; 0x50
   1a5b2:	b2db      	uxtb	r3, r3
   1a5b4:	001d      	movs	r5, r3
   1a5b6:	69fb      	ldr	r3, [r7, #28]
   1a5b8:	0018      	movs	r0, r3
   1a5ba:	4b6d      	ldr	r3, [pc, #436]	; (1a770 <xQueueSemaphoreTake+0x374>)
   1a5bc:	4798      	blx	r3
   1a5be:	0003      	movs	r3, r0
   1a5c0:	001a      	movs	r2, r3
   1a5c2:	4b6c      	ldr	r3, [pc, #432]	; (1a774 <xQueueSemaphoreTake+0x378>)
   1a5c4:	5c9c      	ldrb	r4, [r3, r2]
   1a5c6:	69fb      	ldr	r3, [r7, #28]
   1a5c8:	0018      	movs	r0, r3
   1a5ca:	4b6b      	ldr	r3, [pc, #428]	; (1a778 <xQueueSemaphoreTake+0x37c>)
   1a5cc:	4798      	blx	r3
   1a5ce:	0003      	movs	r3, r0
   1a5d0:	b2db      	uxtb	r3, r3
   1a5d2:	001a      	movs	r2, r3
   1a5d4:	0021      	movs	r1, r4
   1a5d6:	0028      	movs	r0, r5
   1a5d8:	4b68      	ldr	r3, [pc, #416]	; (1a77c <xQueueSemaphoreTake+0x380>)
   1a5da:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1a5dc:	2300      	movs	r3, #0
   1a5de:	e147      	b.n	1a870 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1a5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a5e2:	2b00      	cmp	r3, #0
   1a5e4:	d106      	bne.n	1a5f4 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1a5e6:	230c      	movs	r3, #12
   1a5e8:	18fb      	adds	r3, r7, r3
   1a5ea:	0018      	movs	r0, r3
   1a5ec:	4b6a      	ldr	r3, [pc, #424]	; (1a798 <xQueueSemaphoreTake+0x39c>)
   1a5ee:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1a5f0:	2301      	movs	r3, #1
   1a5f2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1a5f4:	4b67      	ldr	r3, [pc, #412]	; (1a794 <xQueueSemaphoreTake+0x398>)
   1a5f6:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1a5f8:	4b68      	ldr	r3, [pc, #416]	; (1a79c <xQueueSemaphoreTake+0x3a0>)
   1a5fa:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1a5fc:	4b57      	ldr	r3, [pc, #348]	; (1a75c <xQueueSemaphoreTake+0x360>)
   1a5fe:	4798      	blx	r3
   1a600:	69fb      	ldr	r3, [r7, #28]
   1a602:	2244      	movs	r2, #68	; 0x44
   1a604:	5c9b      	ldrb	r3, [r3, r2]
   1a606:	b25b      	sxtb	r3, r3
   1a608:	3301      	adds	r3, #1
   1a60a:	d103      	bne.n	1a614 <xQueueSemaphoreTake+0x218>
   1a60c:	69fb      	ldr	r3, [r7, #28]
   1a60e:	2244      	movs	r2, #68	; 0x44
   1a610:	2100      	movs	r1, #0
   1a612:	5499      	strb	r1, [r3, r2]
   1a614:	69fb      	ldr	r3, [r7, #28]
   1a616:	2245      	movs	r2, #69	; 0x45
   1a618:	5c9b      	ldrb	r3, [r3, r2]
   1a61a:	b25b      	sxtb	r3, r3
   1a61c:	3301      	adds	r3, #1
   1a61e:	d103      	bne.n	1a628 <xQueueSemaphoreTake+0x22c>
   1a620:	69fb      	ldr	r3, [r7, #28]
   1a622:	2245      	movs	r2, #69	; 0x45
   1a624:	2100      	movs	r1, #0
   1a626:	5499      	strb	r1, [r3, r2]
   1a628:	4b5a      	ldr	r3, [pc, #360]	; (1a794 <xQueueSemaphoreTake+0x398>)
   1a62a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1a62c:	003a      	movs	r2, r7
   1a62e:	230c      	movs	r3, #12
   1a630:	18fb      	adds	r3, r7, r3
   1a632:	0011      	movs	r1, r2
   1a634:	0018      	movs	r0, r3
   1a636:	4b5a      	ldr	r3, [pc, #360]	; (1a7a0 <xQueueSemaphoreTake+0x3a4>)
   1a638:	4798      	blx	r3
   1a63a:	1e03      	subs	r3, r0, #0
   1a63c:	d000      	beq.n	1a640 <xQueueSemaphoreTake+0x244>
   1a63e:	e0bd      	b.n	1a7bc <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1a640:	69fb      	ldr	r3, [r7, #28]
   1a642:	0018      	movs	r0, r3
   1a644:	4b57      	ldr	r3, [pc, #348]	; (1a7a4 <xQueueSemaphoreTake+0x3a8>)
   1a646:	4798      	blx	r3
   1a648:	1e03      	subs	r3, r0, #0
   1a64a:	d100      	bne.n	1a64e <xQueueSemaphoreTake+0x252>
   1a64c:	e07c      	b.n	1a748 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1a64e:	4b44      	ldr	r3, [pc, #272]	; (1a760 <xQueueSemaphoreTake+0x364>)
   1a650:	4798      	blx	r3
   1a652:	0003      	movs	r3, r0
   1a654:	0018      	movs	r0, r3
   1a656:	4b43      	ldr	r3, [pc, #268]	; (1a764 <xQueueSemaphoreTake+0x368>)
   1a658:	4798      	blx	r3
   1a65a:	0003      	movs	r3, r0
   1a65c:	001a      	movs	r2, r3
   1a65e:	4b42      	ldr	r3, [pc, #264]	; (1a768 <xQueueSemaphoreTake+0x36c>)
   1a660:	881b      	ldrh	r3, [r3, #0]
   1a662:	4013      	ands	r3, r2
   1a664:	b29b      	uxth	r3, r3
   1a666:	2b00      	cmp	r3, #0
   1a668:	d029      	beq.n	1a6be <xQueueSemaphoreTake+0x2c2>
   1a66a:	69fb      	ldr	r3, [r7, #28]
   1a66c:	0018      	movs	r0, r3
   1a66e:	4b3f      	ldr	r3, [pc, #252]	; (1a76c <xQueueSemaphoreTake+0x370>)
   1a670:	4798      	blx	r3
   1a672:	0003      	movs	r3, r0
   1a674:	001a      	movs	r2, r3
   1a676:	4b3c      	ldr	r3, [pc, #240]	; (1a768 <xQueueSemaphoreTake+0x36c>)
   1a678:	881b      	ldrh	r3, [r3, #0]
   1a67a:	4013      	ands	r3, r2
   1a67c:	b29b      	uxth	r3, r3
   1a67e:	2b00      	cmp	r3, #0
   1a680:	d01d      	beq.n	1a6be <xQueueSemaphoreTake+0x2c2>
   1a682:	69fb      	ldr	r3, [r7, #28]
   1a684:	0018      	movs	r0, r3
   1a686:	4b3a      	ldr	r3, [pc, #232]	; (1a770 <xQueueSemaphoreTake+0x374>)
   1a688:	4798      	blx	r3
   1a68a:	0003      	movs	r3, r0
   1a68c:	001a      	movs	r2, r3
   1a68e:	4b39      	ldr	r3, [pc, #228]	; (1a774 <xQueueSemaphoreTake+0x378>)
   1a690:	5c9b      	ldrb	r3, [r3, r2]
   1a692:	3368      	adds	r3, #104	; 0x68
   1a694:	b2db      	uxtb	r3, r3
   1a696:	001d      	movs	r5, r3
   1a698:	69fb      	ldr	r3, [r7, #28]
   1a69a:	0018      	movs	r0, r3
   1a69c:	4b34      	ldr	r3, [pc, #208]	; (1a770 <xQueueSemaphoreTake+0x374>)
   1a69e:	4798      	blx	r3
   1a6a0:	0003      	movs	r3, r0
   1a6a2:	001a      	movs	r2, r3
   1a6a4:	4b33      	ldr	r3, [pc, #204]	; (1a774 <xQueueSemaphoreTake+0x378>)
   1a6a6:	5c9c      	ldrb	r4, [r3, r2]
   1a6a8:	69fb      	ldr	r3, [r7, #28]
   1a6aa:	0018      	movs	r0, r3
   1a6ac:	4b32      	ldr	r3, [pc, #200]	; (1a778 <xQueueSemaphoreTake+0x37c>)
   1a6ae:	4798      	blx	r3
   1a6b0:	0003      	movs	r3, r0
   1a6b2:	b2db      	uxtb	r3, r3
   1a6b4:	001a      	movs	r2, r3
   1a6b6:	0021      	movs	r1, r4
   1a6b8:	0028      	movs	r0, r5
   1a6ba:	4b30      	ldr	r3, [pc, #192]	; (1a77c <xQueueSemaphoreTake+0x380>)
   1a6bc:	4798      	blx	r3
   1a6be:	69fb      	ldr	r3, [r7, #28]
   1a6c0:	0018      	movs	r0, r3
   1a6c2:	4b2b      	ldr	r3, [pc, #172]	; (1a770 <xQueueSemaphoreTake+0x374>)
   1a6c4:	4798      	blx	r3
   1a6c6:	0003      	movs	r3, r0
   1a6c8:	001a      	movs	r2, r3
   1a6ca:	4b2a      	ldr	r3, [pc, #168]	; (1a774 <xQueueSemaphoreTake+0x378>)
   1a6cc:	5c9b      	ldrb	r3, [r3, r2]
   1a6ce:	2b02      	cmp	r3, #2
   1a6d0:	d018      	beq.n	1a704 <xQueueSemaphoreTake+0x308>
   1a6d2:	4b23      	ldr	r3, [pc, #140]	; (1a760 <xQueueSemaphoreTake+0x364>)
   1a6d4:	4798      	blx	r3
   1a6d6:	0003      	movs	r3, r0
   1a6d8:	0018      	movs	r0, r3
   1a6da:	4b22      	ldr	r3, [pc, #136]	; (1a764 <xQueueSemaphoreTake+0x368>)
   1a6dc:	4798      	blx	r3
   1a6de:	0003      	movs	r3, r0
   1a6e0:	001a      	movs	r2, r3
   1a6e2:	4b21      	ldr	r3, [pc, #132]	; (1a768 <xQueueSemaphoreTake+0x36c>)
   1a6e4:	881b      	ldrh	r3, [r3, #0]
   1a6e6:	4013      	ands	r3, r2
   1a6e8:	b29b      	uxth	r3, r3
   1a6ea:	2b00      	cmp	r3, #0
   1a6ec:	d00a      	beq.n	1a704 <xQueueSemaphoreTake+0x308>
   1a6ee:	4b1c      	ldr	r3, [pc, #112]	; (1a760 <xQueueSemaphoreTake+0x364>)
   1a6f0:	4798      	blx	r3
   1a6f2:	0003      	movs	r3, r0
   1a6f4:	0018      	movs	r0, r3
   1a6f6:	4b22      	ldr	r3, [pc, #136]	; (1a780 <xQueueSemaphoreTake+0x384>)
   1a6f8:	4798      	blx	r3
   1a6fa:	0003      	movs	r3, r0
   1a6fc:	b2db      	uxtb	r3, r3
   1a6fe:	0018      	movs	r0, r3
   1a700:	4b29      	ldr	r3, [pc, #164]	; (1a7a8 <xQueueSemaphoreTake+0x3ac>)
   1a702:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1a704:	69fb      	ldr	r3, [r7, #28]
   1a706:	681b      	ldr	r3, [r3, #0]
   1a708:	2b00      	cmp	r3, #0
   1a70a:	d10a      	bne.n	1a722 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1a70c:	4b13      	ldr	r3, [pc, #76]	; (1a75c <xQueueSemaphoreTake+0x360>)
   1a70e:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1a710:	69fb      	ldr	r3, [r7, #28]
   1a712:	685b      	ldr	r3, [r3, #4]
   1a714:	0018      	movs	r0, r3
   1a716:	4b25      	ldr	r3, [pc, #148]	; (1a7ac <xQueueSemaphoreTake+0x3b0>)
   1a718:	4798      	blx	r3
   1a71a:	0003      	movs	r3, r0
   1a71c:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1a71e:	4b1d      	ldr	r3, [pc, #116]	; (1a794 <xQueueSemaphoreTake+0x398>)
   1a720:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1a722:	69fb      	ldr	r3, [r7, #28]
   1a724:	3324      	adds	r3, #36	; 0x24
   1a726:	683a      	ldr	r2, [r7, #0]
   1a728:	0011      	movs	r1, r2
   1a72a:	0018      	movs	r0, r3
   1a72c:	4b20      	ldr	r3, [pc, #128]	; (1a7b0 <xQueueSemaphoreTake+0x3b4>)
   1a72e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1a730:	69fb      	ldr	r3, [r7, #28]
   1a732:	0018      	movs	r0, r3
   1a734:	4b1f      	ldr	r3, [pc, #124]	; (1a7b4 <xQueueSemaphoreTake+0x3b8>)
   1a736:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1a738:	4b1f      	ldr	r3, [pc, #124]	; (1a7b8 <xQueueSemaphoreTake+0x3bc>)
   1a73a:	4798      	blx	r3
   1a73c:	1e03      	subs	r3, r0, #0
   1a73e:	d000      	beq.n	1a742 <xQueueSemaphoreTake+0x346>
   1a740:	e680      	b.n	1a444 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1a742:	4b13      	ldr	r3, [pc, #76]	; (1a790 <xQueueSemaphoreTake+0x394>)
   1a744:	4798      	blx	r3
   1a746:	e67d      	b.n	1a444 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1a748:	69fb      	ldr	r3, [r7, #28]
   1a74a:	0018      	movs	r0, r3
   1a74c:	4b19      	ldr	r3, [pc, #100]	; (1a7b4 <xQueueSemaphoreTake+0x3b8>)
   1a74e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1a750:	4b19      	ldr	r3, [pc, #100]	; (1a7b8 <xQueueSemaphoreTake+0x3bc>)
   1a752:	4798      	blx	r3
   1a754:	e676      	b.n	1a444 <xQueueSemaphoreTake+0x48>
   1a756:	46c0      	nop			; (mov r8, r8)
   1a758:	0001be79 	.word	0x0001be79
   1a75c:	00019159 	.word	0x00019159
   1a760:	000173e9 	.word	0x000173e9
   1a764:	0001714d 	.word	0x0001714d
   1a768:	20000100 	.word	0x20000100
   1a76c:	0001720d 	.word	0x0001720d
   1a770:	0001710d 	.word	0x0001710d
   1a774:	200000f4 	.word	0x200000f4
   1a778:	000171ed 	.word	0x000171ed
   1a77c:	00017b45 	.word	0x00017b45
   1a780:	0001712d 	.word	0x0001712d
   1a784:	000181a1 	.word	0x000181a1
   1a788:	0001c345 	.word	0x0001c345
   1a78c:	0001b9e9 	.word	0x0001b9e9
   1a790:	00019141 	.word	0x00019141
   1a794:	0001917d 	.word	0x0001917d
   1a798:	0001bb29 	.word	0x0001bb29
   1a79c:	0001b411 	.word	0x0001b411
   1a7a0:	0001bb51 	.word	0x0001bb51
   1a7a4:	0001ab45 	.word	0x0001ab45
   1a7a8:	000182dd 	.word	0x000182dd
   1a7ac:	0001beb1 	.word	0x0001beb1
   1a7b0:	0001b8c5 	.word	0x0001b8c5
   1a7b4:	0001aa55 	.word	0x0001aa55
   1a7b8:	0001b429 	.word	0x0001b429
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1a7bc:	69fb      	ldr	r3, [r7, #28]
   1a7be:	0018      	movs	r0, r3
   1a7c0:	4b2d      	ldr	r3, [pc, #180]	; (1a878 <xQueueSemaphoreTake+0x47c>)
   1a7c2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1a7c4:	4b2d      	ldr	r3, [pc, #180]	; (1a87c <xQueueSemaphoreTake+0x480>)
   1a7c6:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1a7c8:	69fb      	ldr	r3, [r7, #28]
   1a7ca:	0018      	movs	r0, r3
   1a7cc:	4b2c      	ldr	r3, [pc, #176]	; (1a880 <xQueueSemaphoreTake+0x484>)
   1a7ce:	4798      	blx	r3
   1a7d0:	1e03      	subs	r3, r0, #0
   1a7d2:	d100      	bne.n	1a7d6 <xQueueSemaphoreTake+0x3da>
   1a7d4:	e636      	b.n	1a444 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1a7d6:	6a3b      	ldr	r3, [r7, #32]
   1a7d8:	2b00      	cmp	r3, #0
   1a7da:	d010      	beq.n	1a7fe <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1a7dc:	4b29      	ldr	r3, [pc, #164]	; (1a884 <xQueueSemaphoreTake+0x488>)
   1a7de:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1a7e0:	69fb      	ldr	r3, [r7, #28]
   1a7e2:	0018      	movs	r0, r3
   1a7e4:	4b28      	ldr	r3, [pc, #160]	; (1a888 <xQueueSemaphoreTake+0x48c>)
   1a7e6:	4798      	blx	r3
   1a7e8:	0003      	movs	r3, r0
   1a7ea:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1a7ec:	69fb      	ldr	r3, [r7, #28]
   1a7ee:	685b      	ldr	r3, [r3, #4]
   1a7f0:	697a      	ldr	r2, [r7, #20]
   1a7f2:	0011      	movs	r1, r2
   1a7f4:	0018      	movs	r0, r3
   1a7f6:	4b25      	ldr	r3, [pc, #148]	; (1a88c <xQueueSemaphoreTake+0x490>)
   1a7f8:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1a7fa:	4b25      	ldr	r3, [pc, #148]	; (1a890 <xQueueSemaphoreTake+0x494>)
   1a7fc:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1a7fe:	4b25      	ldr	r3, [pc, #148]	; (1a894 <xQueueSemaphoreTake+0x498>)
   1a800:	4798      	blx	r3
   1a802:	0003      	movs	r3, r0
   1a804:	0018      	movs	r0, r3
   1a806:	4b24      	ldr	r3, [pc, #144]	; (1a898 <xQueueSemaphoreTake+0x49c>)
   1a808:	4798      	blx	r3
   1a80a:	0003      	movs	r3, r0
   1a80c:	001a      	movs	r2, r3
   1a80e:	4b23      	ldr	r3, [pc, #140]	; (1a89c <xQueueSemaphoreTake+0x4a0>)
   1a810:	881b      	ldrh	r3, [r3, #0]
   1a812:	4013      	ands	r3, r2
   1a814:	b29b      	uxth	r3, r3
   1a816:	2b00      	cmp	r3, #0
   1a818:	d029      	beq.n	1a86e <xQueueSemaphoreTake+0x472>
   1a81a:	69fb      	ldr	r3, [r7, #28]
   1a81c:	0018      	movs	r0, r3
   1a81e:	4b20      	ldr	r3, [pc, #128]	; (1a8a0 <xQueueSemaphoreTake+0x4a4>)
   1a820:	4798      	blx	r3
   1a822:	0003      	movs	r3, r0
   1a824:	001a      	movs	r2, r3
   1a826:	4b1d      	ldr	r3, [pc, #116]	; (1a89c <xQueueSemaphoreTake+0x4a0>)
   1a828:	881b      	ldrh	r3, [r3, #0]
   1a82a:	4013      	ands	r3, r2
   1a82c:	b29b      	uxth	r3, r3
   1a82e:	2b00      	cmp	r3, #0
   1a830:	d01d      	beq.n	1a86e <xQueueSemaphoreTake+0x472>
   1a832:	69fb      	ldr	r3, [r7, #28]
   1a834:	0018      	movs	r0, r3
   1a836:	4b1b      	ldr	r3, [pc, #108]	; (1a8a4 <xQueueSemaphoreTake+0x4a8>)
   1a838:	4798      	blx	r3
   1a83a:	0003      	movs	r3, r0
   1a83c:	001a      	movs	r2, r3
   1a83e:	4b1a      	ldr	r3, [pc, #104]	; (1a8a8 <xQueueSemaphoreTake+0x4ac>)
   1a840:	5c9b      	ldrb	r3, [r3, r2]
   1a842:	3350      	adds	r3, #80	; 0x50
   1a844:	b2db      	uxtb	r3, r3
   1a846:	001d      	movs	r5, r3
   1a848:	69fb      	ldr	r3, [r7, #28]
   1a84a:	0018      	movs	r0, r3
   1a84c:	4b15      	ldr	r3, [pc, #84]	; (1a8a4 <xQueueSemaphoreTake+0x4a8>)
   1a84e:	4798      	blx	r3
   1a850:	0003      	movs	r3, r0
   1a852:	001a      	movs	r2, r3
   1a854:	4b14      	ldr	r3, [pc, #80]	; (1a8a8 <xQueueSemaphoreTake+0x4ac>)
   1a856:	5c9c      	ldrb	r4, [r3, r2]
   1a858:	69fb      	ldr	r3, [r7, #28]
   1a85a:	0018      	movs	r0, r3
   1a85c:	4b13      	ldr	r3, [pc, #76]	; (1a8ac <xQueueSemaphoreTake+0x4b0>)
   1a85e:	4798      	blx	r3
   1a860:	0003      	movs	r3, r0
   1a862:	b2db      	uxtb	r3, r3
   1a864:	001a      	movs	r2, r3
   1a866:	0021      	movs	r1, r4
   1a868:	0028      	movs	r0, r5
   1a86a:	4b11      	ldr	r3, [pc, #68]	; (1a8b0 <xQueueSemaphoreTake+0x4b4>)
   1a86c:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1a86e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1a870:	0018      	movs	r0, r3
   1a872:	46bd      	mov	sp, r7
   1a874:	b00a      	add	sp, #40	; 0x28
   1a876:	bdb0      	pop	{r4, r5, r7, pc}
   1a878:	0001aa55 	.word	0x0001aa55
   1a87c:	0001b429 	.word	0x0001b429
   1a880:	0001ab45 	.word	0x0001ab45
   1a884:	00019159 	.word	0x00019159
   1a888:	0001a8f7 	.word	0x0001a8f7
   1a88c:	0001c1a9 	.word	0x0001c1a9
   1a890:	0001917d 	.word	0x0001917d
   1a894:	000173e9 	.word	0x000173e9
   1a898:	0001714d 	.word	0x0001714d
   1a89c:	20000100 	.word	0x20000100
   1a8a0:	0001720d 	.word	0x0001720d
   1a8a4:	0001710d 	.word	0x0001710d
   1a8a8:	200000f4 	.word	0x200000f4
   1a8ac:	000171ed 	.word	0x000171ed
   1a8b0:	00017b45 	.word	0x00017b45

0001a8b4 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1a8b4:	b580      	push	{r7, lr}
   1a8b6:	b082      	sub	sp, #8
   1a8b8:	af00      	add	r7, sp, #0
   1a8ba:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1a8bc:	687b      	ldr	r3, [r7, #4]
   1a8be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1a8c0:	0018      	movs	r0, r3
   1a8c2:	46bd      	mov	sp, r7
   1a8c4:	b002      	add	sp, #8
   1a8c6:	bd80      	pop	{r7, pc}

0001a8c8 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1a8c8:	b580      	push	{r7, lr}
   1a8ca:	b082      	sub	sp, #8
   1a8cc:	af00      	add	r7, sp, #0
   1a8ce:	6078      	str	r0, [r7, #4]
   1a8d0:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1a8d2:	687b      	ldr	r3, [r7, #4]
   1a8d4:	683a      	ldr	r2, [r7, #0]
   1a8d6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1a8d8:	46c0      	nop			; (mov r8, r8)
   1a8da:	46bd      	mov	sp, r7
   1a8dc:	b002      	add	sp, #8
   1a8de:	bd80      	pop	{r7, pc}

0001a8e0 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1a8e0:	b580      	push	{r7, lr}
   1a8e2:	b082      	sub	sp, #8
   1a8e4:	af00      	add	r7, sp, #0
   1a8e6:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1a8e8:	687b      	ldr	r3, [r7, #4]
   1a8ea:	2250      	movs	r2, #80	; 0x50
   1a8ec:	5c9b      	ldrb	r3, [r3, r2]
	}
   1a8ee:	0018      	movs	r0, r3
   1a8f0:	46bd      	mov	sp, r7
   1a8f2:	b002      	add	sp, #8
   1a8f4:	bd80      	pop	{r7, pc}

0001a8f6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1a8f6:	b580      	push	{r7, lr}
   1a8f8:	b084      	sub	sp, #16
   1a8fa:	af00      	add	r7, sp, #0
   1a8fc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1a8fe:	687b      	ldr	r3, [r7, #4]
   1a900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a902:	2b00      	cmp	r3, #0
   1a904:	d006      	beq.n	1a914 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1a906:	687b      	ldr	r3, [r7, #4]
   1a908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a90a:	681b      	ldr	r3, [r3, #0]
   1a90c:	2205      	movs	r2, #5
   1a90e:	1ad3      	subs	r3, r2, r3
   1a910:	60fb      	str	r3, [r7, #12]
   1a912:	e001      	b.n	1a918 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1a914:	2300      	movs	r3, #0
   1a916:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1a918:	68fb      	ldr	r3, [r7, #12]
	}
   1a91a:	0018      	movs	r0, r3
   1a91c:	46bd      	mov	sp, r7
   1a91e:	b004      	add	sp, #16
   1a920:	bd80      	pop	{r7, pc}
	...

0001a924 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1a924:	b580      	push	{r7, lr}
   1a926:	b086      	sub	sp, #24
   1a928:	af00      	add	r7, sp, #0
   1a92a:	60f8      	str	r0, [r7, #12]
   1a92c:	60b9      	str	r1, [r7, #8]
   1a92e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1a930:	2300      	movs	r3, #0
   1a932:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1a934:	68fb      	ldr	r3, [r7, #12]
   1a936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a938:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1a93a:	68fb      	ldr	r3, [r7, #12]
   1a93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a93e:	2b00      	cmp	r3, #0
   1a940:	d10e      	bne.n	1a960 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1a942:	68fb      	ldr	r3, [r7, #12]
   1a944:	681b      	ldr	r3, [r3, #0]
   1a946:	2b00      	cmp	r3, #0
   1a948:	d14e      	bne.n	1a9e8 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1a94a:	68fb      	ldr	r3, [r7, #12]
   1a94c:	685b      	ldr	r3, [r3, #4]
   1a94e:	0018      	movs	r0, r3
   1a950:	4b2a      	ldr	r3, [pc, #168]	; (1a9fc <prvCopyDataToQueue+0xd8>)
   1a952:	4798      	blx	r3
   1a954:	0003      	movs	r3, r0
   1a956:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1a958:	68fb      	ldr	r3, [r7, #12]
   1a95a:	2200      	movs	r2, #0
   1a95c:	605a      	str	r2, [r3, #4]
   1a95e:	e043      	b.n	1a9e8 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1a960:	687b      	ldr	r3, [r7, #4]
   1a962:	2b00      	cmp	r3, #0
   1a964:	d119      	bne.n	1a99a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1a966:	68fb      	ldr	r3, [r7, #12]
   1a968:	6898      	ldr	r0, [r3, #8]
   1a96a:	68fb      	ldr	r3, [r7, #12]
   1a96c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1a96e:	68bb      	ldr	r3, [r7, #8]
   1a970:	0019      	movs	r1, r3
   1a972:	4b23      	ldr	r3, [pc, #140]	; (1aa00 <prvCopyDataToQueue+0xdc>)
   1a974:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1a976:	68fb      	ldr	r3, [r7, #12]
   1a978:	689a      	ldr	r2, [r3, #8]
   1a97a:	68fb      	ldr	r3, [r7, #12]
   1a97c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a97e:	18d2      	adds	r2, r2, r3
   1a980:	68fb      	ldr	r3, [r7, #12]
   1a982:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1a984:	68fb      	ldr	r3, [r7, #12]
   1a986:	689a      	ldr	r2, [r3, #8]
   1a988:	68fb      	ldr	r3, [r7, #12]
   1a98a:	685b      	ldr	r3, [r3, #4]
   1a98c:	429a      	cmp	r2, r3
   1a98e:	d32b      	bcc.n	1a9e8 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1a990:	68fb      	ldr	r3, [r7, #12]
   1a992:	681a      	ldr	r2, [r3, #0]
   1a994:	68fb      	ldr	r3, [r7, #12]
   1a996:	609a      	str	r2, [r3, #8]
   1a998:	e026      	b.n	1a9e8 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1a99a:	68fb      	ldr	r3, [r7, #12]
   1a99c:	68d8      	ldr	r0, [r3, #12]
   1a99e:	68fb      	ldr	r3, [r7, #12]
   1a9a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1a9a2:	68bb      	ldr	r3, [r7, #8]
   1a9a4:	0019      	movs	r1, r3
   1a9a6:	4b16      	ldr	r3, [pc, #88]	; (1aa00 <prvCopyDataToQueue+0xdc>)
   1a9a8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1a9aa:	68fb      	ldr	r3, [r7, #12]
   1a9ac:	68da      	ldr	r2, [r3, #12]
   1a9ae:	68fb      	ldr	r3, [r7, #12]
   1a9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a9b2:	425b      	negs	r3, r3
   1a9b4:	18d2      	adds	r2, r2, r3
   1a9b6:	68fb      	ldr	r3, [r7, #12]
   1a9b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1a9ba:	68fb      	ldr	r3, [r7, #12]
   1a9bc:	68da      	ldr	r2, [r3, #12]
   1a9be:	68fb      	ldr	r3, [r7, #12]
   1a9c0:	681b      	ldr	r3, [r3, #0]
   1a9c2:	429a      	cmp	r2, r3
   1a9c4:	d207      	bcs.n	1a9d6 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1a9c6:	68fb      	ldr	r3, [r7, #12]
   1a9c8:	685a      	ldr	r2, [r3, #4]
   1a9ca:	68fb      	ldr	r3, [r7, #12]
   1a9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a9ce:	425b      	negs	r3, r3
   1a9d0:	18d2      	adds	r2, r2, r3
   1a9d2:	68fb      	ldr	r3, [r7, #12]
   1a9d4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1a9d6:	687b      	ldr	r3, [r7, #4]
   1a9d8:	2b02      	cmp	r3, #2
   1a9da:	d105      	bne.n	1a9e8 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1a9dc:	693b      	ldr	r3, [r7, #16]
   1a9de:	2b00      	cmp	r3, #0
   1a9e0:	d002      	beq.n	1a9e8 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1a9e2:	693b      	ldr	r3, [r7, #16]
   1a9e4:	3b01      	subs	r3, #1
   1a9e6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1a9e8:	693b      	ldr	r3, [r7, #16]
   1a9ea:	1c5a      	adds	r2, r3, #1
   1a9ec:	68fb      	ldr	r3, [r7, #12]
   1a9ee:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1a9f0:	697b      	ldr	r3, [r7, #20]
}
   1a9f2:	0018      	movs	r0, r3
   1a9f4:	46bd      	mov	sp, r7
   1a9f6:	b006      	add	sp, #24
   1a9f8:	bd80      	pop	{r7, pc}
   1a9fa:	46c0      	nop			; (mov r8, r8)
   1a9fc:	0001c041 	.word	0x0001c041
   1aa00:	00034549 	.word	0x00034549

0001aa04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1aa04:	b580      	push	{r7, lr}
   1aa06:	b082      	sub	sp, #8
   1aa08:	af00      	add	r7, sp, #0
   1aa0a:	6078      	str	r0, [r7, #4]
   1aa0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1aa0e:	687b      	ldr	r3, [r7, #4]
   1aa10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1aa12:	2b00      	cmp	r3, #0
   1aa14:	d018      	beq.n	1aa48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1aa16:	687b      	ldr	r3, [r7, #4]
   1aa18:	68da      	ldr	r2, [r3, #12]
   1aa1a:	687b      	ldr	r3, [r7, #4]
   1aa1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1aa1e:	18d2      	adds	r2, r2, r3
   1aa20:	687b      	ldr	r3, [r7, #4]
   1aa22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1aa24:	687b      	ldr	r3, [r7, #4]
   1aa26:	68da      	ldr	r2, [r3, #12]
   1aa28:	687b      	ldr	r3, [r7, #4]
   1aa2a:	685b      	ldr	r3, [r3, #4]
   1aa2c:	429a      	cmp	r2, r3
   1aa2e:	d303      	bcc.n	1aa38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1aa30:	687b      	ldr	r3, [r7, #4]
   1aa32:	681a      	ldr	r2, [r3, #0]
   1aa34:	687b      	ldr	r3, [r7, #4]
   1aa36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1aa38:	687b      	ldr	r3, [r7, #4]
   1aa3a:	68d9      	ldr	r1, [r3, #12]
   1aa3c:	687b      	ldr	r3, [r7, #4]
   1aa3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1aa40:	683b      	ldr	r3, [r7, #0]
   1aa42:	0018      	movs	r0, r3
   1aa44:	4b02      	ldr	r3, [pc, #8]	; (1aa50 <prvCopyDataFromQueue+0x4c>)
   1aa46:	4798      	blx	r3
	}
}
   1aa48:	46c0      	nop			; (mov r8, r8)
   1aa4a:	46bd      	mov	sp, r7
   1aa4c:	b002      	add	sp, #8
   1aa4e:	bd80      	pop	{r7, pc}
   1aa50:	00034549 	.word	0x00034549

0001aa54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1aa54:	b580      	push	{r7, lr}
   1aa56:	b084      	sub	sp, #16
   1aa58:	af00      	add	r7, sp, #0
   1aa5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1aa5c:	4b34      	ldr	r3, [pc, #208]	; (1ab30 <prvUnlockQueue+0xdc>)
   1aa5e:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1aa60:	230f      	movs	r3, #15
   1aa62:	18fb      	adds	r3, r7, r3
   1aa64:	687a      	ldr	r2, [r7, #4]
   1aa66:	2145      	movs	r1, #69	; 0x45
   1aa68:	5c52      	ldrb	r2, [r2, r1]
   1aa6a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1aa6c:	e022      	b.n	1aab4 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1aa6e:	687b      	ldr	r3, [r7, #4]
   1aa70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1aa72:	2b00      	cmp	r3, #0
   1aa74:	d009      	beq.n	1aa8a <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1aa76:	687b      	ldr	r3, [r7, #4]
   1aa78:	2100      	movs	r1, #0
   1aa7a:	0018      	movs	r0, r3
   1aa7c:	4b2d      	ldr	r3, [pc, #180]	; (1ab34 <prvUnlockQueue+0xe0>)
   1aa7e:	4798      	blx	r3
   1aa80:	1e03      	subs	r3, r0, #0
   1aa82:	d00f      	beq.n	1aaa4 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1aa84:	4b2c      	ldr	r3, [pc, #176]	; (1ab38 <prvUnlockQueue+0xe4>)
   1aa86:	4798      	blx	r3
   1aa88:	e00c      	b.n	1aaa4 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1aa8a:	687b      	ldr	r3, [r7, #4]
   1aa8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1aa8e:	2b00      	cmp	r3, #0
   1aa90:	d017      	beq.n	1aac2 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1aa92:	687b      	ldr	r3, [r7, #4]
   1aa94:	3324      	adds	r3, #36	; 0x24
   1aa96:	0018      	movs	r0, r3
   1aa98:	4b28      	ldr	r3, [pc, #160]	; (1ab3c <prvUnlockQueue+0xe8>)
   1aa9a:	4798      	blx	r3
   1aa9c:	1e03      	subs	r3, r0, #0
   1aa9e:	d001      	beq.n	1aaa4 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1aaa0:	4b25      	ldr	r3, [pc, #148]	; (1ab38 <prvUnlockQueue+0xe4>)
   1aaa2:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1aaa4:	230f      	movs	r3, #15
   1aaa6:	18fb      	adds	r3, r7, r3
   1aaa8:	781b      	ldrb	r3, [r3, #0]
   1aaaa:	3b01      	subs	r3, #1
   1aaac:	b2da      	uxtb	r2, r3
   1aaae:	230f      	movs	r3, #15
   1aab0:	18fb      	adds	r3, r7, r3
   1aab2:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1aab4:	230f      	movs	r3, #15
   1aab6:	18fb      	adds	r3, r7, r3
   1aab8:	781b      	ldrb	r3, [r3, #0]
   1aaba:	b25b      	sxtb	r3, r3
   1aabc:	2b00      	cmp	r3, #0
   1aabe:	dcd6      	bgt.n	1aa6e <prvUnlockQueue+0x1a>
   1aac0:	e000      	b.n	1aac4 <prvUnlockQueue+0x70>
						break;
   1aac2:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1aac4:	687b      	ldr	r3, [r7, #4]
   1aac6:	2245      	movs	r2, #69	; 0x45
   1aac8:	21ff      	movs	r1, #255	; 0xff
   1aaca:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1aacc:	4b1c      	ldr	r3, [pc, #112]	; (1ab40 <prvUnlockQueue+0xec>)
   1aace:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1aad0:	4b17      	ldr	r3, [pc, #92]	; (1ab30 <prvUnlockQueue+0xdc>)
   1aad2:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1aad4:	230e      	movs	r3, #14
   1aad6:	18fb      	adds	r3, r7, r3
   1aad8:	687a      	ldr	r2, [r7, #4]
   1aada:	2144      	movs	r1, #68	; 0x44
   1aadc:	5c52      	ldrb	r2, [r2, r1]
   1aade:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1aae0:	e014      	b.n	1ab0c <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1aae2:	687b      	ldr	r3, [r7, #4]
   1aae4:	691b      	ldr	r3, [r3, #16]
   1aae6:	2b00      	cmp	r3, #0
   1aae8:	d017      	beq.n	1ab1a <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1aaea:	687b      	ldr	r3, [r7, #4]
   1aaec:	3310      	adds	r3, #16
   1aaee:	0018      	movs	r0, r3
   1aaf0:	4b12      	ldr	r3, [pc, #72]	; (1ab3c <prvUnlockQueue+0xe8>)
   1aaf2:	4798      	blx	r3
   1aaf4:	1e03      	subs	r3, r0, #0
   1aaf6:	d001      	beq.n	1aafc <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1aaf8:	4b0f      	ldr	r3, [pc, #60]	; (1ab38 <prvUnlockQueue+0xe4>)
   1aafa:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1aafc:	230e      	movs	r3, #14
   1aafe:	18fb      	adds	r3, r7, r3
   1ab00:	781b      	ldrb	r3, [r3, #0]
   1ab02:	3b01      	subs	r3, #1
   1ab04:	b2da      	uxtb	r2, r3
   1ab06:	230e      	movs	r3, #14
   1ab08:	18fb      	adds	r3, r7, r3
   1ab0a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1ab0c:	230e      	movs	r3, #14
   1ab0e:	18fb      	adds	r3, r7, r3
   1ab10:	781b      	ldrb	r3, [r3, #0]
   1ab12:	b25b      	sxtb	r3, r3
   1ab14:	2b00      	cmp	r3, #0
   1ab16:	dce4      	bgt.n	1aae2 <prvUnlockQueue+0x8e>
   1ab18:	e000      	b.n	1ab1c <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1ab1a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1ab1c:	687b      	ldr	r3, [r7, #4]
   1ab1e:	2244      	movs	r2, #68	; 0x44
   1ab20:	21ff      	movs	r1, #255	; 0xff
   1ab22:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1ab24:	4b06      	ldr	r3, [pc, #24]	; (1ab40 <prvUnlockQueue+0xec>)
   1ab26:	4798      	blx	r3
}
   1ab28:	46c0      	nop			; (mov r8, r8)
   1ab2a:	46bd      	mov	sp, r7
   1ab2c:	b004      	add	sp, #16
   1ab2e:	bd80      	pop	{r7, pc}
   1ab30:	00019159 	.word	0x00019159
   1ab34:	0001ac29 	.word	0x0001ac29
   1ab38:	0001bbfd 	.word	0x0001bbfd
   1ab3c:	0001b9e9 	.word	0x0001b9e9
   1ab40:	0001917d 	.word	0x0001917d

0001ab44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1ab44:	b580      	push	{r7, lr}
   1ab46:	b084      	sub	sp, #16
   1ab48:	af00      	add	r7, sp, #0
   1ab4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1ab4c:	4b08      	ldr	r3, [pc, #32]	; (1ab70 <prvIsQueueEmpty+0x2c>)
   1ab4e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1ab50:	687b      	ldr	r3, [r7, #4]
   1ab52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ab54:	2b00      	cmp	r3, #0
   1ab56:	d102      	bne.n	1ab5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1ab58:	2301      	movs	r3, #1
   1ab5a:	60fb      	str	r3, [r7, #12]
   1ab5c:	e001      	b.n	1ab62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1ab5e:	2300      	movs	r3, #0
   1ab60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1ab62:	4b04      	ldr	r3, [pc, #16]	; (1ab74 <prvIsQueueEmpty+0x30>)
   1ab64:	4798      	blx	r3

	return xReturn;
   1ab66:	68fb      	ldr	r3, [r7, #12]
}
   1ab68:	0018      	movs	r0, r3
   1ab6a:	46bd      	mov	sp, r7
   1ab6c:	b004      	add	sp, #16
   1ab6e:	bd80      	pop	{r7, pc}
   1ab70:	00019159 	.word	0x00019159
   1ab74:	0001917d 	.word	0x0001917d

0001ab78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1ab78:	b580      	push	{r7, lr}
   1ab7a:	b084      	sub	sp, #16
   1ab7c:	af00      	add	r7, sp, #0
   1ab7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1ab80:	4b09      	ldr	r3, [pc, #36]	; (1aba8 <prvIsQueueFull+0x30>)
   1ab82:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1ab84:	687b      	ldr	r3, [r7, #4]
   1ab86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1ab88:	687b      	ldr	r3, [r7, #4]
   1ab8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ab8c:	429a      	cmp	r2, r3
   1ab8e:	d102      	bne.n	1ab96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1ab90:	2301      	movs	r3, #1
   1ab92:	60fb      	str	r3, [r7, #12]
   1ab94:	e001      	b.n	1ab9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1ab96:	2300      	movs	r3, #0
   1ab98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1ab9a:	4b04      	ldr	r3, [pc, #16]	; (1abac <prvIsQueueFull+0x34>)
   1ab9c:	4798      	blx	r3

	return xReturn;
   1ab9e:	68fb      	ldr	r3, [r7, #12]
}
   1aba0:	0018      	movs	r0, r3
   1aba2:	46bd      	mov	sp, r7
   1aba4:	b004      	add	sp, #16
   1aba6:	bd80      	pop	{r7, pc}
   1aba8:	00019159 	.word	0x00019159
   1abac:	0001917d 	.word	0x0001917d

0001abb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1abb0:	b580      	push	{r7, lr}
   1abb2:	b086      	sub	sp, #24
   1abb4:	af00      	add	r7, sp, #0
   1abb6:	60f8      	str	r0, [r7, #12]
   1abb8:	60b9      	str	r1, [r7, #8]
   1abba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1abbc:	68fb      	ldr	r3, [r7, #12]
   1abbe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1abc0:	4b15      	ldr	r3, [pc, #84]	; (1ac18 <vQueueWaitForMessageRestricted+0x68>)
   1abc2:	4798      	blx	r3
   1abc4:	697b      	ldr	r3, [r7, #20]
   1abc6:	2244      	movs	r2, #68	; 0x44
   1abc8:	5c9b      	ldrb	r3, [r3, r2]
   1abca:	b25b      	sxtb	r3, r3
   1abcc:	3301      	adds	r3, #1
   1abce:	d103      	bne.n	1abd8 <vQueueWaitForMessageRestricted+0x28>
   1abd0:	697b      	ldr	r3, [r7, #20]
   1abd2:	2244      	movs	r2, #68	; 0x44
   1abd4:	2100      	movs	r1, #0
   1abd6:	5499      	strb	r1, [r3, r2]
   1abd8:	697b      	ldr	r3, [r7, #20]
   1abda:	2245      	movs	r2, #69	; 0x45
   1abdc:	5c9b      	ldrb	r3, [r3, r2]
   1abde:	b25b      	sxtb	r3, r3
   1abe0:	3301      	adds	r3, #1
   1abe2:	d103      	bne.n	1abec <vQueueWaitForMessageRestricted+0x3c>
   1abe4:	697b      	ldr	r3, [r7, #20]
   1abe6:	2245      	movs	r2, #69	; 0x45
   1abe8:	2100      	movs	r1, #0
   1abea:	5499      	strb	r1, [r3, r2]
   1abec:	4b0b      	ldr	r3, [pc, #44]	; (1ac1c <vQueueWaitForMessageRestricted+0x6c>)
   1abee:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1abf0:	697b      	ldr	r3, [r7, #20]
   1abf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1abf4:	2b00      	cmp	r3, #0
   1abf6:	d106      	bne.n	1ac06 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1abf8:	697b      	ldr	r3, [r7, #20]
   1abfa:	3324      	adds	r3, #36	; 0x24
   1abfc:	687a      	ldr	r2, [r7, #4]
   1abfe:	68b9      	ldr	r1, [r7, #8]
   1ac00:	0018      	movs	r0, r3
   1ac02:	4b07      	ldr	r3, [pc, #28]	; (1ac20 <vQueueWaitForMessageRestricted+0x70>)
   1ac04:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1ac06:	697b      	ldr	r3, [r7, #20]
   1ac08:	0018      	movs	r0, r3
   1ac0a:	4b06      	ldr	r3, [pc, #24]	; (1ac24 <vQueueWaitForMessageRestricted+0x74>)
   1ac0c:	4798      	blx	r3
	}
   1ac0e:	46c0      	nop			; (mov r8, r8)
   1ac10:	46bd      	mov	sp, r7
   1ac12:	b006      	add	sp, #24
   1ac14:	bd80      	pop	{r7, pc}
   1ac16:	46c0      	nop			; (mov r8, r8)
   1ac18:	00019159 	.word	0x00019159
   1ac1c:	0001917d 	.word	0x0001917d
   1ac20:	0001b909 	.word	0x0001b909
   1ac24:	0001aa55 	.word	0x0001aa55

0001ac28 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1ac28:	b5b0      	push	{r4, r5, r7, lr}
   1ac2a:	b086      	sub	sp, #24
   1ac2c:	af00      	add	r7, sp, #0
   1ac2e:	6078      	str	r0, [r7, #4]
   1ac30:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1ac32:	687b      	ldr	r3, [r7, #4]
   1ac34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ac36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1ac38:	2300      	movs	r3, #0
   1ac3a:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1ac3c:	693b      	ldr	r3, [r7, #16]
   1ac3e:	2b00      	cmp	r3, #0
   1ac40:	d101      	bne.n	1ac46 <prvNotifyQueueSetContainer+0x1e>
   1ac42:	b672      	cpsid	i
   1ac44:	e7fe      	b.n	1ac44 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1ac46:	693b      	ldr	r3, [r7, #16]
   1ac48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1ac4a:	693b      	ldr	r3, [r7, #16]
   1ac4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ac4e:	429a      	cmp	r2, r3
   1ac50:	d301      	bcc.n	1ac56 <prvNotifyQueueSetContainer+0x2e>
   1ac52:	b672      	cpsid	i
   1ac54:	e7fe      	b.n	1ac54 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1ac56:	693b      	ldr	r3, [r7, #16]
   1ac58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1ac5a:	693b      	ldr	r3, [r7, #16]
   1ac5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ac5e:	429a      	cmp	r2, r3
   1ac60:	d300      	bcc.n	1ac64 <prvNotifyQueueSetContainer+0x3c>
   1ac62:	e08b      	b.n	1ad7c <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1ac64:	230f      	movs	r3, #15
   1ac66:	18fb      	adds	r3, r7, r3
   1ac68:	693a      	ldr	r2, [r7, #16]
   1ac6a:	2145      	movs	r1, #69	; 0x45
   1ac6c:	5c52      	ldrb	r2, [r2, r1]
   1ac6e:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1ac70:	4b45      	ldr	r3, [pc, #276]	; (1ad88 <prvNotifyQueueSetContainer+0x160>)
   1ac72:	4798      	blx	r3
   1ac74:	0003      	movs	r3, r0
   1ac76:	0018      	movs	r0, r3
   1ac78:	4b44      	ldr	r3, [pc, #272]	; (1ad8c <prvNotifyQueueSetContainer+0x164>)
   1ac7a:	4798      	blx	r3
   1ac7c:	0003      	movs	r3, r0
   1ac7e:	001a      	movs	r2, r3
   1ac80:	4b43      	ldr	r3, [pc, #268]	; (1ad90 <prvNotifyQueueSetContainer+0x168>)
   1ac82:	881b      	ldrh	r3, [r3, #0]
   1ac84:	4013      	ands	r3, r2
   1ac86:	b29b      	uxth	r3, r3
   1ac88:	2b00      	cmp	r3, #0
   1ac8a:	d02e      	beq.n	1acea <prvNotifyQueueSetContainer+0xc2>
   1ac8c:	693b      	ldr	r3, [r7, #16]
   1ac8e:	0018      	movs	r0, r3
   1ac90:	4b40      	ldr	r3, [pc, #256]	; (1ad94 <prvNotifyQueueSetContainer+0x16c>)
   1ac92:	4798      	blx	r3
   1ac94:	0003      	movs	r3, r0
   1ac96:	001a      	movs	r2, r3
   1ac98:	4b3d      	ldr	r3, [pc, #244]	; (1ad90 <prvNotifyQueueSetContainer+0x168>)
   1ac9a:	881b      	ldrh	r3, [r3, #0]
   1ac9c:	4013      	ands	r3, r2
   1ac9e:	b29b      	uxth	r3, r3
   1aca0:	2b00      	cmp	r3, #0
   1aca2:	d022      	beq.n	1acea <prvNotifyQueueSetContainer+0xc2>
   1aca4:	683b      	ldr	r3, [r7, #0]
   1aca6:	2b00      	cmp	r3, #0
   1aca8:	d10b      	bne.n	1acc2 <prvNotifyQueueSetContainer+0x9a>
   1acaa:	693b      	ldr	r3, [r7, #16]
   1acac:	0018      	movs	r0, r3
   1acae:	4b3a      	ldr	r3, [pc, #232]	; (1ad98 <prvNotifyQueueSetContainer+0x170>)
   1acb0:	4798      	blx	r3
   1acb2:	0003      	movs	r3, r0
   1acb4:	001a      	movs	r2, r3
   1acb6:	4b39      	ldr	r3, [pc, #228]	; (1ad9c <prvNotifyQueueSetContainer+0x174>)
   1acb8:	5c9b      	ldrb	r3, [r3, r2]
   1acba:	3320      	adds	r3, #32
   1acbc:	b2db      	uxtb	r3, r3
   1acbe:	001d      	movs	r5, r3
   1acc0:	e000      	b.n	1acc4 <prvNotifyQueueSetContainer+0x9c>
   1acc2:	2525      	movs	r5, #37	; 0x25
   1acc4:	693b      	ldr	r3, [r7, #16]
   1acc6:	0018      	movs	r0, r3
   1acc8:	4b33      	ldr	r3, [pc, #204]	; (1ad98 <prvNotifyQueueSetContainer+0x170>)
   1acca:	4798      	blx	r3
   1accc:	0003      	movs	r3, r0
   1acce:	001a      	movs	r2, r3
   1acd0:	4b32      	ldr	r3, [pc, #200]	; (1ad9c <prvNotifyQueueSetContainer+0x174>)
   1acd2:	5c9c      	ldrb	r4, [r3, r2]
   1acd4:	693b      	ldr	r3, [r7, #16]
   1acd6:	0018      	movs	r0, r3
   1acd8:	4b31      	ldr	r3, [pc, #196]	; (1ada0 <prvNotifyQueueSetContainer+0x178>)
   1acda:	4798      	blx	r3
   1acdc:	0003      	movs	r3, r0
   1acde:	b2db      	uxtb	r3, r3
   1ace0:	001a      	movs	r2, r3
   1ace2:	0021      	movs	r1, r4
   1ace4:	0028      	movs	r0, r5
   1ace6:	4b2f      	ldr	r3, [pc, #188]	; (1ada4 <prvNotifyQueueSetContainer+0x17c>)
   1ace8:	4798      	blx	r3
   1acea:	693b      	ldr	r3, [r7, #16]
   1acec:	0018      	movs	r0, r3
   1acee:	4b2a      	ldr	r3, [pc, #168]	; (1ad98 <prvNotifyQueueSetContainer+0x170>)
   1acf0:	4798      	blx	r3
   1acf2:	0003      	movs	r3, r0
   1acf4:	001a      	movs	r2, r3
   1acf6:	4b29      	ldr	r3, [pc, #164]	; (1ad9c <prvNotifyQueueSetContainer+0x174>)
   1acf8:	5c9c      	ldrb	r4, [r3, r2]
   1acfa:	693b      	ldr	r3, [r7, #16]
   1acfc:	0018      	movs	r0, r3
   1acfe:	4b28      	ldr	r3, [pc, #160]	; (1ada0 <prvNotifyQueueSetContainer+0x178>)
   1ad00:	4798      	blx	r3
   1ad02:	0003      	movs	r3, r0
   1ad04:	b2dd      	uxtb	r5, r3
   1ad06:	693b      	ldr	r3, [r7, #16]
   1ad08:	0018      	movs	r0, r3
   1ad0a:	4b23      	ldr	r3, [pc, #140]	; (1ad98 <prvNotifyQueueSetContainer+0x170>)
   1ad0c:	4798      	blx	r3
   1ad0e:	0003      	movs	r3, r0
   1ad10:	001a      	movs	r2, r3
   1ad12:	4b22      	ldr	r3, [pc, #136]	; (1ad9c <prvNotifyQueueSetContainer+0x174>)
   1ad14:	5c9b      	ldrb	r3, [r3, r2]
   1ad16:	2b02      	cmp	r3, #2
   1ad18:	d005      	beq.n	1ad26 <prvNotifyQueueSetContainer+0xfe>
   1ad1a:	693b      	ldr	r3, [r7, #16]
   1ad1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ad1e:	b2db      	uxtb	r3, r3
   1ad20:	3301      	adds	r3, #1
   1ad22:	b2db      	uxtb	r3, r3
   1ad24:	e000      	b.n	1ad28 <prvNotifyQueueSetContainer+0x100>
   1ad26:	2300      	movs	r3, #0
   1ad28:	001a      	movs	r2, r3
   1ad2a:	0029      	movs	r1, r5
   1ad2c:	0020      	movs	r0, r4
   1ad2e:	4b1e      	ldr	r3, [pc, #120]	; (1ada8 <prvNotifyQueueSetContainer+0x180>)
   1ad30:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1ad32:	683a      	ldr	r2, [r7, #0]
   1ad34:	1d39      	adds	r1, r7, #4
   1ad36:	693b      	ldr	r3, [r7, #16]
   1ad38:	0018      	movs	r0, r3
   1ad3a:	4b1c      	ldr	r3, [pc, #112]	; (1adac <prvNotifyQueueSetContainer+0x184>)
   1ad3c:	4798      	blx	r3
   1ad3e:	0003      	movs	r3, r0
   1ad40:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1ad42:	230f      	movs	r3, #15
   1ad44:	18fb      	adds	r3, r7, r3
   1ad46:	781b      	ldrb	r3, [r3, #0]
   1ad48:	b25b      	sxtb	r3, r3
   1ad4a:	3301      	adds	r3, #1
   1ad4c:	d10d      	bne.n	1ad6a <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1ad4e:	693b      	ldr	r3, [r7, #16]
   1ad50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ad52:	2b00      	cmp	r3, #0
   1ad54:	d012      	beq.n	1ad7c <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1ad56:	693b      	ldr	r3, [r7, #16]
   1ad58:	3324      	adds	r3, #36	; 0x24
   1ad5a:	0018      	movs	r0, r3
   1ad5c:	4b14      	ldr	r3, [pc, #80]	; (1adb0 <prvNotifyQueueSetContainer+0x188>)
   1ad5e:	4798      	blx	r3
   1ad60:	1e03      	subs	r3, r0, #0
   1ad62:	d00b      	beq.n	1ad7c <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1ad64:	2301      	movs	r3, #1
   1ad66:	617b      	str	r3, [r7, #20]
   1ad68:	e008      	b.n	1ad7c <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1ad6a:	230f      	movs	r3, #15
   1ad6c:	18fb      	adds	r3, r7, r3
   1ad6e:	781b      	ldrb	r3, [r3, #0]
   1ad70:	3301      	adds	r3, #1
   1ad72:	b2db      	uxtb	r3, r3
   1ad74:	b259      	sxtb	r1, r3
   1ad76:	693b      	ldr	r3, [r7, #16]
   1ad78:	2245      	movs	r2, #69	; 0x45
   1ad7a:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1ad7c:	697b      	ldr	r3, [r7, #20]
	}
   1ad7e:	0018      	movs	r0, r3
   1ad80:	46bd      	mov	sp, r7
   1ad82:	b006      	add	sp, #24
   1ad84:	bdb0      	pop	{r4, r5, r7, pc}
   1ad86:	46c0      	nop			; (mov r8, r8)
   1ad88:	000173e9 	.word	0x000173e9
   1ad8c:	0001714d 	.word	0x0001714d
   1ad90:	20000100 	.word	0x20000100
   1ad94:	0001720d 	.word	0x0001720d
   1ad98:	0001710d 	.word	0x0001710d
   1ad9c:	200000f4 	.word	0x200000f4
   1ada0:	000171ed 	.word	0x000171ed
   1ada4:	00017b45 	.word	0x00017b45
   1ada8:	000181a1 	.word	0x000181a1
   1adac:	0001a925 	.word	0x0001a925
   1adb0:	0001b9e9 	.word	0x0001b9e9

0001adb4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1adb4:	b590      	push	{r4, r7, lr}
   1adb6:	b08d      	sub	sp, #52	; 0x34
   1adb8:	af04      	add	r7, sp, #16
   1adba:	60f8      	str	r0, [r7, #12]
   1adbc:	60b9      	str	r1, [r7, #8]
   1adbe:	603b      	str	r3, [r7, #0]
   1adc0:	1dbb      	adds	r3, r7, #6
   1adc2:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1adc4:	1dbb      	adds	r3, r7, #6
   1adc6:	881b      	ldrh	r3, [r3, #0]
   1adc8:	009b      	lsls	r3, r3, #2
   1adca:	0018      	movs	r0, r3
   1adcc:	4b1d      	ldr	r3, [pc, #116]	; (1ae44 <xTaskCreate+0x90>)
   1adce:	4798      	blx	r3
   1add0:	0003      	movs	r3, r0
   1add2:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1add4:	697b      	ldr	r3, [r7, #20]
   1add6:	2b00      	cmp	r3, #0
   1add8:	d010      	beq.n	1adfc <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1adda:	2054      	movs	r0, #84	; 0x54
   1addc:	4b19      	ldr	r3, [pc, #100]	; (1ae44 <xTaskCreate+0x90>)
   1adde:	4798      	blx	r3
   1ade0:	0003      	movs	r3, r0
   1ade2:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1ade4:	69fb      	ldr	r3, [r7, #28]
   1ade6:	2b00      	cmp	r3, #0
   1ade8:	d003      	beq.n	1adf2 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1adea:	69fb      	ldr	r3, [r7, #28]
   1adec:	697a      	ldr	r2, [r7, #20]
   1adee:	631a      	str	r2, [r3, #48]	; 0x30
   1adf0:	e006      	b.n	1ae00 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1adf2:	697b      	ldr	r3, [r7, #20]
   1adf4:	0018      	movs	r0, r3
   1adf6:	4b14      	ldr	r3, [pc, #80]	; (1ae48 <xTaskCreate+0x94>)
   1adf8:	4798      	blx	r3
   1adfa:	e001      	b.n	1ae00 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1adfc:	2300      	movs	r3, #0
   1adfe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1ae00:	69fb      	ldr	r3, [r7, #28]
   1ae02:	2b00      	cmp	r3, #0
   1ae04:	d016      	beq.n	1ae34 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1ae06:	1dbb      	adds	r3, r7, #6
   1ae08:	881a      	ldrh	r2, [r3, #0]
   1ae0a:	683c      	ldr	r4, [r7, #0]
   1ae0c:	68b9      	ldr	r1, [r7, #8]
   1ae0e:	68f8      	ldr	r0, [r7, #12]
   1ae10:	2300      	movs	r3, #0
   1ae12:	9303      	str	r3, [sp, #12]
   1ae14:	69fb      	ldr	r3, [r7, #28]
   1ae16:	9302      	str	r3, [sp, #8]
   1ae18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ae1a:	9301      	str	r3, [sp, #4]
   1ae1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ae1e:	9300      	str	r3, [sp, #0]
   1ae20:	0023      	movs	r3, r4
   1ae22:	4c0a      	ldr	r4, [pc, #40]	; (1ae4c <xTaskCreate+0x98>)
   1ae24:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1ae26:	69fb      	ldr	r3, [r7, #28]
   1ae28:	0018      	movs	r0, r3
   1ae2a:	4b09      	ldr	r3, [pc, #36]	; (1ae50 <xTaskCreate+0x9c>)
   1ae2c:	4798      	blx	r3
			xReturn = pdPASS;
   1ae2e:	2301      	movs	r3, #1
   1ae30:	61bb      	str	r3, [r7, #24]
   1ae32:	e002      	b.n	1ae3a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1ae34:	2301      	movs	r3, #1
   1ae36:	425b      	negs	r3, r3
   1ae38:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1ae3a:	69bb      	ldr	r3, [r7, #24]
	}
   1ae3c:	0018      	movs	r0, r3
   1ae3e:	46bd      	mov	sp, r7
   1ae40:	b009      	add	sp, #36	; 0x24
   1ae42:	bd90      	pop	{r4, r7, pc}
   1ae44:	00019291 	.word	0x00019291
   1ae48:	00019355 	.word	0x00019355
   1ae4c:	0001ae55 	.word	0x0001ae55
   1ae50:	0001af65 	.word	0x0001af65

0001ae54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1ae54:	b580      	push	{r7, lr}
   1ae56:	b086      	sub	sp, #24
   1ae58:	af00      	add	r7, sp, #0
   1ae5a:	60f8      	str	r0, [r7, #12]
   1ae5c:	60b9      	str	r1, [r7, #8]
   1ae5e:	607a      	str	r2, [r7, #4]
   1ae60:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1ae62:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ae64:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1ae66:	687b      	ldr	r3, [r7, #4]
   1ae68:	009b      	lsls	r3, r3, #2
   1ae6a:	001a      	movs	r2, r3
   1ae6c:	21a5      	movs	r1, #165	; 0xa5
   1ae6e:	4b39      	ldr	r3, [pc, #228]	; (1af54 <prvInitialiseNewTask+0x100>)
   1ae70:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1ae72:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ae74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1ae76:	687b      	ldr	r3, [r7, #4]
   1ae78:	4937      	ldr	r1, [pc, #220]	; (1af58 <prvInitialiseNewTask+0x104>)
   1ae7a:	468c      	mov	ip, r1
   1ae7c:	4463      	add	r3, ip
   1ae7e:	009b      	lsls	r3, r3, #2
   1ae80:	18d3      	adds	r3, r2, r3
   1ae82:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1ae84:	693b      	ldr	r3, [r7, #16]
   1ae86:	2207      	movs	r2, #7
   1ae88:	4393      	bics	r3, r2
   1ae8a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1ae8c:	693b      	ldr	r3, [r7, #16]
   1ae8e:	2207      	movs	r2, #7
   1ae90:	4013      	ands	r3, r2
   1ae92:	d001      	beq.n	1ae98 <prvInitialiseNewTask+0x44>
   1ae94:	b672      	cpsid	i
   1ae96:	e7fe      	b.n	1ae96 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1ae98:	2300      	movs	r3, #0
   1ae9a:	617b      	str	r3, [r7, #20]
   1ae9c:	e013      	b.n	1aec6 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1ae9e:	68ba      	ldr	r2, [r7, #8]
   1aea0:	697b      	ldr	r3, [r7, #20]
   1aea2:	18d3      	adds	r3, r2, r3
   1aea4:	7818      	ldrb	r0, [r3, #0]
   1aea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1aea8:	2134      	movs	r1, #52	; 0x34
   1aeaa:	697b      	ldr	r3, [r7, #20]
   1aeac:	18d3      	adds	r3, r2, r3
   1aeae:	185b      	adds	r3, r3, r1
   1aeb0:	1c02      	adds	r2, r0, #0
   1aeb2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1aeb4:	68ba      	ldr	r2, [r7, #8]
   1aeb6:	697b      	ldr	r3, [r7, #20]
   1aeb8:	18d3      	adds	r3, r2, r3
   1aeba:	781b      	ldrb	r3, [r3, #0]
   1aebc:	2b00      	cmp	r3, #0
   1aebe:	d006      	beq.n	1aece <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1aec0:	697b      	ldr	r3, [r7, #20]
   1aec2:	3301      	adds	r3, #1
   1aec4:	617b      	str	r3, [r7, #20]
   1aec6:	697b      	ldr	r3, [r7, #20]
   1aec8:	2b07      	cmp	r3, #7
   1aeca:	d9e8      	bls.n	1ae9e <prvInitialiseNewTask+0x4a>
   1aecc:	e000      	b.n	1aed0 <prvInitialiseNewTask+0x7c>
		{
			break;
   1aece:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1aed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1aed2:	223b      	movs	r2, #59	; 0x3b
   1aed4:	2100      	movs	r1, #0
   1aed6:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1aed8:	6a3b      	ldr	r3, [r7, #32]
   1aeda:	2b04      	cmp	r3, #4
   1aedc:	d901      	bls.n	1aee2 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1aede:	2304      	movs	r3, #4
   1aee0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1aee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1aee4:	6a3a      	ldr	r2, [r7, #32]
   1aee6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1aee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1aeea:	6a3a      	ldr	r2, [r7, #32]
   1aeec:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1aeee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1aef0:	2200      	movs	r2, #0
   1aef2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1aef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1aef6:	3304      	adds	r3, #4
   1aef8:	0018      	movs	r0, r3
   1aefa:	4b18      	ldr	r3, [pc, #96]	; (1af5c <prvInitialiseNewTask+0x108>)
   1aefc:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1aefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af00:	3318      	adds	r3, #24
   1af02:	0018      	movs	r0, r3
   1af04:	4b15      	ldr	r3, [pc, #84]	; (1af5c <prvInitialiseNewTask+0x108>)
   1af06:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1af08:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1af0c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1af0e:	6a3b      	ldr	r3, [r7, #32]
   1af10:	2205      	movs	r2, #5
   1af12:	1ad2      	subs	r2, r2, r3
   1af14:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af16:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1af18:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1af1c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1af1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af20:	2200      	movs	r2, #0
   1af22:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1af24:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af26:	2250      	movs	r2, #80	; 0x50
   1af28:	2100      	movs	r1, #0
   1af2a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1af2c:	683a      	ldr	r2, [r7, #0]
   1af2e:	68f9      	ldr	r1, [r7, #12]
   1af30:	693b      	ldr	r3, [r7, #16]
   1af32:	0018      	movs	r0, r3
   1af34:	4b0a      	ldr	r3, [pc, #40]	; (1af60 <prvInitialiseNewTask+0x10c>)
   1af36:	4798      	blx	r3
   1af38:	0002      	movs	r2, r0
   1af3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af3c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1af3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1af40:	2b00      	cmp	r3, #0
   1af42:	d002      	beq.n	1af4a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1af44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1af46:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1af48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1af4a:	46c0      	nop			; (mov r8, r8)
   1af4c:	46bd      	mov	sp, r7
   1af4e:	b006      	add	sp, #24
   1af50:	bd80      	pop	{r7, pc}
   1af52:	46c0      	nop			; (mov r8, r8)
   1af54:	0003457f 	.word	0x0003457f
   1af58:	3fffffff 	.word	0x3fffffff
   1af5c:	00018f01 	.word	0x00018f01
   1af60:	00019019 	.word	0x00019019

0001af64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1af64:	b580      	push	{r7, lr}
   1af66:	b082      	sub	sp, #8
   1af68:	af00      	add	r7, sp, #0
   1af6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1af6c:	4b60      	ldr	r3, [pc, #384]	; (1b0f0 <prvAddNewTaskToReadyList+0x18c>)
   1af6e:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1af70:	4b60      	ldr	r3, [pc, #384]	; (1b0f4 <prvAddNewTaskToReadyList+0x190>)
   1af72:	681b      	ldr	r3, [r3, #0]
   1af74:	1c5a      	adds	r2, r3, #1
   1af76:	4b5f      	ldr	r3, [pc, #380]	; (1b0f4 <prvAddNewTaskToReadyList+0x190>)
   1af78:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1af7a:	4b5f      	ldr	r3, [pc, #380]	; (1b0f8 <prvAddNewTaskToReadyList+0x194>)
   1af7c:	681b      	ldr	r3, [r3, #0]
   1af7e:	2b00      	cmp	r3, #0
   1af80:	d109      	bne.n	1af96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1af82:	4b5d      	ldr	r3, [pc, #372]	; (1b0f8 <prvAddNewTaskToReadyList+0x194>)
   1af84:	687a      	ldr	r2, [r7, #4]
   1af86:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1af88:	4b5a      	ldr	r3, [pc, #360]	; (1b0f4 <prvAddNewTaskToReadyList+0x190>)
   1af8a:	681b      	ldr	r3, [r3, #0]
   1af8c:	2b01      	cmp	r3, #1
   1af8e:	d110      	bne.n	1afb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1af90:	4b5a      	ldr	r3, [pc, #360]	; (1b0fc <prvAddNewTaskToReadyList+0x198>)
   1af92:	4798      	blx	r3
   1af94:	e00d      	b.n	1afb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1af96:	4b5a      	ldr	r3, [pc, #360]	; (1b100 <prvAddNewTaskToReadyList+0x19c>)
   1af98:	681b      	ldr	r3, [r3, #0]
   1af9a:	2b00      	cmp	r3, #0
   1af9c:	d109      	bne.n	1afb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1af9e:	4b56      	ldr	r3, [pc, #344]	; (1b0f8 <prvAddNewTaskToReadyList+0x194>)
   1afa0:	681b      	ldr	r3, [r3, #0]
   1afa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1afa4:	687b      	ldr	r3, [r7, #4]
   1afa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1afa8:	429a      	cmp	r2, r3
   1afaa:	d802      	bhi.n	1afb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1afac:	4b52      	ldr	r3, [pc, #328]	; (1b0f8 <prvAddNewTaskToReadyList+0x194>)
   1afae:	687a      	ldr	r2, [r7, #4]
   1afb0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1afb2:	4b54      	ldr	r3, [pc, #336]	; (1b104 <prvAddNewTaskToReadyList+0x1a0>)
   1afb4:	681b      	ldr	r3, [r3, #0]
   1afb6:	1c5a      	adds	r2, r3, #1
   1afb8:	4b52      	ldr	r3, [pc, #328]	; (1b104 <prvAddNewTaskToReadyList+0x1a0>)
   1afba:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1afbc:	4b51      	ldr	r3, [pc, #324]	; (1b104 <prvAddNewTaskToReadyList+0x1a0>)
   1afbe:	681a      	ldr	r2, [r3, #0]
   1afc0:	687b      	ldr	r3, [r7, #4]
   1afc2:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1afc4:	687b      	ldr	r3, [r7, #4]
   1afc6:	2b00      	cmp	r3, #0
   1afc8:	d052      	beq.n	1b070 <prvAddNewTaskToReadyList+0x10c>
   1afca:	2003      	movs	r0, #3
   1afcc:	4b4e      	ldr	r3, [pc, #312]	; (1b108 <prvAddNewTaskToReadyList+0x1a4>)
   1afce:	4798      	blx	r3
   1afd0:	0003      	movs	r3, r0
   1afd2:	b29a      	uxth	r2, r3
   1afd4:	687b      	ldr	r3, [r7, #4]
   1afd6:	0011      	movs	r1, r2
   1afd8:	0018      	movs	r0, r3
   1afda:	4b4c      	ldr	r3, [pc, #304]	; (1b10c <prvAddNewTaskToReadyList+0x1a8>)
   1afdc:	4798      	blx	r3
   1afde:	4b4c      	ldr	r3, [pc, #304]	; (1b110 <prvAddNewTaskToReadyList+0x1ac>)
   1afe0:	881a      	ldrh	r2, [r3, #0]
   1afe2:	687b      	ldr	r3, [r7, #4]
   1afe4:	0011      	movs	r1, r2
   1afe6:	0018      	movs	r0, r3
   1afe8:	4b4a      	ldr	r3, [pc, #296]	; (1b114 <prvAddNewTaskToReadyList+0x1b0>)
   1afea:	4798      	blx	r3
   1afec:	687b      	ldr	r3, [r7, #4]
   1afee:	0018      	movs	r0, r3
   1aff0:	4b49      	ldr	r3, [pc, #292]	; (1b118 <prvAddNewTaskToReadyList+0x1b4>)
   1aff2:	4798      	blx	r3
   1aff4:	0003      	movs	r3, r0
   1aff6:	b2d9      	uxtb	r1, r3
   1aff8:	687b      	ldr	r3, [r7, #4]
   1affa:	3334      	adds	r3, #52	; 0x34
   1affc:	001a      	movs	r2, r3
   1affe:	2003      	movs	r0, #3
   1b000:	4b46      	ldr	r3, [pc, #280]	; (1b11c <prvAddNewTaskToReadyList+0x1b8>)
   1b002:	4798      	blx	r3
   1b004:	687b      	ldr	r3, [r7, #4]
   1b006:	0018      	movs	r0, r3
   1b008:	4b43      	ldr	r3, [pc, #268]	; (1b118 <prvAddNewTaskToReadyList+0x1b4>)
   1b00a:	4798      	blx	r3
   1b00c:	0003      	movs	r3, r0
   1b00e:	b2d9      	uxtb	r1, r3
   1b010:	687b      	ldr	r3, [r7, #4]
   1b012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b014:	b2db      	uxtb	r3, r3
   1b016:	001a      	movs	r2, r3
   1b018:	2003      	movs	r0, #3
   1b01a:	4b41      	ldr	r3, [pc, #260]	; (1b120 <prvAddNewTaskToReadyList+0x1bc>)
   1b01c:	4798      	blx	r3
   1b01e:	4b41      	ldr	r3, [pc, #260]	; (1b124 <prvAddNewTaskToReadyList+0x1c0>)
   1b020:	4798      	blx	r3
   1b022:	0003      	movs	r3, r0
   1b024:	0018      	movs	r0, r3
   1b026:	4b40      	ldr	r3, [pc, #256]	; (1b128 <prvAddNewTaskToReadyList+0x1c4>)
   1b028:	4798      	blx	r3
   1b02a:	0003      	movs	r3, r0
   1b02c:	001a      	movs	r2, r3
   1b02e:	4b3f      	ldr	r3, [pc, #252]	; (1b12c <prvAddNewTaskToReadyList+0x1c8>)
   1b030:	881b      	ldrh	r3, [r3, #0]
   1b032:	4013      	ands	r3, r2
   1b034:	b29b      	uxth	r3, r3
   1b036:	2b00      	cmp	r3, #0
   1b038:	d016      	beq.n	1b068 <prvAddNewTaskToReadyList+0x104>
   1b03a:	687b      	ldr	r3, [r7, #4]
   1b03c:	0018      	movs	r0, r3
   1b03e:	4b3a      	ldr	r3, [pc, #232]	; (1b128 <prvAddNewTaskToReadyList+0x1c4>)
   1b040:	4798      	blx	r3
   1b042:	0003      	movs	r3, r0
   1b044:	001a      	movs	r2, r3
   1b046:	4b39      	ldr	r3, [pc, #228]	; (1b12c <prvAddNewTaskToReadyList+0x1c8>)
   1b048:	881b      	ldrh	r3, [r3, #0]
   1b04a:	4013      	ands	r3, r2
   1b04c:	b29b      	uxth	r3, r3
   1b04e:	2b00      	cmp	r3, #0
   1b050:	d00a      	beq.n	1b068 <prvAddNewTaskToReadyList+0x104>
   1b052:	687b      	ldr	r3, [r7, #4]
   1b054:	0018      	movs	r0, r3
   1b056:	4b30      	ldr	r3, [pc, #192]	; (1b118 <prvAddNewTaskToReadyList+0x1b4>)
   1b058:	4798      	blx	r3
   1b05a:	0003      	movs	r3, r0
   1b05c:	b2db      	uxtb	r3, r3
   1b05e:	001a      	movs	r2, r3
   1b060:	2103      	movs	r1, #3
   1b062:	201b      	movs	r0, #27
   1b064:	4b32      	ldr	r3, [pc, #200]	; (1b130 <prvAddNewTaskToReadyList+0x1cc>)
   1b066:	4798      	blx	r3
   1b068:	687b      	ldr	r3, [r7, #4]
   1b06a:	0018      	movs	r0, r3
   1b06c:	4b31      	ldr	r3, [pc, #196]	; (1b134 <prvAddNewTaskToReadyList+0x1d0>)
   1b06e:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1b070:	687b      	ldr	r3, [r7, #4]
   1b072:	0018      	movs	r0, r3
   1b074:	4b2c      	ldr	r3, [pc, #176]	; (1b128 <prvAddNewTaskToReadyList+0x1c4>)
   1b076:	4798      	blx	r3
   1b078:	0003      	movs	r3, r0
   1b07a:	001a      	movs	r2, r3
   1b07c:	4b2b      	ldr	r3, [pc, #172]	; (1b12c <prvAddNewTaskToReadyList+0x1c8>)
   1b07e:	881b      	ldrh	r3, [r3, #0]
   1b080:	4013      	ands	r3, r2
   1b082:	b29b      	uxth	r3, r3
   1b084:	2b00      	cmp	r3, #0
   1b086:	d008      	beq.n	1b09a <prvAddNewTaskToReadyList+0x136>
   1b088:	687b      	ldr	r3, [r7, #4]
   1b08a:	0018      	movs	r0, r3
   1b08c:	4b22      	ldr	r3, [pc, #136]	; (1b118 <prvAddNewTaskToReadyList+0x1b4>)
   1b08e:	4798      	blx	r3
   1b090:	0003      	movs	r3, r0
   1b092:	b2db      	uxtb	r3, r3
   1b094:	0018      	movs	r0, r3
   1b096:	4b28      	ldr	r3, [pc, #160]	; (1b138 <prvAddNewTaskToReadyList+0x1d4>)
   1b098:	4798      	blx	r3
   1b09a:	687b      	ldr	r3, [r7, #4]
   1b09c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b09e:	4b27      	ldr	r3, [pc, #156]	; (1b13c <prvAddNewTaskToReadyList+0x1d8>)
   1b0a0:	681b      	ldr	r3, [r3, #0]
   1b0a2:	429a      	cmp	r2, r3
   1b0a4:	d903      	bls.n	1b0ae <prvAddNewTaskToReadyList+0x14a>
   1b0a6:	687b      	ldr	r3, [r7, #4]
   1b0a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b0aa:	4b24      	ldr	r3, [pc, #144]	; (1b13c <prvAddNewTaskToReadyList+0x1d8>)
   1b0ac:	601a      	str	r2, [r3, #0]
   1b0ae:	687b      	ldr	r3, [r7, #4]
   1b0b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b0b2:	0013      	movs	r3, r2
   1b0b4:	009b      	lsls	r3, r3, #2
   1b0b6:	189b      	adds	r3, r3, r2
   1b0b8:	009b      	lsls	r3, r3, #2
   1b0ba:	4a21      	ldr	r2, [pc, #132]	; (1b140 <prvAddNewTaskToReadyList+0x1dc>)
   1b0bc:	189a      	adds	r2, r3, r2
   1b0be:	687b      	ldr	r3, [r7, #4]
   1b0c0:	3304      	adds	r3, #4
   1b0c2:	0019      	movs	r1, r3
   1b0c4:	0010      	movs	r0, r2
   1b0c6:	4b1f      	ldr	r3, [pc, #124]	; (1b144 <prvAddNewTaskToReadyList+0x1e0>)
   1b0c8:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1b0ca:	4b1f      	ldr	r3, [pc, #124]	; (1b148 <prvAddNewTaskToReadyList+0x1e4>)
   1b0cc:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1b0ce:	4b0c      	ldr	r3, [pc, #48]	; (1b100 <prvAddNewTaskToReadyList+0x19c>)
   1b0d0:	681b      	ldr	r3, [r3, #0]
   1b0d2:	2b00      	cmp	r3, #0
   1b0d4:	d008      	beq.n	1b0e8 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1b0d6:	4b08      	ldr	r3, [pc, #32]	; (1b0f8 <prvAddNewTaskToReadyList+0x194>)
   1b0d8:	681b      	ldr	r3, [r3, #0]
   1b0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b0dc:	687b      	ldr	r3, [r7, #4]
   1b0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b0e0:	429a      	cmp	r2, r3
   1b0e2:	d201      	bcs.n	1b0e8 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1b0e4:	4b19      	ldr	r3, [pc, #100]	; (1b14c <prvAddNewTaskToReadyList+0x1e8>)
   1b0e6:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1b0e8:	46c0      	nop			; (mov r8, r8)
   1b0ea:	46bd      	mov	sp, r7
   1b0ec:	b002      	add	sp, #8
   1b0ee:	bd80      	pop	{r7, pc}
   1b0f0:	00019159 	.word	0x00019159
   1b0f4:	20004180 	.word	0x20004180
   1b0f8:	200040a8 	.word	0x200040a8
   1b0fc:	0001bc85 	.word	0x0001bc85
   1b100:	2000418c 	.word	0x2000418c
   1b104:	2000419c 	.word	0x2000419c
   1b108:	000186cd 	.word	0x000186cd
   1b10c:	00017171 	.word	0x00017171
   1b110:	20000102 	.word	0x20000102
   1b114:	000171ad 	.word	0x000171ad
   1b118:	0001712d 	.word	0x0001712d
   1b11c:	000188fd 	.word	0x000188fd
   1b120:	00018061 	.word	0x00018061
   1b124:	000173e9 	.word	0x000173e9
   1b128:	0001714d 	.word	0x0001714d
   1b12c:	20000100 	.word	0x20000100
   1b130:	00017b45 	.word	0x00017b45
   1b134:	000172ad 	.word	0x000172ad
   1b138:	000178fd 	.word	0x000178fd
   1b13c:	20004188 	.word	0x20004188
   1b140:	200040ac 	.word	0x200040ac
   1b144:	00018f17 	.word	0x00018f17
   1b148:	0001917d 	.word	0x0001917d
   1b14c:	00019141 	.word	0x00019141

0001b150 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1b150:	b580      	push	{r7, lr}
   1b152:	b084      	sub	sp, #16
   1b154:	af00      	add	r7, sp, #0
   1b156:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1b158:	2300      	movs	r3, #0
   1b15a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1b15c:	687b      	ldr	r3, [r7, #4]
   1b15e:	2b00      	cmp	r3, #0
   1b160:	d045      	beq.n	1b1ee <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1b162:	4b27      	ldr	r3, [pc, #156]	; (1b200 <vTaskDelay+0xb0>)
   1b164:	681b      	ldr	r3, [r3, #0]
   1b166:	2b00      	cmp	r3, #0
   1b168:	d001      	beq.n	1b16e <vTaskDelay+0x1e>
   1b16a:	b672      	cpsid	i
   1b16c:	e7fe      	b.n	1b16c <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1b16e:	4b25      	ldr	r3, [pc, #148]	; (1b204 <vTaskDelay+0xb4>)
   1b170:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1b172:	4b25      	ldr	r3, [pc, #148]	; (1b208 <vTaskDelay+0xb8>)
   1b174:	681b      	ldr	r3, [r3, #0]
   1b176:	0018      	movs	r0, r3
   1b178:	4b24      	ldr	r3, [pc, #144]	; (1b20c <vTaskDelay+0xbc>)
   1b17a:	4798      	blx	r3
   1b17c:	0003      	movs	r3, r0
   1b17e:	001a      	movs	r2, r3
   1b180:	4b23      	ldr	r3, [pc, #140]	; (1b210 <vTaskDelay+0xc0>)
   1b182:	881b      	ldrh	r3, [r3, #0]
   1b184:	4013      	ands	r3, r2
   1b186:	b29b      	uxth	r3, r3
   1b188:	2b00      	cmp	r3, #0
   1b18a:	d00e      	beq.n	1b1aa <vTaskDelay+0x5a>
   1b18c:	687b      	ldr	r3, [r7, #4]
   1b18e:	0019      	movs	r1, r3
   1b190:	2089      	movs	r0, #137	; 0x89
   1b192:	4b20      	ldr	r3, [pc, #128]	; (1b214 <vTaskDelay+0xc4>)
   1b194:	4798      	blx	r3
   1b196:	4b1c      	ldr	r3, [pc, #112]	; (1b208 <vTaskDelay+0xb8>)
   1b198:	681b      	ldr	r3, [r3, #0]
   1b19a:	0018      	movs	r0, r3
   1b19c:	4b1e      	ldr	r3, [pc, #120]	; (1b218 <vTaskDelay+0xc8>)
   1b19e:	4798      	blx	r3
   1b1a0:	0003      	movs	r3, r0
   1b1a2:	b2db      	uxtb	r3, r3
   1b1a4:	0018      	movs	r0, r3
   1b1a6:	4b1d      	ldr	r3, [pc, #116]	; (1b21c <vTaskDelay+0xcc>)
   1b1a8:	4798      	blx	r3
   1b1aa:	4b1d      	ldr	r3, [pc, #116]	; (1b220 <vTaskDelay+0xd0>)
   1b1ac:	4798      	blx	r3
   1b1ae:	0003      	movs	r3, r0
   1b1b0:	0018      	movs	r0, r3
   1b1b2:	4b16      	ldr	r3, [pc, #88]	; (1b20c <vTaskDelay+0xbc>)
   1b1b4:	4798      	blx	r3
   1b1b6:	0003      	movs	r3, r0
   1b1b8:	001a      	movs	r2, r3
   1b1ba:	4b15      	ldr	r3, [pc, #84]	; (1b210 <vTaskDelay+0xc0>)
   1b1bc:	881b      	ldrh	r3, [r3, #0]
   1b1be:	4013      	ands	r3, r2
   1b1c0:	b29b      	uxth	r3, r3
   1b1c2:	2b00      	cmp	r3, #0
   1b1c4:	d00a      	beq.n	1b1dc <vTaskDelay+0x8c>
   1b1c6:	4b16      	ldr	r3, [pc, #88]	; (1b220 <vTaskDelay+0xd0>)
   1b1c8:	4798      	blx	r3
   1b1ca:	0003      	movs	r3, r0
   1b1cc:	0018      	movs	r0, r3
   1b1ce:	4b12      	ldr	r3, [pc, #72]	; (1b218 <vTaskDelay+0xc8>)
   1b1d0:	4798      	blx	r3
   1b1d2:	0003      	movs	r3, r0
   1b1d4:	b2db      	uxtb	r3, r3
   1b1d6:	0018      	movs	r0, r3
   1b1d8:	4b10      	ldr	r3, [pc, #64]	; (1b21c <vTaskDelay+0xcc>)
   1b1da:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1b1dc:	687b      	ldr	r3, [r7, #4]
   1b1de:	2100      	movs	r1, #0
   1b1e0:	0018      	movs	r0, r3
   1b1e2:	4b10      	ldr	r3, [pc, #64]	; (1b224 <vTaskDelay+0xd4>)
   1b1e4:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1b1e6:	4b10      	ldr	r3, [pc, #64]	; (1b228 <vTaskDelay+0xd8>)
   1b1e8:	4798      	blx	r3
   1b1ea:	0003      	movs	r3, r0
   1b1ec:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1b1ee:	68fb      	ldr	r3, [r7, #12]
   1b1f0:	2b00      	cmp	r3, #0
   1b1f2:	d101      	bne.n	1b1f8 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1b1f4:	4b0d      	ldr	r3, [pc, #52]	; (1b22c <vTaskDelay+0xdc>)
   1b1f6:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1b1f8:	46c0      	nop			; (mov r8, r8)
   1b1fa:	46bd      	mov	sp, r7
   1b1fc:	b004      	add	sp, #16
   1b1fe:	bd80      	pop	{r7, pc}
   1b200:	200041a8 	.word	0x200041a8
   1b204:	0001b411 	.word	0x0001b411
   1b208:	200040a8 	.word	0x200040a8
   1b20c:	0001714d 	.word	0x0001714d
   1b210:	20000100 	.word	0x20000100
   1b214:	00017e4d 	.word	0x00017e4d
   1b218:	0001712d 	.word	0x0001712d
   1b21c:	000182dd 	.word	0x000182dd
   1b220:	000173e9 	.word	0x000173e9
   1b224:	0001c369 	.word	0x0001c369
   1b228:	0001b429 	.word	0x0001b429
   1b22c:	00019141 	.word	0x00019141

0001b230 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1b230:	b580      	push	{r7, lr}
   1b232:	b084      	sub	sp, #16
   1b234:	af00      	add	r7, sp, #0
   1b236:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1b238:	4b42      	ldr	r3, [pc, #264]	; (1b344 <vTaskSuspend+0x114>)
   1b23a:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1b23c:	687b      	ldr	r3, [r7, #4]
   1b23e:	2b00      	cmp	r3, #0
   1b240:	d102      	bne.n	1b248 <vTaskSuspend+0x18>
   1b242:	4b41      	ldr	r3, [pc, #260]	; (1b348 <vTaskSuspend+0x118>)
   1b244:	681b      	ldr	r3, [r3, #0]
   1b246:	e000      	b.n	1b24a <vTaskSuspend+0x1a>
   1b248:	687b      	ldr	r3, [r7, #4]
   1b24a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1b24c:	4b3f      	ldr	r3, [pc, #252]	; (1b34c <vTaskSuspend+0x11c>)
   1b24e:	4798      	blx	r3
   1b250:	0003      	movs	r3, r0
   1b252:	0018      	movs	r0, r3
   1b254:	4b3e      	ldr	r3, [pc, #248]	; (1b350 <vTaskSuspend+0x120>)
   1b256:	4798      	blx	r3
   1b258:	0003      	movs	r3, r0
   1b25a:	001a      	movs	r2, r3
   1b25c:	4b3d      	ldr	r3, [pc, #244]	; (1b354 <vTaskSuspend+0x124>)
   1b25e:	881b      	ldrh	r3, [r3, #0]
   1b260:	4013      	ands	r3, r2
   1b262:	b29b      	uxth	r3, r3
   1b264:	2b00      	cmp	r3, #0
   1b266:	d016      	beq.n	1b296 <vTaskSuspend+0x66>
   1b268:	68fb      	ldr	r3, [r7, #12]
   1b26a:	0018      	movs	r0, r3
   1b26c:	4b38      	ldr	r3, [pc, #224]	; (1b350 <vTaskSuspend+0x120>)
   1b26e:	4798      	blx	r3
   1b270:	0003      	movs	r3, r0
   1b272:	001a      	movs	r2, r3
   1b274:	4b37      	ldr	r3, [pc, #220]	; (1b354 <vTaskSuspend+0x124>)
   1b276:	881b      	ldrh	r3, [r3, #0]
   1b278:	4013      	ands	r3, r2
   1b27a:	b29b      	uxth	r3, r3
   1b27c:	2b00      	cmp	r3, #0
   1b27e:	d00a      	beq.n	1b296 <vTaskSuspend+0x66>
   1b280:	68fb      	ldr	r3, [r7, #12]
   1b282:	0018      	movs	r0, r3
   1b284:	4b34      	ldr	r3, [pc, #208]	; (1b358 <vTaskSuspend+0x128>)
   1b286:	4798      	blx	r3
   1b288:	0003      	movs	r3, r0
   1b28a:	b2db      	uxtb	r3, r3
   1b28c:	001a      	movs	r2, r3
   1b28e:	2103      	movs	r1, #3
   1b290:	208a      	movs	r0, #138	; 0x8a
   1b292:	4b32      	ldr	r3, [pc, #200]	; (1b35c <vTaskSuspend+0x12c>)
   1b294:	4798      	blx	r3
   1b296:	68fb      	ldr	r3, [r7, #12]
   1b298:	0018      	movs	r0, r3
   1b29a:	4b2f      	ldr	r3, [pc, #188]	; (1b358 <vTaskSuspend+0x128>)
   1b29c:	4798      	blx	r3
   1b29e:	0003      	movs	r3, r0
   1b2a0:	b2db      	uxtb	r3, r3
   1b2a2:	0018      	movs	r0, r3
   1b2a4:	4b2e      	ldr	r3, [pc, #184]	; (1b360 <vTaskSuspend+0x130>)
   1b2a6:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1b2a8:	68fb      	ldr	r3, [r7, #12]
   1b2aa:	3304      	adds	r3, #4
   1b2ac:	0018      	movs	r0, r3
   1b2ae:	4b2d      	ldr	r3, [pc, #180]	; (1b364 <vTaskSuspend+0x134>)
   1b2b0:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1b2b2:	68fb      	ldr	r3, [r7, #12]
   1b2b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b2b6:	2b00      	cmp	r3, #0
   1b2b8:	d004      	beq.n	1b2c4 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1b2ba:	68fb      	ldr	r3, [r7, #12]
   1b2bc:	3318      	adds	r3, #24
   1b2be:	0018      	movs	r0, r3
   1b2c0:	4b28      	ldr	r3, [pc, #160]	; (1b364 <vTaskSuspend+0x134>)
   1b2c2:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1b2c4:	68fb      	ldr	r3, [r7, #12]
   1b2c6:	1d1a      	adds	r2, r3, #4
   1b2c8:	4b27      	ldr	r3, [pc, #156]	; (1b368 <vTaskSuspend+0x138>)
   1b2ca:	0011      	movs	r1, r2
   1b2cc:	0018      	movs	r0, r3
   1b2ce:	4b27      	ldr	r3, [pc, #156]	; (1b36c <vTaskSuspend+0x13c>)
   1b2d0:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1b2d2:	68fb      	ldr	r3, [r7, #12]
   1b2d4:	2250      	movs	r2, #80	; 0x50
   1b2d6:	5c9b      	ldrb	r3, [r3, r2]
   1b2d8:	b2db      	uxtb	r3, r3
   1b2da:	2b01      	cmp	r3, #1
   1b2dc:	d103      	bne.n	1b2e6 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1b2de:	68fb      	ldr	r3, [r7, #12]
   1b2e0:	2250      	movs	r2, #80	; 0x50
   1b2e2:	2100      	movs	r1, #0
   1b2e4:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1b2e6:	4b22      	ldr	r3, [pc, #136]	; (1b370 <vTaskSuspend+0x140>)
   1b2e8:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1b2ea:	4b22      	ldr	r3, [pc, #136]	; (1b374 <vTaskSuspend+0x144>)
   1b2ec:	681b      	ldr	r3, [r3, #0]
   1b2ee:	2b00      	cmp	r3, #0
   1b2f0:	d005      	beq.n	1b2fe <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1b2f2:	4b14      	ldr	r3, [pc, #80]	; (1b344 <vTaskSuspend+0x114>)
   1b2f4:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1b2f6:	4b20      	ldr	r3, [pc, #128]	; (1b378 <vTaskSuspend+0x148>)
   1b2f8:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1b2fa:	4b1d      	ldr	r3, [pc, #116]	; (1b370 <vTaskSuspend+0x140>)
   1b2fc:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1b2fe:	4b12      	ldr	r3, [pc, #72]	; (1b348 <vTaskSuspend+0x118>)
   1b300:	681b      	ldr	r3, [r3, #0]
   1b302:	68fa      	ldr	r2, [r7, #12]
   1b304:	429a      	cmp	r2, r3
   1b306:	d118      	bne.n	1b33a <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1b308:	4b1a      	ldr	r3, [pc, #104]	; (1b374 <vTaskSuspend+0x144>)
   1b30a:	681b      	ldr	r3, [r3, #0]
   1b30c:	2b00      	cmp	r3, #0
   1b30e:	d008      	beq.n	1b322 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1b310:	4b1a      	ldr	r3, [pc, #104]	; (1b37c <vTaskSuspend+0x14c>)
   1b312:	681b      	ldr	r3, [r3, #0]
   1b314:	2b00      	cmp	r3, #0
   1b316:	d001      	beq.n	1b31c <vTaskSuspend+0xec>
   1b318:	b672      	cpsid	i
   1b31a:	e7fe      	b.n	1b31a <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1b31c:	4b18      	ldr	r3, [pc, #96]	; (1b380 <vTaskSuspend+0x150>)
   1b31e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1b320:	e00b      	b.n	1b33a <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1b322:	4b11      	ldr	r3, [pc, #68]	; (1b368 <vTaskSuspend+0x138>)
   1b324:	681a      	ldr	r2, [r3, #0]
   1b326:	4b17      	ldr	r3, [pc, #92]	; (1b384 <vTaskSuspend+0x154>)
   1b328:	681b      	ldr	r3, [r3, #0]
   1b32a:	429a      	cmp	r2, r3
   1b32c:	d103      	bne.n	1b336 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1b32e:	4b06      	ldr	r3, [pc, #24]	; (1b348 <vTaskSuspend+0x118>)
   1b330:	2200      	movs	r2, #0
   1b332:	601a      	str	r2, [r3, #0]
	}
   1b334:	e001      	b.n	1b33a <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1b336:	4b14      	ldr	r3, [pc, #80]	; (1b388 <vTaskSuspend+0x158>)
   1b338:	4798      	blx	r3
	}
   1b33a:	46c0      	nop			; (mov r8, r8)
   1b33c:	46bd      	mov	sp, r7
   1b33e:	b004      	add	sp, #16
   1b340:	bd80      	pop	{r7, pc}
   1b342:	46c0      	nop			; (mov r8, r8)
   1b344:	00019159 	.word	0x00019159
   1b348:	200040a8 	.word	0x200040a8
   1b34c:	000173e9 	.word	0x000173e9
   1b350:	0001714d 	.word	0x0001714d
   1b354:	20000100 	.word	0x20000100
   1b358:	0001712d 	.word	0x0001712d
   1b35c:	00017b45 	.word	0x00017b45
   1b360:	000182dd 	.word	0x000182dd
   1b364:	00018fc7 	.word	0x00018fc7
   1b368:	2000416c 	.word	0x2000416c
   1b36c:	00018f17 	.word	0x00018f17
   1b370:	0001917d 	.word	0x0001917d
   1b374:	2000418c 	.word	0x2000418c
   1b378:	0001be15 	.word	0x0001be15
   1b37c:	200041a8 	.word	0x200041a8
   1b380:	00019141 	.word	0x00019141
   1b384:	20004180 	.word	0x20004180
   1b388:	0001b7a5 	.word	0x0001b7a5

0001b38c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1b38c:	b590      	push	{r4, r7, lr}
   1b38e:	b085      	sub	sp, #20
   1b390:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1b392:	4916      	ldr	r1, [pc, #88]	; (1b3ec <vTaskStartScheduler+0x60>)
   1b394:	4816      	ldr	r0, [pc, #88]	; (1b3f0 <vTaskStartScheduler+0x64>)
   1b396:	4b17      	ldr	r3, [pc, #92]	; (1b3f4 <vTaskStartScheduler+0x68>)
   1b398:	9301      	str	r3, [sp, #4]
   1b39a:	2300      	movs	r3, #0
   1b39c:	9300      	str	r3, [sp, #0]
   1b39e:	2300      	movs	r3, #0
   1b3a0:	2296      	movs	r2, #150	; 0x96
   1b3a2:	4c15      	ldr	r4, [pc, #84]	; (1b3f8 <vTaskStartScheduler+0x6c>)
   1b3a4:	47a0      	blx	r4
   1b3a6:	0003      	movs	r3, r0
   1b3a8:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1b3aa:	687b      	ldr	r3, [r7, #4]
   1b3ac:	2b01      	cmp	r3, #1
   1b3ae:	d103      	bne.n	1b3b8 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1b3b0:	4b12      	ldr	r3, [pc, #72]	; (1b3fc <vTaskStartScheduler+0x70>)
   1b3b2:	4798      	blx	r3
   1b3b4:	0003      	movs	r3, r0
   1b3b6:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1b3b8:	687b      	ldr	r3, [r7, #4]
   1b3ba:	2b01      	cmp	r3, #1
   1b3bc:	d10d      	bne.n	1b3da <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1b3be:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1b3c0:	4b0f      	ldr	r3, [pc, #60]	; (1b400 <vTaskStartScheduler+0x74>)
   1b3c2:	2201      	movs	r2, #1
   1b3c4:	4252      	negs	r2, r2
   1b3c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1b3c8:	4b0e      	ldr	r3, [pc, #56]	; (1b404 <vTaskStartScheduler+0x78>)
   1b3ca:	2201      	movs	r2, #1
   1b3cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1b3ce:	4b0e      	ldr	r3, [pc, #56]	; (1b408 <vTaskStartScheduler+0x7c>)
   1b3d0:	2200      	movs	r2, #0
   1b3d2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1b3d4:	4b0d      	ldr	r3, [pc, #52]	; (1b40c <vTaskStartScheduler+0x80>)
   1b3d6:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1b3d8:	e004      	b.n	1b3e4 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1b3da:	687b      	ldr	r3, [r7, #4]
   1b3dc:	3301      	adds	r3, #1
   1b3de:	d101      	bne.n	1b3e4 <vTaskStartScheduler+0x58>
   1b3e0:	b672      	cpsid	i
   1b3e2:	e7fe      	b.n	1b3e2 <vTaskStartScheduler+0x56>
}
   1b3e4:	46c0      	nop			; (mov r8, r8)
   1b3e6:	46bd      	mov	sp, r7
   1b3e8:	b003      	add	sp, #12
   1b3ea:	bd90      	pop	{r4, r7, pc}
   1b3ec:	00037c80 	.word	0x00037c80
   1b3f0:	0001bc5d 	.word	0x0001bc5d
   1b3f4:	200041a4 	.word	0x200041a4
   1b3f8:	0001adb5 	.word	0x0001adb5
   1b3fc:	0001c41d 	.word	0x0001c41d
   1b400:	200041a0 	.word	0x200041a0
   1b404:	2000418c 	.word	0x2000418c
   1b408:	20004184 	.word	0x20004184
   1b40c:	000190e9 	.word	0x000190e9

0001b410 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1b410:	b580      	push	{r7, lr}
   1b412:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1b414:	4b03      	ldr	r3, [pc, #12]	; (1b424 <vTaskSuspendAll+0x14>)
   1b416:	681b      	ldr	r3, [r3, #0]
   1b418:	1c5a      	adds	r2, r3, #1
   1b41a:	4b02      	ldr	r3, [pc, #8]	; (1b424 <vTaskSuspendAll+0x14>)
   1b41c:	601a      	str	r2, [r3, #0]
}
   1b41e:	46c0      	nop			; (mov r8, r8)
   1b420:	46bd      	mov	sp, r7
   1b422:	bd80      	pop	{r7, pc}
   1b424:	200041a8 	.word	0x200041a8

0001b428 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1b428:	b580      	push	{r7, lr}
   1b42a:	b084      	sub	sp, #16
   1b42c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1b42e:	2300      	movs	r3, #0
   1b430:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1b432:	2300      	movs	r3, #0
   1b434:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1b436:	4b45      	ldr	r3, [pc, #276]	; (1b54c <xTaskResumeAll+0x124>)
   1b438:	681b      	ldr	r3, [r3, #0]
   1b43a:	2b00      	cmp	r3, #0
   1b43c:	d101      	bne.n	1b442 <xTaskResumeAll+0x1a>
   1b43e:	b672      	cpsid	i
   1b440:	e7fe      	b.n	1b440 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1b442:	4b43      	ldr	r3, [pc, #268]	; (1b550 <xTaskResumeAll+0x128>)
   1b444:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1b446:	4b41      	ldr	r3, [pc, #260]	; (1b54c <xTaskResumeAll+0x124>)
   1b448:	681b      	ldr	r3, [r3, #0]
   1b44a:	1e5a      	subs	r2, r3, #1
   1b44c:	4b3f      	ldr	r3, [pc, #252]	; (1b54c <xTaskResumeAll+0x124>)
   1b44e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1b450:	4b3e      	ldr	r3, [pc, #248]	; (1b54c <xTaskResumeAll+0x124>)
   1b452:	681b      	ldr	r3, [r3, #0]
   1b454:	2b00      	cmp	r3, #0
   1b456:	d000      	beq.n	1b45a <xTaskResumeAll+0x32>
   1b458:	e071      	b.n	1b53e <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1b45a:	4b3e      	ldr	r3, [pc, #248]	; (1b554 <xTaskResumeAll+0x12c>)
   1b45c:	681b      	ldr	r3, [r3, #0]
   1b45e:	2b00      	cmp	r3, #0
   1b460:	d100      	bne.n	1b464 <xTaskResumeAll+0x3c>
   1b462:	e06c      	b.n	1b53e <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1b464:	e044      	b.n	1b4f0 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1b466:	4b3c      	ldr	r3, [pc, #240]	; (1b558 <xTaskResumeAll+0x130>)
   1b468:	68db      	ldr	r3, [r3, #12]
   1b46a:	68db      	ldr	r3, [r3, #12]
   1b46c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1b46e:	68fb      	ldr	r3, [r7, #12]
   1b470:	3318      	adds	r3, #24
   1b472:	0018      	movs	r0, r3
   1b474:	4b39      	ldr	r3, [pc, #228]	; (1b55c <xTaskResumeAll+0x134>)
   1b476:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1b478:	68fb      	ldr	r3, [r7, #12]
   1b47a:	3304      	adds	r3, #4
   1b47c:	0018      	movs	r0, r3
   1b47e:	4b37      	ldr	r3, [pc, #220]	; (1b55c <xTaskResumeAll+0x134>)
   1b480:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1b482:	68fb      	ldr	r3, [r7, #12]
   1b484:	0018      	movs	r0, r3
   1b486:	4b36      	ldr	r3, [pc, #216]	; (1b560 <xTaskResumeAll+0x138>)
   1b488:	4798      	blx	r3
   1b48a:	0003      	movs	r3, r0
   1b48c:	001a      	movs	r2, r3
   1b48e:	4b35      	ldr	r3, [pc, #212]	; (1b564 <xTaskResumeAll+0x13c>)
   1b490:	881b      	ldrh	r3, [r3, #0]
   1b492:	4013      	ands	r3, r2
   1b494:	b29b      	uxth	r3, r3
   1b496:	2b00      	cmp	r3, #0
   1b498:	d008      	beq.n	1b4ac <xTaskResumeAll+0x84>
   1b49a:	68fb      	ldr	r3, [r7, #12]
   1b49c:	0018      	movs	r0, r3
   1b49e:	4b32      	ldr	r3, [pc, #200]	; (1b568 <xTaskResumeAll+0x140>)
   1b4a0:	4798      	blx	r3
   1b4a2:	0003      	movs	r3, r0
   1b4a4:	b2db      	uxtb	r3, r3
   1b4a6:	0018      	movs	r0, r3
   1b4a8:	4b30      	ldr	r3, [pc, #192]	; (1b56c <xTaskResumeAll+0x144>)
   1b4aa:	4798      	blx	r3
   1b4ac:	68fb      	ldr	r3, [r7, #12]
   1b4ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b4b0:	4b2f      	ldr	r3, [pc, #188]	; (1b570 <xTaskResumeAll+0x148>)
   1b4b2:	681b      	ldr	r3, [r3, #0]
   1b4b4:	429a      	cmp	r2, r3
   1b4b6:	d903      	bls.n	1b4c0 <xTaskResumeAll+0x98>
   1b4b8:	68fb      	ldr	r3, [r7, #12]
   1b4ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b4bc:	4b2c      	ldr	r3, [pc, #176]	; (1b570 <xTaskResumeAll+0x148>)
   1b4be:	601a      	str	r2, [r3, #0]
   1b4c0:	68fb      	ldr	r3, [r7, #12]
   1b4c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b4c4:	0013      	movs	r3, r2
   1b4c6:	009b      	lsls	r3, r3, #2
   1b4c8:	189b      	adds	r3, r3, r2
   1b4ca:	009b      	lsls	r3, r3, #2
   1b4cc:	4a29      	ldr	r2, [pc, #164]	; (1b574 <xTaskResumeAll+0x14c>)
   1b4ce:	189a      	adds	r2, r3, r2
   1b4d0:	68fb      	ldr	r3, [r7, #12]
   1b4d2:	3304      	adds	r3, #4
   1b4d4:	0019      	movs	r1, r3
   1b4d6:	0010      	movs	r0, r2
   1b4d8:	4b27      	ldr	r3, [pc, #156]	; (1b578 <xTaskResumeAll+0x150>)
   1b4da:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1b4dc:	68fb      	ldr	r3, [r7, #12]
   1b4de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b4e0:	4b26      	ldr	r3, [pc, #152]	; (1b57c <xTaskResumeAll+0x154>)
   1b4e2:	681b      	ldr	r3, [r3, #0]
   1b4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b4e6:	429a      	cmp	r2, r3
   1b4e8:	d302      	bcc.n	1b4f0 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1b4ea:	4b25      	ldr	r3, [pc, #148]	; (1b580 <xTaskResumeAll+0x158>)
   1b4ec:	2201      	movs	r2, #1
   1b4ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1b4f0:	4b19      	ldr	r3, [pc, #100]	; (1b558 <xTaskResumeAll+0x130>)
   1b4f2:	681b      	ldr	r3, [r3, #0]
   1b4f4:	2b00      	cmp	r3, #0
   1b4f6:	d1b6      	bne.n	1b466 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1b4f8:	68fb      	ldr	r3, [r7, #12]
   1b4fa:	2b00      	cmp	r3, #0
   1b4fc:	d001      	beq.n	1b502 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1b4fe:	4b21      	ldr	r3, [pc, #132]	; (1b584 <xTaskResumeAll+0x15c>)
   1b500:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1b502:	4b21      	ldr	r3, [pc, #132]	; (1b588 <xTaskResumeAll+0x160>)
   1b504:	681b      	ldr	r3, [r3, #0]
   1b506:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1b508:	687b      	ldr	r3, [r7, #4]
   1b50a:	2b00      	cmp	r3, #0
   1b50c:	d00f      	beq.n	1b52e <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1b50e:	4b1f      	ldr	r3, [pc, #124]	; (1b58c <xTaskResumeAll+0x164>)
   1b510:	4798      	blx	r3
   1b512:	1e03      	subs	r3, r0, #0
   1b514:	d002      	beq.n	1b51c <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1b516:	4b1a      	ldr	r3, [pc, #104]	; (1b580 <xTaskResumeAll+0x158>)
   1b518:	2201      	movs	r2, #1
   1b51a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1b51c:	687b      	ldr	r3, [r7, #4]
   1b51e:	3b01      	subs	r3, #1
   1b520:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1b522:	687b      	ldr	r3, [r7, #4]
   1b524:	2b00      	cmp	r3, #0
   1b526:	d1f2      	bne.n	1b50e <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1b528:	4b17      	ldr	r3, [pc, #92]	; (1b588 <xTaskResumeAll+0x160>)
   1b52a:	2200      	movs	r2, #0
   1b52c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1b52e:	4b14      	ldr	r3, [pc, #80]	; (1b580 <xTaskResumeAll+0x158>)
   1b530:	681b      	ldr	r3, [r3, #0]
   1b532:	2b00      	cmp	r3, #0
   1b534:	d003      	beq.n	1b53e <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1b536:	2301      	movs	r3, #1
   1b538:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1b53a:	4b15      	ldr	r3, [pc, #84]	; (1b590 <xTaskResumeAll+0x168>)
   1b53c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1b53e:	4b15      	ldr	r3, [pc, #84]	; (1b594 <xTaskResumeAll+0x16c>)
   1b540:	4798      	blx	r3

	return xAlreadyYielded;
   1b542:	68bb      	ldr	r3, [r7, #8]
}
   1b544:	0018      	movs	r0, r3
   1b546:	46bd      	mov	sp, r7
   1b548:	b004      	add	sp, #16
   1b54a:	bd80      	pop	{r7, pc}
   1b54c:	200041a8 	.word	0x200041a8
   1b550:	00019159 	.word	0x00019159
   1b554:	20004180 	.word	0x20004180
   1b558:	20004140 	.word	0x20004140
   1b55c:	00018fc7 	.word	0x00018fc7
   1b560:	0001714d 	.word	0x0001714d
   1b564:	20000100 	.word	0x20000100
   1b568:	0001712d 	.word	0x0001712d
   1b56c:	000178fd 	.word	0x000178fd
   1b570:	20004188 	.word	0x20004188
   1b574:	200040ac 	.word	0x200040ac
   1b578:	00018f17 	.word	0x00018f17
   1b57c:	200040a8 	.word	0x200040a8
   1b580:	20004194 	.word	0x20004194
   1b584:	0001be15 	.word	0x0001be15
   1b588:	20004190 	.word	0x20004190
   1b58c:	0001b5b5 	.word	0x0001b5b5
   1b590:	00019141 	.word	0x00019141
   1b594:	0001917d 	.word	0x0001917d

0001b598 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1b598:	b580      	push	{r7, lr}
   1b59a:	b082      	sub	sp, #8
   1b59c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1b59e:	4b04      	ldr	r3, [pc, #16]	; (1b5b0 <xTaskGetTickCount+0x18>)
   1b5a0:	681b      	ldr	r3, [r3, #0]
   1b5a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1b5a4:	687b      	ldr	r3, [r7, #4]
}
   1b5a6:	0018      	movs	r0, r3
   1b5a8:	46bd      	mov	sp, r7
   1b5aa:	b002      	add	sp, #8
   1b5ac:	bd80      	pop	{r7, pc}
   1b5ae:	46c0      	nop			; (mov r8, r8)
   1b5b0:	20004184 	.word	0x20004184

0001b5b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1b5b4:	b580      	push	{r7, lr}
   1b5b6:	b086      	sub	sp, #24
   1b5b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1b5ba:	2300      	movs	r3, #0
   1b5bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1b5be:	4b64      	ldr	r3, [pc, #400]	; (1b750 <xTaskIncrementTick+0x19c>)
   1b5c0:	681b      	ldr	r3, [r3, #0]
   1b5c2:	2b01      	cmp	r3, #1
   1b5c4:	d003      	beq.n	1b5ce <xTaskIncrementTick+0x1a>
   1b5c6:	4b63      	ldr	r3, [pc, #396]	; (1b754 <xTaskIncrementTick+0x1a0>)
   1b5c8:	681b      	ldr	r3, [r3, #0]
   1b5ca:	2b00      	cmp	r3, #0
   1b5cc:	d107      	bne.n	1b5de <xTaskIncrementTick+0x2a>
   1b5ce:	4b62      	ldr	r3, [pc, #392]	; (1b758 <xTaskIncrementTick+0x1a4>)
   1b5d0:	681b      	ldr	r3, [r3, #0]
   1b5d2:	1c5a      	adds	r2, r3, #1
   1b5d4:	4b60      	ldr	r3, [pc, #384]	; (1b758 <xTaskIncrementTick+0x1a4>)
   1b5d6:	601a      	str	r2, [r3, #0]
   1b5d8:	2000      	movs	r0, #0
   1b5da:	4b60      	ldr	r3, [pc, #384]	; (1b75c <xTaskIncrementTick+0x1a8>)
   1b5dc:	4798      	blx	r3
   1b5de:	4b5c      	ldr	r3, [pc, #368]	; (1b750 <xTaskIncrementTick+0x19c>)
   1b5e0:	681b      	ldr	r3, [r3, #0]
   1b5e2:	2b00      	cmp	r3, #0
   1b5e4:	d106      	bne.n	1b5f4 <xTaskIncrementTick+0x40>
   1b5e6:	4b5e      	ldr	r3, [pc, #376]	; (1b760 <xTaskIncrementTick+0x1ac>)
   1b5e8:	681b      	ldr	r3, [r3, #0]
   1b5ea:	3301      	adds	r3, #1
   1b5ec:	0019      	movs	r1, r3
   1b5ee:	2003      	movs	r0, #3
   1b5f0:	4b5c      	ldr	r3, [pc, #368]	; (1b764 <xTaskIncrementTick+0x1b0>)
   1b5f2:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1b5f4:	4b56      	ldr	r3, [pc, #344]	; (1b750 <xTaskIncrementTick+0x19c>)
   1b5f6:	681b      	ldr	r3, [r3, #0]
   1b5f8:	2b00      	cmp	r3, #0
   1b5fa:	d000      	beq.n	1b5fe <xTaskIncrementTick+0x4a>
   1b5fc:	e098      	b.n	1b730 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1b5fe:	4b58      	ldr	r3, [pc, #352]	; (1b760 <xTaskIncrementTick+0x1ac>)
   1b600:	681b      	ldr	r3, [r3, #0]
   1b602:	3301      	adds	r3, #1
   1b604:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1b606:	4b56      	ldr	r3, [pc, #344]	; (1b760 <xTaskIncrementTick+0x1ac>)
   1b608:	693a      	ldr	r2, [r7, #16]
   1b60a:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1b60c:	693b      	ldr	r3, [r7, #16]
   1b60e:	2b00      	cmp	r3, #0
   1b610:	d117      	bne.n	1b642 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1b612:	4b55      	ldr	r3, [pc, #340]	; (1b768 <xTaskIncrementTick+0x1b4>)
   1b614:	681b      	ldr	r3, [r3, #0]
   1b616:	681b      	ldr	r3, [r3, #0]
   1b618:	2b00      	cmp	r3, #0
   1b61a:	d001      	beq.n	1b620 <xTaskIncrementTick+0x6c>
   1b61c:	b672      	cpsid	i
   1b61e:	e7fe      	b.n	1b61e <xTaskIncrementTick+0x6a>
   1b620:	4b51      	ldr	r3, [pc, #324]	; (1b768 <xTaskIncrementTick+0x1b4>)
   1b622:	681b      	ldr	r3, [r3, #0]
   1b624:	60fb      	str	r3, [r7, #12]
   1b626:	4b51      	ldr	r3, [pc, #324]	; (1b76c <xTaskIncrementTick+0x1b8>)
   1b628:	681a      	ldr	r2, [r3, #0]
   1b62a:	4b4f      	ldr	r3, [pc, #316]	; (1b768 <xTaskIncrementTick+0x1b4>)
   1b62c:	601a      	str	r2, [r3, #0]
   1b62e:	4b4f      	ldr	r3, [pc, #316]	; (1b76c <xTaskIncrementTick+0x1b8>)
   1b630:	68fa      	ldr	r2, [r7, #12]
   1b632:	601a      	str	r2, [r3, #0]
   1b634:	4b4e      	ldr	r3, [pc, #312]	; (1b770 <xTaskIncrementTick+0x1bc>)
   1b636:	681b      	ldr	r3, [r3, #0]
   1b638:	1c5a      	adds	r2, r3, #1
   1b63a:	4b4d      	ldr	r3, [pc, #308]	; (1b770 <xTaskIncrementTick+0x1bc>)
   1b63c:	601a      	str	r2, [r3, #0]
   1b63e:	4b4d      	ldr	r3, [pc, #308]	; (1b774 <xTaskIncrementTick+0x1c0>)
   1b640:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1b642:	4b4d      	ldr	r3, [pc, #308]	; (1b778 <xTaskIncrementTick+0x1c4>)
   1b644:	681b      	ldr	r3, [r3, #0]
   1b646:	693a      	ldr	r2, [r7, #16]
   1b648:	429a      	cmp	r2, r3
   1b64a:	d363      	bcc.n	1b714 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1b64c:	4b46      	ldr	r3, [pc, #280]	; (1b768 <xTaskIncrementTick+0x1b4>)
   1b64e:	681b      	ldr	r3, [r3, #0]
   1b650:	681b      	ldr	r3, [r3, #0]
   1b652:	2b00      	cmp	r3, #0
   1b654:	d101      	bne.n	1b65a <xTaskIncrementTick+0xa6>
   1b656:	2301      	movs	r3, #1
   1b658:	e000      	b.n	1b65c <xTaskIncrementTick+0xa8>
   1b65a:	2300      	movs	r3, #0
   1b65c:	2b00      	cmp	r3, #0
   1b65e:	d004      	beq.n	1b66a <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b660:	4b45      	ldr	r3, [pc, #276]	; (1b778 <xTaskIncrementTick+0x1c4>)
   1b662:	2201      	movs	r2, #1
   1b664:	4252      	negs	r2, r2
   1b666:	601a      	str	r2, [r3, #0]
					break;
   1b668:	e054      	b.n	1b714 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1b66a:	4b3f      	ldr	r3, [pc, #252]	; (1b768 <xTaskIncrementTick+0x1b4>)
   1b66c:	681b      	ldr	r3, [r3, #0]
   1b66e:	68db      	ldr	r3, [r3, #12]
   1b670:	68db      	ldr	r3, [r3, #12]
   1b672:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1b674:	68bb      	ldr	r3, [r7, #8]
   1b676:	685b      	ldr	r3, [r3, #4]
   1b678:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1b67a:	693a      	ldr	r2, [r7, #16]
   1b67c:	687b      	ldr	r3, [r7, #4]
   1b67e:	429a      	cmp	r2, r3
   1b680:	d203      	bcs.n	1b68a <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1b682:	4b3d      	ldr	r3, [pc, #244]	; (1b778 <xTaskIncrementTick+0x1c4>)
   1b684:	687a      	ldr	r2, [r7, #4]
   1b686:	601a      	str	r2, [r3, #0]
						break;
   1b688:	e044      	b.n	1b714 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1b68a:	68bb      	ldr	r3, [r7, #8]
   1b68c:	3304      	adds	r3, #4
   1b68e:	0018      	movs	r0, r3
   1b690:	4b3a      	ldr	r3, [pc, #232]	; (1b77c <xTaskIncrementTick+0x1c8>)
   1b692:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1b694:	68bb      	ldr	r3, [r7, #8]
   1b696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b698:	2b00      	cmp	r3, #0
   1b69a:	d004      	beq.n	1b6a6 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1b69c:	68bb      	ldr	r3, [r7, #8]
   1b69e:	3318      	adds	r3, #24
   1b6a0:	0018      	movs	r0, r3
   1b6a2:	4b36      	ldr	r3, [pc, #216]	; (1b77c <xTaskIncrementTick+0x1c8>)
   1b6a4:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1b6a6:	68bb      	ldr	r3, [r7, #8]
   1b6a8:	0018      	movs	r0, r3
   1b6aa:	4b35      	ldr	r3, [pc, #212]	; (1b780 <xTaskIncrementTick+0x1cc>)
   1b6ac:	4798      	blx	r3
   1b6ae:	0003      	movs	r3, r0
   1b6b0:	001a      	movs	r2, r3
   1b6b2:	4b34      	ldr	r3, [pc, #208]	; (1b784 <xTaskIncrementTick+0x1d0>)
   1b6b4:	881b      	ldrh	r3, [r3, #0]
   1b6b6:	4013      	ands	r3, r2
   1b6b8:	b29b      	uxth	r3, r3
   1b6ba:	2b00      	cmp	r3, #0
   1b6bc:	d008      	beq.n	1b6d0 <xTaskIncrementTick+0x11c>
   1b6be:	68bb      	ldr	r3, [r7, #8]
   1b6c0:	0018      	movs	r0, r3
   1b6c2:	4b31      	ldr	r3, [pc, #196]	; (1b788 <xTaskIncrementTick+0x1d4>)
   1b6c4:	4798      	blx	r3
   1b6c6:	0003      	movs	r3, r0
   1b6c8:	b2db      	uxtb	r3, r3
   1b6ca:	0018      	movs	r0, r3
   1b6cc:	4b2f      	ldr	r3, [pc, #188]	; (1b78c <xTaskIncrementTick+0x1d8>)
   1b6ce:	4798      	blx	r3
   1b6d0:	68bb      	ldr	r3, [r7, #8]
   1b6d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b6d4:	4b2e      	ldr	r3, [pc, #184]	; (1b790 <xTaskIncrementTick+0x1dc>)
   1b6d6:	681b      	ldr	r3, [r3, #0]
   1b6d8:	429a      	cmp	r2, r3
   1b6da:	d903      	bls.n	1b6e4 <xTaskIncrementTick+0x130>
   1b6dc:	68bb      	ldr	r3, [r7, #8]
   1b6de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b6e0:	4b2b      	ldr	r3, [pc, #172]	; (1b790 <xTaskIncrementTick+0x1dc>)
   1b6e2:	601a      	str	r2, [r3, #0]
   1b6e4:	68bb      	ldr	r3, [r7, #8]
   1b6e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b6e8:	0013      	movs	r3, r2
   1b6ea:	009b      	lsls	r3, r3, #2
   1b6ec:	189b      	adds	r3, r3, r2
   1b6ee:	009b      	lsls	r3, r3, #2
   1b6f0:	4a28      	ldr	r2, [pc, #160]	; (1b794 <xTaskIncrementTick+0x1e0>)
   1b6f2:	189a      	adds	r2, r3, r2
   1b6f4:	68bb      	ldr	r3, [r7, #8]
   1b6f6:	3304      	adds	r3, #4
   1b6f8:	0019      	movs	r1, r3
   1b6fa:	0010      	movs	r0, r2
   1b6fc:	4b26      	ldr	r3, [pc, #152]	; (1b798 <xTaskIncrementTick+0x1e4>)
   1b6fe:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1b700:	68bb      	ldr	r3, [r7, #8]
   1b702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b704:	4b25      	ldr	r3, [pc, #148]	; (1b79c <xTaskIncrementTick+0x1e8>)
   1b706:	681b      	ldr	r3, [r3, #0]
   1b708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b70a:	429a      	cmp	r2, r3
   1b70c:	d39e      	bcc.n	1b64c <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1b70e:	2301      	movs	r3, #1
   1b710:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1b712:	e79b      	b.n	1b64c <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1b714:	4b21      	ldr	r3, [pc, #132]	; (1b79c <xTaskIncrementTick+0x1e8>)
   1b716:	681b      	ldr	r3, [r3, #0]
   1b718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b71a:	491e      	ldr	r1, [pc, #120]	; (1b794 <xTaskIncrementTick+0x1e0>)
   1b71c:	0013      	movs	r3, r2
   1b71e:	009b      	lsls	r3, r3, #2
   1b720:	189b      	adds	r3, r3, r2
   1b722:	009b      	lsls	r3, r3, #2
   1b724:	585b      	ldr	r3, [r3, r1]
   1b726:	2b01      	cmp	r3, #1
   1b728:	d907      	bls.n	1b73a <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1b72a:	2301      	movs	r3, #1
   1b72c:	617b      	str	r3, [r7, #20]
   1b72e:	e004      	b.n	1b73a <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1b730:	4b08      	ldr	r3, [pc, #32]	; (1b754 <xTaskIncrementTick+0x1a0>)
   1b732:	681b      	ldr	r3, [r3, #0]
   1b734:	1c5a      	adds	r2, r3, #1
   1b736:	4b07      	ldr	r3, [pc, #28]	; (1b754 <xTaskIncrementTick+0x1a0>)
   1b738:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1b73a:	4b19      	ldr	r3, [pc, #100]	; (1b7a0 <xTaskIncrementTick+0x1ec>)
   1b73c:	681b      	ldr	r3, [r3, #0]
   1b73e:	2b00      	cmp	r3, #0
   1b740:	d001      	beq.n	1b746 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1b742:	2301      	movs	r3, #1
   1b744:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1b746:	697b      	ldr	r3, [r7, #20]
}
   1b748:	0018      	movs	r0, r3
   1b74a:	46bd      	mov	sp, r7
   1b74c:	b006      	add	sp, #24
   1b74e:	bd80      	pop	{r7, pc}
   1b750:	200041a8 	.word	0x200041a8
   1b754:	20004190 	.word	0x20004190
   1b758:	20000d08 	.word	0x20000d08
   1b75c:	00018de1 	.word	0x00018de1
   1b760:	20004184 	.word	0x20004184
   1b764:	00017e4d 	.word	0x00017e4d
   1b768:	20004138 	.word	0x20004138
   1b76c:	2000413c 	.word	0x2000413c
   1b770:	20004198 	.word	0x20004198
   1b774:	0001be15 	.word	0x0001be15
   1b778:	200041a0 	.word	0x200041a0
   1b77c:	00018fc7 	.word	0x00018fc7
   1b780:	0001714d 	.word	0x0001714d
   1b784:	20000100 	.word	0x20000100
   1b788:	0001712d 	.word	0x0001712d
   1b78c:	000178fd 	.word	0x000178fd
   1b790:	20004188 	.word	0x20004188
   1b794:	200040ac 	.word	0x200040ac
   1b798:	00018f17 	.word	0x00018f17
   1b79c:	200040a8 	.word	0x200040a8
   1b7a0:	20004194 	.word	0x20004194

0001b7a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1b7a4:	b580      	push	{r7, lr}
   1b7a6:	b082      	sub	sp, #8
   1b7a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1b7aa:	4b3a      	ldr	r3, [pc, #232]	; (1b894 <vTaskSwitchContext+0xf0>)
   1b7ac:	681b      	ldr	r3, [r3, #0]
   1b7ae:	2b00      	cmp	r3, #0
   1b7b0:	d003      	beq.n	1b7ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1b7b2:	4b39      	ldr	r3, [pc, #228]	; (1b898 <vTaskSwitchContext+0xf4>)
   1b7b4:	2201      	movs	r2, #1
   1b7b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1b7b8:	e067      	b.n	1b88a <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1b7ba:	4b37      	ldr	r3, [pc, #220]	; (1b898 <vTaskSwitchContext+0xf4>)
   1b7bc:	2200      	movs	r2, #0
   1b7be:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1b7c0:	4b36      	ldr	r3, [pc, #216]	; (1b89c <vTaskSwitchContext+0xf8>)
   1b7c2:	681b      	ldr	r3, [r3, #0]
   1b7c4:	681a      	ldr	r2, [r3, #0]
   1b7c6:	4b35      	ldr	r3, [pc, #212]	; (1b89c <vTaskSwitchContext+0xf8>)
   1b7c8:	681b      	ldr	r3, [r3, #0]
   1b7ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b7cc:	429a      	cmp	r2, r3
   1b7ce:	d808      	bhi.n	1b7e2 <vTaskSwitchContext+0x3e>
   1b7d0:	4b32      	ldr	r3, [pc, #200]	; (1b89c <vTaskSwitchContext+0xf8>)
   1b7d2:	681a      	ldr	r2, [r3, #0]
   1b7d4:	4b31      	ldr	r3, [pc, #196]	; (1b89c <vTaskSwitchContext+0xf8>)
   1b7d6:	681b      	ldr	r3, [r3, #0]
   1b7d8:	3334      	adds	r3, #52	; 0x34
   1b7da:	0019      	movs	r1, r3
   1b7dc:	0010      	movs	r0, r2
   1b7de:	4b30      	ldr	r3, [pc, #192]	; (1b8a0 <vTaskSwitchContext+0xfc>)
   1b7e0:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1b7e2:	4b30      	ldr	r3, [pc, #192]	; (1b8a4 <vTaskSwitchContext+0x100>)
   1b7e4:	681b      	ldr	r3, [r3, #0]
   1b7e6:	607b      	str	r3, [r7, #4]
   1b7e8:	e007      	b.n	1b7fa <vTaskSwitchContext+0x56>
   1b7ea:	687b      	ldr	r3, [r7, #4]
   1b7ec:	2b00      	cmp	r3, #0
   1b7ee:	d101      	bne.n	1b7f4 <vTaskSwitchContext+0x50>
   1b7f0:	b672      	cpsid	i
   1b7f2:	e7fe      	b.n	1b7f2 <vTaskSwitchContext+0x4e>
   1b7f4:	687b      	ldr	r3, [r7, #4]
   1b7f6:	3b01      	subs	r3, #1
   1b7f8:	607b      	str	r3, [r7, #4]
   1b7fa:	492b      	ldr	r1, [pc, #172]	; (1b8a8 <vTaskSwitchContext+0x104>)
   1b7fc:	687a      	ldr	r2, [r7, #4]
   1b7fe:	0013      	movs	r3, r2
   1b800:	009b      	lsls	r3, r3, #2
   1b802:	189b      	adds	r3, r3, r2
   1b804:	009b      	lsls	r3, r3, #2
   1b806:	585b      	ldr	r3, [r3, r1]
   1b808:	2b00      	cmp	r3, #0
   1b80a:	d0ee      	beq.n	1b7ea <vTaskSwitchContext+0x46>
   1b80c:	687a      	ldr	r2, [r7, #4]
   1b80e:	0013      	movs	r3, r2
   1b810:	009b      	lsls	r3, r3, #2
   1b812:	189b      	adds	r3, r3, r2
   1b814:	009b      	lsls	r3, r3, #2
   1b816:	4a24      	ldr	r2, [pc, #144]	; (1b8a8 <vTaskSwitchContext+0x104>)
   1b818:	189b      	adds	r3, r3, r2
   1b81a:	603b      	str	r3, [r7, #0]
   1b81c:	683b      	ldr	r3, [r7, #0]
   1b81e:	685b      	ldr	r3, [r3, #4]
   1b820:	685a      	ldr	r2, [r3, #4]
   1b822:	683b      	ldr	r3, [r7, #0]
   1b824:	605a      	str	r2, [r3, #4]
   1b826:	683b      	ldr	r3, [r7, #0]
   1b828:	685a      	ldr	r2, [r3, #4]
   1b82a:	683b      	ldr	r3, [r7, #0]
   1b82c:	3308      	adds	r3, #8
   1b82e:	429a      	cmp	r2, r3
   1b830:	d104      	bne.n	1b83c <vTaskSwitchContext+0x98>
   1b832:	683b      	ldr	r3, [r7, #0]
   1b834:	685b      	ldr	r3, [r3, #4]
   1b836:	685a      	ldr	r2, [r3, #4]
   1b838:	683b      	ldr	r3, [r7, #0]
   1b83a:	605a      	str	r2, [r3, #4]
   1b83c:	683b      	ldr	r3, [r7, #0]
   1b83e:	685b      	ldr	r3, [r3, #4]
   1b840:	68da      	ldr	r2, [r3, #12]
   1b842:	4b16      	ldr	r3, [pc, #88]	; (1b89c <vTaskSwitchContext+0xf8>)
   1b844:	601a      	str	r2, [r3, #0]
   1b846:	4b17      	ldr	r3, [pc, #92]	; (1b8a4 <vTaskSwitchContext+0x100>)
   1b848:	687a      	ldr	r2, [r7, #4]
   1b84a:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1b84c:	4b17      	ldr	r3, [pc, #92]	; (1b8ac <vTaskSwitchContext+0x108>)
   1b84e:	2201      	movs	r2, #1
   1b850:	601a      	str	r2, [r3, #0]
   1b852:	4b17      	ldr	r3, [pc, #92]	; (1b8b0 <vTaskSwitchContext+0x10c>)
   1b854:	4798      	blx	r3
   1b856:	0003      	movs	r3, r0
   1b858:	0018      	movs	r0, r3
   1b85a:	4b16      	ldr	r3, [pc, #88]	; (1b8b4 <vTaskSwitchContext+0x110>)
   1b85c:	4798      	blx	r3
   1b85e:	0003      	movs	r3, r0
   1b860:	001a      	movs	r2, r3
   1b862:	4b15      	ldr	r3, [pc, #84]	; (1b8b8 <vTaskSwitchContext+0x114>)
   1b864:	881b      	ldrh	r3, [r3, #0]
   1b866:	4013      	ands	r3, r2
   1b868:	b29b      	uxth	r3, r3
   1b86a:	2b00      	cmp	r3, #0
   1b86c:	d00a      	beq.n	1b884 <vTaskSwitchContext+0xe0>
   1b86e:	4b10      	ldr	r3, [pc, #64]	; (1b8b0 <vTaskSwitchContext+0x10c>)
   1b870:	4798      	blx	r3
   1b872:	0003      	movs	r3, r0
   1b874:	0018      	movs	r0, r3
   1b876:	4b11      	ldr	r3, [pc, #68]	; (1b8bc <vTaskSwitchContext+0x118>)
   1b878:	4798      	blx	r3
   1b87a:	0003      	movs	r3, r0
   1b87c:	b2db      	uxtb	r3, r3
   1b87e:	0018      	movs	r0, r3
   1b880:	4b0f      	ldr	r3, [pc, #60]	; (1b8c0 <vTaskSwitchContext+0x11c>)
   1b882:	4798      	blx	r3
   1b884:	4b09      	ldr	r3, [pc, #36]	; (1b8ac <vTaskSwitchContext+0x108>)
   1b886:	2202      	movs	r2, #2
   1b888:	601a      	str	r2, [r3, #0]
}
   1b88a:	46c0      	nop			; (mov r8, r8)
   1b88c:	46bd      	mov	sp, r7
   1b88e:	b002      	add	sp, #8
   1b890:	bd80      	pop	{r7, pc}
   1b892:	46c0      	nop			; (mov r8, r8)
   1b894:	200041a8 	.word	0x200041a8
   1b898:	20004194 	.word	0x20004194
   1b89c:	200040a8 	.word	0x200040a8
   1b8a0:	00031aad 	.word	0x00031aad
   1b8a4:	20004188 	.word	0x20004188
   1b8a8:	200040ac 	.word	0x200040ac
   1b8ac:	20000d14 	.word	0x20000d14
   1b8b0:	000173e9 	.word	0x000173e9
   1b8b4:	0001714d 	.word	0x0001714d
   1b8b8:	20000100 	.word	0x20000100
   1b8bc:	0001712d 	.word	0x0001712d
   1b8c0:	00017f49 	.word	0x00017f49

0001b8c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1b8c4:	b580      	push	{r7, lr}
   1b8c6:	b082      	sub	sp, #8
   1b8c8:	af00      	add	r7, sp, #0
   1b8ca:	6078      	str	r0, [r7, #4]
   1b8cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1b8ce:	687b      	ldr	r3, [r7, #4]
   1b8d0:	2b00      	cmp	r3, #0
   1b8d2:	d101      	bne.n	1b8d8 <vTaskPlaceOnEventList+0x14>
   1b8d4:	b672      	cpsid	i
   1b8d6:	e7fe      	b.n	1b8d6 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1b8d8:	4b08      	ldr	r3, [pc, #32]	; (1b8fc <vTaskPlaceOnEventList+0x38>)
   1b8da:	681b      	ldr	r3, [r3, #0]
   1b8dc:	3318      	adds	r3, #24
   1b8de:	001a      	movs	r2, r3
   1b8e0:	687b      	ldr	r3, [r7, #4]
   1b8e2:	0011      	movs	r1, r2
   1b8e4:	0018      	movs	r0, r3
   1b8e6:	4b06      	ldr	r3, [pc, #24]	; (1b900 <vTaskPlaceOnEventList+0x3c>)
   1b8e8:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1b8ea:	683b      	ldr	r3, [r7, #0]
   1b8ec:	2101      	movs	r1, #1
   1b8ee:	0018      	movs	r0, r3
   1b8f0:	4b04      	ldr	r3, [pc, #16]	; (1b904 <vTaskPlaceOnEventList+0x40>)
   1b8f2:	4798      	blx	r3
}
   1b8f4:	46c0      	nop			; (mov r8, r8)
   1b8f6:	46bd      	mov	sp, r7
   1b8f8:	b002      	add	sp, #8
   1b8fa:	bd80      	pop	{r7, pc}
   1b8fc:	200040a8 	.word	0x200040a8
   1b900:	00018f5b 	.word	0x00018f5b
   1b904:	0001c369 	.word	0x0001c369

0001b908 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1b908:	b580      	push	{r7, lr}
   1b90a:	b084      	sub	sp, #16
   1b90c:	af00      	add	r7, sp, #0
   1b90e:	60f8      	str	r0, [r7, #12]
   1b910:	60b9      	str	r1, [r7, #8]
   1b912:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1b914:	68fb      	ldr	r3, [r7, #12]
   1b916:	2b00      	cmp	r3, #0
   1b918:	d101      	bne.n	1b91e <vTaskPlaceOnEventListRestricted+0x16>
   1b91a:	b672      	cpsid	i
   1b91c:	e7fe      	b.n	1b91c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1b91e:	4b28      	ldr	r3, [pc, #160]	; (1b9c0 <vTaskPlaceOnEventListRestricted+0xb8>)
   1b920:	681b      	ldr	r3, [r3, #0]
   1b922:	3318      	adds	r3, #24
   1b924:	001a      	movs	r2, r3
   1b926:	68fb      	ldr	r3, [r7, #12]
   1b928:	0011      	movs	r1, r2
   1b92a:	0018      	movs	r0, r3
   1b92c:	4b25      	ldr	r3, [pc, #148]	; (1b9c4 <vTaskPlaceOnEventListRestricted+0xbc>)
   1b92e:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1b930:	687b      	ldr	r3, [r7, #4]
   1b932:	2b00      	cmp	r3, #0
   1b934:	d002      	beq.n	1b93c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1b936:	2301      	movs	r3, #1
   1b938:	425b      	negs	r3, r3
   1b93a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1b93c:	4b20      	ldr	r3, [pc, #128]	; (1b9c0 <vTaskPlaceOnEventListRestricted+0xb8>)
   1b93e:	681b      	ldr	r3, [r3, #0]
   1b940:	0018      	movs	r0, r3
   1b942:	4b21      	ldr	r3, [pc, #132]	; (1b9c8 <vTaskPlaceOnEventListRestricted+0xc0>)
   1b944:	4798      	blx	r3
   1b946:	0003      	movs	r3, r0
   1b948:	001a      	movs	r2, r3
   1b94a:	4b20      	ldr	r3, [pc, #128]	; (1b9cc <vTaskPlaceOnEventListRestricted+0xc4>)
   1b94c:	881b      	ldrh	r3, [r3, #0]
   1b94e:	4013      	ands	r3, r2
   1b950:	b29b      	uxth	r3, r3
   1b952:	2b00      	cmp	r3, #0
   1b954:	d011      	beq.n	1b97a <vTaskPlaceOnEventListRestricted+0x72>
   1b956:	4b1e      	ldr	r3, [pc, #120]	; (1b9d0 <vTaskPlaceOnEventListRestricted+0xc8>)
   1b958:	681a      	ldr	r2, [r3, #0]
   1b95a:	68bb      	ldr	r3, [r7, #8]
   1b95c:	18d3      	adds	r3, r2, r3
   1b95e:	0019      	movs	r1, r3
   1b960:	2088      	movs	r0, #136	; 0x88
   1b962:	4b1c      	ldr	r3, [pc, #112]	; (1b9d4 <vTaskPlaceOnEventListRestricted+0xcc>)
   1b964:	4798      	blx	r3
   1b966:	4b16      	ldr	r3, [pc, #88]	; (1b9c0 <vTaskPlaceOnEventListRestricted+0xb8>)
   1b968:	681b      	ldr	r3, [r3, #0]
   1b96a:	0018      	movs	r0, r3
   1b96c:	4b1a      	ldr	r3, [pc, #104]	; (1b9d8 <vTaskPlaceOnEventListRestricted+0xd0>)
   1b96e:	4798      	blx	r3
   1b970:	0003      	movs	r3, r0
   1b972:	b2db      	uxtb	r3, r3
   1b974:	0018      	movs	r0, r3
   1b976:	4b19      	ldr	r3, [pc, #100]	; (1b9dc <vTaskPlaceOnEventListRestricted+0xd4>)
   1b978:	4798      	blx	r3
   1b97a:	4b19      	ldr	r3, [pc, #100]	; (1b9e0 <vTaskPlaceOnEventListRestricted+0xd8>)
   1b97c:	4798      	blx	r3
   1b97e:	0003      	movs	r3, r0
   1b980:	0018      	movs	r0, r3
   1b982:	4b11      	ldr	r3, [pc, #68]	; (1b9c8 <vTaskPlaceOnEventListRestricted+0xc0>)
   1b984:	4798      	blx	r3
   1b986:	0003      	movs	r3, r0
   1b988:	001a      	movs	r2, r3
   1b98a:	4b10      	ldr	r3, [pc, #64]	; (1b9cc <vTaskPlaceOnEventListRestricted+0xc4>)
   1b98c:	881b      	ldrh	r3, [r3, #0]
   1b98e:	4013      	ands	r3, r2
   1b990:	b29b      	uxth	r3, r3
   1b992:	2b00      	cmp	r3, #0
   1b994:	d00a      	beq.n	1b9ac <vTaskPlaceOnEventListRestricted+0xa4>
   1b996:	4b12      	ldr	r3, [pc, #72]	; (1b9e0 <vTaskPlaceOnEventListRestricted+0xd8>)
   1b998:	4798      	blx	r3
   1b99a:	0003      	movs	r3, r0
   1b99c:	0018      	movs	r0, r3
   1b99e:	4b0e      	ldr	r3, [pc, #56]	; (1b9d8 <vTaskPlaceOnEventListRestricted+0xd0>)
   1b9a0:	4798      	blx	r3
   1b9a2:	0003      	movs	r3, r0
   1b9a4:	b2db      	uxtb	r3, r3
   1b9a6:	0018      	movs	r0, r3
   1b9a8:	4b0c      	ldr	r3, [pc, #48]	; (1b9dc <vTaskPlaceOnEventListRestricted+0xd4>)
   1b9aa:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1b9ac:	687a      	ldr	r2, [r7, #4]
   1b9ae:	68bb      	ldr	r3, [r7, #8]
   1b9b0:	0011      	movs	r1, r2
   1b9b2:	0018      	movs	r0, r3
   1b9b4:	4b0b      	ldr	r3, [pc, #44]	; (1b9e4 <vTaskPlaceOnEventListRestricted+0xdc>)
   1b9b6:	4798      	blx	r3
	}
   1b9b8:	46c0      	nop			; (mov r8, r8)
   1b9ba:	46bd      	mov	sp, r7
   1b9bc:	b004      	add	sp, #16
   1b9be:	bd80      	pop	{r7, pc}
   1b9c0:	200040a8 	.word	0x200040a8
   1b9c4:	00018f17 	.word	0x00018f17
   1b9c8:	0001714d 	.word	0x0001714d
   1b9cc:	20000100 	.word	0x20000100
   1b9d0:	20004184 	.word	0x20004184
   1b9d4:	00017e4d 	.word	0x00017e4d
   1b9d8:	0001712d 	.word	0x0001712d
   1b9dc:	000182dd 	.word	0x000182dd
   1b9e0:	000173e9 	.word	0x000173e9
   1b9e4:	0001c369 	.word	0x0001c369

0001b9e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1b9e8:	b580      	push	{r7, lr}
   1b9ea:	b084      	sub	sp, #16
   1b9ec:	af00      	add	r7, sp, #0
   1b9ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1b9f0:	687b      	ldr	r3, [r7, #4]
   1b9f2:	68db      	ldr	r3, [r3, #12]
   1b9f4:	68db      	ldr	r3, [r3, #12]
   1b9f6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1b9f8:	68bb      	ldr	r3, [r7, #8]
   1b9fa:	2b00      	cmp	r3, #0
   1b9fc:	d101      	bne.n	1ba02 <xTaskRemoveFromEventList+0x1a>
   1b9fe:	b672      	cpsid	i
   1ba00:	e7fe      	b.n	1ba00 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1ba02:	68bb      	ldr	r3, [r7, #8]
   1ba04:	3318      	adds	r3, #24
   1ba06:	0018      	movs	r0, r3
   1ba08:	4b2a      	ldr	r3, [pc, #168]	; (1bab4 <xTaskRemoveFromEventList+0xcc>)
   1ba0a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1ba0c:	4b2a      	ldr	r3, [pc, #168]	; (1bab8 <xTaskRemoveFromEventList+0xd0>)
   1ba0e:	681b      	ldr	r3, [r3, #0]
   1ba10:	2b00      	cmp	r3, #0
   1ba12:	d132      	bne.n	1ba7a <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1ba14:	68bb      	ldr	r3, [r7, #8]
   1ba16:	3304      	adds	r3, #4
   1ba18:	0018      	movs	r0, r3
   1ba1a:	4b26      	ldr	r3, [pc, #152]	; (1bab4 <xTaskRemoveFromEventList+0xcc>)
   1ba1c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1ba1e:	68bb      	ldr	r3, [r7, #8]
   1ba20:	0018      	movs	r0, r3
   1ba22:	4b26      	ldr	r3, [pc, #152]	; (1babc <xTaskRemoveFromEventList+0xd4>)
   1ba24:	4798      	blx	r3
   1ba26:	0003      	movs	r3, r0
   1ba28:	001a      	movs	r2, r3
   1ba2a:	4b25      	ldr	r3, [pc, #148]	; (1bac0 <xTaskRemoveFromEventList+0xd8>)
   1ba2c:	881b      	ldrh	r3, [r3, #0]
   1ba2e:	4013      	ands	r3, r2
   1ba30:	b29b      	uxth	r3, r3
   1ba32:	2b00      	cmp	r3, #0
   1ba34:	d008      	beq.n	1ba48 <xTaskRemoveFromEventList+0x60>
   1ba36:	68bb      	ldr	r3, [r7, #8]
   1ba38:	0018      	movs	r0, r3
   1ba3a:	4b22      	ldr	r3, [pc, #136]	; (1bac4 <xTaskRemoveFromEventList+0xdc>)
   1ba3c:	4798      	blx	r3
   1ba3e:	0003      	movs	r3, r0
   1ba40:	b2db      	uxtb	r3, r3
   1ba42:	0018      	movs	r0, r3
   1ba44:	4b20      	ldr	r3, [pc, #128]	; (1bac8 <xTaskRemoveFromEventList+0xe0>)
   1ba46:	4798      	blx	r3
   1ba48:	68bb      	ldr	r3, [r7, #8]
   1ba4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ba4c:	4b1f      	ldr	r3, [pc, #124]	; (1bacc <xTaskRemoveFromEventList+0xe4>)
   1ba4e:	681b      	ldr	r3, [r3, #0]
   1ba50:	429a      	cmp	r2, r3
   1ba52:	d903      	bls.n	1ba5c <xTaskRemoveFromEventList+0x74>
   1ba54:	68bb      	ldr	r3, [r7, #8]
   1ba56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ba58:	4b1c      	ldr	r3, [pc, #112]	; (1bacc <xTaskRemoveFromEventList+0xe4>)
   1ba5a:	601a      	str	r2, [r3, #0]
   1ba5c:	68bb      	ldr	r3, [r7, #8]
   1ba5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ba60:	0013      	movs	r3, r2
   1ba62:	009b      	lsls	r3, r3, #2
   1ba64:	189b      	adds	r3, r3, r2
   1ba66:	009b      	lsls	r3, r3, #2
   1ba68:	4a19      	ldr	r2, [pc, #100]	; (1bad0 <xTaskRemoveFromEventList+0xe8>)
   1ba6a:	189a      	adds	r2, r3, r2
   1ba6c:	68bb      	ldr	r3, [r7, #8]
   1ba6e:	3304      	adds	r3, #4
   1ba70:	0019      	movs	r1, r3
   1ba72:	0010      	movs	r0, r2
   1ba74:	4b17      	ldr	r3, [pc, #92]	; (1bad4 <xTaskRemoveFromEventList+0xec>)
   1ba76:	4798      	blx	r3
   1ba78:	e007      	b.n	1ba8a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1ba7a:	68bb      	ldr	r3, [r7, #8]
   1ba7c:	3318      	adds	r3, #24
   1ba7e:	001a      	movs	r2, r3
   1ba80:	4b15      	ldr	r3, [pc, #84]	; (1bad8 <xTaskRemoveFromEventList+0xf0>)
   1ba82:	0011      	movs	r1, r2
   1ba84:	0018      	movs	r0, r3
   1ba86:	4b13      	ldr	r3, [pc, #76]	; (1bad4 <xTaskRemoveFromEventList+0xec>)
   1ba88:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1ba8a:	68bb      	ldr	r3, [r7, #8]
   1ba8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ba8e:	4b13      	ldr	r3, [pc, #76]	; (1badc <xTaskRemoveFromEventList+0xf4>)
   1ba90:	681b      	ldr	r3, [r3, #0]
   1ba92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ba94:	429a      	cmp	r2, r3
   1ba96:	d905      	bls.n	1baa4 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1ba98:	2301      	movs	r3, #1
   1ba9a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1ba9c:	4b10      	ldr	r3, [pc, #64]	; (1bae0 <xTaskRemoveFromEventList+0xf8>)
   1ba9e:	2201      	movs	r2, #1
   1baa0:	601a      	str	r2, [r3, #0]
   1baa2:	e001      	b.n	1baa8 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1baa4:	2300      	movs	r3, #0
   1baa6:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1baa8:	68fb      	ldr	r3, [r7, #12]
}
   1baaa:	0018      	movs	r0, r3
   1baac:	46bd      	mov	sp, r7
   1baae:	b004      	add	sp, #16
   1bab0:	bd80      	pop	{r7, pc}
   1bab2:	46c0      	nop			; (mov r8, r8)
   1bab4:	00018fc7 	.word	0x00018fc7
   1bab8:	200041a8 	.word	0x200041a8
   1babc:	0001714d 	.word	0x0001714d
   1bac0:	20000100 	.word	0x20000100
   1bac4:	0001712d 	.word	0x0001712d
   1bac8:	000178fd 	.word	0x000178fd
   1bacc:	20004188 	.word	0x20004188
   1bad0:	200040ac 	.word	0x200040ac
   1bad4:	00018f17 	.word	0x00018f17
   1bad8:	20004140 	.word	0x20004140
   1badc:	200040a8 	.word	0x200040a8
   1bae0:	20004194 	.word	0x20004194

0001bae4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1bae4:	b580      	push	{r7, lr}
   1bae6:	b082      	sub	sp, #8
   1bae8:	af00      	add	r7, sp, #0
   1baea:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1baec:	687b      	ldr	r3, [r7, #4]
   1baee:	2b00      	cmp	r3, #0
   1baf0:	d101      	bne.n	1baf6 <vTaskSetTimeOutState+0x12>
   1baf2:	b672      	cpsid	i
   1baf4:	e7fe      	b.n	1baf4 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1baf6:	4b08      	ldr	r3, [pc, #32]	; (1bb18 <vTaskSetTimeOutState+0x34>)
   1baf8:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1bafa:	4b08      	ldr	r3, [pc, #32]	; (1bb1c <vTaskSetTimeOutState+0x38>)
   1bafc:	681a      	ldr	r2, [r3, #0]
   1bafe:	687b      	ldr	r3, [r7, #4]
   1bb00:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1bb02:	4b07      	ldr	r3, [pc, #28]	; (1bb20 <vTaskSetTimeOutState+0x3c>)
   1bb04:	681a      	ldr	r2, [r3, #0]
   1bb06:	687b      	ldr	r3, [r7, #4]
   1bb08:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1bb0a:	4b06      	ldr	r3, [pc, #24]	; (1bb24 <vTaskSetTimeOutState+0x40>)
   1bb0c:	4798      	blx	r3
}
   1bb0e:	46c0      	nop			; (mov r8, r8)
   1bb10:	46bd      	mov	sp, r7
   1bb12:	b002      	add	sp, #8
   1bb14:	bd80      	pop	{r7, pc}
   1bb16:	46c0      	nop			; (mov r8, r8)
   1bb18:	00019159 	.word	0x00019159
   1bb1c:	20004198 	.word	0x20004198
   1bb20:	20004184 	.word	0x20004184
   1bb24:	0001917d 	.word	0x0001917d

0001bb28 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1bb28:	b580      	push	{r7, lr}
   1bb2a:	b082      	sub	sp, #8
   1bb2c:	af00      	add	r7, sp, #0
   1bb2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1bb30:	4b05      	ldr	r3, [pc, #20]	; (1bb48 <vTaskInternalSetTimeOutState+0x20>)
   1bb32:	681a      	ldr	r2, [r3, #0]
   1bb34:	687b      	ldr	r3, [r7, #4]
   1bb36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1bb38:	4b04      	ldr	r3, [pc, #16]	; (1bb4c <vTaskInternalSetTimeOutState+0x24>)
   1bb3a:	681a      	ldr	r2, [r3, #0]
   1bb3c:	687b      	ldr	r3, [r7, #4]
   1bb3e:	605a      	str	r2, [r3, #4]
}
   1bb40:	46c0      	nop			; (mov r8, r8)
   1bb42:	46bd      	mov	sp, r7
   1bb44:	b002      	add	sp, #8
   1bb46:	bd80      	pop	{r7, pc}
   1bb48:	20004198 	.word	0x20004198
   1bb4c:	20004184 	.word	0x20004184

0001bb50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1bb50:	b580      	push	{r7, lr}
   1bb52:	b086      	sub	sp, #24
   1bb54:	af00      	add	r7, sp, #0
   1bb56:	6078      	str	r0, [r7, #4]
   1bb58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1bb5a:	687b      	ldr	r3, [r7, #4]
   1bb5c:	2b00      	cmp	r3, #0
   1bb5e:	d101      	bne.n	1bb64 <xTaskCheckForTimeOut+0x14>
   1bb60:	b672      	cpsid	i
   1bb62:	e7fe      	b.n	1bb62 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1bb64:	683b      	ldr	r3, [r7, #0]
   1bb66:	2b00      	cmp	r3, #0
   1bb68:	d101      	bne.n	1bb6e <xTaskCheckForTimeOut+0x1e>
   1bb6a:	b672      	cpsid	i
   1bb6c:	e7fe      	b.n	1bb6c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1bb6e:	4b1e      	ldr	r3, [pc, #120]	; (1bbe8 <xTaskCheckForTimeOut+0x98>)
   1bb70:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1bb72:	4b1e      	ldr	r3, [pc, #120]	; (1bbec <xTaskCheckForTimeOut+0x9c>)
   1bb74:	681b      	ldr	r3, [r3, #0]
   1bb76:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1bb78:	687b      	ldr	r3, [r7, #4]
   1bb7a:	685b      	ldr	r3, [r3, #4]
   1bb7c:	693a      	ldr	r2, [r7, #16]
   1bb7e:	1ad3      	subs	r3, r2, r3
   1bb80:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1bb82:	683b      	ldr	r3, [r7, #0]
   1bb84:	681b      	ldr	r3, [r3, #0]
   1bb86:	3301      	adds	r3, #1
   1bb88:	d102      	bne.n	1bb90 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1bb8a:	2300      	movs	r3, #0
   1bb8c:	617b      	str	r3, [r7, #20]
   1bb8e:	e024      	b.n	1bbda <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1bb90:	687b      	ldr	r3, [r7, #4]
   1bb92:	681a      	ldr	r2, [r3, #0]
   1bb94:	4b16      	ldr	r3, [pc, #88]	; (1bbf0 <xTaskCheckForTimeOut+0xa0>)
   1bb96:	681b      	ldr	r3, [r3, #0]
   1bb98:	429a      	cmp	r2, r3
   1bb9a:	d007      	beq.n	1bbac <xTaskCheckForTimeOut+0x5c>
   1bb9c:	687b      	ldr	r3, [r7, #4]
   1bb9e:	685a      	ldr	r2, [r3, #4]
   1bba0:	693b      	ldr	r3, [r7, #16]
   1bba2:	429a      	cmp	r2, r3
   1bba4:	d802      	bhi.n	1bbac <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1bba6:	2301      	movs	r3, #1
   1bba8:	617b      	str	r3, [r7, #20]
   1bbaa:	e016      	b.n	1bbda <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1bbac:	683b      	ldr	r3, [r7, #0]
   1bbae:	681a      	ldr	r2, [r3, #0]
   1bbb0:	68fb      	ldr	r3, [r7, #12]
   1bbb2:	429a      	cmp	r2, r3
   1bbb4:	d90c      	bls.n	1bbd0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1bbb6:	683b      	ldr	r3, [r7, #0]
   1bbb8:	681a      	ldr	r2, [r3, #0]
   1bbba:	68fb      	ldr	r3, [r7, #12]
   1bbbc:	1ad2      	subs	r2, r2, r3
   1bbbe:	683b      	ldr	r3, [r7, #0]
   1bbc0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1bbc2:	687b      	ldr	r3, [r7, #4]
   1bbc4:	0018      	movs	r0, r3
   1bbc6:	4b0b      	ldr	r3, [pc, #44]	; (1bbf4 <xTaskCheckForTimeOut+0xa4>)
   1bbc8:	4798      	blx	r3
			xReturn = pdFALSE;
   1bbca:	2300      	movs	r3, #0
   1bbcc:	617b      	str	r3, [r7, #20]
   1bbce:	e004      	b.n	1bbda <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1bbd0:	683b      	ldr	r3, [r7, #0]
   1bbd2:	2200      	movs	r2, #0
   1bbd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1bbd6:	2301      	movs	r3, #1
   1bbd8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1bbda:	4b07      	ldr	r3, [pc, #28]	; (1bbf8 <xTaskCheckForTimeOut+0xa8>)
   1bbdc:	4798      	blx	r3

	return xReturn;
   1bbde:	697b      	ldr	r3, [r7, #20]
}
   1bbe0:	0018      	movs	r0, r3
   1bbe2:	46bd      	mov	sp, r7
   1bbe4:	b006      	add	sp, #24
   1bbe6:	bd80      	pop	{r7, pc}
   1bbe8:	00019159 	.word	0x00019159
   1bbec:	20004184 	.word	0x20004184
   1bbf0:	20004198 	.word	0x20004198
   1bbf4:	0001bb29 	.word	0x0001bb29
   1bbf8:	0001917d 	.word	0x0001917d

0001bbfc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1bbfc:	b580      	push	{r7, lr}
   1bbfe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1bc00:	4b02      	ldr	r3, [pc, #8]	; (1bc0c <vTaskMissedYield+0x10>)
   1bc02:	2201      	movs	r2, #1
   1bc04:	601a      	str	r2, [r3, #0]
}
   1bc06:	46c0      	nop			; (mov r8, r8)
   1bc08:	46bd      	mov	sp, r7
   1bc0a:	bd80      	pop	{r7, pc}
   1bc0c:	20004194 	.word	0x20004194

0001bc10 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1bc10:	b580      	push	{r7, lr}
   1bc12:	b084      	sub	sp, #16
   1bc14:	af00      	add	r7, sp, #0
   1bc16:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1bc18:	687b      	ldr	r3, [r7, #4]
   1bc1a:	2b00      	cmp	r3, #0
   1bc1c:	d005      	beq.n	1bc2a <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1bc1e:	687b      	ldr	r3, [r7, #4]
   1bc20:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1bc22:	68bb      	ldr	r3, [r7, #8]
   1bc24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bc26:	60fb      	str	r3, [r7, #12]
   1bc28:	e001      	b.n	1bc2e <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1bc2a:	2300      	movs	r3, #0
   1bc2c:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1bc2e:	68fb      	ldr	r3, [r7, #12]
	}
   1bc30:	0018      	movs	r0, r3
   1bc32:	46bd      	mov	sp, r7
   1bc34:	b004      	add	sp, #16
   1bc36:	bd80      	pop	{r7, pc}

0001bc38 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1bc38:	b580      	push	{r7, lr}
   1bc3a:	b084      	sub	sp, #16
   1bc3c:	af00      	add	r7, sp, #0
   1bc3e:	6078      	str	r0, [r7, #4]
   1bc40:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1bc42:	687b      	ldr	r3, [r7, #4]
   1bc44:	2b00      	cmp	r3, #0
   1bc46:	d004      	beq.n	1bc52 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1bc48:	687b      	ldr	r3, [r7, #4]
   1bc4a:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1bc4c:	68fb      	ldr	r3, [r7, #12]
   1bc4e:	683a      	ldr	r2, [r7, #0]
   1bc50:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1bc52:	46c0      	nop			; (mov r8, r8)
   1bc54:	46bd      	mov	sp, r7
   1bc56:	b004      	add	sp, #16
   1bc58:	bd80      	pop	{r7, pc}
	...

0001bc5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1bc5c:	b580      	push	{r7, lr}
   1bc5e:	b082      	sub	sp, #8
   1bc60:	af00      	add	r7, sp, #0
   1bc62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1bc64:	4b04      	ldr	r3, [pc, #16]	; (1bc78 <prvIdleTask+0x1c>)
   1bc66:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1bc68:	4b04      	ldr	r3, [pc, #16]	; (1bc7c <prvIdleTask+0x20>)
   1bc6a:	681b      	ldr	r3, [r3, #0]
   1bc6c:	2b01      	cmp	r3, #1
   1bc6e:	d9f9      	bls.n	1bc64 <prvIdleTask+0x8>
			{
				taskYIELD();
   1bc70:	4b03      	ldr	r3, [pc, #12]	; (1bc80 <prvIdleTask+0x24>)
   1bc72:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1bc74:	e7f6      	b.n	1bc64 <prvIdleTask+0x8>
   1bc76:	46c0      	nop			; (mov r8, r8)
   1bc78:	0001bd11 	.word	0x0001bd11
   1bc7c:	200040ac 	.word	0x200040ac
   1bc80:	00019141 	.word	0x00019141

0001bc84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1bc84:	b580      	push	{r7, lr}
   1bc86:	b082      	sub	sp, #8
   1bc88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1bc8a:	2300      	movs	r3, #0
   1bc8c:	607b      	str	r3, [r7, #4]
   1bc8e:	e00c      	b.n	1bcaa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1bc90:	687a      	ldr	r2, [r7, #4]
   1bc92:	0013      	movs	r3, r2
   1bc94:	009b      	lsls	r3, r3, #2
   1bc96:	189b      	adds	r3, r3, r2
   1bc98:	009b      	lsls	r3, r3, #2
   1bc9a:	4a14      	ldr	r2, [pc, #80]	; (1bcec <prvInitialiseTaskLists+0x68>)
   1bc9c:	189b      	adds	r3, r3, r2
   1bc9e:	0018      	movs	r0, r3
   1bca0:	4b13      	ldr	r3, [pc, #76]	; (1bcf0 <prvInitialiseTaskLists+0x6c>)
   1bca2:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1bca4:	687b      	ldr	r3, [r7, #4]
   1bca6:	3301      	adds	r3, #1
   1bca8:	607b      	str	r3, [r7, #4]
   1bcaa:	687b      	ldr	r3, [r7, #4]
   1bcac:	2b04      	cmp	r3, #4
   1bcae:	d9ef      	bls.n	1bc90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1bcb0:	4b10      	ldr	r3, [pc, #64]	; (1bcf4 <prvInitialiseTaskLists+0x70>)
   1bcb2:	0018      	movs	r0, r3
   1bcb4:	4b0e      	ldr	r3, [pc, #56]	; (1bcf0 <prvInitialiseTaskLists+0x6c>)
   1bcb6:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1bcb8:	4b0f      	ldr	r3, [pc, #60]	; (1bcf8 <prvInitialiseTaskLists+0x74>)
   1bcba:	0018      	movs	r0, r3
   1bcbc:	4b0c      	ldr	r3, [pc, #48]	; (1bcf0 <prvInitialiseTaskLists+0x6c>)
   1bcbe:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1bcc0:	4b0e      	ldr	r3, [pc, #56]	; (1bcfc <prvInitialiseTaskLists+0x78>)
   1bcc2:	0018      	movs	r0, r3
   1bcc4:	4b0a      	ldr	r3, [pc, #40]	; (1bcf0 <prvInitialiseTaskLists+0x6c>)
   1bcc6:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1bcc8:	4b0d      	ldr	r3, [pc, #52]	; (1bd00 <prvInitialiseTaskLists+0x7c>)
   1bcca:	0018      	movs	r0, r3
   1bccc:	4b08      	ldr	r3, [pc, #32]	; (1bcf0 <prvInitialiseTaskLists+0x6c>)
   1bcce:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1bcd0:	4b0c      	ldr	r3, [pc, #48]	; (1bd04 <prvInitialiseTaskLists+0x80>)
   1bcd2:	0018      	movs	r0, r3
   1bcd4:	4b06      	ldr	r3, [pc, #24]	; (1bcf0 <prvInitialiseTaskLists+0x6c>)
   1bcd6:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1bcd8:	4b0b      	ldr	r3, [pc, #44]	; (1bd08 <prvInitialiseTaskLists+0x84>)
   1bcda:	4a06      	ldr	r2, [pc, #24]	; (1bcf4 <prvInitialiseTaskLists+0x70>)
   1bcdc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1bcde:	4b0b      	ldr	r3, [pc, #44]	; (1bd0c <prvInitialiseTaskLists+0x88>)
   1bce0:	4a05      	ldr	r2, [pc, #20]	; (1bcf8 <prvInitialiseTaskLists+0x74>)
   1bce2:	601a      	str	r2, [r3, #0]
}
   1bce4:	46c0      	nop			; (mov r8, r8)
   1bce6:	46bd      	mov	sp, r7
   1bce8:	b002      	add	sp, #8
   1bcea:	bd80      	pop	{r7, pc}
   1bcec:	200040ac 	.word	0x200040ac
   1bcf0:	00018ec5 	.word	0x00018ec5
   1bcf4:	20004110 	.word	0x20004110
   1bcf8:	20004124 	.word	0x20004124
   1bcfc:	20004140 	.word	0x20004140
   1bd00:	20004154 	.word	0x20004154
   1bd04:	2000416c 	.word	0x2000416c
   1bd08:	20004138 	.word	0x20004138
   1bd0c:	2000413c 	.word	0x2000413c

0001bd10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1bd10:	b580      	push	{r7, lr}
   1bd12:	b082      	sub	sp, #8
   1bd14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1bd16:	e01a      	b.n	1bd4e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1bd18:	4b11      	ldr	r3, [pc, #68]	; (1bd60 <prvCheckTasksWaitingTermination+0x50>)
   1bd1a:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1bd1c:	4b11      	ldr	r3, [pc, #68]	; (1bd64 <prvCheckTasksWaitingTermination+0x54>)
   1bd1e:	68db      	ldr	r3, [r3, #12]
   1bd20:	68db      	ldr	r3, [r3, #12]
   1bd22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1bd24:	687b      	ldr	r3, [r7, #4]
   1bd26:	3304      	adds	r3, #4
   1bd28:	0018      	movs	r0, r3
   1bd2a:	4b0f      	ldr	r3, [pc, #60]	; (1bd68 <prvCheckTasksWaitingTermination+0x58>)
   1bd2c:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1bd2e:	4b0f      	ldr	r3, [pc, #60]	; (1bd6c <prvCheckTasksWaitingTermination+0x5c>)
   1bd30:	681b      	ldr	r3, [r3, #0]
   1bd32:	1e5a      	subs	r2, r3, #1
   1bd34:	4b0d      	ldr	r3, [pc, #52]	; (1bd6c <prvCheckTasksWaitingTermination+0x5c>)
   1bd36:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1bd38:	4b0d      	ldr	r3, [pc, #52]	; (1bd70 <prvCheckTasksWaitingTermination+0x60>)
   1bd3a:	681b      	ldr	r3, [r3, #0]
   1bd3c:	1e5a      	subs	r2, r3, #1
   1bd3e:	4b0c      	ldr	r3, [pc, #48]	; (1bd70 <prvCheckTasksWaitingTermination+0x60>)
   1bd40:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1bd42:	4b0c      	ldr	r3, [pc, #48]	; (1bd74 <prvCheckTasksWaitingTermination+0x64>)
   1bd44:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1bd46:	687b      	ldr	r3, [r7, #4]
   1bd48:	0018      	movs	r0, r3
   1bd4a:	4b0b      	ldr	r3, [pc, #44]	; (1bd78 <prvCheckTasksWaitingTermination+0x68>)
   1bd4c:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1bd4e:	4b08      	ldr	r3, [pc, #32]	; (1bd70 <prvCheckTasksWaitingTermination+0x60>)
   1bd50:	681b      	ldr	r3, [r3, #0]
   1bd52:	2b00      	cmp	r3, #0
   1bd54:	d1e0      	bne.n	1bd18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1bd56:	46c0      	nop			; (mov r8, r8)
   1bd58:	46bd      	mov	sp, r7
   1bd5a:	b002      	add	sp, #8
   1bd5c:	bd80      	pop	{r7, pc}
   1bd5e:	46c0      	nop			; (mov r8, r8)
   1bd60:	00019159 	.word	0x00019159
   1bd64:	20004154 	.word	0x20004154
   1bd68:	00018fc7 	.word	0x00018fc7
   1bd6c:	20004180 	.word	0x20004180
   1bd70:	20004168 	.word	0x20004168
   1bd74:	0001917d 	.word	0x0001917d
   1bd78:	0001bded 	.word	0x0001bded

0001bd7c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1bd7c:	b580      	push	{r7, lr}
   1bd7e:	b084      	sub	sp, #16
   1bd80:	af00      	add	r7, sp, #0
   1bd82:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1bd84:	2300      	movs	r3, #0
   1bd86:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1bd88:	e005      	b.n	1bd96 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1bd8a:	687b      	ldr	r3, [r7, #4]
   1bd8c:	3301      	adds	r3, #1
   1bd8e:	607b      	str	r3, [r7, #4]
			ulCount++;
   1bd90:	68fb      	ldr	r3, [r7, #12]
   1bd92:	3301      	adds	r3, #1
   1bd94:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1bd96:	687b      	ldr	r3, [r7, #4]
   1bd98:	781b      	ldrb	r3, [r3, #0]
   1bd9a:	2ba5      	cmp	r3, #165	; 0xa5
   1bd9c:	d0f5      	beq.n	1bd8a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1bd9e:	68fb      	ldr	r3, [r7, #12]
   1bda0:	089b      	lsrs	r3, r3, #2
   1bda2:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1bda4:	68fb      	ldr	r3, [r7, #12]
   1bda6:	b29b      	uxth	r3, r3
	}
   1bda8:	0018      	movs	r0, r3
   1bdaa:	46bd      	mov	sp, r7
   1bdac:	b004      	add	sp, #16
   1bdae:	bd80      	pop	{r7, pc}

0001bdb0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1bdb0:	b580      	push	{r7, lr}
   1bdb2:	b086      	sub	sp, #24
   1bdb4:	af00      	add	r7, sp, #0
   1bdb6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1bdb8:	687b      	ldr	r3, [r7, #4]
   1bdba:	2b00      	cmp	r3, #0
   1bdbc:	d102      	bne.n	1bdc4 <uxTaskGetStackHighWaterMark+0x14>
   1bdbe:	4b09      	ldr	r3, [pc, #36]	; (1bde4 <uxTaskGetStackHighWaterMark+0x34>)
   1bdc0:	681b      	ldr	r3, [r3, #0]
   1bdc2:	e000      	b.n	1bdc6 <uxTaskGetStackHighWaterMark+0x16>
   1bdc4:	687b      	ldr	r3, [r7, #4]
   1bdc6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1bdc8:	697b      	ldr	r3, [r7, #20]
   1bdca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1bdcc:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1bdce:	693b      	ldr	r3, [r7, #16]
   1bdd0:	0018      	movs	r0, r3
   1bdd2:	4b05      	ldr	r3, [pc, #20]	; (1bde8 <uxTaskGetStackHighWaterMark+0x38>)
   1bdd4:	4798      	blx	r3
   1bdd6:	0003      	movs	r3, r0
   1bdd8:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1bdda:	68fb      	ldr	r3, [r7, #12]
	}
   1bddc:	0018      	movs	r0, r3
   1bdde:	46bd      	mov	sp, r7
   1bde0:	b006      	add	sp, #24
   1bde2:	bd80      	pop	{r7, pc}
   1bde4:	200040a8 	.word	0x200040a8
   1bde8:	0001bd7d 	.word	0x0001bd7d

0001bdec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1bdec:	b580      	push	{r7, lr}
   1bdee:	b082      	sub	sp, #8
   1bdf0:	af00      	add	r7, sp, #0
   1bdf2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1bdf4:	687b      	ldr	r3, [r7, #4]
   1bdf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1bdf8:	0018      	movs	r0, r3
   1bdfa:	4b05      	ldr	r3, [pc, #20]	; (1be10 <prvDeleteTCB+0x24>)
   1bdfc:	4798      	blx	r3
			vPortFree( pxTCB );
   1bdfe:	687b      	ldr	r3, [r7, #4]
   1be00:	0018      	movs	r0, r3
   1be02:	4b03      	ldr	r3, [pc, #12]	; (1be10 <prvDeleteTCB+0x24>)
   1be04:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1be06:	46c0      	nop			; (mov r8, r8)
   1be08:	46bd      	mov	sp, r7
   1be0a:	b002      	add	sp, #8
   1be0c:	bd80      	pop	{r7, pc}
   1be0e:	46c0      	nop			; (mov r8, r8)
   1be10:	00019355 	.word	0x00019355

0001be14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1be14:	b580      	push	{r7, lr}
   1be16:	b082      	sub	sp, #8
   1be18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1be1a:	4b0e      	ldr	r3, [pc, #56]	; (1be54 <prvResetNextTaskUnblockTime+0x40>)
   1be1c:	681b      	ldr	r3, [r3, #0]
   1be1e:	681b      	ldr	r3, [r3, #0]
   1be20:	2b00      	cmp	r3, #0
   1be22:	d101      	bne.n	1be28 <prvResetNextTaskUnblockTime+0x14>
   1be24:	2301      	movs	r3, #1
   1be26:	e000      	b.n	1be2a <prvResetNextTaskUnblockTime+0x16>
   1be28:	2300      	movs	r3, #0
   1be2a:	2b00      	cmp	r3, #0
   1be2c:	d004      	beq.n	1be38 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1be2e:	4b0a      	ldr	r3, [pc, #40]	; (1be58 <prvResetNextTaskUnblockTime+0x44>)
   1be30:	2201      	movs	r2, #1
   1be32:	4252      	negs	r2, r2
   1be34:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1be36:	e008      	b.n	1be4a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1be38:	4b06      	ldr	r3, [pc, #24]	; (1be54 <prvResetNextTaskUnblockTime+0x40>)
   1be3a:	681b      	ldr	r3, [r3, #0]
   1be3c:	68db      	ldr	r3, [r3, #12]
   1be3e:	68db      	ldr	r3, [r3, #12]
   1be40:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1be42:	687b      	ldr	r3, [r7, #4]
   1be44:	685a      	ldr	r2, [r3, #4]
   1be46:	4b04      	ldr	r3, [pc, #16]	; (1be58 <prvResetNextTaskUnblockTime+0x44>)
   1be48:	601a      	str	r2, [r3, #0]
}
   1be4a:	46c0      	nop			; (mov r8, r8)
   1be4c:	46bd      	mov	sp, r7
   1be4e:	b002      	add	sp, #8
   1be50:	bd80      	pop	{r7, pc}
   1be52:	46c0      	nop			; (mov r8, r8)
   1be54:	20004138 	.word	0x20004138
   1be58:	200041a0 	.word	0x200041a0

0001be5c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1be5c:	b580      	push	{r7, lr}
   1be5e:	b082      	sub	sp, #8
   1be60:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1be62:	4b04      	ldr	r3, [pc, #16]	; (1be74 <xTaskGetCurrentTaskHandle+0x18>)
   1be64:	681b      	ldr	r3, [r3, #0]
   1be66:	607b      	str	r3, [r7, #4]

		return xReturn;
   1be68:	687b      	ldr	r3, [r7, #4]
	}
   1be6a:	0018      	movs	r0, r3
   1be6c:	46bd      	mov	sp, r7
   1be6e:	b002      	add	sp, #8
   1be70:	bd80      	pop	{r7, pc}
   1be72:	46c0      	nop			; (mov r8, r8)
   1be74:	200040a8 	.word	0x200040a8

0001be78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1be78:	b580      	push	{r7, lr}
   1be7a:	b082      	sub	sp, #8
   1be7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1be7e:	4b0a      	ldr	r3, [pc, #40]	; (1bea8 <xTaskGetSchedulerState+0x30>)
   1be80:	681b      	ldr	r3, [r3, #0]
   1be82:	2b00      	cmp	r3, #0
   1be84:	d102      	bne.n	1be8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1be86:	2301      	movs	r3, #1
   1be88:	607b      	str	r3, [r7, #4]
   1be8a:	e008      	b.n	1be9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1be8c:	4b07      	ldr	r3, [pc, #28]	; (1beac <xTaskGetSchedulerState+0x34>)
   1be8e:	681b      	ldr	r3, [r3, #0]
   1be90:	2b00      	cmp	r3, #0
   1be92:	d102      	bne.n	1be9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1be94:	2302      	movs	r3, #2
   1be96:	607b      	str	r3, [r7, #4]
   1be98:	e001      	b.n	1be9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1be9a:	2300      	movs	r3, #0
   1be9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1be9e:	687b      	ldr	r3, [r7, #4]
	}
   1bea0:	0018      	movs	r0, r3
   1bea2:	46bd      	mov	sp, r7
   1bea4:	b002      	add	sp, #8
   1bea6:	bd80      	pop	{r7, pc}
   1bea8:	2000418c 	.word	0x2000418c
   1beac:	200041a8 	.word	0x200041a8

0001beb0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1beb0:	b590      	push	{r4, r7, lr}
   1beb2:	b085      	sub	sp, #20
   1beb4:	af00      	add	r7, sp, #0
   1beb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1beb8:	687b      	ldr	r3, [r7, #4]
   1beba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1bebc:	2300      	movs	r3, #0
   1bebe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1bec0:	687b      	ldr	r3, [r7, #4]
   1bec2:	2b00      	cmp	r3, #0
   1bec4:	d100      	bne.n	1bec8 <xTaskPriorityInherit+0x18>
   1bec6:	e09d      	b.n	1c004 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1bec8:	68bb      	ldr	r3, [r7, #8]
   1beca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1becc:	4b50      	ldr	r3, [pc, #320]	; (1c010 <xTaskPriorityInherit+0x160>)
   1bece:	681b      	ldr	r3, [r3, #0]
   1bed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bed2:	429a      	cmp	r2, r3
   1bed4:	d300      	bcc.n	1bed8 <xTaskPriorityInherit+0x28>
   1bed6:	e08c      	b.n	1bff2 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1bed8:	68bb      	ldr	r3, [r7, #8]
   1beda:	699b      	ldr	r3, [r3, #24]
   1bedc:	2b00      	cmp	r3, #0
   1bede:	db06      	blt.n	1beee <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1bee0:	4b4b      	ldr	r3, [pc, #300]	; (1c010 <xTaskPriorityInherit+0x160>)
   1bee2:	681b      	ldr	r3, [r3, #0]
   1bee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bee6:	2205      	movs	r2, #5
   1bee8:	1ad2      	subs	r2, r2, r3
   1beea:	68bb      	ldr	r3, [r7, #8]
   1beec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1beee:	68bb      	ldr	r3, [r7, #8]
   1bef0:	6959      	ldr	r1, [r3, #20]
   1bef2:	68bb      	ldr	r3, [r7, #8]
   1bef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bef6:	0013      	movs	r3, r2
   1bef8:	009b      	lsls	r3, r3, #2
   1befa:	189b      	adds	r3, r3, r2
   1befc:	009b      	lsls	r3, r3, #2
   1befe:	4a45      	ldr	r2, [pc, #276]	; (1c014 <xTaskPriorityInherit+0x164>)
   1bf00:	189b      	adds	r3, r3, r2
   1bf02:	4299      	cmp	r1, r3
   1bf04:	d101      	bne.n	1bf0a <xTaskPriorityInherit+0x5a>
   1bf06:	2301      	movs	r3, #1
   1bf08:	e000      	b.n	1bf0c <xTaskPriorityInherit+0x5c>
   1bf0a:	2300      	movs	r3, #0
   1bf0c:	2b00      	cmp	r3, #0
   1bf0e:	d037      	beq.n	1bf80 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1bf10:	68bb      	ldr	r3, [r7, #8]
   1bf12:	3304      	adds	r3, #4
   1bf14:	0018      	movs	r0, r3
   1bf16:	4b40      	ldr	r3, [pc, #256]	; (1c018 <xTaskPriorityInherit+0x168>)
   1bf18:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1bf1a:	4b3d      	ldr	r3, [pc, #244]	; (1c010 <xTaskPriorityInherit+0x160>)
   1bf1c:	681b      	ldr	r3, [r3, #0]
   1bf1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bf20:	68bb      	ldr	r3, [r7, #8]
   1bf22:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1bf24:	68bb      	ldr	r3, [r7, #8]
   1bf26:	0018      	movs	r0, r3
   1bf28:	4b3c      	ldr	r3, [pc, #240]	; (1c01c <xTaskPriorityInherit+0x16c>)
   1bf2a:	4798      	blx	r3
   1bf2c:	0003      	movs	r3, r0
   1bf2e:	001a      	movs	r2, r3
   1bf30:	4b3b      	ldr	r3, [pc, #236]	; (1c020 <xTaskPriorityInherit+0x170>)
   1bf32:	881b      	ldrh	r3, [r3, #0]
   1bf34:	4013      	ands	r3, r2
   1bf36:	b29b      	uxth	r3, r3
   1bf38:	2b00      	cmp	r3, #0
   1bf3a:	d008      	beq.n	1bf4e <xTaskPriorityInherit+0x9e>
   1bf3c:	68bb      	ldr	r3, [r7, #8]
   1bf3e:	0018      	movs	r0, r3
   1bf40:	4b38      	ldr	r3, [pc, #224]	; (1c024 <xTaskPriorityInherit+0x174>)
   1bf42:	4798      	blx	r3
   1bf44:	0003      	movs	r3, r0
   1bf46:	b2db      	uxtb	r3, r3
   1bf48:	0018      	movs	r0, r3
   1bf4a:	4b37      	ldr	r3, [pc, #220]	; (1c028 <xTaskPriorityInherit+0x178>)
   1bf4c:	4798      	blx	r3
   1bf4e:	68bb      	ldr	r3, [r7, #8]
   1bf50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bf52:	4b36      	ldr	r3, [pc, #216]	; (1c02c <xTaskPriorityInherit+0x17c>)
   1bf54:	681b      	ldr	r3, [r3, #0]
   1bf56:	429a      	cmp	r2, r3
   1bf58:	d903      	bls.n	1bf62 <xTaskPriorityInherit+0xb2>
   1bf5a:	68bb      	ldr	r3, [r7, #8]
   1bf5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bf5e:	4b33      	ldr	r3, [pc, #204]	; (1c02c <xTaskPriorityInherit+0x17c>)
   1bf60:	601a      	str	r2, [r3, #0]
   1bf62:	68bb      	ldr	r3, [r7, #8]
   1bf64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bf66:	0013      	movs	r3, r2
   1bf68:	009b      	lsls	r3, r3, #2
   1bf6a:	189b      	adds	r3, r3, r2
   1bf6c:	009b      	lsls	r3, r3, #2
   1bf6e:	4a29      	ldr	r2, [pc, #164]	; (1c014 <xTaskPriorityInherit+0x164>)
   1bf70:	189a      	adds	r2, r3, r2
   1bf72:	68bb      	ldr	r3, [r7, #8]
   1bf74:	3304      	adds	r3, #4
   1bf76:	0019      	movs	r1, r3
   1bf78:	0010      	movs	r0, r2
   1bf7a:	4b2d      	ldr	r3, [pc, #180]	; (1c030 <xTaskPriorityInherit+0x180>)
   1bf7c:	4798      	blx	r3
   1bf7e:	e004      	b.n	1bf8a <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1bf80:	4b23      	ldr	r3, [pc, #140]	; (1c010 <xTaskPriorityInherit+0x160>)
   1bf82:	681b      	ldr	r3, [r3, #0]
   1bf84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bf86:	68bb      	ldr	r3, [r7, #8]
   1bf88:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1bf8a:	68bb      	ldr	r3, [r7, #8]
   1bf8c:	0018      	movs	r0, r3
   1bf8e:	4b23      	ldr	r3, [pc, #140]	; (1c01c <xTaskPriorityInherit+0x16c>)
   1bf90:	4798      	blx	r3
   1bf92:	0003      	movs	r3, r0
   1bf94:	001a      	movs	r2, r3
   1bf96:	4b22      	ldr	r3, [pc, #136]	; (1c020 <xTaskPriorityInherit+0x170>)
   1bf98:	881b      	ldrh	r3, [r3, #0]
   1bf9a:	4013      	ands	r3, r2
   1bf9c:	b29b      	uxth	r3, r3
   1bf9e:	2b00      	cmp	r3, #0
   1bfa0:	d024      	beq.n	1bfec <xTaskPriorityInherit+0x13c>
   1bfa2:	68bb      	ldr	r3, [r7, #8]
   1bfa4:	0018      	movs	r0, r3
   1bfa6:	4b1f      	ldr	r3, [pc, #124]	; (1c024 <xTaskPriorityInherit+0x174>)
   1bfa8:	4798      	blx	r3
   1bfaa:	0003      	movs	r3, r0
   1bfac:	b2db      	uxtb	r3, r3
   1bfae:	001c      	movs	r4, r3
   1bfb0:	68bb      	ldr	r3, [r7, #8]
   1bfb2:	0018      	movs	r0, r3
   1bfb4:	4b1b      	ldr	r3, [pc, #108]	; (1c024 <xTaskPriorityInherit+0x174>)
   1bfb6:	4798      	blx	r3
   1bfb8:	0003      	movs	r3, r0
   1bfba:	b2db      	uxtb	r3, r3
   1bfbc:	0019      	movs	r1, r3
   1bfbe:	2003      	movs	r0, #3
   1bfc0:	4b1c      	ldr	r3, [pc, #112]	; (1c034 <xTaskPriorityInherit+0x184>)
   1bfc2:	4798      	blx	r3
   1bfc4:	0003      	movs	r3, r0
   1bfc6:	0022      	movs	r2, r4
   1bfc8:	2103      	movs	r1, #3
   1bfca:	208e      	movs	r0, #142	; 0x8e
   1bfcc:	4c1a      	ldr	r4, [pc, #104]	; (1c038 <xTaskPriorityInherit+0x188>)
   1bfce:	47a0      	blx	r4
   1bfd0:	68bb      	ldr	r3, [r7, #8]
   1bfd2:	0018      	movs	r0, r3
   1bfd4:	4b13      	ldr	r3, [pc, #76]	; (1c024 <xTaskPriorityInherit+0x174>)
   1bfd6:	4798      	blx	r3
   1bfd8:	0003      	movs	r3, r0
   1bfda:	b2d9      	uxtb	r1, r3
   1bfdc:	4b0c      	ldr	r3, [pc, #48]	; (1c010 <xTaskPriorityInherit+0x160>)
   1bfde:	681b      	ldr	r3, [r3, #0]
   1bfe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bfe2:	b2db      	uxtb	r3, r3
   1bfe4:	001a      	movs	r2, r3
   1bfe6:	2003      	movs	r0, #3
   1bfe8:	4b14      	ldr	r3, [pc, #80]	; (1c03c <xTaskPriorityInherit+0x18c>)
   1bfea:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1bfec:	2301      	movs	r3, #1
   1bfee:	60fb      	str	r3, [r7, #12]
   1bff0:	e008      	b.n	1c004 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1bff2:	68bb      	ldr	r3, [r7, #8]
   1bff4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1bff6:	4b06      	ldr	r3, [pc, #24]	; (1c010 <xTaskPriorityInherit+0x160>)
   1bff8:	681b      	ldr	r3, [r3, #0]
   1bffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bffc:	429a      	cmp	r2, r3
   1bffe:	d201      	bcs.n	1c004 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1c000:	2301      	movs	r3, #1
   1c002:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1c004:	68fb      	ldr	r3, [r7, #12]
	}
   1c006:	0018      	movs	r0, r3
   1c008:	46bd      	mov	sp, r7
   1c00a:	b005      	add	sp, #20
   1c00c:	bd90      	pop	{r4, r7, pc}
   1c00e:	46c0      	nop			; (mov r8, r8)
   1c010:	200040a8 	.word	0x200040a8
   1c014:	200040ac 	.word	0x200040ac
   1c018:	00018fc7 	.word	0x00018fc7
   1c01c:	0001714d 	.word	0x0001714d
   1c020:	20000100 	.word	0x20000100
   1c024:	0001712d 	.word	0x0001712d
   1c028:	000178fd 	.word	0x000178fd
   1c02c:	20004188 	.word	0x20004188
   1c030:	00018f17 	.word	0x00018f17
   1c034:	00018105 	.word	0x00018105
   1c038:	00017c75 	.word	0x00017c75
   1c03c:	00018061 	.word	0x00018061

0001c040 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1c040:	b590      	push	{r4, r7, lr}
   1c042:	b085      	sub	sp, #20
   1c044:	af00      	add	r7, sp, #0
   1c046:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1c048:	687b      	ldr	r3, [r7, #4]
   1c04a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1c04c:	2300      	movs	r3, #0
   1c04e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1c050:	687b      	ldr	r3, [r7, #4]
   1c052:	2b00      	cmp	r3, #0
   1c054:	d100      	bne.n	1c058 <xTaskPriorityDisinherit+0x18>
   1c056:	e089      	b.n	1c16c <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1c058:	4b47      	ldr	r3, [pc, #284]	; (1c178 <xTaskPriorityDisinherit+0x138>)
   1c05a:	681b      	ldr	r3, [r3, #0]
   1c05c:	68ba      	ldr	r2, [r7, #8]
   1c05e:	429a      	cmp	r2, r3
   1c060:	d001      	beq.n	1c066 <xTaskPriorityDisinherit+0x26>
   1c062:	b672      	cpsid	i
   1c064:	e7fe      	b.n	1c064 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1c066:	68bb      	ldr	r3, [r7, #8]
   1c068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c06a:	2b00      	cmp	r3, #0
   1c06c:	d101      	bne.n	1c072 <xTaskPriorityDisinherit+0x32>
   1c06e:	b672      	cpsid	i
   1c070:	e7fe      	b.n	1c070 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1c072:	68bb      	ldr	r3, [r7, #8]
   1c074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c076:	1e5a      	subs	r2, r3, #1
   1c078:	68bb      	ldr	r3, [r7, #8]
   1c07a:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1c07c:	68bb      	ldr	r3, [r7, #8]
   1c07e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c080:	68bb      	ldr	r3, [r7, #8]
   1c082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c084:	429a      	cmp	r2, r3
   1c086:	d071      	beq.n	1c16c <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1c088:	68bb      	ldr	r3, [r7, #8]
   1c08a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c08c:	2b00      	cmp	r3, #0
   1c08e:	d16d      	bne.n	1c16c <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c090:	68bb      	ldr	r3, [r7, #8]
   1c092:	3304      	adds	r3, #4
   1c094:	0018      	movs	r0, r3
   1c096:	4b39      	ldr	r3, [pc, #228]	; (1c17c <xTaskPriorityDisinherit+0x13c>)
   1c098:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1c09a:	68bb      	ldr	r3, [r7, #8]
   1c09c:	0018      	movs	r0, r3
   1c09e:	4b38      	ldr	r3, [pc, #224]	; (1c180 <xTaskPriorityDisinherit+0x140>)
   1c0a0:	4798      	blx	r3
   1c0a2:	0003      	movs	r3, r0
   1c0a4:	001a      	movs	r2, r3
   1c0a6:	4b37      	ldr	r3, [pc, #220]	; (1c184 <xTaskPriorityDisinherit+0x144>)
   1c0a8:	881b      	ldrh	r3, [r3, #0]
   1c0aa:	4013      	ands	r3, r2
   1c0ac:	b29b      	uxth	r3, r3
   1c0ae:	2b00      	cmp	r3, #0
   1c0b0:	d023      	beq.n	1c0fa <xTaskPriorityDisinherit+0xba>
   1c0b2:	68bb      	ldr	r3, [r7, #8]
   1c0b4:	0018      	movs	r0, r3
   1c0b6:	4b34      	ldr	r3, [pc, #208]	; (1c188 <xTaskPriorityDisinherit+0x148>)
   1c0b8:	4798      	blx	r3
   1c0ba:	0003      	movs	r3, r0
   1c0bc:	b2db      	uxtb	r3, r3
   1c0be:	001c      	movs	r4, r3
   1c0c0:	68bb      	ldr	r3, [r7, #8]
   1c0c2:	0018      	movs	r0, r3
   1c0c4:	4b30      	ldr	r3, [pc, #192]	; (1c188 <xTaskPriorityDisinherit+0x148>)
   1c0c6:	4798      	blx	r3
   1c0c8:	0003      	movs	r3, r0
   1c0ca:	b2db      	uxtb	r3, r3
   1c0cc:	0019      	movs	r1, r3
   1c0ce:	2003      	movs	r0, #3
   1c0d0:	4b2e      	ldr	r3, [pc, #184]	; (1c18c <xTaskPriorityDisinherit+0x14c>)
   1c0d2:	4798      	blx	r3
   1c0d4:	0003      	movs	r3, r0
   1c0d6:	0022      	movs	r2, r4
   1c0d8:	2103      	movs	r1, #3
   1c0da:	208f      	movs	r0, #143	; 0x8f
   1c0dc:	4c2c      	ldr	r4, [pc, #176]	; (1c190 <xTaskPriorityDisinherit+0x150>)
   1c0de:	47a0      	blx	r4
   1c0e0:	68bb      	ldr	r3, [r7, #8]
   1c0e2:	0018      	movs	r0, r3
   1c0e4:	4b28      	ldr	r3, [pc, #160]	; (1c188 <xTaskPriorityDisinherit+0x148>)
   1c0e6:	4798      	blx	r3
   1c0e8:	0003      	movs	r3, r0
   1c0ea:	b2d9      	uxtb	r1, r3
   1c0ec:	68bb      	ldr	r3, [r7, #8]
   1c0ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c0f0:	b2db      	uxtb	r3, r3
   1c0f2:	001a      	movs	r2, r3
   1c0f4:	2003      	movs	r0, #3
   1c0f6:	4b27      	ldr	r3, [pc, #156]	; (1c194 <xTaskPriorityDisinherit+0x154>)
   1c0f8:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1c0fa:	68bb      	ldr	r3, [r7, #8]
   1c0fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1c0fe:	68bb      	ldr	r3, [r7, #8]
   1c100:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c102:	68bb      	ldr	r3, [r7, #8]
   1c104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c106:	2205      	movs	r2, #5
   1c108:	1ad2      	subs	r2, r2, r3
   1c10a:	68bb      	ldr	r3, [r7, #8]
   1c10c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1c10e:	68bb      	ldr	r3, [r7, #8]
   1c110:	0018      	movs	r0, r3
   1c112:	4b1b      	ldr	r3, [pc, #108]	; (1c180 <xTaskPriorityDisinherit+0x140>)
   1c114:	4798      	blx	r3
   1c116:	0003      	movs	r3, r0
   1c118:	001a      	movs	r2, r3
   1c11a:	4b1a      	ldr	r3, [pc, #104]	; (1c184 <xTaskPriorityDisinherit+0x144>)
   1c11c:	881b      	ldrh	r3, [r3, #0]
   1c11e:	4013      	ands	r3, r2
   1c120:	b29b      	uxth	r3, r3
   1c122:	2b00      	cmp	r3, #0
   1c124:	d008      	beq.n	1c138 <xTaskPriorityDisinherit+0xf8>
   1c126:	68bb      	ldr	r3, [r7, #8]
   1c128:	0018      	movs	r0, r3
   1c12a:	4b17      	ldr	r3, [pc, #92]	; (1c188 <xTaskPriorityDisinherit+0x148>)
   1c12c:	4798      	blx	r3
   1c12e:	0003      	movs	r3, r0
   1c130:	b2db      	uxtb	r3, r3
   1c132:	0018      	movs	r0, r3
   1c134:	4b18      	ldr	r3, [pc, #96]	; (1c198 <xTaskPriorityDisinherit+0x158>)
   1c136:	4798      	blx	r3
   1c138:	68bb      	ldr	r3, [r7, #8]
   1c13a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c13c:	4b17      	ldr	r3, [pc, #92]	; (1c19c <xTaskPriorityDisinherit+0x15c>)
   1c13e:	681b      	ldr	r3, [r3, #0]
   1c140:	429a      	cmp	r2, r3
   1c142:	d903      	bls.n	1c14c <xTaskPriorityDisinherit+0x10c>
   1c144:	68bb      	ldr	r3, [r7, #8]
   1c146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c148:	4b14      	ldr	r3, [pc, #80]	; (1c19c <xTaskPriorityDisinherit+0x15c>)
   1c14a:	601a      	str	r2, [r3, #0]
   1c14c:	68bb      	ldr	r3, [r7, #8]
   1c14e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c150:	0013      	movs	r3, r2
   1c152:	009b      	lsls	r3, r3, #2
   1c154:	189b      	adds	r3, r3, r2
   1c156:	009b      	lsls	r3, r3, #2
   1c158:	4a11      	ldr	r2, [pc, #68]	; (1c1a0 <xTaskPriorityDisinherit+0x160>)
   1c15a:	189a      	adds	r2, r3, r2
   1c15c:	68bb      	ldr	r3, [r7, #8]
   1c15e:	3304      	adds	r3, #4
   1c160:	0019      	movs	r1, r3
   1c162:	0010      	movs	r0, r2
   1c164:	4b0f      	ldr	r3, [pc, #60]	; (1c1a4 <xTaskPriorityDisinherit+0x164>)
   1c166:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1c168:	2301      	movs	r3, #1
   1c16a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1c16c:	68fb      	ldr	r3, [r7, #12]
	}
   1c16e:	0018      	movs	r0, r3
   1c170:	46bd      	mov	sp, r7
   1c172:	b005      	add	sp, #20
   1c174:	bd90      	pop	{r4, r7, pc}
   1c176:	46c0      	nop			; (mov r8, r8)
   1c178:	200040a8 	.word	0x200040a8
   1c17c:	00018fc7 	.word	0x00018fc7
   1c180:	0001714d 	.word	0x0001714d
   1c184:	20000100 	.word	0x20000100
   1c188:	0001712d 	.word	0x0001712d
   1c18c:	00018105 	.word	0x00018105
   1c190:	00017c75 	.word	0x00017c75
   1c194:	00018061 	.word	0x00018061
   1c198:	000178fd 	.word	0x000178fd
   1c19c:	20004188 	.word	0x20004188
   1c1a0:	200040ac 	.word	0x200040ac
   1c1a4:	00018f17 	.word	0x00018f17

0001c1a8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1c1a8:	b590      	push	{r4, r7, lr}
   1c1aa:	b087      	sub	sp, #28
   1c1ac:	af00      	add	r7, sp, #0
   1c1ae:	6078      	str	r0, [r7, #4]
   1c1b0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1c1b2:	687b      	ldr	r3, [r7, #4]
   1c1b4:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1c1b6:	2301      	movs	r3, #1
   1c1b8:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1c1ba:	687b      	ldr	r3, [r7, #4]
   1c1bc:	2b00      	cmp	r3, #0
   1c1be:	d100      	bne.n	1c1c2 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1c1c0:	e0a4      	b.n	1c30c <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1c1c2:	693b      	ldr	r3, [r7, #16]
   1c1c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c1c6:	2b00      	cmp	r3, #0
   1c1c8:	d101      	bne.n	1c1ce <vTaskPriorityDisinheritAfterTimeout+0x26>
   1c1ca:	b672      	cpsid	i
   1c1cc:	e7fe      	b.n	1c1cc <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1c1ce:	693b      	ldr	r3, [r7, #16]
   1c1d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1c1d2:	683b      	ldr	r3, [r7, #0]
   1c1d4:	429a      	cmp	r2, r3
   1c1d6:	d202      	bcs.n	1c1de <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1c1d8:	683b      	ldr	r3, [r7, #0]
   1c1da:	617b      	str	r3, [r7, #20]
   1c1dc:	e002      	b.n	1c1e4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1c1de:	693b      	ldr	r3, [r7, #16]
   1c1e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c1e2:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1c1e4:	693b      	ldr	r3, [r7, #16]
   1c1e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c1e8:	697b      	ldr	r3, [r7, #20]
   1c1ea:	429a      	cmp	r2, r3
   1c1ec:	d100      	bne.n	1c1f0 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1c1ee:	e08d      	b.n	1c30c <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1c1f0:	693b      	ldr	r3, [r7, #16]
   1c1f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1c1f4:	68fb      	ldr	r3, [r7, #12]
   1c1f6:	429a      	cmp	r2, r3
   1c1f8:	d000      	beq.n	1c1fc <vTaskPriorityDisinheritAfterTimeout+0x54>
   1c1fa:	e087      	b.n	1c30c <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1c1fc:	4b45      	ldr	r3, [pc, #276]	; (1c314 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1c1fe:	681b      	ldr	r3, [r3, #0]
   1c200:	693a      	ldr	r2, [r7, #16]
   1c202:	429a      	cmp	r2, r3
   1c204:	d101      	bne.n	1c20a <vTaskPriorityDisinheritAfterTimeout+0x62>
   1c206:	b672      	cpsid	i
   1c208:	e7fe      	b.n	1c208 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1c20a:	693b      	ldr	r3, [r7, #16]
   1c20c:	0018      	movs	r0, r3
   1c20e:	4b42      	ldr	r3, [pc, #264]	; (1c318 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1c210:	4798      	blx	r3
   1c212:	0003      	movs	r3, r0
   1c214:	001a      	movs	r2, r3
   1c216:	4b41      	ldr	r3, [pc, #260]	; (1c31c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1c218:	881b      	ldrh	r3, [r3, #0]
   1c21a:	4013      	ands	r3, r2
   1c21c:	b29b      	uxth	r3, r3
   1c21e:	2b00      	cmp	r3, #0
   1c220:	d023      	beq.n	1c26a <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1c222:	693b      	ldr	r3, [r7, #16]
   1c224:	0018      	movs	r0, r3
   1c226:	4b3e      	ldr	r3, [pc, #248]	; (1c320 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1c228:	4798      	blx	r3
   1c22a:	0003      	movs	r3, r0
   1c22c:	b2db      	uxtb	r3, r3
   1c22e:	001c      	movs	r4, r3
   1c230:	693b      	ldr	r3, [r7, #16]
   1c232:	0018      	movs	r0, r3
   1c234:	4b3a      	ldr	r3, [pc, #232]	; (1c320 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1c236:	4798      	blx	r3
   1c238:	0003      	movs	r3, r0
   1c23a:	b2db      	uxtb	r3, r3
   1c23c:	0019      	movs	r1, r3
   1c23e:	2003      	movs	r0, #3
   1c240:	4b38      	ldr	r3, [pc, #224]	; (1c324 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1c242:	4798      	blx	r3
   1c244:	0003      	movs	r3, r0
   1c246:	0022      	movs	r2, r4
   1c248:	2103      	movs	r1, #3
   1c24a:	208f      	movs	r0, #143	; 0x8f
   1c24c:	4c36      	ldr	r4, [pc, #216]	; (1c328 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1c24e:	47a0      	blx	r4
   1c250:	693b      	ldr	r3, [r7, #16]
   1c252:	0018      	movs	r0, r3
   1c254:	4b32      	ldr	r3, [pc, #200]	; (1c320 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1c256:	4798      	blx	r3
   1c258:	0003      	movs	r3, r0
   1c25a:	b2d9      	uxtb	r1, r3
   1c25c:	693b      	ldr	r3, [r7, #16]
   1c25e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c260:	b2db      	uxtb	r3, r3
   1c262:	001a      	movs	r2, r3
   1c264:	2003      	movs	r0, #3
   1c266:	4b31      	ldr	r3, [pc, #196]	; (1c32c <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1c268:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1c26a:	693b      	ldr	r3, [r7, #16]
   1c26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c26e:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1c270:	693b      	ldr	r3, [r7, #16]
   1c272:	697a      	ldr	r2, [r7, #20]
   1c274:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1c276:	693b      	ldr	r3, [r7, #16]
   1c278:	699b      	ldr	r3, [r3, #24]
   1c27a:	2b00      	cmp	r3, #0
   1c27c:	db04      	blt.n	1c288 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c27e:	697b      	ldr	r3, [r7, #20]
   1c280:	2205      	movs	r2, #5
   1c282:	1ad2      	subs	r2, r2, r3
   1c284:	693b      	ldr	r3, [r7, #16]
   1c286:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1c288:	693b      	ldr	r3, [r7, #16]
   1c28a:	6959      	ldr	r1, [r3, #20]
   1c28c:	68ba      	ldr	r2, [r7, #8]
   1c28e:	0013      	movs	r3, r2
   1c290:	009b      	lsls	r3, r3, #2
   1c292:	189b      	adds	r3, r3, r2
   1c294:	009b      	lsls	r3, r3, #2
   1c296:	4a26      	ldr	r2, [pc, #152]	; (1c330 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1c298:	189b      	adds	r3, r3, r2
   1c29a:	4299      	cmp	r1, r3
   1c29c:	d101      	bne.n	1c2a2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1c29e:	2301      	movs	r3, #1
   1c2a0:	e000      	b.n	1c2a4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1c2a2:	2300      	movs	r3, #0
   1c2a4:	2b00      	cmp	r3, #0
   1c2a6:	d031      	beq.n	1c30c <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c2a8:	693b      	ldr	r3, [r7, #16]
   1c2aa:	3304      	adds	r3, #4
   1c2ac:	0018      	movs	r0, r3
   1c2ae:	4b21      	ldr	r3, [pc, #132]	; (1c334 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1c2b0:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1c2b2:	693b      	ldr	r3, [r7, #16]
   1c2b4:	0018      	movs	r0, r3
   1c2b6:	4b18      	ldr	r3, [pc, #96]	; (1c318 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1c2b8:	4798      	blx	r3
   1c2ba:	0003      	movs	r3, r0
   1c2bc:	001a      	movs	r2, r3
   1c2be:	4b17      	ldr	r3, [pc, #92]	; (1c31c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1c2c0:	881b      	ldrh	r3, [r3, #0]
   1c2c2:	4013      	ands	r3, r2
   1c2c4:	b29b      	uxth	r3, r3
   1c2c6:	2b00      	cmp	r3, #0
   1c2c8:	d008      	beq.n	1c2dc <vTaskPriorityDisinheritAfterTimeout+0x134>
   1c2ca:	693b      	ldr	r3, [r7, #16]
   1c2cc:	0018      	movs	r0, r3
   1c2ce:	4b14      	ldr	r3, [pc, #80]	; (1c320 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1c2d0:	4798      	blx	r3
   1c2d2:	0003      	movs	r3, r0
   1c2d4:	b2db      	uxtb	r3, r3
   1c2d6:	0018      	movs	r0, r3
   1c2d8:	4b17      	ldr	r3, [pc, #92]	; (1c338 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1c2da:	4798      	blx	r3
   1c2dc:	693b      	ldr	r3, [r7, #16]
   1c2de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c2e0:	4b16      	ldr	r3, [pc, #88]	; (1c33c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1c2e2:	681b      	ldr	r3, [r3, #0]
   1c2e4:	429a      	cmp	r2, r3
   1c2e6:	d903      	bls.n	1c2f0 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1c2e8:	693b      	ldr	r3, [r7, #16]
   1c2ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c2ec:	4b13      	ldr	r3, [pc, #76]	; (1c33c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1c2ee:	601a      	str	r2, [r3, #0]
   1c2f0:	693b      	ldr	r3, [r7, #16]
   1c2f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c2f4:	0013      	movs	r3, r2
   1c2f6:	009b      	lsls	r3, r3, #2
   1c2f8:	189b      	adds	r3, r3, r2
   1c2fa:	009b      	lsls	r3, r3, #2
   1c2fc:	4a0c      	ldr	r2, [pc, #48]	; (1c330 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1c2fe:	189a      	adds	r2, r3, r2
   1c300:	693b      	ldr	r3, [r7, #16]
   1c302:	3304      	adds	r3, #4
   1c304:	0019      	movs	r1, r3
   1c306:	0010      	movs	r0, r2
   1c308:	4b0d      	ldr	r3, [pc, #52]	; (1c340 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1c30a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1c30c:	46c0      	nop			; (mov r8, r8)
   1c30e:	46bd      	mov	sp, r7
   1c310:	b007      	add	sp, #28
   1c312:	bd90      	pop	{r4, r7, pc}
   1c314:	200040a8 	.word	0x200040a8
   1c318:	0001714d 	.word	0x0001714d
   1c31c:	20000100 	.word	0x20000100
   1c320:	0001712d 	.word	0x0001712d
   1c324:	00018105 	.word	0x00018105
   1c328:	00017c75 	.word	0x00017c75
   1c32c:	00018061 	.word	0x00018061
   1c330:	200040ac 	.word	0x200040ac
   1c334:	00018fc7 	.word	0x00018fc7
   1c338:	000178fd 	.word	0x000178fd
   1c33c:	20004188 	.word	0x20004188
   1c340:	00018f17 	.word	0x00018f17

0001c344 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1c344:	b580      	push	{r7, lr}
   1c346:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1c348:	4b06      	ldr	r3, [pc, #24]	; (1c364 <pvTaskIncrementMutexHeldCount+0x20>)
   1c34a:	681b      	ldr	r3, [r3, #0]
   1c34c:	2b00      	cmp	r3, #0
   1c34e:	d004      	beq.n	1c35a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1c350:	4b04      	ldr	r3, [pc, #16]	; (1c364 <pvTaskIncrementMutexHeldCount+0x20>)
   1c352:	681b      	ldr	r3, [r3, #0]
   1c354:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1c356:	3201      	adds	r2, #1
   1c358:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1c35a:	4b02      	ldr	r3, [pc, #8]	; (1c364 <pvTaskIncrementMutexHeldCount+0x20>)
   1c35c:	681b      	ldr	r3, [r3, #0]
	}
   1c35e:	0018      	movs	r0, r3
   1c360:	46bd      	mov	sp, r7
   1c362:	bd80      	pop	{r7, pc}
   1c364:	200040a8 	.word	0x200040a8

0001c368 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1c368:	b580      	push	{r7, lr}
   1c36a:	b084      	sub	sp, #16
   1c36c:	af00      	add	r7, sp, #0
   1c36e:	6078      	str	r0, [r7, #4]
   1c370:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1c372:	4b21      	ldr	r3, [pc, #132]	; (1c3f8 <prvAddCurrentTaskToDelayedList+0x90>)
   1c374:	681b      	ldr	r3, [r3, #0]
   1c376:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c378:	4b20      	ldr	r3, [pc, #128]	; (1c3fc <prvAddCurrentTaskToDelayedList+0x94>)
   1c37a:	681b      	ldr	r3, [r3, #0]
   1c37c:	3304      	adds	r3, #4
   1c37e:	0018      	movs	r0, r3
   1c380:	4b1f      	ldr	r3, [pc, #124]	; (1c400 <prvAddCurrentTaskToDelayedList+0x98>)
   1c382:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1c384:	687b      	ldr	r3, [r7, #4]
   1c386:	3301      	adds	r3, #1
   1c388:	d10b      	bne.n	1c3a2 <prvAddCurrentTaskToDelayedList+0x3a>
   1c38a:	683b      	ldr	r3, [r7, #0]
   1c38c:	2b00      	cmp	r3, #0
   1c38e:	d008      	beq.n	1c3a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1c390:	4b1a      	ldr	r3, [pc, #104]	; (1c3fc <prvAddCurrentTaskToDelayedList+0x94>)
   1c392:	681b      	ldr	r3, [r3, #0]
   1c394:	1d1a      	adds	r2, r3, #4
   1c396:	4b1b      	ldr	r3, [pc, #108]	; (1c404 <prvAddCurrentTaskToDelayedList+0x9c>)
   1c398:	0011      	movs	r1, r2
   1c39a:	0018      	movs	r0, r3
   1c39c:	4b1a      	ldr	r3, [pc, #104]	; (1c408 <prvAddCurrentTaskToDelayedList+0xa0>)
   1c39e:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1c3a0:	e026      	b.n	1c3f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1c3a2:	68fa      	ldr	r2, [r7, #12]
   1c3a4:	687b      	ldr	r3, [r7, #4]
   1c3a6:	18d3      	adds	r3, r2, r3
   1c3a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1c3aa:	4b14      	ldr	r3, [pc, #80]	; (1c3fc <prvAddCurrentTaskToDelayedList+0x94>)
   1c3ac:	681b      	ldr	r3, [r3, #0]
   1c3ae:	68ba      	ldr	r2, [r7, #8]
   1c3b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1c3b2:	68ba      	ldr	r2, [r7, #8]
   1c3b4:	68fb      	ldr	r3, [r7, #12]
   1c3b6:	429a      	cmp	r2, r3
   1c3b8:	d209      	bcs.n	1c3ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1c3ba:	4b14      	ldr	r3, [pc, #80]	; (1c40c <prvAddCurrentTaskToDelayedList+0xa4>)
   1c3bc:	681a      	ldr	r2, [r3, #0]
   1c3be:	4b0f      	ldr	r3, [pc, #60]	; (1c3fc <prvAddCurrentTaskToDelayedList+0x94>)
   1c3c0:	681b      	ldr	r3, [r3, #0]
   1c3c2:	3304      	adds	r3, #4
   1c3c4:	0019      	movs	r1, r3
   1c3c6:	0010      	movs	r0, r2
   1c3c8:	4b11      	ldr	r3, [pc, #68]	; (1c410 <prvAddCurrentTaskToDelayedList+0xa8>)
   1c3ca:	4798      	blx	r3
}
   1c3cc:	e010      	b.n	1c3f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1c3ce:	4b11      	ldr	r3, [pc, #68]	; (1c414 <prvAddCurrentTaskToDelayedList+0xac>)
   1c3d0:	681a      	ldr	r2, [r3, #0]
   1c3d2:	4b0a      	ldr	r3, [pc, #40]	; (1c3fc <prvAddCurrentTaskToDelayedList+0x94>)
   1c3d4:	681b      	ldr	r3, [r3, #0]
   1c3d6:	3304      	adds	r3, #4
   1c3d8:	0019      	movs	r1, r3
   1c3da:	0010      	movs	r0, r2
   1c3dc:	4b0c      	ldr	r3, [pc, #48]	; (1c410 <prvAddCurrentTaskToDelayedList+0xa8>)
   1c3de:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1c3e0:	4b0d      	ldr	r3, [pc, #52]	; (1c418 <prvAddCurrentTaskToDelayedList+0xb0>)
   1c3e2:	681b      	ldr	r3, [r3, #0]
   1c3e4:	68ba      	ldr	r2, [r7, #8]
   1c3e6:	429a      	cmp	r2, r3
   1c3e8:	d202      	bcs.n	1c3f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1c3ea:	4b0b      	ldr	r3, [pc, #44]	; (1c418 <prvAddCurrentTaskToDelayedList+0xb0>)
   1c3ec:	68ba      	ldr	r2, [r7, #8]
   1c3ee:	601a      	str	r2, [r3, #0]
}
   1c3f0:	46c0      	nop			; (mov r8, r8)
   1c3f2:	46bd      	mov	sp, r7
   1c3f4:	b004      	add	sp, #16
   1c3f6:	bd80      	pop	{r7, pc}
   1c3f8:	20004184 	.word	0x20004184
   1c3fc:	200040a8 	.word	0x200040a8
   1c400:	00018fc7 	.word	0x00018fc7
   1c404:	2000416c 	.word	0x2000416c
   1c408:	00018f17 	.word	0x00018f17
   1c40c:	2000413c 	.word	0x2000413c
   1c410:	00018f5b 	.word	0x00018f5b
   1c414:	20004138 	.word	0x20004138
   1c418:	200041a0 	.word	0x200041a0

0001c41c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1c41c:	b590      	push	{r4, r7, lr}
   1c41e:	b085      	sub	sp, #20
   1c420:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1c422:	2300      	movs	r3, #0
   1c424:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1c426:	4b0e      	ldr	r3, [pc, #56]	; (1c460 <xTimerCreateTimerTask+0x44>)
   1c428:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1c42a:	4b0e      	ldr	r3, [pc, #56]	; (1c464 <xTimerCreateTimerTask+0x48>)
   1c42c:	681b      	ldr	r3, [r3, #0]
   1c42e:	2b00      	cmp	r3, #0
   1c430:	d00b      	beq.n	1c44a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1c432:	490d      	ldr	r1, [pc, #52]	; (1c468 <xTimerCreateTimerTask+0x4c>)
   1c434:	480d      	ldr	r0, [pc, #52]	; (1c46c <xTimerCreateTimerTask+0x50>)
   1c436:	4b0e      	ldr	r3, [pc, #56]	; (1c470 <xTimerCreateTimerTask+0x54>)
   1c438:	9301      	str	r3, [sp, #4]
   1c43a:	2302      	movs	r3, #2
   1c43c:	9300      	str	r3, [sp, #0]
   1c43e:	2300      	movs	r3, #0
   1c440:	2280      	movs	r2, #128	; 0x80
   1c442:	4c0c      	ldr	r4, [pc, #48]	; (1c474 <xTimerCreateTimerTask+0x58>)
   1c444:	47a0      	blx	r4
   1c446:	0003      	movs	r3, r0
   1c448:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1c44a:	687b      	ldr	r3, [r7, #4]
   1c44c:	2b00      	cmp	r3, #0
   1c44e:	d101      	bne.n	1c454 <xTimerCreateTimerTask+0x38>
   1c450:	b672      	cpsid	i
   1c452:	e7fe      	b.n	1c452 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1c454:	687b      	ldr	r3, [r7, #4]
}
   1c456:	0018      	movs	r0, r3
   1c458:	46bd      	mov	sp, r7
   1c45a:	b003      	add	sp, #12
   1c45c:	bd90      	pop	{r4, r7, pc}
   1c45e:	46c0      	nop			; (mov r8, r8)
   1c460:	0001c965 	.word	0x0001c965
   1c464:	200041dc 	.word	0x200041dc
   1c468:	00037c88 	.word	0x00037c88
   1c46c:	0001c59d 	.word	0x0001c59d
   1c470:	200041e0 	.word	0x200041e0
   1c474:	0001adb5 	.word	0x0001adb5

0001c478 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1c478:	b590      	push	{r4, r7, lr}
   1c47a:	b089      	sub	sp, #36	; 0x24
   1c47c:	af00      	add	r7, sp, #0
   1c47e:	60f8      	str	r0, [r7, #12]
   1c480:	60b9      	str	r1, [r7, #8]
   1c482:	607a      	str	r2, [r7, #4]
   1c484:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1c486:	2300      	movs	r3, #0
   1c488:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1c48a:	68fb      	ldr	r3, [r7, #12]
   1c48c:	2b00      	cmp	r3, #0
   1c48e:	d101      	bne.n	1c494 <xTimerGenericCommand+0x1c>
   1c490:	b672      	cpsid	i
   1c492:	e7fe      	b.n	1c492 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1c494:	4b1e      	ldr	r3, [pc, #120]	; (1c510 <xTimerGenericCommand+0x98>)
   1c496:	681b      	ldr	r3, [r3, #0]
   1c498:	2b00      	cmp	r3, #0
   1c49a:	d033      	beq.n	1c504 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1c49c:	2310      	movs	r3, #16
   1c49e:	18fb      	adds	r3, r7, r3
   1c4a0:	68ba      	ldr	r2, [r7, #8]
   1c4a2:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1c4a4:	2310      	movs	r3, #16
   1c4a6:	18fb      	adds	r3, r7, r3
   1c4a8:	687a      	ldr	r2, [r7, #4]
   1c4aa:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1c4ac:	2310      	movs	r3, #16
   1c4ae:	18fb      	adds	r3, r7, r3
   1c4b0:	68fa      	ldr	r2, [r7, #12]
   1c4b2:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1c4b4:	68bb      	ldr	r3, [r7, #8]
   1c4b6:	2b05      	cmp	r3, #5
   1c4b8:	dc1a      	bgt.n	1c4f0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1c4ba:	4b16      	ldr	r3, [pc, #88]	; (1c514 <xTimerGenericCommand+0x9c>)
   1c4bc:	4798      	blx	r3
   1c4be:	0003      	movs	r3, r0
   1c4c0:	2b02      	cmp	r3, #2
   1c4c2:	d10a      	bne.n	1c4da <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1c4c4:	4b12      	ldr	r3, [pc, #72]	; (1c510 <xTimerGenericCommand+0x98>)
   1c4c6:	6818      	ldr	r0, [r3, #0]
   1c4c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1c4ca:	2310      	movs	r3, #16
   1c4cc:	18f9      	adds	r1, r7, r3
   1c4ce:	2300      	movs	r3, #0
   1c4d0:	4c11      	ldr	r4, [pc, #68]	; (1c518 <xTimerGenericCommand+0xa0>)
   1c4d2:	47a0      	blx	r4
   1c4d4:	0003      	movs	r3, r0
   1c4d6:	61fb      	str	r3, [r7, #28]
   1c4d8:	e014      	b.n	1c504 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1c4da:	4b0d      	ldr	r3, [pc, #52]	; (1c510 <xTimerGenericCommand+0x98>)
   1c4dc:	6818      	ldr	r0, [r3, #0]
   1c4de:	2310      	movs	r3, #16
   1c4e0:	18f9      	adds	r1, r7, r3
   1c4e2:	2300      	movs	r3, #0
   1c4e4:	2200      	movs	r2, #0
   1c4e6:	4c0c      	ldr	r4, [pc, #48]	; (1c518 <xTimerGenericCommand+0xa0>)
   1c4e8:	47a0      	blx	r4
   1c4ea:	0003      	movs	r3, r0
   1c4ec:	61fb      	str	r3, [r7, #28]
   1c4ee:	e009      	b.n	1c504 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1c4f0:	4b07      	ldr	r3, [pc, #28]	; (1c510 <xTimerGenericCommand+0x98>)
   1c4f2:	6818      	ldr	r0, [r3, #0]
   1c4f4:	683a      	ldr	r2, [r7, #0]
   1c4f6:	2310      	movs	r3, #16
   1c4f8:	18f9      	adds	r1, r7, r3
   1c4fa:	2300      	movs	r3, #0
   1c4fc:	4c07      	ldr	r4, [pc, #28]	; (1c51c <xTimerGenericCommand+0xa4>)
   1c4fe:	47a0      	blx	r4
   1c500:	0003      	movs	r3, r0
   1c502:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1c504:	69fb      	ldr	r3, [r7, #28]
}
   1c506:	0018      	movs	r0, r3
   1c508:	46bd      	mov	sp, r7
   1c50a:	b009      	add	sp, #36	; 0x24
   1c50c:	bd90      	pop	{r4, r7, pc}
   1c50e:	46c0      	nop			; (mov r8, r8)
   1c510:	200041dc 	.word	0x200041dc
   1c514:	0001be79 	.word	0x0001be79
   1c518:	000196ed 	.word	0x000196ed
   1c51c:	00019b4d 	.word	0x00019b4d

0001c520 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1c520:	b590      	push	{r4, r7, lr}
   1c522:	b087      	sub	sp, #28
   1c524:	af02      	add	r7, sp, #8
   1c526:	6078      	str	r0, [r7, #4]
   1c528:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1c52a:	4b18      	ldr	r3, [pc, #96]	; (1c58c <prvProcessExpiredTimer+0x6c>)
   1c52c:	681b      	ldr	r3, [r3, #0]
   1c52e:	68db      	ldr	r3, [r3, #12]
   1c530:	68db      	ldr	r3, [r3, #12]
   1c532:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1c534:	68fb      	ldr	r3, [r7, #12]
   1c536:	3304      	adds	r3, #4
   1c538:	0018      	movs	r0, r3
   1c53a:	4b15      	ldr	r3, [pc, #84]	; (1c590 <prvProcessExpiredTimer+0x70>)
   1c53c:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1c53e:	68fb      	ldr	r3, [r7, #12]
   1c540:	69db      	ldr	r3, [r3, #28]
   1c542:	2b01      	cmp	r3, #1
   1c544:	d119      	bne.n	1c57a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1c546:	68fb      	ldr	r3, [r7, #12]
   1c548:	699a      	ldr	r2, [r3, #24]
   1c54a:	687b      	ldr	r3, [r7, #4]
   1c54c:	18d1      	adds	r1, r2, r3
   1c54e:	687b      	ldr	r3, [r7, #4]
   1c550:	683a      	ldr	r2, [r7, #0]
   1c552:	68f8      	ldr	r0, [r7, #12]
   1c554:	4c0f      	ldr	r4, [pc, #60]	; (1c594 <prvProcessExpiredTimer+0x74>)
   1c556:	47a0      	blx	r4
   1c558:	1e03      	subs	r3, r0, #0
   1c55a:	d00e      	beq.n	1c57a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1c55c:	687a      	ldr	r2, [r7, #4]
   1c55e:	68f8      	ldr	r0, [r7, #12]
   1c560:	2300      	movs	r3, #0
   1c562:	9300      	str	r3, [sp, #0]
   1c564:	2300      	movs	r3, #0
   1c566:	2100      	movs	r1, #0
   1c568:	4c0b      	ldr	r4, [pc, #44]	; (1c598 <prvProcessExpiredTimer+0x78>)
   1c56a:	47a0      	blx	r4
   1c56c:	0003      	movs	r3, r0
   1c56e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1c570:	68bb      	ldr	r3, [r7, #8]
   1c572:	2b00      	cmp	r3, #0
   1c574:	d101      	bne.n	1c57a <prvProcessExpiredTimer+0x5a>
   1c576:	b672      	cpsid	i
   1c578:	e7fe      	b.n	1c578 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1c57a:	68fb      	ldr	r3, [r7, #12]
   1c57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c57e:	68fa      	ldr	r2, [r7, #12]
   1c580:	0010      	movs	r0, r2
   1c582:	4798      	blx	r3
}
   1c584:	46c0      	nop			; (mov r8, r8)
   1c586:	46bd      	mov	sp, r7
   1c588:	b005      	add	sp, #20
   1c58a:	bd90      	pop	{r4, r7, pc}
   1c58c:	200041d4 	.word	0x200041d4
   1c590:	00018fc7 	.word	0x00018fc7
   1c594:	0001c705 	.word	0x0001c705
   1c598:	0001c479 	.word	0x0001c479

0001c59c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1c59c:	b580      	push	{r7, lr}
   1c59e:	b084      	sub	sp, #16
   1c5a0:	af00      	add	r7, sp, #0
   1c5a2:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1c5a4:	4b08      	ldr	r3, [pc, #32]	; (1c5c8 <prvTimerTask+0x2c>)
   1c5a6:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1c5a8:	2308      	movs	r3, #8
   1c5aa:	18fb      	adds	r3, r7, r3
   1c5ac:	0018      	movs	r0, r3
   1c5ae:	4b07      	ldr	r3, [pc, #28]	; (1c5cc <prvTimerTask+0x30>)
   1c5b0:	4798      	blx	r3
   1c5b2:	0003      	movs	r3, r0
   1c5b4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1c5b6:	68ba      	ldr	r2, [r7, #8]
   1c5b8:	68fb      	ldr	r3, [r7, #12]
   1c5ba:	0011      	movs	r1, r2
   1c5bc:	0018      	movs	r0, r3
   1c5be:	4b04      	ldr	r3, [pc, #16]	; (1c5d0 <prvTimerTask+0x34>)
   1c5c0:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1c5c2:	4b04      	ldr	r3, [pc, #16]	; (1c5d4 <prvTimerTask+0x38>)
   1c5c4:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1c5c6:	e7ef      	b.n	1c5a8 <prvTimerTask+0xc>
   1c5c8:	000318fd 	.word	0x000318fd
   1c5cc:	0001c67d 	.word	0x0001c67d
   1c5d0:	0001c5d9 	.word	0x0001c5d9
   1c5d4:	0001c78d 	.word	0x0001c78d

0001c5d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1c5d8:	b580      	push	{r7, lr}
   1c5da:	b084      	sub	sp, #16
   1c5dc:	af00      	add	r7, sp, #0
   1c5de:	6078      	str	r0, [r7, #4]
   1c5e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1c5e2:	4b1e      	ldr	r3, [pc, #120]	; (1c65c <prvProcessTimerOrBlockTask+0x84>)
   1c5e4:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1c5e6:	2308      	movs	r3, #8
   1c5e8:	18fb      	adds	r3, r7, r3
   1c5ea:	0018      	movs	r0, r3
   1c5ec:	4b1c      	ldr	r3, [pc, #112]	; (1c660 <prvProcessTimerOrBlockTask+0x88>)
   1c5ee:	4798      	blx	r3
   1c5f0:	0003      	movs	r3, r0
   1c5f2:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1c5f4:	68bb      	ldr	r3, [r7, #8]
   1c5f6:	2b00      	cmp	r3, #0
   1c5f8:	d129      	bne.n	1c64e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1c5fa:	683b      	ldr	r3, [r7, #0]
   1c5fc:	2b00      	cmp	r3, #0
   1c5fe:	d10c      	bne.n	1c61a <prvProcessTimerOrBlockTask+0x42>
   1c600:	687a      	ldr	r2, [r7, #4]
   1c602:	68fb      	ldr	r3, [r7, #12]
   1c604:	429a      	cmp	r2, r3
   1c606:	d808      	bhi.n	1c61a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1c608:	4b16      	ldr	r3, [pc, #88]	; (1c664 <prvProcessTimerOrBlockTask+0x8c>)
   1c60a:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1c60c:	68fa      	ldr	r2, [r7, #12]
   1c60e:	687b      	ldr	r3, [r7, #4]
   1c610:	0011      	movs	r1, r2
   1c612:	0018      	movs	r0, r3
   1c614:	4b14      	ldr	r3, [pc, #80]	; (1c668 <prvProcessTimerOrBlockTask+0x90>)
   1c616:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1c618:	e01b      	b.n	1c652 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1c61a:	683b      	ldr	r3, [r7, #0]
   1c61c:	2b00      	cmp	r3, #0
   1c61e:	d006      	beq.n	1c62e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1c620:	4b12      	ldr	r3, [pc, #72]	; (1c66c <prvProcessTimerOrBlockTask+0x94>)
   1c622:	681b      	ldr	r3, [r3, #0]
   1c624:	681b      	ldr	r3, [r3, #0]
   1c626:	425a      	negs	r2, r3
   1c628:	4153      	adcs	r3, r2
   1c62a:	b2db      	uxtb	r3, r3
   1c62c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1c62e:	4b10      	ldr	r3, [pc, #64]	; (1c670 <prvProcessTimerOrBlockTask+0x98>)
   1c630:	6818      	ldr	r0, [r3, #0]
   1c632:	687a      	ldr	r2, [r7, #4]
   1c634:	68fb      	ldr	r3, [r7, #12]
   1c636:	1ad3      	subs	r3, r2, r3
   1c638:	683a      	ldr	r2, [r7, #0]
   1c63a:	0019      	movs	r1, r3
   1c63c:	4b0d      	ldr	r3, [pc, #52]	; (1c674 <prvProcessTimerOrBlockTask+0x9c>)
   1c63e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1c640:	4b08      	ldr	r3, [pc, #32]	; (1c664 <prvProcessTimerOrBlockTask+0x8c>)
   1c642:	4798      	blx	r3
   1c644:	1e03      	subs	r3, r0, #0
   1c646:	d104      	bne.n	1c652 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1c648:	4b0b      	ldr	r3, [pc, #44]	; (1c678 <prvProcessTimerOrBlockTask+0xa0>)
   1c64a:	4798      	blx	r3
}
   1c64c:	e001      	b.n	1c652 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1c64e:	4b05      	ldr	r3, [pc, #20]	; (1c664 <prvProcessTimerOrBlockTask+0x8c>)
   1c650:	4798      	blx	r3
}
   1c652:	46c0      	nop			; (mov r8, r8)
   1c654:	46bd      	mov	sp, r7
   1c656:	b004      	add	sp, #16
   1c658:	bd80      	pop	{r7, pc}
   1c65a:	46c0      	nop			; (mov r8, r8)
   1c65c:	0001b411 	.word	0x0001b411
   1c660:	0001c6bd 	.word	0x0001c6bd
   1c664:	0001b429 	.word	0x0001b429
   1c668:	0001c521 	.word	0x0001c521
   1c66c:	200041d8 	.word	0x200041d8
   1c670:	200041dc 	.word	0x200041dc
   1c674:	0001abb1 	.word	0x0001abb1
   1c678:	00019141 	.word	0x00019141

0001c67c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1c67c:	b580      	push	{r7, lr}
   1c67e:	b084      	sub	sp, #16
   1c680:	af00      	add	r7, sp, #0
   1c682:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1c684:	4b0c      	ldr	r3, [pc, #48]	; (1c6b8 <prvGetNextExpireTime+0x3c>)
   1c686:	681b      	ldr	r3, [r3, #0]
   1c688:	681b      	ldr	r3, [r3, #0]
   1c68a:	425a      	negs	r2, r3
   1c68c:	4153      	adcs	r3, r2
   1c68e:	b2db      	uxtb	r3, r3
   1c690:	001a      	movs	r2, r3
   1c692:	687b      	ldr	r3, [r7, #4]
   1c694:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1c696:	687b      	ldr	r3, [r7, #4]
   1c698:	681b      	ldr	r3, [r3, #0]
   1c69a:	2b00      	cmp	r3, #0
   1c69c:	d105      	bne.n	1c6aa <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1c69e:	4b06      	ldr	r3, [pc, #24]	; (1c6b8 <prvGetNextExpireTime+0x3c>)
   1c6a0:	681b      	ldr	r3, [r3, #0]
   1c6a2:	68db      	ldr	r3, [r3, #12]
   1c6a4:	681b      	ldr	r3, [r3, #0]
   1c6a6:	60fb      	str	r3, [r7, #12]
   1c6a8:	e001      	b.n	1c6ae <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1c6aa:	2300      	movs	r3, #0
   1c6ac:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1c6ae:	68fb      	ldr	r3, [r7, #12]
}
   1c6b0:	0018      	movs	r0, r3
   1c6b2:	46bd      	mov	sp, r7
   1c6b4:	b004      	add	sp, #16
   1c6b6:	bd80      	pop	{r7, pc}
   1c6b8:	200041d4 	.word	0x200041d4

0001c6bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1c6bc:	b580      	push	{r7, lr}
   1c6be:	b084      	sub	sp, #16
   1c6c0:	af00      	add	r7, sp, #0
   1c6c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1c6c4:	4b0c      	ldr	r3, [pc, #48]	; (1c6f8 <prvSampleTimeNow+0x3c>)
   1c6c6:	4798      	blx	r3
   1c6c8:	0003      	movs	r3, r0
   1c6ca:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1c6cc:	4b0b      	ldr	r3, [pc, #44]	; (1c6fc <prvSampleTimeNow+0x40>)
   1c6ce:	681b      	ldr	r3, [r3, #0]
   1c6d0:	68fa      	ldr	r2, [r7, #12]
   1c6d2:	429a      	cmp	r2, r3
   1c6d4:	d205      	bcs.n	1c6e2 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1c6d6:	4b0a      	ldr	r3, [pc, #40]	; (1c700 <prvSampleTimeNow+0x44>)
   1c6d8:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1c6da:	687b      	ldr	r3, [r7, #4]
   1c6dc:	2201      	movs	r2, #1
   1c6de:	601a      	str	r2, [r3, #0]
   1c6e0:	e002      	b.n	1c6e8 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1c6e2:	687b      	ldr	r3, [r7, #4]
   1c6e4:	2200      	movs	r2, #0
   1c6e6:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1c6e8:	4b04      	ldr	r3, [pc, #16]	; (1c6fc <prvSampleTimeNow+0x40>)
   1c6ea:	68fa      	ldr	r2, [r7, #12]
   1c6ec:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1c6ee:	68fb      	ldr	r3, [r7, #12]
}
   1c6f0:	0018      	movs	r0, r3
   1c6f2:	46bd      	mov	sp, r7
   1c6f4:	b004      	add	sp, #16
   1c6f6:	bd80      	pop	{r7, pc}
   1c6f8:	0001b599 	.word	0x0001b599
   1c6fc:	200041e4 	.word	0x200041e4
   1c700:	0001c8a5 	.word	0x0001c8a5

0001c704 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1c704:	b580      	push	{r7, lr}
   1c706:	b086      	sub	sp, #24
   1c708:	af00      	add	r7, sp, #0
   1c70a:	60f8      	str	r0, [r7, #12]
   1c70c:	60b9      	str	r1, [r7, #8]
   1c70e:	607a      	str	r2, [r7, #4]
   1c710:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1c712:	2300      	movs	r3, #0
   1c714:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1c716:	68fb      	ldr	r3, [r7, #12]
   1c718:	68ba      	ldr	r2, [r7, #8]
   1c71a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1c71c:	68fb      	ldr	r3, [r7, #12]
   1c71e:	68fa      	ldr	r2, [r7, #12]
   1c720:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1c722:	68ba      	ldr	r2, [r7, #8]
   1c724:	687b      	ldr	r3, [r7, #4]
   1c726:	429a      	cmp	r2, r3
   1c728:	d812      	bhi.n	1c750 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c72a:	687a      	ldr	r2, [r7, #4]
   1c72c:	683b      	ldr	r3, [r7, #0]
   1c72e:	1ad2      	subs	r2, r2, r3
   1c730:	68fb      	ldr	r3, [r7, #12]
   1c732:	699b      	ldr	r3, [r3, #24]
   1c734:	429a      	cmp	r2, r3
   1c736:	d302      	bcc.n	1c73e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1c738:	2301      	movs	r3, #1
   1c73a:	617b      	str	r3, [r7, #20]
   1c73c:	e01b      	b.n	1c776 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1c73e:	4b10      	ldr	r3, [pc, #64]	; (1c780 <prvInsertTimerInActiveList+0x7c>)
   1c740:	681a      	ldr	r2, [r3, #0]
   1c742:	68fb      	ldr	r3, [r7, #12]
   1c744:	3304      	adds	r3, #4
   1c746:	0019      	movs	r1, r3
   1c748:	0010      	movs	r0, r2
   1c74a:	4b0e      	ldr	r3, [pc, #56]	; (1c784 <prvInsertTimerInActiveList+0x80>)
   1c74c:	4798      	blx	r3
   1c74e:	e012      	b.n	1c776 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1c750:	687a      	ldr	r2, [r7, #4]
   1c752:	683b      	ldr	r3, [r7, #0]
   1c754:	429a      	cmp	r2, r3
   1c756:	d206      	bcs.n	1c766 <prvInsertTimerInActiveList+0x62>
   1c758:	68ba      	ldr	r2, [r7, #8]
   1c75a:	683b      	ldr	r3, [r7, #0]
   1c75c:	429a      	cmp	r2, r3
   1c75e:	d302      	bcc.n	1c766 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1c760:	2301      	movs	r3, #1
   1c762:	617b      	str	r3, [r7, #20]
   1c764:	e007      	b.n	1c776 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1c766:	4b08      	ldr	r3, [pc, #32]	; (1c788 <prvInsertTimerInActiveList+0x84>)
   1c768:	681a      	ldr	r2, [r3, #0]
   1c76a:	68fb      	ldr	r3, [r7, #12]
   1c76c:	3304      	adds	r3, #4
   1c76e:	0019      	movs	r1, r3
   1c770:	0010      	movs	r0, r2
   1c772:	4b04      	ldr	r3, [pc, #16]	; (1c784 <prvInsertTimerInActiveList+0x80>)
   1c774:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1c776:	697b      	ldr	r3, [r7, #20]
}
   1c778:	0018      	movs	r0, r3
   1c77a:	46bd      	mov	sp, r7
   1c77c:	b006      	add	sp, #24
   1c77e:	bd80      	pop	{r7, pc}
   1c780:	200041d8 	.word	0x200041d8
   1c784:	00018f5b 	.word	0x00018f5b
   1c788:	200041d4 	.word	0x200041d4

0001c78c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1c78c:	b590      	push	{r4, r7, lr}
   1c78e:	b08b      	sub	sp, #44	; 0x2c
   1c790:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1c792:	e068      	b.n	1c866 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1c794:	2308      	movs	r3, #8
   1c796:	18fb      	adds	r3, r7, r3
   1c798:	681b      	ldr	r3, [r3, #0]
   1c79a:	2b00      	cmp	r3, #0
   1c79c:	db63      	blt.n	1c866 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1c79e:	2308      	movs	r3, #8
   1c7a0:	18fb      	adds	r3, r7, r3
   1c7a2:	689b      	ldr	r3, [r3, #8]
   1c7a4:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1c7a6:	69fb      	ldr	r3, [r7, #28]
   1c7a8:	695b      	ldr	r3, [r3, #20]
   1c7aa:	2b00      	cmp	r3, #0
   1c7ac:	d004      	beq.n	1c7b8 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1c7ae:	69fb      	ldr	r3, [r7, #28]
   1c7b0:	3304      	adds	r3, #4
   1c7b2:	0018      	movs	r0, r3
   1c7b4:	4b33      	ldr	r3, [pc, #204]	; (1c884 <prvProcessReceivedCommands+0xf8>)
   1c7b6:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1c7b8:	1d3b      	adds	r3, r7, #4
   1c7ba:	0018      	movs	r0, r3
   1c7bc:	4b32      	ldr	r3, [pc, #200]	; (1c888 <prvProcessReceivedCommands+0xfc>)
   1c7be:	4798      	blx	r3
   1c7c0:	0003      	movs	r3, r0
   1c7c2:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1c7c4:	2308      	movs	r3, #8
   1c7c6:	18fb      	adds	r3, r7, r3
   1c7c8:	681b      	ldr	r3, [r3, #0]
   1c7ca:	2b09      	cmp	r3, #9
   1c7cc:	d84a      	bhi.n	1c864 <prvProcessReceivedCommands+0xd8>
   1c7ce:	009a      	lsls	r2, r3, #2
   1c7d0:	4b2e      	ldr	r3, [pc, #184]	; (1c88c <prvProcessReceivedCommands+0x100>)
   1c7d2:	18d3      	adds	r3, r2, r3
   1c7d4:	681b      	ldr	r3, [r3, #0]
   1c7d6:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1c7d8:	2308      	movs	r3, #8
   1c7da:	18fb      	adds	r3, r7, r3
   1c7dc:	685a      	ldr	r2, [r3, #4]
   1c7de:	69fb      	ldr	r3, [r7, #28]
   1c7e0:	699b      	ldr	r3, [r3, #24]
   1c7e2:	18d1      	adds	r1, r2, r3
   1c7e4:	2308      	movs	r3, #8
   1c7e6:	18fb      	adds	r3, r7, r3
   1c7e8:	685b      	ldr	r3, [r3, #4]
   1c7ea:	69ba      	ldr	r2, [r7, #24]
   1c7ec:	69f8      	ldr	r0, [r7, #28]
   1c7ee:	4c28      	ldr	r4, [pc, #160]	; (1c890 <prvProcessReceivedCommands+0x104>)
   1c7f0:	47a0      	blx	r4
   1c7f2:	1e03      	subs	r3, r0, #0
   1c7f4:	d037      	beq.n	1c866 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1c7f6:	69fb      	ldr	r3, [r7, #28]
   1c7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c7fa:	69fa      	ldr	r2, [r7, #28]
   1c7fc:	0010      	movs	r0, r2
   1c7fe:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1c800:	69fb      	ldr	r3, [r7, #28]
   1c802:	69db      	ldr	r3, [r3, #28]
   1c804:	2b01      	cmp	r3, #1
   1c806:	d12e      	bne.n	1c866 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1c808:	2308      	movs	r3, #8
   1c80a:	18fb      	adds	r3, r7, r3
   1c80c:	685a      	ldr	r2, [r3, #4]
   1c80e:	69fb      	ldr	r3, [r7, #28]
   1c810:	699b      	ldr	r3, [r3, #24]
   1c812:	18d2      	adds	r2, r2, r3
   1c814:	69f8      	ldr	r0, [r7, #28]
   1c816:	2300      	movs	r3, #0
   1c818:	9300      	str	r3, [sp, #0]
   1c81a:	2300      	movs	r3, #0
   1c81c:	2100      	movs	r1, #0
   1c81e:	4c1d      	ldr	r4, [pc, #116]	; (1c894 <prvProcessReceivedCommands+0x108>)
   1c820:	47a0      	blx	r4
   1c822:	0003      	movs	r3, r0
   1c824:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1c826:	697b      	ldr	r3, [r7, #20]
   1c828:	2b00      	cmp	r3, #0
   1c82a:	d11c      	bne.n	1c866 <prvProcessReceivedCommands+0xda>
   1c82c:	b672      	cpsid	i
   1c82e:	e7fe      	b.n	1c82e <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1c830:	2308      	movs	r3, #8
   1c832:	18fb      	adds	r3, r7, r3
   1c834:	685a      	ldr	r2, [r3, #4]
   1c836:	69fb      	ldr	r3, [r7, #28]
   1c838:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1c83a:	69fb      	ldr	r3, [r7, #28]
   1c83c:	699b      	ldr	r3, [r3, #24]
   1c83e:	2b00      	cmp	r3, #0
   1c840:	d101      	bne.n	1c846 <prvProcessReceivedCommands+0xba>
   1c842:	b672      	cpsid	i
   1c844:	e7fe      	b.n	1c844 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1c846:	69fb      	ldr	r3, [r7, #28]
   1c848:	699a      	ldr	r2, [r3, #24]
   1c84a:	69bb      	ldr	r3, [r7, #24]
   1c84c:	18d1      	adds	r1, r2, r3
   1c84e:	69bb      	ldr	r3, [r7, #24]
   1c850:	69ba      	ldr	r2, [r7, #24]
   1c852:	69f8      	ldr	r0, [r7, #28]
   1c854:	4c0e      	ldr	r4, [pc, #56]	; (1c890 <prvProcessReceivedCommands+0x104>)
   1c856:	47a0      	blx	r4
					break;
   1c858:	e005      	b.n	1c866 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1c85a:	69fb      	ldr	r3, [r7, #28]
   1c85c:	0018      	movs	r0, r3
   1c85e:	4b0e      	ldr	r3, [pc, #56]	; (1c898 <prvProcessReceivedCommands+0x10c>)
   1c860:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1c862:	e000      	b.n	1c866 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1c864:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1c866:	4b0d      	ldr	r3, [pc, #52]	; (1c89c <prvProcessReceivedCommands+0x110>)
   1c868:	681b      	ldr	r3, [r3, #0]
   1c86a:	2208      	movs	r2, #8
   1c86c:	18b9      	adds	r1, r7, r2
   1c86e:	2200      	movs	r2, #0
   1c870:	0018      	movs	r0, r3
   1c872:	4b0b      	ldr	r3, [pc, #44]	; (1c8a0 <prvProcessReceivedCommands+0x114>)
   1c874:	4798      	blx	r3
   1c876:	1e03      	subs	r3, r0, #0
   1c878:	d18c      	bne.n	1c794 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1c87a:	46c0      	nop			; (mov r8, r8)
   1c87c:	46bd      	mov	sp, r7
   1c87e:	b009      	add	sp, #36	; 0x24
   1c880:	bd90      	pop	{r4, r7, pc}
   1c882:	46c0      	nop			; (mov r8, r8)
   1c884:	00018fc7 	.word	0x00018fc7
   1c888:	0001c6bd 	.word	0x0001c6bd
   1c88c:	00037c90 	.word	0x00037c90
   1c890:	0001c705 	.word	0x0001c705
   1c894:	0001c479 	.word	0x0001c479
   1c898:	00019355 	.word	0x00019355
   1c89c:	200041dc 	.word	0x200041dc
   1c8a0:	00019fa5 	.word	0x00019fa5

0001c8a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1c8a4:	b590      	push	{r4, r7, lr}
   1c8a6:	b089      	sub	sp, #36	; 0x24
   1c8a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1c8aa:	e03e      	b.n	1c92a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1c8ac:	4b28      	ldr	r3, [pc, #160]	; (1c950 <prvSwitchTimerLists+0xac>)
   1c8ae:	681b      	ldr	r3, [r3, #0]
   1c8b0:	68db      	ldr	r3, [r3, #12]
   1c8b2:	681b      	ldr	r3, [r3, #0]
   1c8b4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1c8b6:	4b26      	ldr	r3, [pc, #152]	; (1c950 <prvSwitchTimerLists+0xac>)
   1c8b8:	681b      	ldr	r3, [r3, #0]
   1c8ba:	68db      	ldr	r3, [r3, #12]
   1c8bc:	68db      	ldr	r3, [r3, #12]
   1c8be:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1c8c0:	693b      	ldr	r3, [r7, #16]
   1c8c2:	3304      	adds	r3, #4
   1c8c4:	0018      	movs	r0, r3
   1c8c6:	4b23      	ldr	r3, [pc, #140]	; (1c954 <prvSwitchTimerLists+0xb0>)
   1c8c8:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1c8ca:	693b      	ldr	r3, [r7, #16]
   1c8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c8ce:	693a      	ldr	r2, [r7, #16]
   1c8d0:	0010      	movs	r0, r2
   1c8d2:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1c8d4:	693b      	ldr	r3, [r7, #16]
   1c8d6:	69db      	ldr	r3, [r3, #28]
   1c8d8:	2b01      	cmp	r3, #1
   1c8da:	d126      	bne.n	1c92a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1c8dc:	693b      	ldr	r3, [r7, #16]
   1c8de:	699a      	ldr	r2, [r3, #24]
   1c8e0:	697b      	ldr	r3, [r7, #20]
   1c8e2:	18d3      	adds	r3, r2, r3
   1c8e4:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1c8e6:	68fa      	ldr	r2, [r7, #12]
   1c8e8:	697b      	ldr	r3, [r7, #20]
   1c8ea:	429a      	cmp	r2, r3
   1c8ec:	d90e      	bls.n	1c90c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1c8ee:	693b      	ldr	r3, [r7, #16]
   1c8f0:	68fa      	ldr	r2, [r7, #12]
   1c8f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1c8f4:	693b      	ldr	r3, [r7, #16]
   1c8f6:	693a      	ldr	r2, [r7, #16]
   1c8f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1c8fa:	4b15      	ldr	r3, [pc, #84]	; (1c950 <prvSwitchTimerLists+0xac>)
   1c8fc:	681a      	ldr	r2, [r3, #0]
   1c8fe:	693b      	ldr	r3, [r7, #16]
   1c900:	3304      	adds	r3, #4
   1c902:	0019      	movs	r1, r3
   1c904:	0010      	movs	r0, r2
   1c906:	4b14      	ldr	r3, [pc, #80]	; (1c958 <prvSwitchTimerLists+0xb4>)
   1c908:	4798      	blx	r3
   1c90a:	e00e      	b.n	1c92a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1c90c:	697a      	ldr	r2, [r7, #20]
   1c90e:	6938      	ldr	r0, [r7, #16]
   1c910:	2300      	movs	r3, #0
   1c912:	9300      	str	r3, [sp, #0]
   1c914:	2300      	movs	r3, #0
   1c916:	2100      	movs	r1, #0
   1c918:	4c10      	ldr	r4, [pc, #64]	; (1c95c <prvSwitchTimerLists+0xb8>)
   1c91a:	47a0      	blx	r4
   1c91c:	0003      	movs	r3, r0
   1c91e:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1c920:	68bb      	ldr	r3, [r7, #8]
   1c922:	2b00      	cmp	r3, #0
   1c924:	d101      	bne.n	1c92a <prvSwitchTimerLists+0x86>
   1c926:	b672      	cpsid	i
   1c928:	e7fe      	b.n	1c928 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1c92a:	4b09      	ldr	r3, [pc, #36]	; (1c950 <prvSwitchTimerLists+0xac>)
   1c92c:	681b      	ldr	r3, [r3, #0]
   1c92e:	681b      	ldr	r3, [r3, #0]
   1c930:	2b00      	cmp	r3, #0
   1c932:	d1bb      	bne.n	1c8ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1c934:	4b06      	ldr	r3, [pc, #24]	; (1c950 <prvSwitchTimerLists+0xac>)
   1c936:	681b      	ldr	r3, [r3, #0]
   1c938:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1c93a:	4b09      	ldr	r3, [pc, #36]	; (1c960 <prvSwitchTimerLists+0xbc>)
   1c93c:	681a      	ldr	r2, [r3, #0]
   1c93e:	4b04      	ldr	r3, [pc, #16]	; (1c950 <prvSwitchTimerLists+0xac>)
   1c940:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1c942:	4b07      	ldr	r3, [pc, #28]	; (1c960 <prvSwitchTimerLists+0xbc>)
   1c944:	687a      	ldr	r2, [r7, #4]
   1c946:	601a      	str	r2, [r3, #0]
}
   1c948:	46c0      	nop			; (mov r8, r8)
   1c94a:	46bd      	mov	sp, r7
   1c94c:	b007      	add	sp, #28
   1c94e:	bd90      	pop	{r4, r7, pc}
   1c950:	200041d4 	.word	0x200041d4
   1c954:	00018fc7 	.word	0x00018fc7
   1c958:	00018f5b 	.word	0x00018f5b
   1c95c:	0001c479 	.word	0x0001c479
   1c960:	200041d8 	.word	0x200041d8

0001c964 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1c964:	b580      	push	{r7, lr}
   1c966:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1c968:	4b10      	ldr	r3, [pc, #64]	; (1c9ac <prvCheckForValidListAndQueue+0x48>)
   1c96a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1c96c:	4b10      	ldr	r3, [pc, #64]	; (1c9b0 <prvCheckForValidListAndQueue+0x4c>)
   1c96e:	681b      	ldr	r3, [r3, #0]
   1c970:	2b00      	cmp	r3, #0
   1c972:	d115      	bne.n	1c9a0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1c974:	4b0f      	ldr	r3, [pc, #60]	; (1c9b4 <prvCheckForValidListAndQueue+0x50>)
   1c976:	0018      	movs	r0, r3
   1c978:	4b0f      	ldr	r3, [pc, #60]	; (1c9b8 <prvCheckForValidListAndQueue+0x54>)
   1c97a:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1c97c:	4b0f      	ldr	r3, [pc, #60]	; (1c9bc <prvCheckForValidListAndQueue+0x58>)
   1c97e:	0018      	movs	r0, r3
   1c980:	4b0d      	ldr	r3, [pc, #52]	; (1c9b8 <prvCheckForValidListAndQueue+0x54>)
   1c982:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1c984:	4b0e      	ldr	r3, [pc, #56]	; (1c9c0 <prvCheckForValidListAndQueue+0x5c>)
   1c986:	4a0b      	ldr	r2, [pc, #44]	; (1c9b4 <prvCheckForValidListAndQueue+0x50>)
   1c988:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1c98a:	4b0e      	ldr	r3, [pc, #56]	; (1c9c4 <prvCheckForValidListAndQueue+0x60>)
   1c98c:	4a0b      	ldr	r2, [pc, #44]	; (1c9bc <prvCheckForValidListAndQueue+0x58>)
   1c98e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1c990:	2200      	movs	r2, #0
   1c992:	210c      	movs	r1, #12
   1c994:	2005      	movs	r0, #5
   1c996:	4b0c      	ldr	r3, [pc, #48]	; (1c9c8 <prvCheckForValidListAndQueue+0x64>)
   1c998:	4798      	blx	r3
   1c99a:	0002      	movs	r2, r0
   1c99c:	4b04      	ldr	r3, [pc, #16]	; (1c9b0 <prvCheckForValidListAndQueue+0x4c>)
   1c99e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1c9a0:	4b0a      	ldr	r3, [pc, #40]	; (1c9cc <prvCheckForValidListAndQueue+0x68>)
   1c9a2:	4798      	blx	r3
}
   1c9a4:	46c0      	nop			; (mov r8, r8)
   1c9a6:	46bd      	mov	sp, r7
   1c9a8:	bd80      	pop	{r7, pc}
   1c9aa:	46c0      	nop			; (mov r8, r8)
   1c9ac:	00019159 	.word	0x00019159
   1c9b0:	200041dc 	.word	0x200041dc
   1c9b4:	200041ac 	.word	0x200041ac
   1c9b8:	00018ec5 	.word	0x00018ec5
   1c9bc:	200041c0 	.word	0x200041c0
   1c9c0:	200041d4 	.word	0x200041d4
   1c9c4:	200041d8 	.word	0x200041d8
   1c9c8:	00019445 	.word	0x00019445
   1c9cc:	0001917d 	.word	0x0001917d

0001c9d0 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1c9d0:	b580      	push	{r7, lr}
   1c9d2:	b082      	sub	sp, #8
   1c9d4:	af00      	add	r7, sp, #0
   1c9d6:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1c9d8:	687b      	ldr	r3, [r7, #4]
   1c9da:	7c1b      	ldrb	r3, [r3, #16]
   1c9dc:	2b00      	cmp	r3, #0
   1c9de:	d00b      	beq.n	1c9f8 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1c9e0:	687b      	ldr	r3, [r7, #4]
   1c9e2:	689b      	ldr	r3, [r3, #8]
   1c9e4:	1c5a      	adds	r2, r3, #1
   1c9e6:	687b      	ldr	r3, [r7, #4]
   1c9e8:	68d9      	ldr	r1, [r3, #12]
   1c9ea:	4b10      	ldr	r3, [pc, #64]	; (1ca2c <advance_pointer+0x5c>)
   1c9ec:	0010      	movs	r0, r2
   1c9ee:	4798      	blx	r3
   1c9f0:	000b      	movs	r3, r1
   1c9f2:	001a      	movs	r2, r3
   1c9f4:	687b      	ldr	r3, [r7, #4]
   1c9f6:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1c9f8:	687b      	ldr	r3, [r7, #4]
   1c9fa:	685b      	ldr	r3, [r3, #4]
   1c9fc:	1c5a      	adds	r2, r3, #1
   1c9fe:	687b      	ldr	r3, [r7, #4]
   1ca00:	68d9      	ldr	r1, [r3, #12]
   1ca02:	4b0a      	ldr	r3, [pc, #40]	; (1ca2c <advance_pointer+0x5c>)
   1ca04:	0010      	movs	r0, r2
   1ca06:	4798      	blx	r3
   1ca08:	000b      	movs	r3, r1
   1ca0a:	001a      	movs	r2, r3
   1ca0c:	687b      	ldr	r3, [r7, #4]
   1ca0e:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1ca10:	687b      	ldr	r3, [r7, #4]
   1ca12:	685a      	ldr	r2, [r3, #4]
   1ca14:	687b      	ldr	r3, [r7, #4]
   1ca16:	689b      	ldr	r3, [r3, #8]
   1ca18:	1ad3      	subs	r3, r2, r3
   1ca1a:	425a      	negs	r2, r3
   1ca1c:	4153      	adcs	r3, r2
   1ca1e:	b2da      	uxtb	r2, r3
   1ca20:	687b      	ldr	r3, [r7, #4]
   1ca22:	741a      	strb	r2, [r3, #16]
 }
   1ca24:	46c0      	nop			; (mov r8, r8)
   1ca26:	46bd      	mov	sp, r7
   1ca28:	b002      	add	sp, #8
   1ca2a:	bd80      	pop	{r7, pc}
   1ca2c:	00031bd1 	.word	0x00031bd1

0001ca30 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1ca30:	b580      	push	{r7, lr}
   1ca32:	b082      	sub	sp, #8
   1ca34:	af00      	add	r7, sp, #0
   1ca36:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1ca38:	687b      	ldr	r3, [r7, #4]
   1ca3a:	2200      	movs	r2, #0
   1ca3c:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1ca3e:	687b      	ldr	r3, [r7, #4]
   1ca40:	689b      	ldr	r3, [r3, #8]
   1ca42:	1c5a      	adds	r2, r3, #1
   1ca44:	687b      	ldr	r3, [r7, #4]
   1ca46:	68d9      	ldr	r1, [r3, #12]
   1ca48:	4b05      	ldr	r3, [pc, #20]	; (1ca60 <retreat_pointer+0x30>)
   1ca4a:	0010      	movs	r0, r2
   1ca4c:	4798      	blx	r3
   1ca4e:	000b      	movs	r3, r1
   1ca50:	001a      	movs	r2, r3
   1ca52:	687b      	ldr	r3, [r7, #4]
   1ca54:	609a      	str	r2, [r3, #8]
 }
   1ca56:	46c0      	nop			; (mov r8, r8)
   1ca58:	46bd      	mov	sp, r7
   1ca5a:	b002      	add	sp, #8
   1ca5c:	bd80      	pop	{r7, pc}
   1ca5e:	46c0      	nop			; (mov r8, r8)
   1ca60:	00031bd1 	.word	0x00031bd1

0001ca64 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1ca64:	b580      	push	{r7, lr}
   1ca66:	b084      	sub	sp, #16
   1ca68:	af00      	add	r7, sp, #0
   1ca6a:	6078      	str	r0, [r7, #4]
   1ca6c:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1ca6e:	2014      	movs	r0, #20
   1ca70:	4b09      	ldr	r3, [pc, #36]	; (1ca98 <circular_buf_init+0x34>)
   1ca72:	4798      	blx	r3
   1ca74:	0003      	movs	r3, r0
   1ca76:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1ca78:	68fb      	ldr	r3, [r7, #12]
   1ca7a:	687a      	ldr	r2, [r7, #4]
   1ca7c:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1ca7e:	68fb      	ldr	r3, [r7, #12]
   1ca80:	683a      	ldr	r2, [r7, #0]
   1ca82:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1ca84:	68fb      	ldr	r3, [r7, #12]
   1ca86:	0018      	movs	r0, r3
   1ca88:	4b04      	ldr	r3, [pc, #16]	; (1ca9c <circular_buf_init+0x38>)
   1ca8a:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1ca8c:	68fb      	ldr	r3, [r7, #12]
 }
   1ca8e:	0018      	movs	r0, r3
   1ca90:	46bd      	mov	sp, r7
   1ca92:	b004      	add	sp, #16
   1ca94:	bd80      	pop	{r7, pc}
   1ca96:	46c0      	nop			; (mov r8, r8)
   1ca98:	00034521 	.word	0x00034521
   1ca9c:	0001caa1 	.word	0x0001caa1

0001caa0 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1caa0:	b580      	push	{r7, lr}
   1caa2:	b082      	sub	sp, #8
   1caa4:	af00      	add	r7, sp, #0
   1caa6:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1caa8:	687b      	ldr	r3, [r7, #4]
   1caaa:	2200      	movs	r2, #0
   1caac:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1caae:	687b      	ldr	r3, [r7, #4]
   1cab0:	2200      	movs	r2, #0
   1cab2:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1cab4:	687b      	ldr	r3, [r7, #4]
   1cab6:	2200      	movs	r2, #0
   1cab8:	741a      	strb	r2, [r3, #16]
 }
   1caba:	46c0      	nop			; (mov r8, r8)
   1cabc:	46bd      	mov	sp, r7
   1cabe:	b002      	add	sp, #8
   1cac0:	bd80      	pop	{r7, pc}
	...

0001cac4 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1cac4:	b580      	push	{r7, lr}
   1cac6:	b082      	sub	sp, #8
   1cac8:	af00      	add	r7, sp, #0
   1caca:	6078      	str	r0, [r7, #4]
   1cacc:	000a      	movs	r2, r1
   1cace:	1cfb      	adds	r3, r7, #3
   1cad0:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1cad2:	687b      	ldr	r3, [r7, #4]
   1cad4:	681a      	ldr	r2, [r3, #0]
   1cad6:	687b      	ldr	r3, [r7, #4]
   1cad8:	685b      	ldr	r3, [r3, #4]
   1cada:	18d3      	adds	r3, r2, r3
   1cadc:	1cfa      	adds	r2, r7, #3
   1cade:	7812      	ldrb	r2, [r2, #0]
   1cae0:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1cae2:	687b      	ldr	r3, [r7, #4]
   1cae4:	0018      	movs	r0, r3
   1cae6:	4b03      	ldr	r3, [pc, #12]	; (1caf4 <circular_buf_put+0x30>)
   1cae8:	4798      	blx	r3
 }
   1caea:	46c0      	nop			; (mov r8, r8)
   1caec:	46bd      	mov	sp, r7
   1caee:	b002      	add	sp, #8
   1caf0:	bd80      	pop	{r7, pc}
   1caf2:	46c0      	nop			; (mov r8, r8)
   1caf4:	0001c9d1 	.word	0x0001c9d1

0001caf8 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1caf8:	b580      	push	{r7, lr}
   1cafa:	b084      	sub	sp, #16
   1cafc:	af00      	add	r7, sp, #0
   1cafe:	6078      	str	r0, [r7, #4]
   1cb00:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1cb02:	2301      	movs	r3, #1
   1cb04:	425b      	negs	r3, r3
   1cb06:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1cb08:	687b      	ldr	r3, [r7, #4]
   1cb0a:	0018      	movs	r0, r3
   1cb0c:	4b0d      	ldr	r3, [pc, #52]	; (1cb44 <circular_buf_get+0x4c>)
   1cb0e:	4798      	blx	r3
   1cb10:	0003      	movs	r3, r0
   1cb12:	001a      	movs	r2, r3
   1cb14:	2301      	movs	r3, #1
   1cb16:	4053      	eors	r3, r2
   1cb18:	b2db      	uxtb	r3, r3
   1cb1a:	2b00      	cmp	r3, #0
   1cb1c:	d00d      	beq.n	1cb3a <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1cb1e:	687b      	ldr	r3, [r7, #4]
   1cb20:	681a      	ldr	r2, [r3, #0]
   1cb22:	687b      	ldr	r3, [r7, #4]
   1cb24:	689b      	ldr	r3, [r3, #8]
   1cb26:	18d3      	adds	r3, r2, r3
   1cb28:	781a      	ldrb	r2, [r3, #0]
   1cb2a:	683b      	ldr	r3, [r7, #0]
   1cb2c:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1cb2e:	687b      	ldr	r3, [r7, #4]
   1cb30:	0018      	movs	r0, r3
   1cb32:	4b05      	ldr	r3, [pc, #20]	; (1cb48 <circular_buf_get+0x50>)
   1cb34:	4798      	blx	r3

		 r = 0;
   1cb36:	2300      	movs	r3, #0
   1cb38:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1cb3a:	68fb      	ldr	r3, [r7, #12]
 }
   1cb3c:	0018      	movs	r0, r3
   1cb3e:	46bd      	mov	sp, r7
   1cb40:	b004      	add	sp, #16
   1cb42:	bd80      	pop	{r7, pc}
   1cb44:	0001cb4d 	.word	0x0001cb4d
   1cb48:	0001ca31 	.word	0x0001ca31

0001cb4c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1cb4c:	b580      	push	{r7, lr}
   1cb4e:	b082      	sub	sp, #8
   1cb50:	af00      	add	r7, sp, #0
   1cb52:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1cb54:	687b      	ldr	r3, [r7, #4]
   1cb56:	7c1b      	ldrb	r3, [r3, #16]
   1cb58:	2201      	movs	r2, #1
   1cb5a:	4053      	eors	r3, r2
   1cb5c:	b2db      	uxtb	r3, r3
   1cb5e:	2b00      	cmp	r3, #0
   1cb60:	d007      	beq.n	1cb72 <circular_buf_empty+0x26>
   1cb62:	687b      	ldr	r3, [r7, #4]
   1cb64:	685a      	ldr	r2, [r3, #4]
   1cb66:	687b      	ldr	r3, [r7, #4]
   1cb68:	689b      	ldr	r3, [r3, #8]
   1cb6a:	429a      	cmp	r2, r3
   1cb6c:	d101      	bne.n	1cb72 <circular_buf_empty+0x26>
   1cb6e:	2301      	movs	r3, #1
   1cb70:	e000      	b.n	1cb74 <circular_buf_empty+0x28>
   1cb72:	2300      	movs	r3, #0
   1cb74:	1c1a      	adds	r2, r3, #0
   1cb76:	2301      	movs	r3, #1
   1cb78:	4013      	ands	r3, r2
   1cb7a:	b2db      	uxtb	r3, r3
 }
   1cb7c:	0018      	movs	r0, r3
   1cb7e:	46bd      	mov	sp, r7
   1cb80:	b002      	add	sp, #8
   1cb82:	bd80      	pop	{r7, pc}

0001cb84 <system_interrupt_enable>:
{
   1cb84:	b580      	push	{r7, lr}
   1cb86:	b082      	sub	sp, #8
   1cb88:	af00      	add	r7, sp, #0
   1cb8a:	0002      	movs	r2, r0
   1cb8c:	1dfb      	adds	r3, r7, #7
   1cb8e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1cb90:	4b06      	ldr	r3, [pc, #24]	; (1cbac <system_interrupt_enable+0x28>)
   1cb92:	1dfa      	adds	r2, r7, #7
   1cb94:	7812      	ldrb	r2, [r2, #0]
   1cb96:	0011      	movs	r1, r2
   1cb98:	221f      	movs	r2, #31
   1cb9a:	400a      	ands	r2, r1
   1cb9c:	2101      	movs	r1, #1
   1cb9e:	4091      	lsls	r1, r2
   1cba0:	000a      	movs	r2, r1
   1cba2:	601a      	str	r2, [r3, #0]
}
   1cba4:	46c0      	nop			; (mov r8, r8)
   1cba6:	46bd      	mov	sp, r7
   1cba8:	b002      	add	sp, #8
   1cbaa:	bd80      	pop	{r7, pc}
   1cbac:	e000e100 	.word	0xe000e100

0001cbb0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1cbb0:	b580      	push	{r7, lr}
   1cbb2:	b084      	sub	sp, #16
   1cbb4:	af00      	add	r7, sp, #0
   1cbb6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1cbb8:	687b      	ldr	r3, [r7, #4]
   1cbba:	681b      	ldr	r3, [r3, #0]
   1cbbc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1cbbe:	68fb      	ldr	r3, [r7, #12]
   1cbc0:	69db      	ldr	r3, [r3, #28]
   1cbc2:	1e5a      	subs	r2, r3, #1
   1cbc4:	4193      	sbcs	r3, r2
   1cbc6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   1cbc8:	0018      	movs	r0, r3
   1cbca:	46bd      	mov	sp, r7
   1cbcc:	b004      	add	sp, #16
   1cbce:	bd80      	pop	{r7, pc}

0001cbd0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   1cbd0:	b580      	push	{r7, lr}
   1cbd2:	b082      	sub	sp, #8
   1cbd4:	af00      	add	r7, sp, #0
   1cbd6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1cbd8:	46c0      	nop			; (mov r8, r8)
   1cbda:	687b      	ldr	r3, [r7, #4]
   1cbdc:	0018      	movs	r0, r3
   1cbde:	4b04      	ldr	r3, [pc, #16]	; (1cbf0 <_usart_wait_for_sync+0x20>)
   1cbe0:	4798      	blx	r3
   1cbe2:	1e03      	subs	r3, r0, #0
   1cbe4:	d1f9      	bne.n	1cbda <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1cbe6:	46c0      	nop			; (mov r8, r8)
   1cbe8:	46bd      	mov	sp, r7
   1cbea:	b002      	add	sp, #8
   1cbec:	bd80      	pop	{r7, pc}
   1cbee:	46c0      	nop			; (mov r8, r8)
   1cbf0:	0001cbb1 	.word	0x0001cbb1

0001cbf4 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   1cbf4:	b580      	push	{r7, lr}
   1cbf6:	b082      	sub	sp, #8
   1cbf8:	af00      	add	r7, sp, #0
   1cbfa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1cbfc:	687b      	ldr	r3, [r7, #4]
   1cbfe:	2280      	movs	r2, #128	; 0x80
   1cc00:	05d2      	lsls	r2, r2, #23
   1cc02:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1cc04:	687b      	ldr	r3, [r7, #4]
   1cc06:	2200      	movs	r2, #0
   1cc08:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1cc0a:	687b      	ldr	r3, [r7, #4]
   1cc0c:	22ff      	movs	r2, #255	; 0xff
   1cc0e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1cc10:	687b      	ldr	r3, [r7, #4]
   1cc12:	2200      	movs	r2, #0
   1cc14:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1cc16:	687b      	ldr	r3, [r7, #4]
   1cc18:	2200      	movs	r2, #0
   1cc1a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1cc1c:	687b      	ldr	r3, [r7, #4]
   1cc1e:	2296      	movs	r2, #150	; 0x96
   1cc20:	0192      	lsls	r2, r2, #6
   1cc22:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1cc24:	687b      	ldr	r3, [r7, #4]
   1cc26:	2224      	movs	r2, #36	; 0x24
   1cc28:	2101      	movs	r1, #1
   1cc2a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1cc2c:	687b      	ldr	r3, [r7, #4]
   1cc2e:	2225      	movs	r2, #37	; 0x25
   1cc30:	2101      	movs	r1, #1
   1cc32:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1cc34:	687b      	ldr	r3, [r7, #4]
   1cc36:	2226      	movs	r2, #38	; 0x26
   1cc38:	2100      	movs	r1, #0
   1cc3a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1cc3c:	687b      	ldr	r3, [r7, #4]
   1cc3e:	2227      	movs	r2, #39	; 0x27
   1cc40:	2100      	movs	r1, #0
   1cc42:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1cc44:	687b      	ldr	r3, [r7, #4]
   1cc46:	2200      	movs	r2, #0
   1cc48:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1cc4a:	687b      	ldr	r3, [r7, #4]
   1cc4c:	2288      	movs	r2, #136	; 0x88
   1cc4e:	0352      	lsls	r2, r2, #13
   1cc50:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1cc52:	687b      	ldr	r3, [r7, #4]
   1cc54:	222c      	movs	r2, #44	; 0x2c
   1cc56:	2100      	movs	r1, #0
   1cc58:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1cc5a:	687b      	ldr	r3, [r7, #4]
   1cc5c:	222d      	movs	r2, #45	; 0x2d
   1cc5e:	2100      	movs	r1, #0
   1cc60:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1cc62:	687b      	ldr	r3, [r7, #4]
   1cc64:	2200      	movs	r2, #0
   1cc66:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1cc68:	687b      	ldr	r3, [r7, #4]
   1cc6a:	2200      	movs	r2, #0
   1cc6c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1cc6e:	687b      	ldr	r3, [r7, #4]
   1cc70:	2200      	movs	r2, #0
   1cc72:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1cc74:	687b      	ldr	r3, [r7, #4]
   1cc76:	2200      	movs	r2, #0
   1cc78:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1cc7a:	687b      	ldr	r3, [r7, #4]
   1cc7c:	2200      	movs	r2, #0
   1cc7e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1cc80:	687b      	ldr	r3, [r7, #4]
   1cc82:	2200      	movs	r2, #0
   1cc84:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1cc86:	687b      	ldr	r3, [r7, #4]
   1cc88:	2200      	movs	r2, #0
   1cc8a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1cc8c:	687b      	ldr	r3, [r7, #4]
   1cc8e:	2200      	movs	r2, #0
   1cc90:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   1cc92:	687b      	ldr	r3, [r7, #4]
   1cc94:	2200      	movs	r2, #0
   1cc96:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   1cc98:	687b      	ldr	r3, [r7, #4]
   1cc9a:	2200      	movs	r2, #0
   1cc9c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1cc9e:	687b      	ldr	r3, [r7, #4]
   1cca0:	2213      	movs	r2, #19
   1cca2:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   1cca4:	687b      	ldr	r3, [r7, #4]
   1cca6:	2200      	movs	r2, #0
   1cca8:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1ccaa:	46c0      	nop			; (mov r8, r8)
   1ccac:	46bd      	mov	sp, r7
   1ccae:	b002      	add	sp, #8
   1ccb0:	bd80      	pop	{r7, pc}
	...

0001ccb4 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   1ccb4:	b580      	push	{r7, lr}
   1ccb6:	b084      	sub	sp, #16
   1ccb8:	af00      	add	r7, sp, #0
   1ccba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1ccbc:	687b      	ldr	r3, [r7, #4]
   1ccbe:	681b      	ldr	r3, [r3, #0]
   1ccc0:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1ccc2:	687b      	ldr	r3, [r7, #4]
   1ccc4:	681b      	ldr	r3, [r3, #0]
   1ccc6:	0018      	movs	r0, r3
   1ccc8:	4b09      	ldr	r3, [pc, #36]	; (1ccf0 <usart_enable+0x3c>)
   1ccca:	4798      	blx	r3
   1cccc:	0003      	movs	r3, r0
   1ccce:	0018      	movs	r0, r3
   1ccd0:	4b08      	ldr	r3, [pc, #32]	; (1ccf4 <usart_enable+0x40>)
   1ccd2:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1ccd4:	687b      	ldr	r3, [r7, #4]
   1ccd6:	0018      	movs	r0, r3
   1ccd8:	4b07      	ldr	r3, [pc, #28]	; (1ccf8 <usart_enable+0x44>)
   1ccda:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1ccdc:	68fb      	ldr	r3, [r7, #12]
   1ccde:	681b      	ldr	r3, [r3, #0]
   1cce0:	2202      	movs	r2, #2
   1cce2:	431a      	orrs	r2, r3
   1cce4:	68fb      	ldr	r3, [r7, #12]
   1cce6:	601a      	str	r2, [r3, #0]
}
   1cce8:	46c0      	nop			; (mov r8, r8)
   1ccea:	46bd      	mov	sp, r7
   1ccec:	b004      	add	sp, #16
   1ccee:	bd80      	pop	{r7, pc}
   1ccf0:	0002671d 	.word	0x0002671d
   1ccf4:	0001cb85 	.word	0x0001cb85
   1ccf8:	0001cbd1 	.word	0x0001cbd1

0001ccfc <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1ccfc:	b580      	push	{r7, lr}
   1ccfe:	b082      	sub	sp, #8
   1cd00:	af00      	add	r7, sp, #0
   1cd02:	6078      	str	r0, [r7, #4]
   1cd04:	000a      	movs	r2, r1
   1cd06:	1cfb      	adds	r3, r7, #3
   1cd08:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1cd0a:	687b      	ldr	r3, [r7, #4]
   1cd0c:	2231      	movs	r2, #49	; 0x31
   1cd0e:	5c9b      	ldrb	r3, [r3, r2]
   1cd10:	b25a      	sxtb	r2, r3
   1cd12:	1cfb      	adds	r3, r7, #3
   1cd14:	781b      	ldrb	r3, [r3, #0]
   1cd16:	2101      	movs	r1, #1
   1cd18:	4099      	lsls	r1, r3
   1cd1a:	000b      	movs	r3, r1
   1cd1c:	b25b      	sxtb	r3, r3
   1cd1e:	4313      	orrs	r3, r2
   1cd20:	b25b      	sxtb	r3, r3
   1cd22:	b2d9      	uxtb	r1, r3
   1cd24:	687b      	ldr	r3, [r7, #4]
   1cd26:	2231      	movs	r2, #49	; 0x31
   1cd28:	5499      	strb	r1, [r3, r2]

}
   1cd2a:	46c0      	nop			; (mov r8, r8)
   1cd2c:	46bd      	mov	sp, r7
   1cd2e:	b002      	add	sp, #8
   1cd30:	bd80      	pop	{r7, pc}
	...

0001cd34 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   1cd34:	b580      	push	{r7, lr}
   1cd36:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1cd38:	2380      	movs	r3, #128	; 0x80
   1cd3a:	009a      	lsls	r2, r3, #2
   1cd3c:	4b0f      	ldr	r3, [pc, #60]	; (1cd7c <InitializeSerialConsole+0x48>)
   1cd3e:	0011      	movs	r1, r2
   1cd40:	0018      	movs	r0, r3
   1cd42:	4b0f      	ldr	r3, [pc, #60]	; (1cd80 <InitializeSerialConsole+0x4c>)
   1cd44:	4798      	blx	r3
   1cd46:	0002      	movs	r2, r0
   1cd48:	4b0e      	ldr	r3, [pc, #56]	; (1cd84 <InitializeSerialConsole+0x50>)
   1cd4a:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1cd4c:	2380      	movs	r3, #128	; 0x80
   1cd4e:	009a      	lsls	r2, r3, #2
   1cd50:	4b0d      	ldr	r3, [pc, #52]	; (1cd88 <InitializeSerialConsole+0x54>)
   1cd52:	0011      	movs	r1, r2
   1cd54:	0018      	movs	r0, r3
   1cd56:	4b0a      	ldr	r3, [pc, #40]	; (1cd80 <InitializeSerialConsole+0x4c>)
   1cd58:	4798      	blx	r3
   1cd5a:	0002      	movs	r2, r0
   1cd5c:	4b0b      	ldr	r3, [pc, #44]	; (1cd8c <InitializeSerialConsole+0x58>)
   1cd5e:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1cd60:	4b0b      	ldr	r3, [pc, #44]	; (1cd90 <InitializeSerialConsole+0x5c>)
   1cd62:	4798      	blx	r3
    configure_usart_callbacks();
   1cd64:	4b0b      	ldr	r3, [pc, #44]	; (1cd94 <InitializeSerialConsole+0x60>)
   1cd66:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1cd68:	490b      	ldr	r1, [pc, #44]	; (1cd98 <InitializeSerialConsole+0x64>)
   1cd6a:	4b0c      	ldr	r3, [pc, #48]	; (1cd9c <InitializeSerialConsole+0x68>)
   1cd6c:	2201      	movs	r2, #1
   1cd6e:	0018      	movs	r0, r3
   1cd70:	4b0b      	ldr	r3, [pc, #44]	; (1cda0 <InitializeSerialConsole+0x6c>)
   1cd72:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1cd74:	46c0      	nop			; (mov r8, r8)
   1cd76:	46bd      	mov	sp, r7
   1cd78:	bd80      	pop	{r7, pc}
   1cd7a:	46c0      	nop			; (mov r8, r8)
   1cd7c:	20005850 	.word	0x20005850
   1cd80:	0001ca65 	.word	0x0001ca65
   1cd84:	20005648 	.word	0x20005648
   1cd88:	20005650 	.word	0x20005650
   1cd8c:	20005a54 	.word	0x20005a54
   1cd90:	0001cf09 	.word	0x0001cf09
   1cd94:	0001cf81 	.word	0x0001cf81
   1cd98:	2000564c 	.word	0x2000564c
   1cd9c:	20005614 	.word	0x20005614
   1cda0:	00027fc5 	.word	0x00027fc5

0001cda4 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   1cda4:	b580      	push	{r7, lr}
   1cda6:	b084      	sub	sp, #16
   1cda8:	af00      	add	r7, sp, #0
   1cdaa:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1cdac:	4b1a      	ldr	r3, [pc, #104]	; (1ce18 <SerialConsoleWriteString+0x74>)
   1cdae:	4798      	blx	r3
    if (string != NULL) {
   1cdb0:	687b      	ldr	r3, [r7, #4]
   1cdb2:	2b00      	cmp	r3, #0
   1cdb4:	d02a      	beq.n	1ce0c <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1cdb6:	2300      	movs	r3, #0
   1cdb8:	60fb      	str	r3, [r7, #12]
   1cdba:	e00b      	b.n	1cdd4 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1cdbc:	4b17      	ldr	r3, [pc, #92]	; (1ce1c <SerialConsoleWriteString+0x78>)
   1cdbe:	6818      	ldr	r0, [r3, #0]
   1cdc0:	687a      	ldr	r2, [r7, #4]
   1cdc2:	68fb      	ldr	r3, [r7, #12]
   1cdc4:	18d3      	adds	r3, r2, r3
   1cdc6:	781b      	ldrb	r3, [r3, #0]
   1cdc8:	0019      	movs	r1, r3
   1cdca:	4b15      	ldr	r3, [pc, #84]	; (1ce20 <SerialConsoleWriteString+0x7c>)
   1cdcc:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1cdce:	68fb      	ldr	r3, [r7, #12]
   1cdd0:	3301      	adds	r3, #1
   1cdd2:	60fb      	str	r3, [r7, #12]
   1cdd4:	687b      	ldr	r3, [r7, #4]
   1cdd6:	0018      	movs	r0, r3
   1cdd8:	4b12      	ldr	r3, [pc, #72]	; (1ce24 <SerialConsoleWriteString+0x80>)
   1cdda:	4798      	blx	r3
   1cddc:	0002      	movs	r2, r0
   1cdde:	68fb      	ldr	r3, [r7, #12]
   1cde0:	429a      	cmp	r2, r3
   1cde2:	d8eb      	bhi.n	1cdbc <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1cde4:	4b10      	ldr	r3, [pc, #64]	; (1ce28 <SerialConsoleWriteString+0x84>)
   1cde6:	2101      	movs	r1, #1
   1cde8:	0018      	movs	r0, r3
   1cdea:	4b10      	ldr	r3, [pc, #64]	; (1ce2c <SerialConsoleWriteString+0x88>)
   1cdec:	4798      	blx	r3
   1cdee:	1e03      	subs	r3, r0, #0
   1cdf0:	d10c      	bne.n	1ce0c <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   1cdf2:	4b0a      	ldr	r3, [pc, #40]	; (1ce1c <SerialConsoleWriteString+0x78>)
   1cdf4:	681b      	ldr	r3, [r3, #0]
   1cdf6:	4a0e      	ldr	r2, [pc, #56]	; (1ce30 <SerialConsoleWriteString+0x8c>)
   1cdf8:	0011      	movs	r1, r2
   1cdfa:	0018      	movs	r0, r3
   1cdfc:	4b0d      	ldr	r3, [pc, #52]	; (1ce34 <SerialConsoleWriteString+0x90>)
   1cdfe:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1ce00:	490b      	ldr	r1, [pc, #44]	; (1ce30 <SerialConsoleWriteString+0x8c>)
   1ce02:	4b09      	ldr	r3, [pc, #36]	; (1ce28 <SerialConsoleWriteString+0x84>)
   1ce04:	2201      	movs	r2, #1
   1ce06:	0018      	movs	r0, r3
   1ce08:	4b0b      	ldr	r3, [pc, #44]	; (1ce38 <SerialConsoleWriteString+0x94>)
   1ce0a:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1ce0c:	4b0b      	ldr	r3, [pc, #44]	; (1ce3c <SerialConsoleWriteString+0x98>)
   1ce0e:	4798      	blx	r3
}
   1ce10:	46c0      	nop			; (mov r8, r8)
   1ce12:	46bd      	mov	sp, r7
   1ce14:	b004      	add	sp, #16
   1ce16:	bd80      	pop	{r7, pc}
   1ce18:	0001b411 	.word	0x0001b411
   1ce1c:	20005a54 	.word	0x20005a54
   1ce20:	0001cac5 	.word	0x0001cac5
   1ce24:	0003491b 	.word	0x0003491b
   1ce28:	20005614 	.word	0x20005614
   1ce2c:	0002800d 	.word	0x0002800d
   1ce30:	20005a50 	.word	0x20005a50
   1ce34:	0001caf9 	.word	0x0001caf9
   1ce38:	00027f7d 	.word	0x00027f7d
   1ce3c:	0001b429 	.word	0x0001b429

0001ce40 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1ce40:	b580      	push	{r7, lr}
   1ce42:	b084      	sub	sp, #16
   1ce44:	af00      	add	r7, sp, #0
   1ce46:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1ce48:	4b08      	ldr	r3, [pc, #32]	; (1ce6c <SerialConsoleReadCharacter+0x2c>)
   1ce4a:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   1ce4c:	4b08      	ldr	r3, [pc, #32]	; (1ce70 <SerialConsoleReadCharacter+0x30>)
   1ce4e:	681b      	ldr	r3, [r3, #0]
   1ce50:	687a      	ldr	r2, [r7, #4]
   1ce52:	0011      	movs	r1, r2
   1ce54:	0018      	movs	r0, r3
   1ce56:	4b07      	ldr	r3, [pc, #28]	; (1ce74 <SerialConsoleReadCharacter+0x34>)
   1ce58:	4798      	blx	r3
   1ce5a:	0003      	movs	r3, r0
   1ce5c:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1ce5e:	4b06      	ldr	r3, [pc, #24]	; (1ce78 <SerialConsoleReadCharacter+0x38>)
   1ce60:	4798      	blx	r3
    return a;
   1ce62:	68fb      	ldr	r3, [r7, #12]
}
   1ce64:	0018      	movs	r0, r3
   1ce66:	46bd      	mov	sp, r7
   1ce68:	b004      	add	sp, #16
   1ce6a:	bd80      	pop	{r7, pc}
   1ce6c:	0001b411 	.word	0x0001b411
   1ce70:	20005648 	.word	0x20005648
   1ce74:	0001caf9 	.word	0x0001caf9
   1ce78:	0001b429 	.word	0x0001b429

0001ce7c <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   1ce7c:	b580      	push	{r7, lr}
   1ce7e:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   1ce80:	4b02      	ldr	r3, [pc, #8]	; (1ce8c <getLogLevel+0x10>)
   1ce82:	781b      	ldrb	r3, [r3, #0]
}
   1ce84:	0018      	movs	r0, r3
   1ce86:	46bd      	mov	sp, r7
   1ce88:	bd80      	pop	{r7, pc}
   1ce8a:	46c0      	nop			; (mov r8, r8)
   1ce8c:	200041e8 	.word	0x200041e8

0001ce90 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1ce90:	b40e      	push	{r1, r2, r3}
   1ce92:	b590      	push	{r4, r7, lr}
   1ce94:	b084      	sub	sp, #16
   1ce96:	af00      	add	r7, sp, #0
   1ce98:	0002      	movs	r2, r0
   1ce9a:	1dfb      	adds	r3, r7, #7
   1ce9c:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   1ce9e:	4b0e      	ldr	r3, [pc, #56]	; (1ced8 <LogMessage+0x48>)
   1cea0:	4798      	blx	r3
   1cea2:	0003      	movs	r3, r0
   1cea4:	001a      	movs	r2, r3
   1cea6:	1dfb      	adds	r3, r7, #7
   1cea8:	781b      	ldrb	r3, [r3, #0]
   1ceaa:	4293      	cmp	r3, r2
   1ceac:	d30c      	bcc.n	1cec8 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   1ceae:	2320      	movs	r3, #32
   1ceb0:	18fb      	adds	r3, r7, r3
   1ceb2:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   1ceb4:	68fb      	ldr	r3, [r7, #12]
   1ceb6:	69fa      	ldr	r2, [r7, #28]
   1ceb8:	4808      	ldr	r0, [pc, #32]	; (1cedc <LogMessage+0x4c>)
   1ceba:	217f      	movs	r1, #127	; 0x7f
   1cebc:	4c08      	ldr	r4, [pc, #32]	; (1cee0 <LogMessage+0x50>)
   1cebe:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   1cec0:	4b06      	ldr	r3, [pc, #24]	; (1cedc <LogMessage+0x4c>)
   1cec2:	0018      	movs	r0, r3
   1cec4:	4b07      	ldr	r3, [pc, #28]	; (1cee4 <LogMessage+0x54>)
   1cec6:	4798      	blx	r3
        va_end(ap);
    }
};
   1cec8:	46c0      	nop			; (mov r8, r8)
   1ceca:	46bd      	mov	sp, r7
   1cecc:	b004      	add	sp, #16
   1cece:	bc90      	pop	{r4, r7}
   1ced0:	bc08      	pop	{r3}
   1ced2:	b003      	add	sp, #12
   1ced4:	4718      	bx	r3
   1ced6:	46c0      	nop			; (mov r8, r8)
   1ced8:	0001ce7d 	.word	0x0001ce7d
   1cedc:	20005594 	.word	0x20005594
   1cee0:	00034b55 	.word	0x00034b55
   1cee4:	0001cda5 	.word	0x0001cda5

0001cee8 <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   1cee8:	b40f      	push	{r0, r1, r2, r3}
   1ceea:	b580      	push	{r7, lr}
   1ceec:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   1ceee:	68bb      	ldr	r3, [r7, #8]
   1cef0:	0019      	movs	r1, r3
   1cef2:	2001      	movs	r0, #1
   1cef4:	4b03      	ldr	r3, [pc, #12]	; (1cf04 <LogMessageDebug+0x1c>)
   1cef6:	4798      	blx	r3
};
   1cef8:	46c0      	nop			; (mov r8, r8)
   1cefa:	46bd      	mov	sp, r7
   1cefc:	bc80      	pop	{r7}
   1cefe:	bc08      	pop	{r3}
   1cf00:	b004      	add	sp, #16
   1cf02:	4718      	bx	r3
   1cf04:	0001ce91 	.word	0x0001ce91

0001cf08 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   1cf08:	b580      	push	{r7, lr}
   1cf0a:	b090      	sub	sp, #64	; 0x40
   1cf0c:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1cf0e:	003b      	movs	r3, r7
   1cf10:	0018      	movs	r0, r3
   1cf12:	4b14      	ldr	r3, [pc, #80]	; (1cf64 <configure_usart+0x5c>)
   1cf14:	4798      	blx	r3

    config_usart.baudrate = 115200;
   1cf16:	003b      	movs	r3, r7
   1cf18:	22e1      	movs	r2, #225	; 0xe1
   1cf1a:	0252      	lsls	r2, r2, #9
   1cf1c:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1cf1e:	003b      	movs	r3, r7
   1cf20:	22c4      	movs	r2, #196	; 0xc4
   1cf22:	0392      	lsls	r2, r2, #14
   1cf24:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1cf26:	003b      	movs	r3, r7
   1cf28:	2201      	movs	r2, #1
   1cf2a:	4252      	negs	r2, r2
   1cf2c:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1cf2e:	003b      	movs	r3, r7
   1cf30:	2201      	movs	r2, #1
   1cf32:	4252      	negs	r2, r2
   1cf34:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1cf36:	003b      	movs	r3, r7
   1cf38:	4a0b      	ldr	r2, [pc, #44]	; (1cf68 <configure_usart+0x60>)
   1cf3a:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1cf3c:	003b      	movs	r3, r7
   1cf3e:	4a0b      	ldr	r2, [pc, #44]	; (1cf6c <configure_usart+0x64>)
   1cf40:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   1cf42:	46c0      	nop			; (mov r8, r8)
   1cf44:	003a      	movs	r2, r7
   1cf46:	490a      	ldr	r1, [pc, #40]	; (1cf70 <configure_usart+0x68>)
   1cf48:	4b0a      	ldr	r3, [pc, #40]	; (1cf74 <configure_usart+0x6c>)
   1cf4a:	0018      	movs	r0, r3
   1cf4c:	4b0a      	ldr	r3, [pc, #40]	; (1cf78 <configure_usart+0x70>)
   1cf4e:	4798      	blx	r3
   1cf50:	1e03      	subs	r3, r0, #0
   1cf52:	d1f7      	bne.n	1cf44 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   1cf54:	4b07      	ldr	r3, [pc, #28]	; (1cf74 <configure_usart+0x6c>)
   1cf56:	0018      	movs	r0, r3
   1cf58:	4b08      	ldr	r3, [pc, #32]	; (1cf7c <configure_usart+0x74>)
   1cf5a:	4798      	blx	r3
}
   1cf5c:	46c0      	nop			; (mov r8, r8)
   1cf5e:	46bd      	mov	sp, r7
   1cf60:	b010      	add	sp, #64	; 0x40
   1cf62:	bd80      	pop	{r7, pc}
   1cf64:	0001cbf5 	.word	0x0001cbf5
   1cf68:	002a0003 	.word	0x002a0003
   1cf6c:	002b0003 	.word	0x002b0003
   1cf70:	42001800 	.word	0x42001800
   1cf74:	20005614 	.word	0x20005614
   1cf78:	00027b81 	.word	0x00027b81
   1cf7c:	0001ccb5 	.word	0x0001ccb5

0001cf80 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   1cf80:	b580      	push	{r7, lr}
   1cf82:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1cf84:	490c      	ldr	r1, [pc, #48]	; (1cfb8 <configure_usart_callbacks+0x38>)
   1cf86:	4b0d      	ldr	r3, [pc, #52]	; (1cfbc <configure_usart_callbacks+0x3c>)
   1cf88:	2200      	movs	r2, #0
   1cf8a:	0018      	movs	r0, r3
   1cf8c:	4b0c      	ldr	r3, [pc, #48]	; (1cfc0 <configure_usart_callbacks+0x40>)
   1cf8e:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1cf90:	490c      	ldr	r1, [pc, #48]	; (1cfc4 <configure_usart_callbacks+0x44>)
   1cf92:	4b0a      	ldr	r3, [pc, #40]	; (1cfbc <configure_usart_callbacks+0x3c>)
   1cf94:	2201      	movs	r2, #1
   1cf96:	0018      	movs	r0, r3
   1cf98:	4b09      	ldr	r3, [pc, #36]	; (1cfc0 <configure_usart_callbacks+0x40>)
   1cf9a:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1cf9c:	4b07      	ldr	r3, [pc, #28]	; (1cfbc <configure_usart_callbacks+0x3c>)
   1cf9e:	2100      	movs	r1, #0
   1cfa0:	0018      	movs	r0, r3
   1cfa2:	4b09      	ldr	r3, [pc, #36]	; (1cfc8 <configure_usart_callbacks+0x48>)
   1cfa4:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1cfa6:	4b05      	ldr	r3, [pc, #20]	; (1cfbc <configure_usart_callbacks+0x3c>)
   1cfa8:	2101      	movs	r1, #1
   1cfaa:	0018      	movs	r0, r3
   1cfac:	4b06      	ldr	r3, [pc, #24]	; (1cfc8 <configure_usart_callbacks+0x48>)
   1cfae:	4798      	blx	r3
}
   1cfb0:	46c0      	nop			; (mov r8, r8)
   1cfb2:	46bd      	mov	sp, r7
   1cfb4:	bd80      	pop	{r7, pc}
   1cfb6:	46c0      	nop			; (mov r8, r8)
   1cfb8:	0001d015 	.word	0x0001d015
   1cfbc:	20005614 	.word	0x20005614
   1cfc0:	00027f35 	.word	0x00027f35
   1cfc4:	0001cfcd 	.word	0x0001cfcd
   1cfc8:	0001ccfd 	.word	0x0001ccfd

0001cfcc <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   1cfcc:	b580      	push	{r7, lr}
   1cfce:	b082      	sub	sp, #8
   1cfd0:	af00      	add	r7, sp, #0
   1cfd2:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   1cfd4:	4b09      	ldr	r3, [pc, #36]	; (1cffc <usart_read_callback+0x30>)
   1cfd6:	681a      	ldr	r2, [r3, #0]
   1cfd8:	4b09      	ldr	r3, [pc, #36]	; (1d000 <usart_read_callback+0x34>)
   1cfda:	781b      	ldrb	r3, [r3, #0]
   1cfdc:	0019      	movs	r1, r3
   1cfde:	0010      	movs	r0, r2
   1cfe0:	4b08      	ldr	r3, [pc, #32]	; (1d004 <usart_read_callback+0x38>)
   1cfe2:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   1cfe4:	4906      	ldr	r1, [pc, #24]	; (1d000 <usart_read_callback+0x34>)
   1cfe6:	4b08      	ldr	r3, [pc, #32]	; (1d008 <usart_read_callback+0x3c>)
   1cfe8:	2201      	movs	r2, #1
   1cfea:	0018      	movs	r0, r3
   1cfec:	4b07      	ldr	r3, [pc, #28]	; (1d00c <usart_read_callback+0x40>)
   1cfee:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   1cff0:	4b07      	ldr	r3, [pc, #28]	; (1d010 <usart_read_callback+0x44>)
   1cff2:	4798      	blx	r3
}
   1cff4:	46c0      	nop			; (mov r8, r8)
   1cff6:	46bd      	mov	sp, r7
   1cff8:	b002      	add	sp, #8
   1cffa:	bd80      	pop	{r7, pc}
   1cffc:	20005648 	.word	0x20005648
   1d000:	2000564c 	.word	0x2000564c
   1d004:	0001cac5 	.word	0x0001cac5
   1d008:	20005614 	.word	0x20005614
   1d00c:	00027fc5 	.word	0x00027fc5
   1d010:	00013b65 	.word	0x00013b65

0001d014 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   1d014:	b580      	push	{r7, lr}
   1d016:	b082      	sub	sp, #8
   1d018:	af00      	add	r7, sp, #0
   1d01a:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   1d01c:	4b09      	ldr	r3, [pc, #36]	; (1d044 <usart_write_callback+0x30>)
   1d01e:	681b      	ldr	r3, [r3, #0]
   1d020:	4a09      	ldr	r2, [pc, #36]	; (1d048 <usart_write_callback+0x34>)
   1d022:	0011      	movs	r1, r2
   1d024:	0018      	movs	r0, r3
   1d026:	4b09      	ldr	r3, [pc, #36]	; (1d04c <usart_write_callback+0x38>)
   1d028:	4798      	blx	r3
   1d02a:	0003      	movs	r3, r0
   1d02c:	3301      	adds	r3, #1
   1d02e:	d005      	beq.n	1d03c <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1d030:	4905      	ldr	r1, [pc, #20]	; (1d048 <usart_write_callback+0x34>)
   1d032:	4b07      	ldr	r3, [pc, #28]	; (1d050 <usart_write_callback+0x3c>)
   1d034:	2201      	movs	r2, #1
   1d036:	0018      	movs	r0, r3
   1d038:	4b06      	ldr	r3, [pc, #24]	; (1d054 <usart_write_callback+0x40>)
   1d03a:	4798      	blx	r3
    }
}
   1d03c:	46c0      	nop			; (mov r8, r8)
   1d03e:	46bd      	mov	sp, r7
   1d040:	b002      	add	sp, #8
   1d042:	bd80      	pop	{r7, pc}
   1d044:	20005a54 	.word	0x20005a54
   1d048:	20005a50 	.word	0x20005a50
   1d04c:	0001caf9 	.word	0x0001caf9
   1d050:	20005614 	.word	0x20005614
   1d054:	00027f7d 	.word	0x00027f7d

0001d058 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1d058:	b590      	push	{r4, r7, lr}
   1d05a:	b087      	sub	sp, #28
   1d05c:	af00      	add	r7, sp, #0
   1d05e:	60f8      	str	r0, [r7, #12]
   1d060:	000c      	movs	r4, r1
   1d062:	0010      	movs	r0, r2
   1d064:	0019      	movs	r1, r3
   1d066:	230a      	movs	r3, #10
   1d068:	18fb      	adds	r3, r7, r3
   1d06a:	1c22      	adds	r2, r4, #0
   1d06c:	801a      	strh	r2, [r3, #0]
   1d06e:	2308      	movs	r3, #8
   1d070:	18fb      	adds	r3, r7, r3
   1d072:	1c02      	adds	r2, r0, #0
   1d074:	801a      	strh	r2, [r3, #0]
   1d076:	1dfb      	adds	r3, r7, #7
   1d078:	1c0a      	adds	r2, r1, #0
   1d07a:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1d07c:	230a      	movs	r3, #10
   1d07e:	18fb      	adds	r3, r7, r3
   1d080:	881a      	ldrh	r2, [r3, #0]
   1d082:	2308      	movs	r3, #8
   1d084:	18fb      	adds	r3, r7, r3
   1d086:	881b      	ldrh	r3, [r3, #0]
   1d088:	1ad3      	subs	r3, r2, r3
   1d08a:	3307      	adds	r3, #7
   1d08c:	2b00      	cmp	r3, #0
   1d08e:	da00      	bge.n	1d092 <SDMMC_UNSTUFF_BITS+0x3a>
   1d090:	3307      	adds	r3, #7
   1d092:	10db      	asrs	r3, r3, #3
   1d094:	3b01      	subs	r3, #1
   1d096:	68fa      	ldr	r2, [r7, #12]
   1d098:	18d3      	adds	r3, r2, r3
   1d09a:	781b      	ldrb	r3, [r3, #0]
   1d09c:	0019      	movs	r1, r3
   1d09e:	2308      	movs	r3, #8
   1d0a0:	18fb      	adds	r3, r7, r3
   1d0a2:	881b      	ldrh	r3, [r3, #0]
   1d0a4:	2207      	movs	r2, #7
   1d0a6:	4013      	ands	r3, r2
   1d0a8:	4119      	asrs	r1, r3
   1d0aa:	000b      	movs	r3, r1
   1d0ac:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1d0ae:	2308      	movs	r3, #8
   1d0b0:	18fb      	adds	r3, r7, r3
   1d0b2:	881b      	ldrh	r3, [r3, #0]
   1d0b4:	2207      	movs	r2, #7
   1d0b6:	401a      	ands	r2, r3
   1d0b8:	1dfb      	adds	r3, r7, #7
   1d0ba:	781b      	ldrb	r3, [r3, #0]
   1d0bc:	18d3      	adds	r3, r2, r3
   1d0be:	2b08      	cmp	r3, #8
   1d0c0:	dd1c      	ble.n	1d0fc <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1d0c2:	230a      	movs	r3, #10
   1d0c4:	18fb      	adds	r3, r7, r3
   1d0c6:	881a      	ldrh	r2, [r3, #0]
   1d0c8:	2308      	movs	r3, #8
   1d0ca:	18fb      	adds	r3, r7, r3
   1d0cc:	881b      	ldrh	r3, [r3, #0]
   1d0ce:	1ad3      	subs	r3, r2, r3
   1d0d0:	3307      	adds	r3, #7
   1d0d2:	2b00      	cmp	r3, #0
   1d0d4:	da00      	bge.n	1d0d8 <SDMMC_UNSTUFF_BITS+0x80>
   1d0d6:	3307      	adds	r3, #7
   1d0d8:	10db      	asrs	r3, r3, #3
   1d0da:	3b02      	subs	r3, #2
   1d0dc:	68fa      	ldr	r2, [r7, #12]
   1d0de:	18d3      	adds	r3, r2, r3
   1d0e0:	781b      	ldrb	r3, [r3, #0]
   1d0e2:	0019      	movs	r1, r3
   1d0e4:	2308      	movs	r3, #8
   1d0e6:	18fb      	adds	r3, r7, r3
   1d0e8:	881b      	ldrh	r3, [r3, #0]
   1d0ea:	2207      	movs	r2, #7
   1d0ec:	4013      	ands	r3, r2
   1d0ee:	2208      	movs	r2, #8
   1d0f0:	1ad3      	subs	r3, r2, r3
   1d0f2:	4099      	lsls	r1, r3
   1d0f4:	000b      	movs	r3, r1
   1d0f6:	697a      	ldr	r2, [r7, #20]
   1d0f8:	4313      	orrs	r3, r2
   1d0fa:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1d0fc:	2308      	movs	r3, #8
   1d0fe:	18fb      	adds	r3, r7, r3
   1d100:	881b      	ldrh	r3, [r3, #0]
   1d102:	2207      	movs	r2, #7
   1d104:	401a      	ands	r2, r3
   1d106:	1dfb      	adds	r3, r7, #7
   1d108:	781b      	ldrb	r3, [r3, #0]
   1d10a:	18d3      	adds	r3, r2, r3
   1d10c:	2b10      	cmp	r3, #16
   1d10e:	dd1c      	ble.n	1d14a <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1d110:	230a      	movs	r3, #10
   1d112:	18fb      	adds	r3, r7, r3
   1d114:	881a      	ldrh	r2, [r3, #0]
   1d116:	2308      	movs	r3, #8
   1d118:	18fb      	adds	r3, r7, r3
   1d11a:	881b      	ldrh	r3, [r3, #0]
   1d11c:	1ad3      	subs	r3, r2, r3
   1d11e:	3307      	adds	r3, #7
   1d120:	2b00      	cmp	r3, #0
   1d122:	da00      	bge.n	1d126 <SDMMC_UNSTUFF_BITS+0xce>
   1d124:	3307      	adds	r3, #7
   1d126:	10db      	asrs	r3, r3, #3
   1d128:	3b03      	subs	r3, #3
   1d12a:	68fa      	ldr	r2, [r7, #12]
   1d12c:	18d3      	adds	r3, r2, r3
   1d12e:	781b      	ldrb	r3, [r3, #0]
   1d130:	0019      	movs	r1, r3
   1d132:	2308      	movs	r3, #8
   1d134:	18fb      	adds	r3, r7, r3
   1d136:	881b      	ldrh	r3, [r3, #0]
   1d138:	2207      	movs	r2, #7
   1d13a:	4013      	ands	r3, r2
   1d13c:	2210      	movs	r2, #16
   1d13e:	1ad3      	subs	r3, r2, r3
   1d140:	4099      	lsls	r1, r3
   1d142:	000b      	movs	r3, r1
   1d144:	697a      	ldr	r2, [r7, #20]
   1d146:	4313      	orrs	r3, r2
   1d148:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1d14a:	2308      	movs	r3, #8
   1d14c:	18fb      	adds	r3, r7, r3
   1d14e:	881b      	ldrh	r3, [r3, #0]
   1d150:	2207      	movs	r2, #7
   1d152:	401a      	ands	r2, r3
   1d154:	1dfb      	adds	r3, r7, #7
   1d156:	781b      	ldrb	r3, [r3, #0]
   1d158:	18d3      	adds	r3, r2, r3
   1d15a:	2b10      	cmp	r3, #16
   1d15c:	dd1c      	ble.n	1d198 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1d15e:	230a      	movs	r3, #10
   1d160:	18fb      	adds	r3, r7, r3
   1d162:	881a      	ldrh	r2, [r3, #0]
   1d164:	2308      	movs	r3, #8
   1d166:	18fb      	adds	r3, r7, r3
   1d168:	881b      	ldrh	r3, [r3, #0]
   1d16a:	1ad3      	subs	r3, r2, r3
   1d16c:	3307      	adds	r3, #7
   1d16e:	2b00      	cmp	r3, #0
   1d170:	da00      	bge.n	1d174 <SDMMC_UNSTUFF_BITS+0x11c>
   1d172:	3307      	adds	r3, #7
   1d174:	10db      	asrs	r3, r3, #3
   1d176:	3b03      	subs	r3, #3
   1d178:	68fa      	ldr	r2, [r7, #12]
   1d17a:	18d3      	adds	r3, r2, r3
   1d17c:	781b      	ldrb	r3, [r3, #0]
   1d17e:	0019      	movs	r1, r3
   1d180:	2308      	movs	r3, #8
   1d182:	18fb      	adds	r3, r7, r3
   1d184:	881b      	ldrh	r3, [r3, #0]
   1d186:	2207      	movs	r2, #7
   1d188:	4013      	ands	r3, r2
   1d18a:	2210      	movs	r2, #16
   1d18c:	1ad3      	subs	r3, r2, r3
   1d18e:	4099      	lsls	r1, r3
   1d190:	000b      	movs	r3, r1
   1d192:	697a      	ldr	r2, [r7, #20]
   1d194:	4313      	orrs	r3, r2
   1d196:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1d198:	1dfb      	adds	r3, r7, #7
   1d19a:	781b      	ldrb	r3, [r3, #0]
   1d19c:	2201      	movs	r2, #1
   1d19e:	409a      	lsls	r2, r3
   1d1a0:	0013      	movs	r3, r2
   1d1a2:	1e5a      	subs	r2, r3, #1
   1d1a4:	697b      	ldr	r3, [r7, #20]
   1d1a6:	4013      	ands	r3, r2
   1d1a8:	617b      	str	r3, [r7, #20]
	return value;
   1d1aa:	697b      	ldr	r3, [r7, #20]
}
   1d1ac:	0018      	movs	r0, r3
   1d1ae:	46bd      	mov	sp, r7
   1d1b0:	b007      	add	sp, #28
   1d1b2:	bd90      	pop	{r4, r7, pc}

0001d1b4 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1d1b4:	b580      	push	{r7, lr}
   1d1b6:	b082      	sub	sp, #8
   1d1b8:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1d1ba:	4b23      	ldr	r3, [pc, #140]	; (1d248 <mmc_spi_op_cond+0x94>)
   1d1bc:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1d1be:	4b23      	ldr	r3, [pc, #140]	; (1d24c <mmc_spi_op_cond+0x98>)
   1d1c0:	2100      	movs	r1, #0
   1d1c2:	0018      	movs	r0, r3
   1d1c4:	4b22      	ldr	r3, [pc, #136]	; (1d250 <mmc_spi_op_cond+0x9c>)
   1d1c6:	4798      	blx	r3
   1d1c8:	0003      	movs	r3, r0
   1d1ca:	001a      	movs	r2, r3
   1d1cc:	2301      	movs	r3, #1
   1d1ce:	4053      	eors	r3, r2
   1d1d0:	b2db      	uxtb	r3, r3
   1d1d2:	2b00      	cmp	r3, #0
   1d1d4:	d001      	beq.n	1d1da <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1d1d6:	2300      	movs	r3, #0
   1d1d8:	e031      	b.n	1d23e <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1d1da:	4b1e      	ldr	r3, [pc, #120]	; (1d254 <mmc_spi_op_cond+0xa0>)
   1d1dc:	4798      	blx	r3
   1d1de:	0003      	movs	r3, r0
   1d1e0:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1d1e2:	683b      	ldr	r3, [r7, #0]
   1d1e4:	2201      	movs	r2, #1
   1d1e6:	4013      	ands	r3, r2
   1d1e8:	d006      	beq.n	1d1f8 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1d1ea:	687b      	ldr	r3, [r7, #4]
   1d1ec:	1e5a      	subs	r2, r3, #1
   1d1ee:	607a      	str	r2, [r7, #4]
   1d1f0:	2b00      	cmp	r3, #0
   1d1f2:	d1e4      	bne.n	1d1be <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1d1f4:	2300      	movs	r3, #0
   1d1f6:	e022      	b.n	1d23e <mmc_spi_op_cond+0x8a>
			break;
   1d1f8:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1d1fa:	4b17      	ldr	r3, [pc, #92]	; (1d258 <mmc_spi_op_cond+0xa4>)
   1d1fc:	2100      	movs	r1, #0
   1d1fe:	0018      	movs	r0, r3
   1d200:	4b13      	ldr	r3, [pc, #76]	; (1d250 <mmc_spi_op_cond+0x9c>)
   1d202:	4798      	blx	r3
   1d204:	0003      	movs	r3, r0
   1d206:	001a      	movs	r2, r3
   1d208:	2301      	movs	r3, #1
   1d20a:	4053      	eors	r3, r2
   1d20c:	b2db      	uxtb	r3, r3
   1d20e:	2b00      	cmp	r3, #0
   1d210:	d001      	beq.n	1d216 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1d212:	2300      	movs	r3, #0
   1d214:	e013      	b.n	1d23e <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1d216:	4b0f      	ldr	r3, [pc, #60]	; (1d254 <mmc_spi_op_cond+0xa0>)
   1d218:	4798      	blx	r3
   1d21a:	0002      	movs	r2, r0
   1d21c:	23c0      	movs	r3, #192	; 0xc0
   1d21e:	05db      	lsls	r3, r3, #23
   1d220:	401a      	ands	r2, r3
   1d222:	2380      	movs	r3, #128	; 0x80
   1d224:	05db      	lsls	r3, r3, #23
   1d226:	429a      	cmp	r2, r3
   1d228:	d108      	bne.n	1d23c <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1d22a:	4b0c      	ldr	r3, [pc, #48]	; (1d25c <mmc_spi_op_cond+0xa8>)
   1d22c:	681a      	ldr	r2, [r3, #0]
   1d22e:	4b0b      	ldr	r3, [pc, #44]	; (1d25c <mmc_spi_op_cond+0xa8>)
   1d230:	681b      	ldr	r3, [r3, #0]
   1d232:	7adb      	ldrb	r3, [r3, #11]
   1d234:	2108      	movs	r1, #8
   1d236:	430b      	orrs	r3, r1
   1d238:	b2db      	uxtb	r3, r3
   1d23a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1d23c:	2301      	movs	r3, #1
}
   1d23e:	0018      	movs	r0, r3
   1d240:	46bd      	mov	sp, r7
   1d242:	b002      	add	sp, #8
   1d244:	bd80      	pop	{r7, pc}
   1d246:	46c0      	nop			; (mov r8, r8)
   1d248:	00001bee 	.word	0x00001bee
   1d24c:	00001101 	.word	0x00001101
   1d250:	0001ec31 	.word	0x0001ec31
   1d254:	0001ee71 	.word	0x0001ee71
   1d258:	0000053a 	.word	0x0000053a
   1d25c:	20004210 	.word	0x20004210

0001d260 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1d260:	b580      	push	{r7, lr}
   1d262:	b086      	sub	sp, #24
   1d264:	af00      	add	r7, sp, #0
   1d266:	0002      	movs	r2, r0
   1d268:	1dfb      	adds	r3, r7, #7
   1d26a:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1d26c:	4b2e      	ldr	r3, [pc, #184]	; (1d328 <sd_spi_op_cond+0xc8>)
   1d26e:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1d270:	4b2e      	ldr	r3, [pc, #184]	; (1d32c <sd_spi_op_cond+0xcc>)
   1d272:	2100      	movs	r1, #0
   1d274:	0018      	movs	r0, r3
   1d276:	4b2e      	ldr	r3, [pc, #184]	; (1d330 <sd_spi_op_cond+0xd0>)
   1d278:	4798      	blx	r3
   1d27a:	0003      	movs	r3, r0
   1d27c:	001a      	movs	r2, r3
   1d27e:	2301      	movs	r3, #1
   1d280:	4053      	eors	r3, r2
   1d282:	b2db      	uxtb	r3, r3
   1d284:	2b00      	cmp	r3, #0
   1d286:	d001      	beq.n	1d28c <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1d288:	2300      	movs	r3, #0
   1d28a:	e048      	b.n	1d31e <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1d28c:	2300      	movs	r3, #0
   1d28e:	617b      	str	r3, [r7, #20]
		if (v2) {
   1d290:	1dfb      	adds	r3, r7, #7
   1d292:	781b      	ldrb	r3, [r3, #0]
   1d294:	2b00      	cmp	r3, #0
   1d296:	d004      	beq.n	1d2a2 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1d298:	697b      	ldr	r3, [r7, #20]
   1d29a:	2280      	movs	r2, #128	; 0x80
   1d29c:	05d2      	lsls	r2, r2, #23
   1d29e:	4313      	orrs	r3, r2
   1d2a0:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1d2a2:	697b      	ldr	r3, [r7, #20]
   1d2a4:	4a23      	ldr	r2, [pc, #140]	; (1d334 <sd_spi_op_cond+0xd4>)
   1d2a6:	0019      	movs	r1, r3
   1d2a8:	0010      	movs	r0, r2
   1d2aa:	4b21      	ldr	r3, [pc, #132]	; (1d330 <sd_spi_op_cond+0xd0>)
   1d2ac:	4798      	blx	r3
   1d2ae:	0003      	movs	r3, r0
   1d2b0:	001a      	movs	r2, r3
   1d2b2:	2301      	movs	r3, #1
   1d2b4:	4053      	eors	r3, r2
   1d2b6:	b2db      	uxtb	r3, r3
   1d2b8:	2b00      	cmp	r3, #0
   1d2ba:	d001      	beq.n	1d2c0 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1d2bc:	2300      	movs	r3, #0
   1d2be:	e02e      	b.n	1d31e <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1d2c0:	4b1d      	ldr	r3, [pc, #116]	; (1d338 <sd_spi_op_cond+0xd8>)
   1d2c2:	4798      	blx	r3
   1d2c4:	0003      	movs	r3, r0
   1d2c6:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1d2c8:	68fb      	ldr	r3, [r7, #12]
   1d2ca:	2201      	movs	r2, #1
   1d2cc:	4013      	ands	r3, r2
   1d2ce:	d006      	beq.n	1d2de <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1d2d0:	693b      	ldr	r3, [r7, #16]
   1d2d2:	1e5a      	subs	r2, r3, #1
   1d2d4:	613a      	str	r2, [r7, #16]
   1d2d6:	2b00      	cmp	r3, #0
   1d2d8:	d1ca      	bne.n	1d270 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1d2da:	2300      	movs	r3, #0
   1d2dc:	e01f      	b.n	1d31e <sd_spi_op_cond+0xbe>
			break;
   1d2de:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1d2e0:	4b16      	ldr	r3, [pc, #88]	; (1d33c <sd_spi_op_cond+0xdc>)
   1d2e2:	2100      	movs	r1, #0
   1d2e4:	0018      	movs	r0, r3
   1d2e6:	4b12      	ldr	r3, [pc, #72]	; (1d330 <sd_spi_op_cond+0xd0>)
   1d2e8:	4798      	blx	r3
   1d2ea:	0003      	movs	r3, r0
   1d2ec:	001a      	movs	r2, r3
   1d2ee:	2301      	movs	r3, #1
   1d2f0:	4053      	eors	r3, r2
   1d2f2:	b2db      	uxtb	r3, r3
   1d2f4:	2b00      	cmp	r3, #0
   1d2f6:	d001      	beq.n	1d2fc <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1d2f8:	2300      	movs	r3, #0
   1d2fa:	e010      	b.n	1d31e <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1d2fc:	4b0e      	ldr	r3, [pc, #56]	; (1d338 <sd_spi_op_cond+0xd8>)
   1d2fe:	4798      	blx	r3
   1d300:	0002      	movs	r2, r0
   1d302:	2380      	movs	r3, #128	; 0x80
   1d304:	05db      	lsls	r3, r3, #23
   1d306:	4013      	ands	r3, r2
   1d308:	d008      	beq.n	1d31c <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1d30a:	4b0d      	ldr	r3, [pc, #52]	; (1d340 <sd_spi_op_cond+0xe0>)
   1d30c:	681a      	ldr	r2, [r3, #0]
   1d30e:	4b0c      	ldr	r3, [pc, #48]	; (1d340 <sd_spi_op_cond+0xe0>)
   1d310:	681b      	ldr	r3, [r3, #0]
   1d312:	7adb      	ldrb	r3, [r3, #11]
   1d314:	2108      	movs	r1, #8
   1d316:	430b      	orrs	r3, r1
   1d318:	b2db      	uxtb	r3, r3
   1d31a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1d31c:	2301      	movs	r3, #1
}
   1d31e:	0018      	movs	r0, r3
   1d320:	46bd      	mov	sp, r7
   1d322:	b006      	add	sp, #24
   1d324:	bd80      	pop	{r7, pc}
   1d326:	46c0      	nop			; (mov r8, r8)
   1d328:	00001bee 	.word	0x00001bee
   1d32c:	00001137 	.word	0x00001137
   1d330:	0001ec31 	.word	0x0001ec31
   1d334:	00001129 	.word	0x00001129
   1d338:	0001ee71 	.word	0x0001ee71
   1d33c:	0000053a 	.word	0x0000053a
   1d340:	20004210 	.word	0x20004210

0001d344 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1d344:	b580      	push	{r7, lr}
   1d346:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1d348:	2301      	movs	r3, #1
}
   1d34a:	0018      	movs	r0, r3
   1d34c:	46bd      	mov	sp, r7
   1d34e:	bd80      	pop	{r7, pc}

0001d350 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1d350:	b580      	push	{r7, lr}
   1d352:	b084      	sub	sp, #16
   1d354:	af00      	add	r7, sp, #0
   1d356:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1d358:	687b      	ldr	r3, [r7, #4]
   1d35a:	2200      	movs	r2, #0
   1d35c:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1d35e:	23d5      	movs	r3, #213	; 0xd5
   1d360:	005b      	lsls	r3, r3, #1
   1d362:	4a14      	ldr	r2, [pc, #80]	; (1d3b4 <sd_cmd8+0x64>)
   1d364:	0019      	movs	r1, r3
   1d366:	0010      	movs	r0, r2
   1d368:	4b13      	ldr	r3, [pc, #76]	; (1d3b8 <sd_cmd8+0x68>)
   1d36a:	4798      	blx	r3
   1d36c:	0003      	movs	r3, r0
   1d36e:	001a      	movs	r2, r3
   1d370:	2301      	movs	r3, #1
   1d372:	4053      	eors	r3, r2
   1d374:	b2db      	uxtb	r3, r3
   1d376:	2b00      	cmp	r3, #0
   1d378:	d001      	beq.n	1d37e <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1d37a:	2301      	movs	r3, #1
   1d37c:	e015      	b.n	1d3aa <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1d37e:	4b0f      	ldr	r3, [pc, #60]	; (1d3bc <sd_cmd8+0x6c>)
   1d380:	4798      	blx	r3
   1d382:	0003      	movs	r3, r0
   1d384:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1d386:	68fb      	ldr	r3, [r7, #12]
   1d388:	3301      	adds	r3, #1
   1d38a:	d101      	bne.n	1d390 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1d38c:	2301      	movs	r3, #1
   1d38e:	e00c      	b.n	1d3aa <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1d390:	68fb      	ldr	r3, [r7, #12]
   1d392:	051b      	lsls	r3, r3, #20
   1d394:	0d1a      	lsrs	r2, r3, #20
   1d396:	23d5      	movs	r3, #213	; 0xd5
   1d398:	005b      	lsls	r3, r3, #1
   1d39a:	429a      	cmp	r2, r3
   1d39c:	d001      	beq.n	1d3a2 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1d39e:	2300      	movs	r3, #0
   1d3a0:	e003      	b.n	1d3aa <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1d3a2:	687b      	ldr	r3, [r7, #4]
   1d3a4:	2201      	movs	r2, #1
   1d3a6:	701a      	strb	r2, [r3, #0]
	return true;
   1d3a8:	2301      	movs	r3, #1
}
   1d3aa:	0018      	movs	r0, r3
   1d3ac:	46bd      	mov	sp, r7
   1d3ae:	b004      	add	sp, #16
   1d3b0:	bd80      	pop	{r7, pc}
   1d3b2:	46c0      	nop			; (mov r8, r8)
   1d3b4:	00005508 	.word	0x00005508
   1d3b8:	0001ec31 	.word	0x0001ec31
   1d3bc:	0001ee71 	.word	0x0001ee71

0001d3c0 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1d3c0:	b590      	push	{r4, r7, lr}
   1d3c2:	b089      	sub	sp, #36	; 0x24
   1d3c4:	af02      	add	r7, sp, #8
   1d3c6:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1d3c8:	2380      	movs	r3, #128	; 0x80
   1d3ca:	009a      	lsls	r2, r3, #2
   1d3cc:	4841      	ldr	r0, [pc, #260]	; (1d4d4 <mmc_cmd8+0x114>)
   1d3ce:	2300      	movs	r3, #0
   1d3d0:	9300      	str	r3, [sp, #0]
   1d3d2:	2301      	movs	r3, #1
   1d3d4:	2100      	movs	r1, #0
   1d3d6:	4c40      	ldr	r4, [pc, #256]	; (1d4d8 <mmc_cmd8+0x118>)
   1d3d8:	47a0      	blx	r4
   1d3da:	0003      	movs	r3, r0
   1d3dc:	001a      	movs	r2, r3
   1d3de:	2301      	movs	r3, #1
   1d3e0:	4053      	eors	r3, r2
   1d3e2:	b2db      	uxtb	r3, r3
   1d3e4:	2b00      	cmp	r3, #0
   1d3e6:	d001      	beq.n	1d3ec <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1d3e8:	2300      	movs	r3, #0
   1d3ea:	e06e      	b.n	1d4ca <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1d3ec:	2316      	movs	r3, #22
   1d3ee:	18fb      	adds	r3, r7, r3
   1d3f0:	2200      	movs	r2, #0
   1d3f2:	801a      	strh	r2, [r3, #0]
   1d3f4:	e014      	b.n	1d420 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1d3f6:	2310      	movs	r3, #16
   1d3f8:	18fb      	adds	r3, r7, r3
   1d3fa:	0018      	movs	r0, r3
   1d3fc:	4b37      	ldr	r3, [pc, #220]	; (1d4dc <mmc_cmd8+0x11c>)
   1d3fe:	4798      	blx	r3
   1d400:	0003      	movs	r3, r0
   1d402:	001a      	movs	r2, r3
   1d404:	2301      	movs	r3, #1
   1d406:	4053      	eors	r3, r2
   1d408:	b2db      	uxtb	r3, r3
   1d40a:	2b00      	cmp	r3, #0
   1d40c:	d001      	beq.n	1d412 <mmc_cmd8+0x52>
			return false;
   1d40e:	2300      	movs	r3, #0
   1d410:	e05b      	b.n	1d4ca <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1d412:	2316      	movs	r3, #22
   1d414:	18fb      	adds	r3, r7, r3
   1d416:	881a      	ldrh	r2, [r3, #0]
   1d418:	2316      	movs	r3, #22
   1d41a:	18fb      	adds	r3, r7, r3
   1d41c:	3201      	adds	r2, #1
   1d41e:	801a      	strh	r2, [r3, #0]
   1d420:	2316      	movs	r3, #22
   1d422:	18fb      	adds	r3, r7, r3
   1d424:	881b      	ldrh	r3, [r3, #0]
   1d426:	2b31      	cmp	r3, #49	; 0x31
   1d428:	d9e5      	bls.n	1d3f6 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1d42a:	693b      	ldr	r3, [r7, #16]
   1d42c:	b2db      	uxtb	r3, r3
   1d42e:	2202      	movs	r2, #2
   1d430:	4013      	ands	r3, r2
   1d432:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1d434:	687b      	ldr	r3, [r7, #4]
   1d436:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1d438:	4b29      	ldr	r3, [pc, #164]	; (1d4e0 <mmc_cmd8+0x120>)
   1d43a:	681b      	ldr	r3, [r3, #0]
   1d43c:	330e      	adds	r3, #14
   1d43e:	0018      	movs	r0, r3
   1d440:	230c      	movs	r3, #12
   1d442:	223e      	movs	r2, #62	; 0x3e
   1d444:	2180      	movs	r1, #128	; 0x80
   1d446:	4c27      	ldr	r4, [pc, #156]	; (1d4e4 <mmc_cmd8+0x124>)
   1d448:	47a0      	blx	r4
   1d44a:	0002      	movs	r2, r0
   1d44c:	4b26      	ldr	r3, [pc, #152]	; (1d4e8 <mmc_cmd8+0x128>)
   1d44e:	429a      	cmp	r2, r3
   1d450:	d135      	bne.n	1d4be <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1d452:	e014      	b.n	1d47e <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1d454:	230c      	movs	r3, #12
   1d456:	18fb      	adds	r3, r7, r3
   1d458:	0018      	movs	r0, r3
   1d45a:	4b20      	ldr	r3, [pc, #128]	; (1d4dc <mmc_cmd8+0x11c>)
   1d45c:	4798      	blx	r3
   1d45e:	0003      	movs	r3, r0
   1d460:	001a      	movs	r2, r3
   1d462:	2301      	movs	r3, #1
   1d464:	4053      	eors	r3, r2
   1d466:	b2db      	uxtb	r3, r3
   1d468:	2b00      	cmp	r3, #0
   1d46a:	d001      	beq.n	1d470 <mmc_cmd8+0xb0>
				return false;
   1d46c:	2300      	movs	r3, #0
   1d46e:	e02c      	b.n	1d4ca <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1d470:	2316      	movs	r3, #22
   1d472:	18fb      	adds	r3, r7, r3
   1d474:	881a      	ldrh	r2, [r3, #0]
   1d476:	2316      	movs	r3, #22
   1d478:	18fb      	adds	r3, r7, r3
   1d47a:	3201      	adds	r2, #1
   1d47c:	801a      	strh	r2, [r3, #0]
   1d47e:	2316      	movs	r3, #22
   1d480:	18fb      	adds	r3, r7, r3
   1d482:	881b      	ldrh	r3, [r3, #0]
   1d484:	2b35      	cmp	r3, #53	; 0x35
   1d486:	d9e5      	bls.n	1d454 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1d488:	4b15      	ldr	r3, [pc, #84]	; (1d4e0 <mmc_cmd8+0x120>)
   1d48a:	681b      	ldr	r3, [r3, #0]
   1d48c:	68fa      	ldr	r2, [r7, #12]
   1d48e:	0852      	lsrs	r2, r2, #1
   1d490:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1d492:	e014      	b.n	1d4be <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1d494:	230c      	movs	r3, #12
   1d496:	18fb      	adds	r3, r7, r3
   1d498:	0018      	movs	r0, r3
   1d49a:	4b10      	ldr	r3, [pc, #64]	; (1d4dc <mmc_cmd8+0x11c>)
   1d49c:	4798      	blx	r3
   1d49e:	0003      	movs	r3, r0
   1d4a0:	001a      	movs	r2, r3
   1d4a2:	2301      	movs	r3, #1
   1d4a4:	4053      	eors	r3, r2
   1d4a6:	b2db      	uxtb	r3, r3
   1d4a8:	2b00      	cmp	r3, #0
   1d4aa:	d001      	beq.n	1d4b0 <mmc_cmd8+0xf0>
			return false;
   1d4ac:	2300      	movs	r3, #0
   1d4ae:	e00c      	b.n	1d4ca <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1d4b0:	2316      	movs	r3, #22
   1d4b2:	18fb      	adds	r3, r7, r3
   1d4b4:	881a      	ldrh	r2, [r3, #0]
   1d4b6:	2316      	movs	r3, #22
   1d4b8:	18fb      	adds	r3, r7, r3
   1d4ba:	3201      	adds	r2, #1
   1d4bc:	801a      	strh	r2, [r3, #0]
   1d4be:	2316      	movs	r3, #22
   1d4c0:	18fb      	adds	r3, r7, r3
   1d4c2:	881b      	ldrh	r3, [r3, #0]
   1d4c4:	2b7f      	cmp	r3, #127	; 0x7f
   1d4c6:	d9e5      	bls.n	1d494 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1d4c8:	2301      	movs	r3, #1
}
   1d4ca:	0018      	movs	r0, r3
   1d4cc:	46bd      	mov	sp, r7
   1d4ce:	b007      	add	sp, #28
   1d4d0:	bd90      	pop	{r4, r7, pc}
   1d4d2:	46c0      	nop			; (mov r8, r8)
   1d4d4:	00081108 	.word	0x00081108
   1d4d8:	0001ec59 	.word	0x0001ec59
   1d4dc:	0001ee85 	.word	0x0001ee85
   1d4e0:	20004210 	.word	0x20004210
   1d4e4:	0001d059 	.word	0x0001d059
   1d4e8:	00000fff 	.word	0x00000fff

0001d4ec <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1d4ec:	b590      	push	{r4, r7, lr}
   1d4ee:	b083      	sub	sp, #12
   1d4f0:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1d4f2:	4b15      	ldr	r3, [pc, #84]	; (1d548 <sd_mmc_cmd9_spi+0x5c>)
   1d4f4:	681b      	ldr	r3, [r3, #0]
   1d4f6:	891b      	ldrh	r3, [r3, #8]
   1d4f8:	0419      	lsls	r1, r3, #16
   1d4fa:	4814      	ldr	r0, [pc, #80]	; (1d54c <sd_mmc_cmd9_spi+0x60>)
   1d4fc:	2301      	movs	r3, #1
   1d4fe:	9300      	str	r3, [sp, #0]
   1d500:	2301      	movs	r3, #1
   1d502:	2210      	movs	r2, #16
   1d504:	4c12      	ldr	r4, [pc, #72]	; (1d550 <sd_mmc_cmd9_spi+0x64>)
   1d506:	47a0      	blx	r4
   1d508:	0003      	movs	r3, r0
   1d50a:	001a      	movs	r2, r3
   1d50c:	2301      	movs	r3, #1
   1d50e:	4053      	eors	r3, r2
   1d510:	b2db      	uxtb	r3, r3
   1d512:	2b00      	cmp	r3, #0
   1d514:	d001      	beq.n	1d51a <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1d516:	2300      	movs	r3, #0
   1d518:	e012      	b.n	1d540 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1d51a:	4b0b      	ldr	r3, [pc, #44]	; (1d548 <sd_mmc_cmd9_spi+0x5c>)
   1d51c:	681b      	ldr	r3, [r3, #0]
   1d51e:	330e      	adds	r3, #14
   1d520:	2101      	movs	r1, #1
   1d522:	0018      	movs	r0, r3
   1d524:	4b0b      	ldr	r3, [pc, #44]	; (1d554 <sd_mmc_cmd9_spi+0x68>)
   1d526:	4798      	blx	r3
   1d528:	0003      	movs	r3, r0
   1d52a:	001a      	movs	r2, r3
   1d52c:	2301      	movs	r3, #1
   1d52e:	4053      	eors	r3, r2
   1d530:	b2db      	uxtb	r3, r3
   1d532:	2b00      	cmp	r3, #0
   1d534:	d001      	beq.n	1d53a <sd_mmc_cmd9_spi+0x4e>
		return false;
   1d536:	2300      	movs	r3, #0
   1d538:	e002      	b.n	1d540 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1d53a:	4b07      	ldr	r3, [pc, #28]	; (1d558 <sd_mmc_cmd9_spi+0x6c>)
   1d53c:	4798      	blx	r3
   1d53e:	0003      	movs	r3, r0
}
   1d540:	0018      	movs	r0, r3
   1d542:	46bd      	mov	sp, r7
   1d544:	b001      	add	sp, #4
   1d546:	bd90      	pop	{r4, r7, pc}
   1d548:	20004210 	.word	0x20004210
   1d54c:	00081109 	.word	0x00081109
   1d550:	0001ec59 	.word	0x0001ec59
   1d554:	0001ef29 	.word	0x0001ef29
   1d558:	0001efcd 	.word	0x0001efcd

0001d55c <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1d55c:	b5b0      	push	{r4, r5, r7, lr}
   1d55e:	b084      	sub	sp, #16
   1d560:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1d562:	4b45      	ldr	r3, [pc, #276]	; (1d678 <mmc_decode_csd+0x11c>)
   1d564:	681b      	ldr	r3, [r3, #0]
   1d566:	330e      	adds	r3, #14
   1d568:	0018      	movs	r0, r3
   1d56a:	2304      	movs	r3, #4
   1d56c:	227a      	movs	r2, #122	; 0x7a
   1d56e:	2180      	movs	r1, #128	; 0x80
   1d570:	4c42      	ldr	r4, [pc, #264]	; (1d67c <mmc_decode_csd+0x120>)
   1d572:	47a0      	blx	r4
   1d574:	0003      	movs	r3, r0
   1d576:	2b02      	cmp	r3, #2
   1d578:	d011      	beq.n	1d59e <mmc_decode_csd+0x42>
   1d57a:	d802      	bhi.n	1d582 <mmc_decode_csd+0x26>
   1d57c:	2b01      	cmp	r3, #1
   1d57e:	d009      	beq.n	1d594 <mmc_decode_csd+0x38>
   1d580:	e003      	b.n	1d58a <mmc_decode_csd+0x2e>
   1d582:	2b03      	cmp	r3, #3
   1d584:	d010      	beq.n	1d5a8 <mmc_decode_csd+0x4c>
   1d586:	2b04      	cmp	r3, #4
   1d588:	d013      	beq.n	1d5b2 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1d58a:	4b3b      	ldr	r3, [pc, #236]	; (1d678 <mmc_decode_csd+0x11c>)
   1d58c:	681b      	ldr	r3, [r3, #0]
   1d58e:	2212      	movs	r2, #18
   1d590:	731a      	strb	r2, [r3, #12]
		break;
   1d592:	e013      	b.n	1d5bc <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1d594:	4b38      	ldr	r3, [pc, #224]	; (1d678 <mmc_decode_csd+0x11c>)
   1d596:	681b      	ldr	r3, [r3, #0]
   1d598:	2214      	movs	r2, #20
   1d59a:	731a      	strb	r2, [r3, #12]
		break;
   1d59c:	e00e      	b.n	1d5bc <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1d59e:	4b36      	ldr	r3, [pc, #216]	; (1d678 <mmc_decode_csd+0x11c>)
   1d5a0:	681b      	ldr	r3, [r3, #0]
   1d5a2:	2222      	movs	r2, #34	; 0x22
   1d5a4:	731a      	strb	r2, [r3, #12]
		break;
   1d5a6:	e009      	b.n	1d5bc <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1d5a8:	4b33      	ldr	r3, [pc, #204]	; (1d678 <mmc_decode_csd+0x11c>)
   1d5aa:	681b      	ldr	r3, [r3, #0]
   1d5ac:	2230      	movs	r2, #48	; 0x30
   1d5ae:	731a      	strb	r2, [r3, #12]
		break;
   1d5b0:	e004      	b.n	1d5bc <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1d5b2:	4b31      	ldr	r3, [pc, #196]	; (1d678 <mmc_decode_csd+0x11c>)
   1d5b4:	681b      	ldr	r3, [r3, #0]
   1d5b6:	2240      	movs	r2, #64	; 0x40
   1d5b8:	731a      	strb	r2, [r3, #12]
		break;
   1d5ba:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1d5bc:	4b2e      	ldr	r3, [pc, #184]	; (1d678 <mmc_decode_csd+0x11c>)
   1d5be:	681b      	ldr	r3, [r3, #0]
   1d5c0:	330e      	adds	r3, #14
   1d5c2:	0018      	movs	r0, r3
   1d5c4:	2308      	movs	r3, #8
   1d5c6:	2260      	movs	r2, #96	; 0x60
   1d5c8:	2180      	movs	r1, #128	; 0x80
   1d5ca:	4c2c      	ldr	r4, [pc, #176]	; (1d67c <mmc_decode_csd+0x120>)
   1d5cc:	47a0      	blx	r4
   1d5ce:	0003      	movs	r3, r0
   1d5d0:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1d5d2:	68fb      	ldr	r3, [r7, #12]
   1d5d4:	2207      	movs	r2, #7
   1d5d6:	401a      	ands	r2, r3
   1d5d8:	4b29      	ldr	r3, [pc, #164]	; (1d680 <mmc_decode_csd+0x124>)
   1d5da:	0092      	lsls	r2, r2, #2
   1d5dc:	58d3      	ldr	r3, [r2, r3]
   1d5de:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1d5e0:	68fb      	ldr	r3, [r7, #12]
   1d5e2:	08db      	lsrs	r3, r3, #3
   1d5e4:	220f      	movs	r2, #15
   1d5e6:	401a      	ands	r2, r3
   1d5e8:	4b26      	ldr	r3, [pc, #152]	; (1d684 <mmc_decode_csd+0x128>)
   1d5ea:	0092      	lsls	r2, r2, #2
   1d5ec:	58d3      	ldr	r3, [r2, r3]
   1d5ee:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1d5f0:	4b21      	ldr	r3, [pc, #132]	; (1d678 <mmc_decode_csd+0x11c>)
   1d5f2:	681b      	ldr	r3, [r3, #0]
   1d5f4:	68ba      	ldr	r2, [r7, #8]
   1d5f6:	6879      	ldr	r1, [r7, #4]
   1d5f8:	434a      	muls	r2, r1
   1d5fa:	21fa      	movs	r1, #250	; 0xfa
   1d5fc:	0089      	lsls	r1, r1, #2
   1d5fe:	434a      	muls	r2, r1
   1d600:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1d602:	4b1d      	ldr	r3, [pc, #116]	; (1d678 <mmc_decode_csd+0x11c>)
   1d604:	681b      	ldr	r3, [r3, #0]
   1d606:	330e      	adds	r3, #14
   1d608:	0018      	movs	r0, r3
   1d60a:	230c      	movs	r3, #12
   1d60c:	223e      	movs	r2, #62	; 0x3e
   1d60e:	2180      	movs	r1, #128	; 0x80
   1d610:	4c1a      	ldr	r4, [pc, #104]	; (1d67c <mmc_decode_csd+0x120>)
   1d612:	47a0      	blx	r4
   1d614:	0002      	movs	r2, r0
   1d616:	4b1c      	ldr	r3, [pc, #112]	; (1d688 <mmc_decode_csd+0x12c>)
   1d618:	429a      	cmp	r2, r3
   1d61a:	d028      	beq.n	1d66e <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1d61c:	4b16      	ldr	r3, [pc, #88]	; (1d678 <mmc_decode_csd+0x11c>)
   1d61e:	681b      	ldr	r3, [r3, #0]
   1d620:	330e      	adds	r3, #14
   1d622:	0018      	movs	r0, r3
   1d624:	230c      	movs	r3, #12
   1d626:	223e      	movs	r2, #62	; 0x3e
   1d628:	2180      	movs	r1, #128	; 0x80
   1d62a:	4c14      	ldr	r4, [pc, #80]	; (1d67c <mmc_decode_csd+0x120>)
   1d62c:	47a0      	blx	r4
   1d62e:	0003      	movs	r3, r0
   1d630:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1d632:	4b11      	ldr	r3, [pc, #68]	; (1d678 <mmc_decode_csd+0x11c>)
   1d634:	681b      	ldr	r3, [r3, #0]
   1d636:	330e      	adds	r3, #14
   1d638:	0018      	movs	r0, r3
   1d63a:	2303      	movs	r3, #3
   1d63c:	222f      	movs	r2, #47	; 0x2f
   1d63e:	2180      	movs	r1, #128	; 0x80
   1d640:	4d0e      	ldr	r5, [pc, #56]	; (1d67c <mmc_decode_csd+0x120>)
   1d642:	47a8      	blx	r5
   1d644:	0003      	movs	r3, r0
   1d646:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1d648:	409c      	lsls	r4, r3
   1d64a:	0023      	movs	r3, r4
   1d64c:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1d64e:	4b0a      	ldr	r3, [pc, #40]	; (1d678 <mmc_decode_csd+0x11c>)
   1d650:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1d652:	4b09      	ldr	r3, [pc, #36]	; (1d678 <mmc_decode_csd+0x11c>)
   1d654:	681b      	ldr	r3, [r3, #0]
   1d656:	330e      	adds	r3, #14
   1d658:	0018      	movs	r0, r3
   1d65a:	2304      	movs	r3, #4
   1d65c:	2250      	movs	r2, #80	; 0x50
   1d65e:	2180      	movs	r1, #128	; 0x80
   1d660:	4d06      	ldr	r5, [pc, #24]	; (1d67c <mmc_decode_csd+0x120>)
   1d662:	47a8      	blx	r5
   1d664:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1d666:	683b      	ldr	r3, [r7, #0]
   1d668:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1d66a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1d66c:	6063      	str	r3, [r4, #4]
	}
}
   1d66e:	46c0      	nop			; (mov r8, r8)
   1d670:	46bd      	mov	sp, r7
   1d672:	b004      	add	sp, #16
   1d674:	bdb0      	pop	{r4, r5, r7, pc}
   1d676:	46c0      	nop			; (mov r8, r8)
   1d678:	20004210 	.word	0x20004210
   1d67c:	0001d059 	.word	0x0001d059
   1d680:	00037cb8 	.word	0x00037cb8
   1d684:	00037d14 	.word	0x00037d14
   1d688:	00000fff 	.word	0x00000fff

0001d68c <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1d68c:	b5b0      	push	{r4, r5, r7, lr}
   1d68e:	b084      	sub	sp, #16
   1d690:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1d692:	4b35      	ldr	r3, [pc, #212]	; (1d768 <sd_decode_csd+0xdc>)
   1d694:	681b      	ldr	r3, [r3, #0]
   1d696:	330e      	adds	r3, #14
   1d698:	0018      	movs	r0, r3
   1d69a:	2308      	movs	r3, #8
   1d69c:	2260      	movs	r2, #96	; 0x60
   1d69e:	2180      	movs	r1, #128	; 0x80
   1d6a0:	4c32      	ldr	r4, [pc, #200]	; (1d76c <sd_decode_csd+0xe0>)
   1d6a2:	47a0      	blx	r4
   1d6a4:	0003      	movs	r3, r0
   1d6a6:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1d6a8:	68fb      	ldr	r3, [r7, #12]
   1d6aa:	2207      	movs	r2, #7
   1d6ac:	401a      	ands	r2, r3
   1d6ae:	4b30      	ldr	r3, [pc, #192]	; (1d770 <sd_decode_csd+0xe4>)
   1d6b0:	0092      	lsls	r2, r2, #2
   1d6b2:	58d3      	ldr	r3, [r2, r3]
   1d6b4:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1d6b6:	68fb      	ldr	r3, [r7, #12]
   1d6b8:	08db      	lsrs	r3, r3, #3
   1d6ba:	220f      	movs	r2, #15
   1d6bc:	401a      	ands	r2, r3
   1d6be:	4b2d      	ldr	r3, [pc, #180]	; (1d774 <sd_decode_csd+0xe8>)
   1d6c0:	0092      	lsls	r2, r2, #2
   1d6c2:	58d3      	ldr	r3, [r2, r3]
   1d6c4:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1d6c6:	4b28      	ldr	r3, [pc, #160]	; (1d768 <sd_decode_csd+0xdc>)
   1d6c8:	681b      	ldr	r3, [r3, #0]
   1d6ca:	68ba      	ldr	r2, [r7, #8]
   1d6cc:	6879      	ldr	r1, [r7, #4]
   1d6ce:	434a      	muls	r2, r1
   1d6d0:	21fa      	movs	r1, #250	; 0xfa
   1d6d2:	0089      	lsls	r1, r1, #2
   1d6d4:	434a      	muls	r2, r1
   1d6d6:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1d6d8:	4b23      	ldr	r3, [pc, #140]	; (1d768 <sd_decode_csd+0xdc>)
   1d6da:	681b      	ldr	r3, [r3, #0]
   1d6dc:	330e      	adds	r3, #14
   1d6de:	0018      	movs	r0, r3
   1d6e0:	2302      	movs	r3, #2
   1d6e2:	227e      	movs	r2, #126	; 0x7e
   1d6e4:	2180      	movs	r1, #128	; 0x80
   1d6e6:	4c21      	ldr	r4, [pc, #132]	; (1d76c <sd_decode_csd+0xe0>)
   1d6e8:	47a0      	blx	r4
   1d6ea:	1e03      	subs	r3, r0, #0
   1d6ec:	d00f      	beq.n	1d70e <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1d6ee:	4b1e      	ldr	r3, [pc, #120]	; (1d768 <sd_decode_csd+0xdc>)
   1d6f0:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1d6f2:	4b1d      	ldr	r3, [pc, #116]	; (1d768 <sd_decode_csd+0xdc>)
   1d6f4:	681b      	ldr	r3, [r3, #0]
   1d6f6:	330e      	adds	r3, #14
   1d6f8:	0018      	movs	r0, r3
   1d6fa:	2316      	movs	r3, #22
   1d6fc:	2230      	movs	r2, #48	; 0x30
   1d6fe:	2180      	movs	r1, #128	; 0x80
   1d700:	4d1a      	ldr	r5, [pc, #104]	; (1d76c <sd_decode_csd+0xe0>)
   1d702:	47a8      	blx	r5
   1d704:	0003      	movs	r3, r0
				* 512;
   1d706:	3301      	adds	r3, #1
   1d708:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1d70a:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1d70c:	e028      	b.n	1d760 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1d70e:	4b16      	ldr	r3, [pc, #88]	; (1d768 <sd_decode_csd+0xdc>)
   1d710:	681b      	ldr	r3, [r3, #0]
   1d712:	330e      	adds	r3, #14
   1d714:	0018      	movs	r0, r3
   1d716:	230c      	movs	r3, #12
   1d718:	223e      	movs	r2, #62	; 0x3e
   1d71a:	2180      	movs	r1, #128	; 0x80
   1d71c:	4c13      	ldr	r4, [pc, #76]	; (1d76c <sd_decode_csd+0xe0>)
   1d71e:	47a0      	blx	r4
   1d720:	0003      	movs	r3, r0
   1d722:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1d724:	4b10      	ldr	r3, [pc, #64]	; (1d768 <sd_decode_csd+0xdc>)
   1d726:	681b      	ldr	r3, [r3, #0]
   1d728:	330e      	adds	r3, #14
   1d72a:	0018      	movs	r0, r3
   1d72c:	2303      	movs	r3, #3
   1d72e:	222f      	movs	r2, #47	; 0x2f
   1d730:	2180      	movs	r1, #128	; 0x80
   1d732:	4d0e      	ldr	r5, [pc, #56]	; (1d76c <sd_decode_csd+0xe0>)
   1d734:	47a8      	blx	r5
   1d736:	0003      	movs	r3, r0
   1d738:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1d73a:	409c      	lsls	r4, r3
   1d73c:	0023      	movs	r3, r4
   1d73e:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1d740:	4b09      	ldr	r3, [pc, #36]	; (1d768 <sd_decode_csd+0xdc>)
   1d742:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1d744:	4b08      	ldr	r3, [pc, #32]	; (1d768 <sd_decode_csd+0xdc>)
   1d746:	681b      	ldr	r3, [r3, #0]
   1d748:	330e      	adds	r3, #14
   1d74a:	0018      	movs	r0, r3
   1d74c:	2304      	movs	r3, #4
   1d74e:	2250      	movs	r2, #80	; 0x50
   1d750:	2180      	movs	r1, #128	; 0x80
   1d752:	4d06      	ldr	r5, [pc, #24]	; (1d76c <sd_decode_csd+0xe0>)
   1d754:	47a8      	blx	r5
   1d756:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1d758:	683b      	ldr	r3, [r7, #0]
   1d75a:	4093      	lsls	r3, r2
				/ 1024;
   1d75c:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1d75e:	6063      	str	r3, [r4, #4]
}
   1d760:	46c0      	nop			; (mov r8, r8)
   1d762:	46bd      	mov	sp, r7
   1d764:	b004      	add	sp, #16
   1d766:	bdb0      	pop	{r4, r5, r7, pc}
   1d768:	20004210 	.word	0x20004210
   1d76c:	0001d059 	.word	0x0001d059
   1d770:	00037cb8 	.word	0x00037cb8
   1d774:	00037cd4 	.word	0x00037cd4

0001d778 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1d778:	b580      	push	{r7, lr}
   1d77a:	b082      	sub	sp, #8
   1d77c:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1d77e:	4b11      	ldr	r3, [pc, #68]	; (1d7c4 <sd_mmc_cmd13+0x4c>)
   1d780:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1d782:	4b11      	ldr	r3, [pc, #68]	; (1d7c8 <sd_mmc_cmd13+0x50>)
   1d784:	2100      	movs	r1, #0
   1d786:	0018      	movs	r0, r3
   1d788:	4b10      	ldr	r3, [pc, #64]	; (1d7cc <sd_mmc_cmd13+0x54>)
   1d78a:	4798      	blx	r3
   1d78c:	0003      	movs	r3, r0
   1d78e:	001a      	movs	r2, r3
   1d790:	2301      	movs	r3, #1
   1d792:	4053      	eors	r3, r2
   1d794:	b2db      	uxtb	r3, r3
   1d796:	2b00      	cmp	r3, #0
   1d798:	d001      	beq.n	1d79e <sd_mmc_cmd13+0x26>
				return false;
   1d79a:	2300      	movs	r3, #0
   1d79c:	e00e      	b.n	1d7bc <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1d79e:	4b0c      	ldr	r3, [pc, #48]	; (1d7d0 <sd_mmc_cmd13+0x58>)
   1d7a0:	4798      	blx	r3
   1d7a2:	0002      	movs	r2, r0
   1d7a4:	23ff      	movs	r3, #255	; 0xff
   1d7a6:	4013      	ands	r3, r2
   1d7a8:	d006      	beq.n	1d7b8 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1d7aa:	687b      	ldr	r3, [r7, #4]
   1d7ac:	1e5a      	subs	r2, r3, #1
   1d7ae:	607a      	str	r2, [r7, #4]
   1d7b0:	2b00      	cmp	r3, #0
   1d7b2:	d1e6      	bne.n	1d782 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1d7b4:	2300      	movs	r3, #0
   1d7b6:	e001      	b.n	1d7bc <sd_mmc_cmd13+0x44>
				break;
   1d7b8:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1d7ba:	2301      	movs	r3, #1
}
   1d7bc:	0018      	movs	r0, r3
   1d7be:	46bd      	mov	sp, r7
   1d7c0:	b002      	add	sp, #8
   1d7c2:	bd80      	pop	{r7, pc}
   1d7c4:	00030d40 	.word	0x00030d40
   1d7c8:	00001b0d 	.word	0x00001b0d
   1d7cc:	0001ec31 	.word	0x0001ec31
   1d7d0:	0001ee71 	.word	0x0001ee71

0001d7d4 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1d7d4:	b590      	push	{r4, r7, lr}
   1d7d6:	b085      	sub	sp, #20
   1d7d8:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1d7da:	4b38      	ldr	r3, [pc, #224]	; (1d8bc <sd_acmd51+0xe8>)
   1d7dc:	681b      	ldr	r3, [r3, #0]
   1d7de:	891b      	ldrh	r3, [r3, #8]
   1d7e0:	041b      	lsls	r3, r3, #16
   1d7e2:	4a37      	ldr	r2, [pc, #220]	; (1d8c0 <sd_acmd51+0xec>)
   1d7e4:	0019      	movs	r1, r3
   1d7e6:	0010      	movs	r0, r2
   1d7e8:	4b36      	ldr	r3, [pc, #216]	; (1d8c4 <sd_acmd51+0xf0>)
   1d7ea:	4798      	blx	r3
   1d7ec:	0003      	movs	r3, r0
   1d7ee:	001a      	movs	r2, r3
   1d7f0:	2301      	movs	r3, #1
   1d7f2:	4053      	eors	r3, r2
   1d7f4:	b2db      	uxtb	r3, r3
   1d7f6:	2b00      	cmp	r3, #0
   1d7f8:	d001      	beq.n	1d7fe <sd_acmd51+0x2a>
		return false;
   1d7fa:	2300      	movs	r3, #0
   1d7fc:	e059      	b.n	1d8b2 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1d7fe:	4832      	ldr	r0, [pc, #200]	; (1d8c8 <sd_acmd51+0xf4>)
   1d800:	2301      	movs	r3, #1
   1d802:	9300      	str	r3, [sp, #0]
   1d804:	2301      	movs	r3, #1
   1d806:	2208      	movs	r2, #8
   1d808:	2100      	movs	r1, #0
   1d80a:	4c30      	ldr	r4, [pc, #192]	; (1d8cc <sd_acmd51+0xf8>)
   1d80c:	47a0      	blx	r4
   1d80e:	0003      	movs	r3, r0
   1d810:	001a      	movs	r2, r3
   1d812:	2301      	movs	r3, #1
   1d814:	4053      	eors	r3, r2
   1d816:	b2db      	uxtb	r3, r3
   1d818:	2b00      	cmp	r3, #0
   1d81a:	d001      	beq.n	1d820 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1d81c:	2300      	movs	r3, #0
   1d81e:	e048      	b.n	1d8b2 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1d820:	003b      	movs	r3, r7
   1d822:	2101      	movs	r1, #1
   1d824:	0018      	movs	r0, r3
   1d826:	4b2a      	ldr	r3, [pc, #168]	; (1d8d0 <sd_acmd51+0xfc>)
   1d828:	4798      	blx	r3
   1d82a:	0003      	movs	r3, r0
   1d82c:	001a      	movs	r2, r3
   1d82e:	2301      	movs	r3, #1
   1d830:	4053      	eors	r3, r2
   1d832:	b2db      	uxtb	r3, r3
   1d834:	2b00      	cmp	r3, #0
   1d836:	d001      	beq.n	1d83c <sd_acmd51+0x68>
		return false;
   1d838:	2300      	movs	r3, #0
   1d83a:	e03a      	b.n	1d8b2 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1d83c:	4b25      	ldr	r3, [pc, #148]	; (1d8d4 <sd_acmd51+0x100>)
   1d83e:	4798      	blx	r3
   1d840:	0003      	movs	r3, r0
   1d842:	001a      	movs	r2, r3
   1d844:	2301      	movs	r3, #1
   1d846:	4053      	eors	r3, r2
   1d848:	b2db      	uxtb	r3, r3
   1d84a:	2b00      	cmp	r3, #0
   1d84c:	d001      	beq.n	1d852 <sd_acmd51+0x7e>
		return false;
   1d84e:	2300      	movs	r3, #0
   1d850:	e02f      	b.n	1d8b2 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1d852:	0038      	movs	r0, r7
   1d854:	2304      	movs	r3, #4
   1d856:	2238      	movs	r2, #56	; 0x38
   1d858:	2140      	movs	r1, #64	; 0x40
   1d85a:	4c1f      	ldr	r4, [pc, #124]	; (1d8d8 <sd_acmd51+0x104>)
   1d85c:	47a0      	blx	r4
   1d85e:	0003      	movs	r3, r0
   1d860:	2b01      	cmp	r3, #1
   1d862:	d008      	beq.n	1d876 <sd_acmd51+0xa2>
   1d864:	d302      	bcc.n	1d86c <sd_acmd51+0x98>
   1d866:	2b02      	cmp	r3, #2
   1d868:	d00a      	beq.n	1d880 <sd_acmd51+0xac>
   1d86a:	e01c      	b.n	1d8a6 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1d86c:	4b13      	ldr	r3, [pc, #76]	; (1d8bc <sd_acmd51+0xe8>)
   1d86e:	681b      	ldr	r3, [r3, #0]
   1d870:	2210      	movs	r2, #16
   1d872:	731a      	strb	r2, [r3, #12]
		break;
   1d874:	e01c      	b.n	1d8b0 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1d876:	4b11      	ldr	r3, [pc, #68]	; (1d8bc <sd_acmd51+0xe8>)
   1d878:	681b      	ldr	r3, [r3, #0]
   1d87a:	221a      	movs	r2, #26
   1d87c:	731a      	strb	r2, [r3, #12]
		break;
   1d87e:	e017      	b.n	1d8b0 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1d880:	0038      	movs	r0, r7
   1d882:	2301      	movs	r3, #1
   1d884:	222f      	movs	r2, #47	; 0x2f
   1d886:	2140      	movs	r1, #64	; 0x40
   1d888:	4c13      	ldr	r4, [pc, #76]	; (1d8d8 <sd_acmd51+0x104>)
   1d88a:	47a0      	blx	r4
   1d88c:	0003      	movs	r3, r0
   1d88e:	2b01      	cmp	r3, #1
   1d890:	d104      	bne.n	1d89c <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1d892:	4b0a      	ldr	r3, [pc, #40]	; (1d8bc <sd_acmd51+0xe8>)
   1d894:	681b      	ldr	r3, [r3, #0]
   1d896:	2230      	movs	r2, #48	; 0x30
   1d898:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1d89a:	e009      	b.n	1d8b0 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1d89c:	4b07      	ldr	r3, [pc, #28]	; (1d8bc <sd_acmd51+0xe8>)
   1d89e:	681b      	ldr	r3, [r3, #0]
   1d8a0:	2220      	movs	r2, #32
   1d8a2:	731a      	strb	r2, [r3, #12]
		break;
   1d8a4:	e004      	b.n	1d8b0 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1d8a6:	4b05      	ldr	r3, [pc, #20]	; (1d8bc <sd_acmd51+0xe8>)
   1d8a8:	681b      	ldr	r3, [r3, #0]
   1d8aa:	2210      	movs	r2, #16
   1d8ac:	731a      	strb	r2, [r3, #12]
		break;
   1d8ae:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1d8b0:	2301      	movs	r3, #1
}
   1d8b2:	0018      	movs	r0, r3
   1d8b4:	46bd      	mov	sp, r7
   1d8b6:	b003      	add	sp, #12
   1d8b8:	bd90      	pop	{r4, r7, pc}
   1d8ba:	46c0      	nop			; (mov r8, r8)
   1d8bc:	20004210 	.word	0x20004210
   1d8c0:	00001137 	.word	0x00001137
   1d8c4:	0001ec31 	.word	0x0001ec31
   1d8c8:	00081133 	.word	0x00081133
   1d8cc:	0001ec59 	.word	0x0001ec59
   1d8d0:	0001ef29 	.word	0x0001ef29
   1d8d4:	0001efcd 	.word	0x0001efcd
   1d8d8:	0001d059 	.word	0x0001d059

0001d8dc <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1d8dc:	b580      	push	{r7, lr}
   1d8de:	b082      	sub	sp, #8
   1d8e0:	af00      	add	r7, sp, #0
   1d8e2:	0002      	movs	r2, r0
   1d8e4:	1dfb      	adds	r3, r7, #7
   1d8e6:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1d8e8:	1dfb      	adds	r3, r7, #7
   1d8ea:	781b      	ldrb	r3, [r3, #0]
   1d8ec:	2b00      	cmp	r3, #0
   1d8ee:	d001      	beq.n	1d8f4 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1d8f0:	2304      	movs	r3, #4
   1d8f2:	e047      	b.n	1d984 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1d8f4:	1dfb      	adds	r3, r7, #7
   1d8f6:	781b      	ldrb	r3, [r3, #0]
   1d8f8:	4a24      	ldr	r2, [pc, #144]	; (1d98c <sd_mmc_select_slot+0xb0>)
   1d8fa:	015b      	lsls	r3, r3, #5
   1d8fc:	18d3      	adds	r3, r2, r3
   1d8fe:	330a      	adds	r3, #10
   1d900:	781b      	ldrb	r3, [r3, #0]
   1d902:	2b04      	cmp	r3, #4
   1d904:	d008      	beq.n	1d918 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1d906:	1dfb      	adds	r3, r7, #7
   1d908:	781b      	ldrb	r3, [r3, #0]
   1d90a:	4a20      	ldr	r2, [pc, #128]	; (1d98c <sd_mmc_select_slot+0xb0>)
   1d90c:	015b      	lsls	r3, r3, #5
   1d90e:	18d3      	adds	r3, r2, r3
   1d910:	330a      	adds	r3, #10
   1d912:	781b      	ldrb	r3, [r3, #0]
   1d914:	2b03      	cmp	r3, #3
   1d916:	d11d      	bne.n	1d954 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1d918:	1dfb      	adds	r3, r7, #7
   1d91a:	781b      	ldrb	r3, [r3, #0]
   1d91c:	4a1b      	ldr	r2, [pc, #108]	; (1d98c <sd_mmc_select_slot+0xb0>)
   1d91e:	015b      	lsls	r3, r3, #5
   1d920:	18d3      	adds	r3, r2, r3
   1d922:	330a      	adds	r3, #10
   1d924:	2202      	movs	r2, #2
   1d926:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1d928:	1dfb      	adds	r3, r7, #7
   1d92a:	781a      	ldrb	r2, [r3, #0]
   1d92c:	4b17      	ldr	r3, [pc, #92]	; (1d98c <sd_mmc_select_slot+0xb0>)
   1d92e:	0152      	lsls	r2, r2, #5
   1d930:	4917      	ldr	r1, [pc, #92]	; (1d990 <sd_mmc_select_slot+0xb4>)
   1d932:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1d934:	1dfb      	adds	r3, r7, #7
   1d936:	781b      	ldrb	r3, [r3, #0]
   1d938:	4a14      	ldr	r2, [pc, #80]	; (1d98c <sd_mmc_select_slot+0xb0>)
   1d93a:	015b      	lsls	r3, r3, #5
   1d93c:	18d3      	adds	r3, r2, r3
   1d93e:	330d      	adds	r3, #13
   1d940:	2201      	movs	r2, #1
   1d942:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1d944:	1dfb      	adds	r3, r7, #7
   1d946:	781b      	ldrb	r3, [r3, #0]
   1d948:	4a10      	ldr	r2, [pc, #64]	; (1d98c <sd_mmc_select_slot+0xb0>)
   1d94a:	015b      	lsls	r3, r3, #5
   1d94c:	18d3      	adds	r3, r2, r3
   1d94e:	331e      	adds	r3, #30
   1d950:	2200      	movs	r2, #0
   1d952:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1d954:	4b0f      	ldr	r3, [pc, #60]	; (1d994 <sd_mmc_select_slot+0xb8>)
   1d956:	1dfa      	adds	r2, r7, #7
   1d958:	7812      	ldrb	r2, [r2, #0]
   1d95a:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1d95c:	1dfb      	adds	r3, r7, #7
   1d95e:	781b      	ldrb	r3, [r3, #0]
   1d960:	015a      	lsls	r2, r3, #5
   1d962:	4b0a      	ldr	r3, [pc, #40]	; (1d98c <sd_mmc_select_slot+0xb0>)
   1d964:	18d2      	adds	r2, r2, r3
   1d966:	4b0c      	ldr	r3, [pc, #48]	; (1d998 <sd_mmc_select_slot+0xbc>)
   1d968:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1d96a:	4b0c      	ldr	r3, [pc, #48]	; (1d99c <sd_mmc_select_slot+0xc0>)
   1d96c:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1d96e:	1dfb      	adds	r3, r7, #7
   1d970:	781b      	ldrb	r3, [r3, #0]
   1d972:	4a06      	ldr	r2, [pc, #24]	; (1d98c <sd_mmc_select_slot+0xb0>)
   1d974:	015b      	lsls	r3, r3, #5
   1d976:	18d3      	adds	r3, r2, r3
   1d978:	330a      	adds	r3, #10
   1d97a:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1d97c:	3b02      	subs	r3, #2
   1d97e:	425a      	negs	r2, r3
   1d980:	4153      	adcs	r3, r2
   1d982:	b2db      	uxtb	r3, r3
}
   1d984:	0018      	movs	r0, r3
   1d986:	46bd      	mov	sp, r7
   1d988:	b002      	add	sp, #8
   1d98a:	bd80      	pop	{r7, pc}
   1d98c:	200041ec 	.word	0x200041ec
   1d990:	00061a80 	.word	0x00061a80
   1d994:	2000420c 	.word	0x2000420c
   1d998:	20004210 	.word	0x20004210
   1d99c:	0001d9a1 	.word	0x0001d9a1

0001d9a0 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1d9a0:	b5b0      	push	{r4, r5, r7, lr}
   1d9a2:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1d9a4:	4b09      	ldr	r3, [pc, #36]	; (1d9cc <sd_mmc_configure_slot+0x2c>)
   1d9a6:	7818      	ldrb	r0, [r3, #0]
   1d9a8:	4b09      	ldr	r3, [pc, #36]	; (1d9d0 <sd_mmc_configure_slot+0x30>)
   1d9aa:	681b      	ldr	r3, [r3, #0]
   1d9ac:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1d9ae:	4b08      	ldr	r3, [pc, #32]	; (1d9d0 <sd_mmc_configure_slot+0x30>)
   1d9b0:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1d9b2:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1d9b4:	4b06      	ldr	r3, [pc, #24]	; (1d9d0 <sd_mmc_configure_slot+0x30>)
   1d9b6:	681b      	ldr	r3, [r3, #0]
   1d9b8:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1d9ba:	1e5c      	subs	r4, r3, #1
   1d9bc:	41a3      	sbcs	r3, r4
   1d9be:	b2db      	uxtb	r3, r3
   1d9c0:	4c04      	ldr	r4, [pc, #16]	; (1d9d4 <sd_mmc_configure_slot+0x34>)
   1d9c2:	47a0      	blx	r4
}
   1d9c4:	46c0      	nop			; (mov r8, r8)
   1d9c6:	46bd      	mov	sp, r7
   1d9c8:	bdb0      	pop	{r4, r5, r7, pc}
   1d9ca:	46c0      	nop			; (mov r8, r8)
   1d9cc:	2000420c 	.word	0x2000420c
   1d9d0:	20004210 	.word	0x20004210
   1d9d4:	0001eb19 	.word	0x0001eb19

0001d9d8 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1d9d8:	b580      	push	{r7, lr}
   1d9da:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1d9dc:	4b05      	ldr	r3, [pc, #20]	; (1d9f4 <sd_mmc_deselect_slot+0x1c>)
   1d9de:	781b      	ldrb	r3, [r3, #0]
   1d9e0:	2b00      	cmp	r3, #0
   1d9e2:	d104      	bne.n	1d9ee <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1d9e4:	4b03      	ldr	r3, [pc, #12]	; (1d9f4 <sd_mmc_deselect_slot+0x1c>)
   1d9e6:	781b      	ldrb	r3, [r3, #0]
   1d9e8:	0018      	movs	r0, r3
   1d9ea:	4b03      	ldr	r3, [pc, #12]	; (1d9f8 <sd_mmc_deselect_slot+0x20>)
   1d9ec:	4798      	blx	r3
	}
}
   1d9ee:	46c0      	nop			; (mov r8, r8)
   1d9f0:	46bd      	mov	sp, r7
   1d9f2:	bd80      	pop	{r7, pc}
   1d9f4:	2000420c 	.word	0x2000420c
   1d9f8:	0001eba1 	.word	0x0001eba1

0001d9fc <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1d9fc:	b580      	push	{r7, lr}
   1d9fe:	b082      	sub	sp, #8
   1da00:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1da02:	1dfb      	adds	r3, r7, #7
   1da04:	2200      	movs	r2, #0
   1da06:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1da08:	4b59      	ldr	r3, [pc, #356]	; (1db70 <sd_mmc_spi_card_init+0x174>)
   1da0a:	681b      	ldr	r3, [r3, #0]
   1da0c:	2201      	movs	r2, #1
   1da0e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1da10:	4b57      	ldr	r3, [pc, #348]	; (1db70 <sd_mmc_spi_card_init+0x174>)
   1da12:	681b      	ldr	r3, [r3, #0]
   1da14:	2200      	movs	r2, #0
   1da16:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1da18:	4b55      	ldr	r3, [pc, #340]	; (1db70 <sd_mmc_spi_card_init+0x174>)
   1da1a:	681b      	ldr	r3, [r3, #0]
   1da1c:	2200      	movs	r2, #0
   1da1e:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1da20:	4b54      	ldr	r3, [pc, #336]	; (1db74 <sd_mmc_spi_card_init+0x178>)
   1da22:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1da24:	2388      	movs	r3, #136	; 0x88
   1da26:	015b      	lsls	r3, r3, #5
   1da28:	2100      	movs	r1, #0
   1da2a:	0018      	movs	r0, r3
   1da2c:	4b52      	ldr	r3, [pc, #328]	; (1db78 <sd_mmc_spi_card_init+0x17c>)
   1da2e:	4798      	blx	r3
   1da30:	0003      	movs	r3, r0
   1da32:	001a      	movs	r2, r3
   1da34:	2301      	movs	r3, #1
   1da36:	4053      	eors	r3, r2
   1da38:	b2db      	uxtb	r3, r3
   1da3a:	2b00      	cmp	r3, #0
   1da3c:	d001      	beq.n	1da42 <sd_mmc_spi_card_init+0x46>
		return false;
   1da3e:	2300      	movs	r3, #0
   1da40:	e092      	b.n	1db68 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1da42:	1dfb      	adds	r3, r7, #7
   1da44:	0018      	movs	r0, r3
   1da46:	4b4d      	ldr	r3, [pc, #308]	; (1db7c <sd_mmc_spi_card_init+0x180>)
   1da48:	4798      	blx	r3
   1da4a:	0003      	movs	r3, r0
   1da4c:	001a      	movs	r2, r3
   1da4e:	2301      	movs	r3, #1
   1da50:	4053      	eors	r3, r2
   1da52:	b2db      	uxtb	r3, r3
   1da54:	2b00      	cmp	r3, #0
   1da56:	d001      	beq.n	1da5c <sd_mmc_spi_card_init+0x60>
		return false;
   1da58:	2300      	movs	r3, #0
   1da5a:	e085      	b.n	1db68 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1da5c:	4b48      	ldr	r3, [pc, #288]	; (1db80 <sd_mmc_spi_card_init+0x184>)
   1da5e:	4798      	blx	r3
   1da60:	0003      	movs	r3, r0
   1da62:	001a      	movs	r2, r3
   1da64:	2301      	movs	r3, #1
   1da66:	4053      	eors	r3, r2
   1da68:	b2db      	uxtb	r3, r3
   1da6a:	2b00      	cmp	r3, #0
   1da6c:	d001      	beq.n	1da72 <sd_mmc_spi_card_init+0x76>
		return false;
   1da6e:	2300      	movs	r3, #0
   1da70:	e07a      	b.n	1db68 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1da72:	4b3f      	ldr	r3, [pc, #252]	; (1db70 <sd_mmc_spi_card_init+0x174>)
   1da74:	681b      	ldr	r3, [r3, #0]
   1da76:	7adb      	ldrb	r3, [r3, #11]
   1da78:	001a      	movs	r2, r3
   1da7a:	2301      	movs	r3, #1
   1da7c:	4013      	ands	r3, r2
   1da7e:	d021      	beq.n	1dac4 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1da80:	1dfb      	adds	r3, r7, #7
   1da82:	781b      	ldrb	r3, [r3, #0]
   1da84:	0018      	movs	r0, r3
   1da86:	4b3f      	ldr	r3, [pc, #252]	; (1db84 <sd_mmc_spi_card_init+0x188>)
   1da88:	4798      	blx	r3
   1da8a:	0003      	movs	r3, r0
   1da8c:	001a      	movs	r2, r3
   1da8e:	2301      	movs	r3, #1
   1da90:	4053      	eors	r3, r2
   1da92:	b2db      	uxtb	r3, r3
   1da94:	2b00      	cmp	r3, #0
   1da96:	d007      	beq.n	1daa8 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1da98:	4b35      	ldr	r3, [pc, #212]	; (1db70 <sd_mmc_spi_card_init+0x174>)
   1da9a:	681b      	ldr	r3, [r3, #0]
   1da9c:	2202      	movs	r2, #2
   1da9e:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1daa0:	4b39      	ldr	r3, [pc, #228]	; (1db88 <sd_mmc_spi_card_init+0x18c>)
   1daa2:	4798      	blx	r3
   1daa4:	0003      	movs	r3, r0
   1daa6:	e05f      	b.n	1db68 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1daa8:	4b38      	ldr	r3, [pc, #224]	; (1db8c <sd_mmc_spi_card_init+0x190>)
   1daaa:	2100      	movs	r1, #0
   1daac:	0018      	movs	r0, r3
   1daae:	4b32      	ldr	r3, [pc, #200]	; (1db78 <sd_mmc_spi_card_init+0x17c>)
   1dab0:	4798      	blx	r3
   1dab2:	0003      	movs	r3, r0
   1dab4:	001a      	movs	r2, r3
   1dab6:	2301      	movs	r3, #1
   1dab8:	4053      	eors	r3, r2
   1daba:	b2db      	uxtb	r3, r3
   1dabc:	2b00      	cmp	r3, #0
   1dabe:	d001      	beq.n	1dac4 <sd_mmc_spi_card_init+0xc8>
			return false;
   1dac0:	2300      	movs	r3, #0
   1dac2:	e051      	b.n	1db68 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1dac4:	4b2a      	ldr	r3, [pc, #168]	; (1db70 <sd_mmc_spi_card_init+0x174>)
   1dac6:	681b      	ldr	r3, [r3, #0]
   1dac8:	7adb      	ldrb	r3, [r3, #11]
   1daca:	001a      	movs	r2, r3
   1dacc:	2301      	movs	r3, #1
   1dace:	4013      	ands	r3, r2
   1dad0:	d017      	beq.n	1db02 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1dad2:	4b2f      	ldr	r3, [pc, #188]	; (1db90 <sd_mmc_spi_card_init+0x194>)
   1dad4:	4798      	blx	r3
   1dad6:	0003      	movs	r3, r0
   1dad8:	001a      	movs	r2, r3
   1dada:	2301      	movs	r3, #1
   1dadc:	4053      	eors	r3, r2
   1dade:	b2db      	uxtb	r3, r3
   1dae0:	2b00      	cmp	r3, #0
   1dae2:	d001      	beq.n	1dae8 <sd_mmc_spi_card_init+0xec>
			return false;
   1dae4:	2300      	movs	r3, #0
   1dae6:	e03f      	b.n	1db68 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1dae8:	4b2a      	ldr	r3, [pc, #168]	; (1db94 <sd_mmc_spi_card_init+0x198>)
   1daea:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1daec:	4b2a      	ldr	r3, [pc, #168]	; (1db98 <sd_mmc_spi_card_init+0x19c>)
   1daee:	4798      	blx	r3
   1daf0:	0003      	movs	r3, r0
   1daf2:	001a      	movs	r2, r3
   1daf4:	2301      	movs	r3, #1
   1daf6:	4053      	eors	r3, r2
   1daf8:	b2db      	uxtb	r3, r3
   1dafa:	2b00      	cmp	r3, #0
   1dafc:	d001      	beq.n	1db02 <sd_mmc_spi_card_init+0x106>
			return false;
   1dafe:	2300      	movs	r3, #0
   1db00:	e032      	b.n	1db68 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1db02:	4b1b      	ldr	r3, [pc, #108]	; (1db70 <sd_mmc_spi_card_init+0x174>)
   1db04:	681b      	ldr	r3, [r3, #0]
   1db06:	7adb      	ldrb	r3, [r3, #11]
   1db08:	001a      	movs	r2, r3
   1db0a:	2301      	movs	r3, #1
   1db0c:	4013      	ands	r3, r2
   1db0e:	d016      	beq.n	1db3e <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1db10:	4b17      	ldr	r3, [pc, #92]	; (1db70 <sd_mmc_spi_card_init+0x174>)
   1db12:	681b      	ldr	r3, [r3, #0]
   1db14:	7adb      	ldrb	r3, [r3, #11]
   1db16:	001a      	movs	r2, r3
   1db18:	2308      	movs	r3, #8
   1db1a:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1db1c:	d10f      	bne.n	1db3e <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1db1e:	2380      	movs	r3, #128	; 0x80
   1db20:	009b      	lsls	r3, r3, #2
   1db22:	4a1e      	ldr	r2, [pc, #120]	; (1db9c <sd_mmc_spi_card_init+0x1a0>)
   1db24:	0019      	movs	r1, r3
   1db26:	0010      	movs	r0, r2
   1db28:	4b13      	ldr	r3, [pc, #76]	; (1db78 <sd_mmc_spi_card_init+0x17c>)
   1db2a:	4798      	blx	r3
   1db2c:	0003      	movs	r3, r0
   1db2e:	001a      	movs	r2, r3
   1db30:	2301      	movs	r3, #1
   1db32:	4053      	eors	r3, r2
   1db34:	b2db      	uxtb	r3, r3
   1db36:	2b00      	cmp	r3, #0
   1db38:	d001      	beq.n	1db3e <sd_mmc_spi_card_init+0x142>
			return false;
   1db3a:	2300      	movs	r3, #0
   1db3c:	e014      	b.n	1db68 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1db3e:	4b0c      	ldr	r3, [pc, #48]	; (1db70 <sd_mmc_spi_card_init+0x174>)
   1db40:	681b      	ldr	r3, [r3, #0]
   1db42:	7adb      	ldrb	r3, [r3, #11]
   1db44:	001a      	movs	r2, r3
   1db46:	2301      	movs	r3, #1
   1db48:	4013      	ands	r3, r2
   1db4a:	d00a      	beq.n	1db62 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1db4c:	4b14      	ldr	r3, [pc, #80]	; (1dba0 <sd_mmc_spi_card_init+0x1a4>)
   1db4e:	4798      	blx	r3
   1db50:	0003      	movs	r3, r0
   1db52:	001a      	movs	r2, r3
   1db54:	2301      	movs	r3, #1
   1db56:	4053      	eors	r3, r2
   1db58:	b2db      	uxtb	r3, r3
   1db5a:	2b00      	cmp	r3, #0
   1db5c:	d001      	beq.n	1db62 <sd_mmc_spi_card_init+0x166>
			return false;
   1db5e:	2300      	movs	r3, #0
   1db60:	e002      	b.n	1db68 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1db62:	4b10      	ldr	r3, [pc, #64]	; (1dba4 <sd_mmc_spi_card_init+0x1a8>)
   1db64:	4798      	blx	r3
	return true;
   1db66:	2301      	movs	r3, #1
}
   1db68:	0018      	movs	r0, r3
   1db6a:	46bd      	mov	sp, r7
   1db6c:	b002      	add	sp, #8
   1db6e:	bd80      	pop	{r7, pc}
   1db70:	20004210 	.word	0x20004210
   1db74:	0001ebe5 	.word	0x0001ebe5
   1db78:	0001ec31 	.word	0x0001ec31
   1db7c:	0001d351 	.word	0x0001d351
   1db80:	0001d345 	.word	0x0001d345
   1db84:	0001d261 	.word	0x0001d261
   1db88:	0001dba9 	.word	0x0001dba9
   1db8c:	0000113b 	.word	0x0000113b
   1db90:	0001d4ed 	.word	0x0001d4ed
   1db94:	0001d68d 	.word	0x0001d68d
   1db98:	0001d7d5 	.word	0x0001d7d5
   1db9c:	00001110 	.word	0x00001110
   1dba0:	0001d779 	.word	0x0001d779
   1dba4:	0001d9a1 	.word	0x0001d9a1

0001dba8 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1dba8:	b580      	push	{r7, lr}
   1dbaa:	b082      	sub	sp, #8
   1dbac:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1dbae:	2388      	movs	r3, #136	; 0x88
   1dbb0:	015b      	lsls	r3, r3, #5
   1dbb2:	2100      	movs	r1, #0
   1dbb4:	0018      	movs	r0, r3
   1dbb6:	4b32      	ldr	r3, [pc, #200]	; (1dc80 <sd_mmc_spi_install_mmc+0xd8>)
   1dbb8:	4798      	blx	r3
   1dbba:	0003      	movs	r3, r0
   1dbbc:	001a      	movs	r2, r3
   1dbbe:	2301      	movs	r3, #1
   1dbc0:	4053      	eors	r3, r2
   1dbc2:	b2db      	uxtb	r3, r3
   1dbc4:	2b00      	cmp	r3, #0
   1dbc6:	d001      	beq.n	1dbcc <sd_mmc_spi_install_mmc+0x24>
		return false;
   1dbc8:	2300      	movs	r3, #0
   1dbca:	e055      	b.n	1dc78 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1dbcc:	4b2d      	ldr	r3, [pc, #180]	; (1dc84 <sd_mmc_spi_install_mmc+0xdc>)
   1dbce:	4798      	blx	r3
   1dbd0:	0003      	movs	r3, r0
   1dbd2:	001a      	movs	r2, r3
   1dbd4:	2301      	movs	r3, #1
   1dbd6:	4053      	eors	r3, r2
   1dbd8:	b2db      	uxtb	r3, r3
   1dbda:	2b00      	cmp	r3, #0
   1dbdc:	d001      	beq.n	1dbe2 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1dbde:	2300      	movs	r3, #0
   1dbe0:	e04a      	b.n	1dc78 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1dbe2:	4b29      	ldr	r3, [pc, #164]	; (1dc88 <sd_mmc_spi_install_mmc+0xe0>)
   1dbe4:	2100      	movs	r1, #0
   1dbe6:	0018      	movs	r0, r3
   1dbe8:	4b25      	ldr	r3, [pc, #148]	; (1dc80 <sd_mmc_spi_install_mmc+0xd8>)
   1dbea:	4798      	blx	r3
   1dbec:	0003      	movs	r3, r0
   1dbee:	001a      	movs	r2, r3
   1dbf0:	2301      	movs	r3, #1
   1dbf2:	4053      	eors	r3, r2
   1dbf4:	b2db      	uxtb	r3, r3
   1dbf6:	2b00      	cmp	r3, #0
   1dbf8:	d001      	beq.n	1dbfe <sd_mmc_spi_install_mmc+0x56>
		return false;
   1dbfa:	2300      	movs	r3, #0
   1dbfc:	e03c      	b.n	1dc78 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1dbfe:	4b23      	ldr	r3, [pc, #140]	; (1dc8c <sd_mmc_spi_install_mmc+0xe4>)
   1dc00:	4798      	blx	r3
   1dc02:	0003      	movs	r3, r0
   1dc04:	001a      	movs	r2, r3
   1dc06:	2301      	movs	r3, #1
   1dc08:	4053      	eors	r3, r2
   1dc0a:	b2db      	uxtb	r3, r3
   1dc0c:	2b00      	cmp	r3, #0
   1dc0e:	d001      	beq.n	1dc14 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1dc10:	2300      	movs	r3, #0
   1dc12:	e031      	b.n	1dc78 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1dc14:	4b1e      	ldr	r3, [pc, #120]	; (1dc90 <sd_mmc_spi_install_mmc+0xe8>)
   1dc16:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1dc18:	4b1e      	ldr	r3, [pc, #120]	; (1dc94 <sd_mmc_spi_install_mmc+0xec>)
   1dc1a:	681b      	ldr	r3, [r3, #0]
   1dc1c:	7b1b      	ldrb	r3, [r3, #12]
   1dc1e:	2b3f      	cmp	r3, #63	; 0x3f
   1dc20:	d90c      	bls.n	1dc3c <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1dc22:	1dfb      	adds	r3, r7, #7
   1dc24:	0018      	movs	r0, r3
   1dc26:	4b1c      	ldr	r3, [pc, #112]	; (1dc98 <sd_mmc_spi_install_mmc+0xf0>)
   1dc28:	4798      	blx	r3
   1dc2a:	0003      	movs	r3, r0
   1dc2c:	001a      	movs	r2, r3
   1dc2e:	2301      	movs	r3, #1
   1dc30:	4053      	eors	r3, r2
   1dc32:	b2db      	uxtb	r3, r3
   1dc34:	2b00      	cmp	r3, #0
   1dc36:	d001      	beq.n	1dc3c <sd_mmc_spi_install_mmc+0x94>
			return false;
   1dc38:	2300      	movs	r3, #0
   1dc3a:	e01d      	b.n	1dc78 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1dc3c:	2380      	movs	r3, #128	; 0x80
   1dc3e:	009b      	lsls	r3, r3, #2
   1dc40:	4a16      	ldr	r2, [pc, #88]	; (1dc9c <sd_mmc_spi_install_mmc+0xf4>)
   1dc42:	0019      	movs	r1, r3
   1dc44:	0010      	movs	r0, r2
   1dc46:	4b0e      	ldr	r3, [pc, #56]	; (1dc80 <sd_mmc_spi_install_mmc+0xd8>)
   1dc48:	4798      	blx	r3
   1dc4a:	0003      	movs	r3, r0
   1dc4c:	001a      	movs	r2, r3
   1dc4e:	2301      	movs	r3, #1
   1dc50:	4053      	eors	r3, r2
   1dc52:	b2db      	uxtb	r3, r3
   1dc54:	2b00      	cmp	r3, #0
   1dc56:	d001      	beq.n	1dc5c <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1dc58:	2300      	movs	r3, #0
   1dc5a:	e00d      	b.n	1dc78 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1dc5c:	4b10      	ldr	r3, [pc, #64]	; (1dca0 <sd_mmc_spi_install_mmc+0xf8>)
   1dc5e:	4798      	blx	r3
   1dc60:	0003      	movs	r3, r0
   1dc62:	001a      	movs	r2, r3
   1dc64:	2301      	movs	r3, #1
   1dc66:	4053      	eors	r3, r2
   1dc68:	b2db      	uxtb	r3, r3
   1dc6a:	2b00      	cmp	r3, #0
   1dc6c:	d001      	beq.n	1dc72 <sd_mmc_spi_install_mmc+0xca>
		return false;
   1dc6e:	2300      	movs	r3, #0
   1dc70:	e002      	b.n	1dc78 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1dc72:	4b0c      	ldr	r3, [pc, #48]	; (1dca4 <sd_mmc_spi_install_mmc+0xfc>)
   1dc74:	4798      	blx	r3
	return true;
   1dc76:	2301      	movs	r3, #1
}
   1dc78:	0018      	movs	r0, r3
   1dc7a:	46bd      	mov	sp, r7
   1dc7c:	b002      	add	sp, #8
   1dc7e:	bd80      	pop	{r7, pc}
   1dc80:	0001ec31 	.word	0x0001ec31
   1dc84:	0001d1b5 	.word	0x0001d1b5
   1dc88:	0000113b 	.word	0x0000113b
   1dc8c:	0001d4ed 	.word	0x0001d4ed
   1dc90:	0001d55d 	.word	0x0001d55d
   1dc94:	20004210 	.word	0x20004210
   1dc98:	0001d3c1 	.word	0x0001d3c1
   1dc9c:	00001110 	.word	0x00001110
   1dca0:	0001d779 	.word	0x0001d779
   1dca4:	0001d9a1 	.word	0x0001d9a1

0001dca8 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   1dca8:	b580      	push	{r7, lr}
   1dcaa:	b082      	sub	sp, #8
   1dcac:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1dcae:	1dfb      	adds	r3, r7, #7
   1dcb0:	2200      	movs	r2, #0
   1dcb2:	701a      	strb	r2, [r3, #0]
   1dcb4:	e00c      	b.n	1dcd0 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   1dcb6:	1dfb      	adds	r3, r7, #7
   1dcb8:	781b      	ldrb	r3, [r3, #0]
   1dcba:	4a0c      	ldr	r2, [pc, #48]	; (1dcec <sd_mmc_init+0x44>)
   1dcbc:	015b      	lsls	r3, r3, #5
   1dcbe:	18d3      	adds	r3, r2, r3
   1dcc0:	330a      	adds	r3, #10
   1dcc2:	2204      	movs	r2, #4
   1dcc4:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1dcc6:	1dfb      	adds	r3, r7, #7
   1dcc8:	781a      	ldrb	r2, [r3, #0]
   1dcca:	1dfb      	adds	r3, r7, #7
   1dccc:	3201      	adds	r2, #1
   1dcce:	701a      	strb	r2, [r3, #0]
   1dcd0:	1dfb      	adds	r3, r7, #7
   1dcd2:	781b      	ldrb	r3, [r3, #0]
   1dcd4:	2b00      	cmp	r3, #0
   1dcd6:	d0ee      	beq.n	1dcb6 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   1dcd8:	4b05      	ldr	r3, [pc, #20]	; (1dcf0 <sd_mmc_init+0x48>)
   1dcda:	22ff      	movs	r2, #255	; 0xff
   1dcdc:	701a      	strb	r2, [r3, #0]
	driver_init();
   1dcde:	4b05      	ldr	r3, [pc, #20]	; (1dcf4 <sd_mmc_init+0x4c>)
   1dce0:	4798      	blx	r3
}
   1dce2:	46c0      	nop			; (mov r8, r8)
   1dce4:	46bd      	mov	sp, r7
   1dce6:	b002      	add	sp, #8
   1dce8:	bd80      	pop	{r7, pc}
   1dcea:	46c0      	nop			; (mov r8, r8)
   1dcec:	200041ec 	.word	0x200041ec
   1dcf0:	2000420c 	.word	0x2000420c
   1dcf4:	0001ea51 	.word	0x0001ea51

0001dcf8 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1dcf8:	b590      	push	{r4, r7, lr}
   1dcfa:	b085      	sub	sp, #20
   1dcfc:	af00      	add	r7, sp, #0
   1dcfe:	0002      	movs	r2, r0
   1dd00:	1dfb      	adds	r3, r7, #7
   1dd02:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1dd04:	230f      	movs	r3, #15
   1dd06:	18fc      	adds	r4, r7, r3
   1dd08:	1dfb      	adds	r3, r7, #7
   1dd0a:	781b      	ldrb	r3, [r3, #0]
   1dd0c:	0018      	movs	r0, r3
   1dd0e:	4b13      	ldr	r3, [pc, #76]	; (1dd5c <sd_mmc_check+0x64>)
   1dd10:	4798      	blx	r3
   1dd12:	0003      	movs	r3, r0
   1dd14:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1dd16:	230f      	movs	r3, #15
   1dd18:	18fb      	adds	r3, r7, r3
   1dd1a:	781b      	ldrb	r3, [r3, #0]
   1dd1c:	2b01      	cmp	r3, #1
   1dd1e:	d005      	beq.n	1dd2c <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1dd20:	4b0f      	ldr	r3, [pc, #60]	; (1dd60 <sd_mmc_check+0x68>)
   1dd22:	4798      	blx	r3
		return sd_mmc_err;
   1dd24:	230f      	movs	r3, #15
   1dd26:	18fb      	adds	r3, r7, r3
   1dd28:	781b      	ldrb	r3, [r3, #0]
   1dd2a:	e012      	b.n	1dd52 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1dd2c:	4b0d      	ldr	r3, [pc, #52]	; (1dd64 <sd_mmc_check+0x6c>)
   1dd2e:	4798      	blx	r3
   1dd30:	1e03      	subs	r3, r0, #0
   1dd32:	d007      	beq.n	1dd44 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1dd34:	4b0c      	ldr	r3, [pc, #48]	; (1dd68 <sd_mmc_check+0x70>)
   1dd36:	681b      	ldr	r3, [r3, #0]
   1dd38:	2200      	movs	r2, #0
   1dd3a:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1dd3c:	4b08      	ldr	r3, [pc, #32]	; (1dd60 <sd_mmc_check+0x68>)
   1dd3e:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1dd40:	2301      	movs	r3, #1
   1dd42:	e006      	b.n	1dd52 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1dd44:	4b08      	ldr	r3, [pc, #32]	; (1dd68 <sd_mmc_check+0x70>)
   1dd46:	681b      	ldr	r3, [r3, #0]
   1dd48:	2203      	movs	r2, #3
   1dd4a:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1dd4c:	4b04      	ldr	r3, [pc, #16]	; (1dd60 <sd_mmc_check+0x68>)
   1dd4e:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1dd50:	2303      	movs	r3, #3
}
   1dd52:	0018      	movs	r0, r3
   1dd54:	46bd      	mov	sp, r7
   1dd56:	b005      	add	sp, #20
   1dd58:	bd90      	pop	{r4, r7, pc}
   1dd5a:	46c0      	nop			; (mov r8, r8)
   1dd5c:	0001d8dd 	.word	0x0001d8dd
   1dd60:	0001d9d9 	.word	0x0001d9d9
   1dd64:	0001d9fd 	.word	0x0001d9fd
   1dd68:	20004210 	.word	0x20004210

0001dd6c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1dd6c:	b580      	push	{r7, lr}
   1dd6e:	b082      	sub	sp, #8
   1dd70:	af00      	add	r7, sp, #0
   1dd72:	0002      	movs	r2, r0
   1dd74:	1dfb      	adds	r3, r7, #7
   1dd76:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1dd78:	1dfb      	adds	r3, r7, #7
   1dd7a:	781b      	ldrb	r3, [r3, #0]
   1dd7c:	0018      	movs	r0, r3
   1dd7e:	4b07      	ldr	r3, [pc, #28]	; (1dd9c <sd_mmc_get_type+0x30>)
   1dd80:	4798      	blx	r3
   1dd82:	1e03      	subs	r3, r0, #0
   1dd84:	d001      	beq.n	1dd8a <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1dd86:	2300      	movs	r3, #0
   1dd88:	e004      	b.n	1dd94 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1dd8a:	4b05      	ldr	r3, [pc, #20]	; (1dda0 <sd_mmc_get_type+0x34>)
   1dd8c:	4798      	blx	r3
	return sd_mmc_card->type;
   1dd8e:	4b05      	ldr	r3, [pc, #20]	; (1dda4 <sd_mmc_get_type+0x38>)
   1dd90:	681b      	ldr	r3, [r3, #0]
   1dd92:	7adb      	ldrb	r3, [r3, #11]
}
   1dd94:	0018      	movs	r0, r3
   1dd96:	46bd      	mov	sp, r7
   1dd98:	b002      	add	sp, #8
   1dd9a:	bd80      	pop	{r7, pc}
   1dd9c:	0001d8dd 	.word	0x0001d8dd
   1dda0:	0001d9d9 	.word	0x0001d9d9
   1dda4:	20004210 	.word	0x20004210

0001dda8 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1dda8:	b580      	push	{r7, lr}
   1ddaa:	b082      	sub	sp, #8
   1ddac:	af00      	add	r7, sp, #0
   1ddae:	0002      	movs	r2, r0
   1ddb0:	1dfb      	adds	r3, r7, #7
   1ddb2:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1ddb4:	1dfb      	adds	r3, r7, #7
   1ddb6:	781b      	ldrb	r3, [r3, #0]
   1ddb8:	0018      	movs	r0, r3
   1ddba:	4b07      	ldr	r3, [pc, #28]	; (1ddd8 <sd_mmc_get_capacity+0x30>)
   1ddbc:	4798      	blx	r3
   1ddbe:	1e03      	subs	r3, r0, #0
   1ddc0:	d001      	beq.n	1ddc6 <sd_mmc_get_capacity+0x1e>
		return 0;
   1ddc2:	2300      	movs	r3, #0
   1ddc4:	e004      	b.n	1ddd0 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1ddc6:	4b05      	ldr	r3, [pc, #20]	; (1dddc <sd_mmc_get_capacity+0x34>)
   1ddc8:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1ddca:	4b05      	ldr	r3, [pc, #20]	; (1dde0 <sd_mmc_get_capacity+0x38>)
   1ddcc:	681b      	ldr	r3, [r3, #0]
   1ddce:	685b      	ldr	r3, [r3, #4]
}
   1ddd0:	0018      	movs	r0, r3
   1ddd2:	46bd      	mov	sp, r7
   1ddd4:	b002      	add	sp, #8
   1ddd6:	bd80      	pop	{r7, pc}
   1ddd8:	0001d8dd 	.word	0x0001d8dd
   1dddc:	0001d9d9 	.word	0x0001d9d9
   1dde0:	20004210 	.word	0x20004210

0001dde4 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1dde4:	b580      	push	{r7, lr}
   1dde6:	b082      	sub	sp, #8
   1dde8:	af00      	add	r7, sp, #0
   1ddea:	0002      	movs	r2, r0
   1ddec:	1dfb      	adds	r3, r7, #7
   1ddee:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1ddf0:	2300      	movs	r3, #0
}
   1ddf2:	0018      	movs	r0, r3
   1ddf4:	46bd      	mov	sp, r7
   1ddf6:	b002      	add	sp, #8
   1ddf8:	bd80      	pop	{r7, pc}
	...

0001ddfc <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1ddfc:	b590      	push	{r4, r7, lr}
   1ddfe:	b089      	sub	sp, #36	; 0x24
   1de00:	af02      	add	r7, sp, #8
   1de02:	6039      	str	r1, [r7, #0]
   1de04:	0011      	movs	r1, r2
   1de06:	1dfb      	adds	r3, r7, #7
   1de08:	1c02      	adds	r2, r0, #0
   1de0a:	701a      	strb	r2, [r3, #0]
   1de0c:	1d3b      	adds	r3, r7, #4
   1de0e:	1c0a      	adds	r2, r1, #0
   1de10:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1de12:	230f      	movs	r3, #15
   1de14:	18fc      	adds	r4, r7, r3
   1de16:	1dfb      	adds	r3, r7, #7
   1de18:	781b      	ldrb	r3, [r3, #0]
   1de1a:	0018      	movs	r0, r3
   1de1c:	4b29      	ldr	r3, [pc, #164]	; (1dec4 <sd_mmc_init_read_blocks+0xc8>)
   1de1e:	4798      	blx	r3
   1de20:	0003      	movs	r3, r0
   1de22:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1de24:	230f      	movs	r3, #15
   1de26:	18fb      	adds	r3, r7, r3
   1de28:	781b      	ldrb	r3, [r3, #0]
   1de2a:	2b00      	cmp	r3, #0
   1de2c:	d003      	beq.n	1de36 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1de2e:	230f      	movs	r3, #15
   1de30:	18fb      	adds	r3, r7, r3
   1de32:	781b      	ldrb	r3, [r3, #0]
   1de34:	e041      	b.n	1deba <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1de36:	4b24      	ldr	r3, [pc, #144]	; (1dec8 <sd_mmc_init_read_blocks+0xcc>)
   1de38:	4798      	blx	r3
   1de3a:	0003      	movs	r3, r0
   1de3c:	001a      	movs	r2, r3
   1de3e:	2301      	movs	r3, #1
   1de40:	4053      	eors	r3, r2
   1de42:	b2db      	uxtb	r3, r3
   1de44:	2b00      	cmp	r3, #0
   1de46:	d003      	beq.n	1de50 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1de48:	4b20      	ldr	r3, [pc, #128]	; (1decc <sd_mmc_init_read_blocks+0xd0>)
   1de4a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1de4c:	2305      	movs	r3, #5
   1de4e:	e034      	b.n	1deba <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1de50:	1d3b      	adds	r3, r7, #4
   1de52:	881b      	ldrh	r3, [r3, #0]
   1de54:	2b01      	cmp	r3, #1
   1de56:	d902      	bls.n	1de5e <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1de58:	4b1d      	ldr	r3, [pc, #116]	; (1ded0 <sd_mmc_init_read_blocks+0xd4>)
   1de5a:	617b      	str	r3, [r7, #20]
   1de5c:	e001      	b.n	1de62 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1de5e:	4b1d      	ldr	r3, [pc, #116]	; (1ded4 <sd_mmc_init_read_blocks+0xd8>)
   1de60:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1de62:	4b1d      	ldr	r3, [pc, #116]	; (1ded8 <sd_mmc_init_read_blocks+0xdc>)
   1de64:	681b      	ldr	r3, [r3, #0]
   1de66:	7adb      	ldrb	r3, [r3, #11]
   1de68:	001a      	movs	r2, r3
   1de6a:	2308      	movs	r3, #8
   1de6c:	4013      	ands	r3, r2
   1de6e:	d002      	beq.n	1de76 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1de70:	683b      	ldr	r3, [r7, #0]
   1de72:	613b      	str	r3, [r7, #16]
   1de74:	e002      	b.n	1de7c <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1de76:	683b      	ldr	r3, [r7, #0]
   1de78:	025b      	lsls	r3, r3, #9
   1de7a:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1de7c:	1d3b      	adds	r3, r7, #4
   1de7e:	881c      	ldrh	r4, [r3, #0]
   1de80:	2380      	movs	r3, #128	; 0x80
   1de82:	009a      	lsls	r2, r3, #2
   1de84:	6939      	ldr	r1, [r7, #16]
   1de86:	6978      	ldr	r0, [r7, #20]
   1de88:	2301      	movs	r3, #1
   1de8a:	9300      	str	r3, [sp, #0]
   1de8c:	0023      	movs	r3, r4
   1de8e:	4c13      	ldr	r4, [pc, #76]	; (1dedc <sd_mmc_init_read_blocks+0xe0>)
   1de90:	47a0      	blx	r4
   1de92:	0003      	movs	r3, r0
   1de94:	001a      	movs	r2, r3
   1de96:	2301      	movs	r3, #1
   1de98:	4053      	eors	r3, r2
   1de9a:	b2db      	uxtb	r3, r3
   1de9c:	2b00      	cmp	r3, #0
   1de9e:	d003      	beq.n	1dea8 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1dea0:	4b0a      	ldr	r3, [pc, #40]	; (1decc <sd_mmc_init_read_blocks+0xd0>)
   1dea2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1dea4:	2305      	movs	r3, #5
   1dea6:	e008      	b.n	1deba <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1dea8:	4b0d      	ldr	r3, [pc, #52]	; (1dee0 <sd_mmc_init_read_blocks+0xe4>)
   1deaa:	1d3a      	adds	r2, r7, #4
   1deac:	8812      	ldrh	r2, [r2, #0]
   1deae:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1deb0:	4b0c      	ldr	r3, [pc, #48]	; (1dee4 <sd_mmc_init_read_blocks+0xe8>)
   1deb2:	1d3a      	adds	r2, r7, #4
   1deb4:	8812      	ldrh	r2, [r2, #0]
   1deb6:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1deb8:	2300      	movs	r3, #0
}
   1deba:	0018      	movs	r0, r3
   1debc:	46bd      	mov	sp, r7
   1debe:	b007      	add	sp, #28
   1dec0:	bd90      	pop	{r4, r7, pc}
   1dec2:	46c0      	nop			; (mov r8, r8)
   1dec4:	0001d8dd 	.word	0x0001d8dd
   1dec8:	0001d779 	.word	0x0001d779
   1decc:	0001d9d9 	.word	0x0001d9d9
   1ded0:	00101112 	.word	0x00101112
   1ded4:	00081111 	.word	0x00081111
   1ded8:	20004210 	.word	0x20004210
   1dedc:	0001ec59 	.word	0x0001ec59
   1dee0:	20004216 	.word	0x20004216
   1dee4:	20004214 	.word	0x20004214

0001dee8 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1dee8:	b580      	push	{r7, lr}
   1deea:	b082      	sub	sp, #8
   1deec:	af00      	add	r7, sp, #0
   1deee:	6078      	str	r0, [r7, #4]
   1def0:	000a      	movs	r2, r1
   1def2:	1cbb      	adds	r3, r7, #2
   1def4:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1def6:	1cbb      	adds	r3, r7, #2
   1def8:	881a      	ldrh	r2, [r3, #0]
   1defa:	687b      	ldr	r3, [r7, #4]
   1defc:	0011      	movs	r1, r2
   1defe:	0018      	movs	r0, r3
   1df00:	4b0d      	ldr	r3, [pc, #52]	; (1df38 <sd_mmc_start_read_blocks+0x50>)
   1df02:	4798      	blx	r3
   1df04:	0003      	movs	r3, r0
   1df06:	001a      	movs	r2, r3
   1df08:	2301      	movs	r3, #1
   1df0a:	4053      	eors	r3, r2
   1df0c:	b2db      	uxtb	r3, r3
   1df0e:	2b00      	cmp	r3, #0
   1df10:	d004      	beq.n	1df1c <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1df12:	4b0a      	ldr	r3, [pc, #40]	; (1df3c <sd_mmc_start_read_blocks+0x54>)
   1df14:	2200      	movs	r2, #0
   1df16:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1df18:	2305      	movs	r3, #5
   1df1a:	e008      	b.n	1df2e <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1df1c:	4b07      	ldr	r3, [pc, #28]	; (1df3c <sd_mmc_start_read_blocks+0x54>)
   1df1e:	881a      	ldrh	r2, [r3, #0]
   1df20:	1cbb      	adds	r3, r7, #2
   1df22:	881b      	ldrh	r3, [r3, #0]
   1df24:	1ad3      	subs	r3, r2, r3
   1df26:	b29a      	uxth	r2, r3
   1df28:	4b04      	ldr	r3, [pc, #16]	; (1df3c <sd_mmc_start_read_blocks+0x54>)
   1df2a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1df2c:	2300      	movs	r3, #0
}
   1df2e:	0018      	movs	r0, r3
   1df30:	46bd      	mov	sp, r7
   1df32:	b002      	add	sp, #8
   1df34:	bd80      	pop	{r7, pc}
   1df36:	46c0      	nop			; (mov r8, r8)
   1df38:	0001ef29 	.word	0x0001ef29
   1df3c:	20004216 	.word	0x20004216

0001df40 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1df40:	b580      	push	{r7, lr}
   1df42:	b082      	sub	sp, #8
   1df44:	af00      	add	r7, sp, #0
   1df46:	0002      	movs	r2, r0
   1df48:	1dfb      	adds	r3, r7, #7
   1df4a:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1df4c:	4b1c      	ldr	r3, [pc, #112]	; (1dfc0 <sd_mmc_wait_end_of_read_blocks+0x80>)
   1df4e:	4798      	blx	r3
   1df50:	0003      	movs	r3, r0
   1df52:	001a      	movs	r2, r3
   1df54:	2301      	movs	r3, #1
   1df56:	4053      	eors	r3, r2
   1df58:	b2db      	uxtb	r3, r3
   1df5a:	2b00      	cmp	r3, #0
   1df5c:	d001      	beq.n	1df62 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1df5e:	2305      	movs	r3, #5
   1df60:	e029      	b.n	1dfb6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1df62:	1dfb      	adds	r3, r7, #7
   1df64:	781b      	ldrb	r3, [r3, #0]
   1df66:	2b00      	cmp	r3, #0
   1df68:	d003      	beq.n	1df72 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1df6a:	4b16      	ldr	r3, [pc, #88]	; (1dfc4 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1df6c:	2200      	movs	r2, #0
   1df6e:	801a      	strh	r2, [r3, #0]
   1df70:	e005      	b.n	1df7e <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1df72:	4b14      	ldr	r3, [pc, #80]	; (1dfc4 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1df74:	881b      	ldrh	r3, [r3, #0]
   1df76:	2b00      	cmp	r3, #0
   1df78:	d001      	beq.n	1df7e <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1df7a:	2300      	movs	r3, #0
   1df7c:	e01b      	b.n	1dfb6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1df7e:	4b12      	ldr	r3, [pc, #72]	; (1dfc8 <sd_mmc_wait_end_of_read_blocks+0x88>)
   1df80:	881b      	ldrh	r3, [r3, #0]
   1df82:	2b01      	cmp	r3, #1
   1df84:	d103      	bne.n	1df8e <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1df86:	4b11      	ldr	r3, [pc, #68]	; (1dfcc <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1df88:	4798      	blx	r3
		return SD_MMC_OK;
   1df8a:	2300      	movs	r3, #0
   1df8c:	e013      	b.n	1dfb6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1df8e:	4b10      	ldr	r3, [pc, #64]	; (1dfd0 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1df90:	2100      	movs	r1, #0
   1df92:	0018      	movs	r0, r3
   1df94:	4b0f      	ldr	r3, [pc, #60]	; (1dfd4 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1df96:	4798      	blx	r3
   1df98:	0003      	movs	r3, r0
   1df9a:	001a      	movs	r2, r3
   1df9c:	2301      	movs	r3, #1
   1df9e:	4053      	eors	r3, r2
   1dfa0:	b2db      	uxtb	r3, r3
   1dfa2:	2b00      	cmp	r3, #0
   1dfa4:	d004      	beq.n	1dfb0 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1dfa6:	4b0a      	ldr	r3, [pc, #40]	; (1dfd0 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1dfa8:	2100      	movs	r1, #0
   1dfaa:	0018      	movs	r0, r3
   1dfac:	4b09      	ldr	r3, [pc, #36]	; (1dfd4 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1dfae:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1dfb0:	4b06      	ldr	r3, [pc, #24]	; (1dfcc <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1dfb2:	4798      	blx	r3
	return SD_MMC_OK;
   1dfb4:	2300      	movs	r3, #0
}
   1dfb6:	0018      	movs	r0, r3
   1dfb8:	46bd      	mov	sp, r7
   1dfba:	b002      	add	sp, #8
   1dfbc:	bd80      	pop	{r7, pc}
   1dfbe:	46c0      	nop			; (mov r8, r8)
   1dfc0:	0001efcd 	.word	0x0001efcd
   1dfc4:	20004216 	.word	0x20004216
   1dfc8:	20004214 	.word	0x20004214
   1dfcc:	0001d9d9 	.word	0x0001d9d9
   1dfd0:	0000310c 	.word	0x0000310c
   1dfd4:	0001ec31 	.word	0x0001ec31

0001dfd8 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1dfd8:	b590      	push	{r4, r7, lr}
   1dfda:	b089      	sub	sp, #36	; 0x24
   1dfdc:	af02      	add	r7, sp, #8
   1dfde:	6039      	str	r1, [r7, #0]
   1dfe0:	0011      	movs	r1, r2
   1dfe2:	1dfb      	adds	r3, r7, #7
   1dfe4:	1c02      	adds	r2, r0, #0
   1dfe6:	701a      	strb	r2, [r3, #0]
   1dfe8:	1d3b      	adds	r3, r7, #4
   1dfea:	1c0a      	adds	r2, r1, #0
   1dfec:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1dfee:	230f      	movs	r3, #15
   1dff0:	18fc      	adds	r4, r7, r3
   1dff2:	1dfb      	adds	r3, r7, #7
   1dff4:	781b      	ldrb	r3, [r3, #0]
   1dff6:	0018      	movs	r0, r3
   1dff8:	4b28      	ldr	r3, [pc, #160]	; (1e09c <sd_mmc_init_write_blocks+0xc4>)
   1dffa:	4798      	blx	r3
   1dffc:	0003      	movs	r3, r0
   1dffe:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1e000:	230f      	movs	r3, #15
   1e002:	18fb      	adds	r3, r7, r3
   1e004:	781b      	ldrb	r3, [r3, #0]
   1e006:	2b00      	cmp	r3, #0
   1e008:	d003      	beq.n	1e012 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1e00a:	230f      	movs	r3, #15
   1e00c:	18fb      	adds	r3, r7, r3
   1e00e:	781b      	ldrb	r3, [r3, #0]
   1e010:	e03f      	b.n	1e092 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1e012:	1dfb      	adds	r3, r7, #7
   1e014:	781b      	ldrb	r3, [r3, #0]
   1e016:	0018      	movs	r0, r3
   1e018:	4b21      	ldr	r3, [pc, #132]	; (1e0a0 <sd_mmc_init_write_blocks+0xc8>)
   1e01a:	4798      	blx	r3
   1e01c:	1e03      	subs	r3, r0, #0
   1e01e:	d003      	beq.n	1e028 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1e020:	4b20      	ldr	r3, [pc, #128]	; (1e0a4 <sd_mmc_init_write_blocks+0xcc>)
   1e022:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1e024:	2307      	movs	r3, #7
   1e026:	e034      	b.n	1e092 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1e028:	1d3b      	adds	r3, r7, #4
   1e02a:	881b      	ldrh	r3, [r3, #0]
   1e02c:	2b01      	cmp	r3, #1
   1e02e:	d902      	bls.n	1e036 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1e030:	4b1d      	ldr	r3, [pc, #116]	; (1e0a8 <sd_mmc_init_write_blocks+0xd0>)
   1e032:	617b      	str	r3, [r7, #20]
   1e034:	e001      	b.n	1e03a <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1e036:	4b1d      	ldr	r3, [pc, #116]	; (1e0ac <sd_mmc_init_write_blocks+0xd4>)
   1e038:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1e03a:	4b1d      	ldr	r3, [pc, #116]	; (1e0b0 <sd_mmc_init_write_blocks+0xd8>)
   1e03c:	681b      	ldr	r3, [r3, #0]
   1e03e:	7adb      	ldrb	r3, [r3, #11]
   1e040:	001a      	movs	r2, r3
   1e042:	2308      	movs	r3, #8
   1e044:	4013      	ands	r3, r2
   1e046:	d002      	beq.n	1e04e <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1e048:	683b      	ldr	r3, [r7, #0]
   1e04a:	613b      	str	r3, [r7, #16]
   1e04c:	e002      	b.n	1e054 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1e04e:	683b      	ldr	r3, [r7, #0]
   1e050:	025b      	lsls	r3, r3, #9
   1e052:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1e054:	1d3b      	adds	r3, r7, #4
   1e056:	881c      	ldrh	r4, [r3, #0]
   1e058:	2380      	movs	r3, #128	; 0x80
   1e05a:	009a      	lsls	r2, r3, #2
   1e05c:	6939      	ldr	r1, [r7, #16]
   1e05e:	6978      	ldr	r0, [r7, #20]
   1e060:	2301      	movs	r3, #1
   1e062:	9300      	str	r3, [sp, #0]
   1e064:	0023      	movs	r3, r4
   1e066:	4c13      	ldr	r4, [pc, #76]	; (1e0b4 <sd_mmc_init_write_blocks+0xdc>)
   1e068:	47a0      	blx	r4
   1e06a:	0003      	movs	r3, r0
   1e06c:	001a      	movs	r2, r3
   1e06e:	2301      	movs	r3, #1
   1e070:	4053      	eors	r3, r2
   1e072:	b2db      	uxtb	r3, r3
   1e074:	2b00      	cmp	r3, #0
   1e076:	d003      	beq.n	1e080 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1e078:	4b0a      	ldr	r3, [pc, #40]	; (1e0a4 <sd_mmc_init_write_blocks+0xcc>)
   1e07a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1e07c:	2305      	movs	r3, #5
   1e07e:	e008      	b.n	1e092 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1e080:	4b0d      	ldr	r3, [pc, #52]	; (1e0b8 <sd_mmc_init_write_blocks+0xe0>)
   1e082:	1d3a      	adds	r2, r7, #4
   1e084:	8812      	ldrh	r2, [r2, #0]
   1e086:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1e088:	4b0c      	ldr	r3, [pc, #48]	; (1e0bc <sd_mmc_init_write_blocks+0xe4>)
   1e08a:	1d3a      	adds	r2, r7, #4
   1e08c:	8812      	ldrh	r2, [r2, #0]
   1e08e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1e090:	2300      	movs	r3, #0
}
   1e092:	0018      	movs	r0, r3
   1e094:	46bd      	mov	sp, r7
   1e096:	b007      	add	sp, #28
   1e098:	bd90      	pop	{r4, r7, pc}
   1e09a:	46c0      	nop			; (mov r8, r8)
   1e09c:	0001d8dd 	.word	0x0001d8dd
   1e0a0:	0001dde5 	.word	0x0001dde5
   1e0a4:	0001d9d9 	.word	0x0001d9d9
   1e0a8:	00109119 	.word	0x00109119
   1e0ac:	00089118 	.word	0x00089118
   1e0b0:	20004210 	.word	0x20004210
   1e0b4:	0001ec59 	.word	0x0001ec59
   1e0b8:	20004216 	.word	0x20004216
   1e0bc:	20004214 	.word	0x20004214

0001e0c0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1e0c0:	b580      	push	{r7, lr}
   1e0c2:	b082      	sub	sp, #8
   1e0c4:	af00      	add	r7, sp, #0
   1e0c6:	6078      	str	r0, [r7, #4]
   1e0c8:	000a      	movs	r2, r1
   1e0ca:	1cbb      	adds	r3, r7, #2
   1e0cc:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1e0ce:	1cbb      	adds	r3, r7, #2
   1e0d0:	881a      	ldrh	r2, [r3, #0]
   1e0d2:	687b      	ldr	r3, [r7, #4]
   1e0d4:	0011      	movs	r1, r2
   1e0d6:	0018      	movs	r0, r3
   1e0d8:	4b0d      	ldr	r3, [pc, #52]	; (1e110 <sd_mmc_start_write_blocks+0x50>)
   1e0da:	4798      	blx	r3
   1e0dc:	0003      	movs	r3, r0
   1e0de:	001a      	movs	r2, r3
   1e0e0:	2301      	movs	r3, #1
   1e0e2:	4053      	eors	r3, r2
   1e0e4:	b2db      	uxtb	r3, r3
   1e0e6:	2b00      	cmp	r3, #0
   1e0e8:	d004      	beq.n	1e0f4 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1e0ea:	4b0a      	ldr	r3, [pc, #40]	; (1e114 <sd_mmc_start_write_blocks+0x54>)
   1e0ec:	2200      	movs	r2, #0
   1e0ee:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1e0f0:	2305      	movs	r3, #5
   1e0f2:	e008      	b.n	1e106 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1e0f4:	4b07      	ldr	r3, [pc, #28]	; (1e114 <sd_mmc_start_write_blocks+0x54>)
   1e0f6:	881a      	ldrh	r2, [r3, #0]
   1e0f8:	1cbb      	adds	r3, r7, #2
   1e0fa:	881b      	ldrh	r3, [r3, #0]
   1e0fc:	1ad3      	subs	r3, r2, r3
   1e0fe:	b29a      	uxth	r2, r3
   1e100:	4b04      	ldr	r3, [pc, #16]	; (1e114 <sd_mmc_start_write_blocks+0x54>)
   1e102:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1e104:	2300      	movs	r3, #0
}
   1e106:	0018      	movs	r0, r3
   1e108:	46bd      	mov	sp, r7
   1e10a:	b002      	add	sp, #8
   1e10c:	bd80      	pop	{r7, pc}
   1e10e:	46c0      	nop			; (mov r8, r8)
   1e110:	0001efd9 	.word	0x0001efd9
   1e114:	20004216 	.word	0x20004216

0001e118 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1e118:	b580      	push	{r7, lr}
   1e11a:	b082      	sub	sp, #8
   1e11c:	af00      	add	r7, sp, #0
   1e11e:	0002      	movs	r2, r0
   1e120:	1dfb      	adds	r3, r7, #7
   1e122:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1e124:	4b13      	ldr	r3, [pc, #76]	; (1e174 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1e126:	4798      	blx	r3
   1e128:	0003      	movs	r3, r0
   1e12a:	001a      	movs	r2, r3
   1e12c:	2301      	movs	r3, #1
   1e12e:	4053      	eors	r3, r2
   1e130:	b2db      	uxtb	r3, r3
   1e132:	2b00      	cmp	r3, #0
   1e134:	d001      	beq.n	1e13a <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1e136:	2305      	movs	r3, #5
   1e138:	e018      	b.n	1e16c <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1e13a:	1dfb      	adds	r3, r7, #7
   1e13c:	781b      	ldrb	r3, [r3, #0]
   1e13e:	2b00      	cmp	r3, #0
   1e140:	d003      	beq.n	1e14a <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1e142:	4b0d      	ldr	r3, [pc, #52]	; (1e178 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1e144:	2200      	movs	r2, #0
   1e146:	801a      	strh	r2, [r3, #0]
   1e148:	e005      	b.n	1e156 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1e14a:	4b0b      	ldr	r3, [pc, #44]	; (1e178 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1e14c:	881b      	ldrh	r3, [r3, #0]
   1e14e:	2b00      	cmp	r3, #0
   1e150:	d001      	beq.n	1e156 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1e152:	2300      	movs	r3, #0
   1e154:	e00a      	b.n	1e16c <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1e156:	4b09      	ldr	r3, [pc, #36]	; (1e17c <sd_mmc_wait_end_of_write_blocks+0x64>)
   1e158:	881b      	ldrh	r3, [r3, #0]
   1e15a:	2b01      	cmp	r3, #1
   1e15c:	d103      	bne.n	1e166 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1e15e:	4b08      	ldr	r3, [pc, #32]	; (1e180 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1e160:	4798      	blx	r3
		return SD_MMC_OK;
   1e162:	2300      	movs	r3, #0
   1e164:	e002      	b.n	1e16c <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1e166:	4b06      	ldr	r3, [pc, #24]	; (1e180 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1e168:	4798      	blx	r3
	return SD_MMC_OK;
   1e16a:	2300      	movs	r3, #0
}
   1e16c:	0018      	movs	r0, r3
   1e16e:	46bd      	mov	sp, r7
   1e170:	b002      	add	sp, #8
   1e172:	bd80      	pop	{r7, pc}
   1e174:	0001f099 	.word	0x0001f099
   1e178:	20004216 	.word	0x20004216
   1e17c:	20004214 	.word	0x20004214
   1e180:	0001d9d9 	.word	0x0001d9d9

0001e184 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1e184:	b580      	push	{r7, lr}
   1e186:	b082      	sub	sp, #8
   1e188:	af00      	add	r7, sp, #0
   1e18a:	0002      	movs	r2, r0
   1e18c:	1dfb      	adds	r3, r7, #7
   1e18e:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   1e190:	1dfb      	adds	r3, r7, #7
   1e192:	781b      	ldrb	r3, [r3, #0]
   1e194:	0018      	movs	r0, r3
   1e196:	4b16      	ldr	r3, [pc, #88]	; (1e1f0 <sd_mmc_test_unit_ready+0x6c>)
   1e198:	4798      	blx	r3
   1e19a:	0003      	movs	r3, r0
   1e19c:	2b01      	cmp	r3, #1
   1e19e:	d019      	beq.n	1e1d4 <sd_mmc_test_unit_ready+0x50>
   1e1a0:	2b02      	cmp	r3, #2
   1e1a2:	d019      	beq.n	1e1d8 <sd_mmc_test_unit_ready+0x54>
   1e1a4:	2b00      	cmp	r3, #0
   1e1a6:	d11e      	bne.n	1e1e6 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   1e1a8:	1dfb      	adds	r3, r7, #7
   1e1aa:	781b      	ldrb	r3, [r3, #0]
   1e1ac:	4a11      	ldr	r2, [pc, #68]	; (1e1f4 <sd_mmc_test_unit_ready+0x70>)
   1e1ae:	5cd3      	ldrb	r3, [r2, r3]
   1e1b0:	2b00      	cmp	r3, #0
   1e1b2:	d001      	beq.n	1e1b8 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   1e1b4:	2302      	movs	r3, #2
   1e1b6:	e017      	b.n	1e1e8 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1e1b8:	1dfb      	adds	r3, r7, #7
   1e1ba:	781b      	ldrb	r3, [r3, #0]
   1e1bc:	0018      	movs	r0, r3
   1e1be:	4b0e      	ldr	r3, [pc, #56]	; (1e1f8 <sd_mmc_test_unit_ready+0x74>)
   1e1c0:	4798      	blx	r3
   1e1c2:	0003      	movs	r3, r0
   1e1c4:	001a      	movs	r2, r3
   1e1c6:	2303      	movs	r3, #3
   1e1c8:	4013      	ands	r3, r2
   1e1ca:	d001      	beq.n	1e1d0 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   1e1cc:	2300      	movs	r3, #0
   1e1ce:	e00b      	b.n	1e1e8 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   1e1d0:	2302      	movs	r3, #2
   1e1d2:	e009      	b.n	1e1e8 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   1e1d4:	2303      	movs	r3, #3
   1e1d6:	e007      	b.n	1e1e8 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   1e1d8:	1dfb      	adds	r3, r7, #7
   1e1da:	781b      	ldrb	r3, [r3, #0]
   1e1dc:	4a05      	ldr	r2, [pc, #20]	; (1e1f4 <sd_mmc_test_unit_ready+0x70>)
   1e1de:	2100      	movs	r1, #0
   1e1e0:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   1e1e2:	2302      	movs	r3, #2
   1e1e4:	e000      	b.n	1e1e8 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   1e1e6:	2301      	movs	r3, #1
	}
}
   1e1e8:	0018      	movs	r0, r3
   1e1ea:	46bd      	mov	sp, r7
   1e1ec:	b002      	add	sp, #8
   1e1ee:	bd80      	pop	{r7, pc}
   1e1f0:	0001dcf9 	.word	0x0001dcf9
   1e1f4:	20004218 	.word	0x20004218
   1e1f8:	0001dd6d 	.word	0x0001dd6d

0001e1fc <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1e1fc:	b580      	push	{r7, lr}
   1e1fe:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   1e200:	2000      	movs	r0, #0
   1e202:	4b03      	ldr	r3, [pc, #12]	; (1e210 <sd_mmc_test_unit_ready_0+0x14>)
   1e204:	4798      	blx	r3
   1e206:	0003      	movs	r3, r0
}
   1e208:	0018      	movs	r0, r3
   1e20a:	46bd      	mov	sp, r7
   1e20c:	bd80      	pop	{r7, pc}
   1e20e:	46c0      	nop			; (mov r8, r8)
   1e210:	0001e185 	.word	0x0001e185

0001e214 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1e214:	b580      	push	{r7, lr}
   1e216:	b082      	sub	sp, #8
   1e218:	af00      	add	r7, sp, #0
   1e21a:	0002      	movs	r2, r0
   1e21c:	6039      	str	r1, [r7, #0]
   1e21e:	1dfb      	adds	r3, r7, #7
   1e220:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   1e222:	1dfb      	adds	r3, r7, #7
   1e224:	781b      	ldrb	r3, [r3, #0]
   1e226:	0018      	movs	r0, r3
   1e228:	4b08      	ldr	r3, [pc, #32]	; (1e24c <sd_mmc_read_capacity+0x38>)
   1e22a:	4798      	blx	r3
   1e22c:	0003      	movs	r3, r0
   1e22e:	005b      	lsls	r3, r3, #1
   1e230:	1e5a      	subs	r2, r3, #1
   1e232:	683b      	ldr	r3, [r7, #0]
   1e234:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   1e236:	1dfb      	adds	r3, r7, #7
   1e238:	781b      	ldrb	r3, [r3, #0]
   1e23a:	0018      	movs	r0, r3
   1e23c:	4b04      	ldr	r3, [pc, #16]	; (1e250 <sd_mmc_read_capacity+0x3c>)
   1e23e:	4798      	blx	r3
   1e240:	0003      	movs	r3, r0
}
   1e242:	0018      	movs	r0, r3
   1e244:	46bd      	mov	sp, r7
   1e246:	b002      	add	sp, #8
   1e248:	bd80      	pop	{r7, pc}
   1e24a:	46c0      	nop			; (mov r8, r8)
   1e24c:	0001dda9 	.word	0x0001dda9
   1e250:	0001e185 	.word	0x0001e185

0001e254 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1e254:	b580      	push	{r7, lr}
   1e256:	b082      	sub	sp, #8
   1e258:	af00      	add	r7, sp, #0
   1e25a:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   1e25c:	687b      	ldr	r3, [r7, #4]
   1e25e:	0019      	movs	r1, r3
   1e260:	2000      	movs	r0, #0
   1e262:	4b03      	ldr	r3, [pc, #12]	; (1e270 <sd_mmc_read_capacity_0+0x1c>)
   1e264:	4798      	blx	r3
   1e266:	0003      	movs	r3, r0
}
   1e268:	0018      	movs	r0, r3
   1e26a:	46bd      	mov	sp, r7
   1e26c:	b002      	add	sp, #8
   1e26e:	bd80      	pop	{r7, pc}
   1e270:	0001e215 	.word	0x0001e215

0001e274 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   1e274:	b580      	push	{r7, lr}
   1e276:	b082      	sub	sp, #8
   1e278:	af00      	add	r7, sp, #0
   1e27a:	0002      	movs	r2, r0
   1e27c:	1dfb      	adds	r3, r7, #7
   1e27e:	701a      	strb	r2, [r3, #0]
   1e280:	1dbb      	adds	r3, r7, #6
   1e282:	1c0a      	adds	r2, r1, #0
   1e284:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   1e286:	1dfb      	adds	r3, r7, #7
   1e288:	781b      	ldrb	r3, [r3, #0]
   1e28a:	4a04      	ldr	r2, [pc, #16]	; (1e29c <sd_mmc_unload+0x28>)
   1e28c:	1db9      	adds	r1, r7, #6
   1e28e:	7809      	ldrb	r1, [r1, #0]
   1e290:	54d1      	strb	r1, [r2, r3]
	return true;
   1e292:	2301      	movs	r3, #1
}
   1e294:	0018      	movs	r0, r3
   1e296:	46bd      	mov	sp, r7
   1e298:	b002      	add	sp, #8
   1e29a:	bd80      	pop	{r7, pc}
   1e29c:	20004218 	.word	0x20004218

0001e2a0 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   1e2a0:	b580      	push	{r7, lr}
   1e2a2:	b082      	sub	sp, #8
   1e2a4:	af00      	add	r7, sp, #0
   1e2a6:	0002      	movs	r2, r0
   1e2a8:	1dfb      	adds	r3, r7, #7
   1e2aa:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   1e2ac:	1dfb      	adds	r3, r7, #7
   1e2ae:	781b      	ldrb	r3, [r3, #0]
   1e2b0:	0019      	movs	r1, r3
   1e2b2:	2000      	movs	r0, #0
   1e2b4:	4b03      	ldr	r3, [pc, #12]	; (1e2c4 <sd_mmc_unload_0+0x24>)
   1e2b6:	4798      	blx	r3
   1e2b8:	0003      	movs	r3, r0
}
   1e2ba:	0018      	movs	r0, r3
   1e2bc:	46bd      	mov	sp, r7
   1e2be:	b002      	add	sp, #8
   1e2c0:	bd80      	pop	{r7, pc}
   1e2c2:	46c0      	nop			; (mov r8, r8)
   1e2c4:	0001e275 	.word	0x0001e275

0001e2c8 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   1e2c8:	b580      	push	{r7, lr}
   1e2ca:	b082      	sub	sp, #8
   1e2cc:	af00      	add	r7, sp, #0
   1e2ce:	0002      	movs	r2, r0
   1e2d0:	1dfb      	adds	r3, r7, #7
   1e2d2:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   1e2d4:	1dfb      	adds	r3, r7, #7
   1e2d6:	781b      	ldrb	r3, [r3, #0]
   1e2d8:	0018      	movs	r0, r3
   1e2da:	4b03      	ldr	r3, [pc, #12]	; (1e2e8 <sd_mmc_wr_protect+0x20>)
   1e2dc:	4798      	blx	r3
   1e2de:	0003      	movs	r3, r0
}
   1e2e0:	0018      	movs	r0, r3
   1e2e2:	46bd      	mov	sp, r7
   1e2e4:	b002      	add	sp, #8
   1e2e6:	bd80      	pop	{r7, pc}
   1e2e8:	0001dde5 	.word	0x0001dde5

0001e2ec <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   1e2ec:	b580      	push	{r7, lr}
   1e2ee:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   1e2f0:	2000      	movs	r0, #0
   1e2f2:	4b03      	ldr	r3, [pc, #12]	; (1e300 <sd_mmc_wr_protect_0+0x14>)
   1e2f4:	4798      	blx	r3
   1e2f6:	0003      	movs	r3, r0
}
   1e2f8:	0018      	movs	r0, r3
   1e2fa:	46bd      	mov	sp, r7
   1e2fc:	bd80      	pop	{r7, pc}
   1e2fe:	46c0      	nop			; (mov r8, r8)
   1e300:	0001e2c9 	.word	0x0001e2c9

0001e304 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   1e304:	b580      	push	{r7, lr}
   1e306:	b082      	sub	sp, #8
   1e308:	af00      	add	r7, sp, #0
   1e30a:	0002      	movs	r2, r0
   1e30c:	1dfb      	adds	r3, r7, #7
   1e30e:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   1e310:	2301      	movs	r3, #1
}
   1e312:	0018      	movs	r0, r3
   1e314:	46bd      	mov	sp, r7
   1e316:	b002      	add	sp, #8
   1e318:	bd80      	pop	{r7, pc}
	...

0001e31c <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   1e31c:	b580      	push	{r7, lr}
   1e31e:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   1e320:	2000      	movs	r0, #0
   1e322:	4b03      	ldr	r3, [pc, #12]	; (1e330 <sd_mmc_removal_0+0x14>)
   1e324:	4798      	blx	r3
   1e326:	0003      	movs	r3, r0
}
   1e328:	0018      	movs	r0, r3
   1e32a:	46bd      	mov	sp, r7
   1e32c:	bd80      	pop	{r7, pc}
   1e32e:	46c0      	nop			; (mov r8, r8)
   1e330:	0001e305 	.word	0x0001e305

0001e334 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   1e334:	b580      	push	{r7, lr}
   1e336:	b084      	sub	sp, #16
   1e338:	af00      	add	r7, sp, #0
   1e33a:	60b9      	str	r1, [r7, #8]
   1e33c:	607a      	str	r2, [r7, #4]
   1e33e:	230f      	movs	r3, #15
   1e340:	18fb      	adds	r3, r7, r3
   1e342:	1c02      	adds	r2, r0, #0
   1e344:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   1e346:	68b9      	ldr	r1, [r7, #8]
   1e348:	230f      	movs	r3, #15
   1e34a:	18fb      	adds	r3, r7, r3
   1e34c:	781b      	ldrb	r3, [r3, #0]
   1e34e:	2201      	movs	r2, #1
   1e350:	0018      	movs	r0, r3
   1e352:	4b10      	ldr	r3, [pc, #64]	; (1e394 <sd_mmc_mem_2_ram+0x60>)
   1e354:	4798      	blx	r3
   1e356:	1e03      	subs	r3, r0, #0
   1e358:	d005      	beq.n	1e366 <sd_mmc_mem_2_ram+0x32>
   1e35a:	2b02      	cmp	r3, #2
   1e35c:	d101      	bne.n	1e362 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1e35e:	2302      	movs	r3, #2
   1e360:	e013      	b.n	1e38a <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   1e362:	2301      	movs	r3, #1
   1e364:	e011      	b.n	1e38a <sd_mmc_mem_2_ram+0x56>
		break;
   1e366:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1e368:	687b      	ldr	r3, [r7, #4]
   1e36a:	2101      	movs	r1, #1
   1e36c:	0018      	movs	r0, r3
   1e36e:	4b0a      	ldr	r3, [pc, #40]	; (1e398 <sd_mmc_mem_2_ram+0x64>)
   1e370:	4798      	blx	r3
   1e372:	1e03      	subs	r3, r0, #0
   1e374:	d001      	beq.n	1e37a <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   1e376:	2301      	movs	r3, #1
   1e378:	e007      	b.n	1e38a <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1e37a:	2000      	movs	r0, #0
   1e37c:	4b07      	ldr	r3, [pc, #28]	; (1e39c <sd_mmc_mem_2_ram+0x68>)
   1e37e:	4798      	blx	r3
   1e380:	1e03      	subs	r3, r0, #0
   1e382:	d001      	beq.n	1e388 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   1e384:	2301      	movs	r3, #1
   1e386:	e000      	b.n	1e38a <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   1e388:	2300      	movs	r3, #0
}
   1e38a:	0018      	movs	r0, r3
   1e38c:	46bd      	mov	sp, r7
   1e38e:	b004      	add	sp, #16
   1e390:	bd80      	pop	{r7, pc}
   1e392:	46c0      	nop			; (mov r8, r8)
   1e394:	0001ddfd 	.word	0x0001ddfd
   1e398:	0001dee9 	.word	0x0001dee9
   1e39c:	0001df41 	.word	0x0001df41

0001e3a0 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   1e3a0:	b580      	push	{r7, lr}
   1e3a2:	b082      	sub	sp, #8
   1e3a4:	af00      	add	r7, sp, #0
   1e3a6:	6078      	str	r0, [r7, #4]
   1e3a8:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   1e3aa:	683a      	ldr	r2, [r7, #0]
   1e3ac:	687b      	ldr	r3, [r7, #4]
   1e3ae:	0019      	movs	r1, r3
   1e3b0:	2000      	movs	r0, #0
   1e3b2:	4b03      	ldr	r3, [pc, #12]	; (1e3c0 <sd_mmc_mem_2_ram_0+0x20>)
   1e3b4:	4798      	blx	r3
   1e3b6:	0003      	movs	r3, r0
}
   1e3b8:	0018      	movs	r0, r3
   1e3ba:	46bd      	mov	sp, r7
   1e3bc:	b002      	add	sp, #8
   1e3be:	bd80      	pop	{r7, pc}
   1e3c0:	0001e335 	.word	0x0001e335

0001e3c4 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   1e3c4:	b580      	push	{r7, lr}
   1e3c6:	b084      	sub	sp, #16
   1e3c8:	af00      	add	r7, sp, #0
   1e3ca:	60b9      	str	r1, [r7, #8]
   1e3cc:	607a      	str	r2, [r7, #4]
   1e3ce:	230f      	movs	r3, #15
   1e3d0:	18fb      	adds	r3, r7, r3
   1e3d2:	1c02      	adds	r2, r0, #0
   1e3d4:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1e3d6:	68b9      	ldr	r1, [r7, #8]
   1e3d8:	230f      	movs	r3, #15
   1e3da:	18fb      	adds	r3, r7, r3
   1e3dc:	781b      	ldrb	r3, [r3, #0]
   1e3de:	2201      	movs	r2, #1
   1e3e0:	0018      	movs	r0, r3
   1e3e2:	4b10      	ldr	r3, [pc, #64]	; (1e424 <sd_mmc_ram_2_mem+0x60>)
   1e3e4:	4798      	blx	r3
   1e3e6:	1e03      	subs	r3, r0, #0
   1e3e8:	d005      	beq.n	1e3f6 <sd_mmc_ram_2_mem+0x32>
   1e3ea:	2b02      	cmp	r3, #2
   1e3ec:	d101      	bne.n	1e3f2 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1e3ee:	2302      	movs	r3, #2
   1e3f0:	e013      	b.n	1e41a <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   1e3f2:	2301      	movs	r3, #1
   1e3f4:	e011      	b.n	1e41a <sd_mmc_ram_2_mem+0x56>
		break;
   1e3f6:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   1e3f8:	687b      	ldr	r3, [r7, #4]
   1e3fa:	2101      	movs	r1, #1
   1e3fc:	0018      	movs	r0, r3
   1e3fe:	4b0a      	ldr	r3, [pc, #40]	; (1e428 <sd_mmc_ram_2_mem+0x64>)
   1e400:	4798      	blx	r3
   1e402:	1e03      	subs	r3, r0, #0
   1e404:	d001      	beq.n	1e40a <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   1e406:	2301      	movs	r3, #1
   1e408:	e007      	b.n	1e41a <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1e40a:	2000      	movs	r0, #0
   1e40c:	4b07      	ldr	r3, [pc, #28]	; (1e42c <sd_mmc_ram_2_mem+0x68>)
   1e40e:	4798      	blx	r3
   1e410:	1e03      	subs	r3, r0, #0
   1e412:	d001      	beq.n	1e418 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   1e414:	2301      	movs	r3, #1
   1e416:	e000      	b.n	1e41a <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   1e418:	2300      	movs	r3, #0
}
   1e41a:	0018      	movs	r0, r3
   1e41c:	46bd      	mov	sp, r7
   1e41e:	b004      	add	sp, #16
   1e420:	bd80      	pop	{r7, pc}
   1e422:	46c0      	nop			; (mov r8, r8)
   1e424:	0001dfd9 	.word	0x0001dfd9
   1e428:	0001e0c1 	.word	0x0001e0c1
   1e42c:	0001e119 	.word	0x0001e119

0001e430 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   1e430:	b580      	push	{r7, lr}
   1e432:	b082      	sub	sp, #8
   1e434:	af00      	add	r7, sp, #0
   1e436:	6078      	str	r0, [r7, #4]
   1e438:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   1e43a:	683a      	ldr	r2, [r7, #0]
   1e43c:	687b      	ldr	r3, [r7, #4]
   1e43e:	0019      	movs	r1, r3
   1e440:	2000      	movs	r0, #0
   1e442:	4b03      	ldr	r3, [pc, #12]	; (1e450 <sd_mmc_ram_2_mem_0+0x20>)
   1e444:	4798      	blx	r3
   1e446:	0003      	movs	r3, r0
}
   1e448:	0018      	movs	r0, r3
   1e44a:	46bd      	mov	sp, r7
   1e44c:	b002      	add	sp, #8
   1e44e:	bd80      	pop	{r7, pc}
   1e450:	0001e3c5 	.word	0x0001e3c5

0001e454 <system_pinmux_get_group_from_gpio_pin>:
{
   1e454:	b580      	push	{r7, lr}
   1e456:	b084      	sub	sp, #16
   1e458:	af00      	add	r7, sp, #0
   1e45a:	0002      	movs	r2, r0
   1e45c:	1dfb      	adds	r3, r7, #7
   1e45e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1e460:	230f      	movs	r3, #15
   1e462:	18fb      	adds	r3, r7, r3
   1e464:	1dfa      	adds	r2, r7, #7
   1e466:	7812      	ldrb	r2, [r2, #0]
   1e468:	09d2      	lsrs	r2, r2, #7
   1e46a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1e46c:	230e      	movs	r3, #14
   1e46e:	18fb      	adds	r3, r7, r3
   1e470:	1dfa      	adds	r2, r7, #7
   1e472:	7812      	ldrb	r2, [r2, #0]
   1e474:	0952      	lsrs	r2, r2, #5
   1e476:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1e478:	4b0d      	ldr	r3, [pc, #52]	; (1e4b0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1e47a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1e47c:	230f      	movs	r3, #15
   1e47e:	18fb      	adds	r3, r7, r3
   1e480:	781b      	ldrb	r3, [r3, #0]
   1e482:	2b00      	cmp	r3, #0
   1e484:	d10f      	bne.n	1e4a6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1e486:	230f      	movs	r3, #15
   1e488:	18fb      	adds	r3, r7, r3
   1e48a:	781b      	ldrb	r3, [r3, #0]
   1e48c:	009b      	lsls	r3, r3, #2
   1e48e:	2210      	movs	r2, #16
   1e490:	4694      	mov	ip, r2
   1e492:	44bc      	add	ip, r7
   1e494:	4463      	add	r3, ip
   1e496:	3b08      	subs	r3, #8
   1e498:	681a      	ldr	r2, [r3, #0]
   1e49a:	230e      	movs	r3, #14
   1e49c:	18fb      	adds	r3, r7, r3
   1e49e:	781b      	ldrb	r3, [r3, #0]
   1e4a0:	01db      	lsls	r3, r3, #7
   1e4a2:	18d3      	adds	r3, r2, r3
   1e4a4:	e000      	b.n	1e4a8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1e4a6:	2300      	movs	r3, #0
}
   1e4a8:	0018      	movs	r0, r3
   1e4aa:	46bd      	mov	sp, r7
   1e4ac:	b004      	add	sp, #16
   1e4ae:	bd80      	pop	{r7, pc}
   1e4b0:	41004400 	.word	0x41004400

0001e4b4 <system_interrupt_enable>:
{
   1e4b4:	b580      	push	{r7, lr}
   1e4b6:	b082      	sub	sp, #8
   1e4b8:	af00      	add	r7, sp, #0
   1e4ba:	0002      	movs	r2, r0
   1e4bc:	1dfb      	adds	r3, r7, #7
   1e4be:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e4c0:	4b06      	ldr	r3, [pc, #24]	; (1e4dc <system_interrupt_enable+0x28>)
   1e4c2:	1dfa      	adds	r2, r7, #7
   1e4c4:	7812      	ldrb	r2, [r2, #0]
   1e4c6:	0011      	movs	r1, r2
   1e4c8:	221f      	movs	r2, #31
   1e4ca:	400a      	ands	r2, r1
   1e4cc:	2101      	movs	r1, #1
   1e4ce:	4091      	lsls	r1, r2
   1e4d0:	000a      	movs	r2, r1
   1e4d2:	601a      	str	r2, [r3, #0]
}
   1e4d4:	46c0      	nop			; (mov r8, r8)
   1e4d6:	46bd      	mov	sp, r7
   1e4d8:	b002      	add	sp, #8
   1e4da:	bd80      	pop	{r7, pc}
   1e4dc:	e000e100 	.word	0xe000e100

0001e4e0 <port_get_group_from_gpio_pin>:
{
   1e4e0:	b580      	push	{r7, lr}
   1e4e2:	b082      	sub	sp, #8
   1e4e4:	af00      	add	r7, sp, #0
   1e4e6:	0002      	movs	r2, r0
   1e4e8:	1dfb      	adds	r3, r7, #7
   1e4ea:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1e4ec:	1dfb      	adds	r3, r7, #7
   1e4ee:	781b      	ldrb	r3, [r3, #0]
   1e4f0:	0018      	movs	r0, r3
   1e4f2:	4b03      	ldr	r3, [pc, #12]	; (1e500 <port_get_group_from_gpio_pin+0x20>)
   1e4f4:	4798      	blx	r3
   1e4f6:	0003      	movs	r3, r0
}
   1e4f8:	0018      	movs	r0, r3
   1e4fa:	46bd      	mov	sp, r7
   1e4fc:	b002      	add	sp, #8
   1e4fe:	bd80      	pop	{r7, pc}
   1e500:	0001e455 	.word	0x0001e455

0001e504 <port_get_config_defaults>:
{
   1e504:	b580      	push	{r7, lr}
   1e506:	b082      	sub	sp, #8
   1e508:	af00      	add	r7, sp, #0
   1e50a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1e50c:	687b      	ldr	r3, [r7, #4]
   1e50e:	2200      	movs	r2, #0
   1e510:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1e512:	687b      	ldr	r3, [r7, #4]
   1e514:	2201      	movs	r2, #1
   1e516:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1e518:	687b      	ldr	r3, [r7, #4]
   1e51a:	2200      	movs	r2, #0
   1e51c:	709a      	strb	r2, [r3, #2]
}
   1e51e:	46c0      	nop			; (mov r8, r8)
   1e520:	46bd      	mov	sp, r7
   1e522:	b002      	add	sp, #8
   1e524:	bd80      	pop	{r7, pc}
	...

0001e528 <port_pin_set_output_level>:
{
   1e528:	b580      	push	{r7, lr}
   1e52a:	b084      	sub	sp, #16
   1e52c:	af00      	add	r7, sp, #0
   1e52e:	0002      	movs	r2, r0
   1e530:	1dfb      	adds	r3, r7, #7
   1e532:	701a      	strb	r2, [r3, #0]
   1e534:	1dbb      	adds	r3, r7, #6
   1e536:	1c0a      	adds	r2, r1, #0
   1e538:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1e53a:	1dfb      	adds	r3, r7, #7
   1e53c:	781b      	ldrb	r3, [r3, #0]
   1e53e:	0018      	movs	r0, r3
   1e540:	4b0d      	ldr	r3, [pc, #52]	; (1e578 <port_pin_set_output_level+0x50>)
   1e542:	4798      	blx	r3
   1e544:	0003      	movs	r3, r0
   1e546:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1e548:	1dfb      	adds	r3, r7, #7
   1e54a:	781b      	ldrb	r3, [r3, #0]
   1e54c:	221f      	movs	r2, #31
   1e54e:	4013      	ands	r3, r2
   1e550:	2201      	movs	r2, #1
   1e552:	409a      	lsls	r2, r3
   1e554:	0013      	movs	r3, r2
   1e556:	60bb      	str	r3, [r7, #8]
	if (level) {
   1e558:	1dbb      	adds	r3, r7, #6
   1e55a:	781b      	ldrb	r3, [r3, #0]
   1e55c:	2b00      	cmp	r3, #0
   1e55e:	d003      	beq.n	1e568 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1e560:	68fb      	ldr	r3, [r7, #12]
   1e562:	68ba      	ldr	r2, [r7, #8]
   1e564:	619a      	str	r2, [r3, #24]
}
   1e566:	e002      	b.n	1e56e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1e568:	68fb      	ldr	r3, [r7, #12]
   1e56a:	68ba      	ldr	r2, [r7, #8]
   1e56c:	615a      	str	r2, [r3, #20]
}
   1e56e:	46c0      	nop			; (mov r8, r8)
   1e570:	46bd      	mov	sp, r7
   1e572:	b004      	add	sp, #16
   1e574:	bd80      	pop	{r7, pc}
   1e576:	46c0      	nop			; (mov r8, r8)
   1e578:	0001e4e1 	.word	0x0001e4e1

0001e57c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   1e57c:	b580      	push	{r7, lr}
   1e57e:	b084      	sub	sp, #16
   1e580:	af00      	add	r7, sp, #0
   1e582:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1e584:	687b      	ldr	r3, [r7, #4]
   1e586:	681b      	ldr	r3, [r3, #0]
   1e588:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   1e58a:	68fb      	ldr	r3, [r7, #12]
   1e58c:	69db      	ldr	r3, [r3, #28]
   1e58e:	1e5a      	subs	r2, r3, #1
   1e590:	4193      	sbcs	r3, r2
   1e592:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   1e594:	0018      	movs	r0, r3
   1e596:	46bd      	mov	sp, r7
   1e598:	b004      	add	sp, #16
   1e59a:	bd80      	pop	{r7, pc}

0001e59c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   1e59c:	b580      	push	{r7, lr}
   1e59e:	b082      	sub	sp, #8
   1e5a0:	af00      	add	r7, sp, #0
   1e5a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   1e5a4:	687b      	ldr	r3, [r7, #4]
   1e5a6:	2201      	movs	r2, #1
   1e5a8:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1e5aa:	687b      	ldr	r3, [r7, #4]
   1e5ac:	2200      	movs	r2, #0
   1e5ae:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1e5b0:	687b      	ldr	r3, [r7, #4]
   1e5b2:	2200      	movs	r2, #0
   1e5b4:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1e5b6:	687b      	ldr	r3, [r7, #4]
   1e5b8:	22c0      	movs	r2, #192	; 0xc0
   1e5ba:	0392      	lsls	r2, r2, #14
   1e5bc:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1e5be:	687b      	ldr	r3, [r7, #4]
   1e5c0:	2200      	movs	r2, #0
   1e5c2:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1e5c4:	687b      	ldr	r3, [r7, #4]
   1e5c6:	2200      	movs	r2, #0
   1e5c8:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1e5ca:	687b      	ldr	r3, [r7, #4]
   1e5cc:	2201      	movs	r2, #1
   1e5ce:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   1e5d0:	687b      	ldr	r3, [r7, #4]
   1e5d2:	2201      	movs	r2, #1
   1e5d4:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   1e5d6:	687b      	ldr	r3, [r7, #4]
   1e5d8:	2200      	movs	r2, #0
   1e5da:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   1e5dc:	687b      	ldr	r3, [r7, #4]
   1e5de:	2224      	movs	r2, #36	; 0x24
   1e5e0:	2100      	movs	r1, #0
   1e5e2:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1e5e4:	687b      	ldr	r3, [r7, #4]
   1e5e6:	3318      	adds	r3, #24
   1e5e8:	220c      	movs	r2, #12
   1e5ea:	2100      	movs	r1, #0
   1e5ec:	0018      	movs	r0, r3
   1e5ee:	4b0a      	ldr	r3, [pc, #40]	; (1e618 <spi_get_config_defaults+0x7c>)
   1e5f0:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   1e5f2:	687b      	ldr	r3, [r7, #4]
   1e5f4:	4a09      	ldr	r2, [pc, #36]	; (1e61c <spi_get_config_defaults+0x80>)
   1e5f6:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1e5f8:	687b      	ldr	r3, [r7, #4]
   1e5fa:	2200      	movs	r2, #0
   1e5fc:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1e5fe:	687b      	ldr	r3, [r7, #4]
   1e600:	2200      	movs	r2, #0
   1e602:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1e604:	687b      	ldr	r3, [r7, #4]
   1e606:	2200      	movs	r2, #0
   1e608:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1e60a:	687b      	ldr	r3, [r7, #4]
   1e60c:	2200      	movs	r2, #0
   1e60e:	635a      	str	r2, [r3, #52]	; 0x34

};
   1e610:	46c0      	nop			; (mov r8, r8)
   1e612:	46bd      	mov	sp, r7
   1e614:	b002      	add	sp, #8
   1e616:	bd80      	pop	{r7, pc}
   1e618:	0003457f 	.word	0x0003457f
   1e61c:	000186a0 	.word	0x000186a0

0001e620 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   1e620:	b580      	push	{r7, lr}
   1e622:	b082      	sub	sp, #8
   1e624:	af00      	add	r7, sp, #0
   1e626:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   1e628:	687b      	ldr	r3, [r7, #4]
   1e62a:	220a      	movs	r2, #10
   1e62c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1e62e:	687b      	ldr	r3, [r7, #4]
   1e630:	2200      	movs	r2, #0
   1e632:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1e634:	687b      	ldr	r3, [r7, #4]
   1e636:	2200      	movs	r2, #0
   1e638:	709a      	strb	r2, [r3, #2]
}
   1e63a:	46c0      	nop			; (mov r8, r8)
   1e63c:	46bd      	mov	sp, r7
   1e63e:	b002      	add	sp, #8
   1e640:	bd80      	pop	{r7, pc}
	...

0001e644 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   1e644:	b580      	push	{r7, lr}
   1e646:	b084      	sub	sp, #16
   1e648:	af00      	add	r7, sp, #0
   1e64a:	6078      	str	r0, [r7, #4]
   1e64c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   1e64e:	683b      	ldr	r3, [r7, #0]
   1e650:	781a      	ldrb	r2, [r3, #0]
   1e652:	687b      	ldr	r3, [r7, #4]
   1e654:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1e656:	683b      	ldr	r3, [r7, #0]
   1e658:	785a      	ldrb	r2, [r3, #1]
   1e65a:	687b      	ldr	r3, [r7, #4]
   1e65c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1e65e:	683b      	ldr	r3, [r7, #0]
   1e660:	789a      	ldrb	r2, [r3, #2]
   1e662:	687b      	ldr	r3, [r7, #4]
   1e664:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1e666:	230c      	movs	r3, #12
   1e668:	18fb      	adds	r3, r7, r3
   1e66a:	0018      	movs	r0, r3
   1e66c:	4b0b      	ldr	r3, [pc, #44]	; (1e69c <spi_attach_slave+0x58>)
   1e66e:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1e670:	230c      	movs	r3, #12
   1e672:	18fb      	adds	r3, r7, r3
   1e674:	2201      	movs	r2, #1
   1e676:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1e678:	687b      	ldr	r3, [r7, #4]
   1e67a:	781b      	ldrb	r3, [r3, #0]
   1e67c:	220c      	movs	r2, #12
   1e67e:	18ba      	adds	r2, r7, r2
   1e680:	0011      	movs	r1, r2
   1e682:	0018      	movs	r0, r3
   1e684:	4b06      	ldr	r3, [pc, #24]	; (1e6a0 <spi_attach_slave+0x5c>)
   1e686:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1e688:	687b      	ldr	r3, [r7, #4]
   1e68a:	781b      	ldrb	r3, [r3, #0]
   1e68c:	2101      	movs	r1, #1
   1e68e:	0018      	movs	r0, r3
   1e690:	4b04      	ldr	r3, [pc, #16]	; (1e6a4 <spi_attach_slave+0x60>)
   1e692:	4798      	blx	r3
}
   1e694:	46c0      	nop			; (mov r8, r8)
   1e696:	46bd      	mov	sp, r7
   1e698:	b004      	add	sp, #16
   1e69a:	bd80      	pop	{r7, pc}
   1e69c:	0001e505 	.word	0x0001e505
   1e6a0:	00025a4d 	.word	0x00025a4d
   1e6a4:	0001e529 	.word	0x0001e529

0001e6a8 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   1e6a8:	b580      	push	{r7, lr}
   1e6aa:	b084      	sub	sp, #16
   1e6ac:	af00      	add	r7, sp, #0
   1e6ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1e6b0:	687b      	ldr	r3, [r7, #4]
   1e6b2:	681b      	ldr	r3, [r3, #0]
   1e6b4:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1e6b6:	687b      	ldr	r3, [r7, #4]
   1e6b8:	681b      	ldr	r3, [r3, #0]
   1e6ba:	0018      	movs	r0, r3
   1e6bc:	4b0b      	ldr	r3, [pc, #44]	; (1e6ec <spi_enable+0x44>)
   1e6be:	4798      	blx	r3
   1e6c0:	0003      	movs	r3, r0
   1e6c2:	0018      	movs	r0, r3
   1e6c4:	4b0a      	ldr	r3, [pc, #40]	; (1e6f0 <spi_enable+0x48>)
   1e6c6:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   1e6c8:	46c0      	nop			; (mov r8, r8)
   1e6ca:	687b      	ldr	r3, [r7, #4]
   1e6cc:	0018      	movs	r0, r3
   1e6ce:	4b09      	ldr	r3, [pc, #36]	; (1e6f4 <spi_enable+0x4c>)
   1e6d0:	4798      	blx	r3
   1e6d2:	1e03      	subs	r3, r0, #0
   1e6d4:	d1f9      	bne.n	1e6ca <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1e6d6:	68fb      	ldr	r3, [r7, #12]
   1e6d8:	681b      	ldr	r3, [r3, #0]
   1e6da:	2202      	movs	r2, #2
   1e6dc:	431a      	orrs	r2, r3
   1e6de:	68fb      	ldr	r3, [r7, #12]
   1e6e0:	601a      	str	r2, [r3, #0]
}
   1e6e2:	46c0      	nop			; (mov r8, r8)
   1e6e4:	46bd      	mov	sp, r7
   1e6e6:	b004      	add	sp, #16
   1e6e8:	bd80      	pop	{r7, pc}
   1e6ea:	46c0      	nop			; (mov r8, r8)
   1e6ec:	0002671d 	.word	0x0002671d
   1e6f0:	0001e4b5 	.word	0x0001e4b5
   1e6f4:	0001e57d 	.word	0x0001e57d

0001e6f8 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   1e6f8:	b580      	push	{r7, lr}
   1e6fa:	b084      	sub	sp, #16
   1e6fc:	af00      	add	r7, sp, #0
   1e6fe:	6078      	str	r0, [r7, #4]
   1e700:	000a      	movs	r2, r1
   1e702:	1cfb      	adds	r3, r7, #3
   1e704:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   1e706:	230f      	movs	r3, #15
   1e708:	18fb      	adds	r3, r7, r3
   1e70a:	2200      	movs	r2, #0
   1e70c:	701a      	strb	r2, [r3, #0]
	while (size--) {
   1e70e:	e038      	b.n	1e782 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   1e710:	687b      	ldr	r3, [r7, #4]
   1e712:	1c5a      	adds	r2, r3, #1
   1e714:	607a      	str	r2, [r7, #4]
   1e716:	220e      	movs	r2, #14
   1e718:	18ba      	adds	r2, r7, r2
   1e71a:	781b      	ldrb	r3, [r3, #0]
   1e71c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1e71e:	230d      	movs	r3, #13
   1e720:	18fb      	adds	r3, r7, r3
   1e722:	2200      	movs	r2, #0
   1e724:	701a      	strb	r2, [r3, #0]
   1e726:	e027      	b.n	1e778 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   1e728:	230f      	movs	r3, #15
   1e72a:	18fa      	adds	r2, r7, r3
   1e72c:	230f      	movs	r3, #15
   1e72e:	18fb      	adds	r3, r7, r3
   1e730:	781b      	ldrb	r3, [r3, #0]
   1e732:	18db      	adds	r3, r3, r3
   1e734:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   1e736:	230e      	movs	r3, #14
   1e738:	18fa      	adds	r2, r7, r3
   1e73a:	230f      	movs	r3, #15
   1e73c:	18fb      	adds	r3, r7, r3
   1e73e:	7812      	ldrb	r2, [r2, #0]
   1e740:	781b      	ldrb	r3, [r3, #0]
   1e742:	4053      	eors	r3, r2
   1e744:	b2db      	uxtb	r3, r3
   1e746:	b25b      	sxtb	r3, r3
   1e748:	2b00      	cmp	r3, #0
   1e74a:	da07      	bge.n	1e75c <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   1e74c:	230f      	movs	r3, #15
   1e74e:	18fb      	adds	r3, r7, r3
   1e750:	220f      	movs	r2, #15
   1e752:	18ba      	adds	r2, r7, r2
   1e754:	7812      	ldrb	r2, [r2, #0]
   1e756:	2109      	movs	r1, #9
   1e758:	404a      	eors	r2, r1
   1e75a:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   1e75c:	230e      	movs	r3, #14
   1e75e:	18fa      	adds	r2, r7, r3
   1e760:	230e      	movs	r3, #14
   1e762:	18fb      	adds	r3, r7, r3
   1e764:	781b      	ldrb	r3, [r3, #0]
   1e766:	18db      	adds	r3, r3, r3
   1e768:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1e76a:	230d      	movs	r3, #13
   1e76c:	18fb      	adds	r3, r7, r3
   1e76e:	781a      	ldrb	r2, [r3, #0]
   1e770:	230d      	movs	r3, #13
   1e772:	18fb      	adds	r3, r7, r3
   1e774:	3201      	adds	r2, #1
   1e776:	701a      	strb	r2, [r3, #0]
   1e778:	230d      	movs	r3, #13
   1e77a:	18fb      	adds	r3, r7, r3
   1e77c:	781b      	ldrb	r3, [r3, #0]
   1e77e:	2b07      	cmp	r3, #7
   1e780:	d9d2      	bls.n	1e728 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   1e782:	1cfb      	adds	r3, r7, #3
   1e784:	781b      	ldrb	r3, [r3, #0]
   1e786:	1cfa      	adds	r2, r7, #3
   1e788:	1e59      	subs	r1, r3, #1
   1e78a:	7011      	strb	r1, [r2, #0]
   1e78c:	2b00      	cmp	r3, #0
   1e78e:	d1bf      	bne.n	1e710 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   1e790:	230f      	movs	r3, #15
   1e792:	18fb      	adds	r3, r7, r3
   1e794:	781b      	ldrb	r3, [r3, #0]
   1e796:	005b      	lsls	r3, r3, #1
   1e798:	b25b      	sxtb	r3, r3
   1e79a:	2201      	movs	r2, #1
   1e79c:	4313      	orrs	r3, r2
   1e79e:	b25a      	sxtb	r2, r3
   1e7a0:	230f      	movs	r3, #15
   1e7a2:	18fb      	adds	r3, r7, r3
   1e7a4:	701a      	strb	r2, [r3, #0]
	return crc;
   1e7a6:	230f      	movs	r3, #15
   1e7a8:	18fb      	adds	r3, r7, r3
   1e7aa:	781b      	ldrb	r3, [r3, #0]
}
   1e7ac:	0018      	movs	r0, r3
   1e7ae:	46bd      	mov	sp, r7
   1e7b0:	b004      	add	sp, #16
   1e7b2:	bd80      	pop	{r7, pc}

0001e7b4 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   1e7b4:	b590      	push	{r4, r7, lr}
   1e7b6:	b083      	sub	sp, #12
   1e7b8:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   1e7ba:	1c7b      	adds	r3, r7, #1
   1e7bc:	22ff      	movs	r2, #255	; 0xff
   1e7be:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   1e7c0:	1cbb      	adds	r3, r7, #2
   1e7c2:	22ff      	movs	r2, #255	; 0xff
   1e7c4:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1e7c6:	1cbb      	adds	r3, r7, #2
   1e7c8:	881b      	ldrh	r3, [r3, #0]
   1e7ca:	1c79      	adds	r1, r7, #1
   1e7cc:	4811      	ldr	r0, [pc, #68]	; (1e814 <sd_mmc_spi_wait_busy+0x60>)
   1e7ce:	2201      	movs	r2, #1
   1e7d0:	4c11      	ldr	r4, [pc, #68]	; (1e818 <sd_mmc_spi_wait_busy+0x64>)
   1e7d2:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   1e7d4:	4b11      	ldr	r3, [pc, #68]	; (1e81c <sd_mmc_spi_wait_busy+0x68>)
   1e7d6:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1e7d8:	1cbb      	adds	r3, r7, #2
   1e7da:	881b      	ldrh	r3, [r3, #0]
   1e7dc:	1c79      	adds	r1, r7, #1
   1e7de:	480d      	ldr	r0, [pc, #52]	; (1e814 <sd_mmc_spi_wait_busy+0x60>)
   1e7e0:	2201      	movs	r2, #1
   1e7e2:	4c0d      	ldr	r4, [pc, #52]	; (1e818 <sd_mmc_spi_wait_busy+0x64>)
   1e7e4:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1e7e6:	1cbb      	adds	r3, r7, #2
   1e7e8:	881b      	ldrh	r3, [r3, #0]
   1e7ea:	1c79      	adds	r1, r7, #1
   1e7ec:	4809      	ldr	r0, [pc, #36]	; (1e814 <sd_mmc_spi_wait_busy+0x60>)
   1e7ee:	2201      	movs	r2, #1
   1e7f0:	4c09      	ldr	r4, [pc, #36]	; (1e818 <sd_mmc_spi_wait_busy+0x64>)
   1e7f2:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   1e7f4:	687b      	ldr	r3, [r7, #4]
   1e7f6:	1e5a      	subs	r2, r3, #1
   1e7f8:	607a      	str	r2, [r7, #4]
   1e7fa:	2b00      	cmp	r3, #0
   1e7fc:	d101      	bne.n	1e802 <sd_mmc_spi_wait_busy+0x4e>
			return false;
   1e7fe:	2300      	movs	r3, #0
   1e800:	e004      	b.n	1e80c <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   1e802:	1c7b      	adds	r3, r7, #1
   1e804:	781b      	ldrb	r3, [r3, #0]
   1e806:	2bff      	cmp	r3, #255	; 0xff
   1e808:	d1ed      	bne.n	1e7e6 <sd_mmc_spi_wait_busy+0x32>
	return true;
   1e80a:	2301      	movs	r3, #1
}
   1e80c:	0018      	movs	r0, r3
   1e80e:	46bd      	mov	sp, r7
   1e810:	b003      	add	sp, #12
   1e812:	bd90      	pop	{r4, r7, pc}
   1e814:	2000421c 	.word	0x2000421c
   1e818:	0002705d 	.word	0x0002705d
   1e81c:	00030d40 	.word	0x00030d40

0001e820 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   1e820:	b590      	push	{r4, r7, lr}
   1e822:	b083      	sub	sp, #12
   1e824:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   1e826:	1cbb      	adds	r3, r7, #2
   1e828:	22ff      	movs	r2, #255	; 0xff
   1e82a:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   1e82c:	1c7b      	adds	r3, r7, #1
   1e82e:	2200      	movs	r2, #0
   1e830:	701a      	strb	r2, [r3, #0]
	i = 500000;
   1e832:	4b18      	ldr	r3, [pc, #96]	; (1e894 <sd_mmc_spi_start_read_block+0x74>)
   1e834:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   1e836:	687b      	ldr	r3, [r7, #4]
   1e838:	1e5a      	subs	r2, r3, #1
   1e83a:	607a      	str	r2, [r7, #4]
   1e83c:	2b00      	cmp	r3, #0
   1e83e:	d104      	bne.n	1e84a <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   1e840:	4b15      	ldr	r3, [pc, #84]	; (1e898 <sd_mmc_spi_start_read_block+0x78>)
   1e842:	2204      	movs	r2, #4
   1e844:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   1e846:	2300      	movs	r3, #0
   1e848:	e020      	b.n	1e88c <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   1e84a:	1cbb      	adds	r3, r7, #2
   1e84c:	881b      	ldrh	r3, [r3, #0]
   1e84e:	1c79      	adds	r1, r7, #1
   1e850:	4812      	ldr	r0, [pc, #72]	; (1e89c <sd_mmc_spi_start_read_block+0x7c>)
   1e852:	2201      	movs	r2, #1
   1e854:	4c12      	ldr	r4, [pc, #72]	; (1e8a0 <sd_mmc_spi_start_read_block+0x80>)
   1e856:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   1e858:	1c7b      	adds	r3, r7, #1
   1e85a:	781b      	ldrb	r3, [r3, #0]
   1e85c:	001a      	movs	r2, r3
   1e85e:	23f0      	movs	r3, #240	; 0xf0
   1e860:	4013      	ands	r3, r2
   1e862:	d10e      	bne.n	1e882 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   1e864:	1c7b      	adds	r3, r7, #1
   1e866:	781b      	ldrb	r3, [r3, #0]
   1e868:	001a      	movs	r2, r3
   1e86a:	2307      	movs	r3, #7
   1e86c:	4013      	ands	r3, r2
   1e86e:	d003      	beq.n	1e878 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   1e870:	4b09      	ldr	r3, [pc, #36]	; (1e898 <sd_mmc_spi_start_read_block+0x78>)
   1e872:	2207      	movs	r2, #7
   1e874:	701a      	strb	r2, [r3, #0]
   1e876:	e002      	b.n	1e87e <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   1e878:	4b07      	ldr	r3, [pc, #28]	; (1e898 <sd_mmc_spi_start_read_block+0x78>)
   1e87a:	220b      	movs	r2, #11
   1e87c:	701a      	strb	r2, [r3, #0]
			}
			return false;
   1e87e:	2300      	movs	r3, #0
   1e880:	e004      	b.n	1e88c <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   1e882:	1c7b      	adds	r3, r7, #1
   1e884:	781b      	ldrb	r3, [r3, #0]
   1e886:	2bfe      	cmp	r3, #254	; 0xfe
   1e888:	d1d5      	bne.n	1e836 <sd_mmc_spi_start_read_block+0x16>

	return true;
   1e88a:	2301      	movs	r3, #1
}
   1e88c:	0018      	movs	r0, r3
   1e88e:	46bd      	mov	sp, r7
   1e890:	b003      	add	sp, #12
   1e892:	bd90      	pop	{r4, r7, pc}
   1e894:	0007a120 	.word	0x0007a120
   1e898:	2000425f 	.word	0x2000425f
   1e89c:	2000421c 	.word	0x2000421c
   1e8a0:	0002705d 	.word	0x0002705d

0001e8a4 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   1e8a4:	b590      	push	{r4, r7, lr}
   1e8a6:	b083      	sub	sp, #12
   1e8a8:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   1e8aa:	1dbb      	adds	r3, r7, #6
   1e8ac:	22ff      	movs	r2, #255	; 0xff
   1e8ae:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   1e8b0:	1dbb      	adds	r3, r7, #6
   1e8b2:	881b      	ldrh	r3, [r3, #0]
   1e8b4:	1d39      	adds	r1, r7, #4
   1e8b6:	4804      	ldr	r0, [pc, #16]	; (1e8c8 <sd_mmc_spi_stop_read_block+0x24>)
   1e8b8:	2202      	movs	r2, #2
   1e8ba:	4c04      	ldr	r4, [pc, #16]	; (1e8cc <sd_mmc_spi_stop_read_block+0x28>)
   1e8bc:	47a0      	blx	r4
			dummy);
}
   1e8be:	46c0      	nop			; (mov r8, r8)
   1e8c0:	46bd      	mov	sp, r7
   1e8c2:	b003      	add	sp, #12
   1e8c4:	bd90      	pop	{r4, r7, pc}
   1e8c6:	46c0      	nop			; (mov r8, r8)
   1e8c8:	2000421c 	.word	0x2000421c
   1e8cc:	0002705d 	.word	0x0002705d

0001e8d0 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   1e8d0:	b580      	push	{r7, lr}
   1e8d2:	b082      	sub	sp, #8
   1e8d4:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   1e8d6:	1dfb      	adds	r3, r7, #7
   1e8d8:	22ff      	movs	r2, #255	; 0xff
   1e8da:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   1e8dc:	1df9      	adds	r1, r7, #7
   1e8de:	4b0d      	ldr	r3, [pc, #52]	; (1e914 <sd_mmc_spi_start_write_block+0x44>)
   1e8e0:	2201      	movs	r2, #1
   1e8e2:	0018      	movs	r0, r3
   1e8e4:	4b0c      	ldr	r3, [pc, #48]	; (1e918 <sd_mmc_spi_start_write_block+0x48>)
   1e8e6:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   1e8e8:	4b0c      	ldr	r3, [pc, #48]	; (1e91c <sd_mmc_spi_start_write_block+0x4c>)
   1e8ea:	881b      	ldrh	r3, [r3, #0]
   1e8ec:	2b01      	cmp	r3, #1
   1e8ee:	d103      	bne.n	1e8f8 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   1e8f0:	1dbb      	adds	r3, r7, #6
   1e8f2:	22fe      	movs	r2, #254	; 0xfe
   1e8f4:	701a      	strb	r2, [r3, #0]
   1e8f6:	e002      	b.n	1e8fe <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   1e8f8:	1dbb      	adds	r3, r7, #6
   1e8fa:	22fc      	movs	r2, #252	; 0xfc
   1e8fc:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   1e8fe:	1db9      	adds	r1, r7, #6
   1e900:	4b04      	ldr	r3, [pc, #16]	; (1e914 <sd_mmc_spi_start_write_block+0x44>)
   1e902:	2201      	movs	r2, #1
   1e904:	0018      	movs	r0, r3
   1e906:	4b04      	ldr	r3, [pc, #16]	; (1e918 <sd_mmc_spi_start_write_block+0x48>)
   1e908:	4798      	blx	r3
}
   1e90a:	46c0      	nop			; (mov r8, r8)
   1e90c:	46bd      	mov	sp, r7
   1e90e:	b002      	add	sp, #8
   1e910:	bd80      	pop	{r7, pc}
   1e912:	46c0      	nop			; (mov r8, r8)
   1e914:	2000421c 	.word	0x2000421c
   1e918:	00027281 	.word	0x00027281
   1e91c:	2000426a 	.word	0x2000426a

0001e920 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   1e920:	b590      	push	{r4, r7, lr}
   1e922:	b083      	sub	sp, #12
   1e924:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   1e926:	1dbb      	adds	r3, r7, #6
   1e928:	22ff      	movs	r2, #255	; 0xff
   1e92a:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   1e92c:	1cbb      	adds	r3, r7, #2
   1e92e:	2201      	movs	r2, #1
   1e930:	4252      	negs	r2, r2
   1e932:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   1e934:	1cb9      	adds	r1, r7, #2
   1e936:	4b1b      	ldr	r3, [pc, #108]	; (1e9a4 <sd_mmc_spi_stop_write_block+0x84>)
   1e938:	2202      	movs	r2, #2
   1e93a:	0018      	movs	r0, r3
   1e93c:	4b1a      	ldr	r3, [pc, #104]	; (1e9a8 <sd_mmc_spi_stop_write_block+0x88>)
   1e93e:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   1e940:	1dbb      	adds	r3, r7, #6
   1e942:	881b      	ldrh	r3, [r3, #0]
   1e944:	1d79      	adds	r1, r7, #5
   1e946:	4817      	ldr	r0, [pc, #92]	; (1e9a4 <sd_mmc_spi_stop_write_block+0x84>)
   1e948:	2201      	movs	r2, #1
   1e94a:	4c18      	ldr	r4, [pc, #96]	; (1e9ac <sd_mmc_spi_stop_write_block+0x8c>)
   1e94c:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   1e94e:	1d7b      	adds	r3, r7, #5
   1e950:	781b      	ldrb	r3, [r3, #0]
   1e952:	001a      	movs	r2, r3
   1e954:	2310      	movs	r3, #16
   1e956:	4013      	ands	r3, r2
   1e958:	d105      	bne.n	1e966 <sd_mmc_spi_stop_write_block+0x46>
   1e95a:	1d7b      	adds	r3, r7, #5
   1e95c:	781b      	ldrb	r3, [r3, #0]
   1e95e:	001a      	movs	r2, r3
   1e960:	2301      	movs	r3, #1
   1e962:	4013      	ands	r3, r2
   1e964:	d104      	bne.n	1e970 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1e966:	4b12      	ldr	r3, [pc, #72]	; (1e9b0 <sd_mmc_spi_stop_write_block+0x90>)
   1e968:	2201      	movs	r2, #1
   1e96a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   1e96c:	2300      	movs	r3, #0
   1e96e:	e014      	b.n	1e99a <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   1e970:	1d7b      	adds	r3, r7, #5
   1e972:	781b      	ldrb	r3, [r3, #0]
   1e974:	001a      	movs	r2, r3
   1e976:	231e      	movs	r3, #30
   1e978:	4013      	ands	r3, r2
   1e97a:	2b04      	cmp	r3, #4
   1e97c:	d00b      	beq.n	1e996 <sd_mmc_spi_stop_write_block+0x76>
   1e97e:	2b0a      	cmp	r3, #10
   1e980:	d104      	bne.n	1e98c <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   1e982:	4b0b      	ldr	r3, [pc, #44]	; (1e9b0 <sd_mmc_spi_stop_write_block+0x90>)
   1e984:	2208      	movs	r2, #8
   1e986:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1e988:	2300      	movs	r3, #0
   1e98a:	e006      	b.n	1e99a <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   1e98c:	4b08      	ldr	r3, [pc, #32]	; (1e9b0 <sd_mmc_spi_stop_write_block+0x90>)
   1e98e:	220a      	movs	r2, #10
   1e990:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1e992:	2300      	movs	r3, #0
   1e994:	e001      	b.n	1e99a <sd_mmc_spi_stop_write_block+0x7a>
		break;
   1e996:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1e998:	2301      	movs	r3, #1
}
   1e99a:	0018      	movs	r0, r3
   1e99c:	46bd      	mov	sp, r7
   1e99e:	b003      	add	sp, #12
   1e9a0:	bd90      	pop	{r4, r7, pc}
   1e9a2:	46c0      	nop			; (mov r8, r8)
   1e9a4:	2000421c 	.word	0x2000421c
   1e9a8:	00027281 	.word	0x00027281
   1e9ac:	0002705d 	.word	0x0002705d
   1e9b0:	2000425f 	.word	0x2000425f

0001e9b4 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   1e9b4:	b590      	push	{r4, r7, lr}
   1e9b6:	b083      	sub	sp, #12
   1e9b8:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   1e9ba:	4b1d      	ldr	r3, [pc, #116]	; (1ea30 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1e9bc:	881b      	ldrh	r3, [r3, #0]
   1e9be:	2b01      	cmp	r3, #1
   1e9c0:	d101      	bne.n	1e9c6 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   1e9c2:	2301      	movs	r3, #1
   1e9c4:	e030      	b.n	1ea28 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   1e9c6:	4b1a      	ldr	r3, [pc, #104]	; (1ea30 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1e9c8:	881b      	ldrh	r3, [r3, #0]
   1e9ca:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   1e9cc:	4b19      	ldr	r3, [pc, #100]	; (1ea34 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   1e9ce:	681a      	ldr	r2, [r3, #0]
   1e9d0:	4b19      	ldr	r3, [pc, #100]	; (1ea38 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   1e9d2:	881b      	ldrh	r3, [r3, #0]
   1e9d4:	0019      	movs	r1, r3
   1e9d6:	4b19      	ldr	r3, [pc, #100]	; (1ea3c <sd_mmc_spi_stop_multiwrite_block+0x88>)
   1e9d8:	0010      	movs	r0, r2
   1e9da:	4798      	blx	r3
   1e9dc:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   1e9de:	429c      	cmp	r4, r3
   1e9e0:	d901      	bls.n	1e9e6 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   1e9e2:	2301      	movs	r3, #1
   1e9e4:	e020      	b.n	1ea28 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   1e9e6:	1dfb      	adds	r3, r7, #7
   1e9e8:	22ff      	movs	r2, #255	; 0xff
   1e9ea:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1e9ec:	1df9      	adds	r1, r7, #7
   1e9ee:	4b14      	ldr	r3, [pc, #80]	; (1ea40 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1e9f0:	2201      	movs	r2, #1
   1e9f2:	0018      	movs	r0, r3
   1e9f4:	4b13      	ldr	r3, [pc, #76]	; (1ea44 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1e9f6:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   1e9f8:	1dfb      	adds	r3, r7, #7
   1e9fa:	22fd      	movs	r2, #253	; 0xfd
   1e9fc:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1e9fe:	1df9      	adds	r1, r7, #7
   1ea00:	4b0f      	ldr	r3, [pc, #60]	; (1ea40 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1ea02:	2201      	movs	r2, #1
   1ea04:	0018      	movs	r0, r3
   1ea06:	4b0f      	ldr	r3, [pc, #60]	; (1ea44 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1ea08:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   1ea0a:	4b0f      	ldr	r3, [pc, #60]	; (1ea48 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   1ea0c:	4798      	blx	r3
   1ea0e:	0003      	movs	r3, r0
   1ea10:	001a      	movs	r2, r3
   1ea12:	2301      	movs	r3, #1
   1ea14:	4053      	eors	r3, r2
   1ea16:	b2db      	uxtb	r3, r3
   1ea18:	2b00      	cmp	r3, #0
   1ea1a:	d004      	beq.n	1ea26 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1ea1c:	4b0b      	ldr	r3, [pc, #44]	; (1ea4c <sd_mmc_spi_stop_multiwrite_block+0x98>)
   1ea1e:	2205      	movs	r2, #5
   1ea20:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   1ea22:	2300      	movs	r3, #0
   1ea24:	e000      	b.n	1ea28 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   1ea26:	2301      	movs	r3, #1
}
   1ea28:	0018      	movs	r0, r3
   1ea2a:	46bd      	mov	sp, r7
   1ea2c:	b003      	add	sp, #12
   1ea2e:	bd90      	pop	{r4, r7, pc}
   1ea30:	2000426a 	.word	0x2000426a
   1ea34:	20004264 	.word	0x20004264
   1ea38:	20004268 	.word	0x20004268
   1ea3c:	00031ac5 	.word	0x00031ac5
   1ea40:	2000421c 	.word	0x2000421c
   1ea44:	00027281 	.word	0x00027281
   1ea48:	0001e7b5 	.word	0x0001e7b5
   1ea4c:	2000425f 	.word	0x2000425f

0001ea50 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   1ea50:	b580      	push	{r7, lr}
   1ea52:	b090      	sub	sp, #64	; 0x40
   1ea54:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1ea56:	4b1f      	ldr	r3, [pc, #124]	; (1ead4 <sd_mmc_spi_init+0x84>)
   1ea58:	2200      	movs	r2, #0
   1ea5a:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1ea5c:	233c      	movs	r3, #60	; 0x3c
   1ea5e:	18fb      	adds	r3, r7, r3
   1ea60:	0018      	movs	r0, r3
   1ea62:	4b1d      	ldr	r3, [pc, #116]	; (1ead8 <sd_mmc_spi_init+0x88>)
   1ea64:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   1ea66:	1d3b      	adds	r3, r7, #4
   1ea68:	0018      	movs	r0, r3
   1ea6a:	4b1c      	ldr	r3, [pc, #112]	; (1eadc <sd_mmc_spi_init+0x8c>)
   1ea6c:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   1ea6e:	1d3b      	adds	r3, r7, #4
   1ea70:	2280      	movs	r2, #128	; 0x80
   1ea72:	0252      	lsls	r2, r2, #9
   1ea74:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   1ea76:	1d3b      	adds	r3, r7, #4
   1ea78:	4a19      	ldr	r2, [pc, #100]	; (1eae0 <sd_mmc_spi_init+0x90>)
   1ea7a:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   1ea7c:	1d3b      	adds	r3, r7, #4
   1ea7e:	4a19      	ldr	r2, [pc, #100]	; (1eae4 <sd_mmc_spi_init+0x94>)
   1ea80:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   1ea82:	1d3b      	adds	r3, r7, #4
   1ea84:	4a18      	ldr	r2, [pc, #96]	; (1eae8 <sd_mmc_spi_init+0x98>)
   1ea86:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   1ea88:	1d3b      	adds	r3, r7, #4
   1ea8a:	4a18      	ldr	r2, [pc, #96]	; (1eaec <sd_mmc_spi_init+0x9c>)
   1ea8c:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   1ea8e:	1d3b      	adds	r3, r7, #4
   1ea90:	2224      	movs	r2, #36	; 0x24
   1ea92:	2100      	movs	r1, #0
   1ea94:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   1ea96:	1d3b      	adds	r3, r7, #4
   1ea98:	4a15      	ldr	r2, [pc, #84]	; (1eaf0 <sd_mmc_spi_init+0xa0>)
   1ea9a:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   1ea9c:	1d3a      	adds	r2, r7, #4
   1ea9e:	4915      	ldr	r1, [pc, #84]	; (1eaf4 <sd_mmc_spi_init+0xa4>)
   1eaa0:	4b15      	ldr	r3, [pc, #84]	; (1eaf8 <sd_mmc_spi_init+0xa8>)
   1eaa2:	0018      	movs	r0, r3
   1eaa4:	4b15      	ldr	r3, [pc, #84]	; (1eafc <sd_mmc_spi_init+0xac>)
   1eaa6:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   1eaa8:	4b13      	ldr	r3, [pc, #76]	; (1eaf8 <sd_mmc_spi_init+0xa8>)
   1eaaa:	0018      	movs	r0, r3
   1eaac:	4b14      	ldr	r3, [pc, #80]	; (1eb00 <sd_mmc_spi_init+0xb0>)
   1eaae:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   1eab0:	4b14      	ldr	r3, [pc, #80]	; (1eb04 <sd_mmc_spi_init+0xb4>)
   1eab2:	0018      	movs	r0, r3
   1eab4:	4b14      	ldr	r3, [pc, #80]	; (1eb08 <sd_mmc_spi_init+0xb8>)
   1eab6:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   1eab8:	4b14      	ldr	r3, [pc, #80]	; (1eb0c <sd_mmc_spi_init+0xbc>)
   1eaba:	781a      	ldrb	r2, [r3, #0]
   1eabc:	4b11      	ldr	r3, [pc, #68]	; (1eb04 <sd_mmc_spi_init+0xb4>)
   1eabe:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   1eac0:	4a10      	ldr	r2, [pc, #64]	; (1eb04 <sd_mmc_spi_init+0xb4>)
   1eac2:	4b13      	ldr	r3, [pc, #76]	; (1eb10 <sd_mmc_spi_init+0xc0>)
   1eac4:	0011      	movs	r1, r2
   1eac6:	0018      	movs	r0, r3
   1eac8:	4b12      	ldr	r3, [pc, #72]	; (1eb14 <sd_mmc_spi_init+0xc4>)
   1eaca:	4798      	blx	r3
}
   1eacc:	46c0      	nop			; (mov r8, r8)
   1eace:	46bd      	mov	sp, r7
   1ead0:	b010      	add	sp, #64	; 0x40
   1ead2:	bd80      	pop	{r7, pc}
   1ead4:	2000425f 	.word	0x2000425f
   1ead8:	0001e505 	.word	0x0001e505
   1eadc:	0001e59d 	.word	0x0001e59d
   1eae0:	00100002 	.word	0x00100002
   1eae4:	00110002 	.word	0x00110002
   1eae8:	00120002 	.word	0x00120002
   1eaec:	00130002 	.word	0x00130002
   1eaf0:	00061a80 	.word	0x00061a80
   1eaf4:	42000c00 	.word	0x42000c00
   1eaf8:	2000421c 	.word	0x2000421c
   1eafc:	00026ecd 	.word	0x00026ecd
   1eb00:	0001e6a9 	.word	0x0001e6a9
   1eb04:	2000425c 	.word	0x2000425c
   1eb08:	0001e621 	.word	0x0001e621
   1eb0c:	20000108 	.word	0x20000108
   1eb10:	20004258 	.word	0x20004258
   1eb14:	0001e645 	.word	0x0001e645

0001eb18 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   1eb18:	b590      	push	{r4, r7, lr}
   1eb1a:	b083      	sub	sp, #12
   1eb1c:	af00      	add	r7, sp, #0
   1eb1e:	0004      	movs	r4, r0
   1eb20:	6039      	str	r1, [r7, #0]
   1eb22:	0010      	movs	r0, r2
   1eb24:	0019      	movs	r1, r3
   1eb26:	1dfb      	adds	r3, r7, #7
   1eb28:	1c22      	adds	r2, r4, #0
   1eb2a:	701a      	strb	r2, [r3, #0]
   1eb2c:	1dbb      	adds	r3, r7, #6
   1eb2e:	1c02      	adds	r2, r0, #0
   1eb30:	701a      	strb	r2, [r3, #0]
   1eb32:	1d7b      	adds	r3, r7, #5
   1eb34:	1c0a      	adds	r2, r1, #0
   1eb36:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1eb38:	4b13      	ldr	r3, [pc, #76]	; (1eb88 <sd_mmc_spi_select_device+0x70>)
   1eb3a:	2200      	movs	r2, #0
   1eb3c:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   1eb3e:	683b      	ldr	r3, [r7, #0]
   1eb40:	4a12      	ldr	r2, [pc, #72]	; (1eb8c <sd_mmc_spi_select_device+0x74>)
   1eb42:	4293      	cmp	r3, r2
   1eb44:	d907      	bls.n	1eb56 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   1eb46:	4b11      	ldr	r3, [pc, #68]	; (1eb8c <sd_mmc_spi_select_device+0x74>)
   1eb48:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1eb4a:	e004      	b.n	1eb56 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   1eb4c:	683b      	ldr	r3, [r7, #0]
   1eb4e:	08db      	lsrs	r3, r3, #3
   1eb50:	683a      	ldr	r2, [r7, #0]
   1eb52:	1ad3      	subs	r3, r2, r3
   1eb54:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1eb56:	683a      	ldr	r2, [r7, #0]
   1eb58:	4b0d      	ldr	r3, [pc, #52]	; (1eb90 <sd_mmc_spi_select_device+0x78>)
   1eb5a:	0011      	movs	r1, r2
   1eb5c:	0018      	movs	r0, r3
   1eb5e:	4b0d      	ldr	r3, [pc, #52]	; (1eb94 <sd_mmc_spi_select_device+0x7c>)
   1eb60:	4798      	blx	r3
   1eb62:	0003      	movs	r3, r0
   1eb64:	2b17      	cmp	r3, #23
   1eb66:	d0f1      	beq.n	1eb4c <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   1eb68:	1dfb      	adds	r3, r7, #7
   1eb6a:	781a      	ldrb	r2, [r3, #0]
   1eb6c:	0013      	movs	r3, r2
   1eb6e:	005b      	lsls	r3, r3, #1
   1eb70:	189b      	adds	r3, r3, r2
   1eb72:	4a09      	ldr	r2, [pc, #36]	; (1eb98 <sd_mmc_spi_select_device+0x80>)
   1eb74:	1899      	adds	r1, r3, r2
   1eb76:	4b06      	ldr	r3, [pc, #24]	; (1eb90 <sd_mmc_spi_select_device+0x78>)
   1eb78:	2201      	movs	r2, #1
   1eb7a:	0018      	movs	r0, r3
   1eb7c:	4b07      	ldr	r3, [pc, #28]	; (1eb9c <sd_mmc_spi_select_device+0x84>)
   1eb7e:	4798      	blx	r3
}
   1eb80:	46c0      	nop			; (mov r8, r8)
   1eb82:	46bd      	mov	sp, r7
   1eb84:	b003      	add	sp, #12
   1eb86:	bd90      	pop	{r4, r7, pc}
   1eb88:	2000425f 	.word	0x2000425f
   1eb8c:	00989680 	.word	0x00989680
   1eb90:	2000421c 	.word	0x2000421c
   1eb94:	00026bf5 	.word	0x00026bf5
   1eb98:	20004258 	.word	0x20004258
   1eb9c:	00027191 	.word	0x00027191

0001eba0 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   1eba0:	b580      	push	{r7, lr}
   1eba2:	b082      	sub	sp, #8
   1eba4:	af00      	add	r7, sp, #0
   1eba6:	0002      	movs	r2, r0
   1eba8:	1dfb      	adds	r3, r7, #7
   1ebaa:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1ebac:	4b09      	ldr	r3, [pc, #36]	; (1ebd4 <sd_mmc_spi_deselect_device+0x34>)
   1ebae:	2200      	movs	r2, #0
   1ebb0:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   1ebb2:	1dfb      	adds	r3, r7, #7
   1ebb4:	781a      	ldrb	r2, [r3, #0]
   1ebb6:	0013      	movs	r3, r2
   1ebb8:	005b      	lsls	r3, r3, #1
   1ebba:	189b      	adds	r3, r3, r2
   1ebbc:	4a06      	ldr	r2, [pc, #24]	; (1ebd8 <sd_mmc_spi_deselect_device+0x38>)
   1ebbe:	1899      	adds	r1, r3, r2
   1ebc0:	4b06      	ldr	r3, [pc, #24]	; (1ebdc <sd_mmc_spi_deselect_device+0x3c>)
   1ebc2:	2200      	movs	r2, #0
   1ebc4:	0018      	movs	r0, r3
   1ebc6:	4b06      	ldr	r3, [pc, #24]	; (1ebe0 <sd_mmc_spi_deselect_device+0x40>)
   1ebc8:	4798      	blx	r3
}
   1ebca:	46c0      	nop			; (mov r8, r8)
   1ebcc:	46bd      	mov	sp, r7
   1ebce:	b002      	add	sp, #8
   1ebd0:	bd80      	pop	{r7, pc}
   1ebd2:	46c0      	nop			; (mov r8, r8)
   1ebd4:	2000425f 	.word	0x2000425f
   1ebd8:	20004258 	.word	0x20004258
   1ebdc:	2000421c 	.word	0x2000421c
   1ebe0:	00027191 	.word	0x00027191

0001ebe4 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   1ebe4:	b580      	push	{r7, lr}
   1ebe6:	b082      	sub	sp, #8
   1ebe8:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   1ebea:	1dbb      	adds	r3, r7, #6
   1ebec:	22ff      	movs	r2, #255	; 0xff
   1ebee:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1ebf0:	4b0c      	ldr	r3, [pc, #48]	; (1ec24 <sd_mmc_spi_send_clock+0x40>)
   1ebf2:	2200      	movs	r2, #0
   1ebf4:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   1ebf6:	1dfb      	adds	r3, r7, #7
   1ebf8:	2200      	movs	r2, #0
   1ebfa:	701a      	strb	r2, [r3, #0]
   1ebfc:	e00a      	b.n	1ec14 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   1ebfe:	1db9      	adds	r1, r7, #6
   1ec00:	4b09      	ldr	r3, [pc, #36]	; (1ec28 <sd_mmc_spi_send_clock+0x44>)
   1ec02:	2201      	movs	r2, #1
   1ec04:	0018      	movs	r0, r3
   1ec06:	4b09      	ldr	r3, [pc, #36]	; (1ec2c <sd_mmc_spi_send_clock+0x48>)
   1ec08:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   1ec0a:	1dfb      	adds	r3, r7, #7
   1ec0c:	781a      	ldrb	r2, [r3, #0]
   1ec0e:	1dfb      	adds	r3, r7, #7
   1ec10:	3201      	adds	r2, #1
   1ec12:	701a      	strb	r2, [r3, #0]
   1ec14:	1dfb      	adds	r3, r7, #7
   1ec16:	781b      	ldrb	r3, [r3, #0]
   1ec18:	2b09      	cmp	r3, #9
   1ec1a:	d9f0      	bls.n	1ebfe <sd_mmc_spi_send_clock+0x1a>
	}
}
   1ec1c:	46c0      	nop			; (mov r8, r8)
   1ec1e:	46bd      	mov	sp, r7
   1ec20:	b002      	add	sp, #8
   1ec22:	bd80      	pop	{r7, pc}
   1ec24:	2000425f 	.word	0x2000425f
   1ec28:	2000421c 	.word	0x2000421c
   1ec2c:	00027281 	.word	0x00027281

0001ec30 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   1ec30:	b590      	push	{r4, r7, lr}
   1ec32:	b085      	sub	sp, #20
   1ec34:	af02      	add	r7, sp, #8
   1ec36:	6078      	str	r0, [r7, #4]
   1ec38:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   1ec3a:	6839      	ldr	r1, [r7, #0]
   1ec3c:	6878      	ldr	r0, [r7, #4]
   1ec3e:	2300      	movs	r3, #0
   1ec40:	9300      	str	r3, [sp, #0]
   1ec42:	2300      	movs	r3, #0
   1ec44:	2200      	movs	r2, #0
   1ec46:	4c03      	ldr	r4, [pc, #12]	; (1ec54 <sd_mmc_spi_send_cmd+0x24>)
   1ec48:	47a0      	blx	r4
   1ec4a:	0003      	movs	r3, r0
}
   1ec4c:	0018      	movs	r0, r3
   1ec4e:	46bd      	mov	sp, r7
   1ec50:	b003      	add	sp, #12
   1ec52:	bd90      	pop	{r4, r7, pc}
   1ec54:	0001ec59 	.word	0x0001ec59

0001ec58 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   1ec58:	b590      	push	{r4, r7, lr}
   1ec5a:	b089      	sub	sp, #36	; 0x24
   1ec5c:	af00      	add	r7, sp, #0
   1ec5e:	60f8      	str	r0, [r7, #12]
   1ec60:	60b9      	str	r1, [r7, #8]
   1ec62:	0019      	movs	r1, r3
   1ec64:	1dbb      	adds	r3, r7, #6
   1ec66:	801a      	strh	r2, [r3, #0]
   1ec68:	1d3b      	adds	r3, r7, #4
   1ec6a:	1c0a      	adds	r2, r1, #0
   1ec6c:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   1ec6e:	231b      	movs	r3, #27
   1ec70:	18fb      	adds	r3, r7, r3
   1ec72:	22ff      	movs	r2, #255	; 0xff
   1ec74:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   1ec76:	231c      	movs	r3, #28
   1ec78:	18fb      	adds	r3, r7, r3
   1ec7a:	22ff      	movs	r2, #255	; 0xff
   1ec7c:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1ec7e:	4b72      	ldr	r3, [pc, #456]	; (1ee48 <sd_mmc_spi_adtc_start+0x1f0>)
   1ec80:	2200      	movs	r2, #0
   1ec82:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   1ec84:	68fb      	ldr	r3, [r7, #12]
   1ec86:	b2db      	uxtb	r3, r3
   1ec88:	223f      	movs	r2, #63	; 0x3f
   1ec8a:	4013      	ands	r3, r2
   1ec8c:	b2db      	uxtb	r3, r3
   1ec8e:	2240      	movs	r2, #64	; 0x40
   1ec90:	4313      	orrs	r3, r2
   1ec92:	b2da      	uxtb	r2, r3
   1ec94:	2314      	movs	r3, #20
   1ec96:	18fb      	adds	r3, r7, r3
   1ec98:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   1ec9a:	68bb      	ldr	r3, [r7, #8]
   1ec9c:	0e1b      	lsrs	r3, r3, #24
   1ec9e:	b2da      	uxtb	r2, r3
   1eca0:	2314      	movs	r3, #20
   1eca2:	18fb      	adds	r3, r7, r3
   1eca4:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   1eca6:	68bb      	ldr	r3, [r7, #8]
   1eca8:	0c1b      	lsrs	r3, r3, #16
   1ecaa:	b2da      	uxtb	r2, r3
   1ecac:	2314      	movs	r3, #20
   1ecae:	18fb      	adds	r3, r7, r3
   1ecb0:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   1ecb2:	68bb      	ldr	r3, [r7, #8]
   1ecb4:	0a1b      	lsrs	r3, r3, #8
   1ecb6:	b2da      	uxtb	r2, r3
   1ecb8:	2314      	movs	r3, #20
   1ecba:	18fb      	adds	r3, r7, r3
   1ecbc:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   1ecbe:	68bb      	ldr	r3, [r7, #8]
   1ecc0:	b2da      	uxtb	r2, r3
   1ecc2:	2314      	movs	r3, #20
   1ecc4:	18fb      	adds	r3, r7, r3
   1ecc6:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   1ecc8:	2314      	movs	r3, #20
   1ecca:	18fb      	adds	r3, r7, r3
   1eccc:	2105      	movs	r1, #5
   1ecce:	0018      	movs	r0, r3
   1ecd0:	4b5e      	ldr	r3, [pc, #376]	; (1ee4c <sd_mmc_spi_adtc_start+0x1f4>)
   1ecd2:	4798      	blx	r3
   1ecd4:	0003      	movs	r3, r0
   1ecd6:	001a      	movs	r2, r3
   1ecd8:	2314      	movs	r3, #20
   1ecda:	18fb      	adds	r3, r7, r3
   1ecdc:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   1ecde:	231b      	movs	r3, #27
   1ece0:	18f9      	adds	r1, r7, r3
   1ece2:	4b5b      	ldr	r3, [pc, #364]	; (1ee50 <sd_mmc_spi_adtc_start+0x1f8>)
   1ece4:	2201      	movs	r2, #1
   1ece6:	0018      	movs	r0, r3
   1ece8:	4b5a      	ldr	r3, [pc, #360]	; (1ee54 <sd_mmc_spi_adtc_start+0x1fc>)
   1ecea:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   1ecec:	2314      	movs	r3, #20
   1ecee:	18f9      	adds	r1, r7, r3
   1ecf0:	4b57      	ldr	r3, [pc, #348]	; (1ee50 <sd_mmc_spi_adtc_start+0x1f8>)
   1ecf2:	2206      	movs	r2, #6
   1ecf4:	0018      	movs	r0, r3
   1ecf6:	4b57      	ldr	r3, [pc, #348]	; (1ee54 <sd_mmc_spi_adtc_start+0x1fc>)
   1ecf8:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   1ecfa:	2313      	movs	r3, #19
   1ecfc:	18fb      	adds	r3, r7, r3
   1ecfe:	22ff      	movs	r2, #255	; 0xff
   1ed00:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1ed02:	231c      	movs	r3, #28
   1ed04:	18fb      	adds	r3, r7, r3
   1ed06:	881b      	ldrh	r3, [r3, #0]
   1ed08:	2213      	movs	r2, #19
   1ed0a:	18b9      	adds	r1, r7, r2
   1ed0c:	4850      	ldr	r0, [pc, #320]	; (1ee50 <sd_mmc_spi_adtc_start+0x1f8>)
   1ed0e:	2201      	movs	r2, #1
   1ed10:	4c51      	ldr	r4, [pc, #324]	; (1ee58 <sd_mmc_spi_adtc_start+0x200>)
   1ed12:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   1ed14:	231f      	movs	r3, #31
   1ed16:	18fb      	adds	r3, r7, r3
   1ed18:	2207      	movs	r2, #7
   1ed1a:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1ed1c:	231c      	movs	r3, #28
   1ed1e:	18fb      	adds	r3, r7, r3
   1ed20:	881b      	ldrh	r3, [r3, #0]
   1ed22:	2213      	movs	r2, #19
   1ed24:	18b9      	adds	r1, r7, r2
   1ed26:	484a      	ldr	r0, [pc, #296]	; (1ee50 <sd_mmc_spi_adtc_start+0x1f8>)
   1ed28:	2201      	movs	r2, #1
   1ed2a:	4c4b      	ldr	r4, [pc, #300]	; (1ee58 <sd_mmc_spi_adtc_start+0x200>)
   1ed2c:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   1ed2e:	2313      	movs	r3, #19
   1ed30:	18fb      	adds	r3, r7, r3
   1ed32:	781b      	ldrb	r3, [r3, #0]
   1ed34:	b25b      	sxtb	r3, r3
   1ed36:	2b00      	cmp	r3, #0
   1ed38:	da10      	bge.n	1ed5c <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   1ed3a:	231f      	movs	r3, #31
   1ed3c:	18fb      	adds	r3, r7, r3
   1ed3e:	221f      	movs	r2, #31
   1ed40:	18ba      	adds	r2, r7, r2
   1ed42:	7812      	ldrb	r2, [r2, #0]
   1ed44:	3a01      	subs	r2, #1
   1ed46:	701a      	strb	r2, [r3, #0]
   1ed48:	231f      	movs	r3, #31
   1ed4a:	18fb      	adds	r3, r7, r3
   1ed4c:	781b      	ldrb	r3, [r3, #0]
   1ed4e:	2b00      	cmp	r3, #0
   1ed50:	d1e4      	bne.n	1ed1c <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   1ed52:	4b3d      	ldr	r3, [pc, #244]	; (1ee48 <sd_mmc_spi_adtc_start+0x1f0>)
   1ed54:	2202      	movs	r2, #2
   1ed56:	701a      	strb	r2, [r3, #0]
			return false;
   1ed58:	2300      	movs	r3, #0
   1ed5a:	e070      	b.n	1ee3e <sd_mmc_spi_adtc_start+0x1e6>
			break;
   1ed5c:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   1ed5e:	2313      	movs	r3, #19
   1ed60:	18fb      	adds	r3, r7, r3
   1ed62:	781b      	ldrb	r3, [r3, #0]
   1ed64:	001a      	movs	r2, r3
   1ed66:	4b3d      	ldr	r3, [pc, #244]	; (1ee5c <sd_mmc_spi_adtc_start+0x204>)
   1ed68:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   1ed6a:	2313      	movs	r3, #19
   1ed6c:	18fb      	adds	r3, r7, r3
   1ed6e:	781b      	ldrb	r3, [r3, #0]
   1ed70:	001a      	movs	r2, r3
   1ed72:	2308      	movs	r3, #8
   1ed74:	4013      	ands	r3, r2
   1ed76:	d004      	beq.n	1ed82 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   1ed78:	4b33      	ldr	r3, [pc, #204]	; (1ee48 <sd_mmc_spi_adtc_start+0x1f0>)
   1ed7a:	2206      	movs	r2, #6
   1ed7c:	701a      	strb	r2, [r3, #0]
		return false;
   1ed7e:	2300      	movs	r3, #0
   1ed80:	e05d      	b.n	1ee3e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   1ed82:	2313      	movs	r3, #19
   1ed84:	18fb      	adds	r3, r7, r3
   1ed86:	781b      	ldrb	r3, [r3, #0]
   1ed88:	001a      	movs	r2, r3
   1ed8a:	2304      	movs	r3, #4
   1ed8c:	4013      	ands	r3, r2
   1ed8e:	d004      	beq.n	1ed9a <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   1ed90:	4b2d      	ldr	r3, [pc, #180]	; (1ee48 <sd_mmc_spi_adtc_start+0x1f0>)
   1ed92:	2209      	movs	r2, #9
   1ed94:	701a      	strb	r2, [r3, #0]
		return false;
   1ed96:	2300      	movs	r3, #0
   1ed98:	e051      	b.n	1ee3e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   1ed9a:	2313      	movs	r3, #19
   1ed9c:	18fb      	adds	r3, r7, r3
   1ed9e:	781b      	ldrb	r3, [r3, #0]
   1eda0:	001a      	movs	r2, r3
   1eda2:	2301      	movs	r3, #1
   1eda4:	439a      	bics	r2, r3
   1eda6:	1e13      	subs	r3, r2, #0
   1eda8:	d004      	beq.n	1edb4 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1edaa:	4b27      	ldr	r3, [pc, #156]	; (1ee48 <sd_mmc_spi_adtc_start+0x1f0>)
   1edac:	2201      	movs	r2, #1
   1edae:	701a      	strb	r2, [r3, #0]
		return false;
   1edb0:	2300      	movs	r3, #0
   1edb2:	e044      	b.n	1ee3e <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   1edb4:	68fa      	ldr	r2, [r7, #12]
   1edb6:	2380      	movs	r3, #128	; 0x80
   1edb8:	019b      	lsls	r3, r3, #6
   1edba:	4013      	ands	r3, r2
   1edbc:	d00d      	beq.n	1edda <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   1edbe:	4b28      	ldr	r3, [pc, #160]	; (1ee60 <sd_mmc_spi_adtc_start+0x208>)
   1edc0:	4798      	blx	r3
   1edc2:	0003      	movs	r3, r0
   1edc4:	001a      	movs	r2, r3
   1edc6:	2301      	movs	r3, #1
   1edc8:	4053      	eors	r3, r2
   1edca:	b2db      	uxtb	r3, r3
   1edcc:	2b00      	cmp	r3, #0
   1edce:	d004      	beq.n	1edda <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   1edd0:	4b1d      	ldr	r3, [pc, #116]	; (1ee48 <sd_mmc_spi_adtc_start+0x1f0>)
   1edd2:	2203      	movs	r2, #3
   1edd4:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   1edd6:	2300      	movs	r3, #0
   1edd8:	e031      	b.n	1ee3e <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   1edda:	68fa      	ldr	r2, [r7, #12]
   1eddc:	2380      	movs	r3, #128	; 0x80
   1edde:	009b      	lsls	r3, r3, #2
   1ede0:	4013      	ands	r3, r2
   1ede2:	d00e      	beq.n	1ee02 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   1ede4:	4b1d      	ldr	r3, [pc, #116]	; (1ee5c <sd_mmc_spi_adtc_start+0x204>)
   1ede6:	2200      	movs	r2, #0
   1ede8:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   1edea:	231c      	movs	r3, #28
   1edec:	18fb      	adds	r3, r7, r3
   1edee:	881b      	ldrh	r3, [r3, #0]
   1edf0:	491a      	ldr	r1, [pc, #104]	; (1ee5c <sd_mmc_spi_adtc_start+0x204>)
   1edf2:	4817      	ldr	r0, [pc, #92]	; (1ee50 <sd_mmc_spi_adtc_start+0x1f8>)
   1edf4:	2201      	movs	r2, #1
   1edf6:	4c18      	ldr	r4, [pc, #96]	; (1ee58 <sd_mmc_spi_adtc_start+0x200>)
   1edf8:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   1edfa:	4b18      	ldr	r3, [pc, #96]	; (1ee5c <sd_mmc_spi_adtc_start+0x204>)
   1edfc:	681a      	ldr	r2, [r3, #0]
   1edfe:	4b17      	ldr	r3, [pc, #92]	; (1ee5c <sd_mmc_spi_adtc_start+0x204>)
   1ee00:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   1ee02:	68fa      	ldr	r2, [r7, #12]
   1ee04:	2380      	movs	r3, #128	; 0x80
   1ee06:	00db      	lsls	r3, r3, #3
   1ee08:	4013      	ands	r3, r2
   1ee0a:	d00c      	beq.n	1ee26 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   1ee0c:	231c      	movs	r3, #28
   1ee0e:	18fb      	adds	r3, r7, r3
   1ee10:	881b      	ldrh	r3, [r3, #0]
   1ee12:	4912      	ldr	r1, [pc, #72]	; (1ee5c <sd_mmc_spi_adtc_start+0x204>)
   1ee14:	480e      	ldr	r0, [pc, #56]	; (1ee50 <sd_mmc_spi_adtc_start+0x1f8>)
   1ee16:	2204      	movs	r2, #4
   1ee18:	4c0f      	ldr	r4, [pc, #60]	; (1ee58 <sd_mmc_spi_adtc_start+0x200>)
   1ee1a:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   1ee1c:	4b0f      	ldr	r3, [pc, #60]	; (1ee5c <sd_mmc_spi_adtc_start+0x204>)
   1ee1e:	681b      	ldr	r3, [r3, #0]
   1ee20:	ba1a      	rev	r2, r3
   1ee22:	4b0e      	ldr	r3, [pc, #56]	; (1ee5c <sd_mmc_spi_adtc_start+0x204>)
   1ee24:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   1ee26:	4b0f      	ldr	r3, [pc, #60]	; (1ee64 <sd_mmc_spi_adtc_start+0x20c>)
   1ee28:	1dba      	adds	r2, r7, #6
   1ee2a:	8812      	ldrh	r2, [r2, #0]
   1ee2c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   1ee2e:	4b0e      	ldr	r3, [pc, #56]	; (1ee68 <sd_mmc_spi_adtc_start+0x210>)
   1ee30:	1d3a      	adds	r2, r7, #4
   1ee32:	8812      	ldrh	r2, [r2, #0]
   1ee34:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   1ee36:	4b0d      	ldr	r3, [pc, #52]	; (1ee6c <sd_mmc_spi_adtc_start+0x214>)
   1ee38:	2200      	movs	r2, #0
   1ee3a:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   1ee3c:	2301      	movs	r3, #1
}
   1ee3e:	0018      	movs	r0, r3
   1ee40:	46bd      	mov	sp, r7
   1ee42:	b009      	add	sp, #36	; 0x24
   1ee44:	bd90      	pop	{r4, r7, pc}
   1ee46:	46c0      	nop			; (mov r8, r8)
   1ee48:	2000425f 	.word	0x2000425f
   1ee4c:	0001e6f9 	.word	0x0001e6f9
   1ee50:	2000421c 	.word	0x2000421c
   1ee54:	00027281 	.word	0x00027281
   1ee58:	0002705d 	.word	0x0002705d
   1ee5c:	20004260 	.word	0x20004260
   1ee60:	0001e7b5 	.word	0x0001e7b5
   1ee64:	20004268 	.word	0x20004268
   1ee68:	2000426a 	.word	0x2000426a
   1ee6c:	20004264 	.word	0x20004264

0001ee70 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   1ee70:	b580      	push	{r7, lr}
   1ee72:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   1ee74:	4b02      	ldr	r3, [pc, #8]	; (1ee80 <sd_mmc_spi_get_response+0x10>)
   1ee76:	681b      	ldr	r3, [r3, #0]
}
   1ee78:	0018      	movs	r0, r3
   1ee7a:	46bd      	mov	sp, r7
   1ee7c:	bd80      	pop	{r7, pc}
   1ee7e:	46c0      	nop			; (mov r8, r8)
   1ee80:	20004260 	.word	0x20004260

0001ee84 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   1ee84:	b590      	push	{r4, r7, lr}
   1ee86:	b085      	sub	sp, #20
   1ee88:	af00      	add	r7, sp, #0
   1ee8a:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   1ee8c:	230e      	movs	r3, #14
   1ee8e:	18fb      	adds	r3, r7, r3
   1ee90:	22ff      	movs	r2, #255	; 0xff
   1ee92:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1ee94:	4b1c      	ldr	r3, [pc, #112]	; (1ef08 <sd_mmc_spi_read_word+0x84>)
   1ee96:	2200      	movs	r2, #0
   1ee98:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1ee9a:	4b1c      	ldr	r3, [pc, #112]	; (1ef0c <sd_mmc_spi_read_word+0x88>)
   1ee9c:	681a      	ldr	r2, [r3, #0]
   1ee9e:	4b1c      	ldr	r3, [pc, #112]	; (1ef10 <sd_mmc_spi_read_word+0x8c>)
   1eea0:	881b      	ldrh	r3, [r3, #0]
   1eea2:	0019      	movs	r1, r3
   1eea4:	4b1b      	ldr	r3, [pc, #108]	; (1ef14 <sd_mmc_spi_read_word+0x90>)
   1eea6:	0010      	movs	r0, r2
   1eea8:	4798      	blx	r3
   1eeaa:	1e0b      	subs	r3, r1, #0
   1eeac:	d10a      	bne.n	1eec4 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   1eeae:	4b1a      	ldr	r3, [pc, #104]	; (1ef18 <sd_mmc_spi_read_word+0x94>)
   1eeb0:	4798      	blx	r3
   1eeb2:	0003      	movs	r3, r0
   1eeb4:	001a      	movs	r2, r3
   1eeb6:	2301      	movs	r3, #1
   1eeb8:	4053      	eors	r3, r2
   1eeba:	b2db      	uxtb	r3, r3
   1eebc:	2b00      	cmp	r3, #0
   1eebe:	d001      	beq.n	1eec4 <sd_mmc_spi_read_word+0x40>
			return false;
   1eec0:	2300      	movs	r3, #0
   1eec2:	e01d      	b.n	1ef00 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   1eec4:	230e      	movs	r3, #14
   1eec6:	18fb      	adds	r3, r7, r3
   1eec8:	881b      	ldrh	r3, [r3, #0]
   1eeca:	1d39      	adds	r1, r7, #4
   1eecc:	4813      	ldr	r0, [pc, #76]	; (1ef1c <sd_mmc_spi_read_word+0x98>)
   1eece:	2204      	movs	r2, #4
   1eed0:	4c13      	ldr	r4, [pc, #76]	; (1ef20 <sd_mmc_spi_read_word+0x9c>)
   1eed2:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   1eed4:	687b      	ldr	r3, [r7, #4]
   1eed6:	687a      	ldr	r2, [r7, #4]
   1eed8:	6812      	ldr	r2, [r2, #0]
   1eeda:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   1eedc:	4b0b      	ldr	r3, [pc, #44]	; (1ef0c <sd_mmc_spi_read_word+0x88>)
   1eede:	681b      	ldr	r3, [r3, #0]
   1eee0:	1d1a      	adds	r2, r3, #4
   1eee2:	4b0a      	ldr	r3, [pc, #40]	; (1ef0c <sd_mmc_spi_read_word+0x88>)
   1eee4:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1eee6:	4b09      	ldr	r3, [pc, #36]	; (1ef0c <sd_mmc_spi_read_word+0x88>)
   1eee8:	681a      	ldr	r2, [r3, #0]
   1eeea:	4b09      	ldr	r3, [pc, #36]	; (1ef10 <sd_mmc_spi_read_word+0x8c>)
   1eeec:	881b      	ldrh	r3, [r3, #0]
   1eeee:	0019      	movs	r1, r3
   1eef0:	4b08      	ldr	r3, [pc, #32]	; (1ef14 <sd_mmc_spi_read_word+0x90>)
   1eef2:	0010      	movs	r0, r2
   1eef4:	4798      	blx	r3
   1eef6:	1e0b      	subs	r3, r1, #0
   1eef8:	d101      	bne.n	1eefe <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   1eefa:	4b0a      	ldr	r3, [pc, #40]	; (1ef24 <sd_mmc_spi_read_word+0xa0>)
   1eefc:	4798      	blx	r3
	}
	return true;
   1eefe:	2301      	movs	r3, #1
}
   1ef00:	0018      	movs	r0, r3
   1ef02:	46bd      	mov	sp, r7
   1ef04:	b005      	add	sp, #20
   1ef06:	bd90      	pop	{r4, r7, pc}
   1ef08:	2000425f 	.word	0x2000425f
   1ef0c:	20004264 	.word	0x20004264
   1ef10:	20004268 	.word	0x20004268
   1ef14:	00031bd1 	.word	0x00031bd1
   1ef18:	0001e821 	.word	0x0001e821
   1ef1c:	2000421c 	.word	0x2000421c
   1ef20:	0002705d 	.word	0x0002705d
   1ef24:	0001e8a5 	.word	0x0001e8a5

0001ef28 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   1ef28:	b590      	push	{r4, r7, lr}
   1ef2a:	b085      	sub	sp, #20
   1ef2c:	af00      	add	r7, sp, #0
   1ef2e:	6078      	str	r0, [r7, #4]
   1ef30:	000a      	movs	r2, r1
   1ef32:	1cbb      	adds	r3, r7, #2
   1ef34:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   1ef36:	230a      	movs	r3, #10
   1ef38:	18fb      	adds	r3, r7, r3
   1ef3a:	22ff      	movs	r2, #255	; 0xff
   1ef3c:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1ef3e:	4b1c      	ldr	r3, [pc, #112]	; (1efb0 <sd_mmc_spi_start_read_blocks+0x88>)
   1ef40:	2200      	movs	r2, #0
   1ef42:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1ef44:	2300      	movs	r3, #0
   1ef46:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1ef48:	e025      	b.n	1ef96 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   1ef4a:	4b1a      	ldr	r3, [pc, #104]	; (1efb4 <sd_mmc_spi_start_read_blocks+0x8c>)
   1ef4c:	4798      	blx	r3
   1ef4e:	0003      	movs	r3, r0
   1ef50:	001a      	movs	r2, r3
   1ef52:	2301      	movs	r3, #1
   1ef54:	4053      	eors	r3, r2
   1ef56:	b2db      	uxtb	r3, r3
   1ef58:	2b00      	cmp	r3, #0
   1ef5a:	d001      	beq.n	1ef60 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   1ef5c:	2300      	movs	r3, #0
   1ef5e:	e022      	b.n	1efa6 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   1ef60:	687a      	ldr	r2, [r7, #4]
   1ef62:	68fb      	ldr	r3, [r7, #12]
   1ef64:	18d1      	adds	r1, r2, r3
   1ef66:	4b14      	ldr	r3, [pc, #80]	; (1efb8 <sd_mmc_spi_start_read_blocks+0x90>)
   1ef68:	881a      	ldrh	r2, [r3, #0]
   1ef6a:	230a      	movs	r3, #10
   1ef6c:	18fb      	adds	r3, r7, r3
   1ef6e:	881b      	ldrh	r3, [r3, #0]
   1ef70:	4812      	ldr	r0, [pc, #72]	; (1efbc <sd_mmc_spi_start_read_blocks+0x94>)
   1ef72:	4c13      	ldr	r4, [pc, #76]	; (1efc0 <sd_mmc_spi_start_read_blocks+0x98>)
   1ef74:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   1ef76:	4b10      	ldr	r3, [pc, #64]	; (1efb8 <sd_mmc_spi_start_read_blocks+0x90>)
   1ef78:	881b      	ldrh	r3, [r3, #0]
   1ef7a:	001a      	movs	r2, r3
   1ef7c:	68fb      	ldr	r3, [r7, #12]
   1ef7e:	189b      	adds	r3, r3, r2
   1ef80:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1ef82:	4b0d      	ldr	r3, [pc, #52]	; (1efb8 <sd_mmc_spi_start_read_blocks+0x90>)
   1ef84:	881b      	ldrh	r3, [r3, #0]
   1ef86:	001a      	movs	r2, r3
   1ef88:	4b0e      	ldr	r3, [pc, #56]	; (1efc4 <sd_mmc_spi_start_read_blocks+0x9c>)
   1ef8a:	681b      	ldr	r3, [r3, #0]
   1ef8c:	18d2      	adds	r2, r2, r3
   1ef8e:	4b0d      	ldr	r3, [pc, #52]	; (1efc4 <sd_mmc_spi_start_read_blocks+0x9c>)
   1ef90:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   1ef92:	4b0d      	ldr	r3, [pc, #52]	; (1efc8 <sd_mmc_spi_start_read_blocks+0xa0>)
   1ef94:	4798      	blx	r3
	while (nb_block--) {
   1ef96:	1cbb      	adds	r3, r7, #2
   1ef98:	881b      	ldrh	r3, [r3, #0]
   1ef9a:	1cba      	adds	r2, r7, #2
   1ef9c:	1e59      	subs	r1, r3, #1
   1ef9e:	8011      	strh	r1, [r2, #0]
   1efa0:	2b00      	cmp	r3, #0
   1efa2:	d1d2      	bne.n	1ef4a <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   1efa4:	2301      	movs	r3, #1
}
   1efa6:	0018      	movs	r0, r3
   1efa8:	46bd      	mov	sp, r7
   1efaa:	b005      	add	sp, #20
   1efac:	bd90      	pop	{r4, r7, pc}
   1efae:	46c0      	nop			; (mov r8, r8)
   1efb0:	2000425f 	.word	0x2000425f
   1efb4:	0001e821 	.word	0x0001e821
   1efb8:	20004268 	.word	0x20004268
   1efbc:	2000421c 	.word	0x2000421c
   1efc0:	0002705d 	.word	0x0002705d
   1efc4:	20004264 	.word	0x20004264
   1efc8:	0001e8a5 	.word	0x0001e8a5

0001efcc <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   1efcc:	b580      	push	{r7, lr}
   1efce:	af00      	add	r7, sp, #0
	return true;
   1efd0:	2301      	movs	r3, #1
}
   1efd2:	0018      	movs	r0, r3
   1efd4:	46bd      	mov	sp, r7
   1efd6:	bd80      	pop	{r7, pc}

0001efd8 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   1efd8:	b580      	push	{r7, lr}
   1efda:	b084      	sub	sp, #16
   1efdc:	af00      	add	r7, sp, #0
   1efde:	6078      	str	r0, [r7, #4]
   1efe0:	000a      	movs	r2, r1
   1efe2:	1cbb      	adds	r3, r7, #2
   1efe4:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1efe6:	4b24      	ldr	r3, [pc, #144]	; (1f078 <sd_mmc_spi_start_write_blocks+0xa0>)
   1efe8:	2200      	movs	r2, #0
   1efea:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1efec:	2300      	movs	r3, #0
   1efee:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1eff0:	e035      	b.n	1f05e <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   1eff2:	4b22      	ldr	r3, [pc, #136]	; (1f07c <sd_mmc_spi_start_write_blocks+0xa4>)
   1eff4:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   1eff6:	687a      	ldr	r2, [r7, #4]
   1eff8:	68fb      	ldr	r3, [r7, #12]
   1effa:	18d1      	adds	r1, r2, r3
   1effc:	4b20      	ldr	r3, [pc, #128]	; (1f080 <sd_mmc_spi_start_write_blocks+0xa8>)
   1effe:	881a      	ldrh	r2, [r3, #0]
   1f000:	4b20      	ldr	r3, [pc, #128]	; (1f084 <sd_mmc_spi_start_write_blocks+0xac>)
   1f002:	0018      	movs	r0, r3
   1f004:	4b20      	ldr	r3, [pc, #128]	; (1f088 <sd_mmc_spi_start_write_blocks+0xb0>)
   1f006:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   1f008:	4b1d      	ldr	r3, [pc, #116]	; (1f080 <sd_mmc_spi_start_write_blocks+0xa8>)
   1f00a:	881b      	ldrh	r3, [r3, #0]
   1f00c:	001a      	movs	r2, r3
   1f00e:	68fb      	ldr	r3, [r7, #12]
   1f010:	189b      	adds	r3, r3, r2
   1f012:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1f014:	4b1a      	ldr	r3, [pc, #104]	; (1f080 <sd_mmc_spi_start_write_blocks+0xa8>)
   1f016:	881b      	ldrh	r3, [r3, #0]
   1f018:	001a      	movs	r2, r3
   1f01a:	4b1c      	ldr	r3, [pc, #112]	; (1f08c <sd_mmc_spi_start_write_blocks+0xb4>)
   1f01c:	681b      	ldr	r3, [r3, #0]
   1f01e:	18d2      	adds	r2, r2, r3
   1f020:	4b1a      	ldr	r3, [pc, #104]	; (1f08c <sd_mmc_spi_start_write_blocks+0xb4>)
   1f022:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   1f024:	4b1a      	ldr	r3, [pc, #104]	; (1f090 <sd_mmc_spi_start_write_blocks+0xb8>)
   1f026:	4798      	blx	r3
   1f028:	0003      	movs	r3, r0
   1f02a:	001a      	movs	r2, r3
   1f02c:	2301      	movs	r3, #1
   1f02e:	4053      	eors	r3, r2
   1f030:	b2db      	uxtb	r3, r3
   1f032:	2b00      	cmp	r3, #0
   1f034:	d001      	beq.n	1f03a <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   1f036:	2300      	movs	r3, #0
   1f038:	e019      	b.n	1f06e <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   1f03a:	1cbb      	adds	r3, r7, #2
   1f03c:	881b      	ldrh	r3, [r3, #0]
   1f03e:	2b00      	cmp	r3, #0
   1f040:	d00d      	beq.n	1f05e <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   1f042:	4b14      	ldr	r3, [pc, #80]	; (1f094 <sd_mmc_spi_start_write_blocks+0xbc>)
   1f044:	4798      	blx	r3
   1f046:	0003      	movs	r3, r0
   1f048:	001a      	movs	r2, r3
   1f04a:	2301      	movs	r3, #1
   1f04c:	4053      	eors	r3, r2
   1f04e:	b2db      	uxtb	r3, r3
   1f050:	2b00      	cmp	r3, #0
   1f052:	d004      	beq.n	1f05e <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1f054:	4b08      	ldr	r3, [pc, #32]	; (1f078 <sd_mmc_spi_start_write_blocks+0xa0>)
   1f056:	2205      	movs	r2, #5
   1f058:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   1f05a:	2300      	movs	r3, #0
   1f05c:	e007      	b.n	1f06e <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   1f05e:	1cbb      	adds	r3, r7, #2
   1f060:	881b      	ldrh	r3, [r3, #0]
   1f062:	1cba      	adds	r2, r7, #2
   1f064:	1e59      	subs	r1, r3, #1
   1f066:	8011      	strh	r1, [r2, #0]
   1f068:	2b00      	cmp	r3, #0
   1f06a:	d1c2      	bne.n	1eff2 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   1f06c:	2301      	movs	r3, #1
}
   1f06e:	0018      	movs	r0, r3
   1f070:	46bd      	mov	sp, r7
   1f072:	b004      	add	sp, #16
   1f074:	bd80      	pop	{r7, pc}
   1f076:	46c0      	nop			; (mov r8, r8)
   1f078:	2000425f 	.word	0x2000425f
   1f07c:	0001e8d1 	.word	0x0001e8d1
   1f080:	20004268 	.word	0x20004268
   1f084:	2000421c 	.word	0x2000421c
   1f088:	00027281 	.word	0x00027281
   1f08c:	20004264 	.word	0x20004264
   1f090:	0001e921 	.word	0x0001e921
   1f094:	0001e7b5 	.word	0x0001e7b5

0001f098 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   1f098:	b580      	push	{r7, lr}
   1f09a:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   1f09c:	4b09      	ldr	r3, [pc, #36]	; (1f0c4 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   1f09e:	4798      	blx	r3
   1f0a0:	0003      	movs	r3, r0
   1f0a2:	001a      	movs	r2, r3
   1f0a4:	2301      	movs	r3, #1
   1f0a6:	4053      	eors	r3, r2
   1f0a8:	b2db      	uxtb	r3, r3
   1f0aa:	2b00      	cmp	r3, #0
   1f0ac:	d004      	beq.n	1f0b8 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1f0ae:	4b06      	ldr	r3, [pc, #24]	; (1f0c8 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   1f0b0:	2205      	movs	r2, #5
   1f0b2:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   1f0b4:	2300      	movs	r3, #0
   1f0b6:	e002      	b.n	1f0be <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   1f0b8:	4b04      	ldr	r3, [pc, #16]	; (1f0cc <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   1f0ba:	4798      	blx	r3
   1f0bc:	0003      	movs	r3, r0
}
   1f0be:	0018      	movs	r0, r3
   1f0c0:	46bd      	mov	sp, r7
   1f0c2:	bd80      	pop	{r7, pc}
   1f0c4:	0001e7b5 	.word	0x0001e7b5
   1f0c8:	2000425f 	.word	0x2000425f
   1f0cc:	0001e9b5 	.word	0x0001e9b5

0001f0d0 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
   1f0d0:	b580      	push	{r7, lr}
   1f0d2:	b082      	sub	sp, #8
   1f0d4:	af00      	add	r7, sp, #0
   1f0d6:	6078      	str	r0, [r7, #4]
	if (n > 0) {
   1f0d8:	687b      	ldr	r3, [r7, #4]
   1f0da:	2b00      	cmp	r3, #0
   1f0dc:	d00c      	beq.n	1f0f8 <delay_cycles+0x28>
		SysTick->LOAD = n;
   1f0de:	4b08      	ldr	r3, [pc, #32]	; (1f100 <delay_cycles+0x30>)
   1f0e0:	687a      	ldr	r2, [r7, #4]
   1f0e2:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
   1f0e4:	4b06      	ldr	r3, [pc, #24]	; (1f100 <delay_cycles+0x30>)
   1f0e6:	2200      	movs	r2, #0
   1f0e8:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   1f0ea:	46c0      	nop			; (mov r8, r8)
   1f0ec:	4b04      	ldr	r3, [pc, #16]	; (1f100 <delay_cycles+0x30>)
   1f0ee:	681a      	ldr	r2, [r3, #0]
   1f0f0:	2380      	movs	r3, #128	; 0x80
   1f0f2:	025b      	lsls	r3, r3, #9
   1f0f4:	4013      	ands	r3, r2
   1f0f6:	d0f9      	beq.n	1f0ec <delay_cycles+0x1c>
		};
	}
}
   1f0f8:	46c0      	nop			; (mov r8, r8)
   1f0fa:	46bd      	mov	sp, r7
   1f0fc:	b002      	add	sp, #8
   1f0fe:	bd80      	pop	{r7, pc}
   1f100:	e000e010 	.word	0xe000e010

0001f104 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   1f104:	b580      	push	{r7, lr}
   1f106:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   1f108:	2000      	movs	r0, #0
   1f10a:	4b0f      	ldr	r3, [pc, #60]	; (1f148 <delay_init+0x44>)
   1f10c:	4798      	blx	r3
   1f10e:	0002      	movs	r2, r0
   1f110:	4b0e      	ldr	r3, [pc, #56]	; (1f14c <delay_init+0x48>)
   1f112:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   1f114:	4b0d      	ldr	r3, [pc, #52]	; (1f14c <delay_init+0x48>)
   1f116:	6818      	ldr	r0, [r3, #0]
   1f118:	4b0d      	ldr	r3, [pc, #52]	; (1f150 <delay_init+0x4c>)
   1f11a:	22fa      	movs	r2, #250	; 0xfa
   1f11c:	0091      	lsls	r1, r2, #2
   1f11e:	4798      	blx	r3
   1f120:	0003      	movs	r3, r0
   1f122:	001a      	movs	r2, r3
   1f124:	4b09      	ldr	r3, [pc, #36]	; (1f14c <delay_init+0x48>)
   1f126:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   1f128:	4b08      	ldr	r3, [pc, #32]	; (1f14c <delay_init+0x48>)
   1f12a:	6818      	ldr	r0, [r3, #0]
   1f12c:	4b08      	ldr	r3, [pc, #32]	; (1f150 <delay_init+0x4c>)
   1f12e:	22fa      	movs	r2, #250	; 0xfa
   1f130:	0091      	lsls	r1, r2, #2
   1f132:	4798      	blx	r3
   1f134:	0003      	movs	r3, r0
   1f136:	001a      	movs	r2, r3
   1f138:	4b06      	ldr	r3, [pc, #24]	; (1f154 <delay_init+0x50>)
   1f13a:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   1f13c:	4b06      	ldr	r3, [pc, #24]	; (1f158 <delay_init+0x54>)
   1f13e:	2205      	movs	r2, #5
   1f140:	601a      	str	r2, [r3, #0]
}
   1f142:	46c0      	nop			; (mov r8, r8)
   1f144:	46bd      	mov	sp, r7
   1f146:	bd80      	pop	{r7, pc}
   1f148:	00028e05 	.word	0x00028e05
   1f14c:	2000010c 	.word	0x2000010c
   1f150:	00031ac5 	.word	0x00031ac5
   1f154:	20000110 	.word	0x20000110
   1f158:	e000e010 	.word	0xe000e010

0001f15c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   1f15c:	b580      	push	{r7, lr}
   1f15e:	b082      	sub	sp, #8
   1f160:	af00      	add	r7, sp, #0
   1f162:	6078      	str	r0, [r7, #4]
	while (n--) {
   1f164:	e004      	b.n	1f170 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   1f166:	4b07      	ldr	r3, [pc, #28]	; (1f184 <delay_cycles_ms+0x28>)
   1f168:	681b      	ldr	r3, [r3, #0]
   1f16a:	0018      	movs	r0, r3
   1f16c:	4b06      	ldr	r3, [pc, #24]	; (1f188 <delay_cycles_ms+0x2c>)
   1f16e:	4798      	blx	r3
	while (n--) {
   1f170:	687b      	ldr	r3, [r7, #4]
   1f172:	1e5a      	subs	r2, r3, #1
   1f174:	607a      	str	r2, [r7, #4]
   1f176:	2b00      	cmp	r3, #0
   1f178:	d1f5      	bne.n	1f166 <delay_cycles_ms+0xa>
	}
}
   1f17a:	46c0      	nop			; (mov r8, r8)
   1f17c:	46bd      	mov	sp, r7
   1f17e:	b002      	add	sp, #8
   1f180:	bd80      	pop	{r7, pc}
   1f182:	46c0      	nop			; (mov r8, r8)
   1f184:	2000010c 	.word	0x2000010c
   1f188:	0001f0d1 	.word	0x0001f0d1

0001f18c <system_pinmux_get_group_from_gpio_pin>:
{
   1f18c:	b580      	push	{r7, lr}
   1f18e:	b084      	sub	sp, #16
   1f190:	af00      	add	r7, sp, #0
   1f192:	0002      	movs	r2, r0
   1f194:	1dfb      	adds	r3, r7, #7
   1f196:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1f198:	230f      	movs	r3, #15
   1f19a:	18fb      	adds	r3, r7, r3
   1f19c:	1dfa      	adds	r2, r7, #7
   1f19e:	7812      	ldrb	r2, [r2, #0]
   1f1a0:	09d2      	lsrs	r2, r2, #7
   1f1a2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1f1a4:	230e      	movs	r3, #14
   1f1a6:	18fb      	adds	r3, r7, r3
   1f1a8:	1dfa      	adds	r2, r7, #7
   1f1aa:	7812      	ldrb	r2, [r2, #0]
   1f1ac:	0952      	lsrs	r2, r2, #5
   1f1ae:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1f1b0:	4b0d      	ldr	r3, [pc, #52]	; (1f1e8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1f1b2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1f1b4:	230f      	movs	r3, #15
   1f1b6:	18fb      	adds	r3, r7, r3
   1f1b8:	781b      	ldrb	r3, [r3, #0]
   1f1ba:	2b00      	cmp	r3, #0
   1f1bc:	d10f      	bne.n	1f1de <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1f1be:	230f      	movs	r3, #15
   1f1c0:	18fb      	adds	r3, r7, r3
   1f1c2:	781b      	ldrb	r3, [r3, #0]
   1f1c4:	009b      	lsls	r3, r3, #2
   1f1c6:	2210      	movs	r2, #16
   1f1c8:	4694      	mov	ip, r2
   1f1ca:	44bc      	add	ip, r7
   1f1cc:	4463      	add	r3, ip
   1f1ce:	3b08      	subs	r3, #8
   1f1d0:	681a      	ldr	r2, [r3, #0]
   1f1d2:	230e      	movs	r3, #14
   1f1d4:	18fb      	adds	r3, r7, r3
   1f1d6:	781b      	ldrb	r3, [r3, #0]
   1f1d8:	01db      	lsls	r3, r3, #7
   1f1da:	18d3      	adds	r3, r2, r3
   1f1dc:	e000      	b.n	1f1e0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1f1de:	2300      	movs	r3, #0
}
   1f1e0:	0018      	movs	r0, r3
   1f1e2:	46bd      	mov	sp, r7
   1f1e4:	b004      	add	sp, #16
   1f1e6:	bd80      	pop	{r7, pc}
   1f1e8:	41004400 	.word	0x41004400

0001f1ec <system_interrupt_enable_global>:
{
   1f1ec:	b580      	push	{r7, lr}
   1f1ee:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   1f1f0:	4b04      	ldr	r3, [pc, #16]	; (1f204 <system_interrupt_enable_global+0x18>)
   1f1f2:	2201      	movs	r2, #1
   1f1f4:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   1f1f6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   1f1fa:	b662      	cpsie	i
}
   1f1fc:	46c0      	nop			; (mov r8, r8)
   1f1fe:	46bd      	mov	sp, r7
   1f200:	bd80      	pop	{r7, pc}
   1f202:	46c0      	nop			; (mov r8, r8)
   1f204:	20000116 	.word	0x20000116

0001f208 <port_get_group_from_gpio_pin>:
{
   1f208:	b580      	push	{r7, lr}
   1f20a:	b082      	sub	sp, #8
   1f20c:	af00      	add	r7, sp, #0
   1f20e:	0002      	movs	r2, r0
   1f210:	1dfb      	adds	r3, r7, #7
   1f212:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1f214:	1dfb      	adds	r3, r7, #7
   1f216:	781b      	ldrb	r3, [r3, #0]
   1f218:	0018      	movs	r0, r3
   1f21a:	4b03      	ldr	r3, [pc, #12]	; (1f228 <port_get_group_from_gpio_pin+0x20>)
   1f21c:	4798      	blx	r3
   1f21e:	0003      	movs	r3, r0
}
   1f220:	0018      	movs	r0, r3
   1f222:	46bd      	mov	sp, r7
   1f224:	b002      	add	sp, #8
   1f226:	bd80      	pop	{r7, pc}
   1f228:	0001f18d 	.word	0x0001f18d

0001f22c <port_get_config_defaults>:
{
   1f22c:	b580      	push	{r7, lr}
   1f22e:	b082      	sub	sp, #8
   1f230:	af00      	add	r7, sp, #0
   1f232:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1f234:	687b      	ldr	r3, [r7, #4]
   1f236:	2200      	movs	r2, #0
   1f238:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1f23a:	687b      	ldr	r3, [r7, #4]
   1f23c:	2201      	movs	r2, #1
   1f23e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1f240:	687b      	ldr	r3, [r7, #4]
   1f242:	2200      	movs	r2, #0
   1f244:	709a      	strb	r2, [r3, #2]
}
   1f246:	46c0      	nop			; (mov r8, r8)
   1f248:	46bd      	mov	sp, r7
   1f24a:	b002      	add	sp, #8
   1f24c:	bd80      	pop	{r7, pc}
	...

0001f250 <port_pin_set_output_level>:
{
   1f250:	b580      	push	{r7, lr}
   1f252:	b084      	sub	sp, #16
   1f254:	af00      	add	r7, sp, #0
   1f256:	0002      	movs	r2, r0
   1f258:	1dfb      	adds	r3, r7, #7
   1f25a:	701a      	strb	r2, [r3, #0]
   1f25c:	1dbb      	adds	r3, r7, #6
   1f25e:	1c0a      	adds	r2, r1, #0
   1f260:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1f262:	1dfb      	adds	r3, r7, #7
   1f264:	781b      	ldrb	r3, [r3, #0]
   1f266:	0018      	movs	r0, r3
   1f268:	4b0d      	ldr	r3, [pc, #52]	; (1f2a0 <port_pin_set_output_level+0x50>)
   1f26a:	4798      	blx	r3
   1f26c:	0003      	movs	r3, r0
   1f26e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1f270:	1dfb      	adds	r3, r7, #7
   1f272:	781b      	ldrb	r3, [r3, #0]
   1f274:	221f      	movs	r2, #31
   1f276:	4013      	ands	r3, r2
   1f278:	2201      	movs	r2, #1
   1f27a:	409a      	lsls	r2, r3
   1f27c:	0013      	movs	r3, r2
   1f27e:	60bb      	str	r3, [r7, #8]
	if (level) {
   1f280:	1dbb      	adds	r3, r7, #6
   1f282:	781b      	ldrb	r3, [r3, #0]
   1f284:	2b00      	cmp	r3, #0
   1f286:	d003      	beq.n	1f290 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1f288:	68fb      	ldr	r3, [r7, #12]
   1f28a:	68ba      	ldr	r2, [r7, #8]
   1f28c:	619a      	str	r2, [r3, #24]
}
   1f28e:	e002      	b.n	1f296 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1f290:	68fb      	ldr	r3, [r7, #12]
   1f292:	68ba      	ldr	r2, [r7, #8]
   1f294:	615a      	str	r2, [r3, #20]
}
   1f296:	46c0      	nop			; (mov r8, r8)
   1f298:	46bd      	mov	sp, r7
   1f29a:	b004      	add	sp, #16
   1f29c:	bd80      	pop	{r7, pc}
   1f29e:	46c0      	nop			; (mov r8, r8)
   1f2a0:	0001f209 	.word	0x0001f209

0001f2a4 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   1f2a4:	b580      	push	{r7, lr}
   1f2a6:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   1f2a8:	4b04      	ldr	r3, [pc, #16]	; (1f2bc <chip_isr+0x18>)
   1f2aa:	681b      	ldr	r3, [r3, #0]
   1f2ac:	2b00      	cmp	r3, #0
   1f2ae:	d002      	beq.n	1f2b6 <chip_isr+0x12>
		gpfIsr();
   1f2b0:	4b02      	ldr	r3, [pc, #8]	; (1f2bc <chip_isr+0x18>)
   1f2b2:	681b      	ldr	r3, [r3, #0]
   1f2b4:	4798      	blx	r3
	}
}
   1f2b6:	46c0      	nop			; (mov r8, r8)
   1f2b8:	46bd      	mov	sp, r7
   1f2ba:	bd80      	pop	{r7, pc}
   1f2bc:	2000426c 	.word	0x2000426c

0001f2c0 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   1f2c0:	b580      	push	{r7, lr}
   1f2c2:	b082      	sub	sp, #8
   1f2c4:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   1f2c6:	1d3b      	adds	r3, r7, #4
   1f2c8:	0018      	movs	r0, r3
   1f2ca:	4b10      	ldr	r3, [pc, #64]	; (1f30c <init_chip_pins+0x4c>)
   1f2cc:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   1f2ce:	1d3b      	adds	r3, r7, #4
   1f2d0:	2201      	movs	r2, #1
   1f2d2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   1f2d4:	1d3b      	adds	r3, r7, #4
   1f2d6:	0019      	movs	r1, r3
   1f2d8:	201b      	movs	r0, #27
   1f2da:	4b0d      	ldr	r3, [pc, #52]	; (1f310 <init_chip_pins+0x50>)
   1f2dc:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   1f2de:	1d3b      	adds	r3, r7, #4
   1f2e0:	0019      	movs	r1, r3
   1f2e2:	201c      	movs	r0, #28
   1f2e4:	4b0a      	ldr	r3, [pc, #40]	; (1f310 <init_chip_pins+0x50>)
   1f2e6:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   1f2e8:	1d3b      	adds	r3, r7, #4
   1f2ea:	0019      	movs	r1, r3
   1f2ec:	2028      	movs	r0, #40	; 0x28
   1f2ee:	4b08      	ldr	r3, [pc, #32]	; (1f310 <init_chip_pins+0x50>)
   1f2f0:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1f2f2:	2100      	movs	r1, #0
   1f2f4:	201c      	movs	r0, #28
   1f2f6:	4b07      	ldr	r3, [pc, #28]	; (1f314 <init_chip_pins+0x54>)
   1f2f8:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1f2fa:	2100      	movs	r1, #0
   1f2fc:	201b      	movs	r0, #27
   1f2fe:	4b05      	ldr	r3, [pc, #20]	; (1f314 <init_chip_pins+0x54>)
   1f300:	4798      	blx	r3
}
   1f302:	46c0      	nop			; (mov r8, r8)
   1f304:	46bd      	mov	sp, r7
   1f306:	b002      	add	sp, #8
   1f308:	bd80      	pop	{r7, pc}
   1f30a:	46c0      	nop			; (mov r8, r8)
   1f30c:	0001f22d 	.word	0x0001f22d
   1f310:	00025a4d 	.word	0x00025a4d
   1f314:	0001f251 	.word	0x0001f251

0001f318 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   1f318:	b580      	push	{r7, lr}
   1f31a:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   1f31c:	4b0b      	ldr	r3, [pc, #44]	; (1f34c <nm_bsp_init+0x34>)
   1f31e:	2200      	movs	r2, #0
   1f320:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   1f322:	4b0b      	ldr	r3, [pc, #44]	; (1f350 <nm_bsp_init+0x38>)
   1f324:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   1f326:	4b0b      	ldr	r3, [pc, #44]	; (1f354 <nm_bsp_init+0x3c>)
   1f328:	681b      	ldr	r3, [r3, #0]
   1f32a:	2201      	movs	r2, #1
   1f32c:	4013      	ands	r3, r2
   1f32e:	d004      	beq.n	1f33a <nm_bsp_init+0x22>
   1f330:	4b08      	ldr	r3, [pc, #32]	; (1f354 <nm_bsp_init+0x3c>)
   1f332:	681b      	ldr	r3, [r3, #0]
   1f334:	2202      	movs	r2, #2
   1f336:	4013      	ands	r3, r2
   1f338:	d101      	bne.n	1f33e <nm_bsp_init+0x26>
	    delay_init();
   1f33a:	4b07      	ldr	r3, [pc, #28]	; (1f358 <nm_bsp_init+0x40>)
   1f33c:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   1f33e:	4b07      	ldr	r3, [pc, #28]	; (1f35c <nm_bsp_init+0x44>)
   1f340:	4798      	blx	r3

	return M2M_SUCCESS;
   1f342:	2300      	movs	r3, #0
}
   1f344:	0018      	movs	r0, r3
   1f346:	46bd      	mov	sp, r7
   1f348:	bd80      	pop	{r7, pc}
   1f34a:	46c0      	nop			; (mov r8, r8)
   1f34c:	2000426c 	.word	0x2000426c
   1f350:	0001f2c1 	.word	0x0001f2c1
   1f354:	e000e010 	.word	0xe000e010
   1f358:	0001f105 	.word	0x0001f105
   1f35c:	0001f1ed 	.word	0x0001f1ed

0001f360 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   1f360:	b580      	push	{r7, lr}
   1f362:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1f364:	2100      	movs	r1, #0
   1f366:	201c      	movs	r0, #28
   1f368:	4b0b      	ldr	r3, [pc, #44]	; (1f398 <nm_bsp_reset+0x38>)
   1f36a:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1f36c:	2100      	movs	r1, #0
   1f36e:	201b      	movs	r0, #27
   1f370:	4b09      	ldr	r3, [pc, #36]	; (1f398 <nm_bsp_reset+0x38>)
   1f372:	4798      	blx	r3
	nm_bsp_sleep(1);
   1f374:	2001      	movs	r0, #1
   1f376:	4b09      	ldr	r3, [pc, #36]	; (1f39c <nm_bsp_reset+0x3c>)
   1f378:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   1f37a:	2101      	movs	r1, #1
   1f37c:	201c      	movs	r0, #28
   1f37e:	4b06      	ldr	r3, [pc, #24]	; (1f398 <nm_bsp_reset+0x38>)
   1f380:	4798      	blx	r3
	nm_bsp_sleep(10);
   1f382:	200a      	movs	r0, #10
   1f384:	4b05      	ldr	r3, [pc, #20]	; (1f39c <nm_bsp_reset+0x3c>)
   1f386:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   1f388:	2101      	movs	r1, #1
   1f38a:	201b      	movs	r0, #27
   1f38c:	4b02      	ldr	r3, [pc, #8]	; (1f398 <nm_bsp_reset+0x38>)
   1f38e:	4798      	blx	r3
}
   1f390:	46c0      	nop			; (mov r8, r8)
   1f392:	46bd      	mov	sp, r7
   1f394:	bd80      	pop	{r7, pc}
   1f396:	46c0      	nop			; (mov r8, r8)
   1f398:	0001f251 	.word	0x0001f251
   1f39c:	0001f3a1 	.word	0x0001f3a1

0001f3a0 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   1f3a0:	b580      	push	{r7, lr}
   1f3a2:	b082      	sub	sp, #8
   1f3a4:	af00      	add	r7, sp, #0
   1f3a6:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   1f3a8:	687b      	ldr	r3, [r7, #4]
   1f3aa:	0018      	movs	r0, r3
   1f3ac:	4b02      	ldr	r3, [pc, #8]	; (1f3b8 <nm_bsp_sleep+0x18>)
   1f3ae:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   1f3b0:	46c0      	nop			; (mov r8, r8)
   1f3b2:	46bd      	mov	sp, r7
   1f3b4:	b002      	add	sp, #8
   1f3b6:	bd80      	pop	{r7, pc}
   1f3b8:	0001b151 	.word	0x0001b151

0001f3bc <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   1f3bc:	b580      	push	{r7, lr}
   1f3be:	b086      	sub	sp, #24
   1f3c0:	af00      	add	r7, sp, #0
   1f3c2:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   1f3c4:	4b15      	ldr	r3, [pc, #84]	; (1f41c <nm_bsp_register_isr+0x60>)
   1f3c6:	687a      	ldr	r2, [r7, #4]
   1f3c8:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   1f3ca:	230c      	movs	r3, #12
   1f3cc:	18fb      	adds	r3, r7, r3
   1f3ce:	0018      	movs	r0, r3
   1f3d0:	4b13      	ldr	r3, [pc, #76]	; (1f420 <nm_bsp_register_isr+0x64>)
   1f3d2:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   1f3d4:	230c      	movs	r3, #12
   1f3d6:	18fb      	adds	r3, r7, r3
   1f3d8:	2229      	movs	r2, #41	; 0x29
   1f3da:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   1f3dc:	230c      	movs	r3, #12
   1f3de:	18fb      	adds	r3, r7, r3
   1f3e0:	2200      	movs	r2, #0
   1f3e2:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1f3e4:	230c      	movs	r3, #12
   1f3e6:	18fb      	adds	r3, r7, r3
   1f3e8:	2201      	movs	r2, #1
   1f3ea:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1f3ec:	230c      	movs	r3, #12
   1f3ee:	18fb      	adds	r3, r7, r3
   1f3f0:	2202      	movs	r2, #2
   1f3f2:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   1f3f4:	230c      	movs	r3, #12
   1f3f6:	18fb      	adds	r3, r7, r3
   1f3f8:	0019      	movs	r1, r3
   1f3fa:	2009      	movs	r0, #9
   1f3fc:	4b09      	ldr	r3, [pc, #36]	; (1f424 <nm_bsp_register_isr+0x68>)
   1f3fe:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   1f400:	4b09      	ldr	r3, [pc, #36]	; (1f428 <nm_bsp_register_isr+0x6c>)
   1f402:	2200      	movs	r2, #0
   1f404:	2109      	movs	r1, #9
   1f406:	0018      	movs	r0, r3
   1f408:	4b08      	ldr	r3, [pc, #32]	; (1f42c <nm_bsp_register_isr+0x70>)
   1f40a:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1f40c:	2100      	movs	r1, #0
   1f40e:	2009      	movs	r0, #9
   1f410:	4b07      	ldr	r3, [pc, #28]	; (1f430 <nm_bsp_register_isr+0x74>)
   1f412:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   1f414:	46c0      	nop			; (mov r8, r8)
   1f416:	46bd      	mov	sp, r7
   1f418:	b006      	add	sp, #24
   1f41a:	bd80      	pop	{r7, pc}
   1f41c:	2000426c 	.word	0x2000426c
   1f420:	000258f5 	.word	0x000258f5
   1f424:	00025929 	.word	0x00025929
   1f428:	0001f2a5 	.word	0x0001f2a5
   1f42c:	000254f5 	.word	0x000254f5
   1f430:	00025559 	.word	0x00025559

0001f434 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   1f434:	b580      	push	{r7, lr}
   1f436:	b082      	sub	sp, #8
   1f438:	af00      	add	r7, sp, #0
   1f43a:	0002      	movs	r2, r0
   1f43c:	1dfb      	adds	r3, r7, #7
   1f43e:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   1f440:	1dfb      	adds	r3, r7, #7
   1f442:	781b      	ldrb	r3, [r3, #0]
   1f444:	2b00      	cmp	r3, #0
   1f446:	d004      	beq.n	1f452 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1f448:	2100      	movs	r1, #0
   1f44a:	2009      	movs	r0, #9
   1f44c:	4b05      	ldr	r3, [pc, #20]	; (1f464 <nm_bsp_interrupt_ctrl+0x30>)
   1f44e:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   1f450:	e003      	b.n	1f45a <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   1f452:	2100      	movs	r1, #0
   1f454:	2009      	movs	r0, #9
   1f456:	4b04      	ldr	r3, [pc, #16]	; (1f468 <nm_bsp_interrupt_ctrl+0x34>)
   1f458:	4798      	blx	r3
}
   1f45a:	46c0      	nop			; (mov r8, r8)
   1f45c:	46bd      	mov	sp, r7
   1f45e:	b002      	add	sp, #8
   1f460:	bd80      	pop	{r7, pc}
   1f462:	46c0      	nop			; (mov r8, r8)
   1f464:	00025559 	.word	0x00025559
   1f468:	000255a1 	.word	0x000255a1

0001f46c <system_pinmux_get_group_from_gpio_pin>:
{
   1f46c:	b580      	push	{r7, lr}
   1f46e:	b084      	sub	sp, #16
   1f470:	af00      	add	r7, sp, #0
   1f472:	0002      	movs	r2, r0
   1f474:	1dfb      	adds	r3, r7, #7
   1f476:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1f478:	230f      	movs	r3, #15
   1f47a:	18fb      	adds	r3, r7, r3
   1f47c:	1dfa      	adds	r2, r7, #7
   1f47e:	7812      	ldrb	r2, [r2, #0]
   1f480:	09d2      	lsrs	r2, r2, #7
   1f482:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1f484:	230e      	movs	r3, #14
   1f486:	18fb      	adds	r3, r7, r3
   1f488:	1dfa      	adds	r2, r7, #7
   1f48a:	7812      	ldrb	r2, [r2, #0]
   1f48c:	0952      	lsrs	r2, r2, #5
   1f48e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1f490:	4b0d      	ldr	r3, [pc, #52]	; (1f4c8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1f492:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1f494:	230f      	movs	r3, #15
   1f496:	18fb      	adds	r3, r7, r3
   1f498:	781b      	ldrb	r3, [r3, #0]
   1f49a:	2b00      	cmp	r3, #0
   1f49c:	d10f      	bne.n	1f4be <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1f49e:	230f      	movs	r3, #15
   1f4a0:	18fb      	adds	r3, r7, r3
   1f4a2:	781b      	ldrb	r3, [r3, #0]
   1f4a4:	009b      	lsls	r3, r3, #2
   1f4a6:	2210      	movs	r2, #16
   1f4a8:	4694      	mov	ip, r2
   1f4aa:	44bc      	add	ip, r7
   1f4ac:	4463      	add	r3, ip
   1f4ae:	3b08      	subs	r3, #8
   1f4b0:	681a      	ldr	r2, [r3, #0]
   1f4b2:	230e      	movs	r3, #14
   1f4b4:	18fb      	adds	r3, r7, r3
   1f4b6:	781b      	ldrb	r3, [r3, #0]
   1f4b8:	01db      	lsls	r3, r3, #7
   1f4ba:	18d3      	adds	r3, r2, r3
   1f4bc:	e000      	b.n	1f4c0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1f4be:	2300      	movs	r3, #0
}
   1f4c0:	0018      	movs	r0, r3
   1f4c2:	46bd      	mov	sp, r7
   1f4c4:	b004      	add	sp, #16
   1f4c6:	bd80      	pop	{r7, pc}
   1f4c8:	41004400 	.word	0x41004400

0001f4cc <system_interrupt_enable>:
{
   1f4cc:	b580      	push	{r7, lr}
   1f4ce:	b082      	sub	sp, #8
   1f4d0:	af00      	add	r7, sp, #0
   1f4d2:	0002      	movs	r2, r0
   1f4d4:	1dfb      	adds	r3, r7, #7
   1f4d6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1f4d8:	4b06      	ldr	r3, [pc, #24]	; (1f4f4 <system_interrupt_enable+0x28>)
   1f4da:	1dfa      	adds	r2, r7, #7
   1f4dc:	7812      	ldrb	r2, [r2, #0]
   1f4de:	0011      	movs	r1, r2
   1f4e0:	221f      	movs	r2, #31
   1f4e2:	400a      	ands	r2, r1
   1f4e4:	2101      	movs	r1, #1
   1f4e6:	4091      	lsls	r1, r2
   1f4e8:	000a      	movs	r2, r1
   1f4ea:	601a      	str	r2, [r3, #0]
}
   1f4ec:	46c0      	nop			; (mov r8, r8)
   1f4ee:	46bd      	mov	sp, r7
   1f4f0:	b002      	add	sp, #8
   1f4f2:	bd80      	pop	{r7, pc}
   1f4f4:	e000e100 	.word	0xe000e100

0001f4f8 <system_interrupt_disable>:
{
   1f4f8:	b580      	push	{r7, lr}
   1f4fa:	b082      	sub	sp, #8
   1f4fc:	af00      	add	r7, sp, #0
   1f4fe:	0002      	movs	r2, r0
   1f500:	1dfb      	adds	r3, r7, #7
   1f502:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1f504:	4a07      	ldr	r2, [pc, #28]	; (1f524 <system_interrupt_disable+0x2c>)
   1f506:	1dfb      	adds	r3, r7, #7
   1f508:	781b      	ldrb	r3, [r3, #0]
   1f50a:	0019      	movs	r1, r3
   1f50c:	231f      	movs	r3, #31
   1f50e:	400b      	ands	r3, r1
   1f510:	2101      	movs	r1, #1
   1f512:	4099      	lsls	r1, r3
   1f514:	000b      	movs	r3, r1
   1f516:	0019      	movs	r1, r3
   1f518:	2380      	movs	r3, #128	; 0x80
   1f51a:	50d1      	str	r1, [r2, r3]
}
   1f51c:	46c0      	nop			; (mov r8, r8)
   1f51e:	46bd      	mov	sp, r7
   1f520:	b002      	add	sp, #8
   1f522:	bd80      	pop	{r7, pc}
   1f524:	e000e100 	.word	0xe000e100

0001f528 <port_get_group_from_gpio_pin>:
{
   1f528:	b580      	push	{r7, lr}
   1f52a:	b082      	sub	sp, #8
   1f52c:	af00      	add	r7, sp, #0
   1f52e:	0002      	movs	r2, r0
   1f530:	1dfb      	adds	r3, r7, #7
   1f532:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1f534:	1dfb      	adds	r3, r7, #7
   1f536:	781b      	ldrb	r3, [r3, #0]
   1f538:	0018      	movs	r0, r3
   1f53a:	4b03      	ldr	r3, [pc, #12]	; (1f548 <port_get_group_from_gpio_pin+0x20>)
   1f53c:	4798      	blx	r3
   1f53e:	0003      	movs	r3, r0
}
   1f540:	0018      	movs	r0, r3
   1f542:	46bd      	mov	sp, r7
   1f544:	b002      	add	sp, #8
   1f546:	bd80      	pop	{r7, pc}
   1f548:	0001f46d 	.word	0x0001f46d

0001f54c <port_get_config_defaults>:
{
   1f54c:	b580      	push	{r7, lr}
   1f54e:	b082      	sub	sp, #8
   1f550:	af00      	add	r7, sp, #0
   1f552:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1f554:	687b      	ldr	r3, [r7, #4]
   1f556:	2200      	movs	r2, #0
   1f558:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1f55a:	687b      	ldr	r3, [r7, #4]
   1f55c:	2201      	movs	r2, #1
   1f55e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1f560:	687b      	ldr	r3, [r7, #4]
   1f562:	2200      	movs	r2, #0
   1f564:	709a      	strb	r2, [r3, #2]
}
   1f566:	46c0      	nop			; (mov r8, r8)
   1f568:	46bd      	mov	sp, r7
   1f56a:	b002      	add	sp, #8
   1f56c:	bd80      	pop	{r7, pc}
	...

0001f570 <port_pin_set_output_level>:
{
   1f570:	b580      	push	{r7, lr}
   1f572:	b084      	sub	sp, #16
   1f574:	af00      	add	r7, sp, #0
   1f576:	0002      	movs	r2, r0
   1f578:	1dfb      	adds	r3, r7, #7
   1f57a:	701a      	strb	r2, [r3, #0]
   1f57c:	1dbb      	adds	r3, r7, #6
   1f57e:	1c0a      	adds	r2, r1, #0
   1f580:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1f582:	1dfb      	adds	r3, r7, #7
   1f584:	781b      	ldrb	r3, [r3, #0]
   1f586:	0018      	movs	r0, r3
   1f588:	4b0d      	ldr	r3, [pc, #52]	; (1f5c0 <port_pin_set_output_level+0x50>)
   1f58a:	4798      	blx	r3
   1f58c:	0003      	movs	r3, r0
   1f58e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1f590:	1dfb      	adds	r3, r7, #7
   1f592:	781b      	ldrb	r3, [r3, #0]
   1f594:	221f      	movs	r2, #31
   1f596:	4013      	ands	r3, r2
   1f598:	2201      	movs	r2, #1
   1f59a:	409a      	lsls	r2, r3
   1f59c:	0013      	movs	r3, r2
   1f59e:	60bb      	str	r3, [r7, #8]
	if (level) {
   1f5a0:	1dbb      	adds	r3, r7, #6
   1f5a2:	781b      	ldrb	r3, [r3, #0]
   1f5a4:	2b00      	cmp	r3, #0
   1f5a6:	d003      	beq.n	1f5b0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1f5a8:	68fb      	ldr	r3, [r7, #12]
   1f5aa:	68ba      	ldr	r2, [r7, #8]
   1f5ac:	619a      	str	r2, [r3, #24]
}
   1f5ae:	e002      	b.n	1f5b6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1f5b0:	68fb      	ldr	r3, [r7, #12]
   1f5b2:	68ba      	ldr	r2, [r7, #8]
   1f5b4:	615a      	str	r2, [r3, #20]
}
   1f5b6:	46c0      	nop			; (mov r8, r8)
   1f5b8:	46bd      	mov	sp, r7
   1f5ba:	b004      	add	sp, #16
   1f5bc:	bd80      	pop	{r7, pc}
   1f5be:	46c0      	nop			; (mov r8, r8)
   1f5c0:	0001f529 	.word	0x0001f529

0001f5c4 <spi_is_syncing>:
{
   1f5c4:	b580      	push	{r7, lr}
   1f5c6:	b084      	sub	sp, #16
   1f5c8:	af00      	add	r7, sp, #0
   1f5ca:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1f5cc:	687b      	ldr	r3, [r7, #4]
   1f5ce:	681b      	ldr	r3, [r3, #0]
   1f5d0:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   1f5d2:	68fb      	ldr	r3, [r7, #12]
   1f5d4:	69db      	ldr	r3, [r3, #28]
   1f5d6:	1e5a      	subs	r2, r3, #1
   1f5d8:	4193      	sbcs	r3, r2
   1f5da:	b2db      	uxtb	r3, r3
}
   1f5dc:	0018      	movs	r0, r3
   1f5de:	46bd      	mov	sp, r7
   1f5e0:	b004      	add	sp, #16
   1f5e2:	bd80      	pop	{r7, pc}

0001f5e4 <spi_get_config_defaults>:
{
   1f5e4:	b580      	push	{r7, lr}
   1f5e6:	b082      	sub	sp, #8
   1f5e8:	af00      	add	r7, sp, #0
   1f5ea:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   1f5ec:	687b      	ldr	r3, [r7, #4]
   1f5ee:	2201      	movs	r2, #1
   1f5f0:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1f5f2:	687b      	ldr	r3, [r7, #4]
   1f5f4:	2200      	movs	r2, #0
   1f5f6:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1f5f8:	687b      	ldr	r3, [r7, #4]
   1f5fa:	2200      	movs	r2, #0
   1f5fc:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1f5fe:	687b      	ldr	r3, [r7, #4]
   1f600:	22c0      	movs	r2, #192	; 0xc0
   1f602:	0392      	lsls	r2, r2, #14
   1f604:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1f606:	687b      	ldr	r3, [r7, #4]
   1f608:	2200      	movs	r2, #0
   1f60a:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1f60c:	687b      	ldr	r3, [r7, #4]
   1f60e:	2200      	movs	r2, #0
   1f610:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1f612:	687b      	ldr	r3, [r7, #4]
   1f614:	2201      	movs	r2, #1
   1f616:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   1f618:	687b      	ldr	r3, [r7, #4]
   1f61a:	2201      	movs	r2, #1
   1f61c:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   1f61e:	687b      	ldr	r3, [r7, #4]
   1f620:	2200      	movs	r2, #0
   1f622:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   1f624:	687b      	ldr	r3, [r7, #4]
   1f626:	2224      	movs	r2, #36	; 0x24
   1f628:	2100      	movs	r1, #0
   1f62a:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1f62c:	687b      	ldr	r3, [r7, #4]
   1f62e:	3318      	adds	r3, #24
   1f630:	220c      	movs	r2, #12
   1f632:	2100      	movs	r1, #0
   1f634:	0018      	movs	r0, r3
   1f636:	4b0a      	ldr	r3, [pc, #40]	; (1f660 <spi_get_config_defaults+0x7c>)
   1f638:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   1f63a:	687b      	ldr	r3, [r7, #4]
   1f63c:	4a09      	ldr	r2, [pc, #36]	; (1f664 <spi_get_config_defaults+0x80>)
   1f63e:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1f640:	687b      	ldr	r3, [r7, #4]
   1f642:	2200      	movs	r2, #0
   1f644:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1f646:	687b      	ldr	r3, [r7, #4]
   1f648:	2200      	movs	r2, #0
   1f64a:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1f64c:	687b      	ldr	r3, [r7, #4]
   1f64e:	2200      	movs	r2, #0
   1f650:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1f652:	687b      	ldr	r3, [r7, #4]
   1f654:	2200      	movs	r2, #0
   1f656:	635a      	str	r2, [r3, #52]	; 0x34
};
   1f658:	46c0      	nop			; (mov r8, r8)
   1f65a:	46bd      	mov	sp, r7
   1f65c:	b002      	add	sp, #8
   1f65e:	bd80      	pop	{r7, pc}
   1f660:	0003457f 	.word	0x0003457f
   1f664:	000186a0 	.word	0x000186a0

0001f668 <spi_slave_inst_get_config_defaults>:
{
   1f668:	b580      	push	{r7, lr}
   1f66a:	b082      	sub	sp, #8
   1f66c:	af00      	add	r7, sp, #0
   1f66e:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   1f670:	687b      	ldr	r3, [r7, #4]
   1f672:	220a      	movs	r2, #10
   1f674:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1f676:	687b      	ldr	r3, [r7, #4]
   1f678:	2200      	movs	r2, #0
   1f67a:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1f67c:	687b      	ldr	r3, [r7, #4]
   1f67e:	2200      	movs	r2, #0
   1f680:	709a      	strb	r2, [r3, #2]
}
   1f682:	46c0      	nop			; (mov r8, r8)
   1f684:	46bd      	mov	sp, r7
   1f686:	b002      	add	sp, #8
   1f688:	bd80      	pop	{r7, pc}
	...

0001f68c <spi_attach_slave>:
{
   1f68c:	b580      	push	{r7, lr}
   1f68e:	b084      	sub	sp, #16
   1f690:	af00      	add	r7, sp, #0
   1f692:	6078      	str	r0, [r7, #4]
   1f694:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   1f696:	683b      	ldr	r3, [r7, #0]
   1f698:	781a      	ldrb	r2, [r3, #0]
   1f69a:	687b      	ldr	r3, [r7, #4]
   1f69c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1f69e:	683b      	ldr	r3, [r7, #0]
   1f6a0:	785a      	ldrb	r2, [r3, #1]
   1f6a2:	687b      	ldr	r3, [r7, #4]
   1f6a4:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1f6a6:	683b      	ldr	r3, [r7, #0]
   1f6a8:	789a      	ldrb	r2, [r3, #2]
   1f6aa:	687b      	ldr	r3, [r7, #4]
   1f6ac:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   1f6ae:	230c      	movs	r3, #12
   1f6b0:	18fb      	adds	r3, r7, r3
   1f6b2:	0018      	movs	r0, r3
   1f6b4:	4b0b      	ldr	r3, [pc, #44]	; (1f6e4 <spi_attach_slave+0x58>)
   1f6b6:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1f6b8:	230c      	movs	r3, #12
   1f6ba:	18fb      	adds	r3, r7, r3
   1f6bc:	2201      	movs	r2, #1
   1f6be:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1f6c0:	687b      	ldr	r3, [r7, #4]
   1f6c2:	781b      	ldrb	r3, [r3, #0]
   1f6c4:	220c      	movs	r2, #12
   1f6c6:	18ba      	adds	r2, r7, r2
   1f6c8:	0011      	movs	r1, r2
   1f6ca:	0018      	movs	r0, r3
   1f6cc:	4b06      	ldr	r3, [pc, #24]	; (1f6e8 <spi_attach_slave+0x5c>)
   1f6ce:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1f6d0:	687b      	ldr	r3, [r7, #4]
   1f6d2:	781b      	ldrb	r3, [r3, #0]
   1f6d4:	2101      	movs	r1, #1
   1f6d6:	0018      	movs	r0, r3
   1f6d8:	4b04      	ldr	r3, [pc, #16]	; (1f6ec <spi_attach_slave+0x60>)
   1f6da:	4798      	blx	r3
}
   1f6dc:	46c0      	nop			; (mov r8, r8)
   1f6de:	46bd      	mov	sp, r7
   1f6e0:	b004      	add	sp, #16
   1f6e2:	bd80      	pop	{r7, pc}
   1f6e4:	0001f54d 	.word	0x0001f54d
   1f6e8:	00025a4d 	.word	0x00025a4d
   1f6ec:	0001f571 	.word	0x0001f571

0001f6f0 <spi_enable>:
{
   1f6f0:	b580      	push	{r7, lr}
   1f6f2:	b084      	sub	sp, #16
   1f6f4:	af00      	add	r7, sp, #0
   1f6f6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1f6f8:	687b      	ldr	r3, [r7, #4]
   1f6fa:	681b      	ldr	r3, [r3, #0]
   1f6fc:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1f6fe:	687b      	ldr	r3, [r7, #4]
   1f700:	681b      	ldr	r3, [r3, #0]
   1f702:	0018      	movs	r0, r3
   1f704:	4b0b      	ldr	r3, [pc, #44]	; (1f734 <spi_enable+0x44>)
   1f706:	4798      	blx	r3
   1f708:	0003      	movs	r3, r0
   1f70a:	0018      	movs	r0, r3
   1f70c:	4b0a      	ldr	r3, [pc, #40]	; (1f738 <spi_enable+0x48>)
   1f70e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   1f710:	46c0      	nop			; (mov r8, r8)
   1f712:	687b      	ldr	r3, [r7, #4]
   1f714:	0018      	movs	r0, r3
   1f716:	4b09      	ldr	r3, [pc, #36]	; (1f73c <spi_enable+0x4c>)
   1f718:	4798      	blx	r3
   1f71a:	1e03      	subs	r3, r0, #0
   1f71c:	d1f9      	bne.n	1f712 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1f71e:	68fb      	ldr	r3, [r7, #12]
   1f720:	681b      	ldr	r3, [r3, #0]
   1f722:	2202      	movs	r2, #2
   1f724:	431a      	orrs	r2, r3
   1f726:	68fb      	ldr	r3, [r7, #12]
   1f728:	601a      	str	r2, [r3, #0]
}
   1f72a:	46c0      	nop			; (mov r8, r8)
   1f72c:	46bd      	mov	sp, r7
   1f72e:	b004      	add	sp, #16
   1f730:	bd80      	pop	{r7, pc}
   1f732:	46c0      	nop			; (mov r8, r8)
   1f734:	0002671d 	.word	0x0002671d
   1f738:	0001f4cd 	.word	0x0001f4cd
   1f73c:	0001f5c5 	.word	0x0001f5c5

0001f740 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   1f740:	b580      	push	{r7, lr}
   1f742:	b084      	sub	sp, #16
   1f744:	af00      	add	r7, sp, #0
   1f746:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f748:	687b      	ldr	r3, [r7, #4]
   1f74a:	681b      	ldr	r3, [r3, #0]
   1f74c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1f74e:	687b      	ldr	r3, [r7, #4]
   1f750:	681b      	ldr	r3, [r3, #0]
   1f752:	0018      	movs	r0, r3
   1f754:	4b0e      	ldr	r3, [pc, #56]	; (1f790 <spi_disable+0x50>)
   1f756:	4798      	blx	r3
   1f758:	0003      	movs	r3, r0
   1f75a:	0018      	movs	r0, r3
   1f75c:	4b0d      	ldr	r3, [pc, #52]	; (1f794 <spi_disable+0x54>)
   1f75e:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   1f760:	46c0      	nop			; (mov r8, r8)
   1f762:	687b      	ldr	r3, [r7, #4]
   1f764:	0018      	movs	r0, r3
   1f766:	4b0c      	ldr	r3, [pc, #48]	; (1f798 <spi_disable+0x58>)
   1f768:	4798      	blx	r3
   1f76a:	1e03      	subs	r3, r0, #0
   1f76c:	d1f9      	bne.n	1f762 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   1f76e:	68fb      	ldr	r3, [r7, #12]
   1f770:	228f      	movs	r2, #143	; 0x8f
   1f772:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   1f774:	68fb      	ldr	r3, [r7, #12]
   1f776:	228f      	movs	r2, #143	; 0x8f
   1f778:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1f77a:	68fb      	ldr	r3, [r7, #12]
   1f77c:	681b      	ldr	r3, [r3, #0]
   1f77e:	2202      	movs	r2, #2
   1f780:	4393      	bics	r3, r2
   1f782:	001a      	movs	r2, r3
   1f784:	68fb      	ldr	r3, [r7, #12]
   1f786:	601a      	str	r2, [r3, #0]
}
   1f788:	46c0      	nop			; (mov r8, r8)
   1f78a:	46bd      	mov	sp, r7
   1f78c:	b004      	add	sp, #16
   1f78e:	bd80      	pop	{r7, pc}
   1f790:	0002671d 	.word	0x0002671d
   1f794:	0001f4f9 	.word	0x0001f4f9
   1f798:	0001f5c5 	.word	0x0001f5c5

0001f79c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   1f79c:	b580      	push	{r7, lr}
   1f79e:	b084      	sub	sp, #16
   1f7a0:	af00      	add	r7, sp, #0
   1f7a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f7a4:	687b      	ldr	r3, [r7, #4]
   1f7a6:	681b      	ldr	r3, [r3, #0]
   1f7a8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   1f7aa:	68fb      	ldr	r3, [r7, #12]
   1f7ac:	7e1b      	ldrb	r3, [r3, #24]
   1f7ae:	b2db      	uxtb	r3, r3
   1f7b0:	001a      	movs	r2, r3
   1f7b2:	2302      	movs	r3, #2
   1f7b4:	4013      	ands	r3, r2
   1f7b6:	1e5a      	subs	r2, r3, #1
   1f7b8:	4193      	sbcs	r3, r2
   1f7ba:	b2db      	uxtb	r3, r3
}
   1f7bc:	0018      	movs	r0, r3
   1f7be:	46bd      	mov	sp, r7
   1f7c0:	b004      	add	sp, #16
   1f7c2:	bd80      	pop	{r7, pc}

0001f7c4 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   1f7c4:	b580      	push	{r7, lr}
   1f7c6:	b084      	sub	sp, #16
   1f7c8:	af00      	add	r7, sp, #0
   1f7ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f7cc:	687b      	ldr	r3, [r7, #4]
   1f7ce:	681b      	ldr	r3, [r3, #0]
   1f7d0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1f7d2:	68fb      	ldr	r3, [r7, #12]
   1f7d4:	7e1b      	ldrb	r3, [r3, #24]
   1f7d6:	b2db      	uxtb	r3, r3
   1f7d8:	001a      	movs	r2, r3
   1f7da:	2301      	movs	r3, #1
   1f7dc:	4013      	ands	r3, r2
   1f7de:	1e5a      	subs	r2, r3, #1
   1f7e0:	4193      	sbcs	r3, r2
   1f7e2:	b2db      	uxtb	r3, r3
}
   1f7e4:	0018      	movs	r0, r3
   1f7e6:	46bd      	mov	sp, r7
   1f7e8:	b004      	add	sp, #16
   1f7ea:	bd80      	pop	{r7, pc}

0001f7ec <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   1f7ec:	b580      	push	{r7, lr}
   1f7ee:	b084      	sub	sp, #16
   1f7f0:	af00      	add	r7, sp, #0
   1f7f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f7f4:	687b      	ldr	r3, [r7, #4]
   1f7f6:	681b      	ldr	r3, [r3, #0]
   1f7f8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1f7fa:	68fb      	ldr	r3, [r7, #12]
   1f7fc:	7e1b      	ldrb	r3, [r3, #24]
   1f7fe:	b2db      	uxtb	r3, r3
   1f800:	001a      	movs	r2, r3
   1f802:	2304      	movs	r3, #4
   1f804:	4013      	ands	r3, r2
   1f806:	1e5a      	subs	r2, r3, #1
   1f808:	4193      	sbcs	r3, r2
   1f80a:	b2db      	uxtb	r3, r3
}
   1f80c:	0018      	movs	r0, r3
   1f80e:	46bd      	mov	sp, r7
   1f810:	b004      	add	sp, #16
   1f812:	bd80      	pop	{r7, pc}

0001f814 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   1f814:	b580      	push	{r7, lr}
   1f816:	b084      	sub	sp, #16
   1f818:	af00      	add	r7, sp, #0
   1f81a:	6078      	str	r0, [r7, #4]
   1f81c:	000a      	movs	r2, r1
   1f81e:	1cbb      	adds	r3, r7, #2
   1f820:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f822:	687b      	ldr	r3, [r7, #4]
   1f824:	681b      	ldr	r3, [r3, #0]
   1f826:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   1f828:	687b      	ldr	r3, [r7, #4]
   1f82a:	0018      	movs	r0, r3
   1f82c:	4b0a      	ldr	r3, [pc, #40]	; (1f858 <spi_write+0x44>)
   1f82e:	4798      	blx	r3
   1f830:	0003      	movs	r3, r0
   1f832:	001a      	movs	r2, r3
   1f834:	2301      	movs	r3, #1
   1f836:	4053      	eors	r3, r2
   1f838:	b2db      	uxtb	r3, r3
   1f83a:	2b00      	cmp	r3, #0
   1f83c:	d001      	beq.n	1f842 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   1f83e:	2305      	movs	r3, #5
   1f840:	e006      	b.n	1f850 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1f842:	1cbb      	adds	r3, r7, #2
   1f844:	881b      	ldrh	r3, [r3, #0]
   1f846:	05db      	lsls	r3, r3, #23
   1f848:	0dda      	lsrs	r2, r3, #23
   1f84a:	68fb      	ldr	r3, [r7, #12]
   1f84c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   1f84e:	2300      	movs	r3, #0
}
   1f850:	0018      	movs	r0, r3
   1f852:	46bd      	mov	sp, r7
   1f854:	b004      	add	sp, #16
   1f856:	bd80      	pop	{r7, pc}
   1f858:	0001f7c5 	.word	0x0001f7c5

0001f85c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   1f85c:	b580      	push	{r7, lr}
   1f85e:	b084      	sub	sp, #16
   1f860:	af00      	add	r7, sp, #0
   1f862:	6078      	str	r0, [r7, #4]
   1f864:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f866:	687b      	ldr	r3, [r7, #4]
   1f868:	681b      	ldr	r3, [r3, #0]
   1f86a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   1f86c:	687b      	ldr	r3, [r7, #4]
   1f86e:	0018      	movs	r0, r3
   1f870:	4b1b      	ldr	r3, [pc, #108]	; (1f8e0 <spi_read+0x84>)
   1f872:	4798      	blx	r3
   1f874:	0003      	movs	r3, r0
   1f876:	001a      	movs	r2, r3
   1f878:	2301      	movs	r3, #1
   1f87a:	4053      	eors	r3, r2
   1f87c:	b2db      	uxtb	r3, r3
   1f87e:	2b00      	cmp	r3, #0
   1f880:	d001      	beq.n	1f886 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   1f882:	2310      	movs	r3, #16
   1f884:	e027      	b.n	1f8d6 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   1f886:	230f      	movs	r3, #15
   1f888:	18fb      	adds	r3, r7, r3
   1f88a:	2200      	movs	r2, #0
   1f88c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1f88e:	68bb      	ldr	r3, [r7, #8]
   1f890:	8b5b      	ldrh	r3, [r3, #26]
   1f892:	b29b      	uxth	r3, r3
   1f894:	001a      	movs	r2, r3
   1f896:	2304      	movs	r3, #4
   1f898:	4013      	ands	r3, r2
   1f89a:	d006      	beq.n	1f8aa <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   1f89c:	230f      	movs	r3, #15
   1f89e:	18fb      	adds	r3, r7, r3
   1f8a0:	221e      	movs	r2, #30
   1f8a2:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1f8a4:	68bb      	ldr	r3, [r7, #8]
   1f8a6:	2204      	movs	r2, #4
   1f8a8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1f8aa:	687b      	ldr	r3, [r7, #4]
   1f8ac:	799b      	ldrb	r3, [r3, #6]
   1f8ae:	2b01      	cmp	r3, #1
   1f8b0:	d108      	bne.n	1f8c4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1f8b2:	68bb      	ldr	r3, [r7, #8]
   1f8b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f8b6:	b29b      	uxth	r3, r3
   1f8b8:	05db      	lsls	r3, r3, #23
   1f8ba:	0ddb      	lsrs	r3, r3, #23
   1f8bc:	b29a      	uxth	r2, r3
   1f8be:	683b      	ldr	r3, [r7, #0]
   1f8c0:	801a      	strh	r2, [r3, #0]
   1f8c2:	e005      	b.n	1f8d0 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1f8c4:	68bb      	ldr	r3, [r7, #8]
   1f8c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f8c8:	b2db      	uxtb	r3, r3
   1f8ca:	b29a      	uxth	r2, r3
   1f8cc:	683b      	ldr	r3, [r7, #0]
   1f8ce:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   1f8d0:	230f      	movs	r3, #15
   1f8d2:	18fb      	adds	r3, r7, r3
   1f8d4:	781b      	ldrb	r3, [r3, #0]
}
   1f8d6:	0018      	movs	r0, r3
   1f8d8:	46bd      	mov	sp, r7
   1f8da:	b004      	add	sp, #16
   1f8dc:	bd80      	pop	{r7, pc}
   1f8de:	46c0      	nop			; (mov r8, r8)
   1f8e0:	0001f7ed 	.word	0x0001f7ed

0001f8e4 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   1f8e4:	b580      	push	{r7, lr}
   1f8e6:	b086      	sub	sp, #24
   1f8e8:	af00      	add	r7, sp, #0
   1f8ea:	60f8      	str	r0, [r7, #12]
   1f8ec:	60b9      	str	r1, [r7, #8]
   1f8ee:	1dbb      	adds	r3, r7, #6
   1f8f0:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   1f8f2:	2313      	movs	r3, #19
   1f8f4:	18fb      	adds	r3, r7, r3
   1f8f6:	22ff      	movs	r2, #255	; 0xff
   1f8f8:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   1f8fa:	2317      	movs	r3, #23
   1f8fc:	18fb      	adds	r3, r7, r3
   1f8fe:	2200      	movs	r2, #0
   1f900:	701a      	strb	r2, [r3, #0]
   1f902:	2316      	movs	r3, #22
   1f904:	18fb      	adds	r3, r7, r3
   1f906:	2200      	movs	r2, #0
   1f908:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   1f90a:	2314      	movs	r3, #20
   1f90c:	18fb      	adds	r3, r7, r3
   1f90e:	2200      	movs	r2, #0
   1f910:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   1f912:	2310      	movs	r3, #16
   1f914:	18fb      	adds	r3, r7, r3
   1f916:	2200      	movs	r2, #0
   1f918:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   1f91a:	68bb      	ldr	r3, [r7, #8]
   1f91c:	2b00      	cmp	r3, #0
   1f91e:	d102      	bne.n	1f926 <spi_rw+0x42>
   1f920:	68fb      	ldr	r3, [r7, #12]
   1f922:	2b00      	cmp	r3, #0
   1f924:	d003      	beq.n	1f92e <spi_rw+0x4a>
   1f926:	1dbb      	adds	r3, r7, #6
   1f928:	881b      	ldrh	r3, [r3, #0]
   1f92a:	2b00      	cmp	r3, #0
   1f92c:	d102      	bne.n	1f934 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   1f92e:	230f      	movs	r3, #15
   1f930:	425b      	negs	r3, r3
   1f932:	e07e      	b.n	1fa32 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   1f934:	68fb      	ldr	r3, [r7, #12]
   1f936:	2b00      	cmp	r3, #0
   1f938:	d106      	bne.n	1f948 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   1f93a:	2313      	movs	r3, #19
   1f93c:	18fb      	adds	r3, r7, r3
   1f93e:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   1f940:	2317      	movs	r3, #23
   1f942:	18fb      	adds	r3, r7, r3
   1f944:	2201      	movs	r2, #1
   1f946:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   1f948:	68bb      	ldr	r3, [r7, #8]
   1f94a:	2b00      	cmp	r3, #0
   1f94c:	d106      	bne.n	1f95c <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   1f94e:	2313      	movs	r3, #19
   1f950:	18fb      	adds	r3, r7, r3
   1f952:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   1f954:	2316      	movs	r3, #22
   1f956:	18fb      	adds	r3, r7, r3
   1f958:	2201      	movs	r2, #1
   1f95a:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   1f95c:	4937      	ldr	r1, [pc, #220]	; (1fa3c <spi_rw+0x158>)
   1f95e:	4b38      	ldr	r3, [pc, #224]	; (1fa40 <spi_rw+0x15c>)
   1f960:	2201      	movs	r2, #1
   1f962:	0018      	movs	r0, r3
   1f964:	4b37      	ldr	r3, [pc, #220]	; (1fa44 <spi_rw+0x160>)
   1f966:	4798      	blx	r3

	while (u16Sz) {
   1f968:	e04c      	b.n	1fa04 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   1f96a:	68fb      	ldr	r3, [r7, #12]
   1f96c:	781a      	ldrb	r2, [r3, #0]
   1f96e:	2314      	movs	r3, #20
   1f970:	18fb      	adds	r3, r7, r3
   1f972:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   1f974:	46c0      	nop			; (mov r8, r8)
   1f976:	4b32      	ldr	r3, [pc, #200]	; (1fa40 <spi_rw+0x15c>)
   1f978:	0018      	movs	r0, r3
   1f97a:	4b33      	ldr	r3, [pc, #204]	; (1fa48 <spi_rw+0x164>)
   1f97c:	4798      	blx	r3
   1f97e:	0003      	movs	r3, r0
   1f980:	001a      	movs	r2, r3
   1f982:	2301      	movs	r3, #1
   1f984:	4053      	eors	r3, r2
   1f986:	b2db      	uxtb	r3, r3
   1f988:	2b00      	cmp	r3, #0
   1f98a:	d1f4      	bne.n	1f976 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   1f98c:	46c0      	nop			; (mov r8, r8)
   1f98e:	2314      	movs	r3, #20
   1f990:	18fb      	adds	r3, r7, r3
   1f992:	881a      	ldrh	r2, [r3, #0]
   1f994:	4b2a      	ldr	r3, [pc, #168]	; (1fa40 <spi_rw+0x15c>)
   1f996:	0011      	movs	r1, r2
   1f998:	0018      	movs	r0, r3
   1f99a:	4b2c      	ldr	r3, [pc, #176]	; (1fa4c <spi_rw+0x168>)
   1f99c:	4798      	blx	r3
   1f99e:	1e03      	subs	r3, r0, #0
   1f9a0:	d1f5      	bne.n	1f98e <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   1f9a2:	46c0      	nop			; (mov r8, r8)
   1f9a4:	4b26      	ldr	r3, [pc, #152]	; (1fa40 <spi_rw+0x15c>)
   1f9a6:	0018      	movs	r0, r3
   1f9a8:	4b29      	ldr	r3, [pc, #164]	; (1fa50 <spi_rw+0x16c>)
   1f9aa:	4798      	blx	r3
   1f9ac:	0003      	movs	r3, r0
   1f9ae:	001a      	movs	r2, r3
   1f9b0:	2301      	movs	r3, #1
   1f9b2:	4053      	eors	r3, r2
   1f9b4:	b2db      	uxtb	r3, r3
   1f9b6:	2b00      	cmp	r3, #0
   1f9b8:	d1f4      	bne.n	1f9a4 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   1f9ba:	46c0      	nop			; (mov r8, r8)
   1f9bc:	2310      	movs	r3, #16
   1f9be:	18fa      	adds	r2, r7, r3
   1f9c0:	4b1f      	ldr	r3, [pc, #124]	; (1fa40 <spi_rw+0x15c>)
   1f9c2:	0011      	movs	r1, r2
   1f9c4:	0018      	movs	r0, r3
   1f9c6:	4b23      	ldr	r3, [pc, #140]	; (1fa54 <spi_rw+0x170>)
   1f9c8:	4798      	blx	r3
   1f9ca:	1e03      	subs	r3, r0, #0
   1f9cc:	d1f6      	bne.n	1f9bc <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   1f9ce:	2310      	movs	r3, #16
   1f9d0:	18fb      	adds	r3, r7, r3
   1f9d2:	881b      	ldrh	r3, [r3, #0]
   1f9d4:	b2da      	uxtb	r2, r3
   1f9d6:	68bb      	ldr	r3, [r7, #8]
   1f9d8:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   1f9da:	1dbb      	adds	r3, r7, #6
   1f9dc:	881a      	ldrh	r2, [r3, #0]
   1f9de:	1dbb      	adds	r3, r7, #6
   1f9e0:	3a01      	subs	r2, #1
   1f9e2:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   1f9e4:	2316      	movs	r3, #22
   1f9e6:	18fb      	adds	r3, r7, r3
   1f9e8:	781b      	ldrb	r3, [r3, #0]
   1f9ea:	2b00      	cmp	r3, #0
   1f9ec:	d102      	bne.n	1f9f4 <spi_rw+0x110>
			pu8Miso++;
   1f9ee:	68bb      	ldr	r3, [r7, #8]
   1f9f0:	3301      	adds	r3, #1
   1f9f2:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   1f9f4:	2317      	movs	r3, #23
   1f9f6:	18fb      	adds	r3, r7, r3
   1f9f8:	781b      	ldrb	r3, [r3, #0]
   1f9fa:	2b00      	cmp	r3, #0
   1f9fc:	d102      	bne.n	1fa04 <spi_rw+0x120>
			pu8Mosi++;
   1f9fe:	68fb      	ldr	r3, [r7, #12]
   1fa00:	3301      	adds	r3, #1
   1fa02:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   1fa04:	1dbb      	adds	r3, r7, #6
   1fa06:	881b      	ldrh	r3, [r3, #0]
   1fa08:	2b00      	cmp	r3, #0
   1fa0a:	d1ae      	bne.n	1f96a <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   1fa0c:	46c0      	nop			; (mov r8, r8)
   1fa0e:	4b0c      	ldr	r3, [pc, #48]	; (1fa40 <spi_rw+0x15c>)
   1fa10:	0018      	movs	r0, r3
   1fa12:	4b11      	ldr	r3, [pc, #68]	; (1fa58 <spi_rw+0x174>)
   1fa14:	4798      	blx	r3
   1fa16:	0003      	movs	r3, r0
   1fa18:	001a      	movs	r2, r3
   1fa1a:	2301      	movs	r3, #1
   1fa1c:	4053      	eors	r3, r2
   1fa1e:	b2db      	uxtb	r3, r3
   1fa20:	2b00      	cmp	r3, #0
   1fa22:	d1f4      	bne.n	1fa0e <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   1fa24:	4905      	ldr	r1, [pc, #20]	; (1fa3c <spi_rw+0x158>)
   1fa26:	4b06      	ldr	r3, [pc, #24]	; (1fa40 <spi_rw+0x15c>)
   1fa28:	2200      	movs	r2, #0
   1fa2a:	0018      	movs	r0, r3
   1fa2c:	4b05      	ldr	r3, [pc, #20]	; (1fa44 <spi_rw+0x160>)
   1fa2e:	4798      	blx	r3

	return M2M_SUCCESS;
   1fa30:	2300      	movs	r3, #0
}
   1fa32:	0018      	movs	r0, r3
   1fa34:	46bd      	mov	sp, r7
   1fa36:	b006      	add	sp, #24
   1fa38:	bd80      	pop	{r7, pc}
   1fa3a:	46c0      	nop			; (mov r8, r8)
   1fa3c:	20005a58 	.word	0x20005a58
   1fa40:	20005a5c 	.word	0x20005a5c
   1fa44:	00027191 	.word	0x00027191
   1fa48:	0001f7c5 	.word	0x0001f7c5
   1fa4c:	0001f815 	.word	0x0001f815
   1fa50:	0001f7ed 	.word	0x0001f7ed
   1fa54:	0001f85d 	.word	0x0001f85d
   1fa58:	0001f79d 	.word	0x0001f79d

0001fa5c <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   1fa5c:	b580      	push	{r7, lr}
   1fa5e:	b092      	sub	sp, #72	; 0x48
   1fa60:	af00      	add	r7, sp, #0
   1fa62:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   1fa64:	2347      	movs	r3, #71	; 0x47
   1fa66:	18fb      	adds	r3, r7, r3
   1fa68:	2200      	movs	r2, #0
   1fa6a:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   1fa6c:	2308      	movs	r3, #8
   1fa6e:	18fb      	adds	r3, r7, r3
   1fa70:	0018      	movs	r0, r3
   1fa72:	4b26      	ldr	r3, [pc, #152]	; (1fb0c <nm_bus_init+0xb0>)
   1fa74:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   1fa76:	2308      	movs	r3, #8
   1fa78:	18fb      	adds	r3, r7, r3
   1fa7a:	220e      	movs	r2, #14
   1fa7c:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   1fa7e:	2308      	movs	r3, #8
   1fa80:	18fa      	adds	r2, r7, r3
   1fa82:	4b23      	ldr	r3, [pc, #140]	; (1fb10 <nm_bus_init+0xb4>)
   1fa84:	0011      	movs	r1, r2
   1fa86:	0018      	movs	r0, r3
   1fa88:	4b22      	ldr	r3, [pc, #136]	; (1fb14 <nm_bus_init+0xb8>)
   1fa8a:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   1fa8c:	230c      	movs	r3, #12
   1fa8e:	18fb      	adds	r3, r7, r3
   1fa90:	0018      	movs	r0, r3
   1fa92:	4b21      	ldr	r3, [pc, #132]	; (1fb18 <nm_bus_init+0xbc>)
   1fa94:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   1fa96:	230c      	movs	r3, #12
   1fa98:	18fb      	adds	r3, r7, r3
   1fa9a:	22c0      	movs	r2, #192	; 0xc0
   1fa9c:	0392      	lsls	r2, r2, #14
   1fa9e:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   1faa0:	230c      	movs	r3, #12
   1faa2:	18fb      	adds	r3, r7, r3
   1faa4:	4a1d      	ldr	r2, [pc, #116]	; (1fb1c <nm_bus_init+0xc0>)
   1faa6:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   1faa8:	230c      	movs	r3, #12
   1faaa:	18fb      	adds	r3, r7, r3
   1faac:	4a1c      	ldr	r2, [pc, #112]	; (1fb20 <nm_bus_init+0xc4>)
   1faae:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   1fab0:	230c      	movs	r3, #12
   1fab2:	18fb      	adds	r3, r7, r3
   1fab4:	2201      	movs	r2, #1
   1fab6:	4252      	negs	r2, r2
   1fab8:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   1faba:	230c      	movs	r3, #12
   1fabc:	18fb      	adds	r3, r7, r3
   1fabe:	4a19      	ldr	r2, [pc, #100]	; (1fb24 <nm_bus_init+0xc8>)
   1fac0:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   1fac2:	230c      	movs	r3, #12
   1fac4:	18fb      	adds	r3, r7, r3
   1fac6:	2200      	movs	r2, #0
   1fac8:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   1faca:	230c      	movs	r3, #12
   1facc:	18fb      	adds	r3, r7, r3
   1face:	4a16      	ldr	r2, [pc, #88]	; (1fb28 <nm_bus_init+0xcc>)
   1fad0:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   1fad2:	230c      	movs	r3, #12
   1fad4:	18fa      	adds	r2, r7, r3
   1fad6:	4915      	ldr	r1, [pc, #84]	; (1fb2c <nm_bus_init+0xd0>)
   1fad8:	4b15      	ldr	r3, [pc, #84]	; (1fb30 <nm_bus_init+0xd4>)
   1fada:	0018      	movs	r0, r3
   1fadc:	4b15      	ldr	r3, [pc, #84]	; (1fb34 <nm_bus_init+0xd8>)
   1fade:	4798      	blx	r3
   1fae0:	1e03      	subs	r3, r0, #0
   1fae2:	d002      	beq.n	1faea <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   1fae4:	2306      	movs	r3, #6
   1fae6:	425b      	negs	r3, r3
   1fae8:	e00c      	b.n	1fb04 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   1faea:	4b11      	ldr	r3, [pc, #68]	; (1fb30 <nm_bus_init+0xd4>)
   1faec:	0018      	movs	r0, r3
   1faee:	4b12      	ldr	r3, [pc, #72]	; (1fb38 <nm_bus_init+0xdc>)
   1faf0:	4798      	blx	r3

	nm_bsp_reset();
   1faf2:	4b12      	ldr	r3, [pc, #72]	; (1fb3c <nm_bus_init+0xe0>)
   1faf4:	4798      	blx	r3
	nm_bsp_sleep(1);
   1faf6:	2001      	movs	r0, #1
   1faf8:	4b11      	ldr	r3, [pc, #68]	; (1fb40 <nm_bus_init+0xe4>)
   1fafa:	4798      	blx	r3
#endif
	return result;
   1fafc:	2347      	movs	r3, #71	; 0x47
   1fafe:	18fb      	adds	r3, r7, r3
   1fb00:	781b      	ldrb	r3, [r3, #0]
   1fb02:	b25b      	sxtb	r3, r3
}
   1fb04:	0018      	movs	r0, r3
   1fb06:	46bd      	mov	sp, r7
   1fb08:	b012      	add	sp, #72	; 0x48
   1fb0a:	bd80      	pop	{r7, pc}
   1fb0c:	0001f669 	.word	0x0001f669
   1fb10:	20005a58 	.word	0x20005a58
   1fb14:	0001f68d 	.word	0x0001f68d
   1fb18:	0001f5e5 	.word	0x0001f5e5
   1fb1c:	000c0002 	.word	0x000c0002
   1fb20:	000d0002 	.word	0x000d0002
   1fb24:	000f0002 	.word	0x000f0002
   1fb28:	00124f80 	.word	0x00124f80
   1fb2c:	42001000 	.word	0x42001000
   1fb30:	20005a5c 	.word	0x20005a5c
   1fb34:	00026ecd 	.word	0x00026ecd
   1fb38:	0001f6f1 	.word	0x0001f6f1
   1fb3c:	0001f361 	.word	0x0001f361
   1fb40:	0001f3a1 	.word	0x0001f3a1

0001fb44 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   1fb44:	b590      	push	{r4, r7, lr}
   1fb46:	b085      	sub	sp, #20
   1fb48:	af00      	add	r7, sp, #0
   1fb4a:	0002      	movs	r2, r0
   1fb4c:	6039      	str	r1, [r7, #0]
   1fb4e:	1dfb      	adds	r3, r7, #7
   1fb50:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   1fb52:	230f      	movs	r3, #15
   1fb54:	18fb      	adds	r3, r7, r3
   1fb56:	2200      	movs	r2, #0
   1fb58:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   1fb5a:	1dfb      	adds	r3, r7, #7
   1fb5c:	781b      	ldrb	r3, [r3, #0]
   1fb5e:	2b03      	cmp	r3, #3
   1fb60:	d10f      	bne.n	1fb82 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   1fb62:	683b      	ldr	r3, [r7, #0]
   1fb64:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   1fb66:	68bb      	ldr	r3, [r7, #8]
   1fb68:	6818      	ldr	r0, [r3, #0]
   1fb6a:	68bb      	ldr	r3, [r7, #8]
   1fb6c:	6859      	ldr	r1, [r3, #4]
   1fb6e:	68bb      	ldr	r3, [r7, #8]
   1fb70:	891b      	ldrh	r3, [r3, #8]
   1fb72:	220f      	movs	r2, #15
   1fb74:	18bc      	adds	r4, r7, r2
   1fb76:	001a      	movs	r2, r3
   1fb78:	4b10      	ldr	r3, [pc, #64]	; (1fbbc <nm_bus_ioctl+0x78>)
   1fb7a:	4798      	blx	r3
   1fb7c:	0003      	movs	r3, r0
   1fb7e:	7023      	strb	r3, [r4, #0]
		}
		break;
   1fb80:	e013      	b.n	1fbaa <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   1fb82:	230f      	movs	r3, #15
   1fb84:	18fb      	adds	r3, r7, r3
   1fb86:	22ff      	movs	r2, #255	; 0xff
   1fb88:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   1fb8a:	2383      	movs	r3, #131	; 0x83
   1fb8c:	005a      	lsls	r2, r3, #1
   1fb8e:	490c      	ldr	r1, [pc, #48]	; (1fbc0 <nm_bus_ioctl+0x7c>)
   1fb90:	4b0c      	ldr	r3, [pc, #48]	; (1fbc4 <nm_bus_ioctl+0x80>)
   1fb92:	0018      	movs	r0, r3
   1fb94:	4b0c      	ldr	r3, [pc, #48]	; (1fbc8 <nm_bus_ioctl+0x84>)
   1fb96:	4798      	blx	r3
   1fb98:	4b0c      	ldr	r3, [pc, #48]	; (1fbcc <nm_bus_ioctl+0x88>)
   1fb9a:	0018      	movs	r0, r3
   1fb9c:	4b0a      	ldr	r3, [pc, #40]	; (1fbc8 <nm_bus_ioctl+0x84>)
   1fb9e:	4798      	blx	r3
   1fba0:	4b0b      	ldr	r3, [pc, #44]	; (1fbd0 <nm_bus_ioctl+0x8c>)
   1fba2:	0018      	movs	r0, r3
   1fba4:	4b08      	ldr	r3, [pc, #32]	; (1fbc8 <nm_bus_ioctl+0x84>)
   1fba6:	4798      	blx	r3
			break;
   1fba8:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   1fbaa:	230f      	movs	r3, #15
   1fbac:	18fb      	adds	r3, r7, r3
   1fbae:	781b      	ldrb	r3, [r3, #0]
   1fbb0:	b25b      	sxtb	r3, r3
}
   1fbb2:	0018      	movs	r0, r3
   1fbb4:	46bd      	mov	sp, r7
   1fbb6:	b005      	add	sp, #20
   1fbb8:	bd90      	pop	{r4, r7, pc}
   1fbba:	46c0      	nop			; (mov r8, r8)
   1fbbc:	0001f8e5 	.word	0x0001f8e5
   1fbc0:	00037d80 	.word	0x00037d80
   1fbc4:	00037d54 	.word	0x00037d54
   1fbc8:	0001cee9 	.word	0x0001cee9
   1fbcc:	00037d68 	.word	0x00037d68
   1fbd0:	00037d7c 	.word	0x00037d7c

0001fbd4 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   1fbd4:	b580      	push	{r7, lr}
   1fbd6:	b082      	sub	sp, #8
   1fbd8:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   1fbda:	1dfb      	adds	r3, r7, #7
   1fbdc:	2200      	movs	r2, #0
   1fbde:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   1fbe0:	1d3b      	adds	r3, r7, #4
   1fbe2:	0018      	movs	r0, r3
   1fbe4:	4b13      	ldr	r3, [pc, #76]	; (1fc34 <nm_bus_deinit+0x60>)
   1fbe6:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   1fbe8:	1d3b      	adds	r3, r7, #4
   1fbea:	2200      	movs	r2, #0
   1fbec:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   1fbee:	1d3b      	adds	r3, r7, #4
   1fbf0:	2200      	movs	r2, #0
   1fbf2:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   1fbf4:	4b10      	ldr	r3, [pc, #64]	; (1fc38 <nm_bus_deinit+0x64>)
   1fbf6:	0018      	movs	r0, r3
   1fbf8:	4b10      	ldr	r3, [pc, #64]	; (1fc3c <nm_bus_deinit+0x68>)
   1fbfa:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   1fbfc:	1d3b      	adds	r3, r7, #4
   1fbfe:	0019      	movs	r1, r3
   1fc00:	200c      	movs	r0, #12
   1fc02:	4b0f      	ldr	r3, [pc, #60]	; (1fc40 <nm_bus_deinit+0x6c>)
   1fc04:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   1fc06:	1d3b      	adds	r3, r7, #4
   1fc08:	0019      	movs	r1, r3
   1fc0a:	200f      	movs	r0, #15
   1fc0c:	4b0c      	ldr	r3, [pc, #48]	; (1fc40 <nm_bus_deinit+0x6c>)
   1fc0e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   1fc10:	1d3b      	adds	r3, r7, #4
   1fc12:	0019      	movs	r1, r3
   1fc14:	200d      	movs	r0, #13
   1fc16:	4b0a      	ldr	r3, [pc, #40]	; (1fc40 <nm_bus_deinit+0x6c>)
   1fc18:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   1fc1a:	1d3b      	adds	r3, r7, #4
   1fc1c:	0019      	movs	r1, r3
   1fc1e:	200e      	movs	r0, #14
   1fc20:	4b07      	ldr	r3, [pc, #28]	; (1fc40 <nm_bus_deinit+0x6c>)
   1fc22:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   1fc24:	1dfb      	adds	r3, r7, #7
   1fc26:	781b      	ldrb	r3, [r3, #0]
   1fc28:	b25b      	sxtb	r3, r3
}
   1fc2a:	0018      	movs	r0, r3
   1fc2c:	46bd      	mov	sp, r7
   1fc2e:	b002      	add	sp, #8
   1fc30:	bd80      	pop	{r7, pc}
   1fc32:	46c0      	nop			; (mov r8, r8)
   1fc34:	0001f54d 	.word	0x0001f54d
   1fc38:	20005a5c 	.word	0x20005a5c
   1fc3c:	0001f741 	.word	0x0001f741
   1fc40:	00025a4d 	.word	0x00025a4d

0001fc44 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   1fc44:	b580      	push	{r7, lr}
   1fc46:	b084      	sub	sp, #16
   1fc48:	af00      	add	r7, sp, #0
   1fc4a:	60f8      	str	r0, [r7, #12]
   1fc4c:	60b9      	str	r1, [r7, #8]
   1fc4e:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   1fc50:	687b      	ldr	r3, [r7, #4]
   1fc52:	2b00      	cmp	r3, #0
   1fc54:	d010      	beq.n	1fc78 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   1fc56:	68bb      	ldr	r3, [r7, #8]
   1fc58:	781a      	ldrb	r2, [r3, #0]
   1fc5a:	68fb      	ldr	r3, [r7, #12]
   1fc5c:	701a      	strb	r2, [r3, #0]
		pDst++;
   1fc5e:	68fb      	ldr	r3, [r7, #12]
   1fc60:	3301      	adds	r3, #1
   1fc62:	60fb      	str	r3, [r7, #12]
		pSrc++;
   1fc64:	68bb      	ldr	r3, [r7, #8]
   1fc66:	3301      	adds	r3, #1
   1fc68:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   1fc6a:	687b      	ldr	r3, [r7, #4]
   1fc6c:	3b01      	subs	r3, #1
   1fc6e:	607b      	str	r3, [r7, #4]
   1fc70:	687b      	ldr	r3, [r7, #4]
   1fc72:	2b00      	cmp	r3, #0
   1fc74:	d1ef      	bne.n	1fc56 <m2m_memcpy+0x12>
   1fc76:	e000      	b.n	1fc7a <m2m_memcpy+0x36>
	if(sz == 0) return;
   1fc78:	46c0      	nop			; (mov r8, r8)
}
   1fc7a:	46bd      	mov	sp, r7
   1fc7c:	b004      	add	sp, #16
   1fc7e:	bd80      	pop	{r7, pc}

0001fc80 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   1fc80:	b580      	push	{r7, lr}
   1fc82:	b084      	sub	sp, #16
   1fc84:	af00      	add	r7, sp, #0
   1fc86:	60f8      	str	r0, [r7, #12]
   1fc88:	607a      	str	r2, [r7, #4]
   1fc8a:	230b      	movs	r3, #11
   1fc8c:	18fb      	adds	r3, r7, r3
   1fc8e:	1c0a      	adds	r2, r1, #0
   1fc90:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   1fc92:	687b      	ldr	r3, [r7, #4]
   1fc94:	2b00      	cmp	r3, #0
   1fc96:	d00e      	beq.n	1fcb6 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   1fc98:	68fb      	ldr	r3, [r7, #12]
   1fc9a:	220b      	movs	r2, #11
   1fc9c:	18ba      	adds	r2, r7, r2
   1fc9e:	7812      	ldrb	r2, [r2, #0]
   1fca0:	701a      	strb	r2, [r3, #0]
		pBuf++;
   1fca2:	68fb      	ldr	r3, [r7, #12]
   1fca4:	3301      	adds	r3, #1
   1fca6:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   1fca8:	687b      	ldr	r3, [r7, #4]
   1fcaa:	3b01      	subs	r3, #1
   1fcac:	607b      	str	r3, [r7, #4]
   1fcae:	687b      	ldr	r3, [r7, #4]
   1fcb0:	2b00      	cmp	r3, #0
   1fcb2:	d1f1      	bne.n	1fc98 <m2m_memset+0x18>
   1fcb4:	e000      	b.n	1fcb8 <m2m_memset+0x38>
	if(sz == 0) return;
   1fcb6:	46c0      	nop			; (mov r8, r8)
}
   1fcb8:	46bd      	mov	sp, r7
   1fcba:	b004      	add	sp, #16
   1fcbc:	bd80      	pop	{r7, pc}

0001fcbe <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   1fcbe:	b580      	push	{r7, lr}
   1fcc0:	b084      	sub	sp, #16
   1fcc2:	af00      	add	r7, sp, #0
   1fcc4:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   1fcc6:	230e      	movs	r3, #14
   1fcc8:	18fb      	adds	r3, r7, r3
   1fcca:	2200      	movs	r2, #0
   1fccc:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   1fcce:	e009      	b.n	1fce4 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   1fcd0:	230e      	movs	r3, #14
   1fcd2:	18fb      	adds	r3, r7, r3
   1fcd4:	881a      	ldrh	r2, [r3, #0]
   1fcd6:	230e      	movs	r3, #14
   1fcd8:	18fb      	adds	r3, r7, r3
   1fcda:	3201      	adds	r2, #1
   1fcdc:	801a      	strh	r2, [r3, #0]
		pcStr++;
   1fcde:	687b      	ldr	r3, [r7, #4]
   1fce0:	3301      	adds	r3, #1
   1fce2:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   1fce4:	687b      	ldr	r3, [r7, #4]
   1fce6:	781b      	ldrb	r3, [r3, #0]
   1fce8:	2b00      	cmp	r3, #0
   1fcea:	d1f1      	bne.n	1fcd0 <m2m_strlen+0x12>
	}
	return u16StrLen;
   1fcec:	230e      	movs	r3, #14
   1fcee:	18fb      	adds	r3, r7, r3
   1fcf0:	881b      	ldrh	r3, [r3, #0]
}
   1fcf2:	0018      	movs	r0, r3
   1fcf4:	46bd      	mov	sp, r7
   1fcf6:	b004      	add	sp, #16
   1fcf8:	bd80      	pop	{r7, pc}
	...

0001fcfc <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   1fcfc:	b580      	push	{r7, lr}
   1fcfe:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   1fd00:	4b04      	ldr	r3, [pc, #16]	; (1fd14 <isr+0x18>)
   1fd02:	78db      	ldrb	r3, [r3, #3]
   1fd04:	b2db      	uxtb	r3, r3
   1fd06:	3301      	adds	r3, #1
   1fd08:	b2da      	uxtb	r2, r3
   1fd0a:	4b02      	ldr	r3, [pc, #8]	; (1fd14 <isr+0x18>)
   1fd0c:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   1fd0e:	46c0      	nop			; (mov r8, r8)
   1fd10:	46bd      	mov	sp, r7
   1fd12:	bd80      	pop	{r7, pc}
   1fd14:	20005a98 	.word	0x20005a98

0001fd18 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   1fd18:	b590      	push	{r4, r7, lr}
   1fd1a:	b083      	sub	sp, #12
   1fd1c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   1fd1e:	1dfb      	adds	r3, r7, #7
   1fd20:	2200      	movs	r2, #0
   1fd22:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   1fd24:	4b14      	ldr	r3, [pc, #80]	; (1fd78 <hif_set_rx_done+0x60>)
   1fd26:	2200      	movs	r2, #0
   1fd28:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   1fd2a:	2001      	movs	r0, #1
   1fd2c:	4b13      	ldr	r3, [pc, #76]	; (1fd7c <hif_set_rx_done+0x64>)
   1fd2e:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   1fd30:	1dfc      	adds	r4, r7, #7
   1fd32:	003b      	movs	r3, r7
   1fd34:	4a12      	ldr	r2, [pc, #72]	; (1fd80 <hif_set_rx_done+0x68>)
   1fd36:	0019      	movs	r1, r3
   1fd38:	0010      	movs	r0, r2
   1fd3a:	4b12      	ldr	r3, [pc, #72]	; (1fd84 <hif_set_rx_done+0x6c>)
   1fd3c:	4798      	blx	r3
   1fd3e:	0003      	movs	r3, r0
   1fd40:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   1fd42:	1dfb      	adds	r3, r7, #7
   1fd44:	781b      	ldrb	r3, [r3, #0]
   1fd46:	b25b      	sxtb	r3, r3
   1fd48:	2b00      	cmp	r3, #0
   1fd4a:	d10d      	bne.n	1fd68 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   1fd4c:	683b      	ldr	r3, [r7, #0]
   1fd4e:	2202      	movs	r2, #2
   1fd50:	4313      	orrs	r3, r2
   1fd52:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   1fd54:	683b      	ldr	r3, [r7, #0]
   1fd56:	1dfc      	adds	r4, r7, #7
   1fd58:	4a09      	ldr	r2, [pc, #36]	; (1fd80 <hif_set_rx_done+0x68>)
   1fd5a:	0019      	movs	r1, r3
   1fd5c:	0010      	movs	r0, r2
   1fd5e:	4b0a      	ldr	r3, [pc, #40]	; (1fd88 <hif_set_rx_done+0x70>)
   1fd60:	4798      	blx	r3
   1fd62:	0003      	movs	r3, r0
   1fd64:	7023      	strb	r3, [r4, #0]
   1fd66:	e000      	b.n	1fd6a <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   1fd68:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   1fd6a:	1dfb      	adds	r3, r7, #7
   1fd6c:	781b      	ldrb	r3, [r3, #0]
   1fd6e:	b25b      	sxtb	r3, r3

}
   1fd70:	0018      	movs	r0, r3
   1fd72:	46bd      	mov	sp, r7
   1fd74:	b003      	add	sp, #12
   1fd76:	bd90      	pop	{r4, r7, pc}
   1fd78:	20005a98 	.word	0x20005a98
   1fd7c:	0001f435 	.word	0x0001f435
   1fd80:	00001070 	.word	0x00001070
   1fd84:	00021d11 	.word	0x00021d11
   1fd88:	00021d35 	.word	0x00021d35

0001fd8c <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   1fd8c:	b580      	push	{r7, lr}
   1fd8e:	b082      	sub	sp, #8
   1fd90:	af00      	add	r7, sp, #0
   1fd92:	603a      	str	r2, [r7, #0]
   1fd94:	1dfb      	adds	r3, r7, #7
   1fd96:	1c02      	adds	r2, r0, #0
   1fd98:	701a      	strb	r2, [r3, #0]
   1fd9a:	1d3b      	adds	r3, r7, #4
   1fd9c:	1c0a      	adds	r2, r1, #0
   1fd9e:	801a      	strh	r2, [r3, #0]


}
   1fda0:	46c0      	nop			; (mov r8, r8)
   1fda2:	46bd      	mov	sp, r7
   1fda4:	b002      	add	sp, #8
   1fda6:	bd80      	pop	{r7, pc}

0001fda8 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   1fda8:	b590      	push	{r4, r7, lr}
   1fdaa:	b083      	sub	sp, #12
   1fdac:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   1fdae:	1dfb      	adds	r3, r7, #7
   1fdb0:	2200      	movs	r2, #0
   1fdb2:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   1fdb4:	4b16      	ldr	r3, [pc, #88]	; (1fe10 <hif_chip_wake+0x68>)
   1fdb6:	789b      	ldrb	r3, [r3, #2]
   1fdb8:	b2db      	uxtb	r3, r3
   1fdba:	2b00      	cmp	r3, #0
   1fdbc:	d003      	beq.n	1fdc6 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   1fdbe:	1dfb      	adds	r3, r7, #7
   1fdc0:	781b      	ldrb	r3, [r3, #0]
   1fdc2:	b25b      	sxtb	r3, r3
   1fdc4:	e01f      	b.n	1fe06 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   1fdc6:	4b12      	ldr	r3, [pc, #72]	; (1fe10 <hif_chip_wake+0x68>)
   1fdc8:	785b      	ldrb	r3, [r3, #1]
   1fdca:	b2db      	uxtb	r3, r3
   1fdcc:	2b00      	cmp	r3, #0
   1fdce:	d10e      	bne.n	1fdee <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   1fdd0:	4b0f      	ldr	r3, [pc, #60]	; (1fe10 <hif_chip_wake+0x68>)
   1fdd2:	781b      	ldrb	r3, [r3, #0]
   1fdd4:	b2db      	uxtb	r3, r3
   1fdd6:	2b00      	cmp	r3, #0
   1fdd8:	d009      	beq.n	1fdee <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   1fdda:	1dfc      	adds	r4, r7, #7
   1fddc:	4b0d      	ldr	r3, [pc, #52]	; (1fe14 <hif_chip_wake+0x6c>)
   1fdde:	4798      	blx	r3
   1fde0:	0003      	movs	r3, r0
   1fde2:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   1fde4:	1dfb      	adds	r3, r7, #7
   1fde6:	781b      	ldrb	r3, [r3, #0]
   1fde8:	b25b      	sxtb	r3, r3
   1fdea:	2b00      	cmp	r3, #0
   1fdec:	d107      	bne.n	1fdfe <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   1fdee:	4b08      	ldr	r3, [pc, #32]	; (1fe10 <hif_chip_wake+0x68>)
   1fdf0:	785b      	ldrb	r3, [r3, #1]
   1fdf2:	b2db      	uxtb	r3, r3
   1fdf4:	3301      	adds	r3, #1
   1fdf6:	b2da      	uxtb	r2, r3
   1fdf8:	4b05      	ldr	r3, [pc, #20]	; (1fe10 <hif_chip_wake+0x68>)
   1fdfa:	705a      	strb	r2, [r3, #1]
   1fdfc:	e000      	b.n	1fe00 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   1fdfe:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   1fe00:	1dfb      	adds	r3, r7, #7
   1fe02:	781b      	ldrb	r3, [r3, #0]
   1fe04:	b25b      	sxtb	r3, r3
}
   1fe06:	0018      	movs	r0, r3
   1fe08:	46bd      	mov	sp, r7
   1fe0a:	b003      	add	sp, #12
   1fe0c:	bd90      	pop	{r4, r7, pc}
   1fe0e:	46c0      	nop			; (mov r8, r8)
   1fe10:	20005a98 	.word	0x20005a98
   1fe14:	000217e1 	.word	0x000217e1

0001fe18 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   1fe18:	b580      	push	{r7, lr}
   1fe1a:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   1fe1c:	4b07      	ldr	r3, [pc, #28]	; (1fe3c <hif_chip_sleep_sc+0x24>)
   1fe1e:	785b      	ldrb	r3, [r3, #1]
   1fe20:	b2db      	uxtb	r3, r3
   1fe22:	2b00      	cmp	r3, #0
   1fe24:	d006      	beq.n	1fe34 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   1fe26:	4b05      	ldr	r3, [pc, #20]	; (1fe3c <hif_chip_sleep_sc+0x24>)
   1fe28:	785b      	ldrb	r3, [r3, #1]
   1fe2a:	b2db      	uxtb	r3, r3
   1fe2c:	3b01      	subs	r3, #1
   1fe2e:	b2da      	uxtb	r2, r3
   1fe30:	4b02      	ldr	r3, [pc, #8]	; (1fe3c <hif_chip_sleep_sc+0x24>)
   1fe32:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   1fe34:	2300      	movs	r3, #0
}
   1fe36:	0018      	movs	r0, r3
   1fe38:	46bd      	mov	sp, r7
   1fe3a:	bd80      	pop	{r7, pc}
   1fe3c:	20005a98 	.word	0x20005a98

0001fe40 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   1fe40:	b590      	push	{r4, r7, lr}
   1fe42:	b083      	sub	sp, #12
   1fe44:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   1fe46:	1dfb      	adds	r3, r7, #7
   1fe48:	2200      	movs	r2, #0
   1fe4a:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   1fe4c:	4b10      	ldr	r3, [pc, #64]	; (1fe90 <hif_chip_sleep+0x50>)
   1fe4e:	785b      	ldrb	r3, [r3, #1]
   1fe50:	b2db      	uxtb	r3, r3
   1fe52:	2b00      	cmp	r3, #0
   1fe54:	d006      	beq.n	1fe64 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   1fe56:	4b0e      	ldr	r3, [pc, #56]	; (1fe90 <hif_chip_sleep+0x50>)
   1fe58:	785b      	ldrb	r3, [r3, #1]
   1fe5a:	b2db      	uxtb	r3, r3
   1fe5c:	3b01      	subs	r3, #1
   1fe5e:	b2da      	uxtb	r2, r3
   1fe60:	4b0b      	ldr	r3, [pc, #44]	; (1fe90 <hif_chip_sleep+0x50>)
   1fe62:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   1fe64:	4b0a      	ldr	r3, [pc, #40]	; (1fe90 <hif_chip_sleep+0x50>)
   1fe66:	785b      	ldrb	r3, [r3, #1]
   1fe68:	b2db      	uxtb	r3, r3
   1fe6a:	2b00      	cmp	r3, #0
   1fe6c:	d109      	bne.n	1fe82 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   1fe6e:	4b08      	ldr	r3, [pc, #32]	; (1fe90 <hif_chip_sleep+0x50>)
   1fe70:	781b      	ldrb	r3, [r3, #0]
   1fe72:	b2db      	uxtb	r3, r3
   1fe74:	2b00      	cmp	r3, #0
   1fe76:	d004      	beq.n	1fe82 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   1fe78:	1dfc      	adds	r4, r7, #7
   1fe7a:	4b06      	ldr	r3, [pc, #24]	; (1fe94 <hif_chip_sleep+0x54>)
   1fe7c:	4798      	blx	r3
   1fe7e:	0003      	movs	r3, r0
   1fe80:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   1fe82:	1dfb      	adds	r3, r7, #7
   1fe84:	781b      	ldrb	r3, [r3, #0]
   1fe86:	b25b      	sxtb	r3, r3
}
   1fe88:	0018      	movs	r0, r3
   1fe8a:	46bd      	mov	sp, r7
   1fe8c:	b003      	add	sp, #12
   1fe8e:	bd90      	pop	{r4, r7, pc}
   1fe90:	20005a98 	.word	0x20005a98
   1fe94:	00021709 	.word	0x00021709

0001fe98 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   1fe98:	b580      	push	{r7, lr}
   1fe9a:	b082      	sub	sp, #8
   1fe9c:	af00      	add	r7, sp, #0
   1fe9e:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   1fea0:	4b09      	ldr	r3, [pc, #36]	; (1fec8 <hif_init+0x30>)
   1fea2:	222c      	movs	r2, #44	; 0x2c
   1fea4:	2100      	movs	r1, #0
   1fea6:	0018      	movs	r0, r3
   1fea8:	4b08      	ldr	r3, [pc, #32]	; (1fecc <hif_init+0x34>)
   1feaa:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   1feac:	4b08      	ldr	r3, [pc, #32]	; (1fed0 <hif_init+0x38>)
   1feae:	0018      	movs	r0, r3
   1feb0:	4b08      	ldr	r3, [pc, #32]	; (1fed4 <hif_init+0x3c>)
   1feb2:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   1feb4:	4b08      	ldr	r3, [pc, #32]	; (1fed8 <hif_init+0x40>)
   1feb6:	0019      	movs	r1, r3
   1feb8:	2003      	movs	r0, #3
   1feba:	4b08      	ldr	r3, [pc, #32]	; (1fedc <hif_init+0x44>)
   1febc:	4798      	blx	r3
	return M2M_SUCCESS;
   1febe:	2300      	movs	r3, #0
}
   1fec0:	0018      	movs	r0, r3
   1fec2:	46bd      	mov	sp, r7
   1fec4:	b002      	add	sp, #8
   1fec6:	bd80      	pop	{r7, pc}
   1fec8:	20005a98 	.word	0x20005a98
   1fecc:	0001fc81 	.word	0x0001fc81
   1fed0:	0001fcfd 	.word	0x0001fcfd
   1fed4:	0001f3bd 	.word	0x0001f3bd
   1fed8:	0001fd8d 	.word	0x0001fd8d
   1fedc:	0002097d 	.word	0x0002097d

0001fee0 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   1fee0:	b590      	push	{r4, r7, lr}
   1fee2:	b089      	sub	sp, #36	; 0x24
   1fee4:	af00      	add	r7, sp, #0
   1fee6:	0004      	movs	r4, r0
   1fee8:	0008      	movs	r0, r1
   1feea:	603a      	str	r2, [r7, #0]
   1feec:	0019      	movs	r1, r3
   1feee:	1dfb      	adds	r3, r7, #7
   1fef0:	1c22      	adds	r2, r4, #0
   1fef2:	701a      	strb	r2, [r3, #0]
   1fef4:	1dbb      	adds	r3, r7, #6
   1fef6:	1c02      	adds	r2, r0, #0
   1fef8:	701a      	strb	r2, [r3, #0]
   1fefa:	1d3b      	adds	r3, r7, #4
   1fefc:	1c0a      	adds	r2, r1, #0
   1fefe:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   1ff00:	231f      	movs	r3, #31
   1ff02:	18fb      	adds	r3, r7, r3
   1ff04:	22ff      	movs	r2, #255	; 0xff
   1ff06:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   1ff08:	1dbb      	adds	r3, r7, #6
   1ff0a:	781b      	ldrb	r3, [r3, #0]
   1ff0c:	227f      	movs	r2, #127	; 0x7f
   1ff0e:	4013      	ands	r3, r2
   1ff10:	b2da      	uxtb	r2, r3
   1ff12:	2318      	movs	r3, #24
   1ff14:	18fb      	adds	r3, r7, r3
   1ff16:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   1ff18:	2318      	movs	r3, #24
   1ff1a:	18fb      	adds	r3, r7, r3
   1ff1c:	1dfa      	adds	r2, r7, #7
   1ff1e:	7812      	ldrb	r2, [r2, #0]
   1ff20:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   1ff22:	2318      	movs	r3, #24
   1ff24:	18fb      	adds	r3, r7, r3
   1ff26:	2208      	movs	r2, #8
   1ff28:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   1ff2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ff2c:	2b00      	cmp	r3, #0
   1ff2e:	d011      	beq.n	1ff54 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   1ff30:	2318      	movs	r3, #24
   1ff32:	18fb      	adds	r3, r7, r3
   1ff34:	885b      	ldrh	r3, [r3, #2]
   1ff36:	b29a      	uxth	r2, r3
   1ff38:	2338      	movs	r3, #56	; 0x38
   1ff3a:	18f9      	adds	r1, r7, r3
   1ff3c:	2334      	movs	r3, #52	; 0x34
   1ff3e:	18fb      	adds	r3, r7, r3
   1ff40:	8809      	ldrh	r1, [r1, #0]
   1ff42:	881b      	ldrh	r3, [r3, #0]
   1ff44:	18cb      	adds	r3, r1, r3
   1ff46:	b29b      	uxth	r3, r3
   1ff48:	18d3      	adds	r3, r2, r3
   1ff4a:	b29a      	uxth	r2, r3
   1ff4c:	2318      	movs	r3, #24
   1ff4e:	18fb      	adds	r3, r7, r3
   1ff50:	805a      	strh	r2, [r3, #2]
   1ff52:	e00a      	b.n	1ff6a <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   1ff54:	2318      	movs	r3, #24
   1ff56:	18fb      	adds	r3, r7, r3
   1ff58:	885b      	ldrh	r3, [r3, #2]
   1ff5a:	b29a      	uxth	r2, r3
   1ff5c:	1d3b      	adds	r3, r7, #4
   1ff5e:	881b      	ldrh	r3, [r3, #0]
   1ff60:	18d3      	adds	r3, r2, r3
   1ff62:	b29a      	uxth	r2, r3
   1ff64:	2318      	movs	r3, #24
   1ff66:	18fb      	adds	r3, r7, r3
   1ff68:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   1ff6a:	231f      	movs	r3, #31
   1ff6c:	18fc      	adds	r4, r7, r3
   1ff6e:	4bb2      	ldr	r3, [pc, #712]	; (20238 <hif_send+0x358>)
   1ff70:	4798      	blx	r3
   1ff72:	0003      	movs	r3, r0
   1ff74:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   1ff76:	231f      	movs	r3, #31
   1ff78:	18fb      	adds	r3, r7, r3
   1ff7a:	781b      	ldrb	r3, [r3, #0]
   1ff7c:	b25b      	sxtb	r3, r3
   1ff7e:	2b00      	cmp	r3, #0
   1ff80:	d000      	beq.n	1ff84 <hif_send+0xa4>
   1ff82:	e129      	b.n	201d8 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   1ff84:	2300      	movs	r3, #0
   1ff86:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   1ff88:	230e      	movs	r3, #14
   1ff8a:	18fb      	adds	r3, r7, r3
   1ff8c:	2200      	movs	r2, #0
   1ff8e:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   1ff90:	2300      	movs	r3, #0
   1ff92:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   1ff94:	1dfb      	adds	r3, r7, #7
   1ff96:	781a      	ldrb	r2, [r3, #0]
   1ff98:	697b      	ldr	r3, [r7, #20]
   1ff9a:	4313      	orrs	r3, r2
   1ff9c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   1ff9e:	1dbb      	adds	r3, r7, #6
   1ffa0:	781b      	ldrb	r3, [r3, #0]
   1ffa2:	021a      	lsls	r2, r3, #8
   1ffa4:	697b      	ldr	r3, [r7, #20]
   1ffa6:	4313      	orrs	r3, r2
   1ffa8:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   1ffaa:	2318      	movs	r3, #24
   1ffac:	18fb      	adds	r3, r7, r3
   1ffae:	885b      	ldrh	r3, [r3, #2]
   1ffb0:	b29b      	uxth	r3, r3
   1ffb2:	041a      	lsls	r2, r3, #16
   1ffb4:	697b      	ldr	r3, [r7, #20]
   1ffb6:	4313      	orrs	r3, r2
   1ffb8:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   1ffba:	697b      	ldr	r3, [r7, #20]
   1ffbc:	221f      	movs	r2, #31
   1ffbe:	18bc      	adds	r4, r7, r2
   1ffc0:	4a9e      	ldr	r2, [pc, #632]	; (2023c <hif_send+0x35c>)
   1ffc2:	0019      	movs	r1, r3
   1ffc4:	0010      	movs	r0, r2
   1ffc6:	4b9e      	ldr	r3, [pc, #632]	; (20240 <hif_send+0x360>)
   1ffc8:	4798      	blx	r3
   1ffca:	0003      	movs	r3, r0
   1ffcc:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   1ffce:	231f      	movs	r3, #31
   1ffd0:	18fb      	adds	r3, r7, r3
   1ffd2:	781b      	ldrb	r3, [r3, #0]
   1ffd4:	b25b      	sxtb	r3, r3
   1ffd6:	2b00      	cmp	r3, #0
   1ffd8:	d000      	beq.n	1ffdc <hif_send+0xfc>
   1ffda:	e119      	b.n	20210 <hif_send+0x330>

		reg = 0UL;
   1ffdc:	2300      	movs	r3, #0
   1ffde:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   1ffe0:	697b      	ldr	r3, [r7, #20]
   1ffe2:	2202      	movs	r2, #2
   1ffe4:	4313      	orrs	r3, r2
   1ffe6:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   1ffe8:	697b      	ldr	r3, [r7, #20]
   1ffea:	221f      	movs	r2, #31
   1ffec:	18bc      	adds	r4, r7, r2
   1ffee:	4a95      	ldr	r2, [pc, #596]	; (20244 <hif_send+0x364>)
   1fff0:	0019      	movs	r1, r3
   1fff2:	0010      	movs	r0, r2
   1fff4:	4b92      	ldr	r3, [pc, #584]	; (20240 <hif_send+0x360>)
   1fff6:	4798      	blx	r3
   1fff8:	0003      	movs	r3, r0
   1fffa:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   1fffc:	231f      	movs	r3, #31
   1fffe:	18fb      	adds	r3, r7, r3
   20000:	781b      	ldrb	r3, [r3, #0]
   20002:	b25b      	sxtb	r3, r3
   20004:	2b00      	cmp	r3, #0
   20006:	d000      	beq.n	2000a <hif_send+0x12a>
   20008:	e104      	b.n	20214 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   2000a:	2300      	movs	r3, #0
   2000c:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   2000e:	230e      	movs	r3, #14
   20010:	18fb      	adds	r3, r7, r3
   20012:	2200      	movs	r2, #0
   20014:	801a      	strh	r2, [r3, #0]
   20016:	e050      	b.n	200ba <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   20018:	231f      	movs	r3, #31
   2001a:	18fc      	adds	r4, r7, r3
   2001c:	2314      	movs	r3, #20
   2001e:	18fb      	adds	r3, r7, r3
   20020:	4a88      	ldr	r2, [pc, #544]	; (20244 <hif_send+0x364>)
   20022:	0019      	movs	r1, r3
   20024:	0010      	movs	r0, r2
   20026:	4b88      	ldr	r3, [pc, #544]	; (20248 <hif_send+0x368>)
   20028:	4798      	blx	r3
   2002a:	0003      	movs	r3, r0
   2002c:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   2002e:	231f      	movs	r3, #31
   20030:	18fb      	adds	r3, r7, r3
   20032:	781b      	ldrb	r3, [r3, #0]
   20034:	b25b      	sxtb	r3, r3
   20036:	2b00      	cmp	r3, #0
   20038:	d147      	bne.n	200ca <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   2003a:	230e      	movs	r3, #14
   2003c:	18fb      	adds	r3, r7, r3
   2003e:	881b      	ldrh	r3, [r3, #0]
   20040:	b29a      	uxth	r2, r3
   20042:	23f4      	movs	r3, #244	; 0xf4
   20044:	33ff      	adds	r3, #255	; 0xff
   20046:	429a      	cmp	r2, r3
   20048:	d916      	bls.n	20078 <hif_send+0x198>
				if(cnt < 501) {
   2004a:	230e      	movs	r3, #14
   2004c:	18fb      	adds	r3, r7, r3
   2004e:	881b      	ldrh	r3, [r3, #0]
   20050:	b29a      	uxth	r2, r3
   20052:	23fa      	movs	r3, #250	; 0xfa
   20054:	005b      	lsls	r3, r3, #1
   20056:	429a      	cmp	r2, r3
   20058:	d80b      	bhi.n	20072 <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   2005a:	4b7c      	ldr	r3, [pc, #496]	; (2024c <hif_send+0x36c>)
   2005c:	0018      	movs	r0, r3
   2005e:	4b7c      	ldr	r3, [pc, #496]	; (20250 <hif_send+0x370>)
   20060:	4798      	blx	r3
   20062:	4b7c      	ldr	r3, [pc, #496]	; (20254 <hif_send+0x374>)
   20064:	0018      	movs	r0, r3
   20066:	4b7a      	ldr	r3, [pc, #488]	; (20250 <hif_send+0x370>)
   20068:	4798      	blx	r3
   2006a:	4b7b      	ldr	r3, [pc, #492]	; (20258 <hif_send+0x378>)
   2006c:	0018      	movs	r0, r3
   2006e:	4b78      	ldr	r3, [pc, #480]	; (20250 <hif_send+0x370>)
   20070:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   20072:	2001      	movs	r0, #1
   20074:	4b79      	ldr	r3, [pc, #484]	; (2025c <hif_send+0x37c>)
   20076:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   20078:	697b      	ldr	r3, [r7, #20]
   2007a:	2202      	movs	r2, #2
   2007c:	4013      	ands	r3, r2
   2007e:	d113      	bne.n	200a8 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   20080:	231f      	movs	r3, #31
   20082:	18fc      	adds	r4, r7, r3
   20084:	2310      	movs	r3, #16
   20086:	18fb      	adds	r3, r7, r3
   20088:	4a75      	ldr	r2, [pc, #468]	; (20260 <hif_send+0x380>)
   2008a:	0019      	movs	r1, r3
   2008c:	0010      	movs	r0, r2
   2008e:	4b6e      	ldr	r3, [pc, #440]	; (20248 <hif_send+0x368>)
   20090:	4798      	blx	r3
   20092:	0003      	movs	r3, r0
   20094:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   20096:	231f      	movs	r3, #31
   20098:	18fb      	adds	r3, r7, r3
   2009a:	781b      	ldrb	r3, [r3, #0]
   2009c:	b25b      	sxtb	r3, r3
   2009e:	2b00      	cmp	r3, #0
   200a0:	d015      	beq.n	200ce <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   200a2:	2300      	movs	r3, #0
   200a4:	613b      	str	r3, [r7, #16]
					goto ERR1;
   200a6:	e0bc      	b.n	20222 <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   200a8:	230e      	movs	r3, #14
   200aa:	18fb      	adds	r3, r7, r3
   200ac:	881b      	ldrh	r3, [r3, #0]
   200ae:	b29b      	uxth	r3, r3
   200b0:	3301      	adds	r3, #1
   200b2:	b29a      	uxth	r2, r3
   200b4:	230e      	movs	r3, #14
   200b6:	18fb      	adds	r3, r7, r3
   200b8:	801a      	strh	r2, [r3, #0]
   200ba:	230e      	movs	r3, #14
   200bc:	18fb      	adds	r3, r7, r3
   200be:	881b      	ldrh	r3, [r3, #0]
   200c0:	b29b      	uxth	r3, r3
   200c2:	4a68      	ldr	r2, [pc, #416]	; (20264 <hif_send+0x384>)
   200c4:	4293      	cmp	r3, r2
   200c6:	d9a7      	bls.n	20018 <hif_send+0x138>
   200c8:	e002      	b.n	200d0 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   200ca:	46c0      	nop			; (mov r8, r8)
   200cc:	e000      	b.n	200d0 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   200ce:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   200d0:	693b      	ldr	r3, [r7, #16]
   200d2:	2b00      	cmp	r3, #0
   200d4:	d100      	bne.n	200d8 <hif_send+0x1f8>
   200d6:	e074      	b.n	201c2 <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   200d8:	693b      	ldr	r3, [r7, #16]
   200da:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   200dc:	2318      	movs	r3, #24
   200de:	18fb      	adds	r3, r7, r3
   200e0:	885b      	ldrh	r3, [r3, #2]
   200e2:	b29a      	uxth	r2, r3
   200e4:	2318      	movs	r3, #24
   200e6:	18fb      	adds	r3, r7, r3
   200e8:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   200ea:	68bb      	ldr	r3, [r7, #8]
   200ec:	221f      	movs	r2, #31
   200ee:	18bc      	adds	r4, r7, r2
   200f0:	2218      	movs	r2, #24
   200f2:	18b9      	adds	r1, r7, r2
   200f4:	2208      	movs	r2, #8
   200f6:	0018      	movs	r0, r3
   200f8:	4b5b      	ldr	r3, [pc, #364]	; (20268 <hif_send+0x388>)
   200fa:	4798      	blx	r3
   200fc:	0003      	movs	r3, r0
   200fe:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   20100:	231f      	movs	r3, #31
   20102:	18fb      	adds	r3, r7, r3
   20104:	781b      	ldrb	r3, [r3, #0]
   20106:	b25b      	sxtb	r3, r3
   20108:	2b00      	cmp	r3, #0
   2010a:	d000      	beq.n	2010e <hif_send+0x22e>
   2010c:	e084      	b.n	20218 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   2010e:	68bb      	ldr	r3, [r7, #8]
   20110:	3308      	adds	r3, #8
   20112:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   20114:	683b      	ldr	r3, [r7, #0]
   20116:	2b00      	cmp	r3, #0
   20118:	d016      	beq.n	20148 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   2011a:	68b8      	ldr	r0, [r7, #8]
   2011c:	1d3b      	adds	r3, r7, #4
   2011e:	881a      	ldrh	r2, [r3, #0]
   20120:	231f      	movs	r3, #31
   20122:	18fc      	adds	r4, r7, r3
   20124:	683b      	ldr	r3, [r7, #0]
   20126:	0019      	movs	r1, r3
   20128:	4b4f      	ldr	r3, [pc, #316]	; (20268 <hif_send+0x388>)
   2012a:	4798      	blx	r3
   2012c:	0003      	movs	r3, r0
   2012e:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   20130:	231f      	movs	r3, #31
   20132:	18fb      	adds	r3, r7, r3
   20134:	781b      	ldrb	r3, [r3, #0]
   20136:	b25b      	sxtb	r3, r3
   20138:	2b00      	cmp	r3, #0
   2013a:	d000      	beq.n	2013e <hif_send+0x25e>
   2013c:	e06e      	b.n	2021c <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   2013e:	1d3b      	adds	r3, r7, #4
   20140:	881a      	ldrh	r2, [r3, #0]
   20142:	68bb      	ldr	r3, [r7, #8]
   20144:	18d3      	adds	r3, r2, r3
   20146:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   20148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2014a:	2b00      	cmp	r3, #0
   2014c:	d021      	beq.n	20192 <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   2014e:	2338      	movs	r3, #56	; 0x38
   20150:	18fb      	adds	r3, r7, r3
   20152:	881a      	ldrh	r2, [r3, #0]
   20154:	1d3b      	adds	r3, r7, #4
   20156:	881b      	ldrh	r3, [r3, #0]
   20158:	1ad3      	subs	r3, r2, r3
   2015a:	001a      	movs	r2, r3
   2015c:	68bb      	ldr	r3, [r7, #8]
   2015e:	18d3      	adds	r3, r2, r3
   20160:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   20162:	68b8      	ldr	r0, [r7, #8]
   20164:	2334      	movs	r3, #52	; 0x34
   20166:	18fb      	adds	r3, r7, r3
   20168:	881a      	ldrh	r2, [r3, #0]
   2016a:	231f      	movs	r3, #31
   2016c:	18fc      	adds	r4, r7, r3
   2016e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20170:	0019      	movs	r1, r3
   20172:	4b3d      	ldr	r3, [pc, #244]	; (20268 <hif_send+0x388>)
   20174:	4798      	blx	r3
   20176:	0003      	movs	r3, r0
   20178:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   2017a:	231f      	movs	r3, #31
   2017c:	18fb      	adds	r3, r7, r3
   2017e:	781b      	ldrb	r3, [r3, #0]
   20180:	b25b      	sxtb	r3, r3
   20182:	2b00      	cmp	r3, #0
   20184:	d14c      	bne.n	20220 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   20186:	2334      	movs	r3, #52	; 0x34
   20188:	18fb      	adds	r3, r7, r3
   2018a:	881a      	ldrh	r2, [r3, #0]
   2018c:	68bb      	ldr	r3, [r7, #8]
   2018e:	18d3      	adds	r3, r2, r3
   20190:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   20192:	693b      	ldr	r3, [r7, #16]
   20194:	009b      	lsls	r3, r3, #2
   20196:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   20198:	697b      	ldr	r3, [r7, #20]
   2019a:	2202      	movs	r2, #2
   2019c:	4313      	orrs	r3, r2
   2019e:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   201a0:	697b      	ldr	r3, [r7, #20]
   201a2:	221f      	movs	r2, #31
   201a4:	18bc      	adds	r4, r7, r2
   201a6:	4a31      	ldr	r2, [pc, #196]	; (2026c <hif_send+0x38c>)
   201a8:	0019      	movs	r1, r3
   201aa:	0010      	movs	r0, r2
   201ac:	4b24      	ldr	r3, [pc, #144]	; (20240 <hif_send+0x360>)
   201ae:	4798      	blx	r3
   201b0:	0003      	movs	r3, r0
   201b2:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   201b4:	231f      	movs	r3, #31
   201b6:	18fb      	adds	r3, r7, r3
   201b8:	781b      	ldrb	r3, [r3, #0]
   201ba:	b25b      	sxtb	r3, r3
   201bc:	2b00      	cmp	r3, #0
   201be:	d01c      	beq.n	201fa <hif_send+0x31a>
   201c0:	e02f      	b.n	20222 <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   201c2:	231f      	movs	r3, #31
   201c4:	18fc      	adds	r4, r7, r3
   201c6:	4b2a      	ldr	r3, [pc, #168]	; (20270 <hif_send+0x390>)
   201c8:	4798      	blx	r3
   201ca:	0003      	movs	r3, r0
   201cc:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   201ce:	231f      	movs	r3, #31
   201d0:	18fb      	adds	r3, r7, r3
   201d2:	22fd      	movs	r2, #253	; 0xfd
   201d4:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   201d6:	e026      	b.n	20226 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   201d8:	2398      	movs	r3, #152	; 0x98
   201da:	33ff      	adds	r3, #255	; 0xff
   201dc:	001a      	movs	r2, r3
   201de:	4925      	ldr	r1, [pc, #148]	; (20274 <hif_send+0x394>)
   201e0:	4b25      	ldr	r3, [pc, #148]	; (20278 <hif_send+0x398>)
   201e2:	0018      	movs	r0, r3
   201e4:	4b1a      	ldr	r3, [pc, #104]	; (20250 <hif_send+0x370>)
   201e6:	4798      	blx	r3
   201e8:	4b24      	ldr	r3, [pc, #144]	; (2027c <hif_send+0x39c>)
   201ea:	0018      	movs	r0, r3
   201ec:	4b18      	ldr	r3, [pc, #96]	; (20250 <hif_send+0x370>)
   201ee:	4798      	blx	r3
   201f0:	4b19      	ldr	r3, [pc, #100]	; (20258 <hif_send+0x378>)
   201f2:	0018      	movs	r0, r3
   201f4:	4b16      	ldr	r3, [pc, #88]	; (20250 <hif_send+0x370>)
   201f6:	4798      	blx	r3
		goto ERR2;
   201f8:	e015      	b.n	20226 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   201fa:	231f      	movs	r3, #31
   201fc:	18fc      	adds	r4, r7, r3
   201fe:	4b1c      	ldr	r3, [pc, #112]	; (20270 <hif_send+0x390>)
   20200:	4798      	blx	r3
   20202:	0003      	movs	r3, r0
   20204:	7023      	strb	r3, [r4, #0]
	return ret;
   20206:	231f      	movs	r3, #31
   20208:	18fb      	adds	r3, r7, r3
   2020a:	781b      	ldrb	r3, [r3, #0]
   2020c:	b25b      	sxtb	r3, r3
   2020e:	e00e      	b.n	2022e <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   20210:	46c0      	nop			; (mov r8, r8)
   20212:	e006      	b.n	20222 <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   20214:	46c0      	nop			; (mov r8, r8)
   20216:	e004      	b.n	20222 <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   20218:	46c0      	nop			; (mov r8, r8)
   2021a:	e002      	b.n	20222 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   2021c:	46c0      	nop			; (mov r8, r8)
   2021e:	e000      	b.n	20222 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   20220:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   20222:	4b17      	ldr	r3, [pc, #92]	; (20280 <hif_send+0x3a0>)
   20224:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   20226:	231f      	movs	r3, #31
   20228:	18fb      	adds	r3, r7, r3
   2022a:	781b      	ldrb	r3, [r3, #0]
   2022c:	b25b      	sxtb	r3, r3
}
   2022e:	0018      	movs	r0, r3
   20230:	46bd      	mov	sp, r7
   20232:	b009      	add	sp, #36	; 0x24
   20234:	bd90      	pop	{r4, r7, pc}
   20236:	46c0      	nop			; (mov r8, r8)
   20238:	0001fda9 	.word	0x0001fda9
   2023c:	0000108c 	.word	0x0000108c
   20240:	00021d35 	.word	0x00021d35
   20244:	00001078 	.word	0x00001078
   20248:	00021d11 	.word	0x00021d11
   2024c:	00037d90 	.word	0x00037d90
   20250:	0001cee9 	.word	0x0001cee9
   20254:	00037d9c 	.word	0x00037d9c
   20258:	00037db0 	.word	0x00037db0
   2025c:	0001f3a1 	.word	0x0001f3a1
   20260:	00150400 	.word	0x00150400
   20264:	000003e7 	.word	0x000003e7
   20268:	00021e7d 	.word	0x00021e7d
   2026c:	0000106c 	.word	0x0000106c
   20270:	0001fe41 	.word	0x0001fe41
   20274:	000380b8 	.word	0x000380b8
   20278:	00037db4 	.word	0x00037db4
   2027c:	00037dc8 	.word	0x00037dc8
   20280:	0001fe19 	.word	0x0001fe19

00020284 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   20284:	b590      	push	{r4, r7, lr}
   20286:	b087      	sub	sp, #28
   20288:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   2028a:	230f      	movs	r3, #15
   2028c:	18fb      	adds	r3, r7, r3
   2028e:	2200      	movs	r2, #0
   20290:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   20292:	230f      	movs	r3, #15
   20294:	18fc      	adds	r4, r7, r3
   20296:	2308      	movs	r3, #8
   20298:	18fb      	adds	r3, r7, r3
   2029a:	4adc      	ldr	r2, [pc, #880]	; (2060c <hif_isr+0x388>)
   2029c:	0019      	movs	r1, r3
   2029e:	0010      	movs	r0, r2
   202a0:	4bdb      	ldr	r3, [pc, #876]	; (20610 <hif_isr+0x38c>)
   202a2:	4798      	blx	r3
   202a4:	0003      	movs	r3, r0
   202a6:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   202a8:	230f      	movs	r3, #15
   202aa:	18fb      	adds	r3, r7, r3
   202ac:	781b      	ldrb	r3, [r3, #0]
   202ae:	b25b      	sxtb	r3, r3
   202b0:	2b00      	cmp	r3, #0
   202b2:	d000      	beq.n	202b6 <hif_isr+0x32>
   202b4:	e21e      	b.n	206f4 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   202b6:	68bb      	ldr	r3, [r7, #8]
   202b8:	2201      	movs	r2, #1
   202ba:	4013      	ands	r3, r2
   202bc:	d100      	bne.n	202c0 <hif_isr+0x3c>
   202be:	e204      	b.n	206ca <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   202c0:	2000      	movs	r0, #0
   202c2:	4bd4      	ldr	r3, [pc, #848]	; (20614 <hif_isr+0x390>)
   202c4:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   202c6:	68bb      	ldr	r3, [r7, #8]
   202c8:	2201      	movs	r2, #1
   202ca:	4393      	bics	r3, r2
   202cc:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   202ce:	68bb      	ldr	r3, [r7, #8]
   202d0:	220f      	movs	r2, #15
   202d2:	18bc      	adds	r4, r7, r2
   202d4:	4acd      	ldr	r2, [pc, #820]	; (2060c <hif_isr+0x388>)
   202d6:	0019      	movs	r1, r3
   202d8:	0010      	movs	r0, r2
   202da:	4bcf      	ldr	r3, [pc, #828]	; (20618 <hif_isr+0x394>)
   202dc:	4798      	blx	r3
   202de:	0003      	movs	r3, r0
   202e0:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   202e2:	230f      	movs	r3, #15
   202e4:	18fb      	adds	r3, r7, r3
   202e6:	781b      	ldrb	r3, [r3, #0]
   202e8:	b25b      	sxtb	r3, r3
   202ea:	2b00      	cmp	r3, #0
   202ec:	d000      	beq.n	202f0 <hif_isr+0x6c>
   202ee:	e210      	b.n	20712 <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   202f0:	4bca      	ldr	r3, [pc, #808]	; (2061c <hif_isr+0x398>)
   202f2:	2201      	movs	r2, #1
   202f4:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   202f6:	68bb      	ldr	r3, [r7, #8]
   202f8:	089b      	lsrs	r3, r3, #2
   202fa:	b29a      	uxth	r2, r3
   202fc:	230c      	movs	r3, #12
   202fe:	18fb      	adds	r3, r7, r3
   20300:	0512      	lsls	r2, r2, #20
   20302:	0d12      	lsrs	r2, r2, #20
   20304:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   20306:	230c      	movs	r3, #12
   20308:	18fb      	adds	r3, r7, r3
   2030a:	881b      	ldrh	r3, [r3, #0]
   2030c:	2b00      	cmp	r3, #0
   2030e:	d100      	bne.n	20312 <hif_isr+0x8e>
   20310:	e1c8      	b.n	206a4 <hif_isr+0x420>
				uint32 address = 0;
   20312:	2300      	movs	r3, #0
   20314:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   20316:	230f      	movs	r3, #15
   20318:	18fc      	adds	r4, r7, r3
   2031a:	003b      	movs	r3, r7
   2031c:	4ac0      	ldr	r2, [pc, #768]	; (20620 <hif_isr+0x39c>)
   2031e:	0019      	movs	r1, r3
   20320:	0010      	movs	r0, r2
   20322:	4bbb      	ldr	r3, [pc, #748]	; (20610 <hif_isr+0x38c>)
   20324:	4798      	blx	r3
   20326:	0003      	movs	r3, r0
   20328:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   2032a:	230f      	movs	r3, #15
   2032c:	18fb      	adds	r3, r7, r3
   2032e:	781b      	ldrb	r3, [r3, #0]
   20330:	b25b      	sxtb	r3, r3
   20332:	2b00      	cmp	r3, #0
   20334:	d012      	beq.n	2035c <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   20336:	23e4      	movs	r3, #228	; 0xe4
   20338:	005a      	lsls	r2, r3, #1
   2033a:	49ba      	ldr	r1, [pc, #744]	; (20624 <hif_isr+0x3a0>)
   2033c:	4bba      	ldr	r3, [pc, #744]	; (20628 <hif_isr+0x3a4>)
   2033e:	0018      	movs	r0, r3
   20340:	4bba      	ldr	r3, [pc, #744]	; (2062c <hif_isr+0x3a8>)
   20342:	4798      	blx	r3
   20344:	4bba      	ldr	r3, [pc, #744]	; (20630 <hif_isr+0x3ac>)
   20346:	0018      	movs	r0, r3
   20348:	4bb8      	ldr	r3, [pc, #736]	; (2062c <hif_isr+0x3a8>)
   2034a:	4798      	blx	r3
   2034c:	4bb9      	ldr	r3, [pc, #740]	; (20634 <hif_isr+0x3b0>)
   2034e:	0018      	movs	r0, r3
   20350:	4bb6      	ldr	r3, [pc, #728]	; (2062c <hif_isr+0x3a8>)
   20352:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   20354:	2001      	movs	r0, #1
   20356:	4baf      	ldr	r3, [pc, #700]	; (20614 <hif_isr+0x390>)
   20358:	4798      	blx	r3
					goto ERR1;
   2035a:	e1db      	b.n	20714 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   2035c:	683a      	ldr	r2, [r7, #0]
   2035e:	4baf      	ldr	r3, [pc, #700]	; (2061c <hif_isr+0x398>)
   20360:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   20362:	230c      	movs	r3, #12
   20364:	18fb      	adds	r3, r7, r3
   20366:	881a      	ldrh	r2, [r3, #0]
   20368:	4bac      	ldr	r3, [pc, #688]	; (2061c <hif_isr+0x398>)
   2036a:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   2036c:	683b      	ldr	r3, [r7, #0]
   2036e:	220f      	movs	r2, #15
   20370:	18bc      	adds	r4, r7, r2
   20372:	1d39      	adds	r1, r7, #4
   20374:	2204      	movs	r2, #4
   20376:	0018      	movs	r0, r3
   20378:	4baf      	ldr	r3, [pc, #700]	; (20638 <hif_isr+0x3b4>)
   2037a:	4798      	blx	r3
   2037c:	0003      	movs	r3, r0
   2037e:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   20380:	1d3b      	adds	r3, r7, #4
   20382:	885b      	ldrh	r3, [r3, #2]
   20384:	b29a      	uxth	r2, r3
   20386:	1d3b      	adds	r3, r7, #4
   20388:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   2038a:	230f      	movs	r3, #15
   2038c:	18fb      	adds	r3, r7, r3
   2038e:	781b      	ldrb	r3, [r3, #0]
   20390:	b25b      	sxtb	r3, r3
   20392:	2b00      	cmp	r3, #0
   20394:	d012      	beq.n	203bc <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   20396:	23e9      	movs	r3, #233	; 0xe9
   20398:	005a      	lsls	r2, r3, #1
   2039a:	49a2      	ldr	r1, [pc, #648]	; (20624 <hif_isr+0x3a0>)
   2039c:	4ba2      	ldr	r3, [pc, #648]	; (20628 <hif_isr+0x3a4>)
   2039e:	0018      	movs	r0, r3
   203a0:	4ba2      	ldr	r3, [pc, #648]	; (2062c <hif_isr+0x3a8>)
   203a2:	4798      	blx	r3
   203a4:	4ba5      	ldr	r3, [pc, #660]	; (2063c <hif_isr+0x3b8>)
   203a6:	0018      	movs	r0, r3
   203a8:	4ba0      	ldr	r3, [pc, #640]	; (2062c <hif_isr+0x3a8>)
   203aa:	4798      	blx	r3
   203ac:	4ba1      	ldr	r3, [pc, #644]	; (20634 <hif_isr+0x3b0>)
   203ae:	0018      	movs	r0, r3
   203b0:	4b9e      	ldr	r3, [pc, #632]	; (2062c <hif_isr+0x3a8>)
   203b2:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   203b4:	2001      	movs	r0, #1
   203b6:	4b97      	ldr	r3, [pc, #604]	; (20614 <hif_isr+0x390>)
   203b8:	4798      	blx	r3
					goto ERR1;
   203ba:	e1ab      	b.n	20714 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   203bc:	1d3b      	adds	r3, r7, #4
   203be:	885b      	ldrh	r3, [r3, #2]
   203c0:	b29b      	uxth	r3, r3
   203c2:	220c      	movs	r2, #12
   203c4:	18ba      	adds	r2, r7, r2
   203c6:	8812      	ldrh	r2, [r2, #0]
   203c8:	429a      	cmp	r2, r3
   203ca:	d02f      	beq.n	2042c <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   203cc:	230c      	movs	r3, #12
   203ce:	18fb      	adds	r3, r7, r3
   203d0:	881b      	ldrh	r3, [r3, #0]
   203d2:	1d3a      	adds	r2, r7, #4
   203d4:	8852      	ldrh	r2, [r2, #2]
   203d6:	b292      	uxth	r2, r2
   203d8:	1a9b      	subs	r3, r3, r2
   203da:	2b04      	cmp	r3, #4
   203dc:	dd26      	ble.n	2042c <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   203de:	23dc      	movs	r3, #220	; 0xdc
   203e0:	33ff      	adds	r3, #255	; 0xff
   203e2:	001a      	movs	r2, r3
   203e4:	498f      	ldr	r1, [pc, #572]	; (20624 <hif_isr+0x3a0>)
   203e6:	4b90      	ldr	r3, [pc, #576]	; (20628 <hif_isr+0x3a4>)
   203e8:	0018      	movs	r0, r3
   203ea:	4b90      	ldr	r3, [pc, #576]	; (2062c <hif_isr+0x3a8>)
   203ec:	4798      	blx	r3
   203ee:	230c      	movs	r3, #12
   203f0:	18fb      	adds	r3, r7, r3
   203f2:	8819      	ldrh	r1, [r3, #0]
   203f4:	1d3b      	adds	r3, r7, #4
   203f6:	885b      	ldrh	r3, [r3, #2]
   203f8:	b29b      	uxth	r3, r3
   203fa:	001a      	movs	r2, r3
   203fc:	1d3b      	adds	r3, r7, #4
   203fe:	781b      	ldrb	r3, [r3, #0]
   20400:	b2db      	uxtb	r3, r3
   20402:	001c      	movs	r4, r3
   20404:	1d3b      	adds	r3, r7, #4
   20406:	785b      	ldrb	r3, [r3, #1]
   20408:	b2db      	uxtb	r3, r3
   2040a:	488d      	ldr	r0, [pc, #564]	; (20640 <hif_isr+0x3bc>)
   2040c:	9300      	str	r3, [sp, #0]
   2040e:	0023      	movs	r3, r4
   20410:	4c86      	ldr	r4, [pc, #536]	; (2062c <hif_isr+0x3a8>)
   20412:	47a0      	blx	r4
   20414:	4b87      	ldr	r3, [pc, #540]	; (20634 <hif_isr+0x3b0>)
   20416:	0018      	movs	r0, r3
   20418:	4b84      	ldr	r3, [pc, #528]	; (2062c <hif_isr+0x3a8>)
   2041a:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   2041c:	2001      	movs	r0, #1
   2041e:	4b7d      	ldr	r3, [pc, #500]	; (20614 <hif_isr+0x390>)
   20420:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   20422:	230f      	movs	r3, #15
   20424:	18fb      	adds	r3, r7, r3
   20426:	22fa      	movs	r2, #250	; 0xfa
   20428:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   2042a:	e173      	b.n	20714 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   2042c:	1d3b      	adds	r3, r7, #4
   2042e:	781b      	ldrb	r3, [r3, #0]
   20430:	b2db      	uxtb	r3, r3
   20432:	2b01      	cmp	r3, #1
   20434:	d122      	bne.n	2047c <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   20436:	4b79      	ldr	r3, [pc, #484]	; (2061c <hif_isr+0x398>)
   20438:	691b      	ldr	r3, [r3, #16]
   2043a:	2b00      	cmp	r3, #0
   2043c:	d00d      	beq.n	2045a <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2043e:	4b77      	ldr	r3, [pc, #476]	; (2061c <hif_isr+0x398>)
   20440:	691b      	ldr	r3, [r3, #16]
   20442:	1d3a      	adds	r2, r7, #4
   20444:	7852      	ldrb	r2, [r2, #1]
   20446:	b2d0      	uxtb	r0, r2
   20448:	1d3a      	adds	r2, r7, #4
   2044a:	8852      	ldrh	r2, [r2, #2]
   2044c:	b292      	uxth	r2, r2
   2044e:	3a08      	subs	r2, #8
   20450:	b291      	uxth	r1, r2
   20452:	683a      	ldr	r2, [r7, #0]
   20454:	3208      	adds	r2, #8
   20456:	4798      	blx	r3
   20458:	e102      	b.n	20660 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   2045a:	23e8      	movs	r3, #232	; 0xe8
   2045c:	33ff      	adds	r3, #255	; 0xff
   2045e:	001a      	movs	r2, r3
   20460:	4970      	ldr	r1, [pc, #448]	; (20624 <hif_isr+0x3a0>)
   20462:	4b71      	ldr	r3, [pc, #452]	; (20628 <hif_isr+0x3a4>)
   20464:	0018      	movs	r0, r3
   20466:	4b71      	ldr	r3, [pc, #452]	; (2062c <hif_isr+0x3a8>)
   20468:	4798      	blx	r3
   2046a:	4b76      	ldr	r3, [pc, #472]	; (20644 <hif_isr+0x3c0>)
   2046c:	0018      	movs	r0, r3
   2046e:	4b6f      	ldr	r3, [pc, #444]	; (2062c <hif_isr+0x3a8>)
   20470:	4798      	blx	r3
   20472:	4b70      	ldr	r3, [pc, #448]	; (20634 <hif_isr+0x3b0>)
   20474:	0018      	movs	r0, r3
   20476:	4b6d      	ldr	r3, [pc, #436]	; (2062c <hif_isr+0x3a8>)
   20478:	4798      	blx	r3
   2047a:	e0f1      	b.n	20660 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   2047c:	1d3b      	adds	r3, r7, #4
   2047e:	781b      	ldrb	r3, [r3, #0]
   20480:	b2db      	uxtb	r3, r3
   20482:	2b02      	cmp	r3, #2
   20484:	d122      	bne.n	204cc <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   20486:	4b65      	ldr	r3, [pc, #404]	; (2061c <hif_isr+0x398>)
   20488:	695b      	ldr	r3, [r3, #20]
   2048a:	2b00      	cmp	r3, #0
   2048c:	d00d      	beq.n	204aa <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2048e:	4b63      	ldr	r3, [pc, #396]	; (2061c <hif_isr+0x398>)
   20490:	695b      	ldr	r3, [r3, #20]
   20492:	1d3a      	adds	r2, r7, #4
   20494:	7852      	ldrb	r2, [r2, #1]
   20496:	b2d0      	uxtb	r0, r2
   20498:	1d3a      	adds	r2, r7, #4
   2049a:	8852      	ldrh	r2, [r2, #2]
   2049c:	b292      	uxth	r2, r2
   2049e:	3a08      	subs	r2, #8
   204a0:	b291      	uxth	r1, r2
   204a2:	683a      	ldr	r2, [r7, #0]
   204a4:	3208      	adds	r2, #8
   204a6:	4798      	blx	r3
   204a8:	e0da      	b.n	20660 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   204aa:	23f0      	movs	r3, #240	; 0xf0
   204ac:	33ff      	adds	r3, #255	; 0xff
   204ae:	001a      	movs	r2, r3
   204b0:	495c      	ldr	r1, [pc, #368]	; (20624 <hif_isr+0x3a0>)
   204b2:	4b5d      	ldr	r3, [pc, #372]	; (20628 <hif_isr+0x3a4>)
   204b4:	0018      	movs	r0, r3
   204b6:	4b5d      	ldr	r3, [pc, #372]	; (2062c <hif_isr+0x3a8>)
   204b8:	4798      	blx	r3
   204ba:	4b63      	ldr	r3, [pc, #396]	; (20648 <hif_isr+0x3c4>)
   204bc:	0018      	movs	r0, r3
   204be:	4b5b      	ldr	r3, [pc, #364]	; (2062c <hif_isr+0x3a8>)
   204c0:	4798      	blx	r3
   204c2:	4b5c      	ldr	r3, [pc, #368]	; (20634 <hif_isr+0x3b0>)
   204c4:	0018      	movs	r0, r3
   204c6:	4b59      	ldr	r3, [pc, #356]	; (2062c <hif_isr+0x3a8>)
   204c8:	4798      	blx	r3
   204ca:	e0c9      	b.n	20660 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   204cc:	1d3b      	adds	r3, r7, #4
   204ce:	781b      	ldrb	r3, [r3, #0]
   204d0:	b2db      	uxtb	r3, r3
   204d2:	2b04      	cmp	r3, #4
   204d4:	d122      	bne.n	2051c <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   204d6:	4b51      	ldr	r3, [pc, #324]	; (2061c <hif_isr+0x398>)
   204d8:	699b      	ldr	r3, [r3, #24]
   204da:	2b00      	cmp	r3, #0
   204dc:	d00d      	beq.n	204fa <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   204de:	4b4f      	ldr	r3, [pc, #316]	; (2061c <hif_isr+0x398>)
   204e0:	699b      	ldr	r3, [r3, #24]
   204e2:	1d3a      	adds	r2, r7, #4
   204e4:	7852      	ldrb	r2, [r2, #1]
   204e6:	b2d0      	uxtb	r0, r2
   204e8:	1d3a      	adds	r2, r7, #4
   204ea:	8852      	ldrh	r2, [r2, #2]
   204ec:	b292      	uxth	r2, r2
   204ee:	3a08      	subs	r2, #8
   204f0:	b291      	uxth	r1, r2
   204f2:	683a      	ldr	r2, [r7, #0]
   204f4:	3208      	adds	r2, #8
   204f6:	4798      	blx	r3
   204f8:	e0b2      	b.n	20660 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   204fa:	23f8      	movs	r3, #248	; 0xf8
   204fc:	33ff      	adds	r3, #255	; 0xff
   204fe:	001a      	movs	r2, r3
   20500:	4948      	ldr	r1, [pc, #288]	; (20624 <hif_isr+0x3a0>)
   20502:	4b49      	ldr	r3, [pc, #292]	; (20628 <hif_isr+0x3a4>)
   20504:	0018      	movs	r0, r3
   20506:	4b49      	ldr	r3, [pc, #292]	; (2062c <hif_isr+0x3a8>)
   20508:	4798      	blx	r3
   2050a:	4b50      	ldr	r3, [pc, #320]	; (2064c <hif_isr+0x3c8>)
   2050c:	0018      	movs	r0, r3
   2050e:	4b47      	ldr	r3, [pc, #284]	; (2062c <hif_isr+0x3a8>)
   20510:	4798      	blx	r3
   20512:	4b48      	ldr	r3, [pc, #288]	; (20634 <hif_isr+0x3b0>)
   20514:	0018      	movs	r0, r3
   20516:	4b45      	ldr	r3, [pc, #276]	; (2062c <hif_isr+0x3a8>)
   20518:	4798      	blx	r3
   2051a:	e0a1      	b.n	20660 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   2051c:	1d3b      	adds	r3, r7, #4
   2051e:	781b      	ldrb	r3, [r3, #0]
   20520:	b2db      	uxtb	r3, r3
   20522:	2b06      	cmp	r3, #6
   20524:	d121      	bne.n	2056a <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   20526:	4b3d      	ldr	r3, [pc, #244]	; (2061c <hif_isr+0x398>)
   20528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2052a:	2b00      	cmp	r3, #0
   2052c:	d00d      	beq.n	2054a <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2052e:	4b3b      	ldr	r3, [pc, #236]	; (2061c <hif_isr+0x398>)
   20530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20532:	1d3a      	adds	r2, r7, #4
   20534:	7852      	ldrb	r2, [r2, #1]
   20536:	b2d0      	uxtb	r0, r2
   20538:	1d3a      	adds	r2, r7, #4
   2053a:	8852      	ldrh	r2, [r2, #2]
   2053c:	b292      	uxth	r2, r2
   2053e:	3a08      	subs	r2, #8
   20540:	b291      	uxth	r1, r2
   20542:	683a      	ldr	r2, [r7, #0]
   20544:	3208      	adds	r2, #8
   20546:	4798      	blx	r3
   20548:	e08a      	b.n	20660 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   2054a:	2380      	movs	r3, #128	; 0x80
   2054c:	009a      	lsls	r2, r3, #2
   2054e:	4935      	ldr	r1, [pc, #212]	; (20624 <hif_isr+0x3a0>)
   20550:	4b35      	ldr	r3, [pc, #212]	; (20628 <hif_isr+0x3a4>)
   20552:	0018      	movs	r0, r3
   20554:	4b35      	ldr	r3, [pc, #212]	; (2062c <hif_isr+0x3a8>)
   20556:	4798      	blx	r3
   20558:	4b3d      	ldr	r3, [pc, #244]	; (20650 <hif_isr+0x3cc>)
   2055a:	0018      	movs	r0, r3
   2055c:	4b33      	ldr	r3, [pc, #204]	; (2062c <hif_isr+0x3a8>)
   2055e:	4798      	blx	r3
   20560:	4b34      	ldr	r3, [pc, #208]	; (20634 <hif_isr+0x3b0>)
   20562:	0018      	movs	r0, r3
   20564:	4b31      	ldr	r3, [pc, #196]	; (2062c <hif_isr+0x3a8>)
   20566:	4798      	blx	r3
   20568:	e07a      	b.n	20660 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   2056a:	1d3b      	adds	r3, r7, #4
   2056c:	781b      	ldrb	r3, [r3, #0]
   2056e:	b2db      	uxtb	r3, r3
   20570:	2b07      	cmp	r3, #7
   20572:	d120      	bne.n	205b6 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   20574:	4b29      	ldr	r3, [pc, #164]	; (2061c <hif_isr+0x398>)
   20576:	69db      	ldr	r3, [r3, #28]
   20578:	2b00      	cmp	r3, #0
   2057a:	d00d      	beq.n	20598 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2057c:	4b27      	ldr	r3, [pc, #156]	; (2061c <hif_isr+0x398>)
   2057e:	69db      	ldr	r3, [r3, #28]
   20580:	1d3a      	adds	r2, r7, #4
   20582:	7852      	ldrb	r2, [r2, #1]
   20584:	b2d0      	uxtb	r0, r2
   20586:	1d3a      	adds	r2, r7, #4
   20588:	8852      	ldrh	r2, [r2, #2]
   2058a:	b292      	uxth	r2, r2
   2058c:	3a08      	subs	r2, #8
   2058e:	b291      	uxth	r1, r2
   20590:	683a      	ldr	r2, [r7, #0]
   20592:	3208      	adds	r2, #8
   20594:	4798      	blx	r3
   20596:	e063      	b.n	20660 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   20598:	4a2e      	ldr	r2, [pc, #184]	; (20654 <hif_isr+0x3d0>)
   2059a:	4922      	ldr	r1, [pc, #136]	; (20624 <hif_isr+0x3a0>)
   2059c:	4b22      	ldr	r3, [pc, #136]	; (20628 <hif_isr+0x3a4>)
   2059e:	0018      	movs	r0, r3
   205a0:	4b22      	ldr	r3, [pc, #136]	; (2062c <hif_isr+0x3a8>)
   205a2:	4798      	blx	r3
   205a4:	4b2c      	ldr	r3, [pc, #176]	; (20658 <hif_isr+0x3d4>)
   205a6:	0018      	movs	r0, r3
   205a8:	4b20      	ldr	r3, [pc, #128]	; (2062c <hif_isr+0x3a8>)
   205aa:	4798      	blx	r3
   205ac:	4b21      	ldr	r3, [pc, #132]	; (20634 <hif_isr+0x3b0>)
   205ae:	0018      	movs	r0, r3
   205b0:	4b1e      	ldr	r3, [pc, #120]	; (2062c <hif_isr+0x3a8>)
   205b2:	4798      	blx	r3
   205b4:	e054      	b.n	20660 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   205b6:	1d3b      	adds	r3, r7, #4
   205b8:	781b      	ldrb	r3, [r3, #0]
   205ba:	b2db      	uxtb	r3, r3
   205bc:	2b05      	cmp	r3, #5
   205be:	d111      	bne.n	205e4 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   205c0:	4b16      	ldr	r3, [pc, #88]	; (2061c <hif_isr+0x398>)
   205c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   205c4:	2b00      	cmp	r3, #0
   205c6:	d04b      	beq.n	20660 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   205c8:	4b14      	ldr	r3, [pc, #80]	; (2061c <hif_isr+0x398>)
   205ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   205cc:	1d3a      	adds	r2, r7, #4
   205ce:	7852      	ldrb	r2, [r2, #1]
   205d0:	b2d0      	uxtb	r0, r2
   205d2:	1d3a      	adds	r2, r7, #4
   205d4:	8852      	ldrh	r2, [r2, #2]
   205d6:	b292      	uxth	r2, r2
   205d8:	3a08      	subs	r2, #8
   205da:	b291      	uxth	r1, r2
   205dc:	683a      	ldr	r2, [r7, #0]
   205de:	3208      	adds	r2, #8
   205e0:	4798      	blx	r3
   205e2:	e03d      	b.n	20660 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   205e4:	2384      	movs	r3, #132	; 0x84
   205e6:	009a      	lsls	r2, r3, #2
   205e8:	490e      	ldr	r1, [pc, #56]	; (20624 <hif_isr+0x3a0>)
   205ea:	4b0f      	ldr	r3, [pc, #60]	; (20628 <hif_isr+0x3a4>)
   205ec:	0018      	movs	r0, r3
   205ee:	4b0f      	ldr	r3, [pc, #60]	; (2062c <hif_isr+0x3a8>)
   205f0:	4798      	blx	r3
   205f2:	4b1a      	ldr	r3, [pc, #104]	; (2065c <hif_isr+0x3d8>)
   205f4:	0018      	movs	r0, r3
   205f6:	4b0d      	ldr	r3, [pc, #52]	; (2062c <hif_isr+0x3a8>)
   205f8:	4798      	blx	r3
   205fa:	4b0e      	ldr	r3, [pc, #56]	; (20634 <hif_isr+0x3b0>)
   205fc:	0018      	movs	r0, r3
   205fe:	4b0b      	ldr	r3, [pc, #44]	; (2062c <hif_isr+0x3a8>)
   20600:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   20602:	230f      	movs	r3, #15
   20604:	18fb      	adds	r3, r7, r3
   20606:	22fa      	movs	r2, #250	; 0xfa
   20608:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   2060a:	e083      	b.n	20714 <hif_isr+0x490>
   2060c:	00001070 	.word	0x00001070
   20610:	00021d11 	.word	0x00021d11
   20614:	0001f435 	.word	0x0001f435
   20618:	00021d35 	.word	0x00021d35
   2061c:	20005a98 	.word	0x20005a98
   20620:	00001084 	.word	0x00001084
   20624:	000380c4 	.word	0x000380c4
   20628:	00037db4 	.word	0x00037db4
   2062c:	0001cee9 	.word	0x0001cee9
   20630:	00037de8 	.word	0x00037de8
   20634:	00037db0 	.word	0x00037db0
   20638:	00021d85 	.word	0x00021d85
   2063c:	00037e10 	.word	0x00037e10
   20640:	00037e28 	.word	0x00037e28
   20644:	00037e68 	.word	0x00037e68
   20648:	00037e8c 	.word	0x00037e8c
   2064c:	00037eb0 	.word	0x00037eb0
   20650:	00037ed0 	.word	0x00037ed0
   20654:	00000207 	.word	0x00000207
   20658:	00037ef4 	.word	0x00037ef4
   2065c:	00037f18 	.word	0x00037f18
				}
				if(gstrHifCxt.u8HifRXDone)
   20660:	4b30      	ldr	r3, [pc, #192]	; (20724 <hif_isr+0x4a0>)
   20662:	789b      	ldrb	r3, [r3, #2]
   20664:	b2db      	uxtb	r3, r3
   20666:	2b00      	cmp	r3, #0
   20668:	d054      	beq.n	20714 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   2066a:	4a2f      	ldr	r2, [pc, #188]	; (20728 <hif_isr+0x4a4>)
   2066c:	492f      	ldr	r1, [pc, #188]	; (2072c <hif_isr+0x4a8>)
   2066e:	4b30      	ldr	r3, [pc, #192]	; (20730 <hif_isr+0x4ac>)
   20670:	0018      	movs	r0, r3
   20672:	4b30      	ldr	r3, [pc, #192]	; (20734 <hif_isr+0x4b0>)
   20674:	4798      	blx	r3
   20676:	1d3b      	adds	r3, r7, #4
   20678:	781b      	ldrb	r3, [r3, #0]
   2067a:	b2db      	uxtb	r3, r3
   2067c:	0019      	movs	r1, r3
   2067e:	1d3b      	adds	r3, r7, #4
   20680:	785b      	ldrb	r3, [r3, #1]
   20682:	b2db      	uxtb	r3, r3
   20684:	001a      	movs	r2, r3
   20686:	4b2c      	ldr	r3, [pc, #176]	; (20738 <hif_isr+0x4b4>)
   20688:	0018      	movs	r0, r3
   2068a:	4b2a      	ldr	r3, [pc, #168]	; (20734 <hif_isr+0x4b0>)
   2068c:	4798      	blx	r3
   2068e:	4b2b      	ldr	r3, [pc, #172]	; (2073c <hif_isr+0x4b8>)
   20690:	0018      	movs	r0, r3
   20692:	4b28      	ldr	r3, [pc, #160]	; (20734 <hif_isr+0x4b0>)
   20694:	4798      	blx	r3
					ret = hif_set_rx_done();
   20696:	230f      	movs	r3, #15
   20698:	18fc      	adds	r4, r7, r3
   2069a:	4b29      	ldr	r3, [pc, #164]	; (20740 <hif_isr+0x4bc>)
   2069c:	4798      	blx	r3
   2069e:	0003      	movs	r3, r0
   206a0:	7023      	strb	r3, [r4, #0]
   206a2:	e037      	b.n	20714 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   206a4:	4a27      	ldr	r2, [pc, #156]	; (20744 <hif_isr+0x4c0>)
   206a6:	4921      	ldr	r1, [pc, #132]	; (2072c <hif_isr+0x4a8>)
   206a8:	4b21      	ldr	r3, [pc, #132]	; (20730 <hif_isr+0x4ac>)
   206aa:	0018      	movs	r0, r3
   206ac:	4b21      	ldr	r3, [pc, #132]	; (20734 <hif_isr+0x4b0>)
   206ae:	4798      	blx	r3
   206b0:	4b25      	ldr	r3, [pc, #148]	; (20748 <hif_isr+0x4c4>)
   206b2:	0018      	movs	r0, r3
   206b4:	4b1f      	ldr	r3, [pc, #124]	; (20734 <hif_isr+0x4b0>)
   206b6:	4798      	blx	r3
   206b8:	4b20      	ldr	r3, [pc, #128]	; (2073c <hif_isr+0x4b8>)
   206ba:	0018      	movs	r0, r3
   206bc:	4b1d      	ldr	r3, [pc, #116]	; (20734 <hif_isr+0x4b0>)
   206be:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   206c0:	230f      	movs	r3, #15
   206c2:	18fb      	adds	r3, r7, r3
   206c4:	22fe      	movs	r2, #254	; 0xfe
   206c6:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   206c8:	e024      	b.n	20714 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   206ca:	4a20      	ldr	r2, [pc, #128]	; (2074c <hif_isr+0x4c8>)
   206cc:	4917      	ldr	r1, [pc, #92]	; (2072c <hif_isr+0x4a8>)
   206ce:	4b18      	ldr	r3, [pc, #96]	; (20730 <hif_isr+0x4ac>)
   206d0:	0018      	movs	r0, r3
   206d2:	4b18      	ldr	r3, [pc, #96]	; (20734 <hif_isr+0x4b0>)
   206d4:	4798      	blx	r3
   206d6:	68ba      	ldr	r2, [r7, #8]
   206d8:	4b1d      	ldr	r3, [pc, #116]	; (20750 <hif_isr+0x4cc>)
   206da:	0011      	movs	r1, r2
   206dc:	0018      	movs	r0, r3
   206de:	4b15      	ldr	r3, [pc, #84]	; (20734 <hif_isr+0x4b0>)
   206e0:	4798      	blx	r3
   206e2:	4b16      	ldr	r3, [pc, #88]	; (2073c <hif_isr+0x4b8>)
   206e4:	0018      	movs	r0, r3
   206e6:	4b13      	ldr	r3, [pc, #76]	; (20734 <hif_isr+0x4b0>)
   206e8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   206ea:	230f      	movs	r3, #15
   206ec:	18fb      	adds	r3, r7, r3
   206ee:	22f4      	movs	r2, #244	; 0xf4
   206f0:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   206f2:	e00f      	b.n	20714 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   206f4:	4a17      	ldr	r2, [pc, #92]	; (20754 <hif_isr+0x4d0>)
   206f6:	490d      	ldr	r1, [pc, #52]	; (2072c <hif_isr+0x4a8>)
   206f8:	4b0d      	ldr	r3, [pc, #52]	; (20730 <hif_isr+0x4ac>)
   206fa:	0018      	movs	r0, r3
   206fc:	4b0d      	ldr	r3, [pc, #52]	; (20734 <hif_isr+0x4b0>)
   206fe:	4798      	blx	r3
   20700:	4b15      	ldr	r3, [pc, #84]	; (20758 <hif_isr+0x4d4>)
   20702:	0018      	movs	r0, r3
   20704:	4b0b      	ldr	r3, [pc, #44]	; (20734 <hif_isr+0x4b0>)
   20706:	4798      	blx	r3
   20708:	4b0c      	ldr	r3, [pc, #48]	; (2073c <hif_isr+0x4b8>)
   2070a:	0018      	movs	r0, r3
   2070c:	4b09      	ldr	r3, [pc, #36]	; (20734 <hif_isr+0x4b0>)
   2070e:	4798      	blx	r3
		goto ERR1;
   20710:	e000      	b.n	20714 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   20712:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   20714:	230f      	movs	r3, #15
   20716:	18fb      	adds	r3, r7, r3
   20718:	781b      	ldrb	r3, [r3, #0]
   2071a:	b25b      	sxtb	r3, r3
}
   2071c:	0018      	movs	r0, r3
   2071e:	46bd      	mov	sp, r7
   20720:	b005      	add	sp, #20
   20722:	bd90      	pop	{r4, r7, pc}
   20724:	20005a98 	.word	0x20005a98
   20728:	00000216 	.word	0x00000216
   2072c:	000380c4 	.word	0x000380c4
   20730:	00037db4 	.word	0x00037db4
   20734:	0001cee9 	.word	0x0001cee9
   20738:	00037f30 	.word	0x00037f30
   2073c:	00037db0 	.word	0x00037db0
   20740:	0001fd19 	.word	0x0001fd19
   20744:	0000021d 	.word	0x0000021d
   20748:	00037f5c 	.word	0x00037f5c
   2074c:	00000225 	.word	0x00000225
   20750:	00037f70 	.word	0x00037f70
   20754:	0000022e 	.word	0x0000022e
   20758:	00037f8c 	.word	0x00037f8c

0002075c <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   2075c:	b590      	push	{r4, r7, lr}
   2075e:	b083      	sub	sp, #12
   20760:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   20762:	1dfb      	adds	r3, r7, #7
   20764:	2200      	movs	r2, #0
   20766:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   20768:	4b1c      	ldr	r3, [pc, #112]	; (207dc <hif_handle_isr+0x80>)
   2076a:	2200      	movs	r2, #0
   2076c:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   2076e:	e024      	b.n	207ba <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   20770:	4b1a      	ldr	r3, [pc, #104]	; (207dc <hif_handle_isr+0x80>)
   20772:	78db      	ldrb	r3, [r3, #3]
   20774:	b2db      	uxtb	r3, r3
   20776:	3b01      	subs	r3, #1
   20778:	b2da      	uxtb	r2, r3
   2077a:	4b18      	ldr	r3, [pc, #96]	; (207dc <hif_handle_isr+0x80>)
   2077c:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   2077e:	1dfc      	adds	r4, r7, #7
   20780:	4b17      	ldr	r3, [pc, #92]	; (207e0 <hif_handle_isr+0x84>)
   20782:	4798      	blx	r3
   20784:	0003      	movs	r3, r0
   20786:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   20788:	1dfb      	adds	r3, r7, #7
   2078a:	781b      	ldrb	r3, [r3, #0]
   2078c:	b25b      	sxtb	r3, r3
   2078e:	2b00      	cmp	r3, #0
   20790:	d100      	bne.n	20794 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   20792:	e012      	b.n	207ba <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   20794:	4a13      	ldr	r2, [pc, #76]	; (207e4 <hif_handle_isr+0x88>)
   20796:	4914      	ldr	r1, [pc, #80]	; (207e8 <hif_handle_isr+0x8c>)
   20798:	4b14      	ldr	r3, [pc, #80]	; (207ec <hif_handle_isr+0x90>)
   2079a:	0018      	movs	r0, r3
   2079c:	4b14      	ldr	r3, [pc, #80]	; (207f0 <hif_handle_isr+0x94>)
   2079e:	4798      	blx	r3
   207a0:	1dfb      	adds	r3, r7, #7
   207a2:	2200      	movs	r2, #0
   207a4:	569a      	ldrsb	r2, [r3, r2]
   207a6:	4b13      	ldr	r3, [pc, #76]	; (207f4 <hif_handle_isr+0x98>)
   207a8:	0011      	movs	r1, r2
   207aa:	0018      	movs	r0, r3
   207ac:	4b10      	ldr	r3, [pc, #64]	; (207f0 <hif_handle_isr+0x94>)
   207ae:	4798      	blx	r3
   207b0:	4b11      	ldr	r3, [pc, #68]	; (207f8 <hif_handle_isr+0x9c>)
   207b2:	0018      	movs	r0, r3
   207b4:	4b0e      	ldr	r3, [pc, #56]	; (207f0 <hif_handle_isr+0x94>)
   207b6:	4798      	blx	r3
			ret = hif_isr();
   207b8:	e7e1      	b.n	2077e <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   207ba:	4b08      	ldr	r3, [pc, #32]	; (207dc <hif_handle_isr+0x80>)
   207bc:	78db      	ldrb	r3, [r3, #3]
   207be:	b2db      	uxtb	r3, r3
   207c0:	2b00      	cmp	r3, #0
   207c2:	d004      	beq.n	207ce <hif_handle_isr+0x72>
   207c4:	4b05      	ldr	r3, [pc, #20]	; (207dc <hif_handle_isr+0x80>)
   207c6:	791b      	ldrb	r3, [r3, #4]
   207c8:	b2db      	uxtb	r3, r3
   207ca:	2b00      	cmp	r3, #0
   207cc:	d0d0      	beq.n	20770 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   207ce:	1dfb      	adds	r3, r7, #7
   207d0:	781b      	ldrb	r3, [r3, #0]
   207d2:	b25b      	sxtb	r3, r3
}
   207d4:	0018      	movs	r0, r3
   207d6:	46bd      	mov	sp, r7
   207d8:	b003      	add	sp, #12
   207da:	bd90      	pop	{r4, r7, pc}
   207dc:	20005a98 	.word	0x20005a98
   207e0:	00020285 	.word	0x00020285
   207e4:	00000257 	.word	0x00000257
   207e8:	000380cc 	.word	0x000380cc
   207ec:	00037db4 	.word	0x00037db4
   207f0:	0001cee9 	.word	0x0001cee9
   207f4:	00037fb0 	.word	0x00037fb0
   207f8:	00037db0 	.word	0x00037db0

000207fc <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   207fc:	b590      	push	{r4, r7, lr}
   207fe:	b087      	sub	sp, #28
   20800:	af00      	add	r7, sp, #0
   20802:	60f8      	str	r0, [r7, #12]
   20804:	60b9      	str	r1, [r7, #8]
   20806:	0019      	movs	r1, r3
   20808:	1dbb      	adds	r3, r7, #6
   2080a:	801a      	strh	r2, [r3, #0]
   2080c:	1d7b      	adds	r3, r7, #5
   2080e:	1c0a      	adds	r2, r1, #0
   20810:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   20812:	2317      	movs	r3, #23
   20814:	18fb      	adds	r3, r7, r3
   20816:	2200      	movs	r2, #0
   20818:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   2081a:	68fb      	ldr	r3, [r7, #12]
   2081c:	2b00      	cmp	r3, #0
   2081e:	d006      	beq.n	2082e <hif_receive+0x32>
   20820:	68bb      	ldr	r3, [r7, #8]
   20822:	2b00      	cmp	r3, #0
   20824:	d003      	beq.n	2082e <hif_receive+0x32>
   20826:	1dbb      	adds	r3, r7, #6
   20828:	881b      	ldrh	r3, [r3, #0]
   2082a:	2b00      	cmp	r3, #0
   2082c:	d11e      	bne.n	2086c <hif_receive+0x70>
	{
		if(isDone)
   2082e:	1d7b      	adds	r3, r7, #5
   20830:	781b      	ldrb	r3, [r3, #0]
   20832:	2b00      	cmp	r3, #0
   20834:	d006      	beq.n	20844 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   20836:	2317      	movs	r3, #23
   20838:	18fc      	adds	r4, r7, r3
   2083a:	4b45      	ldr	r3, [pc, #276]	; (20950 <hif_receive+0x154>)
   2083c:	4798      	blx	r3
   2083e:	0003      	movs	r3, r0
   20840:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   20842:	e07c      	b.n	2093e <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   20844:	2317      	movs	r3, #23
   20846:	18fb      	adds	r3, r7, r3
   20848:	22f4      	movs	r2, #244	; 0xf4
   2084a:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   2084c:	239e      	movs	r3, #158	; 0x9e
   2084e:	009a      	lsls	r2, r3, #2
   20850:	4940      	ldr	r1, [pc, #256]	; (20954 <hif_receive+0x158>)
   20852:	4b41      	ldr	r3, [pc, #260]	; (20958 <hif_receive+0x15c>)
   20854:	0018      	movs	r0, r3
   20856:	4b41      	ldr	r3, [pc, #260]	; (2095c <hif_receive+0x160>)
   20858:	4798      	blx	r3
   2085a:	4b41      	ldr	r3, [pc, #260]	; (20960 <hif_receive+0x164>)
   2085c:	0018      	movs	r0, r3
   2085e:	4b3f      	ldr	r3, [pc, #252]	; (2095c <hif_receive+0x160>)
   20860:	4798      	blx	r3
   20862:	4b40      	ldr	r3, [pc, #256]	; (20964 <hif_receive+0x168>)
   20864:	0018      	movs	r0, r3
   20866:	4b3d      	ldr	r3, [pc, #244]	; (2095c <hif_receive+0x160>)
   20868:	4798      	blx	r3
		goto ERR1;
   2086a:	e068      	b.n	2093e <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   2086c:	1dbb      	adds	r3, r7, #6
   2086e:	881a      	ldrh	r2, [r3, #0]
   20870:	4b3d      	ldr	r3, [pc, #244]	; (20968 <hif_receive+0x16c>)
   20872:	68db      	ldr	r3, [r3, #12]
   20874:	429a      	cmp	r2, r3
   20876:	d917      	bls.n	208a8 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   20878:	2317      	movs	r3, #23
   2087a:	18fb      	adds	r3, r7, r3
   2087c:	22f4      	movs	r2, #244	; 0xf4
   2087e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   20880:	23a0      	movs	r3, #160	; 0xa0
   20882:	009a      	lsls	r2, r3, #2
   20884:	4933      	ldr	r1, [pc, #204]	; (20954 <hif_receive+0x158>)
   20886:	4b34      	ldr	r3, [pc, #208]	; (20958 <hif_receive+0x15c>)
   20888:	0018      	movs	r0, r3
   2088a:	4b34      	ldr	r3, [pc, #208]	; (2095c <hif_receive+0x160>)
   2088c:	4798      	blx	r3
   2088e:	1dbb      	adds	r3, r7, #6
   20890:	8819      	ldrh	r1, [r3, #0]
   20892:	4b35      	ldr	r3, [pc, #212]	; (20968 <hif_receive+0x16c>)
   20894:	68da      	ldr	r2, [r3, #12]
   20896:	4b35      	ldr	r3, [pc, #212]	; (2096c <hif_receive+0x170>)
   20898:	0018      	movs	r0, r3
   2089a:	4b30      	ldr	r3, [pc, #192]	; (2095c <hif_receive+0x160>)
   2089c:	4798      	blx	r3
   2089e:	4b31      	ldr	r3, [pc, #196]	; (20964 <hif_receive+0x168>)
   208a0:	0018      	movs	r0, r3
   208a2:	4b2e      	ldr	r3, [pc, #184]	; (2095c <hif_receive+0x160>)
   208a4:	4798      	blx	r3
		goto ERR1;
   208a6:	e04a      	b.n	2093e <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   208a8:	4b2f      	ldr	r3, [pc, #188]	; (20968 <hif_receive+0x16c>)
   208aa:	689a      	ldr	r2, [r3, #8]
   208ac:	68fb      	ldr	r3, [r7, #12]
   208ae:	429a      	cmp	r2, r3
   208b0:	d80a      	bhi.n	208c8 <hif_receive+0xcc>
   208b2:	1dbb      	adds	r3, r7, #6
   208b4:	881a      	ldrh	r2, [r3, #0]
   208b6:	68fb      	ldr	r3, [r7, #12]
   208b8:	18d2      	adds	r2, r2, r3
   208ba:	4b2b      	ldr	r3, [pc, #172]	; (20968 <hif_receive+0x16c>)
   208bc:	6899      	ldr	r1, [r3, #8]
   208be:	4b2a      	ldr	r3, [pc, #168]	; (20968 <hif_receive+0x16c>)
   208c0:	68db      	ldr	r3, [r3, #12]
   208c2:	18cb      	adds	r3, r1, r3
   208c4:	429a      	cmp	r2, r3
   208c6:	d912      	bls.n	208ee <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   208c8:	2317      	movs	r3, #23
   208ca:	18fb      	adds	r3, r7, r3
   208cc:	22f4      	movs	r2, #244	; 0xf4
   208ce:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   208d0:	4a27      	ldr	r2, [pc, #156]	; (20970 <hif_receive+0x174>)
   208d2:	4920      	ldr	r1, [pc, #128]	; (20954 <hif_receive+0x158>)
   208d4:	4b20      	ldr	r3, [pc, #128]	; (20958 <hif_receive+0x15c>)
   208d6:	0018      	movs	r0, r3
   208d8:	4b20      	ldr	r3, [pc, #128]	; (2095c <hif_receive+0x160>)
   208da:	4798      	blx	r3
   208dc:	4b25      	ldr	r3, [pc, #148]	; (20974 <hif_receive+0x178>)
   208de:	0018      	movs	r0, r3
   208e0:	4b1e      	ldr	r3, [pc, #120]	; (2095c <hif_receive+0x160>)
   208e2:	4798      	blx	r3
   208e4:	4b1f      	ldr	r3, [pc, #124]	; (20964 <hif_receive+0x168>)
   208e6:	0018      	movs	r0, r3
   208e8:	4b1c      	ldr	r3, [pc, #112]	; (2095c <hif_receive+0x160>)
   208ea:	4798      	blx	r3
		goto ERR1;
   208ec:	e027      	b.n	2093e <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   208ee:	1dbb      	adds	r3, r7, #6
   208f0:	881a      	ldrh	r2, [r3, #0]
   208f2:	2317      	movs	r3, #23
   208f4:	18fc      	adds	r4, r7, r3
   208f6:	68b9      	ldr	r1, [r7, #8]
   208f8:	68fb      	ldr	r3, [r7, #12]
   208fa:	0018      	movs	r0, r3
   208fc:	4b1e      	ldr	r3, [pc, #120]	; (20978 <hif_receive+0x17c>)
   208fe:	4798      	blx	r3
   20900:	0003      	movs	r3, r0
   20902:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   20904:	2317      	movs	r3, #23
   20906:	18fb      	adds	r3, r7, r3
   20908:	781b      	ldrb	r3, [r3, #0]
   2090a:	b25b      	sxtb	r3, r3
   2090c:	2b00      	cmp	r3, #0
   2090e:	d115      	bne.n	2093c <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   20910:	4b15      	ldr	r3, [pc, #84]	; (20968 <hif_receive+0x16c>)
   20912:	689a      	ldr	r2, [r3, #8]
   20914:	4b14      	ldr	r3, [pc, #80]	; (20968 <hif_receive+0x16c>)
   20916:	68db      	ldr	r3, [r3, #12]
   20918:	18d2      	adds	r2, r2, r3
   2091a:	1dbb      	adds	r3, r7, #6
   2091c:	8819      	ldrh	r1, [r3, #0]
   2091e:	68fb      	ldr	r3, [r7, #12]
   20920:	18cb      	adds	r3, r1, r3
   20922:	429a      	cmp	r2, r3
   20924:	d003      	beq.n	2092e <hif_receive+0x132>
   20926:	1d7b      	adds	r3, r7, #5
   20928:	781b      	ldrb	r3, [r3, #0]
   2092a:	2b00      	cmp	r3, #0
   2092c:	d007      	beq.n	2093e <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   2092e:	2317      	movs	r3, #23
   20930:	18fc      	adds	r4, r7, r3
   20932:	4b07      	ldr	r3, [pc, #28]	; (20950 <hif_receive+0x154>)
   20934:	4798      	blx	r3
   20936:	0003      	movs	r3, r0
   20938:	7023      	strb	r3, [r4, #0]
   2093a:	e000      	b.n	2093e <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   2093c:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   2093e:	2317      	movs	r3, #23
   20940:	18fb      	adds	r3, r7, r3
   20942:	781b      	ldrb	r3, [r3, #0]
   20944:	b25b      	sxtb	r3, r3
}
   20946:	0018      	movs	r0, r3
   20948:	46bd      	mov	sp, r7
   2094a:	b007      	add	sp, #28
   2094c:	bd90      	pop	{r4, r7, pc}
   2094e:	46c0      	nop			; (mov r8, r8)
   20950:	0001fd19 	.word	0x0001fd19
   20954:	000380dc 	.word	0x000380dc
   20958:	00037db4 	.word	0x00037db4
   2095c:	0001cee9 	.word	0x0001cee9
   20960:	00037fe0 	.word	0x00037fe0
   20964:	00037db0 	.word	0x00037db0
   20968:	20005a98 	.word	0x20005a98
   2096c:	00038000 	.word	0x00038000
   20970:	00000286 	.word	0x00000286
   20974:	00038048 	.word	0x00038048
   20978:	00021d85 	.word	0x00021d85

0002097c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   2097c:	b580      	push	{r7, lr}
   2097e:	b084      	sub	sp, #16
   20980:	af00      	add	r7, sp, #0
   20982:	0002      	movs	r2, r0
   20984:	6039      	str	r1, [r7, #0]
   20986:	1dfb      	adds	r3, r7, #7
   20988:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   2098a:	230f      	movs	r3, #15
   2098c:	18fb      	adds	r3, r7, r3
   2098e:	2200      	movs	r2, #0
   20990:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   20992:	1dfb      	adds	r3, r7, #7
   20994:	781b      	ldrb	r3, [r3, #0]
   20996:	2b07      	cmp	r3, #7
   20998:	d820      	bhi.n	209dc <hif_register_cb+0x60>
   2099a:	009a      	lsls	r2, r3, #2
   2099c:	4b1e      	ldr	r3, [pc, #120]	; (20a18 <hif_register_cb+0x9c>)
   2099e:	18d3      	adds	r3, r2, r3
   209a0:	681b      	ldr	r3, [r3, #0]
   209a2:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   209a4:	4b1d      	ldr	r3, [pc, #116]	; (20a1c <hif_register_cb+0xa0>)
   209a6:	683a      	ldr	r2, [r7, #0]
   209a8:	615a      	str	r2, [r3, #20]
			break;
   209aa:	e02d      	b.n	20a08 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   209ac:	4b1b      	ldr	r3, [pc, #108]	; (20a1c <hif_register_cb+0xa0>)
   209ae:	683a      	ldr	r2, [r7, #0]
   209b0:	611a      	str	r2, [r3, #16]
			break;
   209b2:	e029      	b.n	20a08 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   209b4:	4b19      	ldr	r3, [pc, #100]	; (20a1c <hif_register_cb+0xa0>)
   209b6:	683a      	ldr	r2, [r7, #0]
   209b8:	619a      	str	r2, [r3, #24]
			break;
   209ba:	e025      	b.n	20a08 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   209bc:	4b17      	ldr	r3, [pc, #92]	; (20a1c <hif_register_cb+0xa0>)
   209be:	683a      	ldr	r2, [r7, #0]
   209c0:	621a      	str	r2, [r3, #32]
			break;
   209c2:	e021      	b.n	20a08 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   209c4:	4b15      	ldr	r3, [pc, #84]	; (20a1c <hif_register_cb+0xa0>)
   209c6:	683a      	ldr	r2, [r7, #0]
   209c8:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   209ca:	e01d      	b.n	20a08 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   209cc:	4b13      	ldr	r3, [pc, #76]	; (20a1c <hif_register_cb+0xa0>)
   209ce:	683a      	ldr	r2, [r7, #0]
   209d0:	61da      	str	r2, [r3, #28]
			break;
   209d2:	e019      	b.n	20a08 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   209d4:	4b11      	ldr	r3, [pc, #68]	; (20a1c <hif_register_cb+0xa0>)
   209d6:	683a      	ldr	r2, [r7, #0]
   209d8:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   209da:	e015      	b.n	20a08 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   209dc:	4a10      	ldr	r2, [pc, #64]	; (20a20 <hif_register_cb+0xa4>)
   209de:	4911      	ldr	r1, [pc, #68]	; (20a24 <hif_register_cb+0xa8>)
   209e0:	4b11      	ldr	r3, [pc, #68]	; (20a28 <hif_register_cb+0xac>)
   209e2:	0018      	movs	r0, r3
   209e4:	4b11      	ldr	r3, [pc, #68]	; (20a2c <hif_register_cb+0xb0>)
   209e6:	4798      	blx	r3
   209e8:	1dfb      	adds	r3, r7, #7
   209ea:	781a      	ldrb	r2, [r3, #0]
   209ec:	4b10      	ldr	r3, [pc, #64]	; (20a30 <hif_register_cb+0xb4>)
   209ee:	0011      	movs	r1, r2
   209f0:	0018      	movs	r0, r3
   209f2:	4b0e      	ldr	r3, [pc, #56]	; (20a2c <hif_register_cb+0xb0>)
   209f4:	4798      	blx	r3
   209f6:	4b0f      	ldr	r3, [pc, #60]	; (20a34 <hif_register_cb+0xb8>)
   209f8:	0018      	movs	r0, r3
   209fa:	4b0c      	ldr	r3, [pc, #48]	; (20a2c <hif_register_cb+0xb0>)
   209fc:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   209fe:	230f      	movs	r3, #15
   20a00:	18fb      	adds	r3, r7, r3
   20a02:	22f4      	movs	r2, #244	; 0xf4
   20a04:	701a      	strb	r2, [r3, #0]
			break;
   20a06:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   20a08:	230f      	movs	r3, #15
   20a0a:	18fb      	adds	r3, r7, r3
   20a0c:	781b      	ldrb	r3, [r3, #0]
   20a0e:	b25b      	sxtb	r3, r3
}
   20a10:	0018      	movs	r0, r3
   20a12:	46bd      	mov	sp, r7
   20a14:	b004      	add	sp, #16
   20a16:	bd80      	pop	{r7, pc}
   20a18:	00038098 	.word	0x00038098
   20a1c:	20005a98 	.word	0x20005a98
   20a20:	000002be 	.word	0x000002be
   20a24:	000380e8 	.word	0x000380e8
   20a28:	00037db4 	.word	0x00037db4
   20a2c:	0001cee9 	.word	0x0001cee9
   20a30:	0003808c 	.word	0x0003808c
   20a34:	00037db0 	.word	0x00037db0

00020a38 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   20a38:	b590      	push	{r4, r7, lr}
   20a3a:	b0af      	sub	sp, #188	; 0xbc
   20a3c:	af02      	add	r7, sp, #8
   20a3e:	603a      	str	r2, [r7, #0]
   20a40:	1dfb      	adds	r3, r7, #7
   20a42:	1c02      	adds	r2, r0, #0
   20a44:	701a      	strb	r2, [r3, #0]
   20a46:	1d3b      	adds	r3, r7, #4
   20a48:	1c0a      	adds	r2, r1, #0
   20a4a:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   20a4c:	1dfb      	adds	r3, r7, #7
   20a4e:	781b      	ldrb	r3, [r3, #0]
   20a50:	2b2c      	cmp	r3, #44	; 0x2c
   20a52:	d116      	bne.n	20a82 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   20a54:	23a4      	movs	r3, #164	; 0xa4
   20a56:	18f9      	adds	r1, r7, r3
   20a58:	6838      	ldr	r0, [r7, #0]
   20a5a:	2300      	movs	r3, #0
   20a5c:	2204      	movs	r2, #4
   20a5e:	4cca      	ldr	r4, [pc, #808]	; (20d88 <m2m_wifi_cb+0x350>)
   20a60:	47a0      	blx	r4
   20a62:	1e03      	subs	r3, r0, #0
   20a64:	d000      	beq.n	20a68 <m2m_wifi_cb+0x30>
   20a66:	e1b4      	b.n	20dd2 <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   20a68:	4bc8      	ldr	r3, [pc, #800]	; (20d8c <m2m_wifi_cb+0x354>)
   20a6a:	681b      	ldr	r3, [r3, #0]
   20a6c:	2b00      	cmp	r3, #0
   20a6e:	d100      	bne.n	20a72 <m2m_wifi_cb+0x3a>
   20a70:	e1af      	b.n	20dd2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   20a72:	4bc6      	ldr	r3, [pc, #792]	; (20d8c <m2m_wifi_cb+0x354>)
   20a74:	681b      	ldr	r3, [r3, #0]
   20a76:	22a4      	movs	r2, #164	; 0xa4
   20a78:	18ba      	adds	r2, r7, r2
   20a7a:	0011      	movs	r1, r2
   20a7c:	202c      	movs	r0, #44	; 0x2c
   20a7e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   20a80:	e1a7      	b.n	20dd2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   20a82:	1dfb      	adds	r3, r7, #7
   20a84:	781b      	ldrb	r3, [r3, #0]
   20a86:	2b1b      	cmp	r3, #27
   20a88:	d116      	bne.n	20ab8 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   20a8a:	239c      	movs	r3, #156	; 0x9c
   20a8c:	18f9      	adds	r1, r7, r3
   20a8e:	6838      	ldr	r0, [r7, #0]
   20a90:	2300      	movs	r3, #0
   20a92:	2208      	movs	r2, #8
   20a94:	4cbc      	ldr	r4, [pc, #752]	; (20d88 <m2m_wifi_cb+0x350>)
   20a96:	47a0      	blx	r4
   20a98:	1e03      	subs	r3, r0, #0
   20a9a:	d000      	beq.n	20a9e <m2m_wifi_cb+0x66>
   20a9c:	e199      	b.n	20dd2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20a9e:	4bbb      	ldr	r3, [pc, #748]	; (20d8c <m2m_wifi_cb+0x354>)
   20aa0:	681b      	ldr	r3, [r3, #0]
   20aa2:	2b00      	cmp	r3, #0
   20aa4:	d100      	bne.n	20aa8 <m2m_wifi_cb+0x70>
   20aa6:	e194      	b.n	20dd2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   20aa8:	4bb8      	ldr	r3, [pc, #736]	; (20d8c <m2m_wifi_cb+0x354>)
   20aaa:	681b      	ldr	r3, [r3, #0]
   20aac:	229c      	movs	r2, #156	; 0x9c
   20aae:	18ba      	adds	r2, r7, r2
   20ab0:	0011      	movs	r1, r2
   20ab2:	201b      	movs	r0, #27
   20ab4:	4798      	blx	r3
}
   20ab6:	e18c      	b.n	20dd2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   20ab8:	1dfb      	adds	r3, r7, #7
   20aba:	781b      	ldrb	r3, [r3, #0]
   20abc:	2b06      	cmp	r3, #6
   20abe:	d116      	bne.n	20aee <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   20ac0:	230c      	movs	r3, #12
   20ac2:	18f9      	adds	r1, r7, r3
   20ac4:	6838      	ldr	r0, [r7, #0]
   20ac6:	2301      	movs	r3, #1
   20ac8:	2230      	movs	r2, #48	; 0x30
   20aca:	4caf      	ldr	r4, [pc, #700]	; (20d88 <m2m_wifi_cb+0x350>)
   20acc:	47a0      	blx	r4
   20ace:	1e03      	subs	r3, r0, #0
   20ad0:	d000      	beq.n	20ad4 <m2m_wifi_cb+0x9c>
   20ad2:	e17e      	b.n	20dd2 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   20ad4:	4bad      	ldr	r3, [pc, #692]	; (20d8c <m2m_wifi_cb+0x354>)
   20ad6:	681b      	ldr	r3, [r3, #0]
   20ad8:	2b00      	cmp	r3, #0
   20ada:	d100      	bne.n	20ade <m2m_wifi_cb+0xa6>
   20adc:	e179      	b.n	20dd2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   20ade:	4bab      	ldr	r3, [pc, #684]	; (20d8c <m2m_wifi_cb+0x354>)
   20ae0:	681b      	ldr	r3, [r3, #0]
   20ae2:	220c      	movs	r2, #12
   20ae4:	18ba      	adds	r2, r7, r2
   20ae6:	0011      	movs	r1, r2
   20ae8:	2006      	movs	r0, #6
   20aea:	4798      	blx	r3
}
   20aec:	e171      	b.n	20dd2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   20aee:	1dfb      	adds	r3, r7, #7
   20af0:	781b      	ldrb	r3, [r3, #0]
   20af2:	2b0e      	cmp	r3, #14
   20af4:	d100      	bne.n	20af8 <m2m_wifi_cb+0xc0>
   20af6:	e16c      	b.n	20dd2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   20af8:	1dfb      	adds	r3, r7, #7
   20afa:	781b      	ldrb	r3, [r3, #0]
   20afc:	2b32      	cmp	r3, #50	; 0x32
   20afe:	d116      	bne.n	20b2e <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   20b00:	2384      	movs	r3, #132	; 0x84
   20b02:	18f9      	adds	r1, r7, r3
   20b04:	6838      	ldr	r0, [r7, #0]
   20b06:	2300      	movs	r3, #0
   20b08:	2218      	movs	r2, #24
   20b0a:	4c9f      	ldr	r4, [pc, #636]	; (20d88 <m2m_wifi_cb+0x350>)
   20b0c:	47a0      	blx	r4
   20b0e:	1e03      	subs	r3, r0, #0
   20b10:	d000      	beq.n	20b14 <m2m_wifi_cb+0xdc>
   20b12:	e15e      	b.n	20dd2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20b14:	4b9d      	ldr	r3, [pc, #628]	; (20d8c <m2m_wifi_cb+0x354>)
   20b16:	681b      	ldr	r3, [r3, #0]
   20b18:	2b00      	cmp	r3, #0
   20b1a:	d100      	bne.n	20b1e <m2m_wifi_cb+0xe6>
   20b1c:	e159      	b.n	20dd2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   20b1e:	4b9b      	ldr	r3, [pc, #620]	; (20d8c <m2m_wifi_cb+0x354>)
   20b20:	681b      	ldr	r3, [r3, #0]
   20b22:	2284      	movs	r2, #132	; 0x84
   20b24:	18ba      	adds	r2, r7, r2
   20b26:	0011      	movs	r1, r2
   20b28:	2032      	movs	r0, #50	; 0x32
   20b2a:	4798      	blx	r3
}
   20b2c:	e151      	b.n	20dd2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   20b2e:	1dfb      	adds	r3, r7, #7
   20b30:	781b      	ldrb	r3, [r3, #0]
   20b32:	2b2f      	cmp	r3, #47	; 0x2f
   20b34:	d11d      	bne.n	20b72 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   20b36:	230c      	movs	r3, #12
   20b38:	18fb      	adds	r3, r7, r3
   20b3a:	2264      	movs	r2, #100	; 0x64
   20b3c:	2100      	movs	r1, #0
   20b3e:	0018      	movs	r0, r3
   20b40:	4b93      	ldr	r3, [pc, #588]	; (20d90 <m2m_wifi_cb+0x358>)
   20b42:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   20b44:	230c      	movs	r3, #12
   20b46:	18f9      	adds	r1, r7, r3
   20b48:	6838      	ldr	r0, [r7, #0]
   20b4a:	2300      	movs	r3, #0
   20b4c:	2264      	movs	r2, #100	; 0x64
   20b4e:	4c8e      	ldr	r4, [pc, #568]	; (20d88 <m2m_wifi_cb+0x350>)
   20b50:	47a0      	blx	r4
   20b52:	1e03      	subs	r3, r0, #0
   20b54:	d000      	beq.n	20b58 <m2m_wifi_cb+0x120>
   20b56:	e13c      	b.n	20dd2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20b58:	4b8c      	ldr	r3, [pc, #560]	; (20d8c <m2m_wifi_cb+0x354>)
   20b5a:	681b      	ldr	r3, [r3, #0]
   20b5c:	2b00      	cmp	r3, #0
   20b5e:	d100      	bne.n	20b62 <m2m_wifi_cb+0x12a>
   20b60:	e137      	b.n	20dd2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   20b62:	4b8a      	ldr	r3, [pc, #552]	; (20d8c <m2m_wifi_cb+0x354>)
   20b64:	681b      	ldr	r3, [r3, #0]
   20b66:	220c      	movs	r2, #12
   20b68:	18ba      	adds	r2, r7, r2
   20b6a:	0011      	movs	r1, r2
   20b6c:	202f      	movs	r0, #47	; 0x2f
   20b6e:	4798      	blx	r3
}
   20b70:	e12f      	b.n	20dd2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   20b72:	1dfb      	adds	r3, r7, #7
   20b74:	781b      	ldrb	r3, [r3, #0]
   20b76:	2b34      	cmp	r3, #52	; 0x34
   20b78:	d137      	bne.n	20bea <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   20b7a:	2380      	movs	r3, #128	; 0x80
   20b7c:	18f9      	adds	r1, r7, r3
   20b7e:	6838      	ldr	r0, [r7, #0]
   20b80:	2300      	movs	r3, #0
   20b82:	2204      	movs	r2, #4
   20b84:	4c80      	ldr	r4, [pc, #512]	; (20d88 <m2m_wifi_cb+0x350>)
   20b86:	47a0      	blx	r4
   20b88:	1e03      	subs	r3, r0, #0
   20b8a:	d000      	beq.n	20b8e <m2m_wifi_cb+0x156>
   20b8c:	e121      	b.n	20dd2 <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   20b8e:	4b81      	ldr	r3, [pc, #516]	; (20d94 <m2m_wifi_cb+0x35c>)
   20b90:	0018      	movs	r0, r3
   20b92:	4b81      	ldr	r3, [pc, #516]	; (20d98 <m2m_wifi_cb+0x360>)
   20b94:	4798      	blx	r3
   20b96:	2380      	movs	r3, #128	; 0x80
   20b98:	18fb      	adds	r3, r7, r3
   20b9a:	681b      	ldr	r3, [r3, #0]
   20b9c:	0e1b      	lsrs	r3, r3, #24
   20b9e:	b2db      	uxtb	r3, r3
   20ba0:	0019      	movs	r1, r3
   20ba2:	2380      	movs	r3, #128	; 0x80
   20ba4:	18fb      	adds	r3, r7, r3
   20ba6:	681b      	ldr	r3, [r3, #0]
   20ba8:	0c1b      	lsrs	r3, r3, #16
   20baa:	b2db      	uxtb	r3, r3
   20bac:	001a      	movs	r2, r3
   20bae:	2380      	movs	r3, #128	; 0x80
   20bb0:	18fb      	adds	r3, r7, r3
   20bb2:	681b      	ldr	r3, [r3, #0]
   20bb4:	0a1b      	lsrs	r3, r3, #8
   20bb6:	b2db      	uxtb	r3, r3
   20bb8:	001c      	movs	r4, r3
   20bba:	2380      	movs	r3, #128	; 0x80
   20bbc:	18fb      	adds	r3, r7, r3
   20bbe:	681b      	ldr	r3, [r3, #0]
   20bc0:	b2db      	uxtb	r3, r3
   20bc2:	4876      	ldr	r0, [pc, #472]	; (20d9c <m2m_wifi_cb+0x364>)
   20bc4:	9300      	str	r3, [sp, #0]
   20bc6:	0023      	movs	r3, r4
   20bc8:	4c73      	ldr	r4, [pc, #460]	; (20d98 <m2m_wifi_cb+0x360>)
   20bca:	47a0      	blx	r4
   20bcc:	4b74      	ldr	r3, [pc, #464]	; (20da0 <m2m_wifi_cb+0x368>)
   20bce:	0018      	movs	r0, r3
   20bd0:	4b71      	ldr	r3, [pc, #452]	; (20d98 <m2m_wifi_cb+0x360>)
   20bd2:	4798      	blx	r3
			if (gpfAppWifiCb)
   20bd4:	4b6d      	ldr	r3, [pc, #436]	; (20d8c <m2m_wifi_cb+0x354>)
   20bd6:	681b      	ldr	r3, [r3, #0]
   20bd8:	2b00      	cmp	r3, #0
   20bda:	d100      	bne.n	20bde <m2m_wifi_cb+0x1a6>
   20bdc:	e0f9      	b.n	20dd2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   20bde:	4b6b      	ldr	r3, [pc, #428]	; (20d8c <m2m_wifi_cb+0x354>)
   20be0:	681b      	ldr	r3, [r3, #0]
   20be2:	2100      	movs	r1, #0
   20be4:	2034      	movs	r0, #52	; 0x34
   20be6:	4798      	blx	r3
}
   20be8:	e0f3      	b.n	20dd2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   20bea:	1dfb      	adds	r3, r7, #7
   20bec:	781b      	ldrb	r3, [r3, #0]
   20bee:	2b11      	cmp	r3, #17
   20bf0:	d11e      	bne.n	20c30 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   20bf2:	4b6c      	ldr	r3, [pc, #432]	; (20da4 <m2m_wifi_cb+0x36c>)
   20bf4:	2200      	movs	r2, #0
   20bf6:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   20bf8:	237c      	movs	r3, #124	; 0x7c
   20bfa:	18f9      	adds	r1, r7, r3
   20bfc:	6838      	ldr	r0, [r7, #0]
   20bfe:	2300      	movs	r3, #0
   20c00:	2204      	movs	r2, #4
   20c02:	4c61      	ldr	r4, [pc, #388]	; (20d88 <m2m_wifi_cb+0x350>)
   20c04:	47a0      	blx	r4
   20c06:	1e03      	subs	r3, r0, #0
   20c08:	d000      	beq.n	20c0c <m2m_wifi_cb+0x1d4>
   20c0a:	e0e2      	b.n	20dd2 <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   20c0c:	237c      	movs	r3, #124	; 0x7c
   20c0e:	18fb      	adds	r3, r7, r3
   20c10:	781a      	ldrb	r2, [r3, #0]
   20c12:	4b65      	ldr	r3, [pc, #404]	; (20da8 <m2m_wifi_cb+0x370>)
   20c14:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   20c16:	4b5d      	ldr	r3, [pc, #372]	; (20d8c <m2m_wifi_cb+0x354>)
   20c18:	681b      	ldr	r3, [r3, #0]
   20c1a:	2b00      	cmp	r3, #0
   20c1c:	d100      	bne.n	20c20 <m2m_wifi_cb+0x1e8>
   20c1e:	e0d8      	b.n	20dd2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   20c20:	4b5a      	ldr	r3, [pc, #360]	; (20d8c <m2m_wifi_cb+0x354>)
   20c22:	681b      	ldr	r3, [r3, #0]
   20c24:	227c      	movs	r2, #124	; 0x7c
   20c26:	18ba      	adds	r2, r7, r2
   20c28:	0011      	movs	r1, r2
   20c2a:	2011      	movs	r0, #17
   20c2c:	4798      	blx	r3
}
   20c2e:	e0d0      	b.n	20dd2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   20c30:	1dfb      	adds	r3, r7, #7
   20c32:	781b      	ldrb	r3, [r3, #0]
   20c34:	2b13      	cmp	r3, #19
   20c36:	d116      	bne.n	20c66 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   20c38:	230c      	movs	r3, #12
   20c3a:	18f9      	adds	r1, r7, r3
   20c3c:	6838      	ldr	r0, [r7, #0]
   20c3e:	2300      	movs	r3, #0
   20c40:	222c      	movs	r2, #44	; 0x2c
   20c42:	4c51      	ldr	r4, [pc, #324]	; (20d88 <m2m_wifi_cb+0x350>)
   20c44:	47a0      	blx	r4
   20c46:	1e03      	subs	r3, r0, #0
   20c48:	d000      	beq.n	20c4c <m2m_wifi_cb+0x214>
   20c4a:	e0c2      	b.n	20dd2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20c4c:	4b4f      	ldr	r3, [pc, #316]	; (20d8c <m2m_wifi_cb+0x354>)
   20c4e:	681b      	ldr	r3, [r3, #0]
   20c50:	2b00      	cmp	r3, #0
   20c52:	d100      	bne.n	20c56 <m2m_wifi_cb+0x21e>
   20c54:	e0bd      	b.n	20dd2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   20c56:	4b4d      	ldr	r3, [pc, #308]	; (20d8c <m2m_wifi_cb+0x354>)
   20c58:	681b      	ldr	r3, [r3, #0]
   20c5a:	220c      	movs	r2, #12
   20c5c:	18ba      	adds	r2, r7, r2
   20c5e:	0011      	movs	r1, r2
   20c60:	2013      	movs	r0, #19
   20c62:	4798      	blx	r3
}
   20c64:	e0b5      	b.n	20dd2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   20c66:	1dfb      	adds	r3, r7, #7
   20c68:	781b      	ldrb	r3, [r3, #0]
   20c6a:	2b04      	cmp	r3, #4
   20c6c:	d116      	bne.n	20c9c <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   20c6e:	23a8      	movs	r3, #168	; 0xa8
   20c70:	18f9      	adds	r1, r7, r3
   20c72:	6838      	ldr	r0, [r7, #0]
   20c74:	2300      	movs	r3, #0
   20c76:	2204      	movs	r2, #4
   20c78:	4c43      	ldr	r4, [pc, #268]	; (20d88 <m2m_wifi_cb+0x350>)
   20c7a:	47a0      	blx	r4
   20c7c:	1e03      	subs	r3, r0, #0
   20c7e:	d000      	beq.n	20c82 <m2m_wifi_cb+0x24a>
   20c80:	e0a7      	b.n	20dd2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20c82:	4b42      	ldr	r3, [pc, #264]	; (20d8c <m2m_wifi_cb+0x354>)
   20c84:	681b      	ldr	r3, [r3, #0]
   20c86:	2b00      	cmp	r3, #0
   20c88:	d100      	bne.n	20c8c <m2m_wifi_cb+0x254>
   20c8a:	e0a2      	b.n	20dd2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   20c8c:	4b3f      	ldr	r3, [pc, #252]	; (20d8c <m2m_wifi_cb+0x354>)
   20c8e:	681b      	ldr	r3, [r3, #0]
   20c90:	22a8      	movs	r2, #168	; 0xa8
   20c92:	18ba      	adds	r2, r7, r2
   20c94:	0011      	movs	r1, r2
   20c96:	2004      	movs	r0, #4
   20c98:	4798      	blx	r3
}
   20c9a:	e09a      	b.n	20dd2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   20c9c:	1dfb      	adds	r3, r7, #7
   20c9e:	781b      	ldrb	r3, [r3, #0]
   20ca0:	2b65      	cmp	r3, #101	; 0x65
   20ca2:	d116      	bne.n	20cd2 <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   20ca4:	23a8      	movs	r3, #168	; 0xa8
   20ca6:	18f9      	adds	r1, r7, r3
   20ca8:	6838      	ldr	r0, [r7, #0]
   20caa:	2300      	movs	r3, #0
   20cac:	2204      	movs	r2, #4
   20cae:	4c36      	ldr	r4, [pc, #216]	; (20d88 <m2m_wifi_cb+0x350>)
   20cb0:	47a0      	blx	r4
   20cb2:	1e03      	subs	r3, r0, #0
   20cb4:	d000      	beq.n	20cb8 <m2m_wifi_cb+0x280>
   20cb6:	e08c      	b.n	20dd2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20cb8:	4b34      	ldr	r3, [pc, #208]	; (20d8c <m2m_wifi_cb+0x354>)
   20cba:	681b      	ldr	r3, [r3, #0]
   20cbc:	2b00      	cmp	r3, #0
   20cbe:	d100      	bne.n	20cc2 <m2m_wifi_cb+0x28a>
   20cc0:	e087      	b.n	20dd2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   20cc2:	4b32      	ldr	r3, [pc, #200]	; (20d8c <m2m_wifi_cb+0x354>)
   20cc4:	681b      	ldr	r3, [r3, #0]
   20cc6:	22a8      	movs	r2, #168	; 0xa8
   20cc8:	18ba      	adds	r2, r7, r2
   20cca:	0011      	movs	r1, r2
   20ccc:	2065      	movs	r0, #101	; 0x65
   20cce:	4798      	blx	r3
}
   20cd0:	e07f      	b.n	20dd2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   20cd2:	1dfb      	adds	r3, r7, #7
   20cd4:	781b      	ldrb	r3, [r3, #0]
   20cd6:	2b09      	cmp	r3, #9
   20cd8:	d116      	bne.n	20d08 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   20cda:	230c      	movs	r3, #12
   20cdc:	18f9      	adds	r1, r7, r3
   20cde:	6838      	ldr	r0, [r7, #0]
   20ce0:	2301      	movs	r3, #1
   20ce2:	2264      	movs	r2, #100	; 0x64
   20ce4:	4c28      	ldr	r4, [pc, #160]	; (20d88 <m2m_wifi_cb+0x350>)
   20ce6:	47a0      	blx	r4
   20ce8:	1e03      	subs	r3, r0, #0
   20cea:	d000      	beq.n	20cee <m2m_wifi_cb+0x2b6>
   20cec:	e071      	b.n	20dd2 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   20cee:	4b27      	ldr	r3, [pc, #156]	; (20d8c <m2m_wifi_cb+0x354>)
   20cf0:	681b      	ldr	r3, [r3, #0]
   20cf2:	2b00      	cmp	r3, #0
   20cf4:	d100      	bne.n	20cf8 <m2m_wifi_cb+0x2c0>
   20cf6:	e06c      	b.n	20dd2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   20cf8:	4b24      	ldr	r3, [pc, #144]	; (20d8c <m2m_wifi_cb+0x354>)
   20cfa:	681b      	ldr	r3, [r3, #0]
   20cfc:	220c      	movs	r2, #12
   20cfe:	18ba      	adds	r2, r7, r2
   20d00:	0011      	movs	r1, r2
   20d02:	2009      	movs	r0, #9
   20d04:	4798      	blx	r3
}
   20d06:	e064      	b.n	20dd2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   20d08:	1dfb      	adds	r3, r7, #7
   20d0a:	781b      	ldrb	r3, [r3, #0]
   20d0c:	2b2a      	cmp	r3, #42	; 0x2a
   20d0e:	d114      	bne.n	20d3a <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   20d10:	2378      	movs	r3, #120	; 0x78
   20d12:	18f9      	adds	r1, r7, r3
   20d14:	6838      	ldr	r0, [r7, #0]
   20d16:	2301      	movs	r3, #1
   20d18:	2204      	movs	r2, #4
   20d1a:	4c1b      	ldr	r4, [pc, #108]	; (20d88 <m2m_wifi_cb+0x350>)
   20d1c:	47a0      	blx	r4
   20d1e:	1e03      	subs	r3, r0, #0
   20d20:	d157      	bne.n	20dd2 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   20d22:	4b1a      	ldr	r3, [pc, #104]	; (20d8c <m2m_wifi_cb+0x354>)
   20d24:	681b      	ldr	r3, [r3, #0]
   20d26:	2b00      	cmp	r3, #0
   20d28:	d053      	beq.n	20dd2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   20d2a:	4b18      	ldr	r3, [pc, #96]	; (20d8c <m2m_wifi_cb+0x354>)
   20d2c:	681b      	ldr	r3, [r3, #0]
   20d2e:	2278      	movs	r2, #120	; 0x78
   20d30:	18ba      	adds	r2, r7, r2
   20d32:	0011      	movs	r1, r2
   20d34:	202a      	movs	r0, #42	; 0x2a
   20d36:	4798      	blx	r3
}
   20d38:	e04b      	b.n	20dd2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   20d3a:	1dfb      	adds	r3, r7, #7
   20d3c:	781b      	ldrb	r3, [r3, #0]
   20d3e:	2b20      	cmp	r3, #32
   20d40:	d134      	bne.n	20dac <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   20d42:	2370      	movs	r3, #112	; 0x70
   20d44:	18f9      	adds	r1, r7, r3
   20d46:	6838      	ldr	r0, [r7, #0]
   20d48:	2300      	movs	r3, #0
   20d4a:	2208      	movs	r2, #8
   20d4c:	4c0e      	ldr	r4, [pc, #56]	; (20d88 <m2m_wifi_cb+0x350>)
   20d4e:	47a0      	blx	r4
   20d50:	1e03      	subs	r3, r0, #0
   20d52:	d13e      	bne.n	20dd2 <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   20d54:	683b      	ldr	r3, [r7, #0]
   20d56:	3308      	adds	r3, #8
   20d58:	0018      	movs	r0, r3
   20d5a:	2370      	movs	r3, #112	; 0x70
   20d5c:	18fb      	adds	r3, r7, r3
   20d5e:	6819      	ldr	r1, [r3, #0]
   20d60:	2370      	movs	r3, #112	; 0x70
   20d62:	18fb      	adds	r3, r7, r3
   20d64:	889a      	ldrh	r2, [r3, #4]
   20d66:	2301      	movs	r3, #1
   20d68:	4c07      	ldr	r4, [pc, #28]	; (20d88 <m2m_wifi_cb+0x350>)
   20d6a:	47a0      	blx	r4
   20d6c:	1e03      	subs	r3, r0, #0
   20d6e:	d130      	bne.n	20dd2 <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   20d70:	4b06      	ldr	r3, [pc, #24]	; (20d8c <m2m_wifi_cb+0x354>)
   20d72:	681b      	ldr	r3, [r3, #0]
   20d74:	2b00      	cmp	r3, #0
   20d76:	d02c      	beq.n	20dd2 <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   20d78:	4b04      	ldr	r3, [pc, #16]	; (20d8c <m2m_wifi_cb+0x354>)
   20d7a:	681b      	ldr	r3, [r3, #0]
   20d7c:	2270      	movs	r2, #112	; 0x70
   20d7e:	18ba      	adds	r2, r7, r2
   20d80:	0011      	movs	r1, r2
   20d82:	2020      	movs	r0, #32
   20d84:	4798      	blx	r3
}
   20d86:	e024      	b.n	20dd2 <m2m_wifi_cb+0x39a>
   20d88:	000207fd 	.word	0x000207fd
   20d8c:	20004274 	.word	0x20004274
   20d90:	0001fc81 	.word	0x0001fc81
   20d94:	000380f8 	.word	0x000380f8
   20d98:	0001cee9 	.word	0x0001cee9
   20d9c:	00038104 	.word	0x00038104
   20da0:	00038124 	.word	0x00038124
   20da4:	20004271 	.word	0x20004271
   20da8:	20004270 	.word	0x20004270
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   20dac:	2324      	movs	r3, #36	; 0x24
   20dae:	33ff      	adds	r3, #255	; 0xff
   20db0:	001a      	movs	r2, r3
   20db2:	490a      	ldr	r1, [pc, #40]	; (20ddc <m2m_wifi_cb+0x3a4>)
   20db4:	4b0a      	ldr	r3, [pc, #40]	; (20de0 <m2m_wifi_cb+0x3a8>)
   20db6:	0018      	movs	r0, r3
   20db8:	4b0a      	ldr	r3, [pc, #40]	; (20de4 <m2m_wifi_cb+0x3ac>)
   20dba:	4798      	blx	r3
   20dbc:	1dfb      	adds	r3, r7, #7
   20dbe:	781a      	ldrb	r2, [r3, #0]
   20dc0:	4b09      	ldr	r3, [pc, #36]	; (20de8 <m2m_wifi_cb+0x3b0>)
   20dc2:	0011      	movs	r1, r2
   20dc4:	0018      	movs	r0, r3
   20dc6:	4b07      	ldr	r3, [pc, #28]	; (20de4 <m2m_wifi_cb+0x3ac>)
   20dc8:	4798      	blx	r3
   20dca:	4b08      	ldr	r3, [pc, #32]	; (20dec <m2m_wifi_cb+0x3b4>)
   20dcc:	0018      	movs	r0, r3
   20dce:	4b05      	ldr	r3, [pc, #20]	; (20de4 <m2m_wifi_cb+0x3ac>)
   20dd0:	4798      	blx	r3
}
   20dd2:	46c0      	nop			; (mov r8, r8)
   20dd4:	46bd      	mov	sp, r7
   20dd6:	b02d      	add	sp, #180	; 0xb4
   20dd8:	bd90      	pop	{r4, r7, pc}
   20dda:	46c0      	nop			; (mov r8, r8)
   20ddc:	000384c4 	.word	0x000384c4
   20de0:	00038128 	.word	0x00038128
   20de4:	0001cee9 	.word	0x0001cee9
   20de8:	0003813c 	.word	0x0003813c
   20dec:	00038124 	.word	0x00038124

00020df0 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   20df0:	b590      	push	{r4, r7, lr}
   20df2:	b091      	sub	sp, #68	; 0x44
   20df4:	af02      	add	r7, sp, #8
   20df6:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   20df8:	2337      	movs	r3, #55	; 0x37
   20dfa:	18fb      	adds	r3, r7, r3
   20dfc:	2200      	movs	r2, #0
   20dfe:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   20e00:	230b      	movs	r3, #11
   20e02:	18fb      	adds	r3, r7, r3
   20e04:	2201      	movs	r2, #1
   20e06:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   20e08:	687b      	ldr	r3, [r7, #4]
   20e0a:	2b00      	cmp	r3, #0
   20e0c:	d104      	bne.n	20e18 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   20e0e:	2337      	movs	r3, #55	; 0x37
   20e10:	18fb      	adds	r3, r7, r3
   20e12:	22f4      	movs	r2, #244	; 0xf4
   20e14:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   20e16:	e0b3      	b.n	20f80 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   20e18:	687b      	ldr	r3, [r7, #4]
   20e1a:	681a      	ldr	r2, [r3, #0]
   20e1c:	4b5c      	ldr	r3, [pc, #368]	; (20f90 <m2m_wifi_init+0x1a0>)
   20e1e:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   20e20:	4b5c      	ldr	r3, [pc, #368]	; (20f94 <m2m_wifi_init+0x1a4>)
   20e22:	2200      	movs	r2, #0
   20e24:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   20e26:	2337      	movs	r3, #55	; 0x37
   20e28:	18fc      	adds	r4, r7, r3
   20e2a:	230b      	movs	r3, #11
   20e2c:	18fb      	adds	r3, r7, r3
   20e2e:	0018      	movs	r0, r3
   20e30:	4b59      	ldr	r3, [pc, #356]	; (20f98 <m2m_wifi_init+0x1a8>)
   20e32:	4798      	blx	r3
   20e34:	0003      	movs	r3, r0
   20e36:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   20e38:	2337      	movs	r3, #55	; 0x37
   20e3a:	18fb      	adds	r3, r7, r3
   20e3c:	781b      	ldrb	r3, [r3, #0]
   20e3e:	b25b      	sxtb	r3, r3
   20e40:	2b00      	cmp	r3, #0
   20e42:	d000      	beq.n	20e46 <m2m_wifi_init+0x56>
   20e44:	e099      	b.n	20f7a <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   20e46:	2337      	movs	r3, #55	; 0x37
   20e48:	18fc      	adds	r4, r7, r3
   20e4a:	2000      	movs	r0, #0
   20e4c:	4b53      	ldr	r3, [pc, #332]	; (20f9c <m2m_wifi_init+0x1ac>)
   20e4e:	4798      	blx	r3
   20e50:	0003      	movs	r3, r0
   20e52:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   20e54:	2337      	movs	r3, #55	; 0x37
   20e56:	18fb      	adds	r3, r7, r3
   20e58:	781b      	ldrb	r3, [r3, #0]
   20e5a:	b25b      	sxtb	r3, r3
   20e5c:	2b00      	cmp	r3, #0
   20e5e:	d000      	beq.n	20e62 <m2m_wifi_init+0x72>
   20e60:	e086      	b.n	20f70 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   20e62:	4b4f      	ldr	r3, [pc, #316]	; (20fa0 <m2m_wifi_init+0x1b0>)
   20e64:	0019      	movs	r1, r3
   20e66:	2001      	movs	r0, #1
   20e68:	4b4e      	ldr	r3, [pc, #312]	; (20fa4 <m2m_wifi_init+0x1b4>)
   20e6a:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   20e6c:	2337      	movs	r3, #55	; 0x37
   20e6e:	18fc      	adds	r4, r7, r3
   20e70:	230c      	movs	r3, #12
   20e72:	18fb      	adds	r3, r7, r3
   20e74:	0018      	movs	r0, r3
   20e76:	4b4c      	ldr	r3, [pc, #304]	; (20fa8 <m2m_wifi_init+0x1b8>)
   20e78:	4798      	blx	r3
   20e7a:	0003      	movs	r3, r0
   20e7c:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   20e7e:	4b4b      	ldr	r3, [pc, #300]	; (20fac <m2m_wifi_init+0x1bc>)
   20e80:	0018      	movs	r0, r3
   20e82:	4b4b      	ldr	r3, [pc, #300]	; (20fb0 <m2m_wifi_init+0x1c0>)
   20e84:	4798      	blx	r3
   20e86:	230c      	movs	r3, #12
   20e88:	18fb      	adds	r3, r7, r3
   20e8a:	791b      	ldrb	r3, [r3, #4]
   20e8c:	0019      	movs	r1, r3
   20e8e:	230c      	movs	r3, #12
   20e90:	18fb      	adds	r3, r7, r3
   20e92:	795b      	ldrb	r3, [r3, #5]
   20e94:	001a      	movs	r2, r3
   20e96:	230c      	movs	r3, #12
   20e98:	18fb      	adds	r3, r7, r3
   20e9a:	799b      	ldrb	r3, [r3, #6]
   20e9c:	001c      	movs	r4, r3
   20e9e:	230c      	movs	r3, #12
   20ea0:	18fb      	adds	r3, r7, r3
   20ea2:	8c1b      	ldrh	r3, [r3, #32]
   20ea4:	4843      	ldr	r0, [pc, #268]	; (20fb4 <m2m_wifi_init+0x1c4>)
   20ea6:	9300      	str	r3, [sp, #0]
   20ea8:	0023      	movs	r3, r4
   20eaa:	4c41      	ldr	r4, [pc, #260]	; (20fb0 <m2m_wifi_init+0x1c0>)
   20eac:	47a0      	blx	r4
   20eae:	4b42      	ldr	r3, [pc, #264]	; (20fb8 <m2m_wifi_init+0x1c8>)
   20eb0:	0018      	movs	r0, r3
   20eb2:	4b3f      	ldr	r3, [pc, #252]	; (20fb0 <m2m_wifi_init+0x1c0>)
   20eb4:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   20eb6:	4b3d      	ldr	r3, [pc, #244]	; (20fac <m2m_wifi_init+0x1bc>)
   20eb8:	0018      	movs	r0, r3
   20eba:	4b3d      	ldr	r3, [pc, #244]	; (20fb0 <m2m_wifi_init+0x1c0>)
   20ebc:	4798      	blx	r3
   20ebe:	230c      	movs	r3, #12
   20ec0:	18fb      	adds	r3, r7, r3
   20ec2:	3316      	adds	r3, #22
   20ec4:	001a      	movs	r2, r3
   20ec6:	230c      	movs	r3, #12
   20ec8:	18fb      	adds	r3, r7, r3
   20eca:	330a      	adds	r3, #10
   20ecc:	0019      	movs	r1, r3
   20ece:	4b3b      	ldr	r3, [pc, #236]	; (20fbc <m2m_wifi_init+0x1cc>)
   20ed0:	0018      	movs	r0, r3
   20ed2:	4b37      	ldr	r3, [pc, #220]	; (20fb0 <m2m_wifi_init+0x1c0>)
   20ed4:	4798      	blx	r3
   20ed6:	4b38      	ldr	r3, [pc, #224]	; (20fb8 <m2m_wifi_init+0x1c8>)
   20ed8:	0018      	movs	r0, r3
   20eda:	4b35      	ldr	r3, [pc, #212]	; (20fb0 <m2m_wifi_init+0x1c0>)
   20edc:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   20ede:	4b33      	ldr	r3, [pc, #204]	; (20fac <m2m_wifi_init+0x1bc>)
   20ee0:	0018      	movs	r0, r3
   20ee2:	4b33      	ldr	r3, [pc, #204]	; (20fb0 <m2m_wifi_init+0x1c0>)
   20ee4:	4798      	blx	r3
   20ee6:	230c      	movs	r3, #12
   20ee8:	18fb      	adds	r3, r7, r3
   20eea:	79db      	ldrb	r3, [r3, #7]
   20eec:	0019      	movs	r1, r3
   20eee:	230c      	movs	r3, #12
   20ef0:	18fb      	adds	r3, r7, r3
   20ef2:	7a1b      	ldrb	r3, [r3, #8]
   20ef4:	001a      	movs	r2, r3
   20ef6:	230c      	movs	r3, #12
   20ef8:	18fb      	adds	r3, r7, r3
   20efa:	7a5b      	ldrb	r3, [r3, #9]
   20efc:	4830      	ldr	r0, [pc, #192]	; (20fc0 <m2m_wifi_init+0x1d0>)
   20efe:	4c2c      	ldr	r4, [pc, #176]	; (20fb0 <m2m_wifi_init+0x1c0>)
   20f00:	47a0      	blx	r4
   20f02:	4b2d      	ldr	r3, [pc, #180]	; (20fb8 <m2m_wifi_init+0x1c8>)
   20f04:	0018      	movs	r0, r3
   20f06:	4b2a      	ldr	r3, [pc, #168]	; (20fb0 <m2m_wifi_init+0x1c0>)
   20f08:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   20f0a:	4b28      	ldr	r3, [pc, #160]	; (20fac <m2m_wifi_init+0x1bc>)
   20f0c:	0018      	movs	r0, r3
   20f0e:	4b28      	ldr	r3, [pc, #160]	; (20fb0 <m2m_wifi_init+0x1c0>)
   20f10:	4798      	blx	r3
   20f12:	482c      	ldr	r0, [pc, #176]	; (20fc4 <m2m_wifi_init+0x1d4>)
   20f14:	2304      	movs	r3, #4
   20f16:	2205      	movs	r2, #5
   20f18:	2113      	movs	r1, #19
   20f1a:	4c25      	ldr	r4, [pc, #148]	; (20fb0 <m2m_wifi_init+0x1c0>)
   20f1c:	47a0      	blx	r4
   20f1e:	4b26      	ldr	r3, [pc, #152]	; (20fb8 <m2m_wifi_init+0x1c8>)
   20f20:	0018      	movs	r0, r3
   20f22:	4b23      	ldr	r3, [pc, #140]	; (20fb0 <m2m_wifi_init+0x1c0>)
   20f24:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   20f26:	4b21      	ldr	r3, [pc, #132]	; (20fac <m2m_wifi_init+0x1bc>)
   20f28:	0018      	movs	r0, r3
   20f2a:	4b21      	ldr	r3, [pc, #132]	; (20fb0 <m2m_wifi_init+0x1c0>)
   20f2c:	4798      	blx	r3
   20f2e:	4a26      	ldr	r2, [pc, #152]	; (20fc8 <m2m_wifi_init+0x1d8>)
   20f30:	4926      	ldr	r1, [pc, #152]	; (20fcc <m2m_wifi_init+0x1dc>)
   20f32:	4b27      	ldr	r3, [pc, #156]	; (20fd0 <m2m_wifi_init+0x1e0>)
   20f34:	0018      	movs	r0, r3
   20f36:	4b1e      	ldr	r3, [pc, #120]	; (20fb0 <m2m_wifi_init+0x1c0>)
   20f38:	4798      	blx	r3
   20f3a:	4b1f      	ldr	r3, [pc, #124]	; (20fb8 <m2m_wifi_init+0x1c8>)
   20f3c:	0018      	movs	r0, r3
   20f3e:	4b1c      	ldr	r3, [pc, #112]	; (20fb0 <m2m_wifi_init+0x1c0>)
   20f40:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   20f42:	2337      	movs	r3, #55	; 0x37
   20f44:	18fb      	adds	r3, r7, r3
   20f46:	781b      	ldrb	r3, [r3, #0]
   20f48:	b25b      	sxtb	r3, r3
   20f4a:	330d      	adds	r3, #13
   20f4c:	d117      	bne.n	20f7e <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   20f4e:	23e8      	movs	r3, #232	; 0xe8
   20f50:	33ff      	adds	r3, #255	; 0xff
   20f52:	001a      	movs	r2, r3
   20f54:	491f      	ldr	r1, [pc, #124]	; (20fd4 <m2m_wifi_init+0x1e4>)
   20f56:	4b20      	ldr	r3, [pc, #128]	; (20fd8 <m2m_wifi_init+0x1e8>)
   20f58:	0018      	movs	r0, r3
   20f5a:	4b15      	ldr	r3, [pc, #84]	; (20fb0 <m2m_wifi_init+0x1c0>)
   20f5c:	4798      	blx	r3
   20f5e:	4b1f      	ldr	r3, [pc, #124]	; (20fdc <m2m_wifi_init+0x1ec>)
   20f60:	0018      	movs	r0, r3
   20f62:	4b13      	ldr	r3, [pc, #76]	; (20fb0 <m2m_wifi_init+0x1c0>)
   20f64:	4798      	blx	r3
   20f66:	4b14      	ldr	r3, [pc, #80]	; (20fb8 <m2m_wifi_init+0x1c8>)
   20f68:	0018      	movs	r0, r3
   20f6a:	4b11      	ldr	r3, [pc, #68]	; (20fb0 <m2m_wifi_init+0x1c0>)
   20f6c:	4798      	blx	r3
	}

	goto _EXIT0;
   20f6e:	e006      	b.n	20f7e <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   20f70:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   20f72:	2000      	movs	r0, #0
   20f74:	4b1a      	ldr	r3, [pc, #104]	; (20fe0 <m2m_wifi_init+0x1f0>)
   20f76:	4798      	blx	r3
   20f78:	e002      	b.n	20f80 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   20f7a:	46c0      	nop			; (mov r8, r8)
   20f7c:	e000      	b.n	20f80 <m2m_wifi_init+0x190>
	goto _EXIT0;
   20f7e:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   20f80:	2337      	movs	r3, #55	; 0x37
   20f82:	18fb      	adds	r3, r7, r3
   20f84:	781b      	ldrb	r3, [r3, #0]
   20f86:	b25b      	sxtb	r3, r3
}
   20f88:	0018      	movs	r0, r3
   20f8a:	46bd      	mov	sp, r7
   20f8c:	b00f      	add	sp, #60	; 0x3c
   20f8e:	bd90      	pop	{r4, r7, pc}
   20f90:	20004274 	.word	0x20004274
   20f94:	20004271 	.word	0x20004271
   20f98:	00022115 	.word	0x00022115
   20f9c:	0001fe99 	.word	0x0001fe99
   20fa0:	00020a39 	.word	0x00020a39
   20fa4:	0002097d 	.word	0x0002097d
   20fa8:	00021f49 	.word	0x00021f49
   20fac:	000380f8 	.word	0x000380f8
   20fb0:	0001cee9 	.word	0x0001cee9
   20fb4:	0003829c 	.word	0x0003829c
   20fb8:	00038124 	.word	0x00038124
   20fbc:	000382c4 	.word	0x000382c4
   20fc0:	000382e0 	.word	0x000382e0
   20fc4:	00038304 	.word	0x00038304
   20fc8:	0003831c 	.word	0x0003831c
   20fcc:	00038328 	.word	0x00038328
   20fd0:	00038334 	.word	0x00038334
   20fd4:	000384d0 	.word	0x000384d0
   20fd8:	00038128 	.word	0x00038128
   20fdc:	0003834c 	.word	0x0003834c
   20fe0:	000222a5 	.word	0x000222a5

00020fe4 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   20fe4:	b580      	push	{r7, lr}
   20fe6:	b082      	sub	sp, #8
   20fe8:	af00      	add	r7, sp, #0
   20fea:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   20fec:	4b03      	ldr	r3, [pc, #12]	; (20ffc <m2m_wifi_handle_events+0x18>)
   20fee:	4798      	blx	r3
   20ff0:	0003      	movs	r3, r0
}
   20ff2:	0018      	movs	r0, r3
   20ff4:	46bd      	mov	sp, r7
   20ff6:	b002      	add	sp, #8
   20ff8:	bd80      	pop	{r7, pc}
   20ffa:	46c0      	nop			; (mov r8, r8)
   20ffc:	0002075d 	.word	0x0002075d

00021000 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   21000:	b590      	push	{r4, r7, lr}
   21002:	b087      	sub	sp, #28
   21004:	af02      	add	r7, sp, #8
   21006:	60f8      	str	r0, [r7, #12]
   21008:	0008      	movs	r0, r1
   2100a:	0011      	movs	r1, r2
   2100c:	607b      	str	r3, [r7, #4]
   2100e:	230b      	movs	r3, #11
   21010:	18fb      	adds	r3, r7, r3
   21012:	1c02      	adds	r2, r0, #0
   21014:	701a      	strb	r2, [r3, #0]
   21016:	230a      	movs	r3, #10
   21018:	18fb      	adds	r3, r7, r3
   2101a:	1c0a      	adds	r2, r1, #0
   2101c:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   2101e:	687c      	ldr	r4, [r7, #4]
   21020:	230a      	movs	r3, #10
   21022:	18fb      	adds	r3, r7, r3
   21024:	781a      	ldrb	r2, [r3, #0]
   21026:	230b      	movs	r3, #11
   21028:	18fb      	adds	r3, r7, r3
   2102a:	7819      	ldrb	r1, [r3, #0]
   2102c:	68f8      	ldr	r0, [r7, #12]
   2102e:	2300      	movs	r3, #0
   21030:	9301      	str	r3, [sp, #4]
   21032:	2320      	movs	r3, #32
   21034:	18fb      	adds	r3, r7, r3
   21036:	881b      	ldrh	r3, [r3, #0]
   21038:	9300      	str	r3, [sp, #0]
   2103a:	0023      	movs	r3, r4
   2103c:	4c03      	ldr	r4, [pc, #12]	; (2104c <m2m_wifi_connect+0x4c>)
   2103e:	47a0      	blx	r4
   21040:	0003      	movs	r3, r0
}
   21042:	0018      	movs	r0, r3
   21044:	46bd      	mov	sp, r7
   21046:	b005      	add	sp, #20
   21048:	bd90      	pop	{r4, r7, pc}
   2104a:	46c0      	nop			; (mov r8, r8)
   2104c:	00021051 	.word	0x00021051

00021050 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   21050:	b5b0      	push	{r4, r5, r7, lr}
   21052:	b0aa      	sub	sp, #168	; 0xa8
   21054:	af04      	add	r7, sp, #16
   21056:	60f8      	str	r0, [r7, #12]
   21058:	0008      	movs	r0, r1
   2105a:	0011      	movs	r1, r2
   2105c:	607b      	str	r3, [r7, #4]
   2105e:	230b      	movs	r3, #11
   21060:	18fb      	adds	r3, r7, r3
   21062:	1c02      	adds	r2, r0, #0
   21064:	701a      	strb	r2, [r3, #0]
   21066:	230a      	movs	r3, #10
   21068:	18fb      	adds	r3, r7, r3
   2106a:	1c0a      	adds	r2, r1, #0
   2106c:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   2106e:	2397      	movs	r3, #151	; 0x97
   21070:	18fb      	adds	r3, r7, r3
   21072:	2200      	movs	r2, #0
   21074:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   21076:	230a      	movs	r3, #10
   21078:	18fb      	adds	r3, r7, r3
   2107a:	781b      	ldrb	r3, [r3, #0]
   2107c:	2b01      	cmp	r3, #1
   2107e:	d100      	bne.n	21082 <m2m_wifi_connect_sc+0x32>
   21080:	e085      	b.n	2118e <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   21082:	687b      	ldr	r3, [r7, #4]
   21084:	2b00      	cmp	r3, #0
   21086:	d112      	bne.n	210ae <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   21088:	4ad8      	ldr	r2, [pc, #864]	; (213ec <m2m_wifi_connect_sc+0x39c>)
   2108a:	49d9      	ldr	r1, [pc, #868]	; (213f0 <m2m_wifi_connect_sc+0x3a0>)
   2108c:	4bd9      	ldr	r3, [pc, #868]	; (213f4 <m2m_wifi_connect_sc+0x3a4>)
   2108e:	0018      	movs	r0, r3
   21090:	4bd9      	ldr	r3, [pc, #868]	; (213f8 <m2m_wifi_connect_sc+0x3a8>)
   21092:	4798      	blx	r3
   21094:	4bd9      	ldr	r3, [pc, #868]	; (213fc <m2m_wifi_connect_sc+0x3ac>)
   21096:	0018      	movs	r0, r3
   21098:	4bd7      	ldr	r3, [pc, #860]	; (213f8 <m2m_wifi_connect_sc+0x3a8>)
   2109a:	4798      	blx	r3
   2109c:	4bd8      	ldr	r3, [pc, #864]	; (21400 <m2m_wifi_connect_sc+0x3b0>)
   2109e:	0018      	movs	r0, r3
   210a0:	4bd5      	ldr	r3, [pc, #852]	; (213f8 <m2m_wifi_connect_sc+0x3a8>)
   210a2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   210a4:	2397      	movs	r3, #151	; 0x97
   210a6:	18fb      	adds	r3, r7, r3
   210a8:	22f4      	movs	r2, #244	; 0xf4
   210aa:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   210ac:	e1f9      	b.n	214a2 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   210ae:	230a      	movs	r3, #10
   210b0:	18fb      	adds	r3, r7, r3
   210b2:	781b      	ldrb	r3, [r3, #0]
   210b4:	2b02      	cmp	r3, #2
   210b6:	d16a      	bne.n	2118e <m2m_wifi_connect_sc+0x13e>
   210b8:	687b      	ldr	r3, [r7, #4]
   210ba:	0018      	movs	r0, r3
   210bc:	4bd1      	ldr	r3, [pc, #836]	; (21404 <m2m_wifi_connect_sc+0x3b4>)
   210be:	4798      	blx	r3
   210c0:	0003      	movs	r3, r0
   210c2:	2b40      	cmp	r3, #64	; 0x40
   210c4:	d163      	bne.n	2118e <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   210c6:	2396      	movs	r3, #150	; 0x96
   210c8:	18fb      	adds	r3, r7, r3
   210ca:	2200      	movs	r2, #0
   210cc:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   210ce:	687b      	ldr	r3, [r7, #4]
   210d0:	2290      	movs	r2, #144	; 0x90
   210d2:	18ba      	adds	r2, r7, r2
   210d4:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   210d6:	e055      	b.n	21184 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   210d8:	2396      	movs	r3, #150	; 0x96
   210da:	18fb      	adds	r3, r7, r3
   210dc:	781b      	ldrb	r3, [r3, #0]
   210de:	2290      	movs	r2, #144	; 0x90
   210e0:	18ba      	adds	r2, r7, r2
   210e2:	6812      	ldr	r2, [r2, #0]
   210e4:	18d3      	adds	r3, r2, r3
   210e6:	781b      	ldrb	r3, [r3, #0]
   210e8:	2b2f      	cmp	r3, #47	; 0x2f
   210ea:	d931      	bls.n	21150 <m2m_wifi_connect_sc+0x100>
   210ec:	2396      	movs	r3, #150	; 0x96
   210ee:	18fb      	adds	r3, r7, r3
   210f0:	781b      	ldrb	r3, [r3, #0]
   210f2:	2290      	movs	r2, #144	; 0x90
   210f4:	18ba      	adds	r2, r7, r2
   210f6:	6812      	ldr	r2, [r2, #0]
   210f8:	18d3      	adds	r3, r2, r3
   210fa:	781b      	ldrb	r3, [r3, #0]
   210fc:	2b39      	cmp	r3, #57	; 0x39
   210fe:	d909      	bls.n	21114 <m2m_wifi_connect_sc+0xc4>
   21100:	2396      	movs	r3, #150	; 0x96
   21102:	18fb      	adds	r3, r7, r3
   21104:	781b      	ldrb	r3, [r3, #0]
   21106:	2290      	movs	r2, #144	; 0x90
   21108:	18ba      	adds	r2, r7, r2
   2110a:	6812      	ldr	r2, [r2, #0]
   2110c:	18d3      	adds	r3, r2, r3
   2110e:	781b      	ldrb	r3, [r3, #0]
   21110:	2b40      	cmp	r3, #64	; 0x40
   21112:	d91d      	bls.n	21150 <m2m_wifi_connect_sc+0x100>
   21114:	2396      	movs	r3, #150	; 0x96
   21116:	18fb      	adds	r3, r7, r3
   21118:	781b      	ldrb	r3, [r3, #0]
   2111a:	2290      	movs	r2, #144	; 0x90
   2111c:	18ba      	adds	r2, r7, r2
   2111e:	6812      	ldr	r2, [r2, #0]
   21120:	18d3      	adds	r3, r2, r3
   21122:	781b      	ldrb	r3, [r3, #0]
   21124:	2b46      	cmp	r3, #70	; 0x46
   21126:	d909      	bls.n	2113c <m2m_wifi_connect_sc+0xec>
   21128:	2396      	movs	r3, #150	; 0x96
   2112a:	18fb      	adds	r3, r7, r3
   2112c:	781b      	ldrb	r3, [r3, #0]
   2112e:	2290      	movs	r2, #144	; 0x90
   21130:	18ba      	adds	r2, r7, r2
   21132:	6812      	ldr	r2, [r2, #0]
   21134:	18d3      	adds	r3, r2, r3
   21136:	781b      	ldrb	r3, [r3, #0]
   21138:	2b60      	cmp	r3, #96	; 0x60
   2113a:	d909      	bls.n	21150 <m2m_wifi_connect_sc+0x100>
   2113c:	2396      	movs	r3, #150	; 0x96
   2113e:	18fb      	adds	r3, r7, r3
   21140:	781b      	ldrb	r3, [r3, #0]
   21142:	2290      	movs	r2, #144	; 0x90
   21144:	18ba      	adds	r2, r7, r2
   21146:	6812      	ldr	r2, [r2, #0]
   21148:	18d3      	adds	r3, r2, r3
   2114a:	781b      	ldrb	r3, [r3, #0]
   2114c:	2b66      	cmp	r3, #102	; 0x66
   2114e:	d912      	bls.n	21176 <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   21150:	4aad      	ldr	r2, [pc, #692]	; (21408 <m2m_wifi_connect_sc+0x3b8>)
   21152:	49a7      	ldr	r1, [pc, #668]	; (213f0 <m2m_wifi_connect_sc+0x3a0>)
   21154:	4ba7      	ldr	r3, [pc, #668]	; (213f4 <m2m_wifi_connect_sc+0x3a4>)
   21156:	0018      	movs	r0, r3
   21158:	4ba7      	ldr	r3, [pc, #668]	; (213f8 <m2m_wifi_connect_sc+0x3a8>)
   2115a:	4798      	blx	r3
   2115c:	4bab      	ldr	r3, [pc, #684]	; (2140c <m2m_wifi_connect_sc+0x3bc>)
   2115e:	0018      	movs	r0, r3
   21160:	4ba5      	ldr	r3, [pc, #660]	; (213f8 <m2m_wifi_connect_sc+0x3a8>)
   21162:	4798      	blx	r3
   21164:	4ba6      	ldr	r3, [pc, #664]	; (21400 <m2m_wifi_connect_sc+0x3b0>)
   21166:	0018      	movs	r0, r3
   21168:	4ba3      	ldr	r3, [pc, #652]	; (213f8 <m2m_wifi_connect_sc+0x3a8>)
   2116a:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   2116c:	2397      	movs	r3, #151	; 0x97
   2116e:	18fb      	adds	r3, r7, r3
   21170:	22f4      	movs	r2, #244	; 0xf4
   21172:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   21174:	e195      	b.n	214a2 <m2m_wifi_connect_sc+0x452>
				}
				i++;
   21176:	2396      	movs	r3, #150	; 0x96
   21178:	18fb      	adds	r3, r7, r3
   2117a:	781a      	ldrb	r2, [r3, #0]
   2117c:	2396      	movs	r3, #150	; 0x96
   2117e:	18fb      	adds	r3, r7, r3
   21180:	3201      	adds	r2, #1
   21182:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   21184:	2396      	movs	r3, #150	; 0x96
   21186:	18fb      	adds	r3, r7, r3
   21188:	781b      	ldrb	r3, [r3, #0]
   2118a:	2b3f      	cmp	r3, #63	; 0x3f
   2118c:	d9a4      	bls.n	210d8 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   2118e:	230b      	movs	r3, #11
   21190:	18fb      	adds	r3, r7, r3
   21192:	781b      	ldrb	r3, [r3, #0]
   21194:	2b00      	cmp	r3, #0
   21196:	d004      	beq.n	211a2 <m2m_wifi_connect_sc+0x152>
   21198:	230b      	movs	r3, #11
   2119a:	18fb      	adds	r3, r7, r3
   2119c:	781b      	ldrb	r3, [r3, #0]
   2119e:	2b20      	cmp	r3, #32
   211a0:	d913      	bls.n	211ca <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   211a2:	238c      	movs	r3, #140	; 0x8c
   211a4:	009a      	lsls	r2, r3, #2
   211a6:	4992      	ldr	r1, [pc, #584]	; (213f0 <m2m_wifi_connect_sc+0x3a0>)
   211a8:	4b92      	ldr	r3, [pc, #584]	; (213f4 <m2m_wifi_connect_sc+0x3a4>)
   211aa:	0018      	movs	r0, r3
   211ac:	4b92      	ldr	r3, [pc, #584]	; (213f8 <m2m_wifi_connect_sc+0x3a8>)
   211ae:	4798      	blx	r3
   211b0:	4b97      	ldr	r3, [pc, #604]	; (21410 <m2m_wifi_connect_sc+0x3c0>)
   211b2:	0018      	movs	r0, r3
   211b4:	4b90      	ldr	r3, [pc, #576]	; (213f8 <m2m_wifi_connect_sc+0x3a8>)
   211b6:	4798      	blx	r3
   211b8:	4b91      	ldr	r3, [pc, #580]	; (21400 <m2m_wifi_connect_sc+0x3b0>)
   211ba:	0018      	movs	r0, r3
   211bc:	4b8e      	ldr	r3, [pc, #568]	; (213f8 <m2m_wifi_connect_sc+0x3a8>)
   211be:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   211c0:	2397      	movs	r3, #151	; 0x97
   211c2:	18fb      	adds	r3, r7, r3
   211c4:	22f4      	movs	r2, #244	; 0xf4
   211c6:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   211c8:	e16b      	b.n	214a2 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   211ca:	23a8      	movs	r3, #168	; 0xa8
   211cc:	18fb      	adds	r3, r7, r3
   211ce:	881b      	ldrh	r3, [r3, #0]
   211d0:	2b00      	cmp	r3, #0
   211d2:	d004      	beq.n	211de <m2m_wifi_connect_sc+0x18e>
   211d4:	23a8      	movs	r3, #168	; 0xa8
   211d6:	18fb      	adds	r3, r7, r3
   211d8:	881b      	ldrh	r3, [r3, #0]
   211da:	2b0e      	cmp	r3, #14
   211dc:	d917      	bls.n	2120e <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   211de:	23a8      	movs	r3, #168	; 0xa8
   211e0:	18fb      	adds	r3, r7, r3
   211e2:	881b      	ldrh	r3, [r3, #0]
   211e4:	2bff      	cmp	r3, #255	; 0xff
   211e6:	d012      	beq.n	2120e <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   211e8:	4a8a      	ldr	r2, [pc, #552]	; (21414 <m2m_wifi_connect_sc+0x3c4>)
   211ea:	4981      	ldr	r1, [pc, #516]	; (213f0 <m2m_wifi_connect_sc+0x3a0>)
   211ec:	4b81      	ldr	r3, [pc, #516]	; (213f4 <m2m_wifi_connect_sc+0x3a4>)
   211ee:	0018      	movs	r0, r3
   211f0:	4b81      	ldr	r3, [pc, #516]	; (213f8 <m2m_wifi_connect_sc+0x3a8>)
   211f2:	4798      	blx	r3
   211f4:	4b88      	ldr	r3, [pc, #544]	; (21418 <m2m_wifi_connect_sc+0x3c8>)
   211f6:	0018      	movs	r0, r3
   211f8:	4b7f      	ldr	r3, [pc, #508]	; (213f8 <m2m_wifi_connect_sc+0x3a8>)
   211fa:	4798      	blx	r3
   211fc:	4b80      	ldr	r3, [pc, #512]	; (21400 <m2m_wifi_connect_sc+0x3b0>)
   211fe:	0018      	movs	r0, r3
   21200:	4b7d      	ldr	r3, [pc, #500]	; (213f8 <m2m_wifi_connect_sc+0x3a8>)
   21202:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21204:	2397      	movs	r3, #151	; 0x97
   21206:	18fb      	adds	r3, r7, r3
   21208:	22f4      	movs	r2, #244	; 0xf4
   2120a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   2120c:	e149      	b.n	214a2 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   2120e:	230b      	movs	r3, #11
   21210:	18fb      	adds	r3, r7, r3
   21212:	781a      	ldrb	r2, [r3, #0]
   21214:	68f9      	ldr	r1, [r7, #12]
   21216:	2314      	movs	r3, #20
   21218:	18fb      	adds	r3, r7, r3
   2121a:	3346      	adds	r3, #70	; 0x46
   2121c:	0018      	movs	r0, r3
   2121e:	4b7f      	ldr	r3, [pc, #508]	; (2141c <m2m_wifi_connect_sc+0x3cc>)
   21220:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   21222:	230b      	movs	r3, #11
   21224:	18fb      	adds	r3, r7, r3
   21226:	781b      	ldrb	r3, [r3, #0]
   21228:	2214      	movs	r2, #20
   2122a:	18ba      	adds	r2, r7, r2
   2122c:	2146      	movs	r1, #70	; 0x46
   2122e:	18d3      	adds	r3, r2, r3
   21230:	185b      	adds	r3, r3, r1
   21232:	2200      	movs	r2, #0
   21234:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   21236:	2314      	movs	r3, #20
   21238:	18fb      	adds	r3, r7, r3
   2123a:	22a8      	movs	r2, #168	; 0xa8
   2123c:	18ba      	adds	r2, r7, r2
   2123e:	2144      	movs	r1, #68	; 0x44
   21240:	8812      	ldrh	r2, [r2, #0]
   21242:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   21244:	23ac      	movs	r3, #172	; 0xac
   21246:	18fb      	adds	r3, r7, r3
   21248:	781b      	ldrb	r3, [r3, #0]
   2124a:	1e5a      	subs	r2, r3, #1
   2124c:	4193      	sbcs	r3, r2
   2124e:	b2db      	uxtb	r3, r3
   21250:	0019      	movs	r1, r3
   21252:	2314      	movs	r3, #20
   21254:	18fb      	adds	r3, r7, r3
   21256:	2267      	movs	r2, #103	; 0x67
   21258:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   2125a:	2314      	movs	r3, #20
   2125c:	18fb      	adds	r3, r7, r3
   2125e:	228c      	movs	r2, #140	; 0x8c
   21260:	18ba      	adds	r2, r7, r2
   21262:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   21264:	238c      	movs	r3, #140	; 0x8c
   21266:	18fb      	adds	r3, r7, r3
   21268:	681b      	ldr	r3, [r3, #0]
   2126a:	220a      	movs	r2, #10
   2126c:	18ba      	adds	r2, r7, r2
   2126e:	2141      	movs	r1, #65	; 0x41
   21270:	7812      	ldrb	r2, [r2, #0]
   21272:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   21274:	230a      	movs	r3, #10
   21276:	18fb      	adds	r3, r7, r3
   21278:	781b      	ldrb	r3, [r3, #0]
   2127a:	2b03      	cmp	r3, #3
   2127c:	d000      	beq.n	21280 <m2m_wifi_connect_sc+0x230>
   2127e:	e07d      	b.n	2137c <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   21280:	687b      	ldr	r3, [r7, #4]
   21282:	2288      	movs	r2, #136	; 0x88
   21284:	18ba      	adds	r2, r7, r2
   21286:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   21288:	238c      	movs	r3, #140	; 0x8c
   2128a:	18fb      	adds	r3, r7, r3
   2128c:	681b      	ldr	r3, [r3, #0]
   2128e:	2284      	movs	r2, #132	; 0x84
   21290:	18ba      	adds	r2, r7, r2
   21292:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   21294:	2388      	movs	r3, #136	; 0x88
   21296:	18fb      	adds	r3, r7, r3
   21298:	681b      	ldr	r3, [r3, #0]
   2129a:	781b      	ldrb	r3, [r3, #0]
   2129c:	3b01      	subs	r3, #1
   2129e:	b2da      	uxtb	r2, r3
   212a0:	2384      	movs	r3, #132	; 0x84
   212a2:	18fb      	adds	r3, r7, r3
   212a4:	681b      	ldr	r3, [r3, #0]
   212a6:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   212a8:	2384      	movs	r3, #132	; 0x84
   212aa:	18fb      	adds	r3, r7, r3
   212ac:	681b      	ldr	r3, [r3, #0]
   212ae:	781b      	ldrb	r3, [r3, #0]
   212b0:	2b03      	cmp	r3, #3
   212b2:	d919      	bls.n	212e8 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   212b4:	2394      	movs	r3, #148	; 0x94
   212b6:	009a      	lsls	r2, r3, #2
   212b8:	494d      	ldr	r1, [pc, #308]	; (213f0 <m2m_wifi_connect_sc+0x3a0>)
   212ba:	4b4e      	ldr	r3, [pc, #312]	; (213f4 <m2m_wifi_connect_sc+0x3a4>)
   212bc:	0018      	movs	r0, r3
   212be:	4b4e      	ldr	r3, [pc, #312]	; (213f8 <m2m_wifi_connect_sc+0x3a8>)
   212c0:	4798      	blx	r3
   212c2:	2384      	movs	r3, #132	; 0x84
   212c4:	18fb      	adds	r3, r7, r3
   212c6:	681b      	ldr	r3, [r3, #0]
   212c8:	781b      	ldrb	r3, [r3, #0]
   212ca:	001a      	movs	r2, r3
   212cc:	4b54      	ldr	r3, [pc, #336]	; (21420 <m2m_wifi_connect_sc+0x3d0>)
   212ce:	0011      	movs	r1, r2
   212d0:	0018      	movs	r0, r3
   212d2:	4b49      	ldr	r3, [pc, #292]	; (213f8 <m2m_wifi_connect_sc+0x3a8>)
   212d4:	4798      	blx	r3
   212d6:	4b4a      	ldr	r3, [pc, #296]	; (21400 <m2m_wifi_connect_sc+0x3b0>)
   212d8:	0018      	movs	r0, r3
   212da:	4b47      	ldr	r3, [pc, #284]	; (213f8 <m2m_wifi_connect_sc+0x3a8>)
   212dc:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   212de:	2397      	movs	r3, #151	; 0x97
   212e0:	18fb      	adds	r3, r7, r3
   212e2:	22f4      	movs	r2, #244	; 0xf4
   212e4:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   212e6:	e0dc      	b.n	214a2 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   212e8:	2388      	movs	r3, #136	; 0x88
   212ea:	18fb      	adds	r3, r7, r3
   212ec:	681b      	ldr	r3, [r3, #0]
   212ee:	785b      	ldrb	r3, [r3, #1]
   212f0:	3b01      	subs	r3, #1
   212f2:	b2da      	uxtb	r2, r3
   212f4:	2384      	movs	r3, #132	; 0x84
   212f6:	18fb      	adds	r3, r7, r3
   212f8:	681b      	ldr	r3, [r3, #0]
   212fa:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   212fc:	2384      	movs	r3, #132	; 0x84
   212fe:	18fb      	adds	r3, r7, r3
   21300:	681b      	ldr	r3, [r3, #0]
   21302:	785b      	ldrb	r3, [r3, #1]
   21304:	2b0a      	cmp	r3, #10
   21306:	d01e      	beq.n	21346 <m2m_wifi_connect_sc+0x2f6>
   21308:	2384      	movs	r3, #132	; 0x84
   2130a:	18fb      	adds	r3, r7, r3
   2130c:	681b      	ldr	r3, [r3, #0]
   2130e:	785b      	ldrb	r3, [r3, #1]
   21310:	2b1a      	cmp	r3, #26
   21312:	d018      	beq.n	21346 <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   21314:	4a43      	ldr	r2, [pc, #268]	; (21424 <m2m_wifi_connect_sc+0x3d4>)
   21316:	4936      	ldr	r1, [pc, #216]	; (213f0 <m2m_wifi_connect_sc+0x3a0>)
   21318:	4b36      	ldr	r3, [pc, #216]	; (213f4 <m2m_wifi_connect_sc+0x3a4>)
   2131a:	0018      	movs	r0, r3
   2131c:	4b36      	ldr	r3, [pc, #216]	; (213f8 <m2m_wifi_connect_sc+0x3a8>)
   2131e:	4798      	blx	r3
   21320:	2384      	movs	r3, #132	; 0x84
   21322:	18fb      	adds	r3, r7, r3
   21324:	681b      	ldr	r3, [r3, #0]
   21326:	785b      	ldrb	r3, [r3, #1]
   21328:	001a      	movs	r2, r3
   2132a:	4b3f      	ldr	r3, [pc, #252]	; (21428 <m2m_wifi_connect_sc+0x3d8>)
   2132c:	0011      	movs	r1, r2
   2132e:	0018      	movs	r0, r3
   21330:	4b31      	ldr	r3, [pc, #196]	; (213f8 <m2m_wifi_connect_sc+0x3a8>)
   21332:	4798      	blx	r3
   21334:	4b32      	ldr	r3, [pc, #200]	; (21400 <m2m_wifi_connect_sc+0x3b0>)
   21336:	0018      	movs	r0, r3
   21338:	4b2f      	ldr	r3, [pc, #188]	; (213f8 <m2m_wifi_connect_sc+0x3a8>)
   2133a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2133c:	2397      	movs	r3, #151	; 0x97
   2133e:	18fb      	adds	r3, r7, r3
   21340:	22f4      	movs	r2, #244	; 0xf4
   21342:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21344:	e0ad      	b.n	214a2 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   21346:	2384      	movs	r3, #132	; 0x84
   21348:	18fb      	adds	r3, r7, r3
   2134a:	681b      	ldr	r3, [r3, #0]
   2134c:	1c98      	adds	r0, r3, #2
   2134e:	2388      	movs	r3, #136	; 0x88
   21350:	18fb      	adds	r3, r7, r3
   21352:	681b      	ldr	r3, [r3, #0]
   21354:	1c99      	adds	r1, r3, #2
   21356:	2388      	movs	r3, #136	; 0x88
   21358:	18fb      	adds	r3, r7, r3
   2135a:	681b      	ldr	r3, [r3, #0]
   2135c:	785b      	ldrb	r3, [r3, #1]
   2135e:	001a      	movs	r2, r3
   21360:	4b2e      	ldr	r3, [pc, #184]	; (2141c <m2m_wifi_connect_sc+0x3cc>)
   21362:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   21364:	2388      	movs	r3, #136	; 0x88
   21366:	18fb      	adds	r3, r7, r3
   21368:	681b      	ldr	r3, [r3, #0]
   2136a:	785b      	ldrb	r3, [r3, #1]
   2136c:	001a      	movs	r2, r3
   2136e:	2384      	movs	r3, #132	; 0x84
   21370:	18fb      	adds	r3, r7, r3
   21372:	681b      	ldr	r3, [r3, #0]
   21374:	189b      	adds	r3, r3, r2
   21376:	2200      	movs	r2, #0
   21378:	709a      	strb	r2, [r3, #2]
   2137a:	e081      	b.n	21480 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   2137c:	230a      	movs	r3, #10
   2137e:	18fb      	adds	r3, r7, r3
   21380:	781b      	ldrb	r3, [r3, #0]
   21382:	2b02      	cmp	r3, #2
   21384:	d156      	bne.n	21434 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   21386:	2382      	movs	r3, #130	; 0x82
   21388:	18fc      	adds	r4, r7, r3
   2138a:	687b      	ldr	r3, [r7, #4]
   2138c:	0018      	movs	r0, r3
   2138e:	4b1d      	ldr	r3, [pc, #116]	; (21404 <m2m_wifi_connect_sc+0x3b4>)
   21390:	4798      	blx	r3
   21392:	0003      	movs	r3, r0
   21394:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   21396:	2382      	movs	r3, #130	; 0x82
   21398:	18fb      	adds	r3, r7, r3
   2139a:	881b      	ldrh	r3, [r3, #0]
   2139c:	2b00      	cmp	r3, #0
   2139e:	d004      	beq.n	213aa <m2m_wifi_connect_sc+0x35a>
   213a0:	2382      	movs	r3, #130	; 0x82
   213a2:	18fb      	adds	r3, r7, r3
   213a4:	881b      	ldrh	r3, [r3, #0]
   213a6:	2b40      	cmp	r3, #64	; 0x40
   213a8:	d912      	bls.n	213d0 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   213aa:	4a20      	ldr	r2, [pc, #128]	; (2142c <m2m_wifi_connect_sc+0x3dc>)
   213ac:	4910      	ldr	r1, [pc, #64]	; (213f0 <m2m_wifi_connect_sc+0x3a0>)
   213ae:	4b11      	ldr	r3, [pc, #68]	; (213f4 <m2m_wifi_connect_sc+0x3a4>)
   213b0:	0018      	movs	r0, r3
   213b2:	4b11      	ldr	r3, [pc, #68]	; (213f8 <m2m_wifi_connect_sc+0x3a8>)
   213b4:	4798      	blx	r3
   213b6:	4b1e      	ldr	r3, [pc, #120]	; (21430 <m2m_wifi_connect_sc+0x3e0>)
   213b8:	0018      	movs	r0, r3
   213ba:	4b0f      	ldr	r3, [pc, #60]	; (213f8 <m2m_wifi_connect_sc+0x3a8>)
   213bc:	4798      	blx	r3
   213be:	4b10      	ldr	r3, [pc, #64]	; (21400 <m2m_wifi_connect_sc+0x3b0>)
   213c0:	0018      	movs	r0, r3
   213c2:	4b0d      	ldr	r3, [pc, #52]	; (213f8 <m2m_wifi_connect_sc+0x3a8>)
   213c4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   213c6:	2397      	movs	r3, #151	; 0x97
   213c8:	18fb      	adds	r3, r7, r3
   213ca:	22f4      	movs	r2, #244	; 0xf4
   213cc:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   213ce:	e068      	b.n	214a2 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   213d0:	238c      	movs	r3, #140	; 0x8c
   213d2:	18fb      	adds	r3, r7, r3
   213d4:	6818      	ldr	r0, [r3, #0]
   213d6:	2382      	movs	r3, #130	; 0x82
   213d8:	18fb      	adds	r3, r7, r3
   213da:	881b      	ldrh	r3, [r3, #0]
   213dc:	3301      	adds	r3, #1
   213de:	001a      	movs	r2, r3
   213e0:	687b      	ldr	r3, [r7, #4]
   213e2:	0019      	movs	r1, r3
   213e4:	4b0d      	ldr	r3, [pc, #52]	; (2141c <m2m_wifi_connect_sc+0x3cc>)
   213e6:	4798      	blx	r3
   213e8:	e04a      	b.n	21480 <m2m_wifi_connect_sc+0x430>
   213ea:	46c0      	nop			; (mov r8, r8)
   213ec:	0000021a 	.word	0x0000021a
   213f0:	000384e0 	.word	0x000384e0
   213f4:	00038128 	.word	0x00038128
   213f8:	0001cee9 	.word	0x0001cee9
   213fc:	00038368 	.word	0x00038368
   21400:	00038124 	.word	0x00038124
   21404:	0001fcbf 	.word	0x0001fcbf
   21408:	00000226 	.word	0x00000226
   2140c:	0003837c 	.word	0x0003837c
   21410:	0003838c 	.word	0x0003838c
   21414:	00000239 	.word	0x00000239
   21418:	000383a0 	.word	0x000383a0
   2141c:	0001fc45 	.word	0x0001fc45
   21420:	000383ac 	.word	0x000383ac
   21424:	00000257 	.word	0x00000257
   21428:	000383c8 	.word	0x000383c8
   2142c:	00000266 	.word	0x00000266
   21430:	000383e4 	.word	0x000383e4
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   21434:	230a      	movs	r3, #10
   21436:	18fb      	adds	r3, r7, r3
   21438:	781b      	ldrb	r3, [r3, #0]
   2143a:	2b04      	cmp	r3, #4
   2143c:	d108      	bne.n	21450 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   2143e:	238c      	movs	r3, #140	; 0x8c
   21440:	18fb      	adds	r3, r7, r3
   21442:	681b      	ldr	r3, [r3, #0]
   21444:	6879      	ldr	r1, [r7, #4]
   21446:	223e      	movs	r2, #62	; 0x3e
   21448:	0018      	movs	r0, r3
   2144a:	4b1a      	ldr	r3, [pc, #104]	; (214b4 <m2m_wifi_connect_sc+0x464>)
   2144c:	4798      	blx	r3
   2144e:	e017      	b.n	21480 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   21450:	230a      	movs	r3, #10
   21452:	18fb      	adds	r3, r7, r3
   21454:	781b      	ldrb	r3, [r3, #0]
   21456:	2b01      	cmp	r3, #1
   21458:	d012      	beq.n	21480 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   2145a:	4a17      	ldr	r2, [pc, #92]	; (214b8 <m2m_wifi_connect_sc+0x468>)
   2145c:	4917      	ldr	r1, [pc, #92]	; (214bc <m2m_wifi_connect_sc+0x46c>)
   2145e:	4b18      	ldr	r3, [pc, #96]	; (214c0 <m2m_wifi_connect_sc+0x470>)
   21460:	0018      	movs	r0, r3
   21462:	4b18      	ldr	r3, [pc, #96]	; (214c4 <m2m_wifi_connect_sc+0x474>)
   21464:	4798      	blx	r3
   21466:	4b18      	ldr	r3, [pc, #96]	; (214c8 <m2m_wifi_connect_sc+0x478>)
   21468:	0018      	movs	r0, r3
   2146a:	4b16      	ldr	r3, [pc, #88]	; (214c4 <m2m_wifi_connect_sc+0x474>)
   2146c:	4798      	blx	r3
   2146e:	4b17      	ldr	r3, [pc, #92]	; (214cc <m2m_wifi_connect_sc+0x47c>)
   21470:	0018      	movs	r0, r3
   21472:	4b14      	ldr	r3, [pc, #80]	; (214c4 <m2m_wifi_connect_sc+0x474>)
   21474:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   21476:	2397      	movs	r3, #151	; 0x97
   21478:	18fb      	adds	r3, r7, r3
   2147a:	22f4      	movs	r2, #244	; 0xf4
   2147c:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   2147e:	e010      	b.n	214a2 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   21480:	2397      	movs	r3, #151	; 0x97
   21482:	18fc      	adds	r4, r7, r3
   21484:	2314      	movs	r3, #20
   21486:	18fa      	adds	r2, r7, r3
   21488:	2300      	movs	r3, #0
   2148a:	9302      	str	r3, [sp, #8]
   2148c:	2300      	movs	r3, #0
   2148e:	9301      	str	r3, [sp, #4]
   21490:	2300      	movs	r3, #0
   21492:	9300      	str	r3, [sp, #0]
   21494:	236c      	movs	r3, #108	; 0x6c
   21496:	2128      	movs	r1, #40	; 0x28
   21498:	2001      	movs	r0, #1
   2149a:	4d0d      	ldr	r5, [pc, #52]	; (214d0 <m2m_wifi_connect_sc+0x480>)
   2149c:	47a8      	blx	r5
   2149e:	0003      	movs	r3, r0
   214a0:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   214a2:	2397      	movs	r3, #151	; 0x97
   214a4:	18fb      	adds	r3, r7, r3
   214a6:	781b      	ldrb	r3, [r3, #0]
   214a8:	b25b      	sxtb	r3, r3
}
   214aa:	0018      	movs	r0, r3
   214ac:	46bd      	mov	sp, r7
   214ae:	b026      	add	sp, #152	; 0x98
   214b0:	bdb0      	pop	{r4, r5, r7, pc}
   214b2:	46c0      	nop			; (mov r8, r8)
   214b4:	0001fc45 	.word	0x0001fc45
   214b8:	00000276 	.word	0x00000276
   214bc:	000384e0 	.word	0x000384e0
   214c0:	00038128 	.word	0x00038128
   214c4:	0001cee9 	.word	0x0001cee9
   214c8:	00038400 	.word	0x00038400
   214cc:	00038124 	.word	0x00038124
   214d0:	0001fee1 	.word	0x0001fee1

000214d4 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   214d4:	b580      	push	{r7, lr}
   214d6:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   214d8:	2300      	movs	r3, #0
}
   214da:	0018      	movs	r0, r3
   214dc:	46bd      	mov	sp, r7
   214de:	bd80      	pop	{r7, pc}

000214e0 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   214e0:	b590      	push	{r4, r7, lr}
   214e2:	b087      	sub	sp, #28
   214e4:	af00      	add	r7, sp, #0
   214e6:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   214e8:	2317      	movs	r3, #23
   214ea:	18fb      	adds	r3, r7, r3
   214ec:	2200      	movs	r2, #0
   214ee:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   214f0:	687b      	ldr	r3, [r7, #4]
   214f2:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   214f4:	693b      	ldr	r3, [r7, #16]
   214f6:	2280      	movs	r2, #128	; 0x80
   214f8:	0052      	lsls	r2, r2, #1
   214fa:	4313      	orrs	r3, r2
   214fc:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   214fe:	693a      	ldr	r2, [r7, #16]
   21500:	23a5      	movs	r3, #165	; 0xa5
   21502:	015b      	lsls	r3, r3, #5
   21504:	0011      	movs	r1, r2
   21506:	0018      	movs	r0, r3
   21508:	4b12      	ldr	r3, [pc, #72]	; (21554 <chip_apply_conf+0x74>)
   2150a:	4798      	blx	r3
		if(val32 != 0) {		
   2150c:	693b      	ldr	r3, [r7, #16]
   2150e:	2b00      	cmp	r3, #0
   21510:	d018      	beq.n	21544 <chip_apply_conf+0x64>
			uint32 reg = 0;
   21512:	2300      	movs	r3, #0
   21514:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   21516:	2317      	movs	r3, #23
   21518:	18fc      	adds	r4, r7, r3
   2151a:	230c      	movs	r3, #12
   2151c:	18fa      	adds	r2, r7, r3
   2151e:	23a5      	movs	r3, #165	; 0xa5
   21520:	015b      	lsls	r3, r3, #5
   21522:	0011      	movs	r1, r2
   21524:	0018      	movs	r0, r3
   21526:	4b0c      	ldr	r3, [pc, #48]	; (21558 <chip_apply_conf+0x78>)
   21528:	4798      	blx	r3
   2152a:	0003      	movs	r3, r0
   2152c:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   2152e:	2317      	movs	r3, #23
   21530:	18fb      	adds	r3, r7, r3
   21532:	781b      	ldrb	r3, [r3, #0]
   21534:	b25b      	sxtb	r3, r3
   21536:	2b00      	cmp	r3, #0
   21538:	d1e1      	bne.n	214fe <chip_apply_conf+0x1e>
				if(reg == val32)
   2153a:	68fa      	ldr	r2, [r7, #12]
   2153c:	693b      	ldr	r3, [r7, #16]
   2153e:	429a      	cmp	r2, r3
   21540:	d002      	beq.n	21548 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   21542:	e7dc      	b.n	214fe <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   21544:	46c0      	nop			; (mov r8, r8)
   21546:	e000      	b.n	2154a <chip_apply_conf+0x6a>
					break;
   21548:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   2154a:	2300      	movs	r3, #0
}
   2154c:	0018      	movs	r0, r3
   2154e:	46bd      	mov	sp, r7
   21550:	b007      	add	sp, #28
   21552:	bd90      	pop	{r4, r7, pc}
   21554:	00021d35 	.word	0x00021d35
   21558:	00021d11 	.word	0x00021d11

0002155c <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   2155c:	b590      	push	{r4, r7, lr}
   2155e:	b083      	sub	sp, #12
   21560:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   21562:	2300      	movs	r3, #0
   21564:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   21566:	1dfb      	adds	r3, r7, #7
   21568:	2200      	movs	r2, #0
   2156a:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   2156c:	1dfc      	adds	r4, r7, #7
   2156e:	003b      	movs	r3, r7
   21570:	4a24      	ldr	r2, [pc, #144]	; (21604 <enable_interrupts+0xa8>)
   21572:	0019      	movs	r1, r3
   21574:	0010      	movs	r0, r2
   21576:	4b24      	ldr	r3, [pc, #144]	; (21608 <enable_interrupts+0xac>)
   21578:	4798      	blx	r3
   2157a:	0003      	movs	r3, r0
   2157c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   2157e:	1dfb      	adds	r3, r7, #7
   21580:	781b      	ldrb	r3, [r3, #0]
   21582:	b25b      	sxtb	r3, r3
   21584:	2b00      	cmp	r3, #0
   21586:	d131      	bne.n	215ec <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   21588:	683b      	ldr	r3, [r7, #0]
   2158a:	2280      	movs	r2, #128	; 0x80
   2158c:	0052      	lsls	r2, r2, #1
   2158e:	4313      	orrs	r3, r2
   21590:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   21592:	683b      	ldr	r3, [r7, #0]
   21594:	1dfc      	adds	r4, r7, #7
   21596:	4a1b      	ldr	r2, [pc, #108]	; (21604 <enable_interrupts+0xa8>)
   21598:	0019      	movs	r1, r3
   2159a:	0010      	movs	r0, r2
   2159c:	4b1b      	ldr	r3, [pc, #108]	; (2160c <enable_interrupts+0xb0>)
   2159e:	4798      	blx	r3
   215a0:	0003      	movs	r3, r0
   215a2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   215a4:	1dfb      	adds	r3, r7, #7
   215a6:	781b      	ldrb	r3, [r3, #0]
   215a8:	b25b      	sxtb	r3, r3
   215aa:	2b00      	cmp	r3, #0
   215ac:	d120      	bne.n	215f0 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   215ae:	1dfc      	adds	r4, r7, #7
   215b0:	003a      	movs	r2, r7
   215b2:	23d0      	movs	r3, #208	; 0xd0
   215b4:	015b      	lsls	r3, r3, #5
   215b6:	0011      	movs	r1, r2
   215b8:	0018      	movs	r0, r3
   215ba:	4b13      	ldr	r3, [pc, #76]	; (21608 <enable_interrupts+0xac>)
   215bc:	4798      	blx	r3
   215be:	0003      	movs	r3, r0
   215c0:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   215c2:	1dfb      	adds	r3, r7, #7
   215c4:	781b      	ldrb	r3, [r3, #0]
   215c6:	b25b      	sxtb	r3, r3
   215c8:	2b00      	cmp	r3, #0
   215ca:	d113      	bne.n	215f4 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   215cc:	683b      	ldr	r3, [r7, #0]
   215ce:	2280      	movs	r2, #128	; 0x80
   215d0:	0252      	lsls	r2, r2, #9
   215d2:	4313      	orrs	r3, r2
   215d4:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   215d6:	683a      	ldr	r2, [r7, #0]
   215d8:	1dfc      	adds	r4, r7, #7
   215da:	23d0      	movs	r3, #208	; 0xd0
   215dc:	015b      	lsls	r3, r3, #5
   215de:	0011      	movs	r1, r2
   215e0:	0018      	movs	r0, r3
   215e2:	4b0a      	ldr	r3, [pc, #40]	; (2160c <enable_interrupts+0xb0>)
   215e4:	4798      	blx	r3
   215e6:	0003      	movs	r3, r0
   215e8:	7023      	strb	r3, [r4, #0]
   215ea:	e004      	b.n	215f6 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   215ec:	46c0      	nop			; (mov r8, r8)
   215ee:	e002      	b.n	215f6 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   215f0:	46c0      	nop			; (mov r8, r8)
   215f2:	e000      	b.n	215f6 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   215f4:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   215f6:	1dfb      	adds	r3, r7, #7
   215f8:	781b      	ldrb	r3, [r3, #0]
   215fa:	b25b      	sxtb	r3, r3
}
   215fc:	0018      	movs	r0, r3
   215fe:	46bd      	mov	sp, r7
   21600:	b003      	add	sp, #12
   21602:	bd90      	pop	{r4, r7, pc}
   21604:	00001408 	.word	0x00001408
   21608:	00021d11 	.word	0x00021d11
   2160c:	00021d35 	.word	0x00021d35

00021610 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   21610:	b580      	push	{r7, lr}
   21612:	b082      	sub	sp, #8
   21614:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   21616:	4b32      	ldr	r3, [pc, #200]	; (216e0 <nmi_get_chipid+0xd0>)
   21618:	681b      	ldr	r3, [r3, #0]
   2161a:	2b00      	cmp	r3, #0
   2161c:	d159      	bne.n	216d2 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   2161e:	4a30      	ldr	r2, [pc, #192]	; (216e0 <nmi_get_chipid+0xd0>)
   21620:	2380      	movs	r3, #128	; 0x80
   21622:	015b      	lsls	r3, r3, #5
   21624:	0011      	movs	r1, r2
   21626:	0018      	movs	r0, r3
   21628:	4b2e      	ldr	r3, [pc, #184]	; (216e4 <nmi_get_chipid+0xd4>)
   2162a:	4798      	blx	r3
   2162c:	1e03      	subs	r3, r0, #0
   2162e:	d004      	beq.n	2163a <nmi_get_chipid+0x2a>
			chipid = 0;
   21630:	4b2b      	ldr	r3, [pc, #172]	; (216e0 <nmi_get_chipid+0xd0>)
   21632:	2200      	movs	r2, #0
   21634:	601a      	str	r2, [r3, #0]
			return 0;
   21636:	2300      	movs	r3, #0
   21638:	e04d      	b.n	216d6 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   2163a:	1d3b      	adds	r3, r7, #4
   2163c:	4a2a      	ldr	r2, [pc, #168]	; (216e8 <nmi_get_chipid+0xd8>)
   2163e:	0019      	movs	r1, r3
   21640:	0010      	movs	r0, r2
   21642:	4b28      	ldr	r3, [pc, #160]	; (216e4 <nmi_get_chipid+0xd4>)
   21644:	4798      	blx	r3
   21646:	1e03      	subs	r3, r0, #0
   21648:	d004      	beq.n	21654 <nmi_get_chipid+0x44>
			chipid = 0;
   2164a:	4b25      	ldr	r3, [pc, #148]	; (216e0 <nmi_get_chipid+0xd0>)
   2164c:	2200      	movs	r2, #0
   2164e:	601a      	str	r2, [r3, #0]
			return 0;
   21650:	2300      	movs	r3, #0
   21652:	e040      	b.n	216d6 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   21654:	4b22      	ldr	r3, [pc, #136]	; (216e0 <nmi_get_chipid+0xd0>)
   21656:	681b      	ldr	r3, [r3, #0]
   21658:	4a24      	ldr	r2, [pc, #144]	; (216ec <nmi_get_chipid+0xdc>)
   2165a:	4293      	cmp	r3, r2
   2165c:	d106      	bne.n	2166c <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   2165e:	687b      	ldr	r3, [r7, #4]
   21660:	2b01      	cmp	r3, #1
   21662:	d029      	beq.n	216b8 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   21664:	4b1e      	ldr	r3, [pc, #120]	; (216e0 <nmi_get_chipid+0xd0>)
   21666:	4a22      	ldr	r2, [pc, #136]	; (216f0 <nmi_get_chipid+0xe0>)
   21668:	601a      	str	r2, [r3, #0]
   2166a:	e025      	b.n	216b8 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   2166c:	4b1c      	ldr	r3, [pc, #112]	; (216e0 <nmi_get_chipid+0xd0>)
   2166e:	681b      	ldr	r3, [r3, #0]
   21670:	4a20      	ldr	r2, [pc, #128]	; (216f4 <nmi_get_chipid+0xe4>)
   21672:	4293      	cmp	r3, r2
   21674:	d10d      	bne.n	21692 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   21676:	687b      	ldr	r3, [r7, #4]
   21678:	2b03      	cmp	r3, #3
   2167a:	d01d      	beq.n	216b8 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   2167c:	687b      	ldr	r3, [r7, #4]
   2167e:	2b04      	cmp	r3, #4
   21680:	d103      	bne.n	2168a <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   21682:	4b17      	ldr	r3, [pc, #92]	; (216e0 <nmi_get_chipid+0xd0>)
   21684:	4a1c      	ldr	r2, [pc, #112]	; (216f8 <nmi_get_chipid+0xe8>)
   21686:	601a      	str	r2, [r3, #0]
   21688:	e016      	b.n	216b8 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   2168a:	4b15      	ldr	r3, [pc, #84]	; (216e0 <nmi_get_chipid+0xd0>)
   2168c:	4a1b      	ldr	r2, [pc, #108]	; (216fc <nmi_get_chipid+0xec>)
   2168e:	601a      	str	r2, [r3, #0]
   21690:	e012      	b.n	216b8 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   21692:	4b13      	ldr	r3, [pc, #76]	; (216e0 <nmi_get_chipid+0xd0>)
   21694:	681b      	ldr	r3, [r3, #0]
   21696:	4a1a      	ldr	r2, [pc, #104]	; (21700 <nmi_get_chipid+0xf0>)
   21698:	4293      	cmp	r3, r2
   2169a:	d10d      	bne.n	216b8 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   2169c:	4a10      	ldr	r2, [pc, #64]	; (216e0 <nmi_get_chipid+0xd0>)
   2169e:	23ec      	movs	r3, #236	; 0xec
   216a0:	039b      	lsls	r3, r3, #14
   216a2:	0011      	movs	r1, r2
   216a4:	0018      	movs	r0, r3
   216a6:	4b0f      	ldr	r3, [pc, #60]	; (216e4 <nmi_get_chipid+0xd4>)
   216a8:	4798      	blx	r3
   216aa:	1e03      	subs	r3, r0, #0
   216ac:	d004      	beq.n	216b8 <nmi_get_chipid+0xa8>
			chipid = 0;
   216ae:	4b0c      	ldr	r3, [pc, #48]	; (216e0 <nmi_get_chipid+0xd0>)
   216b0:	2200      	movs	r2, #0
   216b2:	601a      	str	r2, [r3, #0]
			return 0;
   216b4:	2300      	movs	r3, #0
   216b6:	e00e      	b.n	216d6 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   216b8:	4b09      	ldr	r3, [pc, #36]	; (216e0 <nmi_get_chipid+0xd0>)
   216ba:	681b      	ldr	r3, [r3, #0]
   216bc:	4a11      	ldr	r2, [pc, #68]	; (21704 <nmi_get_chipid+0xf4>)
   216be:	401a      	ands	r2, r3
   216c0:	4b07      	ldr	r3, [pc, #28]	; (216e0 <nmi_get_chipid+0xd0>)
   216c2:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   216c4:	4b06      	ldr	r3, [pc, #24]	; (216e0 <nmi_get_chipid+0xd0>)
   216c6:	681b      	ldr	r3, [r3, #0]
   216c8:	22a0      	movs	r2, #160	; 0xa0
   216ca:	02d2      	lsls	r2, r2, #11
   216cc:	431a      	orrs	r2, r3
   216ce:	4b04      	ldr	r3, [pc, #16]	; (216e0 <nmi_get_chipid+0xd0>)
   216d0:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   216d2:	4b03      	ldr	r3, [pc, #12]	; (216e0 <nmi_get_chipid+0xd0>)
   216d4:	681b      	ldr	r3, [r3, #0]
}
   216d6:	0018      	movs	r0, r3
   216d8:	46bd      	mov	sp, r7
   216da:	b002      	add	sp, #8
   216dc:	bd80      	pop	{r7, pc}
   216de:	46c0      	nop			; (mov r8, r8)
   216e0:	20004278 	.word	0x20004278
   216e4:	00021d11 	.word	0x00021d11
   216e8:	000013f4 	.word	0x000013f4
   216ec:	001002a0 	.word	0x001002a0
   216f0:	001002a1 	.word	0x001002a1
   216f4:	001002b0 	.word	0x001002b0
   216f8:	001002b1 	.word	0x001002b1
   216fc:	001002b2 	.word	0x001002b2
   21700:	001000f0 	.word	0x001000f0
   21704:	fff0ffff 	.word	0xfff0ffff

00021708 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   21708:	b590      	push	{r4, r7, lr}
   2170a:	b083      	sub	sp, #12
   2170c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   2170e:	1dfb      	adds	r3, r7, #7
   21710:	2200      	movs	r2, #0
   21712:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   21714:	1dfc      	adds	r4, r7, #7
   21716:	003b      	movs	r3, r7
   21718:	0019      	movs	r1, r3
   2171a:	2010      	movs	r0, #16
   2171c:	4b2e      	ldr	r3, [pc, #184]	; (217d8 <chip_sleep+0xd0>)
   2171e:	4798      	blx	r3
   21720:	0003      	movs	r3, r0
   21722:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   21724:	1dfb      	adds	r3, r7, #7
   21726:	781b      	ldrb	r3, [r3, #0]
   21728:	b25b      	sxtb	r3, r3
   2172a:	2b00      	cmp	r3, #0
   2172c:	d145      	bne.n	217ba <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   2172e:	683b      	ldr	r3, [r7, #0]
   21730:	2201      	movs	r2, #1
   21732:	4013      	ands	r3, r2
   21734:	d000      	beq.n	21738 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   21736:	e7ed      	b.n	21714 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   21738:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   2173a:	1dfc      	adds	r4, r7, #7
   2173c:	003b      	movs	r3, r7
   2173e:	0019      	movs	r1, r3
   21740:	2001      	movs	r0, #1
   21742:	4b25      	ldr	r3, [pc, #148]	; (217d8 <chip_sleep+0xd0>)
   21744:	4798      	blx	r3
   21746:	0003      	movs	r3, r0
   21748:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2174a:	1dfb      	adds	r3, r7, #7
   2174c:	781b      	ldrb	r3, [r3, #0]
   2174e:	b25b      	sxtb	r3, r3
   21750:	2b00      	cmp	r3, #0
   21752:	d134      	bne.n	217be <chip_sleep+0xb6>
	if(reg & NBIT1)
   21754:	683b      	ldr	r3, [r7, #0]
   21756:	2202      	movs	r2, #2
   21758:	4013      	ands	r3, r2
   2175a:	d010      	beq.n	2177e <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   2175c:	683b      	ldr	r3, [r7, #0]
   2175e:	2202      	movs	r2, #2
   21760:	4393      	bics	r3, r2
   21762:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   21764:	683b      	ldr	r3, [r7, #0]
   21766:	1dfc      	adds	r4, r7, #7
   21768:	0019      	movs	r1, r3
   2176a:	2001      	movs	r0, #1
   2176c:	4b1b      	ldr	r3, [pc, #108]	; (217dc <chip_sleep+0xd4>)
   2176e:	4798      	blx	r3
   21770:	0003      	movs	r3, r0
   21772:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   21774:	1dfb      	adds	r3, r7, #7
   21776:	781b      	ldrb	r3, [r3, #0]
   21778:	b25b      	sxtb	r3, r3
   2177a:	2b00      	cmp	r3, #0
   2177c:	d121      	bne.n	217c2 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   2177e:	1dfc      	adds	r4, r7, #7
   21780:	003b      	movs	r3, r7
   21782:	0019      	movs	r1, r3
   21784:	200b      	movs	r0, #11
   21786:	4b14      	ldr	r3, [pc, #80]	; (217d8 <chip_sleep+0xd0>)
   21788:	4798      	blx	r3
   2178a:	0003      	movs	r3, r0
   2178c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2178e:	1dfb      	adds	r3, r7, #7
   21790:	781b      	ldrb	r3, [r3, #0]
   21792:	b25b      	sxtb	r3, r3
   21794:	2b00      	cmp	r3, #0
   21796:	d116      	bne.n	217c6 <chip_sleep+0xbe>
	if(reg & NBIT0)
   21798:	683b      	ldr	r3, [r7, #0]
   2179a:	2201      	movs	r2, #1
   2179c:	4013      	ands	r3, r2
   2179e:	d013      	beq.n	217c8 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   217a0:	683b      	ldr	r3, [r7, #0]
   217a2:	2201      	movs	r2, #1
   217a4:	4393      	bics	r3, r2
   217a6:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   217a8:	683b      	ldr	r3, [r7, #0]
   217aa:	1dfc      	adds	r4, r7, #7
   217ac:	0019      	movs	r1, r3
   217ae:	200b      	movs	r0, #11
   217b0:	4b0a      	ldr	r3, [pc, #40]	; (217dc <chip_sleep+0xd4>)
   217b2:	4798      	blx	r3
   217b4:	0003      	movs	r3, r0
   217b6:	7023      	strb	r3, [r4, #0]
   217b8:	e006      	b.n	217c8 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   217ba:	46c0      	nop			; (mov r8, r8)
   217bc:	e004      	b.n	217c8 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   217be:	46c0      	nop			; (mov r8, r8)
   217c0:	e002      	b.n	217c8 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   217c2:	46c0      	nop			; (mov r8, r8)
   217c4:	e000      	b.n	217c8 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   217c6:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   217c8:	1dfb      	adds	r3, r7, #7
   217ca:	781b      	ldrb	r3, [r3, #0]
   217cc:	b25b      	sxtb	r3, r3
}
   217ce:	0018      	movs	r0, r3
   217d0:	46bd      	mov	sp, r7
   217d2:	b003      	add	sp, #12
   217d4:	bd90      	pop	{r4, r7, pc}
   217d6:	46c0      	nop			; (mov r8, r8)
   217d8:	00021d11 	.word	0x00021d11
   217dc:	00021d35 	.word	0x00021d35

000217e0 <chip_wake>:
sint8 chip_wake(void)
{
   217e0:	b590      	push	{r4, r7, lr}
   217e2:	b085      	sub	sp, #20
   217e4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   217e6:	230f      	movs	r3, #15
   217e8:	18fb      	adds	r3, r7, r3
   217ea:	2200      	movs	r2, #0
   217ec:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   217ee:	2300      	movs	r3, #0
   217f0:	607b      	str	r3, [r7, #4]
   217f2:	2300      	movs	r3, #0
   217f4:	603b      	str	r3, [r7, #0]
   217f6:	2300      	movs	r3, #0
   217f8:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   217fa:	230f      	movs	r3, #15
   217fc:	18fc      	adds	r4, r7, r3
   217fe:	1d3b      	adds	r3, r7, #4
   21800:	0019      	movs	r1, r3
   21802:	200b      	movs	r0, #11
   21804:	4b4e      	ldr	r3, [pc, #312]	; (21940 <chip_wake+0x160>)
   21806:	4798      	blx	r3
   21808:	0003      	movs	r3, r0
   2180a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   2180c:	230f      	movs	r3, #15
   2180e:	18fb      	adds	r3, r7, r3
   21810:	781b      	ldrb	r3, [r3, #0]
   21812:	b25b      	sxtb	r3, r3
   21814:	2b00      	cmp	r3, #0
   21816:	d000      	beq.n	2181a <chip_wake+0x3a>
   21818:	e082      	b.n	21920 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   2181a:	687b      	ldr	r3, [r7, #4]
   2181c:	2201      	movs	r2, #1
   2181e:	4013      	ands	r3, r2
   21820:	d111      	bne.n	21846 <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   21822:	687b      	ldr	r3, [r7, #4]
   21824:	2201      	movs	r2, #1
   21826:	4313      	orrs	r3, r2
   21828:	220f      	movs	r2, #15
   2182a:	18bc      	adds	r4, r7, r2
   2182c:	0019      	movs	r1, r3
   2182e:	200b      	movs	r0, #11
   21830:	4b44      	ldr	r3, [pc, #272]	; (21944 <chip_wake+0x164>)
   21832:	4798      	blx	r3
   21834:	0003      	movs	r3, r0
   21836:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   21838:	230f      	movs	r3, #15
   2183a:	18fb      	adds	r3, r7, r3
   2183c:	781b      	ldrb	r3, [r3, #0]
   2183e:	b25b      	sxtb	r3, r3
   21840:	2b00      	cmp	r3, #0
   21842:	d000      	beq.n	21846 <chip_wake+0x66>
   21844:	e06e      	b.n	21924 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   21846:	230f      	movs	r3, #15
   21848:	18fc      	adds	r4, r7, r3
   2184a:	1d3b      	adds	r3, r7, #4
   2184c:	0019      	movs	r1, r3
   2184e:	2001      	movs	r0, #1
   21850:	4b3b      	ldr	r3, [pc, #236]	; (21940 <chip_wake+0x160>)
   21852:	4798      	blx	r3
   21854:	0003      	movs	r3, r0
   21856:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   21858:	230f      	movs	r3, #15
   2185a:	18fb      	adds	r3, r7, r3
   2185c:	781b      	ldrb	r3, [r3, #0]
   2185e:	b25b      	sxtb	r3, r3
   21860:	2b00      	cmp	r3, #0
   21862:	d161      	bne.n	21928 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   21864:	687b      	ldr	r3, [r7, #4]
   21866:	2202      	movs	r2, #2
   21868:	4013      	ands	r3, r2
   2186a:	d110      	bne.n	2188e <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   2186c:	687b      	ldr	r3, [r7, #4]
   2186e:	2202      	movs	r2, #2
   21870:	4313      	orrs	r3, r2
   21872:	220f      	movs	r2, #15
   21874:	18bc      	adds	r4, r7, r2
   21876:	0019      	movs	r1, r3
   21878:	2001      	movs	r0, #1
   2187a:	4b32      	ldr	r3, [pc, #200]	; (21944 <chip_wake+0x164>)
   2187c:	4798      	blx	r3
   2187e:	0003      	movs	r3, r0
   21880:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   21882:	230f      	movs	r3, #15
   21884:	18fb      	adds	r3, r7, r3
   21886:	781b      	ldrb	r3, [r3, #0]
   21888:	b25b      	sxtb	r3, r3
   2188a:	2b00      	cmp	r3, #0
   2188c:	d14e      	bne.n	2192c <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   2188e:	230f      	movs	r3, #15
   21890:	18fc      	adds	r4, r7, r3
   21892:	003b      	movs	r3, r7
   21894:	0019      	movs	r1, r3
   21896:	200f      	movs	r0, #15
   21898:	4b29      	ldr	r3, [pc, #164]	; (21940 <chip_wake+0x160>)
   2189a:	4798      	blx	r3
   2189c:	0003      	movs	r3, r0
   2189e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   218a0:	230f      	movs	r3, #15
   218a2:	18fb      	adds	r3, r7, r3
   218a4:	781b      	ldrb	r3, [r3, #0]
   218a6:	b25b      	sxtb	r3, r3
   218a8:	2b00      	cmp	r3, #0
   218aa:	d014      	beq.n	218d6 <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   218ac:	23a8      	movs	r3, #168	; 0xa8
   218ae:	005a      	lsls	r2, r3, #1
   218b0:	4925      	ldr	r1, [pc, #148]	; (21948 <chip_wake+0x168>)
   218b2:	4b26      	ldr	r3, [pc, #152]	; (2194c <chip_wake+0x16c>)
   218b4:	0018      	movs	r0, r3
   218b6:	4b26      	ldr	r3, [pc, #152]	; (21950 <chip_wake+0x170>)
   218b8:	4798      	blx	r3
   218ba:	230f      	movs	r3, #15
   218bc:	18fb      	adds	r3, r7, r3
   218be:	2100      	movs	r1, #0
   218c0:	5659      	ldrsb	r1, [r3, r1]
   218c2:	683a      	ldr	r2, [r7, #0]
   218c4:	4b23      	ldr	r3, [pc, #140]	; (21954 <chip_wake+0x174>)
   218c6:	0018      	movs	r0, r3
   218c8:	4b21      	ldr	r3, [pc, #132]	; (21950 <chip_wake+0x170>)
   218ca:	4798      	blx	r3
   218cc:	4b22      	ldr	r3, [pc, #136]	; (21958 <chip_wake+0x178>)
   218ce:	0018      	movs	r0, r3
   218d0:	4b1f      	ldr	r3, [pc, #124]	; (21950 <chip_wake+0x170>)
   218d2:	4798      	blx	r3
			goto _WAKE_EXIT;
   218d4:	e02b      	b.n	2192e <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   218d6:	683b      	ldr	r3, [r7, #0]
   218d8:	2204      	movs	r2, #4
   218da:	4013      	ands	r3, r2
   218dc:	d11c      	bne.n	21918 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   218de:	2002      	movs	r0, #2
   218e0:	4b1e      	ldr	r3, [pc, #120]	; (2195c <chip_wake+0x17c>)
   218e2:	4798      	blx	r3
		trials++;
   218e4:	68bb      	ldr	r3, [r7, #8]
   218e6:	3301      	adds	r3, #1
   218e8:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   218ea:	68bb      	ldr	r3, [r7, #8]
   218ec:	2b04      	cmp	r3, #4
   218ee:	d9ce      	bls.n	2188e <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   218f0:	23ad      	movs	r3, #173	; 0xad
   218f2:	005a      	lsls	r2, r3, #1
   218f4:	4914      	ldr	r1, [pc, #80]	; (21948 <chip_wake+0x168>)
   218f6:	4b15      	ldr	r3, [pc, #84]	; (2194c <chip_wake+0x16c>)
   218f8:	0018      	movs	r0, r3
   218fa:	4b15      	ldr	r3, [pc, #84]	; (21950 <chip_wake+0x170>)
   218fc:	4798      	blx	r3
   218fe:	4b18      	ldr	r3, [pc, #96]	; (21960 <chip_wake+0x180>)
   21900:	0018      	movs	r0, r3
   21902:	4b13      	ldr	r3, [pc, #76]	; (21950 <chip_wake+0x170>)
   21904:	4798      	blx	r3
   21906:	4b14      	ldr	r3, [pc, #80]	; (21958 <chip_wake+0x178>)
   21908:	0018      	movs	r0, r3
   2190a:	4b11      	ldr	r3, [pc, #68]	; (21950 <chip_wake+0x170>)
   2190c:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   2190e:	230f      	movs	r3, #15
   21910:	18fb      	adds	r3, r7, r3
   21912:	22fc      	movs	r2, #252	; 0xfc
   21914:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   21916:	e00a      	b.n	2192e <chip_wake+0x14e>
			break;
   21918:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   2191a:	4b12      	ldr	r3, [pc, #72]	; (21964 <chip_wake+0x184>)
   2191c:	4798      	blx	r3
   2191e:	e006      	b.n	2192e <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   21920:	46c0      	nop			; (mov r8, r8)
   21922:	e004      	b.n	2192e <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   21924:	46c0      	nop			; (mov r8, r8)
   21926:	e002      	b.n	2192e <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   21928:	46c0      	nop			; (mov r8, r8)
   2192a:	e000      	b.n	2192e <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   2192c:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   2192e:	230f      	movs	r3, #15
   21930:	18fb      	adds	r3, r7, r3
   21932:	781b      	ldrb	r3, [r3, #0]
   21934:	b25b      	sxtb	r3, r3
}
   21936:	0018      	movs	r0, r3
   21938:	46bd      	mov	sp, r7
   2193a:	b005      	add	sp, #20
   2193c:	bd90      	pop	{r4, r7, pc}
   2193e:	46c0      	nop			; (mov r8, r8)
   21940:	00021d11 	.word	0x00021d11
   21944:	00021d35 	.word	0x00021d35
   21948:	00038580 	.word	0x00038580
   2194c:	000384f4 	.word	0x000384f4
   21950:	0001cee9 	.word	0x0001cee9
   21954:	00038508 	.word	0x00038508
   21958:	00038520 	.word	0x00038520
   2195c:	0001f3a1 	.word	0x0001f3a1
   21960:	00038524 	.word	0x00038524
   21964:	00021cd1 	.word	0x00021cd1

00021968 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   21968:	b580      	push	{r7, lr}
   2196a:	b088      	sub	sp, #32
   2196c:	af00      	add	r7, sp, #0
   2196e:	0002      	movs	r2, r0
   21970:	1dfb      	adds	r3, r7, #7
   21972:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   21974:	2313      	movs	r3, #19
   21976:	18fb      	adds	r3, r7, r3
   21978:	2200      	movs	r2, #0
   2197a:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   2197c:	2300      	movs	r3, #0
   2197e:	61fb      	str	r3, [r7, #28]
   21980:	2300      	movs	r3, #0
   21982:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   21984:	2300      	movs	r3, #0
   21986:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   21988:	4b4a      	ldr	r3, [pc, #296]	; (21ab4 <wait_for_bootrom+0x14c>)
   2198a:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   2198c:	2300      	movs	r3, #0
   2198e:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   21990:	4b49      	ldr	r3, [pc, #292]	; (21ab8 <wait_for_bootrom+0x150>)
   21992:	0018      	movs	r0, r3
   21994:	4b49      	ldr	r3, [pc, #292]	; (21abc <wait_for_bootrom+0x154>)
   21996:	4798      	blx	r3
   21998:	0003      	movs	r3, r0
   2199a:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   2199c:	69fb      	ldr	r3, [r7, #28]
   2199e:	2b00      	cmp	r3, #0
   219a0:	db03      	blt.n	219aa <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   219a2:	2001      	movs	r0, #1
   219a4:	4b46      	ldr	r3, [pc, #280]	; (21ac0 <wait_for_bootrom+0x158>)
   219a6:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   219a8:	e7f2      	b.n	21990 <wait_for_bootrom+0x28>
			break;
   219aa:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   219ac:	4b45      	ldr	r3, [pc, #276]	; (21ac4 <wait_for_bootrom+0x15c>)
   219ae:	0018      	movs	r0, r3
   219b0:	4b42      	ldr	r3, [pc, #264]	; (21abc <wait_for_bootrom+0x154>)
   219b2:	4798      	blx	r3
   219b4:	0003      	movs	r3, r0
   219b6:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   219b8:	69fb      	ldr	r3, [r7, #28]
   219ba:	2201      	movs	r2, #1
   219bc:	4013      	ands	r3, r2
   219be:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   219c0:	69fb      	ldr	r3, [r7, #28]
   219c2:	2b00      	cmp	r3, #0
   219c4:	d112      	bne.n	219ec <wait_for_bootrom+0x84>
	{
		reg = 0;
   219c6:	2300      	movs	r3, #0
   219c8:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   219ca:	e00b      	b.n	219e4 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   219cc:	2001      	movs	r0, #1
   219ce:	4b3c      	ldr	r3, [pc, #240]	; (21ac0 <wait_for_bootrom+0x158>)
   219d0:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   219d2:	4b3d      	ldr	r3, [pc, #244]	; (21ac8 <wait_for_bootrom+0x160>)
   219d4:	0018      	movs	r0, r3
   219d6:	4b39      	ldr	r3, [pc, #228]	; (21abc <wait_for_bootrom+0x154>)
   219d8:	4798      	blx	r3
   219da:	0003      	movs	r3, r0
   219dc:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   219de:	69bb      	ldr	r3, [r7, #24]
   219e0:	3301      	adds	r3, #1
   219e2:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   219e4:	69fb      	ldr	r3, [r7, #28]
   219e6:	4a39      	ldr	r2, [pc, #228]	; (21acc <wait_for_bootrom+0x164>)
   219e8:	4293      	cmp	r3, r2
   219ea:	d1ef      	bne.n	219cc <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   219ec:	1dfb      	adds	r3, r7, #7
   219ee:	781b      	ldrb	r3, [r3, #0]
   219f0:	2b02      	cmp	r3, #2
   219f2:	d10d      	bne.n	21a10 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   219f4:	4a36      	ldr	r2, [pc, #216]	; (21ad0 <wait_for_bootrom+0x168>)
   219f6:	4b37      	ldr	r3, [pc, #220]	; (21ad4 <wait_for_bootrom+0x16c>)
   219f8:	0011      	movs	r1, r2
   219fa:	0018      	movs	r0, r3
   219fc:	4b36      	ldr	r3, [pc, #216]	; (21ad8 <wait_for_bootrom+0x170>)
   219fe:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   21a00:	2380      	movs	r3, #128	; 0x80
   21a02:	035b      	lsls	r3, r3, #13
   21a04:	4a35      	ldr	r2, [pc, #212]	; (21adc <wait_for_bootrom+0x174>)
   21a06:	0019      	movs	r1, r3
   21a08:	0010      	movs	r0, r2
   21a0a:	4b33      	ldr	r3, [pc, #204]	; (21ad8 <wait_for_bootrom+0x170>)
   21a0c:	4798      	blx	r3
   21a0e:	e022      	b.n	21a56 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   21a10:	1dfb      	adds	r3, r7, #7
   21a12:	781b      	ldrb	r3, [r3, #0]
   21a14:	2b03      	cmp	r3, #3
   21a16:	d10b      	bne.n	21a30 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   21a18:	4a2d      	ldr	r2, [pc, #180]	; (21ad0 <wait_for_bootrom+0x168>)
   21a1a:	4b2e      	ldr	r3, [pc, #184]	; (21ad4 <wait_for_bootrom+0x16c>)
   21a1c:	0011      	movs	r1, r2
   21a1e:	0018      	movs	r0, r3
   21a20:	4b2d      	ldr	r3, [pc, #180]	; (21ad8 <wait_for_bootrom+0x170>)
   21a22:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   21a24:	4b2d      	ldr	r3, [pc, #180]	; (21adc <wait_for_bootrom+0x174>)
   21a26:	2100      	movs	r1, #0
   21a28:	0018      	movs	r0, r3
   21a2a:	4b2b      	ldr	r3, [pc, #172]	; (21ad8 <wait_for_bootrom+0x170>)
   21a2c:	4798      	blx	r3
   21a2e:	e012      	b.n	21a56 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   21a30:	1dfb      	adds	r3, r7, #7
   21a32:	781b      	ldrb	r3, [r3, #0]
   21a34:	2b04      	cmp	r3, #4
   21a36:	d108      	bne.n	21a4a <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   21a38:	2380      	movs	r3, #128	; 0x80
   21a3a:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   21a3c:	68fb      	ldr	r3, [r7, #12]
   21a3e:	4a27      	ldr	r2, [pc, #156]	; (21adc <wait_for_bootrom+0x174>)
   21a40:	0019      	movs	r1, r3
   21a42:	0010      	movs	r0, r2
   21a44:	4b24      	ldr	r3, [pc, #144]	; (21ad8 <wait_for_bootrom+0x170>)
   21a46:	4798      	blx	r3
   21a48:	e005      	b.n	21a56 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   21a4a:	68fb      	ldr	r3, [r7, #12]
   21a4c:	4a23      	ldr	r2, [pc, #140]	; (21adc <wait_for_bootrom+0x174>)
   21a4e:	0019      	movs	r1, r3
   21a50:	0010      	movs	r0, r2
   21a52:	4b21      	ldr	r3, [pc, #132]	; (21ad8 <wait_for_bootrom+0x170>)
   21a54:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   21a56:	4b22      	ldr	r3, [pc, #136]	; (21ae0 <wait_for_bootrom+0x178>)
   21a58:	4798      	blx	r3
   21a5a:	0003      	movs	r3, r0
   21a5c:	051b      	lsls	r3, r3, #20
   21a5e:	0d1b      	lsrs	r3, r3, #20
   21a60:	4a20      	ldr	r2, [pc, #128]	; (21ae4 <wait_for_bootrom+0x17c>)
   21a62:	4293      	cmp	r3, r2
   21a64:	d906      	bls.n	21a74 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   21a66:	697b      	ldr	r3, [r7, #20]
   21a68:	2202      	movs	r2, #2
   21a6a:	4313      	orrs	r3, r2
   21a6c:	0018      	movs	r0, r3
   21a6e:	4b1e      	ldr	r3, [pc, #120]	; (21ae8 <wait_for_bootrom+0x180>)
   21a70:	4798      	blx	r3
   21a72:	e003      	b.n	21a7c <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   21a74:	697b      	ldr	r3, [r7, #20]
   21a76:	0018      	movs	r0, r3
   21a78:	4b1b      	ldr	r3, [pc, #108]	; (21ae8 <wait_for_bootrom+0x180>)
   21a7a:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   21a7c:	4b1b      	ldr	r3, [pc, #108]	; (21aec <wait_for_bootrom+0x184>)
   21a7e:	0018      	movs	r0, r3
   21a80:	4b1b      	ldr	r3, [pc, #108]	; (21af0 <wait_for_bootrom+0x188>)
   21a82:	4798      	blx	r3
   21a84:	68fa      	ldr	r2, [r7, #12]
   21a86:	4b1b      	ldr	r3, [pc, #108]	; (21af4 <wait_for_bootrom+0x18c>)
   21a88:	0011      	movs	r1, r2
   21a8a:	0018      	movs	r0, r3
   21a8c:	4b18      	ldr	r3, [pc, #96]	; (21af0 <wait_for_bootrom+0x188>)
   21a8e:	4798      	blx	r3
   21a90:	4b19      	ldr	r3, [pc, #100]	; (21af8 <wait_for_bootrom+0x190>)
   21a92:	0018      	movs	r0, r3
   21a94:	4b16      	ldr	r3, [pc, #88]	; (21af0 <wait_for_bootrom+0x188>)
   21a96:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   21a98:	4a18      	ldr	r2, [pc, #96]	; (21afc <wait_for_bootrom+0x194>)
   21a9a:	4b0b      	ldr	r3, [pc, #44]	; (21ac8 <wait_for_bootrom+0x160>)
   21a9c:	0011      	movs	r1, r2
   21a9e:	0018      	movs	r0, r3
   21aa0:	4b0d      	ldr	r3, [pc, #52]	; (21ad8 <wait_for_bootrom+0x170>)
   21aa2:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   21aa4:	2313      	movs	r3, #19
   21aa6:	18fb      	adds	r3, r7, r3
   21aa8:	781b      	ldrb	r3, [r3, #0]
   21aaa:	b25b      	sxtb	r3, r3
}
   21aac:	0018      	movs	r0, r3
   21aae:	46bd      	mov	sp, r7
   21ab0:	b008      	add	sp, #32
   21ab2:	bd80      	pop	{r7, pc}
   21ab4:	13301354 	.word	0x13301354
   21ab8:	00001014 	.word	0x00001014
   21abc:	00021cf1 	.word	0x00021cf1
   21ac0:	0001f3a1 	.word	0x0001f3a1
   21ac4:	000207bc 	.word	0x000207bc
   21ac8:	000c000c 	.word	0x000c000c
   21acc:	10add09e 	.word	0x10add09e
   21ad0:	3c1cd57d 	.word	0x3c1cd57d
   21ad4:	000207ac 	.word	0x000207ac
   21ad8:	00021d35 	.word	0x00021d35
   21adc:	0000108c 	.word	0x0000108c
   21ae0:	00021611 	.word	0x00021611
   21ae4:	0000039f 	.word	0x0000039f
   21ae8:	000214e1 	.word	0x000214e1
   21aec:	00038540 	.word	0x00038540
   21af0:	0001cee9 	.word	0x0001cee9
   21af4:	0003854c 	.word	0x0003854c
   21af8:	00038520 	.word	0x00038520
   21afc:	ef522f61 	.word	0xef522f61

00021b00 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   21b00:	b580      	push	{r7, lr}
   21b02:	b088      	sub	sp, #32
   21b04:	af00      	add	r7, sp, #0
   21b06:	0002      	movs	r2, r0
   21b08:	1dfb      	adds	r3, r7, #7
   21b0a:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   21b0c:	231f      	movs	r3, #31
   21b0e:	18fb      	adds	r3, r7, r3
   21b10:	2200      	movs	r2, #0
   21b12:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   21b14:	2300      	movs	r3, #0
   21b16:	61bb      	str	r3, [r7, #24]
   21b18:	2300      	movs	r3, #0
   21b1a:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   21b1c:	2301      	movs	r3, #1
   21b1e:	425b      	negs	r3, r3
   21b20:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   21b22:	4b1d      	ldr	r3, [pc, #116]	; (21b98 <wait_for_firmware_start+0x98>)
   21b24:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   21b26:	4b1d      	ldr	r3, [pc, #116]	; (21b9c <wait_for_firmware_start+0x9c>)
   21b28:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   21b2a:	1dfb      	adds	r3, r7, #7
   21b2c:	781b      	ldrb	r3, [r3, #0]
   21b2e:	2b02      	cmp	r3, #2
   21b30:	d003      	beq.n	21b3a <wait_for_firmware_start+0x3a>
   21b32:	1dfb      	adds	r3, r7, #7
   21b34:	781b      	ldrb	r3, [r3, #0]
   21b36:	2b03      	cmp	r3, #3
   21b38:	d119      	bne.n	21b6e <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   21b3a:	4b19      	ldr	r3, [pc, #100]	; (21ba0 <wait_for_firmware_start+0xa0>)
   21b3c:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   21b3e:	4b19      	ldr	r3, [pc, #100]	; (21ba4 <wait_for_firmware_start+0xa4>)
   21b40:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   21b42:	e014      	b.n	21b6e <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   21b44:	2002      	movs	r0, #2
   21b46:	4b18      	ldr	r3, [pc, #96]	; (21ba8 <wait_for_firmware_start+0xa8>)
   21b48:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   21b4a:	68fb      	ldr	r3, [r7, #12]
   21b4c:	0018      	movs	r0, r3
   21b4e:	4b17      	ldr	r3, [pc, #92]	; (21bac <wait_for_firmware_start+0xac>)
   21b50:	4798      	blx	r3
   21b52:	0003      	movs	r3, r0
   21b54:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   21b56:	697b      	ldr	r3, [r7, #20]
   21b58:	3301      	adds	r3, #1
   21b5a:	617b      	str	r3, [r7, #20]
   21b5c:	697a      	ldr	r2, [r7, #20]
   21b5e:	693b      	ldr	r3, [r7, #16]
   21b60:	429a      	cmp	r2, r3
   21b62:	d304      	bcc.n	21b6e <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   21b64:	231f      	movs	r3, #31
   21b66:	18fb      	adds	r3, r7, r3
   21b68:	22fb      	movs	r2, #251	; 0xfb
   21b6a:	701a      	strb	r2, [r3, #0]
			goto ERR;
   21b6c:	e00c      	b.n	21b88 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   21b6e:	68ba      	ldr	r2, [r7, #8]
   21b70:	69bb      	ldr	r3, [r7, #24]
   21b72:	429a      	cmp	r2, r3
   21b74:	d1e6      	bne.n	21b44 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   21b76:	68bb      	ldr	r3, [r7, #8]
   21b78:	4a08      	ldr	r2, [pc, #32]	; (21b9c <wait_for_firmware_start+0x9c>)
   21b7a:	4293      	cmp	r3, r2
   21b7c:	d104      	bne.n	21b88 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   21b7e:	4b06      	ldr	r3, [pc, #24]	; (21b98 <wait_for_firmware_start+0x98>)
   21b80:	2100      	movs	r1, #0
   21b82:	0018      	movs	r0, r3
   21b84:	4b0a      	ldr	r3, [pc, #40]	; (21bb0 <wait_for_firmware_start+0xb0>)
   21b86:	4798      	blx	r3
	}
ERR:
	return ret;
   21b88:	231f      	movs	r3, #31
   21b8a:	18fb      	adds	r3, r7, r3
   21b8c:	781b      	ldrb	r3, [r3, #0]
   21b8e:	b25b      	sxtb	r3, r3
}
   21b90:	0018      	movs	r0, r3
   21b92:	46bd      	mov	sp, r7
   21b94:	b008      	add	sp, #32
   21b96:	bd80      	pop	{r7, pc}
   21b98:	0000108c 	.word	0x0000108c
   21b9c:	02532636 	.word	0x02532636
   21ba0:	000207ac 	.word	0x000207ac
   21ba4:	d75dc1c3 	.word	0xd75dc1c3
   21ba8:	0001f3a1 	.word	0x0001f3a1
   21bac:	00021cf1 	.word	0x00021cf1
   21bb0:	00021d35 	.word	0x00021d35

00021bb4 <chip_deinit>:

sint8 chip_deinit(void)
{
   21bb4:	b590      	push	{r4, r7, lr}
   21bb6:	b083      	sub	sp, #12
   21bb8:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   21bba:	2300      	movs	r3, #0
   21bbc:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   21bbe:	1dfc      	adds	r4, r7, #7
   21bc0:	003a      	movs	r2, r7
   21bc2:	23a0      	movs	r3, #160	; 0xa0
   21bc4:	015b      	lsls	r3, r3, #5
   21bc6:	0011      	movs	r1, r2
   21bc8:	0018      	movs	r0, r3
   21bca:	4b20      	ldr	r3, [pc, #128]	; (21c4c <chip_deinit+0x98>)
   21bcc:	4798      	blx	r3
   21bce:	0003      	movs	r3, r0
   21bd0:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   21bd2:	1dfb      	adds	r3, r7, #7
   21bd4:	781b      	ldrb	r3, [r3, #0]
   21bd6:	b25b      	sxtb	r3, r3
   21bd8:	2b00      	cmp	r3, #0
   21bda:	d00e      	beq.n	21bfa <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   21bdc:	4a1c      	ldr	r2, [pc, #112]	; (21c50 <chip_deinit+0x9c>)
   21bde:	491d      	ldr	r1, [pc, #116]	; (21c54 <chip_deinit+0xa0>)
   21be0:	4b1d      	ldr	r3, [pc, #116]	; (21c58 <chip_deinit+0xa4>)
   21be2:	0018      	movs	r0, r3
   21be4:	4b1d      	ldr	r3, [pc, #116]	; (21c5c <chip_deinit+0xa8>)
   21be6:	4798      	blx	r3
   21be8:	4b1d      	ldr	r3, [pc, #116]	; (21c60 <chip_deinit+0xac>)
   21bea:	0018      	movs	r0, r3
   21bec:	4b1b      	ldr	r3, [pc, #108]	; (21c5c <chip_deinit+0xa8>)
   21bee:	4798      	blx	r3
   21bf0:	4b1c      	ldr	r3, [pc, #112]	; (21c64 <chip_deinit+0xb0>)
   21bf2:	0018      	movs	r0, r3
   21bf4:	4b19      	ldr	r3, [pc, #100]	; (21c5c <chip_deinit+0xa8>)
   21bf6:	4798      	blx	r3
		goto ERR1;
   21bf8:	e021      	b.n	21c3e <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   21bfa:	683b      	ldr	r3, [r7, #0]
   21bfc:	4a1a      	ldr	r2, [pc, #104]	; (21c68 <chip_deinit+0xb4>)
   21bfe:	4013      	ands	r3, r2
   21c00:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   21c02:	683a      	ldr	r2, [r7, #0]
   21c04:	1dfc      	adds	r4, r7, #7
   21c06:	23a0      	movs	r3, #160	; 0xa0
   21c08:	015b      	lsls	r3, r3, #5
   21c0a:	0011      	movs	r1, r2
   21c0c:	0018      	movs	r0, r3
   21c0e:	4b17      	ldr	r3, [pc, #92]	; (21c6c <chip_deinit+0xb8>)
   21c10:	4798      	blx	r3
   21c12:	0003      	movs	r3, r0
   21c14:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   21c16:	1dfb      	adds	r3, r7, #7
   21c18:	781b      	ldrb	r3, [r3, #0]
   21c1a:	b25b      	sxtb	r3, r3
   21c1c:	2b00      	cmp	r3, #0
   21c1e:	d00e      	beq.n	21c3e <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   21c20:	4a13      	ldr	r2, [pc, #76]	; (21c70 <chip_deinit+0xbc>)
   21c22:	490c      	ldr	r1, [pc, #48]	; (21c54 <chip_deinit+0xa0>)
   21c24:	4b0c      	ldr	r3, [pc, #48]	; (21c58 <chip_deinit+0xa4>)
   21c26:	0018      	movs	r0, r3
   21c28:	4b0c      	ldr	r3, [pc, #48]	; (21c5c <chip_deinit+0xa8>)
   21c2a:	4798      	blx	r3
   21c2c:	4b0c      	ldr	r3, [pc, #48]	; (21c60 <chip_deinit+0xac>)
   21c2e:	0018      	movs	r0, r3
   21c30:	4b0a      	ldr	r3, [pc, #40]	; (21c5c <chip_deinit+0xa8>)
   21c32:	4798      	blx	r3
   21c34:	4b0b      	ldr	r3, [pc, #44]	; (21c64 <chip_deinit+0xb0>)
   21c36:	0018      	movs	r0, r3
   21c38:	4b08      	ldr	r3, [pc, #32]	; (21c5c <chip_deinit+0xa8>)
   21c3a:	4798      	blx	r3
		goto ERR1;
   21c3c:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   21c3e:	1dfb      	adds	r3, r7, #7
   21c40:	781b      	ldrb	r3, [r3, #0]
   21c42:	b25b      	sxtb	r3, r3
}
   21c44:	0018      	movs	r0, r3
   21c46:	46bd      	mov	sp, r7
   21c48:	b003      	add	sp, #12
   21c4a:	bd90      	pop	{r4, r7, pc}
   21c4c:	00021d11 	.word	0x00021d11
   21c50:	00000201 	.word	0x00000201
   21c54:	0003858c 	.word	0x0003858c
   21c58:	000384f4 	.word	0x000384f4
   21c5c:	0001cee9 	.word	0x0001cee9
   21c60:	00038564 	.word	0x00038564
   21c64:	00038520 	.word	0x00038520
   21c68:	fffffbff 	.word	0xfffffbff
   21c6c:	00021d35 	.word	0x00021d35
   21c70:	00000207 	.word	0x00000207

00021c74 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   21c74:	b590      	push	{r4, r7, lr}
   21c76:	b085      	sub	sp, #20
   21c78:	af00      	add	r7, sp, #0
   21c7a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   21c7c:	230f      	movs	r3, #15
   21c7e:	18fb      	adds	r3, r7, r3
   21c80:	2200      	movs	r2, #0
   21c82:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   21c84:	230f      	movs	r3, #15
   21c86:	18fc      	adds	r4, r7, r3
   21c88:	687b      	ldr	r3, [r7, #4]
   21c8a:	0018      	movs	r0, r3
   21c8c:	4b05      	ldr	r3, [pc, #20]	; (21ca4 <nm_bus_iface_init+0x30>)
   21c8e:	4798      	blx	r3
   21c90:	0003      	movs	r3, r0
   21c92:	7023      	strb	r3, [r4, #0]
	return ret;
   21c94:	230f      	movs	r3, #15
   21c96:	18fb      	adds	r3, r7, r3
   21c98:	781b      	ldrb	r3, [r3, #0]
   21c9a:	b25b      	sxtb	r3, r3
}
   21c9c:	0018      	movs	r0, r3
   21c9e:	46bd      	mov	sp, r7
   21ca0:	b005      	add	sp, #20
   21ca2:	bd90      	pop	{r4, r7, pc}
   21ca4:	0001fa5d 	.word	0x0001fa5d

00021ca8 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   21ca8:	b590      	push	{r4, r7, lr}
   21caa:	b083      	sub	sp, #12
   21cac:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   21cae:	1dfb      	adds	r3, r7, #7
   21cb0:	2200      	movs	r2, #0
   21cb2:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   21cb4:	1dfc      	adds	r4, r7, #7
   21cb6:	4b05      	ldr	r3, [pc, #20]	; (21ccc <nm_bus_iface_deinit+0x24>)
   21cb8:	4798      	blx	r3
   21cba:	0003      	movs	r3, r0
   21cbc:	7023      	strb	r3, [r4, #0]

	return ret;
   21cbe:	1dfb      	adds	r3, r7, #7
   21cc0:	781b      	ldrb	r3, [r3, #0]
   21cc2:	b25b      	sxtb	r3, r3
}
   21cc4:	0018      	movs	r0, r3
   21cc6:	46bd      	mov	sp, r7
   21cc8:	b003      	add	sp, #12
   21cca:	bd90      	pop	{r4, r7, pc}
   21ccc:	0001fbd5 	.word	0x0001fbd5

00021cd0 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   21cd0:	b580      	push	{r7, lr}
   21cd2:	b082      	sub	sp, #8
   21cd4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   21cd6:	1dfb      	adds	r3, r7, #7
   21cd8:	2200      	movs	r2, #0
   21cda:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   21cdc:	4b03      	ldr	r3, [pc, #12]	; (21cec <nm_bus_reset+0x1c>)
   21cde:	4798      	blx	r3
   21ce0:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   21ce2:	0018      	movs	r0, r3
   21ce4:	46bd      	mov	sp, r7
   21ce6:	b002      	add	sp, #8
   21ce8:	bd80      	pop	{r7, pc}
   21cea:	46c0      	nop			; (mov r8, r8)
   21cec:	00023afd 	.word	0x00023afd

00021cf0 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   21cf0:	b580      	push	{r7, lr}
   21cf2:	b082      	sub	sp, #8
   21cf4:	af00      	add	r7, sp, #0
   21cf6:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   21cf8:	687b      	ldr	r3, [r7, #4]
   21cfa:	0018      	movs	r0, r3
   21cfc:	4b03      	ldr	r3, [pc, #12]	; (21d0c <nm_read_reg+0x1c>)
   21cfe:	4798      	blx	r3
   21d00:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   21d02:	0018      	movs	r0, r3
   21d04:	46bd      	mov	sp, r7
   21d06:	b002      	add	sp, #8
   21d08:	bd80      	pop	{r7, pc}
   21d0a:	46c0      	nop			; (mov r8, r8)
   21d0c:	00023c91 	.word	0x00023c91

00021d10 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   21d10:	b580      	push	{r7, lr}
   21d12:	b082      	sub	sp, #8
   21d14:	af00      	add	r7, sp, #0
   21d16:	6078      	str	r0, [r7, #4]
   21d18:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   21d1a:	683a      	ldr	r2, [r7, #0]
   21d1c:	687b      	ldr	r3, [r7, #4]
   21d1e:	0011      	movs	r1, r2
   21d20:	0018      	movs	r0, r3
   21d22:	4b03      	ldr	r3, [pc, #12]	; (21d30 <nm_read_reg_with_ret+0x20>)
   21d24:	4798      	blx	r3
   21d26:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   21d28:	0018      	movs	r0, r3
   21d2a:	46bd      	mov	sp, r7
   21d2c:	b002      	add	sp, #8
   21d2e:	bd80      	pop	{r7, pc}
   21d30:	00023cb5 	.word	0x00023cb5

00021d34 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   21d34:	b580      	push	{r7, lr}
   21d36:	b082      	sub	sp, #8
   21d38:	af00      	add	r7, sp, #0
   21d3a:	6078      	str	r0, [r7, #4]
   21d3c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   21d3e:	683a      	ldr	r2, [r7, #0]
   21d40:	687b      	ldr	r3, [r7, #4]
   21d42:	0011      	movs	r1, r2
   21d44:	0018      	movs	r0, r3
   21d46:	4b03      	ldr	r3, [pc, #12]	; (21d54 <nm_write_reg+0x20>)
   21d48:	4798      	blx	r3
   21d4a:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   21d4c:	0018      	movs	r0, r3
   21d4e:	46bd      	mov	sp, r7
   21d50:	b002      	add	sp, #8
   21d52:	bd80      	pop	{r7, pc}
   21d54:	00023d05 	.word	0x00023d05

00021d58 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   21d58:	b580      	push	{r7, lr}
   21d5a:	b084      	sub	sp, #16
   21d5c:	af00      	add	r7, sp, #0
   21d5e:	60f8      	str	r0, [r7, #12]
   21d60:	60b9      	str	r1, [r7, #8]
   21d62:	1dbb      	adds	r3, r7, #6
   21d64:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   21d66:	1dbb      	adds	r3, r7, #6
   21d68:	881a      	ldrh	r2, [r3, #0]
   21d6a:	68b9      	ldr	r1, [r7, #8]
   21d6c:	68fb      	ldr	r3, [r7, #12]
   21d6e:	0018      	movs	r0, r3
   21d70:	4b03      	ldr	r3, [pc, #12]	; (21d80 <p_nm_read_block+0x28>)
   21d72:	4798      	blx	r3
   21d74:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   21d76:	0018      	movs	r0, r3
   21d78:	46bd      	mov	sp, r7
   21d7a:	b004      	add	sp, #16
   21d7c:	bd80      	pop	{r7, pc}
   21d7e:	46c0      	nop			; (mov r8, r8)
   21d80:	00023d55 	.word	0x00023d55

00021d84 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   21d84:	b580      	push	{r7, lr}
   21d86:	b086      	sub	sp, #24
   21d88:	af00      	add	r7, sp, #0
   21d8a:	60f8      	str	r0, [r7, #12]
   21d8c:	60b9      	str	r1, [r7, #8]
   21d8e:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   21d90:	4b2d      	ldr	r3, [pc, #180]	; (21e48 <nm_read_block+0xc4>)
   21d92:	881a      	ldrh	r2, [r3, #0]
   21d94:	2310      	movs	r3, #16
   21d96:	18fb      	adds	r3, r7, r3
   21d98:	3a08      	subs	r2, #8
   21d9a:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   21d9c:	2300      	movs	r3, #0
   21d9e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   21da0:	2313      	movs	r3, #19
   21da2:	18fb      	adds	r3, r7, r3
   21da4:	2200      	movs	r2, #0
   21da6:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   21da8:	2310      	movs	r3, #16
   21daa:	18fb      	adds	r3, r7, r3
   21dac:	881a      	ldrh	r2, [r3, #0]
   21dae:	687b      	ldr	r3, [r7, #4]
   21db0:	429a      	cmp	r2, r3
   21db2:	d313      	bcc.n	21ddc <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   21db4:	68ba      	ldr	r2, [r7, #8]
   21db6:	697b      	ldr	r3, [r7, #20]
   21db8:	18d1      	adds	r1, r2, r3
   21dba:	687b      	ldr	r3, [r7, #4]
   21dbc:	b29a      	uxth	r2, r3
   21dbe:	68fb      	ldr	r3, [r7, #12]
   21dc0:	0018      	movs	r0, r3
   21dc2:	4b22      	ldr	r3, [pc, #136]	; (21e4c <nm_read_block+0xc8>)
   21dc4:	4798      	blx	r3
   21dc6:	0003      	movs	r3, r0
   21dc8:	b2da      	uxtb	r2, r3
   21dca:	2313      	movs	r3, #19
   21dcc:	18fb      	adds	r3, r7, r3
   21dce:	781b      	ldrb	r3, [r3, #0]
   21dd0:	18d3      	adds	r3, r2, r3
   21dd2:	b2da      	uxtb	r2, r3
   21dd4:	2313      	movs	r3, #19
   21dd6:	18fb      	adds	r3, r7, r3
   21dd8:	701a      	strb	r2, [r3, #0]
			break;
   21dda:	e02d      	b.n	21e38 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   21ddc:	68ba      	ldr	r2, [r7, #8]
   21dde:	697b      	ldr	r3, [r7, #20]
   21de0:	18d1      	adds	r1, r2, r3
   21de2:	2310      	movs	r3, #16
   21de4:	18fb      	adds	r3, r7, r3
   21de6:	881a      	ldrh	r2, [r3, #0]
   21de8:	68fb      	ldr	r3, [r7, #12]
   21dea:	0018      	movs	r0, r3
   21dec:	4b17      	ldr	r3, [pc, #92]	; (21e4c <nm_read_block+0xc8>)
   21dee:	4798      	blx	r3
   21df0:	0003      	movs	r3, r0
   21df2:	b2da      	uxtb	r2, r3
   21df4:	2313      	movs	r3, #19
   21df6:	18fb      	adds	r3, r7, r3
   21df8:	781b      	ldrb	r3, [r3, #0]
   21dfa:	18d3      	adds	r3, r2, r3
   21dfc:	b2da      	uxtb	r2, r3
   21dfe:	2313      	movs	r3, #19
   21e00:	18fb      	adds	r3, r7, r3
   21e02:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   21e04:	2313      	movs	r3, #19
   21e06:	18fb      	adds	r3, r7, r3
   21e08:	781b      	ldrb	r3, [r3, #0]
   21e0a:	b25b      	sxtb	r3, r3
   21e0c:	2b00      	cmp	r3, #0
   21e0e:	d112      	bne.n	21e36 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   21e10:	2310      	movs	r3, #16
   21e12:	18fb      	adds	r3, r7, r3
   21e14:	881b      	ldrh	r3, [r3, #0]
   21e16:	687a      	ldr	r2, [r7, #4]
   21e18:	1ad3      	subs	r3, r2, r3
   21e1a:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   21e1c:	2310      	movs	r3, #16
   21e1e:	18fb      	adds	r3, r7, r3
   21e20:	881b      	ldrh	r3, [r3, #0]
   21e22:	697a      	ldr	r2, [r7, #20]
   21e24:	18d3      	adds	r3, r2, r3
   21e26:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   21e28:	2310      	movs	r3, #16
   21e2a:	18fb      	adds	r3, r7, r3
   21e2c:	881b      	ldrh	r3, [r3, #0]
   21e2e:	68fa      	ldr	r2, [r7, #12]
   21e30:	18d3      	adds	r3, r2, r3
   21e32:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   21e34:	e7b8      	b.n	21da8 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   21e36:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   21e38:	2313      	movs	r3, #19
   21e3a:	18fb      	adds	r3, r7, r3
   21e3c:	781b      	ldrb	r3, [r3, #0]
   21e3e:	b25b      	sxtb	r3, r3
}
   21e40:	0018      	movs	r0, r3
   21e42:	46bd      	mov	sp, r7
   21e44:	b006      	add	sp, #24
   21e46:	bd80      	pop	{r7, pc}
   21e48:	20000114 	.word	0x20000114
   21e4c:	00021d59 	.word	0x00021d59

00021e50 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   21e50:	b580      	push	{r7, lr}
   21e52:	b084      	sub	sp, #16
   21e54:	af00      	add	r7, sp, #0
   21e56:	60f8      	str	r0, [r7, #12]
   21e58:	60b9      	str	r1, [r7, #8]
   21e5a:	1dbb      	adds	r3, r7, #6
   21e5c:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   21e5e:	1dbb      	adds	r3, r7, #6
   21e60:	881a      	ldrh	r2, [r3, #0]
   21e62:	68b9      	ldr	r1, [r7, #8]
   21e64:	68fb      	ldr	r3, [r7, #12]
   21e66:	0018      	movs	r0, r3
   21e68:	4b03      	ldr	r3, [pc, #12]	; (21e78 <p_nm_write_block+0x28>)
   21e6a:	4798      	blx	r3
   21e6c:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   21e6e:	0018      	movs	r0, r3
   21e70:	46bd      	mov	sp, r7
   21e72:	b004      	add	sp, #16
   21e74:	bd80      	pop	{r7, pc}
   21e76:	46c0      	nop			; (mov r8, r8)
   21e78:	00023dad 	.word	0x00023dad

00021e7c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   21e7c:	b580      	push	{r7, lr}
   21e7e:	b086      	sub	sp, #24
   21e80:	af00      	add	r7, sp, #0
   21e82:	60f8      	str	r0, [r7, #12]
   21e84:	60b9      	str	r1, [r7, #8]
   21e86:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   21e88:	4b2d      	ldr	r3, [pc, #180]	; (21f40 <nm_write_block+0xc4>)
   21e8a:	881a      	ldrh	r2, [r3, #0]
   21e8c:	2310      	movs	r3, #16
   21e8e:	18fb      	adds	r3, r7, r3
   21e90:	3a08      	subs	r2, #8
   21e92:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   21e94:	2300      	movs	r3, #0
   21e96:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   21e98:	2313      	movs	r3, #19
   21e9a:	18fb      	adds	r3, r7, r3
   21e9c:	2200      	movs	r2, #0
   21e9e:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   21ea0:	2310      	movs	r3, #16
   21ea2:	18fb      	adds	r3, r7, r3
   21ea4:	881a      	ldrh	r2, [r3, #0]
   21ea6:	687b      	ldr	r3, [r7, #4]
   21ea8:	429a      	cmp	r2, r3
   21eaa:	d313      	bcc.n	21ed4 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   21eac:	68ba      	ldr	r2, [r7, #8]
   21eae:	697b      	ldr	r3, [r7, #20]
   21eb0:	18d1      	adds	r1, r2, r3
   21eb2:	687b      	ldr	r3, [r7, #4]
   21eb4:	b29a      	uxth	r2, r3
   21eb6:	68fb      	ldr	r3, [r7, #12]
   21eb8:	0018      	movs	r0, r3
   21eba:	4b22      	ldr	r3, [pc, #136]	; (21f44 <nm_write_block+0xc8>)
   21ebc:	4798      	blx	r3
   21ebe:	0003      	movs	r3, r0
   21ec0:	b2da      	uxtb	r2, r3
   21ec2:	2313      	movs	r3, #19
   21ec4:	18fb      	adds	r3, r7, r3
   21ec6:	781b      	ldrb	r3, [r3, #0]
   21ec8:	18d3      	adds	r3, r2, r3
   21eca:	b2da      	uxtb	r2, r3
   21ecc:	2313      	movs	r3, #19
   21ece:	18fb      	adds	r3, r7, r3
   21ed0:	701a      	strb	r2, [r3, #0]
			break;
   21ed2:	e02d      	b.n	21f30 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   21ed4:	68ba      	ldr	r2, [r7, #8]
   21ed6:	697b      	ldr	r3, [r7, #20]
   21ed8:	18d1      	adds	r1, r2, r3
   21eda:	2310      	movs	r3, #16
   21edc:	18fb      	adds	r3, r7, r3
   21ede:	881a      	ldrh	r2, [r3, #0]
   21ee0:	68fb      	ldr	r3, [r7, #12]
   21ee2:	0018      	movs	r0, r3
   21ee4:	4b17      	ldr	r3, [pc, #92]	; (21f44 <nm_write_block+0xc8>)
   21ee6:	4798      	blx	r3
   21ee8:	0003      	movs	r3, r0
   21eea:	b2da      	uxtb	r2, r3
   21eec:	2313      	movs	r3, #19
   21eee:	18fb      	adds	r3, r7, r3
   21ef0:	781b      	ldrb	r3, [r3, #0]
   21ef2:	18d3      	adds	r3, r2, r3
   21ef4:	b2da      	uxtb	r2, r3
   21ef6:	2313      	movs	r3, #19
   21ef8:	18fb      	adds	r3, r7, r3
   21efa:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   21efc:	2313      	movs	r3, #19
   21efe:	18fb      	adds	r3, r7, r3
   21f00:	781b      	ldrb	r3, [r3, #0]
   21f02:	b25b      	sxtb	r3, r3
   21f04:	2b00      	cmp	r3, #0
   21f06:	d112      	bne.n	21f2e <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   21f08:	2310      	movs	r3, #16
   21f0a:	18fb      	adds	r3, r7, r3
   21f0c:	881b      	ldrh	r3, [r3, #0]
   21f0e:	687a      	ldr	r2, [r7, #4]
   21f10:	1ad3      	subs	r3, r2, r3
   21f12:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   21f14:	2310      	movs	r3, #16
   21f16:	18fb      	adds	r3, r7, r3
   21f18:	881b      	ldrh	r3, [r3, #0]
   21f1a:	697a      	ldr	r2, [r7, #20]
   21f1c:	18d3      	adds	r3, r2, r3
   21f1e:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   21f20:	2310      	movs	r3, #16
   21f22:	18fb      	adds	r3, r7, r3
   21f24:	881b      	ldrh	r3, [r3, #0]
   21f26:	68fa      	ldr	r2, [r7, #12]
   21f28:	18d3      	adds	r3, r2, r3
   21f2a:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   21f2c:	e7b8      	b.n	21ea0 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   21f2e:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   21f30:	2313      	movs	r3, #19
   21f32:	18fb      	adds	r3, r7, r3
   21f34:	781b      	ldrb	r3, [r3, #0]
   21f36:	b25b      	sxtb	r3, r3
}
   21f38:	0018      	movs	r0, r3
   21f3a:	46bd      	mov	sp, r7
   21f3c:	b006      	add	sp, #24
   21f3e:	bd80      	pop	{r7, pc}
   21f40:	20000114 	.word	0x20000114
   21f44:	00021e51 	.word	0x00021e51

00021f48 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   21f48:	b590      	push	{r4, r7, lr}
   21f4a:	b089      	sub	sp, #36	; 0x24
   21f4c:	af00      	add	r7, sp, #0
   21f4e:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   21f50:	2300      	movs	r3, #0
   21f52:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   21f54:	231f      	movs	r3, #31
   21f56:	18fb      	adds	r3, r7, r3
   21f58:	2200      	movs	r2, #0
   21f5a:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   21f5c:	230c      	movs	r3, #12
   21f5e:	18fb      	adds	r3, r7, r3
   21f60:	0018      	movs	r0, r3
   21f62:	2308      	movs	r3, #8
   21f64:	001a      	movs	r2, r3
   21f66:	2100      	movs	r1, #0
   21f68:	4b64      	ldr	r3, [pc, #400]	; (220fc <nm_get_firmware_full_info+0x1b4>)
   21f6a:	4798      	blx	r3
	if (pstrRev != NULL)
   21f6c:	687b      	ldr	r3, [r7, #4]
   21f6e:	2b00      	cmp	r3, #0
   21f70:	d100      	bne.n	21f74 <nm_get_firmware_full_info+0x2c>
   21f72:	e0ba      	b.n	220ea <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   21f74:	687b      	ldr	r3, [r7, #4]
   21f76:	2228      	movs	r2, #40	; 0x28
   21f78:	2100      	movs	r1, #0
   21f7a:	0018      	movs	r0, r3
   21f7c:	4b60      	ldr	r3, [pc, #384]	; (22100 <nm_get_firmware_full_info+0x1b8>)
   21f7e:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   21f80:	231f      	movs	r3, #31
   21f82:	18fc      	adds	r4, r7, r3
   21f84:	2314      	movs	r3, #20
   21f86:	18fb      	adds	r3, r7, r3
   21f88:	4a5e      	ldr	r2, [pc, #376]	; (22104 <nm_get_firmware_full_info+0x1bc>)
   21f8a:	0019      	movs	r1, r3
   21f8c:	0010      	movs	r0, r2
   21f8e:	4b5e      	ldr	r3, [pc, #376]	; (22108 <nm_get_firmware_full_info+0x1c0>)
   21f90:	4798      	blx	r3
   21f92:	0003      	movs	r3, r0
   21f94:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   21f96:	231f      	movs	r3, #31
   21f98:	18fb      	adds	r3, r7, r3
   21f9a:	781b      	ldrb	r3, [r3, #0]
   21f9c:	b25b      	sxtb	r3, r3
   21f9e:	2b00      	cmp	r3, #0
   21fa0:	d000      	beq.n	21fa4 <nm_get_firmware_full_info+0x5c>
   21fa2:	e0a2      	b.n	220ea <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   21fa4:	697b      	ldr	r3, [r7, #20]
   21fa6:	2b00      	cmp	r3, #0
   21fa8:	d100      	bne.n	21fac <nm_get_firmware_full_info+0x64>
   21faa:	e09a      	b.n	220e2 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   21fac:	697b      	ldr	r3, [r7, #20]
   21fae:	22c0      	movs	r2, #192	; 0xc0
   21fb0:	0292      	lsls	r2, r2, #10
   21fb2:	4313      	orrs	r3, r2
   21fb4:	221f      	movs	r2, #31
   21fb6:	18bc      	adds	r4, r7, r2
   21fb8:	220c      	movs	r2, #12
   21fba:	18b9      	adds	r1, r7, r2
   21fbc:	2208      	movs	r2, #8
   21fbe:	0018      	movs	r0, r3
   21fc0:	4b52      	ldr	r3, [pc, #328]	; (2210c <nm_get_firmware_full_info+0x1c4>)
   21fc2:	4798      	blx	r3
   21fc4:	0003      	movs	r3, r0
   21fc6:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   21fc8:	231f      	movs	r3, #31
   21fca:	18fb      	adds	r3, r7, r3
   21fcc:	781b      	ldrb	r3, [r3, #0]
   21fce:	b25b      	sxtb	r3, r3
   21fd0:	2b00      	cmp	r3, #0
   21fd2:	d000      	beq.n	21fd6 <nm_get_firmware_full_info+0x8e>
   21fd4:	e089      	b.n	220ea <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   21fd6:	230c      	movs	r3, #12
   21fd8:	18fb      	adds	r3, r7, r3
   21fda:	685b      	ldr	r3, [r3, #4]
   21fdc:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   21fde:	697b      	ldr	r3, [r7, #20]
   21fe0:	041b      	lsls	r3, r3, #16
   21fe2:	0c1b      	lsrs	r3, r3, #16
   21fe4:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   21fe6:	697b      	ldr	r3, [r7, #20]
   21fe8:	2b00      	cmp	r3, #0
   21fea:	d100      	bne.n	21fee <nm_get_firmware_full_info+0xa6>
   21fec:	e074      	b.n	220d8 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   21fee:	697b      	ldr	r3, [r7, #20]
   21ff0:	22c0      	movs	r2, #192	; 0xc0
   21ff2:	0292      	lsls	r2, r2, #10
   21ff4:	4313      	orrs	r3, r2
   21ff6:	221f      	movs	r2, #31
   21ff8:	18bc      	adds	r4, r7, r2
   21ffa:	6879      	ldr	r1, [r7, #4]
   21ffc:	2228      	movs	r2, #40	; 0x28
   21ffe:	0018      	movs	r0, r3
   22000:	4b42      	ldr	r3, [pc, #264]	; (2210c <nm_get_firmware_full_info+0x1c4>)
   22002:	4798      	blx	r3
   22004:	0003      	movs	r3, r0
   22006:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   22008:	231f      	movs	r3, #31
   2200a:	18fb      	adds	r3, r7, r3
   2200c:	781b      	ldrb	r3, [r3, #0]
   2200e:	b25b      	sxtb	r3, r3
   22010:	2b00      	cmp	r3, #0
   22012:	d16a      	bne.n	220ea <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   22014:	687b      	ldr	r3, [r7, #4]
   22016:	791b      	ldrb	r3, [r3, #4]
   22018:	021b      	lsls	r3, r3, #8
   2201a:	b21a      	sxth	r2, r3
   2201c:	687b      	ldr	r3, [r7, #4]
   2201e:	795b      	ldrb	r3, [r3, #5]
   22020:	011b      	lsls	r3, r3, #4
   22022:	b21b      	sxth	r3, r3
   22024:	21ff      	movs	r1, #255	; 0xff
   22026:	400b      	ands	r3, r1
   22028:	b21b      	sxth	r3, r3
   2202a:	4313      	orrs	r3, r2
   2202c:	b21a      	sxth	r2, r3
   2202e:	687b      	ldr	r3, [r7, #4]
   22030:	799b      	ldrb	r3, [r3, #6]
   22032:	b21b      	sxth	r3, r3
   22034:	210f      	movs	r1, #15
   22036:	400b      	ands	r3, r1
   22038:	b21b      	sxth	r3, r3
   2203a:	4313      	orrs	r3, r2
   2203c:	b21a      	sxth	r2, r3
   2203e:	231c      	movs	r3, #28
   22040:	18fb      	adds	r3, r7, r3
   22042:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   22044:	231a      	movs	r3, #26
   22046:	18fb      	adds	r3, r7, r3
   22048:	4a31      	ldr	r2, [pc, #196]	; (22110 <nm_get_firmware_full_info+0x1c8>)
   2204a:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   2204c:	687b      	ldr	r3, [r7, #4]
   2204e:	79db      	ldrb	r3, [r3, #7]
   22050:	021b      	lsls	r3, r3, #8
   22052:	b21a      	sxth	r2, r3
   22054:	687b      	ldr	r3, [r7, #4]
   22056:	7a1b      	ldrb	r3, [r3, #8]
   22058:	011b      	lsls	r3, r3, #4
   2205a:	b21b      	sxth	r3, r3
   2205c:	21ff      	movs	r1, #255	; 0xff
   2205e:	400b      	ands	r3, r1
   22060:	b21b      	sxth	r3, r3
   22062:	4313      	orrs	r3, r2
   22064:	b21a      	sxth	r2, r3
   22066:	687b      	ldr	r3, [r7, #4]
   22068:	7a5b      	ldrb	r3, [r3, #9]
   2206a:	b21b      	sxth	r3, r3
   2206c:	210f      	movs	r1, #15
   2206e:	400b      	ands	r3, r1
   22070:	b21b      	sxth	r3, r3
   22072:	4313      	orrs	r3, r2
   22074:	b21a      	sxth	r2, r3
   22076:	2318      	movs	r3, #24
   22078:	18fb      	adds	r3, r7, r3
   2207a:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   2207c:	231c      	movs	r3, #28
   2207e:	18fb      	adds	r3, r7, r3
   22080:	881b      	ldrh	r3, [r3, #0]
   22082:	2b00      	cmp	r3, #0
   22084:	d009      	beq.n	2209a <nm_get_firmware_full_info+0x152>
   22086:	2318      	movs	r3, #24
   22088:	18fb      	adds	r3, r7, r3
   2208a:	881b      	ldrh	r3, [r3, #0]
   2208c:	2b00      	cmp	r3, #0
   2208e:	d004      	beq.n	2209a <nm_get_firmware_full_info+0x152>
   22090:	2318      	movs	r3, #24
   22092:	18fb      	adds	r3, r7, r3
   22094:	881b      	ldrh	r3, [r3, #0]
   22096:	2b00      	cmp	r3, #0
   22098:	d104      	bne.n	220a4 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   2209a:	231f      	movs	r3, #31
   2209c:	18fb      	adds	r3, r7, r3
   2209e:	22f4      	movs	r2, #244	; 0xf4
   220a0:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   220a2:	e022      	b.n	220ea <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   220a4:	231a      	movs	r3, #26
   220a6:	18fa      	adds	r2, r7, r3
   220a8:	2318      	movs	r3, #24
   220aa:	18fb      	adds	r3, r7, r3
   220ac:	8812      	ldrh	r2, [r2, #0]
   220ae:	881b      	ldrh	r3, [r3, #0]
   220b0:	429a      	cmp	r2, r3
   220b2:	d204      	bcs.n	220be <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   220b4:	231f      	movs	r3, #31
   220b6:	18fb      	adds	r3, r7, r3
   220b8:	22f3      	movs	r2, #243	; 0xf3
   220ba:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   220bc:	e015      	b.n	220ea <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   220be:	231a      	movs	r3, #26
   220c0:	18fa      	adds	r2, r7, r3
   220c2:	231c      	movs	r3, #28
   220c4:	18fb      	adds	r3, r7, r3
   220c6:	8812      	ldrh	r2, [r2, #0]
   220c8:	881b      	ldrh	r3, [r3, #0]
   220ca:	429a      	cmp	r2, r3
   220cc:	d90d      	bls.n	220ea <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   220ce:	231f      	movs	r3, #31
   220d0:	18fb      	adds	r3, r7, r3
   220d2:	22f3      	movs	r2, #243	; 0xf3
   220d4:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   220d6:	e008      	b.n	220ea <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   220d8:	231f      	movs	r3, #31
   220da:	18fb      	adds	r3, r7, r3
   220dc:	22f4      	movs	r2, #244	; 0xf4
   220de:	701a      	strb	r2, [r3, #0]
   220e0:	e003      	b.n	220ea <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   220e2:	231f      	movs	r3, #31
   220e4:	18fb      	adds	r3, r7, r3
   220e6:	22f4      	movs	r2, #244	; 0xf4
   220e8:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   220ea:	231f      	movs	r3, #31
   220ec:	18fb      	adds	r3, r7, r3
   220ee:	781b      	ldrb	r3, [r3, #0]
   220f0:	b25b      	sxtb	r3, r3
}
   220f2:	0018      	movs	r0, r3
   220f4:	46bd      	mov	sp, r7
   220f6:	b009      	add	sp, #36	; 0x24
   220f8:	bd90      	pop	{r4, r7, pc}
   220fa:	46c0      	nop			; (mov r8, r8)
   220fc:	0003457f 	.word	0x0003457f
   22100:	0001fc81 	.word	0x0001fc81
   22104:	000c0008 	.word	0x000c0008
   22108:	00021d11 	.word	0x00021d11
   2210c:	00021d85 	.word	0x00021d85
   22110:	00001354 	.word	0x00001354

00022114 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   22114:	b590      	push	{r4, r7, lr}
   22116:	b085      	sub	sp, #20
   22118:	af00      	add	r7, sp, #0
   2211a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   2211c:	230f      	movs	r3, #15
   2211e:	18fb      	adds	r3, r7, r3
   22120:	2200      	movs	r2, #0
   22122:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   22124:	687b      	ldr	r3, [r7, #4]
   22126:	2b00      	cmp	r3, #0
   22128:	d013      	beq.n	22152 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   2212a:	230e      	movs	r3, #14
   2212c:	18fb      	adds	r3, r7, r3
   2212e:	687a      	ldr	r2, [r7, #4]
   22130:	7812      	ldrb	r2, [r2, #0]
   22132:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   22134:	230e      	movs	r3, #14
   22136:	18fb      	adds	r3, r7, r3
   22138:	781b      	ldrb	r3, [r3, #0]
   2213a:	2b00      	cmp	r3, #0
   2213c:	d004      	beq.n	22148 <nm_drv_init+0x34>
   2213e:	230e      	movs	r3, #14
   22140:	18fb      	adds	r3, r7, r3
   22142:	781b      	ldrb	r3, [r3, #0]
   22144:	2b04      	cmp	r3, #4
   22146:	d908      	bls.n	2215a <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   22148:	230e      	movs	r3, #14
   2214a:	18fb      	adds	r3, r7, r3
   2214c:	2201      	movs	r2, #1
   2214e:	701a      	strb	r2, [r3, #0]
   22150:	e003      	b.n	2215a <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   22152:	230e      	movs	r3, #14
   22154:	18fb      	adds	r3, r7, r3
   22156:	2201      	movs	r2, #1
   22158:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   2215a:	230f      	movs	r3, #15
   2215c:	18fc      	adds	r4, r7, r3
   2215e:	2000      	movs	r0, #0
   22160:	4b41      	ldr	r3, [pc, #260]	; (22268 <nm_drv_init+0x154>)
   22162:	4798      	blx	r3
   22164:	0003      	movs	r3, r0
   22166:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22168:	230f      	movs	r3, #15
   2216a:	18fb      	adds	r3, r7, r3
   2216c:	781b      	ldrb	r3, [r3, #0]
   2216e:	b25b      	sxtb	r3, r3
   22170:	2b00      	cmp	r3, #0
   22172:	d00f      	beq.n	22194 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   22174:	2390      	movs	r3, #144	; 0x90
   22176:	005a      	lsls	r2, r3, #1
   22178:	493c      	ldr	r1, [pc, #240]	; (2226c <nm_drv_init+0x158>)
   2217a:	4b3d      	ldr	r3, [pc, #244]	; (22270 <nm_drv_init+0x15c>)
   2217c:	0018      	movs	r0, r3
   2217e:	4b3d      	ldr	r3, [pc, #244]	; (22274 <nm_drv_init+0x160>)
   22180:	4798      	blx	r3
   22182:	4b3d      	ldr	r3, [pc, #244]	; (22278 <nm_drv_init+0x164>)
   22184:	0018      	movs	r0, r3
   22186:	4b3b      	ldr	r3, [pc, #236]	; (22274 <nm_drv_init+0x160>)
   22188:	4798      	blx	r3
   2218a:	4b3c      	ldr	r3, [pc, #240]	; (2227c <nm_drv_init+0x168>)
   2218c:	0018      	movs	r0, r3
   2218e:	4b39      	ldr	r3, [pc, #228]	; (22274 <nm_drv_init+0x160>)
   22190:	4798      	blx	r3
		goto ERR1;
   22192:	e061      	b.n	22258 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   22194:	4b3a      	ldr	r3, [pc, #232]	; (22280 <nm_drv_init+0x16c>)
   22196:	0018      	movs	r0, r3
   22198:	4b36      	ldr	r3, [pc, #216]	; (22274 <nm_drv_init+0x160>)
   2219a:	4798      	blx	r3
   2219c:	4b39      	ldr	r3, [pc, #228]	; (22284 <nm_drv_init+0x170>)
   2219e:	4798      	blx	r3
   221a0:	0002      	movs	r2, r0
   221a2:	4b39      	ldr	r3, [pc, #228]	; (22288 <nm_drv_init+0x174>)
   221a4:	0011      	movs	r1, r2
   221a6:	0018      	movs	r0, r3
   221a8:	4b32      	ldr	r3, [pc, #200]	; (22274 <nm_drv_init+0x160>)
   221aa:	4798      	blx	r3
   221ac:	4b33      	ldr	r3, [pc, #204]	; (2227c <nm_drv_init+0x168>)
   221ae:	0018      	movs	r0, r3
   221b0:	4b30      	ldr	r3, [pc, #192]	; (22274 <nm_drv_init+0x160>)
   221b2:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   221b4:	4b35      	ldr	r3, [pc, #212]	; (2228c <nm_drv_init+0x178>)
   221b6:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   221b8:	230f      	movs	r3, #15
   221ba:	18fc      	adds	r4, r7, r3
   221bc:	230e      	movs	r3, #14
   221be:	18fb      	adds	r3, r7, r3
   221c0:	781b      	ldrb	r3, [r3, #0]
   221c2:	0018      	movs	r0, r3
   221c4:	4b32      	ldr	r3, [pc, #200]	; (22290 <nm_drv_init+0x17c>)
   221c6:	4798      	blx	r3
   221c8:	0003      	movs	r3, r0
   221ca:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   221cc:	230f      	movs	r3, #15
   221ce:	18fb      	adds	r3, r7, r3
   221d0:	781b      	ldrb	r3, [r3, #0]
   221d2:	b25b      	sxtb	r3, r3
   221d4:	2b00      	cmp	r3, #0
   221d6:	d13a      	bne.n	2224e <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   221d8:	230f      	movs	r3, #15
   221da:	18fc      	adds	r4, r7, r3
   221dc:	230e      	movs	r3, #14
   221de:	18fb      	adds	r3, r7, r3
   221e0:	781b      	ldrb	r3, [r3, #0]
   221e2:	0018      	movs	r0, r3
   221e4:	4b2b      	ldr	r3, [pc, #172]	; (22294 <nm_drv_init+0x180>)
   221e6:	4798      	blx	r3
   221e8:	0003      	movs	r3, r0
   221ea:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   221ec:	230f      	movs	r3, #15
   221ee:	18fb      	adds	r3, r7, r3
   221f0:	781b      	ldrb	r3, [r3, #0]
   221f2:	b25b      	sxtb	r3, r3
   221f4:	2b00      	cmp	r3, #0
   221f6:	d12c      	bne.n	22252 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   221f8:	230e      	movs	r3, #14
   221fa:	18fb      	adds	r3, r7, r3
   221fc:	781b      	ldrb	r3, [r3, #0]
   221fe:	2b02      	cmp	r3, #2
   22200:	d02a      	beq.n	22258 <nm_drv_init+0x144>
   22202:	230e      	movs	r3, #14
   22204:	18fb      	adds	r3, r7, r3
   22206:	781b      	ldrb	r3, [r3, #0]
   22208:	2b03      	cmp	r3, #3
   2220a:	d025      	beq.n	22258 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   2220c:	230f      	movs	r3, #15
   2220e:	18fc      	adds	r4, r7, r3
   22210:	4b21      	ldr	r3, [pc, #132]	; (22298 <nm_drv_init+0x184>)
   22212:	4798      	blx	r3
   22214:	0003      	movs	r3, r0
   22216:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22218:	230f      	movs	r3, #15
   2221a:	18fb      	adds	r3, r7, r3
   2221c:	781b      	ldrb	r3, [r3, #0]
   2221e:	b25b      	sxtb	r3, r3
   22220:	2b00      	cmp	r3, #0
   22222:	d00f      	beq.n	22244 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   22224:	23a7      	movs	r3, #167	; 0xa7
   22226:	005a      	lsls	r2, r3, #1
   22228:	4910      	ldr	r1, [pc, #64]	; (2226c <nm_drv_init+0x158>)
   2222a:	4b11      	ldr	r3, [pc, #68]	; (22270 <nm_drv_init+0x15c>)
   2222c:	0018      	movs	r0, r3
   2222e:	4b11      	ldr	r3, [pc, #68]	; (22274 <nm_drv_init+0x160>)
   22230:	4798      	blx	r3
   22232:	4b1a      	ldr	r3, [pc, #104]	; (2229c <nm_drv_init+0x188>)
   22234:	0018      	movs	r0, r3
   22236:	4b0f      	ldr	r3, [pc, #60]	; (22274 <nm_drv_init+0x160>)
   22238:	4798      	blx	r3
   2223a:	4b10      	ldr	r3, [pc, #64]	; (2227c <nm_drv_init+0x168>)
   2223c:	0018      	movs	r0, r3
   2223e:	4b0d      	ldr	r3, [pc, #52]	; (22274 <nm_drv_init+0x160>)
   22240:	4798      	blx	r3
		goto ERR2;
   22242:	e007      	b.n	22254 <nm_drv_init+0x140>
	}
	return ret;
   22244:	230f      	movs	r3, #15
   22246:	18fb      	adds	r3, r7, r3
   22248:	781b      	ldrb	r3, [r3, #0]
   2224a:	b25b      	sxtb	r3, r3
   2224c:	e008      	b.n	22260 <nm_drv_init+0x14c>
		goto ERR2;
   2224e:	46c0      	nop			; (mov r8, r8)
   22250:	e000      	b.n	22254 <nm_drv_init+0x140>
		goto ERR2;
   22252:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   22254:	4b12      	ldr	r3, [pc, #72]	; (222a0 <nm_drv_init+0x18c>)
   22256:	4798      	blx	r3
ERR1:
	return ret;
   22258:	230f      	movs	r3, #15
   2225a:	18fb      	adds	r3, r7, r3
   2225c:	781b      	ldrb	r3, [r3, #0]
   2225e:	b25b      	sxtb	r3, r3
}
   22260:	0018      	movs	r0, r3
   22262:	46bd      	mov	sp, r7
   22264:	b005      	add	sp, #20
   22266:	bd90      	pop	{r4, r7, pc}
   22268:	00021c75 	.word	0x00021c75
   2226c:	00038668 	.word	0x00038668
   22270:	00038598 	.word	0x00038598
   22274:	0001cee9 	.word	0x0001cee9
   22278:	000385ac 	.word	0x000385ac
   2227c:	000385c8 	.word	0x000385c8
   22280:	000385cc 	.word	0x000385cc
   22284:	00021611 	.word	0x00021611
   22288:	000385d8 	.word	0x000385d8
   2228c:	00023b2d 	.word	0x00023b2d
   22290:	00021969 	.word	0x00021969
   22294:	00021b01 	.word	0x00021b01
   22298:	0002155d 	.word	0x0002155d
   2229c:	000385e8 	.word	0x000385e8
   222a0:	00021ca9 	.word	0x00021ca9

000222a4 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   222a4:	b590      	push	{r4, r7, lr}
   222a6:	b085      	sub	sp, #20
   222a8:	af00      	add	r7, sp, #0
   222aa:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   222ac:	230f      	movs	r3, #15
   222ae:	18fc      	adds	r4, r7, r3
   222b0:	4b2e      	ldr	r3, [pc, #184]	; (2236c <nm_drv_deinit+0xc8>)
   222b2:	4798      	blx	r3
   222b4:	0003      	movs	r3, r0
   222b6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   222b8:	230f      	movs	r3, #15
   222ba:	18fb      	adds	r3, r7, r3
   222bc:	781b      	ldrb	r3, [r3, #0]
   222be:	b25b      	sxtb	r3, r3
   222c0:	2b00      	cmp	r3, #0
   222c2:	d010      	beq.n	222e6 <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   222c4:	2366      	movs	r3, #102	; 0x66
   222c6:	33ff      	adds	r3, #255	; 0xff
   222c8:	001a      	movs	r2, r3
   222ca:	4929      	ldr	r1, [pc, #164]	; (22370 <nm_drv_deinit+0xcc>)
   222cc:	4b29      	ldr	r3, [pc, #164]	; (22374 <nm_drv_deinit+0xd0>)
   222ce:	0018      	movs	r0, r3
   222d0:	4b29      	ldr	r3, [pc, #164]	; (22378 <nm_drv_deinit+0xd4>)
   222d2:	4798      	blx	r3
   222d4:	4b29      	ldr	r3, [pc, #164]	; (2237c <nm_drv_deinit+0xd8>)
   222d6:	0018      	movs	r0, r3
   222d8:	4b27      	ldr	r3, [pc, #156]	; (22378 <nm_drv_deinit+0xd4>)
   222da:	4798      	blx	r3
   222dc:	4b28      	ldr	r3, [pc, #160]	; (22380 <nm_drv_deinit+0xdc>)
   222de:	0018      	movs	r0, r3
   222e0:	4b25      	ldr	r3, [pc, #148]	; (22378 <nm_drv_deinit+0xd4>)
   222e2:	4798      	blx	r3
		goto ERR1;
   222e4:	e03a      	b.n	2235c <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   222e6:	230f      	movs	r3, #15
   222e8:	18fc      	adds	r4, r7, r3
   222ea:	2000      	movs	r0, #0
   222ec:	4b25      	ldr	r3, [pc, #148]	; (22384 <nm_drv_deinit+0xe0>)
   222ee:	4798      	blx	r3
   222f0:	0003      	movs	r3, r0
   222f2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   222f4:	230f      	movs	r3, #15
   222f6:	18fb      	adds	r3, r7, r3
   222f8:	781b      	ldrb	r3, [r3, #0]
   222fa:	b25b      	sxtb	r3, r3
   222fc:	2b00      	cmp	r3, #0
   222fe:	d00f      	beq.n	22320 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   22300:	23b6      	movs	r3, #182	; 0xb6
   22302:	005a      	lsls	r2, r3, #1
   22304:	491a      	ldr	r1, [pc, #104]	; (22370 <nm_drv_deinit+0xcc>)
   22306:	4b1b      	ldr	r3, [pc, #108]	; (22374 <nm_drv_deinit+0xd0>)
   22308:	0018      	movs	r0, r3
   2230a:	4b1b      	ldr	r3, [pc, #108]	; (22378 <nm_drv_deinit+0xd4>)
   2230c:	4798      	blx	r3
   2230e:	4b1e      	ldr	r3, [pc, #120]	; (22388 <nm_drv_deinit+0xe4>)
   22310:	0018      	movs	r0, r3
   22312:	4b19      	ldr	r3, [pc, #100]	; (22378 <nm_drv_deinit+0xd4>)
   22314:	4798      	blx	r3
   22316:	4b1a      	ldr	r3, [pc, #104]	; (22380 <nm_drv_deinit+0xdc>)
   22318:	0018      	movs	r0, r3
   2231a:	4b17      	ldr	r3, [pc, #92]	; (22378 <nm_drv_deinit+0xd4>)
   2231c:	4798      	blx	r3
		goto ERR1;
   2231e:	e01d      	b.n	2235c <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   22320:	230f      	movs	r3, #15
   22322:	18fc      	adds	r4, r7, r3
   22324:	4b19      	ldr	r3, [pc, #100]	; (2238c <nm_drv_deinit+0xe8>)
   22326:	4798      	blx	r3
   22328:	0003      	movs	r3, r0
   2232a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   2232c:	230f      	movs	r3, #15
   2232e:	18fb      	adds	r3, r7, r3
   22330:	781b      	ldrb	r3, [r3, #0]
   22332:	b25b      	sxtb	r3, r3
   22334:	2b00      	cmp	r3, #0
   22336:	d00f      	beq.n	22358 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   22338:	23b9      	movs	r3, #185	; 0xb9
   2233a:	005a      	lsls	r2, r3, #1
   2233c:	490c      	ldr	r1, [pc, #48]	; (22370 <nm_drv_deinit+0xcc>)
   2233e:	4b0d      	ldr	r3, [pc, #52]	; (22374 <nm_drv_deinit+0xd0>)
   22340:	0018      	movs	r0, r3
   22342:	4b0d      	ldr	r3, [pc, #52]	; (22378 <nm_drv_deinit+0xd4>)
   22344:	4798      	blx	r3
   22346:	4b12      	ldr	r3, [pc, #72]	; (22390 <nm_drv_deinit+0xec>)
   22348:	0018      	movs	r0, r3
   2234a:	4b0b      	ldr	r3, [pc, #44]	; (22378 <nm_drv_deinit+0xd4>)
   2234c:	4798      	blx	r3
   2234e:	4b0c      	ldr	r3, [pc, #48]	; (22380 <nm_drv_deinit+0xdc>)
   22350:	0018      	movs	r0, r3
   22352:	4b09      	ldr	r3, [pc, #36]	; (22378 <nm_drv_deinit+0xd4>)
   22354:	4798      	blx	r3
		goto ERR1;
   22356:	e001      	b.n	2235c <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   22358:	4b0e      	ldr	r3, [pc, #56]	; (22394 <nm_drv_deinit+0xf0>)
   2235a:	4798      	blx	r3
#endif

ERR1:
	return ret;
   2235c:	230f      	movs	r3, #15
   2235e:	18fb      	adds	r3, r7, r3
   22360:	781b      	ldrb	r3, [r3, #0]
   22362:	b25b      	sxtb	r3, r3
}
   22364:	0018      	movs	r0, r3
   22366:	46bd      	mov	sp, r7
   22368:	b005      	add	sp, #20
   2236a:	bd90      	pop	{r4, r7, pc}
   2236c:	00021bb5 	.word	0x00021bb5
   22370:	00038674 	.word	0x00038674
   22374:	00038598 	.word	0x00038598
   22378:	0001cee9 	.word	0x0001cee9
   2237c:	00038608 	.word	0x00038608
   22380:	000385c8 	.word	0x000385c8
   22384:	00024fd5 	.word	0x00024fd5
   22388:	00038628 	.word	0x00038628
   2238c:	00021ca9 	.word	0x00021ca9
   22390:	0003864c 	.word	0x0003864c
   22394:	00023c79 	.word	0x00023c79

00022398 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   22398:	b580      	push	{r7, lr}
   2239a:	b086      	sub	sp, #24
   2239c:	af00      	add	r7, sp, #0
   2239e:	6078      	str	r0, [r7, #4]
   223a0:	000a      	movs	r2, r1
   223a2:	1cbb      	adds	r3, r7, #2
   223a4:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   223a6:	230c      	movs	r3, #12
   223a8:	18fb      	adds	r3, r7, r3
   223aa:	2200      	movs	r2, #0
   223ac:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   223ae:	230c      	movs	r3, #12
   223b0:	18fb      	adds	r3, r7, r3
   223b2:	687a      	ldr	r2, [r7, #4]
   223b4:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   223b6:	230c      	movs	r3, #12
   223b8:	18fb      	adds	r3, r7, r3
   223ba:	1cba      	adds	r2, r7, #2
   223bc:	8812      	ldrh	r2, [r2, #0]
   223be:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   223c0:	230c      	movs	r3, #12
   223c2:	18fb      	adds	r3, r7, r3
   223c4:	0019      	movs	r1, r3
   223c6:	2003      	movs	r0, #3
   223c8:	4b03      	ldr	r3, [pc, #12]	; (223d8 <nmi_spi_read+0x40>)
   223ca:	4798      	blx	r3
   223cc:	0003      	movs	r3, r0
}
   223ce:	0018      	movs	r0, r3
   223d0:	46bd      	mov	sp, r7
   223d2:	b006      	add	sp, #24
   223d4:	bd80      	pop	{r7, pc}
   223d6:	46c0      	nop			; (mov r8, r8)
   223d8:	0001fb45 	.word	0x0001fb45

000223dc <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   223dc:	b580      	push	{r7, lr}
   223de:	b086      	sub	sp, #24
   223e0:	af00      	add	r7, sp, #0
   223e2:	6078      	str	r0, [r7, #4]
   223e4:	000a      	movs	r2, r1
   223e6:	1cbb      	adds	r3, r7, #2
   223e8:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   223ea:	230c      	movs	r3, #12
   223ec:	18fb      	adds	r3, r7, r3
   223ee:	687a      	ldr	r2, [r7, #4]
   223f0:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   223f2:	230c      	movs	r3, #12
   223f4:	18fb      	adds	r3, r7, r3
   223f6:	2200      	movs	r2, #0
   223f8:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   223fa:	230c      	movs	r3, #12
   223fc:	18fb      	adds	r3, r7, r3
   223fe:	1cba      	adds	r2, r7, #2
   22400:	8812      	ldrh	r2, [r2, #0]
   22402:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   22404:	230c      	movs	r3, #12
   22406:	18fb      	adds	r3, r7, r3
   22408:	0019      	movs	r1, r3
   2240a:	2003      	movs	r0, #3
   2240c:	4b03      	ldr	r3, [pc, #12]	; (2241c <nmi_spi_write+0x40>)
   2240e:	4798      	blx	r3
   22410:	0003      	movs	r3, r0
}
   22412:	0018      	movs	r0, r3
   22414:	46bd      	mov	sp, r7
   22416:	b006      	add	sp, #24
   22418:	bd80      	pop	{r7, pc}
   2241a:	46c0      	nop			; (mov r8, r8)
   2241c:	0001fb45 	.word	0x0001fb45

00022420 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   22420:	b580      	push	{r7, lr}
   22422:	b088      	sub	sp, #32
   22424:	af00      	add	r7, sp, #0
   22426:	60f8      	str	r0, [r7, #12]
   22428:	60b9      	str	r1, [r7, #8]
   2242a:	1dbb      	adds	r3, r7, #6
   2242c:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   2242e:	2314      	movs	r3, #20
   22430:	18fb      	adds	r3, r7, r3
   22432:	68fa      	ldr	r2, [r7, #12]
   22434:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   22436:	2314      	movs	r3, #20
   22438:	18fb      	adds	r3, r7, r3
   2243a:	68ba      	ldr	r2, [r7, #8]
   2243c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   2243e:	2314      	movs	r3, #20
   22440:	18fb      	adds	r3, r7, r3
   22442:	1dba      	adds	r2, r7, #6
   22444:	8812      	ldrh	r2, [r2, #0]
   22446:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   22448:	2314      	movs	r3, #20
   2244a:	18fb      	adds	r3, r7, r3
   2244c:	0019      	movs	r1, r3
   2244e:	2003      	movs	r0, #3
   22450:	4b03      	ldr	r3, [pc, #12]	; (22460 <nmi_spi_rw+0x40>)
   22452:	4798      	blx	r3
   22454:	0003      	movs	r3, r0
}
   22456:	0018      	movs	r0, r3
   22458:	46bd      	mov	sp, r7
   2245a:	b008      	add	sp, #32
   2245c:	bd80      	pop	{r7, pc}
   2245e:	46c0      	nop			; (mov r8, r8)
   22460:	0001fb45 	.word	0x0001fb45

00022464 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   22464:	b580      	push	{r7, lr}
   22466:	b082      	sub	sp, #8
   22468:	af00      	add	r7, sp, #0
   2246a:	0002      	movs	r2, r0
   2246c:	1dfb      	adds	r3, r7, #7
   2246e:	701a      	strb	r2, [r3, #0]
   22470:	1dbb      	adds	r3, r7, #6
   22472:	1c0a      	adds	r2, r1, #0
   22474:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   22476:	1dfb      	adds	r3, r7, #7
   22478:	781b      	ldrb	r3, [r3, #0]
   2247a:	005a      	lsls	r2, r3, #1
   2247c:	1dbb      	adds	r3, r7, #6
   2247e:	781b      	ldrb	r3, [r3, #0]
   22480:	4053      	eors	r3, r2
   22482:	4a03      	ldr	r2, [pc, #12]	; (22490 <crc7_byte+0x2c>)
   22484:	5cd3      	ldrb	r3, [r2, r3]
}
   22486:	0018      	movs	r0, r3
   22488:	46bd      	mov	sp, r7
   2248a:	b002      	add	sp, #8
   2248c:	bd80      	pop	{r7, pc}
   2248e:	46c0      	nop			; (mov r8, r8)
   22490:	00038684 	.word	0x00038684

00022494 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   22494:	b590      	push	{r4, r7, lr}
   22496:	b085      	sub	sp, #20
   22498:	af00      	add	r7, sp, #0
   2249a:	60b9      	str	r1, [r7, #8]
   2249c:	607a      	str	r2, [r7, #4]
   2249e:	230f      	movs	r3, #15
   224a0:	18fb      	adds	r3, r7, r3
   224a2:	1c02      	adds	r2, r0, #0
   224a4:	701a      	strb	r2, [r3, #0]
	while (len--)
   224a6:	e00e      	b.n	224c6 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   224a8:	68bb      	ldr	r3, [r7, #8]
   224aa:	1c5a      	adds	r2, r3, #1
   224ac:	60ba      	str	r2, [r7, #8]
   224ae:	781a      	ldrb	r2, [r3, #0]
   224b0:	230f      	movs	r3, #15
   224b2:	18fc      	adds	r4, r7, r3
   224b4:	230f      	movs	r3, #15
   224b6:	18fb      	adds	r3, r7, r3
   224b8:	781b      	ldrb	r3, [r3, #0]
   224ba:	0011      	movs	r1, r2
   224bc:	0018      	movs	r0, r3
   224be:	4b08      	ldr	r3, [pc, #32]	; (224e0 <crc7+0x4c>)
   224c0:	4798      	blx	r3
   224c2:	0003      	movs	r3, r0
   224c4:	7023      	strb	r3, [r4, #0]
	while (len--)
   224c6:	687b      	ldr	r3, [r7, #4]
   224c8:	1e5a      	subs	r2, r3, #1
   224ca:	607a      	str	r2, [r7, #4]
   224cc:	2b00      	cmp	r3, #0
   224ce:	d1eb      	bne.n	224a8 <crc7+0x14>
	return crc;
   224d0:	230f      	movs	r3, #15
   224d2:	18fb      	adds	r3, r7, r3
   224d4:	781b      	ldrb	r3, [r3, #0]
}
   224d6:	0018      	movs	r0, r3
   224d8:	46bd      	mov	sp, r7
   224da:	b005      	add	sp, #20
   224dc:	bd90      	pop	{r4, r7, pc}
   224de:	46c0      	nop			; (mov r8, r8)
   224e0:	00022465 	.word	0x00022465

000224e4 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   224e4:	b590      	push	{r4, r7, lr}
   224e6:	b089      	sub	sp, #36	; 0x24
   224e8:	af00      	add	r7, sp, #0
   224ea:	60b9      	str	r1, [r7, #8]
   224ec:	607a      	str	r2, [r7, #4]
   224ee:	603b      	str	r3, [r7, #0]
   224f0:	230f      	movs	r3, #15
   224f2:	18fb      	adds	r3, r7, r3
   224f4:	1c02      	adds	r2, r0, #0
   224f6:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   224f8:	231f      	movs	r3, #31
   224fa:	18fb      	adds	r3, r7, r3
   224fc:	2205      	movs	r2, #5
   224fe:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   22500:	231e      	movs	r3, #30
   22502:	18fb      	adds	r3, r7, r3
   22504:	2201      	movs	r2, #1
   22506:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   22508:	2314      	movs	r3, #20
   2250a:	18fb      	adds	r3, r7, r3
   2250c:	220f      	movs	r2, #15
   2250e:	18ba      	adds	r2, r7, r2
   22510:	7812      	ldrb	r2, [r2, #0]
   22512:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   22514:	230f      	movs	r3, #15
   22516:	18fb      	adds	r3, r7, r3
   22518:	781b      	ldrb	r3, [r3, #0]
   2251a:	3bc1      	subs	r3, #193	; 0xc1
   2251c:	2b0e      	cmp	r3, #14
   2251e:	d900      	bls.n	22522 <spi_cmd+0x3e>
   22520:	e11b      	b.n	2275a <spi_cmd+0x276>
   22522:	009a      	lsls	r2, r3, #2
   22524:	4bb6      	ldr	r3, [pc, #728]	; (22800 <spi_cmd+0x31c>)
   22526:	18d3      	adds	r3, r2, r3
   22528:	681b      	ldr	r3, [r3, #0]
   2252a:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   2252c:	68bb      	ldr	r3, [r7, #8]
   2252e:	0c1b      	lsrs	r3, r3, #16
   22530:	b2da      	uxtb	r2, r3
   22532:	2314      	movs	r3, #20
   22534:	18fb      	adds	r3, r7, r3
   22536:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   22538:	68bb      	ldr	r3, [r7, #8]
   2253a:	0a1b      	lsrs	r3, r3, #8
   2253c:	b2da      	uxtb	r2, r3
   2253e:	2314      	movs	r3, #20
   22540:	18fb      	adds	r3, r7, r3
   22542:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   22544:	68bb      	ldr	r3, [r7, #8]
   22546:	b2da      	uxtb	r2, r3
   22548:	2314      	movs	r3, #20
   2254a:	18fb      	adds	r3, r7, r3
   2254c:	70da      	strb	r2, [r3, #3]
		len = 5;
   2254e:	231f      	movs	r3, #31
   22550:	18fb      	adds	r3, r7, r3
   22552:	2205      	movs	r2, #5
   22554:	701a      	strb	r2, [r3, #0]
		break;
   22556:	e105      	b.n	22764 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   22558:	68bb      	ldr	r3, [r7, #8]
   2255a:	0a1b      	lsrs	r3, r3, #8
   2255c:	b2da      	uxtb	r2, r3
   2255e:	2314      	movs	r3, #20
   22560:	18fb      	adds	r3, r7, r3
   22562:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   22564:	2330      	movs	r3, #48	; 0x30
   22566:	18fb      	adds	r3, r7, r3
   22568:	781b      	ldrb	r3, [r3, #0]
   2256a:	2b00      	cmp	r3, #0
   2256c:	d009      	beq.n	22582 <spi_cmd+0x9e>
   2256e:	2314      	movs	r3, #20
   22570:	18fb      	adds	r3, r7, r3
   22572:	785b      	ldrb	r3, [r3, #1]
   22574:	2280      	movs	r2, #128	; 0x80
   22576:	4252      	negs	r2, r2
   22578:	4313      	orrs	r3, r2
   2257a:	b2da      	uxtb	r2, r3
   2257c:	2314      	movs	r3, #20
   2257e:	18fb      	adds	r3, r7, r3
   22580:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   22582:	68bb      	ldr	r3, [r7, #8]
   22584:	b2da      	uxtb	r2, r3
   22586:	2314      	movs	r3, #20
   22588:	18fb      	adds	r3, r7, r3
   2258a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   2258c:	2314      	movs	r3, #20
   2258e:	18fb      	adds	r3, r7, r3
   22590:	2200      	movs	r2, #0
   22592:	70da      	strb	r2, [r3, #3]
		len = 5;
   22594:	231f      	movs	r3, #31
   22596:	18fb      	adds	r3, r7, r3
   22598:	2205      	movs	r2, #5
   2259a:	701a      	strb	r2, [r3, #0]
		break;
   2259c:	e0e2      	b.n	22764 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   2259e:	2314      	movs	r3, #20
   225a0:	18fb      	adds	r3, r7, r3
   225a2:	2200      	movs	r2, #0
   225a4:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   225a6:	2314      	movs	r3, #20
   225a8:	18fb      	adds	r3, r7, r3
   225aa:	2200      	movs	r2, #0
   225ac:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   225ae:	2314      	movs	r3, #20
   225b0:	18fb      	adds	r3, r7, r3
   225b2:	2200      	movs	r2, #0
   225b4:	70da      	strb	r2, [r3, #3]
		len = 5;
   225b6:	231f      	movs	r3, #31
   225b8:	18fb      	adds	r3, r7, r3
   225ba:	2205      	movs	r2, #5
   225bc:	701a      	strb	r2, [r3, #0]
		break;
   225be:	e0d1      	b.n	22764 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   225c0:	2314      	movs	r3, #20
   225c2:	18fb      	adds	r3, r7, r3
   225c4:	2200      	movs	r2, #0
   225c6:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   225c8:	2314      	movs	r3, #20
   225ca:	18fb      	adds	r3, r7, r3
   225cc:	2200      	movs	r2, #0
   225ce:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   225d0:	2314      	movs	r3, #20
   225d2:	18fb      	adds	r3, r7, r3
   225d4:	2200      	movs	r2, #0
   225d6:	70da      	strb	r2, [r3, #3]
		len = 5;
   225d8:	231f      	movs	r3, #31
   225da:	18fb      	adds	r3, r7, r3
   225dc:	2205      	movs	r2, #5
   225de:	701a      	strb	r2, [r3, #0]
		break;
   225e0:	e0c0      	b.n	22764 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   225e2:	2314      	movs	r3, #20
   225e4:	18fb      	adds	r3, r7, r3
   225e6:	22ff      	movs	r2, #255	; 0xff
   225e8:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   225ea:	2314      	movs	r3, #20
   225ec:	18fb      	adds	r3, r7, r3
   225ee:	22ff      	movs	r2, #255	; 0xff
   225f0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   225f2:	2314      	movs	r3, #20
   225f4:	18fb      	adds	r3, r7, r3
   225f6:	22ff      	movs	r2, #255	; 0xff
   225f8:	70da      	strb	r2, [r3, #3]
		len = 5;
   225fa:	231f      	movs	r3, #31
   225fc:	18fb      	adds	r3, r7, r3
   225fe:	2205      	movs	r2, #5
   22600:	701a      	strb	r2, [r3, #0]
		break;
   22602:	e0af      	b.n	22764 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   22604:	68bb      	ldr	r3, [r7, #8]
   22606:	0c1b      	lsrs	r3, r3, #16
   22608:	b2da      	uxtb	r2, r3
   2260a:	2314      	movs	r3, #20
   2260c:	18fb      	adds	r3, r7, r3
   2260e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   22610:	68bb      	ldr	r3, [r7, #8]
   22612:	0a1b      	lsrs	r3, r3, #8
   22614:	b2da      	uxtb	r2, r3
   22616:	2314      	movs	r3, #20
   22618:	18fb      	adds	r3, r7, r3
   2261a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   2261c:	68bb      	ldr	r3, [r7, #8]
   2261e:	b2da      	uxtb	r2, r3
   22620:	2314      	movs	r3, #20
   22622:	18fb      	adds	r3, r7, r3
   22624:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   22626:	683b      	ldr	r3, [r7, #0]
   22628:	0a1b      	lsrs	r3, r3, #8
   2262a:	b2da      	uxtb	r2, r3
   2262c:	2314      	movs	r3, #20
   2262e:	18fb      	adds	r3, r7, r3
   22630:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   22632:	683b      	ldr	r3, [r7, #0]
   22634:	b2da      	uxtb	r2, r3
   22636:	2314      	movs	r3, #20
   22638:	18fb      	adds	r3, r7, r3
   2263a:	715a      	strb	r2, [r3, #5]
		len = 7;
   2263c:	231f      	movs	r3, #31
   2263e:	18fb      	adds	r3, r7, r3
   22640:	2207      	movs	r2, #7
   22642:	701a      	strb	r2, [r3, #0]
		break;
   22644:	e08e      	b.n	22764 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   22646:	68bb      	ldr	r3, [r7, #8]
   22648:	0c1b      	lsrs	r3, r3, #16
   2264a:	b2da      	uxtb	r2, r3
   2264c:	2314      	movs	r3, #20
   2264e:	18fb      	adds	r3, r7, r3
   22650:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   22652:	68bb      	ldr	r3, [r7, #8]
   22654:	0a1b      	lsrs	r3, r3, #8
   22656:	b2da      	uxtb	r2, r3
   22658:	2314      	movs	r3, #20
   2265a:	18fb      	adds	r3, r7, r3
   2265c:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   2265e:	68bb      	ldr	r3, [r7, #8]
   22660:	b2da      	uxtb	r2, r3
   22662:	2314      	movs	r3, #20
   22664:	18fb      	adds	r3, r7, r3
   22666:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   22668:	683b      	ldr	r3, [r7, #0]
   2266a:	0c1b      	lsrs	r3, r3, #16
   2266c:	b2da      	uxtb	r2, r3
   2266e:	2314      	movs	r3, #20
   22670:	18fb      	adds	r3, r7, r3
   22672:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   22674:	683b      	ldr	r3, [r7, #0]
   22676:	0a1b      	lsrs	r3, r3, #8
   22678:	b2da      	uxtb	r2, r3
   2267a:	2314      	movs	r3, #20
   2267c:	18fb      	adds	r3, r7, r3
   2267e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   22680:	683b      	ldr	r3, [r7, #0]
   22682:	b2da      	uxtb	r2, r3
   22684:	2314      	movs	r3, #20
   22686:	18fb      	adds	r3, r7, r3
   22688:	719a      	strb	r2, [r3, #6]
		len = 8;
   2268a:	231f      	movs	r3, #31
   2268c:	18fb      	adds	r3, r7, r3
   2268e:	2208      	movs	r2, #8
   22690:	701a      	strb	r2, [r3, #0]
		break;
   22692:	e067      	b.n	22764 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   22694:	68bb      	ldr	r3, [r7, #8]
   22696:	0a1b      	lsrs	r3, r3, #8
   22698:	b2da      	uxtb	r2, r3
   2269a:	2314      	movs	r3, #20
   2269c:	18fb      	adds	r3, r7, r3
   2269e:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   226a0:	2330      	movs	r3, #48	; 0x30
   226a2:	18fb      	adds	r3, r7, r3
   226a4:	781b      	ldrb	r3, [r3, #0]
   226a6:	2b00      	cmp	r3, #0
   226a8:	d009      	beq.n	226be <spi_cmd+0x1da>
   226aa:	2314      	movs	r3, #20
   226ac:	18fb      	adds	r3, r7, r3
   226ae:	785b      	ldrb	r3, [r3, #1]
   226b0:	2280      	movs	r2, #128	; 0x80
   226b2:	4252      	negs	r2, r2
   226b4:	4313      	orrs	r3, r2
   226b6:	b2da      	uxtb	r2, r3
   226b8:	2314      	movs	r3, #20
   226ba:	18fb      	adds	r3, r7, r3
   226bc:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   226be:	68bb      	ldr	r3, [r7, #8]
   226c0:	b2da      	uxtb	r2, r3
   226c2:	2314      	movs	r3, #20
   226c4:	18fb      	adds	r3, r7, r3
   226c6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   226c8:	687b      	ldr	r3, [r7, #4]
   226ca:	0e1b      	lsrs	r3, r3, #24
   226cc:	b2da      	uxtb	r2, r3
   226ce:	2314      	movs	r3, #20
   226d0:	18fb      	adds	r3, r7, r3
   226d2:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   226d4:	687b      	ldr	r3, [r7, #4]
   226d6:	0c1b      	lsrs	r3, r3, #16
   226d8:	b2da      	uxtb	r2, r3
   226da:	2314      	movs	r3, #20
   226dc:	18fb      	adds	r3, r7, r3
   226de:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   226e0:	687b      	ldr	r3, [r7, #4]
   226e2:	0a1b      	lsrs	r3, r3, #8
   226e4:	b2da      	uxtb	r2, r3
   226e6:	2314      	movs	r3, #20
   226e8:	18fb      	adds	r3, r7, r3
   226ea:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   226ec:	687b      	ldr	r3, [r7, #4]
   226ee:	b2da      	uxtb	r2, r3
   226f0:	2314      	movs	r3, #20
   226f2:	18fb      	adds	r3, r7, r3
   226f4:	719a      	strb	r2, [r3, #6]
		len = 8;
   226f6:	231f      	movs	r3, #31
   226f8:	18fb      	adds	r3, r7, r3
   226fa:	2208      	movs	r2, #8
   226fc:	701a      	strb	r2, [r3, #0]
		break;
   226fe:	e031      	b.n	22764 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   22700:	68bb      	ldr	r3, [r7, #8]
   22702:	0c1b      	lsrs	r3, r3, #16
   22704:	b2da      	uxtb	r2, r3
   22706:	2314      	movs	r3, #20
   22708:	18fb      	adds	r3, r7, r3
   2270a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   2270c:	68bb      	ldr	r3, [r7, #8]
   2270e:	0a1b      	lsrs	r3, r3, #8
   22710:	b2da      	uxtb	r2, r3
   22712:	2314      	movs	r3, #20
   22714:	18fb      	adds	r3, r7, r3
   22716:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   22718:	68bb      	ldr	r3, [r7, #8]
   2271a:	b2da      	uxtb	r2, r3
   2271c:	2314      	movs	r3, #20
   2271e:	18fb      	adds	r3, r7, r3
   22720:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   22722:	687b      	ldr	r3, [r7, #4]
   22724:	0e1b      	lsrs	r3, r3, #24
   22726:	b2da      	uxtb	r2, r3
   22728:	2314      	movs	r3, #20
   2272a:	18fb      	adds	r3, r7, r3
   2272c:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   2272e:	687b      	ldr	r3, [r7, #4]
   22730:	0c1b      	lsrs	r3, r3, #16
   22732:	b2da      	uxtb	r2, r3
   22734:	2314      	movs	r3, #20
   22736:	18fb      	adds	r3, r7, r3
   22738:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   2273a:	687b      	ldr	r3, [r7, #4]
   2273c:	0a1b      	lsrs	r3, r3, #8
   2273e:	b2da      	uxtb	r2, r3
   22740:	2314      	movs	r3, #20
   22742:	18fb      	adds	r3, r7, r3
   22744:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   22746:	687b      	ldr	r3, [r7, #4]
   22748:	b2da      	uxtb	r2, r3
   2274a:	2314      	movs	r3, #20
   2274c:	18fb      	adds	r3, r7, r3
   2274e:	71da      	strb	r2, [r3, #7]
		len = 9;
   22750:	231f      	movs	r3, #31
   22752:	18fb      	adds	r3, r7, r3
   22754:	2209      	movs	r2, #9
   22756:	701a      	strb	r2, [r3, #0]
		break;
   22758:	e004      	b.n	22764 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   2275a:	231e      	movs	r3, #30
   2275c:	18fb      	adds	r3, r7, r3
   2275e:	2200      	movs	r2, #0
   22760:	701a      	strb	r2, [r3, #0]
		break;
   22762:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   22764:	231e      	movs	r3, #30
   22766:	18fb      	adds	r3, r7, r3
   22768:	781b      	ldrb	r3, [r3, #0]
   2276a:	b25b      	sxtb	r3, r3
   2276c:	2b00      	cmp	r3, #0
   2276e:	d03f      	beq.n	227f0 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   22770:	4b24      	ldr	r3, [pc, #144]	; (22804 <spi_cmd+0x320>)
   22772:	781b      	ldrb	r3, [r3, #0]
   22774:	2b00      	cmp	r3, #0
   22776:	d115      	bne.n	227a4 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   22778:	231f      	movs	r3, #31
   2277a:	18fb      	adds	r3, r7, r3
   2277c:	781b      	ldrb	r3, [r3, #0]
   2277e:	1e5c      	subs	r4, r3, #1
   22780:	231f      	movs	r3, #31
   22782:	18fb      	adds	r3, r7, r3
   22784:	781b      	ldrb	r3, [r3, #0]
   22786:	3b01      	subs	r3, #1
   22788:	001a      	movs	r2, r3
   2278a:	2314      	movs	r3, #20
   2278c:	18fb      	adds	r3, r7, r3
   2278e:	0019      	movs	r1, r3
   22790:	207f      	movs	r0, #127	; 0x7f
   22792:	4b1d      	ldr	r3, [pc, #116]	; (22808 <spi_cmd+0x324>)
   22794:	4798      	blx	r3
   22796:	0003      	movs	r3, r0
   22798:	18db      	adds	r3, r3, r3
   2279a:	b2da      	uxtb	r2, r3
   2279c:	2314      	movs	r3, #20
   2279e:	18fb      	adds	r3, r7, r3
   227a0:	551a      	strb	r2, [r3, r4]
   227a2:	e006      	b.n	227b2 <spi_cmd+0x2ce>
		else
			len-=1;
   227a4:	231f      	movs	r3, #31
   227a6:	18fb      	adds	r3, r7, r3
   227a8:	221f      	movs	r2, #31
   227aa:	18ba      	adds	r2, r7, r2
   227ac:	7812      	ldrb	r2, [r2, #0]
   227ae:	3a01      	subs	r2, #1
   227b0:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   227b2:	231f      	movs	r3, #31
   227b4:	18fb      	adds	r3, r7, r3
   227b6:	781b      	ldrb	r3, [r3, #0]
   227b8:	b29a      	uxth	r2, r3
   227ba:	2314      	movs	r3, #20
   227bc:	18fb      	adds	r3, r7, r3
   227be:	0011      	movs	r1, r2
   227c0:	0018      	movs	r0, r3
   227c2:	4b12      	ldr	r3, [pc, #72]	; (2280c <spi_cmd+0x328>)
   227c4:	4798      	blx	r3
   227c6:	1e03      	subs	r3, r0, #0
   227c8:	d012      	beq.n	227f0 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   227ca:	2390      	movs	r3, #144	; 0x90
   227cc:	005a      	lsls	r2, r3, #1
   227ce:	4910      	ldr	r1, [pc, #64]	; (22810 <spi_cmd+0x32c>)
   227d0:	4b10      	ldr	r3, [pc, #64]	; (22814 <spi_cmd+0x330>)
   227d2:	0018      	movs	r0, r3
   227d4:	4b10      	ldr	r3, [pc, #64]	; (22818 <spi_cmd+0x334>)
   227d6:	4798      	blx	r3
   227d8:	4b10      	ldr	r3, [pc, #64]	; (2281c <spi_cmd+0x338>)
   227da:	0018      	movs	r0, r3
   227dc:	4b0e      	ldr	r3, [pc, #56]	; (22818 <spi_cmd+0x334>)
   227de:	4798      	blx	r3
   227e0:	4b0f      	ldr	r3, [pc, #60]	; (22820 <spi_cmd+0x33c>)
   227e2:	0018      	movs	r0, r3
   227e4:	4b0c      	ldr	r3, [pc, #48]	; (22818 <spi_cmd+0x334>)
   227e6:	4798      	blx	r3
			result = N_FAIL;
   227e8:	231e      	movs	r3, #30
   227ea:	18fb      	adds	r3, r7, r3
   227ec:	2200      	movs	r2, #0
   227ee:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   227f0:	231e      	movs	r3, #30
   227f2:	18fb      	adds	r3, r7, r3
   227f4:	781b      	ldrb	r3, [r3, #0]
   227f6:	b25b      	sxtb	r3, r3
}
   227f8:	0018      	movs	r0, r3
   227fa:	46bd      	mov	sp, r7
   227fc:	b009      	add	sp, #36	; 0x24
   227fe:	bd90      	pop	{r4, r7, pc}
   22800:	00038cfc 	.word	0x00038cfc
   22804:	2000427c 	.word	0x2000427c
   22808:	00022495 	.word	0x00022495
   2280c:	000223dd 	.word	0x000223dd
   22810:	00038d74 	.word	0x00038d74
   22814:	00038784 	.word	0x00038784
   22818:	0001cee9 	.word	0x0001cee9
   2281c:	00038798 	.word	0x00038798
   22820:	000387c4 	.word	0x000387c4

00022824 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   22824:	b590      	push	{r4, r7, lr}
   22826:	b085      	sub	sp, #20
   22828:	af00      	add	r7, sp, #0
   2282a:	0002      	movs	r2, r0
   2282c:	1dfb      	adds	r3, r7, #7
   2282e:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   22830:	230e      	movs	r3, #14
   22832:	18fb      	adds	r3, r7, r3
   22834:	2201      	movs	r2, #1
   22836:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   22838:	4b32      	ldr	r3, [pc, #200]	; (22904 <spi_data_rsp+0xe0>)
   2283a:	781b      	ldrb	r3, [r3, #0]
   2283c:	2b00      	cmp	r3, #0
   2283e:	d104      	bne.n	2284a <spi_data_rsp+0x26>
		len = 2;
   22840:	230f      	movs	r3, #15
   22842:	18fb      	adds	r3, r7, r3
   22844:	2202      	movs	r2, #2
   22846:	701a      	strb	r2, [r3, #0]
   22848:	e003      	b.n	22852 <spi_data_rsp+0x2e>
	else
		len = 3;
   2284a:	230f      	movs	r3, #15
   2284c:	18fb      	adds	r3, r7, r3
   2284e:	2203      	movs	r2, #3
   22850:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   22852:	230f      	movs	r3, #15
   22854:	18fb      	adds	r3, r7, r3
   22856:	781b      	ldrb	r3, [r3, #0]
   22858:	b29a      	uxth	r2, r3
   2285a:	2308      	movs	r3, #8
   2285c:	18fb      	adds	r3, r7, r3
   2285e:	0011      	movs	r1, r2
   22860:	0018      	movs	r0, r3
   22862:	4b29      	ldr	r3, [pc, #164]	; (22908 <spi_data_rsp+0xe4>)
   22864:	4798      	blx	r3
   22866:	1e03      	subs	r3, r0, #0
   22868:	d013      	beq.n	22892 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   2286a:	239a      	movs	r3, #154	; 0x9a
   2286c:	005a      	lsls	r2, r3, #1
   2286e:	4927      	ldr	r1, [pc, #156]	; (2290c <spi_data_rsp+0xe8>)
   22870:	4b27      	ldr	r3, [pc, #156]	; (22910 <spi_data_rsp+0xec>)
   22872:	0018      	movs	r0, r3
   22874:	4b27      	ldr	r3, [pc, #156]	; (22914 <spi_data_rsp+0xf0>)
   22876:	4798      	blx	r3
   22878:	4b27      	ldr	r3, [pc, #156]	; (22918 <spi_data_rsp+0xf4>)
   2287a:	0018      	movs	r0, r3
   2287c:	4b25      	ldr	r3, [pc, #148]	; (22914 <spi_data_rsp+0xf0>)
   2287e:	4798      	blx	r3
   22880:	4b26      	ldr	r3, [pc, #152]	; (2291c <spi_data_rsp+0xf8>)
   22882:	0018      	movs	r0, r3
   22884:	4b23      	ldr	r3, [pc, #140]	; (22914 <spi_data_rsp+0xf0>)
   22886:	4798      	blx	r3
		result = N_FAIL;
   22888:	230e      	movs	r3, #14
   2288a:	18fb      	adds	r3, r7, r3
   2288c:	2200      	movs	r2, #0
   2288e:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   22890:	e030      	b.n	228f4 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   22892:	230f      	movs	r3, #15
   22894:	18fb      	adds	r3, r7, r3
   22896:	781b      	ldrb	r3, [r3, #0]
   22898:	3b01      	subs	r3, #1
   2289a:	2208      	movs	r2, #8
   2289c:	18ba      	adds	r2, r7, r2
   2289e:	5cd3      	ldrb	r3, [r2, r3]
   228a0:	2b00      	cmp	r3, #0
   228a2:	d108      	bne.n	228b6 <spi_data_rsp+0x92>
   228a4:	230f      	movs	r3, #15
   228a6:	18fb      	adds	r3, r7, r3
   228a8:	781b      	ldrb	r3, [r3, #0]
   228aa:	3b02      	subs	r3, #2
   228ac:	2208      	movs	r2, #8
   228ae:	18ba      	adds	r2, r7, r2
   228b0:	5cd3      	ldrb	r3, [r2, r3]
   228b2:	2bc3      	cmp	r3, #195	; 0xc3
   228b4:	d01e      	beq.n	228f4 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   228b6:	233c      	movs	r3, #60	; 0x3c
   228b8:	33ff      	adds	r3, #255	; 0xff
   228ba:	001a      	movs	r2, r3
   228bc:	4913      	ldr	r1, [pc, #76]	; (2290c <spi_data_rsp+0xe8>)
   228be:	4b14      	ldr	r3, [pc, #80]	; (22910 <spi_data_rsp+0xec>)
   228c0:	0018      	movs	r0, r3
   228c2:	4b14      	ldr	r3, [pc, #80]	; (22914 <spi_data_rsp+0xf0>)
   228c4:	4798      	blx	r3
   228c6:	2308      	movs	r3, #8
   228c8:	18fb      	adds	r3, r7, r3
   228ca:	781b      	ldrb	r3, [r3, #0]
   228cc:	0019      	movs	r1, r3
   228ce:	2308      	movs	r3, #8
   228d0:	18fb      	adds	r3, r7, r3
   228d2:	785b      	ldrb	r3, [r3, #1]
   228d4:	001a      	movs	r2, r3
   228d6:	2308      	movs	r3, #8
   228d8:	18fb      	adds	r3, r7, r3
   228da:	789b      	ldrb	r3, [r3, #2]
   228dc:	4810      	ldr	r0, [pc, #64]	; (22920 <spi_data_rsp+0xfc>)
   228de:	4c0d      	ldr	r4, [pc, #52]	; (22914 <spi_data_rsp+0xf0>)
   228e0:	47a0      	blx	r4
   228e2:	4b0e      	ldr	r3, [pc, #56]	; (2291c <spi_data_rsp+0xf8>)
   228e4:	0018      	movs	r0, r3
   228e6:	4b0b      	ldr	r3, [pc, #44]	; (22914 <spi_data_rsp+0xf0>)
   228e8:	4798      	blx	r3
		result = N_FAIL;
   228ea:	230e      	movs	r3, #14
   228ec:	18fb      	adds	r3, r7, r3
   228ee:	2200      	movs	r2, #0
   228f0:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   228f2:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   228f4:	230e      	movs	r3, #14
   228f6:	18fb      	adds	r3, r7, r3
   228f8:	781b      	ldrb	r3, [r3, #0]
   228fa:	b25b      	sxtb	r3, r3
}
   228fc:	0018      	movs	r0, r3
   228fe:	46bd      	mov	sp, r7
   22900:	b005      	add	sp, #20
   22902:	bd90      	pop	{r4, r7, pc}
   22904:	2000427c 	.word	0x2000427c
   22908:	00022399 	.word	0x00022399
   2290c:	00038d7c 	.word	0x00038d7c
   22910:	00038784 	.word	0x00038784
   22914:	0001cee9 	.word	0x0001cee9
   22918:	000387c8 	.word	0x000387c8
   2291c:	000387c4 	.word	0x000387c4
   22920:	000387e8 	.word	0x000387e8

00022924 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   22924:	b580      	push	{r7, lr}
   22926:	b084      	sub	sp, #16
   22928:	af00      	add	r7, sp, #0
   2292a:	0002      	movs	r2, r0
   2292c:	1dfb      	adds	r3, r7, #7
   2292e:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   22930:	230f      	movs	r3, #15
   22932:	18fb      	adds	r3, r7, r3
   22934:	2201      	movs	r2, #1
   22936:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   22938:	1dfb      	adds	r3, r7, #7
   2293a:	781b      	ldrb	r3, [r3, #0]
   2293c:	2bcf      	cmp	r3, #207	; 0xcf
   2293e:	d007      	beq.n	22950 <spi_cmd_rsp+0x2c>
   22940:	1dfb      	adds	r3, r7, #7
   22942:	781b      	ldrb	r3, [r3, #0]
   22944:	2bc5      	cmp	r3, #197	; 0xc5
   22946:	d003      	beq.n	22950 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   22948:	1dfb      	adds	r3, r7, #7
   2294a:	781b      	ldrb	r3, [r3, #0]
   2294c:	2bc6      	cmp	r3, #198	; 0xc6
   2294e:	d10c      	bne.n	2296a <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   22950:	230d      	movs	r3, #13
   22952:	18fb      	adds	r3, r7, r3
   22954:	2101      	movs	r1, #1
   22956:	0018      	movs	r0, r3
   22958:	4b3b      	ldr	r3, [pc, #236]	; (22a48 <spi_cmd_rsp+0x124>)
   2295a:	4798      	blx	r3
   2295c:	1e03      	subs	r3, r0, #0
   2295e:	d004      	beq.n	2296a <spi_cmd_rsp+0x46>
			result = N_FAIL;
   22960:	230f      	movs	r3, #15
   22962:	18fb      	adds	r3, r7, r3
   22964:	2200      	movs	r2, #0
   22966:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   22968:	e065      	b.n	22a36 <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   2296a:	230e      	movs	r3, #14
   2296c:	18fb      	adds	r3, r7, r3
   2296e:	220a      	movs	r2, #10
   22970:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   22972:	230d      	movs	r3, #13
   22974:	18fb      	adds	r3, r7, r3
   22976:	2101      	movs	r1, #1
   22978:	0018      	movs	r0, r3
   2297a:	4b33      	ldr	r3, [pc, #204]	; (22a48 <spi_cmd_rsp+0x124>)
   2297c:	4798      	blx	r3
   2297e:	1e03      	subs	r3, r0, #0
   22980:	d014      	beq.n	229ac <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   22982:	235c      	movs	r3, #92	; 0x5c
   22984:	33ff      	adds	r3, #255	; 0xff
   22986:	001a      	movs	r2, r3
   22988:	4930      	ldr	r1, [pc, #192]	; (22a4c <spi_cmd_rsp+0x128>)
   2298a:	4b31      	ldr	r3, [pc, #196]	; (22a50 <spi_cmd_rsp+0x12c>)
   2298c:	0018      	movs	r0, r3
   2298e:	4b31      	ldr	r3, [pc, #196]	; (22a54 <spi_cmd_rsp+0x130>)
   22990:	4798      	blx	r3
   22992:	4b31      	ldr	r3, [pc, #196]	; (22a58 <spi_cmd_rsp+0x134>)
   22994:	0018      	movs	r0, r3
   22996:	4b2f      	ldr	r3, [pc, #188]	; (22a54 <spi_cmd_rsp+0x130>)
   22998:	4798      	blx	r3
   2299a:	4b30      	ldr	r3, [pc, #192]	; (22a5c <spi_cmd_rsp+0x138>)
   2299c:	0018      	movs	r0, r3
   2299e:	4b2d      	ldr	r3, [pc, #180]	; (22a54 <spi_cmd_rsp+0x130>)
   229a0:	4798      	blx	r3
			result = N_FAIL;
   229a2:	230f      	movs	r3, #15
   229a4:	18fb      	adds	r3, r7, r3
   229a6:	2200      	movs	r2, #0
   229a8:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   229aa:	e044      	b.n	22a36 <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   229ac:	230d      	movs	r3, #13
   229ae:	18fb      	adds	r3, r7, r3
   229b0:	781b      	ldrb	r3, [r3, #0]
   229b2:	1dfa      	adds	r2, r7, #7
   229b4:	7812      	ldrb	r2, [r2, #0]
   229b6:	429a      	cmp	r2, r3
   229b8:	d00b      	beq.n	229d2 <spi_cmd_rsp+0xae>
   229ba:	230e      	movs	r3, #14
   229bc:	18fb      	adds	r3, r7, r3
   229be:	781b      	ldrb	r3, [r3, #0]
   229c0:	b25b      	sxtb	r3, r3
   229c2:	b2da      	uxtb	r2, r3
   229c4:	3a01      	subs	r2, #1
   229c6:	b2d1      	uxtb	r1, r2
   229c8:	220e      	movs	r2, #14
   229ca:	18ba      	adds	r2, r7, r2
   229cc:	7011      	strb	r1, [r2, #0]
   229ce:	2b00      	cmp	r3, #0
   229d0:	dccf      	bgt.n	22972 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   229d2:	230e      	movs	r3, #14
   229d4:	18fb      	adds	r3, r7, r3
   229d6:	220a      	movs	r2, #10
   229d8:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   229da:	230d      	movs	r3, #13
   229dc:	18fb      	adds	r3, r7, r3
   229de:	2101      	movs	r1, #1
   229e0:	0018      	movs	r0, r3
   229e2:	4b19      	ldr	r3, [pc, #100]	; (22a48 <spi_cmd_rsp+0x124>)
   229e4:	4798      	blx	r3
   229e6:	1e03      	subs	r3, r0, #0
   229e8:	d014      	beq.n	22a14 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   229ea:	236a      	movs	r3, #106	; 0x6a
   229ec:	33ff      	adds	r3, #255	; 0xff
   229ee:	001a      	movs	r2, r3
   229f0:	4916      	ldr	r1, [pc, #88]	; (22a4c <spi_cmd_rsp+0x128>)
   229f2:	4b17      	ldr	r3, [pc, #92]	; (22a50 <spi_cmd_rsp+0x12c>)
   229f4:	0018      	movs	r0, r3
   229f6:	4b17      	ldr	r3, [pc, #92]	; (22a54 <spi_cmd_rsp+0x130>)
   229f8:	4798      	blx	r3
   229fa:	4b17      	ldr	r3, [pc, #92]	; (22a58 <spi_cmd_rsp+0x134>)
   229fc:	0018      	movs	r0, r3
   229fe:	4b15      	ldr	r3, [pc, #84]	; (22a54 <spi_cmd_rsp+0x130>)
   22a00:	4798      	blx	r3
   22a02:	4b16      	ldr	r3, [pc, #88]	; (22a5c <spi_cmd_rsp+0x138>)
   22a04:	0018      	movs	r0, r3
   22a06:	4b13      	ldr	r3, [pc, #76]	; (22a54 <spi_cmd_rsp+0x130>)
   22a08:	4798      	blx	r3
			result = N_FAIL;
   22a0a:	230f      	movs	r3, #15
   22a0c:	18fb      	adds	r3, r7, r3
   22a0e:	2200      	movs	r2, #0
   22a10:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   22a12:	e010      	b.n	22a36 <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   22a14:	230d      	movs	r3, #13
   22a16:	18fb      	adds	r3, r7, r3
   22a18:	781b      	ldrb	r3, [r3, #0]
   22a1a:	2b00      	cmp	r3, #0
   22a1c:	d00b      	beq.n	22a36 <spi_cmd_rsp+0x112>
   22a1e:	230e      	movs	r3, #14
   22a20:	18fb      	adds	r3, r7, r3
   22a22:	781b      	ldrb	r3, [r3, #0]
   22a24:	b25b      	sxtb	r3, r3
   22a26:	b2da      	uxtb	r2, r3
   22a28:	3a01      	subs	r2, #1
   22a2a:	b2d1      	uxtb	r1, r2
   22a2c:	220e      	movs	r2, #14
   22a2e:	18ba      	adds	r2, r7, r2
   22a30:	7011      	strb	r1, [r2, #0]
   22a32:	2b00      	cmp	r3, #0
   22a34:	dcd1      	bgt.n	229da <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   22a36:	230f      	movs	r3, #15
   22a38:	18fb      	adds	r3, r7, r3
   22a3a:	781b      	ldrb	r3, [r3, #0]
   22a3c:	b25b      	sxtb	r3, r3
}
   22a3e:	0018      	movs	r0, r3
   22a40:	46bd      	mov	sp, r7
   22a42:	b004      	add	sp, #16
   22a44:	bd80      	pop	{r7, pc}
   22a46:	46c0      	nop			; (mov r8, r8)
   22a48:	00022399 	.word	0x00022399
   22a4c:	00038d8c 	.word	0x00038d8c
   22a50:	00038784 	.word	0x00038784
   22a54:	0001cee9 	.word	0x0001cee9
   22a58:	00038818 	.word	0x00038818
   22a5c:	000387c4 	.word	0x000387c4

00022a60 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   22a60:	b590      	push	{r4, r7, lr}
   22a62:	b09f      	sub	sp, #124	; 0x7c
   22a64:	af00      	add	r7, sp, #0
   22a66:	60b9      	str	r1, [r7, #8]
   22a68:	607a      	str	r2, [r7, #4]
   22a6a:	603b      	str	r3, [r7, #0]
   22a6c:	230f      	movs	r3, #15
   22a6e:	18fb      	adds	r3, r7, r3
   22a70:	1c02      	adds	r2, r0, #0
   22a72:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   22a74:	2300      	movs	r3, #0
   22a76:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   22a78:	2301      	movs	r3, #1
   22a7a:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   22a7c:	2338      	movs	r3, #56	; 0x38
   22a7e:	18fb      	adds	r3, r7, r3
   22a80:	220f      	movs	r2, #15
   22a82:	18ba      	adds	r2, r7, r2
   22a84:	7812      	ldrb	r2, [r2, #0]
   22a86:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   22a88:	230f      	movs	r3, #15
   22a8a:	18fb      	adds	r3, r7, r3
   22a8c:	781b      	ldrb	r3, [r3, #0]
   22a8e:	3bc1      	subs	r3, #193	; 0xc1
   22a90:	2b0e      	cmp	r3, #14
   22a92:	d900      	bls.n	22a96 <spi_cmd_complete+0x36>
   22a94:	e103      	b.n	22c9e <spi_cmd_complete+0x23e>
   22a96:	009a      	lsls	r2, r3, #2
   22a98:	4bd1      	ldr	r3, [pc, #836]	; (22de0 <spi_cmd_complete+0x380>)
   22a9a:	18d3      	adds	r3, r2, r3
   22a9c:	681b      	ldr	r3, [r3, #0]
   22a9e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   22aa0:	68bb      	ldr	r3, [r7, #8]
   22aa2:	0c1b      	lsrs	r3, r3, #16
   22aa4:	b2da      	uxtb	r2, r3
   22aa6:	2338      	movs	r3, #56	; 0x38
   22aa8:	18fb      	adds	r3, r7, r3
   22aaa:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   22aac:	68bb      	ldr	r3, [r7, #8]
   22aae:	0a1b      	lsrs	r3, r3, #8
   22ab0:	b2da      	uxtb	r2, r3
   22ab2:	2338      	movs	r3, #56	; 0x38
   22ab4:	18fb      	adds	r3, r7, r3
   22ab6:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   22ab8:	68bb      	ldr	r3, [r7, #8]
   22aba:	b2da      	uxtb	r2, r3
   22abc:	2338      	movs	r3, #56	; 0x38
   22abe:	18fb      	adds	r3, r7, r3
   22ac0:	70da      	strb	r2, [r3, #3]
		len = 5;
   22ac2:	2305      	movs	r3, #5
   22ac4:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   22ac6:	e0ed      	b.n	22ca4 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   22ac8:	68bb      	ldr	r3, [r7, #8]
   22aca:	0a1b      	lsrs	r3, r3, #8
   22acc:	b2da      	uxtb	r2, r3
   22ace:	2338      	movs	r3, #56	; 0x38
   22ad0:	18fb      	adds	r3, r7, r3
   22ad2:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   22ad4:	2388      	movs	r3, #136	; 0x88
   22ad6:	18fb      	adds	r3, r7, r3
   22ad8:	781b      	ldrb	r3, [r3, #0]
   22ada:	2b01      	cmp	r3, #1
   22adc:	d109      	bne.n	22af2 <spi_cmd_complete+0x92>
   22ade:	2338      	movs	r3, #56	; 0x38
   22ae0:	18fb      	adds	r3, r7, r3
   22ae2:	785b      	ldrb	r3, [r3, #1]
   22ae4:	2280      	movs	r2, #128	; 0x80
   22ae6:	4252      	negs	r2, r2
   22ae8:	4313      	orrs	r3, r2
   22aea:	b2da      	uxtb	r2, r3
   22aec:	2338      	movs	r3, #56	; 0x38
   22aee:	18fb      	adds	r3, r7, r3
   22af0:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   22af2:	68bb      	ldr	r3, [r7, #8]
   22af4:	b2da      	uxtb	r2, r3
   22af6:	2338      	movs	r3, #56	; 0x38
   22af8:	18fb      	adds	r3, r7, r3
   22afa:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   22afc:	2338      	movs	r3, #56	; 0x38
   22afe:	18fb      	adds	r3, r7, r3
   22b00:	2200      	movs	r2, #0
   22b02:	70da      	strb	r2, [r3, #3]
		len = 5;
   22b04:	2305      	movs	r3, #5
   22b06:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22b08:	e0cc      	b.n	22ca4 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   22b0a:	2338      	movs	r3, #56	; 0x38
   22b0c:	18fb      	adds	r3, r7, r3
   22b0e:	2200      	movs	r2, #0
   22b10:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   22b12:	2338      	movs	r3, #56	; 0x38
   22b14:	18fb      	adds	r3, r7, r3
   22b16:	2200      	movs	r2, #0
   22b18:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   22b1a:	2338      	movs	r3, #56	; 0x38
   22b1c:	18fb      	adds	r3, r7, r3
   22b1e:	2200      	movs	r2, #0
   22b20:	70da      	strb	r2, [r3, #3]
		len = 5;
   22b22:	2305      	movs	r3, #5
   22b24:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22b26:	e0bd      	b.n	22ca4 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   22b28:	2338      	movs	r3, #56	; 0x38
   22b2a:	18fb      	adds	r3, r7, r3
   22b2c:	2200      	movs	r2, #0
   22b2e:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   22b30:	2338      	movs	r3, #56	; 0x38
   22b32:	18fb      	adds	r3, r7, r3
   22b34:	2200      	movs	r2, #0
   22b36:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   22b38:	2338      	movs	r3, #56	; 0x38
   22b3a:	18fb      	adds	r3, r7, r3
   22b3c:	2200      	movs	r2, #0
   22b3e:	70da      	strb	r2, [r3, #3]
		len = 5;
   22b40:	2305      	movs	r3, #5
   22b42:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22b44:	e0ae      	b.n	22ca4 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   22b46:	2338      	movs	r3, #56	; 0x38
   22b48:	18fb      	adds	r3, r7, r3
   22b4a:	22ff      	movs	r2, #255	; 0xff
   22b4c:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   22b4e:	2338      	movs	r3, #56	; 0x38
   22b50:	18fb      	adds	r3, r7, r3
   22b52:	22ff      	movs	r2, #255	; 0xff
   22b54:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   22b56:	2338      	movs	r3, #56	; 0x38
   22b58:	18fb      	adds	r3, r7, r3
   22b5a:	22ff      	movs	r2, #255	; 0xff
   22b5c:	70da      	strb	r2, [r3, #3]
		len = 5;
   22b5e:	2305      	movs	r3, #5
   22b60:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22b62:	e09f      	b.n	22ca4 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   22b64:	68bb      	ldr	r3, [r7, #8]
   22b66:	0c1b      	lsrs	r3, r3, #16
   22b68:	b2da      	uxtb	r2, r3
   22b6a:	2338      	movs	r3, #56	; 0x38
   22b6c:	18fb      	adds	r3, r7, r3
   22b6e:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   22b70:	68bb      	ldr	r3, [r7, #8]
   22b72:	0a1b      	lsrs	r3, r3, #8
   22b74:	b2da      	uxtb	r2, r3
   22b76:	2338      	movs	r3, #56	; 0x38
   22b78:	18fb      	adds	r3, r7, r3
   22b7a:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   22b7c:	68bb      	ldr	r3, [r7, #8]
   22b7e:	b2da      	uxtb	r2, r3
   22b80:	2338      	movs	r3, #56	; 0x38
   22b82:	18fb      	adds	r3, r7, r3
   22b84:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   22b86:	683b      	ldr	r3, [r7, #0]
   22b88:	0a1b      	lsrs	r3, r3, #8
   22b8a:	b2da      	uxtb	r2, r3
   22b8c:	2338      	movs	r3, #56	; 0x38
   22b8e:	18fb      	adds	r3, r7, r3
   22b90:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   22b92:	683b      	ldr	r3, [r7, #0]
   22b94:	b2da      	uxtb	r2, r3
   22b96:	2338      	movs	r3, #56	; 0x38
   22b98:	18fb      	adds	r3, r7, r3
   22b9a:	715a      	strb	r2, [r3, #5]
		len = 7;
   22b9c:	2307      	movs	r3, #7
   22b9e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22ba0:	e080      	b.n	22ca4 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   22ba2:	68bb      	ldr	r3, [r7, #8]
   22ba4:	0c1b      	lsrs	r3, r3, #16
   22ba6:	b2da      	uxtb	r2, r3
   22ba8:	2338      	movs	r3, #56	; 0x38
   22baa:	18fb      	adds	r3, r7, r3
   22bac:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   22bae:	68bb      	ldr	r3, [r7, #8]
   22bb0:	0a1b      	lsrs	r3, r3, #8
   22bb2:	b2da      	uxtb	r2, r3
   22bb4:	2338      	movs	r3, #56	; 0x38
   22bb6:	18fb      	adds	r3, r7, r3
   22bb8:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   22bba:	68bb      	ldr	r3, [r7, #8]
   22bbc:	b2da      	uxtb	r2, r3
   22bbe:	2338      	movs	r3, #56	; 0x38
   22bc0:	18fb      	adds	r3, r7, r3
   22bc2:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   22bc4:	683b      	ldr	r3, [r7, #0]
   22bc6:	0c1b      	lsrs	r3, r3, #16
   22bc8:	b2da      	uxtb	r2, r3
   22bca:	2338      	movs	r3, #56	; 0x38
   22bcc:	18fb      	adds	r3, r7, r3
   22bce:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   22bd0:	683b      	ldr	r3, [r7, #0]
   22bd2:	0a1b      	lsrs	r3, r3, #8
   22bd4:	b2da      	uxtb	r2, r3
   22bd6:	2338      	movs	r3, #56	; 0x38
   22bd8:	18fb      	adds	r3, r7, r3
   22bda:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   22bdc:	683b      	ldr	r3, [r7, #0]
   22bde:	b2da      	uxtb	r2, r3
   22be0:	2338      	movs	r3, #56	; 0x38
   22be2:	18fb      	adds	r3, r7, r3
   22be4:	719a      	strb	r2, [r3, #6]
		len = 8;
   22be6:	2308      	movs	r3, #8
   22be8:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22bea:	e05b      	b.n	22ca4 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   22bec:	68bb      	ldr	r3, [r7, #8]
   22bee:	0a1b      	lsrs	r3, r3, #8
   22bf0:	b2da      	uxtb	r2, r3
   22bf2:	2338      	movs	r3, #56	; 0x38
   22bf4:	18fb      	adds	r3, r7, r3
   22bf6:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   22bf8:	2388      	movs	r3, #136	; 0x88
   22bfa:	18fb      	adds	r3, r7, r3
   22bfc:	781b      	ldrb	r3, [r3, #0]
   22bfe:	2b01      	cmp	r3, #1
   22c00:	d109      	bne.n	22c16 <spi_cmd_complete+0x1b6>
   22c02:	2338      	movs	r3, #56	; 0x38
   22c04:	18fb      	adds	r3, r7, r3
   22c06:	785b      	ldrb	r3, [r3, #1]
   22c08:	2280      	movs	r2, #128	; 0x80
   22c0a:	4252      	negs	r2, r2
   22c0c:	4313      	orrs	r3, r2
   22c0e:	b2da      	uxtb	r2, r3
   22c10:	2338      	movs	r3, #56	; 0x38
   22c12:	18fb      	adds	r3, r7, r3
   22c14:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   22c16:	68bb      	ldr	r3, [r7, #8]
   22c18:	b2da      	uxtb	r2, r3
   22c1a:	2338      	movs	r3, #56	; 0x38
   22c1c:	18fb      	adds	r3, r7, r3
   22c1e:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   22c20:	687b      	ldr	r3, [r7, #4]
   22c22:	78da      	ldrb	r2, [r3, #3]
   22c24:	2338      	movs	r3, #56	; 0x38
   22c26:	18fb      	adds	r3, r7, r3
   22c28:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   22c2a:	687b      	ldr	r3, [r7, #4]
   22c2c:	789a      	ldrb	r2, [r3, #2]
   22c2e:	2338      	movs	r3, #56	; 0x38
   22c30:	18fb      	adds	r3, r7, r3
   22c32:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   22c34:	687b      	ldr	r3, [r7, #4]
   22c36:	785a      	ldrb	r2, [r3, #1]
   22c38:	2338      	movs	r3, #56	; 0x38
   22c3a:	18fb      	adds	r3, r7, r3
   22c3c:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   22c3e:	687b      	ldr	r3, [r7, #4]
   22c40:	781a      	ldrb	r2, [r3, #0]
   22c42:	2338      	movs	r3, #56	; 0x38
   22c44:	18fb      	adds	r3, r7, r3
   22c46:	719a      	strb	r2, [r3, #6]
		len = 8;
   22c48:	2308      	movs	r3, #8
   22c4a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22c4c:	e02a      	b.n	22ca4 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   22c4e:	68bb      	ldr	r3, [r7, #8]
   22c50:	0c1b      	lsrs	r3, r3, #16
   22c52:	b2da      	uxtb	r2, r3
   22c54:	2338      	movs	r3, #56	; 0x38
   22c56:	18fb      	adds	r3, r7, r3
   22c58:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   22c5a:	68bb      	ldr	r3, [r7, #8]
   22c5c:	0a1b      	lsrs	r3, r3, #8
   22c5e:	b2da      	uxtb	r2, r3
   22c60:	2338      	movs	r3, #56	; 0x38
   22c62:	18fb      	adds	r3, r7, r3
   22c64:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   22c66:	68bb      	ldr	r3, [r7, #8]
   22c68:	b2da      	uxtb	r2, r3
   22c6a:	2338      	movs	r3, #56	; 0x38
   22c6c:	18fb      	adds	r3, r7, r3
   22c6e:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   22c70:	687b      	ldr	r3, [r7, #4]
   22c72:	78da      	ldrb	r2, [r3, #3]
   22c74:	2338      	movs	r3, #56	; 0x38
   22c76:	18fb      	adds	r3, r7, r3
   22c78:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   22c7a:	687b      	ldr	r3, [r7, #4]
   22c7c:	789a      	ldrb	r2, [r3, #2]
   22c7e:	2338      	movs	r3, #56	; 0x38
   22c80:	18fb      	adds	r3, r7, r3
   22c82:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   22c84:	687b      	ldr	r3, [r7, #4]
   22c86:	785a      	ldrb	r2, [r3, #1]
   22c88:	2338      	movs	r3, #56	; 0x38
   22c8a:	18fb      	adds	r3, r7, r3
   22c8c:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   22c8e:	687b      	ldr	r3, [r7, #4]
   22c90:	781a      	ldrb	r2, [r3, #0]
   22c92:	2338      	movs	r3, #56	; 0x38
   22c94:	18fb      	adds	r3, r7, r3
   22c96:	71da      	strb	r2, [r3, #7]
		len = 9;
   22c98:	2309      	movs	r3, #9
   22c9a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22c9c:	e002      	b.n	22ca4 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   22c9e:	2300      	movs	r3, #0
   22ca0:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   22ca2:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   22ca4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22ca6:	2b01      	cmp	r3, #1
   22ca8:	d001      	beq.n	22cae <spi_cmd_complete+0x24e>
		return result;
   22caa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22cac:	e33a      	b.n	23324 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   22cae:	4b4d      	ldr	r3, [pc, #308]	; (22de4 <spi_cmd_complete+0x384>)
   22cb0:	781b      	ldrb	r3, [r3, #0]
   22cb2:	2b00      	cmp	r3, #0
   22cb4:	d111      	bne.n	22cda <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   22cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   22cb8:	1e5c      	subs	r4, r3, #1
   22cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   22cbc:	3b01      	subs	r3, #1
   22cbe:	001a      	movs	r2, r3
   22cc0:	2338      	movs	r3, #56	; 0x38
   22cc2:	18fb      	adds	r3, r7, r3
   22cc4:	0019      	movs	r1, r3
   22cc6:	207f      	movs	r0, #127	; 0x7f
   22cc8:	4b47      	ldr	r3, [pc, #284]	; (22de8 <spi_cmd_complete+0x388>)
   22cca:	4798      	blx	r3
   22ccc:	0003      	movs	r3, r0
   22cce:	18db      	adds	r3, r3, r3
   22cd0:	b2da      	uxtb	r2, r3
   22cd2:	2338      	movs	r3, #56	; 0x38
   22cd4:	18fb      	adds	r3, r7, r3
   22cd6:	551a      	strb	r2, [r3, r4]
   22cd8:	e002      	b.n	22ce0 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   22cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   22cdc:	3b01      	subs	r3, #1
   22cde:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   22ce0:	230f      	movs	r3, #15
   22ce2:	18fb      	adds	r3, r7, r3
   22ce4:	781b      	ldrb	r3, [r3, #0]
   22ce6:	2bcf      	cmp	r3, #207	; 0xcf
   22ce8:	d009      	beq.n	22cfe <spi_cmd_complete+0x29e>
   22cea:	230f      	movs	r3, #15
   22cec:	18fb      	adds	r3, r7, r3
   22cee:	781b      	ldrb	r3, [r3, #0]
   22cf0:	2bc5      	cmp	r3, #197	; 0xc5
   22cf2:	d004      	beq.n	22cfe <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   22cf4:	230f      	movs	r3, #15
   22cf6:	18fb      	adds	r3, r7, r3
   22cf8:	781b      	ldrb	r3, [r3, #0]
   22cfa:	2bc6      	cmp	r3, #198	; 0xc6
   22cfc:	d103      	bne.n	22d06 <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   22cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   22d00:	3306      	adds	r3, #6
   22d02:	673b      	str	r3, [r7, #112]	; 0x70
   22d04:	e018      	b.n	22d38 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   22d06:	230f      	movs	r3, #15
   22d08:	18fb      	adds	r3, r7, r3
   22d0a:	781b      	ldrb	r3, [r3, #0]
   22d0c:	2bc4      	cmp	r3, #196	; 0xc4
   22d0e:	d004      	beq.n	22d1a <spi_cmd_complete+0x2ba>
   22d10:	230f      	movs	r3, #15
   22d12:	18fb      	adds	r3, r7, r3
   22d14:	781b      	ldrb	r3, [r3, #0]
   22d16:	2bca      	cmp	r3, #202	; 0xca
   22d18:	d10b      	bne.n	22d32 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   22d1a:	4b32      	ldr	r3, [pc, #200]	; (22de4 <spi_cmd_complete+0x384>)
   22d1c:	781b      	ldrb	r3, [r3, #0]
   22d1e:	2b00      	cmp	r3, #0
   22d20:	d103      	bne.n	22d2a <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   22d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   22d24:	330c      	adds	r3, #12
   22d26:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   22d28:	e006      	b.n	22d38 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   22d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   22d2c:	330a      	adds	r3, #10
   22d2e:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   22d30:	e002      	b.n	22d38 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   22d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   22d34:	3305      	adds	r3, #5
   22d36:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   22d38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   22d3a:	2b20      	cmp	r3, #32
   22d3c:	d914      	bls.n	22d68 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   22d3e:	23f7      	movs	r3, #247	; 0xf7
   22d40:	005a      	lsls	r2, r3, #1
   22d42:	492a      	ldr	r1, [pc, #168]	; (22dec <spi_cmd_complete+0x38c>)
   22d44:	4b2a      	ldr	r3, [pc, #168]	; (22df0 <spi_cmd_complete+0x390>)
   22d46:	0018      	movs	r0, r3
   22d48:	4b2a      	ldr	r3, [pc, #168]	; (22df4 <spi_cmd_complete+0x394>)
   22d4a:	4798      	blx	r3
   22d4c:	6f39      	ldr	r1, [r7, #112]	; 0x70
   22d4e:	4b2a      	ldr	r3, [pc, #168]	; (22df8 <spi_cmd_complete+0x398>)
   22d50:	2220      	movs	r2, #32
   22d52:	0018      	movs	r0, r3
   22d54:	4b27      	ldr	r3, [pc, #156]	; (22df4 <spi_cmd_complete+0x394>)
   22d56:	4798      	blx	r3
   22d58:	4b28      	ldr	r3, [pc, #160]	; (22dfc <spi_cmd_complete+0x39c>)
   22d5a:	0018      	movs	r0, r3
   22d5c:	4b25      	ldr	r3, [pc, #148]	; (22df4 <spi_cmd_complete+0x394>)
   22d5e:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   22d60:	2300      	movs	r3, #0
   22d62:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   22d64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22d66:	e2dd      	b.n	23324 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   22d68:	2377      	movs	r3, #119	; 0x77
   22d6a:	18fb      	adds	r3, r7, r3
   22d6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   22d6e:	701a      	strb	r2, [r3, #0]
   22d70:	e00d      	b.n	22d8e <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   22d72:	2377      	movs	r3, #119	; 0x77
   22d74:	18fb      	adds	r3, r7, r3
   22d76:	781b      	ldrb	r3, [r3, #0]
   22d78:	2238      	movs	r2, #56	; 0x38
   22d7a:	18ba      	adds	r2, r7, r2
   22d7c:	2100      	movs	r1, #0
   22d7e:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   22d80:	2377      	movs	r3, #119	; 0x77
   22d82:	18fb      	adds	r3, r7, r3
   22d84:	781a      	ldrb	r2, [r3, #0]
   22d86:	2377      	movs	r3, #119	; 0x77
   22d88:	18fb      	adds	r3, r7, r3
   22d8a:	3201      	adds	r2, #1
   22d8c:	701a      	strb	r2, [r3, #0]
   22d8e:	2377      	movs	r3, #119	; 0x77
   22d90:	18fb      	adds	r3, r7, r3
   22d92:	781a      	ldrb	r2, [r3, #0]
   22d94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   22d96:	429a      	cmp	r2, r3
   22d98:	d3eb      	bcc.n	22d72 <spi_cmd_complete+0x312>
	}
	rix = len;
   22d9a:	2376      	movs	r3, #118	; 0x76
   22d9c:	18fb      	adds	r3, r7, r3
   22d9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   22da0:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   22da2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   22da4:	b29a      	uxth	r2, r3
   22da6:	2318      	movs	r3, #24
   22da8:	18f9      	adds	r1, r7, r3
   22daa:	2338      	movs	r3, #56	; 0x38
   22dac:	18fb      	adds	r3, r7, r3
   22dae:	0018      	movs	r0, r3
   22db0:	4b13      	ldr	r3, [pc, #76]	; (22e00 <spi_cmd_complete+0x3a0>)
   22db2:	4798      	blx	r3
   22db4:	1e03      	subs	r3, r0, #0
   22db6:	d027      	beq.n	22e08 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   22db8:	23fa      	movs	r3, #250	; 0xfa
   22dba:	33ff      	adds	r3, #255	; 0xff
   22dbc:	001a      	movs	r2, r3
   22dbe:	490b      	ldr	r1, [pc, #44]	; (22dec <spi_cmd_complete+0x38c>)
   22dc0:	4b0b      	ldr	r3, [pc, #44]	; (22df0 <spi_cmd_complete+0x390>)
   22dc2:	0018      	movs	r0, r3
   22dc4:	4b0b      	ldr	r3, [pc, #44]	; (22df4 <spi_cmd_complete+0x394>)
   22dc6:	4798      	blx	r3
   22dc8:	4b0e      	ldr	r3, [pc, #56]	; (22e04 <spi_cmd_complete+0x3a4>)
   22dca:	0018      	movs	r0, r3
   22dcc:	4b09      	ldr	r3, [pc, #36]	; (22df4 <spi_cmd_complete+0x394>)
   22dce:	4798      	blx	r3
   22dd0:	4b0a      	ldr	r3, [pc, #40]	; (22dfc <spi_cmd_complete+0x39c>)
   22dd2:	0018      	movs	r0, r3
   22dd4:	4b07      	ldr	r3, [pc, #28]	; (22df4 <spi_cmd_complete+0x394>)
   22dd6:	4798      	blx	r3
		result = N_FAIL;
   22dd8:	2300      	movs	r3, #0
   22dda:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   22ddc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22dde:	e2a1      	b.n	23324 <spi_cmd_complete+0x8c4>
   22de0:	00038d38 	.word	0x00038d38
   22de4:	2000427c 	.word	0x2000427c
   22de8:	00022495 	.word	0x00022495
   22dec:	00038d98 	.word	0x00038d98
   22df0:	00038784 	.word	0x00038784
   22df4:	0001cee9 	.word	0x0001cee9
   22df8:	0003884c 	.word	0x0003884c
   22dfc:	000387c4 	.word	0x000387c4
   22e00:	00022421 	.word	0x00022421
   22e04:	00038798 	.word	0x00038798
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   22e08:	230f      	movs	r3, #15
   22e0a:	18fb      	adds	r3, r7, r3
   22e0c:	781b      	ldrb	r3, [r3, #0]
   22e0e:	2bcf      	cmp	r3, #207	; 0xcf
   22e10:	d009      	beq.n	22e26 <spi_cmd_complete+0x3c6>
   22e12:	230f      	movs	r3, #15
   22e14:	18fb      	adds	r3, r7, r3
   22e16:	781b      	ldrb	r3, [r3, #0]
   22e18:	2bc5      	cmp	r3, #197	; 0xc5
   22e1a:	d004      	beq.n	22e26 <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   22e1c:	230f      	movs	r3, #15
   22e1e:	18fb      	adds	r3, r7, r3
   22e20:	781b      	ldrb	r3, [r3, #0]
   22e22:	2bc6      	cmp	r3, #198	; 0xc6
   22e24:	d106      	bne.n	22e34 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   22e26:	2376      	movs	r3, #118	; 0x76
   22e28:	18fb      	adds	r3, r7, r3
   22e2a:	781a      	ldrb	r2, [r3, #0]
   22e2c:	2376      	movs	r3, #118	; 0x76
   22e2e:	18fb      	adds	r3, r7, r3
   22e30:	3201      	adds	r2, #1
   22e32:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   22e34:	2376      	movs	r3, #118	; 0x76
   22e36:	18fb      	adds	r3, r7, r3
   22e38:	781b      	ldrb	r3, [r3, #0]
   22e3a:	2276      	movs	r2, #118	; 0x76
   22e3c:	18ba      	adds	r2, r7, r2
   22e3e:	1c59      	adds	r1, r3, #1
   22e40:	7011      	strb	r1, [r2, #0]
   22e42:	001a      	movs	r2, r3
   22e44:	2318      	movs	r3, #24
   22e46:	18fb      	adds	r3, r7, r3
   22e48:	5c9a      	ldrb	r2, [r3, r2]
   22e4a:	2317      	movs	r3, #23
   22e4c:	18fb      	adds	r3, r7, r3
   22e4e:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   22e50:	2317      	movs	r3, #23
   22e52:	18fb      	adds	r3, r7, r3
   22e54:	781b      	ldrb	r3, [r3, #0]
   22e56:	220f      	movs	r2, #15
   22e58:	18ba      	adds	r2, r7, r2
   22e5a:	7812      	ldrb	r2, [r2, #0]
   22e5c:	429a      	cmp	r2, r3
   22e5e:	d018      	beq.n	22e92 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   22e60:	4add      	ldr	r2, [pc, #884]	; (231d8 <spi_cmd_complete+0x778>)
   22e62:	49de      	ldr	r1, [pc, #888]	; (231dc <spi_cmd_complete+0x77c>)
   22e64:	4bde      	ldr	r3, [pc, #888]	; (231e0 <spi_cmd_complete+0x780>)
   22e66:	0018      	movs	r0, r3
   22e68:	4bde      	ldr	r3, [pc, #888]	; (231e4 <spi_cmd_complete+0x784>)
   22e6a:	4798      	blx	r3
   22e6c:	230f      	movs	r3, #15
   22e6e:	18fb      	adds	r3, r7, r3
   22e70:	7819      	ldrb	r1, [r3, #0]
   22e72:	2317      	movs	r3, #23
   22e74:	18fb      	adds	r3, r7, r3
   22e76:	781b      	ldrb	r3, [r3, #0]
   22e78:	001a      	movs	r2, r3
   22e7a:	4bdb      	ldr	r3, [pc, #876]	; (231e8 <spi_cmd_complete+0x788>)
   22e7c:	0018      	movs	r0, r3
   22e7e:	4bd9      	ldr	r3, [pc, #868]	; (231e4 <spi_cmd_complete+0x784>)
   22e80:	4798      	blx	r3
   22e82:	4bda      	ldr	r3, [pc, #872]	; (231ec <spi_cmd_complete+0x78c>)
   22e84:	0018      	movs	r0, r3
   22e86:	4bd7      	ldr	r3, [pc, #860]	; (231e4 <spi_cmd_complete+0x784>)
   22e88:	4798      	blx	r3
		result = N_FAIL;
   22e8a:	2300      	movs	r3, #0
   22e8c:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   22e8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22e90:	e248      	b.n	23324 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   22e92:	2376      	movs	r3, #118	; 0x76
   22e94:	18fb      	adds	r3, r7, r3
   22e96:	781b      	ldrb	r3, [r3, #0]
   22e98:	2276      	movs	r2, #118	; 0x76
   22e9a:	18ba      	adds	r2, r7, r2
   22e9c:	1c59      	adds	r1, r3, #1
   22e9e:	7011      	strb	r1, [r2, #0]
   22ea0:	001a      	movs	r2, r3
   22ea2:	2318      	movs	r3, #24
   22ea4:	18fb      	adds	r3, r7, r3
   22ea6:	5c9a      	ldrb	r2, [r3, r2]
   22ea8:	2317      	movs	r3, #23
   22eaa:	18fb      	adds	r3, r7, r3
   22eac:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   22eae:	2317      	movs	r3, #23
   22eb0:	18fb      	adds	r3, r7, r3
   22eb2:	781b      	ldrb	r3, [r3, #0]
   22eb4:	2b00      	cmp	r3, #0
   22eb6:	d016      	beq.n	22ee6 <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   22eb8:	4acd      	ldr	r2, [pc, #820]	; (231f0 <spi_cmd_complete+0x790>)
   22eba:	49c8      	ldr	r1, [pc, #800]	; (231dc <spi_cmd_complete+0x77c>)
   22ebc:	4bc8      	ldr	r3, [pc, #800]	; (231e0 <spi_cmd_complete+0x780>)
   22ebe:	0018      	movs	r0, r3
   22ec0:	4bc8      	ldr	r3, [pc, #800]	; (231e4 <spi_cmd_complete+0x784>)
   22ec2:	4798      	blx	r3
   22ec4:	2317      	movs	r3, #23
   22ec6:	18fb      	adds	r3, r7, r3
   22ec8:	781b      	ldrb	r3, [r3, #0]
   22eca:	001a      	movs	r2, r3
   22ecc:	4bc9      	ldr	r3, [pc, #804]	; (231f4 <spi_cmd_complete+0x794>)
   22ece:	0011      	movs	r1, r2
   22ed0:	0018      	movs	r0, r3
   22ed2:	4bc4      	ldr	r3, [pc, #784]	; (231e4 <spi_cmd_complete+0x784>)
   22ed4:	4798      	blx	r3
   22ed6:	4bc5      	ldr	r3, [pc, #788]	; (231ec <spi_cmd_complete+0x78c>)
   22ed8:	0018      	movs	r0, r3
   22eda:	4bc2      	ldr	r3, [pc, #776]	; (231e4 <spi_cmd_complete+0x784>)
   22edc:	4798      	blx	r3
		result = N_FAIL;
   22ede:	2300      	movs	r3, #0
   22ee0:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   22ee2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22ee4:	e21e      	b.n	23324 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   22ee6:	230f      	movs	r3, #15
   22ee8:	18fb      	adds	r3, r7, r3
   22eea:	781b      	ldrb	r3, [r3, #0]
   22eec:	2bc4      	cmp	r3, #196	; 0xc4
   22eee:	d00f      	beq.n	22f10 <spi_cmd_complete+0x4b0>
   22ef0:	230f      	movs	r3, #15
   22ef2:	18fb      	adds	r3, r7, r3
   22ef4:	781b      	ldrb	r3, [r3, #0]
   22ef6:	2bca      	cmp	r3, #202	; 0xca
   22ef8:	d00a      	beq.n	22f10 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   22efa:	230f      	movs	r3, #15
   22efc:	18fb      	adds	r3, r7, r3
   22efe:	781b      	ldrb	r3, [r3, #0]
   22f00:	2bc2      	cmp	r3, #194	; 0xc2
   22f02:	d005      	beq.n	22f10 <spi_cmd_complete+0x4b0>
   22f04:	230f      	movs	r3, #15
   22f06:	18fb      	adds	r3, r7, r3
   22f08:	781b      	ldrb	r3, [r3, #0]
   22f0a:	2bc8      	cmp	r3, #200	; 0xc8
   22f0c:	d000      	beq.n	22f10 <spi_cmd_complete+0x4b0>
   22f0e:	e208      	b.n	23322 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   22f10:	230a      	movs	r3, #10
   22f12:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   22f14:	2376      	movs	r3, #118	; 0x76
   22f16:	18fb      	adds	r3, r7, r3
   22f18:	781a      	ldrb	r2, [r3, #0]
   22f1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   22f1c:	429a      	cmp	r2, r3
   22f1e:	d218      	bcs.n	22f52 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   22f20:	2376      	movs	r3, #118	; 0x76
   22f22:	18fb      	adds	r3, r7, r3
   22f24:	781b      	ldrb	r3, [r3, #0]
   22f26:	2276      	movs	r2, #118	; 0x76
   22f28:	18ba      	adds	r2, r7, r2
   22f2a:	1c59      	adds	r1, r3, #1
   22f2c:	7011      	strb	r1, [r2, #0]
   22f2e:	001a      	movs	r2, r3
   22f30:	2318      	movs	r3, #24
   22f32:	18fb      	adds	r3, r7, r3
   22f34:	5c9a      	ldrb	r2, [r3, r2]
   22f36:	2317      	movs	r3, #23
   22f38:	18fb      	adds	r3, r7, r3
   22f3a:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   22f3c:	2317      	movs	r3, #23
   22f3e:	18fb      	adds	r3, r7, r3
   22f40:	781b      	ldrb	r3, [r3, #0]
   22f42:	091b      	lsrs	r3, r3, #4
   22f44:	b2db      	uxtb	r3, r3
   22f46:	001a      	movs	r2, r3
   22f48:	230f      	movs	r3, #15
   22f4a:	4013      	ands	r3, r2
   22f4c:	2b0f      	cmp	r3, #15
   22f4e:	d103      	bne.n	22f58 <spi_cmd_complete+0x4f8>
					break;
   22f50:	e007      	b.n	22f62 <spi_cmd_complete+0x502>
					retry = 0;
   22f52:	2300      	movs	r3, #0
   22f54:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   22f56:	e004      	b.n	22f62 <spi_cmd_complete+0x502>
			} while (retry--);
   22f58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   22f5a:	1e5a      	subs	r2, r3, #1
   22f5c:	667a      	str	r2, [r7, #100]	; 0x64
   22f5e:	2b00      	cmp	r3, #0
   22f60:	d1d8      	bne.n	22f14 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   22f62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   22f64:	2b00      	cmp	r3, #0
   22f66:	dc18      	bgt.n	22f9a <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   22f68:	2395      	movs	r3, #149	; 0x95
   22f6a:	009a      	lsls	r2, r3, #2
   22f6c:	499b      	ldr	r1, [pc, #620]	; (231dc <spi_cmd_complete+0x77c>)
   22f6e:	4b9c      	ldr	r3, [pc, #624]	; (231e0 <spi_cmd_complete+0x780>)
   22f70:	0018      	movs	r0, r3
   22f72:	4b9c      	ldr	r3, [pc, #624]	; (231e4 <spi_cmd_complete+0x784>)
   22f74:	4798      	blx	r3
   22f76:	2317      	movs	r3, #23
   22f78:	18fb      	adds	r3, r7, r3
   22f7a:	781b      	ldrb	r3, [r3, #0]
   22f7c:	001a      	movs	r2, r3
   22f7e:	4b9e      	ldr	r3, [pc, #632]	; (231f8 <spi_cmd_complete+0x798>)
   22f80:	0011      	movs	r1, r2
   22f82:	0018      	movs	r0, r3
   22f84:	4b97      	ldr	r3, [pc, #604]	; (231e4 <spi_cmd_complete+0x784>)
   22f86:	4798      	blx	r3
   22f88:	4b98      	ldr	r3, [pc, #608]	; (231ec <spi_cmd_complete+0x78c>)
   22f8a:	0018      	movs	r0, r3
   22f8c:	4b95      	ldr	r3, [pc, #596]	; (231e4 <spi_cmd_complete+0x784>)
   22f8e:	4798      	blx	r3
				result = N_RESET;
   22f90:	2301      	movs	r3, #1
   22f92:	425b      	negs	r3, r3
   22f94:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   22f96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22f98:	e1c4      	b.n	23324 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   22f9a:	230f      	movs	r3, #15
   22f9c:	18fb      	adds	r3, r7, r3
   22f9e:	781b      	ldrb	r3, [r3, #0]
   22fa0:	2bc4      	cmp	r3, #196	; 0xc4
   22fa2:	d005      	beq.n	22fb0 <spi_cmd_complete+0x550>
   22fa4:	230f      	movs	r3, #15
   22fa6:	18fb      	adds	r3, r7, r3
   22fa8:	781b      	ldrb	r3, [r3, #0]
   22faa:	2bca      	cmp	r3, #202	; 0xca
   22fac:	d000      	beq.n	22fb0 <spi_cmd_complete+0x550>
   22fae:	e08e      	b.n	230ce <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   22fb0:	2376      	movs	r3, #118	; 0x76
   22fb2:	18fb      	adds	r3, r7, r3
   22fb4:	781b      	ldrb	r3, [r3, #0]
   22fb6:	3303      	adds	r3, #3
   22fb8:	001a      	movs	r2, r3
   22fba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   22fbc:	429a      	cmp	r2, r3
   22fbe:	d23c      	bcs.n	2303a <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   22fc0:	2376      	movs	r3, #118	; 0x76
   22fc2:	18fb      	adds	r3, r7, r3
   22fc4:	781b      	ldrb	r3, [r3, #0]
   22fc6:	2276      	movs	r2, #118	; 0x76
   22fc8:	18ba      	adds	r2, r7, r2
   22fca:	1c59      	adds	r1, r3, #1
   22fcc:	7011      	strb	r1, [r2, #0]
   22fce:	001a      	movs	r2, r3
   22fd0:	2318      	movs	r3, #24
   22fd2:	18fb      	adds	r3, r7, r3
   22fd4:	5c9a      	ldrb	r2, [r3, r2]
   22fd6:	687b      	ldr	r3, [r7, #4]
   22fd8:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   22fda:	687b      	ldr	r3, [r7, #4]
   22fdc:	1c5a      	adds	r2, r3, #1
   22fde:	2376      	movs	r3, #118	; 0x76
   22fe0:	18fb      	adds	r3, r7, r3
   22fe2:	781b      	ldrb	r3, [r3, #0]
   22fe4:	2176      	movs	r1, #118	; 0x76
   22fe6:	1879      	adds	r1, r7, r1
   22fe8:	1c58      	adds	r0, r3, #1
   22fea:	7008      	strb	r0, [r1, #0]
   22fec:	0019      	movs	r1, r3
   22fee:	2318      	movs	r3, #24
   22ff0:	18fb      	adds	r3, r7, r3
   22ff2:	5c5b      	ldrb	r3, [r3, r1]
   22ff4:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   22ff6:	687b      	ldr	r3, [r7, #4]
   22ff8:	1c9a      	adds	r2, r3, #2
   22ffa:	2376      	movs	r3, #118	; 0x76
   22ffc:	18fb      	adds	r3, r7, r3
   22ffe:	781b      	ldrb	r3, [r3, #0]
   23000:	2176      	movs	r1, #118	; 0x76
   23002:	1879      	adds	r1, r7, r1
   23004:	1c58      	adds	r0, r3, #1
   23006:	7008      	strb	r0, [r1, #0]
   23008:	0019      	movs	r1, r3
   2300a:	2318      	movs	r3, #24
   2300c:	18fb      	adds	r3, r7, r3
   2300e:	5c5b      	ldrb	r3, [r3, r1]
   23010:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   23012:	687b      	ldr	r3, [r7, #4]
   23014:	1cda      	adds	r2, r3, #3
   23016:	2376      	movs	r3, #118	; 0x76
   23018:	18fb      	adds	r3, r7, r3
   2301a:	781b      	ldrb	r3, [r3, #0]
   2301c:	2176      	movs	r1, #118	; 0x76
   2301e:	1879      	adds	r1, r7, r1
   23020:	1c58      	adds	r0, r3, #1
   23022:	7008      	strb	r0, [r1, #0]
   23024:	0019      	movs	r1, r3
   23026:	2318      	movs	r3, #24
   23028:	18fb      	adds	r3, r7, r3
   2302a:	5c5b      	ldrb	r3, [r3, r1]
   2302c:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   2302e:	4b73      	ldr	r3, [pc, #460]	; (231fc <spi_cmd_complete+0x79c>)
   23030:	781b      	ldrb	r3, [r3, #0]
   23032:	2b00      	cmp	r3, #0
   23034:	d000      	beq.n	23038 <spi_cmd_complete+0x5d8>
   23036:	e174      	b.n	23322 <spi_cmd_complete+0x8c2>
   23038:	e011      	b.n	2305e <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   2303a:	4a71      	ldr	r2, [pc, #452]	; (23200 <spi_cmd_complete+0x7a0>)
   2303c:	4967      	ldr	r1, [pc, #412]	; (231dc <spi_cmd_complete+0x77c>)
   2303e:	4b68      	ldr	r3, [pc, #416]	; (231e0 <spi_cmd_complete+0x780>)
   23040:	0018      	movs	r0, r3
   23042:	4b68      	ldr	r3, [pc, #416]	; (231e4 <spi_cmd_complete+0x784>)
   23044:	4798      	blx	r3
   23046:	4b6f      	ldr	r3, [pc, #444]	; (23204 <spi_cmd_complete+0x7a4>)
   23048:	0018      	movs	r0, r3
   2304a:	4b66      	ldr	r3, [pc, #408]	; (231e4 <spi_cmd_complete+0x784>)
   2304c:	4798      	blx	r3
   2304e:	4b67      	ldr	r3, [pc, #412]	; (231ec <spi_cmd_complete+0x78c>)
   23050:	0018      	movs	r0, r3
   23052:	4b64      	ldr	r3, [pc, #400]	; (231e4 <spi_cmd_complete+0x784>)
   23054:	4798      	blx	r3
					result = N_FAIL;
   23056:	2300      	movs	r3, #0
   23058:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   2305a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2305c:	e162      	b.n	23324 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   2305e:	2376      	movs	r3, #118	; 0x76
   23060:	18fb      	adds	r3, r7, r3
   23062:	781b      	ldrb	r3, [r3, #0]
   23064:	3301      	adds	r3, #1
   23066:	001a      	movs	r2, r3
   23068:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2306a:	429a      	cmp	r2, r3
   2306c:	d21c      	bcs.n	230a8 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   2306e:	2376      	movs	r3, #118	; 0x76
   23070:	18fb      	adds	r3, r7, r3
   23072:	781b      	ldrb	r3, [r3, #0]
   23074:	2276      	movs	r2, #118	; 0x76
   23076:	18ba      	adds	r2, r7, r2
   23078:	1c59      	adds	r1, r3, #1
   2307a:	7011      	strb	r1, [r2, #0]
   2307c:	001a      	movs	r2, r3
   2307e:	2318      	movs	r3, #24
   23080:	18fb      	adds	r3, r7, r3
   23082:	5c9a      	ldrb	r2, [r3, r2]
   23084:	2314      	movs	r3, #20
   23086:	18fb      	adds	r3, r7, r3
   23088:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   2308a:	2376      	movs	r3, #118	; 0x76
   2308c:	18fb      	adds	r3, r7, r3
   2308e:	781b      	ldrb	r3, [r3, #0]
   23090:	2276      	movs	r2, #118	; 0x76
   23092:	18ba      	adds	r2, r7, r2
   23094:	1c59      	adds	r1, r3, #1
   23096:	7011      	strb	r1, [r2, #0]
   23098:	001a      	movs	r2, r3
   2309a:	2318      	movs	r3, #24
   2309c:	18fb      	adds	r3, r7, r3
   2309e:	5c9a      	ldrb	r2, [r3, r2]
   230a0:	2314      	movs	r3, #20
   230a2:	18fb      	adds	r3, r7, r3
   230a4:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   230a6:	e13c      	b.n	23322 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   230a8:	239c      	movs	r3, #156	; 0x9c
   230aa:	009a      	lsls	r2, r3, #2
   230ac:	494b      	ldr	r1, [pc, #300]	; (231dc <spi_cmd_complete+0x77c>)
   230ae:	4b4c      	ldr	r3, [pc, #304]	; (231e0 <spi_cmd_complete+0x780>)
   230b0:	0018      	movs	r0, r3
   230b2:	4b4c      	ldr	r3, [pc, #304]	; (231e4 <spi_cmd_complete+0x784>)
   230b4:	4798      	blx	r3
   230b6:	4b54      	ldr	r3, [pc, #336]	; (23208 <spi_cmd_complete+0x7a8>)
   230b8:	0018      	movs	r0, r3
   230ba:	4b4a      	ldr	r3, [pc, #296]	; (231e4 <spi_cmd_complete+0x784>)
   230bc:	4798      	blx	r3
   230be:	4b4b      	ldr	r3, [pc, #300]	; (231ec <spi_cmd_complete+0x78c>)
   230c0:	0018      	movs	r0, r3
   230c2:	4b48      	ldr	r3, [pc, #288]	; (231e4 <spi_cmd_complete+0x784>)
   230c4:	4798      	blx	r3
						result = N_FAIL;
   230c6:	2300      	movs	r3, #0
   230c8:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   230ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   230cc:	e12a      	b.n	23324 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   230ce:	230f      	movs	r3, #15
   230d0:	18fb      	adds	r3, r7, r3
   230d2:	781b      	ldrb	r3, [r3, #0]
   230d4:	2bc2      	cmp	r3, #194	; 0xc2
   230d6:	d005      	beq.n	230e4 <spi_cmd_complete+0x684>
   230d8:	230f      	movs	r3, #15
   230da:	18fb      	adds	r3, r7, r3
   230dc:	781b      	ldrb	r3, [r3, #0]
   230de:	2bc8      	cmp	r3, #200	; 0xc8
   230e0:	d000      	beq.n	230e4 <spi_cmd_complete+0x684>
   230e2:	e11e      	b.n	23322 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   230e4:	2300      	movs	r3, #0
   230e6:	663b      	str	r3, [r7, #96]	; 0x60
   230e8:	e011      	b.n	2310e <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   230ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   230ec:	1c5a      	adds	r2, r3, #1
   230ee:	663a      	str	r2, [r7, #96]	; 0x60
   230f0:	001a      	movs	r2, r3
   230f2:	687b      	ldr	r3, [r7, #4]
   230f4:	189a      	adds	r2, r3, r2
   230f6:	2376      	movs	r3, #118	; 0x76
   230f8:	18fb      	adds	r3, r7, r3
   230fa:	781b      	ldrb	r3, [r3, #0]
   230fc:	2176      	movs	r1, #118	; 0x76
   230fe:	1879      	adds	r1, r7, r1
   23100:	1c58      	adds	r0, r3, #1
   23102:	7008      	strb	r0, [r1, #0]
   23104:	0019      	movs	r1, r3
   23106:	2318      	movs	r3, #24
   23108:	18fb      	adds	r3, r7, r3
   2310a:	5c5b      	ldrb	r3, [r3, r1]
   2310c:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   2310e:	2376      	movs	r3, #118	; 0x76
   23110:	18fb      	adds	r3, r7, r3
   23112:	781a      	ldrb	r2, [r3, #0]
   23114:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23116:	429a      	cmp	r2, r3
   23118:	d203      	bcs.n	23122 <spi_cmd_complete+0x6c2>
   2311a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   2311c:	683b      	ldr	r3, [r7, #0]
   2311e:	429a      	cmp	r2, r3
   23120:	d3e3      	bcc.n	230ea <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   23122:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23124:	683a      	ldr	r2, [r7, #0]
   23126:	1ad3      	subs	r3, r2, r3
   23128:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   2312a:	683b      	ldr	r3, [r7, #0]
   2312c:	2b00      	cmp	r3, #0
   2312e:	d100      	bne.n	23132 <spi_cmd_complete+0x6d2>
   23130:	e0f1      	b.n	23316 <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   23132:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23134:	2280      	movs	r2, #128	; 0x80
   23136:	0192      	lsls	r2, r2, #6
   23138:	1ad3      	subs	r3, r2, r3
   2313a:	001a      	movs	r2, r3
   2313c:	683b      	ldr	r3, [r7, #0]
   2313e:	429a      	cmp	r2, r3
   23140:	d302      	bcc.n	23148 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   23142:	683b      	ldr	r3, [r7, #0]
   23144:	65fb      	str	r3, [r7, #92]	; 0x5c
   23146:	e004      	b.n	23152 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   23148:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2314a:	2280      	movs	r2, #128	; 0x80
   2314c:	0192      	lsls	r2, r2, #6
   2314e:	1ad3      	subs	r3, r2, r3
   23150:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   23152:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23154:	687a      	ldr	r2, [r7, #4]
   23156:	18d3      	adds	r3, r2, r3
   23158:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   2315a:	b292      	uxth	r2, r2
   2315c:	0011      	movs	r1, r2
   2315e:	0018      	movs	r0, r3
   23160:	4b2a      	ldr	r3, [pc, #168]	; (2320c <spi_cmd_complete+0x7ac>)
   23162:	4798      	blx	r3
   23164:	1e03      	subs	r3, r0, #0
   23166:	d010      	beq.n	2318a <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   23168:	4a29      	ldr	r2, [pc, #164]	; (23210 <spi_cmd_complete+0x7b0>)
   2316a:	491c      	ldr	r1, [pc, #112]	; (231dc <spi_cmd_complete+0x77c>)
   2316c:	4b1c      	ldr	r3, [pc, #112]	; (231e0 <spi_cmd_complete+0x780>)
   2316e:	0018      	movs	r0, r3
   23170:	4b1c      	ldr	r3, [pc, #112]	; (231e4 <spi_cmd_complete+0x784>)
   23172:	4798      	blx	r3
   23174:	4b27      	ldr	r3, [pc, #156]	; (23214 <spi_cmd_complete+0x7b4>)
   23176:	0018      	movs	r0, r3
   23178:	4b1a      	ldr	r3, [pc, #104]	; (231e4 <spi_cmd_complete+0x784>)
   2317a:	4798      	blx	r3
   2317c:	4b1b      	ldr	r3, [pc, #108]	; (231ec <spi_cmd_complete+0x78c>)
   2317e:	0018      	movs	r0, r3
   23180:	4b18      	ldr	r3, [pc, #96]	; (231e4 <spi_cmd_complete+0x784>)
   23182:	4798      	blx	r3
						result = N_FAIL;
   23184:	2300      	movs	r3, #0
   23186:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   23188:	e0cb      	b.n	23322 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   2318a:	4b1c      	ldr	r3, [pc, #112]	; (231fc <spi_cmd_complete+0x79c>)
   2318c:	781b      	ldrb	r3, [r3, #0]
   2318e:	2b00      	cmp	r3, #0
   23190:	d119      	bne.n	231c6 <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   23192:	2314      	movs	r3, #20
   23194:	18fb      	adds	r3, r7, r3
   23196:	2102      	movs	r1, #2
   23198:	0018      	movs	r0, r3
   2319a:	4b1c      	ldr	r3, [pc, #112]	; (2320c <spi_cmd_complete+0x7ac>)
   2319c:	4798      	blx	r3
   2319e:	1e03      	subs	r3, r0, #0
   231a0:	d011      	beq.n	231c6 <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   231a2:	23a6      	movs	r3, #166	; 0xa6
   231a4:	009a      	lsls	r2, r3, #2
   231a6:	490d      	ldr	r1, [pc, #52]	; (231dc <spi_cmd_complete+0x77c>)
   231a8:	4b0d      	ldr	r3, [pc, #52]	; (231e0 <spi_cmd_complete+0x780>)
   231aa:	0018      	movs	r0, r3
   231ac:	4b0d      	ldr	r3, [pc, #52]	; (231e4 <spi_cmd_complete+0x784>)
   231ae:	4798      	blx	r3
   231b0:	4b19      	ldr	r3, [pc, #100]	; (23218 <spi_cmd_complete+0x7b8>)
   231b2:	0018      	movs	r0, r3
   231b4:	4b0b      	ldr	r3, [pc, #44]	; (231e4 <spi_cmd_complete+0x784>)
   231b6:	4798      	blx	r3
   231b8:	4b0c      	ldr	r3, [pc, #48]	; (231ec <spi_cmd_complete+0x78c>)
   231ba:	0018      	movs	r0, r3
   231bc:	4b09      	ldr	r3, [pc, #36]	; (231e4 <spi_cmd_complete+0x784>)
   231be:	4798      	blx	r3
							result = N_FAIL;
   231c0:	2300      	movs	r3, #0
   231c2:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   231c4:	e0ad      	b.n	23322 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   231c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   231c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   231ca:	18d3      	adds	r3, r2, r3
   231cc:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   231ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   231d0:	683a      	ldr	r2, [r7, #0]
   231d2:	1ad3      	subs	r3, r2, r3
   231d4:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   231d6:	e09e      	b.n	23316 <spi_cmd_complete+0x8b6>
   231d8:	0000022f 	.word	0x0000022f
   231dc:	00038d98 	.word	0x00038d98
   231e0:	00038784 	.word	0x00038784
   231e4:	0001cee9 	.word	0x0001cee9
   231e8:	0003887c 	.word	0x0003887c
   231ec:	000387c4 	.word	0x000387c4
   231f0:	00000239 	.word	0x00000239
   231f4:	000388b8 	.word	0x000388b8
   231f8:	000388ec 	.word	0x000388ec
   231fc:	2000427c 	.word	0x2000427c
   23200:	00000263 	.word	0x00000263
   23204:	0003891c 	.word	0x0003891c
   23208:	0003894c 	.word	0x0003894c
   2320c:	00022399 	.word	0x00022399
   23210:	0000028e 	.word	0x0000028e
   23214:	0003897c 	.word	0x0003897c
   23218:	000389b0 	.word	0x000389b0
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   2321c:	683a      	ldr	r2, [r7, #0]
   2321e:	2380      	movs	r3, #128	; 0x80
   23220:	019b      	lsls	r3, r3, #6
   23222:	429a      	cmp	r2, r3
   23224:	d802      	bhi.n	2322c <spi_cmd_complete+0x7cc>
						nbytes = sz;
   23226:	683b      	ldr	r3, [r7, #0]
   23228:	65bb      	str	r3, [r7, #88]	; 0x58
   2322a:	e002      	b.n	23232 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   2322c:	2380      	movs	r3, #128	; 0x80
   2322e:	019b      	lsls	r3, r3, #6
   23230:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   23232:	230a      	movs	r3, #10
   23234:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   23236:	2317      	movs	r3, #23
   23238:	18fb      	adds	r3, r7, r3
   2323a:	2101      	movs	r1, #1
   2323c:	0018      	movs	r0, r3
   2323e:	4b3b      	ldr	r3, [pc, #236]	; (2332c <spi_cmd_complete+0x8cc>)
   23240:	4798      	blx	r3
   23242:	1e03      	subs	r3, r0, #0
   23244:	d011      	beq.n	2326a <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   23246:	23ae      	movs	r3, #174	; 0xae
   23248:	009a      	lsls	r2, r3, #2
   2324a:	4939      	ldr	r1, [pc, #228]	; (23330 <spi_cmd_complete+0x8d0>)
   2324c:	4b39      	ldr	r3, [pc, #228]	; (23334 <spi_cmd_complete+0x8d4>)
   2324e:	0018      	movs	r0, r3
   23250:	4b39      	ldr	r3, [pc, #228]	; (23338 <spi_cmd_complete+0x8d8>)
   23252:	4798      	blx	r3
   23254:	4b39      	ldr	r3, [pc, #228]	; (2333c <spi_cmd_complete+0x8dc>)
   23256:	0018      	movs	r0, r3
   23258:	4b37      	ldr	r3, [pc, #220]	; (23338 <spi_cmd_complete+0x8d8>)
   2325a:	4798      	blx	r3
   2325c:	4b38      	ldr	r3, [pc, #224]	; (23340 <spi_cmd_complete+0x8e0>)
   2325e:	0018      	movs	r0, r3
   23260:	4b35      	ldr	r3, [pc, #212]	; (23338 <spi_cmd_complete+0x8d8>)
   23262:	4798      	blx	r3
							result = N_FAIL;
   23264:	2300      	movs	r3, #0
   23266:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   23268:	e010      	b.n	2328c <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   2326a:	2317      	movs	r3, #23
   2326c:	18fb      	adds	r3, r7, r3
   2326e:	781b      	ldrb	r3, [r3, #0]
   23270:	091b      	lsrs	r3, r3, #4
   23272:	b2db      	uxtb	r3, r3
   23274:	001a      	movs	r2, r3
   23276:	230f      	movs	r3, #15
   23278:	4013      	ands	r3, r2
   2327a:	2b0f      	cmp	r3, #15
   2327c:	d005      	beq.n	2328a <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   2327e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   23280:	1e5a      	subs	r2, r3, #1
   23282:	667a      	str	r2, [r7, #100]	; 0x64
   23284:	2b00      	cmp	r3, #0
   23286:	d1d6      	bne.n	23236 <spi_cmd_complete+0x7d6>
   23288:	e000      	b.n	2328c <spi_cmd_complete+0x82c>
							break;
   2328a:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   2328c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2328e:	2b00      	cmp	r3, #0
   23290:	d046      	beq.n	23320 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   23292:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23294:	687a      	ldr	r2, [r7, #4]
   23296:	18d3      	adds	r3, r2, r3
   23298:	6dba      	ldr	r2, [r7, #88]	; 0x58
   2329a:	b292      	uxth	r2, r2
   2329c:	0011      	movs	r1, r2
   2329e:	0018      	movs	r0, r3
   232a0:	4b22      	ldr	r3, [pc, #136]	; (2332c <spi_cmd_complete+0x8cc>)
   232a2:	4798      	blx	r3
   232a4:	1e03      	subs	r3, r0, #0
   232a6:	d011      	beq.n	232cc <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   232a8:	23b2      	movs	r3, #178	; 0xb2
   232aa:	009a      	lsls	r2, r3, #2
   232ac:	4920      	ldr	r1, [pc, #128]	; (23330 <spi_cmd_complete+0x8d0>)
   232ae:	4b21      	ldr	r3, [pc, #132]	; (23334 <spi_cmd_complete+0x8d4>)
   232b0:	0018      	movs	r0, r3
   232b2:	4b21      	ldr	r3, [pc, #132]	; (23338 <spi_cmd_complete+0x8d8>)
   232b4:	4798      	blx	r3
   232b6:	4b23      	ldr	r3, [pc, #140]	; (23344 <spi_cmd_complete+0x8e4>)
   232b8:	0018      	movs	r0, r3
   232ba:	4b1f      	ldr	r3, [pc, #124]	; (23338 <spi_cmd_complete+0x8d8>)
   232bc:	4798      	blx	r3
   232be:	4b20      	ldr	r3, [pc, #128]	; (23340 <spi_cmd_complete+0x8e0>)
   232c0:	0018      	movs	r0, r3
   232c2:	4b1d      	ldr	r3, [pc, #116]	; (23338 <spi_cmd_complete+0x8d8>)
   232c4:	4798      	blx	r3
						result = N_FAIL;
   232c6:	2300      	movs	r3, #0
   232c8:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   232ca:	e02a      	b.n	23322 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   232cc:	4b1e      	ldr	r3, [pc, #120]	; (23348 <spi_cmd_complete+0x8e8>)
   232ce:	781b      	ldrb	r3, [r3, #0]
   232d0:	2b00      	cmp	r3, #0
   232d2:	d118      	bne.n	23306 <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   232d4:	2314      	movs	r3, #20
   232d6:	18fb      	adds	r3, r7, r3
   232d8:	2102      	movs	r1, #2
   232da:	0018      	movs	r0, r3
   232dc:	4b13      	ldr	r3, [pc, #76]	; (2332c <spi_cmd_complete+0x8cc>)
   232de:	4798      	blx	r3
   232e0:	1e03      	subs	r3, r0, #0
   232e2:	d010      	beq.n	23306 <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   232e4:	4a19      	ldr	r2, [pc, #100]	; (2334c <spi_cmd_complete+0x8ec>)
   232e6:	4912      	ldr	r1, [pc, #72]	; (23330 <spi_cmd_complete+0x8d0>)
   232e8:	4b12      	ldr	r3, [pc, #72]	; (23334 <spi_cmd_complete+0x8d4>)
   232ea:	0018      	movs	r0, r3
   232ec:	4b12      	ldr	r3, [pc, #72]	; (23338 <spi_cmd_complete+0x8d8>)
   232ee:	4798      	blx	r3
   232f0:	4b17      	ldr	r3, [pc, #92]	; (23350 <spi_cmd_complete+0x8f0>)
   232f2:	0018      	movs	r0, r3
   232f4:	4b10      	ldr	r3, [pc, #64]	; (23338 <spi_cmd_complete+0x8d8>)
   232f6:	4798      	blx	r3
   232f8:	4b11      	ldr	r3, [pc, #68]	; (23340 <spi_cmd_complete+0x8e0>)
   232fa:	0018      	movs	r0, r3
   232fc:	4b0e      	ldr	r3, [pc, #56]	; (23338 <spi_cmd_complete+0x8d8>)
   232fe:	4798      	blx	r3
							result = N_FAIL;
   23300:	2300      	movs	r3, #0
   23302:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   23304:	e00d      	b.n	23322 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   23306:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   23308:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2330a:	18d3      	adds	r3, r2, r3
   2330c:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   2330e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23310:	683a      	ldr	r2, [r7, #0]
   23312:	1ad3      	subs	r3, r2, r3
   23314:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   23316:	683b      	ldr	r3, [r7, #0]
   23318:	2b00      	cmp	r3, #0
   2331a:	d000      	beq.n	2331e <spi_cmd_complete+0x8be>
   2331c:	e77e      	b.n	2321c <spi_cmd_complete+0x7bc>
   2331e:	e000      	b.n	23322 <spi_cmd_complete+0x8c2>
						break;
   23320:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   23322:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   23324:	0018      	movs	r0, r3
   23326:	46bd      	mov	sp, r7
   23328:	b01f      	add	sp, #124	; 0x7c
   2332a:	bd90      	pop	{r4, r7, pc}
   2332c:	00022399 	.word	0x00022399
   23330:	00038d98 	.word	0x00038d98
   23334:	00038784 	.word	0x00038784
   23338:	0001cee9 	.word	0x0001cee9
   2333c:	000389e8 	.word	0x000389e8
   23340:	000387c4 	.word	0x000387c4
   23344:	0003897c 	.word	0x0003897c
   23348:	2000427c 	.word	0x2000427c
   2334c:	000002d2 	.word	0x000002d2
   23350:	000389b0 	.word	0x000389b0

00023354 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   23354:	b580      	push	{r7, lr}
   23356:	b086      	sub	sp, #24
   23358:	af00      	add	r7, sp, #0
   2335a:	6078      	str	r0, [r7, #4]
   2335c:	000a      	movs	r2, r1
   2335e:	1cbb      	adds	r3, r7, #2
   23360:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   23362:	2313      	movs	r3, #19
   23364:	18fb      	adds	r3, r7, r3
   23366:	2201      	movs	r2, #1
   23368:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   2336a:	230c      	movs	r3, #12
   2336c:	18fb      	adds	r3, r7, r3
   2336e:	2200      	movs	r2, #0
   23370:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   23372:	2316      	movs	r3, #22
   23374:	18fb      	adds	r3, r7, r3
   23376:	2200      	movs	r2, #0
   23378:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   2337a:	1cbb      	adds	r3, r7, #2
   2337c:	881a      	ldrh	r2, [r3, #0]
   2337e:	2380      	movs	r3, #128	; 0x80
   23380:	019b      	lsls	r3, r3, #6
   23382:	429a      	cmp	r2, r3
   23384:	d805      	bhi.n	23392 <spi_data_write+0x3e>
			nbytes = sz;
   23386:	2314      	movs	r3, #20
   23388:	18fb      	adds	r3, r7, r3
   2338a:	1cba      	adds	r2, r7, #2
   2338c:	8812      	ldrh	r2, [r2, #0]
   2338e:	801a      	strh	r2, [r3, #0]
   23390:	e004      	b.n	2339c <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   23392:	2314      	movs	r3, #20
   23394:	18fb      	adds	r3, r7, r3
   23396:	2280      	movs	r2, #128	; 0x80
   23398:	0192      	lsls	r2, r2, #6
   2339a:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   2339c:	2311      	movs	r3, #17
   2339e:	18fb      	adds	r3, r7, r3
   233a0:	22f0      	movs	r2, #240	; 0xf0
   233a2:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   233a4:	2316      	movs	r3, #22
   233a6:	18fb      	adds	r3, r7, r3
   233a8:	2200      	movs	r2, #0
   233aa:	5e9b      	ldrsh	r3, [r3, r2]
   233ac:	2b00      	cmp	r3, #0
   233ae:	d10f      	bne.n	233d0 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   233b0:	1cbb      	adds	r3, r7, #2
   233b2:	881a      	ldrh	r2, [r3, #0]
   233b4:	2380      	movs	r3, #128	; 0x80
   233b6:	019b      	lsls	r3, r3, #6
   233b8:	429a      	cmp	r2, r3
   233ba:	d804      	bhi.n	233c6 <spi_data_write+0x72>
				order = 0x3;
   233bc:	2312      	movs	r3, #18
   233be:	18fb      	adds	r3, r7, r3
   233c0:	2203      	movs	r2, #3
   233c2:	701a      	strb	r2, [r3, #0]
   233c4:	e013      	b.n	233ee <spi_data_write+0x9a>
			else
				order = 0x1;
   233c6:	2312      	movs	r3, #18
   233c8:	18fb      	adds	r3, r7, r3
   233ca:	2201      	movs	r2, #1
   233cc:	701a      	strb	r2, [r3, #0]
   233ce:	e00e      	b.n	233ee <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   233d0:	1cbb      	adds	r3, r7, #2
   233d2:	881a      	ldrh	r2, [r3, #0]
   233d4:	2380      	movs	r3, #128	; 0x80
   233d6:	019b      	lsls	r3, r3, #6
   233d8:	429a      	cmp	r2, r3
   233da:	d804      	bhi.n	233e6 <spi_data_write+0x92>
				order = 0x3;
   233dc:	2312      	movs	r3, #18
   233de:	18fb      	adds	r3, r7, r3
   233e0:	2203      	movs	r2, #3
   233e2:	701a      	strb	r2, [r3, #0]
   233e4:	e003      	b.n	233ee <spi_data_write+0x9a>
			else
				order = 0x2;
   233e6:	2312      	movs	r3, #18
   233e8:	18fb      	adds	r3, r7, r3
   233ea:	2202      	movs	r2, #2
   233ec:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   233ee:	2311      	movs	r3, #17
   233f0:	18fb      	adds	r3, r7, r3
   233f2:	781a      	ldrb	r2, [r3, #0]
   233f4:	2312      	movs	r3, #18
   233f6:	18fb      	adds	r3, r7, r3
   233f8:	781b      	ldrb	r3, [r3, #0]
   233fa:	4313      	orrs	r3, r2
   233fc:	b2da      	uxtb	r2, r3
   233fe:	2311      	movs	r3, #17
   23400:	18fb      	adds	r3, r7, r3
   23402:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   23404:	2311      	movs	r3, #17
   23406:	18fb      	adds	r3, r7, r3
   23408:	2101      	movs	r1, #1
   2340a:	0018      	movs	r0, r3
   2340c:	4b3c      	ldr	r3, [pc, #240]	; (23500 <spi_data_write+0x1ac>)
   2340e:	4798      	blx	r3
   23410:	1e03      	subs	r3, r0, #0
   23412:	d012      	beq.n	2343a <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   23414:	4a3b      	ldr	r2, [pc, #236]	; (23504 <spi_data_write+0x1b0>)
   23416:	493c      	ldr	r1, [pc, #240]	; (23508 <spi_data_write+0x1b4>)
   23418:	4b3c      	ldr	r3, [pc, #240]	; (2350c <spi_data_write+0x1b8>)
   2341a:	0018      	movs	r0, r3
   2341c:	4b3c      	ldr	r3, [pc, #240]	; (23510 <spi_data_write+0x1bc>)
   2341e:	4798      	blx	r3
   23420:	4b3c      	ldr	r3, [pc, #240]	; (23514 <spi_data_write+0x1c0>)
   23422:	0018      	movs	r0, r3
   23424:	4b3a      	ldr	r3, [pc, #232]	; (23510 <spi_data_write+0x1bc>)
   23426:	4798      	blx	r3
   23428:	4b3b      	ldr	r3, [pc, #236]	; (23518 <spi_data_write+0x1c4>)
   2342a:	0018      	movs	r0, r3
   2342c:	4b38      	ldr	r3, [pc, #224]	; (23510 <spi_data_write+0x1bc>)
   2342e:	4798      	blx	r3
			result = N_FAIL;
   23430:	2313      	movs	r3, #19
   23432:	18fb      	adds	r3, r7, r3
   23434:	2200      	movs	r2, #0
   23436:	701a      	strb	r2, [r3, #0]
			break;
   23438:	e059      	b.n	234ee <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   2343a:	2316      	movs	r3, #22
   2343c:	18fb      	adds	r3, r7, r3
   2343e:	2200      	movs	r2, #0
   23440:	5e9b      	ldrsh	r3, [r3, r2]
   23442:	687a      	ldr	r2, [r7, #4]
   23444:	18d2      	adds	r2, r2, r3
   23446:	2314      	movs	r3, #20
   23448:	18fb      	adds	r3, r7, r3
   2344a:	881b      	ldrh	r3, [r3, #0]
   2344c:	0019      	movs	r1, r3
   2344e:	0010      	movs	r0, r2
   23450:	4b2b      	ldr	r3, [pc, #172]	; (23500 <spi_data_write+0x1ac>)
   23452:	4798      	blx	r3
   23454:	1e03      	subs	r3, r0, #0
   23456:	d012      	beq.n	2347e <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   23458:	4a30      	ldr	r2, [pc, #192]	; (2351c <spi_data_write+0x1c8>)
   2345a:	492b      	ldr	r1, [pc, #172]	; (23508 <spi_data_write+0x1b4>)
   2345c:	4b2b      	ldr	r3, [pc, #172]	; (2350c <spi_data_write+0x1b8>)
   2345e:	0018      	movs	r0, r3
   23460:	4b2b      	ldr	r3, [pc, #172]	; (23510 <spi_data_write+0x1bc>)
   23462:	4798      	blx	r3
   23464:	4b2e      	ldr	r3, [pc, #184]	; (23520 <spi_data_write+0x1cc>)
   23466:	0018      	movs	r0, r3
   23468:	4b29      	ldr	r3, [pc, #164]	; (23510 <spi_data_write+0x1bc>)
   2346a:	4798      	blx	r3
   2346c:	4b2a      	ldr	r3, [pc, #168]	; (23518 <spi_data_write+0x1c4>)
   2346e:	0018      	movs	r0, r3
   23470:	4b27      	ldr	r3, [pc, #156]	; (23510 <spi_data_write+0x1bc>)
   23472:	4798      	blx	r3
			result = N_FAIL;
   23474:	2313      	movs	r3, #19
   23476:	18fb      	adds	r3, r7, r3
   23478:	2200      	movs	r2, #0
   2347a:	701a      	strb	r2, [r3, #0]
			break;
   2347c:	e037      	b.n	234ee <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   2347e:	4b29      	ldr	r3, [pc, #164]	; (23524 <spi_data_write+0x1d0>)
   23480:	781b      	ldrb	r3, [r3, #0]
   23482:	2b00      	cmp	r3, #0
   23484:	d11b      	bne.n	234be <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   23486:	230c      	movs	r3, #12
   23488:	18fb      	adds	r3, r7, r3
   2348a:	2102      	movs	r1, #2
   2348c:	0018      	movs	r0, r3
   2348e:	4b1c      	ldr	r3, [pc, #112]	; (23500 <spi_data_write+0x1ac>)
   23490:	4798      	blx	r3
   23492:	1e03      	subs	r3, r0, #0
   23494:	d013      	beq.n	234be <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   23496:	23d7      	movs	r3, #215	; 0xd7
   23498:	009a      	lsls	r2, r3, #2
   2349a:	491b      	ldr	r1, [pc, #108]	; (23508 <spi_data_write+0x1b4>)
   2349c:	4b1b      	ldr	r3, [pc, #108]	; (2350c <spi_data_write+0x1b8>)
   2349e:	0018      	movs	r0, r3
   234a0:	4b1b      	ldr	r3, [pc, #108]	; (23510 <spi_data_write+0x1bc>)
   234a2:	4798      	blx	r3
   234a4:	4b20      	ldr	r3, [pc, #128]	; (23528 <spi_data_write+0x1d4>)
   234a6:	0018      	movs	r0, r3
   234a8:	4b19      	ldr	r3, [pc, #100]	; (23510 <spi_data_write+0x1bc>)
   234aa:	4798      	blx	r3
   234ac:	4b1a      	ldr	r3, [pc, #104]	; (23518 <spi_data_write+0x1c4>)
   234ae:	0018      	movs	r0, r3
   234b0:	4b17      	ldr	r3, [pc, #92]	; (23510 <spi_data_write+0x1bc>)
   234b2:	4798      	blx	r3
				result = N_FAIL;
   234b4:	2313      	movs	r3, #19
   234b6:	18fb      	adds	r3, r7, r3
   234b8:	2200      	movs	r2, #0
   234ba:	701a      	strb	r2, [r3, #0]
				break;
   234bc:	e017      	b.n	234ee <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   234be:	2316      	movs	r3, #22
   234c0:	18fb      	adds	r3, r7, r3
   234c2:	881a      	ldrh	r2, [r3, #0]
   234c4:	2314      	movs	r3, #20
   234c6:	18fb      	adds	r3, r7, r3
   234c8:	881b      	ldrh	r3, [r3, #0]
   234ca:	18d3      	adds	r3, r2, r3
   234cc:	b29a      	uxth	r2, r3
   234ce:	2316      	movs	r3, #22
   234d0:	18fb      	adds	r3, r7, r3
   234d2:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   234d4:	1cbb      	adds	r3, r7, #2
   234d6:	1cb9      	adds	r1, r7, #2
   234d8:	2214      	movs	r2, #20
   234da:	18ba      	adds	r2, r7, r2
   234dc:	8809      	ldrh	r1, [r1, #0]
   234de:	8812      	ldrh	r2, [r2, #0]
   234e0:	1a8a      	subs	r2, r1, r2
   234e2:	801a      	strh	r2, [r3, #0]
	} while (sz);
   234e4:	1cbb      	adds	r3, r7, #2
   234e6:	881b      	ldrh	r3, [r3, #0]
   234e8:	2b00      	cmp	r3, #0
   234ea:	d000      	beq.n	234ee <spi_data_write+0x19a>
   234ec:	e745      	b.n	2337a <spi_data_write+0x26>


	return result;
   234ee:	2313      	movs	r3, #19
   234f0:	18fb      	adds	r3, r7, r3
   234f2:	781b      	ldrb	r3, [r3, #0]
   234f4:	b25b      	sxtb	r3, r3
}
   234f6:	0018      	movs	r0, r3
   234f8:	46bd      	mov	sp, r7
   234fa:	b006      	add	sp, #24
   234fc:	bd80      	pop	{r7, pc}
   234fe:	46c0      	nop			; (mov r8, r8)
   23500:	000223dd 	.word	0x000223dd
   23504:	00000349 	.word	0x00000349
   23508:	00038dac 	.word	0x00038dac
   2350c:	00038784 	.word	0x00038784
   23510:	0001cee9 	.word	0x0001cee9
   23514:	00038a4c 	.word	0x00038a4c
   23518:	000387c4 	.word	0x000387c4
   2351c:	00000352 	.word	0x00000352
   23520:	00038a84 	.word	0x00038a84
   23524:	2000427c 	.word	0x2000427c
   23528:	00038ab8 	.word	0x00038ab8

0002352c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   2352c:	b590      	push	{r4, r7, lr}
   2352e:	b087      	sub	sp, #28
   23530:	af02      	add	r7, sp, #8
   23532:	6078      	str	r0, [r7, #4]
   23534:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   23536:	230f      	movs	r3, #15
   23538:	18fb      	adds	r3, r7, r3
   2353a:	220a      	movs	r2, #10
   2353c:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   2353e:	230c      	movs	r3, #12
   23540:	18fb      	adds	r3, r7, r3
   23542:	2201      	movs	r2, #1
   23544:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   23546:	230e      	movs	r3, #14
   23548:	18fb      	adds	r3, r7, r3
   2354a:	22c9      	movs	r2, #201	; 0xc9
   2354c:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   2354e:	230d      	movs	r3, #13
   23550:	18fb      	adds	r3, r7, r3
   23552:	2200      	movs	r2, #0
   23554:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   23556:	687b      	ldr	r3, [r7, #4]
   23558:	2b30      	cmp	r3, #48	; 0x30
   2355a:	d808      	bhi.n	2356e <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   2355c:	230e      	movs	r3, #14
   2355e:	18fb      	adds	r3, r7, r3
   23560:	22c3      	movs	r2, #195	; 0xc3
   23562:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   23564:	230d      	movs	r3, #13
   23566:	18fb      	adds	r3, r7, r3
   23568:	2201      	movs	r2, #1
   2356a:	701a      	strb	r2, [r3, #0]
   2356c:	e007      	b.n	2357e <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   2356e:	230e      	movs	r3, #14
   23570:	18fb      	adds	r3, r7, r3
   23572:	22c9      	movs	r2, #201	; 0xc9
   23574:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   23576:	230d      	movs	r3, #13
   23578:	18fb      	adds	r3, r7, r3
   2357a:	2200      	movs	r2, #0
   2357c:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   2357e:	003a      	movs	r2, r7
   23580:	6879      	ldr	r1, [r7, #4]
   23582:	230e      	movs	r3, #14
   23584:	18fb      	adds	r3, r7, r3
   23586:	7818      	ldrb	r0, [r3, #0]
   23588:	230d      	movs	r3, #13
   2358a:	18fb      	adds	r3, r7, r3
   2358c:	781b      	ldrb	r3, [r3, #0]
   2358e:	9300      	str	r3, [sp, #0]
   23590:	2304      	movs	r3, #4
   23592:	4c2e      	ldr	r4, [pc, #184]	; (2364c <spi_write_reg+0x120>)
   23594:	47a0      	blx	r4
   23596:	0002      	movs	r2, r0
   23598:	230c      	movs	r3, #12
   2359a:	18fb      	adds	r3, r7, r3
   2359c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2359e:	230c      	movs	r3, #12
   235a0:	18fb      	adds	r3, r7, r3
   235a2:	781b      	ldrb	r3, [r3, #0]
   235a4:	b25b      	sxtb	r3, r3
   235a6:	2b01      	cmp	r3, #1
   235a8:	d010      	beq.n	235cc <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   235aa:	4a29      	ldr	r2, [pc, #164]	; (23650 <spi_write_reg+0x124>)
   235ac:	4929      	ldr	r1, [pc, #164]	; (23654 <spi_write_reg+0x128>)
   235ae:	4b2a      	ldr	r3, [pc, #168]	; (23658 <spi_write_reg+0x12c>)
   235b0:	0018      	movs	r0, r3
   235b2:	4b2a      	ldr	r3, [pc, #168]	; (2365c <spi_write_reg+0x130>)
   235b4:	4798      	blx	r3
   235b6:	687a      	ldr	r2, [r7, #4]
   235b8:	4b29      	ldr	r3, [pc, #164]	; (23660 <spi_write_reg+0x134>)
   235ba:	0011      	movs	r1, r2
   235bc:	0018      	movs	r0, r3
   235be:	4b27      	ldr	r3, [pc, #156]	; (2365c <spi_write_reg+0x130>)
   235c0:	4798      	blx	r3
   235c2:	4b28      	ldr	r3, [pc, #160]	; (23664 <spi_write_reg+0x138>)
   235c4:	0018      	movs	r0, r3
   235c6:	4b25      	ldr	r3, [pc, #148]	; (2365c <spi_write_reg+0x130>)
   235c8:	4798      	blx	r3
		goto _FAIL_;
   235ca:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   235cc:	230c      	movs	r3, #12
   235ce:	18fb      	adds	r3, r7, r3
   235d0:	781b      	ldrb	r3, [r3, #0]
   235d2:	b25b      	sxtb	r3, r3
   235d4:	2b01      	cmp	r3, #1
   235d6:	d030      	beq.n	2363a <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   235d8:	2001      	movs	r0, #1
   235da:	4b23      	ldr	r3, [pc, #140]	; (23668 <spi_write_reg+0x13c>)
   235dc:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   235de:	2300      	movs	r3, #0
   235e0:	9300      	str	r3, [sp, #0]
   235e2:	2300      	movs	r3, #0
   235e4:	2200      	movs	r2, #0
   235e6:	2100      	movs	r1, #0
   235e8:	20cf      	movs	r0, #207	; 0xcf
   235ea:	4c20      	ldr	r4, [pc, #128]	; (2366c <spi_write_reg+0x140>)
   235ec:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   235ee:	20cf      	movs	r0, #207	; 0xcf
   235f0:	4b1f      	ldr	r3, [pc, #124]	; (23670 <spi_write_reg+0x144>)
   235f2:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   235f4:	23ea      	movs	r3, #234	; 0xea
   235f6:	009a      	lsls	r2, r3, #2
   235f8:	4916      	ldr	r1, [pc, #88]	; (23654 <spi_write_reg+0x128>)
   235fa:	4b17      	ldr	r3, [pc, #92]	; (23658 <spi_write_reg+0x12c>)
   235fc:	0018      	movs	r0, r3
   235fe:	4b17      	ldr	r3, [pc, #92]	; (2365c <spi_write_reg+0x130>)
   23600:	4798      	blx	r3
   23602:	230f      	movs	r3, #15
   23604:	18fb      	adds	r3, r7, r3
   23606:	7819      	ldrb	r1, [r3, #0]
   23608:	683b      	ldr	r3, [r7, #0]
   2360a:	687a      	ldr	r2, [r7, #4]
   2360c:	4819      	ldr	r0, [pc, #100]	; (23674 <spi_write_reg+0x148>)
   2360e:	4c13      	ldr	r4, [pc, #76]	; (2365c <spi_write_reg+0x130>)
   23610:	47a0      	blx	r4
   23612:	4b14      	ldr	r3, [pc, #80]	; (23664 <spi_write_reg+0x138>)
   23614:	0018      	movs	r0, r3
   23616:	4b11      	ldr	r3, [pc, #68]	; (2365c <spi_write_reg+0x130>)
   23618:	4798      	blx	r3
		nm_bsp_sleep(1);
   2361a:	2001      	movs	r0, #1
   2361c:	4b12      	ldr	r3, [pc, #72]	; (23668 <spi_write_reg+0x13c>)
   2361e:	4798      	blx	r3
		retry--;
   23620:	230f      	movs	r3, #15
   23622:	18fb      	adds	r3, r7, r3
   23624:	781a      	ldrb	r2, [r3, #0]
   23626:	230f      	movs	r3, #15
   23628:	18fb      	adds	r3, r7, r3
   2362a:	3a01      	subs	r2, #1
   2362c:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   2362e:	230f      	movs	r3, #15
   23630:	18fb      	adds	r3, r7, r3
   23632:	781b      	ldrb	r3, [r3, #0]
   23634:	2b00      	cmp	r3, #0
   23636:	d000      	beq.n	2363a <spi_write_reg+0x10e>
   23638:	e78d      	b.n	23556 <spi_write_reg+0x2a>
	}

	return result;
   2363a:	230c      	movs	r3, #12
   2363c:	18fb      	adds	r3, r7, r3
   2363e:	781b      	ldrb	r3, [r3, #0]
   23640:	b25b      	sxtb	r3, r3
}
   23642:	0018      	movs	r0, r3
   23644:	46bd      	mov	sp, r7
   23646:	b005      	add	sp, #20
   23648:	bd90      	pop	{r4, r7, pc}
   2364a:	46c0      	nop			; (mov r8, r8)
   2364c:	00022a61 	.word	0x00022a61
   23650:	0000039d 	.word	0x0000039d
   23654:	00038dbc 	.word	0x00038dbc
   23658:	00038784 	.word	0x00038784
   2365c:	0001cee9 	.word	0x0001cee9
   23660:	00038af0 	.word	0x00038af0
   23664:	000387c4 	.word	0x000387c4
   23668:	0001f3a1 	.word	0x0001f3a1
   2366c:	000224e5 	.word	0x000224e5
   23670:	00022925 	.word	0x00022925
   23674:	00038b1c 	.word	0x00038b1c

00023678 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   23678:	b590      	push	{r4, r7, lr}
   2367a:	b089      	sub	sp, #36	; 0x24
   2367c:	af02      	add	r7, sp, #8
   2367e:	60f8      	str	r0, [r7, #12]
   23680:	60b9      	str	r1, [r7, #8]
   23682:	1dbb      	adds	r3, r7, #6
   23684:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   23686:	2316      	movs	r3, #22
   23688:	18fb      	adds	r3, r7, r3
   2368a:	220a      	movs	r2, #10
   2368c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   2368e:	2315      	movs	r3, #21
   23690:	18fb      	adds	r3, r7, r3
   23692:	22c7      	movs	r2, #199	; 0xc7
   23694:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   23696:	1dbb      	adds	r3, r7, #6
   23698:	881a      	ldrh	r2, [r3, #0]
   2369a:	68f9      	ldr	r1, [r7, #12]
   2369c:	2315      	movs	r3, #21
   2369e:	18fb      	adds	r3, r7, r3
   236a0:	7818      	ldrb	r0, [r3, #0]
   236a2:	2300      	movs	r3, #0
   236a4:	9300      	str	r3, [sp, #0]
   236a6:	0013      	movs	r3, r2
   236a8:	2200      	movs	r2, #0
   236aa:	4c4d      	ldr	r4, [pc, #308]	; (237e0 <nm_spi_write+0x168>)
   236ac:	47a0      	blx	r4
   236ae:	0002      	movs	r2, r0
   236b0:	2317      	movs	r3, #23
   236b2:	18fb      	adds	r3, r7, r3
   236b4:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   236b6:	2317      	movs	r3, #23
   236b8:	18fb      	adds	r3, r7, r3
   236ba:	781b      	ldrb	r3, [r3, #0]
   236bc:	b25b      	sxtb	r3, r3
   236be:	2b01      	cmp	r3, #1
   236c0:	d010      	beq.n	236e4 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   236c2:	4a48      	ldr	r2, [pc, #288]	; (237e4 <nm_spi_write+0x16c>)
   236c4:	4948      	ldr	r1, [pc, #288]	; (237e8 <nm_spi_write+0x170>)
   236c6:	4b49      	ldr	r3, [pc, #292]	; (237ec <nm_spi_write+0x174>)
   236c8:	0018      	movs	r0, r3
   236ca:	4b49      	ldr	r3, [pc, #292]	; (237f0 <nm_spi_write+0x178>)
   236cc:	4798      	blx	r3
   236ce:	68fa      	ldr	r2, [r7, #12]
   236d0:	4b48      	ldr	r3, [pc, #288]	; (237f4 <nm_spi_write+0x17c>)
   236d2:	0011      	movs	r1, r2
   236d4:	0018      	movs	r0, r3
   236d6:	4b46      	ldr	r3, [pc, #280]	; (237f0 <nm_spi_write+0x178>)
   236d8:	4798      	blx	r3
   236da:	4b47      	ldr	r3, [pc, #284]	; (237f8 <nm_spi_write+0x180>)
   236dc:	0018      	movs	r0, r3
   236de:	4b44      	ldr	r3, [pc, #272]	; (237f0 <nm_spi_write+0x178>)
   236e0:	4798      	blx	r3
		goto _FAIL_;
   236e2:	e03e      	b.n	23762 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   236e4:	2317      	movs	r3, #23
   236e6:	18fc      	adds	r4, r7, r3
   236e8:	1dbb      	adds	r3, r7, #6
   236ea:	881a      	ldrh	r2, [r3, #0]
   236ec:	68bb      	ldr	r3, [r7, #8]
   236ee:	0011      	movs	r1, r2
   236f0:	0018      	movs	r0, r3
   236f2:	4b42      	ldr	r3, [pc, #264]	; (237fc <nm_spi_write+0x184>)
   236f4:	4798      	blx	r3
   236f6:	0003      	movs	r3, r0
   236f8:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   236fa:	2317      	movs	r3, #23
   236fc:	18fb      	adds	r3, r7, r3
   236fe:	781b      	ldrb	r3, [r3, #0]
   23700:	b25b      	sxtb	r3, r3
   23702:	2b01      	cmp	r3, #1
   23704:	d00e      	beq.n	23724 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   23706:	4a3e      	ldr	r2, [pc, #248]	; (23800 <nm_spi_write+0x188>)
   23708:	4937      	ldr	r1, [pc, #220]	; (237e8 <nm_spi_write+0x170>)
   2370a:	4b38      	ldr	r3, [pc, #224]	; (237ec <nm_spi_write+0x174>)
   2370c:	0018      	movs	r0, r3
   2370e:	4b38      	ldr	r3, [pc, #224]	; (237f0 <nm_spi_write+0x178>)
   23710:	4798      	blx	r3
   23712:	4b3c      	ldr	r3, [pc, #240]	; (23804 <nm_spi_write+0x18c>)
   23714:	0018      	movs	r0, r3
   23716:	4b36      	ldr	r3, [pc, #216]	; (237f0 <nm_spi_write+0x178>)
   23718:	4798      	blx	r3
   2371a:	4b37      	ldr	r3, [pc, #220]	; (237f8 <nm_spi_write+0x180>)
   2371c:	0018      	movs	r0, r3
   2371e:	4b34      	ldr	r3, [pc, #208]	; (237f0 <nm_spi_write+0x178>)
   23720:	4798      	blx	r3
		goto _FAIL_;
   23722:	e01e      	b.n	23762 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   23724:	2317      	movs	r3, #23
   23726:	18fc      	adds	r4, r7, r3
   23728:	2315      	movs	r3, #21
   2372a:	18fb      	adds	r3, r7, r3
   2372c:	781b      	ldrb	r3, [r3, #0]
   2372e:	0018      	movs	r0, r3
   23730:	4b35      	ldr	r3, [pc, #212]	; (23808 <nm_spi_write+0x190>)
   23732:	4798      	blx	r3
   23734:	0003      	movs	r3, r0
   23736:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   23738:	2317      	movs	r3, #23
   2373a:	18fb      	adds	r3, r7, r3
   2373c:	781b      	ldrb	r3, [r3, #0]
   2373e:	b25b      	sxtb	r3, r3
   23740:	2b01      	cmp	r3, #1
   23742:	d00e      	beq.n	23762 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   23744:	4a31      	ldr	r2, [pc, #196]	; (2380c <nm_spi_write+0x194>)
   23746:	4928      	ldr	r1, [pc, #160]	; (237e8 <nm_spi_write+0x170>)
   23748:	4b28      	ldr	r3, [pc, #160]	; (237ec <nm_spi_write+0x174>)
   2374a:	0018      	movs	r0, r3
   2374c:	4b28      	ldr	r3, [pc, #160]	; (237f0 <nm_spi_write+0x178>)
   2374e:	4798      	blx	r3
   23750:	4b2c      	ldr	r3, [pc, #176]	; (23804 <nm_spi_write+0x18c>)
   23752:	0018      	movs	r0, r3
   23754:	4b26      	ldr	r3, [pc, #152]	; (237f0 <nm_spi_write+0x178>)
   23756:	4798      	blx	r3
   23758:	4b27      	ldr	r3, [pc, #156]	; (237f8 <nm_spi_write+0x180>)
   2375a:	0018      	movs	r0, r3
   2375c:	4b24      	ldr	r3, [pc, #144]	; (237f0 <nm_spi_write+0x178>)
   2375e:	4798      	blx	r3
		goto _FAIL_;
   23760:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   23762:	2317      	movs	r3, #23
   23764:	18fb      	adds	r3, r7, r3
   23766:	781b      	ldrb	r3, [r3, #0]
   23768:	b25b      	sxtb	r3, r3
   2376a:	2b01      	cmp	r3, #1
   2376c:	d030      	beq.n	237d0 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   2376e:	2001      	movs	r0, #1
   23770:	4b27      	ldr	r3, [pc, #156]	; (23810 <nm_spi_write+0x198>)
   23772:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   23774:	2300      	movs	r3, #0
   23776:	9300      	str	r3, [sp, #0]
   23778:	2300      	movs	r3, #0
   2377a:	2200      	movs	r2, #0
   2377c:	2100      	movs	r1, #0
   2377e:	20cf      	movs	r0, #207	; 0xcf
   23780:	4c24      	ldr	r4, [pc, #144]	; (23814 <nm_spi_write+0x19c>)
   23782:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   23784:	20cf      	movs	r0, #207	; 0xcf
   23786:	4b24      	ldr	r3, [pc, #144]	; (23818 <nm_spi_write+0x1a0>)
   23788:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   2378a:	4a24      	ldr	r2, [pc, #144]	; (2381c <nm_spi_write+0x1a4>)
   2378c:	4916      	ldr	r1, [pc, #88]	; (237e8 <nm_spi_write+0x170>)
   2378e:	4b17      	ldr	r3, [pc, #92]	; (237ec <nm_spi_write+0x174>)
   23790:	0018      	movs	r0, r3
   23792:	4b17      	ldr	r3, [pc, #92]	; (237f0 <nm_spi_write+0x178>)
   23794:	4798      	blx	r3
   23796:	2316      	movs	r3, #22
   23798:	18fb      	adds	r3, r7, r3
   2379a:	7819      	ldrb	r1, [r3, #0]
   2379c:	1dbb      	adds	r3, r7, #6
   2379e:	881b      	ldrh	r3, [r3, #0]
   237a0:	68fa      	ldr	r2, [r7, #12]
   237a2:	481f      	ldr	r0, [pc, #124]	; (23820 <nm_spi_write+0x1a8>)
   237a4:	4c12      	ldr	r4, [pc, #72]	; (237f0 <nm_spi_write+0x178>)
   237a6:	47a0      	blx	r4
   237a8:	4b13      	ldr	r3, [pc, #76]	; (237f8 <nm_spi_write+0x180>)
   237aa:	0018      	movs	r0, r3
   237ac:	4b10      	ldr	r3, [pc, #64]	; (237f0 <nm_spi_write+0x178>)
   237ae:	4798      	blx	r3
		nm_bsp_sleep(1);
   237b0:	2001      	movs	r0, #1
   237b2:	4b17      	ldr	r3, [pc, #92]	; (23810 <nm_spi_write+0x198>)
   237b4:	4798      	blx	r3
		retry--;
   237b6:	2316      	movs	r3, #22
   237b8:	18fb      	adds	r3, r7, r3
   237ba:	781a      	ldrb	r2, [r3, #0]
   237bc:	2316      	movs	r3, #22
   237be:	18fb      	adds	r3, r7, r3
   237c0:	3a01      	subs	r2, #1
   237c2:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   237c4:	2316      	movs	r3, #22
   237c6:	18fb      	adds	r3, r7, r3
   237c8:	781b      	ldrb	r3, [r3, #0]
   237ca:	2b00      	cmp	r3, #0
   237cc:	d000      	beq.n	237d0 <nm_spi_write+0x158>
   237ce:	e762      	b.n	23696 <nm_spi_write+0x1e>
	}


	return result;
   237d0:	2317      	movs	r3, #23
   237d2:	18fb      	adds	r3, r7, r3
   237d4:	781b      	ldrb	r3, [r3, #0]
   237d6:	b25b      	sxtb	r3, r3
}
   237d8:	0018      	movs	r0, r3
   237da:	46bd      	mov	sp, r7
   237dc:	b007      	add	sp, #28
   237de:	bd90      	pop	{r4, r7, pc}
   237e0:	00022a61 	.word	0x00022a61
   237e4:	000003cf 	.word	0x000003cf
   237e8:	00038dcc 	.word	0x00038dcc
   237ec:	00038784 	.word	0x00038784
   237f0:	0001cee9 	.word	0x0001cee9
   237f4:	00038b38 	.word	0x00038b38
   237f8:	000387c4 	.word	0x000387c4
   237fc:	00023355 	.word	0x00023355
   23800:	000003d9 	.word	0x000003d9
   23804:	00038b68 	.word	0x00038b68
   23808:	00022825 	.word	0x00022825
   2380c:	000003e1 	.word	0x000003e1
   23810:	0001f3a1 	.word	0x0001f3a1
   23814:	000224e5 	.word	0x000224e5
   23818:	00022925 	.word	0x00022925
   2381c:	000003eb 	.word	0x000003eb
   23820:	00038b90 	.word	0x00038b90

00023824 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   23824:	b590      	push	{r4, r7, lr}
   23826:	b087      	sub	sp, #28
   23828:	af02      	add	r7, sp, #8
   2382a:	6078      	str	r0, [r7, #4]
   2382c:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   2382e:	230f      	movs	r3, #15
   23830:	18fb      	adds	r3, r7, r3
   23832:	220a      	movs	r2, #10
   23834:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   23836:	230c      	movs	r3, #12
   23838:	18fb      	adds	r3, r7, r3
   2383a:	2201      	movs	r2, #1
   2383c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   2383e:	230e      	movs	r3, #14
   23840:	18fb      	adds	r3, r7, r3
   23842:	22ca      	movs	r2, #202	; 0xca
   23844:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   23846:	230d      	movs	r3, #13
   23848:	18fb      	adds	r3, r7, r3
   2384a:	2200      	movs	r2, #0
   2384c:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   2384e:	687b      	ldr	r3, [r7, #4]
   23850:	2bff      	cmp	r3, #255	; 0xff
   23852:	d808      	bhi.n	23866 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   23854:	230e      	movs	r3, #14
   23856:	18fb      	adds	r3, r7, r3
   23858:	22c4      	movs	r2, #196	; 0xc4
   2385a:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   2385c:	230d      	movs	r3, #13
   2385e:	18fb      	adds	r3, r7, r3
   23860:	2201      	movs	r2, #1
   23862:	701a      	strb	r2, [r3, #0]
   23864:	e007      	b.n	23876 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   23866:	230e      	movs	r3, #14
   23868:	18fb      	adds	r3, r7, r3
   2386a:	22ca      	movs	r2, #202	; 0xca
   2386c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   2386e:	230d      	movs	r3, #13
   23870:	18fb      	adds	r3, r7, r3
   23872:	2200      	movs	r2, #0
   23874:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   23876:	2308      	movs	r3, #8
   23878:	18fa      	adds	r2, r7, r3
   2387a:	6879      	ldr	r1, [r7, #4]
   2387c:	230e      	movs	r3, #14
   2387e:	18fb      	adds	r3, r7, r3
   23880:	7818      	ldrb	r0, [r3, #0]
   23882:	230d      	movs	r3, #13
   23884:	18fb      	adds	r3, r7, r3
   23886:	781b      	ldrb	r3, [r3, #0]
   23888:	9300      	str	r3, [sp, #0]
   2388a:	2304      	movs	r3, #4
   2388c:	4c37      	ldr	r4, [pc, #220]	; (2396c <spi_read_reg+0x148>)
   2388e:	47a0      	blx	r4
   23890:	0002      	movs	r2, r0
   23892:	230c      	movs	r3, #12
   23894:	18fb      	adds	r3, r7, r3
   23896:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   23898:	230c      	movs	r3, #12
   2389a:	18fb      	adds	r3, r7, r3
   2389c:	781b      	ldrb	r3, [r3, #0]
   2389e:	b25b      	sxtb	r3, r3
   238a0:	2b01      	cmp	r3, #1
   238a2:	d010      	beq.n	238c6 <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   238a4:	4a32      	ldr	r2, [pc, #200]	; (23970 <spi_read_reg+0x14c>)
   238a6:	4933      	ldr	r1, [pc, #204]	; (23974 <spi_read_reg+0x150>)
   238a8:	4b33      	ldr	r3, [pc, #204]	; (23978 <spi_read_reg+0x154>)
   238aa:	0018      	movs	r0, r3
   238ac:	4b33      	ldr	r3, [pc, #204]	; (2397c <spi_read_reg+0x158>)
   238ae:	4798      	blx	r3
   238b0:	687a      	ldr	r2, [r7, #4]
   238b2:	4b33      	ldr	r3, [pc, #204]	; (23980 <spi_read_reg+0x15c>)
   238b4:	0011      	movs	r1, r2
   238b6:	0018      	movs	r0, r3
   238b8:	4b30      	ldr	r3, [pc, #192]	; (2397c <spi_read_reg+0x158>)
   238ba:	4798      	blx	r3
   238bc:	4b31      	ldr	r3, [pc, #196]	; (23984 <spi_read_reg+0x160>)
   238be:	0018      	movs	r0, r3
   238c0:	4b2e      	ldr	r3, [pc, #184]	; (2397c <spi_read_reg+0x158>)
   238c2:	4798      	blx	r3
		goto _FAIL_;
   238c4:	e014      	b.n	238f0 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   238c6:	2308      	movs	r3, #8
   238c8:	18fb      	adds	r3, r7, r3
   238ca:	781b      	ldrb	r3, [r3, #0]
   238cc:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   238ce:	2308      	movs	r3, #8
   238d0:	18fb      	adds	r3, r7, r3
   238d2:	785b      	ldrb	r3, [r3, #1]
   238d4:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   238d6:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   238d8:	2308      	movs	r3, #8
   238da:	18fb      	adds	r3, r7, r3
   238dc:	789b      	ldrb	r3, [r3, #2]
   238de:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   238e0:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   238e2:	2308      	movs	r3, #8
   238e4:	18fb      	adds	r3, r7, r3
   238e6:	78db      	ldrb	r3, [r3, #3]
   238e8:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   238ea:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   238ec:	683b      	ldr	r3, [r7, #0]
   238ee:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   238f0:	230c      	movs	r3, #12
   238f2:	18fb      	adds	r3, r7, r3
   238f4:	781b      	ldrb	r3, [r3, #0]
   238f6:	b25b      	sxtb	r3, r3
   238f8:	2b01      	cmp	r3, #1
   238fa:	d02f      	beq.n	2395c <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   238fc:	2001      	movs	r0, #1
   238fe:	4b22      	ldr	r3, [pc, #136]	; (23988 <spi_read_reg+0x164>)
   23900:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   23902:	2300      	movs	r3, #0
   23904:	9300      	str	r3, [sp, #0]
   23906:	2300      	movs	r3, #0
   23908:	2200      	movs	r2, #0
   2390a:	2100      	movs	r1, #0
   2390c:	20cf      	movs	r0, #207	; 0xcf
   2390e:	4c1f      	ldr	r4, [pc, #124]	; (2398c <spi_read_reg+0x168>)
   23910:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   23912:	20cf      	movs	r0, #207	; 0xcf
   23914:	4b1e      	ldr	r3, [pc, #120]	; (23990 <spi_read_reg+0x16c>)
   23916:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   23918:	4a1e      	ldr	r2, [pc, #120]	; (23994 <spi_read_reg+0x170>)
   2391a:	4916      	ldr	r1, [pc, #88]	; (23974 <spi_read_reg+0x150>)
   2391c:	4b16      	ldr	r3, [pc, #88]	; (23978 <spi_read_reg+0x154>)
   2391e:	0018      	movs	r0, r3
   23920:	4b16      	ldr	r3, [pc, #88]	; (2397c <spi_read_reg+0x158>)
   23922:	4798      	blx	r3
   23924:	230f      	movs	r3, #15
   23926:	18fb      	adds	r3, r7, r3
   23928:	7819      	ldrb	r1, [r3, #0]
   2392a:	687a      	ldr	r2, [r7, #4]
   2392c:	4b1a      	ldr	r3, [pc, #104]	; (23998 <spi_read_reg+0x174>)
   2392e:	0018      	movs	r0, r3
   23930:	4b12      	ldr	r3, [pc, #72]	; (2397c <spi_read_reg+0x158>)
   23932:	4798      	blx	r3
   23934:	4b13      	ldr	r3, [pc, #76]	; (23984 <spi_read_reg+0x160>)
   23936:	0018      	movs	r0, r3
   23938:	4b10      	ldr	r3, [pc, #64]	; (2397c <spi_read_reg+0x158>)
   2393a:	4798      	blx	r3
		nm_bsp_sleep(1);
   2393c:	2001      	movs	r0, #1
   2393e:	4b12      	ldr	r3, [pc, #72]	; (23988 <spi_read_reg+0x164>)
   23940:	4798      	blx	r3
		retry--;
   23942:	230f      	movs	r3, #15
   23944:	18fb      	adds	r3, r7, r3
   23946:	781a      	ldrb	r2, [r3, #0]
   23948:	230f      	movs	r3, #15
   2394a:	18fb      	adds	r3, r7, r3
   2394c:	3a01      	subs	r2, #1
   2394e:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   23950:	230f      	movs	r3, #15
   23952:	18fb      	adds	r3, r7, r3
   23954:	781b      	ldrb	r3, [r3, #0]
   23956:	2b00      	cmp	r3, #0
   23958:	d000      	beq.n	2395c <spi_read_reg+0x138>
   2395a:	e778      	b.n	2384e <spi_read_reg+0x2a>
	}
		
	return result;
   2395c:	230c      	movs	r3, #12
   2395e:	18fb      	adds	r3, r7, r3
   23960:	781b      	ldrb	r3, [r3, #0]
   23962:	b25b      	sxtb	r3, r3
}
   23964:	0018      	movs	r0, r3
   23966:	46bd      	mov	sp, r7
   23968:	b005      	add	sp, #20
   2396a:	bd90      	pop	{r4, r7, pc}
   2396c:	00022a61 	.word	0x00022a61
   23970:	00000423 	.word	0x00000423
   23974:	00038ddc 	.word	0x00038ddc
   23978:	00038784 	.word	0x00038784
   2397c:	0001cee9 	.word	0x0001cee9
   23980:	00038bac 	.word	0x00038bac
   23984:	000387c4 	.word	0x000387c4
   23988:	0001f3a1 	.word	0x0001f3a1
   2398c:	000224e5 	.word	0x000224e5
   23990:	00022925 	.word	0x00022925
   23994:	00000435 	.word	0x00000435
   23998:	00038bd8 	.word	0x00038bd8

0002399c <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   2399c:	b590      	push	{r4, r7, lr}
   2399e:	b089      	sub	sp, #36	; 0x24
   239a0:	af02      	add	r7, sp, #8
   239a2:	60f8      	str	r0, [r7, #12]
   239a4:	60b9      	str	r1, [r7, #8]
   239a6:	1dbb      	adds	r3, r7, #6
   239a8:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   239aa:	2316      	movs	r3, #22
   239ac:	18fb      	adds	r3, r7, r3
   239ae:	22c8      	movs	r2, #200	; 0xc8
   239b0:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   239b2:	2317      	movs	r3, #23
   239b4:	18fb      	adds	r3, r7, r3
   239b6:	220a      	movs	r2, #10
   239b8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   239ba:	1dbb      	adds	r3, r7, #6
   239bc:	881c      	ldrh	r4, [r3, #0]
   239be:	68ba      	ldr	r2, [r7, #8]
   239c0:	68f9      	ldr	r1, [r7, #12]
   239c2:	2316      	movs	r3, #22
   239c4:	18fb      	adds	r3, r7, r3
   239c6:	7818      	ldrb	r0, [r3, #0]
   239c8:	2300      	movs	r3, #0
   239ca:	9300      	str	r3, [sp, #0]
   239cc:	0023      	movs	r3, r4
   239ce:	4c2e      	ldr	r4, [pc, #184]	; (23a88 <nm_spi_read+0xec>)
   239d0:	47a0      	blx	r4
   239d2:	0002      	movs	r2, r0
   239d4:	2315      	movs	r3, #21
   239d6:	18fb      	adds	r3, r7, r3
   239d8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   239da:	2315      	movs	r3, #21
   239dc:	18fb      	adds	r3, r7, r3
   239de:	781b      	ldrb	r3, [r3, #0]
   239e0:	b25b      	sxtb	r3, r3
   239e2:	2b01      	cmp	r3, #1
   239e4:	d010      	beq.n	23a08 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   239e6:	4a29      	ldr	r2, [pc, #164]	; (23a8c <nm_spi_read+0xf0>)
   239e8:	4929      	ldr	r1, [pc, #164]	; (23a90 <nm_spi_read+0xf4>)
   239ea:	4b2a      	ldr	r3, [pc, #168]	; (23a94 <nm_spi_read+0xf8>)
   239ec:	0018      	movs	r0, r3
   239ee:	4b2a      	ldr	r3, [pc, #168]	; (23a98 <nm_spi_read+0xfc>)
   239f0:	4798      	blx	r3
   239f2:	68fa      	ldr	r2, [r7, #12]
   239f4:	4b29      	ldr	r3, [pc, #164]	; (23a9c <nm_spi_read+0x100>)
   239f6:	0011      	movs	r1, r2
   239f8:	0018      	movs	r0, r3
   239fa:	4b27      	ldr	r3, [pc, #156]	; (23a98 <nm_spi_read+0xfc>)
   239fc:	4798      	blx	r3
   239fe:	4b28      	ldr	r3, [pc, #160]	; (23aa0 <nm_spi_read+0x104>)
   23a00:	0018      	movs	r0, r3
   23a02:	4b25      	ldr	r3, [pc, #148]	; (23a98 <nm_spi_read+0xfc>)
   23a04:	4798      	blx	r3
		goto _FAIL_;
   23a06:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   23a08:	2315      	movs	r3, #21
   23a0a:	18fb      	adds	r3, r7, r3
   23a0c:	781b      	ldrb	r3, [r3, #0]
   23a0e:	b25b      	sxtb	r3, r3
   23a10:	2b01      	cmp	r3, #1
   23a12:	d030      	beq.n	23a76 <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   23a14:	2001      	movs	r0, #1
   23a16:	4b23      	ldr	r3, [pc, #140]	; (23aa4 <nm_spi_read+0x108>)
   23a18:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   23a1a:	2300      	movs	r3, #0
   23a1c:	9300      	str	r3, [sp, #0]
   23a1e:	2300      	movs	r3, #0
   23a20:	2200      	movs	r2, #0
   23a22:	2100      	movs	r1, #0
   23a24:	20cf      	movs	r0, #207	; 0xcf
   23a26:	4c20      	ldr	r4, [pc, #128]	; (23aa8 <nm_spi_read+0x10c>)
   23a28:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   23a2a:	20cf      	movs	r0, #207	; 0xcf
   23a2c:	4b1f      	ldr	r3, [pc, #124]	; (23aac <nm_spi_read+0x110>)
   23a2e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   23a30:	4a1f      	ldr	r2, [pc, #124]	; (23ab0 <nm_spi_read+0x114>)
   23a32:	4917      	ldr	r1, [pc, #92]	; (23a90 <nm_spi_read+0xf4>)
   23a34:	4b17      	ldr	r3, [pc, #92]	; (23a94 <nm_spi_read+0xf8>)
   23a36:	0018      	movs	r0, r3
   23a38:	4b17      	ldr	r3, [pc, #92]	; (23a98 <nm_spi_read+0xfc>)
   23a3a:	4798      	blx	r3
   23a3c:	2317      	movs	r3, #23
   23a3e:	18fb      	adds	r3, r7, r3
   23a40:	7819      	ldrb	r1, [r3, #0]
   23a42:	1dbb      	adds	r3, r7, #6
   23a44:	881b      	ldrh	r3, [r3, #0]
   23a46:	68fa      	ldr	r2, [r7, #12]
   23a48:	481a      	ldr	r0, [pc, #104]	; (23ab4 <nm_spi_read+0x118>)
   23a4a:	4c13      	ldr	r4, [pc, #76]	; (23a98 <nm_spi_read+0xfc>)
   23a4c:	47a0      	blx	r4
   23a4e:	4b14      	ldr	r3, [pc, #80]	; (23aa0 <nm_spi_read+0x104>)
   23a50:	0018      	movs	r0, r3
   23a52:	4b11      	ldr	r3, [pc, #68]	; (23a98 <nm_spi_read+0xfc>)
   23a54:	4798      	blx	r3
		nm_bsp_sleep(1);
   23a56:	2001      	movs	r0, #1
   23a58:	4b12      	ldr	r3, [pc, #72]	; (23aa4 <nm_spi_read+0x108>)
   23a5a:	4798      	blx	r3
		retry--;
   23a5c:	2317      	movs	r3, #23
   23a5e:	18fb      	adds	r3, r7, r3
   23a60:	781a      	ldrb	r2, [r3, #0]
   23a62:	2317      	movs	r3, #23
   23a64:	18fb      	adds	r3, r7, r3
   23a66:	3a01      	subs	r2, #1
   23a68:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   23a6a:	2317      	movs	r3, #23
   23a6c:	18fb      	adds	r3, r7, r3
   23a6e:	781b      	ldrb	r3, [r3, #0]
   23a70:	2b00      	cmp	r3, #0
   23a72:	d000      	beq.n	23a76 <nm_spi_read+0xda>
   23a74:	e7a1      	b.n	239ba <nm_spi_read+0x1e>
	}

	return result;
   23a76:	2315      	movs	r3, #21
   23a78:	18fb      	adds	r3, r7, r3
   23a7a:	781b      	ldrb	r3, [r3, #0]
   23a7c:	b25b      	sxtb	r3, r3
}
   23a7e:	0018      	movs	r0, r3
   23a80:	46bd      	mov	sp, r7
   23a82:	b007      	add	sp, #28
   23a84:	bd90      	pop	{r4, r7, pc}
   23a86:	46c0      	nop			; (mov r8, r8)
   23a88:	00022a61 	.word	0x00022a61
   23a8c:	00000472 	.word	0x00000472
   23a90:	00038dec 	.word	0x00038dec
   23a94:	00038784 	.word	0x00038784
   23a98:	0001cee9 	.word	0x0001cee9
   23a9c:	00038bf0 	.word	0x00038bf0
   23aa0:	000387c4 	.word	0x000387c4
   23aa4:	0001f3a1 	.word	0x0001f3a1
   23aa8:	000224e5 	.word	0x000224e5
   23aac:	00022925 	.word	0x00022925
   23ab0:	0000047d 	.word	0x0000047d
   23ab4:	00038b90 	.word	0x00038b90

00023ab8 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   23ab8:	b580      	push	{r7, lr}
   23aba:	b082      	sub	sp, #8
   23abc:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   23abe:	4b0c      	ldr	r3, [pc, #48]	; (23af0 <spi_init_pkt_sz+0x38>)
   23ac0:	0018      	movs	r0, r3
   23ac2:	4b0c      	ldr	r3, [pc, #48]	; (23af4 <spi_init_pkt_sz+0x3c>)
   23ac4:	4798      	blx	r3
   23ac6:	0003      	movs	r3, r0
   23ac8:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   23aca:	687b      	ldr	r3, [r7, #4]
   23acc:	2270      	movs	r2, #112	; 0x70
   23ace:	4393      	bics	r3, r2
   23ad0:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   23ad2:	687b      	ldr	r3, [r7, #4]
   23ad4:	2250      	movs	r2, #80	; 0x50
   23ad6:	4313      	orrs	r3, r2
   23ad8:	607b      	str	r3, [r7, #4]
   23ada:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   23adc:	687b      	ldr	r3, [r7, #4]
   23ade:	4a04      	ldr	r2, [pc, #16]	; (23af0 <spi_init_pkt_sz+0x38>)
   23ae0:	0019      	movs	r1, r3
   23ae2:	0010      	movs	r0, r2
   23ae4:	4b04      	ldr	r3, [pc, #16]	; (23af8 <spi_init_pkt_sz+0x40>)
   23ae6:	4798      	blx	r3
}
   23ae8:	46c0      	nop			; (mov r8, r8)
   23aea:	46bd      	mov	sp, r7
   23aec:	b002      	add	sp, #8
   23aee:	bd80      	pop	{r7, pc}
   23af0:	0000e824 	.word	0x0000e824
   23af4:	00023c91 	.word	0x00023c91
   23af8:	00023d05 	.word	0x00023d05

00023afc <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   23afc:	b590      	push	{r4, r7, lr}
   23afe:	b083      	sub	sp, #12
   23b00:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   23b02:	2300      	movs	r3, #0
   23b04:	9300      	str	r3, [sp, #0]
   23b06:	2300      	movs	r3, #0
   23b08:	2200      	movs	r2, #0
   23b0a:	2100      	movs	r1, #0
   23b0c:	20cf      	movs	r0, #207	; 0xcf
   23b0e:	4c05      	ldr	r4, [pc, #20]	; (23b24 <nm_spi_reset+0x28>)
   23b10:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   23b12:	20cf      	movs	r0, #207	; 0xcf
   23b14:	4b04      	ldr	r3, [pc, #16]	; (23b28 <nm_spi_reset+0x2c>)
   23b16:	4798      	blx	r3
	return M2M_SUCCESS;
   23b18:	2300      	movs	r3, #0
}
   23b1a:	0018      	movs	r0, r3
   23b1c:	46bd      	mov	sp, r7
   23b1e:	b001      	add	sp, #4
   23b20:	bd90      	pop	{r4, r7, pc}
   23b22:	46c0      	nop			; (mov r8, r8)
   23b24:	000224e5 	.word	0x000224e5
   23b28:	00022925 	.word	0x00022925

00023b2c <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   23b2c:	b580      	push	{r7, lr}
   23b2e:	b082      	sub	sp, #8
   23b30:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   23b32:	2300      	movs	r3, #0
   23b34:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   23b36:	4b40      	ldr	r3, [pc, #256]	; (23c38 <nm_spi_init+0x10c>)
   23b38:	2200      	movs	r2, #0
   23b3a:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   23b3c:	003b      	movs	r3, r7
   23b3e:	4a3f      	ldr	r2, [pc, #252]	; (23c3c <nm_spi_init+0x110>)
   23b40:	0019      	movs	r1, r3
   23b42:	0010      	movs	r0, r2
   23b44:	4b3e      	ldr	r3, [pc, #248]	; (23c40 <nm_spi_init+0x114>)
   23b46:	4798      	blx	r3
   23b48:	1e03      	subs	r3, r0, #0
   23b4a:	d129      	bne.n	23ba0 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   23b4c:	4b3a      	ldr	r3, [pc, #232]	; (23c38 <nm_spi_init+0x10c>)
   23b4e:	2201      	movs	r2, #1
   23b50:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   23b52:	2398      	movs	r3, #152	; 0x98
   23b54:	00da      	lsls	r2, r3, #3
   23b56:	493b      	ldr	r1, [pc, #236]	; (23c44 <nm_spi_init+0x118>)
   23b58:	4b3b      	ldr	r3, [pc, #236]	; (23c48 <nm_spi_init+0x11c>)
   23b5a:	0018      	movs	r0, r3
   23b5c:	4b3b      	ldr	r3, [pc, #236]	; (23c4c <nm_spi_init+0x120>)
   23b5e:	4798      	blx	r3
   23b60:	4b3b      	ldr	r3, [pc, #236]	; (23c50 <nm_spi_init+0x124>)
   23b62:	0018      	movs	r0, r3
   23b64:	4b39      	ldr	r3, [pc, #228]	; (23c4c <nm_spi_init+0x120>)
   23b66:	4798      	blx	r3
   23b68:	4b3a      	ldr	r3, [pc, #232]	; (23c54 <nm_spi_init+0x128>)
   23b6a:	0018      	movs	r0, r3
   23b6c:	4b37      	ldr	r3, [pc, #220]	; (23c4c <nm_spi_init+0x120>)
   23b6e:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   23b70:	003b      	movs	r3, r7
   23b72:	4a32      	ldr	r2, [pc, #200]	; (23c3c <nm_spi_init+0x110>)
   23b74:	0019      	movs	r1, r3
   23b76:	0010      	movs	r0, r2
   23b78:	4b31      	ldr	r3, [pc, #196]	; (23c40 <nm_spi_init+0x114>)
   23b7a:	4798      	blx	r3
   23b7c:	1e03      	subs	r3, r0, #0
   23b7e:	d10f      	bne.n	23ba0 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   23b80:	4a35      	ldr	r2, [pc, #212]	; (23c58 <nm_spi_init+0x12c>)
   23b82:	4930      	ldr	r1, [pc, #192]	; (23c44 <nm_spi_init+0x118>)
   23b84:	4b30      	ldr	r3, [pc, #192]	; (23c48 <nm_spi_init+0x11c>)
   23b86:	0018      	movs	r0, r3
   23b88:	4b30      	ldr	r3, [pc, #192]	; (23c4c <nm_spi_init+0x120>)
   23b8a:	4798      	blx	r3
   23b8c:	4b33      	ldr	r3, [pc, #204]	; (23c5c <nm_spi_init+0x130>)
   23b8e:	0018      	movs	r0, r3
   23b90:	4b2e      	ldr	r3, [pc, #184]	; (23c4c <nm_spi_init+0x120>)
   23b92:	4798      	blx	r3
   23b94:	4b2f      	ldr	r3, [pc, #188]	; (23c54 <nm_spi_init+0x128>)
   23b96:	0018      	movs	r0, r3
   23b98:	4b2c      	ldr	r3, [pc, #176]	; (23c4c <nm_spi_init+0x120>)
   23b9a:	4798      	blx	r3
			return 0;
   23b9c:	2300      	movs	r3, #0
   23b9e:	e047      	b.n	23c30 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   23ba0:	4b25      	ldr	r3, [pc, #148]	; (23c38 <nm_spi_init+0x10c>)
   23ba2:	781b      	ldrb	r3, [r3, #0]
   23ba4:	2b00      	cmp	r3, #0
   23ba6:	d126      	bne.n	23bf6 <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   23ba8:	683b      	ldr	r3, [r7, #0]
   23baa:	220c      	movs	r2, #12
   23bac:	4393      	bics	r3, r2
   23bae:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   23bb0:	683b      	ldr	r3, [r7, #0]
   23bb2:	2270      	movs	r2, #112	; 0x70
   23bb4:	4393      	bics	r3, r2
   23bb6:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   23bb8:	683b      	ldr	r3, [r7, #0]
   23bba:	2250      	movs	r2, #80	; 0x50
   23bbc:	4313      	orrs	r3, r2
   23bbe:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   23bc0:	683b      	ldr	r3, [r7, #0]
   23bc2:	4a1e      	ldr	r2, [pc, #120]	; (23c3c <nm_spi_init+0x110>)
   23bc4:	0019      	movs	r1, r3
   23bc6:	0010      	movs	r0, r2
   23bc8:	4b25      	ldr	r3, [pc, #148]	; (23c60 <nm_spi_init+0x134>)
   23bca:	4798      	blx	r3
   23bcc:	1e03      	subs	r3, r0, #0
   23bce:	d10f      	bne.n	23bf0 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   23bd0:	4a24      	ldr	r2, [pc, #144]	; (23c64 <nm_spi_init+0x138>)
   23bd2:	491c      	ldr	r1, [pc, #112]	; (23c44 <nm_spi_init+0x118>)
   23bd4:	4b1c      	ldr	r3, [pc, #112]	; (23c48 <nm_spi_init+0x11c>)
   23bd6:	0018      	movs	r0, r3
   23bd8:	4b1c      	ldr	r3, [pc, #112]	; (23c4c <nm_spi_init+0x120>)
   23bda:	4798      	blx	r3
   23bdc:	4b22      	ldr	r3, [pc, #136]	; (23c68 <nm_spi_init+0x13c>)
   23bde:	0018      	movs	r0, r3
   23be0:	4b1a      	ldr	r3, [pc, #104]	; (23c4c <nm_spi_init+0x120>)
   23be2:	4798      	blx	r3
   23be4:	4b1b      	ldr	r3, [pc, #108]	; (23c54 <nm_spi_init+0x128>)
   23be6:	0018      	movs	r0, r3
   23be8:	4b18      	ldr	r3, [pc, #96]	; (23c4c <nm_spi_init+0x120>)
   23bea:	4798      	blx	r3
			return 0;
   23bec:	2300      	movs	r3, #0
   23bee:	e01f      	b.n	23c30 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   23bf0:	4b11      	ldr	r3, [pc, #68]	; (23c38 <nm_spi_init+0x10c>)
   23bf2:	2201      	movs	r2, #1
   23bf4:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   23bf6:	1d3a      	adds	r2, r7, #4
   23bf8:	2380      	movs	r3, #128	; 0x80
   23bfa:	015b      	lsls	r3, r3, #5
   23bfc:	0011      	movs	r1, r2
   23bfe:	0018      	movs	r0, r3
   23c00:	4b0f      	ldr	r3, [pc, #60]	; (23c40 <nm_spi_init+0x114>)
   23c02:	4798      	blx	r3
   23c04:	1e03      	subs	r3, r0, #0
   23c06:	d110      	bne.n	23c2a <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   23c08:	4a18      	ldr	r2, [pc, #96]	; (23c6c <nm_spi_init+0x140>)
   23c0a:	490e      	ldr	r1, [pc, #56]	; (23c44 <nm_spi_init+0x118>)
   23c0c:	4b0e      	ldr	r3, [pc, #56]	; (23c48 <nm_spi_init+0x11c>)
   23c0e:	0018      	movs	r0, r3
   23c10:	4b0e      	ldr	r3, [pc, #56]	; (23c4c <nm_spi_init+0x120>)
   23c12:	4798      	blx	r3
   23c14:	4b16      	ldr	r3, [pc, #88]	; (23c70 <nm_spi_init+0x144>)
   23c16:	0018      	movs	r0, r3
   23c18:	4b0c      	ldr	r3, [pc, #48]	; (23c4c <nm_spi_init+0x120>)
   23c1a:	4798      	blx	r3
   23c1c:	4b0d      	ldr	r3, [pc, #52]	; (23c54 <nm_spi_init+0x128>)
   23c1e:	0018      	movs	r0, r3
   23c20:	4b0a      	ldr	r3, [pc, #40]	; (23c4c <nm_spi_init+0x120>)
   23c22:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   23c24:	2306      	movs	r3, #6
   23c26:	425b      	negs	r3, r3
   23c28:	e002      	b.n	23c30 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   23c2a:	4b12      	ldr	r3, [pc, #72]	; (23c74 <nm_spi_init+0x148>)
   23c2c:	4798      	blx	r3


	return M2M_SUCCESS;
   23c2e:	2300      	movs	r3, #0
}
   23c30:	0018      	movs	r0, r3
   23c32:	46bd      	mov	sp, r7
   23c34:	b002      	add	sp, #8
   23c36:	bd80      	pop	{r7, pc}
   23c38:	2000427c 	.word	0x2000427c
   23c3c:	0000e824 	.word	0x0000e824
   23c40:	00023825 	.word	0x00023825
   23c44:	00038df8 	.word	0x00038df8
   23c48:	00038784 	.word	0x00038784
   23c4c:	0001cee9 	.word	0x0001cee9
   23c50:	00038c20 	.word	0x00038c20
   23c54:	000387c4 	.word	0x000387c4
   23c58:	000004c3 	.word	0x000004c3
   23c5c:	00038c70 	.word	0x00038c70
   23c60:	0002352d 	.word	0x0002352d
   23c64:	000004cd 	.word	0x000004cd
   23c68:	00038ca0 	.word	0x00038ca0
   23c6c:	000004d7 	.word	0x000004d7
   23c70:	00038cd4 	.word	0x00038cd4
   23c74:	00023ab9 	.word	0x00023ab9

00023c78 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   23c78:	b580      	push	{r7, lr}
   23c7a:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   23c7c:	4b03      	ldr	r3, [pc, #12]	; (23c8c <nm_spi_deinit+0x14>)
   23c7e:	2200      	movs	r2, #0
   23c80:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   23c82:	2300      	movs	r3, #0
}
   23c84:	0018      	movs	r0, r3
   23c86:	46bd      	mov	sp, r7
   23c88:	bd80      	pop	{r7, pc}
   23c8a:	46c0      	nop			; (mov r8, r8)
   23c8c:	2000427c 	.word	0x2000427c

00023c90 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   23c90:	b580      	push	{r7, lr}
   23c92:	b084      	sub	sp, #16
   23c94:	af00      	add	r7, sp, #0
   23c96:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   23c98:	230c      	movs	r3, #12
   23c9a:	18fa      	adds	r2, r7, r3
   23c9c:	687b      	ldr	r3, [r7, #4]
   23c9e:	0011      	movs	r1, r2
   23ca0:	0018      	movs	r0, r3
   23ca2:	4b03      	ldr	r3, [pc, #12]	; (23cb0 <nm_spi_read_reg+0x20>)
   23ca4:	4798      	blx	r3

	return u32Val;
   23ca6:	68fb      	ldr	r3, [r7, #12]
}
   23ca8:	0018      	movs	r0, r3
   23caa:	46bd      	mov	sp, r7
   23cac:	b004      	add	sp, #16
   23cae:	bd80      	pop	{r7, pc}
   23cb0:	00023825 	.word	0x00023825

00023cb4 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   23cb4:	b590      	push	{r4, r7, lr}
   23cb6:	b085      	sub	sp, #20
   23cb8:	af00      	add	r7, sp, #0
   23cba:	6078      	str	r0, [r7, #4]
   23cbc:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   23cbe:	230f      	movs	r3, #15
   23cc0:	18fc      	adds	r4, r7, r3
   23cc2:	683a      	ldr	r2, [r7, #0]
   23cc4:	687b      	ldr	r3, [r7, #4]
   23cc6:	0011      	movs	r1, r2
   23cc8:	0018      	movs	r0, r3
   23cca:	4b0d      	ldr	r3, [pc, #52]	; (23d00 <nm_spi_read_reg_with_ret+0x4c>)
   23ccc:	4798      	blx	r3
   23cce:	0003      	movs	r3, r0
   23cd0:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   23cd2:	230f      	movs	r3, #15
   23cd4:	18fb      	adds	r3, r7, r3
   23cd6:	781b      	ldrb	r3, [r3, #0]
   23cd8:	b25b      	sxtb	r3, r3
   23cda:	2b01      	cmp	r3, #1
   23cdc:	d104      	bne.n	23ce8 <nm_spi_read_reg_with_ret+0x34>
   23cde:	230f      	movs	r3, #15
   23ce0:	18fb      	adds	r3, r7, r3
   23ce2:	2200      	movs	r2, #0
   23ce4:	701a      	strb	r2, [r3, #0]
   23ce6:	e003      	b.n	23cf0 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   23ce8:	230f      	movs	r3, #15
   23cea:	18fb      	adds	r3, r7, r3
   23cec:	22fa      	movs	r2, #250	; 0xfa
   23cee:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   23cf0:	230f      	movs	r3, #15
   23cf2:	18fb      	adds	r3, r7, r3
   23cf4:	781b      	ldrb	r3, [r3, #0]
   23cf6:	b25b      	sxtb	r3, r3
}
   23cf8:	0018      	movs	r0, r3
   23cfa:	46bd      	mov	sp, r7
   23cfc:	b005      	add	sp, #20
   23cfe:	bd90      	pop	{r4, r7, pc}
   23d00:	00023825 	.word	0x00023825

00023d04 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   23d04:	b590      	push	{r4, r7, lr}
   23d06:	b085      	sub	sp, #20
   23d08:	af00      	add	r7, sp, #0
   23d0a:	6078      	str	r0, [r7, #4]
   23d0c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   23d0e:	230f      	movs	r3, #15
   23d10:	18fc      	adds	r4, r7, r3
   23d12:	683a      	ldr	r2, [r7, #0]
   23d14:	687b      	ldr	r3, [r7, #4]
   23d16:	0011      	movs	r1, r2
   23d18:	0018      	movs	r0, r3
   23d1a:	4b0d      	ldr	r3, [pc, #52]	; (23d50 <nm_spi_write_reg+0x4c>)
   23d1c:	4798      	blx	r3
   23d1e:	0003      	movs	r3, r0
   23d20:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   23d22:	230f      	movs	r3, #15
   23d24:	18fb      	adds	r3, r7, r3
   23d26:	781b      	ldrb	r3, [r3, #0]
   23d28:	b25b      	sxtb	r3, r3
   23d2a:	2b01      	cmp	r3, #1
   23d2c:	d104      	bne.n	23d38 <nm_spi_write_reg+0x34>
   23d2e:	230f      	movs	r3, #15
   23d30:	18fb      	adds	r3, r7, r3
   23d32:	2200      	movs	r2, #0
   23d34:	701a      	strb	r2, [r3, #0]
   23d36:	e003      	b.n	23d40 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   23d38:	230f      	movs	r3, #15
   23d3a:	18fb      	adds	r3, r7, r3
   23d3c:	22fa      	movs	r2, #250	; 0xfa
   23d3e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   23d40:	230f      	movs	r3, #15
   23d42:	18fb      	adds	r3, r7, r3
   23d44:	781b      	ldrb	r3, [r3, #0]
   23d46:	b25b      	sxtb	r3, r3
}
   23d48:	0018      	movs	r0, r3
   23d4a:	46bd      	mov	sp, r7
   23d4c:	b005      	add	sp, #20
   23d4e:	bd90      	pop	{r4, r7, pc}
   23d50:	0002352d 	.word	0x0002352d

00023d54 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   23d54:	b590      	push	{r4, r7, lr}
   23d56:	b087      	sub	sp, #28
   23d58:	af00      	add	r7, sp, #0
   23d5a:	60f8      	str	r0, [r7, #12]
   23d5c:	60b9      	str	r1, [r7, #8]
   23d5e:	1dbb      	adds	r3, r7, #6
   23d60:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   23d62:	2317      	movs	r3, #23
   23d64:	18fc      	adds	r4, r7, r3
   23d66:	1dbb      	adds	r3, r7, #6
   23d68:	881a      	ldrh	r2, [r3, #0]
   23d6a:	68b9      	ldr	r1, [r7, #8]
   23d6c:	68fb      	ldr	r3, [r7, #12]
   23d6e:	0018      	movs	r0, r3
   23d70:	4b0d      	ldr	r3, [pc, #52]	; (23da8 <nm_spi_read_block+0x54>)
   23d72:	4798      	blx	r3
   23d74:	0003      	movs	r3, r0
   23d76:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   23d78:	2317      	movs	r3, #23
   23d7a:	18fb      	adds	r3, r7, r3
   23d7c:	781b      	ldrb	r3, [r3, #0]
   23d7e:	b25b      	sxtb	r3, r3
   23d80:	2b01      	cmp	r3, #1
   23d82:	d104      	bne.n	23d8e <nm_spi_read_block+0x3a>
   23d84:	2317      	movs	r3, #23
   23d86:	18fb      	adds	r3, r7, r3
   23d88:	2200      	movs	r2, #0
   23d8a:	701a      	strb	r2, [r3, #0]
   23d8c:	e003      	b.n	23d96 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   23d8e:	2317      	movs	r3, #23
   23d90:	18fb      	adds	r3, r7, r3
   23d92:	22fa      	movs	r2, #250	; 0xfa
   23d94:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   23d96:	2317      	movs	r3, #23
   23d98:	18fb      	adds	r3, r7, r3
   23d9a:	781b      	ldrb	r3, [r3, #0]
   23d9c:	b25b      	sxtb	r3, r3
}
   23d9e:	0018      	movs	r0, r3
   23da0:	46bd      	mov	sp, r7
   23da2:	b007      	add	sp, #28
   23da4:	bd90      	pop	{r4, r7, pc}
   23da6:	46c0      	nop			; (mov r8, r8)
   23da8:	0002399d 	.word	0x0002399d

00023dac <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   23dac:	b590      	push	{r4, r7, lr}
   23dae:	b087      	sub	sp, #28
   23db0:	af00      	add	r7, sp, #0
   23db2:	60f8      	str	r0, [r7, #12]
   23db4:	60b9      	str	r1, [r7, #8]
   23db6:	1dbb      	adds	r3, r7, #6
   23db8:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   23dba:	2317      	movs	r3, #23
   23dbc:	18fc      	adds	r4, r7, r3
   23dbe:	1dbb      	adds	r3, r7, #6
   23dc0:	881a      	ldrh	r2, [r3, #0]
   23dc2:	68b9      	ldr	r1, [r7, #8]
   23dc4:	68fb      	ldr	r3, [r7, #12]
   23dc6:	0018      	movs	r0, r3
   23dc8:	4b0d      	ldr	r3, [pc, #52]	; (23e00 <nm_spi_write_block+0x54>)
   23dca:	4798      	blx	r3
   23dcc:	0003      	movs	r3, r0
   23dce:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   23dd0:	2317      	movs	r3, #23
   23dd2:	18fb      	adds	r3, r7, r3
   23dd4:	781b      	ldrb	r3, [r3, #0]
   23dd6:	b25b      	sxtb	r3, r3
   23dd8:	2b01      	cmp	r3, #1
   23dda:	d104      	bne.n	23de6 <nm_spi_write_block+0x3a>
   23ddc:	2317      	movs	r3, #23
   23dde:	18fb      	adds	r3, r7, r3
   23de0:	2200      	movs	r2, #0
   23de2:	701a      	strb	r2, [r3, #0]
   23de4:	e003      	b.n	23dee <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   23de6:	2317      	movs	r3, #23
   23de8:	18fb      	adds	r3, r7, r3
   23dea:	22fa      	movs	r2, #250	; 0xfa
   23dec:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   23dee:	2317      	movs	r3, #23
   23df0:	18fb      	adds	r3, r7, r3
   23df2:	781b      	ldrb	r3, [r3, #0]
   23df4:	b25b      	sxtb	r3, r3
}
   23df6:	0018      	movs	r0, r3
   23df8:	46bd      	mov	sp, r7
   23dfa:	b007      	add	sp, #28
   23dfc:	bd90      	pop	{r4, r7, pc}
   23dfe:	46c0      	nop			; (mov r8, r8)
   23e00:	00023679 	.word	0x00023679

00023e04 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   23e04:	b590      	push	{r4, r7, lr}
   23e06:	b089      	sub	sp, #36	; 0x24
   23e08:	af00      	add	r7, sp, #0
   23e0a:	60b9      	str	r1, [r7, #8]
   23e0c:	0011      	movs	r1, r2
   23e0e:	607b      	str	r3, [r7, #4]
   23e10:	230f      	movs	r3, #15
   23e12:	18fb      	adds	r3, r7, r3
   23e14:	1c02      	adds	r2, r0, #0
   23e16:	701a      	strb	r2, [r3, #0]
   23e18:	230e      	movs	r3, #14
   23e1a:	18fb      	adds	r3, r7, r3
   23e1c:	1c0a      	adds	r2, r1, #0
   23e1e:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   23e20:	2330      	movs	r3, #48	; 0x30
   23e22:	18fb      	adds	r3, r7, r3
   23e24:	881b      	ldrh	r3, [r3, #0]
   23e26:	2b00      	cmp	r3, #0
   23e28:	d100      	bne.n	23e2c <Socket_ReadSocketData+0x28>
   23e2a:	e0d7      	b.n	23fdc <Socket_ReadSocketData+0x1d8>
   23e2c:	230f      	movs	r3, #15
   23e2e:	18fb      	adds	r3, r7, r3
   23e30:	2200      	movs	r2, #0
   23e32:	569a      	ldrsb	r2, [r3, r2]
   23e34:	4b6b      	ldr	r3, [pc, #428]	; (23fe4 <Socket_ReadSocketData+0x1e0>)
   23e36:	0112      	lsls	r2, r2, #4
   23e38:	58d3      	ldr	r3, [r2, r3]
   23e3a:	2b00      	cmp	r3, #0
   23e3c:	d100      	bne.n	23e40 <Socket_ReadSocketData+0x3c>
   23e3e:	e0cd      	b.n	23fdc <Socket_ReadSocketData+0x1d8>
   23e40:	230f      	movs	r3, #15
   23e42:	18fb      	adds	r3, r7, r3
   23e44:	781b      	ldrb	r3, [r3, #0]
   23e46:	b25b      	sxtb	r3, r3
   23e48:	4a66      	ldr	r2, [pc, #408]	; (23fe4 <Socket_ReadSocketData+0x1e0>)
   23e4a:	011b      	lsls	r3, r3, #4
   23e4c:	18d3      	adds	r3, r2, r3
   23e4e:	3304      	adds	r3, #4
   23e50:	881b      	ldrh	r3, [r3, #0]
   23e52:	b29b      	uxth	r3, r3
   23e54:	2b00      	cmp	r3, #0
   23e56:	d100      	bne.n	23e5a <Socket_ReadSocketData+0x56>
   23e58:	e0c0      	b.n	23fdc <Socket_ReadSocketData+0x1d8>
   23e5a:	230f      	movs	r3, #15
   23e5c:	18fb      	adds	r3, r7, r3
   23e5e:	781b      	ldrb	r3, [r3, #0]
   23e60:	b25b      	sxtb	r3, r3
   23e62:	4a60      	ldr	r2, [pc, #384]	; (23fe4 <Socket_ReadSocketData+0x1e0>)
   23e64:	011b      	lsls	r3, r3, #4
   23e66:	18d3      	adds	r3, r2, r3
   23e68:	330a      	adds	r3, #10
   23e6a:	781b      	ldrb	r3, [r3, #0]
   23e6c:	b2db      	uxtb	r3, r3
   23e6e:	2b01      	cmp	r3, #1
   23e70:	d000      	beq.n	23e74 <Socket_ReadSocketData+0x70>
   23e72:	e0b3      	b.n	23fdc <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   23e74:	687b      	ldr	r3, [r7, #4]
   23e76:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   23e78:	68bb      	ldr	r3, [r7, #8]
   23e7a:	2230      	movs	r2, #48	; 0x30
   23e7c:	18ba      	adds	r2, r7, r2
   23e7e:	8812      	ldrh	r2, [r2, #0]
   23e80:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   23e82:	2319      	movs	r3, #25
   23e84:	18fb      	adds	r3, r7, r3
   23e86:	2201      	movs	r2, #1
   23e88:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   23e8a:	231a      	movs	r3, #26
   23e8c:	18fb      	adds	r3, r7, r3
   23e8e:	2230      	movs	r2, #48	; 0x30
   23e90:	18ba      	adds	r2, r7, r2
   23e92:	8812      	ldrh	r2, [r2, #0]
   23e94:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   23e96:	230f      	movs	r3, #15
   23e98:	18fb      	adds	r3, r7, r3
   23e9a:	781b      	ldrb	r3, [r3, #0]
   23e9c:	b25b      	sxtb	r3, r3
   23e9e:	4a51      	ldr	r2, [pc, #324]	; (23fe4 <Socket_ReadSocketData+0x1e0>)
   23ea0:	011b      	lsls	r3, r3, #4
   23ea2:	18d3      	adds	r3, r2, r3
   23ea4:	3304      	adds	r3, #4
   23ea6:	881b      	ldrh	r3, [r3, #0]
   23ea8:	b29b      	uxth	r3, r3
   23eaa:	221a      	movs	r2, #26
   23eac:	18ba      	adds	r2, r7, r2
   23eae:	8812      	ldrh	r2, [r2, #0]
   23eb0:	1ad3      	subs	r3, r2, r3
   23eb2:	b29a      	uxth	r2, r3
   23eb4:	2316      	movs	r3, #22
   23eb6:	18fb      	adds	r3, r7, r3
   23eb8:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   23eba:	2316      	movs	r3, #22
   23ebc:	18fb      	adds	r3, r7, r3
   23ebe:	2200      	movs	r2, #0
   23ec0:	5e9b      	ldrsh	r3, [r3, r2]
   23ec2:	2b00      	cmp	r3, #0
   23ec4:	dd0f      	ble.n	23ee6 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   23ec6:	2319      	movs	r3, #25
   23ec8:	18fb      	adds	r3, r7, r3
   23eca:	2200      	movs	r2, #0
   23ecc:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   23ece:	230f      	movs	r3, #15
   23ed0:	18fb      	adds	r3, r7, r3
   23ed2:	2200      	movs	r2, #0
   23ed4:	569a      	ldrsb	r2, [r3, r2]
   23ed6:	231a      	movs	r3, #26
   23ed8:	18fb      	adds	r3, r7, r3
   23eda:	4942      	ldr	r1, [pc, #264]	; (23fe4 <Socket_ReadSocketData+0x1e0>)
   23edc:	0112      	lsls	r2, r2, #4
   23ede:	188a      	adds	r2, r1, r2
   23ee0:	3204      	adds	r2, #4
   23ee2:	8812      	ldrh	r2, [r2, #0]
   23ee4:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   23ee6:	230f      	movs	r3, #15
   23ee8:	18fb      	adds	r3, r7, r3
   23eea:	2200      	movs	r2, #0
   23eec:	569a      	ldrsb	r2, [r3, r2]
   23eee:	4b3d      	ldr	r3, [pc, #244]	; (23fe4 <Socket_ReadSocketData+0x1e0>)
   23ef0:	0112      	lsls	r2, r2, #4
   23ef2:	58d1      	ldr	r1, [r2, r3]
   23ef4:	2319      	movs	r3, #25
   23ef6:	18fb      	adds	r3, r7, r3
   23ef8:	781c      	ldrb	r4, [r3, #0]
   23efa:	231a      	movs	r3, #26
   23efc:	18fb      	adds	r3, r7, r3
   23efe:	881a      	ldrh	r2, [r3, #0]
   23f00:	69f8      	ldr	r0, [r7, #28]
   23f02:	0023      	movs	r3, r4
   23f04:	4c38      	ldr	r4, [pc, #224]	; (23fe8 <Socket_ReadSocketData+0x1e4>)
   23f06:	47a0      	blx	r4
   23f08:	1e03      	subs	r3, r0, #0
   23f0a:	d14f      	bne.n	23fac <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   23f0c:	230f      	movs	r3, #15
   23f0e:	18fb      	adds	r3, r7, r3
   23f10:	2200      	movs	r2, #0
   23f12:	569a      	ldrsb	r2, [r3, r2]
   23f14:	4b33      	ldr	r3, [pc, #204]	; (23fe4 <Socket_ReadSocketData+0x1e0>)
   23f16:	0112      	lsls	r2, r2, #4
   23f18:	58d2      	ldr	r2, [r2, r3]
   23f1a:	68bb      	ldr	r3, [r7, #8]
   23f1c:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   23f1e:	231a      	movs	r3, #26
   23f20:	18fb      	adds	r3, r7, r3
   23f22:	2200      	movs	r2, #0
   23f24:	5e9a      	ldrsh	r2, [r3, r2]
   23f26:	68bb      	ldr	r3, [r7, #8]
   23f28:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   23f2a:	68bb      	ldr	r3, [r7, #8]
   23f2c:	88da      	ldrh	r2, [r3, #6]
   23f2e:	231a      	movs	r3, #26
   23f30:	18fb      	adds	r3, r7, r3
   23f32:	881b      	ldrh	r3, [r3, #0]
   23f34:	1ad3      	subs	r3, r2, r3
   23f36:	b29a      	uxth	r2, r3
   23f38:	68bb      	ldr	r3, [r7, #8]
   23f3a:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   23f3c:	4b2b      	ldr	r3, [pc, #172]	; (23fec <Socket_ReadSocketData+0x1e8>)
   23f3e:	681b      	ldr	r3, [r3, #0]
   23f40:	2b00      	cmp	r3, #0
   23f42:	d00b      	beq.n	23f5c <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   23f44:	4b29      	ldr	r3, [pc, #164]	; (23fec <Socket_ReadSocketData+0x1e8>)
   23f46:	681b      	ldr	r3, [r3, #0]
   23f48:	68bc      	ldr	r4, [r7, #8]
   23f4a:	220e      	movs	r2, #14
   23f4c:	18ba      	adds	r2, r7, r2
   23f4e:	7811      	ldrb	r1, [r2, #0]
   23f50:	220f      	movs	r2, #15
   23f52:	18ba      	adds	r2, r7, r2
   23f54:	2000      	movs	r0, #0
   23f56:	5610      	ldrsb	r0, [r2, r0]
   23f58:	0022      	movs	r2, r4
   23f5a:	4798      	blx	r3

				u16ReadCount -= u16Read;
   23f5c:	2330      	movs	r3, #48	; 0x30
   23f5e:	18f9      	adds	r1, r7, r3
   23f60:	2330      	movs	r3, #48	; 0x30
   23f62:	18fa      	adds	r2, r7, r3
   23f64:	231a      	movs	r3, #26
   23f66:	18fb      	adds	r3, r7, r3
   23f68:	8812      	ldrh	r2, [r2, #0]
   23f6a:	881b      	ldrh	r3, [r3, #0]
   23f6c:	1ad3      	subs	r3, r2, r3
   23f6e:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   23f70:	231a      	movs	r3, #26
   23f72:	18fb      	adds	r3, r7, r3
   23f74:	881b      	ldrh	r3, [r3, #0]
   23f76:	69fa      	ldr	r2, [r7, #28]
   23f78:	18d3      	adds	r3, r2, r3
   23f7a:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   23f7c:	230f      	movs	r3, #15
   23f7e:	18fb      	adds	r3, r7, r3
   23f80:	781b      	ldrb	r3, [r3, #0]
   23f82:	b25b      	sxtb	r3, r3
   23f84:	4a17      	ldr	r2, [pc, #92]	; (23fe4 <Socket_ReadSocketData+0x1e0>)
   23f86:	011b      	lsls	r3, r3, #4
   23f88:	18d3      	adds	r3, r2, r3
   23f8a:	330a      	adds	r3, #10
   23f8c:	781b      	ldrb	r3, [r3, #0]
   23f8e:	b2db      	uxtb	r3, r3
   23f90:	2b00      	cmp	r3, #0
   23f92:	d11c      	bne.n	23fce <Socket_ReadSocketData+0x1ca>
   23f94:	2330      	movs	r3, #48	; 0x30
   23f96:	18fb      	adds	r3, r7, r3
   23f98:	881b      	ldrh	r3, [r3, #0]
   23f9a:	2b00      	cmp	r3, #0
   23f9c:	d017      	beq.n	23fce <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   23f9e:	2301      	movs	r3, #1
   23fa0:	2200      	movs	r2, #0
   23fa2:	2100      	movs	r1, #0
   23fa4:	2000      	movs	r0, #0
   23fa6:	4c10      	ldr	r4, [pc, #64]	; (23fe8 <Socket_ReadSocketData+0x1e4>)
   23fa8:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   23faa:	e017      	b.n	23fdc <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   23fac:	4b10      	ldr	r3, [pc, #64]	; (23ff0 <Socket_ReadSocketData+0x1ec>)
   23fae:	0018      	movs	r0, r3
   23fb0:	4b10      	ldr	r3, [pc, #64]	; (23ff4 <Socket_ReadSocketData+0x1f0>)
   23fb2:	4798      	blx	r3
   23fb4:	2330      	movs	r3, #48	; 0x30
   23fb6:	18fb      	adds	r3, r7, r3
   23fb8:	881a      	ldrh	r2, [r3, #0]
   23fba:	4b0f      	ldr	r3, [pc, #60]	; (23ff8 <Socket_ReadSocketData+0x1f4>)
   23fbc:	0011      	movs	r1, r2
   23fbe:	0018      	movs	r0, r3
   23fc0:	4b0c      	ldr	r3, [pc, #48]	; (23ff4 <Socket_ReadSocketData+0x1f0>)
   23fc2:	4798      	blx	r3
   23fc4:	4b0d      	ldr	r3, [pc, #52]	; (23ffc <Socket_ReadSocketData+0x1f8>)
   23fc6:	0018      	movs	r0, r3
   23fc8:	4b0a      	ldr	r3, [pc, #40]	; (23ff4 <Socket_ReadSocketData+0x1f0>)
   23fca:	4798      	blx	r3
				break;
   23fcc:	e006      	b.n	23fdc <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   23fce:	2330      	movs	r3, #48	; 0x30
   23fd0:	18fb      	adds	r3, r7, r3
   23fd2:	881b      	ldrh	r3, [r3, #0]
   23fd4:	2b00      	cmp	r3, #0
   23fd6:	d000      	beq.n	23fda <Socket_ReadSocketData+0x1d6>
   23fd8:	e753      	b.n	23e82 <Socket_ReadSocketData+0x7e>
	}
}
   23fda:	e7ff      	b.n	23fdc <Socket_ReadSocketData+0x1d8>
   23fdc:	46c0      	nop			; (mov r8, r8)
   23fde:	46bd      	mov	sp, r7
   23fe0:	b009      	add	sp, #36	; 0x24
   23fe2:	bd90      	pop	{r4, r7, pc}
   23fe4:	20005ac8 	.word	0x20005ac8
   23fe8:	000207fd 	.word	0x000207fd
   23fec:	20005b78 	.word	0x20005b78
   23ff0:	00038e04 	.word	0x00038e04
   23ff4:	0001cee9 	.word	0x0001cee9
   23ff8:	00038e10 	.word	0x00038e10
   23ffc:	00038e24 	.word	0x00038e24

00024000 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   24000:	b590      	push	{r4, r7, lr}
   24002:	b0bb      	sub	sp, #236	; 0xec
   24004:	af02      	add	r7, sp, #8
   24006:	603a      	str	r2, [r7, #0]
   24008:	1dfb      	adds	r3, r7, #7
   2400a:	1c02      	adds	r2, r0, #0
   2400c:	701a      	strb	r2, [r3, #0]
   2400e:	1d3b      	adds	r3, r7, #4
   24010:	1c0a      	adds	r2, r1, #0
   24012:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   24014:	1dfb      	adds	r3, r7, #7
   24016:	781b      	ldrb	r3, [r3, #0]
   24018:	2b41      	cmp	r3, #65	; 0x41
   2401a:	d003      	beq.n	24024 <m2m_ip_cb+0x24>
   2401c:	1dfb      	adds	r3, r7, #7
   2401e:	781b      	ldrb	r3, [r3, #0]
   24020:	2b54      	cmp	r3, #84	; 0x54
   24022:	d120      	bne.n	24066 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   24024:	23cc      	movs	r3, #204	; 0xcc
   24026:	18f9      	adds	r1, r7, r3
   24028:	6838      	ldr	r0, [r7, #0]
   2402a:	2300      	movs	r3, #0
   2402c:	2204      	movs	r2, #4
   2402e:	4c98      	ldr	r4, [pc, #608]	; (24290 <m2m_ip_cb+0x290>)
   24030:	47a0      	blx	r4
   24032:	1e03      	subs	r3, r0, #0
   24034:	d000      	beq.n	24038 <m2m_ip_cb+0x38>
   24036:	e275      	b.n	24524 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   24038:	23cc      	movs	r3, #204	; 0xcc
   2403a:	18fb      	adds	r3, r7, r3
   2403c:	2201      	movs	r2, #1
   2403e:	569a      	ldrsb	r2, [r3, r2]
   24040:	23c8      	movs	r3, #200	; 0xc8
   24042:	18fb      	adds	r3, r7, r3
   24044:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   24046:	4b93      	ldr	r3, [pc, #588]	; (24294 <m2m_ip_cb+0x294>)
   24048:	681b      	ldr	r3, [r3, #0]
   2404a:	2b00      	cmp	r3, #0
   2404c:	d100      	bne.n	24050 <m2m_ip_cb+0x50>
   2404e:	e269      	b.n	24524 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   24050:	4b90      	ldr	r3, [pc, #576]	; (24294 <m2m_ip_cb+0x294>)
   24052:	681b      	ldr	r3, [r3, #0]
   24054:	22cc      	movs	r2, #204	; 0xcc
   24056:	18ba      	adds	r2, r7, r2
   24058:	2000      	movs	r0, #0
   2405a:	5610      	ldrsb	r0, [r2, r0]
   2405c:	22c8      	movs	r2, #200	; 0xc8
   2405e:	18ba      	adds	r2, r7, r2
   24060:	2101      	movs	r1, #1
   24062:	4798      	blx	r3
	{
   24064:	e25e      	b.n	24524 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   24066:	1dfb      	adds	r3, r7, #7
   24068:	781b      	ldrb	r3, [r3, #0]
   2406a:	2b42      	cmp	r3, #66	; 0x42
   2406c:	d120      	bne.n	240b0 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   2406e:	23c4      	movs	r3, #196	; 0xc4
   24070:	18f9      	adds	r1, r7, r3
   24072:	6838      	ldr	r0, [r7, #0]
   24074:	2300      	movs	r3, #0
   24076:	2204      	movs	r2, #4
   24078:	4c85      	ldr	r4, [pc, #532]	; (24290 <m2m_ip_cb+0x290>)
   2407a:	47a0      	blx	r4
   2407c:	1e03      	subs	r3, r0, #0
   2407e:	d000      	beq.n	24082 <m2m_ip_cb+0x82>
   24080:	e257      	b.n	24532 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   24082:	23c4      	movs	r3, #196	; 0xc4
   24084:	18fb      	adds	r3, r7, r3
   24086:	2201      	movs	r2, #1
   24088:	569a      	ldrsb	r2, [r3, r2]
   2408a:	23c0      	movs	r3, #192	; 0xc0
   2408c:	18fb      	adds	r3, r7, r3
   2408e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   24090:	4b80      	ldr	r3, [pc, #512]	; (24294 <m2m_ip_cb+0x294>)
   24092:	681b      	ldr	r3, [r3, #0]
   24094:	2b00      	cmp	r3, #0
   24096:	d100      	bne.n	2409a <m2m_ip_cb+0x9a>
   24098:	e24b      	b.n	24532 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   2409a:	4b7e      	ldr	r3, [pc, #504]	; (24294 <m2m_ip_cb+0x294>)
   2409c:	681b      	ldr	r3, [r3, #0]
   2409e:	22c4      	movs	r2, #196	; 0xc4
   240a0:	18ba      	adds	r2, r7, r2
   240a2:	2000      	movs	r0, #0
   240a4:	5610      	ldrsb	r0, [r2, r0]
   240a6:	22c0      	movs	r2, #192	; 0xc0
   240a8:	18ba      	adds	r2, r7, r2
   240aa:	2102      	movs	r1, #2
   240ac:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   240ae:	e240      	b.n	24532 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   240b0:	1dfb      	adds	r3, r7, #7
   240b2:	781b      	ldrb	r3, [r3, #0]
   240b4:	2b43      	cmp	r3, #67	; 0x43
   240b6:	d000      	beq.n	240ba <m2m_ip_cb+0xba>
   240b8:	e086      	b.n	241c8 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   240ba:	23b4      	movs	r3, #180	; 0xb4
   240bc:	18f9      	adds	r1, r7, r3
   240be:	6838      	ldr	r0, [r7, #0]
   240c0:	2300      	movs	r3, #0
   240c2:	220c      	movs	r2, #12
   240c4:	4c72      	ldr	r4, [pc, #456]	; (24290 <m2m_ip_cb+0x290>)
   240c6:	47a0      	blx	r4
   240c8:	1e03      	subs	r3, r0, #0
   240ca:	d000      	beq.n	240ce <m2m_ip_cb+0xce>
   240cc:	e231      	b.n	24532 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   240ce:	23b4      	movs	r3, #180	; 0xb4
   240d0:	18fb      	adds	r3, r7, r3
   240d2:	7a5b      	ldrb	r3, [r3, #9]
   240d4:	b25b      	sxtb	r3, r3
   240d6:	2b00      	cmp	r3, #0
   240d8:	db4f      	blt.n	2417a <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   240da:	23b4      	movs	r3, #180	; 0xb4
   240dc:	18fb      	adds	r3, r7, r3
   240de:	7a5b      	ldrb	r3, [r3, #9]
   240e0:	b25b      	sxtb	r3, r3
   240e2:	0018      	movs	r0, r3
   240e4:	23b4      	movs	r3, #180	; 0xb4
   240e6:	18fb      	adds	r3, r7, r3
   240e8:	7a1b      	ldrb	r3, [r3, #8]
   240ea:	b25b      	sxtb	r3, r3
   240ec:	4a6a      	ldr	r2, [pc, #424]	; (24298 <m2m_ip_cb+0x298>)
   240ee:	011b      	lsls	r3, r3, #4
   240f0:	18d3      	adds	r3, r2, r3
   240f2:	330b      	adds	r3, #11
   240f4:	781b      	ldrb	r3, [r3, #0]
   240f6:	b2d9      	uxtb	r1, r3
   240f8:	4a67      	ldr	r2, [pc, #412]	; (24298 <m2m_ip_cb+0x298>)
   240fa:	0103      	lsls	r3, r0, #4
   240fc:	18d3      	adds	r3, r2, r3
   240fe:	330b      	adds	r3, #11
   24100:	1c0a      	adds	r2, r1, #0
   24102:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   24104:	23b4      	movs	r3, #180	; 0xb4
   24106:	18fb      	adds	r3, r7, r3
   24108:	7a5b      	ldrb	r3, [r3, #9]
   2410a:	b25b      	sxtb	r3, r3
   2410c:	4a62      	ldr	r2, [pc, #392]	; (24298 <m2m_ip_cb+0x298>)
   2410e:	011b      	lsls	r3, r3, #4
   24110:	18d3      	adds	r3, r2, r3
   24112:	330a      	adds	r3, #10
   24114:	2201      	movs	r2, #1
   24116:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   24118:	23b4      	movs	r3, #180	; 0xb4
   2411a:	18fb      	adds	r3, r7, r3
   2411c:	7a5b      	ldrb	r3, [r3, #9]
   2411e:	b25b      	sxtb	r3, r3
   24120:	0018      	movs	r0, r3
   24122:	23b4      	movs	r3, #180	; 0xb4
   24124:	18fb      	adds	r3, r7, r3
   24126:	895b      	ldrh	r3, [r3, #10]
   24128:	3b08      	subs	r3, #8
   2412a:	b299      	uxth	r1, r3
   2412c:	4a5a      	ldr	r2, [pc, #360]	; (24298 <m2m_ip_cb+0x298>)
   2412e:	0103      	lsls	r3, r0, #4
   24130:	18d3      	adds	r3, r2, r3
   24132:	3308      	adds	r3, #8
   24134:	1c0a      	adds	r2, r1, #0
   24136:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   24138:	4b58      	ldr	r3, [pc, #352]	; (2429c <m2m_ip_cb+0x29c>)
   2413a:	881b      	ldrh	r3, [r3, #0]
   2413c:	b29b      	uxth	r3, r3
   2413e:	3301      	adds	r3, #1
   24140:	b29a      	uxth	r2, r3
   24142:	4b56      	ldr	r3, [pc, #344]	; (2429c <m2m_ip_cb+0x29c>)
   24144:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   24146:	4b55      	ldr	r3, [pc, #340]	; (2429c <m2m_ip_cb+0x29c>)
   24148:	881b      	ldrh	r3, [r3, #0]
   2414a:	b29b      	uxth	r3, r3
   2414c:	2b00      	cmp	r3, #0
   2414e:	d106      	bne.n	2415e <m2m_ip_cb+0x15e>
					++gu16SessionID;
   24150:	4b52      	ldr	r3, [pc, #328]	; (2429c <m2m_ip_cb+0x29c>)
   24152:	881b      	ldrh	r3, [r3, #0]
   24154:	b29b      	uxth	r3, r3
   24156:	3301      	adds	r3, #1
   24158:	b29a      	uxth	r2, r3
   2415a:	4b50      	ldr	r3, [pc, #320]	; (2429c <m2m_ip_cb+0x29c>)
   2415c:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   2415e:	23b4      	movs	r3, #180	; 0xb4
   24160:	18fb      	adds	r3, r7, r3
   24162:	7a5b      	ldrb	r3, [r3, #9]
   24164:	b25b      	sxtb	r3, r3
   24166:	0018      	movs	r0, r3
   24168:	4b4c      	ldr	r3, [pc, #304]	; (2429c <m2m_ip_cb+0x29c>)
   2416a:	881b      	ldrh	r3, [r3, #0]
   2416c:	b299      	uxth	r1, r3
   2416e:	4a4a      	ldr	r2, [pc, #296]	; (24298 <m2m_ip_cb+0x298>)
   24170:	0103      	lsls	r3, r0, #4
   24172:	18d3      	adds	r3, r2, r3
   24174:	3306      	adds	r3, #6
   24176:	1c0a      	adds	r2, r1, #0
   24178:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   2417a:	23b4      	movs	r3, #180	; 0xb4
   2417c:	18fb      	adds	r3, r7, r3
   2417e:	2209      	movs	r2, #9
   24180:	569a      	ldrsb	r2, [r3, r2]
   24182:	23a0      	movs	r3, #160	; 0xa0
   24184:	18fb      	adds	r3, r7, r3
   24186:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   24188:	23a0      	movs	r3, #160	; 0xa0
   2418a:	18fb      	adds	r3, r7, r3
   2418c:	2202      	movs	r2, #2
   2418e:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   24190:	23b4      	movs	r3, #180	; 0xb4
   24192:	18fb      	adds	r3, r7, r3
   24194:	885a      	ldrh	r2, [r3, #2]
   24196:	23a0      	movs	r3, #160	; 0xa0
   24198:	18fb      	adds	r3, r7, r3
   2419a:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   2419c:	23b4      	movs	r3, #180	; 0xb4
   2419e:	18fb      	adds	r3, r7, r3
   241a0:	685a      	ldr	r2, [r3, #4]
   241a2:	23a0      	movs	r3, #160	; 0xa0
   241a4:	18fb      	adds	r3, r7, r3
   241a6:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   241a8:	4b3a      	ldr	r3, [pc, #232]	; (24294 <m2m_ip_cb+0x294>)
   241aa:	681b      	ldr	r3, [r3, #0]
   241ac:	2b00      	cmp	r3, #0
   241ae:	d100      	bne.n	241b2 <m2m_ip_cb+0x1b2>
   241b0:	e1bf      	b.n	24532 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   241b2:	4b38      	ldr	r3, [pc, #224]	; (24294 <m2m_ip_cb+0x294>)
   241b4:	681b      	ldr	r3, [r3, #0]
   241b6:	22b4      	movs	r2, #180	; 0xb4
   241b8:	18ba      	adds	r2, r7, r2
   241ba:	2008      	movs	r0, #8
   241bc:	5610      	ldrsb	r0, [r2, r0]
   241be:	22a0      	movs	r2, #160	; 0xa0
   241c0:	18ba      	adds	r2, r7, r2
   241c2:	2104      	movs	r1, #4
   241c4:	4798      	blx	r3
}
   241c6:	e1b4      	b.n	24532 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   241c8:	1dfb      	adds	r3, r7, #7
   241ca:	781b      	ldrb	r3, [r3, #0]
   241cc:	2b44      	cmp	r3, #68	; 0x44
   241ce:	d003      	beq.n	241d8 <m2m_ip_cb+0x1d8>
   241d0:	1dfb      	adds	r3, r7, #7
   241d2:	781b      	ldrb	r3, [r3, #0]
   241d4:	2b4b      	cmp	r3, #75	; 0x4b
   241d6:	d13d      	bne.n	24254 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   241d8:	239c      	movs	r3, #156	; 0x9c
   241da:	18f9      	adds	r1, r7, r3
   241dc:	6838      	ldr	r0, [r7, #0]
   241de:	2300      	movs	r3, #0
   241e0:	2204      	movs	r2, #4
   241e2:	4c2b      	ldr	r4, [pc, #172]	; (24290 <m2m_ip_cb+0x290>)
   241e4:	47a0      	blx	r4
   241e6:	1e03      	subs	r3, r0, #0
   241e8:	d000      	beq.n	241ec <m2m_ip_cb+0x1ec>
   241ea:	e19d      	b.n	24528 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   241ec:	239c      	movs	r3, #156	; 0x9c
   241ee:	18fb      	adds	r3, r7, r3
   241f0:	2200      	movs	r2, #0
   241f2:	569a      	ldrsb	r2, [r3, r2]
   241f4:	2398      	movs	r3, #152	; 0x98
   241f6:	18fb      	adds	r3, r7, r3
   241f8:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   241fa:	239c      	movs	r3, #156	; 0x9c
   241fc:	18fb      	adds	r3, r7, r3
   241fe:	2201      	movs	r2, #1
   24200:	569a      	ldrsb	r2, [r3, r2]
   24202:	2398      	movs	r3, #152	; 0x98
   24204:	18fb      	adds	r3, r7, r3
   24206:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   24208:	239c      	movs	r3, #156	; 0x9c
   2420a:	18fb      	adds	r3, r7, r3
   2420c:	785b      	ldrb	r3, [r3, #1]
   2420e:	b25b      	sxtb	r3, r3
   24210:	2b00      	cmp	r3, #0
   24212:	d10f      	bne.n	24234 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   24214:	239c      	movs	r3, #156	; 0x9c
   24216:	18fb      	adds	r3, r7, r3
   24218:	781b      	ldrb	r3, [r3, #0]
   2421a:	b25b      	sxtb	r3, r3
   2421c:	0018      	movs	r0, r3
   2421e:	239c      	movs	r3, #156	; 0x9c
   24220:	18fb      	adds	r3, r7, r3
   24222:	885b      	ldrh	r3, [r3, #2]
   24224:	3b08      	subs	r3, #8
   24226:	b299      	uxth	r1, r3
   24228:	4a1b      	ldr	r2, [pc, #108]	; (24298 <m2m_ip_cb+0x298>)
   2422a:	0103      	lsls	r3, r0, #4
   2422c:	18d3      	adds	r3, r2, r3
   2422e:	3308      	adds	r3, #8
   24230:	1c0a      	adds	r2, r1, #0
   24232:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   24234:	4b17      	ldr	r3, [pc, #92]	; (24294 <m2m_ip_cb+0x294>)
   24236:	681b      	ldr	r3, [r3, #0]
   24238:	2b00      	cmp	r3, #0
   2423a:	d100      	bne.n	2423e <m2m_ip_cb+0x23e>
   2423c:	e174      	b.n	24528 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   2423e:	4b15      	ldr	r3, [pc, #84]	; (24294 <m2m_ip_cb+0x294>)
   24240:	681b      	ldr	r3, [r3, #0]
   24242:	229c      	movs	r2, #156	; 0x9c
   24244:	18ba      	adds	r2, r7, r2
   24246:	2000      	movs	r0, #0
   24248:	5610      	ldrsb	r0, [r2, r0]
   2424a:	2298      	movs	r2, #152	; 0x98
   2424c:	18ba      	adds	r2, r7, r2
   2424e:	2105      	movs	r1, #5
   24250:	4798      	blx	r3
	{
   24252:	e169      	b.n	24528 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   24254:	1dfb      	adds	r3, r7, #7
   24256:	781b      	ldrb	r3, [r3, #0]
   24258:	2b4a      	cmp	r3, #74	; 0x4a
   2425a:	d123      	bne.n	242a4 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   2425c:	230c      	movs	r3, #12
   2425e:	18f9      	adds	r1, r7, r3
   24260:	6838      	ldr	r0, [r7, #0]
   24262:	2300      	movs	r3, #0
   24264:	2244      	movs	r2, #68	; 0x44
   24266:	4c0a      	ldr	r4, [pc, #40]	; (24290 <m2m_ip_cb+0x290>)
   24268:	47a0      	blx	r4
   2426a:	1e03      	subs	r3, r0, #0
   2426c:	d000      	beq.n	24270 <m2m_ip_cb+0x270>
   2426e:	e160      	b.n	24532 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   24270:	4b0b      	ldr	r3, [pc, #44]	; (242a0 <m2m_ip_cb+0x2a0>)
   24272:	681b      	ldr	r3, [r3, #0]
   24274:	2b00      	cmp	r3, #0
   24276:	d100      	bne.n	2427a <m2m_ip_cb+0x27a>
   24278:	e15b      	b.n	24532 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   2427a:	4b09      	ldr	r3, [pc, #36]	; (242a0 <m2m_ip_cb+0x2a0>)
   2427c:	681a      	ldr	r2, [r3, #0]
   2427e:	230c      	movs	r3, #12
   24280:	18fb      	adds	r3, r7, r3
   24282:	6c19      	ldr	r1, [r3, #64]	; 0x40
   24284:	230c      	movs	r3, #12
   24286:	18fb      	adds	r3, r7, r3
   24288:	0018      	movs	r0, r3
   2428a:	4790      	blx	r2
}
   2428c:	e151      	b.n	24532 <m2m_ip_cb+0x532>
   2428e:	46c0      	nop			; (mov r8, r8)
   24290:	000207fd 	.word	0x000207fd
   24294:	20005b78 	.word	0x20005b78
   24298:	20005ac8 	.word	0x20005ac8
   2429c:	2000427e 	.word	0x2000427e
   242a0:	20005b80 	.word	0x20005b80
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   242a4:	1dfb      	adds	r3, r7, #7
   242a6:	781b      	ldrb	r3, [r3, #0]
   242a8:	2b46      	cmp	r3, #70	; 0x46
   242aa:	d008      	beq.n	242be <m2m_ip_cb+0x2be>
   242ac:	1dfb      	adds	r3, r7, #7
   242ae:	781b      	ldrb	r3, [r3, #0]
   242b0:	2b48      	cmp	r3, #72	; 0x48
   242b2:	d004      	beq.n	242be <m2m_ip_cb+0x2be>
   242b4:	1dfb      	adds	r3, r7, #7
   242b6:	781b      	ldrb	r3, [r3, #0]
   242b8:	2b4d      	cmp	r3, #77	; 0x4d
   242ba:	d000      	beq.n	242be <m2m_ip_cb+0x2be>
   242bc:	e0b4      	b.n	24428 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   242be:	23df      	movs	r3, #223	; 0xdf
   242c0:	18fb      	adds	r3, r7, r3
   242c2:	2206      	movs	r2, #6
   242c4:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   242c6:	1dfb      	adds	r3, r7, #7
   242c8:	781b      	ldrb	r3, [r3, #0]
   242ca:	2b48      	cmp	r3, #72	; 0x48
   242cc:	d103      	bne.n	242d6 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   242ce:	23df      	movs	r3, #223	; 0xdf
   242d0:	18fb      	adds	r3, r7, r3
   242d2:	2209      	movs	r2, #9
   242d4:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   242d6:	23d8      	movs	r3, #216	; 0xd8
   242d8:	18fb      	adds	r3, r7, r3
   242da:	2210      	movs	r2, #16
   242dc:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   242de:	23d8      	movs	r3, #216	; 0xd8
   242e0:	18fb      	adds	r3, r7, r3
   242e2:	881a      	ldrh	r2, [r3, #0]
   242e4:	2388      	movs	r3, #136	; 0x88
   242e6:	18f9      	adds	r1, r7, r3
   242e8:	6838      	ldr	r0, [r7, #0]
   242ea:	2300      	movs	r3, #0
   242ec:	4c93      	ldr	r4, [pc, #588]	; (2453c <m2m_ip_cb+0x53c>)
   242ee:	47a0      	blx	r4
   242f0:	1e03      	subs	r3, r0, #0
   242f2:	d000      	beq.n	242f6 <m2m_ip_cb+0x2f6>
   242f4:	e11a      	b.n	2452c <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   242f6:	23d6      	movs	r3, #214	; 0xd6
   242f8:	18fb      	adds	r3, r7, r3
   242fa:	2200      	movs	r2, #0
   242fc:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   242fe:	23d5      	movs	r3, #213	; 0xd5
   24300:	18fb      	adds	r3, r7, r3
   24302:	2288      	movs	r2, #136	; 0x88
   24304:	18ba      	adds	r2, r7, r2
   24306:	7b12      	ldrb	r2, [r2, #12]
   24308:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   2430a:	23d6      	movs	r3, #214	; 0xd6
   2430c:	18fb      	adds	r3, r7, r3
   2430e:	2288      	movs	r2, #136	; 0x88
   24310:	18ba      	adds	r2, r7, r2
   24312:	89d2      	ldrh	r2, [r2, #14]
   24314:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   24316:	23d5      	movs	r3, #213	; 0xd5
   24318:	18fb      	adds	r3, r7, r3
   2431a:	781b      	ldrb	r3, [r3, #0]
   2431c:	b25b      	sxtb	r3, r3
   2431e:	4a88      	ldr	r2, [pc, #544]	; (24540 <m2m_ip_cb+0x540>)
   24320:	011b      	lsls	r3, r3, #4
   24322:	18d3      	adds	r3, r2, r3
   24324:	330c      	adds	r3, #12
   24326:	2200      	movs	r2, #0
   24328:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   2432a:	23d2      	movs	r3, #210	; 0xd2
   2432c:	18fb      	adds	r3, r7, r3
   2432e:	2288      	movs	r2, #136	; 0x88
   24330:	18ba      	adds	r2, r7, r2
   24332:	8912      	ldrh	r2, [r2, #8]
   24334:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   24336:	23d0      	movs	r3, #208	; 0xd0
   24338:	18fb      	adds	r3, r7, r3
   2433a:	2288      	movs	r2, #136	; 0x88
   2433c:	18ba      	adds	r2, r7, r2
   2433e:	8952      	ldrh	r2, [r2, #10]
   24340:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   24342:	2388      	movs	r3, #136	; 0x88
   24344:	18fb      	adds	r3, r7, r3
   24346:	885a      	ldrh	r2, [r3, #2]
   24348:	2370      	movs	r3, #112	; 0x70
   2434a:	18fb      	adds	r3, r7, r3
   2434c:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   2434e:	2388      	movs	r3, #136	; 0x88
   24350:	18fb      	adds	r3, r7, r3
   24352:	685a      	ldr	r2, [r3, #4]
   24354:	2370      	movs	r3, #112	; 0x70
   24356:	18fb      	adds	r3, r7, r3
   24358:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   2435a:	23d5      	movs	r3, #213	; 0xd5
   2435c:	18fb      	adds	r3, r7, r3
   2435e:	781b      	ldrb	r3, [r3, #0]
   24360:	b25b      	sxtb	r3, r3
   24362:	4a77      	ldr	r2, [pc, #476]	; (24540 <m2m_ip_cb+0x540>)
   24364:	011b      	lsls	r3, r3, #4
   24366:	18d3      	adds	r3, r2, r3
   24368:	3306      	adds	r3, #6
   2436a:	881b      	ldrh	r3, [r3, #0]
   2436c:	b29b      	uxth	r3, r3
   2436e:	22d6      	movs	r2, #214	; 0xd6
   24370:	18ba      	adds	r2, r7, r2
   24372:	8812      	ldrh	r2, [r2, #0]
   24374:	429a      	cmp	r2, r3
   24376:	d148      	bne.n	2440a <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   24378:	23d2      	movs	r3, #210	; 0xd2
   2437a:	18fb      	adds	r3, r7, r3
   2437c:	2200      	movs	r2, #0
   2437e:	5e9b      	ldrsh	r3, [r3, r2]
   24380:	2b00      	cmp	r3, #0
   24382:	dd25      	ble.n	243d0 <m2m_ip_cb+0x3d0>
   24384:	23d2      	movs	r3, #210	; 0xd2
   24386:	18fb      	adds	r3, r7, r3
   24388:	2200      	movs	r2, #0
   2438a:	5e9a      	ldrsh	r2, [r3, r2]
   2438c:	1d3b      	adds	r3, r7, #4
   2438e:	881b      	ldrh	r3, [r3, #0]
   24390:	429a      	cmp	r2, r3
   24392:	da1d      	bge.n	243d0 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   24394:	23d0      	movs	r3, #208	; 0xd0
   24396:	18fb      	adds	r3, r7, r3
   24398:	881b      	ldrh	r3, [r3, #0]
   2439a:	683a      	ldr	r2, [r7, #0]
   2439c:	18d3      	adds	r3, r2, r3
   2439e:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   243a0:	23d8      	movs	r3, #216	; 0xd8
   243a2:	18fb      	adds	r3, r7, r3
   243a4:	22d2      	movs	r2, #210	; 0xd2
   243a6:	18ba      	adds	r2, r7, r2
   243a8:	8812      	ldrh	r2, [r2, #0]
   243aa:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   243ac:	683c      	ldr	r4, [r7, #0]
   243ae:	23df      	movs	r3, #223	; 0xdf
   243b0:	18fb      	adds	r3, r7, r3
   243b2:	781a      	ldrb	r2, [r3, #0]
   243b4:	2370      	movs	r3, #112	; 0x70
   243b6:	18f9      	adds	r1, r7, r3
   243b8:	23d5      	movs	r3, #213	; 0xd5
   243ba:	18fb      	adds	r3, r7, r3
   243bc:	2000      	movs	r0, #0
   243be:	5618      	ldrsb	r0, [r3, r0]
   243c0:	23d8      	movs	r3, #216	; 0xd8
   243c2:	18fb      	adds	r3, r7, r3
   243c4:	881b      	ldrh	r3, [r3, #0]
   243c6:	9300      	str	r3, [sp, #0]
   243c8:	0023      	movs	r3, r4
   243ca:	4c5e      	ldr	r4, [pc, #376]	; (24544 <m2m_ip_cb+0x544>)
   243cc:	47a0      	blx	r4
	{
   243ce:	e0ad      	b.n	2452c <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   243d0:	2370      	movs	r3, #112	; 0x70
   243d2:	18fb      	adds	r3, r7, r3
   243d4:	22d2      	movs	r2, #210	; 0xd2
   243d6:	18ba      	adds	r2, r7, r2
   243d8:	8812      	ldrh	r2, [r2, #0]
   243da:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   243dc:	2370      	movs	r3, #112	; 0x70
   243de:	18fb      	adds	r3, r7, r3
   243e0:	2200      	movs	r2, #0
   243e2:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   243e4:	4b58      	ldr	r3, [pc, #352]	; (24548 <m2m_ip_cb+0x548>)
   243e6:	681b      	ldr	r3, [r3, #0]
   243e8:	2b00      	cmp	r3, #0
   243ea:	d100      	bne.n	243ee <m2m_ip_cb+0x3ee>
   243ec:	e09e      	b.n	2452c <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   243ee:	4b56      	ldr	r3, [pc, #344]	; (24548 <m2m_ip_cb+0x548>)
   243f0:	681b      	ldr	r3, [r3, #0]
   243f2:	2270      	movs	r2, #112	; 0x70
   243f4:	18bc      	adds	r4, r7, r2
   243f6:	22df      	movs	r2, #223	; 0xdf
   243f8:	18ba      	adds	r2, r7, r2
   243fa:	7811      	ldrb	r1, [r2, #0]
   243fc:	22d5      	movs	r2, #213	; 0xd5
   243fe:	18ba      	adds	r2, r7, r2
   24400:	2000      	movs	r0, #0
   24402:	5610      	ldrsb	r0, [r2, r0]
   24404:	0022      	movs	r2, r4
   24406:	4798      	blx	r3
	{
   24408:	e090      	b.n	2452c <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   2440a:	23d8      	movs	r3, #216	; 0xd8
   2440c:	18fa      	adds	r2, r7, r3
   2440e:	1d3b      	adds	r3, r7, #4
   24410:	8812      	ldrh	r2, [r2, #0]
   24412:	881b      	ldrh	r3, [r3, #0]
   24414:	429a      	cmp	r2, r3
   24416:	d300      	bcc.n	2441a <m2m_ip_cb+0x41a>
   24418:	e088      	b.n	2452c <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   2441a:	2301      	movs	r3, #1
   2441c:	2200      	movs	r2, #0
   2441e:	2100      	movs	r1, #0
   24420:	2000      	movs	r0, #0
   24422:	4c46      	ldr	r4, [pc, #280]	; (2453c <m2m_ip_cb+0x53c>)
   24424:	47a0      	blx	r4
	{
   24426:	e081      	b.n	2452c <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   24428:	1dfb      	adds	r3, r7, #7
   2442a:	781b      	ldrb	r3, [r3, #0]
   2442c:	2b45      	cmp	r3, #69	; 0x45
   2442e:	d007      	beq.n	24440 <m2m_ip_cb+0x440>
   24430:	1dfb      	adds	r3, r7, #7
   24432:	781b      	ldrb	r3, [r3, #0]
   24434:	2b47      	cmp	r3, #71	; 0x47
   24436:	d003      	beq.n	24440 <m2m_ip_cb+0x440>
   24438:	1dfb      	adds	r3, r7, #7
   2443a:	781b      	ldrb	r3, [r3, #0]
   2443c:	2b4c      	cmp	r3, #76	; 0x4c
   2443e:	d14c      	bne.n	244da <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   24440:	23de      	movs	r3, #222	; 0xde
   24442:	18fb      	adds	r3, r7, r3
   24444:	2207      	movs	r2, #7
   24446:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   24448:	1dfb      	adds	r3, r7, #7
   2444a:	781b      	ldrb	r3, [r3, #0]
   2444c:	2b47      	cmp	r3, #71	; 0x47
   2444e:	d103      	bne.n	24458 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   24450:	23de      	movs	r3, #222	; 0xde
   24452:	18fb      	adds	r3, r7, r3
   24454:	2208      	movs	r2, #8
   24456:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   24458:	2364      	movs	r3, #100	; 0x64
   2445a:	18f9      	adds	r1, r7, r3
   2445c:	6838      	ldr	r0, [r7, #0]
   2445e:	2300      	movs	r3, #0
   24460:	2208      	movs	r2, #8
   24462:	4c36      	ldr	r4, [pc, #216]	; (2453c <m2m_ip_cb+0x53c>)
   24464:	47a0      	blx	r4
   24466:	1e03      	subs	r3, r0, #0
   24468:	d162      	bne.n	24530 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   2446a:	23dc      	movs	r3, #220	; 0xdc
   2446c:	18fb      	adds	r3, r7, r3
   2446e:	2200      	movs	r2, #0
   24470:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   24472:	23db      	movs	r3, #219	; 0xdb
   24474:	18fb      	adds	r3, r7, r3
   24476:	2264      	movs	r2, #100	; 0x64
   24478:	18ba      	adds	r2, r7, r2
   2447a:	7812      	ldrb	r2, [r2, #0]
   2447c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   2447e:	23dc      	movs	r3, #220	; 0xdc
   24480:	18fb      	adds	r3, r7, r3
   24482:	2264      	movs	r2, #100	; 0x64
   24484:	18ba      	adds	r2, r7, r2
   24486:	8892      	ldrh	r2, [r2, #4]
   24488:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   2448a:	2364      	movs	r3, #100	; 0x64
   2448c:	18fb      	adds	r3, r7, r3
   2448e:	2202      	movs	r2, #2
   24490:	5e9a      	ldrsh	r2, [r3, r2]
   24492:	236e      	movs	r3, #110	; 0x6e
   24494:	18fb      	adds	r3, r7, r3
   24496:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   24498:	23db      	movs	r3, #219	; 0xdb
   2449a:	18fb      	adds	r3, r7, r3
   2449c:	781b      	ldrb	r3, [r3, #0]
   2449e:	b25b      	sxtb	r3, r3
   244a0:	4a27      	ldr	r2, [pc, #156]	; (24540 <m2m_ip_cb+0x540>)
   244a2:	011b      	lsls	r3, r3, #4
   244a4:	18d3      	adds	r3, r2, r3
   244a6:	3306      	adds	r3, #6
   244a8:	881b      	ldrh	r3, [r3, #0]
   244aa:	b29b      	uxth	r3, r3
   244ac:	22dc      	movs	r2, #220	; 0xdc
   244ae:	18ba      	adds	r2, r7, r2
   244b0:	8812      	ldrh	r2, [r2, #0]
   244b2:	429a      	cmp	r2, r3
   244b4:	d13c      	bne.n	24530 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   244b6:	4b24      	ldr	r3, [pc, #144]	; (24548 <m2m_ip_cb+0x548>)
   244b8:	681b      	ldr	r3, [r3, #0]
   244ba:	2b00      	cmp	r3, #0
   244bc:	d038      	beq.n	24530 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   244be:	4b22      	ldr	r3, [pc, #136]	; (24548 <m2m_ip_cb+0x548>)
   244c0:	681b      	ldr	r3, [r3, #0]
   244c2:	226e      	movs	r2, #110	; 0x6e
   244c4:	18bc      	adds	r4, r7, r2
   244c6:	22de      	movs	r2, #222	; 0xde
   244c8:	18ba      	adds	r2, r7, r2
   244ca:	7811      	ldrb	r1, [r2, #0]
   244cc:	22db      	movs	r2, #219	; 0xdb
   244ce:	18ba      	adds	r2, r7, r2
   244d0:	2000      	movs	r0, #0
   244d2:	5610      	ldrsb	r0, [r2, r0]
   244d4:	0022      	movs	r2, r4
   244d6:	4798      	blx	r3
	{
   244d8:	e02a      	b.n	24530 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   244da:	1dfb      	adds	r3, r7, #7
   244dc:	781b      	ldrb	r3, [r3, #0]
   244de:	2b52      	cmp	r3, #82	; 0x52
   244e0:	d127      	bne.n	24532 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   244e2:	2350      	movs	r3, #80	; 0x50
   244e4:	18f9      	adds	r1, r7, r3
   244e6:	6838      	ldr	r0, [r7, #0]
   244e8:	2301      	movs	r3, #1
   244ea:	2214      	movs	r2, #20
   244ec:	4c13      	ldr	r4, [pc, #76]	; (2453c <m2m_ip_cb+0x53c>)
   244ee:	47a0      	blx	r4
   244f0:	1e03      	subs	r3, r0, #0
   244f2:	d11e      	bne.n	24532 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   244f4:	2350      	movs	r3, #80	; 0x50
   244f6:	18fb      	adds	r3, r7, r3
   244f8:	685b      	ldr	r3, [r3, #4]
   244fa:	001a      	movs	r2, r3
   244fc:	4b13      	ldr	r3, [pc, #76]	; (2454c <m2m_ip_cb+0x54c>)
   244fe:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   24500:	4b12      	ldr	r3, [pc, #72]	; (2454c <m2m_ip_cb+0x54c>)
   24502:	681b      	ldr	r3, [r3, #0]
   24504:	2b00      	cmp	r3, #0
   24506:	d014      	beq.n	24532 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   24508:	4b10      	ldr	r3, [pc, #64]	; (2454c <m2m_ip_cb+0x54c>)
   2450a:	681c      	ldr	r4, [r3, #0]
   2450c:	2350      	movs	r3, #80	; 0x50
   2450e:	18fb      	adds	r3, r7, r3
   24510:	6818      	ldr	r0, [r3, #0]
   24512:	2350      	movs	r3, #80	; 0x50
   24514:	18fb      	adds	r3, r7, r3
   24516:	6899      	ldr	r1, [r3, #8]
   24518:	2350      	movs	r3, #80	; 0x50
   2451a:	18fb      	adds	r3, r7, r3
   2451c:	7c1b      	ldrb	r3, [r3, #16]
   2451e:	001a      	movs	r2, r3
   24520:	47a0      	blx	r4
}
   24522:	e006      	b.n	24532 <m2m_ip_cb+0x532>
	{
   24524:	46c0      	nop			; (mov r8, r8)
   24526:	e004      	b.n	24532 <m2m_ip_cb+0x532>
	{
   24528:	46c0      	nop			; (mov r8, r8)
   2452a:	e002      	b.n	24532 <m2m_ip_cb+0x532>
	{
   2452c:	46c0      	nop			; (mov r8, r8)
   2452e:	e000      	b.n	24532 <m2m_ip_cb+0x532>
	{
   24530:	46c0      	nop			; (mov r8, r8)
}
   24532:	46c0      	nop			; (mov r8, r8)
   24534:	46bd      	mov	sp, r7
   24536:	b039      	add	sp, #228	; 0xe4
   24538:	bd90      	pop	{r4, r7, pc}
   2453a:	46c0      	nop			; (mov r8, r8)
   2453c:	000207fd 	.word	0x000207fd
   24540:	20005ac8 	.word	0x20005ac8
   24544:	00023e05 	.word	0x00023e05
   24548:	20005b78 	.word	0x20005b78
   2454c:	20005b7c 	.word	0x20005b7c

00024550 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   24550:	b580      	push	{r7, lr}
   24552:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   24554:	4b0c      	ldr	r3, [pc, #48]	; (24588 <socketInit+0x38>)
   24556:	781b      	ldrb	r3, [r3, #0]
   24558:	b2db      	uxtb	r3, r3
   2455a:	2b00      	cmp	r3, #0
   2455c:	d110      	bne.n	24580 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   2455e:	4b0b      	ldr	r3, [pc, #44]	; (2458c <socketInit+0x3c>)
   24560:	22b0      	movs	r2, #176	; 0xb0
   24562:	2100      	movs	r1, #0
   24564:	0018      	movs	r0, r3
   24566:	4b0a      	ldr	r3, [pc, #40]	; (24590 <socketInit+0x40>)
   24568:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   2456a:	4b0a      	ldr	r3, [pc, #40]	; (24594 <socketInit+0x44>)
   2456c:	0019      	movs	r1, r3
   2456e:	2002      	movs	r0, #2
   24570:	4b09      	ldr	r3, [pc, #36]	; (24598 <socketInit+0x48>)
   24572:	4798      	blx	r3
		gbSocketInit	= 1;
   24574:	4b04      	ldr	r3, [pc, #16]	; (24588 <socketInit+0x38>)
   24576:	2201      	movs	r2, #1
   24578:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   2457a:	4b08      	ldr	r3, [pc, #32]	; (2459c <socketInit+0x4c>)
   2457c:	2200      	movs	r2, #0
   2457e:	801a      	strh	r2, [r3, #0]
	}
}
   24580:	46c0      	nop			; (mov r8, r8)
   24582:	46bd      	mov	sp, r7
   24584:	bd80      	pop	{r7, pc}
   24586:	46c0      	nop			; (mov r8, r8)
   24588:	20004280 	.word	0x20004280
   2458c:	20005ac8 	.word	0x20005ac8
   24590:	0001fc81 	.word	0x0001fc81
   24594:	00024001 	.word	0x00024001
   24598:	0002097d 	.word	0x0002097d
   2459c:	2000427e 	.word	0x2000427e

000245a0 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   245a0:	b580      	push	{r7, lr}
   245a2:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   245a4:	4b0a      	ldr	r3, [pc, #40]	; (245d0 <socketDeinit+0x30>)
   245a6:	22b0      	movs	r2, #176	; 0xb0
   245a8:	2100      	movs	r1, #0
   245aa:	0018      	movs	r0, r3
   245ac:	4b09      	ldr	r3, [pc, #36]	; (245d4 <socketDeinit+0x34>)
   245ae:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   245b0:	2100      	movs	r1, #0
   245b2:	2002      	movs	r0, #2
   245b4:	4b08      	ldr	r3, [pc, #32]	; (245d8 <socketDeinit+0x38>)
   245b6:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   245b8:	4b08      	ldr	r3, [pc, #32]	; (245dc <socketDeinit+0x3c>)
   245ba:	2200      	movs	r2, #0
   245bc:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   245be:	4b08      	ldr	r3, [pc, #32]	; (245e0 <socketDeinit+0x40>)
   245c0:	2200      	movs	r2, #0
   245c2:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   245c4:	4b07      	ldr	r3, [pc, #28]	; (245e4 <socketDeinit+0x44>)
   245c6:	2200      	movs	r2, #0
   245c8:	701a      	strb	r2, [r3, #0]
}
   245ca:	46c0      	nop			; (mov r8, r8)
   245cc:	46bd      	mov	sp, r7
   245ce:	bd80      	pop	{r7, pc}
   245d0:	20005ac8 	.word	0x20005ac8
   245d4:	0001fc81 	.word	0x0001fc81
   245d8:	0002097d 	.word	0x0002097d
   245dc:	20005b78 	.word	0x20005b78
   245e0:	20005b80 	.word	0x20005b80
   245e4:	20004280 	.word	0x20004280

000245e8 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   245e8:	b580      	push	{r7, lr}
   245ea:	b082      	sub	sp, #8
   245ec:	af00      	add	r7, sp, #0
   245ee:	6078      	str	r0, [r7, #4]
   245f0:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   245f2:	4b05      	ldr	r3, [pc, #20]	; (24608 <registerSocketCallback+0x20>)
   245f4:	687a      	ldr	r2, [r7, #4]
   245f6:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   245f8:	4b04      	ldr	r3, [pc, #16]	; (2460c <registerSocketCallback+0x24>)
   245fa:	683a      	ldr	r2, [r7, #0]
   245fc:	601a      	str	r2, [r3, #0]
}
   245fe:	46c0      	nop			; (mov r8, r8)
   24600:	46bd      	mov	sp, r7
   24602:	b002      	add	sp, #8
   24604:	bd80      	pop	{r7, pc}
   24606:	46c0      	nop			; (mov r8, r8)
   24608:	20005b78 	.word	0x20005b78
   2460c:	20005b80 	.word	0x20005b80

00024610 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   24610:	b590      	push	{r4, r7, lr}
   24612:	b08d      	sub	sp, #52	; 0x34
   24614:	af04      	add	r7, sp, #16
   24616:	0004      	movs	r4, r0
   24618:	0008      	movs	r0, r1
   2461a:	0011      	movs	r1, r2
   2461c:	1dbb      	adds	r3, r7, #6
   2461e:	1c22      	adds	r2, r4, #0
   24620:	801a      	strh	r2, [r3, #0]
   24622:	1d7b      	adds	r3, r7, #5
   24624:	1c02      	adds	r2, r0, #0
   24626:	701a      	strb	r2, [r3, #0]
   24628:	1d3b      	adds	r3, r7, #4
   2462a:	1c0a      	adds	r2, r1, #0
   2462c:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   2462e:	231f      	movs	r3, #31
   24630:	18fb      	adds	r3, r7, r3
   24632:	22ff      	movs	r2, #255	; 0xff
   24634:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   24636:	1dbb      	adds	r3, r7, #6
   24638:	881b      	ldrh	r3, [r3, #0]
   2463a:	2b02      	cmp	r3, #2
   2463c:	d000      	beq.n	24640 <socket+0x30>
   2463e:	e0ce      	b.n	247de <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   24640:	1d7b      	adds	r3, r7, #5
   24642:	781b      	ldrb	r3, [r3, #0]
   24644:	2b01      	cmp	r3, #1
   24646:	d135      	bne.n	246b4 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   24648:	231e      	movs	r3, #30
   2464a:	18fb      	adds	r3, r7, r3
   2464c:	2200      	movs	r2, #0
   2464e:	701a      	strb	r2, [r3, #0]
   24650:	e02a      	b.n	246a8 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   24652:	2317      	movs	r3, #23
   24654:	18fb      	adds	r3, r7, r3
   24656:	4a66      	ldr	r2, [pc, #408]	; (247f0 <socket+0x1e0>)
   24658:	7812      	ldrb	r2, [r2, #0]
   2465a:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   2465c:	4b64      	ldr	r3, [pc, #400]	; (247f0 <socket+0x1e0>)
   2465e:	781b      	ldrb	r3, [r3, #0]
   24660:	b2db      	uxtb	r3, r3
   24662:	011a      	lsls	r2, r3, #4
   24664:	4b63      	ldr	r3, [pc, #396]	; (247f4 <socket+0x1e4>)
   24666:	18d3      	adds	r3, r2, r3
   24668:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   2466a:	4b61      	ldr	r3, [pc, #388]	; (247f0 <socket+0x1e0>)
   2466c:	781b      	ldrb	r3, [r3, #0]
   2466e:	b2db      	uxtb	r3, r3
   24670:	1c5a      	adds	r2, r3, #1
   24672:	4b61      	ldr	r3, [pc, #388]	; (247f8 <socket+0x1e8>)
   24674:	2107      	movs	r1, #7
   24676:	0010      	movs	r0, r2
   24678:	4798      	blx	r3
   2467a:	000b      	movs	r3, r1
   2467c:	b2da      	uxtb	r2, r3
   2467e:	4b5c      	ldr	r3, [pc, #368]	; (247f0 <socket+0x1e0>)
   24680:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   24682:	69bb      	ldr	r3, [r7, #24]
   24684:	7a9b      	ldrb	r3, [r3, #10]
   24686:	b2db      	uxtb	r3, r3
   24688:	2b00      	cmp	r3, #0
   2468a:	d106      	bne.n	2469a <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   2468c:	231f      	movs	r3, #31
   2468e:	18fb      	adds	r3, r7, r3
   24690:	2217      	movs	r2, #23
   24692:	18ba      	adds	r2, r7, r2
   24694:	7812      	ldrb	r2, [r2, #0]
   24696:	701a      	strb	r2, [r3, #0]
					break;
   24698:	e04c      	b.n	24734 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   2469a:	231e      	movs	r3, #30
   2469c:	18fb      	adds	r3, r7, r3
   2469e:	781a      	ldrb	r2, [r3, #0]
   246a0:	231e      	movs	r3, #30
   246a2:	18fb      	adds	r3, r7, r3
   246a4:	3201      	adds	r2, #1
   246a6:	701a      	strb	r2, [r3, #0]
   246a8:	231e      	movs	r3, #30
   246aa:	18fb      	adds	r3, r7, r3
   246ac:	781b      	ldrb	r3, [r3, #0]
   246ae:	2b06      	cmp	r3, #6
   246b0:	d9cf      	bls.n	24652 <socket+0x42>
   246b2:	e03f      	b.n	24734 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   246b4:	1d7b      	adds	r3, r7, #5
   246b6:	781b      	ldrb	r3, [r3, #0]
   246b8:	2b02      	cmp	r3, #2
   246ba:	d13b      	bne.n	24734 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   246bc:	4b4f      	ldr	r3, [pc, #316]	; (247fc <socket+0x1ec>)
   246be:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   246c0:	231e      	movs	r3, #30
   246c2:	18fb      	adds	r3, r7, r3
   246c4:	2200      	movs	r2, #0
   246c6:	701a      	strb	r2, [r3, #0]
   246c8:	e02f      	b.n	2472a <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   246ca:	2317      	movs	r3, #23
   246cc:	18fb      	adds	r3, r7, r3
   246ce:	4a4c      	ldr	r2, [pc, #304]	; (24800 <socket+0x1f0>)
   246d0:	7812      	ldrb	r2, [r2, #0]
   246d2:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   246d4:	4b4a      	ldr	r3, [pc, #296]	; (24800 <socket+0x1f0>)
   246d6:	781b      	ldrb	r3, [r3, #0]
   246d8:	b2db      	uxtb	r3, r3
   246da:	011b      	lsls	r3, r3, #4
   246dc:	693a      	ldr	r2, [r7, #16]
   246de:	18d3      	adds	r3, r2, r3
   246e0:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   246e2:	4b47      	ldr	r3, [pc, #284]	; (24800 <socket+0x1f0>)
   246e4:	781b      	ldrb	r3, [r3, #0]
   246e6:	b2db      	uxtb	r3, r3
   246e8:	3301      	adds	r3, #1
   246ea:	4a46      	ldr	r2, [pc, #280]	; (24804 <socket+0x1f4>)
   246ec:	4013      	ands	r3, r2
   246ee:	d504      	bpl.n	246fa <socket+0xea>
   246f0:	3b01      	subs	r3, #1
   246f2:	2204      	movs	r2, #4
   246f4:	4252      	negs	r2, r2
   246f6:	4313      	orrs	r3, r2
   246f8:	3301      	adds	r3, #1
   246fa:	b2da      	uxtb	r2, r3
   246fc:	4b40      	ldr	r3, [pc, #256]	; (24800 <socket+0x1f0>)
   246fe:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   24700:	69bb      	ldr	r3, [r7, #24]
   24702:	7a9b      	ldrb	r3, [r3, #10]
   24704:	b2db      	uxtb	r3, r3
   24706:	2b00      	cmp	r3, #0
   24708:	d108      	bne.n	2471c <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   2470a:	2317      	movs	r3, #23
   2470c:	18fb      	adds	r3, r7, r3
   2470e:	781b      	ldrb	r3, [r3, #0]
   24710:	3307      	adds	r3, #7
   24712:	b2da      	uxtb	r2, r3
   24714:	231f      	movs	r3, #31
   24716:	18fb      	adds	r3, r7, r3
   24718:	701a      	strb	r2, [r3, #0]
					break;
   2471a:	e00b      	b.n	24734 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   2471c:	231e      	movs	r3, #30
   2471e:	18fb      	adds	r3, r7, r3
   24720:	781a      	ldrb	r2, [r3, #0]
   24722:	231e      	movs	r3, #30
   24724:	18fb      	adds	r3, r7, r3
   24726:	3201      	adds	r2, #1
   24728:	701a      	strb	r2, [r3, #0]
   2472a:	231e      	movs	r3, #30
   2472c:	18fb      	adds	r3, r7, r3
   2472e:	781b      	ldrb	r3, [r3, #0]
   24730:	2b03      	cmp	r3, #3
   24732:	d9ca      	bls.n	246ca <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   24734:	231f      	movs	r3, #31
   24736:	18fb      	adds	r3, r7, r3
   24738:	781b      	ldrb	r3, [r3, #0]
   2473a:	2b7f      	cmp	r3, #127	; 0x7f
   2473c:	d84f      	bhi.n	247de <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   2473e:	69bb      	ldr	r3, [r7, #24]
   24740:	2210      	movs	r2, #16
   24742:	2100      	movs	r1, #0
   24744:	0018      	movs	r0, r3
   24746:	4b30      	ldr	r3, [pc, #192]	; (24808 <socket+0x1f8>)
   24748:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   2474a:	69bb      	ldr	r3, [r7, #24]
   2474c:	2201      	movs	r2, #1
   2474e:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   24750:	4b2e      	ldr	r3, [pc, #184]	; (2480c <socket+0x1fc>)
   24752:	881b      	ldrh	r3, [r3, #0]
   24754:	b29b      	uxth	r3, r3
   24756:	3301      	adds	r3, #1
   24758:	b29a      	uxth	r2, r3
   2475a:	4b2c      	ldr	r3, [pc, #176]	; (2480c <socket+0x1fc>)
   2475c:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   2475e:	4b2b      	ldr	r3, [pc, #172]	; (2480c <socket+0x1fc>)
   24760:	881b      	ldrh	r3, [r3, #0]
   24762:	b29b      	uxth	r3, r3
   24764:	2b00      	cmp	r3, #0
   24766:	d106      	bne.n	24776 <socket+0x166>
				++gu16SessionID;
   24768:	4b28      	ldr	r3, [pc, #160]	; (2480c <socket+0x1fc>)
   2476a:	881b      	ldrh	r3, [r3, #0]
   2476c:	b29b      	uxth	r3, r3
   2476e:	3301      	adds	r3, #1
   24770:	b29a      	uxth	r2, r3
   24772:	4b26      	ldr	r3, [pc, #152]	; (2480c <socket+0x1fc>)
   24774:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   24776:	4b25      	ldr	r3, [pc, #148]	; (2480c <socket+0x1fc>)
   24778:	881b      	ldrh	r3, [r3, #0]
   2477a:	b29a      	uxth	r2, r3
   2477c:	69bb      	ldr	r3, [r7, #24]
   2477e:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   24780:	4b23      	ldr	r3, [pc, #140]	; (24810 <socket+0x200>)
   24782:	0018      	movs	r0, r3
   24784:	4b23      	ldr	r3, [pc, #140]	; (24814 <socket+0x204>)
   24786:	4798      	blx	r3
   24788:	231f      	movs	r3, #31
   2478a:	18fb      	adds	r3, r7, r3
   2478c:	2100      	movs	r1, #0
   2478e:	5659      	ldrsb	r1, [r3, r1]
   24790:	4b1e      	ldr	r3, [pc, #120]	; (2480c <socket+0x1fc>)
   24792:	881b      	ldrh	r3, [r3, #0]
   24794:	b29b      	uxth	r3, r3
   24796:	001a      	movs	r2, r3
   24798:	4b1f      	ldr	r3, [pc, #124]	; (24818 <socket+0x208>)
   2479a:	0018      	movs	r0, r3
   2479c:	4b1d      	ldr	r3, [pc, #116]	; (24814 <socket+0x204>)
   2479e:	4798      	blx	r3
   247a0:	4b1e      	ldr	r3, [pc, #120]	; (2481c <socket+0x20c>)
   247a2:	0018      	movs	r0, r3
   247a4:	4b1b      	ldr	r3, [pc, #108]	; (24814 <socket+0x204>)
   247a6:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   247a8:	1d3b      	adds	r3, r7, #4
   247aa:	781b      	ldrb	r3, [r3, #0]
   247ac:	2201      	movs	r2, #1
   247ae:	4013      	ands	r3, r2
   247b0:	d015      	beq.n	247de <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   247b2:	230c      	movs	r3, #12
   247b4:	18fb      	adds	r3, r7, r3
   247b6:	221f      	movs	r2, #31
   247b8:	18ba      	adds	r2, r7, r2
   247ba:	7812      	ldrb	r2, [r2, #0]
   247bc:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   247be:	69bb      	ldr	r3, [r7, #24]
   247c0:	2221      	movs	r2, #33	; 0x21
   247c2:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   247c4:	230c      	movs	r3, #12
   247c6:	18fa      	adds	r2, r7, r3
   247c8:	2300      	movs	r3, #0
   247ca:	9302      	str	r3, [sp, #8]
   247cc:	2300      	movs	r3, #0
   247ce:	9301      	str	r3, [sp, #4]
   247d0:	2300      	movs	r3, #0
   247d2:	9300      	str	r3, [sp, #0]
   247d4:	2304      	movs	r3, #4
   247d6:	2150      	movs	r1, #80	; 0x50
   247d8:	2002      	movs	r0, #2
   247da:	4c11      	ldr	r4, [pc, #68]	; (24820 <socket+0x210>)
   247dc:	47a0      	blx	r4
			}
		}
	}
	return sock;
   247de:	231f      	movs	r3, #31
   247e0:	18fb      	adds	r3, r7, r3
   247e2:	781b      	ldrb	r3, [r3, #0]
   247e4:	b25b      	sxtb	r3, r3
}
   247e6:	0018      	movs	r0, r3
   247e8:	46bd      	mov	sp, r7
   247ea:	b009      	add	sp, #36	; 0x24
   247ec:	bd90      	pop	{r4, r7, pc}
   247ee:	46c0      	nop			; (mov r8, r8)
   247f0:	20004281 	.word	0x20004281
   247f4:	20005ac8 	.word	0x20005ac8
   247f8:	00031da5 	.word	0x00031da5
   247fc:	20005b38 	.word	0x20005b38
   24800:	20004282 	.word	0x20004282
   24804:	80000003 	.word	0x80000003
   24808:	0001fc81 	.word	0x0001fc81
   2480c:	2000427e 	.word	0x2000427e
   24810:	00038e04 	.word	0x00038e04
   24814:	0001cee9 	.word	0x0001cee9
   24818:	00038e28 	.word	0x00038e28
   2481c:	00038e24 	.word	0x00038e24
   24820:	0001fee1 	.word	0x0001fee1

00024824 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   24824:	b5b0      	push	{r4, r5, r7, lr}
   24826:	b08a      	sub	sp, #40	; 0x28
   24828:	af04      	add	r7, sp, #16
   2482a:	6039      	str	r1, [r7, #0]
   2482c:	0011      	movs	r1, r2
   2482e:	1dfb      	adds	r3, r7, #7
   24830:	1c02      	adds	r2, r0, #0
   24832:	701a      	strb	r2, [r3, #0]
   24834:	1dbb      	adds	r3, r7, #6
   24836:	1c0a      	adds	r2, r1, #0
   24838:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   2483a:	2317      	movs	r3, #23
   2483c:	18fb      	adds	r3, r7, r3
   2483e:	22fa      	movs	r2, #250	; 0xfa
   24840:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   24842:	1dfb      	adds	r3, r7, #7
   24844:	781b      	ldrb	r3, [r3, #0]
   24846:	2b7f      	cmp	r3, #127	; 0x7f
   24848:	d867      	bhi.n	2491a <connect+0xf6>
   2484a:	683b      	ldr	r3, [r7, #0]
   2484c:	2b00      	cmp	r3, #0
   2484e:	d064      	beq.n	2491a <connect+0xf6>
   24850:	1dfb      	adds	r3, r7, #7
   24852:	781b      	ldrb	r3, [r3, #0]
   24854:	b25b      	sxtb	r3, r3
   24856:	4a35      	ldr	r2, [pc, #212]	; (2492c <connect+0x108>)
   24858:	011b      	lsls	r3, r3, #4
   2485a:	18d3      	adds	r3, r2, r3
   2485c:	330a      	adds	r3, #10
   2485e:	781b      	ldrb	r3, [r3, #0]
   24860:	b2db      	uxtb	r3, r3
   24862:	2b01      	cmp	r3, #1
   24864:	d159      	bne.n	2491a <connect+0xf6>
   24866:	1dbb      	adds	r3, r7, #6
   24868:	781b      	ldrb	r3, [r3, #0]
   2486a:	2b00      	cmp	r3, #0
   2486c:	d055      	beq.n	2491a <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   2486e:	2316      	movs	r3, #22
   24870:	18fb      	adds	r3, r7, r3
   24872:	2244      	movs	r2, #68	; 0x44
   24874:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   24876:	1dfb      	adds	r3, r7, #7
   24878:	781b      	ldrb	r3, [r3, #0]
   2487a:	b25b      	sxtb	r3, r3
   2487c:	4a2b      	ldr	r2, [pc, #172]	; (2492c <connect+0x108>)
   2487e:	011b      	lsls	r3, r3, #4
   24880:	18d3      	adds	r3, r2, r3
   24882:	330b      	adds	r3, #11
   24884:	781b      	ldrb	r3, [r3, #0]
   24886:	b2db      	uxtb	r3, r3
   24888:	001a      	movs	r2, r3
   2488a:	2301      	movs	r3, #1
   2488c:	4013      	ands	r3, r2
   2488e:	d00f      	beq.n	248b0 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   24890:	2316      	movs	r3, #22
   24892:	18fb      	adds	r3, r7, r3
   24894:	224b      	movs	r2, #75	; 0x4b
   24896:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   24898:	1dfb      	adds	r3, r7, #7
   2489a:	781b      	ldrb	r3, [r3, #0]
   2489c:	b25b      	sxtb	r3, r3
   2489e:	4a23      	ldr	r2, [pc, #140]	; (2492c <connect+0x108>)
   248a0:	011b      	lsls	r3, r3, #4
   248a2:	18d3      	adds	r3, r2, r3
   248a4:	330b      	adds	r3, #11
   248a6:	781b      	ldrb	r3, [r3, #0]
   248a8:	b2da      	uxtb	r2, r3
   248aa:	2308      	movs	r3, #8
   248ac:	18fb      	adds	r3, r7, r3
   248ae:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   248b0:	2308      	movs	r3, #8
   248b2:	18fb      	adds	r3, r7, r3
   248b4:	1dfa      	adds	r2, r7, #7
   248b6:	7812      	ldrb	r2, [r2, #0]
   248b8:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   248ba:	6839      	ldr	r1, [r7, #0]
   248bc:	2308      	movs	r3, #8
   248be:	18fb      	adds	r3, r7, r3
   248c0:	2208      	movs	r2, #8
   248c2:	0018      	movs	r0, r3
   248c4:	4b1a      	ldr	r3, [pc, #104]	; (24930 <connect+0x10c>)
   248c6:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   248c8:	1dfb      	adds	r3, r7, #7
   248ca:	781b      	ldrb	r3, [r3, #0]
   248cc:	b25b      	sxtb	r3, r3
   248ce:	4a17      	ldr	r2, [pc, #92]	; (2492c <connect+0x108>)
   248d0:	011b      	lsls	r3, r3, #4
   248d2:	18d3      	adds	r3, r2, r3
   248d4:	3306      	adds	r3, #6
   248d6:	881b      	ldrh	r3, [r3, #0]
   248d8:	b29a      	uxth	r2, r3
   248da:	2308      	movs	r3, #8
   248dc:	18fb      	adds	r3, r7, r3
   248de:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   248e0:	2317      	movs	r3, #23
   248e2:	18fc      	adds	r4, r7, r3
   248e4:	2308      	movs	r3, #8
   248e6:	18fa      	adds	r2, r7, r3
   248e8:	2316      	movs	r3, #22
   248ea:	18fb      	adds	r3, r7, r3
   248ec:	7819      	ldrb	r1, [r3, #0]
   248ee:	2300      	movs	r3, #0
   248f0:	9302      	str	r3, [sp, #8]
   248f2:	2300      	movs	r3, #0
   248f4:	9301      	str	r3, [sp, #4]
   248f6:	2300      	movs	r3, #0
   248f8:	9300      	str	r3, [sp, #0]
   248fa:	230c      	movs	r3, #12
   248fc:	2002      	movs	r0, #2
   248fe:	4d0d      	ldr	r5, [pc, #52]	; (24934 <connect+0x110>)
   24900:	47a8      	blx	r5
   24902:	0003      	movs	r3, r0
   24904:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   24906:	2317      	movs	r3, #23
   24908:	18fb      	adds	r3, r7, r3
   2490a:	781b      	ldrb	r3, [r3, #0]
   2490c:	b25b      	sxtb	r3, r3
   2490e:	2b00      	cmp	r3, #0
   24910:	d003      	beq.n	2491a <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   24912:	2317      	movs	r3, #23
   24914:	18fb      	adds	r3, r7, r3
   24916:	22f7      	movs	r2, #247	; 0xf7
   24918:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   2491a:	2317      	movs	r3, #23
   2491c:	18fb      	adds	r3, r7, r3
   2491e:	781b      	ldrb	r3, [r3, #0]
   24920:	b25b      	sxtb	r3, r3
}
   24922:	0018      	movs	r0, r3
   24924:	46bd      	mov	sp, r7
   24926:	b006      	add	sp, #24
   24928:	bdb0      	pop	{r4, r5, r7, pc}
   2492a:	46c0      	nop			; (mov r8, r8)
   2492c:	20005ac8 	.word	0x20005ac8
   24930:	0001fc45 	.word	0x0001fc45
   24934:	0001fee1 	.word	0x0001fee1

00024938 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   24938:	b590      	push	{r4, r7, lr}
   2493a:	b08f      	sub	sp, #60	; 0x3c
   2493c:	af04      	add	r7, sp, #16
   2493e:	0004      	movs	r4, r0
   24940:	60b9      	str	r1, [r7, #8]
   24942:	0010      	movs	r0, r2
   24944:	0019      	movs	r1, r3
   24946:	230f      	movs	r3, #15
   24948:	18fb      	adds	r3, r7, r3
   2494a:	1c22      	adds	r2, r4, #0
   2494c:	701a      	strb	r2, [r3, #0]
   2494e:	230c      	movs	r3, #12
   24950:	18fb      	adds	r3, r7, r3
   24952:	1c02      	adds	r2, r0, #0
   24954:	801a      	strh	r2, [r3, #0]
   24956:	1dbb      	adds	r3, r7, #6
   24958:	1c0a      	adds	r2, r1, #0
   2495a:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   2495c:	2326      	movs	r3, #38	; 0x26
   2495e:	18fb      	adds	r3, r7, r3
   24960:	2206      	movs	r2, #6
   24962:	4252      	negs	r2, r2
   24964:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   24966:	230f      	movs	r3, #15
   24968:	18fb      	adds	r3, r7, r3
   2496a:	781b      	ldrb	r3, [r3, #0]
   2496c:	2b7f      	cmp	r3, #127	; 0x7f
   2496e:	d900      	bls.n	24972 <send+0x3a>
   24970:	e087      	b.n	24a82 <send+0x14a>
   24972:	68bb      	ldr	r3, [r7, #8]
   24974:	2b00      	cmp	r3, #0
   24976:	d100      	bne.n	2497a <send+0x42>
   24978:	e083      	b.n	24a82 <send+0x14a>
   2497a:	230c      	movs	r3, #12
   2497c:	18fb      	adds	r3, r7, r3
   2497e:	881a      	ldrh	r2, [r3, #0]
   24980:	23af      	movs	r3, #175	; 0xaf
   24982:	00db      	lsls	r3, r3, #3
   24984:	429a      	cmp	r2, r3
   24986:	d900      	bls.n	2498a <send+0x52>
   24988:	e07b      	b.n	24a82 <send+0x14a>
   2498a:	230f      	movs	r3, #15
   2498c:	18fb      	adds	r3, r7, r3
   2498e:	781b      	ldrb	r3, [r3, #0]
   24990:	b25b      	sxtb	r3, r3
   24992:	4a40      	ldr	r2, [pc, #256]	; (24a94 <send+0x15c>)
   24994:	011b      	lsls	r3, r3, #4
   24996:	18d3      	adds	r3, r2, r3
   24998:	330a      	adds	r3, #10
   2499a:	781b      	ldrb	r3, [r3, #0]
   2499c:	b2db      	uxtb	r3, r3
   2499e:	2b01      	cmp	r3, #1
   249a0:	d16f      	bne.n	24a82 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   249a2:	2323      	movs	r3, #35	; 0x23
   249a4:	18fb      	adds	r3, r7, r3
   249a6:	2245      	movs	r2, #69	; 0x45
   249a8:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   249aa:	2324      	movs	r3, #36	; 0x24
   249ac:	18fb      	adds	r3, r7, r3
   249ae:	2250      	movs	r2, #80	; 0x50
   249b0:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   249b2:	2310      	movs	r3, #16
   249b4:	18fb      	adds	r3, r7, r3
   249b6:	220f      	movs	r2, #15
   249b8:	18ba      	adds	r2, r7, r2
   249ba:	7812      	ldrb	r2, [r2, #0]
   249bc:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   249be:	2310      	movs	r3, #16
   249c0:	18fb      	adds	r3, r7, r3
   249c2:	220c      	movs	r2, #12
   249c4:	18ba      	adds	r2, r7, r2
   249c6:	8812      	ldrh	r2, [r2, #0]
   249c8:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   249ca:	230f      	movs	r3, #15
   249cc:	18fb      	adds	r3, r7, r3
   249ce:	781b      	ldrb	r3, [r3, #0]
   249d0:	b25b      	sxtb	r3, r3
   249d2:	4a30      	ldr	r2, [pc, #192]	; (24a94 <send+0x15c>)
   249d4:	011b      	lsls	r3, r3, #4
   249d6:	18d3      	adds	r3, r2, r3
   249d8:	3306      	adds	r3, #6
   249da:	881b      	ldrh	r3, [r3, #0]
   249dc:	b29a      	uxth	r2, r3
   249de:	2310      	movs	r3, #16
   249e0:	18fb      	adds	r3, r7, r3
   249e2:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   249e4:	230f      	movs	r3, #15
   249e6:	18fb      	adds	r3, r7, r3
   249e8:	781b      	ldrb	r3, [r3, #0]
   249ea:	b25b      	sxtb	r3, r3
   249ec:	2b06      	cmp	r3, #6
   249ee:	dd03      	ble.n	249f8 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   249f0:	2324      	movs	r3, #36	; 0x24
   249f2:	18fb      	adds	r3, r7, r3
   249f4:	2244      	movs	r2, #68	; 0x44
   249f6:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   249f8:	230f      	movs	r3, #15
   249fa:	18fb      	adds	r3, r7, r3
   249fc:	781b      	ldrb	r3, [r3, #0]
   249fe:	b25b      	sxtb	r3, r3
   24a00:	4a24      	ldr	r2, [pc, #144]	; (24a94 <send+0x15c>)
   24a02:	011b      	lsls	r3, r3, #4
   24a04:	18d3      	adds	r3, r2, r3
   24a06:	330b      	adds	r3, #11
   24a08:	781b      	ldrb	r3, [r3, #0]
   24a0a:	b2db      	uxtb	r3, r3
   24a0c:	001a      	movs	r2, r3
   24a0e:	2301      	movs	r3, #1
   24a10:	4013      	ands	r3, r2
   24a12:	d00f      	beq.n	24a34 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   24a14:	2323      	movs	r3, #35	; 0x23
   24a16:	18fb      	adds	r3, r7, r3
   24a18:	224c      	movs	r2, #76	; 0x4c
   24a1a:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   24a1c:	230f      	movs	r3, #15
   24a1e:	18fb      	adds	r3, r7, r3
   24a20:	2200      	movs	r2, #0
   24a22:	569a      	ldrsb	r2, [r3, r2]
   24a24:	2324      	movs	r3, #36	; 0x24
   24a26:	18fb      	adds	r3, r7, r3
   24a28:	491a      	ldr	r1, [pc, #104]	; (24a94 <send+0x15c>)
   24a2a:	0112      	lsls	r2, r2, #4
   24a2c:	188a      	adds	r2, r1, r2
   24a2e:	3208      	adds	r2, #8
   24a30:	8812      	ldrh	r2, [r2, #0]
   24a32:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   24a34:	2323      	movs	r3, #35	; 0x23
   24a36:	18fb      	adds	r3, r7, r3
   24a38:	781b      	ldrb	r3, [r3, #0]
   24a3a:	2280      	movs	r2, #128	; 0x80
   24a3c:	4252      	negs	r2, r2
   24a3e:	4313      	orrs	r3, r2
   24a40:	b2d9      	uxtb	r1, r3
   24a42:	2310      	movs	r3, #16
   24a44:	18fa      	adds	r2, r7, r3
   24a46:	2324      	movs	r3, #36	; 0x24
   24a48:	18fb      	adds	r3, r7, r3
   24a4a:	881b      	ldrh	r3, [r3, #0]
   24a4c:	9302      	str	r3, [sp, #8]
   24a4e:	230c      	movs	r3, #12
   24a50:	18fb      	adds	r3, r7, r3
   24a52:	881b      	ldrh	r3, [r3, #0]
   24a54:	9301      	str	r3, [sp, #4]
   24a56:	68bb      	ldr	r3, [r7, #8]
   24a58:	9300      	str	r3, [sp, #0]
   24a5a:	2310      	movs	r3, #16
   24a5c:	2002      	movs	r0, #2
   24a5e:	4c0e      	ldr	r4, [pc, #56]	; (24a98 <send+0x160>)
   24a60:	47a0      	blx	r4
   24a62:	0003      	movs	r3, r0
   24a64:	001a      	movs	r2, r3
   24a66:	2326      	movs	r3, #38	; 0x26
   24a68:	18fb      	adds	r3, r7, r3
   24a6a:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   24a6c:	2326      	movs	r3, #38	; 0x26
   24a6e:	18fb      	adds	r3, r7, r3
   24a70:	2200      	movs	r2, #0
   24a72:	5e9b      	ldrsh	r3, [r3, r2]
   24a74:	2b00      	cmp	r3, #0
   24a76:	d004      	beq.n	24a82 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   24a78:	2326      	movs	r3, #38	; 0x26
   24a7a:	18fb      	adds	r3, r7, r3
   24a7c:	220e      	movs	r2, #14
   24a7e:	4252      	negs	r2, r2
   24a80:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   24a82:	2326      	movs	r3, #38	; 0x26
   24a84:	18fb      	adds	r3, r7, r3
   24a86:	2200      	movs	r2, #0
   24a88:	5e9b      	ldrsh	r3, [r3, r2]
}
   24a8a:	0018      	movs	r0, r3
   24a8c:	46bd      	mov	sp, r7
   24a8e:	b00b      	add	sp, #44	; 0x2c
   24a90:	bd90      	pop	{r4, r7, pc}
   24a92:	46c0      	nop			; (mov r8, r8)
   24a94:	20005ac8 	.word	0x20005ac8
   24a98:	0001fee1 	.word	0x0001fee1

00024a9c <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   24a9c:	b590      	push	{r4, r7, lr}
   24a9e:	b08d      	sub	sp, #52	; 0x34
   24aa0:	af04      	add	r7, sp, #16
   24aa2:	60b9      	str	r1, [r7, #8]
   24aa4:	0011      	movs	r1, r2
   24aa6:	607b      	str	r3, [r7, #4]
   24aa8:	230f      	movs	r3, #15
   24aaa:	18fb      	adds	r3, r7, r3
   24aac:	1c02      	adds	r2, r0, #0
   24aae:	701a      	strb	r2, [r3, #0]
   24ab0:	230c      	movs	r3, #12
   24ab2:	18fb      	adds	r3, r7, r3
   24ab4:	1c0a      	adds	r2, r1, #0
   24ab6:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   24ab8:	231e      	movs	r3, #30
   24aba:	18fb      	adds	r3, r7, r3
   24abc:	2206      	movs	r2, #6
   24abe:	4252      	negs	r2, r2
   24ac0:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   24ac2:	230f      	movs	r3, #15
   24ac4:	18fb      	adds	r3, r7, r3
   24ac6:	781b      	ldrb	r3, [r3, #0]
   24ac8:	2b7f      	cmp	r3, #127	; 0x7f
   24aca:	d900      	bls.n	24ace <recv+0x32>
   24acc:	e099      	b.n	24c02 <recv+0x166>
   24ace:	68bb      	ldr	r3, [r7, #8]
   24ad0:	2b00      	cmp	r3, #0
   24ad2:	d100      	bne.n	24ad6 <recv+0x3a>
   24ad4:	e095      	b.n	24c02 <recv+0x166>
   24ad6:	230c      	movs	r3, #12
   24ad8:	18fb      	adds	r3, r7, r3
   24ada:	881b      	ldrh	r3, [r3, #0]
   24adc:	2b00      	cmp	r3, #0
   24ade:	d100      	bne.n	24ae2 <recv+0x46>
   24ae0:	e08f      	b.n	24c02 <recv+0x166>
   24ae2:	230f      	movs	r3, #15
   24ae4:	18fb      	adds	r3, r7, r3
   24ae6:	781b      	ldrb	r3, [r3, #0]
   24ae8:	b25b      	sxtb	r3, r3
   24aea:	4a4a      	ldr	r2, [pc, #296]	; (24c14 <recv+0x178>)
   24aec:	011b      	lsls	r3, r3, #4
   24aee:	18d3      	adds	r3, r2, r3
   24af0:	330a      	adds	r3, #10
   24af2:	781b      	ldrb	r3, [r3, #0]
   24af4:	b2db      	uxtb	r3, r3
   24af6:	2b01      	cmp	r3, #1
   24af8:	d000      	beq.n	24afc <recv+0x60>
   24afa:	e082      	b.n	24c02 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   24afc:	231e      	movs	r3, #30
   24afe:	18fb      	adds	r3, r7, r3
   24b00:	2200      	movs	r2, #0
   24b02:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   24b04:	230f      	movs	r3, #15
   24b06:	18fb      	adds	r3, r7, r3
   24b08:	2200      	movs	r2, #0
   24b0a:	569a      	ldrsb	r2, [r3, r2]
   24b0c:	4b41      	ldr	r3, [pc, #260]	; (24c14 <recv+0x178>)
   24b0e:	0112      	lsls	r2, r2, #4
   24b10:	68b9      	ldr	r1, [r7, #8]
   24b12:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   24b14:	230f      	movs	r3, #15
   24b16:	18fb      	adds	r3, r7, r3
   24b18:	781b      	ldrb	r3, [r3, #0]
   24b1a:	b25b      	sxtb	r3, r3
   24b1c:	4a3d      	ldr	r2, [pc, #244]	; (24c14 <recv+0x178>)
   24b1e:	011b      	lsls	r3, r3, #4
   24b20:	18d3      	adds	r3, r2, r3
   24b22:	3304      	adds	r3, #4
   24b24:	220c      	movs	r2, #12
   24b26:	18ba      	adds	r2, r7, r2
   24b28:	8812      	ldrh	r2, [r2, #0]
   24b2a:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   24b2c:	230f      	movs	r3, #15
   24b2e:	18fb      	adds	r3, r7, r3
   24b30:	781b      	ldrb	r3, [r3, #0]
   24b32:	b25b      	sxtb	r3, r3
   24b34:	4a37      	ldr	r2, [pc, #220]	; (24c14 <recv+0x178>)
   24b36:	011b      	lsls	r3, r3, #4
   24b38:	18d3      	adds	r3, r2, r3
   24b3a:	330c      	adds	r3, #12
   24b3c:	781b      	ldrb	r3, [r3, #0]
   24b3e:	b2db      	uxtb	r3, r3
   24b40:	2b00      	cmp	r3, #0
   24b42:	d15e      	bne.n	24c02 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   24b44:	231d      	movs	r3, #29
   24b46:	18fb      	adds	r3, r7, r3
   24b48:	2246      	movs	r2, #70	; 0x46
   24b4a:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   24b4c:	230f      	movs	r3, #15
   24b4e:	18fb      	adds	r3, r7, r3
   24b50:	781b      	ldrb	r3, [r3, #0]
   24b52:	b25b      	sxtb	r3, r3
   24b54:	4a2f      	ldr	r2, [pc, #188]	; (24c14 <recv+0x178>)
   24b56:	011b      	lsls	r3, r3, #4
   24b58:	18d3      	adds	r3, r2, r3
   24b5a:	330c      	adds	r3, #12
   24b5c:	2201      	movs	r2, #1
   24b5e:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   24b60:	230f      	movs	r3, #15
   24b62:	18fb      	adds	r3, r7, r3
   24b64:	781b      	ldrb	r3, [r3, #0]
   24b66:	b25b      	sxtb	r3, r3
   24b68:	4a2a      	ldr	r2, [pc, #168]	; (24c14 <recv+0x178>)
   24b6a:	011b      	lsls	r3, r3, #4
   24b6c:	18d3      	adds	r3, r2, r3
   24b6e:	330b      	adds	r3, #11
   24b70:	781b      	ldrb	r3, [r3, #0]
   24b72:	b2db      	uxtb	r3, r3
   24b74:	001a      	movs	r2, r3
   24b76:	2301      	movs	r3, #1
   24b78:	4013      	ands	r3, r2
   24b7a:	d003      	beq.n	24b84 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   24b7c:	231d      	movs	r3, #29
   24b7e:	18fb      	adds	r3, r7, r3
   24b80:	224d      	movs	r2, #77	; 0x4d
   24b82:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   24b84:	687b      	ldr	r3, [r7, #4]
   24b86:	2b00      	cmp	r3, #0
   24b88:	d105      	bne.n	24b96 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   24b8a:	2314      	movs	r3, #20
   24b8c:	18fb      	adds	r3, r7, r3
   24b8e:	2201      	movs	r2, #1
   24b90:	4252      	negs	r2, r2
   24b92:	601a      	str	r2, [r3, #0]
   24b94:	e003      	b.n	24b9e <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   24b96:	2314      	movs	r3, #20
   24b98:	18fb      	adds	r3, r7, r3
   24b9a:	687a      	ldr	r2, [r7, #4]
   24b9c:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   24b9e:	2314      	movs	r3, #20
   24ba0:	18fb      	adds	r3, r7, r3
   24ba2:	220f      	movs	r2, #15
   24ba4:	18ba      	adds	r2, r7, r2
   24ba6:	7812      	ldrb	r2, [r2, #0]
   24ba8:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   24baa:	230f      	movs	r3, #15
   24bac:	18fb      	adds	r3, r7, r3
   24bae:	781b      	ldrb	r3, [r3, #0]
   24bb0:	b25b      	sxtb	r3, r3
   24bb2:	4a18      	ldr	r2, [pc, #96]	; (24c14 <recv+0x178>)
   24bb4:	011b      	lsls	r3, r3, #4
   24bb6:	18d3      	adds	r3, r2, r3
   24bb8:	3306      	adds	r3, #6
   24bba:	881b      	ldrh	r3, [r3, #0]
   24bbc:	b29a      	uxth	r2, r3
   24bbe:	2314      	movs	r3, #20
   24bc0:	18fb      	adds	r3, r7, r3
   24bc2:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   24bc4:	2314      	movs	r3, #20
   24bc6:	18fa      	adds	r2, r7, r3
   24bc8:	231d      	movs	r3, #29
   24bca:	18fb      	adds	r3, r7, r3
   24bcc:	7819      	ldrb	r1, [r3, #0]
   24bce:	2300      	movs	r3, #0
   24bd0:	9302      	str	r3, [sp, #8]
   24bd2:	2300      	movs	r3, #0
   24bd4:	9301      	str	r3, [sp, #4]
   24bd6:	2300      	movs	r3, #0
   24bd8:	9300      	str	r3, [sp, #0]
   24bda:	2308      	movs	r3, #8
   24bdc:	2002      	movs	r0, #2
   24bde:	4c0e      	ldr	r4, [pc, #56]	; (24c18 <recv+0x17c>)
   24be0:	47a0      	blx	r4
   24be2:	0003      	movs	r3, r0
   24be4:	001a      	movs	r2, r3
   24be6:	231e      	movs	r3, #30
   24be8:	18fb      	adds	r3, r7, r3
   24bea:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   24bec:	231e      	movs	r3, #30
   24bee:	18fb      	adds	r3, r7, r3
   24bf0:	2200      	movs	r2, #0
   24bf2:	5e9b      	ldrsh	r3, [r3, r2]
   24bf4:	2b00      	cmp	r3, #0
   24bf6:	d004      	beq.n	24c02 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   24bf8:	231e      	movs	r3, #30
   24bfa:	18fb      	adds	r3, r7, r3
   24bfc:	220e      	movs	r2, #14
   24bfe:	4252      	negs	r2, r2
   24c00:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   24c02:	231e      	movs	r3, #30
   24c04:	18fb      	adds	r3, r7, r3
   24c06:	2200      	movs	r2, #0
   24c08:	5e9b      	ldrsh	r3, [r3, r2]
}
   24c0a:	0018      	movs	r0, r3
   24c0c:	46bd      	mov	sp, r7
   24c0e:	b009      	add	sp, #36	; 0x24
   24c10:	bd90      	pop	{r4, r7, pc}
   24c12:	46c0      	nop			; (mov r8, r8)
   24c14:	20005ac8 	.word	0x20005ac8
   24c18:	0001fee1 	.word	0x0001fee1

00024c1c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   24c1c:	b5b0      	push	{r4, r5, r7, lr}
   24c1e:	b088      	sub	sp, #32
   24c20:	af04      	add	r7, sp, #16
   24c22:	0002      	movs	r2, r0
   24c24:	1dfb      	adds	r3, r7, #7
   24c26:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   24c28:	230f      	movs	r3, #15
   24c2a:	18fb      	adds	r3, r7, r3
   24c2c:	22fa      	movs	r2, #250	; 0xfa
   24c2e:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   24c30:	4b43      	ldr	r3, [pc, #268]	; (24d40 <close+0x124>)
   24c32:	0018      	movs	r0, r3
   24c34:	4b43      	ldr	r3, [pc, #268]	; (24d44 <close+0x128>)
   24c36:	4798      	blx	r3
   24c38:	1dfb      	adds	r3, r7, #7
   24c3a:	2200      	movs	r2, #0
   24c3c:	569a      	ldrsb	r2, [r3, r2]
   24c3e:	4b42      	ldr	r3, [pc, #264]	; (24d48 <close+0x12c>)
   24c40:	0011      	movs	r1, r2
   24c42:	0018      	movs	r0, r3
   24c44:	4b3f      	ldr	r3, [pc, #252]	; (24d44 <close+0x128>)
   24c46:	4798      	blx	r3
   24c48:	4b40      	ldr	r3, [pc, #256]	; (24d4c <close+0x130>)
   24c4a:	0018      	movs	r0, r3
   24c4c:	4b3d      	ldr	r3, [pc, #244]	; (24d44 <close+0x128>)
   24c4e:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   24c50:	1dfb      	adds	r3, r7, #7
   24c52:	781b      	ldrb	r3, [r3, #0]
   24c54:	2b7f      	cmp	r3, #127	; 0x7f
   24c56:	d86a      	bhi.n	24d2e <close+0x112>
   24c58:	1dfb      	adds	r3, r7, #7
   24c5a:	781b      	ldrb	r3, [r3, #0]
   24c5c:	b25b      	sxtb	r3, r3
   24c5e:	4a3c      	ldr	r2, [pc, #240]	; (24d50 <close+0x134>)
   24c60:	011b      	lsls	r3, r3, #4
   24c62:	18d3      	adds	r3, r2, r3
   24c64:	330a      	adds	r3, #10
   24c66:	781b      	ldrb	r3, [r3, #0]
   24c68:	b2db      	uxtb	r3, r3
   24c6a:	2b01      	cmp	r3, #1
   24c6c:	d15f      	bne.n	24d2e <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   24c6e:	230e      	movs	r3, #14
   24c70:	18fb      	adds	r3, r7, r3
   24c72:	2249      	movs	r2, #73	; 0x49
   24c74:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   24c76:	2308      	movs	r3, #8
   24c78:	18fb      	adds	r3, r7, r3
   24c7a:	1dfa      	adds	r2, r7, #7
   24c7c:	7812      	ldrb	r2, [r2, #0]
   24c7e:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   24c80:	1dfb      	adds	r3, r7, #7
   24c82:	781b      	ldrb	r3, [r3, #0]
   24c84:	b25b      	sxtb	r3, r3
   24c86:	4a32      	ldr	r2, [pc, #200]	; (24d50 <close+0x134>)
   24c88:	011b      	lsls	r3, r3, #4
   24c8a:	18d3      	adds	r3, r2, r3
   24c8c:	3306      	adds	r3, #6
   24c8e:	881b      	ldrh	r3, [r3, #0]
   24c90:	b29a      	uxth	r2, r3
   24c92:	2308      	movs	r3, #8
   24c94:	18fb      	adds	r3, r7, r3
   24c96:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   24c98:	1dfb      	adds	r3, r7, #7
   24c9a:	781b      	ldrb	r3, [r3, #0]
   24c9c:	b25b      	sxtb	r3, r3
   24c9e:	4a2c      	ldr	r2, [pc, #176]	; (24d50 <close+0x134>)
   24ca0:	011b      	lsls	r3, r3, #4
   24ca2:	18d3      	adds	r3, r2, r3
   24ca4:	330a      	adds	r3, #10
   24ca6:	2200      	movs	r2, #0
   24ca8:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   24caa:	1dfb      	adds	r3, r7, #7
   24cac:	781b      	ldrb	r3, [r3, #0]
   24cae:	b25b      	sxtb	r3, r3
   24cb0:	4a27      	ldr	r2, [pc, #156]	; (24d50 <close+0x134>)
   24cb2:	011b      	lsls	r3, r3, #4
   24cb4:	18d3      	adds	r3, r2, r3
   24cb6:	3306      	adds	r3, #6
   24cb8:	2200      	movs	r2, #0
   24cba:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   24cbc:	1dfb      	adds	r3, r7, #7
   24cbe:	781b      	ldrb	r3, [r3, #0]
   24cc0:	b25b      	sxtb	r3, r3
   24cc2:	4a23      	ldr	r2, [pc, #140]	; (24d50 <close+0x134>)
   24cc4:	011b      	lsls	r3, r3, #4
   24cc6:	18d3      	adds	r3, r2, r3
   24cc8:	330b      	adds	r3, #11
   24cca:	781b      	ldrb	r3, [r3, #0]
   24ccc:	b2db      	uxtb	r3, r3
   24cce:	001a      	movs	r2, r3
   24cd0:	2301      	movs	r3, #1
   24cd2:	4013      	ands	r3, r2
   24cd4:	d003      	beq.n	24cde <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   24cd6:	230e      	movs	r3, #14
   24cd8:	18fb      	adds	r3, r7, r3
   24cda:	224e      	movs	r2, #78	; 0x4e
   24cdc:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   24cde:	230f      	movs	r3, #15
   24ce0:	18fc      	adds	r4, r7, r3
   24ce2:	2308      	movs	r3, #8
   24ce4:	18fa      	adds	r2, r7, r3
   24ce6:	230e      	movs	r3, #14
   24ce8:	18fb      	adds	r3, r7, r3
   24cea:	7819      	ldrb	r1, [r3, #0]
   24cec:	2300      	movs	r3, #0
   24cee:	9302      	str	r3, [sp, #8]
   24cf0:	2300      	movs	r3, #0
   24cf2:	9301      	str	r3, [sp, #4]
   24cf4:	2300      	movs	r3, #0
   24cf6:	9300      	str	r3, [sp, #0]
   24cf8:	2304      	movs	r3, #4
   24cfa:	2002      	movs	r0, #2
   24cfc:	4d15      	ldr	r5, [pc, #84]	; (24d54 <close+0x138>)
   24cfe:	47a8      	blx	r5
   24d00:	0003      	movs	r3, r0
   24d02:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   24d04:	230f      	movs	r3, #15
   24d06:	18fb      	adds	r3, r7, r3
   24d08:	781b      	ldrb	r3, [r3, #0]
   24d0a:	b25b      	sxtb	r3, r3
   24d0c:	2b00      	cmp	r3, #0
   24d0e:	d003      	beq.n	24d18 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   24d10:	230f      	movs	r3, #15
   24d12:	18fb      	adds	r3, r7, r3
   24d14:	22f7      	movs	r2, #247	; 0xf7
   24d16:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   24d18:	1dfb      	adds	r3, r7, #7
   24d1a:	781b      	ldrb	r3, [r3, #0]
   24d1c:	b25b      	sxtb	r3, r3
   24d1e:	011a      	lsls	r2, r3, #4
   24d20:	4b0b      	ldr	r3, [pc, #44]	; (24d50 <close+0x134>)
   24d22:	18d3      	adds	r3, r2, r3
   24d24:	2210      	movs	r2, #16
   24d26:	2100      	movs	r1, #0
   24d28:	0018      	movs	r0, r3
   24d2a:	4b0b      	ldr	r3, [pc, #44]	; (24d58 <close+0x13c>)
   24d2c:	4798      	blx	r3
	}
	return s8Ret;
   24d2e:	230f      	movs	r3, #15
   24d30:	18fb      	adds	r3, r7, r3
   24d32:	781b      	ldrb	r3, [r3, #0]
   24d34:	b25b      	sxtb	r3, r3
}
   24d36:	0018      	movs	r0, r3
   24d38:	46bd      	mov	sp, r7
   24d3a:	b004      	add	sp, #16
   24d3c:	bdb0      	pop	{r4, r5, r7, pc}
   24d3e:	46c0      	nop			; (mov r8, r8)
   24d40:	00038e04 	.word	0x00038e04
   24d44:	0001cee9 	.word	0x0001cee9
   24d48:	00038e44 	.word	0x00038e44
   24d4c:	00038e24 	.word	0x00038e24
   24d50:	20005ac8 	.word	0x20005ac8
   24d54:	0001fee1 	.word	0x0001fee1
   24d58:	0001fc81 	.word	0x0001fc81

00024d5c <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   24d5c:	b580      	push	{r7, lr}
   24d5e:	b086      	sub	sp, #24
   24d60:	af00      	add	r7, sp, #0
   24d62:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   24d64:	2300      	movs	r3, #0
   24d66:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   24d68:	2317      	movs	r3, #23
   24d6a:	18fb      	adds	r3, r7, r3
   24d6c:	2200      	movs	r2, #0
   24d6e:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   24d70:	2316      	movs	r3, #22
   24d72:	18fb      	adds	r3, r7, r3
   24d74:	2200      	movs	r2, #0
   24d76:	701a      	strb	r2, [r3, #0]
   24d78:	e060      	b.n	24e3c <nmi_inet_addr+0xe0>
	{
		j = 0;
   24d7a:	2315      	movs	r3, #21
   24d7c:	18fb      	adds	r3, r7, r3
   24d7e:	2200      	movs	r2, #0
   24d80:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   24d82:	2314      	movs	r3, #20
   24d84:	18fb      	adds	r3, r7, r3
   24d86:	687a      	ldr	r2, [r7, #4]
   24d88:	7812      	ldrb	r2, [r2, #0]
   24d8a:	701a      	strb	r2, [r3, #0]
			++j;
   24d8c:	2315      	movs	r3, #21
   24d8e:	18fb      	adds	r3, r7, r3
   24d90:	2215      	movs	r2, #21
   24d92:	18ba      	adds	r2, r7, r2
   24d94:	7812      	ldrb	r2, [r2, #0]
   24d96:	3201      	adds	r2, #1
   24d98:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   24d9a:	2315      	movs	r3, #21
   24d9c:	18fb      	adds	r3, r7, r3
   24d9e:	781b      	ldrb	r3, [r3, #0]
   24da0:	2b04      	cmp	r3, #4
   24da2:	d901      	bls.n	24da8 <nmi_inet_addr+0x4c>
			{
				return 0;
   24da4:	2300      	movs	r3, #0
   24da6:	e057      	b.n	24e58 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   24da8:	2314      	movs	r3, #20
   24daa:	18fb      	adds	r3, r7, r3
   24dac:	781b      	ldrb	r3, [r3, #0]
   24dae:	2b2e      	cmp	r3, #46	; 0x2e
   24db0:	d004      	beq.n	24dbc <nmi_inet_addr+0x60>
   24db2:	2314      	movs	r3, #20
   24db4:	18fb      	adds	r3, r7, r3
   24db6:	781b      	ldrb	r3, [r3, #0]
   24db8:	2b00      	cmp	r3, #0
   24dba:	d10d      	bne.n	24dd8 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   24dbc:	2316      	movs	r3, #22
   24dbe:	18fb      	adds	r3, r7, r3
   24dc0:	781b      	ldrb	r3, [r3, #0]
   24dc2:	220c      	movs	r2, #12
   24dc4:	18ba      	adds	r2, r7, r2
   24dc6:	2117      	movs	r1, #23
   24dc8:	1879      	adds	r1, r7, r1
   24dca:	7809      	ldrb	r1, [r1, #0]
   24dcc:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   24dce:	2317      	movs	r3, #23
   24dd0:	18fb      	adds	r3, r7, r3
   24dd2:	2200      	movs	r2, #0
   24dd4:	701a      	strb	r2, [r3, #0]
   24dd6:	e01d      	b.n	24e14 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   24dd8:	2314      	movs	r3, #20
   24dda:	18fb      	adds	r3, r7, r3
   24ddc:	781b      	ldrb	r3, [r3, #0]
   24dde:	2b2f      	cmp	r3, #47	; 0x2f
   24de0:	d916      	bls.n	24e10 <nmi_inet_addr+0xb4>
   24de2:	2314      	movs	r3, #20
   24de4:	18fb      	adds	r3, r7, r3
   24de6:	781b      	ldrb	r3, [r3, #0]
   24de8:	2b39      	cmp	r3, #57	; 0x39
   24dea:	d811      	bhi.n	24e10 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   24dec:	2317      	movs	r3, #23
   24dee:	18fb      	adds	r3, r7, r3
   24df0:	781b      	ldrb	r3, [r3, #0]
   24df2:	1c1a      	adds	r2, r3, #0
   24df4:	0092      	lsls	r2, r2, #2
   24df6:	18d3      	adds	r3, r2, r3
   24df8:	18db      	adds	r3, r3, r3
   24dfa:	b2da      	uxtb	r2, r3
   24dfc:	2314      	movs	r3, #20
   24dfe:	18fb      	adds	r3, r7, r3
   24e00:	781b      	ldrb	r3, [r3, #0]
   24e02:	18d3      	adds	r3, r2, r3
   24e04:	b2da      	uxtb	r2, r3
   24e06:	2317      	movs	r3, #23
   24e08:	18fb      	adds	r3, r7, r3
   24e0a:	3a30      	subs	r2, #48	; 0x30
   24e0c:	701a      	strb	r2, [r3, #0]
   24e0e:	e001      	b.n	24e14 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   24e10:	2300      	movs	r3, #0
   24e12:	e021      	b.n	24e58 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   24e14:	687b      	ldr	r3, [r7, #4]
   24e16:	3301      	adds	r3, #1
   24e18:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   24e1a:	2314      	movs	r3, #20
   24e1c:	18fb      	adds	r3, r7, r3
   24e1e:	781b      	ldrb	r3, [r3, #0]
   24e20:	2b2e      	cmp	r3, #46	; 0x2e
   24e22:	d004      	beq.n	24e2e <nmi_inet_addr+0xd2>
   24e24:	2314      	movs	r3, #20
   24e26:	18fb      	adds	r3, r7, r3
   24e28:	781b      	ldrb	r3, [r3, #0]
   24e2a:	2b00      	cmp	r3, #0
   24e2c:	d1a9      	bne.n	24d82 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   24e2e:	2316      	movs	r3, #22
   24e30:	18fb      	adds	r3, r7, r3
   24e32:	2216      	movs	r2, #22
   24e34:	18ba      	adds	r2, r7, r2
   24e36:	7812      	ldrb	r2, [r2, #0]
   24e38:	3201      	adds	r2, #1
   24e3a:	701a      	strb	r2, [r3, #0]
   24e3c:	2316      	movs	r3, #22
   24e3e:	18fb      	adds	r3, r7, r3
   24e40:	781b      	ldrb	r3, [r3, #0]
   24e42:	2b03      	cmp	r3, #3
   24e44:	d999      	bls.n	24d7a <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   24e46:	230c      	movs	r3, #12
   24e48:	18f9      	adds	r1, r7, r3
   24e4a:	2310      	movs	r3, #16
   24e4c:	18fb      	adds	r3, r7, r3
   24e4e:	2204      	movs	r2, #4
   24e50:	0018      	movs	r0, r3
   24e52:	4b03      	ldr	r3, [pc, #12]	; (24e60 <nmi_inet_addr+0x104>)
   24e54:	4798      	blx	r3
	return u32IP;
   24e56:	693b      	ldr	r3, [r7, #16]
}
   24e58:	0018      	movs	r0, r3
   24e5a:	46bd      	mov	sp, r7
   24e5c:	b006      	add	sp, #24
   24e5e:	bd80      	pop	{r7, pc}
   24e60:	0001fc45 	.word	0x0001fc45

00024e64 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   24e64:	b5b0      	push	{r4, r5, r7, lr}
   24e66:	b088      	sub	sp, #32
   24e68:	af04      	add	r7, sp, #16
   24e6a:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   24e6c:	230f      	movs	r3, #15
   24e6e:	18fb      	adds	r3, r7, r3
   24e70:	22fa      	movs	r2, #250	; 0xfa
   24e72:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   24e74:	687b      	ldr	r3, [r7, #4]
   24e76:	0018      	movs	r0, r3
   24e78:	4b14      	ldr	r3, [pc, #80]	; (24ecc <gethostbyname+0x68>)
   24e7a:	4798      	blx	r3
   24e7c:	0003      	movs	r3, r0
   24e7e:	001a      	movs	r2, r3
   24e80:	230e      	movs	r3, #14
   24e82:	18fb      	adds	r3, r7, r3
   24e84:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   24e86:	230e      	movs	r3, #14
   24e88:	18fb      	adds	r3, r7, r3
   24e8a:	781b      	ldrb	r3, [r3, #0]
   24e8c:	2b40      	cmp	r3, #64	; 0x40
   24e8e:	d815      	bhi.n	24ebc <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   24e90:	230e      	movs	r3, #14
   24e92:	18fb      	adds	r3, r7, r3
   24e94:	781b      	ldrb	r3, [r3, #0]
   24e96:	b29b      	uxth	r3, r3
   24e98:	3301      	adds	r3, #1
   24e9a:	b299      	uxth	r1, r3
   24e9c:	230f      	movs	r3, #15
   24e9e:	18fc      	adds	r4, r7, r3
   24ea0:	687a      	ldr	r2, [r7, #4]
   24ea2:	2300      	movs	r3, #0
   24ea4:	9302      	str	r3, [sp, #8]
   24ea6:	2300      	movs	r3, #0
   24ea8:	9301      	str	r3, [sp, #4]
   24eaa:	2300      	movs	r3, #0
   24eac:	9300      	str	r3, [sp, #0]
   24eae:	000b      	movs	r3, r1
   24eb0:	214a      	movs	r1, #74	; 0x4a
   24eb2:	2002      	movs	r0, #2
   24eb4:	4d06      	ldr	r5, [pc, #24]	; (24ed0 <gethostbyname+0x6c>)
   24eb6:	47a8      	blx	r5
   24eb8:	0003      	movs	r3, r0
   24eba:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   24ebc:	230f      	movs	r3, #15
   24ebe:	18fb      	adds	r3, r7, r3
   24ec0:	781b      	ldrb	r3, [r3, #0]
   24ec2:	b25b      	sxtb	r3, r3
}
   24ec4:	0018      	movs	r0, r3
   24ec6:	46bd      	mov	sp, r7
   24ec8:	b004      	add	sp, #16
   24eca:	bdb0      	pop	{r4, r5, r7, pc}
   24ecc:	0001fcbf 	.word	0x0001fcbf
   24ed0:	0001fee1 	.word	0x0001fee1

00024ed4 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   24ed4:	b580      	push	{r7, lr}
   24ed6:	b082      	sub	sp, #8
   24ed8:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   24eda:	003b      	movs	r3, r7
   24edc:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   24ede:	687b      	ldr	r3, [r7, #4]
   24ee0:	22b9      	movs	r2, #185	; 0xb9
   24ee2:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   24ee4:	4b13      	ldr	r3, [pc, #76]	; (24f34 <spi_flash_enter_low_power_mode+0x60>)
   24ee6:	2100      	movs	r1, #0
   24ee8:	0018      	movs	r0, r3
   24eea:	4b13      	ldr	r3, [pc, #76]	; (24f38 <spi_flash_enter_low_power_mode+0x64>)
   24eec:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   24eee:	687b      	ldr	r3, [r7, #4]
   24ef0:	781b      	ldrb	r3, [r3, #0]
   24ef2:	001a      	movs	r2, r3
   24ef4:	4b11      	ldr	r3, [pc, #68]	; (24f3c <spi_flash_enter_low_power_mode+0x68>)
   24ef6:	0011      	movs	r1, r2
   24ef8:	0018      	movs	r0, r3
   24efa:	4b0f      	ldr	r3, [pc, #60]	; (24f38 <spi_flash_enter_low_power_mode+0x64>)
   24efc:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   24efe:	4b10      	ldr	r3, [pc, #64]	; (24f40 <spi_flash_enter_low_power_mode+0x6c>)
   24f00:	2101      	movs	r1, #1
   24f02:	0018      	movs	r0, r3
   24f04:	4b0c      	ldr	r3, [pc, #48]	; (24f38 <spi_flash_enter_low_power_mode+0x64>)
   24f06:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   24f08:	4b0e      	ldr	r3, [pc, #56]	; (24f44 <spi_flash_enter_low_power_mode+0x70>)
   24f0a:	2100      	movs	r1, #0
   24f0c:	0018      	movs	r0, r3
   24f0e:	4b0a      	ldr	r3, [pc, #40]	; (24f38 <spi_flash_enter_low_power_mode+0x64>)
   24f10:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   24f12:	4b0d      	ldr	r3, [pc, #52]	; (24f48 <spi_flash_enter_low_power_mode+0x74>)
   24f14:	2181      	movs	r1, #129	; 0x81
   24f16:	0018      	movs	r0, r3
   24f18:	4b07      	ldr	r3, [pc, #28]	; (24f38 <spi_flash_enter_low_power_mode+0x64>)
   24f1a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   24f1c:	46c0      	nop			; (mov r8, r8)
   24f1e:	4b0b      	ldr	r3, [pc, #44]	; (24f4c <spi_flash_enter_low_power_mode+0x78>)
   24f20:	0018      	movs	r0, r3
   24f22:	4b0b      	ldr	r3, [pc, #44]	; (24f50 <spi_flash_enter_low_power_mode+0x7c>)
   24f24:	4798      	blx	r3
   24f26:	0003      	movs	r3, r0
   24f28:	2b01      	cmp	r3, #1
   24f2a:	d1f8      	bne.n	24f1e <spi_flash_enter_low_power_mode+0x4a>
}
   24f2c:	46c0      	nop			; (mov r8, r8)
   24f2e:	46bd      	mov	sp, r7
   24f30:	b002      	add	sp, #8
   24f32:	bd80      	pop	{r7, pc}
   24f34:	00010208 	.word	0x00010208
   24f38:	00021d35 	.word	0x00021d35
   24f3c:	0001020c 	.word	0x0001020c
   24f40:	00010214 	.word	0x00010214
   24f44:	0001021c 	.word	0x0001021c
   24f48:	00010204 	.word	0x00010204
   24f4c:	00010218 	.word	0x00010218
   24f50:	00021cf1 	.word	0x00021cf1

00024f54 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   24f54:	b580      	push	{r7, lr}
   24f56:	b082      	sub	sp, #8
   24f58:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   24f5a:	003b      	movs	r3, r7
   24f5c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   24f5e:	687b      	ldr	r3, [r7, #4]
   24f60:	22ab      	movs	r2, #171	; 0xab
   24f62:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   24f64:	4b13      	ldr	r3, [pc, #76]	; (24fb4 <spi_flash_leave_low_power_mode+0x60>)
   24f66:	2100      	movs	r1, #0
   24f68:	0018      	movs	r0, r3
   24f6a:	4b13      	ldr	r3, [pc, #76]	; (24fb8 <spi_flash_leave_low_power_mode+0x64>)
   24f6c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   24f6e:	687b      	ldr	r3, [r7, #4]
   24f70:	781b      	ldrb	r3, [r3, #0]
   24f72:	001a      	movs	r2, r3
   24f74:	4b11      	ldr	r3, [pc, #68]	; (24fbc <spi_flash_leave_low_power_mode+0x68>)
   24f76:	0011      	movs	r1, r2
   24f78:	0018      	movs	r0, r3
   24f7a:	4b0f      	ldr	r3, [pc, #60]	; (24fb8 <spi_flash_leave_low_power_mode+0x64>)
   24f7c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   24f7e:	4b10      	ldr	r3, [pc, #64]	; (24fc0 <spi_flash_leave_low_power_mode+0x6c>)
   24f80:	2101      	movs	r1, #1
   24f82:	0018      	movs	r0, r3
   24f84:	4b0c      	ldr	r3, [pc, #48]	; (24fb8 <spi_flash_leave_low_power_mode+0x64>)
   24f86:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   24f88:	4b0e      	ldr	r3, [pc, #56]	; (24fc4 <spi_flash_leave_low_power_mode+0x70>)
   24f8a:	2100      	movs	r1, #0
   24f8c:	0018      	movs	r0, r3
   24f8e:	4b0a      	ldr	r3, [pc, #40]	; (24fb8 <spi_flash_leave_low_power_mode+0x64>)
   24f90:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   24f92:	4b0d      	ldr	r3, [pc, #52]	; (24fc8 <spi_flash_leave_low_power_mode+0x74>)
   24f94:	2181      	movs	r1, #129	; 0x81
   24f96:	0018      	movs	r0, r3
   24f98:	4b07      	ldr	r3, [pc, #28]	; (24fb8 <spi_flash_leave_low_power_mode+0x64>)
   24f9a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   24f9c:	46c0      	nop			; (mov r8, r8)
   24f9e:	4b0b      	ldr	r3, [pc, #44]	; (24fcc <spi_flash_leave_low_power_mode+0x78>)
   24fa0:	0018      	movs	r0, r3
   24fa2:	4b0b      	ldr	r3, [pc, #44]	; (24fd0 <spi_flash_leave_low_power_mode+0x7c>)
   24fa4:	4798      	blx	r3
   24fa6:	0003      	movs	r3, r0
   24fa8:	2b01      	cmp	r3, #1
   24faa:	d1f8      	bne.n	24f9e <spi_flash_leave_low_power_mode+0x4a>
}
   24fac:	46c0      	nop			; (mov r8, r8)
   24fae:	46bd      	mov	sp, r7
   24fb0:	b002      	add	sp, #8
   24fb2:	bd80      	pop	{r7, pc}
   24fb4:	00010208 	.word	0x00010208
   24fb8:	00021d35 	.word	0x00021d35
   24fbc:	0001020c 	.word	0x0001020c
   24fc0:	00010214 	.word	0x00010214
   24fc4:	0001021c 	.word	0x0001021c
   24fc8:	00010204 	.word	0x00010204
   24fcc:	00010218 	.word	0x00010218
   24fd0:	00021cf1 	.word	0x00021cf1

00024fd4 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   24fd4:	b590      	push	{r4, r7, lr}
   24fd6:	b085      	sub	sp, #20
   24fd8:	af00      	add	r7, sp, #0
   24fda:	0002      	movs	r2, r0
   24fdc:	1dfb      	adds	r3, r7, #7
   24fde:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   24fe0:	230f      	movs	r3, #15
   24fe2:	18fb      	adds	r3, r7, r3
   24fe4:	2200      	movs	r2, #0
   24fe6:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   24fe8:	4b24      	ldr	r3, [pc, #144]	; (2507c <spi_flash_enable+0xa8>)
   24fea:	4798      	blx	r3
   24fec:	0003      	movs	r3, r0
   24fee:	051b      	lsls	r3, r3, #20
   24ff0:	0d1b      	lsrs	r3, r3, #20
   24ff2:	4a23      	ldr	r2, [pc, #140]	; (25080 <spi_flash_enable+0xac>)
   24ff4:	4293      	cmp	r3, r2
   24ff6:	d938      	bls.n	2506a <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   24ff8:	230f      	movs	r3, #15
   24ffa:	18fc      	adds	r4, r7, r3
   24ffc:	2308      	movs	r3, #8
   24ffe:	18fb      	adds	r3, r7, r3
   25000:	4a20      	ldr	r2, [pc, #128]	; (25084 <spi_flash_enable+0xb0>)
   25002:	0019      	movs	r1, r3
   25004:	0010      	movs	r0, r2
   25006:	4b20      	ldr	r3, [pc, #128]	; (25088 <spi_flash_enable+0xb4>)
   25008:	4798      	blx	r3
   2500a:	0003      	movs	r3, r0
   2500c:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   2500e:	230f      	movs	r3, #15
   25010:	18fb      	adds	r3, r7, r3
   25012:	781b      	ldrb	r3, [r3, #0]
   25014:	b25b      	sxtb	r3, r3
   25016:	2b00      	cmp	r3, #0
   25018:	d126      	bne.n	25068 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   2501a:	68bb      	ldr	r3, [r7, #8]
   2501c:	4a1b      	ldr	r2, [pc, #108]	; (2508c <spi_flash_enable+0xb8>)
   2501e:	4013      	ands	r3, r2
   25020:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   25022:	68bb      	ldr	r3, [r7, #8]
   25024:	4a1a      	ldr	r2, [pc, #104]	; (25090 <spi_flash_enable+0xbc>)
   25026:	4313      	orrs	r3, r2
   25028:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   2502a:	68bb      	ldr	r3, [r7, #8]
   2502c:	4a15      	ldr	r2, [pc, #84]	; (25084 <spi_flash_enable+0xb0>)
   2502e:	0019      	movs	r1, r3
   25030:	0010      	movs	r0, r2
   25032:	4b18      	ldr	r3, [pc, #96]	; (25094 <spi_flash_enable+0xc0>)
   25034:	4798      	blx	r3
		if(enable) {
   25036:	1dfb      	adds	r3, r7, #7
   25038:	781b      	ldrb	r3, [r3, #0]
   2503a:	2b00      	cmp	r3, #0
   2503c:	d002      	beq.n	25044 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   2503e:	4b16      	ldr	r3, [pc, #88]	; (25098 <spi_flash_enable+0xc4>)
   25040:	4798      	blx	r3
   25042:	e001      	b.n	25048 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   25044:	4b15      	ldr	r3, [pc, #84]	; (2509c <spi_flash_enable+0xc8>)
   25046:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   25048:	68bb      	ldr	r3, [r7, #8]
   2504a:	4a10      	ldr	r2, [pc, #64]	; (2508c <spi_flash_enable+0xb8>)
   2504c:	4013      	ands	r3, r2
   2504e:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   25050:	68bb      	ldr	r3, [r7, #8]
   25052:	2280      	movs	r2, #128	; 0x80
   25054:	0252      	lsls	r2, r2, #9
   25056:	4313      	orrs	r3, r2
   25058:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   2505a:	68bb      	ldr	r3, [r7, #8]
   2505c:	4a09      	ldr	r2, [pc, #36]	; (25084 <spi_flash_enable+0xb0>)
   2505e:	0019      	movs	r1, r3
   25060:	0010      	movs	r0, r2
   25062:	4b0c      	ldr	r3, [pc, #48]	; (25094 <spi_flash_enable+0xc0>)
   25064:	4798      	blx	r3
   25066:	e000      	b.n	2506a <spi_flash_enable+0x96>
			goto ERR1;
   25068:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   2506a:	230f      	movs	r3, #15
   2506c:	18fb      	adds	r3, r7, r3
   2506e:	781b      	ldrb	r3, [r3, #0]
   25070:	b25b      	sxtb	r3, r3
}
   25072:	0018      	movs	r0, r3
   25074:	46bd      	mov	sp, r7
   25076:	b005      	add	sp, #20
   25078:	bd90      	pop	{r4, r7, pc}
   2507a:	46c0      	nop			; (mov r8, r8)
   2507c:	00021611 	.word	0x00021611
   25080:	0000039f 	.word	0x0000039f
   25084:	00001410 	.word	0x00001410
   25088:	00021d11 	.word	0x00021d11
   2508c:	f8888fff 	.word	0xf8888fff
   25090:	01111000 	.word	0x01111000
   25094:	00021d35 	.word	0x00021d35
   25098:	00024f55 	.word	0x00024f55
   2509c:	00024ed5 	.word	0x00024ed5

000250a0 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   250a0:	b580      	push	{r7, lr}
   250a2:	b084      	sub	sp, #16
   250a4:	af00      	add	r7, sp, #0
   250a6:	0002      	movs	r2, r0
   250a8:	1dfb      	adds	r3, r7, #7
   250aa:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   250ac:	1dfb      	adds	r3, r7, #7
   250ae:	781b      	ldrb	r3, [r3, #0]
   250b0:	2b00      	cmp	r3, #0
   250b2:	d108      	bne.n	250c6 <mem_test_unit_ready+0x26>
   250b4:	1dfb      	adds	r3, r7, #7
   250b6:	781a      	ldrb	r2, [r3, #0]
   250b8:	4b08      	ldr	r3, [pc, #32]	; (250dc <mem_test_unit_ready+0x3c>)
   250ba:	0152      	lsls	r2, r2, #5
   250bc:	58d3      	ldr	r3, [r2, r3]
   250be:	4798      	blx	r3
   250c0:	0003      	movs	r3, r0
   250c2:	001a      	movs	r2, r3
   250c4:	e000      	b.n	250c8 <mem_test_unit_ready+0x28>
   250c6:	2201      	movs	r2, #1
  status =
   250c8:	230f      	movs	r3, #15
   250ca:	18fb      	adds	r3, r7, r3
   250cc:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   250ce:	230f      	movs	r3, #15
   250d0:	18fb      	adds	r3, r7, r3
   250d2:	781b      	ldrb	r3, [r3, #0]
}
   250d4:	0018      	movs	r0, r3
   250d6:	46bd      	mov	sp, r7
   250d8:	b004      	add	sp, #16
   250da:	bd80      	pop	{r7, pc}
   250dc:	00038ed0 	.word	0x00038ed0

000250e0 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   250e0:	b580      	push	{r7, lr}
   250e2:	b084      	sub	sp, #16
   250e4:	af00      	add	r7, sp, #0
   250e6:	0002      	movs	r2, r0
   250e8:	6039      	str	r1, [r7, #0]
   250ea:	1dfb      	adds	r3, r7, #7
   250ec:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   250ee:	1dfb      	adds	r3, r7, #7
   250f0:	781b      	ldrb	r3, [r3, #0]
   250f2:	2b00      	cmp	r3, #0
   250f4:	d10c      	bne.n	25110 <mem_read_capacity+0x30>
   250f6:	1dfb      	adds	r3, r7, #7
   250f8:	781b      	ldrb	r3, [r3, #0]
   250fa:	4a0b      	ldr	r2, [pc, #44]	; (25128 <mem_read_capacity+0x48>)
   250fc:	015b      	lsls	r3, r3, #5
   250fe:	18d3      	adds	r3, r2, r3
   25100:	3304      	adds	r3, #4
   25102:	681b      	ldr	r3, [r3, #0]
   25104:	683a      	ldr	r2, [r7, #0]
   25106:	0010      	movs	r0, r2
   25108:	4798      	blx	r3
   2510a:	0003      	movs	r3, r0
   2510c:	001a      	movs	r2, r3
   2510e:	e000      	b.n	25112 <mem_read_capacity+0x32>
   25110:	2201      	movs	r2, #1
  status =
   25112:	230f      	movs	r3, #15
   25114:	18fb      	adds	r3, r7, r3
   25116:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   25118:	230f      	movs	r3, #15
   2511a:	18fb      	adds	r3, r7, r3
   2511c:	781b      	ldrb	r3, [r3, #0]
}
   2511e:	0018      	movs	r0, r3
   25120:	46bd      	mov	sp, r7
   25122:	b004      	add	sp, #16
   25124:	bd80      	pop	{r7, pc}
   25126:	46c0      	nop			; (mov r8, r8)
   25128:	00038ed0 	.word	0x00038ed0

0002512c <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   2512c:	b580      	push	{r7, lr}
   2512e:	b084      	sub	sp, #16
   25130:	af00      	add	r7, sp, #0
   25132:	0002      	movs	r2, r0
   25134:	1dfb      	adds	r3, r7, #7
   25136:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   25138:	1dfb      	adds	r3, r7, #7
   2513a:	781b      	ldrb	r3, [r3, #0]
   2513c:	425a      	negs	r2, r3
   2513e:	4153      	adcs	r3, r2
   25140:	b2da      	uxtb	r2, r3
  sector_size =
   25142:	230f      	movs	r3, #15
   25144:	18fb      	adds	r3, r7, r3
   25146:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   25148:	230f      	movs	r3, #15
   2514a:	18fb      	adds	r3, r7, r3
   2514c:	781b      	ldrb	r3, [r3, #0]
}
   2514e:	0018      	movs	r0, r3
   25150:	46bd      	mov	sp, r7
   25152:	b004      	add	sp, #16
   25154:	bd80      	pop	{r7, pc}
	...

00025158 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   25158:	b580      	push	{r7, lr}
   2515a:	b084      	sub	sp, #16
   2515c:	af00      	add	r7, sp, #0
   2515e:	0002      	movs	r2, r0
   25160:	1dfb      	adds	r3, r7, #7
   25162:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   25164:	1dfb      	adds	r3, r7, #7
   25166:	781b      	ldrb	r3, [r3, #0]
   25168:	2b00      	cmp	r3, #0
   2516a:	d109      	bne.n	25180 <mem_wr_protect+0x28>
   2516c:	1dfb      	adds	r3, r7, #7
   2516e:	781b      	ldrb	r3, [r3, #0]
   25170:	4a0a      	ldr	r2, [pc, #40]	; (2519c <mem_wr_protect+0x44>)
   25172:	015b      	lsls	r3, r3, #5
   25174:	18d3      	adds	r3, r2, r3
   25176:	330c      	adds	r3, #12
   25178:	681b      	ldr	r3, [r3, #0]
   2517a:	4798      	blx	r3
   2517c:	1e03      	subs	r3, r0, #0
   2517e:	d001      	beq.n	25184 <mem_wr_protect+0x2c>
   25180:	2201      	movs	r2, #1
   25182:	e000      	b.n	25186 <mem_wr_protect+0x2e>
   25184:	2200      	movs	r2, #0
  wr_protect =
   25186:	230f      	movs	r3, #15
   25188:	18fb      	adds	r3, r7, r3
   2518a:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   2518c:	230f      	movs	r3, #15
   2518e:	18fb      	adds	r3, r7, r3
   25190:	781b      	ldrb	r3, [r3, #0]
}
   25192:	0018      	movs	r0, r3
   25194:	46bd      	mov	sp, r7
   25196:	b004      	add	sp, #16
   25198:	bd80      	pop	{r7, pc}
   2519a:	46c0      	nop			; (mov r8, r8)
   2519c:	00038ed0 	.word	0x00038ed0

000251a0 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   251a0:	b580      	push	{r7, lr}
   251a2:	b086      	sub	sp, #24
   251a4:	af00      	add	r7, sp, #0
   251a6:	60b9      	str	r1, [r7, #8]
   251a8:	607a      	str	r2, [r7, #4]
   251aa:	230f      	movs	r3, #15
   251ac:	18fb      	adds	r3, r7, r3
   251ae:	1c02      	adds	r2, r0, #0
   251b0:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   251b2:	230f      	movs	r3, #15
   251b4:	18fb      	adds	r3, r7, r3
   251b6:	781b      	ldrb	r3, [r3, #0]
   251b8:	2b00      	cmp	r3, #0
   251ba:	d10e      	bne.n	251da <memory_2_ram+0x3a>
   251bc:	230f      	movs	r3, #15
   251be:	18fb      	adds	r3, r7, r3
   251c0:	781b      	ldrb	r3, [r3, #0]
   251c2:	4a0b      	ldr	r2, [pc, #44]	; (251f0 <memory_2_ram+0x50>)
   251c4:	015b      	lsls	r3, r3, #5
   251c6:	18d3      	adds	r3, r2, r3
   251c8:	3314      	adds	r3, #20
   251ca:	681b      	ldr	r3, [r3, #0]
   251cc:	6879      	ldr	r1, [r7, #4]
   251ce:	68ba      	ldr	r2, [r7, #8]
   251d0:	0010      	movs	r0, r2
   251d2:	4798      	blx	r3
   251d4:	0003      	movs	r3, r0
   251d6:	001a      	movs	r2, r3
   251d8:	e000      	b.n	251dc <memory_2_ram+0x3c>
   251da:	2201      	movs	r2, #1
  status =
   251dc:	2317      	movs	r3, #23
   251de:	18fb      	adds	r3, r7, r3
   251e0:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   251e2:	2317      	movs	r3, #23
   251e4:	18fb      	adds	r3, r7, r3
   251e6:	781b      	ldrb	r3, [r3, #0]
}
   251e8:	0018      	movs	r0, r3
   251ea:	46bd      	mov	sp, r7
   251ec:	b006      	add	sp, #24
   251ee:	bd80      	pop	{r7, pc}
   251f0:	00038ed0 	.word	0x00038ed0

000251f4 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   251f4:	b580      	push	{r7, lr}
   251f6:	b086      	sub	sp, #24
   251f8:	af00      	add	r7, sp, #0
   251fa:	60b9      	str	r1, [r7, #8]
   251fc:	607a      	str	r2, [r7, #4]
   251fe:	230f      	movs	r3, #15
   25200:	18fb      	adds	r3, r7, r3
   25202:	1c02      	adds	r2, r0, #0
   25204:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   25206:	230f      	movs	r3, #15
   25208:	18fb      	adds	r3, r7, r3
   2520a:	781b      	ldrb	r3, [r3, #0]
   2520c:	2b00      	cmp	r3, #0
   2520e:	d10e      	bne.n	2522e <ram_2_memory+0x3a>
   25210:	230f      	movs	r3, #15
   25212:	18fb      	adds	r3, r7, r3
   25214:	781b      	ldrb	r3, [r3, #0]
   25216:	4a0b      	ldr	r2, [pc, #44]	; (25244 <ram_2_memory+0x50>)
   25218:	015b      	lsls	r3, r3, #5
   2521a:	18d3      	adds	r3, r2, r3
   2521c:	3318      	adds	r3, #24
   2521e:	681b      	ldr	r3, [r3, #0]
   25220:	6879      	ldr	r1, [r7, #4]
   25222:	68ba      	ldr	r2, [r7, #8]
   25224:	0010      	movs	r0, r2
   25226:	4798      	blx	r3
   25228:	0003      	movs	r3, r0
   2522a:	001a      	movs	r2, r3
   2522c:	e000      	b.n	25230 <ram_2_memory+0x3c>
   2522e:	2201      	movs	r2, #1
  status =
   25230:	2317      	movs	r3, #23
   25232:	18fb      	adds	r3, r7, r3
   25234:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   25236:	2317      	movs	r3, #23
   25238:	18fb      	adds	r3, r7, r3
   2523a:	781b      	ldrb	r3, [r3, #0]
}
   2523c:	0018      	movs	r0, r3
   2523e:	46bd      	mov	sp, r7
   25240:	b006      	add	sp, #24
   25242:	bd80      	pop	{r7, pc}
   25244:	00038ed0 	.word	0x00038ed0

00025248 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   25248:	b580      	push	{r7, lr}
   2524a:	b082      	sub	sp, #8
   2524c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   2524e:	4b10      	ldr	r3, [pc, #64]	; (25290 <cpu_irq_enter_critical+0x48>)
   25250:	681b      	ldr	r3, [r3, #0]
   25252:	2b00      	cmp	r3, #0
   25254:	d112      	bne.n	2527c <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   25256:	f3ef 8310 	mrs	r3, PRIMASK
   2525a:	607b      	str	r3, [r7, #4]
  return(result);
   2525c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   2525e:	2b00      	cmp	r3, #0
   25260:	d109      	bne.n	25276 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   25262:	b672      	cpsid	i
   25264:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   25268:	4b0a      	ldr	r3, [pc, #40]	; (25294 <cpu_irq_enter_critical+0x4c>)
   2526a:	2200      	movs	r2, #0
   2526c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   2526e:	4b0a      	ldr	r3, [pc, #40]	; (25298 <cpu_irq_enter_critical+0x50>)
   25270:	2201      	movs	r2, #1
   25272:	701a      	strb	r2, [r3, #0]
   25274:	e002      	b.n	2527c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   25276:	4b08      	ldr	r3, [pc, #32]	; (25298 <cpu_irq_enter_critical+0x50>)
   25278:	2200      	movs	r2, #0
   2527a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   2527c:	4b04      	ldr	r3, [pc, #16]	; (25290 <cpu_irq_enter_critical+0x48>)
   2527e:	681b      	ldr	r3, [r3, #0]
   25280:	1c5a      	adds	r2, r3, #1
   25282:	4b03      	ldr	r3, [pc, #12]	; (25290 <cpu_irq_enter_critical+0x48>)
   25284:	601a      	str	r2, [r3, #0]
}
   25286:	46c0      	nop			; (mov r8, r8)
   25288:	46bd      	mov	sp, r7
   2528a:	b002      	add	sp, #8
   2528c:	bd80      	pop	{r7, pc}
   2528e:	46c0      	nop			; (mov r8, r8)
   25290:	20004284 	.word	0x20004284
   25294:	20000116 	.word	0x20000116
   25298:	20004288 	.word	0x20004288

0002529c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   2529c:	b580      	push	{r7, lr}
   2529e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   252a0:	4b0b      	ldr	r3, [pc, #44]	; (252d0 <cpu_irq_leave_critical+0x34>)
   252a2:	681b      	ldr	r3, [r3, #0]
   252a4:	1e5a      	subs	r2, r3, #1
   252a6:	4b0a      	ldr	r3, [pc, #40]	; (252d0 <cpu_irq_leave_critical+0x34>)
   252a8:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   252aa:	4b09      	ldr	r3, [pc, #36]	; (252d0 <cpu_irq_leave_critical+0x34>)
   252ac:	681b      	ldr	r3, [r3, #0]
   252ae:	2b00      	cmp	r3, #0
   252b0:	d10a      	bne.n	252c8 <cpu_irq_leave_critical+0x2c>
   252b2:	4b08      	ldr	r3, [pc, #32]	; (252d4 <cpu_irq_leave_critical+0x38>)
   252b4:	781b      	ldrb	r3, [r3, #0]
   252b6:	b2db      	uxtb	r3, r3
   252b8:	2b00      	cmp	r3, #0
   252ba:	d005      	beq.n	252c8 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   252bc:	4b06      	ldr	r3, [pc, #24]	; (252d8 <cpu_irq_leave_critical+0x3c>)
   252be:	2201      	movs	r2, #1
   252c0:	701a      	strb	r2, [r3, #0]
   252c2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   252c6:	b662      	cpsie	i
	}
}
   252c8:	46c0      	nop			; (mov r8, r8)
   252ca:	46bd      	mov	sp, r7
   252cc:	bd80      	pop	{r7, pc}
   252ce:	46c0      	nop			; (mov r8, r8)
   252d0:	20004284 	.word	0x20004284
   252d4:	20004288 	.word	0x20004288
   252d8:	20000116 	.word	0x20000116

000252dc <system_pinmux_get_group_from_gpio_pin>:
{
   252dc:	b580      	push	{r7, lr}
   252de:	b084      	sub	sp, #16
   252e0:	af00      	add	r7, sp, #0
   252e2:	0002      	movs	r2, r0
   252e4:	1dfb      	adds	r3, r7, #7
   252e6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   252e8:	230f      	movs	r3, #15
   252ea:	18fb      	adds	r3, r7, r3
   252ec:	1dfa      	adds	r2, r7, #7
   252ee:	7812      	ldrb	r2, [r2, #0]
   252f0:	09d2      	lsrs	r2, r2, #7
   252f2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   252f4:	230e      	movs	r3, #14
   252f6:	18fb      	adds	r3, r7, r3
   252f8:	1dfa      	adds	r2, r7, #7
   252fa:	7812      	ldrb	r2, [r2, #0]
   252fc:	0952      	lsrs	r2, r2, #5
   252fe:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   25300:	4b0d      	ldr	r3, [pc, #52]	; (25338 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   25302:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   25304:	230f      	movs	r3, #15
   25306:	18fb      	adds	r3, r7, r3
   25308:	781b      	ldrb	r3, [r3, #0]
   2530a:	2b00      	cmp	r3, #0
   2530c:	d10f      	bne.n	2532e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2530e:	230f      	movs	r3, #15
   25310:	18fb      	adds	r3, r7, r3
   25312:	781b      	ldrb	r3, [r3, #0]
   25314:	009b      	lsls	r3, r3, #2
   25316:	2210      	movs	r2, #16
   25318:	4694      	mov	ip, r2
   2531a:	44bc      	add	ip, r7
   2531c:	4463      	add	r3, ip
   2531e:	3b08      	subs	r3, #8
   25320:	681a      	ldr	r2, [r3, #0]
   25322:	230e      	movs	r3, #14
   25324:	18fb      	adds	r3, r7, r3
   25326:	781b      	ldrb	r3, [r3, #0]
   25328:	01db      	lsls	r3, r3, #7
   2532a:	18d3      	adds	r3, r2, r3
   2532c:	e000      	b.n	25330 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2532e:	2300      	movs	r3, #0
}
   25330:	0018      	movs	r0, r3
   25332:	46bd      	mov	sp, r7
   25334:	b004      	add	sp, #16
   25336:	bd80      	pop	{r7, pc}
   25338:	41004400 	.word	0x41004400

0002533c <port_get_group_from_gpio_pin>:
{
   2533c:	b580      	push	{r7, lr}
   2533e:	b082      	sub	sp, #8
   25340:	af00      	add	r7, sp, #0
   25342:	0002      	movs	r2, r0
   25344:	1dfb      	adds	r3, r7, #7
   25346:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   25348:	1dfb      	adds	r3, r7, #7
   2534a:	781b      	ldrb	r3, [r3, #0]
   2534c:	0018      	movs	r0, r3
   2534e:	4b03      	ldr	r3, [pc, #12]	; (2535c <port_get_group_from_gpio_pin+0x20>)
   25350:	4798      	blx	r3
   25352:	0003      	movs	r3, r0
}
   25354:	0018      	movs	r0, r3
   25356:	46bd      	mov	sp, r7
   25358:	b002      	add	sp, #8
   2535a:	bd80      	pop	{r7, pc}
   2535c:	000252dd 	.word	0x000252dd

00025360 <port_get_config_defaults>:
{
   25360:	b580      	push	{r7, lr}
   25362:	b082      	sub	sp, #8
   25364:	af00      	add	r7, sp, #0
   25366:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   25368:	687b      	ldr	r3, [r7, #4]
   2536a:	2200      	movs	r2, #0
   2536c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   2536e:	687b      	ldr	r3, [r7, #4]
   25370:	2201      	movs	r2, #1
   25372:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   25374:	687b      	ldr	r3, [r7, #4]
   25376:	2200      	movs	r2, #0
   25378:	709a      	strb	r2, [r3, #2]
}
   2537a:	46c0      	nop			; (mov r8, r8)
   2537c:	46bd      	mov	sp, r7
   2537e:	b002      	add	sp, #8
   25380:	bd80      	pop	{r7, pc}
	...

00025384 <port_pin_set_output_level>:
{
   25384:	b580      	push	{r7, lr}
   25386:	b084      	sub	sp, #16
   25388:	af00      	add	r7, sp, #0
   2538a:	0002      	movs	r2, r0
   2538c:	1dfb      	adds	r3, r7, #7
   2538e:	701a      	strb	r2, [r3, #0]
   25390:	1dbb      	adds	r3, r7, #6
   25392:	1c0a      	adds	r2, r1, #0
   25394:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   25396:	1dfb      	adds	r3, r7, #7
   25398:	781b      	ldrb	r3, [r3, #0]
   2539a:	0018      	movs	r0, r3
   2539c:	4b0d      	ldr	r3, [pc, #52]	; (253d4 <port_pin_set_output_level+0x50>)
   2539e:	4798      	blx	r3
   253a0:	0003      	movs	r3, r0
   253a2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   253a4:	1dfb      	adds	r3, r7, #7
   253a6:	781b      	ldrb	r3, [r3, #0]
   253a8:	221f      	movs	r2, #31
   253aa:	4013      	ands	r3, r2
   253ac:	2201      	movs	r2, #1
   253ae:	409a      	lsls	r2, r3
   253b0:	0013      	movs	r3, r2
   253b2:	60bb      	str	r3, [r7, #8]
	if (level) {
   253b4:	1dbb      	adds	r3, r7, #6
   253b6:	781b      	ldrb	r3, [r3, #0]
   253b8:	2b00      	cmp	r3, #0
   253ba:	d003      	beq.n	253c4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   253bc:	68fb      	ldr	r3, [r7, #12]
   253be:	68ba      	ldr	r2, [r7, #8]
   253c0:	619a      	str	r2, [r3, #24]
}
   253c2:	e002      	b.n	253ca <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   253c4:	68fb      	ldr	r3, [r7, #12]
   253c6:	68ba      	ldr	r2, [r7, #8]
   253c8:	615a      	str	r2, [r3, #20]
}
   253ca:	46c0      	nop			; (mov r8, r8)
   253cc:	46bd      	mov	sp, r7
   253ce:	b004      	add	sp, #16
   253d0:	bd80      	pop	{r7, pc}
   253d2:	46c0      	nop			; (mov r8, r8)
   253d4:	0002533d 	.word	0x0002533d

000253d8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   253d8:	b580      	push	{r7, lr}
   253da:	b082      	sub	sp, #8
   253dc:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   253de:	1d3b      	adds	r3, r7, #4
   253e0:	0018      	movs	r0, r3
   253e2:	4b0e      	ldr	r3, [pc, #56]	; (2541c <system_board_init+0x44>)
   253e4:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   253e6:	1d3b      	adds	r3, r7, #4
   253e8:	2201      	movs	r2, #1
   253ea:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   253ec:	1d3b      	adds	r3, r7, #4
   253ee:	0019      	movs	r1, r3
   253f0:	2017      	movs	r0, #23
   253f2:	4b0b      	ldr	r3, [pc, #44]	; (25420 <system_board_init+0x48>)
   253f4:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   253f6:	2101      	movs	r1, #1
   253f8:	2017      	movs	r0, #23
   253fa:	4b0a      	ldr	r3, [pc, #40]	; (25424 <system_board_init+0x4c>)
   253fc:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   253fe:	1d3b      	adds	r3, r7, #4
   25400:	2200      	movs	r2, #0
   25402:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   25404:	1d3b      	adds	r3, r7, #4
   25406:	2201      	movs	r2, #1
   25408:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   2540a:	1d3b      	adds	r3, r7, #4
   2540c:	0019      	movs	r1, r3
   2540e:	2037      	movs	r0, #55	; 0x37
   25410:	4b03      	ldr	r3, [pc, #12]	; (25420 <system_board_init+0x48>)
   25412:	4798      	blx	r3
}
   25414:	46c0      	nop			; (mov r8, r8)
   25416:	46bd      	mov	sp, r7
   25418:	b002      	add	sp, #8
   2541a:	bd80      	pop	{r7, pc}
   2541c:	00025361 	.word	0x00025361
   25420:	00025a4d 	.word	0x00025a4d
   25424:	00025385 	.word	0x00025385

00025428 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   25428:	b580      	push	{r7, lr}
   2542a:	b084      	sub	sp, #16
   2542c:	af00      	add	r7, sp, #0
   2542e:	0002      	movs	r2, r0
   25430:	1dfb      	adds	r3, r7, #7
   25432:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   25434:	230f      	movs	r3, #15
   25436:	18fb      	adds	r3, r7, r3
   25438:	1dfa      	adds	r2, r7, #7
   2543a:	7812      	ldrb	r2, [r2, #0]
   2543c:	0952      	lsrs	r2, r2, #5
   2543e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   25440:	230f      	movs	r3, #15
   25442:	18fb      	adds	r3, r7, r3
   25444:	781b      	ldrb	r3, [r3, #0]
   25446:	2b00      	cmp	r3, #0
   25448:	d10c      	bne.n	25464 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2544a:	4b09      	ldr	r3, [pc, #36]	; (25470 <_extint_get_eic_from_channel+0x48>)
   2544c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   2544e:	230f      	movs	r3, #15
   25450:	18fb      	adds	r3, r7, r3
   25452:	781b      	ldrb	r3, [r3, #0]
   25454:	009b      	lsls	r3, r3, #2
   25456:	2210      	movs	r2, #16
   25458:	4694      	mov	ip, r2
   2545a:	44bc      	add	ip, r7
   2545c:	4463      	add	r3, ip
   2545e:	3b08      	subs	r3, #8
   25460:	681b      	ldr	r3, [r3, #0]
   25462:	e000      	b.n	25466 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   25464:	2300      	movs	r3, #0
	}
}
   25466:	0018      	movs	r0, r3
   25468:	46bd      	mov	sp, r7
   2546a:	b004      	add	sp, #16
   2546c:	bd80      	pop	{r7, pc}
   2546e:	46c0      	nop			; (mov r8, r8)
   25470:	40001800 	.word	0x40001800

00025474 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   25474:	b580      	push	{r7, lr}
   25476:	b084      	sub	sp, #16
   25478:	af00      	add	r7, sp, #0
   2547a:	0002      	movs	r2, r0
   2547c:	1dfb      	adds	r3, r7, #7
   2547e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   25480:	1dfb      	adds	r3, r7, #7
   25482:	781b      	ldrb	r3, [r3, #0]
   25484:	0018      	movs	r0, r3
   25486:	4b0b      	ldr	r3, [pc, #44]	; (254b4 <extint_chan_is_detected+0x40>)
   25488:	4798      	blx	r3
   2548a:	0003      	movs	r3, r0
   2548c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   2548e:	1dfb      	adds	r3, r7, #7
   25490:	781b      	ldrb	r3, [r3, #0]
   25492:	221f      	movs	r2, #31
   25494:	4013      	ands	r3, r2
   25496:	2201      	movs	r2, #1
   25498:	409a      	lsls	r2, r3
   2549a:	0013      	movs	r3, r2
   2549c:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   2549e:	68fb      	ldr	r3, [r7, #12]
   254a0:	691b      	ldr	r3, [r3, #16]
   254a2:	68ba      	ldr	r2, [r7, #8]
   254a4:	4013      	ands	r3, r2
   254a6:	1e5a      	subs	r2, r3, #1
   254a8:	4193      	sbcs	r3, r2
   254aa:	b2db      	uxtb	r3, r3
}
   254ac:	0018      	movs	r0, r3
   254ae:	46bd      	mov	sp, r7
   254b0:	b004      	add	sp, #16
   254b2:	bd80      	pop	{r7, pc}
   254b4:	00025429 	.word	0x00025429

000254b8 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   254b8:	b580      	push	{r7, lr}
   254ba:	b084      	sub	sp, #16
   254bc:	af00      	add	r7, sp, #0
   254be:	0002      	movs	r2, r0
   254c0:	1dfb      	adds	r3, r7, #7
   254c2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   254c4:	1dfb      	adds	r3, r7, #7
   254c6:	781b      	ldrb	r3, [r3, #0]
   254c8:	0018      	movs	r0, r3
   254ca:	4b09      	ldr	r3, [pc, #36]	; (254f0 <extint_chan_clear_detected+0x38>)
   254cc:	4798      	blx	r3
   254ce:	0003      	movs	r3, r0
   254d0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   254d2:	1dfb      	adds	r3, r7, #7
   254d4:	781b      	ldrb	r3, [r3, #0]
   254d6:	221f      	movs	r2, #31
   254d8:	4013      	ands	r3, r2
   254da:	2201      	movs	r2, #1
   254dc:	409a      	lsls	r2, r3
   254de:	0013      	movs	r3, r2
   254e0:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   254e2:	68fb      	ldr	r3, [r7, #12]
   254e4:	68ba      	ldr	r2, [r7, #8]
   254e6:	611a      	str	r2, [r3, #16]
}
   254e8:	46c0      	nop			; (mov r8, r8)
   254ea:	46bd      	mov	sp, r7
   254ec:	b004      	add	sp, #16
   254ee:	bd80      	pop	{r7, pc}
   254f0:	00025429 	.word	0x00025429

000254f4 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   254f4:	b580      	push	{r7, lr}
   254f6:	b082      	sub	sp, #8
   254f8:	af00      	add	r7, sp, #0
   254fa:	6078      	str	r0, [r7, #4]
   254fc:	0008      	movs	r0, r1
   254fe:	0011      	movs	r1, r2
   25500:	1cfb      	adds	r3, r7, #3
   25502:	1c02      	adds	r2, r0, #0
   25504:	701a      	strb	r2, [r3, #0]
   25506:	1cbb      	adds	r3, r7, #2
   25508:	1c0a      	adds	r2, r1, #0
   2550a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   2550c:	1cbb      	adds	r3, r7, #2
   2550e:	781b      	ldrb	r3, [r3, #0]
   25510:	2b00      	cmp	r3, #0
   25512:	d001      	beq.n	25518 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   25514:	2317      	movs	r3, #23
   25516:	e019      	b.n	2554c <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   25518:	1cfb      	adds	r3, r7, #3
   2551a:	781a      	ldrb	r2, [r3, #0]
   2551c:	4b0d      	ldr	r3, [pc, #52]	; (25554 <extint_register_callback+0x60>)
   2551e:	0092      	lsls	r2, r2, #2
   25520:	58d3      	ldr	r3, [r2, r3]
   25522:	2b00      	cmp	r3, #0
   25524:	d107      	bne.n	25536 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   25526:	1cfb      	adds	r3, r7, #3
   25528:	781a      	ldrb	r2, [r3, #0]
   2552a:	4b0a      	ldr	r3, [pc, #40]	; (25554 <extint_register_callback+0x60>)
   2552c:	0092      	lsls	r2, r2, #2
   2552e:	6879      	ldr	r1, [r7, #4]
   25530:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   25532:	2300      	movs	r3, #0
   25534:	e00a      	b.n	2554c <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   25536:	1cfb      	adds	r3, r7, #3
   25538:	781a      	ldrb	r2, [r3, #0]
   2553a:	4b06      	ldr	r3, [pc, #24]	; (25554 <extint_register_callback+0x60>)
   2553c:	0092      	lsls	r2, r2, #2
   2553e:	58d2      	ldr	r2, [r2, r3]
   25540:	687b      	ldr	r3, [r7, #4]
   25542:	429a      	cmp	r2, r3
   25544:	d101      	bne.n	2554a <extint_register_callback+0x56>
		return STATUS_OK;
   25546:	2300      	movs	r3, #0
   25548:	e000      	b.n	2554c <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   2554a:	231d      	movs	r3, #29
}
   2554c:	0018      	movs	r0, r3
   2554e:	46bd      	mov	sp, r7
   25550:	b002      	add	sp, #8
   25552:	bd80      	pop	{r7, pc}
   25554:	20005b88 	.word	0x20005b88

00025558 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   25558:	b580      	push	{r7, lr}
   2555a:	b084      	sub	sp, #16
   2555c:	af00      	add	r7, sp, #0
   2555e:	0002      	movs	r2, r0
   25560:	1dfb      	adds	r3, r7, #7
   25562:	701a      	strb	r2, [r3, #0]
   25564:	1dbb      	adds	r3, r7, #6
   25566:	1c0a      	adds	r2, r1, #0
   25568:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   2556a:	1dbb      	adds	r3, r7, #6
   2556c:	781b      	ldrb	r3, [r3, #0]
   2556e:	2b00      	cmp	r3, #0
   25570:	d10e      	bne.n	25590 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   25572:	1dfb      	adds	r3, r7, #7
   25574:	781b      	ldrb	r3, [r3, #0]
   25576:	0018      	movs	r0, r3
   25578:	4b08      	ldr	r3, [pc, #32]	; (2559c <extint_chan_enable_callback+0x44>)
   2557a:	4798      	blx	r3
   2557c:	0003      	movs	r3, r0
   2557e:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   25580:	1dfb      	adds	r3, r7, #7
   25582:	781b      	ldrb	r3, [r3, #0]
   25584:	2201      	movs	r2, #1
   25586:	409a      	lsls	r2, r3
   25588:	68fb      	ldr	r3, [r7, #12]
   2558a:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   2558c:	2300      	movs	r3, #0
   2558e:	e000      	b.n	25592 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   25590:	2317      	movs	r3, #23
}
   25592:	0018      	movs	r0, r3
   25594:	46bd      	mov	sp, r7
   25596:	b004      	add	sp, #16
   25598:	bd80      	pop	{r7, pc}
   2559a:	46c0      	nop			; (mov r8, r8)
   2559c:	00025429 	.word	0x00025429

000255a0 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   255a0:	b580      	push	{r7, lr}
   255a2:	b084      	sub	sp, #16
   255a4:	af00      	add	r7, sp, #0
   255a6:	0002      	movs	r2, r0
   255a8:	1dfb      	adds	r3, r7, #7
   255aa:	701a      	strb	r2, [r3, #0]
   255ac:	1dbb      	adds	r3, r7, #6
   255ae:	1c0a      	adds	r2, r1, #0
   255b0:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   255b2:	1dbb      	adds	r3, r7, #6
   255b4:	781b      	ldrb	r3, [r3, #0]
   255b6:	2b00      	cmp	r3, #0
   255b8:	d10e      	bne.n	255d8 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   255ba:	1dfb      	adds	r3, r7, #7
   255bc:	781b      	ldrb	r3, [r3, #0]
   255be:	0018      	movs	r0, r3
   255c0:	4b08      	ldr	r3, [pc, #32]	; (255e4 <extint_chan_disable_callback+0x44>)
   255c2:	4798      	blx	r3
   255c4:	0003      	movs	r3, r0
   255c6:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   255c8:	1dfb      	adds	r3, r7, #7
   255ca:	781b      	ldrb	r3, [r3, #0]
   255cc:	2201      	movs	r2, #1
   255ce:	409a      	lsls	r2, r3
   255d0:	68fb      	ldr	r3, [r7, #12]
   255d2:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   255d4:	2300      	movs	r3, #0
   255d6:	e000      	b.n	255da <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   255d8:	2317      	movs	r3, #23
}
   255da:	0018      	movs	r0, r3
   255dc:	46bd      	mov	sp, r7
   255de:	b004      	add	sp, #16
   255e0:	bd80      	pop	{r7, pc}
   255e2:	46c0      	nop			; (mov r8, r8)
   255e4:	00025429 	.word	0x00025429

000255e8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   255e8:	b580      	push	{r7, lr}
   255ea:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   255ec:	4b15      	ldr	r3, [pc, #84]	; (25644 <EIC_Handler+0x5c>)
   255ee:	2200      	movs	r2, #0
   255f0:	701a      	strb	r2, [r3, #0]
   255f2:	e020      	b.n	25636 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   255f4:	4b13      	ldr	r3, [pc, #76]	; (25644 <EIC_Handler+0x5c>)
   255f6:	781b      	ldrb	r3, [r3, #0]
   255f8:	0018      	movs	r0, r3
   255fa:	4b13      	ldr	r3, [pc, #76]	; (25648 <EIC_Handler+0x60>)
   255fc:	4798      	blx	r3
   255fe:	1e03      	subs	r3, r0, #0
   25600:	d013      	beq.n	2562a <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   25602:	4b10      	ldr	r3, [pc, #64]	; (25644 <EIC_Handler+0x5c>)
   25604:	781b      	ldrb	r3, [r3, #0]
   25606:	0018      	movs	r0, r3
   25608:	4b10      	ldr	r3, [pc, #64]	; (2564c <EIC_Handler+0x64>)
   2560a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   2560c:	4b0d      	ldr	r3, [pc, #52]	; (25644 <EIC_Handler+0x5c>)
   2560e:	781b      	ldrb	r3, [r3, #0]
   25610:	001a      	movs	r2, r3
   25612:	4b0f      	ldr	r3, [pc, #60]	; (25650 <EIC_Handler+0x68>)
   25614:	0092      	lsls	r2, r2, #2
   25616:	58d3      	ldr	r3, [r2, r3]
   25618:	2b00      	cmp	r3, #0
   2561a:	d006      	beq.n	2562a <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   2561c:	4b09      	ldr	r3, [pc, #36]	; (25644 <EIC_Handler+0x5c>)
   2561e:	781b      	ldrb	r3, [r3, #0]
   25620:	001a      	movs	r2, r3
   25622:	4b0b      	ldr	r3, [pc, #44]	; (25650 <EIC_Handler+0x68>)
   25624:	0092      	lsls	r2, r2, #2
   25626:	58d3      	ldr	r3, [r2, r3]
   25628:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   2562a:	4b06      	ldr	r3, [pc, #24]	; (25644 <EIC_Handler+0x5c>)
   2562c:	781b      	ldrb	r3, [r3, #0]
   2562e:	3301      	adds	r3, #1
   25630:	b2da      	uxtb	r2, r3
   25632:	4b04      	ldr	r3, [pc, #16]	; (25644 <EIC_Handler+0x5c>)
   25634:	701a      	strb	r2, [r3, #0]
   25636:	4b03      	ldr	r3, [pc, #12]	; (25644 <EIC_Handler+0x5c>)
   25638:	781b      	ldrb	r3, [r3, #0]
   2563a:	2b0f      	cmp	r3, #15
   2563c:	d9da      	bls.n	255f4 <EIC_Handler+0xc>
			}
		}
	}
}
   2563e:	46c0      	nop			; (mov r8, r8)
   25640:	46bd      	mov	sp, r7
   25642:	bd80      	pop	{r7, pc}
   25644:	20005b84 	.word	0x20005b84
   25648:	00025475 	.word	0x00025475
   2564c:	000254b9 	.word	0x000254b9
   25650:	20005b88 	.word	0x20005b88

00025654 <system_gclk_chan_get_config_defaults>:
{
   25654:	b580      	push	{r7, lr}
   25656:	b082      	sub	sp, #8
   25658:	af00      	add	r7, sp, #0
   2565a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2565c:	687b      	ldr	r3, [r7, #4]
   2565e:	2200      	movs	r2, #0
   25660:	701a      	strb	r2, [r3, #0]
}
   25662:	46c0      	nop			; (mov r8, r8)
   25664:	46bd      	mov	sp, r7
   25666:	b002      	add	sp, #8
   25668:	bd80      	pop	{r7, pc}
	...

0002566c <system_apb_clock_set_mask>:
{
   2566c:	b580      	push	{r7, lr}
   2566e:	b082      	sub	sp, #8
   25670:	af00      	add	r7, sp, #0
   25672:	0002      	movs	r2, r0
   25674:	6039      	str	r1, [r7, #0]
   25676:	1dfb      	adds	r3, r7, #7
   25678:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2567a:	1dfb      	adds	r3, r7, #7
   2567c:	781b      	ldrb	r3, [r3, #0]
   2567e:	2b01      	cmp	r3, #1
   25680:	d00a      	beq.n	25698 <system_apb_clock_set_mask+0x2c>
   25682:	2b02      	cmp	r3, #2
   25684:	d00f      	beq.n	256a6 <system_apb_clock_set_mask+0x3a>
   25686:	2b00      	cmp	r3, #0
   25688:	d114      	bne.n	256b4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2568a:	4b0e      	ldr	r3, [pc, #56]	; (256c4 <system_apb_clock_set_mask+0x58>)
   2568c:	4a0d      	ldr	r2, [pc, #52]	; (256c4 <system_apb_clock_set_mask+0x58>)
   2568e:	6991      	ldr	r1, [r2, #24]
   25690:	683a      	ldr	r2, [r7, #0]
   25692:	430a      	orrs	r2, r1
   25694:	619a      	str	r2, [r3, #24]
			break;
   25696:	e00f      	b.n	256b8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   25698:	4b0a      	ldr	r3, [pc, #40]	; (256c4 <system_apb_clock_set_mask+0x58>)
   2569a:	4a0a      	ldr	r2, [pc, #40]	; (256c4 <system_apb_clock_set_mask+0x58>)
   2569c:	69d1      	ldr	r1, [r2, #28]
   2569e:	683a      	ldr	r2, [r7, #0]
   256a0:	430a      	orrs	r2, r1
   256a2:	61da      	str	r2, [r3, #28]
			break;
   256a4:	e008      	b.n	256b8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   256a6:	4b07      	ldr	r3, [pc, #28]	; (256c4 <system_apb_clock_set_mask+0x58>)
   256a8:	4a06      	ldr	r2, [pc, #24]	; (256c4 <system_apb_clock_set_mask+0x58>)
   256aa:	6a11      	ldr	r1, [r2, #32]
   256ac:	683a      	ldr	r2, [r7, #0]
   256ae:	430a      	orrs	r2, r1
   256b0:	621a      	str	r2, [r3, #32]
			break;
   256b2:	e001      	b.n	256b8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   256b4:	2317      	movs	r3, #23
   256b6:	e000      	b.n	256ba <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   256b8:	2300      	movs	r3, #0
}
   256ba:	0018      	movs	r0, r3
   256bc:	46bd      	mov	sp, r7
   256be:	b002      	add	sp, #8
   256c0:	bd80      	pop	{r7, pc}
   256c2:	46c0      	nop			; (mov r8, r8)
   256c4:	40000400 	.word	0x40000400

000256c8 <system_pinmux_get_config_defaults>:
{
   256c8:	b580      	push	{r7, lr}
   256ca:	b082      	sub	sp, #8
   256cc:	af00      	add	r7, sp, #0
   256ce:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   256d0:	687b      	ldr	r3, [r7, #4]
   256d2:	2280      	movs	r2, #128	; 0x80
   256d4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   256d6:	687b      	ldr	r3, [r7, #4]
   256d8:	2200      	movs	r2, #0
   256da:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   256dc:	687b      	ldr	r3, [r7, #4]
   256de:	2201      	movs	r2, #1
   256e0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   256e2:	687b      	ldr	r3, [r7, #4]
   256e4:	2200      	movs	r2, #0
   256e6:	70da      	strb	r2, [r3, #3]
}
   256e8:	46c0      	nop			; (mov r8, r8)
   256ea:	46bd      	mov	sp, r7
   256ec:	b002      	add	sp, #8
   256ee:	bd80      	pop	{r7, pc}

000256f0 <system_interrupt_enable>:
{
   256f0:	b580      	push	{r7, lr}
   256f2:	b082      	sub	sp, #8
   256f4:	af00      	add	r7, sp, #0
   256f6:	0002      	movs	r2, r0
   256f8:	1dfb      	adds	r3, r7, #7
   256fa:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   256fc:	4b06      	ldr	r3, [pc, #24]	; (25718 <system_interrupt_enable+0x28>)
   256fe:	1dfa      	adds	r2, r7, #7
   25700:	7812      	ldrb	r2, [r2, #0]
   25702:	0011      	movs	r1, r2
   25704:	221f      	movs	r2, #31
   25706:	400a      	ands	r2, r1
   25708:	2101      	movs	r1, #1
   2570a:	4091      	lsls	r1, r2
   2570c:	000a      	movs	r2, r1
   2570e:	601a      	str	r2, [r3, #0]
}
   25710:	46c0      	nop			; (mov r8, r8)
   25712:	46bd      	mov	sp, r7
   25714:	b002      	add	sp, #8
   25716:	bd80      	pop	{r7, pc}
   25718:	e000e100 	.word	0xe000e100

0002571c <_extint_get_eic_from_channel>:
{
   2571c:	b580      	push	{r7, lr}
   2571e:	b084      	sub	sp, #16
   25720:	af00      	add	r7, sp, #0
   25722:	0002      	movs	r2, r0
   25724:	1dfb      	adds	r3, r7, #7
   25726:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   25728:	230f      	movs	r3, #15
   2572a:	18fb      	adds	r3, r7, r3
   2572c:	1dfa      	adds	r2, r7, #7
   2572e:	7812      	ldrb	r2, [r2, #0]
   25730:	0952      	lsrs	r2, r2, #5
   25732:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   25734:	230f      	movs	r3, #15
   25736:	18fb      	adds	r3, r7, r3
   25738:	781b      	ldrb	r3, [r3, #0]
   2573a:	2b00      	cmp	r3, #0
   2573c:	d10c      	bne.n	25758 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2573e:	4b09      	ldr	r3, [pc, #36]	; (25764 <_extint_get_eic_from_channel+0x48>)
   25740:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   25742:	230f      	movs	r3, #15
   25744:	18fb      	adds	r3, r7, r3
   25746:	781b      	ldrb	r3, [r3, #0]
   25748:	009b      	lsls	r3, r3, #2
   2574a:	2210      	movs	r2, #16
   2574c:	4694      	mov	ip, r2
   2574e:	44bc      	add	ip, r7
   25750:	4463      	add	r3, ip
   25752:	3b08      	subs	r3, #8
   25754:	681b      	ldr	r3, [r3, #0]
   25756:	e000      	b.n	2575a <_extint_get_eic_from_channel+0x3e>
		return NULL;
   25758:	2300      	movs	r3, #0
}
   2575a:	0018      	movs	r0, r3
   2575c:	46bd      	mov	sp, r7
   2575e:	b004      	add	sp, #16
   25760:	bd80      	pop	{r7, pc}
   25762:	46c0      	nop			; (mov r8, r8)
   25764:	40001800 	.word	0x40001800

00025768 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   25768:	b580      	push	{r7, lr}
   2576a:	b082      	sub	sp, #8
   2576c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2576e:	4b0f      	ldr	r3, [pc, #60]	; (257ac <extint_is_syncing+0x44>)
   25770:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   25772:	2300      	movs	r3, #0
   25774:	607b      	str	r3, [r7, #4]
   25776:	e011      	b.n	2579c <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   25778:	687b      	ldr	r3, [r7, #4]
   2577a:	009b      	lsls	r3, r3, #2
   2577c:	2208      	movs	r2, #8
   2577e:	4694      	mov	ip, r2
   25780:	44bc      	add	ip, r7
   25782:	4463      	add	r3, ip
   25784:	3b08      	subs	r3, #8
   25786:	681b      	ldr	r3, [r3, #0]
   25788:	785b      	ldrb	r3, [r3, #1]
   2578a:	b2db      	uxtb	r3, r3
   2578c:	b25b      	sxtb	r3, r3
   2578e:	2b00      	cmp	r3, #0
   25790:	da01      	bge.n	25796 <extint_is_syncing+0x2e>
			return true;
   25792:	2301      	movs	r3, #1
   25794:	e006      	b.n	257a4 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   25796:	687b      	ldr	r3, [r7, #4]
   25798:	3301      	adds	r3, #1
   2579a:	607b      	str	r3, [r7, #4]
   2579c:	687b      	ldr	r3, [r7, #4]
   2579e:	2b00      	cmp	r3, #0
   257a0:	d0ea      	beq.n	25778 <extint_is_syncing+0x10>
		}
	}
	return false;
   257a2:	2300      	movs	r3, #0
}
   257a4:	0018      	movs	r0, r3
   257a6:	46bd      	mov	sp, r7
   257a8:	b002      	add	sp, #8
   257aa:	bd80      	pop	{r7, pc}
   257ac:	40001800 	.word	0x40001800

000257b0 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   257b0:	b580      	push	{r7, lr}
   257b2:	b084      	sub	sp, #16
   257b4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   257b6:	4b2d      	ldr	r3, [pc, #180]	; (2586c <_system_extint_init+0xbc>)
   257b8:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   257ba:	2140      	movs	r1, #64	; 0x40
   257bc:	2000      	movs	r0, #0
   257be:	4b2c      	ldr	r3, [pc, #176]	; (25870 <_system_extint_init+0xc0>)
   257c0:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   257c2:	003b      	movs	r3, r7
   257c4:	0018      	movs	r0, r3
   257c6:	4b2b      	ldr	r3, [pc, #172]	; (25874 <_system_extint_init+0xc4>)
   257c8:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   257ca:	003b      	movs	r3, r7
   257cc:	2200      	movs	r2, #0
   257ce:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   257d0:	003b      	movs	r3, r7
   257d2:	0019      	movs	r1, r3
   257d4:	2005      	movs	r0, #5
   257d6:	4b28      	ldr	r3, [pc, #160]	; (25878 <_system_extint_init+0xc8>)
   257d8:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   257da:	2005      	movs	r0, #5
   257dc:	4b27      	ldr	r3, [pc, #156]	; (2587c <_system_extint_init+0xcc>)
   257de:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   257e0:	2300      	movs	r3, #0
   257e2:	60fb      	str	r3, [r7, #12]
   257e4:	e018      	b.n	25818 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   257e6:	68fb      	ldr	r3, [r7, #12]
   257e8:	009b      	lsls	r3, r3, #2
   257ea:	2210      	movs	r2, #16
   257ec:	4694      	mov	ip, r2
   257ee:	44bc      	add	ip, r7
   257f0:	4463      	add	r3, ip
   257f2:	3b0c      	subs	r3, #12
   257f4:	681a      	ldr	r2, [r3, #0]
   257f6:	68fb      	ldr	r3, [r7, #12]
   257f8:	009b      	lsls	r3, r3, #2
   257fa:	2110      	movs	r1, #16
   257fc:	468c      	mov	ip, r1
   257fe:	44bc      	add	ip, r7
   25800:	4463      	add	r3, ip
   25802:	3b0c      	subs	r3, #12
   25804:	681b      	ldr	r3, [r3, #0]
   25806:	781b      	ldrb	r3, [r3, #0]
   25808:	b2db      	uxtb	r3, r3
   2580a:	2101      	movs	r1, #1
   2580c:	430b      	orrs	r3, r1
   2580e:	b2db      	uxtb	r3, r3
   25810:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   25812:	68fb      	ldr	r3, [r7, #12]
   25814:	3301      	adds	r3, #1
   25816:	60fb      	str	r3, [r7, #12]
   25818:	68fb      	ldr	r3, [r7, #12]
   2581a:	2b00      	cmp	r3, #0
   2581c:	d0e3      	beq.n	257e6 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   2581e:	46c0      	nop			; (mov r8, r8)
   25820:	4b17      	ldr	r3, [pc, #92]	; (25880 <_system_extint_init+0xd0>)
   25822:	4798      	blx	r3
   25824:	1e03      	subs	r3, r0, #0
   25826:	d1fb      	bne.n	25820 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   25828:	230b      	movs	r3, #11
   2582a:	18fb      	adds	r3, r7, r3
   2582c:	2200      	movs	r2, #0
   2582e:	701a      	strb	r2, [r3, #0]
   25830:	e00d      	b.n	2584e <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   25832:	230b      	movs	r3, #11
   25834:	18fb      	adds	r3, r7, r3
   25836:	781a      	ldrb	r2, [r3, #0]
   25838:	4b12      	ldr	r3, [pc, #72]	; (25884 <_system_extint_init+0xd4>)
   2583a:	0092      	lsls	r2, r2, #2
   2583c:	2100      	movs	r1, #0
   2583e:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   25840:	230b      	movs	r3, #11
   25842:	18fb      	adds	r3, r7, r3
   25844:	781a      	ldrb	r2, [r3, #0]
   25846:	230b      	movs	r3, #11
   25848:	18fb      	adds	r3, r7, r3
   2584a:	3201      	adds	r2, #1
   2584c:	701a      	strb	r2, [r3, #0]
   2584e:	230b      	movs	r3, #11
   25850:	18fb      	adds	r3, r7, r3
   25852:	781b      	ldrb	r3, [r3, #0]
   25854:	2b0f      	cmp	r3, #15
   25856:	d9ec      	bls.n	25832 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   25858:	2004      	movs	r0, #4
   2585a:	4b0b      	ldr	r3, [pc, #44]	; (25888 <_system_extint_init+0xd8>)
   2585c:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   2585e:	4b0b      	ldr	r3, [pc, #44]	; (2588c <_system_extint_init+0xdc>)
   25860:	4798      	blx	r3
}
   25862:	46c0      	nop			; (mov r8, r8)
   25864:	46bd      	mov	sp, r7
   25866:	b004      	add	sp, #16
   25868:	bd80      	pop	{r7, pc}
   2586a:	46c0      	nop			; (mov r8, r8)
   2586c:	40001800 	.word	0x40001800
   25870:	0002566d 	.word	0x0002566d
   25874:	00025655 	.word	0x00025655
   25878:	00028edd 	.word	0x00028edd
   2587c:	00028f21 	.word	0x00028f21
   25880:	00025769 	.word	0x00025769
   25884:	20005b88 	.word	0x20005b88
   25888:	000256f1 	.word	0x000256f1
   2588c:	00025891 	.word	0x00025891

00025890 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   25890:	b580      	push	{r7, lr}
   25892:	b082      	sub	sp, #8
   25894:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   25896:	4b15      	ldr	r3, [pc, #84]	; (258ec <_extint_enable+0x5c>)
   25898:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2589a:	2300      	movs	r3, #0
   2589c:	607b      	str	r3, [r7, #4]
   2589e:	e018      	b.n	258d2 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   258a0:	687b      	ldr	r3, [r7, #4]
   258a2:	009b      	lsls	r3, r3, #2
   258a4:	2208      	movs	r2, #8
   258a6:	4694      	mov	ip, r2
   258a8:	44bc      	add	ip, r7
   258aa:	4463      	add	r3, ip
   258ac:	3b08      	subs	r3, #8
   258ae:	681a      	ldr	r2, [r3, #0]
   258b0:	687b      	ldr	r3, [r7, #4]
   258b2:	009b      	lsls	r3, r3, #2
   258b4:	2108      	movs	r1, #8
   258b6:	468c      	mov	ip, r1
   258b8:	44bc      	add	ip, r7
   258ba:	4463      	add	r3, ip
   258bc:	3b08      	subs	r3, #8
   258be:	681b      	ldr	r3, [r3, #0]
   258c0:	781b      	ldrb	r3, [r3, #0]
   258c2:	b2db      	uxtb	r3, r3
   258c4:	2102      	movs	r1, #2
   258c6:	430b      	orrs	r3, r1
   258c8:	b2db      	uxtb	r3, r3
   258ca:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   258cc:	687b      	ldr	r3, [r7, #4]
   258ce:	3301      	adds	r3, #1
   258d0:	607b      	str	r3, [r7, #4]
   258d2:	687b      	ldr	r3, [r7, #4]
   258d4:	2b00      	cmp	r3, #0
   258d6:	d0e3      	beq.n	258a0 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   258d8:	46c0      	nop			; (mov r8, r8)
   258da:	4b05      	ldr	r3, [pc, #20]	; (258f0 <_extint_enable+0x60>)
   258dc:	4798      	blx	r3
   258de:	1e03      	subs	r3, r0, #0
   258e0:	d1fb      	bne.n	258da <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   258e2:	46c0      	nop			; (mov r8, r8)
   258e4:	46bd      	mov	sp, r7
   258e6:	b002      	add	sp, #8
   258e8:	bd80      	pop	{r7, pc}
   258ea:	46c0      	nop			; (mov r8, r8)
   258ec:	40001800 	.word	0x40001800
   258f0:	00025769 	.word	0x00025769

000258f4 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   258f4:	b580      	push	{r7, lr}
   258f6:	b082      	sub	sp, #8
   258f8:	af00      	add	r7, sp, #0
   258fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   258fc:	687b      	ldr	r3, [r7, #4]
   258fe:	2200      	movs	r2, #0
   25900:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   25902:	687b      	ldr	r3, [r7, #4]
   25904:	2200      	movs	r2, #0
   25906:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   25908:	687b      	ldr	r3, [r7, #4]
   2590a:	2201      	movs	r2, #1
   2590c:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   2590e:	687b      	ldr	r3, [r7, #4]
   25910:	2201      	movs	r2, #1
   25912:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   25914:	687b      	ldr	r3, [r7, #4]
   25916:	2200      	movs	r2, #0
   25918:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   2591a:	687b      	ldr	r3, [r7, #4]
   2591c:	2202      	movs	r2, #2
   2591e:	72da      	strb	r2, [r3, #11]
}
   25920:	46c0      	nop			; (mov r8, r8)
   25922:	46bd      	mov	sp, r7
   25924:	b002      	add	sp, #8
   25926:	bd80      	pop	{r7, pc}

00025928 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   25928:	b580      	push	{r7, lr}
   2592a:	b086      	sub	sp, #24
   2592c:	af00      	add	r7, sp, #0
   2592e:	0002      	movs	r2, r0
   25930:	6039      	str	r1, [r7, #0]
   25932:	1dfb      	adds	r3, r7, #7
   25934:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   25936:	2308      	movs	r3, #8
   25938:	18fb      	adds	r3, r7, r3
   2593a:	0018      	movs	r0, r3
   2593c:	4b36      	ldr	r3, [pc, #216]	; (25a18 <extint_chan_set_config+0xf0>)
   2593e:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   25940:	683b      	ldr	r3, [r7, #0]
   25942:	685b      	ldr	r3, [r3, #4]
   25944:	b2da      	uxtb	r2, r3
   25946:	2308      	movs	r3, #8
   25948:	18fb      	adds	r3, r7, r3
   2594a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2594c:	2308      	movs	r3, #8
   2594e:	18fb      	adds	r3, r7, r3
   25950:	2200      	movs	r2, #0
   25952:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   25954:	683b      	ldr	r3, [r7, #0]
   25956:	7a1a      	ldrb	r2, [r3, #8]
   25958:	2308      	movs	r3, #8
   2595a:	18fb      	adds	r3, r7, r3
   2595c:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   2595e:	683b      	ldr	r3, [r7, #0]
   25960:	681b      	ldr	r3, [r3, #0]
   25962:	b2db      	uxtb	r3, r3
   25964:	2208      	movs	r2, #8
   25966:	18ba      	adds	r2, r7, r2
   25968:	0011      	movs	r1, r2
   2596a:	0018      	movs	r0, r3
   2596c:	4b2b      	ldr	r3, [pc, #172]	; (25a1c <extint_chan_set_config+0xf4>)
   2596e:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   25970:	1dfb      	adds	r3, r7, #7
   25972:	781b      	ldrb	r3, [r3, #0]
   25974:	0018      	movs	r0, r3
   25976:	4b2a      	ldr	r3, [pc, #168]	; (25a20 <extint_chan_set_config+0xf8>)
   25978:	4798      	blx	r3
   2597a:	0003      	movs	r3, r0
   2597c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   2597e:	1dfb      	adds	r3, r7, #7
   25980:	781b      	ldrb	r3, [r3, #0]
   25982:	2207      	movs	r2, #7
   25984:	4013      	ands	r3, r2
   25986:	009b      	lsls	r3, r3, #2
   25988:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   2598a:	683b      	ldr	r3, [r7, #0]
   2598c:	7adb      	ldrb	r3, [r3, #11]
   2598e:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   25990:	683b      	ldr	r3, [r7, #0]
   25992:	7a9b      	ldrb	r3, [r3, #10]
   25994:	2b00      	cmp	r3, #0
   25996:	d003      	beq.n	259a0 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   25998:	697b      	ldr	r3, [r7, #20]
   2599a:	2208      	movs	r2, #8
   2599c:	4313      	orrs	r3, r2
   2599e:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   259a0:	1dfb      	adds	r3, r7, #7
   259a2:	781b      	ldrb	r3, [r3, #0]
   259a4:	08db      	lsrs	r3, r3, #3
   259a6:	b2db      	uxtb	r3, r3
   259a8:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   259aa:	1dfb      	adds	r3, r7, #7
   259ac:	781b      	ldrb	r3, [r3, #0]
   259ae:	08db      	lsrs	r3, r3, #3
   259b0:	b2db      	uxtb	r3, r3
   259b2:	001a      	movs	r2, r3
   259b4:	693b      	ldr	r3, [r7, #16]
   259b6:	3206      	adds	r2, #6
   259b8:	0092      	lsls	r2, r2, #2
   259ba:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   259bc:	210f      	movs	r1, #15
   259be:	68fa      	ldr	r2, [r7, #12]
   259c0:	4091      	lsls	r1, r2
   259c2:	000a      	movs	r2, r1
   259c4:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   259c6:	401a      	ands	r2, r3
			(new_config << config_pos);
   259c8:	6979      	ldr	r1, [r7, #20]
   259ca:	68fb      	ldr	r3, [r7, #12]
   259cc:	4099      	lsls	r1, r3
   259ce:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   259d0:	431a      	orrs	r2, r3
   259d2:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   259d4:	693b      	ldr	r3, [r7, #16]
   259d6:	1d82      	adds	r2, r0, #6
   259d8:	0092      	lsls	r2, r2, #2
   259da:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   259dc:	683b      	ldr	r3, [r7, #0]
   259de:	7a5b      	ldrb	r3, [r3, #9]
   259e0:	2b00      	cmp	r3, #0
   259e2:	d00a      	beq.n	259fa <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   259e4:	693b      	ldr	r3, [r7, #16]
   259e6:	695a      	ldr	r2, [r3, #20]
   259e8:	1dfb      	adds	r3, r7, #7
   259ea:	781b      	ldrb	r3, [r3, #0]
   259ec:	2101      	movs	r1, #1
   259ee:	4099      	lsls	r1, r3
   259f0:	000b      	movs	r3, r1
   259f2:	431a      	orrs	r2, r3
   259f4:	693b      	ldr	r3, [r7, #16]
   259f6:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   259f8:	e00a      	b.n	25a10 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   259fa:	693b      	ldr	r3, [r7, #16]
   259fc:	695b      	ldr	r3, [r3, #20]
   259fe:	1dfa      	adds	r2, r7, #7
   25a00:	7812      	ldrb	r2, [r2, #0]
   25a02:	2101      	movs	r1, #1
   25a04:	4091      	lsls	r1, r2
   25a06:	000a      	movs	r2, r1
   25a08:	43d2      	mvns	r2, r2
   25a0a:	401a      	ands	r2, r3
   25a0c:	693b      	ldr	r3, [r7, #16]
   25a0e:	615a      	str	r2, [r3, #20]
}
   25a10:	46c0      	nop			; (mov r8, r8)
   25a12:	46bd      	mov	sp, r7
   25a14:	b006      	add	sp, #24
   25a16:	bd80      	pop	{r7, pc}
   25a18:	000256c9 	.word	0x000256c9
   25a1c:	0002923d 	.word	0x0002923d
   25a20:	0002571d 	.word	0x0002571d

00025a24 <system_pinmux_get_config_defaults>:
{
   25a24:	b580      	push	{r7, lr}
   25a26:	b082      	sub	sp, #8
   25a28:	af00      	add	r7, sp, #0
   25a2a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   25a2c:	687b      	ldr	r3, [r7, #4]
   25a2e:	2280      	movs	r2, #128	; 0x80
   25a30:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   25a32:	687b      	ldr	r3, [r7, #4]
   25a34:	2200      	movs	r2, #0
   25a36:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   25a38:	687b      	ldr	r3, [r7, #4]
   25a3a:	2201      	movs	r2, #1
   25a3c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   25a3e:	687b      	ldr	r3, [r7, #4]
   25a40:	2200      	movs	r2, #0
   25a42:	70da      	strb	r2, [r3, #3]
}
   25a44:	46c0      	nop			; (mov r8, r8)
   25a46:	46bd      	mov	sp, r7
   25a48:	b002      	add	sp, #8
   25a4a:	bd80      	pop	{r7, pc}

00025a4c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   25a4c:	b580      	push	{r7, lr}
   25a4e:	b084      	sub	sp, #16
   25a50:	af00      	add	r7, sp, #0
   25a52:	0002      	movs	r2, r0
   25a54:	6039      	str	r1, [r7, #0]
   25a56:	1dfb      	adds	r3, r7, #7
   25a58:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   25a5a:	230c      	movs	r3, #12
   25a5c:	18fb      	adds	r3, r7, r3
   25a5e:	0018      	movs	r0, r3
   25a60:	4b10      	ldr	r3, [pc, #64]	; (25aa4 <port_pin_set_config+0x58>)
   25a62:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   25a64:	230c      	movs	r3, #12
   25a66:	18fb      	adds	r3, r7, r3
   25a68:	2280      	movs	r2, #128	; 0x80
   25a6a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   25a6c:	683b      	ldr	r3, [r7, #0]
   25a6e:	781a      	ldrb	r2, [r3, #0]
   25a70:	230c      	movs	r3, #12
   25a72:	18fb      	adds	r3, r7, r3
   25a74:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   25a76:	683b      	ldr	r3, [r7, #0]
   25a78:	785a      	ldrb	r2, [r3, #1]
   25a7a:	230c      	movs	r3, #12
   25a7c:	18fb      	adds	r3, r7, r3
   25a7e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   25a80:	683b      	ldr	r3, [r7, #0]
   25a82:	789a      	ldrb	r2, [r3, #2]
   25a84:	230c      	movs	r3, #12
   25a86:	18fb      	adds	r3, r7, r3
   25a88:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   25a8a:	230c      	movs	r3, #12
   25a8c:	18fa      	adds	r2, r7, r3
   25a8e:	1dfb      	adds	r3, r7, #7
   25a90:	781b      	ldrb	r3, [r3, #0]
   25a92:	0011      	movs	r1, r2
   25a94:	0018      	movs	r0, r3
   25a96:	4b04      	ldr	r3, [pc, #16]	; (25aa8 <port_pin_set_config+0x5c>)
   25a98:	4798      	blx	r3
}
   25a9a:	46c0      	nop			; (mov r8, r8)
   25a9c:	46bd      	mov	sp, r7
   25a9e:	b004      	add	sp, #16
   25aa0:	bd80      	pop	{r7, pc}
   25aa2:	46c0      	nop			; (mov r8, r8)
   25aa4:	00025a25 	.word	0x00025a25
   25aa8:	0002923d 	.word	0x0002923d

00025aac <system_gclk_chan_get_config_defaults>:
{
   25aac:	b580      	push	{r7, lr}
   25aae:	b082      	sub	sp, #8
   25ab0:	af00      	add	r7, sp, #0
   25ab2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   25ab4:	687b      	ldr	r3, [r7, #4]
   25ab6:	2200      	movs	r2, #0
   25ab8:	701a      	strb	r2, [r3, #0]
}
   25aba:	46c0      	nop			; (mov r8, r8)
   25abc:	46bd      	mov	sp, r7
   25abe:	b002      	add	sp, #8
   25ac0:	bd80      	pop	{r7, pc}
	...

00025ac4 <system_apb_clock_set_mask>:
{
   25ac4:	b580      	push	{r7, lr}
   25ac6:	b082      	sub	sp, #8
   25ac8:	af00      	add	r7, sp, #0
   25aca:	0002      	movs	r2, r0
   25acc:	6039      	str	r1, [r7, #0]
   25ace:	1dfb      	adds	r3, r7, #7
   25ad0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   25ad2:	1dfb      	adds	r3, r7, #7
   25ad4:	781b      	ldrb	r3, [r3, #0]
   25ad6:	2b01      	cmp	r3, #1
   25ad8:	d00a      	beq.n	25af0 <system_apb_clock_set_mask+0x2c>
   25ada:	2b02      	cmp	r3, #2
   25adc:	d00f      	beq.n	25afe <system_apb_clock_set_mask+0x3a>
   25ade:	2b00      	cmp	r3, #0
   25ae0:	d114      	bne.n	25b0c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   25ae2:	4b0e      	ldr	r3, [pc, #56]	; (25b1c <system_apb_clock_set_mask+0x58>)
   25ae4:	4a0d      	ldr	r2, [pc, #52]	; (25b1c <system_apb_clock_set_mask+0x58>)
   25ae6:	6991      	ldr	r1, [r2, #24]
   25ae8:	683a      	ldr	r2, [r7, #0]
   25aea:	430a      	orrs	r2, r1
   25aec:	619a      	str	r2, [r3, #24]
			break;
   25aee:	e00f      	b.n	25b10 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   25af0:	4b0a      	ldr	r3, [pc, #40]	; (25b1c <system_apb_clock_set_mask+0x58>)
   25af2:	4a0a      	ldr	r2, [pc, #40]	; (25b1c <system_apb_clock_set_mask+0x58>)
   25af4:	69d1      	ldr	r1, [r2, #28]
   25af6:	683a      	ldr	r2, [r7, #0]
   25af8:	430a      	orrs	r2, r1
   25afa:	61da      	str	r2, [r3, #28]
			break;
   25afc:	e008      	b.n	25b10 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   25afe:	4b07      	ldr	r3, [pc, #28]	; (25b1c <system_apb_clock_set_mask+0x58>)
   25b00:	4a06      	ldr	r2, [pc, #24]	; (25b1c <system_apb_clock_set_mask+0x58>)
   25b02:	6a11      	ldr	r1, [r2, #32]
   25b04:	683a      	ldr	r2, [r7, #0]
   25b06:	430a      	orrs	r2, r1
   25b08:	621a      	str	r2, [r3, #32]
			break;
   25b0a:	e001      	b.n	25b10 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   25b0c:	2317      	movs	r3, #23
   25b0e:	e000      	b.n	25b12 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   25b10:	2300      	movs	r3, #0
}
   25b12:	0018      	movs	r0, r3
   25b14:	46bd      	mov	sp, r7
   25b16:	b002      	add	sp, #8
   25b18:	bd80      	pop	{r7, pc}
   25b1a:	46c0      	nop			; (mov r8, r8)
   25b1c:	40000400 	.word	0x40000400

00025b20 <system_interrupt_enable>:
{
   25b20:	b580      	push	{r7, lr}
   25b22:	b082      	sub	sp, #8
   25b24:	af00      	add	r7, sp, #0
   25b26:	0002      	movs	r2, r0
   25b28:	1dfb      	adds	r3, r7, #7
   25b2a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   25b2c:	4b06      	ldr	r3, [pc, #24]	; (25b48 <system_interrupt_enable+0x28>)
   25b2e:	1dfa      	adds	r2, r7, #7
   25b30:	7812      	ldrb	r2, [r2, #0]
   25b32:	0011      	movs	r1, r2
   25b34:	221f      	movs	r2, #31
   25b36:	400a      	ands	r2, r1
   25b38:	2101      	movs	r1, #1
   25b3a:	4091      	lsls	r1, r2
   25b3c:	000a      	movs	r2, r1
   25b3e:	601a      	str	r2, [r3, #0]
}
   25b40:	46c0      	nop			; (mov r8, r8)
   25b42:	46bd      	mov	sp, r7
   25b44:	b002      	add	sp, #8
   25b46:	bd80      	pop	{r7, pc}
   25b48:	e000e100 	.word	0xe000e100

00025b4c <system_interrupt_disable>:
{
   25b4c:	b580      	push	{r7, lr}
   25b4e:	b082      	sub	sp, #8
   25b50:	af00      	add	r7, sp, #0
   25b52:	0002      	movs	r2, r0
   25b54:	1dfb      	adds	r3, r7, #7
   25b56:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   25b58:	4a07      	ldr	r2, [pc, #28]	; (25b78 <system_interrupt_disable+0x2c>)
   25b5a:	1dfb      	adds	r3, r7, #7
   25b5c:	781b      	ldrb	r3, [r3, #0]
   25b5e:	0019      	movs	r1, r3
   25b60:	231f      	movs	r3, #31
   25b62:	400b      	ands	r3, r1
   25b64:	2101      	movs	r1, #1
   25b66:	4099      	lsls	r1, r3
   25b68:	000b      	movs	r3, r1
   25b6a:	0019      	movs	r1, r3
   25b6c:	2380      	movs	r3, #128	; 0x80
   25b6e:	50d1      	str	r1, [r2, r3]
}
   25b70:	46c0      	nop			; (mov r8, r8)
   25b72:	46bd      	mov	sp, r7
   25b74:	b002      	add	sp, #8
   25b76:	bd80      	pop	{r7, pc}
   25b78:	e000e100 	.word	0xe000e100

00025b7c <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   25b7c:	b580      	push	{r7, lr}
   25b7e:	b084      	sub	sp, #16
   25b80:	af00      	add	r7, sp, #0
   25b82:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25b84:	687b      	ldr	r3, [r7, #4]
   25b86:	681b      	ldr	r3, [r3, #0]
   25b88:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   25b8a:	68fb      	ldr	r3, [r7, #12]
   25b8c:	7a9b      	ldrb	r3, [r3, #10]
   25b8e:	b2db      	uxtb	r3, r3
   25b90:	b25b      	sxtb	r3, r3
   25b92:	2b00      	cmp	r3, #0
   25b94:	da01      	bge.n	25b9a <rtc_calendar_is_syncing+0x1e>
                return true;
   25b96:	2301      	movs	r3, #1
   25b98:	e000      	b.n	25b9c <rtc_calendar_is_syncing+0x20>
        }

        return false;
   25b9a:	2300      	movs	r3, #0
}
   25b9c:	0018      	movs	r0, r3
   25b9e:	46bd      	mov	sp, r7
   25ba0:	b004      	add	sp, #16
   25ba2:	bd80      	pop	{r7, pc}

00025ba4 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   25ba4:	b580      	push	{r7, lr}
   25ba6:	b084      	sub	sp, #16
   25ba8:	af00      	add	r7, sp, #0
   25baa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25bac:	687b      	ldr	r3, [r7, #4]
   25bae:	681b      	ldr	r3, [r3, #0]
   25bb0:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   25bb2:	2003      	movs	r0, #3
   25bb4:	4b0a      	ldr	r3, [pc, #40]	; (25be0 <rtc_calendar_enable+0x3c>)
   25bb6:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   25bb8:	46c0      	nop			; (mov r8, r8)
   25bba:	687b      	ldr	r3, [r7, #4]
   25bbc:	0018      	movs	r0, r3
   25bbe:	4b09      	ldr	r3, [pc, #36]	; (25be4 <rtc_calendar_enable+0x40>)
   25bc0:	4798      	blx	r3
   25bc2:	1e03      	subs	r3, r0, #0
   25bc4:	d1f9      	bne.n	25bba <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   25bc6:	68fb      	ldr	r3, [r7, #12]
   25bc8:	881b      	ldrh	r3, [r3, #0]
   25bca:	b29b      	uxth	r3, r3
   25bcc:	2202      	movs	r2, #2
   25bce:	4313      	orrs	r3, r2
   25bd0:	b29a      	uxth	r2, r3
   25bd2:	68fb      	ldr	r3, [r7, #12]
   25bd4:	801a      	strh	r2, [r3, #0]
}
   25bd6:	46c0      	nop			; (mov r8, r8)
   25bd8:	46bd      	mov	sp, r7
   25bda:	b004      	add	sp, #16
   25bdc:	bd80      	pop	{r7, pc}
   25bde:	46c0      	nop			; (mov r8, r8)
   25be0:	00025b21 	.word	0x00025b21
   25be4:	00025b7d 	.word	0x00025b7d

00025be8 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   25be8:	b580      	push	{r7, lr}
   25bea:	b084      	sub	sp, #16
   25bec:	af00      	add	r7, sp, #0
   25bee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25bf0:	687b      	ldr	r3, [r7, #4]
   25bf2:	681b      	ldr	r3, [r3, #0]
   25bf4:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   25bf6:	2003      	movs	r0, #3
   25bf8:	4b0d      	ldr	r3, [pc, #52]	; (25c30 <rtc_calendar_disable+0x48>)
   25bfa:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   25bfc:	46c0      	nop			; (mov r8, r8)
   25bfe:	687b      	ldr	r3, [r7, #4]
   25c00:	0018      	movs	r0, r3
   25c02:	4b0c      	ldr	r3, [pc, #48]	; (25c34 <rtc_calendar_disable+0x4c>)
   25c04:	4798      	blx	r3
   25c06:	1e03      	subs	r3, r0, #0
   25c08:	d1f9      	bne.n	25bfe <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   25c0a:	68fb      	ldr	r3, [r7, #12]
   25c0c:	22c1      	movs	r2, #193	; 0xc1
   25c0e:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   25c10:	68fb      	ldr	r3, [r7, #12]
   25c12:	22c1      	movs	r2, #193	; 0xc1
   25c14:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   25c16:	68fb      	ldr	r3, [r7, #12]
   25c18:	881b      	ldrh	r3, [r3, #0]
   25c1a:	b29b      	uxth	r3, r3
   25c1c:	2202      	movs	r2, #2
   25c1e:	4393      	bics	r3, r2
   25c20:	b29a      	uxth	r2, r3
   25c22:	68fb      	ldr	r3, [r7, #12]
   25c24:	801a      	strh	r2, [r3, #0]
}
   25c26:	46c0      	nop			; (mov r8, r8)
   25c28:	46bd      	mov	sp, r7
   25c2a:	b004      	add	sp, #16
   25c2c:	bd80      	pop	{r7, pc}
   25c2e:	46c0      	nop			; (mov r8, r8)
   25c30:	00025b4d 	.word	0x00025b4d
   25c34:	00025b7d 	.word	0x00025b7d

00025c38 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   25c38:	b580      	push	{r7, lr}
   25c3a:	b084      	sub	sp, #16
   25c3c:	af00      	add	r7, sp, #0
   25c3e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25c40:	687b      	ldr	r3, [r7, #4]
   25c42:	681b      	ldr	r3, [r3, #0]
   25c44:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   25c46:	687b      	ldr	r3, [r7, #4]
   25c48:	0018      	movs	r0, r3
   25c4a:	4b0d      	ldr	r3, [pc, #52]	; (25c80 <rtc_calendar_reset+0x48>)
   25c4c:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   25c4e:	687b      	ldr	r3, [r7, #4]
   25c50:	2200      	movs	r2, #0
   25c52:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   25c54:	687b      	ldr	r3, [r7, #4]
   25c56:	2200      	movs	r2, #0
   25c58:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   25c5a:	46c0      	nop			; (mov r8, r8)
   25c5c:	687b      	ldr	r3, [r7, #4]
   25c5e:	0018      	movs	r0, r3
   25c60:	4b08      	ldr	r3, [pc, #32]	; (25c84 <rtc_calendar_reset+0x4c>)
   25c62:	4798      	blx	r3
   25c64:	1e03      	subs	r3, r0, #0
   25c66:	d1f9      	bne.n	25c5c <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   25c68:	68fb      	ldr	r3, [r7, #12]
   25c6a:	881b      	ldrh	r3, [r3, #0]
   25c6c:	b29b      	uxth	r3, r3
   25c6e:	2201      	movs	r2, #1
   25c70:	4313      	orrs	r3, r2
   25c72:	b29a      	uxth	r2, r3
   25c74:	68fb      	ldr	r3, [r7, #12]
   25c76:	801a      	strh	r2, [r3, #0]
}
   25c78:	46c0      	nop			; (mov r8, r8)
   25c7a:	46bd      	mov	sp, r7
   25c7c:	b004      	add	sp, #16
   25c7e:	bd80      	pop	{r7, pc}
   25c80:	00025be9 	.word	0x00025be9
   25c84:	00025b7d 	.word	0x00025b7d

00025c88 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   25c88:	b580      	push	{r7, lr}
   25c8a:	b084      	sub	sp, #16
   25c8c:	af00      	add	r7, sp, #0
   25c8e:	6078      	str	r0, [r7, #4]
   25c90:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   25c92:	683b      	ldr	r3, [r7, #0]
   25c94:	88db      	ldrh	r3, [r3, #6]
   25c96:	001a      	movs	r2, r3
   25c98:	687b      	ldr	r3, [r7, #4]
   25c9a:	88db      	ldrh	r3, [r3, #6]
   25c9c:	1ad3      	subs	r3, r2, r3
   25c9e:	069b      	lsls	r3, r3, #26
   25ca0:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   25ca2:	683b      	ldr	r3, [r7, #0]
   25ca4:	795b      	ldrb	r3, [r3, #5]
   25ca6:	059b      	lsls	r3, r3, #22
   25ca8:	001a      	movs	r2, r3
   25caa:	68fb      	ldr	r3, [r7, #12]
   25cac:	4313      	orrs	r3, r2
   25cae:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   25cb0:	683b      	ldr	r3, [r7, #0]
   25cb2:	791b      	ldrb	r3, [r3, #4]
   25cb4:	045b      	lsls	r3, r3, #17
   25cb6:	001a      	movs	r2, r3
   25cb8:	68fb      	ldr	r3, [r7, #12]
   25cba:	4313      	orrs	r3, r2
   25cbc:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   25cbe:	683b      	ldr	r3, [r7, #0]
   25cc0:	789b      	ldrb	r3, [r3, #2]
   25cc2:	031b      	lsls	r3, r3, #12
   25cc4:	001a      	movs	r2, r3
   25cc6:	68fb      	ldr	r3, [r7, #12]
   25cc8:	4313      	orrs	r3, r2
   25cca:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   25ccc:	687b      	ldr	r3, [r7, #4]
   25cce:	791b      	ldrb	r3, [r3, #4]
   25cd0:	2201      	movs	r2, #1
   25cd2:	4053      	eors	r3, r2
   25cd4:	b2db      	uxtb	r3, r3
   25cd6:	2b00      	cmp	r3, #0
   25cd8:	d008      	beq.n	25cec <rtc_calendar_time_to_register_value+0x64>
   25cda:	683b      	ldr	r3, [r7, #0]
   25cdc:	78db      	ldrb	r3, [r3, #3]
   25cde:	2b00      	cmp	r3, #0
   25ce0:	d004      	beq.n	25cec <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   25ce2:	68fb      	ldr	r3, [r7, #12]
   25ce4:	2280      	movs	r2, #128	; 0x80
   25ce6:	0252      	lsls	r2, r2, #9
   25ce8:	4313      	orrs	r3, r2
   25cea:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   25cec:	683b      	ldr	r3, [r7, #0]
   25cee:	785b      	ldrb	r3, [r3, #1]
   25cf0:	019b      	lsls	r3, r3, #6
   25cf2:	001a      	movs	r2, r3
   25cf4:	68fb      	ldr	r3, [r7, #12]
   25cf6:	4313      	orrs	r3, r2
   25cf8:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   25cfa:	683b      	ldr	r3, [r7, #0]
   25cfc:	781b      	ldrb	r3, [r3, #0]
   25cfe:	001a      	movs	r2, r3
   25d00:	68fb      	ldr	r3, [r7, #12]
   25d02:	4313      	orrs	r3, r2
   25d04:	60fb      	str	r3, [r7, #12]

	return register_value;
   25d06:	68fb      	ldr	r3, [r7, #12]
}
   25d08:	0018      	movs	r0, r3
   25d0a:	46bd      	mov	sp, r7
   25d0c:	b004      	add	sp, #16
   25d0e:	bd80      	pop	{r7, pc}

00025d10 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   25d10:	b580      	push	{r7, lr}
   25d12:	b084      	sub	sp, #16
   25d14:	af00      	add	r7, sp, #0
   25d16:	60f8      	str	r0, [r7, #12]
   25d18:	60b9      	str	r1, [r7, #8]
   25d1a:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   25d1c:	68bb      	ldr	r3, [r7, #8]
   25d1e:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   25d20:	b29a      	uxth	r2, r3
   25d22:	68fb      	ldr	r3, [r7, #12]
   25d24:	88db      	ldrh	r3, [r3, #6]
   25d26:	18d3      	adds	r3, r2, r3
   25d28:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   25d2a:	687b      	ldr	r3, [r7, #4]
   25d2c:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   25d2e:	68bb      	ldr	r3, [r7, #8]
   25d30:	0d9b      	lsrs	r3, r3, #22
   25d32:	b2db      	uxtb	r3, r3
   25d34:	220f      	movs	r2, #15
   25d36:	4013      	ands	r3, r2
   25d38:	b2da      	uxtb	r2, r3
   25d3a:	687b      	ldr	r3, [r7, #4]
   25d3c:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   25d3e:	68bb      	ldr	r3, [r7, #8]
   25d40:	0c5b      	lsrs	r3, r3, #17
   25d42:	b2db      	uxtb	r3, r3
   25d44:	221f      	movs	r2, #31
   25d46:	4013      	ands	r3, r2
   25d48:	b2da      	uxtb	r2, r3
   25d4a:	687b      	ldr	r3, [r7, #4]
   25d4c:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   25d4e:	68fb      	ldr	r3, [r7, #12]
   25d50:	791b      	ldrb	r3, [r3, #4]
   25d52:	2b00      	cmp	r3, #0
   25d54:	d008      	beq.n	25d68 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   25d56:	68bb      	ldr	r3, [r7, #8]
   25d58:	0b1b      	lsrs	r3, r3, #12
   25d5a:	b2db      	uxtb	r3, r3
   25d5c:	221f      	movs	r2, #31
   25d5e:	4013      	ands	r3, r2
   25d60:	b2da      	uxtb	r2, r3
   25d62:	687b      	ldr	r3, [r7, #4]
   25d64:	709a      	strb	r2, [r3, #2]
   25d66:	e010      	b.n	25d8a <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   25d68:	68bb      	ldr	r3, [r7, #8]
   25d6a:	0b1b      	lsrs	r3, r3, #12
   25d6c:	b2db      	uxtb	r3, r3
   25d6e:	220f      	movs	r2, #15
   25d70:	4013      	ands	r3, r2
   25d72:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   25d74:	687b      	ldr	r3, [r7, #4]
   25d76:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   25d78:	68ba      	ldr	r2, [r7, #8]
   25d7a:	2380      	movs	r3, #128	; 0x80
   25d7c:	025b      	lsls	r3, r3, #9
   25d7e:	4013      	ands	r3, r2
   25d80:	1e5a      	subs	r2, r3, #1
   25d82:	4193      	sbcs	r3, r2
   25d84:	b2da      	uxtb	r2, r3
   25d86:	687b      	ldr	r3, [r7, #4]
   25d88:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   25d8a:	68bb      	ldr	r3, [r7, #8]
   25d8c:	099b      	lsrs	r3, r3, #6
   25d8e:	b2db      	uxtb	r3, r3
   25d90:	223f      	movs	r2, #63	; 0x3f
   25d92:	4013      	ands	r3, r2
   25d94:	b2da      	uxtb	r2, r3
   25d96:	687b      	ldr	r3, [r7, #4]
   25d98:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   25d9a:	68bb      	ldr	r3, [r7, #8]
   25d9c:	b2db      	uxtb	r3, r3
   25d9e:	223f      	movs	r2, #63	; 0x3f
   25da0:	4013      	ands	r3, r2
   25da2:	b2da      	uxtb	r2, r3
   25da4:	687b      	ldr	r3, [r7, #4]
   25da6:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   25da8:	46c0      	nop			; (mov r8, r8)
   25daa:	46bd      	mov	sp, r7
   25dac:	b004      	add	sp, #16
   25dae:	bd80      	pop	{r7, pc}

00025db0 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   25db0:	b580      	push	{r7, lr}
   25db2:	b084      	sub	sp, #16
   25db4:	af00      	add	r7, sp, #0
   25db6:	6078      	str	r0, [r7, #4]
   25db8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25dba:	687b      	ldr	r3, [r7, #4]
   25dbc:	681b      	ldr	r3, [r3, #0]
   25dbe:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   25dc0:	683b      	ldr	r3, [r7, #0]
   25dc2:	881a      	ldrh	r2, [r3, #0]
   25dc4:	230e      	movs	r3, #14
   25dc6:	18fb      	adds	r3, r7, r3
   25dc8:	2108      	movs	r1, #8
   25dca:	430a      	orrs	r2, r1
   25dcc:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   25dce:	683b      	ldr	r3, [r7, #0]
   25dd0:	791b      	ldrb	r3, [r3, #4]
   25dd2:	2201      	movs	r2, #1
   25dd4:	4053      	eors	r3, r2
   25dd6:	b2db      	uxtb	r3, r3
   25dd8:	2b00      	cmp	r3, #0
   25dda:	d007      	beq.n	25dec <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   25ddc:	230e      	movs	r3, #14
   25dde:	18fb      	adds	r3, r7, r3
   25de0:	220e      	movs	r2, #14
   25de2:	18ba      	adds	r2, r7, r2
   25de4:	8812      	ldrh	r2, [r2, #0]
   25de6:	2140      	movs	r1, #64	; 0x40
   25de8:	430a      	orrs	r2, r1
   25dea:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   25dec:	683b      	ldr	r3, [r7, #0]
   25dee:	789b      	ldrb	r3, [r3, #2]
   25df0:	2b00      	cmp	r3, #0
   25df2:	d007      	beq.n	25e04 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   25df4:	230e      	movs	r3, #14
   25df6:	18fb      	adds	r3, r7, r3
   25df8:	220e      	movs	r2, #14
   25dfa:	18ba      	adds	r2, r7, r2
   25dfc:	8812      	ldrh	r2, [r2, #0]
   25dfe:	2180      	movs	r1, #128	; 0x80
   25e00:	430a      	orrs	r2, r1
   25e02:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   25e04:	68bb      	ldr	r3, [r7, #8]
   25e06:	220e      	movs	r2, #14
   25e08:	18ba      	adds	r2, r7, r2
   25e0a:	8812      	ldrh	r2, [r2, #0]
   25e0c:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   25e0e:	683b      	ldr	r3, [r7, #0]
   25e10:	78db      	ldrb	r3, [r3, #3]
   25e12:	2b00      	cmp	r3, #0
   25e14:	d008      	beq.n	25e28 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   25e16:	68bb      	ldr	r3, [r7, #8]
   25e18:	885b      	ldrh	r3, [r3, #2]
   25e1a:	b29b      	uxth	r3, r3
   25e1c:	2280      	movs	r2, #128	; 0x80
   25e1e:	01d2      	lsls	r2, r2, #7
   25e20:	4313      	orrs	r3, r2
   25e22:	b29a      	uxth	r2, r3
   25e24:	68bb      	ldr	r3, [r7, #8]
   25e26:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   25e28:	230d      	movs	r3, #13
   25e2a:	18fb      	adds	r3, r7, r3
   25e2c:	2200      	movs	r2, #0
   25e2e:	701a      	strb	r2, [r3, #0]
   25e30:	e017      	b.n	25e62 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   25e32:	230d      	movs	r3, #13
   25e34:	18fb      	adds	r3, r7, r3
   25e36:	781a      	ldrb	r2, [r3, #0]
   25e38:	0013      	movs	r3, r2
   25e3a:	009b      	lsls	r3, r3, #2
   25e3c:	189b      	adds	r3, r3, r2
   25e3e:	005b      	lsls	r3, r3, #1
   25e40:	3308      	adds	r3, #8
   25e42:	683a      	ldr	r2, [r7, #0]
   25e44:	18d1      	adds	r1, r2, r3
   25e46:	230d      	movs	r3, #13
   25e48:	18fb      	adds	r3, r7, r3
   25e4a:	781a      	ldrb	r2, [r3, #0]
   25e4c:	687b      	ldr	r3, [r7, #4]
   25e4e:	0018      	movs	r0, r3
   25e50:	4b08      	ldr	r3, [pc, #32]	; (25e74 <_rtc_calendar_set_config+0xc4>)
   25e52:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   25e54:	230d      	movs	r3, #13
   25e56:	18fb      	adds	r3, r7, r3
   25e58:	781a      	ldrb	r2, [r3, #0]
   25e5a:	230d      	movs	r3, #13
   25e5c:	18fb      	adds	r3, r7, r3
   25e5e:	3201      	adds	r2, #1
   25e60:	701a      	strb	r2, [r3, #0]
   25e62:	230d      	movs	r3, #13
   25e64:	18fb      	adds	r3, r7, r3
   25e66:	781b      	ldrb	r3, [r3, #0]
   25e68:	2b00      	cmp	r3, #0
   25e6a:	d0e2      	beq.n	25e32 <_rtc_calendar_set_config+0x82>
	}
}
   25e6c:	46c0      	nop			; (mov r8, r8)
   25e6e:	46bd      	mov	sp, r7
   25e70:	b004      	add	sp, #16
   25e72:	bd80      	pop	{r7, pc}
   25e74:	00025f99 	.word	0x00025f99

00025e78 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   25e78:	b580      	push	{r7, lr}
   25e7a:	b086      	sub	sp, #24
   25e7c:	af00      	add	r7, sp, #0
   25e7e:	60f8      	str	r0, [r7, #12]
   25e80:	60b9      	str	r1, [r7, #8]
   25e82:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   25e84:	68fb      	ldr	r3, [r7, #12]
   25e86:	68ba      	ldr	r2, [r7, #8]
   25e88:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   25e8a:	2120      	movs	r1, #32
   25e8c:	2000      	movs	r0, #0
   25e8e:	4b18      	ldr	r3, [pc, #96]	; (25ef0 <rtc_calendar_init+0x78>)
   25e90:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   25e92:	2314      	movs	r3, #20
   25e94:	18fb      	adds	r3, r7, r3
   25e96:	0018      	movs	r0, r3
   25e98:	4b16      	ldr	r3, [pc, #88]	; (25ef4 <rtc_calendar_init+0x7c>)
   25e9a:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   25e9c:	2314      	movs	r3, #20
   25e9e:	18fb      	adds	r3, r7, r3
   25ea0:	2202      	movs	r2, #2
   25ea2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   25ea4:	2314      	movs	r3, #20
   25ea6:	18fb      	adds	r3, r7, r3
   25ea8:	0019      	movs	r1, r3
   25eaa:	2004      	movs	r0, #4
   25eac:	4b12      	ldr	r3, [pc, #72]	; (25ef8 <rtc_calendar_init+0x80>)
   25eae:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   25eb0:	2004      	movs	r0, #4
   25eb2:	4b12      	ldr	r3, [pc, #72]	; (25efc <rtc_calendar_init+0x84>)
   25eb4:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   25eb6:	68fb      	ldr	r3, [r7, #12]
   25eb8:	0018      	movs	r0, r3
   25eba:	4b11      	ldr	r3, [pc, #68]	; (25f00 <rtc_calendar_init+0x88>)
   25ebc:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   25ebe:	687b      	ldr	r3, [r7, #4]
   25ec0:	791a      	ldrb	r2, [r3, #4]
   25ec2:	68fb      	ldr	r3, [r7, #12]
   25ec4:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   25ec6:	687b      	ldr	r3, [r7, #4]
   25ec8:	78da      	ldrb	r2, [r3, #3]
   25eca:	68fb      	ldr	r3, [r7, #12]
   25ecc:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   25ece:	687b      	ldr	r3, [r7, #4]
   25ed0:	88da      	ldrh	r2, [r3, #6]
   25ed2:	68fb      	ldr	r3, [r7, #12]
   25ed4:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   25ed6:	4b0b      	ldr	r3, [pc, #44]	; (25f04 <rtc_calendar_init+0x8c>)
   25ed8:	68fa      	ldr	r2, [r7, #12]
   25eda:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   25edc:	687a      	ldr	r2, [r7, #4]
   25ede:	68fb      	ldr	r3, [r7, #12]
   25ee0:	0011      	movs	r1, r2
   25ee2:	0018      	movs	r0, r3
   25ee4:	4b08      	ldr	r3, [pc, #32]	; (25f08 <rtc_calendar_init+0x90>)
   25ee6:	4798      	blx	r3
}
   25ee8:	46c0      	nop			; (mov r8, r8)
   25eea:	46bd      	mov	sp, r7
   25eec:	b006      	add	sp, #24
   25eee:	bd80      	pop	{r7, pc}
   25ef0:	00025ac5 	.word	0x00025ac5
   25ef4:	00025aad 	.word	0x00025aad
   25ef8:	00028edd 	.word	0x00028edd
   25efc:	00028f21 	.word	0x00028f21
   25f00:	00025c39 	.word	0x00025c39
   25f04:	20005bc8 	.word	0x20005bc8
   25f08:	00025db1 	.word	0x00025db1

00025f0c <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   25f0c:	b580      	push	{r7, lr}
   25f0e:	b084      	sub	sp, #16
   25f10:	af00      	add	r7, sp, #0
   25f12:	6078      	str	r0, [r7, #4]
   25f14:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25f16:	687b      	ldr	r3, [r7, #4]
   25f18:	681b      	ldr	r3, [r3, #0]
   25f1a:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   25f1c:	687b      	ldr	r3, [r7, #4]
   25f1e:	795b      	ldrb	r3, [r3, #5]
   25f20:	2201      	movs	r2, #1
   25f22:	4053      	eors	r3, r2
   25f24:	b2db      	uxtb	r3, r3
   25f26:	2b00      	cmp	r3, #0
   25f28:	d00a      	beq.n	25f40 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   25f2a:	68fb      	ldr	r3, [r7, #12]
   25f2c:	4a16      	ldr	r2, [pc, #88]	; (25f88 <rtc_calendar_get_time+0x7c>)
   25f2e:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   25f30:	46c0      	nop			; (mov r8, r8)
   25f32:	687b      	ldr	r3, [r7, #4]
   25f34:	0018      	movs	r0, r3
   25f36:	4b15      	ldr	r3, [pc, #84]	; (25f8c <rtc_calendar_get_time+0x80>)
   25f38:	4798      	blx	r3
   25f3a:	1e03      	subs	r3, r0, #0
   25f3c:	d1f9      	bne.n	25f32 <rtc_calendar_get_time+0x26>
   25f3e:	e016      	b.n	25f6e <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   25f40:	68fb      	ldr	r3, [r7, #12]
   25f42:	885b      	ldrh	r3, [r3, #2]
   25f44:	b29b      	uxth	r3, r3
   25f46:	001a      	movs	r2, r3
   25f48:	2380      	movs	r3, #128	; 0x80
   25f4a:	01db      	lsls	r3, r3, #7
   25f4c:	4013      	ands	r3, r2
   25f4e:	d10e      	bne.n	25f6e <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   25f50:	68fb      	ldr	r3, [r7, #12]
   25f52:	885b      	ldrh	r3, [r3, #2]
   25f54:	b29b      	uxth	r3, r3
   25f56:	4a0e      	ldr	r2, [pc, #56]	; (25f90 <rtc_calendar_get_time+0x84>)
   25f58:	4313      	orrs	r3, r2
   25f5a:	b29a      	uxth	r2, r3
   25f5c:	68fb      	ldr	r3, [r7, #12]
   25f5e:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   25f60:	46c0      	nop			; (mov r8, r8)
   25f62:	687b      	ldr	r3, [r7, #4]
   25f64:	0018      	movs	r0, r3
   25f66:	4b09      	ldr	r3, [pc, #36]	; (25f8c <rtc_calendar_get_time+0x80>)
   25f68:	4798      	blx	r3
   25f6a:	1e03      	subs	r3, r0, #0
   25f6c:	d1f9      	bne.n	25f62 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   25f6e:	68fb      	ldr	r3, [r7, #12]
   25f70:	691b      	ldr	r3, [r3, #16]
   25f72:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   25f74:	683a      	ldr	r2, [r7, #0]
   25f76:	68b9      	ldr	r1, [r7, #8]
   25f78:	687b      	ldr	r3, [r7, #4]
   25f7a:	0018      	movs	r0, r3
   25f7c:	4b05      	ldr	r3, [pc, #20]	; (25f94 <rtc_calendar_get_time+0x88>)
   25f7e:	4798      	blx	r3
}
   25f80:	46c0      	nop			; (mov r8, r8)
   25f82:	46bd      	mov	sp, r7
   25f84:	b004      	add	sp, #16
   25f86:	bd80      	pop	{r7, pc}
   25f88:	ffff8000 	.word	0xffff8000
   25f8c:	00025b7d 	.word	0x00025b7d
   25f90:	ffffc000 	.word	0xffffc000
   25f94:	00025d11 	.word	0x00025d11

00025f98 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   25f98:	b580      	push	{r7, lr}
   25f9a:	b086      	sub	sp, #24
   25f9c:	af00      	add	r7, sp, #0
   25f9e:	60f8      	str	r0, [r7, #12]
   25fa0:	60b9      	str	r1, [r7, #8]
   25fa2:	1dfb      	adds	r3, r7, #7
   25fa4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25fa6:	68fb      	ldr	r3, [r7, #12]
   25fa8:	681b      	ldr	r3, [r3, #0]
   25faa:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   25fac:	1dfb      	adds	r3, r7, #7
   25fae:	781b      	ldrb	r3, [r3, #0]
   25fb0:	2b01      	cmp	r3, #1
   25fb2:	d901      	bls.n	25fb8 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   25fb4:	2317      	movs	r3, #23
   25fb6:	e021      	b.n	25ffc <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   25fb8:	68ba      	ldr	r2, [r7, #8]
   25fba:	68fb      	ldr	r3, [r7, #12]
   25fbc:	0011      	movs	r1, r2
   25fbe:	0018      	movs	r0, r3
   25fc0:	4b10      	ldr	r3, [pc, #64]	; (26004 <rtc_calendar_set_alarm+0x6c>)
   25fc2:	4798      	blx	r3
   25fc4:	0003      	movs	r3, r0
   25fc6:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   25fc8:	46c0      	nop			; (mov r8, r8)
   25fca:	68fb      	ldr	r3, [r7, #12]
   25fcc:	0018      	movs	r0, r3
   25fce:	4b0e      	ldr	r3, [pc, #56]	; (26008 <rtc_calendar_set_alarm+0x70>)
   25fd0:	4798      	blx	r3
   25fd2:	1e03      	subs	r3, r0, #0
   25fd4:	d1f9      	bne.n	25fca <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   25fd6:	1dfb      	adds	r3, r7, #7
   25fd8:	781a      	ldrb	r2, [r3, #0]
   25fda:	697b      	ldr	r3, [r7, #20]
   25fdc:	3203      	adds	r2, #3
   25fde:	00d2      	lsls	r2, r2, #3
   25fe0:	6939      	ldr	r1, [r7, #16]
   25fe2:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   25fe4:	1dfb      	adds	r3, r7, #7
   25fe6:	781b      	ldrb	r3, [r3, #0]
   25fe8:	68ba      	ldr	r2, [r7, #8]
   25fea:	7a11      	ldrb	r1, [r2, #8]
   25fec:	697a      	ldr	r2, [r7, #20]
   25fee:	3303      	adds	r3, #3
   25ff0:	00db      	lsls	r3, r3, #3
   25ff2:	18d3      	adds	r3, r2, r3
   25ff4:	3304      	adds	r3, #4
   25ff6:	1c0a      	adds	r2, r1, #0
   25ff8:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   25ffa:	2300      	movs	r3, #0
}
   25ffc:	0018      	movs	r0, r3
   25ffe:	46bd      	mov	sp, r7
   26000:	b006      	add	sp, #24
   26002:	bd80      	pop	{r7, pc}
   26004:	00025c89 	.word	0x00025c89
   26008:	00025b7d 	.word	0x00025b7d

0002600c <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   2600c:	b580      	push	{r7, lr}
   2600e:	b086      	sub	sp, #24
   26010:	af00      	add	r7, sp, #0
   26012:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   26014:	4b28      	ldr	r3, [pc, #160]	; (260b8 <_rtc_interrupt_handler+0xac>)
   26016:	687a      	ldr	r2, [r7, #4]
   26018:	0092      	lsls	r2, r2, #2
   2601a:	58d3      	ldr	r3, [r2, r3]
   2601c:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   2601e:	697b      	ldr	r3, [r7, #20]
   26020:	681b      	ldr	r3, [r3, #0]
   26022:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   26024:	230e      	movs	r3, #14
   26026:	18fb      	adds	r3, r7, r3
   26028:	697a      	ldr	r2, [r7, #20]
   2602a:	8a52      	ldrh	r2, [r2, #18]
   2602c:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   2602e:	697b      	ldr	r3, [r7, #20]
   26030:	8a1b      	ldrh	r3, [r3, #16]
   26032:	b29a      	uxth	r2, r3
   26034:	230e      	movs	r3, #14
   26036:	18fb      	adds	r3, r7, r3
   26038:	210e      	movs	r1, #14
   2603a:	1879      	adds	r1, r7, r1
   2603c:	8809      	ldrh	r1, [r1, #0]
   2603e:	400a      	ands	r2, r1
   26040:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   26042:	693b      	ldr	r3, [r7, #16]
   26044:	7a1b      	ldrb	r3, [r3, #8]
   26046:	b2da      	uxtb	r2, r3
   26048:	230c      	movs	r3, #12
   2604a:	18fb      	adds	r3, r7, r3
   2604c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   2604e:	693b      	ldr	r3, [r7, #16]
   26050:	79db      	ldrb	r3, [r3, #7]
   26052:	b2db      	uxtb	r3, r3
   26054:	b29a      	uxth	r2, r3
   26056:	230c      	movs	r3, #12
   26058:	18fb      	adds	r3, r7, r3
   2605a:	210c      	movs	r1, #12
   2605c:	1879      	adds	r1, r7, r1
   2605e:	8809      	ldrh	r1, [r1, #0]
   26060:	400a      	ands	r2, r1
   26062:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   26064:	230c      	movs	r3, #12
   26066:	18fb      	adds	r3, r7, r3
   26068:	881b      	ldrh	r3, [r3, #0]
   2606a:	2280      	movs	r2, #128	; 0x80
   2606c:	4013      	ands	r3, r2
   2606e:	d00c      	beq.n	2608a <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   26070:	230e      	movs	r3, #14
   26072:	18fb      	adds	r3, r7, r3
   26074:	881b      	ldrh	r3, [r3, #0]
   26076:	2202      	movs	r2, #2
   26078:	4013      	ands	r3, r2
   2607a:	d002      	beq.n	26082 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   2607c:	697b      	ldr	r3, [r7, #20]
   2607e:	68db      	ldr	r3, [r3, #12]
   26080:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   26082:	693b      	ldr	r3, [r7, #16]
   26084:	2280      	movs	r2, #128	; 0x80
   26086:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   26088:	e011      	b.n	260ae <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   2608a:	230c      	movs	r3, #12
   2608c:	18fb      	adds	r3, r7, r3
   2608e:	881b      	ldrh	r3, [r3, #0]
   26090:	2201      	movs	r2, #1
   26092:	4013      	ands	r3, r2
   26094:	d00b      	beq.n	260ae <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   26096:	230e      	movs	r3, #14
   26098:	18fb      	adds	r3, r7, r3
   2609a:	881b      	ldrh	r3, [r3, #0]
   2609c:	2201      	movs	r2, #1
   2609e:	4013      	ands	r3, r2
   260a0:	d002      	beq.n	260a8 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   260a2:	697b      	ldr	r3, [r7, #20]
   260a4:	689b      	ldr	r3, [r3, #8]
   260a6:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   260a8:	693b      	ldr	r3, [r7, #16]
   260aa:	2201      	movs	r2, #1
   260ac:	721a      	strb	r2, [r3, #8]
}
   260ae:	46c0      	nop			; (mov r8, r8)
   260b0:	46bd      	mov	sp, r7
   260b2:	b006      	add	sp, #24
   260b4:	bd80      	pop	{r7, pc}
   260b6:	46c0      	nop			; (mov r8, r8)
   260b8:	20005bc8 	.word	0x20005bc8

000260bc <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   260bc:	b580      	push	{r7, lr}
   260be:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   260c0:	2000      	movs	r0, #0
   260c2:	4b02      	ldr	r3, [pc, #8]	; (260cc <RTC_Handler+0x10>)
   260c4:	4798      	blx	r3
}
   260c6:	46c0      	nop			; (mov r8, r8)
   260c8:	46bd      	mov	sp, r7
   260ca:	bd80      	pop	{r7, pc}
   260cc:	0002600d 	.word	0x0002600d

000260d0 <system_gclk_chan_get_config_defaults>:
{
   260d0:	b580      	push	{r7, lr}
   260d2:	b082      	sub	sp, #8
   260d4:	af00      	add	r7, sp, #0
   260d6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   260d8:	687b      	ldr	r3, [r7, #4]
   260da:	2200      	movs	r2, #0
   260dc:	701a      	strb	r2, [r3, #0]
}
   260de:	46c0      	nop			; (mov r8, r8)
   260e0:	46bd      	mov	sp, r7
   260e2:	b002      	add	sp, #8
   260e4:	bd80      	pop	{r7, pc}

000260e6 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   260e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   260e8:	b08d      	sub	sp, #52	; 0x34
   260ea:	af00      	add	r7, sp, #0
   260ec:	60b8      	str	r0, [r7, #8]
   260ee:	60f9      	str	r1, [r7, #12]
   260f0:	603a      	str	r2, [r7, #0]
   260f2:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   260f4:	2300      	movs	r3, #0
   260f6:	2400      	movs	r4, #0
   260f8:	623b      	str	r3, [r7, #32]
   260fa:	627c      	str	r4, [r7, #36]	; 0x24
   260fc:	2300      	movs	r3, #0
   260fe:	2400      	movs	r4, #0
   26100:	61bb      	str	r3, [r7, #24]
   26102:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   26104:	233f      	movs	r3, #63	; 0x3f
   26106:	62fb      	str	r3, [r7, #44]	; 0x2c
   26108:	e053      	b.n	261b2 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   2610a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2610c:	3b20      	subs	r3, #32
   2610e:	2b00      	cmp	r3, #0
   26110:	db04      	blt.n	2611c <long_division+0x36>
   26112:	2201      	movs	r2, #1
   26114:	409a      	lsls	r2, r3
   26116:	0013      	movs	r3, r2
   26118:	617b      	str	r3, [r7, #20]
   2611a:	e00b      	b.n	26134 <long_division+0x4e>
   2611c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2611e:	2220      	movs	r2, #32
   26120:	1ad3      	subs	r3, r2, r3
   26122:	2201      	movs	r2, #1
   26124:	40da      	lsrs	r2, r3
   26126:	0013      	movs	r3, r2
   26128:	2100      	movs	r1, #0
   2612a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2612c:	4091      	lsls	r1, r2
   2612e:	000a      	movs	r2, r1
   26130:	4313      	orrs	r3, r2
   26132:	617b      	str	r3, [r7, #20]
   26134:	2201      	movs	r2, #1
   26136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26138:	409a      	lsls	r2, r3
   2613a:	0013      	movs	r3, r2
   2613c:	613b      	str	r3, [r7, #16]

		r = r << 1;
   2613e:	69bb      	ldr	r3, [r7, #24]
   26140:	69fc      	ldr	r4, [r7, #28]
   26142:	18db      	adds	r3, r3, r3
   26144:	4164      	adcs	r4, r4
   26146:	61bb      	str	r3, [r7, #24]
   26148:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   2614a:	68bb      	ldr	r3, [r7, #8]
   2614c:	693a      	ldr	r2, [r7, #16]
   2614e:	401a      	ands	r2, r3
   26150:	0015      	movs	r5, r2
   26152:	68fb      	ldr	r3, [r7, #12]
   26154:	697a      	ldr	r2, [r7, #20]
   26156:	401a      	ands	r2, r3
   26158:	0016      	movs	r6, r2
   2615a:	002b      	movs	r3, r5
   2615c:	4333      	orrs	r3, r6
   2615e:	d007      	beq.n	26170 <long_division+0x8a>
			r |= 0x01;
   26160:	69bb      	ldr	r3, [r7, #24]
   26162:	2201      	movs	r2, #1
   26164:	4313      	orrs	r3, r2
   26166:	61bb      	str	r3, [r7, #24]
   26168:	69fb      	ldr	r3, [r7, #28]
   2616a:	2200      	movs	r2, #0
   2616c:	4313      	orrs	r3, r2
   2616e:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   26170:	687a      	ldr	r2, [r7, #4]
   26172:	69fb      	ldr	r3, [r7, #28]
   26174:	429a      	cmp	r2, r3
   26176:	d819      	bhi.n	261ac <long_division+0xc6>
   26178:	687a      	ldr	r2, [r7, #4]
   2617a:	69fb      	ldr	r3, [r7, #28]
   2617c:	429a      	cmp	r2, r3
   2617e:	d103      	bne.n	26188 <long_division+0xa2>
   26180:	683a      	ldr	r2, [r7, #0]
   26182:	69bb      	ldr	r3, [r7, #24]
   26184:	429a      	cmp	r2, r3
   26186:	d811      	bhi.n	261ac <long_division+0xc6>
			r = r - d;
   26188:	69b9      	ldr	r1, [r7, #24]
   2618a:	69fa      	ldr	r2, [r7, #28]
   2618c:	683b      	ldr	r3, [r7, #0]
   2618e:	687c      	ldr	r4, [r7, #4]
   26190:	1ac9      	subs	r1, r1, r3
   26192:	41a2      	sbcs	r2, r4
   26194:	000b      	movs	r3, r1
   26196:	0014      	movs	r4, r2
   26198:	61bb      	str	r3, [r7, #24]
   2619a:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   2619c:	6a3a      	ldr	r2, [r7, #32]
   2619e:	693b      	ldr	r3, [r7, #16]
   261a0:	4313      	orrs	r3, r2
   261a2:	623b      	str	r3, [r7, #32]
   261a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   261a6:	697b      	ldr	r3, [r7, #20]
   261a8:	4313      	orrs	r3, r2
   261aa:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   261ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   261ae:	3b01      	subs	r3, #1
   261b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   261b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   261b4:	2b00      	cmp	r3, #0
   261b6:	daa8      	bge.n	2610a <long_division+0x24>
		}
	}

	return q;
   261b8:	6a3b      	ldr	r3, [r7, #32]
   261ba:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   261bc:	0018      	movs	r0, r3
   261be:	0021      	movs	r1, r4
   261c0:	46bd      	mov	sp, r7
   261c2:	b00d      	add	sp, #52	; 0x34
   261c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000261c6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   261c6:	b580      	push	{r7, lr}
   261c8:	b086      	sub	sp, #24
   261ca:	af00      	add	r7, sp, #0
   261cc:	60f8      	str	r0, [r7, #12]
   261ce:	60b9      	str	r1, [r7, #8]
   261d0:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   261d2:	2316      	movs	r3, #22
   261d4:	18fb      	adds	r3, r7, r3
   261d6:	2200      	movs	r2, #0
   261d8:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   261da:	68bb      	ldr	r3, [r7, #8]
   261dc:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   261de:	68bb      	ldr	r3, [r7, #8]
   261e0:	085a      	lsrs	r2, r3, #1
   261e2:	68fb      	ldr	r3, [r7, #12]
   261e4:	429a      	cmp	r2, r3
   261e6:	d201      	bcs.n	261ec <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   261e8:	2340      	movs	r3, #64	; 0x40
   261ea:	e026      	b.n	2623a <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   261ec:	68bb      	ldr	r3, [r7, #8]
   261ee:	085b      	lsrs	r3, r3, #1
   261f0:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   261f2:	e00a      	b.n	2620a <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   261f4:	693a      	ldr	r2, [r7, #16]
   261f6:	68fb      	ldr	r3, [r7, #12]
   261f8:	1ad3      	subs	r3, r2, r3
   261fa:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   261fc:	2316      	movs	r3, #22
   261fe:	18fb      	adds	r3, r7, r3
   26200:	881a      	ldrh	r2, [r3, #0]
   26202:	2316      	movs	r3, #22
   26204:	18fb      	adds	r3, r7, r3
   26206:	3201      	adds	r2, #1
   26208:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   2620a:	693a      	ldr	r2, [r7, #16]
   2620c:	68fb      	ldr	r3, [r7, #12]
   2620e:	429a      	cmp	r2, r3
   26210:	d2f0      	bcs.n	261f4 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   26212:	2316      	movs	r3, #22
   26214:	18fb      	adds	r3, r7, r3
   26216:	2216      	movs	r2, #22
   26218:	18ba      	adds	r2, r7, r2
   2621a:	8812      	ldrh	r2, [r2, #0]
   2621c:	3a01      	subs	r2, #1
   2621e:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   26220:	2316      	movs	r3, #22
   26222:	18fb      	adds	r3, r7, r3
   26224:	881b      	ldrh	r3, [r3, #0]
   26226:	2bff      	cmp	r3, #255	; 0xff
   26228:	d901      	bls.n	2622e <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   2622a:	2340      	movs	r3, #64	; 0x40
   2622c:	e005      	b.n	2623a <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   2622e:	687b      	ldr	r3, [r7, #4]
   26230:	2216      	movs	r2, #22
   26232:	18ba      	adds	r2, r7, r2
   26234:	8812      	ldrh	r2, [r2, #0]
   26236:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   26238:	2300      	movs	r3, #0
	}
}
   2623a:	0018      	movs	r0, r3
   2623c:	46bd      	mov	sp, r7
   2623e:	b006      	add	sp, #24
   26240:	bd80      	pop	{r7, pc}
	...

00026244 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   26244:	b5f0      	push	{r4, r5, r6, r7, lr}
   26246:	b0a1      	sub	sp, #132	; 0x84
   26248:	af00      	add	r7, sp, #0
   2624a:	64f8      	str	r0, [r7, #76]	; 0x4c
   2624c:	64b9      	str	r1, [r7, #72]	; 0x48
   2624e:	647a      	str	r2, [r7, #68]	; 0x44
   26250:	2243      	movs	r2, #67	; 0x43
   26252:	18ba      	adds	r2, r7, r2
   26254:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   26256:	2300      	movs	r3, #0
   26258:	2400      	movs	r4, #0
   2625a:	673b      	str	r3, [r7, #112]	; 0x70
   2625c:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   2625e:	2300      	movs	r3, #0
   26260:	2400      	movs	r4, #0
   26262:	66bb      	str	r3, [r7, #104]	; 0x68
   26264:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   26266:	2300      	movs	r3, #0
   26268:	2400      	movs	r4, #0
   2626a:	67bb      	str	r3, [r7, #120]	; 0x78
   2626c:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   2626e:	2300      	movs	r3, #0
   26270:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   26272:	2358      	movs	r3, #88	; 0x58
   26274:	2240      	movs	r2, #64	; 0x40
   26276:	4694      	mov	ip, r2
   26278:	44bc      	add	ip, r7
   2627a:	4463      	add	r3, ip
   2627c:	781a      	ldrb	r2, [r3, #0]
   2627e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   26280:	435a      	muls	r2, r3
   26282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26284:	429a      	cmp	r2, r3
   26286:	d901      	bls.n	2628c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26288:	2340      	movs	r3, #64	; 0x40
   2628a:	e0b3      	b.n	263f4 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   2628c:	2343      	movs	r3, #67	; 0x43
   2628e:	18fb      	adds	r3, r7, r3
   26290:	781b      	ldrb	r3, [r3, #0]
   26292:	2b00      	cmp	r3, #0
   26294:	d13d      	bne.n	26312 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   26296:	2358      	movs	r3, #88	; 0x58
   26298:	2240      	movs	r2, #64	; 0x40
   2629a:	4694      	mov	ip, r2
   2629c:	44bc      	add	ip, r7
   2629e:	4463      	add	r3, ip
   262a0:	781b      	ldrb	r3, [r3, #0]
   262a2:	b2db      	uxtb	r3, r3
   262a4:	613b      	str	r3, [r7, #16]
   262a6:	2300      	movs	r3, #0
   262a8:	617b      	str	r3, [r7, #20]
   262aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   262ac:	60bb      	str	r3, [r7, #8]
   262ae:	2300      	movs	r3, #0
   262b0:	60fb      	str	r3, [r7, #12]
   262b2:	4c52      	ldr	r4, [pc, #328]	; (263fc <_sercom_get_async_baud_val+0x1b8>)
   262b4:	68ba      	ldr	r2, [r7, #8]
   262b6:	68fb      	ldr	r3, [r7, #12]
   262b8:	6938      	ldr	r0, [r7, #16]
   262ba:	6979      	ldr	r1, [r7, #20]
   262bc:	47a0      	blx	r4
   262be:	0003      	movs	r3, r0
   262c0:	000c      	movs	r4, r1
   262c2:	001b      	movs	r3, r3
   262c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   262c6:	2300      	movs	r3, #0
   262c8:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   262ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   262cc:	603b      	str	r3, [r7, #0]
   262ce:	2300      	movs	r3, #0
   262d0:	607b      	str	r3, [r7, #4]
   262d2:	6db8      	ldr	r0, [r7, #88]	; 0x58
   262d4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   262d6:	683a      	ldr	r2, [r7, #0]
   262d8:	687b      	ldr	r3, [r7, #4]
   262da:	4c49      	ldr	r4, [pc, #292]	; (26400 <_sercom_get_async_baud_val+0x1bc>)
   262dc:	47a0      	blx	r4
   262de:	0003      	movs	r3, r0
   262e0:	000c      	movs	r4, r1
   262e2:	673b      	str	r3, [r7, #112]	; 0x70
   262e4:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   262e6:	2100      	movs	r1, #0
   262e8:	2201      	movs	r2, #1
   262ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   262ec:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   262ee:	1ac9      	subs	r1, r1, r3
   262f0:	41a2      	sbcs	r2, r4
   262f2:	000b      	movs	r3, r1
   262f4:	0014      	movs	r4, r2
   262f6:	66bb      	str	r3, [r7, #104]	; 0x68
   262f8:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   262fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   262fc:	0c1b      	lsrs	r3, r3, #16
   262fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   26300:	0416      	lsls	r6, r2, #16
   26302:	431e      	orrs	r6, r3
   26304:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26306:	041d      	lsls	r5, r3, #16
   26308:	0033      	movs	r3, r6
   2630a:	67bb      	str	r3, [r7, #120]	; 0x78
   2630c:	2300      	movs	r3, #0
   2630e:	67fb      	str	r3, [r7, #124]	; 0x7c
   26310:	e06a      	b.n	263e8 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   26312:	2343      	movs	r3, #67	; 0x43
   26314:	18fb      	adds	r3, r7, r3
   26316:	781b      	ldrb	r3, [r3, #0]
   26318:	2b01      	cmp	r3, #1
   2631a:	d165      	bne.n	263e8 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   2631c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2631e:	633b      	str	r3, [r7, #48]	; 0x30
   26320:	2300      	movs	r3, #0
   26322:	637b      	str	r3, [r7, #52]	; 0x34
   26324:	2358      	movs	r3, #88	; 0x58
   26326:	2240      	movs	r2, #64	; 0x40
   26328:	4694      	mov	ip, r2
   2632a:	44bc      	add	ip, r7
   2632c:	4463      	add	r3, ip
   2632e:	781b      	ldrb	r3, [r3, #0]
   26330:	b2db      	uxtb	r3, r3
   26332:	62bb      	str	r3, [r7, #40]	; 0x28
   26334:	2300      	movs	r3, #0
   26336:	62fb      	str	r3, [r7, #44]	; 0x2c
   26338:	4c30      	ldr	r4, [pc, #192]	; (263fc <_sercom_get_async_baud_val+0x1b8>)
   2633a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2633c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2633e:	6b38      	ldr	r0, [r7, #48]	; 0x30
   26340:	6b79      	ldr	r1, [r7, #52]	; 0x34
   26342:	47a0      	blx	r4
   26344:	0003      	movs	r3, r0
   26346:	000c      	movs	r4, r1
   26348:	65bb      	str	r3, [r7, #88]	; 0x58
   2634a:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   2634c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2634e:	623b      	str	r3, [r7, #32]
   26350:	2300      	movs	r3, #0
   26352:	627b      	str	r3, [r7, #36]	; 0x24
   26354:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   26356:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   26358:	001a      	movs	r2, r3
   2635a:	0023      	movs	r3, r4
   2635c:	6a38      	ldr	r0, [r7, #32]
   2635e:	6a79      	ldr	r1, [r7, #36]	; 0x24
   26360:	4c27      	ldr	r4, [pc, #156]	; (26400 <_sercom_get_async_baud_val+0x1bc>)
   26362:	47a0      	blx	r4
   26364:	0003      	movs	r3, r0
   26366:	000c      	movs	r4, r1
   26368:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   2636a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   2636c:	2380      	movs	r3, #128	; 0x80
   2636e:	019b      	lsls	r3, r3, #6
   26370:	429a      	cmp	r2, r3
   26372:	d901      	bls.n	26378 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26374:	2340      	movs	r3, #64	; 0x40
   26376:	e03d      	b.n	263f4 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   26378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2637a:	61bb      	str	r3, [r7, #24]
   2637c:	2300      	movs	r3, #0
   2637e:	61fb      	str	r3, [r7, #28]
   26380:	69b9      	ldr	r1, [r7, #24]
   26382:	69fa      	ldr	r2, [r7, #28]
   26384:	000b      	movs	r3, r1
   26386:	0f5b      	lsrs	r3, r3, #29
   26388:	0010      	movs	r0, r2
   2638a:	00c0      	lsls	r0, r0, #3
   2638c:	63f8      	str	r0, [r7, #60]	; 0x3c
   2638e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   26390:	4318      	orrs	r0, r3
   26392:	63f8      	str	r0, [r7, #60]	; 0x3c
   26394:	000b      	movs	r3, r1
   26396:	00db      	lsls	r3, r3, #3
   26398:	63bb      	str	r3, [r7, #56]	; 0x38
   2639a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2639c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   2639e:	001a      	movs	r2, r3
   263a0:	0023      	movs	r3, r4
   263a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   263a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   263a6:	4c16      	ldr	r4, [pc, #88]	; (26400 <_sercom_get_async_baud_val+0x1bc>)
   263a8:	47a0      	blx	r4
   263aa:	0003      	movs	r3, r0
   263ac:	000c      	movs	r4, r1
   263ae:	65bb      	str	r3, [r7, #88]	; 0x58
   263b0:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   263b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   263b4:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   263b6:	b2d9      	uxtb	r1, r3
   263b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   263ba:	b2db      	uxtb	r3, r3
   263bc:	00db      	lsls	r3, r3, #3
   263be:	b2da      	uxtb	r2, r3
   263c0:	2317      	movs	r3, #23
   263c2:	2040      	movs	r0, #64	; 0x40
   263c4:	4684      	mov	ip, r0
   263c6:	44bc      	add	ip, r7
   263c8:	4463      	add	r3, ip
   263ca:	1a8a      	subs	r2, r1, r2
   263cc:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   263ce:	2317      	movs	r3, #23
   263d0:	2240      	movs	r2, #64	; 0x40
   263d2:	4694      	mov	ip, r2
   263d4:	44bc      	add	ip, r7
   263d6:	4463      	add	r3, ip
   263d8:	781b      	ldrb	r3, [r3, #0]
   263da:	035b      	lsls	r3, r3, #13
   263dc:	001a      	movs	r2, r3
   263de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   263e0:	4313      	orrs	r3, r2
   263e2:	67bb      	str	r3, [r7, #120]	; 0x78
   263e4:	2300      	movs	r3, #0
   263e6:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   263e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   263ea:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   263ec:	b29a      	uxth	r2, r3
   263ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   263f0:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   263f2:	2300      	movs	r3, #0
}
   263f4:	0018      	movs	r0, r3
   263f6:	46bd      	mov	sp, r7
   263f8:	b021      	add	sp, #132	; 0x84
   263fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   263fc:	00031db1 	.word	0x00031db1
   26400:	000260e7 	.word	0x000260e7

00026404 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   26404:	b580      	push	{r7, lr}
   26406:	b084      	sub	sp, #16
   26408:	af00      	add	r7, sp, #0
   2640a:	0002      	movs	r2, r0
   2640c:	1dfb      	adds	r3, r7, #7
   2640e:	701a      	strb	r2, [r3, #0]
   26410:	1dbb      	adds	r3, r7, #6
   26412:	1c0a      	adds	r2, r1, #0
   26414:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   26416:	4b1a      	ldr	r3, [pc, #104]	; (26480 <sercom_set_gclk_generator+0x7c>)
   26418:	781b      	ldrb	r3, [r3, #0]
   2641a:	2201      	movs	r2, #1
   2641c:	4053      	eors	r3, r2
   2641e:	b2db      	uxtb	r3, r3
   26420:	2b00      	cmp	r3, #0
   26422:	d103      	bne.n	2642c <sercom_set_gclk_generator+0x28>
   26424:	1dbb      	adds	r3, r7, #6
   26426:	781b      	ldrb	r3, [r3, #0]
   26428:	2b00      	cmp	r3, #0
   2642a:	d01b      	beq.n	26464 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2642c:	230c      	movs	r3, #12
   2642e:	18fb      	adds	r3, r7, r3
   26430:	0018      	movs	r0, r3
   26432:	4b14      	ldr	r3, [pc, #80]	; (26484 <sercom_set_gclk_generator+0x80>)
   26434:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   26436:	230c      	movs	r3, #12
   26438:	18fb      	adds	r3, r7, r3
   2643a:	1dfa      	adds	r2, r7, #7
   2643c:	7812      	ldrb	r2, [r2, #0]
   2643e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   26440:	230c      	movs	r3, #12
   26442:	18fb      	adds	r3, r7, r3
   26444:	0019      	movs	r1, r3
   26446:	2013      	movs	r0, #19
   26448:	4b0f      	ldr	r3, [pc, #60]	; (26488 <sercom_set_gclk_generator+0x84>)
   2644a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   2644c:	2013      	movs	r0, #19
   2644e:	4b0f      	ldr	r3, [pc, #60]	; (2648c <sercom_set_gclk_generator+0x88>)
   26450:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   26452:	4b0b      	ldr	r3, [pc, #44]	; (26480 <sercom_set_gclk_generator+0x7c>)
   26454:	1dfa      	adds	r2, r7, #7
   26456:	7812      	ldrb	r2, [r2, #0]
   26458:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   2645a:	4b09      	ldr	r3, [pc, #36]	; (26480 <sercom_set_gclk_generator+0x7c>)
   2645c:	2201      	movs	r2, #1
   2645e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   26460:	2300      	movs	r3, #0
   26462:	e008      	b.n	26476 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   26464:	4b06      	ldr	r3, [pc, #24]	; (26480 <sercom_set_gclk_generator+0x7c>)
   26466:	785b      	ldrb	r3, [r3, #1]
   26468:	1dfa      	adds	r2, r7, #7
   2646a:	7812      	ldrb	r2, [r2, #0]
   2646c:	429a      	cmp	r2, r3
   2646e:	d101      	bne.n	26474 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   26470:	2300      	movs	r3, #0
   26472:	e000      	b.n	26476 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   26474:	231d      	movs	r3, #29
}
   26476:	0018      	movs	r0, r3
   26478:	46bd      	mov	sp, r7
   2647a:	b004      	add	sp, #16
   2647c:	bd80      	pop	{r7, pc}
   2647e:	46c0      	nop			; (mov r8, r8)
   26480:	2000428c 	.word	0x2000428c
   26484:	000260d1 	.word	0x000260d1
   26488:	00028edd 	.word	0x00028edd
   2648c:	00028f21 	.word	0x00028f21

00026490 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   26490:	b580      	push	{r7, lr}
   26492:	b082      	sub	sp, #8
   26494:	af00      	add	r7, sp, #0
   26496:	6078      	str	r0, [r7, #4]
   26498:	000a      	movs	r2, r1
   2649a:	1cfb      	adds	r3, r7, #3
   2649c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   2649e:	687b      	ldr	r3, [r7, #4]
   264a0:	4a4d      	ldr	r2, [pc, #308]	; (265d8 <_sercom_get_default_pad+0x148>)
   264a2:	4293      	cmp	r3, r2
   264a4:	d03f      	beq.n	26526 <_sercom_get_default_pad+0x96>
   264a6:	4a4c      	ldr	r2, [pc, #304]	; (265d8 <_sercom_get_default_pad+0x148>)
   264a8:	4293      	cmp	r3, r2
   264aa:	d806      	bhi.n	264ba <_sercom_get_default_pad+0x2a>
   264ac:	4a4b      	ldr	r2, [pc, #300]	; (265dc <_sercom_get_default_pad+0x14c>)
   264ae:	4293      	cmp	r3, r2
   264b0:	d00f      	beq.n	264d2 <_sercom_get_default_pad+0x42>
   264b2:	4a4b      	ldr	r2, [pc, #300]	; (265e0 <_sercom_get_default_pad+0x150>)
   264b4:	4293      	cmp	r3, r2
   264b6:	d021      	beq.n	264fc <_sercom_get_default_pad+0x6c>
   264b8:	e089      	b.n	265ce <_sercom_get_default_pad+0x13e>
   264ba:	4a4a      	ldr	r2, [pc, #296]	; (265e4 <_sercom_get_default_pad+0x154>)
   264bc:	4293      	cmp	r3, r2
   264be:	d100      	bne.n	264c2 <_sercom_get_default_pad+0x32>
   264c0:	e05b      	b.n	2657a <_sercom_get_default_pad+0xea>
   264c2:	4a49      	ldr	r2, [pc, #292]	; (265e8 <_sercom_get_default_pad+0x158>)
   264c4:	4293      	cmp	r3, r2
   264c6:	d100      	bne.n	264ca <_sercom_get_default_pad+0x3a>
   264c8:	e06c      	b.n	265a4 <_sercom_get_default_pad+0x114>
   264ca:	4a48      	ldr	r2, [pc, #288]	; (265ec <_sercom_get_default_pad+0x15c>)
   264cc:	4293      	cmp	r3, r2
   264ce:	d03f      	beq.n	26550 <_sercom_get_default_pad+0xc0>
   264d0:	e07d      	b.n	265ce <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   264d2:	1cfb      	adds	r3, r7, #3
   264d4:	781b      	ldrb	r3, [r3, #0]
   264d6:	2b01      	cmp	r3, #1
   264d8:	d00a      	beq.n	264f0 <_sercom_get_default_pad+0x60>
   264da:	dc02      	bgt.n	264e2 <_sercom_get_default_pad+0x52>
   264dc:	2b00      	cmp	r3, #0
   264de:	d005      	beq.n	264ec <_sercom_get_default_pad+0x5c>
   264e0:	e075      	b.n	265ce <_sercom_get_default_pad+0x13e>
   264e2:	2b02      	cmp	r3, #2
   264e4:	d006      	beq.n	264f4 <_sercom_get_default_pad+0x64>
   264e6:	2b03      	cmp	r3, #3
   264e8:	d006      	beq.n	264f8 <_sercom_get_default_pad+0x68>
   264ea:	e070      	b.n	265ce <_sercom_get_default_pad+0x13e>
   264ec:	4b40      	ldr	r3, [pc, #256]	; (265f0 <_sercom_get_default_pad+0x160>)
   264ee:	e06f      	b.n	265d0 <_sercom_get_default_pad+0x140>
   264f0:	4b40      	ldr	r3, [pc, #256]	; (265f4 <_sercom_get_default_pad+0x164>)
   264f2:	e06d      	b.n	265d0 <_sercom_get_default_pad+0x140>
   264f4:	4b40      	ldr	r3, [pc, #256]	; (265f8 <_sercom_get_default_pad+0x168>)
   264f6:	e06b      	b.n	265d0 <_sercom_get_default_pad+0x140>
   264f8:	4b40      	ldr	r3, [pc, #256]	; (265fc <_sercom_get_default_pad+0x16c>)
   264fa:	e069      	b.n	265d0 <_sercom_get_default_pad+0x140>
   264fc:	1cfb      	adds	r3, r7, #3
   264fe:	781b      	ldrb	r3, [r3, #0]
   26500:	2b01      	cmp	r3, #1
   26502:	d00a      	beq.n	2651a <_sercom_get_default_pad+0x8a>
   26504:	dc02      	bgt.n	2650c <_sercom_get_default_pad+0x7c>
   26506:	2b00      	cmp	r3, #0
   26508:	d005      	beq.n	26516 <_sercom_get_default_pad+0x86>
   2650a:	e060      	b.n	265ce <_sercom_get_default_pad+0x13e>
   2650c:	2b02      	cmp	r3, #2
   2650e:	d006      	beq.n	2651e <_sercom_get_default_pad+0x8e>
   26510:	2b03      	cmp	r3, #3
   26512:	d006      	beq.n	26522 <_sercom_get_default_pad+0x92>
   26514:	e05b      	b.n	265ce <_sercom_get_default_pad+0x13e>
   26516:	2303      	movs	r3, #3
   26518:	e05a      	b.n	265d0 <_sercom_get_default_pad+0x140>
   2651a:	4b39      	ldr	r3, [pc, #228]	; (26600 <_sercom_get_default_pad+0x170>)
   2651c:	e058      	b.n	265d0 <_sercom_get_default_pad+0x140>
   2651e:	4b39      	ldr	r3, [pc, #228]	; (26604 <_sercom_get_default_pad+0x174>)
   26520:	e056      	b.n	265d0 <_sercom_get_default_pad+0x140>
   26522:	4b39      	ldr	r3, [pc, #228]	; (26608 <_sercom_get_default_pad+0x178>)
   26524:	e054      	b.n	265d0 <_sercom_get_default_pad+0x140>
   26526:	1cfb      	adds	r3, r7, #3
   26528:	781b      	ldrb	r3, [r3, #0]
   2652a:	2b01      	cmp	r3, #1
   2652c:	d00a      	beq.n	26544 <_sercom_get_default_pad+0xb4>
   2652e:	dc02      	bgt.n	26536 <_sercom_get_default_pad+0xa6>
   26530:	2b00      	cmp	r3, #0
   26532:	d005      	beq.n	26540 <_sercom_get_default_pad+0xb0>
   26534:	e04b      	b.n	265ce <_sercom_get_default_pad+0x13e>
   26536:	2b02      	cmp	r3, #2
   26538:	d006      	beq.n	26548 <_sercom_get_default_pad+0xb8>
   2653a:	2b03      	cmp	r3, #3
   2653c:	d006      	beq.n	2654c <_sercom_get_default_pad+0xbc>
   2653e:	e046      	b.n	265ce <_sercom_get_default_pad+0x13e>
   26540:	4b32      	ldr	r3, [pc, #200]	; (2660c <_sercom_get_default_pad+0x17c>)
   26542:	e045      	b.n	265d0 <_sercom_get_default_pad+0x140>
   26544:	4b32      	ldr	r3, [pc, #200]	; (26610 <_sercom_get_default_pad+0x180>)
   26546:	e043      	b.n	265d0 <_sercom_get_default_pad+0x140>
   26548:	4b32      	ldr	r3, [pc, #200]	; (26614 <_sercom_get_default_pad+0x184>)
   2654a:	e041      	b.n	265d0 <_sercom_get_default_pad+0x140>
   2654c:	4b32      	ldr	r3, [pc, #200]	; (26618 <_sercom_get_default_pad+0x188>)
   2654e:	e03f      	b.n	265d0 <_sercom_get_default_pad+0x140>
   26550:	1cfb      	adds	r3, r7, #3
   26552:	781b      	ldrb	r3, [r3, #0]
   26554:	2b01      	cmp	r3, #1
   26556:	d00a      	beq.n	2656e <_sercom_get_default_pad+0xde>
   26558:	dc02      	bgt.n	26560 <_sercom_get_default_pad+0xd0>
   2655a:	2b00      	cmp	r3, #0
   2655c:	d005      	beq.n	2656a <_sercom_get_default_pad+0xda>
   2655e:	e036      	b.n	265ce <_sercom_get_default_pad+0x13e>
   26560:	2b02      	cmp	r3, #2
   26562:	d006      	beq.n	26572 <_sercom_get_default_pad+0xe2>
   26564:	2b03      	cmp	r3, #3
   26566:	d006      	beq.n	26576 <_sercom_get_default_pad+0xe6>
   26568:	e031      	b.n	265ce <_sercom_get_default_pad+0x13e>
   2656a:	4b2c      	ldr	r3, [pc, #176]	; (2661c <_sercom_get_default_pad+0x18c>)
   2656c:	e030      	b.n	265d0 <_sercom_get_default_pad+0x140>
   2656e:	4b2c      	ldr	r3, [pc, #176]	; (26620 <_sercom_get_default_pad+0x190>)
   26570:	e02e      	b.n	265d0 <_sercom_get_default_pad+0x140>
   26572:	4b2c      	ldr	r3, [pc, #176]	; (26624 <_sercom_get_default_pad+0x194>)
   26574:	e02c      	b.n	265d0 <_sercom_get_default_pad+0x140>
   26576:	4b2c      	ldr	r3, [pc, #176]	; (26628 <_sercom_get_default_pad+0x198>)
   26578:	e02a      	b.n	265d0 <_sercom_get_default_pad+0x140>
   2657a:	1cfb      	adds	r3, r7, #3
   2657c:	781b      	ldrb	r3, [r3, #0]
   2657e:	2b01      	cmp	r3, #1
   26580:	d00a      	beq.n	26598 <_sercom_get_default_pad+0x108>
   26582:	dc02      	bgt.n	2658a <_sercom_get_default_pad+0xfa>
   26584:	2b00      	cmp	r3, #0
   26586:	d005      	beq.n	26594 <_sercom_get_default_pad+0x104>
   26588:	e021      	b.n	265ce <_sercom_get_default_pad+0x13e>
   2658a:	2b02      	cmp	r3, #2
   2658c:	d006      	beq.n	2659c <_sercom_get_default_pad+0x10c>
   2658e:	2b03      	cmp	r3, #3
   26590:	d006      	beq.n	265a0 <_sercom_get_default_pad+0x110>
   26592:	e01c      	b.n	265ce <_sercom_get_default_pad+0x13e>
   26594:	4b25      	ldr	r3, [pc, #148]	; (2662c <_sercom_get_default_pad+0x19c>)
   26596:	e01b      	b.n	265d0 <_sercom_get_default_pad+0x140>
   26598:	4b25      	ldr	r3, [pc, #148]	; (26630 <_sercom_get_default_pad+0x1a0>)
   2659a:	e019      	b.n	265d0 <_sercom_get_default_pad+0x140>
   2659c:	4b25      	ldr	r3, [pc, #148]	; (26634 <_sercom_get_default_pad+0x1a4>)
   2659e:	e017      	b.n	265d0 <_sercom_get_default_pad+0x140>
   265a0:	4b25      	ldr	r3, [pc, #148]	; (26638 <_sercom_get_default_pad+0x1a8>)
   265a2:	e015      	b.n	265d0 <_sercom_get_default_pad+0x140>
   265a4:	1cfb      	adds	r3, r7, #3
   265a6:	781b      	ldrb	r3, [r3, #0]
   265a8:	2b01      	cmp	r3, #1
   265aa:	d00a      	beq.n	265c2 <_sercom_get_default_pad+0x132>
   265ac:	dc02      	bgt.n	265b4 <_sercom_get_default_pad+0x124>
   265ae:	2b00      	cmp	r3, #0
   265b0:	d005      	beq.n	265be <_sercom_get_default_pad+0x12e>
   265b2:	e00c      	b.n	265ce <_sercom_get_default_pad+0x13e>
   265b4:	2b02      	cmp	r3, #2
   265b6:	d006      	beq.n	265c6 <_sercom_get_default_pad+0x136>
   265b8:	2b03      	cmp	r3, #3
   265ba:	d006      	beq.n	265ca <_sercom_get_default_pad+0x13a>
   265bc:	e007      	b.n	265ce <_sercom_get_default_pad+0x13e>
   265be:	4b1f      	ldr	r3, [pc, #124]	; (2663c <_sercom_get_default_pad+0x1ac>)
   265c0:	e006      	b.n	265d0 <_sercom_get_default_pad+0x140>
   265c2:	4b1f      	ldr	r3, [pc, #124]	; (26640 <_sercom_get_default_pad+0x1b0>)
   265c4:	e004      	b.n	265d0 <_sercom_get_default_pad+0x140>
   265c6:	4b1f      	ldr	r3, [pc, #124]	; (26644 <_sercom_get_default_pad+0x1b4>)
   265c8:	e002      	b.n	265d0 <_sercom_get_default_pad+0x140>
   265ca:	4b1f      	ldr	r3, [pc, #124]	; (26648 <_sercom_get_default_pad+0x1b8>)
   265cc:	e000      	b.n	265d0 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   265ce:	2300      	movs	r3, #0
}
   265d0:	0018      	movs	r0, r3
   265d2:	46bd      	mov	sp, r7
   265d4:	b002      	add	sp, #8
   265d6:	bd80      	pop	{r7, pc}
   265d8:	42001000 	.word	0x42001000
   265dc:	42000800 	.word	0x42000800
   265e0:	42000c00 	.word	0x42000c00
   265e4:	42001800 	.word	0x42001800
   265e8:	42001c00 	.word	0x42001c00
   265ec:	42001400 	.word	0x42001400
   265f0:	00040003 	.word	0x00040003
   265f4:	00050003 	.word	0x00050003
   265f8:	00060003 	.word	0x00060003
   265fc:	00070003 	.word	0x00070003
   26600:	00010003 	.word	0x00010003
   26604:	001e0003 	.word	0x001e0003
   26608:	001f0003 	.word	0x001f0003
   2660c:	00080003 	.word	0x00080003
   26610:	00090003 	.word	0x00090003
   26614:	000a0003 	.word	0x000a0003
   26618:	000b0003 	.word	0x000b0003
   2661c:	00100003 	.word	0x00100003
   26620:	00110003 	.word	0x00110003
   26624:	00120003 	.word	0x00120003
   26628:	00130003 	.word	0x00130003
   2662c:	000c0003 	.word	0x000c0003
   26630:	000d0003 	.word	0x000d0003
   26634:	000e0003 	.word	0x000e0003
   26638:	000f0003 	.word	0x000f0003
   2663c:	00160003 	.word	0x00160003
   26640:	00170003 	.word	0x00170003
   26644:	00180003 	.word	0x00180003
   26648:	00190003 	.word	0x00190003

0002664c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   2664c:	b590      	push	{r4, r7, lr}
   2664e:	b08b      	sub	sp, #44	; 0x2c
   26650:	af00      	add	r7, sp, #0
   26652:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   26654:	230c      	movs	r3, #12
   26656:	18fb      	adds	r3, r7, r3
   26658:	4a0f      	ldr	r2, [pc, #60]	; (26698 <_sercom_get_sercom_inst_index+0x4c>)
   2665a:	ca13      	ldmia	r2!, {r0, r1, r4}
   2665c:	c313      	stmia	r3!, {r0, r1, r4}
   2665e:	ca13      	ldmia	r2!, {r0, r1, r4}
   26660:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   26662:	2300      	movs	r3, #0
   26664:	627b      	str	r3, [r7, #36]	; 0x24
   26666:	e00e      	b.n	26686 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   26668:	230c      	movs	r3, #12
   2666a:	18fb      	adds	r3, r7, r3
   2666c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2666e:	0092      	lsls	r2, r2, #2
   26670:	58d3      	ldr	r3, [r2, r3]
   26672:	001a      	movs	r2, r3
   26674:	687b      	ldr	r3, [r7, #4]
   26676:	429a      	cmp	r2, r3
   26678:	d102      	bne.n	26680 <_sercom_get_sercom_inst_index+0x34>
			return i;
   2667a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2667c:	b2db      	uxtb	r3, r3
   2667e:	e006      	b.n	2668e <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   26680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   26682:	3301      	adds	r3, #1
   26684:	627b      	str	r3, [r7, #36]	; 0x24
   26686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   26688:	2b05      	cmp	r3, #5
   2668a:	d9ed      	bls.n	26668 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   2668c:	2300      	movs	r3, #0
}
   2668e:	0018      	movs	r0, r3
   26690:	46bd      	mov	sp, r7
   26692:	b00b      	add	sp, #44	; 0x2c
   26694:	bd90      	pop	{r4, r7, pc}
   26696:	46c0      	nop			; (mov r8, r8)
   26698:	00038ef0 	.word	0x00038ef0

0002669c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   2669c:	b580      	push	{r7, lr}
   2669e:	b082      	sub	sp, #8
   266a0:	af00      	add	r7, sp, #0
   266a2:	0002      	movs	r2, r0
   266a4:	1dfb      	adds	r3, r7, #7
   266a6:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   266a8:	46c0      	nop			; (mov r8, r8)
   266aa:	46bd      	mov	sp, r7
   266ac:	b002      	add	sp, #8
   266ae:	bd80      	pop	{r7, pc}

000266b0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   266b0:	b580      	push	{r7, lr}
   266b2:	b084      	sub	sp, #16
   266b4:	af00      	add	r7, sp, #0
   266b6:	0002      	movs	r2, r0
   266b8:	6039      	str	r1, [r7, #0]
   266ba:	1dfb      	adds	r3, r7, #7
   266bc:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   266be:	4b13      	ldr	r3, [pc, #76]	; (2670c <_sercom_set_handler+0x5c>)
   266c0:	781b      	ldrb	r3, [r3, #0]
   266c2:	2201      	movs	r2, #1
   266c4:	4053      	eors	r3, r2
   266c6:	b2db      	uxtb	r3, r3
   266c8:	2b00      	cmp	r3, #0
   266ca:	d015      	beq.n	266f8 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   266cc:	2300      	movs	r3, #0
   266ce:	60fb      	str	r3, [r7, #12]
   266d0:	e00c      	b.n	266ec <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   266d2:	4b0f      	ldr	r3, [pc, #60]	; (26710 <_sercom_set_handler+0x60>)
   266d4:	68fa      	ldr	r2, [r7, #12]
   266d6:	0092      	lsls	r2, r2, #2
   266d8:	490e      	ldr	r1, [pc, #56]	; (26714 <_sercom_set_handler+0x64>)
   266da:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   266dc:	4b0e      	ldr	r3, [pc, #56]	; (26718 <_sercom_set_handler+0x68>)
   266de:	68fa      	ldr	r2, [r7, #12]
   266e0:	0092      	lsls	r2, r2, #2
   266e2:	2100      	movs	r1, #0
   266e4:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   266e6:	68fb      	ldr	r3, [r7, #12]
   266e8:	3301      	adds	r3, #1
   266ea:	60fb      	str	r3, [r7, #12]
   266ec:	68fb      	ldr	r3, [r7, #12]
   266ee:	2b05      	cmp	r3, #5
   266f0:	d9ef      	bls.n	266d2 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   266f2:	4b06      	ldr	r3, [pc, #24]	; (2670c <_sercom_set_handler+0x5c>)
   266f4:	2201      	movs	r2, #1
   266f6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   266f8:	1dfb      	adds	r3, r7, #7
   266fa:	781a      	ldrb	r2, [r3, #0]
   266fc:	4b04      	ldr	r3, [pc, #16]	; (26710 <_sercom_set_handler+0x60>)
   266fe:	0092      	lsls	r2, r2, #2
   26700:	6839      	ldr	r1, [r7, #0]
   26702:	50d1      	str	r1, [r2, r3]
}
   26704:	46c0      	nop			; (mov r8, r8)
   26706:	46bd      	mov	sp, r7
   26708:	b004      	add	sp, #16
   2670a:	bd80      	pop	{r7, pc}
   2670c:	2000428e 	.word	0x2000428e
   26710:	20004290 	.word	0x20004290
   26714:	0002669d 	.word	0x0002669d
   26718:	20005bcc 	.word	0x20005bcc

0002671c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   2671c:	b590      	push	{r4, r7, lr}
   2671e:	b085      	sub	sp, #20
   26720:	af00      	add	r7, sp, #0
   26722:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   26724:	2308      	movs	r3, #8
   26726:	18fb      	adds	r3, r7, r3
   26728:	4a0b      	ldr	r2, [pc, #44]	; (26758 <_sercom_get_interrupt_vector+0x3c>)
   2672a:	6811      	ldr	r1, [r2, #0]
   2672c:	6019      	str	r1, [r3, #0]
   2672e:	8892      	ldrh	r2, [r2, #4]
   26730:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   26732:	230f      	movs	r3, #15
   26734:	18fc      	adds	r4, r7, r3
   26736:	687b      	ldr	r3, [r7, #4]
   26738:	0018      	movs	r0, r3
   2673a:	4b08      	ldr	r3, [pc, #32]	; (2675c <_sercom_get_interrupt_vector+0x40>)
   2673c:	4798      	blx	r3
   2673e:	0003      	movs	r3, r0
   26740:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   26742:	230f      	movs	r3, #15
   26744:	18fb      	adds	r3, r7, r3
   26746:	781b      	ldrb	r3, [r3, #0]
   26748:	2208      	movs	r2, #8
   2674a:	18ba      	adds	r2, r7, r2
   2674c:	5cd3      	ldrb	r3, [r2, r3]
   2674e:	b25b      	sxtb	r3, r3
}
   26750:	0018      	movs	r0, r3
   26752:	46bd      	mov	sp, r7
   26754:	b005      	add	sp, #20
   26756:	bd90      	pop	{r4, r7, pc}
   26758:	00038f08 	.word	0x00038f08
   2675c:	0002664d 	.word	0x0002664d

00026760 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   26760:	b580      	push	{r7, lr}
   26762:	af00      	add	r7, sp, #0
   26764:	4b03      	ldr	r3, [pc, #12]	; (26774 <SERCOM0_Handler+0x14>)
   26766:	681b      	ldr	r3, [r3, #0]
   26768:	2000      	movs	r0, #0
   2676a:	4798      	blx	r3
   2676c:	46c0      	nop			; (mov r8, r8)
   2676e:	46bd      	mov	sp, r7
   26770:	bd80      	pop	{r7, pc}
   26772:	46c0      	nop			; (mov r8, r8)
   26774:	20004290 	.word	0x20004290

00026778 <SERCOM1_Handler>:
   26778:	b580      	push	{r7, lr}
   2677a:	af00      	add	r7, sp, #0
   2677c:	4b03      	ldr	r3, [pc, #12]	; (2678c <SERCOM1_Handler+0x14>)
   2677e:	685b      	ldr	r3, [r3, #4]
   26780:	2001      	movs	r0, #1
   26782:	4798      	blx	r3
   26784:	46c0      	nop			; (mov r8, r8)
   26786:	46bd      	mov	sp, r7
   26788:	bd80      	pop	{r7, pc}
   2678a:	46c0      	nop			; (mov r8, r8)
   2678c:	20004290 	.word	0x20004290

00026790 <SERCOM2_Handler>:
   26790:	b580      	push	{r7, lr}
   26792:	af00      	add	r7, sp, #0
   26794:	4b03      	ldr	r3, [pc, #12]	; (267a4 <SERCOM2_Handler+0x14>)
   26796:	689b      	ldr	r3, [r3, #8]
   26798:	2002      	movs	r0, #2
   2679a:	4798      	blx	r3
   2679c:	46c0      	nop			; (mov r8, r8)
   2679e:	46bd      	mov	sp, r7
   267a0:	bd80      	pop	{r7, pc}
   267a2:	46c0      	nop			; (mov r8, r8)
   267a4:	20004290 	.word	0x20004290

000267a8 <SERCOM3_Handler>:
   267a8:	b580      	push	{r7, lr}
   267aa:	af00      	add	r7, sp, #0
   267ac:	4b03      	ldr	r3, [pc, #12]	; (267bc <SERCOM3_Handler+0x14>)
   267ae:	68db      	ldr	r3, [r3, #12]
   267b0:	2003      	movs	r0, #3
   267b2:	4798      	blx	r3
   267b4:	46c0      	nop			; (mov r8, r8)
   267b6:	46bd      	mov	sp, r7
   267b8:	bd80      	pop	{r7, pc}
   267ba:	46c0      	nop			; (mov r8, r8)
   267bc:	20004290 	.word	0x20004290

000267c0 <SERCOM4_Handler>:
   267c0:	b580      	push	{r7, lr}
   267c2:	af00      	add	r7, sp, #0
   267c4:	4b03      	ldr	r3, [pc, #12]	; (267d4 <SERCOM4_Handler+0x14>)
   267c6:	691b      	ldr	r3, [r3, #16]
   267c8:	2004      	movs	r0, #4
   267ca:	4798      	blx	r3
   267cc:	46c0      	nop			; (mov r8, r8)
   267ce:	46bd      	mov	sp, r7
   267d0:	bd80      	pop	{r7, pc}
   267d2:	46c0      	nop			; (mov r8, r8)
   267d4:	20004290 	.word	0x20004290

000267d8 <SERCOM5_Handler>:
   267d8:	b580      	push	{r7, lr}
   267da:	af00      	add	r7, sp, #0
   267dc:	4b03      	ldr	r3, [pc, #12]	; (267ec <SERCOM5_Handler+0x14>)
   267de:	695b      	ldr	r3, [r3, #20]
   267e0:	2005      	movs	r0, #5
   267e2:	4798      	blx	r3
   267e4:	46c0      	nop			; (mov r8, r8)
   267e6:	46bd      	mov	sp, r7
   267e8:	bd80      	pop	{r7, pc}
   267ea:	46c0      	nop			; (mov r8, r8)
   267ec:	20004290 	.word	0x20004290

000267f0 <system_pinmux_get_config_defaults>:
{
   267f0:	b580      	push	{r7, lr}
   267f2:	b082      	sub	sp, #8
   267f4:	af00      	add	r7, sp, #0
   267f6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   267f8:	687b      	ldr	r3, [r7, #4]
   267fa:	2280      	movs	r2, #128	; 0x80
   267fc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   267fe:	687b      	ldr	r3, [r7, #4]
   26800:	2200      	movs	r2, #0
   26802:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   26804:	687b      	ldr	r3, [r7, #4]
   26806:	2201      	movs	r2, #1
   26808:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2680a:	687b      	ldr	r3, [r7, #4]
   2680c:	2200      	movs	r2, #0
   2680e:	70da      	strb	r2, [r3, #3]
}
   26810:	46c0      	nop			; (mov r8, r8)
   26812:	46bd      	mov	sp, r7
   26814:	b002      	add	sp, #8
   26816:	bd80      	pop	{r7, pc}

00026818 <system_pinmux_get_group_from_gpio_pin>:
{
   26818:	b580      	push	{r7, lr}
   2681a:	b084      	sub	sp, #16
   2681c:	af00      	add	r7, sp, #0
   2681e:	0002      	movs	r2, r0
   26820:	1dfb      	adds	r3, r7, #7
   26822:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   26824:	230f      	movs	r3, #15
   26826:	18fb      	adds	r3, r7, r3
   26828:	1dfa      	adds	r2, r7, #7
   2682a:	7812      	ldrb	r2, [r2, #0]
   2682c:	09d2      	lsrs	r2, r2, #7
   2682e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   26830:	230e      	movs	r3, #14
   26832:	18fb      	adds	r3, r7, r3
   26834:	1dfa      	adds	r2, r7, #7
   26836:	7812      	ldrb	r2, [r2, #0]
   26838:	0952      	lsrs	r2, r2, #5
   2683a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2683c:	4b0d      	ldr	r3, [pc, #52]	; (26874 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2683e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   26840:	230f      	movs	r3, #15
   26842:	18fb      	adds	r3, r7, r3
   26844:	781b      	ldrb	r3, [r3, #0]
   26846:	2b00      	cmp	r3, #0
   26848:	d10f      	bne.n	2686a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2684a:	230f      	movs	r3, #15
   2684c:	18fb      	adds	r3, r7, r3
   2684e:	781b      	ldrb	r3, [r3, #0]
   26850:	009b      	lsls	r3, r3, #2
   26852:	2210      	movs	r2, #16
   26854:	4694      	mov	ip, r2
   26856:	44bc      	add	ip, r7
   26858:	4463      	add	r3, ip
   2685a:	3b08      	subs	r3, #8
   2685c:	681a      	ldr	r2, [r3, #0]
   2685e:	230e      	movs	r3, #14
   26860:	18fb      	adds	r3, r7, r3
   26862:	781b      	ldrb	r3, [r3, #0]
   26864:	01db      	lsls	r3, r3, #7
   26866:	18d3      	adds	r3, r2, r3
   26868:	e000      	b.n	2686c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2686a:	2300      	movs	r3, #0
}
   2686c:	0018      	movs	r0, r3
   2686e:	46bd      	mov	sp, r7
   26870:	b004      	add	sp, #16
   26872:	bd80      	pop	{r7, pc}
   26874:	41004400 	.word	0x41004400

00026878 <port_get_group_from_gpio_pin>:
{
   26878:	b580      	push	{r7, lr}
   2687a:	b082      	sub	sp, #8
   2687c:	af00      	add	r7, sp, #0
   2687e:	0002      	movs	r2, r0
   26880:	1dfb      	adds	r3, r7, #7
   26882:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   26884:	1dfb      	adds	r3, r7, #7
   26886:	781b      	ldrb	r3, [r3, #0]
   26888:	0018      	movs	r0, r3
   2688a:	4b03      	ldr	r3, [pc, #12]	; (26898 <port_get_group_from_gpio_pin+0x20>)
   2688c:	4798      	blx	r3
   2688e:	0003      	movs	r3, r0
}
   26890:	0018      	movs	r0, r3
   26892:	46bd      	mov	sp, r7
   26894:	b002      	add	sp, #8
   26896:	bd80      	pop	{r7, pc}
   26898:	00026819 	.word	0x00026819

0002689c <port_pin_set_output_level>:
{
   2689c:	b580      	push	{r7, lr}
   2689e:	b084      	sub	sp, #16
   268a0:	af00      	add	r7, sp, #0
   268a2:	0002      	movs	r2, r0
   268a4:	1dfb      	adds	r3, r7, #7
   268a6:	701a      	strb	r2, [r3, #0]
   268a8:	1dbb      	adds	r3, r7, #6
   268aa:	1c0a      	adds	r2, r1, #0
   268ac:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   268ae:	1dfb      	adds	r3, r7, #7
   268b0:	781b      	ldrb	r3, [r3, #0]
   268b2:	0018      	movs	r0, r3
   268b4:	4b0d      	ldr	r3, [pc, #52]	; (268ec <port_pin_set_output_level+0x50>)
   268b6:	4798      	blx	r3
   268b8:	0003      	movs	r3, r0
   268ba:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   268bc:	1dfb      	adds	r3, r7, #7
   268be:	781b      	ldrb	r3, [r3, #0]
   268c0:	221f      	movs	r2, #31
   268c2:	4013      	ands	r3, r2
   268c4:	2201      	movs	r2, #1
   268c6:	409a      	lsls	r2, r3
   268c8:	0013      	movs	r3, r2
   268ca:	60bb      	str	r3, [r7, #8]
	if (level) {
   268cc:	1dbb      	adds	r3, r7, #6
   268ce:	781b      	ldrb	r3, [r3, #0]
   268d0:	2b00      	cmp	r3, #0
   268d2:	d003      	beq.n	268dc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   268d4:	68fb      	ldr	r3, [r7, #12]
   268d6:	68ba      	ldr	r2, [r7, #8]
   268d8:	619a      	str	r2, [r3, #24]
}
   268da:	e002      	b.n	268e2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   268dc:	68fb      	ldr	r3, [r7, #12]
   268de:	68ba      	ldr	r2, [r7, #8]
   268e0:	615a      	str	r2, [r3, #20]
}
   268e2:	46c0      	nop			; (mov r8, r8)
   268e4:	46bd      	mov	sp, r7
   268e6:	b004      	add	sp, #16
   268e8:	bd80      	pop	{r7, pc}
   268ea:	46c0      	nop			; (mov r8, r8)
   268ec:	00026879 	.word	0x00026879

000268f0 <system_gclk_chan_get_config_defaults>:
{
   268f0:	b580      	push	{r7, lr}
   268f2:	b082      	sub	sp, #8
   268f4:	af00      	add	r7, sp, #0
   268f6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   268f8:	687b      	ldr	r3, [r7, #4]
   268fa:	2200      	movs	r2, #0
   268fc:	701a      	strb	r2, [r3, #0]
}
   268fe:	46c0      	nop			; (mov r8, r8)
   26900:	46bd      	mov	sp, r7
   26902:	b002      	add	sp, #8
   26904:	bd80      	pop	{r7, pc}
	...

00026908 <system_apb_clock_set_mask>:
{
   26908:	b580      	push	{r7, lr}
   2690a:	b082      	sub	sp, #8
   2690c:	af00      	add	r7, sp, #0
   2690e:	0002      	movs	r2, r0
   26910:	6039      	str	r1, [r7, #0]
   26912:	1dfb      	adds	r3, r7, #7
   26914:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   26916:	1dfb      	adds	r3, r7, #7
   26918:	781b      	ldrb	r3, [r3, #0]
   2691a:	2b01      	cmp	r3, #1
   2691c:	d00a      	beq.n	26934 <system_apb_clock_set_mask+0x2c>
   2691e:	2b02      	cmp	r3, #2
   26920:	d00f      	beq.n	26942 <system_apb_clock_set_mask+0x3a>
   26922:	2b00      	cmp	r3, #0
   26924:	d114      	bne.n	26950 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   26926:	4b0e      	ldr	r3, [pc, #56]	; (26960 <system_apb_clock_set_mask+0x58>)
   26928:	4a0d      	ldr	r2, [pc, #52]	; (26960 <system_apb_clock_set_mask+0x58>)
   2692a:	6991      	ldr	r1, [r2, #24]
   2692c:	683a      	ldr	r2, [r7, #0]
   2692e:	430a      	orrs	r2, r1
   26930:	619a      	str	r2, [r3, #24]
			break;
   26932:	e00f      	b.n	26954 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   26934:	4b0a      	ldr	r3, [pc, #40]	; (26960 <system_apb_clock_set_mask+0x58>)
   26936:	4a0a      	ldr	r2, [pc, #40]	; (26960 <system_apb_clock_set_mask+0x58>)
   26938:	69d1      	ldr	r1, [r2, #28]
   2693a:	683a      	ldr	r2, [r7, #0]
   2693c:	430a      	orrs	r2, r1
   2693e:	61da      	str	r2, [r3, #28]
			break;
   26940:	e008      	b.n	26954 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   26942:	4b07      	ldr	r3, [pc, #28]	; (26960 <system_apb_clock_set_mask+0x58>)
   26944:	4a06      	ldr	r2, [pc, #24]	; (26960 <system_apb_clock_set_mask+0x58>)
   26946:	6a11      	ldr	r1, [r2, #32]
   26948:	683a      	ldr	r2, [r7, #0]
   2694a:	430a      	orrs	r2, r1
   2694c:	621a      	str	r2, [r3, #32]
			break;
   2694e:	e001      	b.n	26954 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   26950:	2317      	movs	r3, #23
   26952:	e000      	b.n	26956 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   26954:	2300      	movs	r3, #0
}
   26956:	0018      	movs	r0, r3
   26958:	46bd      	mov	sp, r7
   2695a:	b002      	add	sp, #8
   2695c:	bd80      	pop	{r7, pc}
   2695e:	46c0      	nop			; (mov r8, r8)
   26960:	40000400 	.word	0x40000400

00026964 <system_is_debugger_present>:
{
   26964:	b580      	push	{r7, lr}
   26966:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   26968:	4b05      	ldr	r3, [pc, #20]	; (26980 <system_is_debugger_present+0x1c>)
   2696a:	789b      	ldrb	r3, [r3, #2]
   2696c:	b2db      	uxtb	r3, r3
   2696e:	001a      	movs	r2, r3
   26970:	2302      	movs	r3, #2
   26972:	4013      	ands	r3, r2
   26974:	1e5a      	subs	r2, r3, #1
   26976:	4193      	sbcs	r3, r2
   26978:	b2db      	uxtb	r3, r3
}
   2697a:	0018      	movs	r0, r3
   2697c:	46bd      	mov	sp, r7
   2697e:	bd80      	pop	{r7, pc}
   26980:	41002000 	.word	0x41002000

00026984 <system_interrupt_enable>:
{
   26984:	b580      	push	{r7, lr}
   26986:	b082      	sub	sp, #8
   26988:	af00      	add	r7, sp, #0
   2698a:	0002      	movs	r2, r0
   2698c:	1dfb      	adds	r3, r7, #7
   2698e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   26990:	4b06      	ldr	r3, [pc, #24]	; (269ac <system_interrupt_enable+0x28>)
   26992:	1dfa      	adds	r2, r7, #7
   26994:	7812      	ldrb	r2, [r2, #0]
   26996:	0011      	movs	r1, r2
   26998:	221f      	movs	r2, #31
   2699a:	400a      	ands	r2, r1
   2699c:	2101      	movs	r1, #1
   2699e:	4091      	lsls	r1, r2
   269a0:	000a      	movs	r2, r1
   269a2:	601a      	str	r2, [r3, #0]
}
   269a4:	46c0      	nop			; (mov r8, r8)
   269a6:	46bd      	mov	sp, r7
   269a8:	b002      	add	sp, #8
   269aa:	bd80      	pop	{r7, pc}
   269ac:	e000e100 	.word	0xe000e100

000269b0 <system_interrupt_disable>:
{
   269b0:	b580      	push	{r7, lr}
   269b2:	b082      	sub	sp, #8
   269b4:	af00      	add	r7, sp, #0
   269b6:	0002      	movs	r2, r0
   269b8:	1dfb      	adds	r3, r7, #7
   269ba:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   269bc:	4a07      	ldr	r2, [pc, #28]	; (269dc <system_interrupt_disable+0x2c>)
   269be:	1dfb      	adds	r3, r7, #7
   269c0:	781b      	ldrb	r3, [r3, #0]
   269c2:	0019      	movs	r1, r3
   269c4:	231f      	movs	r3, #31
   269c6:	400b      	ands	r3, r1
   269c8:	2101      	movs	r1, #1
   269ca:	4099      	lsls	r1, r3
   269cc:	000b      	movs	r3, r1
   269ce:	0019      	movs	r1, r3
   269d0:	2380      	movs	r3, #128	; 0x80
   269d2:	50d1      	str	r1, [r2, r3]
}
   269d4:	46c0      	nop			; (mov r8, r8)
   269d6:	46bd      	mov	sp, r7
   269d8:	b002      	add	sp, #8
   269da:	bd80      	pop	{r7, pc}
   269dc:	e000e100 	.word	0xe000e100

000269e0 <spi_is_syncing>:
{
   269e0:	b580      	push	{r7, lr}
   269e2:	b084      	sub	sp, #16
   269e4:	af00      	add	r7, sp, #0
   269e6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   269e8:	687b      	ldr	r3, [r7, #4]
   269ea:	681b      	ldr	r3, [r3, #0]
   269ec:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   269ee:	68fb      	ldr	r3, [r7, #12]
   269f0:	69db      	ldr	r3, [r3, #28]
   269f2:	1e5a      	subs	r2, r3, #1
   269f4:	4193      	sbcs	r3, r2
   269f6:	b2db      	uxtb	r3, r3
}
   269f8:	0018      	movs	r0, r3
   269fa:	46bd      	mov	sp, r7
   269fc:	b004      	add	sp, #16
   269fe:	bd80      	pop	{r7, pc}

00026a00 <spi_enable>:
{
   26a00:	b580      	push	{r7, lr}
   26a02:	b084      	sub	sp, #16
   26a04:	af00      	add	r7, sp, #0
   26a06:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26a08:	687b      	ldr	r3, [r7, #4]
   26a0a:	681b      	ldr	r3, [r3, #0]
   26a0c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   26a0e:	687b      	ldr	r3, [r7, #4]
   26a10:	681b      	ldr	r3, [r3, #0]
   26a12:	0018      	movs	r0, r3
   26a14:	4b0b      	ldr	r3, [pc, #44]	; (26a44 <spi_enable+0x44>)
   26a16:	4798      	blx	r3
   26a18:	0003      	movs	r3, r0
   26a1a:	0018      	movs	r0, r3
   26a1c:	4b0a      	ldr	r3, [pc, #40]	; (26a48 <spi_enable+0x48>)
   26a1e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   26a20:	46c0      	nop			; (mov r8, r8)
   26a22:	687b      	ldr	r3, [r7, #4]
   26a24:	0018      	movs	r0, r3
   26a26:	4b09      	ldr	r3, [pc, #36]	; (26a4c <spi_enable+0x4c>)
   26a28:	4798      	blx	r3
   26a2a:	1e03      	subs	r3, r0, #0
   26a2c:	d1f9      	bne.n	26a22 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   26a2e:	68fb      	ldr	r3, [r7, #12]
   26a30:	681b      	ldr	r3, [r3, #0]
   26a32:	2202      	movs	r2, #2
   26a34:	431a      	orrs	r2, r3
   26a36:	68fb      	ldr	r3, [r7, #12]
   26a38:	601a      	str	r2, [r3, #0]
}
   26a3a:	46c0      	nop			; (mov r8, r8)
   26a3c:	46bd      	mov	sp, r7
   26a3e:	b004      	add	sp, #16
   26a40:	bd80      	pop	{r7, pc}
   26a42:	46c0      	nop			; (mov r8, r8)
   26a44:	0002671d 	.word	0x0002671d
   26a48:	00026985 	.word	0x00026985
   26a4c:	000269e1 	.word	0x000269e1

00026a50 <spi_disable>:
{
   26a50:	b580      	push	{r7, lr}
   26a52:	b084      	sub	sp, #16
   26a54:	af00      	add	r7, sp, #0
   26a56:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26a58:	687b      	ldr	r3, [r7, #4]
   26a5a:	681b      	ldr	r3, [r3, #0]
   26a5c:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   26a5e:	687b      	ldr	r3, [r7, #4]
   26a60:	681b      	ldr	r3, [r3, #0]
   26a62:	0018      	movs	r0, r3
   26a64:	4b0e      	ldr	r3, [pc, #56]	; (26aa0 <spi_disable+0x50>)
   26a66:	4798      	blx	r3
   26a68:	0003      	movs	r3, r0
   26a6a:	0018      	movs	r0, r3
   26a6c:	4b0d      	ldr	r3, [pc, #52]	; (26aa4 <spi_disable+0x54>)
   26a6e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   26a70:	46c0      	nop			; (mov r8, r8)
   26a72:	687b      	ldr	r3, [r7, #4]
   26a74:	0018      	movs	r0, r3
   26a76:	4b0c      	ldr	r3, [pc, #48]	; (26aa8 <spi_disable+0x58>)
   26a78:	4798      	blx	r3
   26a7a:	1e03      	subs	r3, r0, #0
   26a7c:	d1f9      	bne.n	26a72 <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   26a7e:	68fb      	ldr	r3, [r7, #12]
   26a80:	228f      	movs	r2, #143	; 0x8f
   26a82:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   26a84:	68fb      	ldr	r3, [r7, #12]
   26a86:	228f      	movs	r2, #143	; 0x8f
   26a88:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   26a8a:	68fb      	ldr	r3, [r7, #12]
   26a8c:	681b      	ldr	r3, [r3, #0]
   26a8e:	2202      	movs	r2, #2
   26a90:	4393      	bics	r3, r2
   26a92:	001a      	movs	r2, r3
   26a94:	68fb      	ldr	r3, [r7, #12]
   26a96:	601a      	str	r2, [r3, #0]
}
   26a98:	46c0      	nop			; (mov r8, r8)
   26a9a:	46bd      	mov	sp, r7
   26a9c:	b004      	add	sp, #16
   26a9e:	bd80      	pop	{r7, pc}
   26aa0:	0002671d 	.word	0x0002671d
   26aa4:	000269b1 	.word	0x000269b1
   26aa8:	000269e1 	.word	0x000269e1

00026aac <spi_is_write_complete>:
{
   26aac:	b580      	push	{r7, lr}
   26aae:	b084      	sub	sp, #16
   26ab0:	af00      	add	r7, sp, #0
   26ab2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26ab4:	687b      	ldr	r3, [r7, #4]
   26ab6:	681b      	ldr	r3, [r3, #0]
   26ab8:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   26aba:	68fb      	ldr	r3, [r7, #12]
   26abc:	7e1b      	ldrb	r3, [r3, #24]
   26abe:	b2db      	uxtb	r3, r3
   26ac0:	001a      	movs	r2, r3
   26ac2:	2302      	movs	r3, #2
   26ac4:	4013      	ands	r3, r2
   26ac6:	1e5a      	subs	r2, r3, #1
   26ac8:	4193      	sbcs	r3, r2
   26aca:	b2db      	uxtb	r3, r3
}
   26acc:	0018      	movs	r0, r3
   26ace:	46bd      	mov	sp, r7
   26ad0:	b004      	add	sp, #16
   26ad2:	bd80      	pop	{r7, pc}

00026ad4 <spi_is_ready_to_write>:
{
   26ad4:	b580      	push	{r7, lr}
   26ad6:	b084      	sub	sp, #16
   26ad8:	af00      	add	r7, sp, #0
   26ada:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26adc:	687b      	ldr	r3, [r7, #4]
   26ade:	681b      	ldr	r3, [r3, #0]
   26ae0:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   26ae2:	68fb      	ldr	r3, [r7, #12]
   26ae4:	7e1b      	ldrb	r3, [r3, #24]
   26ae6:	b2db      	uxtb	r3, r3
   26ae8:	001a      	movs	r2, r3
   26aea:	2301      	movs	r3, #1
   26aec:	4013      	ands	r3, r2
   26aee:	1e5a      	subs	r2, r3, #1
   26af0:	4193      	sbcs	r3, r2
   26af2:	b2db      	uxtb	r3, r3
}
   26af4:	0018      	movs	r0, r3
   26af6:	46bd      	mov	sp, r7
   26af8:	b004      	add	sp, #16
   26afa:	bd80      	pop	{r7, pc}

00026afc <spi_is_ready_to_read>:
{
   26afc:	b580      	push	{r7, lr}
   26afe:	b084      	sub	sp, #16
   26b00:	af00      	add	r7, sp, #0
   26b02:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26b04:	687b      	ldr	r3, [r7, #4]
   26b06:	681b      	ldr	r3, [r3, #0]
   26b08:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   26b0a:	68fb      	ldr	r3, [r7, #12]
   26b0c:	7e1b      	ldrb	r3, [r3, #24]
   26b0e:	b2db      	uxtb	r3, r3
   26b10:	001a      	movs	r2, r3
   26b12:	2304      	movs	r3, #4
   26b14:	4013      	ands	r3, r2
   26b16:	1e5a      	subs	r2, r3, #1
   26b18:	4193      	sbcs	r3, r2
   26b1a:	b2db      	uxtb	r3, r3
}
   26b1c:	0018      	movs	r0, r3
   26b1e:	46bd      	mov	sp, r7
   26b20:	b004      	add	sp, #16
   26b22:	bd80      	pop	{r7, pc}

00026b24 <spi_write>:
{
   26b24:	b580      	push	{r7, lr}
   26b26:	b084      	sub	sp, #16
   26b28:	af00      	add	r7, sp, #0
   26b2a:	6078      	str	r0, [r7, #4]
   26b2c:	000a      	movs	r2, r1
   26b2e:	1cbb      	adds	r3, r7, #2
   26b30:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26b32:	687b      	ldr	r3, [r7, #4]
   26b34:	681b      	ldr	r3, [r3, #0]
   26b36:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   26b38:	687b      	ldr	r3, [r7, #4]
   26b3a:	0018      	movs	r0, r3
   26b3c:	4b0a      	ldr	r3, [pc, #40]	; (26b68 <spi_write+0x44>)
   26b3e:	4798      	blx	r3
   26b40:	0003      	movs	r3, r0
   26b42:	001a      	movs	r2, r3
   26b44:	2301      	movs	r3, #1
   26b46:	4053      	eors	r3, r2
   26b48:	b2db      	uxtb	r3, r3
   26b4a:	2b00      	cmp	r3, #0
   26b4c:	d001      	beq.n	26b52 <spi_write+0x2e>
		return STATUS_BUSY;
   26b4e:	2305      	movs	r3, #5
   26b50:	e006      	b.n	26b60 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   26b52:	1cbb      	adds	r3, r7, #2
   26b54:	881b      	ldrh	r3, [r3, #0]
   26b56:	05db      	lsls	r3, r3, #23
   26b58:	0dda      	lsrs	r2, r3, #23
   26b5a:	68fb      	ldr	r3, [r7, #12]
   26b5c:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   26b5e:	2300      	movs	r3, #0
}
   26b60:	0018      	movs	r0, r3
   26b62:	46bd      	mov	sp, r7
   26b64:	b004      	add	sp, #16
   26b66:	bd80      	pop	{r7, pc}
   26b68:	00026ad5 	.word	0x00026ad5

00026b6c <spi_read>:
{
   26b6c:	b580      	push	{r7, lr}
   26b6e:	b084      	sub	sp, #16
   26b70:	af00      	add	r7, sp, #0
   26b72:	6078      	str	r0, [r7, #4]
   26b74:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26b76:	687b      	ldr	r3, [r7, #4]
   26b78:	681b      	ldr	r3, [r3, #0]
   26b7a:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   26b7c:	687b      	ldr	r3, [r7, #4]
   26b7e:	0018      	movs	r0, r3
   26b80:	4b1b      	ldr	r3, [pc, #108]	; (26bf0 <spi_read+0x84>)
   26b82:	4798      	blx	r3
   26b84:	0003      	movs	r3, r0
   26b86:	001a      	movs	r2, r3
   26b88:	2301      	movs	r3, #1
   26b8a:	4053      	eors	r3, r2
   26b8c:	b2db      	uxtb	r3, r3
   26b8e:	2b00      	cmp	r3, #0
   26b90:	d001      	beq.n	26b96 <spi_read+0x2a>
		return STATUS_ERR_IO;
   26b92:	2310      	movs	r3, #16
   26b94:	e027      	b.n	26be6 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   26b96:	230f      	movs	r3, #15
   26b98:	18fb      	adds	r3, r7, r3
   26b9a:	2200      	movs	r2, #0
   26b9c:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   26b9e:	68bb      	ldr	r3, [r7, #8]
   26ba0:	8b5b      	ldrh	r3, [r3, #26]
   26ba2:	b29b      	uxth	r3, r3
   26ba4:	001a      	movs	r2, r3
   26ba6:	2304      	movs	r3, #4
   26ba8:	4013      	ands	r3, r2
   26baa:	d006      	beq.n	26bba <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   26bac:	230f      	movs	r3, #15
   26bae:	18fb      	adds	r3, r7, r3
   26bb0:	221e      	movs	r2, #30
   26bb2:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   26bb4:	68bb      	ldr	r3, [r7, #8]
   26bb6:	2204      	movs	r2, #4
   26bb8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   26bba:	687b      	ldr	r3, [r7, #4]
   26bbc:	799b      	ldrb	r3, [r3, #6]
   26bbe:	2b01      	cmp	r3, #1
   26bc0:	d108      	bne.n	26bd4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   26bc2:	68bb      	ldr	r3, [r7, #8]
   26bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26bc6:	b29b      	uxth	r3, r3
   26bc8:	05db      	lsls	r3, r3, #23
   26bca:	0ddb      	lsrs	r3, r3, #23
   26bcc:	b29a      	uxth	r2, r3
   26bce:	683b      	ldr	r3, [r7, #0]
   26bd0:	801a      	strh	r2, [r3, #0]
   26bd2:	e005      	b.n	26be0 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   26bd4:	68bb      	ldr	r3, [r7, #8]
   26bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26bd8:	b2db      	uxtb	r3, r3
   26bda:	b29a      	uxth	r2, r3
   26bdc:	683b      	ldr	r3, [r7, #0]
   26bde:	801a      	strh	r2, [r3, #0]
	return retval;
   26be0:	230f      	movs	r3, #15
   26be2:	18fb      	adds	r3, r7, r3
   26be4:	781b      	ldrb	r3, [r3, #0]
}
   26be6:	0018      	movs	r0, r3
   26be8:	46bd      	mov	sp, r7
   26bea:	b004      	add	sp, #16
   26bec:	bd80      	pop	{r7, pc}
   26bee:	46c0      	nop			; (mov r8, r8)
   26bf0:	00026afd 	.word	0x00026afd

00026bf4 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   26bf4:	b590      	push	{r4, r7, lr}
   26bf6:	b089      	sub	sp, #36	; 0x24
   26bf8:	af00      	add	r7, sp, #0
   26bfa:	6078      	str	r0, [r7, #4]
   26bfc:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   26bfe:	230c      	movs	r3, #12
   26c00:	18fb      	adds	r3, r7, r3
   26c02:	2200      	movs	r2, #0
   26c04:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   26c06:	687b      	ldr	r3, [r7, #4]
   26c08:	681b      	ldr	r3, [r3, #0]
   26c0a:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   26c0c:	687b      	ldr	r3, [r7, #4]
   26c0e:	0018      	movs	r0, r3
   26c10:	4b24      	ldr	r3, [pc, #144]	; (26ca4 <spi_set_baudrate+0xb0>)
   26c12:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   26c14:	46c0      	nop			; (mov r8, r8)
   26c16:	687b      	ldr	r3, [r7, #4]
   26c18:	0018      	movs	r0, r3
   26c1a:	4b23      	ldr	r3, [pc, #140]	; (26ca8 <spi_set_baudrate+0xb4>)
   26c1c:	4798      	blx	r3
   26c1e:	1e03      	subs	r3, r0, #0
   26c20:	d1f9      	bne.n	26c16 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   26c22:	687b      	ldr	r3, [r7, #4]
   26c24:	681b      	ldr	r3, [r3, #0]
   26c26:	0018      	movs	r0, r3
   26c28:	4b20      	ldr	r3, [pc, #128]	; (26cac <spi_set_baudrate+0xb8>)
   26c2a:	4798      	blx	r3
   26c2c:	0003      	movs	r3, r0
   26c2e:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   26c30:	69bb      	ldr	r3, [r7, #24]
   26c32:	3314      	adds	r3, #20
   26c34:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   26c36:	697b      	ldr	r3, [r7, #20]
   26c38:	b2db      	uxtb	r3, r3
   26c3a:	0018      	movs	r0, r3
   26c3c:	4b1c      	ldr	r3, [pc, #112]	; (26cb0 <spi_set_baudrate+0xbc>)
   26c3e:	4798      	blx	r3
   26c40:	0003      	movs	r3, r0
   26c42:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   26c44:	230f      	movs	r3, #15
   26c46:	18fc      	adds	r4, r7, r3
   26c48:	230c      	movs	r3, #12
   26c4a:	18fa      	adds	r2, r7, r3
   26c4c:	6939      	ldr	r1, [r7, #16]
   26c4e:	683b      	ldr	r3, [r7, #0]
   26c50:	0018      	movs	r0, r3
   26c52:	4b18      	ldr	r3, [pc, #96]	; (26cb4 <spi_set_baudrate+0xc0>)
   26c54:	4798      	blx	r3
   26c56:	0003      	movs	r3, r0
   26c58:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   26c5a:	230f      	movs	r3, #15
   26c5c:	18fb      	adds	r3, r7, r3
   26c5e:	781b      	ldrb	r3, [r3, #0]
   26c60:	2b00      	cmp	r3, #0
   26c62:	d001      	beq.n	26c68 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   26c64:	2317      	movs	r3, #23
   26c66:	e018      	b.n	26c9a <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   26c68:	230c      	movs	r3, #12
   26c6a:	18fb      	adds	r3, r7, r3
   26c6c:	881b      	ldrh	r3, [r3, #0]
   26c6e:	b2da      	uxtb	r2, r3
   26c70:	69fb      	ldr	r3, [r7, #28]
   26c72:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   26c74:	46c0      	nop			; (mov r8, r8)
   26c76:	687b      	ldr	r3, [r7, #4]
   26c78:	0018      	movs	r0, r3
   26c7a:	4b0b      	ldr	r3, [pc, #44]	; (26ca8 <spi_set_baudrate+0xb4>)
   26c7c:	4798      	blx	r3
   26c7e:	1e03      	subs	r3, r0, #0
   26c80:	d1f9      	bne.n	26c76 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   26c82:	687b      	ldr	r3, [r7, #4]
   26c84:	0018      	movs	r0, r3
   26c86:	4b0c      	ldr	r3, [pc, #48]	; (26cb8 <spi_set_baudrate+0xc4>)
   26c88:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   26c8a:	46c0      	nop			; (mov r8, r8)
   26c8c:	687b      	ldr	r3, [r7, #4]
   26c8e:	0018      	movs	r0, r3
   26c90:	4b05      	ldr	r3, [pc, #20]	; (26ca8 <spi_set_baudrate+0xb4>)
   26c92:	4798      	blx	r3
   26c94:	1e03      	subs	r3, r0, #0
   26c96:	d1f9      	bne.n	26c8c <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   26c98:	2300      	movs	r3, #0
}
   26c9a:	0018      	movs	r0, r3
   26c9c:	46bd      	mov	sp, r7
   26c9e:	b009      	add	sp, #36	; 0x24
   26ca0:	bd90      	pop	{r4, r7, pc}
   26ca2:	46c0      	nop			; (mov r8, r8)
   26ca4:	00026a51 	.word	0x00026a51
   26ca8:	000269e1 	.word	0x000269e1
   26cac:	0002664d 	.word	0x0002664d
   26cb0:	00029001 	.word	0x00029001
   26cb4:	000261c7 	.word	0x000261c7
   26cb8:	00026a01 	.word	0x00026a01

00026cbc <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   26cbc:	b590      	push	{r4, r7, lr}
   26cbe:	b093      	sub	sp, #76	; 0x4c
   26cc0:	af00      	add	r7, sp, #0
   26cc2:	6078      	str	r0, [r7, #4]
   26cc4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   26cc6:	687b      	ldr	r3, [r7, #4]
   26cc8:	681b      	ldr	r3, [r3, #0]
   26cca:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   26ccc:	687b      	ldr	r3, [r7, #4]
   26cce:	681b      	ldr	r3, [r3, #0]
   26cd0:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   26cd2:	231c      	movs	r3, #28
   26cd4:	18fb      	adds	r3, r7, r3
   26cd6:	0018      	movs	r0, r3
   26cd8:	4b75      	ldr	r3, [pc, #468]	; (26eb0 <_spi_set_config+0x1f4>)
   26cda:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   26cdc:	231c      	movs	r3, #28
   26cde:	18fb      	adds	r3, r7, r3
   26ce0:	2200      	movs	r2, #0
   26ce2:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   26ce4:	683b      	ldr	r3, [r7, #0]
   26ce6:	781b      	ldrb	r3, [r3, #0]
   26ce8:	2b00      	cmp	r3, #0
   26cea:	d103      	bne.n	26cf4 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   26cec:	231c      	movs	r3, #28
   26cee:	18fb      	adds	r3, r7, r3
   26cf0:	2200      	movs	r2, #0
   26cf2:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   26cf4:	683b      	ldr	r3, [r7, #0]
   26cf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   26cf8:	230c      	movs	r3, #12
   26cfa:	18fb      	adds	r3, r7, r3
   26cfc:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   26cfe:	683b      	ldr	r3, [r7, #0]
   26d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   26d02:	230c      	movs	r3, #12
   26d04:	18fb      	adds	r3, r7, r3
   26d06:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   26d08:	683b      	ldr	r3, [r7, #0]
   26d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   26d0c:	230c      	movs	r3, #12
   26d0e:	18fb      	adds	r3, r7, r3
   26d10:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   26d12:	683b      	ldr	r3, [r7, #0]
   26d14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   26d16:	230c      	movs	r3, #12
   26d18:	18fb      	adds	r3, r7, r3
   26d1a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   26d1c:	2347      	movs	r3, #71	; 0x47
   26d1e:	18fb      	adds	r3, r7, r3
   26d20:	2200      	movs	r2, #0
   26d22:	701a      	strb	r2, [r3, #0]
   26d24:	e02c      	b.n	26d80 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   26d26:	2347      	movs	r3, #71	; 0x47
   26d28:	18fb      	adds	r3, r7, r3
   26d2a:	781a      	ldrb	r2, [r3, #0]
   26d2c:	230c      	movs	r3, #12
   26d2e:	18fb      	adds	r3, r7, r3
   26d30:	0092      	lsls	r2, r2, #2
   26d32:	58d3      	ldr	r3, [r2, r3]
   26d34:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   26d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   26d38:	2b00      	cmp	r3, #0
   26d3a:	d109      	bne.n	26d50 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   26d3c:	2347      	movs	r3, #71	; 0x47
   26d3e:	18fb      	adds	r3, r7, r3
   26d40:	781a      	ldrb	r2, [r3, #0]
   26d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   26d44:	0011      	movs	r1, r2
   26d46:	0018      	movs	r0, r3
   26d48:	4b5a      	ldr	r3, [pc, #360]	; (26eb4 <_spi_set_config+0x1f8>)
   26d4a:	4798      	blx	r3
   26d4c:	0003      	movs	r3, r0
   26d4e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   26d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   26d52:	3301      	adds	r3, #1
   26d54:	d00d      	beq.n	26d72 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   26d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   26d58:	b2da      	uxtb	r2, r3
   26d5a:	231c      	movs	r3, #28
   26d5c:	18fb      	adds	r3, r7, r3
   26d5e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   26d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   26d62:	0c1b      	lsrs	r3, r3, #16
   26d64:	b2db      	uxtb	r3, r3
   26d66:	221c      	movs	r2, #28
   26d68:	18ba      	adds	r2, r7, r2
   26d6a:	0011      	movs	r1, r2
   26d6c:	0018      	movs	r0, r3
   26d6e:	4b52      	ldr	r3, [pc, #328]	; (26eb8 <_spi_set_config+0x1fc>)
   26d70:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   26d72:	2347      	movs	r3, #71	; 0x47
   26d74:	18fb      	adds	r3, r7, r3
   26d76:	781a      	ldrb	r2, [r3, #0]
   26d78:	2347      	movs	r3, #71	; 0x47
   26d7a:	18fb      	adds	r3, r7, r3
   26d7c:	3201      	adds	r2, #1
   26d7e:	701a      	strb	r2, [r3, #0]
   26d80:	2347      	movs	r3, #71	; 0x47
   26d82:	18fb      	adds	r3, r7, r3
   26d84:	781b      	ldrb	r3, [r3, #0]
   26d86:	2b03      	cmp	r3, #3
   26d88:	d9cd      	bls.n	26d26 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   26d8a:	683b      	ldr	r3, [r7, #0]
   26d8c:	781a      	ldrb	r2, [r3, #0]
   26d8e:	687b      	ldr	r3, [r7, #4]
   26d90:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   26d92:	683b      	ldr	r3, [r7, #0]
   26d94:	7c1a      	ldrb	r2, [r3, #16]
   26d96:	687b      	ldr	r3, [r7, #4]
   26d98:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   26d9a:	683b      	ldr	r3, [r7, #0]
   26d9c:	7c9a      	ldrb	r2, [r3, #18]
   26d9e:	687b      	ldr	r3, [r7, #4]
   26da0:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   26da2:	683b      	ldr	r3, [r7, #0]
   26da4:	7d1a      	ldrb	r2, [r3, #20]
   26da6:	687b      	ldr	r3, [r7, #4]
   26da8:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   26daa:	230a      	movs	r3, #10
   26dac:	18fb      	adds	r3, r7, r3
   26dae:	2200      	movs	r2, #0
   26db0:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   26db2:	2300      	movs	r3, #0
   26db4:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   26db6:	2300      	movs	r3, #0
   26db8:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   26dba:	683b      	ldr	r3, [r7, #0]
   26dbc:	781b      	ldrb	r3, [r3, #0]
   26dbe:	2b01      	cmp	r3, #1
   26dc0:	d129      	bne.n	26e16 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   26dc2:	687b      	ldr	r3, [r7, #4]
   26dc4:	681b      	ldr	r3, [r3, #0]
   26dc6:	0018      	movs	r0, r3
   26dc8:	4b3c      	ldr	r3, [pc, #240]	; (26ebc <_spi_set_config+0x200>)
   26dca:	4798      	blx	r3
   26dcc:	0003      	movs	r3, r0
   26dce:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   26dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26dd2:	3314      	adds	r3, #20
   26dd4:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   26dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   26dd8:	b2db      	uxtb	r3, r3
   26dda:	0018      	movs	r0, r3
   26ddc:	4b38      	ldr	r3, [pc, #224]	; (26ec0 <_spi_set_config+0x204>)
   26dde:	4798      	blx	r3
   26de0:	0003      	movs	r3, r0
   26de2:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   26de4:	683b      	ldr	r3, [r7, #0]
   26de6:	699b      	ldr	r3, [r3, #24]
   26de8:	2223      	movs	r2, #35	; 0x23
   26dea:	18bc      	adds	r4, r7, r2
   26dec:	220a      	movs	r2, #10
   26dee:	18ba      	adds	r2, r7, r2
   26df0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   26df2:	0018      	movs	r0, r3
   26df4:	4b33      	ldr	r3, [pc, #204]	; (26ec4 <_spi_set_config+0x208>)
   26df6:	4798      	blx	r3
   26df8:	0003      	movs	r3, r0
   26dfa:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   26dfc:	2323      	movs	r3, #35	; 0x23
   26dfe:	18fb      	adds	r3, r7, r3
   26e00:	781b      	ldrb	r3, [r3, #0]
   26e02:	2b00      	cmp	r3, #0
   26e04:	d001      	beq.n	26e0a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   26e06:	2317      	movs	r3, #23
   26e08:	e04e      	b.n	26ea8 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   26e0a:	230a      	movs	r3, #10
   26e0c:	18fb      	adds	r3, r7, r3
   26e0e:	881b      	ldrh	r3, [r3, #0]
   26e10:	b2da      	uxtb	r2, r3
   26e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   26e14:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   26e16:	683b      	ldr	r3, [r7, #0]
   26e18:	685b      	ldr	r3, [r3, #4]
   26e1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   26e1c:	4313      	orrs	r3, r2
   26e1e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   26e20:	683b      	ldr	r3, [r7, #0]
   26e22:	689b      	ldr	r3, [r3, #8]
   26e24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   26e26:	4313      	orrs	r3, r2
   26e28:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   26e2a:	683b      	ldr	r3, [r7, #0]
   26e2c:	68db      	ldr	r3, [r3, #12]
   26e2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   26e30:	4313      	orrs	r3, r2
   26e32:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   26e34:	683b      	ldr	r3, [r7, #0]
   26e36:	7c1b      	ldrb	r3, [r3, #16]
   26e38:	001a      	movs	r2, r3
   26e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26e3c:	4313      	orrs	r3, r2
   26e3e:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   26e40:	683b      	ldr	r3, [r7, #0]
   26e42:	7c5b      	ldrb	r3, [r3, #17]
   26e44:	2b00      	cmp	r3, #0
   26e46:	d103      	bne.n	26e50 <_spi_set_config+0x194>
   26e48:	4b1f      	ldr	r3, [pc, #124]	; (26ec8 <_spi_set_config+0x20c>)
   26e4a:	4798      	blx	r3
   26e4c:	1e03      	subs	r3, r0, #0
   26e4e:	d003      	beq.n	26e58 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   26e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   26e52:	2280      	movs	r2, #128	; 0x80
   26e54:	4313      	orrs	r3, r2
   26e56:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   26e58:	683b      	ldr	r3, [r7, #0]
   26e5a:	7c9b      	ldrb	r3, [r3, #18]
   26e5c:	2b00      	cmp	r3, #0
   26e5e:	d004      	beq.n	26e6a <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   26e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26e62:	2280      	movs	r2, #128	; 0x80
   26e64:	0292      	lsls	r2, r2, #10
   26e66:	4313      	orrs	r3, r2
   26e68:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   26e6a:	683b      	ldr	r3, [r7, #0]
   26e6c:	7cdb      	ldrb	r3, [r3, #19]
   26e6e:	2b00      	cmp	r3, #0
   26e70:	d004      	beq.n	26e7c <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   26e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26e74:	2280      	movs	r2, #128	; 0x80
   26e76:	0092      	lsls	r2, r2, #2
   26e78:	4313      	orrs	r3, r2
   26e7a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   26e7c:	683b      	ldr	r3, [r7, #0]
   26e7e:	7d1b      	ldrb	r3, [r3, #20]
   26e80:	2b00      	cmp	r3, #0
   26e82:	d004      	beq.n	26e8e <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   26e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26e86:	2280      	movs	r2, #128	; 0x80
   26e88:	0192      	lsls	r2, r2, #6
   26e8a:	4313      	orrs	r3, r2
   26e8c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   26e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   26e90:	681a      	ldr	r2, [r3, #0]
   26e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   26e94:	431a      	orrs	r2, r3
   26e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   26e98:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   26e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   26e9c:	685a      	ldr	r2, [r3, #4]
   26e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26ea0:	431a      	orrs	r2, r3
   26ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   26ea4:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   26ea6:	2300      	movs	r3, #0
}
   26ea8:	0018      	movs	r0, r3
   26eaa:	46bd      	mov	sp, r7
   26eac:	b013      	add	sp, #76	; 0x4c
   26eae:	bd90      	pop	{r4, r7, pc}
   26eb0:	000267f1 	.word	0x000267f1
   26eb4:	00026491 	.word	0x00026491
   26eb8:	0002923d 	.word	0x0002923d
   26ebc:	0002664d 	.word	0x0002664d
   26ec0:	00029001 	.word	0x00029001
   26ec4:	000261c7 	.word	0x000261c7
   26ec8:	00026965 	.word	0x00026965

00026ecc <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   26ecc:	b590      	push	{r4, r7, lr}
   26ece:	b08b      	sub	sp, #44	; 0x2c
   26ed0:	af00      	add	r7, sp, #0
   26ed2:	60f8      	str	r0, [r7, #12]
   26ed4:	60b9      	str	r1, [r7, #8]
   26ed6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   26ed8:	68fb      	ldr	r3, [r7, #12]
   26eda:	68ba      	ldr	r2, [r7, #8]
   26edc:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   26ede:	68fb      	ldr	r3, [r7, #12]
   26ee0:	681b      	ldr	r3, [r3, #0]
   26ee2:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   26ee4:	6a3b      	ldr	r3, [r7, #32]
   26ee6:	681b      	ldr	r3, [r3, #0]
   26ee8:	2202      	movs	r2, #2
   26eea:	4013      	ands	r3, r2
   26eec:	d001      	beq.n	26ef2 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   26eee:	231c      	movs	r3, #28
   26ef0:	e09c      	b.n	2702c <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   26ef2:	6a3b      	ldr	r3, [r7, #32]
   26ef4:	681b      	ldr	r3, [r3, #0]
   26ef6:	2201      	movs	r2, #1
   26ef8:	4013      	ands	r3, r2
   26efa:	d001      	beq.n	26f00 <spi_init+0x34>
		return STATUS_BUSY;
   26efc:	2305      	movs	r3, #5
   26efe:	e095      	b.n	2702c <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   26f00:	68fb      	ldr	r3, [r7, #12]
   26f02:	681b      	ldr	r3, [r3, #0]
   26f04:	0018      	movs	r0, r3
   26f06:	4b4b      	ldr	r3, [pc, #300]	; (27034 <spi_init+0x168>)
   26f08:	4798      	blx	r3
   26f0a:	0003      	movs	r3, r0
   26f0c:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   26f0e:	69fb      	ldr	r3, [r7, #28]
   26f10:	3302      	adds	r3, #2
   26f12:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   26f14:	69fb      	ldr	r3, [r7, #28]
   26f16:	3314      	adds	r3, #20
   26f18:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   26f1a:	2201      	movs	r2, #1
   26f1c:	69bb      	ldr	r3, [r7, #24]
   26f1e:	409a      	lsls	r2, r3
   26f20:	0013      	movs	r3, r2
   26f22:	0019      	movs	r1, r3
   26f24:	2002      	movs	r0, #2
   26f26:	4b44      	ldr	r3, [pc, #272]	; (27038 <spi_init+0x16c>)
   26f28:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   26f2a:	2310      	movs	r3, #16
   26f2c:	18fb      	adds	r3, r7, r3
   26f2e:	0018      	movs	r0, r3
   26f30:	4b42      	ldr	r3, [pc, #264]	; (2703c <spi_init+0x170>)
   26f32:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   26f34:	687b      	ldr	r3, [r7, #4]
   26f36:	2224      	movs	r2, #36	; 0x24
   26f38:	5c9a      	ldrb	r2, [r3, r2]
   26f3a:	2310      	movs	r3, #16
   26f3c:	18fb      	adds	r3, r7, r3
   26f3e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   26f40:	697b      	ldr	r3, [r7, #20]
   26f42:	b2db      	uxtb	r3, r3
   26f44:	2210      	movs	r2, #16
   26f46:	18ba      	adds	r2, r7, r2
   26f48:	0011      	movs	r1, r2
   26f4a:	0018      	movs	r0, r3
   26f4c:	4b3c      	ldr	r3, [pc, #240]	; (27040 <spi_init+0x174>)
   26f4e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   26f50:	697b      	ldr	r3, [r7, #20]
   26f52:	b2db      	uxtb	r3, r3
   26f54:	0018      	movs	r0, r3
   26f56:	4b3b      	ldr	r3, [pc, #236]	; (27044 <spi_init+0x178>)
   26f58:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   26f5a:	687b      	ldr	r3, [r7, #4]
   26f5c:	2224      	movs	r2, #36	; 0x24
   26f5e:	5c9b      	ldrb	r3, [r3, r2]
   26f60:	2100      	movs	r1, #0
   26f62:	0018      	movs	r0, r3
   26f64:	4b38      	ldr	r3, [pc, #224]	; (27048 <spi_init+0x17c>)
   26f66:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   26f68:	687b      	ldr	r3, [r7, #4]
   26f6a:	781b      	ldrb	r3, [r3, #0]
   26f6c:	2b01      	cmp	r3, #1
   26f6e:	d105      	bne.n	26f7c <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   26f70:	6a3b      	ldr	r3, [r7, #32]
   26f72:	681b      	ldr	r3, [r3, #0]
   26f74:	220c      	movs	r2, #12
   26f76:	431a      	orrs	r2, r3
   26f78:	6a3b      	ldr	r3, [r7, #32]
   26f7a:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   26f7c:	2327      	movs	r3, #39	; 0x27
   26f7e:	18fb      	adds	r3, r7, r3
   26f80:	2200      	movs	r2, #0
   26f82:	701a      	strb	r2, [r3, #0]
   26f84:	e010      	b.n	26fa8 <spi_init+0xdc>
		module->callback[i]        = NULL;
   26f86:	2327      	movs	r3, #39	; 0x27
   26f88:	18fb      	adds	r3, r7, r3
   26f8a:	781b      	ldrb	r3, [r3, #0]
   26f8c:	68fa      	ldr	r2, [r7, #12]
   26f8e:	3302      	adds	r3, #2
   26f90:	009b      	lsls	r3, r3, #2
   26f92:	18d3      	adds	r3, r2, r3
   26f94:	3304      	adds	r3, #4
   26f96:	2200      	movs	r2, #0
   26f98:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   26f9a:	2327      	movs	r3, #39	; 0x27
   26f9c:	18fb      	adds	r3, r7, r3
   26f9e:	781a      	ldrb	r2, [r3, #0]
   26fa0:	2327      	movs	r3, #39	; 0x27
   26fa2:	18fb      	adds	r3, r7, r3
   26fa4:	3201      	adds	r2, #1
   26fa6:	701a      	strb	r2, [r3, #0]
   26fa8:	2327      	movs	r3, #39	; 0x27
   26faa:	18fb      	adds	r3, r7, r3
   26fac:	781b      	ldrb	r3, [r3, #0]
   26fae:	2b06      	cmp	r3, #6
   26fb0:	d9e9      	bls.n	26f86 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   26fb2:	68fb      	ldr	r3, [r7, #12]
   26fb4:	2200      	movs	r2, #0
   26fb6:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   26fb8:	68fb      	ldr	r3, [r7, #12]
   26fba:	2200      	movs	r2, #0
   26fbc:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   26fbe:	68fb      	ldr	r3, [r7, #12]
   26fc0:	2200      	movs	r2, #0
   26fc2:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   26fc4:	68fb      	ldr	r3, [r7, #12]
   26fc6:	2200      	movs	r2, #0
   26fc8:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   26fca:	68fb      	ldr	r3, [r7, #12]
   26fcc:	2236      	movs	r2, #54	; 0x36
   26fce:	2100      	movs	r1, #0
   26fd0:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   26fd2:	68fb      	ldr	r3, [r7, #12]
   26fd4:	2237      	movs	r2, #55	; 0x37
   26fd6:	2100      	movs	r1, #0
   26fd8:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   26fda:	68fb      	ldr	r3, [r7, #12]
   26fdc:	2238      	movs	r2, #56	; 0x38
   26fde:	2100      	movs	r1, #0
   26fe0:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   26fe2:	68fb      	ldr	r3, [r7, #12]
   26fe4:	2203      	movs	r2, #3
   26fe6:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   26fe8:	68fb      	ldr	r3, [r7, #12]
   26fea:	2200      	movs	r2, #0
   26fec:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   26fee:	68fb      	ldr	r3, [r7, #12]
   26ff0:	681b      	ldr	r3, [r3, #0]
   26ff2:	2213      	movs	r2, #19
   26ff4:	18bc      	adds	r4, r7, r2
   26ff6:	0018      	movs	r0, r3
   26ff8:	4b0e      	ldr	r3, [pc, #56]	; (27034 <spi_init+0x168>)
   26ffa:	4798      	blx	r3
   26ffc:	0003      	movs	r3, r0
   26ffe:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   27000:	4a12      	ldr	r2, [pc, #72]	; (2704c <spi_init+0x180>)
   27002:	2313      	movs	r3, #19
   27004:	18fb      	adds	r3, r7, r3
   27006:	781b      	ldrb	r3, [r3, #0]
   27008:	0011      	movs	r1, r2
   2700a:	0018      	movs	r0, r3
   2700c:	4b10      	ldr	r3, [pc, #64]	; (27050 <spi_init+0x184>)
   2700e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   27010:	2313      	movs	r3, #19
   27012:	18fb      	adds	r3, r7, r3
   27014:	781a      	ldrb	r2, [r3, #0]
   27016:	4b0f      	ldr	r3, [pc, #60]	; (27054 <spi_init+0x188>)
   27018:	0092      	lsls	r2, r2, #2
   2701a:	68f9      	ldr	r1, [r7, #12]
   2701c:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   2701e:	687a      	ldr	r2, [r7, #4]
   27020:	68fb      	ldr	r3, [r7, #12]
   27022:	0011      	movs	r1, r2
   27024:	0018      	movs	r0, r3
   27026:	4b0c      	ldr	r3, [pc, #48]	; (27058 <spi_init+0x18c>)
   27028:	4798      	blx	r3
   2702a:	0003      	movs	r3, r0
}
   2702c:	0018      	movs	r0, r3
   2702e:	46bd      	mov	sp, r7
   27030:	b00b      	add	sp, #44	; 0x2c
   27032:	bd90      	pop	{r4, r7, pc}
   27034:	0002664d 	.word	0x0002664d
   27038:	00026909 	.word	0x00026909
   2703c:	000268f1 	.word	0x000268f1
   27040:	00028edd 	.word	0x00028edd
   27044:	00028f21 	.word	0x00028f21
   27048:	00026405 	.word	0x00026405
   2704c:	00027525 	.word	0x00027525
   27050:	000266b1 	.word	0x000266b1
   27054:	20005bcc 	.word	0x20005bcc
   27058:	00026cbd 	.word	0x00026cbd

0002705c <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   2705c:	b590      	push	{r4, r7, lr}
   2705e:	b087      	sub	sp, #28
   27060:	af00      	add	r7, sp, #0
   27062:	60f8      	str	r0, [r7, #12]
   27064:	60b9      	str	r1, [r7, #8]
   27066:	0019      	movs	r1, r3
   27068:	1dbb      	adds	r3, r7, #6
   2706a:	801a      	strh	r2, [r3, #0]
   2706c:	1d3b      	adds	r3, r7, #4
   2706e:	1c0a      	adds	r2, r1, #0
   27070:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   27072:	68fb      	ldr	r3, [r7, #12]
   27074:	2238      	movs	r2, #56	; 0x38
   27076:	5c9b      	ldrb	r3, [r3, r2]
   27078:	b2db      	uxtb	r3, r3
   2707a:	2b05      	cmp	r3, #5
   2707c:	d101      	bne.n	27082 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   2707e:	2305      	movs	r3, #5
   27080:	e07a      	b.n	27178 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   27082:	1dbb      	adds	r3, r7, #6
   27084:	881b      	ldrh	r3, [r3, #0]
   27086:	2b00      	cmp	r3, #0
   27088:	d101      	bne.n	2708e <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   2708a:	2317      	movs	r3, #23
   2708c:	e074      	b.n	27178 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   2708e:	68fb      	ldr	r3, [r7, #12]
   27090:	79db      	ldrb	r3, [r3, #7]
   27092:	2201      	movs	r2, #1
   27094:	4053      	eors	r3, r2
   27096:	b2db      	uxtb	r3, r3
   27098:	2b00      	cmp	r3, #0
   2709a:	d001      	beq.n	270a0 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   2709c:	231c      	movs	r3, #28
   2709e:	e06b      	b.n	27178 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   270a0:	2316      	movs	r3, #22
   270a2:	18fb      	adds	r3, r7, r3
   270a4:	2200      	movs	r2, #0
   270a6:	801a      	strh	r2, [r3, #0]

	while (length--) {
   270a8:	e05e      	b.n	27168 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   270aa:	68fb      	ldr	r3, [r7, #12]
   270ac:	795b      	ldrb	r3, [r3, #5]
   270ae:	2b01      	cmp	r3, #1
   270b0:	d112      	bne.n	270d8 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   270b2:	46c0      	nop			; (mov r8, r8)
   270b4:	68fb      	ldr	r3, [r7, #12]
   270b6:	0018      	movs	r0, r3
   270b8:	4b31      	ldr	r3, [pc, #196]	; (27180 <spi_read_buffer_wait+0x124>)
   270ba:	4798      	blx	r3
   270bc:	0003      	movs	r3, r0
   270be:	001a      	movs	r2, r3
   270c0:	2301      	movs	r3, #1
   270c2:	4053      	eors	r3, r2
   270c4:	b2db      	uxtb	r3, r3
   270c6:	2b00      	cmp	r3, #0
   270c8:	d1f4      	bne.n	270b4 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   270ca:	1d3b      	adds	r3, r7, #4
   270cc:	881a      	ldrh	r2, [r3, #0]
   270ce:	68fb      	ldr	r3, [r7, #12]
   270d0:	0011      	movs	r1, r2
   270d2:	0018      	movs	r0, r3
   270d4:	4b2b      	ldr	r3, [pc, #172]	; (27184 <spi_read_buffer_wait+0x128>)
   270d6:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   270d8:	46c0      	nop			; (mov r8, r8)
   270da:	68fb      	ldr	r3, [r7, #12]
   270dc:	0018      	movs	r0, r3
   270de:	4b2a      	ldr	r3, [pc, #168]	; (27188 <spi_read_buffer_wait+0x12c>)
   270e0:	4798      	blx	r3
   270e2:	0003      	movs	r3, r0
   270e4:	001a      	movs	r2, r3
   270e6:	2301      	movs	r3, #1
   270e8:	4053      	eors	r3, r2
   270ea:	b2db      	uxtb	r3, r3
   270ec:	2b00      	cmp	r3, #0
   270ee:	d1f4      	bne.n	270da <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   270f0:	2312      	movs	r3, #18
   270f2:	18fb      	adds	r3, r7, r3
   270f4:	2200      	movs	r2, #0
   270f6:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   270f8:	2315      	movs	r3, #21
   270fa:	18fc      	adds	r4, r7, r3
   270fc:	2312      	movs	r3, #18
   270fe:	18fa      	adds	r2, r7, r3
   27100:	68fb      	ldr	r3, [r7, #12]
   27102:	0011      	movs	r1, r2
   27104:	0018      	movs	r0, r3
   27106:	4b21      	ldr	r3, [pc, #132]	; (2718c <spi_read_buffer_wait+0x130>)
   27108:	4798      	blx	r3
   2710a:	0003      	movs	r3, r0
   2710c:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   2710e:	2315      	movs	r3, #21
   27110:	18fb      	adds	r3, r7, r3
   27112:	781b      	ldrb	r3, [r3, #0]
   27114:	2b00      	cmp	r3, #0
   27116:	d003      	beq.n	27120 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   27118:	2315      	movs	r3, #21
   2711a:	18fb      	adds	r3, r7, r3
   2711c:	781b      	ldrb	r3, [r3, #0]
   2711e:	e02b      	b.n	27178 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   27120:	2316      	movs	r3, #22
   27122:	18fb      	adds	r3, r7, r3
   27124:	881b      	ldrh	r3, [r3, #0]
   27126:	2216      	movs	r2, #22
   27128:	18ba      	adds	r2, r7, r2
   2712a:	1c59      	adds	r1, r3, #1
   2712c:	8011      	strh	r1, [r2, #0]
   2712e:	001a      	movs	r2, r3
   27130:	68bb      	ldr	r3, [r7, #8]
   27132:	189b      	adds	r3, r3, r2
   27134:	2212      	movs	r2, #18
   27136:	18ba      	adds	r2, r7, r2
   27138:	8812      	ldrh	r2, [r2, #0]
   2713a:	b2d2      	uxtb	r2, r2
   2713c:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2713e:	68fb      	ldr	r3, [r7, #12]
   27140:	799b      	ldrb	r3, [r3, #6]
   27142:	2b01      	cmp	r3, #1
   27144:	d110      	bne.n	27168 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   27146:	2316      	movs	r3, #22
   27148:	18fb      	adds	r3, r7, r3
   2714a:	881b      	ldrh	r3, [r3, #0]
   2714c:	2216      	movs	r2, #22
   2714e:	18ba      	adds	r2, r7, r2
   27150:	1c59      	adds	r1, r3, #1
   27152:	8011      	strh	r1, [r2, #0]
   27154:	001a      	movs	r2, r3
   27156:	68bb      	ldr	r3, [r7, #8]
   27158:	189b      	adds	r3, r3, r2
   2715a:	2212      	movs	r2, #18
   2715c:	18ba      	adds	r2, r7, r2
   2715e:	8812      	ldrh	r2, [r2, #0]
   27160:	0a12      	lsrs	r2, r2, #8
   27162:	b292      	uxth	r2, r2
   27164:	b2d2      	uxtb	r2, r2
   27166:	701a      	strb	r2, [r3, #0]
	while (length--) {
   27168:	1dbb      	adds	r3, r7, #6
   2716a:	881b      	ldrh	r3, [r3, #0]
   2716c:	1dba      	adds	r2, r7, #6
   2716e:	1e59      	subs	r1, r3, #1
   27170:	8011      	strh	r1, [r2, #0]
   27172:	2b00      	cmp	r3, #0
   27174:	d199      	bne.n	270aa <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   27176:	2300      	movs	r3, #0
}
   27178:	0018      	movs	r0, r3
   2717a:	46bd      	mov	sp, r7
   2717c:	b007      	add	sp, #28
   2717e:	bd90      	pop	{r4, r7, pc}
   27180:	00026ad5 	.word	0x00026ad5
   27184:	00026b25 	.word	0x00026b25
   27188:	00026afd 	.word	0x00026afd
   2718c:	00026b6d 	.word	0x00026b6d

00027190 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   27190:	b580      	push	{r7, lr}
   27192:	b086      	sub	sp, #24
   27194:	af00      	add	r7, sp, #0
   27196:	60f8      	str	r0, [r7, #12]
   27198:	60b9      	str	r1, [r7, #8]
   2719a:	1dfb      	adds	r3, r7, #7
   2719c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   2719e:	68fb      	ldr	r3, [r7, #12]
   271a0:	795b      	ldrb	r3, [r3, #5]
   271a2:	2b01      	cmp	r3, #1
   271a4:	d001      	beq.n	271aa <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   271a6:	2315      	movs	r3, #21
   271a8:	e05c      	b.n	27264 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   271aa:	68fb      	ldr	r3, [r7, #12]
   271ac:	7a1b      	ldrb	r3, [r3, #8]
   271ae:	2201      	movs	r2, #1
   271b0:	4053      	eors	r3, r2
   271b2:	b2db      	uxtb	r3, r3
   271b4:	2b00      	cmp	r3, #0
   271b6:	d054      	beq.n	27262 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   271b8:	1dfb      	adds	r3, r7, #7
   271ba:	781b      	ldrb	r3, [r3, #0]
   271bc:	2b00      	cmp	r3, #0
   271be:	d04a      	beq.n	27256 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   271c0:	68bb      	ldr	r3, [r7, #8]
   271c2:	785b      	ldrb	r3, [r3, #1]
   271c4:	2b00      	cmp	r3, #0
   271c6:	d03f      	beq.n	27248 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   271c8:	68fb      	ldr	r3, [r7, #12]
   271ca:	0018      	movs	r0, r3
   271cc:	4b27      	ldr	r3, [pc, #156]	; (2726c <spi_select_slave+0xdc>)
   271ce:	4798      	blx	r3
   271d0:	0003      	movs	r3, r0
   271d2:	001a      	movs	r2, r3
   271d4:	2301      	movs	r3, #1
   271d6:	4053      	eors	r3, r2
   271d8:	b2db      	uxtb	r3, r3
   271da:	2b00      	cmp	r3, #0
   271dc:	d007      	beq.n	271ee <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   271de:	68bb      	ldr	r3, [r7, #8]
   271e0:	781b      	ldrb	r3, [r3, #0]
   271e2:	2101      	movs	r1, #1
   271e4:	0018      	movs	r0, r3
   271e6:	4b22      	ldr	r3, [pc, #136]	; (27270 <spi_select_slave+0xe0>)
   271e8:	4798      	blx	r3
					return STATUS_BUSY;
   271ea:	2305      	movs	r3, #5
   271ec:	e03a      	b.n	27264 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   271ee:	68bb      	ldr	r3, [r7, #8]
   271f0:	781b      	ldrb	r3, [r3, #0]
   271f2:	2100      	movs	r1, #0
   271f4:	0018      	movs	r0, r3
   271f6:	4b1e      	ldr	r3, [pc, #120]	; (27270 <spi_select_slave+0xe0>)
   271f8:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   271fa:	68bb      	ldr	r3, [r7, #8]
   271fc:	789b      	ldrb	r3, [r3, #2]
   271fe:	b29a      	uxth	r2, r3
   27200:	68fb      	ldr	r3, [r7, #12]
   27202:	0011      	movs	r1, r2
   27204:	0018      	movs	r0, r3
   27206:	4b1b      	ldr	r3, [pc, #108]	; (27274 <spi_select_slave+0xe4>)
   27208:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   2720a:	68fb      	ldr	r3, [r7, #12]
   2720c:	79db      	ldrb	r3, [r3, #7]
   2720e:	2201      	movs	r2, #1
   27210:	4053      	eors	r3, r2
   27212:	b2db      	uxtb	r3, r3
   27214:	2b00      	cmp	r3, #0
   27216:	d024      	beq.n	27262 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   27218:	46c0      	nop			; (mov r8, r8)
   2721a:	68fb      	ldr	r3, [r7, #12]
   2721c:	0018      	movs	r0, r3
   2721e:	4b16      	ldr	r3, [pc, #88]	; (27278 <spi_select_slave+0xe8>)
   27220:	4798      	blx	r3
   27222:	0003      	movs	r3, r0
   27224:	001a      	movs	r2, r3
   27226:	2301      	movs	r3, #1
   27228:	4053      	eors	r3, r2
   2722a:	b2db      	uxtb	r3, r3
   2722c:	2b00      	cmp	r3, #0
   2722e:	d1f4      	bne.n	2721a <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   27230:	2316      	movs	r3, #22
   27232:	18fb      	adds	r3, r7, r3
   27234:	2200      	movs	r2, #0
   27236:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   27238:	2316      	movs	r3, #22
   2723a:	18fa      	adds	r2, r7, r3
   2723c:	68fb      	ldr	r3, [r7, #12]
   2723e:	0011      	movs	r1, r2
   27240:	0018      	movs	r0, r3
   27242:	4b0e      	ldr	r3, [pc, #56]	; (2727c <spi_select_slave+0xec>)
   27244:	4798      	blx	r3
   27246:	e00c      	b.n	27262 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   27248:	68bb      	ldr	r3, [r7, #8]
   2724a:	781b      	ldrb	r3, [r3, #0]
   2724c:	2100      	movs	r1, #0
   2724e:	0018      	movs	r0, r3
   27250:	4b07      	ldr	r3, [pc, #28]	; (27270 <spi_select_slave+0xe0>)
   27252:	4798      	blx	r3
   27254:	e005      	b.n	27262 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   27256:	68bb      	ldr	r3, [r7, #8]
   27258:	781b      	ldrb	r3, [r3, #0]
   2725a:	2101      	movs	r1, #1
   2725c:	0018      	movs	r0, r3
   2725e:	4b04      	ldr	r3, [pc, #16]	; (27270 <spi_select_slave+0xe0>)
   27260:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   27262:	2300      	movs	r3, #0
}
   27264:	0018      	movs	r0, r3
   27266:	46bd      	mov	sp, r7
   27268:	b006      	add	sp, #24
   2726a:	bd80      	pop	{r7, pc}
   2726c:	00026ad5 	.word	0x00026ad5
   27270:	0002689d 	.word	0x0002689d
   27274:	00026b25 	.word	0x00026b25
   27278:	00026afd 	.word	0x00026afd
   2727c:	00026b6d 	.word	0x00026b6d

00027280 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   27280:	b580      	push	{r7, lr}
   27282:	b086      	sub	sp, #24
   27284:	af00      	add	r7, sp, #0
   27286:	60f8      	str	r0, [r7, #12]
   27288:	60b9      	str	r1, [r7, #8]
   2728a:	1dbb      	adds	r3, r7, #6
   2728c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   2728e:	68fb      	ldr	r3, [r7, #12]
   27290:	2238      	movs	r2, #56	; 0x38
   27292:	5c9b      	ldrb	r3, [r3, r2]
   27294:	b2db      	uxtb	r3, r3
   27296:	2b05      	cmp	r3, #5
   27298:	d101      	bne.n	2729e <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   2729a:	2305      	movs	r3, #5
   2729c:	e087      	b.n	273ae <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   2729e:	1dbb      	adds	r3, r7, #6
   272a0:	881b      	ldrh	r3, [r3, #0]
   272a2:	2b00      	cmp	r3, #0
   272a4:	d101      	bne.n	272aa <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   272a6:	2317      	movs	r3, #23
   272a8:	e081      	b.n	273ae <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   272aa:	2316      	movs	r3, #22
   272ac:	18fb      	adds	r3, r7, r3
   272ae:	2200      	movs	r2, #0
   272b0:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   272b2:	2314      	movs	r3, #20
   272b4:	18fb      	adds	r3, r7, r3
   272b6:	1dba      	adds	r2, r7, #6
   272b8:	8812      	ldrh	r2, [r2, #0]
   272ba:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   272bc:	e05f      	b.n	2737e <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   272be:	46c0      	nop			; (mov r8, r8)
   272c0:	68fb      	ldr	r3, [r7, #12]
   272c2:	0018      	movs	r0, r3
   272c4:	4b3c      	ldr	r3, [pc, #240]	; (273b8 <spi_write_buffer_wait+0x138>)
   272c6:	4798      	blx	r3
   272c8:	0003      	movs	r3, r0
   272ca:	001a      	movs	r2, r3
   272cc:	2301      	movs	r3, #1
   272ce:	4053      	eors	r3, r2
   272d0:	b2db      	uxtb	r3, r3
   272d2:	2b00      	cmp	r3, #0
   272d4:	d1f4      	bne.n	272c0 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   272d6:	2316      	movs	r3, #22
   272d8:	18fb      	adds	r3, r7, r3
   272da:	881b      	ldrh	r3, [r3, #0]
   272dc:	2216      	movs	r2, #22
   272de:	18ba      	adds	r2, r7, r2
   272e0:	1c59      	adds	r1, r3, #1
   272e2:	8011      	strh	r1, [r2, #0]
   272e4:	001a      	movs	r2, r3
   272e6:	68bb      	ldr	r3, [r7, #8]
   272e8:	189b      	adds	r3, r3, r2
   272ea:	781a      	ldrb	r2, [r3, #0]
   272ec:	2312      	movs	r3, #18
   272ee:	18fb      	adds	r3, r7, r3
   272f0:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   272f2:	68fb      	ldr	r3, [r7, #12]
   272f4:	799b      	ldrb	r3, [r3, #6]
   272f6:	2b01      	cmp	r3, #1
   272f8:	d115      	bne.n	27326 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   272fa:	2316      	movs	r3, #22
   272fc:	18fb      	adds	r3, r7, r3
   272fe:	881b      	ldrh	r3, [r3, #0]
   27300:	2216      	movs	r2, #22
   27302:	18ba      	adds	r2, r7, r2
   27304:	1c59      	adds	r1, r3, #1
   27306:	8011      	strh	r1, [r2, #0]
   27308:	001a      	movs	r2, r3
   2730a:	68bb      	ldr	r3, [r7, #8]
   2730c:	189b      	adds	r3, r3, r2
   2730e:	781b      	ldrb	r3, [r3, #0]
   27310:	021b      	lsls	r3, r3, #8
   27312:	b21a      	sxth	r2, r3
   27314:	2312      	movs	r3, #18
   27316:	18fb      	adds	r3, r7, r3
   27318:	2100      	movs	r1, #0
   2731a:	5e5b      	ldrsh	r3, [r3, r1]
   2731c:	4313      	orrs	r3, r2
   2731e:	b21a      	sxth	r2, r3
   27320:	2312      	movs	r3, #18
   27322:	18fb      	adds	r3, r7, r3
   27324:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   27326:	2312      	movs	r3, #18
   27328:	18fb      	adds	r3, r7, r3
   2732a:	881a      	ldrh	r2, [r3, #0]
   2732c:	68fb      	ldr	r3, [r7, #12]
   2732e:	0011      	movs	r1, r2
   27330:	0018      	movs	r0, r3
   27332:	4b22      	ldr	r3, [pc, #136]	; (273bc <spi_write_buffer_wait+0x13c>)
   27334:	4798      	blx	r3

		if (module->receiver_enabled) {
   27336:	68fb      	ldr	r3, [r7, #12]
   27338:	79db      	ldrb	r3, [r3, #7]
   2733a:	2214      	movs	r2, #20
   2733c:	18ba      	adds	r2, r7, r2
   2733e:	2114      	movs	r1, #20
   27340:	1879      	adds	r1, r7, r1
   27342:	8809      	ldrh	r1, [r1, #0]
   27344:	8011      	strh	r1, [r2, #0]
   27346:	2b00      	cmp	r3, #0
   27348:	d019      	beq.n	2737e <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   2734a:	46c0      	nop			; (mov r8, r8)
   2734c:	68fb      	ldr	r3, [r7, #12]
   2734e:	0018      	movs	r0, r3
   27350:	4b1b      	ldr	r3, [pc, #108]	; (273c0 <spi_write_buffer_wait+0x140>)
   27352:	4798      	blx	r3
   27354:	0003      	movs	r3, r0
   27356:	001a      	movs	r2, r3
   27358:	2301      	movs	r3, #1
   2735a:	4053      	eors	r3, r2
   2735c:	b2db      	uxtb	r3, r3
   2735e:	2b00      	cmp	r3, #0
   27360:	d1f4      	bne.n	2734c <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   27362:	2310      	movs	r3, #16
   27364:	18fa      	adds	r2, r7, r3
   27366:	68fb      	ldr	r3, [r7, #12]
   27368:	0011      	movs	r1, r2
   2736a:	0018      	movs	r0, r3
   2736c:	4b15      	ldr	r3, [pc, #84]	; (273c4 <spi_write_buffer_wait+0x144>)
   2736e:	4798      	blx	r3
			flush_length--;
   27370:	2314      	movs	r3, #20
   27372:	18fb      	adds	r3, r7, r3
   27374:	881a      	ldrh	r2, [r3, #0]
   27376:	2314      	movs	r3, #20
   27378:	18fb      	adds	r3, r7, r3
   2737a:	3a01      	subs	r2, #1
   2737c:	801a      	strh	r2, [r3, #0]
	while (length--) {
   2737e:	1dbb      	adds	r3, r7, #6
   27380:	881b      	ldrh	r3, [r3, #0]
   27382:	1dba      	adds	r2, r7, #6
   27384:	1e59      	subs	r1, r3, #1
   27386:	8011      	strh	r1, [r2, #0]
   27388:	2b00      	cmp	r3, #0
   2738a:	d198      	bne.n	272be <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   2738c:	68fb      	ldr	r3, [r7, #12]
   2738e:	795b      	ldrb	r3, [r3, #5]
   27390:	2b01      	cmp	r3, #1
   27392:	d10b      	bne.n	273ac <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   27394:	46c0      	nop			; (mov r8, r8)
   27396:	68fb      	ldr	r3, [r7, #12]
   27398:	0018      	movs	r0, r3
   2739a:	4b0b      	ldr	r3, [pc, #44]	; (273c8 <spi_write_buffer_wait+0x148>)
   2739c:	4798      	blx	r3
   2739e:	0003      	movs	r3, r0
   273a0:	001a      	movs	r2, r3
   273a2:	2301      	movs	r3, #1
   273a4:	4053      	eors	r3, r2
   273a6:	b2db      	uxtb	r3, r3
   273a8:	2b00      	cmp	r3, #0
   273aa:	d1f4      	bne.n	27396 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   273ac:	2300      	movs	r3, #0
}
   273ae:	0018      	movs	r0, r3
   273b0:	46bd      	mov	sp, r7
   273b2:	b006      	add	sp, #24
   273b4:	bd80      	pop	{r7, pc}
   273b6:	46c0      	nop			; (mov r8, r8)
   273b8:	00026ad5 	.word	0x00026ad5
   273bc:	00026b25 	.word	0x00026b25
   273c0:	00026afd 	.word	0x00026afd
   273c4:	00026b6d 	.word	0x00026b6d
   273c8:	00026aad 	.word	0x00026aad

000273cc <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   273cc:	b580      	push	{r7, lr}
   273ce:	b084      	sub	sp, #16
   273d0:	af00      	add	r7, sp, #0
   273d2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   273d4:	687b      	ldr	r3, [r7, #4]
   273d6:	681b      	ldr	r3, [r3, #0]
   273d8:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   273da:	687b      	ldr	r3, [r7, #4]
   273dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   273de:	781b      	ldrb	r3, [r3, #0]
   273e0:	b2da      	uxtb	r2, r3
   273e2:	230e      	movs	r3, #14
   273e4:	18fb      	adds	r3, r7, r3
   273e6:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   273e8:	687b      	ldr	r3, [r7, #4]
   273ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   273ec:	1c5a      	adds	r2, r3, #1
   273ee:	687b      	ldr	r3, [r7, #4]
   273f0:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   273f2:	687b      	ldr	r3, [r7, #4]
   273f4:	799b      	ldrb	r3, [r3, #6]
   273f6:	2b01      	cmp	r3, #1
   273f8:	d113      	bne.n	27422 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   273fa:	687b      	ldr	r3, [r7, #4]
   273fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   273fe:	781b      	ldrb	r3, [r3, #0]
   27400:	b2db      	uxtb	r3, r3
   27402:	021b      	lsls	r3, r3, #8
   27404:	b21a      	sxth	r2, r3
   27406:	230e      	movs	r3, #14
   27408:	18fb      	adds	r3, r7, r3
   2740a:	2100      	movs	r1, #0
   2740c:	5e5b      	ldrsh	r3, [r3, r1]
   2740e:	4313      	orrs	r3, r2
   27410:	b21a      	sxth	r2, r3
   27412:	230e      	movs	r3, #14
   27414:	18fb      	adds	r3, r7, r3
   27416:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   27418:	687b      	ldr	r3, [r7, #4]
   2741a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2741c:	1c5a      	adds	r2, r3, #1
   2741e:	687b      	ldr	r3, [r7, #4]
   27420:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   27422:	230e      	movs	r3, #14
   27424:	18fb      	adds	r3, r7, r3
   27426:	881b      	ldrh	r3, [r3, #0]
   27428:	05db      	lsls	r3, r3, #23
   2742a:	0dda      	lsrs	r2, r3, #23
   2742c:	68bb      	ldr	r3, [r7, #8]
   2742e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   27430:	687b      	ldr	r3, [r7, #4]
   27432:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   27434:	b29b      	uxth	r3, r3
   27436:	3b01      	subs	r3, #1
   27438:	b29a      	uxth	r2, r3
   2743a:	687b      	ldr	r3, [r7, #4]
   2743c:	869a      	strh	r2, [r3, #52]	; 0x34
}
   2743e:	46c0      	nop			; (mov r8, r8)
   27440:	46bd      	mov	sp, r7
   27442:	b004      	add	sp, #16
   27444:	bd80      	pop	{r7, pc}
	...

00027448 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   27448:	b580      	push	{r7, lr}
   2744a:	b084      	sub	sp, #16
   2744c:	af00      	add	r7, sp, #0
   2744e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27450:	687b      	ldr	r3, [r7, #4]
   27452:	681b      	ldr	r3, [r3, #0]
   27454:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   27456:	4b08      	ldr	r3, [pc, #32]	; (27478 <_spi_write_dummy+0x30>)
   27458:	881b      	ldrh	r3, [r3, #0]
   2745a:	001a      	movs	r2, r3
   2745c:	68fb      	ldr	r3, [r7, #12]
   2745e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   27460:	687b      	ldr	r3, [r7, #4]
   27462:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   27464:	b29b      	uxth	r3, r3
   27466:	3b01      	subs	r3, #1
   27468:	b29a      	uxth	r2, r3
   2746a:	687b      	ldr	r3, [r7, #4]
   2746c:	865a      	strh	r2, [r3, #50]	; 0x32
}
   2746e:	46c0      	nop			; (mov r8, r8)
   27470:	46bd      	mov	sp, r7
   27472:	b004      	add	sp, #16
   27474:	bd80      	pop	{r7, pc}
   27476:	46c0      	nop			; (mov r8, r8)
   27478:	20005be4 	.word	0x20005be4

0002747c <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   2747c:	b580      	push	{r7, lr}
   2747e:	b084      	sub	sp, #16
   27480:	af00      	add	r7, sp, #0
   27482:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27484:	687b      	ldr	r3, [r7, #4]
   27486:	681b      	ldr	r3, [r3, #0]
   27488:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   2748a:	230a      	movs	r3, #10
   2748c:	18fb      	adds	r3, r7, r3
   2748e:	2200      	movs	r2, #0
   27490:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   27492:	68fb      	ldr	r3, [r7, #12]
   27494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   27496:	230a      	movs	r3, #10
   27498:	18fb      	adds	r3, r7, r3
   2749a:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   2749c:	687b      	ldr	r3, [r7, #4]
   2749e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   274a0:	b29b      	uxth	r3, r3
   274a2:	3b01      	subs	r3, #1
   274a4:	b29a      	uxth	r2, r3
   274a6:	687b      	ldr	r3, [r7, #4]
   274a8:	865a      	strh	r2, [r3, #50]	; 0x32
}
   274aa:	46c0      	nop			; (mov r8, r8)
   274ac:	46bd      	mov	sp, r7
   274ae:	b004      	add	sp, #16
   274b0:	bd80      	pop	{r7, pc}

000274b2 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   274b2:	b580      	push	{r7, lr}
   274b4:	b084      	sub	sp, #16
   274b6:	af00      	add	r7, sp, #0
   274b8:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   274ba:	687b      	ldr	r3, [r7, #4]
   274bc:	681b      	ldr	r3, [r3, #0]
   274be:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   274c0:	68fb      	ldr	r3, [r7, #12]
   274c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   274c4:	b29a      	uxth	r2, r3
   274c6:	230a      	movs	r3, #10
   274c8:	18fb      	adds	r3, r7, r3
   274ca:	05d2      	lsls	r2, r2, #23
   274cc:	0dd2      	lsrs	r2, r2, #23
   274ce:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   274d0:	687b      	ldr	r3, [r7, #4]
   274d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   274d4:	220a      	movs	r2, #10
   274d6:	18ba      	adds	r2, r7, r2
   274d8:	8812      	ldrh	r2, [r2, #0]
   274da:	b2d2      	uxtb	r2, r2
   274dc:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   274de:	687b      	ldr	r3, [r7, #4]
   274e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   274e2:	1c5a      	adds	r2, r3, #1
   274e4:	687b      	ldr	r3, [r7, #4]
   274e6:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   274e8:	687b      	ldr	r3, [r7, #4]
   274ea:	799b      	ldrb	r3, [r3, #6]
   274ec:	2b01      	cmp	r3, #1
   274ee:	d10d      	bne.n	2750c <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   274f0:	687b      	ldr	r3, [r7, #4]
   274f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   274f4:	220a      	movs	r2, #10
   274f6:	18ba      	adds	r2, r7, r2
   274f8:	8812      	ldrh	r2, [r2, #0]
   274fa:	0a12      	lsrs	r2, r2, #8
   274fc:	b292      	uxth	r2, r2
   274fe:	b2d2      	uxtb	r2, r2
   27500:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   27502:	687b      	ldr	r3, [r7, #4]
   27504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27506:	1c5a      	adds	r2, r3, #1
   27508:	687b      	ldr	r3, [r7, #4]
   2750a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   2750c:	687b      	ldr	r3, [r7, #4]
   2750e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   27510:	b29b      	uxth	r3, r3
   27512:	3b01      	subs	r3, #1
   27514:	b29a      	uxth	r2, r3
   27516:	687b      	ldr	r3, [r7, #4]
   27518:	861a      	strh	r2, [r3, #48]	; 0x30
}
   2751a:	46c0      	nop			; (mov r8, r8)
   2751c:	46bd      	mov	sp, r7
   2751e:	b004      	add	sp, #16
   27520:	bd80      	pop	{r7, pc}
	...

00027524 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   27524:	b580      	push	{r7, lr}
   27526:	b086      	sub	sp, #24
   27528:	af00      	add	r7, sp, #0
   2752a:	0002      	movs	r2, r0
   2752c:	1dfb      	adds	r3, r7, #7
   2752e:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   27530:	1dfb      	adds	r3, r7, #7
   27532:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   27534:	4b96      	ldr	r3, [pc, #600]	; (27790 <_spi_interrupt_handler+0x26c>)
   27536:	0092      	lsls	r2, r2, #2
   27538:	58d3      	ldr	r3, [r2, r3]
   2753a:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   2753c:	697b      	ldr	r3, [r7, #20]
   2753e:	681b      	ldr	r3, [r3, #0]
   27540:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   27542:	697b      	ldr	r3, [r7, #20]
   27544:	2237      	movs	r2, #55	; 0x37
   27546:	5c9a      	ldrb	r2, [r3, r2]
   27548:	697b      	ldr	r3, [r7, #20]
   2754a:	2136      	movs	r1, #54	; 0x36
   2754c:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   2754e:	230f      	movs	r3, #15
   27550:	18fb      	adds	r3, r7, r3
   27552:	400a      	ands	r2, r1
   27554:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   27556:	693b      	ldr	r3, [r7, #16]
   27558:	7e1b      	ldrb	r3, [r3, #24]
   2755a:	b2da      	uxtb	r2, r3
   2755c:	230c      	movs	r3, #12
   2755e:	18fb      	adds	r3, r7, r3
   27560:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   27562:	693b      	ldr	r3, [r7, #16]
   27564:	7d9b      	ldrb	r3, [r3, #22]
   27566:	b2db      	uxtb	r3, r3
   27568:	b29a      	uxth	r2, r3
   2756a:	230c      	movs	r3, #12
   2756c:	18fb      	adds	r3, r7, r3
   2756e:	210c      	movs	r1, #12
   27570:	1879      	adds	r1, r7, r1
   27572:	8809      	ldrh	r1, [r1, #0]
   27574:	400a      	ands	r2, r1
   27576:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   27578:	230c      	movs	r3, #12
   2757a:	18fb      	adds	r3, r7, r3
   2757c:	881b      	ldrh	r3, [r3, #0]
   2757e:	2201      	movs	r2, #1
   27580:	4013      	ands	r3, r2
   27582:	d038      	beq.n	275f6 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   27584:	697b      	ldr	r3, [r7, #20]
   27586:	795b      	ldrb	r3, [r3, #5]
   27588:	2b01      	cmp	r3, #1
   2758a:	d110      	bne.n	275ae <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   2758c:	697b      	ldr	r3, [r7, #20]
   2758e:	7a5b      	ldrb	r3, [r3, #9]
   27590:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   27592:	2b00      	cmp	r3, #0
   27594:	d10b      	bne.n	275ae <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   27596:	697b      	ldr	r3, [r7, #20]
   27598:	0018      	movs	r0, r3
   2759a:	4b7e      	ldr	r3, [pc, #504]	; (27794 <_spi_interrupt_handler+0x270>)
   2759c:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   2759e:	697b      	ldr	r3, [r7, #20]
   275a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   275a2:	b29b      	uxth	r3, r3
   275a4:	2b00      	cmp	r3, #0
   275a6:	d102      	bne.n	275ae <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   275a8:	693b      	ldr	r3, [r7, #16]
   275aa:	2201      	movs	r2, #1
   275ac:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   275ae:	697b      	ldr	r3, [r7, #20]
   275b0:	795b      	ldrb	r3, [r3, #5]
		if (0
   275b2:	2b01      	cmp	r3, #1
   275b4:	d11f      	bne.n	275f6 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   275b6:	697b      	ldr	r3, [r7, #20]
   275b8:	7a5b      	ldrb	r3, [r3, #9]
   275ba:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   275bc:	2b00      	cmp	r3, #0
   275be:	d01a      	beq.n	275f6 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   275c0:	697b      	ldr	r3, [r7, #20]
   275c2:	0018      	movs	r0, r3
   275c4:	4b74      	ldr	r3, [pc, #464]	; (27798 <_spi_interrupt_handler+0x274>)
   275c6:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   275c8:	697b      	ldr	r3, [r7, #20]
   275ca:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   275cc:	b29b      	uxth	r3, r3
   275ce:	2b00      	cmp	r3, #0
   275d0:	d111      	bne.n	275f6 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   275d2:	693b      	ldr	r3, [r7, #16]
   275d4:	2201      	movs	r2, #1
   275d6:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   275d8:	697b      	ldr	r3, [r7, #20]
   275da:	7a5b      	ldrb	r3, [r3, #9]
   275dc:	b2db      	uxtb	r3, r3
   275de:	2b01      	cmp	r3, #1
   275e0:	d109      	bne.n	275f6 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   275e2:	697b      	ldr	r3, [r7, #20]
   275e4:	79db      	ldrb	r3, [r3, #7]
   275e6:	2201      	movs	r2, #1
   275e8:	4053      	eors	r3, r2
   275ea:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   275ec:	2b00      	cmp	r3, #0
   275ee:	d002      	beq.n	275f6 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   275f0:	693b      	ldr	r3, [r7, #16]
   275f2:	2202      	movs	r2, #2
   275f4:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   275f6:	230c      	movs	r3, #12
   275f8:	18fb      	adds	r3, r7, r3
   275fa:	881b      	ldrh	r3, [r3, #0]
   275fc:	2204      	movs	r2, #4
   275fe:	4013      	ands	r3, r2
   27600:	d100      	bne.n	27604 <_spi_interrupt_handler+0xe0>
   27602:	e07e      	b.n	27702 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   27604:	693b      	ldr	r3, [r7, #16]
   27606:	8b5b      	ldrh	r3, [r3, #26]
   27608:	b29b      	uxth	r3, r3
   2760a:	001a      	movs	r2, r3
   2760c:	2304      	movs	r3, #4
   2760e:	4013      	ands	r3, r2
   27610:	d022      	beq.n	27658 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   27612:	697b      	ldr	r3, [r7, #20]
   27614:	7a5b      	ldrb	r3, [r3, #9]
   27616:	b2db      	uxtb	r3, r3
   27618:	2b01      	cmp	r3, #1
   2761a:	d014      	beq.n	27646 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   2761c:	697b      	ldr	r3, [r7, #20]
   2761e:	2238      	movs	r2, #56	; 0x38
   27620:	211e      	movs	r1, #30
   27622:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   27624:	697b      	ldr	r3, [r7, #20]
   27626:	2203      	movs	r2, #3
   27628:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   2762a:	693b      	ldr	r3, [r7, #16]
   2762c:	2205      	movs	r2, #5
   2762e:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   27630:	230f      	movs	r3, #15
   27632:	18fb      	adds	r3, r7, r3
   27634:	781b      	ldrb	r3, [r3, #0]
   27636:	2208      	movs	r2, #8
   27638:	4013      	ands	r3, r2
   2763a:	d004      	beq.n	27646 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   2763c:	697b      	ldr	r3, [r7, #20]
   2763e:	699b      	ldr	r3, [r3, #24]
   27640:	697a      	ldr	r2, [r7, #20]
   27642:	0010      	movs	r0, r2
   27644:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   27646:	693b      	ldr	r3, [r7, #16]
   27648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2764a:	230a      	movs	r3, #10
   2764c:	18fb      	adds	r3, r7, r3
   2764e:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   27650:	693b      	ldr	r3, [r7, #16]
   27652:	2204      	movs	r2, #4
   27654:	835a      	strh	r2, [r3, #26]
   27656:	e054      	b.n	27702 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   27658:	697b      	ldr	r3, [r7, #20]
   2765a:	7a5b      	ldrb	r3, [r3, #9]
   2765c:	b2db      	uxtb	r3, r3
   2765e:	2b01      	cmp	r3, #1
   27660:	d11e      	bne.n	276a0 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   27662:	697b      	ldr	r3, [r7, #20]
   27664:	0018      	movs	r0, r3
   27666:	4b4d      	ldr	r3, [pc, #308]	; (2779c <_spi_interrupt_handler+0x278>)
   27668:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   2766a:	697b      	ldr	r3, [r7, #20]
   2766c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   2766e:	b29b      	uxth	r3, r3
   27670:	2b00      	cmp	r3, #0
   27672:	d146      	bne.n	27702 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   27674:	693b      	ldr	r3, [r7, #16]
   27676:	2204      	movs	r2, #4
   27678:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   2767a:	697b      	ldr	r3, [r7, #20]
   2767c:	2238      	movs	r2, #56	; 0x38
   2767e:	2100      	movs	r1, #0
   27680:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   27682:	697b      	ldr	r3, [r7, #20]
   27684:	2203      	movs	r2, #3
   27686:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   27688:	230f      	movs	r3, #15
   2768a:	18fb      	adds	r3, r7, r3
   2768c:	781b      	ldrb	r3, [r3, #0]
   2768e:	2201      	movs	r2, #1
   27690:	4013      	ands	r3, r2
   27692:	d036      	beq.n	27702 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   27694:	697b      	ldr	r3, [r7, #20]
   27696:	68db      	ldr	r3, [r3, #12]
   27698:	697a      	ldr	r2, [r7, #20]
   2769a:	0010      	movs	r0, r2
   2769c:	4798      	blx	r3
   2769e:	e030      	b.n	27702 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   276a0:	697b      	ldr	r3, [r7, #20]
   276a2:	0018      	movs	r0, r3
   276a4:	4b3e      	ldr	r3, [pc, #248]	; (277a0 <_spi_interrupt_handler+0x27c>)
   276a6:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   276a8:	697b      	ldr	r3, [r7, #20]
   276aa:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   276ac:	b29b      	uxth	r3, r3
   276ae:	2b00      	cmp	r3, #0
   276b0:	d127      	bne.n	27702 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   276b2:	697b      	ldr	r3, [r7, #20]
   276b4:	2238      	movs	r2, #56	; 0x38
   276b6:	2100      	movs	r1, #0
   276b8:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   276ba:	693b      	ldr	r3, [r7, #16]
   276bc:	2204      	movs	r2, #4
   276be:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   276c0:	697b      	ldr	r3, [r7, #20]
   276c2:	7a5b      	ldrb	r3, [r3, #9]
   276c4:	b2db      	uxtb	r3, r3
   276c6:	2b02      	cmp	r3, #2
   276c8:	d10b      	bne.n	276e2 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   276ca:	230f      	movs	r3, #15
   276cc:	18fb      	adds	r3, r7, r3
   276ce:	781b      	ldrb	r3, [r3, #0]
   276d0:	2204      	movs	r2, #4
   276d2:	4013      	ands	r3, r2
   276d4:	d015      	beq.n	27702 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   276d6:	697b      	ldr	r3, [r7, #20]
   276d8:	695b      	ldr	r3, [r3, #20]
   276da:	697a      	ldr	r2, [r7, #20]
   276dc:	0010      	movs	r0, r2
   276de:	4798      	blx	r3
   276e0:	e00f      	b.n	27702 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   276e2:	697b      	ldr	r3, [r7, #20]
   276e4:	7a5b      	ldrb	r3, [r3, #9]
   276e6:	b2db      	uxtb	r3, r3
   276e8:	2b00      	cmp	r3, #0
   276ea:	d10a      	bne.n	27702 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   276ec:	230f      	movs	r3, #15
   276ee:	18fb      	adds	r3, r7, r3
   276f0:	781b      	ldrb	r3, [r3, #0]
   276f2:	2202      	movs	r2, #2
   276f4:	4013      	ands	r3, r2
   276f6:	d004      	beq.n	27702 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   276f8:	697b      	ldr	r3, [r7, #20]
   276fa:	691b      	ldr	r3, [r3, #16]
   276fc:	697a      	ldr	r2, [r7, #20]
   276fe:	0010      	movs	r0, r2
   27700:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   27702:	230c      	movs	r3, #12
   27704:	18fb      	adds	r3, r7, r3
   27706:	881b      	ldrh	r3, [r3, #0]
   27708:	2202      	movs	r2, #2
   2770a:	4013      	ands	r3, r2
   2770c:	d024      	beq.n	27758 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   2770e:	697b      	ldr	r3, [r7, #20]
   27710:	795b      	ldrb	r3, [r3, #5]
   27712:	2b01      	cmp	r3, #1
   27714:	d120      	bne.n	27758 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   27716:	697b      	ldr	r3, [r7, #20]
   27718:	7a5b      	ldrb	r3, [r3, #9]
   2771a:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   2771c:	2b01      	cmp	r3, #1
   2771e:	d11b      	bne.n	27758 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   27720:	697b      	ldr	r3, [r7, #20]
   27722:	79db      	ldrb	r3, [r3, #7]
   27724:	2201      	movs	r2, #1
   27726:	4053      	eors	r3, r2
   27728:	b2db      	uxtb	r3, r3
   2772a:	2b00      	cmp	r3, #0
   2772c:	d014      	beq.n	27758 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   2772e:	693b      	ldr	r3, [r7, #16]
   27730:	2202      	movs	r2, #2
   27732:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   27734:	697b      	ldr	r3, [r7, #20]
   27736:	2203      	movs	r2, #3
   27738:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   2773a:	697b      	ldr	r3, [r7, #20]
   2773c:	2238      	movs	r2, #56	; 0x38
   2773e:	2100      	movs	r1, #0
   27740:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   27742:	230f      	movs	r3, #15
   27744:	18fb      	adds	r3, r7, r3
   27746:	781b      	ldrb	r3, [r3, #0]
   27748:	2201      	movs	r2, #1
   2774a:	4013      	ands	r3, r2
   2774c:	d004      	beq.n	27758 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   2774e:	697b      	ldr	r3, [r7, #20]
   27750:	68db      	ldr	r3, [r3, #12]
   27752:	697a      	ldr	r2, [r7, #20]
   27754:	0010      	movs	r0, r2
   27756:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   27758:	230c      	movs	r3, #12
   2775a:	18fb      	adds	r3, r7, r3
   2775c:	881b      	ldrh	r3, [r3, #0]
   2775e:	2280      	movs	r2, #128	; 0x80
   27760:	4013      	ands	r3, r2
   27762:	d010      	beq.n	27786 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   27764:	693b      	ldr	r3, [r7, #16]
   27766:	2280      	movs	r2, #128	; 0x80
   27768:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   2776a:	693b      	ldr	r3, [r7, #16]
   2776c:	2280      	movs	r2, #128	; 0x80
   2776e:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   27770:	230f      	movs	r3, #15
   27772:	18fb      	adds	r3, r7, r3
   27774:	781b      	ldrb	r3, [r3, #0]
   27776:	2240      	movs	r2, #64	; 0x40
   27778:	4013      	ands	r3, r2
   2777a:	d004      	beq.n	27786 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   2777c:	697b      	ldr	r3, [r7, #20]
   2777e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   27780:	697a      	ldr	r2, [r7, #20]
   27782:	0010      	movs	r0, r2
   27784:	4798      	blx	r3
		}
	}
#  endif
}
   27786:	46c0      	nop			; (mov r8, r8)
   27788:	46bd      	mov	sp, r7
   2778a:	b006      	add	sp, #24
   2778c:	bd80      	pop	{r7, pc}
   2778e:	46c0      	nop			; (mov r8, r8)
   27790:	20005bcc 	.word	0x20005bcc
   27794:	00027449 	.word	0x00027449
   27798:	000273cd 	.word	0x000273cd
   2779c:	0002747d 	.word	0x0002747d
   277a0:	000274b3 	.word	0x000274b3

000277a4 <system_gclk_chan_get_config_defaults>:
{
   277a4:	b580      	push	{r7, lr}
   277a6:	b082      	sub	sp, #8
   277a8:	af00      	add	r7, sp, #0
   277aa:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   277ac:	687b      	ldr	r3, [r7, #4]
   277ae:	2200      	movs	r2, #0
   277b0:	701a      	strb	r2, [r3, #0]
}
   277b2:	46c0      	nop			; (mov r8, r8)
   277b4:	46bd      	mov	sp, r7
   277b6:	b002      	add	sp, #8
   277b8:	bd80      	pop	{r7, pc}
	...

000277bc <system_apb_clock_set_mask>:
{
   277bc:	b580      	push	{r7, lr}
   277be:	b082      	sub	sp, #8
   277c0:	af00      	add	r7, sp, #0
   277c2:	0002      	movs	r2, r0
   277c4:	6039      	str	r1, [r7, #0]
   277c6:	1dfb      	adds	r3, r7, #7
   277c8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   277ca:	1dfb      	adds	r3, r7, #7
   277cc:	781b      	ldrb	r3, [r3, #0]
   277ce:	2b01      	cmp	r3, #1
   277d0:	d00a      	beq.n	277e8 <system_apb_clock_set_mask+0x2c>
   277d2:	2b02      	cmp	r3, #2
   277d4:	d00f      	beq.n	277f6 <system_apb_clock_set_mask+0x3a>
   277d6:	2b00      	cmp	r3, #0
   277d8:	d114      	bne.n	27804 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   277da:	4b0e      	ldr	r3, [pc, #56]	; (27814 <system_apb_clock_set_mask+0x58>)
   277dc:	4a0d      	ldr	r2, [pc, #52]	; (27814 <system_apb_clock_set_mask+0x58>)
   277de:	6991      	ldr	r1, [r2, #24]
   277e0:	683a      	ldr	r2, [r7, #0]
   277e2:	430a      	orrs	r2, r1
   277e4:	619a      	str	r2, [r3, #24]
			break;
   277e6:	e00f      	b.n	27808 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   277e8:	4b0a      	ldr	r3, [pc, #40]	; (27814 <system_apb_clock_set_mask+0x58>)
   277ea:	4a0a      	ldr	r2, [pc, #40]	; (27814 <system_apb_clock_set_mask+0x58>)
   277ec:	69d1      	ldr	r1, [r2, #28]
   277ee:	683a      	ldr	r2, [r7, #0]
   277f0:	430a      	orrs	r2, r1
   277f2:	61da      	str	r2, [r3, #28]
			break;
   277f4:	e008      	b.n	27808 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   277f6:	4b07      	ldr	r3, [pc, #28]	; (27814 <system_apb_clock_set_mask+0x58>)
   277f8:	4a06      	ldr	r2, [pc, #24]	; (27814 <system_apb_clock_set_mask+0x58>)
   277fa:	6a11      	ldr	r1, [r2, #32]
   277fc:	683a      	ldr	r2, [r7, #0]
   277fe:	430a      	orrs	r2, r1
   27800:	621a      	str	r2, [r3, #32]
			break;
   27802:	e001      	b.n	27808 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   27804:	2317      	movs	r3, #23
   27806:	e000      	b.n	2780a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   27808:	2300      	movs	r3, #0
}
   2780a:	0018      	movs	r0, r3
   2780c:	46bd      	mov	sp, r7
   2780e:	b002      	add	sp, #8
   27810:	bd80      	pop	{r7, pc}
   27812:	46c0      	nop			; (mov r8, r8)
   27814:	40000400 	.word	0x40000400

00027818 <system_pinmux_get_config_defaults>:
{
   27818:	b580      	push	{r7, lr}
   2781a:	b082      	sub	sp, #8
   2781c:	af00      	add	r7, sp, #0
   2781e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   27820:	687b      	ldr	r3, [r7, #4]
   27822:	2280      	movs	r2, #128	; 0x80
   27824:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27826:	687b      	ldr	r3, [r7, #4]
   27828:	2200      	movs	r2, #0
   2782a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2782c:	687b      	ldr	r3, [r7, #4]
   2782e:	2201      	movs	r2, #1
   27830:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   27832:	687b      	ldr	r3, [r7, #4]
   27834:	2200      	movs	r2, #0
   27836:	70da      	strb	r2, [r3, #3]
}
   27838:	46c0      	nop			; (mov r8, r8)
   2783a:	46bd      	mov	sp, r7
   2783c:	b002      	add	sp, #8
   2783e:	bd80      	pop	{r7, pc}

00027840 <system_is_debugger_present>:
{
   27840:	b580      	push	{r7, lr}
   27842:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   27844:	4b05      	ldr	r3, [pc, #20]	; (2785c <system_is_debugger_present+0x1c>)
   27846:	789b      	ldrb	r3, [r3, #2]
   27848:	b2db      	uxtb	r3, r3
   2784a:	001a      	movs	r2, r3
   2784c:	2302      	movs	r3, #2
   2784e:	4013      	ands	r3, r2
   27850:	1e5a      	subs	r2, r3, #1
   27852:	4193      	sbcs	r3, r2
   27854:	b2db      	uxtb	r3, r3
}
   27856:	0018      	movs	r0, r3
   27858:	46bd      	mov	sp, r7
   2785a:	bd80      	pop	{r7, pc}
   2785c:	41002000 	.word	0x41002000

00027860 <usart_is_syncing>:
{
   27860:	b580      	push	{r7, lr}
   27862:	b084      	sub	sp, #16
   27864:	af00      	add	r7, sp, #0
   27866:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   27868:	687b      	ldr	r3, [r7, #4]
   2786a:	681b      	ldr	r3, [r3, #0]
   2786c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   2786e:	68fb      	ldr	r3, [r7, #12]
   27870:	69db      	ldr	r3, [r3, #28]
   27872:	1e5a      	subs	r2, r3, #1
   27874:	4193      	sbcs	r3, r2
   27876:	b2db      	uxtb	r3, r3
}
   27878:	0018      	movs	r0, r3
   2787a:	46bd      	mov	sp, r7
   2787c:	b004      	add	sp, #16
   2787e:	bd80      	pop	{r7, pc}

00027880 <_usart_wait_for_sync>:
{
   27880:	b580      	push	{r7, lr}
   27882:	b082      	sub	sp, #8
   27884:	af00      	add	r7, sp, #0
   27886:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   27888:	46c0      	nop			; (mov r8, r8)
   2788a:	687b      	ldr	r3, [r7, #4]
   2788c:	0018      	movs	r0, r3
   2788e:	4b04      	ldr	r3, [pc, #16]	; (278a0 <_usart_wait_for_sync+0x20>)
   27890:	4798      	blx	r3
   27892:	1e03      	subs	r3, r0, #0
   27894:	d1f9      	bne.n	2788a <_usart_wait_for_sync+0xa>
}
   27896:	46c0      	nop			; (mov r8, r8)
   27898:	46bd      	mov	sp, r7
   2789a:	b002      	add	sp, #8
   2789c:	bd80      	pop	{r7, pc}
   2789e:	46c0      	nop			; (mov r8, r8)
   278a0:	00027861 	.word	0x00027861

000278a4 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   278a4:	b5b0      	push	{r4, r5, r7, lr}
   278a6:	b08c      	sub	sp, #48	; 0x30
   278a8:	af02      	add	r7, sp, #8
   278aa:	6078      	str	r0, [r7, #4]
   278ac:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   278ae:	687b      	ldr	r3, [r7, #4]
   278b0:	681b      	ldr	r3, [r3, #0]
   278b2:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   278b4:	687b      	ldr	r3, [r7, #4]
   278b6:	681b      	ldr	r3, [r3, #0]
   278b8:	0018      	movs	r0, r3
   278ba:	4bab      	ldr	r3, [pc, #684]	; (27b68 <_usart_set_config+0x2c4>)
   278bc:	4798      	blx	r3
   278be:	0003      	movs	r3, r0
   278c0:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   278c2:	697b      	ldr	r3, [r7, #20]
   278c4:	3314      	adds	r3, #20
   278c6:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   278c8:	2300      	movs	r3, #0
   278ca:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   278cc:	2300      	movs	r3, #0
   278ce:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   278d0:	230a      	movs	r3, #10
   278d2:	18fb      	adds	r3, r7, r3
   278d4:	2200      	movs	r2, #0
   278d6:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   278d8:	231f      	movs	r3, #31
   278da:	18fb      	adds	r3, r7, r3
   278dc:	2200      	movs	r2, #0
   278de:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   278e0:	231e      	movs	r3, #30
   278e2:	18fb      	adds	r3, r7, r3
   278e4:	2210      	movs	r2, #16
   278e6:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   278e8:	683b      	ldr	r3, [r7, #0]
   278ea:	8a1b      	ldrh	r3, [r3, #16]
   278ec:	2280      	movs	r2, #128	; 0x80
   278ee:	01d2      	lsls	r2, r2, #7
   278f0:	4293      	cmp	r3, r2
   278f2:	d01c      	beq.n	2792e <_usart_set_config+0x8a>
   278f4:	2280      	movs	r2, #128	; 0x80
   278f6:	01d2      	lsls	r2, r2, #7
   278f8:	4293      	cmp	r3, r2
   278fa:	dc06      	bgt.n	2790a <_usart_set_config+0x66>
   278fc:	2b00      	cmp	r3, #0
   278fe:	d00d      	beq.n	2791c <_usart_set_config+0x78>
   27900:	2280      	movs	r2, #128	; 0x80
   27902:	0192      	lsls	r2, r2, #6
   27904:	4293      	cmp	r3, r2
   27906:	d024      	beq.n	27952 <_usart_set_config+0xae>
   27908:	e035      	b.n	27976 <_usart_set_config+0xd2>
   2790a:	22c0      	movs	r2, #192	; 0xc0
   2790c:	01d2      	lsls	r2, r2, #7
   2790e:	4293      	cmp	r3, r2
   27910:	d028      	beq.n	27964 <_usart_set_config+0xc0>
   27912:	2280      	movs	r2, #128	; 0x80
   27914:	0212      	lsls	r2, r2, #8
   27916:	4293      	cmp	r3, r2
   27918:	d012      	beq.n	27940 <_usart_set_config+0x9c>
   2791a:	e02c      	b.n	27976 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2791c:	231f      	movs	r3, #31
   2791e:	18fb      	adds	r3, r7, r3
   27920:	2200      	movs	r2, #0
   27922:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   27924:	231e      	movs	r3, #30
   27926:	18fb      	adds	r3, r7, r3
   27928:	2210      	movs	r2, #16
   2792a:	701a      	strb	r2, [r3, #0]
			break;
   2792c:	e023      	b.n	27976 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2792e:	231f      	movs	r3, #31
   27930:	18fb      	adds	r3, r7, r3
   27932:	2200      	movs	r2, #0
   27934:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   27936:	231e      	movs	r3, #30
   27938:	18fb      	adds	r3, r7, r3
   2793a:	2208      	movs	r2, #8
   2793c:	701a      	strb	r2, [r3, #0]
			break;
   2793e:	e01a      	b.n	27976 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   27940:	231f      	movs	r3, #31
   27942:	18fb      	adds	r3, r7, r3
   27944:	2200      	movs	r2, #0
   27946:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   27948:	231e      	movs	r3, #30
   2794a:	18fb      	adds	r3, r7, r3
   2794c:	2203      	movs	r2, #3
   2794e:	701a      	strb	r2, [r3, #0]
			break;
   27950:	e011      	b.n	27976 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   27952:	231f      	movs	r3, #31
   27954:	18fb      	adds	r3, r7, r3
   27956:	2201      	movs	r2, #1
   27958:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2795a:	231e      	movs	r3, #30
   2795c:	18fb      	adds	r3, r7, r3
   2795e:	2210      	movs	r2, #16
   27960:	701a      	strb	r2, [r3, #0]
			break;
   27962:	e008      	b.n	27976 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   27964:	231f      	movs	r3, #31
   27966:	18fb      	adds	r3, r7, r3
   27968:	2201      	movs	r2, #1
   2796a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   2796c:	231e      	movs	r3, #30
   2796e:	18fb      	adds	r3, r7, r3
   27970:	2208      	movs	r2, #8
   27972:	701a      	strb	r2, [r3, #0]
			break;
   27974:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   27976:	683b      	ldr	r3, [r7, #0]
   27978:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   2797a:	683b      	ldr	r3, [r7, #0]
   2797c:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   2797e:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   27980:	683b      	ldr	r3, [r7, #0]
   27982:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   27984:	4313      	orrs	r3, r2
		config->sample_rate |
   27986:	683a      	ldr	r2, [r7, #0]
   27988:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   2798a:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   2798c:	683a      	ldr	r2, [r7, #0]
   2798e:	7e12      	ldrb	r2, [r2, #24]
   27990:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   27992:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   27994:	683a      	ldr	r2, [r7, #0]
   27996:	2126      	movs	r1, #38	; 0x26
   27998:	5c52      	ldrb	r2, [r2, r1]
   2799a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   2799c:	4313      	orrs	r3, r2
   2799e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   279a0:	231d      	movs	r3, #29
   279a2:	18fb      	adds	r3, r7, r3
   279a4:	2200      	movs	r2, #0
   279a6:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   279a8:	683b      	ldr	r3, [r7, #0]
   279aa:	685b      	ldr	r3, [r3, #4]
   279ac:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   279ae:	68fb      	ldr	r3, [r7, #12]
   279b0:	2b00      	cmp	r3, #0
   279b2:	d01e      	beq.n	279f2 <_usart_set_config+0x14e>
   279b4:	2280      	movs	r2, #128	; 0x80
   279b6:	0552      	lsls	r2, r2, #21
   279b8:	4293      	cmp	r3, r2
   279ba:	d14f      	bne.n	27a5c <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   279bc:	683b      	ldr	r3, [r7, #0]
   279be:	2227      	movs	r2, #39	; 0x27
   279c0:	5c9b      	ldrb	r3, [r3, r2]
   279c2:	2201      	movs	r2, #1
   279c4:	4053      	eors	r3, r2
   279c6:	b2db      	uxtb	r3, r3
   279c8:	2b00      	cmp	r3, #0
   279ca:	d046      	beq.n	27a5a <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   279cc:	683b      	ldr	r3, [r7, #0]
   279ce:	6a1d      	ldr	r5, [r3, #32]
   279d0:	693b      	ldr	r3, [r7, #16]
   279d2:	b2db      	uxtb	r3, r3
   279d4:	0018      	movs	r0, r3
   279d6:	4b65      	ldr	r3, [pc, #404]	; (27b6c <_usart_set_config+0x2c8>)
   279d8:	4798      	blx	r3
   279da:	0001      	movs	r1, r0
   279dc:	231d      	movs	r3, #29
   279de:	18fc      	adds	r4, r7, r3
   279e0:	230a      	movs	r3, #10
   279e2:	18fb      	adds	r3, r7, r3
   279e4:	001a      	movs	r2, r3
   279e6:	0028      	movs	r0, r5
   279e8:	4b61      	ldr	r3, [pc, #388]	; (27b70 <_usart_set_config+0x2cc>)
   279ea:	4798      	blx	r3
   279ec:	0003      	movs	r3, r0
   279ee:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   279f0:	e033      	b.n	27a5a <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   279f2:	683b      	ldr	r3, [r7, #0]
   279f4:	2227      	movs	r2, #39	; 0x27
   279f6:	5c9b      	ldrb	r3, [r3, r2]
   279f8:	2b00      	cmp	r3, #0
   279fa:	d014      	beq.n	27a26 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   279fc:	683b      	ldr	r3, [r7, #0]
   279fe:	6a18      	ldr	r0, [r3, #32]
   27a00:	683b      	ldr	r3, [r7, #0]
   27a02:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   27a04:	231d      	movs	r3, #29
   27a06:	18fc      	adds	r4, r7, r3
   27a08:	231f      	movs	r3, #31
   27a0a:	18fb      	adds	r3, r7, r3
   27a0c:	781d      	ldrb	r5, [r3, #0]
   27a0e:	230a      	movs	r3, #10
   27a10:	18fa      	adds	r2, r7, r3
   27a12:	231e      	movs	r3, #30
   27a14:	18fb      	adds	r3, r7, r3
   27a16:	781b      	ldrb	r3, [r3, #0]
   27a18:	9300      	str	r3, [sp, #0]
   27a1a:	002b      	movs	r3, r5
   27a1c:	4d55      	ldr	r5, [pc, #340]	; (27b74 <_usart_set_config+0x2d0>)
   27a1e:	47a8      	blx	r5
   27a20:	0003      	movs	r3, r0
   27a22:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   27a24:	e01a      	b.n	27a5c <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   27a26:	683b      	ldr	r3, [r7, #0]
   27a28:	6a1d      	ldr	r5, [r3, #32]
   27a2a:	693b      	ldr	r3, [r7, #16]
   27a2c:	b2db      	uxtb	r3, r3
   27a2e:	0018      	movs	r0, r3
   27a30:	4b4e      	ldr	r3, [pc, #312]	; (27b6c <_usart_set_config+0x2c8>)
   27a32:	4798      	blx	r3
				status_code =
   27a34:	231d      	movs	r3, #29
   27a36:	18fc      	adds	r4, r7, r3
   27a38:	231f      	movs	r3, #31
   27a3a:	18fb      	adds	r3, r7, r3
   27a3c:	7819      	ldrb	r1, [r3, #0]
   27a3e:	230a      	movs	r3, #10
   27a40:	18fa      	adds	r2, r7, r3
   27a42:	231e      	movs	r3, #30
   27a44:	18fb      	adds	r3, r7, r3
   27a46:	781b      	ldrb	r3, [r3, #0]
   27a48:	9300      	str	r3, [sp, #0]
   27a4a:	000b      	movs	r3, r1
   27a4c:	0001      	movs	r1, r0
   27a4e:	0028      	movs	r0, r5
   27a50:	4d48      	ldr	r5, [pc, #288]	; (27b74 <_usart_set_config+0x2d0>)
   27a52:	47a8      	blx	r5
   27a54:	0003      	movs	r3, r0
   27a56:	7023      	strb	r3, [r4, #0]
			break;
   27a58:	e000      	b.n	27a5c <_usart_set_config+0x1b8>
			break;
   27a5a:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   27a5c:	231d      	movs	r3, #29
   27a5e:	18fb      	adds	r3, r7, r3
   27a60:	781b      	ldrb	r3, [r3, #0]
   27a62:	2b00      	cmp	r3, #0
   27a64:	d003      	beq.n	27a6e <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   27a66:	231d      	movs	r3, #29
   27a68:	18fb      	adds	r3, r7, r3
   27a6a:	781b      	ldrb	r3, [r3, #0]
   27a6c:	e077      	b.n	27b5e <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   27a6e:	683b      	ldr	r3, [r7, #0]
   27a70:	7e5b      	ldrb	r3, [r3, #25]
   27a72:	2b00      	cmp	r3, #0
   27a74:	d003      	beq.n	27a7e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   27a76:	683b      	ldr	r3, [r7, #0]
   27a78:	7e9a      	ldrb	r2, [r3, #26]
   27a7a:	69bb      	ldr	r3, [r7, #24]
   27a7c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   27a7e:	687b      	ldr	r3, [r7, #4]
   27a80:	0018      	movs	r0, r3
   27a82:	4b3d      	ldr	r3, [pc, #244]	; (27b78 <_usart_set_config+0x2d4>)
   27a84:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   27a86:	230a      	movs	r3, #10
   27a88:	18fb      	adds	r3, r7, r3
   27a8a:	881a      	ldrh	r2, [r3, #0]
   27a8c:	69bb      	ldr	r3, [r7, #24]
   27a8e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   27a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27a92:	68fb      	ldr	r3, [r7, #12]
   27a94:	4313      	orrs	r3, r2
   27a96:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   27a98:	683b      	ldr	r3, [r7, #0]
   27a9a:	2227      	movs	r2, #39	; 0x27
   27a9c:	5c9b      	ldrb	r3, [r3, r2]
   27a9e:	2201      	movs	r2, #1
   27aa0:	4053      	eors	r3, r2
   27aa2:	b2db      	uxtb	r3, r3
   27aa4:	2b00      	cmp	r3, #0
   27aa6:	d003      	beq.n	27ab0 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   27aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27aaa:	2204      	movs	r2, #4
   27aac:	4313      	orrs	r3, r2
   27aae:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   27ab0:	683b      	ldr	r3, [r7, #0]
   27ab2:	7e5b      	ldrb	r3, [r3, #25]
   27ab4:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   27ab6:	683b      	ldr	r3, [r7, #0]
   27ab8:	7f1b      	ldrb	r3, [r3, #28]
   27aba:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   27abc:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   27abe:	683b      	ldr	r3, [r7, #0]
   27ac0:	7f5b      	ldrb	r3, [r3, #29]
   27ac2:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   27ac4:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   27ac6:	683b      	ldr	r3, [r7, #0]
   27ac8:	2124      	movs	r1, #36	; 0x24
   27aca:	5c5b      	ldrb	r3, [r3, r1]
   27acc:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   27ace:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   27ad0:	683b      	ldr	r3, [r7, #0]
   27ad2:	2125      	movs	r1, #37	; 0x25
   27ad4:	5c5b      	ldrb	r3, [r3, r1]
   27ad6:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   27ad8:	4313      	orrs	r3, r2
	ctrlb =  
   27ada:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   27adc:	683b      	ldr	r3, [r7, #0]
   27ade:	7a9b      	ldrb	r3, [r3, #10]
   27ae0:	001a      	movs	r2, r3
   27ae2:	6a3b      	ldr	r3, [r7, #32]
   27ae4:	4313      	orrs	r3, r2
   27ae6:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   27ae8:	683b      	ldr	r3, [r7, #0]
   27aea:	7adb      	ldrb	r3, [r3, #11]
   27aec:	001a      	movs	r2, r3
   27aee:	6a3b      	ldr	r3, [r7, #32]
   27af0:	4313      	orrs	r3, r2
   27af2:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   27af4:	683b      	ldr	r3, [r7, #0]
   27af6:	891b      	ldrh	r3, [r3, #8]
   27af8:	2bff      	cmp	r3, #255	; 0xff
   27afa:	d00b      	beq.n	27b14 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   27afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27afe:	2280      	movs	r2, #128	; 0x80
   27b00:	0452      	lsls	r2, r2, #17
   27b02:	4313      	orrs	r3, r2
   27b04:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   27b06:	683b      	ldr	r3, [r7, #0]
   27b08:	891b      	ldrh	r3, [r3, #8]
   27b0a:	001a      	movs	r2, r3
   27b0c:	6a3b      	ldr	r3, [r7, #32]
   27b0e:	4313      	orrs	r3, r2
   27b10:	623b      	str	r3, [r7, #32]
   27b12:	e008      	b.n	27b26 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   27b14:	683b      	ldr	r3, [r7, #0]
   27b16:	7edb      	ldrb	r3, [r3, #27]
   27b18:	2b00      	cmp	r3, #0
   27b1a:	d004      	beq.n	27b26 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   27b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27b1e:	2280      	movs	r2, #128	; 0x80
   27b20:	04d2      	lsls	r2, r2, #19
   27b22:	4313      	orrs	r3, r2
   27b24:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   27b26:	683b      	ldr	r3, [r7, #0]
   27b28:	222c      	movs	r2, #44	; 0x2c
   27b2a:	5c9b      	ldrb	r3, [r3, r2]
   27b2c:	2b00      	cmp	r3, #0
   27b2e:	d103      	bne.n	27b38 <_usart_set_config+0x294>
   27b30:	4b12      	ldr	r3, [pc, #72]	; (27b7c <_usart_set_config+0x2d8>)
   27b32:	4798      	blx	r3
   27b34:	1e03      	subs	r3, r0, #0
   27b36:	d003      	beq.n	27b40 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   27b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27b3a:	2280      	movs	r2, #128	; 0x80
   27b3c:	4313      	orrs	r3, r2
   27b3e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   27b40:	687b      	ldr	r3, [r7, #4]
   27b42:	0018      	movs	r0, r3
   27b44:	4b0c      	ldr	r3, [pc, #48]	; (27b78 <_usart_set_config+0x2d4>)
   27b46:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   27b48:	69bb      	ldr	r3, [r7, #24]
   27b4a:	6a3a      	ldr	r2, [r7, #32]
   27b4c:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   27b4e:	687b      	ldr	r3, [r7, #4]
   27b50:	0018      	movs	r0, r3
   27b52:	4b09      	ldr	r3, [pc, #36]	; (27b78 <_usart_set_config+0x2d4>)
   27b54:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   27b56:	69bb      	ldr	r3, [r7, #24]
   27b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27b5a:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   27b5c:	2300      	movs	r3, #0
}
   27b5e:	0018      	movs	r0, r3
   27b60:	46bd      	mov	sp, r7
   27b62:	b00a      	add	sp, #40	; 0x28
   27b64:	bdb0      	pop	{r4, r5, r7, pc}
   27b66:	46c0      	nop			; (mov r8, r8)
   27b68:	0002664d 	.word	0x0002664d
   27b6c:	00029001 	.word	0x00029001
   27b70:	000261c7 	.word	0x000261c7
   27b74:	00026245 	.word	0x00026245
   27b78:	00027881 	.word	0x00027881
   27b7c:	00027841 	.word	0x00027841

00027b80 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   27b80:	b590      	push	{r4, r7, lr}
   27b82:	b093      	sub	sp, #76	; 0x4c
   27b84:	af00      	add	r7, sp, #0
   27b86:	60f8      	str	r0, [r7, #12]
   27b88:	60b9      	str	r1, [r7, #8]
   27b8a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   27b8c:	233b      	movs	r3, #59	; 0x3b
   27b8e:	18fb      	adds	r3, r7, r3
   27b90:	2200      	movs	r2, #0
   27b92:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   27b94:	68fb      	ldr	r3, [r7, #12]
   27b96:	68ba      	ldr	r2, [r7, #8]
   27b98:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   27b9a:	68fb      	ldr	r3, [r7, #12]
   27b9c:	681b      	ldr	r3, [r3, #0]
   27b9e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27ba0:	68fb      	ldr	r3, [r7, #12]
   27ba2:	681b      	ldr	r3, [r3, #0]
   27ba4:	0018      	movs	r0, r3
   27ba6:	4b86      	ldr	r3, [pc, #536]	; (27dc0 <usart_init+0x240>)
   27ba8:	4798      	blx	r3
   27baa:	0003      	movs	r3, r0
   27bac:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   27bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   27bb0:	3302      	adds	r3, #2
   27bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   27bb6:	3314      	adds	r3, #20
   27bb8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   27bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27bbc:	681b      	ldr	r3, [r3, #0]
   27bbe:	2201      	movs	r2, #1
   27bc0:	4013      	ands	r3, r2
   27bc2:	d001      	beq.n	27bc8 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   27bc4:	2305      	movs	r3, #5
   27bc6:	e0f6      	b.n	27db6 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   27bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27bca:	681b      	ldr	r3, [r3, #0]
   27bcc:	2202      	movs	r2, #2
   27bce:	4013      	ands	r3, r2
   27bd0:	d001      	beq.n	27bd6 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   27bd2:	231c      	movs	r3, #28
   27bd4:	e0ef      	b.n	27db6 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   27bd6:	2201      	movs	r2, #1
   27bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27bda:	409a      	lsls	r2, r3
   27bdc:	0013      	movs	r3, r2
   27bde:	0019      	movs	r1, r3
   27be0:	2002      	movs	r0, #2
   27be2:	4b78      	ldr	r3, [pc, #480]	; (27dc4 <usart_init+0x244>)
   27be4:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27be6:	2324      	movs	r3, #36	; 0x24
   27be8:	18fb      	adds	r3, r7, r3
   27bea:	0018      	movs	r0, r3
   27bec:	4b76      	ldr	r3, [pc, #472]	; (27dc8 <usart_init+0x248>)
   27bee:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   27bf0:	687b      	ldr	r3, [r7, #4]
   27bf2:	222d      	movs	r2, #45	; 0x2d
   27bf4:	5c9a      	ldrb	r2, [r3, r2]
   27bf6:	2324      	movs	r3, #36	; 0x24
   27bf8:	18fb      	adds	r3, r7, r3
   27bfa:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   27bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   27bfe:	b2db      	uxtb	r3, r3
   27c00:	2224      	movs	r2, #36	; 0x24
   27c02:	18ba      	adds	r2, r7, r2
   27c04:	0011      	movs	r1, r2
   27c06:	0018      	movs	r0, r3
   27c08:	4b70      	ldr	r3, [pc, #448]	; (27dcc <usart_init+0x24c>)
   27c0a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   27c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   27c0e:	b2db      	uxtb	r3, r3
   27c10:	0018      	movs	r0, r3
   27c12:	4b6f      	ldr	r3, [pc, #444]	; (27dd0 <usart_init+0x250>)
   27c14:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   27c16:	687b      	ldr	r3, [r7, #4]
   27c18:	222d      	movs	r2, #45	; 0x2d
   27c1a:	5c9b      	ldrb	r3, [r3, r2]
   27c1c:	2100      	movs	r1, #0
   27c1e:	0018      	movs	r0, r3
   27c20:	4b6c      	ldr	r3, [pc, #432]	; (27dd4 <usart_init+0x254>)
   27c22:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   27c24:	687b      	ldr	r3, [r7, #4]
   27c26:	7ada      	ldrb	r2, [r3, #11]
   27c28:	68fb      	ldr	r3, [r7, #12]
   27c2a:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   27c2c:	687b      	ldr	r3, [r7, #4]
   27c2e:	2224      	movs	r2, #36	; 0x24
   27c30:	5c9a      	ldrb	r2, [r3, r2]
   27c32:	68fb      	ldr	r3, [r7, #12]
   27c34:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   27c36:	687b      	ldr	r3, [r7, #4]
   27c38:	2225      	movs	r2, #37	; 0x25
   27c3a:	5c9a      	ldrb	r2, [r3, r2]
   27c3c:	68fb      	ldr	r3, [r7, #12]
   27c3e:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   27c40:	687b      	ldr	r3, [r7, #4]
   27c42:	7eda      	ldrb	r2, [r3, #27]
   27c44:	68fb      	ldr	r3, [r7, #12]
   27c46:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   27c48:	687b      	ldr	r3, [r7, #4]
   27c4a:	7f1a      	ldrb	r2, [r3, #28]
   27c4c:	68fb      	ldr	r3, [r7, #12]
   27c4e:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   27c50:	233b      	movs	r3, #59	; 0x3b
   27c52:	18fc      	adds	r4, r7, r3
   27c54:	687a      	ldr	r2, [r7, #4]
   27c56:	68fb      	ldr	r3, [r7, #12]
   27c58:	0011      	movs	r1, r2
   27c5a:	0018      	movs	r0, r3
   27c5c:	4b5e      	ldr	r3, [pc, #376]	; (27dd8 <usart_init+0x258>)
   27c5e:	4798      	blx	r3
   27c60:	0003      	movs	r3, r0
   27c62:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   27c64:	233b      	movs	r3, #59	; 0x3b
   27c66:	18fb      	adds	r3, r7, r3
   27c68:	781b      	ldrb	r3, [r3, #0]
   27c6a:	2b00      	cmp	r3, #0
   27c6c:	d003      	beq.n	27c76 <usart_init+0xf6>
		return status_code;
   27c6e:	233b      	movs	r3, #59	; 0x3b
   27c70:	18fb      	adds	r3, r7, r3
   27c72:	781b      	ldrb	r3, [r3, #0]
   27c74:	e09f      	b.n	27db6 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   27c76:	2320      	movs	r3, #32
   27c78:	18fb      	adds	r3, r7, r3
   27c7a:	0018      	movs	r0, r3
   27c7c:	4b57      	ldr	r3, [pc, #348]	; (27ddc <usart_init+0x25c>)
   27c7e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27c80:	2320      	movs	r3, #32
   27c82:	18fb      	adds	r3, r7, r3
   27c84:	2200      	movs	r2, #0
   27c86:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   27c88:	2320      	movs	r3, #32
   27c8a:	18fb      	adds	r3, r7, r3
   27c8c:	2200      	movs	r2, #0
   27c8e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   27c90:	687b      	ldr	r3, [r7, #4]
   27c92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   27c94:	2310      	movs	r3, #16
   27c96:	18fb      	adds	r3, r7, r3
   27c98:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   27c9a:	687b      	ldr	r3, [r7, #4]
   27c9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   27c9e:	2310      	movs	r3, #16
   27ca0:	18fb      	adds	r3, r7, r3
   27ca2:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   27ca4:	687b      	ldr	r3, [r7, #4]
   27ca6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   27ca8:	2310      	movs	r3, #16
   27caa:	18fb      	adds	r3, r7, r3
   27cac:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   27cae:	687b      	ldr	r3, [r7, #4]
   27cb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   27cb2:	2310      	movs	r3, #16
   27cb4:	18fb      	adds	r3, r7, r3
   27cb6:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   27cb8:	2347      	movs	r3, #71	; 0x47
   27cba:	18fb      	adds	r3, r7, r3
   27cbc:	2200      	movs	r2, #0
   27cbe:	701a      	strb	r2, [r3, #0]
   27cc0:	e02c      	b.n	27d1c <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   27cc2:	2347      	movs	r3, #71	; 0x47
   27cc4:	18fb      	adds	r3, r7, r3
   27cc6:	781a      	ldrb	r2, [r3, #0]
   27cc8:	2310      	movs	r3, #16
   27cca:	18fb      	adds	r3, r7, r3
   27ccc:	0092      	lsls	r2, r2, #2
   27cce:	58d3      	ldr	r3, [r2, r3]
   27cd0:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   27cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27cd4:	2b00      	cmp	r3, #0
   27cd6:	d109      	bne.n	27cec <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   27cd8:	2347      	movs	r3, #71	; 0x47
   27cda:	18fb      	adds	r3, r7, r3
   27cdc:	781a      	ldrb	r2, [r3, #0]
   27cde:	68bb      	ldr	r3, [r7, #8]
   27ce0:	0011      	movs	r1, r2
   27ce2:	0018      	movs	r0, r3
   27ce4:	4b3e      	ldr	r3, [pc, #248]	; (27de0 <usart_init+0x260>)
   27ce6:	4798      	blx	r3
   27ce8:	0003      	movs	r3, r0
   27cea:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   27cec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27cee:	3301      	adds	r3, #1
   27cf0:	d00d      	beq.n	27d0e <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   27cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27cf4:	b2da      	uxtb	r2, r3
   27cf6:	2320      	movs	r3, #32
   27cf8:	18fb      	adds	r3, r7, r3
   27cfa:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   27cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27cfe:	0c1b      	lsrs	r3, r3, #16
   27d00:	b2db      	uxtb	r3, r3
   27d02:	2220      	movs	r2, #32
   27d04:	18ba      	adds	r2, r7, r2
   27d06:	0011      	movs	r1, r2
   27d08:	0018      	movs	r0, r3
   27d0a:	4b36      	ldr	r3, [pc, #216]	; (27de4 <usart_init+0x264>)
   27d0c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   27d0e:	2347      	movs	r3, #71	; 0x47
   27d10:	18fb      	adds	r3, r7, r3
   27d12:	781a      	ldrb	r2, [r3, #0]
   27d14:	2347      	movs	r3, #71	; 0x47
   27d16:	18fb      	adds	r3, r7, r3
   27d18:	3201      	adds	r2, #1
   27d1a:	701a      	strb	r2, [r3, #0]
   27d1c:	2347      	movs	r3, #71	; 0x47
   27d1e:	18fb      	adds	r3, r7, r3
   27d20:	781b      	ldrb	r3, [r3, #0]
   27d22:	2b03      	cmp	r3, #3
   27d24:	d9cd      	bls.n	27cc2 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   27d26:	2300      	movs	r3, #0
   27d28:	63fb      	str	r3, [r7, #60]	; 0x3c
   27d2a:	e00a      	b.n	27d42 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   27d2c:	68fa      	ldr	r2, [r7, #12]
   27d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27d30:	3302      	adds	r3, #2
   27d32:	009b      	lsls	r3, r3, #2
   27d34:	18d3      	adds	r3, r2, r3
   27d36:	3304      	adds	r3, #4
   27d38:	2200      	movs	r2, #0
   27d3a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   27d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27d3e:	3301      	adds	r3, #1
   27d40:	63fb      	str	r3, [r7, #60]	; 0x3c
   27d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27d44:	2b05      	cmp	r3, #5
   27d46:	d9f1      	bls.n	27d2c <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   27d48:	68fb      	ldr	r3, [r7, #12]
   27d4a:	2200      	movs	r2, #0
   27d4c:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   27d4e:	68fb      	ldr	r3, [r7, #12]
   27d50:	2200      	movs	r2, #0
   27d52:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   27d54:	68fb      	ldr	r3, [r7, #12]
   27d56:	2200      	movs	r2, #0
   27d58:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   27d5a:	68fb      	ldr	r3, [r7, #12]
   27d5c:	2200      	movs	r2, #0
   27d5e:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   27d60:	68fb      	ldr	r3, [r7, #12]
   27d62:	2230      	movs	r2, #48	; 0x30
   27d64:	2100      	movs	r1, #0
   27d66:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   27d68:	68fb      	ldr	r3, [r7, #12]
   27d6a:	2231      	movs	r2, #49	; 0x31
   27d6c:	2100      	movs	r1, #0
   27d6e:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   27d70:	68fb      	ldr	r3, [r7, #12]
   27d72:	2232      	movs	r2, #50	; 0x32
   27d74:	2100      	movs	r1, #0
   27d76:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   27d78:	68fb      	ldr	r3, [r7, #12]
   27d7a:	2233      	movs	r2, #51	; 0x33
   27d7c:	2100      	movs	r1, #0
   27d7e:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   27d80:	68fb      	ldr	r3, [r7, #12]
   27d82:	681b      	ldr	r3, [r3, #0]
   27d84:	2227      	movs	r2, #39	; 0x27
   27d86:	18bc      	adds	r4, r7, r2
   27d88:	0018      	movs	r0, r3
   27d8a:	4b0d      	ldr	r3, [pc, #52]	; (27dc0 <usart_init+0x240>)
   27d8c:	4798      	blx	r3
   27d8e:	0003      	movs	r3, r0
   27d90:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   27d92:	4a15      	ldr	r2, [pc, #84]	; (27de8 <usart_init+0x268>)
   27d94:	2327      	movs	r3, #39	; 0x27
   27d96:	18fb      	adds	r3, r7, r3
   27d98:	781b      	ldrb	r3, [r3, #0]
   27d9a:	0011      	movs	r1, r2
   27d9c:	0018      	movs	r0, r3
   27d9e:	4b13      	ldr	r3, [pc, #76]	; (27dec <usart_init+0x26c>)
   27da0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   27da2:	2327      	movs	r3, #39	; 0x27
   27da4:	18fb      	adds	r3, r7, r3
   27da6:	781a      	ldrb	r2, [r3, #0]
   27da8:	4b11      	ldr	r3, [pc, #68]	; (27df0 <usart_init+0x270>)
   27daa:	0092      	lsls	r2, r2, #2
   27dac:	68f9      	ldr	r1, [r7, #12]
   27dae:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   27db0:	233b      	movs	r3, #59	; 0x3b
   27db2:	18fb      	adds	r3, r7, r3
   27db4:	781b      	ldrb	r3, [r3, #0]
}
   27db6:	0018      	movs	r0, r3
   27db8:	46bd      	mov	sp, r7
   27dba:	b013      	add	sp, #76	; 0x4c
   27dbc:	bd90      	pop	{r4, r7, pc}
   27dbe:	46c0      	nop			; (mov r8, r8)
   27dc0:	0002664d 	.word	0x0002664d
   27dc4:	000277bd 	.word	0x000277bd
   27dc8:	000277a5 	.word	0x000277a5
   27dcc:	00028edd 	.word	0x00028edd
   27dd0:	00028f21 	.word	0x00028f21
   27dd4:	00026405 	.word	0x00026405
   27dd8:	000278a5 	.word	0x000278a5
   27ddc:	00027819 	.word	0x00027819
   27de0:	00026491 	.word	0x00026491
   27de4:	0002923d 	.word	0x0002923d
   27de8:	0002805d 	.word	0x0002805d
   27dec:	000266b1 	.word	0x000266b1
   27df0:	20005bcc 	.word	0x20005bcc

00027df4 <system_interrupt_enter_critical_section>:
{
   27df4:	b580      	push	{r7, lr}
   27df6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   27df8:	4b02      	ldr	r3, [pc, #8]	; (27e04 <system_interrupt_enter_critical_section+0x10>)
   27dfa:	4798      	blx	r3
}
   27dfc:	46c0      	nop			; (mov r8, r8)
   27dfe:	46bd      	mov	sp, r7
   27e00:	bd80      	pop	{r7, pc}
   27e02:	46c0      	nop			; (mov r8, r8)
   27e04:	00025249 	.word	0x00025249

00027e08 <system_interrupt_leave_critical_section>:
{
   27e08:	b580      	push	{r7, lr}
   27e0a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   27e0c:	4b02      	ldr	r3, [pc, #8]	; (27e18 <system_interrupt_leave_critical_section+0x10>)
   27e0e:	4798      	blx	r3
}
   27e10:	46c0      	nop			; (mov r8, r8)
   27e12:	46bd      	mov	sp, r7
   27e14:	bd80      	pop	{r7, pc}
   27e16:	46c0      	nop			; (mov r8, r8)
   27e18:	0002529d 	.word	0x0002529d

00027e1c <usart_is_syncing>:
{
   27e1c:	b580      	push	{r7, lr}
   27e1e:	b084      	sub	sp, #16
   27e20:	af00      	add	r7, sp, #0
   27e22:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   27e24:	687b      	ldr	r3, [r7, #4]
   27e26:	681b      	ldr	r3, [r3, #0]
   27e28:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   27e2a:	68fb      	ldr	r3, [r7, #12]
   27e2c:	69db      	ldr	r3, [r3, #28]
   27e2e:	1e5a      	subs	r2, r3, #1
   27e30:	4193      	sbcs	r3, r2
   27e32:	b2db      	uxtb	r3, r3
}
   27e34:	0018      	movs	r0, r3
   27e36:	46bd      	mov	sp, r7
   27e38:	b004      	add	sp, #16
   27e3a:	bd80      	pop	{r7, pc}

00027e3c <_usart_wait_for_sync>:
{
   27e3c:	b580      	push	{r7, lr}
   27e3e:	b082      	sub	sp, #8
   27e40:	af00      	add	r7, sp, #0
   27e42:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   27e44:	46c0      	nop			; (mov r8, r8)
   27e46:	687b      	ldr	r3, [r7, #4]
   27e48:	0018      	movs	r0, r3
   27e4a:	4b04      	ldr	r3, [pc, #16]	; (27e5c <_usart_wait_for_sync+0x20>)
   27e4c:	4798      	blx	r3
   27e4e:	1e03      	subs	r3, r0, #0
   27e50:	d1f9      	bne.n	27e46 <_usart_wait_for_sync+0xa>
}
   27e52:	46c0      	nop			; (mov r8, r8)
   27e54:	46bd      	mov	sp, r7
   27e56:	b002      	add	sp, #8
   27e58:	bd80      	pop	{r7, pc}
   27e5a:	46c0      	nop			; (mov r8, r8)
   27e5c:	00027e1d 	.word	0x00027e1d

00027e60 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   27e60:	b580      	push	{r7, lr}
   27e62:	b086      	sub	sp, #24
   27e64:	af00      	add	r7, sp, #0
   27e66:	60f8      	str	r0, [r7, #12]
   27e68:	60b9      	str	r1, [r7, #8]
   27e6a:	1dbb      	adds	r3, r7, #6
   27e6c:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   27e6e:	68fb      	ldr	r3, [r7, #12]
   27e70:	681b      	ldr	r3, [r3, #0]
   27e72:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   27e74:	4b0f      	ldr	r3, [pc, #60]	; (27eb4 <_usart_write_buffer+0x54>)
   27e76:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   27e78:	68fb      	ldr	r3, [r7, #12]
   27e7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   27e7c:	b29b      	uxth	r3, r3
   27e7e:	2b00      	cmp	r3, #0
   27e80:	d003      	beq.n	27e8a <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   27e82:	4b0d      	ldr	r3, [pc, #52]	; (27eb8 <_usart_write_buffer+0x58>)
   27e84:	4798      	blx	r3
		return STATUS_BUSY;
   27e86:	2305      	movs	r3, #5
   27e88:	e010      	b.n	27eac <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   27e8a:	68fb      	ldr	r3, [r7, #12]
   27e8c:	1dba      	adds	r2, r7, #6
   27e8e:	8812      	ldrh	r2, [r2, #0]
   27e90:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   27e92:	4b09      	ldr	r3, [pc, #36]	; (27eb8 <_usart_write_buffer+0x58>)
   27e94:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   27e96:	68fb      	ldr	r3, [r7, #12]
   27e98:	68ba      	ldr	r2, [r7, #8]
   27e9a:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   27e9c:	68fb      	ldr	r3, [r7, #12]
   27e9e:	2233      	movs	r2, #51	; 0x33
   27ea0:	2105      	movs	r1, #5
   27ea2:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   27ea4:	697b      	ldr	r3, [r7, #20]
   27ea6:	2201      	movs	r2, #1
   27ea8:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   27eaa:	2300      	movs	r3, #0
}
   27eac:	0018      	movs	r0, r3
   27eae:	46bd      	mov	sp, r7
   27eb0:	b006      	add	sp, #24
   27eb2:	bd80      	pop	{r7, pc}
   27eb4:	00027df5 	.word	0x00027df5
   27eb8:	00027e09 	.word	0x00027e09

00027ebc <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   27ebc:	b580      	push	{r7, lr}
   27ebe:	b086      	sub	sp, #24
   27ec0:	af00      	add	r7, sp, #0
   27ec2:	60f8      	str	r0, [r7, #12]
   27ec4:	60b9      	str	r1, [r7, #8]
   27ec6:	1dbb      	adds	r3, r7, #6
   27ec8:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   27eca:	68fb      	ldr	r3, [r7, #12]
   27ecc:	681b      	ldr	r3, [r3, #0]
   27ece:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   27ed0:	4b16      	ldr	r3, [pc, #88]	; (27f2c <_usart_read_buffer+0x70>)
   27ed2:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   27ed4:	68fb      	ldr	r3, [r7, #12]
   27ed6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   27ed8:	b29b      	uxth	r3, r3
   27eda:	2b00      	cmp	r3, #0
   27edc:	d003      	beq.n	27ee6 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   27ede:	4b14      	ldr	r3, [pc, #80]	; (27f30 <_usart_read_buffer+0x74>)
   27ee0:	4798      	blx	r3
		return STATUS_BUSY;
   27ee2:	2305      	movs	r3, #5
   27ee4:	e01e      	b.n	27f24 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   27ee6:	68fb      	ldr	r3, [r7, #12]
   27ee8:	1dba      	adds	r2, r7, #6
   27eea:	8812      	ldrh	r2, [r2, #0]
   27eec:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   27eee:	4b10      	ldr	r3, [pc, #64]	; (27f30 <_usart_read_buffer+0x74>)
   27ef0:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   27ef2:	68fb      	ldr	r3, [r7, #12]
   27ef4:	68ba      	ldr	r2, [r7, #8]
   27ef6:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   27ef8:	68fb      	ldr	r3, [r7, #12]
   27efa:	2232      	movs	r2, #50	; 0x32
   27efc:	2105      	movs	r1, #5
   27efe:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   27f00:	697b      	ldr	r3, [r7, #20]
   27f02:	2204      	movs	r2, #4
   27f04:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   27f06:	68fb      	ldr	r3, [r7, #12]
   27f08:	7a1b      	ldrb	r3, [r3, #8]
   27f0a:	2b00      	cmp	r3, #0
   27f0c:	d002      	beq.n	27f14 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   27f0e:	697b      	ldr	r3, [r7, #20]
   27f10:	2220      	movs	r2, #32
   27f12:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   27f14:	68fb      	ldr	r3, [r7, #12]
   27f16:	7a5b      	ldrb	r3, [r3, #9]
   27f18:	2b00      	cmp	r3, #0
   27f1a:	d002      	beq.n	27f22 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   27f1c:	697b      	ldr	r3, [r7, #20]
   27f1e:	2208      	movs	r2, #8
   27f20:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   27f22:	2300      	movs	r3, #0
}
   27f24:	0018      	movs	r0, r3
   27f26:	46bd      	mov	sp, r7
   27f28:	b006      	add	sp, #24
   27f2a:	bd80      	pop	{r7, pc}
   27f2c:	00027df5 	.word	0x00027df5
   27f30:	00027e09 	.word	0x00027e09

00027f34 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   27f34:	b580      	push	{r7, lr}
   27f36:	b084      	sub	sp, #16
   27f38:	af00      	add	r7, sp, #0
   27f3a:	60f8      	str	r0, [r7, #12]
   27f3c:	60b9      	str	r1, [r7, #8]
   27f3e:	1dfb      	adds	r3, r7, #7
   27f40:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   27f42:	1dfb      	adds	r3, r7, #7
   27f44:	781b      	ldrb	r3, [r3, #0]
   27f46:	68fa      	ldr	r2, [r7, #12]
   27f48:	3302      	adds	r3, #2
   27f4a:	009b      	lsls	r3, r3, #2
   27f4c:	18d3      	adds	r3, r2, r3
   27f4e:	3304      	adds	r3, #4
   27f50:	68ba      	ldr	r2, [r7, #8]
   27f52:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   27f54:	68fb      	ldr	r3, [r7, #12]
   27f56:	2230      	movs	r2, #48	; 0x30
   27f58:	5c9b      	ldrb	r3, [r3, r2]
   27f5a:	b25a      	sxtb	r2, r3
   27f5c:	1dfb      	adds	r3, r7, #7
   27f5e:	781b      	ldrb	r3, [r3, #0]
   27f60:	2101      	movs	r1, #1
   27f62:	4099      	lsls	r1, r3
   27f64:	000b      	movs	r3, r1
   27f66:	b25b      	sxtb	r3, r3
   27f68:	4313      	orrs	r3, r2
   27f6a:	b25b      	sxtb	r3, r3
   27f6c:	b2d9      	uxtb	r1, r3
   27f6e:	68fb      	ldr	r3, [r7, #12]
   27f70:	2230      	movs	r2, #48	; 0x30
   27f72:	5499      	strb	r1, [r3, r2]
}
   27f74:	46c0      	nop			; (mov r8, r8)
   27f76:	46bd      	mov	sp, r7
   27f78:	b004      	add	sp, #16
   27f7a:	bd80      	pop	{r7, pc}

00027f7c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   27f7c:	b580      	push	{r7, lr}
   27f7e:	b084      	sub	sp, #16
   27f80:	af00      	add	r7, sp, #0
   27f82:	60f8      	str	r0, [r7, #12]
   27f84:	60b9      	str	r1, [r7, #8]
   27f86:	1dbb      	adds	r3, r7, #6
   27f88:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   27f8a:	1dbb      	adds	r3, r7, #6
   27f8c:	881b      	ldrh	r3, [r3, #0]
   27f8e:	2b00      	cmp	r3, #0
   27f90:	d101      	bne.n	27f96 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   27f92:	2317      	movs	r3, #23
   27f94:	e010      	b.n	27fb8 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   27f96:	68fb      	ldr	r3, [r7, #12]
   27f98:	79db      	ldrb	r3, [r3, #7]
   27f9a:	2201      	movs	r2, #1
   27f9c:	4053      	eors	r3, r2
   27f9e:	b2db      	uxtb	r3, r3
   27fa0:	2b00      	cmp	r3, #0
   27fa2:	d001      	beq.n	27fa8 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   27fa4:	231c      	movs	r3, #28
   27fa6:	e007      	b.n	27fb8 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   27fa8:	1dbb      	adds	r3, r7, #6
   27faa:	881a      	ldrh	r2, [r3, #0]
   27fac:	68b9      	ldr	r1, [r7, #8]
   27fae:	68fb      	ldr	r3, [r7, #12]
   27fb0:	0018      	movs	r0, r3
   27fb2:	4b03      	ldr	r3, [pc, #12]	; (27fc0 <usart_write_buffer_job+0x44>)
   27fb4:	4798      	blx	r3
   27fb6:	0003      	movs	r3, r0
}
   27fb8:	0018      	movs	r0, r3
   27fba:	46bd      	mov	sp, r7
   27fbc:	b004      	add	sp, #16
   27fbe:	bd80      	pop	{r7, pc}
   27fc0:	00027e61 	.word	0x00027e61

00027fc4 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   27fc4:	b580      	push	{r7, lr}
   27fc6:	b084      	sub	sp, #16
   27fc8:	af00      	add	r7, sp, #0
   27fca:	60f8      	str	r0, [r7, #12]
   27fcc:	60b9      	str	r1, [r7, #8]
   27fce:	1dbb      	adds	r3, r7, #6
   27fd0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   27fd2:	1dbb      	adds	r3, r7, #6
   27fd4:	881b      	ldrh	r3, [r3, #0]
   27fd6:	2b00      	cmp	r3, #0
   27fd8:	d101      	bne.n	27fde <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   27fda:	2317      	movs	r3, #23
   27fdc:	e010      	b.n	28000 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   27fde:	68fb      	ldr	r3, [r7, #12]
   27fe0:	799b      	ldrb	r3, [r3, #6]
   27fe2:	2201      	movs	r2, #1
   27fe4:	4053      	eors	r3, r2
   27fe6:	b2db      	uxtb	r3, r3
   27fe8:	2b00      	cmp	r3, #0
   27fea:	d001      	beq.n	27ff0 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   27fec:	231c      	movs	r3, #28
   27fee:	e007      	b.n	28000 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   27ff0:	1dbb      	adds	r3, r7, #6
   27ff2:	881a      	ldrh	r2, [r3, #0]
   27ff4:	68b9      	ldr	r1, [r7, #8]
   27ff6:	68fb      	ldr	r3, [r7, #12]
   27ff8:	0018      	movs	r0, r3
   27ffa:	4b03      	ldr	r3, [pc, #12]	; (28008 <usart_read_buffer_job+0x44>)
   27ffc:	4798      	blx	r3
   27ffe:	0003      	movs	r3, r0
}
   28000:	0018      	movs	r0, r3
   28002:	46bd      	mov	sp, r7
   28004:	b004      	add	sp, #16
   28006:	bd80      	pop	{r7, pc}
   28008:	00027ebd 	.word	0x00027ebd

0002800c <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   2800c:	b580      	push	{r7, lr}
   2800e:	b084      	sub	sp, #16
   28010:	af00      	add	r7, sp, #0
   28012:	6078      	str	r0, [r7, #4]
   28014:	000a      	movs	r2, r1
   28016:	1cfb      	adds	r3, r7, #3
   28018:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   2801a:	1cfb      	adds	r3, r7, #3
   2801c:	781b      	ldrb	r3, [r3, #0]
   2801e:	2b00      	cmp	r3, #0
   28020:	d002      	beq.n	28028 <usart_get_job_status+0x1c>
   28022:	2b01      	cmp	r3, #1
   28024:	d007      	beq.n	28036 <usart_get_job_status+0x2a>
   28026:	e00d      	b.n	28044 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   28028:	230f      	movs	r3, #15
   2802a:	18fb      	adds	r3, r7, r3
   2802c:	687a      	ldr	r2, [r7, #4]
   2802e:	2132      	movs	r1, #50	; 0x32
   28030:	5c52      	ldrb	r2, [r2, r1]
   28032:	701a      	strb	r2, [r3, #0]
			break;
   28034:	e00b      	b.n	2804e <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   28036:	230f      	movs	r3, #15
   28038:	18fb      	adds	r3, r7, r3
   2803a:	687a      	ldr	r2, [r7, #4]
   2803c:	2133      	movs	r1, #51	; 0x33
   2803e:	5c52      	ldrb	r2, [r2, r1]
   28040:	701a      	strb	r2, [r3, #0]
			break;
   28042:	e004      	b.n	2804e <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   28044:	230f      	movs	r3, #15
   28046:	18fb      	adds	r3, r7, r3
   28048:	2217      	movs	r2, #23
   2804a:	701a      	strb	r2, [r3, #0]
			break;
   2804c:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   2804e:	230f      	movs	r3, #15
   28050:	18fb      	adds	r3, r7, r3
   28052:	781b      	ldrb	r3, [r3, #0]
}
   28054:	0018      	movs	r0, r3
   28056:	46bd      	mov	sp, r7
   28058:	b004      	add	sp, #16
   2805a:	bd80      	pop	{r7, pc}

0002805c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   2805c:	b580      	push	{r7, lr}
   2805e:	b088      	sub	sp, #32
   28060:	af00      	add	r7, sp, #0
   28062:	0002      	movs	r2, r0
   28064:	1dfb      	adds	r3, r7, #7
   28066:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   28068:	1dfb      	adds	r3, r7, #7
   2806a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   2806c:	4ba3      	ldr	r3, [pc, #652]	; (282fc <_usart_interrupt_handler+0x2a0>)
   2806e:	0092      	lsls	r2, r2, #2
   28070:	58d3      	ldr	r3, [r2, r3]
   28072:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   28074:	69bb      	ldr	r3, [r7, #24]
   28076:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   28078:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   2807a:	69bb      	ldr	r3, [r7, #24]
   2807c:	0018      	movs	r0, r3
   2807e:	4ba0      	ldr	r3, [pc, #640]	; (28300 <_usart_interrupt_handler+0x2a4>)
   28080:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   28082:	697b      	ldr	r3, [r7, #20]
   28084:	7e1b      	ldrb	r3, [r3, #24]
   28086:	b2da      	uxtb	r2, r3
   28088:	2312      	movs	r3, #18
   2808a:	18fb      	adds	r3, r7, r3
   2808c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   2808e:	697b      	ldr	r3, [r7, #20]
   28090:	7d9b      	ldrb	r3, [r3, #22]
   28092:	b2db      	uxtb	r3, r3
   28094:	b29a      	uxth	r2, r3
   28096:	2312      	movs	r3, #18
   28098:	18fb      	adds	r3, r7, r3
   2809a:	2112      	movs	r1, #18
   2809c:	1879      	adds	r1, r7, r1
   2809e:	8809      	ldrh	r1, [r1, #0]
   280a0:	400a      	ands	r2, r1
   280a2:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   280a4:	69bb      	ldr	r3, [r7, #24]
   280a6:	2230      	movs	r2, #48	; 0x30
   280a8:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   280aa:	69ba      	ldr	r2, [r7, #24]
   280ac:	2131      	movs	r1, #49	; 0x31
   280ae:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   280b0:	4013      	ands	r3, r2
   280b2:	b2da      	uxtb	r2, r3
   280b4:	2310      	movs	r3, #16
   280b6:	18fb      	adds	r3, r7, r3
   280b8:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   280ba:	2312      	movs	r3, #18
   280bc:	18fb      	adds	r3, r7, r3
   280be:	881b      	ldrh	r3, [r3, #0]
   280c0:	2201      	movs	r2, #1
   280c2:	4013      	ands	r3, r2
   280c4:	d044      	beq.n	28150 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   280c6:	69bb      	ldr	r3, [r7, #24]
   280c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   280ca:	b29b      	uxth	r3, r3
   280cc:	2b00      	cmp	r3, #0
   280ce:	d03c      	beq.n	2814a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   280d0:	69bb      	ldr	r3, [r7, #24]
   280d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   280d4:	781b      	ldrb	r3, [r3, #0]
   280d6:	b2da      	uxtb	r2, r3
   280d8:	231c      	movs	r3, #28
   280da:	18fb      	adds	r3, r7, r3
   280dc:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   280de:	69bb      	ldr	r3, [r7, #24]
   280e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   280e2:	1c5a      	adds	r2, r3, #1
   280e4:	69bb      	ldr	r3, [r7, #24]
   280e6:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   280e8:	69bb      	ldr	r3, [r7, #24]
   280ea:	795b      	ldrb	r3, [r3, #5]
   280ec:	2b01      	cmp	r3, #1
   280ee:	d113      	bne.n	28118 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   280f0:	69bb      	ldr	r3, [r7, #24]
   280f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   280f4:	781b      	ldrb	r3, [r3, #0]
   280f6:	b2db      	uxtb	r3, r3
   280f8:	021b      	lsls	r3, r3, #8
   280fa:	b21a      	sxth	r2, r3
   280fc:	231c      	movs	r3, #28
   280fe:	18fb      	adds	r3, r7, r3
   28100:	2100      	movs	r1, #0
   28102:	5e5b      	ldrsh	r3, [r3, r1]
   28104:	4313      	orrs	r3, r2
   28106:	b21a      	sxth	r2, r3
   28108:	231c      	movs	r3, #28
   2810a:	18fb      	adds	r3, r7, r3
   2810c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   2810e:	69bb      	ldr	r3, [r7, #24]
   28110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28112:	1c5a      	adds	r2, r3, #1
   28114:	69bb      	ldr	r3, [r7, #24]
   28116:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   28118:	231c      	movs	r3, #28
   2811a:	18fb      	adds	r3, r7, r3
   2811c:	881b      	ldrh	r3, [r3, #0]
   2811e:	05db      	lsls	r3, r3, #23
   28120:	0ddb      	lsrs	r3, r3, #23
   28122:	b29a      	uxth	r2, r3
   28124:	697b      	ldr	r3, [r7, #20]
   28126:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   28128:	69bb      	ldr	r3, [r7, #24]
   2812a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2812c:	b29b      	uxth	r3, r3
   2812e:	3b01      	subs	r3, #1
   28130:	b29b      	uxth	r3, r3
   28132:	69ba      	ldr	r2, [r7, #24]
   28134:	1c19      	adds	r1, r3, #0
   28136:	85d1      	strh	r1, [r2, #46]	; 0x2e
   28138:	2b00      	cmp	r3, #0
   2813a:	d109      	bne.n	28150 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   2813c:	697b      	ldr	r3, [r7, #20]
   2813e:	2201      	movs	r2, #1
   28140:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   28142:	697b      	ldr	r3, [r7, #20]
   28144:	2202      	movs	r2, #2
   28146:	759a      	strb	r2, [r3, #22]
   28148:	e002      	b.n	28150 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   2814a:	697b      	ldr	r3, [r7, #20]
   2814c:	2201      	movs	r2, #1
   2814e:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   28150:	2312      	movs	r3, #18
   28152:	18fb      	adds	r3, r7, r3
   28154:	881b      	ldrh	r3, [r3, #0]
   28156:	2202      	movs	r2, #2
   28158:	4013      	ands	r3, r2
   2815a:	d011      	beq.n	28180 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   2815c:	697b      	ldr	r3, [r7, #20]
   2815e:	2202      	movs	r2, #2
   28160:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   28162:	69bb      	ldr	r3, [r7, #24]
   28164:	2233      	movs	r2, #51	; 0x33
   28166:	2100      	movs	r1, #0
   28168:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   2816a:	2310      	movs	r3, #16
   2816c:	18fb      	adds	r3, r7, r3
   2816e:	881b      	ldrh	r3, [r3, #0]
   28170:	2201      	movs	r2, #1
   28172:	4013      	ands	r3, r2
   28174:	d004      	beq.n	28180 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   28176:	69bb      	ldr	r3, [r7, #24]
   28178:	68db      	ldr	r3, [r3, #12]
   2817a:	69ba      	ldr	r2, [r7, #24]
   2817c:	0010      	movs	r0, r2
   2817e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   28180:	2312      	movs	r3, #18
   28182:	18fb      	adds	r3, r7, r3
   28184:	881b      	ldrh	r3, [r3, #0]
   28186:	2204      	movs	r2, #4
   28188:	4013      	ands	r3, r2
   2818a:	d100      	bne.n	2818e <_usart_interrupt_handler+0x132>
   2818c:	e0bd      	b.n	2830a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   2818e:	69bb      	ldr	r3, [r7, #24]
   28190:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   28192:	b29b      	uxth	r3, r3
   28194:	2b00      	cmp	r3, #0
   28196:	d100      	bne.n	2819a <_usart_interrupt_handler+0x13e>
   28198:	e0b4      	b.n	28304 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   2819a:	697b      	ldr	r3, [r7, #20]
   2819c:	8b5b      	ldrh	r3, [r3, #26]
   2819e:	b29b      	uxth	r3, r3
   281a0:	b2da      	uxtb	r2, r3
   281a2:	231f      	movs	r3, #31
   281a4:	18fb      	adds	r3, r7, r3
   281a6:	213f      	movs	r1, #63	; 0x3f
   281a8:	400a      	ands	r2, r1
   281aa:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   281ac:	231f      	movs	r3, #31
   281ae:	18fb      	adds	r3, r7, r3
   281b0:	781b      	ldrb	r3, [r3, #0]
   281b2:	2208      	movs	r2, #8
   281b4:	4013      	ands	r3, r2
   281b6:	d007      	beq.n	281c8 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   281b8:	231f      	movs	r3, #31
   281ba:	18fb      	adds	r3, r7, r3
   281bc:	221f      	movs	r2, #31
   281be:	18ba      	adds	r2, r7, r2
   281c0:	7812      	ldrb	r2, [r2, #0]
   281c2:	2108      	movs	r1, #8
   281c4:	438a      	bics	r2, r1
   281c6:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   281c8:	231f      	movs	r3, #31
   281ca:	18fb      	adds	r3, r7, r3
   281cc:	781b      	ldrb	r3, [r3, #0]
   281ce:	2b00      	cmp	r3, #0
   281d0:	d050      	beq.n	28274 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   281d2:	231f      	movs	r3, #31
   281d4:	18fb      	adds	r3, r7, r3
   281d6:	781b      	ldrb	r3, [r3, #0]
   281d8:	2202      	movs	r2, #2
   281da:	4013      	ands	r3, r2
   281dc:	d007      	beq.n	281ee <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   281de:	69bb      	ldr	r3, [r7, #24]
   281e0:	2232      	movs	r2, #50	; 0x32
   281e2:	211a      	movs	r1, #26
   281e4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   281e6:	697b      	ldr	r3, [r7, #20]
   281e8:	2202      	movs	r2, #2
   281ea:	835a      	strh	r2, [r3, #26]
   281ec:	e036      	b.n	2825c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   281ee:	231f      	movs	r3, #31
   281f0:	18fb      	adds	r3, r7, r3
   281f2:	781b      	ldrb	r3, [r3, #0]
   281f4:	2204      	movs	r2, #4
   281f6:	4013      	ands	r3, r2
   281f8:	d007      	beq.n	2820a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   281fa:	69bb      	ldr	r3, [r7, #24]
   281fc:	2232      	movs	r2, #50	; 0x32
   281fe:	211e      	movs	r1, #30
   28200:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   28202:	697b      	ldr	r3, [r7, #20]
   28204:	2204      	movs	r2, #4
   28206:	835a      	strh	r2, [r3, #26]
   28208:	e028      	b.n	2825c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   2820a:	231f      	movs	r3, #31
   2820c:	18fb      	adds	r3, r7, r3
   2820e:	781b      	ldrb	r3, [r3, #0]
   28210:	2201      	movs	r2, #1
   28212:	4013      	ands	r3, r2
   28214:	d007      	beq.n	28226 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   28216:	69bb      	ldr	r3, [r7, #24]
   28218:	2232      	movs	r2, #50	; 0x32
   2821a:	2113      	movs	r1, #19
   2821c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   2821e:	697b      	ldr	r3, [r7, #20]
   28220:	2201      	movs	r2, #1
   28222:	835a      	strh	r2, [r3, #26]
   28224:	e01a      	b.n	2825c <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   28226:	231f      	movs	r3, #31
   28228:	18fb      	adds	r3, r7, r3
   2822a:	781b      	ldrb	r3, [r3, #0]
   2822c:	2210      	movs	r2, #16
   2822e:	4013      	ands	r3, r2
   28230:	d007      	beq.n	28242 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   28232:	69bb      	ldr	r3, [r7, #24]
   28234:	2232      	movs	r2, #50	; 0x32
   28236:	2142      	movs	r1, #66	; 0x42
   28238:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   2823a:	697b      	ldr	r3, [r7, #20]
   2823c:	2210      	movs	r2, #16
   2823e:	835a      	strh	r2, [r3, #26]
   28240:	e00c      	b.n	2825c <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   28242:	231f      	movs	r3, #31
   28244:	18fb      	adds	r3, r7, r3
   28246:	781b      	ldrb	r3, [r3, #0]
   28248:	2220      	movs	r2, #32
   2824a:	4013      	ands	r3, r2
   2824c:	d006      	beq.n	2825c <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   2824e:	69bb      	ldr	r3, [r7, #24]
   28250:	2232      	movs	r2, #50	; 0x32
   28252:	2141      	movs	r1, #65	; 0x41
   28254:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   28256:	697b      	ldr	r3, [r7, #20]
   28258:	2220      	movs	r2, #32
   2825a:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   2825c:	2310      	movs	r3, #16
   2825e:	18fb      	adds	r3, r7, r3
   28260:	881b      	ldrh	r3, [r3, #0]
   28262:	2204      	movs	r2, #4
   28264:	4013      	ands	r3, r2
				if (callback_status
   28266:	d050      	beq.n	2830a <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   28268:	69bb      	ldr	r3, [r7, #24]
   2826a:	695b      	ldr	r3, [r3, #20]
   2826c:	69ba      	ldr	r2, [r7, #24]
   2826e:	0010      	movs	r0, r2
   28270:	4798      	blx	r3
   28272:	e04a      	b.n	2830a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   28274:	697b      	ldr	r3, [r7, #20]
   28276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   28278:	b29a      	uxth	r2, r3
   2827a:	230e      	movs	r3, #14
   2827c:	18fb      	adds	r3, r7, r3
   2827e:	05d2      	lsls	r2, r2, #23
   28280:	0dd2      	lsrs	r2, r2, #23
   28282:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   28284:	69bb      	ldr	r3, [r7, #24]
   28286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28288:	220e      	movs	r2, #14
   2828a:	18ba      	adds	r2, r7, r2
   2828c:	8812      	ldrh	r2, [r2, #0]
   2828e:	b2d2      	uxtb	r2, r2
   28290:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   28292:	69bb      	ldr	r3, [r7, #24]
   28294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28296:	1c5a      	adds	r2, r3, #1
   28298:	69bb      	ldr	r3, [r7, #24]
   2829a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   2829c:	69bb      	ldr	r3, [r7, #24]
   2829e:	795b      	ldrb	r3, [r3, #5]
   282a0:	2b01      	cmp	r3, #1
   282a2:	d10d      	bne.n	282c0 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   282a4:	69bb      	ldr	r3, [r7, #24]
   282a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   282a8:	220e      	movs	r2, #14
   282aa:	18ba      	adds	r2, r7, r2
   282ac:	8812      	ldrh	r2, [r2, #0]
   282ae:	0a12      	lsrs	r2, r2, #8
   282b0:	b292      	uxth	r2, r2
   282b2:	b2d2      	uxtb	r2, r2
   282b4:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   282b6:	69bb      	ldr	r3, [r7, #24]
   282b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   282ba:	1c5a      	adds	r2, r3, #1
   282bc:	69bb      	ldr	r3, [r7, #24]
   282be:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   282c0:	69bb      	ldr	r3, [r7, #24]
   282c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   282c4:	b29b      	uxth	r3, r3
   282c6:	3b01      	subs	r3, #1
   282c8:	b29b      	uxth	r3, r3
   282ca:	69ba      	ldr	r2, [r7, #24]
   282cc:	1c19      	adds	r1, r3, #0
   282ce:	8591      	strh	r1, [r2, #44]	; 0x2c
   282d0:	2b00      	cmp	r3, #0
   282d2:	d11a      	bne.n	2830a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   282d4:	697b      	ldr	r3, [r7, #20]
   282d6:	2204      	movs	r2, #4
   282d8:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   282da:	69bb      	ldr	r3, [r7, #24]
   282dc:	2232      	movs	r2, #50	; 0x32
   282de:	2100      	movs	r1, #0
   282e0:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   282e2:	2310      	movs	r3, #16
   282e4:	18fb      	adds	r3, r7, r3
   282e6:	881b      	ldrh	r3, [r3, #0]
   282e8:	2202      	movs	r2, #2
   282ea:	4013      	ands	r3, r2
					if (callback_status
   282ec:	d00d      	beq.n	2830a <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   282ee:	69bb      	ldr	r3, [r7, #24]
   282f0:	691b      	ldr	r3, [r3, #16]
   282f2:	69ba      	ldr	r2, [r7, #24]
   282f4:	0010      	movs	r0, r2
   282f6:	4798      	blx	r3
   282f8:	e007      	b.n	2830a <_usart_interrupt_handler+0x2ae>
   282fa:	46c0      	nop			; (mov r8, r8)
   282fc:	20005bcc 	.word	0x20005bcc
   28300:	00027e3d 	.word	0x00027e3d
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   28304:	697b      	ldr	r3, [r7, #20]
   28306:	2204      	movs	r2, #4
   28308:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   2830a:	2312      	movs	r3, #18
   2830c:	18fb      	adds	r3, r7, r3
   2830e:	881b      	ldrh	r3, [r3, #0]
   28310:	2210      	movs	r2, #16
   28312:	4013      	ands	r3, r2
   28314:	d010      	beq.n	28338 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   28316:	697b      	ldr	r3, [r7, #20]
   28318:	2210      	movs	r2, #16
   2831a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   2831c:	697b      	ldr	r3, [r7, #20]
   2831e:	2210      	movs	r2, #16
   28320:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   28322:	2310      	movs	r3, #16
   28324:	18fb      	adds	r3, r7, r3
   28326:	881b      	ldrh	r3, [r3, #0]
   28328:	2210      	movs	r2, #16
   2832a:	4013      	ands	r3, r2
   2832c:	d004      	beq.n	28338 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   2832e:	69bb      	ldr	r3, [r7, #24]
   28330:	69db      	ldr	r3, [r3, #28]
   28332:	69ba      	ldr	r2, [r7, #24]
   28334:	0010      	movs	r0, r2
   28336:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   28338:	2312      	movs	r3, #18
   2833a:	18fb      	adds	r3, r7, r3
   2833c:	881b      	ldrh	r3, [r3, #0]
   2833e:	2220      	movs	r2, #32
   28340:	4013      	ands	r3, r2
   28342:	d010      	beq.n	28366 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   28344:	697b      	ldr	r3, [r7, #20]
   28346:	2220      	movs	r2, #32
   28348:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   2834a:	697b      	ldr	r3, [r7, #20]
   2834c:	2220      	movs	r2, #32
   2834e:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   28350:	2310      	movs	r3, #16
   28352:	18fb      	adds	r3, r7, r3
   28354:	881b      	ldrh	r3, [r3, #0]
   28356:	2208      	movs	r2, #8
   28358:	4013      	ands	r3, r2
   2835a:	d004      	beq.n	28366 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   2835c:	69bb      	ldr	r3, [r7, #24]
   2835e:	699b      	ldr	r3, [r3, #24]
   28360:	69ba      	ldr	r2, [r7, #24]
   28362:	0010      	movs	r0, r2
   28364:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   28366:	2312      	movs	r3, #18
   28368:	18fb      	adds	r3, r7, r3
   2836a:	881b      	ldrh	r3, [r3, #0]
   2836c:	2208      	movs	r2, #8
   2836e:	4013      	ands	r3, r2
   28370:	d010      	beq.n	28394 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   28372:	697b      	ldr	r3, [r7, #20]
   28374:	2208      	movs	r2, #8
   28376:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   28378:	697b      	ldr	r3, [r7, #20]
   2837a:	2208      	movs	r2, #8
   2837c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   2837e:	2310      	movs	r3, #16
   28380:	18fb      	adds	r3, r7, r3
   28382:	881b      	ldrh	r3, [r3, #0]
   28384:	2220      	movs	r2, #32
   28386:	4013      	ands	r3, r2
   28388:	d004      	beq.n	28394 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   2838a:	69bb      	ldr	r3, [r7, #24]
   2838c:	6a1b      	ldr	r3, [r3, #32]
   2838e:	69ba      	ldr	r2, [r7, #24]
   28390:	0010      	movs	r0, r2
   28392:	4798      	blx	r3
		}
	}
#endif
}
   28394:	46c0      	nop			; (mov r8, r8)
   28396:	46bd      	mov	sp, r7
   28398:	b008      	add	sp, #32
   2839a:	bd80      	pop	{r7, pc}

0002839c <system_gclk_gen_get_config_defaults>:
{
   2839c:	b580      	push	{r7, lr}
   2839e:	b082      	sub	sp, #8
   283a0:	af00      	add	r7, sp, #0
   283a2:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   283a4:	687b      	ldr	r3, [r7, #4]
   283a6:	2201      	movs	r2, #1
   283a8:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   283aa:	687b      	ldr	r3, [r7, #4]
   283ac:	2200      	movs	r2, #0
   283ae:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   283b0:	687b      	ldr	r3, [r7, #4]
   283b2:	2206      	movs	r2, #6
   283b4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   283b6:	687b      	ldr	r3, [r7, #4]
   283b8:	2200      	movs	r2, #0
   283ba:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   283bc:	687b      	ldr	r3, [r7, #4]
   283be:	2200      	movs	r2, #0
   283c0:	725a      	strb	r2, [r3, #9]
}
   283c2:	46c0      	nop			; (mov r8, r8)
   283c4:	46bd      	mov	sp, r7
   283c6:	b002      	add	sp, #8
   283c8:	bd80      	pop	{r7, pc}

000283ca <system_gclk_chan_get_config_defaults>:
{
   283ca:	b580      	push	{r7, lr}
   283cc:	b082      	sub	sp, #8
   283ce:	af00      	add	r7, sp, #0
   283d0:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   283d2:	687b      	ldr	r3, [r7, #4]
   283d4:	2200      	movs	r2, #0
   283d6:	701a      	strb	r2, [r3, #0]
}
   283d8:	46c0      	nop			; (mov r8, r8)
   283da:	46bd      	mov	sp, r7
   283dc:	b002      	add	sp, #8
   283de:	bd80      	pop	{r7, pc}

000283e0 <system_clock_source_osc8m_get_config_defaults>:
{
   283e0:	b580      	push	{r7, lr}
   283e2:	b082      	sub	sp, #8
   283e4:	af00      	add	r7, sp, #0
   283e6:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   283e8:	687b      	ldr	r3, [r7, #4]
   283ea:	2203      	movs	r2, #3
   283ec:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   283ee:	687b      	ldr	r3, [r7, #4]
   283f0:	2200      	movs	r2, #0
   283f2:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   283f4:	687b      	ldr	r3, [r7, #4]
   283f6:	2201      	movs	r2, #1
   283f8:	709a      	strb	r2, [r3, #2]
}
   283fa:	46c0      	nop			; (mov r8, r8)
   283fc:	46bd      	mov	sp, r7
   283fe:	b002      	add	sp, #8
   28400:	bd80      	pop	{r7, pc}
	...

00028404 <system_cpu_clock_set_divider>:
{
   28404:	b580      	push	{r7, lr}
   28406:	b082      	sub	sp, #8
   28408:	af00      	add	r7, sp, #0
   2840a:	0002      	movs	r2, r0
   2840c:	1dfb      	adds	r3, r7, #7
   2840e:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   28410:	4a03      	ldr	r2, [pc, #12]	; (28420 <system_cpu_clock_set_divider+0x1c>)
   28412:	1dfb      	adds	r3, r7, #7
   28414:	781b      	ldrb	r3, [r3, #0]
   28416:	7213      	strb	r3, [r2, #8]
}
   28418:	46c0      	nop			; (mov r8, r8)
   2841a:	46bd      	mov	sp, r7
   2841c:	b002      	add	sp, #8
   2841e:	bd80      	pop	{r7, pc}
   28420:	40000400 	.word	0x40000400

00028424 <system_apb_clock_set_divider>:
{
   28424:	b580      	push	{r7, lr}
   28426:	b082      	sub	sp, #8
   28428:	af00      	add	r7, sp, #0
   2842a:	0002      	movs	r2, r0
   2842c:	1dfb      	adds	r3, r7, #7
   2842e:	701a      	strb	r2, [r3, #0]
   28430:	1dbb      	adds	r3, r7, #6
   28432:	1c0a      	adds	r2, r1, #0
   28434:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   28436:	1dfb      	adds	r3, r7, #7
   28438:	781b      	ldrb	r3, [r3, #0]
   2843a:	2b01      	cmp	r3, #1
   2843c:	d008      	beq.n	28450 <system_apb_clock_set_divider+0x2c>
   2843e:	2b02      	cmp	r3, #2
   28440:	d00b      	beq.n	2845a <system_apb_clock_set_divider+0x36>
   28442:	2b00      	cmp	r3, #0
   28444:	d10e      	bne.n	28464 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   28446:	4a0b      	ldr	r2, [pc, #44]	; (28474 <system_apb_clock_set_divider+0x50>)
   28448:	1dbb      	adds	r3, r7, #6
   2844a:	781b      	ldrb	r3, [r3, #0]
   2844c:	7253      	strb	r3, [r2, #9]
			break;
   2844e:	e00b      	b.n	28468 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   28450:	4a08      	ldr	r2, [pc, #32]	; (28474 <system_apb_clock_set_divider+0x50>)
   28452:	1dbb      	adds	r3, r7, #6
   28454:	781b      	ldrb	r3, [r3, #0]
   28456:	7293      	strb	r3, [r2, #10]
			break;
   28458:	e006      	b.n	28468 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   2845a:	4a06      	ldr	r2, [pc, #24]	; (28474 <system_apb_clock_set_divider+0x50>)
   2845c:	1dbb      	adds	r3, r7, #6
   2845e:	781b      	ldrb	r3, [r3, #0]
   28460:	72d3      	strb	r3, [r2, #11]
			break;
   28462:	e001      	b.n	28468 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   28464:	2317      	movs	r3, #23
   28466:	e000      	b.n	2846a <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   28468:	2300      	movs	r3, #0
}
   2846a:	0018      	movs	r0, r3
   2846c:	46bd      	mov	sp, r7
   2846e:	b002      	add	sp, #8
   28470:	bd80      	pop	{r7, pc}
   28472:	46c0      	nop			; (mov r8, r8)
   28474:	40000400 	.word	0x40000400

00028478 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   28478:	b580      	push	{r7, lr}
   2847a:	b082      	sub	sp, #8
   2847c:	af00      	add	r7, sp, #0
   2847e:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   28480:	687b      	ldr	r3, [r7, #4]
   28482:	2201      	movs	r2, #1
   28484:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   28486:	687b      	ldr	r3, [r7, #4]
   28488:	2200      	movs	r2, #0
   2848a:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   2848c:	687b      	ldr	r3, [r7, #4]
   2848e:	2200      	movs	r2, #0
   28490:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   28492:	687b      	ldr	r3, [r7, #4]
   28494:	2200      	movs	r2, #0
   28496:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   28498:	687b      	ldr	r3, [r7, #4]
   2849a:	2200      	movs	r2, #0
   2849c:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   2849e:	687b      	ldr	r3, [r7, #4]
   284a0:	4a0a      	ldr	r2, [pc, #40]	; (284cc <system_clock_source_dpll_get_config_defaults+0x54>)
   284a2:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   284a4:	687b      	ldr	r3, [r7, #4]
   284a6:	2280      	movs	r2, #128	; 0x80
   284a8:	0212      	lsls	r2, r2, #8
   284aa:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   284ac:	687b      	ldr	r3, [r7, #4]
   284ae:	2201      	movs	r2, #1
   284b0:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   284b2:	687b      	ldr	r3, [r7, #4]
   284b4:	2200      	movs	r2, #0
   284b6:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   284b8:	687b      	ldr	r3, [r7, #4]
   284ba:	2200      	movs	r2, #0
   284bc:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   284be:	687b      	ldr	r3, [r7, #4]
   284c0:	2200      	movs	r2, #0
   284c2:	749a      	strb	r2, [r3, #18]
};
   284c4:	46c0      	nop			; (mov r8, r8)
   284c6:	46bd      	mov	sp, r7
   284c8:	b002      	add	sp, #8
   284ca:	bd80      	pop	{r7, pc}
   284cc:	02dc6c00 	.word	0x02dc6c00

000284d0 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   284d0:	b580      	push	{r7, lr}
   284d2:	b082      	sub	sp, #8
   284d4:	af00      	add	r7, sp, #0
   284d6:	0002      	movs	r2, r0
   284d8:	1dfb      	adds	r3, r7, #7
   284da:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   284dc:	4a08      	ldr	r2, [pc, #32]	; (28500 <system_flash_set_waitstates+0x30>)
   284de:	1dfb      	adds	r3, r7, #7
   284e0:	781b      	ldrb	r3, [r3, #0]
   284e2:	210f      	movs	r1, #15
   284e4:	400b      	ands	r3, r1
   284e6:	b2d9      	uxtb	r1, r3
   284e8:	6853      	ldr	r3, [r2, #4]
   284ea:	200f      	movs	r0, #15
   284ec:	4001      	ands	r1, r0
   284ee:	0049      	lsls	r1, r1, #1
   284f0:	201e      	movs	r0, #30
   284f2:	4383      	bics	r3, r0
   284f4:	430b      	orrs	r3, r1
   284f6:	6053      	str	r3, [r2, #4]
}
   284f8:	46c0      	nop			; (mov r8, r8)
   284fa:	46bd      	mov	sp, r7
   284fc:	b002      	add	sp, #8
   284fe:	bd80      	pop	{r7, pc}
   28500:	41004000 	.word	0x41004000

00028504 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   28504:	b580      	push	{r7, lr}
   28506:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   28508:	46c0      	nop			; (mov r8, r8)
   2850a:	4b04      	ldr	r3, [pc, #16]	; (2851c <_system_dfll_wait_for_sync+0x18>)
   2850c:	68db      	ldr	r3, [r3, #12]
   2850e:	2210      	movs	r2, #16
   28510:	4013      	ands	r3, r2
   28512:	d0fa      	beq.n	2850a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   28514:	46c0      	nop			; (mov r8, r8)
   28516:	46bd      	mov	sp, r7
   28518:	bd80      	pop	{r7, pc}
   2851a:	46c0      	nop			; (mov r8, r8)
   2851c:	40000800 	.word	0x40000800

00028520 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   28520:	b580      	push	{r7, lr}
   28522:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   28524:	4b0c      	ldr	r3, [pc, #48]	; (28558 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28526:	2202      	movs	r2, #2
   28528:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2852a:	4b0c      	ldr	r3, [pc, #48]	; (2855c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2852c:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   2852e:	4a0a      	ldr	r2, [pc, #40]	; (28558 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28530:	4b0b      	ldr	r3, [pc, #44]	; (28560 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   28532:	689b      	ldr	r3, [r3, #8]
   28534:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   28536:	4a08      	ldr	r2, [pc, #32]	; (28558 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28538:	4b09      	ldr	r3, [pc, #36]	; (28560 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2853a:	685b      	ldr	r3, [r3, #4]
   2853c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   2853e:	4b06      	ldr	r3, [pc, #24]	; (28558 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28540:	2200      	movs	r2, #0
   28542:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   28544:	4b05      	ldr	r3, [pc, #20]	; (2855c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   28546:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   28548:	4a03      	ldr	r2, [pc, #12]	; (28558 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2854a:	4b05      	ldr	r3, [pc, #20]	; (28560 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2854c:	681b      	ldr	r3, [r3, #0]
   2854e:	b29b      	uxth	r3, r3
   28550:	8493      	strh	r3, [r2, #36]	; 0x24
}
   28552:	46c0      	nop			; (mov r8, r8)
   28554:	46bd      	mov	sp, r7
   28556:	bd80      	pop	{r7, pc}
   28558:	40000800 	.word	0x40000800
   2855c:	00028505 	.word	0x00028505
   28560:	200042a8 	.word	0x200042a8

00028564 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   28564:	b580      	push	{r7, lr}
   28566:	b082      	sub	sp, #8
   28568:	af00      	add	r7, sp, #0
   2856a:	0002      	movs	r2, r0
   2856c:	1dfb      	adds	r3, r7, #7
   2856e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   28570:	1dfb      	adds	r3, r7, #7
   28572:	781b      	ldrb	r3, [r3, #0]
   28574:	2b08      	cmp	r3, #8
   28576:	d841      	bhi.n	285fc <system_clock_source_get_hz+0x98>
   28578:	009a      	lsls	r2, r3, #2
   2857a:	4b23      	ldr	r3, [pc, #140]	; (28608 <system_clock_source_get_hz+0xa4>)
   2857c:	18d3      	adds	r3, r2, r3
   2857e:	681b      	ldr	r3, [r3, #0]
   28580:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   28582:	4b22      	ldr	r3, [pc, #136]	; (2860c <system_clock_source_get_hz+0xa8>)
   28584:	691b      	ldr	r3, [r3, #16]
   28586:	e03a      	b.n	285fe <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   28588:	4b21      	ldr	r3, [pc, #132]	; (28610 <system_clock_source_get_hz+0xac>)
   2858a:	6a1b      	ldr	r3, [r3, #32]
   2858c:	059b      	lsls	r3, r3, #22
   2858e:	0f9b      	lsrs	r3, r3, #30
   28590:	b2db      	uxtb	r3, r3
   28592:	001a      	movs	r2, r3
   28594:	4b1f      	ldr	r3, [pc, #124]	; (28614 <system_clock_source_get_hz+0xb0>)
   28596:	40d3      	lsrs	r3, r2
   28598:	e031      	b.n	285fe <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   2859a:	2380      	movs	r3, #128	; 0x80
   2859c:	021b      	lsls	r3, r3, #8
   2859e:	e02e      	b.n	285fe <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   285a0:	2380      	movs	r3, #128	; 0x80
   285a2:	021b      	lsls	r3, r3, #8
   285a4:	e02b      	b.n	285fe <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   285a6:	4b19      	ldr	r3, [pc, #100]	; (2860c <system_clock_source_get_hz+0xa8>)
   285a8:	695b      	ldr	r3, [r3, #20]
   285aa:	e028      	b.n	285fe <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   285ac:	4b17      	ldr	r3, [pc, #92]	; (2860c <system_clock_source_get_hz+0xa8>)
   285ae:	681b      	ldr	r3, [r3, #0]
   285b0:	2202      	movs	r2, #2
   285b2:	4013      	ands	r3, r2
   285b4:	d101      	bne.n	285ba <system_clock_source_get_hz+0x56>
			return 0;
   285b6:	2300      	movs	r3, #0
   285b8:	e021      	b.n	285fe <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   285ba:	4b17      	ldr	r3, [pc, #92]	; (28618 <system_clock_source_get_hz+0xb4>)
   285bc:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   285be:	4b13      	ldr	r3, [pc, #76]	; (2860c <system_clock_source_get_hz+0xa8>)
   285c0:	681b      	ldr	r3, [r3, #0]
   285c2:	2224      	movs	r2, #36	; 0x24
   285c4:	4013      	ands	r3, r2
   285c6:	2b04      	cmp	r3, #4
   285c8:	d109      	bne.n	285de <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   285ca:	2000      	movs	r0, #0
   285cc:	4b13      	ldr	r3, [pc, #76]	; (2861c <system_clock_source_get_hz+0xb8>)
   285ce:	4798      	blx	r3
   285d0:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   285d2:	4b0e      	ldr	r3, [pc, #56]	; (2860c <system_clock_source_get_hz+0xa8>)
   285d4:	689b      	ldr	r3, [r3, #8]
   285d6:	041b      	lsls	r3, r3, #16
   285d8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   285da:	4353      	muls	r3, r2
   285dc:	e00f      	b.n	285fe <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   285de:	4b10      	ldr	r3, [pc, #64]	; (28620 <system_clock_source_get_hz+0xbc>)
   285e0:	e00d      	b.n	285fe <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   285e2:	4a0b      	ldr	r2, [pc, #44]	; (28610 <system_clock_source_get_hz+0xac>)
   285e4:	2350      	movs	r3, #80	; 0x50
   285e6:	5cd3      	ldrb	r3, [r2, r3]
   285e8:	b2db      	uxtb	r3, r3
   285ea:	001a      	movs	r2, r3
   285ec:	2304      	movs	r3, #4
   285ee:	4013      	ands	r3, r2
   285f0:	d101      	bne.n	285f6 <system_clock_source_get_hz+0x92>
			return 0;
   285f2:	2300      	movs	r3, #0
   285f4:	e003      	b.n	285fe <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   285f6:	4b05      	ldr	r3, [pc, #20]	; (2860c <system_clock_source_get_hz+0xa8>)
   285f8:	68db      	ldr	r3, [r3, #12]
   285fa:	e000      	b.n	285fe <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   285fc:	2300      	movs	r3, #0
	}
}
   285fe:	0018      	movs	r0, r3
   28600:	46bd      	mov	sp, r7
   28602:	b002      	add	sp, #8
   28604:	bd80      	pop	{r7, pc}
   28606:	46c0      	nop			; (mov r8, r8)
   28608:	00038f10 	.word	0x00038f10
   2860c:	200042a8 	.word	0x200042a8
   28610:	40000800 	.word	0x40000800
   28614:	007a1200 	.word	0x007a1200
   28618:	00028505 	.word	0x00028505
   2861c:	00029001 	.word	0x00029001
   28620:	02dc6c00 	.word	0x02dc6c00

00028624 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   28624:	b580      	push	{r7, lr}
   28626:	b084      	sub	sp, #16
   28628:	af00      	add	r7, sp, #0
   2862a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   2862c:	4b1a      	ldr	r3, [pc, #104]	; (28698 <system_clock_source_osc8m_set_config+0x74>)
   2862e:	6a1b      	ldr	r3, [r3, #32]
   28630:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   28632:	687b      	ldr	r3, [r7, #4]
   28634:	781b      	ldrb	r3, [r3, #0]
   28636:	1c1a      	adds	r2, r3, #0
   28638:	2303      	movs	r3, #3
   2863a:	4013      	ands	r3, r2
   2863c:	b2da      	uxtb	r2, r3
   2863e:	230d      	movs	r3, #13
   28640:	18fb      	adds	r3, r7, r3
   28642:	2103      	movs	r1, #3
   28644:	400a      	ands	r2, r1
   28646:	0010      	movs	r0, r2
   28648:	781a      	ldrb	r2, [r3, #0]
   2864a:	2103      	movs	r1, #3
   2864c:	438a      	bics	r2, r1
   2864e:	1c11      	adds	r1, r2, #0
   28650:	1c02      	adds	r2, r0, #0
   28652:	430a      	orrs	r2, r1
   28654:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   28656:	687b      	ldr	r3, [r7, #4]
   28658:	789a      	ldrb	r2, [r3, #2]
   2865a:	230c      	movs	r3, #12
   2865c:	18fb      	adds	r3, r7, r3
   2865e:	01d0      	lsls	r0, r2, #7
   28660:	781a      	ldrb	r2, [r3, #0]
   28662:	217f      	movs	r1, #127	; 0x7f
   28664:	400a      	ands	r2, r1
   28666:	1c11      	adds	r1, r2, #0
   28668:	1c02      	adds	r2, r0, #0
   2866a:	430a      	orrs	r2, r1
   2866c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   2866e:	687b      	ldr	r3, [r7, #4]
   28670:	785a      	ldrb	r2, [r3, #1]
   28672:	230c      	movs	r3, #12
   28674:	18fb      	adds	r3, r7, r3
   28676:	2101      	movs	r1, #1
   28678:	400a      	ands	r2, r1
   2867a:	0190      	lsls	r0, r2, #6
   2867c:	781a      	ldrb	r2, [r3, #0]
   2867e:	2140      	movs	r1, #64	; 0x40
   28680:	438a      	bics	r2, r1
   28682:	1c11      	adds	r1, r2, #0
   28684:	1c02      	adds	r2, r0, #0
   28686:	430a      	orrs	r2, r1
   28688:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   2868a:	4b03      	ldr	r3, [pc, #12]	; (28698 <system_clock_source_osc8m_set_config+0x74>)
   2868c:	68fa      	ldr	r2, [r7, #12]
   2868e:	621a      	str	r2, [r3, #32]
}
   28690:	46c0      	nop			; (mov r8, r8)
   28692:	46bd      	mov	sp, r7
   28694:	b004      	add	sp, #16
   28696:	bd80      	pop	{r7, pc}
   28698:	40000800 	.word	0x40000800

0002869c <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   2869c:	b580      	push	{r7, lr}
   2869e:	b086      	sub	sp, #24
   286a0:	af00      	add	r7, sp, #0
   286a2:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   286a4:	687b      	ldr	r3, [r7, #4]
   286a6:	68db      	ldr	r3, [r3, #12]
   286a8:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   286aa:	687b      	ldr	r3, [r7, #4]
   286ac:	7d1b      	ldrb	r3, [r3, #20]
   286ae:	2b01      	cmp	r3, #1
   286b0:	d10a      	bne.n	286c8 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   286b2:	687b      	ldr	r3, [r7, #4]
   286b4:	8a1b      	ldrh	r3, [r3, #16]
   286b6:	3301      	adds	r3, #1
   286b8:	005b      	lsls	r3, r3, #1
   286ba:	001a      	movs	r2, r3
   286bc:	4b36      	ldr	r3, [pc, #216]	; (28798 <system_clock_source_dpll_set_config+0xfc>)
   286be:	0011      	movs	r1, r2
   286c0:	6978      	ldr	r0, [r7, #20]
   286c2:	4798      	blx	r3
   286c4:	0003      	movs	r3, r0
   286c6:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   286c8:	687b      	ldr	r3, [r7, #4]
   286ca:	689b      	ldr	r3, [r3, #8]
   286cc:	011a      	lsls	r2, r3, #4
   286ce:	4b32      	ldr	r3, [pc, #200]	; (28798 <system_clock_source_dpll_set_config+0xfc>)
   286d0:	6979      	ldr	r1, [r7, #20]
   286d2:	0010      	movs	r0, r2
   286d4:	4798      	blx	r3
   286d6:	0003      	movs	r3, r0
   286d8:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   286da:	693b      	ldr	r3, [r7, #16]
   286dc:	b2da      	uxtb	r2, r3
   286de:	230f      	movs	r3, #15
   286e0:	18fb      	adds	r3, r7, r3
   286e2:	210f      	movs	r1, #15
   286e4:	400a      	ands	r2, r1
   286e6:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   286e8:	693b      	ldr	r3, [r7, #16]
   286ea:	091b      	lsrs	r3, r3, #4
   286ec:	3b01      	subs	r3, #1
   286ee:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   286f0:	492a      	ldr	r1, [pc, #168]	; (2879c <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   286f2:	687b      	ldr	r3, [r7, #4]
   286f4:	781b      	ldrb	r3, [r3, #0]
   286f6:	01db      	lsls	r3, r3, #7
   286f8:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   286fa:	687b      	ldr	r3, [r7, #4]
   286fc:	785b      	ldrb	r3, [r3, #1]
   286fe:	019b      	lsls	r3, r3, #6
   28700:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   28702:	4313      	orrs	r3, r2
   28704:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   28706:	2344      	movs	r3, #68	; 0x44
   28708:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   2870a:	4b24      	ldr	r3, [pc, #144]	; (2879c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2870c:	220f      	movs	r2, #15
   2870e:	18ba      	adds	r2, r7, r2
   28710:	7812      	ldrb	r2, [r2, #0]
   28712:	0412      	lsls	r2, r2, #16
   28714:	0011      	movs	r1, r2
   28716:	22f0      	movs	r2, #240	; 0xf0
   28718:	0312      	lsls	r2, r2, #12
   2871a:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   2871c:	693a      	ldr	r2, [r7, #16]
   2871e:	0512      	lsls	r2, r2, #20
   28720:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   28722:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   28724:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   28726:	4b1d      	ldr	r3, [pc, #116]	; (2879c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   28728:	687a      	ldr	r2, [r7, #4]
   2872a:	8a12      	ldrh	r2, [r2, #16]
   2872c:	0412      	lsls	r2, r2, #16
   2872e:	0011      	movs	r1, r2
   28730:	4a1b      	ldr	r2, [pc, #108]	; (287a0 <system_clock_source_dpll_set_config+0x104>)
   28732:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   28734:	687a      	ldr	r2, [r7, #4]
   28736:	7892      	ldrb	r2, [r2, #2]
   28738:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2873a:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2873c:	687a      	ldr	r2, [r7, #4]
   2873e:	7cd2      	ldrb	r2, [r2, #19]
   28740:	0212      	lsls	r2, r2, #8
   28742:	0010      	movs	r0, r2
   28744:	22e0      	movs	r2, #224	; 0xe0
   28746:	00d2      	lsls	r2, r2, #3
   28748:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2874a:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2874c:	687a      	ldr	r2, [r7, #4]
   2874e:	7d12      	ldrb	r2, [r2, #20]
   28750:	0112      	lsls	r2, r2, #4
   28752:	0010      	movs	r0, r2
   28754:	2230      	movs	r2, #48	; 0x30
   28756:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   28758:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2875a:	687a      	ldr	r2, [r7, #4]
   2875c:	78d2      	ldrb	r2, [r2, #3]
   2875e:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   28760:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   28762:	687a      	ldr	r2, [r7, #4]
   28764:	7912      	ldrb	r2, [r2, #4]
   28766:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   28768:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   2876a:	687a      	ldr	r2, [r7, #4]
   2876c:	7c92      	ldrb	r2, [r2, #18]
   2876e:	0010      	movs	r0, r2
   28770:	2203      	movs	r2, #3
   28772:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   28774:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   28776:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   28778:	693b      	ldr	r3, [r7, #16]
   2877a:	3301      	adds	r3, #1
   2877c:	011a      	lsls	r2, r3, #4
   2877e:	230f      	movs	r3, #15
   28780:	18fb      	adds	r3, r7, r3
   28782:	781b      	ldrb	r3, [r3, #0]
   28784:	18d3      	adds	r3, r2, r3
   28786:	697a      	ldr	r2, [r7, #20]
   28788:	4353      	muls	r3, r2
   2878a:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   2878c:	4b05      	ldr	r3, [pc, #20]	; (287a4 <system_clock_source_dpll_set_config+0x108>)
   2878e:	60da      	str	r2, [r3, #12]
}
   28790:	46c0      	nop			; (mov r8, r8)
   28792:	46bd      	mov	sp, r7
   28794:	b006      	add	sp, #24
   28796:	bd80      	pop	{r7, pc}
   28798:	00031ac5 	.word	0x00031ac5
   2879c:	40000800 	.word	0x40000800
   287a0:	07ff0000 	.word	0x07ff0000
   287a4:	200042a8 	.word	0x200042a8

000287a8 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   287a8:	b580      	push	{r7, lr}
   287aa:	b082      	sub	sp, #8
   287ac:	af00      	add	r7, sp, #0
   287ae:	0002      	movs	r2, r0
   287b0:	1dfb      	adds	r3, r7, #7
   287b2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   287b4:	1dfb      	adds	r3, r7, #7
   287b6:	781b      	ldrb	r3, [r3, #0]
   287b8:	2b08      	cmp	r3, #8
   287ba:	d83b      	bhi.n	28834 <system_clock_source_enable+0x8c>
   287bc:	009a      	lsls	r2, r3, #2
   287be:	4b21      	ldr	r3, [pc, #132]	; (28844 <system_clock_source_enable+0x9c>)
   287c0:	18d3      	adds	r3, r2, r3
   287c2:	681b      	ldr	r3, [r3, #0]
   287c4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   287c6:	4b20      	ldr	r3, [pc, #128]	; (28848 <system_clock_source_enable+0xa0>)
   287c8:	4a1f      	ldr	r2, [pc, #124]	; (28848 <system_clock_source_enable+0xa0>)
   287ca:	6a12      	ldr	r2, [r2, #32]
   287cc:	2102      	movs	r1, #2
   287ce:	430a      	orrs	r2, r1
   287d0:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   287d2:	2300      	movs	r3, #0
   287d4:	e031      	b.n	2883a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   287d6:	4b1c      	ldr	r3, [pc, #112]	; (28848 <system_clock_source_enable+0xa0>)
   287d8:	4a1b      	ldr	r2, [pc, #108]	; (28848 <system_clock_source_enable+0xa0>)
   287da:	6992      	ldr	r2, [r2, #24]
   287dc:	2102      	movs	r1, #2
   287de:	430a      	orrs	r2, r1
   287e0:	619a      	str	r2, [r3, #24]
		break;
   287e2:	e029      	b.n	28838 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   287e4:	4a18      	ldr	r2, [pc, #96]	; (28848 <system_clock_source_enable+0xa0>)
   287e6:	4b18      	ldr	r3, [pc, #96]	; (28848 <system_clock_source_enable+0xa0>)
   287e8:	8a1b      	ldrh	r3, [r3, #16]
   287ea:	b29b      	uxth	r3, r3
   287ec:	2102      	movs	r1, #2
   287ee:	430b      	orrs	r3, r1
   287f0:	b29b      	uxth	r3, r3
   287f2:	8213      	strh	r3, [r2, #16]
		break;
   287f4:	e020      	b.n	28838 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   287f6:	4a14      	ldr	r2, [pc, #80]	; (28848 <system_clock_source_enable+0xa0>)
   287f8:	4b13      	ldr	r3, [pc, #76]	; (28848 <system_clock_source_enable+0xa0>)
   287fa:	8a9b      	ldrh	r3, [r3, #20]
   287fc:	b29b      	uxth	r3, r3
   287fe:	2102      	movs	r1, #2
   28800:	430b      	orrs	r3, r1
   28802:	b29b      	uxth	r3, r3
   28804:	8293      	strh	r3, [r2, #20]
		break;
   28806:	e017      	b.n	28838 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   28808:	4b10      	ldr	r3, [pc, #64]	; (2884c <system_clock_source_enable+0xa4>)
   2880a:	681b      	ldr	r3, [r3, #0]
   2880c:	2202      	movs	r2, #2
   2880e:	431a      	orrs	r2, r3
   28810:	4b0e      	ldr	r3, [pc, #56]	; (2884c <system_clock_source_enable+0xa4>)
   28812:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   28814:	4b0e      	ldr	r3, [pc, #56]	; (28850 <system_clock_source_enable+0xa8>)
   28816:	4798      	blx	r3
		break;
   28818:	e00e      	b.n	28838 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   2881a:	4a0b      	ldr	r2, [pc, #44]	; (28848 <system_clock_source_enable+0xa0>)
   2881c:	490a      	ldr	r1, [pc, #40]	; (28848 <system_clock_source_enable+0xa0>)
   2881e:	2344      	movs	r3, #68	; 0x44
   28820:	5ccb      	ldrb	r3, [r1, r3]
   28822:	b2db      	uxtb	r3, r3
   28824:	2102      	movs	r1, #2
   28826:	430b      	orrs	r3, r1
   28828:	b2d9      	uxtb	r1, r3
   2882a:	2344      	movs	r3, #68	; 0x44
   2882c:	54d1      	strb	r1, [r2, r3]
		break;
   2882e:	e003      	b.n	28838 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   28830:	2300      	movs	r3, #0
   28832:	e002      	b.n	2883a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   28834:	2317      	movs	r3, #23
   28836:	e000      	b.n	2883a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   28838:	2300      	movs	r3, #0
}
   2883a:	0018      	movs	r0, r3
   2883c:	46bd      	mov	sp, r7
   2883e:	b002      	add	sp, #8
   28840:	bd80      	pop	{r7, pc}
   28842:	46c0      	nop			; (mov r8, r8)
   28844:	00038f34 	.word	0x00038f34
   28848:	40000800 	.word	0x40000800
   2884c:	200042a8 	.word	0x200042a8
   28850:	00028521 	.word	0x00028521

00028854 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   28854:	b580      	push	{r7, lr}
   28856:	b084      	sub	sp, #16
   28858:	af00      	add	r7, sp, #0
   2885a:	0002      	movs	r2, r0
   2885c:	1dfb      	adds	r3, r7, #7
   2885e:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   28860:	2300      	movs	r3, #0
   28862:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   28864:	1dfb      	adds	r3, r7, #7
   28866:	781b      	ldrb	r3, [r3, #0]
   28868:	2b08      	cmp	r3, #8
   2886a:	d821      	bhi.n	288b0 <system_clock_source_is_ready+0x5c>
   2886c:	009a      	lsls	r2, r3, #2
   2886e:	4b18      	ldr	r3, [pc, #96]	; (288d0 <system_clock_source_is_ready+0x7c>)
   28870:	18d3      	adds	r3, r2, r3
   28872:	681b      	ldr	r3, [r3, #0]
   28874:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   28876:	2308      	movs	r3, #8
   28878:	60fb      	str	r3, [r7, #12]
		break;
   2887a:	e01b      	b.n	288b4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   2887c:	2304      	movs	r3, #4
   2887e:	60fb      	str	r3, [r7, #12]
		break;
   28880:	e018      	b.n	288b4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   28882:	2301      	movs	r3, #1
   28884:	60fb      	str	r3, [r7, #12]
		break;
   28886:	e015      	b.n	288b4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   28888:	2302      	movs	r3, #2
   2888a:	60fb      	str	r3, [r7, #12]
		break;
   2888c:	e012      	b.n	288b4 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   2888e:	2310      	movs	r3, #16
   28890:	60fb      	str	r3, [r7, #12]
		}
		break;
   28892:	e00f      	b.n	288b4 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   28894:	4a0f      	ldr	r2, [pc, #60]	; (288d4 <system_clock_source_is_ready+0x80>)
   28896:	2350      	movs	r3, #80	; 0x50
   28898:	5cd3      	ldrb	r3, [r2, r3]
   2889a:	b2db      	uxtb	r3, r3
   2889c:	001a      	movs	r2, r3
   2889e:	2303      	movs	r3, #3
   288a0:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   288a2:	3b03      	subs	r3, #3
   288a4:	425a      	negs	r2, r3
   288a6:	4153      	adcs	r3, r2
   288a8:	b2db      	uxtb	r3, r3
   288aa:	e00c      	b.n	288c6 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   288ac:	2301      	movs	r3, #1
   288ae:	e00a      	b.n	288c6 <system_clock_source_is_ready+0x72>

	default:
		return false;
   288b0:	2300      	movs	r3, #0
   288b2:	e008      	b.n	288c6 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   288b4:	4b07      	ldr	r3, [pc, #28]	; (288d4 <system_clock_source_is_ready+0x80>)
   288b6:	68db      	ldr	r3, [r3, #12]
   288b8:	68fa      	ldr	r2, [r7, #12]
   288ba:	401a      	ands	r2, r3
   288bc:	68fb      	ldr	r3, [r7, #12]
   288be:	1ad3      	subs	r3, r2, r3
   288c0:	425a      	negs	r2, r3
   288c2:	4153      	adcs	r3, r2
   288c4:	b2db      	uxtb	r3, r3
}
   288c6:	0018      	movs	r0, r3
   288c8:	46bd      	mov	sp, r7
   288ca:	b004      	add	sp, #16
   288cc:	bd80      	pop	{r7, pc}
   288ce:	46c0      	nop			; (mov r8, r8)
   288d0:	00038f58 	.word	0x00038f58
   288d4:	40000800 	.word	0x40000800

000288d8 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   288d8:	b580      	push	{r7, lr}
   288da:	b082      	sub	sp, #8
   288dc:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   288de:	003b      	movs	r3, r7
   288e0:	2203      	movs	r2, #3
   288e2:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   288e4:	2300      	movs	r3, #0
   288e6:	607b      	str	r3, [r7, #4]
   288e8:	e009      	b.n	288fe <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   288ea:	687b      	ldr	r3, [r7, #4]
   288ec:	b2db      	uxtb	r3, r3
   288ee:	003a      	movs	r2, r7
   288f0:	0011      	movs	r1, r2
   288f2:	0018      	movs	r0, r3
   288f4:	4b05      	ldr	r3, [pc, #20]	; (2890c <_switch_peripheral_gclk+0x34>)
   288f6:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   288f8:	687b      	ldr	r3, [r7, #4]
   288fa:	3301      	adds	r3, #1
   288fc:	607b      	str	r3, [r7, #4]
   288fe:	687b      	ldr	r3, [r7, #4]
   28900:	2b24      	cmp	r3, #36	; 0x24
   28902:	d9f2      	bls.n	288ea <_switch_peripheral_gclk+0x12>
	}
}
   28904:	46c0      	nop			; (mov r8, r8)
   28906:	46bd      	mov	sp, r7
   28908:	b002      	add	sp, #8
   2890a:	bd80      	pop	{r7, pc}
   2890c:	00028edd 	.word	0x00028edd

00028910 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   28910:	b580      	push	{r7, lr}
   28912:	b0a6      	sub	sp, #152	; 0x98
   28914:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   28916:	4b92      	ldr	r3, [pc, #584]	; (28b60 <system_clock_init+0x250>)
   28918:	22c2      	movs	r2, #194	; 0xc2
   2891a:	00d2      	lsls	r2, r2, #3
   2891c:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   2891e:	2003      	movs	r0, #3
   28920:	4b90      	ldr	r3, [pc, #576]	; (28b64 <system_clock_init+0x254>)
   28922:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   28924:	4b90      	ldr	r3, [pc, #576]	; (28b68 <system_clock_init+0x258>)
   28926:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   28928:	2394      	movs	r3, #148	; 0x94
   2892a:	18fb      	adds	r3, r7, r3
   2892c:	0018      	movs	r0, r3
   2892e:	4b8f      	ldr	r3, [pc, #572]	; (28b6c <system_clock_init+0x25c>)
   28930:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   28932:	2394      	movs	r3, #148	; 0x94
   28934:	18fb      	adds	r3, r7, r3
   28936:	2200      	movs	r2, #0
   28938:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   2893a:	2394      	movs	r3, #148	; 0x94
   2893c:	18fb      	adds	r3, r7, r3
   2893e:	2201      	movs	r2, #1
   28940:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   28942:	2394      	movs	r3, #148	; 0x94
   28944:	18fb      	adds	r3, r7, r3
   28946:	2200      	movs	r2, #0
   28948:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   2894a:	2394      	movs	r3, #148	; 0x94
   2894c:	18fb      	adds	r3, r7, r3
   2894e:	0018      	movs	r0, r3
   28950:	4b87      	ldr	r3, [pc, #540]	; (28b70 <system_clock_init+0x260>)
   28952:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   28954:	2006      	movs	r0, #6
   28956:	4b87      	ldr	r3, [pc, #540]	; (28b74 <system_clock_init+0x264>)
   28958:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   2895a:	4b87      	ldr	r3, [pc, #540]	; (28b78 <system_clock_init+0x268>)
   2895c:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   2895e:	2360      	movs	r3, #96	; 0x60
   28960:	18fb      	adds	r3, r7, r3
   28962:	0018      	movs	r0, r3
   28964:	4b85      	ldr	r3, [pc, #532]	; (28b7c <system_clock_init+0x26c>)
   28966:	4798      	blx	r3
   28968:	2360      	movs	r3, #96	; 0x60
   2896a:	18fb      	adds	r3, r7, r3
   2896c:	2206      	movs	r2, #6
   2896e:	701a      	strb	r2, [r3, #0]
   28970:	2360      	movs	r3, #96	; 0x60
   28972:	18fb      	adds	r3, r7, r3
   28974:	2208      	movs	r2, #8
   28976:	605a      	str	r2, [r3, #4]
   28978:	2360      	movs	r3, #96	; 0x60
   2897a:	18fb      	adds	r3, r7, r3
   2897c:	2200      	movs	r2, #0
   2897e:	721a      	strb	r2, [r3, #8]
   28980:	2360      	movs	r3, #96	; 0x60
   28982:	18fb      	adds	r3, r7, r3
   28984:	2200      	movs	r2, #0
   28986:	725a      	strb	r2, [r3, #9]
   28988:	2360      	movs	r3, #96	; 0x60
   2898a:	18fb      	adds	r3, r7, r3
   2898c:	0019      	movs	r1, r3
   2898e:	2001      	movs	r0, #1
   28990:	4b7b      	ldr	r3, [pc, #492]	; (28b80 <system_clock_init+0x270>)
   28992:	4798      	blx	r3
   28994:	2001      	movs	r0, #1
   28996:	4b7b      	ldr	r3, [pc, #492]	; (28b84 <system_clock_init+0x274>)
   28998:	4798      	blx	r3
   2899a:	2354      	movs	r3, #84	; 0x54
   2899c:	18fb      	adds	r3, r7, r3
   2899e:	0018      	movs	r0, r3
   289a0:	4b76      	ldr	r3, [pc, #472]	; (28b7c <system_clock_init+0x26c>)
   289a2:	4798      	blx	r3
   289a4:	2354      	movs	r3, #84	; 0x54
   289a6:	18fb      	adds	r3, r7, r3
   289a8:	2203      	movs	r2, #3
   289aa:	701a      	strb	r2, [r3, #0]
   289ac:	2354      	movs	r3, #84	; 0x54
   289ae:	18fb      	adds	r3, r7, r3
   289b0:	2201      	movs	r2, #1
   289b2:	605a      	str	r2, [r3, #4]
   289b4:	2354      	movs	r3, #84	; 0x54
   289b6:	18fb      	adds	r3, r7, r3
   289b8:	2201      	movs	r2, #1
   289ba:	721a      	strb	r2, [r3, #8]
   289bc:	2354      	movs	r3, #84	; 0x54
   289be:	18fb      	adds	r3, r7, r3
   289c0:	2200      	movs	r2, #0
   289c2:	725a      	strb	r2, [r3, #9]
   289c4:	2354      	movs	r3, #84	; 0x54
   289c6:	18fb      	adds	r3, r7, r3
   289c8:	0019      	movs	r1, r3
   289ca:	2002      	movs	r0, #2
   289cc:	4b6c      	ldr	r3, [pc, #432]	; (28b80 <system_clock_init+0x270>)
   289ce:	4798      	blx	r3
   289d0:	2002      	movs	r0, #2
   289d2:	4b6c      	ldr	r3, [pc, #432]	; (28b84 <system_clock_init+0x274>)
   289d4:	4798      	blx	r3
   289d6:	233c      	movs	r3, #60	; 0x3c
   289d8:	18fb      	adds	r3, r7, r3
   289da:	0018      	movs	r0, r3
   289dc:	4b67      	ldr	r3, [pc, #412]	; (28b7c <system_clock_init+0x26c>)
   289de:	4798      	blx	r3
   289e0:	233c      	movs	r3, #60	; 0x3c
   289e2:	18fb      	adds	r3, r7, r3
   289e4:	2203      	movs	r2, #3
   289e6:	701a      	strb	r2, [r3, #0]
   289e8:	233c      	movs	r3, #60	; 0x3c
   289ea:	18fb      	adds	r3, r7, r3
   289ec:	2220      	movs	r2, #32
   289ee:	605a      	str	r2, [r3, #4]
   289f0:	233c      	movs	r3, #60	; 0x3c
   289f2:	18fb      	adds	r3, r7, r3
   289f4:	2200      	movs	r2, #0
   289f6:	721a      	strb	r2, [r3, #8]
   289f8:	233c      	movs	r3, #60	; 0x3c
   289fa:	18fb      	adds	r3, r7, r3
   289fc:	2200      	movs	r2, #0
   289fe:	725a      	strb	r2, [r3, #9]
   28a00:	233c      	movs	r3, #60	; 0x3c
   28a02:	18fb      	adds	r3, r7, r3
   28a04:	0019      	movs	r1, r3
   28a06:	2004      	movs	r0, #4
   28a08:	4b5d      	ldr	r3, [pc, #372]	; (28b80 <system_clock_init+0x270>)
   28a0a:	4798      	blx	r3
   28a0c:	2004      	movs	r0, #4
   28a0e:	4b5d      	ldr	r3, [pc, #372]	; (28b84 <system_clock_init+0x274>)
   28a10:	4798      	blx	r3
   28a12:	2330      	movs	r3, #48	; 0x30
   28a14:	18fb      	adds	r3, r7, r3
   28a16:	0018      	movs	r0, r3
   28a18:	4b58      	ldr	r3, [pc, #352]	; (28b7c <system_clock_init+0x26c>)
   28a1a:	4798      	blx	r3
   28a1c:	2330      	movs	r3, #48	; 0x30
   28a1e:	18fb      	adds	r3, r7, r3
   28a20:	2206      	movs	r2, #6
   28a22:	701a      	strb	r2, [r3, #0]
   28a24:	2330      	movs	r3, #48	; 0x30
   28a26:	18fb      	adds	r3, r7, r3
   28a28:	2201      	movs	r2, #1
   28a2a:	605a      	str	r2, [r3, #4]
   28a2c:	2330      	movs	r3, #48	; 0x30
   28a2e:	18fb      	adds	r3, r7, r3
   28a30:	2200      	movs	r2, #0
   28a32:	721a      	strb	r2, [r3, #8]
   28a34:	2330      	movs	r3, #48	; 0x30
   28a36:	18fb      	adds	r3, r7, r3
   28a38:	2200      	movs	r2, #0
   28a3a:	725a      	strb	r2, [r3, #9]
   28a3c:	2330      	movs	r3, #48	; 0x30
   28a3e:	18fb      	adds	r3, r7, r3
   28a40:	0019      	movs	r1, r3
   28a42:	2005      	movs	r0, #5
   28a44:	4b4e      	ldr	r3, [pc, #312]	; (28b80 <system_clock_init+0x270>)
   28a46:	4798      	blx	r3
   28a48:	2005      	movs	r0, #5
   28a4a:	4b4e      	ldr	r3, [pc, #312]	; (28b84 <system_clock_init+0x274>)
   28a4c:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   28a4e:	2390      	movs	r3, #144	; 0x90
   28a50:	18fb      	adds	r3, r7, r3
   28a52:	0018      	movs	r0, r3
   28a54:	4b4c      	ldr	r3, [pc, #304]	; (28b88 <system_clock_init+0x278>)
   28a56:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   28a58:	2390      	movs	r3, #144	; 0x90
   28a5a:	18fb      	adds	r3, r7, r3
   28a5c:	2201      	movs	r2, #1
   28a5e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   28a60:	2390      	movs	r3, #144	; 0x90
   28a62:	18fb      	adds	r3, r7, r3
   28a64:	0019      	movs	r1, r3
   28a66:	2001      	movs	r0, #1
   28a68:	4b48      	ldr	r3, [pc, #288]	; (28b8c <system_clock_init+0x27c>)
   28a6a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   28a6c:	2001      	movs	r0, #1
   28a6e:	4b48      	ldr	r3, [pc, #288]	; (28b90 <system_clock_init+0x280>)
   28a70:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   28a72:	2378      	movs	r3, #120	; 0x78
   28a74:	18fb      	adds	r3, r7, r3
   28a76:	0018      	movs	r0, r3
   28a78:	4b46      	ldr	r3, [pc, #280]	; (28b94 <system_clock_init+0x284>)
   28a7a:	4798      	blx	r3

	dpll_config.on_demand        = false;
   28a7c:	2378      	movs	r3, #120	; 0x78
   28a7e:	18fb      	adds	r3, r7, r3
   28a80:	2200      	movs	r2, #0
   28a82:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   28a84:	2378      	movs	r3, #120	; 0x78
   28a86:	18fb      	adds	r3, r7, r3
   28a88:	2200      	movs	r2, #0
   28a8a:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   28a8c:	2378      	movs	r3, #120	; 0x78
   28a8e:	18fb      	adds	r3, r7, r3
   28a90:	2200      	movs	r2, #0
   28a92:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   28a94:	2378      	movs	r3, #120	; 0x78
   28a96:	18fb      	adds	r3, r7, r3
   28a98:	2200      	movs	r2, #0
   28a9a:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   28a9c:	2378      	movs	r3, #120	; 0x78
   28a9e:	18fb      	adds	r3, r7, r3
   28aa0:	2200      	movs	r2, #0
   28aa2:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   28aa4:	2378      	movs	r3, #120	; 0x78
   28aa6:	18fb      	adds	r3, r7, r3
   28aa8:	2200      	movs	r2, #0
   28aaa:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   28aac:	2378      	movs	r3, #120	; 0x78
   28aae:	18fb      	adds	r3, r7, r3
   28ab0:	2200      	movs	r2, #0
   28ab2:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   28ab4:	2378      	movs	r3, #120	; 0x78
   28ab6:	18fb      	adds	r3, r7, r3
   28ab8:	2202      	movs	r2, #2
   28aba:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   28abc:	2378      	movs	r3, #120	; 0x78
   28abe:	18fb      	adds	r3, r7, r3
   28ac0:	4a35      	ldr	r2, [pc, #212]	; (28b98 <system_clock_init+0x288>)
   28ac2:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   28ac4:	2378      	movs	r3, #120	; 0x78
   28ac6:	18fb      	adds	r3, r7, r3
   28ac8:	2201      	movs	r2, #1
   28aca:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   28acc:	2378      	movs	r3, #120	; 0x78
   28ace:	18fb      	adds	r3, r7, r3
   28ad0:	4a32      	ldr	r2, [pc, #200]	; (28b9c <system_clock_init+0x28c>)
   28ad2:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   28ad4:	2378      	movs	r3, #120	; 0x78
   28ad6:	18fb      	adds	r3, r7, r3
   28ad8:	0018      	movs	r0, r3
   28ada:	4b31      	ldr	r3, [pc, #196]	; (28ba0 <system_clock_init+0x290>)
   28adc:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   28ade:	2008      	movs	r0, #8
   28ae0:	4b24      	ldr	r3, [pc, #144]	; (28b74 <system_clock_init+0x264>)
   28ae2:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   28ae4:	46c0      	nop			; (mov r8, r8)
   28ae6:	2008      	movs	r0, #8
   28ae8:	4b2e      	ldr	r3, [pc, #184]	; (28ba4 <system_clock_init+0x294>)
   28aea:	4798      	blx	r3
   28aec:	0003      	movs	r3, r0
   28aee:	001a      	movs	r2, r3
   28af0:	2301      	movs	r3, #1
   28af2:	4053      	eors	r3, r2
   28af4:	b2db      	uxtb	r3, r3
   28af6:	2b00      	cmp	r3, #0
   28af8:	d1f5      	bne.n	28ae6 <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   28afa:	4919      	ldr	r1, [pc, #100]	; (28b60 <system_clock_init+0x250>)
   28afc:	2244      	movs	r2, #68	; 0x44
   28afe:	5c8b      	ldrb	r3, [r1, r2]
   28b00:	2080      	movs	r0, #128	; 0x80
   28b02:	4240      	negs	r0, r0
   28b04:	4303      	orrs	r3, r0
   28b06:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   28b08:	2000      	movs	r0, #0
   28b0a:	4b27      	ldr	r3, [pc, #156]	; (28ba8 <system_clock_init+0x298>)
   28b0c:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   28b0e:	2100      	movs	r1, #0
   28b10:	2000      	movs	r0, #0
   28b12:	4b26      	ldr	r3, [pc, #152]	; (28bac <system_clock_init+0x29c>)
   28b14:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   28b16:	2100      	movs	r1, #0
   28b18:	2001      	movs	r0, #1
   28b1a:	4b24      	ldr	r3, [pc, #144]	; (28bac <system_clock_init+0x29c>)
   28b1c:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   28b1e:	2100      	movs	r1, #0
   28b20:	2002      	movs	r0, #2
   28b22:	4b22      	ldr	r3, [pc, #136]	; (28bac <system_clock_init+0x29c>)
   28b24:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   28b26:	003b      	movs	r3, r7
   28b28:	0018      	movs	r0, r3
   28b2a:	4b14      	ldr	r3, [pc, #80]	; (28b7c <system_clock_init+0x26c>)
   28b2c:	4798      	blx	r3
   28b2e:	003b      	movs	r3, r7
   28b30:	2208      	movs	r2, #8
   28b32:	701a      	strb	r2, [r3, #0]
   28b34:	003b      	movs	r3, r7
   28b36:	2201      	movs	r2, #1
   28b38:	605a      	str	r2, [r3, #4]
   28b3a:	003b      	movs	r3, r7
   28b3c:	2200      	movs	r2, #0
   28b3e:	721a      	strb	r2, [r3, #8]
   28b40:	003b      	movs	r3, r7
   28b42:	2201      	movs	r2, #1
   28b44:	725a      	strb	r2, [r3, #9]
   28b46:	003b      	movs	r3, r7
   28b48:	0019      	movs	r1, r3
   28b4a:	2000      	movs	r0, #0
   28b4c:	4b0c      	ldr	r3, [pc, #48]	; (28b80 <system_clock_init+0x270>)
   28b4e:	4798      	blx	r3
   28b50:	2000      	movs	r0, #0
   28b52:	4b0c      	ldr	r3, [pc, #48]	; (28b84 <system_clock_init+0x274>)
   28b54:	4798      	blx	r3
#endif
}
   28b56:	46c0      	nop			; (mov r8, r8)
   28b58:	46bd      	mov	sp, r7
   28b5a:	b026      	add	sp, #152	; 0x98
   28b5c:	bd80      	pop	{r7, pc}
   28b5e:	46c0      	nop			; (mov r8, r8)
   28b60:	40000800 	.word	0x40000800
   28b64:	000284d1 	.word	0x000284d1
   28b68:	000288d9 	.word	0x000288d9
   28b6c:	000283e1 	.word	0x000283e1
   28b70:	00028625 	.word	0x00028625
   28b74:	000287a9 	.word	0x000287a9
   28b78:	00028c55 	.word	0x00028c55
   28b7c:	0002839d 	.word	0x0002839d
   28b80:	00028c85 	.word	0x00028c85
   28b84:	00028da9 	.word	0x00028da9
   28b88:	000283cb 	.word	0x000283cb
   28b8c:	00028edd 	.word	0x00028edd
   28b90:	00028f21 	.word	0x00028f21
   28b94:	00028479 	.word	0x00028479
   28b98:	000f4240 	.word	0x000f4240
   28b9c:	02dc6c00 	.word	0x02dc6c00
   28ba0:	0002869d 	.word	0x0002869d
   28ba4:	00028855 	.word	0x00028855
   28ba8:	00028405 	.word	0x00028405
   28bac:	00028425 	.word	0x00028425

00028bb0 <system_apb_clock_set_mask>:
{
   28bb0:	b580      	push	{r7, lr}
   28bb2:	b082      	sub	sp, #8
   28bb4:	af00      	add	r7, sp, #0
   28bb6:	0002      	movs	r2, r0
   28bb8:	6039      	str	r1, [r7, #0]
   28bba:	1dfb      	adds	r3, r7, #7
   28bbc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   28bbe:	1dfb      	adds	r3, r7, #7
   28bc0:	781b      	ldrb	r3, [r3, #0]
   28bc2:	2b01      	cmp	r3, #1
   28bc4:	d00a      	beq.n	28bdc <system_apb_clock_set_mask+0x2c>
   28bc6:	2b02      	cmp	r3, #2
   28bc8:	d00f      	beq.n	28bea <system_apb_clock_set_mask+0x3a>
   28bca:	2b00      	cmp	r3, #0
   28bcc:	d114      	bne.n	28bf8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   28bce:	4b0e      	ldr	r3, [pc, #56]	; (28c08 <system_apb_clock_set_mask+0x58>)
   28bd0:	4a0d      	ldr	r2, [pc, #52]	; (28c08 <system_apb_clock_set_mask+0x58>)
   28bd2:	6991      	ldr	r1, [r2, #24]
   28bd4:	683a      	ldr	r2, [r7, #0]
   28bd6:	430a      	orrs	r2, r1
   28bd8:	619a      	str	r2, [r3, #24]
			break;
   28bda:	e00f      	b.n	28bfc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   28bdc:	4b0a      	ldr	r3, [pc, #40]	; (28c08 <system_apb_clock_set_mask+0x58>)
   28bde:	4a0a      	ldr	r2, [pc, #40]	; (28c08 <system_apb_clock_set_mask+0x58>)
   28be0:	69d1      	ldr	r1, [r2, #28]
   28be2:	683a      	ldr	r2, [r7, #0]
   28be4:	430a      	orrs	r2, r1
   28be6:	61da      	str	r2, [r3, #28]
			break;
   28be8:	e008      	b.n	28bfc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   28bea:	4b07      	ldr	r3, [pc, #28]	; (28c08 <system_apb_clock_set_mask+0x58>)
   28bec:	4a06      	ldr	r2, [pc, #24]	; (28c08 <system_apb_clock_set_mask+0x58>)
   28bee:	6a11      	ldr	r1, [r2, #32]
   28bf0:	683a      	ldr	r2, [r7, #0]
   28bf2:	430a      	orrs	r2, r1
   28bf4:	621a      	str	r2, [r3, #32]
			break;
   28bf6:	e001      	b.n	28bfc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   28bf8:	2317      	movs	r3, #23
   28bfa:	e000      	b.n	28bfe <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   28bfc:	2300      	movs	r3, #0
}
   28bfe:	0018      	movs	r0, r3
   28c00:	46bd      	mov	sp, r7
   28c02:	b002      	add	sp, #8
   28c04:	bd80      	pop	{r7, pc}
   28c06:	46c0      	nop			; (mov r8, r8)
   28c08:	40000400 	.word	0x40000400

00028c0c <system_interrupt_enter_critical_section>:
{
   28c0c:	b580      	push	{r7, lr}
   28c0e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   28c10:	4b02      	ldr	r3, [pc, #8]	; (28c1c <system_interrupt_enter_critical_section+0x10>)
   28c12:	4798      	blx	r3
}
   28c14:	46c0      	nop			; (mov r8, r8)
   28c16:	46bd      	mov	sp, r7
   28c18:	bd80      	pop	{r7, pc}
   28c1a:	46c0      	nop			; (mov r8, r8)
   28c1c:	00025249 	.word	0x00025249

00028c20 <system_interrupt_leave_critical_section>:
{
   28c20:	b580      	push	{r7, lr}
   28c22:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   28c24:	4b02      	ldr	r3, [pc, #8]	; (28c30 <system_interrupt_leave_critical_section+0x10>)
   28c26:	4798      	blx	r3
}
   28c28:	46c0      	nop			; (mov r8, r8)
   28c2a:	46bd      	mov	sp, r7
   28c2c:	bd80      	pop	{r7, pc}
   28c2e:	46c0      	nop			; (mov r8, r8)
   28c30:	0002529d 	.word	0x0002529d

00028c34 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   28c34:	b580      	push	{r7, lr}
   28c36:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   28c38:	4b05      	ldr	r3, [pc, #20]	; (28c50 <system_gclk_is_syncing+0x1c>)
   28c3a:	785b      	ldrb	r3, [r3, #1]
   28c3c:	b2db      	uxtb	r3, r3
   28c3e:	b25b      	sxtb	r3, r3
   28c40:	2b00      	cmp	r3, #0
   28c42:	da01      	bge.n	28c48 <system_gclk_is_syncing+0x14>
		return true;
   28c44:	2301      	movs	r3, #1
   28c46:	e000      	b.n	28c4a <system_gclk_is_syncing+0x16>
	}

	return false;
   28c48:	2300      	movs	r3, #0
}
   28c4a:	0018      	movs	r0, r3
   28c4c:	46bd      	mov	sp, r7
   28c4e:	bd80      	pop	{r7, pc}
   28c50:	40000c00 	.word	0x40000c00

00028c54 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   28c54:	b580      	push	{r7, lr}
   28c56:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   28c58:	2108      	movs	r1, #8
   28c5a:	2000      	movs	r0, #0
   28c5c:	4b07      	ldr	r3, [pc, #28]	; (28c7c <system_gclk_init+0x28>)
   28c5e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   28c60:	4b07      	ldr	r3, [pc, #28]	; (28c80 <system_gclk_init+0x2c>)
   28c62:	2201      	movs	r2, #1
   28c64:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   28c66:	46c0      	nop			; (mov r8, r8)
   28c68:	4b05      	ldr	r3, [pc, #20]	; (28c80 <system_gclk_init+0x2c>)
   28c6a:	781b      	ldrb	r3, [r3, #0]
   28c6c:	b2db      	uxtb	r3, r3
   28c6e:	001a      	movs	r2, r3
   28c70:	2301      	movs	r3, #1
   28c72:	4013      	ands	r3, r2
   28c74:	d1f8      	bne.n	28c68 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   28c76:	46c0      	nop			; (mov r8, r8)
   28c78:	46bd      	mov	sp, r7
   28c7a:	bd80      	pop	{r7, pc}
   28c7c:	00028bb1 	.word	0x00028bb1
   28c80:	40000c00 	.word	0x40000c00

00028c84 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   28c84:	b580      	push	{r7, lr}
   28c86:	b086      	sub	sp, #24
   28c88:	af00      	add	r7, sp, #0
   28c8a:	0002      	movs	r2, r0
   28c8c:	6039      	str	r1, [r7, #0]
   28c8e:	1dfb      	adds	r3, r7, #7
   28c90:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   28c92:	1dfb      	adds	r3, r7, #7
   28c94:	781b      	ldrb	r3, [r3, #0]
   28c96:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   28c98:	1dfb      	adds	r3, r7, #7
   28c9a:	781b      	ldrb	r3, [r3, #0]
   28c9c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   28c9e:	683b      	ldr	r3, [r7, #0]
   28ca0:	781b      	ldrb	r3, [r3, #0]
   28ca2:	021b      	lsls	r3, r3, #8
   28ca4:	001a      	movs	r2, r3
   28ca6:	697b      	ldr	r3, [r7, #20]
   28ca8:	4313      	orrs	r3, r2
   28caa:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   28cac:	683b      	ldr	r3, [r7, #0]
   28cae:	785b      	ldrb	r3, [r3, #1]
   28cb0:	2b00      	cmp	r3, #0
   28cb2:	d004      	beq.n	28cbe <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   28cb4:	697b      	ldr	r3, [r7, #20]
   28cb6:	2280      	movs	r2, #128	; 0x80
   28cb8:	02d2      	lsls	r2, r2, #11
   28cba:	4313      	orrs	r3, r2
   28cbc:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   28cbe:	683b      	ldr	r3, [r7, #0]
   28cc0:	7a5b      	ldrb	r3, [r3, #9]
   28cc2:	2b00      	cmp	r3, #0
   28cc4:	d004      	beq.n	28cd0 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   28cc6:	697b      	ldr	r3, [r7, #20]
   28cc8:	2280      	movs	r2, #128	; 0x80
   28cca:	0312      	lsls	r2, r2, #12
   28ccc:	4313      	orrs	r3, r2
   28cce:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   28cd0:	683b      	ldr	r3, [r7, #0]
   28cd2:	685b      	ldr	r3, [r3, #4]
   28cd4:	2b01      	cmp	r3, #1
   28cd6:	d92c      	bls.n	28d32 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   28cd8:	683b      	ldr	r3, [r7, #0]
   28cda:	685a      	ldr	r2, [r3, #4]
   28cdc:	683b      	ldr	r3, [r7, #0]
   28cde:	685b      	ldr	r3, [r3, #4]
   28ce0:	3b01      	subs	r3, #1
   28ce2:	4013      	ands	r3, r2
   28ce4:	d11a      	bne.n	28d1c <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   28ce6:	2300      	movs	r3, #0
   28ce8:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   28cea:	2302      	movs	r3, #2
   28cec:	60bb      	str	r3, [r7, #8]
   28cee:	e005      	b.n	28cfc <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   28cf0:	68fb      	ldr	r3, [r7, #12]
   28cf2:	3301      	adds	r3, #1
   28cf4:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   28cf6:	68bb      	ldr	r3, [r7, #8]
   28cf8:	005b      	lsls	r3, r3, #1
   28cfa:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   28cfc:	683b      	ldr	r3, [r7, #0]
   28cfe:	685a      	ldr	r2, [r3, #4]
   28d00:	68bb      	ldr	r3, [r7, #8]
   28d02:	429a      	cmp	r2, r3
   28d04:	d8f4      	bhi.n	28cf0 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   28d06:	68fb      	ldr	r3, [r7, #12]
   28d08:	021b      	lsls	r3, r3, #8
   28d0a:	693a      	ldr	r2, [r7, #16]
   28d0c:	4313      	orrs	r3, r2
   28d0e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   28d10:	697b      	ldr	r3, [r7, #20]
   28d12:	2280      	movs	r2, #128	; 0x80
   28d14:	0352      	lsls	r2, r2, #13
   28d16:	4313      	orrs	r3, r2
   28d18:	617b      	str	r3, [r7, #20]
   28d1a:	e00a      	b.n	28d32 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   28d1c:	683b      	ldr	r3, [r7, #0]
   28d1e:	685b      	ldr	r3, [r3, #4]
   28d20:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   28d22:	693a      	ldr	r2, [r7, #16]
   28d24:	4313      	orrs	r3, r2
   28d26:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   28d28:	697b      	ldr	r3, [r7, #20]
   28d2a:	2280      	movs	r2, #128	; 0x80
   28d2c:	0292      	lsls	r2, r2, #10
   28d2e:	4313      	orrs	r3, r2
   28d30:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   28d32:	683b      	ldr	r3, [r7, #0]
   28d34:	7a1b      	ldrb	r3, [r3, #8]
   28d36:	2b00      	cmp	r3, #0
   28d38:	d004      	beq.n	28d44 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   28d3a:	697b      	ldr	r3, [r7, #20]
   28d3c:	2280      	movs	r2, #128	; 0x80
   28d3e:	0392      	lsls	r2, r2, #14
   28d40:	4313      	orrs	r3, r2
   28d42:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   28d44:	46c0      	nop			; (mov r8, r8)
   28d46:	4b13      	ldr	r3, [pc, #76]	; (28d94 <system_gclk_gen_set_config+0x110>)
   28d48:	4798      	blx	r3
   28d4a:	1e03      	subs	r3, r0, #0
   28d4c:	d1fb      	bne.n	28d46 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   28d4e:	4b12      	ldr	r3, [pc, #72]	; (28d98 <system_gclk_gen_set_config+0x114>)
   28d50:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   28d52:	4a12      	ldr	r2, [pc, #72]	; (28d9c <system_gclk_gen_set_config+0x118>)
   28d54:	1dfb      	adds	r3, r7, #7
   28d56:	781b      	ldrb	r3, [r3, #0]
   28d58:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   28d5a:	46c0      	nop			; (mov r8, r8)
   28d5c:	4b0d      	ldr	r3, [pc, #52]	; (28d94 <system_gclk_gen_set_config+0x110>)
   28d5e:	4798      	blx	r3
   28d60:	1e03      	subs	r3, r0, #0
   28d62:	d1fb      	bne.n	28d5c <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   28d64:	4b0e      	ldr	r3, [pc, #56]	; (28da0 <system_gclk_gen_set_config+0x11c>)
   28d66:	693a      	ldr	r2, [r7, #16]
   28d68:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   28d6a:	46c0      	nop			; (mov r8, r8)
   28d6c:	4b09      	ldr	r3, [pc, #36]	; (28d94 <system_gclk_gen_set_config+0x110>)
   28d6e:	4798      	blx	r3
   28d70:	1e03      	subs	r3, r0, #0
   28d72:	d1fb      	bne.n	28d6c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   28d74:	4b0a      	ldr	r3, [pc, #40]	; (28da0 <system_gclk_gen_set_config+0x11c>)
   28d76:	4a0a      	ldr	r2, [pc, #40]	; (28da0 <system_gclk_gen_set_config+0x11c>)
   28d78:	6851      	ldr	r1, [r2, #4]
   28d7a:	2280      	movs	r2, #128	; 0x80
   28d7c:	0252      	lsls	r2, r2, #9
   28d7e:	4011      	ands	r1, r2
   28d80:	697a      	ldr	r2, [r7, #20]
   28d82:	430a      	orrs	r2, r1
   28d84:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   28d86:	4b07      	ldr	r3, [pc, #28]	; (28da4 <system_gclk_gen_set_config+0x120>)
   28d88:	4798      	blx	r3
}
   28d8a:	46c0      	nop			; (mov r8, r8)
   28d8c:	46bd      	mov	sp, r7
   28d8e:	b006      	add	sp, #24
   28d90:	bd80      	pop	{r7, pc}
   28d92:	46c0      	nop			; (mov r8, r8)
   28d94:	00028c35 	.word	0x00028c35
   28d98:	00028c0d 	.word	0x00028c0d
   28d9c:	40000c08 	.word	0x40000c08
   28da0:	40000c00 	.word	0x40000c00
   28da4:	00028c21 	.word	0x00028c21

00028da8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   28da8:	b580      	push	{r7, lr}
   28daa:	b082      	sub	sp, #8
   28dac:	af00      	add	r7, sp, #0
   28dae:	0002      	movs	r2, r0
   28db0:	1dfb      	adds	r3, r7, #7
   28db2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   28db4:	46c0      	nop			; (mov r8, r8)
   28db6:	4b0e      	ldr	r3, [pc, #56]	; (28df0 <system_gclk_gen_enable+0x48>)
   28db8:	4798      	blx	r3
   28dba:	1e03      	subs	r3, r0, #0
   28dbc:	d1fb      	bne.n	28db6 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   28dbe:	4b0d      	ldr	r3, [pc, #52]	; (28df4 <system_gclk_gen_enable+0x4c>)
   28dc0:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   28dc2:	4a0d      	ldr	r2, [pc, #52]	; (28df8 <system_gclk_gen_enable+0x50>)
   28dc4:	1dfb      	adds	r3, r7, #7
   28dc6:	781b      	ldrb	r3, [r3, #0]
   28dc8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   28dca:	46c0      	nop			; (mov r8, r8)
   28dcc:	4b08      	ldr	r3, [pc, #32]	; (28df0 <system_gclk_gen_enable+0x48>)
   28dce:	4798      	blx	r3
   28dd0:	1e03      	subs	r3, r0, #0
   28dd2:	d1fb      	bne.n	28dcc <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   28dd4:	4b09      	ldr	r3, [pc, #36]	; (28dfc <system_gclk_gen_enable+0x54>)
   28dd6:	4a09      	ldr	r2, [pc, #36]	; (28dfc <system_gclk_gen_enable+0x54>)
   28dd8:	6852      	ldr	r2, [r2, #4]
   28dda:	2180      	movs	r1, #128	; 0x80
   28ddc:	0249      	lsls	r1, r1, #9
   28dde:	430a      	orrs	r2, r1
   28de0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   28de2:	4b07      	ldr	r3, [pc, #28]	; (28e00 <system_gclk_gen_enable+0x58>)
   28de4:	4798      	blx	r3
}
   28de6:	46c0      	nop			; (mov r8, r8)
   28de8:	46bd      	mov	sp, r7
   28dea:	b002      	add	sp, #8
   28dec:	bd80      	pop	{r7, pc}
   28dee:	46c0      	nop			; (mov r8, r8)
   28df0:	00028c35 	.word	0x00028c35
   28df4:	00028c0d 	.word	0x00028c0d
   28df8:	40000c04 	.word	0x40000c04
   28dfc:	40000c00 	.word	0x40000c00
   28e00:	00028c21 	.word	0x00028c21

00028e04 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   28e04:	b580      	push	{r7, lr}
   28e06:	b086      	sub	sp, #24
   28e08:	af00      	add	r7, sp, #0
   28e0a:	0002      	movs	r2, r0
   28e0c:	1dfb      	adds	r3, r7, #7
   28e0e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   28e10:	46c0      	nop			; (mov r8, r8)
   28e12:	4b2a      	ldr	r3, [pc, #168]	; (28ebc <system_gclk_gen_get_hz+0xb8>)
   28e14:	4798      	blx	r3
   28e16:	1e03      	subs	r3, r0, #0
   28e18:	d1fb      	bne.n	28e12 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   28e1a:	4b29      	ldr	r3, [pc, #164]	; (28ec0 <system_gclk_gen_get_hz+0xbc>)
   28e1c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   28e1e:	4a29      	ldr	r2, [pc, #164]	; (28ec4 <system_gclk_gen_get_hz+0xc0>)
   28e20:	1dfb      	adds	r3, r7, #7
   28e22:	781b      	ldrb	r3, [r3, #0]
   28e24:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   28e26:	46c0      	nop			; (mov r8, r8)
   28e28:	4b24      	ldr	r3, [pc, #144]	; (28ebc <system_gclk_gen_get_hz+0xb8>)
   28e2a:	4798      	blx	r3
   28e2c:	1e03      	subs	r3, r0, #0
   28e2e:	d1fb      	bne.n	28e28 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   28e30:	4b25      	ldr	r3, [pc, #148]	; (28ec8 <system_gclk_gen_get_hz+0xc4>)
   28e32:	685b      	ldr	r3, [r3, #4]
   28e34:	04db      	lsls	r3, r3, #19
   28e36:	0edb      	lsrs	r3, r3, #27
   28e38:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   28e3a:	0018      	movs	r0, r3
   28e3c:	4b23      	ldr	r3, [pc, #140]	; (28ecc <system_gclk_gen_get_hz+0xc8>)
   28e3e:	4798      	blx	r3
   28e40:	0003      	movs	r3, r0
   28e42:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   28e44:	4a1f      	ldr	r2, [pc, #124]	; (28ec4 <system_gclk_gen_get_hz+0xc0>)
   28e46:	1dfb      	adds	r3, r7, #7
   28e48:	781b      	ldrb	r3, [r3, #0]
   28e4a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   28e4c:	4b1e      	ldr	r3, [pc, #120]	; (28ec8 <system_gclk_gen_get_hz+0xc4>)
   28e4e:	685b      	ldr	r3, [r3, #4]
   28e50:	02db      	lsls	r3, r3, #11
   28e52:	0fdb      	lsrs	r3, r3, #31
   28e54:	b2da      	uxtb	r2, r3
   28e56:	2313      	movs	r3, #19
   28e58:	18fb      	adds	r3, r7, r3
   28e5a:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   28e5c:	4a1c      	ldr	r2, [pc, #112]	; (28ed0 <system_gclk_gen_get_hz+0xcc>)
   28e5e:	1dfb      	adds	r3, r7, #7
   28e60:	781b      	ldrb	r3, [r3, #0]
   28e62:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   28e64:	46c0      	nop			; (mov r8, r8)
   28e66:	4b15      	ldr	r3, [pc, #84]	; (28ebc <system_gclk_gen_get_hz+0xb8>)
   28e68:	4798      	blx	r3
   28e6a:	1e03      	subs	r3, r0, #0
   28e6c:	d1fb      	bne.n	28e66 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   28e6e:	4b16      	ldr	r3, [pc, #88]	; (28ec8 <system_gclk_gen_get_hz+0xc4>)
   28e70:	689b      	ldr	r3, [r3, #8]
   28e72:	021b      	lsls	r3, r3, #8
   28e74:	0c1b      	lsrs	r3, r3, #16
   28e76:	b29b      	uxth	r3, r3
   28e78:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   28e7a:	4b16      	ldr	r3, [pc, #88]	; (28ed4 <system_gclk_gen_get_hz+0xd0>)
   28e7c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   28e7e:	2313      	movs	r3, #19
   28e80:	18fb      	adds	r3, r7, r3
   28e82:	781b      	ldrb	r3, [r3, #0]
   28e84:	2b00      	cmp	r3, #0
   28e86:	d109      	bne.n	28e9c <system_gclk_gen_get_hz+0x98>
   28e88:	68fb      	ldr	r3, [r7, #12]
   28e8a:	2b01      	cmp	r3, #1
   28e8c:	d906      	bls.n	28e9c <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   28e8e:	4b12      	ldr	r3, [pc, #72]	; (28ed8 <system_gclk_gen_get_hz+0xd4>)
   28e90:	68f9      	ldr	r1, [r7, #12]
   28e92:	6978      	ldr	r0, [r7, #20]
   28e94:	4798      	blx	r3
   28e96:	0003      	movs	r3, r0
   28e98:	617b      	str	r3, [r7, #20]
   28e9a:	e00a      	b.n	28eb2 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   28e9c:	2313      	movs	r3, #19
   28e9e:	18fb      	adds	r3, r7, r3
   28ea0:	781b      	ldrb	r3, [r3, #0]
   28ea2:	2b00      	cmp	r3, #0
   28ea4:	d005      	beq.n	28eb2 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   28ea6:	68fb      	ldr	r3, [r7, #12]
   28ea8:	3301      	adds	r3, #1
   28eaa:	697a      	ldr	r2, [r7, #20]
   28eac:	40da      	lsrs	r2, r3
   28eae:	0013      	movs	r3, r2
   28eb0:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   28eb2:	697b      	ldr	r3, [r7, #20]
}
   28eb4:	0018      	movs	r0, r3
   28eb6:	46bd      	mov	sp, r7
   28eb8:	b006      	add	sp, #24
   28eba:	bd80      	pop	{r7, pc}
   28ebc:	00028c35 	.word	0x00028c35
   28ec0:	00028c0d 	.word	0x00028c0d
   28ec4:	40000c04 	.word	0x40000c04
   28ec8:	40000c00 	.word	0x40000c00
   28ecc:	00028565 	.word	0x00028565
   28ed0:	40000c08 	.word	0x40000c08
   28ed4:	00028c21 	.word	0x00028c21
   28ed8:	00031ac5 	.word	0x00031ac5

00028edc <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   28edc:	b580      	push	{r7, lr}
   28ede:	b084      	sub	sp, #16
   28ee0:	af00      	add	r7, sp, #0
   28ee2:	0002      	movs	r2, r0
   28ee4:	6039      	str	r1, [r7, #0]
   28ee6:	1dfb      	adds	r3, r7, #7
   28ee8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   28eea:	1dfb      	adds	r3, r7, #7
   28eec:	781b      	ldrb	r3, [r3, #0]
   28eee:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   28ef0:	683b      	ldr	r3, [r7, #0]
   28ef2:	781b      	ldrb	r3, [r3, #0]
   28ef4:	021b      	lsls	r3, r3, #8
   28ef6:	001a      	movs	r2, r3
   28ef8:	68fb      	ldr	r3, [r7, #12]
   28efa:	4313      	orrs	r3, r2
   28efc:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   28efe:	1dfb      	adds	r3, r7, #7
   28f00:	781b      	ldrb	r3, [r3, #0]
   28f02:	0018      	movs	r0, r3
   28f04:	4b04      	ldr	r3, [pc, #16]	; (28f18 <system_gclk_chan_set_config+0x3c>)
   28f06:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   28f08:	4b04      	ldr	r3, [pc, #16]	; (28f1c <system_gclk_chan_set_config+0x40>)
   28f0a:	68fa      	ldr	r2, [r7, #12]
   28f0c:	b292      	uxth	r2, r2
   28f0e:	805a      	strh	r2, [r3, #2]
}
   28f10:	46c0      	nop			; (mov r8, r8)
   28f12:	46bd      	mov	sp, r7
   28f14:	b004      	add	sp, #16
   28f16:	bd80      	pop	{r7, pc}
   28f18:	00028f69 	.word	0x00028f69
   28f1c:	40000c00 	.word	0x40000c00

00028f20 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   28f20:	b580      	push	{r7, lr}
   28f22:	b082      	sub	sp, #8
   28f24:	af00      	add	r7, sp, #0
   28f26:	0002      	movs	r2, r0
   28f28:	1dfb      	adds	r3, r7, #7
   28f2a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   28f2c:	4b0a      	ldr	r3, [pc, #40]	; (28f58 <system_gclk_chan_enable+0x38>)
   28f2e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   28f30:	4a0a      	ldr	r2, [pc, #40]	; (28f5c <system_gclk_chan_enable+0x3c>)
   28f32:	1dfb      	adds	r3, r7, #7
   28f34:	781b      	ldrb	r3, [r3, #0]
   28f36:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   28f38:	4909      	ldr	r1, [pc, #36]	; (28f60 <system_gclk_chan_enable+0x40>)
   28f3a:	4b09      	ldr	r3, [pc, #36]	; (28f60 <system_gclk_chan_enable+0x40>)
   28f3c:	885b      	ldrh	r3, [r3, #2]
   28f3e:	b29b      	uxth	r3, r3
   28f40:	2280      	movs	r2, #128	; 0x80
   28f42:	01d2      	lsls	r2, r2, #7
   28f44:	4313      	orrs	r3, r2
   28f46:	b29b      	uxth	r3, r3
   28f48:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   28f4a:	4b06      	ldr	r3, [pc, #24]	; (28f64 <system_gclk_chan_enable+0x44>)
   28f4c:	4798      	blx	r3
}
   28f4e:	46c0      	nop			; (mov r8, r8)
   28f50:	46bd      	mov	sp, r7
   28f52:	b002      	add	sp, #8
   28f54:	bd80      	pop	{r7, pc}
   28f56:	46c0      	nop			; (mov r8, r8)
   28f58:	00028c0d 	.word	0x00028c0d
   28f5c:	40000c02 	.word	0x40000c02
   28f60:	40000c00 	.word	0x40000c00
   28f64:	00028c21 	.word	0x00028c21

00028f68 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   28f68:	b580      	push	{r7, lr}
   28f6a:	b084      	sub	sp, #16
   28f6c:	af00      	add	r7, sp, #0
   28f6e:	0002      	movs	r2, r0
   28f70:	1dfb      	adds	r3, r7, #7
   28f72:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   28f74:	4b1c      	ldr	r3, [pc, #112]	; (28fe8 <system_gclk_chan_disable+0x80>)
   28f76:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   28f78:	4a1c      	ldr	r2, [pc, #112]	; (28fec <system_gclk_chan_disable+0x84>)
   28f7a:	1dfb      	adds	r3, r7, #7
   28f7c:	781b      	ldrb	r3, [r3, #0]
   28f7e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   28f80:	4b1b      	ldr	r3, [pc, #108]	; (28ff0 <system_gclk_chan_disable+0x88>)
   28f82:	885b      	ldrh	r3, [r3, #2]
   28f84:	051b      	lsls	r3, r3, #20
   28f86:	0f1b      	lsrs	r3, r3, #28
   28f88:	b2db      	uxtb	r3, r3
   28f8a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   28f8c:	4a18      	ldr	r2, [pc, #96]	; (28ff0 <system_gclk_chan_disable+0x88>)
   28f8e:	8853      	ldrh	r3, [r2, #2]
   28f90:	4918      	ldr	r1, [pc, #96]	; (28ff4 <system_gclk_chan_disable+0x8c>)
   28f92:	400b      	ands	r3, r1
   28f94:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   28f96:	4a16      	ldr	r2, [pc, #88]	; (28ff0 <system_gclk_chan_disable+0x88>)
   28f98:	4b15      	ldr	r3, [pc, #84]	; (28ff0 <system_gclk_chan_disable+0x88>)
   28f9a:	885b      	ldrh	r3, [r3, #2]
   28f9c:	b29b      	uxth	r3, r3
   28f9e:	4916      	ldr	r1, [pc, #88]	; (28ff8 <system_gclk_chan_disable+0x90>)
   28fa0:	400b      	ands	r3, r1
   28fa2:	b29b      	uxth	r3, r3
   28fa4:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   28fa6:	46c0      	nop			; (mov r8, r8)
   28fa8:	4b11      	ldr	r3, [pc, #68]	; (28ff0 <system_gclk_chan_disable+0x88>)
   28faa:	885b      	ldrh	r3, [r3, #2]
   28fac:	b29b      	uxth	r3, r3
   28fae:	001a      	movs	r2, r3
   28fb0:	2380      	movs	r3, #128	; 0x80
   28fb2:	01db      	lsls	r3, r3, #7
   28fb4:	4013      	ands	r3, r2
   28fb6:	d1f7      	bne.n	28fa8 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   28fb8:	4a0d      	ldr	r2, [pc, #52]	; (28ff0 <system_gclk_chan_disable+0x88>)
   28fba:	68fb      	ldr	r3, [r7, #12]
   28fbc:	b2db      	uxtb	r3, r3
   28fbe:	1c19      	adds	r1, r3, #0
   28fc0:	230f      	movs	r3, #15
   28fc2:	400b      	ands	r3, r1
   28fc4:	b2d9      	uxtb	r1, r3
   28fc6:	8853      	ldrh	r3, [r2, #2]
   28fc8:	1c08      	adds	r0, r1, #0
   28fca:	210f      	movs	r1, #15
   28fcc:	4001      	ands	r1, r0
   28fce:	0208      	lsls	r0, r1, #8
   28fd0:	4908      	ldr	r1, [pc, #32]	; (28ff4 <system_gclk_chan_disable+0x8c>)
   28fd2:	400b      	ands	r3, r1
   28fd4:	1c19      	adds	r1, r3, #0
   28fd6:	1c03      	adds	r3, r0, #0
   28fd8:	430b      	orrs	r3, r1
   28fda:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   28fdc:	4b07      	ldr	r3, [pc, #28]	; (28ffc <system_gclk_chan_disable+0x94>)
   28fde:	4798      	blx	r3
}
   28fe0:	46c0      	nop			; (mov r8, r8)
   28fe2:	46bd      	mov	sp, r7
   28fe4:	b004      	add	sp, #16
   28fe6:	bd80      	pop	{r7, pc}
   28fe8:	00028c0d 	.word	0x00028c0d
   28fec:	40000c02 	.word	0x40000c02
   28ff0:	40000c00 	.word	0x40000c00
   28ff4:	fffff0ff 	.word	0xfffff0ff
   28ff8:	ffffbfff 	.word	0xffffbfff
   28ffc:	00028c21 	.word	0x00028c21

00029000 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   29000:	b580      	push	{r7, lr}
   29002:	b084      	sub	sp, #16
   29004:	af00      	add	r7, sp, #0
   29006:	0002      	movs	r2, r0
   29008:	1dfb      	adds	r3, r7, #7
   2900a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   2900c:	4b0d      	ldr	r3, [pc, #52]	; (29044 <system_gclk_chan_get_hz+0x44>)
   2900e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   29010:	4a0d      	ldr	r2, [pc, #52]	; (29048 <system_gclk_chan_get_hz+0x48>)
   29012:	1dfb      	adds	r3, r7, #7
   29014:	781b      	ldrb	r3, [r3, #0]
   29016:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   29018:	4b0c      	ldr	r3, [pc, #48]	; (2904c <system_gclk_chan_get_hz+0x4c>)
   2901a:	885b      	ldrh	r3, [r3, #2]
   2901c:	051b      	lsls	r3, r3, #20
   2901e:	0f1b      	lsrs	r3, r3, #28
   29020:	b2da      	uxtb	r2, r3
   29022:	230f      	movs	r3, #15
   29024:	18fb      	adds	r3, r7, r3
   29026:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   29028:	4b09      	ldr	r3, [pc, #36]	; (29050 <system_gclk_chan_get_hz+0x50>)
   2902a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   2902c:	230f      	movs	r3, #15
   2902e:	18fb      	adds	r3, r7, r3
   29030:	781b      	ldrb	r3, [r3, #0]
   29032:	0018      	movs	r0, r3
   29034:	4b07      	ldr	r3, [pc, #28]	; (29054 <system_gclk_chan_get_hz+0x54>)
   29036:	4798      	blx	r3
   29038:	0003      	movs	r3, r0
}
   2903a:	0018      	movs	r0, r3
   2903c:	46bd      	mov	sp, r7
   2903e:	b004      	add	sp, #16
   29040:	bd80      	pop	{r7, pc}
   29042:	46c0      	nop			; (mov r8, r8)
   29044:	00028c0d 	.word	0x00028c0d
   29048:	40000c02 	.word	0x40000c02
   2904c:	40000c00 	.word	0x40000c00
   29050:	00028c21 	.word	0x00028c21
   29054:	00028e05 	.word	0x00028e05

00029058 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   29058:	b580      	push	{r7, lr}
   2905a:	b084      	sub	sp, #16
   2905c:	af00      	add	r7, sp, #0
   2905e:	0002      	movs	r2, r0
   29060:	1dfb      	adds	r3, r7, #7
   29062:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   29064:	230f      	movs	r3, #15
   29066:	18fb      	adds	r3, r7, r3
   29068:	2200      	movs	r2, #0
   2906a:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   2906c:	1dfb      	adds	r3, r7, #7
   2906e:	781b      	ldrb	r3, [r3, #0]
   29070:	2b7f      	cmp	r3, #127	; 0x7f
   29072:	d80b      	bhi.n	2908c <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   29074:	4a13      	ldr	r2, [pc, #76]	; (290c4 <system_interrupt_clear_pending+0x6c>)
   29076:	1dfb      	adds	r3, r7, #7
   29078:	781b      	ldrb	r3, [r3, #0]
   2907a:	b25b      	sxtb	r3, r3
   2907c:	2101      	movs	r1, #1
   2907e:	4099      	lsls	r1, r3
   29080:	000b      	movs	r3, r1
   29082:	0019      	movs	r1, r3
   29084:	23c0      	movs	r3, #192	; 0xc0
   29086:	005b      	lsls	r3, r3, #1
   29088:	50d1      	str	r1, [r2, r3]
   2908a:	e014      	b.n	290b6 <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   2908c:	1dfb      	adds	r3, r7, #7
   2908e:	781b      	ldrb	r3, [r3, #0]
   29090:	b25b      	sxtb	r3, r3
   29092:	330e      	adds	r3, #14
   29094:	d101      	bne.n	2909a <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   29096:	2317      	movs	r3, #23
   29098:	e010      	b.n	290bc <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   2909a:	1dfb      	adds	r3, r7, #7
   2909c:	781b      	ldrb	r3, [r3, #0]
   2909e:	b25b      	sxtb	r3, r3
   290a0:	3301      	adds	r3, #1
   290a2:	d104      	bne.n	290ae <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   290a4:	4b08      	ldr	r3, [pc, #32]	; (290c8 <system_interrupt_clear_pending+0x70>)
   290a6:	2280      	movs	r2, #128	; 0x80
   290a8:	0492      	lsls	r2, r2, #18
   290aa:	605a      	str	r2, [r3, #4]
   290ac:	e003      	b.n	290b6 <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   290ae:	230f      	movs	r3, #15
   290b0:	18fb      	adds	r3, r7, r3
   290b2:	2217      	movs	r2, #23
   290b4:	701a      	strb	r2, [r3, #0]
	}

	return status;
   290b6:	230f      	movs	r3, #15
   290b8:	18fb      	adds	r3, r7, r3
   290ba:	781b      	ldrb	r3, [r3, #0]
}
   290bc:	0018      	movs	r0, r3
   290be:	46bd      	mov	sp, r7
   290c0:	b004      	add	sp, #16
   290c2:	bd80      	pop	{r7, pc}
   290c4:	e000e100 	.word	0xe000e100
   290c8:	e000ed00 	.word	0xe000ed00

000290cc <system_pinmux_get_group_from_gpio_pin>:
{
   290cc:	b580      	push	{r7, lr}
   290ce:	b084      	sub	sp, #16
   290d0:	af00      	add	r7, sp, #0
   290d2:	0002      	movs	r2, r0
   290d4:	1dfb      	adds	r3, r7, #7
   290d6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   290d8:	230f      	movs	r3, #15
   290da:	18fb      	adds	r3, r7, r3
   290dc:	1dfa      	adds	r2, r7, #7
   290de:	7812      	ldrb	r2, [r2, #0]
   290e0:	09d2      	lsrs	r2, r2, #7
   290e2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   290e4:	230e      	movs	r3, #14
   290e6:	18fb      	adds	r3, r7, r3
   290e8:	1dfa      	adds	r2, r7, #7
   290ea:	7812      	ldrb	r2, [r2, #0]
   290ec:	0952      	lsrs	r2, r2, #5
   290ee:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   290f0:	4b0d      	ldr	r3, [pc, #52]	; (29128 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   290f2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   290f4:	230f      	movs	r3, #15
   290f6:	18fb      	adds	r3, r7, r3
   290f8:	781b      	ldrb	r3, [r3, #0]
   290fa:	2b00      	cmp	r3, #0
   290fc:	d10f      	bne.n	2911e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   290fe:	230f      	movs	r3, #15
   29100:	18fb      	adds	r3, r7, r3
   29102:	781b      	ldrb	r3, [r3, #0]
   29104:	009b      	lsls	r3, r3, #2
   29106:	2210      	movs	r2, #16
   29108:	4694      	mov	ip, r2
   2910a:	44bc      	add	ip, r7
   2910c:	4463      	add	r3, ip
   2910e:	3b08      	subs	r3, #8
   29110:	681a      	ldr	r2, [r3, #0]
   29112:	230e      	movs	r3, #14
   29114:	18fb      	adds	r3, r7, r3
   29116:	781b      	ldrb	r3, [r3, #0]
   29118:	01db      	lsls	r3, r3, #7
   2911a:	18d3      	adds	r3, r2, r3
   2911c:	e000      	b.n	29120 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2911e:	2300      	movs	r3, #0
}
   29120:	0018      	movs	r0, r3
   29122:	46bd      	mov	sp, r7
   29124:	b004      	add	sp, #16
   29126:	bd80      	pop	{r7, pc}
   29128:	41004400 	.word	0x41004400

0002912c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   2912c:	b580      	push	{r7, lr}
   2912e:	b088      	sub	sp, #32
   29130:	af00      	add	r7, sp, #0
   29132:	60f8      	str	r0, [r7, #12]
   29134:	60b9      	str	r1, [r7, #8]
   29136:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   29138:	2300      	movs	r3, #0
   2913a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   2913c:	687b      	ldr	r3, [r7, #4]
   2913e:	78db      	ldrb	r3, [r3, #3]
   29140:	2201      	movs	r2, #1
   29142:	4053      	eors	r3, r2
   29144:	b2db      	uxtb	r3, r3
   29146:	2b00      	cmp	r3, #0
   29148:	d035      	beq.n	291b6 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   2914a:	687b      	ldr	r3, [r7, #4]
   2914c:	781b      	ldrb	r3, [r3, #0]
   2914e:	2b80      	cmp	r3, #128	; 0x80
   29150:	d00b      	beq.n	2916a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   29152:	69fb      	ldr	r3, [r7, #28]
   29154:	2280      	movs	r2, #128	; 0x80
   29156:	0252      	lsls	r2, r2, #9
   29158:	4313      	orrs	r3, r2
   2915a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   2915c:	687b      	ldr	r3, [r7, #4]
   2915e:	781b      	ldrb	r3, [r3, #0]
   29160:	061b      	lsls	r3, r3, #24
   29162:	001a      	movs	r2, r3
   29164:	69fb      	ldr	r3, [r7, #28]
   29166:	4313      	orrs	r3, r2
   29168:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2916a:	687b      	ldr	r3, [r7, #4]
   2916c:	785b      	ldrb	r3, [r3, #1]
   2916e:	2b00      	cmp	r3, #0
   29170:	d003      	beq.n	2917a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   29172:	687b      	ldr	r3, [r7, #4]
   29174:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   29176:	2b02      	cmp	r3, #2
   29178:	d110      	bne.n	2919c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   2917a:	69fb      	ldr	r3, [r7, #28]
   2917c:	2280      	movs	r2, #128	; 0x80
   2917e:	0292      	lsls	r2, r2, #10
   29180:	4313      	orrs	r3, r2
   29182:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   29184:	687b      	ldr	r3, [r7, #4]
   29186:	789b      	ldrb	r3, [r3, #2]
   29188:	2b00      	cmp	r3, #0
   2918a:	d004      	beq.n	29196 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   2918c:	69fb      	ldr	r3, [r7, #28]
   2918e:	2280      	movs	r2, #128	; 0x80
   29190:	02d2      	lsls	r2, r2, #11
   29192:	4313      	orrs	r3, r2
   29194:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   29196:	68fb      	ldr	r3, [r7, #12]
   29198:	68ba      	ldr	r2, [r7, #8]
   2919a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2919c:	687b      	ldr	r3, [r7, #4]
   2919e:	785b      	ldrb	r3, [r3, #1]
   291a0:	2b01      	cmp	r3, #1
   291a2:	d003      	beq.n	291ac <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   291a4:	687b      	ldr	r3, [r7, #4]
   291a6:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   291a8:	2b02      	cmp	r3, #2
   291aa:	d107      	bne.n	291bc <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   291ac:	69fb      	ldr	r3, [r7, #28]
   291ae:	4a22      	ldr	r2, [pc, #136]	; (29238 <_system_pinmux_config+0x10c>)
   291b0:	4013      	ands	r3, r2
   291b2:	61fb      	str	r3, [r7, #28]
   291b4:	e002      	b.n	291bc <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   291b6:	68fb      	ldr	r3, [r7, #12]
   291b8:	68ba      	ldr	r2, [r7, #8]
   291ba:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   291bc:	68bb      	ldr	r3, [r7, #8]
   291be:	041b      	lsls	r3, r3, #16
   291c0:	0c1b      	lsrs	r3, r3, #16
   291c2:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   291c4:	68bb      	ldr	r3, [r7, #8]
   291c6:	0c1b      	lsrs	r3, r3, #16
   291c8:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   291ca:	69ba      	ldr	r2, [r7, #24]
   291cc:	69fb      	ldr	r3, [r7, #28]
   291ce:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   291d0:	22a0      	movs	r2, #160	; 0xa0
   291d2:	05d2      	lsls	r2, r2, #23
   291d4:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   291d6:	68fb      	ldr	r3, [r7, #12]
   291d8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   291da:	697a      	ldr	r2, [r7, #20]
   291dc:	69fb      	ldr	r3, [r7, #28]
   291de:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   291e0:	22d0      	movs	r2, #208	; 0xd0
   291e2:	0612      	lsls	r2, r2, #24
   291e4:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   291e6:	68fb      	ldr	r3, [r7, #12]
   291e8:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   291ea:	687b      	ldr	r3, [r7, #4]
   291ec:	78db      	ldrb	r3, [r3, #3]
   291ee:	2201      	movs	r2, #1
   291f0:	4053      	eors	r3, r2
   291f2:	b2db      	uxtb	r3, r3
   291f4:	2b00      	cmp	r3, #0
   291f6:	d01a      	beq.n	2922e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   291f8:	69fa      	ldr	r2, [r7, #28]
   291fa:	2380      	movs	r3, #128	; 0x80
   291fc:	02db      	lsls	r3, r3, #11
   291fe:	4013      	ands	r3, r2
   29200:	d00a      	beq.n	29218 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   29202:	687b      	ldr	r3, [r7, #4]
   29204:	789b      	ldrb	r3, [r3, #2]
   29206:	2b01      	cmp	r3, #1
   29208:	d103      	bne.n	29212 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   2920a:	68fb      	ldr	r3, [r7, #12]
   2920c:	68ba      	ldr	r2, [r7, #8]
   2920e:	619a      	str	r2, [r3, #24]
   29210:	e002      	b.n	29218 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   29212:	68fb      	ldr	r3, [r7, #12]
   29214:	68ba      	ldr	r2, [r7, #8]
   29216:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29218:	687b      	ldr	r3, [r7, #4]
   2921a:	785b      	ldrb	r3, [r3, #1]
   2921c:	2b01      	cmp	r3, #1
   2921e:	d003      	beq.n	29228 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   29220:	687b      	ldr	r3, [r7, #4]
   29222:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29224:	2b02      	cmp	r3, #2
   29226:	d102      	bne.n	2922e <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   29228:	68fb      	ldr	r3, [r7, #12]
   2922a:	68ba      	ldr	r2, [r7, #8]
   2922c:	609a      	str	r2, [r3, #8]
		}
	}
}
   2922e:	46c0      	nop			; (mov r8, r8)
   29230:	46bd      	mov	sp, r7
   29232:	b008      	add	sp, #32
   29234:	bd80      	pop	{r7, pc}
   29236:	46c0      	nop			; (mov r8, r8)
   29238:	fffbffff 	.word	0xfffbffff

0002923c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   2923c:	b580      	push	{r7, lr}
   2923e:	b084      	sub	sp, #16
   29240:	af00      	add	r7, sp, #0
   29242:	0002      	movs	r2, r0
   29244:	6039      	str	r1, [r7, #0]
   29246:	1dfb      	adds	r3, r7, #7
   29248:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2924a:	1dfb      	adds	r3, r7, #7
   2924c:	781b      	ldrb	r3, [r3, #0]
   2924e:	0018      	movs	r0, r3
   29250:	4b0a      	ldr	r3, [pc, #40]	; (2927c <system_pinmux_pin_set_config+0x40>)
   29252:	4798      	blx	r3
   29254:	0003      	movs	r3, r0
   29256:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   29258:	1dfb      	adds	r3, r7, #7
   2925a:	781b      	ldrb	r3, [r3, #0]
   2925c:	221f      	movs	r2, #31
   2925e:	4013      	ands	r3, r2
   29260:	2201      	movs	r2, #1
   29262:	409a      	lsls	r2, r3
   29264:	0013      	movs	r3, r2
   29266:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   29268:	683a      	ldr	r2, [r7, #0]
   2926a:	68b9      	ldr	r1, [r7, #8]
   2926c:	68fb      	ldr	r3, [r7, #12]
   2926e:	0018      	movs	r0, r3
   29270:	4b03      	ldr	r3, [pc, #12]	; (29280 <system_pinmux_pin_set_config+0x44>)
   29272:	4798      	blx	r3
}
   29274:	46c0      	nop			; (mov r8, r8)
   29276:	46bd      	mov	sp, r7
   29278:	b004      	add	sp, #16
   2927a:	bd80      	pop	{r7, pc}
   2927c:	000290cd 	.word	0x000290cd
   29280:	0002912d 	.word	0x0002912d

00029284 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   29284:	b580      	push	{r7, lr}
   29286:	af00      	add	r7, sp, #0
	return;
   29288:	46c0      	nop			; (mov r8, r8)
}
   2928a:	46bd      	mov	sp, r7
   2928c:	bd80      	pop	{r7, pc}
	...

00029290 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   29290:	b580      	push	{r7, lr}
   29292:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   29294:	4b06      	ldr	r3, [pc, #24]	; (292b0 <system_init+0x20>)
   29296:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   29298:	4b06      	ldr	r3, [pc, #24]	; (292b4 <system_init+0x24>)
   2929a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   2929c:	4b06      	ldr	r3, [pc, #24]	; (292b8 <system_init+0x28>)
   2929e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   292a0:	4b06      	ldr	r3, [pc, #24]	; (292bc <system_init+0x2c>)
   292a2:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   292a4:	4b06      	ldr	r3, [pc, #24]	; (292c0 <system_init+0x30>)
   292a6:	4798      	blx	r3
}
   292a8:	46c0      	nop			; (mov r8, r8)
   292aa:	46bd      	mov	sp, r7
   292ac:	bd80      	pop	{r7, pc}
   292ae:	46c0      	nop			; (mov r8, r8)
   292b0:	00028911 	.word	0x00028911
   292b4:	000253d9 	.word	0x000253d9
   292b8:	00013011 	.word	0x00013011
   292bc:	000257b1 	.word	0x000257b1
   292c0:	00029285 	.word	0x00029285

000292c4 <system_gclk_chan_get_config_defaults>:
{
   292c4:	b580      	push	{r7, lr}
   292c6:	b082      	sub	sp, #8
   292c8:	af00      	add	r7, sp, #0
   292ca:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   292cc:	687b      	ldr	r3, [r7, #4]
   292ce:	2200      	movs	r2, #0
   292d0:	701a      	strb	r2, [r3, #0]
}
   292d2:	46c0      	nop			; (mov r8, r8)
   292d4:	46bd      	mov	sp, r7
   292d6:	b002      	add	sp, #8
   292d8:	bd80      	pop	{r7, pc}
	...

000292dc <system_apb_clock_set_mask>:
{
   292dc:	b580      	push	{r7, lr}
   292de:	b082      	sub	sp, #8
   292e0:	af00      	add	r7, sp, #0
   292e2:	0002      	movs	r2, r0
   292e4:	6039      	str	r1, [r7, #0]
   292e6:	1dfb      	adds	r3, r7, #7
   292e8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   292ea:	1dfb      	adds	r3, r7, #7
   292ec:	781b      	ldrb	r3, [r3, #0]
   292ee:	2b01      	cmp	r3, #1
   292f0:	d00a      	beq.n	29308 <system_apb_clock_set_mask+0x2c>
   292f2:	2b02      	cmp	r3, #2
   292f4:	d00f      	beq.n	29316 <system_apb_clock_set_mask+0x3a>
   292f6:	2b00      	cmp	r3, #0
   292f8:	d114      	bne.n	29324 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   292fa:	4b0e      	ldr	r3, [pc, #56]	; (29334 <system_apb_clock_set_mask+0x58>)
   292fc:	4a0d      	ldr	r2, [pc, #52]	; (29334 <system_apb_clock_set_mask+0x58>)
   292fe:	6991      	ldr	r1, [r2, #24]
   29300:	683a      	ldr	r2, [r7, #0]
   29302:	430a      	orrs	r2, r1
   29304:	619a      	str	r2, [r3, #24]
			break;
   29306:	e00f      	b.n	29328 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   29308:	4b0a      	ldr	r3, [pc, #40]	; (29334 <system_apb_clock_set_mask+0x58>)
   2930a:	4a0a      	ldr	r2, [pc, #40]	; (29334 <system_apb_clock_set_mask+0x58>)
   2930c:	69d1      	ldr	r1, [r2, #28]
   2930e:	683a      	ldr	r2, [r7, #0]
   29310:	430a      	orrs	r2, r1
   29312:	61da      	str	r2, [r3, #28]
			break;
   29314:	e008      	b.n	29328 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   29316:	4b07      	ldr	r3, [pc, #28]	; (29334 <system_apb_clock_set_mask+0x58>)
   29318:	4a06      	ldr	r2, [pc, #24]	; (29334 <system_apb_clock_set_mask+0x58>)
   2931a:	6a11      	ldr	r1, [r2, #32]
   2931c:	683a      	ldr	r2, [r7, #0]
   2931e:	430a      	orrs	r2, r1
   29320:	621a      	str	r2, [r3, #32]
			break;
   29322:	e001      	b.n	29328 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   29324:	2317      	movs	r3, #23
   29326:	e000      	b.n	2932a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   29328:	2300      	movs	r3, #0
}
   2932a:	0018      	movs	r0, r3
   2932c:	46bd      	mov	sp, r7
   2932e:	b002      	add	sp, #8
   29330:	bd80      	pop	{r7, pc}
   29332:	46c0      	nop			; (mov r8, r8)
   29334:	40000400 	.word	0x40000400

00029338 <system_pinmux_get_config_defaults>:
{
   29338:	b580      	push	{r7, lr}
   2933a:	b082      	sub	sp, #8
   2933c:	af00      	add	r7, sp, #0
   2933e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   29340:	687b      	ldr	r3, [r7, #4]
   29342:	2280      	movs	r2, #128	; 0x80
   29344:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   29346:	687b      	ldr	r3, [r7, #4]
   29348:	2200      	movs	r2, #0
   2934a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2934c:	687b      	ldr	r3, [r7, #4]
   2934e:	2201      	movs	r2, #1
   29350:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   29352:	687b      	ldr	r3, [r7, #4]
   29354:	2200      	movs	r2, #0
   29356:	70da      	strb	r2, [r3, #3]
}
   29358:	46c0      	nop			; (mov r8, r8)
   2935a:	46bd      	mov	sp, r7
   2935c:	b002      	add	sp, #8
   2935e:	bd80      	pop	{r7, pc}

00029360 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   29360:	b580      	push	{r7, lr}
   29362:	b084      	sub	sp, #16
   29364:	af00      	add	r7, sp, #0
   29366:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   29368:	2300      	movs	r3, #0
   2936a:	60fb      	str	r3, [r7, #12]
   2936c:	e00c      	b.n	29388 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   2936e:	4b0a      	ldr	r3, [pc, #40]	; (29398 <_tcc_get_inst_index+0x38>)
   29370:	68fa      	ldr	r2, [r7, #12]
   29372:	0092      	lsls	r2, r2, #2
   29374:	58d2      	ldr	r2, [r2, r3]
   29376:	687b      	ldr	r3, [r7, #4]
   29378:	429a      	cmp	r2, r3
   2937a:	d102      	bne.n	29382 <_tcc_get_inst_index+0x22>
			return i;
   2937c:	68fb      	ldr	r3, [r7, #12]
   2937e:	b2db      	uxtb	r3, r3
   29380:	e006      	b.n	29390 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   29382:	68fb      	ldr	r3, [r7, #12]
   29384:	3301      	adds	r3, #1
   29386:	60fb      	str	r3, [r7, #12]
   29388:	68fb      	ldr	r3, [r7, #12]
   2938a:	2b02      	cmp	r3, #2
   2938c:	d9ef      	bls.n	2936e <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   2938e:	2300      	movs	r3, #0
}
   29390:	0018      	movs	r0, r3
   29392:	46bd      	mov	sp, r7
   29394:	b004      	add	sp, #16
   29396:	bd80      	pop	{r7, pc}
   29398:	00038f7c 	.word	0x00038f7c

0002939c <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   2939c:	b590      	push	{r4, r7, lr}
   2939e:	b085      	sub	sp, #20
   293a0:	af00      	add	r7, sp, #0
   293a2:	6078      	str	r0, [r7, #4]
   293a4:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   293a6:	230f      	movs	r3, #15
   293a8:	18fc      	adds	r4, r7, r3
   293aa:	683b      	ldr	r3, [r7, #0]
   293ac:	0018      	movs	r0, r3
   293ae:	4bad      	ldr	r3, [pc, #692]	; (29664 <tcc_get_config_defaults+0x2c8>)
   293b0:	4798      	blx	r3
   293b2:	0003      	movs	r3, r0
   293b4:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   293b6:	687b      	ldr	r3, [r7, #4]
   293b8:	2200      	movs	r2, #0
   293ba:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   293bc:	230f      	movs	r3, #15
   293be:	18fb      	adds	r3, r7, r3
   293c0:	781a      	ldrb	r2, [r3, #0]
   293c2:	4ba9      	ldr	r3, [pc, #676]	; (29668 <tcc_get_config_defaults+0x2cc>)
   293c4:	0092      	lsls	r2, r2, #2
   293c6:	58d2      	ldr	r2, [r2, r3]
   293c8:	687b      	ldr	r3, [r7, #4]
   293ca:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   293cc:	687b      	ldr	r3, [r7, #4]
   293ce:	2200      	movs	r2, #0
   293d0:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   293d2:	687b      	ldr	r3, [r7, #4]
   293d4:	2200      	movs	r2, #0
   293d6:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   293d8:	687b      	ldr	r3, [r7, #4]
   293da:	2200      	movs	r2, #0
   293dc:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   293de:	687b      	ldr	r3, [r7, #4]
   293e0:	2200      	movs	r2, #0
   293e2:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   293e4:	687b      	ldr	r3, [r7, #4]
   293e6:	2200      	movs	r2, #0
   293e8:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   293ea:	687b      	ldr	r3, [r7, #4]
   293ec:	2200      	movs	r2, #0
   293ee:	61da      	str	r2, [r3, #28]
   293f0:	687b      	ldr	r3, [r7, #4]
   293f2:	2200      	movs	r2, #0
   293f4:	621a      	str	r2, [r3, #32]
   293f6:	687b      	ldr	r3, [r7, #4]
   293f8:	2200      	movs	r2, #0
   293fa:	625a      	str	r2, [r3, #36]	; 0x24
   293fc:	687b      	ldr	r3, [r7, #4]
   293fe:	2200      	movs	r2, #0
   29400:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   29402:	687b      	ldr	r3, [r7, #4]
   29404:	2200      	movs	r2, #0
   29406:	751a      	strb	r2, [r3, #20]
   29408:	687b      	ldr	r3, [r7, #4]
   2940a:	2200      	movs	r2, #0
   2940c:	755a      	strb	r2, [r3, #21]
   2940e:	687b      	ldr	r3, [r7, #4]
   29410:	2200      	movs	r2, #0
   29412:	759a      	strb	r2, [r3, #22]
   29414:	687b      	ldr	r3, [r7, #4]
   29416:	2200      	movs	r2, #0
   29418:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   2941a:	687b      	ldr	r3, [r7, #4]
   2941c:	2200      	movs	r2, #0
   2941e:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   29420:	687b      	ldr	r3, [r7, #4]
   29422:	2200      	movs	r2, #0
   29424:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   29426:	687b      	ldr	r3, [r7, #4]
   29428:	2200      	movs	r2, #0
   2942a:	741a      	strb	r2, [r3, #16]
   2942c:	687b      	ldr	r3, [r7, #4]
   2942e:	2200      	movs	r2, #0
   29430:	745a      	strb	r2, [r3, #17]
   29432:	687b      	ldr	r3, [r7, #4]
   29434:	2200      	movs	r2, #0
   29436:	749a      	strb	r2, [r3, #18]
   29438:	687b      	ldr	r3, [r7, #4]
   2943a:	2200      	movs	r2, #0
   2943c:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   2943e:	687b      	ldr	r3, [r7, #4]
   29440:	222c      	movs	r2, #44	; 0x2c
   29442:	2100      	movs	r1, #0
   29444:	5499      	strb	r1, [r3, r2]
   29446:	687b      	ldr	r3, [r7, #4]
   29448:	222d      	movs	r2, #45	; 0x2d
   2944a:	2100      	movs	r1, #0
   2944c:	5499      	strb	r1, [r3, r2]
   2944e:	687b      	ldr	r3, [r7, #4]
   29450:	222e      	movs	r2, #46	; 0x2e
   29452:	2100      	movs	r1, #0
   29454:	5499      	strb	r1, [r3, r2]
   29456:	687b      	ldr	r3, [r7, #4]
   29458:	222f      	movs	r2, #47	; 0x2f
   2945a:	2100      	movs	r1, #0
   2945c:	5499      	strb	r1, [r3, r2]
   2945e:	687b      	ldr	r3, [r7, #4]
   29460:	2230      	movs	r2, #48	; 0x30
   29462:	2100      	movs	r1, #0
   29464:	5499      	strb	r1, [r3, r2]
   29466:	687b      	ldr	r3, [r7, #4]
   29468:	2231      	movs	r2, #49	; 0x31
   2946a:	2100      	movs	r1, #0
   2946c:	5499      	strb	r1, [r3, r2]
   2946e:	687b      	ldr	r3, [r7, #4]
   29470:	2232      	movs	r2, #50	; 0x32
   29472:	2100      	movs	r1, #0
   29474:	5499      	strb	r1, [r3, r2]
   29476:	687b      	ldr	r3, [r7, #4]
   29478:	2233      	movs	r2, #51	; 0x33
   2947a:	2100      	movs	r1, #0
   2947c:	5499      	strb	r1, [r3, r2]
   2947e:	687b      	ldr	r3, [r7, #4]
   29480:	2234      	movs	r2, #52	; 0x34
   29482:	2100      	movs	r1, #0
   29484:	5499      	strb	r1, [r3, r2]
   29486:	687b      	ldr	r3, [r7, #4]
   29488:	2235      	movs	r2, #53	; 0x35
   2948a:	2100      	movs	r1, #0
   2948c:	5499      	strb	r1, [r3, r2]
   2948e:	687b      	ldr	r3, [r7, #4]
   29490:	2236      	movs	r2, #54	; 0x36
   29492:	2100      	movs	r1, #0
   29494:	5499      	strb	r1, [r3, r2]
   29496:	687b      	ldr	r3, [r7, #4]
   29498:	2237      	movs	r2, #55	; 0x37
   2949a:	2100      	movs	r1, #0
   2949c:	5499      	strb	r1, [r3, r2]
   2949e:	687b      	ldr	r3, [r7, #4]
   294a0:	2238      	movs	r2, #56	; 0x38
   294a2:	2100      	movs	r1, #0
   294a4:	5499      	strb	r1, [r3, r2]
   294a6:	687b      	ldr	r3, [r7, #4]
   294a8:	2239      	movs	r2, #57	; 0x39
   294aa:	2100      	movs	r1, #0
   294ac:	5499      	strb	r1, [r3, r2]
   294ae:	687b      	ldr	r3, [r7, #4]
   294b0:	223a      	movs	r2, #58	; 0x3a
   294b2:	2100      	movs	r1, #0
   294b4:	5499      	strb	r1, [r3, r2]
   294b6:	687b      	ldr	r3, [r7, #4]
   294b8:	223b      	movs	r2, #59	; 0x3b
   294ba:	2100      	movs	r1, #0
   294bc:	5499      	strb	r1, [r3, r2]
   294be:	687b      	ldr	r3, [r7, #4]
   294c0:	223c      	movs	r2, #60	; 0x3c
   294c2:	2100      	movs	r1, #0
   294c4:	5499      	strb	r1, [r3, r2]
   294c6:	687b      	ldr	r3, [r7, #4]
   294c8:	223d      	movs	r2, #61	; 0x3d
   294ca:	2100      	movs	r1, #0
   294cc:	5499      	strb	r1, [r3, r2]
   294ce:	687b      	ldr	r3, [r7, #4]
   294d0:	223e      	movs	r2, #62	; 0x3e
   294d2:	2100      	movs	r1, #0
   294d4:	5499      	strb	r1, [r3, r2]
   294d6:	687b      	ldr	r3, [r7, #4]
   294d8:	223f      	movs	r2, #63	; 0x3f
   294da:	2100      	movs	r1, #0
   294dc:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   294de:	687b      	ldr	r3, [r7, #4]
   294e0:	2240      	movs	r2, #64	; 0x40
   294e2:	2100      	movs	r1, #0
   294e4:	5499      	strb	r1, [r3, r2]
   294e6:	687b      	ldr	r3, [r7, #4]
   294e8:	2241      	movs	r2, #65	; 0x41
   294ea:	2100      	movs	r1, #0
   294ec:	5499      	strb	r1, [r3, r2]
   294ee:	687b      	ldr	r3, [r7, #4]
   294f0:	2242      	movs	r2, #66	; 0x42
   294f2:	2100      	movs	r1, #0
   294f4:	5499      	strb	r1, [r3, r2]
   294f6:	687b      	ldr	r3, [r7, #4]
   294f8:	2243      	movs	r2, #67	; 0x43
   294fa:	2100      	movs	r1, #0
   294fc:	5499      	strb	r1, [r3, r2]
   294fe:	687b      	ldr	r3, [r7, #4]
   29500:	2244      	movs	r2, #68	; 0x44
   29502:	2100      	movs	r1, #0
   29504:	5499      	strb	r1, [r3, r2]
   29506:	687b      	ldr	r3, [r7, #4]
   29508:	2245      	movs	r2, #69	; 0x45
   2950a:	2100      	movs	r1, #0
   2950c:	5499      	strb	r1, [r3, r2]
   2950e:	687b      	ldr	r3, [r7, #4]
   29510:	2246      	movs	r2, #70	; 0x46
   29512:	2100      	movs	r1, #0
   29514:	5499      	strb	r1, [r3, r2]
   29516:	687b      	ldr	r3, [r7, #4]
   29518:	2247      	movs	r2, #71	; 0x47
   2951a:	2100      	movs	r1, #0
   2951c:	5499      	strb	r1, [r3, r2]
   2951e:	687b      	ldr	r3, [r7, #4]
   29520:	2248      	movs	r2, #72	; 0x48
   29522:	2100      	movs	r1, #0
   29524:	5499      	strb	r1, [r3, r2]
   29526:	687b      	ldr	r3, [r7, #4]
   29528:	2249      	movs	r2, #73	; 0x49
   2952a:	2100      	movs	r1, #0
   2952c:	5499      	strb	r1, [r3, r2]
   2952e:	687b      	ldr	r3, [r7, #4]
   29530:	224a      	movs	r2, #74	; 0x4a
   29532:	2100      	movs	r1, #0
   29534:	5499      	strb	r1, [r3, r2]
   29536:	687b      	ldr	r3, [r7, #4]
   29538:	224b      	movs	r2, #75	; 0x4b
   2953a:	2100      	movs	r1, #0
   2953c:	5499      	strb	r1, [r3, r2]
   2953e:	687b      	ldr	r3, [r7, #4]
   29540:	224c      	movs	r2, #76	; 0x4c
   29542:	2100      	movs	r1, #0
   29544:	5499      	strb	r1, [r3, r2]
   29546:	687b      	ldr	r3, [r7, #4]
   29548:	224d      	movs	r2, #77	; 0x4d
   2954a:	2100      	movs	r1, #0
   2954c:	5499      	strb	r1, [r3, r2]
   2954e:	687b      	ldr	r3, [r7, #4]
   29550:	224e      	movs	r2, #78	; 0x4e
   29552:	2100      	movs	r1, #0
   29554:	5499      	strb	r1, [r3, r2]
   29556:	687b      	ldr	r3, [r7, #4]
   29558:	224f      	movs	r2, #79	; 0x4f
   2955a:	2100      	movs	r1, #0
   2955c:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   2955e:	687b      	ldr	r3, [r7, #4]
   29560:	2250      	movs	r2, #80	; 0x50
   29562:	2100      	movs	r1, #0
   29564:	5499      	strb	r1, [r3, r2]
   29566:	687b      	ldr	r3, [r7, #4]
   29568:	2251      	movs	r2, #81	; 0x51
   2956a:	2100      	movs	r1, #0
   2956c:	5499      	strb	r1, [r3, r2]
   2956e:	687b      	ldr	r3, [r7, #4]
   29570:	2252      	movs	r2, #82	; 0x52
   29572:	2100      	movs	r1, #0
   29574:	5499      	strb	r1, [r3, r2]
   29576:	687b      	ldr	r3, [r7, #4]
   29578:	2253      	movs	r2, #83	; 0x53
   2957a:	2100      	movs	r1, #0
   2957c:	5499      	strb	r1, [r3, r2]
   2957e:	687b      	ldr	r3, [r7, #4]
   29580:	2254      	movs	r2, #84	; 0x54
   29582:	2100      	movs	r1, #0
   29584:	5499      	strb	r1, [r3, r2]
   29586:	687b      	ldr	r3, [r7, #4]
   29588:	2255      	movs	r2, #85	; 0x55
   2958a:	2100      	movs	r1, #0
   2958c:	5499      	strb	r1, [r3, r2]
   2958e:	687b      	ldr	r3, [r7, #4]
   29590:	2256      	movs	r2, #86	; 0x56
   29592:	2100      	movs	r1, #0
   29594:	5499      	strb	r1, [r3, r2]
   29596:	687b      	ldr	r3, [r7, #4]
   29598:	2257      	movs	r2, #87	; 0x57
   2959a:	2100      	movs	r1, #0
   2959c:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   2959e:	687b      	ldr	r3, [r7, #4]
   295a0:	2298      	movs	r2, #152	; 0x98
   295a2:	2100      	movs	r1, #0
   295a4:	5499      	strb	r1, [r3, r2]
   295a6:	687b      	ldr	r3, [r7, #4]
   295a8:	2200      	movs	r2, #0
   295aa:	659a      	str	r2, [r3, #88]	; 0x58
   295ac:	687b      	ldr	r3, [r7, #4]
   295ae:	2200      	movs	r2, #0
   295b0:	679a      	str	r2, [r3, #120]	; 0x78
   295b2:	687b      	ldr	r3, [r7, #4]
   295b4:	2299      	movs	r2, #153	; 0x99
   295b6:	2100      	movs	r1, #0
   295b8:	5499      	strb	r1, [r3, r2]
   295ba:	687b      	ldr	r3, [r7, #4]
   295bc:	2200      	movs	r2, #0
   295be:	65da      	str	r2, [r3, #92]	; 0x5c
   295c0:	687b      	ldr	r3, [r7, #4]
   295c2:	2200      	movs	r2, #0
   295c4:	67da      	str	r2, [r3, #124]	; 0x7c
   295c6:	687b      	ldr	r3, [r7, #4]
   295c8:	229a      	movs	r2, #154	; 0x9a
   295ca:	2100      	movs	r1, #0
   295cc:	5499      	strb	r1, [r3, r2]
   295ce:	687b      	ldr	r3, [r7, #4]
   295d0:	2200      	movs	r2, #0
   295d2:	661a      	str	r2, [r3, #96]	; 0x60
   295d4:	687b      	ldr	r3, [r7, #4]
   295d6:	2280      	movs	r2, #128	; 0x80
   295d8:	2100      	movs	r1, #0
   295da:	5099      	str	r1, [r3, r2]
   295dc:	687b      	ldr	r3, [r7, #4]
   295de:	229b      	movs	r2, #155	; 0x9b
   295e0:	2100      	movs	r1, #0
   295e2:	5499      	strb	r1, [r3, r2]
   295e4:	687b      	ldr	r3, [r7, #4]
   295e6:	2200      	movs	r2, #0
   295e8:	665a      	str	r2, [r3, #100]	; 0x64
   295ea:	687b      	ldr	r3, [r7, #4]
   295ec:	2284      	movs	r2, #132	; 0x84
   295ee:	2100      	movs	r1, #0
   295f0:	5099      	str	r1, [r3, r2]
   295f2:	687b      	ldr	r3, [r7, #4]
   295f4:	229c      	movs	r2, #156	; 0x9c
   295f6:	2100      	movs	r1, #0
   295f8:	5499      	strb	r1, [r3, r2]
   295fa:	687b      	ldr	r3, [r7, #4]
   295fc:	2200      	movs	r2, #0
   295fe:	669a      	str	r2, [r3, #104]	; 0x68
   29600:	687b      	ldr	r3, [r7, #4]
   29602:	2288      	movs	r2, #136	; 0x88
   29604:	2100      	movs	r1, #0
   29606:	5099      	str	r1, [r3, r2]
   29608:	687b      	ldr	r3, [r7, #4]
   2960a:	229d      	movs	r2, #157	; 0x9d
   2960c:	2100      	movs	r1, #0
   2960e:	5499      	strb	r1, [r3, r2]
   29610:	687b      	ldr	r3, [r7, #4]
   29612:	2200      	movs	r2, #0
   29614:	66da      	str	r2, [r3, #108]	; 0x6c
   29616:	687b      	ldr	r3, [r7, #4]
   29618:	228c      	movs	r2, #140	; 0x8c
   2961a:	2100      	movs	r1, #0
   2961c:	5099      	str	r1, [r3, r2]
   2961e:	687b      	ldr	r3, [r7, #4]
   29620:	229e      	movs	r2, #158	; 0x9e
   29622:	2100      	movs	r1, #0
   29624:	5499      	strb	r1, [r3, r2]
   29626:	687b      	ldr	r3, [r7, #4]
   29628:	2200      	movs	r2, #0
   2962a:	671a      	str	r2, [r3, #112]	; 0x70
   2962c:	687b      	ldr	r3, [r7, #4]
   2962e:	2290      	movs	r2, #144	; 0x90
   29630:	2100      	movs	r1, #0
   29632:	5099      	str	r1, [r3, r2]
   29634:	687b      	ldr	r3, [r7, #4]
   29636:	229f      	movs	r2, #159	; 0x9f
   29638:	2100      	movs	r1, #0
   2963a:	5499      	strb	r1, [r3, r2]
   2963c:	687b      	ldr	r3, [r7, #4]
   2963e:	2200      	movs	r2, #0
   29640:	675a      	str	r2, [r3, #116]	; 0x74
   29642:	687b      	ldr	r3, [r7, #4]
   29644:	2294      	movs	r2, #148	; 0x94
   29646:	2100      	movs	r1, #0
   29648:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   2964a:	687b      	ldr	r3, [r7, #4]
   2964c:	22a0      	movs	r2, #160	; 0xa0
   2964e:	2101      	movs	r1, #1
   29650:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   29652:	687b      	ldr	r3, [r7, #4]
   29654:	22a1      	movs	r2, #161	; 0xa1
   29656:	2100      	movs	r1, #0
   29658:	5499      	strb	r1, [r3, r2]
}
   2965a:	46c0      	nop			; (mov r8, r8)
   2965c:	46bd      	mov	sp, r7
   2965e:	b005      	add	sp, #20
   29660:	bd90      	pop	{r4, r7, pc}
   29662:	46c0      	nop			; (mov r8, r8)
   29664:	00029361 	.word	0x00029361
   29668:	00038f98 	.word	0x00038f98

0002966c <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2966c:	b580      	push	{r7, lr}
   2966e:	b086      	sub	sp, #24
   29670:	af00      	add	r7, sp, #0
   29672:	60b9      	str	r1, [r7, #8]
   29674:	607a      	str	r2, [r7, #4]
   29676:	230f      	movs	r3, #15
   29678:	18fb      	adds	r3, r7, r3
   2967a:	1c02      	adds	r2, r0, #0
   2967c:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   2967e:	2300      	movs	r3, #0
   29680:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   29682:	2300      	movs	r3, #0
   29684:	613b      	str	r3, [r7, #16]
   29686:	e01d      	b.n	296c4 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   29688:	68ba      	ldr	r2, [r7, #8]
   2968a:	693b      	ldr	r3, [r7, #16]
   2968c:	18d3      	adds	r3, r2, r3
   2968e:	3310      	adds	r3, #16
   29690:	781b      	ldrb	r3, [r3, #0]
   29692:	2b01      	cmp	r3, #1
   29694:	d113      	bne.n	296be <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   29696:	230f      	movs	r3, #15
   29698:	18fb      	adds	r3, r7, r3
   2969a:	781b      	ldrb	r3, [r3, #0]
   2969c:	4a1b      	ldr	r2, [pc, #108]	; (2970c <_tcc_build_ctrla+0xa0>)
   2969e:	5cd3      	ldrb	r3, [r2, r3]
   296a0:	001a      	movs	r2, r3
   296a2:	693b      	ldr	r3, [r7, #16]
   296a4:	429a      	cmp	r2, r3
   296a6:	da01      	bge.n	296ac <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   296a8:	2317      	movs	r3, #23
   296aa:	e02a      	b.n	29702 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   296ac:	2380      	movs	r3, #128	; 0x80
   296ae:	045a      	lsls	r2, r3, #17
   296b0:	693b      	ldr	r3, [r7, #16]
   296b2:	409a      	lsls	r2, r3
   296b4:	0013      	movs	r3, r2
   296b6:	001a      	movs	r2, r3
   296b8:	697b      	ldr	r3, [r7, #20]
   296ba:	4313      	orrs	r3, r2
   296bc:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   296be:	693b      	ldr	r3, [r7, #16]
   296c0:	3301      	adds	r3, #1
   296c2:	613b      	str	r3, [r7, #16]
   296c4:	693b      	ldr	r3, [r7, #16]
   296c6:	2b03      	cmp	r3, #3
   296c8:	ddde      	ble.n	29688 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   296ca:	68bb      	ldr	r3, [r7, #8]
   296cc:	22a1      	movs	r2, #161	; 0xa1
   296ce:	5c9b      	ldrb	r3, [r3, r2]
   296d0:	2b00      	cmp	r3, #0
   296d2:	d004      	beq.n	296de <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   296d4:	697b      	ldr	r3, [r7, #20]
   296d6:	2280      	movs	r2, #128	; 0x80
   296d8:	0112      	lsls	r2, r2, #4
   296da:	4313      	orrs	r3, r2
   296dc:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   296de:	68bb      	ldr	r3, [r7, #8]
   296e0:	7b1b      	ldrb	r3, [r3, #12]
   296e2:	031b      	lsls	r3, r3, #12
   296e4:	001a      	movs	r2, r3
   296e6:	697b      	ldr	r3, [r7, #20]
   296e8:	4313      	orrs	r3, r2
   296ea:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   296ec:	68bb      	ldr	r3, [r7, #8]
   296ee:	7adb      	ldrb	r3, [r3, #11]
   296f0:	021b      	lsls	r3, r3, #8
   296f2:	001a      	movs	r2, r3
   296f4:	697b      	ldr	r3, [r7, #20]
   296f6:	4313      	orrs	r3, r2
   296f8:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   296fa:	687b      	ldr	r3, [r7, #4]
   296fc:	697a      	ldr	r2, [r7, #20]
   296fe:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   29700:	2300      	movs	r3, #0
}
   29702:	0018      	movs	r0, r3
   29704:	46bd      	mov	sp, r7
   29706:	b006      	add	sp, #24
   29708:	bd80      	pop	{r7, pc}
   2970a:	46c0      	nop			; (mov r8, r8)
   2970c:	00038fa4 	.word	0x00038fa4

00029710 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   29710:	b580      	push	{r7, lr}
   29712:	b086      	sub	sp, #24
   29714:	af00      	add	r7, sp, #0
   29716:	60b9      	str	r1, [r7, #8]
   29718:	607a      	str	r2, [r7, #4]
   2971a:	230f      	movs	r3, #15
   2971c:	18fb      	adds	r3, r7, r3
   2971e:	1c02      	adds	r2, r0, #0
   29720:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   29722:	2317      	movs	r3, #23
   29724:	18fb      	adds	r3, r7, r3
   29726:	2200      	movs	r2, #0
   29728:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   2972a:	68bb      	ldr	r3, [r7, #8]
   2972c:	7a1b      	ldrb	r3, [r3, #8]
   2972e:	2b00      	cmp	r3, #0
   29730:	d007      	beq.n	29742 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   29732:	2317      	movs	r3, #23
   29734:	18fb      	adds	r3, r7, r3
   29736:	2217      	movs	r2, #23
   29738:	18ba      	adds	r2, r7, r2
   2973a:	7812      	ldrb	r2, [r2, #0]
   2973c:	2104      	movs	r1, #4
   2973e:	430a      	orrs	r2, r1
   29740:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   29742:	68bb      	ldr	r3, [r7, #8]
   29744:	7a5b      	ldrb	r3, [r3, #9]
   29746:	2b01      	cmp	r3, #1
   29748:	d107      	bne.n	2975a <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   2974a:	2317      	movs	r3, #23
   2974c:	18fb      	adds	r3, r7, r3
   2974e:	2217      	movs	r2, #23
   29750:	18ba      	adds	r2, r7, r2
   29752:	7812      	ldrb	r2, [r2, #0]
   29754:	2101      	movs	r1, #1
   29756:	430a      	orrs	r2, r1
   29758:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   2975a:	687b      	ldr	r3, [r7, #4]
   2975c:	2217      	movs	r2, #23
   2975e:	18ba      	adds	r2, r7, r2
   29760:	7812      	ldrb	r2, [r2, #0]
   29762:	701a      	strb	r2, [r3, #0]
}
   29764:	46c0      	nop			; (mov r8, r8)
   29766:	46bd      	mov	sp, r7
   29768:	b006      	add	sp, #24
   2976a:	bd80      	pop	{r7, pc}

0002976c <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2976c:	b580      	push	{r7, lr}
   2976e:	b088      	sub	sp, #32
   29770:	af00      	add	r7, sp, #0
   29772:	60b9      	str	r1, [r7, #8]
   29774:	607a      	str	r2, [r7, #4]
   29776:	230f      	movs	r3, #15
   29778:	18fb      	adds	r3, r7, r3
   2977a:	1c02      	adds	r2, r0, #0
   2977c:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   2977e:	230f      	movs	r3, #15
   29780:	18fb      	adds	r3, r7, r3
   29782:	781a      	ldrb	r2, [r3, #0]
   29784:	231b      	movs	r3, #27
   29786:	18fb      	adds	r3, r7, r3
   29788:	493e      	ldr	r1, [pc, #248]	; (29884 <_tcc_build_faults+0x118>)
   2978a:	5c8a      	ldrb	r2, [r1, r2]
   2978c:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2978e:	2300      	movs	r3, #0
   29790:	61fb      	str	r3, [r7, #28]
   29792:	e06e      	b.n	29872 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   29794:	69fa      	ldr	r2, [r7, #28]
   29796:	0013      	movs	r3, r2
   29798:	009b      	lsls	r3, r3, #2
   2979a:	189b      	adds	r3, r3, r2
   2979c:	005b      	lsls	r3, r3, #1
   2979e:	3328      	adds	r3, #40	; 0x28
   297a0:	68ba      	ldr	r2, [r7, #8]
   297a2:	18d3      	adds	r3, r2, r3
   297a4:	3304      	adds	r3, #4
   297a6:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   297a8:	697b      	ldr	r3, [r7, #20]
   297aa:	7a5b      	ldrb	r3, [r3, #9]
   297ac:	221b      	movs	r2, #27
   297ae:	18ba      	adds	r2, r7, r2
   297b0:	7812      	ldrb	r2, [r2, #0]
   297b2:	429a      	cmp	r2, r3
   297b4:	d801      	bhi.n	297ba <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   297b6:	2317      	movs	r3, #23
   297b8:	e05f      	b.n	2987a <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   297ba:	697b      	ldr	r3, [r7, #20]
   297bc:	781b      	ldrb	r3, [r3, #0]
   297be:	2b0f      	cmp	r3, #15
   297c0:	d901      	bls.n	297c6 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   297c2:	2317      	movs	r3, #23
   297c4:	e059      	b.n	2987a <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   297c6:	697b      	ldr	r3, [r7, #20]
   297c8:	781b      	ldrb	r3, [r3, #0]
   297ca:	061b      	lsls	r3, r3, #24
   297cc:	001a      	movs	r2, r3
   297ce:	23f0      	movs	r3, #240	; 0xf0
   297d0:	051b      	lsls	r3, r3, #20
   297d2:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   297d4:	697b      	ldr	r3, [r7, #20]
   297d6:	785b      	ldrb	r3, [r3, #1]
   297d8:	041b      	lsls	r3, r3, #16
   297da:	0019      	movs	r1, r3
   297dc:	23ff      	movs	r3, #255	; 0xff
   297de:	041b      	lsls	r3, r3, #16
   297e0:	400b      	ands	r3, r1
   297e2:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   297e4:	697b      	ldr	r3, [r7, #20]
   297e6:	789b      	ldrb	r3, [r3, #2]
   297e8:	2b00      	cmp	r3, #0
   297ea:	d001      	beq.n	297f0 <_tcc_build_faults+0x84>
   297ec:	2380      	movs	r3, #128	; 0x80
   297ee:	e000      	b.n	297f2 <_tcc_build_faults+0x86>
   297f0:	2300      	movs	r3, #0
   297f2:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   297f4:	697b      	ldr	r3, [r7, #20]
   297f6:	78db      	ldrb	r3, [r3, #3]
   297f8:	2b00      	cmp	r3, #0
   297fa:	d001      	beq.n	29800 <_tcc_build_faults+0x94>
   297fc:	2308      	movs	r3, #8
   297fe:	e000      	b.n	29802 <_tcc_build_faults+0x96>
   29800:	2300      	movs	r3, #0
   29802:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   29804:	697b      	ldr	r3, [r7, #20]
   29806:	791b      	ldrb	r3, [r3, #4]
   29808:	2b00      	cmp	r3, #0
   2980a:	d001      	beq.n	29810 <_tcc_build_faults+0xa4>
   2980c:	2310      	movs	r3, #16
   2980e:	e000      	b.n	29812 <_tcc_build_faults+0xa6>
   29810:	2300      	movs	r3, #0
   29812:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   29814:	697b      	ldr	r3, [r7, #20]
   29816:	795b      	ldrb	r3, [r3, #5]
   29818:	0019      	movs	r1, r3
   2981a:	2303      	movs	r3, #3
   2981c:	400b      	ands	r3, r1
   2981e:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   29820:	697b      	ldr	r3, [r7, #20]
   29822:	799b      	ldrb	r3, [r3, #6]
   29824:	015b      	lsls	r3, r3, #5
   29826:	0019      	movs	r1, r3
   29828:	2360      	movs	r3, #96	; 0x60
   2982a:	400b      	ands	r3, r1
   2982c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   2982e:	697b      	ldr	r3, [r7, #20]
   29830:	79db      	ldrb	r3, [r3, #7]
   29832:	021b      	lsls	r3, r3, #8
   29834:	0019      	movs	r1, r3
   29836:	23c0      	movs	r3, #192	; 0xc0
   29838:	009b      	lsls	r3, r3, #2
   2983a:	400b      	ands	r3, r1
   2983c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   2983e:	697b      	ldr	r3, [r7, #20]
   29840:	7a1b      	ldrb	r3, [r3, #8]
   29842:	031b      	lsls	r3, r3, #12
   29844:	0019      	movs	r1, r3
   29846:	23e0      	movs	r3, #224	; 0xe0
   29848:	01db      	lsls	r3, r3, #7
   2984a:	400b      	ands	r3, r1
   2984c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   2984e:	697b      	ldr	r3, [r7, #20]
   29850:	7a5b      	ldrb	r3, [r3, #9]
   29852:	029b      	lsls	r3, r3, #10
   29854:	0019      	movs	r1, r3
   29856:	23c0      	movs	r3, #192	; 0xc0
   29858:	011b      	lsls	r3, r3, #4
   2985a:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2985c:	4313      	orrs	r3, r2
   2985e:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   29860:	69fb      	ldr	r3, [r7, #28]
   29862:	009b      	lsls	r3, r3, #2
   29864:	687a      	ldr	r2, [r7, #4]
   29866:	18d3      	adds	r3, r2, r3
   29868:	693a      	ldr	r2, [r7, #16]
   2986a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2986c:	69fb      	ldr	r3, [r7, #28]
   2986e:	3301      	adds	r3, #1
   29870:	61fb      	str	r3, [r7, #28]
   29872:	69fb      	ldr	r3, [r7, #28]
   29874:	2b01      	cmp	r3, #1
   29876:	dd8d      	ble.n	29794 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   29878:	2300      	movs	r3, #0
}
   2987a:	0018      	movs	r0, r3
   2987c:	46bd      	mov	sp, r7
   2987e:	b008      	add	sp, #32
   29880:	bd80      	pop	{r7, pc}
   29882:	46c0      	nop			; (mov r8, r8)
   29884:	00038fa4 	.word	0x00038fa4

00029888 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   29888:	b580      	push	{r7, lr}
   2988a:	b088      	sub	sp, #32
   2988c:	af00      	add	r7, sp, #0
   2988e:	60b9      	str	r1, [r7, #8]
   29890:	607a      	str	r2, [r7, #4]
   29892:	230f      	movs	r3, #15
   29894:	18fb      	adds	r3, r7, r3
   29896:	1c02      	adds	r2, r0, #0
   29898:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2989a:	230f      	movs	r3, #15
   2989c:	18fb      	adds	r3, r7, r3
   2989e:	781a      	ldrb	r2, [r3, #0]
   298a0:	2317      	movs	r3, #23
   298a2:	18fb      	adds	r3, r7, r3
   298a4:	492d      	ldr	r1, [pc, #180]	; (2995c <_tcc_build_drvctrl+0xd4>)
   298a6:	5c8a      	ldrb	r2, [r1, r2]
   298a8:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   298aa:	2300      	movs	r3, #0
   298ac:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   298ae:	2300      	movs	r3, #0
   298b0:	61fb      	str	r3, [r7, #28]
   298b2:	e048      	b.n	29946 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   298b4:	68ba      	ldr	r2, [r7, #8]
   298b6:	2150      	movs	r1, #80	; 0x50
   298b8:	69fb      	ldr	r3, [r7, #28]
   298ba:	18d3      	adds	r3, r2, r3
   298bc:	185b      	adds	r3, r3, r1
   298be:	781b      	ldrb	r3, [r3, #0]
   298c0:	2b00      	cmp	r3, #0
   298c2:	d010      	beq.n	298e6 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   298c4:	2317      	movs	r3, #23
   298c6:	18fb      	adds	r3, r7, r3
   298c8:	781a      	ldrb	r2, [r3, #0]
   298ca:	69fb      	ldr	r3, [r7, #28]
   298cc:	429a      	cmp	r2, r3
   298ce:	d801      	bhi.n	298d4 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   298d0:	2317      	movs	r3, #23
   298d2:	e03f      	b.n	29954 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   298d4:	2380      	movs	r3, #128	; 0x80
   298d6:	025a      	lsls	r2, r3, #9
   298d8:	69fb      	ldr	r3, [r7, #28]
   298da:	409a      	lsls	r2, r3
   298dc:	0013      	movs	r3, r2
   298de:	001a      	movs	r2, r3
   298e0:	69bb      	ldr	r3, [r7, #24]
   298e2:	4313      	orrs	r3, r2
   298e4:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   298e6:	68ba      	ldr	r2, [r7, #8]
   298e8:	69fb      	ldr	r3, [r7, #28]
   298ea:	331c      	adds	r3, #28
   298ec:	005b      	lsls	r3, r3, #1
   298ee:	18d3      	adds	r3, r2, r3
   298f0:	3309      	adds	r3, #9
   298f2:	781b      	ldrb	r3, [r3, #0]
   298f4:	2b00      	cmp	r3, #0
   298f6:	d023      	beq.n	29940 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   298f8:	2317      	movs	r3, #23
   298fa:	18fb      	adds	r3, r7, r3
   298fc:	781a      	ldrb	r2, [r3, #0]
   298fe:	69fb      	ldr	r3, [r7, #28]
   29900:	429a      	cmp	r2, r3
   29902:	d801      	bhi.n	29908 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   29904:	2317      	movs	r3, #23
   29906:	e025      	b.n	29954 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   29908:	68ba      	ldr	r2, [r7, #8]
   2990a:	69fb      	ldr	r3, [r7, #28]
   2990c:	331c      	adds	r3, #28
   2990e:	005b      	lsls	r3, r3, #1
   29910:	18d3      	adds	r3, r2, r3
   29912:	3309      	adds	r3, #9
   29914:	781b      	ldrb	r3, [r3, #0]
   29916:	2b02      	cmp	r3, #2
   29918:	d10a      	bne.n	29930 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   2991a:	2302      	movs	r3, #2
   2991c:	33ff      	adds	r3, #255	; 0xff
   2991e:	001a      	movs	r2, r3
   29920:	69fb      	ldr	r3, [r7, #28]
   29922:	409a      	lsls	r2, r3
   29924:	0013      	movs	r3, r2
   29926:	001a      	movs	r2, r3
   29928:	69bb      	ldr	r3, [r7, #24]
   2992a:	4313      	orrs	r3, r2
   2992c:	61bb      	str	r3, [r7, #24]
   2992e:	e007      	b.n	29940 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   29930:	2201      	movs	r2, #1
   29932:	69fb      	ldr	r3, [r7, #28]
   29934:	409a      	lsls	r2, r3
   29936:	0013      	movs	r3, r2
   29938:	001a      	movs	r2, r3
   2993a:	69bb      	ldr	r3, [r7, #24]
   2993c:	4313      	orrs	r3, r2
   2993e:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   29940:	69fb      	ldr	r3, [r7, #28]
   29942:	3301      	adds	r3, #1
   29944:	61fb      	str	r3, [r7, #28]
   29946:	69fb      	ldr	r3, [r7, #28]
   29948:	2b07      	cmp	r3, #7
   2994a:	d9b3      	bls.n	298b4 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   2994c:	687b      	ldr	r3, [r7, #4]
   2994e:	69ba      	ldr	r2, [r7, #24]
   29950:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   29952:	2300      	movs	r3, #0
}
   29954:	0018      	movs	r0, r3
   29956:	46bd      	mov	sp, r7
   29958:	b008      	add	sp, #32
   2995a:	bd80      	pop	{r7, pc}
   2995c:	00038fa8 	.word	0x00038fa8

00029960 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   29960:	b580      	push	{r7, lr}
   29962:	b088      	sub	sp, #32
   29964:	af00      	add	r7, sp, #0
   29966:	60b9      	str	r1, [r7, #8]
   29968:	607a      	str	r2, [r7, #4]
   2996a:	230f      	movs	r3, #15
   2996c:	18fb      	adds	r3, r7, r3
   2996e:	1c02      	adds	r2, r0, #0
   29970:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   29972:	230f      	movs	r3, #15
   29974:	18fb      	adds	r3, r7, r3
   29976:	781a      	ldrb	r2, [r3, #0]
   29978:	2317      	movs	r3, #23
   2997a:	18fb      	adds	r3, r7, r3
   2997c:	491d      	ldr	r1, [pc, #116]	; (299f4 <_tcc_build_waves+0x94>)
   2997e:	5c8a      	ldrb	r2, [r1, r2]
   29980:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   29982:	68bb      	ldr	r3, [r7, #8]
   29984:	3310      	adds	r3, #16
   29986:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   29988:	693b      	ldr	r3, [r7, #16]
   2998a:	7a5b      	ldrb	r3, [r3, #9]
   2998c:	011b      	lsls	r3, r3, #4
   2998e:	001a      	movs	r2, r3
   29990:	2330      	movs	r3, #48	; 0x30
   29992:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   29994:	693b      	ldr	r3, [r7, #16]
   29996:	7a1b      	ldrb	r3, [r3, #8]
   29998:	0019      	movs	r1, r3
   2999a:	2307      	movs	r3, #7
   2999c:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2999e:	4313      	orrs	r3, r2
   299a0:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   299a2:	2300      	movs	r3, #0
   299a4:	61fb      	str	r3, [r7, #28]
   299a6:	e01a      	b.n	299de <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   299a8:	693a      	ldr	r2, [r7, #16]
   299aa:	69fb      	ldr	r3, [r7, #28]
   299ac:	18d3      	adds	r3, r2, r3
   299ae:	3304      	adds	r3, #4
   299b0:	781b      	ldrb	r3, [r3, #0]
   299b2:	2b00      	cmp	r3, #0
   299b4:	d010      	beq.n	299d8 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   299b6:	2317      	movs	r3, #23
   299b8:	18fb      	adds	r3, r7, r3
   299ba:	781a      	ldrb	r2, [r3, #0]
   299bc:	69fb      	ldr	r3, [r7, #28]
   299be:	429a      	cmp	r2, r3
   299c0:	dc01      	bgt.n	299c6 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   299c2:	2317      	movs	r3, #23
   299c4:	e012      	b.n	299ec <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   299c6:	2380      	movs	r3, #128	; 0x80
   299c8:	025a      	lsls	r2, r3, #9
   299ca:	69fb      	ldr	r3, [r7, #28]
   299cc:	409a      	lsls	r2, r3
   299ce:	0013      	movs	r3, r2
   299d0:	001a      	movs	r2, r3
   299d2:	69bb      	ldr	r3, [r7, #24]
   299d4:	4313      	orrs	r3, r2
   299d6:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   299d8:	69fb      	ldr	r3, [r7, #28]
   299da:	3301      	adds	r3, #1
   299dc:	61fb      	str	r3, [r7, #28]
   299de:	69fb      	ldr	r3, [r7, #28]
   299e0:	2b03      	cmp	r3, #3
   299e2:	dde1      	ble.n	299a8 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   299e4:	687b      	ldr	r3, [r7, #4]
   299e6:	69ba      	ldr	r2, [r7, #24]
   299e8:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   299ea:	2300      	movs	r3, #0
}
   299ec:	0018      	movs	r0, r3
   299ee:	46bd      	mov	sp, r7
   299f0:	b008      	add	sp, #32
   299f2:	bd80      	pop	{r7, pc}
   299f4:	00038fa4 	.word	0x00038fa4

000299f8 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   299f8:	b590      	push	{r4, r7, lr}
   299fa:	b091      	sub	sp, #68	; 0x44
   299fc:	af00      	add	r7, sp, #0
   299fe:	60f8      	str	r0, [r7, #12]
   29a00:	60b9      	str	r1, [r7, #8]
   29a02:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   29a04:	233b      	movs	r3, #59	; 0x3b
   29a06:	18fc      	adds	r4, r7, r3
   29a08:	68bb      	ldr	r3, [r7, #8]
   29a0a:	0018      	movs	r0, r3
   29a0c:	4bc4      	ldr	r3, [pc, #784]	; (29d20 <tcc_init+0x328>)
   29a0e:	4798      	blx	r3
   29a10:	0003      	movs	r3, r0
   29a12:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   29a14:	233b      	movs	r3, #59	; 0x3b
   29a16:	18fb      	adds	r3, r7, r3
   29a18:	781a      	ldrb	r2, [r3, #0]
   29a1a:	4bc2      	ldr	r3, [pc, #776]	; (29d24 <tcc_init+0x32c>)
   29a1c:	0092      	lsls	r2, r2, #2
   29a1e:	58d3      	ldr	r3, [r2, r3]
   29a20:	0019      	movs	r1, r3
   29a22:	2002      	movs	r0, #2
   29a24:	4bc0      	ldr	r3, [pc, #768]	; (29d28 <tcc_init+0x330>)
   29a26:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   29a28:	68bb      	ldr	r3, [r7, #8]
   29a2a:	681b      	ldr	r3, [r3, #0]
   29a2c:	2202      	movs	r2, #2
   29a2e:	4013      	ands	r3, r2
   29a30:	d001      	beq.n	29a36 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   29a32:	231c      	movs	r3, #28
   29a34:	e1be      	b.n	29db4 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   29a36:	68bb      	ldr	r3, [r7, #8]
   29a38:	681b      	ldr	r3, [r3, #0]
   29a3a:	2201      	movs	r2, #1
   29a3c:	4013      	ands	r3, r2
   29a3e:	d001      	beq.n	29a44 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   29a40:	231c      	movs	r3, #28
   29a42:	e1b7      	b.n	29db4 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   29a44:	233b      	movs	r3, #59	; 0x3b
   29a46:	18fb      	adds	r3, r7, r3
   29a48:	781a      	ldrb	r2, [r3, #0]
   29a4a:	4bb8      	ldr	r3, [pc, #736]	; (29d2c <tcc_init+0x334>)
   29a4c:	0092      	lsls	r2, r2, #2
   29a4e:	58d3      	ldr	r3, [r2, r3]
   29a50:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   29a52:	687b      	ldr	r3, [r7, #4]
   29a54:	681a      	ldr	r2, [r3, #0]
   29a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29a58:	429a      	cmp	r2, r3
   29a5a:	d804      	bhi.n	29a66 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   29a5c:	687b      	ldr	r3, [r7, #4]
   29a5e:	685a      	ldr	r2, [r3, #4]
   29a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29a62:	429a      	cmp	r2, r3
   29a64:	d901      	bls.n	29a6a <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   29a66:	2317      	movs	r3, #23
   29a68:	e1a4      	b.n	29db4 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   29a6a:	2300      	movs	r3, #0
   29a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   29a6e:	e00e      	b.n	29a8e <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   29a70:	687a      	ldr	r2, [r7, #4]
   29a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29a74:	3306      	adds	r3, #6
   29a76:	009b      	lsls	r3, r3, #2
   29a78:	18d3      	adds	r3, r2, r3
   29a7a:	3304      	adds	r3, #4
   29a7c:	681a      	ldr	r2, [r3, #0]
   29a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29a80:	429a      	cmp	r2, r3
   29a82:	d901      	bls.n	29a88 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   29a84:	2317      	movs	r3, #23
   29a86:	e195      	b.n	29db4 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   29a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29a8a:	3301      	adds	r3, #1
   29a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   29a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29a90:	2b03      	cmp	r3, #3
   29a92:	dded      	ble.n	29a70 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   29a94:	2300      	movs	r3, #0
   29a96:	63fb      	str	r3, [r7, #60]	; 0x3c
   29a98:	e019      	b.n	29ace <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   29a9a:	687a      	ldr	r2, [r7, #4]
   29a9c:	2198      	movs	r1, #152	; 0x98
   29a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29aa0:	18d3      	adds	r3, r2, r3
   29aa2:	185b      	adds	r3, r3, r1
   29aa4:	781b      	ldrb	r3, [r3, #0]
   29aa6:	2201      	movs	r2, #1
   29aa8:	4053      	eors	r3, r2
   29aaa:	b2db      	uxtb	r3, r3
   29aac:	2b00      	cmp	r3, #0
   29aae:	d10a      	bne.n	29ac6 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   29ab0:	233b      	movs	r3, #59	; 0x3b
   29ab2:	18fb      	adds	r3, r7, r3
   29ab4:	781b      	ldrb	r3, [r3, #0]
   29ab6:	4a9e      	ldr	r2, [pc, #632]	; (29d30 <tcc_init+0x338>)
   29ab8:	5cd3      	ldrb	r3, [r2, r3]
   29aba:	001a      	movs	r2, r3
   29abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29abe:	429a      	cmp	r2, r3
   29ac0:	dc02      	bgt.n	29ac8 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   29ac2:	2317      	movs	r3, #23
   29ac4:	e176      	b.n	29db4 <tcc_init+0x3bc>
			continue;
   29ac6:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   29ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29aca:	3301      	adds	r3, #1
   29acc:	63fb      	str	r3, [r7, #60]	; 0x3c
   29ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29ad0:	2b07      	cmp	r3, #7
   29ad2:	dde2      	ble.n	29a9a <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   29ad4:	2300      	movs	r3, #0
   29ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   29ad8:	2333      	movs	r3, #51	; 0x33
   29ada:	18fc      	adds	r4, r7, r3
   29adc:	232c      	movs	r3, #44	; 0x2c
   29ade:	18fa      	adds	r2, r7, r3
   29ae0:	6879      	ldr	r1, [r7, #4]
   29ae2:	233b      	movs	r3, #59	; 0x3b
   29ae4:	18fb      	adds	r3, r7, r3
   29ae6:	781b      	ldrb	r3, [r3, #0]
   29ae8:	0018      	movs	r0, r3
   29aea:	4b92      	ldr	r3, [pc, #584]	; (29d34 <tcc_init+0x33c>)
   29aec:	4798      	blx	r3
   29aee:	0003      	movs	r3, r0
   29af0:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   29af2:	2333      	movs	r3, #51	; 0x33
   29af4:	18fb      	adds	r3, r7, r3
   29af6:	781b      	ldrb	r3, [r3, #0]
   29af8:	2b00      	cmp	r3, #0
   29afa:	d003      	beq.n	29b04 <tcc_init+0x10c>
		return status;
   29afc:	2333      	movs	r3, #51	; 0x33
   29afe:	18fb      	adds	r3, r7, r3
   29b00:	781b      	ldrb	r3, [r3, #0]
   29b02:	e157      	b.n	29db4 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   29b04:	232b      	movs	r3, #43	; 0x2b
   29b06:	18fa      	adds	r2, r7, r3
   29b08:	6879      	ldr	r1, [r7, #4]
   29b0a:	233b      	movs	r3, #59	; 0x3b
   29b0c:	18fb      	adds	r3, r7, r3
   29b0e:	781b      	ldrb	r3, [r3, #0]
   29b10:	0018      	movs	r0, r3
   29b12:	4b89      	ldr	r3, [pc, #548]	; (29d38 <tcc_init+0x340>)
   29b14:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   29b16:	2333      	movs	r3, #51	; 0x33
   29b18:	18fc      	adds	r4, r7, r3
   29b1a:	2320      	movs	r3, #32
   29b1c:	18fa      	adds	r2, r7, r3
   29b1e:	6879      	ldr	r1, [r7, #4]
   29b20:	233b      	movs	r3, #59	; 0x3b
   29b22:	18fb      	adds	r3, r7, r3
   29b24:	781b      	ldrb	r3, [r3, #0]
   29b26:	0018      	movs	r0, r3
   29b28:	4b84      	ldr	r3, [pc, #528]	; (29d3c <tcc_init+0x344>)
   29b2a:	4798      	blx	r3
   29b2c:	0003      	movs	r3, r0
   29b2e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   29b30:	2333      	movs	r3, #51	; 0x33
   29b32:	18fb      	adds	r3, r7, r3
   29b34:	781b      	ldrb	r3, [r3, #0]
   29b36:	2b00      	cmp	r3, #0
   29b38:	d003      	beq.n	29b42 <tcc_init+0x14a>
		return status;
   29b3a:	2333      	movs	r3, #51	; 0x33
   29b3c:	18fb      	adds	r3, r7, r3
   29b3e:	781b      	ldrb	r3, [r3, #0]
   29b40:	e138      	b.n	29db4 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   29b42:	2300      	movs	r3, #0
   29b44:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   29b46:	2333      	movs	r3, #51	; 0x33
   29b48:	18fc      	adds	r4, r7, r3
   29b4a:	231c      	movs	r3, #28
   29b4c:	18fa      	adds	r2, r7, r3
   29b4e:	6879      	ldr	r1, [r7, #4]
   29b50:	233b      	movs	r3, #59	; 0x3b
   29b52:	18fb      	adds	r3, r7, r3
   29b54:	781b      	ldrb	r3, [r3, #0]
   29b56:	0018      	movs	r0, r3
   29b58:	4b79      	ldr	r3, [pc, #484]	; (29d40 <tcc_init+0x348>)
   29b5a:	4798      	blx	r3
   29b5c:	0003      	movs	r3, r0
   29b5e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   29b60:	2333      	movs	r3, #51	; 0x33
   29b62:	18fb      	adds	r3, r7, r3
   29b64:	781b      	ldrb	r3, [r3, #0]
   29b66:	2b00      	cmp	r3, #0
   29b68:	d003      	beq.n	29b72 <tcc_init+0x17a>
		return status;
   29b6a:	2333      	movs	r3, #51	; 0x33
   29b6c:	18fb      	adds	r3, r7, r3
   29b6e:	781b      	ldrb	r3, [r3, #0]
   29b70:	e120      	b.n	29db4 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   29b72:	2333      	movs	r3, #51	; 0x33
   29b74:	18fc      	adds	r4, r7, r3
   29b76:	2318      	movs	r3, #24
   29b78:	18fa      	adds	r2, r7, r3
   29b7a:	6879      	ldr	r1, [r7, #4]
   29b7c:	233b      	movs	r3, #59	; 0x3b
   29b7e:	18fb      	adds	r3, r7, r3
   29b80:	781b      	ldrb	r3, [r3, #0]
   29b82:	0018      	movs	r0, r3
   29b84:	4b6f      	ldr	r3, [pc, #444]	; (29d44 <tcc_init+0x34c>)
   29b86:	4798      	blx	r3
   29b88:	0003      	movs	r3, r0
   29b8a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   29b8c:	2333      	movs	r3, #51	; 0x33
   29b8e:	18fb      	adds	r3, r7, r3
   29b90:	781b      	ldrb	r3, [r3, #0]
   29b92:	2b00      	cmp	r3, #0
   29b94:	d003      	beq.n	29b9e <tcc_init+0x1a6>
		return status;
   29b96:	2333      	movs	r3, #51	; 0x33
   29b98:	18fb      	adds	r3, r7, r3
   29b9a:	781b      	ldrb	r3, [r3, #0]
   29b9c:	e10a      	b.n	29db4 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   29b9e:	2300      	movs	r3, #0
   29ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
   29ba2:	e009      	b.n	29bb8 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   29ba4:	68fa      	ldr	r2, [r7, #12]
   29ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29ba8:	009b      	lsls	r3, r3, #2
   29baa:	18d3      	adds	r3, r2, r3
   29bac:	3304      	adds	r3, #4
   29bae:	2200      	movs	r2, #0
   29bb0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   29bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29bb4:	3301      	adds	r3, #1
   29bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   29bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29bba:	2b0b      	cmp	r3, #11
   29bbc:	ddf2      	ble.n	29ba4 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   29bbe:	68fb      	ldr	r3, [r7, #12]
   29bc0:	2200      	movs	r2, #0
   29bc2:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   29bc4:	68fb      	ldr	r3, [r7, #12]
   29bc6:	2200      	movs	r2, #0
   29bc8:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   29bca:	233b      	movs	r3, #59	; 0x3b
   29bcc:	18fb      	adds	r3, r7, r3
   29bce:	781a      	ldrb	r2, [r3, #0]
   29bd0:	4b5d      	ldr	r3, [pc, #372]	; (29d48 <tcc_init+0x350>)
   29bd2:	0092      	lsls	r2, r2, #2
   29bd4:	68f9      	ldr	r1, [r7, #12]
   29bd6:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   29bd8:	68fb      	ldr	r3, [r7, #12]
   29bda:	68ba      	ldr	r2, [r7, #8]
   29bdc:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   29bde:	687b      	ldr	r3, [r7, #4]
   29be0:	22a0      	movs	r2, #160	; 0xa0
   29be2:	5c99      	ldrb	r1, [r3, r2]
   29be4:	68fb      	ldr	r3, [r7, #12]
   29be6:	223c      	movs	r2, #60	; 0x3c
   29be8:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   29bea:	2314      	movs	r3, #20
   29bec:	18fb      	adds	r3, r7, r3
   29bee:	0018      	movs	r0, r3
   29bf0:	4b56      	ldr	r3, [pc, #344]	; (29d4c <tcc_init+0x354>)
   29bf2:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   29bf4:	687b      	ldr	r3, [r7, #4]
   29bf6:	7a9a      	ldrb	r2, [r3, #10]
   29bf8:	2314      	movs	r3, #20
   29bfa:	18fb      	adds	r3, r7, r3
   29bfc:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   29bfe:	233b      	movs	r3, #59	; 0x3b
   29c00:	18fb      	adds	r3, r7, r3
   29c02:	781b      	ldrb	r3, [r3, #0]
   29c04:	4a52      	ldr	r2, [pc, #328]	; (29d50 <tcc_init+0x358>)
   29c06:	5cd3      	ldrb	r3, [r2, r3]
   29c08:	2214      	movs	r2, #20
   29c0a:	18ba      	adds	r2, r7, r2
   29c0c:	0011      	movs	r1, r2
   29c0e:	0018      	movs	r0, r3
   29c10:	4b50      	ldr	r3, [pc, #320]	; (29d54 <tcc_init+0x35c>)
   29c12:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   29c14:	233b      	movs	r3, #59	; 0x3b
   29c16:	18fb      	adds	r3, r7, r3
   29c18:	781b      	ldrb	r3, [r3, #0]
   29c1a:	4a4d      	ldr	r2, [pc, #308]	; (29d50 <tcc_init+0x358>)
   29c1c:	5cd3      	ldrb	r3, [r2, r3]
   29c1e:	0018      	movs	r0, r3
   29c20:	4b4d      	ldr	r3, [pc, #308]	; (29d58 <tcc_init+0x360>)
   29c22:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   29c24:	2300      	movs	r3, #0
   29c26:	63fb      	str	r3, [r7, #60]	; 0x3c
   29c28:	e02d      	b.n	29c86 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   29c2a:	687a      	ldr	r2, [r7, #4]
   29c2c:	2198      	movs	r1, #152	; 0x98
   29c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29c30:	18d3      	adds	r3, r2, r3
   29c32:	185b      	adds	r3, r3, r1
   29c34:	781b      	ldrb	r3, [r3, #0]
   29c36:	2201      	movs	r2, #1
   29c38:	4053      	eors	r3, r2
   29c3a:	b2db      	uxtb	r3, r3
   29c3c:	2b00      	cmp	r3, #0
   29c3e:	d11e      	bne.n	29c7e <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   29c40:	2310      	movs	r3, #16
   29c42:	18fb      	adds	r3, r7, r3
   29c44:	0018      	movs	r0, r3
   29c46:	4b45      	ldr	r3, [pc, #276]	; (29d5c <tcc_init+0x364>)
   29c48:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   29c4a:	687b      	ldr	r3, [r7, #4]
   29c4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   29c4e:	321e      	adds	r2, #30
   29c50:	0092      	lsls	r2, r2, #2
   29c52:	58d3      	ldr	r3, [r2, r3]
   29c54:	b2da      	uxtb	r2, r3
   29c56:	2310      	movs	r3, #16
   29c58:	18fb      	adds	r3, r7, r3
   29c5a:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   29c5c:	2310      	movs	r3, #16
   29c5e:	18fb      	adds	r3, r7, r3
   29c60:	2201      	movs	r2, #1
   29c62:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   29c64:	687b      	ldr	r3, [r7, #4]
   29c66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   29c68:	3216      	adds	r2, #22
   29c6a:	0092      	lsls	r2, r2, #2
   29c6c:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   29c6e:	b2db      	uxtb	r3, r3
   29c70:	2210      	movs	r2, #16
   29c72:	18ba      	adds	r2, r7, r2
   29c74:	0011      	movs	r1, r2
   29c76:	0018      	movs	r0, r3
   29c78:	4b39      	ldr	r3, [pc, #228]	; (29d60 <tcc_init+0x368>)
   29c7a:	4798      	blx	r3
   29c7c:	e000      	b.n	29c80 <tcc_init+0x288>
			continue;
   29c7e:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   29c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29c82:	3301      	adds	r3, #1
   29c84:	63fb      	str	r3, [r7, #60]	; 0x3c
   29c86:	233b      	movs	r3, #59	; 0x3b
   29c88:	18fb      	adds	r3, r7, r3
   29c8a:	781b      	ldrb	r3, [r3, #0]
   29c8c:	4a28      	ldr	r2, [pc, #160]	; (29d30 <tcc_init+0x338>)
   29c8e:	5cd3      	ldrb	r3, [r2, r3]
   29c90:	001a      	movs	r2, r3
   29c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29c94:	429a      	cmp	r2, r3
   29c96:	dcc8      	bgt.n	29c2a <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   29c98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   29c9a:	68bb      	ldr	r3, [r7, #8]
   29c9c:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   29c9e:	46c0      	nop			; (mov r8, r8)
   29ca0:	68bb      	ldr	r3, [r7, #8]
   29ca2:	689b      	ldr	r3, [r3, #8]
   29ca4:	2204      	movs	r2, #4
   29ca6:	4013      	ands	r3, r2
   29ca8:	d1fa      	bne.n	29ca0 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   29caa:	68bb      	ldr	r3, [r7, #8]
   29cac:	22ff      	movs	r2, #255	; 0xff
   29cae:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   29cb0:	46c0      	nop			; (mov r8, r8)
   29cb2:	68bb      	ldr	r3, [r7, #8]
   29cb4:	689b      	ldr	r3, [r3, #8]
   29cb6:	2204      	movs	r2, #4
   29cb8:	4013      	ands	r3, r2
   29cba:	d1fa      	bne.n	29cb2 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   29cbc:	232b      	movs	r3, #43	; 0x2b
   29cbe:	18fb      	adds	r3, r7, r3
   29cc0:	781a      	ldrb	r2, [r3, #0]
   29cc2:	68bb      	ldr	r3, [r7, #8]
   29cc4:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   29cc6:	2320      	movs	r3, #32
   29cc8:	18fb      	adds	r3, r7, r3
   29cca:	681a      	ldr	r2, [r3, #0]
   29ccc:	68bb      	ldr	r3, [r7, #8]
   29cce:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   29cd0:	2320      	movs	r3, #32
   29cd2:	18fb      	adds	r3, r7, r3
   29cd4:	685a      	ldr	r2, [r3, #4]
   29cd6:	68bb      	ldr	r3, [r7, #8]
   29cd8:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   29cda:	69fa      	ldr	r2, [r7, #28]
   29cdc:	68bb      	ldr	r3, [r7, #8]
   29cde:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   29ce0:	46c0      	nop			; (mov r8, r8)
   29ce2:	68bb      	ldr	r3, [r7, #8]
   29ce4:	689b      	ldr	r3, [r3, #8]
   29ce6:	4a1f      	ldr	r2, [pc, #124]	; (29d64 <tcc_init+0x36c>)
   29ce8:	4013      	ands	r3, r2
   29cea:	d1fa      	bne.n	29ce2 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   29cec:	69ba      	ldr	r2, [r7, #24]
   29cee:	68bb      	ldr	r3, [r7, #8]
   29cf0:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   29cf2:	46c0      	nop			; (mov r8, r8)
   29cf4:	68bb      	ldr	r3, [r7, #8]
   29cf6:	689b      	ldr	r3, [r3, #8]
   29cf8:	2210      	movs	r2, #16
   29cfa:	4013      	ands	r3, r2
   29cfc:	d1fa      	bne.n	29cf4 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   29cfe:	687b      	ldr	r3, [r7, #4]
   29d00:	681a      	ldr	r2, [r3, #0]
   29d02:	68bb      	ldr	r3, [r7, #8]
   29d04:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   29d06:	46c0      	nop			; (mov r8, r8)
   29d08:	68bb      	ldr	r3, [r7, #8]
   29d0a:	689b      	ldr	r3, [r3, #8]
   29d0c:	4a16      	ldr	r2, [pc, #88]	; (29d68 <tcc_init+0x370>)
   29d0e:	4013      	ands	r3, r2
   29d10:	d1fa      	bne.n	29d08 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   29d12:	687b      	ldr	r3, [r7, #4]
   29d14:	685a      	ldr	r2, [r3, #4]
   29d16:	68bb      	ldr	r3, [r7, #8]
   29d18:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   29d1a:	2300      	movs	r3, #0
   29d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   29d1e:	e03f      	b.n	29da0 <tcc_init+0x3a8>
   29d20:	00029361 	.word	0x00029361
   29d24:	00038f8c 	.word	0x00038f8c
   29d28:	000292dd 	.word	0x000292dd
   29d2c:	00038f98 	.word	0x00038f98
   29d30:	00038fa8 	.word	0x00038fa8
   29d34:	0002966d 	.word	0x0002966d
   29d38:	00029711 	.word	0x00029711
   29d3c:	0002976d 	.word	0x0002976d
   29d40:	00029889 	.word	0x00029889
   29d44:	00029961 	.word	0x00029961
   29d48:	20005be8 	.word	0x20005be8
   29d4c:	000292c5 	.word	0x000292c5
   29d50:	00038f88 	.word	0x00038f88
   29d54:	00028edd 	.word	0x00028edd
   29d58:	00028f21 	.word	0x00028f21
   29d5c:	00029339 	.word	0x00029339
   29d60:	0002923d 	.word	0x0002923d
   29d64:	00020040 	.word	0x00020040
   29d68:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   29d6c:	46c0      	nop			; (mov r8, r8)
   29d6e:	68bb      	ldr	r3, [r7, #8]
   29d70:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   29d72:	4912      	ldr	r1, [pc, #72]	; (29dbc <tcc_init+0x3c4>)
   29d74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   29d76:	4091      	lsls	r1, r2
   29d78:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   29d7a:	4013      	ands	r3, r2
   29d7c:	d1f7      	bne.n	29d6e <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   29d7e:	687a      	ldr	r2, [r7, #4]
   29d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29d82:	3306      	adds	r3, #6
   29d84:	009b      	lsls	r3, r3, #2
   29d86:	18d3      	adds	r3, r2, r3
   29d88:	3304      	adds	r3, #4
   29d8a:	681a      	ldr	r2, [r3, #0]
   29d8c:	68b9      	ldr	r1, [r7, #8]
   29d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29d90:	3310      	adds	r3, #16
   29d92:	009b      	lsls	r3, r3, #2
   29d94:	18cb      	adds	r3, r1, r3
   29d96:	3304      	adds	r3, #4
   29d98:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   29d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29d9c:	3301      	adds	r3, #1
   29d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   29da0:	233b      	movs	r3, #59	; 0x3b
   29da2:	18fb      	adds	r3, r7, r3
   29da4:	781b      	ldrb	r3, [r3, #0]
   29da6:	4a06      	ldr	r2, [pc, #24]	; (29dc0 <tcc_init+0x3c8>)
   29da8:	5cd3      	ldrb	r3, [r2, r3]
   29daa:	001a      	movs	r2, r3
   29dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29dae:	429a      	cmp	r2, r3
   29db0:	dcdc      	bgt.n	29d6c <tcc_init+0x374>
	}

	return STATUS_OK;
   29db2:	2300      	movs	r3, #0
}
   29db4:	0018      	movs	r0, r3
   29db6:	46bd      	mov	sp, r7
   29db8:	b011      	add	sp, #68	; 0x44
   29dba:	bd90      	pop	{r4, r7, pc}
   29dbc:	00080100 	.word	0x00080100
   29dc0:	00038fa4 	.word	0x00038fa4

00029dc4 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
   29dc4:	b590      	push	{r4, r7, lr}
   29dc6:	b089      	sub	sp, #36	; 0x24
   29dc8:	af00      	add	r7, sp, #0
   29dca:	60f8      	str	r0, [r7, #12]
   29dcc:	0008      	movs	r0, r1
   29dce:	607a      	str	r2, [r7, #4]
   29dd0:	0019      	movs	r1, r3
   29dd2:	230b      	movs	r3, #11
   29dd4:	18fb      	adds	r3, r7, r3
   29dd6:	1c02      	adds	r2, r0, #0
   29dd8:	701a      	strb	r2, [r3, #0]
   29dda:	230a      	movs	r3, #10
   29ddc:	18fb      	adds	r3, r7, r3
   29dde:	1c0a      	adds	r2, r1, #0
   29de0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   29de2:	68fb      	ldr	r3, [r7, #12]
   29de4:	681b      	ldr	r3, [r3, #0]
   29de6:	61fb      	str	r3, [r7, #28]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
   29de8:	231b      	movs	r3, #27
   29dea:	18fc      	adds	r4, r7, r3
   29dec:	69fb      	ldr	r3, [r7, #28]
   29dee:	0018      	movs	r0, r3
   29df0:	4b2e      	ldr	r3, [pc, #184]	; (29eac <_tcc_set_compare_value+0xe8>)
   29df2:	4798      	blx	r3
   29df4:	0003      	movs	r3, r0
   29df6:	7023      	strb	r3, [r4, #0]

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
   29df8:	231b      	movs	r3, #27
   29dfa:	18fb      	adds	r3, r7, r3
   29dfc:	781b      	ldrb	r3, [r3, #0]
   29dfe:	4a2c      	ldr	r2, [pc, #176]	; (29eb0 <_tcc_set_compare_value+0xec>)
   29e00:	5cd3      	ldrb	r3, [r2, r3]
   29e02:	220b      	movs	r2, #11
   29e04:	18ba      	adds	r2, r7, r2
   29e06:	7812      	ldrb	r2, [r2, #0]
   29e08:	429a      	cmp	r2, r3
   29e0a:	d301      	bcc.n	29e10 <_tcc_set_compare_value+0x4c>
		return STATUS_ERR_INVALID_ARG;
   29e0c:	2317      	movs	r3, #23
   29e0e:	e049      	b.n	29ea4 <_tcc_set_compare_value+0xe0>
	}

	uint32_t max_count = _tcc_maxs[module_index];
   29e10:	231b      	movs	r3, #27
   29e12:	18fb      	adds	r3, r7, r3
   29e14:	781a      	ldrb	r2, [r3, #0]
   29e16:	4b27      	ldr	r3, [pc, #156]	; (29eb4 <_tcc_set_compare_value+0xf0>)
   29e18:	0092      	lsls	r2, r2, #2
   29e1a:	58d3      	ldr	r3, [r2, r3]
   29e1c:	617b      	str	r3, [r7, #20]

	/* Check compare value */
	if (compare > max_count) {
   29e1e:	687a      	ldr	r2, [r7, #4]
   29e20:	697b      	ldr	r3, [r7, #20]
   29e22:	429a      	cmp	r2, r3
   29e24:	d901      	bls.n	29e2a <_tcc_set_compare_value+0x66>
		return STATUS_ERR_INVALID_ARG;
   29e26:	2317      	movs	r3, #23
   29e28:	e03c      	b.n	29ea4 <_tcc_set_compare_value+0xe0>
	}

	if (double_buffering_enabled) {
   29e2a:	230a      	movs	r3, #10
   29e2c:	18fb      	adds	r3, r7, r3
   29e2e:	781b      	ldrb	r3, [r3, #0]
   29e30:	2b00      	cmp	r3, #0
   29e32:	d020      	beq.n	29e76 <_tcc_set_compare_value+0xb2>
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22) || (SAMR30)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->STATUS.reg  &
   29e34:	46c0      	nop			; (mov r8, r8)
   29e36:	69fb      	ldr	r3, [r7, #28]
   29e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				(TCC_STATUS_CCBV0 << channel_index)) {
   29e3a:	220b      	movs	r2, #11
   29e3c:	18ba      	adds	r2, r7, r2
   29e3e:	7812      	ldrb	r2, [r2, #0]
   29e40:	2180      	movs	r1, #128	; 0x80
   29e42:	0249      	lsls	r1, r1, #9
   29e44:	4091      	lsls	r1, r2
   29e46:	000a      	movs	r2, r1
		while(tcc_module->STATUS.reg  &
   29e48:	4013      	ands	r3, r2
   29e4a:	d1f4      	bne.n	29e36 <_tcc_set_compare_value+0x72>
			/* Valid check */
		}
		while(tcc_module->SYNCBUSY.reg  &
   29e4c:	46c0      	nop			; (mov r8, r8)
   29e4e:	69fb      	ldr	r3, [r7, #28]
   29e50:	689b      	ldr	r3, [r3, #8]
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
   29e52:	220b      	movs	r2, #11
   29e54:	18ba      	adds	r2, r7, r2
   29e56:	7812      	ldrb	r2, [r2, #0]
   29e58:	2180      	movs	r1, #128	; 0x80
   29e5a:	0309      	lsls	r1, r1, #12
   29e5c:	4091      	lsls	r1, r2
   29e5e:	000a      	movs	r2, r1
		while(tcc_module->SYNCBUSY.reg  &
   29e60:	4013      	ands	r3, r2
   29e62:	d1f4      	bne.n	29e4e <_tcc_set_compare_value+0x8a>
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
   29e64:	230b      	movs	r3, #11
   29e66:	18fb      	adds	r3, r7, r3
   29e68:	781a      	ldrb	r2, [r3, #0]
   29e6a:	69fb      	ldr	r3, [r7, #28]
   29e6c:	321c      	adds	r2, #28
   29e6e:	0092      	lsls	r2, r2, #2
   29e70:	6879      	ldr	r1, [r7, #4]
   29e72:	50d1      	str	r1, [r2, r3]
   29e74:	e015      	b.n	29ea2 <_tcc_set_compare_value+0xde>
#endif
	} else {
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
   29e76:	46c0      	nop			; (mov r8, r8)
   29e78:	69fb      	ldr	r3, [r7, #28]
   29e7a:	689b      	ldr	r3, [r3, #8]
   29e7c:	220b      	movs	r2, #11
   29e7e:	18ba      	adds	r2, r7, r2
   29e80:	7812      	ldrb	r2, [r2, #0]
   29e82:	2180      	movs	r1, #128	; 0x80
   29e84:	0049      	lsls	r1, r1, #1
   29e86:	4091      	lsls	r1, r2
   29e88:	000a      	movs	r2, r1
   29e8a:	4013      	ands	r3, r2
   29e8c:	d1f4      	bne.n	29e78 <_tcc_set_compare_value+0xb4>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
   29e8e:	230b      	movs	r3, #11
   29e90:	18fb      	adds	r3, r7, r3
   29e92:	781b      	ldrb	r3, [r3, #0]
   29e94:	69fa      	ldr	r2, [r7, #28]
   29e96:	3310      	adds	r3, #16
   29e98:	009b      	lsls	r3, r3, #2
   29e9a:	18d3      	adds	r3, r2, r3
   29e9c:	3304      	adds	r3, #4
   29e9e:	687a      	ldr	r2, [r7, #4]
   29ea0:	601a      	str	r2, [r3, #0]
	}
	return STATUS_OK;
   29ea2:	2300      	movs	r3, #0
}
   29ea4:	0018      	movs	r0, r3
   29ea6:	46bd      	mov	sp, r7
   29ea8:	b009      	add	sp, #36	; 0x24
   29eaa:	bd90      	pop	{r4, r7, pc}
   29eac:	00029361 	.word	0x00029361
   29eb0:	00038fa4 	.word	0x00038fa4
   29eb4:	00038f98 	.word	0x00038f98

00029eb8 <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
   29eb8:	b590      	push	{r4, r7, lr}
   29eba:	b085      	sub	sp, #20
   29ebc:	af00      	add	r7, sp, #0
   29ebe:	60f8      	str	r0, [r7, #12]
   29ec0:	607a      	str	r2, [r7, #4]
   29ec2:	230b      	movs	r3, #11
   29ec4:	18fb      	adds	r3, r7, r3
   29ec6:	1c0a      	adds	r2, r1, #0
   29ec8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
   29eca:	68fb      	ldr	r3, [r7, #12]
   29ecc:	223c      	movs	r2, #60	; 0x3c
   29ece:	5c9c      	ldrb	r4, [r3, r2]
   29ed0:	687a      	ldr	r2, [r7, #4]
   29ed2:	230b      	movs	r3, #11
   29ed4:	18fb      	adds	r3, r7, r3
   29ed6:	7819      	ldrb	r1, [r3, #0]
   29ed8:	68f8      	ldr	r0, [r7, #12]
   29eda:	0023      	movs	r3, r4
   29edc:	4c03      	ldr	r4, [pc, #12]	; (29eec <tcc_set_compare_value+0x34>)
   29ede:	47a0      	blx	r4
   29ee0:	0003      	movs	r3, r0
			module_inst->double_buffering_enabled);
}
   29ee2:	0018      	movs	r0, r3
   29ee4:	46bd      	mov	sp, r7
   29ee6:	b005      	add	sp, #20
   29ee8:	bd90      	pop	{r4, r7, pc}
   29eea:	46c0      	nop			; (mov r8, r8)
   29eec:	00029dc5 	.word	0x00029dc5

00029ef0 <system_interrupt_enable>:
{
   29ef0:	b580      	push	{r7, lr}
   29ef2:	b082      	sub	sp, #8
   29ef4:	af00      	add	r7, sp, #0
   29ef6:	0002      	movs	r2, r0
   29ef8:	1dfb      	adds	r3, r7, #7
   29efa:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   29efc:	4b06      	ldr	r3, [pc, #24]	; (29f18 <system_interrupt_enable+0x28>)
   29efe:	1dfa      	adds	r2, r7, #7
   29f00:	7812      	ldrb	r2, [r2, #0]
   29f02:	0011      	movs	r1, r2
   29f04:	221f      	movs	r2, #31
   29f06:	400a      	ands	r2, r1
   29f08:	2101      	movs	r1, #1
   29f0a:	4091      	lsls	r1, r2
   29f0c:	000a      	movs	r2, r1
   29f0e:	601a      	str	r2, [r3, #0]
}
   29f10:	46c0      	nop			; (mov r8, r8)
   29f12:	46bd      	mov	sp, r7
   29f14:	b002      	add	sp, #8
   29f16:	bd80      	pop	{r7, pc}
   29f18:	e000e100 	.word	0xe000e100

00029f1c <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   29f1c:	b580      	push	{r7, lr}
   29f1e:	b082      	sub	sp, #8
   29f20:	af00      	add	r7, sp, #0
   29f22:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   29f24:	4a04      	ldr	r2, [pc, #16]	; (29f38 <_tcc_interrupt_get_interrupt_vector+0x1c>)
   29f26:	687b      	ldr	r3, [r7, #4]
   29f28:	18d3      	adds	r3, r2, r3
   29f2a:	781b      	ldrb	r3, [r3, #0]
   29f2c:	b25b      	sxtb	r3, r3
}
   29f2e:	0018      	movs	r0, r3
   29f30:	46bd      	mov	sp, r7
   29f32:	b002      	add	sp, #8
   29f34:	bd80      	pop	{r7, pc}
   29f36:	46c0      	nop			; (mov r8, r8)
   29f38:	20000118 	.word	0x20000118

00029f3c <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   29f3c:	b580      	push	{r7, lr}
   29f3e:	b084      	sub	sp, #16
   29f40:	af00      	add	r7, sp, #0
   29f42:	60f8      	str	r0, [r7, #12]
   29f44:	60b9      	str	r1, [r7, #8]
   29f46:	1dfb      	adds	r3, r7, #7
   29f48:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   29f4a:	1dfb      	adds	r3, r7, #7
   29f4c:	781b      	ldrb	r3, [r3, #0]
   29f4e:	68fa      	ldr	r2, [r7, #12]
   29f50:	009b      	lsls	r3, r3, #2
   29f52:	18d3      	adds	r3, r2, r3
   29f54:	3304      	adds	r3, #4
   29f56:	68ba      	ldr	r2, [r7, #8]
   29f58:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   29f5a:	68fb      	ldr	r3, [r7, #12]
   29f5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   29f5e:	1dfb      	adds	r3, r7, #7
   29f60:	7819      	ldrb	r1, [r3, #0]
   29f62:	4b05      	ldr	r3, [pc, #20]	; (29f78 <tcc_register_callback+0x3c>)
   29f64:	0089      	lsls	r1, r1, #2
   29f66:	58cb      	ldr	r3, [r1, r3]
   29f68:	431a      	orrs	r2, r3
   29f6a:	68fb      	ldr	r3, [r7, #12]
   29f6c:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   29f6e:	2300      	movs	r3, #0
}
   29f70:	0018      	movs	r0, r3
   29f72:	46bd      	mov	sp, r7
   29f74:	b004      	add	sp, #16
   29f76:	bd80      	pop	{r7, pc}
   29f78:	00038fac 	.word	0x00038fac

00029f7c <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   29f7c:	b580      	push	{r7, lr}
   29f7e:	b082      	sub	sp, #8
   29f80:	af00      	add	r7, sp, #0
   29f82:	6078      	str	r0, [r7, #4]
   29f84:	000a      	movs	r2, r1
   29f86:	1cfb      	adds	r3, r7, #3
   29f88:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   29f8a:	687b      	ldr	r3, [r7, #4]
   29f8c:	681b      	ldr	r3, [r3, #0]
   29f8e:	0018      	movs	r0, r3
   29f90:	4b0f      	ldr	r3, [pc, #60]	; (29fd0 <tcc_enable_callback+0x54>)
   29f92:	4798      	blx	r3
   29f94:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   29f96:	0018      	movs	r0, r3
   29f98:	4b0e      	ldr	r3, [pc, #56]	; (29fd4 <tcc_enable_callback+0x58>)
   29f9a:	4798      	blx	r3
   29f9c:	0003      	movs	r3, r0
   29f9e:	0018      	movs	r0, r3
   29fa0:	4b0d      	ldr	r3, [pc, #52]	; (29fd8 <tcc_enable_callback+0x5c>)
   29fa2:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   29fa4:	687b      	ldr	r3, [r7, #4]
   29fa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   29fa8:	1cfb      	adds	r3, r7, #3
   29faa:	7819      	ldrb	r1, [r3, #0]
   29fac:	4b0b      	ldr	r3, [pc, #44]	; (29fdc <tcc_enable_callback+0x60>)
   29fae:	0089      	lsls	r1, r1, #2
   29fb0:	58cb      	ldr	r3, [r1, r3]
   29fb2:	431a      	orrs	r2, r3
   29fb4:	687b      	ldr	r3, [r7, #4]
   29fb6:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   29fb8:	687b      	ldr	r3, [r7, #4]
   29fba:	681b      	ldr	r3, [r3, #0]
   29fbc:	1cfa      	adds	r2, r7, #3
   29fbe:	7811      	ldrb	r1, [r2, #0]
   29fc0:	4a06      	ldr	r2, [pc, #24]	; (29fdc <tcc_enable_callback+0x60>)
   29fc2:	0089      	lsls	r1, r1, #2
   29fc4:	588a      	ldr	r2, [r1, r2]
   29fc6:	629a      	str	r2, [r3, #40]	; 0x28
}
   29fc8:	46c0      	nop			; (mov r8, r8)
   29fca:	46bd      	mov	sp, r7
   29fcc:	b002      	add	sp, #8
   29fce:	bd80      	pop	{r7, pc}
   29fd0:	00029361 	.word	0x00029361
   29fd4:	00029f1d 	.word	0x00029f1d
   29fd8:	00029ef1 	.word	0x00029ef1
   29fdc:	00038fac 	.word	0x00038fac

00029fe0 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   29fe0:	b580      	push	{r7, lr}
   29fe2:	af00      	add	r7, sp, #0
   29fe4:	2000      	movs	r0, #0
   29fe6:	4b02      	ldr	r3, [pc, #8]	; (29ff0 <TCC0_Handler+0x10>)
   29fe8:	4798      	blx	r3
   29fea:	46c0      	nop			; (mov r8, r8)
   29fec:	46bd      	mov	sp, r7
   29fee:	bd80      	pop	{r7, pc}
   29ff0:	0002a01d 	.word	0x0002a01d

00029ff4 <TCC1_Handler>:
   29ff4:	b580      	push	{r7, lr}
   29ff6:	af00      	add	r7, sp, #0
   29ff8:	2001      	movs	r0, #1
   29ffa:	4b02      	ldr	r3, [pc, #8]	; (2a004 <TCC1_Handler+0x10>)
   29ffc:	4798      	blx	r3
   29ffe:	46c0      	nop			; (mov r8, r8)
   2a000:	46bd      	mov	sp, r7
   2a002:	bd80      	pop	{r7, pc}
   2a004:	0002a01d 	.word	0x0002a01d

0002a008 <TCC2_Handler>:
   2a008:	b580      	push	{r7, lr}
   2a00a:	af00      	add	r7, sp, #0
   2a00c:	2002      	movs	r0, #2
   2a00e:	4b02      	ldr	r3, [pc, #8]	; (2a018 <TCC2_Handler+0x10>)
   2a010:	4798      	blx	r3
   2a012:	46c0      	nop			; (mov r8, r8)
   2a014:	46bd      	mov	sp, r7
   2a016:	bd80      	pop	{r7, pc}
   2a018:	0002a01d 	.word	0x0002a01d

0002a01c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2a01c:	b580      	push	{r7, lr}
   2a01e:	b086      	sub	sp, #24
   2a020:	af00      	add	r7, sp, #0
   2a022:	0002      	movs	r2, r0
   2a024:	1dfb      	adds	r3, r7, #7
   2a026:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2a028:	1dfb      	adds	r3, r7, #7
   2a02a:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2a02c:	4b18      	ldr	r3, [pc, #96]	; (2a090 <_tcc_interrupt_handler+0x74>)
   2a02e:	0092      	lsls	r2, r2, #2
   2a030:	58d3      	ldr	r3, [r2, r3]
   2a032:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2a034:	693b      	ldr	r3, [r7, #16]
   2a036:	681b      	ldr	r3, [r3, #0]
   2a038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2a03a:	693b      	ldr	r3, [r7, #16]
   2a03c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2a03e:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2a040:	693b      	ldr	r3, [r7, #16]
   2a042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2a044:	4013      	ands	r3, r2
   2a046:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a048:	2300      	movs	r3, #0
   2a04a:	617b      	str	r3, [r7, #20]
   2a04c:	e019      	b.n	2a082 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2a04e:	4b11      	ldr	r3, [pc, #68]	; (2a094 <_tcc_interrupt_handler+0x78>)
   2a050:	697a      	ldr	r2, [r7, #20]
   2a052:	0092      	lsls	r2, r2, #2
   2a054:	58d3      	ldr	r3, [r2, r3]
   2a056:	68fa      	ldr	r2, [r7, #12]
   2a058:	4013      	ands	r3, r2
   2a05a:	d00f      	beq.n	2a07c <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2a05c:	693a      	ldr	r2, [r7, #16]
   2a05e:	697b      	ldr	r3, [r7, #20]
   2a060:	009b      	lsls	r3, r3, #2
   2a062:	18d3      	adds	r3, r2, r3
   2a064:	3304      	adds	r3, #4
   2a066:	681b      	ldr	r3, [r3, #0]
   2a068:	693a      	ldr	r2, [r7, #16]
   2a06a:	0010      	movs	r0, r2
   2a06c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2a06e:	693b      	ldr	r3, [r7, #16]
   2a070:	681b      	ldr	r3, [r3, #0]
   2a072:	4a08      	ldr	r2, [pc, #32]	; (2a094 <_tcc_interrupt_handler+0x78>)
   2a074:	6979      	ldr	r1, [r7, #20]
   2a076:	0089      	lsls	r1, r1, #2
   2a078:	588a      	ldr	r2, [r1, r2]
   2a07a:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a07c:	697b      	ldr	r3, [r7, #20]
   2a07e:	3301      	adds	r3, #1
   2a080:	617b      	str	r3, [r7, #20]
   2a082:	697b      	ldr	r3, [r7, #20]
   2a084:	2b0b      	cmp	r3, #11
   2a086:	dde2      	ble.n	2a04e <_tcc_interrupt_handler+0x32>
		}
	}
}
   2a088:	46c0      	nop			; (mov r8, r8)
   2a08a:	46bd      	mov	sp, r7
   2a08c:	b006      	add	sp, #24
   2a08e:	bd80      	pop	{r7, pc}
   2a090:	20005be8 	.word	0x20005be8
   2a094:	00038fac 	.word	0x00038fac

0002a098 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2a098:	b580      	push	{r7, lr}
   2a09a:	b082      	sub	sp, #8
   2a09c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2a09e:	4b2f      	ldr	r3, [pc, #188]	; (2a15c <Reset_Handler+0xc4>)
   2a0a0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2a0a2:	4b2f      	ldr	r3, [pc, #188]	; (2a160 <Reset_Handler+0xc8>)
   2a0a4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2a0a6:	687a      	ldr	r2, [r7, #4]
   2a0a8:	683b      	ldr	r3, [r7, #0]
   2a0aa:	429a      	cmp	r2, r3
   2a0ac:	d00c      	beq.n	2a0c8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2a0ae:	e007      	b.n	2a0c0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2a0b0:	683b      	ldr	r3, [r7, #0]
   2a0b2:	1d1a      	adds	r2, r3, #4
   2a0b4:	603a      	str	r2, [r7, #0]
   2a0b6:	687a      	ldr	r2, [r7, #4]
   2a0b8:	1d11      	adds	r1, r2, #4
   2a0ba:	6079      	str	r1, [r7, #4]
   2a0bc:	6812      	ldr	r2, [r2, #0]
   2a0be:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2a0c0:	683a      	ldr	r2, [r7, #0]
   2a0c2:	4b28      	ldr	r3, [pc, #160]	; (2a164 <Reset_Handler+0xcc>)
   2a0c4:	429a      	cmp	r2, r3
   2a0c6:	d3f3      	bcc.n	2a0b0 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2a0c8:	4b27      	ldr	r3, [pc, #156]	; (2a168 <Reset_Handler+0xd0>)
   2a0ca:	603b      	str	r3, [r7, #0]
   2a0cc:	e004      	b.n	2a0d8 <Reset_Handler+0x40>
                *pDest++ = 0;
   2a0ce:	683b      	ldr	r3, [r7, #0]
   2a0d0:	1d1a      	adds	r2, r3, #4
   2a0d2:	603a      	str	r2, [r7, #0]
   2a0d4:	2200      	movs	r2, #0
   2a0d6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2a0d8:	683a      	ldr	r2, [r7, #0]
   2a0da:	4b24      	ldr	r3, [pc, #144]	; (2a16c <Reset_Handler+0xd4>)
   2a0dc:	429a      	cmp	r2, r3
   2a0de:	d3f6      	bcc.n	2a0ce <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2a0e0:	4b23      	ldr	r3, [pc, #140]	; (2a170 <Reset_Handler+0xd8>)
   2a0e2:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2a0e4:	4b23      	ldr	r3, [pc, #140]	; (2a174 <Reset_Handler+0xdc>)
   2a0e6:	687a      	ldr	r2, [r7, #4]
   2a0e8:	21ff      	movs	r1, #255	; 0xff
   2a0ea:	438a      	bics	r2, r1
   2a0ec:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2a0ee:	4a22      	ldr	r2, [pc, #136]	; (2a178 <Reset_Handler+0xe0>)
   2a0f0:	2390      	movs	r3, #144	; 0x90
   2a0f2:	005b      	lsls	r3, r3, #1
   2a0f4:	2102      	movs	r1, #2
   2a0f6:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2a0f8:	4a20      	ldr	r2, [pc, #128]	; (2a17c <Reset_Handler+0xe4>)
   2a0fa:	78d3      	ldrb	r3, [r2, #3]
   2a0fc:	2103      	movs	r1, #3
   2a0fe:	438b      	bics	r3, r1
   2a100:	1c19      	adds	r1, r3, #0
   2a102:	2302      	movs	r3, #2
   2a104:	430b      	orrs	r3, r1
   2a106:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2a108:	4a1c      	ldr	r2, [pc, #112]	; (2a17c <Reset_Handler+0xe4>)
   2a10a:	78d3      	ldrb	r3, [r2, #3]
   2a10c:	210c      	movs	r1, #12
   2a10e:	438b      	bics	r3, r1
   2a110:	1c19      	adds	r1, r3, #0
   2a112:	2308      	movs	r3, #8
   2a114:	430b      	orrs	r3, r1
   2a116:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2a118:	4a19      	ldr	r2, [pc, #100]	; (2a180 <Reset_Handler+0xe8>)
   2a11a:	7b93      	ldrb	r3, [r2, #14]
   2a11c:	2130      	movs	r1, #48	; 0x30
   2a11e:	438b      	bics	r3, r1
   2a120:	1c19      	adds	r1, r3, #0
   2a122:	2320      	movs	r3, #32
   2a124:	430b      	orrs	r3, r1
   2a126:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2a128:	4a15      	ldr	r2, [pc, #84]	; (2a180 <Reset_Handler+0xe8>)
   2a12a:	7b93      	ldrb	r3, [r2, #14]
   2a12c:	210c      	movs	r1, #12
   2a12e:	438b      	bics	r3, r1
   2a130:	1c19      	adds	r1, r3, #0
   2a132:	2308      	movs	r3, #8
   2a134:	430b      	orrs	r3, r1
   2a136:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2a138:	4a11      	ldr	r2, [pc, #68]	; (2a180 <Reset_Handler+0xe8>)
   2a13a:	7b93      	ldrb	r3, [r2, #14]
   2a13c:	2103      	movs	r1, #3
   2a13e:	438b      	bics	r3, r1
   2a140:	1c19      	adds	r1, r3, #0
   2a142:	2302      	movs	r3, #2
   2a144:	430b      	orrs	r3, r1
   2a146:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2a148:	4a0e      	ldr	r2, [pc, #56]	; (2a184 <Reset_Handler+0xec>)
   2a14a:	6853      	ldr	r3, [r2, #4]
   2a14c:	2180      	movs	r1, #128	; 0x80
   2a14e:	430b      	orrs	r3, r1
   2a150:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2a152:	4b0d      	ldr	r3, [pc, #52]	; (2a188 <Reset_Handler+0xf0>)
   2a154:	4798      	blx	r3

        /* Branch to main function */
        main();
   2a156:	4b0d      	ldr	r3, [pc, #52]	; (2a18c <Reset_Handler+0xf4>)
   2a158:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2a15a:	e7fe      	b.n	2a15a <Reset_Handler+0xc2>
   2a15c:	00039cf0 	.word	0x00039cf0
   2a160:	20000000 	.word	0x20000000
   2a164:	200002f0 	.word	0x200002f0
   2a168:	200002f0 	.word	0x200002f0
   2a16c:	20005c58 	.word	0x20005c58
   2a170:	00012000 	.word	0x00012000
   2a174:	e000ed00 	.word	0xe000ed00
   2a178:	41007000 	.word	0x41007000
   2a17c:	41005000 	.word	0x41005000
   2a180:	41004800 	.word	0x41004800
   2a184:	41004000 	.word	0x41004000
   2a188:	000344d9 	.word	0x000344d9
   2a18c:	000318cd 	.word	0x000318cd

0002a190 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2a190:	b580      	push	{r7, lr}
   2a192:	af00      	add	r7, sp, #0
  __asm volatile (
   2a194:	2004      	movs	r0, #4
   2a196:	4671      	mov	r1, lr
   2a198:	4208      	tst	r0, r1
   2a19a:	d002      	beq.n	2a1a2 <_MSP>
   2a19c:	f3ef 8009 	mrs	r0, PSP
   2a1a0:	e001      	b.n	2a1a6 <_HALT>

0002a1a2 <_MSP>:
   2a1a2:	f3ef 8008 	mrs	r0, MSP

0002a1a6 <_HALT>:
   2a1a6:	6941      	ldr	r1, [r0, #20]
   2a1a8:	e004      	b.n	2a1b4 <HardFault_HandlerC>
   2a1aa:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2a1ac:	46c0      	nop			; (mov r8, r8)
   2a1ae:	46bd      	mov	sp, r7
   2a1b0:	bd80      	pop	{r7, pc}
	...

0002a1b4 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2a1b4:	b580      	push	{r7, lr}
   2a1b6:	b090      	sub	sp, #64	; 0x40
   2a1b8:	af00      	add	r7, sp, #0
   2a1ba:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2a1bc:	687b      	ldr	r3, [r7, #4]
   2a1be:	681b      	ldr	r3, [r3, #0]
   2a1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2a1c2:	687b      	ldr	r3, [r7, #4]
   2a1c4:	685b      	ldr	r3, [r3, #4]
   2a1c6:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2a1c8:	687b      	ldr	r3, [r7, #4]
   2a1ca:	689b      	ldr	r3, [r3, #8]
   2a1cc:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2a1ce:	687b      	ldr	r3, [r7, #4]
   2a1d0:	68db      	ldr	r3, [r3, #12]
   2a1d2:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2a1d4:	687b      	ldr	r3, [r7, #4]
   2a1d6:	691b      	ldr	r3, [r3, #16]
   2a1d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2a1da:	687b      	ldr	r3, [r7, #4]
   2a1dc:	695b      	ldr	r3, [r3, #20]
   2a1de:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2a1e0:	687b      	ldr	r3, [r7, #4]
   2a1e2:	699b      	ldr	r3, [r3, #24]
   2a1e4:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2a1e6:	687b      	ldr	r3, [r7, #4]
   2a1e8:	69db      	ldr	r3, [r3, #28]
   2a1ea:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2a1ec:	4b0b      	ldr	r3, [pc, #44]	; (2a21c <HardFault_HandlerC+0x68>)
   2a1ee:	681b      	ldr	r3, [r3, #0]
   2a1f0:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2a1f2:	4b0b      	ldr	r3, [pc, #44]	; (2a220 <HardFault_HandlerC+0x6c>)
   2a1f4:	681b      	ldr	r3, [r3, #0]
   2a1f6:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2a1f8:	4b0a      	ldr	r3, [pc, #40]	; (2a224 <HardFault_HandlerC+0x70>)
   2a1fa:	681b      	ldr	r3, [r3, #0]
   2a1fc:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2a1fe:	4b0a      	ldr	r3, [pc, #40]	; (2a228 <HardFault_HandlerC+0x74>)
   2a200:	681b      	ldr	r3, [r3, #0]
   2a202:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2a204:	4b09      	ldr	r3, [pc, #36]	; (2a22c <HardFault_HandlerC+0x78>)
   2a206:	681b      	ldr	r3, [r3, #0]
   2a208:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2a20a:	4b09      	ldr	r3, [pc, #36]	; (2a230 <HardFault_HandlerC+0x7c>)
   2a20c:	681b      	ldr	r3, [r3, #0]
   2a20e:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2a210:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2a212:	46c0      	nop			; (mov r8, r8)
   2a214:	46bd      	mov	sp, r7
   2a216:	b010      	add	sp, #64	; 0x40
   2a218:	bd80      	pop	{r7, pc}
   2a21a:	46c0      	nop			; (mov r8, r8)
   2a21c:	e000ed28 	.word	0xe000ed28
   2a220:	e000ed2c 	.word	0xe000ed2c
   2a224:	e000ed30 	.word	0xe000ed30
   2a228:	e000ed3c 	.word	0xe000ed3c
   2a22c:	e000ed34 	.word	0xe000ed34
   2a230:	e000ed38 	.word	0xe000ed38

0002a234 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2a234:	b580      	push	{r7, lr}
   2a236:	b086      	sub	sp, #24
   2a238:	af00      	add	r7, sp, #0
   2a23a:	60f8      	str	r0, [r7, #12]
   2a23c:	60b9      	str	r1, [r7, #8]
   2a23e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2a240:	2300      	movs	r3, #0
   2a242:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2a244:	68fb      	ldr	r3, [r7, #12]
   2a246:	2b00      	cmp	r3, #0
   2a248:	d012      	beq.n	2a270 <_read+0x3c>
		return -1;
   2a24a:	2301      	movs	r3, #1
   2a24c:	425b      	negs	r3, r3
   2a24e:	e013      	b.n	2a278 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2a250:	4b0b      	ldr	r3, [pc, #44]	; (2a280 <_read+0x4c>)
   2a252:	681a      	ldr	r2, [r3, #0]
   2a254:	4b0b      	ldr	r3, [pc, #44]	; (2a284 <_read+0x50>)
   2a256:	681b      	ldr	r3, [r3, #0]
   2a258:	68b9      	ldr	r1, [r7, #8]
   2a25a:	0018      	movs	r0, r3
   2a25c:	4790      	blx	r2
		ptr++;
   2a25e:	68bb      	ldr	r3, [r7, #8]
   2a260:	3301      	adds	r3, #1
   2a262:	60bb      	str	r3, [r7, #8]
		nChars++;
   2a264:	697b      	ldr	r3, [r7, #20]
   2a266:	3301      	adds	r3, #1
   2a268:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2a26a:	687b      	ldr	r3, [r7, #4]
   2a26c:	3b01      	subs	r3, #1
   2a26e:	607b      	str	r3, [r7, #4]
   2a270:	687b      	ldr	r3, [r7, #4]
   2a272:	2b00      	cmp	r3, #0
   2a274:	dcec      	bgt.n	2a250 <_read+0x1c>
	}
	return nChars;
   2a276:	697b      	ldr	r3, [r7, #20]
}
   2a278:	0018      	movs	r0, r3
   2a27a:	46bd      	mov	sp, r7
   2a27c:	b006      	add	sp, #24
   2a27e:	bd80      	pop	{r7, pc}
   2a280:	20005bf4 	.word	0x20005bf4
   2a284:	20005bfc 	.word	0x20005bfc

0002a288 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2a288:	b580      	push	{r7, lr}
   2a28a:	b086      	sub	sp, #24
   2a28c:	af00      	add	r7, sp, #0
   2a28e:	60f8      	str	r0, [r7, #12]
   2a290:	60b9      	str	r1, [r7, #8]
   2a292:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2a294:	2300      	movs	r3, #0
   2a296:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2a298:	68fb      	ldr	r3, [r7, #12]
   2a29a:	2b01      	cmp	r3, #1
   2a29c:	d01d      	beq.n	2a2da <_write+0x52>
   2a29e:	68fb      	ldr	r3, [r7, #12]
   2a2a0:	2b02      	cmp	r3, #2
   2a2a2:	d01a      	beq.n	2a2da <_write+0x52>
   2a2a4:	68fb      	ldr	r3, [r7, #12]
   2a2a6:	2b03      	cmp	r3, #3
   2a2a8:	d017      	beq.n	2a2da <_write+0x52>
		return -1;
   2a2aa:	2301      	movs	r3, #1
   2a2ac:	425b      	negs	r3, r3
   2a2ae:	e018      	b.n	2a2e2 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2a2b0:	4b0e      	ldr	r3, [pc, #56]	; (2a2ec <_write+0x64>)
   2a2b2:	681a      	ldr	r2, [r3, #0]
   2a2b4:	4b0e      	ldr	r3, [pc, #56]	; (2a2f0 <_write+0x68>)
   2a2b6:	6818      	ldr	r0, [r3, #0]
   2a2b8:	68bb      	ldr	r3, [r7, #8]
   2a2ba:	1c59      	adds	r1, r3, #1
   2a2bc:	60b9      	str	r1, [r7, #8]
   2a2be:	781b      	ldrb	r3, [r3, #0]
   2a2c0:	0019      	movs	r1, r3
   2a2c2:	4790      	blx	r2
   2a2c4:	1e03      	subs	r3, r0, #0
   2a2c6:	da02      	bge.n	2a2ce <_write+0x46>
			return -1;
   2a2c8:	2301      	movs	r3, #1
   2a2ca:	425b      	negs	r3, r3
   2a2cc:	e009      	b.n	2a2e2 <_write+0x5a>
		}
		++nChars;
   2a2ce:	697b      	ldr	r3, [r7, #20]
   2a2d0:	3301      	adds	r3, #1
   2a2d2:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2a2d4:	687b      	ldr	r3, [r7, #4]
   2a2d6:	3b01      	subs	r3, #1
   2a2d8:	607b      	str	r3, [r7, #4]
   2a2da:	687b      	ldr	r3, [r7, #4]
   2a2dc:	2b00      	cmp	r3, #0
   2a2de:	d1e7      	bne.n	2a2b0 <_write+0x28>
	}
	return nChars;
   2a2e0:	697b      	ldr	r3, [r7, #20]
}
   2a2e2:	0018      	movs	r0, r3
   2a2e4:	46bd      	mov	sp, r7
   2a2e6:	b006      	add	sp, #24
   2a2e8:	bd80      	pop	{r7, pc}
   2a2ea:	46c0      	nop			; (mov r8, r8)
   2a2ec:	20005bf8 	.word	0x20005bf8
   2a2f0:	20005bfc 	.word	0x20005bfc

0002a2f4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2a2f4:	b580      	push	{r7, lr}
   2a2f6:	b084      	sub	sp, #16
   2a2f8:	af00      	add	r7, sp, #0
   2a2fa:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2a2fc:	4b0a      	ldr	r3, [pc, #40]	; (2a328 <_sbrk+0x34>)
   2a2fe:	681b      	ldr	r3, [r3, #0]
   2a300:	2b00      	cmp	r3, #0
   2a302:	d102      	bne.n	2a30a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2a304:	4b08      	ldr	r3, [pc, #32]	; (2a328 <_sbrk+0x34>)
   2a306:	4a09      	ldr	r2, [pc, #36]	; (2a32c <_sbrk+0x38>)
   2a308:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2a30a:	4b07      	ldr	r3, [pc, #28]	; (2a328 <_sbrk+0x34>)
   2a30c:	681b      	ldr	r3, [r3, #0]
   2a30e:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2a310:	4b05      	ldr	r3, [pc, #20]	; (2a328 <_sbrk+0x34>)
   2a312:	681a      	ldr	r2, [r3, #0]
   2a314:	687b      	ldr	r3, [r7, #4]
   2a316:	18d2      	adds	r2, r2, r3
   2a318:	4b03      	ldr	r3, [pc, #12]	; (2a328 <_sbrk+0x34>)
   2a31a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2a31c:	68fb      	ldr	r3, [r7, #12]
}
   2a31e:	0018      	movs	r0, r3
   2a320:	46bd      	mov	sp, r7
   2a322:	b004      	add	sp, #16
   2a324:	bd80      	pop	{r7, pc}
   2a326:	46c0      	nop			; (mov r8, r8)
   2a328:	200042c0 	.word	0x200042c0
   2a32c:	20007c58 	.word	0x20007c58

0002a330 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2a330:	b580      	push	{r7, lr}
   2a332:	b082      	sub	sp, #8
   2a334:	af00      	add	r7, sp, #0
   2a336:	6078      	str	r0, [r7, #4]
	return -1;
   2a338:	2301      	movs	r3, #1
   2a33a:	425b      	negs	r3, r3
}
   2a33c:	0018      	movs	r0, r3
   2a33e:	46bd      	mov	sp, r7
   2a340:	b002      	add	sp, #8
   2a342:	bd80      	pop	{r7, pc}

0002a344 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2a344:	b580      	push	{r7, lr}
   2a346:	b082      	sub	sp, #8
   2a348:	af00      	add	r7, sp, #0
   2a34a:	6078      	str	r0, [r7, #4]
   2a34c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2a34e:	683b      	ldr	r3, [r7, #0]
   2a350:	2280      	movs	r2, #128	; 0x80
   2a352:	0192      	lsls	r2, r2, #6
   2a354:	605a      	str	r2, [r3, #4]

	return 0;
   2a356:	2300      	movs	r3, #0
}
   2a358:	0018      	movs	r0, r3
   2a35a:	46bd      	mov	sp, r7
   2a35c:	b002      	add	sp, #8
   2a35e:	bd80      	pop	{r7, pc}

0002a360 <_isatty>:

extern int _isatty(int file)
{
   2a360:	b580      	push	{r7, lr}
   2a362:	b082      	sub	sp, #8
   2a364:	af00      	add	r7, sp, #0
   2a366:	6078      	str	r0, [r7, #4]
	return 1;
   2a368:	2301      	movs	r3, #1
}
   2a36a:	0018      	movs	r0, r3
   2a36c:	46bd      	mov	sp, r7
   2a36e:	b002      	add	sp, #8
   2a370:	bd80      	pop	{r7, pc}

0002a372 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2a372:	b580      	push	{r7, lr}
   2a374:	b084      	sub	sp, #16
   2a376:	af00      	add	r7, sp, #0
   2a378:	60f8      	str	r0, [r7, #12]
   2a37a:	60b9      	str	r1, [r7, #8]
   2a37c:	607a      	str	r2, [r7, #4]
	return 0;
   2a37e:	2300      	movs	r3, #0
}
   2a380:	0018      	movs	r0, r3
   2a382:	46bd      	mov	sp, r7
   2a384:	b004      	add	sp, #16
   2a386:	bd80      	pop	{r7, pc}

0002a388 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2a388:	b580      	push	{r7, lr}
   2a38a:	b082      	sub	sp, #8
   2a38c:	af00      	add	r7, sp, #0
   2a38e:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2a390:	687b      	ldr	r3, [r7, #4]
   2a392:	2200      	movs	r2, #0
   2a394:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2a396:	687b      	ldr	r3, [r7, #4]
   2a398:	2200      	movs	r2, #0
   2a39a:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2a39c:	687b      	ldr	r3, [r7, #4]
   2a39e:	2200      	movs	r2, #0
   2a3a0:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2a3a2:	687b      	ldr	r3, [r7, #4]
   2a3a4:	2200      	movs	r2, #0
   2a3a6:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2a3a8:	687b      	ldr	r3, [r7, #4]
   2a3aa:	2201      	movs	r2, #1
   2a3ac:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2a3ae:	687b      	ldr	r3, [r7, #4]
   2a3b0:	2201      	movs	r2, #1
   2a3b2:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2a3b4:	687b      	ldr	r3, [r7, #4]
   2a3b6:	22fa      	movs	r2, #250	; 0xfa
   2a3b8:	00d2      	lsls	r2, r2, #3
   2a3ba:	80da      	strh	r2, [r3, #6]
}
   2a3bc:	46c0      	nop			; (mov r8, r8)
   2a3be:	46bd      	mov	sp, r7
   2a3c0:	b002      	add	sp, #8
   2a3c2:	bd80      	pop	{r7, pc}

0002a3c4 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2a3c4:	b580      	push	{r7, lr}
   2a3c6:	b086      	sub	sp, #24
   2a3c8:	af00      	add	r7, sp, #0
   2a3ca:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2a3cc:	230c      	movs	r3, #12
   2a3ce:	18fb      	adds	r3, r7, r3
   2a3d0:	0018      	movs	r0, r3
   2a3d2:	4b23      	ldr	r3, [pc, #140]	; (2a460 <rtc_calendar_get_config_defaults+0x9c>)
   2a3d4:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2a3d6:	687b      	ldr	r3, [r7, #4]
   2a3d8:	22a0      	movs	r2, #160	; 0xa0
   2a3da:	0112      	lsls	r2, r2, #4
   2a3dc:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2a3de:	687b      	ldr	r3, [r7, #4]
   2a3e0:	2200      	movs	r2, #0
   2a3e2:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2a3e4:	687b      	ldr	r3, [r7, #4]
   2a3e6:	2200      	movs	r2, #0
   2a3e8:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2a3ea:	687b      	ldr	r3, [r7, #4]
   2a3ec:	2200      	movs	r2, #0
   2a3ee:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2a3f0:	687b      	ldr	r3, [r7, #4]
   2a3f2:	22fa      	movs	r2, #250	; 0xfa
   2a3f4:	00d2      	lsls	r2, r2, #3
   2a3f6:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2a3f8:	2317      	movs	r3, #23
   2a3fa:	18fb      	adds	r3, r7, r3
   2a3fc:	2200      	movs	r2, #0
   2a3fe:	701a      	strb	r2, [r3, #0]
   2a400:	e025      	b.n	2a44e <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2a402:	2317      	movs	r3, #23
   2a404:	18fb      	adds	r3, r7, r3
   2a406:	781a      	ldrb	r2, [r3, #0]
   2a408:	6879      	ldr	r1, [r7, #4]
   2a40a:	2008      	movs	r0, #8
   2a40c:	0013      	movs	r3, r2
   2a40e:	009b      	lsls	r3, r3, #2
   2a410:	189b      	adds	r3, r3, r2
   2a412:	005b      	lsls	r3, r3, #1
   2a414:	18cb      	adds	r3, r1, r3
   2a416:	181a      	adds	r2, r3, r0
   2a418:	230c      	movs	r3, #12
   2a41a:	18fb      	adds	r3, r7, r3
   2a41c:	0010      	movs	r0, r2
   2a41e:	0019      	movs	r1, r3
   2a420:	2308      	movs	r3, #8
   2a422:	001a      	movs	r2, r3
   2a424:	4b0f      	ldr	r3, [pc, #60]	; (2a464 <rtc_calendar_get_config_defaults+0xa0>)
   2a426:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2a428:	2317      	movs	r3, #23
   2a42a:	18fb      	adds	r3, r7, r3
   2a42c:	781a      	ldrb	r2, [r3, #0]
   2a42e:	6879      	ldr	r1, [r7, #4]
   2a430:	0013      	movs	r3, r2
   2a432:	009b      	lsls	r3, r3, #2
   2a434:	189b      	adds	r3, r3, r2
   2a436:	005b      	lsls	r3, r3, #1
   2a438:	18cb      	adds	r3, r1, r3
   2a43a:	3310      	adds	r3, #16
   2a43c:	2206      	movs	r2, #6
   2a43e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2a440:	2317      	movs	r3, #23
   2a442:	18fb      	adds	r3, r7, r3
   2a444:	781a      	ldrb	r2, [r3, #0]
   2a446:	2317      	movs	r3, #23
   2a448:	18fb      	adds	r3, r7, r3
   2a44a:	3201      	adds	r2, #1
   2a44c:	701a      	strb	r2, [r3, #0]
   2a44e:	2317      	movs	r3, #23
   2a450:	18fb      	adds	r3, r7, r3
   2a452:	781b      	ldrb	r3, [r3, #0]
   2a454:	2b00      	cmp	r3, #0
   2a456:	d0d4      	beq.n	2a402 <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2a458:	46c0      	nop			; (mov r8, r8)
   2a45a:	46bd      	mov	sp, r7
   2a45c:	b006      	add	sp, #24
   2a45e:	bd80      	pop	{r7, pc}
   2a460:	0002a389 	.word	0x0002a389
   2a464:	00034549 	.word	0x00034549

0002a468 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2a468:	b580      	push	{r7, lr}
   2a46a:	b088      	sub	sp, #32
   2a46c:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2a46e:	230c      	movs	r3, #12
   2a470:	18fb      	adds	r3, r7, r3
   2a472:	0018      	movs	r0, r3
   2a474:	4b1a      	ldr	r3, [pc, #104]	; (2a4e0 <configure_rtc_calendar+0x78>)
   2a476:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2a478:	1d3b      	adds	r3, r7, #4
   2a47a:	0018      	movs	r0, r3
   2a47c:	4b19      	ldr	r3, [pc, #100]	; (2a4e4 <configure_rtc_calendar+0x7c>)
   2a47e:	4798      	blx	r3
	init_time.year   = 2014;
   2a480:	1d3b      	adds	r3, r7, #4
   2a482:	4a19      	ldr	r2, [pc, #100]	; (2a4e8 <configure_rtc_calendar+0x80>)
   2a484:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2a486:	1d3b      	adds	r3, r7, #4
   2a488:	2201      	movs	r2, #1
   2a48a:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2a48c:	1d3b      	adds	r3, r7, #4
   2a48e:	2201      	movs	r2, #1
   2a490:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2a492:	1d3b      	adds	r3, r7, #4
   2a494:	2200      	movs	r2, #0
   2a496:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2a498:	1d3b      	adds	r3, r7, #4
   2a49a:	2200      	movs	r2, #0
   2a49c:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2a49e:	1d3b      	adds	r3, r7, #4
   2a4a0:	2204      	movs	r2, #4
   2a4a2:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2a4a4:	230c      	movs	r3, #12
   2a4a6:	18fb      	adds	r3, r7, r3
   2a4a8:	2201      	movs	r2, #1
   2a4aa:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2a4ac:	230c      	movs	r3, #12
   2a4ae:	18fb      	adds	r3, r7, r3
   2a4b0:	1d3a      	adds	r2, r7, #4
   2a4b2:	3308      	adds	r3, #8
   2a4b4:	ca03      	ldmia	r2!, {r0, r1}
   2a4b6:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2a4b8:	230c      	movs	r3, #12
   2a4ba:	18fb      	adds	r3, r7, r3
   2a4bc:	2206      	movs	r2, #6
   2a4be:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2a4c0:	230c      	movs	r3, #12
   2a4c2:	18fa      	adds	r2, r7, r3
   2a4c4:	4909      	ldr	r1, [pc, #36]	; (2a4ec <configure_rtc_calendar+0x84>)
   2a4c6:	4b0a      	ldr	r3, [pc, #40]	; (2a4f0 <configure_rtc_calendar+0x88>)
   2a4c8:	0018      	movs	r0, r3
   2a4ca:	4b0a      	ldr	r3, [pc, #40]	; (2a4f4 <configure_rtc_calendar+0x8c>)
   2a4cc:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2a4ce:	4b08      	ldr	r3, [pc, #32]	; (2a4f0 <configure_rtc_calendar+0x88>)
   2a4d0:	0018      	movs	r0, r3
   2a4d2:	4b09      	ldr	r3, [pc, #36]	; (2a4f8 <configure_rtc_calendar+0x90>)
   2a4d4:	4798      	blx	r3
}
   2a4d6:	46c0      	nop			; (mov r8, r8)
   2a4d8:	46bd      	mov	sp, r7
   2a4da:	b008      	add	sp, #32
   2a4dc:	bd80      	pop	{r7, pc}
   2a4de:	46c0      	nop			; (mov r8, r8)
   2a4e0:	0002a3c5 	.word	0x0002a3c5
   2a4e4:	0002a389 	.word	0x0002a389
   2a4e8:	000007de 	.word	0x000007de
   2a4ec:	40001400 	.word	0x40001400
   2a4f0:	20005c00 	.word	0x20005c00
   2a4f4:	00025e79 	.word	0x00025e79
   2a4f8:	00025ba5 	.word	0x00025ba5

0002a4fc <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2a4fc:	b590      	push	{r4, r7, lr}
   2a4fe:	b085      	sub	sp, #20
   2a500:	af00      	add	r7, sp, #0
   2a502:	0002      	movs	r2, r0
   2a504:	1dfb      	adds	r3, r7, #7
   2a506:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2a508:	4b1a      	ldr	r3, [pc, #104]	; (2a574 <disk_initialize+0x78>)
   2a50a:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2a50c:	1dfb      	adds	r3, r7, #7
   2a50e:	781b      	ldrb	r3, [r3, #0]
   2a510:	2b01      	cmp	r3, #1
   2a512:	d901      	bls.n	2a518 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2a514:	2301      	movs	r3, #1
   2a516:	e029      	b.n	2a56c <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2a518:	2300      	movs	r3, #0
   2a51a:	60fb      	str	r3, [r7, #12]
   2a51c:	e010      	b.n	2a540 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2a51e:	230b      	movs	r3, #11
   2a520:	18fc      	adds	r4, r7, r3
   2a522:	1dfb      	adds	r3, r7, #7
   2a524:	781b      	ldrb	r3, [r3, #0]
   2a526:	0018      	movs	r0, r3
   2a528:	4b13      	ldr	r3, [pc, #76]	; (2a578 <disk_initialize+0x7c>)
   2a52a:	4798      	blx	r3
   2a52c:	0003      	movs	r3, r0
   2a52e:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2a530:	230b      	movs	r3, #11
   2a532:	18fb      	adds	r3, r7, r3
   2a534:	781b      	ldrb	r3, [r3, #0]
   2a536:	2b03      	cmp	r3, #3
   2a538:	d106      	bne.n	2a548 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2a53a:	68fb      	ldr	r3, [r7, #12]
   2a53c:	3301      	adds	r3, #1
   2a53e:	60fb      	str	r3, [r7, #12]
   2a540:	68fb      	ldr	r3, [r7, #12]
   2a542:	2b01      	cmp	r3, #1
   2a544:	ddeb      	ble.n	2a51e <disk_initialize+0x22>
   2a546:	e000      	b.n	2a54a <disk_initialize+0x4e>
			break;
   2a548:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2a54a:	230b      	movs	r3, #11
   2a54c:	18fb      	adds	r3, r7, r3
   2a54e:	781b      	ldrb	r3, [r3, #0]
   2a550:	2b00      	cmp	r3, #0
   2a552:	d001      	beq.n	2a558 <disk_initialize+0x5c>
		return STA_NOINIT;
   2a554:	2301      	movs	r3, #1
   2a556:	e009      	b.n	2a56c <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2a558:	1dfb      	adds	r3, r7, #7
   2a55a:	781b      	ldrb	r3, [r3, #0]
   2a55c:	0018      	movs	r0, r3
   2a55e:	4b07      	ldr	r3, [pc, #28]	; (2a57c <disk_initialize+0x80>)
   2a560:	4798      	blx	r3
   2a562:	1e03      	subs	r3, r0, #0
   2a564:	d001      	beq.n	2a56a <disk_initialize+0x6e>
		return STA_PROTECT;
   2a566:	2304      	movs	r3, #4
   2a568:	e000      	b.n	2a56c <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2a56a:	2300      	movs	r3, #0
}
   2a56c:	0018      	movs	r0, r3
   2a56e:	46bd      	mov	sp, r7
   2a570:	b005      	add	sp, #20
   2a572:	bd90      	pop	{r4, r7, pc}
   2a574:	0002a469 	.word	0x0002a469
   2a578:	000250a1 	.word	0x000250a1
   2a57c:	00025159 	.word	0x00025159

0002a580 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2a580:	b580      	push	{r7, lr}
   2a582:	b082      	sub	sp, #8
   2a584:	af00      	add	r7, sp, #0
   2a586:	0002      	movs	r2, r0
   2a588:	1dfb      	adds	r3, r7, #7
   2a58a:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2a58c:	1dfb      	adds	r3, r7, #7
   2a58e:	781b      	ldrb	r3, [r3, #0]
   2a590:	0018      	movs	r0, r3
   2a592:	4b08      	ldr	r3, [pc, #32]	; (2a5b4 <disk_status+0x34>)
   2a594:	4798      	blx	r3
   2a596:	1e03      	subs	r3, r0, #0
   2a598:	d002      	beq.n	2a5a0 <disk_status+0x20>
   2a59a:	2b02      	cmp	r3, #2
   2a59c:	d002      	beq.n	2a5a4 <disk_status+0x24>
   2a59e:	e003      	b.n	2a5a8 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2a5a0:	2300      	movs	r3, #0
   2a5a2:	e002      	b.n	2a5aa <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2a5a4:	2303      	movs	r3, #3
   2a5a6:	e000      	b.n	2a5aa <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2a5a8:	2301      	movs	r3, #1
	}
}
   2a5aa:	0018      	movs	r0, r3
   2a5ac:	46bd      	mov	sp, r7
   2a5ae:	b002      	add	sp, #8
   2a5b0:	bd80      	pop	{r7, pc}
   2a5b2:	46c0      	nop			; (mov r8, r8)
   2a5b4:	000250a1 	.word	0x000250a1

0002a5b8 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2a5b8:	b590      	push	{r4, r7, lr}
   2a5ba:	b089      	sub	sp, #36	; 0x24
   2a5bc:	af00      	add	r7, sp, #0
   2a5be:	60b9      	str	r1, [r7, #8]
   2a5c0:	607a      	str	r2, [r7, #4]
   2a5c2:	0019      	movs	r1, r3
   2a5c4:	230f      	movs	r3, #15
   2a5c6:	18fb      	adds	r3, r7, r3
   2a5c8:	1c02      	adds	r2, r0, #0
   2a5ca:	701a      	strb	r2, [r3, #0]
   2a5cc:	230e      	movs	r3, #14
   2a5ce:	18fb      	adds	r3, r7, r3
   2a5d0:	1c0a      	adds	r2, r1, #0
   2a5d2:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2a5d4:	231b      	movs	r3, #27
   2a5d6:	18fc      	adds	r4, r7, r3
   2a5d8:	230f      	movs	r3, #15
   2a5da:	18fb      	adds	r3, r7, r3
   2a5dc:	781b      	ldrb	r3, [r3, #0]
   2a5de:	0018      	movs	r0, r3
   2a5e0:	4b28      	ldr	r3, [pc, #160]	; (2a684 <disk_read+0xcc>)
   2a5e2:	4798      	blx	r3
   2a5e4:	0003      	movs	r3, r0
   2a5e6:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2a5e8:	231b      	movs	r3, #27
   2a5ea:	18fb      	adds	r3, r7, r3
   2a5ec:	781b      	ldrb	r3, [r3, #0]
   2a5ee:	2b00      	cmp	r3, #0
   2a5f0:	d101      	bne.n	2a5f6 <disk_read+0x3e>
		return RES_ERROR;
   2a5f2:	2301      	movs	r3, #1
   2a5f4:	e042      	b.n	2a67c <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2a5f6:	2314      	movs	r3, #20
   2a5f8:	18fa      	adds	r2, r7, r3
   2a5fa:	230f      	movs	r3, #15
   2a5fc:	18fb      	adds	r3, r7, r3
   2a5fe:	781b      	ldrb	r3, [r3, #0]
   2a600:	0011      	movs	r1, r2
   2a602:	0018      	movs	r0, r3
   2a604:	4b20      	ldr	r3, [pc, #128]	; (2a688 <disk_read+0xd0>)
   2a606:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2a608:	230e      	movs	r3, #14
   2a60a:	18fb      	adds	r3, r7, r3
   2a60c:	781b      	ldrb	r3, [r3, #0]
   2a60e:	221b      	movs	r2, #27
   2a610:	18ba      	adds	r2, r7, r2
   2a612:	7812      	ldrb	r2, [r2, #0]
   2a614:	4353      	muls	r3, r2
   2a616:	001a      	movs	r2, r3
   2a618:	687b      	ldr	r3, [r7, #4]
   2a61a:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2a61c:	697b      	ldr	r3, [r7, #20]
   2a61e:	3301      	adds	r3, #1
   2a620:	211b      	movs	r1, #27
   2a622:	1879      	adds	r1, r7, r1
   2a624:	7809      	ldrb	r1, [r1, #0]
   2a626:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2a628:	429a      	cmp	r2, r3
   2a62a:	d901      	bls.n	2a630 <disk_read+0x78>
		return RES_PARERR;
   2a62c:	2304      	movs	r3, #4
   2a62e:	e025      	b.n	2a67c <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2a630:	2300      	movs	r3, #0
   2a632:	61fb      	str	r3, [r7, #28]
   2a634:	e01b      	b.n	2a66e <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2a636:	231b      	movs	r3, #27
   2a638:	18fb      	adds	r3, r7, r3
   2a63a:	781b      	ldrb	r3, [r3, #0]
   2a63c:	69fa      	ldr	r2, [r7, #28]
   2a63e:	435a      	muls	r2, r3
   2a640:	687b      	ldr	r3, [r7, #4]
   2a642:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2a644:	231b      	movs	r3, #27
   2a646:	18fb      	adds	r3, r7, r3
   2a648:	781b      	ldrb	r3, [r3, #0]
   2a64a:	69fa      	ldr	r2, [r7, #28]
   2a64c:	4353      	muls	r3, r2
   2a64e:	025b      	lsls	r3, r3, #9
   2a650:	68ba      	ldr	r2, [r7, #8]
   2a652:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2a654:	230f      	movs	r3, #15
   2a656:	18fb      	adds	r3, r7, r3
   2a658:	781b      	ldrb	r3, [r3, #0]
   2a65a:	0018      	movs	r0, r3
   2a65c:	4b0b      	ldr	r3, [pc, #44]	; (2a68c <disk_read+0xd4>)
   2a65e:	4798      	blx	r3
   2a660:	1e03      	subs	r3, r0, #0
   2a662:	d001      	beq.n	2a668 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2a664:	2301      	movs	r3, #1
   2a666:	e009      	b.n	2a67c <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2a668:	69fb      	ldr	r3, [r7, #28]
   2a66a:	3301      	adds	r3, #1
   2a66c:	61fb      	str	r3, [r7, #28]
   2a66e:	230e      	movs	r3, #14
   2a670:	18fb      	adds	r3, r7, r3
   2a672:	781a      	ldrb	r2, [r3, #0]
   2a674:	69fb      	ldr	r3, [r7, #28]
   2a676:	429a      	cmp	r2, r3
   2a678:	d8dd      	bhi.n	2a636 <disk_read+0x7e>
		}
	}

	return RES_OK;
   2a67a:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2a67c:	0018      	movs	r0, r3
   2a67e:	46bd      	mov	sp, r7
   2a680:	b009      	add	sp, #36	; 0x24
   2a682:	bd90      	pop	{r4, r7, pc}
   2a684:	0002512d 	.word	0x0002512d
   2a688:	000250e1 	.word	0x000250e1
   2a68c:	000251a1 	.word	0x000251a1

0002a690 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2a690:	b590      	push	{r4, r7, lr}
   2a692:	b089      	sub	sp, #36	; 0x24
   2a694:	af00      	add	r7, sp, #0
   2a696:	60b9      	str	r1, [r7, #8]
   2a698:	607a      	str	r2, [r7, #4]
   2a69a:	0019      	movs	r1, r3
   2a69c:	230f      	movs	r3, #15
   2a69e:	18fb      	adds	r3, r7, r3
   2a6a0:	1c02      	adds	r2, r0, #0
   2a6a2:	701a      	strb	r2, [r3, #0]
   2a6a4:	230e      	movs	r3, #14
   2a6a6:	18fb      	adds	r3, r7, r3
   2a6a8:	1c0a      	adds	r2, r1, #0
   2a6aa:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2a6ac:	231b      	movs	r3, #27
   2a6ae:	18fc      	adds	r4, r7, r3
   2a6b0:	230f      	movs	r3, #15
   2a6b2:	18fb      	adds	r3, r7, r3
   2a6b4:	781b      	ldrb	r3, [r3, #0]
   2a6b6:	0018      	movs	r0, r3
   2a6b8:	4b28      	ldr	r3, [pc, #160]	; (2a75c <disk_write+0xcc>)
   2a6ba:	4798      	blx	r3
   2a6bc:	0003      	movs	r3, r0
   2a6be:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2a6c0:	231b      	movs	r3, #27
   2a6c2:	18fb      	adds	r3, r7, r3
   2a6c4:	781b      	ldrb	r3, [r3, #0]
   2a6c6:	2b00      	cmp	r3, #0
   2a6c8:	d101      	bne.n	2a6ce <disk_write+0x3e>
		return RES_ERROR;
   2a6ca:	2301      	movs	r3, #1
   2a6cc:	e042      	b.n	2a754 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2a6ce:	2314      	movs	r3, #20
   2a6d0:	18fa      	adds	r2, r7, r3
   2a6d2:	230f      	movs	r3, #15
   2a6d4:	18fb      	adds	r3, r7, r3
   2a6d6:	781b      	ldrb	r3, [r3, #0]
   2a6d8:	0011      	movs	r1, r2
   2a6da:	0018      	movs	r0, r3
   2a6dc:	4b20      	ldr	r3, [pc, #128]	; (2a760 <disk_write+0xd0>)
   2a6de:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2a6e0:	230e      	movs	r3, #14
   2a6e2:	18fb      	adds	r3, r7, r3
   2a6e4:	781b      	ldrb	r3, [r3, #0]
   2a6e6:	221b      	movs	r2, #27
   2a6e8:	18ba      	adds	r2, r7, r2
   2a6ea:	7812      	ldrb	r2, [r2, #0]
   2a6ec:	4353      	muls	r3, r2
   2a6ee:	001a      	movs	r2, r3
   2a6f0:	687b      	ldr	r3, [r7, #4]
   2a6f2:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2a6f4:	697b      	ldr	r3, [r7, #20]
   2a6f6:	3301      	adds	r3, #1
   2a6f8:	211b      	movs	r1, #27
   2a6fa:	1879      	adds	r1, r7, r1
   2a6fc:	7809      	ldrb	r1, [r1, #0]
   2a6fe:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2a700:	429a      	cmp	r2, r3
   2a702:	d901      	bls.n	2a708 <disk_write+0x78>
		return RES_PARERR;
   2a704:	2304      	movs	r3, #4
   2a706:	e025      	b.n	2a754 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2a708:	2300      	movs	r3, #0
   2a70a:	61fb      	str	r3, [r7, #28]
   2a70c:	e01b      	b.n	2a746 <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2a70e:	231b      	movs	r3, #27
   2a710:	18fb      	adds	r3, r7, r3
   2a712:	781b      	ldrb	r3, [r3, #0]
   2a714:	69fa      	ldr	r2, [r7, #28]
   2a716:	435a      	muls	r2, r3
   2a718:	687b      	ldr	r3, [r7, #4]
   2a71a:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2a71c:	231b      	movs	r3, #27
   2a71e:	18fb      	adds	r3, r7, r3
   2a720:	781b      	ldrb	r3, [r3, #0]
   2a722:	69fa      	ldr	r2, [r7, #28]
   2a724:	4353      	muls	r3, r2
   2a726:	025b      	lsls	r3, r3, #9
   2a728:	68ba      	ldr	r2, [r7, #8]
   2a72a:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2a72c:	230f      	movs	r3, #15
   2a72e:	18fb      	adds	r3, r7, r3
   2a730:	781b      	ldrb	r3, [r3, #0]
   2a732:	0018      	movs	r0, r3
   2a734:	4b0b      	ldr	r3, [pc, #44]	; (2a764 <disk_write+0xd4>)
   2a736:	4798      	blx	r3
   2a738:	1e03      	subs	r3, r0, #0
   2a73a:	d001      	beq.n	2a740 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2a73c:	2301      	movs	r3, #1
   2a73e:	e009      	b.n	2a754 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2a740:	69fb      	ldr	r3, [r7, #28]
   2a742:	3301      	adds	r3, #1
   2a744:	61fb      	str	r3, [r7, #28]
   2a746:	230e      	movs	r3, #14
   2a748:	18fb      	adds	r3, r7, r3
   2a74a:	781a      	ldrb	r2, [r3, #0]
   2a74c:	69fb      	ldr	r3, [r7, #28]
   2a74e:	429a      	cmp	r2, r3
   2a750:	d8dd      	bhi.n	2a70e <disk_write+0x7e>
		}
	}

	return RES_OK;
   2a752:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2a754:	0018      	movs	r0, r3
   2a756:	46bd      	mov	sp, r7
   2a758:	b009      	add	sp, #36	; 0x24
   2a75a:	bd90      	pop	{r4, r7, pc}
   2a75c:	0002512d 	.word	0x0002512d
   2a760:	000250e1 	.word	0x000250e1
   2a764:	000251f5 	.word	0x000251f5

0002a768 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2a768:	b590      	push	{r4, r7, lr}
   2a76a:	b085      	sub	sp, #20
   2a76c:	af00      	add	r7, sp, #0
   2a76e:	603a      	str	r2, [r7, #0]
   2a770:	1dfb      	adds	r3, r7, #7
   2a772:	1c02      	adds	r2, r0, #0
   2a774:	701a      	strb	r2, [r3, #0]
   2a776:	1dbb      	adds	r3, r7, #6
   2a778:	1c0a      	adds	r2, r1, #0
   2a77a:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2a77c:	230f      	movs	r3, #15
   2a77e:	18fb      	adds	r3, r7, r3
   2a780:	2204      	movs	r2, #4
   2a782:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2a784:	1dbb      	adds	r3, r7, #6
   2a786:	781b      	ldrb	r3, [r3, #0]
   2a788:	2b01      	cmp	r3, #1
   2a78a:	d00f      	beq.n	2a7ac <disk_ioctl+0x44>
   2a78c:	dc02      	bgt.n	2a794 <disk_ioctl+0x2c>
   2a78e:	2b00      	cmp	r3, #0
   2a790:	d044      	beq.n	2a81c <disk_ioctl+0xb4>
   2a792:	e054      	b.n	2a83e <disk_ioctl+0xd6>
   2a794:	2b02      	cmp	r3, #2
   2a796:	d01a      	beq.n	2a7ce <disk_ioctl+0x66>
   2a798:	2b03      	cmp	r3, #3
   2a79a:	d150      	bne.n	2a83e <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2a79c:	683b      	ldr	r3, [r7, #0]
   2a79e:	2201      	movs	r2, #1
   2a7a0:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2a7a2:	230f      	movs	r3, #15
   2a7a4:	18fb      	adds	r3, r7, r3
   2a7a6:	2200      	movs	r2, #0
   2a7a8:	701a      	strb	r2, [r3, #0]
		break;
   2a7aa:	e04c      	b.n	2a846 <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2a7ac:	2308      	movs	r3, #8
   2a7ae:	18fa      	adds	r2, r7, r3
   2a7b0:	1dfb      	adds	r3, r7, #7
   2a7b2:	781b      	ldrb	r3, [r3, #0]
   2a7b4:	0011      	movs	r1, r2
   2a7b6:	0018      	movs	r0, r3
   2a7b8:	4b26      	ldr	r3, [pc, #152]	; (2a854 <disk_ioctl+0xec>)
   2a7ba:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2a7bc:	68bb      	ldr	r3, [r7, #8]
   2a7be:	1c5a      	adds	r2, r3, #1
   2a7c0:	683b      	ldr	r3, [r7, #0]
   2a7c2:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2a7c4:	230f      	movs	r3, #15
   2a7c6:	18fb      	adds	r3, r7, r3
   2a7c8:	2200      	movs	r2, #0
   2a7ca:	701a      	strb	r2, [r3, #0]
	}
	break;
   2a7cc:	e03b      	b.n	2a846 <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2a7ce:	230e      	movs	r3, #14
   2a7d0:	18fc      	adds	r4, r7, r3
   2a7d2:	1dfb      	adds	r3, r7, #7
   2a7d4:	781b      	ldrb	r3, [r3, #0]
   2a7d6:	0018      	movs	r0, r3
   2a7d8:	4b1f      	ldr	r3, [pc, #124]	; (2a858 <disk_ioctl+0xf0>)
   2a7da:	4798      	blx	r3
   2a7dc:	0003      	movs	r3, r0
   2a7de:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2a7e0:	230e      	movs	r3, #14
   2a7e2:	18fb      	adds	r3, r7, r3
   2a7e4:	781b      	ldrb	r3, [r3, #0]
   2a7e6:	2b01      	cmp	r3, #1
   2a7e8:	d010      	beq.n	2a80c <disk_ioctl+0xa4>
   2a7ea:	230e      	movs	r3, #14
   2a7ec:	18fb      	adds	r3, r7, r3
   2a7ee:	781b      	ldrb	r3, [r3, #0]
   2a7f0:	2b02      	cmp	r3, #2
   2a7f2:	d00b      	beq.n	2a80c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2a7f4:	230e      	movs	r3, #14
   2a7f6:	18fb      	adds	r3, r7, r3
   2a7f8:	781b      	ldrb	r3, [r3, #0]
   2a7fa:	2b04      	cmp	r3, #4
   2a7fc:	d006      	beq.n	2a80c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2a7fe:	230e      	movs	r3, #14
   2a800:	18fb      	adds	r3, r7, r3
   2a802:	781b      	ldrb	r3, [r3, #0]
   2a804:	2b08      	cmp	r3, #8
   2a806:	d001      	beq.n	2a80c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2a808:	2301      	movs	r3, #1
   2a80a:	e01f      	b.n	2a84c <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2a80c:	683b      	ldr	r3, [r7, #0]
   2a80e:	2200      	movs	r2, #0
   2a810:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2a812:	230f      	movs	r3, #15
   2a814:	18fb      	adds	r3, r7, r3
   2a816:	2200      	movs	r2, #0
   2a818:	701a      	strb	r2, [r3, #0]
	}
	break;
   2a81a:	e014      	b.n	2a846 <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2a81c:	1dfb      	adds	r3, r7, #7
   2a81e:	781b      	ldrb	r3, [r3, #0]
   2a820:	0018      	movs	r0, r3
   2a822:	4b0e      	ldr	r3, [pc, #56]	; (2a85c <disk_ioctl+0xf4>)
   2a824:	4798      	blx	r3
   2a826:	1e03      	subs	r3, r0, #0
   2a828:	d104      	bne.n	2a834 <disk_ioctl+0xcc>
			res = RES_OK;
   2a82a:	230f      	movs	r3, #15
   2a82c:	18fb      	adds	r3, r7, r3
   2a82e:	2200      	movs	r2, #0
   2a830:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2a832:	e008      	b.n	2a846 <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2a834:	230f      	movs	r3, #15
   2a836:	18fb      	adds	r3, r7, r3
   2a838:	2203      	movs	r2, #3
   2a83a:	701a      	strb	r2, [r3, #0]
		break;
   2a83c:	e003      	b.n	2a846 <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2a83e:	230f      	movs	r3, #15
   2a840:	18fb      	adds	r3, r7, r3
   2a842:	2204      	movs	r2, #4
   2a844:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2a846:	230f      	movs	r3, #15
   2a848:	18fb      	adds	r3, r7, r3
   2a84a:	781b      	ldrb	r3, [r3, #0]
}
   2a84c:	0018      	movs	r0, r3
   2a84e:	46bd      	mov	sp, r7
   2a850:	b005      	add	sp, #20
   2a852:	bd90      	pop	{r4, r7, pc}
   2a854:	000250e1 	.word	0x000250e1
   2a858:	0002512d 	.word	0x0002512d
   2a85c:	000250a1 	.word	0x000250a1

0002a860 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2a860:	b580      	push	{r7, lr}
   2a862:	b084      	sub	sp, #16
   2a864:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2a866:	1d3a      	adds	r2, r7, #4
   2a868:	4b12      	ldr	r3, [pc, #72]	; (2a8b4 <get_fattime+0x54>)
   2a86a:	0011      	movs	r1, r2
   2a86c:	0018      	movs	r0, r3
   2a86e:	4b12      	ldr	r3, [pc, #72]	; (2a8b8 <get_fattime+0x58>)
   2a870:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2a872:	1d3b      	adds	r3, r7, #4
   2a874:	88db      	ldrh	r3, [r3, #6]
   2a876:	4a11      	ldr	r2, [pc, #68]	; (2a8bc <get_fattime+0x5c>)
   2a878:	4694      	mov	ip, r2
   2a87a:	4463      	add	r3, ip
   2a87c:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2a87e:	1d3b      	adds	r3, r7, #4
   2a880:	795b      	ldrb	r3, [r3, #5]
   2a882:	055b      	lsls	r3, r3, #21
   2a884:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2a886:	1d3b      	adds	r3, r7, #4
   2a888:	791b      	ldrb	r3, [r3, #4]
   2a88a:	041b      	lsls	r3, r3, #16
   2a88c:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2a88e:	1d3b      	adds	r3, r7, #4
   2a890:	789b      	ldrb	r3, [r3, #2]
   2a892:	02db      	lsls	r3, r3, #11
   2a894:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2a896:	1d3b      	adds	r3, r7, #4
   2a898:	785b      	ldrb	r3, [r3, #1]
   2a89a:	015b      	lsls	r3, r3, #5
   2a89c:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2a89e:	1d3a      	adds	r2, r7, #4
   2a8a0:	7812      	ldrb	r2, [r2, #0]
   2a8a2:	0852      	lsrs	r2, r2, #1
   2a8a4:	b2d2      	uxtb	r2, r2
   2a8a6:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2a8a8:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2a8aa:	68fb      	ldr	r3, [r7, #12]
}
   2a8ac:	0018      	movs	r0, r3
   2a8ae:	46bd      	mov	sp, r7
   2a8b0:	b004      	add	sp, #16
   2a8b2:	bd80      	pop	{r7, pc}
   2a8b4:	20005c00 	.word	0x20005c00
   2a8b8:	00025f0d 	.word	0x00025f0d
   2a8bc:	fffff844 	.word	0xfffff844

0002a8c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2a8c0:	b580      	push	{r7, lr}
   2a8c2:	b086      	sub	sp, #24
   2a8c4:	af00      	add	r7, sp, #0
   2a8c6:	60f8      	str	r0, [r7, #12]
   2a8c8:	60b9      	str	r1, [r7, #8]
   2a8ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2a8cc:	68fb      	ldr	r3, [r7, #12]
   2a8ce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2a8d0:	68bb      	ldr	r3, [r7, #8]
   2a8d2:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2a8d4:	e007      	b.n	2a8e6 <mem_cpy+0x26>
		*d++ = *s++;
   2a8d6:	697b      	ldr	r3, [r7, #20]
   2a8d8:	1c5a      	adds	r2, r3, #1
   2a8da:	617a      	str	r2, [r7, #20]
   2a8dc:	693a      	ldr	r2, [r7, #16]
   2a8de:	1c51      	adds	r1, r2, #1
   2a8e0:	6139      	str	r1, [r7, #16]
   2a8e2:	7812      	ldrb	r2, [r2, #0]
   2a8e4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2a8e6:	687b      	ldr	r3, [r7, #4]
   2a8e8:	1e5a      	subs	r2, r3, #1
   2a8ea:	607a      	str	r2, [r7, #4]
   2a8ec:	2b00      	cmp	r3, #0
   2a8ee:	d1f2      	bne.n	2a8d6 <mem_cpy+0x16>
}
   2a8f0:	46c0      	nop			; (mov r8, r8)
   2a8f2:	46bd      	mov	sp, r7
   2a8f4:	b006      	add	sp, #24
   2a8f6:	bd80      	pop	{r7, pc}

0002a8f8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2a8f8:	b580      	push	{r7, lr}
   2a8fa:	b086      	sub	sp, #24
   2a8fc:	af00      	add	r7, sp, #0
   2a8fe:	60f8      	str	r0, [r7, #12]
   2a900:	60b9      	str	r1, [r7, #8]
   2a902:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2a904:	68fb      	ldr	r3, [r7, #12]
   2a906:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2a908:	e005      	b.n	2a916 <mem_set+0x1e>
		*d++ = (BYTE)val;
   2a90a:	697b      	ldr	r3, [r7, #20]
   2a90c:	1c5a      	adds	r2, r3, #1
   2a90e:	617a      	str	r2, [r7, #20]
   2a910:	68ba      	ldr	r2, [r7, #8]
   2a912:	b2d2      	uxtb	r2, r2
   2a914:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2a916:	687b      	ldr	r3, [r7, #4]
   2a918:	1e5a      	subs	r2, r3, #1
   2a91a:	607a      	str	r2, [r7, #4]
   2a91c:	2b00      	cmp	r3, #0
   2a91e:	d1f4      	bne.n	2a90a <mem_set+0x12>
}
   2a920:	46c0      	nop			; (mov r8, r8)
   2a922:	46bd      	mov	sp, r7
   2a924:	b006      	add	sp, #24
   2a926:	bd80      	pop	{r7, pc}

0002a928 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2a928:	b580      	push	{r7, lr}
   2a92a:	b088      	sub	sp, #32
   2a92c:	af00      	add	r7, sp, #0
   2a92e:	60f8      	str	r0, [r7, #12]
   2a930:	60b9      	str	r1, [r7, #8]
   2a932:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2a934:	68fb      	ldr	r3, [r7, #12]
   2a936:	61fb      	str	r3, [r7, #28]
   2a938:	68bb      	ldr	r3, [r7, #8]
   2a93a:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2a93c:	2300      	movs	r3, #0
   2a93e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2a940:	46c0      	nop			; (mov r8, r8)
   2a942:	687b      	ldr	r3, [r7, #4]
   2a944:	1e5a      	subs	r2, r3, #1
   2a946:	607a      	str	r2, [r7, #4]
   2a948:	2b00      	cmp	r3, #0
   2a94a:	d00d      	beq.n	2a968 <mem_cmp+0x40>
   2a94c:	69fb      	ldr	r3, [r7, #28]
   2a94e:	1c5a      	adds	r2, r3, #1
   2a950:	61fa      	str	r2, [r7, #28]
   2a952:	781b      	ldrb	r3, [r3, #0]
   2a954:	0019      	movs	r1, r3
   2a956:	69bb      	ldr	r3, [r7, #24]
   2a958:	1c5a      	adds	r2, r3, #1
   2a95a:	61ba      	str	r2, [r7, #24]
   2a95c:	781b      	ldrb	r3, [r3, #0]
   2a95e:	1acb      	subs	r3, r1, r3
   2a960:	617b      	str	r3, [r7, #20]
   2a962:	697b      	ldr	r3, [r7, #20]
   2a964:	2b00      	cmp	r3, #0
   2a966:	d0ec      	beq.n	2a942 <mem_cmp+0x1a>
	return r;
   2a968:	697b      	ldr	r3, [r7, #20]
}
   2a96a:	0018      	movs	r0, r3
   2a96c:	46bd      	mov	sp, r7
   2a96e:	b008      	add	sp, #32
   2a970:	bd80      	pop	{r7, pc}

0002a972 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2a972:	b580      	push	{r7, lr}
   2a974:	b082      	sub	sp, #8
   2a976:	af00      	add	r7, sp, #0
   2a978:	6078      	str	r0, [r7, #4]
   2a97a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2a97c:	e002      	b.n	2a984 <chk_chr+0x12>
   2a97e:	687b      	ldr	r3, [r7, #4]
   2a980:	3301      	adds	r3, #1
   2a982:	607b      	str	r3, [r7, #4]
   2a984:	687b      	ldr	r3, [r7, #4]
   2a986:	781b      	ldrb	r3, [r3, #0]
   2a988:	2b00      	cmp	r3, #0
   2a98a:	d005      	beq.n	2a998 <chk_chr+0x26>
   2a98c:	687b      	ldr	r3, [r7, #4]
   2a98e:	781b      	ldrb	r3, [r3, #0]
   2a990:	001a      	movs	r2, r3
   2a992:	683b      	ldr	r3, [r7, #0]
   2a994:	429a      	cmp	r2, r3
   2a996:	d1f2      	bne.n	2a97e <chk_chr+0xc>
	return *str;
   2a998:	687b      	ldr	r3, [r7, #4]
   2a99a:	781b      	ldrb	r3, [r3, #0]
}
   2a99c:	0018      	movs	r0, r3
   2a99e:	46bd      	mov	sp, r7
   2a9a0:	b002      	add	sp, #8
   2a9a2:	bd80      	pop	{r7, pc}

0002a9a4 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2a9a4:	b590      	push	{r4, r7, lr}
   2a9a6:	b085      	sub	sp, #20
   2a9a8:	af00      	add	r7, sp, #0
   2a9aa:	6078      	str	r0, [r7, #4]
   2a9ac:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2a9ae:	687b      	ldr	r3, [r7, #4]
   2a9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2a9b2:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2a9b4:	68fa      	ldr	r2, [r7, #12]
   2a9b6:	683b      	ldr	r3, [r7, #0]
   2a9b8:	429a      	cmp	r2, r3
   2a9ba:	d04e      	beq.n	2aa5a <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2a9bc:	687b      	ldr	r3, [r7, #4]
   2a9be:	791b      	ldrb	r3, [r3, #4]
   2a9c0:	2b00      	cmp	r3, #0
   2a9c2:	d037      	beq.n	2aa34 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2a9c4:	687b      	ldr	r3, [r7, #4]
   2a9c6:	7858      	ldrb	r0, [r3, #1]
   2a9c8:	687b      	ldr	r3, [r7, #4]
   2a9ca:	3330      	adds	r3, #48	; 0x30
   2a9cc:	0019      	movs	r1, r3
   2a9ce:	68fa      	ldr	r2, [r7, #12]
   2a9d0:	2301      	movs	r3, #1
   2a9d2:	4c24      	ldr	r4, [pc, #144]	; (2aa64 <move_window+0xc0>)
   2a9d4:	47a0      	blx	r4
   2a9d6:	1e03      	subs	r3, r0, #0
   2a9d8:	d001      	beq.n	2a9de <move_window+0x3a>
				return FR_DISK_ERR;
   2a9da:	2301      	movs	r3, #1
   2a9dc:	e03e      	b.n	2aa5c <move_window+0xb8>
			fs->wflag = 0;
   2a9de:	687b      	ldr	r3, [r7, #4]
   2a9e0:	2200      	movs	r2, #0
   2a9e2:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2a9e4:	687b      	ldr	r3, [r7, #4]
   2a9e6:	6a1a      	ldr	r2, [r3, #32]
   2a9e8:	687b      	ldr	r3, [r7, #4]
   2a9ea:	69db      	ldr	r3, [r3, #28]
   2a9ec:	18d2      	adds	r2, r2, r3
   2a9ee:	68fb      	ldr	r3, [r7, #12]
   2a9f0:	429a      	cmp	r2, r3
   2a9f2:	d91f      	bls.n	2aa34 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2a9f4:	230b      	movs	r3, #11
   2a9f6:	18fb      	adds	r3, r7, r3
   2a9f8:	687a      	ldr	r2, [r7, #4]
   2a9fa:	78d2      	ldrb	r2, [r2, #3]
   2a9fc:	701a      	strb	r2, [r3, #0]
   2a9fe:	e014      	b.n	2aa2a <move_window+0x86>
					wsect += fs->fsize;
   2aa00:	687b      	ldr	r3, [r7, #4]
   2aa02:	69db      	ldr	r3, [r3, #28]
   2aa04:	68fa      	ldr	r2, [r7, #12]
   2aa06:	18d3      	adds	r3, r2, r3
   2aa08:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2aa0a:	687b      	ldr	r3, [r7, #4]
   2aa0c:	7858      	ldrb	r0, [r3, #1]
   2aa0e:	687b      	ldr	r3, [r7, #4]
   2aa10:	3330      	adds	r3, #48	; 0x30
   2aa12:	0019      	movs	r1, r3
   2aa14:	68fa      	ldr	r2, [r7, #12]
   2aa16:	2301      	movs	r3, #1
   2aa18:	4c12      	ldr	r4, [pc, #72]	; (2aa64 <move_window+0xc0>)
   2aa1a:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2aa1c:	230b      	movs	r3, #11
   2aa1e:	18fb      	adds	r3, r7, r3
   2aa20:	781a      	ldrb	r2, [r3, #0]
   2aa22:	230b      	movs	r3, #11
   2aa24:	18fb      	adds	r3, r7, r3
   2aa26:	3a01      	subs	r2, #1
   2aa28:	701a      	strb	r2, [r3, #0]
   2aa2a:	230b      	movs	r3, #11
   2aa2c:	18fb      	adds	r3, r7, r3
   2aa2e:	781b      	ldrb	r3, [r3, #0]
   2aa30:	2b01      	cmp	r3, #1
   2aa32:	d8e5      	bhi.n	2aa00 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2aa34:	683b      	ldr	r3, [r7, #0]
   2aa36:	2b00      	cmp	r3, #0
   2aa38:	d00f      	beq.n	2aa5a <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2aa3a:	687b      	ldr	r3, [r7, #4]
   2aa3c:	7858      	ldrb	r0, [r3, #1]
   2aa3e:	687b      	ldr	r3, [r7, #4]
   2aa40:	3330      	adds	r3, #48	; 0x30
   2aa42:	0019      	movs	r1, r3
   2aa44:	683a      	ldr	r2, [r7, #0]
   2aa46:	2301      	movs	r3, #1
   2aa48:	4c07      	ldr	r4, [pc, #28]	; (2aa68 <move_window+0xc4>)
   2aa4a:	47a0      	blx	r4
   2aa4c:	1e03      	subs	r3, r0, #0
   2aa4e:	d001      	beq.n	2aa54 <move_window+0xb0>
				return FR_DISK_ERR;
   2aa50:	2301      	movs	r3, #1
   2aa52:	e003      	b.n	2aa5c <move_window+0xb8>
			fs->winsect = sector;
   2aa54:	687b      	ldr	r3, [r7, #4]
   2aa56:	683a      	ldr	r2, [r7, #0]
   2aa58:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2aa5a:	2300      	movs	r3, #0
}
   2aa5c:	0018      	movs	r0, r3
   2aa5e:	46bd      	mov	sp, r7
   2aa60:	b005      	add	sp, #20
   2aa62:	bd90      	pop	{r4, r7, pc}
   2aa64:	0002a691 	.word	0x0002a691
   2aa68:	0002a5b9 	.word	0x0002a5b9

0002aa6c <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2aa6c:	b590      	push	{r4, r7, lr}
   2aa6e:	b085      	sub	sp, #20
   2aa70:	af00      	add	r7, sp, #0
   2aa72:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2aa74:	230f      	movs	r3, #15
   2aa76:	18fc      	adds	r4, r7, r3
   2aa78:	687b      	ldr	r3, [r7, #4]
   2aa7a:	2100      	movs	r1, #0
   2aa7c:	0018      	movs	r0, r3
   2aa7e:	4b52      	ldr	r3, [pc, #328]	; (2abc8 <sync+0x15c>)
   2aa80:	4798      	blx	r3
   2aa82:	0003      	movs	r3, r0
   2aa84:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2aa86:	230f      	movs	r3, #15
   2aa88:	18fb      	adds	r3, r7, r3
   2aa8a:	781b      	ldrb	r3, [r3, #0]
   2aa8c:	2b00      	cmp	r3, #0
   2aa8e:	d000      	beq.n	2aa92 <sync+0x26>
   2aa90:	e093      	b.n	2abba <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2aa92:	687b      	ldr	r3, [r7, #4]
   2aa94:	781b      	ldrb	r3, [r3, #0]
   2aa96:	2b03      	cmp	r3, #3
   2aa98:	d000      	beq.n	2aa9c <sync+0x30>
   2aa9a:	e081      	b.n	2aba0 <sync+0x134>
   2aa9c:	687b      	ldr	r3, [r7, #4]
   2aa9e:	795b      	ldrb	r3, [r3, #5]
   2aaa0:	2b00      	cmp	r3, #0
   2aaa2:	d07d      	beq.n	2aba0 <sync+0x134>
			fs->winsect = 0;
   2aaa4:	687b      	ldr	r3, [r7, #4]
   2aaa6:	2200      	movs	r2, #0
   2aaa8:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2aaaa:	687b      	ldr	r3, [r7, #4]
   2aaac:	3330      	adds	r3, #48	; 0x30
   2aaae:	0018      	movs	r0, r3
   2aab0:	2380      	movs	r3, #128	; 0x80
   2aab2:	009b      	lsls	r3, r3, #2
   2aab4:	001a      	movs	r2, r3
   2aab6:	2100      	movs	r1, #0
   2aab8:	4b44      	ldr	r3, [pc, #272]	; (2abcc <sync+0x160>)
   2aaba:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2aabc:	687b      	ldr	r3, [r7, #4]
   2aabe:	4a44      	ldr	r2, [pc, #272]	; (2abd0 <sync+0x164>)
   2aac0:	2155      	movs	r1, #85	; 0x55
   2aac2:	5499      	strb	r1, [r3, r2]
   2aac4:	687b      	ldr	r3, [r7, #4]
   2aac6:	4a43      	ldr	r2, [pc, #268]	; (2abd4 <sync+0x168>)
   2aac8:	21aa      	movs	r1, #170	; 0xaa
   2aaca:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2aacc:	687b      	ldr	r3, [r7, #4]
   2aace:	2230      	movs	r2, #48	; 0x30
   2aad0:	2152      	movs	r1, #82	; 0x52
   2aad2:	5499      	strb	r1, [r3, r2]
   2aad4:	687b      	ldr	r3, [r7, #4]
   2aad6:	2231      	movs	r2, #49	; 0x31
   2aad8:	2152      	movs	r1, #82	; 0x52
   2aada:	5499      	strb	r1, [r3, r2]
   2aadc:	687b      	ldr	r3, [r7, #4]
   2aade:	2232      	movs	r2, #50	; 0x32
   2aae0:	2161      	movs	r1, #97	; 0x61
   2aae2:	5499      	strb	r1, [r3, r2]
   2aae4:	687b      	ldr	r3, [r7, #4]
   2aae6:	2233      	movs	r2, #51	; 0x33
   2aae8:	2141      	movs	r1, #65	; 0x41
   2aaea:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2aaec:	687a      	ldr	r2, [r7, #4]
   2aaee:	2385      	movs	r3, #133	; 0x85
   2aaf0:	009b      	lsls	r3, r3, #2
   2aaf2:	2172      	movs	r1, #114	; 0x72
   2aaf4:	54d1      	strb	r1, [r2, r3]
   2aaf6:	687b      	ldr	r3, [r7, #4]
   2aaf8:	4a37      	ldr	r2, [pc, #220]	; (2abd8 <sync+0x16c>)
   2aafa:	2172      	movs	r1, #114	; 0x72
   2aafc:	5499      	strb	r1, [r3, r2]
   2aafe:	687b      	ldr	r3, [r7, #4]
   2ab00:	4a36      	ldr	r2, [pc, #216]	; (2abdc <sync+0x170>)
   2ab02:	2141      	movs	r1, #65	; 0x41
   2ab04:	5499      	strb	r1, [r3, r2]
   2ab06:	687b      	ldr	r3, [r7, #4]
   2ab08:	4a35      	ldr	r2, [pc, #212]	; (2abe0 <sync+0x174>)
   2ab0a:	2161      	movs	r1, #97	; 0x61
   2ab0c:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2ab0e:	687b      	ldr	r3, [r7, #4]
   2ab10:	691b      	ldr	r3, [r3, #16]
   2ab12:	b2d9      	uxtb	r1, r3
   2ab14:	687a      	ldr	r2, [r7, #4]
   2ab16:	2386      	movs	r3, #134	; 0x86
   2ab18:	009b      	lsls	r3, r3, #2
   2ab1a:	54d1      	strb	r1, [r2, r3]
   2ab1c:	687b      	ldr	r3, [r7, #4]
   2ab1e:	691b      	ldr	r3, [r3, #16]
   2ab20:	b29b      	uxth	r3, r3
   2ab22:	0a1b      	lsrs	r3, r3, #8
   2ab24:	b29b      	uxth	r3, r3
   2ab26:	b2d9      	uxtb	r1, r3
   2ab28:	687b      	ldr	r3, [r7, #4]
   2ab2a:	4a2e      	ldr	r2, [pc, #184]	; (2abe4 <sync+0x178>)
   2ab2c:	5499      	strb	r1, [r3, r2]
   2ab2e:	687b      	ldr	r3, [r7, #4]
   2ab30:	691b      	ldr	r3, [r3, #16]
   2ab32:	0c1b      	lsrs	r3, r3, #16
   2ab34:	b2d9      	uxtb	r1, r3
   2ab36:	687b      	ldr	r3, [r7, #4]
   2ab38:	4a2b      	ldr	r2, [pc, #172]	; (2abe8 <sync+0x17c>)
   2ab3a:	5499      	strb	r1, [r3, r2]
   2ab3c:	687b      	ldr	r3, [r7, #4]
   2ab3e:	691b      	ldr	r3, [r3, #16]
   2ab40:	0e1b      	lsrs	r3, r3, #24
   2ab42:	b2d9      	uxtb	r1, r3
   2ab44:	687b      	ldr	r3, [r7, #4]
   2ab46:	4a29      	ldr	r2, [pc, #164]	; (2abec <sync+0x180>)
   2ab48:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2ab4a:	687b      	ldr	r3, [r7, #4]
   2ab4c:	68db      	ldr	r3, [r3, #12]
   2ab4e:	b2d9      	uxtb	r1, r3
   2ab50:	687a      	ldr	r2, [r7, #4]
   2ab52:	2387      	movs	r3, #135	; 0x87
   2ab54:	009b      	lsls	r3, r3, #2
   2ab56:	54d1      	strb	r1, [r2, r3]
   2ab58:	687b      	ldr	r3, [r7, #4]
   2ab5a:	68db      	ldr	r3, [r3, #12]
   2ab5c:	b29b      	uxth	r3, r3
   2ab5e:	0a1b      	lsrs	r3, r3, #8
   2ab60:	b29b      	uxth	r3, r3
   2ab62:	b2d9      	uxtb	r1, r3
   2ab64:	687b      	ldr	r3, [r7, #4]
   2ab66:	4a22      	ldr	r2, [pc, #136]	; (2abf0 <sync+0x184>)
   2ab68:	5499      	strb	r1, [r3, r2]
   2ab6a:	687b      	ldr	r3, [r7, #4]
   2ab6c:	68db      	ldr	r3, [r3, #12]
   2ab6e:	0c1b      	lsrs	r3, r3, #16
   2ab70:	b2d9      	uxtb	r1, r3
   2ab72:	687b      	ldr	r3, [r7, #4]
   2ab74:	4a1f      	ldr	r2, [pc, #124]	; (2abf4 <sync+0x188>)
   2ab76:	5499      	strb	r1, [r3, r2]
   2ab78:	687b      	ldr	r3, [r7, #4]
   2ab7a:	68db      	ldr	r3, [r3, #12]
   2ab7c:	0e1b      	lsrs	r3, r3, #24
   2ab7e:	b2d9      	uxtb	r1, r3
   2ab80:	687b      	ldr	r3, [r7, #4]
   2ab82:	4a1d      	ldr	r2, [pc, #116]	; (2abf8 <sync+0x18c>)
   2ab84:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2ab86:	687b      	ldr	r3, [r7, #4]
   2ab88:	7858      	ldrb	r0, [r3, #1]
   2ab8a:	687b      	ldr	r3, [r7, #4]
   2ab8c:	3330      	adds	r3, #48	; 0x30
   2ab8e:	0019      	movs	r1, r3
   2ab90:	687b      	ldr	r3, [r7, #4]
   2ab92:	695a      	ldr	r2, [r3, #20]
   2ab94:	2301      	movs	r3, #1
   2ab96:	4c19      	ldr	r4, [pc, #100]	; (2abfc <sync+0x190>)
   2ab98:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2ab9a:	687b      	ldr	r3, [r7, #4]
   2ab9c:	2200      	movs	r2, #0
   2ab9e:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2aba0:	687b      	ldr	r3, [r7, #4]
   2aba2:	785b      	ldrb	r3, [r3, #1]
   2aba4:	2200      	movs	r2, #0
   2aba6:	2100      	movs	r1, #0
   2aba8:	0018      	movs	r0, r3
   2abaa:	4b15      	ldr	r3, [pc, #84]	; (2ac00 <sync+0x194>)
   2abac:	4798      	blx	r3
   2abae:	1e03      	subs	r3, r0, #0
   2abb0:	d003      	beq.n	2abba <sync+0x14e>
			res = FR_DISK_ERR;
   2abb2:	230f      	movs	r3, #15
   2abb4:	18fb      	adds	r3, r7, r3
   2abb6:	2201      	movs	r2, #1
   2abb8:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2abba:	230f      	movs	r3, #15
   2abbc:	18fb      	adds	r3, r7, r3
   2abbe:	781b      	ldrb	r3, [r3, #0]
}
   2abc0:	0018      	movs	r0, r3
   2abc2:	46bd      	mov	sp, r7
   2abc4:	b005      	add	sp, #20
   2abc6:	bd90      	pop	{r4, r7, pc}
   2abc8:	0002a9a5 	.word	0x0002a9a5
   2abcc:	0002a8f9 	.word	0x0002a8f9
   2abd0:	0000022e 	.word	0x0000022e
   2abd4:	0000022f 	.word	0x0000022f
   2abd8:	00000215 	.word	0x00000215
   2abdc:	00000216 	.word	0x00000216
   2abe0:	00000217 	.word	0x00000217
   2abe4:	00000219 	.word	0x00000219
   2abe8:	0000021a 	.word	0x0000021a
   2abec:	0000021b 	.word	0x0000021b
   2abf0:	0000021d 	.word	0x0000021d
   2abf4:	0000021e 	.word	0x0000021e
   2abf8:	0000021f 	.word	0x0000021f
   2abfc:	0002a691 	.word	0x0002a691
   2ac00:	0002a769 	.word	0x0002a769

0002ac04 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2ac04:	b580      	push	{r7, lr}
   2ac06:	b082      	sub	sp, #8
   2ac08:	af00      	add	r7, sp, #0
   2ac0a:	6078      	str	r0, [r7, #4]
   2ac0c:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2ac0e:	683b      	ldr	r3, [r7, #0]
   2ac10:	3b02      	subs	r3, #2
   2ac12:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2ac14:	687b      	ldr	r3, [r7, #4]
   2ac16:	699b      	ldr	r3, [r3, #24]
   2ac18:	1e9a      	subs	r2, r3, #2
   2ac1a:	683b      	ldr	r3, [r7, #0]
   2ac1c:	429a      	cmp	r2, r3
   2ac1e:	d801      	bhi.n	2ac24 <clust2sect+0x20>
   2ac20:	2300      	movs	r3, #0
   2ac22:	e007      	b.n	2ac34 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2ac24:	687b      	ldr	r3, [r7, #4]
   2ac26:	789b      	ldrb	r3, [r3, #2]
   2ac28:	001a      	movs	r2, r3
   2ac2a:	683b      	ldr	r3, [r7, #0]
   2ac2c:	435a      	muls	r2, r3
   2ac2e:	687b      	ldr	r3, [r7, #4]
   2ac30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2ac32:	18d3      	adds	r3, r2, r3
}
   2ac34:	0018      	movs	r0, r3
   2ac36:	46bd      	mov	sp, r7
   2ac38:	b002      	add	sp, #8
   2ac3a:	bd80      	pop	{r7, pc}

0002ac3c <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2ac3c:	b580      	push	{r7, lr}
   2ac3e:	b086      	sub	sp, #24
   2ac40:	af00      	add	r7, sp, #0
   2ac42:	6078      	str	r0, [r7, #4]
   2ac44:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2ac46:	683b      	ldr	r3, [r7, #0]
   2ac48:	2b01      	cmp	r3, #1
   2ac4a:	d904      	bls.n	2ac56 <get_fat+0x1a>
   2ac4c:	687b      	ldr	r3, [r7, #4]
   2ac4e:	699a      	ldr	r2, [r3, #24]
   2ac50:	683b      	ldr	r3, [r7, #0]
   2ac52:	429a      	cmp	r2, r3
   2ac54:	d801      	bhi.n	2ac5a <get_fat+0x1e>
		return 1;
   2ac56:	2301      	movs	r3, #1
   2ac58:	e09f      	b.n	2ad9a <get_fat+0x15e>

	switch (fs->fs_type) {
   2ac5a:	687b      	ldr	r3, [r7, #4]
   2ac5c:	781b      	ldrb	r3, [r3, #0]
   2ac5e:	2b02      	cmp	r3, #2
   2ac60:	d048      	beq.n	2acf4 <get_fat+0xb8>
   2ac62:	2b03      	cmp	r3, #3
   2ac64:	d067      	beq.n	2ad36 <get_fat+0xfa>
   2ac66:	2b01      	cmp	r3, #1
   2ac68:	d000      	beq.n	2ac6c <get_fat+0x30>
   2ac6a:	e094      	b.n	2ad96 <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2ac6c:	683b      	ldr	r3, [r7, #0]
   2ac6e:	617b      	str	r3, [r7, #20]
   2ac70:	697b      	ldr	r3, [r7, #20]
   2ac72:	085b      	lsrs	r3, r3, #1
   2ac74:	697a      	ldr	r2, [r7, #20]
   2ac76:	18d3      	adds	r3, r2, r3
   2ac78:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2ac7a:	687b      	ldr	r3, [r7, #4]
   2ac7c:	6a1a      	ldr	r2, [r3, #32]
   2ac7e:	697b      	ldr	r3, [r7, #20]
   2ac80:	0a5b      	lsrs	r3, r3, #9
   2ac82:	18d2      	adds	r2, r2, r3
   2ac84:	687b      	ldr	r3, [r7, #4]
   2ac86:	0011      	movs	r1, r2
   2ac88:	0018      	movs	r0, r3
   2ac8a:	4b46      	ldr	r3, [pc, #280]	; (2ada4 <get_fat+0x168>)
   2ac8c:	4798      	blx	r3
   2ac8e:	1e03      	subs	r3, r0, #0
   2ac90:	d000      	beq.n	2ac94 <get_fat+0x58>
   2ac92:	e079      	b.n	2ad88 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2ac94:	697b      	ldr	r3, [r7, #20]
   2ac96:	05db      	lsls	r3, r3, #23
   2ac98:	0ddb      	lsrs	r3, r3, #23
   2ac9a:	687a      	ldr	r2, [r7, #4]
   2ac9c:	2130      	movs	r1, #48	; 0x30
   2ac9e:	18d3      	adds	r3, r2, r3
   2aca0:	185b      	adds	r3, r3, r1
   2aca2:	781b      	ldrb	r3, [r3, #0]
   2aca4:	613b      	str	r3, [r7, #16]
   2aca6:	697b      	ldr	r3, [r7, #20]
   2aca8:	3301      	adds	r3, #1
   2acaa:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2acac:	687b      	ldr	r3, [r7, #4]
   2acae:	6a1a      	ldr	r2, [r3, #32]
   2acb0:	697b      	ldr	r3, [r7, #20]
   2acb2:	0a5b      	lsrs	r3, r3, #9
   2acb4:	18d2      	adds	r2, r2, r3
   2acb6:	687b      	ldr	r3, [r7, #4]
   2acb8:	0011      	movs	r1, r2
   2acba:	0018      	movs	r0, r3
   2acbc:	4b39      	ldr	r3, [pc, #228]	; (2ada4 <get_fat+0x168>)
   2acbe:	4798      	blx	r3
   2acc0:	1e03      	subs	r3, r0, #0
   2acc2:	d163      	bne.n	2ad8c <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2acc4:	697b      	ldr	r3, [r7, #20]
   2acc6:	05db      	lsls	r3, r3, #23
   2acc8:	0ddb      	lsrs	r3, r3, #23
   2acca:	687a      	ldr	r2, [r7, #4]
   2accc:	2130      	movs	r1, #48	; 0x30
   2acce:	18d3      	adds	r3, r2, r3
   2acd0:	185b      	adds	r3, r3, r1
   2acd2:	781b      	ldrb	r3, [r3, #0]
   2acd4:	021b      	lsls	r3, r3, #8
   2acd6:	001a      	movs	r2, r3
   2acd8:	693b      	ldr	r3, [r7, #16]
   2acda:	4313      	orrs	r3, r2
   2acdc:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2acde:	683b      	ldr	r3, [r7, #0]
   2ace0:	2201      	movs	r2, #1
   2ace2:	4013      	ands	r3, r2
   2ace4:	d002      	beq.n	2acec <get_fat+0xb0>
   2ace6:	693b      	ldr	r3, [r7, #16]
   2ace8:	091b      	lsrs	r3, r3, #4
   2acea:	e056      	b.n	2ad9a <get_fat+0x15e>
   2acec:	693b      	ldr	r3, [r7, #16]
   2acee:	051b      	lsls	r3, r3, #20
   2acf0:	0d1b      	lsrs	r3, r3, #20
   2acf2:	e052      	b.n	2ad9a <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2acf4:	687b      	ldr	r3, [r7, #4]
   2acf6:	6a1a      	ldr	r2, [r3, #32]
   2acf8:	683b      	ldr	r3, [r7, #0]
   2acfa:	0a1b      	lsrs	r3, r3, #8
   2acfc:	18d2      	adds	r2, r2, r3
   2acfe:	687b      	ldr	r3, [r7, #4]
   2ad00:	0011      	movs	r1, r2
   2ad02:	0018      	movs	r0, r3
   2ad04:	4b27      	ldr	r3, [pc, #156]	; (2ada4 <get_fat+0x168>)
   2ad06:	4798      	blx	r3
   2ad08:	1e03      	subs	r3, r0, #0
   2ad0a:	d141      	bne.n	2ad90 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2ad0c:	683b      	ldr	r3, [r7, #0]
   2ad0e:	005a      	lsls	r2, r3, #1
   2ad10:	23ff      	movs	r3, #255	; 0xff
   2ad12:	005b      	lsls	r3, r3, #1
   2ad14:	4013      	ands	r3, r2
   2ad16:	3330      	adds	r3, #48	; 0x30
   2ad18:	687a      	ldr	r2, [r7, #4]
   2ad1a:	18d3      	adds	r3, r2, r3
   2ad1c:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2ad1e:	68fb      	ldr	r3, [r7, #12]
   2ad20:	3301      	adds	r3, #1
   2ad22:	781b      	ldrb	r3, [r3, #0]
   2ad24:	021b      	lsls	r3, r3, #8
   2ad26:	b21a      	sxth	r2, r3
   2ad28:	68fb      	ldr	r3, [r7, #12]
   2ad2a:	781b      	ldrb	r3, [r3, #0]
   2ad2c:	b21b      	sxth	r3, r3
   2ad2e:	4313      	orrs	r3, r2
   2ad30:	b21b      	sxth	r3, r3
   2ad32:	b29b      	uxth	r3, r3
   2ad34:	e031      	b.n	2ad9a <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2ad36:	687b      	ldr	r3, [r7, #4]
   2ad38:	6a1a      	ldr	r2, [r3, #32]
   2ad3a:	683b      	ldr	r3, [r7, #0]
   2ad3c:	09db      	lsrs	r3, r3, #7
   2ad3e:	18d2      	adds	r2, r2, r3
   2ad40:	687b      	ldr	r3, [r7, #4]
   2ad42:	0011      	movs	r1, r2
   2ad44:	0018      	movs	r0, r3
   2ad46:	4b17      	ldr	r3, [pc, #92]	; (2ada4 <get_fat+0x168>)
   2ad48:	4798      	blx	r3
   2ad4a:	1e03      	subs	r3, r0, #0
   2ad4c:	d122      	bne.n	2ad94 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2ad4e:	683b      	ldr	r3, [r7, #0]
   2ad50:	009a      	lsls	r2, r3, #2
   2ad52:	23fe      	movs	r3, #254	; 0xfe
   2ad54:	005b      	lsls	r3, r3, #1
   2ad56:	4013      	ands	r3, r2
   2ad58:	3330      	adds	r3, #48	; 0x30
   2ad5a:	687a      	ldr	r2, [r7, #4]
   2ad5c:	18d3      	adds	r3, r2, r3
   2ad5e:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2ad60:	68fb      	ldr	r3, [r7, #12]
   2ad62:	3303      	adds	r3, #3
   2ad64:	781b      	ldrb	r3, [r3, #0]
   2ad66:	061a      	lsls	r2, r3, #24
   2ad68:	68fb      	ldr	r3, [r7, #12]
   2ad6a:	3302      	adds	r3, #2
   2ad6c:	781b      	ldrb	r3, [r3, #0]
   2ad6e:	041b      	lsls	r3, r3, #16
   2ad70:	4313      	orrs	r3, r2
   2ad72:	68fa      	ldr	r2, [r7, #12]
   2ad74:	3201      	adds	r2, #1
   2ad76:	7812      	ldrb	r2, [r2, #0]
   2ad78:	0212      	lsls	r2, r2, #8
   2ad7a:	4313      	orrs	r3, r2
   2ad7c:	68fa      	ldr	r2, [r7, #12]
   2ad7e:	7812      	ldrb	r2, [r2, #0]
   2ad80:	4313      	orrs	r3, r2
   2ad82:	011b      	lsls	r3, r3, #4
   2ad84:	091b      	lsrs	r3, r3, #4
   2ad86:	e008      	b.n	2ad9a <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2ad88:	46c0      	nop			; (mov r8, r8)
   2ad8a:	e004      	b.n	2ad96 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2ad8c:	46c0      	nop			; (mov r8, r8)
   2ad8e:	e002      	b.n	2ad96 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2ad90:	46c0      	nop			; (mov r8, r8)
   2ad92:	e000      	b.n	2ad96 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2ad94:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2ad96:	2301      	movs	r3, #1
   2ad98:	425b      	negs	r3, r3
}
   2ad9a:	0018      	movs	r0, r3
   2ad9c:	46bd      	mov	sp, r7
   2ad9e:	b006      	add	sp, #24
   2ada0:	bd80      	pop	{r7, pc}
   2ada2:	46c0      	nop			; (mov r8, r8)
   2ada4:	0002a9a5 	.word	0x0002a9a5

0002ada8 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2ada8:	b590      	push	{r4, r7, lr}
   2adaa:	b089      	sub	sp, #36	; 0x24
   2adac:	af00      	add	r7, sp, #0
   2adae:	60f8      	str	r0, [r7, #12]
   2adb0:	60b9      	str	r1, [r7, #8]
   2adb2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2adb4:	68bb      	ldr	r3, [r7, #8]
   2adb6:	2b01      	cmp	r3, #1
   2adb8:	d904      	bls.n	2adc4 <put_fat+0x1c>
   2adba:	68fb      	ldr	r3, [r7, #12]
   2adbc:	699a      	ldr	r2, [r3, #24]
   2adbe:	68bb      	ldr	r3, [r7, #8]
   2adc0:	429a      	cmp	r2, r3
   2adc2:	d804      	bhi.n	2adce <put_fat+0x26>
		res = FR_INT_ERR;
   2adc4:	231f      	movs	r3, #31
   2adc6:	18fb      	adds	r3, r7, r3
   2adc8:	2202      	movs	r2, #2
   2adca:	701a      	strb	r2, [r3, #0]
   2adcc:	e100      	b.n	2afd0 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2adce:	68fb      	ldr	r3, [r7, #12]
   2add0:	781b      	ldrb	r3, [r3, #0]
   2add2:	2b02      	cmp	r3, #2
   2add4:	d100      	bne.n	2add8 <put_fat+0x30>
   2add6:	e078      	b.n	2aeca <put_fat+0x122>
   2add8:	2b03      	cmp	r3, #3
   2adda:	d100      	bne.n	2adde <put_fat+0x36>
   2addc:	e09e      	b.n	2af1c <put_fat+0x174>
   2adde:	2b01      	cmp	r3, #1
   2ade0:	d000      	beq.n	2ade4 <put_fat+0x3c>
   2ade2:	e0e6      	b.n	2afb2 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2ade4:	68bb      	ldr	r3, [r7, #8]
   2ade6:	61bb      	str	r3, [r7, #24]
   2ade8:	69bb      	ldr	r3, [r7, #24]
   2adea:	085b      	lsrs	r3, r3, #1
   2adec:	69ba      	ldr	r2, [r7, #24]
   2adee:	18d3      	adds	r3, r2, r3
   2adf0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2adf2:	68fb      	ldr	r3, [r7, #12]
   2adf4:	6a1a      	ldr	r2, [r3, #32]
   2adf6:	69bb      	ldr	r3, [r7, #24]
   2adf8:	0a5b      	lsrs	r3, r3, #9
   2adfa:	18d2      	adds	r2, r2, r3
   2adfc:	231f      	movs	r3, #31
   2adfe:	18fc      	adds	r4, r7, r3
   2ae00:	68fb      	ldr	r3, [r7, #12]
   2ae02:	0011      	movs	r1, r2
   2ae04:	0018      	movs	r0, r3
   2ae06:	4b76      	ldr	r3, [pc, #472]	; (2afe0 <put_fat+0x238>)
   2ae08:	4798      	blx	r3
   2ae0a:	0003      	movs	r3, r0
   2ae0c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2ae0e:	231f      	movs	r3, #31
   2ae10:	18fb      	adds	r3, r7, r3
   2ae12:	781b      	ldrb	r3, [r3, #0]
   2ae14:	2b00      	cmp	r3, #0
   2ae16:	d000      	beq.n	2ae1a <put_fat+0x72>
   2ae18:	e0d0      	b.n	2afbc <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2ae1a:	69bb      	ldr	r3, [r7, #24]
   2ae1c:	05db      	lsls	r3, r3, #23
   2ae1e:	0ddb      	lsrs	r3, r3, #23
   2ae20:	3330      	adds	r3, #48	; 0x30
   2ae22:	68fa      	ldr	r2, [r7, #12]
   2ae24:	18d3      	adds	r3, r2, r3
   2ae26:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2ae28:	68bb      	ldr	r3, [r7, #8]
   2ae2a:	2201      	movs	r2, #1
   2ae2c:	4013      	ands	r3, r2
   2ae2e:	d00d      	beq.n	2ae4c <put_fat+0xa4>
   2ae30:	697b      	ldr	r3, [r7, #20]
   2ae32:	781b      	ldrb	r3, [r3, #0]
   2ae34:	b25b      	sxtb	r3, r3
   2ae36:	220f      	movs	r2, #15
   2ae38:	4013      	ands	r3, r2
   2ae3a:	b25a      	sxtb	r2, r3
   2ae3c:	687b      	ldr	r3, [r7, #4]
   2ae3e:	b2db      	uxtb	r3, r3
   2ae40:	011b      	lsls	r3, r3, #4
   2ae42:	b25b      	sxtb	r3, r3
   2ae44:	4313      	orrs	r3, r2
   2ae46:	b25b      	sxtb	r3, r3
   2ae48:	b2db      	uxtb	r3, r3
   2ae4a:	e001      	b.n	2ae50 <put_fat+0xa8>
   2ae4c:	687b      	ldr	r3, [r7, #4]
   2ae4e:	b2db      	uxtb	r3, r3
   2ae50:	697a      	ldr	r2, [r7, #20]
   2ae52:	7013      	strb	r3, [r2, #0]
			bc++;
   2ae54:	69bb      	ldr	r3, [r7, #24]
   2ae56:	3301      	adds	r3, #1
   2ae58:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2ae5a:	68fb      	ldr	r3, [r7, #12]
   2ae5c:	2201      	movs	r2, #1
   2ae5e:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2ae60:	68fb      	ldr	r3, [r7, #12]
   2ae62:	6a1a      	ldr	r2, [r3, #32]
   2ae64:	69bb      	ldr	r3, [r7, #24]
   2ae66:	0a5b      	lsrs	r3, r3, #9
   2ae68:	18d2      	adds	r2, r2, r3
   2ae6a:	231f      	movs	r3, #31
   2ae6c:	18fc      	adds	r4, r7, r3
   2ae6e:	68fb      	ldr	r3, [r7, #12]
   2ae70:	0011      	movs	r1, r2
   2ae72:	0018      	movs	r0, r3
   2ae74:	4b5a      	ldr	r3, [pc, #360]	; (2afe0 <put_fat+0x238>)
   2ae76:	4798      	blx	r3
   2ae78:	0003      	movs	r3, r0
   2ae7a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2ae7c:	231f      	movs	r3, #31
   2ae7e:	18fb      	adds	r3, r7, r3
   2ae80:	781b      	ldrb	r3, [r3, #0]
   2ae82:	2b00      	cmp	r3, #0
   2ae84:	d000      	beq.n	2ae88 <put_fat+0xe0>
   2ae86:	e09b      	b.n	2afc0 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2ae88:	69bb      	ldr	r3, [r7, #24]
   2ae8a:	05db      	lsls	r3, r3, #23
   2ae8c:	0ddb      	lsrs	r3, r3, #23
   2ae8e:	3330      	adds	r3, #48	; 0x30
   2ae90:	68fa      	ldr	r2, [r7, #12]
   2ae92:	18d3      	adds	r3, r2, r3
   2ae94:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2ae96:	68bb      	ldr	r3, [r7, #8]
   2ae98:	2201      	movs	r2, #1
   2ae9a:	4013      	ands	r3, r2
   2ae9c:	d003      	beq.n	2aea6 <put_fat+0xfe>
   2ae9e:	687b      	ldr	r3, [r7, #4]
   2aea0:	091b      	lsrs	r3, r3, #4
   2aea2:	b2db      	uxtb	r3, r3
   2aea4:	e00e      	b.n	2aec4 <put_fat+0x11c>
   2aea6:	697b      	ldr	r3, [r7, #20]
   2aea8:	781b      	ldrb	r3, [r3, #0]
   2aeaa:	b25b      	sxtb	r3, r3
   2aeac:	220f      	movs	r2, #15
   2aeae:	4393      	bics	r3, r2
   2aeb0:	b25a      	sxtb	r2, r3
   2aeb2:	687b      	ldr	r3, [r7, #4]
   2aeb4:	0a1b      	lsrs	r3, r3, #8
   2aeb6:	b25b      	sxtb	r3, r3
   2aeb8:	210f      	movs	r1, #15
   2aeba:	400b      	ands	r3, r1
   2aebc:	b25b      	sxtb	r3, r3
   2aebe:	4313      	orrs	r3, r2
   2aec0:	b25b      	sxtb	r3, r3
   2aec2:	b2db      	uxtb	r3, r3
   2aec4:	697a      	ldr	r2, [r7, #20]
   2aec6:	7013      	strb	r3, [r2, #0]
			break;
   2aec8:	e07f      	b.n	2afca <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2aeca:	68fb      	ldr	r3, [r7, #12]
   2aecc:	6a1a      	ldr	r2, [r3, #32]
   2aece:	68bb      	ldr	r3, [r7, #8]
   2aed0:	0a1b      	lsrs	r3, r3, #8
   2aed2:	18d2      	adds	r2, r2, r3
   2aed4:	231f      	movs	r3, #31
   2aed6:	18fc      	adds	r4, r7, r3
   2aed8:	68fb      	ldr	r3, [r7, #12]
   2aeda:	0011      	movs	r1, r2
   2aedc:	0018      	movs	r0, r3
   2aede:	4b40      	ldr	r3, [pc, #256]	; (2afe0 <put_fat+0x238>)
   2aee0:	4798      	blx	r3
   2aee2:	0003      	movs	r3, r0
   2aee4:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2aee6:	231f      	movs	r3, #31
   2aee8:	18fb      	adds	r3, r7, r3
   2aeea:	781b      	ldrb	r3, [r3, #0]
   2aeec:	2b00      	cmp	r3, #0
   2aeee:	d169      	bne.n	2afc4 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2aef0:	68bb      	ldr	r3, [r7, #8]
   2aef2:	005a      	lsls	r2, r3, #1
   2aef4:	23ff      	movs	r3, #255	; 0xff
   2aef6:	005b      	lsls	r3, r3, #1
   2aef8:	4013      	ands	r3, r2
   2aefa:	3330      	adds	r3, #48	; 0x30
   2aefc:	68fa      	ldr	r2, [r7, #12]
   2aefe:	18d3      	adds	r3, r2, r3
   2af00:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2af02:	687b      	ldr	r3, [r7, #4]
   2af04:	b2da      	uxtb	r2, r3
   2af06:	697b      	ldr	r3, [r7, #20]
   2af08:	701a      	strb	r2, [r3, #0]
   2af0a:	697b      	ldr	r3, [r7, #20]
   2af0c:	3301      	adds	r3, #1
   2af0e:	687a      	ldr	r2, [r7, #4]
   2af10:	b292      	uxth	r2, r2
   2af12:	0a12      	lsrs	r2, r2, #8
   2af14:	b292      	uxth	r2, r2
   2af16:	b2d2      	uxtb	r2, r2
   2af18:	701a      	strb	r2, [r3, #0]
			break;
   2af1a:	e056      	b.n	2afca <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2af1c:	68fb      	ldr	r3, [r7, #12]
   2af1e:	6a1a      	ldr	r2, [r3, #32]
   2af20:	68bb      	ldr	r3, [r7, #8]
   2af22:	09db      	lsrs	r3, r3, #7
   2af24:	18d2      	adds	r2, r2, r3
   2af26:	231f      	movs	r3, #31
   2af28:	18fc      	adds	r4, r7, r3
   2af2a:	68fb      	ldr	r3, [r7, #12]
   2af2c:	0011      	movs	r1, r2
   2af2e:	0018      	movs	r0, r3
   2af30:	4b2b      	ldr	r3, [pc, #172]	; (2afe0 <put_fat+0x238>)
   2af32:	4798      	blx	r3
   2af34:	0003      	movs	r3, r0
   2af36:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2af38:	231f      	movs	r3, #31
   2af3a:	18fb      	adds	r3, r7, r3
   2af3c:	781b      	ldrb	r3, [r3, #0]
   2af3e:	2b00      	cmp	r3, #0
   2af40:	d142      	bne.n	2afc8 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2af42:	68bb      	ldr	r3, [r7, #8]
   2af44:	009a      	lsls	r2, r3, #2
   2af46:	23fe      	movs	r3, #254	; 0xfe
   2af48:	005b      	lsls	r3, r3, #1
   2af4a:	4013      	ands	r3, r2
   2af4c:	3330      	adds	r3, #48	; 0x30
   2af4e:	68fa      	ldr	r2, [r7, #12]
   2af50:	18d3      	adds	r3, r2, r3
   2af52:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2af54:	697b      	ldr	r3, [r7, #20]
   2af56:	3303      	adds	r3, #3
   2af58:	781b      	ldrb	r3, [r3, #0]
   2af5a:	061a      	lsls	r2, r3, #24
   2af5c:	697b      	ldr	r3, [r7, #20]
   2af5e:	3302      	adds	r3, #2
   2af60:	781b      	ldrb	r3, [r3, #0]
   2af62:	041b      	lsls	r3, r3, #16
   2af64:	4313      	orrs	r3, r2
   2af66:	697a      	ldr	r2, [r7, #20]
   2af68:	3201      	adds	r2, #1
   2af6a:	7812      	ldrb	r2, [r2, #0]
   2af6c:	0212      	lsls	r2, r2, #8
   2af6e:	4313      	orrs	r3, r2
   2af70:	697a      	ldr	r2, [r7, #20]
   2af72:	7812      	ldrb	r2, [r2, #0]
   2af74:	4313      	orrs	r3, r2
   2af76:	0f1b      	lsrs	r3, r3, #28
   2af78:	071b      	lsls	r3, r3, #28
   2af7a:	687a      	ldr	r2, [r7, #4]
   2af7c:	4313      	orrs	r3, r2
   2af7e:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2af80:	687b      	ldr	r3, [r7, #4]
   2af82:	b2da      	uxtb	r2, r3
   2af84:	697b      	ldr	r3, [r7, #20]
   2af86:	701a      	strb	r2, [r3, #0]
   2af88:	697b      	ldr	r3, [r7, #20]
   2af8a:	3301      	adds	r3, #1
   2af8c:	687a      	ldr	r2, [r7, #4]
   2af8e:	b292      	uxth	r2, r2
   2af90:	0a12      	lsrs	r2, r2, #8
   2af92:	b292      	uxth	r2, r2
   2af94:	b2d2      	uxtb	r2, r2
   2af96:	701a      	strb	r2, [r3, #0]
   2af98:	697b      	ldr	r3, [r7, #20]
   2af9a:	3302      	adds	r3, #2
   2af9c:	687a      	ldr	r2, [r7, #4]
   2af9e:	0c12      	lsrs	r2, r2, #16
   2afa0:	b2d2      	uxtb	r2, r2
   2afa2:	701a      	strb	r2, [r3, #0]
   2afa4:	697b      	ldr	r3, [r7, #20]
   2afa6:	3303      	adds	r3, #3
   2afa8:	687a      	ldr	r2, [r7, #4]
   2afaa:	0e12      	lsrs	r2, r2, #24
   2afac:	b2d2      	uxtb	r2, r2
   2afae:	701a      	strb	r2, [r3, #0]
			break;
   2afb0:	e00b      	b.n	2afca <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2afb2:	231f      	movs	r3, #31
   2afb4:	18fb      	adds	r3, r7, r3
   2afb6:	2202      	movs	r2, #2
   2afb8:	701a      	strb	r2, [r3, #0]
   2afba:	e006      	b.n	2afca <put_fat+0x222>
			if (res != FR_OK) break;
   2afbc:	46c0      	nop			; (mov r8, r8)
   2afbe:	e004      	b.n	2afca <put_fat+0x222>
			if (res != FR_OK) break;
   2afc0:	46c0      	nop			; (mov r8, r8)
   2afc2:	e002      	b.n	2afca <put_fat+0x222>
			if (res != FR_OK) break;
   2afc4:	46c0      	nop			; (mov r8, r8)
   2afc6:	e000      	b.n	2afca <put_fat+0x222>
			if (res != FR_OK) break;
   2afc8:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2afca:	68fb      	ldr	r3, [r7, #12]
   2afcc:	2201      	movs	r2, #1
   2afce:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2afd0:	231f      	movs	r3, #31
   2afd2:	18fb      	adds	r3, r7, r3
   2afd4:	781b      	ldrb	r3, [r3, #0]
}
   2afd6:	0018      	movs	r0, r3
   2afd8:	46bd      	mov	sp, r7
   2afda:	b009      	add	sp, #36	; 0x24
   2afdc:	bd90      	pop	{r4, r7, pc}
   2afde:	46c0      	nop			; (mov r8, r8)
   2afe0:	0002a9a5 	.word	0x0002a9a5

0002afe4 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2afe4:	b590      	push	{r4, r7, lr}
   2afe6:	b085      	sub	sp, #20
   2afe8:	af00      	add	r7, sp, #0
   2afea:	6078      	str	r0, [r7, #4]
   2afec:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2afee:	683b      	ldr	r3, [r7, #0]
   2aff0:	2b01      	cmp	r3, #1
   2aff2:	d904      	bls.n	2affe <remove_chain+0x1a>
   2aff4:	687b      	ldr	r3, [r7, #4]
   2aff6:	699a      	ldr	r2, [r3, #24]
   2aff8:	683b      	ldr	r3, [r7, #0]
   2affa:	429a      	cmp	r2, r3
   2affc:	d804      	bhi.n	2b008 <remove_chain+0x24>
		res = FR_INT_ERR;
   2affe:	230f      	movs	r3, #15
   2b000:	18fb      	adds	r3, r7, r3
   2b002:	2202      	movs	r2, #2
   2b004:	701a      	strb	r2, [r3, #0]
   2b006:	e045      	b.n	2b094 <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2b008:	230f      	movs	r3, #15
   2b00a:	18fb      	adds	r3, r7, r3
   2b00c:	2200      	movs	r2, #0
   2b00e:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2b010:	e037      	b.n	2b082 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2b012:	683a      	ldr	r2, [r7, #0]
   2b014:	687b      	ldr	r3, [r7, #4]
   2b016:	0011      	movs	r1, r2
   2b018:	0018      	movs	r0, r3
   2b01a:	4b22      	ldr	r3, [pc, #136]	; (2b0a4 <remove_chain+0xc0>)
   2b01c:	4798      	blx	r3
   2b01e:	0003      	movs	r3, r0
   2b020:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2b022:	68bb      	ldr	r3, [r7, #8]
   2b024:	2b00      	cmp	r3, #0
   2b026:	d032      	beq.n	2b08e <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2b028:	68bb      	ldr	r3, [r7, #8]
   2b02a:	2b01      	cmp	r3, #1
   2b02c:	d104      	bne.n	2b038 <remove_chain+0x54>
   2b02e:	230f      	movs	r3, #15
   2b030:	18fb      	adds	r3, r7, r3
   2b032:	2202      	movs	r2, #2
   2b034:	701a      	strb	r2, [r3, #0]
   2b036:	e02d      	b.n	2b094 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2b038:	68bb      	ldr	r3, [r7, #8]
   2b03a:	3301      	adds	r3, #1
   2b03c:	d104      	bne.n	2b048 <remove_chain+0x64>
   2b03e:	230f      	movs	r3, #15
   2b040:	18fb      	adds	r3, r7, r3
   2b042:	2201      	movs	r2, #1
   2b044:	701a      	strb	r2, [r3, #0]
   2b046:	e025      	b.n	2b094 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2b048:	230f      	movs	r3, #15
   2b04a:	18fc      	adds	r4, r7, r3
   2b04c:	6839      	ldr	r1, [r7, #0]
   2b04e:	687b      	ldr	r3, [r7, #4]
   2b050:	2200      	movs	r2, #0
   2b052:	0018      	movs	r0, r3
   2b054:	4b14      	ldr	r3, [pc, #80]	; (2b0a8 <remove_chain+0xc4>)
   2b056:	4798      	blx	r3
   2b058:	0003      	movs	r3, r0
   2b05a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b05c:	230f      	movs	r3, #15
   2b05e:	18fb      	adds	r3, r7, r3
   2b060:	781b      	ldrb	r3, [r3, #0]
   2b062:	2b00      	cmp	r3, #0
   2b064:	d115      	bne.n	2b092 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2b066:	687b      	ldr	r3, [r7, #4]
   2b068:	691b      	ldr	r3, [r3, #16]
   2b06a:	3301      	adds	r3, #1
   2b06c:	d007      	beq.n	2b07e <remove_chain+0x9a>
				fs->free_clust++;
   2b06e:	687b      	ldr	r3, [r7, #4]
   2b070:	691b      	ldr	r3, [r3, #16]
   2b072:	1c5a      	adds	r2, r3, #1
   2b074:	687b      	ldr	r3, [r7, #4]
   2b076:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2b078:	687b      	ldr	r3, [r7, #4]
   2b07a:	2201      	movs	r2, #1
   2b07c:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2b07e:	68bb      	ldr	r3, [r7, #8]
   2b080:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2b082:	687b      	ldr	r3, [r7, #4]
   2b084:	699a      	ldr	r2, [r3, #24]
   2b086:	683b      	ldr	r3, [r7, #0]
   2b088:	429a      	cmp	r2, r3
   2b08a:	d8c2      	bhi.n	2b012 <remove_chain+0x2e>
   2b08c:	e002      	b.n	2b094 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2b08e:	46c0      	nop			; (mov r8, r8)
   2b090:	e000      	b.n	2b094 <remove_chain+0xb0>
			if (res != FR_OK) break;
   2b092:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2b094:	230f      	movs	r3, #15
   2b096:	18fb      	adds	r3, r7, r3
   2b098:	781b      	ldrb	r3, [r3, #0]
}
   2b09a:	0018      	movs	r0, r3
   2b09c:	46bd      	mov	sp, r7
   2b09e:	b005      	add	sp, #20
   2b0a0:	bd90      	pop	{r4, r7, pc}
   2b0a2:	46c0      	nop			; (mov r8, r8)
   2b0a4:	0002ac3d 	.word	0x0002ac3d
   2b0a8:	0002ada9 	.word	0x0002ada9

0002b0ac <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2b0ac:	b590      	push	{r4, r7, lr}
   2b0ae:	b087      	sub	sp, #28
   2b0b0:	af00      	add	r7, sp, #0
   2b0b2:	6078      	str	r0, [r7, #4]
   2b0b4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2b0b6:	683b      	ldr	r3, [r7, #0]
   2b0b8:	2b00      	cmp	r3, #0
   2b0ba:	d10d      	bne.n	2b0d8 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2b0bc:	687b      	ldr	r3, [r7, #4]
   2b0be:	68db      	ldr	r3, [r3, #12]
   2b0c0:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2b0c2:	693b      	ldr	r3, [r7, #16]
   2b0c4:	2b00      	cmp	r3, #0
   2b0c6:	d004      	beq.n	2b0d2 <create_chain+0x26>
   2b0c8:	687b      	ldr	r3, [r7, #4]
   2b0ca:	699a      	ldr	r2, [r3, #24]
   2b0cc:	693b      	ldr	r3, [r7, #16]
   2b0ce:	429a      	cmp	r2, r3
   2b0d0:	d818      	bhi.n	2b104 <create_chain+0x58>
   2b0d2:	2301      	movs	r3, #1
   2b0d4:	613b      	str	r3, [r7, #16]
   2b0d6:	e015      	b.n	2b104 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2b0d8:	683a      	ldr	r2, [r7, #0]
   2b0da:	687b      	ldr	r3, [r7, #4]
   2b0dc:	0011      	movs	r1, r2
   2b0de:	0018      	movs	r0, r3
   2b0e0:	4b3e      	ldr	r3, [pc, #248]	; (2b1dc <create_chain+0x130>)
   2b0e2:	4798      	blx	r3
   2b0e4:	0003      	movs	r3, r0
   2b0e6:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2b0e8:	68bb      	ldr	r3, [r7, #8]
   2b0ea:	2b01      	cmp	r3, #1
   2b0ec:	d801      	bhi.n	2b0f2 <create_chain+0x46>
   2b0ee:	2301      	movs	r3, #1
   2b0f0:	e070      	b.n	2b1d4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2b0f2:	687b      	ldr	r3, [r7, #4]
   2b0f4:	699a      	ldr	r2, [r3, #24]
   2b0f6:	68bb      	ldr	r3, [r7, #8]
   2b0f8:	429a      	cmp	r2, r3
   2b0fa:	d901      	bls.n	2b100 <create_chain+0x54>
   2b0fc:	68bb      	ldr	r3, [r7, #8]
   2b0fe:	e069      	b.n	2b1d4 <create_chain+0x128>
		scl = clst;
   2b100:	683b      	ldr	r3, [r7, #0]
   2b102:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2b104:	693b      	ldr	r3, [r7, #16]
   2b106:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2b108:	697b      	ldr	r3, [r7, #20]
   2b10a:	3301      	adds	r3, #1
   2b10c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2b10e:	687b      	ldr	r3, [r7, #4]
   2b110:	699a      	ldr	r2, [r3, #24]
   2b112:	697b      	ldr	r3, [r7, #20]
   2b114:	429a      	cmp	r2, r3
   2b116:	d807      	bhi.n	2b128 <create_chain+0x7c>
			ncl = 2;
   2b118:	2302      	movs	r3, #2
   2b11a:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2b11c:	697a      	ldr	r2, [r7, #20]
   2b11e:	693b      	ldr	r3, [r7, #16]
   2b120:	429a      	cmp	r2, r3
   2b122:	d901      	bls.n	2b128 <create_chain+0x7c>
   2b124:	2300      	movs	r3, #0
   2b126:	e055      	b.n	2b1d4 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2b128:	697a      	ldr	r2, [r7, #20]
   2b12a:	687b      	ldr	r3, [r7, #4]
   2b12c:	0011      	movs	r1, r2
   2b12e:	0018      	movs	r0, r3
   2b130:	4b2a      	ldr	r3, [pc, #168]	; (2b1dc <create_chain+0x130>)
   2b132:	4798      	blx	r3
   2b134:	0003      	movs	r3, r0
   2b136:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2b138:	68bb      	ldr	r3, [r7, #8]
   2b13a:	2b00      	cmp	r3, #0
   2b13c:	d00d      	beq.n	2b15a <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2b13e:	68bb      	ldr	r3, [r7, #8]
   2b140:	3301      	adds	r3, #1
   2b142:	d002      	beq.n	2b14a <create_chain+0x9e>
   2b144:	68bb      	ldr	r3, [r7, #8]
   2b146:	2b01      	cmp	r3, #1
   2b148:	d101      	bne.n	2b14e <create_chain+0xa2>
			return cs;
   2b14a:	68bb      	ldr	r3, [r7, #8]
   2b14c:	e042      	b.n	2b1d4 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2b14e:	697a      	ldr	r2, [r7, #20]
   2b150:	693b      	ldr	r3, [r7, #16]
   2b152:	429a      	cmp	r2, r3
   2b154:	d1d8      	bne.n	2b108 <create_chain+0x5c>
   2b156:	2300      	movs	r3, #0
   2b158:	e03c      	b.n	2b1d4 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2b15a:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2b15c:	230f      	movs	r3, #15
   2b15e:	18fc      	adds	r4, r7, r3
   2b160:	4a1f      	ldr	r2, [pc, #124]	; (2b1e0 <create_chain+0x134>)
   2b162:	6979      	ldr	r1, [r7, #20]
   2b164:	687b      	ldr	r3, [r7, #4]
   2b166:	0018      	movs	r0, r3
   2b168:	4b1e      	ldr	r3, [pc, #120]	; (2b1e4 <create_chain+0x138>)
   2b16a:	4798      	blx	r3
   2b16c:	0003      	movs	r3, r0
   2b16e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2b170:	230f      	movs	r3, #15
   2b172:	18fb      	adds	r3, r7, r3
   2b174:	781b      	ldrb	r3, [r3, #0]
   2b176:	2b00      	cmp	r3, #0
   2b178:	d10c      	bne.n	2b194 <create_chain+0xe8>
   2b17a:	683b      	ldr	r3, [r7, #0]
   2b17c:	2b00      	cmp	r3, #0
   2b17e:	d009      	beq.n	2b194 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2b180:	230f      	movs	r3, #15
   2b182:	18fc      	adds	r4, r7, r3
   2b184:	697a      	ldr	r2, [r7, #20]
   2b186:	6839      	ldr	r1, [r7, #0]
   2b188:	687b      	ldr	r3, [r7, #4]
   2b18a:	0018      	movs	r0, r3
   2b18c:	4b15      	ldr	r3, [pc, #84]	; (2b1e4 <create_chain+0x138>)
   2b18e:	4798      	blx	r3
   2b190:	0003      	movs	r3, r0
   2b192:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2b194:	230f      	movs	r3, #15
   2b196:	18fb      	adds	r3, r7, r3
   2b198:	781b      	ldrb	r3, [r3, #0]
   2b19a:	2b00      	cmp	r3, #0
   2b19c:	d10f      	bne.n	2b1be <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2b19e:	687b      	ldr	r3, [r7, #4]
   2b1a0:	697a      	ldr	r2, [r7, #20]
   2b1a2:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2b1a4:	687b      	ldr	r3, [r7, #4]
   2b1a6:	691b      	ldr	r3, [r3, #16]
   2b1a8:	3301      	adds	r3, #1
   2b1aa:	d012      	beq.n	2b1d2 <create_chain+0x126>
			fs->free_clust--;
   2b1ac:	687b      	ldr	r3, [r7, #4]
   2b1ae:	691b      	ldr	r3, [r3, #16]
   2b1b0:	1e5a      	subs	r2, r3, #1
   2b1b2:	687b      	ldr	r3, [r7, #4]
   2b1b4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2b1b6:	687b      	ldr	r3, [r7, #4]
   2b1b8:	2201      	movs	r2, #1
   2b1ba:	715a      	strb	r2, [r3, #5]
   2b1bc:	e009      	b.n	2b1d2 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2b1be:	230f      	movs	r3, #15
   2b1c0:	18fb      	adds	r3, r7, r3
   2b1c2:	781b      	ldrb	r3, [r3, #0]
   2b1c4:	2b01      	cmp	r3, #1
   2b1c6:	d102      	bne.n	2b1ce <create_chain+0x122>
   2b1c8:	2301      	movs	r3, #1
   2b1ca:	425b      	negs	r3, r3
   2b1cc:	e000      	b.n	2b1d0 <create_chain+0x124>
   2b1ce:	2301      	movs	r3, #1
   2b1d0:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2b1d2:	697b      	ldr	r3, [r7, #20]
}
   2b1d4:	0018      	movs	r0, r3
   2b1d6:	46bd      	mov	sp, r7
   2b1d8:	b007      	add	sp, #28
   2b1da:	bd90      	pop	{r4, r7, pc}
   2b1dc:	0002ac3d 	.word	0x0002ac3d
   2b1e0:	0fffffff 	.word	0x0fffffff
   2b1e4:	0002ada9 	.word	0x0002ada9

0002b1e8 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2b1e8:	b580      	push	{r7, lr}
   2b1ea:	b084      	sub	sp, #16
   2b1ec:	af00      	add	r7, sp, #0
   2b1ee:	6078      	str	r0, [r7, #4]
   2b1f0:	000a      	movs	r2, r1
   2b1f2:	1cbb      	adds	r3, r7, #2
   2b1f4:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2b1f6:	687b      	ldr	r3, [r7, #4]
   2b1f8:	1cba      	adds	r2, r7, #2
   2b1fa:	8812      	ldrh	r2, [r2, #0]
   2b1fc:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2b1fe:	687b      	ldr	r3, [r7, #4]
   2b200:	689b      	ldr	r3, [r3, #8]
   2b202:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2b204:	68fb      	ldr	r3, [r7, #12]
   2b206:	2b01      	cmp	r3, #1
   2b208:	d005      	beq.n	2b216 <dir_sdi+0x2e>
   2b20a:	687b      	ldr	r3, [r7, #4]
   2b20c:	681b      	ldr	r3, [r3, #0]
   2b20e:	699a      	ldr	r2, [r3, #24]
   2b210:	68fb      	ldr	r3, [r7, #12]
   2b212:	429a      	cmp	r2, r3
   2b214:	d801      	bhi.n	2b21a <dir_sdi+0x32>
		return FR_INT_ERR;
   2b216:	2302      	movs	r3, #2
   2b218:	e075      	b.n	2b306 <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2b21a:	68fb      	ldr	r3, [r7, #12]
   2b21c:	2b00      	cmp	r3, #0
   2b21e:	d108      	bne.n	2b232 <dir_sdi+0x4a>
   2b220:	687b      	ldr	r3, [r7, #4]
   2b222:	681b      	ldr	r3, [r3, #0]
   2b224:	781b      	ldrb	r3, [r3, #0]
   2b226:	2b03      	cmp	r3, #3
   2b228:	d103      	bne.n	2b232 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2b22a:	687b      	ldr	r3, [r7, #4]
   2b22c:	681b      	ldr	r3, [r3, #0]
   2b22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b230:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2b232:	68fb      	ldr	r3, [r7, #12]
   2b234:	2b00      	cmp	r3, #0
   2b236:	d116      	bne.n	2b266 <dir_sdi+0x7e>
		dj->clust = clst;
   2b238:	687b      	ldr	r3, [r7, #4]
   2b23a:	68fa      	ldr	r2, [r7, #12]
   2b23c:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2b23e:	687b      	ldr	r3, [r7, #4]
   2b240:	681b      	ldr	r3, [r3, #0]
   2b242:	891b      	ldrh	r3, [r3, #8]
   2b244:	1cba      	adds	r2, r7, #2
   2b246:	8812      	ldrh	r2, [r2, #0]
   2b248:	429a      	cmp	r2, r3
   2b24a:	d301      	bcc.n	2b250 <dir_sdi+0x68>
			return FR_INT_ERR;
   2b24c:	2302      	movs	r3, #2
   2b24e:	e05a      	b.n	2b306 <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2b250:	687b      	ldr	r3, [r7, #4]
   2b252:	681b      	ldr	r3, [r3, #0]
   2b254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b256:	1cba      	adds	r2, r7, #2
   2b258:	8812      	ldrh	r2, [r2, #0]
   2b25a:	0912      	lsrs	r2, r2, #4
   2b25c:	b292      	uxth	r2, r2
   2b25e:	189a      	adds	r2, r3, r2
   2b260:	687b      	ldr	r3, [r7, #4]
   2b262:	611a      	str	r2, [r3, #16]
   2b264:	e042      	b.n	2b2ec <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2b266:	687b      	ldr	r3, [r7, #4]
   2b268:	681b      	ldr	r3, [r3, #0]
   2b26a:	789b      	ldrb	r3, [r3, #2]
   2b26c:	b29a      	uxth	r2, r3
   2b26e:	230a      	movs	r3, #10
   2b270:	18fb      	adds	r3, r7, r3
   2b272:	0112      	lsls	r2, r2, #4
   2b274:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2b276:	e020      	b.n	2b2ba <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2b278:	687b      	ldr	r3, [r7, #4]
   2b27a:	681b      	ldr	r3, [r3, #0]
   2b27c:	68fa      	ldr	r2, [r7, #12]
   2b27e:	0011      	movs	r1, r2
   2b280:	0018      	movs	r0, r3
   2b282:	4b23      	ldr	r3, [pc, #140]	; (2b310 <dir_sdi+0x128>)
   2b284:	4798      	blx	r3
   2b286:	0003      	movs	r3, r0
   2b288:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2b28a:	68fb      	ldr	r3, [r7, #12]
   2b28c:	3301      	adds	r3, #1
   2b28e:	d101      	bne.n	2b294 <dir_sdi+0xac>
   2b290:	2301      	movs	r3, #1
   2b292:	e038      	b.n	2b306 <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2b294:	68fb      	ldr	r3, [r7, #12]
   2b296:	2b01      	cmp	r3, #1
   2b298:	d905      	bls.n	2b2a6 <dir_sdi+0xbe>
   2b29a:	687b      	ldr	r3, [r7, #4]
   2b29c:	681b      	ldr	r3, [r3, #0]
   2b29e:	699a      	ldr	r2, [r3, #24]
   2b2a0:	68fb      	ldr	r3, [r7, #12]
   2b2a2:	429a      	cmp	r2, r3
   2b2a4:	d801      	bhi.n	2b2aa <dir_sdi+0xc2>
				return FR_INT_ERR;
   2b2a6:	2302      	movs	r3, #2
   2b2a8:	e02d      	b.n	2b306 <dir_sdi+0x11e>
			idx -= ic;
   2b2aa:	1cbb      	adds	r3, r7, #2
   2b2ac:	1cb9      	adds	r1, r7, #2
   2b2ae:	220a      	movs	r2, #10
   2b2b0:	18ba      	adds	r2, r7, r2
   2b2b2:	8809      	ldrh	r1, [r1, #0]
   2b2b4:	8812      	ldrh	r2, [r2, #0]
   2b2b6:	1a8a      	subs	r2, r1, r2
   2b2b8:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2b2ba:	1cba      	adds	r2, r7, #2
   2b2bc:	230a      	movs	r3, #10
   2b2be:	18fb      	adds	r3, r7, r3
   2b2c0:	8812      	ldrh	r2, [r2, #0]
   2b2c2:	881b      	ldrh	r3, [r3, #0]
   2b2c4:	429a      	cmp	r2, r3
   2b2c6:	d2d7      	bcs.n	2b278 <dir_sdi+0x90>
		}
		dj->clust = clst;
   2b2c8:	687b      	ldr	r3, [r7, #4]
   2b2ca:	68fa      	ldr	r2, [r7, #12]
   2b2cc:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2b2ce:	687b      	ldr	r3, [r7, #4]
   2b2d0:	681b      	ldr	r3, [r3, #0]
   2b2d2:	68fa      	ldr	r2, [r7, #12]
   2b2d4:	0011      	movs	r1, r2
   2b2d6:	0018      	movs	r0, r3
   2b2d8:	4b0e      	ldr	r3, [pc, #56]	; (2b314 <dir_sdi+0x12c>)
   2b2da:	4798      	blx	r3
   2b2dc:	0002      	movs	r2, r0
   2b2de:	1cbb      	adds	r3, r7, #2
   2b2e0:	881b      	ldrh	r3, [r3, #0]
   2b2e2:	091b      	lsrs	r3, r3, #4
   2b2e4:	b29b      	uxth	r3, r3
   2b2e6:	18d2      	adds	r2, r2, r3
   2b2e8:	687b      	ldr	r3, [r7, #4]
   2b2ea:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2b2ec:	687b      	ldr	r3, [r7, #4]
   2b2ee:	681b      	ldr	r3, [r3, #0]
   2b2f0:	3330      	adds	r3, #48	; 0x30
   2b2f2:	001a      	movs	r2, r3
   2b2f4:	1cbb      	adds	r3, r7, #2
   2b2f6:	881b      	ldrh	r3, [r3, #0]
   2b2f8:	210f      	movs	r1, #15
   2b2fa:	400b      	ands	r3, r1
   2b2fc:	015b      	lsls	r3, r3, #5
   2b2fe:	18d2      	adds	r2, r2, r3
   2b300:	687b      	ldr	r3, [r7, #4]
   2b302:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2b304:	2300      	movs	r3, #0
}
   2b306:	0018      	movs	r0, r3
   2b308:	46bd      	mov	sp, r7
   2b30a:	b004      	add	sp, #16
   2b30c:	bd80      	pop	{r7, pc}
   2b30e:	46c0      	nop			; (mov r8, r8)
   2b310:	0002ac3d 	.word	0x0002ac3d
   2b314:	0002ac05 	.word	0x0002ac05

0002b318 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2b318:	b590      	push	{r4, r7, lr}
   2b31a:	b085      	sub	sp, #20
   2b31c:	af00      	add	r7, sp, #0
   2b31e:	6078      	str	r0, [r7, #4]
   2b320:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2b322:	687b      	ldr	r3, [r7, #4]
   2b324:	88da      	ldrh	r2, [r3, #6]
   2b326:	2308      	movs	r3, #8
   2b328:	18fb      	adds	r3, r7, r3
   2b32a:	3201      	adds	r2, #1
   2b32c:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2b32e:	2308      	movs	r3, #8
   2b330:	18fb      	adds	r3, r7, r3
   2b332:	881b      	ldrh	r3, [r3, #0]
   2b334:	2b00      	cmp	r3, #0
   2b336:	d003      	beq.n	2b340 <dir_next+0x28>
   2b338:	687b      	ldr	r3, [r7, #4]
   2b33a:	691b      	ldr	r3, [r3, #16]
   2b33c:	2b00      	cmp	r3, #0
   2b33e:	d101      	bne.n	2b344 <dir_next+0x2c>
		return FR_NO_FILE;
   2b340:	2304      	movs	r3, #4
   2b342:	e0d2      	b.n	2b4ea <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2b344:	2308      	movs	r3, #8
   2b346:	18fb      	adds	r3, r7, r3
   2b348:	881b      	ldrh	r3, [r3, #0]
   2b34a:	220f      	movs	r2, #15
   2b34c:	4013      	ands	r3, r2
   2b34e:	b29b      	uxth	r3, r3
   2b350:	2b00      	cmp	r3, #0
   2b352:	d000      	beq.n	2b356 <dir_next+0x3e>
   2b354:	e0b6      	b.n	2b4c4 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2b356:	687b      	ldr	r3, [r7, #4]
   2b358:	691b      	ldr	r3, [r3, #16]
   2b35a:	1c5a      	adds	r2, r3, #1
   2b35c:	687b      	ldr	r3, [r7, #4]
   2b35e:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2b360:	687b      	ldr	r3, [r7, #4]
   2b362:	68db      	ldr	r3, [r3, #12]
   2b364:	2b00      	cmp	r3, #0
   2b366:	d10a      	bne.n	2b37e <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2b368:	687b      	ldr	r3, [r7, #4]
   2b36a:	681b      	ldr	r3, [r3, #0]
   2b36c:	891b      	ldrh	r3, [r3, #8]
   2b36e:	2208      	movs	r2, #8
   2b370:	18ba      	adds	r2, r7, r2
   2b372:	8812      	ldrh	r2, [r2, #0]
   2b374:	429a      	cmp	r2, r3
   2b376:	d200      	bcs.n	2b37a <dir_next+0x62>
   2b378:	e0a4      	b.n	2b4c4 <dir_next+0x1ac>
				return FR_NO_FILE;
   2b37a:	2304      	movs	r3, #4
   2b37c:	e0b5      	b.n	2b4ea <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2b37e:	2308      	movs	r3, #8
   2b380:	18fb      	adds	r3, r7, r3
   2b382:	881b      	ldrh	r3, [r3, #0]
   2b384:	091b      	lsrs	r3, r3, #4
   2b386:	b29b      	uxth	r3, r3
   2b388:	001a      	movs	r2, r3
   2b38a:	687b      	ldr	r3, [r7, #4]
   2b38c:	681b      	ldr	r3, [r3, #0]
   2b38e:	789b      	ldrb	r3, [r3, #2]
   2b390:	3b01      	subs	r3, #1
   2b392:	4013      	ands	r3, r2
   2b394:	d000      	beq.n	2b398 <dir_next+0x80>
   2b396:	e095      	b.n	2b4c4 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2b398:	687b      	ldr	r3, [r7, #4]
   2b39a:	681a      	ldr	r2, [r3, #0]
   2b39c:	687b      	ldr	r3, [r7, #4]
   2b39e:	68db      	ldr	r3, [r3, #12]
   2b3a0:	0019      	movs	r1, r3
   2b3a2:	0010      	movs	r0, r2
   2b3a4:	4b53      	ldr	r3, [pc, #332]	; (2b4f4 <dir_next+0x1dc>)
   2b3a6:	4798      	blx	r3
   2b3a8:	0003      	movs	r3, r0
   2b3aa:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2b3ac:	68fb      	ldr	r3, [r7, #12]
   2b3ae:	2b01      	cmp	r3, #1
   2b3b0:	d801      	bhi.n	2b3b6 <dir_next+0x9e>
   2b3b2:	2302      	movs	r3, #2
   2b3b4:	e099      	b.n	2b4ea <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2b3b6:	68fb      	ldr	r3, [r7, #12]
   2b3b8:	3301      	adds	r3, #1
   2b3ba:	d101      	bne.n	2b3c0 <dir_next+0xa8>
   2b3bc:	2301      	movs	r3, #1
   2b3be:	e094      	b.n	2b4ea <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2b3c0:	687b      	ldr	r3, [r7, #4]
   2b3c2:	681b      	ldr	r3, [r3, #0]
   2b3c4:	699a      	ldr	r2, [r3, #24]
   2b3c6:	68fb      	ldr	r3, [r7, #12]
   2b3c8:	429a      	cmp	r2, r3
   2b3ca:	d900      	bls.n	2b3ce <dir_next+0xb6>
   2b3cc:	e06d      	b.n	2b4aa <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2b3ce:	683b      	ldr	r3, [r7, #0]
   2b3d0:	2b00      	cmp	r3, #0
   2b3d2:	d101      	bne.n	2b3d8 <dir_next+0xc0>
   2b3d4:	2304      	movs	r3, #4
   2b3d6:	e088      	b.n	2b4ea <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2b3d8:	687b      	ldr	r3, [r7, #4]
   2b3da:	681a      	ldr	r2, [r3, #0]
   2b3dc:	687b      	ldr	r3, [r7, #4]
   2b3de:	68db      	ldr	r3, [r3, #12]
   2b3e0:	0019      	movs	r1, r3
   2b3e2:	0010      	movs	r0, r2
   2b3e4:	4b44      	ldr	r3, [pc, #272]	; (2b4f8 <dir_next+0x1e0>)
   2b3e6:	4798      	blx	r3
   2b3e8:	0003      	movs	r3, r0
   2b3ea:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2b3ec:	68fb      	ldr	r3, [r7, #12]
   2b3ee:	2b00      	cmp	r3, #0
   2b3f0:	d101      	bne.n	2b3f6 <dir_next+0xde>
   2b3f2:	2307      	movs	r3, #7
   2b3f4:	e079      	b.n	2b4ea <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2b3f6:	68fb      	ldr	r3, [r7, #12]
   2b3f8:	2b01      	cmp	r3, #1
   2b3fa:	d101      	bne.n	2b400 <dir_next+0xe8>
   2b3fc:	2302      	movs	r3, #2
   2b3fe:	e074      	b.n	2b4ea <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2b400:	68fb      	ldr	r3, [r7, #12]
   2b402:	3301      	adds	r3, #1
   2b404:	d101      	bne.n	2b40a <dir_next+0xf2>
   2b406:	2301      	movs	r3, #1
   2b408:	e06f      	b.n	2b4ea <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2b40a:	687b      	ldr	r3, [r7, #4]
   2b40c:	681b      	ldr	r3, [r3, #0]
   2b40e:	2100      	movs	r1, #0
   2b410:	0018      	movs	r0, r3
   2b412:	4b3a      	ldr	r3, [pc, #232]	; (2b4fc <dir_next+0x1e4>)
   2b414:	4798      	blx	r3
   2b416:	1e03      	subs	r3, r0, #0
   2b418:	d001      	beq.n	2b41e <dir_next+0x106>
   2b41a:	2301      	movs	r3, #1
   2b41c:	e065      	b.n	2b4ea <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2b41e:	687b      	ldr	r3, [r7, #4]
   2b420:	681b      	ldr	r3, [r3, #0]
   2b422:	3330      	adds	r3, #48	; 0x30
   2b424:	0018      	movs	r0, r3
   2b426:	2380      	movs	r3, #128	; 0x80
   2b428:	009b      	lsls	r3, r3, #2
   2b42a:	001a      	movs	r2, r3
   2b42c:	2100      	movs	r1, #0
   2b42e:	4b34      	ldr	r3, [pc, #208]	; (2b500 <dir_next+0x1e8>)
   2b430:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2b432:	687b      	ldr	r3, [r7, #4]
   2b434:	681c      	ldr	r4, [r3, #0]
   2b436:	687b      	ldr	r3, [r7, #4]
   2b438:	681b      	ldr	r3, [r3, #0]
   2b43a:	68fa      	ldr	r2, [r7, #12]
   2b43c:	0011      	movs	r1, r2
   2b43e:	0018      	movs	r0, r3
   2b440:	4b30      	ldr	r3, [pc, #192]	; (2b504 <dir_next+0x1ec>)
   2b442:	4798      	blx	r3
   2b444:	0003      	movs	r3, r0
   2b446:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2b448:	230b      	movs	r3, #11
   2b44a:	18fb      	adds	r3, r7, r3
   2b44c:	2200      	movs	r2, #0
   2b44e:	701a      	strb	r2, [r3, #0]
   2b450:	e019      	b.n	2b486 <dir_next+0x16e>
						dj->fs->wflag = 1;
   2b452:	687b      	ldr	r3, [r7, #4]
   2b454:	681b      	ldr	r3, [r3, #0]
   2b456:	2201      	movs	r2, #1
   2b458:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2b45a:	687b      	ldr	r3, [r7, #4]
   2b45c:	681b      	ldr	r3, [r3, #0]
   2b45e:	2100      	movs	r1, #0
   2b460:	0018      	movs	r0, r3
   2b462:	4b26      	ldr	r3, [pc, #152]	; (2b4fc <dir_next+0x1e4>)
   2b464:	4798      	blx	r3
   2b466:	1e03      	subs	r3, r0, #0
   2b468:	d001      	beq.n	2b46e <dir_next+0x156>
   2b46a:	2301      	movs	r3, #1
   2b46c:	e03d      	b.n	2b4ea <dir_next+0x1d2>
						dj->fs->winsect++;
   2b46e:	687b      	ldr	r3, [r7, #4]
   2b470:	681b      	ldr	r3, [r3, #0]
   2b472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2b474:	3201      	adds	r2, #1
   2b476:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2b478:	230b      	movs	r3, #11
   2b47a:	18fb      	adds	r3, r7, r3
   2b47c:	781a      	ldrb	r2, [r3, #0]
   2b47e:	230b      	movs	r3, #11
   2b480:	18fb      	adds	r3, r7, r3
   2b482:	3201      	adds	r2, #1
   2b484:	701a      	strb	r2, [r3, #0]
   2b486:	687b      	ldr	r3, [r7, #4]
   2b488:	681b      	ldr	r3, [r3, #0]
   2b48a:	789b      	ldrb	r3, [r3, #2]
   2b48c:	220b      	movs	r2, #11
   2b48e:	18ba      	adds	r2, r7, r2
   2b490:	7812      	ldrb	r2, [r2, #0]
   2b492:	429a      	cmp	r2, r3
   2b494:	d3dd      	bcc.n	2b452 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2b496:	687b      	ldr	r3, [r7, #4]
   2b498:	681b      	ldr	r3, [r3, #0]
   2b49a:	687a      	ldr	r2, [r7, #4]
   2b49c:	6812      	ldr	r2, [r2, #0]
   2b49e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2b4a0:	220b      	movs	r2, #11
   2b4a2:	18ba      	adds	r2, r7, r2
   2b4a4:	7812      	ldrb	r2, [r2, #0]
   2b4a6:	1a8a      	subs	r2, r1, r2
   2b4a8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2b4aa:	687b      	ldr	r3, [r7, #4]
   2b4ac:	68fa      	ldr	r2, [r7, #12]
   2b4ae:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2b4b0:	687b      	ldr	r3, [r7, #4]
   2b4b2:	681b      	ldr	r3, [r3, #0]
   2b4b4:	68fa      	ldr	r2, [r7, #12]
   2b4b6:	0011      	movs	r1, r2
   2b4b8:	0018      	movs	r0, r3
   2b4ba:	4b12      	ldr	r3, [pc, #72]	; (2b504 <dir_next+0x1ec>)
   2b4bc:	4798      	blx	r3
   2b4be:	0002      	movs	r2, r0
   2b4c0:	687b      	ldr	r3, [r7, #4]
   2b4c2:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2b4c4:	687b      	ldr	r3, [r7, #4]
   2b4c6:	2208      	movs	r2, #8
   2b4c8:	18ba      	adds	r2, r7, r2
   2b4ca:	8812      	ldrh	r2, [r2, #0]
   2b4cc:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2b4ce:	687b      	ldr	r3, [r7, #4]
   2b4d0:	681b      	ldr	r3, [r3, #0]
   2b4d2:	3330      	adds	r3, #48	; 0x30
   2b4d4:	001a      	movs	r2, r3
   2b4d6:	2308      	movs	r3, #8
   2b4d8:	18fb      	adds	r3, r7, r3
   2b4da:	881b      	ldrh	r3, [r3, #0]
   2b4dc:	210f      	movs	r1, #15
   2b4de:	400b      	ands	r3, r1
   2b4e0:	015b      	lsls	r3, r3, #5
   2b4e2:	18d2      	adds	r2, r2, r3
   2b4e4:	687b      	ldr	r3, [r7, #4]
   2b4e6:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2b4e8:	2300      	movs	r3, #0
}
   2b4ea:	0018      	movs	r0, r3
   2b4ec:	46bd      	mov	sp, r7
   2b4ee:	b005      	add	sp, #20
   2b4f0:	bd90      	pop	{r4, r7, pc}
   2b4f2:	46c0      	nop			; (mov r8, r8)
   2b4f4:	0002ac3d 	.word	0x0002ac3d
   2b4f8:	0002b0ad 	.word	0x0002b0ad
   2b4fc:	0002a9a5 	.word	0x0002a9a5
   2b500:	0002a8f9 	.word	0x0002a8f9
   2b504:	0002ac05 	.word	0x0002ac05

0002b508 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2b508:	b590      	push	{r4, r7, lr}
   2b50a:	b087      	sub	sp, #28
   2b50c:	af00      	add	r7, sp, #0
   2b50e:	6078      	str	r0, [r7, #4]
   2b510:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2b512:	683b      	ldr	r3, [r7, #0]
   2b514:	781b      	ldrb	r3, [r3, #0]
   2b516:	001a      	movs	r2, r3
   2b518:	2340      	movs	r3, #64	; 0x40
   2b51a:	439a      	bics	r2, r3
   2b51c:	0013      	movs	r3, r2
   2b51e:	1e5a      	subs	r2, r3, #1
   2b520:	0013      	movs	r3, r2
   2b522:	005b      	lsls	r3, r3, #1
   2b524:	189b      	adds	r3, r3, r2
   2b526:	009b      	lsls	r3, r3, #2
   2b528:	189b      	adds	r3, r3, r2
   2b52a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2b52c:	2300      	movs	r3, #0
   2b52e:	613b      	str	r3, [r7, #16]
   2b530:	230e      	movs	r3, #14
   2b532:	18fb      	adds	r3, r7, r3
   2b534:	2201      	movs	r2, #1
   2b536:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2b538:	4a31      	ldr	r2, [pc, #196]	; (2b600 <cmp_lfn+0xf8>)
   2b53a:	693b      	ldr	r3, [r7, #16]
   2b53c:	18d3      	adds	r3, r2, r3
   2b53e:	781b      	ldrb	r3, [r3, #0]
   2b540:	3301      	adds	r3, #1
   2b542:	683a      	ldr	r2, [r7, #0]
   2b544:	18d3      	adds	r3, r2, r3
   2b546:	781b      	ldrb	r3, [r3, #0]
   2b548:	021b      	lsls	r3, r3, #8
   2b54a:	b21a      	sxth	r2, r3
   2b54c:	492c      	ldr	r1, [pc, #176]	; (2b600 <cmp_lfn+0xf8>)
   2b54e:	693b      	ldr	r3, [r7, #16]
   2b550:	18cb      	adds	r3, r1, r3
   2b552:	781b      	ldrb	r3, [r3, #0]
   2b554:	0019      	movs	r1, r3
   2b556:	683b      	ldr	r3, [r7, #0]
   2b558:	185b      	adds	r3, r3, r1
   2b55a:	781b      	ldrb	r3, [r3, #0]
   2b55c:	b21b      	sxth	r3, r3
   2b55e:	4313      	orrs	r3, r2
   2b560:	b21a      	sxth	r2, r3
   2b562:	230c      	movs	r3, #12
   2b564:	18fb      	adds	r3, r7, r3
   2b566:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2b568:	230e      	movs	r3, #14
   2b56a:	18fb      	adds	r3, r7, r3
   2b56c:	881b      	ldrh	r3, [r3, #0]
   2b56e:	2b00      	cmp	r3, #0
   2b570:	d01f      	beq.n	2b5b2 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2b572:	230e      	movs	r3, #14
   2b574:	18fc      	adds	r4, r7, r3
   2b576:	230c      	movs	r3, #12
   2b578:	18fb      	adds	r3, r7, r3
   2b57a:	881b      	ldrh	r3, [r3, #0]
   2b57c:	0018      	movs	r0, r3
   2b57e:	4b21      	ldr	r3, [pc, #132]	; (2b604 <cmp_lfn+0xfc>)
   2b580:	4798      	blx	r3
   2b582:	0003      	movs	r3, r0
   2b584:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2b586:	697b      	ldr	r3, [r7, #20]
   2b588:	2bfe      	cmp	r3, #254	; 0xfe
   2b58a:	d810      	bhi.n	2b5ae <cmp_lfn+0xa6>
   2b58c:	697b      	ldr	r3, [r7, #20]
   2b58e:	1c5a      	adds	r2, r3, #1
   2b590:	617a      	str	r2, [r7, #20]
   2b592:	005b      	lsls	r3, r3, #1
   2b594:	687a      	ldr	r2, [r7, #4]
   2b596:	18d3      	adds	r3, r2, r3
   2b598:	881b      	ldrh	r3, [r3, #0]
   2b59a:	0018      	movs	r0, r3
   2b59c:	4b19      	ldr	r3, [pc, #100]	; (2b604 <cmp_lfn+0xfc>)
   2b59e:	4798      	blx	r3
   2b5a0:	0003      	movs	r3, r0
   2b5a2:	001a      	movs	r2, r3
   2b5a4:	230e      	movs	r3, #14
   2b5a6:	18fb      	adds	r3, r7, r3
   2b5a8:	881b      	ldrh	r3, [r3, #0]
   2b5aa:	4293      	cmp	r3, r2
   2b5ac:	d009      	beq.n	2b5c2 <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2b5ae:	2300      	movs	r3, #0
   2b5b0:	e022      	b.n	2b5f8 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2b5b2:	230c      	movs	r3, #12
   2b5b4:	18fb      	adds	r3, r7, r3
   2b5b6:	881b      	ldrh	r3, [r3, #0]
   2b5b8:	4a13      	ldr	r2, [pc, #76]	; (2b608 <cmp_lfn+0x100>)
   2b5ba:	4293      	cmp	r3, r2
   2b5bc:	d001      	beq.n	2b5c2 <cmp_lfn+0xba>
   2b5be:	2300      	movs	r3, #0
   2b5c0:	e01a      	b.n	2b5f8 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2b5c2:	693b      	ldr	r3, [r7, #16]
   2b5c4:	3301      	adds	r3, #1
   2b5c6:	613b      	str	r3, [r7, #16]
   2b5c8:	693b      	ldr	r3, [r7, #16]
   2b5ca:	2b0c      	cmp	r3, #12
   2b5cc:	d9b4      	bls.n	2b538 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2b5ce:	683b      	ldr	r3, [r7, #0]
   2b5d0:	781b      	ldrb	r3, [r3, #0]
   2b5d2:	001a      	movs	r2, r3
   2b5d4:	2340      	movs	r3, #64	; 0x40
   2b5d6:	4013      	ands	r3, r2
   2b5d8:	d00d      	beq.n	2b5f6 <cmp_lfn+0xee>
   2b5da:	230e      	movs	r3, #14
   2b5dc:	18fb      	adds	r3, r7, r3
   2b5de:	881b      	ldrh	r3, [r3, #0]
   2b5e0:	2b00      	cmp	r3, #0
   2b5e2:	d008      	beq.n	2b5f6 <cmp_lfn+0xee>
   2b5e4:	697b      	ldr	r3, [r7, #20]
   2b5e6:	005b      	lsls	r3, r3, #1
   2b5e8:	687a      	ldr	r2, [r7, #4]
   2b5ea:	18d3      	adds	r3, r2, r3
   2b5ec:	881b      	ldrh	r3, [r3, #0]
   2b5ee:	2b00      	cmp	r3, #0
   2b5f0:	d001      	beq.n	2b5f6 <cmp_lfn+0xee>
		return 0;
   2b5f2:	2300      	movs	r3, #0
   2b5f4:	e000      	b.n	2b5f8 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2b5f6:	2301      	movs	r3, #1
}
   2b5f8:	0018      	movs	r0, r3
   2b5fa:	46bd      	mov	sp, r7
   2b5fc:	b007      	add	sp, #28
   2b5fe:	bd90      	pop	{r4, r7, pc}
   2b600:	00038fdc 	.word	0x00038fdc
   2b604:	0002d5b5 	.word	0x0002d5b5
   2b608:	0000ffff 	.word	0x0000ffff

0002b60c <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2b60c:	b580      	push	{r7, lr}
   2b60e:	b088      	sub	sp, #32
   2b610:	af00      	add	r7, sp, #0
   2b612:	60f8      	str	r0, [r7, #12]
   2b614:	60b9      	str	r1, [r7, #8]
   2b616:	0019      	movs	r1, r3
   2b618:	1dfb      	adds	r3, r7, #7
   2b61a:	701a      	strb	r2, [r3, #0]
   2b61c:	1dbb      	adds	r3, r7, #6
   2b61e:	1c0a      	adds	r2, r1, #0
   2b620:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2b622:	68bb      	ldr	r3, [r7, #8]
   2b624:	330d      	adds	r3, #13
   2b626:	1dba      	adds	r2, r7, #6
   2b628:	7812      	ldrb	r2, [r2, #0]
   2b62a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2b62c:	68bb      	ldr	r3, [r7, #8]
   2b62e:	330b      	adds	r3, #11
   2b630:	220f      	movs	r2, #15
   2b632:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2b634:	68bb      	ldr	r3, [r7, #8]
   2b636:	330c      	adds	r3, #12
   2b638:	2200      	movs	r2, #0
   2b63a:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2b63c:	68bb      	ldr	r3, [r7, #8]
   2b63e:	331a      	adds	r3, #26
   2b640:	2200      	movs	r2, #0
   2b642:	701a      	strb	r2, [r3, #0]
   2b644:	68bb      	ldr	r3, [r7, #8]
   2b646:	331b      	adds	r3, #27
   2b648:	2200      	movs	r2, #0
   2b64a:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2b64c:	1dfb      	adds	r3, r7, #7
   2b64e:	781b      	ldrb	r3, [r3, #0]
   2b650:	1e5a      	subs	r2, r3, #1
   2b652:	0013      	movs	r3, r2
   2b654:	005b      	lsls	r3, r3, #1
   2b656:	189b      	adds	r3, r3, r2
   2b658:	009b      	lsls	r3, r3, #2
   2b65a:	189b      	adds	r3, r3, r2
   2b65c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2b65e:	2316      	movs	r3, #22
   2b660:	18fb      	adds	r3, r7, r3
   2b662:	2200      	movs	r2, #0
   2b664:	801a      	strh	r2, [r3, #0]
   2b666:	2300      	movs	r3, #0
   2b668:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2b66a:	2316      	movs	r3, #22
   2b66c:	18fb      	adds	r3, r7, r3
   2b66e:	881b      	ldrh	r3, [r3, #0]
   2b670:	4a28      	ldr	r2, [pc, #160]	; (2b714 <fit_lfn+0x108>)
   2b672:	4293      	cmp	r3, r2
   2b674:	d009      	beq.n	2b68a <fit_lfn+0x7e>
   2b676:	69fb      	ldr	r3, [r7, #28]
   2b678:	1c5a      	adds	r2, r3, #1
   2b67a:	61fa      	str	r2, [r7, #28]
   2b67c:	005b      	lsls	r3, r3, #1
   2b67e:	68fa      	ldr	r2, [r7, #12]
   2b680:	18d2      	adds	r2, r2, r3
   2b682:	2316      	movs	r3, #22
   2b684:	18fb      	adds	r3, r7, r3
   2b686:	8812      	ldrh	r2, [r2, #0]
   2b688:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2b68a:	4a23      	ldr	r2, [pc, #140]	; (2b718 <fit_lfn+0x10c>)
   2b68c:	69bb      	ldr	r3, [r7, #24]
   2b68e:	18d3      	adds	r3, r2, r3
   2b690:	781b      	ldrb	r3, [r3, #0]
   2b692:	001a      	movs	r2, r3
   2b694:	68bb      	ldr	r3, [r7, #8]
   2b696:	189b      	adds	r3, r3, r2
   2b698:	2216      	movs	r2, #22
   2b69a:	18ba      	adds	r2, r7, r2
   2b69c:	8812      	ldrh	r2, [r2, #0]
   2b69e:	b2d2      	uxtb	r2, r2
   2b6a0:	701a      	strb	r2, [r3, #0]
   2b6a2:	4a1d      	ldr	r2, [pc, #116]	; (2b718 <fit_lfn+0x10c>)
   2b6a4:	69bb      	ldr	r3, [r7, #24]
   2b6a6:	18d3      	adds	r3, r2, r3
   2b6a8:	781b      	ldrb	r3, [r3, #0]
   2b6aa:	3301      	adds	r3, #1
   2b6ac:	68ba      	ldr	r2, [r7, #8]
   2b6ae:	18d3      	adds	r3, r2, r3
   2b6b0:	2216      	movs	r2, #22
   2b6b2:	18ba      	adds	r2, r7, r2
   2b6b4:	8812      	ldrh	r2, [r2, #0]
   2b6b6:	0a12      	lsrs	r2, r2, #8
   2b6b8:	b292      	uxth	r2, r2
   2b6ba:	b2d2      	uxtb	r2, r2
   2b6bc:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2b6be:	2316      	movs	r3, #22
   2b6c0:	18fb      	adds	r3, r7, r3
   2b6c2:	881b      	ldrh	r3, [r3, #0]
   2b6c4:	2b00      	cmp	r3, #0
   2b6c6:	d104      	bne.n	2b6d2 <fit_lfn+0xc6>
   2b6c8:	2316      	movs	r3, #22
   2b6ca:	18fb      	adds	r3, r7, r3
   2b6cc:	2201      	movs	r2, #1
   2b6ce:	4252      	negs	r2, r2
   2b6d0:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2b6d2:	69bb      	ldr	r3, [r7, #24]
   2b6d4:	3301      	adds	r3, #1
   2b6d6:	61bb      	str	r3, [r7, #24]
   2b6d8:	69bb      	ldr	r3, [r7, #24]
   2b6da:	2b0c      	cmp	r3, #12
   2b6dc:	d9c5      	bls.n	2b66a <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2b6de:	2316      	movs	r3, #22
   2b6e0:	18fb      	adds	r3, r7, r3
   2b6e2:	881b      	ldrh	r3, [r3, #0]
   2b6e4:	4a0b      	ldr	r2, [pc, #44]	; (2b714 <fit_lfn+0x108>)
   2b6e6:	4293      	cmp	r3, r2
   2b6e8:	d006      	beq.n	2b6f8 <fit_lfn+0xec>
   2b6ea:	69fb      	ldr	r3, [r7, #28]
   2b6ec:	005b      	lsls	r3, r3, #1
   2b6ee:	68fa      	ldr	r2, [r7, #12]
   2b6f0:	18d3      	adds	r3, r2, r3
   2b6f2:	881b      	ldrh	r3, [r3, #0]
   2b6f4:	2b00      	cmp	r3, #0
   2b6f6:	d105      	bne.n	2b704 <fit_lfn+0xf8>
   2b6f8:	1dfb      	adds	r3, r7, #7
   2b6fa:	1dfa      	adds	r2, r7, #7
   2b6fc:	7812      	ldrb	r2, [r2, #0]
   2b6fe:	2140      	movs	r1, #64	; 0x40
   2b700:	430a      	orrs	r2, r1
   2b702:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2b704:	68bb      	ldr	r3, [r7, #8]
   2b706:	1dfa      	adds	r2, r7, #7
   2b708:	7812      	ldrb	r2, [r2, #0]
   2b70a:	701a      	strb	r2, [r3, #0]
}
   2b70c:	46c0      	nop			; (mov r8, r8)
   2b70e:	46bd      	mov	sp, r7
   2b710:	b008      	add	sp, #32
   2b712:	bd80      	pop	{r7, pc}
   2b714:	0000ffff 	.word	0x0000ffff
   2b718:	00038fdc 	.word	0x00038fdc

0002b71c <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2b71c:	b580      	push	{r7, lr}
   2b71e:	b08a      	sub	sp, #40	; 0x28
   2b720:	af00      	add	r7, sp, #0
   2b722:	60f8      	str	r0, [r7, #12]
   2b724:	60b9      	str	r1, [r7, #8]
   2b726:	607a      	str	r2, [r7, #4]
   2b728:	001a      	movs	r2, r3
   2b72a:	1cbb      	adds	r3, r7, #2
   2b72c:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2b72e:	68b9      	ldr	r1, [r7, #8]
   2b730:	68fb      	ldr	r3, [r7, #12]
   2b732:	220b      	movs	r2, #11
   2b734:	0018      	movs	r0, r3
   2b736:	4b38      	ldr	r3, [pc, #224]	; (2b818 <gen_numname+0xfc>)
   2b738:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2b73a:	1cbb      	adds	r3, r7, #2
   2b73c:	881b      	ldrh	r3, [r3, #0]
   2b73e:	2b05      	cmp	r3, #5
   2b740:	d911      	bls.n	2b766 <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2b742:	1cbb      	adds	r3, r7, #2
   2b744:	881b      	ldrh	r3, [r3, #0]
   2b746:	b29a      	uxth	r2, r3
   2b748:	0852      	lsrs	r2, r2, #1
   2b74a:	03db      	lsls	r3, r3, #15
   2b74c:	4313      	orrs	r3, r2
   2b74e:	b299      	uxth	r1, r3
   2b750:	687b      	ldr	r3, [r7, #4]
   2b752:	1c9a      	adds	r2, r3, #2
   2b754:	607a      	str	r2, [r7, #4]
   2b756:	881a      	ldrh	r2, [r3, #0]
   2b758:	1cbb      	adds	r3, r7, #2
   2b75a:	188a      	adds	r2, r1, r2
   2b75c:	801a      	strh	r2, [r3, #0]
   2b75e:	687b      	ldr	r3, [r7, #4]
   2b760:	881b      	ldrh	r3, [r3, #0]
   2b762:	2b00      	cmp	r3, #0
   2b764:	d1ed      	bne.n	2b742 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2b766:	2307      	movs	r3, #7
   2b768:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2b76a:	1cbb      	adds	r3, r7, #2
   2b76c:	881b      	ldrh	r3, [r3, #0]
   2b76e:	b2db      	uxtb	r3, r3
   2b770:	220f      	movs	r2, #15
   2b772:	4013      	ands	r3, r2
   2b774:	b2da      	uxtb	r2, r3
   2b776:	2327      	movs	r3, #39	; 0x27
   2b778:	18fb      	adds	r3, r7, r3
   2b77a:	3230      	adds	r2, #48	; 0x30
   2b77c:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2b77e:	2327      	movs	r3, #39	; 0x27
   2b780:	18fb      	adds	r3, r7, r3
   2b782:	781b      	ldrb	r3, [r3, #0]
   2b784:	2b39      	cmp	r3, #57	; 0x39
   2b786:	d906      	bls.n	2b796 <gen_numname+0x7a>
   2b788:	2327      	movs	r3, #39	; 0x27
   2b78a:	18fb      	adds	r3, r7, r3
   2b78c:	2227      	movs	r2, #39	; 0x27
   2b78e:	18ba      	adds	r2, r7, r2
   2b790:	7812      	ldrb	r2, [r2, #0]
   2b792:	3207      	adds	r2, #7
   2b794:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2b796:	6a3b      	ldr	r3, [r7, #32]
   2b798:	1e5a      	subs	r2, r3, #1
   2b79a:	623a      	str	r2, [r7, #32]
   2b79c:	2214      	movs	r2, #20
   2b79e:	18ba      	adds	r2, r7, r2
   2b7a0:	2127      	movs	r1, #39	; 0x27
   2b7a2:	1879      	adds	r1, r7, r1
   2b7a4:	7809      	ldrb	r1, [r1, #0]
   2b7a6:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2b7a8:	1cbb      	adds	r3, r7, #2
   2b7aa:	1cba      	adds	r2, r7, #2
   2b7ac:	8812      	ldrh	r2, [r2, #0]
   2b7ae:	0912      	lsrs	r2, r2, #4
   2b7b0:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2b7b2:	1cbb      	adds	r3, r7, #2
   2b7b4:	881b      	ldrh	r3, [r3, #0]
   2b7b6:	2b00      	cmp	r3, #0
   2b7b8:	d1d7      	bne.n	2b76a <gen_numname+0x4e>
	ns[i] = '~';
   2b7ba:	2314      	movs	r3, #20
   2b7bc:	18fa      	adds	r2, r7, r3
   2b7be:	6a3b      	ldr	r3, [r7, #32]
   2b7c0:	18d3      	adds	r3, r2, r3
   2b7c2:	227e      	movs	r2, #126	; 0x7e
   2b7c4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2b7c6:	2300      	movs	r3, #0
   2b7c8:	61fb      	str	r3, [r7, #28]
   2b7ca:	e002      	b.n	2b7d2 <gen_numname+0xb6>
   2b7cc:	69fb      	ldr	r3, [r7, #28]
   2b7ce:	3301      	adds	r3, #1
   2b7d0:	61fb      	str	r3, [r7, #28]
   2b7d2:	69fa      	ldr	r2, [r7, #28]
   2b7d4:	6a3b      	ldr	r3, [r7, #32]
   2b7d6:	429a      	cmp	r2, r3
   2b7d8:	d205      	bcs.n	2b7e6 <gen_numname+0xca>
   2b7da:	68fa      	ldr	r2, [r7, #12]
   2b7dc:	69fb      	ldr	r3, [r7, #28]
   2b7de:	18d3      	adds	r3, r2, r3
   2b7e0:	781b      	ldrb	r3, [r3, #0]
   2b7e2:	2b20      	cmp	r3, #32
   2b7e4:	d1f2      	bne.n	2b7cc <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2b7e6:	69fb      	ldr	r3, [r7, #28]
   2b7e8:	1c5a      	adds	r2, r3, #1
   2b7ea:	61fa      	str	r2, [r7, #28]
   2b7ec:	68fa      	ldr	r2, [r7, #12]
   2b7ee:	18d2      	adds	r2, r2, r3
   2b7f0:	6a3b      	ldr	r3, [r7, #32]
   2b7f2:	2b07      	cmp	r3, #7
   2b7f4:	d806      	bhi.n	2b804 <gen_numname+0xe8>
   2b7f6:	6a3b      	ldr	r3, [r7, #32]
   2b7f8:	1c59      	adds	r1, r3, #1
   2b7fa:	6239      	str	r1, [r7, #32]
   2b7fc:	2114      	movs	r1, #20
   2b7fe:	1879      	adds	r1, r7, r1
   2b800:	5ccb      	ldrb	r3, [r1, r3]
   2b802:	e000      	b.n	2b806 <gen_numname+0xea>
   2b804:	2320      	movs	r3, #32
   2b806:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2b808:	69fb      	ldr	r3, [r7, #28]
   2b80a:	2b07      	cmp	r3, #7
   2b80c:	d9eb      	bls.n	2b7e6 <gen_numname+0xca>
}
   2b80e:	46c0      	nop			; (mov r8, r8)
   2b810:	46bd      	mov	sp, r7
   2b812:	b00a      	add	sp, #40	; 0x28
   2b814:	bd80      	pop	{r7, pc}
   2b816:	46c0      	nop			; (mov r8, r8)
   2b818:	0002a8c1 	.word	0x0002a8c1

0002b81c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2b81c:	b580      	push	{r7, lr}
   2b81e:	b084      	sub	sp, #16
   2b820:	af00      	add	r7, sp, #0
   2b822:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2b824:	230f      	movs	r3, #15
   2b826:	18fb      	adds	r3, r7, r3
   2b828:	2200      	movs	r2, #0
   2b82a:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2b82c:	230b      	movs	r3, #11
   2b82e:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2b830:	230f      	movs	r3, #15
   2b832:	18fb      	adds	r3, r7, r3
   2b834:	781b      	ldrb	r3, [r3, #0]
   2b836:	b2da      	uxtb	r2, r3
   2b838:	0852      	lsrs	r2, r2, #1
   2b83a:	01db      	lsls	r3, r3, #7
   2b83c:	4313      	orrs	r3, r2
   2b83e:	b2d9      	uxtb	r1, r3
   2b840:	687b      	ldr	r3, [r7, #4]
   2b842:	1c5a      	adds	r2, r3, #1
   2b844:	607a      	str	r2, [r7, #4]
   2b846:	781a      	ldrb	r2, [r3, #0]
   2b848:	230f      	movs	r3, #15
   2b84a:	18fb      	adds	r3, r7, r3
   2b84c:	188a      	adds	r2, r1, r2
   2b84e:	701a      	strb	r2, [r3, #0]
   2b850:	68bb      	ldr	r3, [r7, #8]
   2b852:	3b01      	subs	r3, #1
   2b854:	60bb      	str	r3, [r7, #8]
   2b856:	68bb      	ldr	r3, [r7, #8]
   2b858:	2b00      	cmp	r3, #0
   2b85a:	d1e9      	bne.n	2b830 <sum_sfn+0x14>
	return sum;
   2b85c:	230f      	movs	r3, #15
   2b85e:	18fb      	adds	r3, r7, r3
   2b860:	781b      	ldrb	r3, [r3, #0]
}
   2b862:	0018      	movs	r0, r3
   2b864:	46bd      	mov	sp, r7
   2b866:	b004      	add	sp, #16
   2b868:	bd80      	pop	{r7, pc}
	...

0002b86c <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2b86c:	b590      	push	{r4, r7, lr}
   2b86e:	b087      	sub	sp, #28
   2b870:	af00      	add	r7, sp, #0
   2b872:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2b874:	2317      	movs	r3, #23
   2b876:	18fc      	adds	r4, r7, r3
   2b878:	687b      	ldr	r3, [r7, #4]
   2b87a:	2100      	movs	r1, #0
   2b87c:	0018      	movs	r0, r3
   2b87e:	4b74      	ldr	r3, [pc, #464]	; (2ba50 <dir_find+0x1e4>)
   2b880:	4798      	blx	r3
   2b882:	0003      	movs	r3, r0
   2b884:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2b886:	2317      	movs	r3, #23
   2b888:	18fb      	adds	r3, r7, r3
   2b88a:	781b      	ldrb	r3, [r3, #0]
   2b88c:	2b00      	cmp	r3, #0
   2b88e:	d003      	beq.n	2b898 <dir_find+0x2c>
   2b890:	2317      	movs	r3, #23
   2b892:	18fb      	adds	r3, r7, r3
   2b894:	781b      	ldrb	r3, [r3, #0]
   2b896:	e0d6      	b.n	2ba46 <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2b898:	2314      	movs	r3, #20
   2b89a:	18fb      	adds	r3, r7, r3
   2b89c:	22ff      	movs	r2, #255	; 0xff
   2b89e:	701a      	strb	r2, [r3, #0]
   2b8a0:	2315      	movs	r3, #21
   2b8a2:	18fb      	adds	r3, r7, r3
   2b8a4:	2214      	movs	r2, #20
   2b8a6:	18ba      	adds	r2, r7, r2
   2b8a8:	7812      	ldrb	r2, [r2, #0]
   2b8aa:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2b8ac:	687b      	ldr	r3, [r7, #4]
   2b8ae:	681a      	ldr	r2, [r3, #0]
   2b8b0:	687b      	ldr	r3, [r7, #4]
   2b8b2:	691b      	ldr	r3, [r3, #16]
   2b8b4:	2117      	movs	r1, #23
   2b8b6:	187c      	adds	r4, r7, r1
   2b8b8:	0019      	movs	r1, r3
   2b8ba:	0010      	movs	r0, r2
   2b8bc:	4b65      	ldr	r3, [pc, #404]	; (2ba54 <dir_find+0x1e8>)
   2b8be:	4798      	blx	r3
   2b8c0:	0003      	movs	r3, r0
   2b8c2:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2b8c4:	2317      	movs	r3, #23
   2b8c6:	18fb      	adds	r3, r7, r3
   2b8c8:	781b      	ldrb	r3, [r3, #0]
   2b8ca:	2b00      	cmp	r3, #0
   2b8cc:	d000      	beq.n	2b8d0 <dir_find+0x64>
   2b8ce:	e0b2      	b.n	2ba36 <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2b8d0:	687b      	ldr	r3, [r7, #4]
   2b8d2:	695b      	ldr	r3, [r3, #20]
   2b8d4:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2b8d6:	2316      	movs	r3, #22
   2b8d8:	18fb      	adds	r3, r7, r3
   2b8da:	693a      	ldr	r2, [r7, #16]
   2b8dc:	7812      	ldrb	r2, [r2, #0]
   2b8de:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2b8e0:	2316      	movs	r3, #22
   2b8e2:	18fb      	adds	r3, r7, r3
   2b8e4:	781b      	ldrb	r3, [r3, #0]
   2b8e6:	2b00      	cmp	r3, #0
   2b8e8:	d104      	bne.n	2b8f4 <dir_find+0x88>
   2b8ea:	2317      	movs	r3, #23
   2b8ec:	18fb      	adds	r3, r7, r3
   2b8ee:	2204      	movs	r2, #4
   2b8f0:	701a      	strb	r2, [r3, #0]
   2b8f2:	e0a5      	b.n	2ba40 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2b8f4:	693b      	ldr	r3, [r7, #16]
   2b8f6:	330b      	adds	r3, #11
   2b8f8:	781a      	ldrb	r2, [r3, #0]
   2b8fa:	230f      	movs	r3, #15
   2b8fc:	18fb      	adds	r3, r7, r3
   2b8fe:	213f      	movs	r1, #63	; 0x3f
   2b900:	400a      	ands	r2, r1
   2b902:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2b904:	2316      	movs	r3, #22
   2b906:	18fb      	adds	r3, r7, r3
   2b908:	781b      	ldrb	r3, [r3, #0]
   2b90a:	2be5      	cmp	r3, #229	; 0xe5
   2b90c:	d00a      	beq.n	2b924 <dir_find+0xb8>
   2b90e:	230f      	movs	r3, #15
   2b910:	18fb      	adds	r3, r7, r3
   2b912:	781b      	ldrb	r3, [r3, #0]
   2b914:	2208      	movs	r2, #8
   2b916:	4013      	ands	r3, r2
   2b918:	d009      	beq.n	2b92e <dir_find+0xc2>
   2b91a:	230f      	movs	r3, #15
   2b91c:	18fb      	adds	r3, r7, r3
   2b91e:	781b      	ldrb	r3, [r3, #0]
   2b920:	2b0f      	cmp	r3, #15
   2b922:	d004      	beq.n	2b92e <dir_find+0xc2>
			ord = 0xFF;
   2b924:	2315      	movs	r3, #21
   2b926:	18fb      	adds	r3, r7, r3
   2b928:	22ff      	movs	r2, #255	; 0xff
   2b92a:	701a      	strb	r2, [r3, #0]
   2b92c:	e073      	b.n	2ba16 <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2b92e:	230f      	movs	r3, #15
   2b930:	18fb      	adds	r3, r7, r3
   2b932:	781b      	ldrb	r3, [r3, #0]
   2b934:	2b0f      	cmp	r3, #15
   2b936:	d145      	bne.n	2b9c4 <dir_find+0x158>
				if (dj->lfn) {
   2b938:	687b      	ldr	r3, [r7, #4]
   2b93a:	69db      	ldr	r3, [r3, #28]
   2b93c:	2b00      	cmp	r3, #0
   2b93e:	d100      	bne.n	2b942 <dir_find+0xd6>
   2b940:	e069      	b.n	2ba16 <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2b942:	2316      	movs	r3, #22
   2b944:	18fb      	adds	r3, r7, r3
   2b946:	781b      	ldrb	r3, [r3, #0]
   2b948:	2240      	movs	r2, #64	; 0x40
   2b94a:	4013      	ands	r3, r2
   2b94c:	d016      	beq.n	2b97c <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2b94e:	2314      	movs	r3, #20
   2b950:	18fb      	adds	r3, r7, r3
   2b952:	693a      	ldr	r2, [r7, #16]
   2b954:	7b52      	ldrb	r2, [r2, #13]
   2b956:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2b958:	2316      	movs	r3, #22
   2b95a:	18fb      	adds	r3, r7, r3
   2b95c:	2216      	movs	r2, #22
   2b95e:	18ba      	adds	r2, r7, r2
   2b960:	7812      	ldrb	r2, [r2, #0]
   2b962:	2140      	movs	r1, #64	; 0x40
   2b964:	438a      	bics	r2, r1
   2b966:	701a      	strb	r2, [r3, #0]
   2b968:	2315      	movs	r3, #21
   2b96a:	18fb      	adds	r3, r7, r3
   2b96c:	2216      	movs	r2, #22
   2b96e:	18ba      	adds	r2, r7, r2
   2b970:	7812      	ldrb	r2, [r2, #0]
   2b972:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2b974:	687b      	ldr	r3, [r7, #4]
   2b976:	88da      	ldrh	r2, [r3, #6]
   2b978:	687b      	ldr	r3, [r7, #4]
   2b97a:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2b97c:	2316      	movs	r3, #22
   2b97e:	18fa      	adds	r2, r7, r3
   2b980:	2315      	movs	r3, #21
   2b982:	18fb      	adds	r3, r7, r3
   2b984:	7812      	ldrb	r2, [r2, #0]
   2b986:	781b      	ldrb	r3, [r3, #0]
   2b988:	429a      	cmp	r2, r3
   2b98a:	d116      	bne.n	2b9ba <dir_find+0x14e>
   2b98c:	693b      	ldr	r3, [r7, #16]
   2b98e:	330d      	adds	r3, #13
   2b990:	781b      	ldrb	r3, [r3, #0]
   2b992:	2214      	movs	r2, #20
   2b994:	18ba      	adds	r2, r7, r2
   2b996:	7812      	ldrb	r2, [r2, #0]
   2b998:	429a      	cmp	r2, r3
   2b99a:	d10e      	bne.n	2b9ba <dir_find+0x14e>
   2b99c:	687b      	ldr	r3, [r7, #4]
   2b99e:	69db      	ldr	r3, [r3, #28]
   2b9a0:	693a      	ldr	r2, [r7, #16]
   2b9a2:	0011      	movs	r1, r2
   2b9a4:	0018      	movs	r0, r3
   2b9a6:	4b2c      	ldr	r3, [pc, #176]	; (2ba58 <dir_find+0x1ec>)
   2b9a8:	4798      	blx	r3
   2b9aa:	1e03      	subs	r3, r0, #0
   2b9ac:	d005      	beq.n	2b9ba <dir_find+0x14e>
   2b9ae:	2315      	movs	r3, #21
   2b9b0:	18fb      	adds	r3, r7, r3
   2b9b2:	781b      	ldrb	r3, [r3, #0]
   2b9b4:	3b01      	subs	r3, #1
   2b9b6:	b2da      	uxtb	r2, r3
   2b9b8:	e000      	b.n	2b9bc <dir_find+0x150>
   2b9ba:	22ff      	movs	r2, #255	; 0xff
   2b9bc:	2315      	movs	r3, #21
   2b9be:	18fb      	adds	r3, r7, r3
   2b9c0:	701a      	strb	r2, [r3, #0]
   2b9c2:	e028      	b.n	2ba16 <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2b9c4:	2315      	movs	r3, #21
   2b9c6:	18fb      	adds	r3, r7, r3
   2b9c8:	781b      	ldrb	r3, [r3, #0]
   2b9ca:	2b00      	cmp	r3, #0
   2b9cc:	d10a      	bne.n	2b9e4 <dir_find+0x178>
   2b9ce:	693b      	ldr	r3, [r7, #16]
   2b9d0:	0018      	movs	r0, r3
   2b9d2:	4b22      	ldr	r3, [pc, #136]	; (2ba5c <dir_find+0x1f0>)
   2b9d4:	4798      	blx	r3
   2b9d6:	0003      	movs	r3, r0
   2b9d8:	001a      	movs	r2, r3
   2b9da:	2314      	movs	r3, #20
   2b9dc:	18fb      	adds	r3, r7, r3
   2b9de:	781b      	ldrb	r3, [r3, #0]
   2b9e0:	4293      	cmp	r3, r2
   2b9e2:	d02a      	beq.n	2ba3a <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2b9e4:	2315      	movs	r3, #21
   2b9e6:	18fb      	adds	r3, r7, r3
   2b9e8:	22ff      	movs	r2, #255	; 0xff
   2b9ea:	701a      	strb	r2, [r3, #0]
   2b9ec:	687b      	ldr	r3, [r7, #4]
   2b9ee:	2201      	movs	r2, #1
   2b9f0:	4252      	negs	r2, r2
   2b9f2:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2b9f4:	687b      	ldr	r3, [r7, #4]
   2b9f6:	699b      	ldr	r3, [r3, #24]
   2b9f8:	330b      	adds	r3, #11
   2b9fa:	781b      	ldrb	r3, [r3, #0]
   2b9fc:	001a      	movs	r2, r3
   2b9fe:	2301      	movs	r3, #1
   2ba00:	4013      	ands	r3, r2
   2ba02:	d108      	bne.n	2ba16 <dir_find+0x1aa>
   2ba04:	687b      	ldr	r3, [r7, #4]
   2ba06:	6999      	ldr	r1, [r3, #24]
   2ba08:	693b      	ldr	r3, [r7, #16]
   2ba0a:	220b      	movs	r2, #11
   2ba0c:	0018      	movs	r0, r3
   2ba0e:	4b14      	ldr	r3, [pc, #80]	; (2ba60 <dir_find+0x1f4>)
   2ba10:	4798      	blx	r3
   2ba12:	1e03      	subs	r3, r0, #0
   2ba14:	d013      	beq.n	2ba3e <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2ba16:	2317      	movs	r3, #23
   2ba18:	18fc      	adds	r4, r7, r3
   2ba1a:	687b      	ldr	r3, [r7, #4]
   2ba1c:	2100      	movs	r1, #0
   2ba1e:	0018      	movs	r0, r3
   2ba20:	4b10      	ldr	r3, [pc, #64]	; (2ba64 <dir_find+0x1f8>)
   2ba22:	4798      	blx	r3
   2ba24:	0003      	movs	r3, r0
   2ba26:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2ba28:	2317      	movs	r3, #23
   2ba2a:	18fb      	adds	r3, r7, r3
   2ba2c:	781b      	ldrb	r3, [r3, #0]
   2ba2e:	2b00      	cmp	r3, #0
   2ba30:	d100      	bne.n	2ba34 <dir_find+0x1c8>
   2ba32:	e73b      	b.n	2b8ac <dir_find+0x40>
   2ba34:	e004      	b.n	2ba40 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2ba36:	46c0      	nop			; (mov r8, r8)
   2ba38:	e002      	b.n	2ba40 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2ba3a:	46c0      	nop			; (mov r8, r8)
   2ba3c:	e000      	b.n	2ba40 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2ba3e:	46c0      	nop			; (mov r8, r8)

	return res;
   2ba40:	2317      	movs	r3, #23
   2ba42:	18fb      	adds	r3, r7, r3
   2ba44:	781b      	ldrb	r3, [r3, #0]
}
   2ba46:	0018      	movs	r0, r3
   2ba48:	46bd      	mov	sp, r7
   2ba4a:	b007      	add	sp, #28
   2ba4c:	bd90      	pop	{r4, r7, pc}
   2ba4e:	46c0      	nop			; (mov r8, r8)
   2ba50:	0002b1e9 	.word	0x0002b1e9
   2ba54:	0002a9a5 	.word	0x0002a9a5
   2ba58:	0002b509 	.word	0x0002b509
   2ba5c:	0002b81d 	.word	0x0002b81d
   2ba60:	0002a929 	.word	0x0002a929
   2ba64:	0002b319 	.word	0x0002b319

0002ba68 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2ba68:	b590      	push	{r4, r7, lr}
   2ba6a:	b08d      	sub	sp, #52	; 0x34
   2ba6c:	af00      	add	r7, sp, #0
   2ba6e:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2ba70:	687b      	ldr	r3, [r7, #4]
   2ba72:	699b      	ldr	r3, [r3, #24]
   2ba74:	627b      	str	r3, [r7, #36]	; 0x24
   2ba76:	687b      	ldr	r3, [r7, #4]
   2ba78:	69db      	ldr	r3, [r3, #28]
   2ba7a:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2ba7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2ba7e:	230c      	movs	r3, #12
   2ba80:	18fb      	adds	r3, r7, r3
   2ba82:	220c      	movs	r2, #12
   2ba84:	0018      	movs	r0, r3
   2ba86:	4bc8      	ldr	r3, [pc, #800]	; (2bda8 <dir_register+0x340>)
   2ba88:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2ba8a:	230c      	movs	r3, #12
   2ba8c:	18fb      	adds	r3, r7, r3
   2ba8e:	7adb      	ldrb	r3, [r3, #11]
   2ba90:	001a      	movs	r2, r3
   2ba92:	2301      	movs	r3, #1
   2ba94:	4013      	ands	r3, r2
   2ba96:	d048      	beq.n	2bb2a <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2ba98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ba9a:	330b      	adds	r3, #11
   2ba9c:	2200      	movs	r2, #0
   2ba9e:	701a      	strb	r2, [r3, #0]
   2baa0:	687b      	ldr	r3, [r7, #4]
   2baa2:	2200      	movs	r2, #0
   2baa4:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2baa6:	232c      	movs	r3, #44	; 0x2c
   2baa8:	18fb      	adds	r3, r7, r3
   2baaa:	2201      	movs	r2, #1
   2baac:	801a      	strh	r2, [r3, #0]
   2baae:	e01c      	b.n	2baea <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2bab0:	232c      	movs	r3, #44	; 0x2c
   2bab2:	18fb      	adds	r3, r7, r3
   2bab4:	881b      	ldrh	r3, [r3, #0]
   2bab6:	6a3a      	ldr	r2, [r7, #32]
   2bab8:	210c      	movs	r1, #12
   2baba:	1879      	adds	r1, r7, r1
   2babc:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2babe:	4cbb      	ldr	r4, [pc, #748]	; (2bdac <dir_register+0x344>)
   2bac0:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2bac2:	232f      	movs	r3, #47	; 0x2f
   2bac4:	18fc      	adds	r4, r7, r3
   2bac6:	687b      	ldr	r3, [r7, #4]
   2bac8:	0018      	movs	r0, r3
   2baca:	4bb9      	ldr	r3, [pc, #740]	; (2bdb0 <dir_register+0x348>)
   2bacc:	4798      	blx	r3
   2bace:	0003      	movs	r3, r0
   2bad0:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2bad2:	232f      	movs	r3, #47	; 0x2f
   2bad4:	18fb      	adds	r3, r7, r3
   2bad6:	781b      	ldrb	r3, [r3, #0]
   2bad8:	2b00      	cmp	r3, #0
   2bada:	d10c      	bne.n	2baf6 <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2badc:	232c      	movs	r3, #44	; 0x2c
   2bade:	18fb      	adds	r3, r7, r3
   2bae0:	881a      	ldrh	r2, [r3, #0]
   2bae2:	232c      	movs	r3, #44	; 0x2c
   2bae4:	18fb      	adds	r3, r7, r3
   2bae6:	3201      	adds	r2, #1
   2bae8:	801a      	strh	r2, [r3, #0]
   2baea:	232c      	movs	r3, #44	; 0x2c
   2baec:	18fb      	adds	r3, r7, r3
   2baee:	881b      	ldrh	r3, [r3, #0]
   2baf0:	2b63      	cmp	r3, #99	; 0x63
   2baf2:	d9dd      	bls.n	2bab0 <dir_register+0x48>
   2baf4:	e000      	b.n	2baf8 <dir_register+0x90>
			if (res != FR_OK) break;
   2baf6:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2baf8:	232c      	movs	r3, #44	; 0x2c
   2bafa:	18fb      	adds	r3, r7, r3
   2bafc:	881b      	ldrh	r3, [r3, #0]
   2bafe:	2b64      	cmp	r3, #100	; 0x64
   2bb00:	d101      	bne.n	2bb06 <dir_register+0x9e>
   2bb02:	2307      	movs	r3, #7
   2bb04:	e14c      	b.n	2bda0 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2bb06:	232f      	movs	r3, #47	; 0x2f
   2bb08:	18fb      	adds	r3, r7, r3
   2bb0a:	781b      	ldrb	r3, [r3, #0]
   2bb0c:	2b04      	cmp	r3, #4
   2bb0e:	d003      	beq.n	2bb18 <dir_register+0xb0>
   2bb10:	232f      	movs	r3, #47	; 0x2f
   2bb12:	18fb      	adds	r3, r7, r3
   2bb14:	781b      	ldrb	r3, [r3, #0]
   2bb16:	e143      	b.n	2bda0 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2bb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2bb1a:	330b      	adds	r3, #11
   2bb1c:	220c      	movs	r2, #12
   2bb1e:	18ba      	adds	r2, r7, r2
   2bb20:	7ad2      	ldrb	r2, [r2, #11]
   2bb22:	701a      	strb	r2, [r3, #0]
   2bb24:	687b      	ldr	r3, [r7, #4]
   2bb26:	6a3a      	ldr	r2, [r7, #32]
   2bb28:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2bb2a:	230c      	movs	r3, #12
   2bb2c:	18fb      	adds	r3, r7, r3
   2bb2e:	7adb      	ldrb	r3, [r3, #11]
   2bb30:	001a      	movs	r2, r3
   2bb32:	2302      	movs	r3, #2
   2bb34:	4013      	ands	r3, r2
   2bb36:	d023      	beq.n	2bb80 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2bb38:	232a      	movs	r3, #42	; 0x2a
   2bb3a:	18fb      	adds	r3, r7, r3
   2bb3c:	2200      	movs	r2, #0
   2bb3e:	801a      	strh	r2, [r3, #0]
   2bb40:	e006      	b.n	2bb50 <dir_register+0xe8>
   2bb42:	232a      	movs	r3, #42	; 0x2a
   2bb44:	18fb      	adds	r3, r7, r3
   2bb46:	881a      	ldrh	r2, [r3, #0]
   2bb48:	232a      	movs	r3, #42	; 0x2a
   2bb4a:	18fb      	adds	r3, r7, r3
   2bb4c:	3201      	adds	r2, #1
   2bb4e:	801a      	strh	r2, [r3, #0]
   2bb50:	232a      	movs	r3, #42	; 0x2a
   2bb52:	18fb      	adds	r3, r7, r3
   2bb54:	881b      	ldrh	r3, [r3, #0]
   2bb56:	005b      	lsls	r3, r3, #1
   2bb58:	6a3a      	ldr	r2, [r7, #32]
   2bb5a:	18d3      	adds	r3, r2, r3
   2bb5c:	881b      	ldrh	r3, [r3, #0]
   2bb5e:	2b00      	cmp	r3, #0
   2bb60:	d1ef      	bne.n	2bb42 <dir_register+0xda>
		ne = (ne + 25) / 13;
   2bb62:	232a      	movs	r3, #42	; 0x2a
   2bb64:	18fb      	adds	r3, r7, r3
   2bb66:	881b      	ldrh	r3, [r3, #0]
   2bb68:	3319      	adds	r3, #25
   2bb6a:	001a      	movs	r2, r3
   2bb6c:	4b91      	ldr	r3, [pc, #580]	; (2bdb4 <dir_register+0x34c>)
   2bb6e:	210d      	movs	r1, #13
   2bb70:	0010      	movs	r0, r2
   2bb72:	4798      	blx	r3
   2bb74:	0003      	movs	r3, r0
   2bb76:	001a      	movs	r2, r3
   2bb78:	232a      	movs	r3, #42	; 0x2a
   2bb7a:	18fb      	adds	r3, r7, r3
   2bb7c:	801a      	strh	r2, [r3, #0]
   2bb7e:	e003      	b.n	2bb88 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2bb80:	232a      	movs	r3, #42	; 0x2a
   2bb82:	18fb      	adds	r3, r7, r3
   2bb84:	2201      	movs	r2, #1
   2bb86:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2bb88:	232f      	movs	r3, #47	; 0x2f
   2bb8a:	18fc      	adds	r4, r7, r3
   2bb8c:	687b      	ldr	r3, [r7, #4]
   2bb8e:	2100      	movs	r1, #0
   2bb90:	0018      	movs	r0, r3
   2bb92:	4b89      	ldr	r3, [pc, #548]	; (2bdb8 <dir_register+0x350>)
   2bb94:	4798      	blx	r3
   2bb96:	0003      	movs	r3, r0
   2bb98:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2bb9a:	232f      	movs	r3, #47	; 0x2f
   2bb9c:	18fb      	adds	r3, r7, r3
   2bb9e:	781b      	ldrb	r3, [r3, #0]
   2bba0:	2b00      	cmp	r3, #0
   2bba2:	d003      	beq.n	2bbac <dir_register+0x144>
   2bba4:	232f      	movs	r3, #47	; 0x2f
   2bba6:	18fb      	adds	r3, r7, r3
   2bba8:	781b      	ldrb	r3, [r3, #0]
   2bbaa:	e0f9      	b.n	2bda0 <dir_register+0x338>
	n = is = 0;
   2bbac:	2328      	movs	r3, #40	; 0x28
   2bbae:	18fb      	adds	r3, r7, r3
   2bbb0:	2200      	movs	r2, #0
   2bbb2:	801a      	strh	r2, [r3, #0]
   2bbb4:	232c      	movs	r3, #44	; 0x2c
   2bbb6:	18fb      	adds	r3, r7, r3
   2bbb8:	2228      	movs	r2, #40	; 0x28
   2bbba:	18ba      	adds	r2, r7, r2
   2bbbc:	8812      	ldrh	r2, [r2, #0]
   2bbbe:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2bbc0:	687b      	ldr	r3, [r7, #4]
   2bbc2:	681a      	ldr	r2, [r3, #0]
   2bbc4:	687b      	ldr	r3, [r7, #4]
   2bbc6:	691b      	ldr	r3, [r3, #16]
   2bbc8:	212f      	movs	r1, #47	; 0x2f
   2bbca:	187c      	adds	r4, r7, r1
   2bbcc:	0019      	movs	r1, r3
   2bbce:	0010      	movs	r0, r2
   2bbd0:	4b7a      	ldr	r3, [pc, #488]	; (2bdbc <dir_register+0x354>)
   2bbd2:	4798      	blx	r3
   2bbd4:	0003      	movs	r3, r0
   2bbd6:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2bbd8:	232f      	movs	r3, #47	; 0x2f
   2bbda:	18fb      	adds	r3, r7, r3
   2bbdc:	781b      	ldrb	r3, [r3, #0]
   2bbde:	2b00      	cmp	r3, #0
   2bbe0:	d13c      	bne.n	2bc5c <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2bbe2:	687b      	ldr	r3, [r7, #4]
   2bbe4:	695a      	ldr	r2, [r3, #20]
   2bbe6:	231f      	movs	r3, #31
   2bbe8:	18fb      	adds	r3, r7, r3
   2bbea:	7812      	ldrb	r2, [r2, #0]
   2bbec:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2bbee:	231f      	movs	r3, #31
   2bbf0:	18fb      	adds	r3, r7, r3
   2bbf2:	781b      	ldrb	r3, [r3, #0]
   2bbf4:	2be5      	cmp	r3, #229	; 0xe5
   2bbf6:	d004      	beq.n	2bc02 <dir_register+0x19a>
   2bbf8:	231f      	movs	r3, #31
   2bbfa:	18fb      	adds	r3, r7, r3
   2bbfc:	781b      	ldrb	r3, [r3, #0]
   2bbfe:	2b00      	cmp	r3, #0
   2bc00:	d119      	bne.n	2bc36 <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2bc02:	232c      	movs	r3, #44	; 0x2c
   2bc04:	18fb      	adds	r3, r7, r3
   2bc06:	881b      	ldrh	r3, [r3, #0]
   2bc08:	2b00      	cmp	r3, #0
   2bc0a:	d104      	bne.n	2bc16 <dir_register+0x1ae>
   2bc0c:	2328      	movs	r3, #40	; 0x28
   2bc0e:	18fb      	adds	r3, r7, r3
   2bc10:	687a      	ldr	r2, [r7, #4]
   2bc12:	88d2      	ldrh	r2, [r2, #6]
   2bc14:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2bc16:	232c      	movs	r3, #44	; 0x2c
   2bc18:	18fb      	adds	r3, r7, r3
   2bc1a:	222c      	movs	r2, #44	; 0x2c
   2bc1c:	18ba      	adds	r2, r7, r2
   2bc1e:	8812      	ldrh	r2, [r2, #0]
   2bc20:	3201      	adds	r2, #1
   2bc22:	801a      	strh	r2, [r3, #0]
   2bc24:	232c      	movs	r3, #44	; 0x2c
   2bc26:	18fa      	adds	r2, r7, r3
   2bc28:	232a      	movs	r3, #42	; 0x2a
   2bc2a:	18fb      	adds	r3, r7, r3
   2bc2c:	8812      	ldrh	r2, [r2, #0]
   2bc2e:	881b      	ldrh	r3, [r3, #0]
   2bc30:	429a      	cmp	r2, r3
   2bc32:	d104      	bne.n	2bc3e <dir_register+0x1d6>
   2bc34:	e013      	b.n	2bc5e <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2bc36:	232c      	movs	r3, #44	; 0x2c
   2bc38:	18fb      	adds	r3, r7, r3
   2bc3a:	2200      	movs	r2, #0
   2bc3c:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2bc3e:	232f      	movs	r3, #47	; 0x2f
   2bc40:	18fc      	adds	r4, r7, r3
   2bc42:	687b      	ldr	r3, [r7, #4]
   2bc44:	2101      	movs	r1, #1
   2bc46:	0018      	movs	r0, r3
   2bc48:	4b5d      	ldr	r3, [pc, #372]	; (2bdc0 <dir_register+0x358>)
   2bc4a:	4798      	blx	r3
   2bc4c:	0003      	movs	r3, r0
   2bc4e:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2bc50:	232f      	movs	r3, #47	; 0x2f
   2bc52:	18fb      	adds	r3, r7, r3
   2bc54:	781b      	ldrb	r3, [r3, #0]
   2bc56:	2b00      	cmp	r3, #0
   2bc58:	d0b2      	beq.n	2bbc0 <dir_register+0x158>
   2bc5a:	e000      	b.n	2bc5e <dir_register+0x1f6>
		if (res != FR_OK) break;
   2bc5c:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2bc5e:	232f      	movs	r3, #47	; 0x2f
   2bc60:	18fb      	adds	r3, r7, r3
   2bc62:	781b      	ldrb	r3, [r3, #0]
   2bc64:	2b00      	cmp	r3, #0
   2bc66:	d163      	bne.n	2bd30 <dir_register+0x2c8>
   2bc68:	232a      	movs	r3, #42	; 0x2a
   2bc6a:	18fb      	adds	r3, r7, r3
   2bc6c:	881b      	ldrh	r3, [r3, #0]
   2bc6e:	2b01      	cmp	r3, #1
   2bc70:	d95e      	bls.n	2bd30 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2bc72:	232f      	movs	r3, #47	; 0x2f
   2bc74:	18fc      	adds	r4, r7, r3
   2bc76:	2328      	movs	r3, #40	; 0x28
   2bc78:	18fb      	adds	r3, r7, r3
   2bc7a:	881a      	ldrh	r2, [r3, #0]
   2bc7c:	687b      	ldr	r3, [r7, #4]
   2bc7e:	0011      	movs	r1, r2
   2bc80:	0018      	movs	r0, r3
   2bc82:	4b4d      	ldr	r3, [pc, #308]	; (2bdb8 <dir_register+0x350>)
   2bc84:	4798      	blx	r3
   2bc86:	0003      	movs	r3, r0
   2bc88:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2bc8a:	232f      	movs	r3, #47	; 0x2f
   2bc8c:	18fb      	adds	r3, r7, r3
   2bc8e:	781b      	ldrb	r3, [r3, #0]
   2bc90:	2b00      	cmp	r3, #0
   2bc92:	d14d      	bne.n	2bd30 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2bc94:	687b      	ldr	r3, [r7, #4]
   2bc96:	699b      	ldr	r3, [r3, #24]
   2bc98:	221e      	movs	r2, #30
   2bc9a:	18bc      	adds	r4, r7, r2
   2bc9c:	0018      	movs	r0, r3
   2bc9e:	4b49      	ldr	r3, [pc, #292]	; (2bdc4 <dir_register+0x35c>)
   2bca0:	4798      	blx	r3
   2bca2:	0003      	movs	r3, r0
   2bca4:	7023      	strb	r3, [r4, #0]
			ne--;
   2bca6:	232a      	movs	r3, #42	; 0x2a
   2bca8:	18fb      	adds	r3, r7, r3
   2bcaa:	881a      	ldrh	r2, [r3, #0]
   2bcac:	232a      	movs	r3, #42	; 0x2a
   2bcae:	18fb      	adds	r3, r7, r3
   2bcb0:	3a01      	subs	r2, #1
   2bcb2:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2bcb4:	687b      	ldr	r3, [r7, #4]
   2bcb6:	681a      	ldr	r2, [r3, #0]
   2bcb8:	687b      	ldr	r3, [r7, #4]
   2bcba:	691b      	ldr	r3, [r3, #16]
   2bcbc:	212f      	movs	r1, #47	; 0x2f
   2bcbe:	187c      	adds	r4, r7, r1
   2bcc0:	0019      	movs	r1, r3
   2bcc2:	0010      	movs	r0, r2
   2bcc4:	4b3d      	ldr	r3, [pc, #244]	; (2bdbc <dir_register+0x354>)
   2bcc6:	4798      	blx	r3
   2bcc8:	0003      	movs	r3, r0
   2bcca:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2bccc:	232f      	movs	r3, #47	; 0x2f
   2bcce:	18fb      	adds	r3, r7, r3
   2bcd0:	781b      	ldrb	r3, [r3, #0]
   2bcd2:	2b00      	cmp	r3, #0
   2bcd4:	d12b      	bne.n	2bd2e <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2bcd6:	687b      	ldr	r3, [r7, #4]
   2bcd8:	69d8      	ldr	r0, [r3, #28]
   2bcda:	687b      	ldr	r3, [r7, #4]
   2bcdc:	6959      	ldr	r1, [r3, #20]
   2bcde:	232a      	movs	r3, #42	; 0x2a
   2bce0:	18fb      	adds	r3, r7, r3
   2bce2:	881b      	ldrh	r3, [r3, #0]
   2bce4:	b2da      	uxtb	r2, r3
   2bce6:	231e      	movs	r3, #30
   2bce8:	18fb      	adds	r3, r7, r3
   2bcea:	781b      	ldrb	r3, [r3, #0]
   2bcec:	4c36      	ldr	r4, [pc, #216]	; (2bdc8 <dir_register+0x360>)
   2bcee:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2bcf0:	687b      	ldr	r3, [r7, #4]
   2bcf2:	681b      	ldr	r3, [r3, #0]
   2bcf4:	2201      	movs	r2, #1
   2bcf6:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2bcf8:	232f      	movs	r3, #47	; 0x2f
   2bcfa:	18fc      	adds	r4, r7, r3
   2bcfc:	687b      	ldr	r3, [r7, #4]
   2bcfe:	2100      	movs	r1, #0
   2bd00:	0018      	movs	r0, r3
   2bd02:	4b2f      	ldr	r3, [pc, #188]	; (2bdc0 <dir_register+0x358>)
   2bd04:	4798      	blx	r3
   2bd06:	0003      	movs	r3, r0
   2bd08:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2bd0a:	232f      	movs	r3, #47	; 0x2f
   2bd0c:	18fb      	adds	r3, r7, r3
   2bd0e:	781b      	ldrb	r3, [r3, #0]
   2bd10:	2b00      	cmp	r3, #0
   2bd12:	d10d      	bne.n	2bd30 <dir_register+0x2c8>
   2bd14:	232a      	movs	r3, #42	; 0x2a
   2bd16:	18fb      	adds	r3, r7, r3
   2bd18:	222a      	movs	r2, #42	; 0x2a
   2bd1a:	18ba      	adds	r2, r7, r2
   2bd1c:	8812      	ldrh	r2, [r2, #0]
   2bd1e:	3a01      	subs	r2, #1
   2bd20:	801a      	strh	r2, [r3, #0]
   2bd22:	232a      	movs	r3, #42	; 0x2a
   2bd24:	18fb      	adds	r3, r7, r3
   2bd26:	881b      	ldrh	r3, [r3, #0]
   2bd28:	2b00      	cmp	r3, #0
   2bd2a:	d1c3      	bne.n	2bcb4 <dir_register+0x24c>
   2bd2c:	e000      	b.n	2bd30 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2bd2e:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2bd30:	232f      	movs	r3, #47	; 0x2f
   2bd32:	18fb      	adds	r3, r7, r3
   2bd34:	781b      	ldrb	r3, [r3, #0]
   2bd36:	2b00      	cmp	r3, #0
   2bd38:	d12f      	bne.n	2bd9a <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2bd3a:	687b      	ldr	r3, [r7, #4]
   2bd3c:	681a      	ldr	r2, [r3, #0]
   2bd3e:	687b      	ldr	r3, [r7, #4]
   2bd40:	691b      	ldr	r3, [r3, #16]
   2bd42:	212f      	movs	r1, #47	; 0x2f
   2bd44:	187c      	adds	r4, r7, r1
   2bd46:	0019      	movs	r1, r3
   2bd48:	0010      	movs	r0, r2
   2bd4a:	4b1c      	ldr	r3, [pc, #112]	; (2bdbc <dir_register+0x354>)
   2bd4c:	4798      	blx	r3
   2bd4e:	0003      	movs	r3, r0
   2bd50:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2bd52:	232f      	movs	r3, #47	; 0x2f
   2bd54:	18fb      	adds	r3, r7, r3
   2bd56:	781b      	ldrb	r3, [r3, #0]
   2bd58:	2b00      	cmp	r3, #0
   2bd5a:	d11e      	bne.n	2bd9a <dir_register+0x332>
			dir = dj->dir;
   2bd5c:	687b      	ldr	r3, [r7, #4]
   2bd5e:	695b      	ldr	r3, [r3, #20]
   2bd60:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2bd62:	69bb      	ldr	r3, [r7, #24]
   2bd64:	2220      	movs	r2, #32
   2bd66:	2100      	movs	r1, #0
   2bd68:	0018      	movs	r0, r3
   2bd6a:	4b18      	ldr	r3, [pc, #96]	; (2bdcc <dir_register+0x364>)
   2bd6c:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2bd6e:	687b      	ldr	r3, [r7, #4]
   2bd70:	6999      	ldr	r1, [r3, #24]
   2bd72:	69bb      	ldr	r3, [r7, #24]
   2bd74:	220b      	movs	r2, #11
   2bd76:	0018      	movs	r0, r3
   2bd78:	4b0b      	ldr	r3, [pc, #44]	; (2bda8 <dir_register+0x340>)
   2bd7a:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2bd7c:	69bb      	ldr	r3, [r7, #24]
   2bd7e:	330c      	adds	r3, #12
   2bd80:	001a      	movs	r2, r3
   2bd82:	687b      	ldr	r3, [r7, #4]
   2bd84:	699b      	ldr	r3, [r3, #24]
   2bd86:	330b      	adds	r3, #11
   2bd88:	781b      	ldrb	r3, [r3, #0]
   2bd8a:	2118      	movs	r1, #24
   2bd8c:	400b      	ands	r3, r1
   2bd8e:	b2db      	uxtb	r3, r3
   2bd90:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2bd92:	687b      	ldr	r3, [r7, #4]
   2bd94:	681b      	ldr	r3, [r3, #0]
   2bd96:	2201      	movs	r2, #1
   2bd98:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2bd9a:	232f      	movs	r3, #47	; 0x2f
   2bd9c:	18fb      	adds	r3, r7, r3
   2bd9e:	781b      	ldrb	r3, [r3, #0]
}
   2bda0:	0018      	movs	r0, r3
   2bda2:	46bd      	mov	sp, r7
   2bda4:	b00d      	add	sp, #52	; 0x34
   2bda6:	bd90      	pop	{r4, r7, pc}
   2bda8:	0002a8c1 	.word	0x0002a8c1
   2bdac:	0002b71d 	.word	0x0002b71d
   2bdb0:	0002b86d 	.word	0x0002b86d
   2bdb4:	00031bd9 	.word	0x00031bd9
   2bdb8:	0002b1e9 	.word	0x0002b1e9
   2bdbc:	0002a9a5 	.word	0x0002a9a5
   2bdc0:	0002b319 	.word	0x0002b319
   2bdc4:	0002b81d 	.word	0x0002b81d
   2bdc8:	0002b60d 	.word	0x0002b60d
   2bdcc:	0002a8f9 	.word	0x0002a8f9

0002bdd0 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2bdd0:	b590      	push	{r4, r7, lr}
   2bdd2:	b08b      	sub	sp, #44	; 0x2c
   2bdd4:	af00      	add	r7, sp, #0
   2bdd6:	6078      	str	r0, [r7, #4]
   2bdd8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2bdda:	683b      	ldr	r3, [r7, #0]
   2bddc:	681b      	ldr	r3, [r3, #0]
   2bdde:	613b      	str	r3, [r7, #16]
   2bde0:	e002      	b.n	2bde8 <create_name+0x18>
   2bde2:	693b      	ldr	r3, [r7, #16]
   2bde4:	3301      	adds	r3, #1
   2bde6:	613b      	str	r3, [r7, #16]
   2bde8:	693b      	ldr	r3, [r7, #16]
   2bdea:	781b      	ldrb	r3, [r3, #0]
   2bdec:	2b2f      	cmp	r3, #47	; 0x2f
   2bdee:	d0f8      	beq.n	2bde2 <create_name+0x12>
   2bdf0:	693b      	ldr	r3, [r7, #16]
   2bdf2:	781b      	ldrb	r3, [r3, #0]
   2bdf4:	2b5c      	cmp	r3, #92	; 0x5c
   2bdf6:	d0f4      	beq.n	2bde2 <create_name+0x12>
	lfn = dj->lfn;
   2bdf8:	687b      	ldr	r3, [r7, #4]
   2bdfa:	69db      	ldr	r3, [r3, #28]
   2bdfc:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2bdfe:	2300      	movs	r3, #0
   2be00:	617b      	str	r3, [r7, #20]
   2be02:	697b      	ldr	r3, [r7, #20]
   2be04:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2be06:	69bb      	ldr	r3, [r7, #24]
   2be08:	1c5a      	adds	r2, r3, #1
   2be0a:	61ba      	str	r2, [r7, #24]
   2be0c:	693a      	ldr	r2, [r7, #16]
   2be0e:	18d3      	adds	r3, r2, r3
   2be10:	781a      	ldrb	r2, [r3, #0]
   2be12:	2324      	movs	r3, #36	; 0x24
   2be14:	18fb      	adds	r3, r7, r3
   2be16:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2be18:	2324      	movs	r3, #36	; 0x24
   2be1a:	18fb      	adds	r3, r7, r3
   2be1c:	881b      	ldrh	r3, [r3, #0]
   2be1e:	2b1f      	cmp	r3, #31
   2be20:	d944      	bls.n	2beac <create_name+0xdc>
   2be22:	2324      	movs	r3, #36	; 0x24
   2be24:	18fb      	adds	r3, r7, r3
   2be26:	881b      	ldrh	r3, [r3, #0]
   2be28:	2b2f      	cmp	r3, #47	; 0x2f
   2be2a:	d03f      	beq.n	2beac <create_name+0xdc>
   2be2c:	2324      	movs	r3, #36	; 0x24
   2be2e:	18fb      	adds	r3, r7, r3
   2be30:	881b      	ldrh	r3, [r3, #0]
   2be32:	2b5c      	cmp	r3, #92	; 0x5c
   2be34:	d03a      	beq.n	2beac <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2be36:	697b      	ldr	r3, [r7, #20]
   2be38:	2bfe      	cmp	r3, #254	; 0xfe
   2be3a:	d901      	bls.n	2be40 <create_name+0x70>
			return FR_INVALID_NAME;
   2be3c:	2306      	movs	r3, #6
   2be3e:	e1e7      	b.n	2c210 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2be40:	2324      	movs	r3, #36	; 0x24
   2be42:	18fb      	adds	r3, r7, r3
   2be44:	2224      	movs	r2, #36	; 0x24
   2be46:	18ba      	adds	r2, r7, r2
   2be48:	8812      	ldrh	r2, [r2, #0]
   2be4a:	21ff      	movs	r1, #255	; 0xff
   2be4c:	400a      	ands	r2, r1
   2be4e:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2be50:	2324      	movs	r3, #36	; 0x24
   2be52:	18fc      	adds	r4, r7, r3
   2be54:	2324      	movs	r3, #36	; 0x24
   2be56:	18fb      	adds	r3, r7, r3
   2be58:	881b      	ldrh	r3, [r3, #0]
   2be5a:	2101      	movs	r1, #1
   2be5c:	0018      	movs	r0, r3
   2be5e:	4bba      	ldr	r3, [pc, #744]	; (2c148 <create_name+0x378>)
   2be60:	4798      	blx	r3
   2be62:	0003      	movs	r3, r0
   2be64:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2be66:	2324      	movs	r3, #36	; 0x24
   2be68:	18fb      	adds	r3, r7, r3
   2be6a:	881b      	ldrh	r3, [r3, #0]
   2be6c:	2b00      	cmp	r3, #0
   2be6e:	d101      	bne.n	2be74 <create_name+0xa4>
   2be70:	2306      	movs	r3, #6
   2be72:	e1cd      	b.n	2c210 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2be74:	2324      	movs	r3, #36	; 0x24
   2be76:	18fb      	adds	r3, r7, r3
   2be78:	881b      	ldrh	r3, [r3, #0]
   2be7a:	2b7f      	cmp	r3, #127	; 0x7f
   2be7c:	d80b      	bhi.n	2be96 <create_name+0xc6>
   2be7e:	2324      	movs	r3, #36	; 0x24
   2be80:	18fb      	adds	r3, r7, r3
   2be82:	881a      	ldrh	r2, [r3, #0]
   2be84:	4bb1      	ldr	r3, [pc, #708]	; (2c14c <create_name+0x37c>)
   2be86:	0011      	movs	r1, r2
   2be88:	0018      	movs	r0, r3
   2be8a:	4bb1      	ldr	r3, [pc, #708]	; (2c150 <create_name+0x380>)
   2be8c:	4798      	blx	r3
   2be8e:	1e03      	subs	r3, r0, #0
   2be90:	d001      	beq.n	2be96 <create_name+0xc6>
			return FR_INVALID_NAME;
   2be92:	2306      	movs	r3, #6
   2be94:	e1bc      	b.n	2c210 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2be96:	697b      	ldr	r3, [r7, #20]
   2be98:	1c5a      	adds	r2, r3, #1
   2be9a:	617a      	str	r2, [r7, #20]
   2be9c:	005b      	lsls	r3, r3, #1
   2be9e:	68fa      	ldr	r2, [r7, #12]
   2bea0:	18d3      	adds	r3, r2, r3
   2bea2:	2224      	movs	r2, #36	; 0x24
   2bea4:	18ba      	adds	r2, r7, r2
   2bea6:	8812      	ldrh	r2, [r2, #0]
   2bea8:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2beaa:	e7ac      	b.n	2be06 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2beac:	693a      	ldr	r2, [r7, #16]
   2beae:	69bb      	ldr	r3, [r7, #24]
   2beb0:	18d2      	adds	r2, r2, r3
   2beb2:	683b      	ldr	r3, [r7, #0]
   2beb4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2beb6:	2324      	movs	r3, #36	; 0x24
   2beb8:	18fb      	adds	r3, r7, r3
   2beba:	881b      	ldrh	r3, [r3, #0]
   2bebc:	2b1f      	cmp	r3, #31
   2bebe:	d801      	bhi.n	2bec4 <create_name+0xf4>
   2bec0:	2204      	movs	r2, #4
   2bec2:	e000      	b.n	2bec6 <create_name+0xf6>
   2bec4:	2200      	movs	r2, #0
   2bec6:	2326      	movs	r3, #38	; 0x26
   2bec8:	18fb      	adds	r3, r7, r3
   2beca:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2becc:	e017      	b.n	2befe <create_name+0x12e>
		w = lfn[di-1];
   2bece:	697b      	ldr	r3, [r7, #20]
   2bed0:	4aa0      	ldr	r2, [pc, #640]	; (2c154 <create_name+0x384>)
   2bed2:	4694      	mov	ip, r2
   2bed4:	4463      	add	r3, ip
   2bed6:	005b      	lsls	r3, r3, #1
   2bed8:	68fa      	ldr	r2, [r7, #12]
   2beda:	18d2      	adds	r2, r2, r3
   2bedc:	2324      	movs	r3, #36	; 0x24
   2bede:	18fb      	adds	r3, r7, r3
   2bee0:	8812      	ldrh	r2, [r2, #0]
   2bee2:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2bee4:	2324      	movs	r3, #36	; 0x24
   2bee6:	18fb      	adds	r3, r7, r3
   2bee8:	881b      	ldrh	r3, [r3, #0]
   2beea:	2b20      	cmp	r3, #32
   2beec:	d004      	beq.n	2bef8 <create_name+0x128>
   2beee:	2324      	movs	r3, #36	; 0x24
   2bef0:	18fb      	adds	r3, r7, r3
   2bef2:	881b      	ldrh	r3, [r3, #0]
   2bef4:	2b2e      	cmp	r3, #46	; 0x2e
   2bef6:	d106      	bne.n	2bf06 <create_name+0x136>
		di--;
   2bef8:	697b      	ldr	r3, [r7, #20]
   2befa:	3b01      	subs	r3, #1
   2befc:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2befe:	697b      	ldr	r3, [r7, #20]
   2bf00:	2b00      	cmp	r3, #0
   2bf02:	d1e4      	bne.n	2bece <create_name+0xfe>
   2bf04:	e000      	b.n	2bf08 <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2bf06:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2bf08:	697b      	ldr	r3, [r7, #20]
   2bf0a:	2b00      	cmp	r3, #0
   2bf0c:	d101      	bne.n	2bf12 <create_name+0x142>
   2bf0e:	2306      	movs	r3, #6
   2bf10:	e17e      	b.n	2c210 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2bf12:	697b      	ldr	r3, [r7, #20]
   2bf14:	005b      	lsls	r3, r3, #1
   2bf16:	68fa      	ldr	r2, [r7, #12]
   2bf18:	18d3      	adds	r3, r2, r3
   2bf1a:	2200      	movs	r2, #0
   2bf1c:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2bf1e:	687b      	ldr	r3, [r7, #4]
   2bf20:	699b      	ldr	r3, [r3, #24]
   2bf22:	220b      	movs	r2, #11
   2bf24:	2120      	movs	r1, #32
   2bf26:	0018      	movs	r0, r3
   2bf28:	4b8b      	ldr	r3, [pc, #556]	; (2c158 <create_name+0x388>)
   2bf2a:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2bf2c:	2300      	movs	r3, #0
   2bf2e:	61bb      	str	r3, [r7, #24]
   2bf30:	e002      	b.n	2bf38 <create_name+0x168>
   2bf32:	69bb      	ldr	r3, [r7, #24]
   2bf34:	3301      	adds	r3, #1
   2bf36:	61bb      	str	r3, [r7, #24]
   2bf38:	69bb      	ldr	r3, [r7, #24]
   2bf3a:	005b      	lsls	r3, r3, #1
   2bf3c:	68fa      	ldr	r2, [r7, #12]
   2bf3e:	18d3      	adds	r3, r2, r3
   2bf40:	881b      	ldrh	r3, [r3, #0]
   2bf42:	2b20      	cmp	r3, #32
   2bf44:	d0f5      	beq.n	2bf32 <create_name+0x162>
   2bf46:	69bb      	ldr	r3, [r7, #24]
   2bf48:	005b      	lsls	r3, r3, #1
   2bf4a:	68fa      	ldr	r2, [r7, #12]
   2bf4c:	18d3      	adds	r3, r2, r3
   2bf4e:	881b      	ldrh	r3, [r3, #0]
   2bf50:	2b2e      	cmp	r3, #46	; 0x2e
   2bf52:	d0ee      	beq.n	2bf32 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2bf54:	69bb      	ldr	r3, [r7, #24]
   2bf56:	2b00      	cmp	r3, #0
   2bf58:	d00b      	beq.n	2bf72 <create_name+0x1a2>
   2bf5a:	2326      	movs	r3, #38	; 0x26
   2bf5c:	18fb      	adds	r3, r7, r3
   2bf5e:	2226      	movs	r2, #38	; 0x26
   2bf60:	18ba      	adds	r2, r7, r2
   2bf62:	7812      	ldrb	r2, [r2, #0]
   2bf64:	2103      	movs	r1, #3
   2bf66:	430a      	orrs	r2, r1
   2bf68:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2bf6a:	e002      	b.n	2bf72 <create_name+0x1a2>
   2bf6c:	697b      	ldr	r3, [r7, #20]
   2bf6e:	3b01      	subs	r3, #1
   2bf70:	617b      	str	r3, [r7, #20]
   2bf72:	697b      	ldr	r3, [r7, #20]
   2bf74:	2b00      	cmp	r3, #0
   2bf76:	d009      	beq.n	2bf8c <create_name+0x1bc>
   2bf78:	697b      	ldr	r3, [r7, #20]
   2bf7a:	4a76      	ldr	r2, [pc, #472]	; (2c154 <create_name+0x384>)
   2bf7c:	4694      	mov	ip, r2
   2bf7e:	4463      	add	r3, ip
   2bf80:	005b      	lsls	r3, r3, #1
   2bf82:	68fa      	ldr	r2, [r7, #12]
   2bf84:	18d3      	adds	r3, r2, r3
   2bf86:	881b      	ldrh	r3, [r3, #0]
   2bf88:	2b2e      	cmp	r3, #46	; 0x2e
   2bf8a:	d1ef      	bne.n	2bf6c <create_name+0x19c>

	b = i = 0; ni = 8;
   2bf8c:	2300      	movs	r3, #0
   2bf8e:	623b      	str	r3, [r7, #32]
   2bf90:	2327      	movs	r3, #39	; 0x27
   2bf92:	18fb      	adds	r3, r7, r3
   2bf94:	2200      	movs	r2, #0
   2bf96:	701a      	strb	r2, [r3, #0]
   2bf98:	2308      	movs	r3, #8
   2bf9a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2bf9c:	69bb      	ldr	r3, [r7, #24]
   2bf9e:	1c5a      	adds	r2, r3, #1
   2bfa0:	61ba      	str	r2, [r7, #24]
   2bfa2:	005b      	lsls	r3, r3, #1
   2bfa4:	68fa      	ldr	r2, [r7, #12]
   2bfa6:	18d2      	adds	r2, r2, r3
   2bfa8:	2324      	movs	r3, #36	; 0x24
   2bfaa:	18fb      	adds	r3, r7, r3
   2bfac:	8812      	ldrh	r2, [r2, #0]
   2bfae:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2bfb0:	2324      	movs	r3, #36	; 0x24
   2bfb2:	18fb      	adds	r3, r7, r3
   2bfb4:	881b      	ldrh	r3, [r3, #0]
   2bfb6:	2b00      	cmp	r3, #0
   2bfb8:	d100      	bne.n	2bfbc <create_name+0x1ec>
   2bfba:	e0c3      	b.n	2c144 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2bfbc:	2324      	movs	r3, #36	; 0x24
   2bfbe:	18fb      	adds	r3, r7, r3
   2bfc0:	881b      	ldrh	r3, [r3, #0]
   2bfc2:	2b20      	cmp	r3, #32
   2bfc4:	d008      	beq.n	2bfd8 <create_name+0x208>
   2bfc6:	2324      	movs	r3, #36	; 0x24
   2bfc8:	18fb      	adds	r3, r7, r3
   2bfca:	881b      	ldrh	r3, [r3, #0]
   2bfcc:	2b2e      	cmp	r3, #46	; 0x2e
   2bfce:	d10c      	bne.n	2bfea <create_name+0x21a>
   2bfd0:	69ba      	ldr	r2, [r7, #24]
   2bfd2:	697b      	ldr	r3, [r7, #20]
   2bfd4:	429a      	cmp	r2, r3
   2bfd6:	d008      	beq.n	2bfea <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2bfd8:	2326      	movs	r3, #38	; 0x26
   2bfda:	18fb      	adds	r3, r7, r3
   2bfdc:	2226      	movs	r2, #38	; 0x26
   2bfde:	18ba      	adds	r2, r7, r2
   2bfe0:	7812      	ldrb	r2, [r2, #0]
   2bfe2:	2103      	movs	r1, #3
   2bfe4:	430a      	orrs	r2, r1
   2bfe6:	701a      	strb	r2, [r3, #0]
   2bfe8:	e0ab      	b.n	2c142 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2bfea:	6a3a      	ldr	r2, [r7, #32]
   2bfec:	69fb      	ldr	r3, [r7, #28]
   2bfee:	429a      	cmp	r2, r3
   2bff0:	d203      	bcs.n	2bffa <create_name+0x22a>
   2bff2:	69ba      	ldr	r2, [r7, #24]
   2bff4:	697b      	ldr	r3, [r7, #20]
   2bff6:	429a      	cmp	r2, r3
   2bff8:	d12a      	bne.n	2c050 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2bffa:	69fb      	ldr	r3, [r7, #28]
   2bffc:	2b0b      	cmp	r3, #11
   2bffe:	d108      	bne.n	2c012 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2c000:	2326      	movs	r3, #38	; 0x26
   2c002:	18fb      	adds	r3, r7, r3
   2c004:	2226      	movs	r2, #38	; 0x26
   2c006:	18ba      	adds	r2, r7, r2
   2c008:	7812      	ldrb	r2, [r2, #0]
   2c00a:	2103      	movs	r1, #3
   2c00c:	430a      	orrs	r2, r1
   2c00e:	701a      	strb	r2, [r3, #0]
   2c010:	e0a9      	b.n	2c166 <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2c012:	69ba      	ldr	r2, [r7, #24]
   2c014:	697b      	ldr	r3, [r7, #20]
   2c016:	429a      	cmp	r2, r3
   2c018:	d007      	beq.n	2c02a <create_name+0x25a>
   2c01a:	2326      	movs	r3, #38	; 0x26
   2c01c:	18fb      	adds	r3, r7, r3
   2c01e:	2226      	movs	r2, #38	; 0x26
   2c020:	18ba      	adds	r2, r7, r2
   2c022:	7812      	ldrb	r2, [r2, #0]
   2c024:	2103      	movs	r1, #3
   2c026:	430a      	orrs	r2, r1
   2c028:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2c02a:	69ba      	ldr	r2, [r7, #24]
   2c02c:	697b      	ldr	r3, [r7, #20]
   2c02e:	429a      	cmp	r2, r3
   2c030:	d900      	bls.n	2c034 <create_name+0x264>
   2c032:	e097      	b.n	2c164 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2c034:	697b      	ldr	r3, [r7, #20]
   2c036:	61bb      	str	r3, [r7, #24]
   2c038:	2308      	movs	r3, #8
   2c03a:	623b      	str	r3, [r7, #32]
   2c03c:	230b      	movs	r3, #11
   2c03e:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2c040:	2327      	movs	r3, #39	; 0x27
   2c042:	18fb      	adds	r3, r7, r3
   2c044:	2227      	movs	r2, #39	; 0x27
   2c046:	18ba      	adds	r2, r7, r2
   2c048:	7812      	ldrb	r2, [r2, #0]
   2c04a:	0092      	lsls	r2, r2, #2
   2c04c:	701a      	strb	r2, [r3, #0]
   2c04e:	e078      	b.n	2c142 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2c050:	2324      	movs	r3, #36	; 0x24
   2c052:	18fb      	adds	r3, r7, r3
   2c054:	881b      	ldrh	r3, [r3, #0]
   2c056:	2b7f      	cmp	r3, #127	; 0x7f
   2c058:	d920      	bls.n	2c09c <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2c05a:	2324      	movs	r3, #36	; 0x24
   2c05c:	18fc      	adds	r4, r7, r3
   2c05e:	2324      	movs	r3, #36	; 0x24
   2c060:	18fb      	adds	r3, r7, r3
   2c062:	881b      	ldrh	r3, [r3, #0]
   2c064:	2100      	movs	r1, #0
   2c066:	0018      	movs	r0, r3
   2c068:	4b37      	ldr	r3, [pc, #220]	; (2c148 <create_name+0x378>)
   2c06a:	4798      	blx	r3
   2c06c:	0003      	movs	r3, r0
   2c06e:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2c070:	2324      	movs	r3, #36	; 0x24
   2c072:	18fb      	adds	r3, r7, r3
   2c074:	881b      	ldrh	r3, [r3, #0]
   2c076:	2b00      	cmp	r3, #0
   2c078:	d008      	beq.n	2c08c <create_name+0x2bc>
   2c07a:	2324      	movs	r3, #36	; 0x24
   2c07c:	18fb      	adds	r3, r7, r3
   2c07e:	881b      	ldrh	r3, [r3, #0]
   2c080:	3b80      	subs	r3, #128	; 0x80
   2c082:	4a36      	ldr	r2, [pc, #216]	; (2c15c <create_name+0x38c>)
   2c084:	5cd2      	ldrb	r2, [r2, r3]
   2c086:	2324      	movs	r3, #36	; 0x24
   2c088:	18fb      	adds	r3, r7, r3
   2c08a:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2c08c:	2326      	movs	r3, #38	; 0x26
   2c08e:	18fb      	adds	r3, r7, r3
   2c090:	2226      	movs	r2, #38	; 0x26
   2c092:	18ba      	adds	r2, r7, r2
   2c094:	7812      	ldrb	r2, [r2, #0]
   2c096:	2102      	movs	r1, #2
   2c098:	430a      	orrs	r2, r1
   2c09a:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2c09c:	2324      	movs	r3, #36	; 0x24
   2c09e:	18fb      	adds	r3, r7, r3
   2c0a0:	881b      	ldrh	r3, [r3, #0]
   2c0a2:	2b00      	cmp	r3, #0
   2c0a4:	d009      	beq.n	2c0ba <create_name+0x2ea>
   2c0a6:	2324      	movs	r3, #36	; 0x24
   2c0a8:	18fb      	adds	r3, r7, r3
   2c0aa:	881a      	ldrh	r2, [r3, #0]
   2c0ac:	4b2c      	ldr	r3, [pc, #176]	; (2c160 <create_name+0x390>)
   2c0ae:	0011      	movs	r1, r2
   2c0b0:	0018      	movs	r0, r3
   2c0b2:	4b27      	ldr	r3, [pc, #156]	; (2c150 <create_name+0x380>)
   2c0b4:	4798      	blx	r3
   2c0b6:	1e03      	subs	r3, r0, #0
   2c0b8:	d00c      	beq.n	2c0d4 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2c0ba:	2324      	movs	r3, #36	; 0x24
   2c0bc:	18fb      	adds	r3, r7, r3
   2c0be:	225f      	movs	r2, #95	; 0x5f
   2c0c0:	801a      	strh	r2, [r3, #0]
   2c0c2:	2326      	movs	r3, #38	; 0x26
   2c0c4:	18fb      	adds	r3, r7, r3
   2c0c6:	2226      	movs	r2, #38	; 0x26
   2c0c8:	18ba      	adds	r2, r7, r2
   2c0ca:	7812      	ldrb	r2, [r2, #0]
   2c0cc:	2103      	movs	r1, #3
   2c0ce:	430a      	orrs	r2, r1
   2c0d0:	701a      	strb	r2, [r3, #0]
   2c0d2:	e02b      	b.n	2c12c <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2c0d4:	2324      	movs	r3, #36	; 0x24
   2c0d6:	18fb      	adds	r3, r7, r3
   2c0d8:	881b      	ldrh	r3, [r3, #0]
   2c0da:	2b40      	cmp	r3, #64	; 0x40
   2c0dc:	d90d      	bls.n	2c0fa <create_name+0x32a>
   2c0de:	2324      	movs	r3, #36	; 0x24
   2c0e0:	18fb      	adds	r3, r7, r3
   2c0e2:	881b      	ldrh	r3, [r3, #0]
   2c0e4:	2b5a      	cmp	r3, #90	; 0x5a
   2c0e6:	d808      	bhi.n	2c0fa <create_name+0x32a>
					b |= 2;
   2c0e8:	2327      	movs	r3, #39	; 0x27
   2c0ea:	18fb      	adds	r3, r7, r3
   2c0ec:	2227      	movs	r2, #39	; 0x27
   2c0ee:	18ba      	adds	r2, r7, r2
   2c0f0:	7812      	ldrb	r2, [r2, #0]
   2c0f2:	2102      	movs	r1, #2
   2c0f4:	430a      	orrs	r2, r1
   2c0f6:	701a      	strb	r2, [r3, #0]
   2c0f8:	e018      	b.n	2c12c <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2c0fa:	2324      	movs	r3, #36	; 0x24
   2c0fc:	18fb      	adds	r3, r7, r3
   2c0fe:	881b      	ldrh	r3, [r3, #0]
   2c100:	2b60      	cmp	r3, #96	; 0x60
   2c102:	d913      	bls.n	2c12c <create_name+0x35c>
   2c104:	2324      	movs	r3, #36	; 0x24
   2c106:	18fb      	adds	r3, r7, r3
   2c108:	881b      	ldrh	r3, [r3, #0]
   2c10a:	2b7a      	cmp	r3, #122	; 0x7a
   2c10c:	d80e      	bhi.n	2c12c <create_name+0x35c>
						b |= 1; w -= 0x20;
   2c10e:	2327      	movs	r3, #39	; 0x27
   2c110:	18fb      	adds	r3, r7, r3
   2c112:	2227      	movs	r2, #39	; 0x27
   2c114:	18ba      	adds	r2, r7, r2
   2c116:	7812      	ldrb	r2, [r2, #0]
   2c118:	2101      	movs	r1, #1
   2c11a:	430a      	orrs	r2, r1
   2c11c:	701a      	strb	r2, [r3, #0]
   2c11e:	2324      	movs	r3, #36	; 0x24
   2c120:	18fb      	adds	r3, r7, r3
   2c122:	2224      	movs	r2, #36	; 0x24
   2c124:	18ba      	adds	r2, r7, r2
   2c126:	8812      	ldrh	r2, [r2, #0]
   2c128:	3a20      	subs	r2, #32
   2c12a:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2c12c:	687b      	ldr	r3, [r7, #4]
   2c12e:	699a      	ldr	r2, [r3, #24]
   2c130:	6a3b      	ldr	r3, [r7, #32]
   2c132:	1c59      	adds	r1, r3, #1
   2c134:	6239      	str	r1, [r7, #32]
   2c136:	18d3      	adds	r3, r2, r3
   2c138:	2224      	movs	r2, #36	; 0x24
   2c13a:	18ba      	adds	r2, r7, r2
   2c13c:	8812      	ldrh	r2, [r2, #0]
   2c13e:	b2d2      	uxtb	r2, r2
   2c140:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2c142:	e72b      	b.n	2bf9c <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2c144:	46c0      	nop			; (mov r8, r8)
   2c146:	e00e      	b.n	2c166 <create_name+0x396>
   2c148:	0002d509 	.word	0x0002d509
   2c14c:	00038fec 	.word	0x00038fec
   2c150:	0002a973 	.word	0x0002a973
   2c154:	7fffffff 	.word	0x7fffffff
   2c158:	0002a8f9 	.word	0x0002a8f9
   2c15c:	00039034 	.word	0x00039034
   2c160:	00038ff8 	.word	0x00038ff8
			if (si > di) break;			/* No extension */
   2c164:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2c166:	687b      	ldr	r3, [r7, #4]
   2c168:	699b      	ldr	r3, [r3, #24]
   2c16a:	781b      	ldrb	r3, [r3, #0]
   2c16c:	2be5      	cmp	r3, #229	; 0xe5
   2c16e:	d103      	bne.n	2c178 <create_name+0x3a8>
   2c170:	687b      	ldr	r3, [r7, #4]
   2c172:	699b      	ldr	r3, [r3, #24]
   2c174:	2205      	movs	r2, #5
   2c176:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2c178:	69fb      	ldr	r3, [r7, #28]
   2c17a:	2b08      	cmp	r3, #8
   2c17c:	d106      	bne.n	2c18c <create_name+0x3bc>
   2c17e:	2327      	movs	r3, #39	; 0x27
   2c180:	18fb      	adds	r3, r7, r3
   2c182:	2227      	movs	r2, #39	; 0x27
   2c184:	18ba      	adds	r2, r7, r2
   2c186:	7812      	ldrb	r2, [r2, #0]
   2c188:	0092      	lsls	r2, r2, #2
   2c18a:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2c18c:	2327      	movs	r3, #39	; 0x27
   2c18e:	18fb      	adds	r3, r7, r3
   2c190:	781b      	ldrb	r3, [r3, #0]
   2c192:	220c      	movs	r2, #12
   2c194:	4013      	ands	r3, r2
   2c196:	2b0c      	cmp	r3, #12
   2c198:	d006      	beq.n	2c1a8 <create_name+0x3d8>
   2c19a:	2327      	movs	r3, #39	; 0x27
   2c19c:	18fb      	adds	r3, r7, r3
   2c19e:	781b      	ldrb	r3, [r3, #0]
   2c1a0:	2203      	movs	r2, #3
   2c1a2:	4013      	ands	r3, r2
   2c1a4:	2b03      	cmp	r3, #3
   2c1a6:	d107      	bne.n	2c1b8 <create_name+0x3e8>
		cf |= NS_LFN;
   2c1a8:	2326      	movs	r3, #38	; 0x26
   2c1aa:	18fb      	adds	r3, r7, r3
   2c1ac:	2226      	movs	r2, #38	; 0x26
   2c1ae:	18ba      	adds	r2, r7, r2
   2c1b0:	7812      	ldrb	r2, [r2, #0]
   2c1b2:	2102      	movs	r1, #2
   2c1b4:	430a      	orrs	r2, r1
   2c1b6:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2c1b8:	2326      	movs	r3, #38	; 0x26
   2c1ba:	18fb      	adds	r3, r7, r3
   2c1bc:	781b      	ldrb	r3, [r3, #0]
   2c1be:	2202      	movs	r2, #2
   2c1c0:	4013      	ands	r3, r2
   2c1c2:	d11d      	bne.n	2c200 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2c1c4:	2327      	movs	r3, #39	; 0x27
   2c1c6:	18fb      	adds	r3, r7, r3
   2c1c8:	781b      	ldrb	r3, [r3, #0]
   2c1ca:	2203      	movs	r2, #3
   2c1cc:	4013      	ands	r3, r2
   2c1ce:	2b01      	cmp	r3, #1
   2c1d0:	d107      	bne.n	2c1e2 <create_name+0x412>
   2c1d2:	2326      	movs	r3, #38	; 0x26
   2c1d4:	18fb      	adds	r3, r7, r3
   2c1d6:	2226      	movs	r2, #38	; 0x26
   2c1d8:	18ba      	adds	r2, r7, r2
   2c1da:	7812      	ldrb	r2, [r2, #0]
   2c1dc:	2110      	movs	r1, #16
   2c1de:	430a      	orrs	r2, r1
   2c1e0:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2c1e2:	2327      	movs	r3, #39	; 0x27
   2c1e4:	18fb      	adds	r3, r7, r3
   2c1e6:	781b      	ldrb	r3, [r3, #0]
   2c1e8:	220c      	movs	r2, #12
   2c1ea:	4013      	ands	r3, r2
   2c1ec:	2b04      	cmp	r3, #4
   2c1ee:	d107      	bne.n	2c200 <create_name+0x430>
   2c1f0:	2326      	movs	r3, #38	; 0x26
   2c1f2:	18fb      	adds	r3, r7, r3
   2c1f4:	2226      	movs	r2, #38	; 0x26
   2c1f6:	18ba      	adds	r2, r7, r2
   2c1f8:	7812      	ldrb	r2, [r2, #0]
   2c1fa:	2108      	movs	r1, #8
   2c1fc:	430a      	orrs	r2, r1
   2c1fe:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2c200:	687b      	ldr	r3, [r7, #4]
   2c202:	699b      	ldr	r3, [r3, #24]
   2c204:	330b      	adds	r3, #11
   2c206:	2226      	movs	r2, #38	; 0x26
   2c208:	18ba      	adds	r2, r7, r2
   2c20a:	7812      	ldrb	r2, [r2, #0]
   2c20c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2c20e:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2c210:	0018      	movs	r0, r3
   2c212:	46bd      	mov	sp, r7
   2c214:	b00b      	add	sp, #44	; 0x2c
   2c216:	bd90      	pop	{r4, r7, pc}

0002c218 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2c218:	b590      	push	{r4, r7, lr}
   2c21a:	b085      	sub	sp, #20
   2c21c:	af00      	add	r7, sp, #0
   2c21e:	6078      	str	r0, [r7, #4]
   2c220:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2c222:	683b      	ldr	r3, [r7, #0]
   2c224:	781b      	ldrb	r3, [r3, #0]
   2c226:	2b2f      	cmp	r3, #47	; 0x2f
   2c228:	d003      	beq.n	2c232 <follow_path+0x1a>
   2c22a:	683b      	ldr	r3, [r7, #0]
   2c22c:	781b      	ldrb	r3, [r3, #0]
   2c22e:	2b5c      	cmp	r3, #92	; 0x5c
   2c230:	d102      	bne.n	2c238 <follow_path+0x20>
		path++;
   2c232:	683b      	ldr	r3, [r7, #0]
   2c234:	3301      	adds	r3, #1
   2c236:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2c238:	687b      	ldr	r3, [r7, #4]
   2c23a:	2200      	movs	r2, #0
   2c23c:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2c23e:	683b      	ldr	r3, [r7, #0]
   2c240:	781b      	ldrb	r3, [r3, #0]
   2c242:	2b1f      	cmp	r3, #31
   2c244:	d80c      	bhi.n	2c260 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2c246:	230f      	movs	r3, #15
   2c248:	18fc      	adds	r4, r7, r3
   2c24a:	687b      	ldr	r3, [r7, #4]
   2c24c:	2100      	movs	r1, #0
   2c24e:	0018      	movs	r0, r3
   2c250:	4b3c      	ldr	r3, [pc, #240]	; (2c344 <follow_path+0x12c>)
   2c252:	4798      	blx	r3
   2c254:	0003      	movs	r3, r0
   2c256:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2c258:	687b      	ldr	r3, [r7, #4]
   2c25a:	2200      	movs	r2, #0
   2c25c:	615a      	str	r2, [r3, #20]
   2c25e:	e06a      	b.n	2c336 <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2c260:	230f      	movs	r3, #15
   2c262:	18fc      	adds	r4, r7, r3
   2c264:	003a      	movs	r2, r7
   2c266:	687b      	ldr	r3, [r7, #4]
   2c268:	0011      	movs	r1, r2
   2c26a:	0018      	movs	r0, r3
   2c26c:	4b36      	ldr	r3, [pc, #216]	; (2c348 <follow_path+0x130>)
   2c26e:	4798      	blx	r3
   2c270:	0003      	movs	r3, r0
   2c272:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c274:	230f      	movs	r3, #15
   2c276:	18fb      	adds	r3, r7, r3
   2c278:	781b      	ldrb	r3, [r3, #0]
   2c27a:	2b00      	cmp	r3, #0
   2c27c:	d154      	bne.n	2c328 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2c27e:	230f      	movs	r3, #15
   2c280:	18fc      	adds	r4, r7, r3
   2c282:	687b      	ldr	r3, [r7, #4]
   2c284:	0018      	movs	r0, r3
   2c286:	4b31      	ldr	r3, [pc, #196]	; (2c34c <follow_path+0x134>)
   2c288:	4798      	blx	r3
   2c28a:	0003      	movs	r3, r0
   2c28c:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2c28e:	687b      	ldr	r3, [r7, #4]
   2c290:	699a      	ldr	r2, [r3, #24]
   2c292:	230e      	movs	r3, #14
   2c294:	18fb      	adds	r3, r7, r3
   2c296:	7ad2      	ldrb	r2, [r2, #11]
   2c298:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2c29a:	230f      	movs	r3, #15
   2c29c:	18fb      	adds	r3, r7, r3
   2c29e:	781b      	ldrb	r3, [r3, #0]
   2c2a0:	2b00      	cmp	r3, #0
   2c2a2:	d00f      	beq.n	2c2c4 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2c2a4:	230f      	movs	r3, #15
   2c2a6:	18fb      	adds	r3, r7, r3
   2c2a8:	781b      	ldrb	r3, [r3, #0]
   2c2aa:	2b04      	cmp	r3, #4
   2c2ac:	d13e      	bne.n	2c32c <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2c2ae:	230e      	movs	r3, #14
   2c2b0:	18fb      	adds	r3, r7, r3
   2c2b2:	781b      	ldrb	r3, [r3, #0]
   2c2b4:	2204      	movs	r2, #4
   2c2b6:	4013      	ands	r3, r2
   2c2b8:	d13a      	bne.n	2c330 <follow_path+0x118>
   2c2ba:	230f      	movs	r3, #15
   2c2bc:	18fb      	adds	r3, r7, r3
   2c2be:	2205      	movs	r2, #5
   2c2c0:	701a      	strb	r2, [r3, #0]
				}
				break;
   2c2c2:	e035      	b.n	2c330 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2c2c4:	230e      	movs	r3, #14
   2c2c6:	18fb      	adds	r3, r7, r3
   2c2c8:	781b      	ldrb	r3, [r3, #0]
   2c2ca:	2204      	movs	r2, #4
   2c2cc:	4013      	ands	r3, r2
   2c2ce:	d131      	bne.n	2c334 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2c2d0:	687b      	ldr	r3, [r7, #4]
   2c2d2:	695b      	ldr	r3, [r3, #20]
   2c2d4:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2c2d6:	68bb      	ldr	r3, [r7, #8]
   2c2d8:	330b      	adds	r3, #11
   2c2da:	781b      	ldrb	r3, [r3, #0]
   2c2dc:	001a      	movs	r2, r3
   2c2de:	2310      	movs	r3, #16
   2c2e0:	4013      	ands	r3, r2
   2c2e2:	d104      	bne.n	2c2ee <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2c2e4:	230f      	movs	r3, #15
   2c2e6:	18fb      	adds	r3, r7, r3
   2c2e8:	2205      	movs	r2, #5
   2c2ea:	701a      	strb	r2, [r3, #0]
   2c2ec:	e023      	b.n	2c336 <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2c2ee:	68bb      	ldr	r3, [r7, #8]
   2c2f0:	3315      	adds	r3, #21
   2c2f2:	781b      	ldrb	r3, [r3, #0]
   2c2f4:	021b      	lsls	r3, r3, #8
   2c2f6:	b21a      	sxth	r2, r3
   2c2f8:	68bb      	ldr	r3, [r7, #8]
   2c2fa:	3314      	adds	r3, #20
   2c2fc:	781b      	ldrb	r3, [r3, #0]
   2c2fe:	b21b      	sxth	r3, r3
   2c300:	4313      	orrs	r3, r2
   2c302:	b21b      	sxth	r3, r3
   2c304:	b29b      	uxth	r3, r3
   2c306:	041b      	lsls	r3, r3, #16
   2c308:	68ba      	ldr	r2, [r7, #8]
   2c30a:	321b      	adds	r2, #27
   2c30c:	7812      	ldrb	r2, [r2, #0]
   2c30e:	0212      	lsls	r2, r2, #8
   2c310:	b211      	sxth	r1, r2
   2c312:	68ba      	ldr	r2, [r7, #8]
   2c314:	321a      	adds	r2, #26
   2c316:	7812      	ldrb	r2, [r2, #0]
   2c318:	b212      	sxth	r2, r2
   2c31a:	430a      	orrs	r2, r1
   2c31c:	b212      	sxth	r2, r2
   2c31e:	b292      	uxth	r2, r2
   2c320:	431a      	orrs	r2, r3
   2c322:	687b      	ldr	r3, [r7, #4]
   2c324:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2c326:	e79b      	b.n	2c260 <follow_path+0x48>
			if (res != FR_OK) break;
   2c328:	46c0      	nop			; (mov r8, r8)
   2c32a:	e004      	b.n	2c336 <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2c32c:	46c0      	nop			; (mov r8, r8)
   2c32e:	e002      	b.n	2c336 <follow_path+0x11e>
				break;
   2c330:	46c0      	nop			; (mov r8, r8)
   2c332:	e000      	b.n	2c336 <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2c334:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2c336:	230f      	movs	r3, #15
   2c338:	18fb      	adds	r3, r7, r3
   2c33a:	781b      	ldrb	r3, [r3, #0]
}
   2c33c:	0018      	movs	r0, r3
   2c33e:	46bd      	mov	sp, r7
   2c340:	b005      	add	sp, #20
   2c342:	bd90      	pop	{r4, r7, pc}
   2c344:	0002b1e9 	.word	0x0002b1e9
   2c348:	0002bdd1 	.word	0x0002bdd1
   2c34c:	0002b86d 	.word	0x0002b86d

0002c350 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2c350:	b590      	push	{r4, r7, lr}
   2c352:	b083      	sub	sp, #12
   2c354:	af00      	add	r7, sp, #0
   2c356:	6078      	str	r0, [r7, #4]
   2c358:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2c35a:	687b      	ldr	r3, [r7, #4]
   2c35c:	7858      	ldrb	r0, [r3, #1]
   2c35e:	687b      	ldr	r3, [r7, #4]
   2c360:	3330      	adds	r3, #48	; 0x30
   2c362:	0019      	movs	r1, r3
   2c364:	683a      	ldr	r2, [r7, #0]
   2c366:	2301      	movs	r3, #1
   2c368:	4c2a      	ldr	r4, [pc, #168]	; (2c414 <check_fs+0xc4>)
   2c36a:	47a0      	blx	r4
   2c36c:	1e03      	subs	r3, r0, #0
   2c36e:	d001      	beq.n	2c374 <check_fs+0x24>
		return 3;
   2c370:	2303      	movs	r3, #3
   2c372:	e04b      	b.n	2c40c <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2c374:	687b      	ldr	r3, [r7, #4]
   2c376:	4a28      	ldr	r2, [pc, #160]	; (2c418 <check_fs+0xc8>)
   2c378:	4694      	mov	ip, r2
   2c37a:	4463      	add	r3, ip
   2c37c:	3301      	adds	r3, #1
   2c37e:	781b      	ldrb	r3, [r3, #0]
   2c380:	021b      	lsls	r3, r3, #8
   2c382:	b21a      	sxth	r2, r3
   2c384:	687b      	ldr	r3, [r7, #4]
   2c386:	4924      	ldr	r1, [pc, #144]	; (2c418 <check_fs+0xc8>)
   2c388:	5c5b      	ldrb	r3, [r3, r1]
   2c38a:	b21b      	sxth	r3, r3
   2c38c:	4313      	orrs	r3, r2
   2c38e:	b21b      	sxth	r3, r3
   2c390:	4a22      	ldr	r2, [pc, #136]	; (2c41c <check_fs+0xcc>)
   2c392:	4293      	cmp	r3, r2
   2c394:	d001      	beq.n	2c39a <check_fs+0x4a>
		return 2;
   2c396:	2302      	movs	r3, #2
   2c398:	e038      	b.n	2c40c <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2c39a:	687b      	ldr	r3, [r7, #4]
   2c39c:	3366      	adds	r3, #102	; 0x66
   2c39e:	3303      	adds	r3, #3
   2c3a0:	781b      	ldrb	r3, [r3, #0]
   2c3a2:	061a      	lsls	r2, r3, #24
   2c3a4:	687b      	ldr	r3, [r7, #4]
   2c3a6:	3366      	adds	r3, #102	; 0x66
   2c3a8:	3302      	adds	r3, #2
   2c3aa:	781b      	ldrb	r3, [r3, #0]
   2c3ac:	041b      	lsls	r3, r3, #16
   2c3ae:	4313      	orrs	r3, r2
   2c3b0:	687a      	ldr	r2, [r7, #4]
   2c3b2:	3266      	adds	r2, #102	; 0x66
   2c3b4:	3201      	adds	r2, #1
   2c3b6:	7812      	ldrb	r2, [r2, #0]
   2c3b8:	0212      	lsls	r2, r2, #8
   2c3ba:	4313      	orrs	r3, r2
   2c3bc:	687a      	ldr	r2, [r7, #4]
   2c3be:	2166      	movs	r1, #102	; 0x66
   2c3c0:	5c52      	ldrb	r2, [r2, r1]
   2c3c2:	4313      	orrs	r3, r2
   2c3c4:	021b      	lsls	r3, r3, #8
   2c3c6:	0a1b      	lsrs	r3, r3, #8
   2c3c8:	4a15      	ldr	r2, [pc, #84]	; (2c420 <check_fs+0xd0>)
   2c3ca:	4293      	cmp	r3, r2
   2c3cc:	d101      	bne.n	2c3d2 <check_fs+0x82>
		return 0;
   2c3ce:	2300      	movs	r3, #0
   2c3d0:	e01c      	b.n	2c40c <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2c3d2:	687b      	ldr	r3, [r7, #4]
   2c3d4:	3382      	adds	r3, #130	; 0x82
   2c3d6:	3303      	adds	r3, #3
   2c3d8:	781b      	ldrb	r3, [r3, #0]
   2c3da:	061a      	lsls	r2, r3, #24
   2c3dc:	687b      	ldr	r3, [r7, #4]
   2c3de:	3382      	adds	r3, #130	; 0x82
   2c3e0:	3302      	adds	r3, #2
   2c3e2:	781b      	ldrb	r3, [r3, #0]
   2c3e4:	041b      	lsls	r3, r3, #16
   2c3e6:	4313      	orrs	r3, r2
   2c3e8:	687a      	ldr	r2, [r7, #4]
   2c3ea:	3282      	adds	r2, #130	; 0x82
   2c3ec:	3201      	adds	r2, #1
   2c3ee:	7812      	ldrb	r2, [r2, #0]
   2c3f0:	0212      	lsls	r2, r2, #8
   2c3f2:	4313      	orrs	r3, r2
   2c3f4:	687a      	ldr	r2, [r7, #4]
   2c3f6:	2182      	movs	r1, #130	; 0x82
   2c3f8:	5c52      	ldrb	r2, [r2, r1]
   2c3fa:	4313      	orrs	r3, r2
   2c3fc:	021b      	lsls	r3, r3, #8
   2c3fe:	0a1b      	lsrs	r3, r3, #8
   2c400:	4a07      	ldr	r2, [pc, #28]	; (2c420 <check_fs+0xd0>)
   2c402:	4293      	cmp	r3, r2
   2c404:	d101      	bne.n	2c40a <check_fs+0xba>
		return 0;
   2c406:	2300      	movs	r3, #0
   2c408:	e000      	b.n	2c40c <check_fs+0xbc>

	return 1;
   2c40a:	2301      	movs	r3, #1
}
   2c40c:	0018      	movs	r0, r3
   2c40e:	46bd      	mov	sp, r7
   2c410:	b003      	add	sp, #12
   2c412:	bd90      	pop	{r4, r7, pc}
   2c414:	0002a5b9 	.word	0x0002a5b9
   2c418:	0000022e 	.word	0x0000022e
   2c41c:	ffffaa55 	.word	0xffffaa55
   2c420:	00544146 	.word	0x00544146

0002c424 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2c424:	b590      	push	{r4, r7, lr}
   2c426:	b093      	sub	sp, #76	; 0x4c
   2c428:	af00      	add	r7, sp, #0
   2c42a:	60f8      	str	r0, [r7, #12]
   2c42c:	60b9      	str	r1, [r7, #8]
   2c42e:	1dfb      	adds	r3, r7, #7
   2c430:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2c432:	68fb      	ldr	r3, [r7, #12]
   2c434:	681b      	ldr	r3, [r3, #0]
   2c436:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2c438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2c43a:	781b      	ldrb	r3, [r3, #0]
   2c43c:	3b30      	subs	r3, #48	; 0x30
   2c43e:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2c440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2c442:	2b09      	cmp	r3, #9
   2c444:	d80b      	bhi.n	2c45e <chk_mounted+0x3a>
   2c446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2c448:	3301      	adds	r3, #1
   2c44a:	781b      	ldrb	r3, [r3, #0]
   2c44c:	2b3a      	cmp	r3, #58	; 0x3a
   2c44e:	d106      	bne.n	2c45e <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2c450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2c452:	3302      	adds	r3, #2
   2c454:	62fb      	str	r3, [r7, #44]	; 0x2c
   2c456:	68fb      	ldr	r3, [r7, #12]
   2c458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2c45a:	601a      	str	r2, [r3, #0]
   2c45c:	e001      	b.n	2c462 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2c45e:	2300      	movs	r3, #0
   2c460:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2c462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2c464:	2b07      	cmp	r3, #7
   2c466:	d901      	bls.n	2c46c <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2c468:	230b      	movs	r3, #11
   2c46a:	e2af      	b.n	2c9cc <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2c46c:	4bc5      	ldr	r3, [pc, #788]	; (2c784 <chk_mounted+0x360>)
   2c46e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2c470:	0092      	lsls	r2, r2, #2
   2c472:	58d3      	ldr	r3, [r2, r3]
   2c474:	62bb      	str	r3, [r7, #40]	; 0x28
   2c476:	68bb      	ldr	r3, [r7, #8]
   2c478:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c47a:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2c47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c47e:	2b00      	cmp	r3, #0
   2c480:	d101      	bne.n	2c486 <chk_mounted+0x62>
   2c482:	230c      	movs	r3, #12
   2c484:	e2a2      	b.n	2c9cc <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2c486:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c488:	781b      	ldrb	r3, [r3, #0]
   2c48a:	2b00      	cmp	r3, #0
   2c48c:	d01c      	beq.n	2c4c8 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2c48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c490:	785b      	ldrb	r3, [r3, #1]
   2c492:	2227      	movs	r2, #39	; 0x27
   2c494:	18bc      	adds	r4, r7, r2
   2c496:	0018      	movs	r0, r3
   2c498:	4bbb      	ldr	r3, [pc, #748]	; (2c788 <chk_mounted+0x364>)
   2c49a:	4798      	blx	r3
   2c49c:	0003      	movs	r3, r0
   2c49e:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2c4a0:	2327      	movs	r3, #39	; 0x27
   2c4a2:	18fb      	adds	r3, r7, r3
   2c4a4:	781b      	ldrb	r3, [r3, #0]
   2c4a6:	2201      	movs	r2, #1
   2c4a8:	4013      	ands	r3, r2
   2c4aa:	d10d      	bne.n	2c4c8 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2c4ac:	1dfb      	adds	r3, r7, #7
   2c4ae:	781b      	ldrb	r3, [r3, #0]
   2c4b0:	2b00      	cmp	r3, #0
   2c4b2:	d007      	beq.n	2c4c4 <chk_mounted+0xa0>
   2c4b4:	2327      	movs	r3, #39	; 0x27
   2c4b6:	18fb      	adds	r3, r7, r3
   2c4b8:	781b      	ldrb	r3, [r3, #0]
   2c4ba:	2204      	movs	r2, #4
   2c4bc:	4013      	ands	r3, r2
   2c4be:	d001      	beq.n	2c4c4 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2c4c0:	230a      	movs	r3, #10
   2c4c2:	e283      	b.n	2c9cc <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2c4c4:	2300      	movs	r3, #0
   2c4c6:	e281      	b.n	2c9cc <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2c4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c4ca:	2200      	movs	r2, #0
   2c4cc:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2c4ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2c4d0:	b2da      	uxtb	r2, r3
   2c4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c4d4:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2c4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c4d8:	785b      	ldrb	r3, [r3, #1]
   2c4da:	2227      	movs	r2, #39	; 0x27
   2c4dc:	18bc      	adds	r4, r7, r2
   2c4de:	0018      	movs	r0, r3
   2c4e0:	4baa      	ldr	r3, [pc, #680]	; (2c78c <chk_mounted+0x368>)
   2c4e2:	4798      	blx	r3
   2c4e4:	0003      	movs	r3, r0
   2c4e6:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2c4e8:	2327      	movs	r3, #39	; 0x27
   2c4ea:	18fb      	adds	r3, r7, r3
   2c4ec:	781b      	ldrb	r3, [r3, #0]
   2c4ee:	2201      	movs	r2, #1
   2c4f0:	4013      	ands	r3, r2
   2c4f2:	d001      	beq.n	2c4f8 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2c4f4:	2303      	movs	r3, #3
   2c4f6:	e269      	b.n	2c9cc <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2c4f8:	1dfb      	adds	r3, r7, #7
   2c4fa:	781b      	ldrb	r3, [r3, #0]
   2c4fc:	2b00      	cmp	r3, #0
   2c4fe:	d007      	beq.n	2c510 <chk_mounted+0xec>
   2c500:	2327      	movs	r3, #39	; 0x27
   2c502:	18fb      	adds	r3, r7, r3
   2c504:	781b      	ldrb	r3, [r3, #0]
   2c506:	2204      	movs	r2, #4
   2c508:	4013      	ands	r3, r2
   2c50a:	d001      	beq.n	2c510 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2c50c:	230a      	movs	r3, #10
   2c50e:	e25d      	b.n	2c9cc <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2c510:	2300      	movs	r3, #0
   2c512:	63fb      	str	r3, [r7, #60]	; 0x3c
   2c514:	2347      	movs	r3, #71	; 0x47
   2c516:	18fc      	adds	r4, r7, r3
   2c518:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2c51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c51c:	0011      	movs	r1, r2
   2c51e:	0018      	movs	r0, r3
   2c520:	4b9b      	ldr	r3, [pc, #620]	; (2c790 <chk_mounted+0x36c>)
   2c522:	4798      	blx	r3
   2c524:	0003      	movs	r3, r0
   2c526:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2c528:	2347      	movs	r3, #71	; 0x47
   2c52a:	18fb      	adds	r3, r7, r3
   2c52c:	781b      	ldrb	r3, [r3, #0]
   2c52e:	2b01      	cmp	r3, #1
   2c530:	d13b      	bne.n	2c5aa <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2c532:	2346      	movs	r3, #70	; 0x46
   2c534:	18fb      	adds	r3, r7, r3
   2c536:	2200      	movs	r2, #0
   2c538:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2c53a:	2346      	movs	r3, #70	; 0x46
   2c53c:	18fb      	adds	r3, r7, r3
   2c53e:	781b      	ldrb	r3, [r3, #0]
   2c540:	2b00      	cmp	r3, #0
   2c542:	d006      	beq.n	2c552 <chk_mounted+0x12e>
   2c544:	2346      	movs	r3, #70	; 0x46
   2c546:	18fb      	adds	r3, r7, r3
   2c548:	781a      	ldrb	r2, [r3, #0]
   2c54a:	2346      	movs	r3, #70	; 0x46
   2c54c:	18fb      	adds	r3, r7, r3
   2c54e:	3a01      	subs	r2, #1
   2c550:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2c552:	2346      	movs	r3, #70	; 0x46
   2c554:	18fb      	adds	r3, r7, r3
   2c556:	781b      	ldrb	r3, [r3, #0]
   2c558:	011b      	lsls	r3, r3, #4
   2c55a:	33bf      	adds	r3, #191	; 0xbf
   2c55c:	33ff      	adds	r3, #255	; 0xff
   2c55e:	3330      	adds	r3, #48	; 0x30
   2c560:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c562:	18d3      	adds	r3, r2, r3
   2c564:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2c566:	6a3b      	ldr	r3, [r7, #32]
   2c568:	3304      	adds	r3, #4
   2c56a:	781b      	ldrb	r3, [r3, #0]
   2c56c:	2b00      	cmp	r3, #0
   2c56e:	d01c      	beq.n	2c5aa <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2c570:	6a3b      	ldr	r3, [r7, #32]
   2c572:	330b      	adds	r3, #11
   2c574:	781b      	ldrb	r3, [r3, #0]
   2c576:	061a      	lsls	r2, r3, #24
   2c578:	6a3b      	ldr	r3, [r7, #32]
   2c57a:	330a      	adds	r3, #10
   2c57c:	781b      	ldrb	r3, [r3, #0]
   2c57e:	041b      	lsls	r3, r3, #16
   2c580:	4313      	orrs	r3, r2
   2c582:	6a3a      	ldr	r2, [r7, #32]
   2c584:	3209      	adds	r2, #9
   2c586:	7812      	ldrb	r2, [r2, #0]
   2c588:	0212      	lsls	r2, r2, #8
   2c58a:	4313      	orrs	r3, r2
   2c58c:	6a3a      	ldr	r2, [r7, #32]
   2c58e:	3208      	adds	r2, #8
   2c590:	7812      	ldrb	r2, [r2, #0]
   2c592:	4313      	orrs	r3, r2
   2c594:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2c596:	2347      	movs	r3, #71	; 0x47
   2c598:	18fc      	adds	r4, r7, r3
   2c59a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2c59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c59e:	0011      	movs	r1, r2
   2c5a0:	0018      	movs	r0, r3
   2c5a2:	4b7b      	ldr	r3, [pc, #492]	; (2c790 <chk_mounted+0x36c>)
   2c5a4:	4798      	blx	r3
   2c5a6:	0003      	movs	r3, r0
   2c5a8:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2c5aa:	2347      	movs	r3, #71	; 0x47
   2c5ac:	18fb      	adds	r3, r7, r3
   2c5ae:	781b      	ldrb	r3, [r3, #0]
   2c5b0:	2b03      	cmp	r3, #3
   2c5b2:	d101      	bne.n	2c5b8 <chk_mounted+0x194>
   2c5b4:	2301      	movs	r3, #1
   2c5b6:	e209      	b.n	2c9cc <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2c5b8:	2347      	movs	r3, #71	; 0x47
   2c5ba:	18fb      	adds	r3, r7, r3
   2c5bc:	781b      	ldrb	r3, [r3, #0]
   2c5be:	2b00      	cmp	r3, #0
   2c5c0:	d001      	beq.n	2c5c6 <chk_mounted+0x1a2>
   2c5c2:	230d      	movs	r3, #13
   2c5c4:	e202      	b.n	2c9cc <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2c5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c5c8:	223c      	movs	r2, #60	; 0x3c
   2c5ca:	5c9b      	ldrb	r3, [r3, r2]
   2c5cc:	021b      	lsls	r3, r3, #8
   2c5ce:	b21a      	sxth	r2, r3
   2c5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c5d2:	213b      	movs	r1, #59	; 0x3b
   2c5d4:	5c5b      	ldrb	r3, [r3, r1]
   2c5d6:	b21b      	sxth	r3, r3
   2c5d8:	4313      	orrs	r3, r2
   2c5da:	b21a      	sxth	r2, r3
   2c5dc:	2380      	movs	r3, #128	; 0x80
   2c5de:	009b      	lsls	r3, r3, #2
   2c5e0:	429a      	cmp	r2, r3
   2c5e2:	d001      	beq.n	2c5e8 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2c5e4:	230d      	movs	r3, #13
   2c5e6:	e1f1      	b.n	2c9cc <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2c5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c5ea:	2247      	movs	r2, #71	; 0x47
   2c5ec:	5c9b      	ldrb	r3, [r3, r2]
   2c5ee:	021b      	lsls	r3, r3, #8
   2c5f0:	b21a      	sxth	r2, r3
   2c5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c5f4:	2146      	movs	r1, #70	; 0x46
   2c5f6:	5c5b      	ldrb	r3, [r3, r1]
   2c5f8:	b21b      	sxth	r3, r3
   2c5fa:	4313      	orrs	r3, r2
   2c5fc:	b21b      	sxth	r3, r3
   2c5fe:	b29b      	uxth	r3, r3
   2c600:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2c602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2c604:	2b00      	cmp	r3, #0
   2c606:	d112      	bne.n	2c62e <chk_mounted+0x20a>
   2c608:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c60a:	2257      	movs	r2, #87	; 0x57
   2c60c:	5c9b      	ldrb	r3, [r3, r2]
   2c60e:	061a      	lsls	r2, r3, #24
   2c610:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c612:	2156      	movs	r1, #86	; 0x56
   2c614:	5c5b      	ldrb	r3, [r3, r1]
   2c616:	041b      	lsls	r3, r3, #16
   2c618:	4313      	orrs	r3, r2
   2c61a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c61c:	2155      	movs	r1, #85	; 0x55
   2c61e:	5c52      	ldrb	r2, [r2, r1]
   2c620:	0212      	lsls	r2, r2, #8
   2c622:	4313      	orrs	r3, r2
   2c624:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c626:	2154      	movs	r1, #84	; 0x54
   2c628:	5c52      	ldrb	r2, [r2, r1]
   2c62a:	4313      	orrs	r3, r2
   2c62c:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2c62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c630:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2c632:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2c634:	231f      	movs	r3, #31
   2c636:	18fb      	adds	r3, r7, r3
   2c638:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c63a:	2140      	movs	r1, #64	; 0x40
   2c63c:	5c52      	ldrb	r2, [r2, r1]
   2c63e:	701a      	strb	r2, [r3, #0]
   2c640:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c642:	221f      	movs	r2, #31
   2c644:	18ba      	adds	r2, r7, r2
   2c646:	7812      	ldrb	r2, [r2, #0]
   2c648:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2c64a:	231f      	movs	r3, #31
   2c64c:	18fb      	adds	r3, r7, r3
   2c64e:	781b      	ldrb	r3, [r3, #0]
   2c650:	2b01      	cmp	r3, #1
   2c652:	d006      	beq.n	2c662 <chk_mounted+0x23e>
   2c654:	231f      	movs	r3, #31
   2c656:	18fb      	adds	r3, r7, r3
   2c658:	781b      	ldrb	r3, [r3, #0]
   2c65a:	2b02      	cmp	r3, #2
   2c65c:	d001      	beq.n	2c662 <chk_mounted+0x23e>
   2c65e:	230d      	movs	r3, #13
   2c660:	e1b4      	b.n	2c9cc <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2c662:	231f      	movs	r3, #31
   2c664:	18fb      	adds	r3, r7, r3
   2c666:	781a      	ldrb	r2, [r3, #0]
   2c668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2c66a:	4353      	muls	r3, r2
   2c66c:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2c66e:	231f      	movs	r3, #31
   2c670:	18fb      	adds	r3, r7, r3
   2c672:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c674:	213d      	movs	r1, #61	; 0x3d
   2c676:	5c52      	ldrb	r2, [r2, r1]
   2c678:	701a      	strb	r2, [r3, #0]
   2c67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c67c:	221f      	movs	r2, #31
   2c67e:	18ba      	adds	r2, r7, r2
   2c680:	7812      	ldrb	r2, [r2, #0]
   2c682:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2c684:	231f      	movs	r3, #31
   2c686:	18fb      	adds	r3, r7, r3
   2c688:	781b      	ldrb	r3, [r3, #0]
   2c68a:	2b00      	cmp	r3, #0
   2c68c:	d008      	beq.n	2c6a0 <chk_mounted+0x27c>
   2c68e:	231f      	movs	r3, #31
   2c690:	18fb      	adds	r3, r7, r3
   2c692:	781b      	ldrb	r3, [r3, #0]
   2c694:	221f      	movs	r2, #31
   2c696:	18ba      	adds	r2, r7, r2
   2c698:	7812      	ldrb	r2, [r2, #0]
   2c69a:	3a01      	subs	r2, #1
   2c69c:	4013      	ands	r3, r2
   2c69e:	d001      	beq.n	2c6a4 <chk_mounted+0x280>
   2c6a0:	230d      	movs	r3, #13
   2c6a2:	e193      	b.n	2c9cc <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2c6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c6a6:	2242      	movs	r2, #66	; 0x42
   2c6a8:	5c9b      	ldrb	r3, [r3, r2]
   2c6aa:	021b      	lsls	r3, r3, #8
   2c6ac:	b21a      	sxth	r2, r3
   2c6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c6b0:	2141      	movs	r1, #65	; 0x41
   2c6b2:	5c5b      	ldrb	r3, [r3, r1]
   2c6b4:	b21b      	sxth	r3, r3
   2c6b6:	4313      	orrs	r3, r2
   2c6b8:	b21b      	sxth	r3, r3
   2c6ba:	b29a      	uxth	r2, r3
   2c6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c6be:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2c6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c6c2:	891b      	ldrh	r3, [r3, #8]
   2c6c4:	220f      	movs	r2, #15
   2c6c6:	4013      	ands	r3, r2
   2c6c8:	b29b      	uxth	r3, r3
   2c6ca:	2b00      	cmp	r3, #0
   2c6cc:	d001      	beq.n	2c6d2 <chk_mounted+0x2ae>
   2c6ce:	230d      	movs	r3, #13
   2c6d0:	e17c      	b.n	2c9cc <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2c6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c6d4:	2244      	movs	r2, #68	; 0x44
   2c6d6:	5c9b      	ldrb	r3, [r3, r2]
   2c6d8:	021b      	lsls	r3, r3, #8
   2c6da:	b21a      	sxth	r2, r3
   2c6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c6de:	2143      	movs	r1, #67	; 0x43
   2c6e0:	5c5b      	ldrb	r3, [r3, r1]
   2c6e2:	b21b      	sxth	r3, r3
   2c6e4:	4313      	orrs	r3, r2
   2c6e6:	b21b      	sxth	r3, r3
   2c6e8:	b29b      	uxth	r3, r3
   2c6ea:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2c6ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2c6ee:	2b00      	cmp	r3, #0
   2c6f0:	d112      	bne.n	2c718 <chk_mounted+0x2f4>
   2c6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c6f4:	2253      	movs	r2, #83	; 0x53
   2c6f6:	5c9b      	ldrb	r3, [r3, r2]
   2c6f8:	061a      	lsls	r2, r3, #24
   2c6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c6fc:	2152      	movs	r1, #82	; 0x52
   2c6fe:	5c5b      	ldrb	r3, [r3, r1]
   2c700:	041b      	lsls	r3, r3, #16
   2c702:	4313      	orrs	r3, r2
   2c704:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c706:	2151      	movs	r1, #81	; 0x51
   2c708:	5c52      	ldrb	r2, [r2, r1]
   2c70a:	0212      	lsls	r2, r2, #8
   2c70c:	4313      	orrs	r3, r2
   2c70e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c710:	2150      	movs	r1, #80	; 0x50
   2c712:	5c52      	ldrb	r2, [r2, r1]
   2c714:	4313      	orrs	r3, r2
   2c716:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2c718:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c71a:	223f      	movs	r2, #63	; 0x3f
   2c71c:	5c9b      	ldrb	r3, [r3, r2]
   2c71e:	021b      	lsls	r3, r3, #8
   2c720:	b21a      	sxth	r2, r3
   2c722:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c724:	213e      	movs	r1, #62	; 0x3e
   2c726:	5c5b      	ldrb	r3, [r3, r1]
   2c728:	b21b      	sxth	r3, r3
   2c72a:	4313      	orrs	r3, r2
   2c72c:	b21a      	sxth	r2, r3
   2c72e:	231c      	movs	r3, #28
   2c730:	18fb      	adds	r3, r7, r3
   2c732:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2c734:	231c      	movs	r3, #28
   2c736:	18fb      	adds	r3, r7, r3
   2c738:	881b      	ldrh	r3, [r3, #0]
   2c73a:	2b00      	cmp	r3, #0
   2c73c:	d101      	bne.n	2c742 <chk_mounted+0x31e>
   2c73e:	230d      	movs	r3, #13
   2c740:	e144      	b.n	2c9cc <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2c742:	231c      	movs	r3, #28
   2c744:	18fb      	adds	r3, r7, r3
   2c746:	881a      	ldrh	r2, [r3, #0]
   2c748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2c74a:	18d3      	adds	r3, r2, r3
   2c74c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c74e:	8912      	ldrh	r2, [r2, #8]
   2c750:	0912      	lsrs	r2, r2, #4
   2c752:	b292      	uxth	r2, r2
   2c754:	189b      	adds	r3, r3, r2
   2c756:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2c758:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2c75a:	69bb      	ldr	r3, [r7, #24]
   2c75c:	429a      	cmp	r2, r3
   2c75e:	d201      	bcs.n	2c764 <chk_mounted+0x340>
   2c760:	230d      	movs	r3, #13
   2c762:	e133      	b.n	2c9cc <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2c764:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2c766:	69bb      	ldr	r3, [r7, #24]
   2c768:	1ad2      	subs	r2, r2, r3
   2c76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c76c:	789b      	ldrb	r3, [r3, #2]
   2c76e:	0019      	movs	r1, r3
   2c770:	4b08      	ldr	r3, [pc, #32]	; (2c794 <chk_mounted+0x370>)
   2c772:	0010      	movs	r0, r2
   2c774:	4798      	blx	r3
   2c776:	0003      	movs	r3, r0
   2c778:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2c77a:	697b      	ldr	r3, [r7, #20]
   2c77c:	2b00      	cmp	r3, #0
   2c77e:	d10b      	bne.n	2c798 <chk_mounted+0x374>
   2c780:	230d      	movs	r3, #13
   2c782:	e123      	b.n	2c9cc <chk_mounted+0x5a8>
   2c784:	200042c4 	.word	0x200042c4
   2c788:	0002a581 	.word	0x0002a581
   2c78c:	0002a4fd 	.word	0x0002a4fd
   2c790:	0002c351 	.word	0x0002c351
   2c794:	00031ac5 	.word	0x00031ac5
	fmt = FS_FAT12;
   2c798:	2347      	movs	r3, #71	; 0x47
   2c79a:	18fb      	adds	r3, r7, r3
   2c79c:	2201      	movs	r2, #1
   2c79e:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2c7a0:	697b      	ldr	r3, [r7, #20]
   2c7a2:	4a8c      	ldr	r2, [pc, #560]	; (2c9d4 <chk_mounted+0x5b0>)
   2c7a4:	4293      	cmp	r3, r2
   2c7a6:	d903      	bls.n	2c7b0 <chk_mounted+0x38c>
   2c7a8:	2347      	movs	r3, #71	; 0x47
   2c7aa:	18fb      	adds	r3, r7, r3
   2c7ac:	2202      	movs	r2, #2
   2c7ae:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2c7b0:	697b      	ldr	r3, [r7, #20]
   2c7b2:	4a89      	ldr	r2, [pc, #548]	; (2c9d8 <chk_mounted+0x5b4>)
   2c7b4:	4293      	cmp	r3, r2
   2c7b6:	d903      	bls.n	2c7c0 <chk_mounted+0x39c>
   2c7b8:	2347      	movs	r3, #71	; 0x47
   2c7ba:	18fb      	adds	r3, r7, r3
   2c7bc:	2203      	movs	r2, #3
   2c7be:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2c7c0:	697b      	ldr	r3, [r7, #20]
   2c7c2:	1c9a      	adds	r2, r3, #2
   2c7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c7c6:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2c7c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2c7ca:	69bb      	ldr	r3, [r7, #24]
   2c7cc:	18d2      	adds	r2, r2, r3
   2c7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c7d0:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2c7d2:	231c      	movs	r3, #28
   2c7d4:	18fb      	adds	r3, r7, r3
   2c7d6:	881a      	ldrh	r2, [r3, #0]
   2c7d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2c7da:	18d2      	adds	r2, r2, r3
   2c7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c7de:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2c7e0:	2347      	movs	r3, #71	; 0x47
   2c7e2:	18fb      	adds	r3, r7, r3
   2c7e4:	781b      	ldrb	r3, [r3, #0]
   2c7e6:	2b03      	cmp	r3, #3
   2c7e8:	d11e      	bne.n	2c828 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2c7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c7ec:	891b      	ldrh	r3, [r3, #8]
   2c7ee:	2b00      	cmp	r3, #0
   2c7f0:	d001      	beq.n	2c7f6 <chk_mounted+0x3d2>
   2c7f2:	230d      	movs	r3, #13
   2c7f4:	e0ea      	b.n	2c9cc <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2c7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c7f8:	225f      	movs	r2, #95	; 0x5f
   2c7fa:	5c9b      	ldrb	r3, [r3, r2]
   2c7fc:	061a      	lsls	r2, r3, #24
   2c7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c800:	215e      	movs	r1, #94	; 0x5e
   2c802:	5c5b      	ldrb	r3, [r3, r1]
   2c804:	041b      	lsls	r3, r3, #16
   2c806:	4313      	orrs	r3, r2
   2c808:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c80a:	215d      	movs	r1, #93	; 0x5d
   2c80c:	5c52      	ldrb	r2, [r2, r1]
   2c80e:	0212      	lsls	r2, r2, #8
   2c810:	4313      	orrs	r3, r2
   2c812:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c814:	215c      	movs	r1, #92	; 0x5c
   2c816:	5c52      	ldrb	r2, [r2, r1]
   2c818:	431a      	orrs	r2, r3
   2c81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c81c:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2c81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c820:	699b      	ldr	r3, [r3, #24]
   2c822:	009b      	lsls	r3, r3, #2
   2c824:	633b      	str	r3, [r7, #48]	; 0x30
   2c826:	e020      	b.n	2c86a <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2c828:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c82a:	891b      	ldrh	r3, [r3, #8]
   2c82c:	2b00      	cmp	r3, #0
   2c82e:	d101      	bne.n	2c834 <chk_mounted+0x410>
   2c830:	230d      	movs	r3, #13
   2c832:	e0cb      	b.n	2c9cc <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2c834:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c836:	6a1a      	ldr	r2, [r3, #32]
   2c838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2c83a:	18d2      	adds	r2, r2, r3
   2c83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c83e:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2c840:	2347      	movs	r3, #71	; 0x47
   2c842:	18fb      	adds	r3, r7, r3
   2c844:	781b      	ldrb	r3, [r3, #0]
   2c846:	2b02      	cmp	r3, #2
   2c848:	d103      	bne.n	2c852 <chk_mounted+0x42e>
   2c84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c84c:	699b      	ldr	r3, [r3, #24]
   2c84e:	005b      	lsls	r3, r3, #1
   2c850:	e00a      	b.n	2c868 <chk_mounted+0x444>
   2c852:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c854:	699a      	ldr	r2, [r3, #24]
   2c856:	0013      	movs	r3, r2
   2c858:	005b      	lsls	r3, r3, #1
   2c85a:	189b      	adds	r3, r3, r2
   2c85c:	085a      	lsrs	r2, r3, #1
   2c85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c860:	699b      	ldr	r3, [r3, #24]
   2c862:	2101      	movs	r1, #1
   2c864:	400b      	ands	r3, r1
   2c866:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2c868:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2c86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c86c:	69da      	ldr	r2, [r3, #28]
   2c86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2c870:	495a      	ldr	r1, [pc, #360]	; (2c9dc <chk_mounted+0x5b8>)
   2c872:	468c      	mov	ip, r1
   2c874:	4463      	add	r3, ip
   2c876:	0a5b      	lsrs	r3, r3, #9
   2c878:	429a      	cmp	r2, r3
   2c87a:	d201      	bcs.n	2c880 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2c87c:	230d      	movs	r3, #13
   2c87e:	e0a5      	b.n	2c9cc <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2c880:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c882:	2201      	movs	r2, #1
   2c884:	4252      	negs	r2, r2
   2c886:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2c888:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c88a:	2200      	movs	r2, #0
   2c88c:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2c88e:	2347      	movs	r3, #71	; 0x47
   2c890:	18fb      	adds	r3, r7, r3
   2c892:	781b      	ldrb	r3, [r3, #0]
   2c894:	2b03      	cmp	r3, #3
   2c896:	d000      	beq.n	2c89a <chk_mounted+0x476>
   2c898:	e082      	b.n	2c9a0 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2c89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c89c:	2200      	movs	r2, #0
   2c89e:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2c8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8a2:	2261      	movs	r2, #97	; 0x61
   2c8a4:	5c9b      	ldrb	r3, [r3, r2]
   2c8a6:	021b      	lsls	r3, r3, #8
   2c8a8:	b21a      	sxth	r2, r3
   2c8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8ac:	2160      	movs	r1, #96	; 0x60
   2c8ae:	5c5b      	ldrb	r3, [r3, r1]
   2c8b0:	b21b      	sxth	r3, r3
   2c8b2:	4313      	orrs	r3, r2
   2c8b4:	b21b      	sxth	r3, r3
   2c8b6:	b29b      	uxth	r3, r3
   2c8b8:	001a      	movs	r2, r3
   2c8ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2c8bc:	18d2      	adds	r2, r2, r3
   2c8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8c0:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2c8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8c4:	7858      	ldrb	r0, [r3, #1]
   2c8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8c8:	3330      	adds	r3, #48	; 0x30
   2c8ca:	0019      	movs	r1, r3
   2c8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8ce:	695a      	ldr	r2, [r3, #20]
   2c8d0:	2301      	movs	r3, #1
   2c8d2:	4c43      	ldr	r4, [pc, #268]	; (2c9e0 <chk_mounted+0x5bc>)
   2c8d4:	47a0      	blx	r4
   2c8d6:	1e03      	subs	r3, r0, #0
   2c8d8:	d162      	bne.n	2c9a0 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2c8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8dc:	4a41      	ldr	r2, [pc, #260]	; (2c9e4 <chk_mounted+0x5c0>)
   2c8de:	5c9b      	ldrb	r3, [r3, r2]
   2c8e0:	021b      	lsls	r3, r3, #8
   2c8e2:	b21a      	sxth	r2, r3
   2c8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8e6:	4940      	ldr	r1, [pc, #256]	; (2c9e8 <chk_mounted+0x5c4>)
   2c8e8:	5c5b      	ldrb	r3, [r3, r1]
   2c8ea:	b21b      	sxth	r3, r3
   2c8ec:	4313      	orrs	r3, r2
   2c8ee:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2c8f0:	4a3e      	ldr	r2, [pc, #248]	; (2c9ec <chk_mounted+0x5c8>)
   2c8f2:	4293      	cmp	r3, r2
   2c8f4:	d154      	bne.n	2c9a0 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2c8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8f8:	2233      	movs	r2, #51	; 0x33
   2c8fa:	5c9b      	ldrb	r3, [r3, r2]
   2c8fc:	061a      	lsls	r2, r3, #24
   2c8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c900:	2132      	movs	r1, #50	; 0x32
   2c902:	5c5b      	ldrb	r3, [r3, r1]
   2c904:	041b      	lsls	r3, r3, #16
   2c906:	4313      	orrs	r3, r2
   2c908:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c90a:	2131      	movs	r1, #49	; 0x31
   2c90c:	5c52      	ldrb	r2, [r2, r1]
   2c90e:	0212      	lsls	r2, r2, #8
   2c910:	4313      	orrs	r3, r2
   2c912:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c914:	2130      	movs	r1, #48	; 0x30
   2c916:	5c52      	ldrb	r2, [r2, r1]
   2c918:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2c91a:	4a35      	ldr	r2, [pc, #212]	; (2c9f0 <chk_mounted+0x5cc>)
   2c91c:	4293      	cmp	r3, r2
   2c91e:	d13f      	bne.n	2c9a0 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2c920:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c922:	4a34      	ldr	r2, [pc, #208]	; (2c9f4 <chk_mounted+0x5d0>)
   2c924:	5c9b      	ldrb	r3, [r3, r2]
   2c926:	061a      	lsls	r2, r3, #24
   2c928:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c92a:	4933      	ldr	r1, [pc, #204]	; (2c9f8 <chk_mounted+0x5d4>)
   2c92c:	5c5b      	ldrb	r3, [r3, r1]
   2c92e:	041b      	lsls	r3, r3, #16
   2c930:	4313      	orrs	r3, r2
   2c932:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c934:	4931      	ldr	r1, [pc, #196]	; (2c9fc <chk_mounted+0x5d8>)
   2c936:	5c52      	ldrb	r2, [r2, r1]
   2c938:	0212      	lsls	r2, r2, #8
   2c93a:	4313      	orrs	r3, r2
   2c93c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2c93e:	2285      	movs	r2, #133	; 0x85
   2c940:	0092      	lsls	r2, r2, #2
   2c942:	5c8a      	ldrb	r2, [r1, r2]
   2c944:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2c946:	4a2e      	ldr	r2, [pc, #184]	; (2ca00 <chk_mounted+0x5dc>)
   2c948:	4293      	cmp	r3, r2
   2c94a:	d129      	bne.n	2c9a0 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2c94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c94e:	4a2d      	ldr	r2, [pc, #180]	; (2ca04 <chk_mounted+0x5e0>)
   2c950:	5c9b      	ldrb	r3, [r3, r2]
   2c952:	061a      	lsls	r2, r3, #24
   2c954:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c956:	492c      	ldr	r1, [pc, #176]	; (2ca08 <chk_mounted+0x5e4>)
   2c958:	5c5b      	ldrb	r3, [r3, r1]
   2c95a:	041b      	lsls	r3, r3, #16
   2c95c:	4313      	orrs	r3, r2
   2c95e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c960:	492a      	ldr	r1, [pc, #168]	; (2ca0c <chk_mounted+0x5e8>)
   2c962:	5c52      	ldrb	r2, [r2, r1]
   2c964:	0212      	lsls	r2, r2, #8
   2c966:	4313      	orrs	r3, r2
   2c968:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2c96a:	2287      	movs	r2, #135	; 0x87
   2c96c:	0092      	lsls	r2, r2, #2
   2c96e:	5c8a      	ldrb	r2, [r1, r2]
   2c970:	431a      	orrs	r2, r3
   2c972:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c974:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2c976:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c978:	4a25      	ldr	r2, [pc, #148]	; (2ca10 <chk_mounted+0x5ec>)
   2c97a:	5c9b      	ldrb	r3, [r3, r2]
   2c97c:	061a      	lsls	r2, r3, #24
   2c97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c980:	4924      	ldr	r1, [pc, #144]	; (2ca14 <chk_mounted+0x5f0>)
   2c982:	5c5b      	ldrb	r3, [r3, r1]
   2c984:	041b      	lsls	r3, r3, #16
   2c986:	4313      	orrs	r3, r2
   2c988:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c98a:	4923      	ldr	r1, [pc, #140]	; (2ca18 <chk_mounted+0x5f4>)
   2c98c:	5c52      	ldrb	r2, [r2, r1]
   2c98e:	0212      	lsls	r2, r2, #8
   2c990:	4313      	orrs	r3, r2
   2c992:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2c994:	2286      	movs	r2, #134	; 0x86
   2c996:	0092      	lsls	r2, r2, #2
   2c998:	5c8a      	ldrb	r2, [r1, r2]
   2c99a:	431a      	orrs	r2, r3
   2c99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c99e:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2c9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c9a2:	2247      	movs	r2, #71	; 0x47
   2c9a4:	18ba      	adds	r2, r7, r2
   2c9a6:	7812      	ldrb	r2, [r2, #0]
   2c9a8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2c9aa:	4b1c      	ldr	r3, [pc, #112]	; (2ca1c <chk_mounted+0x5f8>)
   2c9ac:	881b      	ldrh	r3, [r3, #0]
   2c9ae:	3301      	adds	r3, #1
   2c9b0:	b29a      	uxth	r2, r3
   2c9b2:	4b1a      	ldr	r3, [pc, #104]	; (2ca1c <chk_mounted+0x5f8>)
   2c9b4:	801a      	strh	r2, [r3, #0]
   2c9b6:	4b19      	ldr	r3, [pc, #100]	; (2ca1c <chk_mounted+0x5f8>)
   2c9b8:	881a      	ldrh	r2, [r3, #0]
   2c9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c9bc:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2c9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c9c0:	2200      	movs	r2, #0
   2c9c2:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2c9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c9c6:	2200      	movs	r2, #0
   2c9c8:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2c9ca:	2300      	movs	r3, #0
}
   2c9cc:	0018      	movs	r0, r3
   2c9ce:	46bd      	mov	sp, r7
   2c9d0:	b013      	add	sp, #76	; 0x4c
   2c9d2:	bd90      	pop	{r4, r7, pc}
   2c9d4:	00000ff5 	.word	0x00000ff5
   2c9d8:	0000fff5 	.word	0x0000fff5
   2c9dc:	000001ff 	.word	0x000001ff
   2c9e0:	0002a5b9 	.word	0x0002a5b9
   2c9e4:	0000022f 	.word	0x0000022f
   2c9e8:	0000022e 	.word	0x0000022e
   2c9ec:	ffffaa55 	.word	0xffffaa55
   2c9f0:	41615252 	.word	0x41615252
   2c9f4:	00000217 	.word	0x00000217
   2c9f8:	00000216 	.word	0x00000216
   2c9fc:	00000215 	.word	0x00000215
   2ca00:	61417272 	.word	0x61417272
   2ca04:	0000021f 	.word	0x0000021f
   2ca08:	0000021e 	.word	0x0000021e
   2ca0c:	0000021d 	.word	0x0000021d
   2ca10:	0000021b 	.word	0x0000021b
   2ca14:	0000021a 	.word	0x0000021a
   2ca18:	00000219 	.word	0x00000219
   2ca1c:	200042e4 	.word	0x200042e4

0002ca20 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2ca20:	b580      	push	{r7, lr}
   2ca22:	b082      	sub	sp, #8
   2ca24:	af00      	add	r7, sp, #0
   2ca26:	6078      	str	r0, [r7, #4]
   2ca28:	000a      	movs	r2, r1
   2ca2a:	1cbb      	adds	r3, r7, #2
   2ca2c:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2ca2e:	687b      	ldr	r3, [r7, #4]
   2ca30:	2b00      	cmp	r3, #0
   2ca32:	d009      	beq.n	2ca48 <validate+0x28>
   2ca34:	687b      	ldr	r3, [r7, #4]
   2ca36:	781b      	ldrb	r3, [r3, #0]
   2ca38:	2b00      	cmp	r3, #0
   2ca3a:	d005      	beq.n	2ca48 <validate+0x28>
   2ca3c:	687b      	ldr	r3, [r7, #4]
   2ca3e:	88db      	ldrh	r3, [r3, #6]
   2ca40:	1cba      	adds	r2, r7, #2
   2ca42:	8812      	ldrh	r2, [r2, #0]
   2ca44:	429a      	cmp	r2, r3
   2ca46:	d001      	beq.n	2ca4c <validate+0x2c>
		return FR_INVALID_OBJECT;
   2ca48:	2309      	movs	r3, #9
   2ca4a:	e00c      	b.n	2ca66 <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2ca4c:	687b      	ldr	r3, [r7, #4]
   2ca4e:	785b      	ldrb	r3, [r3, #1]
   2ca50:	0018      	movs	r0, r3
   2ca52:	4b07      	ldr	r3, [pc, #28]	; (2ca70 <validate+0x50>)
   2ca54:	4798      	blx	r3
   2ca56:	0003      	movs	r3, r0
   2ca58:	001a      	movs	r2, r3
   2ca5a:	2301      	movs	r3, #1
   2ca5c:	4013      	ands	r3, r2
   2ca5e:	d001      	beq.n	2ca64 <validate+0x44>
		return FR_NOT_READY;
   2ca60:	2303      	movs	r3, #3
   2ca62:	e000      	b.n	2ca66 <validate+0x46>

	return FR_OK;
   2ca64:	2300      	movs	r3, #0
}
   2ca66:	0018      	movs	r0, r3
   2ca68:	46bd      	mov	sp, r7
   2ca6a:	b002      	add	sp, #8
   2ca6c:	bd80      	pop	{r7, pc}
   2ca6e:	46c0      	nop			; (mov r8, r8)
   2ca70:	0002a581 	.word	0x0002a581

0002ca74 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   2ca74:	b580      	push	{r7, lr}
   2ca76:	b084      	sub	sp, #16
   2ca78:	af00      	add	r7, sp, #0
   2ca7a:	0002      	movs	r2, r0
   2ca7c:	6039      	str	r1, [r7, #0]
   2ca7e:	1dfb      	adds	r3, r7, #7
   2ca80:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   2ca82:	1dfb      	adds	r3, r7, #7
   2ca84:	781b      	ldrb	r3, [r3, #0]
   2ca86:	2b07      	cmp	r3, #7
   2ca88:	d901      	bls.n	2ca8e <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   2ca8a:	230b      	movs	r3, #11
   2ca8c:	e018      	b.n	2cac0 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   2ca8e:	1dfb      	adds	r3, r7, #7
   2ca90:	781a      	ldrb	r2, [r3, #0]
   2ca92:	4b0d      	ldr	r3, [pc, #52]	; (2cac8 <f_mount+0x54>)
   2ca94:	0092      	lsls	r2, r2, #2
   2ca96:	58d3      	ldr	r3, [r2, r3]
   2ca98:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   2ca9a:	68fb      	ldr	r3, [r7, #12]
   2ca9c:	2b00      	cmp	r3, #0
   2ca9e:	d002      	beq.n	2caa6 <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   2caa0:	68fb      	ldr	r3, [r7, #12]
   2caa2:	2200      	movs	r2, #0
   2caa4:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   2caa6:	683b      	ldr	r3, [r7, #0]
   2caa8:	2b00      	cmp	r3, #0
   2caaa:	d002      	beq.n	2cab2 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   2caac:	683b      	ldr	r3, [r7, #0]
   2caae:	2200      	movs	r2, #0
   2cab0:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   2cab2:	1dfb      	adds	r3, r7, #7
   2cab4:	781a      	ldrb	r2, [r3, #0]
   2cab6:	4b04      	ldr	r3, [pc, #16]	; (2cac8 <f_mount+0x54>)
   2cab8:	0092      	lsls	r2, r2, #2
   2caba:	6839      	ldr	r1, [r7, #0]
   2cabc:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   2cabe:	2300      	movs	r3, #0
}
   2cac0:	0018      	movs	r0, r3
   2cac2:	46bd      	mov	sp, r7
   2cac4:	b004      	add	sp, #16
   2cac6:	bd80      	pop	{r7, pc}
   2cac8:	200042c4 	.word	0x200042c4

0002cacc <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2cacc:	b590      	push	{r4, r7, lr}
   2cace:	4ce5      	ldr	r4, [pc, #916]	; (2ce64 <f_open+0x398>)
   2cad0:	44a5      	add	sp, r4
   2cad2:	af00      	add	r7, sp, #0
   2cad4:	60f8      	str	r0, [r7, #12]
   2cad6:	60b9      	str	r1, [r7, #8]
   2cad8:	4be3      	ldr	r3, [pc, #908]	; (2ce68 <f_open+0x39c>)
   2cada:	2194      	movs	r1, #148	; 0x94
   2cadc:	0089      	lsls	r1, r1, #2
   2cade:	468c      	mov	ip, r1
   2cae0:	44bc      	add	ip, r7
   2cae2:	4463      	add	r3, ip
   2cae4:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2cae6:	68fb      	ldr	r3, [r7, #12]
   2cae8:	2200      	movs	r2, #0
   2caea:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2caec:	4bde      	ldr	r3, [pc, #888]	; (2ce68 <f_open+0x39c>)
   2caee:	2294      	movs	r2, #148	; 0x94
   2caf0:	0092      	lsls	r2, r2, #2
   2caf2:	4694      	mov	ip, r2
   2caf4:	44bc      	add	ip, r7
   2caf6:	4463      	add	r3, ip
   2caf8:	4adb      	ldr	r2, [pc, #876]	; (2ce68 <f_open+0x39c>)
   2cafa:	2194      	movs	r1, #148	; 0x94
   2cafc:	0089      	lsls	r1, r1, #2
   2cafe:	468c      	mov	ip, r1
   2cb00:	44bc      	add	ip, r7
   2cb02:	4462      	add	r2, ip
   2cb04:	7812      	ldrb	r2, [r2, #0]
   2cb06:	211f      	movs	r1, #31
   2cb08:	400a      	ands	r2, r1
   2cb0a:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2cb0c:	4bd6      	ldr	r3, [pc, #856]	; (2ce68 <f_open+0x39c>)
   2cb0e:	2294      	movs	r2, #148	; 0x94
   2cb10:	0092      	lsls	r2, r2, #2
   2cb12:	4694      	mov	ip, r2
   2cb14:	44bc      	add	ip, r7
   2cb16:	4463      	add	r3, ip
   2cb18:	781b      	ldrb	r3, [r3, #0]
   2cb1a:	2201      	movs	r2, #1
   2cb1c:	4393      	bics	r3, r2
   2cb1e:	b2da      	uxtb	r2, r3
   2cb20:	4bd2      	ldr	r3, [pc, #840]	; (2ce6c <f_open+0x3a0>)
   2cb22:	18fc      	adds	r4, r7, r3
   2cb24:	2387      	movs	r3, #135	; 0x87
   2cb26:	009b      	lsls	r3, r3, #2
   2cb28:	18f9      	adds	r1, r7, r3
   2cb2a:	2308      	movs	r3, #8
   2cb2c:	18fb      	adds	r3, r7, r3
   2cb2e:	0018      	movs	r0, r3
   2cb30:	4bcf      	ldr	r3, [pc, #828]	; (2ce70 <f_open+0x3a4>)
   2cb32:	4798      	blx	r3
   2cb34:	0003      	movs	r3, r0
   2cb36:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2cb38:	2387      	movs	r3, #135	; 0x87
   2cb3a:	009b      	lsls	r3, r3, #2
   2cb3c:	18fb      	adds	r3, r7, r3
   2cb3e:	2284      	movs	r2, #132	; 0x84
   2cb40:	0092      	lsls	r2, r2, #2
   2cb42:	18ba      	adds	r2, r7, r2
   2cb44:	619a      	str	r2, [r3, #24]
   2cb46:	2387      	movs	r3, #135	; 0x87
   2cb48:	009b      	lsls	r3, r3, #2
   2cb4a:	18fb      	adds	r3, r7, r3
   2cb4c:	2210      	movs	r2, #16
   2cb4e:	18ba      	adds	r2, r7, r2
   2cb50:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2cb52:	4bc6      	ldr	r3, [pc, #792]	; (2ce6c <f_open+0x3a0>)
   2cb54:	18fb      	adds	r3, r7, r3
   2cb56:	781b      	ldrb	r3, [r3, #0]
   2cb58:	2b00      	cmp	r3, #0
   2cb5a:	d10b      	bne.n	2cb74 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2cb5c:	68ba      	ldr	r2, [r7, #8]
   2cb5e:	4bc3      	ldr	r3, [pc, #780]	; (2ce6c <f_open+0x3a0>)
   2cb60:	18fc      	adds	r4, r7, r3
   2cb62:	2387      	movs	r3, #135	; 0x87
   2cb64:	009b      	lsls	r3, r3, #2
   2cb66:	18fb      	adds	r3, r7, r3
   2cb68:	0011      	movs	r1, r2
   2cb6a:	0018      	movs	r0, r3
   2cb6c:	4bc1      	ldr	r3, [pc, #772]	; (2ce74 <f_open+0x3a8>)
   2cb6e:	4798      	blx	r3
   2cb70:	0003      	movs	r3, r0
   2cb72:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2cb74:	2387      	movs	r3, #135	; 0x87
   2cb76:	009b      	lsls	r3, r3, #2
   2cb78:	18fb      	adds	r3, r7, r3
   2cb7a:	695b      	ldr	r3, [r3, #20]
   2cb7c:	2292      	movs	r2, #146	; 0x92
   2cb7e:	0092      	lsls	r2, r2, #2
   2cb80:	18ba      	adds	r2, r7, r2
   2cb82:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2cb84:	4bb9      	ldr	r3, [pc, #740]	; (2ce6c <f_open+0x3a0>)
   2cb86:	18fb      	adds	r3, r7, r3
   2cb88:	781b      	ldrb	r3, [r3, #0]
   2cb8a:	2b00      	cmp	r3, #0
   2cb8c:	d109      	bne.n	2cba2 <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2cb8e:	2392      	movs	r3, #146	; 0x92
   2cb90:	009b      	lsls	r3, r3, #2
   2cb92:	18fb      	adds	r3, r7, r3
   2cb94:	681b      	ldr	r3, [r3, #0]
   2cb96:	2b00      	cmp	r3, #0
   2cb98:	d103      	bne.n	2cba2 <f_open+0xd6>
			res = FR_INVALID_NAME;
   2cb9a:	4bb4      	ldr	r3, [pc, #720]	; (2ce6c <f_open+0x3a0>)
   2cb9c:	18fb      	adds	r3, r7, r3
   2cb9e:	2206      	movs	r2, #6
   2cba0:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2cba2:	4bb1      	ldr	r3, [pc, #708]	; (2ce68 <f_open+0x39c>)
   2cba4:	2294      	movs	r2, #148	; 0x94
   2cba6:	0092      	lsls	r2, r2, #2
   2cba8:	4694      	mov	ip, r2
   2cbaa:	44bc      	add	ip, r7
   2cbac:	4463      	add	r3, ip
   2cbae:	781b      	ldrb	r3, [r3, #0]
   2cbb0:	221c      	movs	r2, #28
   2cbb2:	4013      	ands	r3, r2
   2cbb4:	d100      	bne.n	2cbb8 <f_open+0xec>
   2cbb6:	e141      	b.n	2ce3c <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2cbb8:	4bac      	ldr	r3, [pc, #688]	; (2ce6c <f_open+0x3a0>)
   2cbba:	18fb      	adds	r3, r7, r3
   2cbbc:	781b      	ldrb	r3, [r3, #0]
   2cbbe:	2b00      	cmp	r3, #0
   2cbc0:	d027      	beq.n	2cc12 <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2cbc2:	4baa      	ldr	r3, [pc, #680]	; (2ce6c <f_open+0x3a0>)
   2cbc4:	18fb      	adds	r3, r7, r3
   2cbc6:	781b      	ldrb	r3, [r3, #0]
   2cbc8:	2b04      	cmp	r3, #4
   2cbca:	d109      	bne.n	2cbe0 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2cbcc:	4ba7      	ldr	r3, [pc, #668]	; (2ce6c <f_open+0x3a0>)
   2cbce:	18fc      	adds	r4, r7, r3
   2cbd0:	2387      	movs	r3, #135	; 0x87
   2cbd2:	009b      	lsls	r3, r3, #2
   2cbd4:	18fb      	adds	r3, r7, r3
   2cbd6:	0018      	movs	r0, r3
   2cbd8:	4ba7      	ldr	r3, [pc, #668]	; (2ce78 <f_open+0x3ac>)
   2cbda:	4798      	blx	r3
   2cbdc:	0003      	movs	r3, r0
   2cbde:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2cbe0:	4ba1      	ldr	r3, [pc, #644]	; (2ce68 <f_open+0x39c>)
   2cbe2:	2294      	movs	r2, #148	; 0x94
   2cbe4:	0092      	lsls	r2, r2, #2
   2cbe6:	4694      	mov	ip, r2
   2cbe8:	44bc      	add	ip, r7
   2cbea:	4463      	add	r3, ip
   2cbec:	4a9e      	ldr	r2, [pc, #632]	; (2ce68 <f_open+0x39c>)
   2cbee:	2194      	movs	r1, #148	; 0x94
   2cbf0:	0089      	lsls	r1, r1, #2
   2cbf2:	468c      	mov	ip, r1
   2cbf4:	44bc      	add	ip, r7
   2cbf6:	4462      	add	r2, ip
   2cbf8:	7812      	ldrb	r2, [r2, #0]
   2cbfa:	2108      	movs	r1, #8
   2cbfc:	430a      	orrs	r2, r1
   2cbfe:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2cc00:	2387      	movs	r3, #135	; 0x87
   2cc02:	009b      	lsls	r3, r3, #2
   2cc04:	18fb      	adds	r3, r7, r3
   2cc06:	695b      	ldr	r3, [r3, #20]
   2cc08:	2292      	movs	r2, #146	; 0x92
   2cc0a:	0092      	lsls	r2, r2, #2
   2cc0c:	18ba      	adds	r2, r7, r2
   2cc0e:	6013      	str	r3, [r2, #0]
   2cc10:	e01c      	b.n	2cc4c <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2cc12:	2392      	movs	r3, #146	; 0x92
   2cc14:	009b      	lsls	r3, r3, #2
   2cc16:	18fb      	adds	r3, r7, r3
   2cc18:	681b      	ldr	r3, [r3, #0]
   2cc1a:	330b      	adds	r3, #11
   2cc1c:	781b      	ldrb	r3, [r3, #0]
   2cc1e:	001a      	movs	r2, r3
   2cc20:	2311      	movs	r3, #17
   2cc22:	4013      	ands	r3, r2
   2cc24:	d004      	beq.n	2cc30 <f_open+0x164>
				res = FR_DENIED;
   2cc26:	4b91      	ldr	r3, [pc, #580]	; (2ce6c <f_open+0x3a0>)
   2cc28:	18fb      	adds	r3, r7, r3
   2cc2a:	2207      	movs	r2, #7
   2cc2c:	701a      	strb	r2, [r3, #0]
   2cc2e:	e00d      	b.n	2cc4c <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2cc30:	4b8d      	ldr	r3, [pc, #564]	; (2ce68 <f_open+0x39c>)
   2cc32:	2294      	movs	r2, #148	; 0x94
   2cc34:	0092      	lsls	r2, r2, #2
   2cc36:	4694      	mov	ip, r2
   2cc38:	44bc      	add	ip, r7
   2cc3a:	4463      	add	r3, ip
   2cc3c:	781b      	ldrb	r3, [r3, #0]
   2cc3e:	2204      	movs	r2, #4
   2cc40:	4013      	ands	r3, r2
   2cc42:	d003      	beq.n	2cc4c <f_open+0x180>
					res = FR_EXIST;
   2cc44:	4b89      	ldr	r3, [pc, #548]	; (2ce6c <f_open+0x3a0>)
   2cc46:	18fb      	adds	r3, r7, r3
   2cc48:	2208      	movs	r2, #8
   2cc4a:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2cc4c:	4b87      	ldr	r3, [pc, #540]	; (2ce6c <f_open+0x3a0>)
   2cc4e:	18fb      	adds	r3, r7, r3
   2cc50:	781b      	ldrb	r3, [r3, #0]
   2cc52:	2b00      	cmp	r3, #0
   2cc54:	d000      	beq.n	2cc58 <f_open+0x18c>
   2cc56:	e12f      	b.n	2ceb8 <f_open+0x3ec>
   2cc58:	4b83      	ldr	r3, [pc, #524]	; (2ce68 <f_open+0x39c>)
   2cc5a:	2294      	movs	r2, #148	; 0x94
   2cc5c:	0092      	lsls	r2, r2, #2
   2cc5e:	4694      	mov	ip, r2
   2cc60:	44bc      	add	ip, r7
   2cc62:	4463      	add	r3, ip
   2cc64:	781b      	ldrb	r3, [r3, #0]
   2cc66:	2208      	movs	r2, #8
   2cc68:	4013      	ands	r3, r2
   2cc6a:	d100      	bne.n	2cc6e <f_open+0x1a2>
   2cc6c:	e124      	b.n	2ceb8 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2cc6e:	4b83      	ldr	r3, [pc, #524]	; (2ce7c <f_open+0x3b0>)
   2cc70:	4798      	blx	r3
   2cc72:	0003      	movs	r3, r0
   2cc74:	2291      	movs	r2, #145	; 0x91
   2cc76:	0092      	lsls	r2, r2, #2
   2cc78:	18ba      	adds	r2, r7, r2
   2cc7a:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2cc7c:	2392      	movs	r3, #146	; 0x92
   2cc7e:	009b      	lsls	r3, r3, #2
   2cc80:	18fb      	adds	r3, r7, r3
   2cc82:	681b      	ldr	r3, [r3, #0]
   2cc84:	330e      	adds	r3, #14
   2cc86:	2291      	movs	r2, #145	; 0x91
   2cc88:	0092      	lsls	r2, r2, #2
   2cc8a:	18ba      	adds	r2, r7, r2
   2cc8c:	6812      	ldr	r2, [r2, #0]
   2cc8e:	b2d2      	uxtb	r2, r2
   2cc90:	701a      	strb	r2, [r3, #0]
   2cc92:	2392      	movs	r3, #146	; 0x92
   2cc94:	009b      	lsls	r3, r3, #2
   2cc96:	18fb      	adds	r3, r7, r3
   2cc98:	681b      	ldr	r3, [r3, #0]
   2cc9a:	330f      	adds	r3, #15
   2cc9c:	2291      	movs	r2, #145	; 0x91
   2cc9e:	0092      	lsls	r2, r2, #2
   2cca0:	18ba      	adds	r2, r7, r2
   2cca2:	6812      	ldr	r2, [r2, #0]
   2cca4:	b292      	uxth	r2, r2
   2cca6:	0a12      	lsrs	r2, r2, #8
   2cca8:	b292      	uxth	r2, r2
   2ccaa:	b2d2      	uxtb	r2, r2
   2ccac:	701a      	strb	r2, [r3, #0]
   2ccae:	2392      	movs	r3, #146	; 0x92
   2ccb0:	009b      	lsls	r3, r3, #2
   2ccb2:	18fb      	adds	r3, r7, r3
   2ccb4:	681b      	ldr	r3, [r3, #0]
   2ccb6:	3310      	adds	r3, #16
   2ccb8:	2291      	movs	r2, #145	; 0x91
   2ccba:	0092      	lsls	r2, r2, #2
   2ccbc:	18ba      	adds	r2, r7, r2
   2ccbe:	6812      	ldr	r2, [r2, #0]
   2ccc0:	0c12      	lsrs	r2, r2, #16
   2ccc2:	b2d2      	uxtb	r2, r2
   2ccc4:	701a      	strb	r2, [r3, #0]
   2ccc6:	2392      	movs	r3, #146	; 0x92
   2ccc8:	009b      	lsls	r3, r3, #2
   2ccca:	18fb      	adds	r3, r7, r3
   2cccc:	681b      	ldr	r3, [r3, #0]
   2ccce:	3311      	adds	r3, #17
   2ccd0:	2291      	movs	r2, #145	; 0x91
   2ccd2:	0092      	lsls	r2, r2, #2
   2ccd4:	18ba      	adds	r2, r7, r2
   2ccd6:	6812      	ldr	r2, [r2, #0]
   2ccd8:	0e12      	lsrs	r2, r2, #24
   2ccda:	b2d2      	uxtb	r2, r2
   2ccdc:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2ccde:	2392      	movs	r3, #146	; 0x92
   2cce0:	009b      	lsls	r3, r3, #2
   2cce2:	18fb      	adds	r3, r7, r3
   2cce4:	681b      	ldr	r3, [r3, #0]
   2cce6:	330b      	adds	r3, #11
   2cce8:	2200      	movs	r2, #0
   2ccea:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2ccec:	2392      	movs	r3, #146	; 0x92
   2ccee:	009b      	lsls	r3, r3, #2
   2ccf0:	18fb      	adds	r3, r7, r3
   2ccf2:	681b      	ldr	r3, [r3, #0]
   2ccf4:	331c      	adds	r3, #28
   2ccf6:	2200      	movs	r2, #0
   2ccf8:	701a      	strb	r2, [r3, #0]
   2ccfa:	2392      	movs	r3, #146	; 0x92
   2ccfc:	009b      	lsls	r3, r3, #2
   2ccfe:	18fb      	adds	r3, r7, r3
   2cd00:	681b      	ldr	r3, [r3, #0]
   2cd02:	331d      	adds	r3, #29
   2cd04:	2200      	movs	r2, #0
   2cd06:	701a      	strb	r2, [r3, #0]
   2cd08:	2392      	movs	r3, #146	; 0x92
   2cd0a:	009b      	lsls	r3, r3, #2
   2cd0c:	18fb      	adds	r3, r7, r3
   2cd0e:	681b      	ldr	r3, [r3, #0]
   2cd10:	331e      	adds	r3, #30
   2cd12:	2200      	movs	r2, #0
   2cd14:	701a      	strb	r2, [r3, #0]
   2cd16:	2392      	movs	r3, #146	; 0x92
   2cd18:	009b      	lsls	r3, r3, #2
   2cd1a:	18fb      	adds	r3, r7, r3
   2cd1c:	681b      	ldr	r3, [r3, #0]
   2cd1e:	331f      	adds	r3, #31
   2cd20:	2200      	movs	r2, #0
   2cd22:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2cd24:	2392      	movs	r3, #146	; 0x92
   2cd26:	009b      	lsls	r3, r3, #2
   2cd28:	18fb      	adds	r3, r7, r3
   2cd2a:	681b      	ldr	r3, [r3, #0]
   2cd2c:	3315      	adds	r3, #21
   2cd2e:	781b      	ldrb	r3, [r3, #0]
   2cd30:	021b      	lsls	r3, r3, #8
   2cd32:	b21a      	sxth	r2, r3
   2cd34:	2392      	movs	r3, #146	; 0x92
   2cd36:	009b      	lsls	r3, r3, #2
   2cd38:	18fb      	adds	r3, r7, r3
   2cd3a:	681b      	ldr	r3, [r3, #0]
   2cd3c:	3314      	adds	r3, #20
   2cd3e:	781b      	ldrb	r3, [r3, #0]
   2cd40:	b21b      	sxth	r3, r3
   2cd42:	4313      	orrs	r3, r2
   2cd44:	b21b      	sxth	r3, r3
   2cd46:	b29b      	uxth	r3, r3
   2cd48:	041b      	lsls	r3, r3, #16
   2cd4a:	2292      	movs	r2, #146	; 0x92
   2cd4c:	0092      	lsls	r2, r2, #2
   2cd4e:	18ba      	adds	r2, r7, r2
   2cd50:	6812      	ldr	r2, [r2, #0]
   2cd52:	321b      	adds	r2, #27
   2cd54:	7812      	ldrb	r2, [r2, #0]
   2cd56:	0212      	lsls	r2, r2, #8
   2cd58:	b211      	sxth	r1, r2
   2cd5a:	2292      	movs	r2, #146	; 0x92
   2cd5c:	0092      	lsls	r2, r2, #2
   2cd5e:	18ba      	adds	r2, r7, r2
   2cd60:	6812      	ldr	r2, [r2, #0]
   2cd62:	321a      	adds	r2, #26
   2cd64:	7812      	ldrb	r2, [r2, #0]
   2cd66:	b212      	sxth	r2, r2
   2cd68:	430a      	orrs	r2, r1
   2cd6a:	b212      	sxth	r2, r2
   2cd6c:	b292      	uxth	r2, r2
   2cd6e:	4313      	orrs	r3, r2
   2cd70:	2290      	movs	r2, #144	; 0x90
   2cd72:	0092      	lsls	r2, r2, #2
   2cd74:	18ba      	adds	r2, r7, r2
   2cd76:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2cd78:	2392      	movs	r3, #146	; 0x92
   2cd7a:	009b      	lsls	r3, r3, #2
   2cd7c:	18fb      	adds	r3, r7, r3
   2cd7e:	681b      	ldr	r3, [r3, #0]
   2cd80:	331a      	adds	r3, #26
   2cd82:	2200      	movs	r2, #0
   2cd84:	701a      	strb	r2, [r3, #0]
   2cd86:	2392      	movs	r3, #146	; 0x92
   2cd88:	009b      	lsls	r3, r3, #2
   2cd8a:	18fb      	adds	r3, r7, r3
   2cd8c:	681b      	ldr	r3, [r3, #0]
   2cd8e:	331b      	adds	r3, #27
   2cd90:	2200      	movs	r2, #0
   2cd92:	701a      	strb	r2, [r3, #0]
   2cd94:	2392      	movs	r3, #146	; 0x92
   2cd96:	009b      	lsls	r3, r3, #2
   2cd98:	18fb      	adds	r3, r7, r3
   2cd9a:	681b      	ldr	r3, [r3, #0]
   2cd9c:	3314      	adds	r3, #20
   2cd9e:	2200      	movs	r2, #0
   2cda0:	701a      	strb	r2, [r3, #0]
   2cda2:	2392      	movs	r3, #146	; 0x92
   2cda4:	009b      	lsls	r3, r3, #2
   2cda6:	18fb      	adds	r3, r7, r3
   2cda8:	681b      	ldr	r3, [r3, #0]
   2cdaa:	3315      	adds	r3, #21
   2cdac:	2200      	movs	r2, #0
   2cdae:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2cdb0:	2387      	movs	r3, #135	; 0x87
   2cdb2:	009b      	lsls	r3, r3, #2
   2cdb4:	18fb      	adds	r3, r7, r3
   2cdb6:	681b      	ldr	r3, [r3, #0]
   2cdb8:	2201      	movs	r2, #1
   2cdba:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2cdbc:	2390      	movs	r3, #144	; 0x90
   2cdbe:	009b      	lsls	r3, r3, #2
   2cdc0:	18fb      	adds	r3, r7, r3
   2cdc2:	681b      	ldr	r3, [r3, #0]
   2cdc4:	2b00      	cmp	r3, #0
   2cdc6:	d100      	bne.n	2cdca <f_open+0x2fe>
   2cdc8:	e076      	b.n	2ceb8 <f_open+0x3ec>
				dw = dj.fs->winsect;
   2cdca:	2387      	movs	r3, #135	; 0x87
   2cdcc:	009b      	lsls	r3, r3, #2
   2cdce:	18fb      	adds	r3, r7, r3
   2cdd0:	681b      	ldr	r3, [r3, #0]
   2cdd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2cdd4:	2291      	movs	r2, #145	; 0x91
   2cdd6:	0092      	lsls	r2, r2, #2
   2cdd8:	18ba      	adds	r2, r7, r2
   2cdda:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2cddc:	2387      	movs	r3, #135	; 0x87
   2cdde:	009b      	lsls	r3, r3, #2
   2cde0:	18fb      	adds	r3, r7, r3
   2cde2:	681b      	ldr	r3, [r3, #0]
   2cde4:	4a21      	ldr	r2, [pc, #132]	; (2ce6c <f_open+0x3a0>)
   2cde6:	18bc      	adds	r4, r7, r2
   2cde8:	2290      	movs	r2, #144	; 0x90
   2cdea:	0092      	lsls	r2, r2, #2
   2cdec:	18ba      	adds	r2, r7, r2
   2cdee:	6812      	ldr	r2, [r2, #0]
   2cdf0:	0011      	movs	r1, r2
   2cdf2:	0018      	movs	r0, r3
   2cdf4:	4b22      	ldr	r3, [pc, #136]	; (2ce80 <f_open+0x3b4>)
   2cdf6:	4798      	blx	r3
   2cdf8:	0003      	movs	r3, r0
   2cdfa:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2cdfc:	4b1b      	ldr	r3, [pc, #108]	; (2ce6c <f_open+0x3a0>)
   2cdfe:	18fb      	adds	r3, r7, r3
   2ce00:	781b      	ldrb	r3, [r3, #0]
   2ce02:	2b00      	cmp	r3, #0
   2ce04:	d158      	bne.n	2ceb8 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2ce06:	2387      	movs	r3, #135	; 0x87
   2ce08:	009b      	lsls	r3, r3, #2
   2ce0a:	18fb      	adds	r3, r7, r3
   2ce0c:	681b      	ldr	r3, [r3, #0]
   2ce0e:	2290      	movs	r2, #144	; 0x90
   2ce10:	0092      	lsls	r2, r2, #2
   2ce12:	18ba      	adds	r2, r7, r2
   2ce14:	6812      	ldr	r2, [r2, #0]
   2ce16:	3a01      	subs	r2, #1
   2ce18:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2ce1a:	2387      	movs	r3, #135	; 0x87
   2ce1c:	009b      	lsls	r3, r3, #2
   2ce1e:	18fb      	adds	r3, r7, r3
   2ce20:	681b      	ldr	r3, [r3, #0]
   2ce22:	4a12      	ldr	r2, [pc, #72]	; (2ce6c <f_open+0x3a0>)
   2ce24:	18bc      	adds	r4, r7, r2
   2ce26:	2291      	movs	r2, #145	; 0x91
   2ce28:	0092      	lsls	r2, r2, #2
   2ce2a:	18ba      	adds	r2, r7, r2
   2ce2c:	6812      	ldr	r2, [r2, #0]
   2ce2e:	0011      	movs	r1, r2
   2ce30:	0018      	movs	r0, r3
   2ce32:	4b14      	ldr	r3, [pc, #80]	; (2ce84 <f_open+0x3b8>)
   2ce34:	4798      	blx	r3
   2ce36:	0003      	movs	r3, r0
   2ce38:	7023      	strb	r3, [r4, #0]
   2ce3a:	e03d      	b.n	2ceb8 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2ce3c:	4b0b      	ldr	r3, [pc, #44]	; (2ce6c <f_open+0x3a0>)
   2ce3e:	18fb      	adds	r3, r7, r3
   2ce40:	781b      	ldrb	r3, [r3, #0]
   2ce42:	2b00      	cmp	r3, #0
   2ce44:	d138      	bne.n	2ceb8 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2ce46:	2392      	movs	r3, #146	; 0x92
   2ce48:	009b      	lsls	r3, r3, #2
   2ce4a:	18fb      	adds	r3, r7, r3
   2ce4c:	681b      	ldr	r3, [r3, #0]
   2ce4e:	330b      	adds	r3, #11
   2ce50:	781b      	ldrb	r3, [r3, #0]
   2ce52:	001a      	movs	r2, r3
   2ce54:	2310      	movs	r3, #16
   2ce56:	4013      	ands	r3, r2
   2ce58:	d016      	beq.n	2ce88 <f_open+0x3bc>
				res = FR_NO_FILE;
   2ce5a:	4b04      	ldr	r3, [pc, #16]	; (2ce6c <f_open+0x3a0>)
   2ce5c:	18fb      	adds	r3, r7, r3
   2ce5e:	2204      	movs	r2, #4
   2ce60:	701a      	strb	r2, [r3, #0]
   2ce62:	e029      	b.n	2ceb8 <f_open+0x3ec>
   2ce64:	fffffdac 	.word	0xfffffdac
   2ce68:	fffffdb7 	.word	0xfffffdb7
   2ce6c:	0000024f 	.word	0x0000024f
   2ce70:	0002c425 	.word	0x0002c425
   2ce74:	0002c219 	.word	0x0002c219
   2ce78:	0002ba69 	.word	0x0002ba69
   2ce7c:	0002a861 	.word	0x0002a861
   2ce80:	0002afe5 	.word	0x0002afe5
   2ce84:	0002a9a5 	.word	0x0002a9a5
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2ce88:	4b5a      	ldr	r3, [pc, #360]	; (2cff4 <f_open+0x528>)
   2ce8a:	2294      	movs	r2, #148	; 0x94
   2ce8c:	0092      	lsls	r2, r2, #2
   2ce8e:	4694      	mov	ip, r2
   2ce90:	44bc      	add	ip, r7
   2ce92:	4463      	add	r3, ip
   2ce94:	781b      	ldrb	r3, [r3, #0]
   2ce96:	2202      	movs	r2, #2
   2ce98:	4013      	ands	r3, r2
   2ce9a:	d00d      	beq.n	2ceb8 <f_open+0x3ec>
   2ce9c:	2392      	movs	r3, #146	; 0x92
   2ce9e:	009b      	lsls	r3, r3, #2
   2cea0:	18fb      	adds	r3, r7, r3
   2cea2:	681b      	ldr	r3, [r3, #0]
   2cea4:	330b      	adds	r3, #11
   2cea6:	781b      	ldrb	r3, [r3, #0]
   2cea8:	001a      	movs	r2, r3
   2ceaa:	2301      	movs	r3, #1
   2ceac:	4013      	ands	r3, r2
   2ceae:	d003      	beq.n	2ceb8 <f_open+0x3ec>
					res = FR_DENIED;
   2ceb0:	4b51      	ldr	r3, [pc, #324]	; (2cff8 <f_open+0x52c>)
   2ceb2:	18fb      	adds	r3, r7, r3
   2ceb4:	2207      	movs	r2, #7
   2ceb6:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2ceb8:	4b4f      	ldr	r3, [pc, #316]	; (2cff8 <f_open+0x52c>)
   2ceba:	18fb      	adds	r3, r7, r3
   2cebc:	781b      	ldrb	r3, [r3, #0]
   2cebe:	2b00      	cmp	r3, #0
   2cec0:	d126      	bne.n	2cf10 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2cec2:	4b4c      	ldr	r3, [pc, #304]	; (2cff4 <f_open+0x528>)
   2cec4:	2294      	movs	r2, #148	; 0x94
   2cec6:	0092      	lsls	r2, r2, #2
   2cec8:	4694      	mov	ip, r2
   2ceca:	44bc      	add	ip, r7
   2cecc:	4463      	add	r3, ip
   2cece:	781b      	ldrb	r3, [r3, #0]
   2ced0:	2208      	movs	r2, #8
   2ced2:	4013      	ands	r3, r2
   2ced4:	d00f      	beq.n	2cef6 <f_open+0x42a>
			mode |= FA__WRITTEN;
   2ced6:	4b47      	ldr	r3, [pc, #284]	; (2cff4 <f_open+0x528>)
   2ced8:	2294      	movs	r2, #148	; 0x94
   2ceda:	0092      	lsls	r2, r2, #2
   2cedc:	4694      	mov	ip, r2
   2cede:	44bc      	add	ip, r7
   2cee0:	4463      	add	r3, ip
   2cee2:	4a44      	ldr	r2, [pc, #272]	; (2cff4 <f_open+0x528>)
   2cee4:	2194      	movs	r1, #148	; 0x94
   2cee6:	0089      	lsls	r1, r1, #2
   2cee8:	468c      	mov	ip, r1
   2ceea:	44bc      	add	ip, r7
   2ceec:	4462      	add	r2, ip
   2ceee:	7812      	ldrb	r2, [r2, #0]
   2cef0:	2120      	movs	r1, #32
   2cef2:	430a      	orrs	r2, r1
   2cef4:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2cef6:	2387      	movs	r3, #135	; 0x87
   2cef8:	009b      	lsls	r3, r3, #2
   2cefa:	18fb      	adds	r3, r7, r3
   2cefc:	681b      	ldr	r3, [r3, #0]
   2cefe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2cf00:	68fb      	ldr	r3, [r7, #12]
   2cf02:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2cf04:	68fb      	ldr	r3, [r7, #12]
   2cf06:	2292      	movs	r2, #146	; 0x92
   2cf08:	0092      	lsls	r2, r2, #2
   2cf0a:	18ba      	adds	r2, r7, r2
   2cf0c:	6812      	ldr	r2, [r2, #0]
   2cf0e:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2cf10:	4b39      	ldr	r3, [pc, #228]	; (2cff8 <f_open+0x52c>)
   2cf12:	18fb      	adds	r3, r7, r3
   2cf14:	781b      	ldrb	r3, [r3, #0]
   2cf16:	2b00      	cmp	r3, #0
   2cf18:	d163      	bne.n	2cfe2 <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2cf1a:	68fb      	ldr	r3, [r7, #12]
   2cf1c:	4a35      	ldr	r2, [pc, #212]	; (2cff4 <f_open+0x528>)
   2cf1e:	2194      	movs	r1, #148	; 0x94
   2cf20:	0089      	lsls	r1, r1, #2
   2cf22:	468c      	mov	ip, r1
   2cf24:	44bc      	add	ip, r7
   2cf26:	4462      	add	r2, ip
   2cf28:	7812      	ldrb	r2, [r2, #0]
   2cf2a:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2cf2c:	2392      	movs	r3, #146	; 0x92
   2cf2e:	009b      	lsls	r3, r3, #2
   2cf30:	18fb      	adds	r3, r7, r3
   2cf32:	681b      	ldr	r3, [r3, #0]
   2cf34:	3315      	adds	r3, #21
   2cf36:	781b      	ldrb	r3, [r3, #0]
   2cf38:	021b      	lsls	r3, r3, #8
   2cf3a:	b21a      	sxth	r2, r3
   2cf3c:	2392      	movs	r3, #146	; 0x92
   2cf3e:	009b      	lsls	r3, r3, #2
   2cf40:	18fb      	adds	r3, r7, r3
   2cf42:	681b      	ldr	r3, [r3, #0]
   2cf44:	3314      	adds	r3, #20
   2cf46:	781b      	ldrb	r3, [r3, #0]
   2cf48:	b21b      	sxth	r3, r3
   2cf4a:	4313      	orrs	r3, r2
   2cf4c:	b21b      	sxth	r3, r3
   2cf4e:	b29b      	uxth	r3, r3
   2cf50:	041b      	lsls	r3, r3, #16
   2cf52:	2292      	movs	r2, #146	; 0x92
   2cf54:	0092      	lsls	r2, r2, #2
   2cf56:	18ba      	adds	r2, r7, r2
   2cf58:	6812      	ldr	r2, [r2, #0]
   2cf5a:	321b      	adds	r2, #27
   2cf5c:	7812      	ldrb	r2, [r2, #0]
   2cf5e:	0212      	lsls	r2, r2, #8
   2cf60:	b211      	sxth	r1, r2
   2cf62:	2292      	movs	r2, #146	; 0x92
   2cf64:	0092      	lsls	r2, r2, #2
   2cf66:	18ba      	adds	r2, r7, r2
   2cf68:	6812      	ldr	r2, [r2, #0]
   2cf6a:	321a      	adds	r2, #26
   2cf6c:	7812      	ldrb	r2, [r2, #0]
   2cf6e:	b212      	sxth	r2, r2
   2cf70:	430a      	orrs	r2, r1
   2cf72:	b212      	sxth	r2, r2
   2cf74:	b292      	uxth	r2, r2
   2cf76:	431a      	orrs	r2, r3
   2cf78:	68fb      	ldr	r3, [r7, #12]
   2cf7a:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2cf7c:	2392      	movs	r3, #146	; 0x92
   2cf7e:	009b      	lsls	r3, r3, #2
   2cf80:	18fb      	adds	r3, r7, r3
   2cf82:	681b      	ldr	r3, [r3, #0]
   2cf84:	331f      	adds	r3, #31
   2cf86:	781b      	ldrb	r3, [r3, #0]
   2cf88:	061a      	lsls	r2, r3, #24
   2cf8a:	2392      	movs	r3, #146	; 0x92
   2cf8c:	009b      	lsls	r3, r3, #2
   2cf8e:	18fb      	adds	r3, r7, r3
   2cf90:	681b      	ldr	r3, [r3, #0]
   2cf92:	331e      	adds	r3, #30
   2cf94:	781b      	ldrb	r3, [r3, #0]
   2cf96:	041b      	lsls	r3, r3, #16
   2cf98:	4313      	orrs	r3, r2
   2cf9a:	2292      	movs	r2, #146	; 0x92
   2cf9c:	0092      	lsls	r2, r2, #2
   2cf9e:	18ba      	adds	r2, r7, r2
   2cfa0:	6812      	ldr	r2, [r2, #0]
   2cfa2:	321d      	adds	r2, #29
   2cfa4:	7812      	ldrb	r2, [r2, #0]
   2cfa6:	0212      	lsls	r2, r2, #8
   2cfa8:	4313      	orrs	r3, r2
   2cfaa:	2292      	movs	r2, #146	; 0x92
   2cfac:	0092      	lsls	r2, r2, #2
   2cfae:	18ba      	adds	r2, r7, r2
   2cfb0:	6812      	ldr	r2, [r2, #0]
   2cfb2:	321c      	adds	r2, #28
   2cfb4:	7812      	ldrb	r2, [r2, #0]
   2cfb6:	431a      	orrs	r2, r3
   2cfb8:	68fb      	ldr	r3, [r7, #12]
   2cfba:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   2cfbc:	68fb      	ldr	r3, [r7, #12]
   2cfbe:	2200      	movs	r2, #0
   2cfc0:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   2cfc2:	68fb      	ldr	r3, [r7, #12]
   2cfc4:	2200      	movs	r2, #0
   2cfc6:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2cfc8:	2387      	movs	r3, #135	; 0x87
   2cfca:	009b      	lsls	r3, r3, #2
   2cfcc:	18fb      	adds	r3, r7, r3
   2cfce:	681a      	ldr	r2, [r3, #0]
   2cfd0:	68fb      	ldr	r3, [r7, #12]
   2cfd2:	601a      	str	r2, [r3, #0]
   2cfd4:	2387      	movs	r3, #135	; 0x87
   2cfd6:	009b      	lsls	r3, r3, #2
   2cfd8:	18fb      	adds	r3, r7, r3
   2cfda:	681b      	ldr	r3, [r3, #0]
   2cfdc:	88da      	ldrh	r2, [r3, #6]
   2cfde:	68fb      	ldr	r3, [r7, #12]
   2cfe0:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   2cfe2:	4b05      	ldr	r3, [pc, #20]	; (2cff8 <f_open+0x52c>)
   2cfe4:	18fb      	adds	r3, r7, r3
   2cfe6:	781b      	ldrb	r3, [r3, #0]
}
   2cfe8:	0018      	movs	r0, r3
   2cfea:	46bd      	mov	sp, r7
   2cfec:	2395      	movs	r3, #149	; 0x95
   2cfee:	009b      	lsls	r3, r3, #2
   2cff0:	449d      	add	sp, r3
   2cff2:	bd90      	pop	{r4, r7, pc}
   2cff4:	fffffdb7 	.word	0xfffffdb7
   2cff8:	0000024f 	.word	0x0000024f

0002cffc <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2cffc:	b590      	push	{r4, r7, lr}
   2cffe:	b08b      	sub	sp, #44	; 0x2c
   2d000:	af00      	add	r7, sp, #0
   2d002:	60f8      	str	r0, [r7, #12]
   2d004:	60b9      	str	r1, [r7, #8]
   2d006:	607a      	str	r2, [r7, #4]
   2d008:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   2d00a:	68bb      	ldr	r3, [r7, #8]
   2d00c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2d00e:	683b      	ldr	r3, [r7, #0]
   2d010:	2200      	movs	r2, #0
   2d012:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   2d014:	68fb      	ldr	r3, [r7, #12]
   2d016:	681a      	ldr	r2, [r3, #0]
   2d018:	68fb      	ldr	r3, [r7, #12]
   2d01a:	889b      	ldrh	r3, [r3, #4]
   2d01c:	2117      	movs	r1, #23
   2d01e:	187c      	adds	r4, r7, r1
   2d020:	0019      	movs	r1, r3
   2d022:	0010      	movs	r0, r2
   2d024:	4bc3      	ldr	r3, [pc, #780]	; (2d334 <f_write+0x338>)
   2d026:	4798      	blx	r3
   2d028:	0003      	movs	r3, r0
   2d02a:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2d02c:	2317      	movs	r3, #23
   2d02e:	18fb      	adds	r3, r7, r3
   2d030:	781b      	ldrb	r3, [r3, #0]
   2d032:	2b00      	cmp	r3, #0
   2d034:	d003      	beq.n	2d03e <f_write+0x42>
   2d036:	2317      	movs	r3, #23
   2d038:	18fb      	adds	r3, r7, r3
   2d03a:	781b      	ldrb	r3, [r3, #0]
   2d03c:	e176      	b.n	2d32c <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2d03e:	68fb      	ldr	r3, [r7, #12]
   2d040:	799b      	ldrb	r3, [r3, #6]
   2d042:	b25b      	sxtb	r3, r3
   2d044:	2b00      	cmp	r3, #0
   2d046:	da01      	bge.n	2d04c <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2d048:	2302      	movs	r3, #2
   2d04a:	e16f      	b.n	2d32c <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2d04c:	68fb      	ldr	r3, [r7, #12]
   2d04e:	799b      	ldrb	r3, [r3, #6]
   2d050:	001a      	movs	r2, r3
   2d052:	2302      	movs	r3, #2
   2d054:	4013      	ands	r3, r2
   2d056:	d101      	bne.n	2d05c <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2d058:	2307      	movs	r3, #7
   2d05a:	e167      	b.n	2d32c <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2d05c:	68fb      	ldr	r3, [r7, #12]
   2d05e:	68da      	ldr	r2, [r3, #12]
   2d060:	687b      	ldr	r3, [r7, #4]
   2d062:	18d2      	adds	r2, r2, r3
   2d064:	68fb      	ldr	r3, [r7, #12]
   2d066:	68db      	ldr	r3, [r3, #12]
   2d068:	429a      	cmp	r2, r3
   2d06a:	d300      	bcc.n	2d06e <f_write+0x72>
   2d06c:	e146      	b.n	2d2fc <f_write+0x300>
   2d06e:	2300      	movs	r3, #0
   2d070:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   2d072:	e143      	b.n	2d2fc <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2d074:	68fb      	ldr	r3, [r7, #12]
   2d076:	689b      	ldr	r3, [r3, #8]
   2d078:	05db      	lsls	r3, r3, #23
   2d07a:	0ddb      	lsrs	r3, r3, #23
   2d07c:	d000      	beq.n	2d080 <f_write+0x84>
   2d07e:	e0f6      	b.n	2d26e <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2d080:	68fb      	ldr	r3, [r7, #12]
   2d082:	689b      	ldr	r3, [r3, #8]
   2d084:	0a5b      	lsrs	r3, r3, #9
   2d086:	b2da      	uxtb	r2, r3
   2d088:	68fb      	ldr	r3, [r7, #12]
   2d08a:	681b      	ldr	r3, [r3, #0]
   2d08c:	789b      	ldrb	r3, [r3, #2]
   2d08e:	3b01      	subs	r3, #1
   2d090:	b2d9      	uxtb	r1, r3
   2d092:	2316      	movs	r3, #22
   2d094:	18fb      	adds	r3, r7, r3
   2d096:	400a      	ands	r2, r1
   2d098:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   2d09a:	2316      	movs	r3, #22
   2d09c:	18fb      	adds	r3, r7, r3
   2d09e:	781b      	ldrb	r3, [r3, #0]
   2d0a0:	2b00      	cmp	r3, #0
   2d0a2:	d140      	bne.n	2d126 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2d0a4:	68fb      	ldr	r3, [r7, #12]
   2d0a6:	689b      	ldr	r3, [r3, #8]
   2d0a8:	2b00      	cmp	r3, #0
   2d0aa:	d111      	bne.n	2d0d0 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   2d0ac:	68fb      	ldr	r3, [r7, #12]
   2d0ae:	691b      	ldr	r3, [r3, #16]
   2d0b0:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   2d0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d0b4:	2b00      	cmp	r3, #0
   2d0b6:	d115      	bne.n	2d0e4 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2d0b8:	68fb      	ldr	r3, [r7, #12]
   2d0ba:	681b      	ldr	r3, [r3, #0]
   2d0bc:	2100      	movs	r1, #0
   2d0be:	0018      	movs	r0, r3
   2d0c0:	4b9d      	ldr	r3, [pc, #628]	; (2d338 <f_write+0x33c>)
   2d0c2:	4798      	blx	r3
   2d0c4:	0003      	movs	r3, r0
   2d0c6:	627b      	str	r3, [r7, #36]	; 0x24
   2d0c8:	68fb      	ldr	r3, [r7, #12]
   2d0ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2d0cc:	611a      	str	r2, [r3, #16]
   2d0ce:	e009      	b.n	2d0e4 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2d0d0:	68fb      	ldr	r3, [r7, #12]
   2d0d2:	681a      	ldr	r2, [r3, #0]
   2d0d4:	68fb      	ldr	r3, [r7, #12]
   2d0d6:	695b      	ldr	r3, [r3, #20]
   2d0d8:	0019      	movs	r1, r3
   2d0da:	0010      	movs	r0, r2
   2d0dc:	4b96      	ldr	r3, [pc, #600]	; (2d338 <f_write+0x33c>)
   2d0de:	4798      	blx	r3
   2d0e0:	0003      	movs	r3, r0
   2d0e2:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2d0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d0e6:	2b00      	cmp	r3, #0
   2d0e8:	d100      	bne.n	2d0ec <f_write+0xf0>
   2d0ea:	e10c      	b.n	2d306 <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2d0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d0ee:	2b01      	cmp	r3, #1
   2d0f0:	d109      	bne.n	2d106 <f_write+0x10a>
   2d0f2:	68fb      	ldr	r3, [r7, #12]
   2d0f4:	799b      	ldrb	r3, [r3, #6]
   2d0f6:	2280      	movs	r2, #128	; 0x80
   2d0f8:	4252      	negs	r2, r2
   2d0fa:	4313      	orrs	r3, r2
   2d0fc:	b2da      	uxtb	r2, r3
   2d0fe:	68fb      	ldr	r3, [r7, #12]
   2d100:	719a      	strb	r2, [r3, #6]
   2d102:	2302      	movs	r3, #2
   2d104:	e112      	b.n	2d32c <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2d106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d108:	3301      	adds	r3, #1
   2d10a:	d109      	bne.n	2d120 <f_write+0x124>
   2d10c:	68fb      	ldr	r3, [r7, #12]
   2d10e:	799b      	ldrb	r3, [r3, #6]
   2d110:	2280      	movs	r2, #128	; 0x80
   2d112:	4252      	negs	r2, r2
   2d114:	4313      	orrs	r3, r2
   2d116:	b2da      	uxtb	r2, r3
   2d118:	68fb      	ldr	r3, [r7, #12]
   2d11a:	719a      	strb	r2, [r3, #6]
   2d11c:	2301      	movs	r3, #1
   2d11e:	e105      	b.n	2d32c <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   2d120:	68fb      	ldr	r3, [r7, #12]
   2d122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2d124:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2d126:	68fb      	ldr	r3, [r7, #12]
   2d128:	681b      	ldr	r3, [r3, #0]
   2d12a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d12c:	68fb      	ldr	r3, [r7, #12]
   2d12e:	699b      	ldr	r3, [r3, #24]
   2d130:	429a      	cmp	r2, r3
   2d132:	d111      	bne.n	2d158 <f_write+0x15c>
   2d134:	68fb      	ldr	r3, [r7, #12]
   2d136:	681b      	ldr	r3, [r3, #0]
   2d138:	2100      	movs	r1, #0
   2d13a:	0018      	movs	r0, r3
   2d13c:	4b7f      	ldr	r3, [pc, #508]	; (2d33c <f_write+0x340>)
   2d13e:	4798      	blx	r3
   2d140:	1e03      	subs	r3, r0, #0
   2d142:	d009      	beq.n	2d158 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   2d144:	68fb      	ldr	r3, [r7, #12]
   2d146:	799b      	ldrb	r3, [r3, #6]
   2d148:	2280      	movs	r2, #128	; 0x80
   2d14a:	4252      	negs	r2, r2
   2d14c:	4313      	orrs	r3, r2
   2d14e:	b2da      	uxtb	r2, r3
   2d150:	68fb      	ldr	r3, [r7, #12]
   2d152:	719a      	strb	r2, [r3, #6]
   2d154:	2301      	movs	r3, #1
   2d156:	e0e9      	b.n	2d32c <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2d158:	68fb      	ldr	r3, [r7, #12]
   2d15a:	681a      	ldr	r2, [r3, #0]
   2d15c:	68fb      	ldr	r3, [r7, #12]
   2d15e:	695b      	ldr	r3, [r3, #20]
   2d160:	0019      	movs	r1, r3
   2d162:	0010      	movs	r0, r2
   2d164:	4b76      	ldr	r3, [pc, #472]	; (2d340 <f_write+0x344>)
   2d166:	4798      	blx	r3
   2d168:	0003      	movs	r3, r0
   2d16a:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2d16c:	693b      	ldr	r3, [r7, #16]
   2d16e:	2b00      	cmp	r3, #0
   2d170:	d109      	bne.n	2d186 <f_write+0x18a>
   2d172:	68fb      	ldr	r3, [r7, #12]
   2d174:	799b      	ldrb	r3, [r3, #6]
   2d176:	2280      	movs	r2, #128	; 0x80
   2d178:	4252      	negs	r2, r2
   2d17a:	4313      	orrs	r3, r2
   2d17c:	b2da      	uxtb	r2, r3
   2d17e:	68fb      	ldr	r3, [r7, #12]
   2d180:	719a      	strb	r2, [r3, #6]
   2d182:	2302      	movs	r3, #2
   2d184:	e0d2      	b.n	2d32c <f_write+0x330>
			sect += csect;
   2d186:	2316      	movs	r3, #22
   2d188:	18fb      	adds	r3, r7, r3
   2d18a:	781b      	ldrb	r3, [r3, #0]
   2d18c:	693a      	ldr	r2, [r7, #16]
   2d18e:	18d3      	adds	r3, r2, r3
   2d190:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2d192:	687b      	ldr	r3, [r7, #4]
   2d194:	0a5b      	lsrs	r3, r3, #9
   2d196:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   2d198:	69fb      	ldr	r3, [r7, #28]
   2d19a:	2b00      	cmp	r3, #0
   2d19c:	d048      	beq.n	2d230 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2d19e:	2316      	movs	r3, #22
   2d1a0:	18fb      	adds	r3, r7, r3
   2d1a2:	781a      	ldrb	r2, [r3, #0]
   2d1a4:	69fb      	ldr	r3, [r7, #28]
   2d1a6:	18d2      	adds	r2, r2, r3
   2d1a8:	68fb      	ldr	r3, [r7, #12]
   2d1aa:	681b      	ldr	r3, [r3, #0]
   2d1ac:	789b      	ldrb	r3, [r3, #2]
   2d1ae:	429a      	cmp	r2, r3
   2d1b0:	d908      	bls.n	2d1c4 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   2d1b2:	68fb      	ldr	r3, [r7, #12]
   2d1b4:	681b      	ldr	r3, [r3, #0]
   2d1b6:	789b      	ldrb	r3, [r3, #2]
   2d1b8:	001a      	movs	r2, r3
   2d1ba:	2316      	movs	r3, #22
   2d1bc:	18fb      	adds	r3, r7, r3
   2d1be:	781b      	ldrb	r3, [r3, #0]
   2d1c0:	1ad3      	subs	r3, r2, r3
   2d1c2:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2d1c4:	68fb      	ldr	r3, [r7, #12]
   2d1c6:	681b      	ldr	r3, [r3, #0]
   2d1c8:	7858      	ldrb	r0, [r3, #1]
   2d1ca:	69fb      	ldr	r3, [r7, #28]
   2d1cc:	b2db      	uxtb	r3, r3
   2d1ce:	693a      	ldr	r2, [r7, #16]
   2d1d0:	69b9      	ldr	r1, [r7, #24]
   2d1d2:	4c5c      	ldr	r4, [pc, #368]	; (2d344 <f_write+0x348>)
   2d1d4:	47a0      	blx	r4
   2d1d6:	1e03      	subs	r3, r0, #0
   2d1d8:	d009      	beq.n	2d1ee <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   2d1da:	68fb      	ldr	r3, [r7, #12]
   2d1dc:	799b      	ldrb	r3, [r3, #6]
   2d1de:	2280      	movs	r2, #128	; 0x80
   2d1e0:	4252      	negs	r2, r2
   2d1e2:	4313      	orrs	r3, r2
   2d1e4:	b2da      	uxtb	r2, r3
   2d1e6:	68fb      	ldr	r3, [r7, #12]
   2d1e8:	719a      	strb	r2, [r3, #6]
   2d1ea:	2301      	movs	r3, #1
   2d1ec:	e09e      	b.n	2d32c <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2d1ee:	68fb      	ldr	r3, [r7, #12]
   2d1f0:	681b      	ldr	r3, [r3, #0]
   2d1f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d1f4:	693b      	ldr	r3, [r7, #16]
   2d1f6:	1ad2      	subs	r2, r2, r3
   2d1f8:	69fb      	ldr	r3, [r7, #28]
   2d1fa:	429a      	cmp	r2, r3
   2d1fc:	d214      	bcs.n	2d228 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2d1fe:	68fb      	ldr	r3, [r7, #12]
   2d200:	681b      	ldr	r3, [r3, #0]
   2d202:	3330      	adds	r3, #48	; 0x30
   2d204:	0018      	movs	r0, r3
   2d206:	68fb      	ldr	r3, [r7, #12]
   2d208:	681b      	ldr	r3, [r3, #0]
   2d20a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d20c:	693b      	ldr	r3, [r7, #16]
   2d20e:	1ad3      	subs	r3, r2, r3
   2d210:	025b      	lsls	r3, r3, #9
   2d212:	69ba      	ldr	r2, [r7, #24]
   2d214:	18d1      	adds	r1, r2, r3
   2d216:	2380      	movs	r3, #128	; 0x80
   2d218:	009b      	lsls	r3, r3, #2
   2d21a:	001a      	movs	r2, r3
   2d21c:	4b4a      	ldr	r3, [pc, #296]	; (2d348 <f_write+0x34c>)
   2d21e:	4798      	blx	r3
					fp->fs->wflag = 0;
   2d220:	68fb      	ldr	r3, [r7, #12]
   2d222:	681b      	ldr	r3, [r3, #0]
   2d224:	2200      	movs	r2, #0
   2d226:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2d228:	69fb      	ldr	r3, [r7, #28]
   2d22a:	025b      	lsls	r3, r3, #9
   2d22c:	623b      	str	r3, [r7, #32]
				continue;
   2d22e:	e051      	b.n	2d2d4 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2d230:	68fb      	ldr	r3, [r7, #12]
   2d232:	689a      	ldr	r2, [r3, #8]
   2d234:	68fb      	ldr	r3, [r7, #12]
   2d236:	68db      	ldr	r3, [r3, #12]
   2d238:	429a      	cmp	r2, r3
   2d23a:	d315      	bcc.n	2d268 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2d23c:	68fb      	ldr	r3, [r7, #12]
   2d23e:	681b      	ldr	r3, [r3, #0]
   2d240:	2100      	movs	r1, #0
   2d242:	0018      	movs	r0, r3
   2d244:	4b3d      	ldr	r3, [pc, #244]	; (2d33c <f_write+0x340>)
   2d246:	4798      	blx	r3
   2d248:	1e03      	subs	r3, r0, #0
   2d24a:	d009      	beq.n	2d260 <f_write+0x264>
   2d24c:	68fb      	ldr	r3, [r7, #12]
   2d24e:	799b      	ldrb	r3, [r3, #6]
   2d250:	2280      	movs	r2, #128	; 0x80
   2d252:	4252      	negs	r2, r2
   2d254:	4313      	orrs	r3, r2
   2d256:	b2da      	uxtb	r2, r3
   2d258:	68fb      	ldr	r3, [r7, #12]
   2d25a:	719a      	strb	r2, [r3, #6]
   2d25c:	2301      	movs	r3, #1
   2d25e:	e065      	b.n	2d32c <f_write+0x330>
				fp->fs->winsect = sect;
   2d260:	68fb      	ldr	r3, [r7, #12]
   2d262:	681b      	ldr	r3, [r3, #0]
   2d264:	693a      	ldr	r2, [r7, #16]
   2d266:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2d268:	68fb      	ldr	r3, [r7, #12]
   2d26a:	693a      	ldr	r2, [r7, #16]
   2d26c:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2d26e:	68fb      	ldr	r3, [r7, #12]
   2d270:	689b      	ldr	r3, [r3, #8]
   2d272:	05db      	lsls	r3, r3, #23
   2d274:	0ddb      	lsrs	r3, r3, #23
   2d276:	2280      	movs	r2, #128	; 0x80
   2d278:	0092      	lsls	r2, r2, #2
   2d27a:	1ad3      	subs	r3, r2, r3
   2d27c:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   2d27e:	6a3a      	ldr	r2, [r7, #32]
   2d280:	687b      	ldr	r3, [r7, #4]
   2d282:	429a      	cmp	r2, r3
   2d284:	d901      	bls.n	2d28a <f_write+0x28e>
   2d286:	687b      	ldr	r3, [r7, #4]
   2d288:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2d28a:	68fb      	ldr	r3, [r7, #12]
   2d28c:	681a      	ldr	r2, [r3, #0]
   2d28e:	68fb      	ldr	r3, [r7, #12]
   2d290:	699b      	ldr	r3, [r3, #24]
   2d292:	0019      	movs	r1, r3
   2d294:	0010      	movs	r0, r2
   2d296:	4b29      	ldr	r3, [pc, #164]	; (2d33c <f_write+0x340>)
   2d298:	4798      	blx	r3
   2d29a:	1e03      	subs	r3, r0, #0
   2d29c:	d009      	beq.n	2d2b2 <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   2d29e:	68fb      	ldr	r3, [r7, #12]
   2d2a0:	799b      	ldrb	r3, [r3, #6]
   2d2a2:	2280      	movs	r2, #128	; 0x80
   2d2a4:	4252      	negs	r2, r2
   2d2a6:	4313      	orrs	r3, r2
   2d2a8:	b2da      	uxtb	r2, r3
   2d2aa:	68fb      	ldr	r3, [r7, #12]
   2d2ac:	719a      	strb	r2, [r3, #6]
   2d2ae:	2301      	movs	r3, #1
   2d2b0:	e03c      	b.n	2d32c <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2d2b2:	68fb      	ldr	r3, [r7, #12]
   2d2b4:	681a      	ldr	r2, [r3, #0]
   2d2b6:	68fb      	ldr	r3, [r7, #12]
   2d2b8:	689b      	ldr	r3, [r3, #8]
   2d2ba:	05db      	lsls	r3, r3, #23
   2d2bc:	0ddb      	lsrs	r3, r3, #23
   2d2be:	3330      	adds	r3, #48	; 0x30
   2d2c0:	18d3      	adds	r3, r2, r3
   2d2c2:	6a3a      	ldr	r2, [r7, #32]
   2d2c4:	69b9      	ldr	r1, [r7, #24]
   2d2c6:	0018      	movs	r0, r3
   2d2c8:	4b1f      	ldr	r3, [pc, #124]	; (2d348 <f_write+0x34c>)
   2d2ca:	4798      	blx	r3
		fp->fs->wflag = 1;
   2d2cc:	68fb      	ldr	r3, [r7, #12]
   2d2ce:	681b      	ldr	r3, [r3, #0]
   2d2d0:	2201      	movs	r2, #1
   2d2d2:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2d2d4:	69ba      	ldr	r2, [r7, #24]
   2d2d6:	6a3b      	ldr	r3, [r7, #32]
   2d2d8:	18d3      	adds	r3, r2, r3
   2d2da:	61bb      	str	r3, [r7, #24]
   2d2dc:	68fb      	ldr	r3, [r7, #12]
   2d2de:	689a      	ldr	r2, [r3, #8]
   2d2e0:	6a3b      	ldr	r3, [r7, #32]
   2d2e2:	18d2      	adds	r2, r2, r3
   2d2e4:	68fb      	ldr	r3, [r7, #12]
   2d2e6:	609a      	str	r2, [r3, #8]
   2d2e8:	683b      	ldr	r3, [r7, #0]
   2d2ea:	681a      	ldr	r2, [r3, #0]
   2d2ec:	6a3b      	ldr	r3, [r7, #32]
   2d2ee:	18d2      	adds	r2, r2, r3
   2d2f0:	683b      	ldr	r3, [r7, #0]
   2d2f2:	601a      	str	r2, [r3, #0]
   2d2f4:	687a      	ldr	r2, [r7, #4]
   2d2f6:	6a3b      	ldr	r3, [r7, #32]
   2d2f8:	1ad3      	subs	r3, r2, r3
   2d2fa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   2d2fc:	687b      	ldr	r3, [r7, #4]
   2d2fe:	2b00      	cmp	r3, #0
   2d300:	d000      	beq.n	2d304 <f_write+0x308>
   2d302:	e6b7      	b.n	2d074 <f_write+0x78>
   2d304:	e000      	b.n	2d308 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2d306:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2d308:	68fb      	ldr	r3, [r7, #12]
   2d30a:	689a      	ldr	r2, [r3, #8]
   2d30c:	68fb      	ldr	r3, [r7, #12]
   2d30e:	68db      	ldr	r3, [r3, #12]
   2d310:	429a      	cmp	r2, r3
   2d312:	d903      	bls.n	2d31c <f_write+0x320>
   2d314:	68fb      	ldr	r3, [r7, #12]
   2d316:	689a      	ldr	r2, [r3, #8]
   2d318:	68fb      	ldr	r3, [r7, #12]
   2d31a:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2d31c:	68fb      	ldr	r3, [r7, #12]
   2d31e:	799b      	ldrb	r3, [r3, #6]
   2d320:	2220      	movs	r2, #32
   2d322:	4313      	orrs	r3, r2
   2d324:	b2da      	uxtb	r2, r3
   2d326:	68fb      	ldr	r3, [r7, #12]
   2d328:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   2d32a:	2300      	movs	r3, #0
}
   2d32c:	0018      	movs	r0, r3
   2d32e:	46bd      	mov	sp, r7
   2d330:	b00b      	add	sp, #44	; 0x2c
   2d332:	bd90      	pop	{r4, r7, pc}
   2d334:	0002ca21 	.word	0x0002ca21
   2d338:	0002b0ad 	.word	0x0002b0ad
   2d33c:	0002a9a5 	.word	0x0002a9a5
   2d340:	0002ac05 	.word	0x0002ac05
   2d344:	0002a691 	.word	0x0002a691
   2d348:	0002a8c1 	.word	0x0002a8c1

0002d34c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2d34c:	b590      	push	{r4, r7, lr}
   2d34e:	b087      	sub	sp, #28
   2d350:	af00      	add	r7, sp, #0
   2d352:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2d354:	687b      	ldr	r3, [r7, #4]
   2d356:	681a      	ldr	r2, [r3, #0]
   2d358:	687b      	ldr	r3, [r7, #4]
   2d35a:	889b      	ldrh	r3, [r3, #4]
   2d35c:	2117      	movs	r1, #23
   2d35e:	187c      	adds	r4, r7, r1
   2d360:	0019      	movs	r1, r3
   2d362:	0010      	movs	r0, r2
   2d364:	4b55      	ldr	r3, [pc, #340]	; (2d4bc <f_sync+0x170>)
   2d366:	4798      	blx	r3
   2d368:	0003      	movs	r3, r0
   2d36a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2d36c:	2317      	movs	r3, #23
   2d36e:	18fb      	adds	r3, r7, r3
   2d370:	781b      	ldrb	r3, [r3, #0]
   2d372:	2b00      	cmp	r3, #0
   2d374:	d000      	beq.n	2d378 <f_sync+0x2c>
   2d376:	e09a      	b.n	2d4ae <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2d378:	687b      	ldr	r3, [r7, #4]
   2d37a:	799b      	ldrb	r3, [r3, #6]
   2d37c:	001a      	movs	r2, r3
   2d37e:	2320      	movs	r3, #32
   2d380:	4013      	ands	r3, r2
   2d382:	d100      	bne.n	2d386 <f_sync+0x3a>
   2d384:	e093      	b.n	2d4ae <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   2d386:	687b      	ldr	r3, [r7, #4]
   2d388:	681a      	ldr	r2, [r3, #0]
   2d38a:	687b      	ldr	r3, [r7, #4]
   2d38c:	69db      	ldr	r3, [r3, #28]
   2d38e:	2117      	movs	r1, #23
   2d390:	187c      	adds	r4, r7, r1
   2d392:	0019      	movs	r1, r3
   2d394:	0010      	movs	r0, r2
   2d396:	4b4a      	ldr	r3, [pc, #296]	; (2d4c0 <f_sync+0x174>)
   2d398:	4798      	blx	r3
   2d39a:	0003      	movs	r3, r0
   2d39c:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   2d39e:	2317      	movs	r3, #23
   2d3a0:	18fb      	adds	r3, r7, r3
   2d3a2:	781b      	ldrb	r3, [r3, #0]
   2d3a4:	2b00      	cmp	r3, #0
   2d3a6:	d000      	beq.n	2d3aa <f_sync+0x5e>
   2d3a8:	e081      	b.n	2d4ae <f_sync+0x162>
				dir = fp->dir_ptr;
   2d3aa:	687b      	ldr	r3, [r7, #4]
   2d3ac:	6a1b      	ldr	r3, [r3, #32]
   2d3ae:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2d3b0:	693b      	ldr	r3, [r7, #16]
   2d3b2:	330b      	adds	r3, #11
   2d3b4:	693a      	ldr	r2, [r7, #16]
   2d3b6:	320b      	adds	r2, #11
   2d3b8:	7812      	ldrb	r2, [r2, #0]
   2d3ba:	2120      	movs	r1, #32
   2d3bc:	430a      	orrs	r2, r1
   2d3be:	b2d2      	uxtb	r2, r2
   2d3c0:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2d3c2:	693b      	ldr	r3, [r7, #16]
   2d3c4:	331c      	adds	r3, #28
   2d3c6:	001a      	movs	r2, r3
   2d3c8:	687b      	ldr	r3, [r7, #4]
   2d3ca:	68db      	ldr	r3, [r3, #12]
   2d3cc:	b2db      	uxtb	r3, r3
   2d3ce:	7013      	strb	r3, [r2, #0]
   2d3d0:	693b      	ldr	r3, [r7, #16]
   2d3d2:	331d      	adds	r3, #29
   2d3d4:	001a      	movs	r2, r3
   2d3d6:	687b      	ldr	r3, [r7, #4]
   2d3d8:	68db      	ldr	r3, [r3, #12]
   2d3da:	b29b      	uxth	r3, r3
   2d3dc:	0a1b      	lsrs	r3, r3, #8
   2d3de:	b29b      	uxth	r3, r3
   2d3e0:	b2db      	uxtb	r3, r3
   2d3e2:	7013      	strb	r3, [r2, #0]
   2d3e4:	693b      	ldr	r3, [r7, #16]
   2d3e6:	331e      	adds	r3, #30
   2d3e8:	001a      	movs	r2, r3
   2d3ea:	687b      	ldr	r3, [r7, #4]
   2d3ec:	68db      	ldr	r3, [r3, #12]
   2d3ee:	0c1b      	lsrs	r3, r3, #16
   2d3f0:	b2db      	uxtb	r3, r3
   2d3f2:	7013      	strb	r3, [r2, #0]
   2d3f4:	693b      	ldr	r3, [r7, #16]
   2d3f6:	331f      	adds	r3, #31
   2d3f8:	001a      	movs	r2, r3
   2d3fa:	687b      	ldr	r3, [r7, #4]
   2d3fc:	68db      	ldr	r3, [r3, #12]
   2d3fe:	0e1b      	lsrs	r3, r3, #24
   2d400:	b2db      	uxtb	r3, r3
   2d402:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2d404:	693b      	ldr	r3, [r7, #16]
   2d406:	331a      	adds	r3, #26
   2d408:	001a      	movs	r2, r3
   2d40a:	687b      	ldr	r3, [r7, #4]
   2d40c:	691b      	ldr	r3, [r3, #16]
   2d40e:	b2db      	uxtb	r3, r3
   2d410:	7013      	strb	r3, [r2, #0]
   2d412:	693b      	ldr	r3, [r7, #16]
   2d414:	331b      	adds	r3, #27
   2d416:	001a      	movs	r2, r3
   2d418:	687b      	ldr	r3, [r7, #4]
   2d41a:	691b      	ldr	r3, [r3, #16]
   2d41c:	b29b      	uxth	r3, r3
   2d41e:	0a1b      	lsrs	r3, r3, #8
   2d420:	b29b      	uxth	r3, r3
   2d422:	b2db      	uxtb	r3, r3
   2d424:	7013      	strb	r3, [r2, #0]
   2d426:	693b      	ldr	r3, [r7, #16]
   2d428:	3314      	adds	r3, #20
   2d42a:	001a      	movs	r2, r3
   2d42c:	687b      	ldr	r3, [r7, #4]
   2d42e:	691b      	ldr	r3, [r3, #16]
   2d430:	0c1b      	lsrs	r3, r3, #16
   2d432:	b2db      	uxtb	r3, r3
   2d434:	7013      	strb	r3, [r2, #0]
   2d436:	693b      	ldr	r3, [r7, #16]
   2d438:	3315      	adds	r3, #21
   2d43a:	001a      	movs	r2, r3
   2d43c:	687b      	ldr	r3, [r7, #4]
   2d43e:	691b      	ldr	r3, [r3, #16]
   2d440:	0c1b      	lsrs	r3, r3, #16
   2d442:	b29b      	uxth	r3, r3
   2d444:	0a1b      	lsrs	r3, r3, #8
   2d446:	b29b      	uxth	r3, r3
   2d448:	b2db      	uxtb	r3, r3
   2d44a:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   2d44c:	4b1d      	ldr	r3, [pc, #116]	; (2d4c4 <f_sync+0x178>)
   2d44e:	4798      	blx	r3
   2d450:	0003      	movs	r3, r0
   2d452:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   2d454:	693b      	ldr	r3, [r7, #16]
   2d456:	3316      	adds	r3, #22
   2d458:	68fa      	ldr	r2, [r7, #12]
   2d45a:	b2d2      	uxtb	r2, r2
   2d45c:	701a      	strb	r2, [r3, #0]
   2d45e:	693b      	ldr	r3, [r7, #16]
   2d460:	3317      	adds	r3, #23
   2d462:	68fa      	ldr	r2, [r7, #12]
   2d464:	b292      	uxth	r2, r2
   2d466:	0a12      	lsrs	r2, r2, #8
   2d468:	b292      	uxth	r2, r2
   2d46a:	b2d2      	uxtb	r2, r2
   2d46c:	701a      	strb	r2, [r3, #0]
   2d46e:	693b      	ldr	r3, [r7, #16]
   2d470:	3318      	adds	r3, #24
   2d472:	68fa      	ldr	r2, [r7, #12]
   2d474:	0c12      	lsrs	r2, r2, #16
   2d476:	b2d2      	uxtb	r2, r2
   2d478:	701a      	strb	r2, [r3, #0]
   2d47a:	693b      	ldr	r3, [r7, #16]
   2d47c:	3319      	adds	r3, #25
   2d47e:	68fa      	ldr	r2, [r7, #12]
   2d480:	0e12      	lsrs	r2, r2, #24
   2d482:	b2d2      	uxtb	r2, r2
   2d484:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   2d486:	687b      	ldr	r3, [r7, #4]
   2d488:	799b      	ldrb	r3, [r3, #6]
   2d48a:	2220      	movs	r2, #32
   2d48c:	4393      	bics	r3, r2
   2d48e:	b2da      	uxtb	r2, r3
   2d490:	687b      	ldr	r3, [r7, #4]
   2d492:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   2d494:	687b      	ldr	r3, [r7, #4]
   2d496:	681b      	ldr	r3, [r3, #0]
   2d498:	2201      	movs	r2, #1
   2d49a:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   2d49c:	687b      	ldr	r3, [r7, #4]
   2d49e:	681b      	ldr	r3, [r3, #0]
   2d4a0:	2217      	movs	r2, #23
   2d4a2:	18bc      	adds	r4, r7, r2
   2d4a4:	0018      	movs	r0, r3
   2d4a6:	4b08      	ldr	r3, [pc, #32]	; (2d4c8 <f_sync+0x17c>)
   2d4a8:	4798      	blx	r3
   2d4aa:	0003      	movs	r3, r0
   2d4ac:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   2d4ae:	2317      	movs	r3, #23
   2d4b0:	18fb      	adds	r3, r7, r3
   2d4b2:	781b      	ldrb	r3, [r3, #0]
}
   2d4b4:	0018      	movs	r0, r3
   2d4b6:	46bd      	mov	sp, r7
   2d4b8:	b007      	add	sp, #28
   2d4ba:	bd90      	pop	{r4, r7, pc}
   2d4bc:	0002ca21 	.word	0x0002ca21
   2d4c0:	0002a9a5 	.word	0x0002a9a5
   2d4c4:	0002a861 	.word	0x0002a861
   2d4c8:	0002aa6d 	.word	0x0002aa6d

0002d4cc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   2d4cc:	b590      	push	{r4, r7, lr}
   2d4ce:	b085      	sub	sp, #20
   2d4d0:	af00      	add	r7, sp, #0
   2d4d2:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   2d4d4:	230f      	movs	r3, #15
   2d4d6:	18fc      	adds	r4, r7, r3
   2d4d8:	687b      	ldr	r3, [r7, #4]
   2d4da:	0018      	movs	r0, r3
   2d4dc:	4b09      	ldr	r3, [pc, #36]	; (2d504 <f_close+0x38>)
   2d4de:	4798      	blx	r3
   2d4e0:	0003      	movs	r3, r0
   2d4e2:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2d4e4:	230f      	movs	r3, #15
   2d4e6:	18fb      	adds	r3, r7, r3
   2d4e8:	781b      	ldrb	r3, [r3, #0]
   2d4ea:	2b00      	cmp	r3, #0
   2d4ec:	d102      	bne.n	2d4f4 <f_close+0x28>
   2d4ee:	687b      	ldr	r3, [r7, #4]
   2d4f0:	2200      	movs	r2, #0
   2d4f2:	601a      	str	r2, [r3, #0]
	return res;
   2d4f4:	230f      	movs	r3, #15
   2d4f6:	18fb      	adds	r3, r7, r3
   2d4f8:	781b      	ldrb	r3, [r3, #0]
#endif
}
   2d4fa:	0018      	movs	r0, r3
   2d4fc:	46bd      	mov	sp, r7
   2d4fe:	b005      	add	sp, #20
   2d500:	bd90      	pop	{r4, r7, pc}
   2d502:	46c0      	nop			; (mov r8, r8)
   2d504:	0002d34d 	.word	0x0002d34d

0002d508 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   2d508:	b580      	push	{r7, lr}
   2d50a:	b084      	sub	sp, #16
   2d50c:	af00      	add	r7, sp, #0
   2d50e:	0002      	movs	r2, r0
   2d510:	6039      	str	r1, [r7, #0]
   2d512:	1dbb      	adds	r3, r7, #6
   2d514:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   2d516:	1dbb      	adds	r3, r7, #6
   2d518:	881b      	ldrh	r3, [r3, #0]
   2d51a:	2b7f      	cmp	r3, #127	; 0x7f
   2d51c:	d805      	bhi.n	2d52a <ff_convert+0x22>
		c = src;
   2d51e:	230e      	movs	r3, #14
   2d520:	18fb      	adds	r3, r7, r3
   2d522:	1dba      	adds	r2, r7, #6
   2d524:	8812      	ldrh	r2, [r2, #0]
   2d526:	801a      	strh	r2, [r3, #0]
   2d528:	e03a      	b.n	2d5a0 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   2d52a:	683b      	ldr	r3, [r7, #0]
   2d52c:	2b00      	cmp	r3, #0
   2d52e:	d010      	beq.n	2d552 <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   2d530:	1dbb      	adds	r3, r7, #6
   2d532:	881b      	ldrh	r3, [r3, #0]
   2d534:	2bff      	cmp	r3, #255	; 0xff
   2d536:	d807      	bhi.n	2d548 <ff_convert+0x40>
   2d538:	1dbb      	adds	r3, r7, #6
   2d53a:	881b      	ldrh	r3, [r3, #0]
   2d53c:	3b80      	subs	r3, #128	; 0x80
   2d53e:	001a      	movs	r2, r3
   2d540:	4b1b      	ldr	r3, [pc, #108]	; (2d5b0 <ff_convert+0xa8>)
   2d542:	0052      	lsls	r2, r2, #1
   2d544:	5ad2      	ldrh	r2, [r2, r3]
   2d546:	e000      	b.n	2d54a <ff_convert+0x42>
   2d548:	2200      	movs	r2, #0
   2d54a:	230e      	movs	r3, #14
   2d54c:	18fb      	adds	r3, r7, r3
   2d54e:	801a      	strh	r2, [r3, #0]
   2d550:	e026      	b.n	2d5a0 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   2d552:	230e      	movs	r3, #14
   2d554:	18fb      	adds	r3, r7, r3
   2d556:	2200      	movs	r2, #0
   2d558:	801a      	strh	r2, [r3, #0]
   2d55a:	e010      	b.n	2d57e <ff_convert+0x76>
				if (src == Tbl[c]) break;
   2d55c:	230e      	movs	r3, #14
   2d55e:	18fb      	adds	r3, r7, r3
   2d560:	881a      	ldrh	r2, [r3, #0]
   2d562:	4b13      	ldr	r3, [pc, #76]	; (2d5b0 <ff_convert+0xa8>)
   2d564:	0052      	lsls	r2, r2, #1
   2d566:	5ad3      	ldrh	r3, [r2, r3]
   2d568:	1dba      	adds	r2, r7, #6
   2d56a:	8812      	ldrh	r2, [r2, #0]
   2d56c:	429a      	cmp	r2, r3
   2d56e:	d00c      	beq.n	2d58a <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   2d570:	230e      	movs	r3, #14
   2d572:	18fb      	adds	r3, r7, r3
   2d574:	881a      	ldrh	r2, [r3, #0]
   2d576:	230e      	movs	r3, #14
   2d578:	18fb      	adds	r3, r7, r3
   2d57a:	3201      	adds	r2, #1
   2d57c:	801a      	strh	r2, [r3, #0]
   2d57e:	230e      	movs	r3, #14
   2d580:	18fb      	adds	r3, r7, r3
   2d582:	881b      	ldrh	r3, [r3, #0]
   2d584:	2b7f      	cmp	r3, #127	; 0x7f
   2d586:	d9e9      	bls.n	2d55c <ff_convert+0x54>
   2d588:	e000      	b.n	2d58c <ff_convert+0x84>
				if (src == Tbl[c]) break;
   2d58a:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   2d58c:	230e      	movs	r3, #14
   2d58e:	18fb      	adds	r3, r7, r3
   2d590:	881b      	ldrh	r3, [r3, #0]
   2d592:	3380      	adds	r3, #128	; 0x80
   2d594:	b29a      	uxth	r2, r3
   2d596:	230e      	movs	r3, #14
   2d598:	18fb      	adds	r3, r7, r3
   2d59a:	21ff      	movs	r1, #255	; 0xff
   2d59c:	400a      	ands	r2, r1
   2d59e:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   2d5a0:	230e      	movs	r3, #14
   2d5a2:	18fb      	adds	r3, r7, r3
   2d5a4:	881b      	ldrh	r3, [r3, #0]
}
   2d5a6:	0018      	movs	r0, r3
   2d5a8:	46bd      	mov	sp, r7
   2d5aa:	b004      	add	sp, #16
   2d5ac:	bd80      	pop	{r7, pc}
   2d5ae:	46c0      	nop			; (mov r8, r8)
   2d5b0:	000390b4 	.word	0x000390b4

0002d5b4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   2d5b4:	b580      	push	{r7, lr}
   2d5b6:	b084      	sub	sp, #16
   2d5b8:	af00      	add	r7, sp, #0
   2d5ba:	0002      	movs	r2, r0
   2d5bc:	1dbb      	adds	r3, r7, #6
   2d5be:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   2d5c0:	2300      	movs	r3, #0
   2d5c2:	60fb      	str	r3, [r7, #12]
   2d5c4:	e002      	b.n	2d5cc <ff_wtoupper+0x18>
   2d5c6:	68fb      	ldr	r3, [r7, #12]
   2d5c8:	3301      	adds	r3, #1
   2d5ca:	60fb      	str	r3, [r7, #12]
   2d5cc:	4b0f      	ldr	r3, [pc, #60]	; (2d60c <ff_wtoupper+0x58>)
   2d5ce:	68fa      	ldr	r2, [r7, #12]
   2d5d0:	0052      	lsls	r2, r2, #1
   2d5d2:	5ad3      	ldrh	r3, [r2, r3]
   2d5d4:	2b00      	cmp	r3, #0
   2d5d6:	d007      	beq.n	2d5e8 <ff_wtoupper+0x34>
   2d5d8:	4b0c      	ldr	r3, [pc, #48]	; (2d60c <ff_wtoupper+0x58>)
   2d5da:	68fa      	ldr	r2, [r7, #12]
   2d5dc:	0052      	lsls	r2, r2, #1
   2d5de:	5ad3      	ldrh	r3, [r2, r3]
   2d5e0:	1dba      	adds	r2, r7, #6
   2d5e2:	8812      	ldrh	r2, [r2, #0]
   2d5e4:	429a      	cmp	r2, r3
   2d5e6:	d1ee      	bne.n	2d5c6 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   2d5e8:	4b08      	ldr	r3, [pc, #32]	; (2d60c <ff_wtoupper+0x58>)
   2d5ea:	68fa      	ldr	r2, [r7, #12]
   2d5ec:	0052      	lsls	r2, r2, #1
   2d5ee:	5ad3      	ldrh	r3, [r2, r3]
   2d5f0:	2b00      	cmp	r3, #0
   2d5f2:	d004      	beq.n	2d5fe <ff_wtoupper+0x4a>
   2d5f4:	4b06      	ldr	r3, [pc, #24]	; (2d610 <ff_wtoupper+0x5c>)
   2d5f6:	68fa      	ldr	r2, [r7, #12]
   2d5f8:	0052      	lsls	r2, r2, #1
   2d5fa:	5ad3      	ldrh	r3, [r2, r3]
   2d5fc:	e001      	b.n	2d602 <ff_wtoupper+0x4e>
   2d5fe:	1dbb      	adds	r3, r7, #6
   2d600:	881b      	ldrh	r3, [r3, #0]
}
   2d602:	0018      	movs	r0, r3
   2d604:	46bd      	mov	sp, r7
   2d606:	b004      	add	sp, #16
   2d608:	bd80      	pop	{r7, pc}
   2d60a:	46c0      	nop			; (mov r8, r8)
   2d60c:	000391b4 	.word	0x000391b4
   2d610:	00039394 	.word	0x00039394

0002d614 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2d614:	b580      	push	{r7, lr}
   2d616:	b084      	sub	sp, #16
   2d618:	af00      	add	r7, sp, #0
   2d61a:	60f8      	str	r0, [r7, #12]
   2d61c:	60b9      	str	r1, [r7, #8]
   2d61e:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2d620:	68fb      	ldr	r3, [r7, #12]
   2d622:	68ba      	ldr	r2, [r7, #8]
   2d624:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2d626:	68fb      	ldr	r3, [r7, #12]
   2d628:	687a      	ldr	r2, [r7, #4]
   2d62a:	601a      	str	r2, [r3, #0]
}
   2d62c:	46c0      	nop			; (mov r8, r8)
   2d62e:	46bd      	mov	sp, r7
   2d630:	b004      	add	sp, #16
   2d632:	bd80      	pop	{r7, pc}

0002d634 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2d634:	b580      	push	{r7, lr}
   2d636:	b082      	sub	sp, #8
   2d638:	af00      	add	r7, sp, #0
   2d63a:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2d63c:	687b      	ldr	r3, [r7, #4]
   2d63e:	681b      	ldr	r3, [r3, #0]
   2d640:	4a07      	ldr	r2, [pc, #28]	; (2d660 <getNextPacketId+0x2c>)
   2d642:	4293      	cmp	r3, r2
   2d644:	d003      	beq.n	2d64e <getNextPacketId+0x1a>
   2d646:	687b      	ldr	r3, [r7, #4]
   2d648:	681b      	ldr	r3, [r3, #0]
   2d64a:	1c5a      	adds	r2, r3, #1
   2d64c:	e000      	b.n	2d650 <getNextPacketId+0x1c>
   2d64e:	2201      	movs	r2, #1
   2d650:	687b      	ldr	r3, [r7, #4]
   2d652:	601a      	str	r2, [r3, #0]
   2d654:	687b      	ldr	r3, [r7, #4]
   2d656:	681b      	ldr	r3, [r3, #0]
}
   2d658:	0018      	movs	r0, r3
   2d65a:	46bd      	mov	sp, r7
   2d65c:	b002      	add	sp, #8
   2d65e:	bd80      	pop	{r7, pc}
   2d660:	0000ffff 	.word	0x0000ffff

0002d664 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2d664:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d666:	b087      	sub	sp, #28
   2d668:	af00      	add	r7, sp, #0
   2d66a:	60f8      	str	r0, [r7, #12]
   2d66c:	60b9      	str	r1, [r7, #8]
   2d66e:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2d670:	2301      	movs	r3, #1
   2d672:	425b      	negs	r3, r3
   2d674:	617b      	str	r3, [r7, #20]
        sent = 0;
   2d676:	2300      	movs	r3, #0
   2d678:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2d67a:	e01a      	b.n	2d6b2 <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2d67c:	68fb      	ldr	r3, [r7, #12]
   2d67e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2d680:	68dc      	ldr	r4, [r3, #12]
   2d682:	68fb      	ldr	r3, [r7, #12]
   2d684:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2d686:	68fb      	ldr	r3, [r7, #12]
   2d688:	691a      	ldr	r2, [r3, #16]
   2d68a:	693b      	ldr	r3, [r7, #16]
   2d68c:	18d6      	adds	r6, r2, r3
   2d68e:	687b      	ldr	r3, [r7, #4]
   2d690:	0018      	movs	r0, r3
   2d692:	4b1a      	ldr	r3, [pc, #104]	; (2d6fc <sendPacket+0x98>)
   2d694:	4798      	blx	r3
   2d696:	0003      	movs	r3, r0
   2d698:	68ba      	ldr	r2, [r7, #8]
   2d69a:	0031      	movs	r1, r6
   2d69c:	0028      	movs	r0, r5
   2d69e:	47a0      	blx	r4
   2d6a0:	0003      	movs	r3, r0
   2d6a2:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2d6a4:	697b      	ldr	r3, [r7, #20]
   2d6a6:	2b00      	cmp	r3, #0
   2d6a8:	db0e      	blt.n	2d6c8 <sendPacket+0x64>
            break;
        sent += rc;
   2d6aa:	693a      	ldr	r2, [r7, #16]
   2d6ac:	697b      	ldr	r3, [r7, #20]
   2d6ae:	18d3      	adds	r3, r2, r3
   2d6b0:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2d6b2:	693a      	ldr	r2, [r7, #16]
   2d6b4:	68bb      	ldr	r3, [r7, #8]
   2d6b6:	429a      	cmp	r2, r3
   2d6b8:	da07      	bge.n	2d6ca <sendPacket+0x66>
   2d6ba:	687b      	ldr	r3, [r7, #4]
   2d6bc:	0018      	movs	r0, r3
   2d6be:	4b10      	ldr	r3, [pc, #64]	; (2d700 <sendPacket+0x9c>)
   2d6c0:	4798      	blx	r3
   2d6c2:	1e03      	subs	r3, r0, #0
   2d6c4:	d0da      	beq.n	2d67c <sendPacket+0x18>
   2d6c6:	e000      	b.n	2d6ca <sendPacket+0x66>
            break;
   2d6c8:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2d6ca:	693a      	ldr	r2, [r7, #16]
   2d6cc:	68bb      	ldr	r3, [r7, #8]
   2d6ce:	429a      	cmp	r2, r3
   2d6d0:	d10b      	bne.n	2d6ea <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2d6d2:	68fb      	ldr	r3, [r7, #12]
   2d6d4:	3354      	adds	r3, #84	; 0x54
   2d6d6:	001a      	movs	r2, r3
   2d6d8:	68fb      	ldr	r3, [r7, #12]
   2d6da:	699b      	ldr	r3, [r3, #24]
   2d6dc:	0019      	movs	r1, r3
   2d6de:	0010      	movs	r0, r2
   2d6e0:	4b08      	ldr	r3, [pc, #32]	; (2d704 <sendPacket+0xa0>)
   2d6e2:	4798      	blx	r3
        rc = SUCCESS;
   2d6e4:	2300      	movs	r3, #0
   2d6e6:	617b      	str	r3, [r7, #20]
   2d6e8:	e002      	b.n	2d6f0 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2d6ea:	2301      	movs	r3, #1
   2d6ec:	425b      	negs	r3, r3
   2d6ee:	617b      	str	r3, [r7, #20]
    return rc;
   2d6f0:	697b      	ldr	r3, [r7, #20]
}
   2d6f2:	0018      	movs	r0, r3
   2d6f4:	46bd      	mov	sp, r7
   2d6f6:	b007      	add	sp, #28
   2d6f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d6fa:	46c0      	nop			; (mov r8, r8)
   2d6fc:	0002e4c5 	.word	0x0002e4c5
   2d700:	0002e449 	.word	0x0002e449
   2d704:	0002e49d 	.word	0x0002e49d

0002d708 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2d708:	b580      	push	{r7, lr}
   2d70a:	b086      	sub	sp, #24
   2d70c:	af00      	add	r7, sp, #0
   2d70e:	60f8      	str	r0, [r7, #12]
   2d710:	60b9      	str	r1, [r7, #8]
   2d712:	607a      	str	r2, [r7, #4]
   2d714:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2d716:	68fb      	ldr	r3, [r7, #12]
   2d718:	68ba      	ldr	r2, [r7, #8]
   2d71a:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2d71c:	2300      	movs	r3, #0
   2d71e:	617b      	str	r3, [r7, #20]
   2d720:	e00a      	b.n	2d738 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2d722:	68fa      	ldr	r2, [r7, #12]
   2d724:	697b      	ldr	r3, [r7, #20]
   2d726:	3304      	adds	r3, #4
   2d728:	00db      	lsls	r3, r3, #3
   2d72a:	18d3      	adds	r3, r2, r3
   2d72c:	3304      	adds	r3, #4
   2d72e:	2200      	movs	r2, #0
   2d730:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2d732:	697b      	ldr	r3, [r7, #20]
   2d734:	3301      	adds	r3, #1
   2d736:	617b      	str	r3, [r7, #20]
   2d738:	697b      	ldr	r3, [r7, #20]
   2d73a:	2b04      	cmp	r3, #4
   2d73c:	ddf1      	ble.n	2d722 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2d73e:	68fb      	ldr	r3, [r7, #12]
   2d740:	687a      	ldr	r2, [r7, #4]
   2d742:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2d744:	68fb      	ldr	r3, [r7, #12]
   2d746:	683a      	ldr	r2, [r7, #0]
   2d748:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2d74a:	68fb      	ldr	r3, [r7, #12]
   2d74c:	6a3a      	ldr	r2, [r7, #32]
   2d74e:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2d750:	68fb      	ldr	r3, [r7, #12]
   2d752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2d754:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2d756:	68fb      	ldr	r3, [r7, #12]
   2d758:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d75a:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2d75c:	68fb      	ldr	r3, [r7, #12]
   2d75e:	2200      	movs	r2, #0
   2d760:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2d762:	68fb      	ldr	r3, [r7, #12]
   2d764:	2200      	movs	r2, #0
   2d766:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2d768:	68fb      	ldr	r3, [r7, #12]
   2d76a:	2200      	movs	r2, #0
   2d76c:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2d76e:	68fb      	ldr	r3, [r7, #12]
   2d770:	2201      	movs	r2, #1
   2d772:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2d774:	68fb      	ldr	r3, [r7, #12]
   2d776:	3354      	adds	r3, #84	; 0x54
   2d778:	0018      	movs	r0, r3
   2d77a:	4b03      	ldr	r3, [pc, #12]	; (2d788 <MQTTClientInit+0x80>)
   2d77c:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2d77e:	46c0      	nop			; (mov r8, r8)
   2d780:	46bd      	mov	sp, r7
   2d782:	b006      	add	sp, #24
   2d784:	bd80      	pop	{r7, pc}
   2d786:	46c0      	nop			; (mov r8, r8)
   2d788:	0002e4ed 	.word	0x0002e4ed

0002d78c <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2d78c:	b590      	push	{r4, r7, lr}
   2d78e:	b08b      	sub	sp, #44	; 0x2c
   2d790:	af00      	add	r7, sp, #0
   2d792:	60f8      	str	r0, [r7, #12]
   2d794:	60b9      	str	r1, [r7, #8]
   2d796:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2d798:	2301      	movs	r3, #1
   2d79a:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2d79c:	2300      	movs	r3, #0
   2d79e:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2d7a0:	2304      	movs	r3, #4
   2d7a2:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2d7a4:	68bb      	ldr	r3, [r7, #8]
   2d7a6:	2200      	movs	r2, #0
   2d7a8:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2d7aa:	2301      	movs	r3, #1
   2d7ac:	425b      	negs	r3, r3
   2d7ae:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2d7b0:	6a3b      	ldr	r3, [r7, #32]
   2d7b2:	3301      	adds	r3, #1
   2d7b4:	623b      	str	r3, [r7, #32]
   2d7b6:	6a3a      	ldr	r2, [r7, #32]
   2d7b8:	69fb      	ldr	r3, [r7, #28]
   2d7ba:	429a      	cmp	r2, r3
   2d7bc:	dd03      	ble.n	2d7c6 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2d7be:	2301      	movs	r3, #1
   2d7c0:	425b      	negs	r3, r3
   2d7c2:	61bb      	str	r3, [r7, #24]
            goto exit;
   2d7c4:	e026      	b.n	2d814 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2d7c6:	68fb      	ldr	r3, [r7, #12]
   2d7c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2d7ca:	689c      	ldr	r4, [r3, #8]
   2d7cc:	68fb      	ldr	r3, [r7, #12]
   2d7ce:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2d7d0:	687b      	ldr	r3, [r7, #4]
   2d7d2:	2217      	movs	r2, #23
   2d7d4:	18b9      	adds	r1, r7, r2
   2d7d6:	2201      	movs	r2, #1
   2d7d8:	47a0      	blx	r4
   2d7da:	0003      	movs	r3, r0
   2d7dc:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2d7de:	69bb      	ldr	r3, [r7, #24]
   2d7e0:	2b01      	cmp	r3, #1
   2d7e2:	d116      	bne.n	2d812 <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2d7e4:	68bb      	ldr	r3, [r7, #8]
   2d7e6:	681a      	ldr	r2, [r3, #0]
   2d7e8:	2317      	movs	r3, #23
   2d7ea:	18fb      	adds	r3, r7, r3
   2d7ec:	781b      	ldrb	r3, [r3, #0]
   2d7ee:	0019      	movs	r1, r3
   2d7f0:	237f      	movs	r3, #127	; 0x7f
   2d7f2:	400b      	ands	r3, r1
   2d7f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2d7f6:	434b      	muls	r3, r1
   2d7f8:	18d2      	adds	r2, r2, r3
   2d7fa:	68bb      	ldr	r3, [r7, #8]
   2d7fc:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2d7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d800:	01db      	lsls	r3, r3, #7
   2d802:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2d804:	2317      	movs	r3, #23
   2d806:	18fb      	adds	r3, r7, r3
   2d808:	781b      	ldrb	r3, [r3, #0]
   2d80a:	b25b      	sxtb	r3, r3
   2d80c:	2b00      	cmp	r3, #0
   2d80e:	dbcc      	blt.n	2d7aa <decodePacket+0x1e>
   2d810:	e000      	b.n	2d814 <decodePacket+0x88>
            goto exit;
   2d812:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2d814:	6a3b      	ldr	r3, [r7, #32]
}
   2d816:	0018      	movs	r0, r3
   2d818:	46bd      	mov	sp, r7
   2d81a:	b00b      	add	sp, #44	; 0x2c
   2d81c:	bd90      	pop	{r4, r7, pc}
	...

0002d820 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2d820:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d822:	46c6      	mov	lr, r8
   2d824:	b500      	push	{lr}
   2d826:	b086      	sub	sp, #24
   2d828:	af00      	add	r7, sp, #0
   2d82a:	6078      	str	r0, [r7, #4]
   2d82c:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2d82e:	2301      	movs	r3, #1
   2d830:	425b      	negs	r3, r3
   2d832:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2d834:	2300      	movs	r3, #0
   2d836:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2d838:	2300      	movs	r3, #0
   2d83a:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2d83c:	2300      	movs	r3, #0
   2d83e:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2d840:	687b      	ldr	r3, [r7, #4]
   2d842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2d844:	689c      	ldr	r4, [r3, #8]
   2d846:	687b      	ldr	r3, [r7, #4]
   2d848:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2d84a:	687b      	ldr	r3, [r7, #4]
   2d84c:	695e      	ldr	r6, [r3, #20]
   2d84e:	683b      	ldr	r3, [r7, #0]
   2d850:	0018      	movs	r0, r3
   2d852:	4b2b      	ldr	r3, [pc, #172]	; (2d900 <readPacket+0xe0>)
   2d854:	4798      	blx	r3
   2d856:	0003      	movs	r3, r0
   2d858:	2201      	movs	r2, #1
   2d85a:	0031      	movs	r1, r6
   2d85c:	0028      	movs	r0, r5
   2d85e:	47a0      	blx	r4
   2d860:	0003      	movs	r3, r0
   2d862:	2b01      	cmp	r3, #1
   2d864:	d141      	bne.n	2d8ea <readPacket+0xca>
        goto exit;

    len = 1;
   2d866:	2301      	movs	r3, #1
   2d868:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2d86a:	683b      	ldr	r3, [r7, #0]
   2d86c:	0018      	movs	r0, r3
   2d86e:	4b24      	ldr	r3, [pc, #144]	; (2d900 <readPacket+0xe0>)
   2d870:	4798      	blx	r3
   2d872:	0002      	movs	r2, r0
   2d874:	2308      	movs	r3, #8
   2d876:	18f9      	adds	r1, r7, r3
   2d878:	687b      	ldr	r3, [r7, #4]
   2d87a:	0018      	movs	r0, r3
   2d87c:	4b21      	ldr	r3, [pc, #132]	; (2d904 <readPacket+0xe4>)
   2d87e:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2d880:	687b      	ldr	r3, [r7, #4]
   2d882:	695b      	ldr	r3, [r3, #20]
   2d884:	3301      	adds	r3, #1
   2d886:	68ba      	ldr	r2, [r7, #8]
   2d888:	0011      	movs	r1, r2
   2d88a:	0018      	movs	r0, r3
   2d88c:	4b1e      	ldr	r3, [pc, #120]	; (2d908 <readPacket+0xe8>)
   2d88e:	4798      	blx	r3
   2d890:	0002      	movs	r2, r0
   2d892:	693b      	ldr	r3, [r7, #16]
   2d894:	189b      	adds	r3, r3, r2
   2d896:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2d898:	68bb      	ldr	r3, [r7, #8]
   2d89a:	2b00      	cmp	r3, #0
   2d89c:	dd17      	ble.n	2d8ce <readPacket+0xae>
   2d89e:	687b      	ldr	r3, [r7, #4]
   2d8a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2d8a2:	689c      	ldr	r4, [r3, #8]
   2d8a4:	687b      	ldr	r3, [r7, #4]
   2d8a6:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2d8a8:	687b      	ldr	r3, [r7, #4]
   2d8aa:	695a      	ldr	r2, [r3, #20]
   2d8ac:	693b      	ldr	r3, [r7, #16]
   2d8ae:	18d6      	adds	r6, r2, r3
   2d8b0:	68bb      	ldr	r3, [r7, #8]
   2d8b2:	4698      	mov	r8, r3
   2d8b4:	683b      	ldr	r3, [r7, #0]
   2d8b6:	0018      	movs	r0, r3
   2d8b8:	4b11      	ldr	r3, [pc, #68]	; (2d900 <readPacket+0xe0>)
   2d8ba:	4798      	blx	r3
   2d8bc:	0003      	movs	r3, r0
   2d8be:	4642      	mov	r2, r8
   2d8c0:	0031      	movs	r1, r6
   2d8c2:	0028      	movs	r0, r5
   2d8c4:	47a0      	blx	r4
   2d8c6:	0002      	movs	r2, r0
   2d8c8:	68bb      	ldr	r3, [r7, #8]
   2d8ca:	429a      	cmp	r2, r3
   2d8cc:	d10f      	bne.n	2d8ee <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2d8ce:	687b      	ldr	r3, [r7, #4]
   2d8d0:	695b      	ldr	r3, [r3, #20]
   2d8d2:	781a      	ldrb	r2, [r3, #0]
   2d8d4:	230c      	movs	r3, #12
   2d8d6:	18fb      	adds	r3, r7, r3
   2d8d8:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2d8da:	230c      	movs	r3, #12
   2d8dc:	18fb      	adds	r3, r7, r3
   2d8de:	781b      	ldrb	r3, [r3, #0]
   2d8e0:	061b      	lsls	r3, r3, #24
   2d8e2:	0f1b      	lsrs	r3, r3, #28
   2d8e4:	b2db      	uxtb	r3, r3
   2d8e6:	617b      	str	r3, [r7, #20]
   2d8e8:	e002      	b.n	2d8f0 <readPacket+0xd0>
        goto exit;
   2d8ea:	46c0      	nop			; (mov r8, r8)
   2d8ec:	e000      	b.n	2d8f0 <readPacket+0xd0>
        goto exit;
   2d8ee:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2d8f0:	697b      	ldr	r3, [r7, #20]
}
   2d8f2:	0018      	movs	r0, r3
   2d8f4:	46bd      	mov	sp, r7
   2d8f6:	b006      	add	sp, #24
   2d8f8:	bc04      	pop	{r2}
   2d8fa:	4690      	mov	r8, r2
   2d8fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d8fe:	46c0      	nop			; (mov r8, r8)
   2d900:	0002e4c5 	.word	0x0002e4c5
   2d904:	0002d78d 	.word	0x0002d78d
   2d908:	0002f29d 	.word	0x0002f29d

0002d90c <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2d90c:	b580      	push	{r7, lr}
   2d90e:	b086      	sub	sp, #24
   2d910:	af00      	add	r7, sp, #0
   2d912:	6078      	str	r0, [r7, #4]
   2d914:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2d916:	687b      	ldr	r3, [r7, #4]
   2d918:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2d91a:	683b      	ldr	r3, [r7, #0]
   2d91c:	689b      	ldr	r3, [r3, #8]
   2d91e:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2d920:	683b      	ldr	r3, [r7, #0]
   2d922:	685b      	ldr	r3, [r3, #4]
   2d924:	001a      	movs	r2, r3
   2d926:	693b      	ldr	r3, [r7, #16]
   2d928:	189b      	adds	r3, r3, r2
   2d92a:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2d92c:	e039      	b.n	2d9a2 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2d92e:	693b      	ldr	r3, [r7, #16]
   2d930:	781b      	ldrb	r3, [r3, #0]
   2d932:	2b2f      	cmp	r3, #47	; 0x2f
   2d934:	d103      	bne.n	2d93e <isTopicMatched+0x32>
   2d936:	697b      	ldr	r3, [r7, #20]
   2d938:	781b      	ldrb	r3, [r3, #0]
   2d93a:	2b2f      	cmp	r3, #47	; 0x2f
   2d93c:	d13a      	bne.n	2d9b4 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2d93e:	697b      	ldr	r3, [r7, #20]
   2d940:	781b      	ldrb	r3, [r3, #0]
   2d942:	2b2b      	cmp	r3, #43	; 0x2b
   2d944:	d009      	beq.n	2d95a <isTopicMatched+0x4e>
   2d946:	697b      	ldr	r3, [r7, #20]
   2d948:	781b      	ldrb	r3, [r3, #0]
   2d94a:	2b23      	cmp	r3, #35	; 0x23
   2d94c:	d005      	beq.n	2d95a <isTopicMatched+0x4e>
   2d94e:	697b      	ldr	r3, [r7, #20]
   2d950:	781a      	ldrb	r2, [r3, #0]
   2d952:	693b      	ldr	r3, [r7, #16]
   2d954:	781b      	ldrb	r3, [r3, #0]
   2d956:	429a      	cmp	r2, r3
   2d958:	d12e      	bne.n	2d9b8 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2d95a:	697b      	ldr	r3, [r7, #20]
   2d95c:	781b      	ldrb	r3, [r3, #0]
   2d95e:	2b2b      	cmp	r3, #43	; 0x2b
   2d960:	d112      	bne.n	2d988 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2d962:	693b      	ldr	r3, [r7, #16]
   2d964:	3301      	adds	r3, #1
   2d966:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2d968:	e005      	b.n	2d976 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2d96a:	693b      	ldr	r3, [r7, #16]
   2d96c:	3301      	adds	r3, #1
   2d96e:	613b      	str	r3, [r7, #16]
   2d970:	693b      	ldr	r3, [r7, #16]
   2d972:	3301      	adds	r3, #1
   2d974:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2d976:	68fa      	ldr	r2, [r7, #12]
   2d978:	68bb      	ldr	r3, [r7, #8]
   2d97a:	429a      	cmp	r2, r3
   2d97c:	d20b      	bcs.n	2d996 <isTopicMatched+0x8a>
   2d97e:	68fb      	ldr	r3, [r7, #12]
   2d980:	781b      	ldrb	r3, [r3, #0]
   2d982:	2b2f      	cmp	r3, #47	; 0x2f
   2d984:	d1f1      	bne.n	2d96a <isTopicMatched+0x5e>
   2d986:	e006      	b.n	2d996 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2d988:	697b      	ldr	r3, [r7, #20]
   2d98a:	781b      	ldrb	r3, [r3, #0]
   2d98c:	2b23      	cmp	r3, #35	; 0x23
   2d98e:	d102      	bne.n	2d996 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2d990:	68bb      	ldr	r3, [r7, #8]
   2d992:	3b01      	subs	r3, #1
   2d994:	613b      	str	r3, [r7, #16]
        curf++;
   2d996:	697b      	ldr	r3, [r7, #20]
   2d998:	3301      	adds	r3, #1
   2d99a:	617b      	str	r3, [r7, #20]
        curn++;
   2d99c:	693b      	ldr	r3, [r7, #16]
   2d99e:	3301      	adds	r3, #1
   2d9a0:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2d9a2:	697b      	ldr	r3, [r7, #20]
   2d9a4:	781b      	ldrb	r3, [r3, #0]
   2d9a6:	2b00      	cmp	r3, #0
   2d9a8:	d007      	beq.n	2d9ba <isTopicMatched+0xae>
   2d9aa:	693a      	ldr	r2, [r7, #16]
   2d9ac:	68bb      	ldr	r3, [r7, #8]
   2d9ae:	429a      	cmp	r2, r3
   2d9b0:	d3bd      	bcc.n	2d92e <isTopicMatched+0x22>
   2d9b2:	e002      	b.n	2d9ba <isTopicMatched+0xae>
            break;
   2d9b4:	46c0      	nop			; (mov r8, r8)
   2d9b6:	e000      	b.n	2d9ba <isTopicMatched+0xae>
            break;
   2d9b8:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2d9ba:	693a      	ldr	r2, [r7, #16]
   2d9bc:	68bb      	ldr	r3, [r7, #8]
   2d9be:	429a      	cmp	r2, r3
   2d9c0:	d105      	bne.n	2d9ce <isTopicMatched+0xc2>
   2d9c2:	697b      	ldr	r3, [r7, #20]
   2d9c4:	781b      	ldrb	r3, [r3, #0]
   2d9c6:	2b00      	cmp	r3, #0
   2d9c8:	d101      	bne.n	2d9ce <isTopicMatched+0xc2>
   2d9ca:	2301      	movs	r3, #1
   2d9cc:	e000      	b.n	2d9d0 <isTopicMatched+0xc4>
   2d9ce:	2300      	movs	r3, #0
   2d9d0:	b2db      	uxtb	r3, r3
}
   2d9d2:	0018      	movs	r0, r3
   2d9d4:	46bd      	mov	sp, r7
   2d9d6:	b006      	add	sp, #24
   2d9d8:	bd80      	pop	{r7, pc}
	...

0002d9dc <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2d9dc:	b580      	push	{r7, lr}
   2d9de:	b08a      	sub	sp, #40	; 0x28
   2d9e0:	af00      	add	r7, sp, #0
   2d9e2:	60f8      	str	r0, [r7, #12]
   2d9e4:	60b9      	str	r1, [r7, #8]
   2d9e6:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2d9e8:	2301      	movs	r3, #1
   2d9ea:	425b      	negs	r3, r3
   2d9ec:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2d9ee:	2300      	movs	r3, #0
   2d9f0:	627b      	str	r3, [r7, #36]	; 0x24
   2d9f2:	e044      	b.n	2da7e <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2d9f4:	68fa      	ldr	r2, [r7, #12]
   2d9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d9f8:	3304      	adds	r3, #4
   2d9fa:	00db      	lsls	r3, r3, #3
   2d9fc:	18d3      	adds	r3, r2, r3
   2d9fe:	3304      	adds	r3, #4
   2da00:	681b      	ldr	r3, [r3, #0]
   2da02:	2b00      	cmp	r3, #0
   2da04:	d038      	beq.n	2da78 <deliverMessage+0x9c>
   2da06:	68fa      	ldr	r2, [r7, #12]
   2da08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2da0a:	3304      	adds	r3, #4
   2da0c:	00db      	lsls	r3, r3, #3
   2da0e:	18d3      	adds	r3, r2, r3
   2da10:	3304      	adds	r3, #4
   2da12:	681a      	ldr	r2, [r3, #0]
   2da14:	68bb      	ldr	r3, [r7, #8]
   2da16:	0011      	movs	r1, r2
   2da18:	0018      	movs	r0, r3
   2da1a:	4b28      	ldr	r3, [pc, #160]	; (2dabc <deliverMessage+0xe0>)
   2da1c:	4798      	blx	r3
   2da1e:	1e03      	subs	r3, r0, #0
   2da20:	d10d      	bne.n	2da3e <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2da22:	68fa      	ldr	r2, [r7, #12]
   2da24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2da26:	3304      	adds	r3, #4
   2da28:	00db      	lsls	r3, r3, #3
   2da2a:	18d3      	adds	r3, r2, r3
   2da2c:	3304      	adds	r3, #4
   2da2e:	681b      	ldr	r3, [r3, #0]
   2da30:	68ba      	ldr	r2, [r7, #8]
   2da32:	0011      	movs	r1, r2
   2da34:	0018      	movs	r0, r3
   2da36:	4b22      	ldr	r3, [pc, #136]	; (2dac0 <deliverMessage+0xe4>)
   2da38:	4798      	blx	r3
   2da3a:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2da3c:	d01c      	beq.n	2da78 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2da3e:	68fa      	ldr	r2, [r7, #12]
   2da40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2da42:	3304      	adds	r3, #4
   2da44:	00db      	lsls	r3, r3, #3
   2da46:	18d3      	adds	r3, r2, r3
   2da48:	3308      	adds	r3, #8
   2da4a:	681b      	ldr	r3, [r3, #0]
   2da4c:	2b00      	cmp	r3, #0
   2da4e:	d013      	beq.n	2da78 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2da50:	687a      	ldr	r2, [r7, #4]
   2da52:	68b9      	ldr	r1, [r7, #8]
   2da54:	2318      	movs	r3, #24
   2da56:	18fb      	adds	r3, r7, r3
   2da58:	0018      	movs	r0, r3
   2da5a:	4b1a      	ldr	r3, [pc, #104]	; (2dac4 <deliverMessage+0xe8>)
   2da5c:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2da5e:	68fa      	ldr	r2, [r7, #12]
   2da60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2da62:	3304      	adds	r3, #4
   2da64:	00db      	lsls	r3, r3, #3
   2da66:	18d3      	adds	r3, r2, r3
   2da68:	3308      	adds	r3, #8
   2da6a:	681b      	ldr	r3, [r3, #0]
   2da6c:	2218      	movs	r2, #24
   2da6e:	18ba      	adds	r2, r7, r2
   2da70:	0010      	movs	r0, r2
   2da72:	4798      	blx	r3
                rc = SUCCESS;
   2da74:	2300      	movs	r3, #0
   2da76:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2da78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2da7a:	3301      	adds	r3, #1
   2da7c:	627b      	str	r3, [r7, #36]	; 0x24
   2da7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2da80:	2b04      	cmp	r3, #4
   2da82:	ddb7      	ble.n	2d9f4 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2da84:	6a3b      	ldr	r3, [r7, #32]
   2da86:	3301      	adds	r3, #1
   2da88:	d112      	bne.n	2dab0 <deliverMessage+0xd4>
   2da8a:	68fb      	ldr	r3, [r7, #12]
   2da8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2da8e:	2b00      	cmp	r3, #0
   2da90:	d00e      	beq.n	2dab0 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2da92:	687a      	ldr	r2, [r7, #4]
   2da94:	68b9      	ldr	r1, [r7, #8]
   2da96:	2310      	movs	r3, #16
   2da98:	18fb      	adds	r3, r7, r3
   2da9a:	0018      	movs	r0, r3
   2da9c:	4b09      	ldr	r3, [pc, #36]	; (2dac4 <deliverMessage+0xe8>)
   2da9e:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2daa0:	68fb      	ldr	r3, [r7, #12]
   2daa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2daa4:	2210      	movs	r2, #16
   2daa6:	18ba      	adds	r2, r7, r2
   2daa8:	0010      	movs	r0, r2
   2daaa:	4798      	blx	r3
        rc = SUCCESS;
   2daac:	2300      	movs	r3, #0
   2daae:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2dab0:	6a3b      	ldr	r3, [r7, #32]
}
   2dab2:	0018      	movs	r0, r3
   2dab4:	46bd      	mov	sp, r7
   2dab6:	b00a      	add	sp, #40	; 0x28
   2dab8:	bd80      	pop	{r7, pc}
   2daba:	46c0      	nop			; (mov r8, r8)
   2dabc:	0002f6b1 	.word	0x0002f6b1
   2dac0:	0002d90d 	.word	0x0002d90d
   2dac4:	0002d615 	.word	0x0002d615

0002dac8 <keepalive>:


int keepalive(MQTTClient* c)
{
   2dac8:	b580      	push	{r7, lr}
   2daca:	b088      	sub	sp, #32
   2dacc:	af00      	add	r7, sp, #0
   2dace:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2dad0:	2301      	movs	r3, #1
   2dad2:	425b      	negs	r3, r3
   2dad4:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2dad6:	687b      	ldr	r3, [r7, #4]
   2dad8:	699b      	ldr	r3, [r3, #24]
   2dada:	2b00      	cmp	r3, #0
   2dadc:	d102      	bne.n	2dae4 <keepalive+0x1c>
    {
        rc = SUCCESS;
   2dade:	2300      	movs	r3, #0
   2dae0:	61fb      	str	r3, [r7, #28]
        goto exit;
   2dae2:	e033      	b.n	2db4c <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2dae4:	687b      	ldr	r3, [r7, #4]
   2dae6:	3354      	adds	r3, #84	; 0x54
   2dae8:	0018      	movs	r0, r3
   2daea:	4b1b      	ldr	r3, [pc, #108]	; (2db58 <keepalive+0x90>)
   2daec:	4798      	blx	r3
   2daee:	1e03      	subs	r3, r0, #0
   2daf0:	d02c      	beq.n	2db4c <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2daf2:	687b      	ldr	r3, [r7, #4]
   2daf4:	7f1b      	ldrb	r3, [r3, #28]
   2daf6:	2b00      	cmp	r3, #0
   2daf8:	d128      	bne.n	2db4c <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2dafa:	230c      	movs	r3, #12
   2dafc:	18fb      	adds	r3, r7, r3
   2dafe:	0018      	movs	r0, r3
   2db00:	4b16      	ldr	r3, [pc, #88]	; (2db5c <keepalive+0x94>)
   2db02:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2db04:	23fa      	movs	r3, #250	; 0xfa
   2db06:	009a      	lsls	r2, r3, #2
   2db08:	230c      	movs	r3, #12
   2db0a:	18fb      	adds	r3, r7, r3
   2db0c:	0011      	movs	r1, r2
   2db0e:	0018      	movs	r0, r3
   2db10:	4b13      	ldr	r3, [pc, #76]	; (2db60 <keepalive+0x98>)
   2db12:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2db14:	687b      	ldr	r3, [r7, #4]
   2db16:	691a      	ldr	r2, [r3, #16]
   2db18:	687b      	ldr	r3, [r7, #4]
   2db1a:	689b      	ldr	r3, [r3, #8]
   2db1c:	0019      	movs	r1, r3
   2db1e:	0010      	movs	r0, r2
   2db20:	4b10      	ldr	r3, [pc, #64]	; (2db64 <keepalive+0x9c>)
   2db22:	4798      	blx	r3
   2db24:	0003      	movs	r3, r0
   2db26:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2db28:	69bb      	ldr	r3, [r7, #24]
   2db2a:	2b00      	cmp	r3, #0
   2db2c:	dd0e      	ble.n	2db4c <keepalive+0x84>
   2db2e:	230c      	movs	r3, #12
   2db30:	18fa      	adds	r2, r7, r3
   2db32:	69b9      	ldr	r1, [r7, #24]
   2db34:	687b      	ldr	r3, [r7, #4]
   2db36:	0018      	movs	r0, r3
   2db38:	4b0b      	ldr	r3, [pc, #44]	; (2db68 <keepalive+0xa0>)
   2db3a:	4798      	blx	r3
   2db3c:	0003      	movs	r3, r0
   2db3e:	61fb      	str	r3, [r7, #28]
   2db40:	69fb      	ldr	r3, [r7, #28]
   2db42:	2b00      	cmp	r3, #0
   2db44:	d102      	bne.n	2db4c <keepalive+0x84>
                c->ping_outstanding = 1;
   2db46:	687b      	ldr	r3, [r7, #4]
   2db48:	2201      	movs	r2, #1
   2db4a:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2db4c:	69fb      	ldr	r3, [r7, #28]
}
   2db4e:	0018      	movs	r0, r3
   2db50:	46bd      	mov	sp, r7
   2db52:	b008      	add	sp, #32
   2db54:	bd80      	pop	{r7, pc}
   2db56:	46c0      	nop			; (mov r8, r8)
   2db58:	0002e449 	.word	0x0002e449
   2db5c:	0002e4ed 	.word	0x0002e4ed
   2db60:	0002e475 	.word	0x0002e475
   2db64:	0002f0c1 	.word	0x0002f0c1
   2db68:	0002d665 	.word	0x0002d665

0002db6c <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2db6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2db6e:	b095      	sub	sp, #84	; 0x54
   2db70:	af06      	add	r7, sp, #24
   2db72:	6078      	str	r0, [r7, #4]
   2db74:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2db76:	683a      	ldr	r2, [r7, #0]
   2db78:	687b      	ldr	r3, [r7, #4]
   2db7a:	0011      	movs	r1, r2
   2db7c:	0018      	movs	r0, r3
   2db7e:	4b70      	ldr	r3, [pc, #448]	; (2dd40 <cycle+0x1d4>)
   2db80:	4798      	blx	r3
   2db82:	0002      	movs	r2, r0
   2db84:	232e      	movs	r3, #46	; 0x2e
   2db86:	18fb      	adds	r3, r7, r3
   2db88:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2db8a:	2300      	movs	r3, #0
   2db8c:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2db8e:	2300      	movs	r3, #0
   2db90:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2db92:	232e      	movs	r3, #46	; 0x2e
   2db94:	18fb      	adds	r3, r7, r3
   2db96:	881b      	ldrh	r3, [r3, #0]
   2db98:	2b0d      	cmp	r3, #13
   2db9a:	d900      	bls.n	2db9e <cycle+0x32>
   2db9c:	e0bd      	b.n	2dd1a <cycle+0x1ae>
   2db9e:	009a      	lsls	r2, r3, #2
   2dba0:	4b68      	ldr	r3, [pc, #416]	; (2dd44 <cycle+0x1d8>)
   2dba2:	18d3      	adds	r3, r2, r3
   2dba4:	681b      	ldr	r3, [r3, #0]
   2dba6:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2dba8:	687b      	ldr	r3, [r7, #4]
   2dbaa:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2dbac:	687b      	ldr	r3, [r7, #4]
   2dbae:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2dbb0:	001e      	movs	r6, r3
   2dbb2:	2310      	movs	r3, #16
   2dbb4:	18fb      	adds	r3, r7, r3
   2dbb6:	1d1d      	adds	r5, r3, #4
   2dbb8:	2310      	movs	r3, #16
   2dbba:	18fb      	adds	r3, r7, r3
   2dbbc:	1c5c      	adds	r4, r3, #1
   2dbbe:	230c      	movs	r3, #12
   2dbc0:	18f9      	adds	r1, r7, r3
   2dbc2:	2310      	movs	r3, #16
   2dbc4:	18fb      	adds	r3, r7, r3
   2dbc6:	1c98      	adds	r0, r3, #2
   2dbc8:	9604      	str	r6, [sp, #16]
   2dbca:	9203      	str	r2, [sp, #12]
   2dbcc:	2310      	movs	r3, #16
   2dbce:	18fb      	adds	r3, r7, r3
   2dbd0:	330c      	adds	r3, #12
   2dbd2:	9302      	str	r3, [sp, #8]
   2dbd4:	2310      	movs	r3, #16
   2dbd6:	18fb      	adds	r3, r7, r3
   2dbd8:	3308      	adds	r3, #8
   2dbda:	9301      	str	r3, [sp, #4]
   2dbdc:	2320      	movs	r3, #32
   2dbde:	18fb      	adds	r3, r7, r3
   2dbe0:	9300      	str	r3, [sp, #0]
   2dbe2:	002b      	movs	r3, r5
   2dbe4:	0022      	movs	r2, r4
   2dbe6:	4c58      	ldr	r4, [pc, #352]	; (2dd48 <cycle+0x1dc>)
   2dbe8:	47a0      	blx	r4
   2dbea:	0003      	movs	r3, r0
   2dbec:	2b01      	cmp	r3, #1
   2dbee:	d000      	beq.n	2dbf2 <cycle+0x86>
   2dbf0:	e098      	b.n	2dd24 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2dbf2:	68fb      	ldr	r3, [r7, #12]
   2dbf4:	b2da      	uxtb	r2, r3
   2dbf6:	2310      	movs	r3, #16
   2dbf8:	18fb      	adds	r3, r7, r3
   2dbfa:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2dbfc:	2310      	movs	r3, #16
   2dbfe:	18fa      	adds	r2, r7, r3
   2dc00:	2320      	movs	r3, #32
   2dc02:	18f9      	adds	r1, r7, r3
   2dc04:	687b      	ldr	r3, [r7, #4]
   2dc06:	0018      	movs	r0, r3
   2dc08:	4b50      	ldr	r3, [pc, #320]	; (2dd4c <cycle+0x1e0>)
   2dc0a:	4798      	blx	r3
            if (msg.qos != QOS0)
   2dc0c:	2310      	movs	r3, #16
   2dc0e:	18fb      	adds	r3, r7, r3
   2dc10:	781b      	ldrb	r3, [r3, #0]
   2dc12:	2b00      	cmp	r3, #0
   2dc14:	d100      	bne.n	2dc18 <cycle+0xac>
   2dc16:	e07d      	b.n	2dd14 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2dc18:	2310      	movs	r3, #16
   2dc1a:	18fb      	adds	r3, r7, r3
   2dc1c:	781b      	ldrb	r3, [r3, #0]
   2dc1e:	2b01      	cmp	r3, #1
   2dc20:	d10f      	bne.n	2dc42 <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2dc22:	687b      	ldr	r3, [r7, #4]
   2dc24:	6918      	ldr	r0, [r3, #16]
   2dc26:	687b      	ldr	r3, [r7, #4]
   2dc28:	689b      	ldr	r3, [r3, #8]
   2dc2a:	0019      	movs	r1, r3
   2dc2c:	2310      	movs	r3, #16
   2dc2e:	18fb      	adds	r3, r7, r3
   2dc30:	889b      	ldrh	r3, [r3, #4]
   2dc32:	9300      	str	r3, [sp, #0]
   2dc34:	2300      	movs	r3, #0
   2dc36:	2204      	movs	r2, #4
   2dc38:	4c45      	ldr	r4, [pc, #276]	; (2dd50 <cycle+0x1e4>)
   2dc3a:	47a0      	blx	r4
   2dc3c:	0003      	movs	r3, r0
   2dc3e:	637b      	str	r3, [r7, #52]	; 0x34
   2dc40:	e013      	b.n	2dc6a <cycle+0xfe>
                else if (msg.qos == QOS2)
   2dc42:	2310      	movs	r3, #16
   2dc44:	18fb      	adds	r3, r7, r3
   2dc46:	781b      	ldrb	r3, [r3, #0]
   2dc48:	2b02      	cmp	r3, #2
   2dc4a:	d10e      	bne.n	2dc6a <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2dc4c:	687b      	ldr	r3, [r7, #4]
   2dc4e:	6918      	ldr	r0, [r3, #16]
   2dc50:	687b      	ldr	r3, [r7, #4]
   2dc52:	689b      	ldr	r3, [r3, #8]
   2dc54:	0019      	movs	r1, r3
   2dc56:	2310      	movs	r3, #16
   2dc58:	18fb      	adds	r3, r7, r3
   2dc5a:	889b      	ldrh	r3, [r3, #4]
   2dc5c:	9300      	str	r3, [sp, #0]
   2dc5e:	2300      	movs	r3, #0
   2dc60:	2205      	movs	r2, #5
   2dc62:	4c3b      	ldr	r4, [pc, #236]	; (2dd50 <cycle+0x1e4>)
   2dc64:	47a0      	blx	r4
   2dc66:	0003      	movs	r3, r0
   2dc68:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2dc6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2dc6c:	2b00      	cmp	r3, #0
   2dc6e:	dc03      	bgt.n	2dc78 <cycle+0x10c>
                    rc = FAILURE;
   2dc70:	2301      	movs	r3, #1
   2dc72:	425b      	negs	r3, r3
   2dc74:	633b      	str	r3, [r7, #48]	; 0x30
   2dc76:	e007      	b.n	2dc88 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2dc78:	683a      	ldr	r2, [r7, #0]
   2dc7a:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2dc7c:	687b      	ldr	r3, [r7, #4]
   2dc7e:	0018      	movs	r0, r3
   2dc80:	4b34      	ldr	r3, [pc, #208]	; (2dd54 <cycle+0x1e8>)
   2dc82:	4798      	blx	r3
   2dc84:	0003      	movs	r3, r0
   2dc86:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2dc88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2dc8a:	3301      	adds	r3, #1
   2dc8c:	d142      	bne.n	2dd14 <cycle+0x1a8>
                    goto exit; // there was a problem
   2dc8e:	46c0      	nop			; (mov r8, r8)
   2dc90:	e049      	b.n	2dd26 <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2dc92:	687b      	ldr	r3, [r7, #4]
   2dc94:	695c      	ldr	r4, [r3, #20]
   2dc96:	687b      	ldr	r3, [r7, #4]
   2dc98:	68db      	ldr	r3, [r3, #12]
   2dc9a:	220a      	movs	r2, #10
   2dc9c:	18ba      	adds	r2, r7, r2
   2dc9e:	2109      	movs	r1, #9
   2dca0:	1879      	adds	r1, r7, r1
   2dca2:	2008      	movs	r0, #8
   2dca4:	1838      	adds	r0, r7, r0
   2dca6:	9300      	str	r3, [sp, #0]
   2dca8:	0023      	movs	r3, r4
   2dcaa:	4c2b      	ldr	r4, [pc, #172]	; (2dd58 <cycle+0x1ec>)
   2dcac:	47a0      	blx	r4
   2dcae:	0003      	movs	r3, r0
   2dcb0:	2b01      	cmp	r3, #1
   2dcb2:	d003      	beq.n	2dcbc <cycle+0x150>
                rc = FAILURE;
   2dcb4:	2301      	movs	r3, #1
   2dcb6:	425b      	negs	r3, r3
   2dcb8:	633b      	str	r3, [r7, #48]	; 0x30
   2dcba:	e023      	b.n	2dd04 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2dcbc:	687b      	ldr	r3, [r7, #4]
   2dcbe:	6918      	ldr	r0, [r3, #16]
   2dcc0:	687b      	ldr	r3, [r7, #4]
   2dcc2:	689b      	ldr	r3, [r3, #8]
   2dcc4:	0019      	movs	r1, r3
   2dcc6:	230a      	movs	r3, #10
   2dcc8:	18fb      	adds	r3, r7, r3
   2dcca:	881b      	ldrh	r3, [r3, #0]
   2dccc:	9300      	str	r3, [sp, #0]
   2dcce:	2300      	movs	r3, #0
   2dcd0:	2206      	movs	r2, #6
   2dcd2:	4c1f      	ldr	r4, [pc, #124]	; (2dd50 <cycle+0x1e4>)
   2dcd4:	47a0      	blx	r4
   2dcd6:	0003      	movs	r3, r0
   2dcd8:	637b      	str	r3, [r7, #52]	; 0x34
   2dcda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2dcdc:	2b00      	cmp	r3, #0
   2dcde:	dc03      	bgt.n	2dce8 <cycle+0x17c>
                rc = FAILURE;
   2dce0:	2301      	movs	r3, #1
   2dce2:	425b      	negs	r3, r3
   2dce4:	633b      	str	r3, [r7, #48]	; 0x30
   2dce6:	e00d      	b.n	2dd04 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2dce8:	683a      	ldr	r2, [r7, #0]
   2dcea:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2dcec:	687b      	ldr	r3, [r7, #4]
   2dcee:	0018      	movs	r0, r3
   2dcf0:	4b18      	ldr	r3, [pc, #96]	; (2dd54 <cycle+0x1e8>)
   2dcf2:	4798      	blx	r3
   2dcf4:	0003      	movs	r3, r0
   2dcf6:	633b      	str	r3, [r7, #48]	; 0x30
   2dcf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2dcfa:	2b00      	cmp	r3, #0
   2dcfc:	d002      	beq.n	2dd04 <cycle+0x198>
                rc = FAILURE; // there was a problem
   2dcfe:	2301      	movs	r3, #1
   2dd00:	425b      	negs	r3, r3
   2dd02:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2dd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2dd06:	3301      	adds	r3, #1
   2dd08:	d106      	bne.n	2dd18 <cycle+0x1ac>
                goto exit; // there was a problem
   2dd0a:	e00c      	b.n	2dd26 <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2dd0c:	687b      	ldr	r3, [r7, #4]
   2dd0e:	2200      	movs	r2, #0
   2dd10:	771a      	strb	r2, [r3, #28]
            break;
   2dd12:	e002      	b.n	2dd1a <cycle+0x1ae>
            break;
   2dd14:	46c0      	nop			; (mov r8, r8)
   2dd16:	e000      	b.n	2dd1a <cycle+0x1ae>
            break;
   2dd18:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2dd1a:	687b      	ldr	r3, [r7, #4]
   2dd1c:	0018      	movs	r0, r3
   2dd1e:	4b0f      	ldr	r3, [pc, #60]	; (2dd5c <cycle+0x1f0>)
   2dd20:	4798      	blx	r3
   2dd22:	e000      	b.n	2dd26 <cycle+0x1ba>
                goto exit;
   2dd24:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2dd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2dd28:	2b00      	cmp	r3, #0
   2dd2a:	d103      	bne.n	2dd34 <cycle+0x1c8>
        rc = packet_type;
   2dd2c:	232e      	movs	r3, #46	; 0x2e
   2dd2e:	18fb      	adds	r3, r7, r3
   2dd30:	881b      	ldrh	r3, [r3, #0]
   2dd32:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2dd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2dd36:	0018      	movs	r0, r3
   2dd38:	46bd      	mov	sp, r7
   2dd3a:	b00f      	add	sp, #60	; 0x3c
   2dd3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2dd3e:	46c0      	nop			; (mov r8, r8)
   2dd40:	0002d821 	.word	0x0002d821
   2dd44:	00039574 	.word	0x00039574
   2dd48:	0002f0e5 	.word	0x0002f0e5
   2dd4c:	0002d9dd 	.word	0x0002d9dd
   2dd50:	0002f8dd 	.word	0x0002f8dd
   2dd54:	0002d665 	.word	0x0002d665
   2dd58:	0002f1e9 	.word	0x0002f1e9
   2dd5c:	0002dac9 	.word	0x0002dac9

0002dd60 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2dd60:	b580      	push	{r7, lr}
   2dd62:	b086      	sub	sp, #24
   2dd64:	af00      	add	r7, sp, #0
   2dd66:	6078      	str	r0, [r7, #4]
   2dd68:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2dd6a:	2300      	movs	r3, #0
   2dd6c:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2dd6e:	2308      	movs	r3, #8
   2dd70:	18fb      	adds	r3, r7, r3
   2dd72:	0018      	movs	r0, r3
   2dd74:	4b11      	ldr	r3, [pc, #68]	; (2ddbc <MQTTYield+0x5c>)
   2dd76:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2dd78:	683a      	ldr	r2, [r7, #0]
   2dd7a:	2308      	movs	r3, #8
   2dd7c:	18fb      	adds	r3, r7, r3
   2dd7e:	0011      	movs	r1, r2
   2dd80:	0018      	movs	r0, r3
   2dd82:	4b0f      	ldr	r3, [pc, #60]	; (2ddc0 <MQTTYield+0x60>)
   2dd84:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2dd86:	2308      	movs	r3, #8
   2dd88:	18fa      	adds	r2, r7, r3
   2dd8a:	687b      	ldr	r3, [r7, #4]
   2dd8c:	0011      	movs	r1, r2
   2dd8e:	0018      	movs	r0, r3
   2dd90:	4b0c      	ldr	r3, [pc, #48]	; (2ddc4 <MQTTYield+0x64>)
   2dd92:	4798      	blx	r3
   2dd94:	0003      	movs	r3, r0
   2dd96:	3301      	adds	r3, #1
   2dd98:	d103      	bne.n	2dda2 <MQTTYield+0x42>
        {
            rc = FAILURE;
   2dd9a:	2301      	movs	r3, #1
   2dd9c:	425b      	negs	r3, r3
   2dd9e:	617b      	str	r3, [r7, #20]
            break;
   2dda0:	e006      	b.n	2ddb0 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2dda2:	2308      	movs	r3, #8
   2dda4:	18fb      	adds	r3, r7, r3
   2dda6:	0018      	movs	r0, r3
   2dda8:	4b07      	ldr	r3, [pc, #28]	; (2ddc8 <MQTTYield+0x68>)
   2ddaa:	4798      	blx	r3
   2ddac:	1e03      	subs	r3, r0, #0
   2ddae:	d0ea      	beq.n	2dd86 <MQTTYield+0x26>
        
    return rc;
   2ddb0:	697b      	ldr	r3, [r7, #20]
}
   2ddb2:	0018      	movs	r0, r3
   2ddb4:	46bd      	mov	sp, r7
   2ddb6:	b006      	add	sp, #24
   2ddb8:	bd80      	pop	{r7, pc}
   2ddba:	46c0      	nop			; (mov r8, r8)
   2ddbc:	0002e4ed 	.word	0x0002e4ed
   2ddc0:	0002e475 	.word	0x0002e475
   2ddc4:	0002db6d 	.word	0x0002db6d
   2ddc8:	0002e449 	.word	0x0002e449

0002ddcc <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2ddcc:	b580      	push	{r7, lr}
   2ddce:	b086      	sub	sp, #24
   2ddd0:	af00      	add	r7, sp, #0
   2ddd2:	60f8      	str	r0, [r7, #12]
   2ddd4:	60b9      	str	r1, [r7, #8]
   2ddd6:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2ddd8:	2301      	movs	r3, #1
   2ddda:	425b      	negs	r3, r3
   2dddc:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2ddde:	687b      	ldr	r3, [r7, #4]
   2dde0:	0018      	movs	r0, r3
   2dde2:	4b0b      	ldr	r3, [pc, #44]	; (2de10 <waitfor+0x44>)
   2dde4:	4798      	blx	r3
   2dde6:	1e03      	subs	r3, r0, #0
   2dde8:	d10c      	bne.n	2de04 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2ddea:	687a      	ldr	r2, [r7, #4]
   2ddec:	68fb      	ldr	r3, [r7, #12]
   2ddee:	0011      	movs	r1, r2
   2ddf0:	0018      	movs	r0, r3
   2ddf2:	4b08      	ldr	r3, [pc, #32]	; (2de14 <waitfor+0x48>)
   2ddf4:	4798      	blx	r3
   2ddf6:	0003      	movs	r3, r0
   2ddf8:	617b      	str	r3, [r7, #20]
   2ddfa:	697a      	ldr	r2, [r7, #20]
   2ddfc:	68bb      	ldr	r3, [r7, #8]
   2ddfe:	429a      	cmp	r2, r3
   2de00:	d1ed      	bne.n	2ddde <waitfor+0x12>
   2de02:	e000      	b.n	2de06 <waitfor+0x3a>
            break; // we timed out
   2de04:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2de06:	697b      	ldr	r3, [r7, #20]
}
   2de08:	0018      	movs	r0, r3
   2de0a:	46bd      	mov	sp, r7
   2de0c:	b006      	add	sp, #24
   2de0e:	bd80      	pop	{r7, pc}
   2de10:	0002e449 	.word	0x0002e449
   2de14:	0002db6d 	.word	0x0002db6d

0002de18 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2de18:	b590      	push	{r4, r7, lr}
   2de1a:	b09f      	sub	sp, #124	; 0x7c
   2de1c:	af00      	add	r7, sp, #0
   2de1e:	6078      	str	r0, [r7, #4]
   2de20:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2de22:	2301      	movs	r3, #1
   2de24:	425b      	negs	r3, r3
   2de26:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2de28:	230c      	movs	r3, #12
   2de2a:	18fa      	adds	r2, r7, r3
   2de2c:	4b41      	ldr	r3, [pc, #260]	; (2df34 <MQTTConnect+0x11c>)
   2de2e:	0010      	movs	r0, r2
   2de30:	0019      	movs	r1, r3
   2de32:	2358      	movs	r3, #88	; 0x58
   2de34:	001a      	movs	r2, r3
   2de36:	4b40      	ldr	r3, [pc, #256]	; (2df38 <MQTTConnect+0x120>)
   2de38:	4798      	blx	r3
    int len = 0;
   2de3a:	2300      	movs	r3, #0
   2de3c:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2de3e:	687b      	ldr	r3, [r7, #4]
   2de40:	6a1b      	ldr	r3, [r3, #32]
   2de42:	2b00      	cmp	r3, #0
   2de44:	d166      	bne.n	2df14 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2de46:	2364      	movs	r3, #100	; 0x64
   2de48:	18fb      	adds	r3, r7, r3
   2de4a:	0018      	movs	r0, r3
   2de4c:	4b3b      	ldr	r3, [pc, #236]	; (2df3c <MQTTConnect+0x124>)
   2de4e:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2de50:	687b      	ldr	r3, [r7, #4]
   2de52:	685a      	ldr	r2, [r3, #4]
   2de54:	2364      	movs	r3, #100	; 0x64
   2de56:	18fb      	adds	r3, r7, r3
   2de58:	0011      	movs	r1, r2
   2de5a:	0018      	movs	r0, r3
   2de5c:	4b38      	ldr	r3, [pc, #224]	; (2df40 <MQTTConnect+0x128>)
   2de5e:	4798      	blx	r3

    if (options == 0)
   2de60:	683b      	ldr	r3, [r7, #0]
   2de62:	2b00      	cmp	r3, #0
   2de64:	d102      	bne.n	2de6c <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2de66:	230c      	movs	r3, #12
   2de68:	18fb      	adds	r3, r7, r3
   2de6a:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2de6c:	683b      	ldr	r3, [r7, #0]
   2de6e:	8b1b      	ldrh	r3, [r3, #24]
   2de70:	001a      	movs	r2, r3
   2de72:	687b      	ldr	r3, [r7, #4]
   2de74:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2de76:	687b      	ldr	r3, [r7, #4]
   2de78:	3354      	adds	r3, #84	; 0x54
   2de7a:	001a      	movs	r2, r3
   2de7c:	687b      	ldr	r3, [r7, #4]
   2de7e:	699b      	ldr	r3, [r3, #24]
   2de80:	0019      	movs	r1, r3
   2de82:	0010      	movs	r0, r2
   2de84:	4b2f      	ldr	r3, [pc, #188]	; (2df44 <MQTTConnect+0x12c>)
   2de86:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2de88:	687b      	ldr	r3, [r7, #4]
   2de8a:	6918      	ldr	r0, [r3, #16]
   2de8c:	687b      	ldr	r3, [r7, #4]
   2de8e:	689b      	ldr	r3, [r3, #8]
   2de90:	0019      	movs	r1, r3
   2de92:	683b      	ldr	r3, [r7, #0]
   2de94:	001a      	movs	r2, r3
   2de96:	4b2c      	ldr	r3, [pc, #176]	; (2df48 <MQTTConnect+0x130>)
   2de98:	4798      	blx	r3
   2de9a:	0003      	movs	r3, r0
   2de9c:	673b      	str	r3, [r7, #112]	; 0x70
   2de9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2dea0:	2b00      	cmp	r3, #0
   2dea2:	dd39      	ble.n	2df18 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2dea4:	2364      	movs	r3, #100	; 0x64
   2dea6:	18fa      	adds	r2, r7, r3
   2dea8:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2deaa:	687b      	ldr	r3, [r7, #4]
   2deac:	0018      	movs	r0, r3
   2deae:	4b27      	ldr	r3, [pc, #156]	; (2df4c <MQTTConnect+0x134>)
   2deb0:	4798      	blx	r3
   2deb2:	0003      	movs	r3, r0
   2deb4:	677b      	str	r3, [r7, #116]	; 0x74
   2deb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2deb8:	2b00      	cmp	r3, #0
   2deba:	d12f      	bne.n	2df1c <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2debc:	2364      	movs	r3, #100	; 0x64
   2debe:	18fa      	adds	r2, r7, r3
   2dec0:	687b      	ldr	r3, [r7, #4]
   2dec2:	2102      	movs	r1, #2
   2dec4:	0018      	movs	r0, r3
   2dec6:	4b22      	ldr	r3, [pc, #136]	; (2df50 <MQTTConnect+0x138>)
   2dec8:	4798      	blx	r3
   2deca:	0003      	movs	r3, r0
   2decc:	2b02      	cmp	r3, #2
   2dece:	d11d      	bne.n	2df0c <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2ded0:	230b      	movs	r3, #11
   2ded2:	18fb      	adds	r3, r7, r3
   2ded4:	22ff      	movs	r2, #255	; 0xff
   2ded6:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2ded8:	230a      	movs	r3, #10
   2deda:	18fb      	adds	r3, r7, r3
   2dedc:	2200      	movs	r2, #0
   2dede:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2dee0:	687b      	ldr	r3, [r7, #4]
   2dee2:	695a      	ldr	r2, [r3, #20]
   2dee4:	687b      	ldr	r3, [r7, #4]
   2dee6:	68db      	ldr	r3, [r3, #12]
   2dee8:	210b      	movs	r1, #11
   2deea:	1879      	adds	r1, r7, r1
   2deec:	200a      	movs	r0, #10
   2deee:	1838      	adds	r0, r7, r0
   2def0:	4c18      	ldr	r4, [pc, #96]	; (2df54 <MQTTConnect+0x13c>)
   2def2:	47a0      	blx	r4
   2def4:	0003      	movs	r3, r0
   2def6:	2b01      	cmp	r3, #1
   2def8:	d104      	bne.n	2df04 <MQTTConnect+0xec>
            rc = connack_rc;
   2defa:	230b      	movs	r3, #11
   2defc:	18fb      	adds	r3, r7, r3
   2defe:	781b      	ldrb	r3, [r3, #0]
   2df00:	677b      	str	r3, [r7, #116]	; 0x74
   2df02:	e00c      	b.n	2df1e <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2df04:	2301      	movs	r3, #1
   2df06:	425b      	negs	r3, r3
   2df08:	677b      	str	r3, [r7, #116]	; 0x74
   2df0a:	e008      	b.n	2df1e <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2df0c:	2301      	movs	r3, #1
   2df0e:	425b      	negs	r3, r3
   2df10:	677b      	str	r3, [r7, #116]	; 0x74
   2df12:	e004      	b.n	2df1e <MQTTConnect+0x106>
		goto exit;
   2df14:	46c0      	nop			; (mov r8, r8)
   2df16:	e002      	b.n	2df1e <MQTTConnect+0x106>
        goto exit;
   2df18:	46c0      	nop			; (mov r8, r8)
   2df1a:	e000      	b.n	2df1e <MQTTConnect+0x106>
        goto exit; // there was a problem
   2df1c:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2df1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2df20:	2b00      	cmp	r3, #0
   2df22:	d102      	bne.n	2df2a <MQTTConnect+0x112>
        c->isconnected = 1;
   2df24:	687b      	ldr	r3, [r7, #4]
   2df26:	2201      	movs	r2, #1
   2df28:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2df2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2df2c:	0018      	movs	r0, r3
   2df2e:	46bd      	mov	sp, r7
   2df30:	b01f      	add	sp, #124	; 0x7c
   2df32:	bd90      	pop	{r4, r7, pc}
   2df34:	000395ac 	.word	0x000395ac
   2df38:	00034549 	.word	0x00034549
   2df3c:	0002e4ed 	.word	0x0002e4ed
   2df40:	0002e475 	.word	0x0002e475
   2df44:	0002e49d 	.word	0x0002e49d
   2df48:	0002ecc9 	.word	0x0002ecc9
   2df4c:	0002d665 	.word	0x0002d665
   2df50:	0002ddcd 	.word	0x0002ddcd
   2df54:	0002ef45 	.word	0x0002ef45

0002df58 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2df58:	b5b0      	push	{r4, r5, r7, lr}
   2df5a:	b096      	sub	sp, #88	; 0x58
   2df5c:	af04      	add	r7, sp, #16
   2df5e:	60f8      	str	r0, [r7, #12]
   2df60:	60b9      	str	r1, [r7, #8]
   2df62:	603b      	str	r3, [r7, #0]
   2df64:	1dfb      	adds	r3, r7, #7
   2df66:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2df68:	2301      	movs	r3, #1
   2df6a:	425b      	negs	r3, r3
   2df6c:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2df6e:	2300      	movs	r3, #0
   2df70:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2df72:	2324      	movs	r3, #36	; 0x24
   2df74:	18fb      	adds	r3, r7, r3
   2df76:	2200      	movs	r2, #0
   2df78:	601a      	str	r2, [r3, #0]
   2df7a:	2324      	movs	r3, #36	; 0x24
   2df7c:	18fb      	adds	r3, r7, r3
   2df7e:	2200      	movs	r2, #0
   2df80:	605a      	str	r2, [r3, #4]
   2df82:	2324      	movs	r3, #36	; 0x24
   2df84:	18fb      	adds	r3, r7, r3
   2df86:	2200      	movs	r2, #0
   2df88:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2df8a:	1dfb      	adds	r3, r7, #7
   2df8c:	781b      	ldrb	r3, [r3, #0]
   2df8e:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2df90:	2324      	movs	r3, #36	; 0x24
   2df92:	18fb      	adds	r3, r7, r3
   2df94:	68ba      	ldr	r2, [r7, #8]
   2df96:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2df98:	68fb      	ldr	r3, [r7, #12]
   2df9a:	6a1b      	ldr	r3, [r3, #32]
   2df9c:	2b00      	cmp	r3, #0
   2df9e:	d100      	bne.n	2dfa2 <MQTTSubscribe+0x4a>
   2dfa0:	e088      	b.n	2e0b4 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2dfa2:	2330      	movs	r3, #48	; 0x30
   2dfa4:	18fb      	adds	r3, r7, r3
   2dfa6:	0018      	movs	r0, r3
   2dfa8:	4b47      	ldr	r3, [pc, #284]	; (2e0c8 <MQTTSubscribe+0x170>)
   2dfaa:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2dfac:	68fb      	ldr	r3, [r7, #12]
   2dfae:	685a      	ldr	r2, [r3, #4]
   2dfb0:	2330      	movs	r3, #48	; 0x30
   2dfb2:	18fb      	adds	r3, r7, r3
   2dfb4:	0011      	movs	r1, r2
   2dfb6:	0018      	movs	r0, r3
   2dfb8:	4b44      	ldr	r3, [pc, #272]	; (2e0cc <MQTTSubscribe+0x174>)
   2dfba:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2dfbc:	68fb      	ldr	r3, [r7, #12]
   2dfbe:	691c      	ldr	r4, [r3, #16]
   2dfc0:	68fb      	ldr	r3, [r7, #12]
   2dfc2:	689b      	ldr	r3, [r3, #8]
   2dfc4:	001d      	movs	r5, r3
   2dfc6:	68fb      	ldr	r3, [r7, #12]
   2dfc8:	0018      	movs	r0, r3
   2dfca:	4b41      	ldr	r3, [pc, #260]	; (2e0d0 <MQTTSubscribe+0x178>)
   2dfcc:	4798      	blx	r3
   2dfce:	0003      	movs	r3, r0
   2dfd0:	b29a      	uxth	r2, r3
   2dfd2:	2320      	movs	r3, #32
   2dfd4:	18fb      	adds	r3, r7, r3
   2dfd6:	9302      	str	r3, [sp, #8]
   2dfd8:	2324      	movs	r3, #36	; 0x24
   2dfda:	18fb      	adds	r3, r7, r3
   2dfdc:	9301      	str	r3, [sp, #4]
   2dfde:	2301      	movs	r3, #1
   2dfe0:	9300      	str	r3, [sp, #0]
   2dfe2:	0013      	movs	r3, r2
   2dfe4:	2200      	movs	r2, #0
   2dfe6:	0029      	movs	r1, r5
   2dfe8:	0020      	movs	r0, r4
   2dfea:	4c3a      	ldr	r4, [pc, #232]	; (2e0d4 <MQTTSubscribe+0x17c>)
   2dfec:	47a0      	blx	r4
   2dfee:	0003      	movs	r3, r0
   2dff0:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2dff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2dff4:	2b00      	cmp	r3, #0
   2dff6:	dd5f      	ble.n	2e0b8 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2dff8:	2330      	movs	r3, #48	; 0x30
   2dffa:	18fa      	adds	r2, r7, r3
   2dffc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2dffe:	68fb      	ldr	r3, [r7, #12]
   2e000:	0018      	movs	r0, r3
   2e002:	4b35      	ldr	r3, [pc, #212]	; (2e0d8 <MQTTSubscribe+0x180>)
   2e004:	4798      	blx	r3
   2e006:	0003      	movs	r3, r0
   2e008:	647b      	str	r3, [r7, #68]	; 0x44
   2e00a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2e00c:	2b00      	cmp	r3, #0
   2e00e:	d155      	bne.n	2e0bc <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2e010:	2330      	movs	r3, #48	; 0x30
   2e012:	18fa      	adds	r2, r7, r3
   2e014:	68fb      	ldr	r3, [r7, #12]
   2e016:	2109      	movs	r1, #9
   2e018:	0018      	movs	r0, r3
   2e01a:	4b30      	ldr	r3, [pc, #192]	; (2e0dc <MQTTSubscribe+0x184>)
   2e01c:	4798      	blx	r3
   2e01e:	0003      	movs	r3, r0
   2e020:	2b09      	cmp	r3, #9
   2e022:	d143      	bne.n	2e0ac <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2e024:	2300      	movs	r3, #0
   2e026:	61fb      	str	r3, [r7, #28]
   2e028:	2301      	movs	r3, #1
   2e02a:	425b      	negs	r3, r3
   2e02c:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2e02e:	68fb      	ldr	r3, [r7, #12]
   2e030:	695a      	ldr	r2, [r3, #20]
   2e032:	68fb      	ldr	r3, [r7, #12]
   2e034:	68db      	ldr	r3, [r3, #12]
   2e036:	001c      	movs	r4, r3
   2e038:	2318      	movs	r3, #24
   2e03a:	18fb      	adds	r3, r7, r3
   2e03c:	211c      	movs	r1, #28
   2e03e:	1879      	adds	r1, r7, r1
   2e040:	2016      	movs	r0, #22
   2e042:	1838      	adds	r0, r7, r0
   2e044:	9401      	str	r4, [sp, #4]
   2e046:	9200      	str	r2, [sp, #0]
   2e048:	000a      	movs	r2, r1
   2e04a:	2101      	movs	r1, #1
   2e04c:	4c24      	ldr	r4, [pc, #144]	; (2e0e0 <MQTTSubscribe+0x188>)
   2e04e:	47a0      	blx	r4
   2e050:	0003      	movs	r3, r0
   2e052:	2b01      	cmp	r3, #1
   2e054:	d101      	bne.n	2e05a <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2e056:	69bb      	ldr	r3, [r7, #24]
   2e058:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2e05a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2e05c:	2b80      	cmp	r3, #128	; 0x80
   2e05e:	d02e      	beq.n	2e0be <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e060:	2300      	movs	r3, #0
   2e062:	643b      	str	r3, [r7, #64]	; 0x40
   2e064:	e01e      	b.n	2e0a4 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2e066:	68fa      	ldr	r2, [r7, #12]
   2e068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e06a:	3304      	adds	r3, #4
   2e06c:	00db      	lsls	r3, r3, #3
   2e06e:	18d3      	adds	r3, r2, r3
   2e070:	3304      	adds	r3, #4
   2e072:	681b      	ldr	r3, [r3, #0]
   2e074:	2b00      	cmp	r3, #0
   2e076:	d112      	bne.n	2e09e <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2e078:	68fa      	ldr	r2, [r7, #12]
   2e07a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e07c:	3304      	adds	r3, #4
   2e07e:	00db      	lsls	r3, r3, #3
   2e080:	18d3      	adds	r3, r2, r3
   2e082:	3304      	adds	r3, #4
   2e084:	68ba      	ldr	r2, [r7, #8]
   2e086:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2e088:	68fa      	ldr	r2, [r7, #12]
   2e08a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e08c:	3304      	adds	r3, #4
   2e08e:	00db      	lsls	r3, r3, #3
   2e090:	18d3      	adds	r3, r2, r3
   2e092:	3308      	adds	r3, #8
   2e094:	683a      	ldr	r2, [r7, #0]
   2e096:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2e098:	2300      	movs	r3, #0
   2e09a:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2e09c:	e00f      	b.n	2e0be <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e09e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e0a0:	3301      	adds	r3, #1
   2e0a2:	643b      	str	r3, [r7, #64]	; 0x40
   2e0a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e0a6:	2b04      	cmp	r3, #4
   2e0a8:	dddd      	ble.n	2e066 <MQTTSubscribe+0x10e>
   2e0aa:	e008      	b.n	2e0be <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2e0ac:	2301      	movs	r3, #1
   2e0ae:	425b      	negs	r3, r3
   2e0b0:	647b      	str	r3, [r7, #68]	; 0x44
   2e0b2:	e004      	b.n	2e0be <MQTTSubscribe+0x166>
		goto exit;
   2e0b4:	46c0      	nop			; (mov r8, r8)
   2e0b6:	e002      	b.n	2e0be <MQTTSubscribe+0x166>
        goto exit;
   2e0b8:	46c0      	nop			; (mov r8, r8)
   2e0ba:	e000      	b.n	2e0be <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2e0bc:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2e0be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2e0c0:	0018      	movs	r0, r3
   2e0c2:	46bd      	mov	sp, r7
   2e0c4:	b012      	add	sp, #72	; 0x48
   2e0c6:	bdb0      	pop	{r4, r5, r7, pc}
   2e0c8:	0002e4ed 	.word	0x0002e4ed
   2e0cc:	0002e475 	.word	0x0002e475
   2e0d0:	0002d635 	.word	0x0002d635
   2e0d4:	0002fa25 	.word	0x0002fa25
   2e0d8:	0002d665 	.word	0x0002d665
   2e0dc:	0002ddcd 	.word	0x0002ddcd
   2e0e0:	0002fb75 	.word	0x0002fb75

0002e0e4 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2e0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e0e6:	46ce      	mov	lr, r9
   2e0e8:	4647      	mov	r7, r8
   2e0ea:	b580      	push	{r7, lr}
   2e0ec:	b097      	sub	sp, #92	; 0x5c
   2e0ee:	af08      	add	r7, sp, #32
   2e0f0:	60f8      	str	r0, [r7, #12]
   2e0f2:	60b9      	str	r1, [r7, #8]
   2e0f4:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2e0f6:	2301      	movs	r3, #1
   2e0f8:	425b      	negs	r3, r3
   2e0fa:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2e0fc:	2318      	movs	r3, #24
   2e0fe:	18fb      	adds	r3, r7, r3
   2e100:	2200      	movs	r2, #0
   2e102:	601a      	str	r2, [r3, #0]
   2e104:	2318      	movs	r3, #24
   2e106:	18fb      	adds	r3, r7, r3
   2e108:	2200      	movs	r2, #0
   2e10a:	605a      	str	r2, [r3, #4]
   2e10c:	2318      	movs	r3, #24
   2e10e:	18fb      	adds	r3, r7, r3
   2e110:	2200      	movs	r2, #0
   2e112:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2e114:	2318      	movs	r3, #24
   2e116:	18fb      	adds	r3, r7, r3
   2e118:	68ba      	ldr	r2, [r7, #8]
   2e11a:	601a      	str	r2, [r3, #0]
    int len = 0;
   2e11c:	2300      	movs	r3, #0
   2e11e:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2e120:	68fb      	ldr	r3, [r7, #12]
   2e122:	6a1b      	ldr	r3, [r3, #32]
   2e124:	2b00      	cmp	r3, #0
   2e126:	d100      	bne.n	2e12a <MQTTPublish+0x46>
   2e128:	e0a0      	b.n	2e26c <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2e12a:	2324      	movs	r3, #36	; 0x24
   2e12c:	18fb      	adds	r3, r7, r3
   2e12e:	0018      	movs	r0, r3
   2e130:	4b55      	ldr	r3, [pc, #340]	; (2e288 <MQTTPublish+0x1a4>)
   2e132:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2e134:	68fb      	ldr	r3, [r7, #12]
   2e136:	685a      	ldr	r2, [r3, #4]
   2e138:	2324      	movs	r3, #36	; 0x24
   2e13a:	18fb      	adds	r3, r7, r3
   2e13c:	0011      	movs	r1, r2
   2e13e:	0018      	movs	r0, r3
   2e140:	4b52      	ldr	r3, [pc, #328]	; (2e28c <MQTTPublish+0x1a8>)
   2e142:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2e144:	687b      	ldr	r3, [r7, #4]
   2e146:	781b      	ldrb	r3, [r3, #0]
   2e148:	2b01      	cmp	r3, #1
   2e14a:	d003      	beq.n	2e154 <MQTTPublish+0x70>
   2e14c:	687b      	ldr	r3, [r7, #4]
   2e14e:	781b      	ldrb	r3, [r3, #0]
   2e150:	2b02      	cmp	r3, #2
   2e152:	d107      	bne.n	2e164 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2e154:	68fb      	ldr	r3, [r7, #12]
   2e156:	0018      	movs	r0, r3
   2e158:	4b4d      	ldr	r3, [pc, #308]	; (2e290 <MQTTPublish+0x1ac>)
   2e15a:	4798      	blx	r3
   2e15c:	0003      	movs	r3, r0
   2e15e:	b29a      	uxth	r2, r3
   2e160:	687b      	ldr	r3, [r7, #4]
   2e162:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2e164:	68fb      	ldr	r3, [r7, #12]
   2e166:	691b      	ldr	r3, [r3, #16]
   2e168:	469c      	mov	ip, r3
   2e16a:	68fb      	ldr	r3, [r7, #12]
   2e16c:	689b      	ldr	r3, [r3, #8]
   2e16e:	001d      	movs	r5, r3
   2e170:	687b      	ldr	r3, [r7, #4]
   2e172:	781b      	ldrb	r3, [r3, #0]
   2e174:	001e      	movs	r6, r3
   2e176:	687b      	ldr	r3, [r7, #4]
   2e178:	785b      	ldrb	r3, [r3, #1]
   2e17a:	4698      	mov	r8, r3
   2e17c:	687b      	ldr	r3, [r7, #4]
   2e17e:	889b      	ldrh	r3, [r3, #4]
   2e180:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2e182:	687b      	ldr	r3, [r7, #4]
   2e184:	689a      	ldr	r2, [r3, #8]
   2e186:	687b      	ldr	r3, [r7, #4]
   2e188:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2e18a:	9306      	str	r3, [sp, #24]
   2e18c:	9205      	str	r2, [sp, #20]
   2e18e:	2318      	movs	r3, #24
   2e190:	18fa      	adds	r2, r7, r3
   2e192:	2308      	movs	r3, #8
   2e194:	446b      	add	r3, sp
   2e196:	ca13      	ldmia	r2!, {r0, r1, r4}
   2e198:	c313      	stmia	r3!, {r0, r1, r4}
   2e19a:	464b      	mov	r3, r9
   2e19c:	9301      	str	r3, [sp, #4]
   2e19e:	4643      	mov	r3, r8
   2e1a0:	9300      	str	r3, [sp, #0]
   2e1a2:	0033      	movs	r3, r6
   2e1a4:	2200      	movs	r2, #0
   2e1a6:	0029      	movs	r1, r5
   2e1a8:	4660      	mov	r0, ip
   2e1aa:	4c3a      	ldr	r4, [pc, #232]	; (2e294 <MQTTPublish+0x1b0>)
   2e1ac:	47a0      	blx	r4
   2e1ae:	0003      	movs	r3, r0
   2e1b0:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2e1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e1b4:	2b00      	cmp	r3, #0
   2e1b6:	dd5b      	ble.n	2e270 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2e1b8:	2324      	movs	r3, #36	; 0x24
   2e1ba:	18fa      	adds	r2, r7, r3
   2e1bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2e1be:	68fb      	ldr	r3, [r7, #12]
   2e1c0:	0018      	movs	r0, r3
   2e1c2:	4b35      	ldr	r3, [pc, #212]	; (2e298 <MQTTPublish+0x1b4>)
   2e1c4:	4798      	blx	r3
   2e1c6:	0003      	movs	r3, r0
   2e1c8:	637b      	str	r3, [r7, #52]	; 0x34
   2e1ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e1cc:	2b00      	cmp	r3, #0
   2e1ce:	d151      	bne.n	2e274 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2e1d0:	687b      	ldr	r3, [r7, #4]
   2e1d2:	781b      	ldrb	r3, [r3, #0]
   2e1d4:	2b01      	cmp	r3, #1
   2e1d6:	d122      	bne.n	2e21e <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2e1d8:	2324      	movs	r3, #36	; 0x24
   2e1da:	18fa      	adds	r2, r7, r3
   2e1dc:	68fb      	ldr	r3, [r7, #12]
   2e1de:	2104      	movs	r1, #4
   2e1e0:	0018      	movs	r0, r3
   2e1e2:	4b2e      	ldr	r3, [pc, #184]	; (2e29c <MQTTPublish+0x1b8>)
   2e1e4:	4798      	blx	r3
   2e1e6:	0003      	movs	r3, r0
   2e1e8:	2b04      	cmp	r3, #4
   2e1ea:	d114      	bne.n	2e216 <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2e1ec:	68fb      	ldr	r3, [r7, #12]
   2e1ee:	695c      	ldr	r4, [r3, #20]
   2e1f0:	68fb      	ldr	r3, [r7, #12]
   2e1f2:	68db      	ldr	r3, [r3, #12]
   2e1f4:	2216      	movs	r2, #22
   2e1f6:	18ba      	adds	r2, r7, r2
   2e1f8:	2115      	movs	r1, #21
   2e1fa:	1879      	adds	r1, r7, r1
   2e1fc:	2014      	movs	r0, #20
   2e1fe:	1838      	adds	r0, r7, r0
   2e200:	9300      	str	r3, [sp, #0]
   2e202:	0023      	movs	r3, r4
   2e204:	4c26      	ldr	r4, [pc, #152]	; (2e2a0 <MQTTPublish+0x1bc>)
   2e206:	47a0      	blx	r4
   2e208:	0003      	movs	r3, r0
   2e20a:	2b01      	cmp	r3, #1
   2e20c:	d033      	beq.n	2e276 <MQTTPublish+0x192>
                rc = FAILURE;
   2e20e:	2301      	movs	r3, #1
   2e210:	425b      	negs	r3, r3
   2e212:	637b      	str	r3, [r7, #52]	; 0x34
   2e214:	e02f      	b.n	2e276 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2e216:	2301      	movs	r3, #1
   2e218:	425b      	negs	r3, r3
   2e21a:	637b      	str	r3, [r7, #52]	; 0x34
   2e21c:	e02b      	b.n	2e276 <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2e21e:	687b      	ldr	r3, [r7, #4]
   2e220:	781b      	ldrb	r3, [r3, #0]
   2e222:	2b02      	cmp	r3, #2
   2e224:	d127      	bne.n	2e276 <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2e226:	2324      	movs	r3, #36	; 0x24
   2e228:	18fa      	adds	r2, r7, r3
   2e22a:	68fb      	ldr	r3, [r7, #12]
   2e22c:	2107      	movs	r1, #7
   2e22e:	0018      	movs	r0, r3
   2e230:	4b1a      	ldr	r3, [pc, #104]	; (2e29c <MQTTPublish+0x1b8>)
   2e232:	4798      	blx	r3
   2e234:	0003      	movs	r3, r0
   2e236:	2b07      	cmp	r3, #7
   2e238:	d114      	bne.n	2e264 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2e23a:	68fb      	ldr	r3, [r7, #12]
   2e23c:	695c      	ldr	r4, [r3, #20]
   2e23e:	68fb      	ldr	r3, [r7, #12]
   2e240:	68db      	ldr	r3, [r3, #12]
   2e242:	2212      	movs	r2, #18
   2e244:	18ba      	adds	r2, r7, r2
   2e246:	2111      	movs	r1, #17
   2e248:	1879      	adds	r1, r7, r1
   2e24a:	2010      	movs	r0, #16
   2e24c:	1838      	adds	r0, r7, r0
   2e24e:	9300      	str	r3, [sp, #0]
   2e250:	0023      	movs	r3, r4
   2e252:	4c13      	ldr	r4, [pc, #76]	; (2e2a0 <MQTTPublish+0x1bc>)
   2e254:	47a0      	blx	r4
   2e256:	0003      	movs	r3, r0
   2e258:	2b01      	cmp	r3, #1
   2e25a:	d00c      	beq.n	2e276 <MQTTPublish+0x192>
                rc = FAILURE;
   2e25c:	2301      	movs	r3, #1
   2e25e:	425b      	negs	r3, r3
   2e260:	637b      	str	r3, [r7, #52]	; 0x34
   2e262:	e008      	b.n	2e276 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2e264:	2301      	movs	r3, #1
   2e266:	425b      	negs	r3, r3
   2e268:	637b      	str	r3, [r7, #52]	; 0x34
   2e26a:	e004      	b.n	2e276 <MQTTPublish+0x192>
		goto exit;
   2e26c:	46c0      	nop			; (mov r8, r8)
   2e26e:	e002      	b.n	2e276 <MQTTPublish+0x192>
        goto exit;
   2e270:	46c0      	nop			; (mov r8, r8)
   2e272:	e000      	b.n	2e276 <MQTTPublish+0x192>
        goto exit; // there was a problem
   2e274:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2e276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2e278:	0018      	movs	r0, r3
   2e27a:	46bd      	mov	sp, r7
   2e27c:	b00f      	add	sp, #60	; 0x3c
   2e27e:	bc0c      	pop	{r2, r3}
   2e280:	4690      	mov	r8, r2
   2e282:	4699      	mov	r9, r3
   2e284:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e286:	46c0      	nop			; (mov r8, r8)
   2e288:	0002e4ed 	.word	0x0002e4ed
   2e28c:	0002e475 	.word	0x0002e475
   2e290:	0002d635 	.word	0x0002d635
   2e294:	0002f771 	.word	0x0002f771
   2e298:	0002d665 	.word	0x0002d665
   2e29c:	0002ddcd 	.word	0x0002ddcd
   2e2a0:	0002f1e9 	.word	0x0002f1e9

0002e2a4 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2e2a4:	b580      	push	{r7, lr}
   2e2a6:	b088      	sub	sp, #32
   2e2a8:	af00      	add	r7, sp, #0
   2e2aa:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2e2ac:	2301      	movs	r3, #1
   2e2ae:	425b      	negs	r3, r3
   2e2b0:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2e2b2:	2300      	movs	r3, #0
   2e2b4:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2e2b6:	230c      	movs	r3, #12
   2e2b8:	18fb      	adds	r3, r7, r3
   2e2ba:	0018      	movs	r0, r3
   2e2bc:	4b13      	ldr	r3, [pc, #76]	; (2e30c <MQTTDisconnect+0x68>)
   2e2be:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2e2c0:	687b      	ldr	r3, [r7, #4]
   2e2c2:	685a      	ldr	r2, [r3, #4]
   2e2c4:	230c      	movs	r3, #12
   2e2c6:	18fb      	adds	r3, r7, r3
   2e2c8:	0011      	movs	r1, r2
   2e2ca:	0018      	movs	r0, r3
   2e2cc:	4b10      	ldr	r3, [pc, #64]	; (2e310 <MQTTDisconnect+0x6c>)
   2e2ce:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2e2d0:	687b      	ldr	r3, [r7, #4]
   2e2d2:	691a      	ldr	r2, [r3, #16]
   2e2d4:	687b      	ldr	r3, [r7, #4]
   2e2d6:	689b      	ldr	r3, [r3, #8]
   2e2d8:	0019      	movs	r1, r3
   2e2da:	0010      	movs	r0, r2
   2e2dc:	4b0d      	ldr	r3, [pc, #52]	; (2e314 <MQTTDisconnect+0x70>)
   2e2de:	4798      	blx	r3
   2e2e0:	0003      	movs	r3, r0
   2e2e2:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2e2e4:	69bb      	ldr	r3, [r7, #24]
   2e2e6:	2b00      	cmp	r3, #0
   2e2e8:	dd08      	ble.n	2e2fc <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2e2ea:	230c      	movs	r3, #12
   2e2ec:	18fa      	adds	r2, r7, r3
   2e2ee:	69b9      	ldr	r1, [r7, #24]
   2e2f0:	687b      	ldr	r3, [r7, #4]
   2e2f2:	0018      	movs	r0, r3
   2e2f4:	4b08      	ldr	r3, [pc, #32]	; (2e318 <MQTTDisconnect+0x74>)
   2e2f6:	4798      	blx	r3
   2e2f8:	0003      	movs	r3, r0
   2e2fa:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2e2fc:	687b      	ldr	r3, [r7, #4]
   2e2fe:	2200      	movs	r2, #0
   2e300:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2e302:	69fb      	ldr	r3, [r7, #28]
}
   2e304:	0018      	movs	r0, r3
   2e306:	46bd      	mov	sp, r7
   2e308:	b008      	add	sp, #32
   2e30a:	bd80      	pop	{r7, pc}
   2e30c:	0002e4ed 	.word	0x0002e4ed
   2e310:	0002e475 	.word	0x0002e475
   2e314:	0002f09d 	.word	0x0002f09d
   2e318:	0002d665 	.word	0x0002d665

0002e31c <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2e31c:	b580      	push	{r7, lr}
   2e31e:	b084      	sub	sp, #16
   2e320:	af00      	add	r7, sp, #0
   2e322:	0002      	movs	r2, r0
   2e324:	1dfb      	adds	r3, r7, #7
   2e326:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2e328:	2300      	movs	r3, #0
   2e32a:	60fb      	str	r3, [r7, #12]
   2e32c:	e01c      	b.n	2e368 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2e32e:	4a12      	ldr	r2, [pc, #72]	; (2e378 <isMQTTSocket+0x5c>)
   2e330:	68fb      	ldr	r3, [r7, #12]
   2e332:	2164      	movs	r1, #100	; 0x64
   2e334:	434b      	muls	r3, r1
   2e336:	18d3      	adds	r3, r2, r3
   2e338:	3360      	adds	r3, #96	; 0x60
   2e33a:	681b      	ldr	r3, [r3, #0]
   2e33c:	2b00      	cmp	r3, #0
   2e33e:	d010      	beq.n	2e362 <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2e340:	4a0d      	ldr	r2, [pc, #52]	; (2e378 <isMQTTSocket+0x5c>)
   2e342:	68fb      	ldr	r3, [r7, #12]
   2e344:	2164      	movs	r1, #100	; 0x64
   2e346:	434b      	muls	r3, r1
   2e348:	18d3      	adds	r3, r2, r3
   2e34a:	3360      	adds	r3, #96	; 0x60
   2e34c:	681b      	ldr	r3, [r3, #0]
   2e34e:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   2e350:	68bb      	ldr	r3, [r7, #8]
   2e352:	6a1a      	ldr	r2, [r3, #32]
   2e354:	1dfb      	adds	r3, r7, #7
   2e356:	781b      	ldrb	r3, [r3, #0]
   2e358:	b25b      	sxtb	r3, r3
   2e35a:	429a      	cmp	r2, r3
   2e35c:	d101      	bne.n	2e362 <isMQTTSocket+0x46>
				return true;
   2e35e:	2301      	movs	r3, #1
   2e360:	e006      	b.n	2e370 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2e362:	68fb      	ldr	r3, [r7, #12]
   2e364:	3301      	adds	r3, #1
   2e366:	60fb      	str	r3, [r7, #12]
   2e368:	68fb      	ldr	r3, [r7, #12]
   2e36a:	2b06      	cmp	r3, #6
   2e36c:	d9df      	bls.n	2e32e <isMQTTSocket+0x12>
		}
	}
	return false;
   2e36e:	2300      	movs	r3, #0
}
   2e370:	0018      	movs	r0, r3
   2e372:	46bd      	mov	sp, r7
   2e374:	b004      	add	sp, #16
   2e376:	bd80      	pop	{r7, pc}
   2e378:	20004400 	.word	0x20004400

0002e37c <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   2e37c:	b580      	push	{r7, lr}
   2e37e:	b082      	sub	sp, #8
   2e380:	af00      	add	r7, sp, #0
   2e382:	6078      	str	r0, [r7, #4]
   2e384:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   2e386:	4b0d      	ldr	r3, [pc, #52]	; (2e3bc <dnsResolveCallback+0x40>)
   2e388:	781b      	ldrb	r3, [r3, #0]
   2e38a:	2201      	movs	r2, #1
   2e38c:	4053      	eors	r3, r2
   2e38e:	b2db      	uxtb	r3, r3
   2e390:	2b00      	cmp	r3, #0
   2e392:	d00e      	beq.n	2e3b2 <dnsResolveCallback+0x36>
   2e394:	4b0a      	ldr	r3, [pc, #40]	; (2e3c0 <dnsResolveCallback+0x44>)
   2e396:	681b      	ldr	r3, [r3, #0]
   2e398:	687a      	ldr	r2, [r7, #4]
   2e39a:	0011      	movs	r1, r2
   2e39c:	0018      	movs	r0, r3
   2e39e:	4b09      	ldr	r3, [pc, #36]	; (2e3c4 <dnsResolveCallback+0x48>)
   2e3a0:	4798      	blx	r3
   2e3a2:	1e03      	subs	r3, r0, #0
   2e3a4:	d105      	bne.n	2e3b2 <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   2e3a6:	683a      	ldr	r2, [r7, #0]
   2e3a8:	4b07      	ldr	r3, [pc, #28]	; (2e3c8 <dnsResolveCallback+0x4c>)
   2e3aa:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   2e3ac:	4b03      	ldr	r3, [pc, #12]	; (2e3bc <dnsResolveCallback+0x40>)
   2e3ae:	2201      	movs	r2, #1
   2e3b0:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   2e3b2:	46c0      	nop			; (mov r8, r8)
   2e3b4:	46bd      	mov	sp, r7
   2e3b6:	b002      	add	sp, #8
   2e3b8:	bd80      	pop	{r7, pc}
   2e3ba:	46c0      	nop			; (mov r8, r8)
   2e3bc:	200042f0 	.word	0x200042f0
   2e3c0:	200043fc 	.word	0x200043fc
   2e3c4:	000348bd 	.word	0x000348bd
   2e3c8:	200042e8 	.word	0x200042e8

0002e3cc <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   2e3cc:	b580      	push	{r7, lr}
   2e3ce:	b084      	sub	sp, #16
   2e3d0:	af00      	add	r7, sp, #0
   2e3d2:	603a      	str	r2, [r7, #0]
   2e3d4:	1dfb      	adds	r3, r7, #7
   2e3d6:	1c02      	adds	r2, r0, #0
   2e3d8:	701a      	strb	r2, [r3, #0]
   2e3da:	1dbb      	adds	r3, r7, #6
   2e3dc:	1c0a      	adds	r2, r1, #0
   2e3de:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   2e3e0:	1dfb      	adds	r3, r7, #7
   2e3e2:	781b      	ldrb	r3, [r3, #0]
   2e3e4:	b25b      	sxtb	r3, r3
   2e3e6:	0018      	movs	r0, r3
   2e3e8:	4b12      	ldr	r3, [pc, #72]	; (2e434 <tcpClientSocketEventHandler+0x68>)
   2e3ea:	4798      	blx	r3
   2e3ec:	1e03      	subs	r3, r0, #0
   2e3ee:	d01c      	beq.n	2e42a <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   2e3f0:	1dbb      	adds	r3, r7, #6
   2e3f2:	781b      	ldrb	r3, [r3, #0]
   2e3f4:	2b06      	cmp	r3, #6
   2e3f6:	d00c      	beq.n	2e412 <tcpClientSocketEventHandler+0x46>
   2e3f8:	2b07      	cmp	r3, #7
   2e3fa:	d006      	beq.n	2e40a <tcpClientSocketEventHandler+0x3e>
   2e3fc:	2b05      	cmp	r3, #5
   2e3fe:	d000      	beq.n	2e402 <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   2e400:	e013      	b.n	2e42a <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   2e402:	4b0d      	ldr	r3, [pc, #52]	; (2e438 <tcpClientSocketEventHandler+0x6c>)
   2e404:	2201      	movs	r2, #1
   2e406:	701a      	strb	r2, [r3, #0]
			break;
   2e408:	e00f      	b.n	2e42a <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   2e40a:	4b0c      	ldr	r3, [pc, #48]	; (2e43c <tcpClientSocketEventHandler+0x70>)
   2e40c:	2201      	movs	r2, #1
   2e40e:	701a      	strb	r2, [r3, #0]
			break;
   2e410:	e00b      	b.n	2e42a <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   2e412:	683b      	ldr	r3, [r7, #0]
   2e414:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   2e416:	68fb      	ldr	r3, [r7, #12]
   2e418:	2204      	movs	r2, #4
   2e41a:	5e9b      	ldrsh	r3, [r3, r2]
   2e41c:	001a      	movs	r2, r3
   2e41e:	4b08      	ldr	r3, [pc, #32]	; (2e440 <tcpClientSocketEventHandler+0x74>)
   2e420:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   2e422:	4b08      	ldr	r3, [pc, #32]	; (2e444 <tcpClientSocketEventHandler+0x78>)
   2e424:	2201      	movs	r2, #1
   2e426:	701a      	strb	r2, [r3, #0]
			break;
   2e428:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   2e42a:	46c0      	nop			; (mov r8, r8)
   2e42c:	46bd      	mov	sp, r7
   2e42e:	b004      	add	sp, #16
   2e430:	bd80      	pop	{r7, pc}
   2e432:	46c0      	nop			; (mov r8, r8)
   2e434:	0002e31d 	.word	0x0002e31d
   2e438:	200042f1 	.word	0x200042f1
   2e43c:	200042f2 	.word	0x200042f2
   2e440:	200042ec 	.word	0x200042ec
   2e444:	200042f3 	.word	0x200042f3

0002e448 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   2e448:	b580      	push	{r7, lr}
   2e44a:	b082      	sub	sp, #8
   2e44c:	af00      	add	r7, sp, #0
   2e44e:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   2e450:	687b      	ldr	r3, [r7, #4]
   2e452:	3304      	adds	r3, #4
   2e454:	687a      	ldr	r2, [r7, #4]
   2e456:	0011      	movs	r1, r2
   2e458:	0018      	movs	r0, r3
   2e45a:	4b05      	ldr	r3, [pc, #20]	; (2e470 <TimerIsExpired+0x28>)
   2e45c:	4798      	blx	r3
   2e45e:	0003      	movs	r3, r0
   2e460:	3b01      	subs	r3, #1
   2e462:	425a      	negs	r2, r3
   2e464:	4153      	adcs	r3, r2
   2e466:	b2db      	uxtb	r3, r3
}
   2e468:	0018      	movs	r0, r3
   2e46a:	46bd      	mov	sp, r7
   2e46c:	b002      	add	sp, #8
   2e46e:	bd80      	pop	{r7, pc}
   2e470:	0001bb51 	.word	0x0001bb51

0002e474 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   2e474:	b580      	push	{r7, lr}
   2e476:	b082      	sub	sp, #8
   2e478:	af00      	add	r7, sp, #0
   2e47a:	6078      	str	r0, [r7, #4]
   2e47c:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   2e47e:	687b      	ldr	r3, [r7, #4]
   2e480:	683a      	ldr	r2, [r7, #0]
   2e482:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2e484:	687b      	ldr	r3, [r7, #4]
   2e486:	3304      	adds	r3, #4
   2e488:	0018      	movs	r0, r3
   2e48a:	4b03      	ldr	r3, [pc, #12]	; (2e498 <TimerCountdownMS+0x24>)
   2e48c:	4798      	blx	r3
}
   2e48e:	46c0      	nop			; (mov r8, r8)
   2e490:	46bd      	mov	sp, r7
   2e492:	b002      	add	sp, #8
   2e494:	bd80      	pop	{r7, pc}
   2e496:	46c0      	nop			; (mov r8, r8)
   2e498:	0001bae5 	.word	0x0001bae5

0002e49c <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   2e49c:	b580      	push	{r7, lr}
   2e49e:	b082      	sub	sp, #8
   2e4a0:	af00      	add	r7, sp, #0
   2e4a2:	6078      	str	r0, [r7, #4]
   2e4a4:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   2e4a6:	683b      	ldr	r3, [r7, #0]
   2e4a8:	22fa      	movs	r2, #250	; 0xfa
   2e4aa:	0092      	lsls	r2, r2, #2
   2e4ac:	435a      	muls	r2, r3
   2e4ae:	687b      	ldr	r3, [r7, #4]
   2e4b0:	0011      	movs	r1, r2
   2e4b2:	0018      	movs	r0, r3
   2e4b4:	4b02      	ldr	r3, [pc, #8]	; (2e4c0 <TimerCountdown+0x24>)
   2e4b6:	4798      	blx	r3
}
   2e4b8:	46c0      	nop			; (mov r8, r8)
   2e4ba:	46bd      	mov	sp, r7
   2e4bc:	b002      	add	sp, #8
   2e4be:	bd80      	pop	{r7, pc}
   2e4c0:	0002e475 	.word	0x0002e475

0002e4c4 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   2e4c4:	b580      	push	{r7, lr}
   2e4c6:	b082      	sub	sp, #8
   2e4c8:	af00      	add	r7, sp, #0
   2e4ca:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   2e4cc:	687b      	ldr	r3, [r7, #4]
   2e4ce:	3304      	adds	r3, #4
   2e4d0:	687a      	ldr	r2, [r7, #4]
   2e4d2:	0011      	movs	r1, r2
   2e4d4:	0018      	movs	r0, r3
   2e4d6:	4b04      	ldr	r3, [pc, #16]	; (2e4e8 <TimerLeftMS+0x24>)
   2e4d8:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   2e4da:	687b      	ldr	r3, [r7, #4]
   2e4dc:	681b      	ldr	r3, [r3, #0]
}
   2e4de:	0018      	movs	r0, r3
   2e4e0:	46bd      	mov	sp, r7
   2e4e2:	b002      	add	sp, #8
   2e4e4:	bd80      	pop	{r7, pc}
   2e4e6:	46c0      	nop			; (mov r8, r8)
   2e4e8:	0001bb51 	.word	0x0001bb51

0002e4ec <TimerInit>:


void TimerInit(Timer* timer) {
   2e4ec:	b580      	push	{r7, lr}
   2e4ee:	b082      	sub	sp, #8
   2e4f0:	af00      	add	r7, sp, #0
   2e4f2:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   2e4f4:	687b      	ldr	r3, [r7, #4]
   2e4f6:	2200      	movs	r2, #0
   2e4f8:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   2e4fa:	687b      	ldr	r3, [r7, #4]
   2e4fc:	3304      	adds	r3, #4
   2e4fe:	2208      	movs	r2, #8
   2e500:	2100      	movs	r1, #0
   2e502:	0018      	movs	r0, r3
   2e504:	4b02      	ldr	r3, [pc, #8]	; (2e510 <TimerInit+0x24>)
   2e506:	4798      	blx	r3
}
   2e508:	46c0      	nop			; (mov r8, r8)
   2e50a:	46bd      	mov	sp, r7
   2e50c:	b002      	add	sp, #8
   2e50e:	bd80      	pop	{r7, pc}
   2e510:	0003457f 	.word	0x0003457f

0002e514 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   2e514:	b590      	push	{r4, r7, lr}
   2e516:	b085      	sub	sp, #20
   2e518:	af00      	add	r7, sp, #0
   2e51a:	60f8      	str	r0, [r7, #12]
   2e51c:	60b9      	str	r1, [r7, #8]
   2e51e:	607a      	str	r2, [r7, #4]
   2e520:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   2e522:	683b      	ldr	r3, [r7, #0]
   2e524:	2b00      	cmp	r3, #0
   2e526:	d101      	bne.n	2e52c <WINC1500_read+0x18>
   2e528:	230a      	movs	r3, #10
   2e52a:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   2e52c:	4b2c      	ldr	r3, [pc, #176]	; (2e5e0 <WINC1500_read+0xcc>)
   2e52e:	681b      	ldr	r3, [r3, #0]
   2e530:	2b00      	cmp	r3, #0
   2e532:	d131      	bne.n	2e598 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   2e534:	4b2b      	ldr	r3, [pc, #172]	; (2e5e4 <WINC1500_read+0xd0>)
   2e536:	2200      	movs	r2, #0
   2e538:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   2e53a:	68fb      	ldr	r3, [r7, #12]
   2e53c:	681b      	ldr	r3, [r3, #0]
   2e53e:	b258      	sxtb	r0, r3
   2e540:	683c      	ldr	r4, [r7, #0]
   2e542:	2380      	movs	r3, #128	; 0x80
   2e544:	005a      	lsls	r2, r3, #1
   2e546:	4928      	ldr	r1, [pc, #160]	; (2e5e8 <WINC1500_read+0xd4>)
   2e548:	0023      	movs	r3, r4
   2e54a:	4c28      	ldr	r4, [pc, #160]	; (2e5ec <WINC1500_read+0xd8>)
   2e54c:	47a0      	blx	r4
   2e54e:	1e03      	subs	r3, r0, #0
   2e550:	d005      	beq.n	2e55e <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   2e552:	2301      	movs	r3, #1
   2e554:	425b      	negs	r3, r3
   2e556:	e03e      	b.n	2e5d6 <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   2e558:	2000      	movs	r0, #0
   2e55a:	4b25      	ldr	r3, [pc, #148]	; (2e5f0 <WINC1500_read+0xdc>)
   2e55c:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   2e55e:	4b21      	ldr	r3, [pc, #132]	; (2e5e4 <WINC1500_read+0xd0>)
   2e560:	781b      	ldrb	r3, [r3, #0]
   2e562:	2201      	movs	r2, #1
   2e564:	4053      	eors	r3, r2
   2e566:	b2db      	uxtb	r3, r3
   2e568:	2b00      	cmp	r3, #0
   2e56a:	d1f5      	bne.n	2e558 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   2e56c:	4b21      	ldr	r3, [pc, #132]	; (2e5f4 <WINC1500_read+0xe0>)
   2e56e:	681b      	ldr	r3, [r3, #0]
   2e570:	2b00      	cmp	r3, #0
   2e572:	dd08      	ble.n	2e586 <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   2e574:	4b1f      	ldr	r3, [pc, #124]	; (2e5f4 <WINC1500_read+0xe0>)
   2e576:	681b      	ldr	r3, [r3, #0]
   2e578:	001a      	movs	r2, r3
   2e57a:	4b19      	ldr	r3, [pc, #100]	; (2e5e0 <WINC1500_read+0xcc>)
   2e57c:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   2e57e:	4b1e      	ldr	r3, [pc, #120]	; (2e5f8 <WINC1500_read+0xe4>)
   2e580:	2200      	movs	r2, #0
   2e582:	601a      	str	r2, [r3, #0]
   2e584:	e008      	b.n	2e598 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   2e586:	4b16      	ldr	r3, [pc, #88]	; (2e5e0 <WINC1500_read+0xcc>)
   2e588:	2200      	movs	r2, #0
   2e58a:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   2e58c:	4b1a      	ldr	r3, [pc, #104]	; (2e5f8 <WINC1500_read+0xe4>)
   2e58e:	2200      	movs	r2, #0
   2e590:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   2e592:	4b18      	ldr	r3, [pc, #96]	; (2e5f4 <WINC1500_read+0xe0>)
   2e594:	681b      	ldr	r3, [r3, #0]
   2e596:	e01e      	b.n	2e5d6 <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   2e598:	4b11      	ldr	r3, [pc, #68]	; (2e5e0 <WINC1500_read+0xcc>)
   2e59a:	681b      	ldr	r3, [r3, #0]
   2e59c:	001a      	movs	r2, r3
   2e59e:	687b      	ldr	r3, [r7, #4]
   2e5a0:	4293      	cmp	r3, r2
   2e5a2:	dd02      	ble.n	2e5aa <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   2e5a4:	2301      	movs	r3, #1
   2e5a6:	425b      	negs	r3, r3
   2e5a8:	e015      	b.n	2e5d6 <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   2e5aa:	4b13      	ldr	r3, [pc, #76]	; (2e5f8 <WINC1500_read+0xe4>)
   2e5ac:	681a      	ldr	r2, [r3, #0]
   2e5ae:	4b0e      	ldr	r3, [pc, #56]	; (2e5e8 <WINC1500_read+0xd4>)
   2e5b0:	18d1      	adds	r1, r2, r3
   2e5b2:	687a      	ldr	r2, [r7, #4]
   2e5b4:	68bb      	ldr	r3, [r7, #8]
   2e5b6:	0018      	movs	r0, r3
   2e5b8:	4b10      	ldr	r3, [pc, #64]	; (2e5fc <WINC1500_read+0xe8>)
   2e5ba:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   2e5bc:	4b08      	ldr	r3, [pc, #32]	; (2e5e0 <WINC1500_read+0xcc>)
   2e5be:	681a      	ldr	r2, [r3, #0]
   2e5c0:	687b      	ldr	r3, [r7, #4]
   2e5c2:	1ad2      	subs	r2, r2, r3
   2e5c4:	4b06      	ldr	r3, [pc, #24]	; (2e5e0 <WINC1500_read+0xcc>)
   2e5c6:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   2e5c8:	4b0b      	ldr	r3, [pc, #44]	; (2e5f8 <WINC1500_read+0xe4>)
   2e5ca:	681a      	ldr	r2, [r3, #0]
   2e5cc:	687b      	ldr	r3, [r7, #4]
   2e5ce:	18d2      	adds	r2, r2, r3
   2e5d0:	4b09      	ldr	r3, [pc, #36]	; (2e5f8 <WINC1500_read+0xe4>)
   2e5d2:	601a      	str	r2, [r3, #0]
  
  return len;
   2e5d4:	687b      	ldr	r3, [r7, #4]
}
   2e5d6:	0018      	movs	r0, r3
   2e5d8:	46bd      	mov	sp, r7
   2e5da:	b005      	add	sp, #20
   2e5dc:	bd90      	pop	{r4, r7, pc}
   2e5de:	46c0      	nop			; (mov r8, r8)
   2e5e0:	200043f8 	.word	0x200043f8
   2e5e4:	200042f3 	.word	0x200042f3
   2e5e8:	200042f4 	.word	0x200042f4
   2e5ec:	00024a9d 	.word	0x00024a9d
   2e5f0:	00020fe5 	.word	0x00020fe5
   2e5f4:	200042ec 	.word	0x200042ec
   2e5f8:	200043f4 	.word	0x200043f4
   2e5fc:	00034549 	.word	0x00034549

0002e600 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   2e600:	b590      	push	{r4, r7, lr}
   2e602:	b085      	sub	sp, #20
   2e604:	af00      	add	r7, sp, #0
   2e606:	60f8      	str	r0, [r7, #12]
   2e608:	60b9      	str	r1, [r7, #8]
   2e60a:	607a      	str	r2, [r7, #4]
   2e60c:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   2e60e:	4b10      	ldr	r3, [pc, #64]	; (2e650 <WINC1500_write+0x50>)
   2e610:	2200      	movs	r2, #0
   2e612:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   2e614:	68fb      	ldr	r3, [r7, #12]
   2e616:	681b      	ldr	r3, [r3, #0]
   2e618:	b258      	sxtb	r0, r3
   2e61a:	687b      	ldr	r3, [r7, #4]
   2e61c:	b29a      	uxth	r2, r3
   2e61e:	68b9      	ldr	r1, [r7, #8]
   2e620:	2300      	movs	r3, #0
   2e622:	4c0c      	ldr	r4, [pc, #48]	; (2e654 <WINC1500_write+0x54>)
   2e624:	47a0      	blx	r4
   2e626:	1e03      	subs	r3, r0, #0
   2e628:	d005      	beq.n	2e636 <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   2e62a:	2301      	movs	r3, #1
   2e62c:	425b      	negs	r3, r3
   2e62e:	e00a      	b.n	2e646 <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   2e630:	2000      	movs	r0, #0
   2e632:	4b09      	ldr	r3, [pc, #36]	; (2e658 <WINC1500_write+0x58>)
   2e634:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   2e636:	4b06      	ldr	r3, [pc, #24]	; (2e650 <WINC1500_write+0x50>)
   2e638:	781b      	ldrb	r3, [r3, #0]
   2e63a:	2201      	movs	r2, #1
   2e63c:	4053      	eors	r3, r2
   2e63e:	b2db      	uxtb	r3, r3
   2e640:	2b00      	cmp	r3, #0
   2e642:	d1f5      	bne.n	2e630 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   2e644:	687b      	ldr	r3, [r7, #4]
}
   2e646:	0018      	movs	r0, r3
   2e648:	46bd      	mov	sp, r7
   2e64a:	b005      	add	sp, #20
   2e64c:	bd90      	pop	{r4, r7, pc}
   2e64e:	46c0      	nop			; (mov r8, r8)
   2e650:	200042f2 	.word	0x200042f2
   2e654:	00024939 	.word	0x00024939
   2e658:	00020fe5 	.word	0x00020fe5

0002e65c <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   2e65c:	b580      	push	{r7, lr}
   2e65e:	b082      	sub	sp, #8
   2e660:	af00      	add	r7, sp, #0
   2e662:	6078      	str	r0, [r7, #4]
	close(n->socket);
   2e664:	687b      	ldr	r3, [r7, #4]
   2e666:	681b      	ldr	r3, [r3, #0]
   2e668:	b25b      	sxtb	r3, r3
   2e66a:	0018      	movs	r0, r3
   2e66c:	4b06      	ldr	r3, [pc, #24]	; (2e688 <WINC1500_disconnect+0x2c>)
   2e66e:	4798      	blx	r3
	n->socket=-1;
   2e670:	687b      	ldr	r3, [r7, #4]
   2e672:	2201      	movs	r2, #1
   2e674:	4252      	negs	r2, r2
   2e676:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   2e678:	4b04      	ldr	r3, [pc, #16]	; (2e68c <WINC1500_disconnect+0x30>)
   2e67a:	2200      	movs	r2, #0
   2e67c:	701a      	strb	r2, [r3, #0]
}
   2e67e:	46c0      	nop			; (mov r8, r8)
   2e680:	46bd      	mov	sp, r7
   2e682:	b002      	add	sp, #8
   2e684:	bd80      	pop	{r7, pc}
   2e686:	46c0      	nop			; (mov r8, r8)
   2e688:	00024c1d 	.word	0x00024c1d
   2e68c:	200042f1 	.word	0x200042f1

0002e690 <NetworkInit>:


void NetworkInit(Network* n) {
   2e690:	b580      	push	{r7, lr}
   2e692:	b082      	sub	sp, #8
   2e694:	af00      	add	r7, sp, #0
   2e696:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   2e698:	687b      	ldr	r3, [r7, #4]
   2e69a:	2201      	movs	r2, #1
   2e69c:	4252      	negs	r2, r2
   2e69e:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   2e6a0:	687b      	ldr	r3, [r7, #4]
   2e6a2:	4a06      	ldr	r2, [pc, #24]	; (2e6bc <NetworkInit+0x2c>)
   2e6a4:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   2e6a6:	687b      	ldr	r3, [r7, #4]
   2e6a8:	4a05      	ldr	r2, [pc, #20]	; (2e6c0 <NetworkInit+0x30>)
   2e6aa:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   2e6ac:	687b      	ldr	r3, [r7, #4]
   2e6ae:	4a05      	ldr	r2, [pc, #20]	; (2e6c4 <NetworkInit+0x34>)
   2e6b0:	611a      	str	r2, [r3, #16]
}
   2e6b2:	46c0      	nop			; (mov r8, r8)
   2e6b4:	46bd      	mov	sp, r7
   2e6b6:	b002      	add	sp, #8
   2e6b8:	bd80      	pop	{r7, pc}
   2e6ba:	46c0      	nop			; (mov r8, r8)
   2e6bc:	0002e515 	.word	0x0002e515
   2e6c0:	0002e601 	.word	0x0002e601
   2e6c4:	0002e65d 	.word	0x0002e65d

0002e6c8 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   2e6c8:	b580      	push	{r7, lr}
   2e6ca:	b088      	sub	sp, #32
   2e6cc:	af00      	add	r7, sp, #0
   2e6ce:	60f8      	str	r0, [r7, #12]
   2e6d0:	60b9      	str	r1, [r7, #8]
   2e6d2:	607a      	str	r2, [r7, #4]
   2e6d4:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   2e6d6:	4b37      	ldr	r3, [pc, #220]	; (2e7b4 <ConnectNetwork+0xec>)
   2e6d8:	2200      	movs	r2, #0
   2e6da:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   2e6dc:	4b36      	ldr	r3, [pc, #216]	; (2e7b8 <ConnectNetwork+0xf0>)
   2e6de:	68ba      	ldr	r2, [r7, #8]
   2e6e0:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   2e6e2:	68bb      	ldr	r3, [r7, #8]
   2e6e4:	0018      	movs	r0, r3
   2e6e6:	4b35      	ldr	r3, [pc, #212]	; (2e7bc <ConnectNetwork+0xf4>)
   2e6e8:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   2e6ea:	e002      	b.n	2e6f2 <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   2e6ec:	2000      	movs	r0, #0
   2e6ee:	4b34      	ldr	r3, [pc, #208]	; (2e7c0 <ConnectNetwork+0xf8>)
   2e6f0:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   2e6f2:	4b30      	ldr	r3, [pc, #192]	; (2e7b4 <ConnectNetwork+0xec>)
   2e6f4:	781b      	ldrb	r3, [r3, #0]
   2e6f6:	2201      	movs	r2, #1
   2e6f8:	4053      	eors	r3, r2
   2e6fa:	b2db      	uxtb	r3, r3
   2e6fc:	2b00      	cmp	r3, #0
   2e6fe:	d1f5      	bne.n	2e6ec <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   2e700:	4b30      	ldr	r3, [pc, #192]	; (2e7c4 <ConnectNetwork+0xfc>)
   2e702:	681a      	ldr	r2, [r3, #0]
   2e704:	68fb      	ldr	r3, [r7, #12]
   2e706:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   2e708:	2310      	movs	r3, #16
   2e70a:	18fb      	adds	r3, r7, r3
   2e70c:	2202      	movs	r2, #2
   2e70e:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   2e710:	687b      	ldr	r3, [r7, #4]
   2e712:	b29b      	uxth	r3, r3
   2e714:	021b      	lsls	r3, r3, #8
   2e716:	b21a      	sxth	r2, r3
   2e718:	687b      	ldr	r3, [r7, #4]
   2e71a:	b29b      	uxth	r3, r3
   2e71c:	0a1b      	lsrs	r3, r3, #8
   2e71e:	b29b      	uxth	r3, r3
   2e720:	b21b      	sxth	r3, r3
   2e722:	4313      	orrs	r3, r2
   2e724:	b21b      	sxth	r3, r3
   2e726:	b29a      	uxth	r2, r3
   2e728:	2310      	movs	r3, #16
   2e72a:	18fb      	adds	r3, r7, r3
   2e72c:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   2e72e:	4b25      	ldr	r3, [pc, #148]	; (2e7c4 <ConnectNetwork+0xfc>)
   2e730:	681b      	ldr	r3, [r3, #0]
   2e732:	001a      	movs	r2, r3
   2e734:	2310      	movs	r3, #16
   2e736:	18fb      	adds	r3, r7, r3
   2e738:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   2e73a:	68fb      	ldr	r3, [r7, #12]
   2e73c:	681b      	ldr	r3, [r3, #0]
   2e73e:	2b00      	cmp	r3, #0
   2e740:	da0a      	bge.n	2e758 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   2e742:	683b      	ldr	r3, [r7, #0]
   2e744:	b2db      	uxtb	r3, r3
   2e746:	001a      	movs	r2, r3
   2e748:	2101      	movs	r1, #1
   2e74a:	2002      	movs	r0, #2
   2e74c:	4b1e      	ldr	r3, [pc, #120]	; (2e7c8 <ConnectNetwork+0x100>)
   2e74e:	4798      	blx	r3
   2e750:	0003      	movs	r3, r0
   2e752:	001a      	movs	r2, r3
   2e754:	68fb      	ldr	r3, [r7, #12]
   2e756:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   2e758:	68fb      	ldr	r3, [r7, #12]
   2e75a:	681b      	ldr	r3, [r3, #0]
   2e75c:	3301      	adds	r3, #1
   2e75e:	d108      	bne.n	2e772 <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   2e760:	68fb      	ldr	r3, [r7, #12]
   2e762:	681b      	ldr	r3, [r3, #0]
   2e764:	b25b      	sxtb	r3, r3
   2e766:	0018      	movs	r0, r3
   2e768:	4b18      	ldr	r3, [pc, #96]	; (2e7cc <ConnectNetwork+0x104>)
   2e76a:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   2e76c:	2309      	movs	r3, #9
   2e76e:	425b      	negs	r3, r3
   2e770:	e01c      	b.n	2e7ac <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   2e772:	68fb      	ldr	r3, [r7, #12]
   2e774:	681b      	ldr	r3, [r3, #0]
   2e776:	b25b      	sxtb	r3, r3
   2e778:	2210      	movs	r2, #16
   2e77a:	18b9      	adds	r1, r7, r2
   2e77c:	2210      	movs	r2, #16
   2e77e:	0018      	movs	r0, r3
   2e780:	4b13      	ldr	r3, [pc, #76]	; (2e7d0 <ConnectNetwork+0x108>)
   2e782:	4798      	blx	r3
   2e784:	1e03      	subs	r3, r0, #0
   2e786:	d002      	beq.n	2e78e <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   2e788:	2309      	movs	r3, #9
   2e78a:	425b      	negs	r3, r3
   2e78c:	e00e      	b.n	2e7ac <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   2e78e:	4b11      	ldr	r3, [pc, #68]	; (2e7d4 <ConnectNetwork+0x10c>)
   2e790:	2200      	movs	r2, #0
   2e792:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   2e794:	e002      	b.n	2e79c <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   2e796:	2000      	movs	r0, #0
   2e798:	4b09      	ldr	r3, [pc, #36]	; (2e7c0 <ConnectNetwork+0xf8>)
   2e79a:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   2e79c:	4b0d      	ldr	r3, [pc, #52]	; (2e7d4 <ConnectNetwork+0x10c>)
   2e79e:	781b      	ldrb	r3, [r3, #0]
   2e7a0:	2201      	movs	r2, #1
   2e7a2:	4053      	eors	r3, r2
   2e7a4:	b2db      	uxtb	r3, r3
   2e7a6:	2b00      	cmp	r3, #0
   2e7a8:	d1f5      	bne.n	2e796 <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   2e7aa:	2300      	movs	r3, #0
   2e7ac:	0018      	movs	r0, r3
   2e7ae:	46bd      	mov	sp, r7
   2e7b0:	b008      	add	sp, #32
   2e7b2:	bd80      	pop	{r7, pc}
   2e7b4:	200042f0 	.word	0x200042f0
   2e7b8:	200043fc 	.word	0x200043fc
   2e7bc:	00024e65 	.word	0x00024e65
   2e7c0:	00020fe5 	.word	0x00020fe5
   2e7c4:	200042e8 	.word	0x200042e8
   2e7c8:	00024611 	.word	0x00024611
   2e7cc:	00024c1d 	.word	0x00024c1d
   2e7d0:	00024825 	.word	0x00024825
   2e7d4:	200042f1 	.word	0x200042f1

0002e7d8 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   2e7d8:	b580      	push	{r7, lr}
   2e7da:	b084      	sub	sp, #16
   2e7dc:	af00      	add	r7, sp, #0
   2e7de:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   2e7e0:	687b      	ldr	r3, [r7, #4]
   2e7e2:	2b00      	cmp	r3, #0
   2e7e4:	d022      	beq.n	2e82c <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2e7e6:	2300      	movs	r3, #0
   2e7e8:	60fb      	str	r3, [r7, #12]
   2e7ea:	e01b      	b.n	2e824 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   2e7ec:	4a11      	ldr	r2, [pc, #68]	; (2e834 <allocateClient+0x5c>)
   2e7ee:	68fb      	ldr	r3, [r7, #12]
   2e7f0:	2164      	movs	r1, #100	; 0x64
   2e7f2:	434b      	muls	r3, r1
   2e7f4:	18d3      	adds	r3, r2, r3
   2e7f6:	3360      	adds	r3, #96	; 0x60
   2e7f8:	681b      	ldr	r3, [r3, #0]
   2e7fa:	2b00      	cmp	r3, #0
   2e7fc:	d10f      	bne.n	2e81e <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   2e7fe:	4a0d      	ldr	r2, [pc, #52]	; (2e834 <allocateClient+0x5c>)
   2e800:	68fb      	ldr	r3, [r7, #12]
   2e802:	2164      	movs	r1, #100	; 0x64
   2e804:	434b      	muls	r3, r1
   2e806:	18d3      	adds	r3, r2, r3
   2e808:	3360      	adds	r3, #96	; 0x60
   2e80a:	687a      	ldr	r2, [r7, #4]
   2e80c:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   2e80e:	68fb      	ldr	r3, [r7, #12]
   2e810:	2264      	movs	r2, #100	; 0x64
   2e812:	435a      	muls	r2, r3
   2e814:	4b07      	ldr	r3, [pc, #28]	; (2e834 <allocateClient+0x5c>)
   2e816:	18d2      	adds	r2, r2, r3
   2e818:	687b      	ldr	r3, [r7, #4]
   2e81a:	61da      	str	r2, [r3, #28]
			return;
   2e81c:	e007      	b.n	2e82e <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2e81e:	68fb      	ldr	r3, [r7, #12]
   2e820:	3301      	adds	r3, #1
   2e822:	60fb      	str	r3, [r7, #12]
   2e824:	68fb      	ldr	r3, [r7, #12]
   2e826:	2b06      	cmp	r3, #6
   2e828:	d9e0      	bls.n	2e7ec <allocateClient+0x14>
   2e82a:	e000      	b.n	2e82e <allocateClient+0x56>
		return;
   2e82c:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   2e82e:	46bd      	mov	sp, r7
   2e830:	b004      	add	sp, #16
   2e832:	bd80      	pop	{r7, pc}
   2e834:	20004400 	.word	0x20004400

0002e838 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   2e838:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e83a:	b089      	sub	sp, #36	; 0x24
   2e83c:	af04      	add	r7, sp, #16
   2e83e:	6078      	str	r0, [r7, #4]
   2e840:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   2e842:	687b      	ldr	r3, [r7, #4]
   2e844:	2b00      	cmp	r3, #0
   2e846:	d00a      	beq.n	2e85e <mqtt_init+0x26>
   2e848:	683b      	ldr	r3, [r7, #0]
   2e84a:	2b00      	cmp	r3, #0
   2e84c:	d007      	beq.n	2e85e <mqtt_init+0x26>
   2e84e:	683b      	ldr	r3, [r7, #0]
   2e850:	691b      	ldr	r3, [r3, #16]
   2e852:	2b00      	cmp	r3, #0
   2e854:	d003      	beq.n	2e85e <mqtt_init+0x26>
   2e856:	683b      	ldr	r3, [r7, #0]
   2e858:	689b      	ldr	r3, [r3, #8]
   2e85a:	2b00      	cmp	r3, #0
   2e85c:	d102      	bne.n	2e864 <mqtt_init+0x2c>
		return FAILURE;
   2e85e:	2301      	movs	r3, #1
   2e860:	425b      	negs	r3, r3
   2e862:	e034      	b.n	2e8ce <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   2e864:	683b      	ldr	r3, [r7, #0]
   2e866:	889b      	ldrh	r3, [r3, #4]
   2e868:	001a      	movs	r2, r3
   2e86a:	23fa      	movs	r3, #250	; 0xfa
   2e86c:	009b      	lsls	r3, r3, #2
   2e86e:	4353      	muls	r3, r2
   2e870:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   2e872:	687b      	ldr	r3, [r7, #4]
   2e874:	3320      	adds	r3, #32
   2e876:	0018      	movs	r0, r3
   2e878:	4b17      	ldr	r3, [pc, #92]	; (2e8d8 <mqtt_init+0xa0>)
   2e87a:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   2e87c:	687b      	ldr	r3, [r7, #4]
   2e87e:	3304      	adds	r3, #4
   2e880:	6839      	ldr	r1, [r7, #0]
   2e882:	2218      	movs	r2, #24
   2e884:	0018      	movs	r0, r3
   2e886:	4b15      	ldr	r3, [pc, #84]	; (2e8dc <mqtt_init+0xa4>)
   2e888:	4798      	blx	r3
	allocateClient(module);
   2e88a:	687b      	ldr	r3, [r7, #4]
   2e88c:	0018      	movs	r0, r3
   2e88e:	4b14      	ldr	r3, [pc, #80]	; (2e8e0 <mqtt_init+0xa8>)
   2e890:	4798      	blx	r3
	
	if(module->client)
   2e892:	687b      	ldr	r3, [r7, #4]
   2e894:	69db      	ldr	r3, [r3, #28]
   2e896:	2b00      	cmp	r3, #0
   2e898:	d017      	beq.n	2e8ca <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   2e89a:	687b      	ldr	r3, [r7, #4]
   2e89c:	69d8      	ldr	r0, [r3, #28]
   2e89e:	687b      	ldr	r3, [r7, #4]
   2e8a0:	3320      	adds	r3, #32
   2e8a2:	001c      	movs	r4, r3
   2e8a4:	683b      	ldr	r3, [r7, #0]
   2e8a6:	691e      	ldr	r6, [r3, #16]
   2e8a8:	683b      	ldr	r3, [r7, #0]
   2e8aa:	695a      	ldr	r2, [r3, #20]
   2e8ac:	683b      	ldr	r3, [r7, #0]
   2e8ae:	6899      	ldr	r1, [r3, #8]
   2e8b0:	683b      	ldr	r3, [r7, #0]
   2e8b2:	68db      	ldr	r3, [r3, #12]
   2e8b4:	68fd      	ldr	r5, [r7, #12]
   2e8b6:	9302      	str	r3, [sp, #8]
   2e8b8:	9101      	str	r1, [sp, #4]
   2e8ba:	9200      	str	r2, [sp, #0]
   2e8bc:	0033      	movs	r3, r6
   2e8be:	002a      	movs	r2, r5
   2e8c0:	0021      	movs	r1, r4
   2e8c2:	4c08      	ldr	r4, [pc, #32]	; (2e8e4 <mqtt_init+0xac>)
   2e8c4:	47a0      	blx	r4
		return SUCCESS;
   2e8c6:	2300      	movs	r3, #0
   2e8c8:	e001      	b.n	2e8ce <mqtt_init+0x96>
	}
	else
		return FAILURE;
   2e8ca:	2301      	movs	r3, #1
   2e8cc:	425b      	negs	r3, r3
}
   2e8ce:	0018      	movs	r0, r3
   2e8d0:	46bd      	mov	sp, r7
   2e8d2:	b005      	add	sp, #20
   2e8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e8d6:	46c0      	nop			; (mov r8, r8)
   2e8d8:	0002e691 	.word	0x0002e691
   2e8dc:	00034549 	.word	0x00034549
   2e8e0:	0002e7d9 	.word	0x0002e7d9
   2e8e4:	0002d709 	.word	0x0002d709

0002e8e8 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   2e8e8:	b580      	push	{r7, lr}
   2e8ea:	b082      	sub	sp, #8
   2e8ec:	af00      	add	r7, sp, #0
   2e8ee:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   2e8f0:	687b      	ldr	r3, [r7, #4]
   2e8f2:	4a0c      	ldr	r2, [pc, #48]	; (2e924 <mqtt_get_config_defaults+0x3c>)
   2e8f4:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2e8f6:	687b      	ldr	r3, [r7, #4]
   2e8f8:	2200      	movs	r2, #0
   2e8fa:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   2e8fc:	687b      	ldr	r3, [r7, #4]
   2e8fe:	223c      	movs	r2, #60	; 0x3c
   2e900:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   2e902:	687b      	ldr	r3, [r7, #4]
   2e904:	2200      	movs	r2, #0
   2e906:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   2e908:	687b      	ldr	r3, [r7, #4]
   2e90a:	2200      	movs	r2, #0
   2e90c:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   2e90e:	687b      	ldr	r3, [r7, #4]
   2e910:	2200      	movs	r2, #0
   2e912:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   2e914:	687b      	ldr	r3, [r7, #4]
   2e916:	2200      	movs	r2, #0
   2e918:	615a      	str	r2, [r3, #20]
}
   2e91a:	46c0      	nop			; (mov r8, r8)
   2e91c:	46bd      	mov	sp, r7
   2e91e:	b002      	add	sp, #8
   2e920:	bd80      	pop	{r7, pc}
   2e922:	46c0      	nop			; (mov r8, r8)
   2e924:	0000075b 	.word	0x0000075b

0002e928 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   2e928:	b580      	push	{r7, lr}
   2e92a:	b082      	sub	sp, #8
   2e92c:	af00      	add	r7, sp, #0
   2e92e:	6078      	str	r0, [r7, #4]
   2e930:	6039      	str	r1, [r7, #0]
	if(module)
   2e932:	687b      	ldr	r3, [r7, #4]
   2e934:	2b00      	cmp	r3, #0
   2e936:	d004      	beq.n	2e942 <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   2e938:	687b      	ldr	r3, [r7, #4]
   2e93a:	683a      	ldr	r2, [r7, #0]
   2e93c:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   2e93e:	2300      	movs	r3, #0
   2e940:	e001      	b.n	2e946 <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   2e942:	2301      	movs	r3, #1
   2e944:	425b      	negs	r3, r3
}
   2e946:	0018      	movs	r0, r3
   2e948:	46bd      	mov	sp, r7
   2e94a:	b002      	add	sp, #8
   2e94c:	bd80      	pop	{r7, pc}
	...

0002e950 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2e950:	b580      	push	{r7, lr}
   2e952:	b082      	sub	sp, #8
   2e954:	af00      	add	r7, sp, #0
   2e956:	603a      	str	r2, [r7, #0]
   2e958:	1dfb      	adds	r3, r7, #7
   2e95a:	1c02      	adds	r2, r0, #0
   2e95c:	701a      	strb	r2, [r3, #0]
   2e95e:	1dbb      	adds	r3, r7, #6
   2e960:	1c0a      	adds	r2, r1, #0
   2e962:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   2e964:	683a      	ldr	r2, [r7, #0]
   2e966:	1dbb      	adds	r3, r7, #6
   2e968:	7819      	ldrb	r1, [r3, #0]
   2e96a:	1dfb      	adds	r3, r7, #7
   2e96c:	781b      	ldrb	r3, [r3, #0]
   2e96e:	b25b      	sxtb	r3, r3
   2e970:	0018      	movs	r0, r3
   2e972:	4b03      	ldr	r3, [pc, #12]	; (2e980 <mqtt_socket_event_handler+0x30>)
   2e974:	4798      	blx	r3
}
   2e976:	46c0      	nop			; (mov r8, r8)
   2e978:	46bd      	mov	sp, r7
   2e97a:	b002      	add	sp, #8
   2e97c:	bd80      	pop	{r7, pc}
   2e97e:	46c0      	nop			; (mov r8, r8)
   2e980:	0002e3cd 	.word	0x0002e3cd

0002e984 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   2e984:	b580      	push	{r7, lr}
   2e986:	b082      	sub	sp, #8
   2e988:	af00      	add	r7, sp, #0
   2e98a:	6078      	str	r0, [r7, #4]
   2e98c:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   2e98e:	683a      	ldr	r2, [r7, #0]
   2e990:	687b      	ldr	r3, [r7, #4]
   2e992:	0011      	movs	r1, r2
   2e994:	0018      	movs	r0, r3
   2e996:	4b03      	ldr	r3, [pc, #12]	; (2e9a4 <mqtt_socket_resolve_handler+0x20>)
   2e998:	4798      	blx	r3
}
   2e99a:	46c0      	nop			; (mov r8, r8)
   2e99c:	46bd      	mov	sp, r7
   2e99e:	b002      	add	sp, #8
   2e9a0:	bd80      	pop	{r7, pc}
   2e9a2:	46c0      	nop			; (mov r8, r8)
   2e9a4:	0002e37d 	.word	0x0002e37d

0002e9a8 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   2e9a8:	b590      	push	{r4, r7, lr}
   2e9aa:	b085      	sub	sp, #20
   2e9ac:	af00      	add	r7, sp, #0
   2e9ae:	6078      	str	r0, [r7, #4]
   2e9b0:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   2e9b2:	687b      	ldr	r3, [r7, #4]
   2e9b4:	3320      	adds	r3, #32
   2e9b6:	0018      	movs	r0, r3
   2e9b8:	687b      	ldr	r3, [r7, #4]
   2e9ba:	889b      	ldrh	r3, [r3, #4]
   2e9bc:	001a      	movs	r2, r3
   2e9be:	687b      	ldr	r3, [r7, #4]
   2e9c0:	799b      	ldrb	r3, [r3, #6]
   2e9c2:	6839      	ldr	r1, [r7, #0]
   2e9c4:	4c09      	ldr	r4, [pc, #36]	; (2e9ec <mqtt_connect+0x44>)
   2e9c6:	47a0      	blx	r4
   2e9c8:	0003      	movs	r3, r0
   2e9ca:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   2e9cc:	687b      	ldr	r3, [r7, #4]
   2e9ce:	681b      	ldr	r3, [r3, #0]
   2e9d0:	2b00      	cmp	r3, #0
   2e9d2:	d006      	beq.n	2e9e2 <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   2e9d4:	687b      	ldr	r3, [r7, #4]
   2e9d6:	681b      	ldr	r3, [r3, #0]
   2e9d8:	220c      	movs	r2, #12
   2e9da:	18ba      	adds	r2, r7, r2
   2e9dc:	6878      	ldr	r0, [r7, #4]
   2e9de:	2100      	movs	r1, #0
   2e9e0:	4798      	blx	r3
	return connResult.sock_connected.result;
   2e9e2:	68fb      	ldr	r3, [r7, #12]
}
   2e9e4:	0018      	movs	r0, r3
   2e9e6:	46bd      	mov	sp, r7
   2e9e8:	b005      	add	sp, #20
   2e9ea:	bd90      	pop	{r4, r7, pc}
   2e9ec:	0002e6c9 	.word	0x0002e6c9

0002e9f0 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   2e9f0:	b580      	push	{r7, lr}
   2e9f2:	b09c      	sub	sp, #112	; 0x70
   2e9f4:	af00      	add	r7, sp, #0
   2e9f6:	60f8      	str	r0, [r7, #12]
   2e9f8:	607a      	str	r2, [r7, #4]
   2e9fa:	603b      	str	r3, [r7, #0]
   2e9fc:	230b      	movs	r3, #11
   2e9fe:	18fb      	adds	r3, r7, r3
   2ea00:	1c0a      	adds	r2, r1, #0
   2ea02:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   2ea04:	2310      	movs	r3, #16
   2ea06:	18fa      	adds	r2, r7, r3
   2ea08:	4b31      	ldr	r3, [pc, #196]	; (2ead0 <mqtt_connect_broker+0xe0>)
   2ea0a:	0010      	movs	r0, r2
   2ea0c:	0019      	movs	r1, r3
   2ea0e:	2358      	movs	r3, #88	; 0x58
   2ea10:	001a      	movs	r2, r3
   2ea12:	4b30      	ldr	r3, [pc, #192]	; (2ead4 <mqtt_connect_broker+0xe4>)
   2ea14:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   2ea16:	2310      	movs	r3, #16
   2ea18:	18fb      	adds	r3, r7, r3
   2ea1a:	2204      	movs	r2, #4
   2ea1c:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   2ea1e:	2310      	movs	r3, #16
   2ea20:	18fb      	adds	r3, r7, r3
   2ea22:	6fba      	ldr	r2, [r7, #120]	; 0x78
   2ea24:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   2ea26:	2310      	movs	r3, #16
   2ea28:	18fb      	adds	r3, r7, r3
   2ea2a:	687a      	ldr	r2, [r7, #4]
   2ea2c:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   2ea2e:	2310      	movs	r3, #16
   2ea30:	18fb      	adds	r3, r7, r3
   2ea32:	683a      	ldr	r2, [r7, #0]
   2ea34:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   2ea36:	2310      	movs	r3, #16
   2ea38:	18fb      	adds	r3, r7, r3
   2ea3a:	220b      	movs	r2, #11
   2ea3c:	18ba      	adds	r2, r7, r2
   2ea3e:	7812      	ldrb	r2, [r2, #0]
   2ea40:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   2ea42:	2310      	movs	r3, #16
   2ea44:	18fb      	adds	r3, r7, r3
   2ea46:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   2ea48:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   2ea4a:	2310      	movs	r3, #16
   2ea4c:	18fb      	adds	r3, r7, r3
   2ea4e:	2280      	movs	r2, #128	; 0x80
   2ea50:	18ba      	adds	r2, r7, r2
   2ea52:	6812      	ldr	r2, [r2, #0]
   2ea54:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   2ea56:	2310      	movs	r3, #16
   2ea58:	18fb      	adds	r3, r7, r3
   2ea5a:	228c      	movs	r2, #140	; 0x8c
   2ea5c:	18ba      	adds	r2, r7, r2
   2ea5e:	213c      	movs	r1, #60	; 0x3c
   2ea60:	7812      	ldrb	r2, [r2, #0]
   2ea62:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   2ea64:	2310      	movs	r3, #16
   2ea66:	18fb      	adds	r3, r7, r3
   2ea68:	2288      	movs	r2, #136	; 0x88
   2ea6a:	18ba      	adds	r2, r7, r2
   2ea6c:	213d      	movs	r1, #61	; 0x3d
   2ea6e:	7812      	ldrb	r2, [r2, #0]
   2ea70:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   2ea72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   2ea74:	2b00      	cmp	r3, #0
   2ea76:	d008      	beq.n	2ea8a <mqtt_connect_broker+0x9a>
   2ea78:	2380      	movs	r3, #128	; 0x80
   2ea7a:	18fb      	adds	r3, r7, r3
   2ea7c:	681b      	ldr	r3, [r3, #0]
   2ea7e:	2b00      	cmp	r3, #0
   2ea80:	d003      	beq.n	2ea8a <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   2ea82:	2310      	movs	r3, #16
   2ea84:	18fb      	adds	r3, r7, r3
   2ea86:	2201      	movs	r2, #1
   2ea88:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   2ea8a:	68fb      	ldr	r3, [r7, #12]
   2ea8c:	69db      	ldr	r3, [r3, #28]
   2ea8e:	2210      	movs	r2, #16
   2ea90:	18ba      	adds	r2, r7, r2
   2ea92:	0011      	movs	r1, r2
   2ea94:	0018      	movs	r0, r3
   2ea96:	4b10      	ldr	r3, [pc, #64]	; (2ead8 <mqtt_connect_broker+0xe8>)
   2ea98:	4798      	blx	r3
   2ea9a:	0003      	movs	r3, r0
   2ea9c:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   2ea9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2eaa0:	b2da      	uxtb	r2, r3
   2eaa2:	2368      	movs	r3, #104	; 0x68
   2eaa4:	18fb      	adds	r3, r7, r3
   2eaa6:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   2eaa8:	68fb      	ldr	r3, [r7, #12]
   2eaaa:	681b      	ldr	r3, [r3, #0]
   2eaac:	2b00      	cmp	r3, #0
   2eaae:	d006      	beq.n	2eabe <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   2eab0:	68fb      	ldr	r3, [r7, #12]
   2eab2:	681b      	ldr	r3, [r3, #0]
   2eab4:	2268      	movs	r2, #104	; 0x68
   2eab6:	18ba      	adds	r2, r7, r2
   2eab8:	68f8      	ldr	r0, [r7, #12]
   2eaba:	2101      	movs	r1, #1
   2eabc:	4798      	blx	r3
	
	module->isConnected = true;
   2eabe:	68fb      	ldr	r3, [r7, #12]
   2eac0:	2234      	movs	r2, #52	; 0x34
   2eac2:	2101      	movs	r1, #1
   2eac4:	5499      	strb	r1, [r3, r2]
	return rc;
   2eac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   2eac8:	0018      	movs	r0, r3
   2eaca:	46bd      	mov	sp, r7
   2eacc:	b01c      	add	sp, #112	; 0x70
   2eace:	bd80      	pop	{r7, pc}
   2ead0:	00039604 	.word	0x00039604
   2ead4:	00034549 	.word	0x00034549
   2ead8:	0002de19 	.word	0x0002de19

0002eadc <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   2eadc:	b580      	push	{r7, lr}
   2eade:	b084      	sub	sp, #16
   2eae0:	af00      	add	r7, sp, #0
   2eae2:	6078      	str	r0, [r7, #4]
   2eae4:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   2eae6:	687b      	ldr	r3, [r7, #4]
   2eae8:	69db      	ldr	r3, [r3, #28]
   2eaea:	0018      	movs	r0, r3
   2eaec:	4b0c      	ldr	r3, [pc, #48]	; (2eb20 <mqtt_disconnect+0x44>)
   2eaee:	4798      	blx	r3
   2eaf0:	0003      	movs	r3, r0
   2eaf2:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   2eaf4:	68fb      	ldr	r3, [r7, #12]
   2eaf6:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   2eaf8:	687b      	ldr	r3, [r7, #4]
   2eafa:	681b      	ldr	r3, [r3, #0]
   2eafc:	2b00      	cmp	r3, #0
   2eafe:	d006      	beq.n	2eb0e <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   2eb00:	687b      	ldr	r3, [r7, #4]
   2eb02:	681b      	ldr	r3, [r3, #0]
   2eb04:	2208      	movs	r2, #8
   2eb06:	18ba      	adds	r2, r7, r2
   2eb08:	6878      	ldr	r0, [r7, #4]
   2eb0a:	2105      	movs	r1, #5
   2eb0c:	4798      	blx	r3
	
	module->isConnected = false;
   2eb0e:	687b      	ldr	r3, [r7, #4]
   2eb10:	2234      	movs	r2, #52	; 0x34
   2eb12:	2100      	movs	r1, #0
   2eb14:	5499      	strb	r1, [r3, r2]
	return rc;
   2eb16:	68fb      	ldr	r3, [r7, #12]
}
   2eb18:	0018      	movs	r0, r3
   2eb1a:	46bd      	mov	sp, r7
   2eb1c:	b004      	add	sp, #16
   2eb1e:	bd80      	pop	{r7, pc}
   2eb20:	0002e2a5 	.word	0x0002e2a5

0002eb24 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   2eb24:	b580      	push	{r7, lr}
   2eb26:	b08a      	sub	sp, #40	; 0x28
   2eb28:	af00      	add	r7, sp, #0
   2eb2a:	60f8      	str	r0, [r7, #12]
   2eb2c:	60b9      	str	r1, [r7, #8]
   2eb2e:	607a      	str	r2, [r7, #4]
   2eb30:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   2eb32:	2314      	movs	r3, #20
   2eb34:	18fb      	adds	r3, r7, r3
   2eb36:	2230      	movs	r2, #48	; 0x30
   2eb38:	18ba      	adds	r2, r7, r2
   2eb3a:	7812      	ldrb	r2, [r2, #0]
   2eb3c:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   2eb3e:	2314      	movs	r3, #20
   2eb40:	18fb      	adds	r3, r7, r3
   2eb42:	687a      	ldr	r2, [r7, #4]
   2eb44:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   2eb46:	2314      	movs	r3, #20
   2eb48:	18fb      	adds	r3, r7, r3
   2eb4a:	683a      	ldr	r2, [r7, #0]
   2eb4c:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   2eb4e:	2314      	movs	r3, #20
   2eb50:	18fb      	adds	r3, r7, r3
   2eb52:	2234      	movs	r2, #52	; 0x34
   2eb54:	18ba      	adds	r2, r7, r2
   2eb56:	7812      	ldrb	r2, [r2, #0]
   2eb58:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   2eb5a:	68fb      	ldr	r3, [r7, #12]
   2eb5c:	69db      	ldr	r3, [r3, #28]
   2eb5e:	2214      	movs	r2, #20
   2eb60:	18ba      	adds	r2, r7, r2
   2eb62:	68b9      	ldr	r1, [r7, #8]
   2eb64:	0018      	movs	r0, r3
   2eb66:	4b09      	ldr	r3, [pc, #36]	; (2eb8c <mqtt_publish+0x68>)
   2eb68:	4798      	blx	r3
   2eb6a:	0003      	movs	r3, r0
   2eb6c:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   2eb6e:	68fb      	ldr	r3, [r7, #12]
   2eb70:	681b      	ldr	r3, [r3, #0]
   2eb72:	2b00      	cmp	r3, #0
   2eb74:	d005      	beq.n	2eb82 <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   2eb76:	68fb      	ldr	r3, [r7, #12]
   2eb78:	681b      	ldr	r3, [r3, #0]
   2eb7a:	68f8      	ldr	r0, [r7, #12]
   2eb7c:	2200      	movs	r2, #0
   2eb7e:	2102      	movs	r1, #2
   2eb80:	4798      	blx	r3
	
	return rc;
   2eb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2eb84:	0018      	movs	r0, r3
   2eb86:	46bd      	mov	sp, r7
   2eb88:	b00a      	add	sp, #40	; 0x28
   2eb8a:	bd80      	pop	{r7, pc}
   2eb8c:	0002e0e5 	.word	0x0002e0e5

0002eb90 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   2eb90:	b590      	push	{r4, r7, lr}
   2eb92:	b087      	sub	sp, #28
   2eb94:	af00      	add	r7, sp, #0
   2eb96:	60f8      	str	r0, [r7, #12]
   2eb98:	60b9      	str	r1, [r7, #8]
   2eb9a:	603b      	str	r3, [r7, #0]
   2eb9c:	1dfb      	adds	r3, r7, #7
   2eb9e:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   2eba0:	68fb      	ldr	r3, [r7, #12]
   2eba2:	69d8      	ldr	r0, [r3, #28]
   2eba4:	683c      	ldr	r4, [r7, #0]
   2eba6:	1dfb      	adds	r3, r7, #7
   2eba8:	781a      	ldrb	r2, [r3, #0]
   2ebaa:	68b9      	ldr	r1, [r7, #8]
   2ebac:	0023      	movs	r3, r4
   2ebae:	4c09      	ldr	r4, [pc, #36]	; (2ebd4 <mqtt_subscribe+0x44>)
   2ebb0:	47a0      	blx	r4
   2ebb2:	0003      	movs	r3, r0
   2ebb4:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   2ebb6:	68fb      	ldr	r3, [r7, #12]
   2ebb8:	681b      	ldr	r3, [r3, #0]
   2ebba:	2b00      	cmp	r3, #0
   2ebbc:	d005      	beq.n	2ebca <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   2ebbe:	68fb      	ldr	r3, [r7, #12]
   2ebc0:	681b      	ldr	r3, [r3, #0]
   2ebc2:	68f8      	ldr	r0, [r7, #12]
   2ebc4:	2200      	movs	r2, #0
   2ebc6:	2103      	movs	r1, #3
   2ebc8:	4798      	blx	r3
	
	return rc;
   2ebca:	697b      	ldr	r3, [r7, #20]
}
   2ebcc:	0018      	movs	r0, r3
   2ebce:	46bd      	mov	sp, r7
   2ebd0:	b007      	add	sp, #28
   2ebd2:	bd90      	pop	{r4, r7, pc}
   2ebd4:	0002df59 	.word	0x0002df59

0002ebd8 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   2ebd8:	b580      	push	{r7, lr}
   2ebda:	b082      	sub	sp, #8
   2ebdc:	af00      	add	r7, sp, #0
   2ebde:	6078      	str	r0, [r7, #4]
   2ebe0:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   2ebe2:	687b      	ldr	r3, [r7, #4]
   2ebe4:	69db      	ldr	r3, [r3, #28]
   2ebe6:	683a      	ldr	r2, [r7, #0]
   2ebe8:	0011      	movs	r1, r2
   2ebea:	0018      	movs	r0, r3
   2ebec:	4b03      	ldr	r3, [pc, #12]	; (2ebfc <mqtt_yield+0x24>)
   2ebee:	4798      	blx	r3
   2ebf0:	0003      	movs	r3, r0
   2ebf2:	0018      	movs	r0, r3
   2ebf4:	46bd      	mov	sp, r7
   2ebf6:	b002      	add	sp, #8
   2ebf8:	bd80      	pop	{r7, pc}
   2ebfa:	46c0      	nop			; (mov r8, r8)
   2ebfc:	0002dd61 	.word	0x0002dd61

0002ec00 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   2ec00:	b590      	push	{r4, r7, lr}
   2ec02:	b085      	sub	sp, #20
   2ec04:	af00      	add	r7, sp, #0
   2ec06:	6078      	str	r0, [r7, #4]
	int len = 0;
   2ec08:	2300      	movs	r3, #0
   2ec0a:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   2ec0c:	687b      	ldr	r3, [r7, #4]
   2ec0e:	7a1b      	ldrb	r3, [r3, #8]
   2ec10:	2b03      	cmp	r3, #3
   2ec12:	d102      	bne.n	2ec1a <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   2ec14:	230c      	movs	r3, #12
   2ec16:	60fb      	str	r3, [r7, #12]
   2ec18:	e005      	b.n	2ec26 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   2ec1a:	687b      	ldr	r3, [r7, #4]
   2ec1c:	7a1b      	ldrb	r3, [r3, #8]
   2ec1e:	2b04      	cmp	r3, #4
   2ec20:	d101      	bne.n	2ec26 <MQTTSerialize_connectLength+0x26>
		len = 10;
   2ec22:	230a      	movs	r3, #10
   2ec24:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   2ec26:	687b      	ldr	r3, [r7, #4]
   2ec28:	68d8      	ldr	r0, [r3, #12]
   2ec2a:	6919      	ldr	r1, [r3, #16]
   2ec2c:	695a      	ldr	r2, [r3, #20]
   2ec2e:	4b25      	ldr	r3, [pc, #148]	; (2ecc4 <MQTTSerialize_connectLength+0xc4>)
   2ec30:	4798      	blx	r3
   2ec32:	0003      	movs	r3, r0
   2ec34:	3302      	adds	r3, #2
   2ec36:	68fa      	ldr	r2, [r7, #12]
   2ec38:	18d3      	adds	r3, r2, r3
   2ec3a:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   2ec3c:	687b      	ldr	r3, [r7, #4]
   2ec3e:	7edb      	ldrb	r3, [r3, #27]
   2ec40:	2b00      	cmp	r3, #0
   2ec42:	d013      	beq.n	2ec6c <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   2ec44:	687b      	ldr	r3, [r7, #4]
   2ec46:	6a58      	ldr	r0, [r3, #36]	; 0x24
   2ec48:	6a99      	ldr	r1, [r3, #40]	; 0x28
   2ec4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ec4c:	4b1d      	ldr	r3, [pc, #116]	; (2ecc4 <MQTTSerialize_connectLength+0xc4>)
   2ec4e:	4798      	blx	r3
   2ec50:	0003      	movs	r3, r0
   2ec52:	1c9c      	adds	r4, r3, #2
   2ec54:	687b      	ldr	r3, [r7, #4]
   2ec56:	6b18      	ldr	r0, [r3, #48]	; 0x30
   2ec58:	6b59      	ldr	r1, [r3, #52]	; 0x34
   2ec5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2ec5c:	4b19      	ldr	r3, [pc, #100]	; (2ecc4 <MQTTSerialize_connectLength+0xc4>)
   2ec5e:	4798      	blx	r3
   2ec60:	0003      	movs	r3, r0
   2ec62:	18e3      	adds	r3, r4, r3
   2ec64:	3302      	adds	r3, #2
   2ec66:	68fa      	ldr	r2, [r7, #12]
   2ec68:	18d3      	adds	r3, r2, r3
   2ec6a:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   2ec6c:	687b      	ldr	r3, [r7, #4]
   2ec6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2ec70:	2b00      	cmp	r3, #0
   2ec72:	d103      	bne.n	2ec7c <MQTTSerialize_connectLength+0x7c>
   2ec74:	687b      	ldr	r3, [r7, #4]
   2ec76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2ec78:	2b00      	cmp	r3, #0
   2ec7a:	d00a      	beq.n	2ec92 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   2ec7c:	687b      	ldr	r3, [r7, #4]
   2ec7e:	6c18      	ldr	r0, [r3, #64]	; 0x40
   2ec80:	6c59      	ldr	r1, [r3, #68]	; 0x44
   2ec82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   2ec84:	4b0f      	ldr	r3, [pc, #60]	; (2ecc4 <MQTTSerialize_connectLength+0xc4>)
   2ec86:	4798      	blx	r3
   2ec88:	0003      	movs	r3, r0
   2ec8a:	3302      	adds	r3, #2
   2ec8c:	68fa      	ldr	r2, [r7, #12]
   2ec8e:	18d3      	adds	r3, r2, r3
   2ec90:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   2ec92:	687b      	ldr	r3, [r7, #4]
   2ec94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2ec96:	2b00      	cmp	r3, #0
   2ec98:	d103      	bne.n	2eca2 <MQTTSerialize_connectLength+0xa2>
   2ec9a:	687b      	ldr	r3, [r7, #4]
   2ec9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2ec9e:	2b00      	cmp	r3, #0
   2eca0:	d00a      	beq.n	2ecb8 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   2eca2:	687b      	ldr	r3, [r7, #4]
   2eca4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   2eca6:	6d19      	ldr	r1, [r3, #80]	; 0x50
   2eca8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2ecaa:	4b06      	ldr	r3, [pc, #24]	; (2ecc4 <MQTTSerialize_connectLength+0xc4>)
   2ecac:	4798      	blx	r3
   2ecae:	0003      	movs	r3, r0
   2ecb0:	3302      	adds	r3, #2
   2ecb2:	68fa      	ldr	r2, [r7, #12]
   2ecb4:	18d3      	adds	r3, r2, r3
   2ecb6:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   2ecb8:	68fb      	ldr	r3, [r7, #12]
}
   2ecba:	0018      	movs	r0, r3
   2ecbc:	46bd      	mov	sp, r7
   2ecbe:	b005      	add	sp, #20
   2ecc0:	bd90      	pop	{r4, r7, pc}
   2ecc2:	46c0      	nop			; (mov r8, r8)
   2ecc4:	0002f671 	.word	0x0002f671

0002ecc8 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   2ecc8:	b590      	push	{r4, r7, lr}
   2ecca:	b08b      	sub	sp, #44	; 0x2c
   2eccc:	af00      	add	r7, sp, #0
   2ecce:	60f8      	str	r0, [r7, #12]
   2ecd0:	60b9      	str	r1, [r7, #8]
   2ecd2:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   2ecd4:	68fb      	ldr	r3, [r7, #12]
   2ecd6:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   2ecd8:	2300      	movs	r3, #0
   2ecda:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   2ecdc:	2300      	movs	r3, #0
   2ecde:	617b      	str	r3, [r7, #20]
	int len = 0;
   2ece0:	2300      	movs	r3, #0
   2ece2:	623b      	str	r3, [r7, #32]
	int rc = -1;
   2ece4:	2301      	movs	r3, #1
   2ece6:	425b      	negs	r3, r3
   2ece8:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   2ecea:	687b      	ldr	r3, [r7, #4]
   2ecec:	0018      	movs	r0, r3
   2ecee:	4b8c      	ldr	r3, [pc, #560]	; (2ef20 <MQTTSerialize_connect+0x258>)
   2ecf0:	4798      	blx	r3
   2ecf2:	0003      	movs	r3, r0
   2ecf4:	623b      	str	r3, [r7, #32]
   2ecf6:	6a3b      	ldr	r3, [r7, #32]
   2ecf8:	0018      	movs	r0, r3
   2ecfa:	4b8a      	ldr	r3, [pc, #552]	; (2ef24 <MQTTSerialize_connect+0x25c>)
   2ecfc:	4798      	blx	r3
   2ecfe:	0002      	movs	r2, r0
   2ed00:	68bb      	ldr	r3, [r7, #8]
   2ed02:	429a      	cmp	r2, r3
   2ed04:	dd03      	ble.n	2ed0e <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2ed06:	2302      	movs	r3, #2
   2ed08:	425b      	negs	r3, r3
   2ed0a:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   2ed0c:	e103      	b.n	2ef16 <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   2ed0e:	2318      	movs	r3, #24
   2ed10:	18fb      	adds	r3, r7, r3
   2ed12:	2200      	movs	r2, #0
   2ed14:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   2ed16:	2318      	movs	r3, #24
   2ed18:	18fb      	adds	r3, r7, r3
   2ed1a:	781a      	ldrb	r2, [r3, #0]
   2ed1c:	210f      	movs	r1, #15
   2ed1e:	400a      	ands	r2, r1
   2ed20:	1c11      	adds	r1, r2, #0
   2ed22:	2210      	movs	r2, #16
   2ed24:	430a      	orrs	r2, r1
   2ed26:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2ed28:	2318      	movs	r3, #24
   2ed2a:	18fb      	adds	r3, r7, r3
   2ed2c:	781a      	ldrb	r2, [r3, #0]
   2ed2e:	231c      	movs	r3, #28
   2ed30:	18fb      	adds	r3, r7, r3
   2ed32:	0011      	movs	r1, r2
   2ed34:	0018      	movs	r0, r3
   2ed36:	4b7c      	ldr	r3, [pc, #496]	; (2ef28 <MQTTSerialize_connect+0x260>)
   2ed38:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   2ed3a:	69fb      	ldr	r3, [r7, #28]
   2ed3c:	6a3a      	ldr	r2, [r7, #32]
   2ed3e:	0011      	movs	r1, r2
   2ed40:	0018      	movs	r0, r3
   2ed42:	4b7a      	ldr	r3, [pc, #488]	; (2ef2c <MQTTSerialize_connect+0x264>)
   2ed44:	4798      	blx	r3
   2ed46:	0002      	movs	r2, r0
   2ed48:	69fb      	ldr	r3, [r7, #28]
   2ed4a:	189b      	adds	r3, r3, r2
   2ed4c:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   2ed4e:	687b      	ldr	r3, [r7, #4]
   2ed50:	7a1b      	ldrb	r3, [r3, #8]
   2ed52:	2b04      	cmp	r3, #4
   2ed54:	d10d      	bne.n	2ed72 <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   2ed56:	4a76      	ldr	r2, [pc, #472]	; (2ef30 <MQTTSerialize_connect+0x268>)
   2ed58:	231c      	movs	r3, #28
   2ed5a:	18fb      	adds	r3, r7, r3
   2ed5c:	0011      	movs	r1, r2
   2ed5e:	0018      	movs	r0, r3
   2ed60:	4b74      	ldr	r3, [pc, #464]	; (2ef34 <MQTTSerialize_connect+0x26c>)
   2ed62:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   2ed64:	231c      	movs	r3, #28
   2ed66:	18fb      	adds	r3, r7, r3
   2ed68:	2104      	movs	r1, #4
   2ed6a:	0018      	movs	r0, r3
   2ed6c:	4b6e      	ldr	r3, [pc, #440]	; (2ef28 <MQTTSerialize_connect+0x260>)
   2ed6e:	4798      	blx	r3
   2ed70:	e00c      	b.n	2ed8c <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   2ed72:	4a71      	ldr	r2, [pc, #452]	; (2ef38 <MQTTSerialize_connect+0x270>)
   2ed74:	231c      	movs	r3, #28
   2ed76:	18fb      	adds	r3, r7, r3
   2ed78:	0011      	movs	r1, r2
   2ed7a:	0018      	movs	r0, r3
   2ed7c:	4b6d      	ldr	r3, [pc, #436]	; (2ef34 <MQTTSerialize_connect+0x26c>)
   2ed7e:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   2ed80:	231c      	movs	r3, #28
   2ed82:	18fb      	adds	r3, r7, r3
   2ed84:	2103      	movs	r1, #3
   2ed86:	0018      	movs	r0, r3
   2ed88:	4b67      	ldr	r3, [pc, #412]	; (2ef28 <MQTTSerialize_connect+0x260>)
   2ed8a:	4798      	blx	r3
	}

	flags.all = 0;
   2ed8c:	2314      	movs	r3, #20
   2ed8e:	18fb      	adds	r3, r7, r3
   2ed90:	2200      	movs	r2, #0
   2ed92:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   2ed94:	687b      	ldr	r3, [r7, #4]
   2ed96:	7e9b      	ldrb	r3, [r3, #26]
   2ed98:	1c1a      	adds	r2, r3, #0
   2ed9a:	2301      	movs	r3, #1
   2ed9c:	4013      	ands	r3, r2
   2ed9e:	b2da      	uxtb	r2, r3
   2eda0:	2314      	movs	r3, #20
   2eda2:	18fb      	adds	r3, r7, r3
   2eda4:	2101      	movs	r1, #1
   2eda6:	400a      	ands	r2, r1
   2eda8:	1890      	adds	r0, r2, r2
   2edaa:	781a      	ldrb	r2, [r3, #0]
   2edac:	2102      	movs	r1, #2
   2edae:	438a      	bics	r2, r1
   2edb0:	1c11      	adds	r1, r2, #0
   2edb2:	1c02      	adds	r2, r0, #0
   2edb4:	430a      	orrs	r2, r1
   2edb6:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   2edb8:	687b      	ldr	r3, [r7, #4]
   2edba:	7edb      	ldrb	r3, [r3, #27]
   2edbc:	1e5a      	subs	r2, r3, #1
   2edbe:	4193      	sbcs	r3, r2
   2edc0:	b2da      	uxtb	r2, r3
   2edc2:	2314      	movs	r3, #20
   2edc4:	18fb      	adds	r3, r7, r3
   2edc6:	2101      	movs	r1, #1
   2edc8:	400a      	ands	r2, r1
   2edca:	0090      	lsls	r0, r2, #2
   2edcc:	781a      	ldrb	r2, [r3, #0]
   2edce:	2104      	movs	r1, #4
   2edd0:	438a      	bics	r2, r1
   2edd2:	1c11      	adds	r1, r2, #0
   2edd4:	1c02      	adds	r2, r0, #0
   2edd6:	430a      	orrs	r2, r1
   2edd8:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   2edda:	2314      	movs	r3, #20
   2eddc:	18fb      	adds	r3, r7, r3
   2edde:	781b      	ldrb	r3, [r3, #0]
   2ede0:	2204      	movs	r2, #4
   2ede2:	4013      	ands	r3, r2
   2ede4:	b2db      	uxtb	r3, r3
   2ede6:	2b00      	cmp	r3, #0
   2ede8:	d025      	beq.n	2ee36 <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   2edea:	687b      	ldr	r3, [r7, #4]
   2edec:	223d      	movs	r2, #61	; 0x3d
   2edee:	5c9b      	ldrb	r3, [r3, r2]
   2edf0:	1c1a      	adds	r2, r3, #0
   2edf2:	2303      	movs	r3, #3
   2edf4:	4013      	ands	r3, r2
   2edf6:	b2da      	uxtb	r2, r3
   2edf8:	2314      	movs	r3, #20
   2edfa:	18fb      	adds	r3, r7, r3
   2edfc:	2103      	movs	r1, #3
   2edfe:	400a      	ands	r2, r1
   2ee00:	00d0      	lsls	r0, r2, #3
   2ee02:	781a      	ldrb	r2, [r3, #0]
   2ee04:	2118      	movs	r1, #24
   2ee06:	438a      	bics	r2, r1
   2ee08:	1c11      	adds	r1, r2, #0
   2ee0a:	1c02      	adds	r2, r0, #0
   2ee0c:	430a      	orrs	r2, r1
   2ee0e:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   2ee10:	687b      	ldr	r3, [r7, #4]
   2ee12:	223c      	movs	r2, #60	; 0x3c
   2ee14:	5c9b      	ldrb	r3, [r3, r2]
   2ee16:	1c1a      	adds	r2, r3, #0
   2ee18:	2301      	movs	r3, #1
   2ee1a:	4013      	ands	r3, r2
   2ee1c:	b2da      	uxtb	r2, r3
   2ee1e:	2314      	movs	r3, #20
   2ee20:	18fb      	adds	r3, r7, r3
   2ee22:	2101      	movs	r1, #1
   2ee24:	400a      	ands	r2, r1
   2ee26:	0150      	lsls	r0, r2, #5
   2ee28:	781a      	ldrb	r2, [r3, #0]
   2ee2a:	2120      	movs	r1, #32
   2ee2c:	438a      	bics	r2, r1
   2ee2e:	1c11      	adds	r1, r2, #0
   2ee30:	1c02      	adds	r2, r0, #0
   2ee32:	430a      	orrs	r2, r1
   2ee34:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   2ee36:	687b      	ldr	r3, [r7, #4]
   2ee38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2ee3a:	2b00      	cmp	r3, #0
   2ee3c:	d103      	bne.n	2ee46 <MQTTSerialize_connect+0x17e>
   2ee3e:	687b      	ldr	r3, [r7, #4]
   2ee40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2ee42:	2b00      	cmp	r3, #0
   2ee44:	d006      	beq.n	2ee54 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   2ee46:	2314      	movs	r3, #20
   2ee48:	18fb      	adds	r3, r7, r3
   2ee4a:	781a      	ldrb	r2, [r3, #0]
   2ee4c:	2180      	movs	r1, #128	; 0x80
   2ee4e:	4249      	negs	r1, r1
   2ee50:	430a      	orrs	r2, r1
   2ee52:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   2ee54:	687b      	ldr	r3, [r7, #4]
   2ee56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2ee58:	2b00      	cmp	r3, #0
   2ee5a:	d103      	bne.n	2ee64 <MQTTSerialize_connect+0x19c>
   2ee5c:	687b      	ldr	r3, [r7, #4]
   2ee5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2ee60:	2b00      	cmp	r3, #0
   2ee62:	d005      	beq.n	2ee70 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   2ee64:	2314      	movs	r3, #20
   2ee66:	18fb      	adds	r3, r7, r3
   2ee68:	781a      	ldrb	r2, [r3, #0]
   2ee6a:	2140      	movs	r1, #64	; 0x40
   2ee6c:	430a      	orrs	r2, r1
   2ee6e:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   2ee70:	2314      	movs	r3, #20
   2ee72:	18fb      	adds	r3, r7, r3
   2ee74:	781a      	ldrb	r2, [r3, #0]
   2ee76:	231c      	movs	r3, #28
   2ee78:	18fb      	adds	r3, r7, r3
   2ee7a:	0011      	movs	r1, r2
   2ee7c:	0018      	movs	r0, r3
   2ee7e:	4b2a      	ldr	r3, [pc, #168]	; (2ef28 <MQTTSerialize_connect+0x260>)
   2ee80:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   2ee82:	687b      	ldr	r3, [r7, #4]
   2ee84:	8b1b      	ldrh	r3, [r3, #24]
   2ee86:	001a      	movs	r2, r3
   2ee88:	231c      	movs	r3, #28
   2ee8a:	18fb      	adds	r3, r7, r3
   2ee8c:	0011      	movs	r1, r2
   2ee8e:	0018      	movs	r0, r3
   2ee90:	4b2a      	ldr	r3, [pc, #168]	; (2ef3c <MQTTSerialize_connect+0x274>)
   2ee92:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   2ee94:	687b      	ldr	r3, [r7, #4]
   2ee96:	221c      	movs	r2, #28
   2ee98:	18b8      	adds	r0, r7, r2
   2ee9a:	68d9      	ldr	r1, [r3, #12]
   2ee9c:	691a      	ldr	r2, [r3, #16]
   2ee9e:	695b      	ldr	r3, [r3, #20]
   2eea0:	4c27      	ldr	r4, [pc, #156]	; (2ef40 <MQTTSerialize_connect+0x278>)
   2eea2:	47a0      	blx	r4
	if (options->willFlag)
   2eea4:	687b      	ldr	r3, [r7, #4]
   2eea6:	7edb      	ldrb	r3, [r3, #27]
   2eea8:	2b00      	cmp	r3, #0
   2eeaa:	d00f      	beq.n	2eecc <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   2eeac:	687b      	ldr	r3, [r7, #4]
   2eeae:	221c      	movs	r2, #28
   2eeb0:	18b8      	adds	r0, r7, r2
   2eeb2:	6a59      	ldr	r1, [r3, #36]	; 0x24
   2eeb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2eeb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2eeb8:	4c21      	ldr	r4, [pc, #132]	; (2ef40 <MQTTSerialize_connect+0x278>)
   2eeba:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   2eebc:	687b      	ldr	r3, [r7, #4]
   2eebe:	221c      	movs	r2, #28
   2eec0:	18b8      	adds	r0, r7, r2
   2eec2:	6b19      	ldr	r1, [r3, #48]	; 0x30
   2eec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2eec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2eec8:	4c1d      	ldr	r4, [pc, #116]	; (2ef40 <MQTTSerialize_connect+0x278>)
   2eeca:	47a0      	blx	r4
	}
	if (flags.bits.username)
   2eecc:	2314      	movs	r3, #20
   2eece:	18fb      	adds	r3, r7, r3
   2eed0:	781b      	ldrb	r3, [r3, #0]
   2eed2:	227f      	movs	r2, #127	; 0x7f
   2eed4:	4393      	bics	r3, r2
   2eed6:	b2db      	uxtb	r3, r3
   2eed8:	2b00      	cmp	r3, #0
   2eeda:	d007      	beq.n	2eeec <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   2eedc:	687b      	ldr	r3, [r7, #4]
   2eede:	221c      	movs	r2, #28
   2eee0:	18b8      	adds	r0, r7, r2
   2eee2:	6c19      	ldr	r1, [r3, #64]	; 0x40
   2eee4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2eee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2eee8:	4c15      	ldr	r4, [pc, #84]	; (2ef40 <MQTTSerialize_connect+0x278>)
   2eeea:	47a0      	blx	r4
	if (flags.bits.password)
   2eeec:	2314      	movs	r3, #20
   2eeee:	18fb      	adds	r3, r7, r3
   2eef0:	781b      	ldrb	r3, [r3, #0]
   2eef2:	2240      	movs	r2, #64	; 0x40
   2eef4:	4013      	ands	r3, r2
   2eef6:	b2db      	uxtb	r3, r3
   2eef8:	2b00      	cmp	r3, #0
   2eefa:	d007      	beq.n	2ef0c <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   2eefc:	687b      	ldr	r3, [r7, #4]
   2eefe:	221c      	movs	r2, #28
   2ef00:	18b8      	adds	r0, r7, r2
   2ef02:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   2ef04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2ef06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2ef08:	4c0d      	ldr	r4, [pc, #52]	; (2ef40 <MQTTSerialize_connect+0x278>)
   2ef0a:	47a0      	blx	r4

	rc = ptr - buf;
   2ef0c:	69fb      	ldr	r3, [r7, #28]
   2ef0e:	001a      	movs	r2, r3
   2ef10:	68fb      	ldr	r3, [r7, #12]
   2ef12:	1ad3      	subs	r3, r2, r3
   2ef14:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   2ef16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2ef18:	0018      	movs	r0, r3
   2ef1a:	46bd      	mov	sp, r7
   2ef1c:	b00b      	add	sp, #44	; 0x2c
   2ef1e:	bd90      	pop	{r4, r7, pc}
   2ef20:	0002ec01 	.word	0x0002ec01
   2ef24:	0002f395 	.word	0x0002f395
   2ef28:	0002f4b7 	.word	0x0002f4b7
   2ef2c:	0002f29d 	.word	0x0002f29d
   2ef30:	0003965c 	.word	0x0003965c
   2ef34:	0002f539 	.word	0x0002f539
   2ef38:	00039664 	.word	0x00039664
   2ef3c:	0002f4e1 	.word	0x0002f4e1
   2ef40:	0002f589 	.word	0x0002f589

0002ef44 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   2ef44:	b580      	push	{r7, lr}
   2ef46:	b08a      	sub	sp, #40	; 0x28
   2ef48:	af00      	add	r7, sp, #0
   2ef4a:	60f8      	str	r0, [r7, #12]
   2ef4c:	60b9      	str	r1, [r7, #8]
   2ef4e:	607a      	str	r2, [r7, #4]
   2ef50:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2ef52:	2300      	movs	r3, #0
   2ef54:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2ef56:	687b      	ldr	r3, [r7, #4]
   2ef58:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2ef5a:	2300      	movs	r3, #0
   2ef5c:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2ef5e:	2300      	movs	r3, #0
   2ef60:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   2ef62:	2300      	movs	r3, #0
   2ef64:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2ef66:	2318      	movs	r3, #24
   2ef68:	18fb      	adds	r3, r7, r3
   2ef6a:	0018      	movs	r0, r3
   2ef6c:	4b25      	ldr	r3, [pc, #148]	; (2f004 <MQTTDeserialize_connack+0xc0>)
   2ef6e:	4798      	blx	r3
   2ef70:	0003      	movs	r3, r0
   2ef72:	001a      	movs	r2, r3
   2ef74:	231c      	movs	r3, #28
   2ef76:	18fb      	adds	r3, r7, r3
   2ef78:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   2ef7a:	231c      	movs	r3, #28
   2ef7c:	18fb      	adds	r3, r7, r3
   2ef7e:	781b      	ldrb	r3, [r3, #0]
   2ef80:	220f      	movs	r2, #15
   2ef82:	4393      	bics	r3, r2
   2ef84:	b2db      	uxtb	r3, r3
   2ef86:	2b20      	cmp	r3, #32
   2ef88:	d134      	bne.n	2eff4 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2ef8a:	69bb      	ldr	r3, [r7, #24]
   2ef8c:	2214      	movs	r2, #20
   2ef8e:	18ba      	adds	r2, r7, r2
   2ef90:	0011      	movs	r1, r2
   2ef92:	0018      	movs	r0, r3
   2ef94:	4b1c      	ldr	r3, [pc, #112]	; (2f008 <MQTTDeserialize_connack+0xc4>)
   2ef96:	4798      	blx	r3
   2ef98:	0003      	movs	r3, r0
   2ef9a:	627b      	str	r3, [r7, #36]	; 0x24
   2ef9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2ef9e:	69bb      	ldr	r3, [r7, #24]
   2efa0:	189b      	adds	r3, r3, r2
   2efa2:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2efa4:	69bb      	ldr	r3, [r7, #24]
   2efa6:	697a      	ldr	r2, [r7, #20]
   2efa8:	189b      	adds	r3, r3, r2
   2efaa:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   2efac:	6a3b      	ldr	r3, [r7, #32]
   2efae:	69ba      	ldr	r2, [r7, #24]
   2efb0:	1a9b      	subs	r3, r3, r2
   2efb2:	2b01      	cmp	r3, #1
   2efb4:	dd20      	ble.n	2eff8 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   2efb6:	2318      	movs	r3, #24
   2efb8:	18fb      	adds	r3, r7, r3
   2efba:	0018      	movs	r0, r3
   2efbc:	4b11      	ldr	r3, [pc, #68]	; (2f004 <MQTTDeserialize_connack+0xc0>)
   2efbe:	4798      	blx	r3
   2efc0:	0003      	movs	r3, r0
   2efc2:	001a      	movs	r2, r3
   2efc4:	2310      	movs	r3, #16
   2efc6:	18fb      	adds	r3, r7, r3
   2efc8:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   2efca:	2310      	movs	r3, #16
   2efcc:	18fb      	adds	r3, r7, r3
   2efce:	781b      	ldrb	r3, [r3, #0]
   2efd0:	061b      	lsls	r3, r3, #24
   2efd2:	0fdb      	lsrs	r3, r3, #31
   2efd4:	b2db      	uxtb	r3, r3
   2efd6:	001a      	movs	r2, r3
   2efd8:	68fb      	ldr	r3, [r7, #12]
   2efda:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   2efdc:	2318      	movs	r3, #24
   2efde:	18fb      	adds	r3, r7, r3
   2efe0:	0018      	movs	r0, r3
   2efe2:	4b08      	ldr	r3, [pc, #32]	; (2f004 <MQTTDeserialize_connack+0xc0>)
   2efe4:	4798      	blx	r3
   2efe6:	0003      	movs	r3, r0
   2efe8:	001a      	movs	r2, r3
   2efea:	68bb      	ldr	r3, [r7, #8]
   2efec:	701a      	strb	r2, [r3, #0]

	rc = 1;
   2efee:	2301      	movs	r3, #1
   2eff0:	627b      	str	r3, [r7, #36]	; 0x24
   2eff2:	e002      	b.n	2effa <MQTTDeserialize_connack+0xb6>
		goto exit;
   2eff4:	46c0      	nop			; (mov r8, r8)
   2eff6:	e000      	b.n	2effa <MQTTDeserialize_connack+0xb6>
		goto exit;
   2eff8:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2effa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2effc:	0018      	movs	r0, r3
   2effe:	46bd      	mov	sp, r7
   2f000:	b00a      	add	sp, #40	; 0x28
   2f002:	bd80      	pop	{r7, pc}
   2f004:	0002f48b 	.word	0x0002f48b
   2f008:	0002f425 	.word	0x0002f425

0002f00c <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   2f00c:	b580      	push	{r7, lr}
   2f00e:	b088      	sub	sp, #32
   2f010:	af00      	add	r7, sp, #0
   2f012:	60f8      	str	r0, [r7, #12]
   2f014:	60b9      	str	r1, [r7, #8]
   2f016:	1dfb      	adds	r3, r7, #7
   2f018:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   2f01a:	2300      	movs	r3, #0
   2f01c:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   2f01e:	2301      	movs	r3, #1
   2f020:	425b      	negs	r3, r3
   2f022:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   2f024:	68fb      	ldr	r3, [r7, #12]
   2f026:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   2f028:	68bb      	ldr	r3, [r7, #8]
   2f02a:	2b01      	cmp	r3, #1
   2f02c:	dc03      	bgt.n	2f036 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2f02e:	2302      	movs	r3, #2
   2f030:	425b      	negs	r3, r3
   2f032:	61fb      	str	r3, [r7, #28]
		goto exit;
   2f034:	e029      	b.n	2f08a <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   2f036:	2318      	movs	r3, #24
   2f038:	18fb      	adds	r3, r7, r3
   2f03a:	2200      	movs	r2, #0
   2f03c:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   2f03e:	1dfb      	adds	r3, r7, #7
   2f040:	781b      	ldrb	r3, [r3, #0]
   2f042:	220f      	movs	r2, #15
   2f044:	4013      	ands	r3, r2
   2f046:	b2da      	uxtb	r2, r3
   2f048:	2318      	movs	r3, #24
   2f04a:	18fb      	adds	r3, r7, r3
   2f04c:	0110      	lsls	r0, r2, #4
   2f04e:	781a      	ldrb	r2, [r3, #0]
   2f050:	210f      	movs	r1, #15
   2f052:	400a      	ands	r2, r1
   2f054:	1c11      	adds	r1, r2, #0
   2f056:	1c02      	adds	r2, r0, #0
   2f058:	430a      	orrs	r2, r1
   2f05a:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2f05c:	2318      	movs	r3, #24
   2f05e:	18fb      	adds	r3, r7, r3
   2f060:	781a      	ldrb	r2, [r3, #0]
   2f062:	2314      	movs	r3, #20
   2f064:	18fb      	adds	r3, r7, r3
   2f066:	0011      	movs	r1, r2
   2f068:	0018      	movs	r0, r3
   2f06a:	4b0a      	ldr	r3, [pc, #40]	; (2f094 <MQTTSerialize_zero+0x88>)
   2f06c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   2f06e:	697b      	ldr	r3, [r7, #20]
   2f070:	2100      	movs	r1, #0
   2f072:	0018      	movs	r0, r3
   2f074:	4b08      	ldr	r3, [pc, #32]	; (2f098 <MQTTSerialize_zero+0x8c>)
   2f076:	4798      	blx	r3
   2f078:	0002      	movs	r2, r0
   2f07a:	697b      	ldr	r3, [r7, #20]
   2f07c:	189b      	adds	r3, r3, r2
   2f07e:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   2f080:	697b      	ldr	r3, [r7, #20]
   2f082:	001a      	movs	r2, r3
   2f084:	68fb      	ldr	r3, [r7, #12]
   2f086:	1ad3      	subs	r3, r2, r3
   2f088:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f08a:	69fb      	ldr	r3, [r7, #28]
}
   2f08c:	0018      	movs	r0, r3
   2f08e:	46bd      	mov	sp, r7
   2f090:	b008      	add	sp, #32
   2f092:	bd80      	pop	{r7, pc}
   2f094:	0002f4b7 	.word	0x0002f4b7
   2f098:	0002f29d 	.word	0x0002f29d

0002f09c <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   2f09c:	b580      	push	{r7, lr}
   2f09e:	b082      	sub	sp, #8
   2f0a0:	af00      	add	r7, sp, #0
   2f0a2:	6078      	str	r0, [r7, #4]
   2f0a4:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   2f0a6:	6839      	ldr	r1, [r7, #0]
   2f0a8:	687b      	ldr	r3, [r7, #4]
   2f0aa:	220e      	movs	r2, #14
   2f0ac:	0018      	movs	r0, r3
   2f0ae:	4b03      	ldr	r3, [pc, #12]	; (2f0bc <MQTTSerialize_disconnect+0x20>)
   2f0b0:	4798      	blx	r3
   2f0b2:	0003      	movs	r3, r0
}
   2f0b4:	0018      	movs	r0, r3
   2f0b6:	46bd      	mov	sp, r7
   2f0b8:	b002      	add	sp, #8
   2f0ba:	bd80      	pop	{r7, pc}
   2f0bc:	0002f00d 	.word	0x0002f00d

0002f0c0 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   2f0c0:	b580      	push	{r7, lr}
   2f0c2:	b082      	sub	sp, #8
   2f0c4:	af00      	add	r7, sp, #0
   2f0c6:	6078      	str	r0, [r7, #4]
   2f0c8:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   2f0ca:	6839      	ldr	r1, [r7, #0]
   2f0cc:	687b      	ldr	r3, [r7, #4]
   2f0ce:	220c      	movs	r2, #12
   2f0d0:	0018      	movs	r0, r3
   2f0d2:	4b03      	ldr	r3, [pc, #12]	; (2f0e0 <MQTTSerialize_pingreq+0x20>)
   2f0d4:	4798      	blx	r3
   2f0d6:	0003      	movs	r3, r0
}
   2f0d8:	0018      	movs	r0, r3
   2f0da:	46bd      	mov	sp, r7
   2f0dc:	b002      	add	sp, #8
   2f0de:	bd80      	pop	{r7, pc}
   2f0e0:	0002f00d 	.word	0x0002f00d

0002f0e4 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   2f0e4:	b580      	push	{r7, lr}
   2f0e6:	b08a      	sub	sp, #40	; 0x28
   2f0e8:	af00      	add	r7, sp, #0
   2f0ea:	60f8      	str	r0, [r7, #12]
   2f0ec:	60b9      	str	r1, [r7, #8]
   2f0ee:	607a      	str	r2, [r7, #4]
   2f0f0:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2f0f2:	2300      	movs	r3, #0
   2f0f4:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2f0f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2f0f8:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2f0fa:	2300      	movs	r3, #0
   2f0fc:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2f0fe:	2300      	movs	r3, #0
   2f100:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   2f102:	2300      	movs	r3, #0
   2f104:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2f106:	2318      	movs	r3, #24
   2f108:	18fb      	adds	r3, r7, r3
   2f10a:	0018      	movs	r0, r3
   2f10c:	4b32      	ldr	r3, [pc, #200]	; (2f1d8 <MQTTDeserialize_publish+0xf4>)
   2f10e:	4798      	blx	r3
   2f110:	0003      	movs	r3, r0
   2f112:	001a      	movs	r2, r3
   2f114:	231c      	movs	r3, #28
   2f116:	18fb      	adds	r3, r7, r3
   2f118:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   2f11a:	231c      	movs	r3, #28
   2f11c:	18fb      	adds	r3, r7, r3
   2f11e:	781b      	ldrb	r3, [r3, #0]
   2f120:	220f      	movs	r2, #15
   2f122:	4393      	bics	r3, r2
   2f124:	b2db      	uxtb	r3, r3
   2f126:	2b30      	cmp	r3, #48	; 0x30
   2f128:	d150      	bne.n	2f1cc <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   2f12a:	231c      	movs	r3, #28
   2f12c:	18fb      	adds	r3, r7, r3
   2f12e:	781b      	ldrb	r3, [r3, #0]
   2f130:	071b      	lsls	r3, r3, #28
   2f132:	0fdb      	lsrs	r3, r3, #31
   2f134:	b2db      	uxtb	r3, r3
   2f136:	001a      	movs	r2, r3
   2f138:	68fb      	ldr	r3, [r7, #12]
   2f13a:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   2f13c:	231c      	movs	r3, #28
   2f13e:	18fb      	adds	r3, r7, r3
   2f140:	781b      	ldrb	r3, [r3, #0]
   2f142:	075b      	lsls	r3, r3, #29
   2f144:	0f9b      	lsrs	r3, r3, #30
   2f146:	b2db      	uxtb	r3, r3
   2f148:	001a      	movs	r2, r3
   2f14a:	68bb      	ldr	r3, [r7, #8]
   2f14c:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   2f14e:	231c      	movs	r3, #28
   2f150:	18fb      	adds	r3, r7, r3
   2f152:	781b      	ldrb	r3, [r3, #0]
   2f154:	07db      	lsls	r3, r3, #31
   2f156:	0fdb      	lsrs	r3, r3, #31
   2f158:	b2db      	uxtb	r3, r3
   2f15a:	001a      	movs	r2, r3
   2f15c:	687b      	ldr	r3, [r7, #4]
   2f15e:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2f160:	69bb      	ldr	r3, [r7, #24]
   2f162:	2214      	movs	r2, #20
   2f164:	18ba      	adds	r2, r7, r2
   2f166:	0011      	movs	r1, r2
   2f168:	0018      	movs	r0, r3
   2f16a:	4b1c      	ldr	r3, [pc, #112]	; (2f1dc <MQTTDeserialize_publish+0xf8>)
   2f16c:	4798      	blx	r3
   2f16e:	0003      	movs	r3, r0
   2f170:	627b      	str	r3, [r7, #36]	; 0x24
   2f172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f174:	69bb      	ldr	r3, [r7, #24]
   2f176:	189b      	adds	r3, r3, r2
   2f178:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2f17a:	69bb      	ldr	r3, [r7, #24]
   2f17c:	697a      	ldr	r2, [r7, #20]
   2f17e:	189b      	adds	r3, r3, r2
   2f180:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2f182:	6a3a      	ldr	r2, [r7, #32]
   2f184:	2318      	movs	r3, #24
   2f186:	18f9      	adds	r1, r7, r3
   2f188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f18a:	0018      	movs	r0, r3
   2f18c:	4b14      	ldr	r3, [pc, #80]	; (2f1e0 <MQTTDeserialize_publish+0xfc>)
   2f18e:	4798      	blx	r3
   2f190:	1e03      	subs	r3, r0, #0
   2f192:	d01c      	beq.n	2f1ce <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   2f194:	6a3b      	ldr	r3, [r7, #32]
   2f196:	69ba      	ldr	r2, [r7, #24]
   2f198:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2f19a:	d418      	bmi.n	2f1ce <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   2f19c:	68bb      	ldr	r3, [r7, #8]
   2f19e:	681b      	ldr	r3, [r3, #0]
   2f1a0:	2b00      	cmp	r3, #0
   2f1a2:	dd08      	ble.n	2f1b6 <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   2f1a4:	2318      	movs	r3, #24
   2f1a6:	18fb      	adds	r3, r7, r3
   2f1a8:	0018      	movs	r0, r3
   2f1aa:	4b0e      	ldr	r3, [pc, #56]	; (2f1e4 <MQTTDeserialize_publish+0x100>)
   2f1ac:	4798      	blx	r3
   2f1ae:	0003      	movs	r3, r0
   2f1b0:	b29a      	uxth	r2, r3
   2f1b2:	683b      	ldr	r3, [r7, #0]
   2f1b4:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   2f1b6:	6a3b      	ldr	r3, [r7, #32]
   2f1b8:	69ba      	ldr	r2, [r7, #24]
   2f1ba:	1a9a      	subs	r2, r3, r2
   2f1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2f1be:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   2f1c0:	69ba      	ldr	r2, [r7, #24]
   2f1c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f1c4:	601a      	str	r2, [r3, #0]
	rc = 1;
   2f1c6:	2301      	movs	r3, #1
   2f1c8:	627b      	str	r3, [r7, #36]	; 0x24
   2f1ca:	e000      	b.n	2f1ce <MQTTDeserialize_publish+0xea>
		goto exit;
   2f1cc:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f1d0:	0018      	movs	r0, r3
   2f1d2:	46bd      	mov	sp, r7
   2f1d4:	b00a      	add	sp, #40	; 0x28
   2f1d6:	bd80      	pop	{r7, pc}
   2f1d8:	0002f48b 	.word	0x0002f48b
   2f1dc:	0002f425 	.word	0x0002f425
   2f1e0:	0002f609 	.word	0x0002f609
   2f1e4:	0002f459 	.word	0x0002f459

0002f1e8 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   2f1e8:	b580      	push	{r7, lr}
   2f1ea:	b08a      	sub	sp, #40	; 0x28
   2f1ec:	af00      	add	r7, sp, #0
   2f1ee:	60f8      	str	r0, [r7, #12]
   2f1f0:	60b9      	str	r1, [r7, #8]
   2f1f2:	607a      	str	r2, [r7, #4]
   2f1f4:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2f1f6:	2300      	movs	r3, #0
   2f1f8:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2f1fa:	683b      	ldr	r3, [r7, #0]
   2f1fc:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2f1fe:	2300      	movs	r3, #0
   2f200:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2f202:	2300      	movs	r3, #0
   2f204:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2f206:	2318      	movs	r3, #24
   2f208:	18fb      	adds	r3, r7, r3
   2f20a:	0018      	movs	r0, r3
   2f20c:	4b20      	ldr	r3, [pc, #128]	; (2f290 <MQTTDeserialize_ack+0xa8>)
   2f20e:	4798      	blx	r3
   2f210:	0003      	movs	r3, r0
   2f212:	001a      	movs	r2, r3
   2f214:	231c      	movs	r3, #28
   2f216:	18fb      	adds	r3, r7, r3
   2f218:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   2f21a:	231c      	movs	r3, #28
   2f21c:	18fb      	adds	r3, r7, r3
   2f21e:	781b      	ldrb	r3, [r3, #0]
   2f220:	071b      	lsls	r3, r3, #28
   2f222:	0fdb      	lsrs	r3, r3, #31
   2f224:	b2db      	uxtb	r3, r3
   2f226:	001a      	movs	r2, r3
   2f228:	68bb      	ldr	r3, [r7, #8]
   2f22a:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   2f22c:	231c      	movs	r3, #28
   2f22e:	18fb      	adds	r3, r7, r3
   2f230:	781b      	ldrb	r3, [r3, #0]
   2f232:	061b      	lsls	r3, r3, #24
   2f234:	0f1b      	lsrs	r3, r3, #28
   2f236:	b2db      	uxtb	r3, r3
   2f238:	001a      	movs	r2, r3
   2f23a:	68fb      	ldr	r3, [r7, #12]
   2f23c:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2f23e:	69bb      	ldr	r3, [r7, #24]
   2f240:	2214      	movs	r2, #20
   2f242:	18ba      	adds	r2, r7, r2
   2f244:	0011      	movs	r1, r2
   2f246:	0018      	movs	r0, r3
   2f248:	4b12      	ldr	r3, [pc, #72]	; (2f294 <MQTTDeserialize_ack+0xac>)
   2f24a:	4798      	blx	r3
   2f24c:	0003      	movs	r3, r0
   2f24e:	627b      	str	r3, [r7, #36]	; 0x24
   2f250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f252:	69bb      	ldr	r3, [r7, #24]
   2f254:	189b      	adds	r3, r3, r2
   2f256:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2f258:	69bb      	ldr	r3, [r7, #24]
   2f25a:	697a      	ldr	r2, [r7, #20]
   2f25c:	189b      	adds	r3, r3, r2
   2f25e:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   2f260:	6a3b      	ldr	r3, [r7, #32]
   2f262:	69ba      	ldr	r2, [r7, #24]
   2f264:	1a9b      	subs	r3, r3, r2
   2f266:	2b01      	cmp	r3, #1
   2f268:	dd0b      	ble.n	2f282 <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   2f26a:	2318      	movs	r3, #24
   2f26c:	18fb      	adds	r3, r7, r3
   2f26e:	0018      	movs	r0, r3
   2f270:	4b09      	ldr	r3, [pc, #36]	; (2f298 <MQTTDeserialize_ack+0xb0>)
   2f272:	4798      	blx	r3
   2f274:	0003      	movs	r3, r0
   2f276:	b29a      	uxth	r2, r3
   2f278:	687b      	ldr	r3, [r7, #4]
   2f27a:	801a      	strh	r2, [r3, #0]

	rc = 1;
   2f27c:	2301      	movs	r3, #1
   2f27e:	627b      	str	r3, [r7, #36]	; 0x24
   2f280:	e000      	b.n	2f284 <MQTTDeserialize_ack+0x9c>
		goto exit;
   2f282:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f286:	0018      	movs	r0, r3
   2f288:	46bd      	mov	sp, r7
   2f28a:	b00a      	add	sp, #40	; 0x28
   2f28c:	bd80      	pop	{r7, pc}
   2f28e:	46c0      	nop			; (mov r8, r8)
   2f290:	0002f48b 	.word	0x0002f48b
   2f294:	0002f425 	.word	0x0002f425
   2f298:	0002f459 	.word	0x0002f459

0002f29c <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   2f29c:	b580      	push	{r7, lr}
   2f29e:	b084      	sub	sp, #16
   2f2a0:	af00      	add	r7, sp, #0
   2f2a2:	6078      	str	r0, [r7, #4]
   2f2a4:	6039      	str	r1, [r7, #0]
	int rc = 0;
   2f2a6:	2300      	movs	r3, #0
   2f2a8:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   2f2aa:	683b      	ldr	r3, [r7, #0]
   2f2ac:	4a17      	ldr	r2, [pc, #92]	; (2f30c <MQTTPacket_encode+0x70>)
   2f2ae:	4013      	ands	r3, r2
   2f2b0:	d504      	bpl.n	2f2bc <MQTTPacket_encode+0x20>
   2f2b2:	3b01      	subs	r3, #1
   2f2b4:	2280      	movs	r2, #128	; 0x80
   2f2b6:	4252      	negs	r2, r2
   2f2b8:	4313      	orrs	r3, r2
   2f2ba:	3301      	adds	r3, #1
   2f2bc:	001a      	movs	r2, r3
   2f2be:	230b      	movs	r3, #11
   2f2c0:	18fb      	adds	r3, r7, r3
   2f2c2:	701a      	strb	r2, [r3, #0]
		length /= 128;
   2f2c4:	683b      	ldr	r3, [r7, #0]
   2f2c6:	2b00      	cmp	r3, #0
   2f2c8:	da00      	bge.n	2f2cc <MQTTPacket_encode+0x30>
   2f2ca:	337f      	adds	r3, #127	; 0x7f
   2f2cc:	11db      	asrs	r3, r3, #7
   2f2ce:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   2f2d0:	683b      	ldr	r3, [r7, #0]
   2f2d2:	2b00      	cmp	r3, #0
   2f2d4:	dd08      	ble.n	2f2e8 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   2f2d6:	230b      	movs	r3, #11
   2f2d8:	18fb      	adds	r3, r7, r3
   2f2da:	220b      	movs	r2, #11
   2f2dc:	18ba      	adds	r2, r7, r2
   2f2de:	7812      	ldrb	r2, [r2, #0]
   2f2e0:	2180      	movs	r1, #128	; 0x80
   2f2e2:	4249      	negs	r1, r1
   2f2e4:	430a      	orrs	r2, r1
   2f2e6:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   2f2e8:	68fb      	ldr	r3, [r7, #12]
   2f2ea:	1c5a      	adds	r2, r3, #1
   2f2ec:	60fa      	str	r2, [r7, #12]
   2f2ee:	001a      	movs	r2, r3
   2f2f0:	687b      	ldr	r3, [r7, #4]
   2f2f2:	189b      	adds	r3, r3, r2
   2f2f4:	220b      	movs	r2, #11
   2f2f6:	18ba      	adds	r2, r7, r2
   2f2f8:	7812      	ldrb	r2, [r2, #0]
   2f2fa:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   2f2fc:	683b      	ldr	r3, [r7, #0]
   2f2fe:	2b00      	cmp	r3, #0
   2f300:	dcd3      	bgt.n	2f2aa <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   2f302:	68fb      	ldr	r3, [r7, #12]
}
   2f304:	0018      	movs	r0, r3
   2f306:	46bd      	mov	sp, r7
   2f308:	b004      	add	sp, #16
   2f30a:	bd80      	pop	{r7, pc}
   2f30c:	8000007f 	.word	0x8000007f

0002f310 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   2f310:	b580      	push	{r7, lr}
   2f312:	b086      	sub	sp, #24
   2f314:	af00      	add	r7, sp, #0
   2f316:	6078      	str	r0, [r7, #4]
   2f318:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   2f31a:	2301      	movs	r3, #1
   2f31c:	617b      	str	r3, [r7, #20]
	int len = 0;
   2f31e:	2300      	movs	r3, #0
   2f320:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   2f322:	683b      	ldr	r3, [r7, #0]
   2f324:	2200      	movs	r2, #0
   2f326:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   2f328:	2301      	movs	r3, #1
   2f32a:	425b      	negs	r3, r3
   2f32c:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2f32e:	693b      	ldr	r3, [r7, #16]
   2f330:	3301      	adds	r3, #1
   2f332:	613b      	str	r3, [r7, #16]
   2f334:	693b      	ldr	r3, [r7, #16]
   2f336:	2b04      	cmp	r3, #4
   2f338:	dd03      	ble.n	2f342 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   2f33a:	2301      	movs	r3, #1
   2f33c:	425b      	negs	r3, r3
   2f33e:	60fb      	str	r3, [r7, #12]
			goto exit;
   2f340:	e022      	b.n	2f388 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   2f342:	230b      	movs	r3, #11
   2f344:	18fa      	adds	r2, r7, r3
   2f346:	687b      	ldr	r3, [r7, #4]
   2f348:	2101      	movs	r1, #1
   2f34a:	0010      	movs	r0, r2
   2f34c:	4798      	blx	r3
   2f34e:	0003      	movs	r3, r0
   2f350:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   2f352:	68fb      	ldr	r3, [r7, #12]
   2f354:	2b01      	cmp	r3, #1
   2f356:	d116      	bne.n	2f386 <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   2f358:	683b      	ldr	r3, [r7, #0]
   2f35a:	681a      	ldr	r2, [r3, #0]
   2f35c:	230b      	movs	r3, #11
   2f35e:	18fb      	adds	r3, r7, r3
   2f360:	781b      	ldrb	r3, [r3, #0]
   2f362:	0019      	movs	r1, r3
   2f364:	237f      	movs	r3, #127	; 0x7f
   2f366:	400b      	ands	r3, r1
   2f368:	6979      	ldr	r1, [r7, #20]
   2f36a:	434b      	muls	r3, r1
   2f36c:	18d2      	adds	r2, r2, r3
   2f36e:	683b      	ldr	r3, [r7, #0]
   2f370:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   2f372:	697b      	ldr	r3, [r7, #20]
   2f374:	01db      	lsls	r3, r3, #7
   2f376:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   2f378:	230b      	movs	r3, #11
   2f37a:	18fb      	adds	r3, r7, r3
   2f37c:	781b      	ldrb	r3, [r3, #0]
   2f37e:	b25b      	sxtb	r3, r3
   2f380:	2b00      	cmp	r3, #0
   2f382:	dbd1      	blt.n	2f328 <MQTTPacket_decode+0x18>
   2f384:	e000      	b.n	2f388 <MQTTPacket_decode+0x78>
			goto exit;
   2f386:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   2f388:	693b      	ldr	r3, [r7, #16]
}
   2f38a:	0018      	movs	r0, r3
   2f38c:	46bd      	mov	sp, r7
   2f38e:	b006      	add	sp, #24
   2f390:	bd80      	pop	{r7, pc}
	...

0002f394 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   2f394:	b580      	push	{r7, lr}
   2f396:	b082      	sub	sp, #8
   2f398:	af00      	add	r7, sp, #0
   2f39a:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   2f39c:	687b      	ldr	r3, [r7, #4]
   2f39e:	3301      	adds	r3, #1
   2f3a0:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   2f3a2:	687b      	ldr	r3, [r7, #4]
   2f3a4:	2b7f      	cmp	r3, #127	; 0x7f
   2f3a6:	dc03      	bgt.n	2f3b0 <MQTTPacket_len+0x1c>
		rem_len += 1;
   2f3a8:	687b      	ldr	r3, [r7, #4]
   2f3aa:	3301      	adds	r3, #1
   2f3ac:	607b      	str	r3, [r7, #4]
   2f3ae:	e012      	b.n	2f3d6 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   2f3b0:	687b      	ldr	r3, [r7, #4]
   2f3b2:	4a0b      	ldr	r2, [pc, #44]	; (2f3e0 <MQTTPacket_len+0x4c>)
   2f3b4:	4293      	cmp	r3, r2
   2f3b6:	dc03      	bgt.n	2f3c0 <MQTTPacket_len+0x2c>
		rem_len += 2;
   2f3b8:	687b      	ldr	r3, [r7, #4]
   2f3ba:	3302      	adds	r3, #2
   2f3bc:	607b      	str	r3, [r7, #4]
   2f3be:	e00a      	b.n	2f3d6 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   2f3c0:	687b      	ldr	r3, [r7, #4]
   2f3c2:	4a08      	ldr	r2, [pc, #32]	; (2f3e4 <MQTTPacket_len+0x50>)
   2f3c4:	4293      	cmp	r3, r2
   2f3c6:	dc03      	bgt.n	2f3d0 <MQTTPacket_len+0x3c>
		rem_len += 3;
   2f3c8:	687b      	ldr	r3, [r7, #4]
   2f3ca:	3303      	adds	r3, #3
   2f3cc:	607b      	str	r3, [r7, #4]
   2f3ce:	e002      	b.n	2f3d6 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   2f3d0:	687b      	ldr	r3, [r7, #4]
   2f3d2:	3304      	adds	r3, #4
   2f3d4:	607b      	str	r3, [r7, #4]
	return rem_len;
   2f3d6:	687b      	ldr	r3, [r7, #4]
}
   2f3d8:	0018      	movs	r0, r3
   2f3da:	46bd      	mov	sp, r7
   2f3dc:	b002      	add	sp, #8
   2f3de:	bd80      	pop	{r7, pc}
   2f3e0:	00003fff 	.word	0x00003fff
   2f3e4:	001ffffe 	.word	0x001ffffe

0002f3e8 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   2f3e8:	b580      	push	{r7, lr}
   2f3ea:	b084      	sub	sp, #16
   2f3ec:	af00      	add	r7, sp, #0
   2f3ee:	6078      	str	r0, [r7, #4]
   2f3f0:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   2f3f2:	2300      	movs	r3, #0
   2f3f4:	60fb      	str	r3, [r7, #12]
   2f3f6:	e00a      	b.n	2f40e <bufchar+0x26>
		*c = *bufptr++;
   2f3f8:	4b09      	ldr	r3, [pc, #36]	; (2f420 <bufchar+0x38>)
   2f3fa:	681b      	ldr	r3, [r3, #0]
   2f3fc:	1c59      	adds	r1, r3, #1
   2f3fe:	4a08      	ldr	r2, [pc, #32]	; (2f420 <bufchar+0x38>)
   2f400:	6011      	str	r1, [r2, #0]
   2f402:	781a      	ldrb	r2, [r3, #0]
   2f404:	687b      	ldr	r3, [r7, #4]
   2f406:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   2f408:	68fb      	ldr	r3, [r7, #12]
   2f40a:	3301      	adds	r3, #1
   2f40c:	60fb      	str	r3, [r7, #12]
   2f40e:	68fa      	ldr	r2, [r7, #12]
   2f410:	683b      	ldr	r3, [r7, #0]
   2f412:	429a      	cmp	r2, r3
   2f414:	dbf0      	blt.n	2f3f8 <bufchar+0x10>
	return count;
   2f416:	683b      	ldr	r3, [r7, #0]
}
   2f418:	0018      	movs	r0, r3
   2f41a:	46bd      	mov	sp, r7
   2f41c:	b004      	add	sp, #16
   2f41e:	bd80      	pop	{r7, pc}
   2f420:	200046bc 	.word	0x200046bc

0002f424 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   2f424:	b580      	push	{r7, lr}
   2f426:	b082      	sub	sp, #8
   2f428:	af00      	add	r7, sp, #0
   2f42a:	6078      	str	r0, [r7, #4]
   2f42c:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   2f42e:	4b07      	ldr	r3, [pc, #28]	; (2f44c <MQTTPacket_decodeBuf+0x28>)
   2f430:	687a      	ldr	r2, [r7, #4]
   2f432:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   2f434:	683a      	ldr	r2, [r7, #0]
   2f436:	4b06      	ldr	r3, [pc, #24]	; (2f450 <MQTTPacket_decodeBuf+0x2c>)
   2f438:	0011      	movs	r1, r2
   2f43a:	0018      	movs	r0, r3
   2f43c:	4b05      	ldr	r3, [pc, #20]	; (2f454 <MQTTPacket_decodeBuf+0x30>)
   2f43e:	4798      	blx	r3
   2f440:	0003      	movs	r3, r0
}
   2f442:	0018      	movs	r0, r3
   2f444:	46bd      	mov	sp, r7
   2f446:	b002      	add	sp, #8
   2f448:	bd80      	pop	{r7, pc}
   2f44a:	46c0      	nop			; (mov r8, r8)
   2f44c:	200046bc 	.word	0x200046bc
   2f450:	0002f3e9 	.word	0x0002f3e9
   2f454:	0002f311 	.word	0x0002f311

0002f458 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   2f458:	b580      	push	{r7, lr}
   2f45a:	b084      	sub	sp, #16
   2f45c:	af00      	add	r7, sp, #0
   2f45e:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   2f460:	687b      	ldr	r3, [r7, #4]
   2f462:	681b      	ldr	r3, [r3, #0]
   2f464:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   2f466:	68fb      	ldr	r3, [r7, #12]
   2f468:	781b      	ldrb	r3, [r3, #0]
   2f46a:	021b      	lsls	r3, r3, #8
   2f46c:	68fa      	ldr	r2, [r7, #12]
   2f46e:	3201      	adds	r2, #1
   2f470:	7812      	ldrb	r2, [r2, #0]
   2f472:	189b      	adds	r3, r3, r2
   2f474:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   2f476:	687b      	ldr	r3, [r7, #4]
   2f478:	681b      	ldr	r3, [r3, #0]
   2f47a:	1c9a      	adds	r2, r3, #2
   2f47c:	687b      	ldr	r3, [r7, #4]
   2f47e:	601a      	str	r2, [r3, #0]
	return len;
   2f480:	68bb      	ldr	r3, [r7, #8]
}
   2f482:	0018      	movs	r0, r3
   2f484:	46bd      	mov	sp, r7
   2f486:	b004      	add	sp, #16
   2f488:	bd80      	pop	{r7, pc}

0002f48a <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   2f48a:	b580      	push	{r7, lr}
   2f48c:	b084      	sub	sp, #16
   2f48e:	af00      	add	r7, sp, #0
   2f490:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   2f492:	687b      	ldr	r3, [r7, #4]
   2f494:	681a      	ldr	r2, [r3, #0]
   2f496:	230f      	movs	r3, #15
   2f498:	18fb      	adds	r3, r7, r3
   2f49a:	7812      	ldrb	r2, [r2, #0]
   2f49c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   2f49e:	687b      	ldr	r3, [r7, #4]
   2f4a0:	681b      	ldr	r3, [r3, #0]
   2f4a2:	1c5a      	adds	r2, r3, #1
   2f4a4:	687b      	ldr	r3, [r7, #4]
   2f4a6:	601a      	str	r2, [r3, #0]
	return c;
   2f4a8:	230f      	movs	r3, #15
   2f4aa:	18fb      	adds	r3, r7, r3
   2f4ac:	781b      	ldrb	r3, [r3, #0]
}
   2f4ae:	0018      	movs	r0, r3
   2f4b0:	46bd      	mov	sp, r7
   2f4b2:	b004      	add	sp, #16
   2f4b4:	bd80      	pop	{r7, pc}

0002f4b6 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   2f4b6:	b580      	push	{r7, lr}
   2f4b8:	b082      	sub	sp, #8
   2f4ba:	af00      	add	r7, sp, #0
   2f4bc:	6078      	str	r0, [r7, #4]
   2f4be:	000a      	movs	r2, r1
   2f4c0:	1cfb      	adds	r3, r7, #3
   2f4c2:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   2f4c4:	687b      	ldr	r3, [r7, #4]
   2f4c6:	681b      	ldr	r3, [r3, #0]
   2f4c8:	1cfa      	adds	r2, r7, #3
   2f4ca:	7812      	ldrb	r2, [r2, #0]
   2f4cc:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   2f4ce:	687b      	ldr	r3, [r7, #4]
   2f4d0:	681b      	ldr	r3, [r3, #0]
   2f4d2:	1c5a      	adds	r2, r3, #1
   2f4d4:	687b      	ldr	r3, [r7, #4]
   2f4d6:	601a      	str	r2, [r3, #0]
}
   2f4d8:	46c0      	nop			; (mov r8, r8)
   2f4da:	46bd      	mov	sp, r7
   2f4dc:	b002      	add	sp, #8
   2f4de:	bd80      	pop	{r7, pc}

0002f4e0 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   2f4e0:	b580      	push	{r7, lr}
   2f4e2:	b082      	sub	sp, #8
   2f4e4:	af00      	add	r7, sp, #0
   2f4e6:	6078      	str	r0, [r7, #4]
   2f4e8:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   2f4ea:	687b      	ldr	r3, [r7, #4]
   2f4ec:	681a      	ldr	r2, [r3, #0]
   2f4ee:	683b      	ldr	r3, [r7, #0]
   2f4f0:	2b00      	cmp	r3, #0
   2f4f2:	da00      	bge.n	2f4f6 <writeInt+0x16>
   2f4f4:	33ff      	adds	r3, #255	; 0xff
   2f4f6:	121b      	asrs	r3, r3, #8
   2f4f8:	b2db      	uxtb	r3, r3
   2f4fa:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   2f4fc:	687b      	ldr	r3, [r7, #4]
   2f4fe:	681b      	ldr	r3, [r3, #0]
   2f500:	1c5a      	adds	r2, r3, #1
   2f502:	687b      	ldr	r3, [r7, #4]
   2f504:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   2f506:	687b      	ldr	r3, [r7, #4]
   2f508:	681a      	ldr	r2, [r3, #0]
   2f50a:	683b      	ldr	r3, [r7, #0]
   2f50c:	4908      	ldr	r1, [pc, #32]	; (2f530 <writeInt+0x50>)
   2f50e:	400b      	ands	r3, r1
   2f510:	d503      	bpl.n	2f51a <writeInt+0x3a>
   2f512:	3b01      	subs	r3, #1
   2f514:	4907      	ldr	r1, [pc, #28]	; (2f534 <writeInt+0x54>)
   2f516:	430b      	orrs	r3, r1
   2f518:	3301      	adds	r3, #1
   2f51a:	b2db      	uxtb	r3, r3
   2f51c:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   2f51e:	687b      	ldr	r3, [r7, #4]
   2f520:	681b      	ldr	r3, [r3, #0]
   2f522:	1c5a      	adds	r2, r3, #1
   2f524:	687b      	ldr	r3, [r7, #4]
   2f526:	601a      	str	r2, [r3, #0]
}
   2f528:	46c0      	nop			; (mov r8, r8)
   2f52a:	46bd      	mov	sp, r7
   2f52c:	b002      	add	sp, #8
   2f52e:	bd80      	pop	{r7, pc}
   2f530:	800000ff 	.word	0x800000ff
   2f534:	ffffff00 	.word	0xffffff00

0002f538 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   2f538:	b580      	push	{r7, lr}
   2f53a:	b084      	sub	sp, #16
   2f53c:	af00      	add	r7, sp, #0
   2f53e:	6078      	str	r0, [r7, #4]
   2f540:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   2f542:	683b      	ldr	r3, [r7, #0]
   2f544:	0018      	movs	r0, r3
   2f546:	4b0d      	ldr	r3, [pc, #52]	; (2f57c <writeCString+0x44>)
   2f548:	4798      	blx	r3
   2f54a:	0003      	movs	r3, r0
   2f54c:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   2f54e:	68fa      	ldr	r2, [r7, #12]
   2f550:	687b      	ldr	r3, [r7, #4]
   2f552:	0011      	movs	r1, r2
   2f554:	0018      	movs	r0, r3
   2f556:	4b0a      	ldr	r3, [pc, #40]	; (2f580 <writeCString+0x48>)
   2f558:	4798      	blx	r3
	memcpy(*pptr, string, len);
   2f55a:	687b      	ldr	r3, [r7, #4]
   2f55c:	681b      	ldr	r3, [r3, #0]
   2f55e:	68fa      	ldr	r2, [r7, #12]
   2f560:	6839      	ldr	r1, [r7, #0]
   2f562:	0018      	movs	r0, r3
   2f564:	4b07      	ldr	r3, [pc, #28]	; (2f584 <writeCString+0x4c>)
   2f566:	4798      	blx	r3
	*pptr += len;
   2f568:	687b      	ldr	r3, [r7, #4]
   2f56a:	681a      	ldr	r2, [r3, #0]
   2f56c:	68fb      	ldr	r3, [r7, #12]
   2f56e:	18d2      	adds	r2, r2, r3
   2f570:	687b      	ldr	r3, [r7, #4]
   2f572:	601a      	str	r2, [r3, #0]
}
   2f574:	46c0      	nop			; (mov r8, r8)
   2f576:	46bd      	mov	sp, r7
   2f578:	b004      	add	sp, #16
   2f57a:	bd80      	pop	{r7, pc}
   2f57c:	0003491b 	.word	0x0003491b
   2f580:	0002f4e1 	.word	0x0002f4e1
   2f584:	00034549 	.word	0x00034549

0002f588 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   2f588:	b580      	push	{r7, lr}
   2f58a:	b084      	sub	sp, #16
   2f58c:	af00      	add	r7, sp, #0
   2f58e:	60f8      	str	r0, [r7, #12]
   2f590:	0038      	movs	r0, r7
   2f592:	6001      	str	r1, [r0, #0]
   2f594:	6042      	str	r2, [r0, #4]
   2f596:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   2f598:	003b      	movs	r3, r7
   2f59a:	685b      	ldr	r3, [r3, #4]
   2f59c:	2b00      	cmp	r3, #0
   2f59e:	dd17      	ble.n	2f5d0 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   2f5a0:	003b      	movs	r3, r7
   2f5a2:	685a      	ldr	r2, [r3, #4]
   2f5a4:	68fb      	ldr	r3, [r7, #12]
   2f5a6:	0011      	movs	r1, r2
   2f5a8:	0018      	movs	r0, r3
   2f5aa:	4b14      	ldr	r3, [pc, #80]	; (2f5fc <writeMQTTString+0x74>)
   2f5ac:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   2f5ae:	68fb      	ldr	r3, [r7, #12]
   2f5b0:	6818      	ldr	r0, [r3, #0]
   2f5b2:	003b      	movs	r3, r7
   2f5b4:	6899      	ldr	r1, [r3, #8]
   2f5b6:	003b      	movs	r3, r7
   2f5b8:	685b      	ldr	r3, [r3, #4]
   2f5ba:	001a      	movs	r2, r3
   2f5bc:	4b10      	ldr	r3, [pc, #64]	; (2f600 <writeMQTTString+0x78>)
   2f5be:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   2f5c0:	68fb      	ldr	r3, [r7, #12]
   2f5c2:	681a      	ldr	r2, [r3, #0]
   2f5c4:	003b      	movs	r3, r7
   2f5c6:	685b      	ldr	r3, [r3, #4]
   2f5c8:	18d2      	adds	r2, r2, r3
   2f5ca:	68fb      	ldr	r3, [r7, #12]
   2f5cc:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   2f5ce:	e010      	b.n	2f5f2 <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   2f5d0:	003b      	movs	r3, r7
   2f5d2:	681b      	ldr	r3, [r3, #0]
   2f5d4:	2b00      	cmp	r3, #0
   2f5d6:	d007      	beq.n	2f5e8 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   2f5d8:	003b      	movs	r3, r7
   2f5da:	681a      	ldr	r2, [r3, #0]
   2f5dc:	68fb      	ldr	r3, [r7, #12]
   2f5de:	0011      	movs	r1, r2
   2f5e0:	0018      	movs	r0, r3
   2f5e2:	4b08      	ldr	r3, [pc, #32]	; (2f604 <writeMQTTString+0x7c>)
   2f5e4:	4798      	blx	r3
}
   2f5e6:	e004      	b.n	2f5f2 <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   2f5e8:	68fb      	ldr	r3, [r7, #12]
   2f5ea:	2100      	movs	r1, #0
   2f5ec:	0018      	movs	r0, r3
   2f5ee:	4b03      	ldr	r3, [pc, #12]	; (2f5fc <writeMQTTString+0x74>)
   2f5f0:	4798      	blx	r3
}
   2f5f2:	46c0      	nop			; (mov r8, r8)
   2f5f4:	46bd      	mov	sp, r7
   2f5f6:	b004      	add	sp, #16
   2f5f8:	bd80      	pop	{r7, pc}
   2f5fa:	46c0      	nop			; (mov r8, r8)
   2f5fc:	0002f4e1 	.word	0x0002f4e1
   2f600:	00034549 	.word	0x00034549
   2f604:	0002f539 	.word	0x0002f539

0002f608 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   2f608:	b580      	push	{r7, lr}
   2f60a:	b086      	sub	sp, #24
   2f60c:	af00      	add	r7, sp, #0
   2f60e:	60f8      	str	r0, [r7, #12]
   2f610:	60b9      	str	r1, [r7, #8]
   2f612:	607a      	str	r2, [r7, #4]
	int rc = 0;
   2f614:	2300      	movs	r3, #0
   2f616:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   2f618:	687a      	ldr	r2, [r7, #4]
   2f61a:	68bb      	ldr	r3, [r7, #8]
   2f61c:	681b      	ldr	r3, [r3, #0]
   2f61e:	1ad3      	subs	r3, r2, r3
   2f620:	2b01      	cmp	r3, #1
   2f622:	dd1b      	ble.n	2f65c <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   2f624:	68bb      	ldr	r3, [r7, #8]
   2f626:	0018      	movs	r0, r3
   2f628:	4b10      	ldr	r3, [pc, #64]	; (2f66c <readMQTTLenString+0x64>)
   2f62a:	4798      	blx	r3
   2f62c:	0002      	movs	r2, r0
   2f62e:	68fb      	ldr	r3, [r7, #12]
   2f630:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   2f632:	68bb      	ldr	r3, [r7, #8]
   2f634:	681a      	ldr	r2, [r3, #0]
   2f636:	68fb      	ldr	r3, [r7, #12]
   2f638:	685b      	ldr	r3, [r3, #4]
   2f63a:	18d2      	adds	r2, r2, r3
   2f63c:	687b      	ldr	r3, [r7, #4]
   2f63e:	429a      	cmp	r2, r3
   2f640:	d80c      	bhi.n	2f65c <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   2f642:	68bb      	ldr	r3, [r7, #8]
   2f644:	681a      	ldr	r2, [r3, #0]
   2f646:	68fb      	ldr	r3, [r7, #12]
   2f648:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   2f64a:	68bb      	ldr	r3, [r7, #8]
   2f64c:	681a      	ldr	r2, [r3, #0]
   2f64e:	68fb      	ldr	r3, [r7, #12]
   2f650:	685b      	ldr	r3, [r3, #4]
   2f652:	18d2      	adds	r2, r2, r3
   2f654:	68bb      	ldr	r3, [r7, #8]
   2f656:	601a      	str	r2, [r3, #0]
			rc = 1;
   2f658:	2301      	movs	r3, #1
   2f65a:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   2f65c:	68fb      	ldr	r3, [r7, #12]
   2f65e:	2200      	movs	r2, #0
   2f660:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   2f662:	697b      	ldr	r3, [r7, #20]
}
   2f664:	0018      	movs	r0, r3
   2f666:	46bd      	mov	sp, r7
   2f668:	b006      	add	sp, #24
   2f66a:	bd80      	pop	{r7, pc}
   2f66c:	0002f459 	.word	0x0002f459

0002f670 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   2f670:	b580      	push	{r7, lr}
   2f672:	b086      	sub	sp, #24
   2f674:	af00      	add	r7, sp, #0
   2f676:	1d3b      	adds	r3, r7, #4
   2f678:	6018      	str	r0, [r3, #0]
   2f67a:	6059      	str	r1, [r3, #4]
   2f67c:	609a      	str	r2, [r3, #8]
	int rc = 0;
   2f67e:	2300      	movs	r3, #0
   2f680:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   2f682:	1d3b      	adds	r3, r7, #4
   2f684:	681b      	ldr	r3, [r3, #0]
   2f686:	2b00      	cmp	r3, #0
   2f688:	d007      	beq.n	2f69a <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   2f68a:	1d3b      	adds	r3, r7, #4
   2f68c:	681b      	ldr	r3, [r3, #0]
   2f68e:	0018      	movs	r0, r3
   2f690:	4b06      	ldr	r3, [pc, #24]	; (2f6ac <MQTTstrlen+0x3c>)
   2f692:	4798      	blx	r3
   2f694:	0003      	movs	r3, r0
   2f696:	617b      	str	r3, [r7, #20]
   2f698:	e002      	b.n	2f6a0 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   2f69a:	1d3b      	adds	r3, r7, #4
   2f69c:	685b      	ldr	r3, [r3, #4]
   2f69e:	617b      	str	r3, [r7, #20]
	return rc;
   2f6a0:	697b      	ldr	r3, [r7, #20]
}
   2f6a2:	0018      	movs	r0, r3
   2f6a4:	46bd      	mov	sp, r7
   2f6a6:	b006      	add	sp, #24
   2f6a8:	bd80      	pop	{r7, pc}
   2f6aa:	46c0      	nop			; (mov r8, r8)
   2f6ac:	0003491b 	.word	0x0003491b

0002f6b0 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   2f6b0:	b580      	push	{r7, lr}
   2f6b2:	b086      	sub	sp, #24
   2f6b4:	af00      	add	r7, sp, #0
   2f6b6:	6078      	str	r0, [r7, #4]
   2f6b8:	6039      	str	r1, [r7, #0]
	int alen = 0,
   2f6ba:	2300      	movs	r3, #0
   2f6bc:	617b      	str	r3, [r7, #20]
		blen = 0;
   2f6be:	2300      	movs	r3, #0
   2f6c0:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   2f6c2:	687b      	ldr	r3, [r7, #4]
   2f6c4:	681b      	ldr	r3, [r3, #0]
   2f6c6:	2b00      	cmp	r3, #0
   2f6c8:	d00a      	beq.n	2f6e0 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   2f6ca:	687b      	ldr	r3, [r7, #4]
   2f6cc:	681b      	ldr	r3, [r3, #0]
   2f6ce:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   2f6d0:	687b      	ldr	r3, [r7, #4]
   2f6d2:	681b      	ldr	r3, [r3, #0]
   2f6d4:	0018      	movs	r0, r3
   2f6d6:	4b12      	ldr	r3, [pc, #72]	; (2f720 <MQTTPacket_equals+0x70>)
   2f6d8:	4798      	blx	r3
   2f6da:	0003      	movs	r3, r0
   2f6dc:	617b      	str	r3, [r7, #20]
   2f6de:	e005      	b.n	2f6ec <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   2f6e0:	687b      	ldr	r3, [r7, #4]
   2f6e2:	689b      	ldr	r3, [r3, #8]
   2f6e4:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   2f6e6:	687b      	ldr	r3, [r7, #4]
   2f6e8:	685b      	ldr	r3, [r3, #4]
   2f6ea:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   2f6ec:	683b      	ldr	r3, [r7, #0]
   2f6ee:	0018      	movs	r0, r3
   2f6f0:	4b0b      	ldr	r3, [pc, #44]	; (2f720 <MQTTPacket_equals+0x70>)
   2f6f2:	4798      	blx	r3
   2f6f4:	0003      	movs	r3, r0
   2f6f6:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   2f6f8:	697a      	ldr	r2, [r7, #20]
   2f6fa:	68fb      	ldr	r3, [r7, #12]
   2f6fc:	429a      	cmp	r2, r3
   2f6fe:	d109      	bne.n	2f714 <MQTTPacket_equals+0x64>
   2f700:	697a      	ldr	r2, [r7, #20]
   2f702:	6839      	ldr	r1, [r7, #0]
   2f704:	693b      	ldr	r3, [r7, #16]
   2f706:	0018      	movs	r0, r3
   2f708:	4b06      	ldr	r3, [pc, #24]	; (2f724 <MQTTPacket_equals+0x74>)
   2f70a:	4798      	blx	r3
   2f70c:	1e03      	subs	r3, r0, #0
   2f70e:	d101      	bne.n	2f714 <MQTTPacket_equals+0x64>
   2f710:	2301      	movs	r3, #1
   2f712:	e000      	b.n	2f716 <MQTTPacket_equals+0x66>
   2f714:	2300      	movs	r3, #0
}
   2f716:	0018      	movs	r0, r3
   2f718:	46bd      	mov	sp, r7
   2f71a:	b006      	add	sp, #24
   2f71c:	bd80      	pop	{r7, pc}
   2f71e:	46c0      	nop			; (mov r8, r8)
   2f720:	0003491b 	.word	0x0003491b
   2f724:	00034929 	.word	0x00034929

0002f728 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   2f728:	b580      	push	{r7, lr}
   2f72a:	b086      	sub	sp, #24
   2f72c:	af00      	add	r7, sp, #0
   2f72e:	60f8      	str	r0, [r7, #12]
   2f730:	0038      	movs	r0, r7
   2f732:	6001      	str	r1, [r0, #0]
   2f734:	6042      	str	r2, [r0, #4]
   2f736:	6083      	str	r3, [r0, #8]
	int len = 0;
   2f738:	2300      	movs	r3, #0
   2f73a:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   2f73c:	003b      	movs	r3, r7
   2f73e:	6818      	ldr	r0, [r3, #0]
   2f740:	6859      	ldr	r1, [r3, #4]
   2f742:	689a      	ldr	r2, [r3, #8]
   2f744:	4b09      	ldr	r3, [pc, #36]	; (2f76c <MQTTSerialize_publishLength+0x44>)
   2f746:	4798      	blx	r3
   2f748:	0003      	movs	r3, r0
   2f74a:	1c9a      	adds	r2, r3, #2
   2f74c:	6a3b      	ldr	r3, [r7, #32]
   2f74e:	18d3      	adds	r3, r2, r3
   2f750:	697a      	ldr	r2, [r7, #20]
   2f752:	18d3      	adds	r3, r2, r3
   2f754:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   2f756:	68fb      	ldr	r3, [r7, #12]
   2f758:	2b00      	cmp	r3, #0
   2f75a:	dd02      	ble.n	2f762 <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   2f75c:	697b      	ldr	r3, [r7, #20]
   2f75e:	3302      	adds	r3, #2
   2f760:	617b      	str	r3, [r7, #20]
	return len;
   2f762:	697b      	ldr	r3, [r7, #20]
}
   2f764:	0018      	movs	r0, r3
   2f766:	46bd      	mov	sp, r7
   2f768:	b006      	add	sp, #24
   2f76a:	bd80      	pop	{r7, pc}
   2f76c:	0002f671 	.word	0x0002f671

0002f770 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   2f770:	b590      	push	{r4, r7, lr}
   2f772:	b08b      	sub	sp, #44	; 0x2c
   2f774:	af02      	add	r7, sp, #8
   2f776:	60f8      	str	r0, [r7, #12]
   2f778:	60b9      	str	r1, [r7, #8]
   2f77a:	603b      	str	r3, [r7, #0]
   2f77c:	1dfb      	adds	r3, r7, #7
   2f77e:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   2f780:	68fb      	ldr	r3, [r7, #12]
   2f782:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   2f784:	2300      	movs	r3, #0
   2f786:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   2f788:	2300      	movs	r3, #0
   2f78a:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   2f78c:	2300      	movs	r3, #0
   2f78e:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   2f790:	2308      	movs	r3, #8
   2f792:	2230      	movs	r2, #48	; 0x30
   2f794:	4694      	mov	ip, r2
   2f796:	44bc      	add	ip, r7
   2f798:	4463      	add	r3, ip
   2f79a:	6838      	ldr	r0, [r7, #0]
   2f79c:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2f79e:	9200      	str	r2, [sp, #0]
   2f7a0:	6819      	ldr	r1, [r3, #0]
   2f7a2:	685a      	ldr	r2, [r3, #4]
   2f7a4:	689b      	ldr	r3, [r3, #8]
   2f7a6:	4c46      	ldr	r4, [pc, #280]	; (2f8c0 <MQTTSerialize_publish+0x150>)
   2f7a8:	47a0      	blx	r4
   2f7aa:	0003      	movs	r3, r0
   2f7ac:	61bb      	str	r3, [r7, #24]
   2f7ae:	69bb      	ldr	r3, [r7, #24]
   2f7b0:	0018      	movs	r0, r3
   2f7b2:	4b44      	ldr	r3, [pc, #272]	; (2f8c4 <MQTTSerialize_publish+0x154>)
   2f7b4:	4798      	blx	r3
   2f7b6:	0002      	movs	r2, r0
   2f7b8:	68bb      	ldr	r3, [r7, #8]
   2f7ba:	429a      	cmp	r2, r3
   2f7bc:	dd03      	ble.n	2f7c6 <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2f7be:	2302      	movs	r3, #2
   2f7c0:	425b      	negs	r3, r3
   2f7c2:	61fb      	str	r3, [r7, #28]
		goto exit;
   2f7c4:	e077      	b.n	2f8b6 <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   2f7c6:	2310      	movs	r3, #16
   2f7c8:	18fb      	adds	r3, r7, r3
   2f7ca:	781a      	ldrb	r2, [r3, #0]
   2f7cc:	210f      	movs	r1, #15
   2f7ce:	400a      	ands	r2, r1
   2f7d0:	1c11      	adds	r1, r2, #0
   2f7d2:	2230      	movs	r2, #48	; 0x30
   2f7d4:	430a      	orrs	r2, r1
   2f7d6:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   2f7d8:	1dfb      	adds	r3, r7, #7
   2f7da:	781b      	ldrb	r3, [r3, #0]
   2f7dc:	2201      	movs	r2, #1
   2f7de:	4013      	ands	r3, r2
   2f7e0:	b2da      	uxtb	r2, r3
   2f7e2:	2310      	movs	r3, #16
   2f7e4:	18fb      	adds	r3, r7, r3
   2f7e6:	2101      	movs	r1, #1
   2f7e8:	400a      	ands	r2, r1
   2f7ea:	00d0      	lsls	r0, r2, #3
   2f7ec:	781a      	ldrb	r2, [r3, #0]
   2f7ee:	2108      	movs	r1, #8
   2f7f0:	438a      	bics	r2, r1
   2f7f2:	1c11      	adds	r1, r2, #0
   2f7f4:	1c02      	adds	r2, r0, #0
   2f7f6:	430a      	orrs	r2, r1
   2f7f8:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   2f7fa:	683b      	ldr	r3, [r7, #0]
   2f7fc:	b2db      	uxtb	r3, r3
   2f7fe:	1c1a      	adds	r2, r3, #0
   2f800:	2303      	movs	r3, #3
   2f802:	4013      	ands	r3, r2
   2f804:	b2da      	uxtb	r2, r3
   2f806:	2310      	movs	r3, #16
   2f808:	18fb      	adds	r3, r7, r3
   2f80a:	2103      	movs	r1, #3
   2f80c:	400a      	ands	r2, r1
   2f80e:	1890      	adds	r0, r2, r2
   2f810:	781a      	ldrb	r2, [r3, #0]
   2f812:	2106      	movs	r1, #6
   2f814:	438a      	bics	r2, r1
   2f816:	1c11      	adds	r1, r2, #0
   2f818:	1c02      	adds	r2, r0, #0
   2f81a:	430a      	orrs	r2, r1
   2f81c:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   2f81e:	2330      	movs	r3, #48	; 0x30
   2f820:	18fb      	adds	r3, r7, r3
   2f822:	781b      	ldrb	r3, [r3, #0]
   2f824:	2201      	movs	r2, #1
   2f826:	4013      	ands	r3, r2
   2f828:	b2da      	uxtb	r2, r3
   2f82a:	2310      	movs	r3, #16
   2f82c:	18fb      	adds	r3, r7, r3
   2f82e:	2101      	movs	r1, #1
   2f830:	400a      	ands	r2, r1
   2f832:	0010      	movs	r0, r2
   2f834:	781a      	ldrb	r2, [r3, #0]
   2f836:	2101      	movs	r1, #1
   2f838:	438a      	bics	r2, r1
   2f83a:	1c11      	adds	r1, r2, #0
   2f83c:	1c02      	adds	r2, r0, #0
   2f83e:	430a      	orrs	r2, r1
   2f840:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2f842:	2310      	movs	r3, #16
   2f844:	18fb      	adds	r3, r7, r3
   2f846:	781a      	ldrb	r2, [r3, #0]
   2f848:	2314      	movs	r3, #20
   2f84a:	18fb      	adds	r3, r7, r3
   2f84c:	0011      	movs	r1, r2
   2f84e:	0018      	movs	r0, r3
   2f850:	4b1d      	ldr	r3, [pc, #116]	; (2f8c8 <MQTTSerialize_publish+0x158>)
   2f852:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   2f854:	697b      	ldr	r3, [r7, #20]
   2f856:	69ba      	ldr	r2, [r7, #24]
   2f858:	0011      	movs	r1, r2
   2f85a:	0018      	movs	r0, r3
   2f85c:	4b1b      	ldr	r3, [pc, #108]	; (2f8cc <MQTTSerialize_publish+0x15c>)
   2f85e:	4798      	blx	r3
   2f860:	0002      	movs	r2, r0
   2f862:	697b      	ldr	r3, [r7, #20]
   2f864:	189b      	adds	r3, r3, r2
   2f866:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   2f868:	2308      	movs	r3, #8
   2f86a:	2230      	movs	r2, #48	; 0x30
   2f86c:	4694      	mov	ip, r2
   2f86e:	44bc      	add	ip, r7
   2f870:	4463      	add	r3, ip
   2f872:	2214      	movs	r2, #20
   2f874:	18b8      	adds	r0, r7, r2
   2f876:	6819      	ldr	r1, [r3, #0]
   2f878:	685a      	ldr	r2, [r3, #4]
   2f87a:	689b      	ldr	r3, [r3, #8]
   2f87c:	4c14      	ldr	r4, [pc, #80]	; (2f8d0 <MQTTSerialize_publish+0x160>)
   2f87e:	47a0      	blx	r4

	if (qos > 0)
   2f880:	683b      	ldr	r3, [r7, #0]
   2f882:	2b00      	cmp	r3, #0
   2f884:	dd08      	ble.n	2f898 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   2f886:	2334      	movs	r3, #52	; 0x34
   2f888:	18fb      	adds	r3, r7, r3
   2f88a:	881a      	ldrh	r2, [r3, #0]
   2f88c:	2314      	movs	r3, #20
   2f88e:	18fb      	adds	r3, r7, r3
   2f890:	0011      	movs	r1, r2
   2f892:	0018      	movs	r0, r3
   2f894:	4b0f      	ldr	r3, [pc, #60]	; (2f8d4 <MQTTSerialize_publish+0x164>)
   2f896:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   2f898:	697b      	ldr	r3, [r7, #20]
   2f89a:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2f89c:	6c79      	ldr	r1, [r7, #68]	; 0x44
   2f89e:	0018      	movs	r0, r3
   2f8a0:	4b0d      	ldr	r3, [pc, #52]	; (2f8d8 <MQTTSerialize_publish+0x168>)
   2f8a2:	4798      	blx	r3
	ptr += payloadlen;
   2f8a4:	697a      	ldr	r2, [r7, #20]
   2f8a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2f8a8:	18d3      	adds	r3, r2, r3
   2f8aa:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   2f8ac:	697b      	ldr	r3, [r7, #20]
   2f8ae:	001a      	movs	r2, r3
   2f8b0:	68fb      	ldr	r3, [r7, #12]
   2f8b2:	1ad3      	subs	r3, r2, r3
   2f8b4:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f8b6:	69fb      	ldr	r3, [r7, #28]
}
   2f8b8:	0018      	movs	r0, r3
   2f8ba:	46bd      	mov	sp, r7
   2f8bc:	b009      	add	sp, #36	; 0x24
   2f8be:	bd90      	pop	{r4, r7, pc}
   2f8c0:	0002f729 	.word	0x0002f729
   2f8c4:	0002f395 	.word	0x0002f395
   2f8c8:	0002f4b7 	.word	0x0002f4b7
   2f8cc:	0002f29d 	.word	0x0002f29d
   2f8d0:	0002f589 	.word	0x0002f589
   2f8d4:	0002f4e1 	.word	0x0002f4e1
   2f8d8:	00034549 	.word	0x00034549

0002f8dc <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   2f8dc:	b580      	push	{r7, lr}
   2f8de:	b088      	sub	sp, #32
   2f8e0:	af00      	add	r7, sp, #0
   2f8e2:	60f8      	str	r0, [r7, #12]
   2f8e4:	60b9      	str	r1, [r7, #8]
   2f8e6:	0019      	movs	r1, r3
   2f8e8:	1dfb      	adds	r3, r7, #7
   2f8ea:	701a      	strb	r2, [r3, #0]
   2f8ec:	1dbb      	adds	r3, r7, #6
   2f8ee:	1c0a      	adds	r2, r1, #0
   2f8f0:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   2f8f2:	2300      	movs	r3, #0
   2f8f4:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   2f8f6:	2300      	movs	r3, #0
   2f8f8:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   2f8fa:	68fb      	ldr	r3, [r7, #12]
   2f8fc:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   2f8fe:	68bb      	ldr	r3, [r7, #8]
   2f900:	2b03      	cmp	r3, #3
   2f902:	dc03      	bgt.n	2f90c <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2f904:	2302      	movs	r3, #2
   2f906:	425b      	negs	r3, r3
   2f908:	61fb      	str	r3, [r7, #28]
		goto exit;
   2f90a:	e055      	b.n	2f9b8 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   2f90c:	1dfb      	adds	r3, r7, #7
   2f90e:	781b      	ldrb	r3, [r3, #0]
   2f910:	220f      	movs	r2, #15
   2f912:	4013      	ands	r3, r2
   2f914:	b2da      	uxtb	r2, r3
   2f916:	2318      	movs	r3, #24
   2f918:	18fb      	adds	r3, r7, r3
   2f91a:	0110      	lsls	r0, r2, #4
   2f91c:	781a      	ldrb	r2, [r3, #0]
   2f91e:	210f      	movs	r1, #15
   2f920:	400a      	ands	r2, r1
   2f922:	1c11      	adds	r1, r2, #0
   2f924:	1c02      	adds	r2, r0, #0
   2f926:	430a      	orrs	r2, r1
   2f928:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   2f92a:	1dbb      	adds	r3, r7, #6
   2f92c:	781b      	ldrb	r3, [r3, #0]
   2f92e:	2201      	movs	r2, #1
   2f930:	4013      	ands	r3, r2
   2f932:	b2da      	uxtb	r2, r3
   2f934:	2318      	movs	r3, #24
   2f936:	18fb      	adds	r3, r7, r3
   2f938:	2101      	movs	r1, #1
   2f93a:	400a      	ands	r2, r1
   2f93c:	00d0      	lsls	r0, r2, #3
   2f93e:	781a      	ldrb	r2, [r3, #0]
   2f940:	2108      	movs	r1, #8
   2f942:	438a      	bics	r2, r1
   2f944:	1c11      	adds	r1, r2, #0
   2f946:	1c02      	adds	r2, r0, #0
   2f948:	430a      	orrs	r2, r1
   2f94a:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   2f94c:	1dfb      	adds	r3, r7, #7
   2f94e:	781b      	ldrb	r3, [r3, #0]
   2f950:	3b06      	subs	r3, #6
   2f952:	425a      	negs	r2, r3
   2f954:	4153      	adcs	r3, r2
   2f956:	b2db      	uxtb	r3, r3
   2f958:	1c1a      	adds	r2, r3, #0
   2f95a:	2303      	movs	r3, #3
   2f95c:	4013      	ands	r3, r2
   2f95e:	b2da      	uxtb	r2, r3
   2f960:	2318      	movs	r3, #24
   2f962:	18fb      	adds	r3, r7, r3
   2f964:	2103      	movs	r1, #3
   2f966:	400a      	ands	r2, r1
   2f968:	1890      	adds	r0, r2, r2
   2f96a:	781a      	ldrb	r2, [r3, #0]
   2f96c:	2106      	movs	r1, #6
   2f96e:	438a      	bics	r2, r1
   2f970:	1c11      	adds	r1, r2, #0
   2f972:	1c02      	adds	r2, r0, #0
   2f974:	430a      	orrs	r2, r1
   2f976:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2f978:	2318      	movs	r3, #24
   2f97a:	18fb      	adds	r3, r7, r3
   2f97c:	781a      	ldrb	r2, [r3, #0]
   2f97e:	2314      	movs	r3, #20
   2f980:	18fb      	adds	r3, r7, r3
   2f982:	0011      	movs	r1, r2
   2f984:	0018      	movs	r0, r3
   2f986:	4b0f      	ldr	r3, [pc, #60]	; (2f9c4 <MQTTSerialize_ack+0xe8>)
   2f988:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   2f98a:	697b      	ldr	r3, [r7, #20]
   2f98c:	2102      	movs	r1, #2
   2f98e:	0018      	movs	r0, r3
   2f990:	4b0d      	ldr	r3, [pc, #52]	; (2f9c8 <MQTTSerialize_ack+0xec>)
   2f992:	4798      	blx	r3
   2f994:	0002      	movs	r2, r0
   2f996:	697b      	ldr	r3, [r7, #20]
   2f998:	189b      	adds	r3, r3, r2
   2f99a:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   2f99c:	2328      	movs	r3, #40	; 0x28
   2f99e:	18fb      	adds	r3, r7, r3
   2f9a0:	881a      	ldrh	r2, [r3, #0]
   2f9a2:	2314      	movs	r3, #20
   2f9a4:	18fb      	adds	r3, r7, r3
   2f9a6:	0011      	movs	r1, r2
   2f9a8:	0018      	movs	r0, r3
   2f9aa:	4b08      	ldr	r3, [pc, #32]	; (2f9cc <MQTTSerialize_ack+0xf0>)
   2f9ac:	4798      	blx	r3
	rc = ptr - buf;
   2f9ae:	697b      	ldr	r3, [r7, #20]
   2f9b0:	001a      	movs	r2, r3
   2f9b2:	68fb      	ldr	r3, [r7, #12]
   2f9b4:	1ad3      	subs	r3, r2, r3
   2f9b6:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f9b8:	69fb      	ldr	r3, [r7, #28]
}
   2f9ba:	0018      	movs	r0, r3
   2f9bc:	46bd      	mov	sp, r7
   2f9be:	b008      	add	sp, #32
   2f9c0:	bd80      	pop	{r7, pc}
   2f9c2:	46c0      	nop			; (mov r8, r8)
   2f9c4:	0002f4b7 	.word	0x0002f4b7
   2f9c8:	0002f29d 	.word	0x0002f29d
   2f9cc:	0002f4e1 	.word	0x0002f4e1

0002f9d0 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   2f9d0:	b580      	push	{r7, lr}
   2f9d2:	b084      	sub	sp, #16
   2f9d4:	af00      	add	r7, sp, #0
   2f9d6:	6078      	str	r0, [r7, #4]
   2f9d8:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   2f9da:	2302      	movs	r3, #2
   2f9dc:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   2f9de:	2300      	movs	r3, #0
   2f9e0:	60fb      	str	r3, [r7, #12]
   2f9e2:	e014      	b.n	2fa0e <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   2f9e4:	68fa      	ldr	r2, [r7, #12]
   2f9e6:	0013      	movs	r3, r2
   2f9e8:	005b      	lsls	r3, r3, #1
   2f9ea:	189b      	adds	r3, r3, r2
   2f9ec:	009b      	lsls	r3, r3, #2
   2f9ee:	001a      	movs	r2, r3
   2f9f0:	683b      	ldr	r3, [r7, #0]
   2f9f2:	189b      	adds	r3, r3, r2
   2f9f4:	6818      	ldr	r0, [r3, #0]
   2f9f6:	6859      	ldr	r1, [r3, #4]
   2f9f8:	689a      	ldr	r2, [r3, #8]
   2f9fa:	4b09      	ldr	r3, [pc, #36]	; (2fa20 <MQTTSerialize_subscribeLength+0x50>)
   2f9fc:	4798      	blx	r3
   2f9fe:	0003      	movs	r3, r0
   2fa00:	3303      	adds	r3, #3
   2fa02:	68ba      	ldr	r2, [r7, #8]
   2fa04:	18d3      	adds	r3, r2, r3
   2fa06:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   2fa08:	68fb      	ldr	r3, [r7, #12]
   2fa0a:	3301      	adds	r3, #1
   2fa0c:	60fb      	str	r3, [r7, #12]
   2fa0e:	68fa      	ldr	r2, [r7, #12]
   2fa10:	687b      	ldr	r3, [r7, #4]
   2fa12:	429a      	cmp	r2, r3
   2fa14:	dbe6      	blt.n	2f9e4 <MQTTSerialize_subscribeLength+0x14>
	return len;
   2fa16:	68bb      	ldr	r3, [r7, #8]
}
   2fa18:	0018      	movs	r0, r3
   2fa1a:	46bd      	mov	sp, r7
   2fa1c:	b004      	add	sp, #16
   2fa1e:	bd80      	pop	{r7, pc}
   2fa20:	0002f671 	.word	0x0002f671

0002fa24 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   2fa24:	b590      	push	{r4, r7, lr}
   2fa26:	b08b      	sub	sp, #44	; 0x2c
   2fa28:	af00      	add	r7, sp, #0
   2fa2a:	60f8      	str	r0, [r7, #12]
   2fa2c:	60b9      	str	r1, [r7, #8]
   2fa2e:	0019      	movs	r1, r3
   2fa30:	1dfb      	adds	r3, r7, #7
   2fa32:	701a      	strb	r2, [r3, #0]
   2fa34:	1d3b      	adds	r3, r7, #4
   2fa36:	1c0a      	adds	r2, r1, #0
   2fa38:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   2fa3a:	68fb      	ldr	r3, [r7, #12]
   2fa3c:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   2fa3e:	2300      	movs	r3, #0
   2fa40:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   2fa42:	2300      	movs	r3, #0
   2fa44:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   2fa46:	2300      	movs	r3, #0
   2fa48:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   2fa4a:	2300      	movs	r3, #0
   2fa4c:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   2fa4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2fa50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2fa52:	0011      	movs	r1, r2
   2fa54:	0018      	movs	r0, r3
   2fa56:	4b41      	ldr	r3, [pc, #260]	; (2fb5c <MQTTSerialize_subscribe+0x138>)
   2fa58:	4798      	blx	r3
   2fa5a:	0003      	movs	r3, r0
   2fa5c:	61fb      	str	r3, [r7, #28]
   2fa5e:	69fb      	ldr	r3, [r7, #28]
   2fa60:	0018      	movs	r0, r3
   2fa62:	4b3f      	ldr	r3, [pc, #252]	; (2fb60 <MQTTSerialize_subscribe+0x13c>)
   2fa64:	4798      	blx	r3
   2fa66:	0002      	movs	r2, r0
   2fa68:	68bb      	ldr	r3, [r7, #8]
   2fa6a:	429a      	cmp	r2, r3
   2fa6c:	dd03      	ble.n	2fa76 <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2fa6e:	2302      	movs	r3, #2
   2fa70:	425b      	negs	r3, r3
   2fa72:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   2fa74:	e06c      	b.n	2fb50 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   2fa76:	2314      	movs	r3, #20
   2fa78:	18fb      	adds	r3, r7, r3
   2fa7a:	2200      	movs	r2, #0
   2fa7c:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   2fa7e:	2314      	movs	r3, #20
   2fa80:	18fb      	adds	r3, r7, r3
   2fa82:	781a      	ldrb	r2, [r3, #0]
   2fa84:	210f      	movs	r1, #15
   2fa86:	400a      	ands	r2, r1
   2fa88:	1c11      	adds	r1, r2, #0
   2fa8a:	2280      	movs	r2, #128	; 0x80
   2fa8c:	4252      	negs	r2, r2
   2fa8e:	430a      	orrs	r2, r1
   2fa90:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   2fa92:	1dfb      	adds	r3, r7, #7
   2fa94:	781b      	ldrb	r3, [r3, #0]
   2fa96:	2201      	movs	r2, #1
   2fa98:	4013      	ands	r3, r2
   2fa9a:	b2da      	uxtb	r2, r3
   2fa9c:	2314      	movs	r3, #20
   2fa9e:	18fb      	adds	r3, r7, r3
   2faa0:	2101      	movs	r1, #1
   2faa2:	400a      	ands	r2, r1
   2faa4:	00d0      	lsls	r0, r2, #3
   2faa6:	781a      	ldrb	r2, [r3, #0]
   2faa8:	2108      	movs	r1, #8
   2faaa:	438a      	bics	r2, r1
   2faac:	1c11      	adds	r1, r2, #0
   2faae:	1c02      	adds	r2, r0, #0
   2fab0:	430a      	orrs	r2, r1
   2fab2:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   2fab4:	2314      	movs	r3, #20
   2fab6:	18fb      	adds	r3, r7, r3
   2fab8:	781a      	ldrb	r2, [r3, #0]
   2faba:	2106      	movs	r1, #6
   2fabc:	438a      	bics	r2, r1
   2fabe:	1c11      	adds	r1, r2, #0
   2fac0:	2202      	movs	r2, #2
   2fac2:	430a      	orrs	r2, r1
   2fac4:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2fac6:	2314      	movs	r3, #20
   2fac8:	18fb      	adds	r3, r7, r3
   2faca:	781a      	ldrb	r2, [r3, #0]
   2facc:	2318      	movs	r3, #24
   2face:	18fb      	adds	r3, r7, r3
   2fad0:	0011      	movs	r1, r2
   2fad2:	0018      	movs	r0, r3
   2fad4:	4b23      	ldr	r3, [pc, #140]	; (2fb64 <MQTTSerialize_subscribe+0x140>)
   2fad6:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   2fad8:	69bb      	ldr	r3, [r7, #24]
   2fada:	69fa      	ldr	r2, [r7, #28]
   2fadc:	0011      	movs	r1, r2
   2fade:	0018      	movs	r0, r3
   2fae0:	4b21      	ldr	r3, [pc, #132]	; (2fb68 <MQTTSerialize_subscribe+0x144>)
   2fae2:	4798      	blx	r3
   2fae4:	0002      	movs	r2, r0
   2fae6:	69bb      	ldr	r3, [r7, #24]
   2fae8:	189b      	adds	r3, r3, r2
   2faea:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   2faec:	1d3b      	adds	r3, r7, #4
   2faee:	881a      	ldrh	r2, [r3, #0]
   2faf0:	2318      	movs	r3, #24
   2faf2:	18fb      	adds	r3, r7, r3
   2faf4:	0011      	movs	r1, r2
   2faf6:	0018      	movs	r0, r3
   2faf8:	4b1c      	ldr	r3, [pc, #112]	; (2fb6c <MQTTSerialize_subscribe+0x148>)
   2fafa:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   2fafc:	2300      	movs	r3, #0
   2fafe:	623b      	str	r3, [r7, #32]
   2fb00:	e01d      	b.n	2fb3e <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   2fb02:	6a3a      	ldr	r2, [r7, #32]
   2fb04:	0013      	movs	r3, r2
   2fb06:	005b      	lsls	r3, r3, #1
   2fb08:	189b      	adds	r3, r3, r2
   2fb0a:	009b      	lsls	r3, r3, #2
   2fb0c:	001a      	movs	r2, r3
   2fb0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2fb10:	189b      	adds	r3, r3, r2
   2fb12:	2218      	movs	r2, #24
   2fb14:	18b8      	adds	r0, r7, r2
   2fb16:	6819      	ldr	r1, [r3, #0]
   2fb18:	685a      	ldr	r2, [r3, #4]
   2fb1a:	689b      	ldr	r3, [r3, #8]
   2fb1c:	4c14      	ldr	r4, [pc, #80]	; (2fb70 <MQTTSerialize_subscribe+0x14c>)
   2fb1e:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   2fb20:	6a3b      	ldr	r3, [r7, #32]
   2fb22:	009b      	lsls	r3, r3, #2
   2fb24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2fb26:	18d3      	adds	r3, r2, r3
   2fb28:	681b      	ldr	r3, [r3, #0]
   2fb2a:	b2da      	uxtb	r2, r3
   2fb2c:	2318      	movs	r3, #24
   2fb2e:	18fb      	adds	r3, r7, r3
   2fb30:	0011      	movs	r1, r2
   2fb32:	0018      	movs	r0, r3
   2fb34:	4b0b      	ldr	r3, [pc, #44]	; (2fb64 <MQTTSerialize_subscribe+0x140>)
   2fb36:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   2fb38:	6a3b      	ldr	r3, [r7, #32]
   2fb3a:	3301      	adds	r3, #1
   2fb3c:	623b      	str	r3, [r7, #32]
   2fb3e:	6a3a      	ldr	r2, [r7, #32]
   2fb40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2fb42:	429a      	cmp	r2, r3
   2fb44:	dbdd      	blt.n	2fb02 <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   2fb46:	69bb      	ldr	r3, [r7, #24]
   2fb48:	001a      	movs	r2, r3
   2fb4a:	68fb      	ldr	r3, [r7, #12]
   2fb4c:	1ad3      	subs	r3, r2, r3
   2fb4e:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2fb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2fb52:	0018      	movs	r0, r3
   2fb54:	46bd      	mov	sp, r7
   2fb56:	b00b      	add	sp, #44	; 0x2c
   2fb58:	bd90      	pop	{r4, r7, pc}
   2fb5a:	46c0      	nop			; (mov r8, r8)
   2fb5c:	0002f9d1 	.word	0x0002f9d1
   2fb60:	0002f395 	.word	0x0002f395
   2fb64:	0002f4b7 	.word	0x0002f4b7
   2fb68:	0002f29d 	.word	0x0002f29d
   2fb6c:	0002f4e1 	.word	0x0002f4e1
   2fb70:	0002f589 	.word	0x0002f589

0002fb74 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   2fb74:	b590      	push	{r4, r7, lr}
   2fb76:	b08b      	sub	sp, #44	; 0x2c
   2fb78:	af00      	add	r7, sp, #0
   2fb7a:	60f8      	str	r0, [r7, #12]
   2fb7c:	60b9      	str	r1, [r7, #8]
   2fb7e:	607a      	str	r2, [r7, #4]
   2fb80:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2fb82:	2300      	movs	r3, #0
   2fb84:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2fb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2fb88:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2fb8a:	2300      	movs	r3, #0
   2fb8c:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2fb8e:	2300      	movs	r3, #0
   2fb90:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2fb92:	2318      	movs	r3, #24
   2fb94:	18fb      	adds	r3, r7, r3
   2fb96:	0018      	movs	r0, r3
   2fb98:	4b2c      	ldr	r3, [pc, #176]	; (2fc4c <MQTTDeserialize_suback+0xd8>)
   2fb9a:	4798      	blx	r3
   2fb9c:	0003      	movs	r3, r0
   2fb9e:	001a      	movs	r2, r3
   2fba0:	231c      	movs	r3, #28
   2fba2:	18fb      	adds	r3, r7, r3
   2fba4:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   2fba6:	231c      	movs	r3, #28
   2fba8:	18fb      	adds	r3, r7, r3
   2fbaa:	781b      	ldrb	r3, [r3, #0]
   2fbac:	220f      	movs	r2, #15
   2fbae:	4393      	bics	r3, r2
   2fbb0:	b2db      	uxtb	r3, r3
   2fbb2:	2b90      	cmp	r3, #144	; 0x90
   2fbb4:	d142      	bne.n	2fc3c <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2fbb6:	69bb      	ldr	r3, [r7, #24]
   2fbb8:	2214      	movs	r2, #20
   2fbba:	18ba      	adds	r2, r7, r2
   2fbbc:	0011      	movs	r1, r2
   2fbbe:	0018      	movs	r0, r3
   2fbc0:	4b23      	ldr	r3, [pc, #140]	; (2fc50 <MQTTDeserialize_suback+0xdc>)
   2fbc2:	4798      	blx	r3
   2fbc4:	0003      	movs	r3, r0
   2fbc6:	627b      	str	r3, [r7, #36]	; 0x24
   2fbc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2fbca:	69bb      	ldr	r3, [r7, #24]
   2fbcc:	189b      	adds	r3, r3, r2
   2fbce:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2fbd0:	69bb      	ldr	r3, [r7, #24]
   2fbd2:	697a      	ldr	r2, [r7, #20]
   2fbd4:	189b      	adds	r3, r3, r2
   2fbd6:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   2fbd8:	6a3b      	ldr	r3, [r7, #32]
   2fbda:	69ba      	ldr	r2, [r7, #24]
   2fbdc:	1a9b      	subs	r3, r3, r2
   2fbde:	2b01      	cmp	r3, #1
   2fbe0:	dd2e      	ble.n	2fc40 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   2fbe2:	2318      	movs	r3, #24
   2fbe4:	18fb      	adds	r3, r7, r3
   2fbe6:	0018      	movs	r0, r3
   2fbe8:	4b1a      	ldr	r3, [pc, #104]	; (2fc54 <MQTTDeserialize_suback+0xe0>)
   2fbea:	4798      	blx	r3
   2fbec:	0003      	movs	r3, r0
   2fbee:	b29a      	uxth	r2, r3
   2fbf0:	68fb      	ldr	r3, [r7, #12]
   2fbf2:	801a      	strh	r2, [r3, #0]

	*count = 0;
   2fbf4:	687b      	ldr	r3, [r7, #4]
   2fbf6:	2200      	movs	r2, #0
   2fbf8:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   2fbfa:	e018      	b.n	2fc2e <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   2fbfc:	687b      	ldr	r3, [r7, #4]
   2fbfe:	681a      	ldr	r2, [r3, #0]
   2fc00:	68bb      	ldr	r3, [r7, #8]
   2fc02:	429a      	cmp	r2, r3
   2fc04:	dd03      	ble.n	2fc0e <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   2fc06:	2301      	movs	r3, #1
   2fc08:	425b      	negs	r3, r3
   2fc0a:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   2fc0c:	e019      	b.n	2fc42 <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   2fc0e:	687b      	ldr	r3, [r7, #4]
   2fc10:	681a      	ldr	r2, [r3, #0]
   2fc12:	1c51      	adds	r1, r2, #1
   2fc14:	687b      	ldr	r3, [r7, #4]
   2fc16:	6019      	str	r1, [r3, #0]
   2fc18:	0013      	movs	r3, r2
   2fc1a:	009b      	lsls	r3, r3, #2
   2fc1c:	683a      	ldr	r2, [r7, #0]
   2fc1e:	18d4      	adds	r4, r2, r3
   2fc20:	2318      	movs	r3, #24
   2fc22:	18fb      	adds	r3, r7, r3
   2fc24:	0018      	movs	r0, r3
   2fc26:	4b09      	ldr	r3, [pc, #36]	; (2fc4c <MQTTDeserialize_suback+0xd8>)
   2fc28:	4798      	blx	r3
   2fc2a:	0003      	movs	r3, r0
   2fc2c:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   2fc2e:	69ba      	ldr	r2, [r7, #24]
   2fc30:	6a3b      	ldr	r3, [r7, #32]
   2fc32:	429a      	cmp	r2, r3
   2fc34:	d3e2      	bcc.n	2fbfc <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   2fc36:	2301      	movs	r3, #1
   2fc38:	627b      	str	r3, [r7, #36]	; 0x24
   2fc3a:	e002      	b.n	2fc42 <MQTTDeserialize_suback+0xce>
		goto exit;
   2fc3c:	46c0      	nop			; (mov r8, r8)
   2fc3e:	e000      	b.n	2fc42 <MQTTDeserialize_suback+0xce>
		goto exit;
   2fc40:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2fc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2fc44:	0018      	movs	r0, r3
   2fc46:	46bd      	mov	sp, r7
   2fc48:	b00b      	add	sp, #44	; 0x2c
   2fc4a:	bd90      	pop	{r4, r7, pc}
   2fc4c:	0002f48b 	.word	0x0002f48b
   2fc50:	0002f425 	.word	0x0002f425
   2fc54:	0002f459 	.word	0x0002f459

0002fc58 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   2fc58:	b580      	push	{r7, lr}
   2fc5a:	b082      	sub	sp, #8
   2fc5c:	af00      	add	r7, sp, #0
   2fc5e:	6078      	str	r0, [r7, #4]
	config->port = 80;
   2fc60:	687b      	ldr	r3, [r7, #4]
   2fc62:	2250      	movs	r2, #80	; 0x50
   2fc64:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2fc66:	687b      	ldr	r3, [r7, #4]
   2fc68:	2200      	movs	r2, #0
   2fc6a:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   2fc6c:	687b      	ldr	r3, [r7, #4]
   2fc6e:	4a0b      	ldr	r2, [pc, #44]	; (2fc9c <http_client_get_config_defaults+0x44>)
   2fc70:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   2fc72:	687b      	ldr	r3, [r7, #4]
   2fc74:	2200      	movs	r2, #0
   2fc76:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   2fc78:	687b      	ldr	r3, [r7, #4]
   2fc7a:	2200      	movs	r2, #0
   2fc7c:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   2fc7e:	687b      	ldr	r3, [r7, #4]
   2fc80:	2280      	movs	r2, #128	; 0x80
   2fc82:	0052      	lsls	r2, r2, #1
   2fc84:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   2fc86:	687b      	ldr	r3, [r7, #4]
   2fc88:	2252      	movs	r2, #82	; 0x52
   2fc8a:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   2fc8c:	687b      	ldr	r3, [r7, #4]
   2fc8e:	4a04      	ldr	r2, [pc, #16]	; (2fca0 <http_client_get_config_defaults+0x48>)
   2fc90:	619a      	str	r2, [r3, #24]
}
   2fc92:	46c0      	nop			; (mov r8, r8)
   2fc94:	46bd      	mov	sp, r7
   2fc96:	b002      	add	sp, #8
   2fc98:	bd80      	pop	{r7, pc}
   2fc9a:	46c0      	nop			; (mov r8, r8)
   2fc9c:	00004e20 	.word	0x00004e20
   2fca0:	0003966c 	.word	0x0003966c

0002fca4 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   2fca4:	b590      	push	{r4, r7, lr}
   2fca6:	b083      	sub	sp, #12
   2fca8:	af00      	add	r7, sp, #0
   2fcaa:	6078      	str	r0, [r7, #4]
   2fcac:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   2fcae:	687b      	ldr	r3, [r7, #4]
   2fcb0:	2b00      	cmp	r3, #0
   2fcb2:	d002      	beq.n	2fcba <http_client_init+0x16>
   2fcb4:	683b      	ldr	r3, [r7, #0]
   2fcb6:	2b00      	cmp	r3, #0
   2fcb8:	d102      	bne.n	2fcc0 <http_client_init+0x1c>
		return -EINVAL;
   2fcba:	2316      	movs	r3, #22
   2fcbc:	425b      	negs	r3, r3
   2fcbe:	e058      	b.n	2fd72 <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   2fcc0:	683b      	ldr	r3, [r7, #0]
   2fcc2:	691b      	ldr	r3, [r3, #16]
   2fcc4:	2b00      	cmp	r3, #0
   2fcc6:	d102      	bne.n	2fcce <http_client_init+0x2a>
		return -EINVAL;
   2fcc8:	2316      	movs	r3, #22
   2fcca:	425b      	negs	r3, r3
   2fccc:	e051      	b.n	2fd72 <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   2fcce:	683b      	ldr	r3, [r7, #0]
   2fcd0:	685b      	ldr	r3, [r3, #4]
   2fcd2:	2b00      	cmp	r3, #0
   2fcd4:	d102      	bne.n	2fcdc <http_client_init+0x38>
		return -EINVAL;
   2fcd6:	2316      	movs	r3, #22
   2fcd8:	425b      	negs	r3, r3
   2fcda:	e04a      	b.n	2fd72 <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   2fcdc:	683b      	ldr	r3, [r7, #0]
   2fcde:	695b      	ldr	r3, [r3, #20]
   2fce0:	2b51      	cmp	r3, #81	; 0x51
   2fce2:	d802      	bhi.n	2fcea <http_client_init+0x46>
		return -EINVAL;
   2fce4:	2316      	movs	r3, #22
   2fce6:	425b      	negs	r3, r3
   2fce8:	e043      	b.n	2fd72 <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   2fcea:	687b      	ldr	r3, [r7, #4]
   2fcec:	22e8      	movs	r2, #232	; 0xe8
   2fcee:	2100      	movs	r1, #0
   2fcf0:	0018      	movs	r0, r3
   2fcf2:	4b22      	ldr	r3, [pc, #136]	; (2fd7c <http_client_init+0xd8>)
   2fcf4:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   2fcf6:	687b      	ldr	r3, [r7, #4]
   2fcf8:	3350      	adds	r3, #80	; 0x50
   2fcfa:	6839      	ldr	r1, [r7, #0]
   2fcfc:	221c      	movs	r2, #28
   2fcfe:	0018      	movs	r0, r3
   2fd00:	4b1f      	ldr	r3, [pc, #124]	; (2fd80 <http_client_init+0xdc>)
   2fd02:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   2fd04:	687b      	ldr	r3, [r7, #4]
   2fd06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2fd08:	2b00      	cmp	r3, #0
   2fd0a:	d115      	bne.n	2fd38 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   2fd0c:	683b      	ldr	r3, [r7, #0]
   2fd0e:	691b      	ldr	r3, [r3, #16]
   2fd10:	0018      	movs	r0, r3
   2fd12:	4b1c      	ldr	r3, [pc, #112]	; (2fd84 <http_client_init+0xe0>)
   2fd14:	4798      	blx	r3
   2fd16:	0003      	movs	r3, r0
   2fd18:	001a      	movs	r2, r3
   2fd1a:	687b      	ldr	r3, [r7, #4]
   2fd1c:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   2fd1e:	687b      	ldr	r3, [r7, #4]
   2fd20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2fd22:	2b00      	cmp	r3, #0
   2fd24:	d102      	bne.n	2fd2c <http_client_init+0x88>
			return -ENOMEM;
   2fd26:	230c      	movs	r3, #12
   2fd28:	425b      	negs	r3, r3
   2fd2a:	e022      	b.n	2fd72 <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   2fd2c:	687b      	ldr	r3, [r7, #4]
   2fd2e:	2241      	movs	r2, #65	; 0x41
   2fd30:	5c99      	ldrb	r1, [r3, r2]
   2fd32:	2004      	movs	r0, #4
   2fd34:	4301      	orrs	r1, r0
   2fd36:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   2fd38:	683b      	ldr	r3, [r7, #0]
   2fd3a:	891b      	ldrh	r3, [r3, #8]
   2fd3c:	2b00      	cmp	r3, #0
   2fd3e:	d010      	beq.n	2fd62 <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   2fd40:	683b      	ldr	r3, [r7, #0]
   2fd42:	6858      	ldr	r0, [r3, #4]
   2fd44:	687a      	ldr	r2, [r7, #4]
   2fd46:	4910      	ldr	r1, [pc, #64]	; (2fd88 <http_client_init+0xe4>)
   2fd48:	2300      	movs	r3, #0
   2fd4a:	4c10      	ldr	r4, [pc, #64]	; (2fd8c <http_client_init+0xe8>)
   2fd4c:	47a0      	blx	r4
   2fd4e:	0002      	movs	r2, r0
   2fd50:	687b      	ldr	r3, [r7, #4]
   2fd52:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   2fd54:	687b      	ldr	r3, [r7, #4]
   2fd56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2fd58:	2b00      	cmp	r3, #0
   2fd5a:	da02      	bge.n	2fd62 <http_client_init+0xbe>
			return -ENOSPC;
   2fd5c:	231c      	movs	r3, #28
   2fd5e:	425b      	negs	r3, r3
   2fd60:	e007      	b.n	2fd72 <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   2fd62:	687b      	ldr	r3, [r7, #4]
   2fd64:	2200      	movs	r2, #0
   2fd66:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   2fd68:	687b      	ldr	r3, [r7, #4]
   2fd6a:	22d8      	movs	r2, #216	; 0xd8
   2fd6c:	2100      	movs	r1, #0
   2fd6e:	5099      	str	r1, [r3, r2]

	return 0;
   2fd70:	2300      	movs	r3, #0
}
   2fd72:	0018      	movs	r0, r3
   2fd74:	46bd      	mov	sp, r7
   2fd76:	b003      	add	sp, #12
   2fd78:	bd90      	pop	{r4, r7, pc}
   2fd7a:	46c0      	nop			; (mov r8, r8)
   2fd7c:	0003457f 	.word	0x0003457f
   2fd80:	00034549 	.word	0x00034549
   2fd84:	00034521 	.word	0x00034521
   2fd88:	00030055 	.word	0x00030055
   2fd8c:	000316f9 	.word	0x000316f9

0002fd90 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   2fd90:	b580      	push	{r7, lr}
   2fd92:	b082      	sub	sp, #8
   2fd94:	af00      	add	r7, sp, #0
   2fd96:	6078      	str	r0, [r7, #4]
   2fd98:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   2fd9a:	687b      	ldr	r3, [r7, #4]
   2fd9c:	2b00      	cmp	r3, #0
   2fd9e:	d102      	bne.n	2fda6 <http_client_register_callback+0x16>
		return -EINVAL;
   2fda0:	2316      	movs	r3, #22
   2fda2:	425b      	negs	r3, r3
   2fda4:	e003      	b.n	2fdae <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   2fda6:	687b      	ldr	r3, [r7, #4]
   2fda8:	683a      	ldr	r2, [r7, #0]
   2fdaa:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   2fdac:	2300      	movs	r3, #0
}
   2fdae:	0018      	movs	r0, r3
   2fdb0:	46bd      	mov	sp, r7
   2fdb2:	b002      	add	sp, #8
   2fdb4:	bd80      	pop	{r7, pc}
	...

0002fdb8 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   2fdb8:	b580      	push	{r7, lr}
   2fdba:	b082      	sub	sp, #8
   2fdbc:	af00      	add	r7, sp, #0
   2fdbe:	6078      	str	r0, [r7, #4]
	switch (err) {
   2fdc0:	687b      	ldr	r3, [r7, #4]
   2fdc2:	330e      	adds	r3, #14
   2fdc4:	2b0e      	cmp	r3, #14
   2fdc6:	d825      	bhi.n	2fe14 <_hwerr_to_stderr+0x5c>
   2fdc8:	009a      	lsls	r2, r3, #2
   2fdca:	4b18      	ldr	r3, [pc, #96]	; (2fe2c <_hwerr_to_stderr+0x74>)
   2fdcc:	18d3      	adds	r3, r2, r3
   2fdce:	681b      	ldr	r3, [r3, #0]
   2fdd0:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   2fdd2:	2305      	movs	r3, #5
   2fdd4:	425b      	negs	r3, r3
   2fdd6:	e024      	b.n	2fe22 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   2fdd8:	2302      	movs	r3, #2
   2fdda:	425b      	negs	r3, r3
   2fddc:	e021      	b.n	2fe22 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   2fdde:	2370      	movs	r3, #112	; 0x70
   2fde0:	425b      	negs	r3, r3
   2fde2:	e01e      	b.n	2fe22 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   2fde4:	230c      	movs	r3, #12
   2fde6:	425b      	negs	r3, r3
   2fde8:	e01b      	b.n	2fe22 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   2fdea:	2316      	movs	r3, #22
   2fdec:	425b      	negs	r3, r3
   2fdee:	e018      	b.n	2fe22 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   2fdf0:	230c      	movs	r3, #12
   2fdf2:	425b      	negs	r3, r3
   2fdf4:	e015      	b.n	2fe22 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   2fdf6:	2305      	movs	r3, #5
   2fdf8:	425b      	negs	r3, r3
   2fdfa:	e012      	b.n	2fe22 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   2fdfc:	2379      	movs	r3, #121	; 0x79
   2fdfe:	425b      	negs	r3, r3
   2fe00:	e00f      	b.n	2fe22 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   2fe02:	2368      	movs	r3, #104	; 0x68
   2fe04:	425b      	negs	r3, r3
   2fe06:	e00c      	b.n	2fe22 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   2fe08:	230b      	movs	r3, #11
   2fe0a:	425b      	negs	r3, r3
   2fe0c:	e009      	b.n	2fe22 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   2fe0e:	2310      	movs	r3, #16
   2fe10:	425b      	negs	r3, r3
   2fe12:	e006      	b.n	2fe22 <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   2fe14:	687b      	ldr	r3, [r7, #4]
   2fe16:	2b00      	cmp	r3, #0
   2fe18:	da02      	bge.n	2fe20 <_hwerr_to_stderr+0x68>
				return -EIO;
   2fe1a:	2305      	movs	r3, #5
   2fe1c:	425b      	negs	r3, r3
   2fe1e:	e000      	b.n	2fe22 <_hwerr_to_stderr+0x6a>
			}
			return 0;
   2fe20:	2300      	movs	r3, #0
	}
}
   2fe22:	0018      	movs	r0, r3
   2fe24:	46bd      	mov	sp, r7
   2fe26:	b002      	add	sp, #8
   2fe28:	bd80      	pop	{r7, pc}
   2fe2a:	46c0      	nop			; (mov r8, r8)
   2fe2c:	000397a8 	.word	0x000397a8

0002fe30 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2fe30:	b580      	push	{r7, lr}
   2fe32:	b08a      	sub	sp, #40	; 0x28
   2fe34:	af00      	add	r7, sp, #0
   2fe36:	603a      	str	r2, [r7, #0]
   2fe38:	1dfb      	adds	r3, r7, #7
   2fe3a:	1c02      	adds	r2, r0, #0
   2fe3c:	701a      	strb	r2, [r3, #0]
   2fe3e:	1dbb      	adds	r3, r7, #6
   2fe40:	1c0a      	adds	r2, r1, #0
   2fe42:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   2fe44:	1dfb      	adds	r3, r7, #7
   2fe46:	2200      	movs	r2, #0
   2fe48:	569a      	ldrsb	r2, [r3, r2]
   2fe4a:	4b4b      	ldr	r3, [pc, #300]	; (2ff78 <http_client_socket_event_handler+0x148>)
   2fe4c:	0092      	lsls	r2, r2, #2
   2fe4e:	58d3      	ldr	r3, [r2, r3]
   2fe50:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   2fe52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2fe54:	2b00      	cmp	r3, #0
   2fe56:	d100      	bne.n	2fe5a <http_client_socket_event_handler+0x2a>
   2fe58:	e08a      	b.n	2ff70 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   2fe5a:	1dbb      	adds	r3, r7, #6
   2fe5c:	781b      	ldrb	r3, [r3, #0]
   2fe5e:	2b06      	cmp	r3, #6
   2fe60:	d040      	beq.n	2fee4 <http_client_socket_event_handler+0xb4>
   2fe62:	2b07      	cmp	r3, #7
   2fe64:	d060      	beq.n	2ff28 <http_client_socket_event_handler+0xf8>
   2fe66:	2b05      	cmp	r3, #5
   2fe68:	d000      	beq.n	2fe6c <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   2fe6a:	e082      	b.n	2ff72 <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   2fe6c:	683b      	ldr	r3, [r7, #0]
   2fe6e:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   2fe70:	6a3b      	ldr	r3, [r7, #32]
   2fe72:	785b      	ldrb	r3, [r3, #1]
   2fe74:	b25b      	sxtb	r3, r3
   2fe76:	001a      	movs	r2, r3
   2fe78:	230c      	movs	r3, #12
   2fe7a:	18fb      	adds	r3, r7, r3
   2fe7c:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   2fe7e:	6a3b      	ldr	r3, [r7, #32]
   2fe80:	785b      	ldrb	r3, [r3, #1]
   2fe82:	b25b      	sxtb	r3, r3
   2fe84:	2b00      	cmp	r3, #0
   2fe86:	da0c      	bge.n	2fea2 <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   2fe88:	6a3b      	ldr	r3, [r7, #32]
   2fe8a:	785b      	ldrb	r3, [r3, #1]
   2fe8c:	b25b      	sxtb	r3, r3
   2fe8e:	0018      	movs	r0, r3
   2fe90:	4b3a      	ldr	r3, [pc, #232]	; (2ff7c <http_client_socket_event_handler+0x14c>)
   2fe92:	4798      	blx	r3
   2fe94:	0002      	movs	r2, r0
   2fe96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2fe98:	0011      	movs	r1, r2
   2fe9a:	0018      	movs	r0, r3
   2fe9c:	4b38      	ldr	r3, [pc, #224]	; (2ff80 <http_client_socket_event_handler+0x150>)
   2fe9e:	4798      	blx	r3
    	break;
   2fea0:	e067      	b.n	2ff72 <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   2fea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2fea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2fea6:	2b00      	cmp	r3, #0
   2fea8:	d006      	beq.n	2feb8 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   2feaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2feac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2feae:	220c      	movs	r2, #12
   2feb0:	18ba      	adds	r2, r7, r2
   2feb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2feb4:	2100      	movs	r1, #0
   2feb6:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   2feb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2feba:	2203      	movs	r2, #3
   2febc:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   2febe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2fec0:	6d58      	ldr	r0, [r3, #84]	; 0x54
   2fec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2fec4:	6c99      	ldr	r1, [r3, #72]	; 0x48
   2fec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2fec8:	2258      	movs	r2, #88	; 0x58
   2feca:	5a9b      	ldrh	r3, [r3, r2]
   2fecc:	001a      	movs	r2, r3
   2fece:	4b2d      	ldr	r3, [pc, #180]	; (2ff84 <http_client_socket_event_handler+0x154>)
   2fed0:	4798      	blx	r3
    		_http_client_recv_packet(module);
   2fed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2fed4:	0018      	movs	r0, r3
   2fed6:	4b2c      	ldr	r3, [pc, #176]	; (2ff88 <http_client_socket_event_handler+0x158>)
   2fed8:	4798      	blx	r3
			_http_client_request(module);
   2feda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2fedc:	0018      	movs	r0, r3
   2fede:	4b2b      	ldr	r3, [pc, #172]	; (2ff8c <http_client_socket_event_handler+0x15c>)
   2fee0:	4798      	blx	r3
    	break;
   2fee2:	e046      	b.n	2ff72 <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   2fee4:	683b      	ldr	r3, [r7, #0]
   2fee6:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   2fee8:	69fb      	ldr	r3, [r7, #28]
   2feea:	2204      	movs	r2, #4
   2feec:	5e9b      	ldrsh	r3, [r3, r2]
   2feee:	2b00      	cmp	r3, #0
   2fef0:	dd09      	ble.n	2ff06 <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   2fef2:	69fb      	ldr	r3, [r7, #28]
   2fef4:	2204      	movs	r2, #4
   2fef6:	5e9b      	ldrsh	r3, [r3, r2]
   2fef8:	001a      	movs	r2, r3
   2fefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2fefc:	0011      	movs	r1, r2
   2fefe:	0018      	movs	r0, r3
   2ff00:	4b23      	ldr	r3, [pc, #140]	; (2ff90 <http_client_socket_event_handler+0x160>)
   2ff02:	4798      	blx	r3
   2ff04:	e00b      	b.n	2ff1e <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   2ff06:	69fb      	ldr	r3, [r7, #28]
   2ff08:	2204      	movs	r2, #4
   2ff0a:	5e9b      	ldrsh	r3, [r3, r2]
   2ff0c:	0018      	movs	r0, r3
   2ff0e:	4b1b      	ldr	r3, [pc, #108]	; (2ff7c <http_client_socket_event_handler+0x14c>)
   2ff10:	4798      	blx	r3
   2ff12:	0002      	movs	r2, r0
   2ff14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ff16:	0011      	movs	r1, r2
   2ff18:	0018      	movs	r0, r3
   2ff1a:	4b19      	ldr	r3, [pc, #100]	; (2ff80 <http_client_socket_event_handler+0x150>)
   2ff1c:	4798      	blx	r3
		_http_client_recv_packet(module);
   2ff1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ff20:	0018      	movs	r0, r3
   2ff22:	4b19      	ldr	r3, [pc, #100]	; (2ff88 <http_client_socket_event_handler+0x158>)
   2ff24:	4798      	blx	r3
		break;
   2ff26:	e024      	b.n	2ff72 <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   2ff28:	231a      	movs	r3, #26
   2ff2a:	18fb      	adds	r3, r7, r3
   2ff2c:	683a      	ldr	r2, [r7, #0]
   2ff2e:	8812      	ldrh	r2, [r2, #0]
   2ff30:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   2ff32:	231a      	movs	r3, #26
   2ff34:	18fb      	adds	r3, r7, r3
   2ff36:	2200      	movs	r2, #0
   2ff38:	5e9b      	ldrsh	r3, [r3, r2]
   2ff3a:	2b00      	cmp	r3, #0
   2ff3c:	da0d      	bge.n	2ff5a <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   2ff3e:	231a      	movs	r3, #26
   2ff40:	18fb      	adds	r3, r7, r3
   2ff42:	2200      	movs	r2, #0
   2ff44:	5e9b      	ldrsh	r3, [r3, r2]
   2ff46:	0018      	movs	r0, r3
   2ff48:	4b0c      	ldr	r3, [pc, #48]	; (2ff7c <http_client_socket_event_handler+0x14c>)
   2ff4a:	4798      	blx	r3
   2ff4c:	0002      	movs	r2, r0
   2ff4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ff50:	0011      	movs	r1, r2
   2ff52:	0018      	movs	r0, r3
   2ff54:	4b0a      	ldr	r3, [pc, #40]	; (2ff80 <http_client_socket_event_handler+0x150>)
   2ff56:	4798      	blx	r3
   2ff58:	e003      	b.n	2ff62 <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   2ff5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ff5c:	0018      	movs	r0, r3
   2ff5e:	4b0b      	ldr	r3, [pc, #44]	; (2ff8c <http_client_socket_event_handler+0x15c>)
   2ff60:	4798      	blx	r3
		module->sending = 0;
   2ff62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ff64:	2241      	movs	r2, #65	; 0x41
   2ff66:	5c99      	ldrb	r1, [r3, r2]
   2ff68:	2001      	movs	r0, #1
   2ff6a:	4381      	bics	r1, r0
   2ff6c:	5499      	strb	r1, [r3, r2]
    	break;
   2ff6e:	e000      	b.n	2ff72 <http_client_socket_event_handler+0x142>
		return;
   2ff70:	46c0      	nop			; (mov r8, r8)
	}

}
   2ff72:	46bd      	mov	sp, r7
   2ff74:	b00a      	add	sp, #40	; 0x28
   2ff76:	bd80      	pop	{r7, pc}
   2ff78:	200046c0 	.word	0x200046c0
   2ff7c:	0002fdb9 	.word	0x0002fdb9
   2ff80:	0003042d 	.word	0x0003042d
   2ff84:	00031789 	.word	0x00031789
   2ff88:	00030cb9 	.word	0x00030cb9
   2ff8c:	00030581 	.word	0x00030581
   2ff90:	00030d1d 	.word	0x00030d1d

0002ff94 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   2ff94:	b580      	push	{r7, lr}
   2ff96:	b088      	sub	sp, #32
   2ff98:	af00      	add	r7, sp, #0
   2ff9a:	6078      	str	r0, [r7, #4]
   2ff9c:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   2ff9e:	2300      	movs	r3, #0
   2ffa0:	61fb      	str	r3, [r7, #28]
   2ffa2:	e048      	b.n	30036 <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   2ffa4:	4b27      	ldr	r3, [pc, #156]	; (30044 <http_client_socket_resolve_handler+0xb0>)
   2ffa6:	69fa      	ldr	r2, [r7, #28]
   2ffa8:	0092      	lsls	r2, r2, #2
   2ffaa:	58d3      	ldr	r3, [r2, r3]
   2ffac:	2b00      	cmp	r3, #0
   2ffae:	d03f      	beq.n	30030 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   2ffb0:	4b24      	ldr	r3, [pc, #144]	; (30044 <http_client_socket_resolve_handler+0xb0>)
   2ffb2:	69fa      	ldr	r2, [r7, #28]
   2ffb4:	0092      	lsls	r2, r2, #2
   2ffb6:	58d3      	ldr	r3, [r2, r3]
   2ffb8:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   2ffba:	69bb      	ldr	r3, [r7, #24]
   2ffbc:	1c5a      	adds	r2, r3, #1
   2ffbe:	687b      	ldr	r3, [r7, #4]
   2ffc0:	0011      	movs	r1, r2
   2ffc2:	0018      	movs	r0, r3
   2ffc4:	4b20      	ldr	r3, [pc, #128]	; (30048 <http_client_socket_resolve_handler+0xb4>)
   2ffc6:	4798      	blx	r3
   2ffc8:	1e03      	subs	r3, r0, #0
   2ffca:	d131      	bne.n	30030 <http_client_socket_resolve_handler+0x9c>
   2ffcc:	69bb      	ldr	r3, [r7, #24]
   2ffce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2ffd0:	2b01      	cmp	r3, #1
   2ffd2:	d12d      	bne.n	30030 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   2ffd4:	683b      	ldr	r3, [r7, #0]
   2ffd6:	2b00      	cmp	r3, #0
   2ffd8:	d107      	bne.n	2ffea <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   2ffda:	2376      	movs	r3, #118	; 0x76
   2ffdc:	425a      	negs	r2, r3
   2ffde:	69bb      	ldr	r3, [r7, #24]
   2ffe0:	0011      	movs	r1, r2
   2ffe2:	0018      	movs	r0, r3
   2ffe4:	4b19      	ldr	r3, [pc, #100]	; (3004c <http_client_socket_resolve_handler+0xb8>)
   2ffe6:	4798      	blx	r3
					return;
   2ffe8:	e028      	b.n	3003c <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   2ffea:	2308      	movs	r3, #8
   2ffec:	18fb      	adds	r3, r7, r3
   2ffee:	2202      	movs	r2, #2
   2fff0:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   2fff2:	69bb      	ldr	r3, [r7, #24]
   2fff4:	2250      	movs	r2, #80	; 0x50
   2fff6:	5a9b      	ldrh	r3, [r3, r2]
   2fff8:	021b      	lsls	r3, r3, #8
   2fffa:	b21a      	sxth	r2, r3
   2fffc:	69bb      	ldr	r3, [r7, #24]
   2fffe:	2150      	movs	r1, #80	; 0x50
   30000:	5a5b      	ldrh	r3, [r3, r1]
   30002:	0a1b      	lsrs	r3, r3, #8
   30004:	b29b      	uxth	r3, r3
   30006:	b21b      	sxth	r3, r3
   30008:	4313      	orrs	r3, r2
   3000a:	b21b      	sxth	r3, r3
   3000c:	b29a      	uxth	r2, r3
   3000e:	2308      	movs	r3, #8
   30010:	18fb      	adds	r3, r7, r3
   30012:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   30014:	2308      	movs	r3, #8
   30016:	18fb      	adds	r3, r7, r3
   30018:	683a      	ldr	r2, [r7, #0]
   3001a:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   3001c:	69bb      	ldr	r3, [r7, #24]
   3001e:	781b      	ldrb	r3, [r3, #0]
   30020:	b25b      	sxtb	r3, r3
   30022:	2208      	movs	r2, #8
   30024:	18b9      	adds	r1, r7, r2
   30026:	2210      	movs	r2, #16
   30028:	0018      	movs	r0, r3
   3002a:	4b09      	ldr	r3, [pc, #36]	; (30050 <http_client_socket_resolve_handler+0xbc>)
   3002c:	4798      	blx	r3
				return;
   3002e:	e005      	b.n	3003c <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   30030:	69fb      	ldr	r3, [r7, #28]
   30032:	3301      	adds	r3, #1
   30034:	61fb      	str	r3, [r7, #28]
   30036:	69fb      	ldr	r3, [r7, #28]
   30038:	2b06      	cmp	r3, #6
   3003a:	ddb3      	ble.n	2ffa4 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   3003c:	46bd      	mov	sp, r7
   3003e:	b008      	add	sp, #32
   30040:	bd80      	pop	{r7, pc}
   30042:	46c0      	nop			; (mov r8, r8)
   30044:	200046c0 	.word	0x200046c0
   30048:	000348bd 	.word	0x000348bd
   3004c:	0003042d 	.word	0x0003042d
   30050:	00024825 	.word	0x00024825

00030054 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   30054:	b580      	push	{r7, lr}
   30056:	b086      	sub	sp, #24
   30058:	af00      	add	r7, sp, #0
   3005a:	60f8      	str	r0, [r7, #12]
   3005c:	60b9      	str	r1, [r7, #8]
   3005e:	607a      	str	r2, [r7, #4]
   30060:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   30062:	687b      	ldr	r3, [r7, #4]
   30064:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   30066:	697b      	ldr	r3, [r7, #20]
   30068:	2b00      	cmp	r3, #0
   3006a:	d007      	beq.n	3007c <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   3006c:	233e      	movs	r3, #62	; 0x3e
   3006e:	425a      	negs	r2, r3
   30070:	697b      	ldr	r3, [r7, #20]
   30072:	0011      	movs	r1, r2
   30074:	0018      	movs	r0, r3
   30076:	4b03      	ldr	r3, [pc, #12]	; (30084 <http_client_timer_callback+0x30>)
   30078:	4798      	blx	r3
   3007a:	e000      	b.n	3007e <http_client_timer_callback+0x2a>
		return;
   3007c:	46c0      	nop			; (mov r8, r8)
}
   3007e:	46bd      	mov	sp, r7
   30080:	b006      	add	sp, #24
   30082:	bd80      	pop	{r7, pc}
   30084:	0003042d 	.word	0x0003042d

00030088 <_is_ip>:

static int _is_ip(const char *host)
{
   30088:	b580      	push	{r7, lr}
   3008a:	b084      	sub	sp, #16
   3008c:	af00      	add	r7, sp, #0
   3008e:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   30090:	2300      	movs	r3, #0
   30092:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   30094:	e03a      	b.n	3010c <_is_ip+0x84>
		ch = *host++;
   30096:	687b      	ldr	r3, [r7, #4]
   30098:	1c5a      	adds	r2, r3, #1
   3009a:	607a      	str	r2, [r7, #4]
   3009c:	220b      	movs	r2, #11
   3009e:	18ba      	adds	r2, r7, r2
   300a0:	781b      	ldrb	r3, [r3, #0]
   300a2:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   300a4:	230b      	movs	r3, #11
   300a6:	18fb      	adds	r3, r7, r3
   300a8:	781b      	ldrb	r3, [r3, #0]
   300aa:	2b60      	cmp	r3, #96	; 0x60
   300ac:	d904      	bls.n	300b8 <_is_ip+0x30>
   300ae:	230b      	movs	r3, #11
   300b0:	18fb      	adds	r3, r7, r3
   300b2:	781b      	ldrb	r3, [r3, #0]
   300b4:	2b66      	cmp	r3, #102	; 0x66
   300b6:	d913      	bls.n	300e0 <_is_ip+0x58>
   300b8:	230b      	movs	r3, #11
   300ba:	18fb      	adds	r3, r7, r3
   300bc:	781b      	ldrb	r3, [r3, #0]
   300be:	2b40      	cmp	r3, #64	; 0x40
   300c0:	d904      	bls.n	300cc <_is_ip+0x44>
   300c2:	230b      	movs	r3, #11
   300c4:	18fb      	adds	r3, r7, r3
   300c6:	781b      	ldrb	r3, [r3, #0]
   300c8:	2b46      	cmp	r3, #70	; 0x46
   300ca:	d909      	bls.n	300e0 <_is_ip+0x58>
   300cc:	230b      	movs	r3, #11
   300ce:	18fb      	adds	r3, r7, r3
   300d0:	781b      	ldrb	r3, [r3, #0]
   300d2:	2b3a      	cmp	r3, #58	; 0x3a
   300d4:	d004      	beq.n	300e0 <_is_ip+0x58>
   300d6:	230b      	movs	r3, #11
   300d8:	18fb      	adds	r3, r7, r3
   300da:	781b      	ldrb	r3, [r3, #0]
   300dc:	2b2f      	cmp	r3, #47	; 0x2f
   300de:	d102      	bne.n	300e6 <_is_ip+0x5e>
			isv6 = 1;
   300e0:	2301      	movs	r3, #1
   300e2:	60fb      	str	r3, [r7, #12]
   300e4:	e012      	b.n	3010c <_is_ip+0x84>
		} else if (ch == '.') {
   300e6:	230b      	movs	r3, #11
   300e8:	18fb      	adds	r3, r7, r3
   300ea:	781b      	ldrb	r3, [r3, #0]
   300ec:	2b2e      	cmp	r3, #46	; 0x2e
   300ee:	d104      	bne.n	300fa <_is_ip+0x72>
			if (isv6) {
   300f0:	68fb      	ldr	r3, [r7, #12]
   300f2:	2b00      	cmp	r3, #0
   300f4:	d00a      	beq.n	3010c <_is_ip+0x84>
				return 0;
   300f6:	2300      	movs	r3, #0
   300f8:	e00d      	b.n	30116 <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   300fa:	230b      	movs	r3, #11
   300fc:	18fb      	adds	r3, r7, r3
   300fe:	781b      	ldrb	r3, [r3, #0]
   30100:	2230      	movs	r2, #48	; 0x30
   30102:	4013      	ands	r3, r2
   30104:	2b30      	cmp	r3, #48	; 0x30
   30106:	d001      	beq.n	3010c <_is_ip+0x84>
			return 0;
   30108:	2300      	movs	r3, #0
   3010a:	e004      	b.n	30116 <_is_ip+0x8e>
	while (*host != '\0') {
   3010c:	687b      	ldr	r3, [r7, #4]
   3010e:	781b      	ldrb	r3, [r3, #0]
   30110:	2b00      	cmp	r3, #0
   30112:	d1c0      	bne.n	30096 <_is_ip+0xe>
		}
	}
	return 1;
   30114:	2301      	movs	r3, #1
}
   30116:	0018      	movs	r0, r3
   30118:	46bd      	mov	sp, r7
   3011a:	b004      	add	sp, #16
   3011c:	bd80      	pop	{r7, pc}
	...

00030120 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   30120:	b5b0      	push	{r4, r5, r7, lr}
   30122:	b08e      	sub	sp, #56	; 0x38
   30124:	af00      	add	r7, sp, #0
   30126:	60f8      	str	r0, [r7, #12]
   30128:	60b9      	str	r1, [r7, #8]
   3012a:	603b      	str	r3, [r7, #0]
   3012c:	1dfb      	adds	r3, r7, #7
   3012e:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   30130:	2337      	movs	r3, #55	; 0x37
   30132:	18fb      	adds	r3, r7, r3
   30134:	2200      	movs	r2, #0
   30136:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   30138:	2300      	movs	r3, #0
   3013a:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   3013c:	2300      	movs	r3, #0
   3013e:	633b      	str	r3, [r7, #48]	; 0x30
   30140:	2300      	movs	r3, #0
   30142:	62fb      	str	r3, [r7, #44]	; 0x2c
   30144:	2300      	movs	r3, #0
   30146:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   30148:	68fb      	ldr	r3, [r7, #12]
   3014a:	2b00      	cmp	r3, #0
   3014c:	d102      	bne.n	30154 <http_client_send_request+0x34>
		return -EINVAL;
   3014e:	2316      	movs	r3, #22
   30150:	425b      	negs	r3, r3
   30152:	e145      	b.n	303e0 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   30154:	68fb      	ldr	r3, [r7, #12]
   30156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30158:	2b02      	cmp	r3, #2
   3015a:	d902      	bls.n	30162 <http_client_send_request+0x42>
		return -EBUSY;
   3015c:	2310      	movs	r3, #16
   3015e:	425b      	negs	r3, r3
   30160:	e13e      	b.n	303e0 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   30162:	49a1      	ldr	r1, [pc, #644]	; (303e8 <http_client_send_request+0x2c8>)
   30164:	68bb      	ldr	r3, [r7, #8]
   30166:	2207      	movs	r2, #7
   30168:	0018      	movs	r0, r3
   3016a:	4ba0      	ldr	r3, [pc, #640]	; (303ec <http_client_send_request+0x2cc>)
   3016c:	4798      	blx	r3
   3016e:	1e03      	subs	r3, r0, #0
   30170:	d102      	bne.n	30178 <http_client_send_request+0x58>
		i = 7;
   30172:	2307      	movs	r3, #7
   30174:	633b      	str	r3, [r7, #48]	; 0x30
   30176:	e009      	b.n	3018c <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   30178:	499d      	ldr	r1, [pc, #628]	; (303f0 <http_client_send_request+0x2d0>)
   3017a:	68bb      	ldr	r3, [r7, #8]
   3017c:	2208      	movs	r2, #8
   3017e:	0018      	movs	r0, r3
   30180:	4b9a      	ldr	r3, [pc, #616]	; (303ec <http_client_send_request+0x2cc>)
   30182:	4798      	blx	r3
   30184:	1e03      	subs	r3, r0, #0
   30186:	d101      	bne.n	3018c <http_client_send_request+0x6c>
		i = 8;
   30188:	2308      	movs	r3, #8
   3018a:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   3018c:	68fb      	ldr	r3, [r7, #12]
   3018e:	1c5c      	adds	r4, r3, #1
   30190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30192:	68ba      	ldr	r2, [r7, #8]
   30194:	18d5      	adds	r5, r2, r3
   30196:	68fb      	ldr	r3, [r7, #12]
   30198:	3301      	adds	r3, #1
   3019a:	0018      	movs	r0, r3
   3019c:	4b95      	ldr	r3, [pc, #596]	; (303f4 <http_client_send_request+0x2d4>)
   3019e:	4798      	blx	r3
   301a0:	0003      	movs	r3, r0
   301a2:	001a      	movs	r2, r3
   301a4:	0029      	movs	r1, r5
   301a6:	0020      	movs	r0, r4
   301a8:	4b90      	ldr	r3, [pc, #576]	; (303ec <http_client_send_request+0x2cc>)
   301aa:	4798      	blx	r3
   301ac:	0003      	movs	r3, r0
   301ae:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   301b0:	e00d      	b.n	301ce <http_client_send_request+0xae>
		module->host[j++] = url[i];
   301b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   301b4:	1c5a      	adds	r2, r3, #1
   301b6:	62fa      	str	r2, [r7, #44]	; 0x2c
   301b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   301ba:	68b9      	ldr	r1, [r7, #8]
   301bc:	188a      	adds	r2, r1, r2
   301be:	7811      	ldrb	r1, [r2, #0]
   301c0:	68fa      	ldr	r2, [r7, #12]
   301c2:	18d3      	adds	r3, r2, r3
   301c4:	1c0a      	adds	r2, r1, #0
   301c6:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   301c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   301ca:	3301      	adds	r3, #1
   301cc:	633b      	str	r3, [r7, #48]	; 0x30
   301ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   301d0:	68ba      	ldr	r2, [r7, #8]
   301d2:	18d3      	adds	r3, r2, r3
   301d4:	781b      	ldrb	r3, [r3, #0]
   301d6:	2b00      	cmp	r3, #0
   301d8:	d005      	beq.n	301e6 <http_client_send_request+0xc6>
   301da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   301dc:	68ba      	ldr	r2, [r7, #8]
   301de:	18d3      	adds	r3, r2, r3
   301e0:	781b      	ldrb	r3, [r3, #0]
   301e2:	2b2f      	cmp	r3, #47	; 0x2f
   301e4:	d1e5      	bne.n	301b2 <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   301e6:	68fa      	ldr	r2, [r7, #12]
   301e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   301ea:	18d3      	adds	r3, r2, r3
   301ec:	3301      	adds	r3, #1
   301ee:	2200      	movs	r2, #0
   301f0:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   301f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   301f4:	68ba      	ldr	r2, [r7, #8]
   301f6:	18d3      	adds	r3, r2, r3
   301f8:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   301fa:	68fb      	ldr	r3, [r7, #12]
   301fc:	3301      	adds	r3, #1
   301fe:	781b      	ldrb	r3, [r3, #0]
   30200:	2b00      	cmp	r3, #0
   30202:	d102      	bne.n	3020a <http_client_send_request+0xea>
		return -EINVAL;
   30204:	2316      	movs	r3, #22
   30206:	425b      	negs	r3, r3
   30208:	e0ea      	b.n	303e0 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   3020a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   3020c:	0018      	movs	r0, r3
   3020e:	4b79      	ldr	r3, [pc, #484]	; (303f4 <http_client_send_request+0x2d4>)
   30210:	4798      	blx	r3
   30212:	0003      	movs	r3, r0
   30214:	2b3f      	cmp	r3, #63	; 0x3f
   30216:	d902      	bls.n	3021e <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   30218:	235b      	movs	r3, #91	; 0x5b
   3021a:	425b      	negs	r3, r3
   3021c:	e0e0      	b.n	303e0 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   3021e:	68fb      	ldr	r3, [r7, #12]
   30220:	22d4      	movs	r2, #212	; 0xd4
   30222:	589b      	ldr	r3, [r3, r2]
   30224:	2b00      	cmp	r3, #0
   30226:	d005      	beq.n	30234 <http_client_send_request+0x114>
		free(module->req.ext_header);
   30228:	68fb      	ldr	r3, [r7, #12]
   3022a:	22d4      	movs	r2, #212	; 0xd4
   3022c:	589b      	ldr	r3, [r3, r2]
   3022e:	0018      	movs	r0, r3
   30230:	4b71      	ldr	r3, [pc, #452]	; (303f8 <http_client_send_request+0x2d8>)
   30232:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   30234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   30236:	2b00      	cmp	r3, #0
   30238:	d010      	beq.n	3025c <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   3023a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   3023c:	0018      	movs	r0, r3
   3023e:	4b6f      	ldr	r3, [pc, #444]	; (303fc <http_client_send_request+0x2dc>)
   30240:	4798      	blx	r3
   30242:	0003      	movs	r3, r0
   30244:	0019      	movs	r1, r3
   30246:	68fb      	ldr	r3, [r7, #12]
   30248:	22d4      	movs	r2, #212	; 0xd4
   3024a:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   3024c:	68fb      	ldr	r3, [r7, #12]
   3024e:	22d4      	movs	r2, #212	; 0xd4
   30250:	589b      	ldr	r3, [r3, r2]
   30252:	2b00      	cmp	r3, #0
   30254:	d106      	bne.n	30264 <http_client_send_request+0x144>
			return -ENOMEM;
   30256:	230c      	movs	r3, #12
   30258:	425b      	negs	r3, r3
   3025a:	e0c1      	b.n	303e0 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   3025c:	68fb      	ldr	r3, [r7, #12]
   3025e:	22d4      	movs	r2, #212	; 0xd4
   30260:	2100      	movs	r1, #0
   30262:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   30264:	68fb      	ldr	r3, [r7, #12]
   30266:	2241      	movs	r2, #65	; 0x41
   30268:	5c99      	ldrb	r1, [r3, r2]
   3026a:	2001      	movs	r0, #1
   3026c:	4381      	bics	r1, r0
   3026e:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   30270:	68fb      	ldr	r3, [r7, #12]
   30272:	2200      	movs	r2, #0
   30274:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   30276:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30278:	781b      	ldrb	r3, [r3, #0]
   3027a:	2b2f      	cmp	r3, #47	; 0x2f
   3027c:	d107      	bne.n	3028e <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   3027e:	68fb      	ldr	r3, [r7, #12]
   30280:	3370      	adds	r3, #112	; 0x70
   30282:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30284:	0011      	movs	r1, r2
   30286:	0018      	movs	r0, r3
   30288:	4b5d      	ldr	r3, [pc, #372]	; (30400 <http_client_send_request+0x2e0>)
   3028a:	4798      	blx	r3
   3028c:	e00f      	b.n	302ae <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   3028e:	68fb      	ldr	r3, [r7, #12]
   30290:	2270      	movs	r2, #112	; 0x70
   30292:	212f      	movs	r1, #47	; 0x2f
   30294:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   30296:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30298:	781b      	ldrb	r3, [r3, #0]
   3029a:	2b00      	cmp	r3, #0
   3029c:	d007      	beq.n	302ae <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   3029e:	68fb      	ldr	r3, [r7, #12]
   302a0:	3370      	adds	r3, #112	; 0x70
   302a2:	3301      	adds	r3, #1
   302a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   302a6:	0011      	movs	r1, r2
   302a8:	0018      	movs	r0, r3
   302aa:	4b55      	ldr	r3, [pc, #340]	; (30400 <http_client_send_request+0x2e0>)
   302ac:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   302ae:	683b      	ldr	r3, [r7, #0]
   302b0:	2b00      	cmp	r3, #0
   302b2:	d007      	beq.n	302c4 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   302b4:	68fb      	ldr	r3, [r7, #12]
   302b6:	33b0      	adds	r3, #176	; 0xb0
   302b8:	6839      	ldr	r1, [r7, #0]
   302ba:	2218      	movs	r2, #24
   302bc:	0018      	movs	r0, r3
   302be:	4b51      	ldr	r3, [pc, #324]	; (30404 <http_client_send_request+0x2e4>)
   302c0:	4798      	blx	r3
   302c2:	e006      	b.n	302d2 <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   302c4:	68fb      	ldr	r3, [r7, #12]
   302c6:	33b0      	adds	r3, #176	; 0xb0
   302c8:	2218      	movs	r2, #24
   302ca:	2100      	movs	r1, #0
   302cc:	0018      	movs	r0, r3
   302ce:	4b4e      	ldr	r3, [pc, #312]	; (30408 <http_client_send_request+0x2e8>)
   302d0:	4798      	blx	r3
	}

	module->req.method = method;
   302d2:	68fb      	ldr	r3, [r7, #12]
   302d4:	1dfa      	adds	r2, r7, #7
   302d6:	21c8      	movs	r1, #200	; 0xc8
   302d8:	7812      	ldrb	r2, [r2, #0]
   302da:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   302dc:	68fb      	ldr	r3, [r7, #12]
   302de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   302e0:	2b01      	cmp	r3, #1
   302e2:	d003      	beq.n	302ec <http_client_send_request+0x1cc>
   302e4:	d316      	bcc.n	30314 <http_client_send_request+0x1f4>
   302e6:	2b02      	cmp	r3, #2
   302e8:	d004      	beq.n	302f4 <http_client_send_request+0x1d4>
   302ea:	e074      	b.n	303d6 <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   302ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   302ee:	2b00      	cmp	r3, #0
   302f0:	d100      	bne.n	302f4 <http_client_send_request+0x1d4>
   302f2:	e073      	b.n	303dc <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   302f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   302f6:	2b00      	cmp	r3, #0
   302f8:	d107      	bne.n	3030a <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   302fa:	68fb      	ldr	r3, [r7, #12]
   302fc:	2203      	movs	r2, #3
   302fe:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   30300:	68fb      	ldr	r3, [r7, #12]
   30302:	0018      	movs	r0, r3
   30304:	4b41      	ldr	r3, [pc, #260]	; (3040c <http_client_send_request+0x2ec>)
   30306:	4798      	blx	r3
			break;
   30308:	e069      	b.n	303de <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   3030a:	68fb      	ldr	r3, [r7, #12]
   3030c:	2100      	movs	r1, #0
   3030e:	0018      	movs	r0, r3
   30310:	4b3f      	ldr	r3, [pc, #252]	; (30410 <http_client_send_request+0x2f0>)
   30312:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   30314:	68fb      	ldr	r3, [r7, #12]
   30316:	2252      	movs	r2, #82	; 0x52
   30318:	5c9b      	ldrb	r3, [r3, r2]
   3031a:	2b00      	cmp	r3, #0
   3031c:	d007      	beq.n	3032e <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   3031e:	2337      	movs	r3, #55	; 0x37
   30320:	18fb      	adds	r3, r7, r3
   30322:	2237      	movs	r2, #55	; 0x37
   30324:	18ba      	adds	r2, r7, r2
   30326:	7812      	ldrb	r2, [r2, #0]
   30328:	2101      	movs	r1, #1
   3032a:	430a      	orrs	r2, r1
   3032c:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   3032e:	2337      	movs	r3, #55	; 0x37
   30330:	18fb      	adds	r3, r7, r3
   30332:	781b      	ldrb	r3, [r3, #0]
   30334:	001a      	movs	r2, r3
   30336:	2101      	movs	r1, #1
   30338:	2002      	movs	r0, #2
   3033a:	4b36      	ldr	r3, [pc, #216]	; (30414 <http_client_send_request+0x2f4>)
   3033c:	4798      	blx	r3
   3033e:	0003      	movs	r3, r0
   30340:	001a      	movs	r2, r3
   30342:	68fb      	ldr	r3, [r7, #12]
   30344:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   30346:	68fb      	ldr	r3, [r7, #12]
   30348:	781b      	ldrb	r3, [r3, #0]
   3034a:	b25b      	sxtb	r3, r3
   3034c:	2b00      	cmp	r3, #0
   3034e:	db3f      	blt.n	303d0 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   30350:	68fb      	ldr	r3, [r7, #12]
   30352:	781b      	ldrb	r3, [r3, #0]
   30354:	b25b      	sxtb	r3, r3
   30356:	001a      	movs	r2, r3
   30358:	4b2f      	ldr	r3, [pc, #188]	; (30418 <http_client_send_request+0x2f8>)
   3035a:	0092      	lsls	r2, r2, #2
   3035c:	68f9      	ldr	r1, [r7, #12]
   3035e:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   30360:	68fb      	ldr	r3, [r7, #12]
   30362:	3301      	adds	r3, #1
   30364:	0018      	movs	r0, r3
   30366:	4b2d      	ldr	r3, [pc, #180]	; (3041c <http_client_send_request+0x2fc>)
   30368:	4798      	blx	r3
   3036a:	1e03      	subs	r3, r0, #0
   3036c:	d027      	beq.n	303be <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   3036e:	2314      	movs	r3, #20
   30370:	18fb      	adds	r3, r7, r3
   30372:	2202      	movs	r2, #2
   30374:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   30376:	68fb      	ldr	r3, [r7, #12]
   30378:	2250      	movs	r2, #80	; 0x50
   3037a:	5a9b      	ldrh	r3, [r3, r2]
   3037c:	021b      	lsls	r3, r3, #8
   3037e:	b21a      	sxth	r2, r3
   30380:	68fb      	ldr	r3, [r7, #12]
   30382:	2150      	movs	r1, #80	; 0x50
   30384:	5a5b      	ldrh	r3, [r3, r1]
   30386:	0a1b      	lsrs	r3, r3, #8
   30388:	b29b      	uxth	r3, r3
   3038a:	b21b      	sxth	r3, r3
   3038c:	4313      	orrs	r3, r2
   3038e:	b21b      	sxth	r3, r3
   30390:	b29a      	uxth	r2, r3
   30392:	2314      	movs	r3, #20
   30394:	18fb      	adds	r3, r7, r3
   30396:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   30398:	68fb      	ldr	r3, [r7, #12]
   3039a:	3301      	adds	r3, #1
   3039c:	0018      	movs	r0, r3
   3039e:	4b20      	ldr	r3, [pc, #128]	; (30420 <http_client_send_request+0x300>)
   303a0:	4798      	blx	r3
   303a2:	0002      	movs	r2, r0
   303a4:	2314      	movs	r3, #20
   303a6:	18fb      	adds	r3, r7, r3
   303a8:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   303aa:	68fb      	ldr	r3, [r7, #12]
   303ac:	781b      	ldrb	r3, [r3, #0]
   303ae:	b25b      	sxtb	r3, r3
   303b0:	2214      	movs	r2, #20
   303b2:	18b9      	adds	r1, r7, r2
   303b4:	2210      	movs	r2, #16
   303b6:	0018      	movs	r0, r3
   303b8:	4b1a      	ldr	r3, [pc, #104]	; (30424 <http_client_send_request+0x304>)
   303ba:	4798      	blx	r3
   303bc:	e004      	b.n	303c8 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   303be:	68fb      	ldr	r3, [r7, #12]
   303c0:	3301      	adds	r3, #1
   303c2:	0018      	movs	r0, r3
   303c4:	4b18      	ldr	r3, [pc, #96]	; (30428 <http_client_send_request+0x308>)
   303c6:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   303c8:	68fb      	ldr	r3, [r7, #12]
   303ca:	2201      	movs	r2, #1
   303cc:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   303ce:	e006      	b.n	303de <http_client_send_request+0x2be>
			return -ENOSPC;
   303d0:	231c      	movs	r3, #28
   303d2:	425b      	negs	r3, r3
   303d4:	e004      	b.n	303e0 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   303d6:	230b      	movs	r3, #11
   303d8:	425b      	negs	r3, r3
   303da:	e001      	b.n	303e0 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   303dc:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   303de:	2300      	movs	r3, #0
}
   303e0:	0018      	movs	r0, r3
   303e2:	46bd      	mov	sp, r7
   303e4:	b00e      	add	sp, #56	; 0x38
   303e6:	bdb0      	pop	{r4, r5, r7, pc}
   303e8:	00039678 	.word	0x00039678
   303ec:	00034929 	.word	0x00034929
   303f0:	00039680 	.word	0x00039680
   303f4:	0003491b 	.word	0x0003491b
   303f8:	00034535 	.word	0x00034535
   303fc:	000348e1 	.word	0x000348e1
   30400:	000348d1 	.word	0x000348d1
   30404:	00034549 	.word	0x00034549
   30408:	0003457f 	.word	0x0003457f
   3040c:	00030581 	.word	0x00030581
   30410:	0003042d 	.word	0x0003042d
   30414:	00024611 	.word	0x00024611
   30418:	200046c0 	.word	0x200046c0
   3041c:	00030089 	.word	0x00030089
   30420:	00024d5d 	.word	0x00024d5d
   30424:	00024825 	.word	0x00024825
   30428:	00024e65 	.word	0x00024e65

0003042c <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   3042c:	b580      	push	{r7, lr}
   3042e:	b086      	sub	sp, #24
   30430:	af00      	add	r7, sp, #0
   30432:	6078      	str	r0, [r7, #4]
   30434:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   30436:	687b      	ldr	r3, [r7, #4]
   30438:	22c0      	movs	r2, #192	; 0xc0
   3043a:	589b      	ldr	r3, [r3, r2]
   3043c:	2b00      	cmp	r3, #0
   3043e:	d007      	beq.n	30450 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   30440:	687b      	ldr	r3, [r7, #4]
   30442:	22c0      	movs	r2, #192	; 0xc0
   30444:	589b      	ldr	r3, [r3, r2]
   30446:	687a      	ldr	r2, [r7, #4]
   30448:	21c4      	movs	r1, #196	; 0xc4
   3044a:	5852      	ldr	r2, [r2, r1]
   3044c:	0010      	movs	r0, r2
   3044e:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   30450:	687b      	ldr	r3, [r7, #4]
   30452:	33b0      	adds	r3, #176	; 0xb0
   30454:	2218      	movs	r2, #24
   30456:	2100      	movs	r1, #0
   30458:	0018      	movs	r0, r3
   3045a:	4b24      	ldr	r3, [pc, #144]	; (304ec <_http_client_clear_conn+0xc0>)
   3045c:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   3045e:	687b      	ldr	r3, [r7, #4]
   30460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30462:	2b00      	cmp	r3, #0
   30464:	d005      	beq.n	30472 <_http_client_clear_conn+0x46>
		close(module->sock);
   30466:	687b      	ldr	r3, [r7, #4]
   30468:	781b      	ldrb	r3, [r3, #0]
   3046a:	b25b      	sxtb	r3, r3
   3046c:	0018      	movs	r0, r3
   3046e:	4b20      	ldr	r3, [pc, #128]	; (304f0 <_http_client_clear_conn+0xc4>)
   30470:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   30472:	687b      	ldr	r3, [r7, #4]
   30474:	781b      	ldrb	r3, [r3, #0]
   30476:	b25b      	sxtb	r3, r3
   30478:	001a      	movs	r2, r3
   3047a:	4b1e      	ldr	r3, [pc, #120]	; (304f4 <_http_client_clear_conn+0xc8>)
   3047c:	0092      	lsls	r2, r2, #2
   3047e:	2100      	movs	r1, #0
   30480:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   30482:	687b      	ldr	r3, [r7, #4]
   30484:	336c      	adds	r3, #108	; 0x6c
   30486:	226c      	movs	r2, #108	; 0x6c
   30488:	2100      	movs	r1, #0
   3048a:	0018      	movs	r0, r3
   3048c:	4b17      	ldr	r3, [pc, #92]	; (304ec <_http_client_clear_conn+0xc0>)
   3048e:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   30490:	687b      	ldr	r3, [r7, #4]
   30492:	33d8      	adds	r3, #216	; 0xd8
   30494:	2210      	movs	r2, #16
   30496:	2100      	movs	r1, #0
   30498:	0018      	movs	r0, r3
   3049a:	4b14      	ldr	r3, [pc, #80]	; (304ec <_http_client_clear_conn+0xc0>)
   3049c:	4798      	blx	r3
	module->req.state = STATE_INIT;
   3049e:	687b      	ldr	r3, [r7, #4]
   304a0:	2200      	movs	r2, #0
   304a2:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   304a4:	687b      	ldr	r3, [r7, #4]
   304a6:	22d8      	movs	r2, #216	; 0xd8
   304a8:	2100      	movs	r1, #0
   304aa:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   304ac:	687b      	ldr	r3, [r7, #4]
   304ae:	2241      	movs	r2, #65	; 0x41
   304b0:	5c99      	ldrb	r1, [r3, r2]
   304b2:	2001      	movs	r0, #1
   304b4:	4381      	bics	r1, r0
   304b6:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   304b8:	687b      	ldr	r3, [r7, #4]
   304ba:	2241      	movs	r2, #65	; 0x41
   304bc:	5c99      	ldrb	r1, [r3, r2]
   304be:	2002      	movs	r0, #2
   304c0:	4381      	bics	r1, r0
   304c2:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   304c4:	230c      	movs	r3, #12
   304c6:	18fb      	adds	r3, r7, r3
   304c8:	683a      	ldr	r2, [r7, #0]
   304ca:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   304cc:	687b      	ldr	r3, [r7, #4]
   304ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   304d0:	2b00      	cmp	r3, #0
   304d2:	d006      	beq.n	304e2 <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   304d4:	687b      	ldr	r3, [r7, #4]
   304d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   304d8:	220c      	movs	r2, #12
   304da:	18ba      	adds	r2, r7, r2
   304dc:	6878      	ldr	r0, [r7, #4]
   304de:	2104      	movs	r1, #4
   304e0:	4798      	blx	r3
	}
}
   304e2:	46c0      	nop			; (mov r8, r8)
   304e4:	46bd      	mov	sp, r7
   304e6:	b006      	add	sp, #24
   304e8:	bd80      	pop	{r7, pc}
   304ea:	46c0      	nop			; (mov r8, r8)
   304ec:	0003457f 	.word	0x0003457f
   304f0:	00024c1d 	.word	0x00024c1d
   304f4:	200046c0 	.word	0x200046c0

000304f8 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   304f8:	b590      	push	{r4, r7, lr}
   304fa:	b087      	sub	sp, #28
   304fc:	af00      	add	r7, sp, #0
   304fe:	60f8      	str	r0, [r7, #12]
   30500:	60b9      	str	r1, [r7, #8]
   30502:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   30504:	68fb      	ldr	r3, [r7, #12]
   30506:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   30508:	697b      	ldr	r3, [r7, #20]
   3050a:	2241      	movs	r2, #65	; 0x41
   3050c:	5c99      	ldrb	r1, [r3, r2]
   3050e:	2001      	movs	r0, #1
   30510:	4301      	orrs	r1, r0
   30512:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   30514:	697b      	ldr	r3, [r7, #20]
   30516:	2000      	movs	r0, #0
   30518:	5618      	ldrsb	r0, [r3, r0]
   3051a:	687b      	ldr	r3, [r7, #4]
   3051c:	b29a      	uxth	r2, r3
   3051e:	68b9      	ldr	r1, [r7, #8]
   30520:	2300      	movs	r3, #0
   30522:	4c14      	ldr	r4, [pc, #80]	; (30574 <_http_client_send_wait+0x7c>)
   30524:	47a0      	blx	r4
   30526:	0003      	movs	r3, r0
   30528:	613b      	str	r3, [r7, #16]
   3052a:	693b      	ldr	r3, [r7, #16]
   3052c:	2b00      	cmp	r3, #0
   3052e:	da0f      	bge.n	30550 <_http_client_send_wait+0x58>
		module->sending = 0;
   30530:	697b      	ldr	r3, [r7, #20]
   30532:	2241      	movs	r2, #65	; 0x41
   30534:	5c99      	ldrb	r1, [r3, r2]
   30536:	2001      	movs	r0, #1
   30538:	4381      	bics	r1, r0
   3053a:	5499      	strb	r1, [r3, r2]
		return result;
   3053c:	693b      	ldr	r3, [r7, #16]
   3053e:	e014      	b.n	3056a <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   30540:	2000      	movs	r0, #0
   30542:	4b0d      	ldr	r3, [pc, #52]	; (30578 <_http_client_send_wait+0x80>)
   30544:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   30546:	697b      	ldr	r3, [r7, #20]
   30548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   3054a:	0018      	movs	r0, r3
   3054c:	4b0b      	ldr	r3, [pc, #44]	; (3057c <_http_client_send_wait+0x84>)
   3054e:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   30550:	697b      	ldr	r3, [r7, #20]
   30552:	2241      	movs	r2, #65	; 0x41
   30554:	5c9b      	ldrb	r3, [r3, r2]
   30556:	2201      	movs	r2, #1
   30558:	4013      	ands	r3, r2
   3055a:	b2db      	uxtb	r3, r3
   3055c:	2b00      	cmp	r3, #0
   3055e:	d003      	beq.n	30568 <_http_client_send_wait+0x70>
   30560:	697b      	ldr	r3, [r7, #20]
   30562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30564:	2b02      	cmp	r3, #2
   30566:	d8eb      	bhi.n	30540 <_http_client_send_wait+0x48>
	}

	return 0;
   30568:	2300      	movs	r3, #0
}
   3056a:	0018      	movs	r0, r3
   3056c:	46bd      	mov	sp, r7
   3056e:	b007      	add	sp, #28
   30570:	bd90      	pop	{r4, r7, pc}
   30572:	46c0      	nop			; (mov r8, r8)
   30574:	00024939 	.word	0x00024939
   30578:	00020fe5 	.word	0x00020fe5
   3057c:	00031805 	.word	0x00031805

00030580 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   30580:	b5f0      	push	{r4, r5, r6, r7, lr}
   30582:	46c6      	mov	lr, r8
   30584:	b500      	push	{lr}
   30586:	b0a0      	sub	sp, #128	; 0x80
   30588:	af02      	add	r7, sp, #8
   3058a:	61f8      	str	r0, [r7, #28]
   3058c:	4668      	mov	r0, sp
   3058e:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   30590:	2318      	movs	r3, #24
   30592:	2218      	movs	r2, #24
   30594:	18ba      	adds	r2, r7, r2
   30596:	18d0      	adds	r0, r2, r3
   30598:	4bbd      	ldr	r3, [pc, #756]	; (30890 <_http_client_request+0x310>)
   3059a:	469c      	mov	ip, r3
   3059c:	4663      	mov	r3, ip
   3059e:	cb16      	ldmia	r3!, {r1, r2, r4}
   305a0:	c016      	stmia	r0!, {r1, r2, r4}
   305a2:	469c      	mov	ip, r3
   305a4:	4663      	mov	r3, ip
   305a6:	681b      	ldr	r3, [r3, #0]
   305a8:	469c      	mov	ip, r3
   305aa:	4663      	mov	r3, ip
   305ac:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   305ae:	69f8      	ldr	r0, [r7, #28]
   305b0:	6e40      	ldr	r0, [r0, #100]	; 0x64
   305b2:	4684      	mov	ip, r0
   305b4:	2301      	movs	r3, #1
   305b6:	425b      	negs	r3, r3
   305b8:	4698      	mov	r8, r3
   305ba:	44c4      	add	ip, r8
   305bc:	4663      	mov	r3, ip
   305be:	66fb      	str	r3, [r7, #108]	; 0x6c
   305c0:	6038      	str	r0, [r7, #0]
   305c2:	2300      	movs	r3, #0
   305c4:	607b      	str	r3, [r7, #4]
   305c6:	6839      	ldr	r1, [r7, #0]
   305c8:	687a      	ldr	r2, [r7, #4]
   305ca:	000b      	movs	r3, r1
   305cc:	0f5b      	lsrs	r3, r3, #29
   305ce:	469c      	mov	ip, r3
   305d0:	0013      	movs	r3, r2
   305d2:	00db      	lsls	r3, r3, #3
   305d4:	617b      	str	r3, [r7, #20]
   305d6:	4663      	mov	r3, ip
   305d8:	697c      	ldr	r4, [r7, #20]
   305da:	431c      	orrs	r4, r3
   305dc:	617c      	str	r4, [r7, #20]
   305de:	000b      	movs	r3, r1
   305e0:	00db      	lsls	r3, r3, #3
   305e2:	613b      	str	r3, [r7, #16]
   305e4:	0005      	movs	r5, r0
   305e6:	2200      	movs	r2, #0
   305e8:	0016      	movs	r6, r2
   305ea:	0f6a      	lsrs	r2, r5, #29
   305ec:	00f3      	lsls	r3, r6, #3
   305ee:	60fb      	str	r3, [r7, #12]
   305f0:	68fb      	ldr	r3, [r7, #12]
   305f2:	4313      	orrs	r3, r2
   305f4:	60fb      	str	r3, [r7, #12]
   305f6:	00eb      	lsls	r3, r5, #3
   305f8:	60bb      	str	r3, [r7, #8]
   305fa:	1dc3      	adds	r3, r0, #7
   305fc:	08db      	lsrs	r3, r3, #3
   305fe:	00db      	lsls	r3, r3, #3
   30600:	466a      	mov	r2, sp
   30602:	1ad3      	subs	r3, r2, r3
   30604:	469d      	mov	sp, r3
   30606:	ab02      	add	r3, sp, #8
   30608:	3300      	adds	r3, #0
   3060a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   3060c:	69fb      	ldr	r3, [r7, #28]
   3060e:	2b00      	cmp	r3, #0
   30610:	d100      	bne.n	30614 <_http_client_request+0x94>
   30612:	e346      	b.n	30ca2 <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   30614:	69fb      	ldr	r3, [r7, #28]
   30616:	2241      	movs	r2, #65	; 0x41
   30618:	5c9b      	ldrb	r3, [r3, r2]
   3061a:	2201      	movs	r2, #1
   3061c:	4013      	ands	r3, r2
   3061e:	b2db      	uxtb	r3, r3
   30620:	2b00      	cmp	r3, #0
   30622:	d000      	beq.n	30626 <_http_client_request+0xa6>
   30624:	e33f      	b.n	30ca6 <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   30626:	69fb      	ldr	r3, [r7, #28]
   30628:	33b0      	adds	r3, #176	; 0xb0
   3062a:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   3062c:	69fb      	ldr	r3, [r7, #28]
   3062e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30630:	2b03      	cmp	r3, #3
   30632:	d003      	beq.n	3063c <_http_client_request+0xbc>
   30634:	2b04      	cmp	r3, #4
   30636:	d100      	bne.n	3063a <_http_client_request+0xba>
   30638:	e1b3      	b.n	309a2 <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   3063a:	e32f      	b.n	30c9c <_http_client_request+0x71c>
		module->req.content_length = 0;
   3063c:	69fb      	ldr	r3, [r7, #28]
   3063e:	22cc      	movs	r2, #204	; 0xcc
   30640:	2100      	movs	r1, #0
   30642:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   30644:	69fb      	ldr	r3, [r7, #28]
   30646:	22d0      	movs	r2, #208	; 0xd0
   30648:	2100      	movs	r1, #0
   3064a:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   3064c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   3064e:	69fb      	ldr	r3, [r7, #28]
   30650:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   30652:	4c90      	ldr	r4, [pc, #576]	; (30894 <_http_client_request+0x314>)
   30654:	2334      	movs	r3, #52	; 0x34
   30656:	2018      	movs	r0, #24
   30658:	1838      	adds	r0, r7, r0
   3065a:	18c0      	adds	r0, r0, r3
   3065c:	69fb      	ldr	r3, [r7, #28]
   3065e:	9300      	str	r3, [sp, #0]
   30660:	0023      	movs	r3, r4
   30662:	4c8d      	ldr	r4, [pc, #564]	; (30898 <_http_client_request+0x318>)
   30664:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   30666:	69fb      	ldr	r3, [r7, #28]
   30668:	22c8      	movs	r2, #200	; 0xc8
   3066a:	5c9b      	ldrb	r3, [r3, r2]
   3066c:	2b01      	cmp	r3, #1
   3066e:	d10a      	bne.n	30686 <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   30670:	498a      	ldr	r1, [pc, #552]	; (3089c <_http_client_request+0x31c>)
   30672:	2334      	movs	r3, #52	; 0x34
   30674:	2218      	movs	r2, #24
   30676:	4694      	mov	ip, r2
   30678:	44bc      	add	ip, r7
   3067a:	4463      	add	r3, ip
   3067c:	2204      	movs	r2, #4
   3067e:	0018      	movs	r0, r3
   30680:	4b87      	ldr	r3, [pc, #540]	; (308a0 <_http_client_request+0x320>)
   30682:	4798      	blx	r3
   30684:	e04e      	b.n	30724 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   30686:	69fb      	ldr	r3, [r7, #28]
   30688:	22c8      	movs	r2, #200	; 0xc8
   3068a:	5c9b      	ldrb	r3, [r3, r2]
   3068c:	2b02      	cmp	r3, #2
   3068e:	d10a      	bne.n	306a6 <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   30690:	4984      	ldr	r1, [pc, #528]	; (308a4 <_http_client_request+0x324>)
   30692:	2334      	movs	r3, #52	; 0x34
   30694:	2218      	movs	r2, #24
   30696:	4694      	mov	ip, r2
   30698:	44bc      	add	ip, r7
   3069a:	4463      	add	r3, ip
   3069c:	2205      	movs	r2, #5
   3069e:	0018      	movs	r0, r3
   306a0:	4b7f      	ldr	r3, [pc, #508]	; (308a0 <_http_client_request+0x320>)
   306a2:	4798      	blx	r3
   306a4:	e03e      	b.n	30724 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   306a6:	69fb      	ldr	r3, [r7, #28]
   306a8:	22c8      	movs	r2, #200	; 0xc8
   306aa:	5c9b      	ldrb	r3, [r3, r2]
   306ac:	2b03      	cmp	r3, #3
   306ae:	d10a      	bne.n	306c6 <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   306b0:	497d      	ldr	r1, [pc, #500]	; (308a8 <_http_client_request+0x328>)
   306b2:	2334      	movs	r3, #52	; 0x34
   306b4:	2218      	movs	r2, #24
   306b6:	4694      	mov	ip, r2
   306b8:	44bc      	add	ip, r7
   306ba:	4463      	add	r3, ip
   306bc:	2207      	movs	r2, #7
   306be:	0018      	movs	r0, r3
   306c0:	4b77      	ldr	r3, [pc, #476]	; (308a0 <_http_client_request+0x320>)
   306c2:	4798      	blx	r3
   306c4:	e02e      	b.n	30724 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   306c6:	69fb      	ldr	r3, [r7, #28]
   306c8:	22c8      	movs	r2, #200	; 0xc8
   306ca:	5c9b      	ldrb	r3, [r3, r2]
   306cc:	2b04      	cmp	r3, #4
   306ce:	d10a      	bne.n	306e6 <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   306d0:	4976      	ldr	r1, [pc, #472]	; (308ac <_http_client_request+0x32c>)
   306d2:	2334      	movs	r3, #52	; 0x34
   306d4:	2218      	movs	r2, #24
   306d6:	4694      	mov	ip, r2
   306d8:	44bc      	add	ip, r7
   306da:	4463      	add	r3, ip
   306dc:	2204      	movs	r2, #4
   306de:	0018      	movs	r0, r3
   306e0:	4b6f      	ldr	r3, [pc, #444]	; (308a0 <_http_client_request+0x320>)
   306e2:	4798      	blx	r3
   306e4:	e01e      	b.n	30724 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   306e6:	69fb      	ldr	r3, [r7, #28]
   306e8:	22c8      	movs	r2, #200	; 0xc8
   306ea:	5c9b      	ldrb	r3, [r3, r2]
   306ec:	2b05      	cmp	r3, #5
   306ee:	d10a      	bne.n	30706 <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   306f0:	496f      	ldr	r1, [pc, #444]	; (308b0 <_http_client_request+0x330>)
   306f2:	2334      	movs	r3, #52	; 0x34
   306f4:	2218      	movs	r2, #24
   306f6:	4694      	mov	ip, r2
   306f8:	44bc      	add	ip, r7
   306fa:	4463      	add	r3, ip
   306fc:	2208      	movs	r2, #8
   306fe:	0018      	movs	r0, r3
   30700:	4b67      	ldr	r3, [pc, #412]	; (308a0 <_http_client_request+0x320>)
   30702:	4798      	blx	r3
   30704:	e00e      	b.n	30724 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   30706:	69fb      	ldr	r3, [r7, #28]
   30708:	22c8      	movs	r2, #200	; 0xc8
   3070a:	5c9b      	ldrb	r3, [r3, r2]
   3070c:	2b06      	cmp	r3, #6
   3070e:	d109      	bne.n	30724 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   30710:	4968      	ldr	r1, [pc, #416]	; (308b4 <_http_client_request+0x334>)
   30712:	2334      	movs	r3, #52	; 0x34
   30714:	2218      	movs	r2, #24
   30716:	4694      	mov	ip, r2
   30718:	44bc      	add	ip, r7
   3071a:	4463      	add	r3, ip
   3071c:	2205      	movs	r2, #5
   3071e:	0018      	movs	r0, r3
   30720:	4b5f      	ldr	r3, [pc, #380]	; (308a0 <_http_client_request+0x320>)
   30722:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   30724:	69fb      	ldr	r3, [r7, #28]
   30726:	3370      	adds	r3, #112	; 0x70
   30728:	001c      	movs	r4, r3
   3072a:	69fb      	ldr	r3, [r7, #28]
   3072c:	3370      	adds	r3, #112	; 0x70
   3072e:	0018      	movs	r0, r3
   30730:	4b61      	ldr	r3, [pc, #388]	; (308b8 <_http_client_request+0x338>)
   30732:	4798      	blx	r3
   30734:	0002      	movs	r2, r0
   30736:	2334      	movs	r3, #52	; 0x34
   30738:	2118      	movs	r1, #24
   3073a:	468c      	mov	ip, r1
   3073c:	44bc      	add	ip, r7
   3073e:	4463      	add	r3, ip
   30740:	0021      	movs	r1, r4
   30742:	0018      	movs	r0, r3
   30744:	4b56      	ldr	r3, [pc, #344]	; (308a0 <_http_client_request+0x320>)
   30746:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   30748:	495c      	ldr	r1, [pc, #368]	; (308bc <_http_client_request+0x33c>)
   3074a:	2334      	movs	r3, #52	; 0x34
   3074c:	2218      	movs	r2, #24
   3074e:	4694      	mov	ip, r2
   30750:	44bc      	add	ip, r7
   30752:	4463      	add	r3, ip
   30754:	220b      	movs	r2, #11
   30756:	0018      	movs	r0, r3
   30758:	4b51      	ldr	r3, [pc, #324]	; (308a0 <_http_client_request+0x320>)
   3075a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   3075c:	4958      	ldr	r1, [pc, #352]	; (308c0 <_http_client_request+0x340>)
   3075e:	2334      	movs	r3, #52	; 0x34
   30760:	2218      	movs	r2, #24
   30762:	4694      	mov	ip, r2
   30764:	44bc      	add	ip, r7
   30766:	4463      	add	r3, ip
   30768:	220c      	movs	r2, #12
   3076a:	0018      	movs	r0, r3
   3076c:	4b4c      	ldr	r3, [pc, #304]	; (308a0 <_http_client_request+0x320>)
   3076e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   30770:	69fb      	ldr	r3, [r7, #28]
   30772:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   30774:	69fb      	ldr	r3, [r7, #28]
   30776:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   30778:	0018      	movs	r0, r3
   3077a:	4b4f      	ldr	r3, [pc, #316]	; (308b8 <_http_client_request+0x338>)
   3077c:	4798      	blx	r3
   3077e:	0002      	movs	r2, r0
   30780:	2334      	movs	r3, #52	; 0x34
   30782:	2118      	movs	r1, #24
   30784:	468c      	mov	ip, r1
   30786:	44bc      	add	ip, r7
   30788:	4463      	add	r3, ip
   3078a:	0021      	movs	r1, r4
   3078c:	0018      	movs	r0, r3
   3078e:	4b44      	ldr	r3, [pc, #272]	; (308a0 <_http_client_request+0x320>)
   30790:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   30792:	494c      	ldr	r1, [pc, #304]	; (308c4 <_http_client_request+0x344>)
   30794:	2334      	movs	r3, #52	; 0x34
   30796:	2218      	movs	r2, #24
   30798:	4694      	mov	ip, r2
   3079a:	44bc      	add	ip, r7
   3079c:	4463      	add	r3, ip
   3079e:	2202      	movs	r2, #2
   307a0:	0018      	movs	r0, r3
   307a2:	4b3f      	ldr	r3, [pc, #252]	; (308a0 <_http_client_request+0x320>)
   307a4:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   307a6:	4948      	ldr	r1, [pc, #288]	; (308c8 <_http_client_request+0x348>)
   307a8:	2334      	movs	r3, #52	; 0x34
   307aa:	2218      	movs	r2, #24
   307ac:	4694      	mov	ip, r2
   307ae:	44bc      	add	ip, r7
   307b0:	4463      	add	r3, ip
   307b2:	2206      	movs	r2, #6
   307b4:	0018      	movs	r0, r3
   307b6:	4b3a      	ldr	r3, [pc, #232]	; (308a0 <_http_client_request+0x320>)
   307b8:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   307ba:	69fb      	ldr	r3, [r7, #28]
   307bc:	1c5c      	adds	r4, r3, #1
   307be:	69fb      	ldr	r3, [r7, #28]
   307c0:	3301      	adds	r3, #1
   307c2:	0018      	movs	r0, r3
   307c4:	4b3c      	ldr	r3, [pc, #240]	; (308b8 <_http_client_request+0x338>)
   307c6:	4798      	blx	r3
   307c8:	0002      	movs	r2, r0
   307ca:	2334      	movs	r3, #52	; 0x34
   307cc:	2118      	movs	r1, #24
   307ce:	468c      	mov	ip, r1
   307d0:	44bc      	add	ip, r7
   307d2:	4463      	add	r3, ip
   307d4:	0021      	movs	r1, r4
   307d6:	0018      	movs	r0, r3
   307d8:	4b31      	ldr	r3, [pc, #196]	; (308a0 <_http_client_request+0x320>)
   307da:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   307dc:	4939      	ldr	r1, [pc, #228]	; (308c4 <_http_client_request+0x344>)
   307de:	2334      	movs	r3, #52	; 0x34
   307e0:	2218      	movs	r2, #24
   307e2:	4694      	mov	ip, r2
   307e4:	44bc      	add	ip, r7
   307e6:	4463      	add	r3, ip
   307e8:	2202      	movs	r2, #2
   307ea:	0018      	movs	r0, r3
   307ec:	4b2c      	ldr	r3, [pc, #176]	; (308a0 <_http_client_request+0x320>)
   307ee:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   307f0:	4936      	ldr	r1, [pc, #216]	; (308cc <_http_client_request+0x34c>)
   307f2:	2334      	movs	r3, #52	; 0x34
   307f4:	2218      	movs	r2, #24
   307f6:	4694      	mov	ip, r2
   307f8:	44bc      	add	ip, r7
   307fa:	4463      	add	r3, ip
   307fc:	2218      	movs	r2, #24
   307fe:	0018      	movs	r0, r3
   30800:	4b27      	ldr	r3, [pc, #156]	; (308a0 <_http_client_request+0x320>)
   30802:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   30804:	4932      	ldr	r1, [pc, #200]	; (308d0 <_http_client_request+0x350>)
   30806:	2334      	movs	r3, #52	; 0x34
   30808:	2218      	movs	r2, #24
   3080a:	4694      	mov	ip, r2
   3080c:	44bc      	add	ip, r7
   3080e:	4463      	add	r3, ip
   30810:	2213      	movs	r2, #19
   30812:	0018      	movs	r0, r3
   30814:	4b22      	ldr	r3, [pc, #136]	; (308a0 <_http_client_request+0x320>)
   30816:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   30818:	492e      	ldr	r1, [pc, #184]	; (308d4 <_http_client_request+0x354>)
   3081a:	2334      	movs	r3, #52	; 0x34
   3081c:	2218      	movs	r2, #24
   3081e:	4694      	mov	ip, r2
   30820:	44bc      	add	ip, r7
   30822:	4463      	add	r3, ip
   30824:	2217      	movs	r2, #23
   30826:	0018      	movs	r0, r3
   30828:	4b1d      	ldr	r3, [pc, #116]	; (308a0 <_http_client_request+0x320>)
   3082a:	4798      	blx	r3
		if (entity->read != NULL) {
   3082c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3082e:	68db      	ldr	r3, [r3, #12]
   30830:	2b00      	cmp	r3, #0
   30832:	d100      	bne.n	30836 <_http_client_request+0x2b6>
   30834:	e088      	b.n	30948 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   30836:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30838:	781b      	ldrb	r3, [r3, #0]
   3083a:	2b00      	cmp	r3, #0
   3083c:	d00f      	beq.n	3085e <_http_client_request+0x2de>
				module->req.content_length = -1;
   3083e:	69fb      	ldr	r3, [r7, #28]
   30840:	21cc      	movs	r1, #204	; 0xcc
   30842:	2201      	movs	r2, #1
   30844:	4252      	negs	r2, r2
   30846:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   30848:	4923      	ldr	r1, [pc, #140]	; (308d8 <_http_client_request+0x358>)
   3084a:	2334      	movs	r3, #52	; 0x34
   3084c:	2218      	movs	r2, #24
   3084e:	4694      	mov	ip, r2
   30850:	44bc      	add	ip, r7
   30852:	4463      	add	r3, ip
   30854:	221c      	movs	r2, #28
   30856:	0018      	movs	r0, r3
   30858:	4b11      	ldr	r3, [pc, #68]	; (308a0 <_http_client_request+0x320>)
   3085a:	4798      	blx	r3
   3085c:	e074      	b.n	30948 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   3085e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30860:	689b      	ldr	r3, [r3, #8]
   30862:	2b00      	cmp	r3, #0
   30864:	d070      	beq.n	30948 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   30866:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30868:	689a      	ldr	r2, [r3, #8]
   3086a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3086c:	695b      	ldr	r3, [r3, #20]
   3086e:	0018      	movs	r0, r3
   30870:	4790      	blx	r2
   30872:	0001      	movs	r1, r0
   30874:	69fb      	ldr	r3, [r7, #28]
   30876:	22cc      	movs	r2, #204	; 0xcc
   30878:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   3087a:	69fb      	ldr	r3, [r7, #28]
   3087c:	22cc      	movs	r2, #204	; 0xcc
   3087e:	589b      	ldr	r3, [r3, r2]
   30880:	2b00      	cmp	r3, #0
   30882:	da2b      	bge.n	308dc <_http_client_request+0x35c>
					module->req.content_length = 0;
   30884:	69fb      	ldr	r3, [r7, #28]
   30886:	22cc      	movs	r2, #204	; 0xcc
   30888:	2100      	movs	r1, #0
   3088a:	5099      	str	r1, [r3, r2]
   3088c:	e05c      	b.n	30948 <_http_client_request+0x3c8>
   3088e:	46c0      	nop			; (mov r8, r8)
   30890:	00039768 	.word	0x00039768
   30894:	000304f9 	.word	0x000304f9
   30898:	00031461 	.word	0x00031461
   3089c:	0003968c 	.word	0x0003968c
   308a0:	000314e1 	.word	0x000314e1
   308a4:	00039694 	.word	0x00039694
   308a8:	0003969c 	.word	0x0003969c
   308ac:	000396a4 	.word	0x000396a4
   308b0:	000396ac 	.word	0x000396ac
   308b4:	000396b8 	.word	0x000396b8
   308b8:	0003491b 	.word	0x0003491b
   308bc:	000396c0 	.word	0x000396c0
   308c0:	000396cc 	.word	0x000396cc
   308c4:	000396dc 	.word	0x000396dc
   308c8:	000396e0 	.word	0x000396e0
   308cc:	000396e8 	.word	0x000396e8
   308d0:	00039704 	.word	0x00039704
   308d4:	00039718 	.word	0x00039718
   308d8:	00039730 	.word	0x00039730
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   308dc:	69fb      	ldr	r3, [r7, #28]
   308de:	22cc      	movs	r2, #204	; 0xcc
   308e0:	589b      	ldr	r3, [r3, r2]
   308e2:	001a      	movs	r2, r3
   308e4:	49e0      	ldr	r1, [pc, #896]	; (30c68 <_http_client_request+0x6e8>)
   308e6:	2328      	movs	r3, #40	; 0x28
   308e8:	2018      	movs	r0, #24
   308ea:	4684      	mov	ip, r0
   308ec:	44bc      	add	ip, r7
   308ee:	4463      	add	r3, ip
   308f0:	0018      	movs	r0, r3
   308f2:	4bde      	ldr	r3, [pc, #888]	; (30c6c <_http_client_request+0x6ec>)
   308f4:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   308f6:	49de      	ldr	r1, [pc, #888]	; (30c70 <_http_client_request+0x6f0>)
   308f8:	2334      	movs	r3, #52	; 0x34
   308fa:	2218      	movs	r2, #24
   308fc:	4694      	mov	ip, r2
   308fe:	44bc      	add	ip, r7
   30900:	4463      	add	r3, ip
   30902:	2210      	movs	r2, #16
   30904:	0018      	movs	r0, r3
   30906:	4bdb      	ldr	r3, [pc, #876]	; (30c74 <_http_client_request+0x6f4>)
   30908:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   3090a:	2328      	movs	r3, #40	; 0x28
   3090c:	2218      	movs	r2, #24
   3090e:	4694      	mov	ip, r2
   30910:	44bc      	add	ip, r7
   30912:	4463      	add	r3, ip
   30914:	0018      	movs	r0, r3
   30916:	4bd8      	ldr	r3, [pc, #864]	; (30c78 <_http_client_request+0x6f8>)
   30918:	4798      	blx	r3
   3091a:	0002      	movs	r2, r0
   3091c:	2328      	movs	r3, #40	; 0x28
   3091e:	2118      	movs	r1, #24
   30920:	1879      	adds	r1, r7, r1
   30922:	18c9      	adds	r1, r1, r3
   30924:	2334      	movs	r3, #52	; 0x34
   30926:	2018      	movs	r0, #24
   30928:	4684      	mov	ip, r0
   3092a:	44bc      	add	ip, r7
   3092c:	4463      	add	r3, ip
   3092e:	0018      	movs	r0, r3
   30930:	4bd0      	ldr	r3, [pc, #832]	; (30c74 <_http_client_request+0x6f4>)
   30932:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   30934:	49d1      	ldr	r1, [pc, #836]	; (30c7c <_http_client_request+0x6fc>)
   30936:	2334      	movs	r3, #52	; 0x34
   30938:	2218      	movs	r2, #24
   3093a:	4694      	mov	ip, r2
   3093c:	44bc      	add	ip, r7
   3093e:	4463      	add	r3, ip
   30940:	2202      	movs	r2, #2
   30942:	0018      	movs	r0, r3
   30944:	4bcb      	ldr	r3, [pc, #812]	; (30c74 <_http_client_request+0x6f4>)
   30946:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   30948:	69fb      	ldr	r3, [r7, #28]
   3094a:	22d4      	movs	r2, #212	; 0xd4
   3094c:	589b      	ldr	r3, [r3, r2]
   3094e:	2b00      	cmp	r3, #0
   30950:	d012      	beq.n	30978 <_http_client_request+0x3f8>
				module->req.ext_header,
   30952:	69fb      	ldr	r3, [r7, #28]
   30954:	22d4      	movs	r2, #212	; 0xd4
   30956:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   30958:	69fb      	ldr	r3, [r7, #28]
   3095a:	22d4      	movs	r2, #212	; 0xd4
   3095c:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   3095e:	0018      	movs	r0, r3
   30960:	4bc5      	ldr	r3, [pc, #788]	; (30c78 <_http_client_request+0x6f8>)
   30962:	4798      	blx	r3
   30964:	0002      	movs	r2, r0
   30966:	2334      	movs	r3, #52	; 0x34
   30968:	2118      	movs	r1, #24
   3096a:	468c      	mov	ip, r1
   3096c:	44bc      	add	ip, r7
   3096e:	4463      	add	r3, ip
   30970:	0021      	movs	r1, r4
   30972:	0018      	movs	r0, r3
   30974:	4bbf      	ldr	r3, [pc, #764]	; (30c74 <_http_client_request+0x6f4>)
   30976:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   30978:	49c0      	ldr	r1, [pc, #768]	; (30c7c <_http_client_request+0x6fc>)
   3097a:	2334      	movs	r3, #52	; 0x34
   3097c:	2218      	movs	r2, #24
   3097e:	4694      	mov	ip, r2
   30980:	44bc      	add	ip, r7
   30982:	4463      	add	r3, ip
   30984:	2202      	movs	r2, #2
   30986:	0018      	movs	r0, r3
   30988:	4bba      	ldr	r3, [pc, #744]	; (30c74 <_http_client_request+0x6f4>)
   3098a:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   3098c:	2334      	movs	r3, #52	; 0x34
   3098e:	2218      	movs	r2, #24
   30990:	4694      	mov	ip, r2
   30992:	44bc      	add	ip, r7
   30994:	4463      	add	r3, ip
   30996:	0018      	movs	r0, r3
   30998:	4bb9      	ldr	r3, [pc, #740]	; (30c80 <_http_client_request+0x700>)
   3099a:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   3099c:	69fb      	ldr	r3, [r7, #28]
   3099e:	2204      	movs	r2, #4
   309a0:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   309a2:	69fb      	ldr	r3, [r7, #28]
   309a4:	22cc      	movs	r2, #204	; 0xcc
   309a6:	589b      	ldr	r3, [r3, r2]
   309a8:	2b00      	cmp	r3, #0
   309aa:	db00      	blt.n	309ae <_http_client_request+0x42e>
   309ac:	e0c6      	b.n	30b3c <_http_client_request+0x5bc>
   309ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   309b0:	68db      	ldr	r3, [r3, #12]
   309b2:	2b00      	cmp	r3, #0
   309b4:	d100      	bne.n	309b8 <_http_client_request+0x438>
   309b6:	e0c1      	b.n	30b3c <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   309b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   309ba:	68dc      	ldr	r4, [r3, #12]
   309bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   309be:	6958      	ldr	r0, [r3, #20]
   309c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   309c2:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   309c4:	69fb      	ldr	r3, [r7, #28]
   309c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   309c8:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   309ca:	69fb      	ldr	r3, [r7, #28]
   309cc:	22d0      	movs	r2, #208	; 0xd0
   309ce:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   309d0:	002a      	movs	r2, r5
   309d2:	47a0      	blx	r4
   309d4:	0003      	movs	r3, r0
   309d6:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   309d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   309da:	2b00      	cmp	r3, #0
   309dc:	da01      	bge.n	309e2 <_http_client_request+0x462>
				size = 0;
   309de:	2300      	movs	r3, #0
   309e0:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   309e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   309e4:	220a      	movs	r2, #10
   309e6:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   309e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   309ea:	220d      	movs	r2, #13
   309ec:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   309ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   309f0:	3305      	adds	r3, #5
   309f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
   309f4:	210d      	movs	r1, #13
   309f6:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   309f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   309fa:	3306      	adds	r3, #6
   309fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
   309fe:	210a      	movs	r1, #10
   30a00:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   30a02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30a04:	2b00      	cmp	r3, #0
   30a06:	db14      	blt.n	30a32 <_http_client_request+0x4b2>
				ptr = buffer + 2;
   30a08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30a0a:	3302      	adds	r3, #2
   30a0c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   30a0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30a10:	4a9c      	ldr	r2, [pc, #624]	; (30c84 <_http_client_request+0x704>)
   30a12:	4013      	ands	r3, r2
   30a14:	d504      	bpl.n	30a20 <_http_client_request+0x4a0>
   30a16:	3b01      	subs	r3, #1
   30a18:	2210      	movs	r2, #16
   30a1a:	4252      	negs	r2, r2
   30a1c:	4313      	orrs	r3, r2
   30a1e:	3301      	adds	r3, #1
   30a20:	001a      	movs	r2, r3
   30a22:	2318      	movs	r3, #24
   30a24:	2118      	movs	r1, #24
   30a26:	468c      	mov	ip, r1
   30a28:	44bc      	add	ip, r7
   30a2a:	4463      	add	r3, ip
   30a2c:	5c9a      	ldrb	r2, [r3, r2]
   30a2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   30a30:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   30a32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30a34:	2b0f      	cmp	r3, #15
   30a36:	dd19      	ble.n	30a6c <_http_client_request+0x4ec>
				ptr = buffer + 1;
   30a38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30a3a:	3301      	adds	r3, #1
   30a3c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   30a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30a40:	2b00      	cmp	r3, #0
   30a42:	da00      	bge.n	30a46 <_http_client_request+0x4c6>
   30a44:	330f      	adds	r3, #15
   30a46:	111b      	asrs	r3, r3, #4
   30a48:	001a      	movs	r2, r3
   30a4a:	4b8e      	ldr	r3, [pc, #568]	; (30c84 <_http_client_request+0x704>)
   30a4c:	4013      	ands	r3, r2
   30a4e:	d504      	bpl.n	30a5a <_http_client_request+0x4da>
   30a50:	3b01      	subs	r3, #1
   30a52:	2210      	movs	r2, #16
   30a54:	4252      	negs	r2, r2
   30a56:	4313      	orrs	r3, r2
   30a58:	3301      	adds	r3, #1
   30a5a:	001a      	movs	r2, r3
   30a5c:	2318      	movs	r3, #24
   30a5e:	2118      	movs	r1, #24
   30a60:	468c      	mov	ip, r1
   30a62:	44bc      	add	ip, r7
   30a64:	4463      	add	r3, ip
   30a66:	5c9a      	ldrb	r2, [r3, r2]
   30a68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   30a6a:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   30a6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30a6e:	2bff      	cmp	r3, #255	; 0xff
   30a70:	dd18      	ble.n	30aa4 <_http_client_request+0x524>
				ptr = buffer;
   30a72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30a74:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   30a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30a78:	2b00      	cmp	r3, #0
   30a7a:	da00      	bge.n	30a7e <_http_client_request+0x4fe>
   30a7c:	33ff      	adds	r3, #255	; 0xff
   30a7e:	121b      	asrs	r3, r3, #8
   30a80:	001a      	movs	r2, r3
   30a82:	4b80      	ldr	r3, [pc, #512]	; (30c84 <_http_client_request+0x704>)
   30a84:	4013      	ands	r3, r2
   30a86:	d504      	bpl.n	30a92 <_http_client_request+0x512>
   30a88:	3b01      	subs	r3, #1
   30a8a:	2210      	movs	r2, #16
   30a8c:	4252      	negs	r2, r2
   30a8e:	4313      	orrs	r3, r2
   30a90:	3301      	adds	r3, #1
   30a92:	001a      	movs	r2, r3
   30a94:	2318      	movs	r3, #24
   30a96:	2118      	movs	r1, #24
   30a98:	468c      	mov	ip, r1
   30a9a:	44bc      	add	ip, r7
   30a9c:	4463      	add	r3, ip
   30a9e:	5c9a      	ldrb	r2, [r3, r2]
   30aa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   30aa2:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   30aa4:	69fb      	ldr	r3, [r7, #28]
   30aa6:	2000      	movs	r0, #0
   30aa8:	5618      	ldrsb	r0, [r3, r0]
   30aaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   30aac:	3303      	adds	r3, #3
   30aae:	001a      	movs	r2, r3
   30ab0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30ab2:	1ad3      	subs	r3, r2, r3
   30ab4:	b29a      	uxth	r2, r3
   30ab6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30ab8:	b29b      	uxth	r3, r3
   30aba:	18d3      	adds	r3, r2, r3
   30abc:	b29b      	uxth	r3, r3
   30abe:	3304      	adds	r3, #4
   30ac0:	b29a      	uxth	r2, r3
   30ac2:	6f39      	ldr	r1, [r7, #112]	; 0x70
   30ac4:	2300      	movs	r3, #0
   30ac6:	4c70      	ldr	r4, [pc, #448]	; (30c88 <_http_client_request+0x708>)
   30ac8:	47a0      	blx	r4
   30aca:	0003      	movs	r3, r0
   30acc:	663b      	str	r3, [r7, #96]	; 0x60
   30ace:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   30ad0:	2b00      	cmp	r3, #0
   30ad2:	da07      	bge.n	30ae4 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   30ad4:	2305      	movs	r3, #5
   30ad6:	425a      	negs	r2, r3
   30ad8:	69fb      	ldr	r3, [r7, #28]
   30ada:	0011      	movs	r1, r2
   30adc:	0018      	movs	r0, r3
   30ade:	4b6b      	ldr	r3, [pc, #428]	; (30c8c <_http_client_request+0x70c>)
   30ae0:	4798      	blx	r3
				return;
   30ae2:	e0e1      	b.n	30ca8 <_http_client_request+0x728>
			module->req.sent_length += size;
   30ae4:	69fb      	ldr	r3, [r7, #28]
   30ae6:	22d0      	movs	r2, #208	; 0xd0
   30ae8:	589a      	ldr	r2, [r3, r2]
   30aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30aec:	18d2      	adds	r2, r2, r3
   30aee:	69fb      	ldr	r3, [r7, #28]
   30af0:	21d0      	movs	r1, #208	; 0xd0
   30af2:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   30af4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30af6:	2b00      	cmp	r3, #0
   30af8:	d000      	beq.n	30afc <_http_client_request+0x57c>
   30afa:	e0c9      	b.n	30c90 <_http_client_request+0x710>
				if (module->req.entity.close) {
   30afc:	69fb      	ldr	r3, [r7, #28]
   30afe:	22c0      	movs	r2, #192	; 0xc0
   30b00:	589b      	ldr	r3, [r3, r2]
   30b02:	2b00      	cmp	r3, #0
   30b04:	d007      	beq.n	30b16 <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   30b06:	69fb      	ldr	r3, [r7, #28]
   30b08:	22c0      	movs	r2, #192	; 0xc0
   30b0a:	589b      	ldr	r3, [r3, r2]
   30b0c:	69fa      	ldr	r2, [r7, #28]
   30b0e:	21c4      	movs	r1, #196	; 0xc4
   30b10:	5852      	ldr	r2, [r2, r1]
   30b12:	0010      	movs	r0, r2
   30b14:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   30b16:	69fb      	ldr	r3, [r7, #28]
   30b18:	2202      	movs	r2, #2
   30b1a:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   30b1c:	69fb      	ldr	r3, [r7, #28]
   30b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30b20:	2b00      	cmp	r3, #0
   30b22:	d100      	bne.n	30b26 <_http_client_request+0x5a6>
   30b24:	e0b5      	b.n	30c92 <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   30b26:	69fb      	ldr	r3, [r7, #28]
   30b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30b2a:	220c      	movs	r2, #12
   30b2c:	2118      	movs	r1, #24
   30b2e:	468c      	mov	ip, r1
   30b30:	44bc      	add	ip, r7
   30b32:	4462      	add	r2, ip
   30b34:	69f8      	ldr	r0, [r7, #28]
   30b36:	2101      	movs	r1, #1
   30b38:	4798      	blx	r3
				break;
   30b3a:	e0aa      	b.n	30c92 <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   30b3c:	69fb      	ldr	r3, [r7, #28]
   30b3e:	22cc      	movs	r2, #204	; 0xcc
   30b40:	589b      	ldr	r3, [r3, r2]
   30b42:	2b00      	cmp	r3, #0
   30b44:	dc00      	bgt.n	30b48 <_http_client_request+0x5c8>
   30b46:	e07c      	b.n	30c42 <_http_client_request+0x6c2>
   30b48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30b4a:	68db      	ldr	r3, [r3, #12]
   30b4c:	2b00      	cmp	r3, #0
   30b4e:	d100      	bne.n	30b52 <_http_client_request+0x5d2>
   30b50:	e077      	b.n	30c42 <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   30b52:	69fb      	ldr	r3, [r7, #28]
   30b54:	22d0      	movs	r2, #208	; 0xd0
   30b56:	589a      	ldr	r2, [r3, r2]
   30b58:	69fb      	ldr	r3, [r7, #28]
   30b5a:	21cc      	movs	r1, #204	; 0xcc
   30b5c:	585b      	ldr	r3, [r3, r1]
   30b5e:	429a      	cmp	r2, r3
   30b60:	db1f      	blt.n	30ba2 <_http_client_request+0x622>
				if (module->req.entity.close) {
   30b62:	69fb      	ldr	r3, [r7, #28]
   30b64:	22c0      	movs	r2, #192	; 0xc0
   30b66:	589b      	ldr	r3, [r3, r2]
   30b68:	2b00      	cmp	r3, #0
   30b6a:	d007      	beq.n	30b7c <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   30b6c:	69fb      	ldr	r3, [r7, #28]
   30b6e:	22c0      	movs	r2, #192	; 0xc0
   30b70:	589b      	ldr	r3, [r3, r2]
   30b72:	69fa      	ldr	r2, [r7, #28]
   30b74:	21c4      	movs	r1, #196	; 0xc4
   30b76:	5852      	ldr	r2, [r2, r1]
   30b78:	0010      	movs	r0, r2
   30b7a:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   30b7c:	69fb      	ldr	r3, [r7, #28]
   30b7e:	2202      	movs	r2, #2
   30b80:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   30b82:	69fb      	ldr	r3, [r7, #28]
   30b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30b86:	2b00      	cmp	r3, #0
   30b88:	d100      	bne.n	30b8c <_http_client_request+0x60c>
   30b8a:	e084      	b.n	30c96 <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   30b8c:	69fb      	ldr	r3, [r7, #28]
   30b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30b90:	220c      	movs	r2, #12
   30b92:	2118      	movs	r1, #24
   30b94:	468c      	mov	ip, r1
   30b96:	44bc      	add	ip, r7
   30b98:	4462      	add	r2, ip
   30b9a:	69f8      	ldr	r0, [r7, #28]
   30b9c:	2101      	movs	r1, #1
   30b9e:	4798      	blx	r3
				break;
   30ba0:	e079      	b.n	30c96 <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   30ba2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30ba4:	68dc      	ldr	r4, [r3, #12]
   30ba6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30ba8:	6958      	ldr	r0, [r3, #20]
   30baa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   30bac:	69fb      	ldr	r3, [r7, #28]
   30bae:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   30bb0:	69fb      	ldr	r3, [r7, #28]
   30bb2:	22d0      	movs	r2, #208	; 0xd0
   30bb4:	589b      	ldr	r3, [r3, r2]
   30bb6:	002a      	movs	r2, r5
   30bb8:	47a0      	blx	r4
   30bba:	0003      	movs	r3, r0
   30bbc:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   30bbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30bc0:	2b00      	cmp	r3, #0
   30bc2:	da0d      	bge.n	30be0 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   30bc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30bc6:	2b00      	cmp	r3, #0
   30bc8:	d102      	bne.n	30bd0 <_http_client_request+0x650>
   30bca:	234d      	movs	r3, #77	; 0x4d
   30bcc:	425b      	negs	r3, r3
   30bce:	e001      	b.n	30bd4 <_http_client_request+0x654>
   30bd0:	2305      	movs	r3, #5
   30bd2:	425b      	negs	r3, r3
   30bd4:	69fa      	ldr	r2, [r7, #28]
   30bd6:	0019      	movs	r1, r3
   30bd8:	0010      	movs	r0, r2
   30bda:	4b2c      	ldr	r3, [pc, #176]	; (30c8c <_http_client_request+0x70c>)
   30bdc:	4798      	blx	r3
			if (size < 0) {
   30bde:	e057      	b.n	30c90 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   30be0:	69fb      	ldr	r3, [r7, #28]
   30be2:	22cc      	movs	r2, #204	; 0xcc
   30be4:	589a      	ldr	r2, [r3, r2]
   30be6:	69fb      	ldr	r3, [r7, #28]
   30be8:	21d0      	movs	r1, #208	; 0xd0
   30bea:	585b      	ldr	r3, [r3, r1]
   30bec:	1ad2      	subs	r2, r2, r3
   30bee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30bf0:	429a      	cmp	r2, r3
   30bf2:	da07      	bge.n	30c04 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   30bf4:	69fb      	ldr	r3, [r7, #28]
   30bf6:	22cc      	movs	r2, #204	; 0xcc
   30bf8:	589a      	ldr	r2, [r3, r2]
   30bfa:	69fb      	ldr	r3, [r7, #28]
   30bfc:	21d0      	movs	r1, #208	; 0xd0
   30bfe:	585b      	ldr	r3, [r3, r1]
   30c00:	1ad3      	subs	r3, r2, r3
   30c02:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   30c04:	69fb      	ldr	r3, [r7, #28]
   30c06:	2000      	movs	r0, #0
   30c08:	5618      	ldrsb	r0, [r3, r0]
   30c0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   30c0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30c0e:	b29a      	uxth	r2, r3
   30c10:	2300      	movs	r3, #0
   30c12:	4c1d      	ldr	r4, [pc, #116]	; (30c88 <_http_client_request+0x708>)
   30c14:	47a0      	blx	r4
   30c16:	0003      	movs	r3, r0
   30c18:	663b      	str	r3, [r7, #96]	; 0x60
   30c1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   30c1c:	2b00      	cmp	r3, #0
   30c1e:	da07      	bge.n	30c30 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   30c20:	2305      	movs	r3, #5
   30c22:	425a      	negs	r2, r3
   30c24:	69fb      	ldr	r3, [r7, #28]
   30c26:	0011      	movs	r1, r2
   30c28:	0018      	movs	r0, r3
   30c2a:	4b18      	ldr	r3, [pc, #96]	; (30c8c <_http_client_request+0x70c>)
   30c2c:	4798      	blx	r3
					return;
   30c2e:	e03b      	b.n	30ca8 <_http_client_request+0x728>
				module->req.sent_length += size;
   30c30:	69fb      	ldr	r3, [r7, #28]
   30c32:	22d0      	movs	r2, #208	; 0xd0
   30c34:	589a      	ldr	r2, [r3, r2]
   30c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30c38:	18d2      	adds	r2, r2, r3
   30c3a:	69fb      	ldr	r3, [r7, #28]
   30c3c:	21d0      	movs	r1, #208	; 0xd0
   30c3e:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   30c40:	e026      	b.n	30c90 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   30c42:	69fb      	ldr	r3, [r7, #28]
   30c44:	2202      	movs	r2, #2
   30c46:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   30c48:	69fb      	ldr	r3, [r7, #28]
   30c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30c4c:	2b00      	cmp	r3, #0
   30c4e:	d024      	beq.n	30c9a <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   30c50:	69fb      	ldr	r3, [r7, #28]
   30c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30c54:	220c      	movs	r2, #12
   30c56:	2118      	movs	r1, #24
   30c58:	468c      	mov	ip, r1
   30c5a:	44bc      	add	ip, r7
   30c5c:	4462      	add	r2, ip
   30c5e:	69f8      	ldr	r0, [r7, #28]
   30c60:	2101      	movs	r1, #1
   30c62:	4798      	blx	r3
			break;
   30c64:	e019      	b.n	30c9a <_http_client_request+0x71a>
   30c66:	46c0      	nop			; (mov r8, r8)
   30c68:	00039750 	.word	0x00039750
   30c6c:	0003483d 	.word	0x0003483d
   30c70:	00039754 	.word	0x00039754
   30c74:	000314e1 	.word	0x000314e1
   30c78:	0003491b 	.word	0x0003491b
   30c7c:	000396dc 	.word	0x000396dc
   30c80:	0003151d 	.word	0x0003151d
   30c84:	8000000f 	.word	0x8000000f
   30c88:	00024939 	.word	0x00024939
   30c8c:	0003042d 	.word	0x0003042d
		break;
   30c90:	e004      	b.n	30c9c <_http_client_request+0x71c>
				break;
   30c92:	46c0      	nop			; (mov r8, r8)
   30c94:	e002      	b.n	30c9c <_http_client_request+0x71c>
				break;
   30c96:	46c0      	nop			; (mov r8, r8)
   30c98:	e000      	b.n	30c9c <_http_client_request+0x71c>
			break;
   30c9a:	46c0      	nop			; (mov r8, r8)
   30c9c:	69bb      	ldr	r3, [r7, #24]
   30c9e:	469d      	mov	sp, r3
   30ca0:	e004      	b.n	30cac <_http_client_request+0x72c>
		return;
   30ca2:	46c0      	nop			; (mov r8, r8)
   30ca4:	e000      	b.n	30ca8 <_http_client_request+0x728>
		return;
   30ca6:	46c0      	nop			; (mov r8, r8)
   30ca8:	69bb      	ldr	r3, [r7, #24]
   30caa:	469d      	mov	sp, r3
	}
}
   30cac:	46bd      	mov	sp, r7
   30cae:	b01e      	add	sp, #120	; 0x78
   30cb0:	bc04      	pop	{r2}
   30cb2:	4690      	mov	r8, r2
   30cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30cb6:	46c0      	nop			; (mov r8, r8)

00030cb8 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   30cb8:	b590      	push	{r4, r7, lr}
   30cba:	b083      	sub	sp, #12
   30cbc:	af00      	add	r7, sp, #0
   30cbe:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   30cc0:	687b      	ldr	r3, [r7, #4]
   30cc2:	2b00      	cmp	r3, #0
   30cc4:	d021      	beq.n	30d0a <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   30cc6:	687b      	ldr	r3, [r7, #4]
   30cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   30cca:	687b      	ldr	r3, [r7, #4]
   30ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   30cce:	429a      	cmp	r2, r3
   30cd0:	d307      	bcc.n	30ce2 <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   30cd2:	238b      	movs	r3, #139	; 0x8b
   30cd4:	425a      	negs	r2, r3
   30cd6:	687b      	ldr	r3, [r7, #4]
   30cd8:	0011      	movs	r1, r2
   30cda:	0018      	movs	r0, r3
   30cdc:	4b0d      	ldr	r3, [pc, #52]	; (30d14 <_http_client_recv_packet+0x5c>)
   30cde:	4798      	blx	r3
		return;
   30ce0:	e014      	b.n	30d0c <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   30ce2:	687b      	ldr	r3, [r7, #4]
   30ce4:	2000      	movs	r0, #0
   30ce6:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   30ce8:	687b      	ldr	r3, [r7, #4]
   30cea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   30cec:	687b      	ldr	r3, [r7, #4]
   30cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   30cf0:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   30cf2:	687b      	ldr	r3, [r7, #4]
   30cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   30cf6:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   30cf8:	687b      	ldr	r3, [r7, #4]
   30cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   30cfc:	b29b      	uxth	r3, r3
   30cfe:	1ad3      	subs	r3, r2, r3
   30d00:	b29a      	uxth	r2, r3
   30d02:	2300      	movs	r3, #0
   30d04:	4c04      	ldr	r4, [pc, #16]	; (30d18 <_http_client_recv_packet+0x60>)
   30d06:	47a0      	blx	r4
   30d08:	e000      	b.n	30d0c <_http_client_recv_packet+0x54>
		return;
   30d0a:	46c0      	nop			; (mov r8, r8)
}
   30d0c:	46bd      	mov	sp, r7
   30d0e:	b003      	add	sp, #12
   30d10:	bd90      	pop	{r4, r7, pc}
   30d12:	46c0      	nop			; (mov r8, r8)
   30d14:	0003042d 	.word	0x0003042d
   30d18:	00024a9d 	.word	0x00024a9d

00030d1c <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   30d1c:	b580      	push	{r7, lr}
   30d1e:	b082      	sub	sp, #8
   30d20:	af00      	add	r7, sp, #0
   30d22:	6078      	str	r0, [r7, #4]
   30d24:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   30d26:	687b      	ldr	r3, [r7, #4]
   30d28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   30d2a:	683b      	ldr	r3, [r7, #0]
   30d2c:	18d2      	adds	r2, r2, r3
   30d2e:	687b      	ldr	r3, [r7, #4]
   30d30:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   30d32:	687b      	ldr	r3, [r7, #4]
   30d34:	2258      	movs	r2, #88	; 0x58
   30d36:	5a9b      	ldrh	r3, [r3, r2]
   30d38:	2b00      	cmp	r3, #0
   30d3a:	d007      	beq.n	30d4c <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   30d3c:	687b      	ldr	r3, [r7, #4]
   30d3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   30d40:	687b      	ldr	r3, [r7, #4]
   30d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30d44:	0019      	movs	r1, r3
   30d46:	0010      	movs	r0, r2
   30d48:	4b06      	ldr	r3, [pc, #24]	; (30d64 <_http_client_recved_packet+0x48>)
   30d4a:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   30d4c:	46c0      	nop			; (mov r8, r8)
   30d4e:	687b      	ldr	r3, [r7, #4]
   30d50:	0018      	movs	r0, r3
   30d52:	4b05      	ldr	r3, [pc, #20]	; (30d68 <_http_client_recved_packet+0x4c>)
   30d54:	4798      	blx	r3
   30d56:	1e03      	subs	r3, r0, #0
   30d58:	d1f9      	bne.n	30d4e <_http_client_recved_packet+0x32>
}
   30d5a:	46c0      	nop			; (mov r8, r8)
   30d5c:	46bd      	mov	sp, r7
   30d5e:	b002      	add	sp, #8
   30d60:	bd80      	pop	{r7, pc}
   30d62:	46c0      	nop			; (mov r8, r8)
   30d64:	000317d9 	.word	0x000317d9
   30d68:	00030d6d 	.word	0x00030d6d

00030d6c <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   30d6c:	b580      	push	{r7, lr}
   30d6e:	b082      	sub	sp, #8
   30d70:	af00      	add	r7, sp, #0
   30d72:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   30d74:	687b      	ldr	r3, [r7, #4]
   30d76:	22d8      	movs	r2, #216	; 0xd8
   30d78:	589b      	ldr	r3, [r3, r2]
   30d7a:	2b00      	cmp	r3, #0
   30d7c:	d002      	beq.n	30d84 <_http_client_handle_response+0x18>
   30d7e:	2b01      	cmp	r3, #1
   30d80:	d006      	beq.n	30d90 <_http_client_handle_response+0x24>
   30d82:	e00b      	b.n	30d9c <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   30d84:	687b      	ldr	r3, [r7, #4]
   30d86:	0018      	movs	r0, r3
   30d88:	4b07      	ldr	r3, [pc, #28]	; (30da8 <_http_client_handle_response+0x3c>)
   30d8a:	4798      	blx	r3
   30d8c:	0003      	movs	r3, r0
   30d8e:	e006      	b.n	30d9e <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   30d90:	687b      	ldr	r3, [r7, #4]
   30d92:	0018      	movs	r0, r3
   30d94:	4b05      	ldr	r3, [pc, #20]	; (30dac <_http_client_handle_response+0x40>)
   30d96:	4798      	blx	r3
   30d98:	0003      	movs	r3, r0
   30d9a:	e000      	b.n	30d9e <_http_client_handle_response+0x32>
	}
	return 0;
   30d9c:	2300      	movs	r3, #0
}
   30d9e:	0018      	movs	r0, r3
   30da0:	46bd      	mov	sp, r7
   30da2:	b002      	add	sp, #8
   30da4:	bd80      	pop	{r7, pc}
   30da6:	46c0      	nop			; (mov r8, r8)
   30da8:	00030db1 	.word	0x00030db1
   30dac:	00031269 	.word	0x00031269

00030db0 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   30db0:	b590      	push	{r4, r7, lr}
   30db2:	b08b      	sub	sp, #44	; 0x2c
   30db4:	af00      	add	r7, sp, #0
   30db6:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   30db8:	687b      	ldr	r3, [r7, #4]
   30dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   30dbc:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   30dbe:	4b9a      	ldr	r3, [pc, #616]	; (31028 <_http_client_handle_header+0x278>)
   30dc0:	681a      	ldr	r2, [r3, #0]
   30dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30dc4:	0011      	movs	r1, r2
   30dc6:	0018      	movs	r0, r3
   30dc8:	4b98      	ldr	r3, [pc, #608]	; (3102c <_http_client_handle_header+0x27c>)
   30dca:	4798      	blx	r3
   30dcc:	0003      	movs	r3, r0
   30dce:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   30dd0:	69bb      	ldr	r3, [r7, #24]
   30dd2:	2b00      	cmp	r3, #0
   30dd4:	d007      	beq.n	30de6 <_http_client_handle_header+0x36>
   30dd6:	687b      	ldr	r3, [r7, #4]
   30dd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   30dda:	687b      	ldr	r3, [r7, #4]
   30ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   30dde:	18d2      	adds	r2, r2, r3
   30de0:	69bb      	ldr	r3, [r7, #24]
   30de2:	429a      	cmp	r2, r3
   30de4:	d807      	bhi.n	30df6 <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   30de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30de8:	687b      	ldr	r3, [r7, #4]
   30dea:	0011      	movs	r1, r2
   30dec:	0018      	movs	r0, r3
   30dee:	4b90      	ldr	r3, [pc, #576]	; (31030 <_http_client_handle_header+0x280>)
   30df0:	4798      	blx	r3
			return 0;
   30df2:	2300      	movs	r3, #0
   30df4:	e114      	b.n	31020 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   30df6:	4b8c      	ldr	r3, [pc, #560]	; (31028 <_http_client_handle_header+0x278>)
   30df8:	681c      	ldr	r4, [r3, #0]
   30dfa:	4b8b      	ldr	r3, [pc, #556]	; (31028 <_http_client_handle_header+0x278>)
   30dfc:	681b      	ldr	r3, [r3, #0]
   30dfe:	0018      	movs	r0, r3
   30e00:	4b8c      	ldr	r3, [pc, #560]	; (31034 <_http_client_handle_header+0x284>)
   30e02:	4798      	blx	r3
   30e04:	0002      	movs	r2, r0
   30e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30e08:	0021      	movs	r1, r4
   30e0a:	0018      	movs	r0, r3
   30e0c:	4b8a      	ldr	r3, [pc, #552]	; (31038 <_http_client_handle_header+0x288>)
   30e0e:	4798      	blx	r3
   30e10:	1e03      	subs	r3, r0, #0
   30e12:	d15d      	bne.n	30ed0 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   30e14:	4b84      	ldr	r3, [pc, #528]	; (31028 <_http_client_handle_header+0x278>)
   30e16:	681b      	ldr	r3, [r3, #0]
   30e18:	0018      	movs	r0, r3
   30e1a:	4b86      	ldr	r3, [pc, #536]	; (31034 <_http_client_handle_header+0x284>)
   30e1c:	4798      	blx	r3
   30e1e:	0002      	movs	r2, r0
   30e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30e22:	189a      	adds	r2, r3, r2
   30e24:	687b      	ldr	r3, [r7, #4]
   30e26:	0011      	movs	r1, r2
   30e28:	0018      	movs	r0, r3
   30e2a:	4b81      	ldr	r3, [pc, #516]	; (31030 <_http_client_handle_header+0x280>)
   30e2c:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   30e2e:	687b      	ldr	r3, [r7, #4]
   30e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30e32:	2b00      	cmp	r3, #0
   30e34:	d046      	beq.n	30ec4 <_http_client_handle_header+0x114>
   30e36:	687b      	ldr	r3, [r7, #4]
   30e38:	22e4      	movs	r2, #228	; 0xe4
   30e3a:	5a9b      	ldrh	r3, [r3, r2]
   30e3c:	2b00      	cmp	r3, #0
   30e3e:	d041      	beq.n	30ec4 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   30e40:	687b      	ldr	r3, [r7, #4]
   30e42:	22dc      	movs	r2, #220	; 0xdc
   30e44:	589b      	ldr	r3, [r3, r2]
   30e46:	2b00      	cmp	r3, #0
   30e48:	da19      	bge.n	30e7e <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   30e4a:	687b      	ldr	r3, [r7, #4]
   30e4c:	22e4      	movs	r2, #228	; 0xe4
   30e4e:	5a9a      	ldrh	r2, [r3, r2]
   30e50:	230c      	movs	r3, #12
   30e52:	18fb      	adds	r3, r7, r3
   30e54:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   30e56:	230c      	movs	r3, #12
   30e58:	18fb      	adds	r3, r7, r3
   30e5a:	2201      	movs	r2, #1
   30e5c:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   30e5e:	687b      	ldr	r3, [r7, #4]
   30e60:	22e0      	movs	r2, #224	; 0xe0
   30e62:	2100      	movs	r1, #0
   30e64:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   30e66:	230c      	movs	r3, #12
   30e68:	18fb      	adds	r3, r7, r3
   30e6a:	2200      	movs	r2, #0
   30e6c:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   30e6e:	687b      	ldr	r3, [r7, #4]
   30e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30e72:	220c      	movs	r2, #12
   30e74:	18ba      	adds	r2, r7, r2
   30e76:	6878      	ldr	r0, [r7, #4]
   30e78:	2102      	movs	r1, #2
   30e7a:	4798      	blx	r3
   30e7c:	e022      	b.n	30ec4 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   30e7e:	687b      	ldr	r3, [r7, #4]
   30e80:	22dc      	movs	r2, #220	; 0xdc
   30e82:	589a      	ldr	r2, [r3, r2]
   30e84:	687b      	ldr	r3, [r7, #4]
   30e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   30e88:	429a      	cmp	r2, r3
   30e8a:	dd1b      	ble.n	30ec4 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   30e8c:	687b      	ldr	r3, [r7, #4]
   30e8e:	22e4      	movs	r2, #228	; 0xe4
   30e90:	5a9a      	ldrh	r2, [r3, r2]
   30e92:	230c      	movs	r3, #12
   30e94:	18fb      	adds	r3, r7, r3
   30e96:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   30e98:	687b      	ldr	r3, [r7, #4]
   30e9a:	22dc      	movs	r2, #220	; 0xdc
   30e9c:	589b      	ldr	r3, [r3, r2]
   30e9e:	001a      	movs	r2, r3
   30ea0:	230c      	movs	r3, #12
   30ea2:	18fb      	adds	r3, r7, r3
   30ea4:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   30ea6:	230c      	movs	r3, #12
   30ea8:	18fb      	adds	r3, r7, r3
   30eaa:	2200      	movs	r2, #0
   30eac:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   30eae:	687b      	ldr	r3, [r7, #4]
   30eb0:	22e0      	movs	r2, #224	; 0xe0
   30eb2:	2100      	movs	r1, #0
   30eb4:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   30eb6:	687b      	ldr	r3, [r7, #4]
   30eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30eba:	220c      	movs	r2, #12
   30ebc:	18ba      	adds	r2, r7, r2
   30ebe:	6878      	ldr	r0, [r7, #4]
   30ec0:	2102      	movs	r1, #2
   30ec2:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   30ec4:	687b      	ldr	r3, [r7, #4]
   30ec6:	22d8      	movs	r2, #216	; 0xd8
   30ec8:	2101      	movs	r1, #1
   30eca:	5099      	str	r1, [r3, r2]
			return 1;
   30ecc:	2301      	movs	r3, #1
   30ece:	e0a7      	b.n	31020 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   30ed0:	495a      	ldr	r1, [pc, #360]	; (3103c <_http_client_handle_header+0x28c>)
   30ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30ed4:	2210      	movs	r2, #16
   30ed6:	0018      	movs	r0, r3
   30ed8:	4b57      	ldr	r3, [pc, #348]	; (31038 <_http_client_handle_header+0x288>)
   30eda:	4798      	blx	r3
   30edc:	1e03      	subs	r3, r0, #0
   30ede:	d109      	bne.n	30ef4 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   30ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30ee2:	3310      	adds	r3, #16
   30ee4:	0018      	movs	r0, r3
   30ee6:	4b56      	ldr	r3, [pc, #344]	; (31040 <_http_client_handle_header+0x290>)
   30ee8:	4798      	blx	r3
   30eea:	0001      	movs	r1, r0
   30eec:	687b      	ldr	r3, [r7, #4]
   30eee:	22dc      	movs	r2, #220	; 0xdc
   30ef0:	5099      	str	r1, [r3, r2]
   30ef2:	e08b      	b.n	3100c <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   30ef4:	4953      	ldr	r1, [pc, #332]	; (31044 <_http_client_handle_header+0x294>)
   30ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30ef8:	2213      	movs	r2, #19
   30efa:	0018      	movs	r0, r3
   30efc:	4b4e      	ldr	r3, [pc, #312]	; (31038 <_http_client_handle_header+0x288>)
   30efe:	4798      	blx	r3
   30f00:	1e03      	subs	r3, r0, #0
   30f02:	d127      	bne.n	30f54 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   30f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30f06:	3313      	adds	r3, #19
   30f08:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   30f0a:	e01e      	b.n	30f4a <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   30f0c:	6a3b      	ldr	r3, [r7, #32]
   30f0e:	781b      	ldrb	r3, [r3, #0]
   30f10:	2b20      	cmp	r3, #32
   30f12:	d103      	bne.n	30f1c <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   30f14:	6a3b      	ldr	r3, [r7, #32]
   30f16:	3301      	adds	r3, #1
   30f18:	623b      	str	r3, [r7, #32]
   30f1a:	e016      	b.n	30f4a <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   30f1c:	6a3b      	ldr	r3, [r7, #32]
   30f1e:	781b      	ldrb	r3, [r3, #0]
   30f20:	2b43      	cmp	r3, #67	; 0x43
   30f22:	d003      	beq.n	30f2c <_http_client_handle_header+0x17c>
   30f24:	6a3b      	ldr	r3, [r7, #32]
   30f26:	781b      	ldrb	r3, [r3, #0]
   30f28:	2b63      	cmp	r3, #99	; 0x63
   30f2a:	d105      	bne.n	30f38 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   30f2c:	687b      	ldr	r3, [r7, #4]
   30f2e:	21cc      	movs	r1, #204	; 0xcc
   30f30:	2201      	movs	r2, #1
   30f32:	4252      	negs	r2, r2
   30f34:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   30f36:	e069      	b.n	3100c <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   30f38:	2386      	movs	r3, #134	; 0x86
   30f3a:	425a      	negs	r2, r3
   30f3c:	687b      	ldr	r3, [r7, #4]
   30f3e:	0011      	movs	r1, r2
   30f40:	0018      	movs	r0, r3
   30f42:	4b41      	ldr	r3, [pc, #260]	; (31048 <_http_client_handle_header+0x298>)
   30f44:	4798      	blx	r3
					return 0;
   30f46:	2300      	movs	r3, #0
   30f48:	e06a      	b.n	31020 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   30f4a:	69ba      	ldr	r2, [r7, #24]
   30f4c:	6a3b      	ldr	r3, [r7, #32]
   30f4e:	429a      	cmp	r2, r3
   30f50:	d8dc      	bhi.n	30f0c <_http_client_handle_header+0x15c>
   30f52:	e05b      	b.n	3100c <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   30f54:	493d      	ldr	r1, [pc, #244]	; (3104c <_http_client_handle_header+0x29c>)
   30f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30f58:	220c      	movs	r2, #12
   30f5a:	0018      	movs	r0, r3
   30f5c:	4b36      	ldr	r3, [pc, #216]	; (31038 <_http_client_handle_header+0x288>)
   30f5e:	4798      	blx	r3
   30f60:	1e03      	subs	r3, r0, #0
   30f62:	d126      	bne.n	30fb2 <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   30f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30f66:	330c      	adds	r3, #12
   30f68:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   30f6a:	e01d      	b.n	30fa8 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   30f6c:	69fb      	ldr	r3, [r7, #28]
   30f6e:	781b      	ldrb	r3, [r3, #0]
   30f70:	2b20      	cmp	r3, #32
   30f72:	d103      	bne.n	30f7c <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   30f74:	69fb      	ldr	r3, [r7, #28]
   30f76:	3301      	adds	r3, #1
   30f78:	61fb      	str	r3, [r7, #28]
   30f7a:	e015      	b.n	30fa8 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   30f7c:	69fb      	ldr	r3, [r7, #28]
   30f7e:	781b      	ldrb	r3, [r3, #0]
   30f80:	2b4b      	cmp	r3, #75	; 0x4b
   30f82:	d003      	beq.n	30f8c <_http_client_handle_header+0x1dc>
   30f84:	69fb      	ldr	r3, [r7, #28]
   30f86:	781b      	ldrb	r3, [r3, #0]
   30f88:	2b6b      	cmp	r3, #107	; 0x6b
   30f8a:	d106      	bne.n	30f9a <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   30f8c:	687b      	ldr	r3, [r7, #4]
   30f8e:	2241      	movs	r2, #65	; 0x41
   30f90:	5c99      	ldrb	r1, [r3, r2]
   30f92:	2002      	movs	r0, #2
   30f94:	4301      	orrs	r1, r0
   30f96:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   30f98:	e038      	b.n	3100c <_http_client_handle_header+0x25c>
					module->permanent = 0;
   30f9a:	687b      	ldr	r3, [r7, #4]
   30f9c:	2241      	movs	r2, #65	; 0x41
   30f9e:	5c99      	ldrb	r1, [r3, r2]
   30fa0:	2002      	movs	r0, #2
   30fa2:	4381      	bics	r1, r0
   30fa4:	5499      	strb	r1, [r3, r2]
				break;
   30fa6:	e031      	b.n	3100c <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   30fa8:	69ba      	ldr	r2, [r7, #24]
   30faa:	69fb      	ldr	r3, [r7, #28]
   30fac:	429a      	cmp	r2, r3
   30fae:	d8dd      	bhi.n	30f6c <_http_client_handle_header+0x1bc>
   30fb0:	e02c      	b.n	3100c <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   30fb2:	4927      	ldr	r1, [pc, #156]	; (31050 <_http_client_handle_header+0x2a0>)
   30fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30fb6:	2205      	movs	r2, #5
   30fb8:	0018      	movs	r0, r3
   30fba:	4b1f      	ldr	r3, [pc, #124]	; (31038 <_http_client_handle_header+0x288>)
   30fbc:	4798      	blx	r3
   30fbe:	1e03      	subs	r3, r0, #0
   30fc0:	d124      	bne.n	3100c <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   30fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30fc4:	3309      	adds	r3, #9
   30fc6:	0018      	movs	r0, r3
   30fc8:	4b1d      	ldr	r3, [pc, #116]	; (31040 <_http_client_handle_header+0x290>)
   30fca:	4798      	blx	r3
   30fcc:	0003      	movs	r3, r0
   30fce:	b299      	uxth	r1, r3
   30fd0:	687b      	ldr	r3, [r7, #4]
   30fd2:	22e4      	movs	r2, #228	; 0xe4
   30fd4:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   30fd6:	687b      	ldr	r3, [r7, #4]
   30fd8:	22dc      	movs	r2, #220	; 0xdc
   30fda:	2100      	movs	r1, #0
   30fdc:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   30fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30fe0:	3305      	adds	r3, #5
   30fe2:	781b      	ldrb	r3, [r3, #0]
   30fe4:	2b31      	cmp	r3, #49	; 0x31
   30fe6:	d804      	bhi.n	30ff2 <_http_client_handle_header+0x242>
   30fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30fea:	3307      	adds	r3, #7
   30fec:	781b      	ldrb	r3, [r3, #0]
   30fee:	2b30      	cmp	r3, #48	; 0x30
   30ff0:	d906      	bls.n	31000 <_http_client_handle_header+0x250>
				module->permanent = 1;
   30ff2:	687b      	ldr	r3, [r7, #4]
   30ff4:	2241      	movs	r2, #65	; 0x41
   30ff6:	5c99      	ldrb	r1, [r3, r2]
   30ff8:	2002      	movs	r0, #2
   30ffa:	4301      	orrs	r1, r0
   30ffc:	5499      	strb	r1, [r3, r2]
   30ffe:	e005      	b.n	3100c <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   31000:	687b      	ldr	r3, [r7, #4]
   31002:	2241      	movs	r2, #65	; 0x41
   31004:	5c99      	ldrb	r1, [r3, r2]
   31006:	2002      	movs	r0, #2
   31008:	4381      	bics	r1, r0
   3100a:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   3100c:	4b06      	ldr	r3, [pc, #24]	; (31028 <_http_client_handle_header+0x278>)
   3100e:	681b      	ldr	r3, [r3, #0]
   31010:	0018      	movs	r0, r3
   31012:	4b08      	ldr	r3, [pc, #32]	; (31034 <_http_client_handle_header+0x284>)
   31014:	4798      	blx	r3
   31016:	0002      	movs	r2, r0
   31018:	69bb      	ldr	r3, [r7, #24]
   3101a:	189b      	adds	r3, r3, r2
   3101c:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   3101e:	e6ce      	b.n	30dbe <_http_client_handle_header+0xe>
	}
}
   31020:	0018      	movs	r0, r3
   31022:	46bd      	mov	sp, r7
   31024:	b00b      	add	sp, #44	; 0x2c
   31026:	bd90      	pop	{r4, r7, pc}
   31028:	2000011c 	.word	0x2000011c
   3102c:	00034999 	.word	0x00034999
   31030:	00031415 	.word	0x00031415
   31034:	0003491b 	.word	0x0003491b
   31038:	00034929 	.word	0x00034929
   3103c:	00039754 	.word	0x00039754
   31040:	000344cd 	.word	0x000344cd
   31044:	00039778 	.word	0x00039778
   31048:	0003042d 	.word	0x0003042d
   3104c:	0003978c 	.word	0x0003978c
   31050:	0003979c 	.word	0x0003979c

00031054 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   31054:	b580      	push	{r7, lr}
   31056:	b088      	sub	sp, #32
   31058:	af00      	add	r7, sp, #0
   3105a:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   3105c:	687b      	ldr	r3, [r7, #4]
   3105e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31060:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   31062:	2300      	movs	r3, #0
   31064:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   31066:	687b      	ldr	r3, [r7, #4]
   31068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3106a:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   3106c:	687b      	ldr	r3, [r7, #4]
   3106e:	22e0      	movs	r2, #224	; 0xe0
   31070:	589b      	ldr	r3, [r3, r2]
   31072:	2b00      	cmp	r3, #0
   31074:	db71      	blt.n	3115a <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   31076:	687b      	ldr	r3, [r7, #4]
   31078:	22e0      	movs	r2, #224	; 0xe0
   3107a:	589b      	ldr	r3, [r3, r2]
   3107c:	2b00      	cmp	r3, #0
   3107e:	d134      	bne.n	310ea <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   31080:	687b      	ldr	r3, [r7, #4]
   31082:	22d8      	movs	r2, #216	; 0xd8
   31084:	2100      	movs	r1, #0
   31086:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   31088:	687b      	ldr	r3, [r7, #4]
   3108a:	22e4      	movs	r2, #228	; 0xe4
   3108c:	2100      	movs	r1, #0
   3108e:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   31090:	2308      	movs	r3, #8
   31092:	18fb      	adds	r3, r7, r3
   31094:	2201      	movs	r2, #1
   31096:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   31098:	2308      	movs	r3, #8
   3109a:	18fb      	adds	r3, r7, r3
   3109c:	2200      	movs	r2, #0
   3109e:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   310a0:	2308      	movs	r3, #8
   310a2:	18fb      	adds	r3, r7, r3
   310a4:	2200      	movs	r2, #0
   310a6:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   310a8:	687b      	ldr	r3, [r7, #4]
   310aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   310ac:	2b00      	cmp	r3, #0
   310ae:	d006      	beq.n	310be <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   310b0:	687b      	ldr	r3, [r7, #4]
   310b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   310b4:	2208      	movs	r2, #8
   310b6:	18ba      	adds	r2, r7, r2
   310b8:	6878      	ldr	r0, [r7, #4]
   310ba:	2103      	movs	r1, #3
   310bc:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   310be:	687b      	ldr	r3, [r7, #4]
   310c0:	2241      	movs	r2, #65	; 0x41
   310c2:	5c9b      	ldrb	r3, [r3, r2]
   310c4:	2202      	movs	r2, #2
   310c6:	4013      	ands	r3, r2
   310c8:	b2db      	uxtb	r3, r3
   310ca:	2b00      	cmp	r3, #0
   310cc:	d105      	bne.n	310da <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   310ce:	687b      	ldr	r3, [r7, #4]
   310d0:	2100      	movs	r1, #0
   310d2:	0018      	movs	r0, r3
   310d4:	4b62      	ldr	r3, [pc, #392]	; (31260 <_http_client_read_chuked_entity+0x20c>)
   310d6:	4798      	blx	r3
					return;
   310d8:	e0bf      	b.n	3125a <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   310da:	697b      	ldr	r3, [r7, #20]
   310dc:	1c9a      	adds	r2, r3, #2
   310de:	687b      	ldr	r3, [r7, #4]
   310e0:	0011      	movs	r1, r2
   310e2:	0018      	movs	r0, r3
   310e4:	4b5f      	ldr	r3, [pc, #380]	; (31264 <_http_client_read_chuked_entity+0x210>)
   310e6:	4798      	blx	r3
   310e8:	e0b2      	b.n	31250 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   310ea:	687b      	ldr	r3, [r7, #4]
   310ec:	22e0      	movs	r2, #224	; 0xe0
   310ee:	589a      	ldr	r2, [r3, r2]
   310f0:	69fb      	ldr	r3, [r7, #28]
   310f2:	429a      	cmp	r2, r3
   310f4:	dd00      	ble.n	310f8 <_http_client_read_chuked_entity+0xa4>
   310f6:	e0ab      	b.n	31250 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   310f8:	687b      	ldr	r3, [r7, #4]
   310fa:	22e0      	movs	r2, #224	; 0xe0
   310fc:	589b      	ldr	r3, [r3, r2]
   310fe:	001a      	movs	r2, r3
   31100:	2308      	movs	r3, #8
   31102:	18fb      	adds	r3, r7, r3
   31104:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   31106:	2308      	movs	r3, #8
   31108:	18fb      	adds	r3, r7, r3
   3110a:	697a      	ldr	r2, [r7, #20]
   3110c:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   3110e:	2308      	movs	r3, #8
   31110:	18fb      	adds	r3, r7, r3
   31112:	2200      	movs	r2, #0
   31114:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   31116:	687b      	ldr	r3, [r7, #4]
   31118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3111a:	2b00      	cmp	r3, #0
   3111c:	d006      	beq.n	3112c <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   3111e:	687b      	ldr	r3, [r7, #4]
   31120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31122:	2208      	movs	r2, #8
   31124:	18ba      	adds	r2, r7, r2
   31126:	6878      	ldr	r0, [r7, #4]
   31128:	2103      	movs	r1, #3
   3112a:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   3112c:	687b      	ldr	r3, [r7, #4]
   3112e:	22e0      	movs	r2, #224	; 0xe0
   31130:	589b      	ldr	r3, [r3, r2]
   31132:	3302      	adds	r3, #2
   31134:	697a      	ldr	r2, [r7, #20]
   31136:	18d2      	adds	r2, r2, r3
   31138:	687b      	ldr	r3, [r7, #4]
   3113a:	0011      	movs	r1, r2
   3113c:	0018      	movs	r0, r3
   3113e:	4b49      	ldr	r3, [pc, #292]	; (31264 <_http_client_read_chuked_entity+0x210>)
   31140:	4798      	blx	r3
				length = (int)module->recved_size;
   31142:	687b      	ldr	r3, [r7, #4]
   31144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31146:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   31148:	687b      	ldr	r3, [r7, #4]
   3114a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3114c:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   3114e:	687b      	ldr	r3, [r7, #4]
   31150:	21e0      	movs	r1, #224	; 0xe0
   31152:	2201      	movs	r2, #1
   31154:	4252      	negs	r2, r2
   31156:	505a      	str	r2, [r3, r1]
   31158:	e07a      	b.n	31250 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   3115a:	687b      	ldr	r3, [r7, #4]
   3115c:	22e0      	movs	r2, #224	; 0xe0
   3115e:	2100      	movs	r1, #0
   31160:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   31162:	e05a      	b.n	3121a <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   31164:	697b      	ldr	r3, [r7, #20]
   31166:	781b      	ldrb	r3, [r3, #0]
   31168:	2b0a      	cmp	r3, #10
   3116a:	d106      	bne.n	3117a <_http_client_read_chuked_entity+0x126>
					buffer++;
   3116c:	697b      	ldr	r3, [r7, #20]
   3116e:	3301      	adds	r3, #1
   31170:	617b      	str	r3, [r7, #20]
					length--;
   31172:	69fb      	ldr	r3, [r7, #28]
   31174:	3b01      	subs	r3, #1
   31176:	61fb      	str	r3, [r7, #28]
					break;
   31178:	e052      	b.n	31220 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   3117a:	69bb      	ldr	r3, [r7, #24]
   3117c:	2b00      	cmp	r3, #0
   3117e:	d145      	bne.n	3120c <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   31180:	697b      	ldr	r3, [r7, #20]
   31182:	781b      	ldrb	r3, [r3, #0]
   31184:	2b2f      	cmp	r3, #47	; 0x2f
   31186:	d910      	bls.n	311aa <_http_client_read_chuked_entity+0x156>
   31188:	697b      	ldr	r3, [r7, #20]
   3118a:	781b      	ldrb	r3, [r3, #0]
   3118c:	2b39      	cmp	r3, #57	; 0x39
   3118e:	d80c      	bhi.n	311aa <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   31190:	687b      	ldr	r3, [r7, #4]
   31192:	22e0      	movs	r2, #224	; 0xe0
   31194:	589b      	ldr	r3, [r3, r2]
   31196:	011b      	lsls	r3, r3, #4
   31198:	697a      	ldr	r2, [r7, #20]
   3119a:	7812      	ldrb	r2, [r2, #0]
   3119c:	189b      	adds	r3, r3, r2
   3119e:	3b30      	subs	r3, #48	; 0x30
   311a0:	001a      	movs	r2, r3
   311a2:	687b      	ldr	r3, [r7, #4]
   311a4:	21e0      	movs	r1, #224	; 0xe0
   311a6:	505a      	str	r2, [r3, r1]
   311a8:	e031      	b.n	3120e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   311aa:	697b      	ldr	r3, [r7, #20]
   311ac:	781b      	ldrb	r3, [r3, #0]
   311ae:	2b60      	cmp	r3, #96	; 0x60
   311b0:	d910      	bls.n	311d4 <_http_client_read_chuked_entity+0x180>
   311b2:	697b      	ldr	r3, [r7, #20]
   311b4:	781b      	ldrb	r3, [r3, #0]
   311b6:	2b66      	cmp	r3, #102	; 0x66
   311b8:	d80c      	bhi.n	311d4 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   311ba:	687b      	ldr	r3, [r7, #4]
   311bc:	22e0      	movs	r2, #224	; 0xe0
   311be:	589b      	ldr	r3, [r3, r2]
   311c0:	011b      	lsls	r3, r3, #4
   311c2:	697a      	ldr	r2, [r7, #20]
   311c4:	7812      	ldrb	r2, [r2, #0]
   311c6:	189b      	adds	r3, r3, r2
   311c8:	3b61      	subs	r3, #97	; 0x61
   311ca:	001a      	movs	r2, r3
   311cc:	687b      	ldr	r3, [r7, #4]
   311ce:	21e0      	movs	r1, #224	; 0xe0
   311d0:	505a      	str	r2, [r3, r1]
   311d2:	e01c      	b.n	3120e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   311d4:	697b      	ldr	r3, [r7, #20]
   311d6:	781b      	ldrb	r3, [r3, #0]
   311d8:	2b40      	cmp	r3, #64	; 0x40
   311da:	d910      	bls.n	311fe <_http_client_read_chuked_entity+0x1aa>
   311dc:	697b      	ldr	r3, [r7, #20]
   311de:	781b      	ldrb	r3, [r3, #0]
   311e0:	2b46      	cmp	r3, #70	; 0x46
   311e2:	d80c      	bhi.n	311fe <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   311e4:	687b      	ldr	r3, [r7, #4]
   311e6:	22e0      	movs	r2, #224	; 0xe0
   311e8:	589b      	ldr	r3, [r3, r2]
   311ea:	011b      	lsls	r3, r3, #4
   311ec:	697a      	ldr	r2, [r7, #20]
   311ee:	7812      	ldrb	r2, [r2, #0]
   311f0:	189b      	adds	r3, r3, r2
   311f2:	3b41      	subs	r3, #65	; 0x41
   311f4:	001a      	movs	r2, r3
   311f6:	687b      	ldr	r3, [r7, #4]
   311f8:	21e0      	movs	r1, #224	; 0xe0
   311fa:	505a      	str	r2, [r3, r1]
   311fc:	e007      	b.n	3120e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   311fe:	697b      	ldr	r3, [r7, #20]
   31200:	781b      	ldrb	r3, [r3, #0]
   31202:	2b3b      	cmp	r3, #59	; 0x3b
   31204:	d103      	bne.n	3120e <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   31206:	2301      	movs	r3, #1
   31208:	61bb      	str	r3, [r7, #24]
   3120a:	e000      	b.n	3120e <_http_client_read_chuked_entity+0x1ba>
					continue;
   3120c:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   3120e:	697b      	ldr	r3, [r7, #20]
   31210:	3301      	adds	r3, #1
   31212:	617b      	str	r3, [r7, #20]
   31214:	69fb      	ldr	r3, [r7, #28]
   31216:	3b01      	subs	r3, #1
   31218:	61fb      	str	r3, [r7, #28]
   3121a:	69fb      	ldr	r3, [r7, #28]
   3121c:	2b00      	cmp	r3, #0
   3121e:	dca1      	bgt.n	31164 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   31220:	687b      	ldr	r3, [r7, #4]
   31222:	22e0      	movs	r2, #224	; 0xe0
   31224:	589a      	ldr	r2, [r3, r2]
   31226:	687b      	ldr	r3, [r7, #4]
   31228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   3122a:	429a      	cmp	r2, r3
   3122c:	dd07      	ble.n	3123e <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   3122e:	238b      	movs	r3, #139	; 0x8b
   31230:	425a      	negs	r2, r3
   31232:	687b      	ldr	r3, [r7, #4]
   31234:	0011      	movs	r1, r2
   31236:	0018      	movs	r0, r3
   31238:	4b09      	ldr	r3, [pc, #36]	; (31260 <_http_client_read_chuked_entity+0x20c>)
   3123a:	4798      	blx	r3
				return;
   3123c:	e00d      	b.n	3125a <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   3123e:	69fb      	ldr	r3, [r7, #28]
   31240:	2b00      	cmp	r3, #0
   31242:	d105      	bne.n	31250 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   31244:	687b      	ldr	r3, [r7, #4]
   31246:	21e0      	movs	r1, #224	; 0xe0
   31248:	2201      	movs	r2, #1
   3124a:	4252      	negs	r2, r2
   3124c:	505a      	str	r2, [r3, r1]
				return;
   3124e:	e004      	b.n	3125a <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   31250:	687b      	ldr	r3, [r7, #4]
   31252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31254:	2b00      	cmp	r3, #0
   31256:	d000      	beq.n	3125a <_http_client_read_chuked_entity+0x206>
   31258:	e708      	b.n	3106c <_http_client_read_chuked_entity+0x18>
}
   3125a:	46bd      	mov	sp, r7
   3125c:	b008      	add	sp, #32
   3125e:	bd80      	pop	{r7, pc}
   31260:	0003042d 	.word	0x0003042d
   31264:	00031415 	.word	0x00031415

00031268 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   31268:	b580      	push	{r7, lr}
   3126a:	b086      	sub	sp, #24
   3126c:	af00      	add	r7, sp, #0
   3126e:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   31270:	687b      	ldr	r3, [r7, #4]
   31272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31274:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   31276:	687b      	ldr	r3, [r7, #4]
   31278:	22dc      	movs	r2, #220	; 0xdc
   3127a:	589b      	ldr	r3, [r3, r2]
   3127c:	2b00      	cmp	r3, #0
   3127e:	db58      	blt.n	31332 <_http_client_handle_entity+0xca>
   31280:	687b      	ldr	r3, [r7, #4]
   31282:	22dc      	movs	r2, #220	; 0xdc
   31284:	589a      	ldr	r2, [r3, r2]
   31286:	687b      	ldr	r3, [r7, #4]
   31288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   3128a:	429a      	cmp	r2, r3
   3128c:	dc51      	bgt.n	31332 <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   3128e:	687b      	ldr	r3, [r7, #4]
   31290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31292:	0019      	movs	r1, r3
   31294:	687b      	ldr	r3, [r7, #4]
   31296:	22dc      	movs	r2, #220	; 0xdc
   31298:	589b      	ldr	r3, [r3, r2]
   3129a:	4299      	cmp	r1, r3
   3129c:	da00      	bge.n	312a0 <_http_client_handle_entity+0x38>
   3129e:	e0a9      	b.n	313f4 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   312a0:	687b      	ldr	r3, [r7, #4]
   312a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   312a4:	2b00      	cmp	r3, #0
   312a6:	d020      	beq.n	312ea <_http_client_handle_entity+0x82>
   312a8:	687b      	ldr	r3, [r7, #4]
   312aa:	22e4      	movs	r2, #228	; 0xe4
   312ac:	5a9b      	ldrh	r3, [r3, r2]
   312ae:	2b00      	cmp	r3, #0
   312b0:	d01b      	beq.n	312ea <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   312b2:	687b      	ldr	r3, [r7, #4]
   312b4:	22e4      	movs	r2, #228	; 0xe4
   312b6:	5a9a      	ldrh	r2, [r3, r2]
   312b8:	2308      	movs	r3, #8
   312ba:	18fb      	adds	r3, r7, r3
   312bc:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   312be:	2308      	movs	r3, #8
   312c0:	18fb      	adds	r3, r7, r3
   312c2:	2200      	movs	r2, #0
   312c4:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   312c6:	687b      	ldr	r3, [r7, #4]
   312c8:	22dc      	movs	r2, #220	; 0xdc
   312ca:	589b      	ldr	r3, [r3, r2]
   312cc:	001a      	movs	r2, r3
   312ce:	2308      	movs	r3, #8
   312d0:	18fb      	adds	r3, r7, r3
   312d2:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   312d4:	2308      	movs	r3, #8
   312d6:	18fb      	adds	r3, r7, r3
   312d8:	697a      	ldr	r2, [r7, #20]
   312da:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   312dc:	687b      	ldr	r3, [r7, #4]
   312de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   312e0:	2208      	movs	r2, #8
   312e2:	18ba      	adds	r2, r7, r2
   312e4:	6878      	ldr	r0, [r7, #4]
   312e6:	2102      	movs	r1, #2
   312e8:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   312ea:	687b      	ldr	r3, [r7, #4]
   312ec:	22d8      	movs	r2, #216	; 0xd8
   312ee:	2100      	movs	r1, #0
   312f0:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   312f2:	687b      	ldr	r3, [r7, #4]
   312f4:	22e4      	movs	r2, #228	; 0xe4
   312f6:	2100      	movs	r1, #0
   312f8:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   312fa:	687b      	ldr	r3, [r7, #4]
   312fc:	2241      	movs	r2, #65	; 0x41
   312fe:	5c9b      	ldrb	r3, [r3, r2]
   31300:	2202      	movs	r2, #2
   31302:	4013      	ands	r3, r2
   31304:	b2db      	uxtb	r3, r3
   31306:	2b00      	cmp	r3, #0
   31308:	d105      	bne.n	31316 <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   3130a:	687b      	ldr	r3, [r7, #4]
   3130c:	2100      	movs	r1, #0
   3130e:	0018      	movs	r0, r3
   31310:	4b3b      	ldr	r3, [pc, #236]	; (31400 <_http_client_handle_entity+0x198>)
   31312:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   31314:	e06e      	b.n	313f4 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   31316:	687b      	ldr	r3, [r7, #4]
   31318:	22dc      	movs	r2, #220	; 0xdc
   3131a:	589b      	ldr	r3, [r3, r2]
   3131c:	001a      	movs	r2, r3
   3131e:	697b      	ldr	r3, [r7, #20]
   31320:	189a      	adds	r2, r3, r2
   31322:	687b      	ldr	r3, [r7, #4]
   31324:	0011      	movs	r1, r2
   31326:	0018      	movs	r0, r3
   31328:	4b36      	ldr	r3, [pc, #216]	; (31404 <_http_client_handle_entity+0x19c>)
   3132a:	4798      	blx	r3
				return module->recved_size;
   3132c:	687b      	ldr	r3, [r7, #4]
   3132e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31330:	e061      	b.n	313f6 <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   31332:	687b      	ldr	r3, [r7, #4]
   31334:	22dc      	movs	r2, #220	; 0xdc
   31336:	589b      	ldr	r3, [r3, r2]
   31338:	2b00      	cmp	r3, #0
   3133a:	db57      	blt.n	313ec <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   3133c:	687b      	ldr	r3, [r7, #4]
   3133e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   31340:	2308      	movs	r3, #8
   31342:	18fb      	adds	r3, r7, r3
   31344:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   31346:	2308      	movs	r3, #8
   31348:	18fb      	adds	r3, r7, r3
   3134a:	697a      	ldr	r2, [r7, #20]
   3134c:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   3134e:	687b      	ldr	r3, [r7, #4]
   31350:	22e0      	movs	r2, #224	; 0xe0
   31352:	589a      	ldr	r2, [r3, r2]
   31354:	687b      	ldr	r3, [r7, #4]
   31356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31358:	18d2      	adds	r2, r2, r3
   3135a:	687b      	ldr	r3, [r7, #4]
   3135c:	21e0      	movs	r1, #224	; 0xe0
   3135e:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   31360:	687b      	ldr	r3, [r7, #4]
   31362:	22dc      	movs	r2, #220	; 0xdc
   31364:	589a      	ldr	r2, [r3, r2]
   31366:	687b      	ldr	r3, [r7, #4]
   31368:	21e0      	movs	r1, #224	; 0xe0
   3136a:	585b      	ldr	r3, [r3, r1]
   3136c:	429a      	cmp	r2, r3
   3136e:	dc0c      	bgt.n	3138a <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   31370:	687b      	ldr	r3, [r7, #4]
   31372:	22d8      	movs	r2, #216	; 0xd8
   31374:	2100      	movs	r1, #0
   31376:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   31378:	687b      	ldr	r3, [r7, #4]
   3137a:	22e4      	movs	r2, #228	; 0xe4
   3137c:	2100      	movs	r1, #0
   3137e:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   31380:	2308      	movs	r3, #8
   31382:	18fb      	adds	r3, r7, r3
   31384:	2201      	movs	r2, #1
   31386:	721a      	strb	r2, [r3, #8]
   31388:	e003      	b.n	31392 <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   3138a:	2308      	movs	r3, #8
   3138c:	18fb      	adds	r3, r7, r3
   3138e:	2200      	movs	r2, #0
   31390:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   31392:	687b      	ldr	r3, [r7, #4]
   31394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31396:	2b00      	cmp	r3, #0
   31398:	d006      	beq.n	313a8 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   3139a:	687b      	ldr	r3, [r7, #4]
   3139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3139e:	2208      	movs	r2, #8
   313a0:	18ba      	adds	r2, r7, r2
   313a2:	6878      	ldr	r0, [r7, #4]
   313a4:	2103      	movs	r1, #3
   313a6:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   313a8:	2308      	movs	r3, #8
   313aa:	18fb      	adds	r3, r7, r3
   313ac:	7a1b      	ldrb	r3, [r3, #8]
   313ae:	2b01      	cmp	r3, #1
   313b0:	d112      	bne.n	313d8 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   313b2:	687b      	ldr	r3, [r7, #4]
   313b4:	2241      	movs	r2, #65	; 0x41
   313b6:	5c9b      	ldrb	r3, [r3, r2]
   313b8:	2202      	movs	r2, #2
   313ba:	4013      	ands	r3, r2
   313bc:	b2db      	uxtb	r3, r3
   313be:	2b00      	cmp	r3, #0
   313c0:	d10a      	bne.n	313d8 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   313c2:	4b11      	ldr	r3, [pc, #68]	; (31408 <_http_client_handle_entity+0x1a0>)
   313c4:	0018      	movs	r0, r3
   313c6:	4b11      	ldr	r3, [pc, #68]	; (3140c <_http_client_handle_entity+0x1a4>)
   313c8:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   313ca:	687b      	ldr	r3, [r7, #4]
   313cc:	2100      	movs	r1, #0
   313ce:	0018      	movs	r0, r3
   313d0:	4b0b      	ldr	r3, [pc, #44]	; (31400 <_http_client_handle_entity+0x198>)
   313d2:	4798      	blx	r3
					return 0;
   313d4:	2300      	movs	r3, #0
   313d6:	e00e      	b.n	313f6 <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   313d8:	687b      	ldr	r3, [r7, #4]
   313da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   313dc:	697a      	ldr	r2, [r7, #20]
   313de:	18d2      	adds	r2, r2, r3
   313e0:	687b      	ldr	r3, [r7, #4]
   313e2:	0011      	movs	r1, r2
   313e4:	0018      	movs	r0, r3
   313e6:	4b07      	ldr	r3, [pc, #28]	; (31404 <_http_client_handle_entity+0x19c>)
   313e8:	4798      	blx	r3
   313ea:	e003      	b.n	313f4 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   313ec:	687b      	ldr	r3, [r7, #4]
   313ee:	0018      	movs	r0, r3
   313f0:	4b07      	ldr	r3, [pc, #28]	; (31410 <_http_client_handle_entity+0x1a8>)
   313f2:	4798      	blx	r3
		}
	}

	return 0;
   313f4:	2300      	movs	r3, #0
}
   313f6:	0018      	movs	r0, r3
   313f8:	46bd      	mov	sp, r7
   313fa:	b006      	add	sp, #24
   313fc:	bd80      	pop	{r7, pc}
   313fe:	46c0      	nop			; (mov r8, r8)
   31400:	0003042d 	.word	0x0003042d
   31404:	00031415 	.word	0x00031415
   31408:	000397a4 	.word	0x000397a4
   3140c:	000347a1 	.word	0x000347a1
   31410:	00031055 	.word	0x00031055

00031414 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   31414:	b580      	push	{r7, lr}
   31416:	b084      	sub	sp, #16
   31418:	af00      	add	r7, sp, #0
   3141a:	6078      	str	r0, [r7, #4]
   3141c:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   3141e:	687b      	ldr	r3, [r7, #4]
   31420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31422:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   31424:	687b      	ldr	r3, [r7, #4]
   31426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31428:	001a      	movs	r2, r3
   3142a:	683b      	ldr	r3, [r7, #0]
   3142c:	1ad2      	subs	r2, r2, r3
   3142e:	68fb      	ldr	r3, [r7, #12]
   31430:	18d3      	adds	r3, r2, r3
   31432:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   31434:	68bb      	ldr	r3, [r7, #8]
   31436:	2b00      	cmp	r3, #0
   31438:	dd09      	ble.n	3144e <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   3143a:	68ba      	ldr	r2, [r7, #8]
   3143c:	6839      	ldr	r1, [r7, #0]
   3143e:	68fb      	ldr	r3, [r7, #12]
   31440:	0018      	movs	r0, r3
   31442:	4b06      	ldr	r3, [pc, #24]	; (3145c <_http_client_move_buffer+0x48>)
   31444:	4798      	blx	r3
		module->recved_size = remain;
   31446:	68ba      	ldr	r2, [r7, #8]
   31448:	687b      	ldr	r3, [r7, #4]
   3144a:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   3144c:	e002      	b.n	31454 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   3144e:	687b      	ldr	r3, [r7, #4]
   31450:	2200      	movs	r2, #0
   31452:	645a      	str	r2, [r3, #68]	; 0x44
}
   31454:	46c0      	nop			; (mov r8, r8)
   31456:	46bd      	mov	sp, r7
   31458:	b004      	add	sp, #16
   3145a:	bd80      	pop	{r7, pc}
   3145c:	0003455b 	.word	0x0003455b

00031460 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   31460:	b580      	push	{r7, lr}
   31462:	b084      	sub	sp, #16
   31464:	af00      	add	r7, sp, #0
   31466:	60f8      	str	r0, [r7, #12]
   31468:	60b9      	str	r1, [r7, #8]
   3146a:	607a      	str	r2, [r7, #4]
   3146c:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   3146e:	68fb      	ldr	r3, [r7, #12]
   31470:	687a      	ldr	r2, [r7, #4]
   31472:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   31474:	68fb      	ldr	r3, [r7, #12]
   31476:	68ba      	ldr	r2, [r7, #8]
   31478:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   3147a:	68fb      	ldr	r3, [r7, #12]
   3147c:	2200      	movs	r2, #0
   3147e:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   31480:	68fb      	ldr	r3, [r7, #12]
   31482:	683a      	ldr	r2, [r7, #0]
   31484:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   31486:	68fb      	ldr	r3, [r7, #12]
   31488:	69ba      	ldr	r2, [r7, #24]
   3148a:	60da      	str	r2, [r3, #12]
}
   3148c:	46c0      	nop			; (mov r8, r8)
   3148e:	46bd      	mov	sp, r7
   31490:	b004      	add	sp, #16
   31492:	bd80      	pop	{r7, pc}

00031494 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   31494:	b580      	push	{r7, lr}
   31496:	b084      	sub	sp, #16
   31498:	af00      	add	r7, sp, #0
   3149a:	6078      	str	r0, [r7, #4]
   3149c:	000a      	movs	r2, r1
   3149e:	1cfb      	adds	r3, r7, #3
   314a0:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   314a2:	687b      	ldr	r3, [r7, #4]
   314a4:	681a      	ldr	r2, [r3, #0]
   314a6:	687b      	ldr	r3, [r7, #4]
   314a8:	685b      	ldr	r3, [r3, #4]
   314aa:	1ad3      	subs	r3, r2, r3
   314ac:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   314ae:	68fb      	ldr	r3, [r7, #12]
   314b0:	2b00      	cmp	r3, #0
   314b2:	dc03      	bgt.n	314bc <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   314b4:	687b      	ldr	r3, [r7, #4]
   314b6:	0018      	movs	r0, r3
   314b8:	4b08      	ldr	r3, [pc, #32]	; (314dc <stream_writer_send_8+0x48>)
   314ba:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   314bc:	687b      	ldr	r3, [r7, #4]
   314be:	6919      	ldr	r1, [r3, #16]
   314c0:	687b      	ldr	r3, [r7, #4]
   314c2:	685b      	ldr	r3, [r3, #4]
   314c4:	1c58      	adds	r0, r3, #1
   314c6:	687a      	ldr	r2, [r7, #4]
   314c8:	6050      	str	r0, [r2, #4]
   314ca:	18cb      	adds	r3, r1, r3
   314cc:	1cfa      	adds	r2, r7, #3
   314ce:	7812      	ldrb	r2, [r2, #0]
   314d0:	701a      	strb	r2, [r3, #0]
}
   314d2:	46c0      	nop			; (mov r8, r8)
   314d4:	46bd      	mov	sp, r7
   314d6:	b004      	add	sp, #16
   314d8:	bd80      	pop	{r7, pc}
   314da:	46c0      	nop			; (mov r8, r8)
   314dc:	0003151d 	.word	0x0003151d

000314e0 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   314e0:	b580      	push	{r7, lr}
   314e2:	b084      	sub	sp, #16
   314e4:	af00      	add	r7, sp, #0
   314e6:	60f8      	str	r0, [r7, #12]
   314e8:	60b9      	str	r1, [r7, #8]
   314ea:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   314ec:	e00d      	b.n	3150a <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   314ee:	68bb      	ldr	r3, [r7, #8]
   314f0:	781b      	ldrb	r3, [r3, #0]
   314f2:	b25a      	sxtb	r2, r3
   314f4:	68fb      	ldr	r3, [r7, #12]
   314f6:	0011      	movs	r1, r2
   314f8:	0018      	movs	r0, r3
   314fa:	4b07      	ldr	r3, [pc, #28]	; (31518 <stream_writer_send_buffer+0x38>)
   314fc:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   314fe:	687b      	ldr	r3, [r7, #4]
   31500:	3b01      	subs	r3, #1
   31502:	607b      	str	r3, [r7, #4]
   31504:	68bb      	ldr	r3, [r7, #8]
   31506:	3301      	adds	r3, #1
   31508:	60bb      	str	r3, [r7, #8]
   3150a:	687b      	ldr	r3, [r7, #4]
   3150c:	2b00      	cmp	r3, #0
   3150e:	d1ee      	bne.n	314ee <stream_writer_send_buffer+0xe>
	}
}
   31510:	46c0      	nop			; (mov r8, r8)
   31512:	46bd      	mov	sp, r7
   31514:	b004      	add	sp, #16
   31516:	bd80      	pop	{r7, pc}
   31518:	00031495 	.word	0x00031495

0003151c <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   3151c:	b590      	push	{r4, r7, lr}
   3151e:	b083      	sub	sp, #12
   31520:	af00      	add	r7, sp, #0
   31522:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   31524:	687b      	ldr	r3, [r7, #4]
   31526:	685b      	ldr	r3, [r3, #4]
   31528:	2b00      	cmp	r3, #0
   3152a:	d00c      	beq.n	31546 <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   3152c:	687b      	ldr	r3, [r7, #4]
   3152e:	689c      	ldr	r4, [r3, #8]
   31530:	687b      	ldr	r3, [r7, #4]
   31532:	68d8      	ldr	r0, [r3, #12]
   31534:	687b      	ldr	r3, [r7, #4]
   31536:	6919      	ldr	r1, [r3, #16]
   31538:	687b      	ldr	r3, [r7, #4]
   3153a:	685b      	ldr	r3, [r3, #4]
   3153c:	001a      	movs	r2, r3
   3153e:	47a0      	blx	r4
		writer->written = 0;
   31540:	687b      	ldr	r3, [r7, #4]
   31542:	2200      	movs	r2, #0
   31544:	605a      	str	r2, [r3, #4]
	}
}
   31546:	46c0      	nop			; (mov r8, r8)
   31548:	46bd      	mov	sp, r7
   3154a:	b003      	add	sp, #12
   3154c:	bd90      	pop	{r4, r7, pc}
	...

00031550 <system_cpu_clock_get_hz>:
{
   31550:	b580      	push	{r7, lr}
   31552:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   31554:	2000      	movs	r0, #0
   31556:	4b05      	ldr	r3, [pc, #20]	; (3156c <system_cpu_clock_get_hz+0x1c>)
   31558:	4798      	blx	r3
   3155a:	0002      	movs	r2, r0
   3155c:	4b04      	ldr	r3, [pc, #16]	; (31570 <system_cpu_clock_get_hz+0x20>)
   3155e:	7a1b      	ldrb	r3, [r3, #8]
   31560:	b2db      	uxtb	r3, r3
   31562:	40da      	lsrs	r2, r3
   31564:	0013      	movs	r3, r2
}
   31566:	0018      	movs	r0, r3
   31568:	46bd      	mov	sp, r7
   3156a:	bd80      	pop	{r7, pc}
   3156c:	00028e05 	.word	0x00028e05
   31570:	40000400 	.word	0x40000400

00031574 <tcc_enable>:
{
   31574:	b580      	push	{r7, lr}
   31576:	b084      	sub	sp, #16
   31578:	af00      	add	r7, sp, #0
   3157a:	6078      	str	r0, [r7, #4]
	Tcc *const tcc_module = module_inst->hw;
   3157c:	687b      	ldr	r3, [r7, #4]
   3157e:	681b      	ldr	r3, [r3, #0]
   31580:	60fb      	str	r3, [r7, #12]
	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   31582:	46c0      	nop			; (mov r8, r8)
   31584:	68fb      	ldr	r3, [r7, #12]
   31586:	689b      	ldr	r3, [r3, #8]
   31588:	2202      	movs	r2, #2
   3158a:	4013      	ands	r3, r2
   3158c:	d1fa      	bne.n	31584 <tcc_enable+0x10>
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   3158e:	68fb      	ldr	r3, [r7, #12]
   31590:	681b      	ldr	r3, [r3, #0]
   31592:	2202      	movs	r2, #2
   31594:	431a      	orrs	r2, r3
   31596:	68fb      	ldr	r3, [r7, #12]
   31598:	601a      	str	r2, [r3, #0]
}
   3159a:	46c0      	nop			; (mov r8, r8)
   3159c:	46bd      	mov	sp, r7
   3159e:	b004      	add	sp, #16
   315a0:	bd80      	pop	{r7, pc}
	...

000315a4 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   315a4:	b580      	push	{r7, lr}
   315a6:	b082      	sub	sp, #8
   315a8:	af00      	add	r7, sp, #0
   315aa:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   315ac:	4b04      	ldr	r3, [pc, #16]	; (315c0 <sw_timer_tcc_callback+0x1c>)
   315ae:	681b      	ldr	r3, [r3, #0]
   315b0:	1c5a      	adds	r2, r3, #1
   315b2:	4b03      	ldr	r3, [pc, #12]	; (315c0 <sw_timer_tcc_callback+0x1c>)
   315b4:	601a      	str	r2, [r3, #0]
}
   315b6:	46c0      	nop			; (mov r8, r8)
   315b8:	46bd      	mov	sp, r7
   315ba:	b002      	add	sp, #8
   315bc:	bd80      	pop	{r7, pc}
   315be:	46c0      	nop			; (mov r8, r8)
   315c0:	200046dc 	.word	0x200046dc

000315c4 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   315c4:	b580      	push	{r7, lr}
   315c6:	b082      	sub	sp, #8
   315c8:	af00      	add	r7, sp, #0
   315ca:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   315cc:	687b      	ldr	r3, [r7, #4]
   315ce:	2264      	movs	r2, #100	; 0x64
   315d0:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   315d2:	687b      	ldr	r3, [r7, #4]
   315d4:	2200      	movs	r2, #0
   315d6:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   315d8:	687b      	ldr	r3, [r7, #4]
   315da:	2200      	movs	r2, #0
   315dc:	705a      	strb	r2, [r3, #1]
}
   315de:	46c0      	nop			; (mov r8, r8)
   315e0:	46bd      	mov	sp, r7
   315e2:	b002      	add	sp, #8
   315e4:	bd80      	pop	{r7, pc}
	...

000315e8 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   315e8:	b590      	push	{r4, r7, lr}
   315ea:	b0b1      	sub	sp, #196	; 0xc4
   315ec:	af00      	add	r7, sp, #0
   315ee:	6078      	str	r0, [r7, #4]
   315f0:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   315f2:	230c      	movs	r3, #12
   315f4:	18fb      	adds	r3, r7, r3
   315f6:	4a2e      	ldr	r2, [pc, #184]	; (316b0 <sw_timer_init+0xc8>)
   315f8:	ca13      	ldmia	r2!, {r0, r1, r4}
   315fa:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   315fc:	683b      	ldr	r3, [r7, #0]
   315fe:	885b      	ldrh	r3, [r3, #2]
   31600:	001a      	movs	r2, r3
   31602:	687b      	ldr	r3, [r7, #4]
   31604:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   31606:	687b      	ldr	r3, [r7, #4]
   31608:	3314      	adds	r3, #20
   3160a:	22bc      	movs	r2, #188	; 0xbc
   3160c:	18ba      	adds	r2, r7, r2
   3160e:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   31610:	683b      	ldr	r3, [r7, #0]
   31612:	781b      	ldrb	r3, [r3, #0]
   31614:	001a      	movs	r2, r3
   31616:	230c      	movs	r3, #12
   31618:	18fb      	adds	r3, r7, r3
   3161a:	0092      	lsls	r2, r2, #2
   3161c:	58d2      	ldr	r2, [r2, r3]
   3161e:	2318      	movs	r3, #24
   31620:	18fb      	adds	r3, r7, r3
   31622:	0011      	movs	r1, r2
   31624:	0018      	movs	r0, r3
   31626:	4b23      	ldr	r3, [pc, #140]	; (316b4 <sw_timer_init+0xcc>)
   31628:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   3162a:	4b23      	ldr	r3, [pc, #140]	; (316b8 <sw_timer_init+0xd0>)
   3162c:	4798      	blx	r3
   3162e:	0004      	movs	r4, r0
   31630:	683b      	ldr	r3, [r7, #0]
   31632:	885b      	ldrh	r3, [r3, #2]
   31634:	001a      	movs	r2, r3
   31636:	4b21      	ldr	r3, [pc, #132]	; (316bc <sw_timer_init+0xd4>)
   31638:	0011      	movs	r1, r2
   3163a:	22fa      	movs	r2, #250	; 0xfa
   3163c:	0210      	lsls	r0, r2, #8
   3163e:	4798      	blx	r3
   31640:	0003      	movs	r3, r0
   31642:	001a      	movs	r2, r3
   31644:	4b1e      	ldr	r3, [pc, #120]	; (316c0 <sw_timer_init+0xd8>)
   31646:	0011      	movs	r1, r2
   31648:	0020      	movs	r0, r4
   3164a:	4798      	blx	r3
   3164c:	0003      	movs	r3, r0
   3164e:	001a      	movs	r2, r3
   31650:	2318      	movs	r3, #24
   31652:	18fb      	adds	r3, r7, r3
   31654:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   31656:	2318      	movs	r3, #24
   31658:	18fb      	adds	r3, r7, r3
   3165a:	2205      	movs	r2, #5
   3165c:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   3165e:	683b      	ldr	r3, [r7, #0]
   31660:	781b      	ldrb	r3, [r3, #0]
   31662:	001a      	movs	r2, r3
   31664:	230c      	movs	r3, #12
   31666:	18fb      	adds	r3, r7, r3
   31668:	0092      	lsls	r2, r2, #2
   3166a:	58d1      	ldr	r1, [r2, r3]
   3166c:	2318      	movs	r3, #24
   3166e:	18fa      	adds	r2, r7, r3
   31670:	23bc      	movs	r3, #188	; 0xbc
   31672:	18fb      	adds	r3, r7, r3
   31674:	681b      	ldr	r3, [r3, #0]
   31676:	0018      	movs	r0, r3
   31678:	4b12      	ldr	r3, [pc, #72]	; (316c4 <sw_timer_init+0xdc>)
   3167a:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   3167c:	683b      	ldr	r3, [r7, #0]
   3167e:	785b      	ldrb	r3, [r3, #1]
   31680:	3308      	adds	r3, #8
   31682:	b2da      	uxtb	r2, r3
   31684:	4910      	ldr	r1, [pc, #64]	; (316c8 <sw_timer_init+0xe0>)
   31686:	23bc      	movs	r3, #188	; 0xbc
   31688:	18fb      	adds	r3, r7, r3
   3168a:	681b      	ldr	r3, [r3, #0]
   3168c:	0018      	movs	r0, r3
   3168e:	4b0f      	ldr	r3, [pc, #60]	; (316cc <sw_timer_init+0xe4>)
   31690:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   31692:	683b      	ldr	r3, [r7, #0]
   31694:	785b      	ldrb	r3, [r3, #1]
   31696:	3308      	adds	r3, #8
   31698:	b2da      	uxtb	r2, r3
   3169a:	23bc      	movs	r3, #188	; 0xbc
   3169c:	18fb      	adds	r3, r7, r3
   3169e:	681b      	ldr	r3, [r3, #0]
   316a0:	0011      	movs	r1, r2
   316a2:	0018      	movs	r0, r3
   316a4:	4b0a      	ldr	r3, [pc, #40]	; (316d0 <sw_timer_init+0xe8>)
   316a6:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   316a8:	46c0      	nop			; (mov r8, r8)
   316aa:	46bd      	mov	sp, r7
   316ac:	b031      	add	sp, #196	; 0xc4
   316ae:	bd90      	pop	{r4, r7, pc}
   316b0:	000397e4 	.word	0x000397e4
   316b4:	0002939d 	.word	0x0002939d
   316b8:	00031551 	.word	0x00031551
   316bc:	00031bd9 	.word	0x00031bd9
   316c0:	00031ac5 	.word	0x00031ac5
   316c4:	000299f9 	.word	0x000299f9
   316c8:	000315a5 	.word	0x000315a5
   316cc:	00029f3d 	.word	0x00029f3d
   316d0:	00029f7d 	.word	0x00029f7d

000316d4 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   316d4:	b580      	push	{r7, lr}
   316d6:	b084      	sub	sp, #16
   316d8:	af00      	add	r7, sp, #0
   316da:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   316dc:	687b      	ldr	r3, [r7, #4]
   316de:	3314      	adds	r3, #20
   316e0:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   316e2:	68fb      	ldr	r3, [r7, #12]
   316e4:	0018      	movs	r0, r3
   316e6:	4b03      	ldr	r3, [pc, #12]	; (316f4 <sw_timer_enable+0x20>)
   316e8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   316ea:	46c0      	nop			; (mov r8, r8)
   316ec:	46bd      	mov	sp, r7
   316ee:	b004      	add	sp, #16
   316f0:	bd80      	pop	{r7, pc}
   316f2:	46c0      	nop			; (mov r8, r8)
   316f4:	00031575 	.word	0x00031575

000316f8 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   316f8:	b580      	push	{r7, lr}
   316fa:	b086      	sub	sp, #24
   316fc:	af00      	add	r7, sp, #0
   316fe:	60f8      	str	r0, [r7, #12]
   31700:	60b9      	str	r1, [r7, #8]
   31702:	607a      	str	r2, [r7, #4]
   31704:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   31706:	2300      	movs	r3, #0
   31708:	617b      	str	r3, [r7, #20]
   3170a:	e032      	b.n	31772 <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   3170c:	68f9      	ldr	r1, [r7, #12]
   3170e:	697a      	ldr	r2, [r7, #20]
   31710:	0013      	movs	r3, r2
   31712:	009b      	lsls	r3, r3, #2
   31714:	189b      	adds	r3, r3, r2
   31716:	009b      	lsls	r3, r3, #2
   31718:	5c5b      	ldrb	r3, [r3, r1]
   3171a:	07db      	lsls	r3, r3, #31
   3171c:	0fdb      	lsrs	r3, r3, #31
   3171e:	b2db      	uxtb	r3, r3
   31720:	2b00      	cmp	r3, #0
   31722:	d123      	bne.n	3176c <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   31724:	697a      	ldr	r2, [r7, #20]
   31726:	0013      	movs	r3, r2
   31728:	009b      	lsls	r3, r3, #2
   3172a:	189b      	adds	r3, r3, r2
   3172c:	009b      	lsls	r3, r3, #2
   3172e:	68fa      	ldr	r2, [r7, #12]
   31730:	18d3      	adds	r3, r2, r3
   31732:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   31734:	693b      	ldr	r3, [r7, #16]
   31736:	68ba      	ldr	r2, [r7, #8]
   31738:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   3173a:	693b      	ldr	r3, [r7, #16]
   3173c:	781a      	ldrb	r2, [r3, #0]
   3173e:	2102      	movs	r1, #2
   31740:	438a      	bics	r2, r1
   31742:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   31744:	693b      	ldr	r3, [r7, #16]
   31746:	687a      	ldr	r2, [r7, #4]
   31748:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   3174a:	68fb      	ldr	r3, [r7, #12]
   3174c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   3174e:	4b0d      	ldr	r3, [pc, #52]	; (31784 <sw_timer_register_callback+0x8c>)
   31750:	0011      	movs	r1, r2
   31752:	6838      	ldr	r0, [r7, #0]
   31754:	4798      	blx	r3
   31756:	0003      	movs	r3, r0
   31758:	001a      	movs	r2, r3
   3175a:	693b      	ldr	r3, [r7, #16]
   3175c:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   3175e:	693b      	ldr	r3, [r7, #16]
   31760:	781a      	ldrb	r2, [r3, #0]
   31762:	2101      	movs	r1, #1
   31764:	430a      	orrs	r2, r1
   31766:	701a      	strb	r2, [r3, #0]
			return index;
   31768:	697b      	ldr	r3, [r7, #20]
   3176a:	e007      	b.n	3177c <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   3176c:	697b      	ldr	r3, [r7, #20]
   3176e:	3301      	adds	r3, #1
   31770:	617b      	str	r3, [r7, #20]
   31772:	697b      	ldr	r3, [r7, #20]
   31774:	2b00      	cmp	r3, #0
   31776:	ddc9      	ble.n	3170c <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   31778:	2301      	movs	r3, #1
   3177a:	425b      	negs	r3, r3
}
   3177c:	0018      	movs	r0, r3
   3177e:	46bd      	mov	sp, r7
   31780:	b006      	add	sp, #24
   31782:	bd80      	pop	{r7, pc}
   31784:	00031ac5 	.word	0x00031ac5

00031788 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   31788:	b580      	push	{r7, lr}
   3178a:	b086      	sub	sp, #24
   3178c:	af00      	add	r7, sp, #0
   3178e:	60f8      	str	r0, [r7, #12]
   31790:	60b9      	str	r1, [r7, #8]
   31792:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   31794:	68ba      	ldr	r2, [r7, #8]
   31796:	0013      	movs	r3, r2
   31798:	009b      	lsls	r3, r3, #2
   3179a:	189b      	adds	r3, r3, r2
   3179c:	009b      	lsls	r3, r3, #2
   3179e:	68fa      	ldr	r2, [r7, #12]
   317a0:	18d3      	adds	r3, r2, r3
   317a2:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   317a4:	697b      	ldr	r3, [r7, #20]
   317a6:	781a      	ldrb	r2, [r3, #0]
   317a8:	2102      	movs	r1, #2
   317aa:	430a      	orrs	r2, r1
   317ac:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   317ae:	68fb      	ldr	r3, [r7, #12]
   317b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   317b2:	4b07      	ldr	r3, [pc, #28]	; (317d0 <sw_timer_enable_callback+0x48>)
   317b4:	0011      	movs	r1, r2
   317b6:	6878      	ldr	r0, [r7, #4]
   317b8:	4798      	blx	r3
   317ba:	0003      	movs	r3, r0
   317bc:	001a      	movs	r2, r3
   317be:	4b05      	ldr	r3, [pc, #20]	; (317d4 <sw_timer_enable_callback+0x4c>)
   317c0:	681b      	ldr	r3, [r3, #0]
   317c2:	18d2      	adds	r2, r2, r3
   317c4:	697b      	ldr	r3, [r7, #20]
   317c6:	611a      	str	r2, [r3, #16]
}
   317c8:	46c0      	nop			; (mov r8, r8)
   317ca:	46bd      	mov	sp, r7
   317cc:	b006      	add	sp, #24
   317ce:	bd80      	pop	{r7, pc}
   317d0:	00031ac5 	.word	0x00031ac5
   317d4:	200046dc 	.word	0x200046dc

000317d8 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   317d8:	b580      	push	{r7, lr}
   317da:	b084      	sub	sp, #16
   317dc:	af00      	add	r7, sp, #0
   317de:	6078      	str	r0, [r7, #4]
   317e0:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   317e2:	683a      	ldr	r2, [r7, #0]
   317e4:	0013      	movs	r3, r2
   317e6:	009b      	lsls	r3, r3, #2
   317e8:	189b      	adds	r3, r3, r2
   317ea:	009b      	lsls	r3, r3, #2
   317ec:	687a      	ldr	r2, [r7, #4]
   317ee:	18d3      	adds	r3, r2, r3
   317f0:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   317f2:	68fb      	ldr	r3, [r7, #12]
   317f4:	781a      	ldrb	r2, [r3, #0]
   317f6:	2102      	movs	r1, #2
   317f8:	438a      	bics	r2, r1
   317fa:	701a      	strb	r2, [r3, #0]
}
   317fc:	46c0      	nop			; (mov r8, r8)
   317fe:	46bd      	mov	sp, r7
   31800:	b004      	add	sp, #16
   31802:	bd80      	pop	{r7, pc}

00031804 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   31804:	b590      	push	{r4, r7, lr}
   31806:	b085      	sub	sp, #20
   31808:	af00      	add	r7, sp, #0
   3180a:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   3180c:	2300      	movs	r3, #0
   3180e:	60fb      	str	r3, [r7, #12]
   31810:	e053      	b.n	318ba <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   31812:	6879      	ldr	r1, [r7, #4]
   31814:	68fa      	ldr	r2, [r7, #12]
   31816:	0013      	movs	r3, r2
   31818:	009b      	lsls	r3, r3, #2
   3181a:	189b      	adds	r3, r3, r2
   3181c:	009b      	lsls	r3, r3, #2
   3181e:	5c5b      	ldrb	r3, [r3, r1]
   31820:	07db      	lsls	r3, r3, #31
   31822:	0fdb      	lsrs	r3, r3, #31
   31824:	b2db      	uxtb	r3, r3
   31826:	2b00      	cmp	r3, #0
   31828:	d044      	beq.n	318b4 <sw_timer_task+0xb0>
   3182a:	6879      	ldr	r1, [r7, #4]
   3182c:	68fa      	ldr	r2, [r7, #12]
   3182e:	0013      	movs	r3, r2
   31830:	009b      	lsls	r3, r3, #2
   31832:	189b      	adds	r3, r3, r2
   31834:	009b      	lsls	r3, r3, #2
   31836:	5c5b      	ldrb	r3, [r3, r1]
   31838:	079b      	lsls	r3, r3, #30
   3183a:	0fdb      	lsrs	r3, r3, #31
   3183c:	b2db      	uxtb	r3, r3
   3183e:	2b00      	cmp	r3, #0
   31840:	d038      	beq.n	318b4 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   31842:	68fa      	ldr	r2, [r7, #12]
   31844:	0013      	movs	r3, r2
   31846:	009b      	lsls	r3, r3, #2
   31848:	189b      	adds	r3, r3, r2
   3184a:	009b      	lsls	r3, r3, #2
   3184c:	687a      	ldr	r2, [r7, #4]
   3184e:	18d3      	adds	r3, r2, r3
   31850:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   31852:	68bb      	ldr	r3, [r7, #8]
   31854:	691a      	ldr	r2, [r3, #16]
   31856:	4b1c      	ldr	r3, [pc, #112]	; (318c8 <sw_timer_task+0xc4>)
   31858:	681b      	ldr	r3, [r3, #0]
   3185a:	1ad3      	subs	r3, r2, r3
   3185c:	d52a      	bpl.n	318b4 <sw_timer_task+0xb0>
   3185e:	68bb      	ldr	r3, [r7, #8]
   31860:	781b      	ldrb	r3, [r3, #0]
   31862:	2204      	movs	r2, #4
   31864:	4013      	ands	r3, r2
   31866:	b2db      	uxtb	r3, r3
   31868:	2b00      	cmp	r3, #0
   3186a:	d123      	bne.n	318b4 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   3186c:	68bb      	ldr	r3, [r7, #8]
   3186e:	781a      	ldrb	r2, [r3, #0]
   31870:	2104      	movs	r1, #4
   31872:	430a      	orrs	r2, r1
   31874:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   31876:	68bb      	ldr	r3, [r7, #8]
   31878:	68db      	ldr	r3, [r3, #12]
   3187a:	2b00      	cmp	r3, #0
   3187c:	d007      	beq.n	3188e <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   3187e:	68bb      	ldr	r3, [r7, #8]
   31880:	68da      	ldr	r2, [r3, #12]
   31882:	4b11      	ldr	r3, [pc, #68]	; (318c8 <sw_timer_task+0xc4>)
   31884:	681b      	ldr	r3, [r3, #0]
   31886:	18d2      	adds	r2, r2, r3
   31888:	68bb      	ldr	r3, [r7, #8]
   3188a:	611a      	str	r2, [r3, #16]
   3188c:	e004      	b.n	31898 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   3188e:	68bb      	ldr	r3, [r7, #8]
   31890:	781a      	ldrb	r2, [r3, #0]
   31892:	2102      	movs	r1, #2
   31894:	438a      	bics	r2, r1
   31896:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   31898:	68bb      	ldr	r3, [r7, #8]
   3189a:	685c      	ldr	r4, [r3, #4]
   3189c:	68bb      	ldr	r3, [r7, #8]
   3189e:	689a      	ldr	r2, [r3, #8]
   318a0:	68bb      	ldr	r3, [r7, #8]
   318a2:	68db      	ldr	r3, [r3, #12]
   318a4:	68f9      	ldr	r1, [r7, #12]
   318a6:	6878      	ldr	r0, [r7, #4]
   318a8:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   318aa:	68bb      	ldr	r3, [r7, #8]
   318ac:	781a      	ldrb	r2, [r3, #0]
   318ae:	2104      	movs	r1, #4
   318b0:	438a      	bics	r2, r1
   318b2:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   318b4:	68fb      	ldr	r3, [r7, #12]
   318b6:	3301      	adds	r3, #1
   318b8:	60fb      	str	r3, [r7, #12]
   318ba:	68fb      	ldr	r3, [r7, #12]
   318bc:	2b00      	cmp	r3, #0
   318be:	dda8      	ble.n	31812 <sw_timer_task+0xe>
			}
		}
	}
}
   318c0:	46c0      	nop			; (mov r8, r8)
   318c2:	46bd      	mov	sp, r7
   318c4:	b005      	add	sp, #20
   318c6:	bd90      	pop	{r4, r7, pc}
   318c8:	200046dc 	.word	0x200046dc

000318cc <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   318cc:	b580      	push	{r7, lr}
   318ce:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   318d0:	4b06      	ldr	r3, [pc, #24]	; (318ec <main+0x20>)
   318d2:	4798      	blx	r3
		//delay_ms(2000);
		//servo_setDuty(3);
		//delay_ms(2000);
	//}
    /* Initialize the UART console. */
    InitializeSerialConsole();
   318d4:	4b06      	ldr	r3, [pc, #24]	; (318f0 <main+0x24>)
   318d6:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   318d8:	2001      	movs	r0, #1
   318da:	4b06      	ldr	r3, [pc, #24]	; (318f4 <main+0x28>)
   318dc:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   318de:	4b06      	ldr	r3, [pc, #24]	; (318f8 <main+0x2c>)
   318e0:	4798      	blx	r3

    return 0;  // Will not get here
   318e2:	2300      	movs	r3, #0
}
   318e4:	0018      	movs	r0, r3
   318e6:	46bd      	mov	sp, r7
   318e8:	bd80      	pop	{r7, pc}
   318ea:	46c0      	nop			; (mov r8, r8)
   318ec:	00029291 	.word	0x00029291
   318f0:	0001cd35 	.word	0x0001cd35
   318f4:	000173fd 	.word	0x000173fd
   318f8:	0001b38d 	.word	0x0001b38d

000318fc <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   318fc:	b580      	push	{r7, lr}
   318fe:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   31900:	4b0f      	ldr	r3, [pc, #60]	; (31940 <vApplicationDaemonTaskStartupHook+0x44>)
   31902:	0018      	movs	r0, r3
   31904:	4b0f      	ldr	r3, [pc, #60]	; (31944 <vApplicationDaemonTaskStartupHook+0x48>)
   31906:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   31908:	4b0f      	ldr	r3, [pc, #60]	; (31948 <vApplicationDaemonTaskStartupHook+0x4c>)
   3190a:	0018      	movs	r0, r3
   3190c:	4b0d      	ldr	r3, [pc, #52]	; (31944 <vApplicationDaemonTaskStartupHook+0x48>)
   3190e:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   31910:	4b0e      	ldr	r3, [pc, #56]	; (3194c <vApplicationDaemonTaskStartupHook+0x50>)
   31912:	4798      	blx	r3
   31914:	1e03      	subs	r3, r0, #0
   31916:	d004      	beq.n	31922 <vApplicationDaemonTaskStartupHook+0x26>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   31918:	4b0d      	ldr	r3, [pc, #52]	; (31950 <vApplicationDaemonTaskStartupHook+0x54>)
   3191a:	0018      	movs	r0, r3
   3191c:	4b09      	ldr	r3, [pc, #36]	; (31944 <vApplicationDaemonTaskStartupHook+0x48>)
   3191e:	4798      	blx	r3
   31920:	e003      	b.n	3192a <vApplicationDaemonTaskStartupHook+0x2e>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   31922:	4b0c      	ldr	r3, [pc, #48]	; (31954 <vApplicationDaemonTaskStartupHook+0x58>)
   31924:	0018      	movs	r0, r3
   31926:	4b07      	ldr	r3, [pc, #28]	; (31944 <vApplicationDaemonTaskStartupHook+0x48>)
   31928:	4798      	blx	r3
    }

    StartTasks();
   3192a:	4b0b      	ldr	r3, [pc, #44]	; (31958 <vApplicationDaemonTaskStartupHook+0x5c>)
   3192c:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   3192e:	4b0b      	ldr	r3, [pc, #44]	; (3195c <vApplicationDaemonTaskStartupHook+0x60>)
   31930:	681b      	ldr	r3, [r3, #0]
   31932:	0018      	movs	r0, r3
   31934:	4b0a      	ldr	r3, [pc, #40]	; (31960 <vApplicationDaemonTaskStartupHook+0x64>)
   31936:	4798      	blx	r3
}
   31938:	46c0      	nop			; (mov r8, r8)
   3193a:	46bd      	mov	sp, r7
   3193c:	bd80      	pop	{r7, pc}
   3193e:	46c0      	nop			; (mov r8, r8)
   31940:	000397f0 	.word	0x000397f0
   31944:	0001cda5 	.word	0x0001cda5
   31948:	00039814 	.word	0x00039814
   3194c:	000142c5 	.word	0x000142c5
   31950:	0003982c 	.word	0x0003982c
   31954:	00039850 	.word	0x00039850
   31958:	00031965 	.word	0x00031965
   3195c:	200046e4 	.word	0x200046e4
   31960:	0001b231 	.word	0x0001b231

00031964 <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   31964:	b590      	push	{r4, r7, lr}
   31966:	b083      	sub	sp, #12
   31968:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   3196a:	4b35      	ldr	r3, [pc, #212]	; (31a40 <StartTasks+0xdc>)
   3196c:	4798      	blx	r3
   3196e:	0003      	movs	r3, r0
   31970:	4a34      	ldr	r2, [pc, #208]	; (31a44 <StartTasks+0xe0>)
   31972:	4835      	ldr	r0, [pc, #212]	; (31a48 <StartTasks+0xe4>)
   31974:	2140      	movs	r1, #64	; 0x40
   31976:	4c35      	ldr	r4, [pc, #212]	; (31a4c <StartTasks+0xe8>)
   31978:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   3197a:	4b33      	ldr	r3, [pc, #204]	; (31a48 <StartTasks+0xe4>)
   3197c:	0018      	movs	r0, r3
   3197e:	4b34      	ldr	r3, [pc, #208]	; (31a50 <StartTasks+0xec>)
   31980:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   31982:	23c8      	movs	r3, #200	; 0xc8
   31984:	005a      	lsls	r2, r3, #1
   31986:	4933      	ldr	r1, [pc, #204]	; (31a54 <StartTasks+0xf0>)
   31988:	4833      	ldr	r0, [pc, #204]	; (31a58 <StartTasks+0xf4>)
   3198a:	4b34      	ldr	r3, [pc, #208]	; (31a5c <StartTasks+0xf8>)
   3198c:	9301      	str	r3, [sp, #4]
   3198e:	2304      	movs	r3, #4
   31990:	9300      	str	r3, [sp, #0]
   31992:	2300      	movs	r3, #0
   31994:	4c32      	ldr	r4, [pc, #200]	; (31a60 <StartTasks+0xfc>)
   31996:	47a0      	blx	r4
   31998:	0003      	movs	r3, r0
   3199a:	2b01      	cmp	r3, #1
   3199c:	d003      	beq.n	319a6 <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   3199e:	4b31      	ldr	r3, [pc, #196]	; (31a64 <StartTasks+0x100>)
   319a0:	0018      	movs	r0, r3
   319a2:	4b2b      	ldr	r3, [pc, #172]	; (31a50 <StartTasks+0xec>)
   319a4:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   319a6:	4b26      	ldr	r3, [pc, #152]	; (31a40 <StartTasks+0xdc>)
   319a8:	4798      	blx	r3
   319aa:	0003      	movs	r3, r0
   319ac:	4a2e      	ldr	r2, [pc, #184]	; (31a68 <StartTasks+0x104>)
   319ae:	4826      	ldr	r0, [pc, #152]	; (31a48 <StartTasks+0xe4>)
   319b0:	2140      	movs	r1, #64	; 0x40
   319b2:	4c26      	ldr	r4, [pc, #152]	; (31a4c <StartTasks+0xe8>)
   319b4:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   319b6:	4b24      	ldr	r3, [pc, #144]	; (31a48 <StartTasks+0xe4>)
   319b8:	0018      	movs	r0, r3
   319ba:	4b25      	ldr	r3, [pc, #148]	; (31a50 <StartTasks+0xec>)
   319bc:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   319be:	23fa      	movs	r3, #250	; 0xfa
   319c0:	009a      	lsls	r2, r3, #2
   319c2:	492a      	ldr	r1, [pc, #168]	; (31a6c <StartTasks+0x108>)
   319c4:	482a      	ldr	r0, [pc, #168]	; (31a70 <StartTasks+0x10c>)
   319c6:	4b2b      	ldr	r3, [pc, #172]	; (31a74 <StartTasks+0x110>)
   319c8:	9301      	str	r3, [sp, #4]
   319ca:	2303      	movs	r3, #3
   319cc:	9300      	str	r3, [sp, #0]
   319ce:	2300      	movs	r3, #0
   319d0:	4c23      	ldr	r4, [pc, #140]	; (31a60 <StartTasks+0xfc>)
   319d2:	47a0      	blx	r4
   319d4:	0003      	movs	r3, r0
   319d6:	2b01      	cmp	r3, #1
   319d8:	d003      	beq.n	319e2 <StartTasks+0x7e>
	    SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   319da:	4b27      	ldr	r3, [pc, #156]	; (31a78 <StartTasks+0x114>)
   319dc:	0018      	movs	r0, r3
   319de:	4b1c      	ldr	r3, [pc, #112]	; (31a50 <StartTasks+0xec>)
   319e0:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   319e2:	4b17      	ldr	r3, [pc, #92]	; (31a40 <StartTasks+0xdc>)
   319e4:	4798      	blx	r3
   319e6:	0003      	movs	r3, r0
   319e8:	4a24      	ldr	r2, [pc, #144]	; (31a7c <StartTasks+0x118>)
   319ea:	4817      	ldr	r0, [pc, #92]	; (31a48 <StartTasks+0xe4>)
   319ec:	2140      	movs	r1, #64	; 0x40
   319ee:	4c17      	ldr	r4, [pc, #92]	; (31a4c <StartTasks+0xe8>)
   319f0:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   319f2:	4b15      	ldr	r3, [pc, #84]	; (31a48 <StartTasks+0xe4>)
   319f4:	0018      	movs	r0, r3
   319f6:	4b16      	ldr	r3, [pc, #88]	; (31a50 <StartTasks+0xec>)
   319f8:	4798      	blx	r3

    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   319fa:	23c8      	movs	r3, #200	; 0xc8
   319fc:	005a      	lsls	r2, r3, #1
   319fe:	4920      	ldr	r1, [pc, #128]	; (31a80 <StartTasks+0x11c>)
   31a00:	4820      	ldr	r0, [pc, #128]	; (31a84 <StartTasks+0x120>)
   31a02:	4b21      	ldr	r3, [pc, #132]	; (31a88 <StartTasks+0x124>)
   31a04:	9301      	str	r3, [sp, #4]
   31a06:	2304      	movs	r3, #4
   31a08:	9300      	str	r3, [sp, #0]
   31a0a:	2300      	movs	r3, #0
   31a0c:	4c14      	ldr	r4, [pc, #80]	; (31a60 <StartTasks+0xfc>)
   31a0e:	47a0      	blx	r4
   31a10:	0003      	movs	r3, r0
   31a12:	2b01      	cmp	r3, #1
   31a14:	d003      	beq.n	31a1e <StartTasks+0xba>
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   31a16:	4b1d      	ldr	r3, [pc, #116]	; (31a8c <StartTasks+0x128>)
   31a18:	0018      	movs	r0, r3
   31a1a:	4b0d      	ldr	r3, [pc, #52]	; (31a50 <StartTasks+0xec>)
   31a1c:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
   31a1e:	4b08      	ldr	r3, [pc, #32]	; (31a40 <StartTasks+0xdc>)
   31a20:	4798      	blx	r3
   31a22:	0003      	movs	r3, r0
   31a24:	4a1a      	ldr	r2, [pc, #104]	; (31a90 <StartTasks+0x12c>)
   31a26:	4808      	ldr	r0, [pc, #32]	; (31a48 <StartTasks+0xe4>)
   31a28:	2140      	movs	r1, #64	; 0x40
   31a2a:	4c08      	ldr	r4, [pc, #32]	; (31a4c <StartTasks+0xe8>)
   31a2c:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   31a2e:	4b06      	ldr	r3, [pc, #24]	; (31a48 <StartTasks+0xe4>)
   31a30:	0018      	movs	r0, r3
   31a32:	4b07      	ldr	r3, [pc, #28]	; (31a50 <StartTasks+0xec>)
   31a34:	4798      	blx	r3
    //if (xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
        //SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
    //}
    //snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
    //SerialConsoleWriteString(bufferPrint);
}
   31a36:	46c0      	nop			; (mov r8, r8)
   31a38:	46bd      	mov	sp, r7
   31a3a:	b001      	add	sp, #4
   31a3c:	bd90      	pop	{r4, r7, pc}
   31a3e:	46c0      	nop			; (mov r8, r8)
   31a40:	00019371 	.word	0x00019371
   31a44:	0003986c 	.word	0x0003986c
   31a48:	20005c14 	.word	0x20005c14
   31a4c:	000347d9 	.word	0x000347d9
   31a50:	0001cda5 	.word	0x0001cda5
   31a54:	00039890 	.word	0x00039890
   31a58:	00013819 	.word	0x00013819
   31a5c:	200046e0 	.word	0x200046e0
   31a60:	0001adb5 	.word	0x0001adb5
   31a64:	0003989c 	.word	0x0003989c
   31a68:	000398c8 	.word	0x000398c8
   31a6c:	000398e8 	.word	0x000398e8
   31a70:	000161f9 	.word	0x000161f9
   31a74:	200046e8 	.word	0x200046e8
   31a78:	000398f4 	.word	0x000398f4
   31a7c:	00039920 	.word	0x00039920
   31a80:	00039940 	.word	0x00039940
   31a84:	00014d91 	.word	0x00014d91
   31a88:	200046ec 	.word	0x200046ec
   31a8c:	00039948 	.word	0x00039948
   31a90:	00039974 	.word	0x00039974

00031a94 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   31a94:	b580      	push	{r7, lr}
   31a96:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   31a98:	4b02      	ldr	r3, [pc, #8]	; (31aa4 <vApplicationMallocFailedHook+0x10>)
   31a9a:	0018      	movs	r0, r3
   31a9c:	4b02      	ldr	r3, [pc, #8]	; (31aa8 <vApplicationMallocFailedHook+0x14>)
   31a9e:	4798      	blx	r3
    while (1)
   31aa0:	e7fe      	b.n	31aa0 <vApplicationMallocFailedHook+0xc>
   31aa2:	46c0      	nop			; (mov r8, r8)
   31aa4:	00039998 	.word	0x00039998
   31aa8:	0001cda5 	.word	0x0001cda5

00031aac <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   31aac:	b580      	push	{r7, lr}
   31aae:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   31ab0:	4b02      	ldr	r3, [pc, #8]	; (31abc <vApplicationStackOverflowHook+0x10>)
   31ab2:	0018      	movs	r0, r3
   31ab4:	4b02      	ldr	r3, [pc, #8]	; (31ac0 <vApplicationStackOverflowHook+0x14>)
   31ab6:	4798      	blx	r3
    while (1)
   31ab8:	e7fe      	b.n	31ab8 <vApplicationStackOverflowHook+0xc>
   31aba:	46c0      	nop			; (mov r8, r8)
   31abc:	000399c4 	.word	0x000399c4
   31ac0:	0001cda5 	.word	0x0001cda5

00031ac4 <__udivsi3>:
   31ac4:	2200      	movs	r2, #0
   31ac6:	0843      	lsrs	r3, r0, #1
   31ac8:	428b      	cmp	r3, r1
   31aca:	d374      	bcc.n	31bb6 <__udivsi3+0xf2>
   31acc:	0903      	lsrs	r3, r0, #4
   31ace:	428b      	cmp	r3, r1
   31ad0:	d35f      	bcc.n	31b92 <__udivsi3+0xce>
   31ad2:	0a03      	lsrs	r3, r0, #8
   31ad4:	428b      	cmp	r3, r1
   31ad6:	d344      	bcc.n	31b62 <__udivsi3+0x9e>
   31ad8:	0b03      	lsrs	r3, r0, #12
   31ada:	428b      	cmp	r3, r1
   31adc:	d328      	bcc.n	31b30 <__udivsi3+0x6c>
   31ade:	0c03      	lsrs	r3, r0, #16
   31ae0:	428b      	cmp	r3, r1
   31ae2:	d30d      	bcc.n	31b00 <__udivsi3+0x3c>
   31ae4:	22ff      	movs	r2, #255	; 0xff
   31ae6:	0209      	lsls	r1, r1, #8
   31ae8:	ba12      	rev	r2, r2
   31aea:	0c03      	lsrs	r3, r0, #16
   31aec:	428b      	cmp	r3, r1
   31aee:	d302      	bcc.n	31af6 <__udivsi3+0x32>
   31af0:	1212      	asrs	r2, r2, #8
   31af2:	0209      	lsls	r1, r1, #8
   31af4:	d065      	beq.n	31bc2 <__udivsi3+0xfe>
   31af6:	0b03      	lsrs	r3, r0, #12
   31af8:	428b      	cmp	r3, r1
   31afa:	d319      	bcc.n	31b30 <__udivsi3+0x6c>
   31afc:	e000      	b.n	31b00 <__udivsi3+0x3c>
   31afe:	0a09      	lsrs	r1, r1, #8
   31b00:	0bc3      	lsrs	r3, r0, #15
   31b02:	428b      	cmp	r3, r1
   31b04:	d301      	bcc.n	31b0a <__udivsi3+0x46>
   31b06:	03cb      	lsls	r3, r1, #15
   31b08:	1ac0      	subs	r0, r0, r3
   31b0a:	4152      	adcs	r2, r2
   31b0c:	0b83      	lsrs	r3, r0, #14
   31b0e:	428b      	cmp	r3, r1
   31b10:	d301      	bcc.n	31b16 <__udivsi3+0x52>
   31b12:	038b      	lsls	r3, r1, #14
   31b14:	1ac0      	subs	r0, r0, r3
   31b16:	4152      	adcs	r2, r2
   31b18:	0b43      	lsrs	r3, r0, #13
   31b1a:	428b      	cmp	r3, r1
   31b1c:	d301      	bcc.n	31b22 <__udivsi3+0x5e>
   31b1e:	034b      	lsls	r3, r1, #13
   31b20:	1ac0      	subs	r0, r0, r3
   31b22:	4152      	adcs	r2, r2
   31b24:	0b03      	lsrs	r3, r0, #12
   31b26:	428b      	cmp	r3, r1
   31b28:	d301      	bcc.n	31b2e <__udivsi3+0x6a>
   31b2a:	030b      	lsls	r3, r1, #12
   31b2c:	1ac0      	subs	r0, r0, r3
   31b2e:	4152      	adcs	r2, r2
   31b30:	0ac3      	lsrs	r3, r0, #11
   31b32:	428b      	cmp	r3, r1
   31b34:	d301      	bcc.n	31b3a <__udivsi3+0x76>
   31b36:	02cb      	lsls	r3, r1, #11
   31b38:	1ac0      	subs	r0, r0, r3
   31b3a:	4152      	adcs	r2, r2
   31b3c:	0a83      	lsrs	r3, r0, #10
   31b3e:	428b      	cmp	r3, r1
   31b40:	d301      	bcc.n	31b46 <__udivsi3+0x82>
   31b42:	028b      	lsls	r3, r1, #10
   31b44:	1ac0      	subs	r0, r0, r3
   31b46:	4152      	adcs	r2, r2
   31b48:	0a43      	lsrs	r3, r0, #9
   31b4a:	428b      	cmp	r3, r1
   31b4c:	d301      	bcc.n	31b52 <__udivsi3+0x8e>
   31b4e:	024b      	lsls	r3, r1, #9
   31b50:	1ac0      	subs	r0, r0, r3
   31b52:	4152      	adcs	r2, r2
   31b54:	0a03      	lsrs	r3, r0, #8
   31b56:	428b      	cmp	r3, r1
   31b58:	d301      	bcc.n	31b5e <__udivsi3+0x9a>
   31b5a:	020b      	lsls	r3, r1, #8
   31b5c:	1ac0      	subs	r0, r0, r3
   31b5e:	4152      	adcs	r2, r2
   31b60:	d2cd      	bcs.n	31afe <__udivsi3+0x3a>
   31b62:	09c3      	lsrs	r3, r0, #7
   31b64:	428b      	cmp	r3, r1
   31b66:	d301      	bcc.n	31b6c <__udivsi3+0xa8>
   31b68:	01cb      	lsls	r3, r1, #7
   31b6a:	1ac0      	subs	r0, r0, r3
   31b6c:	4152      	adcs	r2, r2
   31b6e:	0983      	lsrs	r3, r0, #6
   31b70:	428b      	cmp	r3, r1
   31b72:	d301      	bcc.n	31b78 <__udivsi3+0xb4>
   31b74:	018b      	lsls	r3, r1, #6
   31b76:	1ac0      	subs	r0, r0, r3
   31b78:	4152      	adcs	r2, r2
   31b7a:	0943      	lsrs	r3, r0, #5
   31b7c:	428b      	cmp	r3, r1
   31b7e:	d301      	bcc.n	31b84 <__udivsi3+0xc0>
   31b80:	014b      	lsls	r3, r1, #5
   31b82:	1ac0      	subs	r0, r0, r3
   31b84:	4152      	adcs	r2, r2
   31b86:	0903      	lsrs	r3, r0, #4
   31b88:	428b      	cmp	r3, r1
   31b8a:	d301      	bcc.n	31b90 <__udivsi3+0xcc>
   31b8c:	010b      	lsls	r3, r1, #4
   31b8e:	1ac0      	subs	r0, r0, r3
   31b90:	4152      	adcs	r2, r2
   31b92:	08c3      	lsrs	r3, r0, #3
   31b94:	428b      	cmp	r3, r1
   31b96:	d301      	bcc.n	31b9c <__udivsi3+0xd8>
   31b98:	00cb      	lsls	r3, r1, #3
   31b9a:	1ac0      	subs	r0, r0, r3
   31b9c:	4152      	adcs	r2, r2
   31b9e:	0883      	lsrs	r3, r0, #2
   31ba0:	428b      	cmp	r3, r1
   31ba2:	d301      	bcc.n	31ba8 <__udivsi3+0xe4>
   31ba4:	008b      	lsls	r3, r1, #2
   31ba6:	1ac0      	subs	r0, r0, r3
   31ba8:	4152      	adcs	r2, r2
   31baa:	0843      	lsrs	r3, r0, #1
   31bac:	428b      	cmp	r3, r1
   31bae:	d301      	bcc.n	31bb4 <__udivsi3+0xf0>
   31bb0:	004b      	lsls	r3, r1, #1
   31bb2:	1ac0      	subs	r0, r0, r3
   31bb4:	4152      	adcs	r2, r2
   31bb6:	1a41      	subs	r1, r0, r1
   31bb8:	d200      	bcs.n	31bbc <__udivsi3+0xf8>
   31bba:	4601      	mov	r1, r0
   31bbc:	4152      	adcs	r2, r2
   31bbe:	4610      	mov	r0, r2
   31bc0:	4770      	bx	lr
   31bc2:	e7ff      	b.n	31bc4 <__udivsi3+0x100>
   31bc4:	b501      	push	{r0, lr}
   31bc6:	2000      	movs	r0, #0
   31bc8:	f000 f8f0 	bl	31dac <__aeabi_idiv0>
   31bcc:	bd02      	pop	{r1, pc}
   31bce:	46c0      	nop			; (mov r8, r8)

00031bd0 <__aeabi_uidivmod>:
   31bd0:	2900      	cmp	r1, #0
   31bd2:	d0f7      	beq.n	31bc4 <__udivsi3+0x100>
   31bd4:	e776      	b.n	31ac4 <__udivsi3>
   31bd6:	4770      	bx	lr

00031bd8 <__divsi3>:
   31bd8:	4603      	mov	r3, r0
   31bda:	430b      	orrs	r3, r1
   31bdc:	d47f      	bmi.n	31cde <__divsi3+0x106>
   31bde:	2200      	movs	r2, #0
   31be0:	0843      	lsrs	r3, r0, #1
   31be2:	428b      	cmp	r3, r1
   31be4:	d374      	bcc.n	31cd0 <__divsi3+0xf8>
   31be6:	0903      	lsrs	r3, r0, #4
   31be8:	428b      	cmp	r3, r1
   31bea:	d35f      	bcc.n	31cac <__divsi3+0xd4>
   31bec:	0a03      	lsrs	r3, r0, #8
   31bee:	428b      	cmp	r3, r1
   31bf0:	d344      	bcc.n	31c7c <__divsi3+0xa4>
   31bf2:	0b03      	lsrs	r3, r0, #12
   31bf4:	428b      	cmp	r3, r1
   31bf6:	d328      	bcc.n	31c4a <__divsi3+0x72>
   31bf8:	0c03      	lsrs	r3, r0, #16
   31bfa:	428b      	cmp	r3, r1
   31bfc:	d30d      	bcc.n	31c1a <__divsi3+0x42>
   31bfe:	22ff      	movs	r2, #255	; 0xff
   31c00:	0209      	lsls	r1, r1, #8
   31c02:	ba12      	rev	r2, r2
   31c04:	0c03      	lsrs	r3, r0, #16
   31c06:	428b      	cmp	r3, r1
   31c08:	d302      	bcc.n	31c10 <__divsi3+0x38>
   31c0a:	1212      	asrs	r2, r2, #8
   31c0c:	0209      	lsls	r1, r1, #8
   31c0e:	d065      	beq.n	31cdc <__divsi3+0x104>
   31c10:	0b03      	lsrs	r3, r0, #12
   31c12:	428b      	cmp	r3, r1
   31c14:	d319      	bcc.n	31c4a <__divsi3+0x72>
   31c16:	e000      	b.n	31c1a <__divsi3+0x42>
   31c18:	0a09      	lsrs	r1, r1, #8
   31c1a:	0bc3      	lsrs	r3, r0, #15
   31c1c:	428b      	cmp	r3, r1
   31c1e:	d301      	bcc.n	31c24 <__divsi3+0x4c>
   31c20:	03cb      	lsls	r3, r1, #15
   31c22:	1ac0      	subs	r0, r0, r3
   31c24:	4152      	adcs	r2, r2
   31c26:	0b83      	lsrs	r3, r0, #14
   31c28:	428b      	cmp	r3, r1
   31c2a:	d301      	bcc.n	31c30 <__divsi3+0x58>
   31c2c:	038b      	lsls	r3, r1, #14
   31c2e:	1ac0      	subs	r0, r0, r3
   31c30:	4152      	adcs	r2, r2
   31c32:	0b43      	lsrs	r3, r0, #13
   31c34:	428b      	cmp	r3, r1
   31c36:	d301      	bcc.n	31c3c <__divsi3+0x64>
   31c38:	034b      	lsls	r3, r1, #13
   31c3a:	1ac0      	subs	r0, r0, r3
   31c3c:	4152      	adcs	r2, r2
   31c3e:	0b03      	lsrs	r3, r0, #12
   31c40:	428b      	cmp	r3, r1
   31c42:	d301      	bcc.n	31c48 <__divsi3+0x70>
   31c44:	030b      	lsls	r3, r1, #12
   31c46:	1ac0      	subs	r0, r0, r3
   31c48:	4152      	adcs	r2, r2
   31c4a:	0ac3      	lsrs	r3, r0, #11
   31c4c:	428b      	cmp	r3, r1
   31c4e:	d301      	bcc.n	31c54 <__divsi3+0x7c>
   31c50:	02cb      	lsls	r3, r1, #11
   31c52:	1ac0      	subs	r0, r0, r3
   31c54:	4152      	adcs	r2, r2
   31c56:	0a83      	lsrs	r3, r0, #10
   31c58:	428b      	cmp	r3, r1
   31c5a:	d301      	bcc.n	31c60 <__divsi3+0x88>
   31c5c:	028b      	lsls	r3, r1, #10
   31c5e:	1ac0      	subs	r0, r0, r3
   31c60:	4152      	adcs	r2, r2
   31c62:	0a43      	lsrs	r3, r0, #9
   31c64:	428b      	cmp	r3, r1
   31c66:	d301      	bcc.n	31c6c <__divsi3+0x94>
   31c68:	024b      	lsls	r3, r1, #9
   31c6a:	1ac0      	subs	r0, r0, r3
   31c6c:	4152      	adcs	r2, r2
   31c6e:	0a03      	lsrs	r3, r0, #8
   31c70:	428b      	cmp	r3, r1
   31c72:	d301      	bcc.n	31c78 <__divsi3+0xa0>
   31c74:	020b      	lsls	r3, r1, #8
   31c76:	1ac0      	subs	r0, r0, r3
   31c78:	4152      	adcs	r2, r2
   31c7a:	d2cd      	bcs.n	31c18 <__divsi3+0x40>
   31c7c:	09c3      	lsrs	r3, r0, #7
   31c7e:	428b      	cmp	r3, r1
   31c80:	d301      	bcc.n	31c86 <__divsi3+0xae>
   31c82:	01cb      	lsls	r3, r1, #7
   31c84:	1ac0      	subs	r0, r0, r3
   31c86:	4152      	adcs	r2, r2
   31c88:	0983      	lsrs	r3, r0, #6
   31c8a:	428b      	cmp	r3, r1
   31c8c:	d301      	bcc.n	31c92 <__divsi3+0xba>
   31c8e:	018b      	lsls	r3, r1, #6
   31c90:	1ac0      	subs	r0, r0, r3
   31c92:	4152      	adcs	r2, r2
   31c94:	0943      	lsrs	r3, r0, #5
   31c96:	428b      	cmp	r3, r1
   31c98:	d301      	bcc.n	31c9e <__divsi3+0xc6>
   31c9a:	014b      	lsls	r3, r1, #5
   31c9c:	1ac0      	subs	r0, r0, r3
   31c9e:	4152      	adcs	r2, r2
   31ca0:	0903      	lsrs	r3, r0, #4
   31ca2:	428b      	cmp	r3, r1
   31ca4:	d301      	bcc.n	31caa <__divsi3+0xd2>
   31ca6:	010b      	lsls	r3, r1, #4
   31ca8:	1ac0      	subs	r0, r0, r3
   31caa:	4152      	adcs	r2, r2
   31cac:	08c3      	lsrs	r3, r0, #3
   31cae:	428b      	cmp	r3, r1
   31cb0:	d301      	bcc.n	31cb6 <__divsi3+0xde>
   31cb2:	00cb      	lsls	r3, r1, #3
   31cb4:	1ac0      	subs	r0, r0, r3
   31cb6:	4152      	adcs	r2, r2
   31cb8:	0883      	lsrs	r3, r0, #2
   31cba:	428b      	cmp	r3, r1
   31cbc:	d301      	bcc.n	31cc2 <__divsi3+0xea>
   31cbe:	008b      	lsls	r3, r1, #2
   31cc0:	1ac0      	subs	r0, r0, r3
   31cc2:	4152      	adcs	r2, r2
   31cc4:	0843      	lsrs	r3, r0, #1
   31cc6:	428b      	cmp	r3, r1
   31cc8:	d301      	bcc.n	31cce <__divsi3+0xf6>
   31cca:	004b      	lsls	r3, r1, #1
   31ccc:	1ac0      	subs	r0, r0, r3
   31cce:	4152      	adcs	r2, r2
   31cd0:	1a41      	subs	r1, r0, r1
   31cd2:	d200      	bcs.n	31cd6 <__divsi3+0xfe>
   31cd4:	4601      	mov	r1, r0
   31cd6:	4152      	adcs	r2, r2
   31cd8:	4610      	mov	r0, r2
   31cda:	4770      	bx	lr
   31cdc:	e05d      	b.n	31d9a <__divsi3+0x1c2>
   31cde:	0fca      	lsrs	r2, r1, #31
   31ce0:	d000      	beq.n	31ce4 <__divsi3+0x10c>
   31ce2:	4249      	negs	r1, r1
   31ce4:	1003      	asrs	r3, r0, #32
   31ce6:	d300      	bcc.n	31cea <__divsi3+0x112>
   31ce8:	4240      	negs	r0, r0
   31cea:	4053      	eors	r3, r2
   31cec:	2200      	movs	r2, #0
   31cee:	469c      	mov	ip, r3
   31cf0:	0903      	lsrs	r3, r0, #4
   31cf2:	428b      	cmp	r3, r1
   31cf4:	d32d      	bcc.n	31d52 <__divsi3+0x17a>
   31cf6:	0a03      	lsrs	r3, r0, #8
   31cf8:	428b      	cmp	r3, r1
   31cfa:	d312      	bcc.n	31d22 <__divsi3+0x14a>
   31cfc:	22fc      	movs	r2, #252	; 0xfc
   31cfe:	0189      	lsls	r1, r1, #6
   31d00:	ba12      	rev	r2, r2
   31d02:	0a03      	lsrs	r3, r0, #8
   31d04:	428b      	cmp	r3, r1
   31d06:	d30c      	bcc.n	31d22 <__divsi3+0x14a>
   31d08:	0189      	lsls	r1, r1, #6
   31d0a:	1192      	asrs	r2, r2, #6
   31d0c:	428b      	cmp	r3, r1
   31d0e:	d308      	bcc.n	31d22 <__divsi3+0x14a>
   31d10:	0189      	lsls	r1, r1, #6
   31d12:	1192      	asrs	r2, r2, #6
   31d14:	428b      	cmp	r3, r1
   31d16:	d304      	bcc.n	31d22 <__divsi3+0x14a>
   31d18:	0189      	lsls	r1, r1, #6
   31d1a:	d03a      	beq.n	31d92 <__divsi3+0x1ba>
   31d1c:	1192      	asrs	r2, r2, #6
   31d1e:	e000      	b.n	31d22 <__divsi3+0x14a>
   31d20:	0989      	lsrs	r1, r1, #6
   31d22:	09c3      	lsrs	r3, r0, #7
   31d24:	428b      	cmp	r3, r1
   31d26:	d301      	bcc.n	31d2c <__divsi3+0x154>
   31d28:	01cb      	lsls	r3, r1, #7
   31d2a:	1ac0      	subs	r0, r0, r3
   31d2c:	4152      	adcs	r2, r2
   31d2e:	0983      	lsrs	r3, r0, #6
   31d30:	428b      	cmp	r3, r1
   31d32:	d301      	bcc.n	31d38 <__divsi3+0x160>
   31d34:	018b      	lsls	r3, r1, #6
   31d36:	1ac0      	subs	r0, r0, r3
   31d38:	4152      	adcs	r2, r2
   31d3a:	0943      	lsrs	r3, r0, #5
   31d3c:	428b      	cmp	r3, r1
   31d3e:	d301      	bcc.n	31d44 <__divsi3+0x16c>
   31d40:	014b      	lsls	r3, r1, #5
   31d42:	1ac0      	subs	r0, r0, r3
   31d44:	4152      	adcs	r2, r2
   31d46:	0903      	lsrs	r3, r0, #4
   31d48:	428b      	cmp	r3, r1
   31d4a:	d301      	bcc.n	31d50 <__divsi3+0x178>
   31d4c:	010b      	lsls	r3, r1, #4
   31d4e:	1ac0      	subs	r0, r0, r3
   31d50:	4152      	adcs	r2, r2
   31d52:	08c3      	lsrs	r3, r0, #3
   31d54:	428b      	cmp	r3, r1
   31d56:	d301      	bcc.n	31d5c <__divsi3+0x184>
   31d58:	00cb      	lsls	r3, r1, #3
   31d5a:	1ac0      	subs	r0, r0, r3
   31d5c:	4152      	adcs	r2, r2
   31d5e:	0883      	lsrs	r3, r0, #2
   31d60:	428b      	cmp	r3, r1
   31d62:	d301      	bcc.n	31d68 <__divsi3+0x190>
   31d64:	008b      	lsls	r3, r1, #2
   31d66:	1ac0      	subs	r0, r0, r3
   31d68:	4152      	adcs	r2, r2
   31d6a:	d2d9      	bcs.n	31d20 <__divsi3+0x148>
   31d6c:	0843      	lsrs	r3, r0, #1
   31d6e:	428b      	cmp	r3, r1
   31d70:	d301      	bcc.n	31d76 <__divsi3+0x19e>
   31d72:	004b      	lsls	r3, r1, #1
   31d74:	1ac0      	subs	r0, r0, r3
   31d76:	4152      	adcs	r2, r2
   31d78:	1a41      	subs	r1, r0, r1
   31d7a:	d200      	bcs.n	31d7e <__divsi3+0x1a6>
   31d7c:	4601      	mov	r1, r0
   31d7e:	4663      	mov	r3, ip
   31d80:	4152      	adcs	r2, r2
   31d82:	105b      	asrs	r3, r3, #1
   31d84:	4610      	mov	r0, r2
   31d86:	d301      	bcc.n	31d8c <__divsi3+0x1b4>
   31d88:	4240      	negs	r0, r0
   31d8a:	2b00      	cmp	r3, #0
   31d8c:	d500      	bpl.n	31d90 <__divsi3+0x1b8>
   31d8e:	4249      	negs	r1, r1
   31d90:	4770      	bx	lr
   31d92:	4663      	mov	r3, ip
   31d94:	105b      	asrs	r3, r3, #1
   31d96:	d300      	bcc.n	31d9a <__divsi3+0x1c2>
   31d98:	4240      	negs	r0, r0
   31d9a:	b501      	push	{r0, lr}
   31d9c:	2000      	movs	r0, #0
   31d9e:	f000 f805 	bl	31dac <__aeabi_idiv0>
   31da2:	bd02      	pop	{r1, pc}

00031da4 <__aeabi_idivmod>:
   31da4:	2900      	cmp	r1, #0
   31da6:	d0f8      	beq.n	31d9a <__divsi3+0x1c2>
   31da8:	e716      	b.n	31bd8 <__divsi3>
   31daa:	4770      	bx	lr

00031dac <__aeabi_idiv0>:
   31dac:	4770      	bx	lr
   31dae:	46c0      	nop			; (mov r8, r8)

00031db0 <__aeabi_lmul>:
   31db0:	b5f0      	push	{r4, r5, r6, r7, lr}
   31db2:	46ce      	mov	lr, r9
   31db4:	4647      	mov	r7, r8
   31db6:	0415      	lsls	r5, r2, #16
   31db8:	0c2d      	lsrs	r5, r5, #16
   31dba:	002e      	movs	r6, r5
   31dbc:	b580      	push	{r7, lr}
   31dbe:	0407      	lsls	r7, r0, #16
   31dc0:	0c14      	lsrs	r4, r2, #16
   31dc2:	0c3f      	lsrs	r7, r7, #16
   31dc4:	4699      	mov	r9, r3
   31dc6:	0c03      	lsrs	r3, r0, #16
   31dc8:	437e      	muls	r6, r7
   31dca:	435d      	muls	r5, r3
   31dcc:	4367      	muls	r7, r4
   31dce:	4363      	muls	r3, r4
   31dd0:	197f      	adds	r7, r7, r5
   31dd2:	0c34      	lsrs	r4, r6, #16
   31dd4:	19e4      	adds	r4, r4, r7
   31dd6:	469c      	mov	ip, r3
   31dd8:	42a5      	cmp	r5, r4
   31dda:	d903      	bls.n	31de4 <__aeabi_lmul+0x34>
   31ddc:	2380      	movs	r3, #128	; 0x80
   31dde:	025b      	lsls	r3, r3, #9
   31de0:	4698      	mov	r8, r3
   31de2:	44c4      	add	ip, r8
   31de4:	464b      	mov	r3, r9
   31de6:	4351      	muls	r1, r2
   31de8:	4343      	muls	r3, r0
   31dea:	0436      	lsls	r6, r6, #16
   31dec:	0c36      	lsrs	r6, r6, #16
   31dee:	0c25      	lsrs	r5, r4, #16
   31df0:	0424      	lsls	r4, r4, #16
   31df2:	4465      	add	r5, ip
   31df4:	19a4      	adds	r4, r4, r6
   31df6:	1859      	adds	r1, r3, r1
   31df8:	1949      	adds	r1, r1, r5
   31dfa:	0020      	movs	r0, r4
   31dfc:	bc0c      	pop	{r2, r3}
   31dfe:	4690      	mov	r8, r2
   31e00:	4699      	mov	r9, r3
   31e02:	bdf0      	pop	{r4, r5, r6, r7, pc}

00031e04 <__aeabi_f2uiz>:
   31e04:	219e      	movs	r1, #158	; 0x9e
   31e06:	b510      	push	{r4, lr}
   31e08:	05c9      	lsls	r1, r1, #23
   31e0a:	1c04      	adds	r4, r0, #0
   31e0c:	f002 fa8e 	bl	3432c <__aeabi_fcmpge>
   31e10:	2800      	cmp	r0, #0
   31e12:	d103      	bne.n	31e1c <__aeabi_f2uiz+0x18>
   31e14:	1c20      	adds	r0, r4, #0
   31e16:	f000 fda3 	bl	32960 <__aeabi_f2iz>
   31e1a:	bd10      	pop	{r4, pc}
   31e1c:	219e      	movs	r1, #158	; 0x9e
   31e1e:	1c20      	adds	r0, r4, #0
   31e20:	05c9      	lsls	r1, r1, #23
   31e22:	f000 fc01 	bl	32628 <__aeabi_fsub>
   31e26:	f000 fd9b 	bl	32960 <__aeabi_f2iz>
   31e2a:	2380      	movs	r3, #128	; 0x80
   31e2c:	061b      	lsls	r3, r3, #24
   31e2e:	469c      	mov	ip, r3
   31e30:	4460      	add	r0, ip
   31e32:	e7f2      	b.n	31e1a <__aeabi_f2uiz+0x16>

00031e34 <__aeabi_fadd>:
   31e34:	b5f0      	push	{r4, r5, r6, r7, lr}
   31e36:	46c6      	mov	lr, r8
   31e38:	024e      	lsls	r6, r1, #9
   31e3a:	0247      	lsls	r7, r0, #9
   31e3c:	0a76      	lsrs	r6, r6, #9
   31e3e:	0a7b      	lsrs	r3, r7, #9
   31e40:	0044      	lsls	r4, r0, #1
   31e42:	0fc5      	lsrs	r5, r0, #31
   31e44:	00f7      	lsls	r7, r6, #3
   31e46:	0048      	lsls	r0, r1, #1
   31e48:	4698      	mov	r8, r3
   31e4a:	b500      	push	{lr}
   31e4c:	0e24      	lsrs	r4, r4, #24
   31e4e:	002a      	movs	r2, r5
   31e50:	00db      	lsls	r3, r3, #3
   31e52:	0e00      	lsrs	r0, r0, #24
   31e54:	0fc9      	lsrs	r1, r1, #31
   31e56:	46bc      	mov	ip, r7
   31e58:	428d      	cmp	r5, r1
   31e5a:	d067      	beq.n	31f2c <__aeabi_fadd+0xf8>
   31e5c:	1a22      	subs	r2, r4, r0
   31e5e:	2a00      	cmp	r2, #0
   31e60:	dc00      	bgt.n	31e64 <__aeabi_fadd+0x30>
   31e62:	e0a5      	b.n	31fb0 <__aeabi_fadd+0x17c>
   31e64:	2800      	cmp	r0, #0
   31e66:	d13a      	bne.n	31ede <__aeabi_fadd+0xaa>
   31e68:	2f00      	cmp	r7, #0
   31e6a:	d100      	bne.n	31e6e <__aeabi_fadd+0x3a>
   31e6c:	e093      	b.n	31f96 <__aeabi_fadd+0x162>
   31e6e:	1e51      	subs	r1, r2, #1
   31e70:	2900      	cmp	r1, #0
   31e72:	d000      	beq.n	31e76 <__aeabi_fadd+0x42>
   31e74:	e0bc      	b.n	31ff0 <__aeabi_fadd+0x1bc>
   31e76:	2401      	movs	r4, #1
   31e78:	1bdb      	subs	r3, r3, r7
   31e7a:	015a      	lsls	r2, r3, #5
   31e7c:	d546      	bpl.n	31f0c <__aeabi_fadd+0xd8>
   31e7e:	019b      	lsls	r3, r3, #6
   31e80:	099e      	lsrs	r6, r3, #6
   31e82:	0030      	movs	r0, r6
   31e84:	f002 fa5c 	bl	34340 <__clzsi2>
   31e88:	3805      	subs	r0, #5
   31e8a:	4086      	lsls	r6, r0
   31e8c:	4284      	cmp	r4, r0
   31e8e:	dd00      	ble.n	31e92 <__aeabi_fadd+0x5e>
   31e90:	e09d      	b.n	31fce <__aeabi_fadd+0x19a>
   31e92:	1b04      	subs	r4, r0, r4
   31e94:	0032      	movs	r2, r6
   31e96:	2020      	movs	r0, #32
   31e98:	3401      	adds	r4, #1
   31e9a:	40e2      	lsrs	r2, r4
   31e9c:	1b04      	subs	r4, r0, r4
   31e9e:	40a6      	lsls	r6, r4
   31ea0:	0033      	movs	r3, r6
   31ea2:	1e5e      	subs	r6, r3, #1
   31ea4:	41b3      	sbcs	r3, r6
   31ea6:	2400      	movs	r4, #0
   31ea8:	4313      	orrs	r3, r2
   31eaa:	075a      	lsls	r2, r3, #29
   31eac:	d004      	beq.n	31eb8 <__aeabi_fadd+0x84>
   31eae:	220f      	movs	r2, #15
   31eb0:	401a      	ands	r2, r3
   31eb2:	2a04      	cmp	r2, #4
   31eb4:	d000      	beq.n	31eb8 <__aeabi_fadd+0x84>
   31eb6:	3304      	adds	r3, #4
   31eb8:	015a      	lsls	r2, r3, #5
   31eba:	d529      	bpl.n	31f10 <__aeabi_fadd+0xdc>
   31ebc:	3401      	adds	r4, #1
   31ebe:	2cff      	cmp	r4, #255	; 0xff
   31ec0:	d100      	bne.n	31ec4 <__aeabi_fadd+0x90>
   31ec2:	e081      	b.n	31fc8 <__aeabi_fadd+0x194>
   31ec4:	002a      	movs	r2, r5
   31ec6:	019b      	lsls	r3, r3, #6
   31ec8:	0a5b      	lsrs	r3, r3, #9
   31eca:	b2e4      	uxtb	r4, r4
   31ecc:	025b      	lsls	r3, r3, #9
   31ece:	05e4      	lsls	r4, r4, #23
   31ed0:	0a58      	lsrs	r0, r3, #9
   31ed2:	07d2      	lsls	r2, r2, #31
   31ed4:	4320      	orrs	r0, r4
   31ed6:	4310      	orrs	r0, r2
   31ed8:	bc04      	pop	{r2}
   31eda:	4690      	mov	r8, r2
   31edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31ede:	2cff      	cmp	r4, #255	; 0xff
   31ee0:	d0e3      	beq.n	31eaa <__aeabi_fadd+0x76>
   31ee2:	2180      	movs	r1, #128	; 0x80
   31ee4:	0038      	movs	r0, r7
   31ee6:	04c9      	lsls	r1, r1, #19
   31ee8:	4308      	orrs	r0, r1
   31eea:	4684      	mov	ip, r0
   31eec:	2a1b      	cmp	r2, #27
   31eee:	dd00      	ble.n	31ef2 <__aeabi_fadd+0xbe>
   31ef0:	e082      	b.n	31ff8 <__aeabi_fadd+0x1c4>
   31ef2:	2020      	movs	r0, #32
   31ef4:	4661      	mov	r1, ip
   31ef6:	40d1      	lsrs	r1, r2
   31ef8:	1a82      	subs	r2, r0, r2
   31efa:	4660      	mov	r0, ip
   31efc:	4090      	lsls	r0, r2
   31efe:	0002      	movs	r2, r0
   31f00:	1e50      	subs	r0, r2, #1
   31f02:	4182      	sbcs	r2, r0
   31f04:	430a      	orrs	r2, r1
   31f06:	1a9b      	subs	r3, r3, r2
   31f08:	015a      	lsls	r2, r3, #5
   31f0a:	d4b8      	bmi.n	31e7e <__aeabi_fadd+0x4a>
   31f0c:	075a      	lsls	r2, r3, #29
   31f0e:	d1ce      	bne.n	31eae <__aeabi_fadd+0x7a>
   31f10:	08de      	lsrs	r6, r3, #3
   31f12:	002a      	movs	r2, r5
   31f14:	2cff      	cmp	r4, #255	; 0xff
   31f16:	d13a      	bne.n	31f8e <__aeabi_fadd+0x15a>
   31f18:	2e00      	cmp	r6, #0
   31f1a:	d100      	bne.n	31f1e <__aeabi_fadd+0xea>
   31f1c:	e0ae      	b.n	3207c <__aeabi_fadd+0x248>
   31f1e:	2380      	movs	r3, #128	; 0x80
   31f20:	03db      	lsls	r3, r3, #15
   31f22:	4333      	orrs	r3, r6
   31f24:	025b      	lsls	r3, r3, #9
   31f26:	0a5b      	lsrs	r3, r3, #9
   31f28:	24ff      	movs	r4, #255	; 0xff
   31f2a:	e7cf      	b.n	31ecc <__aeabi_fadd+0x98>
   31f2c:	1a21      	subs	r1, r4, r0
   31f2e:	2900      	cmp	r1, #0
   31f30:	dd52      	ble.n	31fd8 <__aeabi_fadd+0x1a4>
   31f32:	2800      	cmp	r0, #0
   31f34:	d031      	beq.n	31f9a <__aeabi_fadd+0x166>
   31f36:	2cff      	cmp	r4, #255	; 0xff
   31f38:	d0b7      	beq.n	31eaa <__aeabi_fadd+0x76>
   31f3a:	2080      	movs	r0, #128	; 0x80
   31f3c:	003e      	movs	r6, r7
   31f3e:	04c0      	lsls	r0, r0, #19
   31f40:	4306      	orrs	r6, r0
   31f42:	46b4      	mov	ip, r6
   31f44:	291b      	cmp	r1, #27
   31f46:	dd00      	ble.n	31f4a <__aeabi_fadd+0x116>
   31f48:	e0aa      	b.n	320a0 <__aeabi_fadd+0x26c>
   31f4a:	2620      	movs	r6, #32
   31f4c:	4660      	mov	r0, ip
   31f4e:	40c8      	lsrs	r0, r1
   31f50:	1a71      	subs	r1, r6, r1
   31f52:	4666      	mov	r6, ip
   31f54:	408e      	lsls	r6, r1
   31f56:	0031      	movs	r1, r6
   31f58:	1e4e      	subs	r6, r1, #1
   31f5a:	41b1      	sbcs	r1, r6
   31f5c:	4301      	orrs	r1, r0
   31f5e:	185b      	adds	r3, r3, r1
   31f60:	0159      	lsls	r1, r3, #5
   31f62:	d5d3      	bpl.n	31f0c <__aeabi_fadd+0xd8>
   31f64:	3401      	adds	r4, #1
   31f66:	2cff      	cmp	r4, #255	; 0xff
   31f68:	d100      	bne.n	31f6c <__aeabi_fadd+0x138>
   31f6a:	e087      	b.n	3207c <__aeabi_fadd+0x248>
   31f6c:	2201      	movs	r2, #1
   31f6e:	4978      	ldr	r1, [pc, #480]	; (32150 <__aeabi_fadd+0x31c>)
   31f70:	401a      	ands	r2, r3
   31f72:	085b      	lsrs	r3, r3, #1
   31f74:	400b      	ands	r3, r1
   31f76:	4313      	orrs	r3, r2
   31f78:	e797      	b.n	31eaa <__aeabi_fadd+0x76>
   31f7a:	2c00      	cmp	r4, #0
   31f7c:	d000      	beq.n	31f80 <__aeabi_fadd+0x14c>
   31f7e:	e0a7      	b.n	320d0 <__aeabi_fadd+0x29c>
   31f80:	2b00      	cmp	r3, #0
   31f82:	d000      	beq.n	31f86 <__aeabi_fadd+0x152>
   31f84:	e0b6      	b.n	320f4 <__aeabi_fadd+0x2c0>
   31f86:	1e3b      	subs	r3, r7, #0
   31f88:	d162      	bne.n	32050 <__aeabi_fadd+0x21c>
   31f8a:	2600      	movs	r6, #0
   31f8c:	2200      	movs	r2, #0
   31f8e:	0273      	lsls	r3, r6, #9
   31f90:	0a5b      	lsrs	r3, r3, #9
   31f92:	b2e4      	uxtb	r4, r4
   31f94:	e79a      	b.n	31ecc <__aeabi_fadd+0x98>
   31f96:	0014      	movs	r4, r2
   31f98:	e787      	b.n	31eaa <__aeabi_fadd+0x76>
   31f9a:	2f00      	cmp	r7, #0
   31f9c:	d04d      	beq.n	3203a <__aeabi_fadd+0x206>
   31f9e:	1e48      	subs	r0, r1, #1
   31fa0:	2800      	cmp	r0, #0
   31fa2:	d157      	bne.n	32054 <__aeabi_fadd+0x220>
   31fa4:	4463      	add	r3, ip
   31fa6:	2401      	movs	r4, #1
   31fa8:	015a      	lsls	r2, r3, #5
   31faa:	d5af      	bpl.n	31f0c <__aeabi_fadd+0xd8>
   31fac:	2402      	movs	r4, #2
   31fae:	e7dd      	b.n	31f6c <__aeabi_fadd+0x138>
   31fb0:	2a00      	cmp	r2, #0
   31fb2:	d124      	bne.n	31ffe <__aeabi_fadd+0x1ca>
   31fb4:	1c62      	adds	r2, r4, #1
   31fb6:	b2d2      	uxtb	r2, r2
   31fb8:	2a01      	cmp	r2, #1
   31fba:	ddde      	ble.n	31f7a <__aeabi_fadd+0x146>
   31fbc:	1bde      	subs	r6, r3, r7
   31fbe:	0172      	lsls	r2, r6, #5
   31fc0:	d535      	bpl.n	3202e <__aeabi_fadd+0x1fa>
   31fc2:	1afe      	subs	r6, r7, r3
   31fc4:	000d      	movs	r5, r1
   31fc6:	e75c      	b.n	31e82 <__aeabi_fadd+0x4e>
   31fc8:	002a      	movs	r2, r5
   31fca:	2300      	movs	r3, #0
   31fcc:	e77e      	b.n	31ecc <__aeabi_fadd+0x98>
   31fce:	0033      	movs	r3, r6
   31fd0:	4a60      	ldr	r2, [pc, #384]	; (32154 <__aeabi_fadd+0x320>)
   31fd2:	1a24      	subs	r4, r4, r0
   31fd4:	4013      	ands	r3, r2
   31fd6:	e768      	b.n	31eaa <__aeabi_fadd+0x76>
   31fd8:	2900      	cmp	r1, #0
   31fda:	d163      	bne.n	320a4 <__aeabi_fadd+0x270>
   31fdc:	1c61      	adds	r1, r4, #1
   31fde:	b2c8      	uxtb	r0, r1
   31fe0:	2801      	cmp	r0, #1
   31fe2:	dd4e      	ble.n	32082 <__aeabi_fadd+0x24e>
   31fe4:	29ff      	cmp	r1, #255	; 0xff
   31fe6:	d049      	beq.n	3207c <__aeabi_fadd+0x248>
   31fe8:	4463      	add	r3, ip
   31fea:	085b      	lsrs	r3, r3, #1
   31fec:	000c      	movs	r4, r1
   31fee:	e75c      	b.n	31eaa <__aeabi_fadd+0x76>
   31ff0:	2aff      	cmp	r2, #255	; 0xff
   31ff2:	d041      	beq.n	32078 <__aeabi_fadd+0x244>
   31ff4:	000a      	movs	r2, r1
   31ff6:	e779      	b.n	31eec <__aeabi_fadd+0xb8>
   31ff8:	2201      	movs	r2, #1
   31ffa:	1a9b      	subs	r3, r3, r2
   31ffc:	e784      	b.n	31f08 <__aeabi_fadd+0xd4>
   31ffe:	2c00      	cmp	r4, #0
   32000:	d01d      	beq.n	3203e <__aeabi_fadd+0x20a>
   32002:	28ff      	cmp	r0, #255	; 0xff
   32004:	d022      	beq.n	3204c <__aeabi_fadd+0x218>
   32006:	2480      	movs	r4, #128	; 0x80
   32008:	04e4      	lsls	r4, r4, #19
   3200a:	4252      	negs	r2, r2
   3200c:	4323      	orrs	r3, r4
   3200e:	2a1b      	cmp	r2, #27
   32010:	dd00      	ble.n	32014 <__aeabi_fadd+0x1e0>
   32012:	e08a      	b.n	3212a <__aeabi_fadd+0x2f6>
   32014:	001c      	movs	r4, r3
   32016:	2520      	movs	r5, #32
   32018:	40d4      	lsrs	r4, r2
   3201a:	1aaa      	subs	r2, r5, r2
   3201c:	4093      	lsls	r3, r2
   3201e:	1e5a      	subs	r2, r3, #1
   32020:	4193      	sbcs	r3, r2
   32022:	4323      	orrs	r3, r4
   32024:	4662      	mov	r2, ip
   32026:	0004      	movs	r4, r0
   32028:	1ad3      	subs	r3, r2, r3
   3202a:	000d      	movs	r5, r1
   3202c:	e725      	b.n	31e7a <__aeabi_fadd+0x46>
   3202e:	2e00      	cmp	r6, #0
   32030:	d000      	beq.n	32034 <__aeabi_fadd+0x200>
   32032:	e726      	b.n	31e82 <__aeabi_fadd+0x4e>
   32034:	2200      	movs	r2, #0
   32036:	2400      	movs	r4, #0
   32038:	e7a9      	b.n	31f8e <__aeabi_fadd+0x15a>
   3203a:	000c      	movs	r4, r1
   3203c:	e735      	b.n	31eaa <__aeabi_fadd+0x76>
   3203e:	2b00      	cmp	r3, #0
   32040:	d04d      	beq.n	320de <__aeabi_fadd+0x2aa>
   32042:	43d2      	mvns	r2, r2
   32044:	2a00      	cmp	r2, #0
   32046:	d0ed      	beq.n	32024 <__aeabi_fadd+0x1f0>
   32048:	28ff      	cmp	r0, #255	; 0xff
   3204a:	d1e0      	bne.n	3200e <__aeabi_fadd+0x1da>
   3204c:	4663      	mov	r3, ip
   3204e:	24ff      	movs	r4, #255	; 0xff
   32050:	000d      	movs	r5, r1
   32052:	e72a      	b.n	31eaa <__aeabi_fadd+0x76>
   32054:	29ff      	cmp	r1, #255	; 0xff
   32056:	d00f      	beq.n	32078 <__aeabi_fadd+0x244>
   32058:	0001      	movs	r1, r0
   3205a:	e773      	b.n	31f44 <__aeabi_fadd+0x110>
   3205c:	2b00      	cmp	r3, #0
   3205e:	d061      	beq.n	32124 <__aeabi_fadd+0x2f0>
   32060:	24ff      	movs	r4, #255	; 0xff
   32062:	2f00      	cmp	r7, #0
   32064:	d100      	bne.n	32068 <__aeabi_fadd+0x234>
   32066:	e720      	b.n	31eaa <__aeabi_fadd+0x76>
   32068:	2280      	movs	r2, #128	; 0x80
   3206a:	4641      	mov	r1, r8
   3206c:	03d2      	lsls	r2, r2, #15
   3206e:	4211      	tst	r1, r2
   32070:	d002      	beq.n	32078 <__aeabi_fadd+0x244>
   32072:	4216      	tst	r6, r2
   32074:	d100      	bne.n	32078 <__aeabi_fadd+0x244>
   32076:	003b      	movs	r3, r7
   32078:	24ff      	movs	r4, #255	; 0xff
   3207a:	e716      	b.n	31eaa <__aeabi_fadd+0x76>
   3207c:	24ff      	movs	r4, #255	; 0xff
   3207e:	2300      	movs	r3, #0
   32080:	e724      	b.n	31ecc <__aeabi_fadd+0x98>
   32082:	2c00      	cmp	r4, #0
   32084:	d1ea      	bne.n	3205c <__aeabi_fadd+0x228>
   32086:	2b00      	cmp	r3, #0
   32088:	d058      	beq.n	3213c <__aeabi_fadd+0x308>
   3208a:	2f00      	cmp	r7, #0
   3208c:	d100      	bne.n	32090 <__aeabi_fadd+0x25c>
   3208e:	e70c      	b.n	31eaa <__aeabi_fadd+0x76>
   32090:	4463      	add	r3, ip
   32092:	015a      	lsls	r2, r3, #5
   32094:	d400      	bmi.n	32098 <__aeabi_fadd+0x264>
   32096:	e739      	b.n	31f0c <__aeabi_fadd+0xd8>
   32098:	4a2e      	ldr	r2, [pc, #184]	; (32154 <__aeabi_fadd+0x320>)
   3209a:	000c      	movs	r4, r1
   3209c:	4013      	ands	r3, r2
   3209e:	e704      	b.n	31eaa <__aeabi_fadd+0x76>
   320a0:	2101      	movs	r1, #1
   320a2:	e75c      	b.n	31f5e <__aeabi_fadd+0x12a>
   320a4:	2c00      	cmp	r4, #0
   320a6:	d11e      	bne.n	320e6 <__aeabi_fadd+0x2b2>
   320a8:	2b00      	cmp	r3, #0
   320aa:	d040      	beq.n	3212e <__aeabi_fadd+0x2fa>
   320ac:	43c9      	mvns	r1, r1
   320ae:	2900      	cmp	r1, #0
   320b0:	d00b      	beq.n	320ca <__aeabi_fadd+0x296>
   320b2:	28ff      	cmp	r0, #255	; 0xff
   320b4:	d036      	beq.n	32124 <__aeabi_fadd+0x2f0>
   320b6:	291b      	cmp	r1, #27
   320b8:	dc47      	bgt.n	3214a <__aeabi_fadd+0x316>
   320ba:	001c      	movs	r4, r3
   320bc:	2620      	movs	r6, #32
   320be:	40cc      	lsrs	r4, r1
   320c0:	1a71      	subs	r1, r6, r1
   320c2:	408b      	lsls	r3, r1
   320c4:	1e59      	subs	r1, r3, #1
   320c6:	418b      	sbcs	r3, r1
   320c8:	4323      	orrs	r3, r4
   320ca:	4463      	add	r3, ip
   320cc:	0004      	movs	r4, r0
   320ce:	e747      	b.n	31f60 <__aeabi_fadd+0x12c>
   320d0:	2b00      	cmp	r3, #0
   320d2:	d118      	bne.n	32106 <__aeabi_fadd+0x2d2>
   320d4:	1e3b      	subs	r3, r7, #0
   320d6:	d02d      	beq.n	32134 <__aeabi_fadd+0x300>
   320d8:	000d      	movs	r5, r1
   320da:	24ff      	movs	r4, #255	; 0xff
   320dc:	e6e5      	b.n	31eaa <__aeabi_fadd+0x76>
   320de:	003b      	movs	r3, r7
   320e0:	0004      	movs	r4, r0
   320e2:	000d      	movs	r5, r1
   320e4:	e6e1      	b.n	31eaa <__aeabi_fadd+0x76>
   320e6:	28ff      	cmp	r0, #255	; 0xff
   320e8:	d01c      	beq.n	32124 <__aeabi_fadd+0x2f0>
   320ea:	2480      	movs	r4, #128	; 0x80
   320ec:	04e4      	lsls	r4, r4, #19
   320ee:	4249      	negs	r1, r1
   320f0:	4323      	orrs	r3, r4
   320f2:	e7e0      	b.n	320b6 <__aeabi_fadd+0x282>
   320f4:	2f00      	cmp	r7, #0
   320f6:	d100      	bne.n	320fa <__aeabi_fadd+0x2c6>
   320f8:	e6d7      	b.n	31eaa <__aeabi_fadd+0x76>
   320fa:	1bde      	subs	r6, r3, r7
   320fc:	0172      	lsls	r2, r6, #5
   320fe:	d51f      	bpl.n	32140 <__aeabi_fadd+0x30c>
   32100:	1afb      	subs	r3, r7, r3
   32102:	000d      	movs	r5, r1
   32104:	e6d1      	b.n	31eaa <__aeabi_fadd+0x76>
   32106:	24ff      	movs	r4, #255	; 0xff
   32108:	2f00      	cmp	r7, #0
   3210a:	d100      	bne.n	3210e <__aeabi_fadd+0x2da>
   3210c:	e6cd      	b.n	31eaa <__aeabi_fadd+0x76>
   3210e:	2280      	movs	r2, #128	; 0x80
   32110:	4640      	mov	r0, r8
   32112:	03d2      	lsls	r2, r2, #15
   32114:	4210      	tst	r0, r2
   32116:	d0af      	beq.n	32078 <__aeabi_fadd+0x244>
   32118:	4216      	tst	r6, r2
   3211a:	d1ad      	bne.n	32078 <__aeabi_fadd+0x244>
   3211c:	003b      	movs	r3, r7
   3211e:	000d      	movs	r5, r1
   32120:	24ff      	movs	r4, #255	; 0xff
   32122:	e6c2      	b.n	31eaa <__aeabi_fadd+0x76>
   32124:	4663      	mov	r3, ip
   32126:	24ff      	movs	r4, #255	; 0xff
   32128:	e6bf      	b.n	31eaa <__aeabi_fadd+0x76>
   3212a:	2301      	movs	r3, #1
   3212c:	e77a      	b.n	32024 <__aeabi_fadd+0x1f0>
   3212e:	003b      	movs	r3, r7
   32130:	0004      	movs	r4, r0
   32132:	e6ba      	b.n	31eaa <__aeabi_fadd+0x76>
   32134:	2680      	movs	r6, #128	; 0x80
   32136:	2200      	movs	r2, #0
   32138:	03f6      	lsls	r6, r6, #15
   3213a:	e6f0      	b.n	31f1e <__aeabi_fadd+0xea>
   3213c:	003b      	movs	r3, r7
   3213e:	e6b4      	b.n	31eaa <__aeabi_fadd+0x76>
   32140:	1e33      	subs	r3, r6, #0
   32142:	d000      	beq.n	32146 <__aeabi_fadd+0x312>
   32144:	e6e2      	b.n	31f0c <__aeabi_fadd+0xd8>
   32146:	2200      	movs	r2, #0
   32148:	e721      	b.n	31f8e <__aeabi_fadd+0x15a>
   3214a:	2301      	movs	r3, #1
   3214c:	e7bd      	b.n	320ca <__aeabi_fadd+0x296>
   3214e:	46c0      	nop			; (mov r8, r8)
   32150:	7dffffff 	.word	0x7dffffff
   32154:	fbffffff 	.word	0xfbffffff

00032158 <__aeabi_fdiv>:
   32158:	b5f0      	push	{r4, r5, r6, r7, lr}
   3215a:	4657      	mov	r7, sl
   3215c:	464e      	mov	r6, r9
   3215e:	46de      	mov	lr, fp
   32160:	4645      	mov	r5, r8
   32162:	b5e0      	push	{r5, r6, r7, lr}
   32164:	0244      	lsls	r4, r0, #9
   32166:	0043      	lsls	r3, r0, #1
   32168:	0fc6      	lsrs	r6, r0, #31
   3216a:	b083      	sub	sp, #12
   3216c:	1c0f      	adds	r7, r1, #0
   3216e:	0a64      	lsrs	r4, r4, #9
   32170:	0e1b      	lsrs	r3, r3, #24
   32172:	46b2      	mov	sl, r6
   32174:	d053      	beq.n	3221e <__aeabi_fdiv+0xc6>
   32176:	2bff      	cmp	r3, #255	; 0xff
   32178:	d027      	beq.n	321ca <__aeabi_fdiv+0x72>
   3217a:	2280      	movs	r2, #128	; 0x80
   3217c:	00e4      	lsls	r4, r4, #3
   3217e:	04d2      	lsls	r2, r2, #19
   32180:	4314      	orrs	r4, r2
   32182:	227f      	movs	r2, #127	; 0x7f
   32184:	4252      	negs	r2, r2
   32186:	4690      	mov	r8, r2
   32188:	4498      	add	r8, r3
   3218a:	2300      	movs	r3, #0
   3218c:	4699      	mov	r9, r3
   3218e:	469b      	mov	fp, r3
   32190:	027d      	lsls	r5, r7, #9
   32192:	0078      	lsls	r0, r7, #1
   32194:	0ffb      	lsrs	r3, r7, #31
   32196:	0a6d      	lsrs	r5, r5, #9
   32198:	0e00      	lsrs	r0, r0, #24
   3219a:	9300      	str	r3, [sp, #0]
   3219c:	d024      	beq.n	321e8 <__aeabi_fdiv+0x90>
   3219e:	28ff      	cmp	r0, #255	; 0xff
   321a0:	d046      	beq.n	32230 <__aeabi_fdiv+0xd8>
   321a2:	2380      	movs	r3, #128	; 0x80
   321a4:	2100      	movs	r1, #0
   321a6:	00ed      	lsls	r5, r5, #3
   321a8:	04db      	lsls	r3, r3, #19
   321aa:	431d      	orrs	r5, r3
   321ac:	387f      	subs	r0, #127	; 0x7f
   321ae:	4647      	mov	r7, r8
   321b0:	1a38      	subs	r0, r7, r0
   321b2:	464f      	mov	r7, r9
   321b4:	430f      	orrs	r7, r1
   321b6:	00bf      	lsls	r7, r7, #2
   321b8:	46b9      	mov	r9, r7
   321ba:	0033      	movs	r3, r6
   321bc:	9a00      	ldr	r2, [sp, #0]
   321be:	4f87      	ldr	r7, [pc, #540]	; (323dc <__aeabi_fdiv+0x284>)
   321c0:	4053      	eors	r3, r2
   321c2:	464a      	mov	r2, r9
   321c4:	58ba      	ldr	r2, [r7, r2]
   321c6:	9301      	str	r3, [sp, #4]
   321c8:	4697      	mov	pc, r2
   321ca:	2c00      	cmp	r4, #0
   321cc:	d14e      	bne.n	3226c <__aeabi_fdiv+0x114>
   321ce:	2308      	movs	r3, #8
   321d0:	4699      	mov	r9, r3
   321d2:	33f7      	adds	r3, #247	; 0xf7
   321d4:	4698      	mov	r8, r3
   321d6:	3bfd      	subs	r3, #253	; 0xfd
   321d8:	469b      	mov	fp, r3
   321da:	027d      	lsls	r5, r7, #9
   321dc:	0078      	lsls	r0, r7, #1
   321de:	0ffb      	lsrs	r3, r7, #31
   321e0:	0a6d      	lsrs	r5, r5, #9
   321e2:	0e00      	lsrs	r0, r0, #24
   321e4:	9300      	str	r3, [sp, #0]
   321e6:	d1da      	bne.n	3219e <__aeabi_fdiv+0x46>
   321e8:	2d00      	cmp	r5, #0
   321ea:	d126      	bne.n	3223a <__aeabi_fdiv+0xe2>
   321ec:	2000      	movs	r0, #0
   321ee:	2101      	movs	r1, #1
   321f0:	0033      	movs	r3, r6
   321f2:	9a00      	ldr	r2, [sp, #0]
   321f4:	4f7a      	ldr	r7, [pc, #488]	; (323e0 <__aeabi_fdiv+0x288>)
   321f6:	4053      	eors	r3, r2
   321f8:	4642      	mov	r2, r8
   321fa:	1a10      	subs	r0, r2, r0
   321fc:	464a      	mov	r2, r9
   321fe:	430a      	orrs	r2, r1
   32200:	0092      	lsls	r2, r2, #2
   32202:	58ba      	ldr	r2, [r7, r2]
   32204:	001d      	movs	r5, r3
   32206:	4697      	mov	pc, r2
   32208:	9b00      	ldr	r3, [sp, #0]
   3220a:	002c      	movs	r4, r5
   3220c:	469a      	mov	sl, r3
   3220e:	468b      	mov	fp, r1
   32210:	465b      	mov	r3, fp
   32212:	2b02      	cmp	r3, #2
   32214:	d131      	bne.n	3227a <__aeabi_fdiv+0x122>
   32216:	4653      	mov	r3, sl
   32218:	21ff      	movs	r1, #255	; 0xff
   3221a:	2400      	movs	r4, #0
   3221c:	e038      	b.n	32290 <__aeabi_fdiv+0x138>
   3221e:	2c00      	cmp	r4, #0
   32220:	d117      	bne.n	32252 <__aeabi_fdiv+0xfa>
   32222:	2304      	movs	r3, #4
   32224:	4699      	mov	r9, r3
   32226:	2300      	movs	r3, #0
   32228:	4698      	mov	r8, r3
   3222a:	3301      	adds	r3, #1
   3222c:	469b      	mov	fp, r3
   3222e:	e7af      	b.n	32190 <__aeabi_fdiv+0x38>
   32230:	20ff      	movs	r0, #255	; 0xff
   32232:	2d00      	cmp	r5, #0
   32234:	d10b      	bne.n	3224e <__aeabi_fdiv+0xf6>
   32236:	2102      	movs	r1, #2
   32238:	e7da      	b.n	321f0 <__aeabi_fdiv+0x98>
   3223a:	0028      	movs	r0, r5
   3223c:	f002 f880 	bl	34340 <__clzsi2>
   32240:	1f43      	subs	r3, r0, #5
   32242:	409d      	lsls	r5, r3
   32244:	2376      	movs	r3, #118	; 0x76
   32246:	425b      	negs	r3, r3
   32248:	1a18      	subs	r0, r3, r0
   3224a:	2100      	movs	r1, #0
   3224c:	e7af      	b.n	321ae <__aeabi_fdiv+0x56>
   3224e:	2103      	movs	r1, #3
   32250:	e7ad      	b.n	321ae <__aeabi_fdiv+0x56>
   32252:	0020      	movs	r0, r4
   32254:	f002 f874 	bl	34340 <__clzsi2>
   32258:	1f43      	subs	r3, r0, #5
   3225a:	409c      	lsls	r4, r3
   3225c:	2376      	movs	r3, #118	; 0x76
   3225e:	425b      	negs	r3, r3
   32260:	1a1b      	subs	r3, r3, r0
   32262:	4698      	mov	r8, r3
   32264:	2300      	movs	r3, #0
   32266:	4699      	mov	r9, r3
   32268:	469b      	mov	fp, r3
   3226a:	e791      	b.n	32190 <__aeabi_fdiv+0x38>
   3226c:	230c      	movs	r3, #12
   3226e:	4699      	mov	r9, r3
   32270:	33f3      	adds	r3, #243	; 0xf3
   32272:	4698      	mov	r8, r3
   32274:	3bfc      	subs	r3, #252	; 0xfc
   32276:	469b      	mov	fp, r3
   32278:	e78a      	b.n	32190 <__aeabi_fdiv+0x38>
   3227a:	2b03      	cmp	r3, #3
   3227c:	d100      	bne.n	32280 <__aeabi_fdiv+0x128>
   3227e:	e0a5      	b.n	323cc <__aeabi_fdiv+0x274>
   32280:	4655      	mov	r5, sl
   32282:	2b01      	cmp	r3, #1
   32284:	d000      	beq.n	32288 <__aeabi_fdiv+0x130>
   32286:	e081      	b.n	3238c <__aeabi_fdiv+0x234>
   32288:	2301      	movs	r3, #1
   3228a:	2100      	movs	r1, #0
   3228c:	2400      	movs	r4, #0
   3228e:	402b      	ands	r3, r5
   32290:	0264      	lsls	r4, r4, #9
   32292:	05c9      	lsls	r1, r1, #23
   32294:	0a60      	lsrs	r0, r4, #9
   32296:	07db      	lsls	r3, r3, #31
   32298:	4308      	orrs	r0, r1
   3229a:	4318      	orrs	r0, r3
   3229c:	b003      	add	sp, #12
   3229e:	bc3c      	pop	{r2, r3, r4, r5}
   322a0:	4690      	mov	r8, r2
   322a2:	4699      	mov	r9, r3
   322a4:	46a2      	mov	sl, r4
   322a6:	46ab      	mov	fp, r5
   322a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   322aa:	2480      	movs	r4, #128	; 0x80
   322ac:	2300      	movs	r3, #0
   322ae:	03e4      	lsls	r4, r4, #15
   322b0:	21ff      	movs	r1, #255	; 0xff
   322b2:	e7ed      	b.n	32290 <__aeabi_fdiv+0x138>
   322b4:	21ff      	movs	r1, #255	; 0xff
   322b6:	2400      	movs	r4, #0
   322b8:	e7ea      	b.n	32290 <__aeabi_fdiv+0x138>
   322ba:	2301      	movs	r3, #1
   322bc:	1a59      	subs	r1, r3, r1
   322be:	291b      	cmp	r1, #27
   322c0:	dd66      	ble.n	32390 <__aeabi_fdiv+0x238>
   322c2:	9a01      	ldr	r2, [sp, #4]
   322c4:	4013      	ands	r3, r2
   322c6:	2100      	movs	r1, #0
   322c8:	2400      	movs	r4, #0
   322ca:	e7e1      	b.n	32290 <__aeabi_fdiv+0x138>
   322cc:	2380      	movs	r3, #128	; 0x80
   322ce:	03db      	lsls	r3, r3, #15
   322d0:	421c      	tst	r4, r3
   322d2:	d038      	beq.n	32346 <__aeabi_fdiv+0x1ee>
   322d4:	421d      	tst	r5, r3
   322d6:	d051      	beq.n	3237c <__aeabi_fdiv+0x224>
   322d8:	431c      	orrs	r4, r3
   322da:	0264      	lsls	r4, r4, #9
   322dc:	0a64      	lsrs	r4, r4, #9
   322de:	0033      	movs	r3, r6
   322e0:	21ff      	movs	r1, #255	; 0xff
   322e2:	e7d5      	b.n	32290 <__aeabi_fdiv+0x138>
   322e4:	0163      	lsls	r3, r4, #5
   322e6:	016c      	lsls	r4, r5, #5
   322e8:	42a3      	cmp	r3, r4
   322ea:	d23b      	bcs.n	32364 <__aeabi_fdiv+0x20c>
   322ec:	261b      	movs	r6, #27
   322ee:	2100      	movs	r1, #0
   322f0:	3801      	subs	r0, #1
   322f2:	2501      	movs	r5, #1
   322f4:	001f      	movs	r7, r3
   322f6:	0049      	lsls	r1, r1, #1
   322f8:	005b      	lsls	r3, r3, #1
   322fa:	2f00      	cmp	r7, #0
   322fc:	db01      	blt.n	32302 <__aeabi_fdiv+0x1aa>
   322fe:	429c      	cmp	r4, r3
   32300:	d801      	bhi.n	32306 <__aeabi_fdiv+0x1ae>
   32302:	1b1b      	subs	r3, r3, r4
   32304:	4329      	orrs	r1, r5
   32306:	3e01      	subs	r6, #1
   32308:	2e00      	cmp	r6, #0
   3230a:	d1f3      	bne.n	322f4 <__aeabi_fdiv+0x19c>
   3230c:	001c      	movs	r4, r3
   3230e:	1e63      	subs	r3, r4, #1
   32310:	419c      	sbcs	r4, r3
   32312:	430c      	orrs	r4, r1
   32314:	0001      	movs	r1, r0
   32316:	317f      	adds	r1, #127	; 0x7f
   32318:	2900      	cmp	r1, #0
   3231a:	ddce      	ble.n	322ba <__aeabi_fdiv+0x162>
   3231c:	0763      	lsls	r3, r4, #29
   3231e:	d004      	beq.n	3232a <__aeabi_fdiv+0x1d2>
   32320:	230f      	movs	r3, #15
   32322:	4023      	ands	r3, r4
   32324:	2b04      	cmp	r3, #4
   32326:	d000      	beq.n	3232a <__aeabi_fdiv+0x1d2>
   32328:	3404      	adds	r4, #4
   3232a:	0123      	lsls	r3, r4, #4
   3232c:	d503      	bpl.n	32336 <__aeabi_fdiv+0x1de>
   3232e:	0001      	movs	r1, r0
   32330:	4b2c      	ldr	r3, [pc, #176]	; (323e4 <__aeabi_fdiv+0x28c>)
   32332:	3180      	adds	r1, #128	; 0x80
   32334:	401c      	ands	r4, r3
   32336:	29fe      	cmp	r1, #254	; 0xfe
   32338:	dd0d      	ble.n	32356 <__aeabi_fdiv+0x1fe>
   3233a:	2301      	movs	r3, #1
   3233c:	9a01      	ldr	r2, [sp, #4]
   3233e:	21ff      	movs	r1, #255	; 0xff
   32340:	4013      	ands	r3, r2
   32342:	2400      	movs	r4, #0
   32344:	e7a4      	b.n	32290 <__aeabi_fdiv+0x138>
   32346:	2380      	movs	r3, #128	; 0x80
   32348:	03db      	lsls	r3, r3, #15
   3234a:	431c      	orrs	r4, r3
   3234c:	0264      	lsls	r4, r4, #9
   3234e:	0a64      	lsrs	r4, r4, #9
   32350:	0033      	movs	r3, r6
   32352:	21ff      	movs	r1, #255	; 0xff
   32354:	e79c      	b.n	32290 <__aeabi_fdiv+0x138>
   32356:	2301      	movs	r3, #1
   32358:	9a01      	ldr	r2, [sp, #4]
   3235a:	01a4      	lsls	r4, r4, #6
   3235c:	0a64      	lsrs	r4, r4, #9
   3235e:	b2c9      	uxtb	r1, r1
   32360:	4013      	ands	r3, r2
   32362:	e795      	b.n	32290 <__aeabi_fdiv+0x138>
   32364:	1b1b      	subs	r3, r3, r4
   32366:	261a      	movs	r6, #26
   32368:	2101      	movs	r1, #1
   3236a:	e7c2      	b.n	322f2 <__aeabi_fdiv+0x19a>
   3236c:	9b00      	ldr	r3, [sp, #0]
   3236e:	468b      	mov	fp, r1
   32370:	469a      	mov	sl, r3
   32372:	2400      	movs	r4, #0
   32374:	e74c      	b.n	32210 <__aeabi_fdiv+0xb8>
   32376:	0263      	lsls	r3, r4, #9
   32378:	d5e5      	bpl.n	32346 <__aeabi_fdiv+0x1ee>
   3237a:	2500      	movs	r5, #0
   3237c:	2480      	movs	r4, #128	; 0x80
   3237e:	03e4      	lsls	r4, r4, #15
   32380:	432c      	orrs	r4, r5
   32382:	0264      	lsls	r4, r4, #9
   32384:	0a64      	lsrs	r4, r4, #9
   32386:	9b00      	ldr	r3, [sp, #0]
   32388:	21ff      	movs	r1, #255	; 0xff
   3238a:	e781      	b.n	32290 <__aeabi_fdiv+0x138>
   3238c:	9501      	str	r5, [sp, #4]
   3238e:	e7c1      	b.n	32314 <__aeabi_fdiv+0x1bc>
   32390:	0023      	movs	r3, r4
   32392:	2020      	movs	r0, #32
   32394:	40cb      	lsrs	r3, r1
   32396:	1a41      	subs	r1, r0, r1
   32398:	408c      	lsls	r4, r1
   3239a:	1e61      	subs	r1, r4, #1
   3239c:	418c      	sbcs	r4, r1
   3239e:	431c      	orrs	r4, r3
   323a0:	0763      	lsls	r3, r4, #29
   323a2:	d004      	beq.n	323ae <__aeabi_fdiv+0x256>
   323a4:	230f      	movs	r3, #15
   323a6:	4023      	ands	r3, r4
   323a8:	2b04      	cmp	r3, #4
   323aa:	d000      	beq.n	323ae <__aeabi_fdiv+0x256>
   323ac:	3404      	adds	r4, #4
   323ae:	0163      	lsls	r3, r4, #5
   323b0:	d505      	bpl.n	323be <__aeabi_fdiv+0x266>
   323b2:	2301      	movs	r3, #1
   323b4:	9a01      	ldr	r2, [sp, #4]
   323b6:	2101      	movs	r1, #1
   323b8:	4013      	ands	r3, r2
   323ba:	2400      	movs	r4, #0
   323bc:	e768      	b.n	32290 <__aeabi_fdiv+0x138>
   323be:	2301      	movs	r3, #1
   323c0:	9a01      	ldr	r2, [sp, #4]
   323c2:	01a4      	lsls	r4, r4, #6
   323c4:	0a64      	lsrs	r4, r4, #9
   323c6:	4013      	ands	r3, r2
   323c8:	2100      	movs	r1, #0
   323ca:	e761      	b.n	32290 <__aeabi_fdiv+0x138>
   323cc:	2380      	movs	r3, #128	; 0x80
   323ce:	03db      	lsls	r3, r3, #15
   323d0:	431c      	orrs	r4, r3
   323d2:	0264      	lsls	r4, r4, #9
   323d4:	0a64      	lsrs	r4, r4, #9
   323d6:	4653      	mov	r3, sl
   323d8:	21ff      	movs	r1, #255	; 0xff
   323da:	e759      	b.n	32290 <__aeabi_fdiv+0x138>
   323dc:	000399ec 	.word	0x000399ec
   323e0:	00039a2c 	.word	0x00039a2c
   323e4:	f7ffffff 	.word	0xf7ffffff

000323e8 <__aeabi_fmul>:
   323e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   323ea:	4657      	mov	r7, sl
   323ec:	464e      	mov	r6, r9
   323ee:	4645      	mov	r5, r8
   323f0:	46de      	mov	lr, fp
   323f2:	b5e0      	push	{r5, r6, r7, lr}
   323f4:	0247      	lsls	r7, r0, #9
   323f6:	0046      	lsls	r6, r0, #1
   323f8:	4688      	mov	r8, r1
   323fa:	0a7f      	lsrs	r7, r7, #9
   323fc:	0e36      	lsrs	r6, r6, #24
   323fe:	0fc4      	lsrs	r4, r0, #31
   32400:	2e00      	cmp	r6, #0
   32402:	d047      	beq.n	32494 <__aeabi_fmul+0xac>
   32404:	2eff      	cmp	r6, #255	; 0xff
   32406:	d024      	beq.n	32452 <__aeabi_fmul+0x6a>
   32408:	00fb      	lsls	r3, r7, #3
   3240a:	2780      	movs	r7, #128	; 0x80
   3240c:	04ff      	lsls	r7, r7, #19
   3240e:	431f      	orrs	r7, r3
   32410:	2300      	movs	r3, #0
   32412:	4699      	mov	r9, r3
   32414:	469a      	mov	sl, r3
   32416:	3e7f      	subs	r6, #127	; 0x7f
   32418:	4643      	mov	r3, r8
   3241a:	025d      	lsls	r5, r3, #9
   3241c:	0058      	lsls	r0, r3, #1
   3241e:	0fdb      	lsrs	r3, r3, #31
   32420:	0a6d      	lsrs	r5, r5, #9
   32422:	0e00      	lsrs	r0, r0, #24
   32424:	4698      	mov	r8, r3
   32426:	d043      	beq.n	324b0 <__aeabi_fmul+0xc8>
   32428:	28ff      	cmp	r0, #255	; 0xff
   3242a:	d03b      	beq.n	324a4 <__aeabi_fmul+0xbc>
   3242c:	00eb      	lsls	r3, r5, #3
   3242e:	2580      	movs	r5, #128	; 0x80
   32430:	2200      	movs	r2, #0
   32432:	04ed      	lsls	r5, r5, #19
   32434:	431d      	orrs	r5, r3
   32436:	387f      	subs	r0, #127	; 0x7f
   32438:	1836      	adds	r6, r6, r0
   3243a:	1c73      	adds	r3, r6, #1
   3243c:	4641      	mov	r1, r8
   3243e:	469b      	mov	fp, r3
   32440:	464b      	mov	r3, r9
   32442:	4061      	eors	r1, r4
   32444:	4313      	orrs	r3, r2
   32446:	2b0f      	cmp	r3, #15
   32448:	d864      	bhi.n	32514 <__aeabi_fmul+0x12c>
   3244a:	4875      	ldr	r0, [pc, #468]	; (32620 <__aeabi_fmul+0x238>)
   3244c:	009b      	lsls	r3, r3, #2
   3244e:	58c3      	ldr	r3, [r0, r3]
   32450:	469f      	mov	pc, r3
   32452:	2f00      	cmp	r7, #0
   32454:	d142      	bne.n	324dc <__aeabi_fmul+0xf4>
   32456:	2308      	movs	r3, #8
   32458:	4699      	mov	r9, r3
   3245a:	3b06      	subs	r3, #6
   3245c:	26ff      	movs	r6, #255	; 0xff
   3245e:	469a      	mov	sl, r3
   32460:	e7da      	b.n	32418 <__aeabi_fmul+0x30>
   32462:	4641      	mov	r1, r8
   32464:	2a02      	cmp	r2, #2
   32466:	d028      	beq.n	324ba <__aeabi_fmul+0xd2>
   32468:	2a03      	cmp	r2, #3
   3246a:	d100      	bne.n	3246e <__aeabi_fmul+0x86>
   3246c:	e0ce      	b.n	3260c <__aeabi_fmul+0x224>
   3246e:	2a01      	cmp	r2, #1
   32470:	d000      	beq.n	32474 <__aeabi_fmul+0x8c>
   32472:	e0ac      	b.n	325ce <__aeabi_fmul+0x1e6>
   32474:	4011      	ands	r1, r2
   32476:	2000      	movs	r0, #0
   32478:	2200      	movs	r2, #0
   3247a:	b2cc      	uxtb	r4, r1
   3247c:	0240      	lsls	r0, r0, #9
   3247e:	05d2      	lsls	r2, r2, #23
   32480:	0a40      	lsrs	r0, r0, #9
   32482:	07e4      	lsls	r4, r4, #31
   32484:	4310      	orrs	r0, r2
   32486:	4320      	orrs	r0, r4
   32488:	bc3c      	pop	{r2, r3, r4, r5}
   3248a:	4690      	mov	r8, r2
   3248c:	4699      	mov	r9, r3
   3248e:	46a2      	mov	sl, r4
   32490:	46ab      	mov	fp, r5
   32492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32494:	2f00      	cmp	r7, #0
   32496:	d115      	bne.n	324c4 <__aeabi_fmul+0xdc>
   32498:	2304      	movs	r3, #4
   3249a:	4699      	mov	r9, r3
   3249c:	3b03      	subs	r3, #3
   3249e:	2600      	movs	r6, #0
   324a0:	469a      	mov	sl, r3
   324a2:	e7b9      	b.n	32418 <__aeabi_fmul+0x30>
   324a4:	20ff      	movs	r0, #255	; 0xff
   324a6:	2202      	movs	r2, #2
   324a8:	2d00      	cmp	r5, #0
   324aa:	d0c5      	beq.n	32438 <__aeabi_fmul+0x50>
   324ac:	2203      	movs	r2, #3
   324ae:	e7c3      	b.n	32438 <__aeabi_fmul+0x50>
   324b0:	2d00      	cmp	r5, #0
   324b2:	d119      	bne.n	324e8 <__aeabi_fmul+0x100>
   324b4:	2000      	movs	r0, #0
   324b6:	2201      	movs	r2, #1
   324b8:	e7be      	b.n	32438 <__aeabi_fmul+0x50>
   324ba:	2401      	movs	r4, #1
   324bc:	22ff      	movs	r2, #255	; 0xff
   324be:	400c      	ands	r4, r1
   324c0:	2000      	movs	r0, #0
   324c2:	e7db      	b.n	3247c <__aeabi_fmul+0x94>
   324c4:	0038      	movs	r0, r7
   324c6:	f001 ff3b 	bl	34340 <__clzsi2>
   324ca:	2676      	movs	r6, #118	; 0x76
   324cc:	1f43      	subs	r3, r0, #5
   324ce:	409f      	lsls	r7, r3
   324d0:	2300      	movs	r3, #0
   324d2:	4276      	negs	r6, r6
   324d4:	1a36      	subs	r6, r6, r0
   324d6:	4699      	mov	r9, r3
   324d8:	469a      	mov	sl, r3
   324da:	e79d      	b.n	32418 <__aeabi_fmul+0x30>
   324dc:	230c      	movs	r3, #12
   324de:	4699      	mov	r9, r3
   324e0:	3b09      	subs	r3, #9
   324e2:	26ff      	movs	r6, #255	; 0xff
   324e4:	469a      	mov	sl, r3
   324e6:	e797      	b.n	32418 <__aeabi_fmul+0x30>
   324e8:	0028      	movs	r0, r5
   324ea:	f001 ff29 	bl	34340 <__clzsi2>
   324ee:	1f43      	subs	r3, r0, #5
   324f0:	409d      	lsls	r5, r3
   324f2:	2376      	movs	r3, #118	; 0x76
   324f4:	425b      	negs	r3, r3
   324f6:	1a18      	subs	r0, r3, r0
   324f8:	2200      	movs	r2, #0
   324fa:	e79d      	b.n	32438 <__aeabi_fmul+0x50>
   324fc:	2080      	movs	r0, #128	; 0x80
   324fe:	2400      	movs	r4, #0
   32500:	03c0      	lsls	r0, r0, #15
   32502:	22ff      	movs	r2, #255	; 0xff
   32504:	e7ba      	b.n	3247c <__aeabi_fmul+0x94>
   32506:	003d      	movs	r5, r7
   32508:	4652      	mov	r2, sl
   3250a:	e7ab      	b.n	32464 <__aeabi_fmul+0x7c>
   3250c:	003d      	movs	r5, r7
   3250e:	0021      	movs	r1, r4
   32510:	4652      	mov	r2, sl
   32512:	e7a7      	b.n	32464 <__aeabi_fmul+0x7c>
   32514:	0c3b      	lsrs	r3, r7, #16
   32516:	469c      	mov	ip, r3
   32518:	042a      	lsls	r2, r5, #16
   3251a:	0c12      	lsrs	r2, r2, #16
   3251c:	0c2b      	lsrs	r3, r5, #16
   3251e:	0014      	movs	r4, r2
   32520:	4660      	mov	r0, ip
   32522:	4665      	mov	r5, ip
   32524:	043f      	lsls	r7, r7, #16
   32526:	0c3f      	lsrs	r7, r7, #16
   32528:	437c      	muls	r4, r7
   3252a:	4342      	muls	r2, r0
   3252c:	435d      	muls	r5, r3
   3252e:	437b      	muls	r3, r7
   32530:	0c27      	lsrs	r7, r4, #16
   32532:	189b      	adds	r3, r3, r2
   32534:	18ff      	adds	r7, r7, r3
   32536:	42ba      	cmp	r2, r7
   32538:	d903      	bls.n	32542 <__aeabi_fmul+0x15a>
   3253a:	2380      	movs	r3, #128	; 0x80
   3253c:	025b      	lsls	r3, r3, #9
   3253e:	469c      	mov	ip, r3
   32540:	4465      	add	r5, ip
   32542:	0424      	lsls	r4, r4, #16
   32544:	043a      	lsls	r2, r7, #16
   32546:	0c24      	lsrs	r4, r4, #16
   32548:	1912      	adds	r2, r2, r4
   3254a:	0193      	lsls	r3, r2, #6
   3254c:	1e5c      	subs	r4, r3, #1
   3254e:	41a3      	sbcs	r3, r4
   32550:	0c3f      	lsrs	r7, r7, #16
   32552:	0e92      	lsrs	r2, r2, #26
   32554:	197d      	adds	r5, r7, r5
   32556:	431a      	orrs	r2, r3
   32558:	01ad      	lsls	r5, r5, #6
   3255a:	4315      	orrs	r5, r2
   3255c:	012b      	lsls	r3, r5, #4
   3255e:	d504      	bpl.n	3256a <__aeabi_fmul+0x182>
   32560:	2301      	movs	r3, #1
   32562:	465e      	mov	r6, fp
   32564:	086a      	lsrs	r2, r5, #1
   32566:	401d      	ands	r5, r3
   32568:	4315      	orrs	r5, r2
   3256a:	0032      	movs	r2, r6
   3256c:	327f      	adds	r2, #127	; 0x7f
   3256e:	2a00      	cmp	r2, #0
   32570:	dd25      	ble.n	325be <__aeabi_fmul+0x1d6>
   32572:	076b      	lsls	r3, r5, #29
   32574:	d004      	beq.n	32580 <__aeabi_fmul+0x198>
   32576:	230f      	movs	r3, #15
   32578:	402b      	ands	r3, r5
   3257a:	2b04      	cmp	r3, #4
   3257c:	d000      	beq.n	32580 <__aeabi_fmul+0x198>
   3257e:	3504      	adds	r5, #4
   32580:	012b      	lsls	r3, r5, #4
   32582:	d503      	bpl.n	3258c <__aeabi_fmul+0x1a4>
   32584:	0032      	movs	r2, r6
   32586:	4b27      	ldr	r3, [pc, #156]	; (32624 <__aeabi_fmul+0x23c>)
   32588:	3280      	adds	r2, #128	; 0x80
   3258a:	401d      	ands	r5, r3
   3258c:	2afe      	cmp	r2, #254	; 0xfe
   3258e:	dc94      	bgt.n	324ba <__aeabi_fmul+0xd2>
   32590:	2401      	movs	r4, #1
   32592:	01a8      	lsls	r0, r5, #6
   32594:	0a40      	lsrs	r0, r0, #9
   32596:	b2d2      	uxtb	r2, r2
   32598:	400c      	ands	r4, r1
   3259a:	e76f      	b.n	3247c <__aeabi_fmul+0x94>
   3259c:	2080      	movs	r0, #128	; 0x80
   3259e:	03c0      	lsls	r0, r0, #15
   325a0:	4207      	tst	r7, r0
   325a2:	d007      	beq.n	325b4 <__aeabi_fmul+0x1cc>
   325a4:	4205      	tst	r5, r0
   325a6:	d105      	bne.n	325b4 <__aeabi_fmul+0x1cc>
   325a8:	4328      	orrs	r0, r5
   325aa:	0240      	lsls	r0, r0, #9
   325ac:	0a40      	lsrs	r0, r0, #9
   325ae:	4644      	mov	r4, r8
   325b0:	22ff      	movs	r2, #255	; 0xff
   325b2:	e763      	b.n	3247c <__aeabi_fmul+0x94>
   325b4:	4338      	orrs	r0, r7
   325b6:	0240      	lsls	r0, r0, #9
   325b8:	0a40      	lsrs	r0, r0, #9
   325ba:	22ff      	movs	r2, #255	; 0xff
   325bc:	e75e      	b.n	3247c <__aeabi_fmul+0x94>
   325be:	2401      	movs	r4, #1
   325c0:	1aa3      	subs	r3, r4, r2
   325c2:	2b1b      	cmp	r3, #27
   325c4:	dd05      	ble.n	325d2 <__aeabi_fmul+0x1ea>
   325c6:	400c      	ands	r4, r1
   325c8:	2200      	movs	r2, #0
   325ca:	2000      	movs	r0, #0
   325cc:	e756      	b.n	3247c <__aeabi_fmul+0x94>
   325ce:	465e      	mov	r6, fp
   325d0:	e7cb      	b.n	3256a <__aeabi_fmul+0x182>
   325d2:	002a      	movs	r2, r5
   325d4:	2020      	movs	r0, #32
   325d6:	40da      	lsrs	r2, r3
   325d8:	1ac3      	subs	r3, r0, r3
   325da:	409d      	lsls	r5, r3
   325dc:	002b      	movs	r3, r5
   325de:	1e5d      	subs	r5, r3, #1
   325e0:	41ab      	sbcs	r3, r5
   325e2:	4313      	orrs	r3, r2
   325e4:	075a      	lsls	r2, r3, #29
   325e6:	d004      	beq.n	325f2 <__aeabi_fmul+0x20a>
   325e8:	220f      	movs	r2, #15
   325ea:	401a      	ands	r2, r3
   325ec:	2a04      	cmp	r2, #4
   325ee:	d000      	beq.n	325f2 <__aeabi_fmul+0x20a>
   325f0:	3304      	adds	r3, #4
   325f2:	015a      	lsls	r2, r3, #5
   325f4:	d504      	bpl.n	32600 <__aeabi_fmul+0x218>
   325f6:	2401      	movs	r4, #1
   325f8:	2201      	movs	r2, #1
   325fa:	400c      	ands	r4, r1
   325fc:	2000      	movs	r0, #0
   325fe:	e73d      	b.n	3247c <__aeabi_fmul+0x94>
   32600:	2401      	movs	r4, #1
   32602:	019b      	lsls	r3, r3, #6
   32604:	0a58      	lsrs	r0, r3, #9
   32606:	400c      	ands	r4, r1
   32608:	2200      	movs	r2, #0
   3260a:	e737      	b.n	3247c <__aeabi_fmul+0x94>
   3260c:	2080      	movs	r0, #128	; 0x80
   3260e:	2401      	movs	r4, #1
   32610:	03c0      	lsls	r0, r0, #15
   32612:	4328      	orrs	r0, r5
   32614:	0240      	lsls	r0, r0, #9
   32616:	0a40      	lsrs	r0, r0, #9
   32618:	400c      	ands	r4, r1
   3261a:	22ff      	movs	r2, #255	; 0xff
   3261c:	e72e      	b.n	3247c <__aeabi_fmul+0x94>
   3261e:	46c0      	nop			; (mov r8, r8)
   32620:	00039a6c 	.word	0x00039a6c
   32624:	f7ffffff 	.word	0xf7ffffff

00032628 <__aeabi_fsub>:
   32628:	b5f0      	push	{r4, r5, r6, r7, lr}
   3262a:	464f      	mov	r7, r9
   3262c:	46d6      	mov	lr, sl
   3262e:	4646      	mov	r6, r8
   32630:	0044      	lsls	r4, r0, #1
   32632:	b5c0      	push	{r6, r7, lr}
   32634:	0fc2      	lsrs	r2, r0, #31
   32636:	0247      	lsls	r7, r0, #9
   32638:	0248      	lsls	r0, r1, #9
   3263a:	0a40      	lsrs	r0, r0, #9
   3263c:	4684      	mov	ip, r0
   3263e:	4666      	mov	r6, ip
   32640:	0a7b      	lsrs	r3, r7, #9
   32642:	0048      	lsls	r0, r1, #1
   32644:	0fc9      	lsrs	r1, r1, #31
   32646:	469a      	mov	sl, r3
   32648:	0e24      	lsrs	r4, r4, #24
   3264a:	0015      	movs	r5, r2
   3264c:	00db      	lsls	r3, r3, #3
   3264e:	0e00      	lsrs	r0, r0, #24
   32650:	4689      	mov	r9, r1
   32652:	00f6      	lsls	r6, r6, #3
   32654:	28ff      	cmp	r0, #255	; 0xff
   32656:	d100      	bne.n	3265a <__aeabi_fsub+0x32>
   32658:	e08f      	b.n	3277a <__aeabi_fsub+0x152>
   3265a:	2101      	movs	r1, #1
   3265c:	464f      	mov	r7, r9
   3265e:	404f      	eors	r7, r1
   32660:	0039      	movs	r1, r7
   32662:	4291      	cmp	r1, r2
   32664:	d066      	beq.n	32734 <__aeabi_fsub+0x10c>
   32666:	1a22      	subs	r2, r4, r0
   32668:	2a00      	cmp	r2, #0
   3266a:	dc00      	bgt.n	3266e <__aeabi_fsub+0x46>
   3266c:	e09d      	b.n	327aa <__aeabi_fsub+0x182>
   3266e:	2800      	cmp	r0, #0
   32670:	d13d      	bne.n	326ee <__aeabi_fsub+0xc6>
   32672:	2e00      	cmp	r6, #0
   32674:	d100      	bne.n	32678 <__aeabi_fsub+0x50>
   32676:	e08b      	b.n	32790 <__aeabi_fsub+0x168>
   32678:	1e51      	subs	r1, r2, #1
   3267a:	2900      	cmp	r1, #0
   3267c:	d000      	beq.n	32680 <__aeabi_fsub+0x58>
   3267e:	e0b5      	b.n	327ec <__aeabi_fsub+0x1c4>
   32680:	2401      	movs	r4, #1
   32682:	1b9b      	subs	r3, r3, r6
   32684:	015a      	lsls	r2, r3, #5
   32686:	d544      	bpl.n	32712 <__aeabi_fsub+0xea>
   32688:	019b      	lsls	r3, r3, #6
   3268a:	099f      	lsrs	r7, r3, #6
   3268c:	0038      	movs	r0, r7
   3268e:	f001 fe57 	bl	34340 <__clzsi2>
   32692:	3805      	subs	r0, #5
   32694:	4087      	lsls	r7, r0
   32696:	4284      	cmp	r4, r0
   32698:	dd00      	ble.n	3269c <__aeabi_fsub+0x74>
   3269a:	e096      	b.n	327ca <__aeabi_fsub+0x1a2>
   3269c:	1b04      	subs	r4, r0, r4
   3269e:	003a      	movs	r2, r7
   326a0:	2020      	movs	r0, #32
   326a2:	3401      	adds	r4, #1
   326a4:	40e2      	lsrs	r2, r4
   326a6:	1b04      	subs	r4, r0, r4
   326a8:	40a7      	lsls	r7, r4
   326aa:	003b      	movs	r3, r7
   326ac:	1e5f      	subs	r7, r3, #1
   326ae:	41bb      	sbcs	r3, r7
   326b0:	2400      	movs	r4, #0
   326b2:	4313      	orrs	r3, r2
   326b4:	075a      	lsls	r2, r3, #29
   326b6:	d004      	beq.n	326c2 <__aeabi_fsub+0x9a>
   326b8:	220f      	movs	r2, #15
   326ba:	401a      	ands	r2, r3
   326bc:	2a04      	cmp	r2, #4
   326be:	d000      	beq.n	326c2 <__aeabi_fsub+0x9a>
   326c0:	3304      	adds	r3, #4
   326c2:	015a      	lsls	r2, r3, #5
   326c4:	d527      	bpl.n	32716 <__aeabi_fsub+0xee>
   326c6:	3401      	adds	r4, #1
   326c8:	2cff      	cmp	r4, #255	; 0xff
   326ca:	d100      	bne.n	326ce <__aeabi_fsub+0xa6>
   326cc:	e079      	b.n	327c2 <__aeabi_fsub+0x19a>
   326ce:	2201      	movs	r2, #1
   326d0:	019b      	lsls	r3, r3, #6
   326d2:	0a5b      	lsrs	r3, r3, #9
   326d4:	b2e4      	uxtb	r4, r4
   326d6:	402a      	ands	r2, r5
   326d8:	025b      	lsls	r3, r3, #9
   326da:	05e4      	lsls	r4, r4, #23
   326dc:	0a58      	lsrs	r0, r3, #9
   326de:	07d2      	lsls	r2, r2, #31
   326e0:	4320      	orrs	r0, r4
   326e2:	4310      	orrs	r0, r2
   326e4:	bc1c      	pop	{r2, r3, r4}
   326e6:	4690      	mov	r8, r2
   326e8:	4699      	mov	r9, r3
   326ea:	46a2      	mov	sl, r4
   326ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   326ee:	2cff      	cmp	r4, #255	; 0xff
   326f0:	d0e0      	beq.n	326b4 <__aeabi_fsub+0x8c>
   326f2:	2180      	movs	r1, #128	; 0x80
   326f4:	04c9      	lsls	r1, r1, #19
   326f6:	430e      	orrs	r6, r1
   326f8:	2a1b      	cmp	r2, #27
   326fa:	dc7b      	bgt.n	327f4 <__aeabi_fsub+0x1cc>
   326fc:	0031      	movs	r1, r6
   326fe:	2020      	movs	r0, #32
   32700:	40d1      	lsrs	r1, r2
   32702:	1a82      	subs	r2, r0, r2
   32704:	4096      	lsls	r6, r2
   32706:	1e72      	subs	r2, r6, #1
   32708:	4196      	sbcs	r6, r2
   3270a:	430e      	orrs	r6, r1
   3270c:	1b9b      	subs	r3, r3, r6
   3270e:	015a      	lsls	r2, r3, #5
   32710:	d4ba      	bmi.n	32688 <__aeabi_fsub+0x60>
   32712:	075a      	lsls	r2, r3, #29
   32714:	d1d0      	bne.n	326b8 <__aeabi_fsub+0x90>
   32716:	2201      	movs	r2, #1
   32718:	08df      	lsrs	r7, r3, #3
   3271a:	402a      	ands	r2, r5
   3271c:	2cff      	cmp	r4, #255	; 0xff
   3271e:	d133      	bne.n	32788 <__aeabi_fsub+0x160>
   32720:	2f00      	cmp	r7, #0
   32722:	d100      	bne.n	32726 <__aeabi_fsub+0xfe>
   32724:	e0a8      	b.n	32878 <__aeabi_fsub+0x250>
   32726:	2380      	movs	r3, #128	; 0x80
   32728:	03db      	lsls	r3, r3, #15
   3272a:	433b      	orrs	r3, r7
   3272c:	025b      	lsls	r3, r3, #9
   3272e:	0a5b      	lsrs	r3, r3, #9
   32730:	24ff      	movs	r4, #255	; 0xff
   32732:	e7d1      	b.n	326d8 <__aeabi_fsub+0xb0>
   32734:	1a21      	subs	r1, r4, r0
   32736:	2900      	cmp	r1, #0
   32738:	dd4c      	ble.n	327d4 <__aeabi_fsub+0x1ac>
   3273a:	2800      	cmp	r0, #0
   3273c:	d02a      	beq.n	32794 <__aeabi_fsub+0x16c>
   3273e:	2cff      	cmp	r4, #255	; 0xff
   32740:	d0b8      	beq.n	326b4 <__aeabi_fsub+0x8c>
   32742:	2080      	movs	r0, #128	; 0x80
   32744:	04c0      	lsls	r0, r0, #19
   32746:	4306      	orrs	r6, r0
   32748:	291b      	cmp	r1, #27
   3274a:	dd00      	ble.n	3274e <__aeabi_fsub+0x126>
   3274c:	e0af      	b.n	328ae <__aeabi_fsub+0x286>
   3274e:	0030      	movs	r0, r6
   32750:	2720      	movs	r7, #32
   32752:	40c8      	lsrs	r0, r1
   32754:	1a79      	subs	r1, r7, r1
   32756:	408e      	lsls	r6, r1
   32758:	1e71      	subs	r1, r6, #1
   3275a:	418e      	sbcs	r6, r1
   3275c:	4306      	orrs	r6, r0
   3275e:	199b      	adds	r3, r3, r6
   32760:	0159      	lsls	r1, r3, #5
   32762:	d5d6      	bpl.n	32712 <__aeabi_fsub+0xea>
   32764:	3401      	adds	r4, #1
   32766:	2cff      	cmp	r4, #255	; 0xff
   32768:	d100      	bne.n	3276c <__aeabi_fsub+0x144>
   3276a:	e085      	b.n	32878 <__aeabi_fsub+0x250>
   3276c:	2201      	movs	r2, #1
   3276e:	497a      	ldr	r1, [pc, #488]	; (32958 <__aeabi_fsub+0x330>)
   32770:	401a      	ands	r2, r3
   32772:	085b      	lsrs	r3, r3, #1
   32774:	400b      	ands	r3, r1
   32776:	4313      	orrs	r3, r2
   32778:	e79c      	b.n	326b4 <__aeabi_fsub+0x8c>
   3277a:	2e00      	cmp	r6, #0
   3277c:	d000      	beq.n	32780 <__aeabi_fsub+0x158>
   3277e:	e770      	b.n	32662 <__aeabi_fsub+0x3a>
   32780:	e76b      	b.n	3265a <__aeabi_fsub+0x32>
   32782:	1e3b      	subs	r3, r7, #0
   32784:	d1c5      	bne.n	32712 <__aeabi_fsub+0xea>
   32786:	2200      	movs	r2, #0
   32788:	027b      	lsls	r3, r7, #9
   3278a:	0a5b      	lsrs	r3, r3, #9
   3278c:	b2e4      	uxtb	r4, r4
   3278e:	e7a3      	b.n	326d8 <__aeabi_fsub+0xb0>
   32790:	0014      	movs	r4, r2
   32792:	e78f      	b.n	326b4 <__aeabi_fsub+0x8c>
   32794:	2e00      	cmp	r6, #0
   32796:	d04d      	beq.n	32834 <__aeabi_fsub+0x20c>
   32798:	1e48      	subs	r0, r1, #1
   3279a:	2800      	cmp	r0, #0
   3279c:	d157      	bne.n	3284e <__aeabi_fsub+0x226>
   3279e:	199b      	adds	r3, r3, r6
   327a0:	2401      	movs	r4, #1
   327a2:	015a      	lsls	r2, r3, #5
   327a4:	d5b5      	bpl.n	32712 <__aeabi_fsub+0xea>
   327a6:	2402      	movs	r4, #2
   327a8:	e7e0      	b.n	3276c <__aeabi_fsub+0x144>
   327aa:	2a00      	cmp	r2, #0
   327ac:	d125      	bne.n	327fa <__aeabi_fsub+0x1d2>
   327ae:	1c62      	adds	r2, r4, #1
   327b0:	b2d2      	uxtb	r2, r2
   327b2:	2a01      	cmp	r2, #1
   327b4:	dd72      	ble.n	3289c <__aeabi_fsub+0x274>
   327b6:	1b9f      	subs	r7, r3, r6
   327b8:	017a      	lsls	r2, r7, #5
   327ba:	d535      	bpl.n	32828 <__aeabi_fsub+0x200>
   327bc:	1af7      	subs	r7, r6, r3
   327be:	000d      	movs	r5, r1
   327c0:	e764      	b.n	3268c <__aeabi_fsub+0x64>
   327c2:	2201      	movs	r2, #1
   327c4:	2300      	movs	r3, #0
   327c6:	402a      	ands	r2, r5
   327c8:	e786      	b.n	326d8 <__aeabi_fsub+0xb0>
   327ca:	003b      	movs	r3, r7
   327cc:	4a63      	ldr	r2, [pc, #396]	; (3295c <__aeabi_fsub+0x334>)
   327ce:	1a24      	subs	r4, r4, r0
   327d0:	4013      	ands	r3, r2
   327d2:	e76f      	b.n	326b4 <__aeabi_fsub+0x8c>
   327d4:	2900      	cmp	r1, #0
   327d6:	d16c      	bne.n	328b2 <__aeabi_fsub+0x28a>
   327d8:	1c61      	adds	r1, r4, #1
   327da:	b2c8      	uxtb	r0, r1
   327dc:	2801      	cmp	r0, #1
   327de:	dd4e      	ble.n	3287e <__aeabi_fsub+0x256>
   327e0:	29ff      	cmp	r1, #255	; 0xff
   327e2:	d049      	beq.n	32878 <__aeabi_fsub+0x250>
   327e4:	199b      	adds	r3, r3, r6
   327e6:	085b      	lsrs	r3, r3, #1
   327e8:	000c      	movs	r4, r1
   327ea:	e763      	b.n	326b4 <__aeabi_fsub+0x8c>
   327ec:	2aff      	cmp	r2, #255	; 0xff
   327ee:	d041      	beq.n	32874 <__aeabi_fsub+0x24c>
   327f0:	000a      	movs	r2, r1
   327f2:	e781      	b.n	326f8 <__aeabi_fsub+0xd0>
   327f4:	2601      	movs	r6, #1
   327f6:	1b9b      	subs	r3, r3, r6
   327f8:	e789      	b.n	3270e <__aeabi_fsub+0xe6>
   327fa:	2c00      	cmp	r4, #0
   327fc:	d01c      	beq.n	32838 <__aeabi_fsub+0x210>
   327fe:	28ff      	cmp	r0, #255	; 0xff
   32800:	d021      	beq.n	32846 <__aeabi_fsub+0x21e>
   32802:	2480      	movs	r4, #128	; 0x80
   32804:	04e4      	lsls	r4, r4, #19
   32806:	4252      	negs	r2, r2
   32808:	4323      	orrs	r3, r4
   3280a:	2a1b      	cmp	r2, #27
   3280c:	dd00      	ble.n	32810 <__aeabi_fsub+0x1e8>
   3280e:	e096      	b.n	3293e <__aeabi_fsub+0x316>
   32810:	001c      	movs	r4, r3
   32812:	2520      	movs	r5, #32
   32814:	40d4      	lsrs	r4, r2
   32816:	1aaa      	subs	r2, r5, r2
   32818:	4093      	lsls	r3, r2
   3281a:	1e5a      	subs	r2, r3, #1
   3281c:	4193      	sbcs	r3, r2
   3281e:	4323      	orrs	r3, r4
   32820:	1af3      	subs	r3, r6, r3
   32822:	0004      	movs	r4, r0
   32824:	000d      	movs	r5, r1
   32826:	e72d      	b.n	32684 <__aeabi_fsub+0x5c>
   32828:	2f00      	cmp	r7, #0
   3282a:	d000      	beq.n	3282e <__aeabi_fsub+0x206>
   3282c:	e72e      	b.n	3268c <__aeabi_fsub+0x64>
   3282e:	2200      	movs	r2, #0
   32830:	2400      	movs	r4, #0
   32832:	e7a9      	b.n	32788 <__aeabi_fsub+0x160>
   32834:	000c      	movs	r4, r1
   32836:	e73d      	b.n	326b4 <__aeabi_fsub+0x8c>
   32838:	2b00      	cmp	r3, #0
   3283a:	d058      	beq.n	328ee <__aeabi_fsub+0x2c6>
   3283c:	43d2      	mvns	r2, r2
   3283e:	2a00      	cmp	r2, #0
   32840:	d0ee      	beq.n	32820 <__aeabi_fsub+0x1f8>
   32842:	28ff      	cmp	r0, #255	; 0xff
   32844:	d1e1      	bne.n	3280a <__aeabi_fsub+0x1e2>
   32846:	0033      	movs	r3, r6
   32848:	24ff      	movs	r4, #255	; 0xff
   3284a:	000d      	movs	r5, r1
   3284c:	e732      	b.n	326b4 <__aeabi_fsub+0x8c>
   3284e:	29ff      	cmp	r1, #255	; 0xff
   32850:	d010      	beq.n	32874 <__aeabi_fsub+0x24c>
   32852:	0001      	movs	r1, r0
   32854:	e778      	b.n	32748 <__aeabi_fsub+0x120>
   32856:	2b00      	cmp	r3, #0
   32858:	d06e      	beq.n	32938 <__aeabi_fsub+0x310>
   3285a:	24ff      	movs	r4, #255	; 0xff
   3285c:	2e00      	cmp	r6, #0
   3285e:	d100      	bne.n	32862 <__aeabi_fsub+0x23a>
   32860:	e728      	b.n	326b4 <__aeabi_fsub+0x8c>
   32862:	2280      	movs	r2, #128	; 0x80
   32864:	4651      	mov	r1, sl
   32866:	03d2      	lsls	r2, r2, #15
   32868:	4211      	tst	r1, r2
   3286a:	d003      	beq.n	32874 <__aeabi_fsub+0x24c>
   3286c:	4661      	mov	r1, ip
   3286e:	4211      	tst	r1, r2
   32870:	d100      	bne.n	32874 <__aeabi_fsub+0x24c>
   32872:	0033      	movs	r3, r6
   32874:	24ff      	movs	r4, #255	; 0xff
   32876:	e71d      	b.n	326b4 <__aeabi_fsub+0x8c>
   32878:	24ff      	movs	r4, #255	; 0xff
   3287a:	2300      	movs	r3, #0
   3287c:	e72c      	b.n	326d8 <__aeabi_fsub+0xb0>
   3287e:	2c00      	cmp	r4, #0
   32880:	d1e9      	bne.n	32856 <__aeabi_fsub+0x22e>
   32882:	2b00      	cmp	r3, #0
   32884:	d063      	beq.n	3294e <__aeabi_fsub+0x326>
   32886:	2e00      	cmp	r6, #0
   32888:	d100      	bne.n	3288c <__aeabi_fsub+0x264>
   3288a:	e713      	b.n	326b4 <__aeabi_fsub+0x8c>
   3288c:	199b      	adds	r3, r3, r6
   3288e:	015a      	lsls	r2, r3, #5
   32890:	d400      	bmi.n	32894 <__aeabi_fsub+0x26c>
   32892:	e73e      	b.n	32712 <__aeabi_fsub+0xea>
   32894:	4a31      	ldr	r2, [pc, #196]	; (3295c <__aeabi_fsub+0x334>)
   32896:	000c      	movs	r4, r1
   32898:	4013      	ands	r3, r2
   3289a:	e70b      	b.n	326b4 <__aeabi_fsub+0x8c>
   3289c:	2c00      	cmp	r4, #0
   3289e:	d11e      	bne.n	328de <__aeabi_fsub+0x2b6>
   328a0:	2b00      	cmp	r3, #0
   328a2:	d12f      	bne.n	32904 <__aeabi_fsub+0x2dc>
   328a4:	2e00      	cmp	r6, #0
   328a6:	d04f      	beq.n	32948 <__aeabi_fsub+0x320>
   328a8:	0033      	movs	r3, r6
   328aa:	000d      	movs	r5, r1
   328ac:	e702      	b.n	326b4 <__aeabi_fsub+0x8c>
   328ae:	2601      	movs	r6, #1
   328b0:	e755      	b.n	3275e <__aeabi_fsub+0x136>
   328b2:	2c00      	cmp	r4, #0
   328b4:	d11f      	bne.n	328f6 <__aeabi_fsub+0x2ce>
   328b6:	2b00      	cmp	r3, #0
   328b8:	d043      	beq.n	32942 <__aeabi_fsub+0x31a>
   328ba:	43c9      	mvns	r1, r1
   328bc:	2900      	cmp	r1, #0
   328be:	d00b      	beq.n	328d8 <__aeabi_fsub+0x2b0>
   328c0:	28ff      	cmp	r0, #255	; 0xff
   328c2:	d039      	beq.n	32938 <__aeabi_fsub+0x310>
   328c4:	291b      	cmp	r1, #27
   328c6:	dc44      	bgt.n	32952 <__aeabi_fsub+0x32a>
   328c8:	001c      	movs	r4, r3
   328ca:	2720      	movs	r7, #32
   328cc:	40cc      	lsrs	r4, r1
   328ce:	1a79      	subs	r1, r7, r1
   328d0:	408b      	lsls	r3, r1
   328d2:	1e59      	subs	r1, r3, #1
   328d4:	418b      	sbcs	r3, r1
   328d6:	4323      	orrs	r3, r4
   328d8:	199b      	adds	r3, r3, r6
   328da:	0004      	movs	r4, r0
   328dc:	e740      	b.n	32760 <__aeabi_fsub+0x138>
   328de:	2b00      	cmp	r3, #0
   328e0:	d11a      	bne.n	32918 <__aeabi_fsub+0x2f0>
   328e2:	2e00      	cmp	r6, #0
   328e4:	d124      	bne.n	32930 <__aeabi_fsub+0x308>
   328e6:	2780      	movs	r7, #128	; 0x80
   328e8:	2200      	movs	r2, #0
   328ea:	03ff      	lsls	r7, r7, #15
   328ec:	e71b      	b.n	32726 <__aeabi_fsub+0xfe>
   328ee:	0033      	movs	r3, r6
   328f0:	0004      	movs	r4, r0
   328f2:	000d      	movs	r5, r1
   328f4:	e6de      	b.n	326b4 <__aeabi_fsub+0x8c>
   328f6:	28ff      	cmp	r0, #255	; 0xff
   328f8:	d01e      	beq.n	32938 <__aeabi_fsub+0x310>
   328fa:	2480      	movs	r4, #128	; 0x80
   328fc:	04e4      	lsls	r4, r4, #19
   328fe:	4249      	negs	r1, r1
   32900:	4323      	orrs	r3, r4
   32902:	e7df      	b.n	328c4 <__aeabi_fsub+0x29c>
   32904:	2e00      	cmp	r6, #0
   32906:	d100      	bne.n	3290a <__aeabi_fsub+0x2e2>
   32908:	e6d4      	b.n	326b4 <__aeabi_fsub+0x8c>
   3290a:	1b9f      	subs	r7, r3, r6
   3290c:	017a      	lsls	r2, r7, #5
   3290e:	d400      	bmi.n	32912 <__aeabi_fsub+0x2ea>
   32910:	e737      	b.n	32782 <__aeabi_fsub+0x15a>
   32912:	1af3      	subs	r3, r6, r3
   32914:	000d      	movs	r5, r1
   32916:	e6cd      	b.n	326b4 <__aeabi_fsub+0x8c>
   32918:	24ff      	movs	r4, #255	; 0xff
   3291a:	2e00      	cmp	r6, #0
   3291c:	d100      	bne.n	32920 <__aeabi_fsub+0x2f8>
   3291e:	e6c9      	b.n	326b4 <__aeabi_fsub+0x8c>
   32920:	2280      	movs	r2, #128	; 0x80
   32922:	4650      	mov	r0, sl
   32924:	03d2      	lsls	r2, r2, #15
   32926:	4210      	tst	r0, r2
   32928:	d0a4      	beq.n	32874 <__aeabi_fsub+0x24c>
   3292a:	4660      	mov	r0, ip
   3292c:	4210      	tst	r0, r2
   3292e:	d1a1      	bne.n	32874 <__aeabi_fsub+0x24c>
   32930:	0033      	movs	r3, r6
   32932:	000d      	movs	r5, r1
   32934:	24ff      	movs	r4, #255	; 0xff
   32936:	e6bd      	b.n	326b4 <__aeabi_fsub+0x8c>
   32938:	0033      	movs	r3, r6
   3293a:	24ff      	movs	r4, #255	; 0xff
   3293c:	e6ba      	b.n	326b4 <__aeabi_fsub+0x8c>
   3293e:	2301      	movs	r3, #1
   32940:	e76e      	b.n	32820 <__aeabi_fsub+0x1f8>
   32942:	0033      	movs	r3, r6
   32944:	0004      	movs	r4, r0
   32946:	e6b5      	b.n	326b4 <__aeabi_fsub+0x8c>
   32948:	2700      	movs	r7, #0
   3294a:	2200      	movs	r2, #0
   3294c:	e71c      	b.n	32788 <__aeabi_fsub+0x160>
   3294e:	0033      	movs	r3, r6
   32950:	e6b0      	b.n	326b4 <__aeabi_fsub+0x8c>
   32952:	2301      	movs	r3, #1
   32954:	e7c0      	b.n	328d8 <__aeabi_fsub+0x2b0>
   32956:	46c0      	nop			; (mov r8, r8)
   32958:	7dffffff 	.word	0x7dffffff
   3295c:	fbffffff 	.word	0xfbffffff

00032960 <__aeabi_f2iz>:
   32960:	0241      	lsls	r1, r0, #9
   32962:	0043      	lsls	r3, r0, #1
   32964:	0fc2      	lsrs	r2, r0, #31
   32966:	0a49      	lsrs	r1, r1, #9
   32968:	0e1b      	lsrs	r3, r3, #24
   3296a:	2000      	movs	r0, #0
   3296c:	2b7e      	cmp	r3, #126	; 0x7e
   3296e:	dd0d      	ble.n	3298c <__aeabi_f2iz+0x2c>
   32970:	2b9d      	cmp	r3, #157	; 0x9d
   32972:	dc0c      	bgt.n	3298e <__aeabi_f2iz+0x2e>
   32974:	2080      	movs	r0, #128	; 0x80
   32976:	0400      	lsls	r0, r0, #16
   32978:	4301      	orrs	r1, r0
   3297a:	2b95      	cmp	r3, #149	; 0x95
   3297c:	dc0a      	bgt.n	32994 <__aeabi_f2iz+0x34>
   3297e:	2096      	movs	r0, #150	; 0x96
   32980:	1ac3      	subs	r3, r0, r3
   32982:	40d9      	lsrs	r1, r3
   32984:	4248      	negs	r0, r1
   32986:	2a00      	cmp	r2, #0
   32988:	d100      	bne.n	3298c <__aeabi_f2iz+0x2c>
   3298a:	0008      	movs	r0, r1
   3298c:	4770      	bx	lr
   3298e:	4b03      	ldr	r3, [pc, #12]	; (3299c <__aeabi_f2iz+0x3c>)
   32990:	18d0      	adds	r0, r2, r3
   32992:	e7fb      	b.n	3298c <__aeabi_f2iz+0x2c>
   32994:	3b96      	subs	r3, #150	; 0x96
   32996:	4099      	lsls	r1, r3
   32998:	e7f4      	b.n	32984 <__aeabi_f2iz+0x24>
   3299a:	46c0      	nop			; (mov r8, r8)
   3299c:	7fffffff 	.word	0x7fffffff

000329a0 <__aeabi_i2f>:
   329a0:	b570      	push	{r4, r5, r6, lr}
   329a2:	2800      	cmp	r0, #0
   329a4:	d030      	beq.n	32a08 <__aeabi_i2f+0x68>
   329a6:	17c3      	asrs	r3, r0, #31
   329a8:	18c4      	adds	r4, r0, r3
   329aa:	405c      	eors	r4, r3
   329ac:	0fc5      	lsrs	r5, r0, #31
   329ae:	0020      	movs	r0, r4
   329b0:	f001 fcc6 	bl	34340 <__clzsi2>
   329b4:	239e      	movs	r3, #158	; 0x9e
   329b6:	1a1b      	subs	r3, r3, r0
   329b8:	2b96      	cmp	r3, #150	; 0x96
   329ba:	dc0d      	bgt.n	329d8 <__aeabi_i2f+0x38>
   329bc:	2296      	movs	r2, #150	; 0x96
   329be:	1ad2      	subs	r2, r2, r3
   329c0:	4094      	lsls	r4, r2
   329c2:	002a      	movs	r2, r5
   329c4:	0264      	lsls	r4, r4, #9
   329c6:	0a64      	lsrs	r4, r4, #9
   329c8:	b2db      	uxtb	r3, r3
   329ca:	0264      	lsls	r4, r4, #9
   329cc:	05db      	lsls	r3, r3, #23
   329ce:	0a60      	lsrs	r0, r4, #9
   329d0:	07d2      	lsls	r2, r2, #31
   329d2:	4318      	orrs	r0, r3
   329d4:	4310      	orrs	r0, r2
   329d6:	bd70      	pop	{r4, r5, r6, pc}
   329d8:	2b99      	cmp	r3, #153	; 0x99
   329da:	dc19      	bgt.n	32a10 <__aeabi_i2f+0x70>
   329dc:	2299      	movs	r2, #153	; 0x99
   329de:	1ad2      	subs	r2, r2, r3
   329e0:	2a00      	cmp	r2, #0
   329e2:	dd29      	ble.n	32a38 <__aeabi_i2f+0x98>
   329e4:	4094      	lsls	r4, r2
   329e6:	0022      	movs	r2, r4
   329e8:	4c14      	ldr	r4, [pc, #80]	; (32a3c <__aeabi_i2f+0x9c>)
   329ea:	4014      	ands	r4, r2
   329ec:	0751      	lsls	r1, r2, #29
   329ee:	d004      	beq.n	329fa <__aeabi_i2f+0x5a>
   329f0:	210f      	movs	r1, #15
   329f2:	400a      	ands	r2, r1
   329f4:	2a04      	cmp	r2, #4
   329f6:	d000      	beq.n	329fa <__aeabi_i2f+0x5a>
   329f8:	3404      	adds	r4, #4
   329fa:	0162      	lsls	r2, r4, #5
   329fc:	d413      	bmi.n	32a26 <__aeabi_i2f+0x86>
   329fe:	01a4      	lsls	r4, r4, #6
   32a00:	0a64      	lsrs	r4, r4, #9
   32a02:	b2db      	uxtb	r3, r3
   32a04:	002a      	movs	r2, r5
   32a06:	e7e0      	b.n	329ca <__aeabi_i2f+0x2a>
   32a08:	2200      	movs	r2, #0
   32a0a:	2300      	movs	r3, #0
   32a0c:	2400      	movs	r4, #0
   32a0e:	e7dc      	b.n	329ca <__aeabi_i2f+0x2a>
   32a10:	2205      	movs	r2, #5
   32a12:	0021      	movs	r1, r4
   32a14:	1a12      	subs	r2, r2, r0
   32a16:	40d1      	lsrs	r1, r2
   32a18:	22b9      	movs	r2, #185	; 0xb9
   32a1a:	1ad2      	subs	r2, r2, r3
   32a1c:	4094      	lsls	r4, r2
   32a1e:	1e62      	subs	r2, r4, #1
   32a20:	4194      	sbcs	r4, r2
   32a22:	430c      	orrs	r4, r1
   32a24:	e7da      	b.n	329dc <__aeabi_i2f+0x3c>
   32a26:	4b05      	ldr	r3, [pc, #20]	; (32a3c <__aeabi_i2f+0x9c>)
   32a28:	002a      	movs	r2, r5
   32a2a:	401c      	ands	r4, r3
   32a2c:	239f      	movs	r3, #159	; 0x9f
   32a2e:	01a4      	lsls	r4, r4, #6
   32a30:	1a1b      	subs	r3, r3, r0
   32a32:	0a64      	lsrs	r4, r4, #9
   32a34:	b2db      	uxtb	r3, r3
   32a36:	e7c8      	b.n	329ca <__aeabi_i2f+0x2a>
   32a38:	0022      	movs	r2, r4
   32a3a:	e7d5      	b.n	329e8 <__aeabi_i2f+0x48>
   32a3c:	fbffffff 	.word	0xfbffffff

00032a40 <__aeabi_dadd>:
   32a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32a42:	4645      	mov	r5, r8
   32a44:	46de      	mov	lr, fp
   32a46:	4657      	mov	r7, sl
   32a48:	464e      	mov	r6, r9
   32a4a:	030c      	lsls	r4, r1, #12
   32a4c:	b5e0      	push	{r5, r6, r7, lr}
   32a4e:	004e      	lsls	r6, r1, #1
   32a50:	0fc9      	lsrs	r1, r1, #31
   32a52:	4688      	mov	r8, r1
   32a54:	000d      	movs	r5, r1
   32a56:	0a61      	lsrs	r1, r4, #9
   32a58:	0f44      	lsrs	r4, r0, #29
   32a5a:	430c      	orrs	r4, r1
   32a5c:	00c7      	lsls	r7, r0, #3
   32a5e:	0319      	lsls	r1, r3, #12
   32a60:	0058      	lsls	r0, r3, #1
   32a62:	0fdb      	lsrs	r3, r3, #31
   32a64:	469b      	mov	fp, r3
   32a66:	0a4b      	lsrs	r3, r1, #9
   32a68:	0f51      	lsrs	r1, r2, #29
   32a6a:	430b      	orrs	r3, r1
   32a6c:	0d76      	lsrs	r6, r6, #21
   32a6e:	0d40      	lsrs	r0, r0, #21
   32a70:	0019      	movs	r1, r3
   32a72:	00d2      	lsls	r2, r2, #3
   32a74:	45d8      	cmp	r8, fp
   32a76:	d100      	bne.n	32a7a <__aeabi_dadd+0x3a>
   32a78:	e0ae      	b.n	32bd8 <__aeabi_dadd+0x198>
   32a7a:	1a35      	subs	r5, r6, r0
   32a7c:	2d00      	cmp	r5, #0
   32a7e:	dc00      	bgt.n	32a82 <__aeabi_dadd+0x42>
   32a80:	e0f6      	b.n	32c70 <__aeabi_dadd+0x230>
   32a82:	2800      	cmp	r0, #0
   32a84:	d10f      	bne.n	32aa6 <__aeabi_dadd+0x66>
   32a86:	4313      	orrs	r3, r2
   32a88:	d100      	bne.n	32a8c <__aeabi_dadd+0x4c>
   32a8a:	e0db      	b.n	32c44 <__aeabi_dadd+0x204>
   32a8c:	1e6b      	subs	r3, r5, #1
   32a8e:	2b00      	cmp	r3, #0
   32a90:	d000      	beq.n	32a94 <__aeabi_dadd+0x54>
   32a92:	e137      	b.n	32d04 <__aeabi_dadd+0x2c4>
   32a94:	1aba      	subs	r2, r7, r2
   32a96:	4297      	cmp	r7, r2
   32a98:	41bf      	sbcs	r7, r7
   32a9a:	1a64      	subs	r4, r4, r1
   32a9c:	427f      	negs	r7, r7
   32a9e:	1be4      	subs	r4, r4, r7
   32aa0:	2601      	movs	r6, #1
   32aa2:	0017      	movs	r7, r2
   32aa4:	e024      	b.n	32af0 <__aeabi_dadd+0xb0>
   32aa6:	4bc6      	ldr	r3, [pc, #792]	; (32dc0 <__aeabi_dadd+0x380>)
   32aa8:	429e      	cmp	r6, r3
   32aaa:	d04d      	beq.n	32b48 <__aeabi_dadd+0x108>
   32aac:	2380      	movs	r3, #128	; 0x80
   32aae:	041b      	lsls	r3, r3, #16
   32ab0:	4319      	orrs	r1, r3
   32ab2:	2d38      	cmp	r5, #56	; 0x38
   32ab4:	dd00      	ble.n	32ab8 <__aeabi_dadd+0x78>
   32ab6:	e107      	b.n	32cc8 <__aeabi_dadd+0x288>
   32ab8:	2d1f      	cmp	r5, #31
   32aba:	dd00      	ble.n	32abe <__aeabi_dadd+0x7e>
   32abc:	e138      	b.n	32d30 <__aeabi_dadd+0x2f0>
   32abe:	2020      	movs	r0, #32
   32ac0:	1b43      	subs	r3, r0, r5
   32ac2:	469a      	mov	sl, r3
   32ac4:	000b      	movs	r3, r1
   32ac6:	4650      	mov	r0, sl
   32ac8:	4083      	lsls	r3, r0
   32aca:	4699      	mov	r9, r3
   32acc:	0013      	movs	r3, r2
   32ace:	4648      	mov	r0, r9
   32ad0:	40eb      	lsrs	r3, r5
   32ad2:	4318      	orrs	r0, r3
   32ad4:	0003      	movs	r3, r0
   32ad6:	4650      	mov	r0, sl
   32ad8:	4082      	lsls	r2, r0
   32ada:	1e50      	subs	r0, r2, #1
   32adc:	4182      	sbcs	r2, r0
   32ade:	40e9      	lsrs	r1, r5
   32ae0:	431a      	orrs	r2, r3
   32ae2:	1aba      	subs	r2, r7, r2
   32ae4:	1a61      	subs	r1, r4, r1
   32ae6:	4297      	cmp	r7, r2
   32ae8:	41a4      	sbcs	r4, r4
   32aea:	0017      	movs	r7, r2
   32aec:	4264      	negs	r4, r4
   32aee:	1b0c      	subs	r4, r1, r4
   32af0:	0223      	lsls	r3, r4, #8
   32af2:	d562      	bpl.n	32bba <__aeabi_dadd+0x17a>
   32af4:	0264      	lsls	r4, r4, #9
   32af6:	0a65      	lsrs	r5, r4, #9
   32af8:	2d00      	cmp	r5, #0
   32afa:	d100      	bne.n	32afe <__aeabi_dadd+0xbe>
   32afc:	e0df      	b.n	32cbe <__aeabi_dadd+0x27e>
   32afe:	0028      	movs	r0, r5
   32b00:	f001 fc1e 	bl	34340 <__clzsi2>
   32b04:	0003      	movs	r3, r0
   32b06:	3b08      	subs	r3, #8
   32b08:	2b1f      	cmp	r3, #31
   32b0a:	dd00      	ble.n	32b0e <__aeabi_dadd+0xce>
   32b0c:	e0d2      	b.n	32cb4 <__aeabi_dadd+0x274>
   32b0e:	2220      	movs	r2, #32
   32b10:	003c      	movs	r4, r7
   32b12:	1ad2      	subs	r2, r2, r3
   32b14:	409d      	lsls	r5, r3
   32b16:	40d4      	lsrs	r4, r2
   32b18:	409f      	lsls	r7, r3
   32b1a:	4325      	orrs	r5, r4
   32b1c:	429e      	cmp	r6, r3
   32b1e:	dd00      	ble.n	32b22 <__aeabi_dadd+0xe2>
   32b20:	e0c4      	b.n	32cac <__aeabi_dadd+0x26c>
   32b22:	1b9e      	subs	r6, r3, r6
   32b24:	1c73      	adds	r3, r6, #1
   32b26:	2b1f      	cmp	r3, #31
   32b28:	dd00      	ble.n	32b2c <__aeabi_dadd+0xec>
   32b2a:	e0f1      	b.n	32d10 <__aeabi_dadd+0x2d0>
   32b2c:	2220      	movs	r2, #32
   32b2e:	0038      	movs	r0, r7
   32b30:	0029      	movs	r1, r5
   32b32:	1ad2      	subs	r2, r2, r3
   32b34:	40d8      	lsrs	r0, r3
   32b36:	4091      	lsls	r1, r2
   32b38:	4097      	lsls	r7, r2
   32b3a:	002c      	movs	r4, r5
   32b3c:	4301      	orrs	r1, r0
   32b3e:	1e78      	subs	r0, r7, #1
   32b40:	4187      	sbcs	r7, r0
   32b42:	40dc      	lsrs	r4, r3
   32b44:	2600      	movs	r6, #0
   32b46:	430f      	orrs	r7, r1
   32b48:	077b      	lsls	r3, r7, #29
   32b4a:	d009      	beq.n	32b60 <__aeabi_dadd+0x120>
   32b4c:	230f      	movs	r3, #15
   32b4e:	403b      	ands	r3, r7
   32b50:	2b04      	cmp	r3, #4
   32b52:	d005      	beq.n	32b60 <__aeabi_dadd+0x120>
   32b54:	1d3b      	adds	r3, r7, #4
   32b56:	42bb      	cmp	r3, r7
   32b58:	41bf      	sbcs	r7, r7
   32b5a:	427f      	negs	r7, r7
   32b5c:	19e4      	adds	r4, r4, r7
   32b5e:	001f      	movs	r7, r3
   32b60:	0223      	lsls	r3, r4, #8
   32b62:	d52c      	bpl.n	32bbe <__aeabi_dadd+0x17e>
   32b64:	4b96      	ldr	r3, [pc, #600]	; (32dc0 <__aeabi_dadd+0x380>)
   32b66:	3601      	adds	r6, #1
   32b68:	429e      	cmp	r6, r3
   32b6a:	d100      	bne.n	32b6e <__aeabi_dadd+0x12e>
   32b6c:	e09a      	b.n	32ca4 <__aeabi_dadd+0x264>
   32b6e:	4645      	mov	r5, r8
   32b70:	4b94      	ldr	r3, [pc, #592]	; (32dc4 <__aeabi_dadd+0x384>)
   32b72:	08ff      	lsrs	r7, r7, #3
   32b74:	401c      	ands	r4, r3
   32b76:	0760      	lsls	r0, r4, #29
   32b78:	0576      	lsls	r6, r6, #21
   32b7a:	0264      	lsls	r4, r4, #9
   32b7c:	4307      	orrs	r7, r0
   32b7e:	0b24      	lsrs	r4, r4, #12
   32b80:	0d76      	lsrs	r6, r6, #21
   32b82:	2100      	movs	r1, #0
   32b84:	0324      	lsls	r4, r4, #12
   32b86:	0b23      	lsrs	r3, r4, #12
   32b88:	0d0c      	lsrs	r4, r1, #20
   32b8a:	4a8f      	ldr	r2, [pc, #572]	; (32dc8 <__aeabi_dadd+0x388>)
   32b8c:	0524      	lsls	r4, r4, #20
   32b8e:	431c      	orrs	r4, r3
   32b90:	4014      	ands	r4, r2
   32b92:	0533      	lsls	r3, r6, #20
   32b94:	4323      	orrs	r3, r4
   32b96:	005b      	lsls	r3, r3, #1
   32b98:	07ed      	lsls	r5, r5, #31
   32b9a:	085b      	lsrs	r3, r3, #1
   32b9c:	432b      	orrs	r3, r5
   32b9e:	0038      	movs	r0, r7
   32ba0:	0019      	movs	r1, r3
   32ba2:	bc3c      	pop	{r2, r3, r4, r5}
   32ba4:	4690      	mov	r8, r2
   32ba6:	4699      	mov	r9, r3
   32ba8:	46a2      	mov	sl, r4
   32baa:	46ab      	mov	fp, r5
   32bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32bae:	4664      	mov	r4, ip
   32bb0:	4304      	orrs	r4, r0
   32bb2:	d100      	bne.n	32bb6 <__aeabi_dadd+0x176>
   32bb4:	e211      	b.n	32fda <__aeabi_dadd+0x59a>
   32bb6:	0004      	movs	r4, r0
   32bb8:	4667      	mov	r7, ip
   32bba:	077b      	lsls	r3, r7, #29
   32bbc:	d1c6      	bne.n	32b4c <__aeabi_dadd+0x10c>
   32bbe:	4645      	mov	r5, r8
   32bc0:	0760      	lsls	r0, r4, #29
   32bc2:	08ff      	lsrs	r7, r7, #3
   32bc4:	4307      	orrs	r7, r0
   32bc6:	08e4      	lsrs	r4, r4, #3
   32bc8:	4b7d      	ldr	r3, [pc, #500]	; (32dc0 <__aeabi_dadd+0x380>)
   32bca:	429e      	cmp	r6, r3
   32bcc:	d030      	beq.n	32c30 <__aeabi_dadd+0x1f0>
   32bce:	0324      	lsls	r4, r4, #12
   32bd0:	0576      	lsls	r6, r6, #21
   32bd2:	0b24      	lsrs	r4, r4, #12
   32bd4:	0d76      	lsrs	r6, r6, #21
   32bd6:	e7d4      	b.n	32b82 <__aeabi_dadd+0x142>
   32bd8:	1a33      	subs	r3, r6, r0
   32bda:	469a      	mov	sl, r3
   32bdc:	2b00      	cmp	r3, #0
   32bde:	dd78      	ble.n	32cd2 <__aeabi_dadd+0x292>
   32be0:	2800      	cmp	r0, #0
   32be2:	d031      	beq.n	32c48 <__aeabi_dadd+0x208>
   32be4:	4876      	ldr	r0, [pc, #472]	; (32dc0 <__aeabi_dadd+0x380>)
   32be6:	4286      	cmp	r6, r0
   32be8:	d0ae      	beq.n	32b48 <__aeabi_dadd+0x108>
   32bea:	2080      	movs	r0, #128	; 0x80
   32bec:	0400      	lsls	r0, r0, #16
   32bee:	4301      	orrs	r1, r0
   32bf0:	4653      	mov	r3, sl
   32bf2:	2b38      	cmp	r3, #56	; 0x38
   32bf4:	dc00      	bgt.n	32bf8 <__aeabi_dadd+0x1b8>
   32bf6:	e0e9      	b.n	32dcc <__aeabi_dadd+0x38c>
   32bf8:	430a      	orrs	r2, r1
   32bfa:	1e51      	subs	r1, r2, #1
   32bfc:	418a      	sbcs	r2, r1
   32bfe:	2100      	movs	r1, #0
   32c00:	19d2      	adds	r2, r2, r7
   32c02:	42ba      	cmp	r2, r7
   32c04:	41bf      	sbcs	r7, r7
   32c06:	1909      	adds	r1, r1, r4
   32c08:	427c      	negs	r4, r7
   32c0a:	0017      	movs	r7, r2
   32c0c:	190c      	adds	r4, r1, r4
   32c0e:	0223      	lsls	r3, r4, #8
   32c10:	d5d3      	bpl.n	32bba <__aeabi_dadd+0x17a>
   32c12:	4b6b      	ldr	r3, [pc, #428]	; (32dc0 <__aeabi_dadd+0x380>)
   32c14:	3601      	adds	r6, #1
   32c16:	429e      	cmp	r6, r3
   32c18:	d100      	bne.n	32c1c <__aeabi_dadd+0x1dc>
   32c1a:	e13a      	b.n	32e92 <__aeabi_dadd+0x452>
   32c1c:	2001      	movs	r0, #1
   32c1e:	4b69      	ldr	r3, [pc, #420]	; (32dc4 <__aeabi_dadd+0x384>)
   32c20:	401c      	ands	r4, r3
   32c22:	087b      	lsrs	r3, r7, #1
   32c24:	4007      	ands	r7, r0
   32c26:	431f      	orrs	r7, r3
   32c28:	07e0      	lsls	r0, r4, #31
   32c2a:	4307      	orrs	r7, r0
   32c2c:	0864      	lsrs	r4, r4, #1
   32c2e:	e78b      	b.n	32b48 <__aeabi_dadd+0x108>
   32c30:	0023      	movs	r3, r4
   32c32:	433b      	orrs	r3, r7
   32c34:	d100      	bne.n	32c38 <__aeabi_dadd+0x1f8>
   32c36:	e1cb      	b.n	32fd0 <__aeabi_dadd+0x590>
   32c38:	2280      	movs	r2, #128	; 0x80
   32c3a:	0312      	lsls	r2, r2, #12
   32c3c:	4314      	orrs	r4, r2
   32c3e:	0324      	lsls	r4, r4, #12
   32c40:	0b24      	lsrs	r4, r4, #12
   32c42:	e79e      	b.n	32b82 <__aeabi_dadd+0x142>
   32c44:	002e      	movs	r6, r5
   32c46:	e77f      	b.n	32b48 <__aeabi_dadd+0x108>
   32c48:	0008      	movs	r0, r1
   32c4a:	4310      	orrs	r0, r2
   32c4c:	d100      	bne.n	32c50 <__aeabi_dadd+0x210>
   32c4e:	e0b4      	b.n	32dba <__aeabi_dadd+0x37a>
   32c50:	1e58      	subs	r0, r3, #1
   32c52:	2800      	cmp	r0, #0
   32c54:	d000      	beq.n	32c58 <__aeabi_dadd+0x218>
   32c56:	e0de      	b.n	32e16 <__aeabi_dadd+0x3d6>
   32c58:	18ba      	adds	r2, r7, r2
   32c5a:	42ba      	cmp	r2, r7
   32c5c:	419b      	sbcs	r3, r3
   32c5e:	1864      	adds	r4, r4, r1
   32c60:	425b      	negs	r3, r3
   32c62:	18e4      	adds	r4, r4, r3
   32c64:	0017      	movs	r7, r2
   32c66:	2601      	movs	r6, #1
   32c68:	0223      	lsls	r3, r4, #8
   32c6a:	d5a6      	bpl.n	32bba <__aeabi_dadd+0x17a>
   32c6c:	2602      	movs	r6, #2
   32c6e:	e7d5      	b.n	32c1c <__aeabi_dadd+0x1dc>
   32c70:	2d00      	cmp	r5, #0
   32c72:	d16e      	bne.n	32d52 <__aeabi_dadd+0x312>
   32c74:	1c70      	adds	r0, r6, #1
   32c76:	0540      	lsls	r0, r0, #21
   32c78:	0d40      	lsrs	r0, r0, #21
   32c7a:	2801      	cmp	r0, #1
   32c7c:	dc00      	bgt.n	32c80 <__aeabi_dadd+0x240>
   32c7e:	e0f9      	b.n	32e74 <__aeabi_dadd+0x434>
   32c80:	1ab8      	subs	r0, r7, r2
   32c82:	4684      	mov	ip, r0
   32c84:	4287      	cmp	r7, r0
   32c86:	4180      	sbcs	r0, r0
   32c88:	1ae5      	subs	r5, r4, r3
   32c8a:	4240      	negs	r0, r0
   32c8c:	1a2d      	subs	r5, r5, r0
   32c8e:	0228      	lsls	r0, r5, #8
   32c90:	d400      	bmi.n	32c94 <__aeabi_dadd+0x254>
   32c92:	e089      	b.n	32da8 <__aeabi_dadd+0x368>
   32c94:	1bd7      	subs	r7, r2, r7
   32c96:	42ba      	cmp	r2, r7
   32c98:	4192      	sbcs	r2, r2
   32c9a:	1b1c      	subs	r4, r3, r4
   32c9c:	4252      	negs	r2, r2
   32c9e:	1aa5      	subs	r5, r4, r2
   32ca0:	46d8      	mov	r8, fp
   32ca2:	e729      	b.n	32af8 <__aeabi_dadd+0xb8>
   32ca4:	4645      	mov	r5, r8
   32ca6:	2400      	movs	r4, #0
   32ca8:	2700      	movs	r7, #0
   32caa:	e76a      	b.n	32b82 <__aeabi_dadd+0x142>
   32cac:	4c45      	ldr	r4, [pc, #276]	; (32dc4 <__aeabi_dadd+0x384>)
   32cae:	1af6      	subs	r6, r6, r3
   32cb0:	402c      	ands	r4, r5
   32cb2:	e749      	b.n	32b48 <__aeabi_dadd+0x108>
   32cb4:	003d      	movs	r5, r7
   32cb6:	3828      	subs	r0, #40	; 0x28
   32cb8:	4085      	lsls	r5, r0
   32cba:	2700      	movs	r7, #0
   32cbc:	e72e      	b.n	32b1c <__aeabi_dadd+0xdc>
   32cbe:	0038      	movs	r0, r7
   32cc0:	f001 fb3e 	bl	34340 <__clzsi2>
   32cc4:	3020      	adds	r0, #32
   32cc6:	e71d      	b.n	32b04 <__aeabi_dadd+0xc4>
   32cc8:	430a      	orrs	r2, r1
   32cca:	1e51      	subs	r1, r2, #1
   32ccc:	418a      	sbcs	r2, r1
   32cce:	2100      	movs	r1, #0
   32cd0:	e707      	b.n	32ae2 <__aeabi_dadd+0xa2>
   32cd2:	2b00      	cmp	r3, #0
   32cd4:	d000      	beq.n	32cd8 <__aeabi_dadd+0x298>
   32cd6:	e0f3      	b.n	32ec0 <__aeabi_dadd+0x480>
   32cd8:	1c70      	adds	r0, r6, #1
   32cda:	0543      	lsls	r3, r0, #21
   32cdc:	0d5b      	lsrs	r3, r3, #21
   32cde:	2b01      	cmp	r3, #1
   32ce0:	dc00      	bgt.n	32ce4 <__aeabi_dadd+0x2a4>
   32ce2:	e0ad      	b.n	32e40 <__aeabi_dadd+0x400>
   32ce4:	4b36      	ldr	r3, [pc, #216]	; (32dc0 <__aeabi_dadd+0x380>)
   32ce6:	4298      	cmp	r0, r3
   32ce8:	d100      	bne.n	32cec <__aeabi_dadd+0x2ac>
   32cea:	e0d1      	b.n	32e90 <__aeabi_dadd+0x450>
   32cec:	18ba      	adds	r2, r7, r2
   32cee:	42ba      	cmp	r2, r7
   32cf0:	41bf      	sbcs	r7, r7
   32cf2:	1864      	adds	r4, r4, r1
   32cf4:	427f      	negs	r7, r7
   32cf6:	19e4      	adds	r4, r4, r7
   32cf8:	07e7      	lsls	r7, r4, #31
   32cfa:	0852      	lsrs	r2, r2, #1
   32cfc:	4317      	orrs	r7, r2
   32cfe:	0864      	lsrs	r4, r4, #1
   32d00:	0006      	movs	r6, r0
   32d02:	e721      	b.n	32b48 <__aeabi_dadd+0x108>
   32d04:	482e      	ldr	r0, [pc, #184]	; (32dc0 <__aeabi_dadd+0x380>)
   32d06:	4285      	cmp	r5, r0
   32d08:	d100      	bne.n	32d0c <__aeabi_dadd+0x2cc>
   32d0a:	e093      	b.n	32e34 <__aeabi_dadd+0x3f4>
   32d0c:	001d      	movs	r5, r3
   32d0e:	e6d0      	b.n	32ab2 <__aeabi_dadd+0x72>
   32d10:	0029      	movs	r1, r5
   32d12:	3e1f      	subs	r6, #31
   32d14:	40f1      	lsrs	r1, r6
   32d16:	2b20      	cmp	r3, #32
   32d18:	d100      	bne.n	32d1c <__aeabi_dadd+0x2dc>
   32d1a:	e08d      	b.n	32e38 <__aeabi_dadd+0x3f8>
   32d1c:	2240      	movs	r2, #64	; 0x40
   32d1e:	1ad3      	subs	r3, r2, r3
   32d20:	409d      	lsls	r5, r3
   32d22:	432f      	orrs	r7, r5
   32d24:	1e7d      	subs	r5, r7, #1
   32d26:	41af      	sbcs	r7, r5
   32d28:	2400      	movs	r4, #0
   32d2a:	430f      	orrs	r7, r1
   32d2c:	2600      	movs	r6, #0
   32d2e:	e744      	b.n	32bba <__aeabi_dadd+0x17a>
   32d30:	002b      	movs	r3, r5
   32d32:	0008      	movs	r0, r1
   32d34:	3b20      	subs	r3, #32
   32d36:	40d8      	lsrs	r0, r3
   32d38:	0003      	movs	r3, r0
   32d3a:	2d20      	cmp	r5, #32
   32d3c:	d100      	bne.n	32d40 <__aeabi_dadd+0x300>
   32d3e:	e07d      	b.n	32e3c <__aeabi_dadd+0x3fc>
   32d40:	2040      	movs	r0, #64	; 0x40
   32d42:	1b45      	subs	r5, r0, r5
   32d44:	40a9      	lsls	r1, r5
   32d46:	430a      	orrs	r2, r1
   32d48:	1e51      	subs	r1, r2, #1
   32d4a:	418a      	sbcs	r2, r1
   32d4c:	2100      	movs	r1, #0
   32d4e:	431a      	orrs	r2, r3
   32d50:	e6c7      	b.n	32ae2 <__aeabi_dadd+0xa2>
   32d52:	2e00      	cmp	r6, #0
   32d54:	d050      	beq.n	32df8 <__aeabi_dadd+0x3b8>
   32d56:	4e1a      	ldr	r6, [pc, #104]	; (32dc0 <__aeabi_dadd+0x380>)
   32d58:	42b0      	cmp	r0, r6
   32d5a:	d057      	beq.n	32e0c <__aeabi_dadd+0x3cc>
   32d5c:	2680      	movs	r6, #128	; 0x80
   32d5e:	426b      	negs	r3, r5
   32d60:	4699      	mov	r9, r3
   32d62:	0436      	lsls	r6, r6, #16
   32d64:	4334      	orrs	r4, r6
   32d66:	464b      	mov	r3, r9
   32d68:	2b38      	cmp	r3, #56	; 0x38
   32d6a:	dd00      	ble.n	32d6e <__aeabi_dadd+0x32e>
   32d6c:	e0d6      	b.n	32f1c <__aeabi_dadd+0x4dc>
   32d6e:	2b1f      	cmp	r3, #31
   32d70:	dd00      	ble.n	32d74 <__aeabi_dadd+0x334>
   32d72:	e135      	b.n	32fe0 <__aeabi_dadd+0x5a0>
   32d74:	2620      	movs	r6, #32
   32d76:	1af5      	subs	r5, r6, r3
   32d78:	0026      	movs	r6, r4
   32d7a:	40ae      	lsls	r6, r5
   32d7c:	46b2      	mov	sl, r6
   32d7e:	003e      	movs	r6, r7
   32d80:	40de      	lsrs	r6, r3
   32d82:	46ac      	mov	ip, r5
   32d84:	0035      	movs	r5, r6
   32d86:	4656      	mov	r6, sl
   32d88:	432e      	orrs	r6, r5
   32d8a:	4665      	mov	r5, ip
   32d8c:	40af      	lsls	r7, r5
   32d8e:	1e7d      	subs	r5, r7, #1
   32d90:	41af      	sbcs	r7, r5
   32d92:	40dc      	lsrs	r4, r3
   32d94:	4337      	orrs	r7, r6
   32d96:	1bd7      	subs	r7, r2, r7
   32d98:	42ba      	cmp	r2, r7
   32d9a:	4192      	sbcs	r2, r2
   32d9c:	1b0c      	subs	r4, r1, r4
   32d9e:	4252      	negs	r2, r2
   32da0:	1aa4      	subs	r4, r4, r2
   32da2:	0006      	movs	r6, r0
   32da4:	46d8      	mov	r8, fp
   32da6:	e6a3      	b.n	32af0 <__aeabi_dadd+0xb0>
   32da8:	4664      	mov	r4, ip
   32daa:	4667      	mov	r7, ip
   32dac:	432c      	orrs	r4, r5
   32dae:	d000      	beq.n	32db2 <__aeabi_dadd+0x372>
   32db0:	e6a2      	b.n	32af8 <__aeabi_dadd+0xb8>
   32db2:	2500      	movs	r5, #0
   32db4:	2600      	movs	r6, #0
   32db6:	2700      	movs	r7, #0
   32db8:	e706      	b.n	32bc8 <__aeabi_dadd+0x188>
   32dba:	001e      	movs	r6, r3
   32dbc:	e6c4      	b.n	32b48 <__aeabi_dadd+0x108>
   32dbe:	46c0      	nop			; (mov r8, r8)
   32dc0:	000007ff 	.word	0x000007ff
   32dc4:	ff7fffff 	.word	0xff7fffff
   32dc8:	800fffff 	.word	0x800fffff
   32dcc:	2b1f      	cmp	r3, #31
   32dce:	dc63      	bgt.n	32e98 <__aeabi_dadd+0x458>
   32dd0:	2020      	movs	r0, #32
   32dd2:	1ac3      	subs	r3, r0, r3
   32dd4:	0008      	movs	r0, r1
   32dd6:	4098      	lsls	r0, r3
   32dd8:	469c      	mov	ip, r3
   32dda:	4683      	mov	fp, r0
   32ddc:	4653      	mov	r3, sl
   32dde:	0010      	movs	r0, r2
   32de0:	40d8      	lsrs	r0, r3
   32de2:	0003      	movs	r3, r0
   32de4:	4658      	mov	r0, fp
   32de6:	4318      	orrs	r0, r3
   32de8:	4663      	mov	r3, ip
   32dea:	409a      	lsls	r2, r3
   32dec:	1e53      	subs	r3, r2, #1
   32dee:	419a      	sbcs	r2, r3
   32df0:	4653      	mov	r3, sl
   32df2:	4302      	orrs	r2, r0
   32df4:	40d9      	lsrs	r1, r3
   32df6:	e703      	b.n	32c00 <__aeabi_dadd+0x1c0>
   32df8:	0026      	movs	r6, r4
   32dfa:	433e      	orrs	r6, r7
   32dfc:	d006      	beq.n	32e0c <__aeabi_dadd+0x3cc>
   32dfe:	43eb      	mvns	r3, r5
   32e00:	4699      	mov	r9, r3
   32e02:	2b00      	cmp	r3, #0
   32e04:	d0c7      	beq.n	32d96 <__aeabi_dadd+0x356>
   32e06:	4e94      	ldr	r6, [pc, #592]	; (33058 <__aeabi_dadd+0x618>)
   32e08:	42b0      	cmp	r0, r6
   32e0a:	d1ac      	bne.n	32d66 <__aeabi_dadd+0x326>
   32e0c:	000c      	movs	r4, r1
   32e0e:	0017      	movs	r7, r2
   32e10:	0006      	movs	r6, r0
   32e12:	46d8      	mov	r8, fp
   32e14:	e698      	b.n	32b48 <__aeabi_dadd+0x108>
   32e16:	4b90      	ldr	r3, [pc, #576]	; (33058 <__aeabi_dadd+0x618>)
   32e18:	459a      	cmp	sl, r3
   32e1a:	d00b      	beq.n	32e34 <__aeabi_dadd+0x3f4>
   32e1c:	4682      	mov	sl, r0
   32e1e:	e6e7      	b.n	32bf0 <__aeabi_dadd+0x1b0>
   32e20:	2800      	cmp	r0, #0
   32e22:	d000      	beq.n	32e26 <__aeabi_dadd+0x3e6>
   32e24:	e09e      	b.n	32f64 <__aeabi_dadd+0x524>
   32e26:	0018      	movs	r0, r3
   32e28:	4310      	orrs	r0, r2
   32e2a:	d100      	bne.n	32e2e <__aeabi_dadd+0x3ee>
   32e2c:	e0e9      	b.n	33002 <__aeabi_dadd+0x5c2>
   32e2e:	001c      	movs	r4, r3
   32e30:	0017      	movs	r7, r2
   32e32:	46d8      	mov	r8, fp
   32e34:	4e88      	ldr	r6, [pc, #544]	; (33058 <__aeabi_dadd+0x618>)
   32e36:	e687      	b.n	32b48 <__aeabi_dadd+0x108>
   32e38:	2500      	movs	r5, #0
   32e3a:	e772      	b.n	32d22 <__aeabi_dadd+0x2e2>
   32e3c:	2100      	movs	r1, #0
   32e3e:	e782      	b.n	32d46 <__aeabi_dadd+0x306>
   32e40:	0023      	movs	r3, r4
   32e42:	433b      	orrs	r3, r7
   32e44:	2e00      	cmp	r6, #0
   32e46:	d000      	beq.n	32e4a <__aeabi_dadd+0x40a>
   32e48:	e0ab      	b.n	32fa2 <__aeabi_dadd+0x562>
   32e4a:	2b00      	cmp	r3, #0
   32e4c:	d100      	bne.n	32e50 <__aeabi_dadd+0x410>
   32e4e:	e0e7      	b.n	33020 <__aeabi_dadd+0x5e0>
   32e50:	000b      	movs	r3, r1
   32e52:	4313      	orrs	r3, r2
   32e54:	d100      	bne.n	32e58 <__aeabi_dadd+0x418>
   32e56:	e677      	b.n	32b48 <__aeabi_dadd+0x108>
   32e58:	18ba      	adds	r2, r7, r2
   32e5a:	42ba      	cmp	r2, r7
   32e5c:	41bf      	sbcs	r7, r7
   32e5e:	1864      	adds	r4, r4, r1
   32e60:	427f      	negs	r7, r7
   32e62:	19e4      	adds	r4, r4, r7
   32e64:	0223      	lsls	r3, r4, #8
   32e66:	d400      	bmi.n	32e6a <__aeabi_dadd+0x42a>
   32e68:	e0f2      	b.n	33050 <__aeabi_dadd+0x610>
   32e6a:	4b7c      	ldr	r3, [pc, #496]	; (3305c <__aeabi_dadd+0x61c>)
   32e6c:	0017      	movs	r7, r2
   32e6e:	401c      	ands	r4, r3
   32e70:	0006      	movs	r6, r0
   32e72:	e669      	b.n	32b48 <__aeabi_dadd+0x108>
   32e74:	0020      	movs	r0, r4
   32e76:	4338      	orrs	r0, r7
   32e78:	2e00      	cmp	r6, #0
   32e7a:	d1d1      	bne.n	32e20 <__aeabi_dadd+0x3e0>
   32e7c:	2800      	cmp	r0, #0
   32e7e:	d15b      	bne.n	32f38 <__aeabi_dadd+0x4f8>
   32e80:	001c      	movs	r4, r3
   32e82:	4314      	orrs	r4, r2
   32e84:	d100      	bne.n	32e88 <__aeabi_dadd+0x448>
   32e86:	e0a8      	b.n	32fda <__aeabi_dadd+0x59a>
   32e88:	001c      	movs	r4, r3
   32e8a:	0017      	movs	r7, r2
   32e8c:	46d8      	mov	r8, fp
   32e8e:	e65b      	b.n	32b48 <__aeabi_dadd+0x108>
   32e90:	0006      	movs	r6, r0
   32e92:	2400      	movs	r4, #0
   32e94:	2700      	movs	r7, #0
   32e96:	e697      	b.n	32bc8 <__aeabi_dadd+0x188>
   32e98:	4650      	mov	r0, sl
   32e9a:	000b      	movs	r3, r1
   32e9c:	3820      	subs	r0, #32
   32e9e:	40c3      	lsrs	r3, r0
   32ea0:	4699      	mov	r9, r3
   32ea2:	4653      	mov	r3, sl
   32ea4:	2b20      	cmp	r3, #32
   32ea6:	d100      	bne.n	32eaa <__aeabi_dadd+0x46a>
   32ea8:	e095      	b.n	32fd6 <__aeabi_dadd+0x596>
   32eaa:	2340      	movs	r3, #64	; 0x40
   32eac:	4650      	mov	r0, sl
   32eae:	1a1b      	subs	r3, r3, r0
   32eb0:	4099      	lsls	r1, r3
   32eb2:	430a      	orrs	r2, r1
   32eb4:	1e51      	subs	r1, r2, #1
   32eb6:	418a      	sbcs	r2, r1
   32eb8:	464b      	mov	r3, r9
   32eba:	2100      	movs	r1, #0
   32ebc:	431a      	orrs	r2, r3
   32ebe:	e69f      	b.n	32c00 <__aeabi_dadd+0x1c0>
   32ec0:	2e00      	cmp	r6, #0
   32ec2:	d130      	bne.n	32f26 <__aeabi_dadd+0x4e6>
   32ec4:	0026      	movs	r6, r4
   32ec6:	433e      	orrs	r6, r7
   32ec8:	d067      	beq.n	32f9a <__aeabi_dadd+0x55a>
   32eca:	43db      	mvns	r3, r3
   32ecc:	469a      	mov	sl, r3
   32ece:	2b00      	cmp	r3, #0
   32ed0:	d01c      	beq.n	32f0c <__aeabi_dadd+0x4cc>
   32ed2:	4e61      	ldr	r6, [pc, #388]	; (33058 <__aeabi_dadd+0x618>)
   32ed4:	42b0      	cmp	r0, r6
   32ed6:	d060      	beq.n	32f9a <__aeabi_dadd+0x55a>
   32ed8:	4653      	mov	r3, sl
   32eda:	2b38      	cmp	r3, #56	; 0x38
   32edc:	dd00      	ble.n	32ee0 <__aeabi_dadd+0x4a0>
   32ede:	e096      	b.n	3300e <__aeabi_dadd+0x5ce>
   32ee0:	2b1f      	cmp	r3, #31
   32ee2:	dd00      	ble.n	32ee6 <__aeabi_dadd+0x4a6>
   32ee4:	e09f      	b.n	33026 <__aeabi_dadd+0x5e6>
   32ee6:	2620      	movs	r6, #32
   32ee8:	1af3      	subs	r3, r6, r3
   32eea:	0026      	movs	r6, r4
   32eec:	409e      	lsls	r6, r3
   32eee:	469c      	mov	ip, r3
   32ef0:	46b3      	mov	fp, r6
   32ef2:	4653      	mov	r3, sl
   32ef4:	003e      	movs	r6, r7
   32ef6:	40de      	lsrs	r6, r3
   32ef8:	0033      	movs	r3, r6
   32efa:	465e      	mov	r6, fp
   32efc:	431e      	orrs	r6, r3
   32efe:	4663      	mov	r3, ip
   32f00:	409f      	lsls	r7, r3
   32f02:	1e7b      	subs	r3, r7, #1
   32f04:	419f      	sbcs	r7, r3
   32f06:	4653      	mov	r3, sl
   32f08:	40dc      	lsrs	r4, r3
   32f0a:	4337      	orrs	r7, r6
   32f0c:	18bf      	adds	r7, r7, r2
   32f0e:	4297      	cmp	r7, r2
   32f10:	4192      	sbcs	r2, r2
   32f12:	1864      	adds	r4, r4, r1
   32f14:	4252      	negs	r2, r2
   32f16:	18a4      	adds	r4, r4, r2
   32f18:	0006      	movs	r6, r0
   32f1a:	e678      	b.n	32c0e <__aeabi_dadd+0x1ce>
   32f1c:	4327      	orrs	r7, r4
   32f1e:	1e7c      	subs	r4, r7, #1
   32f20:	41a7      	sbcs	r7, r4
   32f22:	2400      	movs	r4, #0
   32f24:	e737      	b.n	32d96 <__aeabi_dadd+0x356>
   32f26:	4e4c      	ldr	r6, [pc, #304]	; (33058 <__aeabi_dadd+0x618>)
   32f28:	42b0      	cmp	r0, r6
   32f2a:	d036      	beq.n	32f9a <__aeabi_dadd+0x55a>
   32f2c:	2680      	movs	r6, #128	; 0x80
   32f2e:	425b      	negs	r3, r3
   32f30:	0436      	lsls	r6, r6, #16
   32f32:	469a      	mov	sl, r3
   32f34:	4334      	orrs	r4, r6
   32f36:	e7cf      	b.n	32ed8 <__aeabi_dadd+0x498>
   32f38:	0018      	movs	r0, r3
   32f3a:	4310      	orrs	r0, r2
   32f3c:	d100      	bne.n	32f40 <__aeabi_dadd+0x500>
   32f3e:	e603      	b.n	32b48 <__aeabi_dadd+0x108>
   32f40:	1ab8      	subs	r0, r7, r2
   32f42:	4684      	mov	ip, r0
   32f44:	4567      	cmp	r7, ip
   32f46:	41ad      	sbcs	r5, r5
   32f48:	1ae0      	subs	r0, r4, r3
   32f4a:	426d      	negs	r5, r5
   32f4c:	1b40      	subs	r0, r0, r5
   32f4e:	0205      	lsls	r5, r0, #8
   32f50:	d400      	bmi.n	32f54 <__aeabi_dadd+0x514>
   32f52:	e62c      	b.n	32bae <__aeabi_dadd+0x16e>
   32f54:	1bd7      	subs	r7, r2, r7
   32f56:	42ba      	cmp	r2, r7
   32f58:	4192      	sbcs	r2, r2
   32f5a:	1b1c      	subs	r4, r3, r4
   32f5c:	4252      	negs	r2, r2
   32f5e:	1aa4      	subs	r4, r4, r2
   32f60:	46d8      	mov	r8, fp
   32f62:	e5f1      	b.n	32b48 <__aeabi_dadd+0x108>
   32f64:	0018      	movs	r0, r3
   32f66:	4310      	orrs	r0, r2
   32f68:	d100      	bne.n	32f6c <__aeabi_dadd+0x52c>
   32f6a:	e763      	b.n	32e34 <__aeabi_dadd+0x3f4>
   32f6c:	08f8      	lsrs	r0, r7, #3
   32f6e:	0767      	lsls	r7, r4, #29
   32f70:	4307      	orrs	r7, r0
   32f72:	2080      	movs	r0, #128	; 0x80
   32f74:	08e4      	lsrs	r4, r4, #3
   32f76:	0300      	lsls	r0, r0, #12
   32f78:	4204      	tst	r4, r0
   32f7a:	d008      	beq.n	32f8e <__aeabi_dadd+0x54e>
   32f7c:	08dd      	lsrs	r5, r3, #3
   32f7e:	4205      	tst	r5, r0
   32f80:	d105      	bne.n	32f8e <__aeabi_dadd+0x54e>
   32f82:	08d2      	lsrs	r2, r2, #3
   32f84:	0759      	lsls	r1, r3, #29
   32f86:	4311      	orrs	r1, r2
   32f88:	000f      	movs	r7, r1
   32f8a:	002c      	movs	r4, r5
   32f8c:	46d8      	mov	r8, fp
   32f8e:	0f7b      	lsrs	r3, r7, #29
   32f90:	00e4      	lsls	r4, r4, #3
   32f92:	431c      	orrs	r4, r3
   32f94:	00ff      	lsls	r7, r7, #3
   32f96:	4e30      	ldr	r6, [pc, #192]	; (33058 <__aeabi_dadd+0x618>)
   32f98:	e5d6      	b.n	32b48 <__aeabi_dadd+0x108>
   32f9a:	000c      	movs	r4, r1
   32f9c:	0017      	movs	r7, r2
   32f9e:	0006      	movs	r6, r0
   32fa0:	e5d2      	b.n	32b48 <__aeabi_dadd+0x108>
   32fa2:	2b00      	cmp	r3, #0
   32fa4:	d038      	beq.n	33018 <__aeabi_dadd+0x5d8>
   32fa6:	000b      	movs	r3, r1
   32fa8:	4313      	orrs	r3, r2
   32faa:	d100      	bne.n	32fae <__aeabi_dadd+0x56e>
   32fac:	e742      	b.n	32e34 <__aeabi_dadd+0x3f4>
   32fae:	08f8      	lsrs	r0, r7, #3
   32fb0:	0767      	lsls	r7, r4, #29
   32fb2:	4307      	orrs	r7, r0
   32fb4:	2080      	movs	r0, #128	; 0x80
   32fb6:	08e4      	lsrs	r4, r4, #3
   32fb8:	0300      	lsls	r0, r0, #12
   32fba:	4204      	tst	r4, r0
   32fbc:	d0e7      	beq.n	32f8e <__aeabi_dadd+0x54e>
   32fbe:	08cb      	lsrs	r3, r1, #3
   32fc0:	4203      	tst	r3, r0
   32fc2:	d1e4      	bne.n	32f8e <__aeabi_dadd+0x54e>
   32fc4:	08d2      	lsrs	r2, r2, #3
   32fc6:	0749      	lsls	r1, r1, #29
   32fc8:	4311      	orrs	r1, r2
   32fca:	000f      	movs	r7, r1
   32fcc:	001c      	movs	r4, r3
   32fce:	e7de      	b.n	32f8e <__aeabi_dadd+0x54e>
   32fd0:	2700      	movs	r7, #0
   32fd2:	2400      	movs	r4, #0
   32fd4:	e5d5      	b.n	32b82 <__aeabi_dadd+0x142>
   32fd6:	2100      	movs	r1, #0
   32fd8:	e76b      	b.n	32eb2 <__aeabi_dadd+0x472>
   32fda:	2500      	movs	r5, #0
   32fdc:	2700      	movs	r7, #0
   32fde:	e5f3      	b.n	32bc8 <__aeabi_dadd+0x188>
   32fe0:	464e      	mov	r6, r9
   32fe2:	0025      	movs	r5, r4
   32fe4:	3e20      	subs	r6, #32
   32fe6:	40f5      	lsrs	r5, r6
   32fe8:	464b      	mov	r3, r9
   32fea:	002e      	movs	r6, r5
   32fec:	2b20      	cmp	r3, #32
   32fee:	d02d      	beq.n	3304c <__aeabi_dadd+0x60c>
   32ff0:	2540      	movs	r5, #64	; 0x40
   32ff2:	1aed      	subs	r5, r5, r3
   32ff4:	40ac      	lsls	r4, r5
   32ff6:	4327      	orrs	r7, r4
   32ff8:	1e7c      	subs	r4, r7, #1
   32ffa:	41a7      	sbcs	r7, r4
   32ffc:	2400      	movs	r4, #0
   32ffe:	4337      	orrs	r7, r6
   33000:	e6c9      	b.n	32d96 <__aeabi_dadd+0x356>
   33002:	2480      	movs	r4, #128	; 0x80
   33004:	2500      	movs	r5, #0
   33006:	0324      	lsls	r4, r4, #12
   33008:	4e13      	ldr	r6, [pc, #76]	; (33058 <__aeabi_dadd+0x618>)
   3300a:	2700      	movs	r7, #0
   3300c:	e5dc      	b.n	32bc8 <__aeabi_dadd+0x188>
   3300e:	4327      	orrs	r7, r4
   33010:	1e7c      	subs	r4, r7, #1
   33012:	41a7      	sbcs	r7, r4
   33014:	2400      	movs	r4, #0
   33016:	e779      	b.n	32f0c <__aeabi_dadd+0x4cc>
   33018:	000c      	movs	r4, r1
   3301a:	0017      	movs	r7, r2
   3301c:	4e0e      	ldr	r6, [pc, #56]	; (33058 <__aeabi_dadd+0x618>)
   3301e:	e593      	b.n	32b48 <__aeabi_dadd+0x108>
   33020:	000c      	movs	r4, r1
   33022:	0017      	movs	r7, r2
   33024:	e590      	b.n	32b48 <__aeabi_dadd+0x108>
   33026:	4656      	mov	r6, sl
   33028:	0023      	movs	r3, r4
   3302a:	3e20      	subs	r6, #32
   3302c:	40f3      	lsrs	r3, r6
   3302e:	4699      	mov	r9, r3
   33030:	4653      	mov	r3, sl
   33032:	2b20      	cmp	r3, #32
   33034:	d00e      	beq.n	33054 <__aeabi_dadd+0x614>
   33036:	2340      	movs	r3, #64	; 0x40
   33038:	4656      	mov	r6, sl
   3303a:	1b9b      	subs	r3, r3, r6
   3303c:	409c      	lsls	r4, r3
   3303e:	4327      	orrs	r7, r4
   33040:	1e7c      	subs	r4, r7, #1
   33042:	41a7      	sbcs	r7, r4
   33044:	464b      	mov	r3, r9
   33046:	2400      	movs	r4, #0
   33048:	431f      	orrs	r7, r3
   3304a:	e75f      	b.n	32f0c <__aeabi_dadd+0x4cc>
   3304c:	2400      	movs	r4, #0
   3304e:	e7d2      	b.n	32ff6 <__aeabi_dadd+0x5b6>
   33050:	0017      	movs	r7, r2
   33052:	e5b2      	b.n	32bba <__aeabi_dadd+0x17a>
   33054:	2400      	movs	r4, #0
   33056:	e7f2      	b.n	3303e <__aeabi_dadd+0x5fe>
   33058:	000007ff 	.word	0x000007ff
   3305c:	ff7fffff 	.word	0xff7fffff

00033060 <__aeabi_ddiv>:
   33060:	b5f0      	push	{r4, r5, r6, r7, lr}
   33062:	4657      	mov	r7, sl
   33064:	4645      	mov	r5, r8
   33066:	46de      	mov	lr, fp
   33068:	464e      	mov	r6, r9
   3306a:	b5e0      	push	{r5, r6, r7, lr}
   3306c:	004c      	lsls	r4, r1, #1
   3306e:	030e      	lsls	r6, r1, #12
   33070:	b087      	sub	sp, #28
   33072:	4683      	mov	fp, r0
   33074:	4692      	mov	sl, r2
   33076:	001d      	movs	r5, r3
   33078:	4680      	mov	r8, r0
   3307a:	0b36      	lsrs	r6, r6, #12
   3307c:	0d64      	lsrs	r4, r4, #21
   3307e:	0fcf      	lsrs	r7, r1, #31
   33080:	2c00      	cmp	r4, #0
   33082:	d04f      	beq.n	33124 <__aeabi_ddiv+0xc4>
   33084:	4b6f      	ldr	r3, [pc, #444]	; (33244 <__aeabi_ddiv+0x1e4>)
   33086:	429c      	cmp	r4, r3
   33088:	d035      	beq.n	330f6 <__aeabi_ddiv+0x96>
   3308a:	2380      	movs	r3, #128	; 0x80
   3308c:	0f42      	lsrs	r2, r0, #29
   3308e:	041b      	lsls	r3, r3, #16
   33090:	00f6      	lsls	r6, r6, #3
   33092:	4313      	orrs	r3, r2
   33094:	4333      	orrs	r3, r6
   33096:	4699      	mov	r9, r3
   33098:	00c3      	lsls	r3, r0, #3
   3309a:	4698      	mov	r8, r3
   3309c:	4b6a      	ldr	r3, [pc, #424]	; (33248 <__aeabi_ddiv+0x1e8>)
   3309e:	2600      	movs	r6, #0
   330a0:	469c      	mov	ip, r3
   330a2:	2300      	movs	r3, #0
   330a4:	4464      	add	r4, ip
   330a6:	9303      	str	r3, [sp, #12]
   330a8:	032b      	lsls	r3, r5, #12
   330aa:	0b1b      	lsrs	r3, r3, #12
   330ac:	469b      	mov	fp, r3
   330ae:	006b      	lsls	r3, r5, #1
   330b0:	0fed      	lsrs	r5, r5, #31
   330b2:	4650      	mov	r0, sl
   330b4:	0d5b      	lsrs	r3, r3, #21
   330b6:	9501      	str	r5, [sp, #4]
   330b8:	d05e      	beq.n	33178 <__aeabi_ddiv+0x118>
   330ba:	4a62      	ldr	r2, [pc, #392]	; (33244 <__aeabi_ddiv+0x1e4>)
   330bc:	4293      	cmp	r3, r2
   330be:	d053      	beq.n	33168 <__aeabi_ddiv+0x108>
   330c0:	465a      	mov	r2, fp
   330c2:	00d1      	lsls	r1, r2, #3
   330c4:	2280      	movs	r2, #128	; 0x80
   330c6:	0f40      	lsrs	r0, r0, #29
   330c8:	0412      	lsls	r2, r2, #16
   330ca:	4302      	orrs	r2, r0
   330cc:	430a      	orrs	r2, r1
   330ce:	4693      	mov	fp, r2
   330d0:	4652      	mov	r2, sl
   330d2:	00d1      	lsls	r1, r2, #3
   330d4:	4a5c      	ldr	r2, [pc, #368]	; (33248 <__aeabi_ddiv+0x1e8>)
   330d6:	4694      	mov	ip, r2
   330d8:	2200      	movs	r2, #0
   330da:	4463      	add	r3, ip
   330dc:	0038      	movs	r0, r7
   330de:	4068      	eors	r0, r5
   330e0:	4684      	mov	ip, r0
   330e2:	9002      	str	r0, [sp, #8]
   330e4:	1ae4      	subs	r4, r4, r3
   330e6:	4316      	orrs	r6, r2
   330e8:	2e0f      	cmp	r6, #15
   330ea:	d900      	bls.n	330ee <__aeabi_ddiv+0x8e>
   330ec:	e0b4      	b.n	33258 <__aeabi_ddiv+0x1f8>
   330ee:	4b57      	ldr	r3, [pc, #348]	; (3324c <__aeabi_ddiv+0x1ec>)
   330f0:	00b6      	lsls	r6, r6, #2
   330f2:	599b      	ldr	r3, [r3, r6]
   330f4:	469f      	mov	pc, r3
   330f6:	0003      	movs	r3, r0
   330f8:	4333      	orrs	r3, r6
   330fa:	4699      	mov	r9, r3
   330fc:	d16c      	bne.n	331d8 <__aeabi_ddiv+0x178>
   330fe:	2300      	movs	r3, #0
   33100:	4698      	mov	r8, r3
   33102:	3302      	adds	r3, #2
   33104:	2608      	movs	r6, #8
   33106:	9303      	str	r3, [sp, #12]
   33108:	e7ce      	b.n	330a8 <__aeabi_ddiv+0x48>
   3310a:	46cb      	mov	fp, r9
   3310c:	4641      	mov	r1, r8
   3310e:	9a03      	ldr	r2, [sp, #12]
   33110:	9701      	str	r7, [sp, #4]
   33112:	2a02      	cmp	r2, #2
   33114:	d165      	bne.n	331e2 <__aeabi_ddiv+0x182>
   33116:	9b01      	ldr	r3, [sp, #4]
   33118:	4c4a      	ldr	r4, [pc, #296]	; (33244 <__aeabi_ddiv+0x1e4>)
   3311a:	469c      	mov	ip, r3
   3311c:	2300      	movs	r3, #0
   3311e:	2200      	movs	r2, #0
   33120:	4698      	mov	r8, r3
   33122:	e06b      	b.n	331fc <__aeabi_ddiv+0x19c>
   33124:	0003      	movs	r3, r0
   33126:	4333      	orrs	r3, r6
   33128:	4699      	mov	r9, r3
   3312a:	d04e      	beq.n	331ca <__aeabi_ddiv+0x16a>
   3312c:	2e00      	cmp	r6, #0
   3312e:	d100      	bne.n	33132 <__aeabi_ddiv+0xd2>
   33130:	e1bc      	b.n	334ac <__aeabi_ddiv+0x44c>
   33132:	0030      	movs	r0, r6
   33134:	f001 f904 	bl	34340 <__clzsi2>
   33138:	0003      	movs	r3, r0
   3313a:	3b0b      	subs	r3, #11
   3313c:	2b1c      	cmp	r3, #28
   3313e:	dd00      	ble.n	33142 <__aeabi_ddiv+0xe2>
   33140:	e1ac      	b.n	3349c <__aeabi_ddiv+0x43c>
   33142:	221d      	movs	r2, #29
   33144:	1ad3      	subs	r3, r2, r3
   33146:	465a      	mov	r2, fp
   33148:	0001      	movs	r1, r0
   3314a:	40da      	lsrs	r2, r3
   3314c:	3908      	subs	r1, #8
   3314e:	408e      	lsls	r6, r1
   33150:	0013      	movs	r3, r2
   33152:	4333      	orrs	r3, r6
   33154:	4699      	mov	r9, r3
   33156:	465b      	mov	r3, fp
   33158:	408b      	lsls	r3, r1
   3315a:	4698      	mov	r8, r3
   3315c:	2300      	movs	r3, #0
   3315e:	4c3c      	ldr	r4, [pc, #240]	; (33250 <__aeabi_ddiv+0x1f0>)
   33160:	2600      	movs	r6, #0
   33162:	1a24      	subs	r4, r4, r0
   33164:	9303      	str	r3, [sp, #12]
   33166:	e79f      	b.n	330a8 <__aeabi_ddiv+0x48>
   33168:	4651      	mov	r1, sl
   3316a:	465a      	mov	r2, fp
   3316c:	4311      	orrs	r1, r2
   3316e:	d129      	bne.n	331c4 <__aeabi_ddiv+0x164>
   33170:	2200      	movs	r2, #0
   33172:	4693      	mov	fp, r2
   33174:	3202      	adds	r2, #2
   33176:	e7b1      	b.n	330dc <__aeabi_ddiv+0x7c>
   33178:	4659      	mov	r1, fp
   3317a:	4301      	orrs	r1, r0
   3317c:	d01e      	beq.n	331bc <__aeabi_ddiv+0x15c>
   3317e:	465b      	mov	r3, fp
   33180:	2b00      	cmp	r3, #0
   33182:	d100      	bne.n	33186 <__aeabi_ddiv+0x126>
   33184:	e19e      	b.n	334c4 <__aeabi_ddiv+0x464>
   33186:	4658      	mov	r0, fp
   33188:	f001 f8da 	bl	34340 <__clzsi2>
   3318c:	0003      	movs	r3, r0
   3318e:	3b0b      	subs	r3, #11
   33190:	2b1c      	cmp	r3, #28
   33192:	dd00      	ble.n	33196 <__aeabi_ddiv+0x136>
   33194:	e18f      	b.n	334b6 <__aeabi_ddiv+0x456>
   33196:	0002      	movs	r2, r0
   33198:	4659      	mov	r1, fp
   3319a:	3a08      	subs	r2, #8
   3319c:	4091      	lsls	r1, r2
   3319e:	468b      	mov	fp, r1
   331a0:	211d      	movs	r1, #29
   331a2:	1acb      	subs	r3, r1, r3
   331a4:	4651      	mov	r1, sl
   331a6:	40d9      	lsrs	r1, r3
   331a8:	000b      	movs	r3, r1
   331aa:	4659      	mov	r1, fp
   331ac:	430b      	orrs	r3, r1
   331ae:	4651      	mov	r1, sl
   331b0:	469b      	mov	fp, r3
   331b2:	4091      	lsls	r1, r2
   331b4:	4b26      	ldr	r3, [pc, #152]	; (33250 <__aeabi_ddiv+0x1f0>)
   331b6:	2200      	movs	r2, #0
   331b8:	1a1b      	subs	r3, r3, r0
   331ba:	e78f      	b.n	330dc <__aeabi_ddiv+0x7c>
   331bc:	2300      	movs	r3, #0
   331be:	2201      	movs	r2, #1
   331c0:	469b      	mov	fp, r3
   331c2:	e78b      	b.n	330dc <__aeabi_ddiv+0x7c>
   331c4:	4651      	mov	r1, sl
   331c6:	2203      	movs	r2, #3
   331c8:	e788      	b.n	330dc <__aeabi_ddiv+0x7c>
   331ca:	2300      	movs	r3, #0
   331cc:	4698      	mov	r8, r3
   331ce:	3301      	adds	r3, #1
   331d0:	2604      	movs	r6, #4
   331d2:	2400      	movs	r4, #0
   331d4:	9303      	str	r3, [sp, #12]
   331d6:	e767      	b.n	330a8 <__aeabi_ddiv+0x48>
   331d8:	2303      	movs	r3, #3
   331da:	46b1      	mov	r9, r6
   331dc:	9303      	str	r3, [sp, #12]
   331de:	260c      	movs	r6, #12
   331e0:	e762      	b.n	330a8 <__aeabi_ddiv+0x48>
   331e2:	2a03      	cmp	r2, #3
   331e4:	d100      	bne.n	331e8 <__aeabi_ddiv+0x188>
   331e6:	e25c      	b.n	336a2 <__aeabi_ddiv+0x642>
   331e8:	9b01      	ldr	r3, [sp, #4]
   331ea:	2a01      	cmp	r2, #1
   331ec:	d000      	beq.n	331f0 <__aeabi_ddiv+0x190>
   331ee:	e1e4      	b.n	335ba <__aeabi_ddiv+0x55a>
   331f0:	4013      	ands	r3, r2
   331f2:	469c      	mov	ip, r3
   331f4:	2300      	movs	r3, #0
   331f6:	2400      	movs	r4, #0
   331f8:	2200      	movs	r2, #0
   331fa:	4698      	mov	r8, r3
   331fc:	2100      	movs	r1, #0
   331fe:	0312      	lsls	r2, r2, #12
   33200:	0b13      	lsrs	r3, r2, #12
   33202:	0d0a      	lsrs	r2, r1, #20
   33204:	0512      	lsls	r2, r2, #20
   33206:	431a      	orrs	r2, r3
   33208:	0523      	lsls	r3, r4, #20
   3320a:	4c12      	ldr	r4, [pc, #72]	; (33254 <__aeabi_ddiv+0x1f4>)
   3320c:	4640      	mov	r0, r8
   3320e:	4022      	ands	r2, r4
   33210:	4313      	orrs	r3, r2
   33212:	4662      	mov	r2, ip
   33214:	005b      	lsls	r3, r3, #1
   33216:	07d2      	lsls	r2, r2, #31
   33218:	085b      	lsrs	r3, r3, #1
   3321a:	4313      	orrs	r3, r2
   3321c:	0019      	movs	r1, r3
   3321e:	b007      	add	sp, #28
   33220:	bc3c      	pop	{r2, r3, r4, r5}
   33222:	4690      	mov	r8, r2
   33224:	4699      	mov	r9, r3
   33226:	46a2      	mov	sl, r4
   33228:	46ab      	mov	fp, r5
   3322a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3322c:	2300      	movs	r3, #0
   3322e:	2280      	movs	r2, #128	; 0x80
   33230:	469c      	mov	ip, r3
   33232:	0312      	lsls	r2, r2, #12
   33234:	4698      	mov	r8, r3
   33236:	4c03      	ldr	r4, [pc, #12]	; (33244 <__aeabi_ddiv+0x1e4>)
   33238:	e7e0      	b.n	331fc <__aeabi_ddiv+0x19c>
   3323a:	2300      	movs	r3, #0
   3323c:	4c01      	ldr	r4, [pc, #4]	; (33244 <__aeabi_ddiv+0x1e4>)
   3323e:	2200      	movs	r2, #0
   33240:	4698      	mov	r8, r3
   33242:	e7db      	b.n	331fc <__aeabi_ddiv+0x19c>
   33244:	000007ff 	.word	0x000007ff
   33248:	fffffc01 	.word	0xfffffc01
   3324c:	00039aac 	.word	0x00039aac
   33250:	fffffc0d 	.word	0xfffffc0d
   33254:	800fffff 	.word	0x800fffff
   33258:	45d9      	cmp	r9, fp
   3325a:	d900      	bls.n	3325e <__aeabi_ddiv+0x1fe>
   3325c:	e139      	b.n	334d2 <__aeabi_ddiv+0x472>
   3325e:	d100      	bne.n	33262 <__aeabi_ddiv+0x202>
   33260:	e134      	b.n	334cc <__aeabi_ddiv+0x46c>
   33262:	2300      	movs	r3, #0
   33264:	4646      	mov	r6, r8
   33266:	464d      	mov	r5, r9
   33268:	469a      	mov	sl, r3
   3326a:	3c01      	subs	r4, #1
   3326c:	465b      	mov	r3, fp
   3326e:	0e0a      	lsrs	r2, r1, #24
   33270:	021b      	lsls	r3, r3, #8
   33272:	431a      	orrs	r2, r3
   33274:	020b      	lsls	r3, r1, #8
   33276:	0c17      	lsrs	r7, r2, #16
   33278:	9303      	str	r3, [sp, #12]
   3327a:	0413      	lsls	r3, r2, #16
   3327c:	0c1b      	lsrs	r3, r3, #16
   3327e:	0039      	movs	r1, r7
   33280:	0028      	movs	r0, r5
   33282:	4690      	mov	r8, r2
   33284:	9301      	str	r3, [sp, #4]
   33286:	f7fe fc1d 	bl	31ac4 <__udivsi3>
   3328a:	0002      	movs	r2, r0
   3328c:	9b01      	ldr	r3, [sp, #4]
   3328e:	4683      	mov	fp, r0
   33290:	435a      	muls	r2, r3
   33292:	0028      	movs	r0, r5
   33294:	0039      	movs	r1, r7
   33296:	4691      	mov	r9, r2
   33298:	f7fe fc9a 	bl	31bd0 <__aeabi_uidivmod>
   3329c:	0c35      	lsrs	r5, r6, #16
   3329e:	0409      	lsls	r1, r1, #16
   332a0:	430d      	orrs	r5, r1
   332a2:	45a9      	cmp	r9, r5
   332a4:	d90d      	bls.n	332c2 <__aeabi_ddiv+0x262>
   332a6:	465b      	mov	r3, fp
   332a8:	4445      	add	r5, r8
   332aa:	3b01      	subs	r3, #1
   332ac:	45a8      	cmp	r8, r5
   332ae:	d900      	bls.n	332b2 <__aeabi_ddiv+0x252>
   332b0:	e13a      	b.n	33528 <__aeabi_ddiv+0x4c8>
   332b2:	45a9      	cmp	r9, r5
   332b4:	d800      	bhi.n	332b8 <__aeabi_ddiv+0x258>
   332b6:	e137      	b.n	33528 <__aeabi_ddiv+0x4c8>
   332b8:	2302      	movs	r3, #2
   332ba:	425b      	negs	r3, r3
   332bc:	469c      	mov	ip, r3
   332be:	4445      	add	r5, r8
   332c0:	44e3      	add	fp, ip
   332c2:	464b      	mov	r3, r9
   332c4:	1aeb      	subs	r3, r5, r3
   332c6:	0039      	movs	r1, r7
   332c8:	0018      	movs	r0, r3
   332ca:	9304      	str	r3, [sp, #16]
   332cc:	f7fe fbfa 	bl	31ac4 <__udivsi3>
   332d0:	9b01      	ldr	r3, [sp, #4]
   332d2:	0005      	movs	r5, r0
   332d4:	4343      	muls	r3, r0
   332d6:	0039      	movs	r1, r7
   332d8:	9804      	ldr	r0, [sp, #16]
   332da:	4699      	mov	r9, r3
   332dc:	f7fe fc78 	bl	31bd0 <__aeabi_uidivmod>
   332e0:	0433      	lsls	r3, r6, #16
   332e2:	0409      	lsls	r1, r1, #16
   332e4:	0c1b      	lsrs	r3, r3, #16
   332e6:	430b      	orrs	r3, r1
   332e8:	4599      	cmp	r9, r3
   332ea:	d909      	bls.n	33300 <__aeabi_ddiv+0x2a0>
   332ec:	4443      	add	r3, r8
   332ee:	1e6a      	subs	r2, r5, #1
   332f0:	4598      	cmp	r8, r3
   332f2:	d900      	bls.n	332f6 <__aeabi_ddiv+0x296>
   332f4:	e11a      	b.n	3352c <__aeabi_ddiv+0x4cc>
   332f6:	4599      	cmp	r9, r3
   332f8:	d800      	bhi.n	332fc <__aeabi_ddiv+0x29c>
   332fa:	e117      	b.n	3352c <__aeabi_ddiv+0x4cc>
   332fc:	3d02      	subs	r5, #2
   332fe:	4443      	add	r3, r8
   33300:	464a      	mov	r2, r9
   33302:	1a9b      	subs	r3, r3, r2
   33304:	465a      	mov	r2, fp
   33306:	0412      	lsls	r2, r2, #16
   33308:	432a      	orrs	r2, r5
   3330a:	9903      	ldr	r1, [sp, #12]
   3330c:	4693      	mov	fp, r2
   3330e:	0c10      	lsrs	r0, r2, #16
   33310:	0c0a      	lsrs	r2, r1, #16
   33312:	4691      	mov	r9, r2
   33314:	0409      	lsls	r1, r1, #16
   33316:	465a      	mov	r2, fp
   33318:	0c09      	lsrs	r1, r1, #16
   3331a:	464e      	mov	r6, r9
   3331c:	000d      	movs	r5, r1
   3331e:	0412      	lsls	r2, r2, #16
   33320:	0c12      	lsrs	r2, r2, #16
   33322:	4345      	muls	r5, r0
   33324:	9105      	str	r1, [sp, #20]
   33326:	4351      	muls	r1, r2
   33328:	4372      	muls	r2, r6
   3332a:	4370      	muls	r0, r6
   3332c:	1952      	adds	r2, r2, r5
   3332e:	0c0e      	lsrs	r6, r1, #16
   33330:	18b2      	adds	r2, r6, r2
   33332:	4295      	cmp	r5, r2
   33334:	d903      	bls.n	3333e <__aeabi_ddiv+0x2de>
   33336:	2580      	movs	r5, #128	; 0x80
   33338:	026d      	lsls	r5, r5, #9
   3333a:	46ac      	mov	ip, r5
   3333c:	4460      	add	r0, ip
   3333e:	0c15      	lsrs	r5, r2, #16
   33340:	0409      	lsls	r1, r1, #16
   33342:	0412      	lsls	r2, r2, #16
   33344:	0c09      	lsrs	r1, r1, #16
   33346:	1828      	adds	r0, r5, r0
   33348:	1852      	adds	r2, r2, r1
   3334a:	4283      	cmp	r3, r0
   3334c:	d200      	bcs.n	33350 <__aeabi_ddiv+0x2f0>
   3334e:	e0ce      	b.n	334ee <__aeabi_ddiv+0x48e>
   33350:	d100      	bne.n	33354 <__aeabi_ddiv+0x2f4>
   33352:	e0c8      	b.n	334e6 <__aeabi_ddiv+0x486>
   33354:	1a1d      	subs	r5, r3, r0
   33356:	4653      	mov	r3, sl
   33358:	1a9e      	subs	r6, r3, r2
   3335a:	45b2      	cmp	sl, r6
   3335c:	4192      	sbcs	r2, r2
   3335e:	4252      	negs	r2, r2
   33360:	1aab      	subs	r3, r5, r2
   33362:	469a      	mov	sl, r3
   33364:	4598      	cmp	r8, r3
   33366:	d100      	bne.n	3336a <__aeabi_ddiv+0x30a>
   33368:	e117      	b.n	3359a <__aeabi_ddiv+0x53a>
   3336a:	0039      	movs	r1, r7
   3336c:	0018      	movs	r0, r3
   3336e:	f7fe fba9 	bl	31ac4 <__udivsi3>
   33372:	9b01      	ldr	r3, [sp, #4]
   33374:	0005      	movs	r5, r0
   33376:	4343      	muls	r3, r0
   33378:	0039      	movs	r1, r7
   3337a:	4650      	mov	r0, sl
   3337c:	9304      	str	r3, [sp, #16]
   3337e:	f7fe fc27 	bl	31bd0 <__aeabi_uidivmod>
   33382:	9804      	ldr	r0, [sp, #16]
   33384:	040b      	lsls	r3, r1, #16
   33386:	0c31      	lsrs	r1, r6, #16
   33388:	4319      	orrs	r1, r3
   3338a:	4288      	cmp	r0, r1
   3338c:	d909      	bls.n	333a2 <__aeabi_ddiv+0x342>
   3338e:	4441      	add	r1, r8
   33390:	1e6b      	subs	r3, r5, #1
   33392:	4588      	cmp	r8, r1
   33394:	d900      	bls.n	33398 <__aeabi_ddiv+0x338>
   33396:	e107      	b.n	335a8 <__aeabi_ddiv+0x548>
   33398:	4288      	cmp	r0, r1
   3339a:	d800      	bhi.n	3339e <__aeabi_ddiv+0x33e>
   3339c:	e104      	b.n	335a8 <__aeabi_ddiv+0x548>
   3339e:	3d02      	subs	r5, #2
   333a0:	4441      	add	r1, r8
   333a2:	9b04      	ldr	r3, [sp, #16]
   333a4:	1acb      	subs	r3, r1, r3
   333a6:	0018      	movs	r0, r3
   333a8:	0039      	movs	r1, r7
   333aa:	9304      	str	r3, [sp, #16]
   333ac:	f7fe fb8a 	bl	31ac4 <__udivsi3>
   333b0:	9b01      	ldr	r3, [sp, #4]
   333b2:	4682      	mov	sl, r0
   333b4:	4343      	muls	r3, r0
   333b6:	0039      	movs	r1, r7
   333b8:	9804      	ldr	r0, [sp, #16]
   333ba:	9301      	str	r3, [sp, #4]
   333bc:	f7fe fc08 	bl	31bd0 <__aeabi_uidivmod>
   333c0:	9801      	ldr	r0, [sp, #4]
   333c2:	040b      	lsls	r3, r1, #16
   333c4:	0431      	lsls	r1, r6, #16
   333c6:	0c09      	lsrs	r1, r1, #16
   333c8:	4319      	orrs	r1, r3
   333ca:	4288      	cmp	r0, r1
   333cc:	d90d      	bls.n	333ea <__aeabi_ddiv+0x38a>
   333ce:	4653      	mov	r3, sl
   333d0:	4441      	add	r1, r8
   333d2:	3b01      	subs	r3, #1
   333d4:	4588      	cmp	r8, r1
   333d6:	d900      	bls.n	333da <__aeabi_ddiv+0x37a>
   333d8:	e0e8      	b.n	335ac <__aeabi_ddiv+0x54c>
   333da:	4288      	cmp	r0, r1
   333dc:	d800      	bhi.n	333e0 <__aeabi_ddiv+0x380>
   333de:	e0e5      	b.n	335ac <__aeabi_ddiv+0x54c>
   333e0:	2302      	movs	r3, #2
   333e2:	425b      	negs	r3, r3
   333e4:	469c      	mov	ip, r3
   333e6:	4441      	add	r1, r8
   333e8:	44e2      	add	sl, ip
   333ea:	9b01      	ldr	r3, [sp, #4]
   333ec:	042d      	lsls	r5, r5, #16
   333ee:	1ace      	subs	r6, r1, r3
   333f0:	4651      	mov	r1, sl
   333f2:	4329      	orrs	r1, r5
   333f4:	9d05      	ldr	r5, [sp, #20]
   333f6:	464f      	mov	r7, r9
   333f8:	002a      	movs	r2, r5
   333fa:	040b      	lsls	r3, r1, #16
   333fc:	0c08      	lsrs	r0, r1, #16
   333fe:	0c1b      	lsrs	r3, r3, #16
   33400:	435a      	muls	r2, r3
   33402:	4345      	muls	r5, r0
   33404:	437b      	muls	r3, r7
   33406:	4378      	muls	r0, r7
   33408:	195b      	adds	r3, r3, r5
   3340a:	0c17      	lsrs	r7, r2, #16
   3340c:	18fb      	adds	r3, r7, r3
   3340e:	429d      	cmp	r5, r3
   33410:	d903      	bls.n	3341a <__aeabi_ddiv+0x3ba>
   33412:	2580      	movs	r5, #128	; 0x80
   33414:	026d      	lsls	r5, r5, #9
   33416:	46ac      	mov	ip, r5
   33418:	4460      	add	r0, ip
   3341a:	0c1d      	lsrs	r5, r3, #16
   3341c:	0412      	lsls	r2, r2, #16
   3341e:	041b      	lsls	r3, r3, #16
   33420:	0c12      	lsrs	r2, r2, #16
   33422:	1828      	adds	r0, r5, r0
   33424:	189b      	adds	r3, r3, r2
   33426:	4286      	cmp	r6, r0
   33428:	d200      	bcs.n	3342c <__aeabi_ddiv+0x3cc>
   3342a:	e093      	b.n	33554 <__aeabi_ddiv+0x4f4>
   3342c:	d100      	bne.n	33430 <__aeabi_ddiv+0x3d0>
   3342e:	e08e      	b.n	3354e <__aeabi_ddiv+0x4ee>
   33430:	2301      	movs	r3, #1
   33432:	4319      	orrs	r1, r3
   33434:	4ba0      	ldr	r3, [pc, #640]	; (336b8 <__aeabi_ddiv+0x658>)
   33436:	18e3      	adds	r3, r4, r3
   33438:	2b00      	cmp	r3, #0
   3343a:	dc00      	bgt.n	3343e <__aeabi_ddiv+0x3de>
   3343c:	e099      	b.n	33572 <__aeabi_ddiv+0x512>
   3343e:	074a      	lsls	r2, r1, #29
   33440:	d000      	beq.n	33444 <__aeabi_ddiv+0x3e4>
   33442:	e09e      	b.n	33582 <__aeabi_ddiv+0x522>
   33444:	465a      	mov	r2, fp
   33446:	01d2      	lsls	r2, r2, #7
   33448:	d506      	bpl.n	33458 <__aeabi_ddiv+0x3f8>
   3344a:	465a      	mov	r2, fp
   3344c:	4b9b      	ldr	r3, [pc, #620]	; (336bc <__aeabi_ddiv+0x65c>)
   3344e:	401a      	ands	r2, r3
   33450:	2380      	movs	r3, #128	; 0x80
   33452:	4693      	mov	fp, r2
   33454:	00db      	lsls	r3, r3, #3
   33456:	18e3      	adds	r3, r4, r3
   33458:	4a99      	ldr	r2, [pc, #612]	; (336c0 <__aeabi_ddiv+0x660>)
   3345a:	4293      	cmp	r3, r2
   3345c:	dd68      	ble.n	33530 <__aeabi_ddiv+0x4d0>
   3345e:	2301      	movs	r3, #1
   33460:	9a02      	ldr	r2, [sp, #8]
   33462:	4c98      	ldr	r4, [pc, #608]	; (336c4 <__aeabi_ddiv+0x664>)
   33464:	401a      	ands	r2, r3
   33466:	2300      	movs	r3, #0
   33468:	4694      	mov	ip, r2
   3346a:	4698      	mov	r8, r3
   3346c:	2200      	movs	r2, #0
   3346e:	e6c5      	b.n	331fc <__aeabi_ddiv+0x19c>
   33470:	2280      	movs	r2, #128	; 0x80
   33472:	464b      	mov	r3, r9
   33474:	0312      	lsls	r2, r2, #12
   33476:	4213      	tst	r3, r2
   33478:	d00a      	beq.n	33490 <__aeabi_ddiv+0x430>
   3347a:	465b      	mov	r3, fp
   3347c:	4213      	tst	r3, r2
   3347e:	d106      	bne.n	3348e <__aeabi_ddiv+0x42e>
   33480:	431a      	orrs	r2, r3
   33482:	0312      	lsls	r2, r2, #12
   33484:	0b12      	lsrs	r2, r2, #12
   33486:	46ac      	mov	ip, r5
   33488:	4688      	mov	r8, r1
   3348a:	4c8e      	ldr	r4, [pc, #568]	; (336c4 <__aeabi_ddiv+0x664>)
   3348c:	e6b6      	b.n	331fc <__aeabi_ddiv+0x19c>
   3348e:	464b      	mov	r3, r9
   33490:	431a      	orrs	r2, r3
   33492:	0312      	lsls	r2, r2, #12
   33494:	0b12      	lsrs	r2, r2, #12
   33496:	46bc      	mov	ip, r7
   33498:	4c8a      	ldr	r4, [pc, #552]	; (336c4 <__aeabi_ddiv+0x664>)
   3349a:	e6af      	b.n	331fc <__aeabi_ddiv+0x19c>
   3349c:	0003      	movs	r3, r0
   3349e:	465a      	mov	r2, fp
   334a0:	3b28      	subs	r3, #40	; 0x28
   334a2:	409a      	lsls	r2, r3
   334a4:	2300      	movs	r3, #0
   334a6:	4691      	mov	r9, r2
   334a8:	4698      	mov	r8, r3
   334aa:	e657      	b.n	3315c <__aeabi_ddiv+0xfc>
   334ac:	4658      	mov	r0, fp
   334ae:	f000 ff47 	bl	34340 <__clzsi2>
   334b2:	3020      	adds	r0, #32
   334b4:	e640      	b.n	33138 <__aeabi_ddiv+0xd8>
   334b6:	0003      	movs	r3, r0
   334b8:	4652      	mov	r2, sl
   334ba:	3b28      	subs	r3, #40	; 0x28
   334bc:	409a      	lsls	r2, r3
   334be:	2100      	movs	r1, #0
   334c0:	4693      	mov	fp, r2
   334c2:	e677      	b.n	331b4 <__aeabi_ddiv+0x154>
   334c4:	f000 ff3c 	bl	34340 <__clzsi2>
   334c8:	3020      	adds	r0, #32
   334ca:	e65f      	b.n	3318c <__aeabi_ddiv+0x12c>
   334cc:	4588      	cmp	r8, r1
   334ce:	d200      	bcs.n	334d2 <__aeabi_ddiv+0x472>
   334d0:	e6c7      	b.n	33262 <__aeabi_ddiv+0x202>
   334d2:	464b      	mov	r3, r9
   334d4:	07de      	lsls	r6, r3, #31
   334d6:	085d      	lsrs	r5, r3, #1
   334d8:	4643      	mov	r3, r8
   334da:	085b      	lsrs	r3, r3, #1
   334dc:	431e      	orrs	r6, r3
   334de:	4643      	mov	r3, r8
   334e0:	07db      	lsls	r3, r3, #31
   334e2:	469a      	mov	sl, r3
   334e4:	e6c2      	b.n	3326c <__aeabi_ddiv+0x20c>
   334e6:	2500      	movs	r5, #0
   334e8:	4592      	cmp	sl, r2
   334ea:	d300      	bcc.n	334ee <__aeabi_ddiv+0x48e>
   334ec:	e733      	b.n	33356 <__aeabi_ddiv+0x2f6>
   334ee:	9e03      	ldr	r6, [sp, #12]
   334f0:	4659      	mov	r1, fp
   334f2:	46b4      	mov	ip, r6
   334f4:	44e2      	add	sl, ip
   334f6:	45b2      	cmp	sl, r6
   334f8:	41ad      	sbcs	r5, r5
   334fa:	426d      	negs	r5, r5
   334fc:	4445      	add	r5, r8
   334fe:	18eb      	adds	r3, r5, r3
   33500:	3901      	subs	r1, #1
   33502:	4598      	cmp	r8, r3
   33504:	d207      	bcs.n	33516 <__aeabi_ddiv+0x4b6>
   33506:	4298      	cmp	r0, r3
   33508:	d900      	bls.n	3350c <__aeabi_ddiv+0x4ac>
   3350a:	e07f      	b.n	3360c <__aeabi_ddiv+0x5ac>
   3350c:	d100      	bne.n	33510 <__aeabi_ddiv+0x4b0>
   3350e:	e0bc      	b.n	3368a <__aeabi_ddiv+0x62a>
   33510:	1a1d      	subs	r5, r3, r0
   33512:	468b      	mov	fp, r1
   33514:	e71f      	b.n	33356 <__aeabi_ddiv+0x2f6>
   33516:	4598      	cmp	r8, r3
   33518:	d1fa      	bne.n	33510 <__aeabi_ddiv+0x4b0>
   3351a:	9d03      	ldr	r5, [sp, #12]
   3351c:	4555      	cmp	r5, sl
   3351e:	d9f2      	bls.n	33506 <__aeabi_ddiv+0x4a6>
   33520:	4643      	mov	r3, r8
   33522:	468b      	mov	fp, r1
   33524:	1a1d      	subs	r5, r3, r0
   33526:	e716      	b.n	33356 <__aeabi_ddiv+0x2f6>
   33528:	469b      	mov	fp, r3
   3352a:	e6ca      	b.n	332c2 <__aeabi_ddiv+0x262>
   3352c:	0015      	movs	r5, r2
   3352e:	e6e7      	b.n	33300 <__aeabi_ddiv+0x2a0>
   33530:	465a      	mov	r2, fp
   33532:	08c9      	lsrs	r1, r1, #3
   33534:	0752      	lsls	r2, r2, #29
   33536:	430a      	orrs	r2, r1
   33538:	055b      	lsls	r3, r3, #21
   3353a:	4690      	mov	r8, r2
   3353c:	0d5c      	lsrs	r4, r3, #21
   3353e:	465a      	mov	r2, fp
   33540:	2301      	movs	r3, #1
   33542:	9902      	ldr	r1, [sp, #8]
   33544:	0252      	lsls	r2, r2, #9
   33546:	4019      	ands	r1, r3
   33548:	0b12      	lsrs	r2, r2, #12
   3354a:	468c      	mov	ip, r1
   3354c:	e656      	b.n	331fc <__aeabi_ddiv+0x19c>
   3354e:	2b00      	cmp	r3, #0
   33550:	d100      	bne.n	33554 <__aeabi_ddiv+0x4f4>
   33552:	e76f      	b.n	33434 <__aeabi_ddiv+0x3d4>
   33554:	4446      	add	r6, r8
   33556:	1e4a      	subs	r2, r1, #1
   33558:	45b0      	cmp	r8, r6
   3355a:	d929      	bls.n	335b0 <__aeabi_ddiv+0x550>
   3355c:	0011      	movs	r1, r2
   3355e:	4286      	cmp	r6, r0
   33560:	d000      	beq.n	33564 <__aeabi_ddiv+0x504>
   33562:	e765      	b.n	33430 <__aeabi_ddiv+0x3d0>
   33564:	9a03      	ldr	r2, [sp, #12]
   33566:	4293      	cmp	r3, r2
   33568:	d000      	beq.n	3356c <__aeabi_ddiv+0x50c>
   3356a:	e761      	b.n	33430 <__aeabi_ddiv+0x3d0>
   3356c:	e762      	b.n	33434 <__aeabi_ddiv+0x3d4>
   3356e:	2101      	movs	r1, #1
   33570:	4249      	negs	r1, r1
   33572:	2001      	movs	r0, #1
   33574:	1ac2      	subs	r2, r0, r3
   33576:	2a38      	cmp	r2, #56	; 0x38
   33578:	dd21      	ble.n	335be <__aeabi_ddiv+0x55e>
   3357a:	9b02      	ldr	r3, [sp, #8]
   3357c:	4003      	ands	r3, r0
   3357e:	469c      	mov	ip, r3
   33580:	e638      	b.n	331f4 <__aeabi_ddiv+0x194>
   33582:	220f      	movs	r2, #15
   33584:	400a      	ands	r2, r1
   33586:	2a04      	cmp	r2, #4
   33588:	d100      	bne.n	3358c <__aeabi_ddiv+0x52c>
   3358a:	e75b      	b.n	33444 <__aeabi_ddiv+0x3e4>
   3358c:	000a      	movs	r2, r1
   3358e:	1d11      	adds	r1, r2, #4
   33590:	4291      	cmp	r1, r2
   33592:	4192      	sbcs	r2, r2
   33594:	4252      	negs	r2, r2
   33596:	4493      	add	fp, r2
   33598:	e754      	b.n	33444 <__aeabi_ddiv+0x3e4>
   3359a:	4b47      	ldr	r3, [pc, #284]	; (336b8 <__aeabi_ddiv+0x658>)
   3359c:	18e3      	adds	r3, r4, r3
   3359e:	2b00      	cmp	r3, #0
   335a0:	dde5      	ble.n	3356e <__aeabi_ddiv+0x50e>
   335a2:	2201      	movs	r2, #1
   335a4:	4252      	negs	r2, r2
   335a6:	e7f2      	b.n	3358e <__aeabi_ddiv+0x52e>
   335a8:	001d      	movs	r5, r3
   335aa:	e6fa      	b.n	333a2 <__aeabi_ddiv+0x342>
   335ac:	469a      	mov	sl, r3
   335ae:	e71c      	b.n	333ea <__aeabi_ddiv+0x38a>
   335b0:	42b0      	cmp	r0, r6
   335b2:	d839      	bhi.n	33628 <__aeabi_ddiv+0x5c8>
   335b4:	d06e      	beq.n	33694 <__aeabi_ddiv+0x634>
   335b6:	0011      	movs	r1, r2
   335b8:	e73a      	b.n	33430 <__aeabi_ddiv+0x3d0>
   335ba:	9302      	str	r3, [sp, #8]
   335bc:	e73a      	b.n	33434 <__aeabi_ddiv+0x3d4>
   335be:	2a1f      	cmp	r2, #31
   335c0:	dc3c      	bgt.n	3363c <__aeabi_ddiv+0x5dc>
   335c2:	2320      	movs	r3, #32
   335c4:	1a9b      	subs	r3, r3, r2
   335c6:	000c      	movs	r4, r1
   335c8:	4658      	mov	r0, fp
   335ca:	4099      	lsls	r1, r3
   335cc:	4098      	lsls	r0, r3
   335ce:	1e4b      	subs	r3, r1, #1
   335d0:	4199      	sbcs	r1, r3
   335d2:	465b      	mov	r3, fp
   335d4:	40d4      	lsrs	r4, r2
   335d6:	40d3      	lsrs	r3, r2
   335d8:	4320      	orrs	r0, r4
   335da:	4308      	orrs	r0, r1
   335dc:	001a      	movs	r2, r3
   335de:	0743      	lsls	r3, r0, #29
   335e0:	d009      	beq.n	335f6 <__aeabi_ddiv+0x596>
   335e2:	230f      	movs	r3, #15
   335e4:	4003      	ands	r3, r0
   335e6:	2b04      	cmp	r3, #4
   335e8:	d005      	beq.n	335f6 <__aeabi_ddiv+0x596>
   335ea:	0001      	movs	r1, r0
   335ec:	1d08      	adds	r0, r1, #4
   335ee:	4288      	cmp	r0, r1
   335f0:	419b      	sbcs	r3, r3
   335f2:	425b      	negs	r3, r3
   335f4:	18d2      	adds	r2, r2, r3
   335f6:	0213      	lsls	r3, r2, #8
   335f8:	d53a      	bpl.n	33670 <__aeabi_ddiv+0x610>
   335fa:	2301      	movs	r3, #1
   335fc:	9a02      	ldr	r2, [sp, #8]
   335fe:	2401      	movs	r4, #1
   33600:	401a      	ands	r2, r3
   33602:	2300      	movs	r3, #0
   33604:	4694      	mov	ip, r2
   33606:	4698      	mov	r8, r3
   33608:	2200      	movs	r2, #0
   3360a:	e5f7      	b.n	331fc <__aeabi_ddiv+0x19c>
   3360c:	2102      	movs	r1, #2
   3360e:	4249      	negs	r1, r1
   33610:	468c      	mov	ip, r1
   33612:	9d03      	ldr	r5, [sp, #12]
   33614:	44e3      	add	fp, ip
   33616:	46ac      	mov	ip, r5
   33618:	44e2      	add	sl, ip
   3361a:	45aa      	cmp	sl, r5
   3361c:	41ad      	sbcs	r5, r5
   3361e:	426d      	negs	r5, r5
   33620:	4445      	add	r5, r8
   33622:	18ed      	adds	r5, r5, r3
   33624:	1a2d      	subs	r5, r5, r0
   33626:	e696      	b.n	33356 <__aeabi_ddiv+0x2f6>
   33628:	1e8a      	subs	r2, r1, #2
   3362a:	9903      	ldr	r1, [sp, #12]
   3362c:	004d      	lsls	r5, r1, #1
   3362e:	428d      	cmp	r5, r1
   33630:	4189      	sbcs	r1, r1
   33632:	4249      	negs	r1, r1
   33634:	4441      	add	r1, r8
   33636:	1876      	adds	r6, r6, r1
   33638:	9503      	str	r5, [sp, #12]
   3363a:	e78f      	b.n	3355c <__aeabi_ddiv+0x4fc>
   3363c:	201f      	movs	r0, #31
   3363e:	4240      	negs	r0, r0
   33640:	1ac3      	subs	r3, r0, r3
   33642:	4658      	mov	r0, fp
   33644:	40d8      	lsrs	r0, r3
   33646:	0003      	movs	r3, r0
   33648:	2a20      	cmp	r2, #32
   3364a:	d028      	beq.n	3369e <__aeabi_ddiv+0x63e>
   3364c:	2040      	movs	r0, #64	; 0x40
   3364e:	465d      	mov	r5, fp
   33650:	1a82      	subs	r2, r0, r2
   33652:	4095      	lsls	r5, r2
   33654:	4329      	orrs	r1, r5
   33656:	1e4a      	subs	r2, r1, #1
   33658:	4191      	sbcs	r1, r2
   3365a:	4319      	orrs	r1, r3
   3365c:	2307      	movs	r3, #7
   3365e:	2200      	movs	r2, #0
   33660:	400b      	ands	r3, r1
   33662:	d009      	beq.n	33678 <__aeabi_ddiv+0x618>
   33664:	230f      	movs	r3, #15
   33666:	2200      	movs	r2, #0
   33668:	400b      	ands	r3, r1
   3366a:	0008      	movs	r0, r1
   3366c:	2b04      	cmp	r3, #4
   3366e:	d1bd      	bne.n	335ec <__aeabi_ddiv+0x58c>
   33670:	0001      	movs	r1, r0
   33672:	0753      	lsls	r3, r2, #29
   33674:	0252      	lsls	r2, r2, #9
   33676:	0b12      	lsrs	r2, r2, #12
   33678:	08c9      	lsrs	r1, r1, #3
   3367a:	4319      	orrs	r1, r3
   3367c:	2301      	movs	r3, #1
   3367e:	4688      	mov	r8, r1
   33680:	9902      	ldr	r1, [sp, #8]
   33682:	2400      	movs	r4, #0
   33684:	4019      	ands	r1, r3
   33686:	468c      	mov	ip, r1
   33688:	e5b8      	b.n	331fc <__aeabi_ddiv+0x19c>
   3368a:	4552      	cmp	r2, sl
   3368c:	d8be      	bhi.n	3360c <__aeabi_ddiv+0x5ac>
   3368e:	468b      	mov	fp, r1
   33690:	2500      	movs	r5, #0
   33692:	e660      	b.n	33356 <__aeabi_ddiv+0x2f6>
   33694:	9d03      	ldr	r5, [sp, #12]
   33696:	429d      	cmp	r5, r3
   33698:	d3c6      	bcc.n	33628 <__aeabi_ddiv+0x5c8>
   3369a:	0011      	movs	r1, r2
   3369c:	e762      	b.n	33564 <__aeabi_ddiv+0x504>
   3369e:	2500      	movs	r5, #0
   336a0:	e7d8      	b.n	33654 <__aeabi_ddiv+0x5f4>
   336a2:	2280      	movs	r2, #128	; 0x80
   336a4:	465b      	mov	r3, fp
   336a6:	0312      	lsls	r2, r2, #12
   336a8:	431a      	orrs	r2, r3
   336aa:	9b01      	ldr	r3, [sp, #4]
   336ac:	0312      	lsls	r2, r2, #12
   336ae:	0b12      	lsrs	r2, r2, #12
   336b0:	469c      	mov	ip, r3
   336b2:	4688      	mov	r8, r1
   336b4:	4c03      	ldr	r4, [pc, #12]	; (336c4 <__aeabi_ddiv+0x664>)
   336b6:	e5a1      	b.n	331fc <__aeabi_ddiv+0x19c>
   336b8:	000003ff 	.word	0x000003ff
   336bc:	feffffff 	.word	0xfeffffff
   336c0:	000007fe 	.word	0x000007fe
   336c4:	000007ff 	.word	0x000007ff

000336c8 <__aeabi_dmul>:
   336c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   336ca:	4657      	mov	r7, sl
   336cc:	4645      	mov	r5, r8
   336ce:	46de      	mov	lr, fp
   336d0:	464e      	mov	r6, r9
   336d2:	b5e0      	push	{r5, r6, r7, lr}
   336d4:	030c      	lsls	r4, r1, #12
   336d6:	4698      	mov	r8, r3
   336d8:	004e      	lsls	r6, r1, #1
   336da:	0b23      	lsrs	r3, r4, #12
   336dc:	b087      	sub	sp, #28
   336de:	0007      	movs	r7, r0
   336e0:	4692      	mov	sl, r2
   336e2:	469b      	mov	fp, r3
   336e4:	0d76      	lsrs	r6, r6, #21
   336e6:	0fcd      	lsrs	r5, r1, #31
   336e8:	2e00      	cmp	r6, #0
   336ea:	d06b      	beq.n	337c4 <__aeabi_dmul+0xfc>
   336ec:	4b6d      	ldr	r3, [pc, #436]	; (338a4 <__aeabi_dmul+0x1dc>)
   336ee:	429e      	cmp	r6, r3
   336f0:	d035      	beq.n	3375e <__aeabi_dmul+0x96>
   336f2:	2480      	movs	r4, #128	; 0x80
   336f4:	465b      	mov	r3, fp
   336f6:	0f42      	lsrs	r2, r0, #29
   336f8:	0424      	lsls	r4, r4, #16
   336fa:	00db      	lsls	r3, r3, #3
   336fc:	4314      	orrs	r4, r2
   336fe:	431c      	orrs	r4, r3
   33700:	00c3      	lsls	r3, r0, #3
   33702:	4699      	mov	r9, r3
   33704:	4b68      	ldr	r3, [pc, #416]	; (338a8 <__aeabi_dmul+0x1e0>)
   33706:	46a3      	mov	fp, r4
   33708:	469c      	mov	ip, r3
   3370a:	2300      	movs	r3, #0
   3370c:	2700      	movs	r7, #0
   3370e:	4466      	add	r6, ip
   33710:	9302      	str	r3, [sp, #8]
   33712:	4643      	mov	r3, r8
   33714:	031c      	lsls	r4, r3, #12
   33716:	005a      	lsls	r2, r3, #1
   33718:	0fdb      	lsrs	r3, r3, #31
   3371a:	4650      	mov	r0, sl
   3371c:	0b24      	lsrs	r4, r4, #12
   3371e:	0d52      	lsrs	r2, r2, #21
   33720:	4698      	mov	r8, r3
   33722:	d100      	bne.n	33726 <__aeabi_dmul+0x5e>
   33724:	e076      	b.n	33814 <__aeabi_dmul+0x14c>
   33726:	4b5f      	ldr	r3, [pc, #380]	; (338a4 <__aeabi_dmul+0x1dc>)
   33728:	429a      	cmp	r2, r3
   3372a:	d06d      	beq.n	33808 <__aeabi_dmul+0x140>
   3372c:	2380      	movs	r3, #128	; 0x80
   3372e:	0f41      	lsrs	r1, r0, #29
   33730:	041b      	lsls	r3, r3, #16
   33732:	430b      	orrs	r3, r1
   33734:	495c      	ldr	r1, [pc, #368]	; (338a8 <__aeabi_dmul+0x1e0>)
   33736:	00e4      	lsls	r4, r4, #3
   33738:	468c      	mov	ip, r1
   3373a:	431c      	orrs	r4, r3
   3373c:	00c3      	lsls	r3, r0, #3
   3373e:	2000      	movs	r0, #0
   33740:	4462      	add	r2, ip
   33742:	4641      	mov	r1, r8
   33744:	18b6      	adds	r6, r6, r2
   33746:	4069      	eors	r1, r5
   33748:	1c72      	adds	r2, r6, #1
   3374a:	9101      	str	r1, [sp, #4]
   3374c:	4694      	mov	ip, r2
   3374e:	4307      	orrs	r7, r0
   33750:	2f0f      	cmp	r7, #15
   33752:	d900      	bls.n	33756 <__aeabi_dmul+0x8e>
   33754:	e0b0      	b.n	338b8 <__aeabi_dmul+0x1f0>
   33756:	4a55      	ldr	r2, [pc, #340]	; (338ac <__aeabi_dmul+0x1e4>)
   33758:	00bf      	lsls	r7, r7, #2
   3375a:	59d2      	ldr	r2, [r2, r7]
   3375c:	4697      	mov	pc, r2
   3375e:	465b      	mov	r3, fp
   33760:	4303      	orrs	r3, r0
   33762:	4699      	mov	r9, r3
   33764:	d000      	beq.n	33768 <__aeabi_dmul+0xa0>
   33766:	e087      	b.n	33878 <__aeabi_dmul+0x1b0>
   33768:	2300      	movs	r3, #0
   3376a:	469b      	mov	fp, r3
   3376c:	3302      	adds	r3, #2
   3376e:	2708      	movs	r7, #8
   33770:	9302      	str	r3, [sp, #8]
   33772:	e7ce      	b.n	33712 <__aeabi_dmul+0x4a>
   33774:	4642      	mov	r2, r8
   33776:	9201      	str	r2, [sp, #4]
   33778:	2802      	cmp	r0, #2
   3377a:	d067      	beq.n	3384c <__aeabi_dmul+0x184>
   3377c:	2803      	cmp	r0, #3
   3377e:	d100      	bne.n	33782 <__aeabi_dmul+0xba>
   33780:	e20e      	b.n	33ba0 <__aeabi_dmul+0x4d8>
   33782:	2801      	cmp	r0, #1
   33784:	d000      	beq.n	33788 <__aeabi_dmul+0xc0>
   33786:	e162      	b.n	33a4e <__aeabi_dmul+0x386>
   33788:	2300      	movs	r3, #0
   3378a:	2400      	movs	r4, #0
   3378c:	2200      	movs	r2, #0
   3378e:	4699      	mov	r9, r3
   33790:	9901      	ldr	r1, [sp, #4]
   33792:	4001      	ands	r1, r0
   33794:	b2cd      	uxtb	r5, r1
   33796:	2100      	movs	r1, #0
   33798:	0312      	lsls	r2, r2, #12
   3379a:	0d0b      	lsrs	r3, r1, #20
   3379c:	0b12      	lsrs	r2, r2, #12
   3379e:	051b      	lsls	r3, r3, #20
   337a0:	4313      	orrs	r3, r2
   337a2:	4a43      	ldr	r2, [pc, #268]	; (338b0 <__aeabi_dmul+0x1e8>)
   337a4:	0524      	lsls	r4, r4, #20
   337a6:	4013      	ands	r3, r2
   337a8:	431c      	orrs	r4, r3
   337aa:	0064      	lsls	r4, r4, #1
   337ac:	07ed      	lsls	r5, r5, #31
   337ae:	0864      	lsrs	r4, r4, #1
   337b0:	432c      	orrs	r4, r5
   337b2:	4648      	mov	r0, r9
   337b4:	0021      	movs	r1, r4
   337b6:	b007      	add	sp, #28
   337b8:	bc3c      	pop	{r2, r3, r4, r5}
   337ba:	4690      	mov	r8, r2
   337bc:	4699      	mov	r9, r3
   337be:	46a2      	mov	sl, r4
   337c0:	46ab      	mov	fp, r5
   337c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   337c4:	4303      	orrs	r3, r0
   337c6:	4699      	mov	r9, r3
   337c8:	d04f      	beq.n	3386a <__aeabi_dmul+0x1a2>
   337ca:	465b      	mov	r3, fp
   337cc:	2b00      	cmp	r3, #0
   337ce:	d100      	bne.n	337d2 <__aeabi_dmul+0x10a>
   337d0:	e189      	b.n	33ae6 <__aeabi_dmul+0x41e>
   337d2:	4658      	mov	r0, fp
   337d4:	f000 fdb4 	bl	34340 <__clzsi2>
   337d8:	0003      	movs	r3, r0
   337da:	3b0b      	subs	r3, #11
   337dc:	2b1c      	cmp	r3, #28
   337de:	dd00      	ble.n	337e2 <__aeabi_dmul+0x11a>
   337e0:	e17a      	b.n	33ad8 <__aeabi_dmul+0x410>
   337e2:	221d      	movs	r2, #29
   337e4:	1ad3      	subs	r3, r2, r3
   337e6:	003a      	movs	r2, r7
   337e8:	0001      	movs	r1, r0
   337ea:	465c      	mov	r4, fp
   337ec:	40da      	lsrs	r2, r3
   337ee:	3908      	subs	r1, #8
   337f0:	408c      	lsls	r4, r1
   337f2:	0013      	movs	r3, r2
   337f4:	408f      	lsls	r7, r1
   337f6:	4323      	orrs	r3, r4
   337f8:	469b      	mov	fp, r3
   337fa:	46b9      	mov	r9, r7
   337fc:	2300      	movs	r3, #0
   337fe:	4e2d      	ldr	r6, [pc, #180]	; (338b4 <__aeabi_dmul+0x1ec>)
   33800:	2700      	movs	r7, #0
   33802:	1a36      	subs	r6, r6, r0
   33804:	9302      	str	r3, [sp, #8]
   33806:	e784      	b.n	33712 <__aeabi_dmul+0x4a>
   33808:	4653      	mov	r3, sl
   3380a:	4323      	orrs	r3, r4
   3380c:	d12a      	bne.n	33864 <__aeabi_dmul+0x19c>
   3380e:	2400      	movs	r4, #0
   33810:	2002      	movs	r0, #2
   33812:	e796      	b.n	33742 <__aeabi_dmul+0x7a>
   33814:	4653      	mov	r3, sl
   33816:	4323      	orrs	r3, r4
   33818:	d020      	beq.n	3385c <__aeabi_dmul+0x194>
   3381a:	2c00      	cmp	r4, #0
   3381c:	d100      	bne.n	33820 <__aeabi_dmul+0x158>
   3381e:	e157      	b.n	33ad0 <__aeabi_dmul+0x408>
   33820:	0020      	movs	r0, r4
   33822:	f000 fd8d 	bl	34340 <__clzsi2>
   33826:	0003      	movs	r3, r0
   33828:	3b0b      	subs	r3, #11
   3382a:	2b1c      	cmp	r3, #28
   3382c:	dd00      	ble.n	33830 <__aeabi_dmul+0x168>
   3382e:	e149      	b.n	33ac4 <__aeabi_dmul+0x3fc>
   33830:	211d      	movs	r1, #29
   33832:	1acb      	subs	r3, r1, r3
   33834:	4651      	mov	r1, sl
   33836:	0002      	movs	r2, r0
   33838:	40d9      	lsrs	r1, r3
   3383a:	4653      	mov	r3, sl
   3383c:	3a08      	subs	r2, #8
   3383e:	4094      	lsls	r4, r2
   33840:	4093      	lsls	r3, r2
   33842:	430c      	orrs	r4, r1
   33844:	4a1b      	ldr	r2, [pc, #108]	; (338b4 <__aeabi_dmul+0x1ec>)
   33846:	1a12      	subs	r2, r2, r0
   33848:	2000      	movs	r0, #0
   3384a:	e77a      	b.n	33742 <__aeabi_dmul+0x7a>
   3384c:	2501      	movs	r5, #1
   3384e:	9b01      	ldr	r3, [sp, #4]
   33850:	4c14      	ldr	r4, [pc, #80]	; (338a4 <__aeabi_dmul+0x1dc>)
   33852:	401d      	ands	r5, r3
   33854:	2300      	movs	r3, #0
   33856:	2200      	movs	r2, #0
   33858:	4699      	mov	r9, r3
   3385a:	e79c      	b.n	33796 <__aeabi_dmul+0xce>
   3385c:	2400      	movs	r4, #0
   3385e:	2200      	movs	r2, #0
   33860:	2001      	movs	r0, #1
   33862:	e76e      	b.n	33742 <__aeabi_dmul+0x7a>
   33864:	4653      	mov	r3, sl
   33866:	2003      	movs	r0, #3
   33868:	e76b      	b.n	33742 <__aeabi_dmul+0x7a>
   3386a:	2300      	movs	r3, #0
   3386c:	469b      	mov	fp, r3
   3386e:	3301      	adds	r3, #1
   33870:	2704      	movs	r7, #4
   33872:	2600      	movs	r6, #0
   33874:	9302      	str	r3, [sp, #8]
   33876:	e74c      	b.n	33712 <__aeabi_dmul+0x4a>
   33878:	2303      	movs	r3, #3
   3387a:	4681      	mov	r9, r0
   3387c:	270c      	movs	r7, #12
   3387e:	9302      	str	r3, [sp, #8]
   33880:	e747      	b.n	33712 <__aeabi_dmul+0x4a>
   33882:	2280      	movs	r2, #128	; 0x80
   33884:	2300      	movs	r3, #0
   33886:	2500      	movs	r5, #0
   33888:	0312      	lsls	r2, r2, #12
   3388a:	4699      	mov	r9, r3
   3388c:	4c05      	ldr	r4, [pc, #20]	; (338a4 <__aeabi_dmul+0x1dc>)
   3388e:	e782      	b.n	33796 <__aeabi_dmul+0xce>
   33890:	465c      	mov	r4, fp
   33892:	464b      	mov	r3, r9
   33894:	9802      	ldr	r0, [sp, #8]
   33896:	e76f      	b.n	33778 <__aeabi_dmul+0xb0>
   33898:	465c      	mov	r4, fp
   3389a:	464b      	mov	r3, r9
   3389c:	9501      	str	r5, [sp, #4]
   3389e:	9802      	ldr	r0, [sp, #8]
   338a0:	e76a      	b.n	33778 <__aeabi_dmul+0xb0>
   338a2:	46c0      	nop			; (mov r8, r8)
   338a4:	000007ff 	.word	0x000007ff
   338a8:	fffffc01 	.word	0xfffffc01
   338ac:	00039aec 	.word	0x00039aec
   338b0:	800fffff 	.word	0x800fffff
   338b4:	fffffc0d 	.word	0xfffffc0d
   338b8:	464a      	mov	r2, r9
   338ba:	4649      	mov	r1, r9
   338bc:	0c17      	lsrs	r7, r2, #16
   338be:	0c1a      	lsrs	r2, r3, #16
   338c0:	041b      	lsls	r3, r3, #16
   338c2:	0c1b      	lsrs	r3, r3, #16
   338c4:	0408      	lsls	r0, r1, #16
   338c6:	0019      	movs	r1, r3
   338c8:	0c00      	lsrs	r0, r0, #16
   338ca:	4341      	muls	r1, r0
   338cc:	0015      	movs	r5, r2
   338ce:	4688      	mov	r8, r1
   338d0:	0019      	movs	r1, r3
   338d2:	437d      	muls	r5, r7
   338d4:	4379      	muls	r1, r7
   338d6:	9503      	str	r5, [sp, #12]
   338d8:	4689      	mov	r9, r1
   338da:	0029      	movs	r1, r5
   338dc:	0015      	movs	r5, r2
   338de:	4345      	muls	r5, r0
   338e0:	444d      	add	r5, r9
   338e2:	9502      	str	r5, [sp, #8]
   338e4:	4645      	mov	r5, r8
   338e6:	0c2d      	lsrs	r5, r5, #16
   338e8:	46aa      	mov	sl, r5
   338ea:	9d02      	ldr	r5, [sp, #8]
   338ec:	4455      	add	r5, sl
   338ee:	45a9      	cmp	r9, r5
   338f0:	d906      	bls.n	33900 <__aeabi_dmul+0x238>
   338f2:	468a      	mov	sl, r1
   338f4:	2180      	movs	r1, #128	; 0x80
   338f6:	0249      	lsls	r1, r1, #9
   338f8:	4689      	mov	r9, r1
   338fa:	44ca      	add	sl, r9
   338fc:	4651      	mov	r1, sl
   338fe:	9103      	str	r1, [sp, #12]
   33900:	0c29      	lsrs	r1, r5, #16
   33902:	9104      	str	r1, [sp, #16]
   33904:	4641      	mov	r1, r8
   33906:	0409      	lsls	r1, r1, #16
   33908:	042d      	lsls	r5, r5, #16
   3390a:	0c09      	lsrs	r1, r1, #16
   3390c:	4688      	mov	r8, r1
   3390e:	0029      	movs	r1, r5
   33910:	0c25      	lsrs	r5, r4, #16
   33912:	0424      	lsls	r4, r4, #16
   33914:	4441      	add	r1, r8
   33916:	0c24      	lsrs	r4, r4, #16
   33918:	9105      	str	r1, [sp, #20]
   3391a:	0021      	movs	r1, r4
   3391c:	4341      	muls	r1, r0
   3391e:	4688      	mov	r8, r1
   33920:	0021      	movs	r1, r4
   33922:	4379      	muls	r1, r7
   33924:	468a      	mov	sl, r1
   33926:	4368      	muls	r0, r5
   33928:	4641      	mov	r1, r8
   3392a:	4450      	add	r0, sl
   3392c:	4681      	mov	r9, r0
   3392e:	0c08      	lsrs	r0, r1, #16
   33930:	4448      	add	r0, r9
   33932:	436f      	muls	r7, r5
   33934:	4582      	cmp	sl, r0
   33936:	d903      	bls.n	33940 <__aeabi_dmul+0x278>
   33938:	2180      	movs	r1, #128	; 0x80
   3393a:	0249      	lsls	r1, r1, #9
   3393c:	4689      	mov	r9, r1
   3393e:	444f      	add	r7, r9
   33940:	0c01      	lsrs	r1, r0, #16
   33942:	4689      	mov	r9, r1
   33944:	0039      	movs	r1, r7
   33946:	4449      	add	r1, r9
   33948:	9102      	str	r1, [sp, #8]
   3394a:	4641      	mov	r1, r8
   3394c:	040f      	lsls	r7, r1, #16
   3394e:	9904      	ldr	r1, [sp, #16]
   33950:	0c3f      	lsrs	r7, r7, #16
   33952:	4688      	mov	r8, r1
   33954:	0400      	lsls	r0, r0, #16
   33956:	19c0      	adds	r0, r0, r7
   33958:	4480      	add	r8, r0
   3395a:	4641      	mov	r1, r8
   3395c:	9104      	str	r1, [sp, #16]
   3395e:	4659      	mov	r1, fp
   33960:	0c0f      	lsrs	r7, r1, #16
   33962:	0409      	lsls	r1, r1, #16
   33964:	0c09      	lsrs	r1, r1, #16
   33966:	4688      	mov	r8, r1
   33968:	4359      	muls	r1, r3
   3396a:	468a      	mov	sl, r1
   3396c:	0039      	movs	r1, r7
   3396e:	4351      	muls	r1, r2
   33970:	4689      	mov	r9, r1
   33972:	4641      	mov	r1, r8
   33974:	434a      	muls	r2, r1
   33976:	4651      	mov	r1, sl
   33978:	0c09      	lsrs	r1, r1, #16
   3397a:	468b      	mov	fp, r1
   3397c:	437b      	muls	r3, r7
   3397e:	18d2      	adds	r2, r2, r3
   33980:	445a      	add	r2, fp
   33982:	4293      	cmp	r3, r2
   33984:	d903      	bls.n	3398e <__aeabi_dmul+0x2c6>
   33986:	2380      	movs	r3, #128	; 0x80
   33988:	025b      	lsls	r3, r3, #9
   3398a:	469b      	mov	fp, r3
   3398c:	44d9      	add	r9, fp
   3398e:	4651      	mov	r1, sl
   33990:	0409      	lsls	r1, r1, #16
   33992:	0c09      	lsrs	r1, r1, #16
   33994:	468a      	mov	sl, r1
   33996:	4641      	mov	r1, r8
   33998:	4361      	muls	r1, r4
   3399a:	437c      	muls	r4, r7
   3399c:	0c13      	lsrs	r3, r2, #16
   3399e:	0412      	lsls	r2, r2, #16
   339a0:	444b      	add	r3, r9
   339a2:	4452      	add	r2, sl
   339a4:	46a1      	mov	r9, r4
   339a6:	468a      	mov	sl, r1
   339a8:	003c      	movs	r4, r7
   339aa:	4641      	mov	r1, r8
   339ac:	436c      	muls	r4, r5
   339ae:	434d      	muls	r5, r1
   339b0:	4651      	mov	r1, sl
   339b2:	444d      	add	r5, r9
   339b4:	0c0f      	lsrs	r7, r1, #16
   339b6:	197d      	adds	r5, r7, r5
   339b8:	45a9      	cmp	r9, r5
   339ba:	d903      	bls.n	339c4 <__aeabi_dmul+0x2fc>
   339bc:	2180      	movs	r1, #128	; 0x80
   339be:	0249      	lsls	r1, r1, #9
   339c0:	4688      	mov	r8, r1
   339c2:	4444      	add	r4, r8
   339c4:	9f04      	ldr	r7, [sp, #16]
   339c6:	9903      	ldr	r1, [sp, #12]
   339c8:	46b8      	mov	r8, r7
   339ca:	4441      	add	r1, r8
   339cc:	468b      	mov	fp, r1
   339ce:	4583      	cmp	fp, r0
   339d0:	4180      	sbcs	r0, r0
   339d2:	4241      	negs	r1, r0
   339d4:	4688      	mov	r8, r1
   339d6:	4651      	mov	r1, sl
   339d8:	0408      	lsls	r0, r1, #16
   339da:	042f      	lsls	r7, r5, #16
   339dc:	0c00      	lsrs	r0, r0, #16
   339de:	183f      	adds	r7, r7, r0
   339e0:	4658      	mov	r0, fp
   339e2:	9902      	ldr	r1, [sp, #8]
   339e4:	1810      	adds	r0, r2, r0
   339e6:	4689      	mov	r9, r1
   339e8:	4290      	cmp	r0, r2
   339ea:	4192      	sbcs	r2, r2
   339ec:	444f      	add	r7, r9
   339ee:	46ba      	mov	sl, r7
   339f0:	4252      	negs	r2, r2
   339f2:	4699      	mov	r9, r3
   339f4:	4693      	mov	fp, r2
   339f6:	44c2      	add	sl, r8
   339f8:	44d1      	add	r9, sl
   339fa:	44cb      	add	fp, r9
   339fc:	428f      	cmp	r7, r1
   339fe:	41bf      	sbcs	r7, r7
   33a00:	45c2      	cmp	sl, r8
   33a02:	4189      	sbcs	r1, r1
   33a04:	4599      	cmp	r9, r3
   33a06:	419b      	sbcs	r3, r3
   33a08:	4593      	cmp	fp, r2
   33a0a:	4192      	sbcs	r2, r2
   33a0c:	427f      	negs	r7, r7
   33a0e:	4249      	negs	r1, r1
   33a10:	0c2d      	lsrs	r5, r5, #16
   33a12:	4252      	negs	r2, r2
   33a14:	430f      	orrs	r7, r1
   33a16:	425b      	negs	r3, r3
   33a18:	4313      	orrs	r3, r2
   33a1a:	197f      	adds	r7, r7, r5
   33a1c:	18ff      	adds	r7, r7, r3
   33a1e:	465b      	mov	r3, fp
   33a20:	193c      	adds	r4, r7, r4
   33a22:	0ddb      	lsrs	r3, r3, #23
   33a24:	9a05      	ldr	r2, [sp, #20]
   33a26:	0264      	lsls	r4, r4, #9
   33a28:	431c      	orrs	r4, r3
   33a2a:	0243      	lsls	r3, r0, #9
   33a2c:	4313      	orrs	r3, r2
   33a2e:	1e5d      	subs	r5, r3, #1
   33a30:	41ab      	sbcs	r3, r5
   33a32:	465a      	mov	r2, fp
   33a34:	0dc0      	lsrs	r0, r0, #23
   33a36:	4303      	orrs	r3, r0
   33a38:	0252      	lsls	r2, r2, #9
   33a3a:	4313      	orrs	r3, r2
   33a3c:	01e2      	lsls	r2, r4, #7
   33a3e:	d556      	bpl.n	33aee <__aeabi_dmul+0x426>
   33a40:	2001      	movs	r0, #1
   33a42:	085a      	lsrs	r2, r3, #1
   33a44:	4003      	ands	r3, r0
   33a46:	4313      	orrs	r3, r2
   33a48:	07e2      	lsls	r2, r4, #31
   33a4a:	4313      	orrs	r3, r2
   33a4c:	0864      	lsrs	r4, r4, #1
   33a4e:	485a      	ldr	r0, [pc, #360]	; (33bb8 <__aeabi_dmul+0x4f0>)
   33a50:	4460      	add	r0, ip
   33a52:	2800      	cmp	r0, #0
   33a54:	dd4d      	ble.n	33af2 <__aeabi_dmul+0x42a>
   33a56:	075a      	lsls	r2, r3, #29
   33a58:	d009      	beq.n	33a6e <__aeabi_dmul+0x3a6>
   33a5a:	220f      	movs	r2, #15
   33a5c:	401a      	ands	r2, r3
   33a5e:	2a04      	cmp	r2, #4
   33a60:	d005      	beq.n	33a6e <__aeabi_dmul+0x3a6>
   33a62:	1d1a      	adds	r2, r3, #4
   33a64:	429a      	cmp	r2, r3
   33a66:	419b      	sbcs	r3, r3
   33a68:	425b      	negs	r3, r3
   33a6a:	18e4      	adds	r4, r4, r3
   33a6c:	0013      	movs	r3, r2
   33a6e:	01e2      	lsls	r2, r4, #7
   33a70:	d504      	bpl.n	33a7c <__aeabi_dmul+0x3b4>
   33a72:	2080      	movs	r0, #128	; 0x80
   33a74:	4a51      	ldr	r2, [pc, #324]	; (33bbc <__aeabi_dmul+0x4f4>)
   33a76:	00c0      	lsls	r0, r0, #3
   33a78:	4014      	ands	r4, r2
   33a7a:	4460      	add	r0, ip
   33a7c:	4a50      	ldr	r2, [pc, #320]	; (33bc0 <__aeabi_dmul+0x4f8>)
   33a7e:	4290      	cmp	r0, r2
   33a80:	dd00      	ble.n	33a84 <__aeabi_dmul+0x3bc>
   33a82:	e6e3      	b.n	3384c <__aeabi_dmul+0x184>
   33a84:	2501      	movs	r5, #1
   33a86:	08db      	lsrs	r3, r3, #3
   33a88:	0762      	lsls	r2, r4, #29
   33a8a:	431a      	orrs	r2, r3
   33a8c:	0264      	lsls	r4, r4, #9
   33a8e:	9b01      	ldr	r3, [sp, #4]
   33a90:	4691      	mov	r9, r2
   33a92:	0b22      	lsrs	r2, r4, #12
   33a94:	0544      	lsls	r4, r0, #21
   33a96:	0d64      	lsrs	r4, r4, #21
   33a98:	401d      	ands	r5, r3
   33a9a:	e67c      	b.n	33796 <__aeabi_dmul+0xce>
   33a9c:	2280      	movs	r2, #128	; 0x80
   33a9e:	4659      	mov	r1, fp
   33aa0:	0312      	lsls	r2, r2, #12
   33aa2:	4211      	tst	r1, r2
   33aa4:	d008      	beq.n	33ab8 <__aeabi_dmul+0x3f0>
   33aa6:	4214      	tst	r4, r2
   33aa8:	d106      	bne.n	33ab8 <__aeabi_dmul+0x3f0>
   33aaa:	4322      	orrs	r2, r4
   33aac:	0312      	lsls	r2, r2, #12
   33aae:	0b12      	lsrs	r2, r2, #12
   33ab0:	4645      	mov	r5, r8
   33ab2:	4699      	mov	r9, r3
   33ab4:	4c43      	ldr	r4, [pc, #268]	; (33bc4 <__aeabi_dmul+0x4fc>)
   33ab6:	e66e      	b.n	33796 <__aeabi_dmul+0xce>
   33ab8:	465b      	mov	r3, fp
   33aba:	431a      	orrs	r2, r3
   33abc:	0312      	lsls	r2, r2, #12
   33abe:	0b12      	lsrs	r2, r2, #12
   33ac0:	4c40      	ldr	r4, [pc, #256]	; (33bc4 <__aeabi_dmul+0x4fc>)
   33ac2:	e668      	b.n	33796 <__aeabi_dmul+0xce>
   33ac4:	0003      	movs	r3, r0
   33ac6:	4654      	mov	r4, sl
   33ac8:	3b28      	subs	r3, #40	; 0x28
   33aca:	409c      	lsls	r4, r3
   33acc:	2300      	movs	r3, #0
   33ace:	e6b9      	b.n	33844 <__aeabi_dmul+0x17c>
   33ad0:	f000 fc36 	bl	34340 <__clzsi2>
   33ad4:	3020      	adds	r0, #32
   33ad6:	e6a6      	b.n	33826 <__aeabi_dmul+0x15e>
   33ad8:	0003      	movs	r3, r0
   33ada:	3b28      	subs	r3, #40	; 0x28
   33adc:	409f      	lsls	r7, r3
   33ade:	2300      	movs	r3, #0
   33ae0:	46bb      	mov	fp, r7
   33ae2:	4699      	mov	r9, r3
   33ae4:	e68a      	b.n	337fc <__aeabi_dmul+0x134>
   33ae6:	f000 fc2b 	bl	34340 <__clzsi2>
   33aea:	3020      	adds	r0, #32
   33aec:	e674      	b.n	337d8 <__aeabi_dmul+0x110>
   33aee:	46b4      	mov	ip, r6
   33af0:	e7ad      	b.n	33a4e <__aeabi_dmul+0x386>
   33af2:	2501      	movs	r5, #1
   33af4:	1a2a      	subs	r2, r5, r0
   33af6:	2a38      	cmp	r2, #56	; 0x38
   33af8:	dd06      	ble.n	33b08 <__aeabi_dmul+0x440>
   33afa:	9b01      	ldr	r3, [sp, #4]
   33afc:	2400      	movs	r4, #0
   33afe:	401d      	ands	r5, r3
   33b00:	2300      	movs	r3, #0
   33b02:	2200      	movs	r2, #0
   33b04:	4699      	mov	r9, r3
   33b06:	e646      	b.n	33796 <__aeabi_dmul+0xce>
   33b08:	2a1f      	cmp	r2, #31
   33b0a:	dc21      	bgt.n	33b50 <__aeabi_dmul+0x488>
   33b0c:	2520      	movs	r5, #32
   33b0e:	0020      	movs	r0, r4
   33b10:	1aad      	subs	r5, r5, r2
   33b12:	001e      	movs	r6, r3
   33b14:	40ab      	lsls	r3, r5
   33b16:	40a8      	lsls	r0, r5
   33b18:	40d6      	lsrs	r6, r2
   33b1a:	1e5d      	subs	r5, r3, #1
   33b1c:	41ab      	sbcs	r3, r5
   33b1e:	4330      	orrs	r0, r6
   33b20:	4318      	orrs	r0, r3
   33b22:	40d4      	lsrs	r4, r2
   33b24:	0743      	lsls	r3, r0, #29
   33b26:	d009      	beq.n	33b3c <__aeabi_dmul+0x474>
   33b28:	230f      	movs	r3, #15
   33b2a:	4003      	ands	r3, r0
   33b2c:	2b04      	cmp	r3, #4
   33b2e:	d005      	beq.n	33b3c <__aeabi_dmul+0x474>
   33b30:	0003      	movs	r3, r0
   33b32:	1d18      	adds	r0, r3, #4
   33b34:	4298      	cmp	r0, r3
   33b36:	419b      	sbcs	r3, r3
   33b38:	425b      	negs	r3, r3
   33b3a:	18e4      	adds	r4, r4, r3
   33b3c:	0223      	lsls	r3, r4, #8
   33b3e:	d521      	bpl.n	33b84 <__aeabi_dmul+0x4bc>
   33b40:	2501      	movs	r5, #1
   33b42:	9b01      	ldr	r3, [sp, #4]
   33b44:	2401      	movs	r4, #1
   33b46:	401d      	ands	r5, r3
   33b48:	2300      	movs	r3, #0
   33b4a:	2200      	movs	r2, #0
   33b4c:	4699      	mov	r9, r3
   33b4e:	e622      	b.n	33796 <__aeabi_dmul+0xce>
   33b50:	251f      	movs	r5, #31
   33b52:	0021      	movs	r1, r4
   33b54:	426d      	negs	r5, r5
   33b56:	1a28      	subs	r0, r5, r0
   33b58:	40c1      	lsrs	r1, r0
   33b5a:	0008      	movs	r0, r1
   33b5c:	2a20      	cmp	r2, #32
   33b5e:	d01d      	beq.n	33b9c <__aeabi_dmul+0x4d4>
   33b60:	355f      	adds	r5, #95	; 0x5f
   33b62:	1aaa      	subs	r2, r5, r2
   33b64:	4094      	lsls	r4, r2
   33b66:	4323      	orrs	r3, r4
   33b68:	1e5c      	subs	r4, r3, #1
   33b6a:	41a3      	sbcs	r3, r4
   33b6c:	2507      	movs	r5, #7
   33b6e:	4303      	orrs	r3, r0
   33b70:	401d      	ands	r5, r3
   33b72:	2200      	movs	r2, #0
   33b74:	2d00      	cmp	r5, #0
   33b76:	d009      	beq.n	33b8c <__aeabi_dmul+0x4c4>
   33b78:	220f      	movs	r2, #15
   33b7a:	2400      	movs	r4, #0
   33b7c:	401a      	ands	r2, r3
   33b7e:	0018      	movs	r0, r3
   33b80:	2a04      	cmp	r2, #4
   33b82:	d1d6      	bne.n	33b32 <__aeabi_dmul+0x46a>
   33b84:	0003      	movs	r3, r0
   33b86:	0765      	lsls	r5, r4, #29
   33b88:	0264      	lsls	r4, r4, #9
   33b8a:	0b22      	lsrs	r2, r4, #12
   33b8c:	08db      	lsrs	r3, r3, #3
   33b8e:	432b      	orrs	r3, r5
   33b90:	2501      	movs	r5, #1
   33b92:	4699      	mov	r9, r3
   33b94:	9b01      	ldr	r3, [sp, #4]
   33b96:	2400      	movs	r4, #0
   33b98:	401d      	ands	r5, r3
   33b9a:	e5fc      	b.n	33796 <__aeabi_dmul+0xce>
   33b9c:	2400      	movs	r4, #0
   33b9e:	e7e2      	b.n	33b66 <__aeabi_dmul+0x49e>
   33ba0:	2280      	movs	r2, #128	; 0x80
   33ba2:	2501      	movs	r5, #1
   33ba4:	0312      	lsls	r2, r2, #12
   33ba6:	4322      	orrs	r2, r4
   33ba8:	9901      	ldr	r1, [sp, #4]
   33baa:	0312      	lsls	r2, r2, #12
   33bac:	0b12      	lsrs	r2, r2, #12
   33bae:	400d      	ands	r5, r1
   33bb0:	4699      	mov	r9, r3
   33bb2:	4c04      	ldr	r4, [pc, #16]	; (33bc4 <__aeabi_dmul+0x4fc>)
   33bb4:	e5ef      	b.n	33796 <__aeabi_dmul+0xce>
   33bb6:	46c0      	nop			; (mov r8, r8)
   33bb8:	000003ff 	.word	0x000003ff
   33bbc:	feffffff 	.word	0xfeffffff
   33bc0:	000007fe 	.word	0x000007fe
   33bc4:	000007ff 	.word	0x000007ff

00033bc8 <__aeabi_dsub>:
   33bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   33bca:	4646      	mov	r6, r8
   33bcc:	46d6      	mov	lr, sl
   33bce:	464f      	mov	r7, r9
   33bd0:	030c      	lsls	r4, r1, #12
   33bd2:	b5c0      	push	{r6, r7, lr}
   33bd4:	0fcd      	lsrs	r5, r1, #31
   33bd6:	004e      	lsls	r6, r1, #1
   33bd8:	0a61      	lsrs	r1, r4, #9
   33bda:	0f44      	lsrs	r4, r0, #29
   33bdc:	430c      	orrs	r4, r1
   33bde:	00c1      	lsls	r1, r0, #3
   33be0:	0058      	lsls	r0, r3, #1
   33be2:	0d40      	lsrs	r0, r0, #21
   33be4:	4684      	mov	ip, r0
   33be6:	468a      	mov	sl, r1
   33be8:	000f      	movs	r7, r1
   33bea:	0319      	lsls	r1, r3, #12
   33bec:	0f50      	lsrs	r0, r2, #29
   33bee:	0a49      	lsrs	r1, r1, #9
   33bf0:	4301      	orrs	r1, r0
   33bf2:	48c6      	ldr	r0, [pc, #792]	; (33f0c <__aeabi_dsub+0x344>)
   33bf4:	0d76      	lsrs	r6, r6, #21
   33bf6:	46a8      	mov	r8, r5
   33bf8:	0fdb      	lsrs	r3, r3, #31
   33bfa:	00d2      	lsls	r2, r2, #3
   33bfc:	4584      	cmp	ip, r0
   33bfe:	d100      	bne.n	33c02 <__aeabi_dsub+0x3a>
   33c00:	e0d8      	b.n	33db4 <__aeabi_dsub+0x1ec>
   33c02:	2001      	movs	r0, #1
   33c04:	4043      	eors	r3, r0
   33c06:	42ab      	cmp	r3, r5
   33c08:	d100      	bne.n	33c0c <__aeabi_dsub+0x44>
   33c0a:	e0a6      	b.n	33d5a <__aeabi_dsub+0x192>
   33c0c:	4660      	mov	r0, ip
   33c0e:	1a35      	subs	r5, r6, r0
   33c10:	2d00      	cmp	r5, #0
   33c12:	dc00      	bgt.n	33c16 <__aeabi_dsub+0x4e>
   33c14:	e105      	b.n	33e22 <__aeabi_dsub+0x25a>
   33c16:	2800      	cmp	r0, #0
   33c18:	d110      	bne.n	33c3c <__aeabi_dsub+0x74>
   33c1a:	000b      	movs	r3, r1
   33c1c:	4313      	orrs	r3, r2
   33c1e:	d100      	bne.n	33c22 <__aeabi_dsub+0x5a>
   33c20:	e0d7      	b.n	33dd2 <__aeabi_dsub+0x20a>
   33c22:	1e6b      	subs	r3, r5, #1
   33c24:	2b00      	cmp	r3, #0
   33c26:	d000      	beq.n	33c2a <__aeabi_dsub+0x62>
   33c28:	e14b      	b.n	33ec2 <__aeabi_dsub+0x2fa>
   33c2a:	4653      	mov	r3, sl
   33c2c:	1a9f      	subs	r7, r3, r2
   33c2e:	45ba      	cmp	sl, r7
   33c30:	4180      	sbcs	r0, r0
   33c32:	1a64      	subs	r4, r4, r1
   33c34:	4240      	negs	r0, r0
   33c36:	1a24      	subs	r4, r4, r0
   33c38:	2601      	movs	r6, #1
   33c3a:	e01e      	b.n	33c7a <__aeabi_dsub+0xb2>
   33c3c:	4bb3      	ldr	r3, [pc, #716]	; (33f0c <__aeabi_dsub+0x344>)
   33c3e:	429e      	cmp	r6, r3
   33c40:	d048      	beq.n	33cd4 <__aeabi_dsub+0x10c>
   33c42:	2380      	movs	r3, #128	; 0x80
   33c44:	041b      	lsls	r3, r3, #16
   33c46:	4319      	orrs	r1, r3
   33c48:	2d38      	cmp	r5, #56	; 0x38
   33c4a:	dd00      	ble.n	33c4e <__aeabi_dsub+0x86>
   33c4c:	e119      	b.n	33e82 <__aeabi_dsub+0x2ba>
   33c4e:	2d1f      	cmp	r5, #31
   33c50:	dd00      	ble.n	33c54 <__aeabi_dsub+0x8c>
   33c52:	e14c      	b.n	33eee <__aeabi_dsub+0x326>
   33c54:	2320      	movs	r3, #32
   33c56:	000f      	movs	r7, r1
   33c58:	1b5b      	subs	r3, r3, r5
   33c5a:	0010      	movs	r0, r2
   33c5c:	409a      	lsls	r2, r3
   33c5e:	409f      	lsls	r7, r3
   33c60:	40e8      	lsrs	r0, r5
   33c62:	1e53      	subs	r3, r2, #1
   33c64:	419a      	sbcs	r2, r3
   33c66:	40e9      	lsrs	r1, r5
   33c68:	4307      	orrs	r7, r0
   33c6a:	4317      	orrs	r7, r2
   33c6c:	4653      	mov	r3, sl
   33c6e:	1bdf      	subs	r7, r3, r7
   33c70:	1a61      	subs	r1, r4, r1
   33c72:	45ba      	cmp	sl, r7
   33c74:	41a4      	sbcs	r4, r4
   33c76:	4264      	negs	r4, r4
   33c78:	1b0c      	subs	r4, r1, r4
   33c7a:	0223      	lsls	r3, r4, #8
   33c7c:	d400      	bmi.n	33c80 <__aeabi_dsub+0xb8>
   33c7e:	e0c5      	b.n	33e0c <__aeabi_dsub+0x244>
   33c80:	0264      	lsls	r4, r4, #9
   33c82:	0a65      	lsrs	r5, r4, #9
   33c84:	2d00      	cmp	r5, #0
   33c86:	d100      	bne.n	33c8a <__aeabi_dsub+0xc2>
   33c88:	e0f6      	b.n	33e78 <__aeabi_dsub+0x2b0>
   33c8a:	0028      	movs	r0, r5
   33c8c:	f000 fb58 	bl	34340 <__clzsi2>
   33c90:	0003      	movs	r3, r0
   33c92:	3b08      	subs	r3, #8
   33c94:	2b1f      	cmp	r3, #31
   33c96:	dd00      	ble.n	33c9a <__aeabi_dsub+0xd2>
   33c98:	e0e9      	b.n	33e6e <__aeabi_dsub+0x2a6>
   33c9a:	2220      	movs	r2, #32
   33c9c:	003c      	movs	r4, r7
   33c9e:	1ad2      	subs	r2, r2, r3
   33ca0:	409d      	lsls	r5, r3
   33ca2:	40d4      	lsrs	r4, r2
   33ca4:	409f      	lsls	r7, r3
   33ca6:	4325      	orrs	r5, r4
   33ca8:	429e      	cmp	r6, r3
   33caa:	dd00      	ble.n	33cae <__aeabi_dsub+0xe6>
   33cac:	e0db      	b.n	33e66 <__aeabi_dsub+0x29e>
   33cae:	1b9e      	subs	r6, r3, r6
   33cb0:	1c73      	adds	r3, r6, #1
   33cb2:	2b1f      	cmp	r3, #31
   33cb4:	dd00      	ble.n	33cb8 <__aeabi_dsub+0xf0>
   33cb6:	e10a      	b.n	33ece <__aeabi_dsub+0x306>
   33cb8:	2220      	movs	r2, #32
   33cba:	0038      	movs	r0, r7
   33cbc:	1ad2      	subs	r2, r2, r3
   33cbe:	0029      	movs	r1, r5
   33cc0:	4097      	lsls	r7, r2
   33cc2:	002c      	movs	r4, r5
   33cc4:	4091      	lsls	r1, r2
   33cc6:	40d8      	lsrs	r0, r3
   33cc8:	1e7a      	subs	r2, r7, #1
   33cca:	4197      	sbcs	r7, r2
   33ccc:	40dc      	lsrs	r4, r3
   33cce:	2600      	movs	r6, #0
   33cd0:	4301      	orrs	r1, r0
   33cd2:	430f      	orrs	r7, r1
   33cd4:	077b      	lsls	r3, r7, #29
   33cd6:	d009      	beq.n	33cec <__aeabi_dsub+0x124>
   33cd8:	230f      	movs	r3, #15
   33cda:	403b      	ands	r3, r7
   33cdc:	2b04      	cmp	r3, #4
   33cde:	d005      	beq.n	33cec <__aeabi_dsub+0x124>
   33ce0:	1d3b      	adds	r3, r7, #4
   33ce2:	42bb      	cmp	r3, r7
   33ce4:	41bf      	sbcs	r7, r7
   33ce6:	427f      	negs	r7, r7
   33ce8:	19e4      	adds	r4, r4, r7
   33cea:	001f      	movs	r7, r3
   33cec:	0223      	lsls	r3, r4, #8
   33cee:	d525      	bpl.n	33d3c <__aeabi_dsub+0x174>
   33cf0:	4b86      	ldr	r3, [pc, #536]	; (33f0c <__aeabi_dsub+0x344>)
   33cf2:	3601      	adds	r6, #1
   33cf4:	429e      	cmp	r6, r3
   33cf6:	d100      	bne.n	33cfa <__aeabi_dsub+0x132>
   33cf8:	e0af      	b.n	33e5a <__aeabi_dsub+0x292>
   33cfa:	4b85      	ldr	r3, [pc, #532]	; (33f10 <__aeabi_dsub+0x348>)
   33cfc:	2501      	movs	r5, #1
   33cfe:	401c      	ands	r4, r3
   33d00:	4643      	mov	r3, r8
   33d02:	0762      	lsls	r2, r4, #29
   33d04:	08ff      	lsrs	r7, r7, #3
   33d06:	0264      	lsls	r4, r4, #9
   33d08:	0576      	lsls	r6, r6, #21
   33d0a:	4317      	orrs	r7, r2
   33d0c:	0b24      	lsrs	r4, r4, #12
   33d0e:	0d76      	lsrs	r6, r6, #21
   33d10:	401d      	ands	r5, r3
   33d12:	2100      	movs	r1, #0
   33d14:	0324      	lsls	r4, r4, #12
   33d16:	0b23      	lsrs	r3, r4, #12
   33d18:	0d0c      	lsrs	r4, r1, #20
   33d1a:	4a7e      	ldr	r2, [pc, #504]	; (33f14 <__aeabi_dsub+0x34c>)
   33d1c:	0524      	lsls	r4, r4, #20
   33d1e:	431c      	orrs	r4, r3
   33d20:	4014      	ands	r4, r2
   33d22:	0533      	lsls	r3, r6, #20
   33d24:	4323      	orrs	r3, r4
   33d26:	005b      	lsls	r3, r3, #1
   33d28:	07ed      	lsls	r5, r5, #31
   33d2a:	085b      	lsrs	r3, r3, #1
   33d2c:	432b      	orrs	r3, r5
   33d2e:	0038      	movs	r0, r7
   33d30:	0019      	movs	r1, r3
   33d32:	bc1c      	pop	{r2, r3, r4}
   33d34:	4690      	mov	r8, r2
   33d36:	4699      	mov	r9, r3
   33d38:	46a2      	mov	sl, r4
   33d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33d3c:	2501      	movs	r5, #1
   33d3e:	4643      	mov	r3, r8
   33d40:	0762      	lsls	r2, r4, #29
   33d42:	08ff      	lsrs	r7, r7, #3
   33d44:	4317      	orrs	r7, r2
   33d46:	08e4      	lsrs	r4, r4, #3
   33d48:	401d      	ands	r5, r3
   33d4a:	4b70      	ldr	r3, [pc, #448]	; (33f0c <__aeabi_dsub+0x344>)
   33d4c:	429e      	cmp	r6, r3
   33d4e:	d036      	beq.n	33dbe <__aeabi_dsub+0x1f6>
   33d50:	0324      	lsls	r4, r4, #12
   33d52:	0576      	lsls	r6, r6, #21
   33d54:	0b24      	lsrs	r4, r4, #12
   33d56:	0d76      	lsrs	r6, r6, #21
   33d58:	e7db      	b.n	33d12 <__aeabi_dsub+0x14a>
   33d5a:	4663      	mov	r3, ip
   33d5c:	1af3      	subs	r3, r6, r3
   33d5e:	2b00      	cmp	r3, #0
   33d60:	dc00      	bgt.n	33d64 <__aeabi_dsub+0x19c>
   33d62:	e094      	b.n	33e8e <__aeabi_dsub+0x2c6>
   33d64:	4660      	mov	r0, ip
   33d66:	2800      	cmp	r0, #0
   33d68:	d035      	beq.n	33dd6 <__aeabi_dsub+0x20e>
   33d6a:	4868      	ldr	r0, [pc, #416]	; (33f0c <__aeabi_dsub+0x344>)
   33d6c:	4286      	cmp	r6, r0
   33d6e:	d0b1      	beq.n	33cd4 <__aeabi_dsub+0x10c>
   33d70:	2780      	movs	r7, #128	; 0x80
   33d72:	043f      	lsls	r7, r7, #16
   33d74:	4339      	orrs	r1, r7
   33d76:	2b38      	cmp	r3, #56	; 0x38
   33d78:	dc00      	bgt.n	33d7c <__aeabi_dsub+0x1b4>
   33d7a:	e0fd      	b.n	33f78 <__aeabi_dsub+0x3b0>
   33d7c:	430a      	orrs	r2, r1
   33d7e:	0017      	movs	r7, r2
   33d80:	2100      	movs	r1, #0
   33d82:	1e7a      	subs	r2, r7, #1
   33d84:	4197      	sbcs	r7, r2
   33d86:	4457      	add	r7, sl
   33d88:	4557      	cmp	r7, sl
   33d8a:	4180      	sbcs	r0, r0
   33d8c:	1909      	adds	r1, r1, r4
   33d8e:	4244      	negs	r4, r0
   33d90:	190c      	adds	r4, r1, r4
   33d92:	0223      	lsls	r3, r4, #8
   33d94:	d53a      	bpl.n	33e0c <__aeabi_dsub+0x244>
   33d96:	4b5d      	ldr	r3, [pc, #372]	; (33f0c <__aeabi_dsub+0x344>)
   33d98:	3601      	adds	r6, #1
   33d9a:	429e      	cmp	r6, r3
   33d9c:	d100      	bne.n	33da0 <__aeabi_dsub+0x1d8>
   33d9e:	e14b      	b.n	34038 <__aeabi_dsub+0x470>
   33da0:	2201      	movs	r2, #1
   33da2:	4b5b      	ldr	r3, [pc, #364]	; (33f10 <__aeabi_dsub+0x348>)
   33da4:	401c      	ands	r4, r3
   33da6:	087b      	lsrs	r3, r7, #1
   33da8:	4017      	ands	r7, r2
   33daa:	431f      	orrs	r7, r3
   33dac:	07e2      	lsls	r2, r4, #31
   33dae:	4317      	orrs	r7, r2
   33db0:	0864      	lsrs	r4, r4, #1
   33db2:	e78f      	b.n	33cd4 <__aeabi_dsub+0x10c>
   33db4:	0008      	movs	r0, r1
   33db6:	4310      	orrs	r0, r2
   33db8:	d000      	beq.n	33dbc <__aeabi_dsub+0x1f4>
   33dba:	e724      	b.n	33c06 <__aeabi_dsub+0x3e>
   33dbc:	e721      	b.n	33c02 <__aeabi_dsub+0x3a>
   33dbe:	0023      	movs	r3, r4
   33dc0:	433b      	orrs	r3, r7
   33dc2:	d100      	bne.n	33dc6 <__aeabi_dsub+0x1fe>
   33dc4:	e1b9      	b.n	3413a <__aeabi_dsub+0x572>
   33dc6:	2280      	movs	r2, #128	; 0x80
   33dc8:	0312      	lsls	r2, r2, #12
   33dca:	4314      	orrs	r4, r2
   33dcc:	0324      	lsls	r4, r4, #12
   33dce:	0b24      	lsrs	r4, r4, #12
   33dd0:	e79f      	b.n	33d12 <__aeabi_dsub+0x14a>
   33dd2:	002e      	movs	r6, r5
   33dd4:	e77e      	b.n	33cd4 <__aeabi_dsub+0x10c>
   33dd6:	0008      	movs	r0, r1
   33dd8:	4310      	orrs	r0, r2
   33dda:	d100      	bne.n	33dde <__aeabi_dsub+0x216>
   33ddc:	e0ca      	b.n	33f74 <__aeabi_dsub+0x3ac>
   33dde:	1e58      	subs	r0, r3, #1
   33de0:	4684      	mov	ip, r0
   33de2:	2800      	cmp	r0, #0
   33de4:	d000      	beq.n	33de8 <__aeabi_dsub+0x220>
   33de6:	e0e7      	b.n	33fb8 <__aeabi_dsub+0x3f0>
   33de8:	4452      	add	r2, sl
   33dea:	4552      	cmp	r2, sl
   33dec:	4180      	sbcs	r0, r0
   33dee:	1864      	adds	r4, r4, r1
   33df0:	4240      	negs	r0, r0
   33df2:	1824      	adds	r4, r4, r0
   33df4:	0017      	movs	r7, r2
   33df6:	2601      	movs	r6, #1
   33df8:	0223      	lsls	r3, r4, #8
   33dfa:	d507      	bpl.n	33e0c <__aeabi_dsub+0x244>
   33dfc:	2602      	movs	r6, #2
   33dfe:	e7cf      	b.n	33da0 <__aeabi_dsub+0x1d8>
   33e00:	4664      	mov	r4, ip
   33e02:	432c      	orrs	r4, r5
   33e04:	d100      	bne.n	33e08 <__aeabi_dsub+0x240>
   33e06:	e1b3      	b.n	34170 <__aeabi_dsub+0x5a8>
   33e08:	002c      	movs	r4, r5
   33e0a:	4667      	mov	r7, ip
   33e0c:	077b      	lsls	r3, r7, #29
   33e0e:	d000      	beq.n	33e12 <__aeabi_dsub+0x24a>
   33e10:	e762      	b.n	33cd8 <__aeabi_dsub+0x110>
   33e12:	0763      	lsls	r3, r4, #29
   33e14:	08ff      	lsrs	r7, r7, #3
   33e16:	431f      	orrs	r7, r3
   33e18:	2501      	movs	r5, #1
   33e1a:	4643      	mov	r3, r8
   33e1c:	08e4      	lsrs	r4, r4, #3
   33e1e:	401d      	ands	r5, r3
   33e20:	e793      	b.n	33d4a <__aeabi_dsub+0x182>
   33e22:	2d00      	cmp	r5, #0
   33e24:	d178      	bne.n	33f18 <__aeabi_dsub+0x350>
   33e26:	1c75      	adds	r5, r6, #1
   33e28:	056d      	lsls	r5, r5, #21
   33e2a:	0d6d      	lsrs	r5, r5, #21
   33e2c:	2d01      	cmp	r5, #1
   33e2e:	dc00      	bgt.n	33e32 <__aeabi_dsub+0x26a>
   33e30:	e0f2      	b.n	34018 <__aeabi_dsub+0x450>
   33e32:	4650      	mov	r0, sl
   33e34:	1a80      	subs	r0, r0, r2
   33e36:	4582      	cmp	sl, r0
   33e38:	41bf      	sbcs	r7, r7
   33e3a:	1a65      	subs	r5, r4, r1
   33e3c:	427f      	negs	r7, r7
   33e3e:	1bed      	subs	r5, r5, r7
   33e40:	4684      	mov	ip, r0
   33e42:	0228      	lsls	r0, r5, #8
   33e44:	d400      	bmi.n	33e48 <__aeabi_dsub+0x280>
   33e46:	e08c      	b.n	33f62 <__aeabi_dsub+0x39a>
   33e48:	4650      	mov	r0, sl
   33e4a:	1a17      	subs	r7, r2, r0
   33e4c:	42ba      	cmp	r2, r7
   33e4e:	4192      	sbcs	r2, r2
   33e50:	1b0c      	subs	r4, r1, r4
   33e52:	4255      	negs	r5, r2
   33e54:	1b65      	subs	r5, r4, r5
   33e56:	4698      	mov	r8, r3
   33e58:	e714      	b.n	33c84 <__aeabi_dsub+0xbc>
   33e5a:	2501      	movs	r5, #1
   33e5c:	4643      	mov	r3, r8
   33e5e:	2400      	movs	r4, #0
   33e60:	401d      	ands	r5, r3
   33e62:	2700      	movs	r7, #0
   33e64:	e755      	b.n	33d12 <__aeabi_dsub+0x14a>
   33e66:	4c2a      	ldr	r4, [pc, #168]	; (33f10 <__aeabi_dsub+0x348>)
   33e68:	1af6      	subs	r6, r6, r3
   33e6a:	402c      	ands	r4, r5
   33e6c:	e732      	b.n	33cd4 <__aeabi_dsub+0x10c>
   33e6e:	003d      	movs	r5, r7
   33e70:	3828      	subs	r0, #40	; 0x28
   33e72:	4085      	lsls	r5, r0
   33e74:	2700      	movs	r7, #0
   33e76:	e717      	b.n	33ca8 <__aeabi_dsub+0xe0>
   33e78:	0038      	movs	r0, r7
   33e7a:	f000 fa61 	bl	34340 <__clzsi2>
   33e7e:	3020      	adds	r0, #32
   33e80:	e706      	b.n	33c90 <__aeabi_dsub+0xc8>
   33e82:	430a      	orrs	r2, r1
   33e84:	0017      	movs	r7, r2
   33e86:	2100      	movs	r1, #0
   33e88:	1e7a      	subs	r2, r7, #1
   33e8a:	4197      	sbcs	r7, r2
   33e8c:	e6ee      	b.n	33c6c <__aeabi_dsub+0xa4>
   33e8e:	2b00      	cmp	r3, #0
   33e90:	d000      	beq.n	33e94 <__aeabi_dsub+0x2cc>
   33e92:	e0e5      	b.n	34060 <__aeabi_dsub+0x498>
   33e94:	1c73      	adds	r3, r6, #1
   33e96:	469c      	mov	ip, r3
   33e98:	055b      	lsls	r3, r3, #21
   33e9a:	0d5b      	lsrs	r3, r3, #21
   33e9c:	2b01      	cmp	r3, #1
   33e9e:	dc00      	bgt.n	33ea2 <__aeabi_dsub+0x2da>
   33ea0:	e09f      	b.n	33fe2 <__aeabi_dsub+0x41a>
   33ea2:	4b1a      	ldr	r3, [pc, #104]	; (33f0c <__aeabi_dsub+0x344>)
   33ea4:	459c      	cmp	ip, r3
   33ea6:	d100      	bne.n	33eaa <__aeabi_dsub+0x2e2>
   33ea8:	e0c5      	b.n	34036 <__aeabi_dsub+0x46e>
   33eaa:	4452      	add	r2, sl
   33eac:	4552      	cmp	r2, sl
   33eae:	4180      	sbcs	r0, r0
   33eb0:	1864      	adds	r4, r4, r1
   33eb2:	4240      	negs	r0, r0
   33eb4:	1824      	adds	r4, r4, r0
   33eb6:	07e7      	lsls	r7, r4, #31
   33eb8:	0852      	lsrs	r2, r2, #1
   33eba:	4317      	orrs	r7, r2
   33ebc:	0864      	lsrs	r4, r4, #1
   33ebe:	4666      	mov	r6, ip
   33ec0:	e708      	b.n	33cd4 <__aeabi_dsub+0x10c>
   33ec2:	4812      	ldr	r0, [pc, #72]	; (33f0c <__aeabi_dsub+0x344>)
   33ec4:	4285      	cmp	r5, r0
   33ec6:	d100      	bne.n	33eca <__aeabi_dsub+0x302>
   33ec8:	e085      	b.n	33fd6 <__aeabi_dsub+0x40e>
   33eca:	001d      	movs	r5, r3
   33ecc:	e6bc      	b.n	33c48 <__aeabi_dsub+0x80>
   33ece:	0029      	movs	r1, r5
   33ed0:	3e1f      	subs	r6, #31
   33ed2:	40f1      	lsrs	r1, r6
   33ed4:	2b20      	cmp	r3, #32
   33ed6:	d100      	bne.n	33eda <__aeabi_dsub+0x312>
   33ed8:	e07f      	b.n	33fda <__aeabi_dsub+0x412>
   33eda:	2240      	movs	r2, #64	; 0x40
   33edc:	1ad3      	subs	r3, r2, r3
   33ede:	409d      	lsls	r5, r3
   33ee0:	432f      	orrs	r7, r5
   33ee2:	1e7d      	subs	r5, r7, #1
   33ee4:	41af      	sbcs	r7, r5
   33ee6:	2400      	movs	r4, #0
   33ee8:	430f      	orrs	r7, r1
   33eea:	2600      	movs	r6, #0
   33eec:	e78e      	b.n	33e0c <__aeabi_dsub+0x244>
   33eee:	002b      	movs	r3, r5
   33ef0:	000f      	movs	r7, r1
   33ef2:	3b20      	subs	r3, #32
   33ef4:	40df      	lsrs	r7, r3
   33ef6:	2d20      	cmp	r5, #32
   33ef8:	d071      	beq.n	33fde <__aeabi_dsub+0x416>
   33efa:	2340      	movs	r3, #64	; 0x40
   33efc:	1b5d      	subs	r5, r3, r5
   33efe:	40a9      	lsls	r1, r5
   33f00:	430a      	orrs	r2, r1
   33f02:	1e51      	subs	r1, r2, #1
   33f04:	418a      	sbcs	r2, r1
   33f06:	2100      	movs	r1, #0
   33f08:	4317      	orrs	r7, r2
   33f0a:	e6af      	b.n	33c6c <__aeabi_dsub+0xa4>
   33f0c:	000007ff 	.word	0x000007ff
   33f10:	ff7fffff 	.word	0xff7fffff
   33f14:	800fffff 	.word	0x800fffff
   33f18:	2e00      	cmp	r6, #0
   33f1a:	d03e      	beq.n	33f9a <__aeabi_dsub+0x3d2>
   33f1c:	4eb3      	ldr	r6, [pc, #716]	; (341ec <__aeabi_dsub+0x624>)
   33f1e:	45b4      	cmp	ip, r6
   33f20:	d045      	beq.n	33fae <__aeabi_dsub+0x3e6>
   33f22:	2680      	movs	r6, #128	; 0x80
   33f24:	0436      	lsls	r6, r6, #16
   33f26:	426d      	negs	r5, r5
   33f28:	4334      	orrs	r4, r6
   33f2a:	2d38      	cmp	r5, #56	; 0x38
   33f2c:	dd00      	ble.n	33f30 <__aeabi_dsub+0x368>
   33f2e:	e0a8      	b.n	34082 <__aeabi_dsub+0x4ba>
   33f30:	2d1f      	cmp	r5, #31
   33f32:	dd00      	ble.n	33f36 <__aeabi_dsub+0x36e>
   33f34:	e11f      	b.n	34176 <__aeabi_dsub+0x5ae>
   33f36:	2620      	movs	r6, #32
   33f38:	0027      	movs	r7, r4
   33f3a:	4650      	mov	r0, sl
   33f3c:	1b76      	subs	r6, r6, r5
   33f3e:	40b7      	lsls	r7, r6
   33f40:	40e8      	lsrs	r0, r5
   33f42:	4307      	orrs	r7, r0
   33f44:	4650      	mov	r0, sl
   33f46:	40b0      	lsls	r0, r6
   33f48:	1e46      	subs	r6, r0, #1
   33f4a:	41b0      	sbcs	r0, r6
   33f4c:	40ec      	lsrs	r4, r5
   33f4e:	4338      	orrs	r0, r7
   33f50:	1a17      	subs	r7, r2, r0
   33f52:	42ba      	cmp	r2, r7
   33f54:	4192      	sbcs	r2, r2
   33f56:	1b0c      	subs	r4, r1, r4
   33f58:	4252      	negs	r2, r2
   33f5a:	1aa4      	subs	r4, r4, r2
   33f5c:	4666      	mov	r6, ip
   33f5e:	4698      	mov	r8, r3
   33f60:	e68b      	b.n	33c7a <__aeabi_dsub+0xb2>
   33f62:	4664      	mov	r4, ip
   33f64:	4667      	mov	r7, ip
   33f66:	432c      	orrs	r4, r5
   33f68:	d000      	beq.n	33f6c <__aeabi_dsub+0x3a4>
   33f6a:	e68b      	b.n	33c84 <__aeabi_dsub+0xbc>
   33f6c:	2500      	movs	r5, #0
   33f6e:	2600      	movs	r6, #0
   33f70:	2700      	movs	r7, #0
   33f72:	e6ea      	b.n	33d4a <__aeabi_dsub+0x182>
   33f74:	001e      	movs	r6, r3
   33f76:	e6ad      	b.n	33cd4 <__aeabi_dsub+0x10c>
   33f78:	2b1f      	cmp	r3, #31
   33f7a:	dc60      	bgt.n	3403e <__aeabi_dsub+0x476>
   33f7c:	2720      	movs	r7, #32
   33f7e:	1af8      	subs	r0, r7, r3
   33f80:	000f      	movs	r7, r1
   33f82:	4684      	mov	ip, r0
   33f84:	4087      	lsls	r7, r0
   33f86:	0010      	movs	r0, r2
   33f88:	40d8      	lsrs	r0, r3
   33f8a:	4307      	orrs	r7, r0
   33f8c:	4660      	mov	r0, ip
   33f8e:	4082      	lsls	r2, r0
   33f90:	1e50      	subs	r0, r2, #1
   33f92:	4182      	sbcs	r2, r0
   33f94:	40d9      	lsrs	r1, r3
   33f96:	4317      	orrs	r7, r2
   33f98:	e6f5      	b.n	33d86 <__aeabi_dsub+0x1be>
   33f9a:	0026      	movs	r6, r4
   33f9c:	4650      	mov	r0, sl
   33f9e:	4306      	orrs	r6, r0
   33fa0:	d005      	beq.n	33fae <__aeabi_dsub+0x3e6>
   33fa2:	43ed      	mvns	r5, r5
   33fa4:	2d00      	cmp	r5, #0
   33fa6:	d0d3      	beq.n	33f50 <__aeabi_dsub+0x388>
   33fa8:	4e90      	ldr	r6, [pc, #576]	; (341ec <__aeabi_dsub+0x624>)
   33faa:	45b4      	cmp	ip, r6
   33fac:	d1bd      	bne.n	33f2a <__aeabi_dsub+0x362>
   33fae:	000c      	movs	r4, r1
   33fb0:	0017      	movs	r7, r2
   33fb2:	4666      	mov	r6, ip
   33fb4:	4698      	mov	r8, r3
   33fb6:	e68d      	b.n	33cd4 <__aeabi_dsub+0x10c>
   33fb8:	488c      	ldr	r0, [pc, #560]	; (341ec <__aeabi_dsub+0x624>)
   33fba:	4283      	cmp	r3, r0
   33fbc:	d00b      	beq.n	33fd6 <__aeabi_dsub+0x40e>
   33fbe:	4663      	mov	r3, ip
   33fc0:	e6d9      	b.n	33d76 <__aeabi_dsub+0x1ae>
   33fc2:	2d00      	cmp	r5, #0
   33fc4:	d000      	beq.n	33fc8 <__aeabi_dsub+0x400>
   33fc6:	e096      	b.n	340f6 <__aeabi_dsub+0x52e>
   33fc8:	0008      	movs	r0, r1
   33fca:	4310      	orrs	r0, r2
   33fcc:	d100      	bne.n	33fd0 <__aeabi_dsub+0x408>
   33fce:	e0e2      	b.n	34196 <__aeabi_dsub+0x5ce>
   33fd0:	000c      	movs	r4, r1
   33fd2:	0017      	movs	r7, r2
   33fd4:	4698      	mov	r8, r3
   33fd6:	4e85      	ldr	r6, [pc, #532]	; (341ec <__aeabi_dsub+0x624>)
   33fd8:	e67c      	b.n	33cd4 <__aeabi_dsub+0x10c>
   33fda:	2500      	movs	r5, #0
   33fdc:	e780      	b.n	33ee0 <__aeabi_dsub+0x318>
   33fde:	2100      	movs	r1, #0
   33fe0:	e78e      	b.n	33f00 <__aeabi_dsub+0x338>
   33fe2:	0023      	movs	r3, r4
   33fe4:	4650      	mov	r0, sl
   33fe6:	4303      	orrs	r3, r0
   33fe8:	2e00      	cmp	r6, #0
   33fea:	d000      	beq.n	33fee <__aeabi_dsub+0x426>
   33fec:	e0a8      	b.n	34140 <__aeabi_dsub+0x578>
   33fee:	2b00      	cmp	r3, #0
   33ff0:	d100      	bne.n	33ff4 <__aeabi_dsub+0x42c>
   33ff2:	e0de      	b.n	341b2 <__aeabi_dsub+0x5ea>
   33ff4:	000b      	movs	r3, r1
   33ff6:	4313      	orrs	r3, r2
   33ff8:	d100      	bne.n	33ffc <__aeabi_dsub+0x434>
   33ffa:	e66b      	b.n	33cd4 <__aeabi_dsub+0x10c>
   33ffc:	4452      	add	r2, sl
   33ffe:	4552      	cmp	r2, sl
   34000:	4180      	sbcs	r0, r0
   34002:	1864      	adds	r4, r4, r1
   34004:	4240      	negs	r0, r0
   34006:	1824      	adds	r4, r4, r0
   34008:	0017      	movs	r7, r2
   3400a:	0223      	lsls	r3, r4, #8
   3400c:	d400      	bmi.n	34010 <__aeabi_dsub+0x448>
   3400e:	e6fd      	b.n	33e0c <__aeabi_dsub+0x244>
   34010:	4b77      	ldr	r3, [pc, #476]	; (341f0 <__aeabi_dsub+0x628>)
   34012:	4666      	mov	r6, ip
   34014:	401c      	ands	r4, r3
   34016:	e65d      	b.n	33cd4 <__aeabi_dsub+0x10c>
   34018:	0025      	movs	r5, r4
   3401a:	4650      	mov	r0, sl
   3401c:	4305      	orrs	r5, r0
   3401e:	2e00      	cmp	r6, #0
   34020:	d1cf      	bne.n	33fc2 <__aeabi_dsub+0x3fa>
   34022:	2d00      	cmp	r5, #0
   34024:	d14f      	bne.n	340c6 <__aeabi_dsub+0x4fe>
   34026:	000c      	movs	r4, r1
   34028:	4314      	orrs	r4, r2
   3402a:	d100      	bne.n	3402e <__aeabi_dsub+0x466>
   3402c:	e0a0      	b.n	34170 <__aeabi_dsub+0x5a8>
   3402e:	000c      	movs	r4, r1
   34030:	0017      	movs	r7, r2
   34032:	4698      	mov	r8, r3
   34034:	e64e      	b.n	33cd4 <__aeabi_dsub+0x10c>
   34036:	4666      	mov	r6, ip
   34038:	2400      	movs	r4, #0
   3403a:	2700      	movs	r7, #0
   3403c:	e685      	b.n	33d4a <__aeabi_dsub+0x182>
   3403e:	001f      	movs	r7, r3
   34040:	0008      	movs	r0, r1
   34042:	3f20      	subs	r7, #32
   34044:	40f8      	lsrs	r0, r7
   34046:	0007      	movs	r7, r0
   34048:	2b20      	cmp	r3, #32
   3404a:	d100      	bne.n	3404e <__aeabi_dsub+0x486>
   3404c:	e08e      	b.n	3416c <__aeabi_dsub+0x5a4>
   3404e:	2040      	movs	r0, #64	; 0x40
   34050:	1ac3      	subs	r3, r0, r3
   34052:	4099      	lsls	r1, r3
   34054:	430a      	orrs	r2, r1
   34056:	1e51      	subs	r1, r2, #1
   34058:	418a      	sbcs	r2, r1
   3405a:	2100      	movs	r1, #0
   3405c:	4317      	orrs	r7, r2
   3405e:	e692      	b.n	33d86 <__aeabi_dsub+0x1be>
   34060:	2e00      	cmp	r6, #0
   34062:	d114      	bne.n	3408e <__aeabi_dsub+0x4c6>
   34064:	0026      	movs	r6, r4
   34066:	4650      	mov	r0, sl
   34068:	4306      	orrs	r6, r0
   3406a:	d062      	beq.n	34132 <__aeabi_dsub+0x56a>
   3406c:	43db      	mvns	r3, r3
   3406e:	2b00      	cmp	r3, #0
   34070:	d15c      	bne.n	3412c <__aeabi_dsub+0x564>
   34072:	1887      	adds	r7, r0, r2
   34074:	4297      	cmp	r7, r2
   34076:	4192      	sbcs	r2, r2
   34078:	1864      	adds	r4, r4, r1
   3407a:	4252      	negs	r2, r2
   3407c:	18a4      	adds	r4, r4, r2
   3407e:	4666      	mov	r6, ip
   34080:	e687      	b.n	33d92 <__aeabi_dsub+0x1ca>
   34082:	4650      	mov	r0, sl
   34084:	4320      	orrs	r0, r4
   34086:	1e44      	subs	r4, r0, #1
   34088:	41a0      	sbcs	r0, r4
   3408a:	2400      	movs	r4, #0
   3408c:	e760      	b.n	33f50 <__aeabi_dsub+0x388>
   3408e:	4e57      	ldr	r6, [pc, #348]	; (341ec <__aeabi_dsub+0x624>)
   34090:	45b4      	cmp	ip, r6
   34092:	d04e      	beq.n	34132 <__aeabi_dsub+0x56a>
   34094:	2680      	movs	r6, #128	; 0x80
   34096:	0436      	lsls	r6, r6, #16
   34098:	425b      	negs	r3, r3
   3409a:	4334      	orrs	r4, r6
   3409c:	2b38      	cmp	r3, #56	; 0x38
   3409e:	dd00      	ble.n	340a2 <__aeabi_dsub+0x4da>
   340a0:	e07f      	b.n	341a2 <__aeabi_dsub+0x5da>
   340a2:	2b1f      	cmp	r3, #31
   340a4:	dd00      	ble.n	340a8 <__aeabi_dsub+0x4e0>
   340a6:	e08b      	b.n	341c0 <__aeabi_dsub+0x5f8>
   340a8:	2620      	movs	r6, #32
   340aa:	0027      	movs	r7, r4
   340ac:	4650      	mov	r0, sl
   340ae:	1af6      	subs	r6, r6, r3
   340b0:	40b7      	lsls	r7, r6
   340b2:	40d8      	lsrs	r0, r3
   340b4:	4307      	orrs	r7, r0
   340b6:	4650      	mov	r0, sl
   340b8:	40b0      	lsls	r0, r6
   340ba:	1e46      	subs	r6, r0, #1
   340bc:	41b0      	sbcs	r0, r6
   340be:	4307      	orrs	r7, r0
   340c0:	40dc      	lsrs	r4, r3
   340c2:	18bf      	adds	r7, r7, r2
   340c4:	e7d6      	b.n	34074 <__aeabi_dsub+0x4ac>
   340c6:	000d      	movs	r5, r1
   340c8:	4315      	orrs	r5, r2
   340ca:	d100      	bne.n	340ce <__aeabi_dsub+0x506>
   340cc:	e602      	b.n	33cd4 <__aeabi_dsub+0x10c>
   340ce:	4650      	mov	r0, sl
   340d0:	1a80      	subs	r0, r0, r2
   340d2:	4582      	cmp	sl, r0
   340d4:	41bf      	sbcs	r7, r7
   340d6:	1a65      	subs	r5, r4, r1
   340d8:	427f      	negs	r7, r7
   340da:	1bed      	subs	r5, r5, r7
   340dc:	4684      	mov	ip, r0
   340de:	0228      	lsls	r0, r5, #8
   340e0:	d400      	bmi.n	340e4 <__aeabi_dsub+0x51c>
   340e2:	e68d      	b.n	33e00 <__aeabi_dsub+0x238>
   340e4:	4650      	mov	r0, sl
   340e6:	1a17      	subs	r7, r2, r0
   340e8:	42ba      	cmp	r2, r7
   340ea:	4192      	sbcs	r2, r2
   340ec:	1b0c      	subs	r4, r1, r4
   340ee:	4252      	negs	r2, r2
   340f0:	1aa4      	subs	r4, r4, r2
   340f2:	4698      	mov	r8, r3
   340f4:	e5ee      	b.n	33cd4 <__aeabi_dsub+0x10c>
   340f6:	000d      	movs	r5, r1
   340f8:	4315      	orrs	r5, r2
   340fa:	d100      	bne.n	340fe <__aeabi_dsub+0x536>
   340fc:	e76b      	b.n	33fd6 <__aeabi_dsub+0x40e>
   340fe:	4650      	mov	r0, sl
   34100:	0767      	lsls	r7, r4, #29
   34102:	08c0      	lsrs	r0, r0, #3
   34104:	4307      	orrs	r7, r0
   34106:	2080      	movs	r0, #128	; 0x80
   34108:	08e4      	lsrs	r4, r4, #3
   3410a:	0300      	lsls	r0, r0, #12
   3410c:	4204      	tst	r4, r0
   3410e:	d007      	beq.n	34120 <__aeabi_dsub+0x558>
   34110:	08cd      	lsrs	r5, r1, #3
   34112:	4205      	tst	r5, r0
   34114:	d104      	bne.n	34120 <__aeabi_dsub+0x558>
   34116:	002c      	movs	r4, r5
   34118:	4698      	mov	r8, r3
   3411a:	08d7      	lsrs	r7, r2, #3
   3411c:	0749      	lsls	r1, r1, #29
   3411e:	430f      	orrs	r7, r1
   34120:	0f7b      	lsrs	r3, r7, #29
   34122:	00e4      	lsls	r4, r4, #3
   34124:	431c      	orrs	r4, r3
   34126:	00ff      	lsls	r7, r7, #3
   34128:	4e30      	ldr	r6, [pc, #192]	; (341ec <__aeabi_dsub+0x624>)
   3412a:	e5d3      	b.n	33cd4 <__aeabi_dsub+0x10c>
   3412c:	4e2f      	ldr	r6, [pc, #188]	; (341ec <__aeabi_dsub+0x624>)
   3412e:	45b4      	cmp	ip, r6
   34130:	d1b4      	bne.n	3409c <__aeabi_dsub+0x4d4>
   34132:	000c      	movs	r4, r1
   34134:	0017      	movs	r7, r2
   34136:	4666      	mov	r6, ip
   34138:	e5cc      	b.n	33cd4 <__aeabi_dsub+0x10c>
   3413a:	2700      	movs	r7, #0
   3413c:	2400      	movs	r4, #0
   3413e:	e5e8      	b.n	33d12 <__aeabi_dsub+0x14a>
   34140:	2b00      	cmp	r3, #0
   34142:	d039      	beq.n	341b8 <__aeabi_dsub+0x5f0>
   34144:	000b      	movs	r3, r1
   34146:	4313      	orrs	r3, r2
   34148:	d100      	bne.n	3414c <__aeabi_dsub+0x584>
   3414a:	e744      	b.n	33fd6 <__aeabi_dsub+0x40e>
   3414c:	08c0      	lsrs	r0, r0, #3
   3414e:	0767      	lsls	r7, r4, #29
   34150:	4307      	orrs	r7, r0
   34152:	2080      	movs	r0, #128	; 0x80
   34154:	08e4      	lsrs	r4, r4, #3
   34156:	0300      	lsls	r0, r0, #12
   34158:	4204      	tst	r4, r0
   3415a:	d0e1      	beq.n	34120 <__aeabi_dsub+0x558>
   3415c:	08cb      	lsrs	r3, r1, #3
   3415e:	4203      	tst	r3, r0
   34160:	d1de      	bne.n	34120 <__aeabi_dsub+0x558>
   34162:	08d7      	lsrs	r7, r2, #3
   34164:	0749      	lsls	r1, r1, #29
   34166:	430f      	orrs	r7, r1
   34168:	001c      	movs	r4, r3
   3416a:	e7d9      	b.n	34120 <__aeabi_dsub+0x558>
   3416c:	2100      	movs	r1, #0
   3416e:	e771      	b.n	34054 <__aeabi_dsub+0x48c>
   34170:	2500      	movs	r5, #0
   34172:	2700      	movs	r7, #0
   34174:	e5e9      	b.n	33d4a <__aeabi_dsub+0x182>
   34176:	002e      	movs	r6, r5
   34178:	0027      	movs	r7, r4
   3417a:	3e20      	subs	r6, #32
   3417c:	40f7      	lsrs	r7, r6
   3417e:	2d20      	cmp	r5, #32
   34180:	d02f      	beq.n	341e2 <__aeabi_dsub+0x61a>
   34182:	2640      	movs	r6, #64	; 0x40
   34184:	1b75      	subs	r5, r6, r5
   34186:	40ac      	lsls	r4, r5
   34188:	4650      	mov	r0, sl
   3418a:	4320      	orrs	r0, r4
   3418c:	1e44      	subs	r4, r0, #1
   3418e:	41a0      	sbcs	r0, r4
   34190:	2400      	movs	r4, #0
   34192:	4338      	orrs	r0, r7
   34194:	e6dc      	b.n	33f50 <__aeabi_dsub+0x388>
   34196:	2480      	movs	r4, #128	; 0x80
   34198:	2500      	movs	r5, #0
   3419a:	0324      	lsls	r4, r4, #12
   3419c:	4e13      	ldr	r6, [pc, #76]	; (341ec <__aeabi_dsub+0x624>)
   3419e:	2700      	movs	r7, #0
   341a0:	e5d3      	b.n	33d4a <__aeabi_dsub+0x182>
   341a2:	4650      	mov	r0, sl
   341a4:	4320      	orrs	r0, r4
   341a6:	0007      	movs	r7, r0
   341a8:	1e78      	subs	r0, r7, #1
   341aa:	4187      	sbcs	r7, r0
   341ac:	2400      	movs	r4, #0
   341ae:	18bf      	adds	r7, r7, r2
   341b0:	e760      	b.n	34074 <__aeabi_dsub+0x4ac>
   341b2:	000c      	movs	r4, r1
   341b4:	0017      	movs	r7, r2
   341b6:	e58d      	b.n	33cd4 <__aeabi_dsub+0x10c>
   341b8:	000c      	movs	r4, r1
   341ba:	0017      	movs	r7, r2
   341bc:	4e0b      	ldr	r6, [pc, #44]	; (341ec <__aeabi_dsub+0x624>)
   341be:	e589      	b.n	33cd4 <__aeabi_dsub+0x10c>
   341c0:	001e      	movs	r6, r3
   341c2:	0027      	movs	r7, r4
   341c4:	3e20      	subs	r6, #32
   341c6:	40f7      	lsrs	r7, r6
   341c8:	2b20      	cmp	r3, #32
   341ca:	d00c      	beq.n	341e6 <__aeabi_dsub+0x61e>
   341cc:	2640      	movs	r6, #64	; 0x40
   341ce:	1af3      	subs	r3, r6, r3
   341d0:	409c      	lsls	r4, r3
   341d2:	4650      	mov	r0, sl
   341d4:	4320      	orrs	r0, r4
   341d6:	1e44      	subs	r4, r0, #1
   341d8:	41a0      	sbcs	r0, r4
   341da:	4307      	orrs	r7, r0
   341dc:	2400      	movs	r4, #0
   341de:	18bf      	adds	r7, r7, r2
   341e0:	e748      	b.n	34074 <__aeabi_dsub+0x4ac>
   341e2:	2400      	movs	r4, #0
   341e4:	e7d0      	b.n	34188 <__aeabi_dsub+0x5c0>
   341e6:	2400      	movs	r4, #0
   341e8:	e7f3      	b.n	341d2 <__aeabi_dsub+0x60a>
   341ea:	46c0      	nop			; (mov r8, r8)
   341ec:	000007ff 	.word	0x000007ff
   341f0:	ff7fffff 	.word	0xff7fffff

000341f4 <__aeabi_d2iz>:
   341f4:	b530      	push	{r4, r5, lr}
   341f6:	4d13      	ldr	r5, [pc, #76]	; (34244 <__aeabi_d2iz+0x50>)
   341f8:	030a      	lsls	r2, r1, #12
   341fa:	004b      	lsls	r3, r1, #1
   341fc:	0b12      	lsrs	r2, r2, #12
   341fe:	0d5b      	lsrs	r3, r3, #21
   34200:	0fc9      	lsrs	r1, r1, #31
   34202:	2400      	movs	r4, #0
   34204:	42ab      	cmp	r3, r5
   34206:	dd10      	ble.n	3422a <__aeabi_d2iz+0x36>
   34208:	4c0f      	ldr	r4, [pc, #60]	; (34248 <__aeabi_d2iz+0x54>)
   3420a:	42a3      	cmp	r3, r4
   3420c:	dc0f      	bgt.n	3422e <__aeabi_d2iz+0x3a>
   3420e:	2480      	movs	r4, #128	; 0x80
   34210:	4d0e      	ldr	r5, [pc, #56]	; (3424c <__aeabi_d2iz+0x58>)
   34212:	0364      	lsls	r4, r4, #13
   34214:	4322      	orrs	r2, r4
   34216:	1aed      	subs	r5, r5, r3
   34218:	2d1f      	cmp	r5, #31
   3421a:	dd0b      	ble.n	34234 <__aeabi_d2iz+0x40>
   3421c:	480c      	ldr	r0, [pc, #48]	; (34250 <__aeabi_d2iz+0x5c>)
   3421e:	1ac3      	subs	r3, r0, r3
   34220:	40da      	lsrs	r2, r3
   34222:	4254      	negs	r4, r2
   34224:	2900      	cmp	r1, #0
   34226:	d100      	bne.n	3422a <__aeabi_d2iz+0x36>
   34228:	0014      	movs	r4, r2
   3422a:	0020      	movs	r0, r4
   3422c:	bd30      	pop	{r4, r5, pc}
   3422e:	4b09      	ldr	r3, [pc, #36]	; (34254 <__aeabi_d2iz+0x60>)
   34230:	18cc      	adds	r4, r1, r3
   34232:	e7fa      	b.n	3422a <__aeabi_d2iz+0x36>
   34234:	4c08      	ldr	r4, [pc, #32]	; (34258 <__aeabi_d2iz+0x64>)
   34236:	40e8      	lsrs	r0, r5
   34238:	46a4      	mov	ip, r4
   3423a:	4463      	add	r3, ip
   3423c:	409a      	lsls	r2, r3
   3423e:	4302      	orrs	r2, r0
   34240:	e7ef      	b.n	34222 <__aeabi_d2iz+0x2e>
   34242:	46c0      	nop			; (mov r8, r8)
   34244:	000003fe 	.word	0x000003fe
   34248:	0000041d 	.word	0x0000041d
   3424c:	00000433 	.word	0x00000433
   34250:	00000413 	.word	0x00000413
   34254:	7fffffff 	.word	0x7fffffff
   34258:	fffffbed 	.word	0xfffffbed

0003425c <__aeabi_ui2d>:
   3425c:	b510      	push	{r4, lr}
   3425e:	1e04      	subs	r4, r0, #0
   34260:	d028      	beq.n	342b4 <__aeabi_ui2d+0x58>
   34262:	f000 f86d 	bl	34340 <__clzsi2>
   34266:	4b15      	ldr	r3, [pc, #84]	; (342bc <__aeabi_ui2d+0x60>)
   34268:	4a15      	ldr	r2, [pc, #84]	; (342c0 <__aeabi_ui2d+0x64>)
   3426a:	1a1b      	subs	r3, r3, r0
   3426c:	1ad2      	subs	r2, r2, r3
   3426e:	2a1f      	cmp	r2, #31
   34270:	dd15      	ble.n	3429e <__aeabi_ui2d+0x42>
   34272:	4a14      	ldr	r2, [pc, #80]	; (342c4 <__aeabi_ui2d+0x68>)
   34274:	1ad2      	subs	r2, r2, r3
   34276:	4094      	lsls	r4, r2
   34278:	2200      	movs	r2, #0
   3427a:	0324      	lsls	r4, r4, #12
   3427c:	055b      	lsls	r3, r3, #21
   3427e:	0b24      	lsrs	r4, r4, #12
   34280:	0d5b      	lsrs	r3, r3, #21
   34282:	2100      	movs	r1, #0
   34284:	0010      	movs	r0, r2
   34286:	0324      	lsls	r4, r4, #12
   34288:	0d0a      	lsrs	r2, r1, #20
   3428a:	0b24      	lsrs	r4, r4, #12
   3428c:	0512      	lsls	r2, r2, #20
   3428e:	4322      	orrs	r2, r4
   34290:	4c0d      	ldr	r4, [pc, #52]	; (342c8 <__aeabi_ui2d+0x6c>)
   34292:	051b      	lsls	r3, r3, #20
   34294:	4022      	ands	r2, r4
   34296:	4313      	orrs	r3, r2
   34298:	005b      	lsls	r3, r3, #1
   3429a:	0859      	lsrs	r1, r3, #1
   3429c:	bd10      	pop	{r4, pc}
   3429e:	0021      	movs	r1, r4
   342a0:	4091      	lsls	r1, r2
   342a2:	000a      	movs	r2, r1
   342a4:	210b      	movs	r1, #11
   342a6:	1a08      	subs	r0, r1, r0
   342a8:	40c4      	lsrs	r4, r0
   342aa:	055b      	lsls	r3, r3, #21
   342ac:	0324      	lsls	r4, r4, #12
   342ae:	0b24      	lsrs	r4, r4, #12
   342b0:	0d5b      	lsrs	r3, r3, #21
   342b2:	e7e6      	b.n	34282 <__aeabi_ui2d+0x26>
   342b4:	2300      	movs	r3, #0
   342b6:	2400      	movs	r4, #0
   342b8:	2200      	movs	r2, #0
   342ba:	e7e2      	b.n	34282 <__aeabi_ui2d+0x26>
   342bc:	0000041e 	.word	0x0000041e
   342c0:	00000433 	.word	0x00000433
   342c4:	00000413 	.word	0x00000413
   342c8:	800fffff 	.word	0x800fffff

000342cc <__aeabi_cfrcmple>:
   342cc:	4684      	mov	ip, r0
   342ce:	1c08      	adds	r0, r1, #0
   342d0:	4661      	mov	r1, ip
   342d2:	e7ff      	b.n	342d4 <__aeabi_cfcmpeq>

000342d4 <__aeabi_cfcmpeq>:
   342d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   342d6:	f000 f8b7 	bl	34448 <__lesf2>
   342da:	2800      	cmp	r0, #0
   342dc:	d401      	bmi.n	342e2 <__aeabi_cfcmpeq+0xe>
   342de:	2100      	movs	r1, #0
   342e0:	42c8      	cmn	r0, r1
   342e2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000342e4 <__aeabi_fcmpeq>:
   342e4:	b510      	push	{r4, lr}
   342e6:	f000 f849 	bl	3437c <__eqsf2>
   342ea:	4240      	negs	r0, r0
   342ec:	3001      	adds	r0, #1
   342ee:	bd10      	pop	{r4, pc}

000342f0 <__aeabi_fcmplt>:
   342f0:	b510      	push	{r4, lr}
   342f2:	f000 f8a9 	bl	34448 <__lesf2>
   342f6:	2800      	cmp	r0, #0
   342f8:	db01      	blt.n	342fe <__aeabi_fcmplt+0xe>
   342fa:	2000      	movs	r0, #0
   342fc:	bd10      	pop	{r4, pc}
   342fe:	2001      	movs	r0, #1
   34300:	bd10      	pop	{r4, pc}
   34302:	46c0      	nop			; (mov r8, r8)

00034304 <__aeabi_fcmple>:
   34304:	b510      	push	{r4, lr}
   34306:	f000 f89f 	bl	34448 <__lesf2>
   3430a:	2800      	cmp	r0, #0
   3430c:	dd01      	ble.n	34312 <__aeabi_fcmple+0xe>
   3430e:	2000      	movs	r0, #0
   34310:	bd10      	pop	{r4, pc}
   34312:	2001      	movs	r0, #1
   34314:	bd10      	pop	{r4, pc}
   34316:	46c0      	nop			; (mov r8, r8)

00034318 <__aeabi_fcmpgt>:
   34318:	b510      	push	{r4, lr}
   3431a:	f000 f855 	bl	343c8 <__gesf2>
   3431e:	2800      	cmp	r0, #0
   34320:	dc01      	bgt.n	34326 <__aeabi_fcmpgt+0xe>
   34322:	2000      	movs	r0, #0
   34324:	bd10      	pop	{r4, pc}
   34326:	2001      	movs	r0, #1
   34328:	bd10      	pop	{r4, pc}
   3432a:	46c0      	nop			; (mov r8, r8)

0003432c <__aeabi_fcmpge>:
   3432c:	b510      	push	{r4, lr}
   3432e:	f000 f84b 	bl	343c8 <__gesf2>
   34332:	2800      	cmp	r0, #0
   34334:	da01      	bge.n	3433a <__aeabi_fcmpge+0xe>
   34336:	2000      	movs	r0, #0
   34338:	bd10      	pop	{r4, pc}
   3433a:	2001      	movs	r0, #1
   3433c:	bd10      	pop	{r4, pc}
   3433e:	46c0      	nop			; (mov r8, r8)

00034340 <__clzsi2>:
   34340:	211c      	movs	r1, #28
   34342:	2301      	movs	r3, #1
   34344:	041b      	lsls	r3, r3, #16
   34346:	4298      	cmp	r0, r3
   34348:	d301      	bcc.n	3434e <__clzsi2+0xe>
   3434a:	0c00      	lsrs	r0, r0, #16
   3434c:	3910      	subs	r1, #16
   3434e:	0a1b      	lsrs	r3, r3, #8
   34350:	4298      	cmp	r0, r3
   34352:	d301      	bcc.n	34358 <__clzsi2+0x18>
   34354:	0a00      	lsrs	r0, r0, #8
   34356:	3908      	subs	r1, #8
   34358:	091b      	lsrs	r3, r3, #4
   3435a:	4298      	cmp	r0, r3
   3435c:	d301      	bcc.n	34362 <__clzsi2+0x22>
   3435e:	0900      	lsrs	r0, r0, #4
   34360:	3904      	subs	r1, #4
   34362:	a202      	add	r2, pc, #8	; (adr r2, 3436c <__clzsi2+0x2c>)
   34364:	5c10      	ldrb	r0, [r2, r0]
   34366:	1840      	adds	r0, r0, r1
   34368:	4770      	bx	lr
   3436a:	46c0      	nop			; (mov r8, r8)
   3436c:	02020304 	.word	0x02020304
   34370:	01010101 	.word	0x01010101
	...

0003437c <__eqsf2>:
   3437c:	b570      	push	{r4, r5, r6, lr}
   3437e:	0042      	lsls	r2, r0, #1
   34380:	0245      	lsls	r5, r0, #9
   34382:	024e      	lsls	r6, r1, #9
   34384:	004c      	lsls	r4, r1, #1
   34386:	0fc3      	lsrs	r3, r0, #31
   34388:	0a6d      	lsrs	r5, r5, #9
   3438a:	0e12      	lsrs	r2, r2, #24
   3438c:	0a76      	lsrs	r6, r6, #9
   3438e:	0e24      	lsrs	r4, r4, #24
   34390:	0fc9      	lsrs	r1, r1, #31
   34392:	2001      	movs	r0, #1
   34394:	2aff      	cmp	r2, #255	; 0xff
   34396:	d006      	beq.n	343a6 <__eqsf2+0x2a>
   34398:	2cff      	cmp	r4, #255	; 0xff
   3439a:	d003      	beq.n	343a4 <__eqsf2+0x28>
   3439c:	42a2      	cmp	r2, r4
   3439e:	d101      	bne.n	343a4 <__eqsf2+0x28>
   343a0:	42b5      	cmp	r5, r6
   343a2:	d006      	beq.n	343b2 <__eqsf2+0x36>
   343a4:	bd70      	pop	{r4, r5, r6, pc}
   343a6:	2d00      	cmp	r5, #0
   343a8:	d1fc      	bne.n	343a4 <__eqsf2+0x28>
   343aa:	2cff      	cmp	r4, #255	; 0xff
   343ac:	d1fa      	bne.n	343a4 <__eqsf2+0x28>
   343ae:	2e00      	cmp	r6, #0
   343b0:	d1f8      	bne.n	343a4 <__eqsf2+0x28>
   343b2:	428b      	cmp	r3, r1
   343b4:	d006      	beq.n	343c4 <__eqsf2+0x48>
   343b6:	2001      	movs	r0, #1
   343b8:	2a00      	cmp	r2, #0
   343ba:	d1f3      	bne.n	343a4 <__eqsf2+0x28>
   343bc:	0028      	movs	r0, r5
   343be:	1e45      	subs	r5, r0, #1
   343c0:	41a8      	sbcs	r0, r5
   343c2:	e7ef      	b.n	343a4 <__eqsf2+0x28>
   343c4:	2000      	movs	r0, #0
   343c6:	e7ed      	b.n	343a4 <__eqsf2+0x28>

000343c8 <__gesf2>:
   343c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   343ca:	0042      	lsls	r2, r0, #1
   343cc:	0245      	lsls	r5, r0, #9
   343ce:	024c      	lsls	r4, r1, #9
   343d0:	0fc3      	lsrs	r3, r0, #31
   343d2:	0048      	lsls	r0, r1, #1
   343d4:	0a6d      	lsrs	r5, r5, #9
   343d6:	0e12      	lsrs	r2, r2, #24
   343d8:	0a64      	lsrs	r4, r4, #9
   343da:	0e00      	lsrs	r0, r0, #24
   343dc:	0fc9      	lsrs	r1, r1, #31
   343de:	2aff      	cmp	r2, #255	; 0xff
   343e0:	d01e      	beq.n	34420 <__gesf2+0x58>
   343e2:	28ff      	cmp	r0, #255	; 0xff
   343e4:	d021      	beq.n	3442a <__gesf2+0x62>
   343e6:	2a00      	cmp	r2, #0
   343e8:	d10a      	bne.n	34400 <__gesf2+0x38>
   343ea:	426e      	negs	r6, r5
   343ec:	416e      	adcs	r6, r5
   343ee:	b2f6      	uxtb	r6, r6
   343f0:	2800      	cmp	r0, #0
   343f2:	d10f      	bne.n	34414 <__gesf2+0x4c>
   343f4:	2c00      	cmp	r4, #0
   343f6:	d10d      	bne.n	34414 <__gesf2+0x4c>
   343f8:	2000      	movs	r0, #0
   343fa:	2d00      	cmp	r5, #0
   343fc:	d009      	beq.n	34412 <__gesf2+0x4a>
   343fe:	e005      	b.n	3440c <__gesf2+0x44>
   34400:	2800      	cmp	r0, #0
   34402:	d101      	bne.n	34408 <__gesf2+0x40>
   34404:	2c00      	cmp	r4, #0
   34406:	d001      	beq.n	3440c <__gesf2+0x44>
   34408:	428b      	cmp	r3, r1
   3440a:	d011      	beq.n	34430 <__gesf2+0x68>
   3440c:	2101      	movs	r1, #1
   3440e:	4258      	negs	r0, r3
   34410:	4308      	orrs	r0, r1
   34412:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34414:	2e00      	cmp	r6, #0
   34416:	d0f7      	beq.n	34408 <__gesf2+0x40>
   34418:	2001      	movs	r0, #1
   3441a:	3901      	subs	r1, #1
   3441c:	4308      	orrs	r0, r1
   3441e:	e7f8      	b.n	34412 <__gesf2+0x4a>
   34420:	2d00      	cmp	r5, #0
   34422:	d0de      	beq.n	343e2 <__gesf2+0x1a>
   34424:	2002      	movs	r0, #2
   34426:	4240      	negs	r0, r0
   34428:	e7f3      	b.n	34412 <__gesf2+0x4a>
   3442a:	2c00      	cmp	r4, #0
   3442c:	d0db      	beq.n	343e6 <__gesf2+0x1e>
   3442e:	e7f9      	b.n	34424 <__gesf2+0x5c>
   34430:	4282      	cmp	r2, r0
   34432:	dceb      	bgt.n	3440c <__gesf2+0x44>
   34434:	db04      	blt.n	34440 <__gesf2+0x78>
   34436:	42a5      	cmp	r5, r4
   34438:	d8e8      	bhi.n	3440c <__gesf2+0x44>
   3443a:	2000      	movs	r0, #0
   3443c:	42a5      	cmp	r5, r4
   3443e:	d2e8      	bcs.n	34412 <__gesf2+0x4a>
   34440:	2101      	movs	r1, #1
   34442:	1e58      	subs	r0, r3, #1
   34444:	4308      	orrs	r0, r1
   34446:	e7e4      	b.n	34412 <__gesf2+0x4a>

00034448 <__lesf2>:
   34448:	b5f0      	push	{r4, r5, r6, r7, lr}
   3444a:	0042      	lsls	r2, r0, #1
   3444c:	024d      	lsls	r5, r1, #9
   3444e:	004c      	lsls	r4, r1, #1
   34450:	0246      	lsls	r6, r0, #9
   34452:	0a76      	lsrs	r6, r6, #9
   34454:	0e12      	lsrs	r2, r2, #24
   34456:	0fc3      	lsrs	r3, r0, #31
   34458:	0a6d      	lsrs	r5, r5, #9
   3445a:	0e24      	lsrs	r4, r4, #24
   3445c:	0fc9      	lsrs	r1, r1, #31
   3445e:	2aff      	cmp	r2, #255	; 0xff
   34460:	d016      	beq.n	34490 <__lesf2+0x48>
   34462:	2cff      	cmp	r4, #255	; 0xff
   34464:	d018      	beq.n	34498 <__lesf2+0x50>
   34466:	2a00      	cmp	r2, #0
   34468:	d10a      	bne.n	34480 <__lesf2+0x38>
   3446a:	4270      	negs	r0, r6
   3446c:	4170      	adcs	r0, r6
   3446e:	b2c0      	uxtb	r0, r0
   34470:	2c00      	cmp	r4, #0
   34472:	d015      	beq.n	344a0 <__lesf2+0x58>
   34474:	2800      	cmp	r0, #0
   34476:	d005      	beq.n	34484 <__lesf2+0x3c>
   34478:	2001      	movs	r0, #1
   3447a:	3901      	subs	r1, #1
   3447c:	4308      	orrs	r0, r1
   3447e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34480:	2c00      	cmp	r4, #0
   34482:	d013      	beq.n	344ac <__lesf2+0x64>
   34484:	4299      	cmp	r1, r3
   34486:	d014      	beq.n	344b2 <__lesf2+0x6a>
   34488:	2001      	movs	r0, #1
   3448a:	425b      	negs	r3, r3
   3448c:	4318      	orrs	r0, r3
   3448e:	e7f6      	b.n	3447e <__lesf2+0x36>
   34490:	2002      	movs	r0, #2
   34492:	2e00      	cmp	r6, #0
   34494:	d1f3      	bne.n	3447e <__lesf2+0x36>
   34496:	e7e4      	b.n	34462 <__lesf2+0x1a>
   34498:	2002      	movs	r0, #2
   3449a:	2d00      	cmp	r5, #0
   3449c:	d1ef      	bne.n	3447e <__lesf2+0x36>
   3449e:	e7e2      	b.n	34466 <__lesf2+0x1e>
   344a0:	2d00      	cmp	r5, #0
   344a2:	d1e7      	bne.n	34474 <__lesf2+0x2c>
   344a4:	2000      	movs	r0, #0
   344a6:	2e00      	cmp	r6, #0
   344a8:	d0e9      	beq.n	3447e <__lesf2+0x36>
   344aa:	e7ed      	b.n	34488 <__lesf2+0x40>
   344ac:	2d00      	cmp	r5, #0
   344ae:	d1e9      	bne.n	34484 <__lesf2+0x3c>
   344b0:	e7ea      	b.n	34488 <__lesf2+0x40>
   344b2:	42a2      	cmp	r2, r4
   344b4:	dc06      	bgt.n	344c4 <__lesf2+0x7c>
   344b6:	dbdf      	blt.n	34478 <__lesf2+0x30>
   344b8:	42ae      	cmp	r6, r5
   344ba:	d803      	bhi.n	344c4 <__lesf2+0x7c>
   344bc:	2000      	movs	r0, #0
   344be:	42ae      	cmp	r6, r5
   344c0:	d3da      	bcc.n	34478 <__lesf2+0x30>
   344c2:	e7dc      	b.n	3447e <__lesf2+0x36>
   344c4:	2001      	movs	r0, #1
   344c6:	4249      	negs	r1, r1
   344c8:	4308      	orrs	r0, r1
   344ca:	e7d8      	b.n	3447e <__lesf2+0x36>

000344cc <atoi>:
   344cc:	b510      	push	{r4, lr}
   344ce:	220a      	movs	r2, #10
   344d0:	2100      	movs	r1, #0
   344d2:	f000 faff 	bl	34ad4 <strtol>
   344d6:	bd10      	pop	{r4, pc}

000344d8 <__libc_init_array>:
   344d8:	b570      	push	{r4, r5, r6, lr}
   344da:	2600      	movs	r6, #0
   344dc:	4d0c      	ldr	r5, [pc, #48]	; (34510 <__libc_init_array+0x38>)
   344de:	4c0d      	ldr	r4, [pc, #52]	; (34514 <__libc_init_array+0x3c>)
   344e0:	1b64      	subs	r4, r4, r5
   344e2:	10a4      	asrs	r4, r4, #2
   344e4:	42a6      	cmp	r6, r4
   344e6:	d109      	bne.n	344fc <__libc_init_array+0x24>
   344e8:	2600      	movs	r6, #0
   344ea:	f005 fbf1 	bl	39cd0 <_init>
   344ee:	4d0a      	ldr	r5, [pc, #40]	; (34518 <__libc_init_array+0x40>)
   344f0:	4c0a      	ldr	r4, [pc, #40]	; (3451c <__libc_init_array+0x44>)
   344f2:	1b64      	subs	r4, r4, r5
   344f4:	10a4      	asrs	r4, r4, #2
   344f6:	42a6      	cmp	r6, r4
   344f8:	d105      	bne.n	34506 <__libc_init_array+0x2e>
   344fa:	bd70      	pop	{r4, r5, r6, pc}
   344fc:	00b3      	lsls	r3, r6, #2
   344fe:	58eb      	ldr	r3, [r5, r3]
   34500:	4798      	blx	r3
   34502:	3601      	adds	r6, #1
   34504:	e7ee      	b.n	344e4 <__libc_init_array+0xc>
   34506:	00b3      	lsls	r3, r6, #2
   34508:	58eb      	ldr	r3, [r5, r3]
   3450a:	4798      	blx	r3
   3450c:	3601      	adds	r6, #1
   3450e:	e7f2      	b.n	344f6 <__libc_init_array+0x1e>
   34510:	00039cdc 	.word	0x00039cdc
   34514:	00039cdc 	.word	0x00039cdc
   34518:	00039cdc 	.word	0x00039cdc
   3451c:	00039ce0 	.word	0x00039ce0

00034520 <malloc>:
   34520:	b510      	push	{r4, lr}
   34522:	4b03      	ldr	r3, [pc, #12]	; (34530 <malloc+0x10>)
   34524:	0001      	movs	r1, r0
   34526:	6818      	ldr	r0, [r3, #0]
   34528:	f000 f87c 	bl	34624 <_malloc_r>
   3452c:	bd10      	pop	{r4, pc}
   3452e:	46c0      	nop			; (mov r8, r8)
   34530:	20000120 	.word	0x20000120

00034534 <free>:
   34534:	b510      	push	{r4, lr}
   34536:	4b03      	ldr	r3, [pc, #12]	; (34544 <free+0x10>)
   34538:	0001      	movs	r1, r0
   3453a:	6818      	ldr	r0, [r3, #0]
   3453c:	f000 f828 	bl	34590 <_free_r>
   34540:	bd10      	pop	{r4, pc}
   34542:	46c0      	nop			; (mov r8, r8)
   34544:	20000120 	.word	0x20000120

00034548 <memcpy>:
   34548:	2300      	movs	r3, #0
   3454a:	b510      	push	{r4, lr}
   3454c:	429a      	cmp	r2, r3
   3454e:	d100      	bne.n	34552 <memcpy+0xa>
   34550:	bd10      	pop	{r4, pc}
   34552:	5ccc      	ldrb	r4, [r1, r3]
   34554:	54c4      	strb	r4, [r0, r3]
   34556:	3301      	adds	r3, #1
   34558:	e7f8      	b.n	3454c <memcpy+0x4>

0003455a <memmove>:
   3455a:	b510      	push	{r4, lr}
   3455c:	4288      	cmp	r0, r1
   3455e:	d902      	bls.n	34566 <memmove+0xc>
   34560:	188b      	adds	r3, r1, r2
   34562:	4298      	cmp	r0, r3
   34564:	d308      	bcc.n	34578 <memmove+0x1e>
   34566:	2300      	movs	r3, #0
   34568:	429a      	cmp	r2, r3
   3456a:	d007      	beq.n	3457c <memmove+0x22>
   3456c:	5ccc      	ldrb	r4, [r1, r3]
   3456e:	54c4      	strb	r4, [r0, r3]
   34570:	3301      	adds	r3, #1
   34572:	e7f9      	b.n	34568 <memmove+0xe>
   34574:	5c8b      	ldrb	r3, [r1, r2]
   34576:	5483      	strb	r3, [r0, r2]
   34578:	3a01      	subs	r2, #1
   3457a:	d2fb      	bcs.n	34574 <memmove+0x1a>
   3457c:	bd10      	pop	{r4, pc}

0003457e <memset>:
   3457e:	0003      	movs	r3, r0
   34580:	1882      	adds	r2, r0, r2
   34582:	4293      	cmp	r3, r2
   34584:	d100      	bne.n	34588 <memset+0xa>
   34586:	4770      	bx	lr
   34588:	7019      	strb	r1, [r3, #0]
   3458a:	3301      	adds	r3, #1
   3458c:	e7f9      	b.n	34582 <memset+0x4>
	...

00034590 <_free_r>:
   34590:	b570      	push	{r4, r5, r6, lr}
   34592:	0005      	movs	r5, r0
   34594:	2900      	cmp	r1, #0
   34596:	d010      	beq.n	345ba <_free_r+0x2a>
   34598:	1f0c      	subs	r4, r1, #4
   3459a:	6823      	ldr	r3, [r4, #0]
   3459c:	2b00      	cmp	r3, #0
   3459e:	da00      	bge.n	345a2 <_free_r+0x12>
   345a0:	18e4      	adds	r4, r4, r3
   345a2:	0028      	movs	r0, r5
   345a4:	f000 fdca 	bl	3513c <__malloc_lock>
   345a8:	4a1d      	ldr	r2, [pc, #116]	; (34620 <_free_r+0x90>)
   345aa:	6813      	ldr	r3, [r2, #0]
   345ac:	2b00      	cmp	r3, #0
   345ae:	d105      	bne.n	345bc <_free_r+0x2c>
   345b0:	6063      	str	r3, [r4, #4]
   345b2:	6014      	str	r4, [r2, #0]
   345b4:	0028      	movs	r0, r5
   345b6:	f000 fdc2 	bl	3513e <__malloc_unlock>
   345ba:	bd70      	pop	{r4, r5, r6, pc}
   345bc:	42a3      	cmp	r3, r4
   345be:	d909      	bls.n	345d4 <_free_r+0x44>
   345c0:	6821      	ldr	r1, [r4, #0]
   345c2:	1860      	adds	r0, r4, r1
   345c4:	4283      	cmp	r3, r0
   345c6:	d1f3      	bne.n	345b0 <_free_r+0x20>
   345c8:	6818      	ldr	r0, [r3, #0]
   345ca:	685b      	ldr	r3, [r3, #4]
   345cc:	1841      	adds	r1, r0, r1
   345ce:	6021      	str	r1, [r4, #0]
   345d0:	e7ee      	b.n	345b0 <_free_r+0x20>
   345d2:	0013      	movs	r3, r2
   345d4:	685a      	ldr	r2, [r3, #4]
   345d6:	2a00      	cmp	r2, #0
   345d8:	d001      	beq.n	345de <_free_r+0x4e>
   345da:	42a2      	cmp	r2, r4
   345dc:	d9f9      	bls.n	345d2 <_free_r+0x42>
   345de:	6819      	ldr	r1, [r3, #0]
   345e0:	1858      	adds	r0, r3, r1
   345e2:	42a0      	cmp	r0, r4
   345e4:	d10b      	bne.n	345fe <_free_r+0x6e>
   345e6:	6820      	ldr	r0, [r4, #0]
   345e8:	1809      	adds	r1, r1, r0
   345ea:	1858      	adds	r0, r3, r1
   345ec:	6019      	str	r1, [r3, #0]
   345ee:	4282      	cmp	r2, r0
   345f0:	d1e0      	bne.n	345b4 <_free_r+0x24>
   345f2:	6810      	ldr	r0, [r2, #0]
   345f4:	6852      	ldr	r2, [r2, #4]
   345f6:	1841      	adds	r1, r0, r1
   345f8:	6019      	str	r1, [r3, #0]
   345fa:	605a      	str	r2, [r3, #4]
   345fc:	e7da      	b.n	345b4 <_free_r+0x24>
   345fe:	42a0      	cmp	r0, r4
   34600:	d902      	bls.n	34608 <_free_r+0x78>
   34602:	230c      	movs	r3, #12
   34604:	602b      	str	r3, [r5, #0]
   34606:	e7d5      	b.n	345b4 <_free_r+0x24>
   34608:	6821      	ldr	r1, [r4, #0]
   3460a:	1860      	adds	r0, r4, r1
   3460c:	4282      	cmp	r2, r0
   3460e:	d103      	bne.n	34618 <_free_r+0x88>
   34610:	6810      	ldr	r0, [r2, #0]
   34612:	6852      	ldr	r2, [r2, #4]
   34614:	1841      	adds	r1, r0, r1
   34616:	6021      	str	r1, [r4, #0]
   34618:	6062      	str	r2, [r4, #4]
   3461a:	605c      	str	r4, [r3, #4]
   3461c:	e7ca      	b.n	345b4 <_free_r+0x24>
   3461e:	46c0      	nop			; (mov r8, r8)
   34620:	200046f0 	.word	0x200046f0

00034624 <_malloc_r>:
   34624:	2303      	movs	r3, #3
   34626:	b570      	push	{r4, r5, r6, lr}
   34628:	1ccd      	adds	r5, r1, #3
   3462a:	439d      	bics	r5, r3
   3462c:	3508      	adds	r5, #8
   3462e:	0006      	movs	r6, r0
   34630:	2d0c      	cmp	r5, #12
   34632:	d21e      	bcs.n	34672 <_malloc_r+0x4e>
   34634:	250c      	movs	r5, #12
   34636:	42a9      	cmp	r1, r5
   34638:	d81d      	bhi.n	34676 <_malloc_r+0x52>
   3463a:	0030      	movs	r0, r6
   3463c:	f000 fd7e 	bl	3513c <__malloc_lock>
   34640:	4a25      	ldr	r2, [pc, #148]	; (346d8 <_malloc_r+0xb4>)
   34642:	6814      	ldr	r4, [r2, #0]
   34644:	0021      	movs	r1, r4
   34646:	2900      	cmp	r1, #0
   34648:	d119      	bne.n	3467e <_malloc_r+0x5a>
   3464a:	4c24      	ldr	r4, [pc, #144]	; (346dc <_malloc_r+0xb8>)
   3464c:	6823      	ldr	r3, [r4, #0]
   3464e:	2b00      	cmp	r3, #0
   34650:	d103      	bne.n	3465a <_malloc_r+0x36>
   34652:	0030      	movs	r0, r6
   34654:	f000 f8ae 	bl	347b4 <_sbrk_r>
   34658:	6020      	str	r0, [r4, #0]
   3465a:	0029      	movs	r1, r5
   3465c:	0030      	movs	r0, r6
   3465e:	f000 f8a9 	bl	347b4 <_sbrk_r>
   34662:	1c43      	adds	r3, r0, #1
   34664:	d12c      	bne.n	346c0 <_malloc_r+0x9c>
   34666:	230c      	movs	r3, #12
   34668:	0030      	movs	r0, r6
   3466a:	6033      	str	r3, [r6, #0]
   3466c:	f000 fd67 	bl	3513e <__malloc_unlock>
   34670:	e003      	b.n	3467a <_malloc_r+0x56>
   34672:	2d00      	cmp	r5, #0
   34674:	dadf      	bge.n	34636 <_malloc_r+0x12>
   34676:	230c      	movs	r3, #12
   34678:	6033      	str	r3, [r6, #0]
   3467a:	2000      	movs	r0, #0
   3467c:	bd70      	pop	{r4, r5, r6, pc}
   3467e:	680b      	ldr	r3, [r1, #0]
   34680:	1b5b      	subs	r3, r3, r5
   34682:	d41a      	bmi.n	346ba <_malloc_r+0x96>
   34684:	2b0b      	cmp	r3, #11
   34686:	d903      	bls.n	34690 <_malloc_r+0x6c>
   34688:	600b      	str	r3, [r1, #0]
   3468a:	18cc      	adds	r4, r1, r3
   3468c:	6025      	str	r5, [r4, #0]
   3468e:	e003      	b.n	34698 <_malloc_r+0x74>
   34690:	428c      	cmp	r4, r1
   34692:	d10e      	bne.n	346b2 <_malloc_r+0x8e>
   34694:	6863      	ldr	r3, [r4, #4]
   34696:	6013      	str	r3, [r2, #0]
   34698:	0030      	movs	r0, r6
   3469a:	f000 fd50 	bl	3513e <__malloc_unlock>
   3469e:	0020      	movs	r0, r4
   346a0:	2207      	movs	r2, #7
   346a2:	300b      	adds	r0, #11
   346a4:	1d23      	adds	r3, r4, #4
   346a6:	4390      	bics	r0, r2
   346a8:	1ac3      	subs	r3, r0, r3
   346aa:	d0e7      	beq.n	3467c <_malloc_r+0x58>
   346ac:	425a      	negs	r2, r3
   346ae:	50e2      	str	r2, [r4, r3]
   346b0:	e7e4      	b.n	3467c <_malloc_r+0x58>
   346b2:	684b      	ldr	r3, [r1, #4]
   346b4:	6063      	str	r3, [r4, #4]
   346b6:	000c      	movs	r4, r1
   346b8:	e7ee      	b.n	34698 <_malloc_r+0x74>
   346ba:	000c      	movs	r4, r1
   346bc:	6849      	ldr	r1, [r1, #4]
   346be:	e7c2      	b.n	34646 <_malloc_r+0x22>
   346c0:	2303      	movs	r3, #3
   346c2:	1cc4      	adds	r4, r0, #3
   346c4:	439c      	bics	r4, r3
   346c6:	42a0      	cmp	r0, r4
   346c8:	d0e0      	beq.n	3468c <_malloc_r+0x68>
   346ca:	1a21      	subs	r1, r4, r0
   346cc:	0030      	movs	r0, r6
   346ce:	f000 f871 	bl	347b4 <_sbrk_r>
   346d2:	1c43      	adds	r3, r0, #1
   346d4:	d1da      	bne.n	3468c <_malloc_r+0x68>
   346d6:	e7c6      	b.n	34666 <_malloc_r+0x42>
   346d8:	200046f0 	.word	0x200046f0
   346dc:	200046f4 	.word	0x200046f4

000346e0 <_puts_r>:
   346e0:	b570      	push	{r4, r5, r6, lr}
   346e2:	0005      	movs	r5, r0
   346e4:	000e      	movs	r6, r1
   346e6:	2800      	cmp	r0, #0
   346e8:	d004      	beq.n	346f4 <_puts_r+0x14>
   346ea:	6983      	ldr	r3, [r0, #24]
   346ec:	2b00      	cmp	r3, #0
   346ee:	d101      	bne.n	346f4 <_puts_r+0x14>
   346f0:	f000 fc00 	bl	34ef4 <__sinit>
   346f4:	69ab      	ldr	r3, [r5, #24]
   346f6:	68ac      	ldr	r4, [r5, #8]
   346f8:	2b00      	cmp	r3, #0
   346fa:	d102      	bne.n	34702 <_puts_r+0x22>
   346fc:	0028      	movs	r0, r5
   346fe:	f000 fbf9 	bl	34ef4 <__sinit>
   34702:	4b24      	ldr	r3, [pc, #144]	; (34794 <_puts_r+0xb4>)
   34704:	429c      	cmp	r4, r3
   34706:	d10f      	bne.n	34728 <_puts_r+0x48>
   34708:	686c      	ldr	r4, [r5, #4]
   3470a:	89a3      	ldrh	r3, [r4, #12]
   3470c:	071b      	lsls	r3, r3, #28
   3470e:	d502      	bpl.n	34716 <_puts_r+0x36>
   34710:	6923      	ldr	r3, [r4, #16]
   34712:	2b00      	cmp	r3, #0
   34714:	d120      	bne.n	34758 <_puts_r+0x78>
   34716:	0021      	movs	r1, r4
   34718:	0028      	movs	r0, r5
   3471a:	f000 fa7d 	bl	34c18 <__swsetup_r>
   3471e:	2800      	cmp	r0, #0
   34720:	d01a      	beq.n	34758 <_puts_r+0x78>
   34722:	2001      	movs	r0, #1
   34724:	4240      	negs	r0, r0
   34726:	bd70      	pop	{r4, r5, r6, pc}
   34728:	4b1b      	ldr	r3, [pc, #108]	; (34798 <_puts_r+0xb8>)
   3472a:	429c      	cmp	r4, r3
   3472c:	d101      	bne.n	34732 <_puts_r+0x52>
   3472e:	68ac      	ldr	r4, [r5, #8]
   34730:	e7eb      	b.n	3470a <_puts_r+0x2a>
   34732:	4b1a      	ldr	r3, [pc, #104]	; (3479c <_puts_r+0xbc>)
   34734:	429c      	cmp	r4, r3
   34736:	d1e8      	bne.n	3470a <_puts_r+0x2a>
   34738:	68ec      	ldr	r4, [r5, #12]
   3473a:	e7e6      	b.n	3470a <_puts_r+0x2a>
   3473c:	3b01      	subs	r3, #1
   3473e:	3601      	adds	r6, #1
   34740:	60a3      	str	r3, [r4, #8]
   34742:	2b00      	cmp	r3, #0
   34744:	da04      	bge.n	34750 <_puts_r+0x70>
   34746:	69a2      	ldr	r2, [r4, #24]
   34748:	4293      	cmp	r3, r2
   3474a:	db16      	blt.n	3477a <_puts_r+0x9a>
   3474c:	290a      	cmp	r1, #10
   3474e:	d014      	beq.n	3477a <_puts_r+0x9a>
   34750:	6823      	ldr	r3, [r4, #0]
   34752:	1c5a      	adds	r2, r3, #1
   34754:	6022      	str	r2, [r4, #0]
   34756:	7019      	strb	r1, [r3, #0]
   34758:	7831      	ldrb	r1, [r6, #0]
   3475a:	68a3      	ldr	r3, [r4, #8]
   3475c:	2900      	cmp	r1, #0
   3475e:	d1ed      	bne.n	3473c <_puts_r+0x5c>
   34760:	3b01      	subs	r3, #1
   34762:	60a3      	str	r3, [r4, #8]
   34764:	2b00      	cmp	r3, #0
   34766:	da0f      	bge.n	34788 <_puts_r+0xa8>
   34768:	0022      	movs	r2, r4
   3476a:	310a      	adds	r1, #10
   3476c:	0028      	movs	r0, r5
   3476e:	f000 f9fd 	bl	34b6c <__swbuf_r>
   34772:	1c43      	adds	r3, r0, #1
   34774:	d0d5      	beq.n	34722 <_puts_r+0x42>
   34776:	200a      	movs	r0, #10
   34778:	e7d5      	b.n	34726 <_puts_r+0x46>
   3477a:	0022      	movs	r2, r4
   3477c:	0028      	movs	r0, r5
   3477e:	f000 f9f5 	bl	34b6c <__swbuf_r>
   34782:	1c43      	adds	r3, r0, #1
   34784:	d1e8      	bne.n	34758 <_puts_r+0x78>
   34786:	e7cc      	b.n	34722 <_puts_r+0x42>
   34788:	200a      	movs	r0, #10
   3478a:	6823      	ldr	r3, [r4, #0]
   3478c:	1c5a      	adds	r2, r3, #1
   3478e:	6022      	str	r2, [r4, #0]
   34790:	7018      	strb	r0, [r3, #0]
   34792:	e7c8      	b.n	34726 <_puts_r+0x46>
   34794:	00039b50 	.word	0x00039b50
   34798:	00039b70 	.word	0x00039b70
   3479c:	00039b30 	.word	0x00039b30

000347a0 <puts>:
   347a0:	b510      	push	{r4, lr}
   347a2:	4b03      	ldr	r3, [pc, #12]	; (347b0 <puts+0x10>)
   347a4:	0001      	movs	r1, r0
   347a6:	6818      	ldr	r0, [r3, #0]
   347a8:	f7ff ff9a 	bl	346e0 <_puts_r>
   347ac:	bd10      	pop	{r4, pc}
   347ae:	46c0      	nop			; (mov r8, r8)
   347b0:	20000120 	.word	0x20000120

000347b4 <_sbrk_r>:
   347b4:	2300      	movs	r3, #0
   347b6:	b570      	push	{r4, r5, r6, lr}
   347b8:	4c06      	ldr	r4, [pc, #24]	; (347d4 <_sbrk_r+0x20>)
   347ba:	0005      	movs	r5, r0
   347bc:	0008      	movs	r0, r1
   347be:	6023      	str	r3, [r4, #0]
   347c0:	f7f5 fd98 	bl	2a2f4 <_sbrk>
   347c4:	1c43      	adds	r3, r0, #1
   347c6:	d103      	bne.n	347d0 <_sbrk_r+0x1c>
   347c8:	6823      	ldr	r3, [r4, #0]
   347ca:	2b00      	cmp	r3, #0
   347cc:	d000      	beq.n	347d0 <_sbrk_r+0x1c>
   347ce:	602b      	str	r3, [r5, #0]
   347d0:	bd70      	pop	{r4, r5, r6, pc}
   347d2:	46c0      	nop			; (mov r8, r8)
   347d4:	20005c54 	.word	0x20005c54

000347d8 <sniprintf>:
   347d8:	b40c      	push	{r2, r3}
   347da:	b530      	push	{r4, r5, lr}
   347dc:	4b16      	ldr	r3, [pc, #88]	; (34838 <sniprintf+0x60>)
   347de:	b09d      	sub	sp, #116	; 0x74
   347e0:	1e0c      	subs	r4, r1, #0
   347e2:	681d      	ldr	r5, [r3, #0]
   347e4:	da08      	bge.n	347f8 <sniprintf+0x20>
   347e6:	238b      	movs	r3, #139	; 0x8b
   347e8:	2001      	movs	r0, #1
   347ea:	602b      	str	r3, [r5, #0]
   347ec:	4240      	negs	r0, r0
   347ee:	b01d      	add	sp, #116	; 0x74
   347f0:	bc30      	pop	{r4, r5}
   347f2:	bc08      	pop	{r3}
   347f4:	b002      	add	sp, #8
   347f6:	4718      	bx	r3
   347f8:	2382      	movs	r3, #130	; 0x82
   347fa:	a902      	add	r1, sp, #8
   347fc:	009b      	lsls	r3, r3, #2
   347fe:	818b      	strh	r3, [r1, #12]
   34800:	2300      	movs	r3, #0
   34802:	9002      	str	r0, [sp, #8]
   34804:	6108      	str	r0, [r1, #16]
   34806:	429c      	cmp	r4, r3
   34808:	d000      	beq.n	3480c <sniprintf+0x34>
   3480a:	1e63      	subs	r3, r4, #1
   3480c:	608b      	str	r3, [r1, #8]
   3480e:	614b      	str	r3, [r1, #20]
   34810:	2301      	movs	r3, #1
   34812:	425b      	negs	r3, r3
   34814:	81cb      	strh	r3, [r1, #14]
   34816:	9a20      	ldr	r2, [sp, #128]	; 0x80
   34818:	ab21      	add	r3, sp, #132	; 0x84
   3481a:	0028      	movs	r0, r5
   3481c:	9301      	str	r3, [sp, #4]
   3481e:	f000 fcf1 	bl	35204 <_svfiprintf_r>
   34822:	1c43      	adds	r3, r0, #1
   34824:	da01      	bge.n	3482a <sniprintf+0x52>
   34826:	238b      	movs	r3, #139	; 0x8b
   34828:	602b      	str	r3, [r5, #0]
   3482a:	2c00      	cmp	r4, #0
   3482c:	d0df      	beq.n	347ee <sniprintf+0x16>
   3482e:	2300      	movs	r3, #0
   34830:	9a02      	ldr	r2, [sp, #8]
   34832:	7013      	strb	r3, [r2, #0]
   34834:	e7db      	b.n	347ee <sniprintf+0x16>
   34836:	46c0      	nop			; (mov r8, r8)
   34838:	20000120 	.word	0x20000120

0003483c <siprintf>:
   3483c:	b40e      	push	{r1, r2, r3}
   3483e:	b510      	push	{r4, lr}
   34840:	b09d      	sub	sp, #116	; 0x74
   34842:	a902      	add	r1, sp, #8
   34844:	9002      	str	r0, [sp, #8]
   34846:	6108      	str	r0, [r1, #16]
   34848:	480b      	ldr	r0, [pc, #44]	; (34878 <siprintf+0x3c>)
   3484a:	2482      	movs	r4, #130	; 0x82
   3484c:	6088      	str	r0, [r1, #8]
   3484e:	6148      	str	r0, [r1, #20]
   34850:	2001      	movs	r0, #1
   34852:	4240      	negs	r0, r0
   34854:	ab1f      	add	r3, sp, #124	; 0x7c
   34856:	81c8      	strh	r0, [r1, #14]
   34858:	4808      	ldr	r0, [pc, #32]	; (3487c <siprintf+0x40>)
   3485a:	cb04      	ldmia	r3!, {r2}
   3485c:	00a4      	lsls	r4, r4, #2
   3485e:	6800      	ldr	r0, [r0, #0]
   34860:	9301      	str	r3, [sp, #4]
   34862:	818c      	strh	r4, [r1, #12]
   34864:	f000 fcce 	bl	35204 <_svfiprintf_r>
   34868:	2300      	movs	r3, #0
   3486a:	9a02      	ldr	r2, [sp, #8]
   3486c:	7013      	strb	r3, [r2, #0]
   3486e:	b01d      	add	sp, #116	; 0x74
   34870:	bc10      	pop	{r4}
   34872:	bc08      	pop	{r3}
   34874:	b003      	add	sp, #12
   34876:	4718      	bx	r3
   34878:	7fffffff 	.word	0x7fffffff
   3487c:	20000120 	.word	0x20000120

00034880 <strcasecmp>:
   34880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34882:	0007      	movs	r7, r0
   34884:	000e      	movs	r6, r1
   34886:	783c      	ldrb	r4, [r7, #0]
   34888:	f000 fbcc 	bl	35024 <__locale_ctype_ptr>
   3488c:	2203      	movs	r2, #3
   3488e:	1900      	adds	r0, r0, r4
   34890:	7843      	ldrb	r3, [r0, #1]
   34892:	4013      	ands	r3, r2
   34894:	2b01      	cmp	r3, #1
   34896:	d100      	bne.n	3489a <strcasecmp+0x1a>
   34898:	3420      	adds	r4, #32
   3489a:	7835      	ldrb	r5, [r6, #0]
   3489c:	f000 fbc2 	bl	35024 <__locale_ctype_ptr>
   348a0:	2203      	movs	r2, #3
   348a2:	1940      	adds	r0, r0, r5
   348a4:	7843      	ldrb	r3, [r0, #1]
   348a6:	4013      	ands	r3, r2
   348a8:	2b01      	cmp	r3, #1
   348aa:	d100      	bne.n	348ae <strcasecmp+0x2e>
   348ac:	3520      	adds	r5, #32
   348ae:	1b60      	subs	r0, r4, r5
   348b0:	d103      	bne.n	348ba <strcasecmp+0x3a>
   348b2:	3701      	adds	r7, #1
   348b4:	3601      	adds	r6, #1
   348b6:	2d00      	cmp	r5, #0
   348b8:	d1e5      	bne.n	34886 <strcasecmp+0x6>
   348ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000348bc <strcmp>:
   348bc:	7802      	ldrb	r2, [r0, #0]
   348be:	780b      	ldrb	r3, [r1, #0]
   348c0:	2a00      	cmp	r2, #0
   348c2:	d003      	beq.n	348cc <strcmp+0x10>
   348c4:	3001      	adds	r0, #1
   348c6:	3101      	adds	r1, #1
   348c8:	429a      	cmp	r2, r3
   348ca:	d0f7      	beq.n	348bc <strcmp>
   348cc:	1ad0      	subs	r0, r2, r3
   348ce:	4770      	bx	lr

000348d0 <strcpy>:
   348d0:	1c03      	adds	r3, r0, #0
   348d2:	780a      	ldrb	r2, [r1, #0]
   348d4:	3101      	adds	r1, #1
   348d6:	701a      	strb	r2, [r3, #0]
   348d8:	3301      	adds	r3, #1
   348da:	2a00      	cmp	r2, #0
   348dc:	d1f9      	bne.n	348d2 <strcpy+0x2>
   348de:	4770      	bx	lr

000348e0 <strdup>:
   348e0:	b510      	push	{r4, lr}
   348e2:	4b03      	ldr	r3, [pc, #12]	; (348f0 <strdup+0x10>)
   348e4:	0001      	movs	r1, r0
   348e6:	6818      	ldr	r0, [r3, #0]
   348e8:	f000 f804 	bl	348f4 <_strdup_r>
   348ec:	bd10      	pop	{r4, pc}
   348ee:	46c0      	nop			; (mov r8, r8)
   348f0:	20000120 	.word	0x20000120

000348f4 <_strdup_r>:
   348f4:	b570      	push	{r4, r5, r6, lr}
   348f6:	0005      	movs	r5, r0
   348f8:	0008      	movs	r0, r1
   348fa:	000e      	movs	r6, r1
   348fc:	f000 f80d 	bl	3491a <strlen>
   34900:	1c44      	adds	r4, r0, #1
   34902:	0021      	movs	r1, r4
   34904:	0028      	movs	r0, r5
   34906:	f7ff fe8d 	bl	34624 <_malloc_r>
   3490a:	1e05      	subs	r5, r0, #0
   3490c:	d003      	beq.n	34916 <_strdup_r+0x22>
   3490e:	0022      	movs	r2, r4
   34910:	0031      	movs	r1, r6
   34912:	f7ff fe19 	bl	34548 <memcpy>
   34916:	0028      	movs	r0, r5
   34918:	bd70      	pop	{r4, r5, r6, pc}

0003491a <strlen>:
   3491a:	2300      	movs	r3, #0
   3491c:	5cc2      	ldrb	r2, [r0, r3]
   3491e:	3301      	adds	r3, #1
   34920:	2a00      	cmp	r2, #0
   34922:	d1fb      	bne.n	3491c <strlen+0x2>
   34924:	1e58      	subs	r0, r3, #1
   34926:	4770      	bx	lr

00034928 <strncmp>:
   34928:	2300      	movs	r3, #0
   3492a:	b530      	push	{r4, r5, lr}
   3492c:	429a      	cmp	r2, r3
   3492e:	d00a      	beq.n	34946 <strncmp+0x1e>
   34930:	3a01      	subs	r2, #1
   34932:	5cc4      	ldrb	r4, [r0, r3]
   34934:	5ccd      	ldrb	r5, [r1, r3]
   34936:	42ac      	cmp	r4, r5
   34938:	d104      	bne.n	34944 <strncmp+0x1c>
   3493a:	429a      	cmp	r2, r3
   3493c:	d002      	beq.n	34944 <strncmp+0x1c>
   3493e:	3301      	adds	r3, #1
   34940:	2c00      	cmp	r4, #0
   34942:	d1f6      	bne.n	34932 <strncmp+0xa>
   34944:	1b63      	subs	r3, r4, r5
   34946:	0018      	movs	r0, r3
   34948:	bd30      	pop	{r4, r5, pc}

0003494a <strncpy>:
   3494a:	b570      	push	{r4, r5, r6, lr}
   3494c:	0004      	movs	r4, r0
   3494e:	2a00      	cmp	r2, #0
   34950:	d100      	bne.n	34954 <strncpy+0xa>
   34952:	bd70      	pop	{r4, r5, r6, pc}
   34954:	780d      	ldrb	r5, [r1, #0]
   34956:	1e56      	subs	r6, r2, #1
   34958:	1c63      	adds	r3, r4, #1
   3495a:	7025      	strb	r5, [r4, #0]
   3495c:	3101      	adds	r1, #1
   3495e:	2d00      	cmp	r5, #0
   34960:	d105      	bne.n	3496e <strncpy+0x24>
   34962:	18a4      	adds	r4, r4, r2
   34964:	429c      	cmp	r4, r3
   34966:	d0f4      	beq.n	34952 <strncpy+0x8>
   34968:	701d      	strb	r5, [r3, #0]
   3496a:	3301      	adds	r3, #1
   3496c:	e7fa      	b.n	34964 <strncpy+0x1a>
   3496e:	001c      	movs	r4, r3
   34970:	0032      	movs	r2, r6
   34972:	e7ec      	b.n	3494e <strncpy+0x4>

00034974 <strrchr>:
   34974:	b570      	push	{r4, r5, r6, lr}
   34976:	000d      	movs	r5, r1
   34978:	2400      	movs	r4, #0
   3497a:	2900      	cmp	r1, #0
   3497c:	d105      	bne.n	3498a <strrchr+0x16>
   3497e:	f000 ff19 	bl	357b4 <strchr>
   34982:	0004      	movs	r4, r0
   34984:	e006      	b.n	34994 <strrchr+0x20>
   34986:	001c      	movs	r4, r3
   34988:	1c58      	adds	r0, r3, #1
   3498a:	0029      	movs	r1, r5
   3498c:	f000 ff12 	bl	357b4 <strchr>
   34990:	1e03      	subs	r3, r0, #0
   34992:	d1f8      	bne.n	34986 <strrchr+0x12>
   34994:	0020      	movs	r0, r4
   34996:	bd70      	pop	{r4, r5, r6, pc}

00034998 <strstr>:
   34998:	b510      	push	{r4, lr}
   3499a:	0002      	movs	r2, r0
   3499c:	7800      	ldrb	r0, [r0, #0]
   3499e:	2800      	cmp	r0, #0
   349a0:	d104      	bne.n	349ac <strstr+0x14>
   349a2:	7809      	ldrb	r1, [r1, #0]
   349a4:	2900      	cmp	r1, #0
   349a6:	d00d      	beq.n	349c4 <strstr+0x2c>
   349a8:	bd10      	pop	{r4, pc}
   349aa:	3201      	adds	r2, #1
   349ac:	7810      	ldrb	r0, [r2, #0]
   349ae:	2800      	cmp	r0, #0
   349b0:	d0fa      	beq.n	349a8 <strstr+0x10>
   349b2:	2300      	movs	r3, #0
   349b4:	5cc8      	ldrb	r0, [r1, r3]
   349b6:	2800      	cmp	r0, #0
   349b8:	d004      	beq.n	349c4 <strstr+0x2c>
   349ba:	5cd4      	ldrb	r4, [r2, r3]
   349bc:	4284      	cmp	r4, r0
   349be:	d1f4      	bne.n	349aa <strstr+0x12>
   349c0:	3301      	adds	r3, #1
   349c2:	e7f7      	b.n	349b4 <strstr+0x1c>
   349c4:	0010      	movs	r0, r2
   349c6:	e7ef      	b.n	349a8 <strstr+0x10>

000349c8 <_strtol_l.isra.0>:
   349c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   349ca:	001f      	movs	r7, r3
   349cc:	000e      	movs	r6, r1
   349ce:	b087      	sub	sp, #28
   349d0:	9005      	str	r0, [sp, #20]
   349d2:	9103      	str	r1, [sp, #12]
   349d4:	9202      	str	r2, [sp, #8]
   349d6:	980c      	ldr	r0, [sp, #48]	; 0x30
   349d8:	7834      	ldrb	r4, [r6, #0]
   349da:	f000 fb20 	bl	3501e <__locale_ctype_ptr_l>
   349de:	2208      	movs	r2, #8
   349e0:	1900      	adds	r0, r0, r4
   349e2:	7843      	ldrb	r3, [r0, #1]
   349e4:	1c75      	adds	r5, r6, #1
   349e6:	4013      	ands	r3, r2
   349e8:	d10c      	bne.n	34a04 <_strtol_l.isra.0+0x3c>
   349ea:	2c2d      	cmp	r4, #45	; 0x2d
   349ec:	d10c      	bne.n	34a08 <_strtol_l.isra.0+0x40>
   349ee:	3301      	adds	r3, #1
   349f0:	782c      	ldrb	r4, [r5, #0]
   349f2:	9301      	str	r3, [sp, #4]
   349f4:	1cb5      	adds	r5, r6, #2
   349f6:	2f00      	cmp	r7, #0
   349f8:	d00c      	beq.n	34a14 <_strtol_l.isra.0+0x4c>
   349fa:	2f10      	cmp	r7, #16
   349fc:	d114      	bne.n	34a28 <_strtol_l.isra.0+0x60>
   349fe:	2c30      	cmp	r4, #48	; 0x30
   34a00:	d00a      	beq.n	34a18 <_strtol_l.isra.0+0x50>
   34a02:	e011      	b.n	34a28 <_strtol_l.isra.0+0x60>
   34a04:	002e      	movs	r6, r5
   34a06:	e7e6      	b.n	349d6 <_strtol_l.isra.0+0xe>
   34a08:	9301      	str	r3, [sp, #4]
   34a0a:	2c2b      	cmp	r4, #43	; 0x2b
   34a0c:	d1f3      	bne.n	349f6 <_strtol_l.isra.0+0x2e>
   34a0e:	782c      	ldrb	r4, [r5, #0]
   34a10:	1cb5      	adds	r5, r6, #2
   34a12:	e7f0      	b.n	349f6 <_strtol_l.isra.0+0x2e>
   34a14:	2c30      	cmp	r4, #48	; 0x30
   34a16:	d12f      	bne.n	34a78 <_strtol_l.isra.0+0xb0>
   34a18:	2220      	movs	r2, #32
   34a1a:	782b      	ldrb	r3, [r5, #0]
   34a1c:	4393      	bics	r3, r2
   34a1e:	2b58      	cmp	r3, #88	; 0x58
   34a20:	d151      	bne.n	34ac6 <_strtol_l.isra.0+0xfe>
   34a22:	2710      	movs	r7, #16
   34a24:	786c      	ldrb	r4, [r5, #1]
   34a26:	3502      	adds	r5, #2
   34a28:	9b01      	ldr	r3, [sp, #4]
   34a2a:	4a29      	ldr	r2, [pc, #164]	; (34ad0 <_strtol_l.isra.0+0x108>)
   34a2c:	0039      	movs	r1, r7
   34a2e:	189e      	adds	r6, r3, r2
   34a30:	0030      	movs	r0, r6
   34a32:	f7fd f8cd 	bl	31bd0 <__aeabi_uidivmod>
   34a36:	0030      	movs	r0, r6
   34a38:	9104      	str	r1, [sp, #16]
   34a3a:	0039      	movs	r1, r7
   34a3c:	f7fd f842 	bl	31ac4 <__udivsi3>
   34a40:	2101      	movs	r1, #1
   34a42:	2300      	movs	r3, #0
   34a44:	4249      	negs	r1, r1
   34a46:	0002      	movs	r2, r0
   34a48:	468c      	mov	ip, r1
   34a4a:	0018      	movs	r0, r3
   34a4c:	0021      	movs	r1, r4
   34a4e:	3930      	subs	r1, #48	; 0x30
   34a50:	2909      	cmp	r1, #9
   34a52:	d813      	bhi.n	34a7c <_strtol_l.isra.0+0xb4>
   34a54:	000c      	movs	r4, r1
   34a56:	42a7      	cmp	r7, r4
   34a58:	dd1c      	ble.n	34a94 <_strtol_l.isra.0+0xcc>
   34a5a:	1c59      	adds	r1, r3, #1
   34a5c:	d009      	beq.n	34a72 <_strtol_l.isra.0+0xaa>
   34a5e:	4663      	mov	r3, ip
   34a60:	4282      	cmp	r2, r0
   34a62:	d306      	bcc.n	34a72 <_strtol_l.isra.0+0xaa>
   34a64:	d102      	bne.n	34a6c <_strtol_l.isra.0+0xa4>
   34a66:	9904      	ldr	r1, [sp, #16]
   34a68:	42a1      	cmp	r1, r4
   34a6a:	db02      	blt.n	34a72 <_strtol_l.isra.0+0xaa>
   34a6c:	2301      	movs	r3, #1
   34a6e:	4378      	muls	r0, r7
   34a70:	1820      	adds	r0, r4, r0
   34a72:	782c      	ldrb	r4, [r5, #0]
   34a74:	3501      	adds	r5, #1
   34a76:	e7e9      	b.n	34a4c <_strtol_l.isra.0+0x84>
   34a78:	270a      	movs	r7, #10
   34a7a:	e7d5      	b.n	34a28 <_strtol_l.isra.0+0x60>
   34a7c:	0021      	movs	r1, r4
   34a7e:	3941      	subs	r1, #65	; 0x41
   34a80:	2919      	cmp	r1, #25
   34a82:	d801      	bhi.n	34a88 <_strtol_l.isra.0+0xc0>
   34a84:	3c37      	subs	r4, #55	; 0x37
   34a86:	e7e6      	b.n	34a56 <_strtol_l.isra.0+0x8e>
   34a88:	0021      	movs	r1, r4
   34a8a:	3961      	subs	r1, #97	; 0x61
   34a8c:	2919      	cmp	r1, #25
   34a8e:	d801      	bhi.n	34a94 <_strtol_l.isra.0+0xcc>
   34a90:	3c57      	subs	r4, #87	; 0x57
   34a92:	e7e0      	b.n	34a56 <_strtol_l.isra.0+0x8e>
   34a94:	1c5a      	adds	r2, r3, #1
   34a96:	d108      	bne.n	34aaa <_strtol_l.isra.0+0xe2>
   34a98:	9a05      	ldr	r2, [sp, #20]
   34a9a:	3323      	adds	r3, #35	; 0x23
   34a9c:	6013      	str	r3, [r2, #0]
   34a9e:	9b02      	ldr	r3, [sp, #8]
   34aa0:	0030      	movs	r0, r6
   34aa2:	2b00      	cmp	r3, #0
   34aa4:	d10b      	bne.n	34abe <_strtol_l.isra.0+0xf6>
   34aa6:	b007      	add	sp, #28
   34aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34aaa:	9a01      	ldr	r2, [sp, #4]
   34aac:	2a00      	cmp	r2, #0
   34aae:	d000      	beq.n	34ab2 <_strtol_l.isra.0+0xea>
   34ab0:	4240      	negs	r0, r0
   34ab2:	9a02      	ldr	r2, [sp, #8]
   34ab4:	2a00      	cmp	r2, #0
   34ab6:	d0f6      	beq.n	34aa6 <_strtol_l.isra.0+0xde>
   34ab8:	9a03      	ldr	r2, [sp, #12]
   34aba:	2b00      	cmp	r3, #0
   34abc:	d000      	beq.n	34ac0 <_strtol_l.isra.0+0xf8>
   34abe:	1e6a      	subs	r2, r5, #1
   34ac0:	9b02      	ldr	r3, [sp, #8]
   34ac2:	601a      	str	r2, [r3, #0]
   34ac4:	e7ef      	b.n	34aa6 <_strtol_l.isra.0+0xde>
   34ac6:	2430      	movs	r4, #48	; 0x30
   34ac8:	2f00      	cmp	r7, #0
   34aca:	d1ad      	bne.n	34a28 <_strtol_l.isra.0+0x60>
   34acc:	3708      	adds	r7, #8
   34ace:	e7ab      	b.n	34a28 <_strtol_l.isra.0+0x60>
   34ad0:	7fffffff 	.word	0x7fffffff

00034ad4 <strtol>:
   34ad4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   34ad6:	0013      	movs	r3, r2
   34ad8:	4a06      	ldr	r2, [pc, #24]	; (34af4 <strtol+0x20>)
   34ada:	0005      	movs	r5, r0
   34adc:	6810      	ldr	r0, [r2, #0]
   34ade:	6a04      	ldr	r4, [r0, #32]
   34ae0:	2c00      	cmp	r4, #0
   34ae2:	d100      	bne.n	34ae6 <strtol+0x12>
   34ae4:	4c04      	ldr	r4, [pc, #16]	; (34af8 <strtol+0x24>)
   34ae6:	000a      	movs	r2, r1
   34ae8:	9400      	str	r4, [sp, #0]
   34aea:	0029      	movs	r1, r5
   34aec:	f7ff ff6c 	bl	349c8 <_strtol_l.isra.0>
   34af0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   34af2:	46c0      	nop			; (mov r8, r8)
   34af4:	20000120 	.word	0x20000120
   34af8:	20000184 	.word	0x20000184

00034afc <_vsniprintf_r>:
   34afc:	b530      	push	{r4, r5, lr}
   34afe:	0014      	movs	r4, r2
   34b00:	b09b      	sub	sp, #108	; 0x6c
   34b02:	0005      	movs	r5, r0
   34b04:	001a      	movs	r2, r3
   34b06:	2c00      	cmp	r4, #0
   34b08:	da05      	bge.n	34b16 <_vsniprintf_r+0x1a>
   34b0a:	238b      	movs	r3, #139	; 0x8b
   34b0c:	6003      	str	r3, [r0, #0]
   34b0e:	2001      	movs	r0, #1
   34b10:	4240      	negs	r0, r0
   34b12:	b01b      	add	sp, #108	; 0x6c
   34b14:	bd30      	pop	{r4, r5, pc}
   34b16:	2382      	movs	r3, #130	; 0x82
   34b18:	4668      	mov	r0, sp
   34b1a:	009b      	lsls	r3, r3, #2
   34b1c:	8183      	strh	r3, [r0, #12]
   34b1e:	2300      	movs	r3, #0
   34b20:	9100      	str	r1, [sp, #0]
   34b22:	9104      	str	r1, [sp, #16]
   34b24:	429c      	cmp	r4, r3
   34b26:	d000      	beq.n	34b2a <_vsniprintf_r+0x2e>
   34b28:	1e63      	subs	r3, r4, #1
   34b2a:	9302      	str	r3, [sp, #8]
   34b2c:	9305      	str	r3, [sp, #20]
   34b2e:	2301      	movs	r3, #1
   34b30:	4669      	mov	r1, sp
   34b32:	425b      	negs	r3, r3
   34b34:	81cb      	strh	r3, [r1, #14]
   34b36:	0028      	movs	r0, r5
   34b38:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   34b3a:	f000 fb63 	bl	35204 <_svfiprintf_r>
   34b3e:	1c43      	adds	r3, r0, #1
   34b40:	da01      	bge.n	34b46 <_vsniprintf_r+0x4a>
   34b42:	238b      	movs	r3, #139	; 0x8b
   34b44:	602b      	str	r3, [r5, #0]
   34b46:	2c00      	cmp	r4, #0
   34b48:	d0e3      	beq.n	34b12 <_vsniprintf_r+0x16>
   34b4a:	2300      	movs	r3, #0
   34b4c:	9a00      	ldr	r2, [sp, #0]
   34b4e:	7013      	strb	r3, [r2, #0]
   34b50:	e7df      	b.n	34b12 <_vsniprintf_r+0x16>
	...

00034b54 <vsniprintf>:
   34b54:	b507      	push	{r0, r1, r2, lr}
   34b56:	9300      	str	r3, [sp, #0]
   34b58:	0013      	movs	r3, r2
   34b5a:	000a      	movs	r2, r1
   34b5c:	0001      	movs	r1, r0
   34b5e:	4802      	ldr	r0, [pc, #8]	; (34b68 <vsniprintf+0x14>)
   34b60:	6800      	ldr	r0, [r0, #0]
   34b62:	f7ff ffcb 	bl	34afc <_vsniprintf_r>
   34b66:	bd0e      	pop	{r1, r2, r3, pc}
   34b68:	20000120 	.word	0x20000120

00034b6c <__swbuf_r>:
   34b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34b6e:	0005      	movs	r5, r0
   34b70:	000e      	movs	r6, r1
   34b72:	0014      	movs	r4, r2
   34b74:	2800      	cmp	r0, #0
   34b76:	d004      	beq.n	34b82 <__swbuf_r+0x16>
   34b78:	6983      	ldr	r3, [r0, #24]
   34b7a:	2b00      	cmp	r3, #0
   34b7c:	d101      	bne.n	34b82 <__swbuf_r+0x16>
   34b7e:	f000 f9b9 	bl	34ef4 <__sinit>
   34b82:	4b22      	ldr	r3, [pc, #136]	; (34c0c <__swbuf_r+0xa0>)
   34b84:	429c      	cmp	r4, r3
   34b86:	d12d      	bne.n	34be4 <__swbuf_r+0x78>
   34b88:	686c      	ldr	r4, [r5, #4]
   34b8a:	69a3      	ldr	r3, [r4, #24]
   34b8c:	60a3      	str	r3, [r4, #8]
   34b8e:	89a3      	ldrh	r3, [r4, #12]
   34b90:	071b      	lsls	r3, r3, #28
   34b92:	d531      	bpl.n	34bf8 <__swbuf_r+0x8c>
   34b94:	6923      	ldr	r3, [r4, #16]
   34b96:	2b00      	cmp	r3, #0
   34b98:	d02e      	beq.n	34bf8 <__swbuf_r+0x8c>
   34b9a:	6823      	ldr	r3, [r4, #0]
   34b9c:	6922      	ldr	r2, [r4, #16]
   34b9e:	b2f7      	uxtb	r7, r6
   34ba0:	1a98      	subs	r0, r3, r2
   34ba2:	6963      	ldr	r3, [r4, #20]
   34ba4:	b2f6      	uxtb	r6, r6
   34ba6:	4298      	cmp	r0, r3
   34ba8:	db05      	blt.n	34bb6 <__swbuf_r+0x4a>
   34baa:	0021      	movs	r1, r4
   34bac:	0028      	movs	r0, r5
   34bae:	f000 f933 	bl	34e18 <_fflush_r>
   34bb2:	2800      	cmp	r0, #0
   34bb4:	d126      	bne.n	34c04 <__swbuf_r+0x98>
   34bb6:	68a3      	ldr	r3, [r4, #8]
   34bb8:	3001      	adds	r0, #1
   34bba:	3b01      	subs	r3, #1
   34bbc:	60a3      	str	r3, [r4, #8]
   34bbe:	6823      	ldr	r3, [r4, #0]
   34bc0:	1c5a      	adds	r2, r3, #1
   34bc2:	6022      	str	r2, [r4, #0]
   34bc4:	701f      	strb	r7, [r3, #0]
   34bc6:	6963      	ldr	r3, [r4, #20]
   34bc8:	4298      	cmp	r0, r3
   34bca:	d004      	beq.n	34bd6 <__swbuf_r+0x6a>
   34bcc:	89a3      	ldrh	r3, [r4, #12]
   34bce:	07db      	lsls	r3, r3, #31
   34bd0:	d51a      	bpl.n	34c08 <__swbuf_r+0x9c>
   34bd2:	2e0a      	cmp	r6, #10
   34bd4:	d118      	bne.n	34c08 <__swbuf_r+0x9c>
   34bd6:	0021      	movs	r1, r4
   34bd8:	0028      	movs	r0, r5
   34bda:	f000 f91d 	bl	34e18 <_fflush_r>
   34bde:	2800      	cmp	r0, #0
   34be0:	d012      	beq.n	34c08 <__swbuf_r+0x9c>
   34be2:	e00f      	b.n	34c04 <__swbuf_r+0x98>
   34be4:	4b0a      	ldr	r3, [pc, #40]	; (34c10 <__swbuf_r+0xa4>)
   34be6:	429c      	cmp	r4, r3
   34be8:	d101      	bne.n	34bee <__swbuf_r+0x82>
   34bea:	68ac      	ldr	r4, [r5, #8]
   34bec:	e7cd      	b.n	34b8a <__swbuf_r+0x1e>
   34bee:	4b09      	ldr	r3, [pc, #36]	; (34c14 <__swbuf_r+0xa8>)
   34bf0:	429c      	cmp	r4, r3
   34bf2:	d1ca      	bne.n	34b8a <__swbuf_r+0x1e>
   34bf4:	68ec      	ldr	r4, [r5, #12]
   34bf6:	e7c8      	b.n	34b8a <__swbuf_r+0x1e>
   34bf8:	0021      	movs	r1, r4
   34bfa:	0028      	movs	r0, r5
   34bfc:	f000 f80c 	bl	34c18 <__swsetup_r>
   34c00:	2800      	cmp	r0, #0
   34c02:	d0ca      	beq.n	34b9a <__swbuf_r+0x2e>
   34c04:	2601      	movs	r6, #1
   34c06:	4276      	negs	r6, r6
   34c08:	0030      	movs	r0, r6
   34c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34c0c:	00039b50 	.word	0x00039b50
   34c10:	00039b70 	.word	0x00039b70
   34c14:	00039b30 	.word	0x00039b30

00034c18 <__swsetup_r>:
   34c18:	4b36      	ldr	r3, [pc, #216]	; (34cf4 <__swsetup_r+0xdc>)
   34c1a:	b570      	push	{r4, r5, r6, lr}
   34c1c:	681d      	ldr	r5, [r3, #0]
   34c1e:	0006      	movs	r6, r0
   34c20:	000c      	movs	r4, r1
   34c22:	2d00      	cmp	r5, #0
   34c24:	d005      	beq.n	34c32 <__swsetup_r+0x1a>
   34c26:	69ab      	ldr	r3, [r5, #24]
   34c28:	2b00      	cmp	r3, #0
   34c2a:	d102      	bne.n	34c32 <__swsetup_r+0x1a>
   34c2c:	0028      	movs	r0, r5
   34c2e:	f000 f961 	bl	34ef4 <__sinit>
   34c32:	4b31      	ldr	r3, [pc, #196]	; (34cf8 <__swsetup_r+0xe0>)
   34c34:	429c      	cmp	r4, r3
   34c36:	d10f      	bne.n	34c58 <__swsetup_r+0x40>
   34c38:	686c      	ldr	r4, [r5, #4]
   34c3a:	230c      	movs	r3, #12
   34c3c:	5ee2      	ldrsh	r2, [r4, r3]
   34c3e:	b293      	uxth	r3, r2
   34c40:	0719      	lsls	r1, r3, #28
   34c42:	d42d      	bmi.n	34ca0 <__swsetup_r+0x88>
   34c44:	06d9      	lsls	r1, r3, #27
   34c46:	d411      	bmi.n	34c6c <__swsetup_r+0x54>
   34c48:	2309      	movs	r3, #9
   34c4a:	2001      	movs	r0, #1
   34c4c:	6033      	str	r3, [r6, #0]
   34c4e:	3337      	adds	r3, #55	; 0x37
   34c50:	4313      	orrs	r3, r2
   34c52:	81a3      	strh	r3, [r4, #12]
   34c54:	4240      	negs	r0, r0
   34c56:	bd70      	pop	{r4, r5, r6, pc}
   34c58:	4b28      	ldr	r3, [pc, #160]	; (34cfc <__swsetup_r+0xe4>)
   34c5a:	429c      	cmp	r4, r3
   34c5c:	d101      	bne.n	34c62 <__swsetup_r+0x4a>
   34c5e:	68ac      	ldr	r4, [r5, #8]
   34c60:	e7eb      	b.n	34c3a <__swsetup_r+0x22>
   34c62:	4b27      	ldr	r3, [pc, #156]	; (34d00 <__swsetup_r+0xe8>)
   34c64:	429c      	cmp	r4, r3
   34c66:	d1e8      	bne.n	34c3a <__swsetup_r+0x22>
   34c68:	68ec      	ldr	r4, [r5, #12]
   34c6a:	e7e6      	b.n	34c3a <__swsetup_r+0x22>
   34c6c:	075b      	lsls	r3, r3, #29
   34c6e:	d513      	bpl.n	34c98 <__swsetup_r+0x80>
   34c70:	6b61      	ldr	r1, [r4, #52]	; 0x34
   34c72:	2900      	cmp	r1, #0
   34c74:	d008      	beq.n	34c88 <__swsetup_r+0x70>
   34c76:	0023      	movs	r3, r4
   34c78:	3344      	adds	r3, #68	; 0x44
   34c7a:	4299      	cmp	r1, r3
   34c7c:	d002      	beq.n	34c84 <__swsetup_r+0x6c>
   34c7e:	0030      	movs	r0, r6
   34c80:	f7ff fc86 	bl	34590 <_free_r>
   34c84:	2300      	movs	r3, #0
   34c86:	6363      	str	r3, [r4, #52]	; 0x34
   34c88:	2224      	movs	r2, #36	; 0x24
   34c8a:	89a3      	ldrh	r3, [r4, #12]
   34c8c:	4393      	bics	r3, r2
   34c8e:	81a3      	strh	r3, [r4, #12]
   34c90:	2300      	movs	r3, #0
   34c92:	6063      	str	r3, [r4, #4]
   34c94:	6923      	ldr	r3, [r4, #16]
   34c96:	6023      	str	r3, [r4, #0]
   34c98:	2308      	movs	r3, #8
   34c9a:	89a2      	ldrh	r2, [r4, #12]
   34c9c:	4313      	orrs	r3, r2
   34c9e:	81a3      	strh	r3, [r4, #12]
   34ca0:	6923      	ldr	r3, [r4, #16]
   34ca2:	2b00      	cmp	r3, #0
   34ca4:	d10b      	bne.n	34cbe <__swsetup_r+0xa6>
   34ca6:	21a0      	movs	r1, #160	; 0xa0
   34ca8:	2280      	movs	r2, #128	; 0x80
   34caa:	89a3      	ldrh	r3, [r4, #12]
   34cac:	0089      	lsls	r1, r1, #2
   34cae:	0092      	lsls	r2, r2, #2
   34cb0:	400b      	ands	r3, r1
   34cb2:	4293      	cmp	r3, r2
   34cb4:	d003      	beq.n	34cbe <__swsetup_r+0xa6>
   34cb6:	0021      	movs	r1, r4
   34cb8:	0030      	movs	r0, r6
   34cba:	f000 f9e9 	bl	35090 <__smakebuf_r>
   34cbe:	2301      	movs	r3, #1
   34cc0:	89a2      	ldrh	r2, [r4, #12]
   34cc2:	4013      	ands	r3, r2
   34cc4:	d011      	beq.n	34cea <__swsetup_r+0xd2>
   34cc6:	2300      	movs	r3, #0
   34cc8:	60a3      	str	r3, [r4, #8]
   34cca:	6963      	ldr	r3, [r4, #20]
   34ccc:	425b      	negs	r3, r3
   34cce:	61a3      	str	r3, [r4, #24]
   34cd0:	2000      	movs	r0, #0
   34cd2:	6923      	ldr	r3, [r4, #16]
   34cd4:	4283      	cmp	r3, r0
   34cd6:	d1be      	bne.n	34c56 <__swsetup_r+0x3e>
   34cd8:	230c      	movs	r3, #12
   34cda:	5ee2      	ldrsh	r2, [r4, r3]
   34cdc:	0613      	lsls	r3, r2, #24
   34cde:	d5ba      	bpl.n	34c56 <__swsetup_r+0x3e>
   34ce0:	2340      	movs	r3, #64	; 0x40
   34ce2:	4313      	orrs	r3, r2
   34ce4:	81a3      	strh	r3, [r4, #12]
   34ce6:	3801      	subs	r0, #1
   34ce8:	e7b5      	b.n	34c56 <__swsetup_r+0x3e>
   34cea:	0792      	lsls	r2, r2, #30
   34cec:	d400      	bmi.n	34cf0 <__swsetup_r+0xd8>
   34cee:	6963      	ldr	r3, [r4, #20]
   34cf0:	60a3      	str	r3, [r4, #8]
   34cf2:	e7ed      	b.n	34cd0 <__swsetup_r+0xb8>
   34cf4:	20000120 	.word	0x20000120
   34cf8:	00039b50 	.word	0x00039b50
   34cfc:	00039b70 	.word	0x00039b70
   34d00:	00039b30 	.word	0x00039b30

00034d04 <__sflush_r>:
   34d04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34d06:	898a      	ldrh	r2, [r1, #12]
   34d08:	0005      	movs	r5, r0
   34d0a:	000c      	movs	r4, r1
   34d0c:	0713      	lsls	r3, r2, #28
   34d0e:	d460      	bmi.n	34dd2 <__sflush_r+0xce>
   34d10:	684b      	ldr	r3, [r1, #4]
   34d12:	2b00      	cmp	r3, #0
   34d14:	dc04      	bgt.n	34d20 <__sflush_r+0x1c>
   34d16:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   34d18:	2b00      	cmp	r3, #0
   34d1a:	dc01      	bgt.n	34d20 <__sflush_r+0x1c>
   34d1c:	2000      	movs	r0, #0
   34d1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   34d20:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   34d22:	2f00      	cmp	r7, #0
   34d24:	d0fa      	beq.n	34d1c <__sflush_r+0x18>
   34d26:	2300      	movs	r3, #0
   34d28:	682e      	ldr	r6, [r5, #0]
   34d2a:	602b      	str	r3, [r5, #0]
   34d2c:	2380      	movs	r3, #128	; 0x80
   34d2e:	015b      	lsls	r3, r3, #5
   34d30:	401a      	ands	r2, r3
   34d32:	d034      	beq.n	34d9e <__sflush_r+0x9a>
   34d34:	6d60      	ldr	r0, [r4, #84]	; 0x54
   34d36:	89a3      	ldrh	r3, [r4, #12]
   34d38:	075b      	lsls	r3, r3, #29
   34d3a:	d506      	bpl.n	34d4a <__sflush_r+0x46>
   34d3c:	6863      	ldr	r3, [r4, #4]
   34d3e:	1ac0      	subs	r0, r0, r3
   34d40:	6b63      	ldr	r3, [r4, #52]	; 0x34
   34d42:	2b00      	cmp	r3, #0
   34d44:	d001      	beq.n	34d4a <__sflush_r+0x46>
   34d46:	6c23      	ldr	r3, [r4, #64]	; 0x40
   34d48:	1ac0      	subs	r0, r0, r3
   34d4a:	0002      	movs	r2, r0
   34d4c:	6a21      	ldr	r1, [r4, #32]
   34d4e:	2300      	movs	r3, #0
   34d50:	0028      	movs	r0, r5
   34d52:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   34d54:	47b8      	blx	r7
   34d56:	89a1      	ldrh	r1, [r4, #12]
   34d58:	1c43      	adds	r3, r0, #1
   34d5a:	d106      	bne.n	34d6a <__sflush_r+0x66>
   34d5c:	682b      	ldr	r3, [r5, #0]
   34d5e:	2b1d      	cmp	r3, #29
   34d60:	d831      	bhi.n	34dc6 <__sflush_r+0xc2>
   34d62:	4a2c      	ldr	r2, [pc, #176]	; (34e14 <__sflush_r+0x110>)
   34d64:	40da      	lsrs	r2, r3
   34d66:	07d3      	lsls	r3, r2, #31
   34d68:	d52d      	bpl.n	34dc6 <__sflush_r+0xc2>
   34d6a:	2300      	movs	r3, #0
   34d6c:	6063      	str	r3, [r4, #4]
   34d6e:	6923      	ldr	r3, [r4, #16]
   34d70:	6023      	str	r3, [r4, #0]
   34d72:	04cb      	lsls	r3, r1, #19
   34d74:	d505      	bpl.n	34d82 <__sflush_r+0x7e>
   34d76:	1c43      	adds	r3, r0, #1
   34d78:	d102      	bne.n	34d80 <__sflush_r+0x7c>
   34d7a:	682b      	ldr	r3, [r5, #0]
   34d7c:	2b00      	cmp	r3, #0
   34d7e:	d100      	bne.n	34d82 <__sflush_r+0x7e>
   34d80:	6560      	str	r0, [r4, #84]	; 0x54
   34d82:	6b61      	ldr	r1, [r4, #52]	; 0x34
   34d84:	602e      	str	r6, [r5, #0]
   34d86:	2900      	cmp	r1, #0
   34d88:	d0c8      	beq.n	34d1c <__sflush_r+0x18>
   34d8a:	0023      	movs	r3, r4
   34d8c:	3344      	adds	r3, #68	; 0x44
   34d8e:	4299      	cmp	r1, r3
   34d90:	d002      	beq.n	34d98 <__sflush_r+0x94>
   34d92:	0028      	movs	r0, r5
   34d94:	f7ff fbfc 	bl	34590 <_free_r>
   34d98:	2000      	movs	r0, #0
   34d9a:	6360      	str	r0, [r4, #52]	; 0x34
   34d9c:	e7bf      	b.n	34d1e <__sflush_r+0x1a>
   34d9e:	2301      	movs	r3, #1
   34da0:	6a21      	ldr	r1, [r4, #32]
   34da2:	0028      	movs	r0, r5
   34da4:	47b8      	blx	r7
   34da6:	1c43      	adds	r3, r0, #1
   34da8:	d1c5      	bne.n	34d36 <__sflush_r+0x32>
   34daa:	682b      	ldr	r3, [r5, #0]
   34dac:	2b00      	cmp	r3, #0
   34dae:	d0c2      	beq.n	34d36 <__sflush_r+0x32>
   34db0:	2b1d      	cmp	r3, #29
   34db2:	d001      	beq.n	34db8 <__sflush_r+0xb4>
   34db4:	2b16      	cmp	r3, #22
   34db6:	d101      	bne.n	34dbc <__sflush_r+0xb8>
   34db8:	602e      	str	r6, [r5, #0]
   34dba:	e7af      	b.n	34d1c <__sflush_r+0x18>
   34dbc:	2340      	movs	r3, #64	; 0x40
   34dbe:	89a2      	ldrh	r2, [r4, #12]
   34dc0:	4313      	orrs	r3, r2
   34dc2:	81a3      	strh	r3, [r4, #12]
   34dc4:	e7ab      	b.n	34d1e <__sflush_r+0x1a>
   34dc6:	2340      	movs	r3, #64	; 0x40
   34dc8:	430b      	orrs	r3, r1
   34dca:	2001      	movs	r0, #1
   34dcc:	81a3      	strh	r3, [r4, #12]
   34dce:	4240      	negs	r0, r0
   34dd0:	e7a5      	b.n	34d1e <__sflush_r+0x1a>
   34dd2:	690f      	ldr	r7, [r1, #16]
   34dd4:	2f00      	cmp	r7, #0
   34dd6:	d0a1      	beq.n	34d1c <__sflush_r+0x18>
   34dd8:	680b      	ldr	r3, [r1, #0]
   34dda:	600f      	str	r7, [r1, #0]
   34ddc:	1bdb      	subs	r3, r3, r7
   34dde:	9301      	str	r3, [sp, #4]
   34de0:	2300      	movs	r3, #0
   34de2:	0792      	lsls	r2, r2, #30
   34de4:	d100      	bne.n	34de8 <__sflush_r+0xe4>
   34de6:	694b      	ldr	r3, [r1, #20]
   34de8:	60a3      	str	r3, [r4, #8]
   34dea:	9b01      	ldr	r3, [sp, #4]
   34dec:	2b00      	cmp	r3, #0
   34dee:	dc00      	bgt.n	34df2 <__sflush_r+0xee>
   34df0:	e794      	b.n	34d1c <__sflush_r+0x18>
   34df2:	9b01      	ldr	r3, [sp, #4]
   34df4:	003a      	movs	r2, r7
   34df6:	6a21      	ldr	r1, [r4, #32]
   34df8:	0028      	movs	r0, r5
   34dfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   34dfc:	47b0      	blx	r6
   34dfe:	2800      	cmp	r0, #0
   34e00:	dc03      	bgt.n	34e0a <__sflush_r+0x106>
   34e02:	2340      	movs	r3, #64	; 0x40
   34e04:	89a2      	ldrh	r2, [r4, #12]
   34e06:	4313      	orrs	r3, r2
   34e08:	e7df      	b.n	34dca <__sflush_r+0xc6>
   34e0a:	9b01      	ldr	r3, [sp, #4]
   34e0c:	183f      	adds	r7, r7, r0
   34e0e:	1a1b      	subs	r3, r3, r0
   34e10:	9301      	str	r3, [sp, #4]
   34e12:	e7ea      	b.n	34dea <__sflush_r+0xe6>
   34e14:	20400001 	.word	0x20400001

00034e18 <_fflush_r>:
   34e18:	690b      	ldr	r3, [r1, #16]
   34e1a:	b570      	push	{r4, r5, r6, lr}
   34e1c:	0005      	movs	r5, r0
   34e1e:	000c      	movs	r4, r1
   34e20:	2b00      	cmp	r3, #0
   34e22:	d101      	bne.n	34e28 <_fflush_r+0x10>
   34e24:	2000      	movs	r0, #0
   34e26:	bd70      	pop	{r4, r5, r6, pc}
   34e28:	2800      	cmp	r0, #0
   34e2a:	d004      	beq.n	34e36 <_fflush_r+0x1e>
   34e2c:	6983      	ldr	r3, [r0, #24]
   34e2e:	2b00      	cmp	r3, #0
   34e30:	d101      	bne.n	34e36 <_fflush_r+0x1e>
   34e32:	f000 f85f 	bl	34ef4 <__sinit>
   34e36:	4b0b      	ldr	r3, [pc, #44]	; (34e64 <_fflush_r+0x4c>)
   34e38:	429c      	cmp	r4, r3
   34e3a:	d109      	bne.n	34e50 <_fflush_r+0x38>
   34e3c:	686c      	ldr	r4, [r5, #4]
   34e3e:	220c      	movs	r2, #12
   34e40:	5ea3      	ldrsh	r3, [r4, r2]
   34e42:	2b00      	cmp	r3, #0
   34e44:	d0ee      	beq.n	34e24 <_fflush_r+0xc>
   34e46:	0021      	movs	r1, r4
   34e48:	0028      	movs	r0, r5
   34e4a:	f7ff ff5b 	bl	34d04 <__sflush_r>
   34e4e:	e7ea      	b.n	34e26 <_fflush_r+0xe>
   34e50:	4b05      	ldr	r3, [pc, #20]	; (34e68 <_fflush_r+0x50>)
   34e52:	429c      	cmp	r4, r3
   34e54:	d101      	bne.n	34e5a <_fflush_r+0x42>
   34e56:	68ac      	ldr	r4, [r5, #8]
   34e58:	e7f1      	b.n	34e3e <_fflush_r+0x26>
   34e5a:	4b04      	ldr	r3, [pc, #16]	; (34e6c <_fflush_r+0x54>)
   34e5c:	429c      	cmp	r4, r3
   34e5e:	d1ee      	bne.n	34e3e <_fflush_r+0x26>
   34e60:	68ec      	ldr	r4, [r5, #12]
   34e62:	e7ec      	b.n	34e3e <_fflush_r+0x26>
   34e64:	00039b50 	.word	0x00039b50
   34e68:	00039b70 	.word	0x00039b70
   34e6c:	00039b30 	.word	0x00039b30

00034e70 <_cleanup_r>:
   34e70:	b510      	push	{r4, lr}
   34e72:	4902      	ldr	r1, [pc, #8]	; (34e7c <_cleanup_r+0xc>)
   34e74:	f000 f8b2 	bl	34fdc <_fwalk_reent>
   34e78:	bd10      	pop	{r4, pc}
   34e7a:	46c0      	nop			; (mov r8, r8)
   34e7c:	00034e19 	.word	0x00034e19

00034e80 <std.isra.0>:
   34e80:	2300      	movs	r3, #0
   34e82:	b510      	push	{r4, lr}
   34e84:	0004      	movs	r4, r0
   34e86:	6003      	str	r3, [r0, #0]
   34e88:	6043      	str	r3, [r0, #4]
   34e8a:	6083      	str	r3, [r0, #8]
   34e8c:	8181      	strh	r1, [r0, #12]
   34e8e:	6643      	str	r3, [r0, #100]	; 0x64
   34e90:	81c2      	strh	r2, [r0, #14]
   34e92:	6103      	str	r3, [r0, #16]
   34e94:	6143      	str	r3, [r0, #20]
   34e96:	6183      	str	r3, [r0, #24]
   34e98:	0019      	movs	r1, r3
   34e9a:	2208      	movs	r2, #8
   34e9c:	305c      	adds	r0, #92	; 0x5c
   34e9e:	f7ff fb6e 	bl	3457e <memset>
   34ea2:	4b05      	ldr	r3, [pc, #20]	; (34eb8 <std.isra.0+0x38>)
   34ea4:	6224      	str	r4, [r4, #32]
   34ea6:	6263      	str	r3, [r4, #36]	; 0x24
   34ea8:	4b04      	ldr	r3, [pc, #16]	; (34ebc <std.isra.0+0x3c>)
   34eaa:	62a3      	str	r3, [r4, #40]	; 0x28
   34eac:	4b04      	ldr	r3, [pc, #16]	; (34ec0 <std.isra.0+0x40>)
   34eae:	62e3      	str	r3, [r4, #44]	; 0x2c
   34eb0:	4b04      	ldr	r3, [pc, #16]	; (34ec4 <std.isra.0+0x44>)
   34eb2:	6323      	str	r3, [r4, #48]	; 0x30
   34eb4:	bd10      	pop	{r4, pc}
   34eb6:	46c0      	nop			; (mov r8, r8)
   34eb8:	0003571d 	.word	0x0003571d
   34ebc:	00035745 	.word	0x00035745
   34ec0:	0003577d 	.word	0x0003577d
   34ec4:	000357a9 	.word	0x000357a9

00034ec8 <__sfmoreglue>:
   34ec8:	b570      	push	{r4, r5, r6, lr}
   34eca:	2568      	movs	r5, #104	; 0x68
   34ecc:	1e4a      	subs	r2, r1, #1
   34ece:	4355      	muls	r5, r2
   34ed0:	000e      	movs	r6, r1
   34ed2:	0029      	movs	r1, r5
   34ed4:	3174      	adds	r1, #116	; 0x74
   34ed6:	f7ff fba5 	bl	34624 <_malloc_r>
   34eda:	1e04      	subs	r4, r0, #0
   34edc:	d008      	beq.n	34ef0 <__sfmoreglue+0x28>
   34ede:	2100      	movs	r1, #0
   34ee0:	002a      	movs	r2, r5
   34ee2:	6001      	str	r1, [r0, #0]
   34ee4:	6046      	str	r6, [r0, #4]
   34ee6:	300c      	adds	r0, #12
   34ee8:	60a0      	str	r0, [r4, #8]
   34eea:	3268      	adds	r2, #104	; 0x68
   34eec:	f7ff fb47 	bl	3457e <memset>
   34ef0:	0020      	movs	r0, r4
   34ef2:	bd70      	pop	{r4, r5, r6, pc}

00034ef4 <__sinit>:
   34ef4:	6983      	ldr	r3, [r0, #24]
   34ef6:	b513      	push	{r0, r1, r4, lr}
   34ef8:	0004      	movs	r4, r0
   34efa:	2b00      	cmp	r3, #0
   34efc:	d128      	bne.n	34f50 <__sinit+0x5c>
   34efe:	6483      	str	r3, [r0, #72]	; 0x48
   34f00:	64c3      	str	r3, [r0, #76]	; 0x4c
   34f02:	6503      	str	r3, [r0, #80]	; 0x50
   34f04:	4b13      	ldr	r3, [pc, #76]	; (34f54 <__sinit+0x60>)
   34f06:	4a14      	ldr	r2, [pc, #80]	; (34f58 <__sinit+0x64>)
   34f08:	681b      	ldr	r3, [r3, #0]
   34f0a:	6282      	str	r2, [r0, #40]	; 0x28
   34f0c:	9301      	str	r3, [sp, #4]
   34f0e:	4298      	cmp	r0, r3
   34f10:	d101      	bne.n	34f16 <__sinit+0x22>
   34f12:	2301      	movs	r3, #1
   34f14:	6183      	str	r3, [r0, #24]
   34f16:	0020      	movs	r0, r4
   34f18:	f000 f820 	bl	34f5c <__sfp>
   34f1c:	6060      	str	r0, [r4, #4]
   34f1e:	0020      	movs	r0, r4
   34f20:	f000 f81c 	bl	34f5c <__sfp>
   34f24:	60a0      	str	r0, [r4, #8]
   34f26:	0020      	movs	r0, r4
   34f28:	f000 f818 	bl	34f5c <__sfp>
   34f2c:	2200      	movs	r2, #0
   34f2e:	60e0      	str	r0, [r4, #12]
   34f30:	2104      	movs	r1, #4
   34f32:	6860      	ldr	r0, [r4, #4]
   34f34:	f7ff ffa4 	bl	34e80 <std.isra.0>
   34f38:	2201      	movs	r2, #1
   34f3a:	2109      	movs	r1, #9
   34f3c:	68a0      	ldr	r0, [r4, #8]
   34f3e:	f7ff ff9f 	bl	34e80 <std.isra.0>
   34f42:	2202      	movs	r2, #2
   34f44:	2112      	movs	r1, #18
   34f46:	68e0      	ldr	r0, [r4, #12]
   34f48:	f7ff ff9a 	bl	34e80 <std.isra.0>
   34f4c:	2301      	movs	r3, #1
   34f4e:	61a3      	str	r3, [r4, #24]
   34f50:	bd13      	pop	{r0, r1, r4, pc}
   34f52:	46c0      	nop			; (mov r8, r8)
   34f54:	00039b2c 	.word	0x00039b2c
   34f58:	00034e71 	.word	0x00034e71

00034f5c <__sfp>:
   34f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34f5e:	4b1e      	ldr	r3, [pc, #120]	; (34fd8 <__sfp+0x7c>)
   34f60:	0007      	movs	r7, r0
   34f62:	681e      	ldr	r6, [r3, #0]
   34f64:	69b3      	ldr	r3, [r6, #24]
   34f66:	2b00      	cmp	r3, #0
   34f68:	d102      	bne.n	34f70 <__sfp+0x14>
   34f6a:	0030      	movs	r0, r6
   34f6c:	f7ff ffc2 	bl	34ef4 <__sinit>
   34f70:	3648      	adds	r6, #72	; 0x48
   34f72:	68b4      	ldr	r4, [r6, #8]
   34f74:	6873      	ldr	r3, [r6, #4]
   34f76:	3b01      	subs	r3, #1
   34f78:	d504      	bpl.n	34f84 <__sfp+0x28>
   34f7a:	6833      	ldr	r3, [r6, #0]
   34f7c:	2b00      	cmp	r3, #0
   34f7e:	d007      	beq.n	34f90 <__sfp+0x34>
   34f80:	6836      	ldr	r6, [r6, #0]
   34f82:	e7f6      	b.n	34f72 <__sfp+0x16>
   34f84:	220c      	movs	r2, #12
   34f86:	5ea5      	ldrsh	r5, [r4, r2]
   34f88:	2d00      	cmp	r5, #0
   34f8a:	d00d      	beq.n	34fa8 <__sfp+0x4c>
   34f8c:	3468      	adds	r4, #104	; 0x68
   34f8e:	e7f2      	b.n	34f76 <__sfp+0x1a>
   34f90:	2104      	movs	r1, #4
   34f92:	0038      	movs	r0, r7
   34f94:	f7ff ff98 	bl	34ec8 <__sfmoreglue>
   34f98:	6030      	str	r0, [r6, #0]
   34f9a:	2800      	cmp	r0, #0
   34f9c:	d1f0      	bne.n	34f80 <__sfp+0x24>
   34f9e:	230c      	movs	r3, #12
   34fa0:	0004      	movs	r4, r0
   34fa2:	603b      	str	r3, [r7, #0]
   34fa4:	0020      	movs	r0, r4
   34fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34fa8:	2301      	movs	r3, #1
   34faa:	0020      	movs	r0, r4
   34fac:	425b      	negs	r3, r3
   34fae:	81e3      	strh	r3, [r4, #14]
   34fb0:	3302      	adds	r3, #2
   34fb2:	81a3      	strh	r3, [r4, #12]
   34fb4:	6665      	str	r5, [r4, #100]	; 0x64
   34fb6:	6025      	str	r5, [r4, #0]
   34fb8:	60a5      	str	r5, [r4, #8]
   34fba:	6065      	str	r5, [r4, #4]
   34fbc:	6125      	str	r5, [r4, #16]
   34fbe:	6165      	str	r5, [r4, #20]
   34fc0:	61a5      	str	r5, [r4, #24]
   34fc2:	2208      	movs	r2, #8
   34fc4:	0029      	movs	r1, r5
   34fc6:	305c      	adds	r0, #92	; 0x5c
   34fc8:	f7ff fad9 	bl	3457e <memset>
   34fcc:	6365      	str	r5, [r4, #52]	; 0x34
   34fce:	63a5      	str	r5, [r4, #56]	; 0x38
   34fd0:	64a5      	str	r5, [r4, #72]	; 0x48
   34fd2:	64e5      	str	r5, [r4, #76]	; 0x4c
   34fd4:	e7e6      	b.n	34fa4 <__sfp+0x48>
   34fd6:	46c0      	nop			; (mov r8, r8)
   34fd8:	00039b2c 	.word	0x00039b2c

00034fdc <_fwalk_reent>:
   34fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34fde:	0004      	movs	r4, r0
   34fe0:	0007      	movs	r7, r0
   34fe2:	2600      	movs	r6, #0
   34fe4:	9101      	str	r1, [sp, #4]
   34fe6:	3448      	adds	r4, #72	; 0x48
   34fe8:	2c00      	cmp	r4, #0
   34fea:	d101      	bne.n	34ff0 <_fwalk_reent+0x14>
   34fec:	0030      	movs	r0, r6
   34fee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   34ff0:	6863      	ldr	r3, [r4, #4]
   34ff2:	68a5      	ldr	r5, [r4, #8]
   34ff4:	9300      	str	r3, [sp, #0]
   34ff6:	9b00      	ldr	r3, [sp, #0]
   34ff8:	3b01      	subs	r3, #1
   34ffa:	9300      	str	r3, [sp, #0]
   34ffc:	d501      	bpl.n	35002 <_fwalk_reent+0x26>
   34ffe:	6824      	ldr	r4, [r4, #0]
   35000:	e7f2      	b.n	34fe8 <_fwalk_reent+0xc>
   35002:	89ab      	ldrh	r3, [r5, #12]
   35004:	2b01      	cmp	r3, #1
   35006:	d908      	bls.n	3501a <_fwalk_reent+0x3e>
   35008:	220e      	movs	r2, #14
   3500a:	5eab      	ldrsh	r3, [r5, r2]
   3500c:	3301      	adds	r3, #1
   3500e:	d004      	beq.n	3501a <_fwalk_reent+0x3e>
   35010:	0029      	movs	r1, r5
   35012:	0038      	movs	r0, r7
   35014:	9b01      	ldr	r3, [sp, #4]
   35016:	4798      	blx	r3
   35018:	4306      	orrs	r6, r0
   3501a:	3568      	adds	r5, #104	; 0x68
   3501c:	e7eb      	b.n	34ff6 <_fwalk_reent+0x1a>

0003501e <__locale_ctype_ptr_l>:
   3501e:	30ec      	adds	r0, #236	; 0xec
   35020:	6800      	ldr	r0, [r0, #0]
   35022:	4770      	bx	lr

00035024 <__locale_ctype_ptr>:
   35024:	4b04      	ldr	r3, [pc, #16]	; (35038 <__locale_ctype_ptr+0x14>)
   35026:	681b      	ldr	r3, [r3, #0]
   35028:	6a1b      	ldr	r3, [r3, #32]
   3502a:	2b00      	cmp	r3, #0
   3502c:	d100      	bne.n	35030 <__locale_ctype_ptr+0xc>
   3502e:	4b03      	ldr	r3, [pc, #12]	; (3503c <__locale_ctype_ptr+0x18>)
   35030:	33ec      	adds	r3, #236	; 0xec
   35032:	6818      	ldr	r0, [r3, #0]
   35034:	4770      	bx	lr
   35036:	46c0      	nop			; (mov r8, r8)
   35038:	20000120 	.word	0x20000120
   3503c:	20000184 	.word	0x20000184

00035040 <__swhatbuf_r>:
   35040:	b570      	push	{r4, r5, r6, lr}
   35042:	000e      	movs	r6, r1
   35044:	001d      	movs	r5, r3
   35046:	230e      	movs	r3, #14
   35048:	5ec9      	ldrsh	r1, [r1, r3]
   3504a:	b090      	sub	sp, #64	; 0x40
   3504c:	0014      	movs	r4, r2
   3504e:	2900      	cmp	r1, #0
   35050:	da07      	bge.n	35062 <__swhatbuf_r+0x22>
   35052:	2300      	movs	r3, #0
   35054:	602b      	str	r3, [r5, #0]
   35056:	89b3      	ldrh	r3, [r6, #12]
   35058:	061b      	lsls	r3, r3, #24
   3505a:	d411      	bmi.n	35080 <__swhatbuf_r+0x40>
   3505c:	2380      	movs	r3, #128	; 0x80
   3505e:	00db      	lsls	r3, r3, #3
   35060:	e00f      	b.n	35082 <__swhatbuf_r+0x42>
   35062:	aa01      	add	r2, sp, #4
   35064:	f000 fbe6 	bl	35834 <_fstat_r>
   35068:	2800      	cmp	r0, #0
   3506a:	dbf2      	blt.n	35052 <__swhatbuf_r+0x12>
   3506c:	22f0      	movs	r2, #240	; 0xf0
   3506e:	9b02      	ldr	r3, [sp, #8]
   35070:	0212      	lsls	r2, r2, #8
   35072:	4013      	ands	r3, r2
   35074:	4a05      	ldr	r2, [pc, #20]	; (3508c <__swhatbuf_r+0x4c>)
   35076:	189b      	adds	r3, r3, r2
   35078:	425a      	negs	r2, r3
   3507a:	4153      	adcs	r3, r2
   3507c:	602b      	str	r3, [r5, #0]
   3507e:	e7ed      	b.n	3505c <__swhatbuf_r+0x1c>
   35080:	2340      	movs	r3, #64	; 0x40
   35082:	2000      	movs	r0, #0
   35084:	6023      	str	r3, [r4, #0]
   35086:	b010      	add	sp, #64	; 0x40
   35088:	bd70      	pop	{r4, r5, r6, pc}
   3508a:	46c0      	nop			; (mov r8, r8)
   3508c:	ffffe000 	.word	0xffffe000

00035090 <__smakebuf_r>:
   35090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   35092:	2602      	movs	r6, #2
   35094:	898b      	ldrh	r3, [r1, #12]
   35096:	0005      	movs	r5, r0
   35098:	000c      	movs	r4, r1
   3509a:	4233      	tst	r3, r6
   3509c:	d006      	beq.n	350ac <__smakebuf_r+0x1c>
   3509e:	0023      	movs	r3, r4
   350a0:	3347      	adds	r3, #71	; 0x47
   350a2:	6023      	str	r3, [r4, #0]
   350a4:	6123      	str	r3, [r4, #16]
   350a6:	2301      	movs	r3, #1
   350a8:	6163      	str	r3, [r4, #20]
   350aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   350ac:	ab01      	add	r3, sp, #4
   350ae:	466a      	mov	r2, sp
   350b0:	f7ff ffc6 	bl	35040 <__swhatbuf_r>
   350b4:	9900      	ldr	r1, [sp, #0]
   350b6:	0007      	movs	r7, r0
   350b8:	0028      	movs	r0, r5
   350ba:	f7ff fab3 	bl	34624 <_malloc_r>
   350be:	2800      	cmp	r0, #0
   350c0:	d108      	bne.n	350d4 <__smakebuf_r+0x44>
   350c2:	220c      	movs	r2, #12
   350c4:	5ea3      	ldrsh	r3, [r4, r2]
   350c6:	059a      	lsls	r2, r3, #22
   350c8:	d4ef      	bmi.n	350aa <__smakebuf_r+0x1a>
   350ca:	2203      	movs	r2, #3
   350cc:	4393      	bics	r3, r2
   350ce:	431e      	orrs	r6, r3
   350d0:	81a6      	strh	r6, [r4, #12]
   350d2:	e7e4      	b.n	3509e <__smakebuf_r+0xe>
   350d4:	4b0f      	ldr	r3, [pc, #60]	; (35114 <__smakebuf_r+0x84>)
   350d6:	62ab      	str	r3, [r5, #40]	; 0x28
   350d8:	2380      	movs	r3, #128	; 0x80
   350da:	89a2      	ldrh	r2, [r4, #12]
   350dc:	6020      	str	r0, [r4, #0]
   350de:	4313      	orrs	r3, r2
   350e0:	81a3      	strh	r3, [r4, #12]
   350e2:	9b00      	ldr	r3, [sp, #0]
   350e4:	6120      	str	r0, [r4, #16]
   350e6:	6163      	str	r3, [r4, #20]
   350e8:	9b01      	ldr	r3, [sp, #4]
   350ea:	2b00      	cmp	r3, #0
   350ec:	d00d      	beq.n	3510a <__smakebuf_r+0x7a>
   350ee:	230e      	movs	r3, #14
   350f0:	5ee1      	ldrsh	r1, [r4, r3]
   350f2:	0028      	movs	r0, r5
   350f4:	f000 fbb0 	bl	35858 <_isatty_r>
   350f8:	2800      	cmp	r0, #0
   350fa:	d006      	beq.n	3510a <__smakebuf_r+0x7a>
   350fc:	2203      	movs	r2, #3
   350fe:	89a3      	ldrh	r3, [r4, #12]
   35100:	4393      	bics	r3, r2
   35102:	001a      	movs	r2, r3
   35104:	2301      	movs	r3, #1
   35106:	4313      	orrs	r3, r2
   35108:	81a3      	strh	r3, [r4, #12]
   3510a:	89a0      	ldrh	r0, [r4, #12]
   3510c:	4338      	orrs	r0, r7
   3510e:	81a0      	strh	r0, [r4, #12]
   35110:	e7cb      	b.n	350aa <__smakebuf_r+0x1a>
   35112:	46c0      	nop			; (mov r8, r8)
   35114:	00034e71 	.word	0x00034e71

00035118 <__ascii_mbtowc>:
   35118:	b082      	sub	sp, #8
   3511a:	2900      	cmp	r1, #0
   3511c:	d100      	bne.n	35120 <__ascii_mbtowc+0x8>
   3511e:	a901      	add	r1, sp, #4
   35120:	1e10      	subs	r0, r2, #0
   35122:	d006      	beq.n	35132 <__ascii_mbtowc+0x1a>
   35124:	2b00      	cmp	r3, #0
   35126:	d006      	beq.n	35136 <__ascii_mbtowc+0x1e>
   35128:	7813      	ldrb	r3, [r2, #0]
   3512a:	600b      	str	r3, [r1, #0]
   3512c:	7810      	ldrb	r0, [r2, #0]
   3512e:	1e43      	subs	r3, r0, #1
   35130:	4198      	sbcs	r0, r3
   35132:	b002      	add	sp, #8
   35134:	4770      	bx	lr
   35136:	2002      	movs	r0, #2
   35138:	4240      	negs	r0, r0
   3513a:	e7fa      	b.n	35132 <__ascii_mbtowc+0x1a>

0003513c <__malloc_lock>:
   3513c:	4770      	bx	lr

0003513e <__malloc_unlock>:
   3513e:	4770      	bx	lr

00035140 <__ssputs_r>:
   35140:	b5f0      	push	{r4, r5, r6, r7, lr}
   35142:	688e      	ldr	r6, [r1, #8]
   35144:	b085      	sub	sp, #20
   35146:	0007      	movs	r7, r0
   35148:	000c      	movs	r4, r1
   3514a:	9203      	str	r2, [sp, #12]
   3514c:	9301      	str	r3, [sp, #4]
   3514e:	429e      	cmp	r6, r3
   35150:	d839      	bhi.n	351c6 <__ssputs_r+0x86>
   35152:	2390      	movs	r3, #144	; 0x90
   35154:	898a      	ldrh	r2, [r1, #12]
   35156:	00db      	lsls	r3, r3, #3
   35158:	421a      	tst	r2, r3
   3515a:	d034      	beq.n	351c6 <__ssputs_r+0x86>
   3515c:	2503      	movs	r5, #3
   3515e:	6909      	ldr	r1, [r1, #16]
   35160:	6823      	ldr	r3, [r4, #0]
   35162:	1a5b      	subs	r3, r3, r1
   35164:	9302      	str	r3, [sp, #8]
   35166:	6963      	ldr	r3, [r4, #20]
   35168:	9802      	ldr	r0, [sp, #8]
   3516a:	435d      	muls	r5, r3
   3516c:	0feb      	lsrs	r3, r5, #31
   3516e:	195d      	adds	r5, r3, r5
   35170:	9b01      	ldr	r3, [sp, #4]
   35172:	106d      	asrs	r5, r5, #1
   35174:	3301      	adds	r3, #1
   35176:	181b      	adds	r3, r3, r0
   35178:	42ab      	cmp	r3, r5
   3517a:	d900      	bls.n	3517e <__ssputs_r+0x3e>
   3517c:	001d      	movs	r5, r3
   3517e:	0553      	lsls	r3, r2, #21
   35180:	d532      	bpl.n	351e8 <__ssputs_r+0xa8>
   35182:	0029      	movs	r1, r5
   35184:	0038      	movs	r0, r7
   35186:	f7ff fa4d 	bl	34624 <_malloc_r>
   3518a:	1e06      	subs	r6, r0, #0
   3518c:	d109      	bne.n	351a2 <__ssputs_r+0x62>
   3518e:	230c      	movs	r3, #12
   35190:	603b      	str	r3, [r7, #0]
   35192:	2340      	movs	r3, #64	; 0x40
   35194:	2001      	movs	r0, #1
   35196:	89a2      	ldrh	r2, [r4, #12]
   35198:	4240      	negs	r0, r0
   3519a:	4313      	orrs	r3, r2
   3519c:	81a3      	strh	r3, [r4, #12]
   3519e:	b005      	add	sp, #20
   351a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   351a2:	9a02      	ldr	r2, [sp, #8]
   351a4:	6921      	ldr	r1, [r4, #16]
   351a6:	f7ff f9cf 	bl	34548 <memcpy>
   351aa:	89a3      	ldrh	r3, [r4, #12]
   351ac:	4a14      	ldr	r2, [pc, #80]	; (35200 <__ssputs_r+0xc0>)
   351ae:	401a      	ands	r2, r3
   351b0:	2380      	movs	r3, #128	; 0x80
   351b2:	4313      	orrs	r3, r2
   351b4:	81a3      	strh	r3, [r4, #12]
   351b6:	9b02      	ldr	r3, [sp, #8]
   351b8:	6126      	str	r6, [r4, #16]
   351ba:	18f6      	adds	r6, r6, r3
   351bc:	6026      	str	r6, [r4, #0]
   351be:	6165      	str	r5, [r4, #20]
   351c0:	9e01      	ldr	r6, [sp, #4]
   351c2:	1aed      	subs	r5, r5, r3
   351c4:	60a5      	str	r5, [r4, #8]
   351c6:	9b01      	ldr	r3, [sp, #4]
   351c8:	42b3      	cmp	r3, r6
   351ca:	d200      	bcs.n	351ce <__ssputs_r+0x8e>
   351cc:	001e      	movs	r6, r3
   351ce:	0032      	movs	r2, r6
   351d0:	9903      	ldr	r1, [sp, #12]
   351d2:	6820      	ldr	r0, [r4, #0]
   351d4:	f7ff f9c1 	bl	3455a <memmove>
   351d8:	68a3      	ldr	r3, [r4, #8]
   351da:	2000      	movs	r0, #0
   351dc:	1b9b      	subs	r3, r3, r6
   351de:	60a3      	str	r3, [r4, #8]
   351e0:	6823      	ldr	r3, [r4, #0]
   351e2:	199e      	adds	r6, r3, r6
   351e4:	6026      	str	r6, [r4, #0]
   351e6:	e7da      	b.n	3519e <__ssputs_r+0x5e>
   351e8:	002a      	movs	r2, r5
   351ea:	0038      	movs	r0, r7
   351ec:	f000 fb65 	bl	358ba <_realloc_r>
   351f0:	1e06      	subs	r6, r0, #0
   351f2:	d1e0      	bne.n	351b6 <__ssputs_r+0x76>
   351f4:	6921      	ldr	r1, [r4, #16]
   351f6:	0038      	movs	r0, r7
   351f8:	f7ff f9ca 	bl	34590 <_free_r>
   351fc:	e7c7      	b.n	3518e <__ssputs_r+0x4e>
   351fe:	46c0      	nop			; (mov r8, r8)
   35200:	fffffb7f 	.word	0xfffffb7f

00035204 <_svfiprintf_r>:
   35204:	b5f0      	push	{r4, r5, r6, r7, lr}
   35206:	b09f      	sub	sp, #124	; 0x7c
   35208:	9002      	str	r0, [sp, #8]
   3520a:	9305      	str	r3, [sp, #20]
   3520c:	898b      	ldrh	r3, [r1, #12]
   3520e:	000f      	movs	r7, r1
   35210:	0016      	movs	r6, r2
   35212:	061b      	lsls	r3, r3, #24
   35214:	d511      	bpl.n	3523a <_svfiprintf_r+0x36>
   35216:	690b      	ldr	r3, [r1, #16]
   35218:	2b00      	cmp	r3, #0
   3521a:	d10e      	bne.n	3523a <_svfiprintf_r+0x36>
   3521c:	2140      	movs	r1, #64	; 0x40
   3521e:	f7ff fa01 	bl	34624 <_malloc_r>
   35222:	6038      	str	r0, [r7, #0]
   35224:	6138      	str	r0, [r7, #16]
   35226:	2800      	cmp	r0, #0
   35228:	d105      	bne.n	35236 <_svfiprintf_r+0x32>
   3522a:	230c      	movs	r3, #12
   3522c:	9a02      	ldr	r2, [sp, #8]
   3522e:	3801      	subs	r0, #1
   35230:	6013      	str	r3, [r2, #0]
   35232:	b01f      	add	sp, #124	; 0x7c
   35234:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35236:	2340      	movs	r3, #64	; 0x40
   35238:	617b      	str	r3, [r7, #20]
   3523a:	2300      	movs	r3, #0
   3523c:	ad06      	add	r5, sp, #24
   3523e:	616b      	str	r3, [r5, #20]
   35240:	3320      	adds	r3, #32
   35242:	766b      	strb	r3, [r5, #25]
   35244:	3310      	adds	r3, #16
   35246:	76ab      	strb	r3, [r5, #26]
   35248:	0034      	movs	r4, r6
   3524a:	7823      	ldrb	r3, [r4, #0]
   3524c:	2b00      	cmp	r3, #0
   3524e:	d147      	bne.n	352e0 <_svfiprintf_r+0xdc>
   35250:	1ba3      	subs	r3, r4, r6
   35252:	9304      	str	r3, [sp, #16]
   35254:	d00d      	beq.n	35272 <_svfiprintf_r+0x6e>
   35256:	1ba3      	subs	r3, r4, r6
   35258:	0032      	movs	r2, r6
   3525a:	0039      	movs	r1, r7
   3525c:	9802      	ldr	r0, [sp, #8]
   3525e:	f7ff ff6f 	bl	35140 <__ssputs_r>
   35262:	1c43      	adds	r3, r0, #1
   35264:	d100      	bne.n	35268 <_svfiprintf_r+0x64>
   35266:	e0b5      	b.n	353d4 <_svfiprintf_r+0x1d0>
   35268:	696a      	ldr	r2, [r5, #20]
   3526a:	9b04      	ldr	r3, [sp, #16]
   3526c:	4694      	mov	ip, r2
   3526e:	4463      	add	r3, ip
   35270:	616b      	str	r3, [r5, #20]
   35272:	7823      	ldrb	r3, [r4, #0]
   35274:	2b00      	cmp	r3, #0
   35276:	d100      	bne.n	3527a <_svfiprintf_r+0x76>
   35278:	e0ac      	b.n	353d4 <_svfiprintf_r+0x1d0>
   3527a:	2201      	movs	r2, #1
   3527c:	2300      	movs	r3, #0
   3527e:	4252      	negs	r2, r2
   35280:	606a      	str	r2, [r5, #4]
   35282:	a902      	add	r1, sp, #8
   35284:	3254      	adds	r2, #84	; 0x54
   35286:	1852      	adds	r2, r2, r1
   35288:	3401      	adds	r4, #1
   3528a:	602b      	str	r3, [r5, #0]
   3528c:	60eb      	str	r3, [r5, #12]
   3528e:	60ab      	str	r3, [r5, #8]
   35290:	7013      	strb	r3, [r2, #0]
   35292:	65ab      	str	r3, [r5, #88]	; 0x58
   35294:	4e58      	ldr	r6, [pc, #352]	; (353f8 <_svfiprintf_r+0x1f4>)
   35296:	2205      	movs	r2, #5
   35298:	7821      	ldrb	r1, [r4, #0]
   3529a:	0030      	movs	r0, r6
   3529c:	f000 fb02 	bl	358a4 <memchr>
   352a0:	1c62      	adds	r2, r4, #1
   352a2:	2800      	cmp	r0, #0
   352a4:	d120      	bne.n	352e8 <_svfiprintf_r+0xe4>
   352a6:	6829      	ldr	r1, [r5, #0]
   352a8:	06cb      	lsls	r3, r1, #27
   352aa:	d504      	bpl.n	352b6 <_svfiprintf_r+0xb2>
   352ac:	2353      	movs	r3, #83	; 0x53
   352ae:	ae02      	add	r6, sp, #8
   352b0:	3020      	adds	r0, #32
   352b2:	199b      	adds	r3, r3, r6
   352b4:	7018      	strb	r0, [r3, #0]
   352b6:	070b      	lsls	r3, r1, #28
   352b8:	d504      	bpl.n	352c4 <_svfiprintf_r+0xc0>
   352ba:	2353      	movs	r3, #83	; 0x53
   352bc:	202b      	movs	r0, #43	; 0x2b
   352be:	ae02      	add	r6, sp, #8
   352c0:	199b      	adds	r3, r3, r6
   352c2:	7018      	strb	r0, [r3, #0]
   352c4:	7823      	ldrb	r3, [r4, #0]
   352c6:	2b2a      	cmp	r3, #42	; 0x2a
   352c8:	d016      	beq.n	352f8 <_svfiprintf_r+0xf4>
   352ca:	2000      	movs	r0, #0
   352cc:	210a      	movs	r1, #10
   352ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   352d0:	7822      	ldrb	r2, [r4, #0]
   352d2:	3a30      	subs	r2, #48	; 0x30
   352d4:	2a09      	cmp	r2, #9
   352d6:	d955      	bls.n	35384 <_svfiprintf_r+0x180>
   352d8:	2800      	cmp	r0, #0
   352da:	d015      	beq.n	35308 <_svfiprintf_r+0x104>
   352dc:	9309      	str	r3, [sp, #36]	; 0x24
   352de:	e013      	b.n	35308 <_svfiprintf_r+0x104>
   352e0:	2b25      	cmp	r3, #37	; 0x25
   352e2:	d0b5      	beq.n	35250 <_svfiprintf_r+0x4c>
   352e4:	3401      	adds	r4, #1
   352e6:	e7b0      	b.n	3524a <_svfiprintf_r+0x46>
   352e8:	2301      	movs	r3, #1
   352ea:	1b80      	subs	r0, r0, r6
   352ec:	4083      	lsls	r3, r0
   352ee:	6829      	ldr	r1, [r5, #0]
   352f0:	0014      	movs	r4, r2
   352f2:	430b      	orrs	r3, r1
   352f4:	602b      	str	r3, [r5, #0]
   352f6:	e7cd      	b.n	35294 <_svfiprintf_r+0x90>
   352f8:	9b05      	ldr	r3, [sp, #20]
   352fa:	1d18      	adds	r0, r3, #4
   352fc:	681b      	ldr	r3, [r3, #0]
   352fe:	9005      	str	r0, [sp, #20]
   35300:	2b00      	cmp	r3, #0
   35302:	db39      	blt.n	35378 <_svfiprintf_r+0x174>
   35304:	9309      	str	r3, [sp, #36]	; 0x24
   35306:	0014      	movs	r4, r2
   35308:	7823      	ldrb	r3, [r4, #0]
   3530a:	2b2e      	cmp	r3, #46	; 0x2e
   3530c:	d10b      	bne.n	35326 <_svfiprintf_r+0x122>
   3530e:	7863      	ldrb	r3, [r4, #1]
   35310:	1c62      	adds	r2, r4, #1
   35312:	2b2a      	cmp	r3, #42	; 0x2a
   35314:	d13e      	bne.n	35394 <_svfiprintf_r+0x190>
   35316:	9b05      	ldr	r3, [sp, #20]
   35318:	3402      	adds	r4, #2
   3531a:	1d1a      	adds	r2, r3, #4
   3531c:	681b      	ldr	r3, [r3, #0]
   3531e:	9205      	str	r2, [sp, #20]
   35320:	2b00      	cmp	r3, #0
   35322:	db34      	blt.n	3538e <_svfiprintf_r+0x18a>
   35324:	9307      	str	r3, [sp, #28]
   35326:	4e35      	ldr	r6, [pc, #212]	; (353fc <_svfiprintf_r+0x1f8>)
   35328:	7821      	ldrb	r1, [r4, #0]
   3532a:	2203      	movs	r2, #3
   3532c:	0030      	movs	r0, r6
   3532e:	f000 fab9 	bl	358a4 <memchr>
   35332:	2800      	cmp	r0, #0
   35334:	d006      	beq.n	35344 <_svfiprintf_r+0x140>
   35336:	2340      	movs	r3, #64	; 0x40
   35338:	1b80      	subs	r0, r0, r6
   3533a:	4083      	lsls	r3, r0
   3533c:	682a      	ldr	r2, [r5, #0]
   3533e:	3401      	adds	r4, #1
   35340:	4313      	orrs	r3, r2
   35342:	602b      	str	r3, [r5, #0]
   35344:	7821      	ldrb	r1, [r4, #0]
   35346:	2206      	movs	r2, #6
   35348:	482d      	ldr	r0, [pc, #180]	; (35400 <_svfiprintf_r+0x1fc>)
   3534a:	1c66      	adds	r6, r4, #1
   3534c:	7629      	strb	r1, [r5, #24]
   3534e:	f000 faa9 	bl	358a4 <memchr>
   35352:	2800      	cmp	r0, #0
   35354:	d046      	beq.n	353e4 <_svfiprintf_r+0x1e0>
   35356:	4b2b      	ldr	r3, [pc, #172]	; (35404 <_svfiprintf_r+0x200>)
   35358:	2b00      	cmp	r3, #0
   3535a:	d12f      	bne.n	353bc <_svfiprintf_r+0x1b8>
   3535c:	6829      	ldr	r1, [r5, #0]
   3535e:	9b05      	ldr	r3, [sp, #20]
   35360:	2207      	movs	r2, #7
   35362:	05c9      	lsls	r1, r1, #23
   35364:	d528      	bpl.n	353b8 <_svfiprintf_r+0x1b4>
   35366:	189b      	adds	r3, r3, r2
   35368:	4393      	bics	r3, r2
   3536a:	3308      	adds	r3, #8
   3536c:	9305      	str	r3, [sp, #20]
   3536e:	696b      	ldr	r3, [r5, #20]
   35370:	9a03      	ldr	r2, [sp, #12]
   35372:	189b      	adds	r3, r3, r2
   35374:	616b      	str	r3, [r5, #20]
   35376:	e767      	b.n	35248 <_svfiprintf_r+0x44>
   35378:	425b      	negs	r3, r3
   3537a:	60eb      	str	r3, [r5, #12]
   3537c:	2302      	movs	r3, #2
   3537e:	430b      	orrs	r3, r1
   35380:	602b      	str	r3, [r5, #0]
   35382:	e7c0      	b.n	35306 <_svfiprintf_r+0x102>
   35384:	434b      	muls	r3, r1
   35386:	3401      	adds	r4, #1
   35388:	189b      	adds	r3, r3, r2
   3538a:	2001      	movs	r0, #1
   3538c:	e7a0      	b.n	352d0 <_svfiprintf_r+0xcc>
   3538e:	2301      	movs	r3, #1
   35390:	425b      	negs	r3, r3
   35392:	e7c7      	b.n	35324 <_svfiprintf_r+0x120>
   35394:	2300      	movs	r3, #0
   35396:	0014      	movs	r4, r2
   35398:	200a      	movs	r0, #10
   3539a:	001a      	movs	r2, r3
   3539c:	606b      	str	r3, [r5, #4]
   3539e:	7821      	ldrb	r1, [r4, #0]
   353a0:	3930      	subs	r1, #48	; 0x30
   353a2:	2909      	cmp	r1, #9
   353a4:	d903      	bls.n	353ae <_svfiprintf_r+0x1aa>
   353a6:	2b00      	cmp	r3, #0
   353a8:	d0bd      	beq.n	35326 <_svfiprintf_r+0x122>
   353aa:	9207      	str	r2, [sp, #28]
   353ac:	e7bb      	b.n	35326 <_svfiprintf_r+0x122>
   353ae:	4342      	muls	r2, r0
   353b0:	3401      	adds	r4, #1
   353b2:	1852      	adds	r2, r2, r1
   353b4:	2301      	movs	r3, #1
   353b6:	e7f2      	b.n	3539e <_svfiprintf_r+0x19a>
   353b8:	3307      	adds	r3, #7
   353ba:	e7d5      	b.n	35368 <_svfiprintf_r+0x164>
   353bc:	ab05      	add	r3, sp, #20
   353be:	9300      	str	r3, [sp, #0]
   353c0:	003a      	movs	r2, r7
   353c2:	4b11      	ldr	r3, [pc, #68]	; (35408 <_svfiprintf_r+0x204>)
   353c4:	0029      	movs	r1, r5
   353c6:	9802      	ldr	r0, [sp, #8]
   353c8:	e000      	b.n	353cc <_svfiprintf_r+0x1c8>
   353ca:	bf00      	nop
   353cc:	9003      	str	r0, [sp, #12]
   353ce:	9b03      	ldr	r3, [sp, #12]
   353d0:	3301      	adds	r3, #1
   353d2:	d1cc      	bne.n	3536e <_svfiprintf_r+0x16a>
   353d4:	89bb      	ldrh	r3, [r7, #12]
   353d6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   353d8:	065b      	lsls	r3, r3, #25
   353da:	d400      	bmi.n	353de <_svfiprintf_r+0x1da>
   353dc:	e729      	b.n	35232 <_svfiprintf_r+0x2e>
   353de:	2001      	movs	r0, #1
   353e0:	4240      	negs	r0, r0
   353e2:	e726      	b.n	35232 <_svfiprintf_r+0x2e>
   353e4:	ab05      	add	r3, sp, #20
   353e6:	9300      	str	r3, [sp, #0]
   353e8:	003a      	movs	r2, r7
   353ea:	4b07      	ldr	r3, [pc, #28]	; (35408 <_svfiprintf_r+0x204>)
   353ec:	0029      	movs	r1, r5
   353ee:	9802      	ldr	r0, [sp, #8]
   353f0:	f000 f87a 	bl	354e8 <_printf_i>
   353f4:	e7ea      	b.n	353cc <_svfiprintf_r+0x1c8>
   353f6:	46c0      	nop			; (mov r8, r8)
   353f8:	00039b9a 	.word	0x00039b9a
   353fc:	00039ba0 	.word	0x00039ba0
   35400:	00039ba4 	.word	0x00039ba4
   35404:	00000000 	.word	0x00000000
   35408:	00035141 	.word	0x00035141

0003540c <_printf_common>:
   3540c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3540e:	0015      	movs	r5, r2
   35410:	9301      	str	r3, [sp, #4]
   35412:	688a      	ldr	r2, [r1, #8]
   35414:	690b      	ldr	r3, [r1, #16]
   35416:	9000      	str	r0, [sp, #0]
   35418:	000c      	movs	r4, r1
   3541a:	4293      	cmp	r3, r2
   3541c:	da00      	bge.n	35420 <_printf_common+0x14>
   3541e:	0013      	movs	r3, r2
   35420:	0022      	movs	r2, r4
   35422:	602b      	str	r3, [r5, #0]
   35424:	3243      	adds	r2, #67	; 0x43
   35426:	7812      	ldrb	r2, [r2, #0]
   35428:	2a00      	cmp	r2, #0
   3542a:	d001      	beq.n	35430 <_printf_common+0x24>
   3542c:	3301      	adds	r3, #1
   3542e:	602b      	str	r3, [r5, #0]
   35430:	6823      	ldr	r3, [r4, #0]
   35432:	069b      	lsls	r3, r3, #26
   35434:	d502      	bpl.n	3543c <_printf_common+0x30>
   35436:	682b      	ldr	r3, [r5, #0]
   35438:	3302      	adds	r3, #2
   3543a:	602b      	str	r3, [r5, #0]
   3543c:	2706      	movs	r7, #6
   3543e:	6823      	ldr	r3, [r4, #0]
   35440:	401f      	ands	r7, r3
   35442:	d027      	beq.n	35494 <_printf_common+0x88>
   35444:	0023      	movs	r3, r4
   35446:	3343      	adds	r3, #67	; 0x43
   35448:	781b      	ldrb	r3, [r3, #0]
   3544a:	1e5a      	subs	r2, r3, #1
   3544c:	4193      	sbcs	r3, r2
   3544e:	6822      	ldr	r2, [r4, #0]
   35450:	0692      	lsls	r2, r2, #26
   35452:	d430      	bmi.n	354b6 <_printf_common+0xaa>
   35454:	0022      	movs	r2, r4
   35456:	9901      	ldr	r1, [sp, #4]
   35458:	3243      	adds	r2, #67	; 0x43
   3545a:	9800      	ldr	r0, [sp, #0]
   3545c:	9e08      	ldr	r6, [sp, #32]
   3545e:	47b0      	blx	r6
   35460:	1c43      	adds	r3, r0, #1
   35462:	d025      	beq.n	354b0 <_printf_common+0xa4>
   35464:	2306      	movs	r3, #6
   35466:	6820      	ldr	r0, [r4, #0]
   35468:	682a      	ldr	r2, [r5, #0]
   3546a:	68e1      	ldr	r1, [r4, #12]
   3546c:	4003      	ands	r3, r0
   3546e:	2500      	movs	r5, #0
   35470:	2b04      	cmp	r3, #4
   35472:	d103      	bne.n	3547c <_printf_common+0x70>
   35474:	1a8d      	subs	r5, r1, r2
   35476:	43eb      	mvns	r3, r5
   35478:	17db      	asrs	r3, r3, #31
   3547a:	401d      	ands	r5, r3
   3547c:	68a3      	ldr	r3, [r4, #8]
   3547e:	6922      	ldr	r2, [r4, #16]
   35480:	4293      	cmp	r3, r2
   35482:	dd01      	ble.n	35488 <_printf_common+0x7c>
   35484:	1a9b      	subs	r3, r3, r2
   35486:	18ed      	adds	r5, r5, r3
   35488:	2700      	movs	r7, #0
   3548a:	42bd      	cmp	r5, r7
   3548c:	d120      	bne.n	354d0 <_printf_common+0xc4>
   3548e:	2000      	movs	r0, #0
   35490:	e010      	b.n	354b4 <_printf_common+0xa8>
   35492:	3701      	adds	r7, #1
   35494:	68e3      	ldr	r3, [r4, #12]
   35496:	682a      	ldr	r2, [r5, #0]
   35498:	1a9b      	subs	r3, r3, r2
   3549a:	429f      	cmp	r7, r3
   3549c:	dad2      	bge.n	35444 <_printf_common+0x38>
   3549e:	0022      	movs	r2, r4
   354a0:	2301      	movs	r3, #1
   354a2:	3219      	adds	r2, #25
   354a4:	9901      	ldr	r1, [sp, #4]
   354a6:	9800      	ldr	r0, [sp, #0]
   354a8:	9e08      	ldr	r6, [sp, #32]
   354aa:	47b0      	blx	r6
   354ac:	1c43      	adds	r3, r0, #1
   354ae:	d1f0      	bne.n	35492 <_printf_common+0x86>
   354b0:	2001      	movs	r0, #1
   354b2:	4240      	negs	r0, r0
   354b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   354b6:	2030      	movs	r0, #48	; 0x30
   354b8:	18e1      	adds	r1, r4, r3
   354ba:	3143      	adds	r1, #67	; 0x43
   354bc:	7008      	strb	r0, [r1, #0]
   354be:	0021      	movs	r1, r4
   354c0:	1c5a      	adds	r2, r3, #1
   354c2:	3145      	adds	r1, #69	; 0x45
   354c4:	7809      	ldrb	r1, [r1, #0]
   354c6:	18a2      	adds	r2, r4, r2
   354c8:	3243      	adds	r2, #67	; 0x43
   354ca:	3302      	adds	r3, #2
   354cc:	7011      	strb	r1, [r2, #0]
   354ce:	e7c1      	b.n	35454 <_printf_common+0x48>
   354d0:	0022      	movs	r2, r4
   354d2:	2301      	movs	r3, #1
   354d4:	321a      	adds	r2, #26
   354d6:	9901      	ldr	r1, [sp, #4]
   354d8:	9800      	ldr	r0, [sp, #0]
   354da:	9e08      	ldr	r6, [sp, #32]
   354dc:	47b0      	blx	r6
   354de:	1c43      	adds	r3, r0, #1
   354e0:	d0e6      	beq.n	354b0 <_printf_common+0xa4>
   354e2:	3701      	adds	r7, #1
   354e4:	e7d1      	b.n	3548a <_printf_common+0x7e>
	...

000354e8 <_printf_i>:
   354e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   354ea:	b08b      	sub	sp, #44	; 0x2c
   354ec:	9206      	str	r2, [sp, #24]
   354ee:	000a      	movs	r2, r1
   354f0:	3243      	adds	r2, #67	; 0x43
   354f2:	9307      	str	r3, [sp, #28]
   354f4:	9005      	str	r0, [sp, #20]
   354f6:	9204      	str	r2, [sp, #16]
   354f8:	7e0a      	ldrb	r2, [r1, #24]
   354fa:	000c      	movs	r4, r1
   354fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   354fe:	2a6e      	cmp	r2, #110	; 0x6e
   35500:	d100      	bne.n	35504 <_printf_i+0x1c>
   35502:	e08f      	b.n	35624 <_printf_i+0x13c>
   35504:	d817      	bhi.n	35536 <_printf_i+0x4e>
   35506:	2a63      	cmp	r2, #99	; 0x63
   35508:	d02c      	beq.n	35564 <_printf_i+0x7c>
   3550a:	d808      	bhi.n	3551e <_printf_i+0x36>
   3550c:	2a00      	cmp	r2, #0
   3550e:	d100      	bne.n	35512 <_printf_i+0x2a>
   35510:	e099      	b.n	35646 <_printf_i+0x15e>
   35512:	2a58      	cmp	r2, #88	; 0x58
   35514:	d054      	beq.n	355c0 <_printf_i+0xd8>
   35516:	0026      	movs	r6, r4
   35518:	3642      	adds	r6, #66	; 0x42
   3551a:	7032      	strb	r2, [r6, #0]
   3551c:	e029      	b.n	35572 <_printf_i+0x8a>
   3551e:	2a64      	cmp	r2, #100	; 0x64
   35520:	d001      	beq.n	35526 <_printf_i+0x3e>
   35522:	2a69      	cmp	r2, #105	; 0x69
   35524:	d1f7      	bne.n	35516 <_printf_i+0x2e>
   35526:	6821      	ldr	r1, [r4, #0]
   35528:	681a      	ldr	r2, [r3, #0]
   3552a:	0608      	lsls	r0, r1, #24
   3552c:	d523      	bpl.n	35576 <_printf_i+0x8e>
   3552e:	1d11      	adds	r1, r2, #4
   35530:	6019      	str	r1, [r3, #0]
   35532:	6815      	ldr	r5, [r2, #0]
   35534:	e025      	b.n	35582 <_printf_i+0x9a>
   35536:	2a73      	cmp	r2, #115	; 0x73
   35538:	d100      	bne.n	3553c <_printf_i+0x54>
   3553a:	e088      	b.n	3564e <_printf_i+0x166>
   3553c:	d808      	bhi.n	35550 <_printf_i+0x68>
   3553e:	2a6f      	cmp	r2, #111	; 0x6f
   35540:	d029      	beq.n	35596 <_printf_i+0xae>
   35542:	2a70      	cmp	r2, #112	; 0x70
   35544:	d1e7      	bne.n	35516 <_printf_i+0x2e>
   35546:	2220      	movs	r2, #32
   35548:	6809      	ldr	r1, [r1, #0]
   3554a:	430a      	orrs	r2, r1
   3554c:	6022      	str	r2, [r4, #0]
   3554e:	e003      	b.n	35558 <_printf_i+0x70>
   35550:	2a75      	cmp	r2, #117	; 0x75
   35552:	d020      	beq.n	35596 <_printf_i+0xae>
   35554:	2a78      	cmp	r2, #120	; 0x78
   35556:	d1de      	bne.n	35516 <_printf_i+0x2e>
   35558:	0022      	movs	r2, r4
   3555a:	2178      	movs	r1, #120	; 0x78
   3555c:	3245      	adds	r2, #69	; 0x45
   3555e:	7011      	strb	r1, [r2, #0]
   35560:	4a6c      	ldr	r2, [pc, #432]	; (35714 <_printf_i+0x22c>)
   35562:	e030      	b.n	355c6 <_printf_i+0xde>
   35564:	000e      	movs	r6, r1
   35566:	681a      	ldr	r2, [r3, #0]
   35568:	3642      	adds	r6, #66	; 0x42
   3556a:	1d11      	adds	r1, r2, #4
   3556c:	6019      	str	r1, [r3, #0]
   3556e:	6813      	ldr	r3, [r2, #0]
   35570:	7033      	strb	r3, [r6, #0]
   35572:	2301      	movs	r3, #1
   35574:	e079      	b.n	3566a <_printf_i+0x182>
   35576:	0649      	lsls	r1, r1, #25
   35578:	d5d9      	bpl.n	3552e <_printf_i+0x46>
   3557a:	1d11      	adds	r1, r2, #4
   3557c:	6019      	str	r1, [r3, #0]
   3557e:	2300      	movs	r3, #0
   35580:	5ed5      	ldrsh	r5, [r2, r3]
   35582:	2d00      	cmp	r5, #0
   35584:	da03      	bge.n	3558e <_printf_i+0xa6>
   35586:	232d      	movs	r3, #45	; 0x2d
   35588:	9a04      	ldr	r2, [sp, #16]
   3558a:	426d      	negs	r5, r5
   3558c:	7013      	strb	r3, [r2, #0]
   3558e:	4b62      	ldr	r3, [pc, #392]	; (35718 <_printf_i+0x230>)
   35590:	270a      	movs	r7, #10
   35592:	9303      	str	r3, [sp, #12]
   35594:	e02f      	b.n	355f6 <_printf_i+0x10e>
   35596:	6820      	ldr	r0, [r4, #0]
   35598:	6819      	ldr	r1, [r3, #0]
   3559a:	0605      	lsls	r5, r0, #24
   3559c:	d503      	bpl.n	355a6 <_printf_i+0xbe>
   3559e:	1d08      	adds	r0, r1, #4
   355a0:	6018      	str	r0, [r3, #0]
   355a2:	680d      	ldr	r5, [r1, #0]
   355a4:	e005      	b.n	355b2 <_printf_i+0xca>
   355a6:	0640      	lsls	r0, r0, #25
   355a8:	d5f9      	bpl.n	3559e <_printf_i+0xb6>
   355aa:	680d      	ldr	r5, [r1, #0]
   355ac:	1d08      	adds	r0, r1, #4
   355ae:	6018      	str	r0, [r3, #0]
   355b0:	b2ad      	uxth	r5, r5
   355b2:	4b59      	ldr	r3, [pc, #356]	; (35718 <_printf_i+0x230>)
   355b4:	2708      	movs	r7, #8
   355b6:	9303      	str	r3, [sp, #12]
   355b8:	2a6f      	cmp	r2, #111	; 0x6f
   355ba:	d018      	beq.n	355ee <_printf_i+0x106>
   355bc:	270a      	movs	r7, #10
   355be:	e016      	b.n	355ee <_printf_i+0x106>
   355c0:	3145      	adds	r1, #69	; 0x45
   355c2:	700a      	strb	r2, [r1, #0]
   355c4:	4a54      	ldr	r2, [pc, #336]	; (35718 <_printf_i+0x230>)
   355c6:	9203      	str	r2, [sp, #12]
   355c8:	681a      	ldr	r2, [r3, #0]
   355ca:	6821      	ldr	r1, [r4, #0]
   355cc:	1d10      	adds	r0, r2, #4
   355ce:	6018      	str	r0, [r3, #0]
   355d0:	6815      	ldr	r5, [r2, #0]
   355d2:	0608      	lsls	r0, r1, #24
   355d4:	d522      	bpl.n	3561c <_printf_i+0x134>
   355d6:	07cb      	lsls	r3, r1, #31
   355d8:	d502      	bpl.n	355e0 <_printf_i+0xf8>
   355da:	2320      	movs	r3, #32
   355dc:	4319      	orrs	r1, r3
   355de:	6021      	str	r1, [r4, #0]
   355e0:	2710      	movs	r7, #16
   355e2:	2d00      	cmp	r5, #0
   355e4:	d103      	bne.n	355ee <_printf_i+0x106>
   355e6:	2320      	movs	r3, #32
   355e8:	6822      	ldr	r2, [r4, #0]
   355ea:	439a      	bics	r2, r3
   355ec:	6022      	str	r2, [r4, #0]
   355ee:	0023      	movs	r3, r4
   355f0:	2200      	movs	r2, #0
   355f2:	3343      	adds	r3, #67	; 0x43
   355f4:	701a      	strb	r2, [r3, #0]
   355f6:	6863      	ldr	r3, [r4, #4]
   355f8:	60a3      	str	r3, [r4, #8]
   355fa:	2b00      	cmp	r3, #0
   355fc:	db5c      	blt.n	356b8 <_printf_i+0x1d0>
   355fe:	2204      	movs	r2, #4
   35600:	6821      	ldr	r1, [r4, #0]
   35602:	4391      	bics	r1, r2
   35604:	6021      	str	r1, [r4, #0]
   35606:	2d00      	cmp	r5, #0
   35608:	d158      	bne.n	356bc <_printf_i+0x1d4>
   3560a:	9e04      	ldr	r6, [sp, #16]
   3560c:	2b00      	cmp	r3, #0
   3560e:	d064      	beq.n	356da <_printf_i+0x1f2>
   35610:	0026      	movs	r6, r4
   35612:	9b03      	ldr	r3, [sp, #12]
   35614:	3642      	adds	r6, #66	; 0x42
   35616:	781b      	ldrb	r3, [r3, #0]
   35618:	7033      	strb	r3, [r6, #0]
   3561a:	e05e      	b.n	356da <_printf_i+0x1f2>
   3561c:	0648      	lsls	r0, r1, #25
   3561e:	d5da      	bpl.n	355d6 <_printf_i+0xee>
   35620:	b2ad      	uxth	r5, r5
   35622:	e7d8      	b.n	355d6 <_printf_i+0xee>
   35624:	6809      	ldr	r1, [r1, #0]
   35626:	681a      	ldr	r2, [r3, #0]
   35628:	0608      	lsls	r0, r1, #24
   3562a:	d505      	bpl.n	35638 <_printf_i+0x150>
   3562c:	1d11      	adds	r1, r2, #4
   3562e:	6019      	str	r1, [r3, #0]
   35630:	6813      	ldr	r3, [r2, #0]
   35632:	6962      	ldr	r2, [r4, #20]
   35634:	601a      	str	r2, [r3, #0]
   35636:	e006      	b.n	35646 <_printf_i+0x15e>
   35638:	0649      	lsls	r1, r1, #25
   3563a:	d5f7      	bpl.n	3562c <_printf_i+0x144>
   3563c:	1d11      	adds	r1, r2, #4
   3563e:	6019      	str	r1, [r3, #0]
   35640:	6813      	ldr	r3, [r2, #0]
   35642:	8aa2      	ldrh	r2, [r4, #20]
   35644:	801a      	strh	r2, [r3, #0]
   35646:	2300      	movs	r3, #0
   35648:	9e04      	ldr	r6, [sp, #16]
   3564a:	6123      	str	r3, [r4, #16]
   3564c:	e054      	b.n	356f8 <_printf_i+0x210>
   3564e:	681a      	ldr	r2, [r3, #0]
   35650:	1d11      	adds	r1, r2, #4
   35652:	6019      	str	r1, [r3, #0]
   35654:	6816      	ldr	r6, [r2, #0]
   35656:	2100      	movs	r1, #0
   35658:	6862      	ldr	r2, [r4, #4]
   3565a:	0030      	movs	r0, r6
   3565c:	f000 f922 	bl	358a4 <memchr>
   35660:	2800      	cmp	r0, #0
   35662:	d001      	beq.n	35668 <_printf_i+0x180>
   35664:	1b80      	subs	r0, r0, r6
   35666:	6060      	str	r0, [r4, #4]
   35668:	6863      	ldr	r3, [r4, #4]
   3566a:	6123      	str	r3, [r4, #16]
   3566c:	2300      	movs	r3, #0
   3566e:	9a04      	ldr	r2, [sp, #16]
   35670:	7013      	strb	r3, [r2, #0]
   35672:	e041      	b.n	356f8 <_printf_i+0x210>
   35674:	6923      	ldr	r3, [r4, #16]
   35676:	0032      	movs	r2, r6
   35678:	9906      	ldr	r1, [sp, #24]
   3567a:	9805      	ldr	r0, [sp, #20]
   3567c:	9d07      	ldr	r5, [sp, #28]
   3567e:	47a8      	blx	r5
   35680:	1c43      	adds	r3, r0, #1
   35682:	d043      	beq.n	3570c <_printf_i+0x224>
   35684:	6823      	ldr	r3, [r4, #0]
   35686:	2500      	movs	r5, #0
   35688:	079b      	lsls	r3, r3, #30
   3568a:	d40f      	bmi.n	356ac <_printf_i+0x1c4>
   3568c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3568e:	68e0      	ldr	r0, [r4, #12]
   35690:	4298      	cmp	r0, r3
   35692:	da3d      	bge.n	35710 <_printf_i+0x228>
   35694:	0018      	movs	r0, r3
   35696:	e03b      	b.n	35710 <_printf_i+0x228>
   35698:	0022      	movs	r2, r4
   3569a:	2301      	movs	r3, #1
   3569c:	3219      	adds	r2, #25
   3569e:	9906      	ldr	r1, [sp, #24]
   356a0:	9805      	ldr	r0, [sp, #20]
   356a2:	9e07      	ldr	r6, [sp, #28]
   356a4:	47b0      	blx	r6
   356a6:	1c43      	adds	r3, r0, #1
   356a8:	d030      	beq.n	3570c <_printf_i+0x224>
   356aa:	3501      	adds	r5, #1
   356ac:	68e3      	ldr	r3, [r4, #12]
   356ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
   356b0:	1a9b      	subs	r3, r3, r2
   356b2:	429d      	cmp	r5, r3
   356b4:	dbf0      	blt.n	35698 <_printf_i+0x1b0>
   356b6:	e7e9      	b.n	3568c <_printf_i+0x1a4>
   356b8:	2d00      	cmp	r5, #0
   356ba:	d0a9      	beq.n	35610 <_printf_i+0x128>
   356bc:	9e04      	ldr	r6, [sp, #16]
   356be:	0028      	movs	r0, r5
   356c0:	0039      	movs	r1, r7
   356c2:	f7fc fa85 	bl	31bd0 <__aeabi_uidivmod>
   356c6:	9b03      	ldr	r3, [sp, #12]
   356c8:	3e01      	subs	r6, #1
   356ca:	5c5b      	ldrb	r3, [r3, r1]
   356cc:	0028      	movs	r0, r5
   356ce:	7033      	strb	r3, [r6, #0]
   356d0:	0039      	movs	r1, r7
   356d2:	f7fc f9f7 	bl	31ac4 <__udivsi3>
   356d6:	1e05      	subs	r5, r0, #0
   356d8:	d1f1      	bne.n	356be <_printf_i+0x1d6>
   356da:	2f08      	cmp	r7, #8
   356dc:	d109      	bne.n	356f2 <_printf_i+0x20a>
   356de:	6823      	ldr	r3, [r4, #0]
   356e0:	07db      	lsls	r3, r3, #31
   356e2:	d506      	bpl.n	356f2 <_printf_i+0x20a>
   356e4:	6863      	ldr	r3, [r4, #4]
   356e6:	6922      	ldr	r2, [r4, #16]
   356e8:	4293      	cmp	r3, r2
   356ea:	dc02      	bgt.n	356f2 <_printf_i+0x20a>
   356ec:	2330      	movs	r3, #48	; 0x30
   356ee:	3e01      	subs	r6, #1
   356f0:	7033      	strb	r3, [r6, #0]
   356f2:	9b04      	ldr	r3, [sp, #16]
   356f4:	1b9b      	subs	r3, r3, r6
   356f6:	6123      	str	r3, [r4, #16]
   356f8:	9b07      	ldr	r3, [sp, #28]
   356fa:	aa09      	add	r2, sp, #36	; 0x24
   356fc:	9300      	str	r3, [sp, #0]
   356fe:	0021      	movs	r1, r4
   35700:	9b06      	ldr	r3, [sp, #24]
   35702:	9805      	ldr	r0, [sp, #20]
   35704:	f7ff fe82 	bl	3540c <_printf_common>
   35708:	1c43      	adds	r3, r0, #1
   3570a:	d1b3      	bne.n	35674 <_printf_i+0x18c>
   3570c:	2001      	movs	r0, #1
   3570e:	4240      	negs	r0, r0
   35710:	b00b      	add	sp, #44	; 0x2c
   35712:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35714:	00039bbc 	.word	0x00039bbc
   35718:	00039bab 	.word	0x00039bab

0003571c <__sread>:
   3571c:	b570      	push	{r4, r5, r6, lr}
   3571e:	000c      	movs	r4, r1
   35720:	250e      	movs	r5, #14
   35722:	5f49      	ldrsh	r1, [r1, r5]
   35724:	f000 f8f0 	bl	35908 <_read_r>
   35728:	2800      	cmp	r0, #0
   3572a:	db03      	blt.n	35734 <__sread+0x18>
   3572c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   3572e:	181b      	adds	r3, r3, r0
   35730:	6563      	str	r3, [r4, #84]	; 0x54
   35732:	bd70      	pop	{r4, r5, r6, pc}
   35734:	89a3      	ldrh	r3, [r4, #12]
   35736:	4a02      	ldr	r2, [pc, #8]	; (35740 <__sread+0x24>)
   35738:	4013      	ands	r3, r2
   3573a:	81a3      	strh	r3, [r4, #12]
   3573c:	e7f9      	b.n	35732 <__sread+0x16>
   3573e:	46c0      	nop			; (mov r8, r8)
   35740:	ffffefff 	.word	0xffffefff

00035744 <__swrite>:
   35744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35746:	001f      	movs	r7, r3
   35748:	898b      	ldrh	r3, [r1, #12]
   3574a:	0005      	movs	r5, r0
   3574c:	000c      	movs	r4, r1
   3574e:	0016      	movs	r6, r2
   35750:	05db      	lsls	r3, r3, #23
   35752:	d505      	bpl.n	35760 <__swrite+0x1c>
   35754:	230e      	movs	r3, #14
   35756:	5ec9      	ldrsh	r1, [r1, r3]
   35758:	2200      	movs	r2, #0
   3575a:	2302      	movs	r3, #2
   3575c:	f000 f88e 	bl	3587c <_lseek_r>
   35760:	89a3      	ldrh	r3, [r4, #12]
   35762:	4a05      	ldr	r2, [pc, #20]	; (35778 <__swrite+0x34>)
   35764:	0028      	movs	r0, r5
   35766:	4013      	ands	r3, r2
   35768:	81a3      	strh	r3, [r4, #12]
   3576a:	0032      	movs	r2, r6
   3576c:	230e      	movs	r3, #14
   3576e:	5ee1      	ldrsh	r1, [r4, r3]
   35770:	003b      	movs	r3, r7
   35772:	f000 f839 	bl	357e8 <_write_r>
   35776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35778:	ffffefff 	.word	0xffffefff

0003577c <__sseek>:
   3577c:	b570      	push	{r4, r5, r6, lr}
   3577e:	000c      	movs	r4, r1
   35780:	250e      	movs	r5, #14
   35782:	5f49      	ldrsh	r1, [r1, r5]
   35784:	f000 f87a 	bl	3587c <_lseek_r>
   35788:	89a3      	ldrh	r3, [r4, #12]
   3578a:	1c42      	adds	r2, r0, #1
   3578c:	d103      	bne.n	35796 <__sseek+0x1a>
   3578e:	4a05      	ldr	r2, [pc, #20]	; (357a4 <__sseek+0x28>)
   35790:	4013      	ands	r3, r2
   35792:	81a3      	strh	r3, [r4, #12]
   35794:	bd70      	pop	{r4, r5, r6, pc}
   35796:	2280      	movs	r2, #128	; 0x80
   35798:	0152      	lsls	r2, r2, #5
   3579a:	4313      	orrs	r3, r2
   3579c:	81a3      	strh	r3, [r4, #12]
   3579e:	6560      	str	r0, [r4, #84]	; 0x54
   357a0:	e7f8      	b.n	35794 <__sseek+0x18>
   357a2:	46c0      	nop			; (mov r8, r8)
   357a4:	ffffefff 	.word	0xffffefff

000357a8 <__sclose>:
   357a8:	b510      	push	{r4, lr}
   357aa:	230e      	movs	r3, #14
   357ac:	5ec9      	ldrsh	r1, [r1, r3]
   357ae:	f000 f82f 	bl	35810 <_close_r>
   357b2:	bd10      	pop	{r4, pc}

000357b4 <strchr>:
   357b4:	b2c9      	uxtb	r1, r1
   357b6:	7803      	ldrb	r3, [r0, #0]
   357b8:	2b00      	cmp	r3, #0
   357ba:	d004      	beq.n	357c6 <strchr+0x12>
   357bc:	4299      	cmp	r1, r3
   357be:	d100      	bne.n	357c2 <strchr+0xe>
   357c0:	4770      	bx	lr
   357c2:	3001      	adds	r0, #1
   357c4:	e7f7      	b.n	357b6 <strchr+0x2>
   357c6:	424b      	negs	r3, r1
   357c8:	4159      	adcs	r1, r3
   357ca:	4249      	negs	r1, r1
   357cc:	4008      	ands	r0, r1
   357ce:	e7f7      	b.n	357c0 <strchr+0xc>

000357d0 <__ascii_wctomb>:
   357d0:	1e0b      	subs	r3, r1, #0
   357d2:	d004      	beq.n	357de <__ascii_wctomb+0xe>
   357d4:	2aff      	cmp	r2, #255	; 0xff
   357d6:	d904      	bls.n	357e2 <__ascii_wctomb+0x12>
   357d8:	238a      	movs	r3, #138	; 0x8a
   357da:	6003      	str	r3, [r0, #0]
   357dc:	3b8b      	subs	r3, #139	; 0x8b
   357de:	0018      	movs	r0, r3
   357e0:	4770      	bx	lr
   357e2:	700a      	strb	r2, [r1, #0]
   357e4:	2301      	movs	r3, #1
   357e6:	e7fa      	b.n	357de <__ascii_wctomb+0xe>

000357e8 <_write_r>:
   357e8:	b570      	push	{r4, r5, r6, lr}
   357ea:	0005      	movs	r5, r0
   357ec:	0008      	movs	r0, r1
   357ee:	0011      	movs	r1, r2
   357f0:	2200      	movs	r2, #0
   357f2:	4c06      	ldr	r4, [pc, #24]	; (3580c <_write_r+0x24>)
   357f4:	6022      	str	r2, [r4, #0]
   357f6:	001a      	movs	r2, r3
   357f8:	f7f4 fd46 	bl	2a288 <_write>
   357fc:	1c43      	adds	r3, r0, #1
   357fe:	d103      	bne.n	35808 <_write_r+0x20>
   35800:	6823      	ldr	r3, [r4, #0]
   35802:	2b00      	cmp	r3, #0
   35804:	d000      	beq.n	35808 <_write_r+0x20>
   35806:	602b      	str	r3, [r5, #0]
   35808:	bd70      	pop	{r4, r5, r6, pc}
   3580a:	46c0      	nop			; (mov r8, r8)
   3580c:	20005c54 	.word	0x20005c54

00035810 <_close_r>:
   35810:	2300      	movs	r3, #0
   35812:	b570      	push	{r4, r5, r6, lr}
   35814:	4c06      	ldr	r4, [pc, #24]	; (35830 <_close_r+0x20>)
   35816:	0005      	movs	r5, r0
   35818:	0008      	movs	r0, r1
   3581a:	6023      	str	r3, [r4, #0]
   3581c:	f7f4 fd88 	bl	2a330 <_close>
   35820:	1c43      	adds	r3, r0, #1
   35822:	d103      	bne.n	3582c <_close_r+0x1c>
   35824:	6823      	ldr	r3, [r4, #0]
   35826:	2b00      	cmp	r3, #0
   35828:	d000      	beq.n	3582c <_close_r+0x1c>
   3582a:	602b      	str	r3, [r5, #0]
   3582c:	bd70      	pop	{r4, r5, r6, pc}
   3582e:	46c0      	nop			; (mov r8, r8)
   35830:	20005c54 	.word	0x20005c54

00035834 <_fstat_r>:
   35834:	2300      	movs	r3, #0
   35836:	b570      	push	{r4, r5, r6, lr}
   35838:	4c06      	ldr	r4, [pc, #24]	; (35854 <_fstat_r+0x20>)
   3583a:	0005      	movs	r5, r0
   3583c:	0008      	movs	r0, r1
   3583e:	0011      	movs	r1, r2
   35840:	6023      	str	r3, [r4, #0]
   35842:	f7f4 fd7f 	bl	2a344 <_fstat>
   35846:	1c43      	adds	r3, r0, #1
   35848:	d103      	bne.n	35852 <_fstat_r+0x1e>
   3584a:	6823      	ldr	r3, [r4, #0]
   3584c:	2b00      	cmp	r3, #0
   3584e:	d000      	beq.n	35852 <_fstat_r+0x1e>
   35850:	602b      	str	r3, [r5, #0]
   35852:	bd70      	pop	{r4, r5, r6, pc}
   35854:	20005c54 	.word	0x20005c54

00035858 <_isatty_r>:
   35858:	2300      	movs	r3, #0
   3585a:	b570      	push	{r4, r5, r6, lr}
   3585c:	4c06      	ldr	r4, [pc, #24]	; (35878 <_isatty_r+0x20>)
   3585e:	0005      	movs	r5, r0
   35860:	0008      	movs	r0, r1
   35862:	6023      	str	r3, [r4, #0]
   35864:	f7f4 fd7c 	bl	2a360 <_isatty>
   35868:	1c43      	adds	r3, r0, #1
   3586a:	d103      	bne.n	35874 <_isatty_r+0x1c>
   3586c:	6823      	ldr	r3, [r4, #0]
   3586e:	2b00      	cmp	r3, #0
   35870:	d000      	beq.n	35874 <_isatty_r+0x1c>
   35872:	602b      	str	r3, [r5, #0]
   35874:	bd70      	pop	{r4, r5, r6, pc}
   35876:	46c0      	nop			; (mov r8, r8)
   35878:	20005c54 	.word	0x20005c54

0003587c <_lseek_r>:
   3587c:	b570      	push	{r4, r5, r6, lr}
   3587e:	0005      	movs	r5, r0
   35880:	0008      	movs	r0, r1
   35882:	0011      	movs	r1, r2
   35884:	2200      	movs	r2, #0
   35886:	4c06      	ldr	r4, [pc, #24]	; (358a0 <_lseek_r+0x24>)
   35888:	6022      	str	r2, [r4, #0]
   3588a:	001a      	movs	r2, r3
   3588c:	f7f4 fd71 	bl	2a372 <_lseek>
   35890:	1c43      	adds	r3, r0, #1
   35892:	d103      	bne.n	3589c <_lseek_r+0x20>
   35894:	6823      	ldr	r3, [r4, #0]
   35896:	2b00      	cmp	r3, #0
   35898:	d000      	beq.n	3589c <_lseek_r+0x20>
   3589a:	602b      	str	r3, [r5, #0]
   3589c:	bd70      	pop	{r4, r5, r6, pc}
   3589e:	46c0      	nop			; (mov r8, r8)
   358a0:	20005c54 	.word	0x20005c54

000358a4 <memchr>:
   358a4:	b2c9      	uxtb	r1, r1
   358a6:	1882      	adds	r2, r0, r2
   358a8:	4290      	cmp	r0, r2
   358aa:	d101      	bne.n	358b0 <memchr+0xc>
   358ac:	2000      	movs	r0, #0
   358ae:	4770      	bx	lr
   358b0:	7803      	ldrb	r3, [r0, #0]
   358b2:	428b      	cmp	r3, r1
   358b4:	d0fb      	beq.n	358ae <memchr+0xa>
   358b6:	3001      	adds	r0, #1
   358b8:	e7f6      	b.n	358a8 <memchr+0x4>

000358ba <_realloc_r>:
   358ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   358bc:	0007      	movs	r7, r0
   358be:	000d      	movs	r5, r1
   358c0:	0016      	movs	r6, r2
   358c2:	2900      	cmp	r1, #0
   358c4:	d105      	bne.n	358d2 <_realloc_r+0x18>
   358c6:	0011      	movs	r1, r2
   358c8:	f7fe feac 	bl	34624 <_malloc_r>
   358cc:	0004      	movs	r4, r0
   358ce:	0020      	movs	r0, r4
   358d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   358d2:	2a00      	cmp	r2, #0
   358d4:	d103      	bne.n	358de <_realloc_r+0x24>
   358d6:	f7fe fe5b 	bl	34590 <_free_r>
   358da:	0034      	movs	r4, r6
   358dc:	e7f7      	b.n	358ce <_realloc_r+0x14>
   358de:	f000 f827 	bl	35930 <_malloc_usable_size_r>
   358e2:	002c      	movs	r4, r5
   358e4:	4286      	cmp	r6, r0
   358e6:	d9f2      	bls.n	358ce <_realloc_r+0x14>
   358e8:	0031      	movs	r1, r6
   358ea:	0038      	movs	r0, r7
   358ec:	f7fe fe9a 	bl	34624 <_malloc_r>
   358f0:	1e04      	subs	r4, r0, #0
   358f2:	d0ec      	beq.n	358ce <_realloc_r+0x14>
   358f4:	0029      	movs	r1, r5
   358f6:	0032      	movs	r2, r6
   358f8:	f7fe fe26 	bl	34548 <memcpy>
   358fc:	0029      	movs	r1, r5
   358fe:	0038      	movs	r0, r7
   35900:	f7fe fe46 	bl	34590 <_free_r>
   35904:	e7e3      	b.n	358ce <_realloc_r+0x14>
	...

00035908 <_read_r>:
   35908:	b570      	push	{r4, r5, r6, lr}
   3590a:	0005      	movs	r5, r0
   3590c:	0008      	movs	r0, r1
   3590e:	0011      	movs	r1, r2
   35910:	2200      	movs	r2, #0
   35912:	4c06      	ldr	r4, [pc, #24]	; (3592c <_read_r+0x24>)
   35914:	6022      	str	r2, [r4, #0]
   35916:	001a      	movs	r2, r3
   35918:	f7f4 fc8c 	bl	2a234 <_read>
   3591c:	1c43      	adds	r3, r0, #1
   3591e:	d103      	bne.n	35928 <_read_r+0x20>
   35920:	6823      	ldr	r3, [r4, #0]
   35922:	2b00      	cmp	r3, #0
   35924:	d000      	beq.n	35928 <_read_r+0x20>
   35926:	602b      	str	r3, [r5, #0]
   35928:	bd70      	pop	{r4, r5, r6, pc}
   3592a:	46c0      	nop			; (mov r8, r8)
   3592c:	20005c54 	.word	0x20005c54

00035930 <_malloc_usable_size_r>:
   35930:	1f0b      	subs	r3, r1, #4
   35932:	681b      	ldr	r3, [r3, #0]
   35934:	1f18      	subs	r0, r3, #4
   35936:	2b00      	cmp	r3, #0
   35938:	da01      	bge.n	3593e <_malloc_usable_size_r+0xe>
   3593a:	580b      	ldr	r3, [r1, r0]
   3593c:	18c0      	adds	r0, r0, r3
   3593e:	4770      	bx	lr

00035940 <sysfont_glyphs>:
   35940:	0000 0000 0000 2000 2020 2020 2000 5050     .......     . PP
   35950:	0050 0000 5000 f850 f850 5050 7820 70a0     P....PP.P.PP x.p
   35960:	f028 c020 10c8 4020 1898 9060 40a0 90a8     (. ... @..`..@..
   35970:	6068 4020 0000 0000 2010 4040 2040 4010     h` @..... @@@ .@
   35980:	1020 1010 4020 5000 f820 5020 0000 2020      ... @.P . P..  
   35990:	20f8 0020 0000 0000 2060 0040 0000 00f8     .  .....` @.....
   359a0:	0000 0000 0000 6000 0060 1008 4020 0080     .......``... @..
   359b0:	8870 a898 88c8 2070 2060 2020 7020 8870     p.....p `    pp.
   359c0:	1008 4020 f8f8 2010 0810 7088 3010 9050     .. @... ...p.0P.
   359d0:	10f8 f810 f080 0808 7088 4030 f080 8888     .........p0@....
   359e0:	f870 1008 4020 4040 8870 7088 8888 7070     p... @@@p..p..pp
   359f0:	8888 0878 6010 6000 0060 6060 0000 6060     ..x..`.``.``..``
   35a00:	6000 4020 1008 4020 1020 0008 f800 f800     .` @.. @ .......
   35a10:	0000 4080 1020 4020 7080 0888 2010 2000     ...@ . @.p... . 
   35a20:	8870 6808 a8a8 7070 8888 f888 8888 88f0     p..h..pp........
   35a30:	f088 8888 70f0 8088 8080 7088 90e0 8888     .....p.....p....
   35a40:	9088 f8e0 8080 80f0 f880 80f8 e080 8080     ................
   35a50:	7080 8088 9880 7088 8888 f888 8888 7088     .p.....p.......p
   35a60:	2020 2020 7020 1038 1010 9010 8860 a090          p8.....`...
   35a70:	a0c0 8890 8080 8080 8080 88f8 a8d8 8888     ................
   35a80:	8888 8888 a8c8 8898 7088 8888 8888 7088     .........p.....p
   35a90:	88f0 f088 8080 7080 8888 a888 6890 88f0     .......p.....h..
   35aa0:	f088 90a0 7888 8080 0870 f008 20f8 2020     .....x..p....   
   35ab0:	2020 8820 8888 8888 7088 8888 8888 5088        ......p.....P
   35ac0:	8820 8888 a8a8 88d8 8888 2050 8850 8888      .........P P...
   35ad0:	5088 2020 2020 08f8 2010 8040 38f8 2020     .P    ... @..8  
   35ae0:	2020 3820 8000 2040 0810 e000 2020 2020        8..@ ....    
   35af0:	e020 5020 0088 0000 0000 0000 0000 f800      . P............
   35b00:	2040 0010 0000 0000 7000 7808 7888 8080     @ .......p.x.x..
   35b10:	c8b0 8888 00f0 7000 8080 7088 0808 9868     .......p...p..h.
   35b20:	8888 0078 7000 f888 7080 4830 e040 4040     ..x..p...p0H@.@@
   35b30:	0040 7800 7888 3008 8080 c8b0 8888 2088     @..x.x.0....... 
   35b40:	6000 2020 7020 0010 1030 9010 4060 4840     .`   p..0...`@@H
   35b50:	6050 4850 2060 2020 2020 0070 d000 a8a8     P`PH`     p.....
   35b60:	8888 0000 c8b0 8888 0088 7000 8888 7088     ...........p...p
   35b70:	0000 88f0 80f0 0080 6800 7898 0808 0000     .........h.x....
   35b80:	c8b0 8080 0080 7000 7080 f008 4040 40e0     .......p.p..@@.@
   35b90:	4840 0030 8800 8888 6898 0000 8888 5088     @H0......h.....P
   35ba0:	0020 8800 a888 50a8 0000 5088 5020 0088      ......P...P P..
   35bb0:	8800 7888 7008 0000 10f8 4020 10f8 2020     ...x.p.... @..  
   35bc0:	2040 1020 2020 2020 2020 4020 2020 2010     @  .       @  . 
   35bd0:	4020 0000                                    @..

00035bd4 <pcWelcomeMessage>:
   35bd4:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   35be4:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   35bf4:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   35c04:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   35c14:	000a 0000 7766 0000 7766 203a 6f44 6e77     ....fw..fw: Down
   35c24:	6f6c 6461 6120 6620 6c69 2065 6e61 2064     load a file and 
   35c34:	6570 6672 726f 206d 6e61 4620 2057 7075     perform an FW up
   35c44:	6164 6574 0a0d 0000 6572 6573 0074 0000     date....reset...
   35c54:	6572 6573 3a74 5220 7365 7465 2073 6874     reset: Resets th
   35c64:	2065 6564 6976 6563 0a0d 0000 3269 0063     e device....i2c.
   35c74:	3269 3a63 5320 6163 736e 4920 4332 6220     i2c: Scans I2C b
   35c84:	7375 0a0d 0000 0000 6574 7473 0000 0000     us......test....
   35c94:	6574 7473 203a 6553 646e 2073 6574 7473     test: Sends test
   35ca4:	6420 7461 0d61 000a 616e 0075 616e 3a75      data...nau.nau:
   35cb4:	5320 6e65 7364 7720 6965 6867 2074 6164      Sends weight da
   35cc4:	6174 0a0d 0000 0000 706f 6e65 0000 0000     ta......open....
   35cd4:	6573 7672 3a6f 4f20 6570 0d6e 000a 0000     servo: Open.....
   35ce4:	6c63 736f 0065 0000 6573 7672 3a6f 4320     close...servo: C
   35cf4:	6f6c 6573 0a0d 0000 6c63 0073 6c63 3a73     lose....cls.cls:
   35d04:	4320 656c 7261 2073 6874 2065 6574 6d72      Clears the term
   35d14:	6e69 6c61 7320 7263 6565 0d6e 000a 0000     inal screen.....
   35d24:	6f43 6c75 2064 6f6e 2074 6c61 6f6c 6163     Could not alloca
   35d34:	6574 7320 6d65 7061 6f68 6572 0a0d 0000     te semaphore....
   35d44:	0a0d 0000 616f 0000 6325 325b 0d4b 003e     ....oa..%c[2K.>.
   35d54:	2008 0008 6325 325b 004a 0000 6554 7473     . ..%c[2J...Test
   35d64:	4420 7461 2061 514d 5454 5020 736f 0d74      Data MQTT Post.
   35d74:	000a 0000 6e69 7570 2074 6f76 206c 203d     ....input vol = 
   35d84:	4956 314e 2050 202d 4956 314e 204e 203d     VIN1P - VIN1N = 
   35d94:	6425 0a0d 0000 0000 614e 2075 6144 6174     %d......Nau Data
   35da4:	4d20 5451 2054 6f50 7473 0a0d 0000 0000      MQTT Post......
   35db4:	6425 0000 2030 3120 2020 2032 3320 2020     %d..0  1  2  3  
   35dc4:	2034 3520 2020 2036 3720 2020 2038 3920     4  5  6  7  8  9
   35dd4:	2020 2061 6220 2020 2063 6420 2020 2065       a  b  c  d  e 
   35de4:	6620 0a0d 0000 0000 3025 7832 203a 0000      f......%02x: ..
   35df4:	2058 0000                                   X ..

00035df8 <xOTAUCommand>:
   35df8:	5c18 0003 5c1c 0003 3bed 0001 0000 0000     .\...\...;......

00035e08 <xResetCommand>:
   35e08:	5c4c 0003 5c54 0003 3c0d 0001 0000 0000     L\..T\...<......

00035e18 <xI2cScan>:
   35e18:	5c70 0003 5c74 0003 3dd1 0001 0000 0000     p\..t\...=......

00035e28 <xSendTestData>:
   35e28:	5c8c 0003 5c94 0003 3c2d 0001 0000 0000     .\...\..-<......

00035e38 <xSendWeightData>:
   35e38:	5cac 0003 5cb0 0003 3cb9 0001 0000 0000     .\...\...<......

00035e48 <xServoOpen>:
   35e48:	5ccc 0003 5cd4 0003 3c79 0001 0000 0000     .\...\..y<......

00035e58 <xServoClose>:
   35e58:	5ce4 0003 5cec 0003 3c99 0001 0000 0000     .\...\...<......

00035e68 <xClearScreen>:
   35e68:	5cfc 0003 5d00 0003 3ba5 0001 0000 0000     .\...]...;......
   35e78:	4955 5420 7361 206b 7453 7261 6574 2164     UI Task Started!
   35e88:	0000 0000 5345 3545 3631 0000 4948 4847     ....ESE516..HIGH
   35e98:	4157 0059 6425 252e 0064 0000               WAY.%d.%d...

00035ea4 <main_mqtt_broker>:
   35ea4:	7262 6b6f 7265 682e 7669 6d65 2e71 6f63     broker.hivemq.co
   35eb4:	006d 0000 3025 6433 0000 0000 7473 7261     m...%03d....star
   35ec4:	5f74 6f64 6e77 6f6c 6461 203a 4d4d 2043     t_download: MMC 
   35ed4:	7473 726f 6761 2065 6f6e 2074 6572 6461     storage not read
   35ee4:	2e79 0a0d 0000 0000 7473 7261 5f74 6f64     y.......start_do
   35ef4:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   35f04:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   35f14:	000a 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   35f24:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   35f34:	6e65 2074 6c61 6572 6461 2e79 0a0d 0000     ent already.....
   35f44:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   35f54:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   35f64:	6120 726c 6165 7964 0d2e 000a 7473 7261      already....star
   35f74:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   35f84:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   35f94:	2e2e 0d2e 000a 0000 7468 7074 3a73 2f2f     ........https://
   35fa4:	3437 322e 3533 312e 3537 342e 2f31 6554     74.235.175.41/Te
   35fb4:	7473 2e42 6962 006e 7473 726f 5f65 6966     stB.bin.store_fi
   35fc4:	656c 705f 6361 656b 3a74 6520 706d 7974     le_packet: empty
   35fd4:	6420 7461 2e61 0a0d 0000 0000 7473 726f      data.......stor
   35fe4:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   35ff4:	6c69 2065 616e 656d 6920 2073 6e69 6176     ile name is inva
   36004:	696c 2e64 4420 776f 6c6e 616f 2064 6163     lid. Download ca
   36014:	636e 6c65 6465 0d2e 000a 0000 7473 726f     nceled......stor
   36024:	5f65 6966 656c 705f 6361 656b 3a74 6320     e_file_packet: c
   36034:	6572 7461 6e69 2067 6966 656c 5b20 7325     reating file [%s
   36044:	0d5d 000a 7473 726f 5f65 6966 656c 705f     ]...store_file_p
   36054:	6361 656b 3a74 6620 6c69 2065 7263 6165     acket: file crea
   36064:	6974 6e6f 6520 7272 726f 2021 6572 3a74     tion error! ret:
   36074:	6425 0a0d 0000 0000 7473 726f 5f65 6966     %d......store_fi
   36084:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   36094:	7277 7469 2065 7265 6f72 2c72 6420 776f     write error, dow
   360a4:	6c6e 616f 2064 6163 636e 6c65 6465 0d2e     nload canceled..
   360b4:	000a 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   360c4:	6361 656b 3a74 7220 6365 6965 6576 5b64     acket: received[
   360d4:	6c25 5d75 202c 6966 656c 7320 7a69 5b65     %lu], file size[
   360e4:	6c25 5d75 0a0d 0000 7473 726f 5f65 6966     %lu]....store_fi
   360f4:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   36104:	6f64 6e77 6f6c 6461 6465 7320 6375 6563     downloaded succe
   36114:	7373 7566 6c6c 2e79 0a0d 0000 7468 7074     ssfully.....http
   36124:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   36134:	203a 5448 5054 6320 696c 6e65 2074 6f73     : HTTP client so
   36144:	6b63 7465 6320 6e6f 656e 7463 6465 0d2e     cket connected..
   36154:	000a 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
   36164:	6163 6c6c 6162 6b63 203a 6572 7571 7365     callback: reques
   36174:	2074 6f63 706d 656c 6574 2e64 0a0d 0000     t completed.....
   36184:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   36194:	6162 6b63 203a 6572 6563 7669 6465 7220     back: received r
   361a4:	7365 6f70 736e 2065 7525 6420 7461 2061     esponse %u data 
   361b4:	6973 657a 2520 0d75 000a 0000 7468 7074     size %u.....http
   361c4:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   361d4:	203a 6964 6373 6e6f 656e 7463 6f69 206e     : disconnection 
   361e4:	6572 7361 6e6f 253a 0d64 000a 6572 6f73     reason:%d...reso
   361f4:	766c 5f65 6263 203a 7325 4920 2050 6461     lve_cb: %s IP ad
   36204:	7264 7365 2073 7369 2520 2e64 6425 252e     dress is %d.%d.%
   36214:	2e64 6425 0a0d 0a0d 0000 0000 6977 6966     d.%d........wifi
   36224:	635f 3a62 4d20 4d32 575f 4649 5f49 4f43     _cb: M2M_WIFI_CO
   36234:	4e4e 4345 4554 0d44 000a 0000 6977 6966     NNECTED.....wifi
   36244:	635f 3a62 4d20 4d32 575f 4649 5f49 4944     _cb: M2M_WIFI_DI
   36254:	4353 4e4f 454e 5443 4445 0a0d 0000 0000     SCONNECTED......
   36264:	317a 3332 3534 3736 0038 0000 007a 0000     z12345678...z...
   36274:	6977 6966 635f 3a62 4920 2050 6461 7264     wifi_cb: IP addr
   36284:	7365 2073 7369 2520 2e75 7525 252e 2e75     ess is %u.%u.%u.
   36294:	7525 0a0d 0000 0000 7245 6f72 2072 6f63     %u......Error co
   362a4:	6e6e 6365 6974 676e 7420 206f 514d 5454     nnecting to MQTT
   362b4:	4220 6f72 656b 2172 0a0d 0000 6e69 7469      Broker!....init
   362c4:	735f 6f74 6172 6567 203a 6c70 6165 6573     _storage: please
   362d4:	7020 756c 2067 6e61 5320 2f44 4d4d 2043      plug an SD/MMC 
   362e4:	6163 6472 6920 206e 6c73 746f 2e2e 0d2e     card in slot....
   362f4:	000a 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   36304:	203a 4453 4320 7261 2064 6e69 7473 6c61     : SD Card instal
   36314:	206c 6166 6c69 6465 0d2e 000a 6e69 7469     l failed....init
   36324:	735f 6f74 6172 6567 203a 7274 2079 6e75     _storage: try un
   36334:	6c70 6775 6120 646e 7220 2d65 6c70 6775     plug and re-plug
   36344:	7420 6568 6320 7261 2e64 0a0d 0000 0000      the card.......
   36354:	6e69 7469 735f 6f74 6172 6567 203a 6f6d     init_storage: mo
   36364:	6e75 6974 676e 5320 2044 6163 6472 2e2e     unting SD card..
   36374:	0d2e 000a 6e69 7469 735f 6f74 6172 6567     ....init_storage
   36384:	203a 4453 6320 7261 2064 6f6d 6e75 2074     : SD card mount 
   36394:	6166 6c69 6465 2021 7228 7365 2520 2964     failed! (res %d)
   363a4:	0a0d 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   363b4:	203a 4453 6320 7261 2064 6f6d 6e75 2074     : SD card mount 
   363c4:	4b4f 0d2e 000a 0000 6f63 666e 6769 7275     OK......configur
   363d4:	5f65 7468 7074 635f 696c 6e65 3a74 4820     e_http_client: H
   363e4:	5454 2050 6c63 6569 746e 6920 696e 6974     TTP client initi
   363f4:	6c61 7a69 7461 6f69 206e 6166 6c69 6465     alization failed
   36404:	2021 7228 7365 2520 2964 0a0d 0000 0000     ! (res %d)......
   36414:	0a0d 2520 2a2e 0073 3e20 203e 0000 0000     .. %.*s. >> ....
   36424:	2e25 732a 0000 0000 3150 4c5f 4445 455f     %.*s....P1_LED_E
   36434:	4553 3135 5f36 3954 0000 0000 6166 736c     SE516_T9....fals
   36444:	0065 0000 7274 6575 0000 0000 4553 5652     e...true....SERV
   36454:	5f4f 4f54 4950 5f43 3135 5f36 3954 0000     O_TOPIC_516_T9..
   36464:	0a0d 6f43 6e6e 6365 6974 676e 7420 206f     ..Connecting to 
   36474:	7242 6b6f 7265 2e2e 002e 0000 7242 4a73     Broker......BrsJ
   36484:	4e42 6f56 4251 376c 0000 0000 7472 7974     BNVoQBl7....rtty
   36494:	626f 6a65 0000 0000 514d 5454 2020 7245     obej....MQTT  Er
   364a4:	6f72 2072 202d 4f4e 2054 6f43 6e6e 6365     ror - NOT Connec
   364b4:	6574 2064 6f74 6220 6f72 656b 0d72 000a     ted to broker...
   364c4:	514d 5454 4320 6e6f 656e 7463 6465 7420     MQTT Connected t
   364d4:	206f 7262 6b6f 7265 0a0d 0000 6f43 6e6e     o broker....Conn
   364e4:	6365 2074 6166 6c69 7420 206f 6573 7672     ect fail to serv
   364f4:	7265 2528 2973 2021 6572 7274 2079 7469     er(%s)! retry it
   36504:	6120 7475 6d6f 7461 6369 6c61 796c 0d2e      automatically..
   36514:	000a 0000 514d 5454 4320 6e6f 656e 7463     ....MQTT Connect
   36524:	6465 0a0d 0000 0000 514d 5454 6220 6f72     ed......MQTT bro
   36534:	656b 2072 6564 6c63 6e69 2065 6f79 7275     ker decline your
   36544:	6120 6363 7365 2173 6520 7272 726f 6320      access! error c
   36554:	646f 2065 6425 0a0d 0000 0000 514d 5454     ode %d......MQTT
   36564:	6420 7369 6f63 6e6e 6365 6574 0d64 000a      disconnected...
   36574:	514d 5454 6920 696e 6974 6c61 7a69 7461     MQTT initializat
   36584:	6f69 206e 6166 6c69 6465 202e 7245 6f72     ion failed. Erro
   36594:	2072 6f63 6564 6920 2073 2528 2964 0a0d     r code is (%d)..
   365a4:	0000 0000 514d 5454 7220 6765 7369 6574     ....MQTT registe
   365b4:	2072 6163 6c6c 6162 6b63 6620 6961 656c     r callback faile
   365c4:	2e64 4520 7272 726f 6320 646f 2065 7369     d. Error code is
   365d4:	2820 6425 0d29 000a 227b 2264 7b3a 7422      (%d)...{"d":{"t
   365e4:	6d65 2270 253a 7d64 007d 0000 465b 4941     emp":%d}}...[FAI
   365f4:	5d4c 7220 7365 2520 0d64 000a 6c46 6761     L] res %d...Flag
   36604:	2e41 7874 2074 6461 6564 2164 0a0d 0000     A.txt added!....
   36614:	3a30 6c46 6761 2e41 7874 0074 6f43 6e6e     0:FlagA.txt.Conn
   36624:	6365 6574 2064 6f74 4d20 5451 2054 7242     ected to MQTT Br
   36634:	6b6f 7265 0d21 000a 227b 6574 7473 3a22     oker!...{"test":
   36644:	6425 7d20 0000 0000 4554 5453 545f 504f     %d }....TEST_TOP
   36654:	4349 355f 3631 545f 0039 0000 227b 616e     IC_516_T9...{"na
   36664:	5f75 2269 253a 2c64 2020 6e22 7561 665f     u_i":%d,  "nau_f
   36674:	3a22 2520 7d64 0000 414e 5f55 4f54 4950     ": %d}..NAU_TOPI
   36684:	5f43 3135 5f36 3954 0000 0000 414e 2055     C_516_T9....NAU 
   36694:	4144 4154 5020 534f 4554 0044 5245 4f52     DATA POSTED.ERRO
   366a4:	2052 6e49 7469 6169 696c 697a 676e 5720     R Initializing W
   366b4:	6669 2069 6144 6174 7120 6575 6575 2173     ifi Data queues!
   366c4:	0a0d 0000 5345 3545 3631 2d20 5720 6669     ....ESE516 - Wif
   366d4:	2069 6e49 7469 4320 646f 0d65 000a 0000     i Init Code.....
   366e4:	616d 6e69 203a 326d 5f6d 6977 6966 695f     main: m2m_wifi_i
   366f4:	696e 2074 6163 6c6c 6520 7272 726f 2021     nit call error! 
   36704:	7228 7365 2520 2964 0a0d 0000 616d 6e69     (res %d)....main
   36714:	203a 6f63 6e6e 6365 6974 676e 7420 206f     : connecting to 
   36724:	6957 6946 4120 2050 7325 2e2e 0d2e 000a     WiFi AP %s......
   36734:	3150 545f 4d45 4550 4152 5554 4552 455f     P1_TEMPERATURE_E
   36744:	4553 3135 5f36 3954 0000 0000 514d 5454     SE516_T9....MQTT
   36754:	7320 6e65 2064 7325 0a0d 0000 5634 0001      send %s....4V..
   36764:	5640 0001 5652 0001 56a8 0001 56c8 0001     @V..RV...V...V..
   36774:	6568 706c 0000 0000 0a0d 6568 706c 0d3a     help......help:.
   36784:	200a 694c 7473 2073 6c61 206c 6874 2065     . Lists all the 
   36794:	6572 6967 7473 7265 6465 6320 6d6f 616d     registered comma
   367a4:	646e 0d73 0d0a 000a 6e49 6f63 7272 6365     nds.....Incorrec
   367b4:	2074 6f63 6d6d 6e61 2064 6170 6172 656d     t command parame
   367c4:	6574 2872 2973 202e 4520 746e 7265 2220     ter(s).  Enter "
   367d4:	6568 706c 2022 6f74 7620 6569 2077 2061     help" to view a 
   367e4:	696c 7473 6f20 2066 7661 6961 616c 6c62     list of availabl
   367f4:	2065 6f63 6d6d 6e61 7364 0d2e 0d0a 000a     e commands......
   36804:	6f43 6d6d 6e61 2064 6f6e 2074 6572 6f63     Command not reco
   36814:	6e67 7369 6465 202e 4520 746e 7265 2720     gnised.  Enter '
   36824:	6568 706c 2027 6f74 7620 6569 2077 2061     help' to view a 
   36834:	696c 7473 6f20 2066 7661 6961 616c 6c62     list of availabl
   36844:	2065 6f63 6d6d 6e61 7364 0d2e 0d0a 000a     e commands......

00036854 <xHelpCommand>:
   36854:	6774 0003 677c 0003 7011 0001 0000 0000     tg..|g...p......
   36864:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   36874:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   36884:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   36894:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   368a4:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   368b4:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   368c4:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   368d4:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   368e4:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   368f4:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   36904:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   36914:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   36924:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   36934:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   36944:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   36954:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   36964:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   36974:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   36984:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   36994:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   369a4:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   369b4:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   369c4:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   369d4:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   369e4:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   369f4:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   36a04:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   36a14:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   36a24:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   36a34:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   36a44:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   36a54:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   36a64:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   36a74:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   36a84:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   36a94:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   36aa4:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   36ab4:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   36ac4:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   36ad4:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   36ae4:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   36af4:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   36b04:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   36b14:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   36b24:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   36b34:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   36b44:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   36b54:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   36b64:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   36b74:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   36b84:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   36b94:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   36ba4:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   36bb4:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   36bc4:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   36bd4:	6365 6374 616c 7373 0021 0000 7736 0001     ectclass!...6w..
   36be4:	772e 0001 7732 0001 7726 0001 772a 0001     .w..2w..&w..*w..
   36bf4:	773a 0001 773e 0001 7742 0001 7746 0001     :w..>w..Bw..Fw..
   36c04:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   36c14:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   36c24:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   36c34:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   36c44:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   36c54:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   36c64:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   36c74:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   36c84:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   36c94:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   36ca4:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   36cb4:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   36cc4:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   36cd4:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   36ce4:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   36cf4:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   36d04:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   36d14:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   36d24:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   36d34:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   36d44:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   36d54:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   36d64:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   36d74:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   36d84:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   36d94:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   36da4:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   36db4:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   36dc4:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   36dd4:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   36de4:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   36df4:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   36e04:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   36e14:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   36e24:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   36e34:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   36e44:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   36e54:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   36e64:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   36e74:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   36e84:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   36e94:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   36ea4:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   36eb4:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   36ec4:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   36ed4:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   36ee4:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   36ef4:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   36f04:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   36f14:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   36f24:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   36f34:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   36f44:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   36f54:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   36f64:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   36f74:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   36f84:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   36f94:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   36fa4:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   36fb4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   36fc4:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   36fd4:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   36fe4:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   36ff4:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   37004:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   37014:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   37024:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37034:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   37044:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   37054:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   37064:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37074:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37084:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   37094:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   370a4:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   370b4:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   370c4:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   370d4:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   370e4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   370f4:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37104:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   37114:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   37124:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   37134:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   37144:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   37154:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   37164:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37174:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37184:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   37194:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   371a4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   371b4:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   371c4:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   371d4:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   371e4:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   371f4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37204:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37214:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   37224:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   37234:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   37244:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   37254:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   37264:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   37274:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37284:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   37294:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   372a4:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   372b4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   372c4:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   372d4:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   372e4:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   372f4:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   37304:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   37314:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   37324:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   37334:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   37344:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37354:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   37364:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   37374:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   37384:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   37394:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   373a4:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   373b4:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   373c4:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   373d4:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   373e4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   373f4:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   37404:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   37414:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   37424:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   37434:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   37444:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   37454:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   37464:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   37474:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   37484:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37494:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   374a4:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   374b4:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   374c4:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   374d4:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   374e4:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   374f4:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   37504:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   37514:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   37524:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37534:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   37544:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   37554:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   37564:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37574:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   37584:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   37594:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   375a4:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   375b4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   375c4:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   375d4:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   375e4:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   375f4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37604:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   37614:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   37624:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   37634:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37644:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   37654:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   37664:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   37674:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37684:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   37694:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   376a4:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   376b4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   376c4:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   376d4:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   376e4:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   376f4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37704:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   37714:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   37724:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   37734:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   37744:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   37754:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   37764:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   37774:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   37784:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   37794:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   377a4:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   377b4:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   377c4:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   377d4:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   377e4:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   377f4:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   37804:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   37814:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   37824:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   37834:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37844:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   37854:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   37864:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   37874:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   37884:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   37894:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   378a4:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   378b4:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   378c4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   378d4:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   378e4:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   378f4:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   37904:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   37914:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   37924:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   37934:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37944:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   37954:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   37964:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   37974:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   37984:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   37994:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   379a4:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   379b4:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   379c4:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   379d4:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   379e4:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   379f4:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   37a04:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   37a14:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   37a24:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   37a34:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   37a44:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   37a54:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37a64:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   37a74:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   37a84:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   37a94:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   37aa4:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   37ab4:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   37ac4:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   37ad4:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   37ae4:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   37af4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37b04:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   37b14:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   37b24:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   37b34:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   37b44:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   37b54:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   37b64:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   37b74:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   37b84:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   37b94:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   37ba4:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   37bb4:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   37bc4:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   37bd4:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   37be4:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37bf4:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   37c04:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   37c14:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   37c24:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   37c34:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   37c44:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   37c54:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   37c64:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   37c74:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   37c84:	0000 0000 6d54 2072 7653 0063 c7d8 0001     ....Tmr Svc.....
   37c94:	c7d8 0001 c7d8 0001 c866 0001 c830 0001     ........f...0...
   37ca4:	c85a 0001 c7d8 0001 c7d8 0001 c866 0001     Z...........f...
   37cb4:	c830 0001                                   0...

00037cb8 <sd_mmc_trans_units>:
   37cb8:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00037cd4 <sd_trans_multipliers>:
   37cd4:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   37ce4:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   37cf4:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   37d04:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00037d14 <mmc_trans_multipliers>:
   37d14:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   37d24:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   37d34:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   37d44:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   37d54:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   37d64:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   37d74:	746c 6320 646d 000a 000d 0000               lt cmd......

00037d80 <__FUNCTION__.17099>:
   37d80:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   37d90:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   37da0:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   37db0:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   37dc0:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   37dd0:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   37de0:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   37df0:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   37e00:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   37e10:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   37e20:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   37e30:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   37e40:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   37e50:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   37e60:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   37e70:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   37e80:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   37e90:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   37ea0:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   37eb0:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   37ec0:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   37ed0:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   37ee0:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   37ef0:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   37f00:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   37f10:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   37f20:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   37f30:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   37f40:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   37f50:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   37f60:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   37f70:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   37f80:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   37f90:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   37fa0:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   37fb0:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   37fc0:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   37fd0:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   37fe0:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   37ff0:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   38000:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   38010:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   38020:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   38030:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   38040:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   38050:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   38060:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   38070:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   38080:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   38090:	203f 6425 000a 0000 09dc 0002 09ac 0002     ? %d............
   380a0:	09a4 0002 09bc 0002 09b4 0002 09d4 0002     ................
   380b0:	09c4 0002 09cc 0002                         ........

000380b8 <__FUNCTION__.17967>:
   380b8:	6968 5f66 6573 646e 0000 0000               hif_send....

000380c4 <__FUNCTION__.17977>:
   380c4:	6968 5f66 7369 0072                         hif_isr.

000380cc <__FUNCTION__.17986>:
   380cc:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

000380dc <__FUNCTION__.17998>:
   380dc:	6968 5f66 6572 6563 7669 0065               hif_receive.

000380e8 <__FUNCTION__.18014>:
   380e8:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   380f8:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   38108:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   38118:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   38128:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   38138:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   38148:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   38158:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   38168:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   38178:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   38188:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   38198:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   381a8:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   381b8:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   381c8:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   381d8:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   381e8:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   381f8:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   38208:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   38218:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   38228:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   38238:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   38248:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   38258:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   38268:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   38278:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   38288:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   38298:	2064 000a 6946 6d72 6177 6572 7620 7265     d ..Firmware ver
   382a8:	2020 3a20 2520 2e75 7525 252e 2075 7653        : %u.%u.%u Sv
   382b8:	726e 7665 2520 0a75 0000 0000 6946 6d72     nrev %u.....Firm
   382c8:	6177 6572 4220 6975 646c 2520 2073 6954     ware Build %s Ti
   382d8:	656d 2520 0a73 0000 6946 6d72 6177 6572     me %s...Firmware
   382e8:	4d20 6e69 6420 6972 6576 2072 6576 2072      Min driver ver 
   382f8:	203a 7525 252e 2e75 7525 000a 7244 7669     : %u.%u.%u..Driv
   38308:	7265 7620 7265 203a 7525 252e 2e75 7525     er ver: %u.%u.%u
   38318:	000a 0000 3931 353a 3a37 3131 0000 0000     ....19:57:11....
   38328:	7041 2072 3033 3220 3230 0033 7244 7669     Apr 30 2023.Driv
   38338:	7265 6220 6975 746c 6120 2074 7325 2509     er built at %s.%
   38348:	0a73 0000 694d 6d73 7461 6863 4620 7269     s...Mismatch Fir
   38358:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...
   38368:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
   38378:	000a 0000 6e49 6176 696c 2064 654b 0a79     ....Invalid Key.
   38388:	0000 0000 5353 4449 4c20 4e45 4920 564e     ....SSID LEN INV
   38398:	4c41 4449 000a 0000 4843 4920 564e 4c41     ALID....CH INVAL
   383a8:	4449 000a 6e49 6176 696c 2064 6557 2070     ID..Invalid Wep 
   383b8:	656b 2079 6e69 6564 2078 6425 000a 0000     key index %d....
   383c8:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
   383d8:	656c 676e 6874 2520 0a64 0000 6e49 6f63     length %d...Inco
   383e8:	7272 6365 2074 5350 204b 656b 2079 656c     rrect PSK key le
   383f8:	676e 6874 000a 0000 6e75 6564 6966 656e     ngth....undefine
   38408:	2064 6573 2063 7974 6570 000a 505f 5f53     d sec type.._PS_
   38418:	4553 5652 5245 205f 7369 6e20 746f 6420     SERVER_ is not d
   38428:	6665 6e69 6465 000a 694c 7473 6e65 6320     efined..Listen c
   38438:	6168 6e6e 6c65 7320 6f68 6c75 2064 6e6f     hannel should on
   38448:	796c 6220 2065 324d 5f4d 4957 4946 435f     ly be M2M_WIFI_C
   38458:	5f48 2f31 2f36 3131 0a20 0000 4f50 4557     H_1/6/11 ...POWE
   38468:	2052 4153 4556 2520 0a64 0000 4e49 4156     R SAVE %d...INVA
   38478:	494c 2044 4f44 414d 4e49 4e20 4d41 0a45     LID DOMAIN NAME.
   38488:	0000 0000 5250 474e 4220 6675 6566 2072     ....PRNG Buffer 
   38498:	7865 6563 6465 6465 6d20 7861 6d69 6d75     exceeded maximum
   384a8:	7320 7a69 2065 6425 6f20 2072 554e 4c4c      size %d or NULL
   384b8:	4220 6675 6566 0a72 0000 0000                Buffer.....

000384c4 <__FUNCTION__.17949>:
   384c4:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

000384d0 <__FUNCTION__.17978>:
   384d0:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

000384e0 <__FUNCTION__.18009>:
   384e0:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   384f0:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   38500:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   38510:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   38520:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   38530:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   38540:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   38550:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   38560:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   38570:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

00038580 <__FUNCTION__.17806>:
   38580:	6863 7069 775f 6b61 0065 0000               chip_wake...

0003858c <__FUNCTION__.17855>:
   3858c:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   3859c:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   385ac:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   385bc:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   385cc:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   385dc:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   385ec:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   385fc:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   3860c:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   3861c:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   3862c:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   3863c:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   3864c:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   3865c:	6920 696e 2074 7562 0a73 0000                init bus...

00038668 <__FUNCTION__.17853>:
   38668:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

00038674 <__FUNCTION__.17860>:
   38674:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

00038684 <crc7_syndrome_table>:
   38684:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   38694:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   386a4:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   386b4:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   386c4:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   386d4:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   386e4:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   386f4:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   38704:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   38714:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   38724:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   38734:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   38744:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   38754:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   38764:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   38774:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   38784:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   38794:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   387a4:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   387b4:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   387c4:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   387d4:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   387e4:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   387f4:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   38804:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   38814:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   38824:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   38834:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   38844:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   38854:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   38864:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   38874:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   38884:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   38894:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   388a4:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   388b4:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   388c4:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   388d4:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   388e4:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   388f4:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   38904:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   38914:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   38924:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   38934:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   38944:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   38954:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   38964:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   38974:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   38984:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   38994:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   389a4:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   389b4:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   389c4:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   389d4:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   389e4:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   389f4:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   38a04:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   38a14:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   38a24:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   38a34:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   38a44:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   38a54:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   38a64:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   38a74:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   38a84:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   38a94:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   38aa4:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   38ab4:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38ac4:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   38ad4:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   38ae4:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   38af4:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   38b04:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   38b14:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   38b24:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   38b34:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   38b44:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   38b54:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   38b64:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38b74:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   38b84:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   38b94:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   38ba4:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   38bb4:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   38bc4:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   38bd4:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   38be4:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   38bf4:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   38c04:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   38c14:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   38c24:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   38c34:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   38c44:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   38c54:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   38c64:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   38c74:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   38c84:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   38c94:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   38ca4:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   38cb4:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   38cc4:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   38cd4:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   38ce4:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   38cf4:	2e2e 0a2e 0000 0000 2604 0002 2604 0002     .........&...&..
   38d04:	2694 0002 2558 0002 259e 0002 25c0 0002     .&..X%...%...%..
   38d14:	2646 0002 2646 0002 2700 0002 252c 0002     F&..F&...'..,%..
   38d24:	275a 0002 275a 0002 275a 0002 275a 0002     Z'..Z'..Z'..Z'..
   38d34:	25e2 0002 2b64 0002 2b64 0002 2bec 0002     .%..d+..d+...+..
   38d44:	2ac8 0002 2b0a 0002 2b28 0002 2ba2 0002     .*...+..(+...+..
   38d54:	2ba2 0002 2c4e 0002 2aa0 0002 2c9e 0002     .+..N,...*...,..
   38d64:	2c9e 0002 2c9e 0002 2c9e 0002 2b46 0002     .,...,...,..F+..

00038d74 <__FUNCTION__.17128>:
   38d74:	7073 5f69 6d63 0064                         spi_cmd.

00038d7c <__FUNCTION__.17135>:
   38d7c:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

00038d8c <__FUNCTION__.17144>:
   38d8c:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

00038d98 <__FUNCTION__.17177>:
   38d98:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   38da8:	0000 0000                                   ....

00038dac <__FUNCTION__.17223>:
   38dac:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

00038dbc <__FUNCTION__.17235>:
   38dbc:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

00038dcc <__FUNCTION__.17246>:
   38dcc:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

00038ddc <__FUNCTION__.17258>:
   38ddc:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

00038dec <__FUNCTION__.17269>:
   38dec:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

00038df8 <__FUNCTION__.17290>:
   38df8:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   38e08:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   38e18:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   38e28:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   38e38:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   38e48:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   38e58:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   38e68:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   38e78:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   38e88:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   38e98:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   38ea8:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   38eb8:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   38ec8:	2074 2230 0000 0000                         t 0"....

00038ed0 <lun_desc>:
   38ed0:	e1fd 0001 e255 0001 e2a1 0001 e2ed 0001     ....U...........
   38ee0:	e31d 0001 e3a1 0001 e431 0001 8eb8 0003     ........1.......
   38ef0:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   38f00:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   38f10:	8582 0002 85fc 0002 85fc 0002 85a0 0002     ................
   38f20:	859a 0002 85a6 0002 8588 0002 85ac 0002     ................
   38f30:	85e2 0002 87e4 0002 8834 0002 8834 0002     ........4...4...
   38f40:	8830 0002 87d6 0002 87f6 0002 87c6 0002     0...............
   38f50:	8808 0002 881a 0002 8882 0002 88b0 0002     ................
   38f60:	88b0 0002 88ac 0002 887c 0002 8888 0002     ........|.......
   38f70:	8876 0002 888e 0002 8894 0002               v...........

00038f7c <tcc_modules>:
   38f7c:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

00038f88 <_tcc_gclk_ids>:
   38f88:	1a1a 001b                                   ....

00038f8c <_tcc_apbcmasks>:
   38f8c:	0100 0000 0200 0000 0400 0000               ............

00038f98 <_tcc_maxs>:
   38f98:	ffff 00ff ffff 00ff ffff 0000               ............

00038fa4 <_tcc_cc_nums>:
   38fa4:	0204 0002                                   ....

00038fa8 <_tcc_ow_nums>:
   38fa8:	0408 0002                                   ....

00038fac <_tcc_intflag>:
   38fac:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   38fbc:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   38fcc:	0000 0001 0000 0002 0000 0004 0000 0008     ................

00038fdc <LfnOfs>:
   38fdc:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   38fec:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   38ffc:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   3900c:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   3901c:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   3902c:	5441 2020 2020 0020                         AT     .

00039034 <excvt.4558>:
   39034:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   39044:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   39054:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   39064:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   39074:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   39084:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   39094:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   390a4:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

000390b4 <Tbl>:
   390b4:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   390c4:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   390d4:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   390e4:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   390f4:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   39104:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   39114:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   39124:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   39134:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   39144:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   39154:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   39164:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   39174:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   39184:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   39194:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   391a4:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

000391b4 <tbl_lower.4308>:
   391b4:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   391c4:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   391d4:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   391e4:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   391f4:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   39204:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   39214:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   39224:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   39234:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   39244:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   39254:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   39264:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   39274:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   39284:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   39294:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   392a4:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   392b4:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   392c4:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   392d4:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   392e4:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   392f4:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   39304:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   39314:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   39324:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   39334:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   39344:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   39354:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   39364:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   39374:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   39384:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

00039394 <tbl_upper.4309>:
   39394:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   393a4:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   393b4:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   393c4:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   393d4:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   393e4:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   393f4:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   39404:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   39414:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   39424:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   39434:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   39444:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   39454:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   39464:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   39474:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   39484:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   39494:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   394a4:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   394b4:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   394c4:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   394d4:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   394e4:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   394f4:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   39504:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   39514:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   39524:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   39534:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   39544:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   39554:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   39564:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   39574:	dd1a 0002 dd1a 0002 dd1a 0002 dba8 0002     ................
   39584:	dd1a 0002 dc92 0002 dd1a 0002 dd1a 0002     ................
   39594:	dd1a 0002 dd1a 0002 dd1a 0002 dd1a 0002     ................
   395a4:	dd1a 0002 dd0c 0002 514d 4354 0000 0000     ........MQTC....
   395b4:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   395c4:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   39604:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   3961c:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   3965c:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   3966c:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   3967c:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   3968c:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   3969c:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   396ac:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   396bc:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   396cc:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   396dc:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   396ec:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   396fc:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   3970c:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   3971c:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   3972c:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   3973c:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   3974c:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   3975c:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   3976c:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   3977c:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   3978c:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   3979c:	5448 5054 002f 0000 0d31 0000 fe0e 0002     HTTP/...1.......
   397ac:	fe08 0002 fe02 0002 fdfc 0002 fe14 0002     ................
   397bc:	fdf6 0002 fe14 0002 fdf0 0002 fdea 0002     ................
   397cc:	fe14 0002 fde4 0002 fde4 0002 fdde 0002     ................
   397dc:	fdd8 0002 fdd2 0002 2000 4200 2400 4200     ......... .B.$.B
   397ec:	2800 4200 0a0d 0a0d 2d2d 2d2d 452d 4553     .(.B....-----ESE
   397fc:	3135 2036 614d 6e69 5020 6f72 7267 6d61     516 Main Program
   3980c:	2d2d 2d2d 0d2d 000a 0a0d 0a0d 6e49 7469     -----.......Init
   3981c:	6169 696c 657a 4820 2e57 2e2e 0a0d 0000     ialize HW.......
   3982c:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   3983c:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   3984c:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   3985c:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   3986c:	6548 7061 6220 6665 726f 2065 7473 7261     Heap before star
   3987c:	6974 676e 7420 7361 736b 203a 6425 0a0d     ting tasks: %d..
   3988c:	0000 0000 4c43 5f49 4154 4b53 0000 0000     ....CLI_TASK....
   3989c:	5245 3a52 4320 494c 7420 7361 206b 6f63     ERR: CLI task co
   398ac:	6c75 2064 6f6e 2074 6562 6920 696e 6974     uld not be initi
   398bc:	6c61 7a69 6465 0d21 000a 0000 6548 7061     alized!.....Heap
   398cc:	6120 7466 7265 7320 6174 7472 6e69 2067      after starting 
   398dc:	4c43 3a49 2520 0d64 000a 0000 4957 4946     CLI: %d.....WIFI
   398ec:	545f 5341 004b 0000 5245 3a52 5720 4649     _TASK...ERR: WIF
   398fc:	2049 6174 6b73 6320 756f 646c 6e20 746f     I task could not
   3990c:	6220 2065 6e69 7469 6169 696c 657a 2164      be initialized!
   3991c:	0a0d 0000 6548 7061 6120 7466 7265 7320     ....Heap after s
   3992c:	6174 7472 6e69 2067 4957 4946 203a 6425     tarting WIFI: %d
   3993c:	0a0d 0000 4955 5420 7361 006b 5245 3a52     ....UI Task.ERR:
   3994c:	5520 2049 6174 6b73 6320 756f 646c 6e20      UI task could n
   3995c:	746f 6220 2065 6e69 7469 6169 696c 657a     ot be initialize
   3996c:	2164 0a0d 0000 0000 6548 7061 6120 7466     d!......Heap aft
   3997c:	7265 7320 6174 7472 6e69 2067 4955 5420     er starting UI T
   3998c:	7361 3a6b 2520 0d64 000a 0000 7245 6f72     ask: %d.....Erro
   3999c:	2072 6e6f 6d20 6d65 726f 2079 6c61 6f6c     r on memory allo
   399ac:	6163 6974 6e6f 6f20 206e 5246 4545 5452     cation on FREERT
   399bc:	534f 0d21 000a 0000 7245 6f72 2072 6e6f     OS!.....Error on
   399cc:	7320 6174 6b63 6f20 6576 6672 6f6c 2077      stack overflow 
   399dc:	6e6f 4620 4552 5245 4f54 2153 0a0d 0000     on FREERTOS!....
   399ec:	22e4 0003 22b4 0003 22c6 0003 2208 0003     ."..."..."..."..
   399fc:	22c6 0003 22aa 0003 22c6 0003 2208 0003     ."..."..."..."..
   39a0c:	22b4 0003 22b4 0003 22aa 0003 2208 0003     ."..."..."..."..
   39a1c:	2210 0003 2210 0003 2210 0003 22cc 0003     ."..."..."..."..
   39a2c:	22b4 0003 22b4 0003 2288 0003 236c 0003     ."..."..."..l#..
   39a3c:	2288 0003 22aa 0003 2288 0003 236c 0003     ."..."..."..l#..
   39a4c:	22b4 0003 22b4 0003 22aa 0003 236c 0003     ."..."..."..l#..
   39a5c:	2210 0003 2210 0003 2210 0003 2376 0003     ."..."..."..v#..
   39a6c:	2514 0003 2464 0003 2464 0003 2462 0003     .%..d$..d$..b$..
   39a7c:	2506 0003 2506 0003 24fc 0003 2462 0003     .%...%...$..b$..
   39a8c:	2506 0003 24fc 0003 2506 0003 2462 0003     .%...$...%..b$..
   39a9c:	250c 0003 250c 0003 250c 0003 259c 0003     .%...%...%...%..
   39aac:	3258 0003 323a 0003 31f4 0003 3112 0003     X2..:2...1...1..
   39abc:	31f4 0003 322c 0003 31f4 0003 3112 0003     .1..,2...1...1..
   39acc:	323a 0003 323a 0003 322c 0003 3112 0003     :2..:2..,2...1..
   39adc:	310a 0003 310a 0003 310a 0003 3470 0003     .1...1...1..p4..
   39aec:	38b8 0003 3778 0003 3778 0003 3774 0003     .8..x7..x7..t7..
   39afc:	3890 0003 3890 0003 3882 0003 3774 0003     .8...8...8..t7..
   39b0c:	3890 0003 3882 0003 3890 0003 3774 0003     .8...8...8..t7..
   39b1c:	3898 0003 3898 0003 3898 0003 3a9c 0003     .8...8...8...:..

00039b2c <_global_impure_ptr>:
   39b2c:	0124 2000                                   $.. 

00039b30 <__sf_fake_stderr>:
	...

00039b50 <__sf_fake_stdin>:
	...

00039b70 <__sf_fake_stdout>:
	...
   39b90:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   39ba0:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   39bb0:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   39bc0:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

00039bcd <_ctype_>:
   39bcd:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   39bdd:	2020 2020 2020 2020 2020 2020 2020 2020                     
   39bed:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   39bfd:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   39c0d:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   39c1d:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   39c2d:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   39c3d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   39c4d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00039cd0 <_init>:
   39cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39cd2:	46c0      	nop			; (mov r8, r8)
   39cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   39cd6:	bc08      	pop	{r3}
   39cd8:	469e      	mov	lr, r3
   39cda:	4770      	bx	lr

00039cdc <__init_array_start>:
   39cdc:	000120dd 	.word	0x000120dd

00039ce0 <_fini>:
   39ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39ce2:	46c0      	nop			; (mov r8, r8)
   39ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   39ce6:	bc08      	pop	{r3}
   39ce8:	469e      	mov	lr, r3
   39cea:	4770      	bx	lr

00039cec <__fini_array_start>:
   39cec:	000120b5 	.word	0x000120b5
